<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Even if Java and C++ display some similarities, particularly in the syntax, they are widely different languages and translating one into the other isn't automatic. Java is chiefly object-oriented, while C++ is more of a multi-paradigm language; one could even argue that it's drifting away from the object-oriented model towards a more functional approach designed to take advantage of compile-time customization and calculations.</p>

<p>So, it's best to take a step back and think again about your objectives and the means you have to achieve them when you transition from one to the other.</p>

<p>What you seem to need is a mapping between a unit, a textual representation and a floating precision proportion. Java allows for <code>float</code> based <code>enum</code>s, which are thus a good candidate -even if the textual representation needs to be addressed somewhere else- but C++ doesn't. On the other hand, in the most recent version of the C++ standard, you can create and manipulate arrays at compile-time:</p>

<pre><code>constexpr std::pair&lt;std::string_view, float&gt; weight_units[] {
    { "kg", 1. },
    { "lb", 0.45359237 },
    { "oz", 0.028349523125 },
};

constexpr auto weight_unit_value(std::string_view unit) {
    return std::find_if(std::begin(weight_units), std::end(weight_units), [unit](auto uv) {
        return uv.first == unit;
    })-&gt;second;
}
</code></pre>

<p>This code sadly compiles only with the latest version of clang, because gcc hasn't implemented the <code>constexpr</code> version of the standard algorithms yet. But writing it by hand would take 5 minutes. Or you can simply remove the <code>constexpr</code> qualifier.</p>

<p>This code has several advantages over the original Java version, the most important being that everything is defined once in one place. If you want to create a new unit in the original code, you need to modify the <code>enum</code> and create a new object with a custom name; here, you just extend the array.</p>

<p>Now, the array is also very handy if you want to parse a weight from a string, or convert a weight to a string:</p>

<pre><code>// ex: float weight = parse_weight("1204.3 lb");
auto parse_weight(std::string_view weight) {
    auto coeff =  std::find_if(std::begin(weight_units), std::end(weight_units), [weight](auto uv) {
        return weight.ends_with(uv.first);
    })-&gt;second;
    return std::stof(weight.data()) * coeff;
}

auto to_string(float value, std::string_view unit_name) {
    auto result = std::to_string(value / weight_unit_value(unit_name));
    auto out = std::back_inserter(result);
    *out++ = ' ';
    std::copy(unit_name.begin(), unit_name.end(), out);
    return result;
}
</code></pre>

<p>Error handling could be added very easily (<code>auto found = std::find_if(...); if (found == std::end(units)) throw unknown_unit("blabla");</code></p>

<p>Here's some code to toy with: <a href="https://wandbox.org/permlink/zj0hckfk6jR0vrXT" rel="nofollow noreferrer">https://wandbox.org/permlink/zj0hckfk6jR0vrXT</a></p>
    </div>