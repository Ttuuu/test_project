<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>That's a fine small piece of software for a beginner. Here is my review:</p>

<p><strong><code>const</code>-modifier</strong><br>
Since you don't modify the contents of the <code>char *s</code> you can safely change your function signature to <code>void invert(const char *s)</code>.</p>

<p><strong>Too many <code>strlen()</code> calls</strong><br>
You execute <code>strlen(s)</code> every <code>for</code>-loop iteration. This is quite bad for the performance (especially for large strings) since <code>strlen</code> loops through your whole string each call. If your string is 100 characters long (beside the <code>NULL-character</code>) this ends up in 100*100 = 10000 iterations.<br>
As a quick solution you could just create a variable <code>length</code> and store the length of your string once. From that point on you'll compare with <code>length</code> instead of <code>strlen(x)</code> and will get the same result (since, <code>s</code> doesn't change while execution).</p>

<p><strong>Comparison unused</strong>
<code>n &lt; strlen(s)</code> remains unused in your first <code>for</code>-loop. I think you want to connect the two comparisons with <code>&amp;&amp;</code>:</p>

<pre><code>for (i = strlen(s) - 1, n = 0; n &lt; strlen(s) &amp;&amp; i &gt;= 0; i--, n++)
</code></pre>

<p><strong>Why even reverse?</strong><br>
Since your function prints the reversed string, but doesn't return anything. You don't really need to reverse it. You could just loop through the input string starting at the end (like you did in your first loop), printing all the characters. The extra array only makes sense, if you return a pointer to it for later use.</p>
    </div>