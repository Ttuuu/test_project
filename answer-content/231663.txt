<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'll explain a little bit about Edward's suggestions (for anyone that stumbles upon this question like I did); in particular, I'll focus on private vs. public vs. protected variables, and why a 'reference' is often better than a 'pointer'.</p>

<p><strong>Private vs. Public vs. Protected</strong></p>

<p>When a function is declared in the header, there are three possible 'levels' of access (called 'access specifiers'):</p>

<p>'Private' means that the function or variable is only accessible by that specific class, and no other.  Outside classes are never allowed to call anything under the 'private' category, so there's no risk of another class calling a function that it shouldn't.</p>

<p>'Public': any class can access a 'public' function or variable.  For critical functions, this is far from ideal:  anything that tries to call a 'public' function or variable will be able to do so, even if that causes undesirable operation.</p>

<p>The 'Protected' category is the middle-ground between 'public' and 'private': protected functions and variables can only be accessed by their own class and anything that derives from that class.  Use this specifier to avoid creating redundant variables (you don't need to create an individual 'health' variable for each and every subclass of 'creature', for example).</p>

<p><strong>Pointers vs. References</strong></p>

<p>It's sometimes hard to know when you should use a pointer instead of a reference, or vice-versa.  Here's the bare-bones explanation. </p>

<p>'Pointers' are generally non-destructive; they create a <strong>copy</strong> of the data at a specific memory address, and perform operations on that copy.  This is useful when multiple functions make use of a particular variable, because each individual function will get its own copy of that variable to work with.</p>

<p>References are different: they're connected to one object, and one object only, and they can't be 'reseated' to refer to a different object.  Unlike a pointer, they directly access stored data; any changes to the data will necessarily overwrite what's already been stored.  Use a reference to modify data that is unique to a particular object, such as a player-character's name.</p>

<p>Anyhow, this is getting very long, so I'll leave it here.  I hope this helps those of you that arrive and wonder why it's important to do things in a particular way. :)</p>
    </div>