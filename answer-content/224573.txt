<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I have some tips regarding C# conventions.</p>

<ul>
<li>Public fields should be replaced with public properties and should be title-cased. For insance <code>Board.width</code>, <code>Board.height</code>.</li>
<li>Think about whether certain fields should be encapsulated within the instance and can only be mutated by methods on the instance. <code>Tile.tileX</code>, <code>Tile.tileY</code> are good candidates to encapsulate to avoid letting other classes changing these values out of bounds.</li>
<li>Don't repeat class name in variable names. <code>Tile.tileX</code> should be called <code>Tile.X</code>.</li>
<li>Use formatted string where possible: <code>$"({i},{j})"</code>. In this particular, case you could have used a <code>ValueTuple</code> <code>(i, j).ToString()</code> to get the same output.</li>
<li>Be consistent with white space, parentheses: at one moment you have 3 consecutive methods with 3 different styles of white space <code>Setup (){</code>, <code>CollapseColumnCo(){</code>, <code>RefillBoard() {</code>.</li>
<li>I don't get why you have an empty method <code>void Update(){</code> which is not an interface implementation.</li>
<li>Some <em>if</em> statements could be replaced with ternary operators to avoid redundant code: see  <code>this.gameObject.transform.localScale</code> in method <code>Update</code> and condition <code>inChain == true</code>.</li>
<li>Conditions should not be checked against true/false: <code>if (inChain == true)</code> should be written as <code>if (inChain)</code>.</li>
<li>Cache redundant calls in a local variable: <code>board.GetComponent&lt;Link&gt;().chainHead.GetComponent&lt;Tile&gt;()</code> should be cachec before all the <code>if</code> statements in <code>IsAdjacentToHead</code>.</li>
<li>Some of your loops could be refactored to use LINQ: <code>foreach (GameObject x in board.GetComponent&lt;Link&gt;().chain)</code> <code>x.GetComponent&lt;Tile&gt;().inChain = false;</code>. See <code>IList&lt;T&gt;.ForEach(Action&lt;T&gt; action)</code> extension method.</li>
</ul>
    </div>