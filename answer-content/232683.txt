<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You can get rid of the lifetimes completely, just replace every instance of:</p>

<pre><code>&amp;'a N
</code></pre>

<p>with just:</p>

<pre><code>N
</code></pre>

<p><a href="https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=48c01c536c25205dfeaef4c63a68fea6" rel="nofollow noreferrer">See Playground</a></p>

<p>But why? Well, in your current code N is inferred to be i32. However, with my suggested changes N will be inferred to be &amp;'a i32. If you allow Rust to infer the reference it will also infer the correct lifetime for you.</p>

<p>But does this, as you ask, leak implementation details of <code>DebugFollower</code>? Not from a Rust perspective. In Rust, ownership details are very much part of the interface and not just an implementation detail. The key issue is that the <code>Follower</code> trait has to specify how long the references will be valid so that <code>DebugFollower</code> knows how long it is allowed to store those references.</p>
    </div>