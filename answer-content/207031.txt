<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>Question 1</p>
  
  <p>Is this all reasonable?</p>
</blockquote>

<p>Absolutely!</p>

<blockquote>
  <p>Question 2</p>
  
  <p>I noticed that the component will re-render when it receives a new
  currentPage and then re-renders again, once the data is loaded. The
  first re-render is not necessary as nothing changes before data is
  actually loaded. Should I just live with this or should I implement
  shouldComponentUpdate() to check if data has changed. Or is that
  potentially even more costly than the re-render itself?</p>
</blockquote>

<p>This is normal, and I wouldn't worry about it. In fact, not having to worry about these types of things is a major goal of React. </p>

<p>It's important to realize that re-renders in React <em>only update the DOM when there are changes</em> and <em>only update the relevant DOM nodes</em>. DOM operations are very time consuming, because DOM objects are incredibly heavy objects, and updates have knock-on effects. This is one of the main reasons React doesn't use DOM objects internally. Instead, it uses a <a href="https://reactjs.org/docs/faq-internals.html" rel="nofollow noreferrer">virtual DOM</a>. Through a process called <a href="https://reactjs.org/docs/reconciliation.html" rel="nofollow noreferrer">reconciliation</a>, React can update the real DOM from the virtual DOM incredibly fast. </p>

<p>In the state where the page changes, but you don't have data yet, React will call render(), very quickly realize there are no changes to the element tree, then stop - this probably happens in roughly a millisecond.</p>

<p>On that note, you do need to be careful when you use Redux - specifically react-redux / connect(). Try to keep mappings of state to props as minimal as possible – don't map an entire object from the Redux tree to a prop for a component if you only need one property of that object. The reason this is important, is because:</p>

<ul>
<li>Your reducers generate new objects every time they run (if you're using them correctly)</li>
<li>Redux and React use JavaScript's default comparison when deciding if it should update a component</li>
<li>Every <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness" rel="nofollow noreferrer">object is distinct in JavaScript</a>, even if their structure is identical</li>
</ul>

<p>So a reducer takes one object, then generates a new object, and even if the <em>properties of these objects</em> are exactly the same, React/Redux will treat it like a change and update components. This is OK for one component, but if you make this a habit your application, you'll be missing out on one of React's biggest features: performance.</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="true">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>// Do this:

const GoodComponent = (props) =&gt; `page number: ${props.page}`;

connect(state =&gt; {
  page: pagination.page
})(GoodComponent)


// ... not this:

const BadComponent = (props) =&gt; `page number: ${props.pagination.page}`;

connect(state =&gt; {
  pagination: pagination
})(BadComponent)</code></pre>
</div>
</div>


<blockquote>
  <p>Question 3</p>
  
  <p>Is using componentDidUpdate() to check if currentPage has changed and
  then re-load the data a good way of controlling the load process?</p>
</blockquote>

<p>Absolutely - this is probably why componentDidUpdate() was created.</p>

<blockquote>
  <p>Question 4</p>
  
  <p>Is building the URL this way acceptable?</p>
  
  <p>const pageParam = currentPage ? "?_page=" + currentPage : "";
  fetch('<a href="https://jsonplaceholder.typicode.com/posts/" rel="nofollow noreferrer">https://jsonplaceholder.typicode.com/posts/</a>' + pageParam)</p>
</blockquote>

<p>It's probably OK for now, although you could use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals" rel="nofollow noreferrer">template literals</a>. I generally avoid constructing the query string manually, except for the simplest cases. This is because the second you have multiple query params and some of them are optional, the construction gets tricky – what adds the question mark? how to handle trailing ampersands? trailing question mark?. Instead, use the <a href="https://developer.mozilla.org/en-US/docs/Web/API/URL/searchParams" rel="nofollow noreferrer">URL API's searchParams property</a>. Or, find a library that gives you more conveniences, like being able to provide query params as a dictionary/object in fetch()'s second argument.</p>
    </div>