<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>import os, codecs, datetime, glob

E401 multiple imports on one line
</code></pre>

<p>Recommend you run <a href="http://flake8.pycqa.org/en/latest/" rel="nofollow noreferrer"><code>$ flake8</code></a> and heed its advice,
as <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP-8</a> asks for just one import per line.
Use <a href="https://pypi.org/project/isort/" rel="nofollow noreferrer"><code>isort</code></a> to organize them.</p>

<p>Each of your functions has lovely comments; thank you.
Recommend you turn the one-sentence comments into docstrings.</p>

<p>The <code>add_subtitles()</code> function is maybe slightly long,
and could be broken out into one or two helpers.
The arg list is on the long side.
<code>Width</code> + <code>height</code> could trivially be collapsed into <code>size</code>,
but I wonder if some of the other attributes, like colour,
might sensibly be defaulted from an object that has an <code>add_subtitles()</code> method.</p>

<pre><code>        if max_length_subtitles &lt; sub_size[0]:
            max_length_subtitles = sub_size[0]
</code></pre>

<p>A more pythonic way to express this would be to
construct a list of font sizes, and then
assign <code>max( ... )</code> of those sizes.</p>

<p>Similarly, please assign <code>sub_bg_right</code> as <code>max</code> of two numbers.</p>

<p>It feels like much of this logic could sensibly be encapsulated
within a <code>sub_bg</code> object.</p>

<pre><code>        draw.text(..., font = font)
</code></pre>

<p>PEP-8 asks for spaces around <code>=</code> assignment, but no spaces around <code>=</code> keyword args: <code>font=font</code>.</p>

<p>Nice comments on <code>make_video()</code>.
Again, it takes quite a few args.
It feels like a subtitle object could encapsulate several of them.
These args are trouble:</p>

<pre><code>            description_intro = [''],
            file_encoding = 'utf-8', 
            image_extensions = ['jpg', 'png'],
            audio_extensions = ['mp3', 'wav'], 
</code></pre>

<p>Well, file_encoding is fine, just lose the extra blanks around <code>=</code> equals.
But the lists are trouble.
Now, I know you're not mutating them.
But it's a <a href="https://docs.python-guide.org/writing/gotchas/" rel="nofollow noreferrer">gotcha</a>, evaluating and binding a mutable list at function definition time.
Don't get in the habit of doing that.
Make it default to an immutable sequence, such as a (tuple),
or use the usual idiom:</p>

<pre><code>def foo(name, extensions=None):
    if extensions is None:
        extensions = ['jpg', 'png']
</code></pre>

<p>The point is to re-evaluate the assignment on each execution of <code>foo()</code>,
rather than binding an immortal list just once.</p>

<pre><code>if not os.path.exists(temp_folder):
    os.makedirs(temp_folder)
</code></pre>

<p>Feel free to save one line by specifying <a href="https://docs.python.org/3/library/os.html#os.makedirs" rel="nofollow noreferrer"><code>, exist_ok=True</code></a>.</p>

<p>You could easily break out a few helpers from this function,
for example the whole <code>audio_filenames</code> loop is naturally a helper function.</p>

<pre><code>    if not ('artist' in audio_mediainfo):
</code></pre>

<p>That's fine, but testing <code>if 'artist' not in audio_mediainfo:</code> is
slightly more pythonic.</p>

<pre><code>    if (artist_override != None):  
</code></pre>

<ol>
<li>No need for <code>(</code> extra parens <code>)</code> in a python <code>if</code>.</li>
<li><p>Please test <code>is</code> identity of the <code>None</code> singleton, rather than equality: <code>if artist_override is not None:</code>. Or, more simply: <code>if artist_override:</code></p>

<pre><code>while (counter_seconds &lt;= limit_audio_length_so_far):
</code></pre></li>
</ol>

<p>No <code>(</code> extra parens <code>)</code> in a python <code>while</code>, please.</p>

<pre><code>if video_title == None:
</code></pre>

<p>Please test <code>is None</code>.</p>

<pre><code>                "It should be under 202-205min (this is a pydub limitation)",
                ...
                "It should be under 4500-5000 characters long (this is a youtube limitation)",
</code></pre>

<p>There are limits, but you're not telling me what they are.
Put a stake in the ground, say 202 min. and 4500 char. and be done with it.</p>

<pre><code>title = audio_mediainfo['title'].strip().replace('\\', '')
</code></pre>

<p>This is apparently sanitizing a filename, making it safe to open for write.
That is, you are rejecting Known Bad unicode code points.
I would be more convinced if you instead used <a href="https://docs.python.org/3/library/stdtypes.html#str.maketrans" rel="nofollow noreferrer">maketrans</a> and <a href="https://docs.python.org/3/library/stdtypes.html#str.translate" rel="nofollow noreferrer">translate</a> to
accept Known Good characters.</p>

<p>You tend to accommodate long expressions with <code>\</code> backwhack continuation characters.
Consider using <code>(</code> parens <code>)</code> instead:</p>

<pre><code>short_string = 'Hi!'
much_longer_string = ('This,'
                      ' that,'
                      ' and the other.')
</code></pre>
    </div>