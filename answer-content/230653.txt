<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>With</p>

<pre><code>final static int lower_case_a = 'a';
final static int lower_case_z = 'z';
</code></pre>

<p>While it's arguably good that you have <code>'a'</code> and <code>'z'</code> stored as variables and not floating around, I don't think they're named well. <code>lower_case_a</code> tells you exactly as much as <code>'a'</code> itself, so you aren't really gaining much. The <em>purpose</em> of the variable would make for a better name. Also, since those are constants, <a href="https://www.oracle.com/technetwork/articles/javaee/codeconventions-135099.html" rel="nofollow noreferrer">they should be upper case, and underscore-separated</a>. I'd change those lines to:</p>

<pre><code>final static int ALPHABET_LOWER_BOUND = 'a';
final static int ALPHABET_UPPER_BOUND = 'z';
</code></pre>

<p>Also, as mentioned in the above link, Java uses camelCase, not snake_case.</p>

<hr>

<pre><code>if ((int)c &gt;= lower_case_a &amp;&amp; (int)c &lt;= lower_case_z)
    reverse.append((char)(lower_case_z - c + lower_case_a));
else
    reverse.append((char) c);
</code></pre>

<p>This has a few notable things:</p>

<ul>
<li><p>Do not omit braces here. I won't go as far as to say that they should <em>never</em> be omitted, but the cases where it's appropriate to not use them are pretty slim. If you ever make changes to those lines and don't notice that you didn't use braces, at best you'll need to deal with syntax errors, and at worst you'll get weird behavior that you'll need to debug. Just use them. It costs next to nothing and prevents a range of errors.</p></li>
<li><p>Instead of writing <code>(int)c</code> in a few places, I'd probably instead save that in a variable.</p></li>
<li><p><code>(char) c</code> isn't necessary. <code>c</code> is already a <code>char</code>.</p></li>
<li><p>You could use a ternary since each branch is just giving its data to <code>append</code>.</p></li>
</ul>

<p>Something closer to:</p>

<pre><code>int code = c;
char newChar = (code &gt;= ALPHABET_LOWER_BOUND &amp;&amp; code &lt;= ALPHABET_UPPER_BOUND)
                 ? (ALPHABET_UPPER_BOUND - c + ALPHABET_LOWER_BOUND) : c;

reverse.append(newChar);
</code></pre>

<p>Although whether you'd want to use a ternary here is subjective. That line is a little long.</p>

<p>I also agree with @dariosicily though. You never use <code>i</code> for anything other than indexing, so you might as well just use a foreach loop and iterate the string directly.</p>
    </div>