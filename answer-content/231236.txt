<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Type hints</h2>

<pre><code>def bresenham(x0, y0, x1, y1):
</code></pre>

<p>should be, at a guess,</p>

<pre><code>def bresenham(x0: float, y0: float, x1: float, y1: float) -&gt; List[float]:
</code></pre>

<p>or maybe <code>int</code>, but you get the idea.</p>

<h2>Type promotion</h2>

<p>You don't need decimals here:</p>

<pre><code>err = dx / 2.0
</code></pre>

<p><code>/2</code> will accomplish the same thing.</p>

<h2>Termination</h2>

<p>What happens if you call <code>bresenham(0, 0, 9.5, 9.5)</code>? I suspect that it will iterate infinitely and hang, due to</p>

<pre><code>  while x != x1:
</code></pre>

<p>One way to fix this, if your algorithm permits, is - rather than making an <code>sx</code> dependent on the comparison of <code>x0</code> and <code>x1</code>, simply swap <code>x0</code> and <code>x1</code> if they're in the wrong order. Then, rather than <code>!=</code>, use <code>&lt;</code>, and you don't have to calculate <code>sx</code>.</p>

<h2>Use a generator</h2>

<p>For some use cases this will dramatically decrease memory consumption. Instead of building up <code>points</code> in memory, just <code>yield</code> whenever you have a point. Allow the caller to decide whether they want to cast to a <code>list</code>, a <code>tuple</code>, or just iterate over the points.</p>

<h2>Int casting</h2>

<pre><code>  n_rows = int(2 * max([abs(point_y) for point_y in points_y]) + 1)
</code></pre>

<p>is overambitious in application of the <code>int</code> cast. The multiplication and addition don't need to be done in floating-point math, so you can instead do</p>

<pre><code>  n_rows = 2 * int(max(abs(point_y) for point_y in points_y)) + 1
</code></pre>

<p>Also note that you shouldn't pass a <code>list</code> to <code>max</code> - just pass the generator directly.</p>
    </div>