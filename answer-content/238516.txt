<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The pandas library has various <a href="https://pandas.pydata.org/docs/user_guide/timeseries.html" rel="nofollow noreferrer">functions for creating, manipulating and selecting date ranges</a>.  For example, <code>date_range(start, stop)</code> creates a range of dates.  <code>bdate_range(start, stop, ...)</code> can take a mask to only create certain days of the week, and can skip holidays.</p>

<p>One way to create your example date range:</p>

<pre><code>import pandas as pd

a = pd.bdate_range(start="2020-01-01", end="2020-01-04", freq='C', weekmask='Mon Tue Wed Thu Fri Sat')
</code></pre>

<p>Another method might be to create the dates and then select the dates matching the description.  Something like:</p>

<pre><code># create a range of dates
a = pd.date_range(start="2020-01-01", end="2020-12-31")

# select dates according to a description
weekday = a.dayofweek &lt; 5

jan_to_mar = a.month.isin([0,1,2])
apr_to_oct = a.month.isin([3,4,5,6,7,8,9])
nov_to_dec = a.month.isin([10,11])

weekdays_in_jan_to_mar = a[weekday &amp; jan_to_mar]
weekdays_in_apr_to_oct = a[weekday &amp; apr_to_oct]
weekdays_in_nov_to_dec = a[weekday &amp; nov_to_dec]

weekends = a[~weekday]
</code></pre>

<p>This later method could be generalized along the lines of <code>get_days()</code> to put the desired values in the call to <code>a.month.isin()</code> (or a.dayofweek.isin()).</p>

<pre><code>DAYOFWEEK = dict(zip('mon tue wed thu fri sat sun'.split(), range(7)))
MONTH = dict(zip("jan feb mar apr may jun jul aug sep oct nov dec".split(), range(1, 13)))

def get_buckets(start, end, descriptions):
    dates = pd.date_range(start, end)
    buckets = []

    for description in descriptions:

        description = description.strip().lower().split('-')
        start = description[0][:3]
        end = start if len(description) == 1 else description[1][:3]

        if start in DAYOFWEEK:
            start = DAYOFWEEK[start]
            end = DAYOFWEEK[end]
            span = 0, len(DAYOFWEEK)
            selector = dates.dayofweek

        else:
            start = MONTH[start]
            end = MONTH[end]
            span = 1, len(MONTH) + 1
            selector = dates.month

        if start &lt;= end:
            rng = set(range(start, end + 1))
        else:
            rng = set(range(*span)) - set(range(start - 1, end, - 1))

        buckets.append(dates[selector.isin(rng)])

    return buckets
</code></pre>

<p>By the way, the description of the problem implies that the buckets are mutually exclusive, but the code does not behave that way.  <code>get_dates()</code> and <code>usage()</code> will both put a date into multiple buckets</p>
    </div>