<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here is my functional solution with improved space complexity based on bit manipulation </p>

<p>Improvements </p>

<ul>
<li><p>@Lundin has already identified major issues with the author's solution, my solution provides additional improvements which are related to </p></li>
<li><p>Space  </p>

<ul>
<li><p>no need to count the actual number of times you observe a certain digit, just discriminate between 3 cases: never observed, observed once and observed more than once </p></li>
<li><p>the <code>once</code> variable represents in its first 10 bits the digits that have been observed once </p></li>
<li><p>the <code>more</code> variable represents in its first 10 bits the digits that have been observed more than once </p></li>
</ul></li>
<li><p>Style </p>

<ul>
<li>This solution is Functional with all the related advantages (more readable, more concise, ...)</li>
</ul></li>
</ul>

<p><strong>EDIT</strong>: My initial solution was in CPP so now I'm adding the C one: it is basically the same logic, all the CPP-specific stuff is not core </p>

<h2>C Solution</h2>

<pre class="lang-c prettyprint-override"><code>#include &lt;stdio.h&gt;

/**
  * @brief It just counts the number of 1s in a given binary representation 
  */
unsigned int count_ones(const unsigned int n, const unsigned int partial)
{
    if(n==0) return partial; 
    return ( (n&amp;1)==0 )?(count_ones(n/2, partial)):(count_ones(n/2, partial+1)); 
}

/**
  * @brief It counts the number of unique digits in a given base-10 number 
  */
unsigned int count( const unsigned int num, const unsigned int once, const unsigned int more )
{
    if(num==0) return (count_ones(once, 0)&gt;0)?(count_ones(once, 0)):1;  
    const unsigned int d = num%10; ///&lt; Just to make the code a bit more readable 

    if((once&amp;(1&lt;&lt;d))==0 &amp;&amp; (more&amp;(1&lt;&lt;d))==0) return count(num/10, once|(1&lt;&lt;d), more); ///&lt; New digit observed
    if((once&amp;(1&lt;&lt;d))==(1&lt;&lt;d)) return count(num/10, once&amp;(~(1&lt;&lt;d)), more|(1&lt;&lt;d)); ///&lt; Reobservation of a unique digit
    else return count(num/10, once, more); ///&lt; Reobservation of a non unique digit
}


int main(void) {
    // your code goes here
    printf("252 = %d\n", count(252,0,0));
    printf("25000 = %d\n", count(25000,0,0)); 
    printf("1234567890 = %d\n", count(1234567890, 0, 0)); 
    printf("0 = %d\n", count(0,0,0)); 
    return 0;
}

</code></pre>

<p>Output </p>

<pre><code>252 = 1
25000 = 2
1234567890 = 10
0 = 1

</code></pre>

<h2>CPP Solution</h2>

<pre class="lang-cpp prettyprint-override"><code>#include &lt;iostream&gt;
using namespace std;

/**
  * @brief It just counts the number of 1s in a given binary representation 
  */
unsigned int count_ones(const unsigned int n, const unsigned int partial=0)
{
    if(n==0) return partial; 
    return ( (n&amp;1)==0 )?(count_ones(n/2, partial)):(count_ones(n/2, partial+1)); 
}

/**
  * @brief It counts the number of unique digits in a given base-10 number 
  */
unsigned int count( const unsigned int num, const unsigned int once=0, const unsigned int more=0 )
{
    if(num==0) return max(count_ones(once, 0), static_cast&lt;unsigned int&gt;(1)); 
    const auto d = num%10; ///&lt; Just to make the code a bit more readable 

    if((once&amp;(1&lt;&lt;d))==0 &amp;&amp; (more&amp;(1&lt;&lt;d))==0) return count(num/10, once|(1&lt;&lt;d), more); ///&lt; New digit observed
    if((once&amp;(1&lt;&lt;d))==(1&lt;&lt;d)) return count(num/10, once&amp;(~(1&lt;&lt;d)), more|(1&lt;&lt;d)); ///&lt; Reobservation of a unique digit
    else return count(num/10, once, more); ///&lt; Reobservation of a non unique digit
}

int main() {
    // your code goes here
    cout &lt;&lt; count(252) &lt;&lt; endl;
    cout &lt;&lt; count(25000) &lt;&lt; endl; 
    cout &lt;&lt; count(1234567890) &lt;&lt; endl; 
    cout &lt;&lt; count(0) &lt;&lt; endl; 
    return 0;
}

</code></pre>

<p>Output </p>

<pre><code>1
2
10
1
</code></pre>
    </div>