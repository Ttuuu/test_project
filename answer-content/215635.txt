<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If you're going to do any developing in VBA then you need to check out <a href="http://rubberduckvba.com/" rel="nofollow noreferrer">Rubberduck</a> . Open disclosure, I'm a contributor. I've used it for long enough now that the IDE doesn't feel complete without it. Rubberduck will help you write better code and teach you along the way with code inspections and other goodies.</p>

<p><code>Dim white, red, ... , black as Long</code> is only having the last variable <code>black</code> actually declared <code>as Long</code>. The rest are implicitly <code>as Variant</code>. Something that Rubberduck will spot for you as part of its Code Inspections. If you declare several variables I advocate doing them each on their own line. You can avoid doing this by using enumeration values from <code>VBA.ColorConstants.vbWhite</code>, I mention this since this is available through the VBA. However, since you are using Excel you have access to <a href="https://docs.microsoft.com/en-us/office/vba/api/excel.xlrgbcolor" rel="nofollow noreferrer">XlRgbColor enumeration</a> and you can access as an unqualified <code>rgbWhite</code> , enumeration qualified <code>XlRgbColor.rgbWhite</code>, or fully qualified <code>Excel.XlRgbColor.rgbWhite</code> member. You'll have to map out what's closest to the colors you want. If that doesn't suffice you can create your own enumeration as I included in the example.</p>

<pre><code>Private Enum MyEnumeration
    peach = 6074098  'rgb(242,174,92)
    '...
    violet = 14336204   'RGB(204, 192, 218)
End Enum
</code></pre>

<p>I don't know if you have turned on <code>Option Explicit</code> as it wasn't included. In the VBA IDE menu at the top Tools&gt;Options&gt;Editor tab&gt;Code Settings group&gt;Require Variable Declaration should be turned on. This mandates you declare all your variables, <code>Dim foo as Bar</code>, before you can use them. It'll save you hours of hair pulling and needless typographical errors since implicit variables won't be created for you.</p>

<p>To take those variable declarations a step further convert them to named ranges. This will eliminate static cell references that break when, not if, a cell is moved. You can enter a name by navigating through the Ribbon under the Formulas tab&gt;Defined Names group&gt;Name Manager or using either of the Hotkeys <kbd>Ctrl+F3</kbd>, <kbd>Alt, M, N</kbd>, or <kbd>Alt, I, N, D</kbd>. This will display the Name Manager dialog and from there you can add the named range. As a best practice don't forget when adding a named range in the New Name dialog to change the Scope dropdown to the specific sheet the range is on. Scoping a named range like this lets you add a getter property for the worksheet thy are one. These properties will look like</p>

<pre><code>Public Property Get ShelfCard() As Range
    Set ShelfCard = Me.Range("ShelfCard")
End Property
</code></pre>

<p>So you can go from what you currently have</p>

<pre><code>Set shelf_card = ActiveSheet.Range("A1:E10")
...
    shelf_card.Interior.Color = green
...
</code></pre>

<p>to</p>

<pre><code>KanBan.ShelfCard.Interior.Color = MyEnumeration.green
</code></pre>

<p>Avoid <code>Worksheet.Select</code> and <code>Activesheet.FooBar = ...</code> or the implicit <code>Range("A1").FooBar = ...</code>. You rarely have to select worksheet to achieve something programatically. </p>

<p>Next. Take all the <code>If ... ElseIf ... End If</code> and create a specific sub procedure for them. Something like <code>Private Sub UpdateBasedOnSection(ByVal sectionValue As String)</code> that encapsulates all the logic. This way when you call the sub it'll look something like <code>UpdateBasedOnSection KanBanData.Section2</code>. Hidden in this logic was a redundant <code>issue_type_trav.Interior.ColorIndex = 0</code>. When setting properties, group them so all the <code>KanBan.IssueType</code> properties are set, then move onto the next. Mixing them together makes it easy to miss these redundancies. There's also duplicated logic in the <code>For ... Next</code> block that should be refactored into its own sub.</p>

<p>Once you've done this you'll have cleaned up the code. Below is what I ended up achieving. The entirety of your module ended up being contained in <code>CodeReview</code>. More can be done but this should is a good start for now.</p>

<pre><code>'Module1 standard module
Option Explicit

Public Enum MyEnumeration
    green = 12379351  'RGB(215,228,188)
    orange = 683492   'RGB(228,109,10)
    peach = 6074098  'rgb(242,174,92)
    yellow = 7471103 'RGB(255, 255, 113)
    pink = 12695295 'RGB(255, 182, 193)
    blue = 14536083  'RGB(147, 205, 221)
    maroon = 3487637 'RGB(149, 55, 53)
    violet = 14336204   'RGB(204, 192, 218)
End Enum

Public Sub CodeReview()
    UpdateBasedOnSection KanBan.Section2
    UpdateBasedOnTypes KanBanData.Types
End Sub

Private Sub UpdateBasedOnSection(ByVal sectionValue As String)
    Dim updateColor As Long
    If ShouldSectionColorBeUpdated(sectionValue, updateColor) Then
        KanBan.ShelfCard.Interior.Color = updateColor
        KanBan.TravelCard.Interior.Color = updateColor
    Else
        KanBan.Section2.Font.Color = XlRgbColor.rgbWhite
        KanBan.Warning.Value2 = "Check Section!!"
        WarningFlash KanBan.Warning
    End If
End Sub

Private Function ShouldSectionColorBeUpdated(ByVal sectionValue As String, ByRef outSectionColor As Long) As Boolean
    ShouldSectionColorBeUpdated = True
    Select Case sectionValue
        Case "MECH"
            outSectionColor = MyEnumeration.green
        Case "LAB"
            outSectionColor = MyEnumeration.orange
        Case "HOCC"
            outSectionColor = MyEnumeration.peach
        Case "SASW"
            outSectionColor = MyEnumeration.yellow
        Case "SAMO"
            outSectionColor = MyEnumeration.pink
        Case "RRC"
            outSectionColor = MyEnumeration.blue
        Case "CUST"
            outSectionColor = MyEnumeration.maroon
        Case "PE"
            outSectionColor = XlRgbColor.rgbRed
        Case "PACK"
            outSectionColor = MyEnumeration.violet
        Case "LC"
            outSectionColor = XlRgbColor.rgbWhite
        Case Else
            outSectionColor = -1
            ShouldSectionColorBeUpdated = False
    End Select
End Function

Private Sub UpdateBasedOnTypes(ByVal Types As String)
    If Types = "M" Then
        With KanBan.IssueType
            .Value2 = "Manual Issue "
            .IssueType.Interior.Color = XlRgbColor.rgbBlack
            .IssueType.Font.Color = XlRgbColor.rgbWhite
        End With

        With KanBan.IssueTypeTravel
            .Value2 = "Manual Issue "
            .Interior.Color = XlRgbColor.rgbBlack
            .Font.Color = XlRgbColor.rgbWhite
        End With
    Else
        KanBan.IssueType.Interior.ColorIndex = 0
        KanBan.IssueType.Font.Color = XlRgbColor.rgbWhite
        KanBan.IssueTypeTravel.Interior.ColorIndex = 0

        If Types &lt;&gt; "B" Then
            KanBan.Warning2.Value2 = "Check Type!!"
            WarningFlash KanBan.Warning2
        End If
    End If
End Sub

Private Sub WarningFlash(ByVal warningCell As Range)
    Const OneSecond As Double = #12:00:01 AM#
    Dim i As Long
    For i = 1 To 2
        KanBan.ShelfCard.Interior.Color = XlRgbColor.rgbRed
        KanBan.TravelCard.Interior.Color = XlRgbColor.rgbRed
        warningCell.Interior.Color = XlRgbColor.rgbRed
        warningCell.Font.Color = XlRgbColor.rgbWhite
        Application.Wait Now + OneSecond
        KanBan.ShelfCard.Interior.Color = XlRgbColor.rgbWhite
        KanBan.TravelCard.Interior.Color = XlRgbColor.rgbWhite
        warningCell.Interior.Color = XlRgbColor.rgbWhite
        warningCell.Font.Color = XlRgbColor.rgbRed
        Application.Wait Now + OneSecond
    Next i
    warningCell.Font.Color = XlRgbColor.rgbWhite
    warningCell.Interior.Color = XlRgbColor.rgbRed
End Sub
</code></pre>

<pre><code>'KanBan worksheet
Option Explicit

Public Property Get ShelfCard() As Range
    Set ShelfCard = Me.Range("ShelfCard")
End Property

Public Property Get TravelCard() As Range
    Set TravelCard = Me.Range("TravelCard")
End Property

Public Property Get InternalSupport() As Range
    Set InternalSupport = Me.Range("InternalSupport")
End Property

Public Property Get InternalSupportLocation() As Range
    Set InternalSupportLocation = Me.Range("InternalSupportLocation")
End Property

Public Property Get Section2() As Range 'Use a better more descriptive name
    Set Section2 = Me.Range("Section2")
End Property

Public Property Get Warning() As Range 'Advocate changing to what the warning actually is about
    Set Warning = Me.Range("Warning")
End Property

Public Property Get Warning2() As Range
    Set Warning2 = Me.Range("Warning2")
End Property

Public Property Get IssueType() As Range
    Set IssueType = Me.Range("IssueType")
End Property

Public Property Get IssueTypeTravel() As Range
    Set IssueTypeTravel = Me.Range("IssueTypeTravel")
End Property
</code></pre>

<pre><code>'KanBanData worksheet
Option Explicit

Public Property Get Types() As String
    Types = Me.Range("Types").Value2
End Property
</code></pre>
    </div>