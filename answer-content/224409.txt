<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You could simply add the task results to a collection. Different types of collections can be used:</p>

<ol>
<li><p><code>List&lt;ITaskResult&gt;</code>: You can add several results of the same type. You must enumerate to find a task of a specific type.</p></li>
<li><p><code>Dictionary&lt;Type, ITaskResult&gt;</code>: Each task result type can be added only once. You can query specific task types.</p>

<pre><code>if (results.TryGetValue(typeof(BetaTaskResult), out ITaskResult taskResult)) {
    ...
}
</code></pre>

<p>or if you know a result is there for sure:</p>

<pre><code>ITaskResult taskResult = results[typeof(BetaTaskResult)];
</code></pre>

<p>Of course, you can also use other types of keys, like enums or strings.</p></li>
<li><p><code>Dictionary&lt;Type, List&lt;ITaskResult&gt;&gt;</code>: Each task result type can be added several times. You can query specific task result types. Handling is a bit more complex.</p></li>
</ol>

<p>If you want to access members who are not part of the interface, you must cast the result to specific types.</p>

<pre><code>// Assuming each result type occurs only once.
Dictionary&lt;Type, ITaskResult&gt; results = tasks
    .Select(x =&gt; x.Execute())
    .ToDictionary(r =&gt; r.GetType()); // alternative: .ToList()
</code></pre>

<hr>

<p>If you prefer to keep your current solution, you can simplify it a bit. This will enumerate the tasks several times; however, this is acceptable, because you have a very small number of tasks.</p>

<pre><code>var taskResults = tasks
    .Select(x =&gt; x.Execute())
    .ToList();
var completeTaskResult = new CompleteTaskResult {
   AlphaTaskResult = taskResults.OfType&lt;AlphaTaskResult&gt;().FirstOrDefault(),
   BetaTaskResult  = taskResults.OfType&lt;BetaTaskResult&gt;().FirstOrDefault(),
   GammaTaskResult = taskResults.OfType&lt;GammaTaskResult&gt;().FirstOrDefault(),
};
</code></pre>

<p>It is important to call <code>.ToList()</code>, otherwise this would execute the tasks several times.</p>

<p>See also: <a href="https://blogs.msdn.microsoft.com/ericwhite/2006/10/04/lazy-evaluation-and-in-contrast-eager-evaluation/" rel="nofollow noreferrer">Lazy Evaluation (and in contrast, Eager Evaluation)</a></p>
    </div>