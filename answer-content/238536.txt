<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>The challenge</h2>

<p>First of all, a method called <code>String add(String number)</code> is just wrong in every way that you look at it. It may be a "classic" Kata, but for me that's classic stupidity, especially if you consider that the method needs to add the numbers <em>within</em> the <code>number</code> given.</p>

<hr>

<p>The challenge really leads you into returning strings for anything. In program jargon, we call that <code>stringly typed</code> and it is something that should be avoided.</p>

<hr>

<p>You've created a <code>sum</code> method which is great, but it is failing the challenge which requires an <code>add</code> method. I'd always keep to the requirements.</p>

<p>That also goes for "Allow the add method to handle an unknow number of arguments." (I didn't create the typo). However, I expect that the author meant that the single string can contain multiple arguments. No way to know for sure.</p>

<hr>

<p>Using the same output for errors and common return values should be avoided, printing out to a different stream (standard error rather than standard out) would be one method of handling that.</p>

<hr>

<p>The idea that a class would return multiple errors for the same input is weird, most classes would just generate a single error, also because one error may beget other errors: fixing the first one may fix both (e.g. you could see this for using a dot instead of a comma as separator).</p>

<hr>

<p>The challenge basically also requires you to allow trash input, and then return a correct result. Generally we test our input before we <em>accept</em> it, explicitly not allowing trash input. Otherwise we default to "garbage in / garbage out"  principles.</p>

<hr>

<p>The challenge isn't symmetric in the sense that empty input should return <code>0</code> as return value, but it doesn't allow empty number strings.</p>

<hr>

<p>Similarly, you need to include a position when a number is expected at a certain position, but then you also need to return "negative number" errors without a position.</p>

<h2>Class design</h2>

<p>Having a calculator class is alright, but it is weird that the calculator stores the result and a custom delimiter. Both values seem to be specific to the <code>sum</code> method, which means that they should be kept <em>local</em> to the sum method.</p>

<p>An example of a good field would be a delimiter, which could <em>default to</em> the <code>DELIMITER</code> constant.</p>

<p>I could see an <code>Addition</code> class that has an <code>add(float)</code> method and returns a <code>total</code> class, but the assignment is really more about input validation than anything else. So a <code>total</code> variable local to the <code>add</code> / <code>sum</code> method seems more logical.</p>

<hr>

<p>The assignment clearly states (under "error management") that multiple errors may need to be returned. To me that shows that you may want to generate a list of errors, and that you should keep on testing rather than using <code>return</code> on any error.</p>

<hr>

<p>This is about test driven design. You probably want to test the validation strategies <em>separately</em>. If you create <code>public static</code> validation methods then you can create separate tests for them (I'd also blame the setup of the challenge for this). Creating a <code>Validator</code> class and a separate <code>ValidatorResult</code> may also be a good idea if your class gets too complicated otherwise.</p>

<h2>Code review</h2>

<pre><code>if (numbers.isEmpty())
    return String.format("%.0f", result);
</code></pre>

<p>Always try and use braces after an <code>if</code> branch:</p>

<pre><code>if (numbers.isEmpty()) {
    return String.format("%.0f", result);
}
</code></pre>

<hr>

<pre><code>if (numbers.startsWith(CUSTOM_DELIMITER_PREFIX))
    numbers = setCustomDelimiter(numbers);
</code></pre>

<p>Try not to mix error handling with normal code. First check for errors, then handle the correct values. You don't want to perform any side effects (setting the custom delimiter) before you are sure that the input is correct.</p>

<hr>

<pre><code>private boolean isNewlineAtInvalidPositionIn(String numbers) {
    return numbers.lastIndexOf(NEWLINE) &gt; numbers.lastIndexOf(DEFAULT_DELIMITER);
}
</code></pre>

<p>If I look at the assignment you may need to store the location of the errors as well. Returning just a <code>boolean</code> is probably not going to do this; you may need to perform the same test again to find the error position.</p>

<hr>

<pre><code>private StringBuilder containsNegative(String numbers) {
</code></pre>

<p>Now a private method has a bit more leeway when it comes to side effects and return values / types. However, a <code>contains</code> method should return a <code>boolean</code> and not a <code>StringBuilder</code>. A <code>StringBuilder</code> should really never be returned; it could be consumed as parameter though.</p>

<hr>

<pre><code>private String setCustomDelimiter(String numbers) {
</code></pre>

<p>Please answer these questions, without looking at your code:</p>

<ul>
<li>What would <code>setCustomDelimiter</code> require as parameter?</li>
<li>What does a setter use as return value?</li>
</ul>

<hr>

<pre><code>private String[] getStringArray(String numbers) {
</code></pre>

<p>No, the method is named badly. Call it <code>separateInputString</code> or something similar, but <code>getStringArray</code> doesn't specify what the method <em>does</em>, it just indicates what it <em>returns</em>.</p>

<hr>

<p>Similarly:</p>

<pre><code>private void calculateSumOf(String[] numbers) {
    for (String number : numbers)
        result = Float.sum(result, Float.parseFloat(number));
}
</code></pre>

<p>No return value? Why not just use the <code>+</code> operator?</p>

<pre><code>private boolean hasDecimalPlaces() {
    return result % 1 != 0;
}
</code></pre>

<p>Again working on the result. But I don't get the calculation either. This is <code>isOdd</code> it seems to me.</p>

<hr>

<pre><code>private String printFloat() {
    return Float.toString((float) (Math.round(result * 100.0) / 100.0));
}
</code></pre>

<p>Generally we try and print to stream. This is about <em>formatting</em> a float. You could use <code>formatResultAsFloat()</code>. This should also give you a hint that you  could use <code>String.format</code> instead of performing such coding yourself.</p>

<h2>Model</h2>

<p>It seems to me that you've started coding a little bit early. First you should try and create some model first. E.g. you could decide to first validate the input string (as you also need positions for the errors), then split, then perform the calculations on the separate values.</p>

<h2>Conclusion</h2>

<p>Do I think there is a lot to be improved? Certainly. Do I think that this is spaghetti code? Certainly not. Furthermore, the identifiers are well named, and if you don't include the way parameters are handled, so are the methods. The code is nicely split up, even if some reordering may be a good idea.</p>

<p>The Kata or challenge on the other hand is beyond saving and should be destroyed. But that's just my opinion.</p>
    </div>