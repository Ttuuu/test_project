<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A triangle has, by definition, three sides. I find it therefore weird to take a single <code>sides</code> argument, which could be of any size. This opens you up to obscure bugs, such as these ones, which are not covered in your tests:</p>

<pre><code>&gt;&gt;&gt; is_triangle([1,2,3,4])
True    # ?
&gt;&gt;&gt; is_triangle([1, 1])
True    # ???
&gt;&gt;&gt; is_triangle([float('nan')])
True    # WTF?
</code></pre>

<p>Instead, just explicitly take three arguments. The sides of a triangle are customarily called <code>a, b, c</code>.</p>

<pre><code>def is_triangle(a, b, c):
    a, b, c = sorted([a, b, c])
    return a &gt; 0 and a + b &gt; c
</code></pre>

<p>This uses the fact that after the <code>sorted</code>, <code>a</code> is always the smallest side, as <a href="https://codereview.stackexchange.com/questions/224878/determine-if-a-triangle-is-equilateral-isosceles-or-scalene/224904?noredirect=1#comment436476_224904">mentioned in the comments</a>.</p>

<p>The only thing you need to change in your calling code is to call this with <code>is_triangle(*sides)</code>, i.e. use tuple unpacking.</p>

<hr>

<p>Your other functions can also be shortened a bit. Try to put multiple checks in one line to <code>return</code> right away (but don't push it if it gets too complicated).</p>

<pre><code>def equilateral(a, b, c):
    return is_triangle(a, b, c) and a == b == c
</code></pre>

<p>Instead of manually checking all combinations of sides for equality, just use <code>set</code> to get rid of multiples:</p>

<pre><code>def isosceles(a, b, c):
    return is_triangle(a, b, c) and len(set([a, b, c])) &lt;= 2

def scalene(a, b, c):
    return is_triangle(a, b, c) and len(set([a, b, c])) == 3
</code></pre>

<hr>

<p>Note that all functions need to use <code>is_triangle</code>. You could define a decorator that makes sure the input is a triangle:</p>

<pre><code>from functools import wraps

def ensure_triangle(func):
    @wraps(func)
    def wrapper(a, b, c):
        return is_triangle(a, b, c) and func(a, b, c)
    return wrapper

@ensure_triangle
def equilateral(a, b, c):
    return a == b == c

@ensure_triangle
def scalene(a, b, c):
    return len(set([a, b, c])) == 3

@ensure_triangle
def isosceles(a, b, c):
    return len(set([a, b, c])) &lt;= 2
</code></pre>
    </div>