<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p><code>self.data</code> is a bad way to cache data. There are two ways to address this.</p>

<ul>
<li>Leave <code>get_data</code> roughly as is and use <a href="https://docs.python.org/3/library/functools.html#functools.cached_property" rel="nofollow noreferrer"><code>functools.cached_property</code></a>.</li>
<li>Take a url segment and cache it with <a href="https://docs.python.org/3.8/library/functools.html#functools.lru_cache" rel="nofollow noreferrer"><code>functools.lru_cache</code></a> or <a href="https://beaker.readthedocs.io/en/latest/caching.html#decorator-api" rel="nofollow noreferrer">Beaker</a>. Beaker is probably better as it allows you to have more than just an LRU cache.</li>
</ul></li>
<li><p>We can use a <a href="https://requests.readthedocs.io/en/master/user/advanced/#session-objects" rel="nofollow noreferrer">session object</a> to remove the need for passing <code>params</code> in <code>get_data</code>. It also gives some other nice benefits, but we're not really using them here.</p></li>
<li><code>data_by_name</code> doesn't belong on <code>Data</code>. This should be created and stored outside the class.</li>
</ol>

<p><code>parsehub.py</code></p>

<pre class="lang-py prettyprint-override"><code>import functools

import requests


class Parsehub:
    def __init__(self, api_key, project_token):
        self._session = s = requests.Session()
        s.params.update({'api_key': api_key})
        self._project_token = project_token

    @functools.lru_cache
    def get(self, path):
        return self._session.get(
            f'https://www.parsehub.com/api/v2/projects/'
            f'{self._project_token}'
            f'/{path}'
        )

    def get_data(self):
        # Code to format the countries to your desired format goes here
        return self.get('last_ready_run/data').json()
</code></pre>

<p><code>__main__.py</code></p>

<pre class="lang-py prettyprint-override"><code>from .settings import API_KEY, PROJECT_TOKEN
from .parsehub import Parsehub


def main():
    parse_hub = Parsehub(API_KEY, PROJECT_TOKEN)
    # The other answers have shown how to get this in the format you want.
    countries = {
        country['Cname'].lower(): country
        for country in parse_hub.get_data()
    }
    country = countries['russia']


if __name__ == '__main__':
    main()
</code></pre>
    </div>