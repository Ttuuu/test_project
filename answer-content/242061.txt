<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>// Does T support constexpr?
template &lt;Literal T&gt;
concept Literal = std::is_fundamental_v&lt;T&gt;;
</code></pre>

<p>I see what you're going for.  This isn't bad, but imagine someone tries to make a Vector2 with a custom type... they'll have to find this comment to understand why compilation failed.  If you just use <code>typename T</code> and get rid of the concept, then the compiler will show a traceback and say "T is not constexpr" which is a lot more helpful to the user.  TL;DR: I'd get rid of this concept.</p>

<hr>

<p>This is a lot of constructors.  Is there any reason not to use the default ones?</p>

<hr>

<p>Can you leverage <code>std::pair</code> to define the constructors/the comparison operators for you?  Maybe you can inherit from it?</p>

<hr>

<pre><code>constexpr Vector2&lt;T&gt; operator *(const Vector2&lt;T&gt;&amp; lhs, T rhs)
</code></pre>

<p>This has the same semantics as converting <code>rhs</code> into <code>Vector2&lt;T&gt;(rhs, rhs)</code> ... maybe it makes sense to have a constructor from a single T to a Vector2 with the same T in each dimension?</p>

<p>This would also allow you to define a single <code>operator*</code> and rely on implicit conversion for scalar values.</p>

<hr>

<p>Overall this looks pretty good.</p>
    </div>