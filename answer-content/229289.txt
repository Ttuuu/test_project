<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This code is quite repetitive, and doesnâ€™t adhere to the <a href="https://deviq.com/don-t-repeat-yourself/" rel="nofollow noreferrer">Don't Repeat Yourself principle</a>.</p>

<p>One way to DRY it out is to abstract the latter promise callback to a separate function:</p>

<pre><code>const addTrackAndBoundsFromKml = kmltext =&gt; {

     // Create new kml overlay
     const parser = new DOMParser();
     kml = parser.parseFromString(kmltext,"text/xml");

     const track = new L.KML(kml);
     map.addLayer(track);

     // Adjust map to show the kml
     map.fitBounds( track.getBounds() );

};
</code></pre>

<p>Note that <code>const</code> was added before the assignment of <code>parser</code> to avoid a global variable from being created, and <code>bounds</code> was eliminated because it was only used once. Also, semi-colons were added- while they are only required <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#Automatic_semicolon_insertion" rel="nofollow noreferrer">after a handful of statements</a>, it could lead to errors if somehow whitespace got removed. It is a good habit to default to terminating lines with them.</p>

<p>Then use (a reference to) that function whenever it is needed:</p>

<pre><code>// Load kml file
fetch('lotA.kml')
  .then( res =&gt; res.text() )
  .then( addTrackAndBoundsFromKml );

fetch('lotB.kml')
  .then( res =&gt; res.text() )
  .then( addTrackAndBoundsFromKml );

//etc...
</code></pre>

<p>This way if a change needed to happen in that function that parses the KML, adds the track layer and fits the bounds, it could be done in one place instead of each occurrence. </p>

<p>The file names could also be stored in an array and iterated over:</p>

<pre><code>const files = ['lotA.kml', 'lotB.kml', 'Schematic.kml', 'lotC.kml', 'lotD.kml'];
for ( const file of files ) {
    fetch(file)
      .then( res =&gt; res.text() )
      .then( addTrackAndBoundsFromKml );
}
</code></pre>

<p>It may not be useful but you could consider using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all" rel="nofollow noreferrer"><code>Promise.all()</code></a> though the need to call the asynchronous <code>.text()</code> method on each result might make that really complicated. </p>

<p>You could also consider using the <a href="/questions/tagged/ecmascript-8" class="post-tag" title="show questions tagged 'ecmascript-8'" rel="tag">ecmascript-8</a> feature <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function" rel="nofollow noreferrer">async functions</a> with the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await" rel="nofollow noreferrer"><code>await</code> operator</a> on the promises, as long as the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function#Browser_compatibility" rel="nofollow noreferrer">browser requirements</a> are sufficient. </p>
    </div>