<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><code>regex::Captures</code> provides a handy <a href="https://docs.rs/regex/1.3.9/regex/struct.Captures.html#impl-Index%3C%26%27i%20str%3E" rel="nofollow noreferrer">implementation of <code>Index&lt;&amp;str&gt;</code></a>. This lets you pull named matches out with <code>caps[name]</code>. Combine that with a few <code>std</code> APIs and you can write the same code like this:</p>

<pre class="lang-rust prettyprint-override"><code>use regex::Regex;

fn main() -&gt; Result&lt;(), Box&lt;dyn std::error::Error&gt;&gt; {
    let re = Regex::new(concat!(
        r"^\s+(?P&lt;qrw1&gt;\d+)\|(?P&lt;qrw2&gt;\d+)",
        r"\s+(?P&lt;arw1&gt;\d+)\|(?P&lt;arw2&gt;\d+)",
    ))
    .unwrap();
    let names = ["qrw1", "qrw2", "arw1", "arw2"];
    let buffer = " 0|1 2|3\n 4|5 6|7\n 8|9 10|11\n";

    let mut maximums = [0i32; 4];

    for caps in buffer.lines().filter_map(|line| re.captures(line)) {
        for (&amp;name, max) in names.iter().zip(&amp;mut maximums) {
            *max = std::cmp::max(*max, caps[name].parse()?);
        }
    }
    for (&amp;name, max) in names.iter().zip(&amp;maximums) {
        println!("max {}: {:.2}", name, max);
    }

    Ok(())
}
<span class="math-container">```</span>
</code></pre>
    </div>