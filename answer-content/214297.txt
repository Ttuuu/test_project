<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>Is the JavaScript modern, succint and understandable?</p>
</blockquote>

<p>Provided you can use ES6, you could cut off a lot with, for example,  arrow functions and argument destructuring.</p>

<blockquote>
  <p>How could the JavaScript file be improved?</p>
</blockquote>

<p>I understood you are doing weighted random selection? If so, I did some searching and found another way which simplifies the code a lot; see below.</p>

<blockquote>
  <p>In firefox the site flashes when one reloads the page. This might be because the JavaScript fires before the CSS is loaded.</p>
</blockquote>

<p>One often seen method is to put the javascript code (external or otherwise) just before the closing <code>&lt;/body&gt;</code> tag, but for some reason it feels wrong to me. Another option would be to use the <code>load</code> event instead of <code>DOMContentLoaded</code>, but again, that feels wrong to me. </p>

<blockquote>
  <p>Is there a better method to do the fetch part? Now I have to do it twice to be able to reload the page using spacebar (not yet implemented in the live version).</p>
</blockquote>

<p>You can give a name to the function body, and give a reference to it for the event listeners (i.e. <code>fun = evt =&gt; {...}; el.addEventListener('whatever', fun)</code></p>

<p>So hereâ€™s what I put together from my findings and some of the above suggestions:</p>

<pre><code>const asMembers = txt =&gt;
  txt.split(/\r\n|\n/)
  .slice(1, -1) // drop the header line and the last (empty) split
  .map(line =&gt; {
    let [name, weight] = line.split(/, ?/)
    return [name.trim(), Number(weight)]
  }) // you could `.filter(([, n]) =&gt; !Number.isNaN(n))` to drop weightless

const randomBetween = (min, max) =&gt;
  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random#Examples
  // NOTE: =&gt; [min, max)
  Math.random() * (max - min) + min

const weightedRandom = ary =&gt; {
  // https://medium.com/@peterkellyonline/weighted-random-selection-3ff222917eb6
  let randomWeight = randomBetween(1, ary.reduce((acc, [, n]) =&gt; acc + n, 0))
  for(let [name, weight] of ary) {
    randomWeight -= weight
    if(randomWeight &lt;= 0)
      return name
  }
}
</code></pre>

<p>and then the calls would go something like <code>fetch(...).then(asMembers).then(weightedRandom)</code>.</p>
    </div>