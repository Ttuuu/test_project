<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It has been suggested in docs to not pass <code>IConfiguration</code> around for injection. Try creating a <code>IConnectionFactory</code> or just have a connection injected directly into the repo</p>

<p>Something like</p>

<pre><code>public interface IDbConnectionFactory {
   IDbConnection CreateConnection();
}
</code></pre>

<p>and its implementation for your class would look something like this</p>

<pre><code>public class SqlConnectionFactory : IDbConnectionFactory {
    private readonly string dbConnectionString;

    public SqlConnectionFactory(string dbConnectionString) {
        this.dbConnectionString = dbConnectionString;
    }

    public IDbConnection CreateConnection() {
        return new SqlConnection(this.dbConnectionString);
    }
}
</code></pre>

<p>it would be registered in startup</p>

<pre><code>var connectionString = Configuration.GetConnectionString("MyConnString");
services.AddScoped&lt;IDbConnectionFactory, SqlConnectionFactory&gt;(_ =&gt; new SqlConnectionFactory(connectionString));

//...
</code></pre>

<p>and injected</p>

<pre><code>public class TrainerRepo : IRepoTrainer {
    private readonly IDbConnectionFactory factory;

    public TrainerRepo(IDbConnectionFactory factory) {
        this.factory = factory;
    }

    public List&lt;Trainer&gt; GetTrainers() {
        string sql = "select trainer_id,trainer_name from trainer";
        using(IDbConnection connection = factory.CreateConnection()) {
            connection.Open();
            var res = connection.Query&lt;Trainer&gt;(sql).ToList&lt;Trainer&gt;();
            connection.Close();
            return res;
        }
    }

    //...
</code></pre>

<p>The repeated code can also be generalized</p>

<pre><code>T Invoke&lt;T&gt;(Func&lt;IDbConnection, T&gt; func) {
    using(IDbConnection connection = factory.CreateConnection()) {
        connection.Open();
        var res = func(connection);
        connection.Close();
        return res;
    }
}

async Task&lt;TResult&gt; InvokeAsync&lt;TResult&gt;(Func&lt;IDbConnection, Task&lt;TResult&gt;&gt; func) {
    using(IDbConnection connection = factory.CreateConnection()) {
        connection.Open();
        var res = await func(connection);
        connection.Close();
        return res;
    }
}
</code></pre>

<p>Which changes the previous examples to</p>

<pre><code>public List&lt;Trainer&gt; GetTrainers() {
    string sql = "select trainer_id,trainer_name from trainer";
    return Invoke(connection =&gt; connection.Query&lt;Trainer&gt;(sql).ToList&lt;Trainer&gt;());
}


public Task&lt;int&gt; updateTrainer(Trainer trainer) {
    string sql = "update trainer set trainer_name = @tname where trainer_id = @tid";
    return  InvokeAsync(connection =&gt; connection.ExecuteAsync(sql, param: new { tname = trainer.trainer_name, tid = trainer.trainer_id }));
}
</code></pre>
    </div>