<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You are wasting time computing the actual distance.  Instead of <code>getDist()</code>, create a <code>getDistSquared()</code> function, and compare against the square of the vision distance. </p>

<pre><code>creatureViewDistSquared = creatureViewDist * creatureViewDist
...

    if getDistSquared(creature.pos, otherC.pos) &lt; creatureViewDistSquared:
        ...
</code></pre>

<p>But first, do the partitioning as suggested by maxb. </p>

<hr>

<p>If you maintain a heading vector for each creature (dx,dy), you could “<a href="https://en.m.wikipedia.org/wiki/Dot_product" rel="nofollow noreferrer">dot</a>” that with a displacement vector to the observed creature.  If the dot product is negative, the observed creature is more than 90° away from the heading/viewing direction.  This will, on average, remove more than half of the creatures. </p>

<p>If the heading vector is normalized, the dot product would also need to be less than or equal to the viewing distance. </p>

<p>This will give you a fast filter, using only two multiples, two subtractions, and an addition:</p>

<pre><code>dot_product = c.nx * (otherC.x - c.x)  +  c.ny * (otherC.y - c.y)
if dot_product &gt;= 0  and  dot_product &lt;= creatureViewDistance:
    ....
</code></pre>

<hr>

<p>It occurs to me, you should also do the trivial reject first.</p>

<pre><code>dx = otherC.x - c.x
dy = otherC.y - c.y
if abs(dx) &gt; creatureViewDistance  or  abs(dy) &gt; creatureViewDistance:
    continue

if dx*dx + dy*dy &gt; creatureViewDistSquared:
    continue

dot_product = c.nx * dx  +  c.ny * dy
if dot_product &gt;= 0  and  dot_product &lt;= creatureViewDistance:
    ....
</code></pre>

<p>At this point, you can do the angle calculation, to ensure the creature is in the 60° limit</p>
    </div>