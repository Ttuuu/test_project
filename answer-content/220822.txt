<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>Your three password requirements can be baked into one expression.</p>

<pre><code>if (!preg_match('/(?=.*[a-z])(?=.*\d).{5,}/i', $password)) {
    $this-&gt;errors[] = 'Passwords must have a minimum of 5 characters and contain at least one letter and at least on number';
    return false;
}
$this-&gt;password = password_hash($password, PASSWORD_DEFAULT);
return true;
</code></pre>

<p>Executing one function versus three improves efficiency, but not in a noticeable way.  I like to have consistent/dependable return values (rather than returns that sometimes provide an iterable value and sometimes not).</p></li>
<li><p>For "tin-foil hat" reasons, I like to advise that only non-personal data be stored in sessions (as much as possible) because of maliciousness called "Session Hijacking". In other words, save an arbitrary <code>id</code>, but not name, email, password, creditcard number, social security number, drivers license, library card, ...anything that might be valuable to bad people who like to spoof, hack, and trick others.</p></li>
<li><p>I would do away with the <code>rowCount() &gt; 0</code>, you only need to check if <code>fetch()</code> has any data in it.  <a href="https://stackoverflow.com/a/37611531/2943403">https://stackoverflow.com/a/37611531/2943403</a></p></li>
<li><p>By returning boolean or possibly "truthy" / "falsey" values from your methods, you can reliably construct method calls that easily interpret their success.  Consider in the future that you want to return the last inserted id or the number of affected rows from an update/delete query -- if you are passing an array of errors in some instances, you'll first need to assess the return's data type to determine how to handle it.  For this reason, make a class variable (<code>$errors</code>) to gather any errors, and always return either iterable or non-iterable data.</p></li>
<li><p>When checking the returns from your method calls, you are calling <code>empty()</code>, but you can simply use <code>!$variable</code> -- it will know the difference between a falsey <code>null</code> and a truthy array of one or more errors.</p></li>
</ul>
    </div>