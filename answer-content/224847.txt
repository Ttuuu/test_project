<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Short review: not a whole lot to say. I don't think breaking any of the method up any further would really help matters, and none of them should be combined, so the overall design looks reasonable to me.</p>

<h2>Documentation</h2>

<p>I'm guessing the comments next to the methods are provided by the website: you should add proper inline documentation. Even if you are (for some reason) imposing a time limit on how long you spend designing and writing these programs, you should still go to the effort of documenting the API clearly, because it is a valuable skill itself. However, it's often a good idea to write the documentation before even implementing a method or class, so that you are forced to express precisely what it is to do (not how it will do it).</p>

<h2>Naming</h2>

<p>I'm not overly fond of the name <code>output</code> in this line:</p>

<pre><code>if (!current.Edges.TryGetValue(letter, out var output))
</code></pre>

<p>Output suggests it is outputted: it <em>is</em> outputted by <code>TryGetValue</code>, but that's <code>TryGetValue</code>'s problem: your problem is finding a descendent/child node.</p>

<p><code>currentNode</code> is also a bit confusing: <code>node</code> is the 'current node', <code>currentNode</code> is a <code>KeyValuePair</code>. You might want to call it <code>child</code> and enumerate <code>node.Edges.Values</code>, since you don't need the keys.</p>

<p>I'm not sold on the name <code>Edges</code> either, since it isn't an arbitrary directed graph.</p>

<h2>Misc</h2>

<ul>
<li><p>The spec says nothing about how to handle invalid data, but both <code>Match</code> and <code>AddWord</code> will throw a mysterious <code>NullReferenceException</code> when confronted with a <code>null</code>: much better to check throw a helpful <code>ArgumentNullException</code>.</p></li>
<li><p>You might consider making <code>_head</code> <code>readonly</code>, which expresses the intention that it isn't going to change and prevents someone violating this assumption in the future.</p></li>
<li><p>You might consider making <code>Match</code> static, since it doesn't need access to any state, which would make it easier to maintain because it will be easier to understand and harder to break.</p></li>
<li><p>This comment is misleading: <code>// if one of them returns true return true, there is a valid path to the next letter</code></p></li>
</ul>
    </div>