<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Program and File Structure</strong><br>
As a general rule C++ source files (.cpp) are not included in other C++ source files, each .cpp file is compiled separately and the resulting object files are linked together by the linker. The benefits of this are that the entire program does not need to be rebuilt when a .cpp file is modified, just the module that was modified and then the program is re-linked. This allows bug fixes and feature requests to be implemented without rather long build times. If the program is implemented in shared libraries it means just a single library may need to be updated for bug fixes to be delivered to users.</p>

<p>In some cases very simple classes may be implemented using only a header file.</p>

<p>One of the problems with including source files in other source files is that it can lead to multiple definitions of objects or functions at link time. An example would be using the <code>util.cpp</code> in multiple other source files.</p>

<p>A second possible problem with including source files in other source files is that the compile time for the final source file will increase.</p>

<p>In C++ classes are generally implemented as a header file (.h or .hpp) and a C++ source file pair. The structure and public interface of the class are in the header file and in most cases the internal implementation of the class is in the C++ source file. Public interfaces are expected to not change often but internal implementation can change as often as necessary.</p>

<p>In <code>try.cpp</code> <code>board.cpp</code> is included, this ends up including <code>point.cpp</code> and <code>util.cpp</code>, the problem with this is that the <code>main()</code> function only needs to know about the <code>Board</code> class, it does not need to know about the <code>Point</code> struct or the items in <code>util.cpp</code>.</p>

<p>Rather than using <code>compile.sh</code> to build the project it might be better to use an Integrated Development Environment (IDE) such as <a href="https://stackoverflow.com/questions/2487931/llvm-c-ide-for-windows">Eclipse CDT</a> or <code>Visual Studio</code>. In both cases the development environments create the build process for the program as well as providing a programming and debugging interface. <a href="https://www.eclipse.org/downloads/packages/" rel="nofollow noreferrer">Eclipse</a> is an open source project and can be downloaded for free, there is a free version of <code>Visual Studio</code> as well. If you are developing on <code>Linux</code> <code>Eclipse</code> is part of the development options. Programming and debugging using an IDE is much easier, the code is scanned as it is entered which reduces compile time errors. In most IDE's you can select the C++ standard you want to work with (C+=11, C++14, C++17, ...).</p>

<p><strong>Class and Object Initialization</strong><br>
In <code>Board.h</code> there is a public method called <code>void init(const Point&amp; start_state);</code>. This function is not defined or implemented anywhere which may cause linking errors in some build environments. In <code>try.cpp</code> there is instead a function called <code>void init_board(Board&amp; board, char *filename)</code>. Classes should handle their own initialization in their constructors. Class constructors can use sub functions as necessary. A function such as <code>init_board()</code> forces the knowledge of internals of the board class on outside structures and forces members of the <code>Board</code> class to be declared <code>public</code> where the might be better declared as either <code>protected</code> or <code>private</code>. examples of members of <code>Board</code> that should be <code>private</code> or <code>protected</code> are <code>std::vector&lt;std::vector&lt;float&gt;&gt; best_value;</code> and <code>std::vector&lt;std::vector&lt;Point&gt;&gt; best_policy;</code>. The function <code>void read_special_states(std::fstream&amp; fp, std::vector&lt;Point&gt;&amp; states, Board&amp; board)</code> in <code>try.cpp</code> might better be a member function of the <code>Board</code> class. This would reduce the number of parameters to the function and might be called by the <code>Board</code> constructor. Note there can be multiple <code>Board</code> constructors, one that takes a file name and one that doesn't. A safer way to do this might be to create the file pointer in <code>main()</code> test to see that the file exists and then pass the file pointer to the <code>Board</code> constructor.</p>

<p><strong>Error Checking, Handling and Reporting</strong><br>
The <code>main()</code> program assumes that there is at least one command line argument, this is not safe there should be a function to parse the command line called by <code>main()</code>. In the function <code>init_board()</code> there is no test that there is a file or that it can be opened, this is also not a safe practice. In either of the functions the program can fail without the user knowing because of a simple user error, either not entering a file name or entering the wrong file name. A good practice is to check user input and provide meaningful error messages when user input is incorrect.</p>

<p><strong>The Use of this to Access Members</strong><br>
In <code>Board.cpp</code> the <code>this</code> pointer is used many times, unlike PHP and some other languages in C++ there is generally no reason to use the <code>this</code> pointer. When an object is compiled in a .cpp file the compiler will first look for local symbols within the class.</p>

<p><strong>Code Complexity</strong><br>
In the <code>util.cpp</code> file the function <code>is_in_vector()</code> could be simplified to:</p>

<pre><code>template &lt;typename T&gt;
bool is_in_vector(const T&amp; location, const std::vector&lt;T&gt;&amp; to_check) {
    return (std::find(to_check.begin(), to_check.end(), location) != to_check.end());
}
</code></pre>

<p><strong>Public Versus Private in struct</strong><br>
In C++ in a struct <a href="https://stackoverflow.com/questions/1247745/default-visibility-of-c-class-struct-members">all fields are public by default</a>. In <code>Point.h</code> there is no reason to have <code>public</code> for the members <code>Point()</code>, <code>Point(int x_, int y_)</code> and <code>std::ostream operator&lt;&lt;(const Point&amp; p)</code>. If the members <code>x</code> and <code>y</code> should be private, you can either specify that or make the struct into a class. Making <code>Point</code> a class might simplify the code in <code>std::ostream operator&lt;&lt;(const Point&amp; p)</code> since it would no longer be necessary to add p as an argument. It might be better to move the <code>Point</code> operators in <code>util.cpp</code> into either <code>Point.h</code> or <code>Point.cpp</code>.</p>

<p><strong>Magic Number</strong><br>
It is not clear what the numeric value 10 represents in the for loop in <code>Board::run()</code>. It might be better to create a symbolic constant somewhere in the program, or for <code>Board</code> to have a member size_t variable that is used in that loop.</p>

<p><strong>Unnecessary Include Files</strong><br>
Board.cpp includes cassert and cmath, but they are not used within the file.</p>
    </div>