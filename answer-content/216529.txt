<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You can use the <a href="https://docs.microsoft.com/en-us/dotnet/api/system.io.path.combine?view=netframework-4.7.2" rel="nofollow noreferrer">System.IO.Path.Combine Method</a>.</p>

<blockquote>
  <p>This method is intended to concatenate individual strings into a single string that represents a file path. However, if an argument other than the first contains a rooted path, any previous path components are ignored, and the returned string begins with that rooted path component. </p>
</blockquote>

<pre><code>$combined = [IO.Path]::Combine($Base, $Chained)
</code></pre>

<p>Also, it seems more natural to use <code>System.IO.Path.IsPathRooted()</code> method instead of <code>Split-Path</code> to see if the path is absolute.</p>

<pre><code>$isRelative = ![IO.Path]::IsPathRooted($combined)
</code></pre>

<p>There is a way to pass parameter values by appending a colon after the parameter name in cmdlet. You can also pass values to the <code>switch</code> type parameter this way.</p>

<pre><code>Verb-Noun -ParameterName:Value
</code></pre>

<p><code>Resolve-Path</code> basically outputs a <code>PathInfo</code> object, but when the <code>-Relative</code> switch is set the output will be <code>string</code>.
Both types have a <code>ToString ()</code> method, so you can get a path string without using an <code>if</code> statement. (The <code>ToString()</code> method of the <code>PathInfo</code> object outputs the value of the <code>Path</code> property)</p>

<pre><code>function Chain-Path($Base, $Chained) {
    $combined = [IO.Path]::Combine($Base, $Chained)
    $isRelative = ![IO.Path]::IsPathRooted($combined)
    (Resolve-Path $combined -Relative:$isRelative).ToString()
}
</code></pre>
    </div>