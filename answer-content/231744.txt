<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Input Validation</h2>

<p>You aren’t completely validating input</p>

<ul>
<li>X: a1</li>
<li>O: b2</li>
<li>X: a2</li>
<li>O: a3 (block)</li>
<li>X: a3 <strong>For the Win!?</strong></li>
</ul>

<h2>Invalid Win/Draw Detection Logic:</h2>

<pre><code>X  O  X
O     O
X  O  X
</code></pre>

<p>Last move in centre: “Aw, it’s a draw!”???  </p>

<h2><code>exit()</code></h2>

<p>This is a bad function to use.   It exits the Python interpreter.   Unconditionally.  Period. </p>

<p>When you want to change your code to play repeated games, run unit tests, etc., you won’t be able to.  Nothing will execute after <code>exit()</code>.</p>

<p>Better would be to move the code into a function, and simply <code>return</code> to force an exit of the current local context, instead of an exit of the entire interpreter. </p>

<h2>f-strings</h2>

<p>You are using <code>{}</code> and <code>.format()</code> in <code>print_board</code>, and using <code>%s</code> and <code>%d</code> in <code>"..." % (...)</code> expressions.  Usually, you should try to avoid mixing formatting methods.  Both are awkward to use, as the value and the place the value goes are far apart in the code.  Avoid using the <code>%</code> style.</p>

<p>Additionally, instead of:</p>

<pre><code>print('%s won in %d turns! Congratulations!' % (user, turn))
</code></pre>

<p>using an f-string moves the variables inside the format string:</p>

<pre><code>print(f'{user} won in {turn} turns! Congratulations!')
</code></pre>

<p>(I’d leave the <code>print_board</code> function alone, but in other print formatting, f-strings are a win.  )</p>
    </div>