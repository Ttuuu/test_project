<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As suggested by <em>Gilbert Le Blanc</em> there are some useful structural patterns that
can be applied in your case. But one thing at a time.</p>
<p>In your <code>Library</code> class there is this comment:</p>
<blockquote>
<p>I am sure there is a way to simplify 'borrowBook()' and 'returnBook()' by use of
new method that does what both of these already do (searching for a book title
match)</p>
</blockquote>
<p>You are right, there are some improvements that could be made on that part. The
first one I see is the usage of your map; One advantage of a map is to
quickly/efficiently retrieve an item by key. In your case the key is not the
book, but the <em>title</em>.</p>
<pre><code>private static static Map&lt;String, BookCollection&gt; booksByTitle = new HashMap&lt;&gt;();

// ...

public static void borrowBook(String bookTitle) {
    if ( !booksByTitle.containsKey(bookTitle) ) {
        System.out.println(bookTitle + " doesn't exist - sorry!");
        return;
    }
    
    BookCollection collection = booksByTitle.get(bookTitle);
    if(collection.borrowBook())
        System.out.println("You have successfully borrowed " + bookTitle);
    else
        System.out.println("All copies of " + bookTitle + " have been checked out already, sorry! :(");
}
</code></pre>
<p>Once done, you see that the two methods <code>borrowBook</code> and <code>returnBook</code> are similar,
only the operation and message is different. You can then refactor your code to
extract that code :</p>
<pre><code>private static void doInCollection(String title, Consumer&lt;BookCollection&gt; operation) {
    if (!booksByTitle.containsKey(title)) {
        System.out.println(title + " doesn't exist - sorry!");
        return;
    }
    operation.accept(booksByTitle.get(title));
}
</code></pre>
<p>(<strong>Added with edit 1</strong>:)
That you use with :</p>
<pre><code>public void borrowBook(String bookTitle) {
    doInCollection(bookTitle, collection -&gt; {
        if (collection.borrowBook())
            System.out.println("You have successfully borrowed " + bookTitle);
        else
            System.out.println("All copies of " + bookTitle + " have been checked out already, sorry! :(");
    });
}
</code></pre>
<p>At that time, you should convert the methods from your <code>Library</code> to instance
methods and took that opportunity to encapsulate the <code>booksByTitle</code> map.</p>
<pre><code>public static void main(String[] args) {
    Library library = new Library();
    library.add(5, "Cracking the Coding Interview");
    library.add(3, "Crime and Punishment");
    library.add(2, "Catch-22");

    library.borrowBook("Catch-22");
    library.borrowBook("Catch-22");

    library.printCatalog();
    System.out.println();

    //Client returns the copies
    library.returnBook("Catch-22");
    library.returnBook("Catch-22");

    //Test if catalog has been updated correctly
    library.printCatalog();
    System.out.println();
}     
</code></pre>
<p>At this time, we can wonder what is the role of your <code>Book</code> class ? It is just a
wrapper around a <code>boolean</code>. You are also printing them as a boolean while, it
would be easier to print the number of copie available and borrowed.</p>
<p>So you can remove the <code>Book</code> class and manage two counters in your<br>
<code>BookCollection</code>.</p>
<pre><code>class BookCollection {
    private int quantity;
    private int available;
    
    // ...
    public boolean borrowBook() { //Borrows a book from the collection
        if ( available&gt;0 ) {
            available -= 1;
            return true;
        } else {
            System.out.println("All books are borrowed, sorry");
            return false;
        }
    }
    
    // ...
}
</code></pre>
<p>Now, if you want to apply the <em>MVC</em> pattern, your <code>BookCollection</code> seems to be a
good candidate for the model while the <code>Library</code> looks like a controller once
all call to <code>System.out</code> are moved to a dedicated (view) class.</p>
<p>Another improvement would be to use <em>Exceptions</em> and query methods instead of
<code>boolean</code> to manage exceptional cases.</p>
    </div>