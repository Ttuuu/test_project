<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>reduce</strong></p>

<p>Whenever you need to fold an operation across a list, like you're doing, you want to use <a href="https://docs.python.org/2/library/functions.html#reduce"><code>reduce()</code></a>. That takes a function, an iterable, and an optional initializer, and performs the operation across all of them. So:</p>

<pre><code>reduce(f, [x, y, z])
</code></pre>

<p>is equivalent to:</p>

<pre><code>f(f(x, y), z)
</code></pre>

<p>This is precisely what we want. The <a href="https://docs.python.org/2/library/operator.html"><code>operator</code></a> library additionally gives us all the mathematical operators, so we don't have to write them ourselves. So the various operations are:</p>

<pre><code>+: reduce(operator.add, numbers) # or just sum(numbers)
-: reduce(operator.sub, numbers, 0)
*: reduce(operator.mul, numbers)
/: reduce(operator.floordiv, numbers, 1)
</code></pre>

<p><strong>Simplifying the logic</strong></p>

<p>We could directly translate the above into a dictionary of operators and a dictionary of initializers:</p>

<pre><code>operators = {
    '+': operator.add,
    '-': operator.sub,
    '*': operator.mul,
    '/': operator.floordiv
}

initializers = {
    '-': 0,
    '/': 1
}

result = reduce(operators[operation],
    numbers, 
    initializers.get(operation, None))
</code></pre>

<p>This will additionally fix your bug where for subtraction you're really adding. </p>

<p><strong>List Comprehensions</strong></p>

<p>It's more direct to simply initialize your numbers directly:</p>

<pre><code>numbers = [int(input("Number: ")) for _ in range(amount)]
</code></pre>

<p>Note that <code>x</code> is not a good name. Prefer more descriptive names. </p>

<p><strong>Division</strong></p>

<p>All of your numbers are <code>int</code>s. Which means that when you divide, you're going to end up with <code>0</code> as soon as you have any number that isn't <code>1</code>. That isn't particularly interesting, so I'd suggest using floating point numbers instead. </p>
    </div>