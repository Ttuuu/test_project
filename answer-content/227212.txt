<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>    public static TSource ArgBy&lt;TSource, TKey&gt;(
</code></pre>
</blockquote>

<p><code>MinBy</code> and <code>MaxBy</code> are very intelligible names, but <code>ArgBy</code> doesn't say much to me. Really this is a specialised <code>Aggregate</code> (and I wonder whether an implementation using <code>Aggregate</code> might be simpler - or, indeed, whether the existence of <code>Aggregate</code> makes <code>ArgBy</code> unnecessary).</p>

<hr>

<blockquote>
<pre><code>        Func&lt;(TKey Current, TKey Previous), bool&gt; predicate)
</code></pre>
</blockquote>

<p>I presume that you chose <code>Func&lt;(TKey Current, TKey Previous), bool&gt;</code> instead of <code>Func&lt;TKey, TKey, bool&gt;</code> because it lets you name the arguments? Whatever the reason, it would be worth documenting.</p>

<hr>

<blockquote>
<pre><code>        if (value == null)
        {
            foreach (var other in source)
            {
                if (other == null) continue;
                var otherKey = keySelector(other);
                if (otherKey == null) continue;
</code></pre>
</blockquote>

<p>Those two <code>continue</code>s would also be worth documenting. I might want <code>null</code> to sort before everything else rather than be discarded.</p>

<hr>

<blockquote>
<pre><code>        if (value == null)
        {
            ...
            return value;
        }
        else
        {
            bool hasValue = false;
            ...
            if (hasValue) return value;
            throw new InvalidOperationException("Sequence contains no elements");
        }
</code></pre>
</blockquote>

<p>That inconsistency is a big gotcha. I see from your reference that <code>System.Linq</code> does the same, but I wouldn't expect it and I definitely think it should be documented.</p>

<p>Also, the exception message might not be true: maybe the sequence contained elements, but their keys were <code>null</code>.</p>

<p>Note that Linq predates some of the type constraints we have now. Perhaps it would be worth handling the two cases by having two implementations, one with <code>where TSource : class</code> and one with <code>where TSource : struct</code>. That way the method-level comments don't have to case split on the type parameter (<code>&lt;exception cref="InvalidOperationException"&gt;Thrown when the sequence is empty and the element type is a struct.&lt;/exception&gt;</code>).</p>
    </div>