<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Expectation Setting</h2>
<p>Your algorithm is an incrementing index, which you then convert in to the radix of your charset.</p>
<p>Your charset is what, 95 characters?</p>
<p>So, there are the following possible permutations for passwords:</p>
<pre><code>1 char -&gt; 95
2 char -&gt; 9025
3 char -&gt; 857375
4 char -&gt; 81450625
5 char -&gt; 7737809375
6 char -&gt; 735091890625
7 char -&gt; 69833729609375
8 char -&gt; 6634204312890625
</code></pre>
<p>OK, so, let's assume the person chooses an 8 char password you need to crack, and that it starts about half-way through your alphabet with a 'K'.</p>
<p>That means you will have to calculate about... 3,000,000,000,000,000 passwords before you get to the right one....</p>
<p>Now, let's assume your browser is super fast (like in the scale of a super-computer), and can compute 1 billion passwords each second....</p>
<p>It will need 3,000,000 seconds to get to the right one.... which is.... about 5 weeks (not 2.5 years as originally stated).</p>
<p>Now, your browser, if it is on an amazing PC, will be 1000 times slower.... so, the right way to crack this password this millennium, is to actually wait about 20 years, and then crack it then when computers are a few hundred times faster ;-)</p>
<p>Note, I would not expect even the fastest PC to be able to get to 5char passwords using a single-threaded execution model, in the most optimal way, to check more than 1,000,000 passwords a second, which makes 5 char passwords more than 2 minutes away....</p>
<p>This is one of the joys about brute-force tactics, by the way, is that, in general, the fastest way to crack a brute-force password of reasonable length, is to do nothing.... and wait for technology to get faster... and then start later, and finish sooner.</p>
<h2>Alternate algorithm</h2>
<p>Using recursion would be a natural way to solve the general problem of checking all solutions, but it has the problem that it checks all solutions in the wrong order (typically it solves the longest passwords first.... which would be counter-intuitive to check a bunch of 8-char passwords before you check all 7 char passwords.</p>
<p>So, you are left with just making the current system faster... and, that's a somewhat fruitless problem, because even halving the time would not be meaningful in most cases.</p>
<p>This leads on to multi-threading, which is the fastest way to accelerate the problem, but I am not sure this is available on your browser.</p>
    </div>