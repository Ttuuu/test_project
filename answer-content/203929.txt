<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I like your use of <code>List.partition</code> but I have the following suggestion:</p>

<p>If it's possible in the context then avoid making the arguments as a tuple in the predicate. Just declare it as:</p>

<pre><code>let isDivisorFor div x = x % div = 0 
</code></pre>

<p><strong>NB: I use this version in all versions below</strong></p>

<p>It will IMO make it all more readable:</p>

<pre><code>let sortIntoBags predicate bags lst =
    let take lst bag =
        let (inBag, remaining) = lst |&gt; List.partition (predicate bag)
        ((bag, inBag), remaining)
    let (bagSets, leftOver) = bags |&gt; List.mapFold take lst
    (bagSets, leftOver)
</code></pre>

<hr>

<blockquote>
<pre><code>    let (bagSets, leftOver) = bags |&gt; List.mapFold take lst
    (bagSets, leftOver)
</code></pre>
</blockquote>

<p>Here there is no need for the last line. Just return the right side of the first line - making it a little more simple:</p>

<pre><code>let sortIntoBags predicate bags lst =
    let take lst bag =
        let (inBag, remaining) = lst |&gt; List.partition (predicate bag)
        ((bag, inBag), remaining)
    bags |&gt; List.mapFold take lst
</code></pre>

<hr>

<p>Just for fun, I made a version using recursion:</p>

<pre><code>let sortIntoBags predicate bags data =
    let rec part lst bgs result =
        match bgs with
        | [] -&gt; result |&gt; List.rev, lst
        | _ -&gt; let group, remaing = lst |&gt; List.partition (predicate bgs.Head)
               (part remaing bgs.Tail ((bgs.Head, group)::result))
    part data bags []
</code></pre>

<p>Notice that I have the total result as argument to the <code>part</code> function in order to make it tail-recursive. </p>

<hr>

<p>If you can live with an <code>Option</code> value as the group key, it is fairly simple to use <code>List.groupBy</code>:</p>

<pre><code>let sortIntoBags predicate bags data =
    data |&gt; List.groupBy (fun x -&gt; bags |&gt; List.tryFind (fun k -&gt; predicate k x))
</code></pre>

<p>... If not it gets a little more complicated and then your own may be a better choise:</p>

<pre><code>let sortIntoBags predicate bags data =
    let result = data |&gt; List.groupBy (fun x -&gt; bags |&gt; List.tryFind (fun k -&gt; predicate k x))
    (result |&gt; List.where (fun (k, l) -&gt; k.IsSome) |&gt; List.map (fun (k, l) -&gt; k.Value, l), result |&gt; List.where (fun (k, l) -&gt; k.IsNone) |&gt; List.head |&gt; snd)
</code></pre>

<p>or with the use of <code>List.partition</code>:</p>

<pre><code>let sortIntoBags predicate bags data =
    let result = data |&gt; List.groupBy (fun x -&gt; bags |&gt; List.tryFind (fun k -&gt; predicate k x)) |&gt; List.partition (fun (k, l) -&gt; k.IsSome)
    (fst result |&gt; List.map (fun (k, l) -&gt; k.Value, l), (snd result |&gt; List.head |&gt; snd))
</code></pre>
    </div>