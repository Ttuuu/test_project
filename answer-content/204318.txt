<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>For a first pass, not bad! Your code is pretty easy to follow.</p>

<p>Problems:</p>

<ol>
<li><p>Don't use <code>[]</code> to match different strings. <code>[]</code> matches any set of characters, so <code>[imgur|i.imgur]*</code> will match ``, <code>g</code>, <code>mgi</code>, etc. You probably wanted a non-capturing group, which is specified with <code>(?: ...)</code>, <a href="https://docs.python.org/3/library/re.html" rel="noreferrer">re Docs</a></p></li>
<li><p>Name functions with <code>snake_case</code>, as recommended by <a href="https://www.python.org/dev/peps/pep-0008/?#function-and-variable-names" rel="noreferrer">PEP 8</a>.</p></li>
<li><p>The challenge as stated doesn't specify what should happen if the string passed in doesn't match the link format. Right now your code will throw an <code>AttributeError</code>, which isn't very helpful to the caller. I'd recommend raising an explicit exception with a more helpful message.</p></li>
<li><p>Your last case, <code>direct_link_regex</code> is never reached with valid input since it is handled by <code>image_regex</code>.</p></li>
</ol>

<p>Improvements:</p>

<ol>
<li><p>Concatenating the regex to handle each case is somewhat messy. It would be better to have a single regex which handles all cases.</p></li>
<li><p>Regular expressions are usually expressed using raw strings, that is, strings with an <code>r</code> prefix. This helps with escaping characters correctly. In this case I'm guessing you just got lucky that it worked as you expected.</p></li>
<li><p>Including a docstring is always a good idea, and you can even embed tests using <a href="https://docs.python.org/3/library/doctest.html" rel="noreferrer">doctest</a>.</p></li>
</ol>

<p>How I would implement this function:</p>

<pre><code>def imgur_url_parser(url):
    """
    Parses an imgur url into components.

    &gt;&gt;&gt; imgur_url_parser("http://imgur.com/a/cjh4E") == {"type": "album", "id": "cjh4E"}
    True
    &gt;&gt;&gt; imgur_url_parser("http://imgur.com/gallery/59npG") == {"type": "gallery", "id": "59npG"}
    True
    &gt;&gt;&gt; imgur_url_parser("http://i.imgur.com/altd8Ld.png") == {"type": "image", "id": "altd8Ld"}
    True
    &gt;&gt;&gt; imgur_url_parser("http://imgur.com/OzZUNMM") == {"type": "image", "id": "OzZUNMM"}
    True
    """
    match = re.match(r"^https?://(?:www\.|i\.)?imgur\.com/([\w.]+)/?(\w*)$", url)
    if not match:
        raise ValueError('The string "{}" is not a valid imgur link'.format(url))
    # Empty when this is an image link
    if not match.group(2):
        # Remove image extension, if it exists
        image_id = re.sub(r"(\.\w+)?$", "", match.group(1))
        return { "id": image_id, "type": "image" }
    url_type = match.group(1) == "a" and "album" or "gallery"
    return { "id": match.group(2), "type": url_type}


if __name__ == "__main__":
    import doctest
    doctest.testmod()
</code></pre>
    </div>