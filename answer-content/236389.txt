<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I am not certain what you are asking, so I will mention three ideas about your code and hope it helps.</p>

<p><strong>Worry mostly about your function level</strong></p>

<pre><code>def list_sequence(sequence):
</code></pre>

<p>This is a tricky function, mostly because it is really:</p>

<pre><code>def print_players_or_currency(player_list_or_currency_dict)
</code></pre>

<p>You should rarely need to look at the type of an object (with <code>type()</code> or <code>isinstance()</code>) and only when doing meta-programming.  Make two functions.</p>

<p><strong>Play with f-strings formatting</strong></p>

<pre><code>    for key in sequence:
        i += 1
        proportional_space = ' ' * ( (max(lengths) - len(key)) + 2 )
        print('-'*20)  
        print(f'{i})-{key}{proportional_space}: {sequence.get(key, 0)}')          
</code></pre>

<p>could be shorter:</p>

<pre><code>for i, (key, value) in enumerate(sequence.items()):
    print(f"{'':-&gt;20}\n{i+1:2}-{key:&lt;{max(lengths)}}: {value}")
</code></pre>

<p><strong>Always use a main() function</strong></p>

<p>You have about a hundred lines at the top level.  The problem is that the top level creates questions about global variables, ordering declarations and so on.  It is far better to throw all hundred lines inside a <code>main</code> function and call it.  While this might seem odd to insist on, remember that the Python interpreter just runs lines of code from top to bottom while keeping track of name spaces.   This means that <code>def foo(): ....</code> is just a statement.  The problem is that the top level code creates global variables, can only call functions if the <code>def</code> was seen first, and so on.  Save confusion:  put all your code inside a function and just have imports and a <code>main()</code> at the top level.</p>
    </div>