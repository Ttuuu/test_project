<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Thanks for sharing your code.</p>

<p>As the comments tell, your code does not actually use <em>inheritance</em>, but that is only a <em>feature</em> of OOP, not a precondition. </p>

<p>OOP doesn't mean to "split up" code into random classes with random inheritance relationships.</p>

<p>The ultimate goal of OOP is to reduce code duplication, improve readability and support reuse as well as extending the code.</p>

<p>Doing OOP means that you follow certain principles which are (among others):</p>

<ul>
<li>information hiding / encapsulation</li>
<li>single responsibility</li>
<li>separation of concerns</li>
<li>KISS (Keep it simple (and) stupid.)</li>
<li>DRY (Don't repeat yourself.)</li>
<li>"Tell! Don't ask."</li>
<li>Law of demeter ("Don't talk to strangers!")</li>
</ul>

<p><em>Inheritance</em> comes into play when we need to modify a classes <em>behavior</em>. That is: one (or more) methods of the derived class get implementations, that differ from the implementation of the same method in the parent class.</p>

<p>Following this guidelines and having no further requirement that your code examples the suggestion of @AJNeufeld would be the best OOish solution: having one class <code>Container</code> with different configurations for <em>glass</em>, <em>jug</em>.</p>

<pre><code> public class Container {
    private String name;
    private float capacity;
    private float quantity = (float)0.0;


    Container(String name, float capacity){
        this.name =  name;
        this.capacity = capacity;
    }

    public float getCapacity(){
        return capacity;
    }

    public void setCapacity(float quantity){
          this.quantity = quantity;    
    }

    public void fill(float q){
        quantity = q; 
    }

    public void pour(Container g,float q){
        g.fill(q);
        this.quantity -= q;    
    }

    public void status(){
        System.out.print(name+"::: ");
        if(capacity == quantity){
            System.out.println("Full");
        }
        else if(capacity &gt; quantity){
            System.out.println("Have " + quantity + " units");
        }
        else if(capacity &lt; quantity){
            System.out.println("Overflowed");
        }else if(quantity == 0.0){
            System.out.println("Empty");
        }
    }
}
</code></pre>

<p>A <em>human</em> has a diferent behavior that a <em>Container</em>. Therefore it would need a class of its own as you did. But it would be simplyfied be the new approach. It only needs one method to fill a <code>Container</code>, not a single method for any. </p>

<pre><code>public class Human {
    private String name;
    private float d= 0;
    Human(){

    }
    Human(String name){
        this.name=name;
    } 

    public String getName(){
        return name;
    }

    public void setName(String name){
        this.name= name;
    }

    public void pour(Container g, Container j,float quantity){    
        j.pour(g, quantity);    
    }

    public void fill(Container j,float quantity){
        j.fill(quantity);
    }

    public void drink(Container g, float quantity){
        g.setCapacity(-quantity);
         d +=quantity; 
    }

    public void status(){
        System.out.println(name + "consumed " + d + " units");
    }
}
</code></pre>

<p>This way the program is more flexible.</p>

<p>eg our original Program the human can only transfer content from a a <em>jug</em> to a <em>glass</em>, but not vize versa:</p>

<pre><code>m.fillGlass(g, j, 0.4f);
</code></pre>

<p>With the new approach it can be dome in both directions:</p>

<pre><code>Container j = new Container("Jug",5.0f);
Container g = new Container("Glass",1.0f);

Human m = new Human("Mickey Mouse");

m.fill(j, 4.0f);
m.pour(g, j, 0.4f);
m.pour(j, g, 0.2f);
</code></pre>

<p>And we can also use new types of containers without doing any change:</p>

<pre><code>Container coffeCan = new Container("CoffeCan",2.0f);
Container cup = new Container("Cup",0.2f);
Container mug = new Container("Mug",0.4f);

Human me = new Human("Mickey Mouse");

me.fill(coffeCan, 2.0f);
me.pour(coffeCan, cup, 0.15f);
me.pour(coffeCan, mug, 0.35f);
</code></pre>

<hr>

<h1>General critic</h1>

<p>Your code has some issues I'd like to address:</p>

<h2>Avoid unnecessary  mutability</h2>

<p>Your classes <code>Jug</code> and <code>Glass</code> have a <em>mutable</em> property <code>capacity</code>. In real life it is quite unlikely that the capacity of a Jar or a Glass changes (significantly) during its lifetime. the same should be true for this Java objects during the runtime of the program. So you should make this properties <em>immutable</em> by apllying the <code>final</code> key word. Of cause this implies that you set it in (any) constructor and remove all <em>setter</em> methods:</p>

<pre><code> public class Container {
    private final String name;
    private final float capacity;
    private float quantity = (float)0.0;


    Container(String name, float capacity){
        this.name =  name;
        this.capacity = capacity;
    }
    // ...
}
</code></pre>

<h2>Naming</h2>

<p>Finding good names is the hardest part in programming. So always take your time to think carefully of your identifier names.</p>

<h3>Single letter and abbreviated names</h3>

<p>Avoid single letter and abbreviated names.  Although this abbreviation makes sense to you (now) anyone reading your code being not familiar with the problem has a hard time finding out what this means.</p>

<p>If you do this to save typing work: remember that you way more often read your code than actually typing something. Also for Java you have good IDE support with code completion so that you most likely type a long identifier only once and later on select it from the IDEs code completion proposals.</p>

<h3>Don't surprise your readers</h3>

<p>A name of a method should clearly state what the method does.</p>

<p>In your code you have:</p>

<pre><code>class Glass /* in class Jug too*/ {
    // ..
    public void setCapacity(float quantity){
          this.quantity = quantity;    
    }
    // ...
}
</code></pre>

<p>Here it is obvious, that the implementation is different from what the method name implies.</p>
    </div>