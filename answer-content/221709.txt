<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Commenting</h1>
<p>You could improve the functions with some introductory comments.  In particular, the <code>isPrime()</code> predicate has an extra argument compared with the conceptual version - we should be clear what that's for (i.e. it's an ordered set of all primes up to <code>âˆšnum</code>).  Similarly, <code>sieve()</code>'s <code>results</code> argument is assumed to be empty, but that's not clearly communicated.  For a program this small, that's probably a very minor consideration, but still a good habit to be in.</p>
<h1>Presentation</h1>
<p>Choose one brace style and stick with it.  Here, we have a mix of open brace styles:</p>
<pre><code>    if (prime &gt; max) {
        return true;
    }   
    if (num % prime == 0)
    {   
        return false;
    }   
</code></pre>
<p>I'm also not very keen on the trailing whitespace, though that's easily fixed.</p>
<p>Some spellings are, let's say, <em>unconventional</em>: <code>siveStartSize</code> really ought to be spelt <em><code>sieveStartSize</code></em>, and <code>well know primes</code> probably means <em><code>well-known primes</code></em>.  I think that <code>ignore all factors of 2</code> actually meant all <em>multiples</em> of 2; the same substitution is present in <code>skip all factors of 2 and 3</code>.</p>
<h1>Storage</h1>
<p>Is there a good reason why <code>primeCandidates</code> stores <code>std::size_t</code> values holding either 0 or 1?  <code>std::vector&lt;char&gt;</code> works just as well for me.</p>
<p>Following this, I'd consider replacing</p>
<blockquote>
<pre><code>results.push_back(2);
results.push_back(3);
</code></pre>
</blockquote>
<p>with</p>
<pre><code>results = {2, 3};
</code></pre>
<p>so we don't have to assume that <code>results</code> is initially empty.</p>
<h1>Structure</h1>
<p>It seems strange that half of the work is in <code>main()</code>, where we re-compute the value of <code>inc</code> we had inside <code>sieve</code> in order to continue with the second half of the algorithm.  I'd be inclined to keep that loop in <code>sieve()</code>, separated by a comment.  Then <code>main()</code> simply do its job of choosing parameters, calling the function and printing results.</p>
<h1>Flexibility</h1>
<p>Why are <code>primeRequired</code> and <code>siveStartSize</code> constants?  A useful program allows the user to obtain their choice of result.</p>
    </div>