<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are a couple of suggestions:</p>

<ul>
<li>You don't have to repeat yourself in each <code>Invoke</code> method. Reuse the implementation of the <em>largest</em> one by calling it from other overloads.</li>
<li>You can greatly simplify it by using <code>try/finally</code> and provide the <code>Elapsed</code> value in any case. With your solution you'll loose it if the measured method throws.</li>
<li>I find it's more useful to provide the <code>Elapsed</code> value as <code>TimeSpan</code> via <code>Action&lt;&gt;</code> so that you can use it instantly inside the call as this is what you're be doing most often. Writing to the <code>Console</code> or to a log.</li>
<li>Make these methods extension for the <code>Stopwatch</code>.</li>
</ul>

<p>Example:</p>

<pre><code>public static class StopwatchExtensions
{
    public static T Measure&lt;T&gt;(this Stopwatch stopwatch, Func&lt;T&gt; action, Action&lt;TimeSpan&gt; elapsed)
    {
        try
        {
            return action();
        }
        finally
        {
            elapsed(stopwatch.Elapsed);
        }
    }

    public static void Measure(this Stopwatch stopwatch, Action action, Action&lt;TimeSpan&gt; elapsed)
    {
        stopwatch.Measure&lt;object&gt;(() =&gt; { action(); return default; }, elapsed);
    }
}
</code></pre>

<p>Usage:</p>

<pre><code>Stopwatch
    .StartNew()
    .Measure(DoSomething, elapsed =&gt; Console.WriteLine(elapsed));
</code></pre>

<p>If you want it even shorter then create a helper for that:</p>

<pre><code>static class ConsoleHelper
{
    // TODO for you: format the message whatever you like.
    public static void WriteElapsed(TimeSpan elapsed) =&gt; Console.WriteLine(elapsed);
}
</code></pre>

<p>and plug it in without the lambda:</p>

<pre><code>Stopwatch
    .StartNew()
    .Measure(DoSomething, ConsoleHelper.WriteElapsed);
</code></pre>

<p>You can create more of them. E.g. if you want to include the method name in the message then create an overload that returns an <code>Action&lt;TimeSpan&gt;</code> so that you can use this one without the lambda too:</p>

<pre><code>public static Action&lt;TimeSpan&gt; WriteElapsed(string memberName)
{
    return elapsed =&gt; Console.WriteLine($"'{memberName}' executed in {elapsed}");
}
</code></pre>

<p>and you call it like this:</p>

<pre><code>Stopwatch
    .StartNew()
    .Measure(DoSomething, ConsoleHelper.WriteElapsed(nameof(DoSomething)));
</code></pre>
    </div>