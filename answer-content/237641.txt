<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>private int mapSize;
private int mapCubeSize;
private float[] state;
private float[] result;
private int index;
private int connectCount;
private int blobMin;
</code></pre>
</blockquote>

<p>You should clean up unused members: <code>mapCubeSize</code>, <code>result</code>, <code>index</code> and <code>connectCount</code> are unused.</p>

<hr>

<p>Be consistent with your naming: methods and properties of a class are named with <code>PascalCase</code>, while fields are named with <code>camelCase</code> (e.g. <code>walker()</code> should be <code>Walker()</code> (BTW: <code>walker()</code> is a strange and mysterious name saying nothing about its behavior))</p>

<hr>

<blockquote>
<pre><code>private HashSet&lt;Vector3Int&gt; history;
private Queue&lt;Vector3Int&gt; queue;
private int blobSz;
</code></pre>
</blockquote>

<p>These members represent partial states inside <code>walker()</code>. I don't like them to be class members. Instead you could provide them as parameters to <code>ProcessNode()</code>, or you could define <code>ProcessNode()</code> as a nested method inside <code>walker()</code>:</p>

<pre><code>private bool walker(int x, int y, int z)
{

  int blobSz = 0;
  Queue&lt;Vector3Int&gt; queue = new Queue&lt;Vector3Int&gt;();
  HashSet&lt;Vector3Int&gt; history = new HashSet&lt;Vector3Int&gt;();
  ProcessNode(new Vector3Int(x, y, z)); // queue start position
  var loopcount = 0;

  void ProcessNode(Vector3Int newVect)
  {
    // if not already in history
    if (!history.Contains(newVect))
    {
      blobSz++;
      // add node to queue for later check
      queue.Enqueue(newVect);
      // mark node as counted so we don't count again, or check its connections
      history.Add(newVect);
    }
  }

  while (blobSz &lt; blobMin)
  {
    loopcount++;
    var node = queue.Dequeue();
    var idx = getIdx(node);
    ...
</code></pre>

<hr>

<blockquote>
<pre><code>private void ProcessNode(Vector3Int newVect){
    // if not already in history
    if (!history.Contains(newVect)){
        blobSz++;
        // add node to queue for later check
        queue.Enqueue(newVect);
        // mark node as counted so we don't count again, or check its connections
        history.Add(newVect);
    }
}
</code></pre>
</blockquote>

<p>The <code>HashSet&lt;T&gt;.Add()</code> method returns a <code>bool</code> indicating if the value was added (<code>true</code>) or already present. You can use that to simplify <code>ProcessNode()</code>:</p>

<pre><code>  void ProcessNode(Vector3Int newVect)
  {
    // if not already in history
    if (history.Add(newVect))
    {
      blobSz++;
      // add node to queue for later check
      queue.Enqueue(newVect);
    }
  }
</code></pre>

<hr>

<p>All the calls to <code>ProcessNode()</code> creates a new <code>Vector3Int</code> instance from coordinates (x, y, z). Consider to change its signature to: <code>ProcessNode(int x, int y, int z)</code> and then create the vector inside <code>ProcessNode(...)</code> instead:</p>

<pre><code>ProcessNode(int x, int y, int z)
{
  newVect = new Vector3Int(x, y, z);
  ...
}
</code></pre>

<hr>

<p>Instead of this:</p>

<blockquote>
<pre><code>    // check edges
    if (node.x != 0)
    { // edge x-
      if ((int)state[idx - 1] == 1)
        ProcessNode(new Vector3Int(node.x - 1, node.y, node.z));
    }
</code></pre>
</blockquote>

<p>I think, I would prefer:</p>

<pre><code>    // check edges (x-)
    if (node.x != 0 &amp;&amp; (int)state[idx - 1] == 1)
    { 
      ProcessNode(new Vector3Int(node.x - 1, node.y, node.z));
    }
</code></pre>

<hr>

<blockquote>
<pre><code>      removeThis = walker(x, y, z);
      if (removeThis)
</code></pre>
</blockquote>

<p>You only use <code>removeThis</code> once, so no need to define it as a variable:</p>

<pre><code>if (walker(x, y, z))
   ...
</code></pre>

<p>is clear enough.</p>
    </div>