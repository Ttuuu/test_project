<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are plenty of <a href="/questions/tagged/rock-paper-scissors" class="post-tag" title="show questions tagged 'rock-paper-scissors'" rel="tag">rock-paper-scissors</a> implementations in <a href="/questions/tagged/java" class="post-tag" title="show questions tagged 'java'" rel="tag">java</a> on this site.  I'll try to keep my suggestions at a <a href="/questions/tagged/beginner" class="post-tag" title="show questions tagged 'beginner'" rel="tag">beginner</a> level, though.</p>

<p>First, I should point out that your <strong>"play again?" mechanism</strong> doesn't actually work: you ask the question, but never do anything with the result.    Putting the "play again?" prompt in its own class doesn't make much sense; it can just be a function.  That function should return a <code>boolean</code> result â€” <code>true</code> to play again, <code>false</code> to quit.  In <code>main()</code>, the <code>while (b != 0)</code> loop would best be written as a do-while loop, since you want to run the game at least once without asking.  <code>b</code> is a poor variable name; <code>playAgain</code> would be much more helpful.</p>

<p>The main lesson that I think you should learn from this exercise is <strong>object-oriented thinking</strong>.  Instead of <code>input</code> and <code>randomNumber</code>, how about thinking about a <code>HumanPlayer</code> and a <code>RandomComputerPlayer</code>, both of which can return a choice of "Rock", "Paper", or "Scissors" when asked to <code>play()</code>?  The code would better model the game.</p>

<p>To analyze the outcome, you have <strong>enumerated all 9 combinations</strong>.  Of those, three outcomes are ties, which can easily be detected.  It would also be better to group all of the winning outcomes and all of the losing outcomes together.</p>

<h3>RockPaperScissors.java</h3>

<pre><code>import java.util.Random;
import java.util.Scanner;

public class RockPaperScissors {
    private static boolean playAgain(Scanner scanner) {
        System.out.println("Play again? Y(8), N(9)?");
        switch (scanner.nextInt()) {
        case 8:
            System.out.println("Rock, Paper, Scissors!");
            return true;
        default:
            System.out.println("Thanks for playing!");
            return false;
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        RPSPlayer computer = new RandomComputerPlayer(new Random());
        RPSPlayer human = new HumanPlayer(scanner);

        System.out.println("Rock Paper Scissors, by 200_success!");
        do {
            String comp = computer.play();
            String you = human.play();

            System.out.printf("%s vs. %s", comp, you);
            if (you.equals(comp)) {
                System.out.println(", IT'S A TIE!");
            } else if ( ("Rock".equals(you) &amp;&amp; "Scissors".equals(comp)) ||
                        ("Scissors".equals(you) &amp;&amp; "Paper".equals(comp)) ||
                        ("Paper".equals(you) &amp;&amp; "Rock".equals(comp)) ) {
                System.out.println("! You win!");
            } else {
                assert (("Rock".equals(comp) &amp;&amp; "Scissors".equals(you)) ||
                        ("Scissors".equals(comp) &amp;&amp; "Paper".equals(you)) ||
                        ("Paper".equals(comp) &amp;&amp; "Rock".equals(you)));
                System.out.println("! You lose!");
            }
        } while (playAgain(scanner));
    }
}
</code></pre>

<h3>RPSPlayer.java</h3>

<pre><code>public interface RPSPlayer {
    String[] CHOICES = new String[] { "Rock", "Paper", "Scissors" };

    /**
     * Returns one of "Rock", "Paper", or "Scissors".
     */
    String play();
}
</code></pre>

<h3>HumanPlayer.java</h3>

<pre><code>import java.util.Scanner;

public class HumanPlayer implements RPSPlayer {
    private final Scanner scanner;

    public HumanPlayer(Scanner scanner) {
        this.scanner = scanner;
    }

    public String play() {
        System.out.println("Select 1, 2, or 3 for Rock, Paper, Scissors");
        int choice = this.scanner.nextInt();
        // Keeping things simple, not doing any validation here
        return CHOICES[choice - 1];
    }
}
</code></pre>

<h3>RandomComputerPlayer.java</h3>

<pre><code>import java.util.Random;

public class RandomComputerPlayer implements RPSPlayer {
    private final Random random;

    public RandomComputerPlayer(Random random) {
        this.random = random;
    }

    public String play() {
        return CHOICES[this.random.nextInt(CHOICES.length)];
    }
}
</code></pre>
    </div>