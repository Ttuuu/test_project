<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I have reached a far better implementation, by my standards, by first gaining a grasp of Q promises and how Waterline's model queries work.</p>

<p>I figured out Q promises by watching this video on Angular's promises, which are based on Q. Very helpful: <a href="https://www.youtube.com/watch?v=cdG_T6ufcbE" rel="nofollow">https://www.youtube.com/watch?v=cdG_T6ufcbE</a></p>

<p>I learned to use <code>.then()</code> and <code>.catch()</code> instead of <code>.exec()</code> with Waterline: <a href="http://sailsjs.org/documentation/reference/waterline-orm/queries" rel="nofollow">http://sailsjs.org/documentation/reference/waterline-orm/queries</a></p>

<p>I imported Q to my project by navigating to my sails project's directory and using:</p>

<pre><code>npm install q --save
</code></pre>

<p>To use Q anywhere in the project I added <code>sails.Q = require('q');</code> in the <code>module.exports.bootstrap</code> in <code>config/bootstrap.js</code></p>

<p>My function from above in <code>api/controllers/UserController.js</code> went from 88 lines to 18:</p>

<pre><code>//admin can update a user's account data
update: function (req, res)
{
    //validate request and create an object for update
    UserModule.validateUpdate(req)
    .then(function (userUpdates)
    {
        //update the user's data
        User.update({ id : req.param("id")}, userUpdates)
        .then(function (updatedUser)
        {
            return res.ok();
        });
    })
    .catch(function (err)
    {
        return res.send(400, err);
    });
},
</code></pre>

<p><code>UserModule.validateUpdate</code> is a helper that is in <code>api/services/UserModule.js</code>.
Irl Nathan has an excellent tutorial on how to use helper functions in Sails.js: <a href="https://www.youtube.com/watch?v=877gSvq05fM" rel="nofollow">https://www.youtube.com/watch?v=877gSvq05fM</a></p>

<pre><code>//Validates request and creates object that will update model with .update()
validateUpdate : function (req)
{
    var deffered = sails.Q.defer();
    var userUpdate = {};

    if (!(req.param('email') &amp;&amp; req.param('name') &amp;&amp; req.param('car') &amp;&amp; req.param('permissions') &amp;&amp; req.param('id')))
    {
        deffered.reject('Missing "Update" request parameter.');
    }

    if (!emailIsValid(req.param('email')))
    {
        deffered.reject('Login is not a vaild email address');
    }

    if (!(req.param('permissions') === 'junior' || req.param('permissions') === 'senior'))
    {
        deffered.reject('Invalid permissions, choose "junior" or "senior"');
    }

    if (!nameIsValid(req.param('name')))
    {
        deffered.reject('Name is not in "First Last" format or contains invalid characters.');
    }

    //populate the object passed to User.update() based on
    //the properties present in the request
    if (req.param('password') === "" || !req.param('password'))
    {
        userUpdate =  {
                email : req.param("email"),
                name : req.param("name"),
                car : req.param("car"),
                permissions : req.param("permissions")
            };

        deffered.resolve(userUpdate);
    }
    else
    {
        userUpdate =  {
                email : req.param("email"),
                password : req.param("password"),
                name : req.param("name"),
                car : req.param("car"),
                permissions : req.param("permissions")
            };

        deffered.resolve(userUpdate);
    }

    return deffered.promise;

},
</code></pre>

<p>Hope this helps anyone else that wants to have neat, elegant, abstracted, and readable controller code in Sails.js!</p>
    </div>