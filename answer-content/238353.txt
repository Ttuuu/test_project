<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Exception</h1>

<p>I know this conflicts with @Henrik Hansen's advice on your previous review, however rather than throwing <code>NullReferenceException</code>, I'd suggest throwing <code>InvalidOperationException</code>.  Throwing <code>NullReferenceException</code> gives a bit too much information about the implementation details of your class.  It also suggests that there's a problem with your implementation, rather than telling the client they are trying to do something wrong (get an object from an empty list).  Switching to <code>InvalidOperationException</code> will also mean that your classes behaviour matches that of other standard collections such as <code>Queue</code> and <code>Stack</code>.</p>

<h1>Consistency</h1>

<p>You're mixing an matching single line function definitions:</p>

<blockquote>
<pre><code>public T Tail =&gt; _tail == null ? throw new NullReferenceException() : _tail.Data;
public bool IsEmpty { get { return Count &gt; 0 ? false : true; } }
</code></pre>
</blockquote>

<p>I don't see why you didn't do the same with <code>IsEmpty</code> that you've done with <code>Tail</code>/<code>Head</code>.</p>

<pre><code>public bool IsEmpty =&gt; Count &gt; 0 ? false : true; 
</code></pre>

<h1>Double Checking</h1>

<p>As soon as you put something into your list, you update both the <code>_head</code> and <code>_tail</code>.  When you add to the head/tail at the moment, you're checking both:</p>

<pre><code> if (_head == null &amp;&amp; _tail == null)
</code></pre>

<p>This seems redundant.  Either the list will have something in it (in which case <code>_head</code>/<code>_tail</code> should both not be <code>null</code>), or the list will be empty (in which case both <code>_head</code> and <code>_tail</code> should be <code>null</code>.  Which brings me on to...</p>

<h1>Bug(s)</h1>

<p>You have a bug in your <code>RemoveHead</code> method (and a corresponding one in <code>RemoveTail</code>).  If the list contains only one item, then both <code>_head</code> and <code>_tail</code> point to the same <code>Node</code>.  So, when you remove that node, both references will need to be updated.  At the moment, <code>RemoveHead</code> updates the head, but not the tail, which means that tail points to a node that shouldn't be there anymore.  This can lead to trouble.  Consider the following test, which should pass, but fails with a NullReference.</p>

<pre><code>[Fact]
public void RemoveHead_ThenAdd_Should_Set_Head_Tail()
{
    // Arrange
    int[] myNums = { 1 };
    var myLinkedList = new LinkedList&lt;int&gt;(myNums);
    Assert.Equal(1, myLinkedList.Head);
    Assert.Equal(1, myLinkedList.Tail);

    //Act
    myLinkedList.RemoveHead();
    myLinkedList.AddTail(5);

    //Assert
    Assert.Equal(5, myLinkedList.Tail);
    Assert.Equal(5, myLinkedList.Head);  // This fails with NullReference
}
</code></pre>

<h1>Misleading Behaviour / Bug</h1>

<p>When removing from the head/tail, you return a <code>default</code> value if the list is empty.  This feels wrong, since you throw an exception if the client tries to access the head/tail values of an empty list.  It feels like removing the head/tail of an empty list should throw the same exception.</p>

<p>It also looks like the remove head/tail methods are supposed to return the data value from the removed <code>Node</code>.  They don't, they return the data value from the new head/tail, or <code>default</code> if there's only one item in the list.  Seems like a bug.  At best, it's confusing.</p>
    </div>