<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Yikes — the global variables make this spaghetti code.  Functions should make it obvious what their input parameters are, and return their output values.  You'd be better off lumping everything into one <code>main()</code> function than using global variables.  Ironically, the two variables that <em>should</em> have been global constants — <code>chromatic</code> and <code>scales</code> — weren't.</p>

<p>It is customary to put <code>main()</code> last, and helper functions first, so that you don't have to write forward declarations.</p>

<p>You used <a href="https://en.cppreference.com/w/cpp/algorithm/find" rel="nofollow noreferrer"><code>std::find()</code></a> and <a href="https://en.cppreference.com/w/cpp/iterator/distance" rel="nofollow noreferrer"><code>std::distance()</code></a>, so you should <code>#include &lt;algorithms&gt;</code> and <code>&lt;iterator&gt;</code>.  I suggest listing your includes alphabetically.</p>

<h2>Behaviour</h2>

<pre class="lang-none prettyprint-override"><code>Please enter your root note and scale: 
F# Major

root scale: F# Major

C D E F G A B 
</code></pre>

<p>If the <code>rootnote</code> is not found in <code>chromatic</code>, you should handle that case instead of blindly proceeding based on <code>chromatic.end()</code>.</p>

<pre class="lang-none prettyprint-override"><code>Please enter your root note and scale: 
D Major

root scale: D Major

D E Gb G A B Db 
</code></pre>

<p>Those enharmonic equivalents will sound the same, but those should technically be F♯ and C♯.</p>

<pre class="lang-none prettyprint-override"><code>Please enter your root note and scale: 
null blah

root scale: null blah
</code></pre>

<p>Making the user enter the magic word <code>"null"</code> as the root note to exit the program is weird.</p>

<h2>Suggested solution</h2>

<pre><code>#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;map&gt;
#include &lt;sstream&gt;
#include &lt;string&gt;
#include &lt;vector&gt;

const std::vector&lt;std::string&gt; chromatic = {
    "C", "Db", "D", "Eb", "E", "F", "Gb", "G", "Ab", "A", "Bb", "B"
};

const std::map&lt;const std::string, const std::vector&lt;int&gt;&gt; degrees = {
    {"Major",       { 0, 2, 4, 5, 7, 9, 11, 12 }},
    {"Minor",       { 0, 2, 3, 5, 7, 8, 10, 12 }},
    {"Harmonic",    { 0, 2, 3, 5, 7, 8, 11, 12 }},
    {"Melodic",     { 0, 2, 3, 5, 7, 9, 11, 12 }}
};

std::string scalenotes(const std::string&amp; rootnote, const std::string&amp; scale) {
    int root = std::distance(chromatic.begin(), std::find(chromatic.begin(), chromatic.end(), rootnote));
    if (root &gt;= chromatic.size()) {
        return "";
    }
    std::stringstream ss;
    for (int i : degrees.at(scale)) {
        ss &lt;&lt; chromatic[(root + i) % chromatic.size()] &lt;&lt; " ";
    }
    return ss.str();
}

std::stringstream ask(const std::string&amp; question) {
    std::string line;
    std::cout &lt;&lt; question;
    std::getline(std::cin, line);
    return std::stringstream(line);
}

int main()
{
    std::string rootnote, scale;
    while (ask("Please enter your root note and scale: ") &gt;&gt; rootnote &gt;&gt; scale) {
        std::cout &lt;&lt; "\nroot scale: " &lt;&lt; rootnote &lt;&lt; " " &lt;&lt; scale
                  &lt;&lt; ": " &lt;&lt; scalenotes(rootnote, scale) &lt;&lt; "\n\n";
    }
}
</code></pre>
    </div>