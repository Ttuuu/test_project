<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Problems</h2>

<p>The use of <code>_length</code> in your classes is problematic, because that value is shared between all instances of the same class, which means it will refere to the wrong value when you have multiple non-empty lists of the same type. One of the big problems with linked lists in general is the loss of this length information if you do not package the list (and thereby loss the value of having a linked list).</p>

<h2>Advise</h2>

<p>It is generally advised to mainly focus on the nodes when creating linked lists, as the main power of linked list comes from doing operations locally (around some node that you know of), instead of from a common interface (iterating through such a list would be expensive if we need to walk from the beginning each time we want to reference the next position).</p>

<p>There is also a point to be made about trying to implement some of pythons hooks for lists, which can make the rest of the implementation much easier to do.</p>

<h2>Implementation</h2>

<p>Here is how I would go about this, note that prepending is generally done by just calling <code>head = LinkedList(value, head)</code>:</p>

<pre><code>class LinkedList:
    link_symbol = ' -&gt; '

    def __init__(self, value, next=None):
        self.value = value
        self.next = next

    def as_generator(self, end=None):
        node = self
        yield node
        while node.next is not end and node.next is not None:
            node = node.next
            yield node

    def __iter__(self):
        return map(lambda node: node.value, self.as_generator())

    def __str__(self):
        return self.link_symbol.join(value for value in self)

    def delete_next(self):
        if self.next is not None:
            self.next = self.next.next

    def forward(self, steps):
        for node in self.as_generator():
            if steps == 0:
                return node
            steps -= 1

    def __getitem__(self, steps):
        return self.forward(steps).value

    def __reverse__(self):
        return self.__class__.from_iter(self, reversed=True)

    @classmethod
    def from_iter(cls, iter, start=None, reversed=True):
        result = start
        for value in iter:
            cls(value, result)
        if not reversed:
            result.reversed()
        return result

    def tail(self):
        for node in self.as_generator():
            pass
        return node

    def __len__(self):
        return sum(1 for __ in self)

    def append(self, value):
        self.tail().next = self.__class__(value)

    def find(self, value):
        for node in self.as_generator():
            if node.value = value:
                return node

class DoubleLinkedList(LinkedList):
    link_symbol = ' &lt;-&gt; '

    @property
    def next(self):
        return self.__next

    @next.setter
    def next(self, node):
        if node is not None:
            node.prev = self
        self.__next = node

    def __init__(self, value, next=None, prev=None, cyclic=True):
        super().__init__(value, next)
        self.prev = prev
        if cyclic and self.next is None and self.prev is None:
            self.next, prev = (self, self)

    def as_generator(self, end=None)
        if end is None:
           end = self
        super().as_generator(end=end)

    # extra stuff we can now do
    def backwards_generator(self, end=None):
        node = self
        yield node
        while node.prev is not end and node.prev is not None:
            node = node.prev
            yield node

    def backwards(self, steps):
        if steps &lt; 0: 
            return self.forward(-steps)
        for node in self.backwards_generator():
            if steps == 0:
                return node
            steps -= 1

    def head(self):
        for node in self.backwards_generator():
             pass
        return node

    def forward(self, steps)
        if steps &lt; 0:
            return self.backwards(-steps)
        return super().forward(steps)
</code></pre>

<p>Note how much easier it was to make <code>DoubleLinkedList</code> when most of the methods is expressed in terms of central functions instead of having each implementing their own specific version of a walk through the list.</p>
    </div>