<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>0. Little Typo</h1>

<p><code>thermometer</code> instead of <code>termometer</code>.</p>

<h1>1. Global Variables</h1>

<blockquote>
  <pre><code>let cel = "";
let fah = "";
</code></pre>
</blockquote>

<p>Variables inside a global scope can be changed from everywhere.</p>

<h2>1.1 Example</h2>

<p>Imagine <code>temperature.js</code> is your script with the global variables inside. Now someone adds a <code>table.js</code> to display tables on the html page.</p>

<pre class="lang-html prettyprint-override"><code>&lt;script src="temperature.js"&gt;&lt;/script&gt;
&lt;script src="table.js"&gt;&lt;/script&gt;
</code></pre>

<p>One line in <code>table.js</code> is <code>cel = "&lt;td&gt;...&lt;/td&gt;"</code>. The author of the code has accidentally a spelling mistake and writes <code>cel</code> instead of <code>cell</code> to indicate a table cell and breaks with this line your code in <code>temperature.js</code>.</p>

<h2>1.2 Quick fix</h2>

<pre><code>function Termometer(kelven) {
    this.kelven = kelven;
    this.cel;
    this.fah;

    /* ... */
}
</code></pre>

<p>With this fix we binde the variables to <code>Thermometer</code>. To access them you need to create an instance of <code>Thermometer</code>.</p>

<pre><code>const thermometer = new Thermometer(0)
console.log(thermometer.cel)
</code></pre>

<p>This means that inside <code>table.js</code> the author needs to write explicite <code>thermometer.cel = ...</code> to break your code.</p>

<h1>2. Intuitive API</h1>

<blockquote>
  <pre><code>const thermometer= new Thermometer(0)

thermometer.init()

console.log(thermometer.getCelsius())
console.log(thermometer.getFahrenheit())
</code></pre>
</blockquote>

<p>To call <code>thermometer.init()</code> feels so wrong and it is not intuitive.</p>

<h1>2.1 Quick fix</h1>

<p>When <code>new Thermometer(0)</code> gets called, in the background a new instance gets build by the javascript runtime and it initializes all variables inside the instance.</p>

<p>To avoid the <code>init</code> method we can store the calculation in variables:</p>

<pre><code>function Thermometer(kelven) {
    this.kelven = kelven;
    this.celsius = this.kelven - 273
    this.fahrenheit = Math.floor(this.celsius * (9 / 5) + 32)

    this.getCelsius = function() { return this.celsius }
    this.getFahrenheit = function() { return this.fahrenheit }
}
</code></pre>

<p>The code snipped above looks more intuitive with ES6-Classes:</p>

<pre><code>class Thermometer {
    constructor(kelven) {
        this.kelven = kelven
        this.celsius = this.kelven - 273
        this.fahrenheit = Math.floor(this.celsius * (9 / 5) + 32)
    }

    getCelsius() { return this.celsius }
    getFahrenheit() { return this.fahrenheit }
}
</code></pre>

<p>Now, we can can interact with it like:</p>

<pre><code>const thermometer = new Thermometer(0)

console.log(thermometer.getCelsius())
console.log(thermometer.getFahrenheit())
</code></pre>

<h1>3. Unflexible</h1>

<blockquote>
  <pre><code>function Thermometer(kel) {
   this.kel = kel

   this.getCelsius = function () {
       cel = this.kel - 273;
       return cel;
   }

   /* ... */
}
</code></pre>
</blockquote>

<p>Currently the Thermometer only works for <code>kelvin</code>..</p>

<p>It would be great to archive that we can pass in <code>celcius</code> and it still works!</p>

<h2>3.1 Common Interface</h2>

<p>That this works all Units needs to share a common api that gets called by <code>Thermometer</code>. The <code>Thermometer</code> could call methods or properties like <code>inCelcius</code>, <code>inFahrenheit</code> and <code>inKelvin</code>.</p>

<pre><code>function Thermometer(temperature) {
    this.getCelsius = function () { return temperature.inCelsius }
    this.getFahrenheit = function () { return temperature.inFahrenheit }
    this.getKelvin = function () { return temperature.inKelvin }
}
</code></pre>

<p>Based on that we can create our units:</p>

<pre><code>function Kelvin(value) {
    this.inKelvin = value
    this.inCelsius = value - 273
    this.inFahrenheit = Math.floor(this.inCelsius * (9 / 5) + 32)
}

function Fahrenheit(value) {
    this.inKelvin = Math.floor((value + 459) * (9 / 5))
    this.inCelsius = Math.floor((value - 32) / (9 / 5))
    this.inFahrenheit = value
}

function Celsius(value) {
    this.inKelvin = value + 273
    this.inCelsius = value
    this.inFahrenheit = Math.floor(value * (9 / 5) + 32)
}
</code></pre>

<p>Now the <code>Thermometer</code> works for all units:</p>

<pre><code>const kelvinMeter = new Thermometer(new Kelvin(0))
const fahrenMeter = new Thermometer(new Fahrenheit(0))
const celsiMeter = new Thermometer(new Celsius(0))
</code></pre>

<h1>4. Unexpected Behavior</h1>

<blockquote>
  <pre><code>this.getEur = function() {
   eur = Math.floor(this.sum1 / 4.72);
}
</code></pre>
</blockquote>

<p>When I would call <code>valuta.getEur()</code> I would expect that the method <code>getEur</code> returns a value. Instead it returns <code>undefined</code> and changes a global variable.</p>

<pre><code>const valuta = new Valuta(1, 2, 3)
const euro = valuta.getEur() // undefined
</code></pre>
    </div>