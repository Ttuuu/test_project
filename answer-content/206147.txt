<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Design considerations</h3>

<ul>
<li>The main purpose of a heap is to provide quick access to the top-most item, so I'd expect to see some kind of <code>Peek</code> and <code>Pop</code> methods, allowing for usage like <code>while (heap.Count &gt; 0) { DoWork(heap.Pop()); }</code>. Surprisingly, such methods are absent.</li>
<li>While a heap is some kind of collection, and implementing <code>IEnumerable&lt;T&gt;</code> does let you use Linq and other enumerable-consuming methods, that's not really using a heap for what it does best. If you do need to enumerate it, then perhaps you're better off using a different data-structure in the first place?</li>
<li>Instead of relying on inheritance and requiring <code>T</code> to implement <code>IComparable</code> (or <code>IComparable&lt;T&gt;</code>), consider letting the user pass in a <code>Func&lt;T, T, int&gt;</code> or an <code>IComparer&lt;T&gt;</code>. This should be more flexible, allowing for usage like <code>new Heap&lt;PaymentRequest&gt;((a, b) =&gt; a.DueDate.CompareTo(b.DueDate));</code>, where <code>PaymentRequest</code> either doesn't implement <code>IComparable</code>, or does but in an unsuitable way (such as comparing payment amounts rather than due-dates). Also, instead of creating a separate class you now only need to create a separate method (or lambda).</li>
</ul>

<h3>Bugs</h3>

<ul>
<li>The <code>Heap(IEnumerable&lt;T&gt; sequence)</code> constructor fails to initialize <code>innerT</code> when the given sequence is empty. This breaks enumeration.</li>
<li>The <code>Heap(int capacity)</code> constructor allows a capacity of 0, but it'll cause <code>Add</code> to fail with an <code>IndexOutOfRange</code>. Use <code>&gt;=</code> instead of <code>==</code> when comparing count and capacity.</li>
<li><code>IEnumerator&lt;T&gt; GetEnumerator</code> fails with an <code>InvalidCastException</code>. You can fix this by casting <code>innerT</code> to <code>IEnumerable&lt;T&gt;</code>, to ensure that <code>IEnumerable&lt;T&gt;.GetEnumerator</code> is called instead of <code>IEnumerable.GetEnumerator</code>. But see the next point:</li>
<li><code>GetEnumerator</code> and <code>CopyTo</code> do not take into account that <code>Count</code> can be smaller than <code>capacity</code>, resulting in additional 'empty' values being enumerated or copied.</li>
<li><code>CopyTo</code> is not implemented correctly: the <code>index</code> parameter in <code>Array.CopyTo</code> is a destination index, not a source index. This means that the <code>arrayIndex &gt;= Count</code> check makes no sense: it should be <code>arrayIndex + Count &gt; array.Length</code>.</li>
</ul>

<h3>Other notes</h3>

<ul>
<li>When dealing with multiple constructors, try designating one as the 'main' constructor and let the others call it. In this case, <code>Heap(int capacity)</code> would be a good choice: <code>Heap() : this(1)</code>, <code>Heap(IEnumerable&lt;T&gt; sequence) : this(1)</code>.</li>
<li>The current implementation of <code>GetEnumerator</code> doesn't take situations into account where the heap is modified while being enumerated. I'm not sure whether it's worth preventing that, but it's something to be aware of.</li>
<li><code>FindInternal</code>:

<ul>
<li>can be optimized by first checking the result of <code>FindInternal(item, rightChild)</code>. If that's a match then there's no need to search throught the left subtree.</li>
<li>is only used by <code>Find</code>, so it could be made an inner method.</li>
<li>its readability can be improved by adding a bit of whitespace between the first early-out check and the rest of the method. Also, personally I tend to omit braces for if-statements that only have a single break/continue/return/throw statement. I'm aware of the risks but I don't think it's worth the additional clutter in these particular cases.</li>
</ul></li>
<li><code>DownHeap</code> performs an unnecessary swap when <code>largestIndex == currentIndex</code>.</li>
<li>Instead of just adding each item, there's apparently a more efficient algorithm (Floyd's) for building heaps from a given sequence.</li>
<li><code>Resize</code>:

<ul>
<li>would be more accurately named as <code>ResizeToNextLevel</code>.</li>
<li>can be made more reusable by adding an <code>int newCapacity</code> parameter, allowing you to reuse it in both the constructors and the <code>Clear</code> method.</li>
<li>is a little bit inconsistent in that it uses bitwise-operators, while all other utility methods use arithmetic operators.</li>
</ul></li>
<li><code>capacity</code> is always equal to <code>innerT.Length</code>, so I would make it a property instead: <code>private int capacity =&gt; innerT.Length;</code>.</li>
<li>To me, <code>CloserToRoot(a.CompareTo(b))</code> isn't easily comprehensible. If it returns true, does that mean that <code>a</code> should be higher-up the tree than <code>b</code>, or the other way around? </li>
<li>Similarly, <code>UpHeap</code> and <code>DownHeap</code> are, at least to me, not immediately descriptive names. Adding an <code>int addedIndex</code> parameter to <code>UpHeap</code> and renaming the <code>startingIndex</code> parameter in <code>DownHeap</code> to <code>removedIndex</code> should help to make their purpose a little more obvious. Some documentation wouldn't be a bad thing either.</li>
<li>Some index variables are clearly named as such (<code>startingIndex</code>, <code>currentIndex</code>, and so on) but others are not (<code>leftChild</code>, <code>rightChild</code>, <code>currentNode</code>, <code>parentNode</code> and so on). Personally I would use the <code>index</code> suffix everywhere, but whatever you choose, try to be consistent.</li>
<li>Public, private and static methods are somewhat mixed. Try grouping related methods together.</li>
</ul>
    </div>