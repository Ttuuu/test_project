<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Integer division (and that includes the modulo <code>%</code> instruction) is a pretty expensive operation, several times slower than any other arithmetic operation, and you are having to do many of those. It would be nice if you could you a more sieve-like approach, where modulo operations are replaced by stepped iteration.</p>

<p>Of course the issue with a sieve is that you do not know how far out you need to go to find the 10001st prime. So what we need is a sieve-like procedure that allows us to extend an existing prime list. If you are familiar with the <a href="https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes" rel="nofollow">sieve of Erathostenes</a>, the following code should not be too hard to understand:</p>

<pre><code>def extend_primes(n, prime_list):
    if not prime_list:
        prime_list.append(2)
    first_in_sieve = prime_list[-1] + 1
    sieve = [True] * (n - first_in_sieve + 1)

    # Sieve all multiples of the known primes
    for prime in prime_list:
        start = prime * prime
        if start &lt; first_in_sieve:
            # Rounded up integer division * prime
            start = ((first_in_sieve - 1) // prime + 1) * prime
        if start &gt; n:
            break
        start -= first_in_sieve
        for idx in range(start, len(sieve), prime):
            print idx + first_in_sieve
            sieve[idx] = False

    # Sieve all multiples of the primes in the sieve
    for prime, is_prime in enumerate(sieve):
        if not is_prime:
            continue
        prime += first_in_sieve
        start = prime * prime
        if start &gt; n:
            break
        start -= first_in_sieve
        for idx in range(start, len(sieve), prime):
            print idx + first_in_sieve
            sieve[idx] = False

    # Extend prime_lsit with new primes
    prime_list.extend(p + first_in_sieve
                      for p, is_p in enumerate(sieve) if is_p)
</code></pre>

<p>Now that you have a way of extending a prime list, you just need to extend it until it has sufficient items in it. A not too sophisticated way of going about it could be:</p>

<pre><code>def find_nth_prime(n):
    prime_list = [2]
    limit = n
    while len(prime_list) &lt; n:
        extend_primes(limit, prime_list)
        limit *= 2
    return prime_list[n - 1]
</code></pre>

<p>This produces the correct result in a fraction of a second.</p>

<p>Alternatively, you could use the fact that <a href="https://en.wikipedia.org/wiki/Prime-counting_function" rel="nofollow">the prime counting function is bounded from above by the logarithmic integral</a>, and do normal sieving up to that value. But that would take some of the algorithmic fun away from this problem.</p>
    </div>