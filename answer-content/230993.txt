<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here's some suggestions:</p>

<h1>Header</h1>

<ul>
<li><p><code>#include &lt;ostream&gt;</code> incurs a lot of overhead.  You do not need the whole <code>std::ostream</code> in the header.  <code>#include &lt;iosfwd&gt;</code> is enough.</p></li>
<li><p>It's <code>std::size_t</code>, not <code>size_t</code>.  Also, you forgot to <code>#include &lt;cstddef&gt;</code>.</p></li>
<li><p><code>asCString</code> fails to propagate <code>const</code>.</p></li>
<li><p>Not being implicitly convertible to <code>const char*</code> is one of the basic benefits of proper containers over raw arrays.  Use a named function like <code>c_str</code> instead.</p></li>
<li><p>Consistently use <code>std::size_t</code> for indexes.  Right now, you are mixing it with <code>int</code> and <code>unsigned int</code>.</p></li>
<li><p><code>operator==</code> and <code>operator+</code> should be non-members.</p></li>
<li><p><code>operator&lt;&lt;</code> does not need to be a friend; just declare it as a free function.</p></li>
<li><p>Do not add top-level <code>const</code> to function parameters.</p></li>
<li><p>The copy and move assignment operators should be merged into one; see below.</p></li>
</ul>

<h1>Implementation</h1>

<ul>
<li><p>Sort the <code>#include</code>s.</p></li>
<li><p>The constructors are written in a very convoluted way.  Use in-class member initializers to make sure you don't accidentally leave the members uninitialized:</p>

<pre><code>class String {
    // ...
    std::size_t m_length{};
    char* m_string{};
};
</code></pre>

<p>And simplify the constructors:</p>

<pre><code>String::String()
    : m_length{0}, m_string{new char[1]{}}
{
}

String::String(char c)
    : m_length{1}, m_string{new char[2]{c}}
{
}

String::String(const String&amp; other)
    : m_length{other.m_length}, m_string{new char[m_length + 1]}
{
    std::copy_n(other.m_string, m_length, m_string);
    m_string[m_length] = '\0';
}
</code></pre></li>
<li><p>Use <a href="https://stackoverflow.com/q/3279543">copy-and-swap</a>:</p>

<pre><code>String::String(String&amp;&amp; other) noexcept
    : String{}
{
    swap(*this, other);
}

// take by value
String&amp; operator=(String other) noexcept
{
    swap(*this, other);
    return *this;
}

// in the class body
friend void swap(String&amp; lhs, String&amp; rhs) noexcept
{
    using std::swap;
    swap(lhs.m_length, rhs.m_length);
    swap(lhs.m_string, rhs.m_string);
}
</code></pre></li>
<li><p>The destructor should not set the pointer to null after <code>delete</code>ing it.</p></li>
<li><p>Currently, there are two "empty" states: <code>m_length = 0, m_string = 0</code> and <code>m_length = 1, m_string = new char[1]{}</code>.  The first is the <em>moved-from state</em>, whereas the second is the <em>empty string</em>.  Moved-from objects are placed in a "valid but otherwise unspecified state," so the only operations they should support are destruction and assignment.  Therefore:</p>

<ul>
<li><p>If you want to support <code>String{nullptr}</code>, then it should be an empty string.  Otherwise, just require a non-null pointer:</p>

<pre><code>String::String(const char* str)
    : m_length{std::strlen(str)} // note: 'std::strlen' not 'strlen'
    , m_string{new char[m_length]}
{
    std::copy_n(str, m_length + 1, m_string); // use 'std::copy_n'; also copy the '\0'
}
</code></pre></li>
<li><p>If I understand correctly, <code>reset</code> means <code>clear</code>.  Then, it should result in an empty string.</p></li>
<li><p>Don't check for <code>if (!_other.m_string)</code>.</p></li>
</ul></li>
<li><p><code>strcmp</code> is not efficient when you know the length of both strings.  Use <code>std::equal</code> instead:</p>

<pre><code>// non-member operator==, requires appropriate declaration
bool operator==(const String&amp; lhs, const String&amp; rhs) noexcept
{
    // see below for begin and end
    return std::equal(lhs.begin(), lhs.end(), rhs.begin(), rhs.end());
}

bool operator!=(const String&amp; lhs, const String&amp; rhs) noexcept
{
    return !(lhs == rhs);
}
</code></pre></li>
<li><p>The way <code>operator+=</code> handles self assignment is wrong â€” <code>str += str</code> is obviously not a no-op.  In fact, this is one of the rare cases where I would suggest that <code>operator+=</code> delegate to <code>operator+</code>:</p>

<pre><code>// friend operator+, requires appropriate declaration
friend String operator+(const String&amp; lhs, const String&amp; rhs)
{
    String result;
    result.m_length = lhs.m_length + rhs.m_length;
    result.m_string = new char[result.m_length + 1];

    auto p = std::copy_n(lhs.m_string, lhs.m_length, result.m_length);
    std::copy_n(rhs.m_string, rhs.m_length + 1, p); // copy the '\0'

    return result;
}

String&amp; String::operator+=(const String&amp; other)
{
    *this = *this + other;
    return *this;
}
</code></pre></li>
</ul>


    </div>