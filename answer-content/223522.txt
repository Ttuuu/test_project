<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It looks like you might need some more testing.  The function <code>isForestInNormalForm</code> is wrong, since it thinks the following forest is in normal form:</p>

<pre><code>badfr1 = [Node "x" [Node "y" [], Node "y" []], Node "z" []]
</code></pre>

<p>and the function <code>toForestNormalForm</code> is wrong since if you apply it to:</p>

<pre><code>badfr2 = [Node "x" [Node "y" [], Node "y" []], Node "x" [], Node "z" []]
</code></pre>

<p>you get a normalized forest with no <code>"y"</code> nodes.</p>

<p>In general, a recursive function on a list structure that handles the singleton case specially:</p>

<pre><code>foo [] = ...
foo [x] = ...
foo (x:xs) = ...
</code></pre>

<p>increases the change of making an error.  In both of these broken functions, you are mishandling <code>x</code> in the <code>(x:xs)</code> case (forgetting to recurse in <code>isForestInFormalForm</code>, and forgetting it entirely in the <code>else</code> branch of your <code>toForestNormalForm</code>).</p>

<p>For <code>isForestInNormalForm</code>, you should be able to drop the singleton case entirely and move its check into the general recursive case:</p>

<pre><code>isForestInNormalForm :: Eq a =&gt; Forest a -&gt; Bool
isForestInNormalForm [] = True
isForestInNormalForm (Node x f : ndxs) =
    let (dups,others) = partition  (\(Node w _) -&gt; w == x) ndxs
    in case dups of
      [] -&gt; isForestInNormalForm f &amp;&amp; isForestInNormalForm others
      _   -&gt; False
</code></pre>

<p>However, <code>partition</code> isn't really necessary here.  You just want to know if there are any duplicates.  If there aren't then <code>ndxs</code> and <code>others</code> are equal anyway, so you don't need <code>partition</code> to create <code>others</code>.  This gives an even clearer version:</p>

<pre><code>isForestInNormalForm :: Eq a =&gt; Forest a -&gt; Bool
isForestInNormalForm [] = True
isForestInNormalForm (Node x f : ndxs) =
  if any (\(Node w _) -&gt; w == x) ndxs
  then False
  else isForestInNormalForm f &amp;&amp; isForestInNormalForm ndxs
</code></pre>

<p>or simplified to:</p>

<pre><code>isForestInNormalForm :: Eq a =&gt; Forest a -&gt; Bool
isForestInNormalForm [] = True
isForestInNormalForm (Node x f : ndxs) =
  all (\(Node w _) -&gt; w /= x) ndxs &amp;&amp; isForestInNormalForm f &amp;&amp; isForestInNormalForm ndxs
</code></pre>

<p>But I favor writing a version that more directly implements the definition:  a forest is in normal form if there are no duplicates in its top-most labels and all of the subtrees is in normal form.  (At least, I <em>think</em> that's the definition you intend.)  You can do this by first checking for duplicates and then recursively making sure the subtrees are in normal form:</p>

<pre><code>isForestInNormalForm' :: Eq a =&gt; Forest a -&gt; Bool
isForestInNormalForm' ts
  = noDuplicates (map rootLabel ts) &amp;&amp; all isTreeInNormalForm ts
</code></pre>

<p>You can write a <code>noDuplicates</code> that requires only <code>Eq</code> using <code>nub</code>:</p>

<pre><code>noDuplicates :: Eq a =&gt; [a] -&gt; Bool
noDuplicates xs = nub xs == xs
</code></pre>
    </div>