<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>using Task = System.Threading.Tasks.Task;
using Thread = System.Threading.Thread;
using Barrier = System.Threading.Barrier;
using Monitor = System.Threading.Monitor;
using IDisposable = System.IDisposable;
</code></pre>

<p>You don't need to write all those <code>using</code>s one class at a time. In C#, the common approach is to add a <code>using</code> once for each namespace you need. This is considered a bad practice in C++ (maybe that's why you did it this way?), but that's only because in C++, namespaces are not structured properly (almost everything is directly in <code>std</code>) and because the naming conventions there (<code>list</code>, not <code>List</code>) make collisions more likely.</p>

<pre><code>using TaskEnum = System.Collections.Generic.IEnumerable&lt;System.Threading.Tasks.Task&gt;;
using TaskQueue = System.Collections.Generic.Queue&lt;System.Threading.Tasks.Task&gt;;
</code></pre>

<p>This is also not necessary, just add the necessary namespace usings, and the write <code>IEnumerable&lt;Task&gt;</code> or <code>Queue&lt;Task&gt;</code>, that's not that long.</p>

<hr>

<pre><code>namespace _Imported_Extensions_
</code></pre>

<p><code>_Imported_Extensions_</code> is a weird name for a namespace. Why all the underscores? And the convention is to use PascalCase (e.g. <code>ImportedExtensions</code>) for namespaces too.</p>

<p>And what does the name even mean? Why is it important to stress out that those extensions were imported? And from where?</p>

<p>Also, it's not common to have multiple namespaces in the same file. If the class is used only in this file, put it in the same namespace as everything else in that file.</p>

<hr>

<pre><code>public static bool Any(this TaskEnum te)
public static TaskEnum ToList(this TaskEnum te)
</code></pre>

<p>Both of the extension methods are completely unnecessary. If you just added <code>using System.Linq;</code>, both would work by themselves.</p>

<hr>

<pre><code>if (myThread == null)
    myThread = StartThread(threadName);
</code></pre>

<p>This is not thread-safe. If two threads call this method at the same time, <code>StartThread()</code> will be called twice and two threads will be created.</p>

<p>Also, why is the thread started here and not in the constructor?</p>

<hr>

<pre><code>if (!myThread.IsAlive)
</code></pre>

<p>I don't think this is the right check here. Checking <code>quit</code> would be better, because that means enqueuing stops working as soon as the scheduler is disposed.</p>

<hr>

<p>I don't like that your fields are in the middle of the class. If you put them at (or near) the top, they will be easier to find.</p>

<hr>

<p>I think the way you're using <code>Barrier</code> is clumsy. If you want a notification that the worker thread is ready, use something like <code>ManualResetEvent</code>.</p>

<p>Also, you seem to be trying to protect against <code>Barrier</code> being <code>null</code>, but that can never happen here. So doing that just makes your code longer and more confusing.</p>

<p>Even better option would be to use a queue that already supports blocking when no items are available: <a href="http://msdn.microsoft.com/en-us/library/dd267312"><code>BlockingCollection</code></a>.</p>

<hr>

<blockquote>
  <p>Is it safe to use <code>Pulse</code> rather than <code>PulseAll</code> in this case?</p>
</blockquote>

<p>Yes, it is, since you're always going to have only one thread waiting.</p>

<hr>

<p>Also, if I wanted something like this, I would either use <a href="http://msdn.microsoft.com/en-us/library/system.threading.tasks.concurrentexclusiveschedulerpair.exclusivescheduler"><code>ConcurrentExclusiveSchedulerPair.ExclusiveScheduler</code></a>, if the tasks didn't have to execute on the same thread, just being mutually exclusive.</p>

<p>Or <a href="http://blogs.msdn.com/b/pfxteam/archive/2010/04/09/9990424.aspx">some scheduler from ParallelExtensionsExtras</a>, if a single thread was a requirement.</p>
    </div>