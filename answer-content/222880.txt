<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Dealing with Console and User Input</h2>

<p>You have lots of verbose, repeating code requesting user input.</p>

<blockquote>
<pre><code>while (true)
{
    Console.Write("Would you like to play again?(y or n) ");
    answer = Console.ReadLine();
    if (!answer.ToLower().Equals("y") &amp;&amp; !answer.ToLower().Equals("n"))
    {
        Console.WriteLine("Please enter a valid answer.");
        Console.WriteLine("");
        continue;
    }
    else
        break;
}
</code></pre>
</blockquote>

<p>Wouldn't you rather write something like ..</p>

<pre><code>if (PlayAgain())
{
   // perform logic ..
} 
else {
   // perform logic ..
}
</code></pre>

<p>You should seperate user input logic from the game and use a simple pattern for requesting user input.</p>

<p>Show a <code>message</code> to the user, with a list of <code>options</code> appended. The user output is tested against the options, unless no options are specified. Two functions <code>projection</code> and <code>layout</code> are provided to map the user output from <code>string</code> to <code>T</code> and vice versa.</p>

<h1>Pattern used for requesting user input</h1>

<pre><code>static T ReadInput&lt;T&gt;(
    string message, 
    Func&lt;string, T&gt; projection,
    Func&lt;T, string&gt; layout,
    params T[] options)
{
    var correctInput = false;
    var input = default(T);
    var formattedMessage = options == null || options.Length == 0
        ? message : $"{message} [{string.Join(", ", options.Select(layout))}]";

    Console.WriteLine();
    Console.WriteLine(formattedMessage);

    do
    {
        Console.Write("&gt;");
        Console.ForegroundColor = ConsoleColor.White;
        var inputToken = Console.ReadLine();
        var error = false;
        Console.ForegroundColor = ConsoleColor.Gray;

        try
        {
            input = projection(inputToken);
        }
        catch
        {
            error = true;
        }

        correctInput = !error &amp;&amp; (
               options == null 
            || options.Length == 0
            || options.Any(o =&gt; o.Equals(input))
        );

        if (!correctInput)
        {
            Console.WriteLine("Please try again.");
        }

    } while (!correctInput);

    return input;
}
</code></pre>

<h1>Operations requesting for user input</h1>

<pre><code>public static bool PlayAgain()
{
    return ReadInput(
        "Would you like to play again?", 
         x =&gt; {
             switch (x.Trim().ToLowerInvariant())
             {
                 case "y":
                     return true;
                 case "n":
                     return false;
                 default:
                     throw new FormatException();
             }
         },
         x =&gt; x ? "y" : "n",
         true, false);
}

public enum CashOption
{
    Default,
    Custom
}

public static CashOption PickCashOption()
{
    return ReadInput(
        "Would you like to leave the cash default or set your own?",
         x =&gt; (CashOption)Enum.Parse(typeof(CashOption), x.Trim(), true),
         x =&gt; x.ToString(),
         Enum.GetValues(typeof(CashOption)).Cast&lt;CashOption&gt;().ToArray());
}

public static long PickAmount()
{
    return ReadInput(
        "Please enter your custom amount:",
         x =&gt; long.Parse(x),
         x =&gt; x.ToString());
}

public static int PickDiceRolls()
{
    return ReadInput(
        "How many dice would you like to roll?",
         x =&gt; int.Parse(x),
         x =&gt; x.ToString(),
         5, 10, 15, 20);
}
</code></pre>

<h1>Usage in your game</h1>

<pre><code>var cashOption = PickCashOption();
if (cashOption = CashOption.Default)
{
  // perform logic ..
}
</code></pre>

<p>Display</p>

<pre><code>Would you like to leave the cash default or set your own? [Default, Custom]
&gt;
</code></pre>
    </div>