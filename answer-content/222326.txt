<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First of all you should definitely clean up your code. There are a lot of unused variables and duplicate code, likely caused by copy and paste.
Since you did not provide test data, there is no chance to tell how much time would be gained simply by removing [R[M]]SE computation from the functions.</p>

<p>Apart from that, its likely that the different <code>func</code>s are the main reason for the bad performance. In your current implementation your basically throwing everything away that allows NumPy to be fast: the ability to perform loops in C instead of in Python. For a more detailed introduction to this topic I would highly recommend to watch <a href="https://www.youtube.com/watch?v=EEUXKG97YRw" rel="nofollow noreferrer"><em>Losing your Loops Fast Numerical Computing with NumPy</em></a> and <a href="https://www.youtube.com/watch?v=zQeYx87mfyw" rel="nofollow noreferrer"><em>Performance Python: Seven Strategies for Optimizing Your Numerical Code</em></a> by Jake VanderPlas. There is also an online version of the <a href="https://jakevdp.github.io/PythonDataScienceHandbook/index.html" rel="nofollow noreferrer"><em>Python Data Science Handbook</em></a> also by Jake VanderPlas.</p>

<p>So how you could <code>func</code> (I chose the first one) be rewritten to allow NumPy to play out its strenghts? (Note: this code is untested since you did not provide test data)</p>

<pre class="lang-py prettyprint-override"><code>def func(x_vals, break1, break2, slope1, offset1, slope_mid, offset_mid, slope2, offset2):
    """Regression fit function"""
    y = np.zeros_like(x_vals)
    mask = x_vals &lt; break1
    y[mask] = slope1 * x_vals[mask] + offset1
    mask = np.logical_and(x_vals &gt;= break1, x_vals &lt; break2)
    y[mask] = slope_mid * x_vals[mask] + offset_mid
    mask = x_vals &gt;= break2
    y[mask] = slope2 * x_vals[mask] + offset2
    return y
</code></pre>

<p>This implementation uses <a href="https://jakevdp.github.io/PythonDataScienceHandbook/02.06-boolean-arrays-and-masks.html" rel="nofollow noreferrer">masks</a> to compute the piecewise function for a whole range of values instead of value by value.</p>

<hr>

<p>Apart from that you should clearly structure your code in a more consistent way so that it gets easier to read. Maybe the official <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">Style Guide for Python Code</a> (often abbreviated as PEP8) can lead you in the right direction.</p>
    </div>