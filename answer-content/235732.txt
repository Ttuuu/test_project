<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Anko commons</h1>

<p>I think Anko is dead, however, their library is still pretty useful.<br>
I would recommend commons, such that you can rewrite the activity-starting</p>

<pre><code>zoowall_opinions.setOnClickListener {
    val intent = Intent(this, OpinionsActivity::class.java)
    intent.putExtra("ZOO_UID", zooUID)
    startActivity(intent)
}
</code></pre>

<p>with Anko-commons will become:</p>

<pre><code>zoowall_opinions.setOnClickListener {
    startActivity&lt;OpinionsActivity&gt;("ZOO_UID", zooUID)
}
</code></pre>

<h1>rating</h1>

<p>You should extract setting the buttons in another function:</p>

<pre><code>fun setRating(customView : View, ratingNr: Int){
    val views = listOf(
        customView.alert_rating1_img,
        customView.alert_rating2_img,
        customView.alert_rating3_img,
        customView.alert_rating4_img,
        customView.alert_rating5_img
    )

    //takes ratingNr buttons and turns them on.
    views.take(rating).forEach{ 
          it.setImageResource(android.R.drawable.btn_star_big_on)
    }
    //drops ratingNr buttons and turns the rest of
    views.drop(rating).forEach{
          it.setImageResource(android.R.drawable.btn_star_big_off)
    }
}
</code></pre>

<p>BTW, It's called a RatingBar.<br>
You can find multiple libraries on GitHub and you can find the build-in one <a href="https://developer.android.com/reference/kotlin/android/widget/RatingBar.html" rel="nofollow noreferrer">RatingBar</a>.</p>

<h1>fetchRating</h1>

<p>Kotlin has <a href="https://kotlinlang.org/docs/reference/operator-overloading.html" rel="nofollow noreferrer">operator overloadingin</a>. This means that <code>rating.div(counter)</code> can be rewritten as <code>rating/counter</code>.<br>
Next, if you devide, only one side has to be an double in order to get a double as result. therefor, counter can be an int.</p>

<h3>takeIf</h3>

<p>Kotlin has a function named takeIf. It will return the receiver if the value is met and otherwise, it will return null.</p>

<pre><code>if (opinions.toString() != "null" &amp;&amp; opinions.toString() != "[]") {
    opinions.forEach { opinion -&gt;
        counter++
        rating += opinion.get("rating").toString().toInt()
    }
}
</code></pre>

<p>can therefor be rewritten as</p>

<pre><code>opionions
     .takeIf{it.toString() != "null" &amp;&amp; it.toString() != "[]" }
     ?.forEach{...}
</code></pre>

<p>or using <a href="https://www.baeldung.com/kotlin-string-template#string-templates" rel="nofollow noreferrer">string interprolation</a></p>

<pre><code>opionions
     .takeIf{"$it" != "null" &amp;&amp; "$it" != "[]" }
     ?.forEach{...}
</code></pre>

<p>Next, you want to change the opions to a list of Int:</p>

<pre><code>val intOpinions = opinions.map{ it.get("rating").toString().toInt() }
</code></pre>

<p>Now you can simply calculate the average, using <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/average.html" rel="nofollow noreferrer">average</a> and the size using size.</p>

<p>Average is a double and if you RatingBar, you need to have an Int to call our function. Therefor use <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.math/round-to-int.html" rel="nofollow noreferrer">roundToInt</a>.</p>

<h1>checkIfVisited</h1>

<pre><code>visitedZoos.forEach { zoo -&gt;
    if (zoo == UID) {
        zoowall_add.text = "Usuń z odwiedzonych"
        flag = true
    }
}
</code></pre>

<p>can be rewritten using <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/any.html" rel="nofollow noreferrer">any</a>:</p>

<pre><code>val isVisited = visited.any { zoo == UID }
if(isVisited) {
    zoowall_add.text = "Usuń z odwiedzonych"
    flag = true
}
</code></pre>

<h1>coroutines:</h1>

<p>using <a href="https://github.com/Kotlin/kotlinx.coroutines/tree/master/integration/kotlinx-coroutines-play-services" rel="nofollow noreferrer">kotlinx-coroutines-play-services</a>, you can replace </p>

<pre><code>ref.get()
    .addOnsucceccListener{ value -&gt; println(value) }
    .addOnFailureListener{ println("failure") }
</code></pre>

<p>with</p>

<pre><code>try {
    val value = ref.get().await()
    println(value)
} catch(e : Exception) {
    println("failure")
}
</code></pre>

<p>To call coroutine-functions, you have to be in a coroutine-context.<br>
If you want to learn more about coroutine, follow <a href="https://codelabs.developers.google.com/codelabs/kotlin-coroutines/#0" rel="nofollow noreferrer">Google's Codelab</a>.<br>
I think (don't know for sure), that they are also explained in the course In the comments of your question.
<a href="https://github.com/Kotlin/anko/wiki/Anko-Layouts" rel="nofollow noreferrer">Anko-layouts</a> gives you easy access to coroutine-contexts.</p>

<h1>Architecture</h1>

<p>I will hint very slightly to the architecture.</p>

<p>Everything should do one thing and one thing only.  </p>

<ul>
<li>Your activity should therefor (almost) only deal with how the screen looks.  </li>
<li>Your firebase-calls should in their callbacks only format the data and give data back.</li>
<li>There should be one or more classes that deal with the logic:

<ul>
<li>What should happens if a button is clicked.</li>
<li>What data does the view need</li>
<li>How to change the data in the format that the view can use</li>
</ul></li>
</ul>

<p>The reason why I push you towards this architecture is that if you learn and stick to a good architecture, it will push you towards classes and functions that do one thing and one thing well. Therefor, your classes and functions will become a lot smaller and also more reuseable. Therefor your code will become better. Almost all you have to do for that is stick to the architecture.</p>

<h1>note</h1>

<p>I didn't look into firebase functions like <a href="https://firebase.google.com/docs/firestore/query-data/queries" rel="nofollow noreferrer">queries</a>.</p>
    </div>