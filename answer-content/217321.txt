<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Shape</h2>

<blockquote>
<pre><code>    [Serializable()]
</code></pre>
</blockquote>

<p>The <code>()</code> is unnecessary and it's usual to omit it for readability.</p>

<hr>

<blockquote>
<pre><code>    public class Shape : ICloneable
</code></pre>
</blockquote>

<p><code>ICloneable</code> is from the very early days of C# before they added generics (for which read "<em>a half-decent type system</em>"). I would strongly recommend never using it in new code. Make your own</p>

<pre><code>public interface ICloneable&lt;T&gt;
{
    T Clone();
}
</code></pre>

<p>so that you can avoid all the casts. Or just add the <code>Clone</code> method without a marker interface.</p>

<hr>

<blockquote>
<pre><code>        public int Height { get; set; }
        public int Width { get; set; } // I will use Width to test by column later
        public int[] Changes { get; set; } // How many flips 
        public long Id { get; set; }
        public int RowPosition { get; set; } // In what Row Im using the piece
        public int MaxRow { get; set; } // What is the last row where can fit 
</code></pre>
</blockquote>

<p>Why are these all settable? As far as I can see, <code>RowPosition</code> is the only one that is set anywhere outside the constructor, so I think that they should either have <code>private set;</code> or (if you're using a recent enough version of C#) use the <code>public int Height { get; } = height</code> syntax.</p>

<p>Why is <code>Changes</code> an <code>int[]</code>? That allows callers to modify it. I think that <code>IReadOnlyList&lt;int&gt;</code> would probably convey the intent more clearly.</p>

<p>I said that <code>RowPosition</code> is the only one of these that is set anywhere outside the constructor. In fact, it's only ever set immediately after cloning. I suggest replacing <code>Clone()</code> with a copy constructor. (This may force using <code>private set</code> or a backing <code>readonly</code> field: I don't think it plays well with <code>{ get; } =</code>).</p>

<p>Alternatively, go for a purer object model: the <code>RowPosition</code> is not strictly a property of the shape. You could factor it out and work with some kind of tuple <code>(Shape, Location)</code> or <code>Dictionary&lt;Shape, Location&gt;</code>.</p>

<p><code>Changes</code> and <code>Id</code> could use documentation on their interpretation. If I've understood correctly, both are bitmasks: state that clearly. It might be a good idea to make the constructor validate that <code>Id</code> is a single bit:</p>

<pre><code>if (id == 0 || (id &amp; (id - 1)) != 0) throw new ArgumentOutOfRangeException(nameof(id));
</code></pre>

<hr>

<blockquote>
<pre><code>        public Shape(double id, int[] piece, int height)
</code></pre>
</blockquote>

<p><code>id</code> should be a <code>long</code>, not a <code>double</code>.</p>

<hr>

<h2>Solution</h2>

<p>Some previous comments apply.</p>

<hr>

<blockquote>
<pre><code>        public long Id { get; set; }
</code></pre>
</blockquote>

<p>I think this is a mask indicating which pieces are present. The name should reflect that.</p>

<hr>

<blockquote>
<pre><code>        public object DeepClone()
        {
            using (MemoryStream memory_stream = new MemoryStream())
            {
                // Serialize the object into the memory stream.
                BinaryFormatter formatter = new BinaryFormatter();
                formatter.Serialize(memory_stream, this);

                // Rewind the stream and use it to create a new object.
                memory_stream.Position = 0;
                return (Solution)formatter.Deserialize(memory_stream);
            }
        }
</code></pre>
</blockquote>

<p>This is quite clever and robust to changes, but also slow. Given that time is your biggest enemy, I think it might be better to use a more brittle but faster approach.</p>

<hr>

<blockquote>
<pre><code>            if ((Changes[row] - Game[row]) % 3 == 0)
            {
                return true;
            }
            else
            {
                return false;
            }
</code></pre>
</blockquote>

<p>This is more readable as</p>

<pre><code>        return (Changes[row] - Game[row]) % 3 == 0;
</code></pre>

<p>Also, this method calculates <code>Changes</code> to then ignore all but <code>Changes[row]</code>. That's an easy place to optimise.</p>

<hr>

<blockquote>
<pre><code>        public bool ExistPiece(long id)
        {
            return Pieces.Any(x =&gt; x.Id == id);
        }
</code></pre>
</blockquote>

<p>I think this should be called <code>ContainsPiece</code>, and I also think that it could be optimised to <code>return (this.Id &amp; id) != 0;</code>, assuming that I've correctly understood the invariants about <code>Solution.Id</code>.</p>

<hr>

<h2>Recursive</h2>

<blockquote>
<pre><code>                new Shape(Math.Pow( 2, 0 ), new int[5] { 2, 1, 2, 0, 0 }, 3),
</code></pre>
</blockquote>

<p>(and lots of similar lines). Firstly, don't use <code>Math.Pow</code> unless you're dealing with <code>double</code>s. For bitmasks <code>&lt;&lt;</code> and <code>&gt;&gt;</code> should be enough. Secondly, why the trailing zeroes and a separate argument to say how long it is? This looks to me like it should be</p>

<pre><code>                new Shape(1L &lt;&lt; 0, new int[] { 2, 1, 2 }),
</code></pre>

<hr>

<blockquote>
<pre><code>            // try to solve first row
</code></pre>
</blockquote>

<p>Is there any reason why this can't be done with a line or two of setup and a call to <code>Solve_Row(solution, 0)</code>?</p>

<hr>

<blockquote>
<pre><code>        public bool Solve_Row(Solution solution, int rowToSolve)
        {
            ...

            for (long pieceSet = 0; pieceSet &lt; Math.Pow(2, 18); pieceSet++)
            {          
                if ((pieceSet &amp; solution.Id) == 0)
                {
                    ...
                }
            }
            return false;
        }
</code></pre>
</blockquote>

<p>This is extremely inefficient. I suggest that you first create a method <code>public static IEnumerable&lt;IEnumerable&lt;T&gt;&gt; Subsets&lt;T&gt;(IEnumerable&lt;T&gt; elements)</code> which uses a technique like this to generate all subsets of its argument. (Use <code>yield return</code> to keep the memory usage low). Then you can make this loop iterate only over subsets of the pieces which aren't already included. It probably still won't be fast enough, but it will at least be much faster.</p>

<hr>

<blockquote>
<pre><code>                    foreach (Shape piece in Pieces.Where(x =&gt; (x.Id &amp; pieceSet) &gt; 0)
                                                  .ToList())
</code></pre>
</blockquote>

<p>I suggest you factor out a method <code>IEnumerable&lt;Shape&gt; PiecesForMask(int pieceSet)</code>. Then it can be faster by using a <code>Dictionary&lt;long, Shape&gt;</code> to map IDs to shapes and using the standard trick that <code>x &amp; -x</code> is the lowest set bit of <code>x</code> to run in time proportional to the number of pieces in <code>pieceSet</code> rather than iterating through all of them.</p>

<hr>

<blockquote>
<pre><code>                    if (newSolution.Id == Pieces.Sum(x =&gt; x.Id))
</code></pre>
</blockquote>

<p>This is another easy optimisation: calculate the target mask once and store it. (Or calculate it on the fly as <code>(1L &lt;&lt; Pieces.Count) - 1</code>).</p>

<hr>

<p>One big thing that's missing is comments. A simple explanation of what the code is trying to do (which I think is to find a mapping which places every piece in one row such that the sums all add up to desired values modulo 3) would go a long way, along with clear identification of which <code>int</code>s represent counts and which represent bitmasks.</p>

<hr>

<p>Finally, the big question: the algorithm. I suspect that the test applied (<code>(Changes[row] - Game[row]) % 3 == 0</code>) is actually overly optimistic. Probably you also need <code>Changes[row] &gt;= Game[row]</code>. If so, I would look at reformulating the problem as a set multicover and solving it with a variant of <a href="https://en.wikipedia.org/wiki/Dancing_Links" rel="noreferrer">Knuth's Algorithm X</a>. Probably you should first try to understand the basic algorithm for set cover and the formulation of simple puzzles as set cover. Then look at expanding to multicover. The idea would be that a cell which needs to be covered <span class="math-container">\$a + 3k\$</span> times (for any <span class="math-container">\$k \ge 0\$</span>) would become an element which needs to be covered <span class="math-container">\$a + 3K\$</span> for a suitably large <span class="math-container">\$K\$</span> (maybe iterative deepening would be a sensible approach; alternatively, making <span class="math-container">\$K\$</span> the number of shapes is definitely sufficiently conservative); also, each shape needs to be covered once (it must be used in exactly one place). The placement of a shape in a position is a row which can be used in the cover: it covers the shape and the board elements (with multiplicity). Then there are some utility rows which cover one element 3 times and take up the slack. If you don't actually need to use all the shapes (I think you have to take them in order when playing, but can you stop early?) then that could be handled with rows which just cover the last <span class="math-container">\$i\$</span> shapes and no board elements.</p>

<p>Looking at Knuth's <a href="https://www-cs-faculty.stanford.edu/~knuth/programs.html" rel="noreferrer">downloadable programs</a> starting with DLX I see there are some new variants since I last read the draft of <a href="https://www-cs-faculty.stanford.edu/~knuth/fasc5c.ps.gz" rel="noreferrer">fascicle 4C of the Art of Computer Programming</a>. I strongly recommend you download that and dedicate a good 10 hours to reading and understanding it: it's a very good technique for many kinds of puzzle.</p>
    </div>