<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>Is there a better way to take a matrix as input?</p>
</blockquote>

<p>Well, if by "better" you mean fewer lines of code, then I have the solution for you!</p>

<h1>The Solution</h1>

<pre><code>(lambda N: [[int(x) for x in input().split()[:N]] for _ in range(N)])(int(input("Enter N: ")))
</code></pre>

<p>This one-liner is almost reminiscent of a Code Golf contest entry, or one of JavaScript's <a href="https://developer.mozilla.org/en-US/docs/Glossary/IIFE" rel="nofollow noreferrer">immediately invoked function expressions</a>.</p>

<h1>The Explanation</h1>

<p>It's pretty hard to understand what all is going on in that one line, so let's dissect it piece-by-piece.</p>

<p>First, we'll note the general structure is <code>(lambda expression)(argument)</code>, so that means we are defining an anonymous function and immediately calling it. The argument is the easier part, so let's start there.</p>

<h2>What is the argument?</h2>

<p>The argument is simply the size <em>N</em> of the matrix, where we convert the user input (prompted by <code>"Enter N: "</code>) to an integer.</p>

<h2>What is the <code>lambda</code> expression?</h2>

<p>If you're not already familiar with Python's <a href="https://docs.python.org/3/tutorial/controlflow.html#lambda-expressions" rel="nofollow noreferrer">lambda expressions</a>, these are how you can create anonymous functions that take in certain parameters and return a value. In this case, we are taking in the parameter <code>N</code> and returning a 2D list (our matrix) formed via a "<a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a>."</p>

<p>If you don't know list comprehensions, what they do is construct lists of the form <code>[a for b in c]</code>. That is equivalent to the following:</p>

<pre><code>L = []
for b in c:
    L.append(a)
return L
</code></pre>

<p>Another note to make is that when <code>_</code> is used as the loop variable, that just means we don't intend to use it later on. In this case, the row number is unimportant.</p>

<p>Finally, when we say <code>[int(x) for x in input().split()[:N]]</code>, this means we split the input row into integers and take only the first <em>N</em> elements, which (for better or worse) means that we can ignore any extra input on each line beyond the <em>N</em> integers we seek.</p>

<h1>Conclusion</h1>

<p>All things considered, this is probably not the way to do things. For evidence, consult <a href="https://www.python.org/dev/peps/pep-0020/" rel="nofollow noreferrer">The Zen of Python</a>. This particular code is fairly ugly, complicated, nested, dense, and unreadable, even though it is short. However, I thought it was worth mentioning because it is a good demonstration of how short a useful Python script can be (and of lambda expressions and list comprehensions, for those who have not yet been introduced).</p>
    </div>