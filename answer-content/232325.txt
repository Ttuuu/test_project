<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">


<h2>There's plenty to optimize here!</h2>

<p>In NASM you get the address simply by writing <code>mov di, prompt</code>. This has a shorter encoding than <code>lea di, [prompt]</code>. (In MASM this would be <code>mov  di, offset prompt</code> giving the same benefit over the <code>lea</code> form).</p>

<p>Instead of writing the pair <code>mov ah, 0x4c</code> <code>mov al, 0</code>, you could combine these in 1 instruction as <code>mov ax, 0x4C00</code>. This shaves off 1 byte from the program.</p>

<p>Your <em>getchar</em> returns a <strong>byte</strong> in <code>AX</code> and your <em>putchar</em> expects a <strong>byte</strong> in <code>DX</code>. You would be better off if you used <code>AL</code> and <code>DL</code>. This would avoid those several <code>mov ah, 0</code> and <code>mov dh, 0</code> instructions.</p>

<p>Your <em>putchar</em> code uses the BIOS.Teletype function 0x0E. This function does not expect anything in the <code>CX</code> register. What it does require is that you specify the displaypage in the <code>BH</code> register. Simply add <code>mov bh, 0</code> here. And if it's even possible that your program has to run on the graphical video mode then it would make sense to write <code>mov bx, 0x0007</code> because then the color for the character is taken from the <code>BL</code> register.</p>

<p>I see that the <em>getstring</em> code also checks for the linefeed code 10. No one does that. If the user presses the <kbd>Enter</kbd> key, you'll receive the carriage return code 13 and that's the only code that you need to check. The linefeed code only comes into play when outputting.</p>

<p>The pair of instructions <code>mov [di], al</code> <code>inc di</code> (3 bytes) can be replaced by the 1-byte instruction <code>stosb</code>. Given that your program is in the .COM file format we have <code>DS</code>=<code>ES</code> and the direction flag is almost certainly going to be clear. Ideal for using the string primitive assembly instructions. This also means that your <em>putstring</em> routine could use <code>lodsb</code> if you're willing to trade in <code>DI</code> for <code>SI</code> as the input parameter.</p>

<p>An interesting optimization comes from eliminating a <em>tail call</em>. You wrote <code>call putchar</code> directly followed by <code>ret</code>. This is equivalent to writing <code>jmp putchar</code>. Both shorter and faster this way!</p>

<h2>Make it better</h2>

<ul>
<li><p>Your <em>getstring</em> procedure must not allow the user to input more than 19 characters. Anything more would overflow the 20-byte buffer.</p></li>
<li><p>Your <em>getstring</em> procedure should store (in the buffer) a terminating zero when the finishing <kbd>Enter</kbd> key arrives. This way the buffer can be used repeatedly and not just this one time.</p></li>
<li><p>In assembly we want to avoid all kinds of jumping because those are more time consuming than many other instructions.<br>
Your <em>putstring</em> code uses a <code>je</code> and a <code>jmp</code> instruction on each iteration of the loop. The code below only uses the <code>jne</code> instruction on each iteration.</p>

<pre class="lang-none prettyprint-override"><code>; IN (di)
putstring:
    jmp     .first
.continue:
    call    putchar
    inc     di           ; move to the next character
.first:
    mov     al, [di]     ; grab the next character of the string
    cmp     al, 0
    jne     .continue
    ret

; IN (al)
putchar:
    mov     ah, 0x0E     ; BIOS.Teletype
    mov     bx, 0x0007
    int     0x10
    ret
</code></pre>

<p>Using <code>DX</code> as the input for <em>putchar</em> is a poor choice, not only because <code>DL</code> would be enough, but especially because you need the character in <code>AL</code> anyway. So why not move it there in the first place?</p></li>
</ul>

<h2>Be consistent</h2>

<p>Always write your numbers the same way. You wrote <code>mov ah, 0x4c</code> and also <code>mov ah, 0x0E</code>.<br>
I suggest you use capitals for the hexadecimal digits and always write as many digits as will fit in the destination. So don't write stuff like <code>mov ah, 0xE</code>.<br>
In case you're wondering why I make this suggestion. Using uppercase hexadecimal digits enhances the contrast with the lowercase <code>0x</code> prefix or lowercase <code>h</code> suffix. Readability is very important in a program.</p>

<pre class="lang-none prettyprint-override"><code>mov ah, 0x4C
mov ah, 0x0E
</code></pre>

<p>or</p>

<pre class="lang-none prettyprint-override"><code>mov ah, 4Ch
mov ah, 0Eh
</code></pre>

<p>For many programmers function numbers are easiest recognized when expressed in hexadecimal.
You could thus write <code>mov ah, 0x00</code> <code>int 0x16</code> in your <em>getchar</em> routine.</p>

<hr>

<p>As a final note, your labels are well chosen and the comments that you've added are all to the point. Congrats...</p>
    </div>