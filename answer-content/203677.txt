<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think the first loop is somewhat redundant, because if <code>read &lt; startSequenceBuffer.Length</code> after the first pass, the input <code>memoryStream</code> is shorter than the <code>startSequenceBuffer</code> and then there are no messages to follow anyway. Instead of the first loop you can do:</p>

<pre><code>       int read = memoryStream.Read(startSequenceBuffer, 0, startSequenceBuffer.Length);

        if (!Helpers.ByteArrayCompare(startSequenceBuffer, frameStartSequenceBuffer))
            throw new InvalidDataException();
</code></pre>

<p>If the first loop is meant as a search for the start sequence, you'll have to find another stop condition, because it will stop after the first pass, unless the stream is shorter then <code>startSequenceBuffer</code>.</p>

<hr>

<blockquote>
  <p><code>while (memoryStream.Capacity &gt; read) {...}</code></p>
</blockquote>

<p>Be aware that <code>MemoryStream.Capacity &gt;= MemoryStream.Length</code>, so the second loop can unintentionally try to read beyond <code>memoryStream.Length</code> which will cause an infinite loop because trying to read from a position greater than <code>Length</code> will add nothing to <code>read</code>. Use <code>memoryStream.Length</code> instead.</p>

<hr>

<p>The meat of the second loop is a little confusing without any data to test on. At first sight it seems to work though. It seems odd that <code>frameChecksumBuffer</code> is written to more than once, because you only use it in one test at the end of the method, but maybe I just misunderstand the name or the format of the stream?</p>
    </div>