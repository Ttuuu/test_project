<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A couple of things that came to me after playing around with this (given one is willing to use the new features of javascript):</p>

<ul>
<li>Making a class for IBAN (ES2015)</li>
<li>One could get more fine-grained info using the new named groups on RegExps (ES2018)</li>
</ul>

<p>As an example of the latter:</p>

<pre><code>IBAN.formats = {
  AD: /^(?&lt;bank&gt;\d{4})(?&lt;branch&gt;\d{4})(?&lt;account&gt;\w{12})$/
, AE: /^(?&lt;bank&gt;\d{3})(?&lt;account&gt;\d{16})$/
, AL: /^(?&lt;bank&gt;\d{3})(?&lt;branch&gt;\d{4})(?&lt;check&gt;\d{1})(?&lt;account&gt;\w{16})$/
  // ...
}
</code></pre>

<p>(as you can see from the last entry, there can be further BBAN check digits)</p>

<p>then one could just count the lengths from those:</p>

<pre><code>IBAN.lengths = Object.entries(IBAN.formats).reduce((acc, [country, re]) =&gt; {
  acc[country] = re.source.match(/\d+/g).reduce((total, digit) =&gt;
    total + (digit === "0" ? 1 : Number(digit))
  , 0)
  return acc
}, {})
</code></pre>

<p>to test for the length for example in the constructor:</p>

<pre><code>constructor(str) {
  this.normalized = str.toUpperCase().replace(/[^A-Z0-9]/g, "")
  this.country = this.normalized.slice(0, 2)
  this.checksum = this.normalized.slice(2, 4)
  this.bban = this.normalized.slice(4)

  if(this.bban.length !== IBAN.lengths[this.country])
    throw new Error(`Invalid length for ${this.country} BBAN:
      expected ${IBAN.lengths[this.country]}, got ${this.bban.length}.`)
  // ...
}
</code></pre>

<p>And to map the named group matches to properties (in the constructor, but note that would need more sanity checks):</p>

<pre><code>Object.assign(this, this.bban.match(IBAN.formats[this.country]).groups)
</code></pre>

<p>Sidenote: I came up with another way to do the piecewise mod97 (inside the class):</p>

<pre><code>static mod97(acc, digit, index) {
  return index == 9 || (index &gt; 9 &amp;&amp; index % 7 == 0) ?
    (Number(acc + digit) % 97).toString() :
    acc + digit
}
</code></pre>

<p>so that one could use it to reduce the string (e.g. inside the constructor)</p>

<pre><code>const intStr = (this.bban + this.country + this.checksum)
  .replace(/[A-Z]/g, c =&gt; parseInt(c, 36))
this.valid = Number(Array.prototype.reduce.call(intStr, IBAN.mod97)) % 97 == 1
</code></pre>

<p>but granted, it's doing the modulo checks so often it hurts the performance compared to the for-loop in Flambino's answer.</p>
    </div>