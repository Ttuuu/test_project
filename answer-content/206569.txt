<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Disclaimer</h1>

<p>It isn't clear to me what part you want reviews to focus on.  I'm not a C++ on Windows person so I can't say much about that part of things.  Your C++ is nicely formatted.  The <code>main()</code> function could be broken down more, but it is commented well enough that it wouldn't be a burden to maintain in the current state.</p>

<h1>Perl</h1>

<p>Perl - even on Windows - is something I can talk about...... and your Perl is in good shape too.</p>

<ul>
<li>Absolutely have <code>strict</code> and <code>warning</code> pragmas, all the time, every day, for 99% of Perl, yes yes.</li>
<li>Good formatting.</li>
<li>Idiomatic use of <code>die X unless Y</code>.  Your <code>die</code> messages are excellent as well.</li>
<li>Variables are localized! (There's nothing worse than 50k lines of perl and no localization)</li>
<li>Variables and subroutines are named in ways that are easy to follow.  Thanks.</li>
<li>I like using scalars for filehandles also.  I believe this is a Perl Best Practice now.</li>
</ul>

<p>But - like everything - it could be better:</p>

<ul>
<li>It is funny to me that you commented the C++ and not the Perl at all.  Part of me takes this as a compliment to Perl's natural readability, but it still seems like you could comment a bit and not distract from the code.</li>
<li>The primary instance where missing comments slowed me down in reading this was in the variables.  Your variables names are fine, but having a comment that uses slightly different words can help avoid ambiguities and confusion.</li>
<li>The next instance of where a comment would be great is explaining the "hanging" <code>__DATA__</code> section.  This looks really out of place, but your explanation above the code was perfect.  Why not paste that into the code above the "hanging" <code>__DATA__</code> section?</li>
</ul>

<p>Beyond commentary on comments:</p>

<ul>
<li>The way you slurp data in from the <code>DATA</code> filehandle definitely works I would encapsulate it into a <code>sub</code> or use <code>File::Slurp</code> itself.  Hiding the implementation would make it slightly easier to follow the code.</li>
<li><code>my $out = q[];</code> isn't idiomatic Perl.  I would recommend <code>my $out = '';</code> which uses two single quotes instead of <code>q[]</code>.</li>
<li>Your <code>defined_and_nonempty</code> is pretty similar to what Perl would give you for <code>scalar($x)</code>.  Do you care if <code>$x == 0</code> that it evaluates false?  Again the use of <code>q[]</code> feels a bit odd.</li>
</ul>
    </div>