<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Firstly, this code has a couple of dozen PEP8 formatting violations. Following conventions generally helps readability.</p>

<p>Also on the subject of readability, comments providing references for the formulae used should be considered essential in mathematical software.</p>

<hr>

<blockquote>
<pre><code>def agm(a, b):      #Arithmetic Geometric Mean
</code></pre>
</blockquote>

<p>The conventional way of documenting a function is with a docstring. That also allows you to document the expected input types (<code>decimal.Decimal</code>? <code>float</code>?).</p>

<hr>

<blockquote>
<pre><code>def pi_agm():       #Pi via AGM and lemniscate
    print('Computing Pi...')
    a, b, t, p, pi, k = 1, D(2).sqrt()/2, 1/D(2), 2, 0, 0
    while 1:
        an    = (a+b)/2
        b     = (a*b).sqrt()
        t    -= p*(a-an)**2
        a, p  = an, 2**(k+2)
        piold = pi
        pi    = ((a+b)**2)/(2*t)
        k    += 1
        if pi == piold:
            break
    return pi
</code></pre>
</blockquote>

<p>The <code>while</code> loop is unnecessarily ugly: <code>while True</code> would be preferable. I would say that it would be even better to use the loop index as a loop index with <code>for k in itertools.count()</code>, but actually that variable is wholly unnecessary.</p>

<p>If find it unhelpful to initialise six variables in one line where some of them are quite complicated. On the other hand, it could be more helpful to combine some of the updates in the loop body. Perhaps the happy medium is something like</p>

<pre><code>    a, b, t = 1, D(0.5).sqrt(), 1
    p, pi = 1, 0
    while True:
        a, b, t = (a+b)/2, (a*b).sqrt(), t - p*(a-b)**2
        p, piold, pi = 2*p, pi, (a+b)**2 / t
</code></pre>

<p>I'm not entirely convinced by</p>

<blockquote>
<pre><code>        if pi == piold:
            break
</code></pre>
</blockquote>

<p>Sometimes iterative approaches in finite data types oscillate around the solution rather than converging definitively. It might be more robust to track the last two or three values and, on finding a loop, return the average of the values in the loop.</p>

<hr>

<blockquote>
<pre><code>def factorial(x ,pfact, pfactprd):       
    x = int(x)
</code></pre>
</blockquote>

<p>Do you expect to pass a non-<code>int</code>? See previous note about using docstrings to document types.</p>

<blockquote>
<pre><code>    if pfact == (x-1):
        return pfactprd*x
    else:
        factorial = D(1)
        for i in range(1, x+1):
            factorial *= i
        return factorial
</code></pre>
</blockquote>

<p>Is the <code>else</code> ever actually used? Might it be more maintainable to remove this function entirely?</p>

<hr>

<blockquote>
<pre><code>    def lntwosum(n, d, b):
        logsum, logold, e = D(0), D(0), 0
        while 1:
            logold = logsum
            logsum += D(1/((D(b**e))*((2*e)+1)))
            e += 1
            if logsum == logold:
                return (D(n)/D(d))*logsum
</code></pre>
</blockquote>

<p>Here the previous comment about <code>itertools.count</code> is relevant.</p>

<p>I'm confused as to why <code>D</code> is invoked where it is. Without any comments to justify it, it appears to be done at random.</p>

<hr>

<blockquote>
<pre><code>def lnagm(x):   #Natural log of via AGM,
    try:
        if int(x) == 1:
            return 0
        if int(x) == 2:
            return lntwo()
    except:
        pass
</code></pre>
</blockquote>

<p>??? Are you expecting <code>int(x)</code> to throw an exception?</p>

<hr>

<blockquote>
<pre><code>    pi = D(pi_agm())
</code></pre>
</blockquote>

<p>See previous comments about appearing to use <code>D</code> at random. Here, if <code>pi_agm()</code> returns a <code>decimal.Decimal</code> then it's unnecessary, and if it doesn't then surely that would be a bug because <code>pi</code> won't have the necessary precision? I don't see any further polishing of its error.</p>

<hr>

<blockquote>
<pre><code>    decimal.getcontext().prec = m
    ...
    logr = D(str(result)[:m//2])
    decimal.getcontext().prec = prec
    return logr
</code></pre>
</blockquote>

<p>Would the following work?</p>

<pre><code>    decimal.getcontext().prec = m
    ...
    decimal.getcontext().prec = prec
    return D(result)
</code></pre>

<hr>

<blockquote>
<pre><code>    k = D(prec//2)
    ...
    upper = int((12*k)+2)
</code></pre>
</blockquote>

<p>Why not just <code>upper = 6*prec + 2</code> with no need to coerce?</p>

<hr>

<p>Other earlier comments also apply to <code>gamma</code>.</p>

<hr>

<blockquote>
<pre><code>#Calling Gamma
prec = int(input('Precision for Gamma: '))*8
decimal.getcontext().prec = prec
gam = gamma()
print('\n')
print(gam)
</code></pre>
</blockquote>

<p>It's a Python best practice, which serves to make the file reusable as a library, to guard this with <code>if __name__ == "__main__":</code>.</p>

<p>A comment explaining the <code>*8</code> would be useful. At a guess, <code>prec</code> is in bits?</p>
    </div>