<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Take a cleaner approach if you can</h3>

<p>The current approach is basically a dirty hack to work around Maven's inability to do incremental builds.
I recommend to start looking into another more modern build system that is able to re-build just what needs to be rebuilt.
Such as Gradle.</p>

<h3>Always double-quote variables in arguments</h3>

<p>As a rule of thumb, always put double-quotes around variables used as arguments. For example in all these places, there should be double-quotes around the variables:</p>

<blockquote>
<pre><code>read -a GIT_DIFF_OUTPUT_ARY &lt;&lt;&lt; $GIT_DIFF_OUTPUT
...

GIT_DIFF_OUTPUT="$(git diff --name-status HEAD@{1} ${CURRENT_BRANCH})"
...

IFS='/' read -ra SPLIT &lt;&lt;&lt; $i
...

GIT_DIFF_OUTPUT_ARY_ROOT_PATH+=($path)
...

for val in ${GIT_DIFF_OUTPUT_ARY_ROOT_PATH[@]}
...

cd $val
...
</code></pre>
</blockquote>

<h3>Avoid performance pitfalls</h3>

<p>For each path in the diff,
the script builds the array <code>GIT_DIFF_OUTPUT_ARY_ROOT_PATH</code> with the first two path segments,
and keeps the elements unique by not adding a value if it's already in the array.
As the size of the array grows, this becomes increasingly inefficient,
as this is quadratic time complexity.</p>

<p>I believe the paths printed by <code>git diff</code> is sorted by default.
You can take advantage of that:
track the previous element,
and only add a new value when it's different from the previous.
You will achieve better performance and without using the <code>containsElement</code> function.</p>

<h3>Use the exit code directly in conditional expressions</h3>

<p>Instead of this:</p>

<blockquote>
<pre><code>containsElement "$path" "${GIT_DIFF_OUTPUT_ARY_ROOT_PATH[@]}"
if [[ $? != 0 ]]
then
    #Add the path since it was not found
    GIT_DIFF_OUTPUT_ARY_ROOT_PATH+=($path)
fi
</code></pre>
</blockquote>

<p>You could use the exit code of the function directly in a conditional:</p>

<pre><code>if ! containsElement "$path" "${GIT_DIFF_OUTPUT_ARY_ROOT_PATH[@]}"
then
    #Add the path since it was not found
    GIT_DIFF_OUTPUT_ARY_ROOT_PATH+=($path)
fi
</code></pre>

<h3>Get current Git branch name using native Git commands</h3>

<p>Instead of this:</p>

<pre><code>CURRENT_BRANCH="$(git branch | sed -n -e 's/^\* \(.*\)/\1/p')"
</code></pre>

<p>This is a better, native way:</p>

<pre><code>CURRENT_BRANCH="$(git rev-parse --abbrev-ref HEAD)"
</code></pre>

<h3>Use native Bash to get string length</h3>

<p>This line tries to check the length of a variable:</p>

<blockquote>
<pre><code>if [[ "$(echo -n $i | wc -m)" != 1 ]]
</code></pre>
</blockquote>

<p>Although <code>-m</code> is used, the possible values will not be multibyte,
so the solution is equivalent to using <code>-c</code>.
In this case, a better solution exists with native Bash:</p>

<pre><code>if [[ ${#i} != 1 ]]
</code></pre>

<h3>Use better variable names</h3>

<p><code>i</code> is good for simple counters. It's not a good name for anything else.</p>

<p>What is <code>FORWARD</code>? <code>path_separator</code> or <code>pathsep</code> would have been better.</p>
    </div>