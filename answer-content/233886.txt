<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>1) First I suggest that you extract the commons predicates into methods; theres lots of duplicated code.</p>

<pre class="lang-java prettyprint-override"><code>    //[...]
    final List&lt;Sku&gt; bestMatch = getSkuByWeight(skus.stream(), getSkuFilterPredicateByWeight(unit, quantity, 0));
    final List&lt;Sku&gt; secondBest = getSkuByWeight(skus.stream(), getSkuFilterPredicateByWeight(unit, quantity, -1));
    final List&lt;Sku&gt; thirdBest = getSkuByWeight(skus.stream(), getSkuFilterPredicateByWeight(unit, quantity, 1));
    final List&lt;Sku&gt; worstMatch = getSkuByWeight(skus.stream(), skuToProcess -&gt; !unit.equalsIgnoreCase(skuToProcess.getUnit()));
    //[...]

    private static &lt;T&gt; List&lt;Sku&gt; getSkuByWeight(Stream&lt;Sku&gt; stream, Predicate&lt;Sku&gt; predicate) {
        return stream.filter(predicate).sorted(Comparator.comparing(Sku::getPricePerWeight)).collect(Collectors.toList());
    }

    private static Predicate&lt;Sku&gt; getSkuFilterPredicateByWeight(String unit, double quantity, int toCompare) {
        return sku -&gt; unit.equalsIgnoreCase(sku.getUnit()) &amp;&amp; Double.compare(quantity, sku.getQuantity()) == toCompare;
    }
</code></pre>

<p>2) You can reuse the string <code>unit</code> in the creation of the Sku objects.</p>

<pre class="lang-java prettyprint-override"><code>    //[...]
    final Sku sku8 = new Sku("123456", 800, unit, 4);
    final Sku sku1 = new Sku("234567", 600, unit, 5);
    final Sku sku2 = new Sku("354635", 500, unit, 7);
    final Sku sku3 = new Sku("345666", 500, unit, 4);
    final Sku sku4 = new Sku("234545", 400, unit, 5);
</code></pre>
    </div>