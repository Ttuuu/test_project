<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Review</h1>

<ul>
<li><p>Testing</p>

<blockquote>
  <p>(I haven't rigorously tested it).</p>
</blockquote>

<p>Well you should write some test to ensure validity of the function. So even after changes you can be sure it will still work. <a href="https://docs.python.org/3/library/doctest.html" rel="noreferrer"><code>doctest</code></a> is a pretty nice module to use, and is a nice extension of your docstring</p></li>
<li><p>Naming</p>

<p>Variables should have descriptive names!</p>

<p><code>lst1</code>, <code>lst2</code> if it wasn't for that docstring I would not have known what is the subseq and the parent, so instead I propose to rename them to <code>needle</code> and <code>haystack</code> here the intent is more clear</p>

<p>Same goes for <code>d1</code>, <code>d2</code>... I can see that they are the remaining length of the list, but it is hard to tell from the variable name.</p></li>
<li><p><code>for</code> is considered more Pythonic vs <code>while</code></p>

<p>For loops are Pythons greatest feature IMHO, they are easy to read and short to write</p>

<p>You should start writing for loops instead of a while, "Loop like a native" might be an interesting talk to view</p></li>
<li><p>Too many assignments in a line</p>

<p>Might be preference, but I find this line hard to read:</p>

<p><code>i, j, d1, d2 = i+1, j+1, d1-1, d2-1</code> </p>

<p>There are too many values with not enough descriptive names on this line</p></li>
</ul>

<h1>Alternative</h1>

<p>We can instead loop over the <code>haystack</code> and use slicing to compare the sliced <code>haystack</code> with the <code>needle</code>, lastly top it off with the <code>any</code> keyword and write some tests with the doctest module</p>

<pre><code>import doctest

def is_subsequence(needle, haystack):
    """
    Finds if a list is a subsequence of another.

    * args
        needle: the candidate subsequence
        haystack: the parent list

    * returns
        boolean

    &gt;&gt;&gt; is_subsequence([1, 2, 3, 4], [1, 2, 3, 4, 5, 6])
    True
    &gt;&gt;&gt; is_subsequence([1, 2, 3, 4], [1, 2, 3, 5, 6])
    False
    &gt;&gt;&gt; is_subsequence([6], [1, 2, 3, 5, 6])
    True
    &gt;&gt;&gt; is_subsequence([5, 6], [1, 2, 3, 5, 6])
    True
    &gt;&gt;&gt; is_subsequence([[5, 6], 7], [1, 2, 3, [5, 6], 7])
    True
    &gt;&gt;&gt; is_subsequence([1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 3, [5, 6], 7])
    False
    """
    return any(
        haystack[i:i+len(needle)] == needle
        for i in range(len(haystack) - len(needle) + 1)
    )

if __name__ == '__main__':
    doctest.testmod()
</code></pre>
    </div>