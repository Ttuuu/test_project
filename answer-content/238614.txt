<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A more straight forward solution would be to count each character and then to count the characters that have a count larger than 1. This can easily be done using the functional methods available in Kotlin's standard library:</p>

<pre><code>fun duplicateCount(text: String): Int =
  text.toLowerCase()
    .groupingBy { it }.eachCount()
    .count { it.value &gt; 1 }
</code></pre>

<p><code>.groupingBy { it }.eachCount()</code> creates a map (<code>Map&lt;Char, Int&gt;</code>) that assigns each character in the string to its count.</p>

<p><code>.count { it.value &gt; 1 }</code> then counts all entries in the map where the count is more than one.</p>

<hr>

<p>EDIT: Inspired by @SimonForsberg here in comparision a procedural implementation of the same algorithm. I also modified the version above to use the better <code>count(predicate)</code> method, which I originally forgot about.</p>

<pre><code>fun duplicateCount(text: String): Int {
    val lcText = text.toLowerCase()
    val characterCount = mutableMapOf&lt;Char, Int&gt;()

    for (i in 0 until lcText.length) {
        val char = lcText[i]
        characterCount.put(char, 1 + characterCount.getOrDefault(char, 0))
    }

    var count = 0

    for (entry in characterCount) {
        if (entry.value &gt; 1) {
            count++
        }
    }

    return count
}
</code></pre>
    </div>