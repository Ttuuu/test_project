<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Okay, so sometimes posting a question is the best way to figure out an  answer yourself ðŸ™ƒ.</p>

<p>I was looking for an alternative to having the gradient colors evenly spaced (my hack was to repeat the colors e.g. "blue blue red blue blue") and found the <code>locations</code> property on <code>CAGradientLayer</code> which is also animatable. </p>

<p>Animating this property feels like a much better approach because with the position not changing I can remove the wrapper layer.</p>

<p>Then, with without the wrapper layer I realized that I could override <code>layerClass</code> so the buttons backing layer is a gradient layer, which will also resize as needed when the view frame changes so that I don't even need to override <code>layoutSubviews</code>. </p>

<p><s>The only thing that feels a little strange is the forced requirement for for gradient colors to have three colors (otherwise I'd need to figure some formula to derive values for <code>locations</code>).</s></p>

<p>Edit: I've updated answer so instead of directly setting the colors, I've exposed <code>gradientTint</code> and <code>gradientHighlight</code> properties that are used to set the gradients <code>colors</code> array.</p>

<p>I've created a protocol that captures the properties used to define the shimmer effect, and also provide a default implementation of the animation.</p>

<p>It wasn't a requirement from my original question, but moving this code out of a specific subclass makes this snippet of code reusable (and maintainable) across other subclasses (e.g. UIView, UILabel).</p>

<pre><code>protocol ShimmerEffect {
    var animationDuration: TimeInterval { set get }
    var animationDelay: TimeInterval {set get }

    var gradientTint: UIColor { set get }
    var gradientHighlight: UIColor { set get }

    //// Expects value between 0.0â€”1.0 that represents 
    //// the ratio of the gradient highlight to the full
    //// width of the gradient.
    var gradientHighlightRatio: Double { set get }

    //// The layer that the gradient will be applied to
    var gradientLayer: CAGradientLayer { get }
} 
</code></pre>

<p>Default implementation: </p>

<pre><code>extension ShimmerEffect {

    /// Configures, and adds the animation to the gradientLayer
    func addShimmerAnimation() {

        // `gradientHighlightRatio` represents how wide the highlight 
        // should be compared to the entire width of the gradient and
        // is used to calculate the positions of the 3 gradient colors.
        // If the highlight is 20% width of the gradient, then the
        // 'start locations' would be [-0.2, -0.1, 0.0] and the
        // 'end locations' would be [1.0, 1.1, 1.2]
        let startLocations = [NSNumber(value: -gradientHighlightRatio), NSNumber(value: -gradientHighlightRatio/2), 0.0]
        let endLocations = [1, NSNumber(value: 1+(gradientHighlightRatio/2)), NSNumber(value: 1+gradientHighlightRatio)]
        let gradientColors = [gradientTint.cgColor, gradientHighlight.cgColor, gradientTint.cgColor]

        // If the gradient highlight ratio is wide, then it can 
        // 'bleed' over into the visible space of the view, which 
        // looks particularly bad if there is a pause between the
        // animation repeating.
        // Shifting the start and end points of the gradient by the                  
        // size of the highlight prevents this.
        gradientLayer.startPoint = CGPoint(x: -gradientHighlightRatio, y: 0.5)
        gradientLayer.endPoint = CGPoint(x: 1+gradientHighlightRatio, y: 0.5)
        gradientLayer.locations = startLocations
        gradientLayer.colors = gradientColors

        let animationKeyPath = "locations"

        let shimmerAnimation = CABasicAnimation(keyPath: animationKeyPath)
        shimmerAnimation.fromValue = startLocations
        shimmerAnimation.toValue = endLocations
        shimmerAnimation.duration = animationDuration
        shimmerAnimation.timingFunction = CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseInEaseOut)

        let animationGroup = CAAnimationGroup()
        animationGroup.duration = animationDuration + animationDelay
        animationGroup.repeatCount = .infinity
        animationGroup.animations = [shimmerAnimation]

        // removes animation with same key (if exists) then adds 
        // the new animation
        gradientLayer.removeAnimation(forKey: animationKeyPath)
        gradientLayer.add(animationGroup, forKey: animationKeyPath)
    }
}
</code></pre>

<p>In the UIButton subclass I've added property observers to each of the properties that calls <code>addShimmerAnimation()</code> with any property change. </p>

<p>I also considered just supplying default values and requiring <code>addShimmerAnimation()</code> to be called manually once properties were configured. Another route was not having any public properties exposed and instead passing everything in through an initializer, but that would remove the possibility of these classes being used in a storyboard (which is an option I like to leave open) and having properties exposed through tagging  the properties with <code>IBInspectable</code>.</p>

<pre><code>class ShimmerButton: UIButton, ShimmerEffect {

    override static var layerClass: AnyClass {
        return CAGradientLayer.self
    }

    var gradientLayer: CAGradientLayer {
        return layer as! CAGradientLayer
    }

    var animationDuration: TimeInterval = 3 {
        didSet { addShimmerAnimation() }
    }
    var animationDelay: TimeInterval = 1.5 {
        didSet { addShimmerAnimation() }
    }

    var gradientHighlightRatio: Double = 0.3 {
        didSet { addShimmerAnimation() }
    }

    var gradientTint: UIColor = .black {
        didSet { addShimmerAnimation() }
    }

    var gradientHighlight: UIColor = .white {
        didSet { addShimmerAnimation() }
    }

    override init(frame: CGRect) {
        super.init(frame: frame)
        gradientLayer.mask = titleLabel?.layer
        addShimmerAnimation()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        gradientLayer.mask = titleLabel?.layer
        addShimmerAnimation()
    }
}
</code></pre>

<p>Example usage: </p>

<pre><code>let shimmer = ShimmerButton()
shimmer.setTitle("Find new skills", for: .normal)
shimmer.titleLabel?.font = UIFont.systemFont(ofSize: 24, weight: UIFontWeightHeavy)
shimmer.gradientTint = darkBlue
shimmer.gradientHighlight = lightBlue
shimmer.sizeToFit()
</code></pre>

<p>What I like about this approach is that the complexity is moved out of the subclass making it super easy to duplicate over other views.</p>

<p>What frustrates me is that <code>UIView</code>, <code>UILabel</code> and <code>UIButton</code> only have minor differences. I wish there was a way for the computed properties to be extracted into a common place.</p>

<p>Example of <code>ShimmerButton</code> and <code>ShimmerView</code> (a <code>UIView</code> subclass) being used together: </p>

<p><a href="https://i.stack.imgur.com/AnUvn.gif" rel="noreferrer"><img src="https://i.stack.imgur.com/AnUvn.gif" alt="enter image description here"></a></p>
    </div>