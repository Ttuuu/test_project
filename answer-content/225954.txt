<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Code Review</h3>

<p>Keeping your current structure, I would modify your solution like this:</p>

<pre><code>def checkio(originalList: list) -&gt; list:

    result_list = []

    for i, number in enumerate(originalList):
        if number in originalList[:i] or number in originalList[i + 1:]:
            result_list.append(number)

    return result_list

checkio([1, 2, 3, 1, 3])         # Returns [1, 3, 1, 3] 
checkio([1, 2, 3, 4, 5])         # Returns []
checkio([5, 5, 5, 5, 5])         # Returns [5, 5, 5, 5, 5]
checkio([10, 9, 10, 10, 9, 8])   # Returns [10, 9, 10, 10, 9]
</code></pre>

<p>The <code>if</code> condition now checks if the element in question appears anywhere else in the list. If so, the element is saved as it is non-unique. Compared to your solution, this function combines the <code>if</code> and <code>else</code> conditions into one check. It also removes <code>checked_list</code>.</p>

<p>To do this task in the most concise way, I would use list comprehension and the <code>Counter</code> subclass from the <code>collections</code> module, as shown below.</p>

<h3>Another Approach</h3>

<pre><code>from collections import Counter

def checkio(originalList: list) -&gt; list:
    counter = Counter(originalList)                       # Create "Counter" object
    return([x for x in originalList if counter[x] &gt; 1])   # Return only non-unique elements

checkio([1, 2, 3, 1, 3])         # Returns [1, 3, 1, 3] 
checkio([1, 2, 3, 4, 5])         # Returns []
checkio([5, 5, 5, 5, 5])         # Returns [5, 5, 5, 5, 5]
checkio([10, 9, 10, 10, 9, 8])   # Returns [10, 9, 10, 10, 9]
</code></pre>

<p><code>counter</code> counts the occurrences of each element in the list and returns a dictionary. Here's an example:</p>

<pre><code>Counter([10, 9, 10, 10, 9, 8])
# Counter({10: 3, 9: 2, 8: 1})
</code></pre>

<p>After creating this object, the function uses list comprehension and only adds elements that appear more than once, ie non-unique elements.</p>

<p>This answer is similar to snarp's. However, for large lists this version will be faster as the <code>Counter</code> object is computed only once (instead of calling <code>original_list.count(x)</code> for every element).</p>

<p>A bit more about the <code>collections</code> module: it has specialized data types with interesting advantages over standard Python objects such as <code>dict</code>, <code>list</code>, <code>set</code>, etc. <a href="https://docs.python.org/2/library/collections.html" rel="nofollow noreferrer">Here</a> is a link to the documentation.</p>
    </div>