<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Don't worry about performance.</h3>

<p>You're writing a handful of strings to the console, and it takes milliseconds. When you start writing tens of thousands of strings, and notice it taking seconds, then you can you start to look for optimizations. Until then, the cleanliness of your code is much more important.</p>

<hr>

<h3>Your function is too long.</h3>

<p>This is a fifty-line function. It has the responsibilities of iterating through two lists in parallel, skipping spaces, parsing color names, setting the console color, writing to console, and resetting the console color when it's all done. That's a lot! Break it up into smaller functions.</p>

<hr>

<h3>Switch statements are ugly.</h3>

<p>I don't mean that they are never appropriate, but <code>ConsoleColor</code> is an <code>enum</code>, and it's possible to parse enums (while ignoring case sensitivity). You should replace this switch statement with a function call.</p>

<hr>

<h3>Don't initialize variables until you need them.</h3>

<p>With few exceptions, modern languages are very good about optimizing variable allocation. Putting <code>char log = str[i]</code> inside the loop will not result in additional memory usage, and it will save me (a potential reviewer or maintenance programmer) from having to think about that character before or after the loop.</p>

<hr>

<h3>Other tips...</h3>

<p>You say this is practice for an interview, so it could be a good place for you to show off your knowledge of C#. With a little trouble, you could leverage Regular Expressions and LINQ to save you from manually manipulating array indexes. With a little more trouble, you could leverage IDisposable to ensure the original ForegroundColor is restored when all is said and done.</p>

<p>On the other hand, you could also shoot yourself in the foot attempting to do those things. If you don't honestly have in-depth knowledge about C#, it might be best just to aim for code that is as simple as possible. I think the best way to do that is to make small functions with clear names, to show you are thinking about the maintainability and reusability of your code.</p>
    </div>