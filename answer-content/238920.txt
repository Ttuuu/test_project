<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The code looks good.  It is probably a good idea to make the include guard macros agree with the file name (<code>_H</code> vs <code>.hpp</code>).</p>

<p>There is a simpler way to implement the strategy pattern â€” to store <code>std::function</code>s rather than smart pointers to base classes:</p>

<pre><code>struct Duck {
    using behavior_t = std::function&lt;void()&gt;;
    behavior_t fly;
    behavior_t quack;
    behavior_t display; // maybe const; but that disables moving
};
</code></pre>

<p>Now everything is much simpler:</p>

<pre><code>// for example
const auto plain_fly   = [] { std::cout &lt;&lt; "(flies)\n"; };
const auto plain_quack = [] { std::cout &lt;&lt; "(quacks)\n"; };

// can even determine operation dynamically
struct hello_display {
    std::string name;
    void operator()() const
    {
        std::cout &lt;&lt; "Hello, I am a " &lt;&lt; name &lt;&lt; "!\n";
    }
};

int main()
{
    Duck plain_duck{plain_fly, plain_quack, hello_display{"plain duck"}};
    plain_duck.fly();
    plain_duck.quack();
    plain_duck.display();
}
</code></pre>

<p>(<a href="https://wandbox.org/permlink/zitlvLiT0nu8SSNz" rel="nofollow noreferrer">live demo</a>)</p>

<blockquote>
  <p>I've used <code>make_unique</code>/<code>unique_ptr</code>, but I could also use <code>make_shared</code>/<code>shared_ptr</code>;</p>
</blockquote>

<p>If the resource is owned by only one smart pointer rather than shared by multiple smart pointers, then <code>unique_ptr</code> is a reasonable choice.</p>

<blockquote>
  <p>I've tried to always split a translation unit in header and implementation files;</p>
</blockquote>

<p>For simple operations, you can alternatively define the methods inline in the header file.</p>

<blockquote>
  <p>I've not defined a default constructor, but rather a two parameter
  constructor, as no duck should exist without the two behaviors;</p>
</blockquote>

<p>Consider checking for null pointers.</p>

<blockquote>
  <p>The methods <code>setFlyBehavior</code> and <code>setQuackBehavior</code> can change the
  objects' behavior at runtime, such that the only two things that
  cannot change are the type itself of the object, and those methods
  (such as display) which have not been factored out of the <code>Duck</code> class.</p>
</blockquote>

<p>This is fine if it fits the semantics of your program.  Note that you can also use the strategy pattern for immutable attributes by not providing the corresponding modifier method.</p>
    </div>