<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I don't program much in Java, but suspect it is suboptimal to be building the string in the loop one character at a time.</p>

<p>Also, calculating a "fresh" tail end position each time from base units may take cycles, rather than decrementing a reverse counter.  You then end up with an empty else{}, which should also help loop optimisation.</p>

<p>So something like, where j (as a variable that survives loop destruction) is overloaded to be the "tail test" position in the loop, and the number of matched characters as the loop exits:
[BTW, can't test this as no Java system to hand - just editing as I go.  Particularly check the final arithmetic on "j".]</p>

<pre><code>  public String mirrorEnds(String string) {
      final int len = string.length();
      final int half = len / 2;

      int j = len - 1;
      for (int i = 0; i &lt; half; i++) {
        if (string.charAt(i) != string.charAt(j--)) {
            j = len - j - 1; 
            break;      
        }
      }
      return j == half ? string : string.substring(0, j);
    }

</code></pre>

<p>or</p>

<pre><code>public String mirrorEnds(String string) {
      int len = string.length();
      final int half = len / 2;

      int i = 0; 
      while (i &lt; half) {
        if (string.charAt(i) != string.charAt(--len)) {
            break;      
        }
        i++;
      }
      return i == half ? string : string.substring(0, i);
    }

</code></pre>
    </div>