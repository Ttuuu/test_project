<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Good observation</strong></p>

<p>Many new C programmers do not realize that <code>n = strlen(s)</code> when called in a loop can take code from linear performance O(n) to worse O(n*n) performance when  <code>s</code> may change or with weak compilers.</p>

<pre><code>// I'd like to avoid repeated strlen() calls
int string_length = strlen(str);  // Good!!
</code></pre>

<p><strong>Good use of <code>const</code></strong></p>

<p>Nice. <code>string_contains_integer(const char *str)</code></p>

<p><strong>Nicely formatted code</strong></p>

<p>I hope you are using an auto formatter.  Life is too short for manual formatting.</p>

<hr>

<p><strong>"whatever its length is"</strong></p>

<p><em>Strings</em> can have a length that exceeds <code>INT_MAX</code>.  Note that <code>strlen()</code> returns type <code>size_t</code>.  That is the right-sized type for array indexing and sizing.  Note: <code>size_t</code> is some <em>unsigned</em> type.</p>

<pre><code>// int string_length = strlen(str);
// for (int i = 0; i &lt; string_length; i++)

size_t string_length = strlen(str);
for (size_t i = 0; i &lt; string_length; i++)
</code></pre>

<p><strong>Expensive sign compare</strong></p>

<p>Rather than call <code>strncmp()</code>, just compare characters.</p>

<pre><code>// char chr = str[i];
// if (strncmp("-", &amp;chr, 1) == 0)
if (str[i] == '-')
</code></pre>

<p>OP's code is tricky here.  <code>strncmp()</code> can handle non-strings (which is what <code>&amp;chr</code> points to) as long as they do not exceed <code>n</code>.  With <code>n==1</code>, code is effectively doing a <code>char</code> compare.</p>

<p><strong>Sign at the beginning</strong></p>

<p>Conversion of strings to numeric values allow a <em>leading</em> sign, either <code>'-'</code>, <code>'+'</code> or none.  This code errantly allows a <code>'-'</code> <em>someplace</em>.  <a href="https://codereview.stackexchange.com/questions/211384/biginteger-check-in-c-from-a-string#comment408739_211384">@Martin R</a>. </p>

<p>Just start with </p>

<pre><code>bool string_contains_integer(const char *str) {
  if (*str == '-' || *str == '+') {
    str++;
  }
  ....

  // Other sign code not needed
</code></pre>

<p><strong><code>strlen()</code> not needed.</strong></p>

<p>Rather than <code>i &lt; string_length</code>, just test <code>str[i] != '\0'</code>.  This speeds up detection of non-numeric strings as the entire string does not need to be read.</p>

<p><strong><code>is...(int ch)</code> quirk</strong></p>

<p><code>is...()</code> functions are specified for <code>int</code> values in the <code>unsigned char</code> range and <code>EOF</code>.  On common platforms where <code>char</code> is signed, <code>isdigit(chr)</code> risks <em>undefined behavior</em> (UB) when <code>chr &lt; 0</code>.  Best to cast here.</p>

<pre><code>// isdigit(chr)
isdigit((unsigned char) chr)
</code></pre>

<p><strong><code>{ block }</code></strong></p>

<p>Of coding style, I recommend to always use <code>{}</code> after <code>if,else</code>, even if one line.</p>

<pre><code>//if (string_length == 0)
//    return false;

if (string_length == 0) {
    return false;
}
</code></pre>

<p><strong>Minor: Simplification</strong></p>

<p>To simply prints a line, code could use <code>puts()</code>.  But what you did is OK.  Note <code>puts()</code> appends a <code>'\n'</code>.</p>

<pre><code>// printf("%s\n", "PASS: Input is a number.");
puts("PASS: Input is a number.");
</code></pre>

<hr>

<p><strong>Alternative</strong></p>

<p>This does not use array indexing.  Just increment the pointer as needed.</p>

<pre><code>bool string_contains_integer_alt(const char *str) {
  if (*str == '-' || *str == '+') {
    str++;
  }

  if (*str == '\0') {
    return false;
  }

  while (isdigit((unsigned char)*str)) {
    str++;
  }

  return *str == '\0';
}
</code></pre>
    </div>