<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>       case nameof(UInt16):
           return 2;

       case "Byte":
           return 1;
</code></pre>
</blockquote>

<p>Be consistent. <code>nameof</code> is clearly preferable.</p>

<hr>

<blockquote>
<pre><code>private void ConvertArray(byte[] response, ref object[] items)
{
    int index = 0;
    for (int i = 0; i &lt; items.Length; i++)
    {
        var item = items[i];
        var itemType = item.GetType();
        var itemSize = SizeOf(item.GetType());
</code></pre>
</blockquote>

<ol>
<li>The last line should use the variable <code>itemType</code>.</li>
<li>The sole point of <code>items</code> seems to be to extract types. So why is the parameter not <code>params Type[] types</code>?</li>
</ol>

<hr>

<blockquote>
<pre><code>        if (itemSize == 0)
        {
            continue;
        }
</code></pre>
</blockquote>

<p>Would it be better to throw an exception?</p>

<hr>

<blockquote>
<pre><code>        else if (itemSize == 1)
        {
            items[i] = response[index];
        }
</code></pre>
</blockquote>

<p>That's a bug waiting to happen in the future when you add support for <code>sbyte</code>.</p>

<hr>

<blockquote>
<pre><code>        {
            var method = typeof(BitConverter).GetMethod($"To{itemType.Name}");
            var returned = method.Invoke(null, new object[] { response, index });
            items[i] = Convert.ChangeType(returned, itemType);
        }
</code></pre>
</blockquote>

<p>Ugh. I would much rather use T4 to generate the entire method and get rid of the reflection. That would probably also eliminate the need for <code>Sizeof</code>.</p>

<hr>

<p>If you're using a recent .Net (e.g. .Net Core 2.1) then I think some combination of <code>Span&lt;T&gt;</code> and <code>Memory&lt;T&gt;</code> will do what you want. Over the past year or so, Microsoft has done a lot of work on C# features for byte-level memory manipulation. You can probably create a <code>struct</code> for the contents of the packet and coerce the <code>byte[]</code> into your struct with one or two lines of code.</p>
    </div>