<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Add some comments describing your algorithm</h1>
<p>Your code is a single function which is a bit long, and it's not very obvious what it is doing. There are two ways of dealing with this: either creating functions that implement logical steps of the algorithm individually, or add some comments to describe which steps your algorithm is doing. Don't add comments that just descibre exactly what the code does, but give a higher level description.</p>
<h1>Unnecessary use of <code>std::count()</code></h1>
<p>You use <code>std::count()</code> a lot, but you don't need to. You can count the number of zeroes and ones when building <code>window</code>, and when you are calling <code>window.erase()</code> you can decrement your counts.</p>
<h1>Consider using <code>std::string</code> functions to search for blocks of zeroes and ones</h1>
<p>Instead of using <code>std::find()</code> and counting manually using <code>while</code>-loops, you can use <a href="https://en.cppreference.com/w/cpp/string/basic_string/find" rel="noreferrer"><code>std::string::find()</code></a>. You can also construct a string directly from a subregion of another string.</p>
<pre><code>auto first1 = str.find('1');
auto next0 = str.find('0', first1);
auto next1 = str.find('1', next0);

std::string window(str, first1, next1 - first1);
</code></pre>
<p>Once you have that, calculating the number of zeores and ones in <code>window</code> is easy:</p>
<pre><code>auto count1 = next0 - first1;
auto count0 = window.size() - count1;
</code></pre>
<p>However, you might not even need the initial window:</p>
<h1>Avoid constructing and then partially deconstructing the window</h1>
<p>Your window consists of a number of ones followed by a number of zeroes. You are then slowly removing from the start and end until some conditions are met. However, while you are doing this, the only thing you really care about is the count of zeroes and ones, not the string <code>window</code> itself! You can reconstruct the final <code>window</code> from the counts left at the end.</p>
<p>Let's assume we have calculated <code>count0</code> and <code>count1</code> like I've written above. Then:</p>
<pre><code>while (window.size() &gt; 1) {
</code></pre>
<p>Can be replaced with:</p>
<pre><code>while (count0 + count1 &gt; 1) {
</code></pre>
<p>Then you do:</p>
<pre><code>if (count0 &gt; count1)
    window.erase(--window.end());
else if (count1 &gt; count0)
    window.erase(window.begin());
</code></pre>
<p>Basically, this removes zeroes or ones until the number of zeroes or ones is equal. This can be replaced with the following:</p>
<pre><code>count0 = count1 = std::min(count0, count1);
</code></pre>
<p>Then the next condition is:</p>
<pre><code>if (str.find("10", std::distance(str.begin(), it)) == std::string::npos)
    window.erase(window.begin());
else
    window.erase(--window.end());
</code></pre>
<p>Since <code>str</code> is not modified here, you could move the <code>if</code>-condition outside of the loop. And the <code>window.erase()</code> calls can be replaced by <code>count0--</code> and <code>count1--</code>. So what's left is:</p>
<pre><code>bool has_second_10 =  str.find("10", next0 + count0) != str.npos;

while (count0 &amp;&amp; count1) {
    if (count0 != count1) {
        count0 = count1 = std::min(count0, count1);
    } else {
        if (has_second_10) {
            count0--;
        } else {
            count1--;
        }
    }
}
</code></pre>
<p>But wait, it gets even better: you always start with a window with both ones and zeroes, and you make the count equal, and then you remove zeroes if the original string had a second occurrence of <code>"10"</code>, otherwise you remove ones. So the single character left in the window is completely determined by <code>has_second_10</code>, and the <code>while</code>-loop can be eliminated entirely. You also don't need to count ones and zeroes anymore.</p>
<p>Now it's just a matter of updating the original string. Instead of modifying a character and erasing some, you can use the <a href="https://en.cppreference.com/w/cpp/string/basic_string/replace" rel="noreferrer"><code>std::string::replace()</code></a> function to do that in one go:</p>
<pre><code>str.replace(first1, next1 - first1, 1, has_second_10 ? '1' : '0');
</code></pre>
<h1>Summary</h1>
<p>With the above improvements, the code can be simplified to:</p>
<pre><code>#include &lt;iostream&gt;
#include &lt;string&gt;
 
int main() {
    int T = 0;
    std::cin &gt;&gt; T;

    while (T--) {
        int n = 0;
        std::cin &gt;&gt; n;
        std::string str;
        std::cin &gt;&gt; str;

        while (str.find("10", 0) != str.npos) {
            auto first1 = str.find('1');
            auto next0 = str.find('0', first1);
            auto next1 = str.find('1', next0); // this might be npos, but that's fine
            auto replacement = str.find("10", next1) == str.npos ? '0' : '1';
            str.replace(first1, next1 - first1, 1, replacement);
        }

        std::cout &lt;&lt; str &lt;&lt; "\n";
    }
}
</code></pre>
    </div>