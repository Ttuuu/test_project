<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The first thing you can do to make the sign change obvious is to use <code>operand = -operand</code>, this way you avoid the need for the multiplication operator. Also changing the <code>operand</code> name to sign can help.</p>

<p>You also don't need <code>counter</code> as it will be equal to <code>i</code> before the test. Just change the test to use the modulo (<code>%</code>) operator instead of reseting <code>counter</code>.</p>

<p>And using augmented assignment for <code>result</code> can lead to a more readable line too:</p>

<pre><code>result = 0
sign = 1
for i in range(1, 101):
    result += sign * i
    sign = -sign
    if i % 10 == 0:
        print(result)
</code></pre>

<p>Now, this probably need to be made more reusable, this means building a function out of this code and avoiding mixing computation and I/Os:</p>

<pre><code>def alternating_sum(start=1, stop=100, step=10):
    result = 0
    sign = 1
    for i in range(start, stop+1):
        result += sign * i
        sign = -sign
        if i % step == 0:
            yield result
</code></pre>

<p>Usage being:</p>

<pre><code>for result in alternating_sum(1, 100, 10):
    print(result)
</code></pre>

<hr>

<p>Also, depending on the problem at hand, you can leverage the fact that every two numbers add-up to <code>-1</code>. So every 10 numbers add-up to <code>-5</code>. If you don't need much genericity, you can simplify the code down to:</p>

<pre><code>def alternating_every_ten(end=100):
    reports = end // 10
    for i in range(1, reports + 1):
        print('After', 10 * i, 'sums, result is', -5 * i)
</code></pre>
    </div>