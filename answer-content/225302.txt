<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This code appears to function correctly but I wouldn't use it in production unless it is cleaned up. See the suggestions below.</p>

<p>The first five variables are declared as globals:</p>

<blockquote>
<pre><code>cont=document.getElementById("content");
nav=document.getElementsByClassName("navbar");
opt=document.getElementsByClassName("option");
side=document.getElementById("sidenav");
side.style.display="none";
</code></pre>
</blockquote>

<p>It would be wise to declare them with the <code>var</code> keyword, and wrap everything in an IIFE to avoid polluting the global namespace. For a small page this likely wouldn't be an issue but as a page grows into a single-page application or larger it could cause issues - for example if a variable name is used in different sections of code. </p>

<p>Also <code>pos</code> should be declared at the top using <code>var</code> to avoid it being used as a global variable.</p>

<hr>

<p>The <code>onmouseover</code> and <code>onmousout</code> could be removed from all the anchors with class <code>option</code> by changing the CSS rulesets to use the <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:hover" rel="nofollow noreferrer"><code>:hover</code> pseudo-class selector</a> though maybe some of those <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:hover#Browser_compatibility" rel="nofollow noreferrer">mobile browsers would have compatitibilty issues</a>, depending on the version.</p>

<p>Instead of using CSS selectors <code>.o-o</code> and <code>.o-a</code>, use <code>.option</code> and <code>.option:hover</code>, respectively. The styles under the <code>.o-o</code> ruleset can be moved up into the styles for <code>.option</code> (except for the color, since it is duplicate).</p>

<hr>

<p>The <code>onscroll</code> function can be simplified from </p>

<blockquote>
<pre><code>window.onscroll = function() {navtog()};
</code></pre>
</blockquote>

<p>To simply a reference to the function name:</p>

<pre><code>window.onscroll = navtog;
</code></pre>

<hr>

<p>For the element with class <em>navbar</em> why not use an <code>id</code> attribute instead of class name? There only appears to be one of those elements and the JS code appears to be selecting the first element with that class so it could be selected by <code>id</code> instead. </p>

<blockquote>
<pre><code>&lt;div class="navbar"&gt;
</code></pre>
</blockquote>

<p>can be changed to </p>

<pre><code>&lt;div id="navbar"&gt;
</code></pre>

<p>Then </p>

<blockquote>
<pre><code>nav=document.getElementsByClassName("navbar");
</code></pre>
</blockquote>

<p>Can be changed to </p>

<pre><code> nav=document.getElementById("navbar");
</code></pre>

<p>And CSS selectors must be changed as well. </p>

<p>Those functions <code>bhov</code> and <code>bbay</code> are quite inefficient - mostly because they get all elements with class name <code>option</code> each time either function is called and then look for the element in <code>opt</code>. Why not just use <code>event.currentTarget</code> and modify the <code>className</code> directly? If that doesn't work, then why re-query the DOM instead of using <code>opt</code> to copy elements into <code>els</code>?</p>

<hr>

<p>Indentation is not always consistent - many lines in the JavaScript are indented with a tab, while some of the lines in the <code>bhov</code> and <code>bbay</code> functions are indented with two spaces. And many of the CSS lines inside rulesets are not indented, whereas others are indented with two spaces.</p>
    </div>