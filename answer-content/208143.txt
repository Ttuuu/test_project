<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Removing numbers greater than the target affects the correctness of this program - they could be added to negative numbers to reach the target.</p>

<p>You could get a performance improvement by finding the difference between each element and the target, then looking to see if that difference is in the list.  This doesn't in itself reduce the computational complexity (it's still <strong>O(<em>n</em>²)</strong>), but we can build on that: if the list is first sorted, and we then use a binary search to test membership we get to <strong>O(<em>n</em> log <em>n</em>)</strong>; if we convert to a structure with fast lookup (such as a <code>collections.​Counter</code>, which has amortized O(1) insertion and lookup), then we come down to <strong>O(<em>n</em>)</strong>.</p>

<p>If we have a <code>Counter</code>, then we can account for all combinations of that pair by multiplying one count by the other (but we'll need to consider the special case that the number is exactly half the target).</p>

<p>We could do with some auto tests.  Consider importing the <code>doctest</code> module and using it.  Some good test cases to include:</p>

<pre><code>1, [] → 0
1, [1] → 0
1, [0, 1] → 1
0, [-1, 1] → 1
0, [0, 1] → 0
4, [1, 4, 3, 0] → 2
4, [1, 1, 3, 3] → 4
4, [2, 2, 2, 2] → 6
</code></pre>
    </div>