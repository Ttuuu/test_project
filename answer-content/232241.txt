<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>here's a few comments in no particular order.</p>

<p>Have a look over PEP8. It's Python's style guide which helps keep Python code consistent and readable. Things like naming functions which <code>snake_case</code>, constants as <code>CAPS</code>, proper spacing around operators, commenting style and placement, spacing between imports, etc.</p>

<p>It's recommended to use a context manager for opening files, this prevents them from being left open and the indentation makes it clear when a file is being used. You can open two files at once like so:</p>

<pre class="lang-py prettyprint-override"><code>with open('file_one.txt', 'a') as file_one, open('file_two.txt', 'a') as file_two:
    ...
</code></pre>

<p>Instead of using <code>return</code> to handle errors, just raise the error itself. Catch the specific exception (ValueError, TypeError, etc (<em>not</em> <code>Exception</code> or worse <code>BaseException</code>)) then raise it with a message like so:</p>

<pre class="lang-py prettyprint-override"><code>except TypeError:
    raise TypeError('Reason for failure message')
</code></pre>

<p>If you want to continue having caught the error, you can print the error message and continue instead:</p>

<pre class="lang-py prettyprint-override"><code>except TypeError as exc:
    print(f'Reason for failure: {exc}; continuing ...')
</code></pre>

<p>A better way of storing lines from a file to a list would be to use <code>readlines()</code> and <code>strip()</code>. <code>readlines()</code> converts a file to a list where each item is a line in the file, and <code>strip()</code> can remove unwanted linebreaks and whitespace.</p>

<p>Wrap the code you're going to run with:</p>

<pre class="lang-py prettyprint-override"><code>if __name__ == '__main__':
    ...
</code></pre>

<p>This stops any old code being executed if importing it as a module.</p>

<p>Why do you take <code>val</code> as an argument then immediately rename it to <code>url</code>? Just take <code>url</code> as the argument, it's more descriptive. You've also used <code>url</code> in your except block where it may not have been defined. It wouldn't fail in this example but it could have done if you wrote code like this elsewhere.</p>

<p>Your variable names could be much improved. No single letter variables! Make them descriptive and avoid putting their type in the name. <code>k</code> -&gt; <code>hash_file</code>; <code>image_hash_list</code> -&gt; <code>image_hashes</code>; etc.</p>

<p>You're importing <code>pickle</code> but not using it. You're also using <code>urllib</code> without importing it.</p>

<p>You're calling <code>os.remove(local)</code> regardless of the if condition. Put this outside the if check.</p>

<p>There are a few other nitpicks and I can't speak to what the code is actually doing as it's not something I'm familiar with, but I hope that helps.</p>
    </div>