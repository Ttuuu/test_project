<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Firstly, I want to give you a thumbs up for a clear description of your code. It really helps with reading.</p>

<p><sup><sub>And another before-we-begin thing: you've got a missing <code>.</code> in your longest line of the code, near the end: <code>-  thisoffsetTop };</code>.</sub></sup></p>

<hr>

<h1>Main changes</h1>

<p>Indeed, as you do not need to store all the coordinates, it's not efficient to save them all.
To draw a line between the current and previous point, all you need are those two points.
So, the first thing we can do with the code is to refactor that away: <strong>use <code>prevCoord</code> instead of an array</strong>.</p>

<h2>Get rid of the array</h2>

<p>First, we remove the <code>coords</code> declaration and replace it with a <code>prevCoord</code>.
Without adding initialization, it'll stay at <code>undefined</code> for the first round.
We're fine with that.</p>

<pre><code>// old
var coords = [];

// new
var prevCoord;
</code></pre>

<h2>Slightly different condition</h2>

<p>We do not need to compute the <code>max</code> anymore -- the original code uses it to grab the "current" and "previous" coordinate, but we're moving away from that.
Also, the condition is now different.
We just need to ask if <code>prevCoord</code> is undefined.</p>

<pre><code>// old
var max = coords.length - 1;
if (typeof coords[max - 1] !== "undefined") {

// new
if (typeof prevCoord !== "undefined") {
</code></pre>

<h2>Simplify the contents of <code>if</code></h2>

<p>Let's see what happens inside.
Before we incorporate our change, let's notice that in your first line within <code>if</code>, you've got an expression <code>coords[max]</code>.
That's actually the element you've just <code>push</code>'d, right?
So we can replace <code>coords[max]</code> with just <code>coord</code> (the current coordinate).</p>

<p>Then, we also not need the <code>prev = coords[max - 1]</code> part because we already have the previous coordinate stored in <code>prevCoord</code>.</p>

<p>In other words, that line's a goner because we have the refs we need at hand.</p>

<pre><code>// old
var curr = coords[max], prev = coords[max - 1];

// new
// not needed: curr is coord and prev is prevCoord
</code></pre>

<p>Now, the drawing commands become the following:</p>

<pre><code>// old
context.moveTo(prev.x, prev.y);
context.lineTo(curr.x, curr.y);

// new
context.moveTo(prevCoord.x, prevCoord.y);
context.lineTo(coord.x, coord.y);
</code></pre>

<h2>Store the current as previous</h2>

<p>Now, the main part.</p>

<p>The idea is not that far from what you have here.
Instead of pushing into array, you can just overwrite the <code>prevCoord</code>:</p>

<pre><code>prevCoord = coord
</code></pre>

<p>Of course, you cannot do it as soon as you grab the <code>coord</code> from the <code>event</code> and <code>offset</code> stuff -- you need the <code>prevCoord</code> to draw the line.
So, just overwrite it <strong>after drawing</strong>.</p>

<pre><code>// old
coords.push(coord);
if (typeof prevCoord !== "undefined") {
    // ...
}

// new
if (typeof prevCoord !== "undefined") {
    // ...
}
prevCoord = coord;
</code></pre>

<p>See -- just after using the <code>prevCoord</code> to draw a line between previous and current, we don't need the <code>prevCoord</code> anymore.
We can use this variable to prepare for the next cycle: on next mouse move, the "current" will become "previous"... meaning that when we run this function the next time, <code>prevCoord</code> will be just what it needs to be: the coordinate that was "mouse overed" the <em>previous</em> time.</p>

<h2>Polish up</h2>

<p>There's one more place let to change: the <code>click</code> handler.
Just as you reset your array, you should reset the <code>prevCoord</code> back to <code>undefined</code>.</p>

<pre><code>// old
coords = [];

// new
prevCoord = undefined;
</code></pre>

<h2>Full code</h2>

<p>Here's the complete deal.</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>var draw = false;
var prevCoord;
var canvas = document.getElementById('canvas');
var context = canvas.getContext('2d');
canvas.addEventListener('click', function (event) {
    prevCoord = undefined
    draw = !draw;
});
canvas.addEventListener('mousemove', function (event) {
    if (draw) {
        context = canvas.getContext("2d");
        var coord = { 'x': event.x - this.offsetLeft, 'y': event.y - this.offsetTop };
        if (typeof prevCoord !== "undefined") {
            context.beginPath();
            context.moveTo(prevCoord.x, prevCoord.y);
            context.lineTo(coord.x, coord.y);
            context.stroke();
        }
        prevCoord = coord
    }
});</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;canvas id="canvas" style="border: 1px solid red"&gt;&lt;/canvas&gt;</code></pre>
</div>
</div>


<h1>More suggestions</h1>

<p>A couple of things...</p>

<h2>Redefining <code>context</code></h2>

<p>You have, on your fourth line, in the global scope a <code>var context = ...</code>, and then inside the <code>if (draw)</code> you have a <code>context = ...</code>. 
There's no need to run that each time.
The <code>context</code> doesn't change.</p>

<pre><code>// old
if (draw) {
    context = canvas.getContext("2d");

// new
if (draw)
</code></pre>

<h2>Check for <code>undefined</code></h2>

<p>You don't need to use <code>typeof x != 'undefined'</code> here.
It's used when you're not sure if <code>x</code> has been <em>declared</em>.
A simple check would do.</p>

<pre><code>// old
if (typeof prevCoord !== "undefined") {

// new
if (prevCoord !== undefined) {
</code></pre>

<hr>

<p>That's all!</p>
    </div>