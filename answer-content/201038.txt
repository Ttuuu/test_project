<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>class GFG {
    private static void printSortedArr (int[] arr) {
</code></pre>

<p><em>"There are 2 hard problems in Computer Science: cache invalidation, naming, and off-by-1 errors."</em> Poorly-chosen names can mislead the reader and cause bugs.  It is important to use descriptive names that match the semantics and role of the underlying entities, within reason.  What is <code>GFG</code>? Should <code>arr</code> already be sorted? If I just want to 3-way sort, can I do it without printing?</p>

<p>Keep functions simple.  Functions should perform single logical operations.  That enables your entities to be simpler to understand, test, and reuse.</p>

<hr>

<pre><code>            else {
                count2++;
            }
        // ...
        while (count2 != 0) {
            System.out.print(2 + " ");
            count2--;
        }
</code></pre>

<p>Is this true? Should an element that is neither 0 or 1 be defaulted to 2?</p>

<hr>

<blockquote>
  <p>Is there a better way to solve this question? Can space and time complexity be further improved?</p>
</blockquote>

<p>Depends on your use-case (measure!).  Besides a 3-way counting sort, you can also 3-way partition (quicksort) that takes a pivot and partitions the array into a group that is less than, equal to, and greater than the pivot.</p>

<pre><code>...
  public static void threeWayPartition(int[] array, int pivot) {
    int first = 0;
    int mid = 0;
    int last = array.length - 1;

    while (mid &lt;= last) {
      if (array[mid] &lt; pivot) {
        swap(array, first++, mid++);
      }
      else if (array[mid] &gt; pivot) {
        swap(array, mid, end--);
      }
      else {
        ++mid;
      }
    }
  }

  public static void swap(int[] array, int i, int j) {
    int temp = A[i];
    A[i] = A[j];
    A[j] = temp;
  }
</code></pre>
    </div>