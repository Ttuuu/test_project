<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You use <code>pathlib.Path</code>, which is great, but it can do a lot more:</p>

<ul>
<li>Operations like <code>os.path.splitext</code> should be modernized using the <code>suffix</code> attribute of <code>Path</code> objects; for a full list of those designated replacements, see <a href="https://docs.python.org/3/library/pathlib.html#correspondence-to-tools-in-the-os-module" rel="nofollow noreferrer">the documentation</a>.</li>
<li><code>os.scandir</code> can in this case be replaced by <code>Path.rglob</code>. This is where the recursion you mentioned comes into play. But that's it: Recursive globbing is an irrelevant implementation detail here. The point is that we do not have to do it "manually". <code>rglob</code> takes a pattern as its string argument, which can be the suffix you mentioned.</li>
<li>Further, <code>os.makedirs</code> can be <code>Path.mkdir</code> with <code>parents=True</code> for the latter. This is not as big a win as the others, but nice.</li>
</ul>

<p>Eventually, it turns out the <code>os</code> import can be done without altogether, and recursion is neatly tucked away:</p>

<pre class="lang-py prettyprint-override"><code>from pathlib import Path
from shutil import copy2  # "identical to copy() but attempts to preserve to file metadata"

COPY_FROM = Path("source")
COPY_TO = Path("dest")

SUFFIX = "*.py"

for source in COPY_FROM.rglob(SUFFIX):
    subpath = source.relative_to(COPY_FROM)
    destination = COPY_TO.joinpath(subpath)
    destination.parent.mkdir(parents=True, exist_ok=True)
    copy2(source, destination)
</code></pre>

<p>Note the use of <code>copy2</code>, which is <a href="https://docs.python.org/3/library/shutil.html#shutil.copy2" rel="nofollow noreferrer">identical to <code>copy</code> but attempts to preserve metadata</a>.
This can be convenient for e.g. music files.</p>

<p>The <code>parent</code> attribute is the logical parent path to the found file, so essentially all path elements except for the found file itself.
Like in your solution, those path elements (directories) have to be created first.
In <code>mkdir</code>, <code>exist_ok=False</code> is the default and would prohibit us from most desired operations, like copying files in subdirectories.</p>

<p>The above gives the following result, which is hopefully what you are aiming for:</p>

<pre><code>~$ tree
.
├── dest
│   ├── file1.py
│   ├── test1
│   │   ├── file2.py
│   │   └── file3.py
│   └── test2
│       ├── file4.py
│       └── test3
│           └── file5.py
└── source
    ├── file1.py
    ├── test1
    │   ├── file2.py
    │   └── file3.py
    └── test2
        ├── file4.py
        └── test3
            └── file5.py
</code></pre>
    </div>