<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code> length = (len(s))
</code></pre>

<p>Unnecessary ( )’s.</p>

<pre><code> range_list = (range(1, len(s)+1))
</code></pre>

<p>Again, unnecessary ( )’s.  Does not actually create a list, just a <code>range</code> object, so a better name is in order.   And you can remove this entire statement (see below). </p>

<pre><code> list_char = list(s)
</code></pre>

<p>You don’t need to create a list of characters to solve this problem.  (More later.)</p>

<pre><code> divisors = []
</code></pre>

<p>Unnecessary statement.  Made obsolete by very next statement:</p>

<pre><code> divisors = [x for x in range_list if (length)% (x) == 0]
</code></pre>

<p>Unnecessary ( )’s ... twice.  Could replace <code>range_list</code> with <code>range(1, len(s)+1)</code>, and remove above <code>range_list = ....</code>.</p>

<pre><code> max_pieces = []
</code></pre>

<p>Misleading and useless.  You store a single integer in this variable later, not a list. </p>

<pre><code> for i in range (len(divisors)):
     size = divisors[i]
</code></pre>

<p>A more pythonic way would be:</p>

<pre><code> for size in divisors:
</code></pre>

<p>I might use <code>divisor</code> instead of <code>size</code>, when looping over a list of divisors. </p>

<pre><code>     split = [list_char[i:i+size] for i in range(0, length, size)]
</code></pre>

<p>Confusing.   <code>i</code> is already used in outer loop.  List comprehension’s <code>i</code> is (fortunately) a separate variable ... but give it a different name ... maybe <code>j</code>. </p>

<p>Instead of <code>list_char[i:i+size]</code>, you could simply use <code>s[i:i+size]</code>.  This would return a substring instead of a sublist of characters, which would be just as effective. </p>

<pre><code>     if(all(x == split[0] for x in split)):
</code></pre>

<p>The <code>if</code> statement does not need the outer ( )’s.  </p>

<pre><code>         max_pieces = int(length/size)
</code></pre>

<p>More pythonic would be <code>max_pieces = length // size</code></p>

<pre><code>         break
 return max_pieces
</code></pre>

<p><code>break</code> could be replaced with just <code>return max_pieces</code>.  And the current return statement replaced with an error message or <code>return 1</code> catch-all. </p>
    </div>