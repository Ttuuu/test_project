<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think this is beyond the jurisdiction of the C standard.  See <a href="https://stackoverflow.com/questions/37796947/spaces-inserted-by-the-c-preprocessor">https://stackoverflow.com/questions/37796947/spaces-inserted-by-the-c-preprocessor</a>.  All the standard says on the topic is a footnote:</p>

<blockquote>
  <p>Note that adjacent string literals are not concatenated into a single string literal (see the translation phases in 5.1.1.2); thus, an expansion that results in two string literals is an invalid directive.</p>
</blockquote>

<p><a href="https://port70.net/~nsz/c/c11/n1570.html#note170" rel="nofollow noreferrer">https://port70.net/~nsz/c/c11/n1570.html#note170</a></p>

<p>But this doesn't really matter since you are not making multiply strings.</p>

<hr>

<p>Investigating GCC and Clang...</p>

<p>GCC does different things depending on what you ask for:</p>

<pre><code>STRINGIFY(PROJECT DASH SUB_PROJECT DASH VERSION.c)
</code></pre>

<p>... gets me <code>"myProject - mySub - 1.01.c"</code> with GCC 9.3 and <code>-E</code>, but ...</p>

<pre><code>#include STRINGIFY(PROJECT DASH SUB_PROJECT DASH VERSION.c)
</code></pre>

<p>gets me <code>myProject-mySub-1.01.c: No such file or directory</code>.  So <code>-E</code> has spaces and <code>#include</code> doesn't.</p>

<p>Clang is at least consistent.  With Clang 10, <code>#include</code> has spaces: <code>fatal error: 'myProject - mySub - 1.01.c' file not found</code> And Clang 10 and <code>-E</code> also has spaces <code>myProject - mySub - 1.01.c</code>.</p>

<p>In my opinion, Clang's behavior makes the most sense.  Suppose you wanted a space -- how else could you do that?</p>

<hr>

<pre><code>#define ID(arg) arg
</code></pre>

<p>This is a common trick.  I think it's a good idea although it looks a little ugly when you have to use it in so many spots.</p>

<hr>

<pre><code>#define STRINGIFY(arg) STRINGIFY_(arg)
#define STRINGIFY_(arg) #arg
</code></pre>

<p>This is fine, but I think it'd be clearer to define <code>STRINGIFY</code> below the helper macro it uses.</p>

<hr>

<p>Can you get away with something like:</p>

<pre><code>#if VERSION == 1
#include "library-version-1.h"
#else
#include "library-version-other.h"
#endif
</code></pre>
    </div>