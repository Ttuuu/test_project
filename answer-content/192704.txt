<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>We will start by cleaning up the code:</p>

<p>First, let's make the for loop cleaner to read. A compiler is able to inline variables that are only used once in a scope.</p>

<pre><code>for (int i = 0; i &lt; board.size(); i++) {

    final ImageIcon tileToDisplay = displayTile(i); 

    final int height = tiles.get(i).getHeight();
    final ImageIcon resizedTileToDisplay = resizeIcon(tileToDisplay,height,height);
}
</code></pre>

<p>Second, in <code>displayTile(int num)</code>, StringBuilder is more efficient when concatenating strings. Also, <code>if(num != 0)</code> is redundant because you apply the same logic in both cases.</p>

<pre><code>public static ImageIcon displayTile(int num) {

    final StringBuilder pathBuilder = new StringBuilder("src/resources/");
    pathBuilder.append(num);
    pathBuilder.append(".png");

    return new ImageIcon(pathBuilder.toString());
}
</code></pre>

<p>Lastly, <code>resizeIcon</code> changes the parameter <code>i</code>; methods should not change the parameters that they receive:</p>

<pre><code>public static ImageIcon resizeIcon(ImageIcon icon, int x, int y) {

    Image resizedImage = icon.getImage().getScaledInstance(x,y,java.awt.Image.SCALE_SMOOTH));
    return new ImageIcon(resizedImage);
}
</code></pre>

<p>Now, let's deal with performance:</p>

<p>You are loading 100 - 200 images from a file, resizing each one and then placing it on a screen. This is a resource intensive task and you need to optimise it. Here are some suggestions</p>

<ol>
<li><p>Use a <a href="https://docs.oracle.com/javase/tutorial/essential/concurrency/pools.html" rel="nofollow noreferrer"><code>ThreadPool</code></a> to load the images asynchronously on start up. Cache them in memory and use them as needed.</p></li>
<li><p>Only load images as needed. For example, the board may have 200 tiles, but only 10 are visible at a given time. So load the first ten tiles. Anticipate which tiles will be needed and load them as necessary</p></li>
<li><p>If resizing is a one time operation, perhaps saved the resized images to disk so that you won't have to resize them after the first time.</p></li>
<li><p>BufferedImage offers <a href="https://docs.oracle.com/javase/7/docs/api/java/awt/image/BufferedImage.html#getSubimage(int,%20int,%20int,%20int)" rel="nofollow noreferrer"><code>getSubimage</code></a>. You could have one big image with all 100-200 tiles. Load this one big image once, and then show only the relevant part of the image using <code>getSubimage</code>. This is a concept known as Sprites and you can find a clearer example <a href="https://www.w3schools.com/css/css_image_sprites.asp" rel="nofollow noreferrer">here</a>.</p></li>
</ol>
    </div>