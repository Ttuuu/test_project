<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>@Loki Astari is correct in his comment:</p>

<blockquote>
  <p><code>rand()</code> is well know for its bad distribution. But you are using it correctly. Note: <code>rand() % currentIndexCounter</code> does not give you a perfect distribution unless <code>currentIndexCounter</code> is an exact divisor of <code>RAND_MAX</code>. You may want to look at C++11 random header and the generators provided inside.</p>
</blockquote>

<p>Since you're using C++11, you should instead utilize the <a href="http://en.cppreference.com/w/cpp/numeric/random" rel="nofollow noreferrer"><code>&lt;random&gt;</code></a> library.  It includes things such as pseudo-random number generators and random number distributions.</p>

<hr>

<p>Beyond that, I'll just point out some additional things:</p>

<ul>
<li><p>With C++11, you should now be using <a href="https://stackoverflow.com/questions/1282295/what-exactly-is-nullptr"><code>nullptr</code></a> instead of <code>NULL</code>.</p>

<p>This should be changed in <code>srand()</code>:</p>

<pre><code>std::srand(std::time(nullptr));
</code></pre>

<p>However, as mentioned above, you should not be using this with C++11.  But in any situation where you must stay with <code>rand</code>, the above would be recommended.</p></li>
<li><p>With C++11, you should also have access to initializer lists.  This will allow you to initialize the vector instead of calling <code>push_back()</code> multiple times:</p>

<pre><code>std::vector&lt;int&gt; elements { 1, 2, 3, 4, 5, 6, 7, 8, 9 };
</code></pre>

<p>Also note that your <code>push_back()</code> was only pushing numbers 1-8 into the vector, despite what your comment said.  You've used <code>&lt;</code> instead of <code>&lt;=</code> in the loop statement, so the 9 was excluded.</p></li>
<li><p><code>currentIndexCounter</code> should be of type <code>std::vector&lt;int&gt;::size_type</code>, which is the return type of <code>size()</code> (or you can just use <code>auto</code>).  This should've given you compiler warnings as it's a type-mismatch and a possible loss of data.  Make sure your compiler warnings are turned up high.</p></li>
<li><p><code>currentIndex</code> is a misleading name because it's being used with <em>iterators</em>, not <em>indices</em>.</p>

<p>Here, <code>auto</code> gives <code>currentIndex</code> the type <a href="http://en.cppreference.com/w/cpp/iterator/reverse_iterator" rel="nofollow noreferrer"><code>std::reverse_iterator</code></a> from <code>std::rbegin()</code>.  You could simply name this something like <code>iter</code>.  It's okay for iterator names to be short.</p></li>
<li><p>In the second <code>for</code> loop, you just need <code>elements.rend()</code>, without the <code>- 1</code>.  The iterator will already go through the entire vector and stop at the last reverse element.</p></li>
<li><p>The iterator increment should be prefix instead in order to improve performance a bit by avoiding a copy.  It's best to do this with all nontrivial types such as iterators.</p></li>
<li><p>I've tested this by giving <code>randomIndex</code> a value greater than <code>elements.size()</code>, causing an exception to be thrown.  Even if <code>std::rand()</code> or another RNG is guaranteed to give you an intended value, it may be best to handle this properly.</p></li>
</ul>

<p>Here's the final version with my own given changes, which I've also ran <a href="http://ideone.com/xVXeeN" rel="nofollow noreferrer">here</a>.  I've also included a concise way of displaying the vector before and after the shuffling.</p>

<pre><code>#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;random&gt;
#include &lt;vector&gt;

int main()
{
    // seed the RNG
    std::random_device rd;
    std::mt19937 mt(rd());

    std::vector&lt;int&gt; elements { 1, 2, 3, 4, 5, 6, 7, 8, 9 };

    std::cout &lt;&lt; "Before: ";
    std::copy(elements.cbegin(), elements.cend(),
        std::ostream_iterator&lt;int&gt;(std::cout, " "));

    auto currentIndexCounter = elements.size();

    for (auto iter = elements.rbegin(); iter != elements.rend();
        ++iter, --currentIndexCounter)
    {
        // get int distribution with new range
        std::uniform_int_distribution&lt;&gt; dis(0, currentIndexCounter);
        const int randomIndex = dis(mt);

        if (*iter != elements.at(randomIndex))
        {
            std::swap(elements.at(randomIndex), *iter);
        }
    }

    std::cout &lt;&lt; "\nAfter: ";
    std::copy(elements.cbegin(), elements.cend(),
        std::ostream_iterator&lt;int&gt;(std::cout, " "));
}
</code></pre>

<p><strong>Output:</strong></p>



<blockquote>
<pre class="lang-none prettyprint-override"><code>Before: 1 2 3 4 5 6 7 8 9
After: 7 9 3 2 4 5 6 1 8
</code></pre>
</blockquote>
    </div>