<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Shuffling the Deck</h1>

<p>Your comment <code># The deck is shuffled only once, when the deck is first built</code> is wrong.  You are shuffling the deck 52 times; once after before each card is added:</p>

<pre><code>    deck = []
    for value in range(13):
        suit_list = ['Hearts', 'Diamonds', 'Clubs', 'Spades']
        for suit in suit_list:
            ...
            random.shuffle(deck) # This line is executed 13 * 4 times!
            deck.append((name, face, suit, value))
    return deck
</code></pre>

<p>Additionally, you are grabbing cards from a random location in the middle of the deck, so it doesn't matter if you shuffled the deck or not:</p>

<pre><code>        selected_card = (random.choice(deck))
        ...
        deck.remove(selected_card)
</code></pre>

<p>You should build the complete deck, and then shuffle it once:</p>

<pre><code>    deck = []
    for value in range(13):
        suit_list = ['Hearts', 'Diamonds', 'Clubs', 'Spades']
        for suit in suit_list:
            ...
            deck.append((name, face, suit, value))

    random.shuffle(deck)
    return deck
</code></pre>

<p>And then, deal from the top of the deck:</p>

<pre><code>        selected_card = deck.pop(0)
</code></pre>

<h1>Suits</h1>

<pre><code>    for value in range(13):
        value += 1
        suit_list = ['Hearts', 'Diamonds', 'Clubs', 'Spades']
        for suit in suit_list:
</code></pre>

<p>The <code>suit_list</code> doesn't change.  It doesn't need to be recreated for each of the 13 card ranks.  You should move it out of the inner loop.</p>

<p>There it is still a local variable.  Code which wants to use your deck of cards might want/need to know the what all the suits in your deck are.  Is it a normal playing card deck, or a deck of Tarot cards?  Is the spade suit represented as "Spades", "SPADES", "S", "♠" or "♤"?</p>

<p>An <code>enum</code> would be a better entity to use as a card suit:</p>

<pre><code>from enum import Enum

Suit = Enum('Suit', 'Clubs, Diamonds, Hearts, Spades')
</code></pre>

<p>Then a program could safely refer to the spade suit as <code>Suit.Spades</code>, and iinstead of:</p>

<pre><code>        suit_list = ['Hearts', 'Diamonds', 'Clubs', 'Spades']
        for suit in suit_list:
</code></pre>

<p>You'd simply iterate over the <code>Suit</code> enum:</p>

<pre><code>        for suit in Suit:
</code></pre>

<p>You can still use <code>suit.name</code> to get a nice string for the <code>suit</code>.</p>

<h1>range(start, end, step)</h1>

<p>Instead of writing:</p>

<pre><code>    for value in range(13):
        value += 1
        ...
</code></pre>

<p>use the fact that a range can start at any value, so you don't need to add 1 to the card's rank at each iteration; just iterate over a different range:</p>

<pre><code>    for value in range(1, 13+1):
        ...
</code></pre>

<h1>Each tuple represents a card ...</h1>

<p>Ok ... lemme think.  The <code>card[0]</code> is the card's rank, and <code>card[1]</code> is the card's suit?  Or do have have that backwards ; <code>card[0]</code> is the suit and <code>card[1]</code> is the rank?</p>

<p>With a tuple, it is easy to forget which member is stored in which field.  It is way easier to use a named tuple:</p>

<pre><code>from collections import namedtuple

Card = nametuple('Card', 'name, face, suit, value')
</code></pre>

<p>Then we wouldn't have to remember; <code>card.rank</code> is the the card's rank, and <code>card.suit</code> is the card's suit.</p>

<p>The only downside is ... uhh ... no, sorry, there are no downsides.  A <code>namedtuple</code> is just as efficient time and space wise.  You'd create the cards like this:</p>

<pre><code>        deck.append(Card(name, face, suit, value))
</code></pre>

<p>And instead of </p>

<pre><code>    print('You drew %s.' % (selected_card[0]))
</code></pre>

<p>you'd write:</p>

<pre><code>    print('You drew %s.' % selected_card.name)
</code></pre>

<h1>Formatting</h1>

<p>The inner parenthesis are unnecessary here:</p>

<pre><code>    print('You drew %s.' % (selected_card[0]))
</code></pre>

<p>They take the value "the Ace of Spaces", and ... return that string unaltered.  So we end up with the expression <code>str % str</code>, and since the first string contains only one <code>%s</code> code, the argument is directly used.</p>

<p>if you had used <code>(selected_card[0], )</code>, that would have constructed a tuple of 1 values, a string, which could also be applied to that format string.  Without the trailing comma, you don't have a tuple.</p>

<p>It is easier to use f-strings.  There, the format arguments are placed directly in the format codes, instead of at the end where they have to be match up by positions.  Instead of:</p>

<pre><code>            name = 'the %s of %s' % (face, suit)
</code></pre>

<p>you could write:</p>

<pre><code>            name = f'the {face} of {suit}'
</code></pre>

<p>which is slightly more compact, and much easier to tell where the values are going in the resulting string.</p>

<h1>Hand size</h1>

<pre><code>def draw_hand(hand_size):
    player_hand = []
    for draw in range(int(hand_size)):
</code></pre>

<p>Wait ... what is that <code>int(...)</code> doing there?  What are you expecting to pass to <code>draw_hand</code>, if not an integer?  Why would you allow it to be a string?</p>

<p>It should be the caller's responsibility for any string to integer conversions.  This function should only expect an integer for <code>hand_size</code>.</p>

<h1>Improved code</h1>

<p>Using <code>NamedTuple</code> instead of <code>namedtuple</code>, a <code>Rank</code> enumeration, and reducing <code>Card</code> to just a tuple of <code>rank</code> and <code>suit</code>, with <code>str(card)</code> corresponding to the card's name, and <code>card.rank.value</code> for the card's value ... along with some other structural modifications:</p>

<pre><code>from random import shuffle
from enum import Enum
from typing import NamedTuple, List
from itertools import product

Suit = Enum('Suit', 'Clubs, Diamonds, Hearts, Spades')
Rank = Enum('Rank', 'Ace, 2, 3, 4, 5, 6, 7, 8, 9, 10, Jack, Queen, King')

class Card(NamedTuple):
    rank: Rank
    suit: Suit

    def __str__(self):
        return f"{self.rank.name} of {self.suit.name}"

def build_deck() -&gt; List[Card]:
    deck = [Card(rank, suit) for rank, suit in product(Rank, Suit)]
    shuffle(deck)
    return deck

def draw_hand(hand_size: int) -&gt; List[Card]:
    return [deck.pop(0) for _ in range(hand_size)]

def print_hand(hand: List[Card]) -&gt; None:
    print("You drew:", ", ".join(str(card) for card in hand))

if __name__ == '__main__':
    deck = build_deck()
    n = int(input(f"How many cards? There are {len(deck)} cards in the deck: "))
    hand = draw_hand(n)
    print_hand(hand)
</code></pre>

<p>Result:</p>

<blockquote>
  <p>How many cards? There are 52 cards in the deck: 5<br>
  You drew: 2 of Hearts, 9 of Clubs, 5 of Hearts, 7 of Hearts, Queen of Clubs </p>
</blockquote>
    </div>