<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your implementation is excellent! I can hardly find any problems. I was amazed how simple a conforming implementation of <code>any</code> can be. And I wholeheartedly agree with <a href="https://codereview.stackexchange.com/users/157553/papagaga"><strong>@papagaga</strong></a>'s <a href="https://codereview.stackexchange.com/questions/219075/implementation-of-stdany#comment423140_219075">comment</a>.</p>

<p>Here's my two cents. I use the <a href="https://timsong-cpp.github.io/cppwp/n4659/" rel="nofollow noreferrer">N4659</a>, the C++17 final draft, as a reference.</p>

<h2>Non-conformance (priority: high)</h2>

<ol>
<li><p><a href="http://open-std.org/JTC1/SC22/WG21/docs/papers/2018/p0551r3.pdf" rel="nofollow noreferrer">Thou Shalt Not Specialize <code>std::swap</code></a>. Instead, you should overload <code>swap</code> to be found by ADL. See <a href="https://stackoverflow.com/questions/11562/how-to-overload-stdswap#comment-5729583">How to overload <code>std::swap()</code></a> on Stack Overflow. </p>

<pre><code>class any {
public:
  // ...
  friend void swap(any&amp; lhs, any&amp; rhs)
  {
    lhs.swap(rhs);
  }
};
</code></pre></li>
<li><p><a href="https://timsong-cpp.github.io/cppwp/n4659/any.bad_any_cast#2" rel="nofollow noreferrer">[any.bad_any_cast]/2</a> specifies that <code>bad_any_cast</code> should derive from <code>std::bad_cast</code>. Your implementation fails to do this.</p></li>
</ol>

<h2>Other suggestions (priority: low)</h2>

<ol>
<li><p><a href="https://timsong-cpp.github.io/cppwp/n4659/any.class#3" rel="nofollow noreferrer">[any.class]/3</a> says:</p>

<blockquote>
  <p>Implementations should avoid the use of dynamically allocated memory
  for a small contained value. [ <em>Example</em>: where the object constructed
  is holding only an <code>int</code>. â€” <em>end example</em> ]
  Such small-object optimization shall only be applied to types <code>T</code> for 
  which <code>is_nothrow_move_constructible_v&lt;T&gt;</code> is <code>true</code>.</p>
</blockquote>

<p>Clearly, you did not implement this optimization.</p></li>
<li><p>Initially I thought, "where is your destructor?" Then I realized that the synthesized destructor is equivalent to <code>reset()</code>. I recommend you explicitly default this to reduce confusion since you implemented the rest of the Big Five.</p>

<pre><code>~any() = default;
</code></pre></li>
<li><p>The following <code>static_assert</code> on line 40 is unnecessary:</p>

<pre><code>static_assert(std::is_copy_constructible_v&lt;std::decay_t&lt;ValueType&gt;&gt;, "program is ill-formed");
</code></pre>

<p>because this constructor does not participate in overload resolution unless <code>std::is_copy_constructible_v&lt;std::decay_t&lt;ValueType&gt;&gt;</code>.</p></li>
</ol>
    </div>