<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You're right to suspect the <code>data++</code>, <code>data--</code> lines, but I'm not sure "leaking memory" is the worst of your problems.  If you pass one of these "offset from the original allocation" addresses into <code>realloc</code> or <code>free</code>, for example, you're likely to get crashes. The way it usually works under the hood is that at an address <em>just before</em> the buffer, <code>malloc</code> and friends sneak in things like the allocation size, so it can maintain its own data structures ahead of "your" buffer.  (It's not guaranteed to work that way, but this is most often the case.)  The important takeaway is that <em>if you call <code>malloc</code>, save the original pointer so that you have something to pass to <code>free</code></em>.</p>

<p>For that particular issue I would recommend one of the following:</p>

<ul>
<li><p>Option A: Store the original allocation (what was returned from <code>malloc</code>) in your struct alongside any pointers derived from it (<code>data</code>).</p></li>
<li><p>Option B: Instead of doing pointer arithmetic on <code>data</code>, store the current index in the struct as an integer, and access with <code>p-&gt;data[p-&gt;idx]</code>.  Thinking about it some more I think this is the cleaner approach.  For example you wouldn't need to re-calculate the offset again after a <code>realloc</code>.</p></li>
</ul>

<p>Which brings me to the next point.  I don't see any calls to <code>free</code>.  For a structure like this I think it's good practice to have a single alloc function (which is good, you already have that) and a single free function.  So let's write the latter:</p>

<pre><code>void bi_free(bi *b)
{
   if (b)
   {
      free(b-&gt;data);
      free(b);
   }
}
</code></pre>

<p>While on the topic of your alloc function, it'd be a good idea to initialize the struct.</p>

<pre><code>bi *bi_new() {
    bi *a = malloc(sizeof(bi));
    if (a)
    {
       a-&gt;data = NULL;
       a-&gt;size = 0;
    }
    return a;
}
</code></pre>

<p>Note that <code>malloc</code> can fail, so we don't initialize anything in that case.  (Callers of <code>bi_new()</code> should do the same check.)</p>

<p>Actually your allocation also highlights something:</p>

<pre><code>    bi *a = malloc(sizeof(bi));
</code></pre>

<p>See the part where you type "<code>bi</code>" twice?  Let's say you wanted to change the type of <code>a</code> later on to some other struct.  Now there's two places you have to update it.  I would much prefer:</p>

<pre><code>    bi *a = malloc(sizeof(*a));
</code></pre>

<p>On the topic of heap allocations...  It seems like every <code>bi</code> operation takes 2 <code>bi</code>s and does a new allocation for a return value.  This is a bit subjective, but that seems tedious.  What about an interface which takes two operands, where one is also a destination?  (Like many assembly languages..)  Or perhaps 2 source operands and 1 destination.  (Like RISC.)  Each operation could see if the destination is big enough and possibly call <code>realloc</code> to grow the buffer.   But the caller would decide to free the operands, and you'd probably get plenty of buffer re-use.</p>
    </div>