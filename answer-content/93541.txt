<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You code looks like it works just fine, but only because you have a single consumer thread. If you have multiple consumers, then you have a race-condition in your <code>takeMessage</code> method (a different thread may empty the queue after you call <code>hasNext()</code> but before you call <code>next()</code> causing an iteration exception....).</p>

<p>The whole iterator method also feels... clunky, and is a result of the basic Set usage.</p>

<p>I can't help but think that, in your situation, the use of the ConcurrentMap backing the set, is overkill. I know that HashSets have a backing Map as well, but that's different.</p>

<p>So, having thought some more about it as well, I also have to question the need to de-duplicate the producer messages as well in the Set... are you sure you need to?</p>

<p>Also, since you have the system you do, are you sure the queue will ever be big enough to worry about performance of the Set?</p>

<p>I can't help but feel you should go one of two ways:</p>

<ol>
<li>Just use <a href="http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedTransferQueue.html" rel="nofollow noreferrer">a LinkedTransferQueue</a> and deal with duplicates elsewhere (use the add and poll methods respectively).</li>
<li>Just use a List with a simple <code>contains()</code> and basic synchronization.</li>
</ol>

<p>Some other notes....</p>

<ol>
<li>Why do you have a constructor that takes an initial size, but then does nothing?</li>
</ol>

<p>Here's a simple synchronized version:</p>

<pre><code>public class MessageClassHolder&lt;T&gt; {

    private final LinkedList&lt;T&gt; messages;

    public MessageClassHolder() {
        messages = new LinkedList&lt;&gt;();
    }

    /**
     * @param message to be inserted
     * @return if message already present returns false
     */
    public boolean insertMessage(T message) {
        synchronized(messages) {
            if (messages.contains(message)) {
                return false;
            }
            return messages.add(message);
        }
    }

    /**
     * @return returns the optional message and removes it
     */
    public Optional&lt;T&gt; takeMessage() {
        synchronized(messages) {
            return messages.isEmpty() ? Optional.empty() : Optional.of(messages.removeFirst());
        }
    }

    /**
     * Clear the message set
     */
    public void clear() {
        synchronized(messages) {
            messages.clear();
        }
    }
}
</code></pre>
    </div>