<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Welcome to codereview. Here are my suggestions:</p>
<h3>Functional decomposition and Naming</h3>
<p>The trickiest part of programming is to decouple your complex problem into smaller easier (sub)problems. It is easier to tackle small and focused problems than one large and vague. So, my first suggestion would be to try to find small and independent pieces of functionalities.</p>
<p>In your case here is one way to decompose:</p>
<ul>
<li>Ask for a movie and store it</li>
<li>Ask for continuation</li>
<li>Print out the already gathered movies</li>
</ul>
<p>You can directly map these to functions:</p>
<pre><code>void EnterANewMovieAndStoreIt()
bool WishToContinue()
void PrintOutMovies()
</code></pre>
<p>Then you can compose them like this:</p>
<blockquote>
<p><em>Ask</em> for a movie and store it <strong>then</strong><br>
<em>Print</em> out the already gathered movies <strong>until</strong><br>
the consumer <em>Answers</em> with yes for continuation<br>
<strong>when</strong> (s)he <em>Answers</em> with no then <em>Print</em> out already gathered movies</p>
</blockquote>
<p>With that in hand your <code>Main</code> function will look like this:</p>
<pre><code>static void Main(string[] args)
{
    do
    {
       EnterANewMovieAndStoreIt();

       PrintOutMovies();

    } while (WishToContinue());

    PrintOutMovies();
}
</code></pre>
<h3>Store and Retrieve functionalities</h3>
<p>Because we have separated storage and retrieval functionalities that's why they can be really small and concise functions:</p>
<pre><code>private static void EnterANewMovieAndStoreIt()
{
    Console.WriteLine();
    Console.WriteLine("Please enter a movie you want to see but have not seen it yet.");
    var movieName = Console.ReadLine();
    ToBeWatchedMovies.Add(movieName);
}

private static void PrintOutMovies()
{
    Console.WriteLine();
    Console.WriteLine("Your haven't seen but to be watched movies:");
    foreach (var movie in ToBeWatchedMovies)
        Console.WriteLine(movie);
}
</code></pre>
<p>As you can see they rely on a shared resource called <code>ToBeWatchedMovies</code>. It is defined on a class level like this: <code>static readonly List&lt;string&gt; ToBeWatchedMovies = new List&lt;string&gt;();</code></p>
<h3>Error handling</h3>
<p>Your current implementation does not handle that case when the user enters something different then Y or N. It is a good practice to assume that a <code>userInput</code> can be anything and handle that accordingly. In this example we can easily ask them nicely to try to provide the answer again.</p>
<p>So, the <code>WishToContinue</code> would look like this:</p>
<pre><code>private static bool WishToContinue()
{
    while(true)
    {
        Console.WriteLine();
        Console.WriteLine("Do you want to enter another movie? Y/N?");
        var userInput = Console.ReadLine();

        if (string.Equals(userInput, AnswerYes, StringComparison.OrdinalIgnoreCase))
            return true;

        if (string.Equals(userInput, AnswerNo, StringComparison.OrdinalIgnoreCase))
            return false;

        Console.WriteLine($"Please provide either '{AnswerYes}' or '{AnswerNo}' ");
    }
}
</code></pre>
<p>Obviously this code could be further optimized but my main point here is that you should try to handle the wrong inputs as well.</p>
<hr>
<p>Let's put everything together:</p>
<pre><code>class Program
{
    static readonly List&lt;string&gt; ToBeWatchedMovies = new List&lt;string&gt;();
    const string AnswerYes = "y", AnswerNo = "n";
    static void Main(string[] args)
    {
        do
        {
           EnterANewMovieAndStoreIt();

           PrintOutMovies();

        } while (WishToContinue());

        PrintOutMovies();
    }

    private static void EnterANewMovieAndStoreIt()
    {
        Console.WriteLine();
        Console.WriteLine("Please enter a movie you want to see but have not seen it yet.");
        var movieName = Console.ReadLine();
        ToBeWatchedMovies.Add(movieName);
    }

    private static void PrintOutMovies()
    {
        Console.WriteLine();
        Console.WriteLine("Your movies in your list are:");
        foreach (var movie in ToBeWatchedMovies)
            Console.WriteLine(movie);
    }

    private static bool WishToContinue()
    {
        while(true)
        {
            Console.WriteLine();
            Console.WriteLine("Do you want to enter another movie? Y/N?");
            var userInput = Console.ReadLine();

            if (string.Equals(userInput, AnswerYes, StringComparison.OrdinalIgnoreCase))
                return true;

            if (string.Equals(userInput, AnswerNo, StringComparison.OrdinalIgnoreCase))
                return false;

            Console.WriteLine($"Please provide either '{AnswerYes}' or '{AnswerNo}' ");
        }
    }
}
</code></pre>
<p>I hope this helped you a bit.</p>
    </div>