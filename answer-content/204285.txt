<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>pub fn hex_to_base64(hex: &amp;str) -&gt; String {
    encode(&amp;hex_to_bytes(hex))
</code></pre>

<p>I would not <code>use self::base64::encode</code> and instead refer to <code>base64::encode</code> here so that it is clearer what is being encoded.</p>

<pre><code>}

pub fn hex_to_bytes(hex: &amp;str) -&gt; Vec&lt;u8&gt; {
    hex.chars()
        .collect::&lt;Vec&lt;_&gt;&gt;() //convert to slice-able
</code></pre>

<p>Given that you are doing hex, which is all in the ASCII range, you may want to use <code>as_bytes()</code> which will give you a slice of bytes without copying the whole string into a new <code>Vec</code>.</p>

<pre><code>        .chunks(2)           //each char is one nibble
</code></pre>

<p>What happens if the string length isn't a multiple of two?</p>

<pre><code>        .map(|byte| byte.iter().collect::&lt;String&gt;())
</code></pre>

<p><code>byte</code> isn't correct here as it is a slice of <code>char</code>s. Further, if you don't use <code>chars()</code> as I suggest as above, you can use <code>std::str::from_utf8</code> to get a <code>&amp;str</code> without allocating a new <code>String</code>.</p>

<pre><code>        .map(|byte| u8::from_str_radix(&amp;byte[..], 16).unwrap())
</code></pre>

<p><code>byte</code> really isn't correct here as you have a <code>String</code>.  Additionally, there is no need to take a slice.</p>

<pre><code>        .collect()
}
</code></pre>
    </div>