<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Let's start by addressing your 2 main questions:</p>

<h2>1. Visibility (exporting) of functions</h2>

<p>Yes, there's a very easy way of doing this, by using receiver functions (methods), and interfaces. Golang interfaces are incredibly powerful if you understand where they actually differ from <em>"traditional"</em> languages with a full-blown OOP model. you could have a <code>directory</code> type, and expose an interface to the service, which only declares the functions you want to use. Suppose you want your service to access <code>GetUsers</code>, but not a <code>FilterByX</code>, then just pass this <code>directory</code> type in as an interface type limiting how you can use it:</p>

<pre><code>// in service
type Directory interface {
    GetUsers() []User
}

type service struct {
    dir Directory // interface type
}

func New(dir Directory) *service {
    return &amp;service{
        dir: dir,
    }
}
</code></pre>

<p>The interface is declared in the package that uses it, not in the package implementing said interface. This makes unit-testing a lot easier. There's quite a few articles about this around. It's a bit odd at first, if you're used to OO, but it makes sense quite quickly. Don't try to make go look like C++, C#, or Java... it's its own thing, and though not perfect, it's got a lot of good things going for it.</p>

<p>As for the <code>initUsers</code>: that function is completely pointless. You could move the entire body of that function into your <code>init</code> function from the get-go. But why stop there? You can simply initialise your variable straight up, rather than creating 2 function calls to do the same thing:</p>

<pre><code>var users = []User{
    {
        ID:         "1",
        Name:       "John",
        Country:    "UK",
        TotalScore: 500,
    },
    {
        ID:         "2",
        Name:       "Frank",
        Country:    "ES",
        TotalScore: 1500,
    },
    {
        ID:         "3",
        Name:       "Bob",
        Country:    "UK",
        TotalScore: 2000,
    },
    {
        ID:         "4",
        Name:       "Anna",
        Country:    "FR",
        TotalScore: 3000,
    },
}
</code></pre>

<p>That's it, all done.</p>

<h2>2. Marshalling unexported fields.</h2>

<p>Yes, this is possible, but I'd strongly advise against it. However, here's a couple of ways to do it. In both cases, we're relying on the fact that golang supports a JSON Marshaller and Unmarshaller interface out of the box.</p>

<pre><code>type User struct {
    id      string
    name    string
    country string
    score   int
}

// manually creating a map
func (u User) MarshalJSON() ([]byte, error) {
    data := map[string]interface{}{
        "id":      u.id,
        "name":    u.name,
        "country": u.country,
        "score":   u.score,
    }
    return json.Marshal(data)
}

// now with some pointer magic... mimics the omitempty tag
func (u User) MarshalJSON() ([]byte, error) {
    data := map[string]interface{}{
        "id":      &amp;u.id,
        "name":    &amp;u.name,
        "country": &amp;u.country,
        "score":   &amp;u.score,
    }
    return json.Marshal(data)
}
</code></pre>

<p>Now for unmarshalling:</p>

<pre><code>// note a pointer receiver is required here, we're changing the receiver state
func (u *User) UnmarshalJSON(v []byte) error {
    data := map[string]interface{}{} // empty map
    if err := json.Unmarshal(v, &amp;data); err != nil {
        return err
    }
    if id, ok := data["id"]; ok {
        // technically we need to check the type assert, I'll do it once:
        strId, ok := id.(string)
        if !ok {
            return errors.New("id value is not a string!")
        }
        u.id = strId
    }
    if name, ok := data["name"]; ok {
        u.name = name.(string)
    }
    if country, ok := data["country"]; ok {
        u.country = country.(string)
    }
    if score, ok := data["score"]; ok {
        u.score = score.(int)
    }
    return nil
}
</code></pre>

<p>As you can probably see now, each field you add will add more code that needs to be written, changing the names of fields is a right PITA... it's better to just not bother IMO.</p>

<p>You <em>could</em> use the pointer trick from the marshaller here to avoid the type assertions, though:</p>

<pre><code>func (u *User) UnmarshalJSON(v []byte) error {
    data := map[string]interface{}{
        "id":      &amp;u.id,
        "name":    &amp;u.name,
        "country": &amp;u.country,
        "score":   &amp;u.score,
    }
    // unmarshals into map[string]&lt;pointer to fields on struct&gt;
    return json.Unmarshal(v, &amp;data)
}
</code></pre>

<p>Still, this doesn't look nice to me. I'd just stick with exported fields + json tags. If you really don't want people to access fields in certain places, just use interfaces as explained above.</p>

<hr>

<p>Something you really ought not to do, is your over-use of package aliases. You may, or may not have noticed that I've always used the <code>User</code> type, without a package name. You've got aliases like:</p>

<pre><code>user "liveops-tool/user/model"
// and the even worse
userModel "liveops-tool/user/model"
</code></pre>

<p>This is what sometimes is referred to as stuttering names. Read this aloud and ask yourself whether your package name is giving the user of your code any clearer understanding of what the <code>User</code> type represents:</p>

<pre><code>u := user.User{} // u is an instance of User from the user package
</code></pre>

<p>What's in the <code>user</code> package? What is this <code>User</code>? I don't know. I'm just annoyed at having to type <code>user</code> twice.</p>

<pre><code>u := userModel.User{} // u us a user from the userModel package
</code></pre>

<p>OK, now I know <code>User</code> is probably some kind of data structure. Good, but did I really need to know that I'm getting a <code>User</code> form the <code>userModel</code> package? I'm still annoyed at having to type <code>user</code> twice. The file itself is in the directory called <code>model</code> (perhaps <code>models</code> would be better). That's the bit of information that I want, so why not just:</p>

<pre><code>import (
    "liveops-tool/user/model"
)

func foo() {
    u := model.User{} // u is a user model
}
</code></pre>

<p>That's a lot better, isn't it? You may want to have a look at the <a href="https://github.com/golang/go/wiki/CodeReviewComments" rel="nofollow noreferrer">golang code review comments page</a>. There's a lot of stuff in there that makes your code nicer. It's mainly sensible stuff: keep package aliases to a minimum, keep package names short, but communicative. Avoid name stutter, etc...</p>

<p>A particular bug-bear of mine is when people have a package like <code>handler</code>, and have a <code>New</code> function in there like this:</p>

<pre><code>package handler

func NewHandler() (*h, error) {
    return &amp;h{}, nil
}
</code></pre>

<p>Forcing me to write <code>handler.NewHandler()</code>. There's a reason why people find Java overly verbose (<code>SomeFooBarImpl foobar = new SomeFooBarImpl();</code>). What else do you expect <code>handler.New()</code> to return, other than a new handler?</p>

<p>/rant...</p>

<p>Might revisit this one later on, I'm heading home for the day now :P</p>
    </div>