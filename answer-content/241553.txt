<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The Sardinas-Patterson algorithm described in wikipedia as you already said is based on the use of sets for codewords and there is an explanation for every set operation. Consequently I will use the java <code>Set</code> class for every operation involved. I start from the first defined operator:</p>

<pre><code>In general, for two sets of strings D and N, the (left) quotient is defined as the residual words obtained from D by removing some prefix in N.
</code></pre>

<p><a href="https://i.stack.imgur.com/s9miU.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/s9miU.png" alt="inverseNMulD"></a></p>

<p>This can be implemented with a function I called <code>inverseNMulD</code> below described:</p>

<pre><code>private static Set&lt;String&gt; inverseNMulD(Set&lt;String&gt; n, Set&lt;String&gt; d) {
    Set&lt;String&gt; set = new HashSet&lt;String&gt;();
    for (String s1 : d) {
        for (String prefix : n) {
            if (s1.startsWith(prefix)) {
                set.add(s1.substring(prefix.length()));
            }
        }
    }
    return set; 
}
</code></pre>

<p>After you will have to define a element S succession where S1 is defined in this way:</p>

<p><a href="https://i.stack.imgur.com/xFjYg.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/xFjYg.png" alt="Initial set"></a></p>

<p>This can be expressed with a function I called <code>firstSet</code> below described:</p>

<pre><code>private static Set&lt;String&gt; firstSet(Set&lt;String&gt; c) {
    Set&lt;String&gt; set = inverseNMulD(c, c);
    set.remove(""); &lt;-- I'm removing the empty string
    return set;
}
</code></pre>

<p>After you have will to define how to calculate the i+1th element of your succession starting from the ith element: </p>

<p><a href="https://i.stack.imgur.com/OSHot.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/OSHot.png" alt="Union"></a></p>

<p>This can be expressed with a function I called <code>successiveSet</code> below described:</p>

<pre><code>private static Set&lt;String&gt; successiveSet(Set&lt;String&gt; c, Set&lt;String&gt; s) {
    Set&lt;String&gt; set = inverseNMulD(c, s);
    set.addAll(inverseNMulD(s, c));
    return set;
}
</code></pre>

<p>After I defined a helper function to check if the intersection of two sets is empty:</p>

<pre><code>private boolean isEmptyIntersection(Set&lt;String&gt; set, Set&lt;String&gt; codewordsSet) {
    Set&lt;String&gt; intersection = new HashSet&lt;String&gt;(set);
    intersection.retainAll(codewordsSet);
    return intersection.isEmpty();
}
</code></pre>

<p>Now the explanation of the boolean method <code>sardinasPatterson</code> to check whether a given variable-length code is uniquely decodable. The algorithm computes the sets Si in increasing order of i. As soon as one of the Si contains a word from C or the empty word, then the algorithm terminates and answers that the given code is not uniquely decodable. Otherwise, once a set Si equals a previously encountered set Sj with j &lt; i, then the algorithm would enter in principle an endless loop. Instead of continuing endlessly, it answers that the given code is uniquely decodable. </p>

<p>This can be implemented with the <code>sardinasPatterson</code> function below described:</p>

<pre><code>public boolean sardinasPatterson(String[] codewords) {
    Set&lt;String&gt; codewordsSet = Arrays.stream(codewords).collect(Collectors.toSet());
    if (codewordsSet.size() != codewords.length) { return false; }
    Set&lt;String&gt; currentSet = firstSet(codewordsSet);
    List&lt;Set&lt;String&gt;&gt; list = new ArrayList&lt;Set&lt;String&gt;&gt;();
    list.add(currentSet);
    while (!currentSet.contains("") &amp;&amp; isEmptyIntersection(currentSet, codewordsSet)) {
        currentSet = successiveSet(codewordsSet, currentSet);
        //one set previously found is equal to current set : success!
        if (list.contains(currentSet)) { return true; } 
        list.add(currentSet);
    }
    return false; //&lt;-- failure: the code is not uniquely decodable. 
}
</code></pre>

<p>Below the code of the class:</p>

<pre><code>public class SardinasPatterson {

    private static Set&lt;String&gt; inverseNMulD(Set&lt;String&gt; n, Set&lt;String&gt; d) {
        Set&lt;String&gt; set = new HashSet&lt;String&gt;();
        for (String s1 : d) {
            for (String prefix : n) {
                if (s1.startsWith(prefix)) {
                    set.add(s1.substring(prefix.length()));
                }
            }
        }
        return set; 
    }

    private static Set&lt;String&gt; firstSet(Set&lt;String&gt; c) {
        Set&lt;String&gt; set = inverseNMulD(c, c);
        set.remove("");
        return set;
    }

    private static Set&lt;String&gt; successiveSet(Set&lt;String&gt; c, Set&lt;String&gt; s) {
        Set&lt;String&gt; set = inverseNMulD(c, s);
        set.addAll(inverseNMulD(s, c));
        return set;
    }

    private boolean isEmptyIntersection(Set&lt;String&gt; set, Set&lt;String&gt; codewordsSet) {
        Set&lt;String&gt; intersection = new HashSet&lt;String&gt;(set);
        intersection.retainAll(codewordsSet);
        return intersection.isEmpty();
    }

    public boolean sardinasPatterson(String[] codewords) {
        Set&lt;String&gt; codewordsSet = Arrays.stream(codewords).collect(Collectors.toSet());
        if (codewordsSet.size() != codewords.length) { return false; }
        Set&lt;String&gt; currentSet = firstSet(codewordsSet);
        List&lt;Set&lt;String&gt;&gt; list = new ArrayList&lt;Set&lt;String&gt;&gt;();
        list.add(currentSet);
        while (!currentSet.contains("") &amp;&amp; isEmptyIntersection(currentSet, codewordsSet)) {
            currentSet = successiveSet(codewordsSet, currentSet);
            if (list.contains(currentSet)) { return true; }
            list.add(currentSet);
        }
        return false;
    }
}

</code></pre>

<p>As you can see at a first view code seems more complicated than your's but with use of <code>Set</code> all the controls about strings and their unicity are automatically solved and it is more strictly tied to the documentation of the algorithm.</p>
    </div>