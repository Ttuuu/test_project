<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code looks <em>correct</em> to me, it does produce prime numbers
in the given range. </p>

<p><a href="http://pep8online.com" rel="noreferrer">PEP8 Online</a> reports some code style violations
with respect to whitespace and line length, but it is not too bad.</p>

<p><strong>But:</strong> This is not the <a href="https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes" rel="noreferrer">Sieve of Eratosthenes</a>.
The Sieve of Eratosthenes keeps a (single) list of all candidate 
numbers, and computes <em>multiples</em>
of each found prime to mark subsequent composite numbers in the list.
Your algorithm computes the <em>remainder</em> of all remaining candidates instead, and creates new lists in each step.</p>

<p>As a simple benchmark I ran</p>

<pre><code>print(sum(p for p in get_primes(100000)))
</code></pre>

<p>with your code, this takes approximately 5 seconds on my MacBook.</p>

<p>It can be improved slightly by filtering the list only once in
each step and not twice:</p>

<pre><code>def get_primes(max_int):
    numbers = range(2, max_int)
    while len(numbers) &gt; 0:
        yield numbers[0]
        numbers = [num for num in numbers if num % numbers[0] != 0]
</code></pre>

<p>This reduces the time to 4.6 seconds.</p>

<p>But any “real” Eratosthenes sieve is much faster. As an example,
with <a href="https://rosettacode.org/wiki/Sieve_of_Eratosthenes#Using_array_lookup" rel="noreferrer">this one</a>
from Rosetta code</p>

<pre><code>def primes_upto(limit):
    is_prime = [False] * 2 + [True] * (limit - 1) 
    for n in range(int(limit**0.5 + 1.5)): # stop at ``sqrt(limit)``
        if is_prime[n]:
            for i in range(n*n, limit+1, n):
                is_prime[i] = False
    return [i for i, prime in enumerate(is_prime) if prime]
</code></pre>

<p>the above benchmark runs in 0.08 seconds.</p>
    </div>