<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Before even trying to review this by nature incredible complex code I would comment on your {}-religion, code wrap, and vertical spacing.</p>

<p>It is incredible personal what works best for you, me and others. Some of these comments might seem contradictory to each other, but some sacrifices might be made to increase code readability.</p>

<p>The following is all my personal preferences  </p>

<p>First <a href="http://en.wikipedia.org/wiki/Indent_style" rel="nofollow">{}-religion</a>, '{}' should support the structure of the program and make it easy through visual inspection of the code easier.</p>

<pre><code>template&lt;JsonSerializeType&gt;
struct JsonSerializeBrace
{
    static char braces[];
};
</code></pre>

<p>The '{' simply doesn't provide more information, the indention already tells you the next line is dependent on the previous.</p>

<pre><code>template&lt;JsonSerializeType&gt;
struct JsonSerializeBrace {
    static char braces[];
};
</code></pre>

<p>This provides exactly the same visual information namely that braces is part of the struct.<br>
The additional benefit of this is that it avoids some vertical scrolling.  </p>

<p>This block hides from a quick visual inspection that there is a control dependency</p>

<pre><code>if (!item.first)
{   stream &lt;&lt; ',';
}
</code></pre>

<p>If you instead write</p>

<pre><code>if (!item.first) {   
     stream &lt;&lt; ',';
}
</code></pre>

<p>or</p>

<pre><code>if (!item.first)
    stream &lt;&lt; ',';
</code></pre>

<p>followed by a blank line, the control flow is more obvious.</p>

<hr>

<p>Next the vertical spacing, like in texts and papers the spacings are there to make it easier on the eye and improve visual search.  </p>

<p>This code looks like a wall of text</p>

<pre><code>template&lt;typename T&gt;
struct MemberPrinter&lt;T, T&gt;
{
    // A normal object just prints itself.
    void operator()(std::ostream&amp; stream, T const&amp; source)
    {
        stream &lt;&lt; source;
    }
};
template&lt;typename T&gt;
struct MemberPrinter&lt;T, void&gt;
{
    void operator()(std::ostream&amp; stream, T const&amp; source)
    {}
};
</code></pre>

<p>instead use a vertical spacing between the structs, functions or other distinct entities.</p>

<pre><code>template&lt;typename T&gt;
struct MemberPrinter&lt;T, T&gt; {
    // A normal object just prints itself.
    void operator()(std::ostream&amp; stream, T const&amp; source) {
        stream &lt;&lt; source;
    }
};

template&lt;typename T&gt;
struct MemberPrinter&lt;T, void&gt; {
    void operator()(std::ostream&amp; stream, T const&amp; source) {
    }
};
</code></pre>

<p>Now we can easily see that there 2 distinct structs, sacrificing 1 of the saved lines from the '{' move.</p>

<pre><code> * THORSANVIL_SERIALIZE_JsonGenericMapAttributeAccess:  A generic accessor can be used to generate multiple items.
 *                                                      When de-serializing the Json can be applied to multiple elements.
 *                                                      Used manly for container classes like std::map
</code></pre>

<p>This might be more readable if there is a break after the ':'</p>

<pre><code> * THORSANVIL_SERIALIZE_JsonGenericMapAttributeAccess:  
 *     A generic accessor can be used to generate multiple items.
 *     When de-serializing the Json can be applied to multiple elements.
 *     Used manly for container classes like std::map
</code></pre>

<hr>

<p>Code wrapping is also a problem when I try to read others code, what does this say? there is actually 2 different problems here, one is the long line length, the 2nd is what does this long line actually do.</p>

<pre><code>boost::mpl::for_each&lt;typename JsonSerializeTraits&lt;T&gt;::SerializeInfo&gt;(MPLForEachActivateItem&lt;T, ThorsAnvil::Json::ScannerSax&gt;(scanner, destination));
</code></pre>

<p>Any horizontal scrolling takes extra time, more than vertical usually. Breaking the line at either '(),=' in order as they bind less strongly. '//' comments after the code might also have to be moved, usually by inserting a new line before and use same indention as the line from which it is moved.</p>

<pre><code>    boost::mpl::for_each&lt;typename JsonSerializeTraits&lt;T&gt;::SerializeInfo&gt;(
        MPLForEachActivateItem&lt;T, ThorsAnvil::Json::ScannerSax&gt;(
            scanner, destination
        ) // optionally combine the 2 ')'
    ); 
</code></pre>

<p>Ah, it is actually 2 function calls, heavily templatized, so this code</p>

<pre><code>template&lt;typename T,
         typename MemberToSerialize =
             typename JsonSerializeTraits&lt;T&gt;::SerializeInfo&gt;
struct MemberScanner {
    void operator()(ThorsAnvil::Json::ScannerSax&amp; scanner, T&amp; destination) {
        boost::mpl::for_each&lt;typename JsonSerializeTraits&lt;T&gt;::SerializeInfo&gt;(
            MPLForEachActivateItem&lt;T, ThorsAnvil::Json::ScannerSax&gt;(
                scanner, destination
        ));
    }
};
</code></pre>

<p>has a break at the last ',' for the control, ie. the template arguments, before eol, then at the '=' in the template argument.<br>
Now we can see that </p>

<pre><code>typename MemberToSerialize = 
             typename JsonSerializeTraits&lt;T&gt;::SerializeInfo&gt;
</code></pre>

<p>might be what you meant for the template argument in the 'for_each', which I couldn't before. If this is not just for SFINAE, then 'MemberToSerialize' should be used.</p>

<pre><code>template&lt;typename T,
         typename MemberToSerialize =
             typename JsonSerializeTraits&lt;T&gt;::SerializeInfo&gt;
struct MemberScanner {
    void operator()(ThorsAnvil::Json::ScannerSax&amp; scanner, T&amp; destination) {
        boost::mpl::for_each&lt;MemberToSerialize&gt;(
            MPLForEachActivateItem&lt;T, ThorsAnvil::Json::ScannerSax&gt;(
                scanner, destination
        ));
    }
};
</code></pre>

<p>If this is what you actually meant (and not just me misunderstanding what your trying to do) making it a little easier to read.  </p>

<p>This leaves me with one eye-sore for this, namely the long namespace+typenames, using 'using', typedef or alias can help here.</p>

<pre><code>template&lt;typename T,
         typename MemberToSerialize =
             typename JsonSerializeTraits&lt;T&gt;::SerializeInfo&gt;
struct MemberScanner {
    // only pollute this scope, alternatively use typedef/alias
    using ThorsAnvil::Json::ScannerSax;

    void operator()(ScannerSax&amp; scanner, T&amp; destination) {
        boost::mpl::for_each&lt;MemberToSerialize&gt;(
            MPLForEachActivateItem&lt;T, ScannerSax&gt;(scanner, destination)
        );
    }
};
</code></pre>

<p>2 uses is really on the low side but as they are so long it might be considered.</p>
    </div>