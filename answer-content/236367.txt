<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I would expect a function that has a "predicate" name (<code>is_x()</code>) to return a boolean value rather than a string.  The boolean is much more useful to the caller.</p>
<p>We should add a main-guard to top-level code, so the file could be useful as a module.</p>
<p>Consider adding some unit tests.  A convenient way to do this is using the <a href="https://docs.python.org/3.8/library/doctest.html" rel="nofollow noreferrer"><code>doctest</code></a> module, which finds tests in the function's docstring; any line beginning with <code>&gt;&gt;&gt;</code> is a test, and is immediately followed by the expected result.</p>
<p>Building on <a href="https://codereview.stackexchange.com/a/236366/75307">the version shown by C.Nivs</a>, that would give this improved version:</p>
<pre><code>def is_palindrome(x):
    '''
    True if the letters of x are the same when
    reversed, ignoring differences of case.
    &gt;&gt;&gt; is_palindrome('')
    True
    &gt;&gt;&gt; is_palindrome('a')
    True
    &gt;&gt;&gt; is_palindrome('a0')
    False
    &gt;&gt;&gt; is_palindrome('ab')
    False
    &gt;&gt;&gt; is_palindrome('ab a')
    False
    &gt;&gt;&gt; is_palindrome('Aba')
    True
    &gt;&gt;&gt; is_palindrome('Àbà')
    True
    '''
    x = x.lower()
    # Alternative (letters only):
    #     x = ''.join(filter(str.isalpha, x.lower()))
    # Alternative (letters and digits only):
    #     x = ''.join(filter(str.isalnum x.lower()))
    return x[::-1] == x

if __name__ == '__main__':
    import sys
    for string in sys.argv[1:]:
        # check each command-line argument
        message = 'is a palindrome' if is_palindrome(string) else 'is not a palindrome'
        print(f'{string} {message}')
    else:
        # no arguments, so run self-test
        import doctest
        doctest.testmod()
</code></pre>
<p>It may well make sense to separate the pre-processing from the palindrome checking, so that <code>is_palindrome()</code> simply returns <code>x[::-1] == x</code>, and the caller is responsible for deciding which characters are significant.  We could call it with a specific canonicalisation:</p>
<pre><code>is_palindrome(string.lower())
</code></pre>
<p>More advanced would be to pass a normalisation function and/or a character filter, as optional arguments:</p>
<pre><code>def is_palindrome(s, normalise=None, char_filter=None):
    '''
    True if the letters of x are the same when
    reversed, ignoring differences of case.
    &gt;&gt;&gt; is_palindrome('')
    True
    &gt;&gt;&gt; is_palindrome('a')
    True
    &gt;&gt;&gt; is_palindrome('a0')
    False
    &gt;&gt;&gt; is_palindrome('a0', char_filter=str.isalpha)
    True
    &gt;&gt;&gt; is_palindrome('ab')
    False
    &gt;&gt;&gt; is_palindrome('ab a')
    False
    &gt;&gt;&gt; is_palindrome('Aba')
    False
    &gt;&gt;&gt; is_palindrome('Aba', normalise=str.lower)
    True
    &gt;&gt;&gt; is_palindrome('Àbà', normalise=str.lower)
    True
    '''
    if normalise:
        s = normalise(s)
    if char_filter:
        s = ''.join(filter(char_filter, s))
    return s == ''.join(reversed(s))
</code></pre>
<p>Usage of these optional arguments should be apparent from the extra tests I've added.</p>
<hr>
<h2>Bug</h2>
<p>Whether we use <code>[::-1]</code> or <code>reversed()</code> to reverse the input string, we have a bug when the input contains characters that are formed using combining accents, as demonstrated by these additional tests:</p>
<pre><code>&gt;&gt;&gt; is_palindrome("o̅o") # o+overline, o
False
&gt;&gt;&gt; is_palindrome("o̅o̅") # o+overline, o+overline
True
</code></pre>
<p>Both of these fail, because we reverse the string by treating each Unicode character independently, rather than considering them as (possibly multi-character) letters.  To fix that, we'll need to find or create a combining-character-aware function to reverse a string - I'm not aware of such a thing in the Python standard library.</p>
    </div>