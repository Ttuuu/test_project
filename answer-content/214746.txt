<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'd recommend putting a blank line after your <code>#pragma once</code>, and again after your <code>#include</code>s, just for readability.</p>

<p>Nit on the naming: When I (a speaker of English, which is an adjective-noun language) see <code>StackList</code>, I think "a list of stacks" or possibly "a list implemented in terms of a stack," which in fact is the exact opposite of what you have here. What you have here is a <code>ListStack</code> — a stack implemented in terms of a linked list.</p>

<hr>

<pre><code>StackList() = default;
StackList(StackList &amp; other);
StackList(StackList &amp;&amp; other);
StackList &amp; operator=(StackList &amp; other);
StackList &amp; operator=(StackList &amp;&amp; other);
~StackList() { EmptyList(); }
</code></pre>

<p>First of all, personally I'd recommend defining all these functions in-line right here, rather than making me scroll down to find their definitions later in the same file.</p>

<p>Another naming nit: if a <code>StackList</code> is a List implemented as a Stack, then surely an <code>EmptyList</code> should be a List that's always Empty! As @Chintan pointed out, what you actually have here is traditionally named <code>this-&gt;clear()</code>.  "Empty" is a particularly bad name because it can be read as a verb or as an adjective, and actually C++ uses the adjective reading: <code>vec.empty()</code> asks "Is this vector empty?", not "Please make this vector empty." (This was a large part of the motivation for C++17's <code>[[nodiscard]]</code> attribute.)</p>

<p>The biggest problem here, though, is that you got the copy constructor's signature wrong!</p>

<pre><code>StackList(StackList &amp; other);
StackList(StackList &amp;&amp; other);
StackList &amp; operator=(StackList &amp; other);
StackList &amp; operator=(StackList &amp;&amp; other);
</code></pre>

<p>should read</p>

<pre><code>StackList(const StackList&amp; other);
StackList(StackList&amp;&amp; other) noexcept;
StackList&amp; operator=(const StackList&amp; other);
StackList&amp; operator=(StackList&amp;&amp; other) noexcept;
</code></pre>

<p>The <code>const</code> is very important! Without it, you wouldn't be able to make a copy of a list that you had <a href="https://quuxplusone.github.io/blog/2019/01/03/const-is-a-contract/" rel="nofollow noreferrer">promised never to modify</a>.</p>

<pre><code>void foo(const StackList&amp; lst) {
    auto lst2 = lst;  // this line fails to compile
}
</code></pre>

<hr>

<pre><code>const T&amp; operator[](int count) const; 
T&amp; operator[](int count) { return const_cast&lt;T &amp;&gt;(static_cast&lt;const StackList &amp;&gt;(*this).operator[](count)); };
</code></pre>

<p>Note that it's "un-C++-ish" to provide such a concise spelling for an O(n) operation.
Also, I think it would be more natural to use <code>const_cast</code> rather than <code>static_cast</code> here, since all you're doing (and all you're trying to do) is add a <code>const</code> qualifier.</p>

<hr>

<pre><code>template &lt;typename T&gt;
friend std::ostream &amp; operator&lt;&lt;(std::ostream &amp; os, StackList&lt;T&gt; &amp; stack);
</code></pre>

<p>You should <em>definitely</em> move this operator in-line, so that you don't have to make it a template.
Additionally, what you have here is actually invalid because you're trying to redefine the name <code>T</code>, which already has a meaning — it's the template type parameter to <code>StackList</code>. So what I would write is:</p>

<pre><code>friend std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, const StackList&amp; stack) {
    std::ostream os2(os.rdbuf());
    os2 &lt;&lt; "Stack of " &lt;&lt; typeid(T).name() &lt;&lt; ", size = " &lt;&lt; stack.size() &lt;&lt; std::endl;
    stack.Traverse([&amp;](T&amp; data) {
        os2 &lt;&lt; data &lt;&lt; std::endl;
    });
    return os;
}
</code></pre>

<p>Note that I've made a few more changes; for example, rather than imperatively fiddle with the <code>flags</code> of the given ostream, I'd just create my own ostream. That way, the user couldn't mess up my output:</p>

<pre><code>StackList&lt;int&gt; lst;
lst.push(100);
std::cout &lt;&lt; std::hex &lt;&lt; lst &lt;&lt; std::endl;
</code></pre>

<p>With your code, this prints <code>64</code>; with my code, this prints <code>100</code>.</p>

<p>Also, "<a href="https://accu.org/index.php/journals/2619" rel="nofollow noreferrer">don't use <code>endl</code></a>" applies here.</p>

<hr>

<p>Your code repeatedly uses the identifier <code>lamda</code> [sic] to refer to a variable of type <code>std::function</code>. That's not correct. I actually think you should get rid of all the <code>std::function</code>s in your code and just <em>use</em> lambdas, actually. (That's "lambdas" with a "b".) So for example, you have:</p>

<pre><code>void Traverse(std::function&lt;void(T&amp;)&gt; lamda) const;
void Traverse(std::function&lt;void(T&amp;)&gt; lamda){ (static_cast&lt;const StackList &amp;&gt;(*this).Traverse(lamda)); }

template &lt;typename T&gt;
void StackList&lt;T&gt;::Traverse(std::function&lt;void(T&amp;)&gt; lamda) const
{
    Node * cur = head_;
    while (cur != nullptr)
    {
        lamda(cur-&gt;data);
        cur = cur-&gt;next;
    }
}
</code></pre>

<p>Actually there's a problem even before we get to the lambdas! You seem to have added the non-const overload of <code>Traverse</code> on autopilot. It doesn't do what you want <em>at all</em>. Remove it, and re-add it when you have a need for it.</p>

<p>Speaking of untested code, you should be compiling with <code>-W -Wall</code> and probably <code>-Wextra</code>, and fixing all the bugs that the compiler tells you about. That would catch things like</p>

<pre><code>warning: field 'next' will be initialized after field 'data' [-Wreorder]
    Node(Node * next, const T &amp; data) :next(next), data(data) {};
                                       ^
</code></pre>

<p>Every bug caught by the compiler is a bug you don't have to catch!
And every bug caught by <em>a unit test</em> is a bug you don't have to catch, too. Write some tests for your code (such as <code>Traverse</code>). You'll find plenty of bugs.</p>

<p>Okay, so, here's how I would write <code>Traverse</code>:</p>

<pre><code>template&lt;class F&gt;
void Traverse(const F&amp; visit) {
    for (Node *cur = head_; cur != nullptr; cur = cur-&gt;next) {
        visit(cur-&gt;data);
    }
}
</code></pre>

<p>This is a better API than the <code>std::function</code>-based API you wrote, because with this API, I'm not forcing my caller to wrap their lambda into a <code>std::function</code>. This saves a lot of compile time, and saves a dynamic allocation at runtime, but perhaps most importantly, it allows the caller to pass in <em>non-copyable</em> lambdas such as</p>

<pre><code>StackList&lt;int&gt; lst;
lst.Traverse([ptr = std::make_unique&lt;int&gt;(42)](int&amp; data) {
    data += *ptr;
});
</code></pre>

<hr>

<p>Consider why <code>AddToTail</code> doesn't <code>++size_</code>, and whether perhaps it should.</p>

<hr>

<p>Your copy-assignment operator seems much too complicated. (And is missing a pair of braces around the body of the first <code>if</code>.) I think I'd expect to see something about this long, lines-of-code-wise:</p>

<pre><code>StackList&amp; operator=(const StackList&amp; rhs) {
    if (this != &amp;rhs) {
        Node **src = &amp;rhs.head_;
        Node **dst = &amp;head_;
        while (*src != nullptr &amp;&amp; *dst != nullptr) {
            (*dst)-&gt;data = (*src)-&gt;data;
            src = &amp;(*src)-&gt;next;
            dst = &amp;(*dst)-&gt;next;
        }
        while (*src != nullptr) {
            *dst = new Node(nullptr, (*src)-&gt;data);
            dst = &amp;(*dst)-&gt;next;
            src = &amp;(*src)-&gt;next;
        }
        while (*dst != nullptr) {
            Node *temp = (*dst)-&gt;next;
            delete *dst;
            *dst = temp;
        }
        // updating tail_ is left as an exercise for the reader
    }
    return *this;
}
</code></pre>

<p>You might compare your implementation to <code>std::list</code>, and think about whether it's possible to take that <code>while (*dst != nullptr)</code> loop and factor it out into a member function named <code>erase</code>.</p>
    </div>