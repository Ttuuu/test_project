<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are a number of things you can do to improve your code.</p>
<h2>Use const references where practical</h2>
<p>The parameters passed to the functions can be sped up by passing them as <code>const</code> references instead of by value.  Doing so tells both the compiler and other readers of the code that the passed parameter will not be altered, and allows for additional optimizations by the compiler.</p>
<h2>Use <code>reserve</code> to improve speed</h2>
<p>Since we know that the size of the vector must be at least 33 fields, it makes sense to use <code>reserve</code> to preallocate space.</p>
<h2>Avoid constructing temporary variables</h2>
<p>Rather than creating a <code>std::string</code> temporarily to print the output, an alternative approach would be to create a function that outputs them directly to the output.</p>
<h2>Avoid work if possible</h2>
<p>While it sounds like it might be the life philosophy of <a href="https://en.wikipedia.org/wiki/The_Adventures_of_Tom_Sawyer" rel="noreferrer">Tom Sawyer</a>, it's also a good idea for optimizing software for performance.  For instance, since the code is looking for something specific in the fourth field, if that criterion is not met by the time the fourth field is parsed, there's no reason to continue to parse the line.  One way to convey a value that may or not be there is via <a href="https://en.cppreference.com/w/cpp/utility/optional" rel="noreferrer"><code>std::optional</code></a> which was introduced in C++17.</p>
<h2>Results</h2>
<h3>csv.cpp</h3>
<pre class="lang-cpp prettyprint-override"><code>#include &lt;fstream&gt;
#include &lt;string&gt;
#include &lt;vector&gt;
#include &lt;sstream&gt;
#include &lt;optional&gt;

constexpr std::size_t minfields{33};

std::optional&lt;std::vector&lt;std::string&gt;&gt; splitStr(const std::string&amp; line, const char delimiter = ',')
{
    std::vector&lt;std::string&gt; splitLine;
    splitLine.reserve(minfields);
    std::istringstream ss(line);
    std::string buf;
    unsigned field{0};
    while (std::getline(ss, buf, delimiter)) {
        splitLine.push_back(buf);
        if (field == 3 &amp;&amp; buf[0] != 'E' &amp;&amp; buf[0] != 'T') {
            return std::nullopt;
        }
        ++field;
    }
    if (splitLine.size() &lt; minfields)
        return std::nullopt;
    return splitLine;
}

std::ostream&amp; writeLine(std::ostream&amp; out, const std::vector&lt;std::string&gt;&amp; splitLine)
{
    return out &lt;&lt;  
        splitLine.at(0) &lt;&lt; ',' &lt;&lt;
        splitLine.at(1) &lt;&lt; ',' &lt;&lt;
        splitLine.at(3) &lt;&lt; ',' &lt;&lt;
        splitLine.at(4) &lt;&lt; ',' &lt;&lt;
        splitLine.at(5) &lt;&lt; ',' &lt;&lt;
        splitLine.at(6) &lt;&lt; ',' &lt;&lt;
        splitLine.at(10) &lt;&lt; ',' &lt;&lt;
        splitLine.at(9) &lt;&lt; ',' &lt;&lt;
        splitLine.at(11) &lt;&lt; ',' &lt;&lt;
        splitLine.at(7) &lt;&lt; ',' &lt;&lt;
        splitLine.at(32) &lt;&lt; '\n';
}

void copy_selective(std::istream&amp; in, std::ostream&amp; out) {
    std::string line;
    while(std::getline(in,line))
    {
        auto split = splitStr(line, ';');
        if (split) {
            writeLine(out, split.value());
        }
    }
}

int main(int argc, char* argv[])
{
    if(argc &gt;= 3) {
        std::ifstream inFile(argv[1]);
        std::ofstream outFile(argv[2]);
        copy_selective(inFile, outFile);
    }
}
</code></pre>
<p>I created a file with one million lines, of which 499980, or just under half, were lines meeting the criteria from the original code.  Here are the timings for a million-line file on my machine (Fedora Linux, using GCC 10.1 with <code>-O2</code> optimization):</p>
<p><span class="math-container">$$
\begin{array}{l|c|c}
\text{version} &amp; \text{time (s)} &amp; \text{relative to PHP} \\
\hline
\text{original} &amp; 2.161 &amp; 1.17 \\
\text{akki} &amp; 1.955 &amp; 1.06 \\
\text{akki w/ writeLine} &amp; 1.898 &amp; 1.03 \\
\text{php} &amp; 1.851 &amp; 1.00 \\
\text{Edward w/ printf} &amp; 1.483 &amp; 0.80 \\
\text{Edward} &amp; 1.456 &amp;  0.79 \\
\text{Matthew} &amp; 0.737 &amp; 0.40 \\
\text{Martin York} &amp; 0.683 &amp;  0.37 
\end{array}
$$</span></p>
<p>For these timings, the code labeled <code>akki</code> is <a href="https://ideone.com/5ivw9R" rel="noreferrer">https://ideone.com/5ivw9R</a> , <code>akki w/ writeLine</code> is the same code, but modified to use <code>writeLine</code> shown above, and <code>Edward w/ printf</code> is the code shown here but modified to use <code>fprintf</code>.  In all cases on my machine, the <code>fstream</code> versions are faster than the corresponding <code>fprintf</code> versions.</p>
<h2>Input file</h2>
<p>I created a simple file, with one million total lines.  As mentioned above, only 499980 have the requisite "E" or "T" in the fourth field.  All lines were repetitions of one these four lines:</p>
<pre><code>one;two;three;Efour;five;six;seven;eight;nine;ten;eleven;twelve;thirteen;fourteen;fifteen;sixteen;seventeen;eighteen;nineteen;twenty;twenty-one;twenty-two;twenty-three;twenty-four;twenty-five;twenty-six;twenty-seven;twenty-eight;twenty-nine;thirty;thirty-one;thirty-two;thirty-three;thirty-four
one;two;three;Tfour;five;six;seven;eight;nine;ten;eleven;twelve;thirteen;fourteen;fifteen;sixteen;seventeen;eighteen;nineteen;twenty;twenty-one;twenty-two;twenty-three;twenty-four;twenty-five;twenty-six;twenty-seven;twenty-eight;twenty-nine;thirty;thirty-one;thirty-two;thirty-three;thirty-four
one;two;three;four;five;six;seven;eight;nine;ten;eleven;twelve;thirteen;fourteen;fifteen;sixteen;seventeen;eighteen;nineteen;twenty;twenty-one;twenty-two;twenty-three;twenty-four;twenty-five;twenty-six;twenty-seven;twenty-eight;twenty-nine;thirty;thirty-one;thirty-two;thirty-three;thirty-four
one;two;three;Xfour;five;six;seven;eight;nine;ten;eleven;twelve;thirteen;fourteen;fifteen;sixteen;seventeen;eighteen;nineteen;twenty;twenty-one;twenty-two;twenty-three;twenty-four;twenty-five;twenty-six;twenty-seven;twenty-eight;twenty-nine;thirty;thirty-one;thirty-two;thirty-three;thirty-four
</code></pre>
<h2>Fixed PHP version</h2>
<p>Because I was unable to run the originally posted PHP code (it aborted with an error and produced a 0 length file), I made what I intended to be the minimal possible changes to it to get it to compile and run.  A PHP expert (I am not one) might be able to further improve it, but its performance is quite good without taking much effort.  (Timings above were using PHP 7.4.8 with Zend Engine v3.4.0.)</p>
<pre><code>&lt;?php
$i_fp = fopen("million.in","r");
$o_fp = fopen("sample.out","w") or die("Unable to open outfile");

while(!feof($i_fp))
{
    $line = fgets($i_fp);
    $split = explode(';',$line);
    if(count($split) &gt; 33 &amp;&amp; ($split[3][0] == 'E' || $split[3][0] == 'T')) {
        fwrite($o_fp,join(',',[ $split[0], $split[1], $split[3], $split[4], $split[5], $split[6],
                                $split[10], $split[9],$split[11],$split[7],$split[32]])."\n");
    }
}
fclose($i_fp);
fclose($o_fp);
?&gt;
</code></pre>
    </div>