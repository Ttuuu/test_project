<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code is both buggy and inefficient.</p>

<p>You should never call <a href="https://docs.microsoft.com/en-us/dotnet/api/system.string.substring?view=netframework-4.8" rel="nofollow noreferrer">String.Substring</a> since that method allocates a new string. In a programming language like Go, where a string is implemented as a view to a simple byte array, that would be ok since getting the substring involves only 3 memory operations and no object allocations. But not so in C# or Java.</p>

<p>If <a href="https://docs.microsoft.com/en-us/dotnet/api/system.string.gethashcode?view=netframework-4.8" rel="nofollow noreferrer">String.GetHashCode</a> had a fixed and documented hashing algorithm <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/String.html#hashCode()" rel="nofollow noreferrer">like in Java</a>, I could provide you with a reliable way of finding a counterexample. But since the exact algorithm is not specified, you'd have to try several random strings until you find a counterexample. <a href="https://en.wikipedia.org/wiki/Fuzzing" rel="nofollow noreferrer">Using a fuzzer</a> is a good way of finding this bug:</p>

<ol>
<li>Generate two random strings</li>
<li>Ensure that <code>StrStr(haystack, needle) == haystack.IndexOf(needle)</code></li>
<li>goto 1, until the test fails</li>
</ol>

<p>I don't see any point in allowing <code>null</code> as an argument. Your code should just throw an exception in such a case. And if you allow <code>needle</code> to be <code>null</code>, why don't you allow <code>haystack</code> to be <code>null</code> as well? And where are the unit tests corresponding to these edge cases? Especially for simple utility functions like this one, it's trivial to reach 100% test coverage, therefore you should do that.</p>
    </div>