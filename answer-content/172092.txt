<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>The while loops that might get into an infinite loop condition for some reason.</p>
</blockquote>

<p>Bug: ability to generate negative hash indexes leads to UB, which includes the above concern.</p>

<pre><code>putValueForKey(hashArray, -100, "minus");
</code></pre>

<p>Should <code>key</code> have a negative value, so will <code>hashCode()</code> return a negative value which causes out-of-bounds array access.</p>

<p>Various ways to handle that.  For me I would use an <em>unsigned</em> type like <code>unsigned</code> or <code>size_t</code>.  Also amend calling code.</p>

<pre><code>// int hashCode(int key) {
unsigned hashCode(int key) {
 return (unsigned) key % SIZE;
}
</code></pre>

<hr>

<p>Other idea:</p>

<p>Consider prime values for <code>HASH</code></p>

<p>Certainly <code>hashCode()</code> here is a simple function and not truly meant to hash the <code>key</code> highly uniformly across <code>[0...SIZE)</code>.  Yet remember that if the hash calculation before the final <code>% SIZE</code> is good, finding the remainder with any <code>SIZE</code> will be good too. </p>

<p>On the other hand (OTOH), if the hash calculation before the <code>% SIZE</code> is weak, using a prime for <code>SIZE</code> will likely to make it better.  <a href="https://stackoverflow.com/q/32912894/2410359">Example</a></p>

<pre><code>// #define SIZE 20
#define SIZE 23

unsigned hashCode(int key) {
 return (unsigned) key % SIZE;
}
</code></pre>
    </div>