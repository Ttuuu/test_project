<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Overall, it's pretty good code to learn from.</p>

<h3>Functionality</h3>

<p>I like that you've used the inclusive-exclusive convention for the lower and upper bounds, respectively.  The rationale for that design would be an interesting discussion topic.</p>

<p>I suggest adding a second constructor for convenience:</p>

<pre><code>public Range(int end) {
    this(0, end);
}
</code></pre>

<p>There should probably be getters for <code>start()</code> and <code>end()</code>.  Technically, you should override <code>.equals()</code> and <code>.hashCode()</code> as well, but maybe it's OK to leave them out for simplicity.</p>

<h3>Style</h3>

<p>As @rpg711 <a href="https://codereview.stackexchange.com/questions/48109/simple-example-of-an-iterable-and-an-iterator-in-java#comment84422_48109">noted</a>, putting the <code>@Override</code> annotation everywhere would be good practice.  It would also help students see which methods are mandatory parts of the interface (well, practically all of them).</p>

<p>JavaDoc would be a good habit to teach.  At the least, document the outer class and inner class, and probably their constructors as well.</p>

<p>It would be more <a href="http://google-styleguide.googlecode.com/svn/trunk/javaguide.html#s4.6.2-horizontal-whitespace" rel="noreferrer">conventional</a> to put a space after the <code>if</code>, <code>for</code>, and <code>while</code> keywords.  They look less like function calls that way.</p>

<p>Declaring <code>start</code> and <code>end</code> as <code>final</code> could help emphasize to students that the <code>Range</code> is immutable, and only the <code>RangeIterator</code> changes state.  Perhaps adding <code>final</code> would alleviate some of @rolfl's concerns about the inner class referring to <code>Range.this.start</code> and <code>Range.this.end</code>.</p>

<p>In agreement with @rolfl, I would also personally prefer</p>

<pre><code>    @Override
    public Integer next() {
        if (!this.hasNext()) {
            throw new NoSuchElementException();
        }
        // The post-increment magically takes effect _after_
        // returning.  This is equivalent to
        //
        //     int value = this.cursor++;
        //     return value;
        //
        return this.cursor++;
    }
</code></pre>

<p>â€¦ though I can understand if you choose not to burden the students with that trivia.</p>

<h3>Test case</h3>

<p>It would be useful to illustrate that two <code>RangeIterators</code> keep state independently.  Perhaps this might make a good example?</p>

<pre><code>Range digits = new Range(0, 10);
for (Integer tensDigit : digits) {
    for (Integer onesDigit : digits) {
        System.out.format("%s%s ", tensDigit, onesDigit);
    }
    System.out.println();
}
</code></pre>
    </div>