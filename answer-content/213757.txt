<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I will try to tackle your problem a bit differently.
Your main question is:</p>

<h2>How can I reduce the memory usage of this algorithm?</h2>

<p>Regardless, I would first have a closer look into other path finding algorithms, such as</p>

<ul>
<li><p><a href="https://en.wikipedia.org/wiki/A*_search_algorithm" rel="nofollow noreferrer">A*</a> (or <a href="https://en.wikipedia.org/wiki/Iterative_deepening_A*" rel="nofollow noreferrer">IDA*</a>) with a decent heuristic function</p></li>
<li><p><a href="https://en.wikipedia.org/wiki/Floyd%E2%80%93Warshall_algorithm" rel="nofollow noreferrer">Floyd Warshall Algorithm</a></p></li>
</ul>

<p>Compare the algorithms and evaluate the right one:</p>

<ul>
<li>How long does each algorithm take (Time Complexity)?</li>
<li>How much space do each algorithm use (Space Complexity)?</li>
<li>Does it have to be optimal or is an approximation good enough?</li>
</ul>

<p><strong>Regarding your question, the space complexity is relevant.</strong> For example, if one vertex takes up 1KB and your algorithm uses 100'000'000 vertices, then even if you can <strong>optimize</strong> your vertex down to 0.5KB, it's still bad.</p>

<hr>

<p>Another option is to improve your current Dijkstra implementation:</p>

<ul>
<li>Only keep <strong>a subset of the vertices in the memory</strong> (e.g. the highest promising ones). You can serialize the others on your hard disk (e.g. with <a href="https://developers.google.com/protocol-buffers/" rel="nofollow noreferrer">Protocol Buffers</a>).</li>
<li>Still <strong>minimize your vertex' size</strong> as suggested by others (just because you can)</li>
</ul>
    </div>