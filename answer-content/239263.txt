<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Prime Generation</h1>

<p>As mentioned by <a href="https://codereview.stackexchange.com/users/40480/vnp">vnp</a>, use the <a href="https://en.wikipedia.org/wiki/Sieve_of_Eratosthenese" rel="nofollow noreferrer">Sieve of Eratosthenese</a>.  In that implementation, use a <a href="https://docs.oracle.com/en/java/javase/14/docs/api/java.base/java/util/BitSet.html#%3Cinit%3E(int)" rel="nofollow noreferrer"><code>BitSet(1_000_000)</code></a> for efficient memory usage during your sieve; a sieve for primes up to one million will only take 125 KB of memory.</p>

<p>Keep the sieve around after you've generated your prime numbers, because it makes a very efficient <span class="math-container">\$O(1)\$</span> time complexity <code>isPrime(number)</code> checker:</p>

<pre><code>bool isPrime(int number) {
    return sieve.get(number);
}
</code></pre>

<h1>Prime Generation, Part 2</h1>

<p>How many primes numbers are there (less than one million)?  You don't know, so you've used an <code>ArrayList&lt;Integer&gt;</code> to store them.</p>

<p>But you could know.  It will be <a href="https://docs.oracle.com/en/java/javase/14/docs/api/java.base/java/util/BitSet.html#cardinality()" rel="nofollow noreferrer"><code>sieve.cardinality()</code></a>.  So instead of using a memory wasting, slow-to-access indirect container, you could use:</p>

<pre><code>int[] arrayOfPrimes = new int[sieve.cardinality()];
</code></pre>

<p>which gives you a much smaller memory footprint, and faster access speeds.</p>

<p>Ditto for your <code>cumulativeSums</code>.  You could even make these a <code>long[]</code>, to avoid possible overflows, and still use less memory than <code>ArrayList&lt;Integer&gt;</code> will!</p>

<h1>Longest Sequence</h1>

<p>What is the longest sequence of primes that sum to any value (prime or not) less that one million?  This will be your absolute limit for the length of the sequence.  Any sequence longer than this is pointless to check.</p>

<p>The longest sequence that sums to a value less than one million will, of course, contain the smallest values.   So, it will be:</p>

<pre><code>2 + 3 + 5 + 7 + 11 + 13 + 17 + 19 + 23 + ... + prime[n-1]
</code></pre>

<p>So just start adding the prime numbers until it exceeds one million; that number of terms is the limit.  Your search space is only sequences between 21 terms and this limit in length.  And if you search backwards, you can stop when you find the first working value.</p>

<h1>Even &amp; Odd length sequences</h1>

<p>The sum of an even number of odd numbers is even, so cannot be prime.  The only way to make an odd number, using an even number of primes is if one of those primes is even (2), so the remaining primes compose an odd number of odd numbers.</p>

<p>Ergo:</p>

<ul>
<li>Even length sequences must start at 2 (2 + 3, 2 + 3 + 5 + 7, ...)</li>
<li>Odd length sequences must not start at 2.</li>
</ul>

<p>So an even length sequence check could be a quick check of <code>isPrime(cumulativeSum[n])</code>.  No loop required.</p>

<p>Odd length sequences still need to check <code>isPrime(cumulativeSum[i+n] - cumulativeSum[i])</code> for all <code>i</code>, (for differences less than one million, of course).</p>
    </div>