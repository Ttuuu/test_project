<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Other answers are already covering what maybe matters more to you: space, time complexity, safety, correctness. I think you can do further steps in order to improve the code readability: if it was a production code it would be hard to maintain. Consider the following suggestions:</p>

<ul>
<li>variables should go nearest their utilization as possible: avoid broad global declaration as far as you can;

<ul>
<li>for example, why is <code>count</code> initialized before the first exit point, that is where it could never be used? It should go just before the for instruction (the first for? - on a first reading I couldn't say it)</li>
</ul></li>
<li><code>len - sublen + 1</code> should be stored in a final variable (constant) with a good name: what does it mean that value?</li>
<li>the default return value (<code>-1</code>) should be declared in one point, with a meaningful name (no magic numbers). What if later you would want to change the default not-found value?</li>
<li>the function has three exit points, with a further <code>break</code> in a nested loop, causing  a difficult reading of its logical branches (they remember insane <code>goto</code>s)</li>
<li>the main exit point <code>count == sublen</code> should go inside a meaningful boolean variable: why is this an exit condition? How would you explain it to your coworker?</li>
</ul>

<p>If you want to see a different approach to <code>indexOf</code> (but on byte arrays) you could check the following code, with also should be more readable:</p>

<pre><code>    public static int search(byte[] input, byte[] searchedFor) {
        //convert byte[] to Byte[]
        Byte[] searchedForB = new Byte[searchedFor.length];
        for(int x = 0; x&lt;searchedFor.length; x++){
            searchedForB[x] = searchedFor[x];
        }

        int idx = -1;

        //search:
        Deque&lt;Byte&gt; q = new ArrayDeque&lt;Byte&gt;(input.length);
        for(int i=0; i&lt;input.length; i++){
            if(q.size() == searchedForB.length){
                //here I can check
                Byte[] cur = q.toArray(new Byte[]{});
                if(Arrays.equals(cur, searchedForB)){
                    //found!
                    idx = i - searchedForB.length;
                    break;
                } else {
                    //not found
                    q.pop();
                    q.addLast(input[i]);
                }
            } else {
                q.addLast(input[i]);
            }
        }

        return idx;
    }
</code></pre>

<p>(<a href="https://stackoverflow.com/questions/22234021/search-for-a-string-as-an-byte-in-a-binary-stream/22236277#22236277">Original post</a>) </p>
    </div>