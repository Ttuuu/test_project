<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Using findstr in PowerShell is superfluous and<br>
not very <strong><em>powershell'ish</em></strong> which is about objects and pipes.</p>

<p>You can directly pipe the raw output of <code>Get-ChildItem</code> to <code>Select-String</code> and parse the resulting object for the information you require.</p>

<p>As the size of the file isn't contained in the properties <code>sls</code> returns:</p>

<pre><code>Context      Property
Filename     Property
IgnoreCase   Property
Line         Property
LineNumber   Property
Matches      Property
Path         Property
Pattern      Property
</code></pre>

<p>You've to append it, either with a <code>calculated property</code> </p>

<pre><code># Grab user options
$ext = Read-Host -Prompt        "Enter extension   "
$huntString = Read-Host -Prompt "Enter hunt string "

Get-ChildItem *.$ext -Recurse | Select-String $huntString -List | 
    Select-Object @{Label='Size';Expression={(Get-Item $_.Path).Length}},Path
</code></pre>

<p>or iterate the output and build a <code>[PSCustomObject]</code>:</p>

<pre><code>Get-ChildItem *.$ext -Recurse | Select-String $huntString -List | 
    ForEach-Object {
        [PSCustomObject]@{
            Path = $_.Path
            Size = (Get-Item $_.path).Length
        }
    }
</code></pre>

<p>The <code>objects</code>output will be the very same:</p>

<pre><code>&gt; Q:\Test\2018\12\17\CR_209811.ps1
Enter extension   : ps1
Enter hunt string : ::Now
Size Path
---- ----
 878 Q:\Test\2018\09\18\SO_52381514.ps1
 677 Q:\Test\2018\11\16\SO_53336923.ps1
 770 Q:\Test\2018\11\19\SO_53381881.ps1
1141 Q:\Test\2018\12\17\CR_209811.ps1
1259 Q:\Test\2018\12\17\SU_1385185.ps1
</code></pre>
    </div>