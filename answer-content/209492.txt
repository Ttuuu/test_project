<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I don't much like your <code>Card</code> struct. What would you do if you found a card that had a non-nil value for all three properties? It's better to make impossible things impossible.</p>

<pre><code>enum Card {
    case suit(Value, Color)
    case special(Joker)
}
</code></pre>

<p>With the above, there is no way to make a card that has a non-nil Joker as well as non-nil Value. It also requires every card that has a Value to also have a Color which is something else that your current struct doesn't enforce.</p>

<hr>

<p>As a general rule, if a function doesn't require <code>self</code>, it shouldn't be a method. At minimum it should be <code>static</code>, IMO it really should be a free function (one written outside of any class.) This rule applies to your <code>cardsMatch(compare:with:)</code> method. Either define it as static (as in <code>public static func cardsMatch...</code>) or write it outside of the class.</p>

<p>Also, if you used my Card idea above, the match method would become considerably simpler.</p>

<pre><code>public func cardsMatch(compare topCard: Card, with handCard: Card) -&gt; Bool {
    switch (topCard, handCard) {
    case (_, .special):
        return true
    case let (.suit(topValue, topColor), .suit(handValue, handColor)):
        return topValue == handValue || topColor == handColor
    }
}
</code></pre>

<p>Note, I wrote the above as a free function.</p>

<p>I think the above exercise also exposed a logic error in the function. Can't you lay any card on top of a special/joker card?</p>
    </div>