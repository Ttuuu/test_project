<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is kind of an algorithm review rather than a code review, so it should go into comments space. However, it is too long for a comment.</p>

<p>The problem description says the operations are performed from left to right, so all possible operations on numbers at positions 0 through N-1 should be analyzed prior to analyzing operations with argument at position N. Hence the general outline would look like:</p>

<pre><code>    partialResult(numbers, N)
    {
        return partialResult(numbers, N-1) plus/minus/times/divided numbers[N];
    }
</code></pre>

<p>When we multiply or divide by a negative <code>number[N]</code>, the maximum and minimum swap, so we need a partial result to contain both the possible maximum and minimum value from the subproblem. This can be achieved by returning a two-doubles structure or just by passing two reference parameters:</p>

<pre><code>    void calcPartialResult(double[] numbers, int N, double&amp; minResult, double&amp; maxResult)
    {
        calcPartialResult(numbers, N-1, minResult, maxResult);

        double[] newResults = {
            minResult plus/minus/times/divided numbers[N],
            maxResult plus/minus/times/divided numbers[N] };

        minResult = newResults.Min();
        maxResult = newResults.Max();
    }
</code></pre>

<p>Of course we need to identify and handle a base case! A base case is a single number, which is itself its maximum and minimum value:</p>

<pre><code>    void calcPartialResult(double[] numbers, int N, double&amp; minResult, double&amp; maxResult)
    {
        if(N == 0) {
            minResult = maxResult = numbers[0];
            return;
        }

        calcPartialResult(numbers, N-1, minResult, maxResult);

        double[] newResults = {
            minResult plus/minus/times/divided numbers[N],
            maxResult plus/minus/times/divided numbers[N] };

        minResult = newResults.Min();
        maxResult = newResults.Max();
    }
</code></pre>

<p>Finally we can use our helper:</p>

<pre><code>    double GetMaxNumber(double[] numbers)
    {
        if(numbers == null || numbers.Length == 0)
            throw ArgumentException;

        double minResult, maxResult;
        calcPartialResult(numbers, numbers.Length-1, minResult, maxResult);

        return max(minResult, maxResult);
    }
</code></pre>

<p>Credits to @VisualMelon for throwing ArgumentException.</p>
    </div>