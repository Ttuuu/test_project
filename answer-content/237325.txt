<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code can probably utilize OOP.
However, the way you're currently using objects is not what I'd call good.</p>

<p>But before we start adding in complicated objects, it looks like we can do everything you want with a couple of functions:</p>

<ol>
<li><p>Read the title of the document:</p>

<blockquote>
  <pre class="lang-py prettyprint-override"><code>self.title = file.readline()
</code></pre>
</blockquote></li>
<li><p>You read until you get to <code>NNODES</code>:</p>

<blockquote>
  <pre class="lang-py prettyprint-override"><code>while not file.readline().startswith('NNODES') : continue
</code></pre>
</blockquote></li>
<li><p>You read the amount of lines to read:</p>

<blockquote>
  <pre class="lang-py prettyprint-override"><code>self.Nnodes = int( file.readline() )
</code></pre>
</blockquote></li>
<li><p>You read the CSV:</p>

<blockquote>
  <pre class="lang-py prettyprint-override"><code>for node in range(0,self.Nnodes) :
    ID , x, y = file.readline().split(',')
    self.nodes.append( Node( ID , x, y ) )
</code></pre>
</blockquote></li>
</ol>

<p>All of 2-4 seems to be related to how you read NNODES objects, so we can just call them in the same function.</p>

<pre class="lang-py prettyprint-override"><code>def load(file):
    return {
        'title': file.read_line(),
        'nnodes': _load_nnode(file),
    }


_NNODE_KEYS = ['ID', 'x', 'y']


def _load_nnode(file):
    while not file.readline().startswith('NNODES'):
        continue
    amount = int(file.readline())
    values = []
    for node in range(amount):
        values.append(dict(zip(
            _NNODE_KEYS,
            file.readline().split(',')
        )))
    return values


with open('input_short.txt') as f:
    data = load(f)
    import pprint
    pprint.pprint(data)
</code></pre>

<pre><code>{
    'title': 'SIMPLY SUPPORTED BEAM',
    'nnodes': [
        {'ID': '1', 'x': '0', 'y': '0'},
        {'ID': '2', 'x': '1', 'y': '0'},
    ]
}
</code></pre>

<hr>

<p>I can understand how OOP would help here, but your current method isn't great.</p>

<p>Inheritance isn't really going to help here. All you need to do is make your objects have a load method like the above. This load method should be a <code>staticmethod</code> so that it's in charge of instantiating the objects.
It seriously just needs to be that simple.</p>

<pre class="lang-py prettyprint-override"><code>from __future__ import annotations
from dataclasses import dataclass


@dataclass
class Mesh:
    title: str
    nnode: NNode

    @classmethod
    def load(cls, file):
        return cls(
            file.readline(),
            NNode.load(file),
        )


@dataclass
class NNode:
    nodes: List[dict]

    @classmethod
    def load(cls, file):
        while not file.readline().startswith('NNODES'):
            continue
        amount = int(file.readline())
        values = []
        for node in range(amount):
            values.append(dict(zip(
                _NNODE_KEYS,
                file.readline().split(',')
            )))
        return cls(values)
</code></pre>

<hr>

<p>Now this could be a cool little file reader project you have. But the thing is, that you've not really implemented much.</p>

<ol>
<li>You ignore vital data with a <code>while</code> ignore loop.</li>
<li>You ignore what the data should look like, you don't parse <code>NNODES &lt;NNnodes&gt;&lt;Node,X,Y&gt;</code>.</li>
<li>You assume everything is the exact same format, you haven't implemented a way to allow different classes.</li>
</ol>

<p>Overall I'm not going to write these things for you. I suggest you try your arm at them with the above code.</p>
    </div>