<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>To reduce duplication, look at what's identical in each line, and what's different. For the different parts, make them a part of a loop, or the arguments to a function. For the identical parts, make them the body of the function/loop. In this case, look at the lines:</p>

<pre><code>Button(master, text="1", command=lambda: self.do_math(1)),
Button(master, text="2", command=lambda: self.do_math(2)),
Button(master, text="3", command=lambda: self.do_math(3)),
</code></pre>

<p>The only thing that differs are the <code>text</code> parameter values, and the argument to <code>do_math</code>. Conveniently, they're the same, so this can be a simple loop over a range of numbers. I'm going to use a list comprehension here:</p>

<pre><code>self.number_buttons = [Button(master, text=str(n), command=lambda n: self.do_math(n))
                       for n in range(1, 10)]
</code></pre>

<p>And in most cases, that would be fine. Unfortunately though, you're needing to put <code>n</code> inside of a <code>lambda</code>, and that can cause some <a href="https://stackoverflow.com/questions/233673/how-do-lexical-closures-work">surprising problems</a>. To fix it, I'm going to use the <code>lambda n=n: . . .</code> fix. If I didn't make this change, the <code>text</code> would be set fine, but each button would end up being passed <code>19</code> instead of the correct number.</p>

<pre><code>self.number_buttons = [Button(master, text=str(n), command=lambda n=n: self.do_math(n))
                       for n in range(1, 10)]
</code></pre>

<hr>

<p><code>modes</code> also has some duplication that can be improved.</p>

<pre><code>modes = {
    "+": self.sum + num,
    "-": self.sum - num,
    "*": self.sum * num,
    "/": self.sum / num
}

self.sum = modes[self.mode]
</code></pre>

<p>You're repeating <code>self.sum</code> and <code>num</code> over and over. You can just deal with the data later by mapping to functions instead of the sum. The <code>operator</code> module has functions that correspond to the common operators like <code>+</code> to make this easy:</p>

<pre><code>import operator as op

mode_ops = {
    "+": op.add,
    "-": op.sub,
    "*": op.mul,
    "/": op.truediv
}

f = mode_ops[self.mode]
self.sum = f(self.sum, num)  # Now we only need to specify the data once
</code></pre>

<p>This also saves you from computing every possible answer ahead of time. If you ever added an expensive operator, this could save some overhead (although it would be unlikely that that would ever be a major problem).</p>
    </div>