<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is pretty clever work for someone self taught! In my opinion, it's more work than is necessary, though. Your <code>OrderedArray</code> class looks like a cross between <code>std::map</code> and <code>std::vector</code>, but it also looks like it will never hold more than 4 elements, if I understand it correctly.</p>

<h1>Simplify</h1>

<p>I think you can do away with the <code>OrderedArray</code> class and the <code>funcArray</code>, and just use some <code>enum</code>s and a <code>switch</code> statement. For example, something like this:</p>

<pre><code>enum {
    kUnknown_Displacement,
    kUnknown_InitialVelocity,
    kUnknown_FinalVelocity,
    kUnknown_Acceleration,
    kUnknown_Time
};
</code></pre>

<p>Then, after collecting your knowns, just do something simple like:</p>

<pre><code>switch(unknown) {
    case kUnknown_Displacement:
        calculateDisplacement(initialVelocity, Acceleration, time); // or whatever variables you need
    break;

    case kUnknown_InitialVelocity:
        // etc...
    break;
};
</code></pre>

<h1>Naming</h1>

<p>The other thing I think you could improve is your naming. Function names like <code>vfvf</code>, <code>vfa</code>, and <code>ddd</code> don't tell a reader of the code (including you 6 months from now) what these functions actually do. Renaming them as I did in my example above to things like <code>calculateDisplacement()</code>, <code>calculateAcceleration()</code>, etc. would go a long way towards helping this.</p>

<h1>Types</h1>

<p>Each of your functions returns 2 values, and so you're returning them as an array. It's not clear to me what the meaning of each value is, but if it's something like an <code>x</code> and <code>y</code> of a point, you should make a <code>Point</code> type and use that. If it's a magnitude and angle, then you should make a structure with those members and use that. Another alternative is to return a <code>std::tuple</code>, though when the values are clearly related (like for a Point), it's better to put it into a structure with named members.</p>

<h1>Don't reinvent the wheel</h1>

<p>You made your own constant <code>PI</code>. You should use <code>M_PI</code> because it's portable and will have enough digits for the precision you need.</p>
    </div>