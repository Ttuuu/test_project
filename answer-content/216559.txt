<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>    elif choice == '2':
        instructions()
        main()
</code></pre>

<p>Ummm, that's probably not exactly what you want.
Python lacks a <code>goto</code> statement, so the usual idiom would be to wrap the whole thing in some sort of <code>while</code> loop, perhaps <code>while True</code>.
Consider an input sequence of "2 2 2 2 2", or "z z z z z".
You'll wind up pushing <code>main</code> onto the call stack again, and again, and again....</p>

<p>Your locals never go out of scope,
so their <a href="https://docs.python.org/3/tutorial/stdlib2.html#weak-references" rel="nofollow noreferrer">ref</a> <a href="https://docs.python.org/3/extending/newtypes.html#finalization-and-de-allocation" rel="nofollow noreferrer">count</a> never decrements and they won't be deallocated and tidied up.</p>

<p>tl;dr: leaking stack frames is Bad, don't do it.</p>

<pre><code>            print("Last Result: "+str(result))
</code></pre>

<p>Usual idiom would be <code>print('Last Result:', result)</code>, but no harm done.</p>

<pre><code>                num1 = int(input("First Number: "))
</code></pre>

<p>The requirements seemed pretty clear about "...must work with <strong>decimal</strong> numbers."
You chose to invoke <code>int()</code> rather than <code>float()</code>.</p>

<pre><code>            if result != 0:     
                num1 = result
</code></pre>

<p>I can't imagine how that corresponds to The Right Thing.
If you want a sentinel, <code>None</code> would be much better than <code>0</code>,
just consider a sequence like <code>2 + 1 = - 3 =</code> (which yields zero).
Perhaps there's a reason for assigning the accumulator to <code>num1</code>, but I'm not seeing it.
It appears you have discarded the user input.</p>

<pre><code>            operator = input("Opertaor: ").lower()
</code></pre>

<p>Typo.</p>

<pre><code>                calculator()
</code></pre>

<p>Same criticism as above. Python lacks <code>goto</code>, and you're leaking stack frames here.</p>

<pre><code>            if operator == "sqrt":
                result = (sqrt(num1))
                print("Result: "+str(result))
                continue
</code></pre>

<p>It is apparent that I'm not understanding why you are using the <code>result</code> accumulator versus the <code>num1</code> user input.
On most calculators, repeated clicking of the âˆš key would yield repeated assignment of <code>result = sqrt(result)</code>.
I'm a little concerned about <code>num1</code> versus <code>result</code> confusion.</p>

<pre><code>            if operator=="esc":
                main()
</code></pre>

<p>Same remark about leaking stack frames.
A <code>return</code> statement would be usual, here.</p>

<pre><code>            if operator.isdigit(): 
</code></pre>

<p>This seems a bit restrictive.
Better to unconditionally raise an "unrecognized operator" error.</p>

<pre><code>            num2 = int(input("Second Number: "))
</code></pre>

<p>Same criticism as above, the "decimal" instructions are pretty clear about calling <code>float()</code>.</p>

<pre><code>                result = (add(num1,num2))
</code></pre>

<p>All four of these assignments seem pretty weird,
as for a typical calculator we'd be accumulating <code>result = add(result, num2)</code>.
This is a consequence of the <code>num1</code> assignment above.
Also, please discard the <code>(</code>extraneous parentheses<code>)</code>.</p>

<pre><code>def sqrt(num1):
    return (num1**(1/2.0))
</code></pre>

<p>This works fine, but do consider the usual idiom of simply calling <code>math.sqrt()</code>.</p>
    </div>