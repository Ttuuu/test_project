<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Style</strong></p>

<ul>
<li><p>Subjective but don't indent on namespaces.</p></li>
<li><p>I would group the ctors and operators together instead of grouping them by their status (default/delete).</p></li>
<li><p>Your ctor is a bit hard to read. Consider formatting it differently. E.g.:</p>

<pre><code>DirectoryWatcherWin::DirectoryWatcherWin(
        const std::string&amp; directoryToWatch, 
        const std::vector&lt;std::string&gt;&amp; extensionsToWatch, 
        DWWCallback callback)
    : m_DirectoryToWatch(directoryToWatch)
    , m_Extensions(extensionsToWatch)
    , m_Callback(callback)
{}    
</code></pre>

<p>This way the parameters are visually separated from the member init list and you don't break any line length recommendations either.        </p></li>
</ul>

<hr>

<p><strong>Code</strong>    </p>

<ul>
<li><p>We need to talk about your interface.<br>
Generally you should start with <code>public</code> and <code>private</code> should come last. Also do not use those keywords more than once per class definition.<br>
I would probably either ditch the <code>DWWCallback</code> declaration, or move it into the namespace, seeing as there is probably no use-case where people use your namespace but not the <code>DWWCallback</code>.</p></li>
<li><p><a href="https://softwareengineering.stackexchange.com/questions/59880/avoid-postfix-increment-operator">Prefer prefix over postfix</a>.</p></li>
<li><p><a href="https://stackoverflow.com/questions/213907/c-stdendl-vs-n">Prefer using <code>\n</code> over <code>std::endl</code></a>.</p></li>
<li><p>Don't <code>using namespace</code>. Prefixing your code with the namespace is really not too much to ask.</p></li>
<li><blockquote>
<pre><code>for (auto&amp; extension : m_Extensions)
</code></pre>
</blockquote>

<p>Consider using <code>const</code> in loops like this if you don't intend to modify the loop variable in the body.</p></li>
<li><p>If you have strings that you don't modify consider using <a href="https://en.cppreference.com/w/cpp/string/basic_string_view" rel="nofollow noreferrer">string_view</a> as it <a href="https://stackoverflow.com/questions/40127965/how-exactly-stdstring-view-is-faster-than-const-stdstring">can be faster</a>.</p></li>
<li><p>When you want to initialize a struct and all its members consider using <code>foostruct = {};</code>
See <a href="https://stackoverflow.com/questions/1069621/are-members-of-a-c-struct-initialized-to-0-by-default">this</a> for more info.</p></li>
<li><blockquote>
<pre><code>std::wstring dirWStr = std::wstring(m_DirectoryToWatch.begin(), m_DirectoryToWatch.end());
</code></pre>
</blockquote>

<p>I don't quite follow the idea behind this. Can you not pass this directly as something else like maybe <code>mystring_view.data()</code>? If it has to be a <code>wstr</code> why not keep it as such in the class as well?</p></li>
</ul>
    </div>