<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li>please do not <code>using namespace std;</code></li>
<li>why has <code>Bst::findmin</code> no prefix <code>_</code>?</li>
<li>why do you use <code>std::shared_ptr&lt;&gt;</code> at all? <code>std::shared_ptr</code> is ment to represent shared ownership. This makes no sense for tree nodes, you're not going to have two trees with the same nodes. <code>std::unique_ptr&lt;&gt;</code> is a better candidate.</li>
<li>it is generally good to separate the data structure from its serialization. Make <code>print</code> a separate function and also handle the member printing outside of the class. </li>
</ul>

<hr>

<p><strong>Edit</strong>
As you had trouble getting the <code>unique_ptr</code> running, here's what works for me.</p>

<p>Modify the node to use <code>unique_ptr</code>:</p>

<pre><code>struct node
{
    int val;
    std::unique_ptr&lt;node&gt; left;
    std::unique_ptr&lt;node&gt; right;

    // c'tor left out
};
</code></pre>

<p>Also, use a <code>unique_ptr</code> for <code>root</code>. You'll receive heavy compiler complaints, 
because a unique_ptr cannot be simply copied (one of the instances must go invalid, as it's <em>unique</em>). I suggest altering the private functions:</p>

<pre><code>void _insert(std::unique_ptr&lt;node&gt;&amp; curr, int val);
void _del(std::unique_ptr&lt;node&gt;&amp; curr, int val);
</code></pre>

<p>Sample implementation for <code>_insert</code>:</p>

<pre><code>void Bst::_insert(std::unique_ptr&lt;node&gt;&amp; curr, int val)
{
    if (!curr)
    {
       curr = std::make_unique&lt;node&gt;(val);
       return;
    }

    if (val &lt; curr-&gt;val)
    {
        _insert(curr-&gt;left, val);
    }
    else
    {
        _insert(curr-&gt;right, val);
    }
}
</code></pre>

<p>Your public <code>insert</code> method would be something like:</p>

<pre><code>void insert(int val)
{ 
    _insert(root, val);
}
</code></pre>

<p>Also: add a <code>find</code> function to see if an element is in the tree. Use the <code>find</code> function to write some simple tests. You may rename <code>del</code> to <code>erase</code> to be closer at the standard naming. </p>

<hr>

<p><strong>Edit 2</strong> Separate output from data storage:</p>

<p>A friend function is relatively inflexible, as you cannot easily exchange the printing algorithm. You may implement iterators (hard) or provide a traverse function. I'd go for the second approach, as you already have the algorithm in <code>_print</code>: rename <code>print</code> to <code>traverse</code> and pass it a function pointer, then replace the output to <code>std::cout</code> by a call to the function pointer. </p>

<pre><code>
class Bst
{
...
    // traverse with function pointer
    void traverse(void (*func)(int));
};

int main()
{
    Bst b;
    // insert data ...    

    b.traverse([](auto v){ std::cout &lt;&lt; v &lt;&lt; " "; });
    std::cout &lt;&lt; "\n";
}

</code></pre>
    </div>