<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>For starter, your implementation is too tightly tied to your data, making it not reusable for other kind of dataframe where you would want to count streaks. If you provided a column (<code>pd.Series</code>) to the function instead, it would be much more versatile; allowing calls such as <code>count_streak(df.Artist)</code>, <code>count_streak(pd.Series([1, 2, 2, 1, 1, 3])</code> or even <code>count_streak('abcdccbdddbbbbcaaacbddba')</code>.</p>

<p>Doing so, you would remove the need for <code>itertuple</code> and favor regular iteration. This would ease the use of <code>enumerate</code> to check for the previous element:</p>

<pre><code>def count_streak(sequence):
    streaks = []

    for index, element in enumerate(sequence):
        if not index or sequence[index - 1] != element:
            count = 1
        else:
            count += 1
        streaks.append(count)

    return streaks
</code></pre>

<p>Much simpler. But this is all without taking into account the wonderful <code>itertools</code> module and its <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>groupby</code></a> function. It will make group of consecutive data that evaluate equals, yielding both the value, and the entire group. The other advantage being that any iterable will be accepted:</p>

<pre><code>def count_streak(iterable):
    return [
        i for _, g in itertools.groupby(iterable)
        for i, _ in enumerate(g, start=1)
    ]
</code></pre>

<p>Since you wish to stay in <code>pandas</code>' world, you also have a <code>groupby</code> method available on <code>DataFrame</code>s and <code>Series</code>. But contrary to <code>itertools.groupby</code> that stops at each boundaries, <code>pandas</code>' <code>groupby</code> return all occurences of similar data even if some are discontinuous. But you can make <a href="https://stackoverflow.com/a/27626699/5069029">use of <code>cumsum</code> and <code>cumcount</code></a> to get an equivalent and vectorize these operation instead of a slow python loop. This would require a <code>pandas.Series</code> as parameter, though, not any iterable:</p>

<pre><code>def count_streak(serie):
    return serie.groupby((serie != serie.shift()).cumsum()).cumcount() + 1
</code></pre>

<p>usage being</p>

<pre><code>df['Streak'] = count_streak(df.Artist)
</code></pre>

<hr>

<p>And since you commented on performances, here is a small benchmark comparing the approaches. Iâ€™ve thrown in a couple extra approaches, out of curiosity. The code to produce the results is:</p>

<pre><code>import pandas as pd
import numpy as np
import timeit

def python_streaks(sequence):
  streaks = []
  for index, element in enumerate(sequence):
    if not index or sequence[index - 1] != element:
      count = 1
    else:
      count += 1
    streaks.append(count)
  return streaks

def python2_streaks(sequence):
  streaks = [1] * len(sequence)
  for index, element in enumerate(sequence):
    if index and sequence[index - 1] == element:
      streaks[index] += streaks[index - 1]
  return streaks

def numpy_streaks(sequence):
  streaks = pd.Series(np.ones(len(sequence), dtype=int))
  for index, element in enumerate(sequence):
    if index and sequence[index - 1] == element:
      streaks[index] += streaks[index - 1]
  return streaks

def itertools_streak(iterable):
  return [
    i for _, g in itertools.groupby(iterable)
    for i, _ in enumerate(g, start=1)
  ]

def pandas_streaks(serie):
  return serie.groupby((serie != serie.shift()).cumsum()).cumcount() + 1

for size in range(8):
  size = 10**size
  for name in ('python', 'python2', 'numpy', 'pandas', 'itertools'):
    setup = 'import pandas as pd;from random import choice;from __main__ import {}_streaks as streaks; df = pd.DataFrame({{"Artist": [choice("abcde") for _ in range({})]}})'.format(name, size)
    elapsed = timeit.timeit('df["Streaks"] = streaks(df.Artist)', setup=setup, number=1000)
    print(name, size, elapsed)
</code></pre>

<p>And the results are (I stopped pure Python loops as they were taking too much time):</p>

<p><a href="https://i.stack.imgur.com/jFJxN.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/jFJxN.png" alt="Benchmark log scale"></a></p>

<p>or, without using log scale on the Y-axis:</p>

<p><a href="https://i.stack.imgur.com/ML0o2.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/ML0o2.png" alt="Benchmark linear scale"></a></p>

<p>So depending on the amount of data you wish to process, either itertools (up to 10000ish elements) or pandas version is better.</p>
    </div>