<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In node, throwing an error without catching it will kill the process. This seems to be the primary error handling mode (and based on <a href="https://github.com/turtle0x1/LxdMosaic/blob/183077dfb0a1ec23550ec3e5938eb62bb801f457/examples/install_with_clone.sh#L66" rel="nofollow noreferrer">this</a> it seems you then rely on pm2 to restart the process). This means that if even one client manages to trigger an error in your code, every client will be disconnected. Fixing this would require rewriting a lot of the code to handle asynchronous errors correctly -- for example, make <code>createWebSockets</code> return a promise and reject that promise if the DB query errors, and then handle that error in <code>/hosts/reload/</code> and pass the error along to the client.</p>

<hr>

<p><code>createWebSockets()</code> calls <code>fs.readFileSync</code> in a loop -- if there are a large number of hosts this could cause the whole server to freeze while the certs/keys are being reread for every host. You could consider both caching keys that have already been read (so you're not just rereading the same keys on every reload) and/or using the asynchronous <code>fs.readFile</code> API. (If you're familiar with promises you can use async/await and <code>fs.promises.readFile</code> to keep a similar code structure)</p>

<hr>

<p><code>/hosts/reload/</code> sounds like it is intended to be run many times to reload the list of hosts, but <code>createWebSockets()</code> doesn't handle reloads any differently than the initial setup. This has a few issues:</p>

<ul>
<li>If a host is deleted from the DB, <code>hostDetails</code> will still include information about the host</li>
<li>The <code>events?type=operation</code> websockets are setup, but then the handle to them is thrown away. So not only are errors and host deletions not handled, but a fresh websocket will also be created for hosts that already existed during the previous reload. This means there will be multiple websockets connected to a single host, with their listeners still forwarding messages. This is not only a memory leak, but it also means there will be duplicate <code>operationUpdate</code> messages being sent over <code>operationSocket</code>.

<ul>
<li>Similarly, long lived sockets like these should usually have error handling and retry logic.</li>
</ul></li>
</ul>

<hr>

<p><code>if(lxdConsoles[indentifier] == undefined) {</code></p>

<p>and</p>

<p><code>res.send(lxdConsoles.length.toString());</code></p>

<p>It looks like <code>lxdConsoles.length</code> is used as a unique identifier (<a href="https://github.com/turtle0x1/LxdMosaic/blob/caaebbd51fc340fad1358b21c7f98ba2d497752e/src/views/boxes/container.php#L365" rel="nofollow noreferrer">here</a>) -- but this isn't guaranteed to work if two clients both try and open a console at the same time. It could happen that they both request <code>POST /terminals</code>, get the same id back, and then both try to pass that same id back to the websocket. </p>

<p>An easy fix would be to switch <code>lxdConsoles</code> to be an object instead of an array and have the <code>POST /terminals</code> handler just return a uuid instead of <code>lxdConsoles.length</code>. Though since the server doesn't authenticate the token at all, we may as well just have the client generate the uuid.</p>

<hr>

<p><code>res.on('data', d =&gt; {</code> is not the correct way to read response data from an HTTP request. The <code>data</code> event signifies that a single <em>chunk</em> of data has been received, not the full message. Technically this code needs to have a buffer, store up all of the data chunks, and then process the full buffer on the <code>end</code> event.</p>

<p>Roughly:</p>

<pre><code>let body = '';
res.on('data', d =&gt; body += d.toString('utf-8'));
res.on('end', () =&gt; { /* do something with the complete "body" */ });
</code></pre>

<p>Or just use a simpler HTTP library, like <a href="https://www.npmjs.com/package/request-promise" rel="nofollow noreferrer">request-promise</a></p>

<p>Based on the <a href="https://github.com/lxc/lxd/blob/master/doc/rest-api.md#10containersnameexec" rel="nofollow noreferrer">LXD Docs</a>, the returned message is guaranteed to be small... but this code is still fragile (if LXD ever changes to return more data, or if the URL is changed to something that returns more data, this could break).</p>

<hr>

<pre><code> try {
     const buf = Buffer.from(data);
     data = buf.toString();
     socket.emit("data", data);
 } catch (ex) {
     // The WebSocket is not open, ignore
 }
</code></pre>

<p>This is concerning: try/catch is being used to just throw away an error without even logging it (so users may have mysterious behavior with no potential to even see the cause in logs) and also the comment reads weirdly: there's two websockets in play here (the client <code>socket</code> and the server <code>lxdWs</code> so the comment should specify which and also describe why the error doesn't need to be handled) </p>

<hr>

<pre><code>socket.on('close', function(indentifier) {
    setTimeout(() =&gt; {
        // ...
     }, 100);
});
</code></pre>

<p>It's not clear what the <code>setTimeout</code> is doing here -- if it's needed for some specific timing thing, then a comment would be a good idea. Otherwise you can remove it.</p>

<hr>

<p>Small style things:</p>

<ul>
<li>The code has inconsistent whitespace, quoting, var/const usage, and semicolons. Just use <a href="https://prettier.io" rel="nofollow noreferrer">prettier</a> and never worry about it again.</li>
<li><code>indentifier</code> is spelled wrong.</li>
</ul>
    </div>