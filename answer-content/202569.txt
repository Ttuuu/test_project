<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1><code>multithread::enqueue</code> parameter type issues</h1>

<blockquote>
  <p>This section is trying to address all overloads of this member function, as these issues affect all of them.</p>
</blockquote>

<p>Why take parameters of the form <code>const X&amp;&amp;</code> (where <code>X</code> is either <code>std::function&lt;void()&gt;</code> or <code>std::vector&lt;std::function&lt;void()&gt;&gt;</code>)?</p>

<p>Going from this comment <code>//consumes std::vector iff execution::success</code>, my best guess is that those was intended to just be plain rvalue references (without the <code>const</code>), since you simply cannot "consume" (i.e. modify) a <code>const X</code>.</p>

<blockquote>
  <p>This also means going through all the trouble of using a <code>move_iterator</code> on the <code>const std::vector&lt;std::function&lt;void()&gt;&gt;&amp;&amp;</code> overload would be for nought, as it would have to make a copy.</p>
</blockquote>

<p>So, let's just drop the <code>const</code>.</p>

<hr>

<p>Now, there still seems to be some confusion about <code>std::forward</code>. <code>std::forward</code> is intended to be used on so called forwarding references (reference of type <code>T&amp;&amp;</code>, where <code>T</code> is deduced locally), where it passes them on as the function received them (i.e. it moves rvalue references, but not lvalue references).</p>

<p>Since we know that the parameters in calls to <code>std::forward</code> are actual rvalue references (*), we can simply call <code>std::move</code> instead.</p>

<blockquote>
  <p>(*) Well, there's the exception in the template overload: <code>dataType... parameters</code>.</p>
  
  <p>First off, <code>dataType</code> will never be deduced to be any kind of reference; instead, copies will be created and passed on. <code>std::forward</code> masked these copies by calling <code>std::move</code> on them (since it didn't get instantiated with a reference type). This would make the actual relevant parameters (<code>proximate</code> and possibly <code>penproximate</code>) rvalue references, as required, and move-construct the new <code>parameters</code>.</p>
  
  <p>This can be fixed by changing <code>dataType... parameters</code> to <code>dataType&amp;&amp;... parameters</code>. Now, since <code>parameters</code> are forward references, we actually want to call <code>std::forward&lt;dataType&gt;(parameters)...</code>. Now they get passed through by <code>std::forward</code> without any copies being made.</p>
  
  <p>Additionally, calling <code>enqueue</code> with anything but a <code>std::function&lt;void&gt;&amp;&amp;</code> now causes a compile time error, as the compiler cannot match a lvalue reference to a rvalue reference parameter. (This could optionally be explicitly asserted up front with some template metaprogramming in order to give a cleaner error message.)</p>
</blockquote>

<h1>Concurrency issues</h1>

<p>While unlikely to ever happen on a x86 CPU, technically accesses to <code>implementation::open</code> are possible data races (there's no synchronization around reads or writes).</p>

<p>Also, since the value of <code>open</code> ostensibly doesn't get changed inside the lambda passed to the threads, the optimizer could cache that value in a register (unlikely, but allowed), so changes to <code>implementation::open</code> might not be visible to the worker threads at all!</p>

<p>A simple solution to both of these issues would be chaging <code>implementation::open</code> to <code>std::atomic&lt;bool&gt;</code>.</p>

<h1>General stuff</h1>

<ul>
<li><p>A lot of functions have the following pattern:</p>

<pre><code>XXX return_value = default_value;

if(condition) { /* do_stuff */ }
else { return_value = other_value; }

return return_value;
</code></pre>

<p>This can be simplified to:</p>

<pre><code>if(!condition) return other_value;

/* do_stuff */

return default_value;
</code></pre></li>
<li><p>The function called to initialize <code>implementation::pool</code> and the worker thread functions could be refactored into their own functions. This would increase readability by quite a lot.</p></li>
</ul>
    </div>