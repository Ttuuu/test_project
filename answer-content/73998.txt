<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The Ruby code looks quite good.</p>

<hr>

<p>You have a couple of filehandle leaks.  A typical way to process a file is <code>open(…) { |file| … }</code>.  If you call <code>open</code> without a block, then you should also <code>close</code> the resulting filehandle.</p>

<p>An even simpler approach would be to call static methods such as <strong><code>IO::readlines</code></strong>.  For example, in <code>device_to_mount_point</code>, the following code</p>

<blockquote>
<pre><code>  mounts = open("/proc/mounts").each_line do |mount|
    line = mount.split
    if line[0] == device then
      mount_point = line[1]
      break
    end
  end
</code></pre>
</blockquote>

<p>could be simplified with</p>

<pre><code>proc_mounts = Hash[IO.readlines('/proc/mounts').collect { |line| line.split[0..1] }]
mount_point = proc_mounts[device]
</code></pre>

<hr>

<p>You should <strong>avoid returning <code>nil</code> to indicate an error</strong>.  That just burdens the caller with the responsibility to handle a <code>nil</code> result properly.  If it's not actually an error, then return an empty string.  If it is an error, you should raise an exception instead:</p>

<pre><code>raise ArgumentError.new("Device #{device} isn't a block device")
</code></pre>

<hr>

<p>It is unusual to see string-to-number conversions written as <code>Integer(part[1])</code> in Ruby.  A more common expression would be <strong><code>part[1].to_i</code></strong>.</p>

<hr>

<p>Here is one way to eliminate the <strong>code duplication</strong> in <code>process_grub_config</code>:</p>

<pre><code>def process_grub_config
  possible_grub_configs = [
    ["/boot/grub/menu.lst",  :load_kernels_grub],
    ["/boot/grub2/grub.cfg", :load_kernels_grub2],
    ["/boot/grub/grub.cfg",  :load_kernels_grub2],
  ]
  possible_grub_configs.each do |filename, handler|
    begin
      entries = method(handler).call(IO::read(filename))
      if !entries.empty? then
        if $verbose then
          puts "Read GRUB configuration from #{file}\n"
        end
        return entries
      end
    rescue Errno::EACCES
      STDERR.puts("#{$!}\nYou must be root to run this utility.\n")
      exit 1
    rescue Errno::ENOENT
      next
    end
  end
end
</code></pre>

<p>I consider <code>load_kernels_grub</code> and <code>load_kernels_grub2</code> to be <strong>misnamed, as they aren't actually loading anything,</strong> at least not in the kexec sense.  I suggest a name like <code>grub1_cfg_kernel_entries</code> instead.</p>

<hr>

<p>In <code>kexec</code>, <code>fork</code> and <code>exec</code> could just be <strong>a <code>system</code> call</strong>:</p>

<pre><code>system "/sbin/kexec", "-l", entry['kernel'], "--append=#{entry['cmdline']}", "--initrd=#{entry['initrd']}"
</code></pre>

<p>The <code>entry['kernel']</code> parameter does not need string interpolation.</p>

<hr>

<p>In accordance with the suggestion in the <a href="http://linux.die.net/man/8/kexec"><code>kexec(8)</code></a> man page, you could just <strong>call <code>kexec</code> with no option parameter</strong>, which loads the specified kernel and calls <code>shutdown</code>.</p>
    </div>