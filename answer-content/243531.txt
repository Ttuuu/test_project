<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are some things that may help you improve your code.</p>

<h2>Fix the bug</h2>

<p>The code currently includes this line in <code>initialPosition</code>:</p>

<pre><code>*(emptyBoard[i] + j) = (bool) (startPos[(i * width) + j] - '0');
</code></pre>

<p>Since each row is <code>width</code> cells wide, we should be multiplying by <code>j</code> rather than <code>i</code>.  </p>

<pre><code>*(emptyBoard[i] + j) = (bool) (startPos[j * width + i] - '0');
</code></pre>

<h2>Eliminate unused variables</h2>

<p>The variable <code>k</code> in <code>step</code> is declared code but never used.  Similarly, <code>now</code> in <code>wait</code> is defined but unused.  Since unused variables are a sign of poor code quality, you should seek to eliminate them.  Your compiler is probably smart enough to warn you about such things if you know how to ask it to do so.</p>

<h2>Eliminate global variables where practical</h2>

<p>Having routines dependent on global variables makes it that much more difficult to understand the logic and introduces many opportunities for error.  Eliminating global variables where practical is always a good idea.  In this case, I would suggest you keep them as global but make them both <code>const</code> to clearly signal to the reader that these are fixed constants.  However <code>i</code> and <code>j</code> should simply be declared within each loop.  Specifically instead of this:</p>

<pre><code>for(i=0; i &lt; width; i++) {
</code></pre>

<p>Write this:</p>

<pre><code>for(int i=0; i &lt; width; i++) {
</code></pre>

<h2>Use consistent formatting</h2>

<p>The code as posted has inconsistent indentation (e.g. the loop in <code>freeArray</code>) and inconsistent use of whitespace (the spacing within each <code>for</code> loop is inconsistent) which makes it harder to read and understand. Pick a style and apply it consistently. </p>

<h2>Try to write portable code</h2>

<p>It's a subtle point, but the <code>\e</code> escape sequence is not actually defined in the ISO standard for C.  For that reason, a safer alternative would be to use <code>\x1b</code>.</p>

<h2>Simplify expressions</h2>

<p>I've already mentioned this line in <code>initialPosition</code>:</p>

<pre><code>*(emptyBoard[i] + j) = (bool) (startPos[(i * width) + j] - '0');
</code></pre>

<p>The left side could simply be <code>emptyBoard[i][j] =</code> which is much clearer.  The right side could be simplified a bit as well.  I'd write the line like this:</p>

<pre><code>emptyBoard[i][j] = startPos[j * width + i] != '0';
</code></pre>

<p>Note also that I've changed it mathematically per the first point.  However, see the suggestion below for an alternative scheme. </p>

<h2>Prefer a single block to pointer-to-pointers schemes</h2>

<p>The code would likely be much simpler and easier to read if, instead of the current pointer-to-pointers approach the whole board is simply allocated in a single structure.  Then you can use the same sort of indexing as shown above with <code>board[i + j * width]</code>.  I think that would be easier for most people to read and understand as contrasted with lines like this:</p>

<pre><code>if(*(*(board + i) + j) == 0) {
</code></pre>

<p>For instance the <code>emptyBoard()</code> function could be reduced to a single line:</p>

<pre><code>bool* emptyBoard() {
    return calloc((width + 2) * (height + 2), sizeof(bool));
}
</code></pre>

<h2>Check the return value of <code>malloc</code></h2>

<p>If the program runs out of memory, a call to <code>malloc</code> can fail.  The only indication for this is that the call will return a <code>NULL</code> pointer.  You should check for this and avoid dereferencing a <code>NULL</code> pointer (which typically causes a program crash).  </p>

<h2>Simplify range checking by eliminating the need for it</h2>

<p>The existing <code>step</code> code does a lot of checking to make sure that all of the checked neighbors are in range.  That's much better than not checking and overrunning the bounds of the board, but there's a simpler way to accomplish the same effect.  The way to do it is to allocate a slightly larger array with two additional rows and two additional columns to act as a frame around the real board.  If you then iterate only over the real board, there is no need for further range checking.</p>

<h2>Separate functions into small chunks</h2>

<p>The <code>step</code> function does three things.  It allocates a new array, computes the neighbor counts for each cell and then exchanges the old and new arrays.  I'd suggest that computing the neighbor count for a particular cell would be better done as a separate function. </p>

<p>If you follow these suggestions, the <code>step</code> and its helper function are much simpler:</p>

<pre><code>static int getNeighborCount(const bool *location) {
    static const ssize_t deltas[8] = {
        -2-1-width, -2-width, -2+1-width,
            -1,             +1,
        +2-1+width, +2+width, +2+1+width,
    };
    int neighbors = 0;
    for (int i=0; i &lt; 8; ++i) {
        neighbors += *(location + deltas[i]);
    }
    return neighbors;
}

bool* step(bool* board) {
    bool* newBoard = emptyBoard();
    if (newBoard == NULL) {
        return NULL;
    }
    bool* dst = newBoard + 3 + width;
    bool* src = board + 3 + width; 
    for (int i = 0; i &lt; width; i++) {
        for (int j = 0; j &lt; height; j++) {
            int livingNeighbors = getNeighborCount(src);
            *dst = (livingNeighbors == 3) || (livingNeighbors == 2 &amp;&amp; *src); 
            ++src;
            ++dst;
        }
        src += 2;
        dst += 2;
    }
    freeArray(board);
    return(newBoard);
}
</code></pre>

<h2>Use library functions</h2>

<p>The code includes this function:</p>

<pre><code>void wait(float s) {
    int then = clock() + (CLOCKS_PER_SEC * s);
    while(clock() != then) {
    }
}
</code></pre>

<p>It's probably better to use <code>nanosleep</code> here.  That function is a POSIX function, rather than a C standard library call, but it appears that you are running on a POSIX machine anyway, judging by the inclusion of <code>unistd.h</code> in the code.</p>
    </div>