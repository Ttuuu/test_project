<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Before getting into what can be improved, the good points are that there are no global variables and there are many small functions that perform small operations which makes the code easier to read, write, maintain and debug.</p>

<h2>Prefer <code>calloc</code> Over <code>malloc</code> for Arrays</h2>

<p>There are 3 major allocation function in the C programming language, they are <code>void *malloc(size_t size_to_allocate)</code>, <a href="https://en.cppreference.com/w/c/memory/calloc" rel="nofollow noreferrer">void* calloc( size_t number_of_items, size_t item_size )</a> and <a href="https://en.cppreference.com/w/c/memory/realloc" rel="nofollow noreferrer">void *realloc( void *ptr, size_t new_size )</a>. The best for initially allocating arrays is <code>calloc</code> because it clearly shows that you are allocating an array, and because it zeros out the memory that is being allocated.</p>

<h2>Checking for Memory Allocation Errors</h2>

<p>When you call <code>malloc()</code>, <code>calloc()</code> or <code>realloc()</code> you should always check to see if memory was actually allocated before using the mempory. If any of these functions fail to allocate memory then it returns <code>NULL</code>. Reference through a null pointer results in unknown behavior, which is usually a bug. The code already checks for memory allocation errors, however, it is using <code>assert(goodIdxs != NULL);</code> to implement the check. The problem with using <code>assert</code> is that it may be <a href="https://stackoverflow.com/questions/23709259/optimization-asserts-and-release-mode">optimized away</a> when the code is compiled for production using the compiler flag <code>-O3</code> and the <a href="https://www.geeksforgeeks.org/assertions-cc/" rel="nofollow noreferrer">NODEBUG</a> flag. To catch a memory allocation error in production it is better to use <code>if</code> statements.</p>

<pre><code>    int *goodIdxs = malloc(gIdx * sizeof(int));
    if (goodIdxs == NULL)
    {
        fprintf(stderr, "Memory allocation failed for goodIdxs\n");
        exit(EXIT_FAILURE);
    }
</code></pre>

<h2>DRY Code</h2>

<p>There is a programming principle called the <a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself" rel="nofollow noreferrer">Don't Repeat Yourself Principle</a> sometimes referred to as DRY code. If you find yourself repeating the same code mutiple times it is better to encapsulate it in a function. If it is possible to loop through the code that can reduce repetition as well. There is code in the function <code>void insertOccurrence(Num **lPtr, int v)</code> that repeats, specifically the code to create an <code>num</code> struct. It would be better to have a function that creates a <code>num</code> structure and fills it. There is also code in <code>main()</code> that is duplicated</p>

<pre><code>    printf("Array 1 dimensions: ");
    // get size of, allocate, and fill array 1
    getArrSize(&amp;rows1, &amp;cols1);
    arr1 = allocateArr(rows1, cols1);
    printf("Enter %d rows of %d numbers: ", rows1, cols1);
    fillArr(arr1, rows1, cols1, &amp;occ1);
</code></pre>

<p>This could be turned into a function called <code>int **getMatrix()</code> that returns a filled matrix. Among other things this would reduce the number of variables needed in <code>main()</code>.</p>

<h2>Readability and Possible Bug Reduction</h2>

<p>The variables in main should be initialized when they are declared, this reduces possible future bugs in the code (using uninitialized variables). To make the code more readable it would be better if each variable was declared and initialized on it's own line:</p>

<pre><code>int main() {
    int rows1 = 0;
    int cols1 = 0;
    int rows2 = 0;
    int cols2 = 0;
    Num *occ1 = NULL;
    Num *occ2 = NULL;
    int **arr1 = NULL;
    int **arr2 = NULL;
</code></pre>

<h2>Complexity</h2>

<p>The functions <code>main()</code> and <code>insertOccurrence()</code> are too complex (each function does too much within the function). A third function that is on the borderline of too complex is the function <code>int isSubset(Num *occA, Num *occB)</code>. As mentioned above in <code>DRY Code</code> <code>insertOccurrence()</code> can be simplified by creating a function who's sole purpose is to allocate a <code>num</code> struct and fill it with the proper values. The while loop in the function <code>isSubset()</code> could probably be broken out into 2 functions. </p>

<p>As programs grow in size the use of <code>main()</code> should be limited to calling functions that parse the command line, calling functions that set up for processing, calling functions that execute the desired function of the program, and calling functions to clean up after the main portion of the program. As noted in the <code>DRY Code</code> section the complexity of main can be reduced by adding a function that creates matrices.</p>

<p>There is also a programming principle called the Single Responsibility Principle that applies here. The <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" rel="nofollow noreferrer">Single Responsibility Principle</a> states:</p>

<blockquote>
  <p>that every module, class, or function should have responsibility over a single part of the functionality provided by the software, and that responsibility should be entirely encapsulated by that module, class or function.</p>
</blockquote>

<h2>int *checkCondition(int **arr, int rows, int cols, int *nOfGoodIdxs)</h2>

<p>Many C compilers would have flagged the following as a syntax error because C arrays can't be created using a variable as the size. The code will have to allocate the <code>goodIdxsTemp</code> array instead.</p>

<pre><code>int *checkCondition(int **arr, int rows, int cols, int *nOfGoodIdxs) {
    int goodIdxsTemp[cols];
</code></pre>

<p>It would be better if the code was:</p>

<pre><code>int *safe_calloc(size_t count, size_t size, char *estring)
{
    int *allocatedArray = calloc(count, size);
    if (allocatedArray == NULL)
    {
        fprintf(stderr, "%s\n", estring);
        exit(EXIT_FAILURE);
    }

    return allocatedArray;
}

int *checkCondition(int **arr, int rows, int cols, int *nOfGoodIdxs) {
    char *estring = "In checkCondition memory allocation failed for goodIdxsTemp";
    int *goodIdxsTemp = safe_calloc(cols, sizeof(*goodIdxsTemp), estring);

    int gIdx = 0;

    for(size_t i = 0; i &lt; cols; i++) {
        if(arr[rows-1][i] &lt; 0) {
            goodIdxsTemp[gIdx++] = i;
        }
    }

    estring = "In checkCondition memory allocation failed for goodIdxs";
    int *goodIdxs = safe_calloc(gIdx, sizeof(*goodIdxs), estring);
    memcpy(goodIdxs, goodIdxsTemp, gIdx*sizeof(int)); // copy the content to the new array

    *nOfGoodIdxs = gIdx;
    return goodIdxs;
}
</code></pre>

<h2>Algorithm</h2>

<p>Another way to simplify the program would be to separate the linked list into 2 separate structure types, one to implement the linked list, and a second to implement the <code>num</code> structure.</p>

<pre><code>typedef struct num {
    int val;
    int occurrences;
} Num;

typedef struct num_node {
    Num data;
    struct num_node *nextPtr;
} Num_Node;
</code></pre>

<p>This would allow for standard linked list operations such as:  </p>

<ul>
<li><code>create_node()</code></li>
<li><code>delete_node()</code></li>
<li><code>insert_node()</code></li>
<li><code>add_node()</code></li>
<li>a traverse list function</li>
</ul>

<p>Other functions could then just process the <code>num</code> structure.</p>

<p>Please note that a separate <code>typedef</code> statement is not needed for the structures.</p>
    </div>