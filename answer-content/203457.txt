<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><s>First of all you should know that the script doesn't syllabize properly for every word. For example if you give the word <strong>authenticated</strong> the function returns <strong>['aut', 'hen', 'ti', 'ca', 'ted']</strong> which is incorrect. The correct case would be <strong>['au','then','ti','cat','ed'].</strong> However I do not know how to fix that.</s></p>

<p>Edit: The point made above doesn't stand since this script isn't for the english language.</p>

<p>Second you have a lot of <em>ifs</em> where you check if a character is a vowel like this:</p>

<pre><code>if word[let_ind] in self.vowels:
        last_was_vowel = True
    else:
        last_was_vowel = False
</code></pre>

<p>They could be written better like this:</p>

<pre><code>last_was_vowel = word[let_ind] in self.vowels
</code></pre>

<p>Or even better I would have written a function that checks if a letter is a vowel.</p>

<pre><code>def is_vowel(self, char):
    return char in self.vowels
</code></pre>

<p>The first <em>if</em> in your for loop </p>

<pre><code>if let_ind != len(word) - 1:
    if word[let_ind + 1] in self.vowels:
        next_is_vowel = True
    else:
        next_is_vowel = False
else:
    syllab = word[keep_index:]
    syllabs.append(syllab)
    break
</code></pre>

<p>checks if the next one is a vowel except the last char.
It would be more good looking like this:</p>

<pre><code>for pos, char in enumerate(word[:-1]):
    next_is_vowel = self.is_vowel(word[pos + 1])
    ...

syllab = word[keep_index:]
syllabs.append(syllab)
</code></pre>

<p>We enumerate through the word to get the position of the letter and 
the letter itself. The <strong>word[:-1]</strong> means we are going to iterate the whole word except its last letter.</p>

<p>Lastly you got 2 <em>ifs</em> here that do the same thing. You also don't need the keep_index.</p>

<pre><code>if next_is_vowel and not last_was_vowel and syllab:
    syllabs.append(syllab)
    syllab = ""

elif next_is_vowel and word[let_ind] not in self.vowels and syllab:
    syllabs.append(syllab)
    syllab = ""
</code></pre>

<p>The could be easily written as one <em>if</em> like this: </p>

<pre><code>if next_is_vowel and syllab and not (last_was_vowel and self.is_vowel(char)):
    syllabs.append(syllab)
    syllab = ""
</code></pre>

<p>The place where the keep index was used can be replaced like this
from <code>syllab = word[keep_index:]</code>  to <code>syllab += word[-1]</code></p>

<p>With these changes in mind the code looks now like this.</p>

<pre><code>def is_vowel(self, char):
    """

    :param char: the character to check
    :return: bool depending if the char is a vowel
    """
    return char in self.vowels

def syllabicate(self, word):
    """
    :param word: The word to be syllabicated
    :return: The syllabicated list that contains syllabs
    """
    word = word.lower()
    syllabs = []
    syllab = ""
    last_was_vowel = False
    # we don't want the last character

    for pos, char in enumerate(word[:-1]):
        next_is_vowel = self.is_vowel(word[pos + 1])

        if next_is_vowel and syllab and not (last_was_vowel and self.is_vowel(char)):

            syllabs.append(syllab)
            syllab = ""

        syllab += char
        last_was_vowel = self.is_vowel(char)

    syllab += word[-1]
    syllabs.append(syllab)

    return syllabs
</code></pre>
    </div>