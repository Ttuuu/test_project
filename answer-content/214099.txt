<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>For loop inside <code>Render()</code></strong></p>

<p>The loop gets called each time the component re-renders, it's a <code>1280</code> pushes to an array and that can be a performance issue, you can set it in <code>componentDidMount</code> or even outside the class since it's not dependent on its data, </p>

<p>Consider <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from" rel="nofollow noreferrer">Array.from</a> to create and fill the array without creating an intermediate one.</p>

<pre><code>const range = Array.from({length: 1280}, (_, i) =&gt; i);
</code></pre>

<p>And since you're filling it with <code>int</code>s and the <code>select</code> value is an <code>int</code> you don't really need <code>parseInt</code>.</p>

<p><strong>Using <code>document.querySelector</code> to read values</strong></p>

<blockquote>
  <p>Basically, you can't easily rely on the input field because the state needs to come from
  the React app's state, not from the browser's idea of what the value should be.</p>
</blockquote>

<p>See more explanation in <a href="https://www.peterbe.com/plog/onchange-in-reactjs" rel="nofollow noreferrer">this blog post</a>.</p>

<p>You should instead use the state to store the values of the inputs. ( see code snippet below )</p>

<p><strong>Accessing the DOM using <code>document.querySelector</code></strong></p>

<blockquote>
  <p>In React, we do not directly manipulate the actual DOM. Instead, we must manipulate the virtual representation and let React take care of changing the browser's DOM.</p>
</blockquote>

<p>Check <a href="https://www.fullstackreact.com/p/jsx-and-the-virtual-dom/" rel="nofollow noreferrer">this article</a> for in depth explanation and the <a href="https://davidwalsh.name/get-react-component-element" rel="nofollow noreferrer">different ways to access the DOM</a>.</p>

<p>Using <code>refs</code>, instead of doing <code>document.querySelector('video')</code>, you can add a <code>ref</code> like : <code>&lt;video src={video} controls ref={video =&gt; this.video = video}/&gt;</code> then use <code>this.video</code> to do what you would do with a regular html element.</p>

<p><a href="https://blog.cloudboost.io/using-html5-canvas-with-react-ff7d93f5dc76" rel="nofollow noreferrer">Using html5 canvas with react</a></p>

<pre><code>import React, { Component } from 'react';
import './App.css';
import video from './video.mp4';
import watermark from './watermark.png';

const range = Array.from({ length: 1280 }, (_, i) =&gt; i);

class App extends Component {
  constructor() {
    super();
    this.state = {
      select: 0,
      live: false,
      positionX: 0,
      positionY: 0,
      checked: false
    };
  }

  componentDidMount() {
    const context = this.canvas1.getContext('2d');
    context.drawImage(this.video, 0, 0, 720, 1280);
    context.drawImage(this.watermark, this.state.select, this.state.select);

    if (this.state.live) {
      this.setState({ image: canvas.toDataURL() });
    }
  }

  render() {
    return (
      &lt;div className="app"&gt;
        &lt;video src={video} controls ref={video =&gt; this.video = video} /&gt;
        &lt;div&gt;
          &lt;div className="watermarkButton" style={{}}&gt;

            &lt;span className="watermarkButtonX"&gt;Watermark X
              &lt;select
                className="positionX"
                onChange={value =&gt; this.setState({ select: value, positionX: value })}
                value={this.state.positionX}&gt;
                {range.map(i =&gt; (
                  &lt;option key={i} value={i}&gt;{i}&lt;/option&gt;
                ))}
              &lt;/select&gt;
            &lt;/span&gt;

            &lt;span className="watermarkButtonY"&gt;Watermark Y
              &lt;select
                className="positionY"
                onChange={value =&gt; this.setState({ select: value, positionY: value })}
                value={this.state.positionY}&gt;
                &gt;
                {range.map(i =&gt; (
                  &lt;option key={i} value={i}&gt;{i}&lt;/option&gt;
                ))}
              &lt;/select&gt;
            &lt;/span&gt;

            &lt;span&gt;Live&lt;/span&gt;
            &lt;input
              type="checkbox"
              name="live"
              checked={this.state.live}
              onChange={e =&gt; this.setState({ live: e.target.value })}
            /&gt;
          &lt;/div&gt;


          &lt;button className="watermarkButton watermarkSubmit"
            onClick={() =&gt; {
              const context = this.canvas2.getContext('2d');
              context.drawImage(this.video, 0, 0, 1280, 720);
              context.drawImage(this.watermark, this.state.positionX, this.state.positionY);
              this.setState({ image: canvas.toDataURL() });
            }}&gt; Watermark! &lt;/button&gt;

          &lt;canvas ref={canvas =&gt; this.canvas1 = canvas} width={1280} height={720} /&gt;
          &lt;canvas ref={canvas =&gt; this.canvas2 = canvas} width={1280} height={720} /&gt;

          &lt;img
            alt="watermarks"
            className="watermark"
            src={watermark}
            style={{ visibility: 'visible' }}
            ref={watermark =&gt; this.watermark = watermark}
          /&gt;
          &lt;img
            alt="watermarks"
            className="imageDisplay"
            height="405px"
            width="560px"
            src={this.state.image}
          /&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    );
  }

}

export default App;
</code></pre>
    </div>