<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Hello and welcome to CodeReview!</p>

<p>A random list of observations:</p>

<h2>Type hints</h2>

<p>For your members, </p>

<pre><code>    self.vert_coords = []
</code></pre>

<p>can be (assuming it's a list of floats)</p>

<pre><code>self.vert_coords: List[float] = []
</code></pre>

<p>and so on. This helps for a few reasons - smart IDEs will notice if you're using the member with an unexpected type and can warn you; autocomplete is better; and this is clearer to other programmers (including you in six months).</p>

<h2>Typo</h2>

<p><code>matarials</code> = <code>materials</code></p>

<h2>Generation/comprehension</h2>

<p>This:</p>

<pre><code>            face_i = []
            text_i = []
            norm_i = []
            for v in values[1:4]:
                w = v.split('/')
                face_i.append(int(w[0]) - 1)
                text_i.append(int(w[1]) - 1)
                norm_i.append(int(w[2]) - 1)
</code></pre>

<p>can be expressed a number of different ways; one example:</p>

<pre><code>parts = [
   [
       int(w) - 1 for w in v.split('/')
       for w in v.split('/')
   ]
   for v in values[1:4]
]

self.vertex_index.append([part[0] for part in parts])
self.texture_index.append([part[1] for part in parts])
self.normal_index.append([part[2] for part in parts])
</code></pre>

<p>Or you could also make a function that yields:</p>

<pre><code>def get_vertices(values):
   for v in values[1:4]:
      yield int(v.split('/')[0]) - 1

...

self.vertex_index = list(get_vertices(values))
</code></pre>

<h2>Nomenclature</h2>

<p>Re. <code>def MTL</code> - usually methods in Python are lower-case.</p>

<p>Also, this:</p>

<p><code>modelMatrices</code></p>

<p>is typically in snake_case, i.e. <code>model_matrices</code></p>

<h2>Array definition</h2>

<p>This:</p>

<pre><code>        vert_instance = np.array([[0.0, 0.0, 0.0], [1.0, 1.0, 1.0]])
</code></pre>

<p>is more legible as</p>

<pre><code>vert_instance = np.array([
   [0.0, 0.0, 0.0],
   [1.0, 1.0, 1.0],
])
</code></pre>

<h2>Computers are good at loops</h2>

<pre><code>    glVertexAttribDivisor(3, 1)
    glVertexAttribDivisor(4, 1)
    glVertexAttribDivisor(5, 1)
    glVertexAttribDivisor(6, 1)
</code></pre>

<p>can become</p>

<pre><code>for i in range(3, 7):
    glVertexAttribDivisor(i, 1)
</code></pre>

<h2>Indentation</h2>

<p>Your <code>vertex_obj</code> string has a large amount of indentation. I'm not sure why this is, but either way, that string is better off living in a file that you read in when you need it. It's more maintainable that way.</p>
    </div>