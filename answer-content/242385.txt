<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This right here is where I would start asking myself if this is a good idea or if there isn't a better way to achieve this:</p>

<blockquote>
  <p>The first non-self parameter of <code>__init__</code> is automatically grabbed by
  the metaclass and cached, so we don't need to set it as an instance
  attribute. If we write self.product_id = product_id, it would raise an
  error when we try to initialize a new member.</p>
</blockquote>

<p><strong>This behavior is not obvious and it is not even properly documented, because your class does not have a <code>docstring</code>.</strong></p>

<p>Honestly, I don't quite get your enum story, either. At face value you just have a class that you can inherit from to make your class a singleton class depending on the arguments. For this I might use something like this:</p>

<pre><code>class UniqueInstances:
    """Makes sure that each instance exists only once.
    Subclasses must implement __hash__ and __eq__ for this to work.
    Note that new instances are being created,
    but get discarded if they already exist.
    """
    __instances = {}
    def __new__(cls, *args, **kwargs):
        self = super().__new__(cls)
        self.__init__(*args, **kwargs)
        return self.__instances.setdefault(self, self)

    def __hash__(self):
        raise NotImplementedError

    def __eq__(self, other):
        raise NotImplementedError

class Product(UniqueInstances):
    def __init__(self, product_id, name):
        self.product_id = product_id
        self.name = name

    def __hash__(self):
        return self.product_id

    def __eq__(self, other):
        return self.product_id == other.product_id

p1 = Product(1001, "Test")
p2 = Product(1001, "Foo")
print(p1 is p2, p1.name, p2.name)
# True Foo Foo
</code></pre>

<p>This is cheating a bit, because it <em>does</em> create a new instance, but it gets discarded if an equal instance already exists. If this still qualifies as <em>lazy</em>, I'm not sure.</p>

<p>It does however have the advantage that it is more obvious what happens, since you have to define <code>__hash__</code> and <code>__eq__</code> which is used to determine if an instance already exists.</p>
    </div>