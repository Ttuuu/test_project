<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There no such thing like an interface class (term used in initial version of post). You have interfaces and classes implementing the interfaces.</p>

<p>I don't see any <code>List&lt;Document&gt;</code> in your code, but If you have defined the list as <code>List&lt;IDocument&gt;</code>, you must stick to this definition. You cannot assign it a <code>List&lt;Document&gt;</code>. But you can add <code>Document</code> objects to this list.</p>

<p>Generally two types <code>T&lt;A&gt;</code> and <code>T&lt;B&gt;</code> are not assignment compatible, even if <code>A</code> and <code>B</code> are assignment compatible. An exception is when the <code>in</code> or <code>out</code> keywords are used in generic interfaces. But this can only be done if the generic type occurs exclusively as input or exclusively as output as explained in <a href="https://www.codeproject.com/Articles/86419/Variance-in-C-NET-4-0-Covariance-and-Contravarianc" rel="nofollow noreferrer">Variance in C#.NET 4.0 Covariance and Contravariance</a>.</p>

<p>I would convert the list properties <code>Documents</code> and <code>Pages</code> to getter-only properties.</p>

<pre><code>public interface IPortfolio
{
    string FirstName { get; set; }
    string LastName { get; set; }
    string Name { get; set; }
    int Id { get; set; }
    List&lt;IDocument&gt; Documents { get; }
}
</code></pre>

<p>And create the class like this</p>

<pre><code>public class Portfolio : IPortfolio
{
    public string FirstName { get; set; }
    public string LastName { get; set; }
    public string Name { get; set; }
    public int Id { get; set; }
    public List&lt;IDocument&gt; Documents { get; } = new List&lt;IDocument&gt;();
}
</code></pre>

<p>This makes the <code>Documents</code> property read-only. The list itself remains read/write.</p>

<pre><code>var portfolio = new Portfolio();
portfolio.Documents.Add(new Document());
</code></pre>
    </div>