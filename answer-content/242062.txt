<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>toRoman.h
</code></pre>

<p>Is there any reason to expose <code>DecimalToRoman</code> to callers?</p>

<hr>

<pre><code>char * toRoman(int n)
</code></pre>

<p>Nit: it might be preferable to take <code>unsigned</code> rather than <code>int</code> as you cannot really handle negative numbers.</p>

<hr>

<pre><code>if (n &lt; 1) return NULL;
</code></pre>

<p>Seems reasonable.  If you took unsigned, then you would only have to handle 0.  In that case, it might make sense to return <code>""</code> so you always return a valid string.</p>

<p>On second thought, there's sort of an upper-bound on what you can reasonably write as a roman numeral.  Does it make sense to write two billion in terms of thousands?  If you choose an upper bound, you can make assumptions about the length of your buffer.</p>

<hr>

<pre><code>const DecimalToRoman numbers[] = {
....
</code></pre>

<p>I love that this is written out so clearly.  Nice.</p>

<hr>

<pre><code>size_t resultLen = 1;
</code></pre>

<p>Help a reader out by saying why you init to 1.  IMO it's not obvious until you get to malloc.</p>

<pre><code>int tmp = n;
for (size_t i = 0; i &lt; sizeof numbers / sizeof(DecimalToRoman) &amp;&amp; tmp; i++) {
    while(tmp &gt;= numbers[i].decimal) {
        tmp -= numbers[i].decimal;
        resultLen += strlen(numbers[i].roman);
    }
}
</code></pre>

<p>How about making this a function?  There's a common pattern:</p>

<pre><code>Type thing = init;
...actually figure out what thing is often with a loop...

// don't change thing anymore!
... use thing ...
</code></pre>

<p>This is almost always more clearly written as:</p>

<pre><code>Type const thing = createThing(init);
... use thing ...
</code></pre>

<p>But anyway back to this code.</p>

<pre><code>sizeof numbers / sizeof(DecimalToRoman)
</code></pre>

<p>How about making this a variable named <code>lenNumbers</code> or something like that?  Super nit: I like that you used parens for the type and not for the expression, but IMO it looks weird with the operator/.  More clear: <code>(sizeof numbers) / sizeof(DecimalToRoman)</code>.</p>

<hr>

<pre><code>if (result == NULL) {
    perror("allocate");
    return NULL;
}
</code></pre>

<p>Good.  I admit I usually <code>assert</code> in situations like this since there's not much you can do when you're out of memory (and it rarely happens in the things I do), but this is the party line.</p>

<hr>

<pre><code>memset(result, '\0', resultLen);
</code></pre>

<p>Isn't this overkill?  You're about to overwrite the memory anyway.  Could just set the last character to '\0` (and you might as well do that after you write the answer for cache locality).</p>

<hr>

<pre><code>        int j = 0;
        while (numbers[r].roman[j])
            result[i++] = numbers[r].roman[j++];
</code></pre>

<p>Better option: a <code>for</code> loop.  Best option: <code>strcpy</code>.</p>

<hr>

<p>You could remove the calls to strlen by storing the length in <code>DecimalToRoman</code>.  The lengths are tiny so this is more a question of simplicity than optimization.</p>

<hr>

<p>There's a common pattern in C APIs for returning buffers. The idea is you let the user pass in the buffer and you return an error code.  Something like:</p>

<pre><code>int getRomanNumerals(int nInput, char* strOut, int* nLen);
</code></pre>

<p>The return value is either success, failure, or "insufficient buffer" (you probably want an enum or a preprocessor <code>#define</code> for this).  In any case, the user passes in a buffer and the buffer's length.  You always set <code>nLen</code> to the number of bytes needed, and you set <code>strOut</code> if you have enough space (maybe you start setting <code>strOut</code> assuming the buffer is long enough, but stop writing if you run out of space and only need to set <code>nLen</code>).</p>

<p>This way the user can do crazy stuff like store the result in a weird place or maybe the user knows they don't have enough memory to store the whole thing etc.</p>
    </div>