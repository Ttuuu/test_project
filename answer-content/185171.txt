<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I will explicitly answer regarding your sieve and its performance.</p>

<p>Firstly, you should know that you cannot write an implementation of the Sieve of Eratosthenes without an array; that is core to its being.</p>

<p>However, your method of selection can be improved.</p>

<p>First, let us rewrite the sieve in terms of for-loops, since it is more natural to do so. I will also change your implementation from checking primeness to checking compositeness, which avoids the initialization step.</p>

<pre><code>boolean[] isComposite = new boolean[n];
isComposite[0] = isComposite[1] = true;
for (int i = 2; i &lt; Math.sqrt(n); ++i) {
    if (!isComposite[i]) {
        for (int j = i * i; j &lt; n; j *= i) {
            isComposite[j] = true;
        }
    }
}
</code></pre>

<p>This is the classical implementation of the sieve. The resulting array <code>isComposite</code> will hold a value of <code>false</code> for prime values.</p>

<p>Now, observe that the first time you ever see a prime, you remove all of its multiples from contention. We can therefore store a separate list containing just these primes. (We also have to loop over the back half of the array to get any primes <code>&gt;= sqrt(n)</code>.)</p>

<pre><code>List&lt;Integer&gt; primes = new ArrayList&lt;Integer&gt;();

boolean[] isComposite = new boolean[n];
isComposite[0] = isComposite[1] = true;
for (int i = 2; i &lt; Math.sqrt(n); ++i) {
    if (!isComposite[i]) {
        primes.add(i);
        for (int j = i * i; j &lt; n; j *= i) {
            isComposite[j] = true;
        }
    }
}
for (int i = (int)Math.sqrt(n); i &lt; n; ++i) {
    if (!isComposite[i]) {
        primes.add(i);
    }
}
</code></pre>

<p>Finally, we can determine the range of primes we want. To do this, perform a binary search on <code>primes</code> to find the lower and upper bound. Then, select a random element from the list.</p>

<p>You may wish to save this list of primes, so that it only need be computed once. In particular, observe that the sieve of Eratosthenes can be "paused" and "resumed" in computation, so that the results of previous computations may be used in future computation. I leave this as an exercise to the reader.</p>
    </div>