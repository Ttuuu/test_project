<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Headers</h2>

<p>Since you're using <code>std::int64_t</code>, you need to add</p>

<pre><code>#include &lt;cstdint&gt;
</code></pre>

<p>You may be getting away without it on your current compiler, if the definition is included as a side-effect of your existing includes, but it's not guaranteed to work on other compilers (including future versions of what you're using now!).</p>

<p>Similarly, for <code>std::string</code>, you need</p>

<pre><code>#include &lt;string&gt;
</code></pre>

<h2>Know your standard library</h2>

<p>I'm inferring since you say "<em>I am implementing data structures concept by myself</em>" that you want to write your own hash table implementation, rather than using the provided <code>std::unordered_map</code>.  But there are other areas where you would benefit from using Standard Library functions.</p>

<p>Look at this function:</p>

<pre><code>int hashing(std::string name,int n){
    int len,sum=0;
    //converting string into char array...
    len=name.length();
    char temp[len+1];
    std::strcpy(temp,name.c_str());
    //calculating hash value...
    for(int i=0;i&lt;len;i++){
        sum=sum+temp[i];
    }
    return (sum%n);
}
</code></pre>

<p>Firstly, there's no need to copy into a plain <code>char</code> array (and how we do this is non-standard, as C++ doesn't have variable-length arrays) - we could simply access the C++ string directly:</p>

<pre><code>int hashing(const std::string&amp; name, int n)
{
    int sum = 0;
    for (size_t i = 0;  i &lt; name.length();  ++i) {
        sum += name[i];
    }
    return(sum%n);
</code></pre>

<p>Or, more succinctly, using range-based <code>for</code>:</p>

<pre><code>int hashing(const std::string&amp; name, int n)
{
    int sum = 0;
    for (char c: name) {
        sum += c;
    }
    return(sum%n);
}
</code></pre>

<p>We can reduce what we write further, by using <code>std::accumulate</code> (from the <code>&lt;numeric&gt;</code> standard header):</p>

<pre><code>int hashing(const std::string&amp; name, int n)
{
    return std::accumulate(name.begin(), name.end(), 0) % n;
}
</code></pre>

<p>Having said all that, one thing you should be learning about data structures is that there are better hash functions to minimise collisions from personal names.</p>

<h2>Don't use integers for phone numbers</h2>

<p>Perhaps phone numbers in your country don't begin with one or more zeros.  But they certainly do in mine (and <code>0</code> or <code>00</code> makes a big difference).  You might also need extension numbers, or a pause during dialling.  And I don't think any country has positive and negative phone numbers.  So despite their name, phone "numbers" are not like arithmetic numbers - use a string representation instead.</p>

<h2>Always check for errors when reading input</h2>

<p>We need to be careful when we write things such as</p>

<pre><code>std::cin &gt;&gt; name &gt;&gt; phoneNumber;
</code></pre>

<p>Before we can use <code>name</code> or <code>phoneNumber</code>, we need to test whether they were successfully assigned (the <code>&gt;&gt;</code> operator doesn't throw exceptions - we need to test for ourselves).  Input streams have a handy conversion to boolean that makes this test easy:</p>

<pre><code>if (std::cin &gt;&gt; name &gt;&gt; phoneNumber) {
    // use name and phoneNumber
    // ...
} else {
    std::cerr &lt;&lt; "Reading failed" &lt;&lt; std::endl;
    // and some recovery action
    // ...
}
</code></pre>
    </div>