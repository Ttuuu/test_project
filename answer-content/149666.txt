<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>For starter, you don't need to use a global index. Python tuples make it easy to return several values at once, you can return the new index with the deserialized value:</p>

<pre><code>    @staticmethod
    def deserialize(source):
        def _helper(index):
            if source[index] == '#':
                return None, index + 1

            value = source[index]
            left, index = _helper(index + 1)
            right, index = _helper(index)
            return Node(value, left, right), index
        return _helper(0)[0]
</code></pre>

<p>Now, what if I what to serialize the node <code>Node('#', None, None)</code>? I will get <code>['#', '#', '#']</code> as <code>output</code> that will get deserialized as <code>None</code>. Not that ideal. If you want to keep this intermediate format, you should at least allow the user to chose its sentinel value. Using a parameter with a default value in both <code>serialize</code> and `deserialize is a good option.</p>

<p>I would also improve the interface of your class: turning <code>serialize</code> into a method and <code>deserialize</code> into a <code>classmethod</code>. This allow for ease of use and easy subclassing:</p>

<pre><code>class Node(object):
    ...

    def serialize(self, sentinel='#'):
        serial = [self.value]
        if self.left is None:
            serial.append(sentinel)
        else:
            serial.extend(self.left.serialize(sentinel))
        if self.right is None:
            serial.append(sentinel)
        else:
            serial.extend(self.right.serializr(sentinel))
        return serial

    @classmethod
    def deserialize(cls, source, sentinel='#'):
        def _helper(index):
            if source[index] == sentinel:
                return None, index + 1

            value = source[index]
            left, index = _helper(index + 1)
            right, index = _helper(index)
            return cls(value, left, right), index
        return _helper(0)[0]
</code></pre>

<p>And at the very last, I would provide default values for the <code>left</code> and <code>right</code> parameters:</p>

<pre><code>class Node(object):
    def __init__(self, value, left=None, right=None):
        self.value = value
        self.left = left
        self.right = right
</code></pre>

<p>So I can more easily write trees:</p>

<pre><code>t = Node(13, Node(8), Node(15, right=Node(18)))
t.serialize()
# [13, 8, '#', '#', 15, '#', 18, '#', '#']
</code></pre>

<hr>

<p>An other way to look at the problem is to take inspiration from <code>repr</code>. If we were to write an official representation for such objects, we could end up with:</p>

<pre><code>    def __repr__(self):
        return '{}(value={!r}, left={!r}, right={!r})'.format(self.__class__.__name__, self.value, self.left, self.right)
</code></pre>

<p>And <code>repr(t)</code> would be the string:</p>

<pre><code>Node(value=13, left=Node(value=8, left=None, right=None), right=Node(value=15, left=None, right=Node(value=18, left=None, right=None)))
</code></pre>

<p>It's a bit verbose, but it is serialized as a string. Using <code>eval</code> on this string would even deserialize it and return a <code>Node</code> equivalent to <code>t</code>. I however advise against the use of <code>eval</code> for deserialization purposes as it is too generic and thus dangerous.</p>

<p>Instead, serialization could return a more stripped form such as <code>(8,,)</code> for <code>Node(8)</code> or <code>('#',(5,,),)</code> for <code>Node('#', Node(5))</code> and deserialization would be a parser tailored for this representation.</p>

<p>Serialization is easy:</p>

<pre><code>    def serialize(self):
        return '({!r},{},{})'.format(
            self.value,
            '' if self.left is None else repr(self.left),
            '' if self.right is None else repr(self.right))
</code></pre>

<p>Deserialization is left as an exercise for the reader.</p>
    </div>