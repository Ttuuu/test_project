<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Make the template variable name extraction more strict</h3>

<p>The Awk command extracts the template variable names using the pattern <code>/{{ (.*) }}/</code>.
This leaves some room to human errors.
For example excess whitespace, as in <code>{{  MY_VAR   }}</code>.
This can be especially frustrating for trailing whitespace, which will be invisible when printing the list of missing variables.
I think it would be good to strip whitespaces after <code>{{</code> and before <code>}}</code>.</p>

<p>But that's not quite enough. Consider such line in the input:</p>

<blockquote>
<pre><code>hello there {{ MY_VAR1 }} foo bar {{ baz }}
</code></pre>
</blockquote>

<p>Although using multiple variables is explicitly unsupported,
this blows up in the face of the user in a nasty way:</p>

<blockquote>
<pre><code>$ MY_VAR1=foo/bar/bazo MY_VAR2=bar bash script.sh input.txt
a.sh: line 19: MY_VAR1 }} foo bar {{ baz: bad substitution
a.sh: line 33: MY_VAR1 }} foo bar {{ baz: bad substitution
hello there {{ MY_VAR1 }} foo bar {{ baz }}
some other stuff
some other stuff
foo: {{ MY_VAR2 }}
{{ MY_VAR2 }} is the value of MY_VAR2
</code></pre>
</blockquote>

<p>The error messages are unfortunately incomprehensible.</p>

<p>Since the template variable names are expected to take values from shell variables,
it would make sense to enforce a stricter pattern.</p>

<p>Even if the script is not intended to handle sophisticated scenarios,
I think it should handle such user mistakes more gracefully.</p>

<h3>Consistency</h3>

<p>The Sed command replacing template variable names with values uses the pattern <code>\\{\\{ *${var} *}}</code>.
This is not consistent with the one in the Awk command,
because of stripping the whitespace.
As mentioned earlier, I would adjust the Awk command to make it consistent.</p>

<h3>Error handling</h3>

<p>In the example above with a user mistake,
the script continued to execute even after the error.
To catch such issues and terminate the program early I recommend adding this line at the very beginning:</p>

<pre><code>set -euo pipefail
</code></pre>

<h3>Beware of some gotchas</h3>

<p><code>/</code> in the template variable names and values will break the Sed command.</p>

<p>As for the names, a more strict handling as mentioned earlier will prevent this issue.</p>

<p>As for the values, <code>/</code> appearing in the values doesn't sound too crazy,
because I can easily imagine wanting to insert path strings.
So I think it's a legitimate concern that would be good to address.</p>

<h3>Usability</h3>

<p>The limitation to one template variable per line seems a bit artificial.</p>

<p>Currently the script fails fast when the user mistakenly tries to use multiple per line, that's a good behavior to preserve.
(I'm pointing this out because if you simply enforce more stricter checking on the name patterns, this fail-fast behavior may no longer be the case.
And if I had to choose between cryptic failures, and quietly ignored missed template variables, I would prefer cryptic failures.)</p>
    </div>