<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There is some "noise" in your code, so it's a challenge to read it. </p>

<hr>

<blockquote>
<pre><code> #if DEBUG
      if (values == null)
      {
        throw new ArgumentNullException("values == null");
      }

 #endif
</code></pre>
</blockquote>

<p>Why do you only want to check the input in debug mode?</p>

<hr>

<p>The name <code>IndexShuffler</code> for that class is a little misleading and so are the names for its methods <code>Shuffle()</code> and <code>ShuffleWrap()</code> in that it's not a shuffle it performs. It's more like about selecting a random index or indices, so I would call it <code>RandomIndexer</code>.</p>

<p>I like the way you secure the uniqueness until all indices have been selected, but why iterate backwards?</p>

<hr>

<blockquote>
<pre><code>  indices = new int[size];
  // did not use Enumerable.Range() to avoid having a call to ToArray()
  for (int i = 0; i &lt; size; ++i)
  {
    indices[i] = i;
  }
</code></pre>
</blockquote>

<p>I don't see what you mean by "avoid having a call to ToArray()" - If you do like this:</p>

<pre><code>indices = Enumerable.Range(0, size).ToArray()
</code></pre>

<p>it's the same thing (almost).</p>

<hr>

<blockquote>
<pre><code>    selected[count] = values[shuffler[shuffler.Remaining() + count]];
</code></pre>
</blockquote>

<p>A construct like this tells me, that the interface or division of work is not right between <code>RandomSelector</code> and <code>IndexShuffler</code>. When you have to call a method of <code>shuffler</code> (the indexer) with a method on <code>shuffler</code> is signals that something is wrong and you should maybe rethink the design.</p>

<hr>

<p>I don't like that you have a class with two methods that operate on the same set of data but in two different ways: <code>Select()</code> and <code>SelectWrap()</code>, but it may be intentional?</p>

<p>You can restrict the use to one of the behaviors by providing a flag in the constructor to <code>RandomSelector</code>:</p>

<pre><code>public RandomSelector(IList&lt;T&gt; list, bool allowWrap = false) {}
</code></pre>

<p>and then only have one <code>Select(int n)</code> method. The inner algorithm for the two behaviors are almost identical except for the stop condition.</p>

<hr>

<blockquote>
<pre><code>public T[] Select(int count)
{
   ...
</code></pre>
</blockquote>

<p>Instead of returning <code>T[]</code> you could consider returning <code>IEnumerable&lt;T&gt;</code> instead in a way like this:</p>

<pre><code>public IEnumerable&lt;T&gt; Select(int count)
{
  if (count &lt; 0)
  {
    throw new ArgumentOutOfRangeException("count &lt; 0");
  }

  shuffler.Shuffle(count);

  while (count-- != 0)
  {
    yield return values[shuffler[shuffler.Remaining() + count]];
  }
}
</code></pre>

<p>It is more flexible this way.</p>

<hr>

<blockquote>
<pre><code>public int Remaining() =&gt; remaining;
</code></pre>
</blockquote>

<p>In <code>IndexShuffler</code> isn't it only valid for <code>Shuffle()</code>? As I understand it <code>ShuffleWrap()</code> has infinite number of remaining indices?</p>

<p><code>RandomSelector&lt;T&gt;.Select(int n)</code> fails if <code>n &gt; remaining</code>. Maybe I would return the remaining values or null if no remaining - a behavior like <code>Stream.Read()</code>.
And then it could have a flag <code>IsDone</code> that signals if it has no more items.</p>

<hr>

<p>I'm not sure I would separate the index selection from the main class, because it's actually the only thing that changes (the index), so doing everything in one class seems to be alright.</p>

<p>But if insisting on a separate indexer class I think I would implement <code>IEnumerator&lt;int&gt;</code>, so that I can call it like this:</p>

<pre><code>public IEnumerable&lt;T&gt; Select(int count)
{
  int counter = 0;
  while (counter &lt; count &amp;&amp; m_indexer.MoveNext())
  {
    yield return m_list[m_indexer.Current];
    counter++;
  }
}
</code></pre>

<p>and the entire <code>RandomSelector</code> class could look something like:</p>

<pre><code>  public class RandomSelector&lt;T&gt;
  {
    IList&lt;T&gt; m_list;
    RandomIndexer m_indexer;

    public RandomSelector(IList&lt;T&gt; list, bool allowWrap = false)
    {
      m_list = list;
      m_indexer = new RandomIndexer(list.Count, allowWrap);
    }

    public bool AllowWrap =&gt; m_indexer.AllowWrap;

    public void Reset()
    {
      m_indexer.Reset();
    }

    public IEnumerable&lt;T&gt; Select(int count)
    {
      int counter = 0;
      while (counter &lt; count &amp;&amp; m_indexer.MoveNext())
      {
        yield return m_list[m_indexer.Current];
        counter++;
      }
    }
  }
</code></pre>

<p>where the <code>RandomIndexer</code> is implemented as:</p>

<pre><code>  public class RandomIndexer : IEnumerator&lt;int&gt;
  {
    int[] m_indices;
    int m_currentIndex = -1;
    bool m_allowWrap;
    Random m_rand = new Random();

    public RandomIndexer(int size, bool allowWrap)
    {
      m_indices = Enumerable.Range(0, size).ToArray();
      m_allowWrap = allowWrap;
    }

    public bool AllowWrap =&gt; m_allowWrap;
    public int Size =&gt; m_indices.Length;
    public int Current =&gt; m_indices[m_currentIndex];

    object IEnumerator.Current =&gt; Current;

    public void Dispose()
    {

    }

    private void Swap()
    {
      int i = m_currentIndex;
      int j = m_rand.Next(m_currentIndex, Size);

      int temp = m_indices[i];
      m_indices[i] = m_indices[j];
      m_indices[j] = temp;
    }

    public bool MoveNext()
    {
      m_currentIndex++;

      if (m_currentIndex &gt;= Size)
      {
        Reset();
        if (!m_allowWrap)
          return false;

        m_currentIndex++;
      }

      Swap();

      return true;
    }

    public void Reset()
    {
      m_currentIndex = -1;
    }
  }
</code></pre>
    </div>