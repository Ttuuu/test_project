<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are some things I would do differently:</p>

<ul>
<li>create a class - this way you may share a web-scraping session between the methods and also share the base and start urls</li>
<li>use more meaningful variable and method names - for instance, <code>parse_doc()</code> could be <code>get_contact_info()</code>; you can re-use <code>page</code> variable names in different methods etc.</li>
<li>you can use <code>findtext()</code> method to get the text</li>
<li>I would also return from the scraper and print out the results outside of it </li>
<li>you are searching for the phone number twice - instead, use the <code>.search()</code> method and check if you've got a <code>match</code> object or none</li>
<li>you can pre-compile and re-use the regular expression pattern for the phone number</li>
</ul>

<p>Improved code:</p>

<pre><code>import re

import requests
from lxml import html


class CraigListScraper:
    PHONE_NUMBER_PATTERN = re.compile(r'\d{10}')

    def __init__(self, start_url, base_url):
        self.session = requests.Session()
        self.base_url = base_url
        self.start_url = start_url

    def scrape(self):
        page = self.session.get(self.start_url).text

        tree = html.fromstring(page)
        for row in tree.xpath('.//li[@class="result-row"]'):
            link = self.base_url + row.xpath(".//a[contains(concat(' ', @class, ' '), ' hdrlnk ')]/@href")[0]

            yield self.process_search_result(link)

    def process_search_result(self, medium_link):
        page = self.session.get(medium_link).text
        tree = html.fromstring(page)

        name = tree.findtext('.//span[@id="titletextonly"]')

        try:
            contact_info_link = self.base_url + tree.xpath('//section[@id="postingbody"]//a[@class="showcontact"]/@href')[0]
            phone_number = self.get_contact_info(contact_info_link)
        except IndexError:
            phone_number = ""

        return name, phone_number

    def get_contact_info(self, target_link):
        page = self.session.get(target_link).text

        match = self.PHONE_NUMBER_PATTERN.search(page)
        return match.group(0) if match else ""



if __name__ == '__main__':
    start_url = "http://bangalore.craigslist.co.in/search/reb?s=120"
    base_url = "http://bangalore.craigslist.co.in"

    scraper = CraigListScraper(start_url, base_url)
    for result in scraper.scrape():
        print(result)
</code></pre>
    </div>