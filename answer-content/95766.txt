<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><em>Disclaimer: I don't know sqat about Grails</em></p>

<h3><code>createUser</code></h3>

<p>I have a few concerns in this method.</p>

<p>Using <code>User.countByEmail</code> seems inefficient. I don't know Grails, but the name of this function suggests that it will scan all the users in the database, when it should stop after the first match, effectively doing an EXISTS query.</p>

<p>The string parameter in all the exceptions that you throw look like technical tags, not like user friendly messages, for example:</p>

<blockquote>
<pre><code>throw new CreateUserException("EMAIL_IN_USE")
</code></pre>
</blockquote>

<p>If they are technical tags that they will be used by another process, then to avoid potentially inconsistent uses, it would be better to convert these strings to constants, and refer to them by the constants.</p>

<p>Lastly, this looks like it should be executed in a transaction:</p>

<pre><code>    person.save()
    user.person = person
    user.save()
</code></pre>

<p>That is, if person is saved but an error occurs while saving user, your backend will be in an inconsistent state.</p>

<h3>REST API</h3>

<p>Some of the REST endpoints are unconventional:</p>

<ul>
<li><code>/api/user</code> : this is good for GET requests, to get all users</li>
<li><code>/create_user</code> : the common practice is the same endpoint as the one for getting all users, but with POST only</li>
<li><code>/login_user</code> : not too bad, but the qualifier "user" seems redundant: who else would ever login if not a user?</li>
</ul>

<h3>Unit tests</h3>

<p>I look forward for your unit tests, in a next question ;-)</p>
    </div>