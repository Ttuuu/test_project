<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Overall, you might want to consider using private encapsulation with <em>opaque type</em> instead of public structs, in order to block the users from accessing private parts of the data.</p>

<ul>
<li>Avoid casting the result of malloc since that only adds pointless clutter and could cause subtle bugs on old C90 compilers. I'd recommend using <code>new_node = malloc(sizeof *new_node);</code> instead.</li>
<li>Similarly, you don't need to cast when doing to void pointers, like <code>return (void*)s;</code>. The most common reason why people do this is because they compile C code with a C++ compiler, which is a plain bad idea.</li>
<li>Multiplying something with <code>sizeof(char)</code> is pointless clutter, since <code>sizeof(char)</code> is guaranteed to always be 1 and unlike the size for other types, it can never be anything else.</li>
<li>Don't prefix identifiers with underscore since that might collide with identifiers reserved for the compiler or the standard library.</li>
<li><p>Don't use <code>const void* const lhs</code> form for parameters to comparison functions. The canonical comparison functor in C uses the format of the bsearch/qsort functors:</p>

<p><code>int func (const void* obj1, const void* obj2)</code></p>

<p>It doesn't even make sense to <code>const</code>-qualify local function variables, since they are just a local variable to begin with and the caller couldn't care less about what your function does with that local variable internally.</p></li>
<li><p><code>const char *clhs = *(const char**)lhs;</code> is a non-compatible pointer conversion and as such very fishy. Overall, pointer-to-pointer cannot be converted to a pointer. And <code>void**</code> is not a generic pointer type like <code>void*</code>. And to cast away const is even more questionable since it invokes undefined behavior, like you do in <code>SLLChar* slhs = *((SLLChar**)lhs);</code>.</p>

<p>As a rule of thumb, whenever you find yourself in need of an explicit cast when dealing with void pointers, the root of the problem lies elsewhere. A properly written generic C code with void pointers shouldn't need casts <em>anywhere</em>. This is by far the biggest problem with your code. </p>

<p>I'd advise removing <em>all</em> casts from this program, then get to the bottom with each single pointer type warning you get from the compiler and fix the actual root cause.</p></li>
<li><p>Declare <code>for</code> loop iterators inside the <code>for</code> loop. This code won't compile in C90 anyway, so there is no reason not to do this.</p></li>
<li><p>To null terminate a string, use <code>s-&gt;data[0] = '\0';</code> rather than <code>strcpy(s-&gt;data, "");</code>. Clearer and faster.</p></li>
<li><p>My preferred style is to place all library includes in the .h file, not the .c file. This documents all dependencies of your code to the caller, who needs to know them. They shouldn't need to dig through the .c file when the program won't link for whatever reason.</p></li>
</ul>
    </div>