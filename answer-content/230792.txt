<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You have some odd stuff going on in <code>chunk_with_slice</code>; specifically these lines:</p>

<pre><code>def chunk_with_slice(input_list: List['T'], chunk_size: int) -&gt; List['T']:
    if chunk_size &lt;= 0 or not isinstance(input_list, list):
        return False
</code></pre>

<p>First, you're using <em>strings</em> to represent type vars (<code>List['T']</code>). As mentioned in the comments, strings are used to reference types that can't be referred to directly, such as needing a forward reference, or referencing something in a separate file that can't be imported. You don't need a forward reference here though. I'd just use <code>T</code>:</p>

<pre><code>def chunk_with_slice(input_list: List[T], chunk_size: int) -&gt; List[T]:
</code></pre>

<p>Second, think about those first two lines. You're basically saying "<code>input_list</code> is a list. But if it's not a list, return false". If you say that <code>input_list</code> is a list, you shouldn't be allowing other types in. You've told the type checker to help you catch type errors, so ideally you shouldn't also be trying to recover from bad data at runtime. If you expect that other types may be passed in, specify that using <code>Union</code> (such as <code>Union[List, str]</code> to allow a <code>List</code> and <code>str</code> in).</p>

<hr>

<p>I also agree with @AJ's "It is often better to just accept the type provided, and try to execute the function with the data given." comment. I'd specify <code>input_list</code> to be a <a href="https://docs.python.org/3/glossary.html#term-sequence" rel="nofollow noreferrer"><code>Sequence</code></a> instead. A <code>Sequence</code> is a container capable of indexing/slicing and <code>len</code>. This covers lists, tuples, strings, and others; including user-defined types. Forcing your caller to use a specific container type is unnecessary in most circumstances.</p>
    </div>