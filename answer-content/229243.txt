<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Welcome to Code Review and welcome to C++!  Let's go through the code and see what can be improved.</p>

<p>In C++, the headers of the form <code>&lt;xxx.h&gt;</code> are <em>deprecated</em>, which means they should not be used.  You are recommended to use</p>

<pre><code>#include &lt;ctime&gt;
</code></pre>

<p>instead of <code>#include &lt;time.h&gt;</code>.</p>

<p><code>using namespace std;</code> is considered bad practice because it causes name clashes.  It will cause problems when you try to use common identifiers like <code>size</code>, <code>count</code>, <code>find</code>, etc.  See <a href="https://stackoverflow.com/q/1452721">Why is <code>using namespace std;</code> considered bad practice?</a>.  Explicitly qualify the names with <code>std::</code> instead.  You will find that this makes the code more readable when you deal with larger programs and multiple libraries.</p>

<p>I notice that your code structure looks like this:</p>

<blockquote>
<pre><code>#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;time.h&gt;

int main()
{
    // ... sea of code ...
}
</code></pre>
</blockquote>

<p>You have one big <code>main</code> function that does pretty much everything.  Well, that's not good for readability.  We will try to break it down to small parts.  Each part should do one logical thing (e.g., ask for user input, randomly select rock/paper/scissor, etc.)</p>

<p>You represent paper/scissor/rock by the strings <code>"paper"</code>, <code>"scissor"</code>, and <code>"rock"</code>.  This is a bit wasteful.  You can define an enumeration like this:</p>

<pre><code>enum class Move {
    paper, scissor, rock
};
</code></pre>

<p>and define the game logic:</p>

<pre><code>enum class Result {
    win, lose, tie
};

constexpr bool beats(Move a, Move b)
{
    return (static_cast&lt;int&gt;(a) + 2) % 3 == static_cast&lt;int&gt;(b);
}

constexpr Result compete(Move a, Move b)
{
    if (beats(a, b))
        return Result::win;
    else if (beats(b, a))
        return Result::lose;
    else
        return Result::tie;
}
</code></pre>

<p>The game has some states â€” the player name and the statistics.  These can be wrapped in a class:</p>

<pre><code>class RPS_game {
public:
    // std::string_view requires &lt;string_view&gt;
    // std::uint_fast32_t requires &lt;cstdint&gt;
    RPS_game(std::string_view name, std::uint_fast32_t seed)
        :player_name{name}, seed{seed}
    {
    }

    void run();

    // ...
private:
    std::string player_name;
    int total_rounds = 0;
    int won_rounds = 0;
    int lost_rounds = 0;
    int tie_rounds = 0;

    // requires &lt;random&gt;
    std::mt19937 seed;
};
</code></pre>

<p>Then, you can initialize the game and run it like this: (I omitted the greeting part for the sake of simplicity)</p>

<pre><code>int main()
{
    std::string name;
    std::cout &lt;&lt; "What is your name? ";
    getline(std::cin, name);

    auto seed = static_cast&lt;std::uint_fast32_t&gt;(std::random_device{}());
    RPS_game game{name, seed};

    game.run();
}
</code></pre>

<p>You may have noticed that I stored the seed as a <code>std::mt19937</code> random number engine and use <code>std::random_device</code> to seed it, instead of using <code>rand</code> and <code>time</code>.  In C++, <code>std::rand</code> is considered to be a low quality random number generator because the underlying algorithm is not specified and the low bits are often non-uniform.  See <a href="https://stackoverflow.com/q/53040940">Why is the new random library better than <code>std::rand()</code>?</a>.</p>

<p>The following code generates the random move:</p>

<blockquote>
<pre><code>// generating a random number   

srand(static_cast&lt;unsigned int&gt;(time(NULL)));
computerNumber = rand() % 3 + 1;

// ________________________________ computer picking a element

if (computerNumber == 1) {
    computerchoice = "rock";
}
else if (computerNumber == 2) {
    computerchoice = "paper";
}
else {
    computerchoice = "scissor";
}
</code></pre>
</blockquote>

<p>This should be made into its own function:</p>

<pre><code>class RPS_game {
public:
    // ...
    Move generate_move();
    // ...
};
</code></pre>

<p>and you can implement it like this:</p>

<pre><code>Move RPS_game::generate_move()
{
    std::uniform_int_distribution&lt;int&gt; dist(0, 2);
    return static_cast&lt;Move&gt;(dist(seed));
}
</code></pre>

<p>Now is the game logic.  <code>goto</code> is not recommended because it makes the code harder to understand.  See <a href="https://homepages.cwi.nl/~storm/teaching/reader/Dijkstra68.pdf" rel="noreferrer">Edgar Dijkstra's <em>Go To Statement Considered Harmful</em> </a>.</p>

<p>When I try to summarize the game logic in the simplest way possible, here's what I get for one round:</p>

<pre><code>Result RPS_game::round()
{
    Move player_move = get_player_move();
    Move computer_move = generate_move();

    auto result = compete(player_move, computer_move);
    switch (result) {
    case Result::win:
        ++won_rounds;
        break;
    case Result::lose:
        ++lost_rounds;
        break;
    case Result::tie:
        ++tie_rounds;
        break;
    }
    ++total_rounds;
    return result;
}
</code></pre>

<p>And for the whole game:</p>

<pre><code>void RPS_game::run()
{
    do {
        round();
        display_stats();
    } while (wanna_play_again());

    std::cout &lt;&lt; "Goodbye!";
}
</code></pre>

<p>Following this approach, you can make your code more organized and more readable.</p>
    </div>