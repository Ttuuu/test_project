<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Global</strong></p>

<p>Why don't you use the usual serialization stuff instead of creating you Interface (which by the way has the same name than <code>System.Runtime.Serialization.ISerializable</code>) and doing some kind of weird tinkering to serialize and deserialize?</p>

<p><strong>Grid.cs</strong></p>

<p>1) <code>foreach (string squareData in msg[1].Split(',').ToList())</code> : you don't need to convert the result of <code>.Split()</code> to a List as <code>.Split()</code> returns an array and foreach works on arrays too.</p>

<p>2)</p>

<pre><code>private readonly int _gridSize;
public int GetSize()
{
    return _gridSize;
}
</code></pre>

<p>I don't realy get the point of <code>GetSize()</code> here, you could just change <code>_gridSize</code> to public and remove <code>GetSize()</code>.</p>

<p>3) You shouldn't use a <code>List&lt;List&lt;GridSquare&gt;&gt;</code> but instead you should use a <code>GridSquare[][]</code> it will at least help you being sure everything has been initialized.</p>

<p>4) Same kind of useless conversion than in <code>1)</code> : <code>return data + string.Join(",", info.ToArray());</code> you don't need to do <code>.ToArray()</code> here.</p>

<p><strong>Ship.cs</strong></p>

<p>1) <code>Length()</code> should be renamed to <code>GetLength()</code>.</p>

<p>2) You miss something like the ship's top left corner's position.</p>

<p><strong>GridSquare.cs</strong></p>

<p>1) Row and column are useless as we already know the current position because we must access the tile thanks to two index because the real board is <code>Grid.Squares</code> which is a <code>GridSquare[][]</code>.</p>

<p>2) ShipIndex doesn't look realy useful too, what was it meant to do?</p>

<p>3) Why is <code>_charted</code> <code>readonly</code>? It's meant to change when the opponent fires on it.</p>

<p><strong>Player.cs</strong></p>

<p>1) In the <code>PlaceShips()</code> method you are doing <code>catch (Exception) { }</code> which should i think never be done.</p>

<p>2) In the <code>Attack()</code> method you have </p>

<pre><code>switch(sea.Type)
{
    ...
    default:
        //unallowed operation that should be handled client-side
        break;
}
</code></pre>

<p>Well if it's not allowed then I think you should throw an exception.</p>

<p>I didn't test anything, assuming that you can do tests on your own, don't hesitate to reply through comments if you have any question.</p>
    </div>