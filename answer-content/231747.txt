<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><a href="https://redux.js.org/recipes/structuring-reducers/prerequisite-concepts" rel="nofollow noreferrer">Mutation is generally discouraged</a> in Redux (and React in general) because it breaks tooling/libraries that expect <code>x === y</code> to mean that <code>x</code> and <code>y</code> are the same <em>throughout time</em>.</p>

<p>If you use the <code>React.useEffect</code> or <code>React.useMemo</code> or <code>React.useCallback</code> dependency arguments, or <code>React.memo</code>, you'll run into problems if you mutate objects that you're passing.</p>

<p>We can clean up your code to avoid this mutation in several passes. First, we'll just remove the logs since they don't affect behavior (and they expose certain implementation details we'll want to change):</p>

<pre class="lang-js prettyprint-override"><code>switch (action.type) {
  case ADD_TASK: {

    let newBoard = state.boards.find(
      board =&gt; board.id === action.payload.boardId
    )

    let column = newBoard.columns.find(
      column =&gt; column.id === action.payload.columnId
    )
    column.tasks = [...column.tasks, action.payload.task]

    newBoard.columns = [...newBoard.columns, column]

    const addToBoard = state.boards.map(board =&gt; {
      if (board.id === action.payload.boardId) {
        board = newBoard
      }
      return board
    })

    const newState = {
      boards: addToBoard
    }
    return newState
  }
  //code omitted
}
</code></pre>

<p>Next, let's inline some of these variables. <code>newState</code> and <code>addToBoard</code> are each only used once:</p>

<pre class="lang-js prettyprint-override"><code>switch (action.type) {
  case ADD_TASK: {

    let newBoard = state.boards.find(
      board =&gt; board.id === action.payload.boardId
    )

    let column = newBoard.columns.find(
      column =&gt; column.id === action.payload.columnId
    )
    column.tasks = [...column.tasks, action.payload.task]

    newBoard.columns = [...newBoard.columns, column]

    return {
      boards: state.boards.map(board =&gt; {
        if (board.id === action.payload.boardId) {
          board = newBoard
        }
        return board
      })
    }
  }
  //code omitted
}
</code></pre>

<p>Next, consider this arrow function:</p>

<pre class="lang-js prettyprint-override"><code>      board =&gt; {
        if (board.id === action.payload.boardId) {
          board = newBoard
        }
        return board
      }
</code></pre>

<p>You've made your control-flow more complicated by reassigning the parameter, when an early return would do just fine:</p>

<pre class="lang-js prettyprint-override"><code>      board =&gt; {
        if (board.id === action.payload.boardId) {
          return newBoard
        }
        return board
      }
</code></pre>

<p>Also, we only actually need <code>newBoard</code> inside this function (it's never used more than once), so we can move it to where it's needed:</p>

<pre class="lang-js prettyprint-override"><code>switch (action.type) {
  case ADD_TASK: {
    return {
      boards: state.boards.map(board =&gt; {
        if (board.id === action.payload.boardId) {
          let newBoard = state.boards.find(
            _board =&gt; _board.id === action.payload.boardId
          )

          let column = newBoard.columns.find(
            column =&gt; column.id === action.payload.columnId
          )
          column.tasks = [...column.tasks, action.payload.task]

          newBoard.columns = [...newBoard.columns, column]
          return newBoard
        }
        return board
      })
    }
  }
  //code omitted
}
</code></pre>

<p>Now we begin to see some redundancy! For example, <code>newBoard</code> is being initialized to "the board with <code>id</code> equal to <code>action.payload.boardId</code>, but we already have a name for it: that's just <code>board</code>! So we can actually get rid of the name <code>newBoard</code> entirely:</p>

<pre class="lang-js prettyprint-override"><code>switch (action.type) {
  case ADD_TASK: {
    return {
      boards: state.boards.map(board =&gt; {
        if (board.id === action.payload.boardId) {
          let column = board.columns.find(
            column =&gt; column.id === action.payload.columnId
          )
          column.tasks = [...column.tasks, action.payload.task]

          board.columns = [...board.columns, column]
          return board
        }
        return board
      })
    }
  }
  //code omitted
}
</code></pre>

<p>But now we need to deal with the unnecessary mutations. We don't want to <em>modify</em> <code>board</code> (or any of its fields, like <code>columns</code>). Instead, we want to return a <em>copy with changes</em>.</p>

<p>We can do this in parts. For example, instead of</p>

<pre class="lang-js prettyprint-override"><code>          board.columns = [...board.columns, column]
          return board
</code></pre>

<p>we can instead say</p>

<pre class="lang-js prettyprint-override"><code>          return { ...board, columns: [...board.columns, column] }
</code></pre>

<p>which copies <code>board</code> and then replaces the <code>columns</code> field with the new given value.</p>

<p>We now have</p>

<pre class="lang-js prettyprint-override"><code>          let column = board.columns.find(
            column =&gt; column.id === action.payload.columnId
          )
          column.tasks = [...column.tasks, action.payload.task]
          return { ...board, columns: [...board.columns, column] }
</code></pre>

<p>and similarly, we can change the last two lines to obtain the non-modifying equivalent:</p>

<pre class="lang-js prettyprint-override"><code>          let column = board.columns.find(
            column =&gt; column.id === action.payload.columnId
          )
          return {
            ...board,
            columns: [
              ...board.columns, { ...column, tasks: [...column.tasks, action.payload.task] }
            ]
          }
</code></pre>

<p>However, at this point, it seems likely that you have a bug here. This change duplicates the entire column, in addition to adding the single task to it! It seems that you instead wanted to just add a task to the one column with matching ID, which we can do instead:</p>

<pre class="lang-js prettyprint-override"><code>switch (action.type) {
  case ADD_TASK: {
    return {
      boards: state.boards.map(board =&gt; {
        if (board.id === action.payload.boardId) {
          return {
            ...board,
            columns: board.columns.map(column =&gt; {
              if (column.id === action.payload.columnId) {
                return { ...column, tasks: [...column.tasks, action.payload.task] };
              }
              return column;
            })
          }
        }
        return board
      })
    }
  }
  //code omitted
}
</code></pre>

<p>This gives us a fully cleaned-up and immutable version of your code. Of course, you might rightfully observe that this is more-heavily nested than your original, which is a common result of switching to non-mutating state. You can use some existing ones or build your own.</p>

<p>For example, in this case, you're frequently using the following pattern:</p>

<ul>
<li>find a matching object in an array</li>
<li>return the array with all other objects unchanged, and apply a transformation to the one that matches</li>
</ul>

<p>This is easy to write as a helper function. Here <code>mapIf</code> is used to select the right board and then the right column:</p>

<pre class="lang-js prettyprint-override"><code>function mapIf(array, condition, transform) {
  return array.map(item =&gt; condition(item) ? transform(item) : item);
}

switch (action.type) {
  case ADD_TASK: {
    return {
      boards: mapIf(state.boards, board =&gt; board.id === action.payload.boardId, board =&gt; ({
        ...board,
        columns: mapIf(board.columns, column =&gt; column.columnId === action.payload.columnId, column =&gt;
          ({ ...column, tasks: [...column.tasks, action.payload.task] })
        ),
      })),
    }
  }
  //code omitted
}
</code></pre>

<p>Even this is still a bit long, so you can write more helpers, like a <code>hasId</code> higher-order function:</p>

<pre class="lang-js prettyprint-override"><code>function hasId(id) {
    return item =&gt; item.id === id
}
</code></pre>

<p><code>hasId</code> returns a function that checks whether its argument has the original <code>id</code>. So we can instead write:</p>

<pre class="lang-js prettyprint-override"><code>
function mapIf(array, condition, transform) {
  return array.map(item =&gt; condition(item) ? transform(item) : item);
}

function hasId(id) {
  return item =&gt; item.id === id
}

switch (action.type) {
  case ADD_TASK: {
    return {
      boards: mapIf(state.boards, hasId(action.payload.boardId), board =&gt; ({
        ...board,
        columns: mapIf(board.columns, hasId(action.payload.columnId), column =&gt;
          ({ ...column, tasks: [...column.tasks, action.payload.task] })
        ),
      })),
    }
  }
  //code omitted
}
</code></pre>

<p>Lastly, you frequently only want to touch one (or a couple) fields in an object. Here's one helper you can write to clean up access to the <code>tasks</code> and <code>columns</code> fields:</p>

<pre><code>function onField(field, func) {
  return item =&gt; ({ ...item, [field]: func(item[field]) })
}
</code></pre>

<p>this helper allows you to write (for example) <code>onField("x", val =&gt; val + 1)</code> to get a function that increases the <code>.x</code> field of its argument by 1, leaving all the others alone. You can use it like so:</p>

<pre class="lang-js prettyprint-override"><code>function onField(field, func) {
  return item =&gt; ({ ...item, [field]: func(item[field]) })
}

function mapIf(array, condition, transform) {
  return array.map(item =&gt; condition(item) ? transform(item) : item);
}

function hasId(id) {
  return item =&gt; item.id === id
}

switch (action.type) {
  case ADD_TASK: {
    return {
      boards: mapIf(
        state.boards,
        hasId(action.payload.boardId),
        onField('columns', columns =&gt; mapIf(
          columns,
          hasId(action.payload.columnId),
          onField('tasks', tasks =&gt; [...column.tasks, action.payload.task]),
        )),
      ),
    }
  }
  //code omitted
}
</code></pre>

<p>This change suggests a new way to write <code>mapIf</code>, so that it works better with <code>onField</code>, by making it return a transforming function instead of directly taking the <code>array</code> as an argument:</p>

<pre class="lang-js prettyprint-override"><code>function onField(field, func) {
  return item =&gt; ({ ...item, [field]: func(item[field]) })
}

function mapperIf(condition, transform) {
  return array =&gt; array.map(item =&gt; condition(item) ? transform(item) : item);
}

function hasId(id) {
  return item =&gt; item.id === id
}

switch (action.type) {
  case ADD_TASK: {
    return onField(
      'boards',
      mapperIf(
        hasId(action.payload.boardId),
        onField(
          'columns',
          mapperIf(
            hasId(action.payload.columnId),
            onField('tasks', tasks =&gt; [...column.tasks, action.payload.task]),
          )
        ),
      ),
    )(state);
  }
  //code omitted
}
</code></pre>

<p>The main downside to <em>this</em> approach is that there's lots of nesting that can make it hard to understand what's going on. So if we make <em>one more</em> transformation, and write a <code>chain</code> helper, we can get the (in my opinion, rather beautiful):</p>

<pre class="lang-js prettyprint-override"><code>function onField(field) {
  return func =&gt; item =&gt; ({ ...item, [field]: func(item[field]) })
}

function mapperIf(condition) {
  return transform =&gt; array =&gt; array.map(item =&gt; condition(item) ? transform(item) : item);
}

function hasId(id) {
  return item =&gt; item.id === id
}

function apply(transform) {
  return func =&gt; item =&gt; transform(func(item));
}

function chain(func, ...funcs) {
  if (func === undefined &amp;&amp; funcs.length === 0) {
    return item =&gt; item;
  }
  return func(chain(...funcs));
}

switch (action.type) {
  case ADD_TASK: {
    return chain(
      onField("boards"),
      mapperIf(hasId(action.payload.boardId)),
      onField("columns"),
      mapperIf(hasId(action.payload.columnId)),
      onField("tasks"),
      apply(tasks =&gt; [...tasks, action.payload.task]),
    )(state)
  }
  //code omitted
}
<span class="math-container">```</span>
</code></pre>
    </div>