<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3><code>eval</code> is evil</h3>

<p>Always look for ways to avoid <code>eval</code>.</p>

<p>Relevant snippet from the posted code:</p>

<blockquote>
<pre><code>curl -snL  "$url?pagelen=0&amp;page=1" \
    | jq '"$(((\(.size) / 50) + 1 ))"' \
    | xargs bash -c 'eval "echo $1"' _
</code></pre>
</blockquote>

<p>The code uses <code>jq</code> to create a formatted expression to evaluate by Bash,
with <code>.size</code> injected in the middle of the expression.</p>

<p>A better way to achieve the same thing would be to make <code>jq</code> simply output the variable itself, and then write the expression in Bash:</p>

<pre><code>curl -snL  "$url?pagelen=0&amp;page=1" \
    | jq -r .size \
    | xargs bash -c 'echo $((($1 / 50) + 1))' _
</code></pre>

<h3>Unnecessary pipeline</h3>

<p>It's strange to use <code>xargs</code> to process one line of input,
and it's strange to spawn another Bash just to evaluate an expression.
There's really no need to force a chain of operations in a single pipeline.</p>

<p>I'd rewrite the above snippet like this:</p>

<pre><code>repos_count=$(curl -snL "$url?pagelen=0&amp;page=1" | jq -r .size)
((pages_count = (repos_count / 50) + 1))
</code></pre>

<h3>Store positional arguments in variables with descriptive names</h3>

<p>It's a mental burden to have to remember what <code>$1</code> and <code>$2</code> mean.
I'd store them in local variables with descriptive names at the beginning of the function.</p>

<h3>Avoid <code>seq</code></h3>

<p>Is it obsolete, and not available in all systems.
Use a Bash counting loop instead:</p>

<pre><code>for ((page = 1; page &lt;= pages_count; page++)); do
    ...
done \
| xargs -L 1 ...
</code></pre>

<h3>Break lines in long pipelines</h3>

<p>It's easier to read code when there's one statement per line.
This is especially true when a line is so long you have to scroll to the right to see it.
So instead of this:</p>

<blockquote>
<pre><code>| xargs bash -c 'eval "echo $1"' _ | xargs seq 1 | xargs -L 1 printf "?pagelen=50&amp;page=%s&amp;${1:-$project}\n" \
| xargs -I {} -L 1 -P 20 -I {} bash -c 'curl -snL  "$1/$2" | jq -er .values[].links.clone[1].href' _ $url {} \ #clone[1] is ssh
| sort -u
</code></pre>
</blockquote>

<p>I recommend to write like this:</p>

<pre><code>| xargs bash -c 'eval "echo $1"' _ \
| xargs seq 1 \
| xargs -L 1 printf "?pagelen=50&amp;page=%s&amp;${1:-$project}\n" \
| xargs -I {} -L 1 -P 20 -I {} bash -c 'curl -snL  "$1/$2" \
| jq -er .values[].links.clone[1].href' _ $url {} \
| sort -u
</code></pre>

<h3>Always double-quote variables used as command line arguments</h3>

<p>In <code>| jq -er .values[].links.clone[1].href' _ $url {}</code>
you forgot to double-quote <code>$url</code>.</p>
    </div>