<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This problem lends itself to a recursive solution. You want a recursive algorithm that</p>

<ul>
<li><p>returns <code>0</code> if the length of the input array <code>nums</code> is <code>1</code></p></li>
<li><p>otherwise creates a new input array for a jump of size from <code>1</code> to <code>nums[0]</code>, calculates the jumps for the new input array, adds 1, and returns the minimum</p></li>
</ul>

<p>In Python this would be:</p>

<pre><code>def jump(nums):
    if len(nums)&lt;=1:
        return 0
    else:
        return min(1+jump(nums[m:]) for m in range(1,min(len(nums),nums[0]+1)))
</code></pre>
    </div>