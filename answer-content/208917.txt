<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Since you don't care about the distinct values, only the sum in each bin, you can avoid one of these <code>for</code> loops:</p>

<pre><code>pointdict = defaultdict(list)
for k,v in pointlist:
    pointdict[k].append(v)
for key,val in pointdict.items():
    val = sum(val)
    pointdict.update({key:val})
</code></pre>

<p>And instead sum directly:</p>

<pre><code>histogram = defaultdict(int)
for i, weight in pointlist:
    histogram[i] += weight
</code></pre>

<p>I also renamed the variables so it is a bit clearer what they represent.</p>

<hr>

<p>Instead of making <code>pointlist</code> a list, rename it to <code>points</code> (or something else if you want to avoid reusing the name) and make it a <a href="https://wiki.python.org/moin/Generators" rel="nofollow noreferrer">generator</a>. Currently your memory requirements are <span class="math-container">\$\mathcal{O}(n+m)\$</span>, where <span class="math-container">\$n\$</span> is the number of points you have (since you store them in an intermediate list) and <span class="math-container">\$m\$</span> is the number of bins (in your output dictionary). If you used a generator, this would drop to <span class="math-container">\$\mathcal{O}(m)\$</span>.</p>

<pre><code>points = ((_bincenter(x), x[3]) for x in points)
</code></pre>
    </div>