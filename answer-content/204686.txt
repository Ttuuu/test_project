<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Correctness and design</h1>

<p>I will skip all points <a href="https://codereview.stackexchange.com/a/204646/52292">miscco</a>
already raised and go directly to <code>void write</code> and <code>int read</code>.</p>

<ul>
<li>Your <code>write</code> overwrites old values when the buffer is full.</li>
<li>Your <code>read</code> returns zero if the buffer is empty.</li>
</ul>

<p>Although understandable, it should at least be <a href="http://www.doxygen.nl/" rel="nofollow noreferrer">documented</a>:</p>

<pre><code>/// Describe the class, what is the purpose, what is important
template&lt;class T, size_t N&gt; // see std::array
class CircularBuffer {
...
    /// Write values into the buffer, overwrite old values when the buffer is full
    void write(const T&amp; data) {
</code></pre>

<p>or maybe:</p>

<pre><code>    /// Write values into the buffer
    ///\return true if written, false if buffer was full
    bool write(const T&amp; data) {
</code></pre>

<p>You can also notice that I made it a template, just like <a href="https://en.cppreference.com/w/cpp/container/array" rel="nofollow noreferrer"><code>std::array</code></a> - both the type and the capacity are now template parameters. The <a href="http://www.cplusplus.com/reference/queue/queue/push/" rel="nofollow noreferrer"><em>standard</em></a> way of passing arguments to methods like <code>write</code> is to use <code>const T&amp;</code>, but it has some <a href="https://stackoverflow.com/questions/4705593/int-vs-const-int">drawbacks</a>, so, if it trully is for embedded systems, then simple <code>T</code> is an option as well (knowing you are going to use it with integers and such). But document it (and/or add other template parameters with some defaults).</p>

<h1>Synchronization (Locking)</h1>

<p>If you are going to use it with multiple threads (or main loop vs. interrupt) then some form of synchronization is indeed needed, because there are possible <em>race-conditions</em> otherwise, like one thread being inside <code>write</code>, just overwriting the oldest slot, while another thread can be inside <code>read</code> getting this newest element, while it should get the oldest, but <code>tail</code> was not yet updated by the first thread.</p>

<p>First question to ask is: How many threads / concurrent readers and writers (producers and consumers)?
Generic solution could use <a href="https://en.cppreference.com/w/cpp/thread/mutex" rel="nofollow noreferrer"><code>mutex</code></a> but there can be better solutions for single producer single consumer (e.g. main loop vs. interrupt - USART and similar communication synchronization). One possibility is to use separate (<a href="https://en.cppreference.com/w/cpp/atomic/atomic" rel="nofollow noreferrer">atomic</a>) write and read counters (like head and tail but you always only increase the counters and substract them to get number of elements inside the buffer - but be careful with order of operations, it is not trivial).</p>
    </div>