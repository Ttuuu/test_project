<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Why are you reimplementing <code>length</code> O_o?</p>

<pre><code>dft_resolve_nested :: Double -&gt; Int -&gt; [((Double, Double), Double)] -&gt; [(Double, Double)]
dft_resolve_nested _ _ [] = []
dft_resolve_nested k n (((x, y), t) : xs) = do
  let angle = 2.0 * pi * t * k / fromIntegral n
  let sumreal = x * cos angle + y * sin angle
  let sumimag = - x * sin angle + y * cos angle
  (sumreal, sumimag) : dft_resolve_nested k n xs

tuples_sum :: [(Double, Double)] -&gt; (Double, Double)
tuples_sum [] = (0, 0)
tuples_sum ((x1, y1) : xs) = do
  let (x2, y2) = tuples_sum xs
  (x1 + x2, y1 + y2)

dft_resolve ::  [((Double, Double), Double)] -&gt; [(Double, Double)]
dft_resolve [] = []
dft_resolve ls@((_, k) : xs) = do
  let (xr, yr) = tuples_sum $ dft_resolve_nested ls k $ length ls
  (xr, yr) : dft_resolve xs

-- Main driver
main = print $ dft_resolve $ zip [(1,2), (3,4)] [0..]
</code></pre>

<p>The explicit recursion can be done by library functions.</p>

<pre><code>dft_resolve_nested :: Double -&gt; Int -&gt; ((Double, Double), Double) -&gt; (Double, Double)
dft_resolve_nested k n ((x, y), t) = do
  let angle = 2.0 * pi * t * k / fromIntegral n
      sumreal = x * cos angle + y * sin angle
      sumimag = - x * sin angle + y * cos angle
  in (sumreal, sumimag)

tuples_sum :: (Double, Double) -&gt; (Double, Double) -&gt; (Double, Double)
tuples_sum (x1, y1) (x2, y2) = (x1 + x2, y1 + y2)

dft_resolve ::  [((Double, Double), Double)] -&gt; (Double, Double)
dft_resolve ls@((_, k) : _) = foldr tuples_sum (0,0) $
  map (dft_resolve_nested k $ length ls) ls

-- Main driver
main = print $ map dft_resolve $ tails $ zip [(1,2), (3,4)] [0..]
</code></pre>

<p>Many of these names can be removed. You were also only ever restricted to <code>Double</code> by your own type signatures :). (You may want to tell it what <code>Floating</code> instance to use somewhere, though.)</p>

<pre><code>import Data.NumInstances.Tuple

main :: IO ()
main = print
  [ sum
    [ (  x * cos angle + y * sin angle
      , -x * sin angle + y * cos angle
      )
    | (t, (x, y)) &lt;- ls
    , let angle = 2 * pi * t * k / genericLength ls
    ]
  | (k, ls) &lt;- zip [0..] $ tails [(1,2), (3,4)]
  ]
</code></pre>

<p>Edit: <code>Data.Complex</code> specializes in this sort of math:</p>

<pre><code>import Data.Complex

main :: IO ()
main = print
  [ sum [z / cis angle ** t | (t, z) &lt;- ls]
  | (k, ls) &lt;- zip [0..] $ tails [1:+2, 3:+4]
  , let angle = 2 * pi * k / genericLength ls
  ]
</code></pre>
    </div>