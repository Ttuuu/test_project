<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It appears that you're doing a ray march when you could be using the <a href="https://en.wikipedia.org/wiki/Bresenham%27s_line_algorithm" rel="nofollow noreferrer">https://en.wikipedia.org/wiki/Bresenham%27s_line_algorithm</a></p>

<hr>

<p>If the maximum distance of your ray is 64, why do you need two components (RG) to store it? Consider other formats like R8, R16, floating point texture formats, or <code>floatBitsToInt</code>. </p>

<hr>

<p>Multiple declarations in a statement is hard to read, especially when they're not aligned.</p>

<hr>

<p>You can vary in texel (XY) space instead of texture(UV) space, and skip some multiplications. You can also use something like gl_FragCoord which may be easier to manage.</p>

<hr>

<p>breaking from the inside of a loop is fine, you don't need tricks like cancelling out the distance. </p>

<hr>

<p>Prefer <code>texelFetch</code> instead of <code>texture2D</code> when appropriate -- i.e. when you don't need filtering. <code>texture2D</code> implies lod calculations may be relevant and can adversely affect branching.</p>

<hr>

<p>Finally, I don't believe this will perform better than rasterizing 2D data into a set  of 1D viewports in a way similar to shadow mapping. The rasterization approach has many huge advantages like being able to batch-cull an enormous amount of data.</p>
    </div>