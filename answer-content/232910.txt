<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are a few things I'd suggest to clean up the code. </p>

<p>First, you should be able to write the following</p>

<pre class="lang-py prettyprint-override"><code>for typ, val in zip(types.keys(), types.values()):
    char_list.extend([typ] * val)
</code></pre>

<p>without using <code>zip</code> by doing as follows</p>

<pre class="lang-py prettyprint-override"><code>for typ, val in types.items():
    char_list.extend([typ] * val)
</code></pre>

<h3>Comprehensions</h3>

<p>Comprehensions are a great way to clean up.</p>

<p>The first case would be </p>

<pre class="lang-py prettyprint-override"><code>for rem in range(length - num_chars):
    char_list.append(choice(list(types.keys())))
</code></pre>

<p>as</p>

<pre class="lang-py prettyprint-override"><code>char_list.extend([choice(list(types.keys())) for _ in range(length - num_chars)])
</code></pre>

<p>And a second time</p>

<pre class="lang-py prettyprint-override"><code>password = ''

for typ in char_list:
    password += choice(type_chars[typ])

return password
</code></pre>

<p>as</p>

<pre class="lang-py prettyprint-override"><code>return "".join([choice(type_chars[typ]) for typ in char_list])
</code></pre>

<h3>Functions</h3>

<p>I'd probably put the following piece of code as a separate function to make it more modular and manageable</p>

<pre class="lang-py prettyprint-override"><code># List that stores the "types" of possible character
char_list = []

# Mandatory requirements
for typ, val in zip(types.keys(), types.values()):
    char_list.extend([typ] * val)

# The remaining values to fill
for rem in range(length - num_chars):
    char_list.append(choice(list(types.keys())))

shuffle(char_list)
</code></pre>

<p>Likewise, with the suggested list comprehension that makes the password.</p>

<pre class="lang-py prettyprint-override"><code>def make_password(char_list)
    return "".join([choice(type_chars[typ]) for typ in char_list])
</code></pre>

<h3>Optionals (fancy)</h3>

<p>If you want to be very fancy, you can use <code>dataclasses</code> or <code>attrs</code> to package the options to the main function. This would allow you to make some validation of the input, namely, that everything you get are numbers (particularly <code>ints</code> or a string that can be parsed as such). Such a dataclass can be thought of as the communication layer between the front end (whatever is in the <code>__main__</code> part of the program) and the backend part in <code>generate_password</code>.</p>

<p>I say this because your program will fail if you don't give numbers. For example in the first logic line <code>num_chars = sum(list(types.values()))</code>.</p>
    </div>