<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I see a number of things that may help you improve your program.</p>

<h2>Gather constants together</h2>

<p>The relationship among the numerical values that determine which unit is used and the divisor and the actual unit name is contained within a single function, which is good, but it could be more clear if expressed as a structure.  For example, one could use this:</p>

<pre><code>struct Units {
  int limit;
  double divisor;
  std::string name;
};
static const std::array&lt;Units,4&gt; units; 
</code></pre>

<p>Then outside of the class, we supply the values:</p>

<pre><code>const std::array&lt;my_length::Units,4&gt; my_length::units = {{
  { 10, 1, "mm" },
  { 1000, 10, "cm" },
  { 1000000, 1000, "m" },
  { 0, 1000000, "km" },
}};
</code></pre>

<p>This brings things into much closer proximity so that it can be more easily seen and understood.  We can do a little better with C++17 by using <code>std::string_view</code> instead of <code>std::string</code> for the unit name.</p>

<h2>Isolate concerns</h2>

<p>It's usually better to have each function just do one thing.  So insted of deciding on units and <em>also</em> printing, I'd suggest splitting those into two, using a private member function:</p>

<pre><code>const Units&amp; selectUnit() const {
  auto ret{units.cbegin()};
  if (fmt_auto) {
      while (ret-&gt;limit &amp;&amp; v &gt;= ret-&gt;limit) {
          ++ret; 
      }
  }
  return *ret;
}
</code></pre>

<p>Now the <code>operator&lt;&lt;</code> looks like this:</p>

<pre><code>friend std::ostream &amp;operator&lt;&lt;(std::ostream &amp;out, const my_length &amp;l) {
  const Units u{l.selectUnit()};
  return out &lt;&lt; l.id &lt;&lt; "/" &lt;&lt; l.name &lt;&lt; " : " 
      &lt;&lt; l.v/u.divisor &lt;&lt; u.name;
}
</code></pre>

<h2>Use standard algorithms</h2>

<p>The test code starts with this:</p>

<pre><code>std::vector&lt;my_length&gt; lengths;
my_length l{0, "a", 1};
lengths.push_back(l);
uint64_t val = 17;
for (int i=1; i&lt;10; i++) {
    my_length l{i, std::string(1, 'a'+i), val};
    lengths.push_back(l);
    val *= 10;
}
</code></pre>

<p>I'd suggest that one could use <a href="https://en.cppreference.com/w/cpp/algorithm/iota" rel="nofollow noreferrer"><code>std::iota</code></a> instead.  I'll leave it to you to create the details of that.</p>

<h2>Reconsider the design</h2>

<p>Once constructed, there is no capability to do anything with the <code>my_length</code> object except to print it.  If all that's needed is printing, then it may be better to use a freestanding function in a namespace instead of an object, as suggested in the comments.  If not, then it makes sense to provide those other operations within the class.</p>
    </div>