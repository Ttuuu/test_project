<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Extracting the error handling for the requests seems to be very easy:</p>
<pre><code>def get(url, **params):
    """Get a URL with authentication, error handling and optional parameters."""
    try:
        response = requests.get(url, headers=auth.HEADERS, params=params)
        response.raise_for_status()
    except requests.ConnectionError:
        logging.critical("No Internet connection")
        return None
    except requests.HTTPError:
        logging.warning("An HTTP error occured.")
        return None
    return response
</code></pre>
<p>Which you can then use like this:</p>
<pre><code>def get_events_odds(events: Events) -&gt; Optional[Odds]:
    """Gets odds for the given events."""
    params: RequestParams = {
        'sportId': SOCCER_SPORT_ID,
        'oddsFormat': ODDS_FORMAT,
        'eventIds': ','.join([str(event) for event in events])
        }
    response = get(GET_ODDS_URL, **params)
    if response is not None:
        logging.info("Events odds have been retrieved.")
        return response.json()
</code></pre>
<p>A couple of additional notes:</p>
<ul>
<li><p>Use <code>response.raise_for_status()</code> to also catch also HTTP errors such as <code>500: Internal Server Error</code>, or <code>404: Page not Found</code>. You will probably want to add logging for that as well (which I was too lazy to do in the code above).</p>
</li>
<li><p>Docstrings are usually denoted with triple quotes <code>"""docstring"""</code>, even if only one line long.</p>
</li>
<li><p><code>Union[Odds, None]</code> is the same as <code>Optional[Odds]</code>, which is slightly more descriptive, IMO.</p>
</li>
<li><p>You should use a <a href="https://requests.readthedocs.io/en/master/user/advanced/" rel="nofollow noreferrer"><code>requests.Session</code></a> to make consecutive requests to the same server faster.</p>
</li>
<li><p>The authentication method is <a href="https://security.stackexchange.com/a/990/151405">not very secure</a>, although at least the password is not transmitted unencrypted due to the API using https.</p>
</li>
<li><p><code>if 'straightBets' in data.keys()</code> is the same as <code>if 'straightBets' in data</code>.</p>
</li>
<li><p>If you have to check if an item is in a list before adding it, you probably want a <code>set</code> instead. However, since your bets are just dictionaries this is not possible. If one of the keys of the dictionaries is a unique identifier, though, you could just use a dictionary:</p>
<pre><code> bets.update({bet['id']: bet for bet in data['straightBets']
              if bet['betStatus'] != 'CANCELLED'})
</code></pre>
</li>
<li><p>The <code>requests</code> module can directly work with a dictionary for the <code>data</code>. No need to <code>json.dumps</code> it into a string first.</p>
</li>
<li><p>You have a <code>BetType</code> enum, but don't use it when determining bet types. The same is true of the side. I think it would be easier if you used a dictionary:</p>
<pre><code> SIDES = {"over": "Over", "under": "Under", "home": "TEAM1", "away": "TEAM2"}
</code></pre>
<p>Which you can then use like this:</p>
<pre><code> def _determine_team_or_side(side):
     """Determines whether the bet is on totals or on spreads."""
     side = side.lower()
     try:
         return SIDES[side]
     except KeyError:
         raise ValueError(f'side must be one of {SIDES.keys()}, {side} given.')
</code></pre>
</li>
</ul>
    </div>