<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In addition to Sam I want to point out some other things</p>

<h1>Avoid typing long list/dict constants</h1>

<p>Very often you can construct them by code, which is less error prone. Instead of</p>

<pre><code>d_dict = {"0" : 0, "1" : 1, "2" : 2, "3" : 3, "4" : 4, "5" : 5, "6" : 6, "7" : 7, "8" : 8, "9" : 9, "A" : 10, "B" : 11, "C" : 12, "D" : 13, "E" : 14, "F": 15}
</code></pre>

<p>you do</p>

<pre><code>import string

digit = dict(zip(range(16), string.digits + string.ascii_uppercase))
value = {v: k for k, v in digit.items()}
</code></pre>

<p>If you type all the values you have to write test cases for all of them.</p>

<h1>Loop like a pro</h1>

<p>You prefer to loop like</p>

<pre><code>for i in range(len(something)):
    print(something[i])
</code></pre>

<p>That is not how it is done in Python as it is error prone. In Python you loop like</p>

<pre><code>for e in something:
    print(e)
</code></pre>

<p>If for some reason you really also need the index you use <code>enumerate()</code></p>

<pre><code>for i, e in enumerate(something):
    print(i, e)
</code></pre>

<p>That said we change</p>

<pre><code>def hd_func(h_num):
    d_num, p = 0, 0

    for digit in range(len(h_num), 0, -1):
        d_num = d_num + 16 ** p * d_func(h_num[digit - 1], 1)
        p += 1

    return str(d_num)
</code></pre>

<p>to</p>

<pre><code>def to_int(s):
     i = 0
     for c in s:
         i = i*16 + value[c]
     return i
</code></pre>

<p>The loop is much cleaner. By changing the algorithm I also got rid of the counter. Also I think returning a string is wrong here and I changed that to an <code>int</code>. Also I changed the function name to fit the return type and be less cryptic.</p>

<h1>Do not initialize as a tuple if it isn't one</h1>

<pre><code>f_list, h_num, p = [], "", 0
</code></pre>

<p>These variables do not form a natural tuple. Use three lines of code. Readability counts. Of course there is nothing wrong with initializing e. g. coordinates in a single line.</p>

<h1>Do initialize variables right before you need them</h1>

<p>In the line </p>

<pre><code>f_list, h_num, p = [], "", 0
</code></pre>

<p>the variable <code>h_num</code> is initialized at the beginning of the function while it is needed just before the second loop. Compare the readability of</p>

<pre><code>def dh_func(d_num):
    f_list, h_num, p = [], "", 0

    while d_num &gt; 0:
        f_list.append(d_num % 16)
        d_num //= 16 

    for f in f_list[::-1]:
        h_num += d_func(f, 2)

    return h_num
</code></pre>

<p>to</p>

<pre><code>def dh_func(d_num):

    f_list = []
    while d_num &gt; 0:
        f_list.append(d_num % 16)
        d_num //= 16 

    h_num = ""
    for f in f_list[::-1]:
        h_num += d_func(f, 2)

    return h_num
</code></pre>

<h1>Avoid adding strings</h1>

<p>In the second loop of function <code>dh_func</code> (see above) you use <code>+</code> for appending to a string. This is a inefficient operation in python. There is the string method <code>join()</code> for that task. So we rewrite the function with a better function name to</p>

<pre><code>def to_hex(n):
    l = []
    while n &gt; 0:
        l.append(digit[n%16])
        n //= 16
    return "".join(l[::-1])
</code></pre>
    </div>