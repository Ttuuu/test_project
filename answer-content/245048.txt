<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>The generated assembly code is very inefficient!</h2>
<h3>First example.</h3>
<p>Ley's look at this small part right at the top:</p>
<blockquote>
<pre><code>If gornja_granica-donja_granica&lt;2
AsmStart
   ret
AsmEnd
EndIf
</code></pre>
</blockquote>
<p>This is its assembly code in a readable form:</p>
<pre><code>    finit
    fld dword ptr [gornja_granica]
    fld dword ptr [donja_granica]
    fsubp
    mov dword ptr [result],0x40000000 #IEEE754 hex of 2
    fld dword ptr [result]
    fcomip
    fstp dword ptr [result]
    jna secondOperandOfTheComparisonIsSmallerOrEqualLabel914728
    fld1
    jmp endOfTheLessThanComparisonLabel862181
secondOperandOfTheComparisonIsSmallerOrEqualLabel914728:
    fldz   ; 2 LT (a-b)
endOfTheLessThanComparisonLabel862181:

#Comparing the just-calculated expression with 0...
    fistp dword ptr [result]
    mov eax, dword ptr [result]
    test eax,eax
#Branching based on whether the expression is 0...
    jz ElseLabel529946
    ret
    finit
ElseLabel529946:
EndIfLabel210662:
</code></pre>
<p>Basically this code wants to arrive at <em>ElseLabel529946</em> if <code>gornja_granica-donja_granica&lt;2</code>. For branching the only info that you really need comes from the <code>fcomip</code> instruction. It defines the CF and ZF (and PF) in EFLAGS and you could have jumped immediately</p>
<ul>
<li>without loading that 0.0 or 1.0</li>
<li>without storing into a memory variable</li>
<li>without testing that memory variable</li>
<li>without the additional jumping</li>
</ul>
<p>This is an improved code:</p>
<pre><code>    finit
    fld     dword ptr [gornja_granica]
    fld     dword ptr [donja_granica]
    fsubp
    mov     dword ptr [result], 0x40000000     ; IEEE754 hex of 2
    fld     dword ptr [result]
    fcomip
    fstp    st(0)                              ; Clears FPU stack
    jna     ElseLabel529946
    ret
    finit
ElseLabel529946:
</code></pre>
<p>Please notice that to throw away st(0), you don't need to move to memory. Copy st(0) to itself and have the FPU stack popped.</p>
<p>And this improves still further. Less memory access and shorter code!</p>
<pre><code>    finit
    fld     dword ptr [gornja_granica]
    fsub    dword ptr [donja_granica]
    fld1
    fadd    st(0), st(0)                       ; st(0) == 1 + 1
    fcomip
    fstp                                       ; Clears FPU stack
    jna      ElseLabel529946
    ret
ElseLabel529946:
</code></pre>
<h3>Second example.</h3>
<blockquote>
<pre><code>While i&lt;7 | i=7
</code></pre>
</blockquote>
<p>This should be written as <code>While i&lt;=7</code></p>
<p>I've looked at the assembly code for it and I have seen the same inefficiencies as above. But because of the <code>|</code> operator their negative impact is still worse.</p>
<h3>Third example.</h3>
<blockquote>
<pre><code>sredina_niza:=sredina_niza-mod(sredina_niza,1)
</code></pre>
</blockquote>
<p>The assembly code for the <code>mod()</code> function uses a lot of instructions. What your AEC needs is an <code>int()</code> function for which you can get by with a mere <code>frndint</code> (Round to integer) instruction.<br>
This:</p>
<pre><code>sredina_niza:=int(sredina_niza)
</code></pre>
<p>would then be much faster.</p>
<hr>
<p>Knowing the forementioned, I have no doubt that the MergeSort or QuickSort would be any less inefficient.</p>
    </div>