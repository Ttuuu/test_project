<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The casting in <code>getFamilySize()</code> is very dangerous. Notice that </p>

<pre><code>public void addChild( Concept aChild )
</code></pre>

<p>means you can add any sub-class of <code>Concept</code> as a child, and therefore <code>getChildren()</code> returns an iterator to <strong>any</strong> sub-class of <code>Concept</code>.</p>

<p>Furthermore, you're only finding the size two levels down (the current <code>Concept</code>'s children and their children). I suspect you want to find the size of the entire sub-tree.</p>

<p>A safer and more correct way to implement the method would be:</p>

<pre><code>public Set getChildren()
{
  return Collections.unmodifiableSet(children);
}

public int getFamilySize()
{
  int count = 0;

  Queue&lt;Concept&gt; queue = new LinkedList&lt;Concept&gt;();

  queue.addAll(this.getChildren());

  while (!queue.empty())
  {
    Concept concept = queue.poll();
    // count the Concept we just pulled off the queue
    count++;

   if (concept instanceof ConceptB)
   {
     // we need his children too
     queue.addAll(((ConceptB) concept).getChildren());
    }
  }

  return count;
}
</code></pre>
    </div>