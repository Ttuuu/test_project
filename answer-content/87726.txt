<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A few quick comments:</p>

<ul>
<li><p>Read <a href="https://www.python.org/dev/peps/pep-0008/">PEP 8</a>, the Python style guide. In particular, Python uses lowercase_with_underscore variable names, and put commas after spaces.</p></li>
<li><p>Add some docstrings to your functions, so that it’s clear what purpose they serve in the context of your calculator. This will become useful as you extend the calculator, and you want to change existing function: you may remember what each function is for at the moment, but you may not in six months time.</p></li>
<li><p>Add more comments. Tell me why you’re doing certain operations. Anybody can read the code and see <em>what</em> it’s doing, but <em>why</em> is it doing it?</p>

<p>For example: after some inspection, I see that you iterate through <code>prioritizedOperators</code> to apply each operation in order (multiplication and division, then subtraction and addition).</p></li>
<li><p>You have no error handling, which means I can enter something silly like <code>1/0</code> and get a ZeroDivisionError. You also claim that it only works for positive integers, but the simple examples I tried with negative integers seemed to work as well.</p>

<p>If you only want it to work with positive integers, then you should spit out any input that isn’t positive.</p></li>
<li><p>You claim that</p>

<blockquote>
  <p>My division rounds up if it isn't an integer</p>
</blockquote>

<p>but this doesn’t seem to be true. For example, if I enter <code>2/3</code> then I get output <code>0</code>.</p></li>
<li><p>There is no need for <code>getPriorizedOperators</code> to be a function. Just declare the list as a variable in <code>operator.py</code>, then import it in <code>calculator.py</code>. For example:</p>

<p>operator.py:</p>

<pre><code>prioritized_operators =  [
    multiply_operator(),
    divide_operator(),
    plus_operator(),
    minus_operator()
]
</code></pre>

<p>calculator.py:</p>

<pre><code>from operator import prioritized_operators
</code></pre></li>
<li><p>I would rename your <code>_isNumber()</code> function. It only checks if a single character is a numeral, but the name implies I might be able to pass in arbitrary-length strings. Perhaps <code>_is_digit()</code> would be better.</p>

<p>You can tidy up the function logic a little. Rather than calling out to <code>ord()</code>, you can also compare strings directly for the same result. For example:</p>

<pre><code>&gt;&gt;&gt; "0" &lt; "5" &lt; "9"
True
&gt;&gt;&gt; "0" &lt; "x" &lt; "9"
False
</code></pre>

<p>Or you could just use the builtin function <code>isdigit()</code>, and do away with your function entirely:</p>

<pre><code>&gt;&gt;&gt; "5".isdigit()
True
&gt;&gt;&gt; "x".isdigit()
False
</code></pre>

<p>(Whether you use the latter depends on how much you want to reinvent the wheel.)</p></li>
<li><p>Having two functions called <code>calculate()</code> and <code>_calculate()</code> is prone for confusion. Rename one or both of them to have a more specific name.</p></li>
</ul>
    </div>