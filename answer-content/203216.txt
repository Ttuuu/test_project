<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is indeed fairly large and will take a while to review.</p>

<p>Just glancing through it, two big things jumped at me immediatelly, so I'll jot them down right away, and update this answer as I make myu way further down the code.</p>

<h2>Don't use tag types for bounded lists.</h2>

<p>Tag types are convenient when you have have an unbounded number of alternatives. For bounded sets, you are better off with an enum:</p>

<pre><code>class SingleLinkage {};
class DoubleLinkage {};

template&lt;typename LinkageType, typename ValueType&gt;
class LinkedList {...};
</code></pre>

<p>becomes:</p>

<pre><code>enum class Linkage {
  single,
  double
};

template&lt;Linkage LinkageType, typename ValueType&gt;
class LinkedList {...};
</code></pre>

<h2>Don't use SFINAE to validate,</h2>

<p>SFINAE is a selection tool, not a validation tool. There are ALWAYS better ways to perform validation.</p>

<pre><code>template&lt;typename, typename = void&gt;
struct supports_less_than : std::false_type { };

template&lt;typename T&gt;
struct supports_less_than&lt;T, std::void_t&lt;decltype(std::declval&lt;T&amp;&gt;() &lt;= std::declval&lt;T&amp;&gt;())&gt;&gt; : std::true_type { };
template&lt;typename T = value_type, std::enable_if_t&lt;supports_less_than&lt;T&gt;::value, int&gt; = 0&gt;
    void sort();
template&lt;typename T = value_type, std::enable_if_t&lt;!supports_less_than&lt;T&gt;::value, int&gt; = 0&gt;
    void sort() { throw std::logic_error("List cannot be sorted, as value_type does not support comparison."); }
</code></pre>

<p>You want code that invokes <code>sort()</code> with <code>supports_less_than&lt;T&gt;::value == false</code> to not even compile at all, not throw an error at run time.</p>

<p>Normally, I would just duck-type that <code>operator&lt;(T,T)</code> works fine, but there is an argument to be made that a more explicit error is desirable. I would just do this:</p>

<pre><code>void sort() {
  static_assert(supports_less_than&lt;value_type&gt;::value);

  .. run sort...
}
</code></pre>
    </div>