<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There're some modules that might help you get rid of the <em>structure</em> you're complaining about like <a href="https://marshmallow.readthedocs.io/en/latest/" rel="noreferrer">marshmallow</a> or <a href="https://pypi.python.org/pypi/voluptuous" rel="noreferrer">voluptous</a> and since you didn't added the <em>reinventing-the wheel</em> tag I guess that's perfectly okay. </p>

<p>For the sake of example, I'll refer to the former one because IMO it better fits our purpose (and is also probably clearer).</p>

<p><strong>From the docs:</strong></p>

<blockquote>
  <p>Marshmallow is an ORM/ODM/framework-agnostic library for converting
  complex datatypes, such as objects, to and from native Python
  datatypes.</p>
  
  <p>In short, marshmallow schemas can be used to:</p>
  
  <ol>
  <li>Validate input data.</li>
  <li>Deserialize input data to app-level objects.</li>
  <li>Serialize app-level objects to primitive Python types. The serialized objects can then be rendered to standard formats such as
  JSON for use in an HTTP API.</li>
  </ol>
</blockquote>

<p>First of, you'll need to define your Schema:</p>

<pre><code>class DataSchema(Schema):
    name = fields.String(required=True)
    tags = fields.List(fields.String(), required=True)
</code></pre>

<p>In the above, <code>name</code> and <code>tags</code> are the keys of our dictionaries. In our class I've specified each key type (<code>str</code> and <code>list</code>). They're also mandatory, so I added <code>required=True</code>. </p>

<p>Next, to validate our top-level list, we need to instantiate our list item schema with <code>many=True</code> argument and then just load the data we need:</p>

<pre><code>data, errors = DataSchema(many=True).load([
    {'name': 'Frank', 'tags': ['dog', 'cat']},
    {'name': 'Manfred', 'tags': ['dog', 'chicken']}
])
</code></pre>

<p>Printing the above:</p>

<pre><code>print(data)
print(errors)
</code></pre>

<p>Will have the following output:</p>

<blockquote>
<pre><code>[{'name': 'Frank', 'tags': ['dog', 'cat']}, {'name': 'Manfred', 'tags': ['dog', 'chicken']}]
{}
</code></pre>
</blockquote>

<p>Now, if we try to pass an invalid data to our dict, the <code>errors</code> will warn us about this. For example, passing a <code>str</code> instead of a list in our <code>tags</code> key will result in:</p>

<blockquote>
<pre><code>[{'name': 'Frank'}, {'name': 'Manfred', 'tags': ['dog', 'chicken']}]
{0: {'tags': ['Not a valid list.']}}
</code></pre>
</blockquote>

<h3>Full code:</h3>

<pre><code>from marshmallow import Schema, fields


class DataSchema(Schema):
    name = fields.String(required=True)
    tags = fields.List(fields.String(), required=True)

data, errors = DataSchema(many=True).load([
    {'name': 'Frank', 'tags': ['dog', 'cat']},
    {'name': 'Manfred', 'tags': ['dog', 'chicken']}
])
</code></pre>

<p>Now, IDK if the above will be valid for all the test-cases (e.g it might allow you to pass an empty list), but it should give you a good overview of what you can achieve with this module.</p>
    </div>