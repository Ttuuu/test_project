<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><em>use a recursive function</em><br>
I guess avoiding the stack-juggling (because of the recursivity of <code>fromRPN</code>) and the unnecessary creation of <code>String</code> objects (with <code>StringJoiner</code>) should make it fast enough.<br></p>

<p><code>fromRPN( new ArrayList&lt;String&gt;( Arrays.asList( "1 3 + 2 4 5 - +".split( " " ) ) ) );  // ((1+3)/(2+(4-5)))</code><br></p>

<pre><code>public String fromRPN( ArrayList&lt;String&gt; rpn ) {
  for( int n = 0; rpn.size() &gt; 1; n++ )
    switch( rpn.get( n ) ) {
    case "+":
    case "-":
    case "*":
    case "/":
      String s = new StringJoiner( "", "(", ")" ).add( rpn.remove( n - 2 ) ).add( rpn.remove( n - 1 ) ).add( rpn.remove( n - 2 ) ).toString();
      rpn.add( n - 2, s );
      if( rpn.size() &gt; 1 )
        return( fromRPN( rpn ) );
      return( rpn.get( 0 ) );
    case "sqrt":  // insert Your unary operator(s) hereâ€¦
      StringJoiner join = rpn.get( n ).startsWith( "(" ) ? new StringJoiner( "" ) : new StringJoiner( "",  "(", ")" );
      join.add( rpn.remove( n ) );
      if( rpn.get( n - 1  ).startsWith( "(" ) )
        join.add( rpn.remove( n - 1 ) );
      else
        join.add( "(" ).add( rpn.remove( n - 1 ) ).add( ")" );
      s = join.toString();
      rpn.add( n - 1, s );
      if( rpn.size() &gt; 1 )
        return( fromRPN( rpn ) );
      return( rpn.get( 0 ) );
    }
  return( fromRPN( rpn ) );
}
</code></pre>

<p><em>You can test both types of expressions (RPN and algebraic) with</em> <a href="https://www.7th-stone.com" rel="nofollow noreferrer">7th stone</a><br></p>
    </div>