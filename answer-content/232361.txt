<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Python uses <a href="https://www.python.org/dev/peps/pep-0008/#function-and-variable-names" rel="nofollow noreferrer">snake_case, not camelCase</a> for variable and function names. <code>csvFormat</code> for example, should be <code>csv_format</code>.</p>

<hr>

<p>In two places you do this weird thing:</p>

<pre><code>with open(. . .) as file:
    . . .
file.close
</code></pre>

<ul>
<li><p><code>with</code> already closes <code>file</code>, so there's no need to manually close it.</p></li>
<li><p><code>file.close</code> doesn't do anything, and a good IDE would warn you of that. You need to add <code>()</code> to call <code>close</code>: <code>file.close()</code>.</p></li>
</ul>

<hr>

<p>Speaking of weird things, you have this in a couple places as well:</p>

<pre><code>try:
    userMessageFormat = input((prompt))
except ValueError:
    print('Input unkown')
</code></pre>

<p><code>input</code>, as far as I know, will never throw. If you had a call to <code>int</code> in there, or if you were using Python 2 (maybe?), this may make sense. I don't think this <code>try</code> does anything, and I don't think <code>'Input unkown'</code> will <em>ever</em> be printed.</p>

<hr>

<pre><code>if userMessageFormat != 'csv' and userMessageFormat != 'json':
    . . .
elif userMessageFormat == 'json':
    . . .
elif userMessageFormat == 'csv':
</code></pre>

<p>This is written in kind of a "fragile" way. If you ever add more formats, you'll need to make two changes: 1. Add a new <code>elif userMessageFormat ==</code> check, and 2. Add to the first condition to validate the format ahead of time. If you forget to update the latter, none of the other cases will be <code>True</code>, and <code>return userMessageFormat</code> will cause a <code>NameError</code> since <code>userMessageFormat</code> will have never been defined.</p>

<p>Just make use of an <code>else</code> case:</p>

<pre><code>if userMessageFormat == 'json':
    . . .
elif userMessageFormat == 'csv':
    . . .
else:
    print('Format unkown')
</code></pre>

<p>This is what <code>else</code> is for: to handle when none of the other checks were true.</p>

<hr>

<pre><code>for i in films:
    x = {
        "position": i[0],
        "title": i[1],
        "year": i[2],
        "imbdRanking": i[3]
    }
</code></pre>

<p>This could make use of destructuring to avoid needing to index <code>i</code>:</p>

<pre><code>for position, title, year, rank in films:
    x = {
        "position": position,
        "title": title,
        "year": year,
        "imbdRanking": rank
    }
</code></pre>

<p>If the sub-collections in <code>films</code> contain more than 4 elements each, you'll need to change the <code>for</code> line to:</p>

<pre><code>for position, title, year, rank, *_ in films:
</code></pre>

<p>The <code>*_</code> catches all the remaining elements. Without this, you'll get a <code>ValueError</code>.</p>

<hr>

<pre><code>if userMessageFilm == 'films250':
    . . .
elif userMessageFilm != 'films250':
    . . .
</code></pre>

<p>This is redundant. If the first check is false, the second <em>must</em> be true. This can just be:</p>

<pre><code>if userMessageFilm == 'films250':
    . . .
else:
    . . .
</code></pre>
    </div>