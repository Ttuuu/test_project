<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First, I just want to remark that this is excellent use of <code>std::bitset&lt;&gt;</code>!
Further, I'm just adding to eanmos's comments.</p>

<h1>Don't define constants that are named after their value</h1>

<p>Apart from the fact that, as already mentioned, <code>strIsValid()</code> should return a <code>bool</code>, you define the constants <code>Constants::STR_YES</code> and <code>Constants::STR_NO</code>. These constants are longer to type than literal <code>"YES"</code> and <code>"NO"</code>. Also, consider that you would ever change the value of <code>STR_YES</code>. The code was written with the assumption that the constant would be the literal <code>"YES"</code>, as that is what its name clearly says, but now you are breaking that assumption. So in <code>main()</code>, just I would just write:</p>

<pre><code>std::cout &lt;&lt; sudokuInstance.strIsValid() ? "YES\n" : "NO\n";
</code></pre>

<p>If the goal is to make it easy to translate the program, then you should use a so-called internationalization library to do this, such as <a href="https://en.wikipedia.org/wiki/Gettext" rel="nofollow noreferrer">gettext</a>. Writing constants like this doesn't scale for programs with a large amount of text.</p>

<h1>Consider returning a meaningful value from <code>main()</code></h1>

<p>Your program prints whether each Sudoku instance is valid to standard output, but the exit code is always 0. It is custom to have the exit code be non-zero if an error happened. While technically your program still runs perfectly fine if you feed it an invalid Sudoku, you might consider returning 1 if it has encountered any non-valid Sudoku. This is similar to what some command line tools do, like <code>cmp</code> or <code>grep -q</code>.
This way, you can call your program from a shell script, and have the shell script react to the result of your program in an easy way, making it easy to integrate it into larger projects.</p>
    </div>