<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Readability</h3>

<blockquote>
  <p><em>Mainly looking for readability improvements/getting rid of those double ifs.</em></p>
</blockquote>

<p>Since you are considered about readability, I will focus on that part.</p>

<hr>

<p>Declare a flags enum on multiple lines and prefer to use the bit shift to indicate its location. Use an unsigned type as underlying type. Have a value corresponding to 0, because that is the default of any enum.</p>

<blockquote>
<pre><code>[Flags]
private enum OutOfBoundsDirection { Inbounds = 1, Left = 2, Right = 4 // ..
</code></pre>
</blockquote>

<pre><code>[Flags]
private enum OutOfBoundsDirection : uint
{ 
    None     = 0
    Inbounds = 1 &lt;&lt; 0, 
    Left     = 1 &lt;&lt; 1, 
    Right    = 1 &lt;&lt; 2, 
    Top      = 1 &lt;&lt; 3, 
    Bottom   = 1 &lt;&lt; 4
}
</code></pre>

<hr>

<p>Don't inline annotations.</p>

<blockquote>
<pre><code> [SerializeField] private GameObject mainCanvas;
</code></pre>
</blockquote>

<pre><code>[SerializeField] 
private GameObject mainCanvas;
</code></pre>

<hr>

<p>Use early exit when you want to avoid nested if statements.</p>

<blockquote>
<pre><code>if (outerRect.xMin &lt; innerRect.xMin &amp;&amp; outerRect.xMax &gt; innerRect.xMax &amp;&amp;
    outerRect.yMin &lt; innerRect.yMin &amp;&amp; outerRect.yMax &gt; innerRect.yMax)
{
    outOfBounds = OutOfBoundsDirection.Inbounds;
}
else
{
    if ((outOfBounds &amp;= OutOfBoundsDirection.Inbounds) == OutOfBoundsDirection.Inbounds)
    {
        outOfBounds ^= OutOfBoundsDirection.Inbounds;
    }
    // .. CR: code omitted for brevity
}
</code></pre>
</blockquote>

<pre><code>if (outerRect.xMin &lt; innerRect.xMin &amp;&amp; outerRect.xMax &gt; innerRect.xMax &amp;&amp;
    outerRect.yMin &lt; innerRect.yMin &amp;&amp; outerRect.yMax &gt; innerRect.yMax)
{
    outOfBounds = OutOfBoundsDirection.Inbounds;
    return;
}
if ((outOfBounds &amp;= OutOfBoundsDirection.Inbounds) == OutOfBoundsDirection.Inbounds)
{
     outOfBounds ^= OutOfBoundsDirection.Inbounds;
}
// .. CR: code omitted for brevity
</code></pre>

<hr>

<p>Use <code>HasFlag</code> to perform the bit check for you.</p>

<blockquote>
<pre><code>if ((outOfBounds &amp; OutOfBoundsDirection.Left) != 0)
</code></pre>
</blockquote>

<pre><code>if ((outOfBounds.HasFlag(OutOfBoundsDirection.Left))
</code></pre>

<hr>

<p>Create constants where you can.</p>

<blockquote>
<pre><code>verts[0] = col.offset + new Vector2(-col.size.x, col.size.y) * 0.5f;
verts[1] = col.offset + new Vector2(col.size.x, col.size.y) * 0.5f;
verts[2] = col.offset + new Vector2(col.size.x, -col.size.y) * 0.5f;
verts[3] = col.offset + new Vector2(-col.size.x, -col.size.y) * 0.5f;
</code></pre>
</blockquote>

<pre><code>const float factor = 0.5f;

verts[0] = col.offset + new Vector2(-col.size.x, col.size.y) * factor;
verts[1] = col.offset + new Vector2(col.size.x, col.size.y) * factor;
verts[2] = col.offset + new Vector2(col.size.x, -col.size.y) * factor;
verts[3] = col.offset + new Vector2(-col.size.x, -col.size.y) * factor;
</code></pre>
    </div>