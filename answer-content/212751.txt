<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Yes, it does <em>technically</em> provide you with a 'correctly' seeded <code>std::mt19937</code> PRNG. However, the approach is comparatively clumsy - though you're only offering it as example code, to be fair. You can do without explicit magic numbers like <code>(624)</code> - for the required <code>19937</code> bits.</p>

<hr>

<h3>header:</h3>

<pre><code>#include &lt;random&gt;

class X
{
    ...
    mutable std::mt19937 rng; // mutable is a design decision.
    ...

    // thanks to Konrad Rudolph for correcting me on potentially misleading
    // typedefs, that may be misleading with other RNGs.

};
</code></pre>

<h3>implementation:</h3>

<pre><code>#include &lt;algorithm&gt;
#include &lt;functional&gt;

X::X ()
{
    std::random_device rdev;
    std::seed_seq::result_type data[std::mt19937::state_size];
    std::generate_n(data, std::mt19937::state_size, std::ref(rdev));

    std::seed_seq prng_seed (data, data + std::mt19937::state_size);
    rng.seed(prng_seed);
}
</code></pre>

<p>The member <code>X::rng</code> has a full <em>random</em> 19937-bit state ready for use. Of course this will depend on the policy of <a href="https://en.cppreference.com/w/cpp/numeric/random/random_device" rel="nofollow noreferrer"><code>std::random_device</code></a>. Not only do you have an essentially inexhaustible period of <code>(2^19937 - 1)</code> when using <code>rng</code> itself - you also have a random state vector of <code>19937</code> bits. The likelihood of re-creating the same initial PRNG state is now ~ (2^-19937), as opposed to (2^-32). Furthermore, <em>all</em> <strong>mt19937</strong> states are theoretically reachable with this code.</p>
    </div>