<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>These test cases were not strict enough and have lead to overlooked bugs:</p>

<blockquote>
<pre><code>@Test
public void test_null_element_in_searchstrings_should_throw() {
    thrown.expect(IllegalArgumentException.class);
    thrown.expectMessage(ERR_NULL_OR_EMPTY_SEARCHSTRING);

    replace("", new String[]{null}, new String[]{"bar"});
}

@Test
public void test_empty_element_in_searchstrings_should_throw() {
    thrown.expect(IllegalArgumentException.class);
    thrown.expectMessage(ERR_NULL_OR_EMPTY_SEARCHSTRING);

    replace("", new String[]{""}, new String[]{"bar"});
}

@Test
public void test_null_element_in_replacements_should_throw() {
    thrown.expect(IllegalArgumentException.class);
    thrown.expectMessage(ERR_NULL_REPLACEMENT);

    replace("", new String[]{"foo"}, new String[]{null});
}
</code></pre>
</blockquote>

<p>These test null or empty values in the search strings, or null values in the replacements should throw validation errors.
However, as test subjects, they use:</p>

<ul>
<li><code>new String[]{null}</code> as search strings : all values are <code>null</code></li>
<li><code>new String[]{""}</code> as search strings : all values are empty</li>
<li><code>new String[]{null}</code> as replacements : all values are <code>null</code></li>
</ul>

<p>As it happens the implementation has bugs that these tests fail to check properly:</p>

<blockquote>
<pre><code>private static boolean anyNullOrEmpty(String[] strings) {
    return Stream.of(strings).allMatch(x -&gt; x == null || x.isEmpty());
}

private static boolean anyNull(String[] strings) {
    return Stream.of(strings).allMatch(x -&gt; x == null);
}
</code></pre>
</blockquote>

<p>Despite its name, <code>anyNullOrEmpty</code> returns true if <em>all</em> values are <code>null</code> or empty. As a result, validation will only raise an error when all values are <code>null</code> or empty. If there is one non-null non-empty element, validation would incorrectly pass without raising errors.</p>

<p>The first step of the fix should be adjusting the test cases to expose the bugs:</p>

<pre><code>@Test
public void test_null_element_in_searchstrings_should_throw() {
    thrown.expect(IllegalArgumentException.class);
    thrown.expectMessage(ERR_NULL_OR_EMPTY_SEARCHSTRING);

    replace("", new String[]{"foo", null}, new String[]{"bar", "baz"});
}

@Test
public void test_empty_element_in_searchstrings_should_throw() {
    thrown.expect(IllegalArgumentException.class);
    thrown.expectMessage(ERR_NULL_OR_EMPTY_SEARCHSTRING);

    replace("", new String[]{"foo", ""}, new String[]{"bar", "baz"});
}

@Test
public void test_null_element_in_replacements_should_throw() {
    thrown.expect(IllegalArgumentException.class);
    thrown.expectMessage(ERR_NULL_REPLACEMENT);

    replace("", new String[]{"foo", "bar"}, new String[]{"baz", null});
}
</code></pre>

<p>And the fix is to simply replace <code>allMatch</code> with <code>anyMatch</code>:</p>

<pre><code>private static boolean anyNullOrEmpty(String[] strings) {
    return Stream.of(strings).anyMatch(x -&gt; x == null || x.isEmpty());
}

private static boolean anyNull(String[] strings) {
    return Stream.of(strings).anyMatch(x -&gt; x == null);
}
</code></pre>
    </div>