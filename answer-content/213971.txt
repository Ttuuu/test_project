<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>public static TimeDifference SubtractDates(DateTime startDate, DateTime endDate)
{
    if (startDate &lt;= endDate)
    {
       ... snip 170 lines ...
    }
    else
    {
        return new TimeDifference(0, 0, 0, 0, 0, 0, 0, 0);
    }
}
</code></pre>
</blockquote>

<p>Apart from the fact that 177 lines is too long for a single method, it's cleaner to handle input validation directly at the top, not indent the main flow and then respond to the validation failure at the bottom. (Also, the test is a bit too conservative). Try:</p>

<blockquote>
<pre><code>public static TimeDifference SubtractDates(DateTime startDate, DateTime endDate)
{
    if (startDate &gt;= endDate)
    {
        return new TimeDifference(0, 0, 0, 0, 0, 0, 0, 0);
    }

    ... snip 170 lines ...
}
</code></pre>
</blockquote>

<hr>

<blockquote>
<pre><code>        //identify median months between two dates
        List&lt;DateTime&gt; medianMonths = new List&lt;DateTime&gt;();
</code></pre>
</blockquote>

<p>Huh? That variable doesn't seem to be touched anywhere else.</p>

<hr>

<blockquote>
<pre><code>        //start with the first calendar month after the start date
        int monthsIterator = 1;
        DateTime iterativeMonth = startDate.AddMonths(monthsIterator);

        //total full months (we are going to return this)
        int months = 0;

        //continue counting months until you reach or surpass the end date
        while (iterativeMonth &lt; endDate)
        {
            months++;
            monthsIterator++;

            //we use the iterator applied against the start month 
            //to account for edge cases like a start date of 1/31/2019 and a 
            //deadline of 3/31/2019.
            //
            //when adding "1 month" to 1/31/2019, c# will return 2/28/2019, so when you 
            //iterate the next month after, it will be 3/28/2019 instead of 3/31/2019.
            iterativeMonth = startDate.AddMonths(monthsIterator);
        }
</code></pre>
</blockquote>

<p>Two things:</p>

<ol>
<li>What's the point of <code>monthsIterator</code>? It seems to me that you could remove it and just use <code>months + 1</code> in its place.</li>
<li>Why work forwards? Given the "lost days" business rule, it seems to me to be far more logical to work backwards.</li>
</ol>

<hr>

<p>That's as far as I can get before getting completely confused and giving up on understanding the code. I might be able to get further if it were refactored into short self-contained methods and if the comments explained the high-level "Why?" rather than the low-level "What?".</p>

<hr>

<blockquote>
<pre><code>public class TimeDifference : IEquatable&lt;TimeDifference&gt;
{
    private int _days;
    private int _hours;
    ... etc ...

    public int Hours
    {
        get
        {
            return this._hours;
        }
        set
        {
            this._hours = value;
        }
    }

    ... etc ...
</code></pre>
</blockquote>

<p>I can't see any reason not to use automatic properties - and if you use Visual Studio, it's probably telling you the same thing.</p>

<hr>

<blockquote>
<pre><code>    public TimeDifference()
    {
        this.Years = 0;
        this.Months = 0;
        this.Days = 0;
        this.Hours = 0;
        this.Minutes = 0;
        this.Seconds = 0;
        this.Milliseconds = 0;
        this.DaysInMonth = 0;
    }
</code></pre>
</blockquote>

<p>This is equivalent to</p>

<pre><code>    public TimeDifference()
    {
    }
</code></pre>

<p>which is somewhat easier to read.</p>

<hr>

<blockquote>
<pre><code>    public static bool operator ==(TimeDifference left, TimeDifference right)
    {
        bool status = false;
        if (left.Years == right.Years &amp;&amp;
            left.Months == right.Months &amp;&amp;
            left.Days == right.Days &amp;&amp;
            left.Hours == right.Hours &amp;&amp;
            left.Minutes == right.Minutes &amp;&amp;
            left.Seconds == right.Seconds &amp;&amp;
            left.Milliseconds == right.Milliseconds)
        {
            status = true;
        }
        return status;
    }
</code></pre>
</blockquote>

<p>This is missing <code>null</code> checks. Also, I find it easier to read</p>

<pre><code>return boolean-expression;
</code></pre>

<p>than</p>

<pre><code>var result = false;
if (boolean-expression)
{
    result = true;
}
return result;
</code></pre>

<hr>

<blockquote>
<pre><code>    public static bool operator !=(TimeDifference left, TimeDifference right)
    {
        bool status = false;
        if (left.Years != right.Years ||
            left.Months != right.Months ||
            left.Days != right.Days ||
            left.Hours != right.Hours ||
            left.Minutes != right.Minutes ||
            left.Seconds != right.Seconds ||
            left.Milliseconds != right.Milliseconds)
        {
            status = true;
        }
        return status;
    }
</code></pre>
</blockquote>

<p>Duplicating <code>==</code> is a potential source of bugs. Far better to write</p>

<pre><code>   public static bool operator !=(TimeDifference left, TimeDifference right) =&gt; !(left == right);
</code></pre>

<p>In fact, in my opinion it was an error in the language design that <code>==</code> and <code>!=</code> are both required to be implemented: I think that only <code>==</code> should be required, and <code>!=</code> should always be converted into <code>!(... == ...)</code> by the compiler.</p>

<hr>

<blockquote>
<pre><code>    public bool Equals(TimeDifference other)
    {
        if (ReferenceEquals(null, other))
        {
            return false;
        }
        if (ReferenceEquals(this, other))
        {
            return true;
        }

        return this.Years.Equals(other.Years)
            &amp;&amp; this.Months.Equals(other.Months)
            &amp;&amp; this.Days.Equals(other.Days)
            &amp;&amp; this.Hours.Equals(other.Hours)
            &amp;&amp; this.Minutes.Equals(other.Minutes)
            &amp;&amp; this.Seconds.Equals(other.Seconds)
            &amp;&amp; this.Milliseconds.Equals(other.Milliseconds);
    }
</code></pre>
</blockquote>

<p>This is the <em>third</em> essential copy of the same code. Don't repeat yourself.</p>

<hr>

<blockquote>
<pre><code>    public override bool Equals(object obj)
    {
        if (ReferenceEquals(null, obj))
        {
            return false;
        }
        if (ReferenceEquals(this, obj))
        {
            return true;
        }

        return obj.GetType() == GetType() &amp;&amp; Equals((TimeDifference)obj);
    }
</code></pre>
</blockquote>

<p><code>GetType()</code> is a bit over the top IMO.</p>

<pre><code>public override bool Equals(object obj) =&gt; Equals(obj as TimeDifference);
</code></pre>

<p>is all you really need. If you're worried about someone making a subclass which breaks the symmetry of <code>Equals</code>, make the class <code>sealed</code>. (In fact, that's probably a good idea anyway: it's a strong hint to the compiler).</p>

<hr>

<blockquote>
<pre><code>    public override int GetHashCode()
    {
        unchecked
        {
            int hashCode = Years.GetHashCode();
            hashCode = (hashCode * 397) ^ Months.GetHashCode();
            hashCode = (hashCode * 397) ^ Days.GetHashCode();
            hashCode = (hashCode * 397) ^ Hours.GetHashCode();
            hashCode = (hashCode * 397) ^ Minutes.GetHashCode();
            hashCode = (hashCode * 397) ^ Seconds.GetHashCode();
            hashCode = (hashCode * 397) ^ Milliseconds.GetHashCode();
            hashCode = (hashCode * 397) ^ DaysInMonth.GetHashCode();
            return hashCode;
        }
    }
</code></pre>
</blockquote>

<p>I'm surprised that this should require <code>unchecked</code>.</p>
    </div>