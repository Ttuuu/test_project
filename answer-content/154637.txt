<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I see that you made improvements to your code since <a href="https://codereview.stackexchange.com/questions/154590/concurrent-blocking-stack">here</a>.</p>

<h1>Synchronizing</h1>

<p>You decided to use internal locking what is technically ok. The way you did it is a variant that I never used. I prefer to use following pattern:</p>

<p>Define an object local Lock-Object:</p>

<pre><code>Object lock = new Object();
</code></pre>

<p>And synchronize with the synchronized-block construct:</p>

<pre><code>public void anyMethod() {
    synchronized (this.lock) {
        // do stuff in monitor here
    }
}
</code></pre>

<p>Even if your approach is comparable to this you should go with less statements as you are always have aquire the lock with locked.compareAndSet(false, true) and release the lock with locked.set(false). You have no compiler and language support for this locking mechanism. You can easily forget to release the lock or you may find yourself in situations that will compromise your locking like: If your list is empty and you call the poll-method, it aquires the lock, failing afterwards with an ArrayIndexOutOfBoundsException that causes the lock never to be released. That is also true for the take-method().</p>

<h1>Missing maxSize constraint (?)</h1>

<p>I do not know if there should be any other assertion in the put-method. But there you do not check for maxSize.</p>

<h1>Handle empty list</h1>

<p>Your take()-method and your poll-method are vulnerable if the internalList is empty. They both fail with an ArrayIndexOutOfBoundsException. Either you return null or what I think is the better way to check for emptyness and throw an "EmptyStackException". This is the standard behaviour from the Java Stack implementation:</p>

<pre><code>java.util.Stack&lt;Object&gt; stack = new java.util.Stack&lt;&gt;();
stack.pop(); // throws EmptyStackException
</code></pre>

<p>Avoiding the ArrayIndexOutOfBoundsException has semantical reasons. This Exception is published from different abstraction layer. So using an EmptyStackException is an interpretation of the underlying state of the internalList from the stack'S point of view.</p>

<p>You may say that you catch the ArrayOutOfBoundsException and map it to the EmptyStackException which would be the correct semantic. But you should avoid it to be thrown as throwing exceptions is very expensive.</p>

<h1>Busy waiting</h1>

<p>Currently you use a while-loop to wait for new elements if no element is present.</p>

<p>Busy waiting should be replaced by a non cpu killing concept. I doubt that in your case busy waiting or equivalent functionality should be done as mentioned in the comments there is a possibility never to recover from it. Providing a timeout mechanism would be an approach. Your busy waiting solution could easily extended to evaluate a given timout but it keeps very cpu expensive.</p>

<p>On the other side a non cpu killing way is complicated. The only chance to do so is to instantiate a Timeout-thread sleeping n seconds, before put the current thread to wait and notify it if the timout is reached with a timout marker. You have to consider that a notification should also be made when new elements become available. Furthermore your timeout thread has to be killed. You have to decide what to do if a timeout happens (returning null oor throwing an exception). Equivalent Java classes return null.</p>

<p>A personal note: In productive environments I would not implement such a timeout mechanism by myself if there is a chance to use existing well tested solutions. For the sake of education this is something where you certainly learn a lot but it also can be very frustrating as this goal is miles away in contrast to centimeters to the implementation so far. But I encourage you at least to go some meters to experience the burden you put on your shoulders.</p>
    </div>