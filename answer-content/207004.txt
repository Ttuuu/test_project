<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In general I would say the code looks fine as far as functionality, though there are a few specific points which I will mention below with more detail. The broadest critique I have is that there are some variables declared with <code>var</code> or <code>let</code> that could use <code>const</code> since they are never re-assigned - for instance <code>validator</code>, <code>ext</code>, <code>params</code>, <code>request</code>, <code>rejected</code>, <code>accepted</code> etc. Even if items are pushed into an array, <code>const</code> can be used since it doesn't imply immutability. </p>

<p>Also, the HTTP response code returned are either 200 or 400, but in some cases other codes may be more appropriate:</p>

<ul>
<li><a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.5" rel="nofollow noreferrer">404</a> for requests to <code>/product/fetchAffiliateProducts</code> that yield no results</li>
<li><a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.5.1" rel="nofollow noreferrer">500</a> for requests to <code>/product/addProduct</code> where the call to <code>Product.collection.bulkWrite</code> throws an error.</li>
</ul>

<p>Additionally, as others have pointed out, the routes file is quite large. Typically a route file would reference functions (e.g. controller methods) in other files.</p>

<hr>

<p>In the route for adding a product, the variable <code>products</code> is used for both the raw value as well as the parsed value:</p>

<blockquote>
<pre><code>app.post("/product/addProduct", requireLogin, async (req, res) =&gt; {
  let products = req.files.file.data;
  try {
    products = JSON.parse(products);
  }
</code></pre>
</blockquote>

<p>To improve readability, don't re-use the variable name - instead use a separate one like <code>rawProducts</code> for the first one:</p>

<pre><code>const rawProducts = req.files.file.data;
try {
  const products = JSON.parse(rawProducts);
}
</code></pre>

<p>That way <code>const</code> can be used because there is no need to re-assign that value. This can also avoid accidental re-assignment in other places too.</p>

<hr>

<p>The logic that validates inputs is intriguing:</p>

<blockquote>
<pre><code>let accepted = [];
let rejected = [];

for (const product of products) {
  if (!validate(product.sku, "string")) {
    rejected.push(product);
    return;
  }
  if (!validate(product.image_url, "url")) {
    rejected.push(product);
    return;
  }
</code></pre>
</blockquote>

<p>If the call to <code>validate()</code> returns <code>false</code> for any one of those elements in the <code>products</code> array, then the <code>return</code> will immediately end <strong>the entire function</strong>, thus rendering <code>rejected</code> (as well as <code>accepted</code>) useless and no response returned to the user (until the script times out). Perhaps you intended to use <code>continue</code> instead.</p>

<hr>

<p>I also dug into the <code>validate</code> function and find it intriguing as well. For instance, the URL validation looks like this:</p>

<blockquote>
<pre><code>case "url":
  return (
    value &amp;&amp;
    !validator.isURL(value, {
      protocols: ["https, http"],
      require_protocol: true
    })
  );
</code></pre>
</blockquote>

<p>which appears to ensure that <code>value</code> is not <a href="https://developer.mozilla.org/en-US/docs/Glossary/Falsy" rel="nofollow noreferrer"><em>falsey</em></a> and the call to <code>validator.isURL()</code> is a <em>falsey</em> value. Shouldn't the code expect the call to <code>validator.isURL()</code> to return a <a href="https://developer.mozilla.org/en-US/docs/Glossary/Truthy" rel="nofollow noreferrer"><em>truthy</em></a> value?</p>

<p>I'm also intrigued by the other cases in that <code>switch</code> statement:</p>

<blockquote>
<pre><code>case "string":
  return value &amp;&amp; !validator.isEmpty(value, { ignore_whitespace: true });
</code></pre>
</blockquote>

<p>The first conditional basically ensures that the value is not <code>false</code>, <code>null</code>, <code>undefined</code>, <code>0</code>, <code>NaN</code>, an empty string/template literal and then the call to <code>validator.isEmpty</code> will "check if the string has a length of zero."<sup><a href="https://www.npmjs.com/package/validator#user-content-validators" rel="nofollow noreferrer">1</a></sup></p>

<p>Then the default case does something similar except the second conditional is not negated:</p>

<blockquote>
<pre><code>default:
  return value &amp;&amp; validator.isEmpty(value, { ignore_whitespace: true });
</code></pre>
</blockquote>

<p>Your code sample doesn't show any cases where the default would be used but it makes me wonder when that would be helpful. And as others have pointed out, there is a <code>return</code> statement after the <code>switch</code> statement, which becomes unreachable by the default case.</p>

<p><sup>1</sup><sub><a href="https://www.npmjs.com/package/validator#user-content-validators" rel="nofollow noreferrer">https://www.npmjs.com/package/validator#user-content-validators</a></sub></p>
    </div>