<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><code>await</code> is only applicable in <code>async</code> functions. The executor function passed to <code>Promise</code> constructor at the code at the question is not defined as <code>async</code>. </p>

<p>The second <code>Promise</code> constructor is not necessary. <code>resolve</code> and <code>reject</code> defined at the single <code>Promise</code> executor can be used.</p>

<p>Include <code>.catch()</code> or function at second parameter of <code>.then()</code> chained to <code>Promise</code> constructor to avoid <code>Uncaught in Promise</code> error and handle potential error within <code>Promise</code> constructor function body.</p>

<pre><code>new Promise((resolve, reject) =&gt; {
  try {
    const complete = () =&gt; !clearTimeout(time) 
      &amp;&amp; this.removeListener(listener);
    const listener = ({command}) =&gt; command === "pong" 
      &amp;&amp; !complete() &amp;&amp; resolve();
    this.addListener(listener);
    this.sendMessage({ command: "ping" });
    const time = setTimeout(() =&gt; !complete() &amp;&amp; reject(), timeout);
  } catch (e) {
      throw e
  }
})
// handle resolved `Promise`, handle error
.then(() =&gt; {}, e =&gt; console.error(e));
</code></pre>
    </div>