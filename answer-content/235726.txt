<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Yes, this is not a good class design. You are mixing global state with in your methods and using it only as a namespace. Instead consider something like this:</p>

<pre><code>from Time import Time
from datetime import datetime



class Logger:
    """If a log file for today already exist, open it in append mode.
    Else, create a new log file for today, and open it in append mode.
    """
    DEBUG = False
    PADDING = 9     # right-padding for type names in the log

    def __init__(self, filename=None):
        if filename is None:
            today = datetime.now().today()
            filename = f"logs/log{today.day}-{today.month}-{today.year}.txt"
        open(filename, "a").close()  # is this needed?

    def clear(self):
        """Clears the log file"""
        with open(self.filename, "r+") as file:
            file.truncate(0)

    def log(self, msg, level="INFO"):
        """Log at level"""
        with open(self.filename, "a") as file:
            type = level.ljust(self.PADDING)
            file.write(f"|{type}|{Time.getHour()}:{Time.getMinute()}| {msg}\n")

    def info(self, msg):
        """Log info"""
        self.log(msg, "INFO")

    def update(self, msg):
        """Used to log whenever a state is updated"""
        self.log(msg, "UPDATE")

    def debug(self, msg):
        """Only logs if the static variable {DEBUG} is set to True."""
        # Only log if DEBUG is set to True
        if not self.DEBUG:
            return
        self.log(msg, "DEBUG")

    def object(self, obj):
        """Intended for use on objects. They usually have a lot of information;
    therefor, we enclose the information with lines to make the log more readable."""
        with open(Logger.filename, "a") as file:
            file.write(f"-----------------------       object log\n")
            file.write(obj)
            file.write(f"\n-----------------------\n")

    def exception(self, msg):
        self.log(msg, "EXCEPTION")


if __name__ == "__main__":
    logger = Logger()
    logger.log("This is a test")
    logger.log("running something")
    logger.debug("Some debugging details")
    logger.exception("Critical error!")
Logger.debug("Some more debugging details")
</code></pre>

<p>Note the <a href="https://www.python.org/dev/peps/pep-0257/" rel="noreferrer">docstring conventions</a> which require the string to be inside the methods and not shadowing the built-in <code>object</code>.</p>
    </div>