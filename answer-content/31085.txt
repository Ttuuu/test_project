<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Ok, this might come across as blunt and hurtful, but it's meant to be helpful (code-review IMO should be harsh, <a href="https://codereview.meta.stackexchange.com/questions/810/guidelines-for-new-users-proposal-tag">here's why</a>):</p>

<p><em>"I have been writing PHP programs in the MVC pattern for quite some time"</em><br>
No, you haven't. Really. M-V-C stands for, as you well know: Model-View-Controller. The code you pasted just strings all three together in one single script. That's spaghetti-code (at best), not framework-like MVC code. Not even close.</p>

<p><em>"I have this PHP file that prints a result in XML, and I put this file in 'model'"</em><br>
Again: any file that generates output belongs in the <em>view</em>. As the name suggests, anything that is sent to the client (ie the client gets to <em>"see"</em>), is part of the clients <em>view</em> of your application. You really should read up on MVC, to find out what belongs where. (there's a link at bottom of my answer)</p>

<hr>

<p>At the top, you set your header, then you process the request (without checking if there has been a POST request). Setting the headers as soon as possible (before anything has been sent to the client) is understandable. But in the context of the MVC pattern, it shouldn't really matter. In fact, it's one of the great things about the real MVC pattern: inside your controller and model layer, you're absolutely sure the headers haven't been sent yet, because the view is only generated (and sent to the client) at the very end of the request. <br>
So, as your app sets about processing the request, and you hit a point where the client should be redirected, you can do so, almost blindly. Safe in the knowledge that the headers aren't sent yet. That's why MVC is so successful, and why redirects are mostly found in the controller. To clarify, look at this very simple graph (from cakePHP site, but it applies to MVC in general):</p>

<p><a href="https://i.stack.imgur.com/CKvza.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/CKvza.png" alt="Simple MVC chart"></a><br>
<sub>(source: <a href="https://book.cakephp.org/2.0/en/_images/basic_mvc.png" rel="nofollow noreferrer">cakephp.org</a>)</sub>  </p>

<p>Here you see the flow of an MVC webapp:</p>

<ol>
<li>The client interacts with the view, and a request is sent to the server.</li>
<li>The dispatcher receives teh request and does some initial processing. Based on this request, the dispatcher deceides which controller needs to be constructed, and which method needs to be called to set things in motion</li>
<li>The controller can do some more checks, to make sure the request is valid. If this is not the case the Model layer is left alone, and the client is redirected. Back over to the dispatcher, (2). This step should be uncommon (as it only occurs when something isn't quite right.<br>
Normally, the inital processing on the request data consists mainly of pouring the data into objects, and deciding what the Model layer needs to do with them.</li>
<li>The model layer receives data from the controller and takes over. Here's where you'll find the actual logic. DB connections, computation, ... it's all contained here (which is why this is also referred to as the business layer). The data provided by the controller can be broken down more (checked/processed), used in queries etc... The result is returned to the controller. Note that the model layer does not communicate with the view in any way!</li>
<li>The controller checks what the Model-layer returned. This can either be data, needed to build a new view, or an object/string saying the data turned out to be invalid/insufficient or nothing at all. Whatever it is, the controller can decide to redirect (back to step 1), call the model again (back to 3) or moving on: build the view, passing the data it received from the Model-layer.</li>
<li>Finally, we can start building the view. The controller passes the data it received from the model layer and the View takes over. It isn't untill we've reached <em>this</em> step that the headers are set. During steps 1 through 4, the headers are nowhere near being set, but at this point, it's too late to go back.
<br>That's why the view is a simple script, containing markup and simple PHP (some loops, some <code>if</code>'s and the occasional <code>switch</code>). A view contains <em>no logic at all!</em>.</li>
<li>Finally, the resulting page (view) is sent to the client. Job done.</li>
</ol>

<p>I hope this makes a few things clear, but now<br>
Moving on:</p>

<pre><code>$connection-&gt;arrayToObject($_POST,$property_overloading = true);
</code></pre>

<p><code>$property_overloading = true</code>? why not pass <code>true</code>? now you have a global variable that is just sitting there. <code>$connection</code>, as I gather from the query at the bottom of your code, is a DB class. What is it doing processing your POST parameters? That's not it's job. That's a gross violation of the Single Responsability Principle. Don't. Just Don't!<br>
<em>SRP</em> states that an object/class should have one and only one task (reason to change): processing POST params <em>and</em> connecting to the DB are <em>2 distinct tasks.</em></p>

<p>Following that, you check a series of parameters that <em>may or may not</em> be set, and sanitize them one by one. I mean: really! you're using an object, clearly that object should take care of sanitizing the data, and, using getters, you could just do something like this</p>

<pre><code>$post-&gt;get('hide', false);
//with getter in Post class:
public function get($param, $defaultValue = null)
{
    if (!isset($this-&gt;data[$param]))
    {//not set, return default
        return $defaultValue;
    }
    return $this-&gt;data[$param];
}
</code></pre>

<p>The same applies to setters, only the setter <em>sanitizes the data</em>.<br>
Though at this point, you have bigger fish to fry: don't do things like</p>

<pre><code>if (preg_match("/\n/", $post-&gt;description))
{
    $post-&gt;description = preg_replace("/\n/is", " ", $post-&gt;description);
}
</code></pre>

<p>In the <code>if</code> experession, you're using a regular expression, only to then use <em>another regex</em> to remove the unwanted chars. Either do:</p>

<pre><code>public function setDescription($desc)
{//in object, of course
    $this-&gt;description = preg_replace('/\n/',' ',$desc);
    return $this;
}
//or:
$this-&gt;description = implode(' ', explode(PHP_EOL, $desc));
</code></pre>

<p>If the string doesn't contain any new-lines, it's not going to be changed! Why bother checking?</p>

<p>Next, you're echo-ing all over the place, to which I can only say: don't. as Dave Jarvis says <a href="http://php.net/manual/en/book.simplexml.php" rel="nofollow noreferrer">use an API like simplexml</a>.</p>

<p>Stringing a query at the end and executing it, depending on what <code>$error</code> hold (is it a global??) is just <em>terrible</em> By the time you're generating output, you should have all your data ready set, good to go. Building the response/view should be a formality. That's why a view should <em>not</em> contain any logic. All data has been fetched and structured accordingly.</p>

<hr>

<p>To answer your question (on which part should go where):</p>

<p>processing the request is usually done in the Routing objects, and the processed request is then used to create/and pass to the (front)controller. The controller passes the bits and pieces of the request to the model-<em>LAYER</em> (services, helpers, data-models), which is where all the logic is kept. The controller then receives the results from the model-layer, and passes it on to the view, which (through a series of loops and if's) generates the output.</p>

<p>If any of this is still a bit merky, <a href="http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller" rel="nofollow noreferrer">refer to the MVC wiki</a> or ask for more details.</p>
    </div>