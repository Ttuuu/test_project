<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Character literals</h2>

<p>While this is technically correct:</p>

<pre><code>if (received != 10) // Terminate if newline char detected
</code></pre>

<p>you're better off writing</p>

<pre><code>if (received != '\n')
</code></pre>

<p>Much of embedded electronics assumes ASCII encoding, and this is no exception, but you're still better off using the symbol instead of the code.</p>

<h2>IO management</h2>

<p>You loop while serial I/O is available:</p>

<pre><code>while (Serial.available())
</code></pre>

<p>But what if there is a pause in the availability of bytes in the middle of your integer? Your code will not do the right thing. Instead:</p>

<pre><code>uint32_t number = 0;
while (true) {
  int received = Serial.read();
  if (received == -1) continue;
  if (received == '\n') break;
  // ...
}
Serial.println(number);
</code></pre>

<ul>
<li>Do not use <code>static</code> for <code>number</code></li>
<li>Don't need a <code>counter</code></li>
<li>Keep looping if no data are available</li>
<li>Ensure that one execution of <code>loop</code> maps to one full output integer</li>
</ul>

<h2>Condition in loop</h2>

<p>If you are using the ATmega328P, it has a dedicated <code>MUL</code> instruction that only takes two cycles. It's more complex and expensive to have your <code>if (counter != 0)</code> than it is to simply unconditionally multiply-and-add.</p>
    </div>