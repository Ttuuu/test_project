<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>/// &lt;remarks&gt;
/// Providing the value 0 to &lt;paramref name="capacity"/&gt;
/// effectively disables the cache.
/// &lt;/remarks&gt;
</code></pre>
</blockquote>

<p><code>_capacity</code> is a <code>private readonly</code> field. I can't think of a situation where to instantiate an cache object with an immutable capacity set to <code>0</code> - hence useless, but you may have some idea with that?</p>

<hr>

<blockquote>
<pre><code>  lock (_lock)
  {
    if (_capacity == 0)
      return;
</code></pre>
</blockquote>

<p>As a consequence of the immutable <code>_capacity</code> initialized to <code>0</code>, the above check doesn't have to be protected by the <code>_lock</code> because the cache will never change.</p>

<hr>

<p>Because there is "heavy" manipulation of the cache in both <code>Add(...)</code> and <code>TryGet(...)</code>, I don't see any benefits of trying to use a reader/writer lock, so I would keep the use of <code>lock()</code> here. But other reviewers may have a more detailed view on that.</p>

<hr>

<p>You could consider to implement <code>IEnumerable&lt;T&gt;</code> or another iterator mechanism in order to make it possible to view the entire content of the cache.</p>
    </div>