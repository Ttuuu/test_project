<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As has been expressed in other answers to this problem, the critical insight is that </p>

<p>$$LCM(1..1) = 1$$
$$LCM(1..n) = \frac{LCM(1..n-1) * n}{gcd(LCM(1..n-1), n)}$$</p>

<p>From that, you can build up to an arbitrary \$n\$ by applying the second formula repeatedly.  </p>

<pre><code>static long leastCommonMultiple(long n) {
    long multiple = 1;

    for ( long i = 2; i &lt;= n; i++ ) {
        multiple *= i / gcd(i, multiple);
    }

    return multiple;
}
</code></pre>

<p>The recursive greatest common denominator (gcd) function is </p>

<pre><code>static long gcd(long a, long b) {
    return ( 0 == b ) ? a : gcd(b, a%b);
}
</code></pre>

<p>And you can get this iteratively with </p>

<pre><code>static long gcd(long a, long b) {
    while ( 0 != b ) {
        long temp = a;
        a = b;
        b = temp % b;
    }

    return a;
}
</code></pre>

<p>On my computer, the iterative version runs in about ten microseconds.  The recursive version is a few microseconds slower.  </p>
    </div>