<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First of all, congrats on producing a solution that works correctly.
However, keep in mind that correctness is often not the only criteria for a successful candidate.
Other typical criteria include performance,
as well as the analysis of corner cases,
where this solution does poorly.</p>

<h3>Time complexity analysis</h3>

<p>What is the time complexity of your solution?</p>

<blockquote class="spoiler">
  <p> <span class="math-container">\$O(n^2)\$</span></p>
</blockquote>

<p>That's a typical question to expect at a programming interview.
The point of the question is not so much the accurate computation,
but an open discussion around this topic.</p>

<p>Would you describe this solution as optimal?</p>

<blockquote class="spoiler">
  <p> No. It's a <em>brute-force</em> solution.</p>
</blockquote>

<p>A likely next question is: <em>can we do better?</em></p>

<h3>Algorithm</h3>

<blockquote>
  <p>Here's the catch: You can't use division in your solution!</p>
</blockquote>

<p>That's some sort of hint.
It's trying to guide you in a certain direction.</p>

<p>Without the catch, would you implement the solution the same way?
If we can use division,
it's easy to see a simple optimization:
first compute the product of all elements,
and then for each element,
divide the total product by the element.
That would have time complexity <span class="math-container">\$O(n)\$</span> instead of <span class="math-container">\$O(n^2)\$</span>.</p>

<p>The catch prevents us from using the simple optimization. Why?
So that we find another way.
This is the hard part, to discover something clever under high pressure.
But at least it's important to reach this point by thinking out loud about time complexity, and the nature of the problem at hand.</p>

<p>You could compute "prefix products" <span class="math-container">\$L\$</span>,
such that <span class="math-container">\$L[i]\$</span> is the product of all the values that are <em>on the left</em> of <span class="math-container">\$a[i]\$</span>,
and "prefix products" <span class="math-container">\$R\$</span>,
such that <span class="math-container">\$R[i]\$</span> is the product of all the values that are <em>on the right</em> of <span class="math-container">\$a[i]\$</span>.
With these helper arrays, the target value to compute for each <span class="math-container">\$i\$</span> is <span class="math-container">\$L[i] * R[i]\$</span>. No division needed, and time complexity of this solution is <span class="math-container">\$O(n)\$</span>.</p>

<p>Then a discussion can follow about tradeoffs.
For example, how does this compare to your original solution?</p>

<blockquote class="spoiler">
  <p> Time complexity is improved, but space complexity is now <span class="math-container">\$O(n)\$</span>, instead of <span class="math-container">\$O(1)\$</span> of brute-force.</p>
</blockquote>

<p>A likely next question is: <em>can we do better?</em></p>

<h3>Corner cases</h3>

<p>Other important points an interviewer may look for:</p>

<ul>
<li><p><em>Does the candidate look for corner cases?</em></p>

<ul>
<li>If you don't look for them, the interviewer will probably nudge you to go look for them. It's important to recognize the nudge.</li>
</ul></li>
<li><p><em>Is the candidate able to find corner cases?</em></p>

<ul>
<li>If you are not able to, the interviewer will probably nudge you in the general direction. It's important to recognize the nudge, and then the general direction, and verbalize all that, thinking out loud.</li>
</ul></li>
<li><p><em>Can the candidate correctly adapt the solution to handle the corner cases?</em></p></li>
</ul>

<p>So what's an interesting corner case here?</p>

<blockquote class="spoiler">
  <p> When computing products of numbers, there may be a risk of integer overflow.</p>
</blockquote>

<p>At this point it's important to ask about the minimum and maximum values that may in the array, as well as the length of the array.
Based on that, the candidate should discuss about the possibility of integer overflows, and try to compute if it can happen or not.
And sure enough, if you are able to conclude that based on the input parameters integer overflow cannot happen,
the interviewer will adjust the parameters accordingly.
And then you need to discuss strategies to deal with the added complication.</p>

<p>You can expect the interviewer to keep adding twists to the problem,
raising more and more challenges.
The interview can branch and go in multiple possible directions,
often in directions where you seem least comfortable.
It's good to try to anticipate potential complications.
Trying to find corner cases is probably a good starting point.</p>

<h3>Discussion</h3>

<p>The posted question contains simply the problem description and the solution.
A discussion around the solution is missing,
maybe you didn't think it's important. But it is.
Thinking out loud, and expressing your logic clearly during a programming interview is usually just as important as the solution itself.</p>
    </div>