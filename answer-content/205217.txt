<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think that implementations of <em>TeamRole</em> should not know how to do things.</p>

<p>Based on the name part: <em>...Role</em> it should only know if a certain user can perform a certain action on a particular resource.</p>

<p>I'm expecting the <em>TeamRole</em> to have a method like:</p>

<pre><code>public interface TeamRole {
    boolean canDelete(Entry entry);
}
</code></pre>

<p>And then change the <em>TeamMember</em>:</p>

<pre><code>public class TeamMember implements TeamRole {
    // need the user to be a part of the class here
    AbstractUser user;
    public TeamMember(AbstractUser user) {
        this.user = user;
    }

    @Override
    public boolean canDelete(Entry entry) {
        if (entry == null) return false;
        return user.getUid().equals(entry.getCreator().getUid());
    }
}
</code></pre>

<p>You can have an alternative with a static method in TeamMember, so you can avoid the instantiation of the class, and just pass the user (<em>requester</em>) as a parameter:</p>

<pre><code>public interface TeamRole {
    // Java 8+
    static boolean canDelete(AbstractUser requester, Entry entry);
}
</code></pre>

<p>So your service method will become:</p>

<pre><code>public static ResponseEntity&lt;Team&gt; deleteEntry(AbstractUser requester, Team team, Entry e) {
    TeamRole role = team.findPermissionsForUser(requester);
    if (role == null)
         return new ResponseEntity("no role found...", HttpStatus.INTERNAL_SERVER_ERROR);

    if (role.canDelete(entry)) {
        try {
            team.delete(e);
            return new ResponseEntity(team, HttpStatus.OK);
        } catch (Exception error) {
            // here you have an actual error to report to 
            // the user, as something that should be done
            // failed.
            return new ResponseEntity(error.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
    // So you can say to the user that nothing is wrong 
    // with the request there is just a permission 
    // issue here.
    return new ResponseEntity("user cannot delete entity", HttpStatus.METHOD_NOT_ALLOWED);        
}
</code></pre>

<p>Profiling users is always an hard job, and each implementation should deal with the system requirements.</p>

<p>A good design should try to separate as much as possible the authorization part of the logic from the business part.</p>

<p>Authorization, like authentication and accounting should be aspect that can be changed in you system without adding any issue on the business logic.</p>

<p>Please have a look at <a href="https://docs.spring.io/spring-security/site/docs/5.1.0.RELEASE/reference/htmlsingle/#jc-authorize-requests" rel="nofollow noreferrer">Spring Security</a>.</p>

<p>I don't mean you should use it, but I think could be a good inspiration on how things could be done cleaner.</p>

<p>Now a couple of things I noticed on your code.</p>

<p>The <em>deleteEnytry</em> method of <em>TeamRole</em> return a boolean, but this is always <em>true</em>!</p>

<p>So why returning such a value?</p>

<p>In this case just put <em>void</em> as the return value.</p>

<p>Have <em>void</em> as a return value from command method is considered a best practice. Of course is not mandatory and don't cover all the case, it is just usual that a coomand should not return something.</p>

<p>In your <em>EntryService</em> you have a <em>NullPointerException</em>:</p>

<pre><code>public class EntryService {
    public static ResponseEntity&lt;Team&gt; deleteEntry(AbstractUser requester, Team team, Entry e) {
        try {         
            // NullPointer here!
            team.findPermissionsForUser(requester)
                .deleteEntry(requester, team, e);
            return new ResponseEntity(team, HttpStatus.OK);
        } catch (IllegalAccessException e1) {
            e1.printStackTrace();
            return new ResponseEntity(e1.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
}
</code></pre>

<p>the <em>team.findPermissionsForUser(requester)</em> didn't return always a value, as it returns just the value found in the Map, that is an actual TeamRole or null if no entry was found in the map.</p>

<p>And as you catch just the <em>IllegalAccessException</em> you will got an error that could be complicated to debug.</p>
    </div>