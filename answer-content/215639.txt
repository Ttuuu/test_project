<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Use a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set" rel="nofollow noreferrer">Set</a>, it will store unique items for you.</p>

<p>You can convert the set to an array with <code>[...set.values()];</code></p>

<p>Or as a set is iterateable there is no need to convert it to an array until needed if at all.</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const data = [{items: ['one', 'two', 'three'] },{items: ['two', 'one', 'four'] }];

// Quickest solution
function getUniqueA(arr) {
    const unique = new Set();
    for (const {items} of arr) {
        for (const item of items) { unique.add(item) }
    }
    return [...unique.values()];
}

// Smallest solution
const getUniqueB = arr =&gt; [...(new Set(arr.map(i =&gt; i.items).flat())).values()];
    
// Returns the set
const getUniqueC = arr =&gt; new Set(arr.map(i =&gt; i.items).flat());
    
const resA = getUniqueA(data);
const resB = getUniqueB(data);
const resC = getUniqueC(data);

logArray("Result A: ", resA);
logArray("Result B: ", resB);
logArray("Result C: ", ...resC);

function logArray(t, ...a) { console.log(t + `[${a}]`) }</code></pre>
</div>
</div>

    </div>