<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">


<p>Let's start with the easy stuff.
At first glance the code looks horrendous but after taking a closer look well it is horrendous.  JK for the most part you need to learn a few tricks that will greatly simplify the code.</p>

<h2>Miscellaneous</h2>

<p>As is, I see no reason for the class members because everyone of these fields are being set at each point of use.  In this way, if one of the references changes you will have to update the reference at each point of use.  </p>

<p>If would make more sense to set the fields one time when the userform is initialized.</p>

<blockquote>
<pre class="lang-vb prettyprint-override"><code>Private rCity As Range, rState As Range, rAgeL As Range, rAgeU As Range, rGender As Range, rDOB As Range, rAge As Range

Private Sub UserForm_Initialize()
    Set rCity = DE.Range("City")
    Set rState = DE.Range("State")
    Set rDOB = DE.Range("DOB")
    Set rGender = DE.Range("Gender")
    Set rAgeL = DE.Range("AgeLower")
    Set rAgeU = DE.Range("AgeUpper")
End Sub
</code></pre>
</blockquote>

<p>Why prefix the ranges with <code>ws</code>?  Typically, <code>ws</code> signifies <code>Worksheet</code>.</p>

<blockquote>
<pre class="lang-vb prettyprint-override"><code>wsCity As Range, wsState As Range, wsAgeL As Range, wsAgeU As Range, wsGender As Range, wsDOB As Range, wsAge As Range
</code></pre>
</blockquote>

<p>Why use the New keyword if you are going to set the instances using CreateObject?  There is no reason for Connection and Recordset to be fields.  They should be local variables.</p>

<blockquote>
<pre class="lang-vb prettyprint-override"><code>CS As New ADODB.Connection, RS As New ADODB.Recordset
</code></pre>
</blockquote>

<p>What the heck are you setting a class member field for in a control AfterUpdate event?  </p>

<blockquote>
<pre class="lang-vb prettyprint-override"><code>Private Sub City_AfterUpdate()

   Set wsCity = DE.Range("City")

   wsCity = DataEntry.City
End Sub
</code></pre>
</blockquote>

<p>Use helper variables to simplify and clarify you code.  Unless you want to ensure that the user changes the value then don't bother setting your fields here.  </p>

<p>Use <code>Me</code> instead of <code>DataEntry</code>.</p>

<blockquote>
<pre class="lang-vb prettyprint-override"><code>Private Sub City_Change()   
    DE.Range("City") = Me.City.Value
End Sub
</code></pre>
</blockquote>

<h2>Sub Search_Click()</h2>

<p>This is a bit of a mess.  To begin with this <code>Search_Click()</code> is doing too much. </p>

<ul>
<li>Setting Class Members</li>
<li>Establishing a Connection</li>
<li>Building a Query String</li>
<li>Executing the Query</li>
<li>Transferring the </li>
</ul>

<p>The fewer tasks that a method performs the easier it is to test and modify.</p>

<p>By combining all the <code>If</code> statements using <code>If</code> and <code>ElseIf</code>, you could eliminate the <code>Select Case</code> block.</p>

<blockquote>
<pre class="lang-vb prettyprint-override"><code>If Len(wsCity.Value) &gt; 0 And Len(wsState.Value) = 0 And Len(wsGender.Value) = 0 And Len(    If Len(wsCity.Value) &gt; 0 And Len(wsState.Value) = 0 And Len(wsGender.Value) = 0 And Len(wsAgeL) = 0 And Len(wsAgeU) = 0 Then
    Rem SEARCHES BY CITY ONLY
    strSQL = strSQL &amp; "CFCITY= '" &amp; UCase(wsCity.Value) &amp; "' AND CFSEX != 'O'"
ElseIf Len(wsCity.Value) &gt; 0 And Len(wsState.Value) &gt; 0 And Len(wsGender.Value) = 0 And Len(wsAgeL) = 0 And Len(wsAgeU) = 0 Then
    Rem SEARCHES BY CITY AND STATE
        strSQL = strSQL &amp; "CFSEX != 'O' AND " &amp; _
                          "CFCITY = '" &amp; UCase(wsCity.Value) &amp; "' AND " &amp; _
                          "CFSTAT = '" &amp; UCase(wsState.Value) &amp; "'"
ElseIf Len(wsCity.Value) &gt; 0 And Len(wsState.Value) = 0 And Len(wsGender.Value) &gt; 0 And Len(wsAgeL) = 0 And Len(wsAgeU) = 0 Then
    Rem SEARCHES BY CITY AND GENDER
        strSQL = strSQL &amp; "CFCITY = '" &amp; UCase(wsCity.Value) &amp; "' AND " &amp; _
                          "CFSEX = '" &amp; wsGender &amp; "'"
    Rem More Clauses

End If
</code></pre>
</blockquote>

<p>Alternately, you could eliminate the <code>If</code> clause by using <code>Select Case True</code>.</p>

<blockquote>
<pre class="lang-vb prettyprint-override"><code>Select Case True
    Rem SEARCHES BY CITY ONLY
    Case Len(wsCity.Value) &gt; 0, Len(wsState.Value) = 0, Len(wsGender.Value) = 0, Len(wsAgeL) = 0, Len(wsAgeU) = 0
        strSQL = strSQL &amp; "CFCITY= '" &amp; UCase(wsCity.Value) &amp; "' AND CFSEX != 'O'"
    Rem SEARCHES BY CITY AND STATE
    Case Len(wsCity.Value) &gt; 0, Len(wsState.Value) &gt; 0, Len(wsGender.Value) = 0, Len(wsAgeL) = 0, Len(wsAgeU) = 0
        strSQL = strSQL &amp; "CFSEX != 'O' AND " &amp; _
                          "CFCITY = '" &amp; UCase(wsCity.Value) &amp; "' AND " &amp; _
                          "CFSTAT = '" &amp; UCase(wsState.Value) &amp; "'"
    Rem SEARCHES BY CITY AND GENDER
    Case Len(wsCity.Value) &gt; 0, Len(wsState.Value) = 0, Len(wsGender.Value) &gt; 0, Len(wsAgeL) = 0, Len(wsAgeU) = 0
        strSQL = strSQL &amp; "CFCITY = '" &amp; UCase(wsCity.Value) &amp; "' AND " &amp; _
                          "CFSEX = '" &amp; wsGender &amp; "'"
    Rem More Cases
End Select
</code></pre>
</blockquote>

<p>I would write a Function in a public module to return the SQL.  This function would take all its arguments through parameters and not rely on global variables or worksheet ranges.  This will break the dependency to the current workbook structure and make if far easier to test your code.</p>

<pre class="lang-vb prettyprint-override"><code>Function getCFMASTSQL(City As String, State As String, DOB As Single, Gender As String, AgeLower As String, AgeUpper As String) As String
    Const BaseSQL As String = "SELECT cfna1, CFNA2, CFNA3, CFCITY, CFSTAT, LEFT(CFZIP,5) FROM CNCTTP08.JHADAT842.CFMAST CFMAST "

    Dim Wheres As New Collection

    If DOB &gt; 0 Then
        Wheres.Add "cfdob7 = " &amp; DOB
    Else
        Wheres.Add "cfdob7 != 0"
        Wheres.Add "cfdob7 != 1800001"
        Wheres.Add "CFDEAD = 'N'"
    End If

    If Len(AgeLower) &gt; 0 And Len(AgeUpper) &gt; 0 Then
        Wheres.Add "TIMESTAMPDIFF(256, CHAR(TIMESTAMP(CURRENT TIMESTAMP) - TIMESTAMP(DATE(DIGITS(DECIMAL(cfdob7 + 0.090000, 7, 0))), CURRENT TIME))) BETWEEN " &amp; AgeLower &amp; " AND " &amp; AgeUpper
    ElseIf Len(AgeLower) &gt; 0 Then
        Wheres.Add "TIMESTAMPDIFF(256, CHAR(TIMESTAMP(CURRENT TIMESTAMP) - TIMESTAMP(DATE(DIGITS(DECIMAL(cfdob7 + 0.090000, 7, 0))), CURRENT TIME))) &gt;=  " &amp; AgeLower
    ElseIf Len(AgeUpper) &gt; 0 Then
        Wheres.Add "TIMESTAMPDIFF(256, CHAR(TIMESTAMP(CURRENT TIMESTAMP) - TIMESTAMP(DATE(DIGITS(DECIMAL(cfdob7 + 0.090000, 7, 0))), CURRENT TIME))) &lt;=  " &amp; AgeUpper
    End If

    If Len(Gender) &gt; 0 Then
        Wheres.Add "CFSEX = '" &amp; Gender &amp; "'"
    Else
        Wheres.Add "CFSEX != 'O'"
    End If

    If Len(City) &gt; 0 Then Wheres.Add "CFCITY = '" &amp; UCase(City) &amp; "'"
    If Len(State) &gt; 0 Then Wheres.Add "CFSTAT = '" &amp; UCase(State) &amp; "'"

    Dim SQL As String

    If Wheres.Count &gt; 0 Then
        Dim Values() As String
        ReDim Values(1 To Wheres.Count)

        Dim n As Long

        For n = 1 To Wheres.Count
            Values(n) = Wheres(n)
        Next

        SQL = BaseSQL &amp; vbNewLine &amp; "WHERE " &amp; Join(Values, " AND ")
    Else
        SQL = BaseSQL
    End If

    getCFMASTSQL = SQL
End Function
</code></pre>

<p><a href="https://i.stack.imgur.com/9ZTYC.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/9ZTYC.png" alt="Immediate Window"></a></p>
    </div>