<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The most misleading thing in your code was this line in <code>queue_element_t</code> typedef:</p>

<pre><code>void * data;      
</code></pre>

<p>You would think data is a pointer to data, but rather it is a pointer to an array of pointer to data. So it should really be:</p>

<pre><code>void * * buffer;      
</code></pre>

<p>Or even better let's make "pointer to data" a new type.</p>

<pre><code>typedef void* Data_Ptr;

typedef struct 
{
    Data_Ptr * buffer; 
    void * next;
} queue_element_t;
</code></pre>

<p>There are several things we need to change:</p>

<ul>
<li><p>In queue_push we can use pointer assignment instead of memcpy. Replace:</p>

<pre><code>memcpy (queue-&gt;tail-&gt;data + queue-&gt;tail_pos, element, queue-&gt;element_width);
queue-&gt;tail_pos += queue-&gt;element_width;    
</code></pre>

<p>with </p>

<p><code>queue-&gt;tail-&gt;buffer [queue-&gt;tail_pos] = element;
queue-&gt;tail_pos ++;</code></p></li>
</ul>

<p>You can even combine those two lines if you want.</p>

<ul>
<li><p>You should change the signiture of queue_pop to <code>Data_Ptr queue_pop (queue_t * queue)</code> and return element or NULL; Change where you call the function to <code>line = queue_pop (queue);</code>  </p></li>
<li><p>Same with queue_pop </p>

<pre><code>element = queue-&gt;head-&gt;buffer [queue-&gt;head_pos];
queue-&gt;head_pos ++;
</code></pre></li>
<li><p>queue_push should become <code>int queue_push (Data_Ptr element, queue_t * queue)</code> element don't need to be const because we are passing in by value. Change where you call the function to <code>queue_push (line, queue);</code></p></li>
</ul>

<p>Once we make this change some optimization opportunities become clear.</p>

<ul>
<li><p>We don't need to know element_width anymore because it is sizeof(Data_Ptr). Delete anything to do with <code>element_width</code>.</p></li>
<li><p>Not sure about the exact requirement of the exercise, but since we know the maximum size of the queue, we don't even need to use a linked list. we can just dynamically allocate an array of Data_Ptr. Refer to <a href="https://www.geeksforgeeks.org/queue-set-1introduction-and-array-implementation/" rel="nofollow noreferrer">this</a> for implementation of array-based queue.</p></li>
<li><p>You don't need to have a separate malloc for temp line for when you have n_element in the array already, just allocate n_element+1 lines in the previous loop, then just pop 1 line and use that as temp.</p></li>
</ul>

<p><strong>Other error:</strong></p>

<ul>
<li><p>You did not check if <code>queue *</code> passed in queue_push and queue_pop is not NULL, result in UB.</p></li>
<li><p><code>void queue_pop(void * const element, queue_t * queue);</code></p>

<p>should really be </p>

<p><code>void queue_pop(void ** element, queue_t * queue);</code></p>

<p>in your implementation.</p></li>
<li><p><code>queue_destroy(&amp;queue);</code></p>

<p>signature of <code>queue_destory</code> is </p>

<p><code>void queue_destroy(queue_t * queue);</code> </p>

<p>but you passed <code>queue**</code> it should really be </p>

<p><code>queue_destroy(&amp;queue);</code></p>

<p>there are 2 occurance of this.</p></li>
</ul>
    </div>