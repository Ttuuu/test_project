<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Since you tagged <code>c++</code>, we should make use of C++ features, and not pretend <code>c++</code> being <code>c</code> with <code>classes</code>.</p>

<h3>No raw loops (see Sean Parent's talk on <a href="https://sean-parent.stlab.cc/presentations/2013-09-11-cpp-seasoning/cpp-seasoning.pdf" rel="nofollow noreferrer">C++ Seasoning</a>)</h3>

<pre><code>auto&amp; c = gameChars[i];
if (Location.Dist(c.GetLocation()) &lt;= AttackRange &amp;&amp;
                  c.HP &gt; 0 &amp;&amp;
                  c.Team != Team)
{
    //We want the weakest with the lowest ID number - this keeps consistent results when re-playing the same part of the game (eg. after a load game)
    if (c.HP &lt; weakestHp || (c.HP == weakestHp &amp;&amp; c.ID &lt; weakestCharId))
    {
        weakestEnemy = &amp;gameChars[i];
        weakestHp = c.HP;
        weakestCharId = c.ID;
    }
}
</code></pre>

<p>The body of the <code>for</code> loop is basically <strong>finding the minimum element</strong> in a range of <code>Characters</code>, where the range is represented by <code>Characters</code>, which satisfy a pre-condition. There is already a function for that in the STL called <a href="http://www.cplusplus.com/reference/algorithm/min_element/" rel="nofollow noreferrer">std::min_element</a>.</p>

<p>In order to use <code>std::min_element</code> you only have to provide a comparison functor or a pre-define a comparison function for <code>Character</code>, e.g.</p>

<pre><code>bool operator&lt;(const Character&amp; lhs, const Character&amp; rhs)
{
    return lhs.HP &lt; rhs.HP || (lhs.HP == rhs.HP &amp;&amp; lhs.ID &lt; rhs.ID);
}
</code></pre>

<p>Now considering <code>std::min_element</code> and including the pre-check, we can rewrite <code>FindAttackTarget</code> to:</p>

<pre><code>Character* FindAttackTarget() const
{
    auto&amp; gameChars = m_pGame-&gt;m_gameCharacters;
    auto min_it = std::min_element(gameChars.begin(), gameChars.end(), [&amp;](auto&amp; lhs, auto&amp; rhs) {
        // also changed the order of evaluation since Location.Dist() is most likely the slowest to evaluate
        if(lhs.HP &gt; 0 &amp;&amp; lhs.Team != Team &amp;&amp; Location.Dist(lhs.GetLocation()) &lt;= AttackRange)
        {
            return lhs &lt; rhs;
        }
        return false;
    }));
    if(min_it == gameChars.end()) // no target found
        return nullptr;
    return &amp;(*min_it);
}
</code></pre>

<p>Et voila, no raw loops, only using STL algorithms. Now everyone can reason about your program without having to worry about any loop shenanigans you might have mixed up.</p>

<p>From here on, there can only be one bottleneck, and that is the <code>Location.Dist()</code> function as @AJNeufeld already mentioned.</p>

<h3>Addon: range-v3</h3>

<p>With the <code>range-v3</code> library, which will be included in <code>c++20</code>, you can pre-filter your attackable targets like this:</p>

<pre><code>bool isAttackable(const Character&amp; c) {
  return c.HP &gt; 0 &amp;&amp; c.Team != Team &amp;&amp; Location.Dist(c.GetLocation()) &lt;= AttackRange;
}

auto attackableChars = gameChars | ranges::view::filter(isAttackable);
</code></pre>

<p>resulting in code for <code>FindAttackTarget</code>:</p>

<pre><code>Character* FindAttackTarget() const {
    auto attackableChars = m_pGame-&gt;m_gameCharacters | ranges::view::filter(isAttackable);
    if(attackableChars.empty()) // no target found
        return nullptr;
    return &amp;(*std::min_element(attackableChars.begin(), attackableChars.end()));
}
</code></pre>
    </div>