<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You declare a lot of variables up front. It's a <a href="https://softwareengineering.stackexchange.com/a/388055">good idea to constrain a variable's scope as much as possible</a>. If a variable is declared at some block level, make sure it's required at that level (like with <code>hasClickedBefore</code>, which needs to be persistent) - otherwise, it'll be easier to read the code if the variable is only declared and used in the inner block that it's used in. Having large numbers of separate variables declared at a certain point means that much more cognitive overhead required when reading the code later. To take one example, rather than:</p>

<pre><code>let clickPosition;
function updateGameLoop(event) {
    clickPosition = getBoardCellFromClick(event);
    // do stuff with clickPosition
</code></pre>

<p>Consider instead, if <code>clickPosition</code> isn't being used elsewhere:</p>

<pre><code>function updateGameLoop(event) {
    const clickPosition = getBoardCellFromClick(event);
    // do stuff with clickPosition
</code></pre>

<p>Another benefit of this is that it allows you to declare variables with <code>const</code>, which is far preferable to <code>let</code> whenever possible. (<code>const</code> does not permit reassignment, unlike <code>let</code> - so, when you declare a variable with <code>const</code>, you'll always be certain of what it refers to without having to search through all intervening lines to make sure it didn't get reassigned to something else somewhere)</p>

<p>Whenever you have a large number of ending brackets <code>}</code> at the end of a script, <em>often</em> that's a sign that things can be refactored to make things more readable. Here, instead of an <code>if</code> followed by a very long <code>else</code>, consider an <code>if</code> which <code>return</code>s at the end - that way, there's no need for a separate block for the <code>else</code>. So, this:</p>

<pre><code>function updateGameLoop(event) {
    clickPosition = getBoardCellFromClick(event);
    if (!hasClickedBefore) {
        // handle first click
    } else {
        if (isHighlightPossibleMoves) {
            // lots and lots of code
        }

        isHighlightPossibleMoves = false;
        isHighlightSquare = false;
        hasClickedBefore = false;
    }
}
</code></pre>

<p>can turn into:</p>

<pre><code>function updateGameLoop(event) {
    clickPosition = getBoardCellFromClick(event);
    if (!hasClickedBefore) {
        // handle first click
        return;
    }
    // these 3 variables aren't used elsewhere below, might as well reassign them now:
    isHighlightSquare = false;
    hasClickedBefore = false;
    if (!isHighlightPossibleMoves) {
        return;
    }
    isHighlightPossibleMoves = false;
    // lots and lots of code
    // or even better, a function call instead here
}
</code></pre>

<p>You do</p>

<pre><code>boardItem = board[clickPosition.y][clickPosition.x];
if (boardItem != " ") isHighlightSquare = true;
if (currentPieces.includes(board[clickPosition.y][clickPosition.x])) {
</code></pre>

<p>Since <code>boardItem</code> has already retrieved the item at that position, might as well use that instead of looking it up again:</p>

<pre><code>boardItem = board[clickPosition.y][clickPosition.x];
if (boardItem !== " ") isHighlightSquare = true;
if (currentPieces.includes(boardItem)) {
</code></pre>

<p>Since you're using ES6+ syntax (which is great!), you can replace the ugly manual iteration required by an ordinary <code>for</code> loop with <code>for..of</code>, it's much cleaner:</p>

<pre><code>for (const moveItem of moves) {
</code></pre>

<p>But, since you're trying to find an item in the array which matches a condition, <code>Array.prototype.find</code> would be even better. (see below for full code)</p>

<p>The conditional operator probably shouldn't be abused as a replacement for <code>if</code>/<code>else</code> (the below will also throw the linting error <a href="https://eslint.org/docs/2.0.0/rules/no-unused-expressions" rel="nofollow noreferrer">no-unused-expressions</a>):</p>

<pre><code>currentPlayer == "w" ? oppositePlayer = "b" : oppositePlayer = "w";
</code></pre>

<p>You <em>can</em> use the conditional operator here, by putting <code>oppositePlayer</code> on the left:</p>

<pre><code>oppositePlayer = currentPlayer === 'w' ? 'b' : 'w';
</code></pre>

<p>You could also consider making toggling between players easier by using a boolean instead, eg <code>currentPlayerIsWhite = true</code>.</p>

<p>(Remember to use strict equality with <code>===</code>, not <code>==</code> - <code>==</code> behaves <a href="https://stackoverflow.com/q/359494">pretty strangely</a> when comparing expressions of different types. Even if you happen not to be working with different types, the use of <code>==</code> will <em>worry</em> people that you may be doing so.)</p>

<p>You can save a reference to the selected <code>whitePromotionSelection</code> elements instead of selecting them twice to be more DRY. (<code>const whitePromotionSelection = document.getElementById("whitePromotionSelection")</code>). Or, even better - it seems likely that you have a typo there with <code>board[promotedPawnPosition.y][promotedPawnPosition.x] = piece;) {</code>, and that you want to set the piece on the board, then either change <code>whitePromotionSelection</code> or <code>blackPromotionSelection</code>, depending on who the active player is. If this is the case, then use the conditional operator upfront to identify which element needs to be displayed inline / hidden (see below).</p>

<p>Now, for the most important part: most of the code in the <code>window.promotePawns</code> and the next <code>else</code> block is identical. Put the identical parts into a function instead, and call that function twice instead of writing the code again. That part of the code handles checking the state of the game after a move is finished, so maybe call it <code>handlePostMove</code>. Putting it all together:</p>

<pre><code>function updateGameLoop(event) {
    const clickPosition = getBoardCellFromClick(event);

    if (!hasClickedBefore) {
        if (clickPosition.x &lt; 8 &amp;&amp; clickPosition.y &lt; 8) {
            const boardItem = board[clickPosition.y][clickPosition.x];
            if (boardItem !== " ") isHighlightSquare = true;
            if (currentPieces.includes(boardItem)) {
                moves = generateMovesForThisPiece(legalMoves, clickPosition);
                isHighlightPossibleMoves = true;
            }
            hasClickedBefore = true;
        }
        return;
    }
    isHighlightSquare = false;
    hasClickedBefore = false;
    if (!isHighlightPossibleMoves) {
        return;
    }
    isHighlightPossibleMoves = false;
    // Use `.find` here, instead of a `for` loop:
    const moveItem = moves.find((moveItem) =&gt; {
        const toSQ = moveItem.to;
        return toSQ.x === clickPosition.x &amp;&amp; toSQ.y === clickPosition.y;
    });
    if (!moveItem) {
        return;
    }
    const toSQ = moveItem.to;
    board = moveItem.node;
    switchSides();

    oppositePlayer = currentPlayer === 'w' ? 'b' : 'w';
    promotedPawnPosition = findPromotedPawns(board, oppositePlayer);

    const handlePostMove = () =&gt; {
        currentPlayerKingPosition = findKing(board, currentPlayer);
        movedCastlesAndKings = updateMovedCastlesAndKings(movedCastlesAndKings, board);
        enpassantSquare = getEnpassantSquare(moveItem.doublePawnMove, board, currentPlayer);
        castlingPerms = castlingPermissions(movedCastlesAndKings, board);
        hashIndex = makeHashTableIndex(castlingPerms, enpassantSquare, board, currentPlayer);
        legalMoves = generateLegalMoves(enpassantSquare, castlingPerms, currentPlayerKingPosition, board, currentPlayer);

        lastMoveFromAndToSQ.from = moveItem.from;
        lastMoveFromAndToSQ.to = toSQ;
        threatningPieces = getThreatningPieces(board, currentPlayer);
        isCurrentPlayerInCheck = isSquareUnderAttack(currentPlayerKingPosition, board, currentPlayer);
        isCheckMate = isCheckmate(legalMoves.length, isCurrentPlayerInCheck);

        if (isCheckMate &amp;&amp; currentPlayer === humanPlayer) {
            document.getElementById("gameover").style.display = "inline";
            document.removeEventListener('click', updateGameLoop);
        }
    };
    if (!promotedPawnPosition) {
        handlePostMove();
        return;
    }
    // promotedPawnPosition is true:
    const promotionSelection = document.getElementById(oppositePlayer === "w" ? "whitePromotionSelection" : 'blackPromotionSelection');
    promotionSelection.style.display = "inline";

    window.promotePawns = function (piece) {
        board[promotedPawnPosition.y][promotedPawnPosition.x] = piece;
        promotionSelection.style.display = "none";
        handlePostMove();
        promotedPawnPosition = undefined;
    };
}
</code></pre>

<p>You could also consider splitting up the larger chunks of the game loop into separate functions. A 70 line function, while better than a 96 line function, is still a bit smelly. Maybe make a function for the <code>!hasClickedBefore</code> block, and one for handling a found move item (everything below the <code>.find</code>), and one for handling a pawn promotion.</p>
    </div>