<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Explanation:</h3>

<p>Your code calls the Fibonacci method twice on each recursive call which produces redundant calculations.  </p>

<p>Here is an efficient and compact way to calculate Fibonacci using some of the <a href="/questions/tagged/ecmascript-6" class="post-tag" title="show questions tagged 'ecmascript-6'" rel="tag">ecmascript-6</a> features.  It keeps a private array in cache holding <code>previous</code> and <code>current</code> values of the sequence to be able to calculate the next values without duplication.  </p>

<h3>Solution:</h3>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const fibonacci = (n, [p,c] = [0,1]) =&gt; n == 0 ? 0 : n == 1 ? c : fibonacci(n-1, [c,p+c])

console.log(fibonacci(3)); // 2
console.log(fibonacci(10)); // 55
console.log(fibonacci(100)); // 354224848179262000000
console.log(fibonacci(1000)); // 4.346655768693743e+208</code></pre>
</div>
</div>


<h3>Verbose solution explanation:</h3>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const fibonacci = (n, [previous, current] = [0,1]) =&gt; {
  //0 appears when initial fib method has value 0, so return 0
  return n == 0 ? 0 : 
         //1 occurs if n is initially 1 or when calculation is done
         //if so return current fibo number
         n == 1 ? current :
         //otherwise call fibonacci, reduce n and update previous and current values
         fibonacci(n-1, [current,previous+current])
}

console.log(fibonacci(50));</code></pre>
</div>
</div>

    </div>