<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Bugs</h2>

<blockquote>
<pre><code>        if part[0] == "-":
            coeffs.append(int(part[1]) * -1)
</code></pre>
</blockquote>

<p>Nowhere in the restrictions does it say that <code>-x^2</code> is not a valid monomial. (It's not constant, and it doesn't have more than one digit of coefficient). But it isn't handled correctly.</p>

<hr>

<p><code>x^2 -2x +1</code> gives output <code>[1]</code>. We'd expect the same output for <code>2x^2 -4x +2</code>, but that gives output <code>[]</code>. The coefficients are still single digits, and the constant term is still positive, so again this meets all of the documented restrictions.</p>

<hr>

<h2>Documentation</h2>

<blockquote>
<pre><code>def get_factors(equation):
    """
    Returns a list of factors of the constant

    :param n: Number to get factors from

    """
</code></pre>
</blockquote>

<p>There's no parameter <code>n</code>. Now, it would be better to take an integer <code>n</code> and factor that, because that is a very reusable function, whereas a function which takes an equation and factors its constant term has almost no reuse value.</p>

<hr>

<blockquote>
<pre><code>def synthetic_division(coefficients, factors):
    """
    Performs synthetic division with the passed coefficients and factors
    Returns a list of intercepts

    :param coefficients: Coefficients to use in the calculation
    :param factors: Factors to test

    """
</code></pre>
</blockquote>

<p>This is a classic example of documentation which tells me virtually nothing that I can't already see in the signature. The only useful line there is the one which tells me what it returns, and even there it's either unspecific or inaccurate: specifically, it returns (or, I assume the intention is that it should return) a list containing <em>all</em> the <em>integer</em> roots.</p>

<p>What I would find more useful from the documentation is</p>

<ol>
<li>A reference to explain what <em>synthetic division</em> is.</li>
<li>A statement that the coefficients are coefficients of an integer polynomial, and the endianness.</li>
<li>An explanation of what <code>factors</code> is. (I would be inclined to rename the variable to <code>candidate_integer_roots</code>).</li>
</ol>

<p>And having arrived at that level of understanding, the name is an irrelevance: what matters is the effect of the function (filters candidate roots to identify the true ones), not the algorithm employed (which is, in any case, not a division at all: it's polynomial evaluation using Horner's method).</p>

<p>And given that this is Python, which has reasonally good functional programming support baked in, I would think it worthwhile to refactor into a function which tests a single candidate root, and then use a comprehension with that as a filter in <code>main</code>.</p>
    </div>