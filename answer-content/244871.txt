<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In <code>GetAll</code>, the feedback you've already had seems pretty valid, to be honest; there is really no value in re-throwing an exception you've caught <em>directly</em>; if this is after some kind of processing, then <code>throw;</code> (without the exception instance) is a good way to re-throw the original exception without damaging it, but in your case the entire thing is redundant, so - just lose the <code>try</code>/<code>catch</code>/<code>finally</code> completely and let the <code>using</code> worry about the rest. Additionally, might as well keep the query "inline", and using <code>AsList()</code> helps make it clear that we're materializing the objects <em>now</em> rather than later (which could cause a problem with deferred execution). This is the <em>same</em> as the defaults, so the <code>AsList()</code> here doesn't change the behavior - just makes it clearer to the reader:</p>
<pre class="lang-cs prettyprint-override"><code>using (var conn = new SqlConnection(_configuration.Value))
{
    var newslist = (await conn.QueryAsync&lt;News&gt;("select * FROM News")).AsList();
    return Json(new { data = newslist });
}
</code></pre>
<hr>
<p>In <code>GetAllData</code> you aren't using <code>param</code>, so trimming - it becomes... huh, the same!</p>
<pre class="lang-cs prettyprint-override"><code>using (SqlConnection connection = new SqlConnection(_configuration.Value))
{
    var newslist = (await connection.QueryAsync&lt;News&gt;("select * FROM News")).AsList();
    return Json(new { data = newslist });
}
</code></pre>
<hr>
<p>Finally, in the jQuery callback, watch out for XSS - see <a href="https://stackoverflow.com/q/47219741/23354">this post on SO</a> for a very similar example. The problem, to be explicit, is that <code>response.data[i].newsHeading</code> could be malicious - for example it could contain <code>&lt;script&gt;</code>.</p>
    </div>