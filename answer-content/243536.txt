<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Just a few thoughts in case I don't have time for a more thorough review later (must sign off soon).</p>

<ul>
<li>The program crashes too easily, for example if I type <kbd>.</kbd> or <kbd>*</kbd> or <code>(3+1)</code>. But this works: <code>3+(1+4)</code></li>
<li>Don't you think it would be a good idea to use a <strong>regular expression</strong> to filter the list of allowed characters ?</li>
<li>To simplify you could use the <a href="https://docs.python.org/3/library/functions.html#eval" rel="nofollow noreferrer"><code>eval</code></a> function, provided that you understand that it has the potential to run arbitrary and malicious code. But you could simplify parsing a lot.</li>
<li>I have the impression that the built-in <code>argparse</code> module could have been useful for the purpose of parsing the input string. Because it is very flexible, you can require multiple arguments for a parameter and also create mutually-exclusive groups, which could be interesting here for example to allow only one operator out of a fixed list.</li>
<li>So, if you for example require one digit, followed by an operator, followed by another digit, that is very easy to express and validate with <code>argparse</code>.</li>
<li>But your needs are slightly more complex, I have to figure out all possible cases first</li>
<li>I am not sure I understand how variable assignment is supposed to work but consider the following:</li>
</ul>

<pre>
    a=1
    a
    1
    b=a+1
    b
</pre>

<p>Crash:</p>

<pre>
Traceback (most recent call last):
  File "/tmp/calc.py", line 561, in 
    calculator.run()
  File "/tmp/calc.py", line 556, in run
    if not self._interpreter.execute():
  File "/tmp/calc.py", line 428, in execute
    if not self.analysis_handler():
  File "/tmp/calc.py", line 446, in analysis_handler
    if not self.expression_handler():
  File "/tmp/calc.py", line 467, in expression_handler
    self.res = self.get_expression_result()
  File "/tmp/calc.py", line 500, in get_expression_result
    if self.is_digit(item):
  File "/tmp/calc.py", line 486, in is_digit
    if item[0] == '0':
TypeError: 'int' object is not subscriptable
</pre>

<p>But this works:</p>

<pre>
a=1
a
1
b=a
b
1
</pre>

<p>So at this point I am thinking I might classify the input in two possible cases and evaluate accordingly:</p>

<ol>
<li>variable assignments</li>
<li>regular calculations</li>
</ol>

<p>Then it seems to me that <code>eval</code> can help you a lot. Just have to strictly define what you want to allow, and what should not be permitted.</p>
    </div>