<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A single student class managing the other students seems odd somehow. In fact, this has lead to a couple of bugs in your code. For example, in the <code>displayInfo</code> method you are iterating and printing all the students' information one by one, but you are always printing this.getName() instead of student.getName().</p>

<p>Also, the interface being command line should have very less to do with the student. So, lets split up the student creation, details collection etc. to a different class.</p>

<p>Here is the modified Student class, which manages only the state for a single student:</p>

<pre><code>public class Student {
    public enum Course{
        HISTORY_101("History 101"), MATH_101("Mathematics 101"), 
        ENGLISH_101("English 101"), CHEMISTRY_101("Chemistry 101"), 
        CS_101("Computer Science 101");

        private String title;
        Course(String title) {
            this.title = title;
        }
        public String getTitle() {
            return title;
        }
    }

    private String firstName;
    private String lastName;
    private String id;
    private final List&lt;Course&gt; courses = new ArrayList&lt;&gt;();
    private BigDecimal tuition = BigDecimal.ZERO; //Default zero

    /** 
     * Package private, so that only admissions class can create this.
     */
    Student(String id, String fName, String lastName) {
        this.id = id;
        this.firstName = fName;
        this.lastName = lastName;
    }

    // Getters and Setters
    public BigDecimal getTuition() {
        return tuition;
    }

    private void setTuition(BigDecimal money) {
        this.tuition = money;
    }

    public String getName() {
        return firstName + " " + lastName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public List&lt;Course&gt; getCourses() {
        return courses;
    }

    public void addCourses(List&lt;Course&gt; courses) {
        if(courses!=null) {
            this.courses.addAll(courses);
            this.setTuition(this.getTuition().add( 
                    new BigDecimal("600").multiply( new BigDecimal( courses.size() ) ) 
                ) );
        }
    }

    public void makePayment(BigDecimal thisPayment) {
        //Backup validation built into student class
        if(thisPayment==null || thisPayment.compareTo(BigDecimal.ZERO)&lt;=0 ) {
            throw new IllegalArgumentException("Invalid payment amount.");
        }else if(thisPayment.compareTo(this.getTuition())&gt;0) {
            throw new IllegalArgumentException("Payment exceeds tuition amount.");
        }
        this.setTuition( this.getTuition().subtract(thisPayment) );
    }
}
</code></pre>

<p>Here is the AdmissionsUI class, which is deeply tied to the user interaction.</p>

<pre><code>public class AdmissionsUI {
    private Scanner keyboard = null;
    private Student[] students = null;


    public static void main(String[] args) {
        AdmissionsUI adminInterface = new AdmissionsUI(); 
        try( Scanner keyboardAutoClose = new Scanner(System.in) ) {
            adminInterface.keyboard = keyboardAutoClose;

            System.out.println("Please enter the number of students you wish to add to the system");
            int size = adminInterface.keyboard.nextInt();
            adminInterface.keyboard.nextLine();
            adminInterface.students = new Student[size];

            for (int i = 0; i &lt; size; i++) {

                System.out.println("Please enter your first name for Student ");
                String firstName = adminInterface.keyboard.nextLine();
                System.out.println("Please enter your last name");
                String lastName = adminInterface.keyboard.nextLine();
                String id = adminInterface.makeID();

                Student student = new Student(id, firstName, lastName);
                adminInterface.students[i] = student;

                adminInterface.addCourses(student);
                adminInterface.payForCourses(student);

                if (i == size - 1)
                    adminInterface.displayStudentsInfo();
            }
        } catch (NegativeArraySizeException e) {
            System.out.println("You can't use a negative number for size");

        }
    }

    /**
     * Prints out each student's name, id, courses, and the current balance for
     * tuition
     *
     * @param studentList
     *            - All the students enrolled and in the list
     */
    private void displayStudentsInfo() {
        for (Student student : students) {
            System.out.println("Student Name: " + student.getName());
            System.out.println("Student ID: " + student.getId());

            if (student.getCourses().size() &gt; 0) {
                System.out.print("Student's Current Courses:" );
                for(Course sc:student.getCourses()) {
                    System.out.print(sc.getTitle() + " ");
                }
                System.out.println();
            } else {
                System.out.println("Student's Current Courses: The student isn't enrolled in any courses");
            }
            System.out.println("Student's Current Balance: $" + student.getTuition());
            System.out.println("------------------------------------------------------");
        }

    }

    /**
     * Allows the user to add classes keeping track of classes they already added
     * and setting the new tuition the user has.
     */
    private void addCourses(Student student) {
        List&lt;Course&gt; classes = new LinkedList&lt;&gt;();


        String answer;
        int nextCourse;

        System.out.println("Do you want to add any courses? yes or no");
        answer = keyboard.nextLine();
        while (!answer.toLowerCase().equals("no")) {
            if (answer.toLowerCase().equals("yes")) {
                System.out
                        .println("Which classes would you like to add now? Please choose from the following selection. "
                                + "Choose the number for the courses");

                int i=1;
                for(Course c:Course.values()) {
                    System.out.println(i++ + " " + c.getTitle());
                }

                if (keyboard.hasNextInt()) {
                    nextCourse = keyboard.nextInt();
                    keyboard.nextLine();
                    classes.add( Course.values()[nextCourse-1] );

                } else {
                    System.out.println("You put in the wrong input: Enter a number 1 - 5 for each class");
                    keyboard.nextLine();
                }

            } else {
                System.out.println("You put in the wrong input: Enter either yes or no next time");
            }

            System.out.println("Do you want to add any more courses?");
            answer = keyboard.nextLine();
        }
        student.addCourses(classes);
    }

    /**
     * A payment system that allows the user to make multiple payments on their
     * tuition
     */
    private void payForCourses(Student student) {
        while (student.getTuition().compareTo(BigDecimal.ZERO) &gt; 0) {
            System.out.println("Your current balance is $" + student.getTuition());
            System.out.println("Do you want pay off you balance right now");

            String answer = keyboard.nextLine();

            if (answer.toLowerCase().equals("yes")) {
                System.out.println("How much would you like to pay right now");

                if (keyboard.hasNextBigDecimal()) {
                    BigDecimal payment = keyboard.nextBigDecimal();
                    payment = payment.setScale(2, RoundingMode.HALF_UP);
                    keyboard.nextLine();
                    if ((payment.compareTo(BigDecimal.ZERO) &gt; 0) &amp;&amp; payment.compareTo( student.getTuition()) &lt;= 0) {
                        student.makePayment(payment);
                    } else if (payment.compareTo(student.getTuition()) &gt; 0) {
                        System.out.println("The value you have given is greater than your tuition");
                    } else if (payment.compareTo(BigDecimal.ZERO) &lt; 0) {
                        System.out.println(
                                "You gave an negative number as a payment value. Please enter a positive value next time");
                    }

                } else {
                    keyboard.nextLine();
                    System.out.println("You entered the wrong input so please input a number next time.");
                }

            } else if (answer.toLowerCase().equals("no")) {
                break;
            } else {
                System.out.println("You gave the wrong input either enter yes or no");
            }
        }
    }

    /**
     * Creates a id using a number from 1 - 4 given by the user and a random string
     * of length 4.
     */
    private String makeID() {
        String grade;
        while (true) { //Returns from method when done
            System.out.println("Enter your school year 1. Freshman, 2. Sophomore, 3.Junior and 4. Senior ");
            grade = keyboard.nextLine();
            if (grade.length() == 1 &amp;&amp; Integer.parseInt(grade) &gt; 0 &amp;&amp; Integer.parseInt(grade) &lt; 5) {
                return grade.concat(randomString());
            } else {
                System.out.println("The input you enter is incorrect please try again");
            }
        }
    }

    /**
     * Returns a randomly generated 4 character string that will combined with a
     * number entered by the user to make the student id.
     *
     * @return The four character random string
     */
    private String randomString() {
        String AB = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
        Random random = new Random();
        int great = AB.length();
        int temp;
        String codeword = "";
        for (int i = 0; i &lt; 4; i++) {
            temp = (int) (random.nextFloat() * great);
            codeword = codeword.concat(Character.toString(AB.charAt(temp)));
        }
        return codeword;
    }
}
</code></pre>

<p>I haven't updated the JavaDocs though to reflect the modifications.</p>
    </div>