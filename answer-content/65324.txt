<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Even though the answer was already accepted, I want to argue a bit differently.</p>

<p>So <strong>practically</strong>, with your current approach, I think the answer is no, not really, <em>unless</em> you can cut down the number of tokens. Though if you can find a way to have just <code>html(body(...))</code>, then <em>yes</em>.</p>

<p>First of all, this is known as an embedded <a href="http://en.wikipedia.org/wiki/Domain-specific_language" rel="nofollow">DSL</a> since you're using language constructs to mimic HTML.</p>

<p>Now I don't think correctness is an issue here (unless you're very dilligent), since you won't be able to encode all the rules of HTML (which version even), not to mention CSS and other standards. And even if you did, you'd have to follow new developments and also fix compatibility issues, which you also won't have enough resources to do.</p>

<p>However, you gain an advantage here, which is more than a bit muddled, because you're already in a templating language anyway: You can use the regular tools of the language to create new kinds of abstractions instead of passing around strings. And you've already done that with the <code>form</code> and <code>input</code> functions. IMO that is a win.</p>

<p>Depending on what you want you could also generate a DOM instead of outputting strings, but using the same syntax, so you gain flexibility for different kinds of usages.</p>

<p>Lastly, you are able to stay in the syntax of your (primary) language. For some that is <em>already</em> enough of a reason to do this kind of thing. Usability-wise this could also be an improvement, since other people already have to know the programming language anyway (except if they just do design I guess, which is probably one of the main arguments against that), so staying within that framework can be less of an overhead than switching between two different systems, including interpolation rules, quoting, etc.</p>
    </div>