<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Indeed the cases for <code>delete</code> can be reduced.</p>

<pre><code>  public void delete(Node node) {
    Node prior = null;
    Node current = head;
    while (current != node &amp;&amp; current != null) {
      prior = current;
      current = current.next;
    }
    if (current != null) {
      if (prior == null) {
        head = current.next;
      } else {
        prior.next = current.next;
      }
      --size;
      if (current == tail) {
        tail = prior;
      }
    }
  }
</code></pre>

<p>In general one would keep Node an internal non-public class, for instance one would not
like people to play with the <code>next</code> field. Hence I would propose:</p>

<pre><code>  public void delete(int value) {
    Node prior = null;
    Node current = head;
    while (current != null &amp;&amp; current.value != value) {
      prior = current;
      current = current.next;
    }
    if (current != null) {
      if (prior == null) {
        head = current.next;
      } else {
        prior.next = current.next;
      }
      --size;
      if (current == tail) {
        tail = prior;
      }
    }
  }
</code></pre>

<p>For the rest:</p>

<ul>
<li>A tab of 4 spaces is still my favorite, probably still mainstream.</li>
<li><code>iterator</code> is an unlucky naming, as there exist an Iterator in java, with a collection method <code>iterator()</code>. I used <code>current</code>.</li>
</ul>

<p>And (as goodie) what about <code>System.out.println(list);</code>:</p>

<pre><code>@Override
public String toString() {
    StringBuilder sb = new StringBuilder("[");
    Node current = head;
    while (current != null) {
      if (sb.length() &gt;= 1) {
          sb.append(", ");
      }
      sb.append(current.value);
      current = current.next;
    }
    sb.append("]");
    return sb.toString();
}
</code></pre>
    </div>