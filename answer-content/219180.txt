<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Given an <a href="https://stackoverflow.com/a/60496/285587">answer on Stack Overflow</a> suggests <strong>almost identical code for protection</strong>, let alone using exactly the same <strong>principle</strong> you can safely assume that your query is protected. </p>

<p>If you want to know how it works, I also wrote an answer on Stack Overflow, <a href="https://stackoverflow.com/a/8265319/285587">https://stackoverflow.com/a/8265319/285587</a> </p>

<p>Nevertheless, as this site is for the code reviews offering some suggestions, I would suggest to use PDO for database interactions instead of mysqli. Simply because PDO API is much more versatile and easier to use. see your snippet rewritten in PDO: </p>

<pre><code>$stmt = $mysqli-&gt;prepare("SELECT * FROM myTable WHERE name = ?");
$stmt-&gt;execute([$_POST['name']]);
if($stmt-&gt;rowCount() === 0) exit('No rows');
while($row = $stmt-&gt;fetch_assoc()) {
  //do some stuff
}
</code></pre>

<p>as you can see some nagging operations are just gone. I wrote a <a href="https://phpdelusions.net/pdo" rel="nofollow noreferrer">tutorial on PDO</a>, which I would quite expectedly recommend. </p>
    </div>