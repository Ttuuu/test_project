<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p><strong>Avoid special cases</strong></p>

<p>There is no need to handle <code>head == null</code> and/or <code>position == 0</code> separately: the finder loop would break immediately either way. The only thing to test is whether <code>prev == null</code> (need to create new head) or not (old head stays).</p></li>
<li><p><strong>Avoid naked loops</strong></p>

<p>The finder loop does a well defined job - it finds <code>n</code>th node - and deserves to be a method on its own.</p></li>
<li><p><strong>Putting it all together</strong></p>

<pre><code>Node FindNth(Node head, int position)
{
    Node prev = null;
    int i = 0;

    while (head !=null &amp;&amp; i &lt; position) {
        prev = head;
        head = head.next;
        i++;
    }

    if (i &lt; position) {
        // List is too short. Throw an exception perhaps?
    }

    return prev;
}

Node InsertNth(Node head, int data, int position) {
    Node newNode = new Node();
    newNode.data = data;

    Node prev = FindNth(head, position);

    if (prev == null) {
        newNode.next = head;
        head = newNode;
    } else {
        newNode.next = prev.next;
        prev.next = newNode;
    }

    return head;
}
</code></pre></li>
</ul>
    </div>