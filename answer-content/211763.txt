<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>    for (int i = 0; i &lt; n; i++) {
        if(i + x &lt; n) {
            newarr[i+x] = arr[i];
        }
        else
            if (i + x &gt;= n) {
            int b = i + x - n;
            newarr[b] = arr[i];
        }
    }
</code></pre>
</blockquote>

<p>This seems rather complicated.  Consider </p>

<pre><code>    int rotationPoint = n - x;
    for (int i = 0; i &lt; x; i++) {
        rotated[i] = original[rotationPoint + i];
    }

    for (int i = x; i &lt; n; i++) {
        rotated[i] = original[i - x];
    }
</code></pre>

<p>This has fewer lines of code and no <code>if</code>/<code>else</code> structure.  It does use two loops instead of one, but it's still shorter.  Both loops are also simpler than the original.  And they make it clearer that you are doing one thing and then a different thing, not one of two things on any iteration.  </p>

<p>I changed the names of the arrays to ones that made more sense to me.  </p>

<p>We can actually get this shorter.  </p>

<pre><code>    System.arraycopy(original, n - x, rotated, 0, x);
    System.arraycopy(original, 0, rotated, x, n - x);
</code></pre>

<p>Now, rather than two loops, we have just two lines of code.  </p>

<p>This is still going to be <span class="math-container">\$\mathcal{O}(n)\$</span>, but it's going to be one of the more efficient linear time implementations.  Copying the array is itself a linear time operation, so you won't be able to do better than that so long as you copy the array.  </p>

<p>It is possible to rotate without copying.  Basically you build a facade over top the array.  Something like </p>

<pre><code>class RotatedArray&lt;T&gt; implements Iterable&lt;T&gt; {

    private final T[] original;

    private final int rotation;

    public RotatedArray&lt;T&gt;(T[] original, int rotation) {
        this.original = original;
        this.rotation = rotation;
    }

    private int calculateRotatedIndex(int index) {
        index += rotation;
        if (index &gt;= original.length) {
            index -= original.length;
        }

        return index;
    }

    public T get(int index) {
        return original[calculateRotatedIndex(index)];
    }

    public void set(int index, T datum) {
        original[calculateRotatedIndex(index)] = datum;
    }

    public Iterator&lt;T&gt; iterator() {
       return new Iterator&lt;T&gt;() {

            private int index = 0;

            public boolean hasNext() {
               return original.length &gt; index;
            }

            public T next() {
               return original[calculatedRotatedIndex(index++)];
            }

            public void remove() {
                throw new UnsupportedOperationException(
                        "Cannot remove an element of an array.");
            }

        };
    }

}
</code></pre>

<p>The <code>Iterator</code> is modified from the one in <a href="https://stackoverflow.com/a/14248833/6660678">this answer</a>.  I retained the <code>remove</code> operation, even though it is unnecessary in Java 8 and higher.  I modified it to use a generic type and implement the rotation (without testing, so be careful if you try to use it).  </p>

<p>I used an <code>if</code> instead of a modulus so that it will handle out of bounds indexes properly.  If the array is size ten and the index is thirty, it should throw an exception (and this does).  The modulus version would happily change thirty to zero, which is a valid index.  </p>

<p>This would be constant time (<span class="math-container">\$\mathcal{O}(1)\$</span>), as it doesn't copy the array.  It's just a facade over the array.  But this would actually be slower in many situations, as it has to calculated the rotated index on every array access (read or write).  I.e. this is a case where asymptotic analysis is misleading.  The particular problem here is that we are calculating the asymptotic behavior of two different kinds of operations:  copying the array and accessing the array.  Copying the array is always going to be linear time.  But accessing the array is constant time.  </p>

<p>In this case, each array access is going to be slower.  But asymptotically that doesn't matter.  They are a constant amount slower, regardless of input size.  So the question is if, given all the operations we want to do on the array, it would be faster to copy the array first.  In many situations, it will.  </p>
    </div>