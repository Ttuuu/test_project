<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Based on the idea to rotate the pack I came up with a shorter solution that generates the permutations of all types. The permutations will not be unique when there are duplicates in the list, but I think that's the right thing to do.</p>

<p>The basic idea is to take all possible rotations of the list of types, and recursively generate permutations of all but the first type for all those rotations. This recurses until only one element is left or all rotations have been done. Here's the complete code and a <a href="https://godbolt.org/z/guYFt5" rel="nofollow noreferrer">live demo</a>:</p>

<pre><code>#include &lt;cstddef&gt;
#include &lt;type_traits&gt;

namespace detail {

template &lt;typename P1, typename P2&gt;
struct merge {};

template &lt;template &lt;typename...&gt; class P, typename... Ts, typename... Us&gt;
struct merge&lt;P&lt;Ts...&gt;, P&lt;Us...&gt;&gt; {
    using type = P&lt;Ts..., Us...&gt;;
};

template &lt;typename T, typename P&gt;
struct prepend {};

template &lt;typename T, template &lt;typename...&gt; class P, typename... Packs&gt;
struct prepend&lt;T, P&lt;Packs...&gt;&gt; {
    using type = P&lt;typename merge&lt;P&lt;T&gt;, Packs&gt;::type...&gt;;
};

// N is the number of rotations to go
template &lt;std::size_t N, typename Pack, typename = void&gt;
struct permutations_impl {};

template &lt;template &lt;typename...&gt; class P, typename... Ts&gt;
struct permutations_impl&lt;0, P&lt;Ts...&gt;&gt; {
    // All rotations done, break the recursion
    using type = P&lt;&gt;;
};

template &lt;std::size_t N, template &lt;typename...&gt; class P, typename T&gt;
struct permutations_impl&lt;N, P&lt;T&gt;&gt; {
    using type = P&lt;P&lt;T&gt;&gt;;
};

template &lt;std::size_t N, template &lt;typename...&gt; class P, typename F, typename... Rest&gt;
struct permutations_impl&lt;N, P&lt;F, Rest...&gt;, std::enable_if_t&lt;(sizeof...(Rest) &amp;&amp; N != 0)&gt;&gt; {
    using PermuteRest = typename permutations_impl&lt;sizeof...(Rest), P&lt;Rest...&gt;&gt;::type;
    using NextRotation = typename permutations_impl&lt;N-1, P&lt;Rest..., F&gt;&gt;::type;

    using type = typename merge&lt;typename prepend&lt;F, PermuteRest&gt;::type, NextRotation&gt;::type;
};

} // namespace detail

template &lt;typename Pack&gt;
struct permutations {};

template &lt;template &lt;typename...&gt; class P, typename... Ts&gt;
struct permutations&lt;P&lt;Ts...&gt;&gt; {
    using type = typename detail::permutations_impl&lt;sizeof...(Ts), P&lt;Ts...&gt;&gt;::type;
};

template &lt;typename Pack&gt;
using permutations_t = typename permutations&lt;Pack&gt;::type;
</code></pre>

<p>I have no idea how to judge the efficiency of my approach, so a comment would be much appreciated if you do.</p>
    </div>