<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Format</h3>

<p>As pointed by others, the formatting could be arranged.
Any decent IDE have a code formatter ;)</p>

<p>Also, classes name should start with an upper case letter ;)</p>

<h3>Using enum when it makes sense</h3>

<p>As you are coding in Java, you should replace the String charclass with an enum which would make more sense. Strings are for representing text, so, you should ask yourselves if being able to <em>upperCase</em> a class make sense ;)
You could even ask if a special enum value can * cast spell * for example ;)</p>

<pre><code>enum CharacterClass {
    GENERIC_RANDOM_WARRIOR(true, true), SINGER(false, false), BIG_SLEEPER(false, true);
    public final boolean canWieldBigAxes;
    public final boolean loveToSleep;

    private CharacterClass(final boolean canWieldBigAxes, final boolean loveToSleep) {
        this.canWieldBigAxes = canWieldBigAxes;
        this.loveToSleep = loveToSleep;
    }
}
</code></pre>

<p>Conditions for someone who can wield axes could then look like this :</p>

<pre><code>if (charClass.canWieldBigAxes) {
    // things
}
// instead of
if (charClass.charAt(0) = 'w')
</code></pre>

<p>Easier to read and more logical, right ?</p>

<h3>Random number</h3>

<p>Your Dice class is neat but you should follow Janos advices :</p>

<ul>
<li>use nextInt(x) + 1</li>
<li>make Random a field that is initialized just once (it also makes for better random number)</li>
</ul>

<h3>OOP</h3>

<p>It may not be your primary goal but your code is sadly not OO.</p>

<p>If you want to make it more OO :</p>

<p>You should try to find things that "entities" in your code are sharing.</p>

<p>For example, both your enemy and the hero could be considered "Entity That Can Fight" (from nom on : BattleUnit) that have max HP, current HP, MinMeleeDamage, MaxMeleeDamage, a level, and, most importantly, can try to hit their opponent !</p>

<p>Thus you could have the following interface :</p>

<pre><code>interface BattleUnit {
    int getLevel();
    void setLevel(final int level);
    int increaseLevel();
    boolean isDead();
    int getHP();
    int getMaxHP();
    int setHP(final int newHP);
    void damage(final int valueToSubstract);
    boolean attack(final BattleUnit target);
    int getMinMeleeDamage();
    int getMaxMeleeDamage();
}
</code></pre>

<p>Your hero would be defined as extending the BattleUnit interface (or whatever you called it) because as a mighty hero he is a "Entity That Can Fight" (or sometimes he'll be a "Entity That Can Fight And Cast Spell")... same goes for the various enemies because they all are BattleUnit deep down.</p>

<pre><code>class Hero implements BattleUnit {
    private String name;
    private CharacterClass charClass;
    // some fields

    public boolean isDead() {
        return getHP() &lt;= 0;
    }

    // blablabla moar code
    public boolean attack(final BattleUnit target) {
        if (die.roll6() &gt; 2) {
            System.out.println("You hit!");

            target.damage(produceDamage());

            if (target.isDead()) {
                System.out.println("You Won!"); // prints if enemy health &lt; 0
                return false;
            }
        } else {
            System.out.println("You miss!");
        }
        return true;
    }
</code></pre>
    </div>