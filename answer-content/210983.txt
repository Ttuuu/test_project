<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Welcome to the site, and welcome to programming! I've recently implemented tic tac toe for console as a practice exercise, so hopefully I can provide some helpful advice in improving your program. If you have any questions about my answer, please feel free to ask them in a comment below my answer.</p>

<p>In general, <a href="http://wiki.c2.com/?GlobalVariablesAreBad" rel="nofollow noreferrer">avoid global variables</a> like <code>intro_board</code>, <code>game_board</code>, etc., with rare exception. It is much better to have each of those variables be part of <code>play_game</code> function that then passes variables as arguments to the other functions when necessary, instead of having unrestricted access to  the variables from any Python function. It will make your functions more generic and will make the program flow easier to understand, in turn reducing the chance of errors.</p>

<p>The other main thing I would say about your program is <strong>don't repeat yourself</strong> (known as the <a href="https://en.wikipedia.org/wiki/Don't_repeat_yourself" rel="nofollow noreferrer">DRY principle</a>). Avoiding repetition is an important step in making your programs easier to maintain. Of course, other design elements can significantly impact the effectiveness of your program, but I think learning to reduce duplication is one of the most important skills one can learn to advance their craft as a programmer. Therefore, I'm going to spend the rest of my answer walking through duplicated code and demonstrating how to fix the duplication.</p>



<h1>Duplication</h1>

<h2>Case study: repeated <code>"|"</code></h2>

<p>To start, I want to focus on just one line:</p>

<pre><code>print("|" + game_board[0][0] + "|" + game_board[1][0] + "|" + game_board[2][0] + "|")
</code></pre>

<p>Looking at this line, you may notice <code>"|"</code> is duplicated. We can fix that! Instead of duplicating <code>"|"</code>, you could just write a function to surround game tiles with <code>"|"</code>:</p>

<pre><code>def surround_tiles(sep, tile1, tile2, tile3):
    """Surround and intersperse three tiles with sep."""
    return sep + tile1 + sep + tile2 + sep + tile3 + sep
</code></pre>

<p>At this point, I will mention that Python already provides a function that is appealing for avoiding string repetition: it's called <a href="https://docs.python.org/library/stdtypes.html#str.join" rel="nofollow noreferrer">str.join</a> (where "<code>str</code>" represents an object of type <code>str</code>). We could use it as follows:</p>

<pre><code>print("|" + "|".join([game_board[0][0], game_board[1][0], game_board[2][0]]) + "|")
</code></pre>

<p>However, we <em>still</em> retain the repetition of <code>"|"</code>, so unfortunately <code>str.join</code> is not quite right for our situation. A better solution would be:</p>

<pre><code>def intersperse(sep, lst):
    """Surround and intersperse an iterable with sep."""
    output = sep
    for i in lst:
        output += i + sep
    return output
</code></pre>

<p>Mind, this is probably not the <em>fastest</em> solution, but that is a topic for another question. This solution is simply an example of removing the duplicated <code>"|"</code> from that single line.</p>

<h2>The larger duplication</h2>

<p>These three lines are repeated verbatim <strong>18 times</strong> in your program:</p>

<pre><code>    print("|" + game_board[0][0] + "|" + game_board[1][0] + "|" + game_board[2][0] + "|")
    print("|" + game_board[0][1] + "|" + game_board[1][1] + "|" + game_board[2][1] + "|")
    print("|" + game_board[0][2] + "|" + game_board[1][2] + "|" + game_board[2][2] + "|")
</code></pre>

<p>This is easily avoidable: simply remove the printing code from the printing code out of the conditional changing of a board position, and do it after that task is accomplished (I'll show how in a moment).</p>

<p>Looking ahead, <code>draw_position_x</code> and <code>draw_position_o</code> are the same function with one letter different! We could halve our lines of code between the two functions by just making a generic <code>draw_position</code> function with a <code>symbol</code> parameter that determines the character that is inserted into the game board.</p>

<p>Using all the knowledge we've gathered so far in this section, we can turn the original 94 lines into just 24 lines:</p>

<pre><code>def draw_position(location, symbol):
    if location == 1:
        game_board[0][0] = symbol
    if location == 2:
        game_board[1][0] = symbol
    if location == 3:
        game_board[2][0] = symbol
    if location == 4:
        game_board[0][1] = symbol
    if location == 5:
        game_board[1][1] = symbol
    if location == 6:
        game_board[2][1] = symbol
    if location == 7:
        game_board[0][2] = symbol
    if location == 8:
        game_board[1][2] = symbol
    if location == 9:
        game_board[2][2] = symbol
    print("|" + game_board[0][0] + "|" + game_board[1][0] + "|" + game_board[2][0] + "|")
    print("|" + game_board[0][1] + "|" + game_board[1][1] + "|" + game_board[2][1] + "|")
    print("|" + game_board[0][2] + "|" + game_board[1][2] + "|" + game_board[2][2] + "|")
</code></pre>

<p>But we can do even better! The input translation conditional is unnecessarily repetitive with the <code>if</code> statements, having an individual conditional check for each number from <code>1</code> to <code>9</code>. We could make a dictionary with each input value and its resultant coordinates:</p>

<pre><code>NUM_TO_COORD = {
    1: (0, 0)
    2: (1, 0)
    3: (2, 0)
    4: (0, 1)
    5: (1, 1)
    6: (2, 1)
    7: (0, 2)
    8: (1, 2)
    9: (2, 2)
}

def draw_position(location, symbol):
    coord = NUM_TO_COORD[location]
    game_board[coord[0]][coord[1]] = symbol

    # ...
</code></pre>

<p>But we don't <em>actually</em> need such a dictionary. We could simply translate the coordinate on the fly, and avoid hard-coding something that could easily have a typographical error somewhere. To do this we, use a process of translating our one dimensional user input into two dimensional coordinates with the modulus and division operators (this is basically doing a <a href="https://en.wikipedia.org/wiki/Positional_notation#Base_conversion" rel="nofollow noreferrer">base conversion</a> process):</p>

<pre><code>def num_to_coord(num):
    # 0-index num
    num -= 1
    coord = []
    while True:
        curr_coord = num % 3
        coord.append(curr_coord)
        if len(coord) &gt;= 2:
            break
        num -= curr_coord
        num //= 3
    return coord

def draw_position(location, symbol):
    coord = num_to_coord(location)
    game_board[coord[0]][coord[1]] = symbol

    # ...
</code></pre>

<p>And finally, we can come back to the game board printing code:</p>

<pre><code>    print("|" + game_board[0][0] + "|" + game_board[1][0] + "|" + game_board[2][0] + "|")
    print("|" + game_board[0][1] + "|" + game_board[1][1] + "|" + game_board[2][1] + "|")
    print("|" + game_board[0][2] + "|" + game_board[1][2] + "|" + game_board[2][2] + "|")
</code></pre>

<p>It can be printed with much less repetition by doing two loops to print it, and using the <code>intersperse</code> function from before:</p>

<pre><code>    for y in range(3):
        print(intersperse('|', [game_board[x][y] for x in range(3)]))
</code></pre>

<p>There are more improvements that can be made, but I've demonstrated the general principle. If you apply this methodology to your coding, you will have much better code. You could even try revising this code and post a new question!</p>

<h2>Addendum</h2>

<p>Based on the <a href="https://chat.stackexchange.com/transcript/87932">conversation we had</a>, there are a few things I'll add:</p>

<p>It <em>is</em> better to have everything* in a function because it allows the module to be imported without running the program. However, there is a standard way that Python programmers run code directly from the module: by conditioning any run code with:</p>

<pre><code>if __name__ == '__main__':
    # ...
</code></pre>

<p>Generally, this code block is placed at the bottom of the program. It is good to put the code in a main function, because it allows one to import the main running code. Also, splitting things into smaller function parts is called procedural programming.</p>

<p>* However, I have asterisked the word "everything" because there is another aspect of programming that may be new to you: object oriented programming (abbreviated OOP). It uses something (unsurprisingly) called objects, which are basically date types. Python is a bit special because every data type and everything in Python is an object. And by everything, I mean pretty much <em>everything</em>, not just variable values!</p>

<p>In modern programming, procedural programming and OOP are generally used together, though it depends on the program.</p>

<p>But don't worry about taking in all the subtle nuances now, it will come with time, and having a greater context. I personally find that practicing programming and reviewing your work is the most effective way to improve as a programmer, though it does depend on what you're programming.</p>
    </div>