<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First of all consider using <a href="https://github.com/dotnet/BenchmarkDotNet" rel="nofollow noreferrer">Benchmark.NET</a> for benchmarking your code. It could help you improve your performance and point out directly which parts are slow. It's very hard for us to point out one "slowest" place in your code, because we don't see all parts that could have influence. And even if you paste it here we can easily misjudge it. We're humans after all. That's why such library was created - to be sure.</p>

<p>But I have few "why" for code you pasted:</p>

<ol>
<li><p>Why you keep checking if there is anything in 's2.Entities'? Loop is
doing it for you.</p></li>
<li><p>Why Entities.Count() shapes.Count() are methods? It implies that those object implements IEnumerable, so when they're invoked IEnumerable actually iterates through all of elements and counts them, could be potential improvement. <a href="https://stackoverflow.com/questions/4098186/lists-count-vs-count">[REFERENCE]</a></p></li>
<li>What is the implementation of 'Touches' methods? It's one of the most crucial parts of the code because it's invoked many times. Even if you wrote that it's standard pulled out from the books and "generally perform well" doesn't mean that it performs well in this case.</li>
<li>Why are you clearing s2? Does it clear collection of entities? It could cause huge GC pressure. Benchmark.NET will help you discover that.</li>
<li>Why are you removing s2 from collection? Is it because it's merged into s1, so it's treated as one shape now, right? Remember that remove complexity could be O(n) (for List collection for example), because it has to 'find' correct shape to remove and while one shape can contain many other shapes it could case huge complexity during comparing one to another. You can easily return new List of shapes that are already merged. </li>
<li><p>Basically this code looks like you're trying to minimize shapes count by merging those that are 'touching eachother'. By 'touching eachother' I mean shapes that has, at least, one entity that touches our shape. If I'm not mistaken we can write it like this:</p>

<pre><code>public List&lt;Shape&gt; MergeShapes(Shape[] shapes)
{
    var mergedShapes = new List&lt;Shape&gt;(shapes.Length); // my assumption also preallocating size of list to minimize resizing
    var alreadyMergedShapesIndices = new HashSet&lt;int&gt;();

    for (int i = 0; i &lt; shapes.Length; i++) // you applied indexing on shapes variable that's why I assumed it's an array
    {
        if (alreadyMergedShapesIndices.Contains(i)) // my assumption after seeing shapes.Remove(s2) we don't want to merge into shape that was already processed.
        {
            continue;
        }

        var shapeToMergeInto = shapes[i];

        for (int j = i + 1; j &lt; shapes.Length - 1; j++)
        {
            var shapeToVerify = shapes[j];

            if (shapeToVerify.Entities.Any(e =&gt; shapeToMergeInto.Touches(e)))
            {
                shapeToMergeInto.Add(shapeToVerify);
                alreadyMergedShapesIndices.Add(j);
            }

            j++;
        }

        mergedShapes.Add(shapeToMergeInto);
    }

    return mergedShapes;
}
</code></pre></li>
</ol>

<p>Please don't consider code in my answer as the fastest possible solution for your problem. It's just my attempt to make it more readable and to be sure that I understood algorithm correctly. The only way to make any performance improvements is to benchmark your code, because you and your team understood how domain is represented, what collections are used. </p>
    </div>