<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If code is not correct it is not useful and it may be harmful. </p>

<hr>

<p>I reviewed the specification for your program,</p>

<blockquote>
  <p>The idea is to extract unique words sorted and grouped by length.</p>
</blockquote>

<p>the sample input,</p>

<pre><code>echo "The unary notation can be abbreviated by introducing different symbols for certain new values. " | go run extract_words.go
</code></pre>

<p>and the sample output.</p>

<pre><code>2(2):   be by
3(3):   can for new
5(1):   unary
7(2):   certain symbols
8(1):   notation
9(1):   different
11(2):  abbreviated introducing
</code></pre>

<p>I then ran your program</p>

<pre><code>2(2):   be by 
3(4):   can for new the 
5(1):   unary 
7(2):   certain symbols 
8(1):   notation 
9(1):   different 
11(2):  abbreviated introducing 
</code></pre>

<p><a href="https://codereview.stackexchange.com/users/122434/felix">felix</a> posted an <a href="https://codereview.stackexchange.com/a/203371/13970">answer</a>, so I ran his program</p>

<pre><code>2(2):   be by
3(4):   can for new the
5(1):   unary
</code></pre>

<p>Three different outputs! All wrong!</p>

<hr>

<p>None of the earlier outputs is correct. I wrote a program to find the correct output.</p>

<p>Output:</p>

<pre><code>2(2):   be by
3(4):   can for new the
5(1):   unary
6(1):   values
7(2):   certain symbols
8(1):   notation
9(1):   different
11(2):  abbreviated introducing
</code></pre>

<p><code>wordsbylen.go</code>:</p>

<pre><code>package main

import (
    "bufio"
    "bytes"
    "fmt"
    "io"
    "os"
    "sort"
    "strings"
    "unicode"
)

func wordsByLen(r io.Reader) ([][]string, error) {
    unique := make(map[string]bool)
    scan := bufio.NewScanner(r)
    for scan.Scan() {
        fields := bytes.FieldsFunc(
            scan.Bytes(),
            func(r rune) bool {
                return !unicode.IsLetter(r)
            },
        )
        for _, field := range fields {
            unique[string(bytes.ToLower(field))] = true
        }
    }
    if err := scan.Err(); err != nil {
        return nil, err
    }

    words := make([]string, 0, len(unique))
    for word := range unique {
        words = append(words, word)
    }

    sort.Slice(words,
        func(i, j int) bool {
            if len(words[i]) &lt; len(words[j]) {
                return true
            }
            if len(words[i]) == len(words[j]) {
                return words[i] &lt; words[j]
            }
            return false
        },
    )

    var byLen [][]string
    for i, j := 0, 1; j &lt;= len(words); j++ {
        if j == len(words) || len(words[j]) != len(words[i]) {
            byLen = append(byLen, words[i:j])
            i = j
        }
    }
    return byLen, nil
}

func main() {
    f := os.Stdin
    if len(os.Args) == 2 {
        var err error
        f, err = os.Open(os.Args[1])
        if err != nil {
            fmt.Fprintln(os.Stderr, err)
            return
        }
        defer f.Close()
    }

    byLen, err := wordsByLen(f)
    if err != nil {
        fmt.Fprintln(os.Stderr, err)
        return
    }
    for _, words := range byLen {
        if len(words) &gt; 0 {
            list := strings.Join(words, " ")
            fmt.Printf("%d(%d): \t%s\n", len(words[0]), len(words), list)
        }
    }
}
</code></pre>

<hr>

<p>Go programmers usually like to write efficient code. I ran the code on Shakespeare:</p>

<pre><code>The Complete Works of William Shakespeare by William Shakespeare
http://www.gutenberg.org/files/100/100-0.txt
</code></pre>

<p>For my program (correct results)</p>

<pre><code>real    0m0.369s
user    0m0.356s
sys     0m0.012s
</code></pre>

<p>For your program (incorrect results)</p>

<pre><code>real    0m0.675s
user    0m0.630s
sys     0m0.040s
</code></pre>

<p>For felix's program (incorrect results)</p>

<pre><code>real    1m58.704s
user    1m58.600s
sys     0m0.140s
</code></pre>

<p>Since felix's program takes hundreds of times longer than other programs, it is unlikely to be useful.</p>

<hr>

<p>You and felix have a narrow view of words, limiting them to ASCII letters</p>

<pre><code>regexp.Compile("[^a-zA-Z]")
</code></pre>

<p>There is a larger world out there: <a href="http://unicode.org/" rel="nofollow noreferrer">The Unicode Consortium</a>. For example, <a href="https://golang.org/pkg/unicode/#IsLetter" rel="nofollow noreferrer"><code>unicode.IsLetter()</code></a></p>

<hr>

<p>The Go garbage collector manages memory, it does not manage operating system resources like files. To avoid crashing with too many open files, get into the habit of releasing OS file resources by closing files when no longer needed. See my use of <code>defer f.Close()</code>.</p>

<hr>

<p>Two key goals of the Go programming language are simplicity and readability.</p>

<p>Your text algorithms favor regular expressions, which can be complicated and error prone. See Mastering Regular Expressions, 3rd Edition, Jeffrey Friedl, ISBN-13: 978-0596528126.</p>

<p>Your data structures are complicated, favoring maps (dictionaries). For example, <code>map[int]map[string]struct{}</code>. I used simple structures: <code>map[string]bool</code>, <code>[]string</code>, and, at the end, <code>[][]string</code>.</p>

<p>Your control structures look complicated. I used a simple, sequential control structure: unique words -&gt; word list -&gt; sort word list -&gt; group word list -&gt; print grouped word list.</p>
    </div>