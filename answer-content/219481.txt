<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Having a single <code>main</code> function that reads from <code>os.stdin</code> and writes the unrelated prompt to <code>os.stdout</code> is a bad architecture. In Python it is easy to create reusable modules, by using the following structure:</p>

<pre><code>def censor(text, banned_words):
    """
    Returns a copy of the given text in which all words from
    banned_words are replaced with asterisks of the same length.
    """

    # TODO: insert some code here.


def main():
    # contains all the input/output stuff
    # TODO: insert some code here.


if __name__ == "__main__":
    main()
</code></pre>

<p>Programmed this way, other Python code can just <code>import censor</code> and then use the censoring code, no matter where the set of banned words comes from.</p>

<p>Having the code split into two separate functions also makes sense for understanding what the code does. If you're interested in how censoring works, look at the <code>censor</code> function. If you are interested in reading and writing to files, look in <code>main</code>.</p>

<p>Some other random remarks:</p>

<pre><code>text = open(name, "r", encoding="latin_1")
</code></pre>

<p>Please don't use the latin_1 encoding if possible. It's been en vogue in the 1990, nowadays we prefer to use the full Unicode character set (including Arabic, Bengali, Chinese, Devanagari, Emoji, and many more) and UTF-8 to save Unicode text into byte-oriented files.</p>

<p>Most probably that file contains only ASCII characters anyway since CS50 takes place in the USA, where foreign languages and writing systems are often ignored.</p>

<pre><code>text = open(name, "r", encoding="latin_1")
if not text:
    ...
</code></pre>

<p>This will not work since the <code>open</code> function either succeeds by returning a file object, or it fails and throws an exception. It never returns <code>None</code>. That's probably a leftover from your last exercise in the C programming language. But Python is very different from C.</p>

<p>Whenever you open a file, you must also close it when you're done with it. The simplest way is:</p>

<pre><code>with open(name, 'r', encoding='UTF-8') as f:
    lines = f.readlines()
</code></pre>

<p>The <code>with</code> statement will automatically close the file at the end. It's not visible in the source code, you have to just know this.</p>

<pre><code>toCensor = input("What message would you like to censor? ")
</code></pre>

<p>Be sure to only ever run this program in Python 3, since in Python 2 the <code>input</code> function behaves differently.</p>

<p>The name <code>toCensor</code> should rather be <code>to_censor</code> since in Python variable names and function names are written in <code>snake_case</code> instead of <code>camelCase</code>.</p>

<p>In the sentence <code>This is BAD, BAD, BAD.</code>, assuming that <code>BAD</code> is a bad word, what would the expected output be? How can you change your program to do the expected thing? What should it do about <code>BADABOOM</code>?</p>
    </div>