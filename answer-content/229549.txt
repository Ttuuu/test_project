<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I wrote an example of what you can do to clean this up:</p>

<pre><code>import re
from collections import OrderedDict
from csv import DictWriter
from os.path import splitext
from sys import argv
from typing import Iterable


def get_measure_matches(log: str) -&gt; tuple:
    return tuple(re.finditer(r'Measurement: (.*)$', log, re.M))


def parse_main(log: str, measure_matches: tuple) -&gt; (list, OrderedDict):
    all_cols = OrderedDict((('step', None),))
    rows = []
    main_row_re = re.compile(r'(\S+)=(\S+)')
    main_lines = log[:measure_matches[0].start()].splitlines()
    step = 1
    for line in main_lines:
        row = {}
        for match in main_row_re.finditer(line):
            k, v = match.groups()
            all_cols[k] = None
            row[k] = v
        if row:
            row['step'] = step
            rows.append(row)
            step += 1

    for m in measure_matches:
        all_cols[m[1]] = None

    return rows, all_cols


def parse_measures(log: str, measure_matches: tuple, rows: Iterable[dict]):
    measure_ends = (*(m.start() for m in measure_matches[1:]), -1)

    measure_re = re.compile(r'^\s*(\S+)\s+(\S+)', re.M)
    for measure, measure_end in zip(measure_matches, measure_ends):
        measure_name = measure[1]
        blob = log[measure.end(): measure_end]

        for match in measure_re.finditer(blob):
            try:
                step, val = match.groups()
                rows[int(step) - 1][measure_name] = float(val)
            except ValueError:
                pass


def write_csv(rows: Iterable[dict], cols: Iterable[str], csv_filename: str):
    """
    step,iload,vdc,rg,eon,eoff
    1,10.0,36.0,1.0,1.82588e-06,4.23893e-06
    2,20.0,36.0,1.0,4.17134e-06,6.95585e-06
    (etc)
    """
    with open(csv_filename, 'w') as csv_file:
        writer = DictWriter(csv_file, cols)
        writer.writeheader()
        writer.writerows(rows)


def main():
    log_filename = argv[1]
    with open(log_filename) as log_file:
        log = log_file.read()

    measure_matches = get_measure_matches(log)
    rows, all_cols = parse_main(log, measure_matches)

    parse_measures(log, measure_matches, rows)

    csv_filename = splitext(log_filename)[0] + '.csv'
    write_csv(rows, all_cols.keys(), csv_filename)


if __name__ == '__main__':
    main()
</code></pre>

<p>Notes:</p>

<ul>
<li>There are methods</li>
<li>No need to use pandas - this runs on base Python 3</li>
<li>Better use of <code>finditer</code></li>
<li>Type hints</li>
<li>No need to call <code>group(n)</code></li>
<li>Implicitly close files in a context manager</li>
</ul>
    </div>