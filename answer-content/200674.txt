<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I've finally had a chance to make an answer to this, but I want it noted that <a href="https://codereview.stackexchange.com/users/22270/bruno-costa">Bruno Costa</a> had a <a href="https://codereview.stackexchange.com/a/199619/73844">great answer</a>, and this is only an improvement on his.</p>

<p>First and foremost:</p>

<blockquote>
  <p>The only question I have is am I ok to store the iterations in the database record or is this a bad practice? I was planning on creating a column to store salt, another for the hashed password, and possibly one for the amount of iterations.</p>
</blockquote>

<p>This is 100% acceptable, and encouraged. It's necessary, especially to change the iteration count (which you should be doing annually), as you'll want to increase it a little regularly. (There's other guidance out there for how often and how much to increase it, but basically do what is necessary to keep the user cost low-ish, and keep attackers having to work for it.)</p>

<blockquote>
  <p>My thought with the iterations was that I read that it should increase every so often so when creating new users or they update their passwords it would pull the value to pass in from the database.</p>
</blockquote>

<p>You should increase the iteration count when necessary, and do the rehashing on user-login. Forget about making them change their password, you can change their iteration and salt each time they login (as at that moment you absolutely <em>must</em> know the password anyway). I even go out-of-the-way to change the salt each time users login to my websites.</p>

<hr>

<p>Now some notes on the <a href="https://codereview.stackexchange.com/a/199619/73844">other answer</a>:</p>

<p>While <a href="https://msdn.microsoft.com/en-us/library/system.security.cryptography.rfc2898derivebytes%28v=vs.110%29.aspx?f=255&amp;MSPPError=-2147217396" rel="nofollow noreferrer"><code>Rfc2898DeriveBytes</code></a> only gives you 20 bytes of entropy (as indicated), I always use one of the constructors that takes a <a href="https://msdn.microsoft.com/en-us/library/system.security.cryptography.hashalgorithmname(v=vs.110).aspx" rel="nofollow noreferrer"><code>HashAlgorithmName</code></a>, and I always provide <a href="https://msdn.microsoft.com/en-us/library/system.security.cryptography.hashalgorithmname.sha512(v=vs.110).aspx" rel="nofollow noreferrer"><code>HashAlgorithmName.SHA512</code></a>. This gives you entropy up to 64 bytes, so you can use your <code>32</code>, or go all the way up to the <code>64</code>. (That's up to you.)</p>

<p>Additionally:</p>

<blockquote>
  <p>Answering your additional question about the iteration count, there is nothing wrong with that. You can even use that as a <code>pepper</code>, different users can have slightly different iteration counts. Which makes the job of a hacker harder. In some scenarios people also store the actually algorithm that was used to hash the password. That might allow you to switch between algorithms in a easier fashion.</p>
</blockquote>

<p>There are some good and bad points here (alright, I shouldn't say "bad", just less optimal):</p>

<ol>
<li><strong>DO</strong> store the <code>ITERATION_COUNT</code> definitely;</li>
<li><strong>DO</strong> store the <code>HASH_ALGORITHM_NAME</code> at your discretion (probably worth doing so);</li>
<li><strong>DO NOT</strong> <em>intentionally</em> vary <code>ITERATION_COUNT</code> per user, this offers no advantage to securing the user, especially if the attacker gets a copy of the database, and only complicates your code and introduces potential vulnerabilities;</li>
<li><strong>DO</strong> consider adding an <a href="https://eprint.iacr.org/2006/272.pdf" rel="nofollow noreferrer">efficient random delay</a> to prevent side-channel analysis and timing attacks;</li>
</ol>
    </div>