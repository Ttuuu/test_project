<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some is personal taste, some is improving performance, some is avoiding deadlocks:</p>

<pre><code>@Override
public void transferAmount(String accountNumberFrom, String  accountNumberTo, double amountToTransfer) throws IllegalArgumentException {
    synchronized(accountMap) {
        Account accountFrom = getAccount(accountNumberFrom, SOURCE_ACCOUNT_DONOT_EXIST);
        if (accountFrom.getBalance() &gt;= amountToTransfer) {
            // BTW: I think that should be only &gt; because balance==amount should be possible
            throw new IllegalArgumentException(format(NOT_ENOUGH_BALANCE, accountNumberFrom));
        }
        Account accountFrom = getAccount(accountNumberTo, DESTINATION_ACCOUNT_DONOT_EXIST);
        accountFrom.withdrawAmount(amountToTransfer);
        accountTo.addAmount(amountToTransfer);
    }
}

private Account getAccount(String accountNumber, String errorReason) {
    Account ret = accountMap.get(accountNumber);
    if (ret == null) {
        throw new IllegalArgumentException(format(errorReason, accountNumberFrom));
    }
    return ret;
}
</code></pre>

<p>In lack of knowledge about the details of this program, I changed everything to be synchronized. The reason is that otherwise it will lead to a deadlock, if there are two accounts each sending money to each other. Each thread might be able to aquire the first lock but then both will wait to get the second lock. In other words: You need to redesign your locking mechanism but without knowing more about the whole thing it's hard to come up with usable proposals.</p>

<p>What else have I changed:</p>

<ul>
<li>I created a method <code>getAccount</code> that returns the account or throws the <code>IllegalArgumentException</code> with the error message passed by the caller. This avoid code duplication and makes the code more readable by itself</li>
<li>I personally prefer early returns and throwing exceptions. So instead of a big if-cascade that all need to pass before you do something, I prefer to check the inverted condition and return or throw immediately instead. I found that to be more understandable when looking at it after some time has passed.</li>
<li>Instead of checking the existence of a key and the retrieval of the value in case it exists, it's simpler (and faster) to try to get the value and check for <code>null</code> unless <code>null</code> is a valid value (which is possible with <code>HashMap</code> but I doubt is the case in your application).</li>
</ul>

<p>Some more thoughts:</p>

<ul>
<li>If <code>accountMap</code> can change (accounts added or deleted), you need to make sure that access to it is synchronized as well (with my change it already is but when you put it back to locks you need to take care of that). Otherwise you might transfer money to an account that stopped existing at that very moment and money "vanishes".</li>
<li>Your account works with <code>BigDecimal</code> internally but you pass a <code>double</code> to <code>transferAmount</code>. That should be <code>BigDecimal</code> as well, otherwise you still end up with rounding problems. Your implementation of <code>getBalance</code> looks like you've ran into this problem already and your rounding is your workaround to fix the effect.</li>
</ul>
    </div>