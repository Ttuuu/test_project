<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I have not figured out all processing you need to do, so my solution will not give you the exact same <code>data.frame</code>, but it should be close enough for you to get by with minimal post-processing.</p>

<h2>General consideration</h2>

<ul>
<li>You are using nested for loops to fill a <code>data.frame</code>. This is usually a bad idea, there are almost always better ways to go about it. If you really need to use loops, read about preallocation first (for example in <a href="https://stackoverflow.com/questions/23882510/preallocation-in-r">this question on stackoverflow question</a>)</li>
<li>Think about the structure of your data. Do you really need one row for each single individual, or is a <code>count</code> variable enough? (see below)</li>
<li>Your task can be split up into two distinct steps: Reshaping the input, and replicating the rows. A function should always do one thing and not several (though in this case I agree that it is not obvious that you are actually doing two things)</li>
</ul>

<h2>Reshaping the input</h2>

<p>The first function restructures your data so that it is easier to deal with. We use the <strong>reshape2</strong> package for that:</p>

<pre><code>parse_chiro &lt;- function(x){
  taxa &lt;- names(x)[[1]]
  reshape2::melt(
    Chiro.1,
    id.vars = c("Habitat", taxa),
    variable.name = "Size",
    value.name = "count"
  )
}

res &lt;- parse_chiro(Chiro.1)
</code></pre>

<p>This gives you a <code>data.frame</code> with all the columns you want, + a <code>count</code> variable that contains how often you want the row to be replicated. The syntax for reshape is a bit hard to explain and I refer you to the package documentation for that. You can achieve something similar with the newer tidyr package, but I personally prefer reshape. </p>

<h2>Expanding the data</h2>

<p>The next part is expanding the <code>data.frame</code> with the <code>count</code> variable. 
This is where most if not all of the speed improvement to your original function comes from. I cannot think of an application where you would want your data like that, but if you still need to do it, go about it like this:</p>

<pre><code>expand_chiro &lt;- function(x){
  # Removes all rows with NA count. I am not sure if you really want that?
  x &lt;- x[!is.na(x$count), ]  
  x$rowid &lt;- seq_len(nrow(x))
  rep_rowid &lt;- rep(x$rowid, round(x$count))
  x[rep_rowid, ]
}
</code></pre>

<p>Using the vectorized function <code>rep()</code> and <code>data.frame</code> row indexing will yield a significant speed increases to your nested loops. There were also a few things wrong with your loop that could have improved the performance, but the way I propose is much cleaner, so I am not going into that. </p>

<h2>Remarks</h2>

<ul>
<li>rbind all your parsed <code>data.frames</code> <em>before</em> you do the expanding (so that you only need to expand once)</li>
<li>I would recommend to stick to the <a href="http://style.tidyverse.org" rel="nofollow noreferrer">tidyverse style guide</a> for naming your functions and variables. It is currently the most popular style guide for R, and you are already using tidyverse packages (<strong>readxl</strong>, <strong>dplyr</strong>)</li>
<li>2M rows are no problem in R, the limit is your RAM. You can use <code>format(object.size(x), "auto")</code> to display the size of your object in human readable form. In theory, you can work with objects about 1/3 - 1/2 the size of your available RAM, but if you are not super careful and know what you are doing you might crash R. Your <code>data.frame</code> should be only a few hundred MB so no need to worry.</li>
</ul>
    </div>