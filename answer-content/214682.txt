<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>About naming:</p>

<p><code>intI</code> and <code>intK</code>: don't include the type in the variable name, it is obvious from the context and intellisense and as a loop index a plain <code>i</code> and <code>k</code> are more understandable.</p>

<hr>

<p>A first simple optimization is that you can avoid the check if <code>intK</code> has reached the end: </p>

<blockquote>
  <p><code>a.Length - 1 == intK ?</code></p>
</blockquote>

<p>Instead you can just iterate up to <code>a.Length - 1</code> and then append <code>temp</code> at the end:</p>

<pre><code>public static int[] rotLeft(int[] a, int d)
{
  for (int intI = 0; intI &lt; d; intI++)
  {
    int temp = a[0];

    for (int intK = 0; intK &lt; a.Length - 1; intK++)
    {
      a[a.Length - (a.Length - intK)] = a[a.Length - (a.Length - (intK + 1))];
    }

    a[a.Length - 1] = temp;
  }

  return a;
}
</code></pre>

<hr>

<p>Next step is to consider the math:</p>

<pre><code>a.Length - (a.Length - intK) = a.Length - a.Length + intK = intK
</code></pre>

<p>and in the same way:</p>

<pre><code>a.Length - (a.Length - (intK + 1)) = intK + 1
</code></pre>

<p>So you could write:</p>

<pre><code>public static int[] rotLeft(int[] a, int d)
{
  for (int intI = 0; intI &lt; d; intI++)
  {
    int temp = a[0];

    for (int intK = 0; intK &lt; a.Length - 1; intK++)
    {
      a[intK] = a[intK + 1];
    }

    a[a.Length - 1] = temp;
  }

  return a;
}
</code></pre>

<hr>

<p>But the real performance problem is that you move each entry in the array <code>d</code> number of times. You can move each entry just once by moving it d places. A simple way to do that could be:</p>

<pre><code>public static int[] rotLeft(int[] a, int d)
{
  int[] temp = new int[d];

  for (int i = 0; i &lt; d; i++)
    temp[i] = a[i];

  for (int i = d; i &lt; a.Length; i++)
  {
    a[i - d] = a[i];
  }

  for (int i = 0; i &lt; d; i++)
    a[a.Length - d + i] = temp[i];

  return a;
}
</code></pre>

<hr>

<p>Another issue is that you operate on the input array <code>a</code> directly and return it as a return value. In this way both the return value and <code>a</code> contains the shifted values. In a challenge like this it may not be important, but I think I would return a new array with the shifted data leaving <code>a</code> unchanged - in "real world":</p>

<pre><code>public static int[] rotLeft(int[] a, int d)
{
  int[] result = new int[a.Length];

  for (int i = d; i &lt; a.Length; i++)
  {
    result[i - d] = a[i];
  }

  for (int j = 0; j &lt; d; j++)
  {
    result[a.Length - d + j] = a[j];
  }

  return result;
}
</code></pre>

<p>If you want to operate on <code>a</code> directly intentionally it would be more consistent returning <code>void</code> to signal that you're operating on the input directly.</p>
    </div>