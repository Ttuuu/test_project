<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Data classes</h2>

<p>Since you are using the classes as immutable data containers, it would be possible to significantly cut down the amount of code you have to write to create all of them using <code>namedtuple</code> from the <a href="https://docs.python.org/3/library/collections.html#collections.namedtuple" rel="noreferrer"><code>collections</code></a> module:</p>

<pre><code>from collections import namedtuple

Creator = namedtuple("Creator", ["first_name", "last_name", "email", "phone_num",
                     "address", "city", "country"])


Organization = namedtuple("Organination", ["name", "address", "city", "country"])


BankAccountDetail = namedtuple("BankAccountDetail", ["account_name", "account_num",
                               "currency", "bank_name", "branch", "branch_addr"])


Project = namedtuple("Project", ["name", "description", "amount"])


File = namedtuple("File", ["filename", "font_size", "line_height", "orientation"])
</code></pre>

<p><a href="https://docs.python.org/3/library/dataclasses.html" rel="noreferrer"><code>dataclasses</code></a> might also be used to get a similar result.</p>

<hr>

<h2>Code duplication</h2>

<p>There is a massive amount of duplicate code in <code>generate_pdf</code>. You could layout the document using a list and string formatting and then iterate over that list to finally write it to a file. Let me give you a sketch of what I mean (Note: the code below is untested):</p>

<pre><code>def generate_pdf(self):
    dt = datetime.now()
    date = dt.date()
    pdf = fpdf.FPDF(format=self.file.orientation)
    pdf.add_page()
    pdf.set_font("Arial", size=self.file.font_size)

    pdf_content = [
        f"Invoice Number #{self.invoice_num}", 
        f"Date Invoiced #{date}",
        # and so on and so forth
    ]

    for line in pdf_content:
        pdf.write(self.file.line_height, line)
        pdf.ln()

    pdf.output(self.file.filename)
</code></pre>

<p>The code uses f-string, which are available since Python 3.6. If you are using an older version of Python you will have to use <code>.format</code> instead such as you do in several places already.</p>

<p>There might be even better ways to do this, but I have no specific knowledge about that special library.</p>

<hr>

<h2>Misc</h2>

<p>It might be a good idea to have a look at the <a href="https://www.python.org/dev/peps/pep-0008/" rel="noreferrer">official Style Guide for Python Code</a> (often just called PEP8) for short. It's a collection of style recommendations and other paradigms that allow you to write compelling and visually appealing Python code.</p>

<p><code>file</code> in <code>file = File("Invoice.pdf", 12, 5, "letter")</code> is not a good variable name since you overwrite Python's <code>file</code> command with this. At least append a <code>_</code> to make it <code>file_</code> or choose another name altogether.</p>

<p>Maybe it would also be worth to have a look at <a href="https://docs.python.org/3/library/__main__.html" rel="noreferrer"><code>if __name__ == "__main__":</code></a> to separate the "library part" from the example code.</p>

<pre class="lang-py prettyprint-override"><code>from datetime import datetime
from collections import namedtuple

import fpdf


Creator = namedtuple("Creator", ["first_name", "last_name", "email", "phone_num",
                     "address", "city", "country"])

# all the other code ...

if __name__ == "__main__":
    creator = Creator('Test', 'User', 'test@gmail.com', '099006789',
                    'Joans Apartment, 123 Test road', 'Nairobi', 'Kenya')

    organization = Organization('Test Org', 'Ndemi Road Kilimani', 'Nairobi',
                                'Kenya')

    bank_detail = BankAccountDetail('Test User', '999999678', 'KES', 'Test Bank',
                                    'Kenya', 'BRANCH  Way, ABC Place')

    file = File("Invoice.pdf", 12, 5, "letter")

    project = Project('Ecommerce site', 'Worked on the ecommerce site', 10.900)

    pdf_inv = PdfInvoice('1393939', creator, organization, project, bank_detail,
                        file)
    pdf_inv.generate_pdf()

</code></pre>
    </div>