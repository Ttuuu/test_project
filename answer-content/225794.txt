<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code reads very much like you have written some Java and are trying to translate it to Python. You need to "drink the Kool-Aid" and start embracing idiomatic Python, instead.</p>

<p>First, start by noting that storing <code>None</code> as a value is a legitimate thing to do in Python. So the idea of returning <code>None</code> to mean "no key found" is weak. A better approach would be to <code>raise</code> an exception -- probably a <code>KeyError</code>.</p>

<p>However, since it's part of your problem statement, we can ignore that issue (except to note that your problem statement likely came from Java or C++ or someplace like that).</p>

<p>In your <code>set()</code> method:</p>

<pre><code>def set(self,key,value):
    if key in self.vals:
        del self.vals[key]
        self.vals[key] = value
    else:
        if(len(self.vals) &lt; self.max_size):
            self.vals[key] = value
        else:
            del self.vals[list(self.vals)[0]]
            self.vals[key] = value
</code></pre>

<p>You can overwrite items in a dictionary directly. Just assign to them:</p>

<pre><code>if key in self.vals:
    self.vals[key] = value
</code></pre>

<p>And your missing-key code is redundant. You assign value in both branches of the <code>if/else</code> statement. Just refactor the assignment down:</p>

<pre><code>if len(self.vals) &gt;= self.max_size:
    del self.vals[list(self.vals)[0]]

self.vals[key] = value
</code></pre>

<p>Once you do that, you realize that the assignment is <em>also</em> present in the upper (key-found) condition, and you can refactor it again:</p>

<pre><code>def set(self, key, value):
    vals = self.vals
    if key in vals and len(vals) &gt;= self.max_size:
        del vals[list(vals)[0]]
    vals[key] = value
</code></pre>

<p>In your <code>get()</code> method:</p>

<p>You are doing things pretty much spot-on, here, but you are depending on dictionaries to preserve insertion order. That is a somewhat new feature in python (added as an implementation detail in 3.6, and guaranteed in 3.7) that won't work in 3.5. You should at least comment this, and probably should add code at the top of your module to verify the version of python.</p>

<p><strong>On the other hand:</strong> there is a <a href="https://docs.python.org/3/library/collections.html?highlight=collections%20ordereddict#collections.OrderedDict" rel="nofollow noreferrer"><code>collections.OrderedDict</code></a> in the standard library that has been around for a while, and which even includes an example of building an LRU cache in the documentation. Just sayin'. ;-)</p>
    </div>