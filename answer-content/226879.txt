<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>C++ is not Java. All these <code>this-&gt;</code> can be safely omitted.</p></li>
<li><p>Most of the methods of <code>lsr.cpp</code> are better expressed via STL numeric algorithms. For example, <code>calculate_sigma</code> is 4 calls to <code>std::accumulate</code>, while <code>x_square</code> and <code>x_cross_y</code> are calls to std::inner_product`.</p></li>
<li><p>From a numerical point of view, following the formulas naively may lead to significant computational errors. The intermediate results, e.g. <code>sigma_XX</code> and <code>sigma_X * sigma_X</code> could be huge. Thus the result of</p>

<pre><code>(this-&gt;N * this-&gt;sigma_XX) - (this-&gt;sigma_X * this-&gt;sigma_X)
</code></pre>

<p>is already compromised, and using id as denominator further amplifies the (relative) error.</p></li>
<li><p>In any case, the computational result is only as good as its error margin. You must compute it as well.</p></li>
<li><p>The entire library is just that, a library. I don't see a compelling reason to wrap it in a class. Indeed, the data members are transient; they better be local variables.</p>

<p>If you insist on a class, <code>calculate_N</code> should be called in a constructor.</p></li>
<li><p>It feels strange that the saved model (which is just slope and intercept) is completely disconnected from the data on which it's been trained.</p></li>
<li><p>Nitpick: <code>lsr.[ch]</code> should be <code>slr.[ch]</code>.</p></li>
</ul>
    </div>