<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Firstly, I must apologies that my German understanding isn't fluent enough to read all your comments.</p>

<p>I think your intuition is right that you ought to be using functions rather than preprocessor macros - the latter are just too fragile, and anyway, good compilers are able to inline functions.  I would recommend <code>-O3 -march=native</code> in your GCC flags if speed is your main concern.</p>

<p>The code builds mostly clean, and gives Valgrind no cause to grumble - well done!</p>

<hr>

<p>A better way to run your tests might be to time only the timestamper itself:</p>

<pre class="lang-sh prettyprint-override"><code>&lt;/dev/urandom tr -dc '[[:print:]]' | tr 'A' '\n' | head -n10000000 \
    | time ./timestamper &gt;/dev/null
</code></pre>

<p>This saves you having to do a subtraction.  Note that overhead "percentage" is somewhat meaningless here, as we could make the input stream arbitrarily complex and reduce the percentage to any figure we want!</p>

<p>I've also eliminated the unnecessary <code>cat</code>, even though this isn't a <a href="/questions/tagged/sh" class="post-tag" title="show questions tagged 'sh'" rel="tag">sh</a> review.</p>

<hr>

<p>There's a bug, which is easily demonstrated: we always print a time offset of zero for the first line, but it would be more useful to print the time since the program was started.  I'd be happy to go with a compromise, and just use the time that <code>main()</code> is entered.</p>

<hr>

<p>I'm not convinced of the need for the buffer (and certainly not of the need to remove the final newline, only to add one when we print), as we can work on a character by character basis, and lean on the buffering inside <code>&lt;stdio.h&gt;</code>:</p>

<pre><code>#include &lt;stdbool.h&gt;
int main(void)
{
    int c;
    bool is_first = true;

    if (clock_gettime(CLOCK_REALTIME, &amp;last_time)) {
        perror("Cannot read clock");
        exit(EXIT_FAILURE);
    }

    while ((c = getchar()) != EOF) {
        if (is_first) {
            print_time_prefix();
            is_first = false;
        }
        putchar(c);
        if (c == '\n') {
            is_first = true;
        }
    }
}
</code></pre>

<p>This is a little slower (8.4 seconds, compared with 5.8 seconds for the original), but much easier to work with.</p>

<hr>

<p>My take on the separator is that control characters are a poor choice for printing; I'd much rather see tabs than <code>^Z</code> in the output.  Most tools that read tab-separated values can be told how many fields to use.</p>

<hr>

<p>My full program uses no macros, and a single global variable:</p>

<pre><code>#define _POSIX_C_SOURCE 199309L  /* man 2 clock_getres */

#include &lt;stdbool.h&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;time.h&gt;

struct timespec last_time;

static void print_time_prefix(void)
{
    struct timespec now;
    if (clock_gettime(CLOCK_REALTIME, &amp;now)) {
        perror("Cannot read clock");
        exit(EXIT_FAILURE);
    }

    double interval = now.tv_sec - last_time.tv_sec
        + .000000001 * (now.tv_nsec - last_time.tv_nsec);

    printf("%010ld"  "." "%09ld"   "\t"  "%10.2f"  "\t",
           now.tv_sec,    now.tv_nsec,    interval);

    last_time = now;
}

int main(void)
{
    if (clock_gettime(CLOCK_REALTIME, &amp;last_time)) {
        perror("Cannot read clock");
        exit(EXIT_FAILURE);
    }

    bool is_first = true;
    int c;
    while ((c = getchar()) != EOF) {
        if (is_first) {
            print_time_prefix();
            is_first = false;
        }
        putchar(c);
        if (c == '\n') {
            is_first = true;
        }
    }
}
</code></pre>

<p>Some things of note:</p>

<ul>
<li>I use the predefined <code>EXIT_FAILURE</code> macro as exit status in the error case.</li>
<li>Unless we're stuck in the 20th century, we don't need to declare all the variables at the beginning of their scope.</li>
<li><code>clock_gettime()</code> sets <code>errno</code> on failure, so use <code>perror()</code> to report that.</li>
<li>I wrote the format string as multiple concatenated segments to help it line up with the arguments, and separate the literal parts from the conversions.</li>
</ul>

<p>Things not addressed in my version:</p>

<ul>
<li>We might consider keeping the interval as a pair of integral values (as with the timestamps), rather than creating and printing a floating-point value.</li>
<li>We ought to print using the user's expected decimal separator (e.g. <code>,</code>), instead of hard-coded <code>.</code> in the format string.  I've not done this myself, but I believe what we need to do is

<ol>
<li><code>setlocale(LC_ALL, "");</code> early on, as usual for a locale-aware program.</li>
<li>Obtain the formatting rules using <code>localeconv()</code>.</li>
<li>Examine the <code>decimal_point</code> member of the resulting <code>lconv</code> object.</li>
</ol></li>
</ul>
    </div>