<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Instead of implementing <code>consume()</code> for each integer type separately,
you can implement a <em>single generic</em> method:</p>

<pre><code>mutating func consume&lt;T: FixedWidthInteger &amp; UnsignedInteger&gt;() throws -&gt; T {
    let size = MemoryLayout&lt;T&gt;.size
    guard idx + size &lt;= bytes.count else {
        throw Error.notEnoughBytes
    }
    defer { idx += size }
    return bytes[idx..&lt;idx + size].enumerated().reduce(0) {
        $0 + T($1.element) &lt;&lt; (8 * $1.offset)
    }
}
</code></pre>

<p>which can be used for all unsigned integer types <code>UInt</code>, <code>UInt8</code>, ..., <code>UInt64</code>, e.g.</p>

<pre><code>let header: UInt8 = try buffer.consume()
</code></pre>

<p>and for the signed integer types via the <code>bitPattern:</code> initializer, e.g.</p>

<pre><code>let word = try! Int16(bitPattern: buffer.consume())
</code></pre>

<p>Another option is to copy the bytes into a value of the desired type
instead of bit shifting and adding:</p>

<pre><code>mutating func consume&lt;T: FixedWidthInteger&gt;() throws -&gt; T {
    let size = MemoryLayout&lt;T&gt;.size
    guard idx + size &lt;= bytes.count else {
        throw Error.notEnoughBytes
    }
    var value: T = 0
    bytes.withUnsafeBytes { _ = memcpy(&amp;value, $0.baseAddress! + idx, size) }
    idx += size
    return T(littleEndian: value)
}
</code></pre>

<hr>

<p>Instead of letting the compiler infer the return type from the context,
one can alternatively pass it as a parameter:</p>

<pre><code>mutating func consume&lt;T: FixedWidthInteger&gt;(_: T.Type) throws -&gt; T { ... }
</code></pre>

<p>which is then – for example – called as</p>

<pre><code>let crc32 = try buffer.consume(UInt32.self)
</code></pre>

<hr>

<p>I would probably call the method <code>get()</code> or <code>read()</code> instead of <code>consume()</code>.</p>

<hr>

<p>Defining a local <code>enum Error</code> type which conforms to the (global)
<code>Error</code> protocol is possible, but might be confusing to the reader.
I would use a different name for the concrete error type, for example:</p>

<pre><code>enum ReadError: Error {
    case notEnoughBytes
}
</code></pre>

<hr>

<p>Now let's have a look how an error would be reported.
The caller does not know the actual error type, so a typical calling
sequence is:</p>

<pre><code>do {
    let someData = Data(bytes: [1])
    var buffer = ConsumableByteArray(data: someData)
    let crc32: UInt32 = try buffer.consume()
    print(crc32)
} catch {
    print(error.localizedDescription)
}
</code></pre>

<p>This produces the output:</p>

<pre>
The operation couldn’t be completed. (MyProg.ConsumableByteArray.ReadError error 0.)
</pre>

<p>This can be improved by adopting the <code>LocalizedError</code> protocol
(see for example <a href="https://stackoverflow.com/q/39176196/1187415">How to provide a localized description with an Error type in Swift?</a> on
Stack Overflow):</p>

<pre><code>enum ReadError: Error, LocalizedError {
    case notEnoughBytes

    public var errorDescription: String? {
        switch self {
        case .notEnoughBytes:
            return "Not enough bytes in buffer"
        }
    }
}
</code></pre>

<p>Now the error output of the above program becomes</p>

<pre>
Not enough bytes in buffer
</pre>

<p>You can even store additional information about the error in associated
values:</p>

<pre><code>enum ReadError: Error, LocalizedError {
    case notEnoughBytes(available: Int, needed: Int)

    public var errorDescription: String? {
        switch self {
        case .notEnoughBytes(let available, let needed):
            return "Not enough bytes in buffer (available: \(available), needed: \(needed))"
        }
    }
}
</code></pre>

<p>Then by throwing</p>

<pre><code> throw ReadError.notEnoughBytes(available: bytes.count - idx, needed: size)
</code></pre>

<p>an error message like</p>

<pre>
Not enough bytes in buffer (available: 1, needed: 4)
</pre>

<p>is produced.</p>

<hr>

<p>Finally note that there is a <a href="https://apple.github.io/swift-nio/docs/current/NIO/Structs/ByteBuffer.html" rel="nofollow noreferrer"><code>ByteBuffer</code></a> type as part of the 
<a href="https://github.com/apple/swift-nio" rel="nofollow noreferrer">SwiftNIO</a> framework,
which can do all this and more. Even if you decide not to use it,
having a look at its documentation and interface might be instructive.</p>
    </div>