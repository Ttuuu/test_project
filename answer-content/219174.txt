<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It's not clear to me why <code>gen_primes()</code> is so complicated. The C++ version, which is a straight sieve, is much clearer.</p>

<hr>

<p>There's one red flag in <code>trial_division</code>: <code>/=</code> is floating point division. Averaging timing runs would obviously be better, but even on a single timing run changing the two <code>/=</code> to <code>//=</code> drops the run time from 20.5 secs to 16.2 secs.</p>

<p>The iteration in <code>trial_division</code> is also unidiomatic. Replacing it with a <code>for</code> loop:</p>

<pre><code>def trial_division(n):
    a = set()

    while n % 2 == 0:
        a.add(2)
        n //= 2

    for p in primes:
        if p * p &gt; n:
            break

        while n % p == 0:
            a.add(p)
            n //= p

    if n != 1:
        a.add(n)

    return a
</code></pre>

<p>the time drops to 12.5 secs.</p>

<p>Profiling with <code>python -m cProfile cr219119.py &lt;cr219119.in</code> shows that <code>trial_division</code> is still by far the bottleneck. The expensive operations are the multiplication and division, and the division is a problem, but we can remove the multiplication with</p>

<pre><code>primesWithSquares = [(p, p*p) for p in primes]
</code></pre>

<p>and changing the loop to</p>

<pre><code>    for p, p2 in primesWithSquares:
        if p2 &gt; n:
            break

        while n % p == 0:
            a.add(p)
            n //= p
</code></pre>

<p>to get down to 10.8 secs.</p>

<p>Finally, using the same trick as the C++ code of doubling up the tests to use a list rather than a set:</p>

<pre><code>def trial_division(n):
    a = []

    if n &amp; 1 == 0:
        a.append(2)
        n //= 2
        while n &amp; 1 == 0:
            n //= 2

    for p, p2 in primesWithSquares:
        if p2 &gt; n:
            break

        if n % p == 0:
            a.append(p)
            n //= p
            while n % p == 0:
                n //= p

    if n != 1:
        a.append(n)

    return a
</code></pre>

<p>I get a running time of 9.4 secs.</p>

<hr>

<p>As far as the rest of the code goes, I find it severely lacking in comments. A lot of the names are quite good (<code>trial_division</code> and <code>computer_game</code> are the worst exceptions), but I had to reverse engineer the code to figure out what <code>prime_nodes_map</code> was about and I still don't fully understand the <code>graph</code> data structure. There also seems to be a lot of potential to factor out some of the code involved in the graph construction. Perhaps (untested)</p>

<pre><code>def add_edge(u, v, direction):
    graph[u].append((v, edges_count, edges_count+1))
    cap_edges.append(direction)
    graph[v].append((u, edges_count+1, edges_count))
    cap_edges.append(1 - direction)
    edges_count += 2

def new_node():
    node_count += 1
    return node_count - 1

def add_half_graph(values, end_node, direction):
    for value in values:
        current_node = new_node()

        add_edge(end_node, current_node, direction)

        for p in trial_division(value):
            if p not in prime_nodes_map:
                prime_nodes_map[p] = new_node()

            add_edge(current_node, prime_nodes_map[p], direction)

add_half_graph(A, start_node, 1)
add_half_graph(B, end_node, 0)
</code></pre>
    </div>