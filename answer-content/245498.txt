<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li>Even though <code>module Main</code> is implied when no header is given, I'd write it.</li>
<li><code>return . read =&lt;&lt; getLine = read &lt;$&gt; getLine = fmap read getLine</code> is a worse version of <code>readLn</code>. <code>read &lt;$&gt; getLine</code> is basically <code>return (error msg)</code> when the parse fails. This passes the bottoming value into the "pure" part of your code. <code>readLn badstr</code> crashes at a well defined time—upon its execution—and if you actually wanted to handle the error you'd use <code>Text.Read.readMaybe</code> or <code>readEither</code>.</li>
<li><code>concat . repeat</code> is <code>cycle</code>. Gets your point across better, doesn't it?</li>
<li><code>putStrLn . unlines</code> is a bug. It causes an extra newline in the input: <code>unlines</code> creates a trailing newline and <code>putStrLn</code> creates another. Use <code>putStr</code>.</li>
<li>I don't hate the "expression" style here, but once we replace the <code>=&lt;&lt; return . read =&lt;&lt; getLine</code> with <code>=&lt;&lt; readLine</code> you may as well bring it to the front and use <code>&gt;&gt;=</code>, and at that point let's just use a <code>do</code>.</li>
<li><code>x</code>? Really?</li>
</ul>
<p>So:</p>
<pre><code>module Main (main) where -- not my style of spacing; but fine
import System.IO (readFile)

main = do
    wanted &lt;- readLn
    contents &lt;- readFile "file"
    putStr $ unlines $ take wanted $ cycle $ lines contents
</code></pre>
<p>Though I'd also take</p>
<pre><code>main = do
    wanted &lt;- readLn
    putStr . unlines . take wanted . cycle . lines =&lt;&lt; readFile "file"
</code></pre>
<p>Or, if you're attached</p>
<pre><code>main = readLn &gt;&gt;= (\wanted -&gt; putStr . unlines . take wanted . cycle . lines =&lt;&lt; readFile "file")
</code></pre>
<p>As to your concern about laziness; this is perfectly fine. <code>readFile</code> is lazy, and so is <code>lines</code>. <code>cycle</code> is actually better than <code>concat . repeat</code>; the latter keeps allocating <code>(:)</code>-cells as long as <code>take</code> consumes them, while <code>cycle</code> will simply connect a pointer that cycles back to the beginning of the output list, which should make it faster. Also, it errors instead of potentially looping forever on an empty input. <code>take</code> is of course lazy, and we've eliminated the excess laziness that would cause any parse errors to be triggered in it. Passing an infinite input (am on a *nix, so I used <code>yes(1)</code> and <code>mkfifo(1)</code>) into this program doesn't break it, which is a good litmus test for laziness.</p>
<p>Now, as to the functionality of this program: the <code>wanted</code> number should <em>really</em> be an argument, and so should the file (which should be optional and default to stdin). That's done with <a href="https://hackage.haskell.org/package/base-4.14.0.0/docs/System-Environment.html#v:getArgs" rel="nofollow noreferrer"><code>getArgs</code></a>. This is complicated enough to move into new definitions. Let's get that <code>readMaybe</code> going, too. (Hoogle the new names to find the imports.)</p>
<pre><code>dieWithUsage :: IO a
dieWithUsage = do
    name &lt;- getProgName
    die $ "Usage: " ++ name ++ " lines [file]"

parseArgs :: [String] -&gt; IO (Int, Handle)
parseArgs [] = dieWithUsage
parseArgs (wanted : rest) = (,) &lt;$&gt; getWanted &lt;*&gt; getHandle
    where getWanted = maybe dieWithUsage return $ readMaybe wanted
          getHandle = case rest of
              [] -&gt; return stdin
              [path] -&gt; openFile path ReadMode
              _ -&gt; dieWithUsage
</code></pre>
<p>leaving</p>
<pre><code>main = do
    (wanted, input) &lt;- parseArgs =&lt;&lt; getArgs
    putStr . unlines . take wanted . cycle . lines =&lt;&lt; hGetContents input
</code></pre>
    </div>