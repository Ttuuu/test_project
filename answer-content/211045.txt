<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Don't abuse inner lists</h2>

<p>This:</p>

<pre><code>self.name = ' '.join([data.get('name').get(key) for key in ['first_name', 'last_name']])
</code></pre>

<p>should be</p>

<pre><code>self.name = ' '.join(data.get('name', {}}.get(key) for key in ('first_name', 'last_name'))
</code></pre>

<p>Note the following:</p>

<ul>
<li>Generators don't need to go in a list if they're just being passed to a function (<code>join</code>) that needs an iterable</li>
<li>Give an empty dictionary as the default for the first get so that the second get doesn't explode</li>
<li>Use a tuple instead of the last list because the data are immutable</li>
</ul>

<h2>Use set logic</h2>

<p>This:</p>

<pre><code>return all(key in data for key in ('name', 'workEmail'))
</code></pre>

<p>is effectively asking "are both 'name' and 'workEmail' in <code>data</code>?" There's a better way to ask this - with a <code>set</code>.</p>

<pre><code>needed = {'name', 'workEmail'}
return needed.issubset(set(data))
</code></pre>

<p>If <code>data</code> can be stored as a <code>set</code> once outside of this function, it will increase efficiency.</p>

<p>Read more here: <a href="https://docs.python.org/3/tutorial/datastructures.html#sets" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/datastructures.html#sets</a></p>

<h2>Don't needlessly materialize generators</h2>

<p>This:</p>

<pre><code># Instantiate Person from data
persons = [Person(data) for data in [dict_a, dict_b]]

# Store persons that fit the database model
persons = [PersonModel(**person.__dict__) for person in persons]
</code></pre>

<p>makes a generator, saves it to a list in memory, consumes that list, makes a second generator, and stores that generator in a second list in memory. Instead:</p>

<pre><code>persons = [PersonModel(**Person(data).__dict__)
           for data in (dict_a, dict_b)]
</code></pre>

<p>Again, the last inner list should be a tuple.</p>

<h2>Parsing heuristics</h2>

<p>It's not useful to write separate parsing classes for formats A and B in this case, because they aren't declared by the API so have no meaning. Write a translation routine for every member you extract from the JSON. Do a series of attempts against known paths in the data to get the members out. </p>
    </div>