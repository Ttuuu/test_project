<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Much of the following feedback is not really performance-related, but will make the code more easily legible and easily analyzed for the purposes of performance improvement.</p>

<h2>Add type hints</h2>

<p><code>b1</code> and <code>b2</code> are presumably <code>int</code>, so add <code>: int</code> after their declaration. <code>num_as_string</code> and the function's return value are both <code>str</code>.</p>

<h2>Multiple assignment</h2>

<p>...has its limited applications, and in this case:</p>

<pre><code>is_neg, num_as_string = True, num_as_string[1:]
</code></pre>

<p>there's not really an advantage to combining these two statements. Just do them separately, for legibility.</p>

<h2>Exponentiation</h2>

<p>You do this:</p>

<pre><code>        base10 += string.hexdigits.index(digit.lower()) * (b1 ** degree)
        degree += 1
</code></pre>

<p>But rather than maintaining <code>degree</code> as a number that increases linearly, it's probably a better idea to maintain a number that increases by a multiplicative factor of <code>b1</code> on every iteration.</p>

<h2>Separation of concerns</h2>

<p>Fundamentally, <code>convert_base</code> is doing two different things: parsing a string given a particular base into a number, and formatting a number given a particular base into a string. So just make two functions. It's more useful, testable, legible and maintainable.</p>
    </div>