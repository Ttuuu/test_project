<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Developing singletons isn't a good idea in most cases .Sure, you save some time taking this shortcut, but this code will bite you back later when the architecture of your app grows or when you add unit testing to your project. Here are a few reasons why you should <strong>NOT</strong> develop singletons:</p>

<p><em>Note: These are excerpts from <a href="https://matteomanferdini.com/swift-singleton/" rel="nofollow noreferrer">this article</a> about swift singletons.</em></p>

<ul>
<li><strong>Singletons provide a globally mutable shared state.</strong> Ironically, the definition of singleton is one of the reasons why singletons are bad. The global accessibility of singletons makes shared resources accessible from anywhere, especially from code that should not have any access. Even value types like Swift structures and enumerations can access a singleton, which is a bad practice. When any part of an app can access or change the global state, you get weird and hard to fix bugs.</li>
<li><strong>Singletons carry state around for the lifetime of the application.</strong> There are cases in which you need to reset the shared state. When you can have multiple instances, you can discard the old one and then create a new one. In a singleton, instead, resetting state might not be so natural and might require specific and complex code.</li>
<li><strong>Singleton classes often become monoliths.</strong> This exactly correlates to your concern.  Since it’s easy to access a singleton from anywhere, the chances are high that code that needs to be shared ends inside an existing singleton. Massive view controllers are not the only monolithic objects you should avoid in iOS. The same happens to singletons.</li>
</ul>

<p>If singletons are the wrong solution, what is then the correct one? The critical point here is the distinction between singletons and shared resources. In any real app, shared resources are necessary and unavoidable. There are always parts of an app’s architecture that need to be accessed from many places. Some examples are:</p>

<ul>
<li>The current global state of the app.</li>
<li>The disk storage where data is saved, be it the file system, a database, the user defaults of the app, or a Core Data managed object context.</li>
<li>A URL session that groups related network requests.</li>
<li>A shared operation queue to prioritize, sequence, and schedule the asynchronous tasks of the app.</li>
</ul>

<p><strong>Conclusions</strong></p>

<p>There are many articles online which try to answer the question: “when is it ok to use a singleton?”</p>

<p>My answer is: <strong>never</strong>.</p>

<p>That might sound a bit strict, but the drawbacks of singletons outweigh the little benefits of taking the shortcut. You can, and should, always solve the problem using dependency injection.</p>
    </div>