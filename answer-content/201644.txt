<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>1. <code>Divisible</code> function</strong></p>

<p>It is perfectly fine to define a function like <code>divisible</code> to improve the reading of a program. In general, when defining a function that could be reused, it is a good practice to comment its meaning (and this is encouraged by the syntax of the language):</p>

<pre><code>(defun divisible (a b)
  "a is evenly divisible by b"
  (zerop (mod a b)))
</code></pre>

<p>Note the idiomatic use of the predicate <code>(zerop x)</code> instead of <code>(= 0 x)</code>.</p>

<p><strong>2. Introduction of variables</strong></p>

<p>The use of <code>setf</code> (or <code>setq</code>) to introduce new variables is <em>wrong</em> (you should have received a warning, something like <code>In FIZZBUZZ: Undeclared free variable OUT</code>). The <code>setf</code> and <code>setq</code> operators should be used only to modify them.</p>

<p>Instead, you can introduce local variables with the <code>let</code> syntax:</p>

<pre><code>(let ((new-local-variable1 initial-value)
      (new-local-variable2 initial-value)
      ...)
  body-in-which-the-new-local-variables-are-bound)
</code></pre>

<p>So <code>fizzbuzz</code> could be redefined as:</p>

<pre><code>(defun fizzbuzz (n)
  "return n or Fizz or Buzz or FizzBuzz"
  (let ((out (string "")))

    (unless (or (divisible n 3) (divisible n 5))
      (return-from fizzbuzz n))

    (when (divisible n 3)
      (setf out (format nil "~d~d" out "Fizz")))

    (when (divisible n 5)
      (setf out (format nil "~d~d" out "Buzz")))

  out))
</code></pre>

<p>The global variables are instead introduced by <code>defvar</code>, so you could write for instance:</p>

<pre><code>(defvar 1to100 (range 1 100))
(defvar 1to100fb (map 'list #'fizzbuzz 1to100))
</code></pre>

<p><strong>3. The algorithm</strong></p>

<p>The function <code>range</code> actually builds a list of (max-min+1) elements, filled with the values <code>min, min+1, min+2, ..., max</code>. The use of <code>map</code> over <code>1to100</code> is quite an expensive way of performing a simple iteration from the integer min to the integer max! Others, much more efficient ways, exist. For instance, you could do a classical <code>loop</code> (think of a <code>for</code> in a C-like language):</p>

<pre><code>(loop for i from 1 to 100
  do (format t "~d~%" (fizzbuzz i)))
</code></pre>

<p>Another possibility is to use the <code>dotimes</code> operator:</p>

<pre><code>(dotimes (i 100)
   (format t "~d~%" (fizzbuzz (1+ i))))
</code></pre>

<p>that iterates from 0 to (but not included) 100 (so there is the need of use the <code>1+</code> function).</p>

<p>If, on the other hand, you want to go for recursion, here is a possible solution (which is tail-recursive, so compiled by most systems as an iterative loop):</p>

<pre><code>(defun fizzbuzz-to (limit &amp;optional (start 1))
  (when (&lt;= start limit)
    (format t "~d~%" (fizzbuzz start))
    (fizzbuzz-to limit (1+ start))))
</code></pre>

<p><strong>4. Types</strong></p>

<p>In a format string, for a general printing <code>~a</code> should be used instead of <code>~d</code>, which mainly is used to print integer (decimal) numbers. It can be used also for strings, but this is due to the fact that in the specification it is said that:</p>

<blockquote>
  <p>if arg is not an integer, it is printed in ~A format and decimal base.</p>
</blockquote>

<p>What I do not like more, however, is the fact that the function <code>fizzbuzz</code> sometimes returns an integer, sometimes a string. The fact that Common Lisp has dynamic typing in some way hides this fact, but I think that the program would be more elegant (and in some sense more correct) if the result has always the same type.</p>

<p>One way is to redefine the function in this way:</p>

<pre><code>(defun fizzbuzz (n)
  (cond ((divisible n 3)
         (if (divisible n 5)
             "FizzBuzz"
             "Fizz"))
        ((divisible n 5) "Buzz")
        (t (format nil "~d" n))))
</code></pre>

<p>For other solutions, you could for instance look at this <a href="https://codereview.stackexchange.com/questions/122903/tail-recursive-fizzbuzz-in-common-lisp/">CR question</a>.</p>
    </div>