<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This utility might have a small performance problem. It is harder for current optimizers to optimize this style of object, with a pointer to member function (PMF) as a data member.</p>

<p>I know this sounds a bit like black magic, but Stephan T. Lavavej claims that using <code>std::mem_fn</code> is bad because of poor optimizability in <a href="https://youtu.be/zt7ThwVfap0?t=18m40s" rel="nofollow noreferrer">this CppCon talk</a>. Basically, the optimizer can have difficulty seeing that a PMF stored as a data member is actually constant, making it difficult to inline.</p>

<p>However, if you don't store the PMF as a data member, the optimizer has a better time. Thus, it would be more optimizable in general to instead write a <code>sort_by</code> function with <a href="http://en.cppreference.com/w/cpp/utility/functional/invoke" rel="nofollow noreferrer"><code>std::invoke</code></a>:</p>

<pre><code>namespace sort {
    template &lt;typename Iter, typename F, typename Compare = std::less&lt;&gt;&gt;
    void sort_by(Iter begin, Iter end, F fn, Compare cmp = {}) {
        std::sort(begin, end, [&amp;](auto&amp;&amp; lhs, auto&amp;&amp; rhs) {
            return cmp(
                std::invoke(fn, std::forward&lt;decltype(lhs)&gt;(lhs)),
                std::invoke(fn, std::forward&lt;decltype(rhs)&gt;(rhs))
            );
        });
    }
}
</code></pre>

<p>By taking <code>Compare</code> as a parameter, we make it so that we don't need two separate utilities for sorting ascending vs descending. The user can specify they want to sort descending by passing in <code>std::greater&lt;&gt;</code>.</p>
    </div>