<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2> Performance </h2>

<p>Overall I believe that you are doing some things more times that you need.</p>

<ul>
<li><p>Although compiling regexes does not take much time, if you would scan a file that has 100mln lines, the compilation on single regex (multiple times) might take up to 1 minute (it takes 108 seconds on my machine) of accumulated time. You can just compile them once before all loops (or even outside the function).</p></li>
<li><p>If I understand the code correctly, you are scanning each line many times. How about doing each line only once? </p>

<pre><code>lines = []
for baris in data:
    # strip line and append to lines
for line in lines:
    # do the rest
</code></pre></li>
<li><p>In addition to above, if parse one line at a time, it will save you a lot of memory if files are <em>really</em> huge (see also point 4. below).</p>

<pre><code>def getSelectMySql(log_lines_provider): # log_lines_provider is a generator that would yield one line at a time. 
    for line in log_lines_provider:
         yield extract_line_details(line)
</code></pre></li>
</ul>

<h2> Code style </h2>

<p>Overall, I think code is not easily readable. I had to read it a few times to get a feeling of what you are trying to do.</p>

<ol>
<li><code>return(result)</code> does not need brackets.</li>
<li>I think   <code>else:    if success: if select and not</code> could be replaced by simple <code>elif</code></li>
<li>I am not sure what <code>baris</code> means but I think it would be more readable if you renamed this variable to <code>line</code> or <code>log_line</code> to indicate that it is one line of the log file. </li>
<li><p>I would split the code to many functions e.g. : </p>

<pre><code>def getSelectMySql(log):
    lines = [] 
    with open(log,'r', encoding='utf-8', errors='ignore') as data:
        lines = get_log_lines(log) # THIS IS A BAD IDEA IF THE FILES ARE LARGE, see above
    result = []
    for line in lines: # note indent here, since you loaded all lines there is no need to keep the file open
        result.append(extract_line_details(line))
    return result
</code></pre></li>
<li><code>success = True if line.endswith("important") else False</code> can be simplified to <code>success = line.endswith("important")</code></li>
</ol>

<p>Disclaimer: all above is just my <strong>opinion</strong>, please do not treat is as a single source of truth.</p>
    </div>