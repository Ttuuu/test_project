<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Overall</h2>

<p>You don't use encapsulation. Which makes your list vulnerable to incorrect initialization and accidental incorrect modification from outside the list.</p>

<p>You use several C based style choice rather than C++ style which make your codde harder to read.</p>

<h2>Code Review</h2>

<p>Only a list of <code>int</code>?</p>

<pre><code>class Node {
    public:
        int value;          // int only
        Node* next = NULL;
};
</code></pre>

<hr>

<p>Passing a pointer to a pointer. You can simplify this by passing a reference.</p>

<pre><code>void push(struct Node** head_ref, int new_data) 
</code></pre>

<hr>

<p>In C++ you don't need to use struct keyword when using struct types.</p>

<pre><code>void push(struct Node** head_ref, int new_data) 
</code></pre>

<hr>

<p>A better declaration would have been:</p>

<pre><code>void push(Node*&amp; head_ref, int new_data) 
</code></pre>

<hr>

<p>C++ you should always use new (rather than the malloc family).</p>

<pre><code>    /* allocate node */
    struct Node* new_node = 
            (struct Node*) malloc(sizeof(struct Node)); 
</code></pre>

<p>There are two reasons for this:</p>

<ol>
<li><p>If your code combines both C and C++ memory allocation you need to track which is which and use the correct de-allocation method. Thus it is best to simply use one allocation method then you always know how to deallocate it.</p></li>
<li><p>Using <code>new</code> calls the constructor to initialize the object.<br>
Remember this line from your class declaration.</p>

<pre><code>    Node* next = NULL;
</code></pre></li>
</ol>

<p>This is not going to happen if you call <code>malloc()</code> you must use <code>new</code> to get that to happen.</p>

<ol start="3">
<li><p>Its also simpler to write:</p>

<pre><code>Node* new_node = new Node{new_data, *head_ref};
</code></pre></li>
</ol>

<hr>

<p>Your find returns the <code>nth</code> index of the list. But your index is 1 based. Most C based languages use a zero based index. But if I pass <code>0</code> to <code>find()</code> this function will recurse for ever.</p>

<hr>

<p>In recursive funtions always check for the end of the recursion first. So as the first check in <code>find</code> you should check that the list pointer is not <code>nullptr</code>.</p>

<hr>

<p>This is not modified.</p>

<pre><code>    int count = 1; 
</code></pre>

<p>So this should be a <code>constexpt</code>. The whole point of using a named type is to make the code more expressive. A better name would help the code be more expressive.</p>

<hr>

<p>Don't leave redundant code commented out. Delete it.</p>

<pre><code>    //if count equal too n return node-&gt;data 
</code></pre>

<p>Source control system allow you to keep older versions of the code around</p>

<p>It is now easy to install git on all machines learn to use it.</p>

<hr>

<p>Use better indentation</p>

<pre><code>    if(count == n) 
    return head-&gt;value; 
</code></pre>

<hr>

<p>In C++ we use <code>nullptr</code> rather than <code>NULL</code>.</p>

<pre><code>    struct Node* head = NULL; 
</code></pre>

<p>The difference is that <code>nullptr</code> is correctly typed as a pointer, while NULL is a macro (bad) for an integer (bad type). Thus you can not incorrectly use <code>nullptr</code> while <code>NULL</code> can be abused.</p>

<hr>

<p>In C++ we use the C++ streams <code>std::cout</code>.</p>

<pre><code>    printf("Element at index 3 is %d", find(head, 3));   
</code></pre>

<p>The C++ streams have a more advanced type checking system that prevents accidents.</p>

<pre><code>    std::cout &lt;&lt; "Element at index 3 is " &lt;&lt; find(head, 3);
</code></pre>

<h2>Beter implementation</h2>

<pre><code>template&lt;typename T&gt;
class LinkedList
{
    struct Node {
            T value;
            Node* next;
    };
    Node*   root;

    public:
        LinkedList()
            : root(nullptr)
        {}
        ~LinkedList() {
            while(root) {
                Node* next = root-&gt;next;
                delete root;
                root = next;
            }
        }
        LinkedList(LinkedList const&amp;)            = delete;
        LinkedList&amp; operator=(LinkedList const&amp;) = delete;

        void push(T const&amp; new_data) 
        {
            root= new Node{new_data, root};
        }

        int find(int n) 
        { 
            Node* result = findElement(root, n);
            if (result == nullptr) {
                throw std::runtime_error("message"); 
            }
            return result-&gt;value;
        }
    private:
        Node* findElement(Node* n, int n) {
            if (n == nullptr) {
                return nullptr;
            }

            if (n == 0) {
                return n;
            }
            return findElement(n-&gt;next, n-1);
        } 
}
</code></pre>

<p>Main.cpp</p>

<pre><code>int main() 
{ 
    LinkedList&lt;int&gt; list; 

    list.push(1); 
    list.push(4); 
    list.push(1); 
    list.push(12); 
    list.push(1);   

    std::cout &lt;&lt; "Element at index 3 is " &lt;&lt; find(head, 2) &lt;&lt; "\n";   
    getchar(); 
} 
</code></pre>
    </div>