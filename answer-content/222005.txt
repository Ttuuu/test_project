<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some suggestions:</p>

<ul>
<li>I don't know whether this is community standard, but I <strong>never <code>import *</code> from anything.</strong> It's a quick way to get a naming collision, and I prefer being explicit about where my IDE has to look to find the implementation of something. An IDE will let you write out the name of the thing from another file and tell it to add the import statement <em>for you,</em> right at the correctly ordered place in your file.</li>
<li><strong>Naming</strong> is super duper important for maintainability. Ideally any piece of code should be understandable without knowing much about the context. Finding a balance between long, easily understood names and needless verbosity is an art, but code is read many, many times more than it is written, IDEs will help you complete names, and abbrs are t. b. of readab. <code>ref</code>, for example, could mean any of probably a dozen words, and many of those words have multiple meanings. Expanding the word is very likely going to make the code easier to read. <code>gender</code> and <code>sex</code> are also used interchangeably, which may be fine in casual conversation, but it also makes code harder to read.</li>
<li><strong>Regular expressions</strong> can also make code really hard to read in no time at all. Once you've got some working code using a regular expression I would recommend converting it into using things like <a href="https://docs.python.org/3/library/stdtypes.html#str.split" rel="nofollow noreferrer"><code>str.split()</code></a>, <a href="https://docs.python.org/3/library/stdtypes.html#str.replace" rel="nofollow noreferrer"><code>str.replace()</code></a> and the like which are by comparison super easy to read.</li>
<li><strong>Type hinting</strong> and MyPy with a strict configuration can make this code much easier to read. It might also highlight common problems such as treating convertible types as equal when they really aren't. Things like <code>type(xml_element.text) is not str</code>, for example, are a big no-no in duck typed languages like Python. </li>
<li>You have a bunch of <strong>magic strings</strong> in your code. They would probably work better as constants.</li>
<li>There are a lot of <strong>duplicate code.</strong> Pulling these bits into methods or classes should make the code easier to navigate.</li>
<li><strong>Using <code>abspath</code> is unnecessary</strong> unless your script actually changes working directory at some point.</li>
<li><code>Feed</code> is a bit of a monster class. It looks like it contains basically every piece of important code in this application, which is a pretty serious anti-pattern.</li>
<li><strong><code>__eq__</code> is meant to compare object <em>equality.</em></strong> Overriding it to compare the size of two things is seriously harmful to maintainability.</li>
<li><strong>Conditionals in <code>__init__</code></strong> is an anti-pattern - the constructor is meant to unconditionally populate the fields of an object before doing anything non-trivial.</li>
<li><strong>Modifying external state in <code>__init__</code></strong> (<code>mkdir(self.folder)</code>) is a serious anti-pattern. It makes the code essentially impossible to test, and would be very surprising to someone reusing this code.</li>
</ul>
    </div>