<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>One guiding principle in software development is <a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself" rel="nofollow noreferrer">Don't Repeat Yourself (DRY)</a>. Your code for player 1 and 2 are almost identical, so you should extract them into a <code>login</code> function:</p>

<pre><code>import crypt

class AuthenticationError(Exception):
    pass

def encrypt(word, salt):
    # use some one-way hashing function here
    return crypt.crypt(word, salt)

def login(users, max_tries=3):
    for i in range(max_tries):
        username = input("Please enter your username ")
        password = input("Please enter your password ")
        if username in users and encrypt(password, username) == users[username]:
            print("You are logged in as", username)
            return username
        else:
            print(f"Login failed. You have {max_tries - i - 1} tries left.")
    raise AuthenticationError(f"You have been locked out please restart to try again.")
</code></pre>

<p>This uses a hashing function, like <a href="https://codereview.stackexchange.com/users/163323/chad-g">@ChadG</a> suggested in <a href="https://codereview.stackexchange.com/a/209084/98493">their answer</a>, with a salt to prevent rainbow table attacks.</p>

<p>By raising an <code>Exception</code> (here a custom one, to give it a nice name), the execution of the program is automatically halted, so no need to explicitly do <code>sys.exit</code>.</p>

<p>This code assumes that you have read the users file before into a dictionary (only need to do it once!), something like this:</p>

<pre><code>import re

def get_users(file_name):
    line_fmt = re.compile(r'username: (.*) password: (.*)')
    with open(file_name) as f:
        return dict(line_fmt.match(line.strip()).groups() for line in f)
</code></pre>

<p>Or, this slightly expanded version which ensures that the entries not conforming to the format are skipped (including any trailing newline):</p>

<pre><code>def get_users(file_name):
    line_fmt = re.compile(r'username: (.*) password: (.*)')
    users = {}
    with open(file_name) as f:
        for line in f:
            try:
                name, password = line_fmt.match(line.strip()).groups()
                users[name] = password
            except AttributeError:
                print("Malformed line:", line)
        return users
</code></pre>

<p>Use it like this:</p>

<pre><code>if __name__ == "__main__":
    registered_users = get_users("accountfile.txt")

    print("Could player 1 enter their username and password")
    player1 = login(registered_users)

    print("Could player 2 enter their username and password")
    player2 = login(registered_users)

    # start dice game
</code></pre>

<p>This uses a <a href="http://stackoverflow.com/questions/419163/what-does-if-name-main-do"><code>if __name__ == "__main__":</code> guard</a> to allow importing from this script from another script.</p>
    </div>