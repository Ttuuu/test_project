<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>split</h1>
<p>The method does a few things at the same time.</p>
<ul>
<li>It expands the ranges</li>
<li>generates the combinations</li>
<li>takes the sums</li>
<li>compares to the target</li>
<li>assembles a DataFrame</li>
</ul>
<p>better would be to split it up in a few logical units. This will not only help freeing memory in-between steps, but also help with debugging the intermediate values</p>
<h1>looping</h1>
<p>Check the talk "Looping like a pro"</p>
<p>You loop over the index, and end up with real long variables like <code>ranges[parameter][0]</code>. If you use tuple expansion, you can do this:</p>
<pre><code>def expand(ranges, increment):
    for start, end in ranges.values():
        expansion= list(np.arange(start, end, increment))
        # np.arange() is exclusive of the upper bound, let's fix that
        if expansion[-1] != end:
            expansion.append(end)
        yield expansion
</code></pre>
<p>For me, this is a lot clearer. It also has the benefit of keeping the lines shorter.</p>
<p>Since it are more the expansions of the ranges you create instead of the combinations, I renamed the method and variables.</p>
<p>This also uses a generator instead of an intermediate list.</p>
<p>This alternative might even simpler:</p>
<pre><code>def expand(ranges, increment):
    for start, end in ranges.values():
        yield  np.arange(start, end + increment/2, increment)
</code></pre>
<p>This can then be combined and summed like this:</p>
<pre><code>def combine_naive(expansions, target):
    for combination in itertools.product(*expansions):
        # using np.isclose() so that the algorithm works for floats
        if np.isclose(sum(combination), target):
            yield combination
</code></pre>
<p>I like your comment there. It explains why you use <code>np.isclose</code> instead of <code>==</code></p>
<h1>Alternative approaches</h1>
<h2>numpy</h2>
<p>instead of having <code>itertools.product</code> assemble the combinations, you could use <code>numpy.meshgrid</code></p>
<pre><code>def combine_numpy(expansions, target):
    grid = np.meshgrid(*expansions)
    summary = np.array(grid).sum(axis=0)
    indices = np.where(np.isclose(summary, target))
    return (
        [row[i] for row, i in zip(expansions, idx)]
        for idx in zip(*indices)
    )
</code></pre>
<p>This is approximately the same, but staying in the <code>numpy</code> universe. You can reduce the memory footprint here with the correct choice of <code>dtype</code> and reducing the number of intermediary variables</p>
<h1>sorted</h1>
<p>or you could use the fact the expansions are sorted, and break when a sum is over the target. This uses recursion, tuple unpacking and the fact an empty sequence is <code>False</code>y.</p>
<pre><code>def combine_sorted(expansions, target, previous=()):
    series, *rest = expansions

    sum_max = sum(item[-1] for item in rest)
    for item in series:
        current = previous + (item,)
        sum_current = sum(current)
        if rest:
            if sum_current + sum_max &lt; target and not np.isclose(
                sum_current + sum_max, target
            ):
                continue
            yield from combine_sorted(rest, target, previous=current)
        else:
            if np.isclose(sum_current, target):
                yield current
            elif sum_current &gt; target:
                return
</code></pre>
<p>The <code>sum_max</code> is to skip numbers where the total some will be less than <code>target</code> as soon as possible.</p>
<p>testing and timing with real data will show which option is more memory and CPU intensive.</p>
<pre><code>if __name__ == "__main__":
    ranges = {"a": (95, 99), "b": (1, 4), "c": (1, 2)}
    increment = 1.0
    target = 100.0
    df = solution(ranges, increment, target)

    expansions = list(expand(ranges, increment))
    results = list(combine_naive(expansions, target))
    df1 = pd.DataFrame(results, columns=ranges.keys())
    print(df1)

    results_sorted = list(combine_sorted(expansions, target))
    print(results_sorted)
    df_sorted = pd.DataFrame(results_sorted, columns=ranges.keys())
    print(df_sorted)

    results_numpy = list(combine_numpy(expansions, target))
    print(results_numpy)
    df_sorted = pd.DataFrame(results_numpy, columns=ranges.keys())
    print(df_sorted)
</code></pre>
    </div>