<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is a big review, and it will be hard to cover everything, so I'll go with some main points and then a few tips (having started my own game in pygame as well, if you want to take a look - it's not perfect though - <a href="https://github.com/arthur-hav/hexrl" rel="noreferrer">https://github.com/arthur-hav/hexrl</a>).</p>

<ol>
<li>In terms of data structure, in your player you can trade multiple <code>standing</code> <code>shooting</code> <code>jumping</code> booleans for a single <code>self.state</code> which could be either "jumping", "shooting" etc.</li>
<li><p>Once done, and have animations stored in a dictionary of list of images with keys being <code>self.state</code> values. This way, in your <code>draw</code> function you could do something in the lines of :</p>

<p><code>animation = self.animations[self.state]
count = self.counts[self.state]
screen.blit(animation[count], (self.x, self.y))</code></p></li>
</ol>

<p>Using data structures is a good way to avoid repeating yourself and keep the code short.</p>

<ol start="3">
<li>Bullet and player can derivate from a same base class, they are game objects with sprites. As such, they always have an image, possibly animations, and a rect (pygame rect includes x, y, width and length). They can have also in common a generic display function, which blits to the screen. You can later add also the loading code to it, and maybe animation and physics code, but this is optional.</li>
<li>Your main loop does way too much. Instead, you can have an <code>update()</code> method in your game objects. Each would behave accordingly, such as the bullet velocity. Same for input handling : since only the player reacts to input, it should have a <code>move()</code> function handling <code>man.x += man.vel</code> and so on.</li>
</ol>

<p>Below are more bonus points:</p>

<ol start="5">
<li>You can have game constants such as image names, animation max numbers etc. isolated from your classes and passed to init function. This is useful for clarity, separating data from code, and creating new instances with different behavior (e.g. monsters).</li>
<li>Use an <a href="https://en.wikipedia.org/wiki/Observer_pattern" rel="noreferrer">observer pattern</a> for input handling. This is especially useful if you add a menu later on.</li>
<li>Split the code in several files. For example one file with your game objects and one with the main loop and the input handling.</li>
<li>General code : try to follow PEP8, which normalizes the number of lines to jump between each block and so on. No double jump in the middle of a function. There are automated tools which should guide you on that. It's also length, not lenght ;)</li>
</ol>
    </div>