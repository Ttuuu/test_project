<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>(just rewriting, @mlb solution)</p>

<h2>Let solve the Algorithm then improve the code</h2>

<p><span class="math-container">$$ \text{Let }X = \{x_0, x_1, x_2, ... x_p\} \text{ points.}$$</span> 
<span class="math-container">$$ \text{Let }S = \{ \text{all the pairs }(x_i, x_j): i \neq j, (x_i, x_j) \in X\times X\} $$</span></p>

<p><span class="math-container">$$\text{A point }x_m\text{ lies on some segment on } s  \in S: \text{ if }
\exists i,j,k: (x_i,x_j) \in S\text{ , }(x_i, x_k) \in S\text{ , and }(x_i, x_j) \| (x_i, x_k)$$</span>
In that case, m can be all the three index. We don't know yet. To solve that issue, points need to be sorted.</p>

<p>To detect if two segments are parallels, you have some options. 
a) just take the difference between the points and normalize.
b) calculate the slope of the two segments. They should be the same.</p>

<h2>Now, the efficient solution</h2>

<p><span class="math-container">$$\text{First of all, the solution is }O(N^2)\text{, } $$</span>
<span class="math-container">$$\text{because creating  segments from all the points is }O(N^2).$$</span></p>

<p>To keep that complexity, operations over segments should be done in constant time.</p>

<p>The idea is keep track of all "lines" that a segment lies on. For each new segment, we verify if the line was already found in our map.</p>

<p>A line is defined by a point and the slope. To be consistent, let us take the point at x coordinate equals to 0. The point would the format (y, 0). There is an edge case when slopes is orthogonal to x-coordinate. In that case, we can take y=0.</p>

<pre class="lang-java prettyprint-override"><code>public class Line {
    private final Double slope;
    private final Double y_0;
    // override equals and hashcode
    // override the constructor
}
</code></pre>

<p>Also, creates a class Point that implements Comparable. One point is less than other point if comes before (x coordinate is less than) and below (as second criteria, y coordinate is less than) the other point.</p>

<p>Sort all the points.</p>

<p>Now, you can build a map Map(Line, List(Point)) and verify for each segment if the same line was already add to the map.</p>

<p>All the points between the last element of the List and the first element of the List are points between other two points.</p>
    </div>