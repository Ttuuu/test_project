<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>After some searching I found that my ring buffer is broken if its capacity isn't power of 2, because once the counter reaches its maximum (on 64-bit : 2^64 - 1) it will begin from zero the next increment so if the modulus of the counter by n isn't n-1 when it reaches the maximum unsigned integer of the architecture then the counter will misbehave because at the next step the remainder (index) will be 0 while the previous remainder (index) isn't n - 1</p>

<p>this illustrates the problem :</p>

<pre><code>constexpr uint64_t rem1 = std::numeric_limits&lt;uint64_t&gt;::max() % 13;
cout &lt;&lt; "rem1 = " &lt;&lt; rem1 &lt;&lt; endl; // rem1 = 2
constexpr uint64_t rem2 = (std::numeric_limits&lt;uint64_t&gt;::max() + 1) % 13; // std::numeric_limits&lt;uint64_t&gt;::max() + 1 = 0
cout &lt;&lt; "rem2 = " &lt;&lt; rem2 &lt;&lt; endl; // rem2 = 0 not 3 !
</code></pre>

<p>but for number n equals power of two the remainder will be n -1 at maximum value so no problem here</p>
    </div>