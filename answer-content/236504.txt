<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There is quite a lot that you can do to make this idiomatic. I'll also go a bit overboard and show some ways to fully polish it (emphasis on way overboard for most projects).</p>

<p>You mention potentially wanting to do <code>multi</code>.  That's certainly possible here:</p>

<pre><code>multi sub circumfix:&lt;α ω&gt;( ( $a where Positional, $b, $c ) ) { ... };
multi sub circumfix:&lt;α ω&gt;( ( $a where Int,        $b, $c ) ) { ... };
</code></pre>

<p>But ultimately it's unnecessary.  As the other answer points out, Raku has a junction types built in. They can be made by using the routines (or operators)  <code>all</code> (<code>&amp;</code>), <code>any</code> (<code>|)</code>, <code>one</code> (<code>^</code>) and <code>none</code> — the routines are available as both subs and methods.  In your case, we can take advantage of the fact that junctions can be made on a single item <em>or</em> a list, so that regardless whether <code>$a</code> is a list of <code>Int</code> or just a single <code>Int</code>, we can make it into a junction.  That right there can reduce your code to:</p>

<pre><code>sub circumfix:&lt;α ω&gt;( ( $a, $b, $c ) ) {
   so ( $a.any &gt;= $b &amp; $a.any &lt;= $c );
};
</code></pre>

<p>Although we're going to remove it entirely, it should be noted that <code>&amp;</code> is a junction. This is slightly less efficient than using <code>&amp;&amp;</code> which just checks whether both sides are true and evaluates to a <code>Bool</code>.  But we won't need to do that at all.  Raku allows for chained operators, and the comparison operators are defined as such.  This means that we can simplify things even further to:</p>

<pre><code>sub circumfix:&lt;α ω&gt;( ( $a, $b, $c ) ) {
   so $b ≤ $a.any ≤ $c;
};
</code></pre>

<p><code>so</code> has very loose operator precedence, so we don't need parentheses here.  The final two considerations are purely stylistic, but help for code maintaince.  The names <code>$a</code>, <code>$b</code>, and <code>$c</code> aren't descriptive.  You'd definitely want to use something better.  Also, it's fairly common, though not universal, to give extra emphasis to the fact that we're not mutating the values by using sigil-less variables.  Personally, I also like to use whitespace to indicate the tighter grouping when using deconstruction, but YMMV.  Lastly, semicolons aren't needed when they're the final expression of a block, or when a block terminates the line, so we can remove the semicolons.</p>

<pre><code>sub circumfix:&lt;α ω&gt;( (\val,\min,\max) ) {
   so min ≤ val.any ≤ max
}
</code></pre>

<p>In this case, using min/max/val without sigils maybe is a bit riskier as they are also routines, but it seems to workout okay.</p>

<p>If we want to go above and beyond for safety's sake, we can check the values in the signature.  I'm assuming based on your original that you wanted to limit things to <code>Int</code> values so let's make it explicit, and specify our return value:</p>

<pre><code>sub circumfix:&lt;α ω&gt;( (\val where .all ~~ Int, \min where Int, \max where Int) --&gt; Bool) {
   so min ≤ val.any ≤ max
}
</code></pre>

<p>At this point, the signature is getting a bit unruly, and so I like to spread it across multiple lines.  Particularly if you have several deconstructed arguments, this lets identation also show structure a bit more clearly (but in this case, it's less necessary of course):</p>

<pre><code>sub circumfix:&lt;α ω&gt; ( 
    (
       \val where .all ~~ Int, 
       \min where         Int, 
       \max where         Int
    )
    --&gt; Bool
) {
   so min ≤ val.any ≤ max
}
</code></pre>

<p>And don't forget that Raku's POD syntax means we can also add in documentation that could help users or automatically create documentation:</p>

<pre><code>#| Determine if a value or values are between the given values (inclusive)
sub circumfix:&lt;α ω&gt; ( 
    (
       \val where .all ~~ Int, #= The Int value or values to be tested
       \min where         Int, #= The lowest acceptable value
       \max where         Int  #= The highest acceptable value
    )
    --&gt; Bool
) {
   so min ≤ val.any ≤ max
}
</code></pre>

<p>IDEs like Comma are already able to pull some of this information to make coding easier.  Using it on signatures is really only supported for generating help feedback automatically on command line usage, but it's only a matter of time before such things will be integrated into IDEs.</p>
    </div>