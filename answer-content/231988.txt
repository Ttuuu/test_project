<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It would be more usual to replace the <code>if null strings...</code> conditional with a <code>case</code>, and <code>concat</code> is more commonly used than <code>fold</code> for lists:</p>

<pre><code>fizzbuzz :: [Fizzrule] -&gt; Int -&gt; String
fizzbuzz rules int
  = case mapMaybe (processrule int) rules of
      [] -&gt; show int
      strings -&gt; concat strings
</code></pre>

<p>Similarly, <code>processrule</code> would more commonly be written with guards than an <code>if-then-else</code>:</p>

<pre><code>processrule :: Int -&gt; Fizzrule -&gt; Maybe String
processrule int rule
  | int `mod` (divisor rule) == 0 = Just (yell rule)
  | otherwise                     = Nothing
</code></pre>

<p>For simple structures like <code>Fizzrule</code>, it's pretty common to dispense with field selectors and pattern match directly, so this would probably be further rewritten. Also, it's more usual to use single character arguments like <code>n</code> in preference to <code>int</code>, though <code>str</code> and <code>lst</code> are often used for strings and lists:</p>

<pre><code>processrule :: Int -&gt; Fizzrule -&gt; Maybe String
processrule n (Fizzrule d str)
  | n `mod` d == 0 = Just str
  | otherwise      = Nothing
</code></pre>

<p>Then the <code>mapMaybe</code> and <code>processRule</code> functions aren't actually doing much, so it would be more usual to replace them with a list comprehension:</p>

<pre><code>fizzbuzz :: [Fizzrule] -&gt; Int -&gt; String
fizzbuzz rules n
  = case [s | Fizzrule d s &lt;- rules, d `divides` n] of
      [] -&gt; show n
      strings -&gt; concat strings
  where d `divides` m = m `rem` d == 0
</code></pre>

<p>Arguably, it might be more usual to keep the "map" in <code>main</code> pure and output all the lines at once.  (Even when run as a pure computation, it's all done lazily, so no worry that you need to wait for the computation to complete if you try to FizzBuzz the first billion integers or even run it on an infinite list <code>[1..]</code>).  Also, note the type signature spacing -- it's always <code>IO ()</code> and never <code>IO()</code>.</p>

<pre><code>main :: IO ()
main = putStr . unlines $ map (fizzbuzz rules) [1..100]
</code></pre>

<p>Naming all the rules seems like overkill, and <code>Fizzrule</code> takes forever to type, so maybe:</p>

<pre><code>{-# OPTIONS_GHC -Wall #-}

module Main where

data Rule = Rule Int String

myrules :: [Rule]
myrules =
  [ Rule 3 "Fizz"
  , Rule 5 "Buzz"
  , Rule 7 "Quux"
  ]

fizzbuzz :: [Rule] -&gt; Int -&gt; String
fizzbuzz rules n
  = case [s | Rule d s &lt;- rules, d `divides` n] of
      [] -&gt; show n
      strings -&gt; concat strings
  where d `divides` m = m `rem` d == 0

main :: IO ()
main = putStr . unlines $ map (fizzbuzz myrules) [1..100]
</code></pre>

<p>That looks more idiomatic to me.</p>

<p>Writing the <code>Rule</code> as a newtype:</p>

<pre><code>newtype Rule = Rule (Int, String)
</code></pre>

<p>would be silly.  The main point of <code>newtype</code> is to introduce a type and associated constructor that's "free" from a performance standpoint because it's erased at compilation time (while also allowing for certain conveniences related to automatically deriving type class instances).  However, in:</p>

<pre><code>newtype Rule = Rule (Int, String)
</code></pre>

<p>the <code>Rule</code> constructor can be erased, but the pair constructor (normally written <code>(,)</code>) is still there.  If you just write a <code>data</code> type in the first place:</p>

<pre><code>data Rule = Rule Int String
</code></pre>

<p>then that replaces the <code>(,)</code> constructor with the <code>Rule</code> constructor more explicitly.  There's no advantage here to <code>newtype Rule</code> -- it just requires extra typing when constructing or pattern matching values.</p>

<p>The choice between <code>data Rule = ...</code> and <code>type Rule = (Int, String)</code> is more a matter of personal taste.  I'd probably go with the <code>data Rule</code> type.</p>

<p>To summarize some of the principles used above:</p>

<ul>
<li><code>if-then-else</code> statements are rare in Haskell and are usually replaced by <code>case</code> constructs (or the implicit <code>case</code> construct of function definitions), possibly with the help of guards.  It's especially rare to see <code>if null lst then...</code> since this is almost always better written as a <code>case</code>.</li>
<li>Haskellers usually inline helper functions like <code>processrule</code> that are only used in one place and have no general applicability.  In constrast, Haskellers often define trivial functions like <code>divides</code> in <code>where</code> clauses where they improve readability.  I'm arguing here that the list comprehension is more directly readable than the function name <code>processrule</code>, but <code>divides</code> is more readable than the <code>m `rem` d == 0</code> expression.  It's a judgement call.</li>
<li>At least for "small" data structures, pattern matching is usually used in preference to field selectors.</li>
<li>Pure code is often used in preference to impure code, including where you have an action where additional purity can be factored out (e.g., instead of <code>mapM_</code> over multiple IO actions, <code>map</code> over pure values and pass that to a single IO action).</li>
</ul>
    </div>