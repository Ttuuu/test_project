<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p><strong>More on naming</strong>. It is not your fault; just keep in mind that for a computer scientist <em>shift</em> has a very precise meaning. Once we start placing falling-off elements back at the right, the algorithm becomes <em>rotate</em>.</p></li>
<li><p><strong>Performance</strong>. Your approach has an \$O({l}\times{n})\$ complexity. There are two ways to drive the complexity down to just \$O(l)\$.</p>

<ul>
<li><p>Observe that the element at index <code>i</code> ends up at index <code>(i + ntimes) % len(lst)</code>, in other words index <code>i</code> is a final place for an element at <code>(i + ntimes) % len(lst)</code>. It means that the loop</p>

<pre><code>tmp = lst[i]
dst = i
src = (dst - ntimes) % len
while src != i:
   lst[dst] = lst[src]
   dst = src
   src = (dst - ntimes) % len
lst[dst] = tmp
</code></pre>

<p>does rotate a certain subset (aka <em>orbit</em>) of the list, and running it against all orbits achieves rotation in \$O(len)\$ operations with an asymptotic constant close to 1. Figuring out how these orbits are organized requires a certain grasp of (elementary) number theory; I highly recommend to study it.</p></li>
<li><p>More practical approach (still \$O(len)\$ with a slightly worse asymptotics) involves 3 reversals.</p>

<p>Let's say we need to rotate the list <code>a b c d e</code> by two positions into <code>c d e a b</code>.</p>

<ul>
<li>Reverse the first two elements giving <code>b a c d e</code></li>
<li>Reverse the remaining portion of the list giving <code>b a e d c</code></li>
<li>Now reversing the whole list gives a desired result: <code>c d e a b</code></li>
</ul></li>
</ul></li>
</ul>
    </div>