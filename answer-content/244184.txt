<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Requirements</h2>
<p>Move these:</p>
<pre><code># pip install requests
# pip install beautifulsoup4
</code></pre>
<p>into a pip-compatible <code>requirements.txt</code>:</p>
<pre><code>requests
beautifulsoup4
</code></pre>
<h2>Type hints</h2>
<p>They will help. I don't know if <code>id_</code> is an <code>int</code> or <code>str</code> here, but:</p>
<pre><code>def get_url(id_: int) -&gt; str:
</code></pre>
<h2>Path parsing</h2>
<p>This:</p>
<pre><code>l = url.split("/")
return l[4] if len(l) &gt; 4 else ""
</code></pre>
<p>is a little risky. You're probably better off writing a regular expression that is explicit in where the ID is situated with respect to the element above it:</p>
<pre><code>re.search(r'/s/(\d+)')
</code></pre>
<p>assuming that the ID is integral. Also, avoid using an empty string as the default if no ID is found; either return <code>None</code> or maybe raise an exception, depending on how much of a problem it is.</p>
<h2>Mode variables</h2>
<p>Since <code>mode</code> only has two states, use a <code>bool</code>, maybe named <code>get_url</code>. If it had more than two states, or if you feel that the use of <code>bool</code> is too confusing, use an <code>Enum</code> - but avoid using strings for this purpose.</p>
<h2>Globals</h2>
<pre><code>def get_directory():
    global path
</code></pre>
<p>should not declare a global. Simply return <code>path</code>.</p>
<h2>Separation of UI and logic</h2>
<p><code>download_fanfic</code> is a big old ball of yarn. You have calls to <code>requests</code> beside calls to <code>messagebox</code>. Separate out the actual downloading logic and parsing logic into their own separate functions that do not have any <code>tk</code> code in them at all. Errors can be signalled via exceptions, and progress can be signalled via a generic callback function.</p>
<h2>Logging</h2>
<p>Try converting this:</p>
<pre><code>set_status("Writing FanFiction to " ...
</code></pre>
<p>into a call to the standard logging framework, and adding your own logging handler to do what <code>set_status</code> currently does. It will make your application much more flexible - you could fairly easily flip one switch to have the entire thing run in console-only mode.</p>
<h2>Requests check</h2>
<pre><code>        if response.status_code == 200:
</code></pre>
<p>should be replaced with:</p>
<pre><code>if response.ok:
</code></pre>
<p>or better yet</p>
<pre><code>response.raise_for_status()
</code></pre>
<h2>Threading</h2>
<blockquote>
<p>I realized that Windows likes to mark the program as not responding if there are a lot of FanFictions to download. Is there a way to get rid of that too?</p>
</blockquote>
<p>Put the downloading code in a worker thread, so that no single tk ui function is long-lived.</p>
    </div>