<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You are probably aware of this but <a href="https://modernweb.com/what-every-javascript-developer-should-know-about-floating-points/" rel="nofollow noreferrer">representing floating point numbers in JavaScript is difficult to do without rounding errors</a></p>
<p>Are you sure you the math is correct in the calculations? Specifically, when subtracting <code>angleObstacle</code> from <code>moveAngle</code>, should <code>angleTarget</code> really be added? I attempted to change it such that <code>angleTarget</code> does not get added when that happens. It appears to allow the green circle to avoid colliding with the obstacle circle. I am not sure why the speed changes... perhaps because of the exponential change with the arc tan or other sin functions.</p>
<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const canvas = document.getElementById('canvas');
const ctx = canvas.getContext('2d');

const targetX = 50;
const targetY = 50;

const obstacleX = 150;
const obstacleY = 50;

let aiX = 250;
let aiY = 51;

function loop() {
    // Distance between the vector points
    const disTargetX = targetX - aiX;
    const disTargetY = targetY - aiY;
    
    const disObstacleX = obstacleX - aiX;
    const disObstacleY = obstacleY - aiY;

    // Moves to target by default
    const angleTarget = Math.atan2(disTargetY, disTargetX);
    let moveAngle = angleTarget;

    // If near obstacle, adjust course and try to avoid it
    if (Math.sqrt(disObstacleX * disObstacleX + disObstacleY * disObstacleY) &lt; 60) {
        const angleObstacle = Math.atan2(disObstacleY, disObstacleX);
        moveAngle += /*angleTarget -*/angleObstacle;
    }

    // Move the vector to desired location
    aiX += Math.cos(moveAngle);
    aiY += Math.sin(moveAngle);

    //Drawing
    ctx.clearRect(0, 0, 600, 200);

    ctx.beginPath();
    ctx.fillStyle = "teal";
    ctx.arc(aiX, aiY, 10, 0, Math.PI * 2, true);
    ctx.fill();

    ctx.beginPath();
    ctx.fillStyle = "purple";
    ctx.arc(obstacleX, obstacleY, 10, 0, Math.PI * 2, true);
    ctx.fill();
    
    ctx.rect(targetX - 20, targetY - 20,40,40);
    ctx.stroke();
    
    if (aiX &gt; 50) {
        requestAnimationFrame(loop);
    }
}

requestAnimationFrame(loop);</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;canvas id="canvas" width="600" height="200"&gt;&lt;/canvas&gt;</code></pre>
</div>
</div>

<h3>Other review points</h3>
<p>In the code snippet above, you will notice that <code>let</code> has been replaced with <code>const</code> for many of the declarations of variables that are not re-assigned within the function - e.g. <code>targetX</code>, <code>targetY</code>, <code>obstacleX</code>, <code>obstacleY</code>, <code>disTargetX</code>, <code>disTargetY</code> . This avoids any unintentional re-assignment.</p>
<p>Also, the original code loops forever. I added a condition in the snippet above - i.e. <code>aiX &gt; 50</code> which needs to be true in order for the function to be called again (via <code>requestAnimationFrame</code>). This avoids unnecessary processing.</p>
    </div>