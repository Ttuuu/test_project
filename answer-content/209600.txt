<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Conformance</h1>
<p>A couple of violations of Standard C:</p>
<pre class="lang-none prettyprint-override"><code>209552.c: In function ‘run_test’:
209552.c:52:28: warning: ISO C forbids empty initializer braces [-Wpedantic]
     char *args[MAX_ARGS] = {};
                            ^
209552.c:92:36: warning: ISO C forbids empty initializer braces [-Wpedantic]
     char actual_result[MAX_LINE] = {};
                                    ^
</code></pre>
<p>Another pedantic point, which you're probably aware of: this clearly targets POSIX systems, where we are guaranteed that <code>argc</code> is at least 1, and so <code>argv[0]</code> is always usable; however, when writing portable programs, code like this can be dangerous:</p>
<blockquote>
<pre><code>if (argc != 2)
{
    fprintf(stderr, "Usage: %s &lt;test_specification&gt;\n", argv[0]);
    return 1;
}
</code></pre>
</blockquote>
<h1>Input file format</h1>
<p>There are some severe limitations to the input file format.  It's impossible to specify commands or arguments that contain space characters, and it's impossible to specify output of more than one line.</p>
<p>Addressing the last point first, perhaps we should consider writing one file per test, with the command as first line, and then all subsequent lines being the expected output.  Adapt the program to read loop over the command-line arguments, reading every file that's specified.  It's easy for users to test lots of commands, using wildcards (e.g. <code>run_tests *.test</code>).</p>
<p>As for the first problem, we could consider using a shell to parse it instead of <code>strtok()</code> - just take the whole command and pass it to <code>/bin/sh -c</code>.</p>
<p>Perhaps we also want to check the exit status of the program under test - I think that's an important part of the program's interface.</p>
<h1>Output format</h1>
<p>For syntax errors in the file format, we could improve the error message by writing the file name and line number, rather than just the contents.  This would then be consistent with error messages from compilers and other tools, which can be parsed (such as in Emacs, where <code>goto-error</code> will take the user directly to the problem line).</p>
<h1>Parsing function</h1>
<p>The parsing might be simpler if we first divide at <code>-&gt;</code> (or newline, in my proposed input format), and then process the input and output sides separately.  We really should emit a good error when the <code>MAX_ARGS</code> limit is violated (as we do for <code>MAX_LINE</code>).  A worthwhile enhancement would be to eliminate these arbitrary limits.</p>
    </div>