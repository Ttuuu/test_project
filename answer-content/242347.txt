<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It's not exact translation of your code, but still :) I've just tried!</p>

<p>Unfortunately, it's not a github project, so I don't have an access to the excel sheet, so I can't really run and test it. But, anyways, ideas are:</p>

<ol>
<li>Utilization of <code>toString()</code> java method </li>
<li>Using of lazy properties allows to 'cache' the URL easily. It's also possible because all of the <code>Book</code>s properties are immutable.</li>
<li>Extension method <code>download()</code> doesn't really belong to a <code>book</code>, but, instead,
can easily download any <code>URL</code></li>
<li>I used <code>require()</code>, though, it's not really correct, since it throws an exception, instead of gracefully exiting the app. I used it, just to demonstrate it, nothing more.</li>
</ol>

<p>And, probably, something else. <strong>Please, tell me what you're thinking!</strong></p>

<pre class="lang-kotlin prettyprint-override"><code>data class Book(
    val title: String,
    val author: String,
    val edition: String,
    val year: String,
    val category: String,
    val url: String
) {
    constructor(row: Row) : this(
        row.getCell(0).stringCellValue, row.getCell(1).stringCellValue,
        row.getCell(2).stringCellValue, row.getCell(4).numericCellValue.toString(),
        row.getCell(11).stringCellValue, row.getCell(18).stringCellValue
    )

    override fun toString() = "$title, $edition - $author"

    val downloadURL by lazy {
        val canonicalURL = Jsoup.connect(url).get().select("link[rel=canonical]").attr("href")
        val pdfRelativeURL =
            Jsoup.connect(canonicalURL).get().select("""a[href^="/content/pdf/"]""").attr("href")
        URL("https://link.springer.com${pdfRelativeURL}")
    }
}

fun URL.download(to: Path): Path {
    Files.createDirectories(to.parent)

    Channels.newChannel(openStream()).use { inChannel -&gt;
        FileOutputStream(to.toFile()).channel.use { outChannel -&gt;
            print("Saving $this to $to... ")
            outChannel.transferFrom(inChannel, 0, Long.MAX_VALUE)
            println("DONE.")
        }
    }

    return to
}

fun main(args: Array&lt;String&gt;) {
    require(args.size == 2) { "Please pass &lt;full_path_to_springer_excel_file&gt; and &lt;full_path_to_download_folder" }

    val (excelPath, downloadFolder) = args
    val excelFile = WorkbookFactory.create(File(excelPath))

    // drop(1): skip the first row because it contains the headers
    val books = excelFile.getSheetAt(0).drop(1).map { Book(it) }

    books.map { book -&gt;
        val path = Paths.get(downloadFolder, book.category, "$book.pdf")
        book.downloadURL.download(to = path)
    }
}
<span class="math-container">```</span>
</code></pre>
    </div>