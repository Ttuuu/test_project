<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Bugs</h1>

<ul>
<li><strong>Do you want to play?</strong> infinite loop after pressing a wrong key, the program keeps printing the same prompt over and over no matter what the input is.</li>
<li><strong>Negative inputs:</strong> The program accepts negative monetary values and adds them to your current wealth if you lost.</li>
</ul>

<h1>Style</h1>

<p>I suggest you check <strong>PEP0008</strong> <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">https://www.python.org/dev/peps/pep-0008/</a> the official Python style guide when writing your code and <strong>Flake8</strong> <a href="http://flake8.pycqa.org/en/latest/" rel="nofollow noreferrer">http://flake8.pycqa.org/en/latest/</a> as a tool for style enforcement and the following goes accordingly:</p>

<ul>
<li><p><strong>Missing whitespace after a comma:</strong> </p>

<pre><code>SUITS = ['Heart','Diamond','Club','Pike']
FIGURES = ['A','2','3','4','5','6','7','8','9','10','J','Q','K']
def __init__(self,suit,figure):
elif self.figure in ['J','Q','K']:
</code></pre>

<p><strong>are written:</strong></p>

<pre><code>SUITS = ['Heart', 'Diamond', 'Club', 'Pike']
FIGURES = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K']
def __init__(self, suit, figure):
elif self.figure in ['J', 'Q', 'K']:
</code></pre></li>
<li><p><strong>Docstrings:</strong></p>

<pre><code>'''
Single card class
Use it in loop to make full french deck of card
print return 'Figure of suit'
'''
</code></pre>

<p><strong>Python documentation strings</strong> (or docstrings) provide a convenient way of associating documentation with Python modules, functions, classes, and methods. It's specified in source code that is used, like a comment, to document a specific segment of code and are usually accessed using <code>help()</code> They should describe what the classes/functions do instead of how and are delimited by triple double quotes.
Most of your defined methods do not contain docstrings while they should.</p>

<p>The docstring above should be enclosed in triple double quotes and should contain a description of what the class does not how:</p>

<pre><code>"""
Build a french deck of cards.
"""
</code></pre></li>
<li><p><strong>Blank lines</strong>: Surround top-level function and class definitions with two blank lines.Method definitions inside a class are surrounded by a single blank line.Extra blank lines may be used (sparingly) to separate groups of related functions. Blank lines may be omitted between a bunch of related one-liners (e.g. a set of dummy implementations).</p>

<p><strong>Examples:</strong></p>

<p><strong>2 lines should be left between these:</strong></p>

<pre><code>MIN_BET = 2

class Card:
</code></pre>

<p><strong>And these:</strong></p>

<pre><code>self.deck = [Card(suit, figure) for suit in SUITS for figure in FIGURES]

class Hand:
</code></pre>

<p>And too many blank lines are left in your <code>main()</code> function.</p></li>
<li><p><strong>Bare except:</strong> You should be indicating the type of exception likely to occur (ex: IndexError, TypeError ...) instead of the too broad exception clause.</p></li>
<li><p><strong>Typo:</strong> <code>def deposite():</code> is <code>def deposit():</code></p></li>
<li><p><strong>Comments:</strong> start with a single <code>#</code> and a capital letter and end with <code>.</code></p>

<p><code>##Creating Objects</code> is written <code># Creating objects.</code></p>

<p><strong>and</strong></p>

<p><code>##1 round -&gt; Draw, hit/stand -&gt; dealer -&gt; check if win</code></p>

<p><strong>is written:</strong></p>

<p><code># 1 round -&gt; Draw, hit/stand -&gt; dealer -&gt; check if win.</code>
and same goes for all other comments</p></li>
</ul>

<h1>Code</h1>

<ul>
<li><p><strong>Global variables:</strong> are bad in Python and all programming languages, the reason behind them being bad that they might produce some very hard to trace side effects and lead something called 'Spaghetti Code'. I suggest you enclose them inside their respective functions/methods that use them or you might even make them class variables (if that's necessary).</p></li>
<li><p><strong>inefficient <code>pop()</code>:</strong>
In your <code>Deck</code> class:</p>

<pre><code>def draw(self):
return self.deck.pop(0)
</code></pre>

<p>when you're popping the first element of a list there will be n - 1 rearrangements of the remaining items in the list which is inefficient for large lists(not the case here). And since the deck will be shuffled so only return <code>self.deck.pop()</code> is sufficient.</p></li>
<li><p><strong>Instance attributes defined outside constructor:</strong>
In your <code>check_value()</code> method: </p>

<pre><code>if self.value &gt; 21:
    self.isBusted = True
</code></pre>

<p>instance attributes should be defined inside the constructor <code>__init__()</code> only.</p></li>
<li><p><strong>Magic numbers:</strong> </p>

<pre><code>self.value = 11
self.value = 10
while self.value &gt; 21 and ace &gt; 0:
self.value -= 10
while self.value &lt; 17:
self.pool = 0
</code></pre>

<p>These numbers should be function parameters or have some commented explanations provided.</p></li>
</ul>
    </div>