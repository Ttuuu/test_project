<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This isn't any shorter, but it is more dynamic:</p>

<pre class="lang-bsh prettyprint-override"><code>exts=( py cpp h )

count_lines() {
    local find_args=( -false )
    for ext in "${exts[@]}"; do
        find_args+=( -o -name "*.$ext" )
    done

    find ./ "${find_args[@]}" -print0 |
    xargs -o grep -cve "^\s*$" |
    grep -oP '(?&lt;=:).*' |
    awk '{s+=$1} END {print s}'
}
</code></pre>

<p>The extensions reside in a bash array that can live in the global scope. It's one place to store your list of interesting files.</p>

<p>In count_lines you can build up an array of arguments to pass on to <code>find</code>. I'm using <code>-false</code> as the first one so that it's simple to add <code>-o -name "*.something</code> in the loop.</p>

<p>You don't need to capture the command output only to print it on the next line. Just let the commands print to stdout directly.</p>

<p>I added <code>-print0</code> to find and <code>-0</code> to xargs. These options work well together to be able to handle any filename, regardless of any whitespace in the name.</p>

<p>Note you don't need to use line continuations when the line ends with a pipe (or with a &amp;&amp; or ||) -- bash understands that the pipeline continues on the next line.</p>

<p>About your <code>awk</code> command: if your goal is to count lines, don't you want <code>{s+=1}</code> or <code>{s++}</code> instead of <code>{s+=$1}</code>? The latter will only sum any filenames that look like numbers:</p>

<pre class="lang-bsh prettyprint-override"><code>$ touch 5 8 a b c
$ ls | awk '{sum += $1; count++} END {print sum, count}'
13 5

</code></pre>
    </div>