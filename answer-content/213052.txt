<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Design</h3>

<p>I think there are some problems with this design:</p>

<ul>
<li><code>ThreadBlock</code> has too many responsibilities: it's used to build a read-only collection, to perform parallelized work on it and to store the results of that work. That's a fairly rigid workflow. PLINQ, in comparison, is much more composable: you can call <code>AsParallel().Select(DoWork)</code> on anything that's enumerable, and the results are returned directly to the caller, which can then store, share, discard or further process them depending on the use-case (without the risk that something else will overwrite these results).</li>
<li>The design is conflicting: because <code>action</code> and <code>continuation</code> are passed to the constructor, <code>Execute</code> should always perform the same work, so it doesn't make sense to call it multiple times (you'd just be redoing work that was already done*). On the other hand, <code>Execute</code> accepts per-item warmup and continuation callbacks, which allow custom work (or rather, side-effects, because they don't return anything) per <code>Execute</code> call. How is this intended to be used? Why so many different callbacks?</li>
<li>All that sleeping and locking in <code>Execute</code> looks quite inefficient. This may not always be noticeable - it depends on the amount of items and how much work needs to be done per item - but I'm fairly sure PLINQ is better optimized in this regard.</li>
</ul>

<p>I think the PLINQ equivalent is mostly just messy because the overal workflow is messy, with several separate callbacks being used for side-effects (I'd use loops for that, not <code>Select</code> calls). Why not move that extra work into <code>Processor</code>? That would make both the PLINQ approach and the design of your <code>ThreadBlock</code> class simpler.</p>

<p>Note that <code>ThreadBlock</code> is running the warmup and thread continuations in parallel, while your PLINQ example runs them sequentially.</p>

<hr>

<p><em>*Unless that work is not deterministic, but I'm not sure that that's such a good idea. You'd run into trouble with <code>Results</code>, as you can't tell whether a result is new or old while an <code>Execute</code> call is still in progress.</em></p>

<h3>Other problems</h3>

<ul>
<li><code>Results</code> does not take duplicate <code>TData</code> values into account - it silently discards the results of all but one of them.</li>
<li><code>Execute</code> gets stuck on <code>null</code> data items. <code>ConcurrentDictionary</code> throws when you're trying to use <code>null</code> as a key, which then causes <code>depth</code> to not be decreased.</li>
<li><code>Add</code> and <code>AddRange</code> silently discard their input once <code>LockList</code> has been called. I would at least expect an exception to be thrown.</li>
</ul>

<h3>Other notes</h3>

<ul>
<li>Some quick testing suggests that adding items to a bag in parallel is slower than doing so sequentially.</li>
<li>Both <code>ICollection&lt;T&gt;</code> and <code>IProducerConsumerCollection&lt;T&gt;</code> implement <code>IEnumerable&lt;T&gt;</code>, so those <code>AddRange</code> overloads aren't needed.</li>
<li>I think <code>TInput</code> is a little more self-descriptive than <code>TData</code>.</li>
<li>Why does the thread continuation take a nullable tuple? It's never invoked with null.</li>
<li>Why is <code>MaxDegreeOfParallelism</code> publicly settable? Mutable shared state is best avoided in concurrency. This makes it possible for another thread to 'intercept' the degree of parallelism.</li>
<li>Why use <code>task.ContinueWith</code> if you can call both <code>action</code> and <code>threadContinuation</code> inside the original task?</li>
<li>Why expose this task to <code>threadContinuation</code>? Whether your <code>ThreadBlock</code> uses threads, tasks or some other approach internally shouldn't matter to outside code. This prevents you from switching to a different implementation without affecting existing callers.</li>
<li>You may want to verify that <code>action</code> isn't null in the constructor, and throw an <code>ArgumentNullException</code> if it is.</li>
<li>It's recommended to make custom exception types serializable.</li>
</ul>
    </div>