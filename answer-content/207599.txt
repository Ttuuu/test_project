<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As the comments suggested, with the provided examples there's not much to code review here. If you're looking for ways to improve future development try giving this a read <a href="https://angular.io/guide/styleguide" rel="nofollow noreferrer">Angular style Guide</a>. The style guide has lots of Do's and Don'ts which read easily and help you along your way of better organizing your application.</p>

<p>Some interesting key points in the guide are</p>

<ul>
<li><a href="https://angular.io/guide/styleguide#core-feature-module" rel="nofollow noreferrer">Core Module</a></li>
<li><a href="https://angular.io/guide/styleguide#shared-feature-module" rel="nofollow noreferrer">Shared Module</a></li>
<li><a href="https://angular.io/guide/styleguide#feature-modules" rel="nofollow noreferrer">Feature Modules</a></li>
<li><a href="https://angular.io/guide/styleguide#rule-of-one" rel="nofollow noreferrer">Rule Of One</a></li>
<li><a href="https://angular.io/guide/styleguide#lift" rel="nofollow noreferrer">LIFT</a> and <a href="https://angular.io/guide/styleguide#flat" rel="nofollow noreferrer">FLAT</a></li>
</ul>

<p>The <em>Core Module</em> and <em>Shared Module</em> is useful when you want to keep your app module as clean as possible I use this to load up any "global providers" (however with Angular 6/7 this is probably going to change because of the <a href="https://angular.io/api/core/Injectable#providedIn" rel="nofollow noreferrer">ProvidedIn</a> option on <a href="https://angular.io/api/core/Injectable" rel="nofollow noreferrer">Injectables</a>.</p>

<p>The <em>Feature Module</em> is something that you'll only gain value as time goes on in the life of your project. As things begin to grow you'll notice you may need to cross share features/parts of your app. Breaking things out into their own module allows for a few things:</p>

<ul>
<li>You can have routing for that module and it can take care of its relative routing.</li>
<li>It can be lazy loaded from the "parent" routing so only the code needed to boot up will be downloaded when your user hits the app.</li>
<li>It makes it easier to find code later once your app grows.</li>
</ul>

<p>Finally I'll note that using the <a href="https://cli.angular.io/" rel="nofollow noreferrer">Angular CLI</a> can help out with a lot of these tasks of creating feature modules and components inside of them. It does a lot of nice little things for you that help speed up development.</p>

<p>Hope that helps you get some core skills with angular and develop some good clean code habits.</p>
    </div>