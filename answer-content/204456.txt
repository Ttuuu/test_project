<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Only a small review</p>

<p><strong>Alignment not guaranteed</strong></p>

<p><code>temp = (size_t*) ((char*)temp + member_size);</code> attempts to convert a <code>char*</code> to <code>size_t *</code>, yet <code>(char*)temp + member_size</code> is not known to be properly aligned for a <code>size_t*</code>.  Insufficient alignment is <em>undefined behavior</em>.</p>

<p><strong>Detect overflow</strong></p>

<p>As the true product of <code>nmemb * member_size</code> may exceed <code>SIZE_MAX</code>:</p>

<pre><code>if (SIZE_MAX/nmemb &gt; member_size) {
  Handle_Overflow();  // clean-up, return NULL;
}
... =  malloc(nmemb * member_size);
</code></pre>

<p><strong>Strange uses of <code>size_t</code> as pointer</strong></p>

<p><code>// The last member points to NULL</code> <code>*temp = (size_t)NULL;</code> implies something wrong.  If codes needs a pointer, use a pointer, not <code>size_t</code>.  If code needs a size, doesn't use a pointer.  Note that <code>size_t</code> and pointers do not necessarily covert well back and forth.  They might not be the same memory width either.</p>

<p>This use of <code>size_t</code> as a place to encode a pointer is simply broken.  Code needs a new approach.</p>
    </div>