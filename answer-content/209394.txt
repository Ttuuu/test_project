<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>We can improve readability of your code as follows:</p>

<ul>
<li><p>using type annotations partially looks incomplete, when we can be more descriptive:</p>

<pre><code>from typing import (Iterable, 
                    TypeVar)

ElementType = TypeVar('ElementType')


def iter_group(iterable: Iterable[ElementType],
               batch_size: int) -&gt; Iterable[Iterable[ElementType]]:
    ...
</code></pre></li>
<li><p>checking if object has given type should be done using <a href="https://docs.python.org/3/library/functions.html#isinstance" rel="nofollow noreferrer"><code>isinstance</code> built-in function</a>, so instead of</p>

<pre><code>iterable_type = type(iterable)
...
if iterable_type == list:
    ...
</code></pre>

<p>we can simply write</p>

<pre><code>if isinstance(iterable, list):
    ...
</code></pre>

<p>(btw I don't understand why are you treating <code>list</code> as a special case)</p></li>
<li><p>if you want negate a number then we can use <code>-</code> unary operator, no need to multiply by <code>-1</code>, so instead of</p>

<pre><code>start = batch_size * -1
</code></pre>

<p>we can write</p>

<pre><code>start = -batch_size
</code></pre></li>
<li><p>no need in parentheses for <code>while</code>-loop condition, we are not in <code>C</code>/<code>C++</code>/<code>JAVA</code>, we can simply write:</p>

<pre><code>while end &lt; length:
    ...
</code></pre></li>
<li><p>setting <code>start</code> to <code>-batch_size</code> and <code>end</code> to <code>0</code> and change them right after that seems redundant when we can set them to <code>0</code> and <code>batch_size</code> respectfully and increment at the end of the <code>while</code> loop body, so instead</p>

<pre><code>start = batch_size * -1
end = 0
while end &lt; length:
    start += batch_size
    end += batch_size
    ...
</code></pre>

<p>we can write</p>

<pre><code>start = 0
end = batch_size
while end &lt; length:
    ...
    start += batch_size
    end += batch_size
</code></pre></li>
</ul>

<hr>

<p>If I understood correctly what you are trying to achieve is to split iterable into evenly sized chunks, which is <a href="https://stackoverflow.com/questions/312443/how-do-you-split-a-list-into-evenly-sized-chunks">a well-known StackOverflow question</a>, but accepted answer works only for sequences (<code>str</code>/<code>list</code>/<code>tuple</code>) and so does your solution. For example it won't work for potentially infinite sequences like classic Fibonacci numbers generator</p>

<pre><code>&gt;&gt;&gt; def fibonacci():
        a, b = 0, 1
        while True:
            yield a
            a, b = b, a + b
&gt;&gt;&gt; next(iter_group(fibonacci(), 5))
Traceback (most recent call last):
    ...
        length = len(iterable)
TypeError: object of type 'generator' has no len()
</code></pre>

<p>If you want to work with arbitrary iterables (e.g. <code>generator</code>s), we may use <code>itertools</code> module and <a href="https://stackoverflow.com/a/22045226/5997596">this brilliant solution</a> which uses <a href="https://docs.python.org/3/library/functions.html#iter" rel="nofollow noreferrer"><code>iter</code> built-in function</a> form with sentinel value</p>

<pre><code>from itertools import islice
from typing import (Iterable,
                    Tuple,
                    TypeVar)

ElementType = TypeVar('ElementType')


def chunks(iterable: Iterable[ElementType],
           batch_size: int) -&gt; Iterable[Tuple[ElementType, ...]]:
    iterator = iter(iterable)
    return iter(lambda: tuple(islice(iterator, batch_size)), ())
</code></pre>

<p>but if we make a simple benchmark with</p>

<pre><code>def sequence_chunks(iterable: Sequence[ElementType],
                    batch_size: int) -&gt; Iterable[Sequence[ElementType]]:
    for start in range(0, len(iterable), batch_size):
        yield iterable[start:start + batch_size]
</code></pre>

<p>like</p>

<pre><code>import timeit

...
print('original solution',
      min(timeit.repeat('list(iter_group(iterable, 1000))',
                        'from __main__ import iter_group\n'
                        'iterable = range(0, 10001)',
                        number=10000)))
print('Ned Batchelder\'s solution',
      min(timeit.repeat('list(sequence_chunks(iterable, 1000))',
                        'from __main__ import sequence_chunks\n'
                        'iterable = range(0, 10001)',
                        number=10000)))
print('senderle\'s solution',
      min(timeit.repeat('list(chunks(iterable, 1000))',
                        'from __main__ import chunks\n'
                        'iterable = range(0, 10001)',
                        number=10000)))
</code></pre>

<p>on my laptop with Windows 10 and Python 3.5 we'll have</p>

<pre><code>original solution 0.07320549999999999
Ned Batchelder's solution 0.06249870000000002
senderle's solution 2.6072023999999994
</code></pre>

<p>so how can we have both speed and handle cases with non-sequence iterables?</p>

<p>Here comes <code>functools</code> module with <a href="https://docs.python.org/3/library/functools.html#functools.singledispatch" rel="nofollow noreferrer"><code>singledispatch</code> function decorator</a>. We can use it like</p>

<pre><code>import timeit
from collections import abc
from functools import singledispatch
from itertools import islice
from typing import (Iterable,
                    Sequence,
                    TypeVar)

ElementType = TypeVar('ElementType')


@singledispatch
def chunks(iterable: Iterable[ElementType],
           batch_size: int) -&gt; Iterable[Iterable[ElementType]]:
    iterator = iter(iterable)
    return iter(lambda: tuple(islice(iterator, batch_size)), ())


@chunks.register(abc.Sequence)
def sequence_chunks(iterable: Sequence[ElementType],
                    batch_size: int) -&gt; Iterable[Iterable[ElementType]]:
    for start in range(0, len(iterable), batch_size):
        yield iterable[start:start + batch_size]
</code></pre>

<p>after that call to <code>chunks</code> will end up in <code>sequence_chunks</code> for sequences and in general <code>chunks</code> for all other cases.</p>

<p>But</p>

<pre><code>print('single-dispatched solution',
      min(timeit.repeat('list(chunks(iterable, 1000))',
                        'from __main__ import chunks\n'
                        'iterable = range(0, 10001)',
                        number=10000)))
</code></pre>

<p>gives</p>

<pre><code>single-dispatched solution 0.0737681
</code></pre>

<p>so we lose some time during dispatching, but we can save some time and space if we will use <code>itertools.islice</code> for sequences as well like</p>

<pre><code>@chunks.register(abc.Sequence)
def sequence_chunks(iterable: Sequence[ElementType],
                    batch_size: int) -&gt; Iterable[Iterable[ElementType]]:
    iterator = iter(iterable)
    for _ in range(ceil_division(len(iterable), batch_size)):
        yield islice(iterator, batch_size)


def ceil_division(left_number: int, right_number: int) -&gt; int:
    """
    Divides given numbers with ceiling.
    """
    # based on https://stackoverflow.com/a/17511341/5997596
    return -(-left_number // right_number)
</code></pre>

<p>which gives</p>

<pre><code>complete single-dispatched solution 0.03895900000000002
</code></pre>

<h1>P.S.</h1>

<p>@AJNeufeld's solution gives </p>

<pre><code>0.0647120000000001
</code></pre>

<p>on my laptop</p>
    </div>