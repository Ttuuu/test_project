<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>AlexV has made some great points.  I’ll try not to duplicate them.</p>

<pre><code>while numbers[current_prime] &lt;= sqrt_limit:
</code></pre>

<p>This seems like odd code.  <code>numbers[x] == x</code> is true, or <code>numbers[x] == -1</code> is true.  You should save the indirect lookup in the <code>numbers</code> array, and just loop:</p>

<pre><code>while current_prime &lt;= sqrt_limit:
</code></pre>

<p>You take great pains to explain in a comment that <code>len(numbers) == n+1</code>, but then you evaluate <code>len(numbers)-1</code> anyway.  It is just <code>n</code>.  So you could simply write:</p>

<pre><code>for i in range(current_prime, n // current_prime + 1):
    numbers[current_prime * i] = -1
</code></pre>

<p>Now, <code>i</code> starts at <code>current_prime</code>, and goes up to the last multiplier that results in <code>current_prime * i</code> still being within the bounds of the <code>numbers</code> list.  You could simply use the <code>range()</code> method to count by multiples of <code>current_prime</code>, and let it figure out when it has gone beyond the limit for you:</p>

<pre><code>for index in range(current_prime*current_prime, n+1, current_prime):
    numbers[index] = -1
</code></pre>

<p>Your summary loop at the end is not Pythonic:</p>

<pre><code>for i in range(len(numbers)):
    # code which only uses numbers[i], never i on its own.
</code></pre>

<p>Instead of looping over the indices of the <code>numbers</code> list, you simply want to loop over the values of the list.</p>

<pre><code>j = 0
for value in numbers:
    if value &gt; 0:
        numbers[j] = value
        j += 1
</code></pre>

<p>But this loop is simply filtering values from one list into another list (although you are reusing the original list to store the new list).  Python excels at filtering lists, using list comprehension.  The above code can be written simply as:</p>

<pre><code>numbers = [ value for value in numbers if value &gt; 0 ]
</code></pre>

<p>Which you could then follow by:</p>

<pre><code>return numbers[1:]
</code></pre>

<p>to trim off the first value of the list.</p>

<hr>

<p>There are a number of things which you can do to further improve the performance.  The easiest would be to special case “2” as prime, and then start at 3 and count by 2’s to skip over the even numbers.  When clearing out multiples of <code>prime_number</code>, you would again skip the even multiples by incrementing the index by <code>2*prime_number</code>, approximately doubling the speed of the algorithm by cutting the work in half.</p>

<hr>

<h1>Memory</h1>

<p>Python is a great scripting language, but that ease of use comes with a cost.  Everything is an object, and the Python environment manages the object allocation for you.  This results in a lot of memory usage per object.  With a few thousand objects, that isn't a problem.  With hundreds of millions, that overhead starts to have a serious impact.</p>

<pre><code>&gt;&gt;&gt; sys.getsizeof(0)
24
&gt;&gt;&gt; sys.getsizeof(1)
28
&gt;&gt;&gt; sys.getsizeof(0x3fffffff)
28
&gt;&gt;&gt; sys.getsizeof(0x40000000)
32
</code></pre>

<p>Positive integers between 1 and 1.07 billion take up 28 bytes each.  If you have a list of the first billion integers, you're going to need 28 GB of memory for those integers.  Plus ...</p>

<pre><code>&gt;&gt;&gt; sys.getsizeof([])
64
&gt;&gt;&gt; sys.getsizeof([0])
72
&gt;&gt;&gt; sys.getsizeof([0,1])
80
&gt;&gt;&gt; sys.getsizeof([0,1,2])
88
</code></pre>

<p>... a list takes 64 bytes, plus 8 per object in the list.  So the list of a billion entries is going to take an addition 8 GB of memory, for a total of 36 GB!</p>

<p>Instead of storing integer objects in a list, we can be way more efficient if we ask Python to store integers directly in an <a href="https://docs.python.org/3/library/array.html" rel="nofollow noreferrer">array</a>.</p>

<pre><code>&gt;&gt;&gt; import array
&gt;&gt;&gt; a = array.array('L', [0]*1000000000)
&gt;&gt;&gt; sys.getsizeof(a)
4000000064
</code></pre>

<p><code>a</code> is an array of 4-byte unsigned integers.  And it only requires a mere 4 GB of memory.</p>

<p>As pointed out by @Graipher, you don't need to store the integers in the array for the sieve; you can simply store boolean flags.  The <code>array.array</code> object is designed for numbers, not booleans, but we can store <code>True</code> and <code>False</code> as a <code>1</code> and a <code>0</code>, in which case we only need 1 byte integers, so we can reduce the memory requirements down to 1 GB.</p>

<pre><code>&gt;&gt;&gt; a = array.array('B', [0, 1]*500000000)
&gt;&gt;&gt; a[0:10]
array('B', [0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
&gt;&gt;&gt; sys.getsizeof(a)
1000000064
</code></pre>

<p>Instead of filling in the memory with a billion 0's, I've initialized all the odd elements to <code>1</code>, for possibly prime, and <code>0</code> for the even elements, for not possibly prime.  We just need a minor correction, so <code>a[1]</code> is flagged as not prime, and <code>a[2]</code> is prime.</p>

<p><code>array.array</code> is overly complex for this issue; it has to do calculation based on the size of the elements.  Since we are storing individual flags in bytes, a <code>bytearray</code> should be faster:</p>

<pre><code>&gt;&gt;&gt; a = bytearray(1000000000)
&gt;&gt;&gt; a[1::2] = [1]*500000000         # Mark odd numbers as possible prime
&gt;&gt;&gt; a[1:3] = [0, 1]                 # Mark 1 as not prime, 2 as prime
&gt;&gt;&gt; list(a[0:20])
[0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1]
&gt;&gt;&gt; sys.getsizeof(a)
1000000057
</code></pre>

<p>Now you can proceed with your sieve, testing only odd numbers, and marking as not prime only the odd multiples of a prime number, start with its square, up to the end of the sieve:</p>

<pre><code>for i in range(3, int(sqrt(1000000000)), 2):
    if a[i]:
        a[i*i::2*i] = bytes(len(a[i*i::2*i]))
</code></pre>

<p>How many primes do you have?  Just add up all of the <code>1</code> flags!</p>

<pre><code>n = sum(a)
</code></pre>

<p>Where are you going to store these?  How about in an <code>array</code> object, for efficiency?  Since the prime number will go up to 1 billion, we'll again need 4-byte integer storage.</p>

<pre><code>primes = array.array('L', (i for i, flag in enumerate(a) if flag))
</code></pre>

<hr>

<pre><code>import array, math, time

#n = 100
#n = 1000000
#n = 100000000
n = 1000000000

start = time.perf_counter()
a = bytearray(n)
a[1::2] = [1]*len(a[1::2])
a[1:3] = [0, 1]

for i in range(3, int(math.sqrt(n)), 2):
    if a[i]:
        a[i*i::2*i] = bytes(len(a[i*i::2*i]))

primes = array.array('L', (i for i, flag in enumerate(a) if flag))

end = time.perf_counter()
mins, secs = divmod(end - start, 60)

count = len(primes)
print(f"Found {count} primes below {n} in {int(mins)}m:{secs:06.3f}s")
if count &lt; 30:
    print(primes)
</code></pre>

<p>Results:</p>

<pre><code>Found 78498 primes below 1000000 in 0m:00.071s
Found 5761455 primes below 100000000 in 0m:06.623s
Found 50847534 primes below 1000000000 in 1m:09.585s
</code></pre>

<p>If our machine speeds are comparable, this sample point would fall between the eratos_sieve_jit (orange) and prime_sieve2_ (red) in @Graipher's plot.</p>
    </div>