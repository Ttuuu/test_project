<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3><em>Boosting time performance:</em></h3>

<p>Starting with minor naming issues:
<code>maxi</code> is better named as <strong><code>max_len</code></strong> (as stated in comment). <code>maxi_d</code> is renamed to <strong><code>max_d</code></strong>.<br>
It's good to move the processing into a separate function, called like <strong><code>calc_longest_recur_cycle</code></strong>.</p>

<p>The main <em>time-performance</em> hits in your implementation is caused by <strong><code>quotient</code></strong> list and its expensive <em>list</em> operations:</p>

<ul>
<li><code>quotient.append</code></li>
<li><code>quotient.index</code></li>
<li><code>cur_value not in quotient</code></li>
</ul>

<p>According to that fact that <code>quotient</code> and <code>len_recur</code> are reset on each outer <code>for</code> loop iteration and on the level of <code>while</code> loop the fragment</p>

<pre><code>len_recur += 1
quotient.append(cur_value)
</code></pre>

<p>tells that <code>cur_value</code> is appended synchronously with incrementing <code>len_recur</code> i.e. the <code>cur_value</code> will get the position equal to <code>len_recur</code>. That means that, on this level, <code>cur_value</code> can be <strong>mapped</strong> to its position contained in <code>len_recur</code>.<br>Thus, <code>quotient</code> is initiated as dictionary (instead of list): <strong><code>quotient = {}</code></strong> or even <strong><code>quotient = {0: 0}</code></strong> as <a href="https://codereview.stackexchange.com/users/100620/ajneufeld"><code>AJNeufeld</code></a> suggested to eliminate <code>cur_value</code> evaluation on the <code>while</code> loop condition. </p>

<hr>

<p>The construction:</p>

<pre><code>while cur_value not in quotient:
    if not cur_value:  # If the value is not recurring:
        break
</code></pre>

<p>is essentially a verbose equivalent to:</p>

<pre><code>while cur_value and cur_value not in quotient:
</code></pre>

<hr>

<p><em>List</em> indexing </p>

<pre><code>len_recur -= quotient.index(cur_value) + 1 
</code></pre>

<p>is now efficiently replaced with <em>dict</em> indexing (where values are <em>positions</em>)</p>

<pre><code>len_recur -= quotient[cur_value]
</code></pre>

<hr>

<p>Now, with <code>quotient</code> as <code>dict</code>, we have <strong><em>O(1)</em></strong> complexity for <em>membership check</em> (<code>cur_value not in quotient</code>) and <em>indexing</em> operation (<code>len_recur -= quotient[cur_value]</code>)</p>

<p>The final version:</p>

<pre><code>LIMIT = 5000

def calc_longest_recur_cycle():
    max_len = 0   # The maximum length
    max_d = 1     # The 'd' that has maximum length

    for d in range(1, LIMIT):
        quotient = {0: 0}  # Stores the decimal quotient
        cur_value = 1      # Variable used to perform division as if by hand
        len_recur = 0      # Recurring length

        # Performing division as if by hand
        while cur_value not in quotient:  # while the value is not recurring
            len_recur += 1
            quotient[cur_value] = len_recur
            cur_value = (cur_value % d) * 10

        if not cur_value:
            continue

        # Remove number of values that do not recur
        len_recur -= quotient[cur_value]
        # quotient.clear()

        if len_recur &gt; max_len:
            max_len = len_recur
            max_d = d

    return max_d
</code></pre>

<hr>

<p>What needs to be mentioned is that despite of its <em>fast nature</em> <code>dict</code> would take more space than <code>list</code>, but only at the time of one nominal loop iteration as it's reset and last <code>quotient</code> filled at the end will be garbage-collected on function exit.</p>

<p>Let's get to tests.<br>
I've increased limit to <strong><code>LIMIT = 5000</code></strong> to <em>"turn up the heat"</em> and have put the "old" implementation into separate function <code>calc_recur_cycle_old</code> for comparison.<br>
As for resulting <code>max_d</code> value - both functions return the same result:</p>

<pre><code>print(calc_recur_cycle_old())      # 4967
print(calc_longest_recur_cycle())  # 4967
</code></pre>

<p>And the most interesting <em>time performance</em> comparison:</p>

<pre><code>from timeit import timeit

print(timeit('calc_recur_cycle_old()', 'from __main__ import calc_recur_cycle_old', number=1))
19.648109548998036

print(timeit('calc_longest_recur_cycle()', 'from __main__ import calc_longest_recur_cycle', number=1))
0.26926991600339534
</code></pre>

<p>The end ... )</p>
    </div>