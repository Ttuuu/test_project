<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Overview</h2>
<p>Your code definitely leaks nodes. You should fix this in the destructor of <code>LinkedList</code>.</p>
<p>You don't implement move semantics. Which means that you can only copy and this will be less efficient in most cases.</p>
<p>You return access to your internal structures of your class. This means you have not protected the structure from external interference and thus have not protected your class (why are you using C++ may as well use PERL).</p>
<p>You have a copy assignment operator but not a copy constructor. Sure this is possible but normally these are symmetric operations.</p>
<p>You are creating a singly linked list. It is not that much harder to crate a doubly linked list. Also using a doubly linked list makes inserting and removal of items from the list much easier to write.</p>
<h2>Code Review</h2>
<p>The struct <code>Node</code> is part of the <code>LinkedList</code> class. There is no need to expose it (this exposes users to implementation details they don't need to know).</p>
<p>You add a constructor and assignment operator. But these operations don't do anything special and the default versions do exactly the same. So you may as well not explicitly write them.</p>
<pre><code>Example:

    template&lt;typename T&gt;
    struct LokiNode
    {
          Node* next;
          Node* prev;
          int   value;
    };

    LokiNode x{nullptr, nullptr, 10}; // Works as expected.
    LokiNode y{x};                    // Works as expected.
    LokiNode z;                       // Uninitialized value.
    z = y;                            // Works as expected;
</code></pre>
<hr>
<p>I don't like this:</p>
<pre><code>    Node() {
        NextPtr = nullptr;
    }
</code></pre>
<p>It allows you to create a Node that can be partially initialized. This means that you can potentially fall into UB if code reads the <code>Data</code> value.</p>
<hr>
<p>Naming: It is traditional in C++. That object/method names begin with a lowercase letter and user defined types begin with an uppercase letter.</p>
<pre><code>T     Data;                  // I would make this data
Node* NextPtr = nullptr;     // I would make this next (I would drop Ptr)
</code></pre>
<p>This allows you to quickly and easily deferential types from objects which in C++ is an important distiction.</p>
<hr>
<p>Prefer to use the initializer list:</p>
<pre><code>    Node(T Filler, Node* NextPtrAr) {
        Data = Filler;
        NextPtr = NextPtrAr;
    }
</code></pre>
<p>In this case it makes no different. But if you do it like this all the time you may get into this bad habbit. This will cause issues if one of the members is expensive to initialize and re-initialization may double that code.</p>
<pre><code>    Node(T Filler, Node* NextPtrAr)
        : Data{Filler}
        , NextPtr{NextPtrAr}
    {}
</code></pre>
<hr>
<p>It is traditional for the assignment operator to return a reference to self.</p>
<pre><code>    void operator =(Node NAr) {
    }

    Node&amp; operator=(Node n)
    {
         // STUFF
         return *this;
    }
</code></pre>
<p>Not essential but people will wonder why you are doing it funny. By returning a reference to self you allow assignment chaining which makes the usage to similar to built in types (and thus easier to use).</p>
<hr>
<p>Protected is a terrible thing stop using it.</p>
<pre><code>protected:
    unsigned int Size = 0;
    void SetSize(unsigned int SizeAr);
</code></pre>
<p>Member variables should definitely be private (unless you have a very good and documentable reason not to make it private).</p>
<p>Member methods can by protected, but simply subverts the protection mechanism. This is only really useful where this is a non concreate base class where other people would never use it. i.e. this class provides some basic functionality but is not the final class. A derived class may inherit from this and provides the real class that a user would have.</p>
<hr>
<p>This look like a bug.</p>
<pre><code>    Node&lt;T&gt; Head;
    Node&lt;T&gt; Tail;
</code></pre>
<p>This means your list always has two members (a head and tail that are different). Your list is never empty? What I think you want are two pointers to the head and tail of the list.</p>
<pre><code>    Node&lt;T&gt;* Head;
    Node&lt;T&gt;* Tail;
</code></pre>
<p>Now a head and tail can be nullptr to represent the empty list.</p>
<hr>
<p>Fine set of constructors:</p>
<pre><code>    LinkedList();
    LinkedList(T Filler, unsigned int NbrOfElem = 1);
    LinkedList(std::initializer_list&lt;T&gt; List);
</code></pre>
<p>But I don't see a destructor. This is a bug. In a list you must dynamically allocate the elements in the list. I don't see a destructor in the <code>Node</code> so this destructor must do some work to tidy up that dynamic allocation.</p>
<hr>
<p>Const correctness:</p>
<p>This function does not change the state of the object.</p>
<pre><code>    unsigned int GetSize();
</code></pre>
<p>As a result you should probably mark it as <code>const</code> so it can be called from a const context (ie passed by const reference to a method). Also size type functions we usually specify this in terms of <code>std::size_t</code> to indicate this is a size. This also applies to index operations.</p>
<pre><code>    std::size_t GetSize() const;
</code></pre>
<hr>
<p>That's interesting:</p>
<pre><code>    void operator=(std::initializer_list&lt;T&gt; List);
</code></pre>
<p>Sure. You can do this. But can you not achieve the same affect by using constructor and assignment operator:</p>
<pre><code>    LinkedList&lt;int&gt;    x;

    x = {1,2,3,4};   // This calls your assignment operator.
</code></pre>
<p>But if you did not have this assignment operator what would it do?</p>
<pre><code>    x = {1,2,3,4};   // Different types in assignment.
                     // but there is a one parameter constructor that will
                     // convert an initializer list into a LinkedList. So
                     // the compiler will call this constructor to convert
                     // the initializer list into a LinkedList&lt;int&gt; type.
                     //
                     // We can then apply the normal assignment operator to 
                     // copy (or move) the new object to the original `x`.
                     //
                     // Note: Because of copy elision optimization
                     //       We can optimize away the copy if needed or
                     //       simply use the move assignment operator.
</code></pre>
<hr>
<p>Sure I don't mind the use of <code>NodeAt()</code>. Though if you look in the standard library functions like this are simply called <code>at()</code></p>
<pre><code>    Node&lt;T&gt;&amp; operator[](unsigned int Index);
    Node&lt;T&gt;&amp; NodeAt(unsigned int Index);
</code></pre>
<hr>
<p>You can simply set the size!</p>
<pre><code>template&lt;typename T&gt;
void LinkedList&lt;T&gt;::SetSize(unsigned int SizeAr) {
    Size = SizeAr;
}
</code></pre>
<p>I would expect you have to add the appropriate number of elements into the list.</p>
<hr>
<p>This is overly complex because you are not using pointers for head and tail.</p>
<pre><code>template&lt;typename T&gt;
LinkedList&lt;T&gt;::LinkedList(T Filler, unsigned int NbrOfElem) {
    if (NbrOfElem==1)
    {
        Head.Data = Filler;
        SetSize(1);
    }
    else if(NbrOfElem==2)
    {
        Head.Data = Filler;
        Tail.Data = Filler;
        Head.NextPtr = &amp;Tail;
        SetSize(2);
    }
    else
    {
        Node&lt;T&gt;* TempNextPtr=new Node&lt;T&gt;;
        Head.Data = Filler;
        Head.NextPtr = TempNextPtr;
        for (int i = 0; i &lt; NbrOfElem - 1; i++)
        {
            Node&lt;T&gt;* NewNode = TempNextPtr;
            TempNextPtr = new Node&lt;T&gt;;
            NewNode-&gt;Data = Filler;
            NewNode-&gt;NextPtr = TempNextPtr;
        }
        Tail.Data = Filler;
        SetSize(NbrOfElem);
    }
}
</code></pre>
<p>I would simply write this (assuming head/tail are pointers).</p>
<pre><code>template&lt;typename T&gt;
LinkedList&lt;T&gt;::LinkedList(T Filler, unsigned int NbrOfElem)
    : Head(nullptr)
    , Tail(nullptr)
{
    for(int loop = 0; loop &lt; NbrOfElem; ++loop) {
        Head = new Node&lt;T&gt;{Filler, Head};
        if (Tail == nullptr) {
            Tail = Head;
        }
    }
}
</code></pre>
<hr>
<p>Normally in C++ <code>operator[]</code> is unchecked accesses into the container. While <code>at()</code> is the checked accesses into the container. You use them both as checked. Personally I would not bother but you can.</p>
<p>If you want both to be checked then one of these two should call the other.</p>
<pre><code>template&lt;typename T&gt;
Node&lt;T&gt;&amp; LinkedList&lt;T&gt;::operator[](unsigned int Index) {
    if (Index &gt;= Size - 1)
    {
        return Tail;
    }
</code></pre>
<hr>
<p>Why are you returning a <code>Node</code>!!!</p>
<pre><code>template&lt;typename T&gt;
Node&lt;T&gt;&amp; LinkedList&lt;T&gt;::operator[](unsigned int Index) {
</code></pre>
<p>You are giving people access to the internal types of your class. This will allow them (actually encourage) them to modify your internal structures. You should be returning the element stored at that location.</p>
<pre><code>template&lt;typename T&gt;
T&amp;       LinkedList&lt;T&gt;::operator[](unsigned int Index);
template&lt;typename T&gt;
T const&amp; LinkedList&lt;T&gt;::operator[](unsigned int Index) const;
</code></pre>
<hr>
<p>You have marked this as a functionality</p>
<pre><code>    //Clear
    for (int i=1;i&lt;Size-1;i++)
    {
        delete&amp; NodeAt(i);
    }
</code></pre>
<p>Why not make that explicit and make it a new method?</p>
<hr>
<p>You have marked this as a functionality</p>
<pre><code>    //Fill
    Head.Data = List.Head.Data;
    Head.NextPtr = new Node&lt;T&gt;;
    Tail.Data = List.Tail.Data;
    for (int i = 1; i &lt; List.GetSize() - 1; i++)
    {
        Node&lt;T&gt;* NewNode = NodeAt(i - 1).NextPtr;
        NewNode-&gt;Data = List[i].Data;
        NewNode-&gt;NextPtr = new Node&lt;T&gt;;
    }
</code></pre>
<p>Why not make that explicit and make it a new method?</p>
<hr>
<p>In this question <a href="https://codereview.stackexchange.com/a/126007/507">My first implementation of a linked list in C++</a> I have provided a review of another linked list. Scroll to the bottom of my answer and there is a reference implementation. Please have a look.</p>
<h2>Simplified List</h2>
<pre><code>template&lt;typename T&gt;
class LinkedList
{
    struct Node
    {
        T       data;
        Node*   prev;
        Node*   next;
    };

    Node*       head;
    Node*       tail;
    std::size_t length;

    public:
        LinkedList()            // Default Constructor
            : head(nullptr)
            , tail(nullptr)
            , length(0)
        {}
        // Have to release all the nodes in a destructor
        ~LinkedList()
        {
            for (Node* loop = head; loop != nullptr;) {
                Node* old = loop;
                loop = loop-&gt;next;
                delete old;
            }
        }
        // Copy Constructor and Assignment.
        LinkedList(LinkedList const&amp; copy)
            : head(nullptr)
            , tail(nullptr)
            , length(0)
        {
            // Loop over the other list.
            // Simply push each element into this list.
            for (Node* loop = copy.head; loop != nullptr; loop = loop-&gt;next) {
                push_back(loop-&gt;data);
            }
        }
        LinkedList&amp; operator=(LinkedList const&amp; rhs)
        {
            // Use the copy and swap idiom to do assignment.

            // 1. Copy the list using the copy constructor.
            LinkedList  copy(rhs);

            // 2. Swap the copy with the current object.
            swap(copy);

            // 3. When we go out of scope the `copy` object is
            //    destroyed. This releases the old object list
            return *this;
        }
        // Move Constructor and Assignment
        // For now we delete these. But we will␣
        // come back to this later.
        LinkedList(LinkedList&amp;&amp;) noexcept            = delete;
        LinkedList&amp; operator=(LinkedList&amp;&amp;) noexcept = delete;

        // Swap
        // We want to swap two objects of type Linked List.
        void swap(LinkedList const&amp; rhs) noexcept
        {
            std::swap(head, rhs.head);
            std::swap(tail, rhs.tail);
        }
        void push_back(T const&amp; value)
        {
            if (tail) {
                // If the list is not empty add it to the back.
                // Simply create the node linked to the tail and
                // then move the tail to the new tail node.
                tail-&gt;next = new Node{value, tail, nullptr};
                tail = tail-&gt;next;
            }
            else {
                // If the list is empty.
                // Then the new node is both the head and tail
                head = tail = new Node{value, nullptr, nullptr};
            }
            ++length;
        }
        void pop_back()
        {
            if (tail) {
                // Keep track of the old value.
                Node* old = tail;

                // Remove the last element from the list
                tail = tail-&gt;prev;
                tail-&gt;next = nullptr;
                --length;

                // Tidy up. Delete the old element.
                delete old;
            }
        }
        std::size_t size() const    {return length;}
        T const&amp; back() const       {return tail-&gt;data;}
        T&amp;       back()             {return tail-&gt;data;}

        // I leave the following easy to implement methods for you.

        // Front version equivalent of the back methods.
        void push_front(T&amp;);
        void pop_front();
        T const&amp; front() const;
        T&amp;       front();

        // Unchecked accesses.
        T const&amp; operator[](std::size_t index) const;
        T&amp;       operator[](std::size_t index);

        // Checked accesses.
        T const&amp; at(std::size_t index) const;
        T&amp;       at(std::size_t index);
};

int main()
{
    LinkedList&lt;int&gt;     list;
    list.push_back(1);
    list.push_back(2);
    list.push_back(3);
    list.push_back(4);
    list.push_back(5);

    LinkedList&lt;int&gt;     second(list);
    std::cout &lt;&lt; second.back();
    second.pop_back();
    second.pop_back();
    std::cout &lt;&lt; second.back();
}
</code></pre>
    </div>