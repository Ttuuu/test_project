<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Note that the <em>purpose</em> of the <code>hex()</code> function is to produce a hexadecimal integer literal (a string that can be used in Python source code), which is why it returns a hex value with the <code>0x</code> prefix. Use the <a href="https://docs.python.org/library/functions.html#format" rel="nofollow noreferrer"><code>format()</code> function</a> instead, as it gives you much more control over the output.</p>

<p>For example, <code>format(value, '012x')</code> formats the integer value to a 12-digit hexadecimal (using lowercase digits), padding out the result to the minimum width with leading zeros as needed:</p>

<pre><code>&gt;&gt;&gt; mac_value = 0x237702d2ff9b
&gt;&gt;&gt; format(mac_value, '012x')
'237702d2ff9b'
&gt;&gt;&gt; format(42, '012x')
'00000000002a'
</code></pre>

<p>In this case, I'd actually split out the various bytes of the MAC address binary value that make up the IPv6 parts, and use <a href="https://docs.python.org/library/stdtypes.html#str.format" rel="nofollow noreferrer"><code>str.format()</code></a> to interpolate those into the IPv6 string.</p>

<pre><code>def mac_to_ipv6_linklocal(mac):
    # Remove the most common delimiters; dots, dashes, etc.
    mac_value = int(mac.translate(None, ' .:-'), 16)

    # Split out the bytes that slot into the IPv6 address
    # XOR the most significant byte with 0x02, inverting the 
    # Universal / Local bit
    high2 = mac_value &gt;&gt; 32 &amp; 0xffff ^ 0x0200
    high1 = mac_value &gt;&gt; 24 &amp; 0xff
    low1 = mac_value &gt;&gt; 16 &amp; 0xff
    low2 = mac_value &amp; 0xffff

    return 'fe80::{:04x}:{:02x}ff:fe{:02x}:{:04x}'.format(
        high2, high1, low1, low2)
</code></pre>

<p>I followed the <a href="http://legacy.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP 8 whitespace recommendations</a> to format the code here; whitespace around operators and after commas, for example.</p>

<p>In Python, we usually don't strive for <em>shorter</em> code; we aim for <em>readable</em> code. Sometimes you can express an algorithm in a very concise and readable way, but avoid code-golfing for the sake of compactness.</p>

<p>Python 3.3 added a <a href="https://docs.python.org/3/library/ipaddress.html" rel="nofollow noreferrer"><code>ipaddress</code> module</a>; this module does not however include a utility to generate an IPv6 address from a given MAC address.</p>
    </div>