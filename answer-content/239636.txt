<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>By default mypy doesn't test much. This is because a large part of its philosophy is to allow dynamic and statically typed code at the same time. This is so migrating to mypy is easier and less daunting. Having thousands of errors when you start to port your legacy app is likely to scare a fair few mortals away.</p>

<p>Please use the <code>--strict</code> flag to have typed Python, rather than hybrid Python.</p>

<p>When you use the flag and you type all the functions and methods, you'll notice that there's an issue with <code>Node.prior_node</code>. Currently it's assigned the type <code>Node</code>, but we know that's a lie because we have <code>if prior_node is None</code>.</p></li>
<li><p>I personally use <code>--ignore-missing-imports</code> rather than ignoring each import, as they quickly build up over time.</p></li>
<li><p>Your <code>__repr__</code> are <a href="https://docs.python.org/3/reference/datamodel.html#object.__repr__" rel="nofollow noreferrer">non standard</a>.</p>

<blockquote>
  <p>Called by the <a href="https://docs.python.org/3/library/functions.html#repr" rel="nofollow noreferrer">repr()</a> built-in function to compute the “official” string representation of an object. If at all possible, this should look like a valid Python expression that could be used to recreate an object with the same value (given an appropriate environment). If this is not possible, a string of the form <code>&lt;...some useful description...&gt;</code> should be returned.</p>
</blockquote>

<p>You probably want to be using <a href="https://docs.python.org/3/reference/datamodel.html#object.__str__" rel="nofollow noreferrer"><code>__str__</code></a>.</p></li>
<li><p>I find it a little confusing that <code>init_vector</code> is being assigned two different things. It would make more sense if you pass in an empty bytes to <code>_ensure_byte_length</code>.</p>

<pre class="lang-py prettyprint-override"><code>prior_hash = b'' if prior_node is None else prior_node.hash
init_vector = _ensure_byte_length(prior_hash, 16)
</code></pre>

<p>You could change the ternary into a <code>getattr</code>.</p>

<pre class="lang-py prettyprint-override"><code>prior_hash = getattr(prior_hash, 'hash', b'')
</code></pre></li>
<li><p>I would change <code>Node</code> to a <a href="https://docs.python.org/3/library/dataclasses.html" rel="nofollow noreferrer">dataclass</a>. Why write code when you can just not?</p>

<p>This would require moving the hash generation into a class method.</p></li>
<li><p>I would define an <code>__iter__</code> method on the node so that we can easily traverse the chain from any node.</p>

<p>This makes the <code>__len__</code> method of <code>Chain</code> really simple and clean.</p></li>
<li><p>I'd rename <code>_ensure_byte_length</code> to <code>_pad</code>. The function has two jobs, pad is well known and allows us to have a much shorter function name.</p></li>
<li><code>_ensure_byte_length</code> doesn't need the extra <code>bytes</code> call.</li>
<li>The method <code>Chain.add_node</code> is un-Pythonic. In Python it's standard to return nothing from a function with mutations.</li>
</ol>

<pre class="lang-py prettyprint-override"><code>from __future__ import annotations

import dataclasses
from typing import Optional, Iterator

from oscrypto.symmetric import aes_cbc_pkcs7_encrypt as encrypt


@dataclasses.dataclass
class Node:
    prev_node: Optional[Node]
    data: bytes
    hash: bytes

    @classmethod
    def build(cls, key: bytes, data: bytes, prev_node: Optional[Node] = None) -&gt; Node:
        prev_hash = b"" if prev_node is None else prev_node.hash
        hash = encrypt(_pad(key, 32), data, _pad(prev_hash, 16))[1]
        return cls(prev_node, data, hash)

    def __iter__(self) -&gt; Iterator[Node]:
        node: Optional[Node] = self
        while node is not None:
            yield node
            node = node.prev_node


def _pad(bytes_: bytes, length: int) -&gt; bytes:
    return bytes_.ljust(length, b"\x00")[:length]


@dataclasses.dataclass
class Chain:
    node: Node

    def add_node(self, key: bytes, data: bytes) -&gt; None:
        self.node = Node.build(key, data, self.node)

    def __len__(self) -&gt; int:
        return sum(1 for _ in self.node)


def main() -&gt; None:
    chain = Chain(Node.build(b"the key", b"here is a bit of data"))
    chain.add_node(b"P@$$w0rd", b"and here is a bit more data")
    chain.add_node(b"hunter2", b"and finally here is some more")
    print(chain)


if __name__ == "__main__":
    main()
</code></pre>
    </div>