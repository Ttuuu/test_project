<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>UPDATE: Second Review</strong></p>

<p>In my first review I said that your code may not be correct because you did not provide a pig latin specification, the algorithm used looked peculiar. I asked the you to post your pig latin specification. You did not do so. I found your pig latin specification anyway. Your code is not correct.</p>

<p>The pig latin specification rules say that consonant sounds can be made up of a consonant cluster. Your code does not identify consonant clusters. Instead, you hard-code consonant clusters which occur in the test suite as string literals, for example, "thr", and so on.</p>

<p>For example, if you add this test to the test suite, it will fail.</p>

<pre><code>{
    description: "spl consonant cluster",
    input:       "split",
    expected:    "itsplay",
},
</code></pre>

<hr>

<p><strong>First Review</strong></p>

<hr>

<p>This is a real-world code review: Code should be correct, maintainable, robust, reasonably efficient, and, most importantly, readable.</p>

<hr>

<p>Your code fails the correctness test. </p>

<p>Pig (hog) latin is not well-defined. There are several variations. For example, <a href="https://en.wikipedia.org/wiki/Pig_Latin" rel="nofollow noreferrer">Pig Latin - Wikipedia</a>. Without a link to the pig latin rules that you used for your code, we have no way to verify that your interpretation and code are correct.</p>

<p>Post a link in your question to the pig latin rules that you used for your code.</p>

<hr>

<p>Writing tests is pointless if you don't run them. <code>Sentence</code> is undefined.</p>

<pre><code>if pl := Sentence(test.input); pl != test.expected {

igpay$ go test
./igpay_test.go: undefined: Sentence
igpay$ 
</code></pre>

<hr>

<p>You write:</p>

<pre><code>result := make([]string, len(words))
</code></pre>

<p>which is equivalent to</p>

<pre><code>result := make([]string, len(words, len(words))
</code></pre>

<p>Then you execute statements like</p>

<pre><code>result = append(result, piggify(word, 1))
</code></pre>

<p>Then you ignore the bug with <code>strings.TrimLeft()</code></p>

<pre><code>return strings.TrimLeft(strings.Join(result, " "), " ")
</code></pre>

<p>Don't ignore bugs; fix bugs.</p>

<p>Write</p>

<pre><code>result := make([]string, 0, len(words))
</code></pre>

<p>and</p>

<pre><code>return strings.Join(result, " ")
</code></pre>

<p>Read the relevant documentation:</p>

<p><a href="https://golang.org/ref/spec" rel="nofollow noreferrer">The Go Programming Language Specification</a> : </p>

<p><a href="https://golang.org/ref/spec#Making_slices_maps_and_channels" rel="nofollow noreferrer">Making slices, maps and channels</a></p>

<p><a href="https://golang.org/ref/spec#Appending_and_copying_slices" rel="nofollow noreferrer">Appending to and copying slices</a></p>
    </div>