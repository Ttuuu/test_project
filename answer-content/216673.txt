<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Overall the methods look a bit too long. In <a href="https://www.youtube.com/watch?v=GtB5DAfOWMQ" rel="nofollow noreferrer">this presentation about cleaning up code</a> Rafael Dohms talks about limiting the indentation level to one per method and keeping methods to ~15 lines or less. (<a href="https://www.slideshare.net/rdohms/bettercode-phpbenelux212alternate/11-OC_1Only_one_indentation_level" rel="nofollow noreferrer">see the slides here</a>).</p>

<p>Either you didn't comprehend it, or you didn't want to heed the advice of the first section of <a href="https://codereview.stackexchange.com/a/214282/120114">my answer to your first question</a>. You don't need to to have an instance of the <a href="https://github.com/emarcier/usco/blob/master/master/cron/equity/EQ.php" rel="nofollow noreferrer"><code>EQ</code> class</a> that holds values that come from the static methods. You could simply call the static methods wherever the properties of that instance are currently used. For example, in the static method <code>EQ::getEquilibriums()</code> the symbols are used like this:</p>

<blockquote>
<pre><code>foreach ($class_obj-&gt;symbols as $symb =&gt; $arr) {
</code></pre>
</blockquote>

<p>Instead of utilizing <code>$class_obj-&gt;symbols</code> just utilize <code>EQ::getSymbols()</code>- this could be stored in a local variable if that needs to be used multiple times within a method/function. </p>

<pre><code>foreach (self::getSymbols() as $symb =&gt; $arr) {
</code></pre>

<p>Notice that this example uses the keyword <code>self</code> instead of <code>EQ</code>. This is a shortcut that can be used when accessing methods and static properties on the same class - <a href="https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php#example-202" rel="nofollow noreferrer">see this example in the documentation for the scope resolution operator</a>.</p>

<p>The same is true for the other methods called by that method - e.g. <code>EQ::getCharts()</code>. <code>EQ::getOverallCoef()</code> can just call <code>EQ::getSectors()</code> to get the sectors. And those methods can store fetched data the first time in static variables instead of re-fetching data on subsequent calls.</p>

<p>There shouldn't be a need to create that <code>new EQ()</code> object and pass it to the methods. So this line:</p>

<blockquote>
<pre><code>EQ::getEquilibriums(new EQ());
</code></pre>
</blockquote>

<p>should be updated like this:</p>

<pre><code>EQ::getEquilibriums();
</code></pre>

<p>If you need to check if any of those helper methods doesn't return anything (i.e. the following check at the end of the EQ constructor) </p>

<blockquote>
<pre><code>if ($this-&gt;symbols == null || $this-&gt;sector == null || $this-&gt;overall == null || $this-&gt;emojis == null) {
</code></pre>
</blockquote>

<p>Check for each case in the respective getter method and consider throwing an exception if appropriate. </p>

<hr>

<p>The array returned by <code>SectorMovers::iexSectorParams()</code> could be declared as a constant and the method can be removed.</p>

<hr>

<p><strike>The following three lines in <code>EquityRecords::allEquitiesSignleJSON()</code>:</strike></p>

<blockquote>
<pre><code>$fp = fopen($raw_equity_file, "x+");
fwrite($fp, $all_equities_json);
fclose($fp);
</code></pre>
</blockquote>

<p>Should likely be replaceable with a call to <a href="https://www.php.net/manual/en/function.file-put-contents.php" rel="nofollow noreferrer"><code>file_put_contents()</code></a></p>

<p>You pointed me to the SO question with <a href="https://stackoverflow.com/a/6415972/1575353">this accepted answer</a> which claims "<em>the <code>fwrite()</code> is a smidgen faster.</em>" and cites <a href="http://web.archive.org/web/20100109103851/http://balancedbraces.com/2008/06/12/fopen-fwrite-fclose-vs-file_put_contents/" rel="nofollow noreferrer">this article</a>. I would be curious if that is still the case in PHP 7. I will research this.</p>

<hr>

<p>You could also consider using <a href="https://php.net/explode" rel="nofollow noreferrer"><code>explode()</code></a> instead of <code>preg_split()</code> if it works - depending on the delimiter. Refer to answers to <a href="https://stackoverflow.com/q/27303235/1575353">_In PHP, which is faster: preg_split or explode?_</a> for more information.</p>

<blockquote>
  <p><strong>Tip</strong> If you don't need the power of regular expressions, you can choose faster (albeit simpler) alternatives like <a href="https://www.php.net/manual/en/function.explode.php" rel="nofollow noreferrer"><code>explode()</code></a> or <a href="https://www.php.net/manual/en/function.str-split.php" rel="nofollow noreferrer"><code>str_split()</code></a>.<sup><a href="https://www.php.net/manual/en/function.preg-split.php#refsect1-function.preg-split-notes" rel="nofollow noreferrer">1</a></sup></p>
</blockquote>

<p><sup>1</sup><sub><a href="https://www.php.net/manual/en/function.preg-split.php#refsect1-function.preg-split-notes" rel="nofollow noreferrer">https://www.php.net/manual/en/function.preg-split.php#refsect1-function.preg-split-notes</a></sub></p>
    </div>