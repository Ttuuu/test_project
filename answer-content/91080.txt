<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>The Official style guide</h2>

<p>You have about 250 violations to PEP8, use autopep8 to make your code more readable</p>

<h2>Dictionary</h2>

<p>A long series of <code>if</code> and <code>elif</code> is considered bad style, a dictionary also allows easier adding of more classes and options.</p>

<pre><code>def profession():
    letter_to_profession = {
        'f': Fighter,
        'c': Cleric,
        'm': Mage
        }
    print("What is your class?\n")
    for letter in letter_to_profession.keys():
        print("- Press {} for {}".format(
            letter, letter_to_profession[letter].__name__))
    pclass = input("&gt;&gt;&gt;")
    return letter_to_profession[pclass]()
</code></pre>

<p>Also note that the printing is generated from the dictionary for maximum convenience.</p>

<h2>Stand-alone functions</h2>

<p>In Python functions can float freely in the global namespace an it is raccomended that they do so when it makes sense, so:</p>

<pre><code>class Dice:    
    def die(num):
        die=randint(1,num)
        return die
</code></pre>

<p>Must become:</p>

<pre><code>def die(sides):
     return randint(1,num)
</code></pre>

<p>also it is better to return the value directly (without and intermediate variable).</p>

<h2>Extend the classes</h2>

<pre><code>def playerAttack():
    roll=Dice.die(20)   
    if roll&gt;=hero.thaco-mob.ac:
        print("You hit")
        if hero.prof=="fighter":
            rollD=Dice.die(10)

        if hero.prof=="cleric":
            rollD=Dice.die(6)

        if hero.prof=="mage":
            rollD=Dice.die(4)
        print("for",rollD,"damage")
        mob.hp-=rollD
        print("the",mob.name,"has",mob.hp,"hp left")
    else:
        print("You miss")
</code></pre>

<p>This <code>if</code> chain is not nice and will become even less nice when more characters are added, you should implement the max_damage or max_power inside the Player Class so as to write:</p>

<pre><code>def playerAttack():
    roll = Dice.die(20)
    if roll &gt;= hero.thaco - mob.ac:
        print("You hit")
        roolD = die(hero.max_power)
        print("for", rollD, "damage")
        mob.hp -= rollD
        print("the", mob.name, "has", mob.hp, "hp left")
    else:
        print("You miss")
</code></pre>

<h2>Put effort into pretty printing.</h2>

<p>The following:</p>

<pre><code>print("name hp thaco ac inventory xp", '\n',
      hero.name, hero.hp, hero.thaco, hero.ac, hero.inventory, hero.exp)
</code></pre>

<p>when printed looks like:</p>

<pre><code>name hp thaco ac inventory xp 
 foobar 10 20 10 {} 10
</code></pre>

<p>Instead:</p>

<pre><code>print("Name: {}, HP: {}, Thaco: {}, Ac:{}, Inventory:{}, XP:{}\n".format(
     hero.name, hero.hp, hero.thaco, hero.ac, hero.inventory, hero.exp))
</code></pre>

<p>Looks like:</p>

<pre><code>Name: foobar, HP: 4, Thaco: 20, Ac:10, Inventory:{}, XP:4
</code></pre>
    </div>