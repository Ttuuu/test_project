<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This type of functionality does not require whole document to be loaded in to the memory. It might be easily done as a set of improvements over <code>TextReader</code> which provide better scaling possibilities:</p>

<pre><code>public static class WordWrap
{
    public static string Wrap(this string text, int lineLength)
    {
        using (var reader = new StringReader(text))
            return reader.ReadToEnd(lineLength);
    }

    public static string ReadToEnd(this TextReader reader, int lineLength)
    {
        return string.Join(Environment.NewLine, reader.ReadLines(lineLength));
    }

    public static IEnumerable&lt;string&gt; ReadLines(this TextReader reader, int lineLength)
    {
        var line = new StringBuilder();
        foreach (var word in reader.ReadWords())
            if (line.Length + word.Length &lt; lineLength)
                line.Append($"{word} ");
            else
            {
                yield return line.ToString().Trim();
                line = new StringBuilder($"{word} ");
            }

        if (line.Length &gt; 0)
            yield return line.ToString().Trim();
    }

    public static IEnumerable&lt;string&gt; ReadWords(this TextReader reader)
    {
        while (!reader.IsEof())
        {
            var word = new StringBuilder();
            while (!reader.IsBreak())
            {
                word.Append(reader.Text());
                reader.Read();
            }

            reader.Read();
            if (word.Length &gt; 0)
                yield return word.ToString();
        }
    }

    static bool IsBreak(this TextReader reader) =&gt; reader.IsEof() || reader.IsWhiteSpace();
    static bool IsWhiteSpace(this TextReader reader) =&gt; string.IsNullOrWhiteSpace(reader.Text());
    static string Text(this TextReader reader) =&gt; char.ConvertFromUtf32(reader.Peek());
    static bool IsEof(this TextReader reader) =&gt; reader.Peek() == -1;        
}
</code></pre>

<p>As you can see we have many ways to use it: <code>String.Wrap(int lineLength)</code>, <code>TextReader.ReadWords()</code>, <code>TextReader.ReadLines(int lineLength)</code>, <code>TextReader.ReadToEnd(int lineLength)</code>.</p>

<p>Example:</p>

<pre><code>class Program
{
    public static void Main()
    {
        var text = "I made this method that takes any string and transforms it into a multiline text l; each line having the max (character) length specified by the rowLength parameter. How can I make this better, functionality and code wise? There is currently one known issue.It sometimes adds an empty line at the end because I have to add the Enviroment.NewLine call. Check it out, please, and give some suggestions.";
        Console.WriteLine(text.Wrap(lineLength:20));
    }
}
</code></pre>

<p>ANE checking is missing for brevity. Comments are appreciated.</p>
    </div>