<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Return Value</h1>
<p>The method <code>addUser</code> returns <code>false</code> for all negative cases. Below it is possible to see that it does not return <code>true</code> for the positive case.. instead it returns nothing which leads to an <code>undefined</code>:</p>
<blockquote>
<pre><code>else
{
 $('#loadingDiv').show();
 $.post('process/editUser.php', {uobj:uobj}, function(data)
 {
   var modal = "#addUserModal";
   $('#loadingDiv').hide();
   dataCheck(data, modal);
 });
}
</code></pre>
</blockquote>
<p>This makes the method hard to understand when working with it without knowing the implementation.</p>
<hr>
<h1>Concerns</h1>
<p>The class <code>UserEdit</code> handles multiple concerns. There are two principles which can be named to emphasize the importance for separation:</p>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Separation_of_concerns" rel="nofollow noreferrer">Separation of Concerns (SoC)</a></li>
<li><a href="https://en.wikipedia.org/wiki/Single-responsibility_principle" rel="nofollow noreferrer">Single Responsibility Principle (SRP)</a></li>
</ul>
<p>The concerns are</p>
<ul>
<li>validating (<code>uobj.adduser == ""</code>)</li>
<li>presenting (<code>$('#adduserError').show();</code>)</li>
<li>sending data (<code>$.post(...)</code>)</li>
</ul>
<p>When we separate the concerns we could accomplish something like</p>
<pre><code>class UserEdit {
    constructor(validator, presenter, repository) {/* ... */}

    addUser(user) {
      const validation = validator.validate(user);
      presener.present(validation);
      
      if (validation.isValid())
          repository.update(user);

      return validation.isValid();
    }
}
</code></pre>
<p>This has multiple advantages. Beside the descriptive and shorter method body we can accomplish through the dependency injection via the constructor a better way to test the class. Additionally the modification and the exchange of the modules is easier.</p>
    </div>