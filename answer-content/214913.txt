<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>public interface IInfiniteCounter : IEnumerable&lt;(int Value, InfiniteCounterState State)&gt;
</code></pre>
</blockquote>

<p>vs</p>

<blockquote>
<pre><code>    int Current { get; }

    (int Value, InfiniteCounterState State) Next();

    void Reset();
</code></pre>
</blockquote>

<p>The interface itself looks a lot more like <code>IEnumerator&lt;&gt;</code> than <code>IEnumerable&lt;&gt;</code>, so IMO implementing <code>IEnumerable&lt;&gt;</code> is misleading and dangerous. The docs for <code>IEnumerable&lt;&gt;</code> don't say either way whether or not it's possible to have two active enumerators at the same time, but I can't think of any implementations in the standard library for which it isn't possible, and I've probably written a lot of code which assumes that it is possible.</p>

<hr>

<blockquote>
<pre><code>    int Min { get; }

    int Max { get; }

    int Length { get; }
</code></pre>
</blockquote>

<p>I can safely assume that <code>Min</code> is inclusive, but I absolutely need a comment to tell me whether <code>Max</code> is or not, and it would be helpful to have a comment indicating the standard implementation of <code>Length</code>. Also, should <code>Length</code> be <code>uint</code> both because it's guaranteed to be non-negative and to avoid overflow in edge cases?</p>

<hr>

<blockquote>
<pre><code>public static class IndexMath
{
    public static int Flip(this int value, int min, int max)
    {
        return (-(value - max + 1) % (max - min)) + min;
    }
}
</code></pre>
</blockquote>

<p>I don't understand why this method uses <code>%</code>. For me the obvious interpretation of the name (and the use case) is <code>max - (value - min)</code>. If there's some trickery going on to avoid or handle overflow, it needs explanatory comments.</p>
    </div>