<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Welcome to Code Review, we wish you the best.</p>
<p><strong>General Observations</strong><br>
Congratulations on getting this to work, one function that is 356 lines long and almost 17K of text is a bit large and very hard to code and debug.</p>
<p><strong>Complexity</strong><br>
The function <code>main()</code> is too complex and should be broken into functions. A general rule of thumb in all programming is that a function should only be one edit screen in size, because it is to hard to keep track of everything that is going on. Typical software / program design involves breaking the problem up into smaller and smaller pieces to make it easier to understand. An example would be having different functions handle the each of the modes listed in the menu, one for <code>Special Functions</code>, one for <code>Fibonacci Series</code> one for <code>Normal maths operations</code> and one for <code>Random Mathematical Question</code>. Each of these top level functions can call sub functions.</p>
<p>There are a few software principles involved here:</p>
<p><em><a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself" rel="noreferrer">DRY programming, AKA Don't Repeat Yourself</a></em><br>
In a large function such as main there will be code that repeats itself in different places, rather than repeating the code put that code into a function and call that function is necessary, this allows the code to be written and debugged once and that speeds up development and maintenance.</p>
<p><em>Single Responsibility Principle</em><br>
There is also a programming principle called the Single Responsibility Principle that applies here. The <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" rel="noreferrer">Single Responsibility Principle</a> states:</p>
<blockquote>
<p>that every module, class, or function should have responsibility over a single part of the functionality provided by the software, and that responsibility should be entirely encapsulated by that module, class or function.</p>
</blockquote>
<p><em><a href="https://en.wikipedia.org/wiki/KISS_principle" rel="noreferrer">The KISS principal</a> which is Keep it Simple</em><br>
This is fairly self explanatory, make the code as simple as possible within small blocks.</p>
<p>The overall design principal is <a href="https://en.wikipedia.org/wiki/Top-down_and_bottom-up_design" rel="noreferrer">Top Down Design</a> or <a href="https://www.cs.uct.ac.za/mit_notes/software/htmls/ch07s09.html" rel="noreferrer">Stepwise Refinement</a>, this is applied generally to procedural languages, Top Down and Bottom Up design can be used in Object Oriented Design.</p>
<p>An example of one function could be <code>print_menu_return_option()</code>.</p>
<pre><code>char print_menu_return_option()
{
    char Opt;                          /*   Declaring the type variables     */
    int input_check = 0;

    while (input_check == 0)
    {
        printf("\n\nWhich mode do you want to use?\n[1] Normal maths operations\n[2] Special Functions\n[3] Fibonacci Series\n[4] Random Mathematical Question\n[5] Exit\n\nYour input: ");
        input_check = scanf(" %c", &amp;Opt);
    }

    return Opt;
}
</code></pre>
<p>In the above code you should use the return value of <code>scanf()</code> to check for errors in user input.</p>
    </div>