<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>since I know Java :) I have the following comments to add to the previous answer:</p>

<h2>resources handling</h2>

<p>Resources, in this context, are the input files you are reading.  Their lifecycle is not handled properly.  In other words, you do not close the files, leaving OS resources open after the file was read and parsed into memory.  This is not a big deal in your program since you only open two files, but it is still a glaring omission.</p>

<p>Since proper handling of lifecycle of resources can be tricky, starting with version 7, the Java compiler gives you the feature of try-with-resources, offering automatic closure (and better exception handling)</p>

<pre><code>try (Scanner reader = new Scanner(theFile)) {
    ...

} catch (FileNotFoundException e) {
    ...
}
</code></pre>

<h2>regular expression usage</h2>

<p>regarding this line of code </p>

<pre><code>if (!e.matches("[A-Za-z]{1}")) {
</code></pre>

<p>while it is convinient to use <code>String.matches()</code>, under the hood, the method will perform all the steps that are required to match an input to a regular expression, <em>including compiling the pattern</em>. since this line is performed inside a loop that reads a (possibly big) input file, you may have a performance issue here.  A better approach would be to create a Pattern instance via the <a href="https://docs.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html#compile(java.lang.String)" rel="nofollow noreferrer"><code>compile(regex)</code></a> factory method and then use a <code>Matcher</code> over the input.</p>

<p>an even better approach (in terms of performance) would be to ask if a regular expression is required.  yuo are testing whether the string is a single letter.  This can be replaced by quering the String's length and then quering the contents of the (only) character.  Something like </p>

<pre><code>if (!(e.length() == 1 &amp;&amp; Character.isLetter(e.toCharArray()[0])) {
</code></pre>

<p>this way, a string that is longer than 1 letter will pass the condition without any examination of contents.</p>
    </div>