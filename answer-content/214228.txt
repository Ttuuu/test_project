<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First, some style-issues. Python has an official style-guide, <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP8</a>. It recommends not putting multiple commands on the same line. In addition trailing <code>;</code> are superfluous.</p>

<p>Now, let's look at the needed structure. You need a <code>Card</code> that contains all information about that card and a <code>Hand</code> which can evaluate a list of cards with respect to the poker rules. You don't actually need a <code>Deck</code> if you just have a list of all cards in the deck and then do <code>random.sample(cards, n_players*5)</code> to get the hands for all players, which you can then distribute to the players.</p>

<p>So, let's have a look at <code>Card</code> first, since you already do have this class. Your <code>valname</code> method is very inefficient. First, it could be that it is called multiple times (this does not seem to be the case). But you also have a chain of <code>if</code>s, however only ever one of them can be true, so use <code>elif</code> instead. Otherwise all conditions will need to be checked, instead of only all conditions until the first true one.</p>

<p>But even easier here is to use a simple <code>tuple</code>:</p>

<pre><code>class Card:
    value_names = ("Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "Ten",
                   "Jack", "Queen", "King", "Ace")
    def __init__(self, value, suit):
        self.value = value
        self.suit = suit

    def __str__(self):
        return f"{self.value_names[self.value - 1]} of {self.suit}"

    def __repr__(self):
        return f"{self.suit} {self.value}"

    def __lt__(self, other):
        return self.value &lt; other.value

    def __eq__(self, other):
        return self.value == other.value
</code></pre>

<p>The <code>__str__</code> method is a <a href="https://rszalski.github.io/magicmethods/" rel="nofollow noreferrer">magic method</a> that will be called when you do <code>print(card)</code> and <code>__repr__</code> will be called when typing <code>card</code> in an interactive session. The <code>__lt__</code> and <code>__eq__</code> allow cards to be compared by their value, which is used for example by <code>sorted</code> when we have an iterable of cards.</p>

<p>If you want the fancy unicode names for the suits, just use that when constructing the cards:</p>

<pre><code>from itertools import product

deck = [Card(value, suit) for value, suit in product(range(2, 15), "♥♠♣♦")]
</code></pre>

<p>Now let's get to the meat of the problem, evaluating poker hands, which should be the responsibility of the <code>Hands</code> class:</p>

<pre><code>from collections import Counter
from itertools import tee, chain


def difference(iterable):
    a, b = tee(iterable)
    try:
        item = next(b)
    except StopIteration:
        return iter([])
    return chain([item], map(lambda x: x[1] - x[0], zip(a, b)))


class Hand:
    def __init__(self, cards):
        self.cards = sorted(cards)
        self.values = [card.value for card in self.cards]
        self.values_counter = Counter(self.values)
        self.suits = [card.suit for card in self.cards]
        self.low_card, self.high_card = self.values[0], self.values[-1]

    def __repr__(self):
        return ", ".join(repr(card) for card in self.cards)

    def flush(self):
        return len(set(self.suits)) == 1

    def straight(self):
        diffs = sorted(list(difference(self.values))[1:])
        return diffs in ([1, 1, 1, 1], [-12, 1, 1, 1])

    def fullhouse(self):
        candidate = self.values_counter.most_common(2)
        return candidate[0][1] == 3 and candidate[1][1] == 2

    def evaluate(self):
        # flush/straight flush/royal flush
        if self.flush():
            if self.straight():
                # royal flush
                if self.high_card == 14 and self.low_card == 10:
                    return "Royal Flush", 10000
                # straight flush
                return "Straight Flush", 8999 + self.low_card
            # flush
            return "Flush", 6000 + sum(10**k * x
                                       for k, x in zip([1, -1, -2, -3], self.values))
        # straight
        elif self.straight():
            if self.high_card == 14 and self.low_card == 2:
                return "Straight", 5000
            return "Straight", 4999 + self.low_card
        # fullhouse
        elif self.fullhouse():
            triple, pair = self.values_counter.most_common(2)
            return "Full House", 7000 + 10 * triple[0] + pair[0]
        # two pair
        candidate1, candidate2, *rest = self.values_counter.most_common()
        rest = sorted(r[0] for r in rest)
        if candidate1[1] == candidate2[1] == 2:
            c0, c1 = sorted([candidate1[0], candidate2[0]])
            return "Two Pairs", 3000 + 10* c0 + c1 + sum(10**k * x
                                                         for k, x in zip([-1, -2], rest))
        # quad
        candidate, *rest = self.values_counter.most_common()
        rest = sorted(r[0] for r in rest)
        if candidate[1] == 4:
            return "Quad", 8000 + 10 * candidate[0] + rest[0]
        # triple
        elif candidate[1] == 3:
            return "Triple", 4000 + 10*candidate[0] + rest[0] + .1*rest[1]
        # pair
        elif candidate[1] == 2:
            return "Pair", 2000 + 10*candidate[0] + rest[0] + .1*rest[1] + .01*rest[2]
        # highcard
        return "High Card", self.high_card
</code></pre>

<p>The difference function is taken from the <a href="https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.difference" rel="nofollow noreferrer"><code>more_itertools</code></a> package.
A <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter</code></a> object is exactly what it says. If you pass it an iterable it will count how often each object appears and it has some nice methods like <code>most_common</code> which returns tuples of <code>element, count</code>, sorted decreasingly by <code>count</code>.</p>

<p>Now that we have that the main loop becomes quite a bit easier:</p>

<pre><code>from itertools import zip_longest, islice, product
from random import sample

def grouper(iterable, n, fillvalue=None):
    "Collect data into fixed-length chunks or blocks"
    # grouper('ABCDEFG', 3, 'x') --&gt; ABC DEF Gxx"
    args = [iter(iterable)] * n
    return zip_longest(*args, fillvalue=fillvalue)

if __name__ == "__main__":
    deck = [Card(value, suit) for value, suit in product(range(2, 15), "♥♠♣♦")]
    rounds = int(input("How many rounds? "))
    players = int(input("How many players (max 10)? "))
    show_strength = input("Show result each round? ").lower()[0] == "y"
    assert players &lt;= 10
    hand_occurrence = Counter()

    for _ in range(rounds):
        hands = [Hand(cards) for cards in grouper(sample(deck, players * 5), 5)]
        evaluated_hands = [hand.evaluate() for hand in hands]
        hand_occurrence += Counter(hand[0] for hand in evaluated_hands)
        if show_strength:
            strongest = max(evaluated_hands, key=lambda hand: hand[1])
            print("Strongest hand:", strongest)
    print("Statistics:", hand_occurrence.most_common())
</code></pre>

<p>The <code>grouper</code> function which I used to split the hands into groups of 5 cards each is from the <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow noreferrer"><code>itertools</code> recipes</a>.</p>

<p>I did not bother to use nicer user input functions here, but there are plenty examples on this site on how to do it more foolproof (and keep on asking if the supplied input is somehow wrong).</p>

<p>This code takes about 3.14 s ± 82 ms for 10,000 rounds with 10 players and about 34.4 s ± 483 ms for 100,000 rounds on my machine, without printing the results from each round.</p>
    </div>