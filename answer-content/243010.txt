<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I compared the class <code>Stat</code>:</p>

<blockquote>
<pre><code>public class Stat {
    private Object identifier;
    private double base;
    private double current;
    .....methods
}
</code></pre>
</blockquote>

<p>and the class <code>TestStats</code> using it:</p>

<blockquote>
<pre><code>public class TestStats implements Stats {
    private final List&lt;Stat&gt; collection;
    public TestStats() {
        collection = new ArrayList&lt;&gt;();
        collection.add(new Stat(TestStatIdentifier.HEALTH, 1, 1));
    }
    @Override
    public Stat getStat(Object identifier) {
        return collection.stream().filter(s -&gt; s.getIdentifier().equals(identifier)).findAny().orElse(null);
    }
}
</code></pre>
</blockquote>

<p>You are implementing with your two classes a <code>Map&lt;String, Stat&gt;</code> because you a direct corrispondence between the name of your stat and the couple of doubles <code>base</code> and <code>current</code> present in your class <code>Stat</code>. The <code>Object</code> field <code>identifier</code> is used a key in the map, so you can rewrite your <code>Stat</code> class in this way:</p>

<pre><code>public class Stat {
    private double base;
    private double current;

    public Stat(double base, int current) {
        this.base = base;
        this.current = current;
    }

    public void apply(StatChange change) {
        current += change.getDelta();
    }

    public double getCurrent() {
        return current;
    }

    @Override
    public String toString() {
        return String.format("%.1f/%.1f", current, base);
    }
}
</code></pre>

<p>Now your class TestStats will contain a <code>Map&lt;String, Stat&gt;</code> and this seems logic to me because every fighter (<code>Entity</code>) has its map of characteristics defined when you initialize the fighter:</p>

<pre><code>public class TestStats implements Stats {
    private final Map&lt;String, Stat&gt; map;

    public TestStats(Map&lt;String, Stat&gt; map) {
        this.map = new TreeMap&lt;&gt;(map);
    }

    @Override
    public Stat getStat(String identifier) {
        return map.getOrDefault(identifier, null);
    }

    @Override
    public void changeStats(List&lt;StatChange&gt; impact) {
        for (String key : map.keySet()) {
            for (StatChange change : impact) {
                if (change.matches(key)) {
                    map.get(key).apply(change);
                }
            }
        }
    }
}
</code></pre>

<p>Consequently there are some minor changes to <code>Stats</code> interface and <code>StatChange</code>:</p>

<pre><code>public interface Stats {
    Stat getStat(String identifier);
    void changeStats(List&lt;StatChange&gt; impact);
}
</code></pre>

<p>and StatChange class:</p>

<pre><code>public class StatChange {
    private final String name;
    private final double delta;

    public StatChange(String identifier, double delta) {
        this.name = Objects.requireNonNull(identifier, "identifier must not be null");
        this.delta = delta;
    }

    public boolean matches(String identifier) {
        return name.equals(identifier);
    }

    public double getDelta() {
        return delta;
    }

    @Override
    public String toString() {
        return String.format("%s delta:%.1f", name, delta);
    }
}
</code></pre>

<p>Some changes can be applied to your <code>AttackProcedureTest</code> class : you can use the annotation <code>@Before</code> to a <code>setUp</code> method that will be invoked before every test to initialize the scenarios, you class could be rewritten in this way:</p>

<pre><code>public class AttackProcedureTest {
    private final AttackProcedure attackProcedure = new AttackProcedure(new TestFightRules());
    private final static String HEALTH = "HEALTH";
    private TestEntity attacker;
    private TestEntity defender;

    @Before
    public void setUp() {
        Map&lt;String , Stat&gt; map = new HashMap&lt;String, Stat&gt;();
        map.put(HEALTH, new Stat(1, 1));
        attacker = new TestEntity("attacker", new TestStats(map));
        defender = new TestEntity("defender", new TestStats(map));
    }

    @Test
    public void test_successfulAttack_withFailingDefense_procedureExecution() {
        double defenderLifeBefore = defender.getStats().getStat(HEALTH).getCurrent();

        attacker.setSupposedToSucceedInAttack(true);
        defender.setSupposedToSucceedInDefense(false);
        Result result = attackProcedure.performAttack(attacker, defender);
        result.entries().forEach(System.out::println);

        double defenderLifeAfter = defender.getStats().getStat(HEALTH).getCurrent();

        assertEquals(1, defenderLifeBefore, 0.01);
        assertEquals(0, defenderLifeAfter, 0.01);
        assertNotNull(result);
        assertFalse(result.entries().isEmpty());
    }

    @Test
    public void test_failingAttack_ProcedureExecution() {
        double defenderLifeBefore = defender.getStats().getStat(HEALTH).getCurrent();

        attacker.setSupposedToSucceedInAttack(false);
        defender.setSupposedToSucceedInDefense(false);
        Result result = attackProcedure.performAttack(attacker, defender);
        result.entries().forEach(System.out::println);

        double defenderLifeAfter = defender.getStats().getStat(HEALTH).getCurrent();

        assertEquals(1, defenderLifeBefore, 0.01);
        assertEquals(1, defenderLifeAfter, 0.01);
        assertNotNull(result);
        assertFalse(result.entries().isEmpty());
    }

    @Test
    public void test_successfulAttack_withSuccessfulDefense_procedureExecution() {
        double defenderLifeBefore = defender.getStats().getStat(HEALTH).getCurrent();

        attacker.setSupposedToSucceedInAttack(true);
        defender.setSupposedToSucceedInDefense(true);        
        Result result = attackProcedure.performAttack(attacker, defender);
        result.entries().forEach(System.out::println);

        double defenderLifeAfter = defender.getStats().getStat(HEALTH).getCurrent();

        assertEquals(1, defenderLifeBefore, 0.01);
        assertEquals(1, defenderLifeAfter, 0.01);
        assertNotNull(result);
        assertFalse(result.entries().isEmpty());
    }
}
</code></pre>
    </div>