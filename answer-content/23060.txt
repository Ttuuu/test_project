<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>An interface is like a contract. In you case - all clases that inherits from <code>IAnimal</code> must have a <code>Cry()</code> method... (which is really mean :) )</p>

<p>In in you example you are not really using the interface.  try writing it like this:</p>

<pre><code>IAnimal animal1 = new Dog();
Console.WriteLine(animal1.Cry());

IAnimal animal2 = new Cat();
Console.WriteLine(animal2.Cry());
</code></pre>

<p>And see that it still works.</p>

<p>Now try adding a method to your <code>Cat</code> class. Perhaps an <code>Eat()</code> method.</p>

<pre><code>class Cat : IAnimal {
    public string Cry()
    {
        return "Meow!";
    }

    public string Eat()
    {
      return "Meow i'm so full - mice is my favorite!";
    } }
</code></pre>

<p>And then try calling that method with <code>animal2</code> instance. You will notes you can't!</p>

<p><code>animal2.Eat(); //&lt;-- compile time error</code></p>

<p>Because we are now using <code>animal2</code> only as <code>IAnimal</code>. And all we know about an <code>IAnimal</code> is that it can <code>Cry()</code></p>
    </div>