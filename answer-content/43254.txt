<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I <em>think</em> I'd prefer to have the user pass a locale instead of a facet. In most typical cases, a user will deal only with locales, not with the individual facets that make up a particular locale. It's also relatively easy for a user to create a locale on demand, so the code looks something like:</p>

<pre><code>std::string input{"Now is the time for every good man to come of the aid of his country."};

std::string result = upper(input, std::locale("en-us"));
</code></pre>

<p>or:</p>

<pre><code>std::string result = upper(input, std::locale(""));
</code></pre>

<p>...though I suppose we can probably expect that the default parameter will be used a lot more often than not, in which case all of this is moot.</p>

<p>Anyway, using a locale as the parameter lets us move the <code>use_facet</code> call inside the function body and use <code>auto</code> for it instead of writing out its full type:</p>

<pre><code>auto const&amp; f = std::use_facet&lt;std::ctype&lt;typename String::value_type&gt;&gt;(locale);
</code></pre>

<p>Not a huge change, but somewhat simpler nonetheless. Given that you're depending on <code>String</code> being contiguous and supporting random access, it might be worth considering making use of that a little more explicitly, by replacing <code>&amp;str[0]+str.size()</code> with <code>&amp;str[str.size()]</code>.</p>

<p>Although I'm somewhat on the fence about it, I'm also less than excited about the idea of using a trailing return type when it's not actually necessary. Maybe it's just a sign of my age, but I still tend to prefer the return type in its traditional location when possible.</p>

<p>Putting all those together, we'd end up with something on this order:</p>

<pre><code>template&lt;typename String&gt;
String upper(String str, std::locale const &amp;locale = std::locale())
{
    auto const&amp; f = std::use_facet&lt;std::ctype&lt;typename String::value_type&gt;&gt;(locale);
    f.toupper(&amp;str[0], &amp;str[str.size()]);
    return str;
}
</code></pre>

<p>I'm not sure anybody could call that a <em>huge</em> improvement, but I do think it's at least a minor one, especially in convenience to the user.</p>
    </div>