<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First of all: as a first project this is not bad at all. It works, and the UI is usable and easy to understand.</p>

<p>That said there are a lot of things that could be done better/easier/smarter. I'm not able to comment it all but below find what I have:</p>

<p><strong>The UI</strong></p>

<p>The form is sizable, but the controls are static and do not resize with the form. That looks "unprofessional" and should be avoided. You can either set the <code>FormBorderStyle</code> on the form to one of the <code>FixedXXX</code> values or make the controls size/move along with the sizing of the form using the <code>Anchor</code> property of each control. It can be difficult with the button grid but you can experiment with a <code>TableLayoutGrid</code> as container.</p>

<p>From a users perspective it is a little annoying to be prompted for user names as the first - even before the main form is visible. Instead you could have input fields for the names in the main form directly, or you could rename the "Reset" button to "Start Game" and prompt for names when starting the first game.</p>

<p>In the "Turn" box it would be nice, if the signature (X or O) is shown adjacent to the player name, to make it obvious who is drawing.</p>

<hr>

<p><strong>The Code</strong></p>

<p>In general you use a lot of abbreviated or short variable names. Do you self a favor and call the variables something meaningful and not abbreviated. It will make it easier to understand in five years when you need to revise the code.</p>

<p>The code has a lot of repetitions, which is considered as a bad design and it violates the DRY-principle.</p>

<p>For instance the click event handler for each button:</p>

<blockquote>
<pre><code>private void ol_Click(object sender, EventArgs e)
{
    if(player1 == true)
    {
        ul.Image = x;
        Playerstatus();
    }
    else
    {
        ul.Image = o;
        Playerstatus();
    }

    ul.Enabled = false;
}
</code></pre>
</blockquote>

<p>Here you can use the same event handler for all the buttons, because the <code>sender</code> argument is a reference to the button that is clicked:</p>

<pre><code>private void Button_Click(object sender, EventArgs e)
{
    Button button = sender as Button;
    button.Image = player1 ? x : o;
    PlayerStatus();
    button.Enabled = false;
}
</code></pre>

<p>In this way you can remove 8 almost identical eventhandlers.</p>

<p>In the same way you could combine <code>P1win()</code> and <code>P2win()</code> to one method:</p>

<pre><code>private void EnableControls(bool enable)
{
  foreach (Control c in Controls) /* disables all buttons */
  {
    Button b = c as Button;
    if (b != null)
    {
      b.Enabled = enable;

    }
  }
}

public void SetWinner(string winner, ref int winnerPoints, Label label) /* Player 1 won */
{
  MessageBox.Show(winner + " won!");

  EnableControls(false);

  res.Enabled = true; /* reactivates the reset button */
  winnerPoints++;
  drawcount = 0;
  label.Text = winnerPoints.ToString();
  won = true;

}
</code></pre>

<p>The <code>Checkwin()</code> method is really ugly, and you should try something else. For instance create a matrix of buttons and then do some iterations: </p>

<pre><code>private void SetWinner(Image image)
{
  if (image == x)
  {
    P1win();
  }
  else
  {
    P2win();
  }
}

public void Checkwin()
{
  Button[,] buttons =
  {
    { ul, uc, ur },
    { cl, cc, cr },
    { bl, bc, br }
  };

  for (int row = 0; row &lt; 3; row++)
  {
    if (buttons[row, 0].Image != null &amp;&amp; buttons[row, 0].Image == buttons[row, 1].Image &amp;&amp; buttons[row, 1].Image == buttons[row, 2].Image)
    {
      SetWinner(buttons[row, 0].Image);
    }
  }

  // TODO: the same for columns and diagonals

  // Diagonals:
  if (buttons[0, 0].Image != null &amp;&amp; buttons[0, 0].Image == buttons[1, 1].Image &amp;&amp; buttons[1, 1].Image == buttons[2, 2].Image)
  {
    SetWinner(buttons[0, 0].Image);
  }
}
</code></pre>

<p>The above is just a soft review of the existing code. A more profound review results in a completely different "architecture" which comply to some common principles:</p>

<ol>
<li>Don't repeat yourself (DRY).</li>
<li>Separation of concern.</li>
<li>Model/View pattern</li>
</ol>

<p>The code behind of the form should only respond to events from the UI (event handlers) and the state of the game model.</p>

<p>The game model is a class that holds the state and properties of the current game and could be something along these lines:</p>

<pre><code>  public class TicTacToeGame
  {
    public TicTacToeGame(string xPlayerName, string oPlayerName)
    {
      CurrentPlayer = XPlayer = new Player(xPlayerName, Signature.X);
      OPlayer = new Player(oPlayerName, Signature.O);
    }

    public TicTacToeGame(Player xPlayer, Player oPlayer)
    {
      if (xPlayer.Signature != Signature.X || oPlayer.Signature != Signature.O) throw new ArgumentException("A player has wrong signature");

      CurrentPlayer = XPlayer = xPlayer;
      OPlayer = oPlayer;
    }

    private Signature[,] m_board = new Signature[3, 3];

    public Player XPlayer { get; }
    public Player OPlayer { get; }
    public Player CurrentPlayer { get; private set; }

    public bool IsGameOver()
    {
      Player winner = null;

      for (int row = 0; row &lt; 3; row++)
      {
        if (m_board[row, 0] != Signature.None &amp;&amp; m_board[row, 0] == m_board[row, 1] &amp;&amp; m_board[row, 1] == m_board[row, 2])
        {
          winner = GetPlayer(m_board[row, 0]);
        }
      }

      for (int col = 0; col &lt; 3; col++)
      {
        if (m_board[0, col] != Signature.None &amp;&amp; m_board[0, col] == m_board[1, col] &amp;&amp; m_board[1, col] == m_board[2, col])
        {
          winner = GetPlayer(m_board[0, col]);
        }
      }

      if (m_board[0, 0] != Signature.None &amp;&amp; m_board[0, 0] == m_board[1, 1] &amp;&amp; m_board[1, 1] == m_board[2, 2])
      {
        winner = GetPlayer(m_board[0, 0]);
      }

      if (m_board[2, 0] != Signature.None &amp;&amp; m_board[2, 0] == m_board[1, 1] &amp;&amp; m_board[1, 1] == m_board[0, 2])
      {
        winner = GetPlayer(m_board[2, 0]);
      }

      if (winner != null)
      {
        OnGameOver(winner);
      }

      return winner != null;
    }

    private Player GetPlayer(Signature signature)
    {
      switch (signature)
      {
        default:
        case Signature.None:
          return null;
        case Signature.O:
          return OPlayer;
        case Signature.X:
          return XPlayer;
      }
    }

    public void Draw(int row, int col)
    {
      if (row &lt; 0 || row &gt;= 3 || col &lt; 0 || col &gt;= 3) throw new ArgumentOutOfRangeException("row or col");
      if (m_board[row, col] != Signature.None) throw new InvalidOperationException("Field already set");

      m_board[row, col] = CurrentPlayer.Signature;

      OnDrawComitted(row, col);
      if (!IsGameOver())
      {
        CurrentPlayer = CurrentPlayer == XPlayer ? OPlayer : XPlayer;
      }
    }

    public event EventHandler&lt;DrawEventArgs&gt; DrawComitted;

    private void OnDrawComitted(int row, int col)
    {
      DrawComitted?.Invoke(this, new DrawEventArgs(row, col, CurrentPlayer));
    }

    public event EventHandler&lt;GameOverEventArgs&gt; GameOver;

    private void OnGameOver(Player winner)
    {
      GameOver?.Invoke(this, new GameOverEventArgs(winner));
    }
  }

  public enum Signature
  {
    None = -1,
    O = 0,
    X = 1,
  }

  public class Player
  {
    public string Name { get; }
    public Signature Signature { get; }
    public int WonGames { get; set; }

    public Player(string name, Signature type)
    {
      Name = name;
      Signature = type;
    }
  }

  public class DrawEventArgs : EventArgs
  {
    public DrawEventArgs(int row, int col, Player player)
    {
      Row = row;
      Column = col;
      Player = player;
    }

    public int Row { get; }
    public int Column { get; }
    public Player Player { get; }
  }


  public class GameOverEventArgs
  {
    public GameOverEventArgs(Player winner)
    {
      Winner = winner;
    }

    private Player Winner { get; }
  }
</code></pre>
    </div>