<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>UX concern: refresh period</h1>

<p>I wonder if you are confusing the access token expiration setting (<code>JWT_EXPIRATION_DELTA</code>) with the refresh token expiration (<code>JWT_REFRESH_EXPIRATION_DELTA</code>). In either case, your <code>t &lt; 13</code> check should be related to the refresh token expiration, not the access token expiration. 13 seems to be chosen because it is almost 14; hence my comment. At the very least these refreshes should never go beyond your refresh expiration (7 days), or they will fail, which defeats the purpose of providing a refresh token (because the user would always have to authenticate after the expiration).</p>

<h1>Security concern: access token expiration</h1>

<p>On a slightly similar note, but this one is a security concern -- you typically want the access token to have a much shorter life than the refresh token. Yours is reversed, as the access token (<code>JWT_EXPIRATION_DELTA</code>) is 14 days vs. the refresh token (<code>JWT_REFRESH_EXPIRATION_DELTA</code>) at 7 days. Note the <a href="http://getblimp.github.io/django-rest-framework-jwt/#additional-settings" rel="nofollow noreferrer">default</a> <code>JWT_EXPIRATION_DELTA</code> for the djangorestframework-jwt library is a much more conservative and standard 5 minutes:</p>

<blockquote>
  <p>Default is datetime.timedelta(seconds=300)(5 minutes).</p>
</blockquote>

<p>Per <a href="https://tools.ietf.org/html/rfc6749#section-1.5" rel="nofollow noreferrer">OAuth 2 spec</a>:</p>

<blockquote>
  <p>access tokens may have a shorter lifetime and fewer permissions than
  authorized by the resource owner</p>
</blockquote>

<p>Per <a href="https://auth0.com/blog/refresh-tokens-what-are-they-and-when-to-use-them/" rel="nofollow noreferrer">Auth0 guidance</a>:</p>

<blockquote>
  <p>Access tokens carry the necessary information to access a resource directly.</p>
  
  <p>...</p>
  
  <p>Access tokens usually have an expiration date and are short-lived.</p>
  
  <p>...</p>
  
  <p>Common implementations allow for direct authorization checks against
  an access token. That is, when an access token is passed to a server
  managing a resource, the server can read the information contained in
  the token and decide itself whether the user is authorized or not (no
  checks against an authorization server are needed). This is one of the
  reasons tokens must be signed (using JWS, for instance). On the other
  hand, refresh tokens usually require a check against the authorization
  server. This split way of handling authorization checks allows for
  three things:</p>
  
  <ol>
  <li>Improved access patterns against the authorization server (lower load, faster checks)</li>
  <li>Shorter windows of access for leaked access tokens (these expire quickly, reducing the chance of a leaked token allowing access to a
  protected resource)</li>
  </ol>
  
  <p>...</p>
</blockquote>

<h1>Security concern: refresh token revocation</h1>

<p>It is difficult for me to tell whether that djangorestframework-jwt library will revoke all previous refresh tokens for a given session once a new refresh token is issued for that session. Ideally it should, especially if you are using unauthenticated clients, which it looks like you are (assuming that React app is just a public web app; if it's instead packaged in a native client you may and probably should be authenticating that client). You may want to verify that behavior of the library with your own testing.</p>

<p>If the library does not revoke previous refresh tokens, then you should probably mitigate the risk of having so many outstanding valid refresh tokens per session (~= expiration time divided by refresh period, or currently 7 / 1 = 7 valid tokens!!!) by making the refresh period much closer to the refresh token expiration. So if you keep the refresh expiration at 7 days, then only refreshing at 6 days would make sense. Then you would typically have 1 or at most 2 outstanding valid refresh tokens for a session. However, if given a choice, it is much more secure to have automatically revoked refresh tokens and shorter refresh periods; that way a compromised refresh token is much more likely to be invalid -- and you still wouldn't have to lose the benefit of the authorized user having a long refresh expiration. (The whole point of the long expiration is for situations such as an unattended laptop or mobile browser.)</p>

<p>Per <a href="https://tools.ietf.org/html/rfc6749#section-10.4" rel="nofollow noreferrer">OAuth 2 spec</a>:</p>

<blockquote>
  <p>The authorization server MUST verify the binding between the refresh
  token and client identity whenever the client identity can be
  authenticated.  When client authentication is not possible, the
  authorization server SHOULD deploy other means to detect refresh
  token abuse.</p>
  
  <p>For example, the authorization server could employ refresh token
  rotation in which a new refresh token is issued with every access
  token refresh response.  The previous refresh token is invalidated
  but retained by the authorization server.  If a refresh token is
  compromised and subsequently used by both the attacker and the
  legitimate client, one of them will present an invalidated refresh
  token, which will inform the authorization server of the breach.</p>
  
  <p>The authorization server MUST ensure that refresh tokens cannot be
  generated, modified, or guessed to produce valid refresh tokens by
  unauthorized parties.</p>
</blockquote>
    </div>