<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1><code>countOrbits</code></h1>
<p>Let's take a look at what your algorithm is doing. Suppose you are at a root node <code>r</code> with subtree <code>s</code> at depth <code>d0</code>. You return the sum of <code>d0</code> and all of the depths of the nodes in <code>s</code>.</p>
<h2>Nitpicks</h2>
<p><code>sum [] = 0</code>, so you could just write <code>countOrbitsImpl</code> as its <code>otherwise</code> clause. Not checking the <code>length</code> also makes your code slightly faster. <code>length</code> is O(n) in the list it acts on. So if <code>length subForest /= 0</code>, you'll iterate over the whole subforest before knowing that.</p>
<p>In this case, you can eliminate the unnecessary guard, but where it is necessary to check the subforest, you should prefer <code>null subForest</code> to <code>length subForest == 0</code> because of the aforementioned reason.</p>
<p>You should either put an <code>_</code> in front of a variable you don't use (<code>_rootLabel</code>) or replace the variable name with an <code>_</code>. Otherwise, if you turn on <code>-Wall</code> you'll get a warning about an unused variable.</p>
<h2>Rewriting</h2>
<p>You asked about an alternative to your recursive function using a fold or applicative. Here's a way to restate your algorithm: imagine that each node in the tree had a depth associated with it. You want the sum of that.</p>
<p>So instead of recursing over the tree, you can make a tree of depths and then sum that tree. We'll get to how you can sum it in a moment, but let's first make that tree.</p>
<pre class="lang-hs prettyprint-override"><code>mkDepthTree :: Integer -&gt; STree -&gt; Tree Integer
mkDepthTree depth (Node _ subForest) = Node depth (map (mkDepthTree (depth+1)) subForest)
</code></pre>
<p>This doesn't look very different from <code>countOrbitsImpl</code>, it just isn't adding anything up.</p>
<p>Once we have the tree of depths, we want to sum it. Fortunately, <code>Tree</code> has a <a href="https://hackage.haskell.org/package/base-4.14.0.0/docs/Data-Foldable.html" rel="nofollow noreferrer"><code>Foldable</code></a> instance. Which means it's a valid input to <code>sum</code>. Thus, you can write <code>countOrbits</code> as</p>
<pre class="lang-hs prettyprint-override"><code>countOrbits :: STree -&gt; Integer
countOrbits = sum . mkDepthTree 0
    where mkDepthTree depth (Node _ subForest) = Node depth (map (mkDepthTree (depth+1)) subForest)
</code></pre>
<p>I used your indentation, although I personally prefer using 2 spaces, putting a newline after <code>where</code> and then indenting the line after by 2 more.</p>
<h2>Which to prefer?</h2>
<p>In a function that is this simple, I wouldn't say either version is necessarily better. Converting to a tree of depths then summing feels more elegant (it can almost be written as a <code>foldMap</code> if you didn't need the depth information), but it's also slightly harder to understand. Recursing directly is slightly clunkier, but IMO easier to understand.</p>
<p>So it's your decision.</p>
<h1>More to come?</h1>
<p>It got kind of late so I'm stopping this review. I'll see if I can edit in a review of <code>findMinimumTransfers</code> later.</p>
    </div>