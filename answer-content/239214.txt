<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There is nothing to add more than @potato's answer. However, I just want to re-enforced the answer. </p>

<p>The naming convention for <code>TimeDateCreated</code> can be changed to <code>CreatedOn</code> or <code>CreatedDate</code> or any related naming for creation date. The keynote here is that you don't need to specify the datatype name in the properties as the property is public and I clearly can see its datatype. Then, why should I need to include it in the its name ? since I know the datatype, I need to know what value should this property store. So, here comes the good naming convention. Doesn't matter short or long names, as long as it's describing the role of the property clearly. </p>

<p>The other note is the <code>VoteUp()</code> and <code>VoteDown()</code>, there is no need for exceptions, just skip voting if user already voted. </p>

<pre><code>// default : VoteCount == 0 (user did not up or down voted).
// When upvote, VoteCount == 1
// when downvote, VoteCount == VoteCount - 1
public void VoteUp()
{
    if(VoteCount == -1 || VoteCount == 0)
    {
        VoteCount += 1;
    }
}

public void VoteDown()
{
    if(VoteCount == 0 || VoteCount == 1)
    {
        VoteCount -= 1;
    }
}
</code></pre>

<p>Now, you can get rid of <code>HasVotedUp</code> and <code>HasVotedDown</code>. You only need to throw an exception if there is an actual process breaking. This means, exceptions used to throw an error if it's breaking one of your logic's core requirements. For instance, <code>Post</code> requires a title. So, every post must have a title. in this case we can do : </p>

<pre><code> public Post(string title, string description)
{
    if(string.IsNullOrEmpty(title)) { throw new ArgumentNullException(nameof(title)); }

    Title = title;
    Description = description;
    TimeDateCreated = DateTime.UtcNow;
    VoteCount = 0;
}
</code></pre>

<p>so, you're enforcing the requirement here. This class won't be initiated unless there is a title with at least one character. </p>

<p>While Voting, is an optional requirement, user can upvote, downvote, or nothing. User only can upvote or downvote once. If you throw an exception in this part, you'll break the whole process (which might store valid arguments). So, just skipping it with an <code>if</code> statement without any exceptions would be our best approach to not break the application. </p>

<p>You have to use your reasoning judgement on your code, try always to link it to a real world application or use case, this would give you a really good judgement on what you will do next. </p>
    </div>