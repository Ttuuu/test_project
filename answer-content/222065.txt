<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><pre><code>//since std::thread objects are not copiable, it doesn't make sense for a thread_pool
//  to be copiable.
</code></pre>

<p>True. The default copy constructor would be ill-formed, so it is not emitted, so you don't need to manually disable it. Same for the assignment operator. It's even worse for <code>std::mutex</code> and <code>std::condition_variable</code> which cannot even be moved. You can make them and implicitly <code>thread_pool</code> movable by using a <code>std::unique_ptr</code> instead, which might be a reasonable trade-off in favor of usability.</p></li>
<li><p>I am required to specify the number of threads in the thread-pool. It would be nice if it would default to <code>std::thread::hardware_concurrency()</code> instead.</p></li>
<li><p>There is a lack of forwarding. I want </p>

<pre><code>thread_pool{1}.execute([up = std::make_unique&lt;int&gt;(1)] (std::unique_ptr&lt;int&gt;) {},
    std::make_unique&lt;int&gt;(42));
</code></pre>

<p>to compile, but it doesn't, because your <code>std::bind(function, args...)</code> makes a copy of the arguments and the callable. Simply doing </p>

<pre><code>std::bind(std::forward&lt;Function&gt;(function), std::forward&lt;Args&gt;(args)...)
</code></pre>

<p>does not compile either and I don't like <code>std::bind</code> in general, so here is a lambda instead:</p>

<pre><code>[f = std::move(function), largs = std::make_tuple(std::forward&lt;Args&gt;(args)...)] () mutable {
    return std::apply(std::move(f), std::move(largs));
}
</code></pre>

<p>I heard that C++20 will support this properly and allow <code>[largs = std::forward&lt;Args&gt;(args)...]</code>, but C++17 doesn't.</p></li>
<li><p><code>[task(std::move(task_pkg))]() mutable { task(); }</code> can be replaced by <code>std::move(task_pkg)</code>.</p></li>
<li><p><code>//  This exists so that _Func may be inferred from f.</code>
You should not need to do that anymore with functions in C++17. That's what deduction guides are for. In theory you add</p>

<pre><code>template &lt;typename F&gt;
_task_container(F) -&gt; _task_container&lt;std::decay_t&lt;F&gt;&gt;;
</code></pre>

<p>and can then replace <code>allocate_task_container</code> with <code>_task_container</code>. In practice ... <a href="https://stackoverflow.com/questions/46103102">things are broken</a>.</p></li>
</ol>
    </div>