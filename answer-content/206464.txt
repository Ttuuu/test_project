<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I've refactored this and splitted the single method into multiple smaller ones. While reading about the <code>*.cfg</code> there was a link to <code>json</code> so I used this for the config. Now I have two of them: a local one, with only a single path:</p>

<pre class="lang-js prettyprint-override"><code>{
    "private_config_path":"c:\\home\\projects\\classified\\python\\sanipyzer\\config.json"
}
</code></pre>

<p>and a <em>secret</em> one with all the rules:</p>

<pre class="lang-js prettyprint-override"><code>{
    "scan_dirs": [
        "c:\\..",        
    ],
    "ignore_dirs": [
        ".git",
        "bin",
        "obj",
        ".vs"
    ],
    "ignore_files": [
        "dll",
        "exe",
        "pdb",
        "map"
    ],
    "forbidden_pattern": "..."
}
</code></pre>

<p>I've read about the <code>*args</code> and <code>**kwargs</code> and moved the stopwatch to a decorator (this is really cool and I already miss it in C#). This is now a part of my <code>reusable.py</code>.</p>

<pre><code>import time

def log_elapsed(func):
    def measure(*args, **kw):
        start = time.perf_counter()
        func(*args, **kw)
        end = time.perf_counter()
        elapsed = round(end - start, 2)
        print(f"'{func.__name__}' elapsed: {elapsed} sec")
    return measure
</code></pre>

<p>The <code>main.py</code> has grown a little bit with its multiple functions but there are no global variables anymore and all values are passed via parameters. I'm not sure this is the best way and looks somehow verbose but I'll keep reading and the next script will be better. At the time of writing it I still don't know anything about classes in python.</p>

<pre><code>import os
import time
import itertools
import shutil
import re
import json
import importlib.util
from pprint import pprint

from reusable import log_elapsed

def format_filemtime(path):
    filemtime = os.path.getmtime(path)
    return time.strftime('%Y-%m-%d', time.gmtime(filemtime))

def is_ignored_dir(dirpath, ignore_dirs):
    for dir in ignore_dirs:
        pattern = r"\\" + re.escape(dir) + r"(\\|$)"
        if re.search(pattern, dirpath):
            return True
    return False

def is_ignored_file(file_name, ignore_files):
    for ext in ignore_files:
        pattern = r"\." + ext + "$"
        if re.search(pattern, file_name):
            return True
    return False

def contains_forbidden_text(filename, re_forbidden):
    with open(filename, encoding="utf8", errors="ignore") as searchable:
        text = searchable.read()
        return True if re_forbidden.search(text) else False

def files_containing_forbidden_text(dirpath, filenames, re_forbidden):
    for filename in filenames:
        full_name = os.path.join(dirpath, filename)
        if contains_forbidden_text(full_name, re_forbidden):
            yield filename

def searchable_files(filenames, ignore_files):
    for filename in filenames:
        if not is_ignored_file(filename, ignore_files):
            yield filename

def files_to_sanitize(path, ignore_dirs, ignore_files, re_forbidden):    
    for (dirpath, dirname, filenames) in os.walk(path):
        if is_ignored_dir(dirpath, ignore_dirs):
            continue
        filenames = searchable_files(filenames, ignore_files)
        filenames = files_containing_forbidden_text(dirpath, filenames, re_forbidden)
        for filename in filenames:
            full_name = os.path.join(dirpath, filename)
            yield full_name

def load_config():
    with open("config.json", "r") as f:
       return json.load(f)

def load_rules(path):
    with open(path, "r") as f:
       return json.load(f)

# --- --- ---

@log_elapsed
def main():    

    config = load_config()
    rules = load_rules(config["private_config_path"])

    re_forbidden = re.compile(rules["forbidden_pattern"])

    for path in rules["scan_dirs"]:
        for filename in files_to_sanitize(path, rules["ignore_dirs"], rules["ignore_files"], re_forbidden):
            pprint(filename)

if __name__ == '__main__':
    main()
</code></pre>

<p>In the next step I will use this script (with small changes) as a <a href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks" rel="nofollow noreferrer">Git Hook</a> for preventing commits when there are files that need to be sanitized first. (I hadn't known about this trick when I started with it thus the list of directories to scan)</p>
    </div>