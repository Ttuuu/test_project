<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Generally speaking, you can resolve if/else logic by using multiple clauses for the same predicate, as multiple clauses implicitely represent 'or' or 'case', e.g.:</p>
<pre><code>foo([[]], Child) :-
   Child = [c(New_Score,G1,Pos),P].
foo(Reverse_Path, Child) :-
   Child = [c(New_Score,G1,Pos),P|Reverse_Path].
bar(Reverse_Path, Child, NewAgenda, BrandNewAgenda) :-
   memberchk(Child,NewAgenda),
   addChildren(Others,Reverse_Path,Current,NewAgenda,Target,BrandNewAgenda).
bar(Reverse_Path, Child, [], BrandNewAgenda) :-
   BrandNewAgenda = [Child].
bar(Reverse_Path, Child, NewAgenda, BrandNewAgenda) :-
   New_Score =&lt; FP,
   BrandNewAgenda = [Child|NewAgenda].
bar(Reverse_Path, Child, NewAgenda, BrandNewAgenda) :-
   append(NewAgenda, [Child], BrandNewAgenda).

main(Reverse_Path, BrandNewAgenda) :-
   foo(Reverse_Path, Child),
   bar(Reverse_Path, Child, [], BrandNewAgenda).
</code></pre>
<p>This is just a rough sketch, there are a lot of loose ends here like variables <code>Others</code>, <code>Target</code> or <code>Result</code> (I guess you are juggling too many variables anyway), but I hope you get the gist of it:</p>
<ul>
<li>Decompose into multiple simpler predicates that encode alternatives through multiple clauses.</li>
<li>Bind results to "out" variables in the clause head (like <code>Child</code> in <code>foo/2</code> or <code>BrandNewAgenda</code> in <code>bar/4</code>).</li>
<li>Compose the smaller predicates in a "main" predicate that glues them togehter.</li>
</ul>
    </div>