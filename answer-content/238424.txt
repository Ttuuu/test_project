<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some quick remarks:</p>

<ul>
<li><p>Why do <code>FullCart.CartList.Count &lt;= 0 || !FullCart.CartList.Any()</code>? That's the same check twice.</p></li>
<li><p>Use proper variable names: <code>var yx</code> is meaningless.</p></li>
<li><p>Do not hardcode these kind of things: <code>new RestAPI("http://xxxxx/wp-json/wc/v2/", "xxxxxxxxxxxxxxxxxxxxxxxxx", "cs_xxxxxxxxxxxxxxxxxxxxxxxx");</code>. API urls etc. should be in config files.</p></li>
<li><p>Do not use magic strings: <code>"on-hold"</code> in <code>var order = new Order { status = "on-hold", customer_id = Users.CId };</code> should really be an <code>enum</code>, or at least a centrally configured <code>const string</code>. Same for <code>item.StockStatus == "instock"</code> and other such items.</p></li>
<li><p>Why is a single user represented by the object <code>Users</code> (as in <code>Users.LoggedIn</code> and <code>Users.CId</code>)?</p></li>
<li><p>Do not leave out braces around large <code>foreach</code> sections etc.</p></li>
<li><p>Where did you learn this: <code>item.StockStatus is string stringValue &amp;&amp; string.IsNullOrWhiteSpace(stringValue) || item.StockStatus == null</code>? Why use this elaborate way when all you need is <code>string.IsNullOrWhiteSpace(item.StockStatus)</code>? (And again: <code>StockStatus</code> should be an <code>enum</code>.)</p></li>
<li><p>Besides the meaningless variable name, what bothers me most about <code>var a = Convert.ToInt32(item.ProductQuantity);</code> is that <code>ProductQuantity</code> isn't an <code>int</code> to begin with.</p></li>
<li><p><code>order.line_items</code>: <code>line_items</code> should be Pascalcased. Moreover, property names and variable names etc. should only contain alphanumeric characters (exception: private class-wide variables can have an underscore at the start). Ditto <code>product_id</code> etc.</p></li>
<li><p>Please get a native English speaker to spellcheck your messages. They often contain spelling errors and incorrect capitalization (e.g. <code>"Order Cant be Placed"</code>, <code>"Cart seem's to be empty, We cant checkout nothing"</code>,...). Also, <code>"Woops"</code> is not a word I expect to see in a e-commerce application.</p></li>
<li><p>Split your methods into smaller ones. For instance, <code>BeginCheckout()</code> is 140 lines and mixes UI logic with business logic. Every call to <code>Navigation</code> is wrapped in a <code>try...catch</code> block which makes things hard to follow. To me that whole method should be a class of its own.</p></li>
<li><p>Looking at <code>SingleCheck()</code> I'm baffled that you halt execution inside a foreach to wait for the user to respond in case of a lack of stock. Why not build a report instead and then bother the user only if one or more items cannot be fulfilled?</p></li>
<li><p><code>foreach (var CartItem in _simpleCartlist)</code>: variables should be camelCased.</p></li>
<li><p>Some of the business logic is just incomprehensible: <code>if (_varProduct.stock_quantity == null) { _varProduct.stock_quantity = 999999; }</code> How does that even make sense?</p></li>
<li><p>How does this code even hang together? I don't see where <code>_currentListItem</code> is set. I don't see why you should need "6 seconds per item". I don't see calls to the APIs.</p></li>
</ul>

<hr>

<p>My main recommendation: split these large methods up into small ones, so the program flow becomes much clearer. Do not constantly bounce between business logic and UI calls. </p>
    </div>