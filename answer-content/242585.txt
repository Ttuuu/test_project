<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Very long strings</strong></p>

<p>String length is not limited to <code>INT_MAX</code>.   Better to use <code>size_t</code></p>

<pre><code>// int len1 = strlen(num1);
size_t len1 = strlen(num1);
</code></pre>

<p><strong><code>const</code></strong></p>

<p>As code does not alter data pointed to by <code>num1, num2</code>, use <code>const</code>.  This allows code to be called with <code>const</code> strings,  add info for a user to know the strings are not changed and provides easier to find compiler optimizations.</p>

<pre><code>// addStrings(char * num1, char * num2){
addStrings(const char * num1, const char * num2){
</code></pre>

<p><strong>Error check</strong></p>

<p>As code is attempting to handle arbitrary long numbers, a failed allocation is even more likely.  Add a check.</p>

<pre><code>char *result = malloc(result_len+1);
if (result == NULL) {
  // maybe a message on stderr?
  return NULL;
}
</code></pre>

<p>Pedantic code would also check for addition overflow.</p>

<pre><code>size_t len1 = strlen(num1);
size_t len2 = strlen(num2);
if (SIZE_MAX - len1 &lt;= len2) {
  return NULL;
}
</code></pre>

<p><strong><code>zero</code> vs. <code>'0'</code></strong></p>

<p>Code promotes sub-<code>int</code> operands to <code>int</code> before subtraction.  Might as well use an <code>int zero</code>.</p>

<p>Subtracting <code>'0'</code> is idiomatic.  Recommend: </p>

<pre><code>//char zero='0';
//        d1 = (*p1)-zero;
          d1 = *p - '0';
</code></pre>

<p><strong>Code should return the allocated pointer</strong></p>

<p><strong>UB with empty string</strong></p>

<p>Corner concern:</p>

<pre><code>char *p1 = num1 + len1-1;
// same as 
char *p1 = num1 - 1; //UB
</code></pre>

<p><strong>Sample</strong></p>

<p>Note: <em>untested</em></p>

<pre><code>char* addStrings(const char *num1, const char *num2) {
  size_t len1 = strlen(num1);
  size_t len2 = strlen(num2);
  if (len1 &gt;= SIZE_MAX - 1 - len2) {
    return NULL;
  }
  size_t len_max = len1 &gt; len2 ? len1 : len2;
  size_t len_min = len1 &lt; len2 ? len1 : len2;

  char *result = malloc(len_max + 2);  // +1 for carry, +1 for \0
  if (result == NULL) {
    return NULL;
  }

  char rp = result + len_max + 1;
  *rp = '\0';
  char *p1 = num1 + len1;
  char *p2 = num2 + len2;

  int acc = 0;
  len1 -= len_min;
  len2 -= len_min;
  while (len_min-- &gt; 0) {
    acc += *--p1 - '0' + *--p2 - '0';
    *--rp = acc % 10 + '0';
    acc /= 10;
  }
  while (len1-- &gt; 0) {
    acc += *--p1 - '0';
    *--rp = acc % 10 + '0';
    acc /= 10;
  }
  while (len2-- &gt; 0) {
    acc += *--p2 - '0';
    *--rp = acc % 10 + '0';
    acc /= 10;
  }
  if (acc) {
    *--rp = acc % 10 + '0';

  } else {
    memmove(rp - 1, rp, len_max + 1);
    rp--;
  }
  return rp;
}
</code></pre>
    </div>