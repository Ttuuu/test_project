<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This post is form a long time ago, but I scrolled past it, and I think it could use some improvements. I will try to stay in <a href="/questions/tagged/python-2.x" class="post-tag" title="show questions tagged 'python-2.x'" rel="tag">python-2.x</a> since that is what you used.</p>

<h1>Review</h1>

<ol>
<li><blockquote>
<pre><code>men_prefer_list = [[2, 3, 1],
                  [3, 1, 2],
                  [2, 3, 1],
                  [1, 2, 3],
                  [1, 3, 2]]
</code></pre>
</blockquote>

<p>Globals should be named, <code>GLOBALS</code>. All caps is the standard way to write global variables.</p></li>
<li><blockquote>
<pre><code>proposals_counter = []
men_engaged = []
women_engaged = []
for i in range(len(men_prefer_list)):
    proposals_counter.append(0)
for i in range(len(men_prefer_list)):
    men_engaged.append(0)
for i in range(len(women_prefer_list)):
    women_engaged.append(0)
</code></pre>
</blockquote>

<p>Variables should be as close to the scope as possible. When you modify globals somewhere in your program it might become really hard to track that 1 bug.</p></li>
<li><p>You could use list comprehension to declare those variables in one line like this:</p>

<pre><code>proposals_counter = [0 for _ in men_prefer_list]
</code></pre></li>
<li><p>When using list comprehension and you don't need the variable, it is Python idiom to write <code>_</code> instead.</p></li>
<li><blockquote>
<pre><code>def inverse_arr(arr):
    temp_arr = arr[:]
    arr_inverse = []
    for k in range(len(temp_arr)):
        arr_inverse.append(0)
    for k in range(len(temp_arr)):
       arr_inverse[temp_arr[k]-1] = k+1
    return arr_inverse
</code></pre>
</blockquote>

<p>You don't need to copy the variable, since you do not change the original list. That temp var is not needed.</p></li>
<li><p>This could also use some list comprehension, with proposed changes that becomes:</p>

<pre><code>def inverse_arr(arr):
    arr_inverse = [0 for _ in arr]
    for k in range(len(arr)):
       arr_inverse[arr[k]-1] = k+1
    return arr_inverse
</code></pre></li>
<li><blockquote>
<pre><code>for i in range(len(men_prefer_list)):
</code></pre>
</blockquote>

<p>Use <code>enumerate</code>; see the relevant <a href="https://www.python.org/dev/peps/pep-0279/" rel="nofollow noreferrer">PEP article</a>.</p></li>
<li><blockquote>
<pre><code>print "Trying to find a good partner for Man #", i+1
</code></pre>
</blockquote>

<p>Use parenthesis with the <code>print ()</code> statements, this will make your code work in <a href="/questions/tagged/python-3.x" class="post-tag" title="show questions tagged 'python-3.x'" rel="tag">python-3.x</a>.</p></li>
<li><p>You could use some formatting to make the string concatenations a bit nicer looking:</p>

<pre><code>print ("Trying to find a good partner for Man #{0}".format(i+1))
</code></pre></li>
<li><blockquote>
<pre><code>temp=women_prefer_list[men_prefer_list[i][j]-1]
temp2=temp[:]
inverse = inverse_arr(temp2)
</code></pre>
</blockquote>

<p>Why all these temp variables? They are never used, and since the original list is not altered. It makes no sense to use a temp variable. Just write:</p>

<pre><code>inverse = inverse_arr(women_prefer_list[men_prefer_list[i][j]-1])
</code></pre></li>
<li><blockquote>
<pre><code>def some_man_is_alone_but_hasnt_proposed_to_all_women():
    result = []
    for i in range(len(men_engaged)):
        if men_engaged[i] == 0:
            if proposals_counter[i] &lt; len(women_engaged):
                result.append(True)
                result.append(i)
                return result
    result.append(False)
    result.append(-1)
    return result
</code></pre>
</blockquote>

<p>Again use list comprehension; you can use conditionals in list comprehension, which makes this code block almost a one-liner.</p></li>
<li><p>Naming is tough, but <code>some_man_is_alone_but_hasnt_proposed_to_all_women()</code> seems waaay too long a name; maybe rename it to <code>men_all_proposed()</code> ?</p>

<pre><code>return [i for i,e in enumerate(men_engaged) if proposals_counter[i] &lt; len(women_engaged) and not men_engaged[i]]
</code></pre>

<p>This would change the logic a bit, as the list will be empty if all men proposed to all woman, but since empty lists are considered falsey in Python you could check like this: </p>

<pre><code>if not men_all_proposed()
</code></pre>

<p><strong>BUT</strong> I think if you put this conditional before your <code>FIRST ITERATION</code> block, this would be one loop, because after this conditional you kinda repeat yourself a lot.</p>

<pre><code>def marriage(preferred_men, preferred_women):
    proposed = [
                    { woman: False for woman in range(len(preferred_women)) }
                    for man in preferred_men
               ]
    engaged_men=[ None for _ in preferred_men ]
    engaged_woman=[ None for _ in preferred_women ]

    while not all(v for man in proposed for v in man.values()):
        for man in range(len(engaged_men)):
            for woman in preferred_men[man]:
                if not engaged_men[man] is None:
                    break
                if not proposed[man][woman]:
                    if engaged_woman[woman] is None:
                        engaged_men[man] = woman
                        engaged_woman[woman] = man
                    else:
                        if preferred_women[woman].index(engaged_woman[woman]) &gt; preferred_women[woman].index(man):
                            engaged_men[engaged_woman[woman]] = None
                            engaged_woman[woman] = man
                            engaged_men[man] = woman

                    proposed[man][woman] = True

    return engaged_men, engaged_woman

if __name__ == '__main__':
    preferred_men = [[1, 2, 0],
                     [2, 0, 1],
                     [1, 2, 0],
                     [0, 1, 2],
                     [0, 2, 1]]

    preferred_women = [[0, 1, 2, 3, 4],
                       [1, 2, 3, 4, 0],
                       [3, 4, 0, 1, 2]]

    print(marriage(preferred_men, preferred_women))
</code></pre></li>
</ol>
    </div>