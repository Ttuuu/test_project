<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Naming Conventions</h3>
<ul>
<li>Avoid <em>java</em> naming conventions <code>void save</code>. Use <em>C#</em> conventions instead <code>void Save</code>.</li>
<li>Favor verbs <code>Initialise</code> over abbreviations <code>Init</code> for method names.</li>
</ul>
<hr>
<h3>Type Conventions</h3>
<ul>
<li>Don't use <code>struct</code> for mutable objects. Use <code>class</code> instead.</li>
</ul>
<hr>
<h3>Design Considerations</h3>
<p>Others have already pointed out <code>Settings</code> could be used as a facade for your application, splitting the interface from the internal implementation. Ideally, you would want to create an interface for your <em>settings providers</em> and have one implementation that uses the auto-generated <code>Properties.Settings</code> class. For the sake of limiting our scope, let's work directly on the auto-generated settings.</p>
<pre><code> public class Settings
    {
        private Properties.Settings settings;

        Settings(Properties.Settings settings)
        {
            this.settings = settings ?? throw new ArgumentNullException(nameof(settings));
        }
      
        // ..
    }
</code></pre>
<p>We could then write cleaner code with much less redudancy.</p>
<pre><code>        public int WorkMinutes
        {
            get =&gt; settings.WorkMinutes;
            set
            {
                settings.WorkMinutes = value;
                Save();
            }
        }

        public int RestMinutes
        {
            get =&gt; settings.RestMinutes;
            set
            {
                settings.RestMinutes = value;
                Save();
            }
        }
</code></pre>
<p>You no longer have a static class, but perhaps you would like a shared instance available throughout your application. Let's forsee a shared instance.</p>
<pre><code>private static Settings shared;
public static Settings Default =&gt; shared ?? (shared = new Settings(Properties.Settings.Default));
</code></pre>
<p>Perhaps we could auto-initialise our settings in the constructor.</p>
<pre><code> Settings(Properties.Settings settings)
        {
            this.settings = settings ?? throw new ArgumentNullException(nameof(settings));
            Initialise();
        }
</code></pre>
<hr>
<h3>Extended Design</h3>
<p>In a real application, it's likely <code>Settings</code> would end containing dozens of seperate settings properties. Perhaps the settings would also be editable at runtime. In addition, <code>Initialise</code> would have to call <code>Save</code> on each individual property. We could use a batch update on demand to optimize our class.</p>
<p><code>Initialise</code> would look like this:</p>
<pre><code> public void Initialise()
 {
     using (var batch = new Batch(this))
     {
         if (WorkMinutes == 0)
         {
             WorkMinutes = 5;
         }

         if (RestMinutes == 0)
         {
             RestMinutes = 5;
         }

         // other settings ..

     } // &lt;- this calls Save() once
 }
</code></pre>
<p>The pattern can be implemented as follows:</p>
<pre><code>        private void Save()
        {
            if (!deferred)
            {
                settings.Save();
            }
        }

        private bool deferred;

        public IDisposable StartBatch()
        {
            return new Batch(this);
        }

        private class Batch : IDisposable
        {
            Settings source;

            public Batch(Settings source)
            {
                Debug.Assert(source != null);
                this.source = source;
                this.source.deferred = true;
            }

            public void Dispose()
            {
                source.deferred = false;
                source.Save();
            }
        }
</code></pre>
    </div>