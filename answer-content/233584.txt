<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Does it have to be an <code>Array</code>? I.e. is the order important?</p>

<p>If not, then there is actually a data structure that does <em>exactly</em> what you want: the <em>multiset</em>. A multiset is just like a <em>set</em>, except that its elements have a <em>multiplicity</em>. In other words, a set can tell you whether or not an element is a member, a multiset in addition can tell you <em>how often</em> it is a member.</p>

<p>Basically, if you use a multiset, you will not have to do <em>anything</em>, since the multiset keeps track of the multiplicity (i.e. your <code>quantity</code>) for you.</p>

<p>There is no multiset in the Ruby core library or standard library, but there are a couple of third-party libraries and gems. <a href="https://maraigue.hhiro.net/multiset/" rel="nofollow noreferrer">I'll just grab one randomly</a>, it doesn't really matter which one; their APIs are fairly similar.</p>

<pre class="lang-rb prettyprint-override"><code>require 'multiset'

price_params_items = %w[item2 item1 item3 item2 item3 item3]

result = Multiset[*price_params_items]
#=&gt; #&lt;Multiset:#2 "item2", #1 "item1", #3 "item3"&gt;
</code></pre>

<p>And that's it! You might ask yourself, where is the algorithm gone? That is a general property of programming: if you find the right data structure(s), the algorithm(s) become(s) much simpler, or in this case, even vanishes completely.</p>

<p>Unfortunately, for this specific implementation of multiset, there is no direct way to retrieve the multiplicity of an element, but you can convert it to a hash, and then you get what you need:</p>

<pre class="lang-rb prettyprint-override"><code>result.to_hash
#=&gt; { "item2" =&gt; 2, "item1" =&gt; 1, "item3" =&gt; 3 }
</code></pre>
    </div>