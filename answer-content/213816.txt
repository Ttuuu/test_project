<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There is an alternative way using the <code>str</code> functions of <code>pandas.Series</code>, which has the advantage that they are usually faster. In this case you can use <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.str.replace.html" rel="nofollow noreferrer"><code>pandas.Series.str.replace</code></a>, which can take a regex to match strings against and a callable to replace them with, which gets passed the regex match object:</p>

<pre><code>def repl(m):
    k = m.group()
    return k + x[k]

df.q.str.replace(r'\[.*\]', repl)
# 0     hey this is [a](1234)
# 1    why dont you [b](2345)
# 2        clas is [c](xyzad)
# Name: q, dtype: object
</code></pre>

<p>This uses the fact that your keys to replace seem to follow a pattern, though, and works only as long as you can write a regex to capture it. In that sense your solution is more general.</p>

<p>One thing that you can change in your approach is the check for <code>if i in data</code>. It is superfluous, since <code>str.replace</code> will just ignore it if the string to replace does not appear in the string (it has to search linearly through the whole string to figure that out, but so does <code>i in data</code>).</p>

<p>In addition, instead of iterating over the keys with <code>for i in x.keys():</code>, you can just do <code>for i in x:</code>. But since you also need the value, you can directly do <code>for key, repl in x.items(): data = data.replace(key, repl)</code>.</p>
    </div>