<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>That is not the Sieve of Eratosthenes</h3>

<p>The <a href="https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes" rel="nofollow noreferrer">Sieve of Eratosthenes</a> computes <em>multiples</em>
of each found prime to mark subsequent composite numbers in the sieve.
Your algorithm computes the <em>remainder</em> of all subsequent numbers instead.
That makes a huge difference. I'll come back to that later, let's start
with a</p>

<h3>Review of your current code</h3>

<p>There is a inconsistency here:</p>

<pre><code>func generatePrimes(to n: Int) -&gt; [Int] {
    // ...
    var arr : [Int] = Array&lt;Int&gt;(stride(from: 3, to: n, by: 2))     
    // ...
}
</code></pre>

<p>The function – as I understand the <code>to</code> parameter –
computes all primes up to <em>and including</em> <code>n</code>. On the other hand,
<code>stride(from: 3, to: n, by: 2)</code> does <em>not</em> include the upper bound,
and that is easily verified with</p>

<pre><code>print(generatePrimes(to: 11)) // [2, 3, 5, 7]
</code></pre>

<p>So either rename the function to <code>func generatePrimes(below n: Int)</code>
or use <code>stride(from: 3, through: n, by: 2)</code> to include the upper bound.
I'll do the latter for this review. </p>

<p>It would also be a good idea to add a documentation comment which
unambiguously documents the function parameters.</p>

<p>The explicit type annotation is not needed, and the array creation
can be simplified to</p>

<pre><code>var arr = Array(stride(from: 3, through: n, by: 2))
</code></pre>

<p>Why is the limit number expected to be greater than 5? That is an
unnecessary restriction and would be unexpected for a caller of your function. It may be that <em>your implementation</em>  does not work if
<span class="math-container">\$ n \le 5 \$</span>, but it would be easy to handle that case separately:</p>

<pre><code>if n &lt;= 5 {
    return [2, 3, 5].filter { $0 &lt;= n }
}
</code></pre>

<p>In </p>

<pre><code>    let num : Int = arr.remove(at: index)
</code></pre>

<p>the type annotation on the left is again not needed.</p>

<p>(<em>Remark:</em> This </p>

<pre><code>    arr = arr.filter { $0 % num != 0 }
</code></pre>

<p>can be replaced by the more efficient </p>

<pre><code>    arr.removeAll(where: { $0 % num == 0 })
</code></pre>

<p>in a <em>future version</em> of Swift, when <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0197-remove-where.md" rel="nofollow noreferrer">SE-0197 Adding in-place removeAll(where:) to the Standard Library</a> is implemented in Swift 4.2.)</p>

<p>Here</p>

<pre><code>    if arr[index + 1] &gt;= Int(floor(sqrtf(Float(n)))) { break }
</code></pre>

<p>is a hidden bug: As</p>

<pre><code>print(generatePrimes(to: 26)) // [2, 3, 5, 7, 11, 13, 17, 19, 23, 25]
</code></pre>

<p>demonstrates, you are leaving the loop to early.
I would also compute the square root only once, and use double-precision
arithmetic: The 24 bit significand of a <code>Float</code> cannot represent large
integers correctly (compare <a href="https://codereview.stackexchange.com/questions/177923/computing-the-integer-square-root-of-large-numbers">Computing the integer square root of large numbers</a>).</p>

<p>Finally, the function should compute the result, but not <em>print</em> it, i.e. this</p>

<pre><code>//Print Statements
print("Prime numbers under \(n):")
_ = arr.enumerated().map { (index, element) in print("\t\(index + 1). \(element)") }
</code></pre>

<p>should be removed. It is generally a good habit to separate computation from I/O.
In addition, this distorts the benchmark results, because you measure also the
time for converting the numbers to strings, and the time to print these strings
(which depends on the output device, printing to a file is faster than printing
to the Terminal or the Xcode console).</p>

<p>With all changes suggested so far, your function would look like this:</p>

<pre><code>/// Compute list of primes
///
/// - Parameter n: The upper bound
/// - Returns: An array with all primes &lt;= `n`
func generatePrimes(to n: Int) -&gt; [Int] {

    if n &lt;= 5 {
        return [2, 3, 5].filter { $0 &lt;= n }
    }

    var arr = Array(stride(from: 3, through: n, by: 2))

    let squareRootN = Int(Double(n).squareRoot())
    for index in 0... {
        if arr[index] &gt; squareRootN { break }
        let num = arr.remove(at: index)
        arr = arr.filter { $0 % num != 0 }
        arr.insert(num, at: index)
    }

    arr.insert(2, at: 0)
    return arr
}
</code></pre>

<h3>Using the Sieve of Eratosthenes</h3>

<p>As I said above, your algorithm is different from the Eratosthenes sieve.
Each time a prime number <span class="math-container">\$ p \$</span> is found, your code does trial divisions for
<em>all</em> remaining numbers to remove multiples of <span class="math-container">\$ p \$</span>.
The Eratosthenes sieve computes multiples of <span class="math-container">\$ p \$</span> instead:</p>

<pre><code>p*p, p*p + p, p*p + 2*p, p*p + 3*p, ...
</code></pre>

<p>and marks these as composite. Note that there are far less values to compute.</p>

<p>Also your algorithm removes and inserts array elements frequently.
That is slow because the remaining elements must be shifted to the left
or to the right.</p>

<p>The Eratosthenes sieve works with a fixed-sized boolean array instead.</p>

<p>Here is a very simple straight-forward implementation in Swift:</p>

<pre><code>func eratosthenesSieve(to n: Int) -&gt; [Int] {
    var composite = Array(repeating: false, count: n + 1) // The sieve
    var primes: [Int] = []

    if n &gt;= 150 {
        // Upper bound for the number of primes up to and including `n`,
        // from https://en.wikipedia.org/wiki/Prime_number_theorem#Non-asymptotic_bounds_on_the_prime-counting_function :
        let d = Double(n)
        let upperBound = Int(d / (log(d) - 4))
        primes.reserveCapacity(upperBound)
    } else {
        primes.reserveCapacity(n)
    }

    let squareRootN = Int(Double(n).squareRoot())
    var p = 2
    while p &lt;= squareRootN {
        if !composite[p] {
            primes.append(p)
            for q in stride(from: p * p, through: n, by: p) {
                composite[q] = true
            }
        }
        p += 1
    }
    while p &lt;= n {
        if !composite[p] {
            primes.append(p)
        }
        p += 1
    }
    return primes
}
</code></pre>

<p>The only optimization I did was to reserve capacity for the result
array in order to avoid reallocations. </p>

<p>This is already considerably faster than your original code.
Here is my benchmarking code:</p>

<pre><code>func benchmark(_ ident: String, _ function: (Int) -&gt; [Int], to n: Int) {
    let start = Date()
    let primes = function(n)
    let elapsed = Date().timeIntervalSince(start)
    print(ident, primes.count, "primes up to", n, String(format: "time: %.3f", elapsed))
}

benchmark("original", generatePrimes, to:     100_000)
benchmark("original", generatePrimes, to:   1_000_000)
benchmark("original", generatePrimes, to:  10_000_000)

print()

benchmark("eratosthenes", eratosthenesSieve, to:       100_000)
benchmark("eratosthenes", eratosthenesSieve, to:     1_000_000)
benchmark("eratosthenes", eratosthenesSieve, to:    10_000_000)
benchmark("eratosthenes", eratosthenesSieve, to:   100_000_000)
benchmark("eratosthenes", eratosthenesSieve, to: 1_000_000_000)
</code></pre>

<p>On a 1.2 GHz Intel Core m5 MacBook (Retina, 12-inch, Early 2016) 
with 8GM RAM I get the following results (slightly reformatted to
increase the legibility):</p>

<pre>
original   9592 primes up to   100000 time: 0.038
original  78498 primes up to  1000000 time: 0.418
original 664579 primes up to 10000000 time: 9.739

eratosthenes     9592 primes up to     100000 time:  0.001
eratosthenes    78498 primes up to    1000000 time:  0.007
eratosthenes   664579 primes up to   10000000 time:  0.096
eratosthenes  5761455 primes up to  100000000 time:  1.223
eratosthenes 50847534 primes up to 1000000000 time: 15.034
</pre>

<p>This can surely be further improved, a first step would be to handle the case <code>p=2</code>
separately and to use the sieve only for odd numbers (which however complicates the
index calculations a bit).</p>

<p>But, as you see, computing the primes up to 1 billion is feasible with the sieve
of Eratosthenes (and the numbers are correct, you can compare them with 
<a href="https://primes.utm.edu/howmany.html" rel="nofollow noreferrer">https://primes.utm.edu/howmany.html</a>).</p>

<h3>Going for the trillion</h3>

<p>You were also thinking of computing all primes up to one trillion. That might be
a problem, no matter which algorithm you choose. According to 
<a href="https://primes.utm.edu/howmany.html" rel="nofollow noreferrer">https://primes.utm.edu/howmany.html</a>, there are 37,607,912,018 prime numbers
below 1 trillion. Even if we use 32-bit bit integers to save space, that would
still require approx 140 GB memory, which makes returning an array with all that
numbers difficult. </p>

<p>So that would require a different approach which allows to compute prime numbers in
some given range, instead of all prime numbers up to a limit.</p>
    </div>