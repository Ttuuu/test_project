<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Overcomplicated and inefficient parsing</h3>

<p>The parsing of <code>data</code> is both overcomplicated and inefficient:</p>

<ul>
<li><p>The loop is confusing, because each step has to decide between multiple possible action: split arguments, or run a command, or break. Ideally each step does one kind of thing, that would be very easy to understand</p></li>
<li><p>As the other review pointed out, invoking <code>cut</code> in a loop is inefficient. In most steps it's invoked multiple times. There are much better ways to split strings than <code>cut</code>.</p></li>
</ul>

<p>If there are no spaces in <code>data</code> (as in the example), then the loop can be replaced with:</p>

<pre><code>cmd=${data#*;___}       # extract the suffix, chopping off the beginning until ";___"
vars=${data%%;___*}     # extract the prefix, chopping off the end from ";___"
vars=(${vars//[:;]/ })  # replace : and ; with space, and convert to an array

for ((i = 0; i &lt; ${#vars[@]}; i += 2)); do
    export ${vars[i]}=${vars[i+1]}
done

"$cmd" "${@:2}"
</code></pre>

<p>I think this is easier to understand and efficient.</p>

<h3>Flawed justification to use Bash instead of Python</h3>

<blockquote>
  <p>Why? Well actually, this thing started as a pure Python script, which was calling the command through <code>subprocess.Popen</code>. But it turned out insanely hard and error-prone to run an <strong>interactive</strong> command like this where an actual human user is supposed to interact with the (running) command. This is something bash is infinitely better at.</p>
</blockquote>

<p>It's not at all clear why Bash is better at whatever "this" is.
It should not be insanely hard and error-prone to run interactive programs from Python. If you post that Python code (in another question), a reviewer is likely to be able to guide you back to sanity.</p>

<h3>Minor Bash issues</h3>

<p>Don't <code>echo</code> and pipe. Use <em>here strings</em> instead. For example, instead of <code>echo $data | cut -d ';' -f$i</code>, write <code>cut -d ';' -f$i &lt;&lt;&lt; "$data"</code>.</p>

<p>Double-quote variables used in command arguments. Instead of <code>echo $data</code>, write <code>echo "$data"</code>.</p>

<p>Double-quote variables used as commands. Instead of <code>$cmd "${@:2}"</code>, write <code>"$cmd" "${@:2}"</code>.</p>

<p>Instead of <code>i=$((i + 1))</code>, the arithmetic expression <code>((i++))</code> is probably easier to read, write and understand.</p>
    </div>