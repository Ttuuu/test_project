<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It seems to me you can get faster than quadratic if you sort the list first, and use an algorithm like this... (<a href="http://jsfiddle.net/v9ppL/4/" rel="nofollow">JSFiddle</a>)</p>

<pre><code>function complementaryPairs(a, target) {
    var count = 0,
        left = 0,
        right = a.length - 1,
        i;
    a.sort(function (a, b) {
        return a - b
    }); // [-3, -2, 0, 1, 1, 3, 3, 3, 4, 5, 8]

    // Eliminate arrays that can't contain any pairs
    if (a[left] * 2 &gt; target || a[right] * 2 &lt; target) {
        return 0;
    }
    for (; left &lt;= right &amp;&amp; a[left] * 2 &lt;= target; left++) {
        // Get rid of any values on the right that are too large 
        while (right &gt; left &amp;&amp; a[left] + a[right] &gt; target) right--;
        // Count values in between left and right which match with left
        for (i = right; i &gt; left &amp;&amp; a[left] + a[i] == target; i--) {
            count += 2;
        }
    }
    // Any values that are exactly half the target can also complement themselves
    // so count them again
    while (a[--left] * 2 == target) {
        count++;
    }
    return count;
}
</code></pre>

<p>As the starting point for <code>right</code> decreases upon each cycle of <code>left</code>, it must be less than quadratic, right? (I'm happy to be corrected on this.)</p>

<p>And the built in sort is, as far as I know, O(n log n), so we can use it without increasing the order of complexity. (Of course in a high level language this becomes irrelevant because any built in function is likely to be much faster than one we would write ourselves).</p>

<p>Edit: here's an alternative version which I think is slightly faster and makes it easier to see how it works. This is pretty clearly O(n), apart from the initial <code>sort</code> (isn't it...?) (<a href="http://jsfiddle.net/v9ppL/12/" rel="nofollow">JSFiddle</a>)</p>

<pre><code>function complementaryPairs(a, target) {
    var count = 0;
    a.sort(function (a, b) {
        return a - b
    }); 
    for (var left = 0, right = a.length - 1; left &lt; right;) {
        if (a[left] + a[right] &lt; target) {
            left++;
        } else if (a[left] + a[right] &gt; target) {
            right--;
        } else if (a[left] == a[right]) {
            // Shortcut if the value is target / 2
            return count + (right - left + 1) * (right - left + 1)
        } else {
            // Found complementary pair. Move towards middle, counting duplicates.
            for (var leftCount = 1; a[left] == a[++left]; leftCount++);
            for (var rightCount = 1; a[right] == a[--right]; rightCount++);
            count += leftCount * rightCount * 2;
        }
    }
    return count;
}
</code></pre>
    </div>