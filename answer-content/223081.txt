<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code looks good, has a docstring explaining precisely what is intended and typing annotations.</p>

<p>This is great and it also makes the review much more pleasant.</p>

<p><strong>Tests</strong></p>

<p>Before reviewing anything, I quite like adding a few test cases to see how the code behave and have a quick feedback loop if I try to change things in the code.</p>

<p>Here, based purely on the docstring, I wrote:</p>

<pre><code>assert correct_sentence("a") == "A."
assert correct_sentence("abc") == "Abc."
assert correct_sentence("abc...") == "Abc..."
assert correct_sentence("abc .  .   .") == "Abc . . ."
assert correct_sentence(" abc  de f  ") == "Abc de f."
assert correct_sentence("aBcDe FgHiJk") == "Abcde FgHiJk." # Expected ?
correct_sentence("") # What should we do ?
</code></pre>

<p>Everything looks good to me except for the last 2 cases which you may want to look at.</p>

<p><strong>More tests</strong></p>

<p>The list above is not comprehensive and should be enhanced as we go through the review/add features. While going through the code, I realised that '?' should be considered as a proper sentence end. I wrote the following test cases which do not really convince me that things are working fine.</p>

<pre><code>assert correct_sentence("a?") == "A?."
assert correct_sentence("abc.?.") == "Abc.?."
assert correct_sentence("abc..?") == "Abc..?."
</code></pre>

<p>Disclaimer: the following part of the review is based on the assumption that the current behavior is the one you want. It may not be the case but I hope the lessons provided will be interesting anyway.</p>

<p><strong>Look like a native</strong></p>

<p>I highly recommend <a href="https://nedbatchelder.com/text/iter.html" rel="noreferrer">Ned Batchelder's talk called "Loop Like A Native"</a>. The main point is that whenever we are using "range(len(iterable))" there is usually a better (more pythonic, more concise, more efficient, clearer).</p>

<p>Here:</p>

<pre><code># checking if the last symbol is any of marks
for i in range(len(marks)):
    if text[-1] != '.':
        if text[-1] == marks[i]:
            break
        else:
            text += '.'
</code></pre>

<p>can be rewritten:</p>

<pre><code># checking if the last symbol is any of marks
for mark in marks:
    if text[-1] != '.':
        if text[-1] == mark:
            break
        else:
            text += '.'
</code></pre>

<p><strong>Stopping early</strong></p>

<p>When <code>text[-1] == '.'</code>, the loop above will have no effect. Thus, we could <code>break</code> as soon as we do <code>text += '.'</code>.</p>

<p>We get</p>

<pre><code>        if text[-1] == mark:
            break
        else:
            text += '.'
            break
</code></pre>

<p>which can be rewritten:</p>

<pre><code>        if text[-1] != mark:
            text += '.'
        break
</code></pre>

<p><strong>Reorganise the logic</strong></p>

<p>Now it is clearer that <code>text[-1]</code> will stay unchanged during the whole loop as we exit the loop as soon as we do something that would change the value.</p>

<p>We can use a variable for this, we can move the check <code>if text[-1] != '.'</code> before the loop.</p>

<p>We get something like:</p>

<pre><code>last = text[-1]
if last != '.':
    for mark in marks:
        if last != mark:
            text += '.'
        break
</code></pre>

<p>Now, it is obvious that only the first elements from <code>marks</code> will ever be considered (we break at the end of the first iteration) and this explains the surprising behavior described above.</p>

<p><strong>Loop with the <code>,</code></strong></p>

<p>The second loop is commented <code># deleting redundant spaces</code> but we could literally remove it and still have the redundant spaces removed. The comment needs to be adjusted to the relevant part.</p>

<p>It looks like what you are trying to achieve is removing space before comma.</p>

<p>I've added the following test cases:</p>

<pre><code>assert correct_sentence("a,b,c,d") == "A,B,C,D."
assert correct_sentence("a, b ,c , d") == "A, b ,c, d."
assert correct_sentence("a, b ,c , d , , , ,e") == "A, b ,c, d,, , ,e."
</code></pre>

<p>Question: should we do this only when <code>word == ","</code> or should when <code>word</code> starts wich <code>","</code> ?</p>

<p>Let's see what we can try to improve.</p>

<ol>
<li>You are trying to update the list as you iterate through it. This makes everything quite fragile.</li>
<li>You are calling <code>word</code> to know the position of the word you are considering. This could be provided by <code>enumerate</code>.</li>
</ol>

<p>There are many things that are still to be improved but I think there are many defects you should try to fix first before going any further.</p>

<p>At this stage, the code looks like:</p>

<pre><code>def correct_sentence(text: str) -&gt; str:
    """
      returns a corrected sentence which starts with a capital letter
      and ends with a dot if needed. Also deletes redundant spaces.
    """
    text = text.strip()
    if not text:
        return ''

    # checking if the last symbol is any of marks
    marks = ['!', '?']
    last = text[-1]
    if last != '.':
        for mark in marks:
            if last != mark:
                text += '.'
            break

    text_l = text.split()
    for word in text_l:
        if word == ',':
            indw = text_l.index(word)
            text_l[indw - 1] += word
            text_l.remove(word)
    text_l[0] = text_l[0].title()
    # deleting redundant spaces with split &amp; join
    return ' '.join(text_l)


assert correct_sentence("a") == "A."
assert correct_sentence("a?") == "A?."
assert correct_sentence("abc") == "Abc."
assert correct_sentence("abc...") == "Abc..."
assert correct_sentence("abc.?.") == "Abc.?."
assert correct_sentence("abc..?") == "Abc..?."
assert correct_sentence("abc .  .   .") == "Abc . . ."
assert correct_sentence(" abc  de f  ") == "Abc de f."
assert correct_sentence("aBcDe FgHiJk") == "Abcde FgHiJk." # Expected ?
assert correct_sentence("") == '' # What should we do ?
assert correct_sentence("a,b,c,d") == "A,B,C,D."
assert correct_sentence("a, b ,c , d") == "A, b ,c, d."
assert correct_sentence("a, b ,c , d , , , ,e") == "A, b ,c, d,, , ,e."

</code></pre>

<p><strong>Organisation</strong></p>

<p>If you want to make you life easier, you may want to split your function into smaller functions with a single responsability. This will also make testing easier.</p>
    </div>