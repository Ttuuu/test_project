<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A few more points:</p>

<ul>
<li><p>The precision of the decimal context is set at the top-level of the code, while the result of computation is rounded within the two methods. That is not good because in this case the methods actually have no knowledge about how the precision is adjusted based on user input. These two operations should be handled on the same level: either both on the top-level or both on the method level (the precision value needs to be passed down as a function argument). I personally prefer the latter option.</p></li>
<li><p>Despite the precision of the decimals are increased from user input, for convergence testing that might not be necessary. For example, if a precision value of three is requested, checking <code>abs(pi_old - pi) &lt; Decimal("0.001")</code> seems enough to me (since the <span class="math-container">\$\pi&gt;1\$</span>, only two digits after decimal points are needed).</p></li>
<li><p>Convergence testing can be done more cleanly using <a href="https://docs.python.org/3/library/math.html#math.isclose" rel="nofollow noreferrer"><code>math.isclose</code></a> (thanks to @StevenJackson's comment)</p></li>
<li><p>Keeping the full class name <code>Decimal</code> rather than shortening it to a single-letter name <code>D</code> improves code readability. Nowadays most IDEs can autocomplete long names therefore using short names does really save much time.</p></li>
<li><p>Multiple classes / methods can be imported in the one statement.</p>

<pre><code>from decimal import Decimal, getcontext
</code></pre></li>
<li><p>Since the code is for demonstration purpose, it might be better to keep it as close to the presented pseudocode / description as possible. For example, a more direct implementation of the core loop of the Gauss-Legendre algorithm on page 31 of the linked PDF could be like the following.</p>

<pre><code>from itertools import count
from math import isclose

a = Decimal(1)
b = Decimal(0.5).sqrt()
s = 1 / Decimal(4)
pi = 0
min_delta = Decimal("0.001")  # minimum difference between steps to continue loop

for n in count():    # Use itertools.count to generate an infinite sequence starting from 0
    a_next = (a + b) / 2
    pi_old = pi
    pi = a_next ** 2 / s
    if isclose(pi, pi_old, rel_tol=0, abs_tol=min_delta):
        break

    b = (a * b).sqrt()
    s -= 2**n * (a - a_next)**2
    a = a_next
</code></pre></li>
</ul>
    </div>