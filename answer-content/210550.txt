<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>choice of language</h1>

<p>Unfortunately Java is not the best choice for doing such tasks. Object creation, reference handling and alike simply takes time.</p>

<p>So to speed up we need to throw away some of the benefits provides by the JVMs standard lib and switch to <em>procedural programming</em> on arrays.</p>

<h1>optimizations</h1>

<p>The calculation of the cycle length is a clever trick. But there must be an algorithm without looping which would speed up this calculation too. </p>

<h1>implementation</h1>

<p>As mentioned a fast solution must avoid object creation at all and should work on an <em>array of chars</em> rather than on  <code>String</code>s. It should basically look like this:</p>

<pre><code>public final class XIterations {
    public static String xReverse(String input, long iterations) {
      long iterationsRequired =  iterations% calculateCycleLength(input.length());
      char[] chars = input.toCharArray();
      for(int i = 0 ; i &lt; iterationsRequired ; i++)
        chars = reverse(chars);
      return new String(chars);
    }
}
</code></pre>

<p>In your code I cannot find how you handle the skipping of the start of the string. I would do this by using a <em>recursive call</em> like this:</p>

<pre><code>private char[] reverse(char[] chars, int startIndex){
   if(chars.length == startIndex) {
        return chars;
   } else {
      // reverse chars in array starting at startIndex
      return reverse(chars, ++startIndex);
   }
}
</code></pre>
    </div>