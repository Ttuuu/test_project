<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Try to be more consistent with naming</h1>
<p>I'm seeing <a href="https://en.wikipedia.org/wiki/Camel_case" rel="nofollow noreferrer">camelCase</a>, <a href="https://en.wikipedia.org/wiki/Pascal_case" rel="nofollow noreferrer">PascalCase</a> and <a href="https://en.wikipedia.org/wiki/Snake_case" rel="nofollow noreferrer">snake_case</a> all mixed together. Pick one style and stick with it. Furthermore, I see redundant things in names like <code>Data_type_T</code>, inconsistent use of the underscore suffix for private member variables, sometimes even using an underscore prefix which <a href="https://stackoverflow.com/questions/228783/what-are-the-rules-about-using-an-underscore-in-a-c-identifier">you should avoid</a>.</p>
<p>I would suggest that you stick with the style used in the standard library, so that you can use one style throughout programs that use both your custom allocator and functions and classes from the standard library. So:</p>
<ul>
<li><code>Data_type_T</code> -&gt; <code>data_type</code></li>
<li><code>Flags_T</code> -&gt; <code>flags_type</code></li>
<li><code>poolSize_</code> -&gt; <code>pool_size</code></li>
<li><code>Bits_needed</code> -&gt; <code>bits_needed</code></li>
<li><code>_vertex</code> -&gt; <code>vertex</code></li>
<li>...</li>
</ul>
<p>Also avoid unnecessary abbreviations. For example, instead of <code>flag_chk</code>, just write <code>flag_check</code>, or even better <code>flags_to_check</code>.</p>
<h1>Naming things</h1>
<p>Names should clearly express what something is about. When I look at some of the names in your code, I have some questions:</p>
<ul>
<li><code>namespace Ns</code>: what does "Ns" mean? Is it an abbreviation for "namespace"? That would be very redundant. Is it even necessary to put things into a namespace here?</li>
<li><code>Flags_T</code>: this is not really a set of flags, but rather the type of the bit mask to use to keep track of allocated elements, as you already say in the comments. So perhaps name it <code>bit_mask_type</code>.</li>
<li><code>N_allocator</code>: what does the "N" mean? I think <code>pool_allocator</code> might be a better name for this class.</li>
<li><code>linkedList</code>: yes, this variable's <em>type</em> is a linked list, but wat does it actually do? It's there to keep track of the pools you have, so I would instead just name it <code>pools</code>.</li>
<li><code>N_pointer</code>: again, the "N" doesn't mean anything to me. I would not create an alias here at all, if you want something that is a pointer to a data element, then <code>data_type *</code> is perfectly clear.</li>
<li><code>bitsInPool</code>: this is a bit mask that keeps track of which elements in this pool are allocated. Since the type of the variable is already <code>bit_mask_type</code>, you shouldn't repeat that in the name. So perhaps <code>allocated_elements</code>, or in this case I think you can shorten it to <code>allocated</code>, as this is clear enough from the context.</li>
<li><code>size_avail</code>: this is not the size of how much is available, it is rather a count of the number of elements the caller wants to allocate. Since the fact that it's about allocation is already clear from the context, I would name this <code>count</code>.</li>
<li><code>countOfE</code>: what's an "E"? This variable holds the number of times you have to shift to find a free range in a pool. Maybe <code>number_of_shifts</code>, or more shortly <code>n_shifts</code> would be appropriate.</li>
<li><code>flag_chk</code>: that should be something like <code>mask_to_check</code>, or <code>candidate_mask</code>, as it is the bit mask that you want to check whether it would fit into the pool.</li>
<li><code>condition</code>: this variable is probably not necessary, see below.</li>
</ul>
<h1>Avoid using <code>std::endl</code></h1>
<p>Use <code>"\n"</code> instead of <code>std::endl</code>, the latter forces the output to be flushed, which can be inefficient. See <a href="https://stackoverflow.com/questions/213907/c-stdendl-vs-n">this question</a> for more details.</p>
<h1>Remove debug statements</h1>
<p>I see a lot of messages being printed to <code>std::cout</code> that are just debug statements. They should not end up in production code, so remove them.</p>
<h1>Remove redundant comments</h1>
<p>Comments should only be added if the code itself is unclear. Comments that merely repeat exactly what the code does are unhelpful. For example:</p>
<pre><code>for (Pool&amp; pool : linkedList)
{
    ...
    //iterator to next block
}
</code></pre>
<p>The comment there is redundant, of course you will iterate to the next element at the end of the body of a <code>for</code>-loop. Similarly:</p>
<pre><code>//A default ctor for vertex type
_vertex() :
    vertex_coord{}{}
//A non-default ctor for vertex type
_vertex(float ax1, float ay, float az, float aw) :
    vertex_coord{ ax1, ay, az, aw }{}
</code></pre>
<p>It is obvious from the code that you are declaring constructors here, the type is already in the name of the constructor function, and whether it's a default constructor is obvious from the fact that the first one doesn't take parameters while the second does.</p>
<p>And here you just repeat literally what the code does:</p>
<pre><code>//size_t offset = addr - root; 
size_t offset = (size_t)(pv - pool.Pool_data_);
</code></pre>
<h1>Simplify the check for free space in a pool</h1>
<p>Instead of inverting the <code>bitsInPool</code>, and checking if the result of that ANDed with the candidate bit mask is still the same as the bit mask, you can just write this:</p>
<pre><code>if ((flag_chk &amp; pool.bitsInPool) == 0) {
    // it fits, add it to this pool
}
</code></pre>
<p>Since if there is no overlap between the bits set in <code>flag_chk</code> and the bits set in <code>bitsInPool</code>, the result of the AND operation will be zero.</p>
<h1>Improve <code>Bits_needed()</code></h1>
<p>The problem with your version of <code>Bits_needed()</code> is that it expects the type of bit mask to be 32 bits or less. But what if I use an <code>uint64_t</code> as the bit mask type, and want to allocate more that 32 bits? It will fail. The function can be rewritten like this:</p>
<pre><code>Flags_T Bits_needed(size_t sz)
{
    return ~Flags_T{} &gt;&gt; (poolSize_ - sz)
}
</code></pre>
<p>First, it creates a zero of the right type, inverts all the bits, and then shifts it right by the right amount.</p>
<h1>Remove redundant <code>static_cast</code>s</h1>
<p>I see a lot of <code>static_cast&lt;Flags_T&gt;</code> that look completely redundant. For example:</p>
<pre><code>flag_chk = static_cast&lt;Flags_T&gt;(flag_chk &lt;&lt; 1);
</code></pre>
<p>Why? The type doesn't change here, and even if it did, assigning the value back to <code>flag_chk</code> would implicitly cast it for you. And in this case, you can even write this to:</p>
<pre><code>flag_chk &lt;&lt;= 1;
</code></pre>
<h1>Use more <code>auto</code></h1>
<p>There are a lot of places where you can use <code>auto</code> to reduce the number of times you have to repeat type names. For example:</p>
<ul>
<li><code>for (Pool&amp; pool : linkedList)</code> -&gt; <code>for (auto&amp; pool : linkedList)</code></li>
<li><code>Flags_T flags = Bits_needed(sz)</code> -&gt; <code>auto flags = Bits_needed(sz)</code></li>
</ul>
<h1>Redundant use of <code>? true : false</code></h1>
<p>It is almost always redundant to write <code>some_condition ? true : false</code>, since the condition itself will be a boolean, or it can be cast implicitly to a boolean, otherwise the ternary operator wouldn't work. So:</p>
<pre><code>bool checkRemoval = (pool.bitsInPool == 0) ? true : false;
</code></pre>
<p>Can just be written as:</p>
<pre><code>bool checkRemoval = pool.bitsInPool == 0;
</code></pre>
<p>But then the whole call to <code>remove_if</code> can be simplified to:</p>
<pre><code>linkedList.remove_if([](Pool&amp; pool){ return pool.bitsInPool == 0; });
</code></pre>
<p>Note that you don't needed to capture anything in the lambda here, so use <code>[]</code> instead of <code>[&amp;]</code>.</p>
<h1>Invalid assumptions about pointer ordering in <code>dealloc()</code></h1>
<p>Your <code>dealloc()</code> function contains the following code:</p>
<pre><code>size_t offset = (size_t)(pv - pool.Pool_data_);
//if memory offset less than pool size
if (offset &lt; poolSize_)
{
    ...
</code></pre>
<p>Here you assume that the first pool's <code>Pool_data_</code> will always have the lowest address. But there is absolutely no guarantee that newly allocated pools will always have an address that is higher than the previously allocated pool. But it gets even worse, it is actually undefined behaviour in C++ to do <a href="https://en.cppreference.com/w/c/language/operator_comparison" rel="nofollow noreferrer">pointer comparison</a> between two pointers that point to different arrays. But, if you are willing to assume that pointer comparisons do actually work as expected on your platform, then you should write:</p>
<pre><code>if (pv &gt;= pool.Pool_data_ &amp;&amp; pv &lt; pool.Pool_data_ + poolSize_)
{
    // pv is inside this pool
</code></pre>
<h1>Simplify clearing bits in <code>dealloc()</code></h1>
<p>You have four lines of code to just unset a few bits in one variable, making it more complicated than necessary. You can simplify it to:</p>
<pre><code>pool.bitsInPool &amp;= ~(Bits_needed(sz) &lt;&lt; (pv - pool.Pool_data_));
</code></pre>
    </div>