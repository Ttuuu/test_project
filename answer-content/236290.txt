<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I have a recommendation. But first a critique.</p>

<p>The main problem with the program is that it's very badly broken.
You have six loops, none of which is working correctly.</p>

<p>First, if you were to actually write down the steps of your first loop and what part of <code>card</code> is copied to <code>character0</code> at each step, you should find at the end that the last thing written to <code>character[0]</code> is <code>card[1]</code> and the last thing written to <code>character[1]</code> is <code>card[1]</code>. In other words, <code>character0</code> ends up containing two copies of <code>card[1]</code>, and <code>card[0]</code> ends up being ignored.
Likewise <code>card[2]</code>, <code>card[4]</code>, <code>card[6]</code>, <code>card[8]</code>, and <code>card[10]</code> all will be ignored in your final calculations.</p>

<p>A second serious defect is that you pass a string to <code>strtol</code> without putting a null terminator at the end of the string. Therefore you are telling <code>strtol</code> to parse the two characters you gave it plus whatever is after them in memory. "Whatever is after" <em>might</em> be a null character, which will give you the result you want, or it might be some other non-hexadecimal character, which also will give you the result you want, or it might be one or more hexadecimal characters, which usually will give you a wrong result.
When I tried running your code in an online compiler and gave it the input 112233445566, and inserted <code>printf("n = %x %x %x %x %x %x\n", n0, n1, n2, n3, n4, n5);</code> near the end to see what six numbers it got, the output was</p>

<p>11 2211 332211 44332211 44332211 44332211</p>

<p>This tells me something about how that particular compiler laid out the twelve bytes of memory for <code>character0</code> through <code>character5</code>.
It also tells me you were asking for undefined behavior when you called your <code>strtol</code> functions.
This is basic test and debugging that you should have done before posting here.</p>

<p>There is a third defect, that <code>n0^n1^n2^n3^n4==n5</code> does not work the way you meant it to, but you already have realized that this needs to be looked into.</p>

<hr>

<p>Now my recommendation. My main recommendation is to write smaller functions.
You <em>could</em> do the whole thing very compactly in one function via loops,
but I recommend smaller functions because small functions force you to think about
what each one is doing by itself: what are the inputs, exactly, what is the output,
what is the task the function has to perform.
If you name your function well, it will even make the code more self-documenting.</p>

<p>A smaller function that seems obvious to me is:</p>

<blockquote>
  <p>Take two characters from <code>card</code>. Parse them as a hexadecimal number, turning them into an integer in the range 0 to 255, and return that integer.</p>
</blockquote>

<p>It's also fairly obvious that you'll end up calling the function six times, due to the way the larger function's specification is written:</p>

<blockquote>
  <p><code>card[]</code> contains six pairs of characters. The first five pairs make up a hexadecimal number, the last pair contains the checksum.</p>
</blockquote>

<p>Now you just need to figure out how to pass each pair of characters to your function.
For example, if you name the function <code>convertCharacterPairToNumber</code> you might pass the second pair like this:</p>

<pre><code>convertCharacterPairToNumber(card[2], card[3])
</code></pre>

<p>Or you might decide to make your function aware of <code>card</code> but tell it which two characters to use: </p>

<pre><code>convertCharacterPairToNumber(card, 2, 3)
</code></pre>

<p>Or you might realize that the second character is always right after the first one, so you just need to tell your function where the first character is:</p>

<pre><code>convertCharacterPairToNumber(card, 2)
</code></pre>

<p>Or you might decide that a pointer into the string, pointing at the first of the two characters in the pair, is enough:</p>

<pre><code>convertCharacterPairToNumber(&amp;card[2])
</code></pre>

<p>Then you just need to write the function's implementation and test it before you put it into the larger function.
You could solve two of the three major defects in your program this way.</p>
    </div>