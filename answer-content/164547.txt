<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>OOP</h3>

<p>This task really begs for object oriented programming.</p>

<p>As a first step,</p>

<p>I suggest moving the <code>maxhp</code>, <code>playerhp</code>, <code>playermeleedmg</code>, <code>xp</code>, <code>level</code> fields to a dedicated class for players, and rewrite the <code>build*</code> methods.
You could create a <code>PlayerFactory</code> with the <code>build*</code> methods that create and return warriors, archers, mages, enemies.
All these different kind of characters could inherit from a common base <code>Player</code> class.</p>

<h3>Rolling the dice</h3>

<p>To get a random number <code>x</code> in the inclusive range of <code>[1:6]</code>,
instead of <code>rand.nextInt(7)</code> and skipping zeros in a <code>while</code> loop,
you should use <code>1 + rand.nextInt(6)</code> to get the same effect.</p>

<p>The <code>roll6</code>, <code>roll10</code>, <code>roll20</code> methods all use the same logic.
Just one <code>roll</code> method with a parameter could do the job:</p>

<pre><code>public class dice {
    private final Random random = new Random();

    public int roll(int max) {
        return 1 + random.nextInt(max);
    }

    public int roll6() {
        return roll(6);
    }

    // and so on ...
}
</code></pre>

<p>As demonstrated in this example,
you probably don't need a new <code>Random</code> instance before each roll.</p>

<h3>Chaining conditions</h3>

<p>These conditions are mutually exclusive,
therefore they should be chained with <code>else if</code>
rather than using multiple independent <code>if</code> statements:</p>

<blockquote>
<pre><code>if(charclass.charAt(0) == 'w'){
    buildWarrior();
}
if(charclass.charAt(0) == 'a'){
    buildArcher();
}
if(charclass.charAt(0) == 'm'){
    buildMage();
}
</code></pre>
</blockquote>

<p>In this example a <code>switch</code> would be even better,
so that <code>charclass.charAt(0)</code> will only be evaluated once.</p>

<h3>Don't repeat yourself</h3>

<p>There are near-duplicate lines at multiple places.
For example the <code>enemyattack</code> and <code>attack</code> methods implement the same logic,
with only minor differences in the details.
Those details can be parameters,
so that you can avoid copy-pasting code.
Later when you need to update copy-pasted sections,
it will be extremely annoying to make parallel changes at multiple locations,
and it will be very error-prone too.
Probably 99% of the time it's better to extract common logic and generalize than to copy-paste.</p>

<h3>Formatting</h3>

<p>You're using Eclipse Luna,
it has a feature to reformat nicely the entire code.
It's good to use that until it becomes a natural habit to type nicely.</p>
    </div>