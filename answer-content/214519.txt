<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There's nothing wrong with the solution you have come with, but if you want an alternative, <a href="https://docs.python.org/3/library/re.html" rel="noreferrer">regex</a> might come in handy here:</p>

<pre><code>In [10]: import re
In [11]: data = """ 
    ...: 41:n 
    ...: 43:n 
    ...: 44:n 
    ...: 46:n 
    ...: 47:n 
    ...: 49:n 
    ...: 50:n 
    ...: 51:n 
    ...: 52:n 
    ...: 53:n 
    ...: 54:n 
    ...: 55:cm 
    ...: 56:n 
    ...: 57:n 
    ...: 58:n"""                                                                                                                                                                                                                                                         

In [12]: dict(re.findall(r'(\d+):(.*)', data))                                                                                                                                                                                                                           
Out[12]: 
{'41': 'n',
 '43': 'n',
 '44': 'n',
 '46': 'n',
 '47': 'n',
 '49': 'n',
 '50': 'n',
 '51': 'n',
 '52': 'n',
 '53': 'n',
 '54': 'n',
 '55': 'cm',
 '56': 'n',
 '57': 'n',
 '58': 'n'}
</code></pre>

<p>Explanation:</p>

<p><strong>1st Capturing Group</strong> <code>(\d+)</code>:</p>

<p><code>\d+</code> - matches a digit (equal to [0-9])<br>
<code>+</code> Quantifier — Matches between one and unlimited times, as many times as possible, giving back as needed (greedy)<br>
<code>:</code> matches the character <code>:</code> literally (case sensitive)  </p>

<p><strong>2nd Capturing Group</strong> <code>(.*)</code>:</p>

<p><code>.*</code> matches any character (except for line terminators)<br>
<code>*</code> Quantifier — Matches between zero and unlimited times, as many times as possible, giving back as needed (greedy)  </p>

<p>If there might be letters in the first matching group (though I doubt it since your casting that to an <code>int</code>), you might want to use:</p>

<pre><code>dict(re.findall(r'(.*):(.*)', data))
</code></pre>

<p>I usually prefer using <code>split()</code>s over <code>regex</code>es because I feel like I have more control over the functionality of the code.</p>

<p>You might ask, why would you want to use the more complicated and verbose syntax of regular expressions rather than the more intuitive and simple string methods? <em>Sometimes</em>, the advantage is that regular expressions offer far more flexibility.</p>

<hr>

<p>Regarding the <a href="https://codereview.stackexchange.com/users/111638/rahul-patel">comment</a> of @Rahul regarding speed I'd say <strong>it depends</strong>:</p>

<p>Although string manipulation will usually be somewhat faster, the actual performance heavily depends on a number of factors, including:</p>

<ul>
<li>How many times you parse the regex </li>
<li>How cleverly you write your string code </li>
<li>Whether the regex is precompiled</li>
</ul>

<p>As the regex gets more complicated, it will take much more effort and complexity to write equivlent string manipulation code that performs well.</p>

<p>As far as I can tell, string operations will almost always beat regular expressions. But the more complex it gets, the harder it will be that string operations can keep up not only in performance matters but also regarding maintenance.</p>
    </div>