<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Following the little big O.</h2>
<p>You ask</p>
<blockquote>
<p><em>"...if there is a better way following big o notation..."</em> (?)</p>
</blockquote>
<p>Big O notation is a formalized mathematical convention used to express how a function (mathematical function) behaves as it approaches infinity.</p>
<p>It is used in computer science to classify an algorithms complexity in regard to a definable input metric, usually the size of the input array when dealing with arrays.</p>
<p>You can not "follow" big O notation as it provides no insight into how to reduce an algorithms complexity apart from a comparison.</p>
<h2>Find the big O</h2>
<p>To classify your function using Big O, first we need to make it at least readable, and convert it to a function. See snippet.</p>
<p>Now count the number of times the function loops over each item in the input array data. Experience lets you do this in your head, but to demonstrate we modify the function to count every time you handle an item in the input array.</p>
<p>Because we need to fit a curve we need at least 3 different input sizes which I do with some random data.</p>
<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>function bestSeats(data) {
     var c = 0; // the counter
     const seats = data.filter( seat =&gt; 
         (c++,  // count the filter iterations
         seat.price.replace(/[^0-9.-]+/g, "") == Math.min(
                 ...data.map(function ( seat ) { 
                     c += 2;  // this counts as two
                              // once each to map to the arguments of Math.min
                              // once each to find the min                                   
                     return Number(seat.price.replace(/[^0-9.-]+/g, "")) 
                 }
             )
         ))).map(seat =&gt; (
             c++,  // count each result
             seat.seat
         )); 
     return "O(n) = O(" + data.length + ") = " + c;
}

function randomData(size) { 
    const data = [];
    while (size--) { data.push({seat:size, price: "$"+(Math.random() * 100 | 0)})}
    return data;
}
console.log("Eval complexity A:" + bestSeats(randomData(10)));
console.log("Eval complexity B:" + bestSeats(randomData(100)));
console.log("Eval complexity C:" + bestSeats(randomData(500)));</code></pre>
</div>
</div>

<p>The 3 points we can use to find the curve that best fits</p>
<pre><code> O(10) ~= 211
 O(100) ~= 20,102
 O(500) ~= 500,005
</code></pre>
<p>Experience tells me it's a polynomial of some (not too high) order. Using a graphing calculator I found a reasonable fits at 2.15 making your functions big O complexity</p>
<h2><span class="math-container">\$O(n^{2.15})\$</span></h2>
<p>Which is insanely inefficient. OMDG!!!!</p>
<p>So keeping</p>
<blockquote>
<p><em>"...in es6 format"</em> (?)</p>
</blockquote>
<p>in mind a cleaner more readable, less CO2 producing sea level rising approach is to do a two pass scan of the seats. The first pass finds the min price, the second extracts the min price seat numbers.</p>
<p>This example uses <code>for of</code> loops rather than the <code>Array</code> methods like <code>filter</code> and <code>map</code>, because these array methods have a nasty way of blinding people to the insane level of  complexity of what they do, and <code>for of</code> is a little quicker and often allows better optimizations than the array methods, so it's win win for <code>for of</code></p>
<h2>Examples in <span class="math-container">\$O(n)\$</span> linear time.</h2>
<pre><code> function bestSeats(seats) {
     var min = Infinity, minVal;
     const result = [];
     for (const seat of seats) {
         const price = Number(seat.price.slice(1));
         if (price &lt; min) {
             min = price;
             minVal = seat.price;
         }
     }
     for (const seat of seats) {
         if (seat.price === minVal) { result.push(seat.seatNumber) }
     }
     return result;
 }
</code></pre>
<p>And if you must use the array methods.</p>
<pre><code> function bestSeats(seats) {
     const price2Num = seat =&gt; Number(seat.price.slice(1));
     const min = (min, seat) =&gt; price2Num(seat) &lt; min ? price2Num(seat) : min;
     const minPrice = "$" + seats.reduce(min, Infinity);
     return seats.filter(seat =&gt; seat.price === minPrice).map(seat =&gt; seat.seatNumber);
 }
</code></pre>
    </div>