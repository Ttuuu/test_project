<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Avoid <code>using namespace std;</code></h1>
<p>It's dangerous to import lots of names into the global namespace - newly-added standard identifiers could easily collide with your own, causing hard-to-debug breakage in future.  Don't be reluctant to write <code>std::</code> where you need it - it's intentionally a very short prefix.</p>
<h1>Think about presentation</h1>
<p>It might be an artefact of how you've copied the code into the question, but I'm seeing code with no indentation.  If this is how your code actually looks, consider using a tool such as <code>indent</code> (or perhaps your editor can auto-indent code?) and try to group related lines like you would group related sentences into paragraphs when writing prose.</p>
<h1>Write <code>main()</code> at the end</h1>
<p>If we define <code>convertDayOfYear</code> before <code>main()</code>, we don't need to forward-declare it.</p>
<h1>Reject out of range values</h1>
<p>Should we be accepting <code>-1</code> or <code>365</code> as input?</p>
<h1>Handle leap years</h1>
<p>This code only works for days in non-leap years.  With the <code>&lt;ctime&gt;</code> interface, it's not hard to work with arbitrary years.</p>
<h1>Consider C++ library</h1>
<p>Instead of going through the C library, we might find it easier to use the <code>std::put_time()</code> I/O manipulator to format our output (particularly if we're to write it to an output stream).  You could even use a <code>std::stringstream</code> to write values, and extract using <code>std::get_time()</code>.</p>
<h1>Use <code>sizeof</code> rather than repeating magic numbers</h1>
<p>Avoid repeating <code>26</code> here, as it's easy to update one and miss the other.</p>
<blockquote>
<pre><code>char output[26];

strftime(output, 26, "%B %d", date);
</code></pre>
</blockquote>
<p>Instead, we can use <code>sizeof</code>, so it's always consistent:</p>
<pre><code>std::strftime(output, sizeof output, "%B %d", date);
</code></pre>
<p>We should check the return value - we've only guessed that 26 bytes will be sufficient for conversion in all languages.  I'm inclined to increase the buffer size somewhat - 26 is cutting it a little fine in Greek, for instance, and is inadequate for Thai.</p>
<h1>Unused value</h1>
<p>We have</p>
<blockquote>
<pre><code>date = gmtime(&amp;time);

time += num * secPerday;

date = gmtime(&amp;time);
</code></pre>
</blockquote>
<p>We never use the first assignment to <code>date</code>, so that line can simply be deleted:</p>
<pre><code>time += num * secPerday;
date = std::gmtime(&amp;time);
</code></pre>
<hr>
<h1>Improved code</h1>
<pre><code>#include &lt;ctime&gt;
#include &lt;stdexcept&gt;
#include &lt;string&gt;

std::string convertDayOfYear(int num, int year)
{
    const long secPerDay = 86400;

    std::tm date = { 0, 0, 0,    // 00:00:00
                     1, 0, year-1900, // first of January
                     0, 0, 0 };  // no DST

    // add the number of days, using seconds
    auto year_start = std::mktime(&amp;date);
    auto day_start = year_start + num * secPerDay;
    date = *std::gmtime(&amp;day_start);

    if (date.tm_year != year-1900) {
        throw std::range_error("Invalid day number");
    }

    char output[64];
    if (!std::strftime(output, sizeof output, "%B %d", &amp;date)) {
        throw std::runtime_error("Date conversion failed - buffer overrun");
    }

    return std::string(output);
}
</code></pre>

<pre><code>#include &lt;iostream&gt;
int main()
{
    for (auto i: { -1, 0, 1, 31, 32, 58, 59, 60, 365, 366 }) {
        try {
            auto s = convertDayOfYear(i, 2018);
            std::cout &lt;&lt; i &lt;&lt; " -&gt; " &lt;&lt; s &lt;&lt; '\n';
        } catch (std::exception&amp; e) {
            std::cout &lt;&lt; i &lt;&lt; ": " &lt;&lt; e.what() &lt;&lt; '\n';
        }
    }
}
</code></pre>
    </div>