<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Correctness</h2>

<ul>
<li>Your code supposes that the decimal separator is <code>.</code>, which is not correct for all locales;</li>
<li>You are ignoring the grouping separator for thousands and so on: <code>"$1000000.00"</code> instead of <code>"$1,000,000.00"</code>;</li>
<li>Negative amounts are not well formatted: <code>"$-100.00"</code> instead of <code>"-$100.00"</code>;</li>
<li><p>Other than being slow, String interpolation represents really large amounts using the scientific notation :</p>

<pre><code>let input: Double = 10_000_000_000_000_000
</code></pre></li>
</ul>

<p>Which would yield <code>"$1e+16.00"</code> but the right format is <code>"$10,000,000,000,000,000.00"</code> .</p>

<h2>Alternative Solution</h2>

<ul>
<li>A <code>PriceFormatter</code> shouldn't own 1 value. Its job is to format, not be linked to a certain value. </li>
<li>There is no need to pollute the <code>Double</code> type with that extension. A number is a number. </li>
</ul>

<p>Converting a number that represents an amount of money, in a certain currency, in a given locale, into a String, is the job of <code>NumberFormatter</code> :</p>

<pre><code>let cf = NumberFormatter()
cf.numberStyle = .currency
</code></pre>

<p>Other properties can be set to your liking :</p>

<pre><code>cf.maximumFractionDigits = 2
cf.minimumFractionDigits = 2
cf.locale = Locale(identifier: "en_US")
cf.decimalSeparator = "."
cf.groupingSeparator = ","
</code></pre>

<p>And use it like so:</p>

<pre><code>let input: Double = 100_000_000

if let s = cf.string(for: input) {
    print(s)  //$100,000,000.00
}
</code></pre>

<p>To avoid creating new <code>NumberFormatter</code>s whenever you need them, you could define a static property on <code>NumberFormatter</code> or <code>Formatter</code> (since <code>string(for:)</code> is defined on <code>Formatter</code>) :</p>

<pre><code>extension Formatter {
    static var currencyFormatter: NumberFormatter {
        let cf = NumberFormatter()
        cf.numberStyle = .currency
        return cf
    }
}
</code></pre>

<p>And use it like so :</p>

<pre><code>let str = Formatter.currencyFormatter.string(for: input)

if let s = str {
    print(s)  //$100,000,000.00
}
</code></pre>
    </div>