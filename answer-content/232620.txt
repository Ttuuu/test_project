<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I know it has been more than two years since you posted this question so I apologize that nobody has supplied an answer yet. I also realize that you likely have learned a few things since then and I apologize if anything below is old news to you.</p>

<p>My overall take on this code is that it is decent for a self-taught JS programmer. However there are multiple inefficiencies and other areas that could be improved.</p>

<p>The biggest concern I have with this code is the possibility for memory leaks because some DOM elements have <code>onclick</code> callbacks set to anonymous functions. This could lead to memory leaks if those elements are removed from the DOM (refer to <a href="https://stackoverflow.com/q/15761094/1575353">this SO post for more details on that topic</a>). A better technique would be to use <a href="https://davidwalsh.name/event-delegate" rel="nofollow noreferrer">event delegation</a> to how to handle events based on the target.</p>

<hr>

<p>I see the <code>let</code> keyword used to declare many local variables. This is good but for any value that shouldn't be re-assigned, <code>const</code> can be used. This helps avoid accidental re-assignment.</p>

<hr>

<p>In this block there are <strong>three DOM queries per iteration</strong> (when there could only be one per page load):</p>

<blockquote>
<pre><code>for(let i = 0; i &lt; document.getElementsByClassName('resettable').length; i++) {
  document.getElementsByClassName('resettable')[i].value = document.getElementsByClassName('resettable')[i].defaultValue;
}
</code></pre>
</blockquote>

<p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementsByClassName" rel="nofollow noreferrer"><code>document.getElementsByClassName()</code></a> returns a <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLCollection" rel="nofollow noreferrer">live HTMLCollection</a>, which means it doesn't need to be re-queried during the lifetime of the page. It could be stored once and even if the DOM is updated that collection will be updated. </p>

<pre><code>let resettables;
document.addEventListener('DOMContentLoaded', function() {
  resettables = document.getElementsByClassName('resettable');
});
</code></pre>

<p>Then that block can utilize that variable: </p>

<pre><code>for(let i = 0; i &lt; resettables.length; i++) {
  resettables[i].value = resettables[i].defaultValue;
}
</code></pre>

<p>And if <a href="/questions/tagged/ecmascript-6" class="post-tag" title="show questions tagged 'ecmascript-6'" rel="tag">ecmascript-6</a> features are supported, then a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of" rel="nofollow noreferrer"><code>for...of</code></a> loop can also help simplify this:</p>

<pre><code>for(const resettable of resettables) {
  resettable.value = resettable.defaultValue;
}
</code></pre>

<hr>

<p>There are a few places with redundant blocks that could be simplified with a <code>for</code> loop - e.g.</p>

<blockquote>
<pre><code>tableBody.insertRow(0);
tableBody.rows[0].insertCell(0);
tableBody.rows[0].insertCell(1);
tableBody.rows[0].insertCell(2);
tableBody.rows[0].insertCell(3);
tableBody.rows[0].insertCell(4);
</code></pre>
</blockquote>
    </div>