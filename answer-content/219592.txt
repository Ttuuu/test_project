<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Welcome to CodeReview! Having others review your code is one of the very best ways to find bugs and improve your coding. And we're going to improve your coding, no matter how much it hurts! :-)</p>

<p>I'm going to repeat many of the points made in Maarten's review, although with slightly different results.</p>

<p>From your post, I know you're still learning. From your code, I believe you have learned: <code>if/elif/else</code> statements, Python <code>tuple</code> types, and functions. So I'm going to focus on these in any improvements.</p>

<h1><code>else</code> means 'Not true'</h1>

<p>The most glaring problem, and one you intuited a little yourself, is that you are doing "else" wrong. Consider:</p>

<pre><code>if weight &lt;= 2:
    flat_cost += weight * 1.50
elif weight &gt; 2 and weight &lt;= 6:
    flat_cost += weight * 3.00
elif weight &gt; 6 and weight &lt;= 10:
</code></pre>

<p>In this sequence, you first check <code>if weight &lt;= 2</code>. Now pretend that <code>if</code> statement fails. What do you know? You know that if <strong>any one of the <code>else</code></strong> statements executes, then <code>weight</code> <em>must</em> be <code>&gt; 2</code> because otherwise the <code>if</code> statement would have executed!</p>

<p>So never "test" something you know to be true. Or false. If you know a thing, you don't need to test it. (You might <code>assert</code> it for sanity checking, but that's different.)</p>

<p><strong>Note:</strong> With compound statements, like <code>if A and B</code> you might have to (re) test one of the statements when the compound fails:</p>

<pre><code>if A and B:
elif A:
</code></pre>

<p>But that's technically different because they are different conditions.</p>

<p>So let's rewrite your conditions:</p>

<pre><code>def drone_shipping_cost(weight):
    cost = 0
    if weight &lt;= 2:
        cost = weight * 4.50
    elif weight &gt; 2 and weight &lt;= 6:
        cost = weight * 9.00
    elif weight &gt; 6 and weight &lt;= 10:
        cost = weight * 12.00
    elif weight &gt; 10:
        cost = weight * 14.25
    return cost
</code></pre>

<p>Becomes:</p>

<pre><code>def drone_shipping_cost(weight):
    cost = 0
    if weight &lt;= 2:
        cost = weight * 4.50
    elif weight &lt;= 6:
        cost = weight * 9.00
    elif weight &lt;= 10:
        cost = weight * 12.00
    else:
        cost = weight * 14.25
    return cost
</code></pre>

<p>Note two things: first, the <code>weight &gt; 10</code> case becomes a blanket <code>else</code> statement, since you are covering all the possible numbers; and second, there's no reason to set <code>cost = 0</code> initially, since you cover all possible numbers:</p>

<pre><code>def drone_shipping_cost(weight):
    if weight &lt;= 2:
        cost = weight * 4.50
    elif weight &lt;= 6:
        cost = weight * 9.00
    elif weight &lt;= 10:
        cost = weight * 12.00
    else:
        cost = weight * 14.25
    return cost
</code></pre>

<h1>Keep separate things separate</h1>

<p>You could rewrite your <code>ground_shipping_cost</code> function in a similar way, but let's take a harder look at that:</p>

<pre><code>def ground_shipping_cost(weight):
    flat_cost = 20
    premium_cost = 125
    if weight &lt;= 2:
        flat_cost += weight * 1.50
    elif weight &gt; 2 and weight &lt;= 6:
        flat_cost += weight * 3.00
    elif weight &gt; 6 and weight &lt;= 10:
        flat_cost += weight * 4.00
    elif weight &gt; 10:
        flat_cost += weight * 4.75
    return flat_cost, premium_cost
</code></pre>

<p>You're doing a couple of things wrong here. First, you're "accumulating" when you should be "adding". And second, you're returning a tuple just to get the premium cost. In reality, the premium shipping cost is another form of shipping.</p>

<p>Let's get the low-hanging-fruit out of the way:</p>

<pre><code>def premium_shipping_cost(weight):
    ''' Compute cost of premium shipping for a package. '''
    return 125
</code></pre>

<p>That was easy, wasn't it!</p>

<p>Now, let's remove the <code>premium_cost</code> from the ground shipping, and fix the if/else statements:</p>

<pre><code>def ground_shipping_cost(weight):
    flat_cost = 20
    if weight &lt;= 2:
        flat_cost += weight * 1.50
    elif weight &lt;= 6:
        flat_cost += weight * 3.00
    elif weight &lt;= 10:
        flat_cost += weight * 4.00
    else:
        flat_cost += weight * 4.75
    return flat_cost
</code></pre>

<p>This looks better, but you're still "accumulating" instead of "adding." In this case, that's the wrong thing to do because you're only going to add one thing. Phrasing the computations as accumulating costs gives the wrong impression to the reader. Let's make it clear that there's a flat charge and a by-weight charge:</p>

<pre><code>def ground_shipping_cost(weight):
    ''' Compute cost of ground shipping for a package. '''
    flat_cost = 20
    if weight &lt;= 2:
        weight_charge = weight * 1.50
    elif weight &lt;= 6:
        weight_charge = weight * 3.00
    elif weight &lt;= 10:
        weight_charge = weight * 4.00
    else:
        weight_charge = weight * 4.75
    return flat_cost + weight_charge
</code></pre>

<p>This version makes it clear that there's a flat cost and a weight charge. Future-Stephen will thank you.</p>

<h1>You make the call!</h1>

<p>Now here's where I'll diverge from Maarten Fabre's review. The DRY principle tells us that those two chains of <code>if/elif/else</code> statements should be moved into a separate function.</p>

<p>First I have to ask, what's the objective? If you are in part of a class where they are focused on writing functions, then that is <strong>absolutely right</strong> and you should do it.</p>

<p>But if you are in a part of the class where they are starting to focus on classes and objects, and encapsulating behavior, then maybe it would be the <strong>wrong thing to do.</strong> Why? Because maybe the weights and cost multipliers were the same only by coincidence, and maybe the next thing they ask will be for you to separate them!</p>

<p>So you have to use your own judgement. You could write a function that returns the cost multiplier. You could write a function that returns a cost "category" and use that to look up the multiplier. Or you could leave the two cost functions with duplicated code, so that you can change the cost layers or cost multipliers independently. </p>

<h1>One built-in function</h1>

<p>Python has a built-in function called <a href="https://docs.python.org/3.5/library/functions.html#min" rel="noreferrer"><code>min</code></a>. By default, <code>min</code> compares objects in a sequence, or objects passed as positional parameters. It compares them using the default Python comparison, and for tuples that comparison compares the elements of the tuple in ascending order. This is discussed nicely in this <a href="https://stackoverflow.com/questions/5292303/how-does-tuple-comparison-work-in-python#5292332">SO answer.</a></p>

<p>What this means for you is that you can use <code>min</code> on a sequence of <code>tuple</code> values, in different ways:</p>

<ul>
<li>You could compute name, cost tuples for the shipping types, and find the lowest cost.</li>
<li>You could store name, cost-function tuples and compute the lowest cost using a special <code>key</code> function.</li>
</ul>

<p>Let's try the most direct approach, since it's easier to understand. And let's put the cost before the name, so that we get the right results (comparison is in tuple order!):</p>

<pre><code>def cheapest_shipping(weight):
    ''' Determine the cheapest shipping method for a package. '''
    drone_cost = drone_shipping_cost(weight)
    ground_cost = ground_shipping_cost(weight)
    premium_cost = premium_shipping_cost(weight)

    cheapest_tuple = min((drone_cost, 'drone shipping'),
                         (ground_cost, 'ground shipping'),
                         (premium_cost, 'premium shipping'))
    return cheapest_tuple
</code></pre>

<p>At this point, you can do what is called "tuple unpacking" (remember the word "unpacking" -- you'll want to search for it later). That lets you return multiple values into multiple separate variables:</p>

<pre><code>cost, name = cheapest_shipping(weight)
print(f"You should use {name}, it costs only {cost}!")
</code></pre>
    </div>