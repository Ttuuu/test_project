<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Proper <code>#include</code> Guards</h2>
<pre><code>#ifndef _SNAKEGAME_H
#define _SNAKEGAME_H
</code></pre>
<p>There are two problems with this</p>
<ol>
<li>Names with a leading underscore are <a href="https://stackoverflow.com/q/228783/5416291">reserved for the implementation</a>. (It's actually slightly more complicated than that but your particular use is off limits.)</li>
<li>It's not very unique. I personally use <code>NAMESPACE_PROJECT_UNIT_H_GUID</code> if I really want to be sure to avoid any clashes.</li>
</ol>
<hr>
<h2>Use Macros with caution</h2>
<pre><code>#define maxSnakeLenght 100
</code></pre>
<p>Don't use macros to define global constants. My IDE actually prompted me to change this. Use <code>constexpr</code> for this purpose.</p>
<hr>
<pre><code>SnakeGame(int size=16, int width=25, int height=25, int timeDelay=60000)
            :size(size), width(width), height(height),
            widthWindow(size*width),
            heightWindow(size*height),
            timeDelay(timeDelay)
            {}
</code></pre>
<p>I'm not sure how you use this because you don't provide the <code>main()</code> to drive the program but I doubt you need this and it will be hard to use properly. If you want to initialize the variables with defaults just do so. Do you allow the user to override those parameters on the command line before you generate the window?</p>
<hr>
<h2>Don't declare multiple variables per line</h2>
<pre><code>int size, width, height, timeDelay;
std::size_t widthWindow, heightWindow, sizeOfSnake=3;
</code></pre>
<p>Don't declare multiple variables per line. It's harder to read. It can get messy with type specifiers. And it can be confusing with assignments.</p>
<hr>
<h2>Define helper classes so you don't have to forward declare them.</h2>
<pre><code>class KeyboardEvents;
std::map&lt;sf::Keyboard::Key, std::shared_ptr&lt;KeyboardEvents&gt;&gt; mapOfEvents;
</code></pre>
<p>If you have a nested helper class, declare it at the top rather than forward declare it <em>in the middle</em> of your private member variables.</p>
<p>Speaking of your <code>KeyboardEvents</code> classes, you never <code>override</code> on the function in the derived classes.</p>
<hr>
<h2>Don't use <a href="https://en.wikipedia.org/wiki/God_object" rel="nofollow noreferrer">God Objects</a>.</h2>
<p>As was suggested in a <a href="https://codereview.stackexchange.com/questions/142624/snake-game-in-c-with-oop-approach#comment267408_142624">comment</a> you should break this down to a few different classes.</p>
<p>You probably want a Snake class. Put the size, location, speed, movement and reaction to food in there. Create a Food class that has a location and a spawn method. Then add collision detection to the application level. Have another class that wraps all the inputs. Yet another class responsible for the presentation logic. (This is known as <a href="https://en.wikipedia.org/wiki/Separation_of_concerns" rel="nofollow noreferrer">separation of concerns</a>.)</p>
<p>This will also help you better organize your code, which right now is only partially organized. Some groups of code are group together in a logical way and others seem to be distributed at random.</p>
<hr>
<h2>Don't use the C style <code>Rand</code></h2>
<p>C++'s <a href="https://en.cppreference.com/w/cpp/header/random" rel="nofollow noreferrer"><code>&lt;random&gt;</code></a> is better for what you want and easier to use. I'm not entirely certain how to use C <code>rand</code>, because it is hard to use, but I am certain you are not getting a normal distribution. The C++ version is also prefixed with <code>std::</code>, as is <code>time</code> and <code>srand</code>, and it is located in the header <code>&lt;cstdlib&gt;</code>.</p>
<hr>
<h2>Don't include twice</h2>
<p>You included <code>map</code> in the <code>.h</code> file. You did not need to then include it in the <code>.cpp</code> file.</p>
<hr>
<h2>Don't use textures for solid colors</h2>
<p>Textures and Sprites aren't meant to be used to create one solid color. <code>sf::Color</code> is way more lightweight for displaying red and green.</p>
<hr>
<h2>Write portable code</h2>
<p><code>unistd.h</code> is a non-portable header. The standard has a sleep call. <a href="https://en.cppreference.com/w/cpp/thread/sleep_for" rel="nofollow noreferrer"><code>std::this_thread::sleep_for()</code></a> will provide the functionality you want cross-platform. (SFML also has sleep.)</p>
<p>All of this is actually skirting the fact that you are using sleep to constrain the speed of your snake. Your snake should have a velocity which you can then adjust to increase its speed as you ramp up the difficulty.</p>
<hr>
<h2>Use SFML to its fullest</h2>
<p>SFML has <a href="https://www.sfml-dev.org/documentation/2.5.1/classsf_1_1Shape.php" rel="nofollow noreferrer"><code>Shape</code></a> classes that would make your code a little easier to work with. The shapes themselves have collision detection built in, Can easily be colored or take a texture, and can be easily moved and sized. (Your sprites required your images to be the precise size you required, the shapes can be scaled and changed.)</p>
<p>Your keyboard event map ignores the simplicity of <a href="https://www.sfml-dev.org/documentation/2.5.1/classsf_1_1Event.php" rel="nofollow noreferrer">SFML's event system</a>. All of that can be handled together in the <code>updateEvent()</code> method.</p>
    </div>