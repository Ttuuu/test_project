<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You could get away without all the complicated memory allocation if you simply require that the calling code passes you the memory for the password. It could look like this:</p>

<pre class="lang-c prettyprint-override"><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

void generate_password(char *password, size_t password_size) {
    for (size_t i = 0; i &lt; password_size - 1; i++) {
        password[i] = alphabet[rnd_int(alphabet_len)];
    }
    password[password_size - 1] = '\0';
}
</code></pre>

<p>The <code>char *</code> means "a pointer to a character". In C, a pointer to a character can also mean "a pointer to a character and some memory beyond". This is commonly used to refer to strings. The <code>char *</code> then points to the first character of the string, and the string continues until it reaches the character <code>'\0'</code>, which is binary 0. Not to be confused with the character <code>'0'</code>, which is the digit zero.</p>

<p>Of course, the variables <code>alphabet</code> and <code>alphabet_len</code> are undeclared in the above code. Same as the <code>rnd_int</code> function that generates a random number from the range <code>[0, n)</code>.</p>

<p>The code would be called like this:</p>

<pre class="lang-c prettyprint-override"><code>int main(void) {
    char password[80];

    generate_password(password, sizeof password);
    fprintf("password: %s\n", password);
}
</code></pre>
    </div>