<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here's a bug:</p>

<pre><code>    int *arr = (int*)calloc(2, sizeof(arr));
</code></pre>

<p>You probably meant</p>

<pre><code>    int *arr = calloc(2, sizeof *arr);
</code></pre>

<p>There's no need for the cast, and you meant to use the size of <strong><code>*arr</code></strong> rather than the size of the pointer.  This error is repeated throughout the code.</p>

<hr>

<p>But really, there's no need for all this memory allocation at all.  We don't need to retain the individual item prices from every shop we visit; just keep a running track of the cheapest one.  Consider this version as a much simpler starting point:</p>

<pre><code>#include &lt;limits.h&gt;
#include &lt;stdbool.h&gt;
#include &lt;stdio.h&gt;


/* Read a positive number from stdin */
/* Returns zero on failure */
unsigned int read_count(const char *prompt)
{
    do {
        if (printf("%s ", prompt) &lt; 0) { return 0; }
        fflush(stdout);

        char line[12];
        if (!fgets(line, sizeof line, stdin)) {
            /* stream read failure */
            return 0;
        }

        if (line[0] != '\0' &amp;&amp; line[strlen(line) - 1] != '\n') {
            /* consume rest of line that didn't fit in buffer */
            scanf("%*[^\n]");
            getchar();          /* and the newline */
        } else {
            unsigned int n;
            char last;
            int items_read = sscanf(line, "%u%c", &amp;n, &amp;last);
            if (items_read == 2  &amp;&amp;  last == '\n') {
                return n;
            }
        }
        puts("You must enter a positive number!");
    } while (true);
}


/* Read a positive price from stdin */
/* Returns zero on failure */
unsigned int read_money(const char *prompt)
{
    /* if your currency isn't subdivided into hundredths,
       change these values */
    static const int decimal_places = 2;
    static const unsigned int multiplier = 100;

    do {
        if (printf("%s ", prompt) &lt; 0) { return 0; }
        fflush(stdout);

        char line[32];
        if (!fgets(line, sizeof line, stdin)) {
            /* stream read failure */
            return 0;
        }

        if (line[0] != '\0' &amp;&amp; line[strlen(line) - 1] != '\n') {
            /* consume rest of line that didn't fit in buffer */
            scanf("%*[^\n]");
            getchar();          /* and the newline */
        } else {
            int dot_pos, end_pos;
            char last;
            /* check format first */
            if (sscanf(line, "%*9u.%n%*2[0-9]%n%c", &amp;dot_pos, &amp;end_pos, &amp;last) == 1
                &amp;&amp; dot_pos + decimal_places == end_pos
                &amp;&amp; last == '\n')
            {
                unsigned int pounds, pence;
                if (sscanf(line, "%u.%u", &amp;pounds, &amp;pence) == 2)
                {
                    /* valid input; exit the loop */
                    return pounds * multiplier + pence;
                }
            }
        }

        puts("You must enter a valid amount!");
    } while (true);
}


int main()
{
    unsigned shop_count = read_count("How many shops to visit?");
    if (!shop_count) { return 1; } /* I/O failure */

    unsigned cheapest_shop = 0;
    unsigned cheapest_order = UINT_MAX;

    for (unsigned i = 0;  i &lt; shop_count;  ++i) {
        printf("Now visiting shop %u\n", i);
        unsigned item_count = read_count("How many ingredients from this shop?");
        if (!item_count)  { return 1; } /* I/O failure */
        puts("Enter prices of ingredients");
        unsigned order_cost = 0;
        for (unsigned j = 0;  j &lt; item_count;  ++j) {
            unsigned item_cost = read_money("Item price:");
            if (!item_cost) { return 1; } /* I/O failure */
            order_cost += item_cost;
        }
        if (order_cost &lt; cheapest_order) {
            cheapest_shop = i;
            cheapest_order = order_cost;
        }
    }

    printf("The cheapest order was %u.%02u, at shop %u.\n",
           cheapest_order / 100, cheapest_order % 100, cheapest_shop);
}
</code></pre>

<p>There's no dynamic memory allocation at all there - let's keep it simple!</p>
    </div>