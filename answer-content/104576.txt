<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm not sure it would be any more efficient, but it might be. At least it's a bit easier to read. Instead of reading every line of the file like this. </p>

<blockquote>
<pre><code>        string data = "";// Console.ReadLine(); //"6 5 8 4 7 10 9";


        foreach (var line in File.ReadLines(@"FilePath"))
        {
            data = line;
        }
</code></pre>
</blockquote>

<p>Use linq to "directly" get the last line. (Although, AFAIK, it still has to read the whole file into memory.)</p>

<pre><code>string data = File.ReadLines(@"FilePath").Last()
</code></pre>

<p>This scrolls <em>way</em> too far off the screen. </p>

<blockquote>
<pre><code> LinkedList&lt;int&gt; lstPlants = new LinkedList&lt;int&gt;(data.Split(new char[] { ' ', '\t' }).Select(s =&gt; int.Parse(s)).ToList());
</code></pre>
</blockquote>

<p>Add a newline and use <code>var</code> for readability's sake. </p>

<pre><code>var lstPlants = new LinkedList&lt;int&gt;(data.Split(new char[] { ' ', '\t' })
        .Select(s =&gt; int.Parse(s)).ToList());
</code></pre>

<p>I don't have any advice on how to change it, but it's pretty obvious that the nested while loops are the source of the performance issue. If you can find a way to do it in a single loop, you'll get a pretty big boost. </p>
    </div>