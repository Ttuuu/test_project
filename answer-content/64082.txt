<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your question comes in multiple parts: General code review, adding algorithms, and then performance relative to standard <code>BigInteger</code></p>

<h2>General Review</h2>

<p>Let's focus on this method, it shows essentially all the general issues I see:</p>

<blockquote>
<pre><code> public static BigInteger add(BigInteger x, BigInteger y)
 {
  boolean A, B, carry=false;
  BigInteger sum=BigInteger.ZERO;
  int firstBit=x.or(y).getLowestSetBit(),
      topBit=x.or(y).bitLength();
  for(int i=firstBit;i&lt;=topBit;i++)
  {
   A=x.testBit(i);
   B=y.testBit(i);
   if((A^B)^carry)
    sum=sum.setBit(i);
   carry=(A&amp;&amp;B)||((A^B)&amp;&amp;carry);
  }
  return sum;
 }
</code></pre>
</blockquote>

<ul>
<li><p>Breathing room around operators is important for readability. The code like:</p>

<blockquote>
<pre><code>for(int i=firstBit;i&lt;=topBit;i++)
</code></pre>
</blockquote>

<p>should be:</p>

<pre><code>for (int i = firstBit; i &lt;= topBit; i++)
</code></pre></li>
<li><p>Java code styles use brace-at-line-end style. C, C++, C# and other C* languages use next-line style. This sort of brace style is often debated, but, all common Java code style standards require end-of-line. You will regularly be criticised when sharing Java code using this style. Your code should look like:</p>

<pre><code>public static BigInteger add(BigInteger x, BigInteger y) {
    boolean ...
</code></pre></li>
<li><p>mixed initialization is confusing, and variables should be declared in their tightest scope:</p>

<blockquote>
<pre><code>boolean A, B, carry=false;
</code></pre>
</blockquote>

<p>That declaration is redundant, and confusing. Java defaults all boolean values to false when declared (unless specifically initialized to true). So, the <code>carry=false</code> is redundant (since <code>A</code> and <code>B</code> are also false).</p>

<p>Further, <code>A</code> and <code>B</code> are horrible names for variables. For a start, they are upper case, then they have poor meanings, and finally, A is a real word that tends to create a specific meaning when read out of context.</p>

<p>While talking bad names, <code>x</code> and <code>y</code> are not good names either. Those names imply that the two input variables are coordinates, and not two values to be added. I would recommend names like <code>augend</code> and <code>addend</code> because those are the official names for the two terms used in addition.</p>

<p>Finally, <code>A</code> and <code>B</code> are only used in the context of the for-loop, and not outside that context, so they should be declared where they are used:</p>

<pre><code>boolean augBit = augend.testBit(i);
boolean addBit = addend.testBit(i);
</code></pre></li>
<li><p>Complicated functions should not be used when creating compound variable declarations:</p>

<blockquote>
<pre><code>int firstBit=x.or(y).getLowestSetBit(),
    topBit=x.or(y).bitLength();
</code></pre>
</blockquote>

<p>That should be split in three, actually. The <code>x.or(y)</code> is repeated twice, so should be extracted....</p>

<pre><code> BigInteger orVals = augend.or(addend);
 int firstBit = orVals.getLowestSetBit();
 int topBit = orVals.bitLength();
</code></pre></li>
<li><p>1-liner if-statements and other 1-liner blocks. You have the 1-liner statement:</p>

<blockquote>
<pre><code>   if((A^B)^carry)
     sum=sum.setBit(i);
</code></pre>
</blockquote>

<p>1-liners are know to be a leading cause of bugs introduced during the maintenance cycle of code. The easy solution is to brace 1-liners always. The code should be:</p>

<pre><code>   if( (A ^ B) ^ carry) {
       sum=sum.setBit(i);
   }
</code></pre></li>
</ul>

<p>Let's take a pause at this point, and see where we are at:</p>

<pre><code>public static BigInteger add(BigInteger augend, BigInteger addend) {

    boolean carry = false;
    BigInteger sum = BigInteger.ZERO;

    BigInteger orVals = augend.or(addend);
    int firstBit = orVals.getLowestSetBit();
    int topBit = orVals.bitLength();

    for (int i = firstBit; i &lt;= topBit; i++) {
        int augBit = augend.testBit(i);
        int addBit = addend.testBit(i);
        if ((augBit ^ addBit) ^ carry) {
            sum = sum.setBit(i);
        }
        carry = (augBit &amp;&amp; addBit) || ((augBit ^ andBit) &amp;&amp; carry);
    }
    return sum;
}
</code></pre>

<p>Alright, at this point, I can see the algorithm more clearly in the code, time to move on.....</p>

<h2>Bug</h2>

<p>Having isolated the code like this, it is apparent that there is a big bug too. If you have a carry coming from the highest bit sum, you ignore the carry... So, for example, if you have the two values <code>0x0f</code> and <code>0x01</code>, I would expect the sum <code>0x10</code>, but you will not carry the last <code>1</code> bit in to the next value...</p>

<h2>Performance</h2>

<p>With the refactored code, it is clear that there are two major performance hits. The first is that the sum is a BigInteger value that gets recreated multiple times each loop (once for each set bit). Each time you call:</p>

<blockquote>
<pre><code>sum = sum.setBit(i);
</code></pre>
</blockquote>

<p>you create a new BigInteger value, with the corresponding overheads, and memory allocations, etc. This could be a lot of allocations. The native Java routine breaks out of this situation by using primitive values and arrays, and keeps a bit-vector that is mutable for the duration of the addition cycle. By doing it that way, there is no memory management penalty....</p>

<p>A second issue related to performance, that is not obvious, is that the real BigInteger class does things both ways ..... it does a bit-vector for large integer values, but for 'small' values it uses a simple java <code>long</code> primitive. In other words, it simply does <code>long sum = augend.longVal + addend.longVal</code> if the two inputs are small enough for long value representations, and also if the sum will fit in a primitive <code>long</code>. In other words, it is much faster for smaller values than for values that exceed <code>Long.MAX_VALUE/MIN_VALUE</code></p>

<h2>Algorithm</h2>

<p>I have, in the past, tried to out-perform BigDecimal (not BigInteger), by building a mutable version of BigDecimal. It became really complicated really fast. The concept of a MutableBigInteger is nice, but the reality is that it becomes a mess, fast. There are some open source attempts at this, though I believe they are all languishing in disuse. The reason is simple.... BigInteger is, by an large, fast. The penalty of the Immutable memory hit because  you need to create new values and arrays often, is outweighed by the cost of memory management and expansion that is required otherwise.</p>

<p>Finally, the individual operations inside the BigInteger class are able to use the native storage mechanism directly when doing calculations, and you don't need to do the translations for each bit, for example. In other words, 'wrapping' BigInteger is never going to give you the performance that BigInteger itself can give, simply because the internals of BigInteger can access the more efficient internal data structures.</p>
    </div>