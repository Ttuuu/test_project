<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Consistency with LINQ</h3>

<p>I find in order to be consistent with other LINQ APIs and to make the usage of this extension more intuitive you should slightly adjust the parameter names and the return value and rename it to <code>ToLookups</code>.</p>

<p><code>ToLookup</code> calls the <code>Func</code> <code>keySelector</code> and since this extension is accepting a collection, I suggest the name <code>keySelectors</code>.</p>

<p>As far as the return value is concerned, I would use <code>ILookup</code> twice here so that the behaviour of the result is consistent.</p>

<h3>Unexpected behaviour due to <code>HashSet</code></h3>

<p>If you require unique elements then the source should be prefiltered. Ignoring them here is not something I would expect from a grouping. On the contrary, it should group them together because this is what grouping is for. A <code>HashSet</code> could also change the order of elements which the builtin grouping wouldn't so it's another surprise here.</p>

<h3>Suggested code</h3>

<p>This is how I think it should look like:</p>

<pre><code>public static ILookup&lt;string, ILookup&lt;object, T&gt;&gt; ToLookups&lt;T&gt;
(
    this IEnumerable&lt;T&gt; source, 
    params (string Name, Func&lt;T, object&gt; KeySelector)[] keySelectors
)
{
    if (source == null) throw new ArgumentNullException(nameof(source));
    if (keySelectors == null) throw new ArgumentNullException(nameof(keySelectors));

    var materializedSource = source.ToList();       
    return 
        keySelectors
            .Select(t =&gt; (t.Name, Lookup: materializedSource.ToLookup(t.KeySelector)))
            .ToLookup(t =&gt; t.Name, t =&gt; t.Lookup);
}
</code></pre>
    </div>