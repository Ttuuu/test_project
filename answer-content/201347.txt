<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Design issues</h1>

<ul>
<li><p>An overload of <code>insert</code> that accepts <code>T&amp;&amp;</code> is missing.</p></li>
<li><p>Now that there are iterators, I'd expect <code>insert</code> to take a  <code>const_iterator</code> as parameter instead of <code>int pos</code>.</p>

<p>This allows the <code>insert</code> operation itself to run in \$\mathcal{O}(1)\$ by delegating the iteration work to the caller (who might be iterating the list already, e.g. to find where the node should be inserted in the first place).</p>

<p>Also, it would be nice if an <code>iterator</code> pointing to the newly inserted node would be returned (as this allows for easy chaining of insertions).</p>

<blockquote>
  <ul>
  <li><p>If insertion at a specific ordinal position is needed, this could still be easily achieved by calling <code>list.insert(list.begin() + pos, value)</code>.</p></li>
  <li><p>The easiest way to let the <code>SingleLinkedList</code> have access to <code>iterator::node</code> or <code>const_iterator::node</code> is to declare it as a <code>friend class SingleLinkedList</code> inside <code>iterator</code> and <code>const_iterator</code>.</p></li>
  </ul>
</blockquote></li>
<li><p>Clarity issue: What does the <code>delValue</code> parameter of <code>delete_specific</code> actually represent? And while I'm at it, what is the actual purpose of <code>delete_specific</code>?</p>

<p>My first guesses based on its definition would be that <code>delValue</code> is the position to be removed (like <code>int pos</code> in <code>insert</code>), or the value of which all copies should be removed (which then should be of type <code>const T&amp;</code>, not <code>int</code>).</p>

<ul>
<li><p>In the first case, I'd suggest rewriting <code>void delete_specific(int)</code> into <code>iterator erase_after(const_iterator)</code>, to keep the naming from the standard library's <code>std::forward_list</code>.</p></li>
<li><p>In the latter case, I'd suggest rewriting <code>void delete_specific(int)</code> into <code>void remove(const T&amp;)</code>, again adhering to the standard library's choice of name.</p></li>
</ul>

<blockquote>
  <p>Granted, there are some inconsistencies in the standard library itself, as the operations <code>std::forward_list::remove</code> and <code>std::list::remove</code> (removing all elements with a specific value) correspond to <code>erase</code> member functions on other containers. Still, it might be easier to adopt usage of <code>SingleLinkedList</code> if the names are similar to the <code>std::forward_list</code> ones.</p>
</blockquote>

<p>However, that actual implementation of <code>delete_specific</code> does neither of those, instead it only removes the first element that is equal to <code>delValue</code> (not all of them), and throws if none was found (which again would surprise me).</p></li>
</ul>

<h1>Implementation issues</h1>

<ul>
<li><p>Copy-constructing a <code>SingleLinkedList</code> has runtime complexity \$\mathcal{O}(n^2)\$. This could be reduced to \$\mathcal{O}(n)\$.</p>

<blockquote>
  <p>There are multiple ways to achieve this, the easiest would be (assuming the above mentioned changes to <code>insert</code> have been made):</p>

<pre><code>SingleLinkedList(const SingleLinkedList&amp; other) {
    auto insert_pos = begin();
    for(auto&amp;&amp; obj : other) {
        // keep the position of the newly inserted node, as the next one will be inserted after it
        insert_pos = insert(insert_pos, obj);
    }
}
</code></pre>
</blockquote></li>
<li><p>Move assignment might extend the lifetime of the elements originally contained in <code>this</code> far longer than expected by swapping them into <code>move</code>. (Also, it might be unexpected that <code>move</code> isn't empty after the move-assignment.)</p></li>
<li><p><code>clear()</code> doesn't update <code>tail</code> (should be <code>nullptr</code> afterwards).</p></li>
<li><p><code>pop_front()</code> doesn't update <code>tail</code> in case the last node was removed.</p></li>
</ul>

<h1>Iterator issues</h1>

<ul>
<li><p>The iterator classes need a post-increment operator to be fully adhering to the <a href="https://en.cppreference.com/w/cpp/named_req/ForwardIterator" rel="nofollow noreferrer">ForwardIterator requirements</a>.</p></li>
<li><p><code>const_iterator::pointer</code> should be <code>const T*</code> and <code>const_iterator::reference</code> should be <code>const T&amp;</code>, as the expectations of a <code>const_iterator</code> is that it doesn't allow modification (by anyone but the container) of the data it's refering to.</p>

<blockquote>
  <p>Simple memorization help: <code>operator*</code> should return a <code>reference</code> and <code>operator-&gt;</code> should return a <code>pointer</code>. </p>
</blockquote></li>
<li><p><code>iterator::operator-&gt;</code> and <code>const_iterator::operator-&gt;</code> should return a pointer, i.e. <code>return &amp;node-&gt;data;</code> (also needs adjustment of the return type).</p></li>
<li><p>Consider adding an constructor to <code>const_iterator</code> that allows implicit conversion from a normal <code>iterator</code>. This would allow using <code>iterator</code>s in places where a <code>const_iterator</code> would be expected (e.g. in the <code>insert</code> member function).</p></li>
</ul>
    </div>