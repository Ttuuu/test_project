<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It's not even obvious at a glance that your algorithm really sorts all inputs correctly.  In fact, it does, but proving that takes a bit of thought.</p>

<p>The key insight is that, at the end of each iteration of the outer loop, the elements at positions from 0 to <code>i</code> will be sorted correctly:</p>

<pre><code>for (let i = 0; i &lt; array.length; i++) {
  for (let j = 0; j &lt; array.length - 1; j++) {
    if (array[j] &gt; array[i]) {
      [array[i], array[j]] = [array[j], array[i]]
    }
  }
  // Invariant: here array[0] to array[i] will be correctly sorted!
}
</code></pre>

<p>In particular, this invariant will obviously be true at the end of the <em>first</em> iteration, when <code>i == 0</code>.  It is then not hard to inductively show that, if this was true at the end of the previous iteration, then it will remain true (with <code>i</code> now one greater than before) after the next one as well.  Thus, at the end of the last iteration, with <code>i == array.length - 1</code>, the whole array will be correctly sorted.</p>

<hr>

<p>Actually, to achieve this, we only need to iterate the inner loop up to <code>j == i - 1</code>; the iteration with <code>i == j</code> obviously does nothing useful, and any later iterations of the inner loop have no effect on the invariant.  (Those iterations can only swap the element currently at index <code>i</code> with a larger one from the tail end of the array, which will still leave <code>array[i]</code> greater than or equal to all its predecessors.)  So we can speed up your algorithm by only iterating the inner loop until <code>j == i</code>:</p>

<pre><code>for (let i = 0; i &lt; array.length; i++) {
  for (let j = 0; j &lt; i; j++) {
    if (array[j] &gt; array[i]) {
      [array[i], array[j]] = [array[j], array[i]]
    }
  }
  // Invariant: here array[0] to array[i] will be correctly sorted!
}
</code></pre>

<p>With this optimization, your algorithm can be recognized as a form of <a href="https://en.wikipedia.org/wiki/Insertion_sort" rel="nofollow noreferrer">insertion sort</a>.</p>

<hr>

<p>It's generally not the most efficient form of that algorithm, though, since the inner loop does the insertion of <code>array[i]</code> into its correct position somewhat inefficiently.  A somewhat more efficient implementation would be something like this:</p>

<pre><code>for (let i = 1; i &lt; array.length; i++) {
  let j = i, temp = array[i];
  while (j &gt; 0 &amp;&amp; array[j - 1] &gt; temp) {
      array[j] = array[j - 1];
      j--;
  }
  if (j &lt; i) array[j] = temp;
  // Invariant: here array[0] to array[i] will be correctly sorted!
}
</code></pre>

<p>By running the inner loop "backwards" we can stop it as soon as we find an element that's ranked lower than the one we're inserting (thus avoiding lots of needless comparisons, especially if the input array is already mostly sorted), and by saving the element to be inserted in a temporary variable, we can replace the swaps with simple assignments.</p>

<p>The <code>if (j &lt; i)</code> part of the code above is not really necessary, since if <code>j == i</code>, assigning <code>temp</code> back to <code>array[i]</code> would have no effect.  That said, it's generally a useful optimization if integer comparisons are cheaper than array assignments, which is usually the case.  The same goes for starting the outer loop from <code>let i = 1</code> instead of <code>let i = 0</code>; the iteration with <code>i == 0</code> does nothing anyway, so we can safely skip it!</p>
    </div>