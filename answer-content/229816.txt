<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2><code>MainPageViewModel</code></h2>

<p>You provide an interface with a single method:</p>

<blockquote>
<pre><code>public interface IMainPageViewModel
{
    void LoadGroups();
}
</code></pre>
</blockquote>

<p>Yet, the implementation provides a rich set of public members:</p>

<blockquote>
<pre><code>public string FileLocation { get; set; }
public ObservableCollection&lt;string&gt; Groups { get; set; }
public List&lt;Phrase&gt; LoadedPhrases { get; set; }
public bool PhraseEdit { get; set; }
public IPhraseEditViewModel SelectedPhraseEditViewModel { get; set; }
// and so on ..
</code></pre>
</blockquote>

<p>I'm not a fan of this, because this means there is a clear difference between the public API of the implementation and its interface. Perhaps some of these members are specific to the implementation, but surely <code>ObservableCollection&lt;string&gt; Groups { get; }</code> should be part of the interface. Or <code>IReadOnlyCollection&lt;string&gt;</code> if only readonly mode is allowed. I guess the former would be required for your use cases.</p>

<p>You are mixing naming conventions lowercase <code>oldPhrases</code> vs _lowercase <code>_dataProvider</code>. Stick to a single standard.</p>

<p>Be careful designing mutable properties <code>ObservableCollection&lt;string&gt; Groups { get; set; }</code>. It allows consumers to bypass the interface method <code>LoadGroups()</code> to set <code>Groups</code>. This might be considered a breach of encapsulation. Also, a null reference can easily occur:</p>

<blockquote>
<pre><code>public void LoadGroups()
{
    Groups.Clear();  // possible NullReferenceException
    foreach (var group in _dataProvider.GetGroups())
    {
        Groups.Add(group);
    }
}
</code></pre>
</blockquote>

<p><a href="https://stackoverflow.com/questions/43167307/how-to-use-async-method-in-delegatecommand">There is alot to say</a> about <code>DelegateCommand</code> using an <code>async void</code> action like <code>OnLoadFileExecute</code>. I would opt to use a (custom) <code>AsyncDelegateCommand</code> that takes a <code>Task</code> instead, optionally with a nested <code>CancelCommand</code>.</p>

<p>Method <code>LoadFromFile</code> mixes IO, mapping and changing instance state. This might be a bit too much for a single method. Consider splitting this up in classes/methods that each have their own responsibility. Readability could also be improved by inverting the if-statement with an early exit to avoid deep nested statements. </p>

<pre><code>if (string.IsNullOrEmpty(filePath))
{
    LoadedPhrases.Clear(); // assuming the instance can never be null
    Clear();
    return;
}

// remaining method body ..
</code></pre>

<p>If <code>filePath</code> is null, you probably get an annoying exception, so prefer <code>string.IsNullOrEmpty</code> over <code>!= ""</code>.</p>

<p>Use <code>var</code> when the type is obvious to write more compact and clean code: <code>Phrase phrase = new Phrase(..</code> -&gt; <code>var phrase = new Phrase(..</code>.</p>

<p><code>PopulateDb</code> doesn't seem right. You check on reference equality of the collections. But what if a different stores the same or some of the same items? You would save certain items more than once: <code>_dataProvider.SavePhrase(item);</code> -&gt; if the item is also contained in <code>oldPhrases</code>. You have many unit tests, but in TDD you should also find these edge cases I would expect.</p>

<blockquote>
<pre><code>if (oldPhrases != phrases) //populates only if collection is new
</code></pre>
</blockquote>

<h2><code>MainPageViewModelTests</code></h2>

<p>You have written <a href="https://en.wikipedia.org/wiki/White-box_testing" rel="nofollow noreferrer">white-box tests</a>, and you've done it the correct way. The only class you instantiate is the class under test:</p>

<blockquote>
<pre><code>_viewModel = new MainPageViewModel(..
</code></pre>
</blockquote>

<p>While other dependencies get mocked:</p>

<blockquote>
<pre><code>_phraseEditViewModelMock = new Mock&lt;IPhraseEditViewModel&gt;();
_mainDataProviderMock = new Mock&lt;IMainDataProvider&gt;();
</code></pre>
</blockquote>

<p>Allowing for tests against the dependencies without needing to worry about any of their possible implementations:</p>

<blockquote>
<pre><code>_phraseEditViewModelMock.Verify(vm =&gt; vm.LoadPhrase(null), Times.Once);
</code></pre>
</blockquote>

<p>However, you did not write any significant number of <a href="https://en.wikipedia.org/wiki/Black-box_testing" rel="nofollow noreferrer">black-box tests</a>: tests where you check output given some input. By writing more of these tests for edge cases in particular, you would have found a couple of <code>NullReferenceException</code> errors.</p>
    </div>