<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I know this is a couple weeks old, and you already have a good solution.  I just wanted to point out a method that is a bit more deterministic/declarative.</p>

<p>You are already using multiple instances of <code>gatsby-source-filesystem</code>, and they each have their own <code>name</code> property.  That becomes <code>sourceInstanceName</code> on the <code>File</code> nodes.  You can use that value to simplify your code, while also making it more flexible and efficient.</p>

<p>For example</p>

<pre class="lang-js prettyprint-override"><code>const path = require(`path`)

const { createFilePath } = require("gatsby-source-filesystem")
exports.onCreateNode = ({ node, actions, getNode }) =&gt; {
  const { createNodeField } = actions
  if (node.internal.type === "Mdx") {
    const value = createFilePath({ node, getNode })
    const file = getNode(node.parent)
    createNodeField({
      name: "slug",
      node,
      value: `/${file.sourceInstanceName}${value}`,
    })
    createNodeField({
      name: "instance",
      node,
      value: file.sourceInstanceName,
    })
  }
}
</code></pre>

<p>Now, you can create a more abstract page creation process, which as a bonus is less queries, and less arrays to process:</p>

<pre class="lang-js prettyprint-override"><code>exports.createPages = async ({ graphql, actions, reporter }) =&gt; {
  const { createPage } = actions

  const result = await graphql(`
    query {
      allMdx(
        sort: { order: DESC, fields: [frontmatter___date, fields___slug] }
        limit: 10000
      ) {
        edges {
          node {
            id
            fields {
              slug
              instance
            }
            frontmatter {
              title
            }
          }
        }
      }
  `)
  if (result.errors) {
    reporter.panicOnBuild(
      'ðŸš¨  ERROR: Loading "createPages" query.'
    )
  }

  const posts = result.data.allMdx.edges
  const templates = {}
  posts.forEach(({ node }) =&gt; {
    const instance= node.fields.instance
    if (!templates[instance]) {
        templates[instance] = require.resolve(`./src/templates/${instance}`)
    }
    createPage({
      path: node.fields.slug,
      component: templates[instance],
      context: {
          id: node.id,
          instance,
      },
    })
  })
}
</code></pre>

<p>All you have to do is make sure your template names match your <code>sourceInstanceName</code> properties, and that your <code>sourceInstanceName</code> properties match what you want your routes to be.  You can also use the instance that each node belongs to in your page queries.</p>

<p>Notice that I use <code>require.resolve()</code> for the templates, too.  That will resolve it to the correct extension, but it will also fail early if the template doesn't exist.  Might make troubleshooting easier down the road.</p>

<hr>

<p>This is more deterministic because you don't have to do any <code>fileAbsolutePath</code> matching, which can be unstable if your route schemes grow.  Instead, you can match the <code>$instance</code> GraphQL variable against the <code>fields.instance</code> property in your page query filters.</p>

<p>It's more declarative because all I have to do is declare another <code>gatsby-source-filesystem</code> instance, then build the template and the content if I want to add a new group.</p>
    </div>