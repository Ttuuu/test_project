<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>To me your code looks very WET. Everything is using the same core but with minor tweeks here and there. And so we can convert your code to a for loop.</p>
<pre class="lang-py prettyprint-override"><code>TRANSFORMS = [
    (           12, "$", 10**12,    3, ".3f", " trillion",    ".000",        ""),
    (            9, "$", 10** 9,    2, ".2f",  " billion",     ".00",        ""),
    (            6, "$", 10** 6,    1, ".1f",  " million",      ".0",        ""),
    (            0, "$", 10** 0,    2, ".2f",          "",     ".00",        ""),
    (float("-inf"),  "", 10**-2, None,    "",    " cents", "1 cents",  "1 cent"),
]


def convert_float_to_value(number):
    if number == 0.0:
        return "0 cents"
    digits = 1 + math.floor(math.log10(number))
    for d, *t in TRANSFORMS:
        if digits &gt; d:
            return f"{t[0]}{round(number / t[1], t[2]):,{t[3]}}{t[4]}".replace(t[5], t[6])
</code></pre>
<p>From here we can start to see patterns and other improvements.</p>
<ol>
<li><p>Excluding cents; <code>t[2]</code>, <code>t[3]</code> and <code>t[5]</code> all have the same size.
This means we can build them all from one value.</p>
<pre class="lang-py prettyprint-override"><code>v = ...
t[2] = v
t[3] = f".{v}f"
t[4] = "." + "0"*v
</code></pre>
</li>
<li><p>It makes little sense to use <code>.2f</code> for billions. I've never, until this day, seen "$1.10 billion". It's almost like you've used the wrong word and meant to say "dollars".</p>
<p>To fix this I'd stop using <code>.2f</code>. However this will break how <code>.replace</code> works, and can add some hard to fix bugs.
(Converting 10.01 to 101)
To fix this I'd convert integers to <code>int</code>s and keeps floats as floats.</p>
</li>
<li><p>We haven't built <code>t[3]</code> and <code>t[5]</code> from <code>t[2]</code> for plain dollars as it still requires <code>.2f</code> to make sense.
To deal with this we can make a function <code>pretty_round</code> that takes a number, a number of digets to round to, an option for the output to be a fixed amount of decimal places and any additional formatting. The only thing is that the output has return a string and a float.</p>
<pre class="lang-py prettyprint-override"><code>def pretty_round(number, ndigits=None, fixed=False, format_spec=""):
    number = round(number, ndigits)
    if number % 1 == 0:
        return number, format(int(number), format_spec)
    return number, format(number, format_spec + (f".{ndigits}f" if fixed else ""))
</code></pre>
</li>
<li><p>With the above changes we can see <code>t[5]</code> and <code>t[6]</code> are only there to convert cents from plural to singular.
And so why not just check if the output is singular or plural and append the correct term?</p>
</li>
<li><p>By changing the method of finding <code>digits</code> to use <code>len</code> we can replace <code>float('-inf')</code> with <code>-2</code> and build <code>t[1]</code> from <code>d</code>.</p>
</li>
<li><p>I am going to reorder the table so that they're grouped better. <code>t[0]</code> should be near <code>t[5]</code> and <code>t[6]</code>.
And we can now give them easy to understand names.</p>
</li>
</ol>
<pre class="lang-py prettyprint-override"><code>TRANSFORMS = [
    (12,    3, False, " trillion", "$",       "",       ""),
    ( 9,    2, False,  " billion", "$",       "",       ""),
    ( 6,    1, False,  " million", "$",       "",       ""),
    ( 0,    2,  True,          "", "$",       "",       ""),
    (-2, None, False,          "",  "", " cents",  " cent"),
]


def pretty_round(number, ndigits=None, fixed=False, format_spec=""):
    number = round(number, ndigits)
    if number % 1 == 0:
        return number, format(int(number), format_spec)
    return number, format(number, format_spec + (f".{ndigits}f" if fixed else ""))


def convert_float_to_value(number):
    digits = len(str(int(number)).lstrip('0-'))
    for exp, dp, fixed, magnitude, prefix, plural, singular in TRANSFORMS:
        if digits &gt; exp:
            number_f, number_s = pretty_round(number / 10**exp, dp, fixed, ",")
            name = singular if number_f == 1 and exp &lt;= 0 else plural
            return f"{prefix}{number_s}{magnitude}{name}"
</code></pre>
<ol start="7">
<li><p>We can see that <code>TRANSFORMS</code> is not <a href="https://en.wikipedia.org/wiki/Database_normalization" rel="nofollow noreferrer">normalized</a>.</p>
<ol>
<li><p>All of <code>prefix</code>, <code>plural</code> and <code>singular</code> are refering to dollers and cents.
This can be extracted out into it's own table.
Not only does it reduce how WET your code is it allows us to replace dollars with other monetary notations.
Additionally it allows making changes easier if you want to change from using "$" to "dollars"</p>
</li>
<li><p>The magnitude can change even in English. This is as 1 trillion can equal 1 billion, depending on which <a href="https://en.wikipedia.org/wiki/Long_and_short_scales" rel="nofollow noreferrer">scale</a> you use.
Having this baked into the <code>TRANSFORMS</code> table can be problematic in the future.</p>
</li>
</ol>
</li>
<li><p>With your values <code>fixed</code> is the same as <code>not exp</code>.</p>
</li>
</ol>
<pre class="lang-py prettyprint-override"><code>SHORT_SCALE = [
    "",
    " thousand",
    " million",
    " billion",
    " trillion",
]
USD = [
    ("$", "", ""),
    ("", " cents", " cent"),
]
TRANSFORMS = [
    (12, 3),
    ( 9, 2),
    ( 6, 1),
    ( 0, 2),
    (-2, 0),
]


def pretty_round(number, ndigits=None, fixed=False, format_spec=""):
    number = round(number, ndigits)
    if number % 1 == 0:
        return number, format(int(number), format_spec)
    return number, format(number, format_spec + (f".{ndigits}f" if fixed else ""))


def convert_float_to_value(number, *, scale=SHORT_SCALE, currency=USD):
    digits = len(str(int(number)).lstrip('0-'))
    for exp, dp in TRANSFORMS:
        if digits &gt; exp:
            number_f, number_s = pretty_round(number / 10**exp, dp, not exp, ",")
            prefix, plural, singular = currency[exp &lt; 0]
            name = singular if number_f == 1 and exp &lt;= 0 else plural
            return f"{prefix}{number_s}{scale[int(exp / 3)]}{name}"
</code></pre>
    </div>