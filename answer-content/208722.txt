<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Just some random things I noticed while looking over your code:</p>

<hr>

<p>The way you're handling additions is a little odd to me. You seem to be continually maintaining an "empty node" at the end of the list, then when you add, you iterate to that node, replace its content then give it a new, empty node. Why not just have <code>nextNode</code> remain <code>None</code>, then iterate while <code>currentNode.hasNextNode()</code> to find the last node? Something like:</p>

<pre><code>def getLastNode(self):
    currentNode = self.startNode
    while currentNode.hasNextNode():
        currentNode = currentNode.nextNode
    return currentNode

def insert(self, obj):
    newNode = Node()
    newNode.object = obj

    lastNode = self.getLastNode()
    lastNode.nextNode = newNode
</code></pre>

<p>From my experience, this is a far more typical set up. This also has the <em>miniscule</em> benefit of using <em>slightly</em> less memory, since you're no longer keeping one more node than needed in memory at all times. This also does away with the need for the <code>hasObject</code> method.</p>

<hr>

<p>The definition of <code>getNumberOfElements</code> is completely impractical for most applications. You can assume for most, if not all data structures (besides maybe lazy lists), that a <code>size</code> method will run in O(1) time. Iterating the entire list every time you want to get the size has the opportunity to bring your application to a crawl; especially if the user of the class isn't aware that <code>getNumberOfElements</code> is O(n).</p>

<p>Just give your class a <code>n_nodes</code> field, and increment/decrement it in the appropriate methods:</p>

<pre><code>def insert(self, obj):
    newNode = Node()
    newNode.object = obj

    lastNode = self.getLastNode()
    lastNode.nextNode = newNode

    self.n_nodes += 1 # Here
</code></pre>

<p>Then change <code>getNumberOfElements</code> to something like:</p>

<pre><code>def size(self):
    return self.n_nodes
</code></pre>

<p>You can now get the size of the list nearly instantly instead of requiring a full iteration. The only drawback is you need to take care to properly manage <code>n_nodes</code> in all the methods that can change the size of the list.</p>

<hr>

<p>Python isn't my main language, but I'm pretty sure snake_case is idiomatic Python. Coming from Java, you're probably more used to camelCase, but adhering to conventions is important for allowing other people to read your code easier. One thing you need to adjust to when writing in multiple languages is remembering what conventions the language you're writing uses. Clojure, my main language, uses dash-case; but this isn't even valid in many languages (like Python). I've gotten yelled at many times on Stack Overflow when answering questions in languages I don't use often because I forgot to adjust my naming conventions, and end up using either unidiomatic, or outright illegal names.</p>

<hr>

<p>It would likely simplify your life if you gave the <code>Node</code> constructor the ability to directly set <code>nextNode</code> and <code>object</code> fields:</p>

<pre><code>def __init__(self, newObject = None, newNextNode = None):
    self.object = newObject
    self.nextNode = newNextNode
</code></pre>

<p>That will save you a couple lines in the few places by just directly passing the object:</p>

<pre><code>def insert(self, obj):
    newNode = Node(obj)

    # No longer needed!
    # newNode.object = obj

    lastNode = self.getLastNode()
    lastNode.nextNode = newNode

    self.n_nodes += 1
</code></pre>

<hr>

<p>The "start node" of a linked list is more typically referred to as the "root".</p>

<hr>

<pre><code>def delete(self, index):
    if index == 0:
        startNode = self.getNodeByIndex(1)
...
</code></pre>

<p>Could probably be written more cleanly as simply</p>

<pre><code>def delete(self, index):
    if index == 0:
        startNode = startNode.nextNode
...
</code></pre>

<hr>

<p>For efficiency, you might also want to maintain a <code>lastNode</code> field. Right now, to get to the last node, you're needing to iterate the entire list, which is quite expensive. If you just keep a reference to the last node when you do an insertion, you can just use that reference instead of needing to iterate.</p>

<hr>

<pre><code>if index == (self.getNumberOfElements) - 1:
</code></pre>

<p>Is broken. You need to call the method.</p>
    </div>