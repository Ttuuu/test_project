<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The first question: yes, acceptable (putting aside questions like should an architecture that requires unique ids be restructuredâ€”there's no such thing as universal solution after all.) Note that it probably makes sense to return an id rather than assign it by reference, as the latter allows to assign ids in init-list (and you can declare <code>id</code> <code>const</code>, if you don't need to assign objects.)</p>

<p>The second question: while quite possible, are you sure you really need to keep track of all the allocated/released ids? resource bookkeeping with static data storages (and maybe even garbage collection), all that stuff that immediately becomes necessary, eh?</p>

<p>Well, if you really need to, instead of <code>giveID</code> you'll need a whole static objects that assigns ids, accepts freed ones (this method is called from object's destructor) etc.</p>

<pre><code>template&lt;class T&gt; class IdSource {
    std::size_t frontier = 0;
    std::stack&lt;std::size_t&gt; released;
public:
    std::size_t assign() {
        if(released.empty()) return ++frontier;
        int retVal(released.top());
        return released.pop(), retVal;
    }
    void release(std::size_t id) { released.push(id); }
};

template&lt;typename T&gt; inline IdSource&lt;T&gt; &amp;idSource() {
    static IdSource&lt;T&gt; retVal;
    return retVal;
};

struct Foo {
    Foo(): id(idSource&lt;Foo&gt;().assign()) {}
    ~Foo() { idSource&lt;Foo&gt;().release(id); }
private:
    std::size_t id;
};
</code></pre>

<p>And note that additional something is needed to make it thread-aware.</p>
    </div>