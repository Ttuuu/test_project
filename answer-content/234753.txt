<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Data entry</h2>
<p>I am not much of a React fan so this is not a how to React, rather, fonts are best handled as sets of pixels in the simplest form possible. Fonts are subject to change and it should be as easy as possible to make changes.</p>
<p>There is nothing worse than having a complicated long winded data entry process to define visual content. The easier it is to create the more time you have to be creative, and the more likely you are willing to put in creative time.</p>
<p>Personally I would have defined the Text to be rendered in a low res <code>canvas</code> scaled to make the pixel size to what is desired and contain all the text. It would use much less memory and be rendered much quicker, but I assume your code is React practice, so will keep it as <code>&lt;Square&gt;</code>, <code>&lt;Character&gt;</code>, and <code>&lt;ColText&gt;</code></p>
<h2>The example</h2>
<p>The char 0 is</p>
<pre><code>111
1 1
1 1
1 1
111
</code></pre>
<p>Can be made a string <code>"111101101101111"</code> (or Number <code>0b111101101101111</code>) and using a template to position line breaks <code>"00b00b00b00b00"</code> (0 is a pixel, b is a break) the conversion from string to displayed pixels is easy.</p>
<p>As the characters <code>"M"</code> <code>"N"</code> and <code>"W"</code> can not be displayed in a 3 pixel wide font the example uses the string length to get the correct template and then builds variable width characters.</p>
<p>I used a JavaScript <code>Map</code> that maps the pixel strings to each character. Characters not found are replaced with space.</p>
<p>Rather than define an element for each character the object <code>ColText</code> has the property <code>text</code> and <code>size</code> to define the string of characters to display and the height in CSS pixels to display the font.</p>
<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="true">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const CHAR_HEIGHT = 5, charMap = new Map();
const PALLET = ["#F66","#DC3","#0A4","#AC4","#4AD","#4AA"];
const CHARS = [/* Variable width chars, Space, 0-9, A-Z */ "0000000000", "111101101101111", "0101010101", "111001111100111",  "111001011001111", "100100101111001", "111100111001111", "111100111101111", "111001001001001", "111101111101111", "111101111001111", "011101111101101", "110101111101110", "010101100101010", "110101101101110", "111100110100111", "111100110100100",   "111100100101111", "101101111101101", "111010010010111", "111001001101010",  "101101110101101", "100100100100111", "1000111011101011000110001", "10011101110110111001", "111101101101111", "110101110100100", "111101101111110", "110101110101101", "011100111001110", "111010010010010", "101101101101110", "101101101010010", "1000110001101010101001010", "101101010101101", "101101011001010", "111001010100111" ];
[..." 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"].forEach((c, i) =&gt; charMap.set(c, CHARS[i]));
const TEMPLATES = ["bbbb",  "0b0b0b0b0", "00b00b00b00b00",  "000b000b000b000b000", "0000b0000b0000b0000b0000", "00000b00000b00000b00000b00000",  "000000b000000b000000b000000b000000"];
const buildChar = (char, size) =&gt; {
    const pixels = charMap.get(charMap.has(char) ? char : " ");
    let i = 0;
    return [...TEMPLATES[pixels.length / CHAR_HEIGHT | 0]].map(t =&gt; (
        t === "0" ? 
          pixels[i++]==="1" ? &lt;Square size={size}/&gt; : &lt;Square colour="#FFF" size={size}/&gt; : 
          &lt;br /&gt;
    ));
};
class Square extends React.Component {
  render() {
    return (&lt;div style={{width: this.props.size, height: this.props.size, display: "inline-block", backgroundColor: this.props.colour || PALLET[Math.random() * PALLET.length | 0]}}&gt;&lt;/div&gt; );
  }
}
class Character extends React.Component {
   render() {
     const pad = Math.max(3, this.props.size / CHAR_HEIGHT / 2.5) + "px";
     return (&lt;div style={{display: "inline-block", lineHeight: 0, paddingLeft: pad, paddingRight: pad}}&gt; 
        {buildChar(this.props.char, this.props.size / CHAR_HEIGHT)}  &lt;/div&gt;);
  }
} 
class ColText extends React.Component {
  render() {
    return (&lt;div&gt; {[...this.props.text].map(char =&gt; &lt;Character char={char} size={this.props.size} /&gt;)} &lt;/div&gt;);
  }
}
ReactDOM.render(
  &lt;div&gt; &lt;ColText size="50" text="HI THERE 0123456789 ABCDEFGHIJKLMNOPQRSTUVWXYZ" /&gt;&lt;ColText size="25" text="GROOVY"/&gt; &lt;/div&gt;,
  document.getElementById("root")
)</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.6.3/umd/react.production.min.js"&gt;&lt;/script&gt;
&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.6.3/umd/react-dom.production.min.js"&gt;&lt;/script&gt;
&lt;div id="root"&gt;&lt;/div&gt;</code></pre>
</div>
</div>

    </div>