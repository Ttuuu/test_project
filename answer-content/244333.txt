<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Symbolic Constants</strong><br>
It is good that you named these numeric constants, but they are constants so rather than declare them as variables, declare them as constants.</p>
<pre><code>        static void Main(string[] args)
        {
            const int n = 5; //nodes
            const int m = 100; //size of square
            const int mm = 999; //maximum cost
            const double t = m / 0.75; //distance
</code></pre>
<p><strong>DRY Code</strong><br>
There is a programming principle called the <a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself" rel="noreferrer">Don't Repeat Yourself Principle</a> sometimes referred to as DRY code. If you find yourself repeating the same code multiple times it is better to encapsulate it in a function. If it is possible to loop through the code that can reduce repetition as well.</p>
<p>This code is almost repeating and can be encapsulated in a function.</p>
<pre><code>                            {
                                shortestDistance = d[i] + c[i, j];
                                iShortest = i;
                                jShortest = j;
                                spannedShortest = i;
                                unspannedShortest = j;
                            }
</code></pre>
<p>Other code that could be put into a function is the code that prints out the arrays.</p>
<p><strong>Use Functions to Break Up the Code</strong><br>
When designing and writing software the best problem solving method is to decompose the problem into smaller and smaller parts. This makes coding much easier and limits the complexity of the code. One example is the code above that is reusable. Smaller blocks of code are easier to read, write, debug and maintain.</p>
<p><strong>Format the Output</strong><br>
There are ways to <a href="https://docs.microsoft.com/en-us/dotnet/api/system.console.writeline?view=netcore-3.1#System_Console_WriteLine_System_String_System_Object_System_Object_" rel="noreferrer">format</a> <code>Console.Write()</code> and <code>Console.WriteLine()</code>:</p>
<pre><code>            Console.WriteLine("Coordinates");
            for (int i = 1; i &lt;= n; i++)
            {
                Console.WriteLine("{0:D}: ({1:F}, {2:F})", i, x[i].ToString("0.00"), y[i].ToString("0.00"));
            }
            Console.WriteLine();
</code></pre>
<p>Rather than using <code>Console.WriteLine();</code> use <code>Console.WriteLine("\n");</code> or <code>Console.Write("\n\n");</code> to insert blank lines.</p>
<p>This is a beginning and I'm out of time. After you have made functions you might want to post a second question with a link to this one.</p>
    </div>