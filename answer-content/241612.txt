<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Suspect: Weak hash</strong></p>

<p><code>GROW_CAPACITY()</code> only makes for powers of 2 in <code>table-&gt;capacity</code> ...</p>

<pre><code>#define GROW_CAPACITY(capacity) (capacity) &lt; 8 ? 8 : (capacity) * 2  
...
value_hash(&amp;key, &amp;hash)
int slot = hash % table-&gt;capacity;
</code></pre>

<p>... so all that work to make a good hash results in only using the last few bits from <code>value_hash()</code> as code is modding by a power-of-2.  The entire quality of the hash is thus dependent of its least significant bits.</p>

<p>If <code>value_hash()</code> is a <em>real good hash</em>, then using any bits is OK.  Yet if <code>value_hash()</code> has weaknesses, (say it favors forming even <code>hash</code> values or not uniformly distrusted for the keys given to it in its least significant bits), then the later code will call <code>keys_equal()</code> more often than with a good hash due to increased collisions, potentially reducing performance to that of a linked-list.  This is a source of inefficiency.</p>

<pre><code>while (node != NULL) {
    if (keys_equal(node-&gt;key, key)) { 
</code></pre>

<hr>

<p>To help along weak hash functions, simply use a prime capacity, rather than doubling at each step.</p>

<p>Then <code>slot</code> will depend on all bits of <code>hash</code>.</p>

<p>I recommend using a table of primes just lower than powers of 4 for the capacity.</p>

<pre><code>size_t prime2[capacity_index] = { 3, 13, 61, 251, ... }
</code></pre>

<blockquote>
  <p>Conclusion: Performing <code>% table-&gt;capacity</code> with a prime will not harm a good hash function, yet will improve weaker ones and reduce collisions.</p>
</blockquote>

<p>[Edit] Hmmm. OP has "though only ever iterating through one entry" so this may not be the case.  OP does have "never does more than one iteration" yet that <em>never</em> seems suspicious as that is too perfect.</p>

<hr>

<p><strong>Use function pointers</strong></p>

<p>For a linear improvement, use a pointer to various hash functions rather than one hash function with a <code>switch()</code>.</p>

<pre><code>typedef bool (*)(Value* value, unsigned long* result) func_t;

bool value_hash(Value* value, unsigned long* result) {
    // switch (value-&gt;type) {
    // ...

    func_t hash_func[VALUE_ADDRESS + 1] = {value_hash_NUMBER, value_hash_BOOLEAN, ... };
    return hash_func[value-&gt;type](value, result);
}
</code></pre>

<p>Same for <code>value_compare()</code>.</p>
    </div>