<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>1) You can listen for requests for your application to close without making your own loop</strong>, and without having to push the logic of your application into another task</p>

<pre><code>var cts = new CancellationTokenSource();
AppDomain.CurrentDomain.ProcessExit += (sender, eventArgs) =&gt; cts.Cancel();
Console.CancelKeyPress += (sender, eventArgs) =&gt; { cts.Cancel(); eventArgs.Cancel = true; };
</code></pre>

<p>So you don't need <code>Task.Run</code> anymore. This is also a better, more consistent check for closing that is better implemented than anything you can hand roll in a main method. </p>

<p>(fyi. Unless you choose to leak these (and know what that means) you'll need to dispose cts and unregistered the handlers)</p>

<p><strong>2) I almost certain passing a cancellation token to ExecuteReaderAsync is sufficient to cancel the query</strong>. You can verify this, but I think that cmd.Cancel for for people using ExecuteReader (non-async), which doesn't have a cancellationtoken.</p>

<p><strong>3) Some other comments.</strong> It looks like you're not actually reading anything, is this code incomplete? A simple while loop is also probably not a great event loop (eg a delay would be good) but you don't need to worry about that anyway.</p>
    </div>