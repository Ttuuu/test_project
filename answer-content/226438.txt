<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <blockquote>
    <p><strong>Constraints</strong><br>
    1 &lt;= N &lt;= 100000<br>
    0 &lt;= K &lt;= 10<sup>9</sup><br>
    0 &lt;= H[i] &lt;= 10<sup>9</sup><br>
    1 &lt;= Q &lt;= 100000<br>
    0 &lt;= l &lt;= r &lt; N</p>
  </blockquote>
</blockquote>

<p>My rule of thumb for this kind of challenge is that 10<sup>9</sup> operations is a limit. So, ignoring the hidden constant of Landau notation, we're looking at something which is <span class="math-container">\$O(N\sqrt N + Q\sqrt Q + Q\sqrt{N} + K)\$</span>. In particular, each query shouldn't take more than <span class="math-container">\$\sqrt N\$</span> time. That would seem to push us towards a preprocessing step which is <span class="math-container">\$O(N\sqrt N + K)\$</span> and which allows us to process individual queries fast. Alternatively, we might have a preprocessing step which takes into account the queries, but that's likely to be more complicated.</p>

<p>Since your approach takes (in the worst case) <span class="math-container">\$O(QN\lg N)\$</span> time, it's definitely nowhere near complying with my rule of thumb.</p>

<hr>

<p>If we consider first the idea of a preprocessing step which takes into account the queries, it's quite easy to construct a really nasty case where we have boundaries between every consecutive pair of wrestlers, and each one contributes to multiple queries. E.g. take the following 100000 queries:</p>

<pre><code>(0, 99999), (1, 99998), (2, 99997), ..., (49999,50000),
(0, 49999), (1, 50000), (2, 50001), ..., (49999, 99998)
</code></pre>

<p>I don't find that approach promising.</p>

<hr>

<p>Ideas which might be more promising are bucketing the wrestlers in buckets of width <span class="math-container">\$K\$</span>, so that each wrestler can only interact with those in the same bucket and some of those in the adjacent buckets - although the "some of" is a problem; and inclusion-exclusion, although I can't quite get that to work. It's "fast enough" to precompute tables <span class="math-container">\$C[a]\$</span> which is the number of valid fights between <span class="math-container">\$i \le a &lt; j\$</span>; <span class="math-container">\$L[a]\$</span> which is the number of valid fights between <span class="math-container">\$i &lt; j \le a\$</span>; and <span class="math-container">\$R[a]\$</span> which is the number of valid fights between <span class="math-container">\$a \le i &lt; j\$</span>. But the closest I can get to the number of valid fights between <span class="math-container">\$l \le i &lt; j \le r\$</span> is the difference of that with the number of valid fights between <span class="math-container">\$i \le l\$</span> and <span class="math-container">\$j \ge r\$</span>.</p>
    </div>