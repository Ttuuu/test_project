<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You're already declaring your variables :+1:. But I'll still mention that <code>Option Explicit</code> should be turned on. From the menu at the top Tools&gt;Options&gt;Editor tab&gt;Code Settings group&gt;Require Variable Declaration needs a check mark. That will then add <code>Option Explicit</code> to every new module mandating that <code>Dim variableName As String</code> needs to be added before any variable can be used. Again, it looks like you're already doing this but it wasn't explicitly shown in your code.</p>

<hr>

<p>Naming in VBA is PascalCase for Subs/Function where <code>TheFirstLetterOfEveryWordIsCapitalized</code>. Variables is camelCase where <code>theSecondAndSubsequentWordsAreCapitalized</code>.</p>

<hr>

<p>For the <a href="https://docs.microsoft.com/en-us/office/vba/Language/Reference/User-Interface-Help/select-case-statement" rel="nofollow noreferrer">Select Case statement</a> want to replace <code>1, 2, ... , 23, 24</code> and <code>26, 27, ... , 39, 40</code> with a range of values. 
Below it immediately apparent that 25 is intentionally omitted. All too easy to miss that 25 is not in your original code.</p>

<pre><code>Select Case Target.Column
    Case 1 To 24, 26 To 40
</code></pre>

<hr>

<p>In <code>Cells(Target.Row, 25).Value = Date + Time</code> you're implicitly accessing the whatever-happens-to-be-active-sheet by not qualifying your <code>Cells</code> access with a worksheet. Because the code is within a worksheets event handler you can qualify with the identifier <code>Me.Cells(...)</code>. Otherwise if you're in a standard module explicitly qualify with the sheet you want to work with <code>Sheet1.Cells(...)</code>. Always make it explicit which worksheet you want to use so there's no guessing as to your intention.</p>

<p>That line is also using the <a href="https://docs.microsoft.com/en-us/office/vba/language/reference/user-interface-help/date-function" rel="nofollow noreferrer">Date function</a> and the <a href="https://docs.microsoft.com/en-us/office/vba/language/reference/user-interface-help/time-function" rel="nofollow noreferrer">Time function</a> when you can use the <a href="https://docs.microsoft.com/en-us/office/vba/language/reference/user-interface-help/now-function" rel="nofollow noreferrer">Now function</a>. <code>Me.Cells(Target.Row, 25).Value = Now</code></p>

<hr>

<p>Within <code>Worksheet_SelectionChange</code> you are implicitly accessing the default member with <code>Range("z1") = "assignValue"</code>.  <code>Range("z1").[_Default] = "assignValue"</code> is what's occurring. As stated above be explicit about member access by stating <code>Range("z1").Value2 = "assignValue"</code>. Charles William already explained <a href="https://fastexcel.wordpress.com/2011/11/30/text-vs-value-vs-value2-slow-text-and-how-to-avoid-it/" rel="nofollow noreferrer">TEXT vs VALUE vs VALUE2</a> if you're interested.</p>

<hr>

<p>You can consolidate </p>

<pre><code>Range("b1") = "=b" &amp; rw
Range("c1") = "=c" &amp; rw
Range("d1") = "=d" &amp; rw
Range("e1") = "=e" &amp; rw
Range("f1") = "=f" &amp; rw
</code></pre>

<p>into a single assignment</p>

<pre><code>Me.Range("b1", "f1").Formula = "=b" &amp; rw
</code></pre>

<p>In addition to that you can turn off <code>Application.EnableEvents</code> until the last assignment since it's overwriting the same cell. This will increase speed a bit.</p>

<pre><code>If ActiveCell.Row &gt; 2 Then
    Dim rw As Long
    rw = ActiveCell.Row

    Application.EnableEvents = False

    Me.Range("z1").Value2 = "=c" &amp; rw
    Me.Range("b1", "f1").Formula = "=b" &amp; rw
    Me.Range("q1").Value2 = "=aa" &amp; rw
    Me.Range("o1").Value2 = "=o" &amp; rw
    Me.Range("g1").Value2 = "=i" &amp; rw
    Me.Range("u1").Value2 = "=u" &amp; rw

    Application.EnableEvents = True

    Me.Range("x1").Value2 = "=y" &amp; rw

    If Application.CutCopyMode = False Then
        Application.Calculate
    End If
End If
</code></pre>

<hr>

<p>The <a href="https://docs.microsoft.com/en-us/office/vba/Language/Reference/User-Interface-Help/call-statement" rel="nofollow noreferrer">Call statement</a> isn't needed. It's there for legacy purposes.</p>

<hr>

<p>You can conosolidate <code>nomefile</code> and <code>nomefile2</code> by paramaterizing the Sub. This is because only "h1" and "i1" are different. Refactor your code so that it accepts the arguments you need. Below you're supplying the <code>singleCell</code> variable which describes what you require of it along with how long you want the popup to display for. You can keep the Sub within the same code behind for the worksheet since, as far Is I can tell, its working on the same sheet. This goes back to qualifying your Range references to make it explicitly clear which sheet they come from.</p>

<p>You also don't need or want to <code>Range(...).Select</code> followed by <code>Selection.Copy</code>. <a href="https://stackoverflow.com/questions/10714251/how-to-avoid-using-select-in-excel-vba">How to avoid using Select in Excel VBA</a> answered this already.</p>

<pre><code>Private Sub DisplayPopupForCopiedCell(ByVal singleCell As Range, ByVal secondsToDisplayWindow)
    singleCell.Copy
    CreateObject("WScript.Shell").Popup singleCell.Value2, secondsToDisplayWindow, "Testo copiato: "
End Sub
</code></pre>

<p>Now when you need to use it <code>DisplayPopupForCopiedCell Me.Range("h1"), 1</code> and <code>DisplayPopupForCopiedCell Me.Range("i1"), 1</code> are used. This eliminates copied code and when you have to make a change you only need to do so in a single location.</p>

<p>Do the same for <code>nomefile3</code> and <code>nomefile4</code></p>

<hr>

<p>The Sub for Cartella has no need for the label <code>fin:</code>. Replace that with the Exit statement. Also you can rename the sub. Forgiveness on my lack of Italian but a rough tranlsate results in <code>AprireCartellaDeiStudenti</code>.</p>

<pre><code>Public Sub OpenStudentRecordFolder(ByVal folderPath As String)
    If IsError(folderPath) Then
        Exit Sub
    End If

    Shell "explorer.exe " &amp; folderPath, vbNormalFocus
End Sub
</code></pre>

<hr>

<p>The static cell references "h1", "i1" are ticking time bombs and will break if the cells are shifted by adding a row above or column to the left. Using a named range so that you have <code>Sheet1.Range("StudentRecordFolder")</code> or <code>Sheet1.Range("CartellaRegistrazioneStudente")</code> won't break with a shifting cell.</p>

<hr>

<p>The above will help clarify your code. Ultimately I'm not sure how much faster it will make it.</p>
    </div>