<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Please read about <a href="https://phpdelusions.net/sql_injection" rel="nofollow noreferrer">sql injection</a>. Basically you should be using <a href="https://phpdelusions.net/sql_injection#prepared" rel="nofollow noreferrer">prepared statements</a> with parameters for executing SQL queries - either <a href="https://www.php.net/manual/en/pdo.prepare.php" rel="nofollow noreferrer"><code>PDO::prepare()</code></a> or <a href="https://www.php.net/manual/en/mysqli.prepare.php" rel="nofollow noreferrer"><code>mysqli_prepare()</code></a>. If that isn't enough of a clue, consider the case where <code>$_POST['body']</code> contains something like <code>body');DROP TABLE users;</code> or some variant that leads to successful <code>WHERE</code> conditions that end up dropping one or more tables. <a href="https://stackoverflow.com/a/60496/1575353">This Stack Overflow post</a> also has more information. </p>

<p>As <a href="https://codereview.stackexchange.com/questions/243457/post-submission-pic-upload-and-posts-fetch-security#comment477845_243457">a comment</a> alludes to, the code appears to be using PHP 5 or earlier features. As of the time of writing, <a href="https://www.php.net/supported-versions.php" rel="nofollow noreferrer">PHP 7 has LTS for version 7.4</a>, and 5.6 or anything earlier is in End of Life support, meaning "<em>A release that is no longer supported. Users of this release should upgrade as soon as possible, as they may be exposed to unpatched security vulnerabilities.</em>"<sup><a href="https://www.php.net/supported-versions.php" rel="nofollow noreferrer">1</a></sup>. </p>

<p>There are many newer features added in PHP <a href="https://www.php.net/manual/en/migration70.new-features.php" rel="nofollow noreferrer">7.0</a>, <a href="https://www.php.net/manual/en/migration71.new-functions.php" rel="nofollow noreferrer">7.1</a>, <a href="https://www.php.net/manual/en/migration72.new-features.php" rel="nofollow noreferrer">7.2</a>, <a href="https://www.php.net/manual/en/migration73.new-features.php" rel="nofollow noreferrer">7.3</a> and <a href="https://www.php.net/manual/en/migration74.new-features.php" rel="nofollow noreferrer">7.4</a> with things that can simplify your code like: </p>

<ul>
<li><a href="https://www.php.net/manual/en/migration70.new-features.php#migration70.new-features.null-coalesce-op" rel="nofollow noreferrer">the null coalescing operator</a></li>
<li><a href="https://www.php.net/manual/en/migration74.new-features.php#migration74.new-features.core.null-coalescing-assignment-operator" rel="nofollow noreferrer">Null coalescing assignment operator</a></li>
<li><a href="https://www.php.net/manual/en/migration54.new-features.php" rel="nofollow noreferrer">short array syntax (PHP 5.4)</a> - e.g. <code>$a = [1, 2, 3, 4];</code></li>
</ul>

<hr>

<p>The nesting levels of this code isn't totally bad, but it does seem slightly off - e.g. </p>

<blockquote>
<pre><code>$body = !empty($_POST['body']) ? $_POST['body'] : '';

 if(isset($_POST['bts'])) {

   if (empty($_POST["body"])) {
     echo"You didn't enter anything . &lt;a href= profile.php&gt;Try again&lt;/a&gt;";
    } else {
    $body = $_POST["body"];

      $sql = "INSERT INTO posts (username, body ) VALUES ('" . $username . "', '" . $body . "')";

        if(mysqli_query($conn, $sql)){ 
</code></pre>
</blockquote>

<p>Why does it keep incrementing spaces by two characters, even if a new block level is not introduced?</p>

<p>Then the closing braces are all on the same level??</p>

<blockquote>
<pre><code>} 
} 
}
?&gt;
</code></pre>
</blockquote>

<hr>

<p>There are some excess assignment statements:</p>

<blockquote>
<pre><code>// just define at the top of the script index.php
$username = ''; 
$username = isset($_SESSION['username']) ? $_SESSION['username'] : '';
</code></pre>
</blockquote>

<p>The second assignment to <code>$username</code> makes the first assignment useless.</p>

<blockquote>
<pre><code>//Initializing variable
$body = ""; //Initialization value; Examples
     //"" When you want to append stuff later
     //0  When you want to add numbers later
//isset()
$body = isset($_POST['body']) ? $_POST['body'] : '';
//empty()
$body = !empty($_POST['body']) ? $_POST['body'] : '';
</code></pre>
</blockquote>

<p>Here the second assignment of <code>$body</code> also makes the first assignment of it superfluous. </p>

<hr>

<p>It appears <code>$width</code> and <code>$height</code> are set initially:</p>

<blockquote>
<pre><code>$width = 1500;
  $height = 1500;
</code></pre>
</blockquote>

<p>And then they donâ€™t appear to be updated. Then the following conditions never appear to have a chance at evaluating to <code>true</code>:</p>

<blockquote>
<pre><code>if ($width &gt; 1500 || $height &gt; 1500) {

     echo"File is to large";
}
</code></pre>
</blockquote>
    </div>