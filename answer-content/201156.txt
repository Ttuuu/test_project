<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Firstly, I know you said you're not so interested in a style review, but:</p>

<pre><code>using namespace std;
</code></pre>

<p>Apart from being harmful, this isn't even bringing any benefit.  We can just drop it with no changes to the rest of the code.</p>

<p>And if OpenMP is correctly installed, the header should be on the include path (not in your source code location):</p>

<pre><code>#include &lt;omp.h&gt;
</code></pre>

<hr>

<p>The only thing we use from <code>&lt;omp.h&gt;</code> is <code>omp_get_num_threads()</code>; we can avoid needing that if we change the sense of the <code>numWaiting</code> variable, so we get to compare against zero instead:</p>

<pre><code>    unsigned int num_working = 0;
</code></pre>



<pre><code>#pragma omp parallel
{
#pragma omp single
    ++num_working;

    while (true) {
        std::unique_lock&lt;std::mutex&gt; lock(m);

        if (workStack.empty()) {
            --num_working;

            if (num_working == 0) {
                cv.notify_all();
                break;
            }

            while (true) {
                cv.wait(lock);
                if (num_working == 0 || !workStack.empty()) break;
            }

            if (num_working == 0) break;

            ++num_working;
        }
</code></pre>

<p>Instead of the <code>#pragma omp single</code>, we could make <code>num_working</code> be a <code>std::atomic&lt;unsigned&gt;</code> instead.</p>

<hr>

<p>When we add two items to the work queue, we only wake up one worker thread.  We need to wake up a thread for each child, potentially:</p>

<pre><code>        workStack.push(childA);
        cv.notify_one();
        workStack.push(childB);
        cv.notify_one();
</code></pre>

<hr>

<p>Possibly a style issue, but the <code>while (true)</code> loop looks better as a <code>do ... while</code>:</p>

<pre><code>            do {
                cv.wait(lock);
            } while (num_working &gt; 0 &amp;&amp; workStack.empty());
</code></pre>
    </div>