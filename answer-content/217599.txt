<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I don't see any advantage to having the function take three pointers (two for input and one for output) and return a status code.  As a result of that <strong>unnecessarily error-prone design</strong>, the function has to handle the possibility of null pointers, and the caller is expected to handle a status code.  But why should such a simple comparison have these failure modes at all?</p>

<p>The danger is further complicated by the fact that neither of the in-parameters is declared <code>const</code>.</p>

<p><strong>Just pass the two versions by value</strong>, and you would eliminate all of that complication!  On any modern 32-bit or 64-bit processor, passing a four-byte struct by value should actually be more efficient than passing it by reference â€” especially since you don't have to dereference the pointers to access each field.</p>

<p>With all of the potential errors out of the way, taking @RolandIllig's suggestion, you could then reduce it down to one chained conditional expression:</p>

<pre><code>bool is_less_than(struct version a, struct version b) {
    return a.major != b.major ? a.major &lt; b.major :
           a.minor != b.minor ? a.minor &lt; b.minor :
           a.patch != b.patch ? a.patch &lt; b.patch :
                                a.build &lt; b.build;
}
</code></pre>

<p>I'd go further and recommend <strong>using <code>unsigned short</code> instead of <code>unsigned char</code> for the fields</strong>.  Using <code>unsigned char</code> for numeric values is awkward, since you would have to cast them when using <code>printf()</code>.  On a 64-bit architecture, a struct with four 2-byte fields would occupy 64 bits, so you wouldn't be saving anything by using <code>unsigned char</code> instead of <code>unsigned short</code>. It's also entirely conceivable that you might need mire than 256 builds within a patch level.</p>
    </div>