<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The current implementation sums the values of <code>arr[0] + arr[1] + ...</code> until the amount is equal to <code>K</code>,
or if not found, then recursively call the function again, with the first element of the input array sliced off.
For example if the input array is <code>[3, 2, 1]</code> and <code>K</code> is 1,
it will compute <code>3 + 2 + 1</code>, then <code>2 + 1</code>, then <code>1</code>.
This is effectively trying all possible contiguous sub-sequences until a match is found, brute-force.</p>

<p>The only given example input used only positive numbers.
If we can assume this is the case for all inputs,
then a more efficient algorithm exists.
In that case you could keep track of two index pointers in the array,
<code>start</code> and <code>end</code>, and a running <code>sum</code>.
Read elements one by one,
moving forward <code>start</code> or <code>end</code> or both as needed,
according to the current running sum.
(This is technique is also known as the <em>caterpillar method</em>.)
This will require a single pass over the elements (<span class="math-container">\$O(n)\$</span>),
without unnecessary summing or slicing.</p>

<pre><code>const getContiguousElementsSum = (arr, K) =&gt; {
  for (let sum = 0, start = 0, end = 0; end &lt; arr.length; end++) {
    sum += arr[end];

    while (K &lt; sum) {
      sum -= arr[start];
      start++;
    }

    if (sum == K) {
      return arr.slice(start, end + 1);
    }
  }
  return null;
};
</code></pre>

<p>However, if there are negative values in the input, this technique will not work. When there are negative values, it's no longer obvious how to move the index pointers. One path may be to increase the range to compensate, another path may be to omit the negative element. With the logic branching, a linear solution can no longer work.</p>
    </div>