<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I can't see the point in having the <code>Create</code> method here, there's no reason why a constructor can't throw an exception in C#. I'd just get rid of <code>Create</code> and move it all into the constructor (making it public).</p>
<p>The name <code>IsOverlapped</code> sounds a bit odd to me. <code>Is</code> is present tense and <code>Overlapped</code> is past tense. Maybe something like <code>IsOverlapping</code> or even just <code>Overlaps</code>.</p>
<p>You have a typo here: "Begin cannot me more than end". <code>me</code> should be <code>be</code>.</p>
<p>If you have access to expression-bodied members, they can reduce noise IMO:</p>
<pre><code>public bool Overlaps(Span other) =&gt; other != null &amp;&amp; Start &lt;= other.End &amp;&amp; End &gt;= other.Start;
</code></pre>
<p>You'll notice that I've also put a null check for <code>other</code> in there at the same time.</p>
<p>You should rewrite <code>Merge</code> to call <code>TryMerge</code> internally:</p>
<pre><code>public Span Merge(Span other) =&gt; 
    TryMerge(other, out var mergedSpan)
        ? mergedSpan
        : throw new ArgumentOutOfRangeException(nameof(other), "Spans must overlap");
</code></pre>
<p>I really value conciseness and I'm happy with throw expressions so I like this kind of pattern. If you don't, this version would also be fine:</p>
<pre><code>public Span Merge(Span other)
{
    if (!TryMerge(other, out var mergedSpan))
        throw new ArgumentOutOfRangeException(nameof(other), "Spans must overlap");
    return mergedSpan;
}
</code></pre>
<p>Note: there's no need to check for null here as we now do that in <code>Overlaps</code>.</p>
<p>Your <code>Normalise</code> method looks good to me. It's a simple algorithm and easy to read.</p>
    </div>