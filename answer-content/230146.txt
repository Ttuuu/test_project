<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It's hard to give you a full review, because the code complexity is too high..</p>

<h1>Little Typo</h1>

<p>Respond<strong>e</strong>nt instead of Respond<strong>a</strong>nt.</p>

<h1>You did not Implement the Task</h1>

<blockquote>
  <p>If the respondent cannot handle the call, they must escalate it to a manager.</p>
</blockquote>

<p>The <code>Respondent</code> handles his call:</p>

<blockquote>
  <pre class="lang-java prettyprint-override"><code>if (call.level == 0) {
 System.out.println(name + " handling call: " + call);
 Thread.sleep(call.durationInSeconds * 1000);
}
</code></pre>
</blockquote>

<p>When the call is of level <code>0</code> it is a call which gets handles by an <code>Respondent</code>. But where is the <em>escalate</em> part?</p>

<p>Currently the call has an fixed level which means that the caller can choose if he wants to talk with an <code>Respondent</code> or an <code>Manager</code>. Instead the caller should only allowed to call a <code>Respondent</code> and the <code>Respondent</code> has to delegate the call to a <code>Manager</code>.</p>

<h1><code>main</code> in its own Class</h1>

<p>I would create a new class for the <code>main</code> which is currently in <code>CallCenter</code>. This would reduce the complexity and makes a step farther to make the components more reusable.</p>

<h1>Encapsulation</h1>

<p>From <a href="https://en.wikipedia.org/wiki/Encapsulation_(computer_programming)" rel="nofollow noreferrer">Wikipedia</a>:  </p>

<blockquote>
  <p>Encapsulation, in object-oriented programming, is the bundling of data with the methods that operate on that data, or the restricting of direct access to some of an objects components. Encapsulation <strong>is used to hide the values or state of a structured data object inside a class, preventing unauthorized parties' direct access to them</strong>.</p>
</blockquote>

<p>On closer inspection, all fields have no access modifier, which means that they are all [package-private(<a href="https://docs.oracle.com/javase/tutorial/java/java/accesscontrol.html" rel="nofollow noreferrer">https://docs.oracle.com/javase/tutorial/java/java/accesscontrol.html</a>) at the moment so other classes can access them directly.</p>

<p>As an example we could look into <code>Call</code>:</p>

<blockquote>
  <pre><code>class Call {
   /* ... */

   int id;
   int durationInSeconds;
   int level;

   /* ... */
}
</code></pre>
</blockquote>

<p>Now lets focus on <code>durationInSeconds</code> which gets used directly by <code>Respondent</code>, <code>Manager</code> and
 <code>Director</code>:</p>

<blockquote>
  <pre class="lang-java prettyprint-override"><code>Thread.sleep(call.durationInSeconds * 1000);
</code></pre>
</blockquote>

<p>The goal would be to make all fields <code>private</code>, like:</p>

<pre class="lang-java prettyprint-override"><code>class Call {
    /* ... */

    private int id;
    private int durationInSeconds;
    private int level;

    /* ... */
}
</code></pre>

<h1>Static Variables</h1>

<blockquote>
  <pre class="lang-java prettyprint-override"><code>public class CallCenter {

 static BlockingQueue&lt;Call&gt; respondantQueue = new ArrayBlockingQueue&lt;&gt;(20);
 static BlockingQueue&lt;Call&gt; directorQueue = new ArrayBlockingQueue&lt;&gt;(20);

 /* ... */
}
</code></pre>
</blockquote>

<p>Imagine you want to open a new call center. With the declaration <code>static</code> the old and the new call center divide the queues and with the current implementation the call can not be differentiated between old and new call center: <strong>The new call center could handle calls from the old call center</strong>..</p>

<h1>Useless Variables</h1>

<p>To identify a <code>Call</code> it has an <code>id</code>, but the <code>id</code> never gets accessed and is only in the <code>Call#toString</code>.
After we delete <code>id</code> we will see that <code>idCounter</code> is useless too..</p>

<p>If the <code>id</code> would not be useless it would be good to use it in an <code>equal</code>-Method and move the
<code>idCounter</code> to a component which creates the <code>Call</code> - for example the <code>CallCenter</code> or a new
class like a <code>CallFactory</code>.</p>

<h1>Business Logic in Constructor</h1>

<blockquote>
  <pre class="lang-java prettyprint-override"><code>Arrays.asList(new Director("The Director"));
</code></pre>
</blockquote>

<p>Without knowing the code, I would not expect, that the line above executes the business logic of the
director.</p>

<p>Additionally the constructor becomes a high level of complexity. When we look into <code>Respondant</code>s
constructor: it has 6 levels of indentation!</p>

<h1>Some OOP</h1>

<p>I think a suitable design pattern would be the <a href="https://sourcemaking.com/design_patterns/observer" rel="nofollow noreferrer">Observer Design Pattern</a>.</p>

<p>Every time the <code>CallCenter</code> receives a <code>Call</code> it can inform the employees.</p>
    </div>