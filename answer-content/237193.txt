<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This isn't really a code review so much as help on how to get this to compile. </p>

<ul>
<li><code>Array::Array(int *p = NULL, int s = 0){</code> default parameters go on the declaration, not the definition.*</li>
<li><code>Array::Array&amp; operator=(Array other){</code> Qualify the <code>operator</code> with <code>Array::</code>, not the return type. You're not returning an <code>Array::Array</code>**, you're defining the <code>operator=</code> member function of <code>Array</code></li>
<li><code>void Array::swap(Array&amp; first, Array&amp; second){</code> swap is not a member of array, it's a friend. Remove the <code>Array::</code></li>
</ul>

<p>*This is because the <em>client</em> (caller) to the method needs to know what the defaults are supposed to be, since default parameters are mostly a syntactic shortcut. If you put the defaults into the definition (e.g. a cpp/.o file), a client which includes the header cannot see the definition and thus cannot use them. In other words, there exists no <code>Array::Array()</code> constructor right now, there's only the <code>Array::Array(int *, int)</code>, but through C++ magic it can look as though <code>Array::Array()</code> is being called. </p>

<p>** An <code>Array::Array</code> type is impossible because you can't name a child type the same as its parent type. It would be ambiguous with the constructor.</p>
    </div>