<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are a few points in the existing code that I think could be improved.</p>
<h3>Confusing function name <code>write_new_json</code></h3>
<p>Naming is important. Good names make your code more readable, and easier to understand. Bad names make it less readable. Names are bad when they don't describe what the thing is/does, or conversely, if they <em>seem</em> to describe something that the thing <em>isn't/doesn't do</em>.</p>
<p>Usually, the verbs "read" and "write" in programming refer to fetching data from, and sending data to, some external/system resource. Especially a file. So the name <code>write_new_json()</code> sounds like you're writing some JSON to a file. But that's not what the function is doing at all. It's actually transforming some JSON into some other kind of JSON. Therefore <code>write_new_json()</code> is a misleading name.</p>
<p>I would pick a new name that avoids <code>write</code> and probably even avoids <code>json</code>; describing the input and output formats of a function as "JSON" does nothing to capture the <em>purpose</em> of the function. How about <code>build_clock_punches</code>? <code>build_time_logs</code>?</p>
<h3>Confusing variable name <code>i</code></h3>
<pre><code>    for i in data:
</code></pre>
<p>Another naming nitpick. In most programming languages, it is conventional to name your loop counter variable <code>i</code>. In Python, this would be something like <code>for i in range(0, 1000):</code>.<sup>1</sup> But in your case, <code>i</code> is not a loop counter; it is not even a number. Therefore the name is confusing. Try using a more descriptive name, e.g. <code>for clock_punch in data:</code> or <code>for clock_event in data:</code>.</p>
<h3>Unnecessary use of <code>in</code> operator</h3>
<pre><code>        if i['clock_type'] in [3]:
</code></pre>
<p>You're using <code>in</code> because <code>[3]</code> is a list, but there doesn't seem to be any reason that <code>[3]</code> needs to be a list. You can just compare the value directly using the equality operator, e.g. <code>if clock_event['clock_type'] == 3:</code>.</p>
<h3>Unnecessary variable <code>break_count</code></h3>
<p>As far as I can tell, you only use <code>break_count</code> to keep track of the length of <code>request["break"]</code>. Persistently tracking the length of a list in a separate variable is a <strong>bad idea</strong>: it is unnecessary, and it opens you up to bugs. Suppose you go in later and add a new line of code that changes the length of <code>request["break"]</code>, but forget to add that second line of code that updates <code>break_count</code>? Or vice versa?</p>
<p>To find the length of a list directly, use <code>len()</code>.</p>
<pre><code>        if clock_event['clock_type'] == 3:
            last_break_index = len(request["break"]) - 1
            request["break"][last_break_index].update({"end": clock_event["end"]})
</code></pre>
<p>But wait! There's an even better approach here. Python offers a handy syntax for getting the last item in a list: <code>my_list[-1]</code>.</p>
<pre><code>        if clock_event['clock_type'] == 3:
            request["break"][-1].update({"end": clock_event["end"]})
</code></pre>
<p>And for the <code>if break_count == 0:</code> line, it is better to check for the non-existence of <code>request["break"]</code> directly.</p>
<pre><code>        if clock_event['clock_type'] == 4:
            if "break" not in request:
                request.update({"break": []})
</code></pre>
<h3>Too trusting</h3>
<p>Your program assumes the input data will always be well-formed. What happens if it's not? Suppose the system that produces your input goes haywire, and you receive a break-start, and then <em>two</em> break-ends? Or receive a break-end without receiving any break-starts first? Or data with a mix of two or more names?<sup>2</sup> Depending on the nature of the nonsense input, your program would either crash entirely, or produce a nonsense output of its own.</p>
<p>What your program <em>should</em> do in these cases is detect that something is wrong, and then throw some kind of <a href="https://docs.python.org/3/tutorial/errors.html#exceptions" rel="nofollow noreferrer">exception</a> that explains what the problem was. Unfortunately I don't have time to elaborate on every possible case you might encounter, so I'll have to leave that as an exercise for you.</p>
<p>Of course, if this is a school assignment or other non-real-world project where you have a <em>guarantee</em> that the data will be well-formed, you may not want to go through all the extra trouble. But it's something you should keep in mind for future projects.</p>
<hr>
<h3>Thoughts on using a data class</h3>
<p>You mentioned wanting to use a data class to ingest the input data. If all you are planning to do is replace all the dicts in the list <code>data</code> with equivalent data class objects, and then run those objects through the same logic you have now...then you don't gain that much. You do get the type annotations, and there's nothing wrong with having those, but it's not a <em>huge</em> benefit.</p>
<hr>
<p><sup><sup>1</sup>Technically, Python doesn't even have "loop counters" like some other languages do. All Python for-loops are <a href="https://en.wikipedia.org/wiki/Foreach_loop" rel="nofollow noreferrer"><em>foreach</em> loops</a> rather than "traditional" for-loops. But it's close enough that the conventions around <code>i</code> still apply.</sup></p>
<p><sup><sup>2</sup>Actually, it seems perfectly reasonable for the upstream system to send you data for two or more names at once. You may want to enhance your code to support that (or not, I don't know your circumstances).</sup></p>
    </div>