<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You <em>cannot</em> avoid some kind of <code>instanceof</code> checks but you can do them once only. This is useful if you intend to check the <em>same</em> objects multiple times. It seems like a lot of effort but I've had to deal with co-mingled types a few times over the years so it's a useful pattern to know.</p>

<h3>Example 1 - group by Class</h3>

<p>Here we map a stream of unrelated classes into something that can be operated on by type-specific code. There is some ugly (but semantically safe) type-erasure going on in there.</p>

<pre class="lang-java prettyprint-override"><code>  @SuppressWarnings("unchecked")
  private static Object findByPoint(String target, Map&lt;Class, List&gt; mapped ) {
    for( String s : (List&lt;String&gt;)mapped.get(String.class) ) {
      if ( s.equals(target)) return s;
    }
    for( Long l : (List&lt;Long&gt;)mapped.get(Long.class) ) {
      if ( l.toString().equals(target)) return l;
    }
    for( Float f : (List&lt;Float&gt;)mapped.get(Float.class) ) {
      if ( f.toString().equals(target)) return f;
    }
    return null;
  }

  public static void main(String[] args) {
    Object[] things = {"", 1L, 2f};
    Map&lt;Class, List&gt; mapped = (Map)Arrays.stream(things)
      .collect(groupingBy(Object::getClass));
    Object o = findByPoint("1", mapped);

  }
</code></pre>

<h3>Example 2 - group by Enum</h3>

<p>If you want something more "runtime optimisable" then separate the conditional code into discrete classes. <code>Enums</code> and <code>EnumMap</code> are good for this.</p>

<pre class="lang-java prettyprint-override"><code>  @SuppressWarnings( {"unchecked", "unused"})
  private enum BaseType {
    StringType() {
      @Override
      String findByPoint(String target, List items) {
        for (String s : (List&lt;String&gt;)items) {
          if (s.equals(target)) {
            return s;
          }
        }
        return null;
      }
    },
    LongType() {
      @Override
      Long findByPoint(String target, List items) {
        for (Long l : (List&lt;Long&gt;)items) {
          if (l.toString().equals(target)) {
            return l;
          }
        }
        return null;
      }
    },
    FloatType() {
      @Override
      Float findByPoint(String target, List items) {
        for (Float f : (List&lt;Float&gt;)items) {
          if (f.toString().equals(target)) {
            return f;
          }
        }
        return null;
      }
    };

    abstract &lt;T&gt; T findByPoint(String target, List items);

    public static BaseType typeForObject(Object o) {
      return BaseType.valueOf(o.getClass().getSimpleName() + "Type"); // TODO Neither clever nor safe
    }

  }

  private static Object findByPoint(String target, Map&lt;BaseType, List&lt;Object&gt;&gt; mapped) {
    Object o;
    for (Map.Entry&lt;BaseType, List&lt;Object&gt;&gt; entry : mapped.entrySet()) {
      if ((o = entry.getKey().findByPoint(target, entry.getValue())) != null) {
        return o;
      }
    }
    return null;
  }

  public static void main(String[] args) {
    Object[] things = {"", 1L, 2f};
    Map&lt;BaseType, List&lt;Object&gt;&gt; mapped = Arrays.stream(things)
      .collect(groupingBy(BaseType::typeForObject, () -&gt; new EnumMap&lt;&gt;(BaseType.class), toList()));
    Object o = findByPoint("1", mapped);
  }
<span class="math-container">````</span>
</code></pre>
    </div>