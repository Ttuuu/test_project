<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There is one fairly obvious optimization that should cut your time in roughly half. Pascal's Triangle is symmetric. Take advantage of that with whatever algorithm you are using. Roughly speaking (without checking my end-conditions so do that):</p>

<pre><code>for (j=1;j&lt;i/2;j++)
{
  value = matrix[i-1][j-1] + matrix[i-1][j];
  matrix[i][j] = matrix[i][i-j] = value;
  if (value % 2 == 0) 
    n+=2;
}
if ((2*j==i) &amp;&amp; (value%2 == 0))
  n--;
</code></pre>

<p>This also shows some minor optimizations that may gain you time. Saving the new value in a separate variable so that you aren't dereferencing the array subscripts repeatedly, especially the check I added outside the loop, should save a little time. The check outside is because most of the way through the half row you want to count two for every even number, but on the specific end condition in the rows with an odd number of values you will double count it and have to subtract it out again. Do that outside the loop to avoid an if statement inside the loop.</p>

<p>@Neil suggested using two arrays instead of a two dimensional array. That may gain you savings by allowing you to set a variable to row1[i] outside the while loop to avoid double subscripting throughout the j loop. However a good compiler may do that optimization for you. Try it with and without.</p>
    </div>