<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Further development...</p>

<p>As @Michael suggested the skill levels previously used were fairly inaccurate and did not sufficiently describe the level of each team.</p>

<p>I have used the previous year's point tally in the code below and also incorporated a method to re-run the season with the points tally simulated. For now, promoted teams are given skill levels just below the lowest positioned teams from the Premier League last season.</p>

<pre><code>if __name__ == "__main__":
    teams = [
        Team("Arsenal", 70),
        Team("Aston Villa", 33),
        Team("AFC Bournemouth", 45),
        Team("Brighton and Hove Albion", 36),
        Team("Burnley", 40),
        Team("Chelsea", 72),
        Team("Crystal Palace", 49),
        Team("Everton", 54),
        Team("Leicester City", 53),
        Team("Liverpool", 97),
        Team("Manchester City", 98),
        Team("Manchester United", 66),
        Team("Newcastle United", 46),
        Team("Norwich City", 35),
        Team("Sheffield United", 34),
        Team("Southampton", 39),
        Team("Tottenham Hotspur", 71),
        Team("Watford", 50),
        Team("West Ham United", 52),
        Team("Wolverhampton Wanderers", 57)
    ]

    for team in teams:
        print(team.name, team.skill)

    simulate_league(teams)

    sorted_teams = sorted(teams, key=lambda t: t.points, reverse=True)

    print("=" * 108)
    print(
        "| {:&lt;25} | {:^4} | {:^3} | {:^3} | {:^3} | {:^4} | {:^4} | {:^4} | {:^6} |".format("CLUB", "MP", "W", "D",
                                                                                            "L", "GF",
                                                                                            "GA",
                                                                                            "GD", "PTS"))
    for team in sorted_teams:
        print("| {:&lt;25} | {:^4} | {:^3} | {:^3} | {:^3} | {:^4} | {:^4} | {:^4} | {:^6} |".format(team.name, team.mp,
                                                                                                  team.wins,
                                                                                                  team.draws,
                                                                                                  team.losses, team.gf,
                                                                                                  team.ga, team.gdiff,
                                                                                                  team.points))
    for team in teams:
        print(team.name, team.skill)
        team.gf = team.ga = team.gdiff = team.mp = team.wins = team.losses = team.draws = team.points = 0

    simulate_league(teams)

    sorted_teams = sorted(teams, key=lambda t: t.points, reverse=True)

    print("=" * 108)
    print("| {:&lt;25} | {:^4} | {:^3} | {:^3} | {:^3} | {:^4} | {:^4} | {:^4} | {:^6} |".format("CLUB", "MP", "W", "D",
                                                                                            "L", "GF",
                                                                                            "GA",
                                                                                            "GD", "PTS"))
    for team in sorted_teams:
        print("| {:&lt;25} | {:^4} | {:^3} | {:^3} | {:^3} | {:^4} | {:^4} | {:^4} | {:^6} |".format(team.name, team.mp,
                                                                                                  team.wins,
                                                                                                  team.draws,
                                                                                                  team.losses, team.gf,
                                                                                                  team.ga, team.gdiff,
                                                                                                  team.points))
</code></pre>

<p>A small change was made to the goal-scoring function in order to allow for there to now be identical skill levels (in case two teams get the same point tally in the first simulated league).</p>

<pre><code># Used this
if home == away:
# Instead of this
if delta_skill == 0:
</code></pre>

<p>I am wondering how I could incorporate a new feature which introduces the possibility of teams suffering from injuries and therefore affecting their performance?</p>
    </div>