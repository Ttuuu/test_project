<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If you sort your values, you can then make an iterator on the sorted list, forward it to the lower limit, count until the first value is reached that is larger than the upper limit and discard all further values.</p>

<p>The sorting will add <span class="math-container">\$\mathcal{O}(n\log n)\$</span> time complexity, but if you have a lot of values larger than (all) your upper bounds, you could get this back.</p>

<p>An implementation using <a href="https://docs.python.org/3.7/library/itertools.html" rel="nofollow noreferrer"><code>itertools</code></a> could be:</p>

<pre><code>from itertools import dropwhile, takewhile

def graipher(scores, lower, upper):
    scores = sorted(scores)
    for l, u in zip(lower, upper):
        s = iter(scores)
        yield sum(1 for _ in takewhile(lambda x: x &lt;= u, dropwhile(lambda x: x &lt; l, s)))
</code></pre>

<p>Since the scores are now already sorted, you could even use <a href="https://docs.python.org/3.7/library/bisect.html" rel="nofollow noreferrer"><code>bisect</code></a> to find the right indices to insert the upper and lower limits. The difference between the two indices will give you the number of values in range:</p>

<pre><code>from bisect import bisect_left, bisect_right

def graipher2(scores, lower, upper):
    scores = sorted(scores)
    for l, u in zip(lower, upper):
        yield bisect_right(scores, u) - bisect_left(scores, l)
</code></pre>

<p>Both functions are generators. You can just call <code>list()</code> on them to consume them into a list, giving the same result as your code:</p>

<pre><code>if __name__ == "__main__":
   scores= [5, 8, 7]
   lowerLimits = [3, 7]
   upperLimits = [9, 7]

   print(check(scores, lowerLimits, upperLimits))
   print(list(graipher(scores, lowerLimits, upperLimits)))
   print(list(graipher2(scores, lowerLimits, upperLimits)))
</code></pre>

<p>Finally, Python has an official style-guide, <a href="https://www.python.org/dev/peps/pep-0008/?" rel="nofollow noreferrer">PEP8</a>, which recommends using <code>lower_case</code> for variables and functions.</p>

<hr>

<p>When running your function and my two functions on an input of the maximum defined size for <code>scores</code> and a single pair of limits, I get the following timings:</p>

<ul>
<li><code>check</code>: 249 ms ± 3.84 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)</li>
<li><code>graipher</code>: 77.3 ms ± 950 µs per loop (mean ± std. dev. of 7 runs, 10 loops each)</li>
<li><code>graipher2</code>: 53.9 ms ± 772 µs per loop (mean ± std. dev. of 7 runs, 10 loops each)</li>
</ul>

<p>When using a <code>scores</code> of length 10 and the maximum defined size for the lengths of the limits, I get:</p>

<ul>
<li><code>check</code>: 2.8 s ± 112 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)</li>
<li><code>graipher</code>: 246 ms ± 2.77 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)</li>
<li><code>graipher2</code>: 73.1 ms ± 612 µs per loop (mean ± std. dev. of 7 runs, 10 loops each)</li>
</ul>

<p>And finally, when using the maximum defined size for both <code>scores</code> and the limits, only <code>graipher2</code> finishes in a reasonable time (I stopped the other ones after a few minutes):</p>

<ul>
<li><code>graipher2</code>: 247 ms ± 4.94 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)</li>
</ul>

<p>So, to summarize, sort your scores and use bisection.</p>
    </div>