<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I don't like your <code>pop</code> and <code>push</code>. They're shaped specially for <code>StateT</code>, but leave off the wrapper. I'd suggest, instead, something like this:</p>

<pre><code>pop :: Monad m
    =&gt; StateT [a] m (Maybe a)
pop = do
  s &lt;- get
  case s of
    x : s' -&gt; Just x &lt;$ put s'
    [] -&gt; pure Nothing

push :: Monad m
     =&gt; a -&gt; StateT [a] ()
push a = modify (a :)
</code></pre>

<p>Of course, you can implement those using <code>state</code>, but I think this way is clearer. Once you've gone that far, you might consider using <code>Control.Monad.State.Strict</code> (from <code>mtl</code>) and changing the type signatures:</p>

<pre><code>pop :: MonadState [a] m
    =&gt; m (Maybe a)
push :: MonadState [a] m
     =&gt; a -&gt; m a
</code></pre>

<p>Side note: <code>Control.Monad.Trans.State</code> implements <em>lazy</em> state transformers, which are rather weird beasts you usually don't need. Unless you have a special reason, reach for <code>Control.Monad.Trans.State.Strict</code> or <code>Control.Monad.State.Strict</code> instead.</p>

<p>Moving on with the <code>mtl</code> approach: <code>StateT s (MaybeT m) a</code> is really</p>

<pre><code>s -&gt; MaybeT m (a, s)
</code></pre>

<p>or</p>

<pre><code>s -&gt; m (Maybe (a, s))
</code></pre>

<p>What about <code>MaybeT (StateT s m) a</code>? That's</p>

<pre><code>StateT s m (Maybe a)
</code></pre>

<p>or</p>

<pre><code>s -&gt; m (Maybe a, s)
</code></pre>

<p>Not quite the same, but pretty similar! Their monadic operations are essentially the same. The big difference is that in the latter case you get the last state whether or not the operation stopped short. I think you may end up happier that way, with</p>

<pre><code>mainLoop :: MaybeT (StateT Stack IO) x
mainLoop = do
  input &lt;- liftIO getLine
  if null input
    then do
      -- No pattern match!
      x &lt;- MaybeT pop
      liftIO . putStrLn $ x
    else push input
  mainLoop
</code></pre>

<p>Extra side note: we can make <code>mainLoop</code> polymorphic in its return value, because it never returns.</p>

<hr>

<p>An alternative:</p>

<pre><code>pop :: (MonadState [a] m, MonadFail m)
    =&gt; m a
pop = do
  s &lt;- get
  case s of
    x : s' -&gt; x &lt;$ put s'
    [] -&gt; fail "Empty stack"
</code></pre>

<p>Now you can use the same <code>mainLoop</code> code whichever order you choose to stack the transformers:</p>

<pre><code>mainLoop :: ( MonadState Stack m
            , MonadIO m
            , MonadFail m )
         =&gt; m x
mainLoop = do
  input &lt;- liftIO getLine
  if null input
    then do
      x &lt;- pop
      liftIO . putStrLn $ x
    else push input
  mainLoop
</code></pre>

<p>In my opinion, though, this is less clear than the other options, and probably doesn't add much <em>useful</em> flexibility.</p>
    </div>