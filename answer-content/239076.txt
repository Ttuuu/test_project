<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As others have covered the technical details of the encodings and encryption, here's example of a more object-oriented approach (via inheritance rather than encapsulation). As encrypting and decrypting have a lot of common elements, this example also aims to reduce code duplication.</p>

<pre><code>class App_FileEncryption
{
    public void Run()
    {
        var originalFile = new UnencryptedFile(@"c:\temp\myFile.txt", "vik123");
        originalFile.Encrypt();

        var encryptedFile = new EncryptedFile(@"c:\temp\myFile_encrypted.txt", "vik123");
        encryptedFile.Decrypt();
    }
}

public abstract class File
{
    protected string path;
    protected string password;

    protected FileStream fsCrypt =&gt; new FileStream(path, FileMode.Open);
    protected byte[] key =&gt; new UnicodeEncoding().GetBytes(password);
    protected RijndaelManaged RMCrypto = new RijndaelManaged();
    protected string targetPath =&gt; getTargetPath();
    protected string ext =&gt; Path.GetExtension(path).Replace(".", "");
    protected string filename =&gt; Path.GetFileNameWithoutExtension(path);

    protected abstract CryptoStream cs { get; }

    protected File(string path, string password)
    {
        this.path = path;
        this.password = password;
    }

    protected abstract string getTargetPath();
}

public class EncryptedFile : File
{
    protected override CryptoStream cs =&gt;
        new CryptoStream(fsCrypt, RMCrypto.CreateEncryptor(key, key), CryptoStreamMode.Read);

    public EncryptedFile(string path, string password) : base(path, password)
    {
    }

    public void Decrypt()
    {
        ///do stuff, output to targetPath
    }

    protected override string getTargetPath()
    {
        var splitFilename = filename.Split('_');
        var b = Convert.FromBase64String(splitFilename[1]);
        var decryptedfileext = ASCIIEncoding.ASCII.GetString(b);
        return path.Replace(filename + ".vik", splitFilename[0] + '.' + decryptedfileext);
    }
}

public class UnencryptedFile : File
{
    protected override CryptoStream cs =&gt;
        new CryptoStream(fsCrypt, RMCrypto.CreateDecryptor(key, key), CryptoStreamMode.Read);

    public UnencryptedFile(string path, string password) : base(path, password)
    {
    }

    public void Encrypt()
    {
        ///do stuff, output to targetPath
    }

    protected override string getTargetPath()
    {
        var b = ASCIIEncoding.ASCII.GetBytes(ext);
        var encrypted = Convert.ToBase64String(b);
        return path.Replace(filename + "." + ext, filename + "_" + encrypted + ".vik");
    }
}
</code></pre>
    </div>