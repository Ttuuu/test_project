<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>One aspect that could surprise users is that operator <code>&amp;</code> always <em>narrows</em> types to match.  That's a departure from the usual guidance of "do what the integers do".</p>

<p>On one hand, it makes sense not to waste resources on bits that will always be zero.  One of my own use cases is to extract the some or all of the lower 26 bits from a 130-bit value, so it seems reasonable to expect a 26-bit result.</p>

<p>On the other hand, it could catch users out when shifting the result.  These two functions will give different results:</p>

<pre><code>auto fun_i(std::uint32_t a, std::uint16_t b) {
    return (a &amp; b) &lt;&lt; 16;
}

auto fun_b(my::bitset&lt;32&gt; a, my::bitset&lt;16&gt; b) {
    return (a &amp; b) &lt;&lt; 16;
}
</code></pre>

<p>On balance, I think that having to explicitly widen before shifting is a fair price to pay for saving resources when masking large numbers, but that would need to be well documented.  And I value dissenting opinions (in comments, please).</p>
    </div>