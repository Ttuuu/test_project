<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre class="lang-java prettyprint-override"><code>    package hotel;

import java.time.LocalDate;
import java.util.*;

public class Hotel implements HotelManager {

    private HashMap&lt;Integer, Reservation&gt; reservations;
    private int numberOfRooms;

    public Hotel () {
        reservations = new HashMap&lt;&gt;();
        numberOfRooms = 0;
    }

    @Override
    public void setNumberOfRooms (int numRooms) {
        this.numberOfRooms = numRooms;
    }

    @Override
    public boolean makeReservation (Reservation reservation) {
        int nonAvailableRooms = 0;
        for (Map.Entry&lt;Integer, Reservation&gt; entry : reservations.entrySet()) {
            if (reservationsAreOverlapping(reservation, entry.getValue())) {
                nonAvailableRooms++;
            }
        }
        if (nonAvailableRooms == this.numberOfRooms) {
            return false;
        } else {
            reservations.put(reservation.getId(), reservation);
            return true;
            }
    }

    private boolean reservationsAreOverlapping (Reservation newReservation, Reservation existedReservation) {
        if (newReservation.getFromDate().isAfter(existedReservation.getToDate()) ||
                newReservation.getToDate().isBefore(existedReservation.getFromDate())) {
            return false;
        }
        return true;
    }

    @Override
    public void cancelReservation (int reservationId) {
        reservations.remove(reservationId);
    }

    @Override
    public Reservation getReservation (int reservationId) {
        return reservations.get(reservationId);
    }

    @Override
    public int getNumberAvailableRooms (LocalDate dateToCheck) {
        int availableRooms = this.numberOfRooms;
        for (Reservation res : reservations.values()) {
            if (dateToCheck.isAfter(res.getFromDate()) &amp;&amp; dateToCheck.isBefore(res.getToDate())) {
                availableRooms--;
            }
        }
        return availableRooms;
    }

    @Override
    public int getPriceOfReservations (LocalDate from, LocalDate to) {
        int sum = 0;
        for (Reservation res : reservations.values()) {
            if ((res.getFromDate().equals(from) || res.getFromDate().isAfter(from)) &amp;&amp;
                    (res.getToDate().equals(to) || res.getToDate().isBefore(to))) {
                sum += res.getPrice();
            }
        }
        return sum;
    }

    @Override
    public List&lt;Reservation&gt; getAllReservationsSortedByPrice (LocalDate from, LocalDate to) {
        List&lt;Reservation&gt; out = getReservationBetweenDates(from, to);
        Collections.sort(out, Comparator.comparing(Reservation::getPrice));
        return out;
    }

    private List&lt;Reservation&gt; getReservationBetweenDates (LocalDate from, LocalDate to) {
        List&lt;Reservation&gt; out = new ArrayList&lt;&gt;();
        for (Reservation res : reservations.values()) {
            if ((res.getFromDate().equals(from) || res.getFromDate().isAfter(from)) &amp;&amp;
                    (res.getToDate().equals(to) || res.getToDate().isBefore(to))) {
                out.add(res);
            }
        }
        return out;
    }

    @Override
    public List&lt;Reservation&gt; getAllReservationsSortedByDate (LocalDate from, LocalDate to) {
        List&lt;Reservation&gt; out = getReservationBetweenDates(from, to);
        Collections.sort(out, Comparator.comparing(Reservation::getFromDate).thenComparing(Reservation::getToDate));
        return out;
    }


    public static void main(String args[]) {

        Hotel hilton = new Hotel();
        hilton.numberOfRooms = 4;

        Reservation r1 = new Reservation(LocalDate.of(2020, 8, 8),
                LocalDate.of(2020, 8, 10),660);
        Reservation r2 = new Reservation(LocalDate.of(2020, 8, 8),
                LocalDate.of(2020, 8, 10),530);
        Reservation r3 = new Reservation(LocalDate.of(2020, 8, 6),
                LocalDate.of(2020, 8, 8),480);
        Reservation r4 = new Reservation(LocalDate.of(2020, 8, 7),
                LocalDate.of(2020, 8, 11),760);
        Reservation r5 = new Reservation(LocalDate.of(2020, 8, 9),
                LocalDate.of(2020, 8, 10),980);
        Reservation r6 = new Reservation(LocalDate.of(2020, 8, 9),
                LocalDate.of(2020, 8, 10),980);

        hilton.makeReservation(r1);
        hilton.makeReservation(r2);
        hilton.makeReservation(r3);
        hilton.makeReservation(r4);
        hilton.makeReservation(r5);
        hilton.makeReservation(r6);

        hilton.getAllReservationsSortedByDate(LocalDate.of(2020, 8, 6),
                LocalDate.of(2020, 8, 11));
        System.out.println(hilton.getNumberAvailableRooms(LocalDate.of(2020, 8, 9)));
        hilton.cancelReservation(r5.getId());
        System.out.println(hilton.getNumberAvailableRooms(LocalDate.of(2020, 8, 9)));
        hilton.getAllReservationsSortedByPrice(LocalDate.of(2020, 8, 6),
                LocalDate.of(2020, 8, 11));
        hilton.getAllReservationsSortedByDate(LocalDate.of(2020, 8, 6),
                LocalDate.of(2020, 8, 11));

    }
}
</code></pre>
    </div>