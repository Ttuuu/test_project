<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>Do not cast what <code>malloc</code> returns. If <code>malloc</code> is correctly prototyped (and you ensured that by <code>#include &lt;stdlib.h&gt;</code>) then casting is redundant. If it is not, casting could lead to a hard-to-find bugs.</p></li>
<li><p><code>malloc</code> can fail. Always test the return value for <code>NULL</code>.</p></li>
<li><p>It is a good practice to always initialize the variables. Even better practice is to initialize it to a value you need:</p>

<pre><code>    int num = temp-&gt;data;
</code></pre>

<p>is cleaner than</p>

<pre><code>    int num = 0;
    ....
    num = temp-&gt;data;
</code></pre>

<p>In the latter case the reviewer wonders what is the significance of that <code>0</code>, just to find out that there is no significance.</p></li>
<li><p>Indent the <code>case</code> body:</p>

<pre><code>    switch(choice)
    {
        case 1:
            printf("Enter the element to push\n");
            ....
            break;
</code></pre>

<p>makes it clear where the case ends. IMHO it is OK to <em>not</em> indent the <code>case</code> line itself.</p></li>
<li><p>By declaring the global <code>top</code> you limit yourself to no more than one stack. Consider going an extra mile: declare a</p>

<pre><code>    typedef struct {
        node * top;
    } stack;
</code></pre>

<p>and pass a <code>stack *</code> to your functions.</p></li>
<li><p>There is an ongoing <strike>holy war</strike> debate on whether <code>pop</code> should return the node value, or not. Among the valid reasons <em>against</em> returning it are:</p>

<ul>
<li><p>A client pays for the memory fetch (<code>num = temp -&gt; data</code>) even if he does not need it.</p></li>
<li><p>There is no way to signal the client that <code>pop</code> was called on an empty list.</p></li>
</ul>

<p>I am not advocating either one. This is just to let you know.</p></li>
</ul>
    </div>