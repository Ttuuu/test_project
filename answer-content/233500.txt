<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>num = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
</code></pre>

<p>The shorthand to initialize this is <code>[0] * 10</code>; it can be used for strings too (bonus fact.)</p>

<pre><code>round(sum(num) / 20))
</code></pre>

<p>This should be written as <code>round(sum(num), 20)</code> as the division operator adds in error, and is present through many iterations. Changing it to the latter reduced the bias.</p>

<pre><code>time.sleep(0.5)
</code></pre>

<p>Usually the user doesn't want to wait if they don't have to; if this is run as a console program and if the user wants to inspect the output (before it disappears), it can be managed in the IDE. If the user must press a key, calling <code>input()</code> waits.</p>

<p>I would also avoid hardcoding the start and end values for random, and the array size and instead use variables.</p>

<p>The program will eventually run out of memory because the <code>average</code> list is being appended to every iteration and not being cleared. This can be prevented by instead summing the numbers (keeping a single numeric counter) and dividing by the total number of iterations. This has been an exercise left for the author.</p>

<p>The final code becomes:</p>

<pre><code>import random
import statistics

start = 0
end = 9

num = [0] * abs(end - start + 1)
average = []

while True:
    randomNum = random.randint(start, end)
    num[randomNum] += 1
    average.append(randomNum)
    print(
        f"\nThe average for all the numbers is {round(statistics.mean(average), round(sum(num), 20))}"
    )
    print(f"The most common number is {num.index(max(num))}\n")

</code></pre>
    </div>