<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You should decide if your functions modify the object they receive or if the return a modified object. Doing both is just asking for disaster. After your code has finished, <code>file_1</code>, <code>file_2</code> and <code>file_3</code> are all identical.</p>

<p>The usual convention is to return <code>None</code> (implicitly or explicitly) if you mutate any of the inputs. In the rest of this answer I have decided to mutate the inputs.</p>

<p>Besides that, <code>pandas</code> is most effective if you use its vectorized functions. For columns with strings, it has a whole lot of methods which are vectorized. You can access them with <code>df.col_name.str</code>. You can find some examples in the <a href="https://pandas.pydata.org/pandas-docs/stable/text.html" rel="nofollow noreferrer">documentation</a>.</p>

<p>Your <code>appends_address_before_name</code> function could be simplified a lot because string addition is vectorized:</p>

<pre><code>def appends_address_before_name(file):
    file["parentID"] = address + file["parentID"]
    file["ID"] = address + file["ID"]
</code></pre>

<p>And your <code>create_parent_name</code> function could be:</p>

<pre><code>def create_parent_name(file, column_name: str):
    file["parentID"] = file[column_name].str.split(".").str[:-1].str.join(".")
</code></pre>

<p>With a csv file like this:</p>

<pre><code>ID
99.99.9
100.42.3
101
</code></pre>

<p>This produces</p>

<pre><code>df = import_file(file_name)
create_parent_name(df, 'ID')
appends_address_before_name(df)
print(df)
#                     ID           parentID
# 0   New_Jersey_99.99.9   New_Jersey_99.99
# 1  New_Jersey_100.42.3  New_Jersey_100.42
# 2       New_Jersey_101        New_Jersey_
</code></pre>

<p>Note that the order of the calls has changed, so that ids without a <code>.</code> are handled correctly.</p>

<hr>

<p>As for general structure:</p>

<ul>
<li>Seeing docstrings is very nice (I omitted them here for brevity)</li>
<li>Python has an official style-guide, PEP8. It recommends writing <code>x = some_thing(a=3)</code>, so surround equal signs with spaces when assigning but not when setting keyword arguments.</li>
<li>You should wrap the main calling code in a <a href="http://stackoverflow.com/questions/419163/what-does-if-name-main-do"><code>if __name__ == "__main__"</code> guard</a>.</li>
</ul>
    </div>