<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I <em>think</em> your implicit question was "how may I improve runtime?",
in terms of CPU cycles, and in terms of memory read stalls.
The only relevant timings to pay attention to seem to be the optimized runs,
and in that contest you're already pretty close.
Runtimes less than 10 msec suggest that you might want to
do a hundred iterations of the whole test,
or bump up <code>n_parens</code>.
Do verify that switching the order of running sol{1,2} doesn't change the timings,
e.g. due to cache warming effects.</p>

<p>This code appears to be vestigial; it may have mattered in an earlier code version:</p>

<pre><code>    if (stack_count == -1)
        return;
</code></pre>

<p>The <code>return</code> appears to be dead code.
I say that because there is a "positive" guard <code>if (stack_count &gt; 0)</code>
on the decrement of <code>stack_count</code>.</p>

<p>Overall your code seems pretty cache friendly.
I don't see any obvious gotchas.
This copy:</p>

<pre><code>            ret.push_back(current_string);
</code></pre>

<p>could maybe be dispensed with,
by building up the result string in the desired spot within <code>ret</code>.
Of course, they do <code>v.push_back(s)</code> which is similar copying cost.</p>

<p>I choose to read <code>deep</code> as "depth",
and I prefer that concise name over the clunky <code>stack_count</code>.</p>

<p>I find their profusion of redundant args somewhat ugly.
However, it's a sure thing that each one is register allocated.
I wonder if your repeated <code>current_string.size()</code> access explains
the few missing milliseconds that separate the two implementations?</p>

<p>Your depth first search has three clauses,
and three brief comments seem warranted.</p>

<p>The biggest change to make to this recursive approach
would be to <a href="https://en.wikipedia.org/wiki/Memoization" rel="nofollow noreferrer">memoize</a> the result of a given <code>stack_count</code> input,
to avoid repeatedly computing (and recursing) for that given value.
Your single-arg API is clearly simpler to memoize
than TheirSolution would be.</p>
    </div>