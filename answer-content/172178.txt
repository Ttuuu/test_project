<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First of all, let me join others in pointing out what <em>sweet</em> ASCII art you've done. This definitely has the beginnings of a <em>much</em> nicer text game than most.</p>

<p>I'd start by defining some structures to hold data about specific things in the game. For a couple of examples:</p>

<pre><code>struct Ability {
    std::string name;
    int level_adder;

    int cost(int level, int inte) { 
        return (level + level_adder) * inte;
    }

    bool can_afford(int level, int inte, int manna) { 
        return cost(level, inte) &lt;= manna;
    }

    void show(int level, int inte) { 
        std::cout &lt;&lt; name &lt;&lt; "[" &lt;&lt; cost() &lt;&lt; " manna]\n";
    }       
};

class PlayerClass {
    std::string name;
    std::vector&lt;Ability&gt; abilities;
    size_t ability_count() { return abilities.size(); }

    void show(int level, int inte) {
        for (int i=0; i&lt;abilities.size(); i++)
            std::cout &lt;&lt; "[" &lt;&lt; i &lt;&lt; "] ";
            abilities[i].show(level, inte);
    }

    Ability const &amp;operator[](size_t index) const { 
        return abilities.at(index);
    }
};
</code></pre>

<p>With these, we can define all the data for the Player classes something like this:</p>

<pre><code>PlayerClass Champion{
    "Champion",
    { "Cleaving Strike", 0},
    { "Melting Thrust", 0},
    {"Critical Bash", 0},
    {"Purify", 1}
};

PlayerClass Necromancer{
    "Necromancer",
    { "Shadow Strike", 0},
    { "cripple", 0},
    { "Mutilate", 0},
    { "Life Tap", 2}
};
</code></pre>

<p>...and so on for the other player classes. For only one example, this makes it <em>much</em> easier to add more player classes in the future--for example, I can sit down and decide I want to add a "thief" class:</p>

<pre><code>PlayerClass Thief { 
    "Thief",
    { "Pick Pocket", 0},
    { "Grab Purse", 0},
    { "Rob Business", 1},
    { "Rob Bank", 4}
};
</code></pre>

<p>...and most of the rest of the game can work with this new player class without any modification at all. Likewise, I can add a new ability to an existing player class by simply deciding on a name and a relative cost for using that ability--I don't have to modify all the ability-related logic to take the newly added ability into account.</p>

<p>Then we can define a player to hold (for example) a reference to a <code>PlayerClass</code> object:</p>

<pre><code>class Player { 
    PlayerClass &amp;pclass;
    // ...
};
</code></pre>

<p>With this, <code>getability</code> obviously returns (possibly a pointer or reference to) an Ability object, and looks something like this:</p>

<pre><code>player.pclass.show();
cin &gt;&gt; input;

// This logic isn't complete--we need to add a call to `can_afford` to see 
// whether the player can afford to use an ability.
if (input &gt; player.pclass.ability_count()
    ability = None;
else { 
    ability = player.pclass[input];
    player.manna -= ability.cost();
}
</code></pre>

<p>Note how this has eliminated <em>huge</em> amounts of repetition in the code, with essentially identical logic repeated once for every ability of every player class.</p>

<h3>Prevent mistakes</h3>

<p>I'd also consider checking whether the player can afford to use a particular ability <em>before</em> displaying that ability. This way they only choose from the abilities they can use, rather than trying to choose an ability they can't actually afford, then finding out too late that they made a bad choice and nothing happens.</p>

<h3>Naming</h3>

<p>Some of the names you've used are shortened to the point that I'm not sure what they're intended to mean. Just for a couple of examples, <code>inte</code> and <code>stre</code>--I'd de-abbreviate these to the point that somebody reading the code can easily understand what they're supposed to really mean.</p>
    </div>