<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Advises for optimization:</p>

<ul>
<li><p><code>open("username_password.txt", "r").read()</code>. This could be called as "negligent treatment" of the file object. The good and robust way is to always close the file object/resource after usage/consumption.<br>We have a convenient feature called context managers (<code>with</code> statement) for <em>"automated"</em> graceful closing of used resource:</p>

<pre><code>with open('filename') as f:
    content = f.read()
</code></pre></li>
<li><code>details = [[...]]</code>. Instead of manually stripping and storing the file contents as list of lists, the more flexible way is using <a href="https://docs.python.org/3/library/csv.html#csv.reader" rel="nofollow noreferrer"><code>csv.reader</code></a> object which allows strip of surrounding whitespaces (<code>skipinitialspace=True</code> option) and recognize delimiters.</li>
<li><p>considering that your file represents pairs of <code>USERNAME, PASSWORD</code>, in scope of application we usually expect the usernames to be unique. Therefore having a <code>dict</code> indexed with usernames and passwords as respective values would be an optimized and more performant way - giving us a quick search by <em>usernames</em> (Python <code>dict</code> is a special case of <code>hashtable</code> data structure).<br>Besides, it's really not good to remove items from the a <code>list</code> in-place while it's iterated (<code>for data in details: if ... details.pop(details.index(data))</code>), it'll lead to unexpected results. Yes, you have a "circuit breaker" <code>break</code> for that, but still it's better to not get used to <em>fragile</em> approaches. </p>

<pre><code>with open("username_password.txt") as f:
    creds = {u: p for u, p in csv.reader(f, skipinitialspace=True)}
</code></pre></li>
<li><p><a href="https://docs.python.org/3/library/stdtypes.html#dict.get" rel="nofollow noreferrer"><code>dict.get()</code></a> call allows to flexibly combine check for username/password:</p>

<pre><code>if creds.get(username) == password:
    ...
</code></pre></li>
</ul>

<hr>

<p>The final optimized version:</p>

<pre><code>import csv

def login():
    player_count = 0
    with open("username_password.txt") as f:
        creds = {u: p for u, p in csv.reader(f, skipinitialspace=True)}

    while player_count != 2:
        username, password = input("USERNAME"), input("PASSWORD")
        if creds.get(username) == password:
            print("LOGIN CORRECT")
            player_count += 1
            creds.pop(username)
        else:
            print("LOGIN INCORRECT")
    main()


def main():
    print("LOGGED IN\nMAIN")


login()
</code></pre>
    </div>