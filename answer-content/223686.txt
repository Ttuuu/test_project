<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I see a number of things that may help you improve your code.</p>

<h2>Prefer portable code to platform specific code</h2>

<p>The code is currently calling <code>Sleep</code> which is a platform-dependent function.  This could be made platform independent by instead using <a href="https://en.cppreference.com/w/cpp/thread/sleep_for" rel="nofollow noreferrer"><code>std::this_thread::sleep_for</code></a></p>

<h2>Don't use <code>system("pause")</code></h2>

<p>There are two reasons not to use <code>system("cls")</code> or <code>system("pause")</code>.  The first is that it is not portable to other operating systems which you may or may not care about now.  The second is that it's a security hole, which you absolutely <strong>must</strong> care about.  Specifically, if some program is defined and named <code>PAUSE</code> or <code>pause</code>, your program will execute that program instead of what you intend, and that other program could be anything.  First, isolate these into a seperate functions <code>pause()</code> and then modify your code to call those functions instead of <code>system</code>.  Then rewrite the contents of those functions to do what you want using C++.  For example:</p>

<pre><code>void pause() {
    getchar();
}
</code></pre>

<h2>Don't abuse <code>using namespace std</code></h2>

<p>Putting <code>using namespace std</code> at the top of every program is <a href="http://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice">a bad habit</a> that you'd do well to avoid.  It is particularly bad to put it into a header file, so please don't do that.</p>

<h2>Consider the user</h2>

<p>Instead of having a hardcoded filename, it might be nice to allow the user to control the name and location of the input and output files.  For this, it would make sense to use a command line argument and then pass the filename to the functions as needed.</p>

<h2>Use better names</h2>

<p>It's baffling that the class containing a part is called <code>Packet</code> instead of <code>Part</code>.  Good names are extremely useful in creating and maintaining good code.</p>

<h2>Be careful with signed and unsigned</h2>

<p>In two cases, the code compares an <code>int</code> <code>i</code> with <code>getPackets.size()</code>.  However, <code>getPackets.size()</code> is unsigned and <code>i</code> is signed.  For consistency, it would be better to declare <code>i</code> as <code>std::size_t</code> which is the type returned by <code>size()</code>.</p>

<h2>Don't use <code>std::endl</code> if you don't really need it</h2>

<p>The difference betweeen <code>std::endl</code> and <code>'\n'</code> is that <code>'\n'</code> just emits a newline character, while <code>std::endl</code> actually flushes the stream.  This can be time-consuming in a program with a lot of I/O and is rarely actually needed.  It's best to <em>only</em> use <code>std::endl</code> when you have some good reason to flush the stream and it's not very often needed for simple programs such as this one.  Avoiding the habit of using <code>std::endl</code> when <code>'\n'</code> will do will pay dividends in the future as you write more complex programs with more I/O and where performance needs to be maximized.</p>

<h2>Use include guards</h2>

<p>There should be an include guard in each <code>.h</code> file.  That is, start the file with:</p>

<pre><code>#ifndef BST_H
#define BST_H
// file contents go here
#endif // BST_H
</code></pre>

<p>The use of <code>#pragma once</code> is a common extension, but it's not in the standard and thus represents at least a potential portability problem.  See <a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#sf8-use-include-guards-for-all-h-files" rel="nofollow noreferrer">SF.8</a></p>

<h2>Fix the bug</h2>

<p>The current archiving is mostly useless since it writes memory pointer values to the output file.  After the program ends, those pointer values are going to be completely useless.  What was apparently intended was to write a binary representation of the part, but that's not what's currently happening.</p>

<h2>Be careful with raw pointers</h2>

<p>The <code>BST::extract</code> returns a vector of raw pointers to internal data.  This is almost certainly going to be a problem because there is nothing to prevent the <code>BST</code> from being deleted (invalidating all of those pointers) before the returned vector is used.  This is not a good design.  Better would be instead to allow direct traversal of the <code>BST</code> data structure via iterators.  This is safer and much easier to use in conjunction with standard algorithms.</p>

<h2>Prefer a stream inserter to a custom <code>print</code> routine</h2>

<p>Your main routine currently writes all of the detailed inventory data.  Instead, it could be written as a stream inserter:</p>

<pre><code>friend std::ostream&amp; operator&lt;&lt;(std::ostream &amp;out, const Packet &amp;p) {
    return out &lt;&lt; "{\n" &lt;&lt; p.partId &lt;&lt; ",\n" &lt;&lt; p.description 
        &lt;&lt; ",\n" &lt;&lt; p.partCount &lt;&lt; ",\n" &lt;&lt; p.price &lt;&lt; "\n}\n\n";
}
</code></pre>

<p>Then the loop in <code>main</code> could be this:</p>

<pre><code>for (std::size_t i = 0; i &lt; getPackets.size(); ++i) {
    outFile &lt;&lt; getPackets[i];
}
</code></pre>

<p>Or even better:</p>

<pre><code>std::copy(getPackets.begin(), getPackets.end(), 
        std::ostream_iterator&lt;Packet&gt;(outFile));
</code></pre>

<p>Note that both versions assume that <code>getPackets</code> is a vector of <code>Packet</code> rather than a vector of pointers as mentioned in the previous point.  A similar thing can be done to create an extractor using <code>operator&gt;&gt;</code>.</p>

<h2>Don't use console I/O for errors</h2>

<p>The <code>BST</code> class writes to <code>std::cerr</code> or <code>std::cout</code> (it would be nice to be consistent!) when it encounters an error.  Better would be to return a flag indicating success or perhaps throwing an exception.</p>

<h2>Don't define redundant functions</h2>

<p>The <code>destroyTree()</code> function is exactly a duplicate of the destructor.  Since the destructor must be present, the <code>destroyTree</code> function should be omitted because it is redundant.</p>

<h2>Don't define a default constructor that only initializes data members</h2>

<p>The <code>BST::Node</code> constructor is currently this:</p>

<pre><code>Node() : rlink(nullptr), llink(nullptr) {};
</code></pre>

<p>Better would be to use in-class member initializers.  See <a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Rc-default" rel="nofollow noreferrer">C.45</a></p>

<h2>Don't define an empty destructor</h2>

<p>The current <code>~Node</code> is empty.  Better would be to simply omit it.  See <a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Rc-dtor" rel="nofollow noreferrer">C.30</a>.</p>

<h2>Be careful with interfaces</h2>

<p>The <code>void BST::insert(Node *&amp;p, Node *newNode);</code> function should be <code>private</code> because it requires the use of a <code>Node</code> object.</p>

<h2>Don't leak memory</h2>

<p>At the moment, the <code>data</code> pointer of each <code>BST::Node</code> is never freed which is a memory leak.  See <a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#c31-all-resources-acquired-by-a-class-must-be-released-by-the-classs-destructor" rel="nofollow noreferrer">C.31</a></p>
    </div>