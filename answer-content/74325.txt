<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I see a number of things that can help you improve this code.</p>

<h2>Don't use <code>system("cls")</code></h2>

<p>There are two reasons not to use <code>system("cls")</code> or <code>system("pause")</code>.  The first is that it is not portable to other operating systems which you may or may not care about now.  The second is that it's a security hole, which you absolutely <strong>must</strong> care about.  Specifically, if some program is defined and named <code>cls</code> or <code>pause</code>, your program will execute that program instead of what you intend, and that other program could be anything.  First, isolate these into a separate functions <code>cls()</code> and <code>pause()</code> and then modify your code to call those functions instead of <code>system</code>.  Then rewrite the contents of those functions to do what you want using C++.  For example, if your terminal supports <a href="http://en.wikipedia.org/wiki/ANSI_escape_code" rel="noreferrer">ANSI Escape sequences</a>, you could use this:</p>

<pre><code>void cls()
{
    std::cout &lt;&lt; "\x1b[2J";
}
</code></pre>

<h2>Isolate platform-specific code</h2>

<p>In this code, there are several things that are DOS/Windows only including <code>#include &lt;conio.h&gt;</code> and the <code>getch()</code> and <code>kbhit()</code> functions within that, and also <code>system("cls");</code> that I've already mentioned.  Your code runs successfully on Linux if I supply those missing functions, but it would be nice if there were an <code>#ifdef WINDOWS</code> already in the code so that one could recompile without having to alter the source code.</p>

<h2>Fix spelling errors</h2>

<p>The code has <code>spwanBlock()</code> instead of <code>spawnBlock()</code> and <code>rotateBolck()</code> instead of <code>rotateBlock()</code>.  These kinds of typos don't bother the compiler at all, but they will bother human readers of the code and make it a little more difficult to understand and maintain.</p>

<h2>Use more objects</h2>

<p>The game is written much more in the procedural style of C rather than in the object-oriented style of C++.  The game itself could be an object, with most of the procedures as functions of that object.  This would reduce coupling and make the program easier to understand.  Also, each of the blocks could quite obviously be an object.  It would also eliminate the global variables that now occupy the code, such as <code>x</code>, <code>y</code>, and <code>gameover</code>.</p>

<h2>Reduce variable scope as much as possible</h2>

<p>Almost all of the global variables can be eliminated by using objects, but if any remain, they should be <code>static</code> to limit them to file scope, or even better, as noted by @glampert in a comment, use an anonymous namespace.</p>

<h2>Use string concatenation</h2>

<p>The <code>gameOver()</code> and <code>title()</code> functions both have many repeated lines where the <code>ostream operator&lt;&lt;</code> is used multiple times with <code>std::cout</code> and a fixed string.  Those multiple calls don't need to happen.  You could simply rely on the fact that C++ merges separate constant strings automatically.  For example, here is a recoded <code>gameOver()</code>:</p>

<pre><code>void gameOver()
{
    std::cout &lt;&lt; "\n"
            " #####     #    #     # ####### ####### #     # ####### ######\n" 
            "#     #   # #   ##   ## #       #     # #     # #       #     #\n"
            "#        #   #  # # # # #       #     # #     # #       #     #\n"
            "#  #### #     # #  #  # #####   #     # #     # #####   ######\n"
            "#     # ####### #     # #       #     #  #   #  #       #   #\n"
            "#     # #     # #     # #       #     #   # #   #       #    #\n"
            " #####  #     # #     # ####### #######    #    ####### #     #\n"
            "\n\nPress any key and enter\n";
    char a;
    std::cin &gt;&gt; a;
}
</code></pre>

<p>Note a few simple things here.  First, there's only a single input and a single output call, so the <code>using namespace std;</code> didn't seem worthwhile and was removed.  Second, the dummy variable <code>a</code> was declared just before use instead of at the beginning of the function.  Third, because the return variable was neither useful nor used, it has been omitted.</p>

<h2>Eliminate "magic numbers"</h2>

<p>The code, including the implementation of <code>initGame()</code> is full of "magic numbers" -- that is raw numbers in the text that don't have obvious meaning.  For example:</p>

<pre><code>void initGame()
{
    for (size_t i = 0; i &lt;= 20; i++)
    {
        for (size_t j = 0; j &lt;= 11; j++)
        {
            if ((j == 0) || (j == 11) || (i == 20)) 
            {
                field[i][j] = stage[i][j] = 9;
            }
</code></pre>

<p>It's not at all apparent what the meaning is of <code>20</code> or <code>11</code> or <code>9</code> in this code.  Meaningfully named constants would be a better way to do this.</p>

<h2>Use <code>const</code> where practical</h2>

<p>Variables such as <code>GAMESPEED</code> are never altered by the program and should therefore be declared <code>const</code>.</p>

<h2>Use better timekeeping</h2>

<p>The current <code>gameLoop()</code> routine uses a very crude increment loop to do timing.  This would be much better implemented using something from <code>std::chrono</code> or better, the whole thing could be rewritten using an asynchronous programming model instead of a synchronous scheme.</p>

<h2>Enhance the gameplay</h2>

<p>The original Tetris game would delete a row once it became completely filled in, but this code doesn't do that.  It also kept score and the original game was in color.  You could add all of these things, the first two by making functional changes to the code, and the last item by means of the previously mentioned ANSI Escape sequences.  It would make for a more interesting game.</p>
    </div>