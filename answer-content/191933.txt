<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You wrote a nice and simple shell. It works for very simple commands but fails on more complex ones (for details, see below). The code can be cleaned up in several places.</p>

<hr>

<p>To make your code nicely readable by others, let an automatic formatter take care of the indentation and spacing. If you have GNU Indent available, use the following command line:</p>

<pre><code>indent --k-and-r-style --no-tabs --line-length 200 --case-indentation 4 --braces-on-func-def-line shell.c
</code></pre>

<hr>

<p>Instead of writing this every time:</p>

<pre><code>#ifdef DEBUG
fprintf(stderr, "[READER] Allocating memory for buffer [size: %zu]\n", size);
#endif
</code></pre>

<p>you should define a macro DEBUG_PRINTF:</p>

<pre><code>#ifdef DEBUG
#define DEBUG_PRINTF(...) fprintf(stderr, __VA_ARGS__)
#else
#define DEBUG_PRINTF(...) (void)0
#endif
</code></pre>

<p>Then you can just write:</p>

<pre><code>DEBUG_PRINTF("[READER] Allocating memory for buffer [size: %zu]\n", size);
</code></pre>

<hr>

<pre><code>if (buffer == NULL) exit(EXIT_FAILURE);
</code></pre>

<p>Before exiting with an error code, you should print an error message. By convention, an empty output means success.</p>

<hr>

<p>Enable all compiler warnings and fix them properly. For GCC, these are <code>-Wall -Wextra -Werror -O2</code>.</p>

<ul>
<li><p>Instead of <code>void prompt</code>, write <code>static void prompt</code>. This makes the function local to the current file and avoids conflicts just in case another file defines another function of the same name. (Also for the other functions.)</p></li>
<li><p>Instead of <code>int main()</code>, write <code>int main(void)</code> to fix the "missing prototype" warning.</p></li>
<li><p>Declare all read-only strings as <code>const char *</code> instead of <code>char *</code>. This affects the parameters to <code>prompt</code> and to <code>parser</code>.</p></li>
</ul>

<hr>

<p>Rename your functions. Function names are usually verbs. Your current names are <code>executor</code>, <code>parser</code>, etc. These are readable and understandable but still should be <code>execute</code> and <code>parse</code>.</p>

<p>For <code>reader</code>, this is more difficult since there is a system-provided function called <code>read</code>. Therefore it should be renamed to <code>read_line</code>.</p>

<hr>

<p>Declare variables directly where you need them. Instead of:</p>

<pre><code>char *buffer;
buffer = malloc(sizeof(char) * size);
</code></pre>

<p>just write:</p>

<pre><code>char *buffer = malloc(sizeof(char) * size);
</code></pre>

<p>Since <code>sizeof(char)</code> is defined to always be 1, leave it out:</p>

<pre><code>char *buffer = malloc(size);
</code></pre>

<hr>

<p>In the <code>executor</code> function, instead of repeating <code>line.command[i].subcommand[j]</code> everywhere, define a new variable:</p>

<pre><code>for (size_t j = 0; j &lt; line.command[i].size; ++j) {
    subcommand_t subcommand = line.command[i].subcommand[j];

    if (subcommand.size != 0) {
        // ...
</code></pre>

<hr>

<p>The <code>parser</code> function currently parses the following command unexpectedly:</p>

<pre><code>echo ";"
</code></pre>

<p>It outputs <code>"</code> but doesn't give any hint on why the semicolon and the second quotation mark were not echoed.</p>

<hr>

<pre><code>memset(line.command[i].subcommand[j].argument[k], 0, strlen(token3)+1);
strcpy(line.command[i].subcommand[j].argument[k], token3);
</code></pre>

<p>The <code>memset</code> is redundant and should be removed.</p>

<hr>

<p>Any memory that you allocate with <code>malloc</code> or <code>realloc</code> must be freed after use with <code>free</code>.</p>

<hr>

<p>When I press Ctrl+D in your shell, I get stuck in an endless loop. All other shells exit at that point (or instruct me that I must type <code>exit</code> instead of just Ctrl+D, which is really annoying).</p>

<p>To handle this situation, add error handling in the <code>reader</code> function and return from <code>main</code> if its return value is NULL.</p>
    </div>