<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Looks alright to me. Some minor issues:</p>

<p>1) I don't like those methods:</p>

<blockquote>
<pre><code>internal void SetRevealed() =&gt; Status = TileStatus.Revealed;
internal void SetFlagged() =&gt; Status = TileStatus.Flagged;
internal void SetHidden() =&gt; Status = TileStatus.Hidden;
</code></pre>
</blockquote>

<p>IMHO, they bloat your class and hardly bring anything to the table. I would prefer writing <code>Status = TileStatus.Revealed</code> explicitly. But a good middle ground is to refactor those methods into extensions. It would keep the class clean, but it still would allow you to use those "shortcuts". The same can be said about <code>IsXXXXX</code> properties.</p>

<p>2) For similar reasons I don't like <code>IGame.Rows</code> and <code>IGame.Columns</code>. Those are the properties of the game board, not of the game itself. So it makes sense to me that they should be exposed and accessed via <code>Board</code> property.</p>

<p>3) <code>IGame</code> lacks the property that describes the state of the game. Has player won? Has s/he lost? Is game still in progress? No easy way to tell. You might also want to count the number of moves that player has made.</p>

<p>4) <code>VisualizeCurrentState()</code> and <code>VisualizeEverything()</code>  - I feel like those methods violate SRP and should be moved to different class. Visualization logic has nothing to do with game logic after all.</p>

<p>5) <code>Flag</code> and <code>Unflag</code> methods should probably return a <code>Tile</code>.</p>

<p>6) I don't like this portion:</p>

<blockquote>
<pre><code>    if (_isFirstReveal)
    {
        _isFirstReveal = false;
        PopulateTiles(initialX, initialY);
    }
</code></pre>
</blockquote>

<p>Why can't you have <code>IGame.Restart()</code> or <code>IGame.Init()</code> method and do the initialization there?</p>
    </div>