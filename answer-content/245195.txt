<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<p>should I be using that function or my function?<br>
Is there any advantage to that function over my function, given that my function has two loops?</p>
</blockquote>
<p>Let us look at each.</p>
<p><strong>The l with it</strong></p>
<p>See any problem with <code>swap((a+1), (a+i));</code>?  That code swaps the wrong elements.  Correct code, like what is posted, is <code>swap((a+l), (a+i));</code>.  Moral of the story.  Do not use an object called <code>l</code>.  Too easy to confuse with <code>1</code>.  Makes review unnecessarily difficult - even when code is right.</p>
<p>Advantage: OP</p>
<p><strong>Unneeded <code>()</code></strong></p>
<p>Both below are the same.  One <a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself" rel="nofollow noreferrer">drier</a> than the other.</p>
<pre><code>swap((a+l), (a+i));
swap(a+l, a+i);
</code></pre>
<p>Advantage: OP</p>
<p><strong>Check the zero case</strong></p>
<p>Both work well enough with <code>""</code> (does not print anything), yet original code could have trouble with <code>permute("", 0, strlen("") - 1);</code> given <code>strlen("") - 1</code> is <code>SIZE_MAX</code>.</p>
<p>The <code>""</code> case deserves explicit definition.  I could see <code>f("")</code> printing one line of nothing - after all 0! is 1.</p>
<p>Advantage: OP</p>
<p><strong>Check the wide case</strong></p>
<p>With very long strings, longer than <code>INT_MAX</code>, code breaks down as <code>int</code> is insufficient whereas <code>size_t</code> is best for array indexing.  Yet time to print such a set of permutations is many times the <a href="https://en.wikipedia.org/wiki/Age_of_the_universe" rel="nofollow noreferrer">age of the universe</a>, so we will set aside this concern.</p>
<p>Advantage: Neither.</p>
<p><strong>Not <code>const</code></strong></p>
<p>More useful to have a function that does not require a <code>char *</code>, but can work with a <code>const char *</code></p>
<p>Advantage: Neither.</p>
<p><strong>Functional difference!: Extra lines</strong></p>
<p>OP's code for <code>"abc"</code> prints the below.  Original code does not print the extraneous empty lines</p>
<pre><code>abc
acb

bac
bca

cba
cab
</code></pre>
<p>Suggest dropping the <code>if (i == n) putchar('\n');</code></p>
<p>Advantage: Original</p>
<p><strong>Repeated test within loop</strong></p>
<p>Why test for <code>k==1</code> repeatedly?  Perhaps</p>
<pre><code>void fn(char *str, int k, int n) {
  if (k &gt;= 1) {
    puts(str);
    for (int i = 2; i &lt;= k; i++) {
      for (int j = 1; j &lt; i; j++) {
        swap(str + n - i, str + n - i + j);
        fn(str, i - 1, n);
        swap(str + n - i, str + n - i + j);
      }
    }
  }
}
</code></pre>
<p>Advantage: Original</p>
<p><strong>Function name, parameter names</strong></p>
<p>Both are wanting in their declaration.  <code>fn</code> is not an informative name for printing string permutations.  What is <code>k</code>?  How it should be called lacks guidance on correct usage.</p>
<pre><code>void permute(char *a, int l, int r) {
void fn(char *str, int k, int n) {
</code></pre>
<p>Perhaps instead a wrapper function? Then make <code>permute(), fn()</code> <code>static</code>.</p>
<pre><code>void print_str_permute(char *str) {
  int length = (int) strlen(str); 
  permute(str, 0, length - 1); 
  // or 
  fn(str, length, length);
}
</code></pre>
<p>Advantage: Original</p>
<p><strong><a href="https://en.wikipedia.org/wiki/Big_O_notation" rel="nofollow noreferrer">Big O</a></strong></p>
<p>I put a function counter in both approaches.  OP was O(n!) and apparently so was the original.  Thus OP's concern about "my function has two loops" did not worsen <code>O()</code>.</p>
<p>Advantage: Neither</p>
<hr>
<p>Recommend: Use the best parts of the two.</p>
<p>For me, I would prefer a solution that worked with a <code>const char *</code>.</p>
    </div>