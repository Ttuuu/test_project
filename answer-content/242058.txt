<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>One sure way to solve this challenge is to reverse engineer the two numbers they provide. From the rules to get from step n to step n-1 we just do F = F - M or M = M - F depending if F or M is larger than the other.</p>

<p>For example:</p>

<pre><code>F = 7   M = 4
    F &gt; M ∴ F = 7 - 4
F = 3   M = 4
    M &gt; F ∴ M = 4 - 3
F = 3   M = 1
    F &gt; M ∴ F = 3 - 1
F = 2   M = 1
    F &gt; M ∴ F = 2 - 1
F = 1   M = 1
</code></pre>

<p>Well.. that is fairly easy, we have a solution already - we know that if we do not end up with 1 and 1 there is no solution.</p>

<p>But... It is pretty slow. The specification mentions that the inputs can be up to 10^50 in size. Now imagine if we had the inputs F = 1 and M = 10^50 we would have to do our calculation 10^50 - 1 times, and who knows how long you will be waiting for that to compute.</p>

<p>This problem occurs when F | M is larger by several multiples than its counterpart. So how about we see how many times F | M fits into M | F, then we increase the counter for how many times it can be divided into the other one.</p>

<p>For example:</p>

<pre><code>F = 31   M = 4
    F &gt; M ∴ F = 31 - 4 * (31 / 4) //Rounded down of course
F = 3    M = 4
...
</code></pre>

<p>This solution avoids the problem with massive differences in the numbers and greatly optimizes the solution.</p>

<p>I think this challenge is pretty straight forward but the real challenge is making it optimized, I think there is enough in this file for you to go and take a good shot at this problem.
In short the steps for this solution are:</p>

<ul>
<li><p>Find out if the current step you are on is solvable.</p></li>
<li><p>If it is, find out if F or M is bigger.</p></li>
<li><p>Divide the smaller one into the bigger one, round down, to find out the multiplier to increase the counter and to subtract the larger one to find the answer faster.</p></li>
<li><p>Repeat steps until you have 1 and 1, frequently check if solvable using a custom function and finally print out the counter of how many steps it took.</p></li>
</ul>

<h3>Some tips:</h3>

<ul>
<li><p>Write a custom method to check if you can actually solve the problem, i.e. check if &gt; 0, check F != M ect.</p></li>
<li><p>Expect numbers larger than 10^32! So use BigInteger for example.</p></li>
<li><p>If you are testing your solution and the tests are not running and instead you get a generic error it is most likely because the solution you have provided is unoptimized and is too slow. Test out your solution with big numbers.</p></li>
<li><p>If you want some good numbers to test edge case, provide a number N and N + 1 as long as they are greater than 1. Good luck!</p></li>
</ul>
    </div>