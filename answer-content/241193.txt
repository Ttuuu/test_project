<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It is possible to improve the generics in the code snippet this way:</p>

<ul>
<li>Edit specification of <code>App.RunThread(...)</code> method to be able to call the method without the second parameter. Specifically, set the default value for the second parameter as <code>= default</code>. It means <code>null</code> for reference types (our case) and default value for value types. We cannot use <code>= null</code> in this case. <a href="https://stackoverflow.com/a/32732271/1044198">See a relevant question on StackOverflow</a>.</li>
<li>Remove <code>TThread</code> from generics because we do not use it anywhere and we want to require <code>IThread</code> interface in fact. A side effect is that we do not have to specify option type explicitly when calling the method with null second argument because it can be now inferred from usage.</li>
</ul>

<p><strong>Before:</strong></p>

<pre><code>public async Task Init() {
    var workers = new List&lt;Task&gt;
    {
        RunThread&lt;ThreadA, ThreadAOptions&gt;(_threadA, null),
        RunThread(_threadB, new ThreadBOptions() {
            AnotherSleepTime = 10000
        }),
    };

    await Task.WhenAll(workers.ToArray());
}

private async Task RunThread&lt;TThread, TOptions&gt;(TThread thread, TOptions options)
            where TThread : IThread&lt;TOptions&gt; where TOptions : IOptions? { /* ... */ }
</code></pre>

<p><strong>After:</strong></p>

<pre><code>public async Task Init()
{
    var workers = new List&lt;Task&gt;
    {
        RunThread(_threadA), // (_threadA, null) also works, but it is not necessary since null is a default value.
        RunThread(_threadB, new ThreadBOptions()
        {
            AnotherSleepTime = 10000
        }),
    };

    await Task.WhenAll(workers.ToArray());
}

private async Task RunThread&lt;TOptions&gt;(IThread&lt;TOptions&gt; thread, TOptions options = default)
            where TOptions : IOptions? { /* ... */ }
</code></pre>

<ul>
<li>Set <code>options = default</code> for each <code>Run(...)</code> method implementation</li>
<li>Set Thread options as nullable e.g. <code>IThread&lt;ThreadAOptions?&gt;</code></li>
</ul>

<p><strong>Before:</strong></p>

<pre><code>public class ThreadB : IThread&lt;ThreadBOptions&gt;
{
    public async Task Run(
        ThreadBOptions? options
    ) { /* ... */ }
}
</code></pre>

<p><strong>After:</strong></p>

<pre><code>public class ThreadB : IThread&lt;ThreadBOptions?&gt;
{
    public async Task Run(
        ThreadBOptions? options = default
    ) { /* ... */ }
}
</code></pre>

<h2>The complete code after the review:</h2>

<pre><code>using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;

namespace App
{
    public interface IOptions
    {
        public void Validate();
    }

    public interface IThread&lt;in TOptions&gt; where TOptions : IOptions?
    {
        public Task Run(TOptions options = default);
    }

    public class ThreadAOptions : IOptions
    {
        public int SleepTime = 5000; // in ms

        public void Validate()
        {
            if (SleepTime &lt; 1) throw new ArgumentOutOfRangeException(nameof(SleepTime));
        }
    }

    public class ThreadA : IThread&lt;ThreadAOptions?&gt;
    {
        public async Task Run(
            ThreadAOptions? options = default
        )
        {
            options ??= new ThreadAOptions();
            options.Validate();

            Thread.Sleep(options.SleepTime);
        }
    }

    public class ThreadBOptions : IOptions
    {
        public int AnotherSleepTime = 5000; // in ms

        public void Validate()
        {
            if (AnotherSleepTime &lt; 10) throw new ArgumentOutOfRangeException(nameof(AnotherSleepTime));
        }
    }

    public class ThreadB : IThread&lt;ThreadBOptions?&gt;
    {
        public async Task Run(
            ThreadBOptions? options = default
        )
        {
            options ??= new ThreadBOptions();
            options.Validate();

            Thread.Sleep(options.AnotherSleepTime);
        }
    }

    internal class App
    {
        private readonly ThreadA _threadA;
        private readonly ThreadB _threadB;

        // Dependencies loaded via DI
        public App(
            ThreadA threadA,
            ThreadB threadB
        )
        {
            _threadA = threadA;
            _threadB = threadB;
        }

        // Called from outside of the class (Program.cs)
        public async Task Init()
        {
            var workers = new List&lt;Task&gt;
            {
                RunThread(_threadA),
                RunThread(_threadB, new ThreadBOptions()
                {
                    AnotherSleepTime = 10000
                }),
            };

            await Task.WhenAll(workers.ToArray());
        }

        private async Task RunThread&lt;TOptions&gt;(IThread&lt;TOptions&gt; thread, TOptions options = default)
            where TOptions : IOptions?
        {
            try
            {
                await Task.Run(async () =&gt; { await thread.Run(options); });
            }
            catch (Exception e)
            {
                Console.WriteLine($"Thread exception: {e.Message}");
            }
        }
    }
}
</code></pre>
    </div>