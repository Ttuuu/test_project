<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Without <code>Option Explicit</code>, the <code>msoGraphic</code> identifier in that property scope is a <code>Variant/Empty</code>; there's an implicit type conversion happening when you do this:</p>

<blockquote>
<pre><code>If msoGraphic = 0 Then
</code></pre>
</blockquote>

<p>Sure <code>vbEmpty</code> will equate to <code>0</code>, or even <code>vbNullString</code> or <code>""</code>, but that's after converting to a comparable type (<code>Integer</code>, or <code>String</code>). There's a better way.</p>

<pre><code>If IsEmpty(msoGraphic) Then
</code></pre>

<p>The <code>IsEmpty</code> function will only ever return <code>True</code> when given a <code>Variant/Empty</code> value - which is exactly what we're dealing with here.</p>

<blockquote>
  <p><em>I could of course have just re-declared msoGraphic as a constant with value 28, but best practice seems to be that you should avoid using the actual value and use the enumerate constant instead</em></p>
</blockquote>

<p>One doesn't exclude the other. If you define a public constant in an appropriately named standard module (e.g. <code>OfficeConstants</code>), <em>and use it</em>, then you <em>are</em> adhering to the best practice. What happens then is deliberate <em>shadowing</em> of the <code>MsoShapeType.msoGraphic</code> declaration - something <a href="http://rubberduckvba.com/Inspections/Details/ShadowedDeclaration" rel="nofollow noreferrer">Rubberduck would normally warn about</a>, but with a descriptive <code>@Ignore</code> or <code>@IgnoreModule</code> annotation comment, the intention is clarified, and the static code analysis tool knows to ignore them - and with a link to the official documentation, you ensure the values correctly match the actual documented underlying values for each identifier:</p>

<pre><code>'@IgnoreModule ShadowedDeclaration: these constants are only available in Office 2016+
Option Explicit
'https://docs.microsoft.com/en-us/office/vba/api/office.msoshapetype
Public Const msoGraphic As Long = 28
'...
</code></pre>

<p>What you want to avoid, is code like this, where <code>28</code> is some magic value that has no clear meaning:</p>

<pre><code>If shapeType = 28 Then
</code></pre>

<blockquote>
  <p><em>Does this seem like the best way to handle this situation?</em></p>
</blockquote>

<p>The problem is that you can't name your property <code>msoGraphic</code> (well you <em>could</em>, but then you'd have to fully-qualify the <code>msoGraphic</code> constant, and then that wouldn't be compilable, even without <code>Option Explicit</code>), so any code (hopefully with <code>Option Explicit</code> specified) that means to use the name <code>msoGraphic</code> now needs to use <code>myMsoGraphic</code> instead, and that isn't ideal, because it <em>adds</em> to the overall cognitive load: you, future you, and eventual maintainers have to remember to avoid <code>msoGraphic</code> and use <code>myMsoGraphic</code> instead, whereas with a <code>Public Const</code> in a standard module that hides/shadows the constant from the referenced PowerPoint library when it exists, usage is much more seamless.</p>

<p>That said, while VBA is case-insensitive, a <code>camelCase</code> public member clashes with the naming convention of pretty much <em>everything else</em> in your standard libraries - enum members only have a lowercase prefix as a namespace surrogate; every type, method, member, property, procedure, function, constant, in every standard library, uses <code>PascalCase</code>. There's no reason to not make every single one of your own procedures use this naming convention too; also while the <code>my</code> prefix is ubiquitous in so many VB examples, it's not a good prefix to use in actual code.</p>

<p>One last thing:</p>

<blockquote>
  <p><em>in case the value gets changed at some point in the future</em></p>
</blockquote>

<p>It won't: <code>MsoShapeType</code> is defined in a shared Office library that isn't only referenced by PowerPoint projects - VBA is ridiculously backward-compatible (line numbers, <code>GoSub</code>/<code>Return</code> statements, <code>Call</code>, <code>Let</code>, <code>DefBool</code> keywords, to name a few <em>should-be-extinct-but-aren't-because-backward-compatibility</em> still-supported language features): there is no way any constant ever released into the wild is ever going to get a new value in any future release. Not going to happen.</p>
    </div>