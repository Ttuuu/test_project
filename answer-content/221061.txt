<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2><code>int NextFlag(string category)</code></h2>

<p>I'd expect this to throw when it runs out of flags.</p>

<p>I <em>really really</em> don't like that the first flag just happens to be <code>0</code>: that depends on the order in which they are defined, and isn't written down anywhere.</p>

<h2><code>Option FromValue(int value, params Option[] options)</code></h2>

<p>I don't understand what this method is really meant to achieve... I'd expect it to throw a nicer exception when <code>options</code> is null or empty (no category, so it has to fail), and it seems to do a lot of work to produce a new option with the given flag, implicitly filtering out options which are not given... I just don't get it. Shouldn't it throw if you are trying to stuff 42879 into something which only expects the last 4 bits to be set?</p>

<p>The <code>Aggregate</code> seems like it incurs some unnecessary allocations, and I think the alternative of accumulating the flag before creating any options would be clearer. I'd also consider breaking it down a little so that each stage in the LINQ is clearer, and I'd kind of expect the name to be more useful (what I've done below will of course look awful when combined with your <code>ToString()</code>).</p>

<pre><code>var observedOptions = options.Where(o =&gt; (o.Flag &amp; value) == o.Flag);
var flags = observedOptions.Aggregate(0, (current, o) =&gt; current | o.Flag));
var name = string.Join(" | ", observedOptions.OrderBy(o =&gt; o.Flag).Select(o =&gt; o.Name));
return new Option(options.First().Category, name, flags));
</code></pre>

<p>The flag accumulator could be its own method, shared with the <code>Contains</code> method, since it seems like a meaningful task in its own right.</p>

<h2>Misc</h2>

<ul>
<li><p>It should check for name reuse: this bug should throw in your example:</p>

<pre><code>Telemetry = Option.Create&lt;FeatureOption&gt;(nameof(Warn));
</code></pre></li>
<li><p>Does it make sense to provide inequality comparators? Again, this depends on the order in which the flags are created to have meaning, though I'll grant this is consistent with <code>enum</code>.</p></li>
<li><p><code>Option(string value) =&gt; Parse(value);</code> looks broken, as does <code>operator Option(int value) =&gt; FromValue(value)</code>, because they don't provide any options from which to select.</p></li>
<li><p>There are a few <code>[NotNull]</code>s strewn about the place, and some that appear to be missing (e.g. both <code>Create</code> methods presumably don't return <code>null</code>, nor should <code>Parse</code>; the parameters to the implicit operators).</p></li>
<li><p>The comparer will happily compare <code>Option</code>s from different categories, which doesn't sound particularly meaningful. You might consider putting the check for uni-categoriyness into a new method taking <code>params Option[]</code>, and feed it in this instance also.</p></li>
<li><p>You could make use of <code>[System.Runtime.CompilerServices.CallerMemberName]</code> in <code>Option.Create&lt;T&gt;</code>, which could mitigate bugs like the misnaming of <code>Telemetry</code>.</p></li>
</ul>
    </div>