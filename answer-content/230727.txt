<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>collections.deque()</h3>

<p>The documentation for <code>collections.deque()</code> says it is more efficient than a list when appending/popping elements. (Popping the 0th element from a list, may cause the rest of the list to be copied forward one space.)  So use a deque instead of a list for the queue.</p>

<h3>set()</h3>

<p>Use a <code>set()</code> instead of a <code>list()</code> for the adjacent nodes.  Also use a set for the visited nodes.  This lets you do set difference to determine what nodes to add to the queue.</p>

<pre><code>from collections import deque

def bfs(self, startNode):

    visited_set = set(startNode)
    queue = deque(visited_set)

    while queue:

        actual_node = queue.popleft()
        print(actual_node.name)

        unvisited_nodes = actual_node.adjacency_set - visited_set
        for node in unvisited_nodes:

            # here is where you test to see if `node` is the search target
            # and take some action if it is.

        # otherwise append all the unvisited nodes to the queue and continue searching
        queue.extend(unvisited)
        visited_set |= unvisited
</code></pre>
    </div>