<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You are potentially missing at least three points:</p>

<ul>
<li><p>You implement division, but its return type is <code>int</code>. Thus, 1/2 will not be returned as 0.5, which is worth observing at least.</p></li>
<li><p>You are leaking memory: you call <code>new</code> but never deallocate the memory.</p></li>
<li><p>Your base class does not provide a virtual destructor, meaning derived classes will not be destructed properly.</p></li>
</ul>

<p>Some other points:</p>

<ul>
<li><p>Let me guess that you are compiling and running in a Windows environment. At the end of your main program, you don't have to explicitly <code>return 0</code>, and you might as well just do <code>std::cin.get();</code> instead of reading to an <code>int</code>. But even better, assuming you use Visual Studio, is to go to "Properties &gt; Linker &gt; System" page, and set "SubSystem" to "Console". This keeps the console window open after the program has finished.</p></li>
<li><p>As mentioned in the other review(s), your example does a lot of unnecessary work. A simpler implementation using what the standard provides of your program could be as follows:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;functional&gt;

template &lt;typename Operation&gt;
int perform_operation(int x, int y)
{
    return Operation()(x, y);
}

int main()
{
    std::cout &lt;&lt; perform_operation&lt;std::plus&lt;int&gt; &gt;(1, 2) &lt;&lt; "\n";
    std::cout &lt;&lt; perform_operation&lt;std::minus&lt;int&gt; &gt;(2, 3) &lt;&lt; "\n";
    std::cout &lt;&lt; perform_operation&lt;std::multiplies&lt;int&gt; &gt;(3, 4) &lt;&lt; "\n";
    std::cout &lt;&lt; perform_operation&lt;std::divides&lt;int&gt; &gt;(40, 10) &lt;&lt; "\n";
}
</code></pre>

<p>This is the strategy pattern at work as well: every operation has a common interface, i.e., takes two parameters and returns one value. No need for dynamic memory allocations either.</p></li>
</ul>
    </div>