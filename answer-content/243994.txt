<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Can there be empty groups?</h3>
<p>If you pass in a <code>rangeSize</code> of <code>5</code>, your current code will have an empty group. Is this desired?</p>
<h3>Iterating over entire collection for each group</h3>
<p>In addition to <a href="https://codereview.stackexchange.com/a/243924/20416">Peter Csala's recommendations</a>, there is a possible performance issue here: <strong>you are iterating over the entire source for each group</strong>. The delegate passed to <code>Where</code> must be evaluated against all the <code>items</code>, to determine the contents of each group.</p>
<pre><code>for (var i = 1; i &lt;= steps; i++)
{
    ...
    var currentGroup = items.Where(p =&gt; p.Value &gt;= min &amp;&amp; p.Value &lt;= max);
    groups.Add(currentGroup.Select(p =&gt; _mapper.Map&lt;DTO.Item&gt;(p)));
}
</code></pre>
<p>If you have few <code>items</code>, or only a small number of groups, this might not be an issue.</p>
<p>The following might be more efficient. Create a sequence of mapped-item / group-index pairs:</p>
<pre><code>public IEnumerable&lt;(DTO.Item mappedItem, int groupIndex)&gt; GroupIndexes(int rangeSize) {
    foreach (var item in _itemRepository.GetAll()) {
        var groupIndex = Math.Floor(item.Value / rangeSize);
        var mapped = _mapper.Map&lt;DTO.Item&gt;(item);
        yield return (mapped, groupIndex);
        if (item.Value &gt; 0 &amp;&amp; item.Value % rangeSize == 0) {
            yield return (mapped, groupIndex - 1);
        }
    }
}
</code></pre>
<p>which you could then use to group:</p>
<pre><code>var grouped = GroupIndexes(10).GroupBy(x =&gt; x.groupIndex, x =&gt; x.mappedItem);
</code></pre>
    </div>