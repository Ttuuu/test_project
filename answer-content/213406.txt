<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As already mentioned, most JS engines don't do <a href="https://en.wikipedia.org/wiki/Tail_recursion" rel="nofollow noreferrer">TCO</a> so your recursive approach may stack overflow. Often, functional programming in Javascript means using the functional utilities like <code>map</code> and <code>reduce</code> with closures.</p>

<p>So, your second solution is preferable in this regard. Although, I'd clean it up a little to be a regular <code>function</code> definition instead of needlessly using fancy ES6 syntax:</p>

<pre><code>function getRandNotIn(below, excluding) {
    // ...
}
</code></pre>

<p>One thing to consider, though, is the performance characteristics of doing <code>while (excluding.includes(num))</code>. If you are only excluding a few numbers, it won't be too expensive (and won't be run many times because on average choosing an excluded number will be rare). But, as <code>excluding.length</code> approaches <code>below</code> the statistical expectation is that there will be more collisions, which means more O(n) traversals. You're probably better off using a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set" rel="nofollow noreferrer">Set</a> here. Doing so would then allow you to assert:</p>

<pre><code>if (excluding.length &gt;= below) throw "can't exclude all numbers";
</code></pre>

<p>If <code>excluding</code> wasn't a set, then this assertion would be incorrect because a number could be duplicated. You also probably want to assert this for only numbers in <code>0 &lt;= num &lt; below</code> (as numbers outside that range don't count):</p>

<pre><code>if ((new Set(excluding.values.filter(n =&gt; 0 &lt;= n &amp;&amp; n &lt; below))).length &gt;= below) throw "...";
</code></pre>
    </div>