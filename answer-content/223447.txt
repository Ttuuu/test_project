<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>So many good things, so many weird things.</p>

<p>First of all, I love your comments. They made this review very easy.</p>

<p>With that said, I have a couple major complaints:</p>

<p><code>dict</code> is not very type-safe; it requires you to access common properties by strings. I highly suggest storing those in a class instead, maybe something like AnimalProperties? That would be the smallest step from where you're at now.</p>

<p>My suggestion would be to either take full advantage of named parameters (shoutout to <code>**kwargs</code>), or configure the <code>Cat</code> and <code>Mouse</code> properties externally. Having them in the same script as a dict doesn't really sit too well with me.</p>

<p>And I'd say take a look at whether all of your boolean fields are necessary. For example, in <code>Mouse</code>, <code>self.is_near_cat</code> is only used to hold the result from <code>self.near_cat()</code>, which either seems to either return <code>False</code> (should be <code>None</code>) if not near a <code>Cat</code> or a <code>Cat</code> if it's near one. You can pass that cat value to <code>self.do_turn_near_cat</code> as <code>self.do_turn_near_cat(self, cat)</code>, because that method should require a <code>Cat</code> to begin with, and thus remove the need for that boolean field in <code>Mouse</code>.</p>

<p>Also, avoid writing confusing things like <code>if self.is_near_cat is not False</code>, because I immediately thought "sooo, if it's <code>True</code>?" I said to use <code>None</code> above because <code>None</code> is <a href="https://docs.python.org/2.4/lib/truth.html" rel="nofollow noreferrer">falsy</a>.</p>

<p>To drive that particular example home:</p>

<pre class="lang-py prettyprint-override"><code>    # Checks if cat is near. Returns ID of cat if cat is near, otherwise returns false [ID or bool]
    def near_cat(self):
        for i in House.cats:
            if math.sqrt((self.position_horizontal - i.position_horizontal) ** 2 +
                         (self.position_vertical - i.position_vertical) ** 2) &lt; self.distance_panic:
                return i
        return None

    # Executes mouse turn
    def do_turn(self):
        near_cat = self.near_cat()
        if near_cat:  # Fleeing from cats is first priority
            self.do_turn_near_cat(near_cat)
        elif self.in_buffer():  # Only think about buffer zone when far away from cats
            self.do_turn_in_buffer()
        else:
            self.do_turn_relaxed()  # Else, stay relaxed and move slowly and randomly
        self.edit_parameters_after_doing_turn()  # General stuff after turn of all Animals

    # Executes a turn when the mouse is near a cat
    def do_turn_near_cat(self, cat):
        self.speed_end_of_turn = self.speed_panic  # Set speed to panic mode
        # Set direction away from cat (with some tolerance)
        self.direction_end_of_turn = math.remainder(self.direction_to_point(cat.position_horizontal,
                                     cat.position_vertical) + math.pi, 2 * math.pi) + random.uniform(
                                    -self.turn_angle_tolerance_cat, self.turn_angle_tolerance_cat)
        self.acceleration = self.acceleration_max  # Set acceleration to maximum
        self.turn_speed = self.turn_speed_panic  # Set turn speed to panic mode
        # Set turn time to panic mode (shorter, makes for nice zig-zag runs sometimes)
        self.turn_time = self.turn_time_panic
</code></pre>

<p>There are many details like this, so try to look at all your functions, what they require, and model those appropriately, and take a closer look at the necessity of all your class fields.</p>
    </div>