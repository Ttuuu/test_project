<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A few observations.</p>

<p><strong>comments</strong> - These online code challenges don't tend to encourage code comments because, really, who's ever going to see it? After completing the challenge you will probably never return to it. Still, if it's going to be offered for code review you might pretty it up to make things easier for the reviewers.</p>

<p><strong>unused</strong> - <code>val seen</code> is never referenced.</p>

<p><strong><a href="https://en.wikipedia.org/wiki/Magic_number_(programming)" rel="nofollow noreferrer">magic numbers</a></strong> - So <code>2</code> is "safe" and <code>1</code> is "unsafe" and ... This calls out for an enumeration. Then you could <code>if (color_of(i) == Color.SAFE)</code>, and <code>.withDefaultValue(Color.UNKNOWN)</code>, etc.</p>

<p><strong><code>0 until graph.size</code></strong> - Use <code>graph.indices</code> instead.</p>

<p><strong>return</strong> - Idiomatic Scala almost <em>never</em> uses <code>return</code>. In your case it's understandable since there are a couple of places where you want the iterations to terminate ASAP. Scala has a few different options for achieving that. One of the most common is using recursion.</p>

<p><strong>if..else</strong> - In Scala the <code>if..else</code> construct is an expression, with a return value, and <a href="https://stackoverflow.com/questions/34962889/what-is-the-difference-between-expressions-and-statements-in-scala">not a statement</a>. For this, and other reasons, idiomatic Scala seldom invokes an <code>if</code> without a concluding <code>else</code>.</p>

<p><strong>mutables</strong> - Perhaps the most obvious anti-Scala practice in the code is the use of mutable data structures. This isn't surprising since there is often a slight performance penalty when adhering to FP principles of immutability. Many of these online code challenges are much more difficult, if not impossible, without mutation.</p>

<p>So, can this be solved without mutation? I don't know. I came pretty close by using only the mutability inherent in the received <code>Array</code>.</p>

<pre><code>def eventualSafeNodes(graph: Array[Array[Int]]): List[Int] = {

  def isSafe(xs :Array[Int], seen :Set[Int]) :Boolean =
    xs.isEmpty || xs.forall(x =&gt; !seen(x) &amp;&amp; isSafe(graph(x), seen+x))

  graph.indices.foldRight(List.empty[Int]){ case (x, acc) =&gt;
    if (isSafe(graph(x), Set(x))) {
      graph(x) = Array.empty[Int]  //leave marker - safe
      x :: acc                     //save index
    } else {
      graph(x) = Array(x)          //leave marker - unsafe
      acc                          //accumulator unchanged
    }
  }
}
</code></pre>
    </div>