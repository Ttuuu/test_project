<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here I will modify the strings you printed such that it doesn't go over the screen.</p>

<p>I don't see why you need to have <code>GAME RULES</code> as a separate variable. No harm and maybe more straightforward doing</p>

<pre class="lang-py prettyprint-override"><code>print("-----------------------------------")
print("|                                 |")
print("|       ROCK PAPER SCISSORS       |")
print("|        PYTHON REMASTERED        |")
print("|                                 |")
print("-----------------------------------")
print("RULES:                             ")
print("- Paper wins against Rock          ")
print("- Rock wins against Scissors       ")
print("- Scissors wins against Paper      ")
print("- When asked: 'y' = yes, 'n' = no  ")
</code></pre>

<p>The intro loop is too long and can be simplified. In Python, an empty string evaluates to false. Furthermore, you can capitalize on the input itself.</p>

<pre class="lang-py prettyprint-override"><code># Get player name
while True:
    player_name = input("What is your name? ").capitalize()
    if player_name:
        break
    print("Surely you've got a name! Try again")

print("Welcome", player_name)
</code></pre>

<p>The part where it asks for the number of rounds is too complicated. Use an list to indicate the options, or at least use it to check if it is valid. Furthermore, specify the exception you are catching.</p>

<pre class="lang-py prettyprint-override"><code>while True:
  try:
    validRounds = [3, 5, 7, 9]
    rounds = int(input("How many rounds would you like to play?" + str(validRounds)))
    if rounds in validRounds:
      break
  except ValueError:
    pass
  print("Please enter '3', '5', '7' or '9'")

# Put the large else part here
</code></pre>

<p>Now we look at your <code>round_process</code>. </p>

<ol>
<li><code>global</code> isn't necessary here. The function shouldn't need to know the score and history of both players. Instead, make the function return the move each of the players made.</li>
<li>Do not shuffle the choices for the cpu, use <code>random.choice</code> instead.</li>
<li>Use list to check existence.</li>
</ol>

<pre class="lang-py prettyprint-override"><code>def processRound(num):
  print("Round ", num)
  # Get player move
  while True:
    validMoves = ['Paper', 'Scissors', 'Rock']
    move = input("What's your move? " + str(validMoves))
    if move in moves:
      break
    print("That input is wrong. Please type either 'Paper', 'Scissors' or 'Rock'")

  # cpu move
  cpuMove = random.choice(validMoves)

  print("Locked in! You chose", player_move, "\nThe CPU chose", cpu_move)
  if move == cpuMove:
    # draw
  elif (move, cpuMove) in [('Paper', 'Rock'), ('Scissors', 'Paper'), ('Rock', 'Scissors')]:
    # win
  else:
    # lose

  return (move, score), (cpuMove, cpuScore)
</code></pre>

<p>Now that you know the number of rounds, use a for loop instead of a while loop.</p>

<pre class="lang-py prettyprint-override"><code>for i in range(rounds):
  processRound(i + 1)
</code></pre>

<p>One last thing is you may consider using Enum for the moves.</p>
    </div>