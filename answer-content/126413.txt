<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You don't need to pull every single method and compare
Most of parsable type will have these signatures :</p>

<pre><code>public static T T::Parse(string);
public static bool T::TryParse(string, out T);
</code></pre>

<p>You can look specifically for them, instead of comparing the argument list of each method, which is really costly.</p>

<pre><code>public static T ParseOrDefault&lt;T&gt;(this string value)
{
    var type = typeof(T);
    //Since C# doesn't impliment an IParsable interface to filter generically
    //Reflection must be used to determine if object is in fact parsable
    var tryParse = type.GetMethod("TryParse",
        BindingFlags.Public | BindingFlags.Static,
        null,
        new [] { typeof(string), type.MakeByRefType() },
        null);
    if (tryParse == null)
        return default(T);

    object[] args = { value, null };
    if ((bool)tryParse.Invoke(null, args))
        return (T)args[1];

    return default(T);
}
</code></pre>

<p>However, I still think using type-check and invoking <code>TryParse</code> directly would be faster.</p>
    </div>