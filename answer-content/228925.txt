<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Security</h2>

<p><a href="https://docs.microsoft.com/en-us/dotnet/framework/mef/" rel="nofollow noreferrer">MEF</a> is a lightweight framework for discovering plugins at runtime. Be wary that plugins are loaded using the same security and evidence of the container code. Anyone deploying malicious <code>TreeOfMana*.ddl</code> in your output folder has the same access rights to the system as your application.</p>

<blockquote>
<pre><code>var files = Directory.GetFiles(
    AppDomain.CurrentDomain.BaseDirectory, "TreeOfMana*.dll",
        SearchOption.AllDirectories)
            .Where(o =&gt; !o.Replace(AppDomain.CurrentDomain.BaseDirectory,
                 "").Contains("obj\\"));
</code></pre>
</blockquote>

<p><a href="https://www.developerfusion.com/article/9396/creating-extensible-applications-with-maf/" rel="nofollow noreferrer">MAF</a> comes with built-in functionality to provide separate and limited permissions for addins. But I'm not sure whether or to which degree this framework is still supported. If you keep using MEF, make sure no malicious code could get access to the system. Some considerations:</p>

<ul>
<li><a href="https://docs.microsoft.com/en-us/dotnet/framework/app-domains/assembly-security-considerations" rel="nofollow noreferrer">Assembly Security</a></li>
<li>Create a dedicated <a href="https://blogs.msdn.microsoft.com/cclayton/2013/05/21/understanding-application-domains/" rel="nofollow noreferrer">Application Domain</a> for running plugins</li>
<li>You could create custom authentication with DLL license keys</li>
</ul>
    </div>