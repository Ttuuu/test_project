<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I find relying on <code>Sheet.Activate</code> / <code>Sheet.Deactivate</code> to set/unset the <code>sheetTables</code> reference is rather frail, error-prone (miss an <code>Activate</code> event for whatever reason (<code>Application.EnableEvents</code> being toggled off, for example), and just like that the <code>Change</code> handler starts throwing error 91), and doesn't really make much sense: the table exists on <code>Sheet1</code> as long as <code>Sheet1</code> does, no?</p>

<blockquote>
<pre><code>Private Sub Worksheet_Change(ByVal Target As Range)
    sheetTables.AddTables
End Sub
</code></pre>
</blockquote>

<p>In that case, then why do we need to re-create the wrapper every single time any cell is modified on that sheet? This method should run <em>once</em>, for the entire lifetime of the worksheet: I'd do that in a <code>Workbook.Open</code> handler.</p>

<p>When present, a factory method should be the first member listed, followed by the public members of the class' default interface.</p>

<blockquote>
<pre><code>Public Function Create(ByVal SourceSheet As Worksheet) As ITables
    With New Tables
        Set .Sheet = SourceSheet
        Set Create = .Self
        .AddTables
    End With
End Function
</code></pre>
</blockquote>

<p>You wouldn't bury a C# class constructor at the bottom of the class; don't bury a VBA factory method at the bottom of the class... or worse, somewhere in the middle of it.</p>

<p>Note that the <code>.AddTables</code> member call is made against the <code>Tables</code> interface. <code>ITables</code> is weird:</p>

<blockquote>
<pre><code>Option Explicit

Public Sub AddTables()
End Sub

Public Function Create(ByVal SourceSheet As Worksheet) As Tables
End Function
</code></pre>
</blockquote>

<p>Class modules that are intended to be used as abstract interfaces should have an <code>@Interface</code> annotation; Rubberduck's static code analysis will then treat it as such, whether or not the interfacec is actually implemented anywhere.</p>

<p>But the weird thing with this interface, is that it's exposing the factory method, which is normally invoked off the default instance of the concrete type... like you do here:</p>

<blockquote>
<pre><code>Private Sub Worksheet_Activate()
    Set sheetTables = Tables.Create(Me)
End Sub
</code></pre>
</blockquote>

<p>A factory method on an abstract interface would be legit if we were looking at an <em>Abstract Factory</em> - but that's not what we have here, this factory method is yielding the concrete type (<code>Tables</code>) ...and yet the actual factory method you're using <em>does</em> yield the <code>ITables</code> abstraction.</p>

<p><code>AddTables</code> doesn't belong on that interface either: it's an implementation detail of the <code>Create</code> factory method, which itself belongs on the concrete type - none of the members of <code>ITables</code> belong on <code>ITables</code>.</p>

<p>These would all feel right at home on that interface though:</p>

<pre><code>Public Property Get sheetTables() As Collection
End Property

Public Property Get Sheet() As Worksheet
End Property

Public Property Get Counter() As Long
End Property
</code></pre>

<p>...with a reservation for <code>sheetTables As Collection</code>: exposing a <code>Collection</code> means the client code is able to <code>.Add</code> and <code>.Remove</code> items, and you certainly don't want to allow that. Consider exposing it as an indexed property instead:</p>

<pre><code>Public Property Get SheetTable(ByVal index As Variant) As ITable
End Property
</code></pre>

<p>Now given a name or index, retrieve the <code>ITable</code> item and return it. Also consider exposing a <code>NewEnum</code> member (and yield <code>sheetTables.[_NewEnum]</code>) with an <code>@Enumerator</code> annotation (sync attributes through Rubberduck inspections), and then the client code will be able to iterate the items in this custom collection class, with an idiomatic <code>For Each</code> loop. The name <code>Tables</code>, pluralized, strongly suggests that it's a collection of tables.</p>

<p>Or you could introduce some <code>ReadOnlyCollection</code> class with a <code>Create</code> method that takes a <code>ParamArray</code> argument, with logic to initialize the encapsulated collection with the specified items (could be an array or collection - I'll leave the implementation up to the reader), and then there'd be no problem exposing such a read-only collection that can only be iterated.</p>

<p>Exposing the encapsulated <code>Collection</code> itself, breaks encapsulation.</p>

<p>Not sure what the purpose of this <code>eval</code>/<code>Eval</code> prefix is:</p>

<blockquote>
<pre><code>Private Function GetCellRow(ByVal evalTable As ListObject, ByVal EvalCell As Range) As Long
    If Intersect(EvalCell, evalTable.DataBodyRange) Is Nothing Then Exit Function

    GetCellRow = EvalCell.Row - evalTable.HeaderRowRange.Row
End Function

Private Function GetCellColumn(ByVal evalTable As ListObject, ByVal EvalCell As Range) As Long
    If Intersect(EvalCell, evalTable.DataBodyRange) Is Nothing Then Exit Function

    GetCellColumn = EvalCell.Column - evalTable.HeaderRowRange.Column + 1
End Function
</code></pre>
</blockquote>

<p>The objective clearly isn't related to preserving the <code>camelCase</code> or <code>PascalCase</code> of parameter names, so I'm left baffled as to why it's not just <code>table</code> and <code>cell</code>. Actually, since these members belong to <code>Table</code> which is wrappping a <code>ListObject</code>, ...I think the <code>ListObject</code> parameters should be removed - if these functions really belong in that class, then they should be working off the <code>this.SourceTable</code> instance field.</p>
    </div>