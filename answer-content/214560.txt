<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Store them in nested dicts.  <code>'large blue dog'</code> + <code>'large blue'</code> becomes:</p>

<pre><code>trie={}
trie['large']={}
trie['large']['blue']={}
trie['large']['blue']['dog']={ '.': 1 }
...
trie['large']['blue']['.']=1
</code></pre>

<p>When building the trie, remember to check if the key already exists before assigning <code>{}</code> to it.</p>

<p>Every possible key has a dict as value, except the special key <code>.</code> which marks end of term.  For each possible substring <code>aa bb</code>, check if <code>trie['aa']['bb']</code> exists.   If so, you can inspect that nested dict to see how many matches there are.</p>

<hr>

<p>The trie-building task is a natural fit for recursion.  A builder function takes an existing trie (possibly empty) and a list of words.  </p>

<p>It inserts the first word and now <code>trie[first_word]</code> is also a trie.  </p>

<p>The function then invokes itself on the subtree, with the first word removed from the list.</p>

<p>Eventually it will be passed an empty list of words.  Then simply insert the terminator key (<code>;</code> in the below example) and return.</p>

<pre><code>def trie_insert(trie, words):
    if len(words):
        word = words.pop(0)
        if word not in trie:
            trie[word]={}
        trie_insert( trie[word], words )
    else:
        trie[';']=1

test_dict={
    'large blue dog':2,
    'cute blue dog':2,
    'cute blue elephant':1,
    'cute blue' :3,
    'blue dog':4,
    'large blue':2
}  

test_trie = {}
for key in test_dict:
    trie_insert( test_trie, key.split() )

import pprint    
pprint.pprint( test_trie, indent=4, depth=4, width=10 )
</code></pre>

<hr>

<pre><code>$ python3.7 trie.py
{   'blue': {   'dog': {   ';': 1}},
    'cute': {   'blue': {   ';': 1,
                            'dog': {   ';': 1},
                            'elephant': {   ';': 1}}},
    'large': {   'blue': {   ';': 1,
                             'dog': {   ';': 1}}}}
</code></pre>
    </div>