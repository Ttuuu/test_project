<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It lacks a very important functionality - the proxy should be initializable via lambdas / closures. With current API it is impossible to do properly.</p>
<p>For instance, consider following code:</p>
<pre><code>double x=1, double coef=2.;
auto pr = make_proxy(&amp;x,
                [coef](double*x){return *x*coef;}, 
                [coef](double*x, fouble nx){*x = nx/coef;});
pr = 8.;
</code></pre>
<p>Now, this a nice and simple piece of code where proxy's setter/getter multiply/divide the value by coef. Only issue is that this code is UB. You see these lamdas instances get destroyed past <code>make_proxy</code> because <code>proxy</code> stores only const references which will become dangling and their use turns into UB.</p>
<p>Note: the Handle variable only incoviniences writing generation of the proxy. Without it, it would be easier to user to write lambdas. If you worry about functions/method then you can simply use <code>std::bind</code> for wrapping those up.</p>
<p>Technical issue:</p>
<pre><code>    proxy&amp; operator=(const value_type&amp;&amp; x) { setter_(handle_, x); return *this; }
</code></pre>
<p>It is not a proper move-assignment implementation. I just write a proper one:</p>
<pre><code>    proxy&amp; operator=(value_type&amp;&amp; x) { setter_(handle_, std::move(x)); return *this;}
</code></pre>
<p>(Also frequently these ought to be <code>noexcept</code> - but uncertain whether it suitable for the current case). Also there is little point in writing move+copy assignment operator unless you define them for the current class. Both of them can be implememted via a single definition as:</p>
<pre><code>   proxy&amp; operator = (value_type x) { setter_(handle_, std::move(x)); return *this;}
</code></pre>
<p>Some may argue that this is slower but compiler should be able to optimize out the inefficiencies.</p>
<p>Also you should consider the case where getter returns a const reference instead of the value.</p>
    </div>