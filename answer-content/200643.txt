<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Overall you have a pretty nice code for someone who is <em>"fairly new to D3"</em>, good on you.</p>

<p>The proposed changes here are few:</p>

<p><strong>The big circle</strong></p>

<p>You have just one big circle (the blue one). Therefore, you don't need that mix of <code>d3.range</code> and <code>map</code> for its datum. Also, you don't need an enter selection, since that's just one circle.</p>

<p>So, you can do:</p>

<pre><code>var circleDatum = {
    x: width / 2,
    y: height / 2
};
</code></pre>

<p>And:</p>

<pre><code>var circle = svg
    .append("circle")
    .datum(circleDatum)
    //etc...
</code></pre>

<p>Mind the fact that you're using <code>circle</code> as the name for two different things!</p>

<p><strong>Don't re-select the same thing again...</strong></p>

<p>Inside the dragged function you have this:</p>

<pre><code>var inside = d3.selectAll("circle.point").style("fill", function(d){
    //etc...
</code></pre>

<p>Which basically re-selects all <code>.point</code> circles again. I wrote <strong>re</strong>-select because you already have a selection for them: <code>points</code>.</p>

<p>Therefore, just do:</p>

<pre><code>points.style("fill", function(d){
</code></pre>

<p><strong>Use selectAll(null) in your enter selections</strong></p>

<p>If you don't plan to update the chart, that is, if you don't want to have an update and exit selections, you don't need to select anything in your enter selections.</p>

<p>That being said, you can do:</p>

<pre><code>var points = svg.selectAll(null)
    //etc...
</code></pre>

<p>By using <code>selectAll(null)</code> you'll have a cleaner and faster code (not noticeable since you have soo few elements here).</p>

<p>For reading more about <code>selectAll(null)</code> have a look my explanation here: <a href="https://stackoverflow.com/q/46147231/5768908">Selecting null: what is the reason behind 'selectAll(null)' in D3.js?</a>.</p>

<p><strong>Minor changes</strong></p>

<ul>
<li><p>Instead of putting all the <code>d3.drag</code> inside the <code>call</code>, you can do:</p>

<pre><code>var drag = d3.drag()
</code></pre>

<p>And then:</p>

<pre><code>.call(drag)
</code></pre></li>
<li><p>If you don't use the second argument (the index), don't write the parameter. So, instead of:</p>

<pre><code>function dragged(d, i) {
</code></pre>

<p>Just do:</p>

<pre><code>function dragged(d) {
</code></pre></li>
<li><p>If you like ternary operators, the whole <code>if</code> can be just:</p>

<pre><code>return dis &lt;= Math.abs(unitRadius - radius) ? "green" : "red";
</code></pre></li>
<li><p>You can use <code>Math.hypot</code> for the hypothenuse (note: this doesn't work on IE)</p>

<pre><code>var dis = Math.hypot(x, y);
</code></pre>

<p>Also, if you don't mind old IE versions, you can use <code>let</code> and <code>const</code> (accordingly) instead of var.</p></li>
<li><p>Sometimes users don't know that they can interact with the visualisation, and a lot of people don't read the instructions/description. So, adding a visual clue may be useful. For instance, changing the cursor when you hover over the big circle helps to indicate that it is draggable:</p>

<pre><code>.style("cursor", "pointer")
</code></pre></li>
</ul>

<p><strong>Demo</strong></p>

<p>Here is your code with those changes:</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>var svg = d3.select("svg"),
  width = +svg.attr("width"),
  height = +svg.attr("height"),
  radius = 8,
  unitRadius = 64,
  drag = d3.drag();

var points = d3.range(10).map(function() {
  return {
    x: Math.round(Math.random() * (width - radius * 2) + radius),
    y: Math.round(Math.random() * (height - radius * 2) + radius)
  };
});

var circleDatum = {
  x: width / 2,
  y: height / 2
};

var points = svg.selectAll(null)
  .data(points)
  .enter()
  .append("circle")
  .attr("class", "point")
  .attr("cx", function(d) {
    return d.x;
  })
  .attr("cy", function(d) {
    return d.y;
  })
  .attr("r", radius)
  .style("fill", "red");

var circle = svg.append("circle")
  .datum(circleDatum)
  .attr("class", "overlay")
  .attr("cx", function(d) {
    return d.x;
  })
  .attr("cy", function(d) {
    return d.y;
  })
  .attr("r", unitRadius)
  .style("fill", "blue")
  .style("cursor", "pointer")
  .call(drag.on("start", dragstarted)
    .on("drag", dragged)
    .on("end", dragended)
  );

function dragstarted(d) {
  d3.select(this)
    .raise()
    .classed("active", true);
}

function dragged(d) {
  d3.select(this)
    .attr("cx", (d.x = d3.event.x))
    .attr("cy", (d.y = d3.event.y));

  points.style("fill", function(p) {
    var x = d.x - p.x;
    var y = d.y - p.y;
    var dis = Math.hypot(x, y);
    return dis &lt;= Math.abs(unitRadius - radius) ? "green" : "red";
  });
}

function dragended(d) {
  d3.select(this).classed("active", false);
}</code></pre>
<pre class="snippet-code-css lang-css prettyprint-override"><code>.overlay {
  fill-opacity: 0.1;
}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/d3/4.13.0/d3.js"&gt;&lt;/script&gt;
&lt;svg width="960" height="500"&gt;&lt;/svg&gt;</code></pre>
</div>
</div>

    </div>