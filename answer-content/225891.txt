<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Cancellation Token Source</h2>

<p>You create a token source, and then immediately overwrite it with a new instance, disregarding the previously created instance. Surely, you did not mean to instantiate it twice?</p>

<blockquote>
<pre><code>_runningSubscriberCancellationTokenSource = new CancellationTokenSource();
_runningSubscriberCancellationTokenSource = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken);
</code></pre>
</blockquote>

<hr>

<h2>Thread-Safety</h2>

<p><code>StartAsync</code> and <code>StopAsync</code> are not thread-safe. Concurrent access to these methods may result in a partially running and inconsistent state of the instance. You should use a <code>SemaphoreSlim</code> to block concurrent access to these methods.</p>

<hr>

<h2>Task.FromException</h2>

<p><code>StartAsync</code> and <code>StopAsync</code> are async wrappers of synchronous code. You return  <code>return Task.CompletedTask;</code>, however if some exception occurs before the return statement, the exception does not get wrapped as an async task. You should catch exceptions and return <code>return Task.FromException(exception);</code>.</p>

<hr>

<h2>Q&amp;A</h2>

<blockquote>
  <p><em>Using the while (IsRunning) loop makes me feel to question the code design.</em></p>
</blockquote>

<p>If <code>IsRunning</code> would have been declared as <code>private volatile bool IsRunning</code> ,this code would not be such a bad idea. Then at least you are certain the value of the variable is read atomically on each cycle in the loop. Since you did not declare it as such, it is possible that the value gets cached on the first read and never re-read by the same thread (<a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/volatile" rel="nofollow noreferrer">Volatile keyword in C#</a>). </p>

<p>An important note on the <em>volatile</em> keyword (see link above):</p>

<blockquote>
  <p>The compiler, the runtime system, and even hardware may rearrange
  reads and writes to memory locations for performance reasons. Fields
  that are declared volatile are not subject to these optimizations.</p>
</blockquote>

<p>As an alternative, you could use <code>while (!cancellationToken.IsCancellationRequested)</code> and perhaps one last call to <code>cancellationToken.ThrowIfCancellationRequested();</code> after the loop.</p>
    </div>