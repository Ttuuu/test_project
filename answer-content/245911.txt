<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Naming things</h1>
<p>Naming things is one of the hard things in computer science. You should make sure names of functions and variables are clear and concise. In general, use nouns for variable names and verbs for function names. Looking at your choices of names in more detail:</p>
<ul>
<li><code>LATTICE</code> is not a lattice, it is the size of the lattice. So call it <code>LATTICE_SIZE</code>.</li>
<li><code>SWEEPS</code> is the number of sweeps to perform, so maybe it is better to call it <code>N_SWEEPS</code> (<code>N</code> is a commonly used prefix meaning "number of").</li>
<li><code>rates()</code> is a function, so use a verb for the function name, for example <code>calculate_rates()</code>.</li>
<li><code>rho_avg()</code> is a function again, so use a verb for that as well, like <code>calculate_rho_avg()</code>.</li>
</ul>
<p>You should also be consistent in how you name things. Is it <code>rho</code> or <code>density</code>? Pick one and stick with it. I would also write <code>beta</code> instead of <code>b</code>, to match how you write down other greek letters like <code>rho</code> and <code>theta</code>.</p>
<h1>Use array indexing notation where appropriate</h1>
<p>In <code>rates()</code>, you are using pointer arithmetic when you could just have used standard array notation:</p>
<pre><code>   for(int i = 0; i &lt; LATTICE; i++)
   {
        theta = rho[i] * (2 * b - rho[i]);
        death_rate[i] = exp(-LATTICE * theta);
   }
</code></pre>
<p>Similarly, in <code>revive()</code>, write:</p>
<pre><code>    for(n = 0; cumsum &lt;= u_rand; n++)
    {
        cumsum += (double)distribution[n] / (double)norm;
    }

    return n - 1;
</code></pre>
<h1>Terminology</h1>
<p>Death rates? Revive? That sounds very morbid! Unless you are simulating some system that predicts cell death or pandemics, this is not terminology normally used in Monte Carlo simulations. Your code looks like it implements the <a href="https://en.wikipedia.org/wiki/Metropolis%E2%80%93Hastings_algorithm" rel="nofollow noreferrer">Metropolis algorithm</a>, where your <code>death_rate</code> would be equivalent to the transition probability, although I'm not sure what the equivalent of <code>revive()</code> would be. If it is the Metropolis algorithm you are implementing, then it doesn't look like you have detailed balance. What system are you simulating exactly? It might help to document that in the code as well.</p>
<h1>Avoid global variables</h1>
<p>It is good practice to avoid using global variables. That makes it easier if your program grows and becomes part of something larger. Or perhaps you want to run multiple simulations at the same time using threads. This should be easy; you already have the arrays <code>distribution[]</code> and <code>death_rate[]</code> inside <code>monte_carlo()</code>, just move <code>rho[]</code> there as well and pasas a pointer to <code>rho</code> to <code>rates()</code>.</p>
<p>You might want to do this in a more organized way, and create a <code>struct</code> to hold all the information relevant to your simulation:</p>
<pre><code>struct simulation_parameters {
    unsigned long long distribution[LATTICE];
    double death_rate[LATTICE];
    double rho[LATTICE];
};

...

double monte_carlo(float beta) {
    struct simulation_parameters params = {0}; // sets everything in params to zero
    calculate_rho(params.rho); // should do what initialize() did
    calculate_death_rates(params.death_rate, beta);

    for (unsinged long long i = 1; i &lt;= SWEEPS; i++) {
        distribution[n]++;
        if (uniform_rand() &lt; params.death_rate[n]) {
            n--;
            if (n == -1)
                n = revive(params.distribution, i);
        }
    }

    return calculate_rho_avg(distribution, SWEEPS);
}

int main(void) {
    srand(time(0)); // srand() should only be called once, so do it in main()
    printf("Average density is %lf\n", monte_carlo(BETA));
}
</code></pre>
    </div>