<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Function Placement</h2>

<p>You lose a bit of performance and readability by defining <code>check_winner</code> inside your <code>while</code> loop. <code>move_count</code>, <code>board</code> etc are all in global scope, even though they are within that loop:</p>

<pre class="lang-py prettyprint-override"><code>def check_winner():
    # Rest of function

while True:
</code></pre>

<p>The <code>def end()</code> could also be moved to global scope, because again you are redefining it during every iteration which isn't what you want.</p>

<h2>check_winner</h2>

<p>The <code>new_list = winning_list</code> doesn't do anything, it copies the reference from <code>winning_list</code> and the two variables are tied together unless you did a <code>deep_copy</code>, which creates a new object. Furthermore, I don't really see any use of <code>new_list</code> anywhere, so you can just drop that line entirely.</p>

<p>As @AJNewfeld pointed out, the <code>global move_count</code> can be dropped because, again, <code>move_count</code> is already global and is accessible by all <code>check_winner</code>, as it will look in the <code>locals()</code> mapping first, if <code>move_count</code> isn't in the local mapping (from positional or keyword args taken in by the function), it will search <code>globals()</code>. A <code>NameError</code> is only raised when those don't contain the variable you are looking for.</p>

<h2>Making Moves</h2>

<p>The <code>while</code> loop for <code>npc</code> can be easily refactored so that you aren't possibly iterating over the entire board, and makes the code a bit easier to read. Your <code>board</code> is made up of either two entries: <code>int</code> for open spots and <code>str</code> for taken spots. This means that <code>npc</code>'s move can be a function like so:</p>

<pre class="lang-py prettyprint-override"><code>def npc_move():
    # This will give you only the indices for spots that have yet to be taken
    remaining_spots = [i for i, value in enumerate(board) if isinstance(value, int)]
    return random.choice(remaining_spots)
</code></pre>

<p>Or you could also use a <code>set()</code> globally to represent remaining spots and <code>pop</code> indices out of it:</p>

<pre class="lang-py prettyprint-override"><code># Declare globally at the beginning 
moves_left = set(range(9))

# Your while loop can now be to check if the set is empty or not
while moves_left: # A populated set acts as True
    my_move = moves_left.pop(random.choice(moves_left))

    # Now moves_left has one fewer element
</code></pre>

<p>Taking this idea a little further, you could combine the user's move with the npc's move in one function:</p>

<pre><code># The npc default will allow you to set it to True if it's
# npc's turn, otherwise, no args need to be supplied
def make_move(npc=False):

    if npc is False:
        user_move = "" # dummy default to kick off while loop
        while user_move not in moves_left:
            try:
                user_move = int(input(f"Choose a move out of {moves_left}: "))
                return moves_left.pop(user_move)
            except ValueError, KeyError: # invalid int conversion or not in moves_left
                print("Invalid move")
                continue

    else:
        return moves_left.pop(random.choice(moves_left))  
</code></pre>

<p>You can then call it like:</p>

<pre class="lang-py prettyprint-override"><code>moves_left = set(range(9)) # At beginning of game

npc_move = make_move(npc=True)
3
user_move = make_move()

Choose a move out of {0, 1, 2, 4, 5, ,6 ,7, 8}: a
Invalid move
Choose a move out of {0, 1, 2, 4, 5, ,6 ,7, 8}: 3
Invalid move
Choose a move out of {0, 1, 2, 4, 5, ,6 ,7, 8}: 4

user_move
4
<span class="math-container">```</span>
</code></pre>
    </div>