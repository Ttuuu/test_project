<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The goal of a skip list is that you can do a find by doing a loop like:</p>

<pre><code>Node find(T value){
    Node start = root;

    while(start!=null &amp;&amp; comp(start.value, value) != 0){

        if(comp(start.next.value, value) &lt; 0){
            start = start.next;
        }else{
            start = start.down;
        }

    }
    return start;
}
</code></pre>

<p>Note the comp helper function. I added that so you can easily make it use a custom <code>Comparable&lt;T&gt;</code> passed in during construction. </p>

<p>This can be easily expanded to also keep a list of nodes to update should you want to insert/delete a value:</p>

<pre><code>List&lt;Node&gt; findAllPrevs(T value){
    List&lt;Node&gt; prevs = new ArrayList&lt;&gt;();
    Node start = root;

    while(start!=null){

        if(comp(start.next.value, value) &lt; 0){
            start = start.next;
        }else{
            prevs.add(start);
            start = start.down;
        }

    }
    while(prevs.get(prevs.size()-1).down!=null){
        prevs.add(prevs.get(prevs.size()-1).down);
    }
    return prevs;
}
</code></pre>

<p>Then you only need to update the last <code>depth</code> nodes in prevs when you add or remove a value.</p>
    </div>