<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Firstly, unless there is something you are not showing depending on the 'allChunks' list, I think that you could just remove it. Chunks appear to be either loaded or unloaded and all you will be doing is moving chunks between these two collections.</p>

<p>The following line, jumps out at me as a possible slow operation:</p>

<pre><code>    loadedChunks.ContainsValue(chunkGridPosition)
</code></pre>

<p>Checking if a value is stored in a dictionary can be a slow operation, since dictionaries are optimized for checking for keys and accessing the stored values by keys. My main suggestion would be to update your dictionary to have the position as the key and gameobject as the value. </p>

<p>This would change your logic from 'is this object loaded' to 'is there an object loaded at this coord'. This small change might help stop some of the extra work you were doing.</p>

<p>I have another suggestion that might not help with performance, but could help with readability and reducing repeating code. Create a simple struct that stores coordinates of chunks and handles all related conversions. This will put all code in a single place to handle jumping between world positions and chunk coordinates. This would help reduce the amount of times you might have to use 'Mathf.FloorToInt()'. A simple implementation could look like the following:</p>

<pre><code>public struct ChunkCoord {
    public const int ChunkSize = 10;
    public int X, Y;

    public ChunkCoord(int x, int y) {
        this.X = x; this.Y = y; 
    }

    public static ChunkCoord FromWorld(Vector2 position) {
        return new ChunkCoord(
            (int)Math.Floor(position.X / ChunkSize),
            (int)Math.Floor(position.Y / ChunkSize)
        );
    }

    public Vector2 ToWorld() {
        return new Vector2(
            (float)(this.X * ChunkSize),
            (float)(this.Y * ChunkSize)
        );
    }

    public float DistToWorldPoint(Vector2 position) {
        return Vector2.Distance(position, this.ToWorld());  
    }
}
</code></pre>

<p>By updating your collections and adding the ChunkCoords you could update your code to something similar to the following:</p>

<pre><code>public class World {
    Queue&lt;Chunk&gt; availableChunks;
    Dictionary&lt;ChunkCoord, Chunk&gt; loadedChunks;

    public void UpdateWorld(Vector2 position, float radius) {
        // Loop through all available keys in the loaded chunks
        // and check if they are still in the visible radius
        foreach(var coord in this.loadedChunks.Keys) {
            if(coord.DistToWorldPoint(position) &gt;= radius) {
                var chunk = this.loadedChunks[coord];

                chunk.Unload();
                loadedChunks.Remove(coord);
                availableChunks.Enqueue(chunk);
            }
        }

        // Get the min and max values for visible coords.
        ChunkCoord minCoord = ChunkCoord.FromWorld(
            new Vector2(position.X - radius, position.Y - radius));
        ChunkCoord maxCoord = ChunkCoord.FromWorld(
            new Vector2(position.X + radius, position.Y + radius));

        // Loop through all visible coords and 
        // load any chunks that need to be loaded.
        for(int x = minCoord.X; x &lt;= maxCoord.X; x++) {
            for(int y = minCoord.Y; y &lt;= maxCoord.Y; y++) {
                var coord = new ChunkCoord(x, y);
                // Check if the point is in the visable radius
                if (coord.DistToWorldPoint(position) &gt;= radius)
                    continue;

                // Check if there is a chunk already loaded
                if (this.loadedChunks.ContainsKey(coord))
                    continue;

                // Coord is visible and no chunk is loaded, load it.
                var chunk = this.GetAvailableChunk();
                chunk.Load(coord);
                this.loadedChunks[coord] = chunk;
            }
        }
    }

    public Chunk GetAvailableChunk() {
        if(this.availableChunks.Count &gt; 0) {
            return this.availableChunks.Dequeue();
        } else {
            // Handle creating a new chunk and return it here
        }
    }
}
</code></pre>
    </div>