<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Naming</h3>

<blockquote>
<pre><code>    public static void drawRectangle(Graphics g, int xCenter, int yCenter, int levelsNeeded){
</code></pre>
</blockquote>

<p>I would call this <code>drawRectangles</code>, as it draws four rectangles on each iteration of the loop.  Also, that leaves room for a <code>drawRectangle</code> method.  </p>

<h3>Typos</h3>

<blockquote>
<pre><code>    //all squres are based off an 8 pixel system.  I use this to shift things around ALOT.
</code></pre>
</blockquote>

<p>This has two typos.  </p>

<pre><code>    // all squares are based off an 8 pixel system.  I use this to shift things around A LOT.
</code></pre>

<h3>Comments</h3>

<blockquote>
<pre><code>    Point origin = new Point(xCenter -= CHANGECONSTANT, yCenter -= CHANGECONSTANT); //Sets Origin to top left of inner most set of squares
</code></pre>
</blockquote>

<p>If you break this up into two lines, it's easier to read</p>

<pre><code>    // Sets Origin to top left of inner most set of squares
    Point origin = new Point(xCenter -= CHANGECONSTANT, yCenter -= CHANGECONSTANT);
</code></pre>

<p>And it doesn't put a scroll bar on my StackExchange screen.  </p>

<h3>Refactoring</h3>

<blockquote>
<pre><code>        g.setColor(Color.GRAY);
        //Top Left
        g.fillRect(
         (int)origin.getX()-(level*CHANGECONSTANT), // XCord
         (int)origin.getY()-(level*CHANGECONSTANT), // YCord
         width, //width. This stays at 8 for all iterations
         height*dcg);//height. This gets multiplied by odd factors each time
         //Draw outline
         g.setColor(Color.BLACK);
        g.drawRect(
         (int)origin.getX()-(level*CHANGECONSTANT), // XCord
         (int)origin.getY()-(level*CHANGECONSTANT), // YCord
         width, //width. This stays at 8 for all iterations
         height*dcg);//height. This gets multiplied by odd factors each time
</code></pre>
</blockquote>

<p>You repeat this pattern four times.  Consider </p>

<pre><code>    public static void drawRectangle(Graphics g, int x, int y, int width, int height, Color color) {
        g.setColor(color);
        g.fillRect(x, y, width, height);

        g.setColor(Color.BLACK);
        g.drawRect(x, y, width, height);
    }
</code></pre>

<p>Then we can just write </p>

<pre><code>    // the corner coordinates change by a constant amount each level
    final int maximumDelta = levelsNeeded * CHANGECONSTANT;
    for (int delta = 0; delta &lt; maximumDelta; delta += CHANGECONSTANT)
    {
        final int left = (int)origin.getX() - delta;
        final int top = (int)origin.getY() - delta;

        // the width and height change twice as fast as the corner locations
        final int wide = narrow + 2 * delta;
        final int tall = small + 2 * delta;

        drawRectangle(g, left, top, narrow, tall, Color.GRAY);
        drawRectangle(g, left, bottom - delta, wide, small, Color.GRAY);
        drawRectangle(g, right - delta, top, wide, small, Color.WHITE);
        drawRectangle(g, right + delta, bottom + delta, narrow, tall, Color.WHITE);
    }
</code></pre>

<p>This assumes a previous change of <code>width</code> and <code>height</code> to <code>narrow</code> and <code>small</code>.  We still have <code>width</code> and <code>height</code> in the helper method.  Add <code>right</code> and <code>bottom</code> with them, outside the loop.</p>

<pre><code>    final int right = (int)origin.getX() + CHANGECONSTANT;
    final int bottom = (int)origin.getY() + CHANGECONSTANT;
</code></pre>

<p>This is both shorter and more readable in my opinion.  Rather than recalculating everything as needed, it calculates everything once.  By using these names, we can easily see that a particular rectangle is the "left, top" that is drawn gray in "narrow, tall" aspect.  We don't need comments, as these names are self-documenting.  </p>

<p>We can make all of these <code>final</code>, but you don't need to do so.  </p>

<p>I eliminated <code>dcg</code>.  It was confusingly named and as I looked at it more carefully, unnecessary.  </p>

<p>You could also make things easier by changing this from a <code>static</code> (class) method to an object method.  Then your constructor could take a <code>Graphics</code> object.  That would save passing it around all the time.  You don't provide enough context to say whether this is a good idea.  This might require moving this method to a different class.  </p>

<p>I would add an underscore to <code>CHANGECONSTANT</code> and call it <code>CHANGE_CONSTANT</code>.  Or change the name to something else entirely, e.g. <code>INTERVAL</code> or <code>STANDARD_DIMENSION</code>.  </p>

<p>You haven't provided driver code; I haven't tried to run this version to see if it gives the same behavior.  Beware of errors that might have been found by running the code.  </p>
    </div>