<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Review</h1>

<ol>
<li><p>Creating functions that read and modify global variables is not a good idea, for example if someone wants to reuse your function, they won't know about side effects.</p></li>
<li><p><code>index</code> is not useful, and <code>range(0, n)</code> is the same as <code>range(n)</code></p></li>
<li><p>Using <code>==</code> is more appropriate than <code>is</code> in general, hence <code>response.status_code == 200</code></p></li>
<li><p>If <code>response.status_code != 200</code>, I think the function should ~return an empty result~ raise an exception like said by @Ludisposed.</p></li>
<li><p>You use <code>json_data["data"]["items"]</code> a lot, you could define <code>items = json_data["data"]["items"]</code> instead, but see below.</p></li>
<li><p>Your usage of <code>i</code> is totally messy. Never use both <code>for</code> and <code>while</code> on the same variable. I think you just want to get the information for each item. So just use <code>for item in json_data["data"]["items"]:</code>.</p></li>
<li><p>Actually, <code>print("Getting data from site... please wait a few seconds")</code> is wrong as you got the data at <code>response = get(url)</code>. Also, <code>sleep(0.5)</code> and <code>sleep(5)</code> don't make any sense.</p></li>
<li><p>Speaking from this, <code>requests.get</code> is more explicit.</p></li>
<li><p>You can actually create a pandas DataFrame directly from a list of dictionaries.</p></li>
<li><p>Actually, if you don't use the response in another place, you can use the url as an argument of the function.</p></li>
<li><p>Putting spaces in column names of a DataFrame is not a good idea. It removes the possibility to access the column named <code>stock</code> (for example) with <code>df.stock</code>. If you still want that, you can use <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.rename.html" rel="nofollow noreferrer">pandas.DataFrame.rename</a></p></li>
<li><p>You don't need to import <code>json</code>.</p></li>
<li><p>The discounts are given as strings like <code>"59%"</code>. I think integers are preferable if you want to perform computations on them. I used <code>df.discount = df.discount.apply(lambda s: int(s[:-1]))</code> to perform this.</p></li>
<li><p>Optional: you might want to use <a href="https://docs.python.org/3/library/logging.html" rel="nofollow noreferrer"><code>logging</code></a> instead of printing everything. Or at least print to stderr with:</p>

<p><code>from sys import stderr</code></p>

<p><code>print('Information', file=stderr)</code></p></li>
</ol>

<h1>Code</h1>

<pre><code>import requests
import pandas as pd


def getShockingSales(url):
    response = requests.get(url)
    columns = ["name", "price", "discount", "stock"]
    response.raise_for_status()
    print("Response: OK")
    json_data = response.json()
    df = pd.DataFrame(json_data["data"]["items"])[columns]
    df.discount = df.discount.apply(lambda s: int(s[:-1]))
    print("Task is completed...")
    return df


URL = "https://shopee.com.my/api/v2/flash_sale/get_items?offset=0&amp;limit=16&amp;filter_soldout=true"
df = getShockingSales(URL)
</code></pre>
    </div>