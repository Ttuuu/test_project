<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
                    <div>
            <aside class="s-notice s-notice__info js-post-notice mb16" role="status">
        <div class="grid fd-column fw-nowrap">
            <div class="grid fw-nowrap">
                <div class="grid--cell fl1 lh-lg">
                    <div class="grid--cell fl1 lh-lg">
                        <p>We are looking for answers that provide insightful observations about the code in the question. Answers that consist of independent solutions with no justification do not constitute a code review, and may be removed.</p>
                        
                    </div>
                </div>
            </div>
        </div>
</aside>

    </div>

<p>This is going to fix digits indentation.
The fix can be managed by supplying a better regex but regex are a pain in the ... :)</p>
<pre><code>#pragma once

#include &lt;string&gt;
#include &lt;regex&gt;
#include &lt;vector&gt;
#include &lt;cctype&gt;


namespace
{
  bool first_digit_done = false;
}

class JSONPretify
{
public:
  JSONPretify(const std::string&amp; json)
    : json_(json)
  {
    pretify();
  };

  JSONPretify(const std::string&amp; json, bool colon_space)
    : json_(json)
  {
    pretify();
    if(colon_space) {
      insertColonSpaces();
    }
  }

  operator std::string() const
  {
    return json_;
  }

  const std::string&amp; get() const
  {
    return json_;
  }

private:
  void pretify()
  {
      std::regex var = std::regex(R"((\".+?\".*?(?=\{|\[|\,|\]|\}))|(\d+?))");
      long it = 0;
      int depth = 0;
      while(it &lt; json_.size() &amp;&amp; it != -1){
          regex_pos pos_tab = findRegexFirstPosition(it, var);
          long pos_comma = json_.find(",", it);
          long pos_obj_start = json_.find("{", it);
          long pos_obj_end = json_.find("}", it);
          long pos_array_start = json_.find("[", it);
          long pos_array_end = json_.find("]", it);
          long old_it = it;

          unsigned long work_with = find_lowest(std::vector&lt;long&gt;{pos_tab.pos, pos_comma, pos_obj_start, pos_obj_end,pos_array_start,pos_array_end});

          if(work_with != TAB) {
            first_digit_done = false;
          }

          switch(work_with){
              case(TAB):{
                  const bool digit_found = isdigit(json_[pos_tab.pos]);

                  if(first_digit_done &amp;&amp; digit_found) {
                    ++it;
                    break;
                  }

                  std::string insert = generateSpaces(depth);
                  json_.insert(pos_tab.pos, insert);

                  it = pos_tab.pos+insert.size()+pos_tab.length;

                  first_digit_done = digit_found;
                  break;
              }
              case(COMMA):{
                  std::string insert = "\n";
                  json_.insert(pos_comma+1, insert);

                  it = pos_comma+1;
                  break;
              }
              case(OBJ_START):{
                  std::string insert = "\n";
                  json_.insert(pos_obj_start+1, insert);
                  it = pos_obj_start+insert.size();
                  depth+=1;
                  if(pos_obj_start-1 &lt; 0 || pos_obj_start &gt; json_.size()) continue;

                  if(json_.at(pos_obj_start-1) != ':'){
                      std::string extra = generateSpaces(depth-1);
                      json_.insert(pos_obj_start, extra);
                      it+=extra.size();
                  }

                  break;
              }
              case(OBJ_END):{
                  std::string insert = "\n"+generateSpaces(depth-1);
                  json_.insert(pos_obj_end, insert);
                  depth-=1;
                  it = pos_obj_end+insert.size()+1;
                  break;
              }
              case(ARRAY_START):{
                  depth+=1;
                  std::string insert = "\n";
                  json_.insert(pos_array_start+1,insert);
                  it=pos_array_start+insert.size();
                  break;
              }
              case(ARRAY_END):{
                  depth-=1;
                  std::string insert = "\n"+generateSpaces(depth);
                  json_.insert(pos_array_end,insert);
                  it=pos_array_end+insert.size()+1;
                  break;
              }
              default:{
                  break;
              }
          };


          if(it == old_it)
              break;
      }
  };

  void insertColonSpaces(){
      long pos = 0;
      while(pos &lt; json_.size() &amp;&amp; pos != -1){
          pos = json_.find(":", pos);
          if(pos == -1 || pos &gt;= json_.size()) break;
          json_.replace(pos, 1, " : ");
          pos += 3;
      }
  }
  struct regex_pos{
      long pos;
      long length;
  };
  std::string generateSpaces(int l){
    if(l == 4) {
      int a = 0;
    }
      std::string r="";
      for(int i = 0; i &lt; l; i++){
          r+= "    ";
      }
      return r;
  }
  regex_pos findRegexFirstPosition(long start_pos, std::regex rx){
      long at = -1;
      long l = 0;

      std::string ss(json_.begin()+start_pos, json_.end());
      std::smatch m;

      std::regex_search ( ss, m, rx );

      for (unsigned i=0; i&lt;m.size(); ++i) {
          at = m.position(i);
          l = m[i].str().size();
          break;
      }
      if(at != -1) at += start_pos;
      return {at,l};
  }
  template&lt;typename T&gt;
  unsigned long find_lowest(std::vector&lt;T&gt; outof){
      unsigned long lowest_it = 0;
      for(unsigned i = 0; i &lt; outof.size(); i++){
          if((outof[i] &lt; outof[lowest_it] &amp;&amp; outof[i] != -1) || (outof[lowest_it] == -1 &amp;&amp; outof[i] != -1)){
              lowest_it = i;
          }
      }
      if(outof[lowest_it] == -1)
          lowest_it = outof.size()+1;
      return lowest_it;
  }

  enum positions{
      TAB = 0,
      COMMA = 1,
      OBJ_START = 2,
      OBJ_END = 3,
      ARRAY_START = 4,
      ARRAY_END = 5
  };

private:
  std::string json_;
};
</code></pre>
    </div>