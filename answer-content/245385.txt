<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>PEP8</h2>
<p>Your member variables such as <code>DIMENSIONS</code>, methods such as <code>Draw</code> and arguments such as <code>Dimensions</code> should be in lower_snake_case.</p>
<h2>Static code</h2>
<p>These lines:</p>
<pre><code>pygame.init()
pygame.font.init()
</code></pre>
<p>should not go in what's effectively the static section of <code>Window</code>. Move them to a function.</p>
<h2>Hard-coded credentials</h2>
<p>Do not hard-code these:</p>
<pre><code>DBLOGIN = {"host": "localhost", "database": "OlijonDB", "user": "root", "passwd": "test123"}
</code></pre>
<p>into the script, for security purposes. Move them to an (ideally encrypted) configuration file.</p>
<h2>Database connection</h2>
<p>You don't close your database connection; this is bad. You have a method that receives only a command and has to spin up a new connection every time; you need to avoid this as well. Consider moving a single connection variable somewhere (not a global) where it can be accessed by your fetch function, and close it at the end of the program.</p>
<h2>Non-lists</h2>
<pre><code>CellDimensions=[50, 50, 1]
</code></pre>
<p>likely doesn't deserve to be a list and should be separate variables, since it only ever receives fixed indices.</p>
<h2>Inner class</h2>
<p><code>class Element</code> needs to be moved up to global scope. It doesn't need to have any closures and does not rely on <code>AtomicNumber</code>.</p>
<h2>Select</h2>
<pre><code>for Properties in fetchFromDatabase("SELECT * FROM periodictable WHERE atomicnumber = " + str(AtomicNumber)):
    E = Element(Properties[2], Properties[0], Properties[3] - Properties[0 ], Properties[4])
</code></pre>
<p>has a number of significant issues:</p>
<p><code>Properties</code> should be unpacked to five variables. Your <code>Element</code> arguments are:</p>
<pre><code>Name, Protons, Neutrons, ElectronConfig
</code></pre>
<p>Given your indexing of</p>
<pre><code>Properties[2], Properties[0], Properties[3] - Properties[0 ], Properties[4]
</code></pre>
<p>then the unpack will be</p>
<pre><code>protons, ???, name, ???, electron_config = properties
</code></pre>
<p>where I have no idea what some of those names will be.</p>
<p>Your <code>select *</code> is fragile. Whereas columns are guaranteed to be returned in <a href="https://stackoverflow.com/questions/11737232/column-order-in-select-statement-guaranteed">order of declaration</a> assuming that MySQL adheres to the standard, there is <em>no</em> guarantee that someone won't shuffle those around in the database in the future. Spell out the columns that you're selecting, particularly since it seems you don't use them all.</p>
<p>You have a direct injection vulnerability. Never string-append query parameters. The MySQL connector library has a <a href="https://dev.mysql.com/doc/connector-python/en/connector-python-api-mysqlcursor-execute.html" rel="nofollow noreferrer">thing for this</a> - the <code>params</code> kwarg.</p>
    </div>