<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First, let me ungolf and simplify your code slightly, so it will be easier for me to read:</p>

<pre><code>import System.Random

pick :: Int -&gt; [a] -&gt; (a,[a])
pick 0 (x:xs) = (x, xs)
pick i (x:xs) = let (y,ys) = pick (i-1) xs
                in (y, x:ys)
pick _ []     = error "pick: Invalid index"

shuffle :: [a] -&gt; IO [a]
shuffle lst = runner (length lst) lst
  where
    runner :: Int -&gt; [a] -&gt; IO [a]
    runner 0 xs = return xs
    runner i xs = do
      r &lt;- randomRIO (0, i-1)
      let (y,ys) = pick r xs
      (y:) &lt;$&gt; runner (i-1) ys
</code></pre>

<p>Every call to <code>pick</code> is <code>O(i)</code>, since you need to iterate through on average half of the array to extract the value and move it to the front. In when calling pick, <code>i</code> is on average equal to <code>n/2</code> (where <code>n</code> is the length of the list). <code>runner</code> is called recursively <code>n</code> times.</p>

<p>So in conclusion, <code>pick</code> has time complexity <code>O(n)</code> and <code>shuffle</code> has time complexity <code>O(n^2)</code>, which is indeed much worse than linear, but not quite exponential as you feared. There are also some minor issues with your functions not being tail recursive, but that should only affect constant factors and memory usage, not complexity.</p>

<p>This also matches your measurements, since <code>0.57 * 10^2 â‰ˆ 6.81</code></p>

<p>If you compare it to <a href="https://www.wikizeroo.org/index.php?q=aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRmlzaGVy4oCTWWF0ZXNfc2h1ZmZsZQ#The_modern_algorithm" rel="nofollow noreferrer">the modern method</a> which you linked, that code instead uses a swap operation which is <code>O(1)</code>, which gives you the promised <code>O(n)</code> complexity.</p>

<p>On a side-note, your javascript version of the algorithm has the same problem, since <code>Array.splice</code> <a href="https://stackoverflow.com/questions/5175925/whats-the-time-complexity-of-array-splice-in-google-chrome">is an <code>O(n)</code> operation</a>.</p>

<hr>

<p>So, to your questions:</p>

<ol>
<li><p>Can we improve the time complexity while using the list type?</p>

<p>No. Not unless we change the algorithm to something different, which in a way you have already done in both your implementations by not using the swap operation. An <code>O(1)</code> swap operation for lists is not available, since all random access costs <code>O(n)</code>. You can however easily fix it in your js-version (see <a href="https://jsperf.com/js-list-swap" rel="nofollow noreferrer">here</a>).</p>

<p>If you do want to use a different algorithm, there are <code>O(n*log n)</code> algorithms that works on lists, which is not quite linear, but it's the best we can get for lists. You could also use the same algorithm with a Map, which has <code>O(log n)</code> swap operations.</p></li>
<li><p>Unboxed types and similar gimmicks will only only help with constant factors, not algorithmic complexity. However, what would help a lot is to use a <a href="https://hackage.haskell.org/package/array" rel="nofollow noreferrer">mutable array</a> or <a href="https://hackage.haskell.org/package/vector" rel="nofollow noreferrer">vector</a>. They do have an <code>O(1)</code> swap operation. They come in both an <code>IO</code> version and an <code>ST</code> version which can be used from pure functions.</p></li>
</ol>

<p>There are a number of different implementations of a random shuffle function on <a href="https://wiki.haskell.org/Random_shuffle" rel="nofollow noreferrer">this page</a>, including Fisher-Yates with both a <code>Map</code> (<code>O(n*log n)</code>) and a mutable <code>Array</code> (<code>O(n)</code>).</p>
    </div>