<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><code>Invoke</code> is a <em>blocking</em> call that returns only <em>after</em> that call has competed.  </p>

<p>That means your loop is also including the time it takes to marshal over to the GUI thread and complete.  You probably don't want that.</p>

<p>I would use <code>BeginInvoke</code> instead, which does not wait for the method to complete on the GUI thread.</p>

<p>This is also the difference between <code>SynchronizationContext</code> methods <code>Post</code> and <code>Send</code>.</p>

<p>I would also prevent <code>await</code> from potentially capturing the current <code>SynchronizationContext</code> using <code>ConfigureAwait(false)</code>.</p>

<p>To protect against exceptions if the control is disposed of (happens on form close and for other reasons) I'd add an <code>IsDisposed</code> check.</p>

<p>Finally I would allow this <code>Task</code> to be <a href="https://docs.microsoft.com/en-us/dotnet/standard/threading/cancellation-in-managed-threads" rel="nofollow noreferrer">cancelled</a> as a matter of best practices using a <code>CancellationToken</code>.</p>

<pre><code>private async Task SnoozeAsync(int seconds, CancellationToken token)
{
    for (var i = 0; i &lt; seconds; i++)
    {
        if (token.IsCancellationRequested)
            break;
        BeginInvoke((MethodInvoker)(() =&gt; 
        {
            if (!statusLabel.IsDisposed)
                statusLabel.Text = $"Waiting {seconds - i} seconds...";
        }));
        await Task.Delay(1000, token).ConfigureAwait(false);
    }
}
</code></pre>
    </div>