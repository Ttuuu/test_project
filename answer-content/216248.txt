<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This loop</p>

<pre><code>    while (i &lt; text.IndexOf("&lt;upcase&gt;", k))
    {
        ....
    }
</code></pre>

<p>invokes <code>IndexOf</code> multiple times for nothing. I'd call it just once and use the result:</p>

<pre><code>    const int upcasePos = text.IndexOf("&lt;upcase&gt;", k);
    if (upcasePos &lt; 0)
    {
        while (i &lt; text.Length)
        {
            textNew[j++] = text[i++];
        }
    }
    else                                  
    {
        while (i &lt; upcasePos)
        {
            textNew[j++] = text[i++];
        }

        ....
    }
</code></pre>

<p><strong>Edit</strong></p>

<p>You can also speed things up by getting rid of char-by-char iteration, and instead processing longer parts of the string at once with standard routines.
Here's an outline:</p>

<pre><code>    StringBuilder sb = new StringBuilder();

    for (int k = 0; k &lt; text.length; )
    {
         int tagOpen = text.IndexOf("&lt;upcase&gt;", k));
         if (tagOpen &lt; 0)
         {
             sb.Append(text.Substring(k));  // take the tail
             break;
         }

         sb.Append(text.Substring(k, tagOpen - k));
         k = tagOpen + 8;                   // skip the tag

         int tagClose = text.IndexOf("&lt;/upcase&gt;", k));
         if (tagClose &lt; 0)
         {
             sb.Append(text.Substring(k).toUpper());  // take the tail in upper case
             break;
         }

         sb.Append(text.Substring(k, tagClose - k).toUpper());
         k = tagClose + 9;                  // skip the tag
    }

    result = sb.ToString();   // return this
</code></pre>
    </div>