<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your complexity analyses look correct to me.  I would just say, in short, that this function works in O(<em>n</em><sup>2</sup>) time.</p>

<p>Note that this is an awkward exercise to do in Python, or any language in which strings are immutable.  Since you can't perform the substitutions in place, you have to return a copy, which means that the minimum space requirement is O(<em>n</em>).  In that case, you might as well do either:</p>

<pre><code>def urlify(in_string, in_string_length):
    return in_string[:in_string_length].replace(' ', '%20')
</code></pre>

<p>… or:</p>

<pre><code>def urlify(in_string, in_string_length):
    return ''.join('%20' if c == ' ' else c for c in in_string[:in_string_length])
</code></pre>

<p>… which should also be O(<em>n</em>) space, O(<em>n</em>) time, and much simpler to implement!</p>

<p>That said, if we were to reinterpret the exercise to work on a buffer in place, I think that a better approach would be to make one pass to count the spaces in the input, to figure out the length of the output.  Then, copy characters to construct the result, working backwards from the end.  That algorithm should take O(<em>n</em>) time and O(1) space.</p>

<p><strong>In summary, depending on how you interpret the exercise, the solution should either be simpler or faster than what you wrote.</strong></p>
    </div>