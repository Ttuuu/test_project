<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The way you generate primes is very inefficient. There are a few quick fixes to speed it up. But first let's put the primality check into its own function:</p>

<pre><code>def is_prime(n):
    prime = True
    for num in range(2, n):
        if n % num == 0:
            prime = False
    return prime

primes = [n for n in range(2, 100000) if is_prime(n)]
</code></pre>

<p>This uses a list comprehension, the fact that the default increment of <code>range</code> is <code>1</code> and follows Python's official style-guide, <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP8</a>.</p>

<p>Now, if you know that a number is composite, there is no need to check for all other numbers if they divide the number:</p>

<pre><code>def is_prime(n):
    for num in range(2, n):
        if n % num == 0:
            return False
    return True
</code></pre>

<p>All prime numbers except for <code>2</code> are odd. So just start with 2 in the list and increment by 2:</p>

<pre><code>    primes = [2] + [n for n in range(3, 100000, 2) if is_prime(n)]
</code></pre>

<p>You could even hard-code all primes below 10, but the performance gain from that is very small.</p>

<p>And finally, if you know that <code>k</code> is a divisor of <code>n</code>, then so is <code>n // k</code>. In other words, as soon as you have checked all values smaller than <code>sqrt(n)</code>, you have already checked all possible divisors.</p>

<pre><code>from math import sqrt

def is_prime(n):
    for num in range(2, int(sqrt(n)) + 1):
        if n % num == 0:
            return False
    return True
</code></pre>

<hr>

<p>There are even faster ways to generate all primes up to some number and they are known as sieves (since they sieve out multiples of numbers for which you know that they are prime). One possible implementation as a generator of the well-known <a href="https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes" rel="nofollow noreferrer">Sieve of Eratosthenes</a> is this:</p>

<pre><code>def prime_sieve(limit):
    prime = [True] * limit
    prime[0] = prime[1] = False

    for i, is_prime in enumerate(prime):
        if is_prime:
            yield i
            for n in range(i * i, limit, i):
                prime[n] = False

primes = list(prime_sieve(100000))
</code></pre>
    </div>