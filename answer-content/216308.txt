<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>To prevent overflow, you need to check if <code>reversed*10+pop &gt; INT_MAX</code>. But in order to avoid actually overflowing while checking, rearrange the equation to <code>reversed  &gt; (INT_MAX-pop)/10;</code>   </p>

<p>Actually, I think you should check against <code>-INT_MIN</code>. Which brings up another point.  You could use <code>int64_t</code> for <code>reversed</code>. This both ensures it can hold -INT_MIN before fixing the sign, and lets you do the bounds test only once at the end, instead of at each intermediate step.</p>

<p>I would initialize <code>sign</code> with the correct value:  <code>int sign = (i&lt;0)?-1:1; i*=sign;</code> . <code>pop</code> can be loop local and doesn't need the <code>0</code> initialization.</p>

<p>You should multiply <code>reversed</code> by <code>sign</code> before printing it.</p>
    </div>