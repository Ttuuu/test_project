<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You made multiple non-trivial edits while I wrote my answer, so there might be some divergence. (Personal annotation: Code should be (mostly) self explanatory. Don’t add a wall of text beforehand that words out what the code says anyway.)</p>

<p>Due to lack of expertise, I will not comment on possible mathematical improvements or multithreading. </p>

<h3>Clear interface</h3>

<p>I am bit confused by the Integrator class. The usage as shown in your main is as expected, but why are <code>dx_</code>, <code>dy_</code> and <code>integral_</code> member variables, which can be accessed, but do not contain any meaningful content (Or are even unitialized for <code>integral_</code>!) until <code>evaluate()</code> or <code>integrate()</code> was called?</p>

<p>If this is meant to be some kind of result caching, then it should happen completely internally, maybe with an <code>std::optional&lt;double&gt; integral_</code>, which is set the first time something is calculated and then returned the next time. Also, both functions should not share the cached result. Since this is nothing but a wild guess, I’ll assume the smallest sensible interface as depicted by the main in the following.</p>

<h3>struct Limits</h3>

<p>In my opinion, <code>applyLimits</code> is completely redundant to the non-default constructor and introduces code duplication. It should be completely removed, since it can be replaced as follows:</p>

<pre><code>some_limits.applyLimits(3., 4.);  //your function call
some_limits = Limits{3., 4.};     //shorter and clearer replacement
</code></pre>

<p><code>lower</code> and <code>upper</code> should not be public (although you mention that this is intended) as <code>lower &lt;= upper</code> is an invariant which cannot be guaranteed if the user meddles with the variables directly.</p>

<h3>class Integrator</h3>

<p>In the name of <a href="https://en.cppreference.com/w/cpp/language/raii" rel="nofollow noreferrer">RAII</a>, never have a constructor not initialize a member variable, in this case <code>integral_</code>!</p>

<p>As mentioned above, I will argue for a simplified interface here: Remove the member variables <code>dx_</code>, <code>dy_</code> and <code>integral_</code> as well as their respective getters completely and initialize them locally whereever needed. According to the <a href="https://www.fluentcpp.com/2019/04/23/the-rule-of-zero-zero-constructor-zero-calorie/" rel="nofollow noreferrer">rule of zero</a>, do not explicitely default the destructor, as it is redundant and even deletes the move constructors!</p>

<p>Since your algorithm breaks for negative <code>step_size_</code>, use <code>size_t</code> instead of <code>int</code> as its type.</p>

<p>The loop over <code>i</code> in <code>evaluate</code> and the one over <code>j</code> in <code>integrate</code> are again code duplication, consider refactoring that. I would suggest something like this, with a reasonable name of course (ommited comments for brevity):</p>

<pre><code>constexpr double evaluate() {
    double distance = limits_.upper - limits_.lower;
    auto dx = distance / step_size_;

    return mathematically_descriptive_name(dx, limits_);
}

private:
double mathematically_descriptive_name(double dx, const Limits&amp; limits) {
    double result = 0.;
    for (size_t i = 0; i &lt; step_size_; ++i) {
        auto dy = integrand_(limits.lower + i * dx);
        auto area = dy * dx;
        result += area;
    }
    return result;
}
</code></pre>

<p>The loop in <code>integrate</code> can then be replaced with:</p>

<pre><code>auto innerSum = mathematically_descriptive_name(dx, limits);
</code></pre>

<p>Whilst implementing this, I tripped over the fact that in <code>integrate</code> both the member variable <code>limits_</code> as well as the local variable <code>limits</code> are used, you should make the names more distinguishable from each other to avoid confusion.</p>

<h3>General style</h3>

<p>Since you are using C++17, I would suggest a widespread use of <a href="https://en.cppreference.com/w/cpp/language/attributes/nodiscard" rel="nofollow noreferrer"><code>[[nodiscard]]</code></a>. Additionally, now that those additional member variables disappeared, all your functions can be const! With my interpretation of your interface, you could even make everything <code>constexpr</code>* and calculate everything at compile time – you would need to replace <code>std::function</code> though, maybe by templating the class over the function used.</p>

<p>Nowadays curly initialization, as already used by your constructors, is the way to go, e.g. use</p>

<pre><code>Integrator integratorA{Limits{3.0, 5.0}, 10000, &amp;funcA};
</code></pre>

<p>or even</p>

<pre><code>auto integratorA = Integrator{Limits{3.0, 5.0}, 10000, &amp;funcA};
</code></pre>

<p>for the main.</p>

<h3>About templates</h3>

<p>I would template both the struct and the class over a <code>template&lt;typename Field&gt;</code> instead of using <code>double</code> to increase flexibility of usage. Additionally, as mentioned earlier, for a constexpr evaluation you could consider using <code>template&lt;typename Func&gt;</code> and throwing lambdas in as parameters.</p>

<hr>

<p>*<a href="https://en.cppreference.com/w/cpp/algorithm/swap" rel="nofollow noreferrer"><code>std::swap</code></a> is not constexpr before C++20. Until then, one could do a small trick to work around this like</p>

<pre><code>constexpr Limits(double a = 0., double b = 0.) :
    lower{ a &lt; b ? a : b },
    upper{ a &lt; b ? b : a }
{}
</code></pre>
    </div>