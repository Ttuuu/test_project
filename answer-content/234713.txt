<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I know very little about cryptography, so I'm not even going to attempt to comment on that aspect of it.</p>

<p>I do see the odd thing that can be improved though.</p>

<hr>

<pre><code>if choice == 0:
    option_get(passwords)

elif choice == 1:
    option_post(passwords)
. . .
</code></pre>

<p>This has a lot of redundancy. The common pattern is you're dispatching on <code>choice</code>, then passing <code>passwords</code> to the given function (with the unfortunate exception of <code>exit</code>). This can be made more streamline either by using a list, or dictionary. Since you're using numbers 0 to 6 as "keys", this is arguably more appropriate as a list, but a dictionary would be more explicit:</p>

<pre><code>MENU_DISPATCH = \
    {0: option_get,
     1: option_post
     2: option_delete,
     . . .
     6: lambda _: sys.exit}
</code></pre>

<p>or</p>

<pre><code>MENU_DISPATCH = \
    [option_get,
     option_post,
     option_delete,
     . . .,
     lambda _: sys.exit]
</code></pre>

<p>Then, in either case:</p>

<pre><code>f = MENU_DISPATCH[choice]
f(passwords)
</code></pre>

<p>The dictionary has the benefit that you can easily do error checking:</p>

<pre><code>f = MENU_DISPATCH.get(choice, None)  # None on a bad option

if f:
    f(passwords)

else:
    print("Bad option")
</code></pre>

<hr>

<p>I find it odd that <code>wallet_main</code> and <code>wallet_choices</code> are mutually recursive. Not only does this open you up to <code>RecursionError</code>s (if somehow they enter bad input ~1000 times), it makes the code harder to follow because execution is jumping back and forth between the functions. Do you actually need the <code>if passwords is None:</code> and the rest of that code to run every time they make an error?</p>

<p>I'd make <code>wallet_choices</code> handle input completely. I'd also introduce a <code>parse_int</code> function so you don't need to wrap calls to <code>int</code> with a <code>try</code>, and get rid of the catching of the <code>AssertionError</code>. I think catching an assert error like you are here is an abuse of <code>assert</code>.</p>

<pre><code>from typing import Optional


def parse_int(text_num: str) -&gt; Optional[int]:
    """Returns the parsed number, or None if the parse failed."""
    try:
        return int(text_num)

    except ValueError:
        return None

def wallet_choices(master, passwords):
    """
    1: ENTER A NEW PASSWORD OR EDIT A PASSWORD
    2: DELETE A PASSWORD
    3: SUGGEST A PASSWORD
    4: PRINT SITE/USER LIST
    5: PRINT SITE/USER/PASSWORD LIST
    6: EXIT
    """
    print(it("green", wallet_choices.__doc__))

    while True:  # Imperative loop instead of recursion
        choice = input("input choice or press Enter to GET A PASSWORD: ")
        choice = choice or "0"  # That check can be reduced down by taking advantage of `or`

        choice = parse_int(choice)

        if choice is not None and 0 &lt;= choice &lt;= 6:  # Just use if instead of assert to jump to error handling
            return choice

        else:
            print("\033cinvalid choice (", choice, ") try again")
            time.sleep(2)
            # Will loop back to the top from here
</code></pre>

<hr>

<p>Just a heads up, you can use <a href="https://pypi.org/project/colorama/" rel="noreferrer">Colorama</a> instead of your <code>it</code> function.</p>

<hr>

<p>In <code>doc_write</code>, you have:</p>

<pre><code>with open(document, "w+") as handle:
    handle.write(text)
    handle.close()
</code></pre>

<p>This defeats the purpose of using <code>with</code> though. <code>handle</code> is automatically closed when <code>with</code> is exited and the <code>TextIOWrapper</code>'s <code>__exit__</code> method is called. You just need:</p>

<pre><code>with open(document, "w+") as handle:
    handle.write(text)
</code></pre>

<p>And then the same with <code>doc_read</code>.</p>

<hr>

<p>In <code>trace</code>, you have:</p>

<pre><code>"\n\n" + str(time.ctime()) + "\n\n" + str(traceback.format_exc()) + "\n\n"
</code></pre>

<p>This can be neatened up using f-strings:</p>

<pre><code>f"\n\n{time.ctime()}\n\n{traceback.format_exc()}\n\n"
</code></pre>

<p>Or maybe using <code>join</code> if you want to reduce the duplicated double-newlines:</p>

<pre><code>"\n\n".join([time.ctime(), traceback.format_exc()])
</code></pre>

<p>And then similarly in <code>it</code>:</p>

<pre><code>"\033[%sm" % emphasis[style]) + str(text) + "\033[0m"
</code></pre>

<p>This can be:</p>

<pre><code>f"\033[{emphasis[style]}m{text}\033[0m"
</code></pre>

<p>f-strings are often preferable over <code>format</code> or <code>%</code>.</p>

<hr>

<p>Instead of:</p>

<pre><code>for user, _ in logins.items():
</code></pre>

<p>You can just do:</p>

<pre><code>for user in logins.keys():
</code></pre>

<hr>

<pre><code>chars = "0123456789"
chars += "abcdefghijklmnopqrstuvwxyz"
chars += "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
chars += "?%^*+~-=[]{}:,.#_"
</code></pre>

<p>This whole bit could be neatened up using <code>string.printable</code>, or another member from <a href="https://docs.python.org/3.8/library/string.html" rel="noreferrer"><code>string</code></a>. That module contains strings to be used for purposes like this:</p>

<pre><code>import string

&gt;&gt;&gt; string.printable
'0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!"#$%&amp;\'()*+,-./:;&lt;=&gt;?@[\\]^_`{|}~ \t\n\r\x0b\x0c'
</code></pre>

<p>If there's stuff in there you don't want, you could either filter it, or just use a more narrow set of constants from that module:</p>

<pre><code>&gt;&gt;&gt; string.ascii_letters + string.digits + "?%^*+~-=[]{}:,.#_"
'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789?%^*+~-=[]{}:,.#_'
</code></pre>

<p>Either way, that's far less verbose</p>
    </div>