<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Header files</h1>

<p>It's strange that this code uses the C header <code>&lt;string.h&gt;</code> but the C++ versions of <code>&lt;cmath&gt;</code>, <code>&lt;ctime&gt;</code> and <code>&lt;cstdlib&gt;</code>.  I recommend sticking to the C++ headers except on the rare occasions that you need to compile the same code with a C compiler.  In this case, I don't see anything using <code>&lt;cstring&gt;</code>, so we can probably just drop that, along with <code>&lt;iomanip&gt;</code>, <code>&lt;iostream&gt;</code> and <code>&lt;cmath&gt;</code>.  And we need to add some missing includes: <code>&lt;cstdint&gt;</code> and <code>&lt;cstdio&gt;</code>.</p>

<h1>Avoid <code>using namespace std</code></h1>

<p>The standard namespace is not one that's designed for wholesale import like this.  Unexpected name collisions when you add another header or move to a newer C++ could even cause changes to the meaning of your program.</p>

<h1>Use the appropriate signature for <code>main()</code></h1>

<p>Since we're ignoring the command-line arguments, we can use a <code>main()</code> that takes no parameters:</p>

<pre><code>int main()
</code></pre>

<h1>Remove pointless temporary string</h1>

<p>Instead of formatting into <code>tmpStr</code> and immediately printing its contents to standard output, we can eliminate that variable by formatting directly to standard output (using the same format string).  For example, instead of:</p>

<blockquote>
<pre><code>std::sprintf(tmpStr, "+-------+-------+");
std::printf("%s\n", tmpStr);
tmpStr[0]='\0';

std::sprintf(tmpStr, "| TABLE | STATE |");
std::printf("%s\n", tmpStr);
tmpStr[0]='\0';

std::sprintf(tmpStr, "+-------+-------+");
std::printf("%s\n", tmpStr);
</code></pre>
</blockquote>

<p>we could simply write:</p>

<pre><code>std::puts("+-------+-------+\n"
          "| TABLE | STATE |\n"
          "+-------+-------+");
</code></pre>

<p>And instead of</p>

<blockquote>
<pre><code>    tmpStr[0]='\0';
    if ( std::find(m_availTableNums.begin(), m_availTableNums.end(), tableNum) != m_availTableNums.end() )
    {
        std::sprintf(tmpStr, "|  %02d   | EMPTY |", tableNum );
    } else {
        std::sprintf(tmpStr, "|  %02d   | USED  |", tableNum );
    }

    printf("%s\n", tmpStr);
</code></pre>
</blockquote>

<p>we would have:</p>

<pre><code>    if (std::find(m_availTableNums.begin(), m_availTableNums.end(), tableNum) != m_availTableNums.end()) {
        std::printf("|  %02d   | EMPTY |\n", tableNum);
    } else {
        std::printf("|  %02d   | USED  |\n", tableNum);
    }
</code></pre>

<h1>Reduce duplication</h1>

<p>Most of these statements are common:</p>

<blockquote>
<pre><code>        std::printf("|  %02d   | EMPTY |\n", tableNum);
    } else {
        std::printf("|  %02d   | USED  |\n", tableNum);
    }
</code></pre>
</blockquote>

<p>The only bit that's different is the <code>EMPTY</code> or <code>USED</code> string.  So let's decide that first:</p>

<pre><code>    const char *status =
        std::find(m_availTableNums.begin(), m_availTableNums.end(), tableNum) != m_availTableNums.end()
        ? "EMPTY" : "USED";
    std::printf("|  %02d   | %-5s |\n", tableNum, status);
</code></pre>

<h1>Prefer <code>nullptr</code> value to <code>NULL</code> macro</h1>

<p>The C++ null pointer has strong type, whereas <code>NULL</code> or <code>0</code> can be interpreted as integer.</p>

<h1>Reduce scope of variables</h1>

<p><code>randomCount</code> doesn't need to be valid outside the first <code>for</code> loop, and we don't need to use the same <code>tableNum</code> for both loops.  Also, we could follow convention and use a short name for a short-lived loop index; <code>i</code> is the usual choice:</p>

<pre><code>for (std::uint8_t i = 0;  i &lt; 20;  ++i) {
    std::uint8_t randomCount = rand() % 80;
    m_availTableNums.push_back(randomCount);
}
</code></pre>



<pre><code>for (std::uint8_t i = 0;  i &lt; 80;  ++i) {
</code></pre>

<h1>Avoid magic numbers</h1>

<p>What's special about <code>80</code>?  Could we need a different range?  Let's give the constant a name, and then we can be sure that the loop matches this range:</p>

<pre><code>constexpr std::uint8_t LIMIT = 80;
...
    std::uint8_t randomCount = rand() % LIMIT;
...
for (std::uint8_t i = 0;  i &lt; LIMIT;  ++i) {
</code></pre>

<h1>A departure from specification</h1>

<p>The description says</p>

<blockquote>
  <p>I'm putting 20 random table numbers into the above vector such that, all the remaining 60 would be empty.</p>
</blockquote>

<p>That's not exactly what's happening, as we're sampling <em>with replacement</em> from the values 0..79.  There's nothing to prevent duplicates being added (it's actually quite unlikely that there will be exactly 60 empty values).</p>

<h1>Reduce the algorithmic complexity</h1>

<p>Each time through the loop, we use <code>std::find()</code> to see whether we have any matching elements.  This is a <em>linear</em> search, so it examines elements in turn until it finds a match.  Since it only finds a match one-quarter of the time, the other three-quarters will examine <em>every element in the list</em>, and the time it takes will be proportional to the list length - we say it scales as O(<em>n</em>), where <em>n</em> is the size of the vector.  The complete loop therefore scales as O(<em>mn</em>), where <em>m</em> is the value of <code>LIMIT</code>.</p>

<p>We can reduce the complexity to O(<em>m</em> + <em>n</em>) if we use some extra storage to store the values in a way that makes them easy to test.  For example, we could populate a vector that's indexed by the values from <code>m_availTableNums</code>:</p>

<pre><code>auto by_val = std::vector&lt;bool&gt;(LIMIT, false);
for (auto value: m_availTableNums)
    by_val[value] = true;

for (std::uint8_t i = 0;  i &lt; LIMIT;  ++i) {
    const char *status = by_val[i] ? "EMPTY" : "USED";
    std::printf("|  %02d   | %-5s |\n", i, status);
}
</code></pre>

<p>If the range were much larger, we might use an (unordered) set instead of <code>vector&lt;bool&gt;</code>.  We might also choose <code>vector&lt;char&gt;</code> instead of <code>vector&lt;bool&gt;</code> for better speed at a cost of more space.</p>

<hr>

<h1>Simplified code</h1>

<p>Here's my version, keeping to the spirit of the original (creating a list of indices, rather than changing to storing in the form we want to use them):</p>

<pre><code>#include &lt;algorithm&gt;
#include &lt;cstdint&gt;
#include &lt;cstdio&gt;
#include &lt;cstdlib&gt;
#include &lt;ctime&gt;
#include &lt;vector&gt;

int main()
{
    constexpr std::uint8_t LIMIT = 80;
    std::vector&lt;std::uint8_t&gt; m_availTableNums;

    std::srand(std::time(nullptr));

    for (std::uint8_t i = 0;  i &lt; 20;  ++i) {
        std::uint8_t randomCount = rand() % LIMIT;
        m_availTableNums.push_back(randomCount);
    }

    std::puts("+-------+-------+\n"
              "| TABLE | STATE |\n"
              "+-------+-------+");

    auto by_val = std::vector&lt;bool&gt;(LIMIT, false);
    for (auto value: m_availTableNums)
        by_val[value] = true;

    for (std::uint8_t i = 0;  i &lt; LIMIT;  ++i) {
        const char *status = by_val[i] ? "EMPTY" : "USED";
        std::printf("|  %02d   | %-5s |\n", i, status);
    }

    std::puts("+-------+-------+");
}
</code></pre>
    </div>