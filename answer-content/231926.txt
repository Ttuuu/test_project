<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Welcome to Code Review!</p>

<h1>Bugs</h1>

<p>For every node you insert, <code>next</code> is null.</p>

<h1>Encapsulation</h1>

<p>Your code is written almost exclusively using C features.  First things first, instead of using a single global variable, use a class to encapsulate the data structure.</p>

<pre><code>class Stack {
public:
    Stack() = default;
    Stack(const Stack&amp;) = delete;
    Stack&amp; operator=(const Stack&amp;) = delete;
    ~Stack();

    void push(int data);
    void pop();
    void display() const;
    bool empty() const { return top == nullptr; }
private:
    struct Node {
        int data;
        Node* prev;
        Node* next;
    };
    Node* top = nullptr;
};
</code></pre>

<p>The way the function works is exactly the same.  A destructor should be provided to systematically handle memory deallocation:</p>

<pre><code>Stack::~Stack()
{
    while (!empty()) {
        pop();
    }
}
</code></pre>

<p>Now <code>Stack</code> can be used like a normal C++ container:</p>

<pre><code>int main()
{
    Stack stack1;
    stack1.push(3);
    stack1.push(1);
    stack1.push(4);
    stack1.display();
    stack1.pop();
    stack1.display();

    Stack stack2;
    // stack2 is a stack independent from stack1
} // the existing nodes are automatically freed when the main function returns
</code></pre>

<h1>Miscellaneous</h1>

<p><code>#include "..."</code> is for your own headers.  For standard headers, use <code>#include &lt;iostream&gt;</code>.</p>

<p><code>using namespace std;</code> at global level is considered bad practice and should be avoided because it defeats the purpose of namespaces and introduce name clashes.  You will have trouble using identifiers as common as <code>size</code> or <code>count</code>.  See <a href="https://stackoverflow.com/q/1452721">Why is <code>using namespace std;</code> considered bad practice?</a></p>

<p>A class can be referred to directly with its name.  You don't need to add <code>struct</code>.  So instead of <code>struct Node*</code>, just say <code>Node*</code>.</p>

<p>Instead of <code>NULL</code>, use <code>nullptr</code> for null pointer constants.</p>

<p>It's more common to write functions in this way:</p>

<pre><code>bool isempty()
{
    // ...
}
</code></pre>

<p>Instead of declaring a variable uninitialized and then assigning to it immediately, use initialization.</p>

<p>The <code>push</code> and <code>pop</code> functions are way too convoluted.  Remember you are implementing a stack, not a complete doubly linked list.  Aggregate initialization with <code>new</code> can be used to simplify the code:</p>

<pre><code>void Stack::push(int value)
{
    top = new Node{value, top, nullptr};
    if (auto old = top-&gt;prev) {
        old-&gt;next = top;
    }
}

void Stack::pop()
{
    if (empty()) {
        throw Stack_underflow{};
    }
    delete std::exchange(top, top-&gt;prev);
}
</code></pre>

<p>Note that heap overflow is not something you need to worry about because <code>new</code> already throws an appropriate exception on allocation failure.  Also, do not free memory allocated by <code>new</code> with <code>free</code>.  This is undefined behavior.  Use <code>new</code> with <code>delete</code> instead.</p>

<p>When an error happens, throw an exception instead of printing a message and then exiting or even continuing execution.  There is not always an open <code>stdout</code> file, and if it exists, that's now how everyone wants error to be handled.  Throwing an exception allows the user to handle it in the convenient way.</p>

<p>The <code>while</code> loop in the display function should have been simplified with a <code>for</code> loop:</p>

<pre><code>for (Node* itr = top; itr; itr = itr-&gt;prev) {
    std::cout &lt;&lt; itr-&gt;data &lt;&lt; '\n';
}
</code></pre>

<p>Note that <code>std::endl</code> should be avoided when you don't need the flushing semantics.  Unnecessary flushing can cause performance degradation.  See <a href="https://stackoverflow.com/q/213907"><code>std::endl</code> vs <code>\n</code></a>.</p>

<p><code>return 0;</code> can be omitted in a <code>main</code> function.</p>

<h1>Refined version</h1>

<p>Putting everything together:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;stdexcept&gt;
#include &lt;utility&gt;

struct Stack_underflow :std::exception {};

class Stack {
public:
    Stack() = default;
    Stack(const Stack&amp;) = delete;
    Stack&amp; operator=(const Stack&amp;) = delete;
    ~Stack();

    void push(int value);
    void pop();
    void display() const;
    bool empty() const { return top == nullptr; }
private:
    struct Node {
        int data;
        Node* prev;
        Node* next;
    };
    Node* top = nullptr;
};

Stack::~Stack()
{
    while (!empty()) {
        pop();
    }
}

void Stack::push(int value)
{
    top = new Node{value, top, nullptr};
    if (auto old = top-&gt;prev) {
        old-&gt;next = top;
    }
}

void Stack::pop()
{
    if (empty()) {
        throw Stack_underflow{};
    }
    delete std::exchange(top, top-&gt;prev);
}

void Stack::display() const
{
    for (auto it = top; it; it = it-&gt;prev) {
        std::cout &lt;&lt; it-&gt;data &lt;&lt; ' ';
    }
    std::cout &lt;&lt; '\n';
}

int main()
{
    Stack stack;
    stack.push(1);
    stack.push(2);
    stack.push(3);
    stack.push(4);
    stack.push(5);

    stack.pop();
    stack.display();
    stack.pop();
    stack.display();
}
</code></pre>

<p>Output:</p>

<pre><code>4 3 2 1 
3 2 1 
</code></pre>

<p>(<a href="https://wandbox.org/permlink/5xgI53mz5YziXoCK" rel="nofollow noreferrer">live demo</a>)</p>
    </div>