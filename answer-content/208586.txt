<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>takeScreenshot()</strong>  </p>

<ul>
<li>Based on the <a href="https://msdn.microsoft.com/en-us/library/ms229002.aspx" rel="noreferrer">.NET Naming Guidelines</a> methods should be named using <code>PascalCase</code> casing <code>takeScreenshot()</code> =&gt; <code>TakeScreenshot()</code>  </li>
<li>You are enclosing the usage of the <code>Bitmap</code> inside a <code>using</code> statement which is the way to go but calling <code>Dispose()</code> on that <code>Bitmap</code> is superfluous because that is what a <code>using</code> statement is doing.  </li>
<li><p>If you have two <code>using</code> statements without any code between you can stack them which saves one level of indentation like so (already removed the <code>Dispose()</code>)</p>

<pre><code>using (Bitmap bitmap = new Bitmap(bounds.Width, bounds.Height))
using (Graphics g = Graphics.FromImage(bitmap))
{
    //Add screen to bitmap:
    g.CopyFromScreen(new Point(bounds.Left, bounds.Top), Point.Empty, bounds.Size);

    //Create and save screenshot:
    string name = path + "//screenshot-" + fileCount + ".jpeg";
    bitmap.Save(name, ImageFormat.Jpeg);
    inputImageSequence.Add(name);
    fileCount++;
}  
</code></pre></li>
<li>Comments should explain <strong>why</strong> something is done in the way it is done. Let the code itself tell <strong>what</strong> is done by using meaningful named things. In this way your comments won't lie like e.g <code>//Create and save screenshot:</code> which isn't what that code does. Saving yes but no creating of a screenshot is taking place.  </li>
</ul>

<hr>

<p><strong>Creating the video</strong>  </p>

<ul>
<li>Try to be consistent. Here you create a <code>Bitmap</code> and call <code>Dispose()</code> instead of using a <code>using</code> statement. In addition, sometime you use <code>var</code> and sometimes you use the concrete type although the type is seen at first glance.  </li>
<li>If you are using the <code>as</code> operator you should always add a <code>null</code> check for that object because an <code>as</code> operator won't throw an exception but the resulting object may be <code>null</code> which will trigger an exception somewhere else.  </li>
</ul>

<p>Implementing these points will look like this:  </p>

<pre><code>Rectangle bounds = Screen.FromControl(this).Bounds;
var width = bounds.Width;
var height = bounds.Height;

var framRate = 5;

using (var vFWriter = new VideoFileWriter())
{
    vFWriter.Open(outputPath+"//video.avi", width, height, framRate, VideoCodec.Raw);

    foreach (var imageLocation in inputImageSequence)
    {
        using(var imageFrame = (Bitmap)System.Drawing.Image.FromFile(imageLocation))
        {
            vFWriter.WriteVideoFrame(imageFrame);
        }
    }
    vFWriter.Close();
}
DeletePath(path);
</code></pre>

<hr>

<p>My guess about the big file size is that you are using the <code>VideoCodec.Raw</code>. Try to change it to some other codec and see if this helps.  </p>
    </div>