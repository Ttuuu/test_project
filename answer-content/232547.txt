<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong><em>Ways of improving/optimizing:</em></strong></p>

<ul>
<li><p><strong><code>draw_board</code></strong> function.</p>

<ul>
<li><p>prefer <code>enumerate(board)</code> over redundant <code>list(range(len(board)))</code></p></li>
<li><p>all conditional branches within <code>for</code> loop have the same common expression to append <code>'  ' + str(board[number]) + '  '</code>. Thus, it can be moved up to reduce conditional branches</p></li>
<li>prefer flexible <code>f-string</code> formatting over awkward string concatenation combined with casting to <code>str</code>
<br><br></li>
</ul>

<p>Now the optimized <code>draw_board</code> function would look as:</p>

<pre><code>def draw_board(board):
    display_board = ''

    for i, v in enumerate(board):
        display_board += f'  {v}  '
        if (i + 1) % 3 == 0:
            if i &lt; 6:
                display_board += '\n—————————————————\n'
        else:
            display_board += '|'

    return display_board
</code></pre></li>
<li><p><strong><code>check_win</code></strong> function introduces many repetitive checks <code>all(item == letter for item in board[...])</code> with the same returned value.<br>
A more flexible way is to create an additional function to check <em>crossed</em> row:</p>

<pre><code>def row_crossed(letter, row):
    return all(item == letter for item in row)
</code></pre>

<p>Then, <code>check_win</code> would call <code>any</code> function on <em>generator</em> expression that yields all the needed sub-checks:</p>

<pre><code>def check_win(board, letter):
    return any((row_crossed(letter, board[:3]), row_crossed(letter, board[3:6]),
            row_crossed(letter, board[6:9]), row_crossed(letter, board[::3]),
            row_crossed(letter, board[1::3]), row_crossed(letter, board[2::3]),
            row_crossed(letter, board[::4]), row_crossed(letter, board[2:8:2])))
</code></pre></li>
<li><p><strong><code>square</code></strong> dictionary. To reduce quotes mess it can be composed in concise way with <code>zip</code> and <code>range</code> functions:</p>

<pre><code>squares = dict(zip(('nw', 'n', 'ne', 'w', 'c', 'e', 'sw', 's', 'se'), range(9)))
</code></pre></li>
<li><p><code>tic_tac_toe_board</code> easily replaced with <strong><code>tic_tac_toe_board = ['.'] * 9</code></strong> </p></li>
<li><p><code>square.lower()</code> repeats <strong>4</strong> times within main <code>while</code> loop. <br>Instead, extract that expression into a variable at once and refer it:</p>

<pre><code>square = input('Exactly type in the following available directions: {}  &gt; '.format(', '.join(directions)))
square = square.lower()
</code></pre></li>
<li><p>the whole condition:</p>

<pre><code>if x_turn:
    tic_tac_toe_board[squares[square.lower()]] = 'X'
    x_turn = False
else:
    tic_tac_toe_board[squares[square.lower()]] = 'O'
    x_turn = True
</code></pre>

<p>would be simplified as it relies on explicit <em>negation</em> of <strong><code>x_turn</code></strong> flag.<br>Getting  2 lines against 6:</p>

<pre><code>tic_tac_toe_board[squares[square]] = 'X' if x_turn else 'O'
x_turn = not x_turn
</code></pre></li>
</ul>
    </div>