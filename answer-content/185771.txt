<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is not much a wrapper. Rather call it a wannabe Query Builder.</p>

<p>I don't know the reason, but many people are constantly trying to write something like this. And I don't understand why.</p>

<p>Okay, for the DML queries it makes sense - it always makes a cool feeling when you automate a routine task using a template. So, for the insert query it asks for the method insert(). But select?</p>

<p>Do you really want to write </p>

<pre><code>$args = [
    'table' =&gt; 't1',
    'data' =&gt; [
        'f1'
    ],
    'where' =&gt; [
        'f1' =&gt; 'hi',
    ]
    ];

$fetch = $db-&gt;select($args);
</code></pre>

<p>instead of just    </p>

<pre><code>$fetch = $db-&gt;select("SELECT f1 FROM t1 WHERE h1='hi'");
</code></pre>

<p>really really? No kidding? But why? Do you think it looks cool? Or make it you write less code? Or make another programmer to understand it better?</p>

<p>Do you really want to make that neat and universal SQL split into array with gibberish keys? WTF is "data"? Okay, I am working on a project with you. Why should I puzzle myself with such questions? Why can't I use the familiar SQL that reads as plain English?</p>

<p>And where are JOINs? And what will be your $settings array when you add them?</p>

<p>Come on, you've gone too far. I understand the logic that led you here but it's time to turn back. Leave SELECT queries alone and let them be written as plain SQL with parameters. </p>

<p>Besides, such a class should be ten times shorter. In the recent years PHP has been improved a lot, making most of tricks you are using obsoleted. Not to mention such rather silly code blocks like </p>

<pre><code>        if ($this-&gt;isAssoc($data)) {
            foreach ($data as $key =&gt; $value) {
                $this-&gt;bindValues($value);
            }
        } else {
            foreach ($data as $value) {
                $this-&gt;bindValues($value);
            }
        }
</code></pre>

<p>here, the condition is useless as both loops are doing literally the same.</p>

<blockquote>
  <p>This is not currently used in production.</p>
</blockquote>

<p>This is actually the main problem. <em>You are writing a code to handle some imaginary queries.</em> That's the worst idea a developer could have. One should start from writing raw API calls with raw SQL, get the idea what queries are going to be used, and only then start to think about automation. </p>

<p>Here is the <a href="https://codereview.stackexchange.com/questions/182528/mysql-flexible-insert-record-with-bind-param-or-bind-value/182536#182536">similar review I made a while ago</a>. Please check it out, it explains a lot of pitfalls in your code.</p>

<p>Besides, you may refer to my article on the <a href="https://phpdelusions.net/pdo/common_mistakes" rel="noreferrer">common database wrapper mistakes</a>, as your code suffer from most of them, namely:</p>

<ul>
<li>Flawed error reporting.</li>
<li>Type-hinted binding.</li>
<li>Select function</li>
<li>SQL injection in Insert and Update methods</li>
<li>Statefulness (what if you would need to run a nested query)</li>
<li>Protected mysqli instance </li>
</ul>

<p>In a nutshell, a good mysqli wrapper should be just a handful of lines (taken from the linked above answer):</p>

<pre><code>Class DB
{
    public function __construct($host, $user, $pass, $db, $charset)
    {
        mysqli_report(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT);
        $this-&gt;mysqli = new mysqli($host, $user, $pass, $db);
        $this-&gt;mysqli-&gt;set_charset($charset);
    }

    public function query($sql, $params, $types = "")
    {
        $types = $types ?: str_repeat("s", count($params));
        $stmt = $this-&gt;mysqli-&gt;prepare($sql);
        $stmt-&gt;bind_param($types, ...$params);
        $stmt-&gt;execute();
        return $stmt;
    }
} 
</code></pre>

<p>while anything else should be added after strong consideration only.</p>
    </div>