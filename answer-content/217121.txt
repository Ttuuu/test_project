<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>    public static List&lt;Item&gt; MoveIndex(this List&lt;Item&gt; myItems, int from, int to)
</code></pre>
</blockquote>

<p>Code to the interface, not the implementation: you <em>might</em> be able to rewrite this as</p>

<pre><code>    public static IList&lt;Item&gt; MoveIndex(this IList&lt;Item&gt; myItems, int from, int to)
</code></pre>

<p>and if not you can almost certainly rewrite it as</p>

<pre><code>    public static TList MoveIndex&lt;TList&gt;(this TList myItems, int from, int to)
        where TList : IList&lt;Item&gt;
</code></pre>

<hr>

<blockquote>
<pre><code>        for (int i = 0; i &lt; myItems.Count; i++)
        {
            myItems[i].Key = i.ToString("D2");
        }
</code></pre>
</blockquote>

<p>For a start, this looks too tightly bound to me. From the description given I would expect <code>MoveIndex</code> to work with the existing keys, whatever they are.</p>

<p>But given the strong assumptions made here, I wonder whether there's a better solution based on eliminating the <code>List&lt;Item&gt;</code> entirely. Can you maintain an <code>IList&lt;string&gt;</code> which contains the labels and then generate the items lazily with <a href="https://docs.microsoft.com/en-us/dotnet/api/system.linq.enumerable.select?view=netframework-4.7.2#System_Linq_Enumerable_Select__2_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Int32___1__" rel="nofollow noreferrer"><code>IEnumerable&lt;string&gt;.Select(Func&lt;string, int, Item&gt;)</code></a>?</p>
    </div>