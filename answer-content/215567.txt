<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It's not only the main function that you should try to improve upon. Rather, when you build your supporting functions in a nice way, a simplified main function follows naturally.</p>

<p>First, as general comments, your program suffers from a bad separation of logic. Your functions are doing too much: they do processing, print output to the user, and return some value. The same problem is echoed in the main: input parsing is tightly knit together with printing and processing.</p>

<ul>
<li><p>Don't include <code>&lt;bits/stdc++.h&gt;</code>, it's not portable. Also, see <a href="https://stackoverflow.com/q/31816095/551375">here for more on why not do it</a>.</p></li>
<li><p>Your program crashes on multiple inputs due to out-of-indexing issues, so avoid C-arrays like <code>int numbers[33]</code>. Also, avoid magic numbers like 33 which makes the reader go "Huh, what 33?".</p></li>
<li><p>As explained in the other review(s), declare variables as late as possible because you write C++ and not C.</p></li>
<li><p>Standard functions and data structures will simplify your code massively. We can logically think about the following: read the input, split it into sensible parts, and process each part. That's it!</p></li>
</ul>

<p>So in full, we could write your program also as follows:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;vector&gt;
#include &lt;algorithm&gt;
#include &lt;bitset&gt;
#include &lt;iterator&gt;

constexpr unsigned long MAX_BITSIZE = 32;

int bits(unsigned long d)
{
    if (d &gt; 65535) {
        return 32;
    }
    else if (d &gt; 255) {
        return 16;
    }
    else {
        return 8;
    }
}

// Return a bit string corresponding to the input.
std::string to_binary(unsigned long decimal)
{
    std::bitset&lt;MAX_BITSIZE&gt; bs(decimal);
    return bs.to_string().substr(MAX_BITSIZE - bits(decimal));
}

// Split the input string into parts, 
// e.g., "abc123e6g" is split into ("abc", "123", "e", "6", "g").
std::vector&lt;std::string&gt; get_parts(const std::string&amp; str)
{
    std::vector&lt;std::string&gt; parts;

    for (auto first = str.cbegin(); first != str.cend(); )
    {
        auto change = std::adjacent_find(first, str.cend(),
            [](char a, char b) { return isdigit(a) != isdigit(b); });

        if (change != str.cend())
        {
            ++change;
        }

        parts.emplace_back(std::string(first, change));

        first = change;
    }

    return parts;
}

int main()
{
    // Reading input could be done a function.
    // We also omit all checks, and just assume it is valid.

    std::string input;
    std::cout &lt;&lt; "------------ Input -----------\n";
    std::cin &gt;&gt; input;

    std::cout &lt;&lt; "Input: " &lt;&lt; input &lt;&lt; "\n";
    std::cout &lt;&lt; "Length: " &lt;&lt; input.length() &lt;&lt; "\n";

    const auto cont = get_parts(input);

    std::vector&lt;std::string&gt; binary;

    for (const auto&amp; e : cont)
    {
        // Processing an integer
        if (isdigit(e.front()))
        {
            const std::string b = to_binary(stoi(e));

            std::cout &lt;&lt; "------------ " &lt;&lt; e &lt;&lt; " ------------\n";
            std::cout &lt;&lt; "Bits..................... " &lt;&lt; bits(stoi(e)) &lt;&lt; "\n";
            std::cout &lt;&lt; "Binary value............. " &lt;&lt; to_binary(stoi(e)) &lt;&lt; "\n";

            binary.push_back(b);
        }
        // Processing individual characters
        else
        {
            for (const auto&amp; ch : e)
            {
                const std::string b = to_binary(ch);

                std::cout &lt;&lt; "------------ " &lt;&lt; ch &lt;&lt; " ------------\n";
                std::cout &lt;&lt; "ASCII.................... " &lt;&lt; int(ch) &lt;&lt; "\n";
                std::cout &lt;&lt; "Bits..................... " &lt;&lt; bits(ch) &lt;&lt; "\n";
                std::cout &lt;&lt; "Binary value............. " &lt;&lt; to_binary(ch) &lt;&lt; "\n";

                binary.push_back(b);
            }
        }
    }

    std::cout &lt;&lt; "\n------- Binary value of " &lt;&lt; input &lt;&lt; " -------\n";
    std::copy(binary.cbegin(), binary.cend(), std::ostream_iterator&lt;std::string&gt;(std::cout, " "));
}
</code></pre>

<p>A few comments about the above program:</p>

<ul>
<li><p>Luckily, <code>std::bitset</code> has methods for printing a binary string that we can use to massively simplify your "to-binary" conversion function. Notice that this function does <em>no</em> printing; it's not its job. Remember: <em>one function, one responsibility</em>. Whoever uses this function decides when, how, and what to print (if anything).</p></li>
<li><p>The function <code>get_parts</code> takes care of all that messy processing of your main function (which is buggy - but don't feel bad, it's hard to get it right when you go so low level). The magic is taken care of <code>std::adjacent_find</code> which is used by a suitable lambda function that checks if the two adjacent indices contain characters of "different type" (i.e., a digit and a non-digit). If we wanted to, we could also modify this slightly to further split "abc" to "a", "b", and "c".</p></li>
<li><p>The main function is quite pretty now (and very readable compared to your original): just get the parts and process each. Printing could be further divided into more functions.</p></li>
</ul>
    </div>