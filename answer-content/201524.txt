<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here's what I think is the main drawback of your design.  You can think of a tree as being either:</p>

<ol>
<li>An (empty) leaf</li>
<li>A node containing a value and having left and right branches which are themselves trees</li>
</ol>

<p>It would be nice if these two possibilities were clearly modelled in your code.  However, you've used two ways of representing a leaf, either as <code>None</code> (e.g., when <code>node.right == None</code>, that means that <code>node</code> has a leaf on its right branch) or as a node with <strong>value</strong> <code>None</code> (e.g., when you create a new, empty tree, it's just a leaf, but you represent it as a <code>Node</code> with <code>value == None</code>).</p>

<p>I know you thought about this issue already, since you have a <code>#self.root = None</code> line commented out in your source.</p>

<p>As a result, throughout your code, you've got a lot of mostly redundant checks like:</p>

<pre><code>if node is None or node.value is None:
    ...
</code></pre>

<p>where the <code>node.value is None</code> part is really only an issue at the root (since the tree should otherwise have no nodes with value <code>None</code>, unless you've <code>put</code> a <code>None</code> in your tree).</p>

<p>It also leads to some weird behavior:</p>

<pre><code>&gt; t = BinarySearchTree()
&gt; t.put(None)
&gt; t.put(None)
&gt; t.put(3)
&gt; t.put(None)
TypeError: unorderable types: NoneType() &lt; int()
&gt;
</code></pre>

<p>You could argue that the type error makes sense, but why wasn't it thrown when we put <code>3</code> in the tree?</p>

<p>Anyway, a side effect of this design choice is that you've had to move all of the logic into the <code>BinarySearchTree</code> object, and the <code>Node</code> object is just a method-less data container.  That's because, given a "node", you never know whether it's (1) a <code>None</code>; (2) a <code>Node</code> that contains a valid value or; (3) a <code>Node</code> that contains a <code>None</code>.  You need to handle cases (1) and (3) with similar logic, so it's pointless to put the logic for case (3) in the <code>Node</code> (because you need to do the same thing in case (1) where you don't <strong>have</strong> a <code>Node</code>).  Therefore, logic for cases (1) and (3) has to go in the <code>BinarySearchTree</code>, and when you've gotten that far, you might as well stick logic for case (2) in there, too.</p>

<p>Try the following exercise.  Create two objects, one to represent <code>Node</code>s that contain values, and one to represent <code>Leaf</code>s that don't:</p>

<pre><code>class Leaf:
    def __init__(self):
        pass

class Node:
    def __init__(self, value):
        self.value = value
        self.left = Leaf()
        self.right = Leaf()
</code></pre>

<p>Now, create a <code>Tree</code> object that dispatches to its <code>self.root</code> -- this root will initially be a <code>Leaf</code> when the tree is empty, but will change to a <code>Node</code> when we put something in the tree.</p>

<pre><code>class Tree:
    def __init__(self):
        self.root = Leaf()

    def put(self, value):
        if value is not None:
            self.root = self.root.put(value)

    def contains(self, value):
        return self.root.contains(value)

    def in_order_traversal(self):
        return self.root.in_order_traversal()
</code></pre>

<p>Now, see if you can implement your tree by <em>only</em> adding <code>put</code>, <code>contains</code>, and <code>in_order_traversal</code> methods to the <code>Leaf</code> and <code>Node</code> objects, and see how that design works.</p>

<p>Note that you should maintain two invariants on <code>Node</code>s:</p>

<ol>
<li><code>node.value</code> is always a valid value (never a <code>None</code>)</li>
<li><code>node.left</code> and <code>node.right</code> are always either <code>Leaf</code>s or <code>Node</code>s (never a <code>None</code>)</li>
</ol>

<p><strong>SPOILERS...</strong></p>

<p>Here was my solution.  It passes your test, and I think it represents a cleaner design.  Instead of differentiating between leafs and nodes using conditional statements in the <code>Tree</code> object, that decision is made by dispatching to either a <code>Node</code> or <code>Leaf</code> class.  The downside is that it splits up the logic for a particular operation into two functions in different classes (so to "understand" <code>put</code>, you need to look at the implementations in both the <code>Leaf</code> and <code>Node</code> classes), but that's a pretty typically issue in object-oriented designs, so people are used to it.</p>

<pre><code>class Leaf:
    def __init__(self):
        pass

    def put(self, value):
        return Node(value)

    def contains(self, value):
        return False

    def in_order_traversal(self):
        return []

class Node:
    def __init__(self, value):
        self.value = value
        self.left = Leaf()
        self.right = Leaf()

    def put(self, value):
        if value &lt; self.value:
            self.left = self.left.put(value)
        else:
            self.right = self.right.put(value)
        return self

    def contains(self, value):
        if value &lt; self.value:
            return self.left.contains(value)
        elif value &gt; self.value:
            return self.right.contains(value)
        else:
            return True

    def in_order_traversal(self):
        return self.left.in_order_traversal() \
            + [self.value] + self.right.in_order_traversal()

class Tree:
    def __init__(self):
        self.root = Leaf()

    def put(self, value):
        if value is not None:
            self.root = self.root.put(value)

    def contains(self, value):
        return self.root.contains(value)

    def in_order_traversal(self):
        return self.root.in_order_traversal()
</code></pre>
    </div>