<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>An interesting learning experience.</p>

<p>Well done for doing the deletion in a backwards loop. Also, well done for declaring all variables.</p>

<p>As you have implied, there is room for some improvement. What I suggest below may not increase speed, but should at least help with maintainability and readability.</p>

<h2>Three different ways of accessing a sheet</h2>

<p>You are using three different ways of accessing a sheet: index, <code>ActiveSheet</code> and name. Each has their uses and are valid, but mixing methods in a single routine makes it a little more confusing to read.</p>

<p>You haven't identified how the routine is called, and this makes a difference on the applicability of <code>ActiveSheet</code>. How can you guarantee that the active sheet is the one that you want to clean up?</p>

<p>You also reference your <code>FirstRow</code> and <code>LastRow</code> from a fixed sheet, not your <code>ActiveSheet</code> - how can you be sure that they are correct?</p>

<h2>Speed up routine</h2>

<p>You set your calculation mode and attempted to turn off screen updating. But you don't turn them back again at the end of the routine. </p>

<p>Also consider setting <code>.EnableEvents = False</code> so that you do not fire events every time you delete a row.</p>

<h2>Tweaks</h2>

<p>Consider using a <code>Select Case</code> to identify a valid row. I have an example in the code below.</p>

<p>Consider creating a <code>Union</code> for each row that you find and want to delete. Then use this union to delete all the rows at once, instead of one at a time.</p>

<p>Put your date value into a variable, rather than accessing the cell each time in the loop. This will save some time and accessing the Excel cells/ranges is relatively expensive.</p>

<h2>Perhaps this code?</h2>

<pre><code>Sub Remove_FutureRenewals()
    Dim Firstrow As Long
    Dim LastRow As Long
    Dim Lrow As Long
    Dim CalcMode As Long
    Dim ViewMode As Long
    Dim SelectedSheet as Worksheet
    Dim BaseDate as String

    Set SelectedSheet = ActiveSheet ' addresses any change to ActiveSheet while routine is running. 
    BaseDate = Format(ThisWorkbook.Worksheets("Date Calc").Cells(5, "A").Value, "YYYYMMDD")

    Firstrow = SelectedSheet.UsedRange.Cells(1).Row 
    LastRow = SelectedSheet.Cells(ThisWorkbook.Worksheets(2).Rows.Count, "A").End(xlUp).Row

    With Application
        CalcMode = .Calculation
        .Calculation = xlCalculationManual
        .ScreenUpdating = False
        .EnableEvents = False
    End With

    With SelectedSheet 
        For Lrow = LastRow To Firstrow Step -1
            Select Case .Cells(Lrow, "E").Value ' always be explicit.
                Case "120", "90", "60" 'etc
                    'If Format(.Cells(Lrow, "E").Offset(0, -1).Value, "YYYYMMDD") &lt;&gt; BaseDate Then
                    If Format(.Cells(Lrow, "D").Value, "YYYYMMDD") &lt;&gt; BaseDate Then
                        .EntireRow.Delete
                    End If ' Better practice to use a full If-The-Endif block rather than a single line
            End Select
        Next Lrow
    End With
    With Application
        .Calculation = CalcMode 
        .ScreenUpdating = True
        .EnableEvents = True
    End With

End Sub
</code></pre>

<p>This code still has a lot of "magic numbers" in it, but should give you some ideas on where to go next.</p>
    </div>