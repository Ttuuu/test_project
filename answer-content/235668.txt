<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Ultimate optimization</h3>
<ul>
<li><p>avoid calling <code>pd.DataFrame.append</code> function within a loop as it'll create a copy of accumulated dataframe on <strong>each</strong> loop iteration. Apply <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.concat.html" rel="noreferrer"><strong><code>pandas.concat</code></strong></a> to concatenate pandas objects at once.</p>
</li>
<li><p>no need to <code>gzip.open</code> as <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_csv.html" rel="noreferrer"><code>pandas.read_csv</code></a> already allows on-the-fly decompression of on-disk data.</p>
<blockquote>
<p><strong>compression</strong> : {‘infer’, ‘gzip’, ‘bz2’, ‘zip’, ‘xz’, None}, default ‘infer’</p>
</blockquote>
</li>
<li><p>avoid hardcoding filepathes with <code>path+"/"+filename</code>. Instead use suitable <a href="https://docs.python.org/3/library/os.path.html#os.path.join" rel="noreferrer"><code>os.path.join</code></a> feature: <strong><code>os.path.join(dirpath, fname)</code></strong></p>
</li>
</ul>
<hr>
<p>The final optimized approach:</p>
<pre><code>import os
import pandas as pd

dirpath = 'path_to_gz_files'   # your directory path
df = pd.concat([pd.read_csv(os.path.join(dirpath, fname))
                for fname in os.listdir(dirpath)], ignore_index=True)
</code></pre>
    </div>