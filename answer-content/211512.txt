<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In my opinion (which also aligns with the <a href="https://redux.js.org/faq/react-redux#should-i-only-connect-my-top-component-or-can-i-connect-multiple-components-in-my-tree" rel="nofollow noreferrer">official Redux FAQ ("Should I only connect my top component, or can I connect multiple components in my tree?")</a>:</p>

<ul>
<li>If <code>MerchantContainer</code> and <code>ReviewContainer</code> use mostly the same state or actions, you could reduce duplication by having a common container for both of those.</li>
<li>If <code>MerchantContainer</code> and <code>ReviewContainer</code> don't have any state in common (which I think is the case here), there's no real value in having <code>Summary</code> as a common container. Quite the oppositive: If you'd make <code>Summary</code> the common container, <code>Summary</code> would have access to state and actions that <code>Summary</code> doesn't care about at all.</li>
</ul>

<p>To summarize: It's perfectly fine to have multiple connected components that might be children of a "dumb" component. If you have a similar setup in a couple of the children, you might consider extracting a common container.</p>
    </div>