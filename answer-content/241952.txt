<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>My first issue is that this function is badly named.</p>

<pre><code>    void is_cousins(TreeNode* root, int to_find, int depth, 
        TreeNode* parent, pair&lt;int, TreeNode*&gt;&amp; pair)
</code></pre>

<p>It has nothing to do with cousins. It is simply finding the depth and parent of a particular value. You should name it appropriateely.</p>

<hr>

<p>I don't like passing output parameters to a function:</p>

<pre><code>    void is_cousins(TreeNode* root, int to_find, int depth, 
        TreeNode* parent, pair&lt;int, TreeNode*&gt;&amp; pair)
</code></pre>

<p>The parameter <code>pair</code> is the output of the function. Why not just return this value. That would be more logical and easier to read.</p>

<hr>

<p>You don't have a truth state on whether the value <code>x</code> or <code>y</code> are found. I suppose you could say that <code>nullptr</code> in <code>pair</code> is a good way to test this. But that will make things complicated down the road when you try and use this function for other things that are not <code>cousin</code> related; so I don't like that idea. You could used a depth of <code>-1</code> to indicate failure that would be better.</p>

<p>Talking of default values:</p>

<p>Your current default result is <code>make_pair(0, nullptr)</code> this means you found the root as the value (even if the root value does not equal left of right). This may work for your current situation out of sheer luck but you are returning a bad value.</p>

<p>i.e. A value that is not found in the tree and the root node will both return the same result.</p>

<hr>

<p>Here is a major ineffeciency.</p>

<pre><code>    is_cousins(root-&gt;left, to_find, depth + 1, root, pair);
    is_cousins(root-&gt;right, to_find, depth + 1, root, pair);
</code></pre>

<p>If you find the value on the left you still search the right subtree. This means you always search the whole tree even if you find the correct node very quickly.</p>

<p>You should check the result of the left search before doing the right search.</p>

<hr>

<p>This is an anti patten</p>

<pre><code>        if (pairx.first == pairy.first &amp;&amp; pairx.second != pairy.second)
            return true;
        return false;
</code></pre>

<p>The pattern:</p>

<pre><code>        if (test) {
            return true;
        }
        return false;

        // Can always be simplified to:

        return test;
</code></pre>

<p>This is a long handed way of writing:</p>

<pre><code>         return pairx.first == pairy.first &amp;&amp; pairx.second != pairy.second;
</code></pre>

<p>If you think that is too long for an expression to use in a reurn, then it is too long an expression for any context. In that case you should put the test in a named function so it is obvious what it is doing.</p>

<pre><code>          return are_cousing_nodes_from_Depth(pairx, pairy);

     using DepthInfo = pair&lt;int, TreeNode*&gt;;
     inline bool are_cousing_nodes_from_Depth(DepthInfo const&amp; lhs, DepthInfo const&amp; rhs)
     {
         return lhs.first  == rhs.first    // Same depth
             &amp;&amp; lhs.second != rhs.second;  // Not siblings
     }
</code></pre>
    </div>