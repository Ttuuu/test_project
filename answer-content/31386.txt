<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I might have missed something but I think I do have an <code>O(n*log(n))</code> solution.</p>

<p>Assuming <code>A</code> is your array of size n and <code>K</code> is the integer.</p>

<ul>
<li>Sort <code>A</code> with a efficient sorting algorithm (mergesort, quicksort, etc) : this is <code>O(n*log(n))</code></li>
<li><p>For each element <code>x</code> in <code>A</code>:</p>

<ul>
<li>Use binary search to find the first occurrence of <code>K-x</code> (if any) : this is <code>O(log(n))</code></li>
<li><p>Use binary search to find the last occurrence if <code>K-x</code> (if any) : this is <code>O(log(n))</code></p>

<p>-&gt; These steps allow you to find the number of instances of <code>K-x</code> in <code>O(log(n))</code></p></li>
</ul>

<p>-&gt;This allows you to count the number of pairs in <code>O(n*log(n))</code>. Each pair has been counted twice. </p></li>
</ul>

<p>Many minimal optimisations could be performed : </p>

<ul>
<li>Handling the identical values of <code>x</code> in one go</li>
<li>Looping could stop when <code>2*x &gt; K</code></li>
<li>Binary search could be limited to a smaller sub-array as we progress through <code>A</code></li>
<li>Etc</li>
</ul>

<p>Please let me know if I missed something.</p>

<p><strong>Edit :</strong> 
Here's a quick attempt with an initial array containing the original array twice to make testing somewhat easier.</p>

<p>I've included different versions, more and more optimised. One could go further but I started to have doubts about the correctness :-)</p>

<p><a href="http://jsfiddle.net/ZYKPZ/" rel="nofollow">Corresponding jsfiddle</a></p>

<pre><code>var a = [1, 8, -3, 0, 1, 3, -2, 4, 5, 1, 8, -3, 0, 1, 3, -2, 4, 5];
var target = 6;
a.sort(function(a, b) {return a - b});

function binarySearch(a, k, lastOcc, min)
{
        var min = (typeof(min)==='undefined') ? 0 : min
        var max = a.length-1
        while (min &lt;= max)
        {
            var range = max-min
            var midf = min + (range / 2)
            var mid = lastOcc ? Math.ceil(midf) : Math.floor(midf)
            var x = a[mid]
            if      (x &lt; k) min = mid+1
            else if (x &gt; k) max = mid-1
            else if (min==max) return mid
            else if (lastOcc) min = mid
            else              max = mid
        }
        return -1
}

// Zeroth solution
var count = 0
for (var i=0; i&lt;a.length; i++)
{
    for (var j=0; j&lt;a.length; j++)
    {
        if (a[i]+a[j]==target) count++
    }
}
console.log(count)

// First solution
var count = 0
for (var i=0; i&lt;a.length; i++)
{
    var v = a[i]
    var x = target-v
    var f = binarySearch(a,x,false)
    if (f&gt;-1)
    {
        var l = binarySearch(a,x,true)
        var nb = 1+l-f
        count+=nb
    }
}
console.log(count)

// Second solution - skipping over identical values
var count = 0
for (var i=0; i&lt;a.length; i++)
{
    var v = a[i]
    var coef = 1
    while (i+1&lt;a.length &amp;&amp; a[i+1]==v)
    {
        coef++
        i++
    }
    var x = target-v
    var f = binarySearch(a,x,false)
    if (f&gt;-1)
    {
        var l = binarySearch(a,x,true)
        var nb = 1+l-f
        count+=nb*coef
    }
}
console.log(count)

// Third solution - stopping once enough is enough
var count = 0
for (var i=0; i&lt;a.length; i++)
{
    var v = a[i]
    var coef = 1
    while (i+1&lt;a.length &amp;&amp; a[i+1]==v)
    {
        coef++
        i++
    }
    var x = target-v
    if (v &lt;= x)
    {
        if (v != x) coef*=2
        var f = binarySearch(a,x,false)
        if (f&gt;-1)
        {
            var l = binarySearch(a,x,true)
            var nb = 1+l-f
            count+=nb*coef
        }
    }
    else break
}
console.log(count)

// Fourth solution - limiting the binary search to a smaller scope
var count = 0
for (var i=0; i&lt;a.length; i++)
{
    var oldi=i
    var v = a[i]
    var coef = 1
    while (i+1&lt;a.length &amp;&amp; a[i+1]==v)
    {
        coef++
        i++
    }
    var x = target-v
    if (v &lt; x)
    {
        var f = binarySearch(a,x,false,i)
        if (f&gt;-1)
        {
            var l = binarySearch(a,x,true,f)
            var nb = 1+l-f
            count+=2*nb*coef
        }
    }
    else if (x==v)
    {
        count+=coef*coef
        break
    }
    else break
}
console.log(count)
</code></pre>

<p><strong>Re-edit :</strong></p>

<p>I've tested my code with the following inputs and all functions are returning the same values... but not in the same time.</p>

<pre><code>var a = []
for (var i=0; i&lt;10000; i++)
{
    a.push(Math.floor(Math.random()*20))
}
var target = a[0]+a[1]; // ensuring results
</code></pre>

<p>Zeroth solution is <code>O(n^2)</code>
First solution is <code>O(n*log(n) + n*log(n))</code> which is <code>O(n*log(n))</code>
Second solution is stricly better.
Third solution is stricly better.
Fourth solution is stricly better.</p>
    </div>