<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think there is a problem with some of your <code>byteArrayToXX</code> functions:</p>

<p>As an example:</p>

<pre><code>let byteArrayToInt32 =
    function
    | [|b1; b2; b3; b4|] -&gt; (b1 |&gt; int32) &lt;&lt;&lt; 24 ||| (b2 |&gt; int32) &lt;&lt;&lt; 16 ||| (b3 |&gt; int32) &lt;&lt;&lt; 8 ||| (b4 |&gt; int32)
    | _ -&gt; failwith "Int32 may only have a 4 element byte-array"
</code></pre>

<p>When testing with <code>[| 5uy; 3uy; 4uy; 8uy|]</code> it produces <code>50332680</code>, but the correct result should be <code>84083720</code> or binary <code>0000 ‭0101 0000 0011 0000 0100 0000 1000‬</code>.</p>

<p>The solution is to add parentheses as follows:</p>

<pre><code>let byteArrayToInt32 =
    function
    | [|b1; b2; b3; b4|] -&gt; ((b1 |&gt; int32) &lt;&lt;&lt; 24) ||| ((b2 |&gt; int32) &lt;&lt;&lt; 16) ||| ((b3 |&gt; int32) &lt;&lt;&lt; 8) ||| (b4 |&gt; int32)
    | _ -&gt; failwith "Int32 may only have a 4 element byte-array"
</code></pre>

<p>It seems to be a precedence (or more precise: left associativity) problem:</p>

<p><code>(5 &lt;&lt;&lt; 24 ||| 3 &lt;&lt;&lt; 16)</code> is actually calculated as <code>((5 &lt;&lt;&lt; 24 ||| 3) &lt;&lt;&lt; 16)</code>, but the correct calculation should be <code>((5 &lt;&lt;&lt; 24) ||| (3 &lt;&lt;&lt; 16))</code></p>

<hr>

<p>As an exercise I have tried to refactor the converter functions to something that is more maintainable than the originals:</p>

<pre><code>let inline convertBytes caster initial length failMsg bytes = 
    match bytes |&gt; Array.length with
    | x when x = length -&gt; Array.foldBack (fun b (acc, shift) -&gt; acc ||| ((caster b) &lt;&lt;&lt; shift), shift + 8) bytes (initial, 0) |&gt; (fun (acc, _) -&gt; acc)
    | _ -&gt; failwith failMsg

let byteArrayToByte = convertBytes id 0uy 1 "Byte may only have a single element byte-array"
let byteArrayToSByte = convertBytes sbyte 0y 1 "SByte may only have a single element byte-array"
let byteArrayToUInt16 = convertBytes uint16 0us 2 "UInt16 may only have a 2 element byte-array"
let byteArrayToInt16 = convertBytes int16 0s 2 "Int16 may only have a 2 element byte-array"
let byteArrayToUInt32 = convertBytes uint32 0u 4 "UInt32 may only have a 4 element byte-array"    
let byteArrayToInt32 = convertBytes int32 0 4 "Int32 may only have a 4 element byte-array"
let byteArrayToUInt64 = convertBytes uint64 0UL 8 "UInt64 may only have a 8 element byte-array"
let byteArrayToInt64 = convertBytes int64 0L 8 "Int64 may only have a 8 element byte-array"

let byteArrayToNumber signature (bytes : byte []) =
    match bytes.Length, signature with
    | 1, false -&gt; bytes |&gt; byteArrayToByte |&gt; Byte
    | 1, true -&gt; bytes |&gt; byteArrayToSByte |&gt; SByte
    | 2, false -&gt; bytes |&gt; byteArrayToUInt16 |&gt; UInt16
    | 2, true -&gt; bytes |&gt; byteArrayToInt16 |&gt; Int16
    | 4, false -&gt; bytes |&gt; byteArrayToUInt32 |&gt; UInt32
    | 4, true -&gt; bytes |&gt; byteArrayToInt32 |&gt; Int32
    | 8, false -&gt; bytes |&gt; byteArrayToUInt64 |&gt; UInt64
    | 8, true -&gt; bytes |&gt; byteArrayToInt64 |&gt; Int64
    | _ -&gt; failwith "Number must have a 1, 2, 4, or 8 element byte-array"

let inline numberToBytes count n = Array.init (count) (fun i -&gt; (byte (n &gt;&gt;&gt; ((count - 1 - i) * 8))))

let byteToByteArray = numberToBytes 1
let sbyteToByteArray = numberToBytes 1
let uint16ToByteArray = numberToBytes 2
let int16ToByteArray = numberToBytes 2
let uint32ToByteArray = numberToBytes 4
let int32ToByteArray = numberToBytes 4
let uint64ToByteArray = numberToBytes 8
let int64ToByteArray = numberToBytes 8

let numberToByteArray =
    function
    | Byte n -&gt; false, (n |&gt; byteToByteArray)
    | SByte n -&gt; true, (n |&gt; sbyteToByteArray)
    | UInt16 n -&gt; false, (n |&gt; uint16ToByteArray)
    | Int16 n -&gt; true, (n |&gt; int16ToByteArray)
    | UInt32 n -&gt; false, (n |&gt; uint32ToByteArray)
    | Int32 n -&gt; true, (n |&gt; int32ToByteArray)
    | UInt64 n -&gt; false, (n |&gt; uint64ToByteArray)
    | Int64 n -&gt; true, (n |&gt; int64ToByteArray)
</code></pre>

<p>I'm not claiming it to be the state of the art or that they have better performance. It's just what it is.</p>

<hr>

<p>If I should reorganize your main read- and writeLogMessage functions, I think I would try something like this:</p>

<pre><code>let readLogMessage (bytes: byte[]) =
    let readHeader result bts = result // TODO implement the function
    let readIp result bts= result // TODO implement the function
    let readUserId result bts= result // TODO implement the function
    let readPageName result bts= result // TODO implement the function
    let readFunctionName result bts= result // TODO implement the function
    let readParameters result bts= result // TODO implement the function

    [readHeader; readIp; readUserId; readPageName; readFunctionName; readParameters; ] 
    |&gt; List.fold (fun (bts, header, msg) fn -&gt; fn (bts, header, msg) bts) 
        (bytes, 
        { IPV6 = false; PageNameSupplied = false; ParameterCount = 0uy }, 
        { IP = System.Net.IPAddress.Parse("::1") |&gt; V6; DateTime = 0UL; UserId = (Client, 0ul); PageName = None; FunctionName = [||]; Parameters = [] })
</code></pre>

<p>Here I use <code>List.fold</code> on a list of partial functions where the state object passed each function is a tuple: <code>(remaining bytes, header, message)</code>. I think a similar approach can be used in the write function. Again I'm not claiming this to be a better solution, just another way to do things, that I find easier to read and maintain.</p>
    </div>