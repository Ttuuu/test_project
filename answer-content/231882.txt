<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You cannot write this kind of code in standard C. It will have to be library-level code compiled with non-standard extensions.</p>

<p>Notably,  <code>s = (uint32_t *)cptr;</code> is a strict aliasing violation. It invokes undefined behavior and may cause strange, subtle bugs during optimization etc. In order to get this to work reliably, you have to use non-standard options such as <code>gcc -fno-strict-aliasing</code>.</p>

<p>When dereferencing the pointed-at string as <code>uint32_t</code> you must also ensure that the 32-bit access doesn't go out of bounds of the allocated array.</p>

<p>Pedantically, you should cast the result of <code>ffs</code> to <code>uint32_t</code>, because it returns an <code>int</code> type which is signed and you don't want to bit shift signed numbers, even though it will always be positive in this specific case. I'd probably rewrite the macros more type-safe, along the lines of this:</p>

<pre><code>#define mul4_32(x) ((uint32_t)(x) &lt;&lt; 2)
</code></pre>

<p>Or, if C11 is an option:</p>

<pre><code>#define mul4(x) _Generic((x), uint32_t: (x) &lt;&lt; 2)
</code></pre>

<p>In either case it shouldn't affect performance.</p>

<p>Also please note that <code>ffs</code> and <code>strings.h</code> are POSIX but not standard C.</p>
    </div>