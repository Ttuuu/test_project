<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>At some point, I'd recommend using <code>template</code> here. This will allow you to store any date type, not just <code>int</code>s, in your structure.</p></li>
<li><p>It'd be better to define <code>node</code> as a <code>struct</code> inside <code>StackusingList</code> as <code>private</code>. In your current implementation, <code>node</code>'s fields are <em>not</em> hidden because they are all made <code>public</code>.</p>

<pre><code>class LinkedList
{
private:
    struct Node
    {
    };

public:

};
</code></pre></li>
<li><p>Prefer <a href="https://en.cppreference.com/w/cpp/language/nullptr" rel="nofollow noreferrer"><code>nullptr</code></a> to <code>NULL</code> if you're using C++11.</p></li>
<li><p><code>StackusingList()</code> should be an <a href="https://en.cppreference.com/w/cpp/language/initializer_list" rel="nofollow noreferrer">initializer list</a>:</p>

<pre><code>StackusingList(int max) : top(NULL), maxnum(max), count(0) {}
</code></pre></li>
<li><p><code>count</code> should be of type <a href="http://en.cppreference.com/w/cpp/types/size_t" rel="nofollow noreferrer"><code>std::size_t</code></a>.</p></li>
<li><p>In both <code>push()</code> and <code>pop()</code>, you'll need to <code>return</code> if the stack is full or empty respectively. Otherwise, the function will continue to execute, defeating the purpose of the check.</p></li>
<li><p><code>print()</code>:</p>

<pre><code>// no data members are being modified,
//   so make this const
void print() const
{
    // could just be initialized
    // the asterisk is commonly
    //   put next to the type in C++
    node* temp = top;

    while (temp)
    {
        cout &lt;&lt; temp-&gt; data &lt;&lt; ",";
        temp = temp-&gt;next;
    }
}
</code></pre></li>
<li><p><strong>Watch out:</strong></p>

<pre><code>StackusingList *sl = new StackusingList(5);
</code></pre>

<p>You do not call <code>delete</code> with this <code>new</code>, thereby causing a <strong>memory leak</strong>!  <em>Always call</em> <code>delete</code> <em>properly with every</em> <code>new</code>.</p>

<p>At the end of <code>main()</code> before the <code>return</code>:</p>

<pre><code>delete s1;
</code></pre>

<p>Beyond that, you really don't need to use <code>new</code> here.  It's only necessary with the nodes, which you're already doing. It's best to just avoid manual allocation/deallocation as much as possible.</p></li>
<li><p><code>stackData</code> isn't used anywhere (and doesn't have a clear meaning), so just remove it.</p></li>
<li><p>You're missing a few useful <code>public</code> member functions:</p>

<pre><code>std::size_t size() const { return count; } // put into header
</code></pre>

<p></p>

<pre><code>bool empty() const { return count == 0; } // put into header
</code></pre>

<p></p>

<pre><code>template &lt;typename T&gt;
T StackusingList&lt;T&gt;::top() const { return top-&gt;data; }
</code></pre></li>
<li><p><strong>There is no destructor!</strong> You're allocating <code>new</code> nodes, so you have to define the destructor to properly <code>delete</code> them:</p>

<pre><code>StackusingList::~StackusingList()
{
    node* current = top;

    while (current)
    {
        node* next = current-&gt;next;
        delete current;
        current = next;
    }

    top = NULL;
}
</code></pre>

<p>With the destructor defined, you'll need to satisfy <a href="https://stackoverflow.com/questions/4172722/what-is-the-rule-of-three">The Rule of Three</a>.  This is also important because the default copy constructor and assignment operator will perform a <em>shallow</em> copy of <code>top</code>. This means that the pointer <em>itself</em> will be copied instead of just the <em>data</em> at that pointer. This will cause problems if you try to copy list objects or initialize new ones with existing ones.</p></li>
</ul>
    </div>