<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Two bugs my tests didn't catch:</p>

<h1>Self assignment</h1>

<p>This is a serious bug.  The copy assignment of the class works by clearing <code>*this</code> first and then insert the values using iterators.  This causes problems with self assignment â€” the iterators are invalidated after the clear.  The following program is flagged by valgrind for access to uninitialized memory:</p>

<pre><code>static_vector&lt;std::string, 5&gt; sv(3, std::string(20, 'x'));
sv = sv;
std::cout &lt;&lt; sv[0] &lt;&lt; " " &lt;&lt; sv[1] &lt;&lt; " " &lt;&lt; sv[2] &lt;&lt; "\n";
</code></pre>

<p>This bug is not easily testable.  I included self assignment tests but valgrind didn't fire.  The code above also works fine if I replace <code>20</code> with <code>10</code>!</p>

<p>Possible fix: for copy assignment, explicitly test for self-assignment, like</p>

<pre><code>if (this == &amp;other)
    return;
</code></pre>

<p>For <code>assign(iterator, iterator)</code>, state in the documentation that it's undefined behavior if the iterators point into <code>*this</code>.  Or, more generally, if the elements in <code>*this</code> are accessed by copy constructing from the result of dereferencing the iterator.  (Also affect other functions.)</p>

<h1><code>#include &lt;array&gt;</code></h1>

<p>It's missing.  I discovered this bug by running the test on a Windows machine.</p>
    </div>