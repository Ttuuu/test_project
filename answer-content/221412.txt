<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1><a href="https://coliru.stacked-crooked.com/a/73214a1a89ce7f41" rel="nofollow noreferrer">Memory Leak</a></h1>
<p><code>std::shared_ptr</code>s free their target when the last reference to that target disappears. Since you have <code>Node</code>s that point at each other (<code>node-&gt;right-&gt;parent == node</code>) that never happens. <code>std::weak_ptr</code> is made to solve this problem.</p>
<h2>Ownership vs Pointing</h2>
<p>You are not forced to use <code>std::shared_ptr</code> just because you want to point at it from multiple spots. <code>std::shared_ptr</code> means "I co-own that data and as long as I live that data will live". Looking at <code>Node</code> that really isn't what you meant. One way to model this is that <code>Node</code>s own their children, but the children only point to the parent, they don't own their parent. That would leave you with</p>
<pre><code>std::unique_ptr&lt;Node&gt; left;
std::unique_ptr&lt;Node&gt; right;
Node* parent;
</code></pre>
<p>Alternatively you can look into <code>std::weak_ptr</code> which is made to avoid cyclic references.</p>
<h1>Don't Expose Your Privates</h1>
<p><code>Node</code> is <code>private</code> to <code>Avl</code>. Outside users should not be concerned with how to wire up <code>Node</code>s. Right now I can do <code>avl.find(x)-&gt;data = x + 1; //update value</code> which breaks your tree. Since changing the value breaks the tree you cannot give the user a non-<code>const</code> reference to the data. You could make the <code>Node</code> members <code>private</code>, add <code>Avl</code> as a <code>friend</code> and add a <code>Avl::set_value(const std::shared_ptr&lt;Node&gt; &amp;)</code> function that handles the rebalancing correctly. Maybe add a <code>public</code> getter for <code>data</code>, but definitely no constructor.</p>
<h1>Unnecessary Copies</h1>
<p><code>int height(std::shared_ptr&lt;Node&gt; node);</code> for example makes a copy of its argument which means an increment and decrement of the atomic reference counter which means thread synchronization. Taking a <code>const &amp;</code> would avoid that.</p>
<h1>Naming</h1>
<p><code>destroy</code> is more commonly named <code>clear</code>.<br>
I would argue that functions returning a <code>bool</code> should be phrased as a question. <code>empty</code> should be <code>is_empty</code> to avoid <code>tree.empty(); //does not actually empty the tree</code>. But the STL also does this wrong and keeping it STL-compatible instead of logical is also a reasonable design decision. Maybe use both.</p>
<h1>Dead Code</h1>
<p><code>destroy_helper</code> seems to be useless.</p>
<h1>Interface</h1>
<h2>Const Correctness</h2>
<p>If I get a <code>const Avl &amp;tree</code> I can barely do anything with it. I can check the <code>size</code> and if it's <code>empty</code>. I cannot <code>travers_*</code> it or <code>find</code> anything in it. Those functions should be <code>const</code> too.</p>
<h2>Out Parameters</h2>
<p><code>void traverse_inorder(std::vector&lt;int&gt;&amp; out);</code> is ugly to use and usually inefficient. <code>std::vector&lt;int&gt; traverse_inorder() const;</code> is much nicer to work with. If you keep the old version as a minor performance improvement call <code>.reserve</code> or <code>.resize</code> on the vector since you know exactly how big it will end up.</p>
<h2>Noise</h2>
<pre><code>inline size_t size() const {
    return current_size;
}
</code></pre>
<p>is already implicitly <code>inline</code>, so just remove the redundant keyword.</p>
<h2>Unnecessary Privacy</h2>
<p>You already have <code>get_min</code>, but it's <code>private</code>. Since you already have it may as well expose it to the user (probably without the parameter or making it optional) instead of having them reimplement it.</p>
<h1>Logic</h1>
<p>I only looked at this briefly, so this is nowhere near complete.<br>
<code>void Avl::add(std::shared_ptr&lt;Node&gt; node)</code> adds a <code>Node</code> without any unlinking. It keeps its parent and <code>left</code> and <code>right</code>, possibly going into another tree.<br>
<code>Avl tree_copy = tree;</code> compiles, but doesn't make a copy.</p>
    </div>