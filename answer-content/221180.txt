<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Nice approach.</p>

<p>It's quite a hard problem to analyse for running time, because the output size is variable. <code>merge</code> has running time linear in the total size of its inputs, which are the output sizes of the subproblems. What we can say is that the base case produces two points for one input point, and <code>merge</code> doesn't create new points, so the number of points merged is at most twice the number of input points. Therefore the recurrence is <span class="math-container">\$T(n) = 2T(n/2) + O(n)\$</span> which is the standard recurrence giving <span class="math-container">\$O(n \lg n)\$</span>.</p>

<p>We can also show that this can't be beaten by a reduction from sorting. Given a set <span class="math-container">\$\{x_i\}\$</span> to sort, we find the maximum <span class="math-container">\$m\$</span> and construct buildings <span class="math-container">\$\{(0, m + 1 - x_i, x_i)\}\$</span>. The output will give the <span class="math-container">\$x_i\$</span> sorted in descending order.</p>

<p>So your approach is asymptotically optimal, and moreover elegant. The merge doesn't do anything fancy, so it should have a low constant hidden by the big-O notation.</p>

<hr>

<p>I think that some of the double-indexed array accesses could benefit from introducing names. In particular, I would find</p>

<blockquote>
<pre><code>            return [[buildings[0][0], buildings[0][2]], [buildings[0][1], 0]]
</code></pre>
</blockquote>

<p>much more readable as</p>

<blockquote>
<pre><code>            l, r, h = buildings[0]
            return [[l, h], [r, 0]]
</code></pre>
</blockquote>

<hr>

<p>The three cases in <code>merge</code> can be simplified considerably by using <code>&lt;=</code>. I find <code>is_valid</code> inelegant, so I would eliminate it by keeping track of the "current" height. Introducing names for <code>left[i][0]</code> and <code>right[j][0]</code> I refactored your code to</p>

<blockquote>
<pre><code>    def merge(self, left, right):
        h1, h2, hcurrent = 0, 0, 0
        i, j = 0, 0
        result = []

        while i &lt; len(left) and j &lt; len(right):
          x0 = left[i][0]
          x1 = right[j][0]
            if x0 &lt;= x1:
                h1 = left[i][1]
                i += 1
            if x1 &lt;= x0:
                h2 = right[j][1]
                j += 1
            if max(h1, h2) != hcurrent:
                hcurrent = max(h1, h2)
                result.append([min(x0, x1), hcurrent])
        result.extend(right[j:])
        result.extend(left[i:])
        return result
</code></pre>
</blockquote>

<p>It could alternatively be refactored to use a sentinel as so:</p>

<blockquote>
<pre><code>    def merge(self, left, right):
        h1, h2 = 0, 0
        i, j = 0, 0
        result = [[0, 0]]

        while i &lt; len(left) and j &lt; len(right):
            x0 = left[i][0]
            x1 = right[j][0]
            if x0 &lt;= x1:
                h1 = left[i][1]
                i += 1
            if x1 &lt;= x0:
                h2 = right[j][1]
                j += 1
            if max(h1, h2) != result[-1][1]:
                result.append([min(x0, x1), max(h1, h2)])
        result.extend(right[j:])
        result.extend(left[i:])
        return result[1:]
</code></pre>
</blockquote>

<p>Either way, I think it would be good to add a comment explaining why</p>

<blockquote>
<pre><code>        result.extend(right[j:])
        result.extend(left[i:])
</code></pre>
</blockquote>

<p>doesn't need any extra checks to avoid producing two consecutive points at the same height.</p>
    </div>