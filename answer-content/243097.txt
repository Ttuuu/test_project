<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Welcome to Code Review, some considerations that can help you to simplify your code:</p>

<ol>
<li>you have an alphabet of 26 letters, so if the shifting operation is
limited to a 26 characters range you can use the mod operation <code>%26</code>
to determine the final position.</li>
<li>you can have a shift negative operation <code>num</code> (ex. -5), for a 26
set of elements shift this is equal to a positive shift of  <code>Math.abs(26 - Math.abs(num))</code> , so for 5 the positive shift is 21.</li>
</ol>

<p>So if you have a <code>c</code> character and you want to obtain the ascii code of the corresponding shifted char of <code>num</code> positions you can obtain it in the following way:</p>

<pre><code>const start = c === c.toLowerCase() ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
const diff = c.charCodeAt(0) - start;
const sh = num &gt;= 0 ? diff + num : diff + Math.abs(26 - Math.abs(num));
const code = sh % 26 + start;
</code></pre>

<p>The first line returns the ascii code of 'a' or 'A' depending if the char <code>c</code> is lowercase or uppercase called <code>start</code>, the second gives you the difference between <code>c</code> and <code>start</code>, the last two lines calculate the code of the shifted corresponding character.</p>

<p>After your function can be rewritten in the following way:</p>

<pre><code>'use strict';

function caesar(str, num) {
    const arr = [];
    const re = /[a-zA-Z]/;
    for (const c of str) {
        if (re.test(c)) {
            const start = c === c.toLowerCase() ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
            const diff = c.charCodeAt(0) - start;
            const sh = num &gt;= 0 ? diff + num : diff + Math.abs(26 - Math.abs(num));
            const code = sh % 26 + start;
            arr.push(String.fromCharCode(code));
        } else { 
            arr.push(c); 
        }
    }

    return arr.join('');
}
</code></pre>

<p>I set arr and <code>regex</code> as const and instead of iterate over string using the index, I preferred the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of" rel="nofollow noreferrer">for ... of</a> construct.</p>

<p>Note: I'm a javascript beginner too, so every suggestion to improve my code as for the original question is highly appreciated.</p>
    </div>