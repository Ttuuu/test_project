<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>Don't force a <code>class</code> where a function is perfectly fine.</p></li>
<li><p>The namespace <code>std</code> is not designed for wholesale importation, see "<em><a href="https://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice">Why is “using namespace std” considered bad practice?</a></em>" for more detail.</p></li>
<li><p><a href="https://en.cppreference.com/w/cpp/language/identifiers" rel="nofollow noreferrer">Identifiers starting with an underscore followed by an uppercase letter are reserved.</a></p></li>
<li><p>Input is generally unreliable. But you don't test for error at all.</p></li>
<li><p>Always recomputing the current result from first principles, instead of just updating it with the newest addition, is a waste of time.</p></li>
<li><p>Flushing is expensive, so avoid <code>std::endl</code> and explicitly request it with <code>std::flush</code> where unavoidable.</p></li>
<li><p>You should probably follow the requested output-format...</p></li>
<li><p>You know that <code>int</code> in <code>unsigned int</code> is implicit?</p></li>
<li><p>In C++ and C99+, <code>return 0;</code> is implicit for <code>main()</code>.</p></li>
<li><p>I wonder why you sometimes surround binary operators with space, and sometimes don't.</p></li>
<li><p>Having over-long lines is very cumbersome to read. Admittedly, you need not make a hard cut at 79 nowadays.</p></li>
<li><p>You should double-check whether duplicate inputs can occurr (there are none in the example), and if so whether they should cause anything but repeated output.<br>
I assumed duplicated possible, and they only cause output.</p>

<ul>
<li>Duplicates have an effect would destroy ranges instead of adding them, thus needing an ordered <code>std::set</code>.</li>
<li>Duplicates not possible would mean the <code>std::unordered_set</code> can be dispensed with.</li>
</ul></li>
</ol>

<pre><code>#include &lt;cstdlib&gt;
#include &lt;iostream&gt;
#include &lt;unordered_set&gt;

int main() {
    unsigned n, m, x;
    std::cin &gt;&gt; n &gt;&gt; m;
    if (!std::cin || !n) {
        std::cerr &lt;&lt; "Bad Input!\n";
        return EXIT_FAILURE;
    }
    std::unordered_set&lt;unsigned&gt; nums;
    auto r = 0ULL;
    while (--m) {
        std::cin &gt;&gt; x;
        if (!std::cin || x &lt; 1 || x &gt; n) {
            std::cerr &lt;&lt; "Bad Input!\n";
            return EXIT_FAILURE;
        }
        auto [iter, created] = nums.insert(x);
        if (created)
            r += 2 * x;
        std::cout &lt;&lt; r &lt;&lt; '\n';
    }
}
</code></pre>
    </div>