<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think I can see <em>overthink</em> and <em>rush</em>. If the code presented was created with a run-of-the-mill IDE in 10 minutes, I don't think <em>mess</em>.</p>

<p>The first consequence of <em>rush</em> is, in my eyes, fatal:<br>
How is anyone (say, a maintenance programmer) to know if this code works as specified if the code doesn't include its functional specification?<br>
(Once you've put down the specification, check with the "customer" by any means.)</p>

<p>You included (scanty) <em>doc comments</em> for <code>countCharacters()</code> and <code>createCompressedString()</code> - one for the class or a method built from the two mentioned (the class's main business function - if I didn't have a problem with the name <code>Compressor</code>, it might be <code>compress()</code>, alternatively, the class extending <code>UnaryOperator&lt;String&gt;</code>, <code>apply()</code>) would have been essential.<br>
Introducing the methods mentioned avoids <em>open coding</em> and allows giving a meaningful name to what they achieve. It shows determination to use procedural decomposition. (Passing around <code>Map</code>s/histograms instead of introducing an instance data member hints at less concern with OO analysis &amp; design.)  </p>

<p>I'm a bit at odds with the naming shown - starting with <em>compress</em> for something impossible to <em>decompress</em>. For brevity:<br>
<code>Histogram</code> for <code>Compressor</code>; <code>histogram</code> for <code>compressedString</code>, <code>countCharacters()</code>, its <code>characterCount</code>, and <code>newString</code>; <code>characters</code> for <code>characterArray</code> - and I'd rather not name things used once <em>where the name doesn't give the (non-apparent) interpretation</em> (to an extent, <code>newCount</code> does in <code>countCharacters()</code>).</p>

<p>In combination with <em>coding against interfaces</em> and using conditional expressions:  </p>

<pre><code>class Histogram {
    /** For a string, prints each character and its occurrence count
     *  without any delimiters. */
    public static void main(String args []) {
        String randomString = 0 &lt; args.length ? args[0] : "aaabccccc";

        String linearised = linearHistogram(text);
        System.out.println(text.length() &lt; linearised.length()
            ? text : linearised);
    }

    /** Creates a &lt;code&gt;String&lt;/code&gt; containing each character present
     *  in &lt;code&gt;String text&lt;/code&gt; and its occurrence count,   
     *  without any delimiters. */
    static String linearHistogram(String text) {
        return histogram(histogram(text));
    }

    /** Creates &lt;code&gt;Map&lt;/code&gt; from character to count of occurrence */
    static Map&lt;Character, Integer&gt; histogram(String s) {
        return histogram(s, new java.util.LinkedHashMap&lt;&gt;());
    }

    /** Adds character counts from &lt;code&gt;s&lt;/code&gt; to &lt;code&gt;histogram&lt;/code&gt; */
    static Map&lt;Character, Integer&gt;
    histogram(String s, Map&lt;Character, Integer&gt; histogram) {
        for(Character c : s.toCharArray()) {
            Integer count = histogram.get(c);
            histogram.put(c, count == null ? 1 : count + 1);
        }

        return histogram;      
    }

    /** Converts histogram from &lt;code&gt;Map&lt;/code&gt; to &lt;code&gt;String&lt;/code&gt;
     * @param histogram map char to count
     * @return &lt;code&gt;String&lt;/code&gt; concatenation of characters and counts
     *  from &lt;code&gt;histogram&lt;/code&gt;
     */
    static String histogram(Map&lt;Character, Integer&gt; histogram) {
        StringBuilder linearised = new StringBuilder();
        for (Entry&lt;Character, Integer&gt; entry : histogram.entrySet())
            linearised.append(entry.getKey()).append(entry.getValue());

        return linearised.toString();
    }
}
</code></pre>

<p>There's exactly <em>one</em> reason the doc comment of <code>histogram(String s)</code> doesn't claim <em>The <code>Map</code> returned iterates in the order the characters are added</em>: I don't know by heart what effect a <code>put()</code> has on an <em>insertion-order</em>ed <code>LinkedHashMap</code> if the key was mapped before (and wouldn't bother in 10 minutes of an interview).</p>

<p>Note the package visibility of methods. If I wanted methods usable from other packages, I'd define an interface.</p>

<hr>

<p>You provide a helpful position to assume being tasked to code something in an interview:</p>

<blockquote>
  <p>it [is] more to assess how I would solve the problem as opposed to the code itself.</p>
</blockquote>

<p>There are many things one <em>could</em> do, few in a 10 minute time-frame. (And some not to be caught doing, starting with ignoring tests or maintainability, or starting to optimise prematurely.) </p>

<p>A Java 8 buff might come up with better than</p>

<pre><code>/** Creates a &lt;code&gt;Map&lt;/code&gt; from element to occurrence count. */
public static &lt;T&gt; Map&lt;T, ? extends Number&gt; histogram(Stream&lt;T&gt; stream) {
    return stream.collect(
        Collectors.groupingBy(Function.&lt;T&gt;identity(),
            Collectors.counting()));
}
â€¦
    histogram(text.codePoints().mapToObj(i -&gt; i));
</code></pre>

<p>Try that if comfortable with <em>streams</em>, only. (If I was the interviewer, I'd ask about a streams solution if presented a non-streams one - <em>and vice-versa</em>.)</p>
    </div>