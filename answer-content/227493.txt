<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>The JS convention is to use camelCase to name variables (All versions of JS). <code>generate_list_data_attribute</code> becomes <code>generateListDataAttribute</code></p></li>
<li><p>You don't need to use Object.is in this example. <code>if (Object.is(array.length - 1, key)) {</code> is the same as <code>if (key === array.length -1) {</code></p></li>
<li><p>Arrays contain items, arrays reference items via an index, objects reference properties via a key, and the property contains a value. Thus using more appropriate names would change <code>from_array.forEach((element, key, array)</code> to <code>fromArray.forEach((item, index, array)</code> or <code>fromArray.forEach((item, i, array)</code></p></li>
<li><p>You have access to <code>from_array</code> within the <code>forEach</code> iterator and thus not need to use the 3rd argument of <code>forEach</code></p></li>
</ul>

<h2>Rewrite</h2>

<p>Your code is unnecessarily complex and can be done as in the example below. There are two versions as I am unsure if you intend to call the function with an empty array. The last example uses for loop, and is an alternative that avoids the need to test for the last element.</p>

<p>The example you gave does not match the results you want. The space is missing after the commas. The examples add the space.</p>

<h3>Example A</h3>

<p>This assumes that the array contains items and will return <code>data-name="[""]"</code> for empty arrays which is not the same return as your function.</p>

<pre><code>const arrayToNamedAttribute = (name, arr) =&gt; `data-${name}="["${arr.join('", "')}"]"`;
</code></pre>

<h3>Example B</h3>

<p>This example check for an empty array using a ternary <code>arr.length ?</code>"${arr.join('", "')"<code>: ""</code></p>

<pre><code>const namedAttr = (name, arr) =&gt; `data-${name}="[${arr.length ? `"${arr.join('", "')}"` : ""}]"`;
</code></pre>

<p>Or as</p>

<pre><code>const arrayToNamedAttribute = (name, arr) =&gt; {
    const arrStr = arr.length ? `"${arr.join('", "')}"` : "";
    return `data-${name}="[${arrStr}]"`;
}
</code></pre>

<p>or replacing he <code>{</code> and <code>}</code> and using comma to separate expressions avoids the need to use return, and reuses the <code>arr</code> argument to hold the string</p>

<pre><code>const arrayToNamedAttribute = (name, arr) =&gt; (
    arr = arr.length ? `"${arr.join('", "')}"` : "", `data-${name}="[${arr}]"`
);
</code></pre>

<h3>Example C</h3>

<p>This uses the variable <code>join</code> to add the comma and space to the string</p>

<pre><code>const arrayToNamedAttribute = (name, arr) =&gt; {
    var arrStr = "", join = "";
    for (const item of arr) {
        arrStr += join + `"${item}"`;
        join = ", ";
    }
    return `data-${name}="[${arrStr}]"`;
}
</code></pre>
    </div>