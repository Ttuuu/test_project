<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You should generally try to avoid global variables (like <code>tableSize</code>). Since they can be used everywhere ("globally"), at the worst case you need to read <em>all</em> of the code to figure out where they come from and how they're used. In this case, <code>tableSize</code> could become a <em>parameter</em> of <code>multTable</code>.</p>

<p>While it will probably work on the compilers you'll come across, <code>void main()</code> isn't strictly guaranteed to work in all C implementations. The standard signature is <code>int main(int argc, char** argv)</code>, or possibly <code>int main(void)</code>.</p>

<p>Defining multiple variables in a single line, like <code>short i = 1, nbMultipliers;</code>, is generally frowned upon because (a) it can be hard to read, and (b) C made some questionable decisions about the need to repeat qualifiers like <code>const</code> and <code>*</code> on types, making the syntax dangerous.</p>

<p>However, you shouldn't really be defining all of your variables at the top of your functions (this was required in old versions of C, but hasn't been for twenty years). You should define your variables as late as possible.</p>

<p>The signature of <code>question</code> could be simplified to <code>short question(void)</code> -- don't use pointers when you don't have a reason to.</p>

<p>You are calling <code>error</code> incorrectly. You've defined it to take a <code>short</code>, but you're passing it a pointer to a <code>short</code>. It should instead be called like <code>error(nbMultiplier);</code>. The C compiler should tell you this -- are you compiling using warnings? The flags <code>-Wall -Wextra</code> are very useful!</p>

<p>Initializing <code>pointSize</code> prior to reading in is not necessary, and actually possibly harmful to the compiler/a debugger catching your mistakes. Also, <code>NULL</code> is a value for <em>pointers</em>. When you're setting <code>*pointSize</code>, you're setting the value of a <em><code>short</code></em>, not a pointer. You probably mean <code>0</code> or <code>-1</code> or some other value - but again, it's simpler to just leave it uninitialized in this case, so that a sanitizer or debugger can catch any accidental uses of uninitialized data.</p>

<p>The format specifier for <code>short</code> is <code>%hd</code>, not <code>%u</code>. Using <code>%u</code> will invoke undefined behavior. Here too, the compiler will emit a warning telling you to fix this. </p>

<p><code>exit</code> is included in <code>stdlib.h</code>, which you have not <code>#include</code>d. It also requires a integer parameter, the exit code to use. Since this is an error, you should use <code>EXIT_FAILURE</code>.</p>

<hr>

<p>Here is what your program looks like (skipping the body of <code>multTable</code> which we haven't gotten to yet) if you apply all of the above:</p>

<pre class="lang-c prettyprint-override"><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

short question(void);    // Ask user how many multipliers
void error(short nbUser); // Cherck error
void multTable(short);  // The table

int main(void)
{
    short tableSize = question();
    error(tableSize);

    /* header */
    printf("       |");
    for (short i = 1; i &lt;= tableSize; i++)
    {
        printf("  %3u  |", i);
    }
    printf("\n");

    for (short i = 1; i &lt;= (tableSize + 1); i++)
    {
        printf("========");
    }
    printf("\n");
    /* end header */

    multTable(tableSize); // the table
    return 0;
}

/* Ask user how many multipliers */
short question(void)
{
    short pointSize;
    printf("How long this table should be ? (0 - 50) ");
    scanf("%hd", &amp;pointSize);
    printf("\n");
    return pointSize;
}

void error(short nbUser)
{
    if (nbUser &lt; 0 || nbUser &gt; 50)
    {
        printf("Error : you must enter a number between 0 and 50");
        exit(EXIT_FAILURE);
    }
}

void multTable(short tableSize)
{
......
}

</code></pre>

<hr>

<p>Notice how related <code>question()</code> and <code>error()</code>; you use <code>error()</code> only to evaluate the output of <code>question()</code>, and <code>question()</code>'s output cannot be trusted without invoking <code>error()</code>. Instead of making <code>question()</code> possibly return a bad value, you should make it encapsulate the error detection itself:</p>

<pre class="lang-c prettyprint-override"><code>short question(void)
{
    short pointSize;
    printf("How long this table should be ? (0 - 50) ");
    scanf("%hd", &amp;pointSize);
    printf("\n");
    if (pointSize &lt; 0 || pointSize &gt; 50)
    {
        printf("Error : you must enter a number between 0 and 50");
        exit(EXIT_FAILURE);
    }
    return pointSize;
}
</code></pre>

<p>Also, notice that you have two places that have <code>printf</code>s: both <code>main</code> and <code>multTable</code>. It's good practice to keep each function doing a single understandable thing. <code>main</code> is doing too much in also printing the table header; especially since that table header needs to be changed if you ever change <code>multTable</code>'s output format. So, you should move printing the table header into <code>multTable</code>.</p>

<p>In <code>multTable</code>, look carefully at how you're using the <code>line</code> variable. You're only using it to write to <code>line[i]</code>, and then immediately read back <code>line[i]</code> -- you're not using it as an array at all! It can simply be replaced with a local <code>short</code> variable.</p>

<p>The resulting <code>multTable</code> will look something like this:</p>

<pre class="lang-c prettyprint-override"><code>void multTable(short tableSize)
{
    /* header */
    printf("       |");
    for (short i = 1; i &lt;= tableSize; i++)
    {
        printf("  %3u  |", i);
    }
    printf("\n");

    for (short i = 1; i &lt;= (tableSize + 1); i++)
    {
        printf("========");
    }
    printf("\n");
    /* end header */

    for (short j = 1; j &lt;= tableSize; j++)
    {
        printf("  %3u  I", j);
        for (short i = 1; i &lt;= tableSize; i++)
        {
            short product = i * j;
            printf("  %3hd  |", product);
        }
        printf("\n");
        for (short i = 1; i &lt;= (tableSize + 1); i++)
        {
            printf("-------+");
        }
        printf("\n");
    }
}
</code></pre>

<h1>General comments</h1>

<p>First, you should put more care into how you name things.</p>

<p>You should generally avoid abbreviations (unless they are extremely standardized abbreviations). You read all the time, <code>&amp; u dnt gnly rd txtlkths</code>, <code>you read text that looks like this</code>. Don't say <code>nb</code>, say <code>number</code>. Don't say <code>mult</code>, say <code>multiplication</code>.</p>

<p>Functions should generally be named like <em>commands</em> to <em>do</em> something. For example, <code>printMultiplicationTable()</code>. This lets you read code as a sequence of commands, each one saying what it does. Look at how clear and simple the following looks:</p>

<pre><code>int main(void) {
    short tableSize = getTableSize();
    printMultiplicationTable(tableSize);
    return 0;
}

</code></pre>

<p>Comments should not state things that are obvious. A comment of <code>// the table</code> adds absolutely nothing to a line that consists of <code>multTable();</code>. Also, you generally don't need <code>/* end .. */</code> comments. Your text editor or IDE can let you quickly jump to the beginning and end of functions, and "collapse" them. Keeping track of these manually in the code adds very little value but quickly adds a lot of clutter.</p>

<p>You also hardly need to use <code>short</code>s. They are often dangerously small (real world numbers very quickly get larger than 16,000), and are no longer faster to operate on in modern computers. If you have a very large array of small numbers, then it might be time to use a <code>short</code> instead of an <code>int</code> (though an explicitly sized type, like <code>int16_t</code>, would be even better!)</p>

<p>Your multiplication table accepts input up to <code>50</code>, but it won't actually work properly for inputs that large. That's because the largest numbers in the resulting table are more than 3 digits wide. Your code should use 4 columns, or you should dynamically adjust the number of columns depending on what's needed for the user's input.</p>

<p>Also, it bears repeating, make sure you compile with compiler warnings on, and address all of the warnings. C is not easy to get right, and C compilers generally give very helpful warnings that catch lots of mistakes that both beginners and veterans make. You should probably use both <code>-Wall</code> and <code>-Wextra</code> if you're using <code>clang</code> or <code>gcc</code> to get all of the warnings turned on.</p>
    </div>