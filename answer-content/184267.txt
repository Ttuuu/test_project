<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'd follow Ludisposed's answer.</p>

<p>Except, there's a simple way to do this. Use logarithms.
Since the equation is \$N = k^a\$ you can change it to \$a = \log_k N\$.
And so if \$a\$ is an integer, then you know that \$N\$ is a power of \$k\$.</p>

<pre><code>import math

def check_power(N, k):
    return math.log(N, k).is_integer()
</code></pre>

<p>Since the above can error, and if there's an error it's definately not a power, then you can use:</p>

<pre><code>def check_power(N, k):
    try:
        return math.log(N, k).is_integer()
    except Exception:
        return False
</code></pre>

<hr>

<p>This has the some problems with floating point precision, so your can round the number to the closest integer, as you want to know if the \$a\$ is an integer. And so you can sub it back into the original equation to ensure that the numbers are right.</p>

<pre><code>def check_power(N, k):
    return N == k**round(math.log(N, k))
</code></pre>

<p>Or if you're on Python 2:</p>

<pre><code>def check_power(N, k):
    return N == k**int(round(math.log(N, k)))
</code></pre>

<hr>

<p>This has a problem with some inputs, such as when \$N\$ and \$k\$ are \$0\$ or \$1\$. And so we can handle these special cases.</p>

<pre><code>def check_power(N, k):
    if N == k:
        return True
    return N == k**round(math.log(N, k))
</code></pre>

<hr>

<p>And so merging all the above, we can use the following:</p>

<pre><code>def check_power(N, k):
    if N == k:
        return True
    try:
        return N == k**int(round(math.log(N, k)))
    except Exception:
        return False
</code></pre>
    </div>