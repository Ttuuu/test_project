<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>You can easily find the next death-index with the modulus operation: <code>next = (current + space) % totalStillAlive</code> . No need for fancy loops (see end of answer).</p></li>
<li><p>Instead of making an array of arrays (btw, don't create js arrays with <code>new Array</code>, use the array literal <code>[]</code>), simply store an array of original indexes, and splice from that on each around until there are no more people left.</p></li>
<li><p>The way you're extracting the data is awkward, specifically the <code>spacer</code> definition - why not define it right off the bat as <code>parseInt(...) - 1</code> ?</p></li>
<li><p>It's probably not very important with this input size, but the synchronous line reading is frowned upon; you should use the asynchronous versions unless there's a reason not to.</p></li>
<li><p><code>if (line != "")</code> can just be <code>if (line)</code></p></li>
<li><p>With #1 you don't need <code>regroup</code>, but your <code>forEach</code> loop is an implementation <code>filter</code> (<a href="https://developer.mozilla.org/en/docs/JavaScript/Reference/Global_Objects/Array/filter">docs</a>)</p></li>
</ol>

<p>(as a continuation of #2:</p>

<pre><code>var person = [];
person = new Array(i.toString(), 1);
</code></pre>

<p>I don't get what went through your mind at the time, but why not just <code>people[i] = [i, 1]</code> ?)</p>

<p>So, your main algorithm can be simplified to 1 nice loop instead of 3 (discounting the instantiation loop):</p>

<pre><code>function josephus (n, interval) {
    var people = [],
        deaths = [];
    for (var i = 0; i &lt; n; i += 1) {
        people[i] = i;
    }

    var idx = 0,
        len = people.length;
    while (len = people.length) {
        idx = (idx + interval) % len;
        deaths.push(people[idx]);
        people.splice(idx, 1);
    }

    return deaths;
}
</code></pre>
    </div>