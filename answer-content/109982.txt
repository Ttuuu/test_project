<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Storing passwords</h1>

<p>The recommended approach for reading passwords is to use a <code>char[]</code> array, instead of a <code>String</code>. The main reason for this, as explained in this <a href="https://stackoverflow.com/a/8881376/1144592">SO answer</a>, is that immutable <code>String</code>s leave your passwords accessible until garbage collection (GC) kicks in, with a malicious process performing a memory dump of your Java process to do so.</p>

<p>Helpfully, <a href="https://docs.oracle.com/javase/8/docs/api/java/io/Console.html#readPassword--" rel="nofollow noreferrer"><code>Console.readPassword()</code></a> returns a <code>char[]</code> array while hiding the user input on the console:</p>

<pre><code>char[] password = System.console().readPassword();
// validate password
// replace the char[] array contents immediately after validation
Arrays.fill(password, ' ');
</code></pre>

<h1>Reading data, and data modeling</h1>

<p>Currently, you are hardcoding the account details as mere space-delimited <code>String</code>s. This is not desirable from a data modeling perspective as it is non-trivial to:</p>

<ul>
<li>'Upgrade' the formatting to support newer or different fields, </li>
<li>Make edits, and </li>
<li>Test.</li>
</ul>

<p>These 'pain points' are evident in the way you are doing validation currently:</p>

<pre><code>if (acctNum.equals(a.substring(0, a.indexOf(" "))) &amp;&amp; 
        pwd.equals(a.substring(a.indexOf(" ")+1,a.lastIndexOf(" "))))
    // BTW looks like you have a typo/bug here
    // return result = a.substring(a.lastIndexOf(" ") + 1);
    result = a.substring(a.lastIndexOf(" ") + 1);
</code></pre>

<ul>
<li>You have to manually identify where each column starts and ends.</li>
<li>The code <em>assumes</em> the account number is in the first field, the password is the second, and the result is in third and final field.</li>
<li>(related to the earlier section, and a big security no-no) Your passwords are in clear text, instead of being encrypted (or at least hashed).</li>
<li>You have hardcorded three accounts into three different variables, which is not scalable.</li>
</ul>

<p><strong>So how can this be done differently?</strong></p>

<p>Let's start with a class called <code>Account</code>:</p>

<pre><code>public class Account {
    String name;
    String encryptedPassword;
    double balance;

    public class Account(String name, String encryptedPassword, double balance) {
        this.name = Objects.requireNonNull(name);
        this.encryptedPassword = Objects.requireNonNull(encryptedPassword);
        this.balance = balance;
    }

    // create getters and setters too

    public boolean isMatching(String name, String encryptedPassword) {
        return Object.equals(this.name, name) 
                    &amp;&amp; Objects.equals(this.encryptedPassword, encryptedPassword);
    }
}
</code></pre>

<p>With a class-based design, adding new fields or changing their data types is a lot easier. Now, we need a mechanism that knows how to interact with multiple accounts, and perform validation on picking an account. An <code>AccountManager</code> sounds like one for the job:</p>

<pre><code>public class AccountManager {
    // using a List here for simplicity
    private final List&lt;Account&gt; accounts = getAccounts();

    // no modifiers used as an illustration to show how testing can override this
    List&lt;Account&gt; getAccounts() {
        // read from a source, e.g. database, and return as a List of Account objects
    }

    public Account getAccount(String accountName, char[] password) {
        String encryptedInput = encryptPassword(password);
        Arrays.fill(password, ' ');
        // simple implementation that loops through the accounts
        for (Account account : accounts) {
            if (account.isMatching(accountName, encryptedInput)) {
                return account;
            }
        }
        return null;
    }
}
</code></pre>

<p>The use of a <a href="https://docs.oracle.com/javase/8/docs/api/java/util/List.html" rel="nofollow noreferrer"><code>List</code></a> lets us store one, three, 10, or more accounts easily without having to deal with a multitude of variables. We also need to encrypt the password first, then rely on the <code>Account.isMatching()</code> method that lets us easily identify which account matches on the inputs. In this case, we no longer have to worry how to read space-delimited <code>String</code>s in order to identify the account name and password parts correctly.</p>

<p>In order to help with the testing, you can create a <code>TestAccountManager</code> that override <code>getAccounts()</code> to use some test data:</p>

<pre><code>// assuming same package
public class TestAccountManager extends AccountManager {

    @Override
    List&lt;Account&gt; getAccounts() {
        return Arrays.asList(new Account("acct1", "...", 1),
                                new Account("acct2", "...", 2),
                                new Account("acct3", "...", 3));
    }

    // ...

}
</code></pre>

<h1>Variable names</h1>

<pre><code>public static double deposit(double x, double y)
{
    double depositAmt = y, currentBal = x;
    // ...
}

public static double withdraw(double x, double y)
{
    double withdrawAmt = y, currentBal = x, newBalance;
    // ...
}
</code></pre>

<p>I thought it is... mildly amusing that you know what the <em>appropriate</em> variable names should used as the method parameters, and yet you stuck with <code>x</code> and <code>y</code> only to perform the assignment afterwards. They should be rewritten as such:</p>

<pre><code>public static double deposit(double currentBalance, double depositAmount)
{
    // ...
}

public static double withdraw(double newBalance, double withdrawalAmount)
{
    // ...
}
</code></pre>

<h1>Reducing code duplication</h1>

<p>You have very similar ways of printing the balances in the <code>displayBalance()</code>, <code>deposit()</code> and <code>withdrawal()</code> methods, differing only in the output. This ties in with the use of a suitable model class as explained in the earlier section. For example:</p>

<pre><code>public class Account {

    // ...

    public boolean deposit(double amount) {
        // ...
    }

    public boolean withdrawal(double amount) {
        // ...
    }

    @Override
    public String toString() {
        return toString("Current");
    }

    public String toString(String description) {
        return String.format("Your %s Balance is $%.2f", description, balance);
    }
}
</code></pre>

<p>With these methods, it simplifies how money is deposited or withdrawn from an <code>Account</code>, and how the balance can be shown:</p>

<pre><code>// show current balance
System.out.println(account);
// do a deposit
boolean isMoneyDeposited = account.deposit(100);
if (isMoneyDeposited) {
    System.out.println(account.toString("New"));
}
</code></pre>

<h1><code>try-with-resources</code></h1>

<p>If you are on Java 7 and above, you should use <a href="https://docs.oracle.com/javase/8/docs/api/java/io/Console.html#readPassword--" rel="nofollow noreferrer"><code>try-with-resources</code></a> for efficient handling of the underlying I/O resource:</p>

<pre><code>public static void main(String[] args) {
    try (Scanner scanner = new Scanner(System.in)) {
        // ...
    }
}
</code></pre>

<h1>Consistent bracing style</h1>

<p>If you are more comfortable with orphan/standalone braces on each line, then do so consistently to improve the code readability. :) Your class declaration and the <code>main()</code> method deviate from this, and some of your <code>if-else</code> statements are also missing braces.</p>
    </div>