<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Style</h1>

<ul>
<li>POSIX reserves type names ending with <code>_t</code>. This means that in the future, standard c may create standardized types with the same name as <code>string_list_node_t</code>, and your code would not compile. See <a href="https://stackoverflow.com/a/12727104">https://stackoverflow.com/a/12727104</a> for more details. A common alternative is to use upper camel-case for typedefs, e.g. <code>StringListNode</code>.</li>
<li>There is a strong case against typedefing structures. The major benefit of this is to save keystrokes, but it removes important information available to programmers. To see some opinions on this, <a href="https://stackoverflow.com/q/252780/4458609">here is another stack overflow question</a>.</li>
<li>I have never seen code that has spaces between <code>-&gt;</code> when accessing struct members. Just  use <code>prepended_node-&gt;id</code> instead. You wouldn't write <code>prepended_node . id</code>, would you?</li>
</ul>

<h1>Code Review</h1>

<h2>Use the bool type</h2>

<p>A boolean type, <code>bool</code>, was introduced in C99. Unless you have really good reasons not to, you should use this for true/false values instead of an integer. This type is found in the <code>&lt;stdbool.h&gt;</code> header.</p>

<h2>Multi-use functions</h2>

<p>Finding nodes in a linked list is a relatively common procedure. If your list supports lookup, it is better to have a separate function that can handle all of your lookup cases:</p>

<pre class="lang-c prettyprint-override"><code>static void _find_node_by_id(int id, str_node *head, 
                str_node **prev, str_node **node) {
  *prev = NULL;
  *node = head;
  while(node &amp;&amp; (*node)-&gt;id != id) {
    *prev = *node;
    *node = (*node)-&gt;next;
  }
}
</code></pre>

<p>This way, you can use the search implementation in multiple places:</p>

<pre class="lang-c prettyprint-override"><code>bool delete_first_by_id(string_list_node_t **source,
                       int id,
                       string_list_node_t ** deleted_value_out){
  string_list_node_t *prev = NULL;
  string_list_node_t *current = *source;

  _find_node_by_id(id, *source, &amp;prev, &amp;current);

  if(current){
    if(!prev){
      *source = current -&gt; next;
      *deleted_value_out = current;
    } else {
      *deleted_value_out = current;
      prev -&gt; next = current -&gt; next;
    }
    return true;
  } else {
    return false;
  }
}

bool find_node_by_id(str_node *head, int id, str_node **return_ptr) {
  string_list_node_t *prev = NULL;
  *ret_ptr = head;

  _find_node_by_id(id, *source, &amp;prev, return_ptr);

  if(*return_ptr) {
      return true;
  } else {
      return false;
  }
}
</code></pre>

<p>Note that I didn't test any of this code.</p>

<h2>Try to avoid pointers to pointers</h2>

<p>More specifically, don't use them when it's not necessary. There isn't a great reason for <code>string_list_alloc</code> to return <code>string_list_node_t **</code>. It makes much more sense to just return a pointer to the node. This does two things for you:</p>

<ol>
<li>Non-destructive operations don't need a pointer to a pointer, so it avoids either 
you or the function from needing to deference them.</li>
<li>It makes destructive operations more explicit, as you need to take the address of 
the pointer to use the function. </li>
</ol>

<h1>Edit addressing question in comments:</h1>

<blockquote>
  <p>In case I want to preserve it across different function calls I should not allocate it on the stack shouldn't I?</p>
</blockquote>

<p>There seems to be some confusion on how malloced memory and pointers work, especially in the context of function return values.</p>

<p>First, remember that a variable holds a value. In this case, the variable contains a memory location, whose value could be any integer greater than or equal to 0. We really don't care about the variable itself, we care about its value.</p>

<p>Second, lets talk about return values. When you return a value from a function, it is copied so that the code calling the function has access to it. Here's a little program that illustrates this:</p>

<pre class="lang-c prettyprint-override"><code>#include &lt;stdio.h&gt;

struct test_struct {
  int a;
  int b;
};

struct test_struct return_struct() {
  struct test_struct test = { .a = 1, .b = 2 };
  printf("The pointer in the function is: %p\n", &amp;test);
  return test;
}

int main(void) {
  struct test_struct main_struct;
  main_struct = return_struct();
  printf("The pointer in main is: %p\n", &amp;main_struct);
  return 0;
}
</code></pre>

<p>On my system, this program prints out</p>

<pre><code>The pointer in the function is: 0x7fffef30f048
The pointer in main is: 0x7fffef30f070
</code></pre>

<p>Notice that the addresses are different. Since the value being returned is copied, we don't need to worry about manually manipulating memory, as the compiler takes care of that for us. It works the same way when returning a pointer from function: the value we care about is copied, so that we can access it when the variable that originally held it no longer exists.</p>

<p>Lets look at this in a different context.</p>

<pre class="lang-c prettyprint-override"><code>// what your alloc function is doing:
int *malloc_add(int a, int b) {
    int *result = malloc(sizeof(result));
    *result = a + b;
    return result;
}
// what it should be doing:
int add(int a, int b) {
    int result;
    result = a + b;
    return result;
}
</code></pre>

<p>While we get the value we want in both cases, in the first we need to perform two extra steps: we need to dereference the pointer to get the value, and we need to free the memory allocated on the heap. </p>
    </div>