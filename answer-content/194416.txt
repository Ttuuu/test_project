<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Welcome!</p>

<p>Your first two lines are nice comments. Consider putting them in a module docstring:</p>

<pre><code>"""Performs Linear Regression (from scratch) using randomized data.

Optimizes weights by using Gradient Descent Algorithm.
"""
</code></pre>

<p>Consider adding random noise to something linear (or to some "wrong model" sine or polynomial), rather than to a constant.</p>

<pre><code>np.random.seed(0)
</code></pre>

<p>Nice - reproducibility is Good.</p>

<pre><code>trainingSize = 10 ** 1
trainingSteps = 10 ** 3
learningRate = 10 ** -2
</code></pre>

<p>These expressions are correct and clear. But why evaluate a FP expression when you could just write it as a literal? 1e1, 1e3, 1e-2. (This answer would apply in many languages, including Python. And yes, I actually prefer seeing the two integers written as floating point, even if that forces me to call int() on them.)</p>

<p><a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP8</a> asks that you spell it <code>training_size</code>, and so on. Please run flake8, and follow its advice.</p>

<p>Your column names expression is fine. Consider handling the one-origin within the format expression:</p>

<pre><code>col_names = [f'feature{i + 1}' for i in range(features)] + ['labels']
</code></pre>

<p>Specifying axis=1 is correct. I have a (weak) preference for explicitly spelling out: <code>axis='columns'</code>.</p>

<p>Consider hoisting the expression <code>np.matmul(X, thetas) - y</code>, so it is only evaluated once.</p>

<p>The three lambda expressions are fine, but they don't seem to buy you anything. Probably better to use <code>def</code> three times.</p>

<p>Ship it! But do consider noising a linear function, to make it easier to evaluate your results.</p>
    </div>