<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>For a beginner this looks like a great start! Below are some suggestions to clean things up and make things more consistent.</p>
<p>It is a common convention for HTML to not contain spaces between attribute keys and values.</p>
<p>So instead of</p>
<blockquote>
<pre><code>&lt;script language = "javascript" type = "text/javascript" src = "highlightSyntax.js"&gt;&lt;/script&gt;
</code></pre>
</blockquote>
<p>make it simply:</p>
<pre><code>&lt;script language="javascript" type="text/javascript" src="highlightSyntax.js"&gt;&lt;/script&gt;
</code></pre>
<p>And similarly for the <code>&lt;div&gt;</code> that contains the first <code>&lt;textarea&gt;</code>.</p>
<p>While single quotes can be used to delimit the attribute values of HTML, it is best to be consistent and use double quotes - so the JavaScript functions that wrap keywords in HTML can use single-quotes to delimit the strings, which is inline with many style guides (e.g. <a href="https://github.com/airbnb/javascript#strings" rel="nofollow noreferrer">aibnb</a>, <a href="https://google.github.io/styleguide/jsguide.html#features-string-literals" rel="nofollow noreferrer">google</a>).</p>
<p>Instead of</p>
<blockquote>
<pre><code>var y = "&lt;span style='color:" + typesKeywordsColor + "; font-weight:bold; '&gt;" + typesKeywords[i] 
 + " &lt;/span&gt;";
</code></pre>
</blockquote>
<p>Use single quotes:</p>
<pre><code>var y = '&lt;span style="color:' + typesKeywordsColor + '; font-weight:bold; "&gt;' + typesKeywords[i] 
  + ' &lt;/span&gt;';
</code></pre>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals" rel="nofollow noreferrer">Template literals</a> could also be used to generate the strings though note the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#Browser_compatibility" rel="nofollow noreferrer">browser support</a> as that may affect the target audience.</p>
<pre><code>var y = `&lt;span style="color:${typesKeywordsColor}; font-weight:bold; "&gt;${typesKeywords[i]} &lt;/span&gt;`;
</code></pre>
<p>The attribute <code>id</code> must be unique<sup><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id" rel="nofollow noreferrer">1</a></sup> so instead of using multiple elements with the same <code>id</code> attribute (e.g. <code>&lt;span id=\"comment\"</code>), use a class name instead. Also, the inline <code>style</code> attributes should be put into CSS because they aren't so dynamic. Thus variables like <code>keywordsColor</code> can be eliminated from the JavaScript. <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties" rel="nofollow noreferrer">CSS custom properties (variables)</a> could be used if there is a need.</p>
<p>Instead of adding event handlers in HTML, e.g.</p>
<blockquote>
<pre><code>&lt;button type="button" onclick="highlight()"&gt;Highlight&lt;/button&gt; 
</code></pre>
</blockquote>
<p>It can be done in JavaScript in multiple ways. One way (which many prefer) is to use <code>element.addEventListener()</code> which allows adding multiple handlers to an element. For example, presuming an attribute <code>id="highlightButton"</code> is added to that button (though that isnâ€™t the only way to access that element via JS):</p>
<pre><code>document.getElementById('highlightButton').addEventListener('click', highlight);
</code></pre>
<p>This keeps the event handling logic separate from the markup.</p>
<p>There appears to be a <code>style</code> tag with JavaScript in it - I presume the intention was to use <code>script</code> instead. And those styles can be put into the CSS instead (i.e. in <code>style.css</code>). If you were aiming for the styles to be applied at a certain event (e.g. <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/DOMContentLoaded_event" rel="nofollow noreferrer"><em>DOMContentLoaded</em></a>) then apply classes accordingly.</p>
<blockquote>
<pre><code>    &lt;style&gt;
           document.getElementById("Input").style.whiteSpace = "nowrap"; 
           document.getElementById("Output").style.whiteSpace = "nowrap"; 
    &lt;/style&gt;
</code></pre>
</blockquote>
<p>In the styles there is one rule for <code>padding</code> on <code>.nav ul</code>:</p>
<blockquote>
<pre><code>padding: 0px;
</code></pre>
</blockquote>
<p>For <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/length" rel="nofollow noreferrer"><code>&lt;length&gt;</code></a> values "unit is optional after the number <code>0</code>"<sup><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/length#Syntax" rel="nofollow noreferrer">2</a></sup> (and could add confusion<sup><a href="https://stackoverflow.com/a/7923077/1575353">3</a></sup>).</p>
<p>I also see this in the HTML:</p>
<blockquote>
<pre><code>&lt;div style = "white-space = pre !important"&gt;
</code></pre>
</blockquote>
<p>But note that:</p>
<blockquote>
<p>Using `!important, however, is <strong>bad practice</strong> and should be avoided because it makes debugging more difficult by breaking the natural <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Cascade" rel="nofollow noreferrer">cascading</a> in your stylesheets.
<br> ...<br>
Instead of using !important, consider:</p>
</blockquote>
<blockquote>
<ol>
<li>Make better use of the CSS cascade</li>
<li>Use more specific rules. By indicating one or more elements before the element you're selecting, the rule becomes more specific and gets higher priority</li>
</ol>
</blockquote>
<p><sup><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity#The_!important_exception" rel="nofollow noreferrer">4</a></sup></p>
    </div>