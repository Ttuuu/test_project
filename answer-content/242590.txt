<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Avoid unnecessary forward declarations</h1>

<p>The forward declarations of <code>signal_handler()</code> and <code>write_buf()</code> are unnecessary and can be removed. Try to avoid repeating code, the less chance there is for errors.</p>

<h1>Make variables and functions <code>static</code> where appropriate</h1>

<p>If variables and functions do not need to be used from other source files, you can mark them <code>static</code>. This will allow the compiler to better optimize the code.</p>

<h1>Make <code>flag</code> an atomic variable</h1>

<p>It is generally not safe to just set <code>flag = 1</code> in the signal handler and expect the <code>main()</code> function to see it change. That is because the compiler might in some circumstances be allowed to assume that nothing could change the variable <code>flag</code> between iterations in the <code>while</code>-loop, and thus optimize away the check. In this case it will work because the compiler cannot assume that the I/O functions you call in the loop won't change global variables. However, if you were not calling any library functions in the loop, the compiler would probably have elided the check.</p>

<p>The quick way to fix this kind of issue is to make <code>flag</code> <code>volatile</code>. If you can use C11 or later, then you might want to use <a href="https://en.cppreference.com/w/c/atomic" rel="nofollow noreferrer">atomic operations</a> for this.</p>

<h1>Use <code>unsigned long long</code> or <code>uint64_t</code> to store the total size read</h1>

<p>An <code>int</code> typically only holds values up to 2 billion. Files can easily be larger than 2 gigabytes, so you want to use a type that can hold larger values. An <code>unsigned long long</code> will likely be 64 bits, but it is even better to be explicit and use <code>uint64_t</code> from <code>stdint.h</code>.</p>

<h1>Avoid changing the behavior of common signals</h1>

<p>The expectation is normally that <code>SIGINT</code> causes a program to exit immediately, not to print some information and continue. However, it is nice to handle <code>SIGINT</code> in your application and have it exit gracefully, in your case by exitting the loop, then printing the amount of bytes copied:</p>

<pre><code>while (flag) {
    ...
}

printf("The number of bytes copied is: %llu\n", bytes);
</code></pre>

<h1>Alternatives to signals</h1>

<p>Using UNIX signals is always a bit tricky, since there are only a few things you can do in a signal handler that are <a href="http://man7.org/linux/man-pages/man7/signal-safety.7.html" rel="nofollow noreferrer">safe</a>. If you want to provide a progress indicator while copying something, and want the progress indicator to be updated once every second, then a possible way is to create a thread to do this. One issue is that creating a thread is easy, shutting it down properly is another matter.</p>

<p>You can also try to use a buffer size that is so large that it takes about a second to read and write, so you can just print the progress indicator once every iteration in the loop. Or, if you want to keep the buffer small (or if you have another problem where each loop iteration is much faster than a second), you can just have a simple counter that increments for each iteration, and only update the progress indicator once so many iterations.</p>
    </div>