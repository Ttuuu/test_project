<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>PEP-8</h2>

<p>As always, follow the <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP-8</a> coding standards.</p>

<ul>
<li>Don't exceed 79 characters per line</li>
<li>You a space around the <code>=</code> assignment operator (you mostly do this, but violate it in <code>entered_text=textentry.get()</code></li>
</ul>

<h2>Use a main function</h2>

<p>Avoid writing code in the main scope.  Move the code into a <code>main</code> function, and call it ... but only if the script is not imported into another file:</p>

<pre><code>def main():
    window = Tk()
    # ...
    window.mainloop()

if __name__ == '__main__':
    main()
</code></pre>

<h2>Catch only the exceptions you expect</h2>

<p>The following code:</p>

<pre><code>try:
    definition = my_compdictonary[entered_text]
except:
    definition = "Sorry definition not found"
</code></pre>

<p>will catch any and every exception, and ignore them all, regardless of the correct type.  Why is it bad?  Imagine you correct the spelling error in your main program, and change <code>my_compdictonary</code> to <code>my_compdictionary</code>, but you don't correct it in this section of code.  You test the program, and it doesn't crash, but every definition you look up returns <code>"Sorry definition not found"</code>.  Where is the bug?  How hard is it to debug?</p>

<p>If instead the code was written as:</p>

<pre><code>try:
    definition = my_compdictonary[entered_text]
except KeyError:
    definition = "Sorry definition not found"
</code></pre>

<p>the program would crash with a <code>NameError</code>, with the traceback showing you the exact line in question.  Now how hard is it to debug?</p>

<p>In this particular case, the <code>try...except</code> structure is really overkill.  You can provide a default argument when getting a key from the dictionary to handle the key not found case.  That reduces the above four lines to only one:</p>

<pre><code>definition = my_compdictonary.get(entered_text, "Sorry definition not found")
</code></pre>

<h2>Keep related code together</h2>

<p>You have:</p>

<pre><code>output.delete(0.0, END)
# Four
# unrelated
# lines of
# code
output.insert(END, definition)
</code></pre>

<p>It would be clearer to keep <code>output.delete()</code> and <code>output.insert()</code> as back to back lines.  Eg)</p>

<pre><code>definition = my_compdictonary.get(entered_text, "Sorry definition not found")
output.delete(0.0, END)
output.insert(END, definition)
</code></pre>

<h2>Avoid <code>global</code></h2>

<p>Avoid using <code>global</code> as much as possible.  It is a sign of poorly organized code, and makes it harder to reason about the correctness of the code, and harder to test the code because side-effects increase in scope.</p>

<p>In this case, it is simple to avoid the <code>global definition</code> because <code>definition</code> is never used anywhere except in the <code>click()</code> function.  It should not be a global variable; it is local!</p>

<h2>Never ask for more than you need</h2>

<pre><code>with open("glossary.txt", "r+") as file:
</code></pre>

<p>Why are you opening the file for reading plus?  Will you ever be writing to it?  Can the program now accidentally write to the file because it has write privileges, corrupting the file?  You are only reading the file; just open it for reading.</p>

<pre><code>with open("glossary.txt") as file:
</code></pre>

<h2>Be liberal in what you accept</h2>

<p>The <a href="https://en.wikipedia.org/wiki/Robustness_principle" rel="nofollow noreferrer">Robustness Principle</a> warns us about the input we get from the outside.  Be fault tolerant.  Or perhaps better, make it so faults can't happen.</p>

<pre><code>    word, defintions = line.strip().split(" : ")
</code></pre>

<p>What happens when a definition contains a colon?</p>

<pre><code>noun : A person, place, or thing.  Can be classified into two groups : common or proper. 
</code></pre>

<p><code>split(" : ")</code> now returns 3 items, and you've only got variables for two.  So you'll get <code>ValueError: too many values to unpack (expected 2)</code>.  How can you avoid this?  How about telling <code>split()</code> that you only expect to find one delimiter:</p>

<pre><code>    word, defintions = line.strip().split(" : ", 1)
</code></pre>

<p>Now, <code>word</code> is <code>"noun"</code> and <code>defintions</code> is <code>"A person, place, or thing.  Can be classified into two groups : common or proper."</code></p>

<p>What about blank lines?  They will still crash the program.  You might want to test for those as well.  What about non-blank lines that don't have a definition?  Those, well maybe it would be ok if those result in an exception; that would be really bad input in the "glossary.txt".</p>

<hr>

<p>Make it easier for reviewers to run your code.  You have an image <code>'me.gif'</code> in your code that we don't have.  Running without it crashes the program due to file not found.  How big was that image?  32x32?  300x300?  It would affect the size of the resulting window.  Do we just delete the lines of code so we can test the program?</p>

<p>How about <code>'glossary.txt'</code>?  Do we have to guess what the file format is?  Perhaps you could have given a sample file with 3 or 4 entries.</p>

<hr>

<h2>Future Improvements</h2>

<p>You might want to allow the user to look up a definition by just pressing "Enter" after typing in the word.  The way it works right now, the user has to move their hands from the keyboard to the mouse.</p>

<p>What if the user enters with CAPS LOCK on?  What if the definition is provided with a capital letter?  Is the definition really not found?  Could you be a little more liberal in what you accept?</p>

<hr>

<p>Here is a simple refactoring of your original code with some of the suggestions from comments above.  No global variables.  The <code>click()</code> function is moved into <code>main()</code>, so it has access to the local variables <code>textentry</code>, <code>my_compdictonary</code> and <code>output</code>.  The image was deleted, so I could quickly run the program.  The dictionary is generated using list comprehension, and will ignore blank lines.</p>

<p>This is by no means the "best" code.  Many improvements can still be made in naming (can we have something better than <code>click</code>?), spelling of variables, and so on.  Perhaps a <code>class</code> may be in order.  </p>

<pre><code>from tkinter import *

"""
A Computer science glossary made with Tkinter

Requires a "glossary.txt" file with definitions, one per line, with a
space-colon-space separating the term from the definition.  Eg)

    word : a fragment of language
    term : a word or phrase used to describe a thing or to express a concept 

Also should require a "me.gif" image of approximately 64 x 64 pixels, but
that was removed temporarily.
"""

def main():
    """Main function.

       This function creates the UI, and enters the tkinter mainloop.
       It does not return until the user closes the UI."""

    def click():
        entered_text = textentry.get()
        definition = my_compdictonary.get(entered_text,
                                          "Sorry defintion not found")
        output.delete(0.0, END)
        output.insert(END, definition)

    window = Tk()
    window.title("Computer Science Glossary")
    window.configure(background="black")

    Label(window, text="Enter the word you want the definition for:",
          bg="black", fg="white", font="none 12 bold"
         ).grid(row=1, column=0, sticky=N)

    textentry = Entry(window, width=20, bg="white")
    textentry.grid(row=2, column=0, sticky=N)

    Button(window, text="SUBMIT", width=6, command=click).grid(row=3, column=0, sticky=N)

    Label(window, text="\nDefinition:", bg="black", fg="white",
          font="none 12 bold"
         ).grid(row=4, column=0, sticky=N)

    output = Text(window, width=60, height=4, wrap=WORD, background="white")
    output.grid(row=5, column=0, columnspan=1, sticky=N)

    with open("glossary.txt", "r") as file:
        my_compdictonary = dict( (line.split(" : ", 1)) for line in file if line )

    window.mainloop()

if __name__ == '__main__':
    main()
</code></pre>
    </div>