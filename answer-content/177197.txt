<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I can't speak to the application code but I can comment on the stored procedures and hopefully help a little in that area...</p>

<p>@oromrub beat me to the punch with regard to the use of the offset fetch...</p>

<p>Here is how I would typically lay out a stored procedure &amp; why...</p>

<pre><code>-- SET ANSI_NULLS &amp; QUOTED_IDENTIFIER ON...
-- The server "should have these set as the default
-- but it's still a good idea to set them yourself
-- at the procedure level.
SET ANSI_NULLS ON;
GO
SET QUOTED_IDENTIFIER ON;
GO
CREATE PROCEDURE dbo.GetEmployees
/* =========================================================================================================
10/5/2017 Your Name or Initials,  The reason for the procedures existance. Commenting you code is important.
========================================================================================================= */
/* -- sample execution --
EXEC dbo.GetEmployees 
    @PageNumber = 1,
    @RowsPerPage = 30
*/
    @PageNumber INT = 1,
    @RowsPerPage INT = 30
AS
BEGIN
    SET NOCOUNT ON; -- (SET NOCOUNT ON prevents the sending of DONE_IN_PROC messages to the client for each statement in a stored procedure.)

    SELECT
        e.EmployeeId,
        e.FirstName,
        e.LastName  
    FROM
        dbo.Employee e
    ORDER BY
        e.EmployeeId
    OFFSET (@PageNumber - 1) * (@RowsPerPage + 1) ROWS FETCH NEXT @RowsPerPage ROWS ONLY;
END;
GO
</code></pre>

<p>Here are a few things that should become automatic... Staring from the top...</p>

<p>1) Comment your code! Don't expect to remember why you coded something the way you did a year from now. I like having a dedicated section at the top so it's always easy to figure out what the proc is for, when it was initially created and what revisions have been made over time. Plus it's just a common courtesy for the people you'll be working with.</p>

<p>2) Set NOCOUNT ON; The count messages that SQL Server sends back to let you know how many rows you've affected is fine while you're working SSMS but you don't want them going back to you application.</p>

<p>3) Use aliases!!! Forums are littered with the panicked cries of people who can't figure out why their query is inexplicable returning data that it shouldn't. Here's an example I pulled from an <a href="https://www.red-gate.com/simple-talk/sql/t-sql-programming/ten-common-sql-programming-mistakes/" rel="nofollow noreferrer">article on simple talk</a>... </p>

<pre><code>SELECT sale_date, sale_amount
FROM Sales AS S
WHERE sale_date IN (SELECT sale_date 
                    FROM Calendar AS C
                    WHERE holiday_name IS NOT NULL);
</code></pre>

<p>Even if that wasn't as issue, it would still be important. Once you get more than a few tables joined in a query, it can be a real pain trying to decipher which columns come from which tables.</p>

<p>5) Always include the schema name when referencing a table. For one, it helps SQL Server by saving if from having to check different schemas.</p>

<p>The real biggie... You're querying the same table 3 times to do something really simple. As a rule, you want you code to be as efficient as possible. That means don't make 3 calls to the same table when you can get what you need in one trip. It means a lot more than that, but that's way to broad a topic for a wee forum post.</p>

<p>Anyway, best of luck with the exercise. Hopefully some of this was helpful.</p>

<p>Cheers! :)</p>
    </div>