<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>whether or not the implementation is efficient and memory safe.</p>
</blockquote>

<p><strong>memory safe weakness: <code>int</code> vs. <code>size_t</code></strong></p>

<p>With <em>long</em> strings, length is limited to <code>INT_MAX</code> yet should limit to <code>SIZE_MAX</code>.  Recommend <code>size_t size, end_index</code>.</p>

<p><strong>memory safe weakness: <code>size</code> extreme range</strong></p>

<p>Better code would handle <code>size == 0</code> and detect when <code>size * 2</code> overflows. </p>

<pre><code>// str = realloc(str, (*size *= 2) * sizeof(*str));
if (size == 0) size = 2;
else if (size &lt;= SIZE_MAX/2) size *= 2;
else tbd_code();
str = realloc(str, size * sizeof(*str));
</code></pre>

<p><strong>Memory efficient strength: allocation</strong></p>

<p>Good to use exponential allocation growth of size  </p>

<p><strong>Maintenance efficient strength: <code>sizeof *ptr</code></strong></p>

<p><code>sizeof(*strarr)</code> or <code>sizeof *strarr</code> easier to code right, review and maintain than <code>sizeof (some_type)</code> </p>

<p><strong>Functional weakness: <code>get_string()</code> and EOF</strong></p>

<p>When end-of-file (and nothing read), code returns an empty string.  This is indistinguishable from first reading a <em>null character</em>.</p>

<p>When a rare input error, there is no indication of a problem.  Code simply forms a string of characters read up to that point.</p>

<p>Perhaps return <code>NULL</code> on those cases instead.</p>

<p><strong>Memory safe strength: destroying <code>NULL</code></strong></p>

<p><code>free()</code> allows <code>free(NULL)</code>.  <code>destroy_strarr(NULL,0)</code> is allowed: good.</p>

<p><strong>Memory safe weakness: missing free strategy</strong></p>

<p><code>stringfuncs.h</code> should outline what needs to be free'd and how.  Assume user of your good code only sees the .h file.</p>

<p><strong>General feedback</strong></p>

<ul>
<li><p>Namespace of functions should be made uniform.  Recommend prefix that matches .h file name.</p></li>
<li><p><code>#pragma once</code> ubiquitous, but not standard C.</p></li>
<li><p><code>fprintf(stderr, #alloc_type " failed in " #location)</code> deserves a <code>'\n'</code>.</p></li>
<li><p>I am tempted to put <code>char *str, size_t end_index, size_t size</code> in a <code>struct</code>.</p></li>
<li><p><code>const</code> in <code>const char delimiter</code> of <code>split_string()</code> <em>declaration</em> serves no purpose.</p></li>
<li><p>Private functions in <code>stringfuncs.c</code> should be <code>static</code>.</p></li>
</ul>
    </div>