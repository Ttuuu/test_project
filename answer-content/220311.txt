<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Disclosure</strong>: I know that it has been ~6 days since Mangus's answer was submitted and <a href="https://codereview.stackexchange.com/questions/219922/tic-tac-toe-code-in-javascript#comment425167_219951">you have already updated your code</a>. However, I still have suggestions that will hopefully help.</p>

<h2>Your Questions</h2>

<blockquote>
  <p>Can you tell me how to optimize more and what are the missing things?</p>
</blockquote>

<p>See the suggestions below for optimizing code. I am not really sure what is "missing"... that could be a very broad subject.</p>

<blockquote>
  <p>The logic, modular approach, testable and scalable?</p>
</blockquote>

<p>I'm not sure what exactly to say about the logic. It does seem a bit complex - possibly more complicated than it needs to be. In that same vein, the code that adds and removes event handlers depending on the state of the game seems excessive. Could the click handler just be registered once and have it check the state of the game?</p>

<p>Obviously the code is <em>testable</em> using manual testing. If you want to use automated testing then that may be possible -perhaps with a framework like mocha/chai or something similar. I haven't worked with testing UI code much but you could write unit tests for the various functions.</p>

<h2>Feedback and Suggestions</h2>

<h3>ES-6, constants</h3>

<p>As Magnus's answer mentioned  - <a href="/questions/tagged/ecmascript-6" class="post-tag" title="show questions tagged 'ecmascript-6'" rel="tag">ecmascript-6</a> features like <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const" rel="nofollow noreferrer"><code>const</code></a> and <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let" rel="nofollow noreferrer"><code>let</code></a> can be used to limit the scope of variables and avoid accidental re-assignment. And most idiomatic code in c-based languages have constants in all capitals. So you could do that for <code>resultsList</code>. Also, a more appropriate name would be something like <code>WINNING_COMBINATIONS</code> or something instead of <code>RESULTS_LIST</code>, because it is a list of combinations.</p>

<hr>

<h3>DOM references can be simplified</h3>

<p>Let's look at the callback function for the click events for <code>start</code> - every time that function runs, there are DOM queries for four elements: <code>#player-one-name</code>, <code>#player-two-name</code>, <code>#p1-infospan</code>, <code>#p2-info span</code>. Those should all happen once when the DOM is ready and be stored in Javascript variables.</p>

<h3>Scope of variable <code>i</code> in <code>winnerFinder()</code></h3>

<p>In <code>winnerFinder()</code> I see this:</p>

<blockquote>
<pre><code>var i = 0;
resultsList.forEach(function(element) {
  i = 0;
  player.forEach(function(ele) {
    if (element.indexOf(ele) &gt;= 0) {
      i++;
    }
  });
</code></pre>
</blockquote>

<p>Initially I am confused why <code>i</code> is set to <code>0</code> outside the <code>foreach</code> and then set to <code>0</code> in each iteration. One could just declare <code>i</code> inside the loop, since it doesn't appear to be used outside the inner function. After really thinking about this, <code>i</code> is a count of the elements that are contained with <code>element</code>... so <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter" rel="nofollow noreferrer"><code>Array.filter()</code></a> could be used:</p>

<pre><code>i = player.filter(function(ele) {
  return element.indexOf(ele) &gt;= 0;
}).length;
</code></pre>

<p>This could also be simplified using arrow function notation:</p>

<pre><code>i = player.filter( ele =&gt; element.indexOf(ele) &gt;= 0 ).length;
</code></pre>

<p>And if <code>element</code> is an array, then <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes" rel="nofollow noreferrer"><code>Array.includes()</code></a> could be used instead of <code>indexOf()</code>.</p>

<h3>Resetting class names for tiles</h3>

<p>Inside <code>resetBoard</code> I see this:</p>

<blockquote>
<pre><code>tile.forEach(function(ele, index) {
  tile[index].className = 'tile';
});
</code></pre>
</blockquote>

<p>Why not use <code>ele</code> instead of <code>tile[index]</code>? </p>

<p>It appears that you are removing any color class - so you could use <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/classList#Methods" rel="nofollow noreferrer"><code>classList.remove()</code></a> and do something like:</p>

<pre><code>ele.classList.remove('red', 'blue');
</code></pre>

<p>And <code>classList.add()</code> could be used to add the class name in the <code>startMatrix</code> function.</p>

<h3>Registering the click handler on the restart button</h3>

<p>Towards the end of the JS code I see this:</p>

<blockquote>
<pre><code>var restart = document.getElementById('restart');
restart.addEventListener('click', function() {
  resetBoard();
});
</code></pre>
</blockquote>

<ol>
<li><p>When adding an event listener with an anonymous function that merely calls a single function, a function reference can be used instead:</p>

<pre><code>restart.addEventListener('click', resetBoard);
</code></pre></li>
<li><p><code>restart</code> is only used once so it is a waste of memory to assign it to a variable - use it without the variable:</p>

<pre><code>document.getElementById('restart').addEventListener('click', resetBoard);
</code></pre>

<p>Though if you take my suggestion of caching DOM references when the DOM is ready, ideally you would use a reference like <code>restartButton</code>:</p>

<pre><code>restartButton.addEventListener('click', resetBoard);
</code></pre></li>
</ol>

<h3>click handler function: <code>startMatrix()</code></h3>

<p>The name of this function could have a more appropriate name, like <code>matrixClickHandler()</code> or something along those lines.</p>

<p>I see it accepts the <code>event</code> parameter, but as <code>$event</code>. </p>

<pre><code>var startMatrix = function($event) {
  var target = $event.target;
</code></pre>

<p>It isn't wrong to name variables with a dollar sign in the beginning. jQuery code has a convention of doing this but many JavaScript developers believe that should be left to jQuery core code or plugins, or variables that come from library code like jQuery. This event object should just be <a href="https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent" rel="nofollow noreferrer">MouseEvent</a>, so there isn't really a need to prefix it with a dollar sign.  See responses to <a href="https://stackoverflow.com/q/205853/1575353">Why would a JavaScript variable start with a dollar sign?</a> for more context. </p>
    </div>