<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Warning</strong>: I did not run your code, and the revised version is not tested.</p>

<ol>
<li>Get familiar with <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP 8</a> style guide. You violate some of its points, like maximum line length and naming conventions (upper case is for constants).</li>
<li>Use <a href="https://docs.python.org/library/pathlib.html" rel="nofollow noreferrer">pathlib</a> over <code>os</code>. It has many nice features that will make your life easier. </li>
<li><p>You use dicts incorrectly in lines like this one:</p>

<blockquote>
<pre><code>BEFORE = dict([(f, None) for f in os.listdir(PATH_TO_WATCH)])
</code></pre>
</blockquote>

<p>There is no point in having the pairs of "file"-<code>None</code> and never update the values. Probably, you meant to use <a href="https://docs.python.org/tutorial/datastructures.html#sets" rel="nofollow noreferrer">sets</a> instead.</p></li>
<li><p><code>while 1:</code> should be <code>while True:</code>.</p></li>
<li><p><a href="https://softwareengineering.stackexchange.com/questions/103233/why-is-dry-important">Don't repeat yourself</a>. The code following after <code>if ADDED:</code> line has code blocks with the same logic over and over again. Consider putting all those <code>ORC_MALE</code>, <code>ORC_MALE_MAG</code>, etc. in a set, and check if an added file is in that set. If it is, you move the file from one location to another where the path names of both locations can be constructed from the names in the initial set. </p></li>
<li><p>Don't repeat yourself again. In those lines where you create new names of the files that are going to be moved, you repeat the code in <code>try</code> and <code>except FileExistsError:</code> clauses: </p>

<blockquote>
<pre><code>try:
    os.rename((PATH_TO_WATCH + ''.join(ADDED)), \
    ('./tf_models/orc_male/orc_male_' + str(DIR_LEN+1) + '.jpg'))
except FileExistsError:
    os.rename((PATH_TO_WATCH + ''.join(ADDED)), \
    ('./tf_models/orc_male/orc_male_' + str(DIR_LEN+1) + 'a.jpg'))
</code></pre>
</blockquote>

<p>Take the common logic out.</p></li>
<li><p>Split the logic into smaller functions. Now you have a huge block of code that does too many things.</p></li>
<li><p>Make use of <a href="https://docs.python.org/3/whatsnew/3.6.html#pep-498-formatted-string-literals" rel="nofollow noreferrer">f-strings</a></p></li>
</ol>

<p><strong>Revised code:</strong>  </p>

<pre><code>"""This script provides automatically file ordering."""
import time
from pathlib import Path
from typing import (Any,
                    Iterable,
                    Iterator,
                    Set)

IMAGES_PATHS = {'orc_male.jpg',
                'orc_male_mag.jpg',
                'orc_female.jpg',
                'darkelf_male.jpg',
                'darkelf_female.jpg',
                'human_male.jpg',
                'human_male_mag.jpg',
                'human_female.jpg',
                'elf_male.jpg',
                'elf_female.jpg',
                'dwarf_male.jpg',
                'dwarf_female.jpg'}

PATH_TO_WATCH = Path('tf_models', 'tree_checker')


def run_transfer(path: Path,
                 *,
                 sleep_time: int = 1,
                 check_against: Set[str]) -&gt; None:
    """TODO: add docstring"""
    files_before = set(path.iterdir())
    moved_files_count = 0
    try:
        while True:
            time.sleep(sleep_time)
            files_after = set(path.iterdir())
            added_files = files_after - files_before
            for added_file in added_files:
                if added_file.stem in check_against:
                    transfer_file(added_file)
            moved_files_count += len(added_files)
            files_before = files_after
            if moved_files_count % 10 == 0 and moved_files_count &gt; 0:
                print(f'Currently moved {str(moved_files_count)} files. '
                      f'- {str(time.clock)}')
    except KeyboardInterrupt:
        print(moved_files_count)


def transfer_file(file: Path) -&gt; None:
    """TODO: add docstring"""
    path = Path('tf_models', file.stem)
    dir_len = dir_length(path)
    path_to_rename = PATH_TO_WATCH / file
    new_name = Path('tf_models',
                    file.stem,
                    f'{file.stem}_{str(dir_len + 1)}.jpg')
    if new_name.exists():
        new_name = new_name.parent / f'{new_name.stem}a.jpg'
    path_to_rename.rename(new_name)


def dir_length(path: Path) -&gt; int:
    """
    Returns the length of given directory,
    e.g the amount of files inside the folder.
    """
    return capacity(files_paths(path))


def files_paths(path: Path = '.') -&gt; Iterator[Path]:
    yield from filter(Path.is_file, Path(path).iterdir())


def capacity(iterable: Iterable[Any]) -&gt; int:
    return sum(1 for _ in iterable)


if __name__ == '__main__':
    run_transfer(PATH_TO_WATCH, check_against=IMAGES_PATHS)
</code></pre>

<p>Note how simple became the logic of getting newly added files when using sets.</p>

<p>You should also do something with the <code>'tf_models'</code> string. It shouldn't be hardcoded, and it's better to take it out as a constant or a default parameter. </p>
    </div>