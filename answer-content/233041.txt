<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your biggest error is that you're not defining consonants and vowels as arrays of characters, but as a succession of single character joined by OR <code>||</code> conditions:</p>

<pre><code>irb(main):046:0&gt; consonants = ("b" || "c" || "d" || "f" || "g" || "h" || "j" || "k" || "l" || "m" || "n" || "p" || "q" || "r" || "s" || "t" || "v" || "w" || "x" || "y" || "z")
=&gt; "b"
irb(main):047:0&gt; vowels = ("a" || "e" || "i" || "o" || "u")
=&gt; "a"
</code></pre>

<p>so <code>'b'</code> and <code>'a'</code> will be always <code>true</code>, then the rest of strings are ignored.<br>
The real way to define <a href="https://docs.ruby-lang.org/en/2.0.0/Array.html" rel="nofollow noreferrer">arrays in ruby</a> is with square braces and separated by comma, like <code>['a', 'b']</code>. For your case, a simplified way to define array of strings is with <code>%w</code>, so you don't need to repeat quotes and comma symbols.</p>

<p>Another problem is, when you iterate your <code>sentence</code> array, at the end of the <code>.each</code> you're returning the first <code>pig</code> word created. Then you should create a pig array or concatenate resulting words to finally return <code>pig</code> out of the loop (this last option is what I'm going to use it).</p>

<pre><code>  # these constants will be always the same, so I left them out of the method as
  # freezed constants, so there's no need to define them every time the method is 
  # invoked
  CONSONANTS = %w[b c d f g h j k l m n p q r s t v w x y z].freeze
  VOWELS = %w[a e i o u].freeze

  # defaulting to an empty string in case no strings are added
  def translate(sentence = '')
    # This is going to start as an empty string
    pig = ''
    # I think there's a naming misconception here. You're receiving a sentence
    # as parameter, which is composed of words. That's why I changed the
    # variable names.
    # Also, I'm calling `.split` without a parameter, as a space is the default.
    words = sentence.split
    words.each do |word|
      if VOWELS.include?(word[0])
        # To every string I'm concatenating the resulting word, which it has a
        # final space to be removed just before to return the result.
        pig &lt;&lt; "#{word}ay "

      elsif CONSONANTS.include?(word[0])
        c = word[0]
        pig &lt;&lt; word.delete(c).insert(-1, c) + 'ay '

      elsif VOWELS.include?(word[0]) &amp;&amp; CONSONANTS.include?(word[0])
        c = word[0]
        pig &lt;&lt; "#{word}ay" + word.delete(c).insert(-1, c) + 'ay '

      elsif word[0].include?('c') &amp;&amp; word[1] == 'h'
        c = word[0..1]
        pig &lt;&lt; word.delete(c).insert(-1, c) + 'ay '

      elsif word[0] == 't' &amp;&amp; word[1] == 'h' &amp;&amp; word[2] == 'r'
        c = word[0..2]
        pig &lt;&lt; word.delete(c).insert(-1, c) + 'ay '

      elsif word[0..2].include?('sch')
        c = word[0..2]
        pig &lt;&lt; word.delete(c).insert(-1, c) + 'ay '

      elsif word[0..1].include?('qu')
        c = word[0..1]
        pig &lt;&lt; word.delete(c).insert(-1, c) + 'ay '

      elsif word.include?('squ')
        c = word[0..2]
        pig &lt;&lt; word.delete(c).insert(-1, c) + 'ay '

      end
    end
    # No need to explicitly call `return` as the last value will be what will
    # return this method.
    # Finally calling `.rstrip` to remove trailing space in the final pig word
    pig.rstrip
  end
</code></pre>

<p>With this, no matter how many words you add it:</p>

<pre><code>irb(main):045:0&gt; translate 'eat a lot of pie'
=&gt; "eatay aay otlay ofay iepay"
</code></pre>

<p>There's still some space to make improvements in this code, maybe moving part of the logic to new methods, but I leave that to you.</p>
    </div>