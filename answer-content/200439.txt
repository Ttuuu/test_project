<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Bugs</h2>

<p>Your program produces these erroneous results:</p>

<ul>
<li><p><code>0,5,5,5,5,5,5,5,9</code> → <code>Impossible</code> (should be <code>09:55:55</code>)<br>
<code>0,2,5,5,5,5,5,5,5</code> → <code>Impossible</code> (should be <code>20:55:55</code>)</p>

<p>Due to tests like <code>if hrs[0]</code>, <code>if hrs[1]</code>, <code>if mins[1]</code>, and <code>if secs[1]</code>, hours, minutes, or seconds is a multiple of 10, or if the hour starts with <code>0</code>.</p></li>
<li><p><code>2,2,4,4,4,4,4,4,7</code> → <code>24:47:44</code> (should be <code>22:47:44</code>)</p>

<p>The challenge states that <code>24:00:00</code> is the upper bound.  The correct answer, <code>22:47:44</code>, demonstrates that a <strong>naïve greedy algorithm is not sufficient</strong> to solve this problem.  You might optimistically select <code>24</code> for the hour (which would work for input such as <code>0,0,0,0,2,4,9,9,9</code>).  However, for the input <code>2,2,4,4,4,4,4,4,7</code>, you should then find that there is no valid minute if you pick <code>24</code> as the hour, and you would <strong>need to backtrack</strong> and try <code>22</code> for the hour.</p></li>
</ul>

<h2>Algorithm</h2>

<p>There is no need to implement <code>bubbleSort</code>.  Just call <a href="https://docs.python.org/3/library/functions.html#sorted" rel="nofollow noreferrer"><code>sorted(seq_a, reverse=True)</code></a>.  (By <a href="https://www.python.org/dev/peps/pep-0008/?#naming-conventions" rel="nofollow noreferrer">PEP 8 naming conventions</a>, the function should be named <code>bubble_sort</code>.)</p>

<p>Your code is repetitive: you write a similar <code>for</code> loop to handle each of the six digits.  You should generalize them to be handled by one loop, which accepts different upper limits for each digit.  Note that you use <code>&lt;=</code> tests for most of those loops, but <code>&lt; 6</code> for some loops — the inconsistency is confusing.</p>

<h2>Suggested solution</h2>

<p>I would define a <code>placewise_max</code> function to generalize all of your loops, then call it with three limiting template strings.  Instead of loops with <code>break</code> statements, though, I would use <a href="https://stackoverflow.com/q/2361426/1157100"><code>next()</code> with a generator expression</a>.</p>

<p>Note that there is no need to parse each character as a numeric digit: ASCII comparison will work just as well.</p>

<pre><code>def placewise_max(max_template, pool):
    """
    Try to form the lexicographically greatest string from the characters in
    the pool, where the character in each position of the output does not
    exceed the character at the corresponding position in the template.
    Return the empty string if any position cannot be filled.

    &gt;&gt;&gt; placewise_max('91210', list('02301'))
    '31200'
    &gt;&gt;&gt; placewise_max('elmo', 'abcdefghijklm')
    'elmk'
    &gt;&gt;&gt; placewise_max('elmo', 'limo')
    ''
    """
    pool = sorted(pool, reverse=True)
    output = []
    try:
        for t in max_template:
            char = next(c for c in iter(pool) if c &lt;= t)
            pool.remove(char)
            output.append(char)
        return ''.join(output)
    except StopIteration:   # next() failed to pick from the pool
        return ''

def max_time(digits):
    best = max(
        placewise_max('240000', digits),
        placewise_max('235959', digits),
        placewise_max('195959', digits)
    )
    if best and (best != '000000'):
        return '{0}{1}:{2}{3}:{4}{5}'.format(*best)

if __name__ == '__main__':
    print(max_time(input().split(',')) or 'Impossible')
</code></pre>

<h2>Educational tips</h2>

<p>The solution above uses some rather advanced techniques, and may be overwhelming for a beginner.  However, I would point out an essential next step for improving your coding skills.</p>

<p>It is critical to learn to <strong>write functions</strong>, each with a clearly defined purpose, that accept parameters, return results, and use no global variables.  Document the purpose, parameters, and outputs in a docstring, as I've done.  That will force you to package your code into small, reusable chunks.  For example, can you write a function that accepts a string (or list) of characters, and that returns a tuple with two items — the best possible hour that can be formed from those characters, and all the leftover characters that were not used to form the hour?</p>

<p>Defining a function is necessary to solve this problem correctly, because, as I've pointed out above, a correct solution requires some trial and error.  If you are unable to reuse the code that performs the trials, then you will end up writing if-else statements to handle all of the failure cases, and it's going to be a huge mess!</p>
    </div>