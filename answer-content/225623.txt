<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>General coding style and other useful tips</h2>

<p><strong>Tip 1</strong>
When using conditions, you don't need to type <code>x == True</code>, which means : </p>

<pre><code>while anotherGo == True:
</code></pre>

<p>can be : </p>

<pre><code>while anotherGo:
</code></pre>

<p><strong>Tip 2</strong> Don't use <code>time.sleep</code> for nothing. It could create confusion as to why you're using it when, I think, you're using it just so the program doesn't go too fast, but... why would you want that? :)</p>

<p><strong>Tip 3</strong> When you use if/else, you can move the common code to the end or the beginning of the conditions, this removes code duplication : </p>

<pre><code>if f_player == "USER":
    time.sleep(0.5)
    userIn,f_player = users_pick("\nEnter your choice [1, 2 or 3]: ", 1, 4, 20,nimBoard)
    nimBoard = update_board(nimBoard,userIn)
    display_board(nimBoard)
    print("\nThere are " + str(len(nimBoard)) + " stick(s) remaining.")
else:
    time.sleep(1)
    nimBoard, f_player,winning_position, earlier_move = computers_move(nimBoard,userIn,s_player,winning_position,earlier_move)
    time.sleep(1)
    display_board(nimBoard)
    print("\nThere are " + str(len(nimBoard)) + " stick(s) remaining.")
</code></pre>

<p>Becomes : </p>

<pre><code>if f_player == "USER":
    userIn,f_player = users_pick("\nEnter your choice [1, 2 or 3]: ", 1, 4, 20,nimBoard)
    nimBoard = update_board(nimBoard,userIn)

else:
    nimBoard, f_player,winning_position, earlier_move = computers_move(nimBoard,userIn,s_player,winning_position,earlier_move)

display_board(nimBoard)
print("\nThere are " + str(len(nimBoard)) + " stick(s) remaining.")
</code></pre>

<p><strong>Tip 4</strong> If all your prints start with a line break, you could consider creating an helper function so you don't have to retype it every time : </p>

<pre><code>def printn(s):
    print("\n" + s)
</code></pre>

<p><strong>Tip 5</strong> Create constants for those "magic numbers". When I read : </p>

<p><code>users_pick("\nEnter your choice [1, 2 or 3]: ", 1, 4, 20,nimBoard)</code></p>

<p><strong>Tip 6</strong> You don't pay per character written, use meaningful variable names</p>

<p>Instead of having a variable named <code>userIn</code>, you could consider naming it <code>userInput</code>. It's... 3 more characters, but it's also much clearer what it does</p>

<p>I need to go check the function definition to see what <code>1,4,20</code> mean. If you had constants named <code>MIN_STICK = 1, MAX_STICKS=4, USERIN=20</code>.</p>

<h2>Python tips</h2>

<p><strong>Tip 1</strong> If you create an array with the same value multiple times, you can do : </p>

<pre><code># Notice how nice it is not to have to count to see the number of sticks
["/"] * 17
</code></pre>

<p>instead of :</p>

<pre><code>["/","/","/","/","/","/","/","/","/","/","/","/","/","/","/","/","/"]
</code></pre>

<p>But I also think you don't need this array at all. You could simply keep the number of sticks available as an <code>int</code> and decrease it when necessary. This array is used to print the board, so you shouldn't mix the display logic with the game logic, it'll make code easier to maintain and to read.</p>

<p><strong>Tip 2</strong> Use only one naming style</p>

<p>You mix <code>snake_case</code> and <code>camelCase</code> in your code, which makes the code harder to read. Since you're using Python, you should stick to <code>snake_case</code>.</p>

<h2>Code "cleanness"</h2>

<p>In the <code>users_pick</code> method, you pass a <code>userIn</code> that's higher than the maximal accepted value, only so that your <code>while</code> loop works (I suspect). Don't do this, as a matter of fact, you shouldn't pass <code>userIn</code> at all as a parameter, because you completely ignore the input.</p>

<hr>

<p>In <code>users_pick</code> again. Doing this : <code>userIn not in range(minStick, maxStick)</code> might look "great", but it also means every time you call this you generate a range, only to check if the value is in there, why not use <code>userIn &lt; minStick or userIn &gt; maxStick</code> that's much faster and more... logical.</p>

<hr>

<p>I'm not sure if it's a copy/paste error, but in the <code>who_starts</code> method you set both <code>f_player</code> and <code>s_player</code> to the same values.</p>

<p>All in all, I think you should try to separate the display logic and the game logic in your code. You've done it pretty well regarding user inputs, but for example, you don't need to keep an array of <code>/</code> to see where the game is at.</p>
    </div>