<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>PEP-8 Guidelines</h2>

<p>Your code violates the PEP-8 standard in several area, including (but not limited to):</p>

<ul>
<li>Operators should have 1 space before and after the operator (<code>y + h</code> instead of <code>y+h</code>)</li>
<li>One space after commas (<code>x, y, w, h</code> not <code>x,y,w,h</code>)</li>
<li>Slices should not have any spaces around the colon (<code>y:y_end</code> not <code>y: y_end</code>)</li>
</ul>

<h2>Spelling</h2>

<p>Columns is spelt with an <code>n</code>.</p>

<h2>Meaningful names</h2>

<p>I don't know what <code>cal_patches</code> means.  Is <code>cal</code> short for "calculate"?  Your question title says "partition"; perhaps that should be part of the function name.</p>

<h2><code>docstring</code></h2>

<p>Add a doc-string to <code>help()</code> the user understand what the function does, and what the function returns ... without having to consult the source code.</p>

<h2>Type Hints</h2>

<p>With Python 3.6+, you can add type hints to the function to further improve understanding about what the function requires and what it returns:</p>

<pre><code>def cal_patches(img: Image, num_colums: int) -&gt; List[Image]:
</code></pre>

<h2>Useful arguments</h2>

<p>The function can partition the image into a number of vertical columns.  What if I wanted a number of rows as well?  I can't request that.</p>

<p>Oh wait!  It does do rows too.  But always the same number of rows and columns.  Perhaps add <code>num_rows</code> to the argument list too?</p>

<h2>Integer division</h2>

<p><code>int(n / d)</code> is verbose and unnecessary.  Use the integer division operator <code>n // d</code>.</p>

<h2>Unused variables</h2>

<p><code>ind</code> is never used anywhere, and could be removed.</p>

<p><code>i</code> and <code>j</code> are never used anywhere, so could be replaced by the "throwaway" variable <code>_</code>.  Even better, you could use the <code>w</code> and <code>h</code> values as the step size for the <code>range()</code>, and get rid of the <code>x += w</code> and <code>y += h</code> statements:</p>

<h2>Avoid calculating unchanging values</h2>

<p>In the inner loop, <code>y</code> is not changing, so <code>y_end</code> results in the same value each iteration of the inner loop.  It can be moved out of the inner loop.</p>

<h2>Bug?</h2>

<p>The inner loop goes over the number rows, but is increase <code>x</code> by <code>w</code>, which is a column increment.  Did you accidentally swap the rows and columns?  It works as long as <code>num_rows == num_columns</code>, but it will cause grief when that is relaxed.</p>

<hr>

<h2>Updated code</h2>

<pre><code>def create_image_patches(img, num_rows, num_columns):
    """
    Partition an image into multiple patches of approximately equal size.
    The patch size is based on the desired number of rows and columns.
    Returns a list of image patches, in row-major order.
    """

    patch_list = []
    width, height = img.shape[1], img.shape[0]
    w, h = width // num_columns, height // num_rows

    for y in range(0, height, h): 
        y_end = min(y + h, width)
        for x in range(0, width, w):
            x_end = min(x + w, height)
            patch = img[y:y_end, x:x_end]
            patch_list.append(patch)

    return patch_list
</code></pre>

<p>Add type hints using the <code>typing</code> module.</p>

<hr>

<h2>Generator</h2>

<p>As suggested by <a href="https://codereview.stackexchange.com/users/98493/graipher">@Graipher</a>, this function could be turned into a generator, which may be useful depending on how the patches are processed downstream:</p>

<pre><code>def generate_image_patches(img, num_rows, num_columns):
    """
    Generate image patches of approximately equal size from a source image.
    The patch size is based on the desired number of rows and columns.
    Patches are generated in row-major order.
    """

    width, height = img.shape[1], img.shape[0]
    w, h = width // num_columns, height // num_rows

    for y in range(0, height, h): 
        y_end = min(y + h, width)
        for x in range(0, width, w):
            x_end = min(x + w, height)
            yield img[y:y_end, x:x_end]
</code></pre>

<p>A "helper" function could be used to turn the generator back into a <code>list</code>, if required for existing callers of the function:</p>

<pre><code>def create_image_patches(img, num_rows, num_columns):
    """
    Partition an image into multiple patches of approximately equal size.
    The patch size is based on the desired number of rows and columns.
    Returns a list of image patches, in row-major order.
    """

    return list(generate_image_patches(img, num_rows, num_columns))
</code></pre>
    </div>