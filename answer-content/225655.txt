<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Shims are wonderful</h3>
<p>I recommend using a shim to offload all the logic to a function manipulating a list (rather than a pack) of arguments. As a bonus, you'll also be able to push the bulk of the implementation into a <code>.cpp</code> file.</p>
<p>Essentially, your goal is to invoke:</p>
<pre><code>namespace details {

class Argument {
public:
    virtual void print(std::ostream&amp; out) const = 0;
protected:
    ~Argument() = default;
};

void print_impl_inner(
    std::ostream&amp; out,
    std::string_view format,
    std::span&lt;Argument const*&gt; arguments
);
</code></pre>
<p>This is done by creating a shim for each argument:</p>
<pre><code>template &lt;typename T&gt;
class ArgumentT final : public Argument {
public:
    explicit ArgumentT(T const&amp; t): mData(t) {}

    void print(std::ostream&amp; out) const final { out &lt;&lt; mData; }

private:
    T const&amp; mData;
};

template &lt;typename T&gt;
ArgumentT&lt;T&gt; make_argument(T const&amp; t) { return ArgumentT&lt;T&gt;(t); }
</code></pre>
<p>And then automating the creation and passing of the shims:</p>
<pre><code>template &lt;typename... Args&gt;
void print_impl_outer(
    std::ostream&amp; out,
    std::string_view format,
    Args const&amp;... args
)
{
    Arguments const* const array[sizeof...(args)] =
        { static_cast&lt;Argument const*&gt;(&amp;args)... };
    print_impl_inner(out, format, array);
}

} // namespace details

template &lt;typename... Args&gt;
void print(
    std::ostream&amp; out,
    std::string_view format,
    Args&amp;&amp;... args
)
{
    details::print_impl_outer(out, format,
        details::make_argument(std::forward&lt;Args&gt;(args))...);
}
</code></pre>
<p>Thus the user interface is this variadic template <code>print</code> function, however the actual implementation is done in <code>details::print_impl_inner</code>, which is only declared in the header.</p>
<p>Then, in a <code>.cpp</code> file:</p>
<pre><code>void details::print_impl_inner(
    std::ostream&amp; out,
    std::string_view format,
    std::span&lt;Argument const*&gt; arguments
)
{
    std::size_t a = 0;

    for (std::size_t i = 0, max = format.size(); i != max; ++i) {
        switch (format[i]) {
        case '%':
            if (a == arguments.size()) {
                throw std::invalid_argument{"Too few arguments"};
            }
            arguments[a]-&gt;print(out);
            ++a;
            break;
        case '\\':
            ++i;
            if (i == max) {
                throw std::invalid_argument{
                    "Invalid format string: stray \\ at end of string"};
            }
            [[fallthrough]];
        default:
            os &lt;&lt; format[i];
        }
    }
}
</code></pre>
<p>Note: if you do not have access to <code>std::span</code>, you can use <code>gsl::span</code> with minor adaptations.</p>
<h3>Extensibility</h3>
<p>The beauty of this architecture is dual:</p>
<ul>
<li>You can easily improve the <code>format</code> scan pass and printing without any guilt at "polluting" the header.</li>
<li>You can easily implement <em>indexed</em> access to the arguments, that is <code>%N</code> meaning print the N-th argument.</li>
<li>You can easily specialize the printers for a specific subset of arguments, by adding multiple <code>make_argument</code> overloads returning dedicated printers.</li>
</ul>
<p>For example, consider implementing a Python-like format language:</p>
<pre><code>print(std::cout, "Hello {1:&lt;12}, I'm {0:x} years old", my_age, your_name);
</code></pre>
<p>Where 1 and 0 are the indexes and whatever is right of <code>:</code> is a specific format request (here alignment and width).</p>
<p>With this shim implementation, it should be relatively straightforward, and the header will remain lightweight.</p>
    </div>