<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>One simple refactoring for this method could be to simplify the following code block, that is used 9 times in the Method.</p>

<pre><code>    // If there is a royal flush in the computer's hand and the player's hand, the player lost.
    if (PokerHands.RoyalFlush(pPlayerHand) &amp; PokerHands.RoyalFlush(pComputerHand))
    {
        Console.WriteLine("\nBoth players have a royal flush!");
        return false;
    }

    // If there is a royal flush in the player's hand, the player won.
    if (PokerHands.RoyalFlush(pPlayerHand))
    {
        Console.WriteLine("\nYou have a royal flush!");
        return true;
    }

    // If there is a royal flush in the computer's hand, the player lost.
    if (PokerHands.RoyalFlush(pComputerHand))
    {
        Console.WriteLine("\nThe computer has a royal flush!");
        return false;
    }
</code></pre>

<p>To simplify this code block, you could add the following enum and methods:</p>

<pre><code>private enum Winner{ None, Both, Player, Computer }

private static Winner GetWinnerForHand(bool computerHandCheckResult, bool playerHandCheckResult)
{
    if (computerHandCheckResult &amp;&amp; playerHandCheckResult)
        return Winner.Both;

    if (playerHandCheckResult)
        return Winner.Player;

    if (computerHandCheckResult)
        return Winner.Computer;

    return Winner.None;
}

private static void OutputWinnerToConsole(Winner winner, string handText)
{
    if (winner == Winner.Both)
        Console.WriteLine(String.Format("\nBoth players have a {0}!", handText));

    if (winner == Winner.Player)
        Console.WriteLine(String.Format("\nYou have a {0}!", handText));

    if (winner == Winner.Computer)
        Console.WriteLine(String.Format("\nThe computer has a {0}!", handText));
}
</code></pre>

<p>Then you can refactor the code block to:</p>

<pre><code>    // Check for royal flush
    var winner = GetWinnerForHand(PokerHands.RoyalFlush(pComputerHand), PokerHands.RoyalFlush(pPlayerHand));
    if (winner != Winner.None)
    {
        OutputWinnerToConsole(winner, "royal flush");
        return winner == Winner.Player;
    }
</code></pre>

<p>You can get rid of most of the comments because the methods explain, what is happening. You can go further by modifing the GetWinnerForHand to</p>

<pre><code>private static Winner GetWinnerForHand(Func&lt;SuperCard[], bool&gt; check, SuperCard[] computerHand, SuperCard[] playerHand)
{
    var computerHandCheckResult = check(computerHand);
    var playerHandCheckResult = check(playerHand);
    if (computerHandCheckResult  &amp;&amp; playerHandCheckResult)
        return Winner.Both;

    if (playerHandCheckResult)
        return Winner.Player;

    if (computerHandCheckResult )
        return Winner.Computer;

    return Winner.None;
}
</code></pre>

<p>Then you can refactor the code block to:</p>

<pre><code>    // Check for royal flush
    var winner = GetWinnerForHand((hand) =&gt; PokerHands.RoyalFlush(hand), pComputerHand, pPlayerHand);
    if (winner != Winner.None)
    {
        OutputWinnerToConsole(winner, "royal flush");
        return winner == Winner.Player;
    }
</code></pre>

<p>With this change, you can even move the checks in a foreach loop, if you put the expression and handText to a list.</p>
    </div>