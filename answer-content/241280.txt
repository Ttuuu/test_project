<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>On the Javascript side of things:</p>

<p>Don't use inline handlers, they have <a href="https://stackoverflow.com/a/59539045">way too many problems</a> to be worth using. Instead, attach listeners with Javascript and <code>addEventListener</code> instead.</p>

<p>Since on every button click including <code>Search</code>, you want to pass the text content of the button to <code>process</code>, you can do that concisely by examining the <code>textContent</code> of the clicked button inside the handler.</p>

<p>It's generally preferable to select elements with <code>querySelector</code> (which accepts concise, flexible CSS strings) rather than going through <code>document.forms</code>:</p>

<pre><code>document.querySelector('.buttons').addEventListener('click', ({ target }) =&gt; {
  if (!target.matches('button')) return;
  process(target.textContent);
});
</code></pre>

<p>Using the above code will allow you to remove <em>all</em> inline handlers from the <code>.buttons &gt; button</code> elements, including the <code>onclick="process(document.forms.searchform.elements.search.innerText)"</code>.</p>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const process = console.log;
document.querySelector('.buttons').addEventListener('click', ({ target }) =&gt; {
  if (!target.matches('button')) return;
  process(target.textContent);
});</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;div class="buttons"&gt;
  &lt;button name="search" type="button"&gt;Search&lt;/button&gt;
  &lt;button name="new" type="button"&gt;New&lt;/button&gt;
  &lt;button name="edit" type="button" disabled&gt;Edit&lt;/button&gt;
  &lt;button name="save" type="button" disabled&gt;Save&lt;/button&gt;
  &lt;button name="delete" type="button" disabled&gt;Delete&lt;/button&gt;
  &lt;button name="first" type="button" disabled&gt;First&lt;/button&gt;
  &lt;button name="next" type="button" disabled&gt;Next&lt;/button&gt;
  &lt;button name="prior" type="button" disabled&gt;Prior&lt;/button&gt;
  &lt;button name="last" type="button" disabled&gt;Last&lt;/button&gt;
&lt;/div&gt;</code></pre>
</div>
</div>


<p>Best to use <code>textContent</code>, the standard way to extract text from an element, not <code>innerText</code>, a peculiar property from Internet Explorer that has <a href="http://perfectionkills.com/the-poor-misunderstood-innerText/" rel="nofollow noreferrer">pretty strange behavior</a>. <code>innerText</code> is almost never what you want.</p>

<p>Rather than selecting the buttons over and over again in <code>search_mode</code>, <code>found_mode</code>, <code>new_edit_mode</code>, consider selecting them <em>once</em>, and construct an object indexed by element type instead:</p>

<pre><code>const buttons = {};
for (const button of document.querySelectorAll('.buttons &gt; button')) {
  buttons[button.textContent.toLowerCase()] = button;
}

function enableDisableButtons(newVal) {
  for (const button of buttons) {
    button.disabled = newVal;
  }
}
function search_mode() {
  buttons.search.textContent = 'Search';
  enableDisableButtons(true);
  buttons.new.disabled = false;
}

function found_mode() {
  buttons.search.textContent = 'Cancel';
  enableDisableButtons(false);
  buttons.save.disabled = true;
}

function new_edit_mode() {
  buttons.search.textContent = 'Cancel';
  enableDisableButtons(true);
  buttons.save.disabled = false;
}
</code></pre>

<p>You can also save a reference to the <code>status</code> element instead of re-selecting it frequently.</p>

<pre><code>const status = document.querySelector('#status');
// ...
status.innerHTML = "Displaying record " + (current_contact_idx + 1).toString() + " of " + records.contacts.length;
</code></pre>

<p>The above code also points to another issue - unless you're <em>deliberately</em> inserting HTML markup, you should set text content of elements by assigning to <code>textContent</code>, not <code>innerHTML</code>. Using <code>innerHTML</code> can result in arbitrary code execution if the code is untrustworthy, in addition to being slower than <code>textContent</code> and more confusing for script readers. So, for the above, you'd want to instead do</p>

<pre><code>status.textContent = "Displaying record " + (current_contact_idx + 1).toString() + " of " + records.contacts.length;
</code></pre>

<p>In your <code>process</code> function, rather than a whole bunch of <code>if</code>/<code>else</code> checks on the argument, you could consider making an object indexed by the button text instead, whose values are the function you'd want to run when that button needs to be processed. In the handler, just look up the function on the object and run it:</p>

<pre><code>const actionsByButtonText = {
  New: new_step,
  Edit: edit_step,
  Save: save_step,
  // ...
};
function process(buttontext) {
  console.log(`buttontext=${buttontext}`);
  const fn = actionsByButtonText[buttontext];
  if (fn) fn();
  else status.textContent = "something has gone wrong - button text incorrectly set";
}
</code></pre>

<p>(No need to pass <code>form_elements</code> to those functions - they can iterate through the <code>buttons</code> object above, it doesn't make much sense as an argument, since it never changes)</p>

<p>It looks like you're using <code>let</code> by default when declaring variables. Best to <a href="https://www.vincecampanale.com/blog/2017/06/22/const-or-let/" rel="nofollow noreferrer">always use <code>const</code></a> - don't use <code>let</code> unless you have to reassign, and never use <code>var</code> (like in your <code>ajax_post</code>). Using <code>const</code> indicates to later readers of the script, including you, that the variable name will never be reassigned, which results in less cognitive overhead than permitting reassignment with <code>let</code>.</p>

<p>In Javascript, variables are almost always named using <code>camelCase</code>, which you might want to consider if you want to conform.</p>

<p>The script is <em>a bit long</em> - originally, 371 lines. Once you have a script with more than 3-4 functions, I'd strongly consider organizing it using modules instead. Having separate modules which each do their own thing is more maintainable than having one big file. Modules are also useful because the dependencies between them are explicit, rather than everything being global and being able to potentially reference everything else - that can make things a bit confusing when the code isn't trivial. Look into something like <a href="https://webpack.js.org/" rel="nofollow noreferrer">webpack</a>.</p>

<p>You should also consider using proper indentation in the HTML, it'll make the structure more readable at a glance. Eg, this:</p>

<pre><code>  &lt;/nav&gt;
  &lt;section&gt;
    &lt;h1&gt;Contacts&lt;/h1&gt;

&lt;p&gt;Enter text below and click Search button to find a contact&lt;/p&gt;
&lt;form name="searchform" action="/cgi-bin/database.exe" method="POST"&gt;
&lt;label for="rowid"&gt;ID: &lt;/label&gt;
&lt;input id="rowid" type="text" name="rowid" value="" readonly disabled&gt;
</code></pre>

<p>should probably be</p>

<pre><code>&lt;/nav&gt;
&lt;section&gt;
  &lt;h1&gt;Contacts&lt;/h1&gt;
  &lt;p&gt;Enter text below and click Search button to find a contact&lt;/p&gt;
  &lt;form name="searchform" action="/cgi-bin/database.exe" method="POST"&gt;
    &lt;label for="rowid"&gt;ID: &lt;/label&gt;
    &lt;input id="rowid" type="text" name="rowid" value="" readonly disabled&gt;
    ...
</code></pre>

<p>There are other improvements that can be made as well, but this should be a good start.</p>
    </div>