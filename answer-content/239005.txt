<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Nesting function definitions can often be useful, but it's not what you should normally do. Really, everything should be moved <em>outside</em> of the function unless there's a reason (including readability) for it to be inside.</p>

<p>I would also suggest that <code>delayseconds</code> could be an external setting. Or give it a default value. Also, it seems likely that <code>delayseconds</code> is a big part of why the script takes so long!</p>

<p>I'll assume you want <code>delayseconds</code> as a parameter, so I'll use functools to help keep it abstract.</p>

<p><code>do_geocode</code> could be more descriptively named.</p>

<p><code>site</code> needs a better name. Also it looks like you're building a whole object and only using part of it, but I may have misunderstood.</p>

<p>Rather than having temporary columns, package your computation up into a single applyable step.</p>

<pre class="lang-py prettyprint-override"><code>from functools import partial

import pandas as pd
import geopandas as gpd
from shapely.geometry import Point
import geopy as gpy
from geopy.geocoders import GoogleV3
from geopy.extra.rate_limiter import RateLimiter
from geopy.exc import GeocoderTimedOut
from geopy.location import Location


default_coordinates = (0.0, 0.0)

# Initiate geocoder
geolocator = GoogleV3(api_key=g_api_key)

# Create a geopy rate limiter class:
def geocode_with_delay(delayseconds):
    return RateLimiter(
        geolocator.geocode,
        error_wait_seconds=delayseconds + 20,
        min_delay_seconds=delayseconds,
        swallow_exceptions=True,
        return_value_on_exception= site
    )

def point_of_location(loc):
    if loc:
        return Point(tuple(loc.point)[:2])
    else:
        return Point(default_coordinates)

def try_geocode(address, geo_coder):
    try:
        return point_of_location(geo_coder(address))
    except GeocoderTimedOut:
        return point_of_location(geo_coder(address)) # Is there a reason not to just have a default Point()?

def addressParsing(gdf_obj, delayseconds = 0):
    """
    This takes a whole GeoDataFrame and adds the Geo Coords from the standard address
    before returning the udpated Geodataframe
    """

    print(f"starting parser: {gdf_obj.shape}, estimated time: {round(delayseconds * gdf_obj.shape[0] / 60, 2)} min")

    rate_limited = geocode_with_delay(delayseconds)
    geocode_action = partial(try_geocode, geo_coder=rate_limited)

    # Apply the geocoder with delay using the rate limiter:
    gdf_obj['geometry'] = gdf_obj['Address'].apply(geocode_action)

    print("FINISHED - conversion successful - check shape")
    return gdf_obj
</code></pre>

<p>I haven't tested this even to see if it runs.</p>
    </div>