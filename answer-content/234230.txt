<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Errors</h1>

<ol>
<li>You use <code>printf()</code> to print the number of testcases etc. and give it more arguments than specified in the format string (clang: <code>-Wformat-extra-args</code>).</li>
<li>You have conflicting types for <code>mergeSort()</code> as you declare <code>mergesort()</code> (lower-case <code>s</code>!) at the top and the use of <code>mergeSort()</code> in <code>main()</code> implicitly declares <code>int mergeSort()</code> which differs from <code>void mergeSort(int *, int, int)</code>.</li>
<li>The function <code>display()</code> does not exist; it should be called <code>displaySequence()</code>.</li>
<li>You use assertions to check user input, that's wrong. Assertions will be removed from code when <code>NDEBUG</code> is declared and are only used to state and verify assumptions that you already have in the code.  Correct use of the assert would be:

<pre><code>scanf("%d", &amp;test);
if (test &lt;= 0) {
    return 1;
}
/* We can now assume that test &gt; 0 */
assert (test &gt; 0);
</code></pre>

Assertions are used to safeguard against eg. future changes where you might forgot that the following code assumes <code>test &gt; 0</code>.</li>
</ol>

<h1>Good practice</h1>

<ol>
<li>Declare your module-local functions and variables <code>static</code>.</li>
<li>Declare functions taking no arguments as <code>f(void);</code>.  E.g. <code>f();</code> specifies that this function "has no parameters", where "parameter" is a restriction on what kind of arguments this function can take.  "No parameters" means "no restriction", that is the following is legal as long as the implementation of <code>f()</code> actually uses the argument:

<pre><code>f();
g() {
   f(42); // legal
}
</code></pre>

If you instead write <code>f(void);</code> you provide a function prototype with the parameter "no arguments", ie. this is illegal:

<pre><code>f(void);
g() {
   f(42); // illegal
}
</code></pre></li>
<li>Also the C99 feature of mixing declarations and code is useful as it compacts the code more and doesn't make you think "what was that variable used for again?":

<pre><code>int main(void)
{
    /* ... */
    for (/* declaration -&gt; */ int t = 0; t &lt; test; t++) {
        /* ... */
    }
}
</code></pre></li>
<li><em>Don't</em> initialize variables when they don't have a reasonable value yet, eg. <code>num</code>. This only stops the compiler from warning you about "use of uninitialized value" but doesn't help against unwanted behavior.  But if you use the previous point, you can even initialize the variable directly on declaration</li>
<li>Check the return value of library functions such as <code>scanf()</code>:

<pre><code>if (scanf("%d", &amp;test) != 1) {
    return 1;
}
</code></pre></li>
<li>Don't use global variables such as <code>n</code>.</li>
<li>Always pass the length of the buffer when passing it around, ie.:

<pre><code>void displaySequence(size_t len, int *num);
/* void displaySequence(size_t len, int num[len]); &lt;- Alternative syntax */
</code></pre></li>
<li>Use <code>size_t</code> for amounts of memory etc.</li>
<li>You can concatenate C-string-literals if you just write them after another, making this more readable:

<pre><code>printf("N1-&gt;%zu\n"
       "N2-&gt;%zu\n", n1, n2);
</code></pre></li>
<li>Use <code>const</code> where possible.</li>
<li>When allocating, use this:

<pre><code>int *const num = calloc(sizeof (*num), n);
</code></pre>

instead of:

<pre><code>int *const num = calloc(sizeof (int), n);
</code></pre>

As it allows you to change the type and the code will not (possibly silently) fail.</li>
<li>Use <code>perror</code> to get localized and standardized error messages (<code>calloc()</code> setting <code>errno</code> is however a POSIX C extension and might not be available on some platforms, cf. comments):

<pre><code>int *const num = calloc(sizeof (*num), n);
if (!num) {
    perror("calloc");
    return 1;
}
</code></pre></li>
<li>Don't use VLAs; they are dangerous (and IIRC even deprecated). They basically allow an attacker to overflow your stack here, with pretty much no safeguards possible for you.</li>
<li>Don't mix pointer-arithmetic and array-notation:

<pre><code>scanf("%d", &amp;num[i]); /* was: scanf("%d", num+i); */
</code></pre></li>
</ol>

<h1>Style</h1>

<ol>
<li><p>Use empty lines to structure your code. Eg. I have:</p>

<pre><code>printf("Enter the sequence\n");
for (size_t i = 0; i &lt; n; i++) {
    if (scanf("%d", num+i) != 1) {
        fprintf(stderr, "Invalid input\n");
        return 1;
    }
}

printf("Sequence before sorting\n");
displaySequence(num, n);

mergeSort(num, 0, n-1);

printf("Sequence after sorting\n");
displaySequence(num, n);

free(num);
</code></pre></li>
<li>In a similar vein, use horizontal space more. I'm more or less following the Kernel Normal Form (KNF), with spaces after commas, around operators, after keywords, before the pointer indicator, etc.  If you do that, you don't need weird things parenthesis <code>mergeSort(num,0,(n+1))</code> anymore as visual aid.  It's far easier on the eye.</li>
<li>Use braces for <code>if-else</code>: it's such a common bug to forget them when expanding the if-statement.  Or at least write them in one line otherwise.</li>
</ol>

<h1>Security</h1>

<p>This is tricky. In general: Don't trust user input, at all. Everything passed into <code>scanf()</code> is user-controlled.  Currently the user can overflow your stack, try to allocate as much memory as possible (and since you don't check for the success of <code>malloc()</code>, possibly write memory). As the user also controls the actual sequence, in theory they could even try to write arbitrary stuff into memory.</p>
    </div>