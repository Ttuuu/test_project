<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Let's start with the trivial stuff...</p>

<p>A few minor stylistic points that are pretty much universal:</p>

<ul>
<li>The type <code>IO ()</code> is always written with a space between <code>IO</code> and <code>()</code>, never <code>IO()</code>.</li>
<li><p>Similarly, multiple constraints are written as a comma-separated list:</p>

<pre><code>(Fractional a, Ord a) =&gt; ...
</code></pre>

<p>rather than a chained list <code>(Fractional a) =&gt; (Ord a) =&gt; ...</code></p></li>
<li><p>For do-blocks, even though the syntax permits:</p>

<pre><code>do
firstLine
secondLine
</code></pre>

<p>they are almost never written this way.  It's either:</p>

<pre><code>do firstLine
   secondLine
</code></pre>

<p>or else:</p>

<pre><code>do
  firstLine -- w/ your standard choice of indentation, usually 2 or 4
  secondLine
</code></pre>

<p>It's often considered acceptable to write:</p>

<pre><code>someother expression $ do
  contentsOf
  theDoBlock
</code></pre>

<p>so the contents can be unindented or negatively indented with respect to the <code>do</code> keyword in this case.</p></li>
</ul>

<p>For the specific do-block in your <code>main</code> function, because a standalone <code>let</code> statement is permitted in do-notation, you don't need the nesting at all, so this would be more standard:</p>

<pre><code>main = do
  ...
  let shift_size = decrypt (map toLower $ filter isAlpha encrypted)
  print shift_size
  writeFile (filename ++ "_DECRYPTED") (shift (negate shift_size) encrypted)
  hClose handle
</code></pre>

<p>(This is <em>despite</em> the fact that <code>shift_size</code> is only needed in the following two lines and not the last.)</p>

<p>I find that idiomatic Haskell tends to use <code>where</code> in preference to <code>let ... in ...</code> statements, so for example:</p>

<pre><code>decrypt :: String -&gt; Int
decrypt text = minShift frequencies $ map (flip (/) len) freq
  where len = fromIntegral $ length text
        (_, freq) = unzip $ toList $ fromListWith (+) [(c, 1.0) | c &lt;- text]
</code></pre>

<p>The motivation here is that the definition of <code>decrypt text</code> is given immediately following the <code>=</code>, and if the helper functions like <code>len</code> and <code>freq</code> have sufficiently self-evident names, the reader can mostly ignore the <code>where ...</code> details.</p>

<p>More controversially, some people like to write the most general type signatures possible.  In my opinion, unless you're writing a library or actually need the generality, I don't think there's much point.  The polymorphic type signatures and <code>Fractional</code> constraints clutter up your code, and if you turned on <code>-Wall</code>, which you should be doing anyway, you'd see that GHC is defaulting your type to <code>Double</code>, a default that would be better to make explicit anyway.  Personally, I'd replace most of the <code>Fractional a =&gt; ... a ...</code> with <code>Double</code>s.  (Well, except <code>oneCycle</code> and <code>shiftList</code>, which are probably clearer with unconstrained type signatures.)</p>

<p>Now to the less trivial stuff...</p>

<p>In <code>minShift</code>, consider the definition of <code>norms</code>:</p>

<pre><code>norms = map (\x -&gt; norm freq1 (shiftList freq2 x)) [0..25]
</code></pre>

<p>This calculates <code>shiftList freq2 x</code> for every <code>x</code> from 0 to 25, but <code>shiftList</code> works by generating the full list <code>iterate oneCycle freq</code> and then selecting element <code>x</code>, so you would have been better off writing:</p>

<pre><code>norms = map (norm freq1) (take 26 $ iterate oneCycle freq2)
</code></pre>

<p>Actually, a more common way of calculating all "cycles" of a list is:</p>

<pre><code>cycles :: [a] -&gt; [[a]]
cycles xs = zipWith (++) (tails xs) (inits xs)
</code></pre>

<p>which many Haskellers take great pride in writing using implicit reader monad/applicative:</p>

<pre><code>cycles :: [a] -&gt; [[a]]
cycles = zipWith (++) &lt;$&gt; tails &lt;*&gt; inits
</code></pre>

<p>Also, finding the minimum with <code>minimum</code> and then getting its index with <code>elemIndex</code> would be frowned upon because it traverses the list twice (or, on average, one and a half times in the absence of duplicate minimums), and even though it's ridiculous to worry about performance on a 26-item list, I guess folks would be more likely to use a trick like:</p>

<pre><code>minimumIndex :: (Ord a) =&gt; [a] -&gt; Int
minimumIndex xs = snd . minimum $ zip xs [0..]
</code></pre>

<p>Note that I'm breaking my own rule here about not overgeneralizing functions.  In this case, it just "feels" right.  Anyway, the way this works is by using <code>zip</code> to add an index, so that the list <code>xs = [5,4,6,1,8]</code> becomes:</p>

<pre><code>[(5,0),(4,1),(6,2),(1,3),(8,4)]
</code></pre>

<p>Because tuples are sorted lexicographically, finding the minimum will pick up the element <code>(1,3)</code>, and we use <code>snd</code> to grab the index "3".</p>

<p>So, now <code>minShift</code> looks like this:</p>

<pre><code>minShift :: [Double] -&gt; [Double] -&gt; Int
minShift freq1 freq2 = minimumIndex $ map (norm freq1) (cycles freq2)
</code></pre>

<p>with helpers <code>minimumIndex</code> and <code>cycles</code> as above.</p>

<p>For the top-level <code>norm</code> function, your <code>foldl</code> is really a <code>sum</code>, and you can use <code>zipWith</code> to combine the <code>zip</code> with the calculation of the term:</p>

<pre><code>norm :: [Double] -&gt; [Double] -&gt; Double
norm xs ys = sum $ zipWith (\x y -&gt; (x-y)^2) xs ys
</code></pre>

<p>With <code>-Wall</code> on, this warns you that <code>2</code> is defaulting to <code>Integer</code>.  I'd probably write:</p>

<pre><code>norm :: [Double] -&gt; [Double] -&gt; Double
norm xs ys = sum $ zipWith (\x y -&gt; (x-y)*(x-y)) xs ys
</code></pre>

<p>just to get rid of this warning.</p>

<p>In <code>decrypt</code>, the <code>flip</code> can be replaced with a section:</p>

<pre><code>decrypt text = minShift frequencies $ map (/ len) freq
</code></pre>

<p>However, there's a bug in your <code>freq</code> calculation.  The map it builds will only have keys for the letters that actually appear in the input text, so the <code>freq</code> and <code>frequencies</code> lists won't generally line up.  Anyway, I'd pull it out into a separate function:</p>

<pre><code>{-# LANGUAGE TupleSections #-}
import qualified Data.Map.Strict as Map

freq :: String -&gt; [Int]
freq inp
  = Map.elems $ Map.unionWith (+) initMap . Map.fromListWith (+) . map (,1) $ inp
    where initMap = Map.fromList . map (,0) $ ['a'..'z']
</code></pre>

<p>This uses <code>Map.unionWith</code> and an all-zeros map <code>initMap</code> to ensure the keys <code>'a'</code> through <code>'z'</code> will be in the map.  It also uses <code>Map.elems</code> in place of <code>let (_, freq) = unzip $ Map.toList $ ...</code>.</p>

<p>Finally, note that I've used <code>Data.Map.Strict</code>.  This is good practice for "counting" maps, so that large inputs don't cause a memory leak.</p>

<p>My <code>decrypt</code> now looks like:</p>

<pre><code>decrypt :: String -&gt; Int
decrypt text = minShift frequencies $ map (/ len) $ map fromIntegral $ freq text
  where len = fromIntegral $ length text
</code></pre>

<p>Also, <code>shiftLetter</code> would probably be clearer to write with separate cases and a helper in place of <code>bool</code>.</p>

<pre><code>shiftLetter :: Int -&gt; Char -&gt; Char
shiftLetter offset c
  | isAsciiLower c = go 'a'
  | isAsciiUpper c = go 'A'
  | otherwise      = c
  where go a = chr $ (ord c - ord a + offset) `mod` 26 + ord a
</code></pre>

<p>Note that the <code>isAscii...</code> versions are safer than <code>isLower</code> and <code>isUpper</code> because these allow unicode letters.</p>

<p>For <code>shift</code>, some typical simplifications are possible.  So:</p>

<pre><code>shift s input = map (shiftLetter s) input
</code></pre>

<p>can be rewritten (using "eta reduction") as:</p>

<pre><code>shift s = map (shiftLetter s)
</code></pre>

<p>Some people might go farther and write:</p>

<pre><code>shift = map . shiftLetter
</code></pre>

<p>though this isn't particularlyclear.  Maybe this would be a nice compromise:</p>

<pre><code>shift :: Int -&gt; String -&gt; String
shift offset = map shift1
  where
    shift1 c
      | isAsciiLower c = go 'a' c
      | isAsciiUpper c = go 'A' c
      | otherwise      = c
    go a c = chr $ (ord c - ord a + offset) `mod` 26 + ord a
</code></pre>

<p>allowing us to eliminate <code>shiftLetter</code> completely.</p>

<p>In <code>main</code>, for quick-and-dirty argument parsing, you can write:</p>

<pre><code>[filename] &lt;- getArgs
</code></pre>

<p>This has the advantage over <code>filename:_ &lt;- getArgs</code> of raising an exception if more than one argument is supplied.</p>

<p>The <code>openFile</code> / <code>hClose</code> pairs is more properly written using a <code>withFile</code> clause.  But, if you're opening a file just to read its contents, it's better to use <code>readFile</code> anyway.</p>

<pre><code>encrypted &lt;- readFile filename
</code></pre>

<p>so my final <code>main</code> looks like:</p>

<pre><code>main :: IO ()
main = do
  [filename] &lt;- getArgs
  encrypted &lt;- readFile filename
  let shift_size = decrypt (map toLower $ filter isAlpha encrypted)
  print shift_size
  writeFile (filename ++ "_DECRYPTED") (shift (negate shift_size) encrypted)
</code></pre>

<p>The final thing that bothers me is that <code>freq</code> has to pass through the <code>String</code> once to calculate the counts, and then <code>decrypt</code> passes through it again to count the full text length.  I'd like to do it in one pass, so I'd rewrite <code>freq</code> to calculate the full text length, too, and return the fractional frequencies directly.  This also allows us to pull the filtering into <code>freq</code> which is safer, since the above version of <code>freq</code> will break if it gets fed input that isn't restricted to the characters from <code>'a'</code> to <code>'z'</code>.</p>

<pre><code>freq :: String -&gt; [Double]
freq str = let (tot', mp') = foldl' step (0::Int, initMap) . getLower $ str
           in  divlist (Map.elems mp') tot'
  where
    -- get ASCII letters, converted to lowercase
    getLower = filter isAsciiLower . map toLower
    -- initial map of all-zero counts for 'a' to 'z'
    initMap = Map.fromList . map (,0::Int) $ ['a'..'z']
    -- for each `c`, add one to `tot` and count a `c`
    step (tot, mp) c = (tot+1, Map.insertWith (+) c 1 mp)
    -- divide each element of xs by n
    divlist xs n = map (/ fromIntegral n) (map fromIntegral xs)
</code></pre>

<p>This works with the following versions of <code>main</code> and <code>decrypt</code>:</p>

<pre><code>main :: IO ()
main = do
  [filename] &lt;- getArgs
  encrypted &lt;- readFile filename
  let shift_size = decrypt encrypted
  print shift_size
  writeFile (filename ++ "_DECRYPTED") (shift (-shift_size) encrypted)

decrypt :: String -&gt; Int
decrypt text = minShift frequencies (freq text)
  where len = fromIntegral $ length text
</code></pre>

<p>Note that <code>negate</code> can be written <code>-</code> as long as you stick in some parentheses.  Some people hate this because this <code>-</code> is Haskell's only unary operator and looks weird, so they might stick with <code>negate</code> anyway.</p>

<p>Finally, I think I'd rearrange <code>minShift</code> a bit to make things easier to test.  Also, <code>Data.Char</code> and some others (<code>Data.List</code> and <code>Data.Foldable</code>) are commonly imported in full without explicit import lists, and <code>Data.Map.Strict</code> is commonly imported qualified without an explicit import list, so I'd probably write my imports as:</p>

<pre><code>import System.Environment (getArgs)
import Data.List
import Data.Char
import qualified Data.Map.Strict as Map
</code></pre>

<p>This gives the final program:</p>

<pre><code>{-# LANGUAGE TupleSections #-}
{-# OPTIONS_GHC -Wall #-}

import System.Environment (getArgs)
import Data.List
import Data.Char
import qualified Data.Map.Strict as Map

main :: IO ()
main = do
  [filename] &lt;- getArgs
  encrypted &lt;- readFile filename
  let shift_size = decrypt encrypted
  print shift_size
  writeFile (filename ++ "_DECRYPTED") (shift (-shift_size) encrypted)

decrypt :: String -&gt; Int
decrypt text = minimumIndex $ norms english (freq text)

-- English letter frequencies from A to Z
english :: [Double]
english = [0.0812, 0.0149, 0.0271, 0.0432, 0.1202, 0.023, 0.0203, 0.0592, 0.0731, 0.001,
           0.0069, 0.0398, 0.0261, 0.0695, 0.0768, 0.0182, 0.0011, 0.0602, 0.0628, 0.091,
           0.0288, 0.0111, 0.0209, 0.0017, 0.0211, 0.0007]

norms :: [Double] -&gt; [Double] -&gt; [Double]
norms freq1 freq2 =  map (norm freq1) (cycles freq2)

norm :: (Fractional a) =&gt; [a] -&gt; [a] -&gt; a
norm xs ys = sum $ zipWith (\x y -&gt; (x-y)*(x-y)) xs ys

freq :: String -&gt; [Double]
freq str = let (tot', mp') = foldl' step (0::Int, initMap) . getLower $ str
           in  divlist (Map.elems mp') tot'
  where
    -- get ASCII letters, converted to lowercase
    getLower = filter isAsciiLower . map toLower
    -- initial map of all-zero counts for 'a' to 'z'
    initMap = Map.fromList . map (,0::Int) $ ['a'..'z']
    -- for each `c`, add one to `tot` and count a `c`
    step (tot, mp) c = (tot+1, Map.insertWith (+) c 1 mp)
    -- divide each element of xs by n
    divlist xs n = map (/ fromIntegral n) (map fromIntegral xs)

shift :: Int -&gt; String -&gt; String
shift offset = map shift1
  where
    shift1 c
      | isAsciiLower c = go 'a' c
      | isAsciiUpper c = go 'A' c
      | otherwise      = c
    go a c = chr $ (ord c - ord a + offset) `mod` 26 + ord a

minimumIndex :: (Ord a) =&gt; [a] -&gt; Int
minimumIndex xs = snd . minimum $ zip xs [0..]

cycles :: [a] -&gt; [[a]]
cycles = zipWith (++) &lt;$&gt; tails &lt;*&gt; inits
</code></pre>

<p>If I run <code>hlint</code> on this, I get one suggestion:</p>

<pre><code>Caesar2.hs:43:20: Suggestion: Use map once
Found:
  map (/ fromIntegral n) (map fromIntegral xs)
Perhaps:
  map ((/ fromIntegral n) . fromIntegral) xs
</code></pre>

<p>In this case, I think the way I have it is clearer.</p>

<p>In this form, it's pretty easy to test:</p>

<pre><code>&gt; freq "It's pretty easy to test"
[5.263157894736842e-2,0.0,0.0,0.0,...]
&gt; norms english (freq "It's pretty easy to test")
[8.694623493074792e-2,0.14473570861495846,0.17156728756232686,...]
&gt; minimumIndex $ norms english (freq "It's pretty easy to test")
0
&gt; decrypt "huk hjabhssf dvyrz xbpal dlss lclu vu zovya aleaz."
7
&gt; shift (-7) "huk hjabhssf dvyrz xbpal dlss lclu vu zovya aleaz."
"and actually works quite well even on short texts."
</code></pre>
    </div>