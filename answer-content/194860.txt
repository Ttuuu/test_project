<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In the book “<a href="https://rads.stackoverflow.com/amzn/click/0980232716" rel="nofollow noreferrer">Introduction to Linear Algebra</a>”, that comes along with this course, the author highlights several times the advantages of finding L (low-triangle matrix) instead of E (elimination matrix). It becomes pretty clear by inspecting the code.</p>

<pre><code>private static int E_GaussEliminationForward(Matrix a, out Matrix e, out Matrix p, out Matrix u)
{
    // all necessary initialization
    e = new Matrix(a.N, true);
    for (int i = 0; i &lt; a.N; i++)
    {
        // if pivot is 0, go and find an exchange
        Matrix eTmp = new Matrix(a.N, true);
        // elimination step
        e = eTmp*e; // TOO EXPENSIVE
    }
}
</code></pre>

<p>But I did not expect that the difference was going to be so huge. Just as an example, I implemented the <a href="https://en.wikipedia.org/wiki/Invertible_matrix" rel="nofollow noreferrer">Inverse function</a> through finding matrix E and matrix L, and compare performance by <a href="https://benchmarkdotnet.org/" rel="nofollow noreferrer">BenchmarkDotNet</a> with square random matrices (N = {5, 10, 20, 30, 40, 50}).</p>

<p><a href="https://i.stack.imgur.com/c0Yiu.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/c0Yiu.png" alt="Barplot of means"></a></p>

<pre><code>public int ReverseE(out Matrix reverseMatrix)
{
    if (N != M)
    {
        reverseMatrix = null;
        return -1;
    }
    int stdout = E_GaussEliminationForward(this, out var e, out var p, out var u); // EPA = U
    if (stdout != 0)
    {
        reverseMatrix = null;
        return stdout;
    }
    UpperGaussEliminationBackward(u, e * p, out reverseMatrix); // Ux = EPI
    return 0;
}

public int ReverseL(out Matrix reverseMatrix)
{
    if (N != M)
    {
        reverseMatrix = null;
        return -1;
    }
    int stdout = L_GaussEliminationForward(this, out var l, out var p, out var u); // PA = LU
    if (stdout != 0)
    {
        reverseMatrix = null;
        return stdout;
    }
    // No should solve Ux = L^{-1}PI
    LowerGaussEliminationBackward(l, p, out var c); // Lc = PI
    UpperGaussEliminationBackward(u, c, out reverseMatrix); // Ux = c
    return 0;
}
</code></pre>

<p>Yes, we are doing additional <a href="https://github.com/pgsin/LinearAlgebraCourse/blob/d192f5c849cdb423c3d6531c5b257059a9d4e28e/Matrix/Matrix.cs#L370" rel="nofollow noreferrer">LowerGaussEliminationBackward</a>, but it does not influence a lot on performance. Even EPA=U decomposition is better to be done <a href="https://github.com/pgsin/LinearAlgebraCourse/blob/d192f5c849cdb423c3d6531c5b257059a9d4e28e/Matrix/Matrix.cs#L137" rel="nofollow noreferrer">through L matrix</a>.</p>

<p>This is the <a href="https://github.com/pgsin/LinearAlgebraCourse/blob/master/Matrix/Matrix.cs" rel="nofollow noreferrer">current state</a> of the implementation.</p>
    </div>