<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>By <a href="https://www.python.org/dev/peps/pep-0008/#naming-conventions">PEP 8</a>, function names should be <code>lower_case_with_underscores</code>.  In my opinion, the "get" could (and therefore should) be dropped, since the function isn't really retrieving existing data.</p>

<p>The docstring would be clearer and more useful as a <a href="https://docs.python.org/3/library/doctest.html">doctest</a>. </p>

<p>It's hard to keep track of which string contains what, with all that splitting.  String analysis is usually best done using regular expressions.  The whole function could be a one-liner, using <a href="https://docs.python.org/3/howto/regex.html#non-capturing-and-named-groups">named capture groups</a>.</p>

<pre><code>import re

def name_parts(name):
    """
    Return a dictionary of a name's parts, ignoring nicknames.

    &gt;&gt;&gt; sorted(name_parts('JOHNSON, John Roberts, Jr. (Jack)').items())
    [('first', 'John'), ('last', 'JOHNSON'), ('middle', 'Roberts'), ('suffix', 'Jr.')]
    &gt;&gt;&gt; sorted(name_parts('JOHNSON, John').items())
    [('first', 'John'), ('last', 'JOHNSON'), ('middle', ''), ('suffix', '')]
    &gt;&gt;&gt; sorted(name_parts('JOHNSON').items())
    [('first', ''), ('last', 'JOHNSON'), ('middle', ''), ('suffix', '')]
    """
    # This match always succeeds, since all components are optional
    return re.match(
        '(?P&lt;last&gt;[^,]*),?\s*'
        '(?P&lt;first&gt;[^ ]*)\s*'
        '(?P&lt;middle&gt;[^,]*),?\s*'
        '(?P&lt;suffix&gt;[^ ]*)',
        name
    ).groupdict()
</code></pre>
    </div>