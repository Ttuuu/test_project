<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I would move the story/writing out of the python script and into a text file. Even better, I would put it into some JSON compliant format. This isn't the only way to do this, but this is what I came up with just now: A given JSON object describes a single scene/event. Each possible event has a unique ID, and has a list of possible transitions (certain user inputs that lead to other events). An event also has some text to display to the user of course. Here is what such a JSON text file might look like (excuse the bad story writing):</p>

<pre><code>{
    "events": [
        {
            "id": "event_story_begin",
            "transitions":
                [
                    {"input": "YES", "to_event": "event_you_said_yes"},
                    {"input": "NO", "to_event": "event_you_said_no"}
                ],
            "text": "Your adventure begins here, traveller. Your squire asks you if you'd like a pear. What do you say?"
        },

        {
            "id": "event_you_said_yes",
            "transitions":
                [
                    {"input": "YES", "to_event": "event_you_said_yes"},
                    {"input": "NO", "to_event": "event_you_said_no"}
                ],
            "text": "Your squire is pleased and silently hands you a pear. He offers you another. Do you accept?"
        },

        {
            "id": "event_you_said_no",
            "transitions":
                [
                    {"input": "", "to_event": "event_story_end"}
                ],
            "text": "Your squire silently stares at you, motionless. Suddenly, with one well-placed blow, your squire swings his axe and cleaves your skull."
        },

        {
            "id": "event_story_end",
            "transitions": [],
            "text": "Your adventure ends here."
        }
    ]
}
</code></pre>

<p>The big advantage of doing things this way is reusability - your python script and your story are decoupled, so you can add new events to your story without changing your python script. Speaking of script, the code might look something like this:</p>

<pre><code>class Event:

    def __init__(self):
        self.id = ""
        self.transitions = []
        self.text = ""

    def has_input_options(self):
        return self.transitions and self.transitions[0]["input"]

    def print_text(self):
        print(self.text)

    def print_input_options(self):
        if not self.has_input_options():
            return
        print("Options:", end=" ")
        for transition in self.transitions:
            print(f"[{transition['input']}]", end=" ")
        print()

    def get_next_event_id(self):
        while self.transitions:
            user_input = ""
            if self.has_input_options():
                user_input = input()
            try:
                transition = next(t for t in self.transitions if t["input"].lower() == user_input.lower())
            except StopIteration:
                print("Try again:", end=" ")
                continue
            else:
                return transition["to_event"]
        return ""

    @staticmethod
    def from_dict(dictionary):
        event = Event()
        event.id = dictionary["id"]
        event.transitions = dictionary["transitions"]
        event.text = dictionary["text"]
        return event

class EventManager:

    def __init__(self, filename="events.txt"):
        import json

        with open(filename) as file:
            self.data = json.load(file)

    def get_event_by_id(self, event_id):
        try:
            event_dict = next(event_dict for event_dict in self.data["events"] if event_dict["id"] == event_id)
        except StopIteration:
            return None
        else:
            return Event.from_dict(event_dict)

class Game:

    def __init__(self):

        from queue import Queue

        self.event_manager = EventManager()
        event_story_begin = self.event_manager.get_event_by_id("event_story_begin")

        self.event_queue = Queue()
        self.event_queue.put(event_story_begin)

    def play(self):

        while not self.event_queue.empty():
            current_event = self.event_queue.get()

            current_event.print_text()

            current_event.print_input_options()

            next_event_id = current_event.get_next_event_id()
            if next_event_id:
                next_event = self.event_manager.get_event_by_id(next_event_id)
                if next_event is not None:
                    self.event_queue.put(next_event)

def main():

    game = Game()
    game.play()

    return 0

if __name__ == "__main__":
    import sys
    sys.exit(main())
</code></pre>

<p>You have the Event class, which represents a single event or scene. It has some utility functions that make our life easier later (could seriously be improved). The EventManager class does all the JSON stuff, and allows us to generate an Event object (given an associated ID). The Game class handles the main game loop. It does this with a queue of Event objects (the game loop keeps going as long as there are more events to be processed). New Event objects are added to the queue when the current event has transitions and the user provides input. If we encounter an Event which has no transitions, we cannot add any more events to the queue. Once the queue is empty, the game loop stops, and the program terminates.</p>

<p>Again, my suggestion is a rough outline. If I were to make improvements I would probably move the user input stuff into the game loop directly (Event.get_next_event_id is kind of a sloppy solution, and the name is sort of deceptive).</p>

<p>And, if you're curious, here is the program output:</p>

<pre><code>Your adventure begins here, traveller. Your squire asks you if you'd like a pear. What do you say?
Options: [YES] [NO] 
yes
Your squire is pleased and silently hands you a pear. He offers you another. Do you accept?
Options: [YES] [NO] 
yes
Your squire is pleased and silently hands you a pear. He offers you another. Do you accept?
Options: [YES] [NO] 
yes
Your squire is pleased and silently hands you a pear. He offers you another. Do you accept?
Options: [YES] [NO] 
no
Your squire silently stares at you, motionless. Suddenly, with one well-placed blow, your squire swings his axe and cleaves your skull.
Your adventure ends here.
</code></pre>
    </div>