<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>
Hello, the changes I'm proposing you involves the class <code>Menu</code> , because at the moment every time you modify the menu (adding or deleting a menu item) you have to define a new method to get name and price of the new menuitem or you are obliged to delete methods that uses a deleted item. 
The solution I propose you to avoid this issues is creating a new class called <code>MenuItem</code> , above the code of the class:</p>

<pre class="lang-java prettyprint-override"><code>class MenuItem {
    private String name;
    private Double price;

    public MenuItem(String name, Double price) {
        this.name = name;
        this.price = price;
    }

    public String getName() {
        return name;
    }


    public Double getPrice() {
        return price;
    }

    @Override
    public String toString() {
        return String.format("%s $%.2f", name, price);
    }
}
</code></pre>

<p>You can check that I override method <code>toString</code> : this method will return a string with price limited to the first two digits like Cheeseburger $5,25.
Now the <code>Menu</code> class will contains an <code>ArrayList</code> of <code>MenuItem</code> objects, above the code of the class:</p>

<pre class="lang-java prettyprint-override"><code>public class Menu {

    private List&lt;MenuItem&gt; items;

    public Menu() {
        this.items = new ArrayList&lt;MenuItem&gt;();
        this.items.add(new MenuItem("Cheeseburger", 5.25));
        this.items.add(new MenuItem("Fries", 2.00));
        this.items.add(new MenuItem("Drink", 1.00));
    }

    public void displayMenu()
    {
        System.out.println("***************************");
        System.out.println("~Menu~");
        int i = 1;
        for (MenuItem item : items) {
            System.out.println(String.format("%d) %s", i++, item));
        }
        System.out.println("***************************");
    }

    public MenuItem getMenuItem(int itemSelection) {
        return items.get(itemSelection);
    }
}
</code></pre>

<p>You can see that now you can add or remove elements from the menu. I modified the type of parameter itemSelection from char to int otherwise your menu would be limited to items from 1 to 9.
Now the test class code:</p>

<pre class="lang-java prettyprint-override"><code>public class Main {

public static void main(String[] args) {
    Menu menu = new Menu();
    menu.displayMenu();
    int itemSelection = 1;
    MenuItem item = menu.getMenuItem(--itemSelection); //menu displayed and arraylist differs for one position 
    System.out.println(item); //it will print Cheeseburger $5,25
    System.out.println(item.getName()); //it will print Cheeseburger
    System.out.println(item.getPrice()); //it will print 5.25
}
</code></pre>

<p>If the menu starts from 1 , you always have to remember decrementing of one the menuitem selected from the customer to match the arrayList inside  the class Menu.</p>
    </div>