<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Without same table and data scripts it is very hard to identify performance issues.  However, here are a few observations that might help:</p>

<ol>
<li><p>Unless I'm reading this wrong, this seems pointless, just adding overhead:</p>

<pre><code>ON ((r.ArrivalAirportIATA &lt;&gt; r1.DepartureAirportIATA)
    OR (r.ArrivalAirportIATA = r1.DepartureAirportIATA))
</code></pre></li>
<li><p>When using expressions, try to always leave one indexed field unmodified.  This allows the optimizer to leverage indexes as much as possible.  For example, change:</p>

<pre><code>(DATEDIFF(HOUR, r.ArrivalDateTime, r1.DepartureDateTime) &gt; 0)
</code></pre>

<p>to</p>

<pre><code>(r1.DepartureDatetime &gt; DATEADD(HOUR,1,r.ArrivalDateTime)
</code></pre>

<p>That will allow an index on the DepartureDateTime to be used.<br>
On a separate note, I think you have a small logic bug here.  <code>DATEDIFF(HOUR...</code> compares the specific time component referenced.  If comparing 10:59 AM &amp; 11:01 AM, the difference is 1 hour unit.  I assume you're actually looking for at least 1 hour between the arrival and next departure.  My recommendation will cover this as well, otherwise switch to <code>DATEDIFF(MINUTE... &gt; 60</code></p></li>
<li><p>Using a MAX datatype can slow things down, sometimes significantly.  I'd recommend avoiding until it is really needed.  On a related note, try using <code>CONCAT('"RosterID":"',r1.RosterID,'",')</code> to simplify reading your code.  That will also automatically handle null as empty string.</p></li>
<li><p>Recursive CTEs can be problematic for performance, especially when the recursion has unnecessary stuff in it.  If at all possible, build your JSON after you've finished the recursion, once you've identified the routes that meet your criteria.</p></li>
</ol>
    </div>