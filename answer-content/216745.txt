<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Problems with generics</h2>

<ul>
<li><p><code>Entry&lt;T&gt;.next</code> should have type <code>Entry&lt;T&gt;</code>.</p></li>
<li><p><code>CustomHashset&lt;T&gt;.buckets</code> has type <code>Entry&lt;T&gt;[]</code> but is initialized to an <code>Entry[]</code>. Initializing a generic array properly is annoying, but <a href="https://stackoverflow.com/questions/529085/how-to-create-a-generic-array-in-java">this StackOverflow question</a> explores a few solutions. At the end of the day, there's only so much you can do about it; you can at least suppress the compiler warning though.</p></li>
</ul>

<h2>Interface of <code>Entry</code></h2>

<p>You never use the getters and setters. Remove them.</p>

<h2>Abstract out linked list</h2>

<p>As you implement more methods, it should become apparent that you are using the chain of <code>Entry&lt;T&gt;</code> objects as a linked list. Thus the interface it presents could be more abstract: in fact, I would create a <code>LinkedList&lt;T&gt;</code> class with <code>add(T t)</code> and <code>contains(T t)</code> methods. Then make <code>buckets</code> an array of <code>LinkedList&lt;T&gt;</code>. This way, the hash set never has to deal with individual entries.</p>

<h2>Small problems</h2>

<ul>
<li>Use or omit <code>this</code> more consistently. I would omit it unless needed.</li>
<li>Return <code>boolean</code> not <code>Boolean</code>.</li>
<li>Currently, <code>a null</code> key causes a <code>NullPointerException</code> when you call <code>hash()</code>. You should detect <code>null</code> inputs to <code>add</code> and explicitly throw an <code>IllegalArgumentException</code> instead.</li>
<li>Use default visibility instead of public to expose methods of private inner classes.</li>
</ul>
    </div>