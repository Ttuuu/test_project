<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some notes about your code:</p>

<ul>
<li>Indentation of a call with multi-line hash: That's subjective, but this style you use wastes a lot of space, and it's pretty hard to read (because of the longer lines). If the hash is long I prefer to use the one-line-per-key/value JSON style. More on this <a href="https://code.google.com/p/tokland/wiki/RubyIdioms#Multi-line_array/hashes" rel="nofollow">here</a>.</li>
<li><code>self.stripe_charge_id = charge.id</code>: When you have a lot of sets + <code>save!</code> it is better just to use <code>update_attributes!</code>.</li>
<li><code>save!</code>: The method is named <code>save_with_payment</code>, in a ActiveRecord context that means this method won't raise an exception, so you should call <code>save</code>. </li>
<li><code>if valid?</code>: No <code>else</code> branch? The method seems to return a boolean so returning <code>false</code> in that case would be more consistent.</li>
<li><code>rescue Stripe::InvalidRequestError =&gt; e</code>: That's a long and subjective topic. My opinion: don't wrap a whole method that is doing lots of things with a <code>rescue</code>, the logic forms now some kind of spaghetti. Wrap the specific parts of the code that may raise that particular exception.</li>
<li><code>Stripe::Charge.create</code>: You asked if the code is too complex. I don't think so, at least not compared with typical Ruby practices, but it's probably more orthodox to create a separate method for this call.</li>
<li><code>errors.add :base,</code>: I don't like this mixing of calls with parens and calls without, it looks messy. DSL-style code in Rails without parens -&gt; ok, normal code in methods -&gt; not so sure, I'd write them. Or at least be consistent.</li>
<li><code>self.plan</code>: It's not idiomatic to write explicit <code>self.</code> to call instance methods.</li>
</ul>

<p>I'd write:</p>

<pre><code>def save_with_payment
  if !valid?
    false
  elsif !(charge = create_stripe_charge)
    errors.add(:base, "There was a problem with your credit card.")
    false
  else
    update_attributes({
      :stripe_charge_id =&gt; charge.id,
      :starts_at =&gt; Date.today,
      :amount =&gt; plan.price,
      :expires_at =&gt; 1.years.from_now,
    })
  end
end

def create_stripe_charge
  Stripe::Charge.create({
    :amount =&gt; (plan.price * 100).to_i,
    :currency =&gt; 'usd', 
    :card =&gt; stripe_card_token, 
    :description =&gt; "Charge for #{user.email}",
  })
rescue Stripe::InvalidRequestError =&gt; e
  logger.error("Stripe error while creating charge: #{e.message}")
  nil
end
</code></pre>
    </div>