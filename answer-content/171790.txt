<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p><code>while</code> loops can never terminate if the table is full. If all the slots're used and you're trying to insert a new element or look for a key that isn't there, it'll keep wrapping around as there're no <code>NULL</code> elements in the array. </p></li>
<li><p>You can fix it by terminating the loop after <code>SIZE</code> iterations, but it's only part of the problem. </p></li>
<li><p>The real question is: what is the desired behavior in this case? Being unable to keep more than <code>SIZE</code> elements (which should be known at compile  time) is a serious limitation. In fact, a hash table that can hold only 20 elements is likely to be quite useless in practice (if the amount of data is so small, a simple array is unlikely to cause any performance issues). Ideally, the table should grow when there's too little room left. Roughly speaking, you should allocate a larger array, rehash the elements, but them into it, and delete old array. </p></li>
<li><p>Even if you decide to keep it fixed-size for simplicity, you need to indicate that the table is full somehow. It shouldn't silently fail to insert a new element. Using error codes is a typical way to do it in C.</p></li>
<li><p>You can run your program under valgrind (or some other memory-checking tool) to see if it leaks memory. If it does, your <code>free...</code> function's wrong (or is called improperly).</p></li>
<li><p>Assuming that <code>malloc</code> always returns a valid pointer is dangerous. It may not. You need to check if its return value is not <code>NULL</code> before working with it.</p></li>
<li><p><code>deleteHash</code> is not a good name. It doesn't delete a hash. It deletes a key. It should  be called correspondingly. </p></li>
<li><p>It's not clear how you code behaves if the user tries to insert a key that's already in the table. Does it allow duplicates? What value does it return upon lookup in this case? Whatever the policy is, document it. </p></li>
</ol>
    </div>