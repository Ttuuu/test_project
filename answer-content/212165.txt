<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>General</h2>

<p>From the code that you posted it looks like you are creating a client for every message that you are sending, this isn't very common behavior. Unless there is a specific reason i would expect the connection to be reused multiple times. I.e. at start set up the client and then use the existing connection to write as often as needed. </p>

<p>Creating asynchronous flows is not easy and neither is network programming in general. I am not that versed in .NET network programming, but you are already using the socket with some of its callbacks on the server side. I would probably choose a similar approach on the clients side. Using <code>BeginSend()</code> on the clients socket rather than <code>stream.write()</code> will make the writing asynchrounos without having to create a separate task for it, and also without having to start a new connection for every message written. </p>

<p>Why not use the <code>ReadCallback()</code> in the UDP Server code ? You use in in the TCP server code. But the UDP code uses the blocking <code>Read()</code> method. </p>

<h2>Calls that may fail</h2>

<p>You have <code>GetError()</code> and <code>GetMessage()</code> that indicate success or failure with a boolean. A good convention is to prefix these with <code>Try</code> (as the queue does) to indicate not only a function that may fail but also to remind the user of your API that they should check the return value of these functions. </p>

<h2>Errors as strings</h2>

<p>Your mileage may vary but having errors only as strings may make discerning what the error was from software a bit harder than necessary, using an <code>enum</code> for the specific error types might make it easier for the client software to actually deal with errors. Pairing this enum with a string explanation might give you the best of both worlds. </p>

<h2><code>PrintError()</code></h2>

<p>I did a double take, and was wondering why just print out the errors, and then I realized you actually are queuing up the errors, in this case i'd probably just get rid of the function and call enqueue directly when needed. </p>

<h2>Superclass</h2>

<p>To make it a little bit more convenient for the users you could introduce interfaces that can be used independent of whether the actual Server or Client is UPD or TCP. </p>
    </div>