<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Always remember to use the access modifiers judiciously. From the question as the package hierarchy is unknown, I assumed that the all the classes are in the same package.</p>

<pre><code>public class PersonUtil {
  public static boolean isAdult(Person person) {
    return person.getAge() &gt;= 18 &amp;&amp; person.getAge() &lt; 60;
  }

  public static boolean isUnderAged(Person person) {
    return person.getAge() &gt;= 0 &amp;&amp; person.getAge() &lt; 18;
  }

  public static boolean isSeniorCitizen(Person person) {
    return person.getAge() &gt;= 0 &amp;&amp; person.getAge() &lt; 18;
  }
}

public class Person {
  private String name;
  private int age;

  Person(String name, int age) {
    this.name = name;
    this.age = age;
  }

  public int getAge() {
    return age;
  }

  public String getName() {
    return name;
  }
}

public class PersonCategorized {
  private List&lt;Person&gt; underAgedPersonList;
  private List&lt;Person&gt; adultList;
  private List&lt;Person&gt; seniorCitizenList;

  PersonCategorized(List&lt;Person&gt; underAgedPersonList, List&lt;Person&gt; adultList, List&lt;Person&gt; seniorCitizenList) {
    this.underAgedPersonList = underAgedPersonList;
    this.adultList = adultList;
    this.seniorCitizenList = seniorCitizenList;
  }

  public List&lt;Person&gt; getAdultList() {
    return adultList;
  }

  public List&lt;Person&gt; getSeniorCitizenList() {
    return seniorCitizenList;
  }

  public List&lt;Person&gt; getUnderAgedPersonList() {
    return underAgedPersonList;
  }
}



 public class PersonService {

      public PersonCategorized getCategorizedPerson(List&lt;Person&gt; allPersonFromDb) {
        try (Stream&lt;Person&gt; personStream = allPersonFromDb.stream()) {
          return new PersonCategorized(
                     collectFilteredList(personStream.filter(PersonUtil::isUnderAged)),
                     collectFilteredList(personStream.filter(PersonUtil::isAdult)),
                     collectFilteredList(personStream.filter(PersonUtil::isSeniorCitizen)));
        }
      }

      private List&lt;Person&gt; collectFilteredList(Stream&lt;Person&gt; filteredStream) {
        assert filteredStream == null;
        return filteredStream.collect(Collectors.toList());
      }

    }
</code></pre>

<p>Naming for me seems to be not so okay check for singular and plural wherever required.</p>
    </div>