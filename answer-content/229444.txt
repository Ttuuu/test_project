<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I would personally prefer a simpler approach, using <code>System.Reactive</code> (Rx.NET):</p>

<pre><code>public abstract class ViewModel : INotifyPropertyChanged
{
    public ViewModel(int throttlingPeriod = 250)
        : this(TimeSpan.FromMilliseconds(throttlingPeriod))
    {
    }

    public ViewModel(TimeSpan throttlingPeriod)
    {
        Subject = new Subject&lt;string&gt;();
        Subject
            .GroupBy(pn =&gt; pn)
            .SelectMany(g =&gt; g.Sample(throttlingPeriod))
            .Select(pn =&gt; new PropertyChangedEventArgs(pn))
            .ObserveOn(SynchronizationContext.Current)
            .Subscribe(e =&gt; PropertyChanged(this, e));
    }

    public event PropertyChangedEventHandler PropertyChanged = delegate { };
    Subject&lt;string&gt; Subject { get; } 
    protected void RaisePropertyChanged([CallerMemberName] string propertyName = null) =&gt; 
        Subject.OnNext(propertyName);
}
</code></pre>
    </div>