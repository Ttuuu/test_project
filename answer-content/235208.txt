<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The Pythonic way may include:<br>
 • <em>know and follow your <a href="https://www.python.org/dev/peps/#introduction" rel="nofollow noreferrer">Python Enhancement Proposals</a></em> and<br>
 • <em>know and exploit your <a href="https://docs.python.org/library/#the-python-standard-library" rel="nofollow noreferrer">Python Standard Library</a></em>;<br>
 • <em>follow sound development practices</em> is debatably language oblivious</p>

<p>The code presented does not violate <em>PEP 8</em> <a href="https://www.python.org/dev/peps/pep-0008/#a-foolish-consistency-is-the-hobgoblin-of-little-minds" rel="nofollow noreferrer">Style Guide for Python Code</a><br>
It does not follow <em>PEP 257</em> <a href="https://www.python.org/dev/peps/pep-0257/#what-is-a-docstring" rel="nofollow noreferrer">Docstring Conventions</a><br>
or <em>PEP 484</em> <a href="https://www.python.org/dev/peps/pep-0484/#abstract" rel="nofollow noreferrer">Type Hints</a></p>

<p>Documenting code, in Python using docstrings, is one of my pet programming peeves:<br>
Note how implementations in answers follow the one in the question in <em>not</em> combining <em>in place</em>, neither in the inner lists, nor in the outer one.<br>
Note also how <code>_in_place</code> got omitted in <a href="https://codereview.stackexchange.com/a/235190/93149">Cedced_Bro's accepted answer</a>.<br>
No (previous) answer has suggested using/returning a <a href="https://docs.python.org/tutorial/classes.html#generators" rel="nofollow noreferrer">generator</a> or allowing <a href="https://docs.python.org/tutorial/controlflow.html#arbitrary-argument-lists" rel="nofollow noreferrer">an arbitrary number of lists</a>, given the advantages, this, too, may be due to lacking documentation of <code>combine_in_place()</code>.</p>
    </div>