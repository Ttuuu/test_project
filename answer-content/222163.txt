<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <ol start="3">
  <li>How are my names? Especially <code>hist</code>, <code>hist2</code>, <code>isExtraPrize()</code> and <code>needDoubleFee()</code></li>
  </ol>
</blockquote>

<p>Not really great. For one, they don't follow <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP8</a> conventions, and, for two, there is no real reason for abreviating variable names anyway.</p>

<blockquote>
  <ol>
  <li>Since calling <code>random.choices()</code> has some overhead, I generate 1000 loaded die rolls and put it in a global array. Is there a better of doing this without classes? In C I'd probably use static variables</li>
  </ol>
</blockquote>

<p>You would have to generate 1000 random numbers anyway when simulating 1000 turns. And this should be the bottleneck of your code, so I’d rather avoid overly complicating things and make it straighforward. The only reason I’d still keep a function to generate a bunch of random values at once would be to keep the option of messing with the probability of rolling a particular number (the <code>weights</code> parameter of <code>random.choices</code> or the <code>p</code> parameter of <code>numpy.random.choice</code>).</p>

<blockquote>
  <ol start="2">
  <li>To generate a histogram of all the scores during a game, I append to a list every turn, and then generate the histogram. Is this efficient performance-wise?</li>
  </ol>
</blockquote>

<p>I think you would probably benefit from using a <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>Counter</code></a> to, at least, <code>update</code> it efficiently and then convert it to the proper structure for display, if need be. But wait, there is an even better option:</p>

<blockquote>
  <ol start="4">
  <li>My Ryzen 5 2400G with 3200 MHz RAM takes about 15s to simulate 100 loaded games, averaging 
  3550 turns per game. I somehow feel like this should be faster, any performance related suggestions are welcome</li>
  </ol>
</blockquote>

<p>Since you are loading <code>numpy</code> for some of your computation, why not delegate the entire simulation to it? Its fancy indexing can simplify your <code>isExtraPrize</code> and <code>getPoints</code> function. For instance:</p>

<pre><code>&gt;&gt;&gt; POINTS = np.array([
     0,   0,   0,   0,   0,   0,   0,   0, 100, 100,  50,  30,  50,
    50,  20,  15,  10,   5,   0,   0,   0,   0,   0,   0,   0,   0,
     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
     5,   5,  15,  20,  50,  50,  30,  50, 100, 100])
&gt;&gt;&gt; POINTS[[8, 22, 19, 48, 17]]
array([100,   0,   0, 100,   5])
</code></pre>

<p>You can then easily benefit from <code>np.sum</code> and <code>np.cumsum</code> on the resulting arrays and even perform vecorized mathematical operations to compute fees.</p>

<p>Using <code>np.random.choice</code>, you can generate up to <span class="math-container">\$8 \times 100000\$</span> die at once and discard those not needed if you reach 100 points before that many throws.</p>

<p>Example code using these:</p>

<pre><code>import numpy as np
import matplotlib.pyplot as plt


def build_scoring_chart():
    prizes = np.zeros(49, dtype=bool)
    prizes[[*range(18, 22), 29, *range(35, 39)]] = True

    points = np.zeros(49, dtype=int)
    points[[*range(8, 18), *range(39, 49)]] = [
            100, 100, 50, 30, 50, 50, 20, 15, 10, 5,
            5, 5, 15, 20, 50, 50, 30, 50, 100, 100,
    ]

    return points, prizes


POINTS, PRIZES = build_scoring_chart()


def throw_die(amount=1000, weights=None):
    if weights is not None:
        weights = np.array(weights)
        weights /= weights.sum()
    return np.random.choice(range(1, 7), size=(amount, 8), p=weights).sum(axis=1)


def play_game(max_turns=1000):
    results = throw_die(max_turns)
    turns = POINTS[results].cumsum() &lt; 100
    results = results[turns]  # keep only actual, meaninful, throws

    prizes = 1 + PRIZES[results].sum()
    fees = (2 ** (results == 29).cumsum(dtype=np.uint64)).sum()

    histogram, _ = np.histogram(results, bins=49, range=[0, 49])
    return prizes, len(results), fees, histogram


def play_games(games_count, max_turns=1000, verbose=False):
    throws_count = np.zeros(49, dtype=int)
    prizes = 0
    fees = 0
    turns = 0
    games_lost = 0
    points_scored = 0

    for _ in range(games_count):
        prizes_won, turns_played, fees_paid, histogram = play_game(max_turns)
        lost = turns_played == max_turns
        games_lost += lost
        if verbose:
            if lost:
                print('You couldn\'t achieve 100 points in', turns_played, 'turns but paid', fees_paid)
            else:
                print('You won', prizes_won, 'prizes in', turns_played, 'turns and paid', fees_paid)

        throws_count += histogram
        prizes += prizes_won
        fees += fees_paid
        turns += turns_played
        points_scored += histogram[POINTS != 0].sum()

    if verbose:
        print(games_count, 'games,', games_lost, 'lost')
        print('Average prizes:', prizes / games_count)
        print('Average turns:', turns / games_count)
        print('Average fees:', fees / games_count)
        print('Percentage of turns scoring points:', points_scored / throws_count.sum() * 100)

        # create list of colors to color each bar differently
        colors = ['red'] * 18 + ['blue'] * 21 + ['red'] * 10
        plt.bar(range(0, 49), throws_count, color=colors)
        plt.title('Score distribution across multiple games')
        plt.xlabel('Score = sum of 8 dice')
        plt.ylabel('Number of throws')
        plt.text(40, 0.6 * throws_count.max(), 'Red bars\ngive points')
        plt.show()


if __name__ == '__main__':
    play_games(100, 2000, True)
</code></pre>

<p>Note that I moved output in the outermost function to ease testing and reusability; and this meant losing the ability to print the score reached if unable to reach the 100 points mark.</p>

<p>This code runs in less than 3 seconds on my machine when generating 800000 random numbers per game, and in around half a second when generating 16000 numbers per game (as in the posted example).</p>
    </div>