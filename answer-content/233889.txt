<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some advice about Java code : </p>

<p>All the Java classes have names beginning with uppercase letter, so instead of  <code>fleissner</code> you have to rename your class <code>Fleissner</code>.</p>

<p>The <code>String</code> java class contains  a method called <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#substring-int-int-" rel="nofollow noreferrer">substring</a> so you haven't to redefine it.
Your method <code>creategrille</code> can be simplified using matrix properties to avoid writing of all elements of matrix, let's start from the begin: you defined the matrix a2 in this way:</p>

<blockquote>
<pre><code>int[][] a2 = {
           {(int)((Math.random()) * 4 + 1),(int)((Math.random()) * 4 + 1),(int)((Math.random()) * 4 + 1)},
           {(int)((Math.random()) * 4 + 1),(int)((Math.random()) * 4 + 1),(int)((Math.random()) * 4 + 1)},
           {(int)((Math.random()) * 4 + 1),(int)((Math.random()) * 4 + 1),(int)((Math.random()) * 4 + 1)}
};
</code></pre>
</blockquote>

<p>This is a matrix that can be rewritten like this:</p>

<pre><code>final int n = 3;
int[][] a2 = new int[n][n];
for (int i = 0; i &lt; n; ++i) {
    for(int j = 0; j &lt; n; ++j) {
        a2[i][j] = (int)((Math.random()) * 4 + 1);
    }
}
</code></pre>

<p>I defined a final <code>n</code> variable containing the number of rows that will not change later in the method. You defined three a3, a4, a5 in the following way:</p>

<blockquote>
<pre><code>int[][] a3 = {
           {(a2[2][0])%4+1,(a2[1][0])%4+1,(a2[0][0])%4+1},
           {(a2[2][1])%4+1,(a2[1][1])%4+1,(a2[0][1])%4+1},
           {(a2[2][2])%4+1,(a2[1][2])%4+1,(a2[0][2])%4+1}
};
int[][] a4 = {
           {(a3[2][0])%4+1,(a3[1][0])%4+1,(a3[0][0])%4+1},
           {(a3[2][1])%4+1,(a3[1][1])%4+1,(a3[0][1])%4+1},
           {(a3[2][2])%4+1,(a3[1][2])%4+1,(a3[0][2])%4+1}
};
int[][] a5 = {
           {(a4[2][0])%4+1,(a4[1][0])%4+1,(a4[0][0])%4+1},
           {(a4[2][1])%4+1,(a4[1][1])%4+1,(a4[0][1])%4+1},
           {(a4[2][2])%4+1,(a4[1][2])%4+1,(a4[0][2])%4+1}
};
</code></pre>
</blockquote>

<p>Probably you made a cut and paste to define these matrices: the code can be simplified defining an helper function to create matrix and then call the function like the example code below:</p>

<pre><code>private static int[][] getMatrix(int[][] original) {
    final int n = original.length;
    int[][] created = new int[n][n];
    for (int i = 0; i &lt; n; ++i) {
        for (int j = 0; j &lt; n; ++j) {
            created[i][j] = original[n - i - 1][i] % 4 + 1;
        }
    }
    return created;
}
//inside your creategrille method
int[][] a3 = getMatrix(a2);
int[][] a4 = getMatrix(a3);
int[][] a5 = getMatrix(a4);
</code></pre>

<p>Finally you can create your matrix <code>a1</code> composed of the four matrices, your code is the following:</p>

<blockquote>
<pre><code>int[][] a1 = {
           {a2[0][0],a2[0][1],a2[0][2],a3[0][0],a3[0][1],a3[0][2]},
           {a2[1][0],a2[1][1],a2[1][2],a3[1][0],a3[1][1],a3[1][2]},
           {a2[2][0],a2[2][1],a2[2][2],a3[2][0],a3[2][1],a3[2][2]},
           {a5[0][0],a5[0][1],a5[0][2],a4[0][0],a4[0][1],a4[0][2]},
           {a5[1][0],a5[1][1],a5[1][2],a4[1][0],a4[1][1],a4[1][2]},
           {a5[2][0],a5[2][1],a5[2][2],a4[2][0],a4[2][1],a4[2][2]}  
};
</code></pre>
</blockquote>

<p>Your matrix is composed like this:</p>

<pre><code>a2  a3
a5  a4 
</code></pre>

<p>Using an helper function you can generate the four pieces of your matrix and after join them in the final matrix like the code below with an helper function <code>f</code>:</p>

<pre><code>private static void f(int[][] a1, int[][] piece, int x, int y) {
    final int n = piece.length;
    for (int i = 0; i &lt; n; ++i) {
        for (int j = 0; j &lt; n; ++j) {
            a1[x + i][y + j] = piece[i][j];
        }
    }
}

//inside your creategrille method
int[][]a1 = new int[n * 2][n * 2];
f(a1, a2, 0, 0);
f(a1, a3, 0, n);
f(a1, a5, n, 0);
f(a1, a4, n, n);
</code></pre>

<p>Same approach for <code>rotate</code> method, instead of :</p>

<blockquote>
<pre><code>public static int[][] rotate(int[][] a1) {
      int[][] rotated =
              {{a1[5][0],a1[4][0],a1[3][0],a1[2][0],a1[1][0],a1[0][0]},
              {a1[5][1],a1[4][1],a1[3][1],a1[2][1],a1[1][1],a1[0][1]},
              {a1[5][2],a1[4][2],a1[3][2],a1[2][2],a1[1][2],a1[0][2]},
              {a1[5][3],a1[4][3],a1[3][3],a1[2][3],a1[1][3],a1[0][3]},
              {a1[5][4],a1[4][4],a1[3][4],a1[2][4],a1[1][4],a1[0][4]},
              {a1[5][5],a1[4][5],a1[3][5],a1[2][5],a1[1][5],a1[0][5]}
              };
      return rotated;
}
</code></pre>
</blockquote>

<p>This can be simplified like below:</p>

<pre><code>public static int[][] rotate(int[][] a1) {
    final int n = 6;
    int[][] rotated = new int[n][n];
    for (int i = 0; i &lt; n; ++i) {
        for (int j = 0; j &lt; n; ++j) {
            rotated[i][j] = a1[n - j - 1][i];
        }
     }
     return rotated;
}
</code></pre>

<p>When you write code, try put spaces between operands and operator , this improves readibility of code.</p>
    </div>