<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First of all, it's great that you've used type signatures. So let's have a look at the contents of your functions.</p>

<h1>Use <code>divMod</code> instead of <code>div</code> and <code>mod</code></h1>

<p>In <code>toDigits</code>, you both <code>div</code> and <code>mod</code> <code>x</code> by <code>10</code>. However, there's a function that combines them both: <code>divMod</code>. With that in mind, we can write</p>

<pre><code>toDigits :: Integer -&gt; [Integer]
toDigits x
    | x &lt;= 0       = []
    | divBy10 &lt; 10 = [divBy10, remainder]
    | otherwise    = toDigits divBy10 ++ [remainder]
    where (divBy10, remainder) = x `divMod` 10
</code></pre>

<h1>Avoid left-recursion on <code>++</code></h1>

<p>However, your function is currently non-optimal. If you use <code>x ++ [y]</code> repeatedly, you end up with \$\mathcal O(n^2) \$ instead of \$\mathcal O(n) \$, as <code>++</code> is \$\mathcal O(n) \$ (where \$n\$ denotes the length of the first list).</p>

<p>It's easier to write <code>toDigitsRev</code>:</p>

<pre><code>toDigitsRev :: Integer -&gt; [Integer]
toDigitsRev x = case x `divMod` 10 of
                  (0, 0) -&gt; []
                  (0, m) -&gt; [m]
                  (d, m) -&gt; m : toDigitsRev d
</code></pre>

<p>The <code>case</code> is just a matter of preference, you can continue to use your guards. Note that we now use <code>(:)</code>, which is alwas \$\mathcal O(1) \$. Our <code>toDigits</code> is now only</p>

<pre><code>toDigits :: Integer -&gt; [Integer]
toDigits = reverse . toDigitsRev
</code></pre>

<h1>Use simpler patterns where possible</h1>

<p>Your patterns in <code>doubleEveryOther</code> are a little bit contrived. If we look closely, we can see that we always return the input, except for the two-element case. Let's reorder the patterns first to see that:</p>

<pre><code>doubleEveryOther :: [Integer] -&gt; [Integer]
doubleEveryOther xs = reverse $ doubleEveryOther' (reverse xs)
    where   doubleEveryOther' (x:y:xs) = [x, y*2] ++ doubleEveryOther' xs
            doubleEveryOther' []       = []
            doubleEveryOther' (x:[])   = [x]
            doubleEveryOther' (x:y:[]) = [x, y*2]
</code></pre>

<p>Now the first pattern handles <strong>both</strong> <code>(x:y:xs)</code> and <code>(x:y:[])</code>, so we can get rid of the last pattern:</p>

<pre><code>doubleEveryOther :: [Integer] -&gt; [Integer]
doubleEveryOther xs = reverse $ doubleEveryOther' (reverse xs)
    where   doubleEveryOther' (x:y:xs) = [x, y*2] ++ doubleEveryOther' xs
            doubleEveryOther' []       = []
            doubleEveryOther' (x:[])   = [x]
</code></pre>

<p>In our empty and single-element pattern we return our input, so we can combine both variants into a single pattern:            </p>

<pre><code>doubleEveryOther :: [Integer] -&gt; [Integer]
doubleEveryOther xs = reverse $ doubleEveryOther' (reverse xs)
    where   doubleEveryOther' (x:y:xs) = x : y*2 : doubleEveryOther' xs
            doubleEveryOther' xs       = xs
</code></pre>

<p>Also, it's common to use short names for workers, so let's call the worker <code>go</code>:</p>

<pre><code>doubleEveryOther :: [Integer] -&gt; [Integer]
doubleEveryOther = reverse . go . reverse
    where   go (x:y:xs) = x : y*2 : go xs
            go xs       = xs
</code></pre>

<p>The point-free definition of <code>doubleEveryOther</code> is a matter of preference.</p>

<h1>Other remarks</h1>

<p><code>sumDigits</code> and <code>validate</code> are fine, although I'd write them as follows</p>

<pre><code>sumDigits :: [Integer] -&gt; Integer
sumDigits  = sum . map (sum . toDigits)

validate :: Integer -&gt; Bool
validate x = checksum == 0
  where
    checksum = sumDigits (doubleEveryOther $ toDigits x) `mod` 10
</code></pre>

<p>That's only a matter of personal preference, though. The compiler will change <code>map f $ map g</code> to <code>map (f . g)</code> automatically, so your variant of <code>sumDigits</code> didn't traverse the list twice.</p>
    </div>