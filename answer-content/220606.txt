<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>WARNING</h2>
<p>Never do a double assignment in a variable declaration.</p>
<pre><code>"use strict";
let carry = i = 0;  // throws i is not defined
</code></pre>
<p>Without strict mode there is no error and <code>i</code> is then declared in the global scope.</p>
<p>Should be either</p>
<pre><code>let carry, i;
carry = i = 0;
</code></pre>
<p>or</p>
<pre><code>let carry = 0, i = 0;
</code></pre>
<p>or</p>
<pre><code>let i = 0, carry = i;
</code></pre>
<h2>General</h2>
<p>You can simplify some of the code.</p>
<ul>
<li><p>Rather than test for a character test the position <code>num1[LEN1 - i]</code> can be <code>(LEN1 - i) &gt;= 0</code></p>
</li>
<li><p>Rather than have <code>LEN1</code> and <code>LEN2</code> as constants use them as indexes saving the need to subtract <code>i</code> each time</p>
</li>
<li><p>Put the test for the last carry in the while loop to save the need to do the final test on return.</p>
</li>
<li><p>Shortening the variable name length lets you put the addition in one line. Generally I use <code>a</code>, <code>b</code> or <code>A</code> ,<code>B</code> for unspecific maths operations.</p>
</li>
</ul>
<h2>Rewrite</h2>
<p>I keep <code>carry</code> as a Number, JS optimizers don't like variables changing type. The benefit is tiny but on mass worth keeping in mind.</p>
<p>Moved <code>tmp</code> to function scope to keep the inner loop free of tokens (noise)</p>
<pre><code>function addStrings(a, b) {
    var la = a.length, lb = b.length, res = "", carry = 0, tmp;
    while (la &gt; 0 || lb &gt; 0 || carry) {
        tmp = (la-- &gt; 0 ? +a[la] : 0) + (lb-- &gt; 0 ? +b[lb] : 0) + carry;
        carry = tmp / 10 | 0;
        res = tmp % 10 + res;
    }
    return res;
}
</code></pre>
    </div>