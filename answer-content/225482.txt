<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Algorithmic complexity for combined operations</h1>

<p>Containers are interesting elements in most programming languages: they have an internal state, namely their elements and therefore their size.</p>

<p>This introduces an additional state compared to usual algorithmic asymptotical complexity analysis. For example, a naive implemented <code>std::vector::push_back</code> will yield <span class="math-container">\$\mathcal O(n^2)\$</span> complexity if <code>push_back</code> increases the capacity only by one:</p>

<pre class="lang-cpp prettyprint-override"><code>// pseudo-code, also very bad performance and no error handling, do not use!
void vector::push_back(T value){
    if(_size == _capacity) {
         // has to move all elements and is therefore O(n)
         reserve(_capacity + 1);
    }
    _data[_size++] = value;
}
</code></pre>

<p>While trivial, this code has a severe problem: we have to copy all elements in <em>ever</em> iteration. If we use <code>push_back</code> in a loop, we end up with a quadratic complexity.</p>

<p>The real <code>push_back</code> has therefore some tricks up in its sleeves, as the standard dictates that it will have <span class="math-container">\$O(1)\$</span> <em>amortized</em> complexity. More about that later in this review.</p>

<p>However, this small introduction should give you a hint about the central flaw in your current approach.</p>

<h2>A hidden quadratic term</h2>

<blockquote>
  <p>I implemented <code>dequeue()</code> in <span class="math-container">\$O(1)\$</span> at the cost of <code>enqueue()</code> in <span class="math-container">\$O(n)\$</span></p>
</blockquote>

<p>For this task, it's much more important to see the cost on both functions for <span class="math-container">\$k\$</span> enqueued elements, not a single one.</p>

<p>So let's envision the queue <code>{1,2,3,4}</code>. How many steps do we need?</p>

<pre><code>to enqueue 1: 
  1. put `1`  in `s1`
to enqueue 2:
  1. move `1` from `s1` to `s2`           
  2. put `2` in `s1`
  3. move `1` from `s2` to `s1`
- to enqueue 3:
  1. move `1` from `s1` to `s2`
  2. move `2` from `s1` to `s2`
  3. put `3` in `s1`
  4. move `2` from `s2` to `s1`
  5. move `1` from `s2` to `s1`
- to enqueue 4:
  1. move `1` from `s1` to `s2`
  2. move `2` from `s1` to `s2`
  3. move `3` from `s1` to `s2`
  4. put `4` in `s1`
  5. move `3` from `s2` to `s1`
  6. move `2` from `s2` to `s1`
  7. move `1` from `s2` to `s1`
</code></pre>

<p>We see that the <span class="math-container">\$n\$</span>th element will take <span class="math-container">\$2(n-1)\$</span> swaps. Therefore, if we insert a total of <span class="math-container">\$n\$</span> elements into our queue, we end up with <span class="math-container">\$\mathcal O(n^2)\$</span> to complete all enqueues.</p>

<p>We need to do better.</p>

<h2>A better queue with two stacks</h2>

<p>So let's get back to the drawing board. What do we need?</p>

<ol>
<li>We need to enqueue</li>
<li>We need to dequeue</li>
<li>We need to peek.</li>
</ol>

<p>None of those terms indicates that we need to have all data in <em>one</em> stack. So first of all, we need to use <strong>better names</strong>, because <code>s1</code> and <code>s2</code> are pretty bland and non-descriptive:</p>

<pre class="lang-cpp prettyprint-override"><code>class Queue{
    stack&lt;int&gt; in;
    stack&lt;int&gt; out;

    void flip();   // &lt; new

public:
    void enqueue(int);
    int  dequeue();
    int  peek();
};
</code></pre>

<p>I'll implement the methods outside of the class declaration to keep the code segments short, but you're free to place them inline again. Note that I switched from a <code>struct</code> to a <code>class</code>, because its <code>Queue</code>s job to make sure that <code>in</code> and <code>out</code> are handled correct; no one else should be able to change them.</p>

<p>What will we use <code>in</code> and <code>out</code> for? Well, as long as we have elements in <code>out</code>, we will use them for <code>dequeue</code> and <code>peek</code>. And whatever gets <code>enqueued</code> gets pushed right ontop of <code>in</code>, no questions asked.</p>

<p>The critical part is how to get an element from <code>in</code> to <code>out</code>, right? I let you think about that for some paragraphs, but you may also stop here and try it yourself; the declaration above contains a clue.</p>

<p>So, let's have a look at my proposal for the definition of <code>enqueue()</code>, <code>peek</code> and <code>dequeue()</code>:</p>

<pre class="lang-cpp prettyprint-override"><code>void Queue::enqueue(int value) {
    in.push(value);
}

int Queue::peek() {
    if (out.empty()) {
        flip();
    }
    return out.top();
}

int Queue::dequeue() {
    if (out.empty()) {
        flip();
    }
    int value = out.top();
    out.pop();
    return value;
}
</code></pre>

<p>Note that the additional private method <code>flip</code> is yet missing. However, I will state the envisioned complexity:</p>

<ul>
<li>enqueue is <span class="math-container">\$\mathcal O(1)\$</span> (amortized)</li>
<li>dequeue is <span class="math-container">\$\mathcal O(1)\$</span> (amortized)</li>
<li>peek is <span class="math-container">\$\mathcal O(1)\$</span> (amortized)</li>
</ul>

<p>Intrigued? Great. So let's check <code>flip</code>:</p>

<pre class="lang-cpp prettyprint-override"><code>void Queue::flip() {
    while(not in.empty()) {
        out.push(in.top());
        in.pop();
    }
}
</code></pre>

<p><code>flip</code> takes all elements in <code>in</code> and moves them to <code>out</code>. It thereby changes the order of the elements, so that the <code>top</code> in <code>in</code> will be the last to get moved out of <code>out</code>. Note that we call <code>flip</code> only when <code>out</code> is empty.</p>

<h2>Amortized analysis</h2>

<p>*"Wait a second! That's <span class="math-container">\$\mathcal O(n)\$</span>" I hear you say. And that's completely correct. However, how often do we need to call <code>flip</code>? Or, rather more important, <strong>how often do elements get moved</strong>?</p>

<p>The answer on the latter question is: exactly one time from <code>in</code> to <code>out</code>. At no point will they move back. The number of <code>flip</code> calls is much trickier, though, but it doesn't really matter. At worst, <code>flip</code> may need to flip all elements, for example if we use it as follows:</p>

<pre class="lang-cpp prettyprint-override"><code>for(int i = 0; i &lt; 100; ++i) {
    queue.enqueue(i);
}
for(int i = 0; i &lt; 100; ++i) {
    queue.dequeue(); // first dequeue will flip
}
</code></pre>

<p>However, only the <strong>first</strong> dequeue will flip. All others will yield the element immediately. Therefore, if we enqueue <span class="math-container">\$n\$</span> elements and then dequeue all of them, we end up with <code>dequeue()</code>'s complexity as:</p>

<p><span class="math-container">$$\frac{n\mathcal O(1) + \mathcal O(n)}{n} = \mathcal O(1).$$</span></p>

<p>We can compare that with your original variant:
<span class="math-container">$$\frac{n\mathcal O(n)}{n} = \mathcal O(n)$$</span></p>

<p>This is why your code exceeded the time limit.</p>

<h1>Further review on code</h1>

<p>There are some other findings that don't need as much detail as the algorithm, but nonetheless can be improved:</p>

<ul>
<li>there are some unused includes (<code>&lt;vector&gt;</code>)</li>
<li><a href="https://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice"><code>using namespace std</code> is considered bad practice</a></li>
<li>the names are misleading or at least not self-descriptive</li>
<li><code>peek()</code> usually returns a value and does not print</li>
<li>the <code>struct Queue</code> should have been a <code>class Queue</code> due to the assumption that the elements are always in the right order.</li>
</ul>
    </div>