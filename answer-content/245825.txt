<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Breathe!</h2>
<p>Make use of line spacing to make the code easier for humans to read. Using a formatter on the code expands it from 100 lines to nearly 150. It should be even longer, there are multiple lines which are far too dense to read in one go. Avoid leaving out the new line in code like <code>if not field.startswith('$'): field = '$' + field</code> or <code>if not fields and not kfields: raise Exception("No field specified")</code>.</p>
<hr>
<pre><code>self.starttime, self.endtime = map(datetime.fromtimestamp, (int(data["starttime"]), int(data["endtime"]))) \
        if {"starttime", "endtime"} &lt;= data.keys() else self._get_day_range()
</code></pre>
<p>This line is way too packed. I can see how you would get to it, but it needs to be split back up.</p>
<p>Mapping over two values seems a bit overkill. Unless there will be more timestamps I would stick with the simpler code.</p>
<p>Putting the desired keys into a set and using subset (implicitly converting the dictionary keys to a set) is a nice trick. However, it is not a very common pattern, and a quick benchmark says it has worse performance than the more naive <code>"starttime" in data and "endtime" in data</code>.</p>
<p>The simple benchmark in Ipython (with small dictionaries)</p>
<pre><code>def f(data): 
    return {"starttime", "endtime"} &lt;= data.keys()

def g(data): 
    return "starttime" in data and "endtime" in data

data1 = {"starttime": 50, "endtime": 100}                                                                                                                                    
data2 = {"starttime": 50, "end": 100}                                                                                                                                       
data3 = {"endtime": 100, "sus": 50}                                                                                                                                         
data4 = {"start": 50, "end": 50}                                                                                                                                            
data5 = {}

%timeit f(data1)
%timeit g(data1)
%timeit f(data2)
%timeit g(data2)
%timeit f(data3)
%timeit g(data3)
%timeit f(data4)
%timeit g(data4)
%timeit f(data5)
%timeit g(data5)
</code></pre>
<p>highlights a clear 3 to 4x win for the simple check.</p>
<p><a href="https://i.stack.imgur.com/md6dl.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/md6dl.png" alt="table of benchmark results for the two potential implementations of 'check multiple keys are in a dictionary'"></a></p>
<p>I would prefer code more in line with</p>
<pre><code>def set_interval(self, field, data):
    if "starttime" in data and "endtime" in data:
        self.starttime = datetime.fromtimestamp(int(data["starttime"]))
        self.endtime = datetime.fromtimestamp(int(data["endtime"]))
    else:
        self.starttime, self.endtime = self._get_day_range()

    self.append({field: {"$gte": self.starttime, "$lt": self.endtime}})
</code></pre>
<hr>
<pre><code>def sum_metrics(self, **kwargs):
    self.update({k: {"$sum": v if isinstance(v, int) else {"$toLong": v if v.startswith('$') else '$' + v}} for k, v in kwargs.items()})
</code></pre>
<p>This is another place with too much on one line.</p>
<p>You have a repeated pattern of prepending a <code>'$'</code> to a string if it doesn't have one already. I would make a little helper function to capture this logic, and question any code which doesn't use it. The other logic in the dictionary comprehension could also use a helper function.</p>
<pre><code>def dollar(v):
    """Prepend a dollar sign to indicate this is a XXX."""
    if v.startswith("$"):
        return v
    return "$" + v

def sum_metrics(self, **kwargs):
    def encode_metric(v):
        if isinstance(v, int):
            return v

        return {"$toLong": dollar(v)}

    metrics = {k: {"$sum": encode_metric(v)} for k, v in kwargs.items()}
    self.update(metrics)
</code></pre>
<hr>
<pre><code>def nest_fields(self, *fields, key, **kfields):
    if not fields and not kfields:
        raise Exception("No field specified")
    self._nest_field(key, {field: '$' + field for field in fields} or {field: '$' + value for field, value in kfields.items()})
</code></pre>
<p>Using a broad/generic Exception is a bad habit, it might only rarely be a problem, but when it is a problem it is painful to debug. Consider a more specific exception like ValueError or a custom exception.</p>
<pre><code>class EmptyFieldsError(ValueError):
    pass
</code></pre>
<p>There are two branches in this code (after the initial check). Is that obvious from the line presented? If you flip the conditions to be positive you can make the logic a lot easier to follow at a glance.</p>
<p>I would have expected the parameter order to be <code>nest_fields(self, key, *fields, **kfields)</code> since then the key is first, followed by a list of parameters, rather than the key looking like the last parameter in a list of them.</p>
<pre><code>def nest_fields(self, *fields, key, **kfields):
    nested_fields = None
    if fields:
        nested_fields = {field: dollar(field) for field in fields}
    elif kfields:
        nested_fields = {
            field: dollar(value)
            for field, value in kfields.items()
        }

    if nested_fields is None:
        raise EmptyFieldsError("No field specified")

    self._nest_field(key, nested_fields)
</code></pre>
<hr>
<pre><code>def sort_documents(self, *fields, descending=False):
    self.append(self._sort.descending_order(*fields) if descending else self._sort.ascending_order(*fields))
</code></pre>
<p>This is a difficult API to read. Why not copy Python's <code>sorted</code> and give <code>_sort</code> a <code>reverse</code> positional arg?</p>
<pre><code>class SortStage(dict):
    @staticmethod
    def order(*fields, reverse=False):
        return {"$sort": {field: -1 if reverse else 1 for field in fields}}

def sort_documents(self, *fields, descending=False):
    sorted_documents = self._sort.order(*fields, reverse=descending)
    self.append(sorted_documents)
</code></pre>
    </div>