<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Python has a good standard module for work with decimal numbers: <a href="https://docs.python.org/3/library/decimal.html#decimal.Decimal" rel="nofollow noreferrer">decimal</a>. Your code (still <code>C/C++</code>-style) can be replaced with this code:</p>

<pre><code>import decimal

# A separate function to check if the number is an Armstrong number
def is_armstrong(number):
    # Get tuple of number digits
    num_digits = decimal.Decimal(number).as_tuple().digits
    # Return the result of check if it is an Armstrong number
    return number == sum(d ** len(num_digits) for d in num_digits)

lower = int(input("Enter lower range: "))
upper = int(input("Enter upper range: "))

for num in range(lower, upper):
    if is_armstrong(num):
        print(num)
</code></pre>

<hr>

<p>About performance:</p>

<p>I checked how long your code works for one million numbers:</p>

<pre><code>import datetime

t1 = datetime.datetime.now()
for num in range(1, 1000000):
    order = len(str(num))
    sum_ = 0
    temp = num
    while temp &gt; 0:
        digit = temp % 10
        sum_ += digit ** order
        temp //= 10
    if num == sum_:
        q = num
t2 = datetime.datetime.now()
str(t2-t1)
</code></pre>

<p>And it returned:</p>

<p><code>'0:00:02.568923'</code></p>

<p>Two and a half seconds. I think it is not the sort of code where one should worry about performance. Moreover, the complexity of each <code>is_armstrong()</code> call is <strong>O(log(N))</strong> (we summarize powers <strong>O(1)</strong> of digits <strong>O(log(N))</strong>) for each number so the result complexity is <strong>O(N log(N))</strong>. For one BILLION numbers this script will work less than hour! It compares favorably with, for example, some kind of graph algorithms with <strong>O(N^3 E^2)</strong> complexity that works for days and every little improvement can save literally hours of CPU working.</p>

<p>P.S. If you aren't familiar with Big O notation, check <a href="https://en.wikipedia.org/wiki/Big_O_notation" rel="nofollow noreferrer">this</a> article in Wikipedia.</p>
    </div>