<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Thanks for sharing this.</p>

<p>Looks quite reasonable to me. I have only a few thing I'd change:</p>

<h3>unnecessary inheritance</h3>

<p>Your <code>Game</code> class extends <code>JPanel</code>  but it does not change the <em>behavior</em> of a JPanel, it only <em>confirures</em> its content. This can also be done from the outside:</p>

<pre><code>public class GameFrame{
    public final static  int WIDTH_GAME_FRAME = 800;
    public final static  int HEIGHT_GAME_FRAME = 700;

     public GameFrame(JFrame theFrame) throws Exception{
       theFrame.setTitle("Game");
       theFrame.setLayout(new BorderLayout());
       theFrame.setSize(WIDTH_GAME_FRAME, HEIGHT_GAME_FRAME);
       theFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
       theFrame.setLocationRelativeTo(null);

       Game game = new Game();
       theFrame.add(game.getGamePanel());    
       theFrame.setResizable(false);
    }

    public static void main(String[] args) {

        EventQueue.invokeLater(() -&gt; {
            try{
                JFrame theFrame = new JFrame();
                GameFrame tg = new GameFrame(theFrame);
                theFrame.setVisible(true);
            }
            catch(Exception e){
                System.out.println("ERROR");
            }
        });                        
    }
}
</code></pre>

<h3>replace <code>if</code>/<code>else</code> cascade by polymorpism</h3>

<p>your method <code>checkCollisions</code> yould be simplified by using polymorphism:</p>

<p>You need another file: </p>

<p>CollisionCheck.java</p>

<pre><code>interface CollisionCheck {
   State checkCollisionWith(Ball ball);
}
</code></pre>

<p>The you create instances of that interface in your <code>Game</code> class:</p>

<pre><code>private final List&lt;CollisionCheck&gt; collisionChecks = new ArrayList&lt;&gt;(); 
public Game() throws Exception  {
   // same as you have
   // add collision checks
   // as anonymous class
   collisionChecks.add(new CollisionCheck () {
      @Override
      public  State checkCollisionWith(Ball ball) {
         if (ball.getRectangle().intersects(player.getRectangle()) &amp;&amp; player.isTurn()){
           ball.bouncePaddle();
           player.setTurn(false);
           pc.setTurn(true);
         }
         return stateOfGame;
      }
   });
   // as java 8 lambda
   collisionChecks.add(movedBall -&gt; {
     if (movedBall.getRectangle().intersects(pc.getRectangle()) &amp;&amp; pc.isTurn()){           
          ball.bouncePaddle();
          pc.setTurn(false);
          player.setTurn(true);            
      }
      return stateOfGame;
   });
   // as instance of another top level class holding the implementation:
   collisionChecks.add(new PaddleBounceChec(ball,pc,player));
   // same schema for all bounce checks
</code></pre>

<p>your method <code>checkCollisions</code> changes to this:</p>

<pre><code>public void checkCollisions(){
  for(CollisionCheck cc :  collisionChecks)
       stateOfGame= cc.checkCollisionWith(ball);
 // that's all
</code></pre>

<p>There is another place where you could use inheritance instead of <code>if</code>/<code>else</code>:</p>

<blockquote>
<pre><code>public void move(Game.Direction dir){
    if (Game.Direction.LEFT == dir){
        if (xPaddlePosition &gt;= PADDLE_MOVE)
            xPaddlePosition -= PADDLE_MOVE;
    }                   
    else {
        if (xPaddlePosition + WIDTH &lt;= 792)
            xPaddlePosition += PADDLE_MOVE;
    } 
}
</code></pre>
</blockquote>

<p>This logic could be implemented in the <code>enum</code>:</p>

<pre><code> public static enum Direction {
     LEFT {
       public int move(int xPaddlePosition){
         if (xPaddlePosition &gt;= Paddle.PADDLE_MOVE)
            xPaddlePosition -= Paddle.PADDLE_MOVE;
         }
         return xPaddlePosition 
     },
     RIGHT {
       public int move(int xPaddlePosition){
         if (xPaddlePosition + Paddle.WIDTH &lt;= 792)
             xPaddlePosition += Paddle.PADDLE_MOVE;
         }
         return xPaddlePosition 
     };
    abstact public int move(int xPaddlePosition);
  }
</code></pre>

<p>this would change your method to:</p>

<pre><code> public void move(Game.Direction dir){
    xPaddlePosition = dir.move(xPaddlePosition);
 }
</code></pre>
    </div>