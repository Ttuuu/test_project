<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li>I don't like the name of your function. Find <em>what</em> in string? Something like <code>find_all_substring_indices()</code> better describes what the function does</li>
<li>You aren't finding words, you're finding substrings. Your code would find the word "car" twice in "carcar" even though we would consider "carcar" a single word. You mention the re package. Presumably, you're talking about word boundaries. They behave a little differently (punctuation can be a word separator). But, since your original question doesn't behave that way, it is not a refactoring for me to suggest how to do that (nor is it on topic, "how do I replicate regex word boundaries?" is a question for StackOverflow)</li>
<li><code>Indices</code> should be <code>snake_case</code>. Only class names are <code>UpperCamelCase</code></li>
<li>Don't use a tuple for <code>indices</code>! Every time you append to it you have to create a new object because tuples are immutable. In fact, you are creating two: one for the <code>(i,)</code> and then another one when you do <code>indices + (i,)</code>. Use a list: <code>indices = []</code> then <code>indices.append(i)</code>! That's what they're meant for!</li>
<li><code>range(0, len(string))</code> can just be <code>range(len(string))</code></li>
<li><code>string[i:i+wordlength] == word</code> is the same thing as (and much less clear than) <code>string[i:].beginswith(word)</code></li>
<li>All of this slicing is really inefficient, especially given there is also a string method that does what you want: <code>index</code></li>
<li>You should <code>unittest</code> your code! I suspect you have a bug in that if your "word" is "FooFoo" it will be found twice in "Little bunny FooFooFoo" (once at the beginning of "FooFooFoo" and once three characters into "FooFoo"). Surely, words shouldn't be able to overlap like this.</li>
<li>Add <code>"""Docstrings."""</code> to document what your function does.</li>
</ul>

<p>You should just be repeatedly using <code>index</code> until you read the end of the string. This is more efficient than doing slicing by yourself or sliding the substring character by character along your string. <a href="https://stackoverflow.com/a/4665027/568785">Stealing mostly from SO</a>:</p>

<pre class="lang-py prettyprint-override"><code>def find_all_substrings(string, sub):
    start = 0

    while True:
        try:
            start = string.index(sub, start)
        except ValueError:
            break

        yield start
        start += len(sub)
</code></pre>

<p>This is a generator, if you still want a tuple returned you can just build one up instead (but at a list first!):</p>

<pre class="lang-py prettyprint-override"><code>def find_all_substrings(string, sub):
    indices = []
    start = 0

    try:
        while True:
            start = string.find(sub, start)
            indices.append(start)
            start += len(sub)
    except ValueError:
        pass

    return tuple(indices)
</code></pre>
    </div>