<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>General design</h1>

<p>Currently, your function is defined to have "undefined behavior" if the number of arguments is wrong.  This is sub-optimal.  Checking is trivial in this case, so report the problem in some way instead of producing strange output.</p>

<blockquote>
  <p>I could make it a run-time error, but that would add run-time cost and
  thus violate C++'s philosophy of preferring undefined behavior to
  increased run-time cost.</p>
</blockquote>

<p>No, in this case run-time checking incurs zero overload on valid input.  Reporting the error on invalid input is much more efficient than outputting strange things.</p>

<p>You are handling empty template parameter packs specially.  This is unnecessary.  And this makes calls like <code>print("80/%")</code> produce the wrong result.</p>

<p>It is advised to put your utilities in your own namespace with a unique name, and put the non-exposed parts in a nested <code>detail</code> namespace.  (In C++20, we will be able to have fine-grained control over what to expose in a module.)</p>

<p><code>print</code> should take a <code>std::string_view</code> instead of <code>const std::string&amp;</code> to avoid unnecessary allocation.  It would also be nice if the function is constrained to be SFINAE-friendly.</p>

<p>Also, it would be nice if you make this into a I/O manipulator, so that it can be used like</p>

<pre><code>std::cout &lt;&lt; print("% * 80/% = %", 5, 4) &lt;&lt; '\n';
</code></pre>

<h1>Code</h1>

<p>Your code seems to be very conservative on the usage of spaces around braces.  It will look nice if they don't squeeze together:</p>

<pre><code>if (condition) {
    // ...
} else {
    // ...
}

while (condition) {
    // ...
}
</code></pre>

<p>The print code only needs <code>&lt;ostream&gt;</code>, not <code>&lt;iostream&gt;</code>.</p>

<p>Your handling of escape sequences is a bit convoluted.  A stray <code>/</code> at the end of the sequence should be <em>invalid</em>, not simply ignored.</p>

<hr>

<p>Here's my extended code:</p>

<pre><code>// library

#include &lt;cassert&gt;
#include &lt;ostream&gt;
#include &lt;string_view&gt;
#include &lt;tuple&gt;
#include &lt;type_traits&gt;

// replace unicorn304 with your namespace
namespace unicorn304::detail {
    template &lt;typename It&gt;
    void print(std::ostream&amp; os, It first, It last)
    {
        for (auto it = first; it != last; ++it) {
            switch (*it) {
            case '%':
                throw std::invalid_argument{"too few arguments"};
            case '/':
                ++it;
                if (it == last)
                    throw std::invalid_argument{"stray '/'"};
                [[fallthrough]];
            default:
                os &lt;&lt; *it;
            }
        }
    }

    template &lt;typename It, typename T, typename... Args&gt;
    void print(std::ostream&amp; os, It first, It last,
               const T&amp; arg, const Args&amp;... args)
    {
        for (auto it = first; it != last; ++it) {
            switch (*it) {
            case '%':
                os &lt;&lt; arg;
                return print(os, ++it, last, args...);
            case '/':
                ++it;
                if (it == last)
                    throw std::invalid_argument{"stray '/'"};
                [[fallthrough]];
            default:
                os &lt;&lt; *it;
            }
        }
        throw std::invalid_argument{"too many arguments"};
    }

    template &lt;typename... Args&gt;
    struct Printer {
        std::string_view format;
        std::tuple&lt;const Args&amp;...&gt; args;
    };

    template &lt;typename... Args, std::size_t... Is&gt;
    void printer_helper(std::ostream&amp; os, const Printer&lt;Args...&gt;&amp; printer,
                        std::index_sequence&lt;Is...&gt;)
    {
        print(os, printer.format.begin(), printer.format.end(),
              std::get&lt;Is&gt;(printer.args)...);
    }

    template &lt;typename... Args&gt;
    std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, const Printer&lt;Args...&gt;&amp; printer)
    {
        printer_helper(os, printer, std::index_sequence_for&lt;Args...&gt;{});
        return os;
    }
}

namespace unicorn304 {
    template &lt;typename T, typename = void&gt;
    struct is_ostreamable :std::false_type {};
    template &lt;typename T&gt;
    struct is_ostreamable&lt;T, std::void_t&lt;
        decltype(std::declval&lt;std::ostream&gt;() &lt;&lt; std::declval&lt;T&gt;())&gt;
    &gt; :std::true_type {};
    template &lt;typename T&gt;
    inline constexpr bool is_ostreamable_v = is_ostreamable&lt;T&gt;::value;

    template &lt;typename... Args,
              std::enable_if_t&lt;std::conjunction_v&lt;is_ostreamable&lt;Args&gt;...&gt;, int&gt; = 0&gt;
    auto print(std::string_view format, const Args&amp;... args)
    {
        return detail::Printer&lt;Args...&gt;{format, std::forward_as_tuple(args...)};
    }
}
</code></pre>

<p>Example usage:</p>

<pre><code>void print_test()
{
    using unicorn304::print;

    std::cout &lt;&lt; print("% * 80/% = %\n", 5, 4)
              &lt;&lt; print("% son of %!\n", "bob", "some klingon")
              &lt;&lt; print("slash is '//' percent is '/%'\n");
}
</code></pre>
    </div>