<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Just a word of advice, creating a mutable struct which is <em>always</em> a bad idea.  It <em>must</em> be a class otherwise you're just leaving yourself open to problems and confusion.</p>

<p>You could improve it much more if you don't restrict your methods to use lists of topics.  You could then easily apply recursion here and write it in a more functional style with simpler logic.</p>

<pre><code>static TreeNode GenerateTopicsTree(IEnumerable&lt;Topic&gt; topics)
{
    // shouldn't the root value be null?
    var root = new TreeNode("Topics", null);
    return GenerateTopicSubTree(root, topics);
}

static TreeNode GenerateTopicSubTree(TreeNode root, IEnumerable&lt;Topic&gt; topics)
{
    // partition the topics to child and non-child topics
    var rootId = GetId(root);
    var childTopics = topics.ToLookup(topic =&gt; topic.ParentId == rootId);

    // create and add subtrees to the current node
    var childNodes = childTopics[true].Select(GenerateNode);
    foreach (var childNode in childNodes)
    {
        root.ChildNodes.Add(GenerateTopicSubTree(childNode, childTopics[false]));
    }
    return root;
}

static int? GetId(TreeNode node)
{
    int id;
    if (Int32.TryParse(node.Value, out id))
        return id;
    return null;
}

static TreeNode GenerateNode(Topic topic)
{
    return new TreeNode(topic.Title, Convert.ToString(topic.Id));
}
</code></pre>

<p>Consider using data binding to create your tree instead.  I don't know how it works with ASP.NET so I can't really give you tips on how to do it.  But doing so should make this step unnecessary as the framework will generate the tree for you.  You'll probably have to create a class to represent the topics organized in a hierarchy but you could use the above code to create that hierarchy.</p>

<hr>

<p>After thinking about this again, I think it would be better to just group them all at once in the beginning instead of partitioning at every step.  Here's an alternate implementation:</p>

<pre><code>static TreeNode GenerateTopicsTreeAlt(IEnumerable&lt;Topic&gt; topics)
{
    var root = new TreeNode("Topics", null);

    // group all children together now so we don't need to regroup them again later
    var childTopics = topics.ToLookup(topic =&gt; topic.ParentId);
    return GenerateTopicSubTreeAlt(root, childTopics);
}

static TreeNode GenerateTopicSubTreeAlt(TreeNode root, ILookup&lt;int?, Topic&gt; childTopics)
{
    // create and add subtrees to the current node
    var rootId = GetId(root);
    var childNodes = childTopics[rootId].Select(GenerateNode);
    foreach (var childNode in childNodes)
    {
        root.ChildNodes.Add(GenerateTopicSubTreeAlt(childNode, childTopics));
    }
    return root;
}
</code></pre>
    </div>