<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Docstrings</h1>

<p>You should include a <a href="https://www.python.org/dev/peps/pep-0008/#documentation-strings" rel="nofollow noreferrer"><code>docstring</code></a> at the beginning of every module, class, and function you write. This will allow documentation to identify what your code is supposed to do. Docstrings are great for the understanding the functionality of the larger part of the code, i.e., the general purpose of any class, module or function. Comments are used for code, statement, and expressions which tend to be small.</p>

<h1>Function Naming</h1>

<p>You have these two function names:</p>

<pre><code>fetchNodesListBasedOnXpath
getNodesDict
</code></pre>

<p>According to <a href="https://www.python.org/dev/peps/pep-0008/#function-and-variable-names" rel="nofollow noreferrer">PEP-8's Guidelines</a> for function names, these function names  should be <code>snake_case</code>. </p>

<h1><code>_</code> for unused loop variables</h1>

<p>When you don't use a variable in a loop, like:</p>

<pre><code>for i in range(5):
    print("Hi!")
</code></pre>

<p>You should use a <code>_</code>. This makes it clear that the variable used for the loop is not needed, and should be ignored.</p>

<h1>Use of <code>if len(...)</code></h1>

<blockquote>
  <p>For sequences, (strings, lists, tuples), use the fact that empty sequences are false.</p>

<pre><code><b>Yes:</b> if not seq:
     if seq:

<b>No:</b>  if len(seq):
     if not len(seq):
</code></pre>
</blockquote>

<p>Essentially, <code>if seq</code> will return <code>True</code> if it's not empty, and <code>if not seq</code> will return <code>True</code> if it is empty. Since you are checking <code>if len(temp_list) &gt; 0 ...</code>, this should be changed to <code>if temp_list ...</code>.</p>

<h1>Constant Variable Naming</h1>

<p>According to PEP8s rule on <a href="https://www.python.org/dev/peps/pep-0008/#naming-conventions" rel="nofollow noreferrer">constants</a>:</p>

<blockquote>
  <p>Constants are usually defined on a module level and written in all capital letters with underscores separating words. Examples include <code>MAX_OVERFLOW</code> and <code>TOTAL</code>.</p>
</blockquote>

<p>Long Version: </p>

<p>In the Python community (as in many other communities) exist conventions about how to write code. This is different from <em>working code</em>: even if you write your constants all lowercase, your code still works. </p>

<p>But there is community consensus (as documented in PEP8) which is "enforced" with tools like <em>pylint</em>. If you program for your own happiness, you may neglect the hints pylint gives you. If you want open exchange with the community, aka »someone besides myself should use my code«, you should prepare your code according to PEP8. [<a href="https://softwareengineering.stackexchange.com/a/342377">source</a></p>

<h1>Main Guard</h1>

<p>Having a main guard clause in a module allows you to both run code in the module directly and also use procedures and classes in the module from other modules. Without the main guard clause, the code to start your script would get run when the module is imported. This can cause a plethora of issues if you want to reuse this code. Wrapping it in a main guard (check updated code) protects against this.</p>

<h1>Parameter Naming</h1>

<p>Parameters, variables, and default parameters all follow the same <a href="https://www.python.org/dev/peps/pep-0008/#naming-conventions" rel="nofollow noreferrer">PEP-8 Guidelines</a> for naming. They should all be <code>snake_case</code>. You currently have a parameter named <code>Xpath</code>. A simple change to <code>xpath</code> will do the trick.</p>

<h1>Catching Errors/Exceptions</h1>

<p>Right now, your main function can catch an exception, but doesn't handle it. If your program suddenly fails, a detailed error message would do the trick. You should catch specific errors that you think your code will generate. Since you're dealing with files and paths, catching <code>FileNotFoundError</code> is a good idea. Then, after dealing with all the specific errors, you can use a <code>finally</code>. Since this will always be run, you can put your <code>pass</code> here.</p>

<p><strong><em>Updated Code</em></strong></p>

<pre><code>"""
Module Docstring
A description of your program goes here
"""

from lxml import etree

def get_nodes_dict(node_element, nodes_to_pick):
    """
    A description of this method should go here
    """
    some_dict = {}
    for element in node_element:
        if not isinstance(element, list):
            if element.tag in nodes_to_pick:
                some_dict[element.tag] = element.text

    return some_dict


def fetch_nodes_list_based_on_xpath(xpath, tree, selected_nodes):
    """

    A description of this method should go here

    :param xpath:
    :param tree:
    :param selected_nodes:
    :return:
    """
    temp_list = []
    temp_list1 = []
    element_split = xpath.split('/')
    for i in range(len(element_split), 1, -1):
        path = "/".join(element_split[0:i])
        try:
            element = tree.xpath(path)
            for j, node_element in enumerate(element):
                value = get_nodes_dict(node_element, selected_nodes)
                if temp_list and len(temp_list) - 1 &gt; j:
                    for _, item in enumerate(temp_list):
                        dall = {}
                        dall.update(value)
                        dall.update(item)
                        if item:
                            temp_list1.append(dall)
                    temp_list = []
                else:
                    temp_list.append(value)
        except FileNotFoundError as _:
            print(f"The file at [{PATH}] doesn't exist!")
        finally:
            pass

if __name__ == '__main__':

    TREE = etree.parse("code/sample.xml")
    PATH = "/DATA_DS/G_1"

    NODES_TO_PICK = ['SUBSCRIPTION_ID', "PRODUCT_NUMBER", "SUBSCRIPTION_ID1", "SALES_PRODUCT_TYPE1"]

    fetch_nodes_list_based_on_xpath(PATH, TREE, NODES_TO_PICK)
</code></pre>
    </div>