<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your function has two different behaviors:</p>

<ul>
<li>either you split the input string using each of characters as possible separator (spaces case)</li>
<li>or you use a bunch of characters as a whole delimiter.</li>
</ul>

<p>That's why you can not refactor in one branch, separate it into two functions:</p>

<ul>
<li><strong>split_any</strong>: which takes a list of characters as multiple separators possible. And as fallback if no separator given, take whitespace as default parameter.</li>
<li><strong>split</strong>: which takes a string of one to several characters as whole separator. And if no separator given, you can either return the whole string as unique element of the vector, or fallback calling split_any without separator.</li>
</ul>

<p><em>(the names are for the example)</em></p>

<blockquote>
  <p>I tried to keep all variables as local as possible and use standard algorithms.</p>
</blockquote>

<p>Except that you declare two global variables in the global namespace. Especially since you do not really need these variables:</p>

<ul>
<li><strong>npos</strong>: It's just an alias of <code>std::string::npos</code> that you use like it was a <code>std::string_view::npos</code>, although they have the same value (basically <code>std::size_t{ -1}</code> so the biggest unisigned integer possible), you should not, they don't have the same type (<code>std::string::size_type</code> and <code>std::string_view::size_type</code>), it's a bad habit. Finally, you don't need it outside of your function, so, simply use <code>std::string_view::npos</code> directly in your function.</li>
<li><strong>whitespace</strong>: Since you use it as a default fallback value, why don't simply using it as a default value for sep instead of an empty <code>std::string_view</code>?</li>
</ul>

<p>unlike @MartinYork, I would not have set the parameters to <code>const &amp;</code> but only to <code>const</code> since the purpose of a<code>std :: string_view</code> is already to avoid copying. But marking the non-mutable parameters <code>const</code> is the way to go.</p>

<p><strong>maxsplit/splits</strong>: Instead of declaring a "splits" variable and checking it not reached maxsplit, simply decrease maxsplit and check if it fall to zero. </p>

<p>It would be nice to have an overload to be able to pass a char as a separator, it is a very common case.</p>

<p>If you're targeting performance there is <a href="https://www.bfilipek.com/2018/07/string-view-perf-followup.html" rel="nofollow noreferrer">a comparative benchmark</a> of different methods.</p>
    </div>