<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>You have failed to apply TDD, and have over complicated the solution.<br>
Before reviewing your code I completed the challenge myself, which I'll walk you through after reviewing your solution.</p></li>
<li><p>Your function <code>resolve_ref</code></p>

<ul>
<li>This should be split out into two functions, <code>get_ref</code> and <code>_resolve_ref</code>, having <code>resolve_ref</code> as a convenience to them.</li>
<li>Since you haven't split out <code>get_ref</code>, you have to mangle the object to not contain $ref in the walk part of the function.</li>
<li>I'm not a fan of defining <code>ref_path</code>, just place that next to the <code>in</code> in the <code>for</code> loop.</li>
<li>You shouldn't call <code>resolve_refs</code> in <code>resolve_ref</code> it's making you walk the dictionary tons of times, and it's just plain confusing.</li>
</ul></li>
<li><p>Your function <code>resolve_refs</code></p>

<ul>
<li>It's merged <code>_resolve_ref</code> into it making it far more complex than it needs to be. I suggest splitting this out.</li>
</ul></li>
<li><p>Your function <code>get_type</code></p>

<ul>
<li>If I were marking your code and saw this function, you'd be dropped within seconds.</li>
<li>If I'm asking for an object's type, I'm not asking for its parent's type.</li>
<li>This should be split into two functions, <code>get_property</code> and <code>get_type</code>. The former walks the path getting the property, and the latter just uses <code>get_property(...).get('type', None)</code>.</li>
</ul></li>
<li><p>Your function <code>get_complete_schema</code></p>

<ul>
<li>Never mind an interview, if I were a maintainer for a JSONSchema library, and you submitted this in a pull request. I'd never accept it, whilst this function exists.</li>
<li>You rely on a global <code>completed_schema</code> which means your function works once, and then blows up every time after that.</li>
<li>You've been asked to get a property, not make a new schema.</li>
<li>If we need to edit the schema after you've had you way with it, then we now have to keep track of all the references and provide an annoying interface to modify the schema. It also leads to data integrity problems if a user or the library provider messes up once.</li>
</ul></li>
<li><p>Your function <code>get_type_for_key_path</code></p>

<ul>
<li>This seems reasonable enough, however <code>key_path.split('.')</code> should probably be in <code>get_type</code>.</li>
</ul></li>
<li><p>Your naming sense is poor, I don't want to read 8 character variable names when a 4 character one is enough.</p></li>
<li><p>You've quarter arsed your docstrings, and they're not even PEP compliant. If this is the level of documentation you'd give when you provide documentation then I'd not want you. You've given a short description on what it does, and stated what parameters it takes, but not explained the parameters. Additionally only half your code is documented.</p>

<p>If you're going to do something, at least do it well.</p></li>
</ul>

<h1>How I solved this</h1>

<ol>
<li><p>Get the code working with Age.</p>

<ol>
<li><p>Make the <code>get_type_from_key_path</code>.</p>

<p>Given the god awful name, we know it's a convenience function. This means we should delegate to a different function to get the property, and this should only mutate the result to pass the tests.</p></li>
<li><p>Make <code>get_property</code>.</p>

<p>This splits the provided path into segments, and walks the tree. It should be noted that each time you walk here you're walking <code>node['properties'][segment]</code> not <code>node[segment]</code>.</p></li>
</ol>

<p></p>

<pre><code>def get_property(schema, path):
    node = schema
    for segment in path.split('.'):
        node = node['properties'][segment]
    return node


def get_type_from_key_path(schema, path):
    return get_property(schema, path)['type']
</code></pre></li>
<li><p>Get the code working with <code>EmploymentInformation.OriginalHireDate</code>.</p>

<ol>
<li><p>We need to add a new function to resolve references. Since this is a programming challenge we can look to the problem description to make things simple.</p>

<blockquote>
  <p>For the sake of this exercise you can assume that all values for $ref will start with #/.</p>
</blockquote>

<p>This means we only need to pass the schema and walk the provided path.</p></li>
<li><p>Change <code>get_property</code> so if "$ref" is in the object to change the node to the reference.</p></li>
</ol>

<p></p>

<pre><code>def get_ref(schema, path):
    node = schema
    for segment in path.split('/')[1:]:
        node = node[segment]
    return node


def get_property(schema, path):
    node = schema
    for segment in path.split('.'):
        if '$ref' in node:
            node = get_ref(schema, node['$ref'])
        node = node['properties'][segment]
    return node
</code></pre></li>
<li><p>Get the code working with <code>EmploymentInformation.Beneficiary.Name</code>.<br>
No changes needed, it just works!</p></li>
<li><p>Get the code working with <code>foo.bar</code>.</p>

<ol>
<li>Change the code so if <code>get_property</code> raises a key error then you return <code>None</code>.</li>
</ol>

<p></p>

<pre><code>def get_type_for_key_path(schema, path):
    try:
        return get_property(schema, path)['type']
    except KeyError:
        return None
</code></pre></li>
</ol>

<p>This nicely works with all the tests and is really short.</p>

<pre class="lang-py prettyprint-override"><code>def get_ref(schema, path):
    node = schema
    for segment in path.split('/')[1:]:
        node = node[segment]
    return node


def get_property(schema, path):
    node = schema
    for segment in path.split('.'):
        if '$ref' in node:
            node = get_ref(schema, node['$ref'])
        node = node['properties'][segment]
    return node


def get_type_for_key_path(schema, path):
    try:
        return get_property(schema, path)['type']
    except KeyError:
        return None
</code></pre>
    </div>