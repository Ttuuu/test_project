<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>static bool isPrime(long n)
{
    if (n == 2) return true;
    if ((n &gt; 2 &amp;&amp; n % 2 == 0) || n == 1) return false;

    for (long i = 2; i &lt;= Math.Floor(Math.Sqrt(n)); ++i)
    {
        if (n % i == 0) return false;
    }

    return true;
}
</code></pre>

<p>The above code is inefficient.</p>

<ul>
<li>performance: since <code>n</code> doesn't change, you should only compute <code>âˆšn</code> once.</li>
<li>performance: don't check even numbers in the <code>for</code> loop, since they will never divide evenly.</li>
<li>readability: don't mix the <code>n == 1</code> case with the <code>n is even</code> case.</li>
<li>naming: method names start with a capital letter.</li>
</ul>

<p>Improved code:</p>

<pre><code>static bool IsPrime(long n)
{
    if (n &lt; 4) return n &gt; 1;
    if (n % 2 == 0 || n % 3 == 0) return false;

    long limit = (long) Math.Sqrt(n);
    for (long i = 5; i &lt;= limit; i += 2)
    {
        if (n % i == 0) return false;
    }

    return true;
}
</code></pre>
    </div>