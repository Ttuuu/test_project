<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Let me quote the wonderful book <em>Numerical Recipes in C++</em> (but also applicable):</p>
<blockquote>
<p>We assume that you know enough never to evaluate a polynomial this way:</p>
<pre><code>p=c[0]+c[1]*x+c[2]*x*x+c[3]*x*x*x+c[4]*x*x*x*x;
</code></pre>
<p>or (even worse!),</p>
<pre><code>p=c[0]+c[1]*x+c[2]*pow(x,2.0)+c[3]*pow(x,3.0)+c[4]*pow(x,4.0);
</code></pre>
<p>Come the (computer) revolution, all persons found guilty of such criminal behavior will be summarily executed, and their programs won't be!</p>
</blockquote>
<p>(You can find the page in your edition in the analytical index, under the entry <em>"puns, particularly bad"</em>. I love this book.)</p>
<p>There are two reasons not to do that: accuracy and performance. The correct way to evaluate the polynomial is like this:</p>
<pre><code>-t * (0.319381530  +  t * (-0.356563782 + t * (1.781477937 + t * (-1.821255978 + 1.330274429 * t))))
</code></pre>
<p>And you can, of course, split at your convenience, as the newlines inside parenthesis are ignored. Remember the PEP: <em>" The preferred place to break around a binary operator is after the operator, not before it."</em></p>
<pre><code>-t * (0.319381530  +  t * (-0.356563782 +
    t * (1.781477937 + t * (-1.821255978 + 1.330274429 * t))))
</code></pre>
<p>Another alternative is to save the coefficients in a list:</p>
<pre><code>coeff = [0, 0.319381530, -0.356563782, 1.781477937, -1.821255978, 1.330274429]
poly = coeff[-1]
for c in coeff[-2::-1]:
    poly *= x
    poly += c
</code></pre>
<p>I am doing operations in place to avoid allocating and deallocating memory, but this is only relevant if <code>x</code> is a NumPy array. If you are evaluating on a single number, you can just use instead the nicer expression:</p>
<pre><code>poly = poly * x + coeff[i]
</code></pre>
<p>But I would stick with the first one because it is more general.</p>
<p>Of course, the result has to be multiplied by the prefactor:</p>
<pre><code>return 1 - 0.3989423*math.exp(-z*z/2) * poly
</code></pre>
<p>Or, if you want to do it in place:</p>
<pre><code>z2 = z * z # Be careful not to modify your input!
z2 *= 0.5  # Multiplication is faster than division.
np.exp(z2, out=z2)

probd = z2 * poly
probd *= -0.3989423
probd += 1
return probd
</code></pre>
<p><strong>Bonus track:</strong></p>
<p>If you are applying this function to large arrays (more than a thousand numbers), you may benefit from using the first technique in numexpr:</p>
<pre><code>expr += '1 - 0.3989423* exp(-z * z / 2) * '
expr += '(-t * (0.319381530  +  t * (-0.356563782 +  t * '
expr += '(1.781477937 + t * (-1.821255978 + 1.330274429 * t)))))'
ne.evaluate(expr)
</code></pre>
<p>This will compile the expression for you and transparently use as many cores as you have.</p>
    </div>