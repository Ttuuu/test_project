<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There's not much I can criticize about your code; as far as I can see, everything seems well thought out and well written.</p>

<p>As to question number 1: Yes, I think your implementation is correct. I also don't think there's much to be simplified; the implementation is pretty concise, and getting rid of the recursion should be impossible until we get <code>constexpr while</code> or <code>constexpr for</code> (if ever). </p>

<p>As to question 2, I'm much in favor of <code>for_each_in_tuples</code>, since you're clearly iterating multiple tuples at once. </p>

<p>If there's anything to improve, I'd say it's <code>First</code>. Since parameter packs are "like" lists of types, the name <code>Head</code> would fit much better, in my opinion. Also, just as with normal function parameters, I consider it good style to leave unused parameters unnamed, i.e.</p>

<pre><code>template &lt;typename T, typename...&gt;
struct Head { using Type = T; };
</code></pre>

<p>This is really just personal preference, though.</p>

<p>There is, however, at least one real "issue" with your code, which is related to the <code>func</code> parameter in <code>for_each_in_tuples</code>: Since you're passing <code>func</code> around by value, you could cause performance degradation if <code>func</code> is not a lightweight function object (such as a lambda capturing some object with expensive copy operations). Furthermore, this pass-by-value semantics also lock the user out from using function objects that don't support copy operations at all, such as, e.g., a lambda capturing anything of a move-only type. To fix this, I suggest you simply <code>std::move</code> <code>func</code> into each recursive call, which will cover almost all cases (except for expensive-to-move types, but those are quite rare).</p>
    </div>