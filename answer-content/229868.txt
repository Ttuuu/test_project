<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li>I think you want <code>flatMap</code>. </li>
<li>Those <code>return</code>s and braces are unnecessary noise.</li>
<li><p>I would consider not throwing but returning <code>Optional&lt;UserConfiguration&gt;</code> instead. Part of learning this style is realising that unwrapping is rarely necessary. At the call site, you can do something along the lines of <code>update(user).ifPresentOrElse(...)</code>. [*]</p>

<pre><code>public Optional&lt;UserConfiguration&gt; update(User user) {
    return user.getConfigurationId() // Optional&lt;UUID&gt;
        .flatMap(configurationId -&gt; userConfigurationRepository.findById(configurationId)) // Optional&lt;UserConfiguration&gt;
        .map(userConfiguration -&gt; updateUserConfiguration(userConfiguration)); // Optional&lt;UserConfiguration&gt;
}
</code></pre></li>
<li><p>However, if you insist on unwrapping, nothing's stopping you, technically.</p>

<pre><code>public UserConfiguration update(User user) {
    return user.getConfigurationId() // Optional&lt;UUID&gt;
        .flatMap(configurationId -&gt; userConfigurationRepository.findById(configurationId)) // Optional&lt;UserConfiguration&gt;
        .map(userConfiguration -&gt; updateUserConfiguration(userConfiguration)) // Optional&lt;UserConfiguration&gt;
        .orElseThrow();
}
</code></pre></li>
<li><p>consider method references. Sometimes they make code more readable, other times they don't. But mostly yes.</p>

<pre><code>public Optional&lt;UserConfiguration&gt; update(User user) {
    return user.getConfigurationId() // Optional&lt;UUID&gt;
        .flatMap(userConfigurationRepository::findById) // Optional&lt;UserConfiguration&gt;
        .map(this::updateUserConfiguration); // Optional&lt;UserConfiguration&gt;
}
</code></pre></li>
</ul>

<p>[*] - Getting into this mindset would help you a lot when you will start working with other wrapper types that rely on the same abstractions, such as the standard library's <a href="https://www.baeldung.com/java-streams" rel="nofollow noreferrer">Stream</a>, <a href="http://reactivex.io/" rel="nofollow noreferrer">RxJava</a>, <a href="https://spring.io/" rel="nofollow noreferrer">Spring 5-reactive stack</a> / <a href="https://projectreactor.io/" rel="nofollow noreferrer">Project Reactor</a>, or classes provided by the <a href="https://www.vavr.io/" rel="nofollow noreferrer">vavr</a> library. Although possible, unwrapping some of these is considered a very bad idea, e.g. in case of RxJava and Reactor it is a blocking action which you want to avoid at all costs when writing reactive software. But even in the case of Optional, why not have the fact that the value might be missing captured by the type system rather that throwing Exceptions around that might be invisible up the stack until there is actually an issue.</p>
    </div>