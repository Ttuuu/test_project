<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think, I would hold on to your decorator pattern because it is more reusable than the selection with anonymous objects.</p>

<pre><code>  public class DistancedAgent : Agent
  {
    public DistancedAgent(Agent source, double distance)
    {
      AgentId = source.AgentId;
      Latitude = source.Latitude;
      Longitude = source.Longitude;
      Distance = distance;
    }

    public double Distance { get; }

    public override string ToString()
    {
      return $"{Latitude}, {Longitude} =&gt; {Distance}";
    }
  }
</code></pre>

<p>You could extent <code>Agent</code> with some converter methods:</p>

<pre><code>public static class Extensions
{
    public static DistancedAgent WithDistance(this Agent agent, double distance)
    {
      return new DistancedAgent(agent, distance);
    }

    public static IEnumerable&lt;DistancedAgent&gt; WithDistance(this IEnumerable&lt;Agent&gt; agents, Func&lt;Agent, double&gt; getDistance)
    {
      return agents?.Where(a =&gt; a != null).Select(a =&gt; a.WithDistance(getDistance(a))) ?? new DistancedAgent[0];
    }

    public static IEnumerable&lt;DistancedAgent&gt; WithDistance(this IEnumerable&lt;Agent&gt; agents, IDistanceProvider distanceProvider)
    {
      return agents?.Where(a =&gt; a != null).Select(a =&gt; a.WithDistance(distanceProvider.GetDistance(a))) ?? new DistancedAgent[0];
    }
}
</code></pre>

<p>where <code>IDistanceProvider</code> is</p>

<pre><code>  public interface IDistanceProvider
  {
    double GetDistance(Agent agent);
  }
</code></pre>

<hr>

<p>In the concrete use case it ends up with code like this:</p>

<pre><code>  var agents = db.GetAgents();

  Func&lt;Agent, double&gt; getDistance = a =&gt; ws.GetDistanceMeters(a.Latitude, a.Longitude, customerLatitude, customerLongitude);

  foreach (DistancedAgent dAgent in agents.WithDistance(getDistance).OrderBy(da =&gt; da.Distance).Take(5))
  {
    Console.WriteLine(dAgent);
  }
</code></pre>

<p>which is easy to understand and maintain and you have a setup that can be used wherever needed.</p>
    </div>