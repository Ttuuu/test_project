<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think your code is okay, however it foregoes some possible optimizations.</p>

<p>Notice that the length of the binary number is only up to 31 bits.</p>

<p>Once your current largest gap found is greater than the number of bits left to analyze, you can stop analyzing. However, <code>match(regex)</code> will always keep on going on with the analysis.</p>

<p>Finally, for the last part, if I did go with a regex, I would have used:</p>

<pre><code>return matches ? matches.sort().pop() : 0;
</code></pre>

<p><strong>Post Scriptum,</strong> 
from the site you know that:</p>

<pre><code>N is an integer within the range [1..2,147,483,647].
</code></pre>

<p>and, <code>(2147483647).toString(2)</code> equates to <code>"1111111111111111111111111111111"</code> which consists of 31 ones according to <code>(2147483647).toString(2).length</code>
Evaluating 31 bits (worst case of the worst case) should always be faster than compiling and matching a regex.</p>
    </div>