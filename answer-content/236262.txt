<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Overall</h2>
<p>Good.</p>
<p>Personally I don't like building containers using smart pointers. Containers and smart pointers are the techniques we use to manage memory for objects (singular or plural respectively). As such they should both manage their own memories correctly.</p>
<p>But other people do it (use smart pointers) so I don't see it as a big deal; but I think you will learn more from implementing the container as the class that handles memory management.</p>
<h2>Overview</h2>
<p>You should put your stuff inside its own namespace.</p>
<h2>Code Review</h2>
<p>Not very unique.</p>
<pre><code>#ifndef LINKEDLIST_H
#define LINKEDLIST_H
</code></pre>
<p>If you add your own namespace to that guard it may become unique.</p>
<hr>
<p>A friend template for a different type?</p>
<pre><code>class LinkedList {
    template &lt;typename U&gt;
    friend std::ostream&amp; operator&lt;&lt;(std::ostream&amp;, const LinkedList&lt;U&gt;&amp;);
</code></pre>
<p>You can simplify this to:</p>
<pre><code>class LinkedList {
    friend std::ostream&amp; operator&lt;&lt;(std::ostream&amp;, LinkedList const&amp;);
</code></pre>
<p>Even though <code>print()</code> is a public method and thus does not need a fiend to call it. I still would encourage this as a friend operator because it declares the tight coupling of the interface.</p>
<hr>
<p>Nice use of the initializer list here.</p>
<pre><code>    LinkedList() : ptrHead{nullptr} {}
</code></pre>
<p>Curious why you don't use it in the Copy Cosntrctor body!<br>
I'll get to that below.</p>
<hr>
<p>Normally you would pass the list by const reference.</p>
<pre><code>    LinkedList(LinkedList&amp;);
</code></pre>
<p>Here you could make a mistake in your copy constructor and accidently modify the input list.</p>
<hr>
<p>Move constructors are usually <code>noexcept</code> safe.</p>
<pre><code>    LinkedList(LinkedList&amp;&amp;);
</code></pre>
<p>This provides the standard library the opportunity to add optimizations when using its containers. If you can safely move objects without the chance of exception then the move constructor can be used. If the move constructor is not exception safe them you can not always provide the <code>Strong Exception Guarantee</code> and thus must use a technique that uses copying rather than moving. Thus if you can guarantee exception safe moves you should let the compiler know with <code>noexcept</code>.</p>
<hr>
<p>Seriously that comment does my no good.</p>
<pre><code>    // destructor
    ~LinkedList();
</code></pre>
<p>That is a bad comment. Because comments need to be maintained with the code (comments like code rote over time). So you be careful to avoid usless coments as they take effort to maintain (and people will put as little effort into maintenance as they can). As a result comments and code can drift apart over time and cause confusion.</p>
<hr>
<pre><code>    // TODO: Add overloaded assignment and move assignment operators
    // For now, just delete them.
    const LinkedList&amp; operator=(const LinkedList&amp;) = delete;
    const LinkedList&amp; operator=(const LinkedList&amp;&amp;) noexcept = delete;
</code></pre>
<p>These are both exceptionally easy to implement if you have a <code>swap() noexcept</code> method.</p>
<p>Note 1: Assignment operators don't usually return const references.<br>
Note 2: The move assignment operator does not take a const input. Moving the source into the destination will modify it.</p>
<pre><code>    LinkedList const&amp; operator=(LinkedList const&amp; input) {
         LinkedList  copy(input);
         swap(copy);
         return *this;
    }
    LinkedList&amp; operator=(LinkedList&amp;&amp; input) noexcept {
         clean();
         swap(input);
         return *this;
    }
</code></pre>
<hr>
<p>You have a move constructor.<br>
Why don't you have a move <code>push()</code>?</p>
<pre><code>    void push(const T&amp;);   
</code></pre>
<hr>
<p>Nice.</p>
<pre><code>    void pop();
</code></pre>
<p>Clea separation of the pop from the peek().</p>
<hr>
<p>Why are you returning by value?</p>
<pre><code>    T peek() const;
</code></pre>
<p>You should return a const reference to the object. This will prevent an extra copy (which is important if T is expensive to copy). But you can also provide a normal reference (if your class needs it) that would allow you to modify the object in place inside the list.</p>
<pre><code>    T const&amp; peek() const;
    T&amp;       peek();          // Optional.
</code></pre>
<hr>
<pre><code>template &lt;typename T&gt;
LinkedList&lt;T&gt;::LinkedList(LinkedList&amp; list) {
</code></pre>
<p>Why not use the initializer list to do this.</p>
<pre><code>    // the new head of list
    std::unique_ptr&lt;Node&gt; ptrNewHead{nullptr};
</code></pre>
<p>Which of course is the default action of the unique_ptr default constructor. So this operation is already done by this point in the constructor.</p>
<hr>
<p>I am going to mention comments again.</p>
<pre><code>    // raw pointer cursor for traversing the new (copied) list
    Node* ptrCurrNode{nullptr};

    // raw pointer for traversing the list to be copied
    Node* ptrCursor{list.ptrHead.get()};
</code></pre>
<p>These comments are not useful. They do not tell me more than I can already understand from simply reading the code. Infact your code could be made more readable by removing the comments and using better variable names.</p>
<p>Comments should not be used for describing the code (the code does that very well). Also because of comment rote over time the code and comments can easily become disjoint. As such if a maintainer comes across code that has a comment that does not mach the comment do they fix the comment or do they fix the code. If they are good they have to do one which means they have to do research. It is better to write better "Self documenting code" so the code describes what it does.</p>
<p>Your comments should describe WHY or an overall ALGORITHM or some particularly OBSCURE point that code can not describe. <strong>DO NOT</strong> simply convert your code into English and call it a comment.</p>
<hr>
<p>So above you ask why people assigned this to a temporary.</p>
<pre><code>void LinkedList&lt;T&gt;::pop() {

    ....     
    ptrHead = std::move(ptrHead-&gt;ptrNext);
}
</code></pre>
<p>The question you have to ask yourself.</p>
<p>Q: Does the <code>std::unique_ptr</code> assignment operator call the destruct on the object it contains before or after it assigns the new value?</p>
<p>Let us imagine two different version of the assignment operator.</p>
<pre><code> oldValue = internalPtr;
 internalPtr = newValue;
 delete oldValue;
</code></pre>
<p>or</p>
<pre><code> delete internalValue;
 internalValue = newValue;
</code></pre>
<p>How do those different implementations affect your code?<br>
What grantees does the standard provide?</p>
<hr>
<p>No need to use <code>std::endl</code> here.</p>
<pre><code>    os &lt;&lt; "NULL" &lt;&lt; std::endl;
</code></pre>
<p>Prefer to use <code>"\n"</code>. This is exactly the same except it does not force a flush of the stream. The main problem with people timing C++ streams is that they always manually flush them (like this) then complain they are not as fast a C streams. If you don't manually flush them (especially since the stream knows when to flush itself very efficiently) the C++ streams are comparable to C streams.</p>
<hr>
    </div>