<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Style and code</h2>

<ul>
<li><p>Numeric styles can be set using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number" rel="nofollow noreferrer"><code>Number</code></a>. eg <code>modalParent.style.opacity = '1';</code> can be <code>modalParent.style.opacity = 1;</code></p></li>
<li><p>To convert a string to a number use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number" rel="nofollow noreferrer"><code>Number</code></a> rather than <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt" rel="nofollow noreferrer"><code>parseInt</code></a>, or coerce the value eg <code>const foo = "1" * 1</code></p></li>
<li><p>Good code style's most important attribute is consistency. If you use a particular style use the same style throughout the code.</p>

<p>When defining a function you switch between the form <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function" rel="nofollow noreferrer">function declaration</a> (<code>function name(){</code>) and <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function" rel="nofollow noreferrer">function expression</a> (<code>const name = function() {</code>). Be consistent and use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function" rel="nofollow noreferrer">function declarations</a>.</p></li>
<li><p>When setting an element/node content and it is just text use the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent" rel="nofollow noreferrer"><code>textContent</code></a> property, it does not require a re-flow and is thus more efficient then using <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id" rel="nofollow noreferrer"><code>innerHTML</code></a> which forces parsing and re-flow of the page.</p></li>
<li><p>It is good practice to ensure that <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id" rel="nofollow noreferrer">element.id</a><sup><a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/id" rel="nofollow noreferrer">(*1)</a></sup> are unique to the page. If you do this then you can then use direct element reference<sup>(*4)</sup> to access elements without the need to cache or query the DOM.</p>

<p>eg <code>&lt;div id="myDiv"&gt;&lt;/div&gt; &lt;script&gt; myDiv.textContent = "hello world" &lt;/script&gt;</code> </p></li>
<li><p>Try to keep the code <a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself" rel="nofollow noreferrer">DRY (don't repeat yourself)</a>. The function <code>winCheck</code> is very <a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself" rel="nofollow noreferrer">WET (write everything twice)</a> and can be simplified (see example).</p></li>
<li><p>Elements have a <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dataset" rel="nofollow noreferrer">dataset</a> property. It is intended as a custom property that is part of the markup, changing a <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dataset" rel="nofollow noreferrer">dataset</a> property changes the markup. </p>

<p><a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dataset" rel="nofollow noreferrer">dataset</a> is not intended as a means of inter-script communication. Elements as with all JS object are highly polymorphic<sup><a href="https://en.wikipedia.org/wiki/Polymorphism_(computer_science)" rel="nofollow noreferrer">(*2)</a></sup><sup><a href="https://en.wikipedia.org/wiki/Ad_hoc_polymorphism" rel="nofollow noreferrer">(*3)</a></sup> and as such you can add and remove properties as required. See example.</p>

<p>If you do access <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dataset" rel="nofollow noreferrer">dataset</a> properties in JS you should use the direct property name reference rather than indirectly via the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttribute" rel="nofollow noreferrer"><code>setAttribute</code></a> function which is only intended to be to access undefined (Not in the DOM API) DOM properties. eg <code>&lt;div id="myDiv" data-foo-bar="0"&gt;&lt;/div&gt;&lt;script&gt; const val = myDiv.dataset.fooBar; myDiv.dataset.fooBar = 2 &lt;/script&gt;</code></p></li>
<li><p>You have a variety of <a href="https://en.wikipedia.org/wiki/Magic_number_(programming)" rel="nofollow noreferrer">magic numbers</a> throughout the code. Try to collect all constants in one place and name them appropriately.</p></li>
<li><p>Always use the simplest code form. eg There are 6 redundant characters in the expression <code>(turn % 2 === 0) ? 2 : 5</code> the brackets are redundant <code>turn % 2 === 0 ? 2 : 5</code> Invert the condition and test for <code>truthy</code> <code>turn % 2 ? 5 : 2</code></p></li>
<li><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Window" rel="nofollow noreferrer"><code>window</code></a> is the default object (the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis" rel="nofollow noreferrer">globalThis</a>) you only need to use it under very specific needs. eg <code>window.location.reload(true);</code> is the same as  <code>location.reload(true);</code></p></li>
<li><p>Use plurals for naming arrays or array like objects. eg <code>box</code> should be <code>boxes</code></p></li>
</ul>

<h2>Logic</h2>

<p>I do not get why you rotate the board, visually, gameplay wise, and code logic, it makes no difference, so why do it?</p>

<h2>Example</h2>

<p>The example is JS and (HTML to show reference associations) only as it is too much work to clean up the CSS for what is already a long answer.</p>

<p>I have made up CSS classes where needed rather than set style properties inline.</p>

<pre><code>reloadButton.addEventListener("click", () =&gt; location.reload(true));
board.addEventListener("click", turnCheck);
document.body.addEventListener("dblclick",() =&gt; location.reload(true));
var turn = 0; 
const boxes = [...document.getElementsByClassName("box")];
const PLAYER_X = "X", PLAYER_O = "O";
const winPatterns = "012,345,678,036,147,258,048,246".split(",");

function popUpWindow(winner) {
    modalContainer.classList.add("display-modal"); // add CSS rule to show modal
    if (winner === "tie") { playerResult.textContent = "It's a Tie" }
    else {
        playerResult.textContent = "wins";
        playerResult.classList.add("modal-win-player-" + winner); 
    }
}
function winCheck() {
    for (const pat of winPatterns) {
        if (boxes[pat[0]].player &amp;&amp; 
        boxes[pat[0]].player === boxes[pat[1]].player &amp;&amp; 
        boxes[pat[1]].player === boxes[pat[2]].player) {
            popUpWindow(boxes[pat[0]].player);
            return;
        }
    }
    if (!boxes.some(box =&gt; !box.player)) { popUpWindow("tie") }
}
function turnCheck(event) {
    const box = event.target;
    if (box.classList.contains('box') &amp;&amp; !box.player) {
        box.player = turn % 2 ? PLAYER_X : PLAYER_O;
        box.classList.add("board-moved-player-" + (turn++ % 2 ? PLAYER_X : PLAYER_O));
        winCheck();
    }
}
</code></pre>

<p>HTML</p>

<pre><code>&lt;div class="boundary" id="boundary"&gt;
  &lt;div class="board" id="board" style="transform:rotate(180deg)"&gt;
    &lt;div class="box"&gt;&lt;/div&gt;
    &lt;div class="box"&gt;&lt;/div&gt;
    &lt;div class="box"&gt;&lt;/div&gt;
    &lt;div class="box"&gt;&lt;/div&gt;
    &lt;div class="box"&gt;&lt;/div&gt;
    &lt;div class="box"&gt;&lt;/div&gt;
    &lt;div class="box"&gt;&lt;/div&gt;
    &lt;div class="box"&gt;&lt;/div&gt;
    &lt;div class="box"&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;div id="modalContainer"&gt;
  &lt;div class="customModal"&gt;
    &lt;h2 class="player-won" id="playerResult"&gt;&lt;/h2&gt;
    &lt;button id="reloadButton"&gt;Play Again&lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
</code></pre>

<p><strong>Additional references and notes</strong> (*)</p>

<ol>
<li><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/id" rel="nofollow noreferrer">Web API Element.id</a></p></li>
<li><p><a href="https://en.wikipedia.org/wiki/Polymorphism_(computer_science)" rel="nofollow noreferrer">Polymorphism</a></p></li>
<li><p><a href="https://en.wikipedia.org/wiki/Ad_hoc_polymorphism" rel="nofollow noreferrer">Ad hoc polymorphism</a></p></li>
<li><p>There is still debate if direct element reference is good practice (a hang on from the 90s browser wars between Netscape and Microsoft)</p>

<p>One argument against it is that support is not guaranteed. This only applies to older versions (~14) of FireFox which in fact does support direct reference, however its behavior in regard to non unique IDs is not the same as all other browsers. </p>

<p>All browsers now conform to the annexed standard, referencing the first instance of an element in the case there are duplicated ID (Note that duplicated IDs will force the page into quirks mode)</p>

<p>The other common argument is that it is not in the standard an thus support may be dropped at any time. This is untrue, support is annexed in the HTML5 spec (<a href="https://html.spec.whatwg.org/#named-access-on-the-window-object" rel="nofollow noreferrer">named access on window object</a>) and is not going to disappear.</p></li>
</ol>
    </div>