<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Hi welcome to code review! Interesting topic, I remember writing some different prime sieves for project Euler problems.</p>

<p>Stylistically, it would really help to use <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP8</a>. It's python's standard style-guide which helps readability for yourself and others. Things like imports at the top, consistent naming, etc.</p>

<p>There are a few places where I think ternary operators would really clean up the code: e.g.</p>

<pre><code>if statsOnly:
    return count
else:
    return outPrimes
</code></pre>

<p>would be replaced with</p>

<pre><code>return count if statsOnly else outPrimes
</code></pre>

<p>You have a lot of variables and code floating around outside of functions. I think a class would serve well to fix this. You could have your <code>modPrms</code>, <code>modPrmsM30</code> etc as class or instance variables and the functions like <code>num2ix()</code> as methods of the class. A rough outline of the class might be:</p>

<pre class="lang-py prettyprint-override"><code>class PrimeSieve:

    def __init__(self):
        self.cutoff = 1e4
        self.sieve_size = 2 ** 20
        self.clock_speed = 1.6  # In GHz

        # mod 30 wheel constant arrays
        self.mod_primes = [7, 11, 13, 17, 19, 23, 29, 31]
        self.mod_primes_m30 = [7, 11, 13, 17, 19, 23, 29, 1]
        self.gaps = [4, 2, 4, 2, 4, 6, 2, 6, 4, 2, 4, 2, 4, 6, 2, 6]  # 2 loops for overflow
        self.ndxs = [0, 0, 0, 0, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 6, 6, 7, 7, 7, 7, 7, 7]
        self.rnd2wh = [7, 7, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 3, 3, 3, 3, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6]

    def num2ix(self, n):
        """Return the wheel index for n."""
        # Adjust for wheel starting at 1st prime past 2,3,5 vs. 0
        n -= 7
        return (n // 30 &lt;&lt; 3) + self.ndxs[n % 30]

    ...

</code></pre>

<p>You could also provide things like clock_speed as arguments which might be preferred (just put these into the init arguments):</p>

<pre><code>def __init__(self, cutoff, sieve_size, clock_speed):
    ...
</code></pre>

<p>It seems weird to me to have <code>progress()</code> contain an <code>enabled</code> argument which basically decides whether anything is done at all. I would remove this argument, and simply wrap the function call with an <code>if</code>. For displaying progress I'd also highly recommend using <a href="https://pypi.org/project/tqdm/" rel="nofollow noreferrer">tqdm</a> which is made for exactly this kind of thing. <code>print()</code> also has a <code>flush</code> argument which will flush output. If you don't want to use tqdm, switch to using f-strings or <code>.format()</code> which are much more readable than the old <code>%</code> style you're using.</p>

<p>You can add file <code>"""docstrings"""</code> just as you have function docstrings. These sit at the top of the file and are preferred over introductory comments.</p>

<p>Timing functions and methods is often done well using decorators. These wrap methods allowing you to execute code before and after their execution which is helpful for timing, logging and all sorts of other things. The following is a simple example I use a lot. It can be applied to functions and methods:</p>

<pre class="lang-py prettyprint-override"><code>from functools import wraps


def timer_func(orig_func):
    """
    Prints the runtime of a function when applied as a decorator (@timer_func).
    """

    @wraps(orig_func)
    def wrapper(*args, **kwargs):

        t1 = time()
        result = orig_func(*args, **kwargs)
        t2 = time() - t1

        print(f'{orig_func.__qualname__} ran in: {t2} seconds.')

        return result
    return wrapper
</code></pre>

<p>You could write another decorator which counts the number of calls of a function, <a href="https://stackoverflow.com/questions/9158294/good-uses-for-mutable-function-argument-default-values">see here</a>.</p>

<p>Your variable naming could be much improved. It should be obvious what everything is. <code>GHz</code> -&gt; <code>clock_speed</code>; <code>modPrms</code> -&gt; <code>mod_primes</code> <code>rnd2wh</code> -&gt; literally anything else. Using <code>i</code>, <code>j</code> or <code>x</code> is fine for small one-off index names or iterables but not for such huge sections of code.</p>

<p>The variable <code>low</code> is declared but not used. This may be a bug.</p>

<p>If you want to iterate over an object and get its indices, use <code>enumerate()</code>:</p>

<pre><code>for i, multiple in enumerate(multiples):
    ...
</code></pre>

<p><code>segmented_sieve()</code> should really be broken up. You have a lot of code here for processing, printing, formatting ... Try to have your functions perform single, short tasks. This also makes it much easier to convert functions to generators as you don't need to jump in and out, you can often just swap a <code>return</code> for a <code>yield</code> and call it as an iterable. Modularity also helps with readability, debugging, testing and extending. </p>

<p>It's recommended to wrap code you call in <code>if __name__ == '__main__':</code> See <a href="https://stackoverflow.com/questions/419163/what-does-if-name-main-do">this</a> excellent answer for why.</p>

<p>There's more to be said but I have to go for now; I may add more comments later. Feel free to post another question with the above changes where you may get more specific feedback on optimisations and such.</p>
    </div>