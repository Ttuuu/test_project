<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Class inheritance</h1>
<p>Classes no longer have to be subclasses from object</p>
<pre><code>class WebsiteImages:
</code></pre>
<h1>Naming Conventions</h1>
<p>Methods and variable names should be <code>snake_case</code>. Classes should be <code>PascalCase</code>, so you got that correct :-).</p>
<h1>Imports</h1>
<p>Any and all imports should go at the top of the file.</p>
<h1><code>f""</code> strings</h1>
<p>You should use <code>f""</code> strings to directly implement variables into your strings.</p>
<pre><code>url = urllib.request.urlopen(f"{self.website_url}&amp;page={page}&amp;sort=best")
</code></pre>
<h1>User Interaction</h1>
<p>The way a user has to interact with this program is pretty challenging to understand. If I was a normal user, I would do something like this:</p>
<pre><code>person = WebsiteImages("John Smith", "https://www.WebsiteImages.co.uk")
</code></pre>
<p>But I would get an error, or no images returned because I didn't know the name had to be encoded with <code>%20</code> and I didn't know I needed to specify a very particular url. I would blame it on the program and look for something else that's more user friendly.</p>
<hr>
<p>I would solve this by only requiring a name. Since you're going to one website, you can save the url as an instance variable and sort things out there, instead of relying on a user to provide perfect input. <em>Never trust user input</em>.</p>
<pre><code>john = WebsiteImages("John Smith")
print(john.get_image_ids())
</code></pre>
<p>And within the constructor you can do something like this:</p>
<pre><code>def __init__(self, photographer: str):
    self.photographer = '%20'.join(photographer.split())
    self.website_url = f"https://www.WebsiteImages.co.uk/search/photographer?photographer={self.photographer}"
</code></pre>
    </div>