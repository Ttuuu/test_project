<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>"numeric palindromes" is rather unfortunate term. It is not clear if nonintegers are to be considered. The implementation only considers integers, in which case i would rather use term "palindromic integers".</p>
<p>It is also not explicitly stated, although assumed, that only base 10 representations are to be considered. Some numbers that are not palindromic in base 10 may be palindromic in different bases. I would actualy say that every nonnegative integer is palindromic in infinte amount of various bases. And so even a better term might be "palindromic base 10 integers".</p>
<blockquote>
<p>preferably without using a for loop</p>
</blockquote>
<p>That is a silly requirement, you could do it with <code>reduce</code> but that would require to first create an array of all the numbers less then n. Which would increase the memory complexity of the implementation to <code>O(n)</code> for no real benefit. And it will probably be slower, although the big-O time complexity stays the same.</p>
<p>To be complete the current memory complexity Is <code>O(log(n))</code>. And time complexity is <code>O(n * log(n))</code>, or more precisely <code>O(log(n!))</code>.</p>
<p>Since you are not asking to improve performance, but rather to shorten the code (and that's perfectly fine if you dont pass large n's and dont call the function many times in a loop) , I would say you are pretty good with your current implementation.</p>
<p>I would just replace the ternary with an <code>if</code> because adding zero is a useless operation.</p>
<p>And there is a bug in your implementation where the result is by 1 greater then it should be if the input n is a palindrome. You should do <code>i &lt; n</code> instead of <code>i &lt;= n</code>.</p>
<p>If you want to improve the time complexity, you need to do some maths as @vnp already suggested. Intuition tells me you might end up with time complexity <code>O(log(n))</code> and that will be a big improvement for bigger n's compared to your current <code>O(log(n!))</code> implementation.</p>
    </div>