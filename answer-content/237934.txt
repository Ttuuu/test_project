<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I have some suggestions.</p>

<ol>
<li>When declaring variable that has inheritance, uses the interface in the left declaration part; this will make the code easier to refactor.</li>
</ol>

<p><strong>Before</strong> </p>

<pre class="lang-java prettyprint-override"><code>ArrayDeque&lt;Fish&gt; safetyPool = new ArrayDeque&lt;Fish&gt;();
ArrayDeque&lt;Fish&gt; activePool = new ArrayDeque&lt;Fish&gt;();
</code></pre>

<p><strong>After</strong> </p>

<pre class="lang-java prettyprint-override"><code>Deque&lt;Fish&gt; safetyPool = new ArrayDeque&lt;Fish&gt;();
Deque&lt;Fish&gt; activePool = new ArrayDeque&lt;Fish&gt;();
</code></pre>

<ol start="2">
<li>When using the diamond operators with variables, declared the type in the left side, the right one will become optional; since it's declared in the variable side.</li>
</ol>

<pre class="lang-java prettyprint-override"><code>Deque&lt;Fish&gt; safetyPool = new ArrayDeque&lt;&gt;();
Deque&lt;Fish&gt; activePool = new ArrayDeque&lt;&gt;();
</code></pre>

<ol start="3">
<li>To remove the <code>Arrow Code</code> in the while, I suggest that you read the blog post made by Jeff Atwood <a href="https://blog.codinghorror.com/flattening-arrow-code/" rel="nofollow noreferrer"><code>Flattening Arrow Code</code></a>. In my opinion, it's the best way to get rid this kind of code.</li>
</ol>

<p>The logic contained in the while can be refactored.</p>

<pre class="lang-java prettyprint-override"><code>while (!activePool.isEmpty()) {
   Fish safeFish = safetyPool.peekLast();
   Fish swimmingFish = activePool.peekFirst();

   if (safeFish == null || safeFish.dir != 1 || safeFish.dir == swimmingFish.dir) {
      safetyPool.offer(activePool.pollFirst());
      continue;
   }

   if (safeFish.att &gt; swimmingFish.att) {
      activePool.removeFirst();
   } else {
      safetyPool.removeLast();
   }
}
</code></pre>
    </div>