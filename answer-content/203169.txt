<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p><strike>Does the <code>scipy.sparse.coo_matrix()</code> function accept three different lists as parameters?</strike></p>

<p><strike>Maybe I'm missing something but your "fastest" method is not actually the fastest, since you'd still need some conversion to parse it to the function anyhow.</strike></p></li>
<li><p>I think your timing is off</p>

<blockquote>
  <p>For this one <code>z = [tuple(el.values()) for el in x]</code> you say:</p>
  
  <p>evaluate each line as a tuple of the dictionary values. Comparable in speed with something like <code>[[el['id'], el['y'], el['values']] for el in x]</code>.</p>
</blockquote>

<p>I have tested this myself, and it seems the second suggestion is 2 times as fast as the first method.</p>

<pre><code>Setup: x = [{'id':random.randint(0,5),'y':random.randint(0,5), 'value':random.randint(0,500)}]*100000

z = [tuple(el.values()) for el in x]
3.070572477

z1 = [[el['id'], el['y'], el['value']] for el in x]
1.5449943620000006
</code></pre></li>
<li><p>This could also be a generator</p>

<pre><code>def gen_vals(d):
    for el in d:
        yield [el['id'], el['y'], el['value']]
</code></pre>

<p>However this did not improve speed, but just to bounce some ideas around</p>

<pre><code>Setup: x = [{'id':random.randint(0,5),'y':random.randint(0,5), 'value':random.randint(0,500)}]*100000

z1 = [el['id'] for el in x]; z2 = [el['y'] for el in x]; z3 = [el['value'] for el in x]
1.244481049000001

z1 = [[el['id'], el['y'], el['value']] for el in x]
1.5449943620000006

z1 = list(gen_vals(x))
1.8347137390000015

z1 = [a for a in gen_vals(x)]
2.018111815000001
</code></pre></li>
</ul>

<h1>Timing code for reference</h1>

<pre><code>import timeit as ti
import random

def gen_vals(d):
    for el in d:
        yield [el['id'], el['y'], el['value']]

# SETUP
x = [{'id':random.randint(0,5),'y':random.randint(0,5), 'value':random.randint(0,500)}]*100000
print("Setup: x = [{'id':random.randint(0,5),'y':random.randint(0,5), 'value':random.randint(0,500)}]*100000")


print("z = [tuple(el.values()) for el in x]")
print(ti.timeit("z = [tuple(el.values()) for el in x]", 
          setup="from __main__ import x",
          number=100))

print("z = pd.DataFrame(x)")
print(ti.timeit("z = pd.DataFrame(x)", 
          setup="import pandas as pd; from __main__ import x",
          number=100))

print("z1 = [el['id'] for el in x]; z2 = [el['y'] for el in x]; z3 = [el['value'] for el in x]")
print(ti.timeit("z1 = [el['id'] for el in x]; z2 = [el['y'] for el in x]; z3 = [el['value'] for el in x]",
          setup="from __main__ import x",
          number=100))

print("z1 = [[el['id'], el['y'], el['value']] for el in x]")
print(ti.timeit("z1 = [[el['id'], el['y'], el['value']] for el in x]",
          setup="from __main__ import x",
          number=100))

print("z1 = list(gen_vals(x))")
print(ti.timeit("z1 = list(gen_vals(x))",
          setup="from __main__ import x, gen_vals",
          number=100))

print("z1 = [a for a in gen_vals(x)]")
print(ti.timeit("z1 = [a for a in gen_vals(x)]",
          setup="from __main__ import x, gen_vals",
          number=100))
</code></pre>
    </div>