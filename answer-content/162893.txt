<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In terms of simply making your code better (keeping with the brute force approach) there are a couple things you could note.</p>

<ol>
<li>You only need to check the even numbers because the answer is divisible by 2</li>
<li>Only numbers ending in 5 or 0 are divisible by 5</li>
</ol>

<p>Putting those together we can see that the solution must be divisible by 10. That means we can start our search at 2520 and add 10 each time:</p>

<pre><code>static int GetSmallestEvenlyDivisibleNumber(int lowerBound = 1, int upperBound = 20)
{
    int testNumber = 2520;

    while (!isEvenlyDivisible(testNumber, lowerBound, upperBound))
    {
        testNumber += 10;
    }

    return testNumber;
 }
</code></pre>

<p><strong>Edit:</strong></p>

<p>As Peter Taylor pointed out in the comments, you can take the logic further to incrementing by 2520 each time because the final solution needs to be divisible by all the numbers 1-10. However, the main thrust of my answer was supposed to be that you don't need to brute force and you can compute the solution directly.</p>

<hr>

<p>Your code looks good: you have consistent spacing and good, descriptive names. <code>isEvenlyDivisible</code> should be <code>IsEvenlyDivisible</code> as all methods are <code>PascalCase</code> in C#.</p>

<p>I would remove the optional parameters from <code>GetSmallestEvenlyDivisibleNumber</code> as we've now made it much more specific to the case of 1-20.</p>

<p>You can calculate this directly without needing to brute force see <a href="http://www.mathblog.dk/project-euler-problem-5/" rel="nofollow noreferrer">this blog</a> for a good explanation of that approach.</p>
    </div>