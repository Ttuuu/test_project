<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>... used <a href="https://en.wikipedia.org/wiki/Hash_table#Robin_Hood_hashing" rel="nofollow noreferrer">Robin Hood hashing</a>. It seems way too simple so I'm not sure if it is implemented correctly!</p>
</blockquote>

<p>No comment.</p>

<blockquote>
  <p>Is it better to have an array of entries (buckets) or an array of pointers to entries (initialized with NULL)?</p>
</blockquote>

<p>6.01 or half-dozen of the other.  Depends on use case.</p>

<p>I prefer a dynamic array of entries for less (perceived) fragmentation.</p>

<blockquote>
  <p>Are there any improvements that can be done in this hashtable?</p>
</blockquote>

<p><strong>Lack of comments.</strong></p>

<p>I'd expect <em>something</em> to help indicate usage and limitation of the various generated functions in the <code>.h</code> files.  Perhaps even a commented terse example?</p>

<p>Put that <strong>How to</strong> in the .h</p>

<p><strong>Name space impact.</strong></p>

<p><code>hashset.h</code> creates</p>

<pre><code>CMC_HASHSET_...
CMC_HASH_...
EntryState...
ES_...
cmc_hashtable...
HASHSET_...
</code></pre>

<p>I'd expect a more uniform name space usage.  Example</p>

<pre><code>cmcht.h
cmcht_...
CMCHT_...
</code></pre>

<p><strong>Assumed range</strong></p>

<p><code>size_t cmc_hashtable_primes[] = {53, 97, 193, 389, ... 402653189, 805306457, 1610612741</code> assumes <code>size_t</code> is 32 bit.  For wider portability, conditionally handle 16 to 64 bit.</p>

<p>Unclear why table lacked entries near 2,000,000,000 and 4,000,000,000.</p>

<p><strong>Why <code>double</code> math?</strong></p>

<pre><code>(size_t)((double)_set_-&gt;capacity * 1.5)
vs.
_set_-&gt;capacity + _set_-&gt;capacity/2
</code></pre>

<p>If concerned about overflow, a prior test is useful.</p>

<p><strong>Linear search vs binary</strong></p>

<p>With dozens of values to search, instead of a linear search <code>while (cmc_hashtable_primes[i] &lt; required) i++;</code>, perhaps a binary one?</p>

<p><strong>Allocate to sizeof de-referenced pointer</strong></p>

<p>Original code was hard to review for correctnesses.</p>

<pre><code>_set_-&gt;buffer = malloc(sizeof(SNAME##_entry) * real_size); 
// vs
_set_-&gt;buffer = malloc(sizeof *_set_-&gt;buffer * real_size); 
</code></pre>

<p><strong>Good use of <code>size_t</code>/<code>bool</code></strong></p>

<p><strong>Good use of prime numbers in hashing</strong></p>

<pre><code>size_t hash = _set_-&gt;hash(element);                                                    
size_t original_pos = hash % _set_-&gt;capacity; 
</code></pre>

<p><a href="https://stackoverflow.com/q/32912894/2410359">related</a></p>

<p><strong>Main test</strong></p>

<p>I'd re-order <code>includes</code> to insure <code>"hashset.h"</code> stands on its own</p>

<pre><code>//#include &lt;stdio.h&gt;
//#include &lt;stdlib.h&gt;
#include "hashset.h"
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
</code></pre>

<p>It appears the .h code is designed to handle multiple <code>HASHSET_GENERATE()</code>.  If so, good to demo it.</p>

<p>A full range <code>int</code> compare for <code>intcmp(int a, int b)</code> without potential UB is <code>return (a &gt; b) - (a &lt; b)</code></p>

<hr>

<p>Bonus</p>

<p>OP had "only go to 32 bit integers is because I took them from <a href="https://planetmath.org/goodhashtableprimes" rel="nofollow noreferrer">here</a>." so I extended to 64-bit.</p>

<pre><code>0x               3                    3
0x               7                    7
0x               D                   13
0x              1D                   29
0x              35                   53
0x              61                   97
0x              C1                  193
0x             185                  389
0x             301                  769
0x             607                 1543
0x             C07                 3079
0x            1807                 6151
0x            3001                12289
0x            6011                24593
0x            C005                49157
0x           1800D                98317
0x           30005               196613
0x           60019               393241
0x           C0001               786433
0x          180005              1572869
0x          30000B              3145739
0x          60000D              6291469
0x          C00005             12582917
0x         1800013             25165843
0x         3000005             50331653
0x         6000017            100663319
0x         C000013            201326611
0x        18000005            402653189
0x        30000059            805306457
0x        60000005           1610612741
0x        C0000001           3221225473
0x       180000017           6442450967
0x       300000005          12884901893
0x       600000017          25769803799
0x       C0000002F          51539607599
0x      1800000007         103079215111
0x      3000000001         206158430209
0x      6000000019         412316860441
0x      C000000005         824633720837
0x     18000000011        1649267441681
0x     30000000059        3298534883417
0x     60000000001        6597069766657
0x     C0000000025       13194139533349
0x    18000000002F       26388279066671
0x    300000000037       52776558133303
0x    60000000000D      105553116266509
0x    C00000000037      211106232533047
0x   1800000000011      422212465066001
0x   3000000000059      844424930132057
0x   6000000000011     1688849860263953
0x   C000000000019     3377699720527897
0x  18000000000053     6755399441055827
0x  3000000000001F    13510798882111519
0x  6000000000005F    27021597764223071
0x  C0000000000005    54043195528445957
0x 180000000000025   108086391056891941
0x 300000000000023   216172782113783843
0x 600000000000005   432345564227567621
0x C00000000000031   864691128455135281
0x1800000000000011  1729382256910270481
0x3000000000000005  3458764513820540933
0x600000000000002F  6917529027641081903
0xC000000000000011 13835058055282163729
0xFFFFFFFFFFFFFFC5 18446744073709551557  extra
</code></pre>
    </div>