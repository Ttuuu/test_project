<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Loops would be the perfect tool here to reduce duplication; although getting it exactly as you have will be difficult due to you currently spelling out numbers ("first", "second", "third"...). For the sake of simplicity, I'm going to ignore the numeric words, because producing those is non-trivial and a whole project on its own unless you use an existing library.</p>
<p>In their place, I'm going to use a simple function. This can be optimized using a dictionary acting as a <code>case</code>, but I think it's fine as-is besides some minor duplication:</p>
<pre><code>def format_number(n: int) -&gt; str:
    last_digit = str(n)[-1]
    if last_digit == "1":
        return f"{n}st"
    elif last_digit == "2":
        return f"{n}nd"
    elif last_digit == "3":
        return f"{n}rd"
    else:
        return f"{n}th"

&gt;&gt;&gt; format_number(2)
'2nd'
&gt;&gt;&gt; format_number(5)
'5th'
&gt;&gt;&gt; format_number(1)
'1st'
</code></pre>
<p>It goes a little bit wonky in the teens (<code>"12nd"</code>), but like I said, it isn't a super straightforward problem, and I don't want to sidetrack the review.</p>
<hr>
<p>First, you can ask for numbers using a loop, and in the loop, place the entered numbers into a list:</p>
<pre><code>nums = int(input("How many numbers you want to calculate?\n")) 

entered_nums = []
for n in range(nums):
    x = float(input(f"Enter the {format_number(n + 1)} number: "))
    entered_nums.append(x)
</code></pre>
<p>When run, I get:</p>
<pre><code>How many numbers you want to calculate?
3
Enter the 1st number: 9
Enter the 2nd number: 8
Enter the 3rd number: 7
</code></pre>
<p>And <code>entered_nums</code> now holds <code>[9, 8, 7]</code>.</p>
<p>If you're at all familiar with list comprehensions though, you'll notice that that loop can be simplified a bit:</p>
<pre><code>entered_nums = [float(input(f"Enter the {format_number(n + 1)} number: "))
                for n in range(nums)]
</code></pre>
<p>And this will have the same effect with a bit less bulk.</p>
<hr>
<p>Once you have the numbers to do math on, you need to ask for the operation to apply, then apply that operation.</p>
<p>For the first, I'm going to import the <code>operator</code> module because it'll make life much easier. <code>operator.add</code> for example is the same thing as <code>+</code>; only it can be stored as an object.</p>
<p>I'm going to use a dictionary to store the menu code to operator relationship:</p>
<pre><code>from operator import add, sub, mul, truediv
. . .

func = int(input('''What do you want to do?
            1 to add
            2 to subtract
            3 to multiply
            4 to divide
            '''))

code_to_op = {1: add,
              2: sub,
              3: mul,
              4: truediv}
</code></pre>
<p>This allows for easily doing math:</p>
<pre><code>&gt;&gt;&gt; code_to_op = {1: add,
                  2: sub,
                  3: mul,
                  4: truediv}

&gt;&gt;&gt; op = code_to_op[3]
&gt;&gt;&gt; op(3, 5)
15
</code></pre>
<p>Note though that a bad dictionary lookup will cause an error. <code>code_to_op[5]</code> for example will raise a <code>KeyError</code>. I didn't handle that for simplicity and because you currently aren't handling bad input. It should be dealt with though.</p>
<hr>
<p>So now once we can get the operator that the user wants, we need to apply it to the numbers they entered. Again, a loop (or something that acts as a loop) is our friend here. We'll need to keep track of the current result of the equation (the "accumulator"), and a loop to do the math:</p>
<pre><code>acc = entered_nums[0]  # The first number they entered will be our starting accumulator
for entered_num in entered_nums[1:]:  # And we'll loop over all the numbers after the first
    acc = op(acc, entered_num)

print(acc)
</code></pre>
<p>If the user entered in the numbers 2, 3, and 4, and then entered in 1 for the operator (add), <code>acc</code> would hold <code>9.0</code> at the end of that loop.</p>
<p>The acc+loop pattern is incredibly common in programming though. So common in fact that it has its own name: <a href="https://docs.python.org/3.8/library/functools.html#functools.reduce" rel="nofollow noreferrer"><code>reduce</code></a>:</p>
<pre><code>from functools import reduce

. . .

result = reduce(op, entered_nums)
</code></pre>
<p><code>reduce</code> here automates the looping for us. It's essentially equivalent to the previous loop that calculated the same value.</p>
<hr>
<p>After taking that all into consideration, I'm left with:</p>
<pre><code>from operator import add, sub, mul, truediv
from functools import reduce

def format_number(n: int) -&gt; str:
    if n == 1:
        return f"{n}st"
    elif n == 2:
        return f"{n}nd"
    elif n == 3:
        return f"{n}rd"
    else:
        return f"{n}th"

while True:
    try:
        nums = int(input("How many numbers you want to calculate?\n"))

        entered_nums = [float(input(f"Enter the {format_number(n + 1)} number: "))
                        for n in range(nums)]

        code_to_op = {1: add,
                      2: sub,
                      3: mul,
                      4: truediv}

        func = int(input('''What do you want to do?
                    1 to add
                    2 to subtract
                    3 to multiply
                    4 to divide
                    '''))

        op = code_to_op[func]

        acc = entered_nums[0]  # The first number they entered will be our starting accumulator

        for entered_num in entered_nums[1:]:  # And we'll loop over all the numbers after the first
            acc = op(acc, entered_num)

        print(acc, "\n")

    except(ZeroDivisionError):
        print("You can never divide by Zero!")

    except(ValueError):
        print("Check your input.")
</code></pre>
<p>And an example run:</p>
<pre><code>How many numbers you want to calculate?
6
Enter the 1st number: &gt;? 9
Enter the 2nd number: &gt;? 8
Enter the 3rd number: &gt;? 7
Enter the 4th number: &gt;? 6
Enter the 5th number: &gt;? 5
Enter the 6th number: &gt;? 4
What do you want to do?
                    1 to add
                    2 to subtract
                    3 to multiply
                    4 to divide
                    &gt;? 1
39.0
</code></pre>
<p>There is still a lot that can be mentioned (grouping things into functions, fixing some error handling), but I need to start studying for an exam :)</p>
    </div>