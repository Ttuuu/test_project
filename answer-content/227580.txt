<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I support all comments in <a href="https://codereview.stackexchange.com/a/224272/47529">xander27's answer</a>, especially RE indentation vs <code>#end</code>. With regards to naming, I'll add one additional comment - instead of giving a name to a variable you never use, just name it <a href="https://stackoverflow.com/a/5893946/3076272"><code>_</code></a></p>

<hr>

<p>Your <code>hasFile</code> implementation could be much simpler; what you really want is <a href="https://docs.python.org/2/library/functions.html#any" rel="nofollow noreferrer"><code>any</code></a></p>

<pre><code>return any(len(file_list) &gt; 0 and not (len(file_list) == 1 and file_list[0] == "Thumbs.db") for _, _, file_list in os.walk(p_path))
</code></pre>

<p>That's a little verbose, so I'll split it up into two functions.</p>

<pre><code>def file_list_has_file(file_list):
    return len(file_list) &gt; 0 and not (
        len(file_list) == 1 and file_list[0] == "Thumbs.db"
    )

def has_file(p_path):
    return any(
        file_list_has_file(file_list)
        for _, _, file_list in os.walk(p_path)
    )
</code></pre>

<hr>

<p>You can improve performance/correctness by modifying <code>dirs</code>; from <a href="https://docs.python.org/2/library/os.html#os.walk" rel="nofollow noreferrer">the documentation</a> (emphasis mine):</p>

<blockquote>
  <p>When <code>topdown</code> is <code>True</code>, the caller can modify the <code>dirnames</code> list in-place, and <code>walk()</code> will only recurse into the subdirectories whose names remain in <code>dirnames</code>; this can be used to prune the search, impose a specific order of visiting, or even to inform <strong><code>walk()</code> about directories the caller creates or renames before it resumes <code>walk()</code> again.</strong></p>
</blockquote>

<p>Once you <code>shutil.rmtree</code> a directory, you should take it out of the list so that <code>os.walk</code> doesn't bother continuing to recurse. This is fine if you keep your current approach, but I think I have a better option in my next section.</p>

<hr>

<p>When you look even closer at <code>folderCleanup</code> and <code>hasFile</code>, you realize that they're <em>basically</em> the same function - one checks if there are any files in the directory, while the other checks if there are any folders in the directory and if so recurses (effectively, not literally). This is actually really weird when you realize that <code>os.walk</code> <strong>already</strong> traverses all subdirectories; by doing it again in <code>hasFiles</code> you're really just confusing things. Ultimately, a directory is empty if two things are true:</p>

<ol>
<li>It has no files (except <code>"Thumbs.db"</code>) <strong>and</strong></li>
<li>It has no non-empty directories</li>
</ol>

<p>We already have all of the information to determine whether or not this is true, and we can do so like this:</p>

<ol>
<li>Get the directories, <strong>bottom-up</strong> instead of <strong>top-down</strong></li>
<li>If the directory meets the requirements, keep track of it</li>
<li>Once you've categorized all of them, clean house.</li>
</ol>

<p>You don't necessarily have to get the full list of them before you clean things if you use a generator, like so:</p>

<pre><code>def directory_has_files(files):
    return len(files) &gt; 0 and not (
        len(files) == 1 and files[0] == "Thumbs.db"
    )

def directory_has_nonempty_subdirectories(
    path, subdirectories, cache
):
    return any(
        cache[os.path.join(path, subdirectory)]
        for subdirectory in subdirectories
    )

def find_empty_directories(root_path):
    cache = defaultdict(lambda _: False)
    for root, subdirectories, files in os.walk(
        rootpath, topdown=False
    ):
        has_files = directory_has_files(files)
        if not subdirectories:
            cache[root] = has_files
        else:
            cache[
                root
            ] = directory_has_nonempty_subdirectories(
                root, subdirectories, cache
            )

        if not cache[root]:
            yield root

def remove_empty_directories(root_path):
    for empty_directory in root_path:
        shutil.rmtree(empty_directory, ignore_errors=True)
</code></pre>

<p>You may notice that I've used <a href="https://docs.python.org/2/library/collections.html#collections.defaultdict" rel="nofollow noreferrer"><code>defaultdict</code></a> to make it a bit easier to find out if something is known to be empty. Otherwise, I'm taking advantage of the bottom-up approach to avoid having to calculate something repeatedly on the way down.</p>

<p>If you don't want to issue as many <code>shutil.rmtree</code> commands, you could make it a bit more clever, and only report the highest-level empty directory. For example, you could do this at the end of <code>find_empty_directories</code> to not report until you find a non-empty, and then do the children that are empty.</p>

<pre><code>if cache[root]:
    for subdirectory in subdirectories:
        subpath = os.path.join(root, subdirectory) 
        if cache[subpath]:
            yield subpath
</code></pre>
    </div>