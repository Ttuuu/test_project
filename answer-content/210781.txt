<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First, I would convert all of the functions which might throw an error to return some kind of failable type, like <code>Maybe Int</code> or <code>Either String Token</code>. This includes <code>str2tok</code>, <code>tokenize</code>, and <code>eval</code>. This would also remove the need for the <code>countTok</code> function, since the program can just return an error value from <code>eval</code> instead. With the help of the <code>Monad</code> instances for these error types, this is a relatively simple change.</p>

<p>Next, I would use <a href="http://hackage.haskell.org/package/base-4.12.0.0/docs/Data-Char.html#v:isDigit" rel="nofollow noreferrer"><code>isDigit</code></a> from <code>Data.Char</code> instead of <code>c `elem` ['0'..'9']</code> because <code>isDigit</code> makes less comparisons in order to determine if it's a digit.</p>

<p>Lastly, I would change the <code>Operator</code> type to the function type <code>Int -&gt; Int -&gt; Int</code>. This will remove the need for <code>applyOp</code> and will consolidate all the places that would be necessary to change if you wanted to extend the program to accept more operators.</p>

<pre><code>import Data.Char (isDigit)

data Token = TNum Int | TOp (Int -&gt; Int -&gt; Int)

main :: IO ()
main = do
    line &lt;- getLine
    either putStrLn print $ do
        tokens &lt;- tokenize line
        eval [] tokens

tokenize :: String -&gt; Either String [Token]
tokenize = mapM str2tok . words

str2tok :: String -&gt; Either String Token
str2tok tkn
    | (c:_) &lt;- tkn, isDigit c = Right $ TNum (read tkn)
    | otherwise = TOp &lt;$&gt; case tkn of
        "+" -&gt; Right (+)
        "-" -&gt; Right (-)
        "*" -&gt; Right (*)
        "/" -&gt; Right div
        _   -&gt; Left $ "No such operator " ++ tkn

eval :: [Int] -&gt; [Token] -&gt; Either String Int
eval (s:_) []                   = Right s
eval stack (TNum t:ts)          = eval (t : stack) ts
eval (x:y:stacknoxy) (TOp t:ts) = eval (t y x : stacknoxy) ts
eval _ _                        = Left "Not a correct expression."
</code></pre>
    </div>