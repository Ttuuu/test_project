<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Check each unique sub string once</h2>

<p>I agree with the existing answer, however there is a faster way to solve the problem, there is also an early exit possible that many of the challenges will test for.</p>

<p>The early exit can be found by finding out if there are any two characters that are the same. If not then there are no anagrams that are longer than 1 character an thus you can exit with a result of 0</p>

<p>Using a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map" rel="nofollow noreferrer">Map</a> you can count unique anagrams as you go. Each time you find an existing anagram you add to the total count the number of that anagram already found, then add one to that anagram.</p>

<p>The solution complexity is set by the number of characters in the input string (ignoring the early exit) and not related to the string length and number of anagrams as your function does</p>

<p>For a 28 character string the solution can be found in 405 iterations compared to your ~550,000 or ~4,059 for the existing answer.</p>

<pre><code>function anagramCounts(str) {
    const found = new Map();
    var i,end, subLen = 1, count = 0, counts;
    while (subLen &lt; str.length) {
        end = (i = 0) + subLen++;
        while (end &lt;= str.length) {
            const sorted = [... str.substring(i++, end++)].sort().join("");   
            if (!found.has(sorted)) { found.set(sorted, [1]) }
            else { count += (counts = found.get(sorted))[0]++ }
        }
    }
    return count;
}
</code></pre>

<h2>Some additional optimizations</h2>

<p>The sort is also a where complexity grows. Because you need to pass over whole string once to find single characters you could also optimize the sort as you will know the relative order of each character to its neighbors after the first pass.</p>

<p>After the first pass you will know which characters will not be part of longer anagrams (those that appear only once).</p>

<p>You can replace all single instance characters with a symbol after the first pass. Then replace any sequence of 2 or more symbols with a single symbol. This reduces the total string length that needs to be tested in further passes, and also provides a way to avoid sorting a sub string if it contains the symbol.</p>
    </div>