<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I see a couple of ways to speed this up.</p>

<p>Observe that at least one factor is even, and exactly one factor is a multiple of 3, so these numbers are all divisible by 6. Assuming random input, testing for that at the beginning will find the answer in one inexpensive operation in 5 out of 6 cases:</p>

<pre><code>if (userInput % 6) {
    printf("User input is not a triangular number\n");
    return 0;
}
</code></pre>

<p>As for the rest of it, if we set n = x + 1, we get</p>

<p><span class="math-container">$$T(n-1)=(n-1)(n)(n+1)=n^3-n$$</span></p>

<p>Thus, we can solve in O(1) time, though the cube root is a somewhat expensive operation:</p>

<pre><code>#include &lt;math.h&gt;    /* Link with -lm in gcc */

int n;

n = (int) (ceil(cbrt(userInput)) + 0.1);
if (n * (n-1) * (n+1) == userInput)
    printf("User input is a triangular number\n");
else
    printf("User input is not a triangular number\n");
</code></pre>

<p>We add <code>0.1</code> after the <code>ceil</code> because the <code>double</code> value might be something like <code>6.9999999999759</code>, which would round to the wrong number when converted to <code>int</code>. The <code>(int)</code> cast suppresses a compiler warning about conversion from <code>double</code> to <code>int</code>.</p>
    </div>