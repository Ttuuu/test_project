<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>First Class Collection</h1>

<p>The First Class Collection is an idea of the <a href="https://www.cs.helsinki.fi/u/luontola/tdd-2009/ext/ObjectCalisthenics.pdf" rel="nofollow noreferrer">Object Calisthenics</a>.</p>

<blockquote>
  <p>Any class that contains a collection should contain no other member variables. Each collection gets wrapped in its own class, so now behaviors related to the collection have a home. </p>
</blockquote>

<p>We can wrap <code>dataList</code> into its own class</p>

<pre class="lang-cs prettyprint-override"><code>class DataList 
{

    private List&lt;int&gt; list;

    // ...
}
</code></pre>

<h1><a href="https://refactoring.guru/smells/feature-envy" rel="nofollow noreferrer">Feature Envy</a></h1>

<blockquote>
  <p>A method accesses the data of another object more than its own data.</p>
</blockquote>

<p>Since the collection <code>dataList</code> could be wrapped into its own class and gets modified by <code>PreProcess</code> and <code>Process</code> you have an Feature Envy.</p>

<p>We could put the methods <code>PreProcess</code> and <code>Process</code> into the class <code>DataList</code></p>

<pre class="lang-cs prettyprint-override"><code>class DataList 
{

    private List&lt;Data&gt; list;

    public void PreProcess() 
    {
         /* ... */     
    } 

    public void Process() 
    {
         /* ... */ 
    } 
}
</code></pre>

<p>Now when you call it from the outside you simple call the methods</p>

<pre class="lang-cs prettyprint-override"><code>dataList.PreProcess();
dataList.Process();
</code></pre>
    </div>