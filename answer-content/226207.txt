<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Ohhh. Don't do this:</p>

<pre><code>using EdgeNodes = vector&lt;EdgeNode *&gt;;
unordered_map&lt;char, EdgeNodes *&gt; adj;
</code></pre>

<p>Now you need to manage the memory of the <code>EdgeNodes</code>. Simply declare it as a value type:</p>

<pre><code>using EdgeNodes = vector&lt;EdgeNode&gt;;      // Remove the star
unordered_map&lt;char, EdgeNodes&gt;      adj; // Remove the star.
</code></pre>

<p>To make the rest of your code simpler I would define a way to compare the EdgeNodes.</p>

<pre><code>class EdgeNode
{
  public:
  char label;
  int weight;
  EdgeNode(char l = 0, int w = 0) : label(l), weight(w) {}

  // Compare a Node against a label
  bool operator==(char l) {return label == l;}
};
</code></pre>

<p>This makes your add functions simpler:</p>

<pre><code>  void addNode(char node)
  {
      adj.insert({node, EdgeNodes{}});
  }
  void addEdge(char start, char end, int weight)
  {
      auto&amp; dest = adj[node].second;

      // See if there is already a link to the destination.
      // This uses the `operator==` we defined above to compare
      // each node against `end`.
      auto  find = std::find(std::begin(dest), std::end(dest), end);

      if (find != std::end(dest)) {
          // If we already have it update the weight.  
          find-&gt;weight = weight;
      }
      else {
          // otherwise add it to the end.
          dest.emplace_back(end, weight);
      }
  }
</code></pre>

<p>Don't be lazy:</p>

<pre><code>  Pair front = pq.top(); pq.pop();
</code></pre>

<p>Split it over two lines. Its easy to write new code. Its hard to read other people's code. Don't make it difficult for them.</p>

<pre><code>  Pair front = pq.top();   // Get the top item
  pq.pop();                // Pop it from the queue.
</code></pre>

<p>The dijkstras algorithm looks ok.</p>

<p>Things to look at:</p>

<ul>
<li>I find it a bit dense to read and it took me a while to understand it but nothing technically wrong with it.</li>
<li>I might have used a single map for <code>parent/distance</code> calculations rather than two distinct structures.</li>
<li>Checking inclusion in the visited list is usually done on the node as it is popped of the <code>dq</code> not when pushing it onto the list. This may be a bug.</li>
<li>Normall you pass <code>start</code> and <code>end</code> as parameters to <code>djikstras</code></li>
</ul>

<p>Let me re-try a refactor:</p>

<pre><code>void djikstras(char snode, char end)
{
    using ParentEdge = std::pair&lt;char, EdgeNode&gt;;
    auto  comp = [](ParentEdge const&amp; l, ParentEdge const&amp; r){return l.second.weight &lt; r.second.weight;};

    unordered_map&lt;char, EdgeNode&gt;                        retrace;    
    priority_queue&lt;ParentEdge, vector&lt;ParentEdge&gt;, comp&gt; pq; 

    // special case the snode is its own parent.
    retrace[snode]   = EdgeNode(snode, 0);
    pq.push(ParentEdge(snode, EdgeNode(snode, 0)));

    while(!pq.empty()) {
        // Get details of next node.
        ParentEdge front   = pq.top();
        char&amp;      parent  = front.first;
        char&amp;      current = front.second.label;
        int&amp;       weight  = front.second.weight;
        pq.pop();

        if (current === end) {
            // Did we find the destination.
            printRoute(retrace, end);
            return;
        }

        if (retrace.find(current) != retrace.end()) {
            // Already found cheapest route to here.
            continue;
        }

        // Found cheapest route to this point. Add info to the structures.
        retrace[current]  = EdgeNode(parent, retrace[parent].weight + weight);

        // Add children to the frontier list
        for(EdgeNode edge : adj[current]) {
            pq.push(ParentEdge(current, edge));
        }
    }  
    std::cout &lt;&lt; "Failed to find route from start to finish\n"; 
}
</code></pre>
    </div>