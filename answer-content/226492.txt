<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Prefer to declare <code>main()</code> as a prototype:</p>

<pre><code>int main(void)
</code></pre>

<hr>

<p>Always, always check the return value of <code>scanf()</code> and family:</p>

<pre><code>if (scanf("%d", &amp;number) != 1) {
    fprintf(stderr, "Failed to parse a number\n");
    return EXIT_FAILURE;
}
</code></pre>

<p>Without such a test, the program will blindly proceed with whatever uninitialised value <code>number</code> has.</p>

<p>We should also ensure that a positive number was entered - if <code>number</code> is less than <code>0</code>, then bad things are going to happen.  Consider using an unsigned type for <code>number</code>, so that we're not converting between signed and unsigned (in <code>calloc()</code> calls).</p>

<hr>

<p>Don't cast the result of <code>malloc()</code> family of functions.  They return <code>void*</code>, which is assignable to a variable of any pointer type.  I recommend using the variable itself as the argument to <code>sizeof</code> rather than repeating the type name - in many cases, it makes it easier for readers to see the correspondence.</p>

<p>And always, always check allocations don't return a null pointer.</p>

<pre><code>int *array = calloc(number, sizeof *array);
if (!array) {
    fprintf(stderr, "Memory allocation failure\n");
    return EXIT_FAILURE;
}
</code></pre>

<hr>

<p><code>*(array + i)</code> is more conveniently and conventionally written as <code>array[i]</code> (or, perversely, as <code>i[array]</code> - but don't do that!).</p>

<hr>

<p>I don't have time right now to follow the algorithm, but I'm sure it could be simpler.  Fixing the issues above will certainly improve your C programs, anyway.</p>
    </div>