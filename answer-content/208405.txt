<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There's no major issue. Beautiful code.
- That's a matter of taste, but you could define <code>TRUE</code> and <code>FALSE</code> in their logical terms:</p>

<pre><code>#define TRUE  (1==1)
#define FALSE (!TRUE)
</code></pre>

<ul>
<li><code>moves</code> could be an <code>unsigned</code></li>
</ul>

<hr>

<h3><code>dealCards</code></h3>

<pre><code>int turn = 0;
</code></pre>

<ul>
<li><code>turn</code> should be simply renamed <code>computerTurn</code> (see below why)</li>
<li><p>and since you defined <code>TRUE</code>/<code>FALSE</code>, use it here : <code>int computerTurn = FALSE;</code>.</p></li>
<li><p>also, <code>if (turn == 0)</code> can be explicitly changed to <code>if (!computerTurn)</code></p></li>
<li>and <code>else if (turn == 1)</code> to <code>else if (computerTurn)</code> or even just <code>else</code>.</li>
<li><code>turn = (turn == 0) ? 1 : 0;</code> can be rewritten with the logical unary not: <code>computerTurn = !computerTurn;</code>.</li>
<li>Instead of writing two times almost the same code...</li>
</ul>

<p></p>

<pre><code>playerHand[cardsCreated/2] = ( Card *) malloc ( sizeof(Card)); // Malloc the card a...
playerHand[cardsCreated/2]-&gt;suit = card.suit;
playerHand[cardsCreated/2]-&gt;rank = card.rank;
</code></pre>

<p></p>

<p>       ...make cards allocation and creation outside of the condition (see my example below). </p>

<ul>
<li>Also, <a href="https://stackoverflow.com/questions/605845/do-i-cast-the-result-of-malloc">you could omit to cast the result of malloc</a> and <a href="https://softwareengineering.stackexchange.com/questions/201104/sizeof-style-sizeoftype-or-sizeof-variable">use the variable name into <code>sizeof</code></a> instead of using the type.</li>
</ul>

<hr>

<p>Instead of your logic, you can try this:</p>

<ul>
<li>Make an array of 52 <code>int</code> :</li>
</ul>



<pre><code>int cards[52];
for (unsigned int i = 0; i &lt; 52; i++) {
    cards[i] = i;
}
</code></pre>

<ul>
<li>Then, <a href="https://stackoverflow.com/questions/6127503/shuffle-array-in-c">shuffle it</a> (maybe with the <a href="https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle" rel="nofollow noreferrer">Fisher–Yates shuffle</a>).</li>
<li>Now you just have to alternatively deal card from this array to player and computer (and after, as you do, set non-existent cards from both hands, to null).</li>
</ul>



<pre><code>for (unsigned int i = 0; i &lt; 52; i++) {
    Card *current = malloc(sizeof(card));
    current-&gt;suit = cards[i] % sizeof(SuitNames)/sizeof(*SuitNames);
    current-&gt;rank = cards[i] % sizeof(RankNames)/sizeof(*RankNames);

    if (!computerTurn) playerHand[i/2] = current;
    else computerHand[i/2] = current;

    computerTurn = !computerTurn;
}
</code></pre>

<p>I see some advantages of this method:</p>

<ul>
<li>You can get rid of the variable <code>deck</code></li>
<li>The generation and dealing in constant in time, where with your method, if you are out of luck, filling both hands can take long time.</li>
</ul>

<hr>

<h2><code>playMove</code></h2>

<p>I didn't understand advantage of <code>pSuit</code>, <code>pRank</code>, <code>cSuit</code> and <code>cRank</code> against their arrowed counter-part.</p>

<p><code>result</code> should be renamed <code>computerWin</code> it's more explicit.</p>

<p>A lot of duplicated code can be moved out of the <code>if...else</code> (before or after), but above all, a major optimization could be to keep a track of how many cards each hand have (<code>playerCount</code> and <code>compCount</code>).</p>

<ul>
<li>You don't have anymore to shift left every card in both deck</li>
<li>You don't have to compute how many card each hand have</li>
<li>You also have easily access to the current card (<code>playerHand[playerCount-1]</code>)</li>
</ul>

<p>In fact, maybe you can wrap the "hand" and the "count" into a struct:</p>

<pre><code>typedef struct HandStructure
{
    Card *cards[52];
    size_t count;
} Hand;
</code></pre>

<hr>

<h2><code>compareCards</code></h2>

<p>You can simplify branching a lot:</p>

<pre><code>int compareCards(Card * playerCard, Card * compCard)
{
    if (playerCard-&gt;rank &lt;= compCard-&gt;rank)      
        return (playerCard-&gt;rank &lt; compCard-&gt;rank) || (playerCard-&gt;suit &lt; compCard-&gt;suit)
    else return 0;
}
</code></pre>

<hr>

<h2><code>checkWin</code></h2>

<p>You should return <code>0</code> instead of <code>-1</code> if no one won, it allow <code>if(checkWin(...))</code> in the <code>main</code>.</p>

<p>Dealing with the <code>Hand</code> structure which I talked about, this function became also shorter and simple:</p>

<pre><code>int checkWin(Hand * player, Hand * computer)
{
    assert(player-&gt;count + computer-&gt;count == 52);

    if (!computer-&gt;count)    // Player has entire deck, player wins
        return 1;
    if (!player-&gt;count)      // Computer has entire deck, computer wins
        return 2;
    return 0;                // No one has entire deck, continue play
}
</code></pre>

<hr>

<p><strong>edit</strong>: Also, you should define both <code>char*</code> at the top as <code>const</code>.</p>

<h1>End words</h1>

<p>Also, as you can see, I introduced <a href="https://ptolemy.berkeley.edu/~johnr/tutorials/assertions.html" rel="nofollow noreferrer">assertion</a> in the last code, paradoxically to the length of this post, i found code pretty well writes. It's time, I think, to adopt stronger concepts and methods. Assertions are one of those things.</p>

<p>I hope not being too straight or rude, English isn't my primary language, so I miss some nuancies.</p>

<hr>

<h1>10 days later...</h1>

<p><em>I wrote this few days ago, but didn't take time to add it before. Hope it will help.</em></p>

<h2>Cards</h2>

<p>Actually in your code, you compare cards with ranks, and then if equals, with suits.</p>

<p>So the lowest card is the <em>Ace of Spikes</em> and the greatest the <em>King of Hearts</em>. Also, the <em>Ace of Spikes</em> is lower than the <em>Ace of Clubs</em> which is lower than all others.</p>

<p>So, what's cards values?</p>

<ul>
<li><p>1: Ace of Spikes</p></li>
<li><p>2: Ace of Clubs</p></li>
<li><p>3: Ace of Diamonds</p>

<p>...</p></li>
<li><p>51: King of Diamonds</p></li>
<li><p>52: King of Hearts</p></li>
</ul>

<p>So, instead of dealing with suits and ranks, you can try to deal with values directly. The question is now: "How retrieve suits and ranks from a card's value?"</p>

<p>Pretty simple!</p>

<p>(with card values going from 0 to 51)</p>

<pre><code>//ensure card value &lt; (number of suits * number of ranks), then:
Suit = card value % number of suits
Rank = card value / number of ranks
</code></pre>

<h3>Working example</h3>

<p>Let's test it (pseudo-code):</p>

<pre><code>array suits[4] = {"Spike", "Club", "Diamond", "Heart"}
array ranks[13] = {"Ace", "Two", ..., "Queen", "King"}

let ace_of_spikes = 0
let ace_of_diamonds = 2
let king_of_diamonds = 50
let king_of_hearts = 51

print suit[ace_of_spikes  % sizeof suits] -&gt; "Spike"
print suit[ace_of_diamonds  % sizeof suits] -&gt; "Diamond"
</code></pre>

<p>We simply divided memory usage by two, using only one integer instead of two per card.</p>

<p>In this same way, you also make a lot of things in your code easier (build of deck(s), comparison of card to get winner, ...).</p>

<p><em>About the modulus operator, even if it <a href="https://embeddedgurus.com/stack-overflow/2011/02/efficient-c-tip-13-use-the-modulus-operator-with-caution/" rel="nofollow noreferrer">can be slow</a> before trying to optimize it, you should ensure it's needed with benchmarks. (other related links: <a href="https://stackoverflow.com/questions/27977834/why-is-modulus-operator-slow">[1]</a>, <a href="https://stackoverflow.com/questions/15596318/is-it-better-to-avoid-using-the-mod-operator-when-possible">[2]</a>, <a href="https://stackoverflow.com/questions/11040646/faster-modulus-in-c-c">[3]</a>).</em></p>

<h2>Deck(s)</h2>

<p>Just think two second about this game (in your program and in real life).</p>

<p>Each player have card from the same deck, right? The deck is just split into halves to players.</p>

<p>I got the intuition that we can work with this unique deck, and using two virtually splitted up views of it as players' sub-deck. After all, in real life, if you join the cards from both players, it's always the same deck.</p>

<p>Let's try to set that idea into practice!</p>

<ul>
<li>Virtually splits our deck at the middle. Let's call this position "separator"</li>
<li>Each player take cards from this separator until their sides.</li>
<li>When a player won a card, it come in his side of the separator and so became a part of his sub-deck.</li>
<li>When a player reach the last card of his part of the deck, he continues taking the card right before the separator, i.e. his new top sub-deck. In real life, before picking this card, his part of the deck is shuffled. Let's assume that we can do the same, that will add a bit randomization.</li>
<li>Finally, when he don't have card from his side of separator, he have lost.</li>
</ul>

<h3>Visual example</h3>

<p><strong>Legend</strong>:</p>

<p><code>▲ : The current card of each player</code></p>

<p><code>⋆ : The card that was just won</code> </p>

<p><strong>Turn 1</strong>:</p>

<pre><code>#1 : 1 7 2 3 8|4 5 9 6 0 : #2
             ▲ ▲  
</code></pre>

<p><em>#1</em> got a <kbd>8</kbd>, <em>#2</em> got a <kbd>4</kbd> ➔ <em>#1</em> won the <kbd>4</kbd></p>

<p>We move pointers to the next cards, and the separator to the right to give one card from <em>#2</em> to <em>#1</em> and.</p>

<p><em>Note: In fact, we swap the right-most card (the nearest of the separator) of his sub-deck with the card he have just won. Since here it's the same card, it's a no-op.</em></p>

<pre><code>#1 : 1 7 2 3 8 4|5 9 6 0 : #2
           ▲   ⋆ ▲
</code></pre>

<p>Since <kbd>4</kbd> is already in the deck <em>#1</em>, we have noting to do.</p>

<hr>

<p><strong>Turn 2</strong>:</p>

<pre><code>#1 : 1 7 2 3 8 4|5 9 6 0 : #2
           ▲     ▲
</code></pre>

<p><em>#1</em> got a <kbd>3</kbd>, <em>#2</em> got a <kbd>5</kbd> ➔ <em>#2</em> won the <kbd>3</kbd></p>

<p>Let's move pointers to the next cards, and the separator to the left to give one card from #1 to #2 and.</p>

<pre><code>#1 : 1 7 2 3 8|4 5 9 6 0 : #2
         ▲ ⋆       ▲
</code></pre>

<p>Here, <kbd>3</kbd> isn't is already in the deck <em>#2</em>, we have to swap it with the card nearest of the separator, on his side.</p>

<p><em>Note: We could, instead, have operate a circular left shift of card <code>3 8 4</code> to get <code>8 4 3</code> and so, keep a consistent order, but since we'll shuffling cards of a player when he have no more not already played card (i.e when we'll have to move the pointer to the card before the separator), it's not necessary.</em></p>

<pre><code>#1 : 1 7 2 4 8|3 5 9 6 0 : #2
         ▲     ⋆   ▲
</code></pre>

<hr>

<p><strong>Turn 3</strong>:</p>

<pre><code>#1 : 1 7 2 4 8|3 5 9 6 0 : #2
         ▲         ▲
</code></pre>

<p><em>#1</em> got a <kbd>2</kbd>, <em>#2</em> got a <kbd>9</kbd> ➔ <em>#2</em> won the <kbd>2</kbd></p>

<p>We move pointers to the next cards, and the separator to the left to give one card from <em>#1</em> to <em>#2</em> and.</p>

<pre><code>#1 : 1 7 2 4|8 3 5 9 6 0 : #2
       ▲ ⋆           ▲
</code></pre>

<p>Since, <kbd>2</kbd> isn't is in the deck <em>#2</em>, we swap it with the card at the right of the separator.</p>

<pre><code>#1 : 1 7 8 4|2 3 5 9 6 0 : #2
       ▲     ⋆       ▲
</code></pre>

<hr>

<p>Let's go faster with this logic, showing just results</p>

<p><strong>Turn 4</strong> :</p>

<pre><code>#1 : 1 7 8 4 2|3 5 9 6 0 : #2
       ▲             ▲
</code></pre>

<p></p>

<pre><code>#1 : 1 7 8 4 2 3|5 9 6 0 : #2
     ▲               ⋆ ▲
</code></pre>

<p></p>

<pre><code>#1 : 1 7 8 4 2 6|5 9 3 0 : #2
     ▲         ⋆       ▲
</code></pre>

<hr>

<p><strong>Turn 5</strong>:</p>

<pre><code>#1 : 1 7 8 4 2 6|5 9 3 0 : #2
     ▲                 ▲
</code></pre>

<p>Let's start with same as usual</p>

<pre><code>#1 : 1 7 8 4 2 6 5|9 3 0 : #2
   ▲                   ⋆ ▲
   ?                     ?
</code></pre>

<p></p>

<pre><code>#1 : 1 7 8 4 2 6 0|9 3 5 : #2
   ▲             ⋆       ▲
   ⤷                     ⤶
</code></pre>

<p>But here, both players have no more card to draw, let's shuffle their part of the deck, and move pointers before the separator.</p>

<pre><code>#1 : 4 2 0 6 1 7 8|3 5 9 : #2
                 ▲ ▲      
</code></pre>

<p>And this, until a player doesn't have card anymore.</p>

<hr>

<h1>Final End words</h1>

<p>As stated in comments, the player who have to top deck card is his sub-deck automatically win. So here, you also have two options:
- Provide option to just print the winner, without computation of turns
- Rethink some functions (<code>playMove</code> and <code>checkWin</code> in your case) to handle "draws" (same ranks).</p>

<p>If you want, I can try to come back in few days with a example of implementation.</p>
    </div>