<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I start from mathematical consideration using one of the examples you provided:</p>

<pre><code>Input: 10 output: 3

2,3,4,5,6,8,9,10
7
11
</code></pre>

<p>All the elements multiple of 2 are in the set containing 2, the other sets will always contain just one prime number like {7} and {11} : if it were not so the number would be not prime and would be contained in another previous set.</p>

<p>So instead of using the structure :</p>

<blockquote>
<pre><code>HashMap&lt;Integer, List&lt;Integer&gt;&gt; map = new HashMap&lt;&gt;();
</code></pre>
</blockquote>

<p>It is better to use a <code>List</code> of <code>Set</code> considering that the set containing number 2 will be always present:</p>

<pre><code>List&lt;Set&lt;Integer&gt;&gt; list = new ArrayList&lt;&gt;();
Set&lt;Integer&gt; set = new HashSet&lt;&gt;();
set.add(2);
list.add(set);
</code></pre>

<p>You can dismiss numbers multiple of 2 so you can use a loop starting from number 3 and with an increment of 2, so if you examining numbers from 3 to n included you can write:</p>

<pre><code>public static List&lt;Set&lt;Integer&gt;&gt; createGroups(int n) {
    List&lt;Set&lt;Integer&gt;&gt; list = new ArrayList&lt;&gt;();
    Set&lt;Integer&gt; set = new HashSet&lt;&gt;();
    set.add(2);
    list.add(set);
    for (int i = 3; i &lt;= n; i += 2) {
            //here your logic
    }
    return list;
}
</code></pre>

<p>About the core of the loop if you have an odd number i so that i * 2 &lt;= n , you are sure it will be contained in the set including number 2, like below:</p>

<pre><code>if (i * 2 &lt;= n) {
    list.get(0).add(i); &lt;-- it is the set containing 2
}
</code></pre>

<p>Otherwise you will check if one of the previously created sets contain a value dividing your number and add the number to this set if existing, for these you can use helper methods:</p>

<pre><code>private static boolean isDivisor(int n, Set&lt;Integer&gt; set) {
    for (int elem : set) {
        if (n % elem == 0) {
            return true;
        }
    }
    return false;
}

private static boolean addedToOneSet(int n, List&lt;Set&lt;Integer&gt;&gt; list) {
    for (Set&lt;Integer&gt; set : list) {
        if (isDivisor(n, set)) { 
            set.add(n);
            return true;
        }
    }
    return false;
}
</code></pre>

<p>The code of the method will include these helper functions:</p>

<pre><code>public static List&lt;Set&lt;Integer&gt;&gt; createGroups(int n) {
    List&lt;Set&lt;Integer&gt;&gt; list = new ArrayList&lt;&gt;();
    Set&lt;Integer&gt; set = new HashSet&lt;&gt;();
    set.add(2);
    list.add(set);
    for (int i =  3; i &lt;= n; i += 2) {
        if (i * 2 &lt;= n) {
            list.get(0).add(i);
        } else {
            if (!addedToOneSet(i, list)) {
                Set&lt;Integer&gt; newset = new HashSet&lt;&gt;();
                newset.add(i);
                list.add(newset);
            }
        }
    }
    return list;
}
</code></pre>

<p>Now the code of the class with some tests:</p>

<pre><code>public class SocialNetwork {

    private static boolean isDivisor(int n, Set&lt;Integer&gt; set) {
        for (int elem : set) {
            if (n % elem == 0) {
                return true;
            }
        }
        return false;
    }

    private static boolean addedToOneSet(int n, List&lt;Set&lt;Integer&gt;&gt; list) {
        for (Set&lt;Integer&gt; set : list) {
            if (isDivisor(n, set)) { 
                set.add(n);
                return true;
            }
        }
        return false;
    }

    public static List&lt;Set&lt;Integer&gt;&gt; createGroups(int n) {
        List&lt;Set&lt;Integer&gt;&gt; list = new ArrayList&lt;&gt;();
        Set&lt;Integer&gt; set = new HashSet&lt;&gt;();
        set.add(2);
        list.add(set);
        for (int i =  3; i &lt;= n; i += 2) {
            if (i * 2 &lt;= n) {
                list.get(0).add(i);
            } else {
                if (!addedToOneSet(i, list)) {
                    Set&lt;Integer&gt; newset = new HashSet&lt;&gt;();
                    newset.add(i);
                    list.add(newset);
                }
            }
        }
        return list;
    }

    public static void main(String[] args) {
        System.out.println(createGroups(6)); //&lt;-- [[2, 3], [5]]
        System.out.println(createGroups(11)); //&lt;-- [[2, 3, 5, 9], [7], [11]]
        System.out.println(createGroups(20)); //&lt;-- [[2, 3, 5, 7, 9, 15], [11], [13], [17], [19]]

    }

}


</code></pre>

<p>The sizes of the lists (the groups) are the solution to the problem.</p>
    </div>