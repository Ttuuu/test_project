<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As noted by @Jamal in the comments.<br>
You should probably move to a more standard indentation scheme.</p>
<h3>Looking at <code>node</code></h3>
<p>It is common to name types with a leading capitol letter (to distinguish them from objects).</p>
<pre><code>struct node {
</code></pre>
<p>Also the <code>*</code> is part of the type and thus placed next to the type info.</p>
<pre><code>node *next;
</code></pre>
<p>Note: Your usage is very "C" like. But "C++" is a different language.</p>
<p>I hate these comments.</p>
<pre><code>    //default ctor
    //default dtor
</code></pre>
<p>They provide no extra information. Comments that do not help can become out of date and this makes it hard to justify. Comments are better used to explain why (or intricate details). The how is well documented by the code itself (making comments repeat the code is usless). So unless your comments can be best described as "Why" comments don't use them.</p>
<p>This looks wrong.</p>
<pre><code>    ~node() { delete root_node; }
</code></pre>
<p>You are deleting the root_node of the parent. That seems to be an inversion of the ownership principle. I would say the parent owns the root_node. And each node owns the node linked by next. Thus you should not be deleting the other way up the chain.</p>
<h2>looking at stack</h2>
<p>Prefer to include things from most specific to most general. This will stop you polluting the name space of header files that don't need them.</p>
<pre><code>#include &lt;iostream&gt;
#include "stack.h"
</code></pre>
<p>Here I would reverse the order.<br>
Put "stack.h" first it is the most specific. Then you can include things needed in the header file and they become available here.</p>
<p>I prefer not to do this.</p>
<pre><code>using std::cout;
using std::endl;
</code></pre>
<p>If you are passing big items as data.</p>
<pre><code>void stack&lt;T&gt;::push(T data) {
</code></pre>
<p>Then passing by value will cause it to be copied. You should pass it by const reference.</p>
<p>The following forces contruction by default constructor. Folloed by a copy.</p>
<pre><code>root_node = new node;         // `node` contains a T and it must be 
                              // be created by default construction.

root_node-&gt;node_data = data;  // Force a copy of the object into node.
</code></pre>
<p>The other side of the else is even worse with even more copies of the data being done.</p>
<p>The actual body of push can be made much simpler.</p>
<pre><code>void stack&lt;T&gt;::push(T data) {
    root_node = new node(data, root_node);
    elements++;
}
</code></pre>
<p>That should be all you need (just make a better constructor to node).</p>
<p>Here we are leaking memory:</p>
<pre><code>node *temp_node = new node;    // Create a node we don't need.
temp_node = root_node-&gt;next;   // Then we leak it the net line.
</code></pre>
<p>Then we leak the root node.</p>
<pre><code>root_node = temp_node;         // The old value of root node was just
                               // lost and no way to delete it.
</code></pre>
<p>A better pop is like this:</p>
<pre><code>void stack&lt;T&gt;::pop() {
    node* tmp = root_node;       // Keep track of the old root.
    root_node = root_node-&gt;next; // Remove the root node from the list.
    elements--;
    delete tmp;                  // delete the old root.
}
</code></pre>
<p>Your <code>print()</code> only prints to <code>std::cout</code>. That might not be flexible enough. So I would pass the stream you want to print on as a parameter. You can default to <code>std::cout</code>.</p>
<pre><code>void print(std::ostream&amp; stream = std::cout);
</code></pre>
<p>Also your print seems to destroy the stack (by calling <code>pop()</code>). Since the print has access to the internal members of the stack I don't really see the need for this.</p>
<h3>General Comments</h3>
<p>If there is an error don't print the error as part of the stack. The user of your stack may not want to output an error message here.</p>
<pre><code>else {cout &lt;&lt; "\nOperation top() failed: Stack is empty!" &lt;&lt; endl; return -1;}
</code></pre>
<p>I would just throw an exception.</p>
<pre><code>else { throw std::runtime_error("XXXX");}
</code></pre>
<p>Prefer pre-increment to post increment.<br>
Technically for integers/pointers there is no difference. But sometimes code changes and the underlying types becomes something else (like an iterator). In this situation it is more effecient to use pre-increment. So just get into the habbit of using pre-increment.</p>
<p>When a method does not modify the state of an object then it should be marked const. This allows you to use the object in a const context. This is referred to as <code>const correctness</code>.</p>
<pre><code>class Stack
{
   public:
      bool empty() const;
      int  size()  const;
</code></pre>
<p>It is normal to put template code in a header file. This is because the definition of the code is required at the point of use. Personally I still don't put the code into the class (unless it is very small) because it clutters the interface declaration.</p>
<h2>This is what I would do:</h2>
<pre><code>#ifndef STACK_H
#define STACK_H

#include &lt;iostream&gt;
#include &lt;stdexcept&gt;

template &lt;typename T&gt;
class Stack {

        struct Node {    
            T       data;
            Node*   next;

            Node(T const&amp; data, Node* next)
                : data(data)
                , next(next)
            {}
            Node(T&amp;&amp; data, Node* next)   // With C++11 allow move construction
                : data(std::move(data))
                , next(next)
            {}
        };

    public:
        ~Stack();
        void push(T const&amp; data);
        void push(T&amp;&amp; data);     // WIth C++ 11 allow move construction
        bool empty() const;
        int  size()  const;
        T    top()   const;
        void pop();
        void print(std::ostream&amp; str = std::cout) const;


    private:
        Node*   root     = nullptr;
        int     elements = 0;
};

template&lt;typename T&gt;
Stack&lt;T&gt;::~Stack()
{
    Node* next;
    for(Node* loop = root; loop != nullptr; loop = next)
    {
        next = loop-&gt;next;
        delete loop;
    }
}
template&lt;typename T&gt;
void Stack&lt;T&gt;::push(T const&amp; data)
{
    root = new Node(data, root);
    ++elements;
}
template&lt;typename T&gt;
void Stack&lt;T&gt;::push(T&amp;&amp; data)
{
    root = new Node(std::forward(data), root);
    ++elements;
}
template&lt;typename T&gt;
bool Stack&lt;T&gt;::empty() const
{
    return root == nullptr;
}
template&lt;typename T&gt;
int Stack&lt;T&gt;::size() const
{
    return elements;
}
template&lt;typename T&gt;
T Stack&lt;T&gt;::top() const
{
    if (root == nullptr)
    {   throw std::runtime_error("Invalid Action");
    }
    return root-&gt;data;
}
template&lt;typename T&gt;
void Stack&lt;T&gt;::pop()
{
    if (root == nullptr)
    {   throw std::runtime_error("Invalid Action");
    }
    Node*   tmp = root;
    root    = root-&gt;next;
    --elements;
    delete tmp;
}
template&lt;typename T&gt;
void Stack&lt;T&gt;::print(std::ostream&amp; str) const
{
    int id = 0;
    for(Node* loop=root; loop != nullptr; loop=loop-&gt;next, ++id)
    {
        str &lt;&lt; "Element: " &lt;&lt; id &lt;&lt; "  = " &lt;&lt; loop-&gt;data &lt;&lt; "\n";
    }
}

#endif
</code></pre>
    </div>