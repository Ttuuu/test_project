<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Finite State Machine (FSM):</strong></p>

<p>As I told you, this game can be implemented like a <a href="https://en.wikipedia.org/wiki/Finite-state_machine" rel="nofollow noreferrer">Finite-state machine</a> (FSM).</p>

<p>Where:</p>

<ul>
<li>Each state is a location (cottage, hometown...) or a situation (pick up stones in the forest, in the coast, talking to the fisherman...)</li>
<li>Each transition has a condition (the user commands "1", "2", "3", etc.) and an action (a function which display the situation).</li>
</ul>

<p>A transition can be implemented by a <a href="https://docs.python.org/3.6/library/collections.html#collections.namedtuple" rel="nofollow noreferrer"><code>namedtuple</code></a>, as bellow:</p>

<pre><code>import collections

Transition = collections.namedtuple("Transition",
                                    ["start_state", "end_state", "condition", "action"])
</code></pre>

<p>The following transition:</p>

<pre><code>Transition("cottage", "hometown", "1", adventure.hometown)
</code></pre>

<p>Can be interpreted like this: “when the user enter the command "1" and the current state is "cottage" then we can trigger the transition to reach the state "hometown" by calling the function <code>adventure.hometown</code> (here, it's a method, see further).</p>

<p>If I want to trigger a transition without user input, the only have to consider that the condition is <code>None</code>, for instance:</p>

<pre><code>    Transition("forest", "forest_stones", "2", adventure.find_stones),
    Transition("forest_stones", "forest", None, adventure.forest),
</code></pre>

<p>If the user is in the forest and choose the command "2", he can pick up stones and stay in the forest.</p>

<p>The following class store the game parameters (gold, health, energy...), the current state and the dictionary of transitions.</p>

<pre><code>class Adventure(object):
    def __init__(self):
        self._curr_state = None
        self._transitions = {}
        self.gold = 2
        self.health = 10
        self.energy = 10
        self.melee = 1
        self.ranged = 0
        self.ammo = 0
        self.full_health = 10
        self.attack_num = 0

    def setup(self, transitions):
        for transition in transitions:
            self._transitions[(transition.start_state, transition.condition)] = transition
        self._curr_state = transitions[0].start_state

    def trigger(self, command):
        can_continue = True
        key = self._curr_state, command
        if key not in self._transitions:
            print("Unknown command '{0}'".format(command))
            return can_continue
        while key in self._transitions:
            transition = self._transitions[key]
            can_continue = transition.action()
            self._curr_state = transition.end_state
            key = self._curr_state, None
        return can_continue

    def run(self):
        can_continue = self.trigger(None)
        while can_continue:
            command = prompt("Type a command ('q' to quit): ")
            if command.lower() == 'q':
                print("Good bye!")
                return
            can_continue = self.trigger(command)

    def start(self):
        msg = """\
        ****************************************
        *                                      *
        *  Welcome to Aaron's Text Adventure!  *
        *                                      *
        ****************************************
        """
        print(textwrap.dedent(msg))
        return True

    def check_stats(self):
        msg = textwrap.dedent("""\
        ********

        Gold:   {gold}
        Health: {health}/{full_health}
        Melee:  {melee}
        Energy: {energy}
        """)
        if self.ranged:
            msg += textwrap.dedent("""\
            Ranged: {ranged}
            Ammo:   {ammo}
            """)
        msg = msg.format(gold=self.gold,
                         health=self.health,
                         full_health=self.full_health,
                         melee=self.melee,
                         energy=self.energy,
                         ranged=self.ranged,
                         ammo=self.ammo)
        print(msg)
        return True

    def cottage(self):
        msg = """\
        ****************************************

        You are in your cottage in a small village.

        Options:
        1. Go Outside
        2. Rest
        9. Stats
        """
        print(textwrap.dedent(msg))
        return True

    def back_to_full_health(self):
        self.health = self.full_health
        msg = """\
        You are back to full health. ({health}/{full_health})
        """.format(health=self.health, full_health=self.full_health)
        print(textwrap.dedent(msg))
        return True

    def hometown(self):
        msg = """\
        ****************************************

        You are in your hometown. A few villager are walking the streets, going about their business as usual.

        Options:
        1. Enter your cottage
        2. Enter the forest
        3. Walk to the coast
        9. Stats
        """
        print(textwrap.dedent(msg))
        return True

    def forest(self):
        msg = """\
        ****************************************

        You are in the forest. It's dark and eerie.

        """
        print(textwrap.dedent(msg))
        if self.attack_num == 0:
            msg = """\
            ********

            You are attacked by a wild beast! OH NO!!
            (-1 health)
            """
            print(textwrap.dedent(msg))
            self.attack_num += 1
            self.health -= 1
            if self.health &lt; 0:
                print("Your are dead!")
                return False

        msg = """\
        Options:
        1. Go to your hometown
        2. Pick up stones
        3. Explore deeper into the forest
        9. Stats
        """
        print(textwrap.dedent(msg))
        return True

    def coast(self):
        msg = '''\
        ****************************************

        You at the coast. The wind blows your hair and the smell of salt fills your nostrils.

        Options:
        1. Go to hometown
        2. Talk to fisherman
        3. Pick up stones
        9. Stats
        '''
        print(textwrap.dedent(msg))
        return True

    def find_stones(self):
        if self.ranged == 0:
            msg = """\
            ********

            You found 5 stones you can throw at an enemy.
            (+1 ranged) (+5 ammo)
            """
            print(textwrap.dedent(msg))
            self.ranged = 1
            self.ammo = 5
            return True

        elif self.ranged &gt;= 1 and self.ammo &lt; 5:
            msg = """\
            ********

            You stuff a few stones in your bag for later.
            """
            print(textwrap.dedent(msg))
            self.ammo = 5
            return True

        elif self.ranged &gt;= 1 and self.ammo &gt; 4:
            msg = """\
            ********

            You don't find any suitable stones.
            """
            print(textwrap.dedent(msg))
            return True

    def battle(self):
        msg = """\
        ****************

        You have been attacked by a wild pig chicken. What do you do?

        1. Run
        2. Fight
        3. Make friends with the pig chicken
        """
        print(textwrap.dedent(msg))
        return True

    def battle_raped(self):
        msg = """\
        ****************

        You have just been brutally raped by a horny pig chicken!! You suck!!

        GAME OVER!!!!!
        """
        print(textwrap.dedent(msg))
        return False

    def fishconvo(self):
        msg = """\
        ********

        Fisherman: "The fish aren't biting today. Want me to teach you a few boxing moves?

        1. Yes
        2. No
        """
        print(textwrap.dedent(msg))
        return True

    def fishconvo_yes(self):
        if self.melee == 1:
            msg = """\
            ********

            Fisherman: "Now don't go beating up that nerdy crippled kid."
            (+1 melee)
            """
            self.melee += 1
        else:
            msg = """\
            ********

            Fisherman "Looks like I have nothing left to teach you."
            """
        print(textwrap.dedent(msg))
        return True

    def fishconvo_no(self):
        msg = """\
        ********

        Fisherman: "Well, don't come crying to me if you get brutally raped by a horny pig chicken."
        """
        print(textwrap.dedent(msg))
        return True
</code></pre>

<p>The state machine is implemented as follow:</p>

<ul>
<li>The <code>setup()</code> method is used to initialize the transitions. You can imagine new scenarios more easily…</li>
<li>The <code>trigger()</code> method is used to trigger a transition given a user command. This function also trigger transitions without user input. The triggering calls the action of each matching transition; if the result of a command is False, the state machine is stopped (game over).</li>
<li>The <code>run()</code> method start the state machine and prompt the user to enter a command.</li>
</ul>

<p>The remaining classes are actions: they print a user message and change the game parameters when necessary.</p>

<p>The definition of the transitions is done in the <code>main()</code> function:</p>

<pre><code>def main():
    adventure = Adventure()
    adventure.setup([
        Transition("__init__", "start", None, adventure.start),

        Transition("start", "cottage", None, adventure.cottage),

        Transition("cottage", "hometown", "1", adventure.hometown),
        Transition("cottage", "cottage", "2", adventure.back_to_full_health),
        Transition("cottage", "cottage", "9", adventure.check_stats),

        Transition("hometown", "cottage", "1", adventure.cottage),
        Transition("hometown", "forest", "2", adventure.forest),
        Transition("hometown", "coast", "3", adventure.coast),
        Transition("hometown", "hometown", "9", adventure.check_stats),

        Transition("forest", "hometown", "1", adventure.hometown),
        Transition("forest", "forest_stones", "2", adventure.find_stones),
        Transition("forest", "battle", "3", adventure.battle),
        Transition("forest", "forest", "9", adventure.check_stats),
        Transition("forest_stones", "forest", None, adventure.forest),

        Transition("battle", "forest", "1", adventure.forest),
        Transition("battle", "game_over", "2", adventure.battle_raped),
        Transition("battle", "game_over", "3", adventure.battle_raped),

        Transition("coast", "hometown", "1", adventure.hometown),
        Transition("coast", "fishconvo", "2", adventure.fishconvo),
        Transition("coast", "coast_stones", "3", adventure.find_stones),
        Transition("coast", "coast", "9", adventure.check_stats),
        Transition("coast_stones", "coast", None, adventure.coast),

        Transition("fishconvo", "fishconvo_yes", "1", adventure.fishconvo_yes),
        Transition("fishconvo", "fishconvo_no", "2", adventure.fishconvo_no),
        Transition("fishconvo_yes", "coast", None, adventure.coast),
        Transition("fishconvo_no", "coast", None, adventure.coast),

    ])
    adventure.run()


if __name__ == '__main__':
    main()
</code></pre>

<p><strong>Notice:</strong></p>

<p>I haven't deep-tested the scenario, so I may left some transition. In you original post, I remarked that the <code>boatconvo()</code> function was never called.</p>

<p>The <code>prompt()</code> function can be implemented for Python2 / Python3, like this:</p>

<pre><code>import sys

PY2 = sys.version_info[0] == 2

if PY2:
    def prompt(msg):
        return raw_input(msg)
else:
    def prompt(msg):
        return input(msg)
</code></pre>

<p>Tell us about your adventure!</p>
    </div>