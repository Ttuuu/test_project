<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Review of OP's post and <a href="https://codereview.stackexchange.com/a/237115/29485">answer</a>.</p>

<p><strong>Bug</strong></p>

<p><code>digest[i] ^= vars[input[j] % varsLen];</code> is <em>undefined behavior</em>, UB, when <code>input[j] &lt; 0</code>.</p>

<p><strong>Bug</strong></p>

<p><code>hash("")</code> attempts <code>% 0</code> with<code>digest[i] ^= input[i % inputLen] + vars[i % varsLen];</code></p>

<p><strong>Failure on long strings</strong></p>

<p><code>strlen(input);</code> can exceed <code>INT_MAX</code>. <code>size_t const inputLen = strlen(input); size_t i, j;</code> is better.</p>

<p><strong><code>abs()</code> not really needed</strong></p>

<p><code>char *digest</code> as <code>unsigned char *digest</code> would negate the need for <code>abs()</code> in <code>abs(digest[i])</code></p>

<p><strong>Fundamental issues as code uses <code>char</code> rather than <code>unsigned char</code></strong></p>

<p>Using <code>unsigned char</code> rather than <code>char</code> would improve hash quality and maybe speed over when <code>char</code> is signed. </p>

<p><code>char vars[] = { 0xA6, ...</code> remains problematic as when <code>char</code> is signed, conversion of an out-of-range value to char is implementation defined and may not perform as desired. Simplify all this potential signed hashing with <code>unsigned char</code>.   The return type can remain <code>char *</code>.</p>

<p>Note that the C library functions perform internally as if <code>char</code> was <code>unsigned char</code> even when <code>char</code> is signed.</p>

<p><strong>Simplification</strong></p>

<p><code>char *digest = malloc(HASH_LENGTH + 1);  memset(digest, 0, HASH_LENGTH);  ...digest[HASH_LENGTH] = '\0';</code> can be replaced with <code>char *digest = calloc(HASH_LENGTH + 1, sizeof *digest);</code></p>
    </div>