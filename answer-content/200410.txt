<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Well, if you want k-distinct partitions with at least two distinct perfect squares, start with the perfect squares, intead of the partitioning. Anything else is too inefficient.</p>

<p>So, let's efficiently find them:</p>

<pre class="lang-none prettyprint-override"><code>for i in perfect_squares up to N
    optionally remember i is prefect square here
    for j in perfect_squares up to min(i - 1, N - i)
        $rest = N - i - j
        Add number of (k-2)-distinct partitions of rest avoiding i and j
        ... where any element &gt; i is not a perfect square
</code></pre>

<p>That is much better than linear, and thus very much preferable to your quadratic solution.</p>

<p>Now, let's look at your code:</p>

<ol>
<li><p><a href="http://coliru.stacked-crooked.com/a/08f68cabc6e87328" rel="nofollow noreferrer">Your code compiles very cleanly, kudos to you!</a> The only thing are those two conversions in <code>perfect()</code>. Why don't you stay with <code>double</code> instead of moving to <code>float</code>? And consider being more explicit that you actually want the truncation when assigning to <code>iVar</code>.</p></li>
<li><p>Be aware that <code>sqrt()</code> is not generally guaranteed to be perfectly accurate, even if the result is exactly representable. Floating-point-arithmetic is a field for itself with unique dangers.</p></li>
<li><p>Globals. Don't use them unless you really have to, and even then take another look. They increase complexity enormously, as they can be potentially modified everywhere, they inhibit re-use and in multithreaded programs are prone to data-races.</p></li>
<li><p>Especially if you have a result, return it as a return-value, don't stash it in some arbitrary global.</p></li>
<li><p>Names are important. They are the first thing anyone trying to find or understand something will see, so don't waste that chance.</p></li>
<li><p>And if you combine the above three points, it's even more critical: Having the same Symbol without internal linkage defined in two separate TUs, unless it's <code>inline</code> and equivalent, is undefined behavior.<br>
That's a good reason to give things internal linkage with <code>static</code>, which also makes inlining more likely.</p></li>
</ol>



<ul>
<li><code>func</code> should be <code>count_3part_2perfect</code> or something like that and return the result.</li>
<li><code>perfect</code> should be <code>is_perfect_square</code> or alike. Well, actually you won't need it.</li>
<li>I won't go into your variable-names, though they also merit improvement.</li>
</ul>



<ol start="7">
<li><p>Consider defining your functions before you use them. Doing so allows you to dispose of the forward-declarations.</p></li>
<li><p>As an aside, since C99 <code>return 0;</code> is implicit for <code>main()</code>. Use it or don't.</p></li>
<li><p>Consider investing in a few more spaces. A single space after a comma, and single spaces around binary pperators (but neither <code>.</code> nor <code>-&gt;</code>) makes Things less cramped and easier to scan.</p></li>
<li><p>I'm not sure that anti-pattern has a name, but anyway:</p>

<pre><code>if (comparison)
    return 1; // Or true
else
    return 0; // Or false
</code></pre>

<p>Should be simplified to:</p>

<pre><code>return comparison;
</code></pre>

<p>If it's not a comparison or something else guaranteed to be <code>0</code>/<code>false</code> or <code>1</code>/<code>true</code>, you can use <code>!!(expr)</code> or similar to normalize it if wanted. Normalizing is often a waste though.</p></li>
<li><p>Seems you are in the camp of those religiously using curly braces everywhere. It's not a bad idea for beginners, though I personally dislike going quite that far.</p></li>
</ol>
    </div>