<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Unclear Specification</h2>

<p>The specification of the <code>IServer</code> component is not clear. Does it serve as an abstraction of the third-party <code>RfcServer</code> component (because it does not have its own interface?) or does it act as a generic interface for any kind of server (with or without automatic restart functionality?)?</p>

<p>Things I would immediately address:</p>

<ul>
<li>proper documentation of the <code>IServer</code> component</li>
<li>a boolean flag get/set <code>EnableAutomaticReconnect</code> would make it clear that automatic reconnection is part of the interface for any kind of server implementation</li>
<li>If the third-party component has its own interface, use that instead of the class. This would also increase testiability because an interface is much easier to mock than a class.</li>
</ul>

<hr>

<blockquote>
  <p>This remaining part of the review asserts that:</p>
  
  <ol>
  <li><code>IServer</code> component is an abstraction of the third-party component, since it lacks its own interface</li>
  <li>Automatic reconnection is part of the specification <code>IServer</code>, not of the particular implementation <code>Server</code></li>
  </ol>
</blockquote>

<hr>

<h2>Redundancy</h2>

<blockquote>
  <p><em>Specifically I think there is a lot of redundancy in the wrapper and am wondering if that is all needed, ..</em></p>
</blockquote>

<p>Since the interface is an abstraction of the class, I see no other way then to create wrapper members of all the public parts of the third-party class that you require. This design is called the <a href="https://en.wikipedia.org/wiki/Interface_segregation_principle" rel="nofollow noreferrer">Interface Segregation Principle</a>. You then have to implement the <a href="https://en.wikipedia.org/wiki/Bridge_pattern" rel="nofollow noreferrer">Bridge Pattern</a> to link the third-party implementation to your interface. <code>IServer</code> acts as the interface and <code>Server</code> as the bridge between <code>IServer</code> and <code>RfcServer</code>.</p>

<p>There is a minor inconsistency in your implementation. You expect <code>this.RfcServer</code> to may hold the value <code>null</code>; for instance in <code>IsRunning</code> -&gt;  <code>return this.RfcServer != null &amp;&amp; this.RfcServer.IsRunning;</code> or in <code>Dispose</code> -&gt; <code>this.RfcServer?.Dispose()</code> but not in <code>Start</code> or <code>Stop</code> -&gt; <code>this.RfcServer.Start()</code>. Since you ensure it's never <code>null</code> you should avoid the null-checks altogether.</p>

<h2>Testability</h2>

<blockquote>
  <p><em>.. as well as what can be improved from the point of view of testability?</em></p>
</blockquote>

<p>You have decoupled the <code>IServer</code> component from the decorator <code>ServerTimeoutChecker</code>. This is good practice because each of these classes server their specific purpose, which shows us the benefits of the <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" rel="nofollow noreferrer">Single Responsibility Principle</a>. <code>ServerTimeoutChecker</code> can be tested with a mocked implementation of <code>IServer</code> rather than <code>Server</code> or even worse <code>RfcServer</code>. The only class harder to unit test is <code>Server</code> since it depends on the third-party component <code>RfcServer</code>. Unit-testing this class requires the use of a <a href="https://docs.microsoft.com/en-us/visualstudio/test/using-shims-to-isolate-your-application-from-other-assemblies-for-unit-testing?view=vs-2019" rel="nofollow noreferrer">shim/fake</a> rather than a mock. I would typically write integration and system integration tests with <code>Server</code> rather than unit tests.</p>
    </div>