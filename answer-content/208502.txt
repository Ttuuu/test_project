<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Just a few comments to add.</p>

<h3>Data Structure</h3>

<p>In this case, I'd tend to avoid <code>std::map</code> for counting frequencies. I probably wouldn't use <code>std::unordered_map</code> either though. Instead, I'd create a simple array:</p>

<pre><code>std::array&lt;int, std::numeric_limits&lt;unsigned char&gt;::max()&gt; freq;
</code></pre>

<p>[Note: when using this, you want to convert the input characters to <code>unsiged char</code> before using them as indices.<sup>1</sup>]</p>

<p>Both <code>map</code> and <code>unordered_map</code> do quite a bit of work to create something that acts like an array, but indexed using types (like strings) for which it's impractical to use the values of that type as an index directly because it would typically require <em>far</em> too much memory. In your case, however, you're using a <code>char</code> as an index, so creating an array that just allows all possible values of <code>char</code> as its index is utterly trivial. The amount of memory used is small enough that it's feasible even on thoroughly ancient computers (e.g., a Commodore 64 or Apple II). In this case, the array is so small (1 or 2 kilobytes) that it'll normally save space.</p>

<p>In addition, the array will almost certainly be quite a bit faster than either a map or unordered_map.</p>

<p>One time you'd want to think about using the map or unordered_map would be if you were going to support a character set like Unicode where using characters directly as array indices would lead to an inconveniently large array. In this case, you might (easily) want to us a map rather than an unordered_map. This would make it easy (for one example) to show frequencies for things like letters and digits, while ignoring things like punctuation and diacritics.</p>

<h3>Formatting</h3>

<p>I prefer to leave at least one blank line between the last header inclusion line, and whatever comes after it (in this case, the beginning of <code>main</code>).</p>

<h3>Return value from <code>main</code></h3>

<p>There's no need to <code>return 0;</code> from <code>main</code>--the compiler will do that automatically if you just let control flow off the end of <code>main</code>.</p>

<h3>using of <code>std::endl</code></h3>

<p>I advise against using <code>std::endl</code> in general. In addition to writing a new-line to the stream (which is all you probably want) it flushes the stream (which you almost never want). Especially if you're producing a lot of output, these unnecessary flushes can (and often do) slow programs substantially (a 10:1 margin is fairly common).</p>

<p>On the relatively rare occasion that you want to writ a new line <em>and</em> flush the stream, I'd do that explicitly: <code>std::cout &lt;&lt; '\n' &lt;&lt; std:flush;</code></p>

<hr>

<ol>
<li>If you prefer, you can use a char that's signed (either by default or explicitly) and use it to index off of a pointer that points to the middle (usually the 128<sup>th</sup> element) of the array.</li>
</ol>
    </div>