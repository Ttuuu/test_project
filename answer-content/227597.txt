<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Review</h2>

<p>The other answers already provide proper ways to refactor the design and split the method up into smaller methods. I would like to address some <em>minor</em> concerns I have with this method.</p>

<ul>
<li>The method name <code>CompareHands</code> suggests a comparison, which in C# has a built-in pattern <code>IComparable&lt;SuperCard&gt;</code> yielding an <code>integer</code> containing the comparison result, rather than a <code>bool</code>.</li>
<li>Its description <em>"Evaluates the value of the player hand and computer hand."</em> doesn't match its name (evaluation vs comparison).</li>
<li>The documentation of the return value is verbose, but doesn't inform us how a tie is treated <em>"Returns true if the player won and false if the player lost. This value is stored in the the bool won variable."</em>.</li>
<li>I believe the names <code>pComputerHand</code> and <code>pPlayerHand</code> are some sort of variant of Hungarian Notation (p stands for parameter?), which is not the default naming convention in C#. Prefer using <code>computerHand</code> and <code>playerHand</code>.</li>
<li><code>playerHandValue</code> and <code>computerHandValue</code> are calculated upfront, but their values are only used at the end of the method. In many cases, early exit prevents their usability. Avoid performing logic that may or may not be required. Moving this code to the end of the method is a better option.</li>
<li>Inline documentation should yield additional information about the code. In general, I would avoid using too much inline documentation. You'd no longer be able to differentiate between obvious and important comments. Also, code should be self-explaining so most of your comments are redundant: for instance <code>// Stores the value of the player and computer hands.</code> -&gt; yes, we can see that the next line :)</li>
<li>I believe you missed a region <code>#region RoyalFlush</code>. However, when you require many regions inside a method (even one might be too many), you might need to think about refactoring the method and split it up into multiple methods, or even classes using some design pattern. The other answers already talk about how to split up your method and use reusable helper methods. One other way you could go about business is to use the <em>Chain of Responsibility Pattern</em> to go through hand types and yielding early when no tie is found: royal flush -&gt; next: straight flush -&gt; next: four of a kind -&gt; and so on.. Each node in this chain could be a class with a pointer to the next node.</li>
<li>This method does 3 separate things: (1) returns the winner (2) evaluates which hand the winner holds (3) renders output to the console. I would split up these 3 concerns in 3 different methods to have <em>Separation of Concerns</em>.</li>
<li>If performance is important, you could create and reuse sub-routines. For instance, why would you calculate a Flush naively, if you've already checked for Royal Flush? The latter could store whether either Flush or Straight are found.</li>
</ul>
    </div>