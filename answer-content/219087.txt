<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><code>OpenChakraLinkPlusSaveNext()</code> is a <em>very</em> long function, with its logic for incrementing, loading, and saving state scattered and duplicated all over the place.  Functions should adhere to the Single Responsibility Principle, and do one thing only.</p>

<p>Another problem is that the implementation is strongly tied to <code>configparser</code>.  As a result, you need to put <code>int()</code> casts all over the place, because <code>configparser</code> only deals with strings.</p>

<h2>Counting</h2>

<p>Start by focusing on the core functionality and the main challenge of the code, which is how to increment the counters.</p>

<p>I suggest defining a <a href="https://docs.python.org/3/library/collections.html#collections.namedtuple" rel="noreferrer"><code>namedtuple</code></a> with three fields: <code>fullchakracycle</code>, <code>trainingcycle</code>, and <code>chakra</code>.  Note that I've written the fields in reverse order, because <code>fullchakracycle</code> acts as the "most significant" field if you wanted to compare two states.  I've also renamed <code>chakracycle</code> to <code>chakra</code>, since I consider it just a counter and not a cycle counter.</p>

<pre><code>from collections import namedtuple

class ChakraState(namedtuple('ChakraState', 'fullchakracycle trainingcycle chakra')):
    def next(self):
        if self.fullchakracycle or \
           self.trainingcycle == self.chakra == 7:
            return ChakraState(
                self.fullchakracycle + (self.chakra == 7),
                0,
                self.chakra % 7 + 1
            )
        else:
            return ChakraState(
                0,
                self.trainingcycle + (self.chakra == self.trainingcycle),
                self.chakra % self.trainingcycle + 1
            )
</code></pre>

<p>You can easily write a short script to verify that it increments correctly:</p>

<pre><code>state = ChakraState(0, 1, 1)
for _ in range(50):
    print(state)
    state = state.next()
</code></pre>

<p>The output should look like:</p>

<pre><code>ChakraState(fullchakracycle=0, trainingcycle=1, chakra=1)
ChakraState(fullchakracycle=0, trainingcycle=2, chakra=1)
ChakraState(fullchakracycle=0, trainingcycle=2, chakra=2)
ChakraState(fullchakracycle=0, trainingcycle=3, chakra=1)
ChakraState(fullchakracycle=0, trainingcycle=3, chakra=2)
ChakraState(fullchakracycle=0, trainingcycle=3, chakra=3)
ChakraState(fullchakracycle=0, trainingcycle=4, chakra=1)
ChakraState(fullchakracycle=0, trainingcycle=4, chakra=2)
ChakraState(fullchakracycle=0, trainingcycle=4, chakra=3)
ChakraState(fullchakracycle=0, trainingcycle=4, chakra=4)
ChakraState(fullchakracycle=0, trainingcycle=5, chakra=1)
ChakraState(fullchakracycle=0, trainingcycle=5, chakra=2)
ChakraState(fullchakracycle=0, trainingcycle=5, chakra=3)
ChakraState(fullchakracycle=0, trainingcycle=5, chakra=4)
ChakraState(fullchakracycle=0, trainingcycle=5, chakra=5)
ChakraState(fullchakracycle=0, trainingcycle=6, chakra=1)
ChakraState(fullchakracycle=0, trainingcycle=6, chakra=2)
ChakraState(fullchakracycle=0, trainingcycle=6, chakra=3)
ChakraState(fullchakracycle=0, trainingcycle=6, chakra=4)
ChakraState(fullchakracycle=0, trainingcycle=6, chakra=5)
ChakraState(fullchakracycle=0, trainingcycle=6, chakra=6)
ChakraState(fullchakracycle=0, trainingcycle=7, chakra=1)
ChakraState(fullchakracycle=0, trainingcycle=7, chakra=2)
ChakraState(fullchakracycle=0, trainingcycle=7, chakra=3)
ChakraState(fullchakracycle=0, trainingcycle=7, chakra=4)
ChakraState(fullchakracycle=0, trainingcycle=7, chakra=5)
ChakraState(fullchakracycle=0, trainingcycle=7, chakra=6)
ChakraState(fullchakracycle=0, trainingcycle=7, chakra=7)
ChakraState(fullchakracycle=1, trainingcycle=0, chakra=1)
ChakraState(fullchakracycle=1, trainingcycle=0, chakra=2)
ChakraState(fullchakracycle=1, trainingcycle=0, chakra=3)
ChakraState(fullchakracycle=1, trainingcycle=0, chakra=4)
ChakraState(fullchakracycle=1, trainingcycle=0, chakra=5)
ChakraState(fullchakracycle=1, trainingcycle=0, chakra=6)
ChakraState(fullchakracycle=1, trainingcycle=0, chakra=7)
ChakraState(fullchakracycle=2, trainingcycle=0, chakra=1)
ChakraState(fullchakracycle=2, trainingcycle=0, chakra=2)
ChakraState(fullchakracycle=2, trainingcycle=0, chakra=3)
ChakraState(fullchakracycle=2, trainingcycle=0, chakra=4)
ChakraState(fullchakracycle=2, trainingcycle=0, chakra=5)
ChakraState(fullchakracycle=2, trainingcycle=0, chakra=6)
ChakraState(fullchakracycle=2, trainingcycle=0, chakra=7)
ChakraState(fullchakracycle=3, trainingcycle=0, chakra=1)
ChakraState(fullchakracycle=3, trainingcycle=0, chakra=2)
ChakraState(fullchakracycle=3, trainingcycle=0, chakra=3)
ChakraState(fullchakracycle=3, trainingcycle=0, chakra=4)
ChakraState(fullchakracycle=3, trainingcycle=0, chakra=5)
ChakraState(fullchakracycle=3, trainingcycle=0, chakra=6)
ChakraState(fullchakracycle=3, trainingcycle=0, chakra=7)
ChakraState(fullchakracycle=4, trainingcycle=0, chakra=1)
</code></pre>

<h2>Suggested solution</h2>

<p>Then, we can go on to add support for loading and saving the state in <code>Chakras.ini</code>.  I've chosen to write the <code>load()</code> and <code>save()</code> methods within the <code>ChakraState</code> class.</p>

<p><code>chakras</code> is a "constant", so I'd name it using <code>ALL_CAPS</code>.  Since only the URLs matter, I've dropped the name and number fields.</p>

<pre><code>from collections import namedtuple
import configparser
import webbrowser

CHAKRAS = [
    'https://www.youtube.com/watch?v=JTqktSAmG30', # root
    'https://www.youtube.com/watch?v=VRGs0GiR-QY', # sacral
    'https://www.youtube.com/watch?v=Pz47Fv_TQDU', # solar
    'https://www.youtube.com/watch?v=tDWoIAITBiY', # heart
    'https://www.youtube.com/watch?v=QwzSOF9GEHo', # throat
    'https://www.youtube.com/watch?v=IpbXlN2duKk', # thirdeye
    'https://www.youtube.com/watch?v=7ZpUUXNQW1E', # crown
]

class ChakraState(namedtuple('ChakraState', 'fullchakracycle trainingcycle chakra')):
    def next(self):
        if self.fullchakracycle or \
           self.trainingcycle == self.chakra == len(CHAKRAS):
            return ChakraState(
                self.fullchakracycle + (self.chakra == len(CHAKRAS)),
                0,
                self.chakra % len(CHAKRAS) + 1
            )
        else:
            return ChakraState(
                0,
                self.trainingcycle + (self.chakra == self.trainingcycle),
                self.chakra % self.trainingcycle + 1
            )

    @classmethod
    def load(cls, filename):
        config = configparser.ConfigParser()
        config.read(filename)
        try:
            return cls(**{k: int(v) for k, v in config['Chakras'].items()})
        except KeyError:
            return cls(0, 1, 1)

    def save(self, filename):
        config = configparser.ConfigParser()
        config['Chakras'] = self._asdict()
        with open(filename, 'w') as f:
            config.write(f)

def open_chakra_link_and_save_next():
    state = ChakraState.load('Chakras.ini')
    webbrowser.open(CHAKRAS[state.chakra - 1])
    state.next().save('Chakras.ini')

if __name__ == '__main__':
    open_chakra_link_and_save_next()
</code></pre>
    </div>