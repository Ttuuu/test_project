<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think there are two choices with little or no in-betweens:</p>

<ol>
<li>formally specify the products and use a parser</li>
<li>keep the current behavior, which means determining the product and switching.</li>
</ol>

<p>so in the end, you have to either take a big step and create a formal description and a parser (parser generation is a university course, mind you). Or you'll have to perform some smart but elaborate branching.</p>

<hr>

<p>A possible enhancement is to first load into memory and then switch. This would decouple the file handling from the parsing of the products. That way you can also test the parsing of the products without relying on files (!).</p>

<hr>

<p>Another possible enhancement is to use factory methods / classes. In that case a factory is used to aggregate the various data of a product performing validation on the input. Then it can be used to create the actual (<code>Potatoes</code>) object after making sure that all necessary components are present and not in conflict.</p>

<p>This could also make it easier to use one factory for multiple products, so you can group together the handling of similar products. Of course, you may need to create a product -&gt; factory mapping - but that should not be hard. In Java you can also use reflection to then instantiate the right factory.</p>

<hr>

<p>Let me end by: never trust your input! I see too little input checking and no clear strategy (such as throwing a checked exception) in case the input is invalid.</p>
    </div>