<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>(In addition to the <a href="https://codereview.stackexchange.com/a/241413/188857">accepted answer</a>)</p>

<p>We can first extract some commonly used code snippets in functions.  Let's start with confirmation:</p>

<pre><code>bool confirm_continue()
{
    std::cout &lt;&lt; "Do you want to play again (y/n)? ";

    for (std::string input; std::getline(std::cin, input);) {
        if (input == "y") {
            return true;
        } else if (input == "n") {
            return false;
        }

        std::cout &lt;&lt; "Invalid input.  Do you want to play again (y/n)? ";
    }

    throw std::runtime_error{"Failed to read input"};
}
</code></pre>

<p>Note that invalid inputs are handled properly.</p>

<p>Then, the winning criteria:</p>

<pre><code>enum class Choice { rock, paper, scissors };

enum class Result { draw, win, lose };

void evaluate(Choice user_choice, Choice computer_choice)
{
    static const std::map&lt;Result, std::string_view&gt; messages {
        { Result::draw, "It's a draw." },
        { Result::win, "You won." },
        { Result::lose, "You lost." }
    };

    auto result = static_cast&lt;Result&gt;(
        (static_cast&lt;int&gt;(user_choice) - static_cast&lt;int&gt;(computer_choice) + 3) % 3
    );
    std::cout &lt;&lt; messages.at(result) &lt;&lt; '\n';
}
</code></pre>

<p>Choice input:</p>

<pre><code>Choice input_choice()
{
    static const std::map&lt;std::string_view, Choice&gt; table {
        { "rock"    , Choice::rock     },
        { "paper"   , Choice::paper    },
        { "scissors", Choice::scissors }
    };

    std::cout &lt;&lt; "Enter your choice (rock/paper/scissors): ";
    for (std::string input; std::getline(std::cin, input);) {
        if (auto it = table.find(input); it != table.end()) {
            return it-&gt;second;
        } else {
            std::cout &lt;&lt; "Invalid input.  Enter your choice (rock/paper/scissors): ";
        }
    }

    throw std::runtime_error{"Failed to read input"};
}
</code></pre>

<p>We can also use a choice generator:</p>

<pre><code>Choice generate_choice()
{
    static std::mt19937 engine{std::random_device{}()};

    std::uniform_int_distribution dist{0, 2};
    return static_cast&lt;Choice&gt;(dist(engine));
}
</code></pre>

<p>Now the hard-to-follow structure with <code>goto</code>s can be improved by writing code that reflects the logic of the game:</p>

<pre><code>do {
    auto user_choice = input_choice();
    auto computer_choice = generate_choice();

    show_choice(computer_choice);
    evaluate(user_choice, computer_choice);
} while (confirm_continue());
</code></pre>

<hr>

<p>Putting everything together:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;map&gt;
#include &lt;random&gt;
#include &lt;string&gt;
#include &lt;string_view&gt;

enum class Choice { rock, paper, scissors };

enum class Result { draw, win, lose };

void evaluate(Choice user_choice, Choice computer_choice)
{
    static const std::map&lt;Result, std::string_view&gt; messages {
        { Result::draw, "It's a draw." },
        { Result::win, "You won." },
        { Result::lose, "You lost." }
    };

    auto result = static_cast&lt;Result&gt;(
        (static_cast&lt;int&gt;(user_choice) - static_cast&lt;int&gt;(computer_choice) + 3) % 3
    );
    std::cout &lt;&lt; messages.at(result) &lt;&lt; '\n';
}

bool confirm_continue()
{
    std::cout &lt;&lt; "Do you want to play again (y/n)? ";

    for (std::string input; std::getline(std::cin, input);) {
        if (input == "y") {
            return true;
        } else if (input == "n") {
            return false;
        }

        std::cout &lt;&lt; "Invalid input.  Do you want to play again (y/n)? ";
    }

    throw std::runtime_error{"Failed to read input"};
}

Choice generate_choice()
{
    static std::mt19937 engine{std::random_device{}()};

    std::uniform_int_distribution dist{0, 2};
    return static_cast&lt;Choice&gt;(dist(engine));
}

Choice input_choice()
{
    static const std::map&lt;std::string_view, Choice&gt; table {
        { "rock"    , Choice::rock     },
        { "paper"   , Choice::paper    },
        { "scissors", Choice::scissors }
    };

    std::cout &lt;&lt; "Enter your choice (rock/paper/scissors): ";
    for (std::string input; std::getline(std::cin, input);) {
        if (auto it = table.find(input); it != table.end()) {
            return it-&gt;second;
        } else {
            std::cout &lt;&lt; "Invalid input.  Enter your choice (rock/paper/scissors): ";
        }
    }

    throw std::runtime_error{"Failed to read input"};
}

void show_choice(Choice choice)
{
    static const std::map&lt;Choice, std::string_view&gt; table {
        { Choice::rock    , "rock"     },
        { Choice::paper   , "paper"    },
        { Choice::scissors, "scissors" }
    };
    std::cout &lt;&lt; "I chose " &lt;&lt; table.at(choice) &lt;&lt; ".\n";
}

int main()
{
    std::cout &lt;&lt; "Welcome to Rock, Paper, Scissors.\n";

    do {
        auto user_choice = input_choice();
        auto computer_choice = generate_choice();

        show_choice(computer_choice);
        evaluate(user_choice, computer_choice);
    } while (confirm_continue());
}
</code></pre>

<p>Example session:</p>

<pre class="lang-none prettyprint-override"><code>Welcome to Rock, Paper, Scissors.
Enter your choice (rock/paper/scissors): rock
I chose scissors.
You won.
Do you want to play again (y/n)? y
Enter your choice (rock/paper/scissors): scissors
I chose rock.
You lost.
Do you want to play again (y/n)? y
Enter your choice (rock/paper/scissors): paper
I chose scissors.
You lost.
Do you want to play again (y/n)? n
</code></pre>

<p>(<a href="https://godbolt.org/z/mrF-md" rel="nofollow noreferrer">live demo</a>; the output is a mess because of non-interactive stdin)</p>
    </div>