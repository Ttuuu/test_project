<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If you were doing this in real life under normal circumstances, I'd expect to use the standard library to do essentially the entire job. In particular, I'd avoid doing any of the computation myself, given that the library already has <code>std::mktime</code> and company to do date computations.</p>

<p>The only part of this that's tricky is how we get the library to convert a day number to a month/day. <code>std::mktime</code> will normalize a date for us, but it does pretty much the opposite of what we want. We want to give a day of the year as input, and get a month/day as output. <code>std::mktime</code> takes a month/day as input, and computes (among other things) the day of the year as an output.</p>

<p>There's still a way though: <code>mktime</code> also normalizes the date. So if (for example) we give it January 32<sup>nd</sup> as an input, it'll figure out that that's really February 1<sup>st</sup>.</p>

<p>In this case we put that to use: if we have an input of (say) 182, we fill in a struct tm saying it's the 182<sup>nd</sup> of January, then let <code>std::mktime</code> normalize that to give us the actual month and day (1 July in a non-leap year). First, however, we need to fill in the other fields so it'll know what year we're dealing with, so it knows whether it's a leap year.</p>

<p>That gives us code something like this:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;iomanip&gt;
#include &lt;ctime&gt;

int main(int argc, char **argv)
{
    if (argc != 2)
    {
        std::cerr &lt;&lt; "Usage: " &lt;&lt; argv[0] &lt;&lt; " &lt;daynumber&gt;\n";
        return EXIT_FAILURE;
    }

    // get the current year, so we know whether it's a leap year:
    std::time_t current = time(nullptr);
    std::tm *now = std::localtime(&amp;current);

    // we don't know if the day in question will be daylight savings time:
    now-&gt;tm_isdst = -1;

    // Every day is in January:
    now-&gt;tm_mon = 0;
    now-&gt;tm_mday = std::stoi(argv[1]);
    now-&gt;tm_hour = 12;    

    // Now have it normalize the date:
    std::mktime(now);

    // ...and we can print out our result:
    std::cout &lt;&lt; std::put_time(now, "%m/%d\n");
}
</code></pre>

<p>Oh, I almost forgot to mention: I set the time of day to (approximately) noon, so we won't accidentally get anything funny if we happen to run it just as clocks are about to change. Likewise, we use <code>localtime</code>, to get the current time for the user, rather than the current time in England.</p>
    </div>