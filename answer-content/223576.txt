<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>General</h1>

<p>This should probably be three separate classes, unless there's some compelling reason you haven't shared to wrap <code>WeightedEdge</code> and <code>UnionFind</code> inside <code>KruskalMST</code>. If they must be internal, they should be <code>static</code> because they don't rely on context from <code>KruskalMST</code>.</p>

<p>You should use <code>final</code> to indicate classes are not designed for extension and that properties will not change after their initial assignment. This reduces cognitive load on the reader and gives hints to the compiler.</p>

<p>In idiomatic Java, we only declare one variable per line, even if they share a type.</p>

<p>In idiomatic Java, put whitespace between a control flow keyword (<code>for</code>, <code>while</code> and the opening <code>{</code>.</p>

<p>In idomatic Java, <code>else {</code> belongs on the same line as <code>}</code>, not a newline.</p>

<p>It's preferred to include whitespace on both sides of binary operations (<code>+</code>, <code>-</code>, etc).</p>

<p>It's preferred to have whitespace after a <code>,</code>. Please be consistent.</p>

<p>Don't use abbreviations when naming variables. It makes it harder for readers to understand your code. In general, good names are very helpful for increasing readability.</p>

<p>Methods that return a boolean variable typically begin with a predicate such as <code>is</code> or <code>has</code>. In the case of <code>connected</code>, it's arguable whether <code>isConnected</code> (gramatically incorrect, but standard predicate) is preferable to <code>areConnected</code> (gramatically correct, but unusual predicate). I would argue that both
 are preferable to <code>connected</code>, which only loosely suggests it returns a <code>boolean</code> value.</p>

<h1>WeightedEdge</h1>

<p>Member variables should be private unless you have a compelling reason to expose them. This allows your class to control its internal representation of properties without breaking clients if it changes. Use accessor methods to allow clients access the the information. In this case, given that the values are primitives and the class is immutable (its state will not change after object creation), it's not terrible to expose them. However, you definitely should make the values final. Classes should control their own internals.</p>

<p>Since you have a known need for a comparator by weight, it would be cleaner to expose it on WeightedEdge rather than force clients to create it.</p>

<h1>UnionFind</h1>

<p><code>capacity</code> is unused outside the constructor and does not need to be stored as an instance variable.</p>

<p>It's typically considered a poor practice to reassign method parameter variables.</p>

<p>We can gain readability at the cost of some performance by letting <code>union()</code> use <code>connected()</code>. This is often an excellent tradeoff, but varies on a case-by-case basis.</p>

<p>A guard clause might make <code>union</code> a bit easier to read.</p>

<p><code>connected</code> can be simplified to a single line.</p>

<h1>Kruskal MST</h1>

<p>Your comparator can overflow or underflow for extreme values. Presumably this isn't an issue in your case, but it's something to be aware of. Using <code>Integer.compare(int, int)</code> would be preferable.</p>

<p>You can reduce the number of loop iterations in half by adding both edge directions at the same time.</p>

<p>If you made all these changes, your code might look something like:</p>

<pre><code>import java.util.ArrayDeque;
import java.util.PriorityQueue;
import java.util.Queue;

public final class KruskalMST {

    public Queue&lt;WeightedEdge&gt; findMinimumCostConnectionToAllCities(final int[][] roadNetwork) {

        final int n = roadNetwork.length;
        final PriorityQueue&lt;WeightedEdge&gt; edges =
                new PriorityQueue&lt;WeightedEdge&gt;(2 * n, WeightedEdge.WEIGHT_DESCENDING_ORDER);

        final Queue&lt;WeightedEdge&gt; minimumSpanningTree = new ArrayDeque&lt;&gt;();
        final UnionFind unionFind = new UnionFind(n);

        for (int i = 0; i &lt; n; i++) {
            for (int j = i; j &lt; n; j++) {
                if (roadNetwork[i][j] &gt; 0) {
                    edges.add(new WeightedEdge(i, j, roadNetwork[i][j]));
                }
                if (roadNetwork[j][i] &gt; 0) {
                    edges.add(new WeightedEdge(j, i, roadNetwork[j][i]));
                }
            }
        }

        while (!edges.isEmpty() &amp;&amp; minimumSpanningTree.size() &lt; n - 1) {
            final WeightedEdge edge = edges.remove();
            if (!unionFind.areConnected(edge.from, edge.to)) {
                unionFind.union(edge.from, edge.to);
                minimumSpanningTree.add(edge);
            }
        }

        return minimumSpanningTree;

    }

    public static void main(final String[] args) {
        final int[][] city1 = {
                {0, 1, 2, 3, 4},
                {1, 0, 5, 0, 7},
                {2, 5, 0, 6, 0},
                {3, 0, 6, 0, 0},
                {4, 7, 0, 0, 0}};

        final int[][] city2 = {
                {0, 1, 1, 100, 0, 0},
                {1, 0, 1, 0, 0, 0},
                {1, 1, 0, 0, 0, 0},
                {100, 0, 0, 0, 2, 2},
                {0, 0, 0, 2, 0, 2},
                {0, 0, 0, 2, 2, 0}};

        final KruskalMST kruskal = new KruskalMST();
        final Queue&lt;WeightedEdge&gt; minimumSpanningTree = kruskal.findMinimumCostConnectionToAllCities(city2);

        int totalCost = 0;
        for (final WeightedEdge edge: minimumSpanningTree) {
            totalCost += edge.weight;
            System.out.println(edge.toString());
        }
        System.out.println("Total cost --&gt; " + totalCost);
    }

}
</code></pre>

<hr>

<pre><code>import java.util.Comparator;

final class WeightedEdge {

    /** Sorts edges from greatest weight to least weight. */
    public static final Comparator&lt;WeightedEdge&gt; WEIGHT_DESCENDING_ORDER = 
            (final WeightedEdge e1, final WeightedEdge e2) -&gt; Integer.compare(e1.weight, e2.weight);

    public final int from;
    public final int to;
    public final int weight;

    public WeightedEdge(final int from, final int to, final int weight) {
        this.from = from;
        this.to = to;
        this.weight = weight;
    }

    @Override
    public String toString() {
        final StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("From --&gt; ");
        stringBuilder.append(from + 1);
        stringBuilder.append(", to --&gt; ");
        stringBuilder.append(to + 1);
        stringBuilder.append(", weight --&gt; ");
        stringBuilder.append(weight);
        return stringBuilder.toString();
    }
}
</code></pre>

<hr>

<pre><code>final class UnionFind {

    private final int[] arr;
    private final int[] size;

    public UnionFind(final int capacity) {
        this.arr = new int[capacity];
        this.size = new int[capacity];

        for (int i = 0; i &lt; capacity; i++) {
            this.arr[i] = i;
            this.size[i] = 1;
        }
    }

    public void union(final int i, final int j) {
        if (areConnected(i, j)) {
            return;
        }

        final int rootOfI = rootOf(i);
        final int rootOfJ = rootOf(j);

        if (this.size[rootOfI] &lt;= this.size[rootOfJ]) {
            this.size[rootOfJ] += this.size[rootOfI];
            this.arr[rootOfI] = rootOfJ;
        } else {
            this.arr[rootOfJ] = rootOfI;
            this.size[rootOfI] += this.size[rootOfJ];
        }
    }

    public boolean areConnected(final int i, final int j) {
        return rootOf(i) == rootOf(j);
    }


    private int rootOf(final int i) {
        int parent = i;
        while (parent != arr[parent]) {
            parent = arr[arr[parent]];
        }
        return parent;
    }

}
</code></pre>
    </div>