<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Naming and Problem Decomposition</h3>

<ul>
<li><strong>Class names should be nouns; method names should be verbs.</strong>  If you have a method named as a noun like <code>sumGenerator()</code>, that's a red flag.</li>
<li><strong>Each method should do one thing only; its name should reflect its purpose.</strong> If you have a method named <code>answerGetter_score()</code>, that's a red flag.  Is it getting an answer <em>and</em> keeping score?  It also breaks the standard <code>interCapsNaming()</code> convention.</li>
<li><strong>Each class should do one thing only; its name should reflect its purpose.</strong>  I have no idea what a <code>Machine</code> or a <code>calcu</code> is.  The latter also breaks the standard capitalization convention.</li>
<li><strong>Separate your input/output routines from the calculation routines.</strong>  Forcing yourself to separate the two helps you come up with clean designs.</li>
<li><strong>Keep your <code>main()</code> function minimal.</strong>  The temptation to stuff a lot of functionality into <code>main()</code> leads to sloppy design.</li>
<li><strong>Avoid hard-coding assumptions in more than one place.</strong>  What if you want to change the length of the quiz?  Currently, 5 is hard-coded in several places.  It's easy to introduce a bug if someone fails to make the same change everywhere.</li>
</ul>

<p>For this problem, I think that there should be two classes: <code>SumGenerator</code> and <code>ArithmeticQuiz</code>.  <code>SumGenerator</code> is responsible for making random addition questions.  <code>ArithmeticQuiz</code> "drives" it.</p>

<p>What if you want to change the quiz to do multiplication?  Just swap out the <code>SumGenerator</code> for a <code>ProductGenerator</code>.  To ease that transition, it would be helpful to define a <code>QuestionGenerator</code> interface.</p>

<h3>Code Formatting (only because you asked about good habits)</h3>

<p>Consistent indentation is very important for readability.  Do that, and discard the noisy <code>//end</code> comments.</p>

<p>Also, add some horizontal spacing around punctuation, such as comparison operators.</p>

<p>The one-point penalty for an incorrect answer deserves a comment, since not everyone expects that behaviour.</p>

<h3>Proposed Solution</h3>

<p><strong>QuestionGenerator.java:</strong></p>

<pre><code>interface QuestionGenerator {
    void next();
    String getQuestion();
    int getAnswer();
}
</code></pre>

<p><strong>SumGenerator.java:</strong></p>

<pre><code>import java.util.Random;

class SumGenerator implements QuestionGenerator {
    private int maxAddend, num1, num2, ans;
    private Random rand = new Random();

    public SumGenerator(int maxAddend) {
        this.maxAddend = maxAddend;
        this.next();
    }

    @Override
    public void next() {
        num1 = rand.nextInt(this.maxAddend + 1);
        num2 = rand.nextInt(this.maxAddend + 1);
        ans = num1 + num2;
    }

    @Override
    public String getQuestion() {
        return num1 + " + " + num2;
    }

    @Override
    public int getAnswer() {
        return ans;
    }
}
</code></pre>

<p><strong>ArithmeticQuiz.java:</strong></p>

<pre><code>import java.util.Scanner;

public class ArithmeticQuiz {
    private int length;
    private QuestionGenerator questions;

    public ArithmeticQuiz(int length, QuestionGenerator q) {
        this.length = length;
        this.questions = new SumGenerator();
    }

    public void run() {
        // Closing the Scanner after use is a good habit.
        // Automatically closing the Scanner using the
        // try-with-resources feature of Java 7 is even better.
        try (Scanner in = new Scanner(System.in)) {
            int score = 0; 
            for (int i = this.length; i &gt; 0; i--) {
                System.out.println(this.questions.getQuestion());
                int answer = in.nextInt();
                if (this.questions.getAnswer() == answer) {
                    score++;
                    System.out.println("Correct");
                }else{
                    score--;    // Penalty for incorrect answer
                    System.out.println("Incorrect");
                }
                System.out.printf("Score is currently: %d/%d\n", score, this.length);
                this.questions.next();
            }
        }
    }

    public static void main(String[] args) {
        System.out.println("***Welcome to addition Math test***");
        ArithmeticQuiz quiz = new ArithmeticQuiz(5, new SumGenerator(9));
        quiz.run();
        System.out.println("Thanks for taking the test.");
    }
}
</code></pre>
    </div>