<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This got way out of hand for the comment section where it started, so let's make this an answer.</p>

<p>You want classes. That's good, since it's going to solve a lot of your repetition problems. Your code has <em>a lot</em> of repetition problems. But classes shouldn't be your main priority at this point. Putting the data outside of the code is more important.</p>

<p>Why? Couple of reasons.</p>

<p>Eventually, you'll have to do it anyway. You can't put 50 questions/answers in the code itself, it becomes a mess. A royal mess. Don't even try.</p>

<p>So the least you'd have to do is put it in an external script to be imported. However, since the only thing it will be holding is data, why not put it in a <a href="https://docs.python.org/3.5/library/json.html" rel="noreferrer">JSON</a> file? Python happens to be quite good at parsing JSON and it's fairly human readable. Which brings me to the next point.</p>

<p>What happens when you want to modify a question, add one or remove one? Your current numbering system can't handle it without turning into a lot of work. For one minor modification. You want this program to have features similar to Duolingo. That's good, since it gives you something to compare it against. Duolingo has multiple questions per subject, multiple subjects per category and multiple categories per language combination.</p>

<pre><code>{
  "languageCombo": "EnglishToArabic",
  "categories": {
    "name": "greetings",
    "subjects": {
      "name": "Family",
      "questions": {
        "id": 0,
        "question": "somethingSomethingEnglish",
        "possibleAnswers": {
          "possibility1": "somethingSomethingArabic1",
          "possibility2": "somethingSomethingArabic2",
          "possibility3": "somethingSomethingArabic3",
          "possibility4": "somethingSomethingArabic4",
        },
        "correctAnswer": "possibility3"
      }
    },
    "name": "travel",
    "subjects": {
    },
    "name": "food",
    "subjects": {
    }
  }
}
</code></pre>

<p>Roughly like that. All of a sudden you have a maintainable set of questions. And the above is already in JSON.</p>

<p>Now you also know what your classes would look like. What makes sense and what doesn't. Should you put this code into classes <em>before</em> extracting the dataset, you're doing double work. After all, the classes will look different after the extraction than before.</p>

<p>Extract the questions and answers first, worry about classes later. You'll see the code cleaning-up already quite nicely in the progress.</p>
    </div>