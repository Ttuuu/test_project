<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Good</strong>  </p>

<ul>
<li>Most of the comments are telling <strong>why</strong> something is done.  </li>
<li>The input and local used parameter are named good  </li>
<li>The method- and parameternames fit the naming guidlines  </li>
</ul>

<p><strong>Bad</strong>  </p>

<ul>
<li>Some of the comments are useless, as they tell what is done like e.g<br>
<code>//Get all the bytes from the file we want to embed, and save it in a byte array
byte[] fileBytes = File.ReadAllBytes(inputFilePath);</code> instead of <strong>why</strong> something is done.  </li>
<li><code>if</code>statement without brackets <code>{}</code>  </li>
<li>The <code>Extract()</code> method does not call <code>UnlockBits()</code>  </li>
</ul>

<p>As you are unsure which inputparameters and which retuntypes to use, why don't you add some overloads of your methods? </p>

<pre><code>public static Bitmap Embed(string imageFilePath, string inputFilePath)
{
    return InternalEmbed(new Bitmap(imageFilePath), File.ReadAllBytes(inputFilePath));
}
public static Bitmap Embed(Bitmap target, string inputFilePath)
{
    return InternalEmbed(target, File.ReadAllBytes(inputFilePath));
}
public static Bitmap Embed(Bitmap target, byte[] content)
{
    return InternalEmbed(target, content);
}  
</code></pre>

<p>and rename your former <strong>public</strong> <code>Embed()</code> method to the <strong>private</strong> <code>InternalEmbed()</code> method  </p>

<pre><code>private  static Bitmap InternalEmbed(Bitmap target, byte[] fileBytes)
{
    // your former code without 
    // byte[] fileBytes = File.ReadAllBytes(inputFilePath);
}        
</code></pre>

<p>After thinking about the overloads and looking at the signature of the methods I realized that if we return a <code>Bitmap</code> and also take a <code>Bitmap</code> as input parameter one would <strong>not</strong> assume that the passed <code>Bitmap</code> would be altered. As we have the overloads taking also a <code>string</code> we can't change the return type to <code>void</code>, therefor we need to call the <code>InternalEmbed()</code> method differently.  </p>

<pre><code>public static Bitmap Embed(Bitmap target, String inputFilePath)
{
    return InternalEmbed(new Bitmap(target), File.ReadAllBytes(inputFilePath));
}
public static Bitmap Embed(Bitmap target, byte[] content)
{
    return InternalEmbed(new Bitmap(target), content);
}   
</code></pre>

<p>now we don't alter the passed <code>Bitmap</code> anymore.</p>
    </div>