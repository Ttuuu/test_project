<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>        if (HasHeaderRow)
        {
</code></pre>
</blockquote>

<p>It seems strange, that you know in advance, if the file has headers or not? If that is right, why then call the method in the first place if <code>HasHeaderRow</code> is <code>false</code> - when you do nothing in that case?</p>

<hr>

<blockquote>
  <p><code>public List&lt;(string IPN, string FPTech)&gt; GetIPNFPTechFromCSV(string filePath)</code></p>
</blockquote>

<ol>
<li>I would return <code>IEnumerable&lt;..&gt;</code> instead and then use <code>yield return</code> to return each data pair (see below).</li>
<li>I would define a <code>struct</code> or <code>class</code> instead of using a <code>named tuple</code>. IMO <code>named tuples</code> are only useful very locally, because they can be harder to maintain, if their definition changes and you distribute them across the application (see below).</li>
</ol>

<hr>

<blockquote>
<pre><code>  var IPNFPTechPair = (IPN: line.Split(Delimiter)[IPNPos], FPTech: line.Split(Delimiter)[FPPos]);
</code></pre>
</blockquote>

<p>Here you split the same string twice. It would be better to do:</p>

<pre><code>string[] cells = line.Split(Delimiter);
var IPNFPTechPair = (IPN: cells[IPNPos], FPTech: cells[FPPos]);
</code></pre>

<hr>

<p>You should handle all the heading stuff in a separate method in order to make the design and responsibility more clear.</p>

<hr>

<p>All in all I would do something like:</p>

<pre><code>public IEnumerable&lt;IpnItem&gt; Read(string filePath)
{
  using (StreamReader reader = new StreamReader(filePath))
  {
    (int ipnColumn, int fptechColumn) = ReadHeaders(reader);

    string line;
    while ((line = reader.ReadLine()) != null)
    {
      string[] cells = line.Split(Delimiter);
      yield return new IpnItem(cells[ipnColumn], cells[fptechColumn]);
    }
  }
}

private (int ipnColumn, int fptechColumn) ReadHeaders(StreamReader reader)
{
  string[] headers = reader.ReadLine().Split(Delimiter);
  if (headers.Length != 2) throw new Exception("Number of column headers should be 2");
  (int ipnColumn, int fptechColumn) columnIndices = (Array.IndexOf(headers, "PartNumber"), Array.IndexOf(headers, "FPTech"));
  if (columnIndices.ipnColumn == -1 || columnIndices.fptechColumn == -1) throw new Exception("Invalid or missing column names");
  return columnIndices;
}
</code></pre>

<p>Where <code>IpnItem</code> is declared as:</p>

<pre><code>  public class IpnItem
  {
    public IpnItem(string ipn, string fpTech)
    {
      IPN = ipn;
      FPTech = fpTech;
    }

    public string IPN { get; private set; }
    public string FPTech { get; private set; }
  }
</code></pre>
    </div>