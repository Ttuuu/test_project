<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I am shocked that the first three approaches that came to mind didn't even get considered/mentioned/tested!</p>

<p>In reverse order of my preference...</p>

<p>Least robust because only works on integers and poorly handles an empty string, casting string as integer: (<a href="https://3v4l.org/dCW9P" rel="nofollow noreferrer">Demo</a>)</p>

<pre><code>$tests = ['1,23,45,123,145,200', '345,999,0,1', '0', '0,2', '-1,-122', '', '1.5,2.9'];

foreach ($tests as $test) {
    var_export((int)$test);  
    echo "\n";
}
// 1
// 345
// 0
// 0
// -1
// 0
// 1
</code></pre>

<p><a href="http://php.net/manual/en/function.strstr.php" rel="nofollow noreferrer">strstr()</a> with the <code>before_needle</code> parameter: (<a href="https://3v4l.org/q1sMY" rel="nofollow noreferrer">Demo</a>)</p>

<pre><code>// same tests
$before_comma = strstr($test, ',', true);
var_export($before_comma === false ? $test : $before_comma);
// '1'
// '345'
// '0'
// '0'
// '-1'
// ''
// '1.5'
</code></pre>

<p><code>explode()</code> with a limit parameter: (<a href="https://3v4l.org/tUGnL" rel="nofollow noreferrer">Demo</a>)</p>

<pre><code>// same tests
var_export(explode(',', $test, 2)[0]);
// '1'
// '345'
// '0'
// '0'
// '-1'
// ''
// '1.5'
</code></pre>

<p>While I don't like the idea of creating an array to extract a string value of the first element, it is a single call solution.  Setting an element limit means that function isn't asked to do heaps of unnecessary labor.</p>

<p>I am a big fan of <code>strstr()</code> but it must involve a conditional to properly handle  comma-less strings.</p>

<p>If your comma-separated string is never empty and only contains integers, I would strongly recommend the <code>(int)</code> approach, surely that is fastest.</p>

<p>As much as I love regex, I would not entertain the use of a <code>preg_</code> call -- not even for a second.</p>
    </div>