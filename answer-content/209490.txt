<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I suggest you do the following:</p>

<ol>
<li>Sort the entire heights array once.</li>
<li>Finds all the matching pairs for the full array (i.e. <code>l=0; r=h.length-1;</code>).</li>
<li>For each matching pair you find, loop over the <code>queries</code> array, and add it to the counts of all the subsets that contain both fighters. For example, if the pair <code>h[2]</code>,<code>h[5]</code> is matching, increment <code>results[j]</code> for all <code>j</code> such that <code>queries[j][0] &lt;=2</code> and <code>5 &lt;= queries[j][1]</code>.</li>
</ol>

<p>I believe running a single sort instead of <code>queries.length</code> sorts will improve the performance.</p>

<p>The only downside of this algorithm is that if all the queries cover a small subset of the full heights array, the algorithm will do a lot of unnecessary work (finding matching pairs for indices that we'll never need to count).</p>
    </div>