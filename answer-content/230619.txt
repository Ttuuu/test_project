<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>To complement the Makefile review, here are a few more points that may help you improve your program.</p>

<h2>Use <code>VPATH</code></h2>

<p><code>make</code> already has a number of builtin rules that could be used for this project with no loss of generality.  If you omit the colored printing (which I would advocate) and use <code>VPATH</code>, you could use replace most of your <code>Makefile</code> with a single rule:</p>

<pre><code>VPATH = src
${BINDIR}/${BINARY}: boot.o kernel.o string.o vga.o terminal.o
        ${CC} -T linker.ld ${CFLAGS} $^ -o $@ -lgcc
</code></pre>

<h2>Add missing dependencies</h2>

<p>The iso image is dependent on the configuration file as well as the kernel image, so I'd add that file to the <code>Makefile</code> rule.</p>

<h2>Specify flags using standard variables</h2>

<p>The compiler uses <code>CFLAGS</code> and the assembler uses <code>ASFLAGS</code> by default.  Set those variables and simplify your <code>Makefile</code>.</p>

<h2>Reorder your targets</h2>

<p>Remember that the first target is the default one run if <code>make</code> is invoked with no arguments.  For that reason, I'd recommend that the iso image file rule, which is the most derived rule that is a real target, should be first, followed by the target for the kernel, followed by the <code>.PHONY</code> targets.</p>

<h2>Create a list of objects</h2>

<p>Best practice for a project like this is to use a variable for the created objects like this:</p>

<pre><code>OBJECTS = boot.o kernel.o string.o vga.o terminal.o
</code></pre>

<p>This can then be used for both the kernel target and the <code>clean</code> target.</p>

<h2>Don't clean files you haven't created</h2>

<p>While the existing rule for <code>clean</code> probably works just fine, it will also delete all <code>.o</code> files anywhere in the subtree, whether or not this <code>makefile</code> created them.  Better practice is to only delete files created by this <code>makefile</code>.  </p>

<h2>Revised makefile</h2>

<p>Using all of those suggestions, here's what I came up with:</p>

<pre><code>CFLAGS = -m32 -std=c99 -ffreestanding -nostdlib -O0 -Wall -Wextra -pedantic
ASFLAGS = -32

VPATH = src

ISODIR = isodir
KERNEL = ${ISODIR}/boot/kernel.bin
GRUBFCFG = ${ISODIR}/boot/grub/grub.cfg
ISO_IMAGE = kernel.iso
OBJECTS = boot.o kernel.o string.o vga.o terminal.o

.PHONY: clean run

${ISO_IMAGE}: ${KERNEL} ${GRUBCFG}
        grub2-mkrescue ${ISODIR} -o ${ISO_IMAGE}

${KERNEL} : ${OBJECTS}
        ${CC} -T linker.ld ${CFLAGS} $^ -o $@ -lgcc

clean: 
        -rm -f ${OBJECTS} ${KERNEL} ${ISO_IMAGE}

run: ${ISO_IMAGE}
        qemu-system-x86_64 --cdrom ${ISO_IMAGE}
</code></pre>

<p>Note that this uses the default compiler and assembler and changes their behavior using flags.  It also builds the <code>kernel.bin</code> file where it is needed instead of introducing another step to copy it.</p>

<h2>Use something more modern than plain <code>make</code></h2>

<p>I'd recommend looking at <code>autotools</code> or <code>cmake</code> to use as a solid foundation for a maintainable, modern and sophisticated project.  For example, neither the original nor revised <code>makefile</code> is capable of out-of-source builds which both of the mentioned tools can easily handle.  Further, both support the addition of other things such as unit tests, documentation generation, and multiple types of build (e.g. debug vs. release) that, while possible to do with plain <code>make</code>, quickly becomes more effort than it's worth.</p>

<h2>Use the latest standards</h2>

<p>The old version of grub uses the original multiboot standard, but things have moved on since then.  The current is the <a href="https://www.gnu.org/software/grub/manual/multiboot2/multiboot.html" rel="noreferrer">multiboot2 standard</a> which is implemented by <code>grub2</code> among others.  I modified your code to use the multiboot2 standard instead in just a few minutes.</p>

<h2>Consider unit tests</h2>

<p>Unit testing of code provides a higher level of assurence that things are working as you intend.  For that reason, I'd highly recommend getting into the habit of introducing unit tests into the code base as early as possible.  One way that can be simplified is by using the next suggestion.</p>

<h2>Create and use libraries</h2>

<p>The <code>string.c</code> file only contains a single function at the moment but is likely to grow as your project does.  One efficient way to group and maintain such functions is via the use of libraries, either shared or static.  As mentioned above, this also makes unit testing simpler, since one can write tests against a library.</p>

<h2>Consider using compiler optimization</h2>

<p>The compiler is currently set to do no optimization (<code>-O0</code>).  While it may be instructive so see what the unoptimized code looks like, modern compilers are quite good at optimization.  It would be a shame to forego all of those benefits.</p>

<h2>Consider efficiency and clarity</h2>

<p>The code currently includes <code>Terminal_Init</code> which calls <code>Terminal_Clear</code> which calls <code>ClearBackBuffer</code> which calls <code>PutCharToBackBuffer</code> in a loop.  We know for a fact that there are no newline characters in that, but the first part of every call to <code>PutCharToBackBuffer</code> checks to see if the character is a newline.  I'd suggest that it would make more sense to call <code>PutCharToBackBufferAtCoordinates</code> instead at that location.</p>

<h2>Use <code>static</code> where appropriate</h2>

<p>Mostly, the use of <code>static</code> is appropriate within this code, but there are some other places it could and should be applied.  One example is the <code>Terminal</code> struct within <code>terminal.c</code>.</p>

<h2>Don't check build artifacts into version control</h2>

<p>Although it's not in the code posted, I notice that the iso and bin files are checked into your <code>git</code> project.  Don't do that.  Version control is for <em>source</em> files, not the products of them.</p>
    </div>