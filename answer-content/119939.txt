<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>I want my money back!</h1>
<pre><code>Your total is 15
Dealer has a 4 showing.
[H]it or [S]tay?
s


It is now the dealer's turn!


The player has 15.
The dealer has 23.   &lt;&lt;=====

The dealer wins!     &lt;&lt;=====
</code></pre>
<p>Your casino is cheating! Also you're not handling aces, all face cards are supposed to have a value of 10, and there are 13 ranks in a suit but your <code>getCard</code> function can only return 11 different values (2 to 12).</p>
<p>This means that you can lose right off the bat:</p>
<pre><code>$ ./a.out 
================================
Your total is 24       &lt;&lt;======     :-(
Dealer has a 9 showing.
[H]it or [S]tay?
</code></pre>
<hr>
<p>In <code>turn</code>, if the player enters <code>h</code> and doesn't bust, you're not setting <code>stay</code> - this happens to work given the code flow, but it looks odd. Set it before returning.</p>
<p>If the user enters gibberish, you always interpret that as stay. That's not user-friendly.</p>
<p>In <code>main</code>:</p>
<pre><code>bool stay;
char choice = NULL;
</code></pre>
<p>That's not a valid initializer for a <code>char</code> - chars are not pointers. And leaving a variable (<code>stay</code>) uninitialized is not a good idea. You should move <code>stay</code> inside the loop, only declare it when you give it its first value. (I'd also use two separate variables for the dealer and the player.)<br>
Remove <code>choice</code> from main altogether. Only <code>turn</code> needs it, so handle the user input in there completely. (And have turn return hit/stay so you don't need that out parameter.)</p>
<p>This shouldn't be inside the loop:</p>
<pre><code>std::srand(std::time(0));
</code></pre>
<p>You should initialize the RNG only once, do that at the very start of main. C++11 introduced new <a href="http://en.cppreference.com/w/cpp/numeric/random" rel="noreferrer">random generation facilities</a>, you should look into them.</p>
<p>These lines are too long:</p>
<pre><code>// Display winner
std::cout &lt;&lt; "\n\nThe player has " &lt;&lt; pTotal &lt;&lt; ".\nThe dealer has " &lt;&lt; dTotal &lt;&lt; ".\n\n";
if ((std::abs(21 - pTotal)) &lt; (std::abs(21 - dTotal))) std::cout &lt;&lt; "The player wins!\n";
else std::cout &lt;&lt; "The dealer wins!\n";
</code></pre>
<p>Try something like:</p>
<pre><code>// Display winner
std::cout &lt;&lt; "\n\nThe player has " &lt;&lt; pTotal
          &lt;&lt; ".\nThe dealer has " &lt;&lt; dTotal &lt;&lt; ".\n\n";

if ((std::abs(21 - pTotal)) &lt; (std::abs(21 - dTotal))) {
  std::cout &lt;&lt; "The player wins!\n";
} else {
  std::cout &lt;&lt; "The dealer wins!\n";
}
</code></pre>
<p>And once you fix your logic so that a bust directly ends the players turn, and a dealer bust makes the player win, you can get rid of the <code>std::abs</code> since both scores will be at most 21.</p>
    </div>