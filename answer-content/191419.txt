<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>HashMap is overkill here.</h2>

<p>Depending on the constraints of the problem (mainly the minimum and maximum allowable years), you could simply use an array instead of a HashMap.</p>

<p>Sure HashMaps have a O(1) complexity, but nothing is going to beat just indexing an array.</p>

<h2>Better algorithm</h2>

<p>Coming up with a better algorithm is very tricky. </p>

<p>Your solution is <code>O(NL)</code> where <code>N</code> is the number of people and <code>L</code> is the average lifetime. But keep in mind that <code>L</code> is practically a constant, so it does not really matter that much.</p>

<p>You could most certainly come up with a <code>O(NlogN)</code> solution, based on creating a sorted list of relevant dates. This would outperform your current solution for small values of <code>N</code>, but better performance at the low end is rarely useful (it can be, but that's the exception, not the rule).</p>

<p><strong>Edit</strong> Thinking about this, I suspect that's the "trick" part of that interview question. Overlapping intervals is a classic interview problem. However, making the intervals happen on a fully discretized space makes the hashmap solution viable, whereas it can't be used when dealing with "traditional" float-bound intervals.</p>
    </div>