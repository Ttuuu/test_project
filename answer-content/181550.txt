<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Alright, I finally decided to actually review how you use C++ this because I want to practice structuring feedback for code structured like this.</p>

<p>Be advised that I'm reviewing this from a specific lens, which is the one used in professional environments: <strong>Code should be written in a way to be read by other people</strong>.</p>

<h1>1: Macros</h1>

<p>You should not be using macros like this... ever. There's a few reasons for this, but the most important is: it makes your code hard to read.</p>

<p>Looking at your main function, I see this:</p>

<pre><code>REP(i,n){
    int a;
    RI(a);
    dn[a]++;
}
</code></pre>

<p>I don't know what <code>REP()</code> or <code>RI</code> is, so I have to look it up. That means stopping my reading of the main function, finding <code>REP()</code>, understanding what it does, keep it in mind, and restart reading the main function. That's cognitive load, and the act of reading and understanding code is already cognitively intensive, any extra load is just hinderance.</p>

<p>This is tough because you intimately know what <code>REP()</code> and <code>RI()</code> does, so this looks really obvious to you. It's really important that you put yourself in the shoes of someone coming in to your code fresh.</p>

<p>If you had written:</p>

<pre><code>for(int i = 0 ; i &lt; n; ++i) {
  int a;
  scanf("%d", &amp;a);
  dn[a]++;
}
</code></pre>

<p>Then I would have been able to understand it all without having to interrupt my reading, and really, it's not really any harder to write.</p>

<p>The same thing goes for your <code>Fi</code> and <code>Sn</code> macros, you are not judged by how short your code is.</p>

<h1>2: Whitespace</h1>

<p>Your code is too tightly packed. Blocks of code can often be broken down in logical units using whitespace carefully. Let it breathe a bit. For example, check out my slightly improved version of <code>deuxpownmodprime()</code>:</p>

<pre><code>long deuxpownmodprime(long n,long mod){
    n=(n%(mod-1));

    long res;
    res = 1;
    if (n&amp;1) {res=2;}
    if (n&lt;=1) {return res;}

    long ps2=deuxpownmodprime(n/2,mod);

    long long resll;
    resll=res;
    resll*=ps2;
    resll*=ps2;

    return (resll%mod);
}
</code></pre>

<h1>3: Don't use <code>using namespace std</code></h1>

<p>It pollutes your global namespace, and causes nothing but grief in the long run.</p>

<h1>4: Don't use <code>scanf()</code></h1>

<p>It's a completely deprecated pure C interface. Use <code>std::cin</code> instead:</p>

<pre><code>int v;
std::cin &gt;&gt; v;
</code></pre>

<h1>5: Avoid redundant lookups</h1>

<p><code>find()</code> and <code>operator[]</code> both do essentially the same thing.</p>

<p>This:</p>

<pre><code>bool j=isin(m,ta);
if (!j){
    ta.insert(pair&lt;long,long&gt; (m,it.Sn));
}
else {
    ta[m]+=it.Sn;
    //ot[it.Fi]=ot[m];
}
</code></pre>

<p>becomes (with a few miscellaneous other improvements):</p>

<pre><code>auto found = ta.find(m);
if(found == ta.end()) {
  ta.emplace(m, it.second);
}
else {
  found-&gt;second += it.second;
}
</code></pre>

<h1>6: Initialize your variables</h1>

<p>This:</p>

<pre><code>long res;
res = 1;
</code></pre>

<p>should simply be:</p>

<pre><code>long res = 1;
</code></pre>

<h1>Conclusion</h1>

<p>At the end of the day, most of these things are details, the thing you really should focus improving on is related to the explanation I gave at the start of point #1.</p>

<p>As much as possible, you want to write code in a way that makes reading it possible without having to jump up and down the page. That takes the form of better variable names, better function names, good use of whitespace, clarification with comments where needed, using standard stuff as much as humanly possible, etc... </p>

<p>Taking your <code>deuxpownmodprime()</code> function for example, it took me too long to understand what it says. Is it <code>de_ux_pow_n_mod_prime</code>, or (as I suspect) <code>deux_pow_n_mod_prim</code> (with the French deux)? And it's lucky for you the other words were easily separable. You should use either a camelCase or underscore_separated scheme so that it's clear where each word ends and the next begins.</p>
    </div>