<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>Make your deque easier to test by adding an <code>__iter__</code> method. Then you can easily iterate over it or call useful functions that accept an iterable on it, like <code>list()</code>.</p>

<pre class="lang-py prettyprint-override"><code>def __iter__(self):
    yield from self.array
</code></pre></li>
<li><p>Use <a href="https://docs.python.org/3/library/unittest.html" rel="nofollow noreferrer"><code>unittest</code></a> to test your code. Much faster and more reliable than writing print statements and checking the results manually via visual inspection on each program run. A well-written test suite doubles as documentation of the expected behavior of your data structure, which brings me to my next point...</p></li>
<li><p>I know you called it a deque/double-ended queue, but looking at the implementation it's unclear to me how this data structure is supposed to behave. If <code>push_left</code> and <code>push_right</code> are supposed to behave like <code>appendleft</code> and <code>append</code> in <a href="https://docs.python.org/3/library/collections.html#collections.deque" rel="nofollow noreferrer"><code>collections.deque</code></a>, then I don't think your deque implementation actually works as advertised. Comparing <code>collections.deque</code> and your deque:</p>

<pre class="lang-py prettyprint-override"><code>import unittest
from collections import deque

# [...]

class TestDeque(unittest.TestCase):
    # passes
    def test_collections_deque(self):
        d = deque()
        d.appendleft(19)
        d.appendleft(11)
        d.appendleft(23)
        d.append(17)
        d.append(13)
        self.assertEqual(list(d), [23, 11, 19, 17, 13])

    # fails
    def test_custom_deque(self):
        d = Deque()
        d.push_left(19)
        d.push_left(11)
        d.push_left(23)
        d.push_right(17)
        d.push_right(13)
        # Note: must implement __iter__ in order to call `list` on Deque
        # list(d) == [17, 13, 23, 11, 19]
        self.assertEqual(list(d), [23, 11, 19, 17, 13])

if __name__ == "__main__":
    unittest.main()
</code></pre></li>
</ul>
    </div>