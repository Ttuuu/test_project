<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I see a number of things that may help you improve your program.</p>

<h2>Don't abuse <code>using namespace std</code></h2>

<p>Putting <code>using namespace std</code> at the top of every program is <a href="http://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice">a bad habit</a> that you'd do well to avoid.  Know when to use it and when not to (as when writing include headers).  </p>

<h2>Don't use <code>std::endl</code> if you don't really need it</h2>

<p>The difference betweeen <code>std::endl</code> and <code>'\n'</code> is that <code>'\n'</code> just emits a newline character, while <code>std::endl</code> actually flushes the stream.  This can be time-consuming in a program with a lot of I/O and is rarely actually needed.  It's best to <em>only</em> use <code>std::endl</code> when you have some good reason to flush the stream and it's not very often needed for simple programs such as this one.  Avoiding the habit of using <code>std::endl</code> when <code>'\n'</code> will do will pay dividends in the future as you write more complex programs with more I/O and where performance needs to be maximized.</p>

<h2>Use <code>const</code> where practical</h2>

<p>The underlying <code>Graph</code> is not and should not be altered by the <code>kruskal</code> algorithm. For that reason, I would advise changing the signature of the function to this:</p>

<pre><code>std::vector&lt;Edge&gt; kruskal(const Graph &amp;g)
</code></pre>

<p>This has a ripple effect through the interface, which will help sharpen your thinking about which things really need to be modified, and which don't.</p>

<h2>Let the compiler create default destructor</h2>

<p>The compiler will create a destructor by default which is essentially identical to what you've got, so you can simply omit both the declaraton and implementation from your code.  Same thing with empty constructors.  They add nothing but clutter.  If you wish to explicitly use the default, write this:</p>

<pre><code>HashMap() = default;
</code></pre>

<h2>Think carefully about object ownership</h2>

<p>The <code>kruskal</code> routine returns a collection of <code>Edge</code>s which each, in turn, refer to a pair of <code>Vertex</code>.  What happens if those objects are all out of scope when the collection is accessed?  (Hint: <strong>boom!!!</strong>)  Instead, because the collection assumes some invariants (such as the fact that each <code>Edge</code> points to two <code>Vertex</code> objects that are both valid and still exist), the class should be responsible for making sure that invariant <em>always</em> holds true.  It shouldn't, for example, be possible for a <code>Vertex</code> to be deleted without all the corresponding <code>Edge</code>s to also be deleted.  That would make this a much more robust class design.  One method to address this might be to use smart pointes rather than raw pointers.</p>

<h2>Provide test code</h2>

<p>This has more to do with getting useful reviews than necessarily about your code, but showing an example of how you expect your code to be used is very useful to both reviewers, and to yourself, to clarify that how you'd like to write the code is actually how the code is structured.  Here's what I used to test your code:</p>

<pre><code>#include "minSpanTree.h"

int main() {
    Graph g(5);
    g.connectTo(g.vertices()[0], g.vertices()[4], 1);
    g.connectTo(g.vertices()[0], g.vertices()[1], 3);
    g.connectTo(g.vertices()[1], g.vertices()[4], 4);
    g.connectTo(g.vertices()[1], g.vertices()[2], 5);
    g.connectTo(g.vertices()[2], g.vertices()[3], 2);
    g.connectTo(g.vertices()[2], g.vertices()[4], 6);
    g.connectTo(g.vertices()[3], g.vertices()[4], 7);
    g.show();
    auto m{kruskal(g)};
    g.show(m);
}
</code></pre>

<p>The <code>show</code> command was one I added, but I don't think the <code>connectTo</code> calls are very nice -- there is a lot of opportunity for error there.</p>
    </div>