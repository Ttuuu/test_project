<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Log paths</h2>
<p>It is not a good idea to hard-code this:</p>
<pre><code>logging.basicConfig(filename='/home/sangharshmanuski/EcourtsData/logging_files'
                             '/ecourts_log_file.log',
</code></pre>
<p>Probably use <code>pathlib.Path.home()</code> to replace that hard-coded prefix. Also, the usual thing to do for posix filesystems like that is <code>~/.EcourtsData</code> - most home-local data directories are dotted.</p>
<h2>Capitalized constants</h2>
<pre><code>url = r'https://districts.ecourts.gov.in/'
</code></pre>
<p>should be</p>
<pre><code>URL = r'https://districts.ecourts.gov.in/'
</code></pre>
<h2>Incomplete type hints</h2>
<p>What is <code>driver</code>, here?</p>
<pre><code>def get_states(driver) -&gt; List[str]:
</code></pre>
<p>You have a type hint for the return value but not the parameter.</p>
<h2>Odd string format</h2>
<p>This:</p>
<pre><code>f'\n \n \n new district: {name_dist} selected. It\'s number: {dist_number}'
</code></pre>
<p>First of all, the spaces between the newlines should not be there. Second, you can avoid needing to escape that single quote by using double quotes for the string. Third, I don't think the single quote should be there at all; it looks like a grammar mistake.</p>
<h2>OCR on a captcha</h2>
<p>This is a deeply bad idea. First, if someone has a captcha on their site, it means they specifically don't want you scraping it, so this entire program is likely in bad faith. Beyond that, it's fragile and unlikely to consistently work.</p>
<h2>Selenium</h2>
<p>Selenium is a last resort when a website is doing something so horribly complicated in JS that the only way to interact with it is to fake mouse clicks. In this case, thankfully, your website really isn't that complicated. It copies the <code>value</code> attribute of that <code>option</code> to the URL. You should be hitting the website directly with Requests; this should get you started:</p>
<pre><code>from dataclasses import dataclass
from typing import Iterable

from requests import Session
from bs4 import BeautifulSoup

BASE = 'https://districts.ecourts.gov.in/'
STATE = 'maharashtra'


def doc_for_path(sess: Session, path: str) -&gt; BeautifulSoup:
    with sess.get(BASE + path) as resp:
        resp.raise_for_status()
        return BeautifulSoup(resp.text, 'html.parser')


@dataclass
class District:
    key: str
    name: str
    act_link: str = None

    def fill_act_link(self, sess: Session):
        doc = doc_for_path(sess, self.key)
        anchor = next(
            a
            for a in doc.select('div.panel a')
            if a.text == 'Act'
        )
        self.act_link = anchor['href']

    def __str__(self):
        return self.name


def get_districts(sess: Session) -&gt; Iterable[District]:
    doc = doc_for_path(sess, STATE)
    return (
        District(opt['value'], opt.text)
        for opt in doc.select('#sateist &gt; option')
        if opt['value']
    )


def main():
    with Session() as sess:
        districts = tuple(get_districts(sess))
        for i, district in enumerate(districts, 1):
            print(f'Getting act link for {district}, {i}/{len(districts)}...', end='\r')
            district.fill_act_link(sess)


if __name__ == '__main__':
    main()
</code></pre>
    </div>