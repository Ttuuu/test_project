<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is (nearly) the perfect application for <a href="https://en.wikipedia.org/wiki/Integer_programming" rel="nofollow noreferrer">ILP</a>, with a catch - whereas you want to enumerate <em>all</em> possible combinations, ILP is for convex optimization within certain constraints, has a cost metric, and only outputs <em>the best</em> possible combination (where you define best).</p>

<p>You haven't given us a lot of detail on the "computation engineering model", but it's likely that not all of your output combinations are preferable, and there's some other selection process at work after your Python program has run. <em>If</em> you can capture this selection process as a linear cost metric, then ILP was made for your problem.</p>

<p>If you're married to Python, then you can use Numpy and the <a href="https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.linprog.html" rel="nofollow noreferrer"><code>scipy.optimize.linprog</code></a> package, but it has some shortcomings - prominently, that it doesn't support ILP, only LP (with floating-point values). If you aren't married to Python, then use something like <a href="https://www.gnu.org/software/glpk/" rel="nofollow noreferrer"><code>glpk</code></a> - either directly or through something like <a href="https://octave.org/doc/v4.0.0/Linear-Programming.html" rel="nofollow noreferrer">Octave's interface</a>.</p>

<p>To illustrate, following along with Chapter 1.1 of the <a href="https://kam.mff.cuni.cz/~elias/glpk.pdf" rel="nofollow noreferrer">glpk documentation</a> and matching it to your example:</p>

<ul>
<li>Your a, b, and c would form a three-element vector <em>x</em> that glpk is responsible for determining</li>
<li>You would have to create a matrix <em>c</em> to determine the cost ("objective") function against which glpk will optimize</li>
<li>Your <code>ranges</code> would be converted into the vectors <em>l</em> and <em>u</em></li>
<li>The constraint coefficient matrix <em>a</em> would be set to a vector of all 1s</li>
<li>Your <code>target</code> would be converted into the "constraint auxiliary variable"</li>
</ul>

<p>If you actually need to constrain the output to whole numbers (i.e. your <code>increment</code> is 1), then use MIP ("mixed integer linear programming") mode directly.</p>

<p>If <code>increment</code> is not 1 and you still need to constrain output to a linear space following those increments, you'll need a pre- and post-scaling operation so that you're still using MIP.</p>

<p>If it actually doesn't matter that the numbers be constrained to increments at all, then just use LP mode.</p>
    </div>