<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I see <code>Block</code> and <code>Snake</code> have constructors that both accept five identical parameters. You could consider using inheritance to make a parent-class, which the two child classes inherit from via <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes#Sub_classing_with_extends" rel="nofollow noreferrer"><code>extends</code></a>. This would be congruent with the <a href="https://deviq.com/don-t-repeat-yourself/" rel="nofollow noreferrer"><strong>D</strong>on't <strong>R</strong>epeat <strong>Y</strong>ourself principle</a></p>

<hr>

<p>Some of the variable are used globally - e.g. <code>start</code>, <code>canvas</code>, <code>food</code>, etc. You could at least limit the scope to an <a href="https://developer.mozilla.org/en-US/docs/Glossary/IIFE" rel="nofollow noreferrer">IIFE</a> or a DOM ready callback.</p>

<hr>

<p>I also see a few places where a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of" rel="nofollow noreferrer"><code>for...of</code></a> loop could be used instead of a traditional <code>for</code> loop. For instance, instead of this in <code>Snake::draw()</code>:</p>

<blockquote>
<pre><code>for (var x = 0; x &lt; this.bod.length; x++) {
  this.bod[x].draw();
}
</code></pre>
</blockquote>

<p>A <code>for...of</code> loop could be used to simplify the array indexing:</p>

<pre><code>for (const segment of this.bod) {
  segment.draw();
}
</code></pre>

<hr>

<p>I see that <code>game_loop</code> is assigned a timer from calling <code>setInterval()</code> in <code>menu()</code>, but it is cleared both in <code>die()</code> and <code>game()</code> - does it really need to be cleared in both places?</p>
    </div>