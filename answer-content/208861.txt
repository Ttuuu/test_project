<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think your use of <code>ManualResetEvent</code> is incorrect in this scenario, because as I read it, you intend to wait for all threads to complete here:</p>

<blockquote>
<pre><code>        resetEvent.WaitOne();
        Console.WriteLine("Done.");
</code></pre>
</blockquote>

<p>But you actually only wait for the first thread to call <code>resetEvent.Set()</code>.</p>

<p>Instead you'll have to provide a <code>ManualResetEvent</code> (or another waithandle type - for instance <code>ManualResetEventSlim</code>) for each thread in order to wait for them all to end. This could be done like this:</p>

<pre><code>private static void RunThreadPool()
{
  string url = @"https://google.com";
  List&lt;ManualResetEvent&gt; waitHandles = new List&lt;ManualResetEvent&gt;();

  for (int i = 0; i &lt; 4; i++)
  {
    ManualResetEvent waitHandle = new ManualResetEvent(false);
    waitHandles.Add(waitHandle);
    int workerId = i;
    ThreadPool.QueueUserWorkItem(state =&gt; Worker(workerId, waitHandle));
  }

  Console.WriteLine("Starting adding.");
  for (int i = 0; i &lt; 400; ++i)
  {
    inputQueue.Add(url); // + "/" + i);
  }

  Console.WriteLine("Stopping adding.");
  inputQueue.CompleteAdding();

  WaitHandle.WaitAll(waitHandles.ToArray());

  waitHandles.ForEach(wh =&gt; wh.Dispose());
  //resetEvent.WaitOne();
  Console.WriteLine("Done.");
}

static void Worker(int workerId, ManualResetEvent waitHandle)
{
  Console.WriteLine("Worker {0} is starting.", workerId);

  foreach (var workItem in inputQueue.GetConsumingEnumerable())
  {
    string res = "";
    try
    {
      res = Get(workItem);
      Console.WriteLine($"{res} - {workerId}");
    }
    catch (Exception)
    {
      res = "404";
    }
  }
  waitHandle.Set();
  Console.WriteLine("Worker {0} is stopping.", workerId);
}
</code></pre>

<p>Besides that I think your use of <code>ThreadPool.QueueUserWorkItem()</code> is OK.</p>

<hr>

<p>It is not quite clear what kind of concurrency you are exercising but if it's just about executing an action on each element in an existing collection in a multi threaded/parallel manner then, you can experiment with <code>Parallel.ForEach(..)</code>:</p>

<pre><code>private static void RunParallel()
{
  string url = @"https://google.com";

  List&lt;string&gt; inputQueue = new List&lt;string&gt;();

  for (int i = 0; i &lt; 400; ++i)
  {
    inputQueue.Add(url); // + "/" + i);
  }

  int workerId = 0;
  ParallelOptions options = new ParallelOptions();
  options.MaxDegreeOfParallelism = 8;
  Parallel.ForEach(inputQueue, options, (uri) =&gt;
  {
    Worker(workerId++, uri);
  });

  Console.WriteLine("Done.");
}

static void Worker(int workerId, string uri)
{
  Console.WriteLine("Worker {0} is starting.", workerId);

  string res = "";
  try
  {
    res = Get(uri);
    Console.WriteLine(res);
  }
  catch (Exception)
  {
    res = "404";
  }

  Console.WriteLine("Worker {0} is stopping.", workerId);
}
</code></pre>

<p>If you experiment with different values of <code>options.MaxDegreeOfParallelism</code> you can investigate how the <code>Parallel</code> react to that in the use of threads and how it may influence on performance.</p>
    </div>