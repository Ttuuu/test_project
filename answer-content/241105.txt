<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It looks like a rather straightforward use of HMAC. So I would presume it is safe from that perspective.</p>

<p>A note about terminology. Personally I would talk about an <em>authentication tag</em> or simply <em>HMAC value</em> because people often associate signatures with asymmetric algorithms such as RSA. The same goes for "private key"; I'd use <em>secret key</em> for symmetric keys as in your code.</p>

<p>Some remarks:</p>

<ul>
<li>the regular expression is used twice, it seems more logical to match the entire GET request and make sure it ends with the <em>group</em> with the signature in it (even if that just means using <code>.*</code>);</li>
<li>to remove one way of attacks, I'd make sure that there aren't <em>two</em> authentication tags in the GET request;</li>
<li>to remove another, I'd include a sequence number or time stamp so that replay attacks are not possible;</li>
<li>hexadecimals are not very efficient, I'd use a base64url encoder, it's made for it;</li>
<li>the groups count check is unnecessary, either the regex matches or it doesn't.</li>
</ul>

<p>One idea is to have a method split the URI and the signature, you don't need the authentication tag after verification after all - you could for instance use <a href="https://docs.microsoft.com/en-us/dotnet/csharp/tuples#tuples-as-method-return-values" rel="nofollow noreferrer">a tuple</a> with the verification status and the URL without signature (as optional value), or use a yucky output parameter. Check your coding standards before doing either of these though.</p>
    </div>