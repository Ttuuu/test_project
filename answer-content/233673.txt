<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your usage of <code>std::ref</code> is unnecessary (both in <code>main</code> and <code>invoke</code>). It is only needed when you are passing arguments to a templated function that would normally throw away the reference qualifier, but this is not the case where you are using it.</p>

<hr>

<p>You are storing an external reference to a <code>std::atomic&lt;bool&gt;</code>. This seems very bizarre to me because you are forcing the user of the <code>Timer</code> to (1) create it and (2) ensure that the reference stays valid for the life of the <code>Timer</code> instance. That can certainly be an annoyance with seemingly no benefit. You already have <code>cancel()</code> and if you want to see if it is running, just add a function for getting it.</p>

<p>Just make <code>is_running_</code> a non-reference. (You did this in your linked version but not here)</p>

<hr>

<pre><code>while (time_point_cast&lt;Timestamp::duration&gt;(system_clock::now()) &lt; time) {
    // wait for the time
}
</code></pre>

<p>This will pin the thread at 100% utilization until the condition is met. This is very bad since it could be waiting for a long time, whatever the user wants. A hot loop like this you could cool down by adding micro-sleeps <code>while (condition) { // sleep for a few milliseconds }</code>.</p>

<p>You're already using <code>sleep_for()</code> but there's also <a href="https://en.cppreference.com/w/cpp/thread/sleep_until" rel="nofollow noreferrer"><code>sleep_until()</code></a>. So your while loop can be replaced with:</p>

<pre><code>std::this_thread::sleep_until(time);
</code></pre>

<p>and your timer will consume much fewer resources. (You updated your linked version so I'm guessing you already knew this)</p>

<hr>

<p>You should rethink your design.</p>

<p>Returning a <code>std::future&lt;void&gt;</code> is probably a bad idea. The destructor of <code>std::future</code> (when created from <code>std::async</code>) will block execution until the function ends. This would not allow for <em>fire-and-forget</em> calls, the caller has to wait for the function to be called. In a different situation you might use a future like this to return a value from the async function, but you aren't doing that here.</p>

<p>However, <em>not</em> returning it has the same problem, it just moves the waiting into <code>schedule()</code>. What you would need to do is hold a <code>std::vector</code> of <code>std::future&lt;void&gt;</code>s. This would give perspective for what all functions the <code>Timer</code> is juggling and forces the <code>Timer</code>'s destructor to wait for any outstanding functions to finish.</p>

<p>However, that's not a good idea either; the internal list would grow for the life of the <code>Timer</code> with no way to purge completed functions (at least not cleanly). Instead lets look at your source of inspiration: the <code>java.util.Timer</code> documentation says it is:</p>

<blockquote>
  <p>A facility for threads to schedule tasks for future execution in a background thread...</p>
  
  <p>Corresponding to each Timer object is a single background thread that is used to execute all of the timer's tasks, sequentially.</p>
</blockquote>

<p>You should follow their lead. Instead of juggling multiple handles to asynchronous functions, you should have one <code>std::thread</code> ready to do the work, hold a queue of functions-with-times that need to be called (a <code>std::priority_queue</code> perhaps), and probably a <code>std::mutex</code> for synchronize adding and removing stuff from the queue.</p>

<hr>

<p>This detracts from the Java version, but if you want to pass arguments to the function through additional arguments to <code>schedule()</code>, I'd recommend moving the <code>task</code> argument towards the end. This keeps the function call closer to the arguments in the parameter list.</p>

<hr>

<p>You have no mechanism for stopping a periodic function besides stopping the whole timer. The Java version accomplishes this by using a special <code>TimerTask</code> type that serves as a wrapper around a <code>Callable</code> that adds a <code>cancel()</code> function. For C++ however, I'd recommend implementing <em>cancellation tokens</em> that a user can use to stop a periodic function, should they wish to.</p>

<hr>

<p>Your code was very easy to review: good code style, good names, good use of <code>using</code>, good organization</p>
    </div>