<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>const stack = new Array()
</code></pre>

<p>Use the literal notation (<code>[]</code>) instead. Here's <a href="https://stackoverflow.com/q/931872/575527">an answer on Stack Overflow</a> that elaborates why you should do that instead of <code>new Array()</code>.</p>

<pre><code>const duplicate = () =&gt; {
    try {
        const dup = pop();
        push(dup);
        push(dup);            
    } catch(e) {
        throw new Error(e);    
    }
};
</code></pre>

<p>The rule of thumb when it comes to using exceptions is to <em>never use them where you can use an <code>if</code></em>. That is, don't use exceptions as a flow control mechanism. You should only use it if you want to bail out and do no further.</p>

<p>Also, <code>e</code> is already an instance of <code>Error</code>. You only need to do <code>throw e</code>, not <code>throw new Error(e)</code>.</p>

<p>Now if you look closely, all the operations are distinct to each other. They also only operate on the stack only. You can easily implement them as pure functions, taking in the current stack, and returning a new representation of the stack.</p>

<p>For example, <code>duplicate</code> can be implemented as a function that takes an array, and returns a new array, with the last item repeated once more:</p>

<pre><code>const duplicate = stack =&gt;
  stack.length &lt; 1 ? -1 
  : [...stack, stack[stack.length - 1]]
</code></pre>

<p><code>add</code> can be implemented as a function that takes an array, and return an new array which replaces the last two items with their sum:</p>

<pre><code>const add = stack =&gt;
  stack.length &lt; 2 ? -1 
  : [...stack.slice(0, -2), stack[stack.length - 1] + stack[stack.length - 2]]
</code></pre>

<p>Doing it this way makes it easier to implement each operation without having them becoming dependent on some common state object, or each other.</p>

<p>Here's how I would implement it:</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>// Implement each operation as distinct, pure functions.
const push = (stack, v) =&gt; [...stack, v]

const pop = stack =&gt; 
  stack.length &lt; 1 ? -1
  : stack.slice(0, -1)

const duplicate = stack =&gt;
  stack.length &lt; 1 ? -1 
  : [...stack, stack[stack.length - 1]]

const add = stack =&gt;
  stack.length &lt; 2 ? -1 
  : [...stack.slice(0, -2), stack[stack.length - 1] + stack[stack.length - 2]]

const subtract = stack =&gt;
  stack.length &lt; 2 ? -1
  : [...stack.slice(0, -2), stack[stack.length - 1] - stack[stack.length - 2]]

// Map operation tokens to their implementation.
// Should we add more operations, we simply add the implementation and reference
// its token in this map
const operations = {
  'DUP': duplicate,
  'POP': pop,
  '+': add,
  '-': subtract
}

const solution = s =&gt; {

  // For each token, parse and process.
  // You can implement this piece using iteration functions, loops, or even recursion.
  // I'm just more accustomed to reduce because it can carry a value across iterations
  // which, in this case, holds the stack for me.
  const result = s.split(' ').reduce((stack, token) =&gt; {
  
    // If any operation returned -1, we return -1 all the way.
    return stack === -1 ? -1
      // If token is a number, push it to the stack.
      : !isNaN(parseFloat(token)) &amp;&amp; isFinite(token) ? push(stack, Number(token))
      // If token is an operation, apply operation.
      : operations[token.toUpperCase()] ? operations[token.toUpperCase()](stack)
      // Unknown token.
      : -1

  // Our stack as initial reduce value, an empty array.
  }, [])

  // If the result is -1, then so be it. Otherwise, return the top of the stack.
  return result === -1 ? -1 : result[result.length - 1]
}

console.log(solution("3 DUP 5 - -"));
console.log(solution("13 DUP 4 POP 5 DUP + DUP + -"));
console.log(solution("5 6 + -"));</code></pre>
</div>
</div>

    </div>