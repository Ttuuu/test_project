<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><code>user_choice</code> is your <em>main</em> loop, and so it would be better described as <code>main</code>. Whilst fairly undescriptive on what it does you can add a docstring to add information on what it performs.</li>
<li>It is more idiomatic to use loops in Python rather than recursion. This is partly due to the recursion limit, and partially that the iterator pattern has a lot of support in Python.</li>
<li>I've rarely seen <code>'\r'</code> in Python. I don't see why you would need it and so have just removed them.</li>
<li>I like the way that you got a users email. The use of a while loop here is pretty clean.</li>
<li>I would change the prompted text when getting an email as it's different to the rest of the prompts.</li>
<li>I would DRY your do while loop. There's not really a point to having two different <code>input</code> prompts with the above suggestion.</li>
<li><p>Recently I was creating an account using <code>passwd</code> and multiple times I kept messing up <em>the first</em> password entry. It was rather vexing as I knew I messed up and I just had to hope I pressed backspace the correct amount of times to fix my mess up. Unfortunately I wasn't skilled enough to fix my mistake.</p>

<p>However with your solution I would have to quit out of your entire program, removing the data I have already to fix my mistake. You should instead get again the password and the confirmation.</p></li>
<li>There is no point in opening <code>login_data</code> until the user input has been confirmed to be correct. You should try to keep <code>with</code> statements as small as necessary.</li>
<li>I would prefer to build a dictionary or an abstract datatype for the user information.</li>
<li>You can remove one of your <code>login_data.write</code>s by passing <code>i + '\n'</code>.</li>
<li>"Login_Data.txt" seems ok, but it's not great. You can use JSON via <code>import json</code> and make a much easier and standard file type to work with.</li>
<li><p>Your interactions with your globals seem really poor. If you want a global, than I suggest you only have one. This is easy when using dictionaries.</p>

<p>I would also suggest changing your code to have <em>no globals</em>.</p></li>
<li>I would change <code>login_account</code> to align with the above, changed do-while loops, no globals and using JSON.</li>
<li>Since we are using JSON we can easily change the format to display the first and last name easier.</li>
<li>Your solution is in no way safe, it's prone to over the shoulder attacks by not using <a href="https://docs.python.org/3/library/getpass.html" rel="nofollow noreferrer"><code>getpass</code></a> and you're storing passwords in plain-text. This is not safe. Do not use this for anything more than a toy project that will only ever have you entering a password unique to this toy.</li>
</ul>

<pre><code>import json


def main():
    """Create an account or log in."""
    while True:
        print('Hello user, create an account or login to an existing one.')
        choice = input('Insert "1" if you wish to create an account or "2" if you wish to login: ')
        print()
        if choice == '1':
            create_account()
        else:
            login_account()


def input_user_email(emails):
    """Get an unowned email."""
    while True:
        email = input('Email: ')
        if email not in emails:
            return email
        print('That email is already registered.')


def input_user_password():
    """Get a user's email."""
    while True:
        password = input('Password: ')
        confirmation = input('Confirm password: ')
        if password == confirmation:
            return password
        print('The passwords do not match.')


def get_user_information(emails):
    """Get a user's information."""
    return {
        'first_name': input('First Name: '),
        'last_name': input('Last Name: '),
        'email': input_user_email(emails),
        'password': input_user_password(),
    }


def create_account():
    """Create user account."""
    with open('login_data.json', 'w+') as f:
        users = json.load(f)
        emails = {user['email'] for user in users}
        user = get_user_information(emails)
        users.append(user)
        json.dump(users, f)
    print('Nice! Your account was registered.\n')


def login_account():
    """Log into a user account."""
    with open('login_data.json') as f:
        users = json.load(f)
    by_email = {user['email']: user for user in users}

    while True:
        email = input('Email: ')
        if email in by_email:
            user = by_email[email]
            break
        print('Invalid Email')

    while True:
        password = input('Password: ')
        if password == user['password']:
            break
        print('Invalid password')

    print('Hello {0.first_name} {0.last_name}, welcome back!\n'.format(user))


if __name__ == '__main__':
    main()
</code></pre>
    </div>