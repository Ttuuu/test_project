<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Adding to what has already been mentioned by others.</p>

<ol>
<li><p>Since you wish to learn C++, it is alright to implement a stack
class. On the other hand, if you want a stack class for use in a
production project, it would be wiser to simply use the built-in STL
stack class. Humble thyself and reuse :)</p></li>
<li><p>The std namespace</p>

<pre><code>using namespace std;
</code></pre>

<p>You are dumping all the identifiers from the <code>std</code> namespace into your global namespace. This defeats the purpose of having namespaces. Since the only thing that you are using from the <code>std</code> namespace is <code>cout</code>, you can write <code>using std::cout;</code> or <code>std::cout &lt;&lt; "Pushed " &lt;&lt; value &lt;&lt; " on the stack\n";</code> Read <a href="http://www.parashift.com/c++-faq-lite/coding-standards.html#faq-27.5" rel="nofollow">this</a> for more.</p></li>
<li><p>In the <code>Stack</code> class's constructor, prefer initialization lists to assignment. Read more <a href="http://www.parashift.com/c++-faq-lite/ctors.html#faq-10.6" rel="nofollow">here</a>.</p></li>
<li><p>In future, when you go one step forward and start implementing reusable
classes, you would need to start thinking about how another part of
your code (say, another class) can use your <code>Stack</code> class. Currently,
this is not (directly/gracefully/intuitively) possible because the other class can only <em>push</em> data onto
the stack; it cannot retrieve any data since the <code>pop()</code> method does
not return any <code>int</code> data.</p></li>
<li><p>For containers like the stack, you should also (at least) implement
overloaded assignment operator and copy constructor.</p></li>
</ol>
    </div>