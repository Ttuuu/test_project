<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Overall I think the code is pretty good and your use of the more modern features of C++ looks OK.</p>

<p>Still there are some things that could be improved. In no particular order I offer the following suggestions:</p>

<ul>
<li>The idea of a <code>scoped_thread</code> is good (also discussed in Effective
Modern C++ item 37). Even if you want to implement your own
<code>std::thread</code> replacement (for learning purposes or otherwise), I'd
recommend splitting that part out and implementing <code>scoped_thread</code> in
terms of it. That way you can re-use both classes in other contexts.</li>
<li>I'd probably use either the functions from <code>process.h</code> or the raw
Win32 API (i.e. <code>CreateThread</code>) not mix them.</li>
<li>Speaking of Win32 API functions: Just include <code>windows.h</code>, don't
do the declarations on your own.</li>
<li>I realize including <code>windows.h</code> in a header file like this is pollutes
the global namespace, so I'd create wrapper functions like
<code>void native_start_thread(void (*)(void*))</code> etc. and place them in an
accompanying C++ file.</li>
<li>In modern C++ naked calls to <code>delete</code> are a code smell. You should always
have the pointers owned by a <code>std::unique_ptr</code>. Of course you have to
be careful in this case to not double delete objects. What I mean is:
In <code>ThreadFunc</code> hand ownership to a <code>std::unique_ptr</code> and in the
<code>scoped_thread</code> constructor store <code>params</code> in a <code>unique_ptr</code>. Use
<code>get()</code> when creating the thread and then <code>release()</code> when the thread
has been constructed (and thus has taken ownership of the memory).</li>
<li>You should check the return value of <code>WaitForSingleObject</code></li>
<li>The code could use some more comments. For instance I had to look up
whether 0 could be a valid thread id (it can't, but I couldn't
remember that was the case).</li>
<li>I can't see anything wrong with the code in this regard, but I'm not
too fond of thread ownership actually being tied to the thread id.</li>
<li>Again, I don't see any immediate problems, but I'd probably make sure
to null out the thread handle in the moved from thread (to at least aid
in debugging). This would mean using a non-defaulted move-constructor,
and then I'd probably implement it in terms of the move assignment
operator (which then wouldn't/couldn't use placement new, which again
I think works fine, but seems "overkill" here).</li>
</ul>
    </div>