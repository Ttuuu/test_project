<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I took your previous, invalid solution, and amended it so it does work correctly. So in a way, I am still reviewing your code.</p>

<pre><code>function fixedPoint(data)
{
    const lastIndex = data.length - 1;
    if (data[0] &gt; 0 || data[lastIndex] &lt; 0) return -1;
    var left = 0;
    var right = lastIndex - 1;
    while(left &lt;= right) {
        let middle = Math.floor((left + right) / 2);
        if (data[middle] == middle) {
            while(middle &gt; 0 &amp;&amp; data[middle] == middle) middle--;
            return ++middle;
        }
        if (data[middle] &gt; middle) right = middle;
        else if (data[middle] &lt; middle) left = middle;
    }
    return -1;
}
</code></pre>

<p>I prefer calling a function a function here, but that's a personal choice. </p>

<p>This is basically a <em>binary search</em> with a small addition to not trip over arrays like:</p>

<p><code>[-10,-5,0,3,4,5,6,7,8,10]</code>. </p>

<p>This little routine first takes care of 2 edge cases: There is no match when the first value is bigger than zero of when the last value is negative. Then it defines two variables, the <code>left</code> and <code>right</code> indexes, within which the solution should be found, or not. At first these indexes span the whole array. On every iteration of the <code>while</code> loop the searchable section of the array is halved, by either assigning the half-way index <code>middle</code> to the <code>left</code> or the <code>right</code> index based on the value in the array at that half-way location. When a match is found, between the index and the value, it walks backwards if there are more matches before the current one.</p>
    </div>