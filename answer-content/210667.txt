<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The review by trinket has covered most, if not all, of the deficits in the code.</p>

<p>The one elephant left in the room is: does <code>out</code> really need to be built up as a single string, just to be printed?  Could it not be printed line by line, or even per data value, and not waste time on the string concatenation operations?</p>

<p>Another question is where are these 16-bit values coming from?  Are they really entering Python as a <code>list</code> of integers, or perhaps are they coming in as a <code>bytes</code> or <code>bytearray</code> memory buffer type structure?  `Cause we can manipulate those to extract the data easier...</p>

<pre><code>data = bytes(data)         # convert from list of ints into a byte array

mv = memoryview(data)      # convert to a memory view...
mv = mv.cast('H')          # treat every 2-bytes as a 16-bit value
mv = mv[:8*512]            # truncate to the first 512 groups of 8 values
mv = mv[::8]               # slice off the first of every 8 values

# Or as one statement...
mv = memoryview(data).cast('H')[:8*512:8]

# Print out each row of the hexdump:
for i in range(0, len(mv), 16):
   print(" ".join(f"{val:04x}" for val in mv[i:i+16]))

# Or construct the big out string, and print as one unit:
out = "\n".join(" ".join(f"{val:04x}" for val in mv[i:i+16])
                for i in range(0, len(mv), 16)
print(out)
</code></pre>

<p><em>Note</em>: The above assumes a little-endian architecture, so that when <code>cast('H')</code> is performed, the correct values are returned.  If on a big-endian architecture, the code will need to be modified.  See <a href="https://docs.python.org/3/library/sys.html#sys.byteorder" rel="nofollow noreferrer"><code>sys.byteorder</code></a>.</p>
    </div>