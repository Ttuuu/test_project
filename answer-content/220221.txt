<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><em>Disclaimer:</em> I am not an expert in music theory, and english is not my first language. Therefore I may use the wrong terms in the following review.</p>

<h3>Review of your current code</h3>

<p>I/O should be separated from the computation. In your case, the <code>findUpperStructureTriads()</code> function should <em>return</em> something instead of printing it. That makes the function better usable and testable, and increases the clarity of the program.</p>

<p>Also global variables (<code>triadRoots</code> and <code>triadQualities</code>) should be avoided: Calling <code>findUpperStructureTriads()</code> twice will show unexpected results.</p>

<p>The nested loops are better and simpler written as for-loops over (half-open) ranges:</p>

<pre><code>for firstIndex in 0 ..&lt; degs.count {
    for secondIndex in firstIndex+1 ..&lt; degs.count {
        for thirdIndex in secondIndex+1 ..&lt; degs.count {
            // ...
        }
    }
}
</code></pre>

<p>and similarly </p>

<pre><code>for inversionCount in 0 ..&lt; 2 { ... }
</code></pre>

<p>and</p>

<pre><code>for i in 0..&lt;triadRoots.count { ... }
</code></pre>

<p>Note that your version</p>

<blockquote>
<pre><code>for i in 0...(triadRoots.count - 1) { ... }
</code></pre>
</blockquote>

<p>would crash with a “Fatal error: Can't form Range with upperBound &lt; lowerBound” if <code>triadRoots.count</code> is zero.</p>

<p>Use <code>let</code> for variables which are never mutated, e.g.</p>

<pre><code>let threeNoteGroup = [degs[firstIndex], degs[secondIndex], degs[thirdIndex]]
</code></pre>

<p>The default case in <code>checkForTriad()</code> is a case which “should not occur” – unless you made a programming error. To detect such an error early, you can use</p>

<pre><code>default:
    fatalError("Should never come here")
</code></pre>

<p>But actually function can be replaced by a more efficient dictionary lookup:</p>

<pre><code>let qualities: [[Int]: String] = [
    maj : "major",
    min : "minor",
    dim : "diminished",
]

// ...

if let quality = qualities[newGroup] {
    print(threeNoteGroup, threeNoteGroup[inversionCount])
    triadRoots.append(threeNoteGroup[inversionCount])
    triadQualities.append(quality)
    break
}
</code></pre>

<p>Reducing an integer note to an octave can be done with modulo arithmetic:</p>

<pre><code>extension Int {
    var degreeInOctave: Int {
        let mod12 = self % 12
        return mod12 &gt;= 0 ? mod12 : mod12 + 12
    }
}
</code></pre>

<h3>An alternative approach</h3>

<p>Your program tests each subset of three notes of the given degrees, and its three inversions if it is one of the known triads. It may be more efficient to traverse the given list only once and consider each note as the possible root note of each triad. Then you have only to test if the other notes of the triad are in the list or not.</p>

<h3>More structure</h3>

<p>Using <em>types</em> gives the objects we operate on a <em>name,</em> allows to group the functionality with the objects, provide initialization methods, etc.</p>

<p>For example, instead of a plain array of notes (or is it degrees?) we can define a <code>Chord</code> structure:</p>

<pre><code>struct Chord {
    let notes: [Int] // Increasing array of degrees in the range 0...11

    init(notes: [Int]) {
        // Reduce module 12 and sort:
        self.notes = notes.map { $0.degreeInOctave }.sorted()
    }

    func translated(by offset: Int) -&gt; Chord {
        return Chord(notes: notes.map { $0 + offset })
    }
}
</code></pre>

<p>The init method ensures that the numbers are sorted in increasing order and in the proper range. The <code>translated(by:)</code> method computes a new chord by shifting all degrees. More methods can be added later if needed, e.g.</p>

<pre><code>struct Chord {
    mutating func invert() { ... }
}
</code></pre>

<p>for chord inversion.</p>

<p>Triads could be defined as an <em>enumeration:</em> </p>

<pre><code>enum Triad: String, CaseIterable {
    case major
    case minor
    case augmented
    case diminished
    case sus4
    case sus2

    var chord: Chord {
        switch self {
        case .major:      return Chord(notes: [ 0, 4, 7 ])
        case .minor:      return Chord(notes: [ 0, 3, 7 ])
        case .augmented:  return Chord(notes: [ 0, 4, 8 ])
        case .diminished: return Chord(notes: [ 0, 3, 6 ])
        case .sus4:       return Chord(notes: [ 0, 5, 7 ])
        case .sus2:       return Chord(notes: [ 0, 2, 7 ])
        }
    }
}
</code></pre>

<p>Instead of global variables (<code>maj</code>, <code>min</code>, ...) we can now refer to a triad as values of the enumeration, e.g.</p>

<pre><code>let triad = Triad.major
print(triad)            // major
print(triad.chord)      // Chord(notes: [0, 4, 7])
</code></pre>

<p>and with the conformance to <code>CaseIterable</code> we get the list of all triads for free:</p>

<pre><code>for triad in Triad.allCases { ... }
</code></pre>

<p>Finally we need a type for the results, which are triads at a certain position, for example:</p>

<pre><code>struct UpperStructure: CustomStringConvertible {
    let triad: Triad
    let root: Int

    var description: String {
        return "\(root) \(triad.rawValue)"
    }
}
</code></pre>

<p>The <code>description</code> method provides the textual representation of the values, and can be adjusted to your needs.</p>

<p>With these preparations, we can define a function to find all upper structure triads in a given chord. This can be a <em>method</em> of the <code>Chord</code> type instead of a global function, so that we now have</p>

<pre><code>struct Chord {
    let notes: [Int]

    init(notes: [Int]) {
        self.notes = notes.map { $0.degreeInOctave }.sorted()
    }

    func translated(by offset: Int) -&gt; Chord {
        return Chord(notes: notes.map { $0 + offset })
    }

    func upperStructureTriads() -&gt; [UpperStructure] {
        let notesSet = Set(notes)
        var result: [UpperStructure] = []

        for rootNote in notes {
            for triad in Triad.allCases {
                let chordNotes = triad.chord.translated(by: rootNote).notes
                if chordNotes.contains(6) &amp;&amp; chordNotes.contains(9)
                    &amp;&amp; notesSet.isSuperset(of: chordNotes) {
                    result.append(UpperStructure(triad: triad, root: rootNote))
                }
            }
        }

        return result
    }
}
</code></pre>

<p>All possible combinations of root notes and triads are tested, and a <code>Set</code> is used to make the containment test efficient.</p>

<p>Usage example:</p>

<pre><code>let chord = Chord(notes: [0, 2, 4, 6, 7, 9, 10])
let upperStructures = chord.upperStructureTriads()
for us in upperStructures {
    print(us)
}

// 2 major
// 6 diminished
</code></pre>
    </div>