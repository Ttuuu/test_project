<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The short answer:<br>
In your code the <code>arr.length</code> is the major bottleneck. Simply because of the differences between the various implementations of JavaScript. Not only the implementations differ, but also what the engines actually <em>do</em> prior to executing your code.<br>
Why do I think this: simple:</p>

<pre><code>for([[expr evaluated at start of loop]];
    [[expr re-evaluated on each iteration + 1(end of loop)]];
    [[expr evaluated for each iteration +1(end of loop)]]
)
</code></pre>

<p>The cases that are fastest on IE7 are those where the conditional expression in the for-loop is either missing or is simply comparing the values of 2 variables.</p>

<p>The long answer, without focussing on <code>arr.length</code>, but keep in mind that here, you're getting a property of an object, that is, sort-of, inherited from the prototype.</p>

<p>The reason why is simply because of how Chrome's V8 compiles the code, and how the <code>Object[[GetProperty]]</code> is implemented. Since JS arrays are just augmented objects (<code>Array instanceof Object</code> is <code>true</code>), getting a value from an array is, essentially the same as <code>someObj.someProp</code>.<br>
Most JS implementations use either a HashMap or HashTable for the objects. Chrome's V8 engine, is a bit of an odd one out, in a couple of crucial ways.</p>

<p>FF's SpiderMonkey/*Monkey engines compile JS code to intermediate byte-code, that runs on a virtual machine.<br>
Their Rhino engine compiles JS to Java, which is also a VM environment. Cf the hybrid model in the img below<br>
JS <em>"engines"</em> of old didn't even go that far, they were just parse-and-execute things. They did no or very little optimization or reflection on the code they were asked to parse.<br>
<em>V8</em> does things a bit different: it parses, optimizes and compiles the resulting AST (<em>Abstract Syntax Tree</em>) straight into machine-executable code. No byte-code virtual-machine stuff to hold you back:</p>

<p><img src="https://i.stack.imgur.com/jUrHi.jpg" alt="JS engines compilation models"></p>

<p>So, Chrome's V8 compiles to machine code, which cuts down overall execution time (in most cases). In addition to that, the V8 engine does not use a HashTable for object properties. It creates classes:</p>

<blockquote>
  <p>To reduce the time required to access JavaScript properties, V8 does not use dynamic lookup to access properties. Instead, V8 dynamically creates hidden classes behind the scenes.</p>
</blockquote>

<p>What does this mean for <code>arr.length</code>:</p>

<pre><code>//V8:
arr = [];//creates class, that has length property, value 0
arr.push(123);//arr points to class with property 0 = 123, length = 1
</code></pre>

<p>That means that, <code>arr.length</code> or <code>arr[0]</code> both are simple, atomic operations. In terms of time-complexity, they are as close as makes no difference both: <em>O(1)</em>. Now, I'm not familiar with the internals of IE's JScript engine, but I'm prepared to take a punt on how <code>arr.length</code> works:</p>

<pre><code>arr.length;//-&gt;arr @instancelevel-&gt;search(length)
             //
             ==&gt;arr.prototype-&gt;search(length)
                 //
                 ==&gt; magic property, probably does something like:
                     return max(@instance.keys) +1
</code></pre>

<p>Now, this may range anywhere from pretty accurate to down-right absurd, but the principle stands: getting the length property from an array on engines that don't create classes for instances, is not atomic, and therefore slower.<br>
Sadly, because of MS's software being closed source, I can't tell you what kind of AST the parser churns out, nor what the engine then does with that AST. You'll have to get friendly with someone working in Redmond, or send a very polite email, requesting more info (don't expect an answer, though :-P).</p>

<p>So, V8 compiles the AST directly to machine-executable code, and creates classes to speedup property. In theory, accessing a property in JS, running on V8 should be almost as fast as C++ code. In theory, that is :P.<br>
Internet Explorer's JScript engine, especially IE7, is quite dated. It doesn't do optimization very well. It doesn't compile JS as well as modern day engines do.</p>

<p>I can't find the resource ATM, but I also seem to remember that IE's JScript implementation of objects was, in fact, rather lacking, too. I seem to recall it didn't even use a full-blown HashTable for its objects, which would explain why <code>someArray.length</code> takes ages (since it requires a prototype lookup).</p>

<p><a href="https://developers.google.com/v8/design?hl=sv&amp;csw=1#prop_access" rel="nofollow noreferrer">Read more here</a>.</p>
    </div>