<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I see three problems with this function:</p>

<ul>
<li>Why calculate the values up to <code>len(p)</code>, when you are actually interested in <code>p[n]</code> (which may be larger or smaller than <code>len(p)</code>)? In the case of <code>n &gt; len(p)</code> your code actually raises an exception (and it seems not to be excluded by the rules, but also not to be checked by the online judge).</li>
<li>This is not really using memoization, since you calculate everything again whenever the function is called.</li>
<li>You mutate <code>p</code>, which might lead to unexpected results (in general), although here it happens to work out fine.</li>
</ul>

<p>The second (and third) problem are not so easy to fix (probably only by memoizing all different <code>p</code> ever seen and for each of them the maximum <code>n</code> used). Also the online judge may or may not use the same <code>p</code> again.</p>

<p>The first one however is an easy fix:</p>

<pre><code>def cut_log(p, n):
    for i in range(2, n + 1):
        p[i] = max(p[i-k] + p[k] for k in range((i//2)+1))
    return p[n]
</code></pre>
    </div>