<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I have mainly two things I'd like to look at:</p>

<p>I'm not a big of fan of the constant deconstructing and recreating of <code>Set</code>s in the loop, especially since this most likely has negative impact on the performance. Unfortunately because there is not direct way to add multiple values to a <code>Set</code> there is no functional "one line" solution. My function to do this would look like this:</p>

<pre><code>const addToAfter = (key, values) =&gt; {
    const set = after[key] || (after[key] = new Set());
    values.forEach(a =&gt; set.add(a));
};
</code></pre>

<p>which changes the loop to </p>

<pre><code>for (let triplet of triplets) {
    addToAfter(triplet[0], triplet.slice(1));
    addToAfter(triplet[1], [triplet[2]]);
    addToAfter(triplet[2], []);
}
</code></pre>

<p>This leads to my second point: the obvious code repetition. I don't think there is a reason not to use another loop here, which also has the "advantage", that you don't need to limit yourself to "triplets", but support arrays of any length:</p>

<pre><code>for (let triplet of triplets) {
    for (let i = 0, len = triplet.length; i &lt; len; i++) {
        addToAfter(triplet[i], triplet.slice(i + 1));  
    }
}
</code></pre>

<p>If performance is important, I'd even consider getting rid of the <code>.slice</code> call and replace it with a loop, that adds the characters directly to the <code>Set</code>.</p>

<p>In general: I'm avoiding the "modern" functional way, because it (at least in this case) leads to slightly cryptic syntax (and thus unread code) and a lot of (slow) memory reallocation and data copying. </p>
    </div>