<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The method does two different things and thus should be split in two:</p>

<ol>
<li><p>Interpret a hex string as a sequence of bytes. You can find many possible implementations at <a href="https://stackoverflow.com/questions/311165/how-do-you-convert-byte-array-to-hexadecimal-string-and-vice-versa">How do you convert Byte Array to Hexadecimal String, and vice versa?</a>.</p>

<p>Yours has quadratic runtime (due to the string concatenation pattern RobH noted) and creates a new string object for each byte.</p>

<p>Keeping it similar to yours, but reducing it to linear runtime:</p>

<pre><code>public static byte[] HexStringToBytes(string hexString)
{
    if(hexString == null)
        throw new ArgumentNullException("hexString");
    if(hexString.Length % 2 != 0)
        throw new ArgumentException("hexString must have an even length", "hexString");
    var bytes = new byte[hexString.Length / 2];
    for (int i = 0; i &lt; bytes.Length; i++)
    {
        string currentHex = hexString.Substring(i * 2, 2);
        bytes[i] = Convert.ToByte(currentHex, 16);
    }
    return bytes;
}
</code></pre>

<p>This code is still relatively slow, creating a new substring for each byte and using <code>Convert.ToByte</code>, but I'd only complicate that after benchmarking revealed this as relevant cost.</p></li>
<li><p>Interpret the sequence of bytes as an ISO-8859-1 encoded string. This is equivalent to your code, since the first 256 code-points in Unicode match the ISO-8859-1 single-byte encoding.</p>

<p>I'd use:</p>

<pre><code>Encoding.GetEncoding("ISO-8859-1").GetString(bytes)
</code></pre>

<p>You should consider using UTF-8 instead, so you can support any Unicode code-point and not just those common in western Europe.</p></li>
</ol>
    </div>