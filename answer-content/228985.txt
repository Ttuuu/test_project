<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>/* Asks the user for string input.
 * Returns a pointer to the string entered by the user.
 * The pointer must be freed.
 */
</code></pre>
</blockquote>

<p>Slightly misleading in that this function doesn't <em>ask</em> for input. (As written it is not responsible for printing the prompt.)</p>

<p>Perhaps also should clarify the intended behavior:</p>

<ul>
<li>If there is input that is not terminated by a newline, is that string returned?</li>
<li>When input is terminated with a newline, is the newline preserved in the returned string?</li>
</ul>

<blockquote>
<pre><code>char* input()
{
    char *s = malloc(sizeof(char));  /* For the null character */
</code></pre>
</blockquote>

<p>In C, <code>char</code> <em>by definition</em> is 1 byte. <code>sizeof (char)</code> is unnecessary and adds visual noise.</p>

<blockquote>
<pre><code>    if (s == NULL) {
        fprintf(stderr, "Error: malloc\n");
        exit(1);
</code></pre>
</blockquote>

<p>It's usually considered poor behavior if calling a library function causes the entire program to terminate.  You should return an error value (e.g. <code>NULL</code>) and leave that decision up to the caller.</p>

<blockquote>
<pre><code>    }
    s[0] = '\0';

    /* Read characters one by one */
    char ch;
</code></pre>
</blockquote>

<p><code>ch</code> must be an <code>int</code>.  <code>getchar</code> returns an <code>int</code> precisely so that it can return a value outside the range of <code>char</code> (technically <code>unsigned char</code>) to indicate failure (i.e., the <code>EOF</code> value).  Otherwise you would not be able to distinguish <code>EOF</code> from a legitimate byte value.</p>

<blockquote>
<pre><code>    size_t s_len = 0;
    while((ch = (char) getchar()) != '\n') {
        if (ch == EOF) {
</code></pre>
</blockquote>

<p>It's more idiomatic to check for <code>EOF</code> in the loop condition and then check for character values inside the loop body:</p>

<pre><code>int ch;
while ((ch = getchar()) != EOF) {
    if (ch == '\n') {
        ...
</code></pre>

<p>Checking for <code>EOF</code> in the loop condition allows you to safely truncate <code>ch</code> to <code>char</code> throughout the entire loop body, which makes it a bit easier to reason about.</p>

<blockquote>
<pre><code>            exit(0);
</code></pre>
</blockquote>

<p>Same thing here about terminating the program.  It's especially weird here since this exits with a <em>success</em> code and doesn't return the string to the caller.</p>

<blockquote>
<pre><code>        }
        s_len++;
        s = realloc(s, (s_len * sizeof(char)) + sizeof(char));
</code></pre>
</blockquote>

<p>Never do <code>x = realloc(x, ...)</code>.  If <code>realloc</code> fails and returns <code>NULL</code>, you will have lost the old value of <code>x</code> and will be unable to free it, resulting in a memory leak.  You instead should use a temporary variable:</p>

<pre><code>char* newBuffer = realloc(s, ...);
if (newBuffer == NULL) {
  ...
}
s = newBuffer;
</code></pre>

<p>Again, <code>sizeof (char)</code> is noise.  You additionally should generally avoid <code>sizeof (Type)</code>; it's not robust if the types change since you would need to edit more places (and neglecting to do so could lead to <em>silent</em> buffer overflows and introduce security vulnerabilities).  It's better to use <code>sizeof expression</code> where <em>expression</em> is based on the corresponding <em>variable</em>.  For example, if you want the code to be robust if the type of <code>s</code> changes (e.g. if you wanted to adapt the code to support <code>wchar_t</code>), you should do:</p>

<pre><code>char* newBuffer = realloc(s, (s_len + 1 /* NUL */) * sizeof *s);
...
</code></pre>

<p>Finally, calling <code>realloc</code> for <em>every</em> byte read is grossly inefficient.  A better approach is to maintain a buffer where you keep track of its allocated size and to grow it exponentially (e.g. doubling in size) whenever you need more space.</p>

<blockquote>
<pre><code>        if (s == NULL) {
            fprintf(stderr, "Error: realloc\n");
            exit(1);
</code></pre>
</blockquote>

<p>Same thing about terminating the program.  Also should do <code>free(s);</code> along this path.</p>

<blockquote>
<pre><code>int main()
{
    printf("Name: ");
</code></pre>
</blockquote>

<p>I/O is normally buffered.  You should call <code>fflush(stdout)</code> afterward to ensure that the prompt is printed to the screen before waiting for input.</p>
    </div>