<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>The docstring is wrong. <code>findOrder</code> returns a list, not a boolean.</p></li>
<li><p>Few inefficiencies:</p>

<ul>
<li><p>The cycle checking implementation is way suboptimal. The algorithm terminates successfully if <em>every</em> node lands in <code>L</code>. It is enough to test that <code>len(L) = len(in_degrees)</code>. No need to loop.</p></li>
<li><p>You don't need <code>Q</code>. You may work directly with <code>L</code>. Less memory, and less copying. Admittedly, the resulting code may look a bit scary (list is modified while being iterated on), but <code>append</code> appears to be safe. You may find <a href="https://stackoverflow.com/a/48604036/3403834">this discussion</a> interesting.</p></li>
</ul></li>
<li><p><code>[i for i in range(len(in_degrees)) if in_degrees[i]==0]</code> doesn't look Pythonic. Consider</p>

<pre><code>    [i for i, n in enumerate(in_degrees) if n == 0]
</code></pre></li>
<li><p>To my taste, the code is commented too much.</p></li>
</ul>

<p><strike> - Nitpick. Strictly speaking, the problem statement doesn't guarantee that the courses IDs are dense. A schedule may look like <code>3, [[100, 200], [200, 300]]</code>. In such case case <code>graph[v].append(u)</code> will raise an <code>IndexError</code>. Consider a dictionary instead of a list as a graph representation.</strike></p>
    </div>