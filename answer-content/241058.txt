<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>The variable names in <code>change_char_at</code> are terrible. <code>s</code> for the string, <code>ch</code> for the char? <code>i</code> for the start? <code>j</code> for the end.</p>

<p>Seriously just write out names.</p>

<pre class="lang-py prettyprint-override"><code>def change_char_at(string: str, change: str, start: int, end: int = None):
    return string[:start] + change + string[end or start+1:]
</code></pre></li>
<li><p>Your code isn't fully typed:</p>

<ul>
<li><code>change_char_at</code> has no return type.</li>
<li><code>end</code> in <code>change_char_at</code> and <code>wait</code> in <code>loader_with_wait</code> are assumed to be <code>Optional</code> but not specified to be optional.</li>
<li><code>loader</code> and <code>loader_with_wait</code> have no return types should they be <code>None</code> or <code>NoReturn</code>?</li>
</ul></li>
<li><p>The functionallity of <code>change_char_at</code> can be eclipsed by <a href="https://docs.python.org/3/library/string.html#format-string-syntax" rel="nofollow noreferrer">the format mini-language</a>.</p>

<ol>
<li><p>You have a standard structure where the bar is surrounded by <code>[]</code> and filled with the contents.</p>

<pre class="lang-py prettyprint-override"><code>bar = '[{}]'
</code></pre></li>
<li><p>The content of your bar is left aligned by width.</p>

<pre class="lang-py prettyprint-override"><code>bar = '[{: &lt;{width}}]'
</code></pre></li>
<li><p>Each iteration you increase the left hand space by 1.</p>

<pre class="lang-py prettyprint-override"><code>bar.format(' ' * i + '=' * bar_width, width=width)
</code></pre></li>
</ol></li>
<li><p><code>bar_width</code> doesn't actually change the size of the bar.</p></li>
<li>I would prefer the progress bar to be a generator function or list, so the rest of your code is simpler.</li>
</ul>

<pre class="lang-py prettyprint-override"><code>import itertools


def progress_bar(width: int = 20, bar_width: int = 3):
    bar = f'[{{: &lt;{width}}}]'
    for i in itertools.chain(
        range(0, width - bar_width + 1),
        reversed(range(0, width - bar_width)),
    ):
        yield bar.format(' ' * i + '=' * bar_width)
</code></pre>
    </div>