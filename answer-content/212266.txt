<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here's a revised version. I have added <a href="https://en.wikipedia.org/wiki/Package-merge_algorithm" rel="nofollow noreferrer">Package Merge</a> code to handle the situation where the bit limit is exceeded ( rather than returning failure ). I have implemented many of Maxim's suggestions but not all. </p>

<p>On spacing I don't agree yet, but I will think about it. I use a leading <code>_</code> for private fields only when there is a property clash. I prefer to stick to the earliest versions of C# unless there is a strong reason not to, so I don't use var or the =&gt; notation for properties. </p>

<p>This is an internal struct, so although it could check arguments, I think it's not essential, this is also why there are public fields. The weird names such as <code>bl_count</code> are from <a href="https://www.ietf.org/rfc/rfc1951.txt" rel="nofollow noreferrer">RFC 1951</a>, I considered changing them, but I feel it makes it easier to compare my code with the standard.</p>

<pre><code>struct HuffmanCoding // Variable length coding.
{
  public ushort Count; // Number of used symbols.
  public byte [] Bits; // Number of bits used to encode a symbol ( code length ).
  public ushort [] Codes; // Huffman code for a symbol ( bit 0 is most significant ).
  public int [] Used; // Count of how many times a symbol is used in the block being encoded.

  private int Limit; // Limit on code length ( 15 or 7 for RFC 1951 ).
  private ushort [] Left, Right; // Tree storage.

  public HuffmanCoding( int limit, ushort symbols )
  {
    Limit = limit;
    Count = symbols;
    Bits = new byte[ symbols ];
    Codes = new ushort[ symbols ];
    Used = new int[ symbols ];
    Left = new ushort[ symbols ];
    Right = new ushort[ symbols ];
  }

  public int Total()
  {
    int result = 0;
    for ( int i = 0; i &lt; Count; i += 1 ) 
      result += Used[i] * Bits[i];
    return result;
  }

  public void ComputeCodes()
  {
    // Tree nodes are encoded in a ulong using 16 bits for the id, 8 bits for the tree depth, 32 bits for Used.
    const int IdBits = 16, DepthBits = 8, UsedBits = 32;
    const uint IdMask = ( 1u &lt;&lt; IdBits ) - 1;
    const uint DepthOne = 1u &lt;&lt; IdBits;
    const uint DepthMask = ( ( 1u &lt;&lt; DepthBits ) - 1 ) &lt;&lt; IdBits;
    const ulong UsedMask = ( ( 1ul &lt;&lt; UsedBits ) - 1 ) &lt;&lt; ( IdBits + DepthBits );

    // First compute the number of bits to encode each symbol (Bits).
    UlongHeap heap = new UlongHeap( Count );

    for ( ushort i = 0; i &lt; Count; i += 1 )
    {
      int used = Used[ i ];
      if ( used &gt; 0 )
        heap.Insert( ( (ulong)used &lt;&lt; ( IdBits + DepthBits ) ) | i );
    }

    int maxBits = 0;

    if ( heap.Count == 1 )
    { 
      GetBits( unchecked( (ushort) heap.Remove() ), 1 );
      maxBits = 1;
    }
    else if ( heap.Count &gt; 1 ) unchecked
    {
      ulong treeNode = Count;

      do // Keep pairing the lowest frequency TreeNodes.
      {
        ulong left = heap.Remove(); 
        Left[ treeNode - Count ] = (ushort) left;

        ulong right = heap.Remove(); 
        Right[ treeNode - Count ] = (ushort) right;

        // Extract depth of left and right nodes ( still shifted though ).
        uint depthLeft = (uint)left &amp; DepthMask, depthRight = (uint)right &amp; DepthMask; 

        // New node depth is 1 + larger of depthLeft and depthRight.
        uint depth = ( depthLeft &gt; depthRight ? depthLeft : depthRight ) + DepthOne;

        heap.Insert( ( ( left + right ) &amp; UsedMask ) | depth | treeNode );

        treeNode += 1;
      }  while ( heap.Count &gt; 1 );

      uint root = ( (uint) heap.Remove() ) &amp; ( DepthMask | IdMask );
      maxBits = (int)( root &gt;&gt; IdBits );
      if ( maxBits &lt;= Limit )
        GetBits( (ushort)root, 0 );
      else
      {
        maxBits = Limit;
        PackageMerge();
      }
    }

    // Computation of code lengths (Bits) is complete.
    // Now compute Codes, code below is from RFC 1951 page 7.

    int [] bl_count = new int[ maxBits + 1 ];
    for ( int i = 0; i &lt; Count; i += 1 ) 
      bl_count[ Bits[ i ] ] += 1; 

    int [] next_code = new int[ maxBits + 1 ];
    int code = 0; bl_count[ 0 ] = 0;
    for ( int i = 0; i &lt; maxBits; i += 1 ) 
    {
      code = ( code + bl_count[ i ] ) &lt;&lt; 1;
      next_code[ i + 1 ] = code;
    }

    for ( int i = 0; i &lt; Count; i += 1 ) 
    {
      int length = Bits[ i ];
      if ( length != 0 ) 
      {
        Codes[ i ] = (ushort) Reverse( next_code[ length ], length );
        next_code[ length ] += 1;
      }
    }

    // Reduce Count if there are unused symbols.
    while ( Count &gt; 0 &amp;&amp; Bits[ Count - 1 ] == 0 ) Count -= 1;

    // System.Console.WriteLine( "HuffmanCoding.ComputeCodes" );
    //   for ( int i = 0; i &lt; Count; i += 1 ) if ( Bits[ i ] &gt; 0 )
    //     System.Console.WriteLine( "symbol=" + i + " len=" + Bits[ i ] + " code=" + Codes[ i ].ToString("X") + " used=" + Used[ i ] );

  }

  private void GetBits( ushort treeNode, int length )
  {
    if ( treeNode &lt; Count ) // treeNode is a leaf.
    {
      Bits[ treeNode ] = (byte)length;
    }
    else 
    {
      treeNode -= Count;
      length += 1;
      GetBits( Left[ treeNode ], length );
      GetBits( Right[ treeNode ], length );
    }
  }

  private static int Reverse( int x, int bits )
  // Reverse a string of bits ( ready to be output as Huffman code ).
  { 
    int result = 0; 
    for ( int i = 0; i &lt; bits; i += 1 ) 
    {
      result &lt;&lt;= 1; 
      result |= x &amp; 1; 
      x &gt;&gt;= 1; 
    } 
    return result; 
  } 

  // PackageMerge is used if the Limit code length limit is reached.
  // The result is technically not a Huffman code in this case ( due to the imposed limit ).
  // See https://en.wikipedia.org/wiki/Package-merge_algorithm for a description of the algorithm.

  private void PackageMerge()
  {
    // Tree nodes are encoded in a ulong using 16 bits for the id, 32 bits for Used.
    const int IdBits = 16, UsedBits = 32;
    const ulong UsedMask = ( ( 1ul &lt;&lt; UsedBits ) - 1 ) &lt;&lt; IdBits;

    Left = new ushort[ Count * Limit ];
    Right = new ushort[ Count * Limit ];

    // Fisrt sort using Heapsort.
    UlongHeap heap = new UlongHeap( Count );
    for ( uint i = 0; i &lt; Count; i += 1 ) 
    {
      if ( Used[ i ] != 0 ) 
      {
        heap.Insert( (ulong)Used[ i ] &lt;&lt; IdBits | i );
      }
    }
    int n = heap.Count; 
    ulong [] sorted = new ulong[ n ];
    for ( int i = 0; i &lt; n; i += 1 ) sorted[ i ] = heap.Remove();

    // List class is from System.Collections.Generic.
    List&lt;ulong&gt; merged = new List&lt;ulong&gt;( Count ), 
                next = new List&lt;ulong&gt;( Count );

    uint package = (uint) Count; // Allocator for package ids.

    for ( int i = 0; i &lt; Limit; i += 1 ) 
    {
      int j = 0, k = 0; // Indexes into the lists being merged.
      next.Clear();
      for ( int total = ( sorted.Length + merged.Count ) / 2; total &gt; 0; total -= 1 )  
      {
        ulong left, right; // The tree nodes to be packaged.

        if ( k &lt; merged.Count )
        {
          left = merged[ k ];
          if ( j &lt; sorted.Length )
          {
            ulong sj = sorted[ j ];
            if ( left &lt; sj ) k += 1;
            else { left = sj; j += 1; }
          }
          else k += 1;
        }
        else left = sorted[ j++ ];

        if ( k &lt; merged.Count )
        {
          right = merged[ k ];
          if ( j &lt; sorted.Length )
          {
            ulong sj = sorted[ j ];
            if ( right &lt; sj ) k += 1;
            else { right = sj; j += 1; }
          }
          else k += 1;
        }
        else right = sorted[ j++ ];

        Left[ package ] = unchecked( (ushort) left );
        Right[ package ] = unchecked( (ushort) right );
        next.Add( ( left + right ) &amp; UsedMask | package );        
        package += 1;
      }

      // Swap merged and next.
      List&lt;ulong&gt; tmp = merged; merged = next; next = tmp;
    }

    for ( int i = 0; i &lt; merged.Count; i += 1 )
      MergeGetBits( unchecked( (ushort) merged[i] ) );
  }

  private void MergeGetBits( ushort node )
  {
    if ( node &lt; Count )
      Bits[ node ] += 1;
    else
    {
      MergeGetBits( Left[ node ] );
      MergeGetBits( Right[ node ] );
    }
  }

} // end struct HuffmanCoding


// ******************************************************************************


struct UlongHeap // An array organised so the smallest element can be efficiently removed.
{
  public int Count { get{ return _Count; } }
  private int _Count;
  private ulong [] Array;

  public UlongHeap ( int capacity )
  {
    _Count = 0;
    Array = new ulong[ capacity ];
  }

  public void Insert( ulong e )
  {
    int j = _Count++;
    while ( j &gt; 0 )
    {
      int p = ( j - 1 ) &gt;&gt; 1; // Index of parent.
      ulong pe = Array[ p ];
      if ( e &gt;= pe ) break;
      Array[ j ] = pe; // Demote parent.
      j = p;
    }    
    Array[ j ] = e;
  }

  public ulong Remove() // Returns the smallest element.
  {
    ulong result = Array[ 0 ];
    _Count -= 1;
    ulong e = Array[ _Count ];
    int j = 0;
    while ( true )
    {
      int c = ( j + j ) + 1; if ( c &gt;= _Count ) break;
      ulong ce = Array[ c ];
      if ( c + 1 &lt; _Count )
      {
        ulong ce2 = Array[ c + 1 ];
        if ( ce2 &lt; ce ) { c += 1; ce = ce2; }
      } 
      if ( ce &gt;= e ) break;
      Array[ j ] = ce; j = c;  
    }
    Array[ j ] = e;
    return result;
  }

} // end struct UlongHeap
</code></pre>
    </div>