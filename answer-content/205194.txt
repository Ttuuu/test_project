<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As @vnp says, a solution involving an <a href="https://en.wikipedia.org/wiki/Octree" rel="nofollow noreferrer">octree</a> would a more efficient way to find neighboring points.</p>

<p>Before you implement one, though, there are some huge time savings you can get by making some trivial changes:</p>

<ul>
<li>Computing square roots is computationally intensive.  Do it only when you need to.</li>
<li>Parsing hex values into integers is somewhat slow, especially when you do it using a lot of string and array operations.  It would be more efficient to parse the entire 6-hex-digit string into an integer, then use bit manipulation.</li>
<li>The same goes for generating random colors.  I don't know why you used <code>rand(254)</code> rather than <code>rand(256)</code>.  If you allow color components <code>FE</code> and <code>FF</code>, then it becomes a simple matter of generating a 24-bit random number, and formatting it as hex.  (Better yet, avoid converting the colors into their hex representation altogether, and just store them as integers.)</li>
</ul>

<p>In addition, <code>1.upto(10000) { color_list &lt;&lt; random_color }</code> is poor Ruby style.  Write it using <code>.map</code> instead (like you did in the implementation of <code>random_colors</code>).</p>

<p>I don't know why you wrote <code>results[t] ||= []</code> instead of <code>results[t] = []</code>.</p>

<p>With just those changes, I'm able to reduce the execution time by 90% already.</p>

<pre><code>def color_dist_sq(c1, c2)
  c1 = c1.to_i(16)
  c2 = c2.to_i(16)
  [0, 8, 16].map do |bits|
    ((c1 &gt;&gt; bits &amp; 0xff) - (c2 &gt;&gt; bits &amp; 0xff)) ** 2
  end.inject(:+)
end

def random_color
  '%06x' % rand(1 &lt;&lt; 24)
end

TARGET_DISTANCE_SQ = 10**2
color_list = 10000.times.map { random_color }
target_colors = 100.times.map { random_color }

results = {}
target_colors.each do |t|
  results[t] = color_list.inject([]) do |result, c|
    dist_sq = color_dist_sq(c, t)
    result &lt;&lt; [c, Math.sqrt(dist_sq)] if dist_sq &lt;= TARGET_DISTANCE_SQ
    result
  end
end
</code></pre>
    </div>