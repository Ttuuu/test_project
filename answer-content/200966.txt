<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Instead of trying to get a performance increase with a <em>faster</em> solution let's review your program and try to make it a <em>solid</em> one.</p>

<h3>The variables</h3>

<pre><code>var current_prime int
var prime bool
current_prime = 0
</code></pre>

<p>Check this example:</p>

<pre><code>var a int = 0 // 0
var b int     // default int value is 0, similar to above
var c = 0     // type is int, similar to above
d := 0        // same
</code></pre>

<p>The latter is short and nice, I suggest you to stick to it. <code>var</code> notation is required in package block (globals), when explicit type is needed and to overcome variable shading.</p>

<p>You've declared the prime variable, but is first used only within the outer loop, so declare it there. Try to introduce new variables first time you need them.</p>

<h3>The outer loop</h3>

<pre><code>for {
    // ...
}
</code></pre>

<p>Your for loop is infinite since there is no loop condition or a break statement. The current_prime will <a href="https://golang.org/ref/spec#Integer_overflow" rel="nofollow noreferrer">overflow</a> and you'll start printing the same/wrong numbers.</p>

<p>As pointed by peterSO, the first prime number is 2, so we can start with it.</p>

<pre><code>for current_prime := 2; i &gt; 0; i++ {
    // ...
}
</code></pre>

<p>When overflow occurs the loop condition will be falsy and the loop will terminate.</p>

<p>To take it further it is better not to expect <code>int</code> overflow and use MaxInt* constants from <a href="https://golang.org/pkg/math/" rel="nofollow noreferrer">math package</a>. Apart from guaranteed proper <code>uint</code> overflow there is nothing solid about <code>int</code>, so it is better not to abuse its behavior.</p>

<h3>The inner loop</h3>

<pre><code>for i := 2; i &lt; current_prime; i++ {
    if current_prime % i == 0 {
        prime = false
        i = current_prime
    }
}
</code></pre>

<p>It took me a while to understand the purpose of <code>i = current_prime</code> line. No. This is not nice, use <code>break</code> to end the loop.</p>

<p>This one is <em>much cleaner</em> to me:</p>

<pre><code>for i := 2; i &lt; current_prime; i++ {
    if current_prime % i == 0 {
        prime = false
        break
    }
}
</code></pre>

<p>Let's take it further. After the inner loop you test the prime variable and print the current_prime number. So when you get <code>current_prime % i == 0</code> as true you already know current_prime is not a prime number and you need to continue <em>the outer</em> loop. For such purpose Golang has labels that perfectly solve the task:</p>

<pre><code>outer:
    for prime := 2; prime &gt; 0; prime++ {
        for i := 2; i &lt; prime; i++ {
            if prime % i == 0 {
                continue outer
            }
        }
        fmt.Println(prime)
    }
</code></pre>

<p>A <code>continue outer</code> statement will break the inner loop and continue the outer one.
When you place a label one line before the loop you may break and continue right to it. It helps escaping nested loops a lot.</p>

<p>Finally lets choose the appropriate types for our task. Since we don't need the signed numbers we can use <code>uint</code> instead of <code>int</code>. Better, lets use <code>uint64</code> directly to guaranty the maximum available type. The nice thing about unsigned numbers is that Golang guarantees that they will overflow properly so we can check for zero value to terminate the loop.</p>

<h3>Example rewrite</h3>

<p>Here follows a possible rewrite of your original program:</p>

<pre><code>package main

import "fmt"

func main() {

outer:
    for prime := uint64(2); prime &gt; 0; prime++ {
        for i := uint64(2); i &lt; prime; i++ {
            if prime % i == 0 {
                continue outer
            }
        }
        fmt.Println(prime)
    }
}
</code></pre>

<p>Things accomplished:</p>

<ul>
<li>proper types are used</li>
<li>overflow is handled</li>
<li>no hacks</li>
</ul>
    </div>