<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The last component looks quite complicated. I think some refactoring would help with readability but I have no concrete suggestions since I don't really understand what it's doing. Like this here <code>this.state.remove[this.module]</code>.
in the comments
I wrote some advice in the comments. Hopefully it's understandable. I mention direct state mutations a couple of times. You can find <a href="https://jkettmann.com/how-to-accidentally-mutate-state-and-why-not-to/" rel="nofollow noreferrer">more information here</a>. </p>

<p>configForm.js</p>

<pre class="lang-js prettyprint-override"><code>export default class ConfigForm extends React.Component {
  // binding dispatch is not necessary since you use an arrow function
  // thus the constructor is not required anymore
  state = configuration

  // too me calling this function dispatch and having an action of type string
  // is confusing. The dispatch keyword is somewhat occupied by useReducer or Redux
  dispatch = (state, parentKey, action) =&gt; {
    switch (action) {
      case 'save':
        if (parentKey != '') {
          // this is doing nothing, just assigning the state to another variable
          // not to confuse with creating a new object
          // additionally this looks like a syntax error since newState is not defined (var missing?)
          newState = this.state
          // here you're changing the state object directly which is not recommended
          // see my blog post below
          newState[parentKey][Object.keys(state)[0]] = state
          this.setState(newState)
          // rather use else statement for readability IMO
          return
        }
        // see above, rather use else IMO
        this.setState(state)
        // use break instead
        return
      case 'remove':
        var newState = this.state

        if (parentKey != '') {
          // again mutating state directly
          delete newState[parentKey][Object.keys(state)[0]]

          this.setState(newState)
          // again else statement instead
          return
        }

        // again mutating state directly
        delete newState[Object.keys(state)[0]]

        //also will be written to file
        this.setState(newState)
        return
    }
  }

  render() {
    let { cameras = {}, ...modules } = this.state
    let list = [
      &lt;FieldsetList
        key={0}
        dispatch={this.dispatch}
        parentKey="cameras"
        modules={cameras}
      /&gt;,
      &lt;FieldsetList
        key={1}
        dispatch={this.dispatch}
        parentKey=""
        modules={modules}
      /&gt;
    ]
    // you're not iterating over this array so I would suggest
    // to use a fragment &lt;&gt;...your FieldsetLists&lt;/&gt;
    return list
  }
}
</code></pre>

<p>refactored fieldsetList.js</p>

<pre class="lang-js prettyprint-override"><code>import React from 'react'
import PropTypes from 'prop-types'
import Fieldset from './fieldset.js'

const FieldsetList = props =&gt; (
  &lt;div&gt;
    {
      // map already returns an array, no need for push
      Object.keys(props.modules).map(key =&gt; (
        &lt;Fieldset
          key={key}
          moduleName={key}
          parentKey={props.parentKey}
          dispatch={props.dispatch}
          module={props.modules[key]}
        /&gt;
      ))
    }
  &lt;/div&gt;
)

FieldsetList.propTypes = {
  parentKey: PropTypes.string,
  dispatch: PropTypes.func,
  modules: PropTypes.object
}

export default FieldsetList
</code></pre>

<p>fieldSet.js</p>

<pre class="lang-js prettyprint-override"><code>import React from 'react'
import PropTypes from 'prop-types'
import { Input, Button, Dropdown } from 'semantic-ui-react'

export default class Fieldset extends React.Component {
  // constructor can be removed again
  constructor(props) {
    super(props)

    // not sure why you use the class variable here
    // in most cases this is a code smell IMO
    this.module = this.props.moduleName

    this.state = {
      [this.props.moduleName]: this.props.module,
      ctrls: {
        fieldsetDisabled: true,
        fieldsetBtn: 'edit',
        // I don't think you should have a function inside the state
        // especially one that's practically not doing anything
        fieldsetBtnHandler: () =&gt; {
          this.edit()
        },
        hideCancelBtn: true,
        dropDownDisabled: true
      },
      dropdownOptions: [],
      remove: {}
    }


    this.baseState = {}

    // again not needed since you use arrow functions
    this.inputChange = this.inputChange.bind(this)
    this.edit = this.edit.bind(this)
    this.remove = this.remove.bind(this)
    this.save = this.save.bind(this)
    this.cancel = this.cancel.bind(this)
  }

  // componentDidMount is not async
  async componentDidMount() {
    // setState doesn't return a promise so you should use await on it
    // if you need to do something as soon as the state is updated
    // use the setState callback parameter (the second I think) 
    await this.setState({
      dropdownOptions: [
        {
          key: 0,
          text: '/dev/video11',
          value: '/dev/video11'
        },
        {
          key: 1,
          text: '/dev/video12',
          value: '/dev/video12'
        },
        {
          key: 2,
          text: '/dev/video13',
          value: '/dev/video13'
        }
      ],
      remove: {
        USB_Camera_1: true,
        USB_Camera_2: true,
        pir: true,
        light_sensor: true,
        server: false,
        disk_monitor: false
      }
    })

    // not sure why you do this but it smells
    this.baseState = this.state
  }

  inputChange = e =&gt; {
    let field = e.currentTarget.name
    let value = e.currentTarget.value

    // this looks fine form a mutation perspective
    this.setState(prevState =&gt; ({
      // why not just use this.props.moduleName
      [this.module]: {
        ...prevState[this.module],
        [field]: value
      }
    }))
  }

  edit = () =&gt; {
    this.setState({
      ctrls: {
        fieldsetBtn: 'save',
        // again functions in state seem odd
        fieldsetBtnHandler: () =&gt; {
          this.save()
        },
        cancelBtnHandler: () =&gt; {
          this.cancel()
        },
        removeBtnHandler: () =&gt; {
          this.remove()
        },
        fieldsetDisabled: false,
        hideCancelBtn: false,
        dropDownDisabled: false
      }
    })
  }

  save = () =&gt; {
    // again setState is not returning a promise
    (async () =&gt; {
      await this.setState({
        ctrls: {
          fieldsetBtn: 'edit',
          fieldsetBtnHandler: () =&gt; {
            this.edit()
          },
          fieldsetDisabled: true,
          hideCancelBtn: true,
          dropDownDisabled: true
        }
      })

      this.baseState = this.state
    })()

    let module = {
      [this.module]: this.state[this.module]
    }

    // I think it would increase readability if you used separate functions
    // for save, remove etc instead of abstracting them with dispatch
    this.props.dispatch(module, this.props.parentKey, 'save')
  }

  cancel = () =&gt; {
    this.setState(this.baseState)
  }

  remove = () =&gt; {
    let module = {
      [this.module]: null
    }

    this.props.dispatch(module, this.props.parentKey, 'remove')
  }

  inputType = value =&gt; {
    if (isNaN(parseInt(value))) {
      return 'text'
    } else {
      return 'number'
    }
  }

  generateInputs() {
    var inputs = []
    // again no need for pushing since map returns an array
    Object.keys(this.state[this.module]).map(inputKey =&gt; {
      let value = this.state[this.module][inputKey]

      switch (inputKey) {
        case 'device_path':
          inputs.push(
            &lt;div key={inputKey}&gt;
              &lt;span&gt;{inputKey}:&lt;/span&gt;
              &lt;Dropdown
                name={inputKey}
                placeholder={value}
                fluid
                selection
                options={this.state.dropdownOptions}
                disabled={this.state.ctrls.dropDownDisabled}
              /&gt;
            &lt;/div&gt;
          )
          break
        default:
          inputs.push(
            &lt;div key={inputKey}&gt;
              &lt;span&gt;{inputKey}:&lt;/span&gt;
              &lt;Input
                type={this.inputType(value)}
                name={inputKey}
                value={value}
                onChange={this.inputChange}
              /&gt;
            &lt;/div&gt;
          )
      }
    })
    return inputs
  }

  render() {
    const cancelBtnStyle = this.state.ctrls.hideCancelBtn
      ? { display: 'none' }
      : {}

    let removeBtn = (
      &lt;Button
        key={1}
        content="remove"
        onClick={this.state.ctrls.removeBtnHandler}
        type="button"
      /&gt;
    )

    const showRemoveBtn = this.state.remove[this.module] ? removeBtn : null

    // rather use a fragment, it's not common to return an array
    let elements = [
      &lt;fieldset key={0} disabled={this.state.ctrls.fieldsetDisabled}&gt;
        &lt;legend&gt;{this.module}&lt;/legend&gt;
        {this.generateInputs()}
        {showRemoveBtn}
      &lt;/fieldset&gt;,

      &lt;Button
        key={2}
        content={this.state.ctrls.fieldsetBtn}
        onClick={this.state.ctrls.fieldsetBtnHandler}
        type="button"
      /&gt;,

      &lt;Button
        key={3}
        content="cancel"
        onClick={this.state.ctrls.cancelBtnHandler}
        style={cancelBtnStyle}
        type="button"
      /&gt;
    ]

    return elements
  }
}

Fieldset.propTypes = {
  parentKey: PropTypes.string,
  moduleName: PropTypes.string,
  dispatch: PropTypes.func,
  module: PropTypes.object
}
<span class="math-container">```</span>
</code></pre>
    </div>