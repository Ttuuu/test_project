<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Just so you know, you can return from within a loop:</p>

<pre><code>def search(a,b):
    for d in b:
        if a==d:
            return True
    return False
</code></pre>

<p>Which is equivalent to what SuperBiasedMan suggested. Note that this test is O(n) which is not optimal. If you move the numbers to a dictionary, you can test that in O(1).</p>

<pre><code>contains = a in somelist  # O(n)
contains = a in somedict  # O(1)
</code></pre>

<p>Since performance is tagged, I suggest using a set (or dict) to test if a matching component exists on the list. The issue with this approach is that matches must not be distinct.</p>

<pre><code>numbers = [1,4,5,7,9,6,2]
numberset = set(numbers)
target = int(raw_input("Enter the number:"))
for x in numbers:
    if target-x in numberset:
        print "Found non-distinct components: {0} and {1}".format(x, target-x)
</code></pre>

<p>Second revision does find distinct pairs, but is more complicated. Take your time going through it. The dictionary creates inverse mapping from elements back to indexes from which they came. Also pairs (i,j) and (j,i) are equivalent, so only one of the two is taken.</p>

<pre><code>def test(numbers, target):
    indexes = {}
    for i,x in enumerate(numbers):
        indexes[x] = indexes.get(x,[])+[i]
    print indexes

    for i,x in enumerate(numbers):
        for j in indexes.get(target-x,[]):
            if i &lt; j:
                print "Found distinct components: {0} + {1} = {2} "\
                "at positions {3} and {4}".format(x, target-x, target, i, j)
    print "End of results."
</code></pre>

<p>Example output:</p>

<pre><code>test([1,4,5,7,9,6,2,1,5], 10)

{1: [0, 7], 2: [6], 4: [1], 5: [2, 8], 6: [5], 7: [3], 9: [4]}
Found distinct components: 1 + 9 = 10 at positions 0 and 4
Found distinct components: 4 + 6 = 10 at positions 1 and 5
Found distinct components: 5 + 5 = 10 at positions 2 and 8
Found distinct components: 9 + 1 = 10 at positions 4 and 7
End of results.
</code></pre>
    </div>