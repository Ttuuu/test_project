<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Possibly not the best solution, but here's one that uses F# more extensively:</p>

<pre class="lang-ml prettyprint-override"><code>let rec processProgram (i: int) (ops: int list) =
    match ops with
    | opCode :: aPos :: bPos :: outPos :: rest  when opCode = 1 -&gt; // add op code
        let a = ops |&gt; List.item aPos
        let b = ops |&gt; List.item bPos
        let complete = [opCode; aPos; bPos; outPos] @ processProgram (i + 4) rest
        let (left, right) = complete |&gt; List.splitAt outPos
        left @ [a + b] @ (right |&gt; List.skip 1)
    | opCode :: aPos :: bPos :: outPos :: rest when opCode = 2 -&gt; // multiple op code
        let a = ops |&gt; List.item aPos
        let b = ops |&gt; List.item bPos
        let complete = [opCode; aPos; bPos; outPos] @ processProgram (i + 4) rest
        let (left, right) = complete |&gt; List.splitAt outPos
        left @ [a * b] @ (right |&gt; List.skip 1)
    | head :: rest  when head = 99 -&gt; // terminate
        ops
    | _ -&gt;
        failwith "Unsported opcode"

</code></pre>

<p>I've turned the function into a recursive function with <code>let rec</code> so that it can be called from within itself, I'll generally use this rather than a loop.</p>

<p>Next I'm using <code>list</code> rather than <code>array</code> so that I can pattern match on the operations. Let's look at that:</p>

<pre class="lang-ml prettyprint-override"><code>match ops with
| opCode :: aPos :: bPos :: outPos :: rest  when opCode = 1 -&gt; // add op cod
</code></pre>

<p>This expects the list to have <em>at least</em> 4 elements, and I'm destructing it into the pieces we care about, <code>opCode</code> (what we're doing), <code>aPos</code> and <code>bPos</code> (where in the instruction set the values we want are) and <code>outPos</code> (where to put the output in the instruction list). It's then got a <code>when</code> test on the end to check the value of the <code>opCode</code> so we can hit the right op code branch.</p>

<p>When the <code>match</code> is hit we grab the values from their current pos and then process the rest of the instruction set, generating a new <code>list</code> with:</p>

<pre class="lang-ml prettyprint-override"><code>let complete = [opCode; aPos; bPos; outPos] @ processProgram (i + 4) rest
</code></pre>

<p><em>The <code>@</code> operator concats two <code>list</code>'s together.</em></p>

<p>Then we'll split it on the <code>outPos</code>:</p>

<pre class="lang-ml prettyprint-override"><code>let (left, right) = complete |&gt; List.splitAt outPos
</code></pre>

<p>This gives us a tuple of <code>int list * int list</code> that we deconstruct into two variables and lastly we rebuild the <code>list</code> through concatinations:</p>

<pre class="lang-ml prettyprint-override"><code>left @ [a + b] @ (right |&gt; List.skip 1)
</code></pre>

<p>We use the <code>left</code> part to start with, as it is all up until the <code>outPos</code>, then insert the result of the op-code (add in this place) and then <code>concat</code>-ing the <code>right</code> but skipping <code>outPos</code> which is the <code>head</code> of the list.</p>

<p><em>Side note: it's not stated in the requirements that you can update positions beyond the current op stack, so I didn't implement that, it'll only do reverse-updates.</em></p>
    </div>