<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I guess <code>std_lib_facilities</code> is a header from the book? It's best to get used to including the <a href="https://en.cppreference.com/w/" rel="noreferrer">standard library</a> headers directly as soon as possible.</p>

<p>If <code>std_lib_facilities</code> contains <code>using namespace std;</code> note that <a href="https://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice">this is bad practice</a>.</p>

<p>In this case, we only need:</p>

<pre><code>#include &lt;vector&gt;
#include &lt;iostream&gt;
</code></pre>

<hr>

<p>"Hungarian" notation (adding type information to the names of variables), <a href="https://softwareengineering.stackexchange.com/questions/113844/is-systems-hungarian-notation-still-a-useful-practice">is not generally recommended</a>. As such, the variable names should not be <code>ddistance</code>, <code>cgoagain</code> etc., just <code>distance</code> and <code>goagain</code>.</p>

<p>Using camel case or underscores may make them easier to read, and it's generally better to use whole words instead of abbreviations, e.g. <code>totalDistance</code>.</p>

<hr>

<p>While C once had a requirement for all variables to be declared at the start of a block, C++ does not. Variables should be declared <a href="https://stackoverflow.com/questions/3773396/declare-variables-at-top-of-function-or-in-separate-scopes">as close to their point of use as practical</a>. As such, <code>ddistance</code> and <code>cgoagain</code> can be moved to just above where they are populated from <code>std::cin</code>.</p>

<hr>

<p>Since you're storing the <code>greatest</code> and <code>shortest</code> distances, there's no need to iterate the whole vector of distances when a new value is entered. We can simply compare against the existing value. However, this won't work when initializing the greatest and shortest values to zero!</p>

<p>We can use <a href="https://en.cppreference.com/w/cpp/types/numeric_limits" rel="noreferrer">another part of the standard library</a> to initialize the <code>greatest</code> value to something that will always be smaller than a valid double input, and the <code>shortest</code> value to something that will always be larger. That way the first input will override both values successfully:</p>

<pre><code>#include &lt;limits&gt;
...
double greatest = std::numeric_limits&lt;double&gt;::lowest();
double shortest = std::numeric_limits&lt;double&gt;::max();

...
        if (distance &gt; greatest)
            greatest = distance;

        if (distance &lt; shortest)
            shortest = distance;
</code></pre>

<p>Note that with this change, there's actually no need to keep a vector containing all the distances. We can just keep a count of the number of values entered and use that to calculate the mean.</p>

<hr>

<p>Altered code:</p>

<pre><code>#include &lt;vector&gt;
#include &lt;iostream&gt;
#include &lt;limits&gt;

int main()
{
    double totalDistance = 0;
    double greatest = std::numeric_limits&lt;double&gt;::lowest();
    double shortest = std::numeric_limits&lt;double&gt;::max();
    unsigned int distancesEntered = 0;

    while (true) {

        std::cout &lt;&lt; "Enter a valid 'double' ";

        double distance = 0;
        std::cin &gt;&gt; distance;

        if (std::cin) {

            ++distancesEntered;

            totalDistance += distance;

            if (distance &gt; greatest)
                greatest = distance;

            if (distance &lt; shortest)
                shortest = distance;

            std::cout &lt;&lt; "distancesEntered is\t" &lt;&lt; distancesEntered &lt;&lt; "\n";
            std::cout &lt;&lt; "totalDistance is\t" &lt;&lt; totalDistance &lt;&lt; "\n";
            std::cout &lt;&lt; "The mean distance is\t" &lt;&lt; totalDistance / distancesEntered &lt;&lt; "\n";
            std::cout &lt;&lt; "The greatest distance is\t" &lt;&lt; greatest &lt;&lt; "\n";
            std::cout &lt;&lt; "The shortest distance is\t" &lt;&lt; shortest &lt;&lt; "\n";
        }

        else {
            std::cout &lt;&lt; "That is not a valid value. Would you like to try again? 'y' / 'n' \n";
            std::cin.clear();
            std::cin.ignore(std::numeric_limits&lt;std::streamsize&gt;::max(), '\n');

            char goAgain = 0;
            std::cin &gt;&gt; goAgain;

            if (!(goAgain == 'y' || goAgain == 'Y')) {
                break;
            }
        }
    }
}
</code></pre>
    </div>