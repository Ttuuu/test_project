<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The main part of CX can be simplified quite a bit.  <code>cycles[pos]</code> is the cycle number of that position, or -1 it hasn't been determined yet. <code>cyclestart</code> is a generator that returns the next place for a cycle to start.  </p>

<pre><code>parent1 = [8, 4, 7, 3, 6, 2, 5, 1, 9, 0]
parent2 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

if np.random.random() &lt; pc:  # if pc is greater than random number

    cycles = [-1]*len(parent1)
    cycle_no = 1
    cyclestart = (i for i,v in enumerate(cycles) if v &lt; 0)

    for pos in cyclestart:

        while cycles[pos] &lt; 0:
            cycles[pos] = cycle_no
            pos = parent1.index(parent2[pos])

        cycle_no += 1

    child1 = [parent1[i] if n%2 else parent2[i] for i,n in enumerate(cycles)]
    child2 = [parent2[i] if n%2 else parent1[i] for i,n in enumerate(cycles)]

else:
    ...

print("parent1:", parent1)
print("parent2:", parent2)
print("cycles:", cycles)
print("child1:", child1)
print("child2:", child2)
</code></pre>

<p>Prints:</p>

<pre><code>parent1: [8, 4, 7, 3, 6, 2, 5, 1, 9, 0]
parent2: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
cycles: [1, 2, 2, 3, 2, 2, 2, 2, 1, 1]
child1: [8, 1, 2, 3, 4, 5, 6, 7, 9, 0]
child2: [0, 4, 7, 3, 6, 2, 5, 1, 8, 9]
</code></pre>

<p>If the chromosomes are really long, it might be worth building a dict as a lookup table instead of using <code>parent1.index()</code>.  Also changed it so cycle_no comes from enumerating cyclestart (the enumeration starts at 1, so child1 and child2 aren't swapped from the previous answer).</p>

<pre><code>lookup = {v:i for i,v in enumerate(parent1)}

cycles = [-1]*len(parent1)
cyclestart = (i for i,v in enumerate(cycles) if v &lt; 0)

for cycle_no, pos in enumerate(cyclestart, 1):

    while cycles[pos] &lt; 0:
        cycles[pos] = cycle_no
        pos = lookup[parent2[pos]]
</code></pre>
    </div>