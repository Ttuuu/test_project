<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>(The question is more than two years old, and both Xcode and Swift have been developed substantially in that time. The following review is written with the current Xcode 10.3 and Swift 5 in mind.)</p>

<h3>Creating the user interface</h3>

<p>Both the Objective-C and the Swift implementation create the user interface purely in code, which is laborious and error-prone. There are also some problems with your implementation. </p>

<p>First, the buttons and labels are created in <code>viewWillLayoutSubviews</code>, which can be called multiple times per view. Using the "Debug View Hierarchy" feature of Xcode you can see that all labels and buttons are created twice right after the application start:</p>

<p><a href="https://i.stack.imgur.com/mXpLpl.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/mXpLpl.png" alt="enter image description here"></a></p>

<p>Next, the layout is not updated correctly on an orientation change:</p>

<p><a href="https://i.stack.imgur.com/JFal7l.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/JFal7l.png" alt="enter image description here"></a></p>

<p>If you really want to create the user interface programmatically then the <code>viewDidLoad</code> methods is a better place. This method is called exactly once.</p>

<p>However, this is much easier done in the <a href="https://developer.apple.com/xcode/interface-builder/" rel="nofollow noreferrer">Xcode Interface Builder</a> where you can design the views in a Storyboard, connect the button actions to code, etc.</p>

<p>And a better method to place the user interface elements correctly is <a href="https://developer.apple.com/library/archive/documentation/UserExperience/Conceptual/AutolayoutPG/index.html" rel="nofollow noreferrer">Auto Layout</a>. With Auto Layout you define a set of constraints between all UI elements. This can be done in a way that the views automatically adapt to various screen sizes and orientation changes.</p>

<p>The layout constraints can be defined in the Xcode interface builder or in code (although defining them in code is more work).</p>

<h3>The action methods</h3>

<p>This</p>

<pre><code>let gpsAlert : UIAlertController? = self.displayDataModel!.provideGPSAlerters();
if (gpsAlert != nil) {
    self.present(gpsAlert!, animated:false, completion:nil);
}
</code></pre>

<p>looks like a design error to me: The <em>model</em> should not create an UI element and interact with with the user.</p>

<p>Here</p>

<pre><code>@objc func setLabelWithBatteryLevelAndState() {
    var actionString : String = "Get Battery Level and State";

    if (self.displayDataModel != nil) {
        actionString = (self.displayDataModel?.provideBatteryLevelAndState())!
    }
    else {
        actionString = "Battery Button Action Failure: Data Model not created"
    }

    DispatchQueue.main.async {
        self.displayButtonAction?.text = nil
        self.displayButtonAction?.text = actionString
    }
}
</code></pre>

<p>several things can be improved:</p>

<ul>
<li>Setting <code>self.displayButtonAction?.text</code> to <code>nil</code> before setting it to the actual message is not necessary.</li>
<li>Action methods are always called on the main thread, the <code>DispatchQueue.main.async</code> is not needed.</li>
<li>You can define <code>actionString</code> as a <em>constant</em> (with <code>let</code>) if it is initialized exactly once before used, the dummy initialization to "Get Battery Level and State" is not needed.</li>
<li>Optional binding is almost always preferred over explicit testing against <code>nil</code> and forced-unwrapping, see for example <a href="https://stackoverflow.com/q/29717210/1187415">When should I compare an optional value to nil?</a> on Stack Overflow.</li>
</ul>

<p>With these suggestions, the action method could look like this:</p>

<pre><code>@objc func setLabelWithBatteryLevelAndState() {
    let actionString : String
    if let displayModel = self.displayDataModel {
        actionString = displayModel.provideBatteryLevelAndState()
    } else {
        actionString = "Battery Button Action Failure: Data Model not created"
    }
    self.displayButtonAction?.text = actionString
}
</code></pre>

<p>However, this does not provide the best user experience: If the data model could not be created (for whatever reason) then the user is notified of that fact only <em>after</em> pressing the button.</p>

<p>The better approach is to enable or disable a button depending on whether its functionality is available or not.</p>

<p>The same remarks apply to the other action method <code>setLabelActionNetwork()</code>.</p>

<h3>Initializing the data model</h3>

<p>Initializing the <code>dataModelLibrary</code> exactly once is easier done with a custom getter method and <code>dispatch_once()</code>, which  is thread-safe:</p>

<pre><code>- (PCI7DataModelLibrary *)dataModelLibrary {
    static dispatch_once_t onceToken;
    dispatch_once(&amp;onceToken, ^{
        _dataModelLibrary =  [[PCI7DataModelLibrary alloc] init];
    });
    return _dataModelLibrary;
}
</code></pre>

<p>(For Swift, see for example <a href="https://stackoverflow.com/q/37801407/1187415">Whither dispatch_once in Swift 3?</a> on Stack Overflow.)</p>

<p>Now you can simply test</p>

<pre><code>if (self.dataModelLibrary) { ... }
</code></pre>

<p>to check if the model is available or not. However, this</p>

<pre><code>if (![self dataModelLibraryInitialize]) {
    // If the library can't be allocated or initialized none of the buttons will work in any view controller.
    NSLog(@"application didFinishLaunchingWithOptions: Unable to alloc or init the PCI7DataModelLibrary object");
    return NO;
}
</code></pre>

<p>has the only effect that the user is presented with a black screen if the model is not available. (The return value from the <code>application:didFinishLaunchingWithOptions:</code> method is only relevant if the app is started to handle a URL resource or continue a user activity, but otherwise ignored.)</p>

<p>As mentioned above, the better approach is to enable or disable UI elements accordingly. </p>

<h3>Further remarks</h3>

<ul>
<li><p>There is a Core Data model and corresponding methods in AppDelegate.m which are apparently unused.</p></li>
<li><p>The array initialization</p>

<pre><code>NSArray* controllers = [NSArray arrayWithObjects:objectiveVC, swiftVC,  nil];
</code></pre>

<p>can be simplified using <a href="https://clang.llvm.org/docs/ObjectiveCLiterals.html#container-literals" rel="nofollow noreferrer">“Objective-C array literals”</a>:</p>

<pre><code>NSArray* controllers = @[objectiveVC, swiftVC];
</code></pre></li>
<li><p>The declaration of</p>

<pre><code>- (id)init;
</code></pre>

<p>in ObjectiveCViewController.h is not needed because that method is inherited from <code>NSObject</code>.</p></li>
</ul>
    </div>