<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This code doesn't work, as can be shown by including <code>&lt;algorithm&gt;</code> and changing the output:</p>

<pre><code>std::cout &lt;&lt; std::is_sorted(tobesorted.begin(), tobesorted.end()) &lt;&lt; std::endl;
</code></pre>

<hr>

<p>Other things that are surprising:</p>

<ul>
<li>We pass pointers but always assume they are not null.  That suggests we should be using references instead.</li>
<li>Misspelt <code>std::srand</code> and <code>std::time</code> - though I'd recommend using <code>&lt;random&gt;</code> instead.</li>
<li><code>std::endl</code> used where there's no need to flush output - just write <code>\n</code> instead.</li>
<li>Why are we using <code>int</code> rather than <code>std::size_t</code> for our <code>left</code> and <code>right</code> indices?</li>
<li>Use of floating-point multiplication for integer arithmetic.</li>
<li>Unused variable <code>j</code>.</li>
</ul>

<hr>

<p>There's a risk of overflow here:</p>

<blockquote>
<pre><code>int mid = (left+ right)/2;
</code></pre>
</blockquote>

<p>Better would be</p>

<pre><code>auto mid = left + (right - left) / 2;
</code></pre>

<hr>

<p>This code can be re-written:</p>

<blockquote>
<pre><code>std::vector&lt;int&gt; leftvec;
std::vector&lt;int&gt; rightvec;

for(int i= left; i &lt;= mid; i++){
    leftvec.push_back(pvec[0][i]);
}
for(int i= mid+1; i &lt;= right; i++){
    rightvec.push_back(pvec[0][i]);
}
</code></pre>
</blockquote>

<p>Those vectors will likely re-allocate several times as they are filled, because we didn't <code>reserve()</code> capacity.  Instead of those loops, we could use the appropriate constructor:</p>

<pre><code>std::vector&lt;int&gt; leftvec(pvec-&gt;begin()+left, pvec-&gt;begin()+mid);
std::vector&lt;int&gt; rightvec(pvec-&gt;begin()+mid, pvec-&gt;&gt;begin()+right+1);
</code></pre>

<p>It would be easier if we passed iterators rather than indices here.</p>
    </div>