<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Advice 1</strong></p>

<p>The most important issue with your password generator function is the fact that you keep creating the character vector over and over again. I suggest you roll a class that has that character vector as a field and construct it only once:</p>

<pre><code>class password_generator {
public:
    password_generator() {
        ... // Construct your alphabet.
    }

private:
    std::vector&lt;char&gt; m_alphabet;
};
</code></pre>

<p><strong>Advice 2</strong></p>

<pre><code>if(choice == 0)
{
    ...
}

if(choice == 1)
{
    ...
}
</code></pre>

<p>Just use <code>switch</code> here:</p>

<pre><code>switch (rand() % 2) {
    case 0:
        ...
    case 1:
        ...
    case 2:
        ...
}
</code></pre>

<p><strong>Advice 3</strong></p>

<p><code>#include "stdafx.h"</code>: In the build settings of Visual Studio, search something like "Use precompiled headers"; set to <code>No</code>. This will remove the need for including that header file.</p>

<p><strong>Advice 4</strong></p>

<p><code>#include &lt;duman.h&gt;</code>: this won't compile on Xcode. The convention is that you use <code>&lt;header&gt;</code> for standard C++ library headers, and <code>"header.h"</code> for your own header files.</p>

<p><strong>Advice 5</strong></p>

<p><code>using namespace std;</code> This one is a poor practice since it abuses your scope with bunch of identifiers/type names. Use instead:</p>

<pre><code>#include "funky.hpp"
using funky::person;
using funky::darth_vader;
</code></pre>

<p><strong>Advice 6</strong></p>

<p>In your <code>main</code> driver you output to <code>cerr</code>. This is not what is expected of a command line program. *nix like OS'es has two "handles" one for standard output and one for standard error stream. Your conventional *nix guru will expect normal output to <code>cout</code> and only error stuff to <code>cerr</code>.</p>
    </div>