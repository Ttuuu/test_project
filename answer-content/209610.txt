<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><code>ParseContent()</code>  </p>

<ul>
<li><code>Type type = entities.First().GetType();</code> can throw an exception if <code>entities</code> doesn't contain any items. I may be wrong but you could use the <code>T</code> as well like  <code>Type type = typeof(T);</code>.</li>
<li>If <code>entities</code> is <code>null</code> an <code>ArgumentNullException</code> should be thrown instead of an <code>ArgumentException</code>.  </li>
<li>The <code>foreach</code> could be simplified and you should use a <code>StringBuilder</code> instead of concating strings in a loop. Thats because strings are immutable and for each <code>contentToExport += $"{template}{NewLineDelimiter}";</code> you create a new string object.  </li>
<li>If the right hand side of an assignment makes the type clear one should use <code>var</code> instead of the concrete type.  </li>
<li>Omitting braces <code>{}</code> althought they might be optional can lead to hidden and therefor hard to find bugs. I would like to encourage you to always use them.  </li>
<li>Having a variable <code>memoryStream</code> doesn't buy you anything. Just return the new memorystream.  </li>
</ul>

<p>Applying these points will lead to  </p>

<pre><code>public System.IO.Stream ParseContent&lt;T&gt;(IEnumerable&lt;T&gt; entities) where T : class
{
    if (entities == null)
    {
        throw new ArgumentNullException(nameof(entities), "List accepted is empty.");
    }
    if (!entities.Any())
    {
        //assuming thats the desired behaviour
        return null;
    }

    Type type = typeof(T);

    PropertyInfo[] properties = type.GetProperties();

    string headers = GenerateTemplate(properties);

    //No headers accepted - cannot export the content
    if (string.IsNullOrEmpty(headers))
    {
        return null;
    }

    StringBuilder contentToExport = new StringBuilder( $"{headers}{NewLineDelimiter}");

    foreach (T entity in entities.Where(e=&gt;e!=null))
    {

        string template = this.ExportLine(entity, properties);
        contentToExport.Append($"{template}{NewLineDelimiter}");
    }

    byte[] bytes = System.Text.Encoding.UTF8.GetBytes(contentToExport.ToString());

    return new System.IO.MemoryStream(bytes);
}  
</code></pre>
    </div>