<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It is good to see that you've avoided the use of <code>using namespace std;</code>.</p>

<p><strong>Coding</strong></p>

<p>Declare variables as close to their initial use as possible, and prefer construction of that initial value to default constructing an object then assigning the initial value.  <code>lines</code> and <code>querrys</code> can be declared when they are assigned:</p>

<pre><code>auto lines = atoi(cin_buffer.c_str());
// ...
auto querrys = atoi(cin_buffer.c_str());
</code></pre>

<p><code>name</code> can be declared where it is used.  <code>strg_it</code> can also be declared (in both places) as <code>auto</code>.  This can help the compiler improve the code by letting it know the value isn't needed after the <code>erase</code> call.</p>

<pre><code>auto strg_it = remove_if( begin(cin_buffer), end(cin_buffer), 
                    [](unsigned char c){return c=='&lt;' || c=='&gt;';});
cin_buffer.erase(strg_it, end(cin_buffer));
</code></pre>

<p>Alternatively, when using the erase-remove idiom, you can put the erase and remove in one statement</p>

<pre><code>    cin_buffer.erase(remove_if( begin(cin_buffer), end(cin_buffer), [](unsigned char c){return c=='&lt;' || c=='&gt;';}), end(cin_buffer));
</code></pre>

<p>and not need the variable at all.</p>

<p>You have no error checking on your inputs.  You should check for failed input, non-integer conversions from <code>atoi</code>, etc.  One alternative (since you have a <code>std::string</code>) is to use <a href="https://en.cppreference.com/w/cpp/string/basic_string/stol" rel="nofollow noreferrer"><code>std::stoi</code></a>, which will throw an exception if there is an error during conversion.</p>

<p><code>cin_buffer.at(0)</code> will throw with an empty string, and <code>cin_buffer.at(1)</code> will throw an exception if the string only has one character in it.</p>

<p><code>variables[name]=cin_buffer;</code> will replace any existing value for <code>name</code> if one already exists.  This may be the expected behavior.</p>

<p>In your final search loop, store the result of <code>find</code> in a variable to avoid having to look it up again.</p>

<pre><code>auto it = variables.find(cin_buffer);
if (it != end(variables)) {
    std::cout &lt;&lt; it-&gt;second &lt;&lt; `\n`;
} else
</code></pre>

<p>You should avoid using <code>std::endl</code> unless absolutely necessary.  Since it flushes the output, there can be a considerable performance hit when using it.</p>

<p><strong>Readability</strong></p>

<p>You should put more spaces in your code, rather than jamming all those characters together.  Put spaces around binary operators</p>

<pre><code>for (int lines_processed = 0; lines_processed &lt; lines; ++lines_processed) {
</code></pre>

<p>which also makes it clearer that <code>lines_processed &lt; lines</code> is an expression and not part of a possible template <code>lines_processed&lt;lines&gt;</code>.</p>

<p>The parentheses around <code>(scope.length())</code> are unnecessary.</p>

<p>Spelling is important.  Variable names should be spelled correctly to make it easier to read and easier to search for.  <code>querrys</code> should be spelled <code>queries</code>.</p>
    </div>