<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I agree with <a href="https://codereview.stackexchange.com/a/233026/98493">the other answer</a> by <a href="https://codereview.stackexchange.com/users/46840/carcigenicate">@Carcigenicate</a>. Putting this into a loop instead of using a recursive design makes it a lot easier to understand. However, the explicit <code>while</code> loop can be simplified even further by using a <code>for</code> loop instead. This makes it even more readable, IMO.</p>

<pre><code>def get_request(self, end_point, max_attempts=20, retry_delay=3):
    """Get the page at `self.base_url + end_point`.
    If the request fails due to a request error, retry up to `max_attempts` times,
    with a delay of `retry_delay` seconds.
    """
    url = self.base_url + endpoint
    for _ in range(max_attempts):
        if self.expiration_time &lt;= datetime.datetime.now():
            self.token, self.expiration_time = self.auth(client_id, client_secret)
        try:
            response = requests.get(url, auth=BearerAuth(self.token))
            response.raise_for_status()
            return response
        except requests.RequestException:
            time.sleep(retry_delay)
    raise RuntimeError(f"Maximum number of retries ({max_attempts}) reached.")
</code></pre>

<p>In addition, Python has an official style-guide, <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP8</a>. It recommends using <code>lower_case</code> for functions and variables and <code>PascalCase</code> only for classes.</p>

<p>You should also add a <a href="https://www.python.org/dev/peps/pep-0257/" rel="nofollow noreferrer"><code>docstring</code></a> to document your functions, as I have done for this method.</p>

<p>You might also want to add some <a href="https://docs.python.org/3/library/logging.html" rel="nofollow noreferrer">logging</a> to this, so you can debug it if necessary:</p>

<pre><code>import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("Requests")

...

def get_request(self, end_point, max_attempts=20, retry_delay=3):
    """Get the page at `self.base_url + end_point`.
    If the request fails due to a request error, retry up to `max_attempts` times,
    with a delay of `retry_delay` seconds.
    """
    url = self.base_url + endpoint
    for attempt in range(max_attempts):
        if self.expiration_time &lt;= datetime.datetime.now():
            self.token, self.expiration_time = self.auth(client_id, client_secret)
        try:
            response = requests.get(url, auth=BearerAuth(self.token))
            response.raise_for_status()
            return response
        except requests.RequestException:
            logger.exception("Attempt %s out of %s failed for URL %s",
                             attempt + 1, max_attempts, url)
            time.sleep(retry_delay)
    raise RuntimeError(f"Maximum number of retries ({max_attempts}) reached.")
</code></pre>
    </div>