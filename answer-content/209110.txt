<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A <code>std::set</code> or <code>std::bitset</code> might be the better containers to use for this, but assuming we're going to stick with <code>std::vector</code>, here's some improvements on this.</p>

<p>See Toby Speight's answer for some of the improvements I used but did not cover.</p>

<h2>Avoid using unsigned numbers</h2>

<p>Don't use <code>unsigned int</code> or <code>uint8_t</code>. Counterintuitively, it's generally best to use signed <code>int</code> types even when a value should never be negative. Operations on mixed signed types come with a lot of problems. It's an unfortunate mistake the standard went with unsigned numbers for container sizes. Unsigned numbers are best kept to bitwise operations.</p>

<h2>Store whether an index is used at that index</h2>

<p>Instead of storing a list of indexes that have been used, let's just store a <code>bool</code> at each possible index. This uses more space, but then no extra searching has to be done, just a single loop. (Notice I've changed <code>m_availTableNums</code> to <code>availTableNums</code>. The prefix <code>m_</code> is conventionally only used for class members). </p>

<pre><code>std::vector&lt;bool&gt; availTableNums (80);
</code></pre>

<p>Putting the 80 here will initialize the vector with 80 false values. Now when we fill the table, we choose random indices to insert <code>true</code> which indicates a value of used.</p>

<pre><code>std::srand(std::time(nullptr));
for(int i=0; i &lt; 20; i++)
{
    availTableNums[std::rand() % availTableNums.size()] = true;
}
</code></pre>

<h2>Using modern RNG facilities</h2>

<p><code>std::rand</code> has no guarantees of the "randomness" of the numbers it generates. It's fine if you want to run up a quick test, but in production code we could modify the previous example to make it a little more robust.</p>

<pre><code>std::default_random_engine engine {std::time()};
std::uniform_int_distribution&lt;std::size_t&gt; uniform_dist {0, availTableNums.size()};
for(int i=0; i &lt; 20; i++)
{
    availTableNums[uniform_dist(e1)] = true;
}
</code></pre>

<p>Here we use <code>std::size_t</code>, even though it's an unsigned type, as it is better to not have to cast from one type to another if we could avoid it. The random number generator will automatically pick from the correct range so we no longer need the modulus operator.</p>

<h2>Use C++ string streams</h2>

<p>There is no need for a temporary string, and C++ streams are often a better choice than the C printf family of functions. We can write the header of the table as:</p>

<pre><code>std::cout &lt;&lt; "+-------+-------+\n"
          &lt;&lt; "| TABLE | STATE |\n"
          &lt;&lt; "+-------+-------+" &lt;&lt; std::endl;
</code></pre>

<p>The extra <code>&lt;&lt;</code>s are left for style but not necessary. Now for the printing inside the loop, use <code>std::setw(2)</code> to make sure the printed index is within 2 columns. The value of this resets if string is sent to <code>std::cout</code> so it will not effect the rest of the line. </p>

<p>The use of <code>std::endl</code> will cause the output to always be flushed from the buffer and will have a small performance penalty. However, I am usually quite generous with them unless it is shown they have a sizeable impact on performance. It can make code easier to debug if output is consistently flushed and you know exactly where something went wrong.</p>

<pre><code>for(auto i=0u; i &lt; availTableNums.size(); i++)
{
    std::cout &lt;&lt; "|  " &lt;&lt; std::setw(2) &lt;&lt; i &lt;&lt; "   | "
              &lt;&lt; (availTableNums[i] ? "USED " : "EMPTY")
              &lt;&lt; " |" &lt;&lt; std::endl;
}
</code></pre>

<p>We again choose an unsigned index as comparing two unsigned types is better than comparing mixed signs or casting one to the other. The conditional expression <code>?:</code> allows us to concisely choose between the two strings depending on whether the index is true or false.</p>

<hr>

<p>Putting it all together with only the relavent headers, we get:</p>

<pre><code>#include &lt;ctime&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;random&gt;
#include &lt;string&gt;
#include &lt;vector&gt;


int main()
{
    std::vector&lt;bool&gt; availTableNums (80);

    std::default_random_engine engine {std::time()};
    std::uniform_int_distribution&lt;std::size_t&gt; uniform_dist {0, availTableNums.size()};
    for(int i=0; i &lt; 20; i++)
    {
        availTableNums[uniform_dist(e1)] = true;
    }

    std::cout &lt;&lt; "+-------+-------+\n"
              &lt;&lt; "| TABLE | STATE |\n"
              &lt;&lt; "+-------+-------+" &lt;&lt; std::endl;

    for(auto i=0u; i &lt; availTableNums.size(); i++)
    {
        std::cout &lt;&lt; "|  " &lt;&lt; std::setw(2) &lt;&lt; i &lt;&lt; "   | "
                  &lt;&lt; (availTableNums[i] ? "USED " : "EMPTY")
                  &lt;&lt; " |" &lt;&lt; std::endl;
    }

    std::cout &lt;&lt; "+-------+-------+" &lt;&lt; std::endl;

    return 0;
}
</code></pre>
    </div>