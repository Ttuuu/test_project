<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In this collection of answers, I think we're missing the traditional recursive solution, which highlights the elegance of a recursive algorithm:</p>

<pre><code>const subSeq = (s) =&gt; {
    if (s.length == 1) return ['', s] 

    // All the subSeq without the first char:
    const ss = subSeq(s.slice(1))

    // Return both those with and those without the first char
    return [...ss.map(ch =&gt; s[0] + ch), ...ss]
}
</code></pre>

<p>or more concisely stated, but perhaps harder to follow:</p>

<pre><code>const subSeq = (s) =&gt; s.length == 1 
    ? ['', s] 
    : (ss=subSeq(s.slice(1)), 
       [...ss.map(ch =&gt; s[0] + ch), ...ss])
</code></pre>

<p>includes the empty string in the answer:</p>

<pre><code>subSeq('abcd')
=&gt;Â ["abc", "abcd", "ab", "abd", "ac", "acd", "a", "ad", "bc", "bcd", "b", "bd", "c", "cd", "", "d"]
</code></pre>
    </div>