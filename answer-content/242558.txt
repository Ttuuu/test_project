<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Let me add my own review after some tinkering with my and <a href="https://codereview.stackexchange.com/users/167260/certainperformance">CertainPerformances</a> code. I think it may be viable to use a proxy, but still am not sure if it has consequences for performance. It's pretty simple and concise to code. One consequence is that it's a restricting solution: you can't use it (the same way as jQuery does) for non existing elements (e.g. <code>$(".IDoNotExist").each(el =&gt; {})</code> would throw). That may also be a blessing if you like such restrictiveness.</p>

<p>The <code>CustomCollection</code>-class offered by <a href="https://codereview.stackexchange.com/users/167260/certainperformance">CertainPerformance</a> is excellent and also very usable. I hold a bit of a grudge to the <code>class</code> sugar that is added to Ecmascript, probably because (having programmed JS/ES from the start of it) I always liked the elegance an simplicity of its prototypal nature of it and didn't feel the need for classes.</p>

<p>So here's a more 'classic' approach for extending a <code>NodeList</code> like jQuery.</p>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>if (document.documentMode) {
  alert("Internet explorer is not supported, sorry");
  throw new InternalError("No IE here");
}

const $ = (() =&gt; {
  const extensions = {
    toggleClass(className) {
      this.forEach(el =&gt; el.classList.toggle(className));
    },
    addClass(classNames) {
      this.forEach(el =&gt; {
        (Array.isArray(classNames) ? classNames : [classNames])
        .forEach(cn =&gt; el.classList.add(cn));
      });
    },
    removeClass(classNames) {
      this.forEach(el =&gt; {
        (Array.isArray(classNames) ? classNames : [classNames])
        .forEach(cn =&gt; el.classList.remove(cn));
      });
    },
    attr(key, value) {
      this.setAttribute(key, value);
    },
    text(value) {
      this.forEach(el =&gt; el.textContent = value);
    },
    html(value) {
      this.forEach(el =&gt; el.innerHTML = value);
    },
    toggleAttr(key, value) {
      this.forEach(el =&gt; {
        el[el.hasAttribute(key) ? 'removeAttribute' : 'setAttribute'](key, value);
      });
    },
    each(callback) {
      this.forEach(callback);
    },
  };

  function ExtendedNodeListCollection(selector, root = document) {
    this.collection = root.querySelectorAll(selector);
    this.first = this.collection[0];

    if (ExtendedNodeListCollection.prototype.isSet === undefined) {

      Object.entries(Object.getOwnPropertyDescriptors(Element.prototype))
        .forEach(([key, {
          value
        }]) =&gt; {
          if (value instanceof Function) {
            ExtendedNodeListCollection.prototype[key] = function(...args) {
              this.collection.forEach(elem =&gt; value.apply(elem, args));
              return this;
            }
          };
        });

      Object.entries(Object.getOwnPropertyDescriptors(NodeList.prototype))
        .forEach(([key, {
          value
        }]) =&gt; {
          if (value instanceof Function) {
            ExtendedNodeListCollection.prototype[key] = function(callBack) {
              this.collection[key](callBack);
              return this;
            };
          }
        });

      Object.entries(extensions)
        .forEach(([key, value]) =&gt; {
          ExtendedNodeListCollection.prototype[key] = function(...args) {
            value.apply(this, args);
            return this;
          }
        });

      ExtendedNodeListCollection.prototype.isSet = true;
    }
  }

  return (...args) =&gt; new ExtendedNodeListCollection(...args);
})();

//-----DEMO
const logElem = $("#log").first;
const log = (...txt) =&gt; {
  logElem.textContent += txt.join("\n") + "\n";
  logElem.scrollTop = logElem.scrollHeight;
};

log(`${new Date().toLocaleString()} $ initialized`);

// native forEach
$("p[data-addtxt]").forEach(el =&gt; el.appendChild(document.createElement("span")));

// extensions each/text/toggleClass
$("span")
  .each(el =&gt; el.style.backgroundColor = "#eee")
  .text(" --- backgroundColor and text added from $([...]).each")
  .toggleClass("green");

// will silently be eaten, no error
$(".notExisting").toggleClass("red"); 

document.addEventListener("click", evt =&gt; {
  const origin = evt.target;

  if (origin.nodeName === "BUTTON") {
    if (origin.id == "nothing") {
      // extension toggleAttr
      $("p").toggleAttr("data-nada", "Nothing");
      log("Toggled data-nada");
    }
    if (origin.id === "blue") {
      // native setAttribute
      const isBlue = origin.style.color === "blue";
      $("[data-maybeblue]").setAttribute("style", isBlue 
        ? "color:back" 
        : "color:blue");
      origin.textContent = isBlue ? "Make us blue" : "Make us black";
      log(`We are ${isBlue ? "black" : "blue"}`);
    }
    if (!origin.id) {
      // extension toggleClass
      $("p").toggleClass("red"); // extension toggleClass
      log(`Toggled color by class`);
      origin.textContent = `Toggle all &lt;p&gt; ${
          $("p").first.classList.contains("red") ? "black" : "red"}`;
    }
  }
});</code></pre>
<pre class="snippet-code-css lang-css prettyprint-override"><code>body {
  font: 12px/15px normal verdana, arial;
  margin: 2rem;
}

.red {
  color: red;
}

.green {
  color: green;
}

[data-nada]:before {
  content: attr(data-nada)' ';
  color: green;
  font-weight: bold;
}

#log {
  max-height: 200px;
  overflow: auto;
}

button {
  margin: 0.4rem 0;
}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;p&gt;Hi&lt;/p&gt;
&lt;p&gt;There&lt;/p&gt;
&lt;p&gt;How are you?&lt;/p&gt;
&lt;p data-addtxt&gt;text1&lt;/p&gt;
&lt;p data-addtxt&gt;text2&lt;/p&gt;
&lt;button&gt;Toggle all &amp;lt;p&gt; red&lt;/button&gt; (extension toggleClass)&lt;br&gt;
&lt;button id="nothing"&gt;Toggle all &amp;lt;p&gt; attribute&lt;/button&gt; (extension toggleAttr)&lt;br&gt;
&lt;button id="blue" data-maybeblue&gt;Make us blue&lt;/button&gt; (native setAttribute)
&lt;pre id="log" data-maybeblue&gt;&lt;/pre&gt;</code></pre>
</div>
</div>

    </div>