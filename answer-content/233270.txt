<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In answer to your first question, it may depend on whether you wish to optimise for speed or compression ratio. If optimising for speed, it would seem that using bytes is best, as that is what the <a href="https://github.com/lz4/lz4/blob/dev/doc/lz4_Block_format.md" rel="nofollow noreferrer">LZ4</a> algorithm does. LZ4 is a variant of LZ77, highly optimised for speed. If your optimisation is for the compression ratio, I am unsure which would be better, as I have never run a bitwise LZ77 compressor.</p>

<p>In answer to your second question: How about, instead of your historyBuffer.find() method returning the first position of a match, you return an ArrayList of Triplets which match? This is because if you find a match, you know you will perform another iteration of the loop, (provided <code>i</code> is not at its maximum value which is unlikely). Next time you perform the iteration, instead of going through your entire sliding window looking for a match, simply check whether or not any of the phrases in your <code>ArrayList</code> of <code>Triplets</code> will still match when the string <code>s</code> has that additional character appended. This is because a match longer than the current match must build upon either that current match, or some other equally long match. This way, you don't redo work that has already been done. This approach means you can get rid of the lines</p>

<pre><code>if ((historyBuffer.compare(histCurrLen - i, i, s) == 0) &amp;&amp; (lookheadBuffer[0] == lookheadBuffer[i]))
    pos = histCurrLen - i;

// If the longest match is found, check if there are any repeats
// following the of current longest substring in lookheadBuffer
int extra = 0;
if (histCurrLen == pos + i)
{
    // Check for full following repeats
    while ((lookCurrLen &gt;= i + extra + i) &amp;&amp; (lookheadBuffer.compare(i + extra, i, s) == 0))
        extra += i;

    // Check for partial following repeats
    int extraextra = i - 1;
    while (extraextra &gt; 0)
    {
        if ((lookCurrLen &gt;= i + extra + extraextra) &amp;&amp; (lookheadBuffer.compare(i + extra, extraextra, s, 0, extraextra) == 0))
            break;
        extraextra--;
    }

    extra += extraextra;
}
</code></pre>

<p>without losing any performance. </p>

<p>With regards to your question about the complexity of searching left-to-right or vice versa, the time complexity of the two will be identical.</p>

<p>One final note, however, is that incorporating my suggestion, where you look for multiple matches rather than one match, will influence which string searching algorithm would be optimal to implement in your <code>historyBuffer.find()</code> method. The <a href="https://en.wikipedia.org/wiki/Rabin%E2%80%93Karp_algorithm" rel="nofollow noreferrer">Rabin-Karp substring matching algorithm</a>, is generally best for finding multiple matches. This algorithm uses hashing to discard parts of the <code>historyBuffer</code> which will definitely not match the substring, leaving you to easily check the parts of the <code>historyBuffer</code> which are likely to match. However, if you are simply finding one match, as your current implementation does, then the <a href="https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_string-search_algorithm" rel="nofollow noreferrer">Boyer-Moore</a> algorithm is your best choice.</p>
    </div>