<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li>Consistency helps other people read, understand, and trust your code. This includes:

<ul>
<li>consistent whitespace (e.g. leaving an empty line after <code>#include</code>s),</li>
<li>capitalization of file names (<code>board.h</code> vs <code>Presenter.h</code>),</li>
<li>variable and type naming style (<code>Coord</code> vs <code>move_state</code>),</li>
<li>putting all function definitions in the .cpp files, instead of just some of them.</li>
</ul></li>
<li><a href="https://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice">Don't use <code>using namespace std;</code></a>.</li>
<li><a href="https://stackoverflow.com/a/18335862/673679">Use <code>enum class</code> instead of plain <code>enum</code> for type-safety.</a></li>
</ul>

<hr>

<ul>
<li>Variables should be declared as close to the point of use as practical (<code>oldX</code>, <code>oldY</code>, <code>newX</code>, <code>newY</code> should be inside the loop in <code>main</code>).</li>
<li><p>Validate input thoroughly. There's no guarantee that what the user enters is an int, so we have to check that reading from <code>cin</code> worked each time. If it didn't we then have to clear the error flags on the stream, and ignore the invalid input:</p>

<pre><code>if (std::cin.fail())
{
    std::cin.clear();
    std::cin.ignore(std::numeric_limits&lt;std::streamsize&gt;::max(), '\n');
}
</code></pre>

<p>It would therefore be better to abstract the request for user input to a separate function with a signature like: <code>bool readCoord(Coord&amp; value);</code></p></li>
<li><p>While we check that the input values are not too high (e.g. <code>oldX &lt; 8</code>), we also have to check that they are not too low (if the user enters <code>-1</code>). Which leads on to...</p></li>
<li>Use unsigned types where numbers should not be negative (e.g. for indexing into arrays).</li>
<li>We could make this neater by using the <code>Coord</code> class and adding a new function to the board: <code>if (!(board.InBounds(old) &amp;&amp; board.InBounds(new))) ...</code>.</li>
<li>This line <code>oldX--; oldY--; newX--; newY--;</code> indicates that we're using 1-based indexing, but the <code>"...of the piece you want to move ex: (0,1) -&gt; (0,5)"</code> implies 0-based indexing. Note that for 1-based indexing, we also need to check that we don't have an index of 0, even if we're using an unsigned index type.</li>
<li>Nitpick: use <code>while (true)</code> instead of <code>while (1)</code>. It's a more direct statement of intent, since the latter is shorthand for <code>while (1 != 0)</code>.</li>
</ul>

<hr>

<ul>
<li><p>Don't duplicate the position inside the <code>Piece</code> class. Checking that the move is valid should be done by the board (or better by a separate <code>Rules</code> class).</p></li>
<li><p>The dynamic allocation of pieces might be understandable if we were using a <code>nullptr</code> for empty squares, but without that there's no advantage over storing all the pieces by value (and all the disadvantages pointed out by Reinderien).</p></li>
<li><p>It might be better to store pieces in an array of <code>std::optional&lt;Piece&gt;</code>, instead of having a special <code>empty</code> value in your <code>Player</code> enum for pieces that don't actually exist.</p></li>
<li><p><code>Presenter</code> should probably store a <code>const Board&amp;</code> instead of a <code>Board*</code>. This means <code>Presenter</code> can never be given a <code>nullptr</code>, and it shows that <code>Presenter</code> never changes the board.</p></li>
<li><p><code>Board::get_player</code> can then be a const function: <code>Player get_player(Coord pos) const;</code>, since it doesn't alter the data members of the board class.</p></li>
<li><p><code>Presenter</code> can use the member initializer list to initialize the <code>board</code> variable (like the <code>Board</code> class does). Note that initializer lists specifically allow using the same name for function arguments as used for the member variable.</p></li>
<li><p>Since the <code>Presenter</code> destructor does nothing, we don't need to define it ourselves.</p></li>
</ul>
    </div>