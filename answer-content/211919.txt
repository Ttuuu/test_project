<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>Start writing in <a href="/questions/tagged/python3.x" class="post-tag" title="show questions tagged 'python3.x'" rel="tag">python3.x</a> ;)</p>

<p>End of Life for <a href="/questions/tagged/python2.x" class="post-tag" title="show questions tagged 'python2.x'" rel="tag">python2.x</a> will happen pretty soon <a href="https://pythonclock.org/" rel="nofollow noreferrer">1</a></p></li>
<li><p>One regex to rule them all</p>

<p>Instead of looping over a the list to create a regex, </p>

<p>you could use the <code>|</code> char which will work as an <code>or</code> so it can handle multiple outputs</p>

<p><code>REGEX_FILTER = re.conmpile('lo|wlp2s0')</code></p></li>
<li><p>If you only need the parameters, a simple namedtuple will suffice</p>

<p>You could create a <code>namedtuple</code> that will get rid of the empty looking class</p></li>
<li><p>IMHO setting the variables outside of the init is bad style</p>

<p>I would get the different variables needed before, and only then create the <code>NetworkInterface</code> object.</p></li>
</ul>

<p><em>Note I will not review getting the interface type, since I am nowhere near a linux atm</em></p>

<h1>Code</h1>

<pre><code>from collections import namedtuple
import re

import netifaces

FILTER_REGEX = re.compile(r'lo|wlp2s0')
NetworkInterface = namedtuple('NetworkInterface', ['iface', 'mac', 'type'])

def get_mac(iface):
    addresses = netifaces.ifaddresses(iface)
    return addresses[netifaces.AF_LINK][0].get("addr")

def get_type(iface):
    """Just return TP for testing"""
    return "TP"

def find_network_interfaces():
    for iface in netifaces.interfaces():
        if FILTER_REGEX.search(iface):
            continue
        yield NetworkInterface(iface, get_mac(iface), get_type(iface))

if __name__ == '__main__':
    for nwi in find_network_interfaces():
        print(nwi.iface)
        print(nwi.mac)
        print(nwi.type)
</code></pre>
    </div>