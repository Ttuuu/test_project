<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The simplest answer I could come up with exploits the structure of the problem and gives a deterministic answer, but since I didn't specify the answer had to be random, I think it's valid.</p>

<p>Basically, the pairs <code>[(0, 1), (1, 2), (2, 3), (3, 0)]</code> are equivalent to some creative slicing of the list <code>d_list = [0, 0, 1, 1, 2, 2, 3, 3]</code>. I couldn't figure out how to slice it properly, so instead I used a hacky re-arrangement of <code>d_list.append(d_list.pop(0))</code>. This gives <code>d_list = [0, 1, 1, 2, 2, 3, 3, 0]</code> which I can then slice into pairs trivially.</p>

<p>Complete code below:</p>

<pre><code>n_items = 5

nums = list(range(n_items))

d_list = []
for nn in nums:
    d_list.append(nn)
    d_list.append(nn)

d_list.append(d_list.pop(0))

pairs = []
for i1, i2 in zip(d_list[::2], d_list[1::2]):
    pairs.append((i1, i2))
</code></pre>

<p>It's definitely not the prettiest code, but it works.</p>
    </div>