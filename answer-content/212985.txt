<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First of all, the obvious remark is that this needs to be split in multiple files, with a .h/.c pair for each class. Since you haven't done so, you block the possibility to make this truly OO. </p>

<p>It is quite cumbersome in C, but can be done. As it happens, OO lies very close to old school proper C program design with ADTs, from the time before OO was invented. A rose by any other name...</p>

<p>The review below focuses on OO design in C only.</p>

<hr>

<p>Inheritance and polymorphism in C, as well as private encapsulation, is done through the concept of <em>opaque types</em>/<em>opaque pointers</em>. Meaning that you have a header like this:</p>

<pre><code>// polygon.h

typedef struct polygon polygon;

polygon* poly_create (void);

...
</code></pre>

<p>This defines an incomplete type that the caller can't access directly, nor allocate. (Much like an abstract base class in C++.)</p>

<p>The C file will then be along the lines of:</p>

<pre><code>// polygon.c
#include "polygon.h"

struct polygon
{
  /* member variables here */
};

polygon* poly_create (void) 
{
  polygon* obj = malloc(sizeof *obj);
  ...
  return obj;
}
</code></pre>

<p>This achieves true private encapsulation but not inheritance, because the struct definition will not be available to neither the caller nor anyone who wants to inherit (it is <code>private</code> rather than <code>protected</code> if you will).</p>

<hr>

<p>To achieve inheritance, polymorphism and inheritance restrictions, we need to expose the part of the struct that inherited classes may access.</p>

<p>The file structure then becomes:</p>

<pre><code>// polygon.h

typedef struct polygon polygon;
  typedef struct polygon_private polygon_private;
  typedef void function_to_inherit (void);

polygon* poly_create (void);
</code></pre>

<p>where <code>polygon_private</code> is another incomplete type that will contain everything truly private and not inheritable.</p>

<p><code>function_to_inherit</code> is a function type which we will use for polymorphism.</p>

<p>Then add another header visible to the inherited class but not the caller, containing the struct implementation:</p>

<pre><code>// polygon_inherit.h
#include "polygon.h"

struct polygon 
{
  polygon_private* priv; // incomplete type, inaccessible from here

  function_to_inherit* do_stuff; // function pointer that allows for polymorphism

  /* other protected members here */
};
</code></pre>

<p>The definition of the private ends up in polygon.c only:</p>

<pre><code>// polygon.c
#include "polygon.h"
#include "polygon_inherit.h"

struct polygon_private
{
  /* private stuff */
};

polygon* poly_create (void) 
{
  polygon* obj = malloc(sizeof *obj);
  ...
  obj-&gt;priv = malloc (sizeof *obj-&gt;priv);
  obj-&gt;priv-&gt;secret_stuff = ...;
  ...
  obj-&gt;do_stuff = print_polygon;
  ...
  return obj;
}
</code></pre>

<p>And then we may inherit this:</p>

<pre><code>// triangle.h
#include "polygon.h"
#include "polygon_inherit.h"

typedef struct triangle triangle;

triangle* triangle_create (void);
</code></pre>

<p>With the implementation:</p>

<pre><code>// triangle.c
#include "triangle.h"

struct triangle
{
  polygon* parent;

  /* triangle-specific stuff here */
};

triangle* triangle_create (void)
{
  triangle* obj = malloc(sizeof *obj);
  obj-&gt;parent = polygon_create();

  // thanks to polygon_inherit.h, we have access to the parent's protected members:
  obj-&gt;parent-&gt;do_stuff = print_triangle; // polymorphism
}
</code></pre>

<p>All inherited functions need to call those in the base class where applicable. </p>

<p>I didn't write any destructors but of course those too need to be added in similar fashion. And since it is C, all constructors/destructors need to be called manually, since there's no RAII.</p>
    </div>