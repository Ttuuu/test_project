<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Note that</p>

<pre class="lang-cpp prettyprint-override"><code>// Operator that combines two enumeration values into a flag_set.
template &lt;typename T&gt;
std::enable_if_t&lt;std::is_enum&lt;T&gt;::value, flag_set&lt;T&gt;&gt; operator|(const T&amp; lhs, const T&amp; rhs)
</code></pre>

<p>adds <code>operator|</code> to all enums, including those that don't have the expected special sentinel.</p>

<p>This breaks e.g. Qt's <code>Q_DECLARE_METATYPE()</code> macro.</p>

<p>This can be fixed with</p>

<pre class="lang-cpp prettyprint-override"><code>template &lt;typename T, typename = void&gt;
struct is_enum_that_contains_sentinel :
    std::false_type {};

template &lt;typename T&gt;
struct is_enum_that_contains_sentinel&lt;T, decltype(static_cast&lt;void&gt;(T::_))&gt; :
    std::is_enum&lt;T&gt; {};

// Operator that combines two enumeration values into a flag_set only if the
// enumeration contains the sentinel `_`.
template &lt;typename T&gt;
std::enable_if_t&lt;is_enum_that_contains_sentinel&lt;T&gt;::value, flag_set&lt;T&gt;&gt;
    operator|(const T&amp; lhs, const T&amp; rhs)
{
    ...
</code></pre>

<p>(Based on Jonathan MÃ¼ller's <a href="https://github.com/foonathan/type_safe/blob/master/include/type_safe/flag_set.hpp#L24-L26" rel="nofollow noreferrer">code</a> and available in <a href="https://github.com/mrts/flag-set-cpp/blob/master/include/flag_set.hpp#L156-L177" rel="nofollow noreferrer">GitHub</a>.)</p>
    </div>