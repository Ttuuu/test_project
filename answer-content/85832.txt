<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>private IEnumerable&lt;ITreeNode&lt;T&gt;&gt; GetAncestors(List&lt;ITreeNode&lt;T&gt;&gt; ancestors = null)
{
    ancestors = ancestors ?? new List&lt;ITreeNode&lt;T&gt;&gt;();
    if (Parent == null)
        return ancestors;

    if (Parent is TreeNode&lt;T&gt; == false)
        throw new NotSupportedException("Parent is not of type TreeNode{T}.");

    ancestors.Add(Parent);
    return (Parent as TreeNode&lt;T&gt;).GetAncestors(ancestors);
}
</code></pre>
</blockquote>

<p>I don't see the need to check that each ancestor is of type <code>TreeNode&lt;T&gt;</code> here. If we remove that check, I would write</p>

<pre><code>private IEnumerable&lt;ITreeNode&lt;T&gt;&gt; GetAncestors()
{
    for (var ancestor = this.Parent; ancestor != null; ancestor = ancestor.Parent)
    {
        yield return ancestor;
    }
}
</code></pre>

<p>If we introduce an optional parameter, <code>includeSelf</code>, we can write <code>Root</code> in terms of <code>GetAncestor</code>:</p>

<pre><code>private IEnumerable&lt;ITreeNode&lt;T&gt;&gt; GetAncestors(bool includeSelf = false)
{
    var ancestor = includeSelf ? this : this.Parent;
    while (ancestor != null)
    {
        yield return ancestor;
        ancestor = ancestor.Parent;
    }
}

public ITreeNode&lt;T&gt; Root
{
    get { return GetAncestors(includeSelf: true).Last(); }
}
</code></pre>
    </div>