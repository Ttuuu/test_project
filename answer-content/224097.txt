<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>close</h1>

<p>You had an opportunity to acquire (and then close) this resource
using <a href="https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html" rel="nofollow noreferrer">try-with-resource</a></p>

<pre><code>private static final Scanner scanner = new Scanner(System.in);
</code></pre>

<p>Similarly for this one:</p>

<pre><code>new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));
</code></pre>

<h1>streaming input</h1>

<p>You're reading 200,000 numbers here:</p>

<pre><code>    String[] expenditureItems = scanner.nextLine().split(" ");
</code></pre>

<p>They won't fit in the lower levels of the cache hierarchy, they are spilling to RAM.
Consider reading as you compute.
You never need much more than <code>d</code> numbers to be resident at once.</p>

<h1>no-op</h1>

<p>This doesn't appear to do anything for you. Consider deleting it.</p>

<pre><code>    scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");
</code></pre>

<h1>temp var</h1>

<p>The compiler optimizes it away,
but needlessly introducing a temp variable makes your code harder to read:</p>

<pre><code>        int expenditureItem = Integer.parseInt(expenditureItems[i]);
        expenditure[i] = expenditureItem;
</code></pre>

<p>Just phrase it as:</p>

<pre><code>        expenditure[i] = Integer.parseInt(expenditureItems[i]);
</code></pre>

<p>Not sure why you wanted to allocate 200,000 strings and then 200,000 ints,
when you could have streamed through them one string at a time.</p>

<h1>Integer.toString</h1>

<p>In addition to needless temp var,
it seems you chose to define an inconvenient API:</p>

<pre><code>    int result = activityNotifications(expenditure, d);
    bufferedWriter.write(String.valueOf(result));
</code></pre>

<p>You might find it slightly more convenient to write the result
if activityNotifications returned <code>Integer</code>.</p>

<h1>API</h1>

<p>You might have found it convenient to pass in two separate arrays,
one containing <code>d</code> entries and the other containing the <code>n - d</code>
entries that you have to make decisions on.</p>

<p>Ok, it appears you spend almost no time in <code>main</code>,
relative to what <code>activityNotifications</code> consumes.</p>

<h1>sort</h1>

<p>The pair of nested loops headed by</p>

<pre><code>        //Sort the exSub array
</code></pre>

<p>is quite insane.
You <em>know</em> <code>d</code> shall be "large".</p>

<p>You have an opportunity to use <code>Arrays.sort()</code> with cost O(d log d),
yet you went for the quadratic solution, O(d**2).</p>

<h1>printing</h1>

<p>I don't understand the comment "Printing the exSub array in each iteration".
Why would you want to spend time doing that?
Only the return value <code>count</code> is relevant for evaluating your submission.
Similarly for your debug print of <code>mid</code>.</p>

<h1>algorithm - heap</h1>

<p>You (re-)sort <code>d</code> elements <strong>every</strong> <strong>single</strong> <strong>time</strong>.
Even though only a single value entered the <code>d</code>-day window,
and a single value left.
Maintain a <a href="https://en.wikipedia.org/wiki/Heap_(data_structure)" rel="nofollow noreferrer">heap</a>, at cost of O(log d) for each operation.</p>

<h1>algorithm - counting values</h1>

<p>Go back and read the problem.</p>

<p>Are expenditures floats of arbitrary precision? No, they are integers.</p>

<p>Can expenditures have arbitrary magnitudes as large as the U.S. debt?
No, only two hundred and one distinct values are allowed.</p>

<p>Recall that a median value separates the low half from the high half of the values.
Maintain 201 counts,
and a circular FIFO list of daily expenditures
(or continue using the giant <code>n</code>-entry input array,
indexing it <code>d</code> behind today).
Increment a count corresponding to today's expenditure,
and decrement a count for the day exiting the <code>d</code>-day window.
Identify the point at which the sum of the low counts
matches the sum of the high counts, that's your median.
You can do it in time proportional to 201 (<em>much</em> less than <code>d</code>),
or you can choose to do it faster than that
by maintaining cumulative sums
and remembering what yesterday's median was.
Good luck!</p>
    </div>