<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are some things that may help you improve your code.</p>

<h2>Decompose your code into smaller functions</h2>

<p>All of the logic here is in a single <code>parse</code> function.  It would make the code easier to read, understand and maintain if it were decomposed into smaller functions.</p>

<h2>Think carefully about signed vs. unsigned integers</h2>

<p>The <code>found</code> variable is specified as <code>std::int64_t</code> but it's compared with <code>std::string::npos</code> which isn't necessarily that.  To make sure they match most easily we could simply use <code>auto</code> and initialize the variable:</p>

<pre><code>auto found{std::string::npos};
</code></pre>

<h2>Provide complete code to reviewers</h2>

<p>This is not so much a change to the code as a change in how you present it to other people.  Without the full context of the code and an example of how to use it, it takes more effort for other people to understand your code.  This affects not only code reviews, but also maintenance of the code in the future, by you or by others.  Here's the test code I used to drive your code.  </p>

<pre><code>#include &lt;string&gt;
#include &lt;map&gt;
#include &lt;vector&gt;
#include &lt;sstream&gt;
#include &lt;iostream&gt;
#include &lt;fstream&gt;
#include &lt;cstdint&gt;
#include &lt;iterator&gt;

// posted code goes here

std::ostream&amp; operator&lt;&lt;(std::ostream&amp; out, const Reagent&amp; r) {
    return out &lt;&lt; r.units &lt;&lt; ' ' &lt;&lt; r.chemical;
}

std::ostream&amp; operator&lt;&lt;(std::ostream&amp; out, const std::vector&lt;Reagent&gt;&amp; v) {
    std::copy(v.begin(), v.end(), std::ostream_iterator&lt;Reagent&gt;{out, ", "});
    return out;
}

int main() {
    auto reactions{parse("test.in")};
    for (const auto &amp;r : reactions) {
        std::cout &lt;&lt; r.second.first &lt;&lt; ' ' &lt;&lt; r.first &lt;&lt; " &lt;== " &lt;&lt; r.second.second &lt;&lt; '\n';
    }
}
</code></pre>

<h2>Use <code>std::istream</code> instead of file name as input</h2>

<p>This could be much more general and testable if, instead of requiring a string for a filename, the <code>parse</code> function took a <code>std::istream</code> reference instead.  That would, for instance, allow the use of a <code>string_stream</code> for testing.</p>

<h2>Prefer <code>unordered_map</code> to <code>map</code> for performance</h2>

<p>There is not really a compelling reason to maintain order in for the list of <code>Reactions</code> here, so a <code>std::unordered_map</code> would work as well as a <code>std::map</code> but likely have better perfomance.  In general, the unordered varieties of map, set, multimap and multiset should be preferred if the ordering is not needed.</p>

<h2>Reconsider the approach</h2>

<p>Right now, each input line is effectively cloned and scanned multiple times.  This isn't really necessary because one could perform the parsing differently.  One way would be to use <code>std::regex</code> but while it is flexible, that approach is not very fast.  Another way would be to simply scan one word at a time and use a state machine to keep track of what token is expected next.  This would also help with the next suggestion.  Here's an example of the state machine approach:</p>

<pre><code>Reactions parse(std::istream&amp; in) {
    Reactions reactions; 
    Reagent current;
    std::vector&lt;Reagent&gt; inputs;
    bool expecting_qty{true};
    bool expecting_output{false};
    std::string token;
    while (in &gt;&gt; token) {
        if (token == "=&gt;") {
            expecting_output = true;
        } else if (expecting_qty &amp;&amp; std::isdigit(token[0])) {
            current.units = std::stol(token);
            expecting_qty = false;
        } else if (!expecting_qty) {
            if (token.back() == ',') {
                token.pop_back();
            }
            current.chemical = token;
            if (expecting_output) {
                reactions.insert({current.chemical, {current.units, inputs}});
                inputs.clear();
                expecting_output = false;
            } else {
                inputs.push_back(current);
            }
            expecting_qty = true;
        } else {
            in.setstate(std::ios_base::failbit);
            return reactions;
        }
    }
    return reactions;
}
</code></pre>

<h2>Consider emitting diagnostics on input errors</h2>

<p>If anything in the input fails, nothing good or useful happens in the code.  I'd suggest that at the minimum, the code should do this:</p>

<pre><code>in.setstate(std::ios_base::failbit);
</code></pre>

<p>That would allow the caller to at least know that something had failed.</p>

<h2>Eliminate redundant <code>typedef</code></h2>

<p>We have this <code>struct</code> within the code:</p>

<pre><code>typedef struct Reagent {
    std::int64_t units;
    std::string chemical;
} Reagent;
</code></pre>

<p>While common in C, the <code>typedef</code> is wholly unnecessary in C++.</p>
    </div>