<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Based on <a href="https://codereview.stackexchange.com/a/206866/59161">@Graipher</a>'s review I turned my utility into a <code>NugGetClient</code> class that can now be used by the <code>with</code> statement and automatically manges the <code>resources.Session</code> object. I also turned all <code>if</code>s into postive ones and while reading the docs I've found that the magic status-code <code>200</code> can be replaced with the convenient attribute <code>requests.codes.ok</code>.</p>

<p>This might still not be perfect, but hey, this is my first <em>real</em> <code>class</code> in python and at the same time a <em>disposable</em> one!</p>

<pre><code>import time
import json
import requests

from pprint import pprint
from reusable import log_elapsed

DELETE_DELAY_IN_SECONDS = 1
SERVICE_INDEX_URL = "https://api.nuget.org/v3/index.json"

def load_config():
    with open("config.json", "r") as f:
       return json.load(f)

class NugGetClient:

    def __init__(self, apiKey):    
        self.__apiKey = apiKey        

    def __enter__(self):
        self.nuGet_session = requests.Session()
        self.nuGet_session.headers={"X-NuGet-ApiKey": self.__apiKey}
        return self

    def get_search_url(self):
        response = self.nuGet_session.get(SERVICE_INDEX_URL)
        if response.status_code == requests.codes.ok:
            resources = response.json()["resources"]
            return self.get_resource_url(resources, "SearchQueryService")
        else:
            raise Exception("Could not reach service index.")    

    def get_resource_url(self, resources, type):
        return [x for x in resources if x["@type"] == type][0]["@id"]

    def find_my_packages(self, search_url):
        query = "author:me&amp;take=100"
        #GET {@id}?q={QUERY}&amp;skip={SKIP}&amp;take={TAKE}&amp;prerelease={PRERELEASE}&amp;semVerLevel={SEMVERLEVEL}"
        response = self.nuGet_session.get(f"{search_url}?q={query}")
        if response.status_code == requests.codes.ok:
            #https://docs.microsoft.com/en-us/nuget/api/search-query-service-resource
            return response.json()["data"]
        else:
            raise Exception("Could not search for packages.")

    def get_obsolete_packages(self, data):
        versions_to_unlist = [{"id": x["id"], "previous": [v["version"] for v in x["versions"][:-1]] } for x in data]
        return versions_to_unlist

    def unlist_packages(self, packages_to_unlist, list_only=True):
        for unlist in packages_to_unlist:
            package_id = unlist["id"]
            pprint(package_id)
            for version in unlist["previous"]:
                url = f"https://www.nuget.org/api/v2/package/{package_id}/{version}"
                if list_only:
                    print(f"\t{url} - this is just a test")
                else:
                    # we don't want to remove them too fast
                    time.sleep(DELETE_DELAY_IN_SECONDS)
                    response = self.nuGet_session.delete(url)
                    print(f"\t{url} - {response.status_code}")  

    def __exit__(self, exc_type, exc_value, traceback):
        self.nuGet_session.close()

# --- --- ---

#@log_elapsed
def main():

    config = load_config()

    with NugGetClient(config["apiKey"]) as nuGet:
        search_url = nuGet.get_search_url()
        my_packages = nuGet.find_my_packages(search_url)
        obsolete_packages = nuGet.get_obsolete_packages(my_packages)
        nuGet.unlist_packages(obsolete_packages, list_only=True)

if __name__ == '__main__':
    main()
</code></pre>
    </div>