<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>PEP 8</h1>

<p>The <a href="https://www.python.org/dev/peps/pep-0008/#naming-conventions" rel="nofollow noreferrer">Style Guide for Python Code</a>’s naming conventions recommends again <code>mixedCase</code> identifiers.  <code>CapWords</code> are for classes and types, <code>snake_case</code> is for functions, methods and variables.  Thus, <code>getMaxCharCount</code>, <code>maxCount</code> and <code>finalWord</code> should be renamed to <code>get_max_char_count</code>, <code>max_count</code> and <code>final_word</code>.</p>

<h1>string</h1>

<p><code>string</code> is an importable module in Python.  Its use as an identifier should be discouraged.</p>

<h1>Intervals</h1>

<p><code>interval</code> is a perfectly fine variable, but <code>interval[0]</code> and <code>interval[1]</code> are confusing.  Are those the zeroth and first intervals in a list of intervals?  It would be better to unpack the interval immediately into the starting and ending values of the interval.  This can even be done directly by the <code>for</code> statement:</p>

<pre><code>    for start, end in queries:
        if start == end:
            ...
</code></pre>

<h1>Special Casing</h1>

<p>You have special-cased the length 1 interval.  Why?  Does the general purpose version of the code not work for the length one interval?  Is it too slow?  Is the special-case a common occurrence, or does checking for it actually slow down the general purpose case be introducing an unnecessary <code>if</code> statement?</p>

<h1>List Comprehension</h1>

<p>If we remove the special-case, your code reads approximately:</p>

<pre><code>    max_count = []
    for start, end in queries:
        max_count.append(...)
</code></pre>

<p>This pattern is usually re-written using list-comprehension, since it is much faster than repeated calls to <code>.append()</code>:</p>

<pre><code>    max_count = [ ... for start, end in queries ]
</code></pre>

<p>The only issue is what should be used in place of <code>...</code>.  Prior to Python 3.7, there was no easy way to refer to the result of a computation multiple times in one expression.  Python 3.8 introduces the “walrus operator” (<code>:=</code>) which allows variables to be assigned inside of other expressions.  We can use this to avoid referencing and slicing <code>final_word</code> twice:</p>

<pre><code>    max_count = [ (span := final_word[start:end+1]).count(max(span)) for start, end in queries ]
</code></pre>

<h1>Reworked Code (Python 3.8)</h1>

<pre><code>def get_max_char_count(s, queries):
    final_word = s.lower()
    return [(span := final_word[start:end+1]).count(max(span)) for start, end in queries]
</code></pre>

<p>This code may be slightly faster than your original code, with the speed up mostly from replacing <code>.append</code> with list comprehension.  To really see significant speed gains, you need to improve the algorithm.</p>

<h1>Algorithmic Improvement</h1>

<p>Since this is a coding challenge, I won’t give you code for the better algorithm, but I will get you started in the right direction.</p>

<p>How many times are you looking at any given character of <code>final_word</code>?</p>

<p>Consider the following test case:</p>

<pre><code>2000
AAAAAAAAAAA...[2000 A’s] ... AAAAAAAAAAAA
2000
0 1999
0 1999
0 1999
  :      :
[2000 duplicate lines]
  :      :
0 1999
0 1999
</code></pre>

<p>The result should be a list of 2000 copies of the number 2000.  We did this in our head.  Your algorithm will test each character 4000 times; 2000 times during <code>max</code> and another 2000 times during <code>count</code>.  Clearly, we’ve got room for improvement.  The ideal would be if each character was only tested twice, once during <code>max</code>, and once during <code>count</code>.  But how can we achieve this?</p>

<p>Consider another test case:</p>

<blockquote class="spoiler">
  <p>     20<br>
     AAAABBBBCCCCBBBBCCCC<br>
     3<br>
     0 11<br>
     4 15<br>
     8 19  </p>
</blockquote>

<p>Can you see any way of computing intermediate results and reusing them?</p>

<blockquote class="spoiler">
  <p> Can you divide this into 5 subproblems?  Can you combine the first 3 subproblems together to get the first answer?  4 A’s, 4 B’s and 4 C’s makes 4 C’s.  Subproblems 2 to 4 to get the second answer?  4 B’s, 4 C’s and 4 B’s makes 4 C’s.  Subproblems 3 to 5 to get the 3rd answer?  4 C’s, 4 B’s and 4 C’s makes 8 C’s.  How would you store the subproblems results?  Where did we get the boundaries of the subproblems?</p>
</blockquote>
    </div>