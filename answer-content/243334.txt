<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre class="lang-java prettyprint-override"><code>public class MyCustomThreadPool {
</code></pre>

<p>In my opinion, <code>My...</code> names are useless, don't start with that practice. <code>CustomThreadPool</code> is an acceptable name enough for a test.</p>

<hr>

<pre class="lang-java prettyprint-override"><code>while (!taskQueue.isEmpty());
</code></pre>

<p>You might want to choose a different form for waiting instead of a busy-loop. Having a <code>Thread.sleep</code> in there would already help, but even better would be to be notified every time a thread finishes its work.</p>

<hr>

<pre class="lang-java prettyprint-override"><code>public void shutdown() {}
</code></pre>

<p>That method should most likely block until the last thread has exited.</p>

<hr>

<pre class="lang-java prettyprint-override"><code>if (canAddTasks) {
</code></pre>

<p>This should either throw or return at least a <code>boolean</code> whether it was not possible to add a task.</p>

<hr>

<pre class="lang-java prettyprint-override"><code>Worker worker = getFreeWorker();
if (worker == null) {
    System.out.println("No free worker available. Creating new thread... Current count: " + workers.size());
    worker = new Worker(workers.size() + 1);
    workers.add(worker);
    Thread thread = new Thread(worker);
    thread.start();
} else {
    System.out.println("Reusing thread " + worker.getWorkerNumber());
}
</code></pre>

<p>You have a slight race-condition there which you should be aware of. Between enqueuing the task and starting the new thread, another one might have finished and might already have grabbed the task. That is not a problem in itself, but you might spawn tasks unnecessarily.</p>

<hr>

<pre class="lang-java prettyprint-override"><code>worker = new Worker(workers.size() + 1);
</code></pre>

<p>Your pool can only grow, it never shrinks.</p>

<hr>

<pre class="lang-java prettyprint-override"><code>private Worker getFreeWorker() {
    for (Worker worker : workers) {
        if (!worker.isBusy()) {
            return worker;
        }
    }
    return null;
}
</code></pre>

<p>That is a race-condition right there. Again, not a problem in your implementation, but given the method you'd expect to get a <code>Worker</code> which is free, which might or might not be the case at the point when you receive the instance. It would be better to have a <code>boolean isFreeWorkerAvailable()</code> method which does only return <code>true</code> or <code>false</code>.</p>

<hr>

<pre class="lang-java prettyprint-override"><code>while (isRunning()) {
    Runnable task = taskQueue.poll();
</code></pre>

<p>Again, you're busy waiting here. Blocking until something becomes available would be better. You want to use the <code>BlockingQueue.poll(long timeout, TimeUnit unit)</code> method, which allows you to wait some time (let's say 1 second) until something is available or not. That means that if no task is available, your thread will still check every second if it should exit.</p>

<hr>

<pre class="lang-java prettyprint-override"><code>public synchronized void setBusy(boolean busy) {
</code></pre>

<p>This should not be a <code>public</code> method, anything external to the worker should not be able to set its state.</p>

<hr>
    </div>