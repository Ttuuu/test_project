<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The <em>main</em> issue I see is that the looping doesn't accomplish anything useful, since you never reference the <code>li</code> that you iterate over - just take the <code>sortOrder</code> from the form and concatenate it into the selectors you try to find.</p>

<p>Because you reference the <code>#References_##_UI</code> twice, consider saving it in a variable first - or, even better, since this is jQuery, you can chain methods on the selected collection.</p>

<p>It sounds like the <code>data.referenceText</code> is <em>text</em>, not HTML markup - in which case you should insert it into the DOM with <code>.text</code>, not with <code>.html</code>. (<code>.text</code> is faster and safer)</p>

<pre><code>$('#submit-form').submit(function (event) {
  event.preventDefault();
  const sortOrder = $(this).data('sortorder');
  $(`#References_${sortOrder}_UI`)
    .text(data.referenceText)
    .prop('href', data.GuidelineExternalReference);
  $(`input[name='References[${sortOrder}].Text']`).val(data.referenceText);
  $(`input[name='References[${sortOrder}].Link']`).val(data.GuidelineExternalReference);
  $(`input[name='References[${sortOrder}].GuidelineId']`).val(data.Value);
});
</code></pre>

<p>The above looks <em>mostly</em> reasonable to me, but I'd change the HTML too, if that's permitted. Numeric-indexed IDs are never a good idea; IDs should be reserved for singular, unique elements. (You can also consider not using IDs at all, because every time there is one, a <a href="https://stackoverflow.com/questions/3434278/do-dom-tree-elements-with-ids-become-global-variables">global variable</a> is created, and globals can result in confusing behavior).</p>

<p>A related issue is that the submit handler here is attached to:</p>

<pre><code>$('#submit-form').submit(
</code></pre>

<p>Since IDs must be unique in a document, this will only attach a listener to a single form, but it sounds like you have multiple forms that you want to listen for <code>submit</code> events to.</p>

<p>To solve the duplicate IDs and the numeric-indexed IDs, use the already-existing class to select the forms instead, and once you have a reference to the form in the handler, use <code>.find</code> to select its children elements that need to be populated.</p>

<p>Your 3 hidden inputs are somewhat repetitive. It might look somewhat tolerable now, but if you might add more, or for the general case of linking each data property name to a particular input, consider using an object or array linking each property to the selector:</p>

<pre><code>const inputNamesByDataProps = {
  referenceText: 'Text',
  GuidelineExternalReference: 'Link',
  Value: 'GuidelineId',
};
$('.form-horizontal').on('submit', (event) =&gt; {
  event.preventDefault();
  const $this = $(this);
  $this.find('a')
    .text(data.referenceText)
    .prop('href', data.GuidelineExternalReference);
  for (const [dataProp, inputName] of Object.entries(inputNamesByDataProps)) {
    $this.find(`input[name$=${inputName}]`).val(data[dataProp]);
  }
});
</code></pre>

<p>(The <code>[name$=${inputName}]</code> means: "Find an element whose <code>name</code> attribute ends with what's in <code>inputName</code>")</p>

<pre><code>&lt;form class="form-horizontal" data-sortorder="1"&gt;
  &lt;p&gt;Update Values&lt;/p&gt;
  &lt;a class="References_1_UI" href="www.current.com" target="_blank"&gt;Testing html&lt;/a&gt;.
  &lt;input type='hidden' name='References[1].Index' value="1"&gt;
  &lt;input type='hidden' name='References[1].Link' value="www.oldlink.com"&gt;
  &lt;input type='hidden' name='References[1].Id' value="88"&gt;
  &lt;div class="text-center"&gt;
    &lt;button type="submit"&gt;Save&lt;/button&gt;
    &lt;button type="button" data-dismiss="modal"&gt;Close&lt;/button&gt;
  &lt;/div&gt;
&lt;/form&gt;
</code></pre>

<p>The input HTML name attributes look pretty repetitive too, but repetitive HTML <em>usually</em> isn't something to worry about, especially if your backend logic is easier to work with when the attributes are like <code>References[1].Index</code>. But if you wanted, you could change it to something like</p>

<pre><code>&lt;input type='hidden' name='sortorder' value="1"&gt;
&lt;input type='hidden' name='Index' value="1"&gt;
&lt;input type='hidden' name='Link' value="www.oldlink.com"&gt;
&lt;input type='hidden' name='Id' value="88"&gt;
</code></pre>

<p>putting the <code>[1]</code> into the hidden <code>sortorder</code> input instead, and then parse the form values on the backend.</p>
    </div>