<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Both of these implementations are bad.</p>

<p>The first is probably worse.</p>

<ul>
<li>every node in the linked list, from <code>self.head</code> to the last node's <code>head.next</code> is unconditionally written to, which makes every cache-line/cache-page/virtual-memory-page the linked list touches "dirty" and need to be flushed/written.</li>
<li><code>self.head</code> is passed to <code>insertHelper()</code>, which recursively calls itself N times, eventually (assuming N &gt; 1) returning the value that it was given <code>self.head</code>, to be stored back into the <code>self.head</code> member.  This is a LONG critical section.  If any threading support was added, locks would need to be held way longer than necessary.</li>
</ul>

<h1>Recursion</h1>

<p>Both use recursion, and Python <a href="https://stackoverflow.com/a/13592002/3690024">does not do tail-call-optimization</a>.  This means that if your linked-list is very long, you will get a stack overflow.  There are <a href="https://stackoverflow.com/a/18506625/3690024">manual ways</a> to make your function behave in a tail-call-optimized fashion, even if Python won't do it for you, but they are complex and it is by far simpler to just use a loop.</p>

<h1>PEP-8</h1>

<ul>
<li>Both <code>insertHelper</code> and <code>insertRHelper</code> are helper functions, which should not be exposed a public methods.  They should begin with a leading underscore to indicate they are not part of the public interface.</li>
<li>The members <code>next</code>, <code>head</code>, and probably <code>data</code> should also not be public, so should be named with a leading underscore.</li>
<li>Classes are named using <code>BumpyWords</code>; functions, members and variables should all be <code>snake_case</code>.  These means <code>insertHelper</code> should be named <code>_insert_helper</code>, and so on.</li>
<li><code>if(...):</code> is not Pythonic.  The parenthesis are unnecessary.</li>
</ul>

<h1>Tail</h1>

<p>The best solution would be to maintain a <code>._tail</code> member in the <code>LinkedList</code>:</p>

<pre><code>class LinkedList:
    """Description of class here"""

    def __init__(self):
        self._head = None
        self._tail = None

    def insert(self, data: Node) -&gt; None:
        """Description of the insert function here"""

        if self._tail:
            self._tail._next = Node(data)
            self._tail = self._tail._next
        else:
            self._head = self._tail = Node(data)
</code></pre>

<p>Now, insertions at the tail of the <code>LinkedList</code> are <span class="math-container">\$O(1)\$</span>.</p>

<h1>Naming</h1>

<p>As mentioned by <a href="https://codereview.stackexchange.com/users/8999/matthieu-m">Matthieu M.</a> in the comments:</p>

<blockquote>
  <p>I would also consider <em>renaming</em> here: <code>insert</code> should be <code>append</code>, to make it clear where the insert occurs, and offer a path to proposing different insertions such as <code>prepend</code>, or <code>insert</code> with an index. </p>
</blockquote>
    </div>