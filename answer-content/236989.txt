<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>double getDeterminant(std::vector&lt;std::vector&lt;double&gt;&gt; vect, int dimension);
</code></pre>

<p>This will create a copy of the <code>std::vector</code>. For small <code>std::vector</code> this is not a problem, but it's good to make it a habit to pass complex data structures as <code>const&amp;</code>, so the copy will not be created:</p>

<pre><code>double getDeterminant(const std::vector&lt;std::vector&lt;double&gt;&gt;&amp; vect, int dimension);
</code></pre>

<p>To make your code more readable, you can use an alias for the long vector name:</p>

<pre><code>using Matrix = std::vector&lt;std::vector&lt;double&gt;&gt;;
double getDeterminant(const Matrix&amp; vect, int dimension);
</code></pre>

<p>Lastly it is not necessary to pass the dimension, as it is accessible from the vector class:</p>

<pre><code>double getDeterminant(const Matrix&amp; vect);  
// instead dimension = vect.size();
</code></pre>

<p><code>std::endl</code> will flush the output buffer. Only use it, if you want the buffer to be flushed. Writing to the screen takes a fair amount of time (compared to other instructions). Instead just use <code>\n</code>, it is cross-platform compatible</p>

<pre><code>std::cin &gt;&gt; dimension;
std::cout &lt;&lt; '\n';
</code></pre>

<p>This terminates the program. A better way of handling the erroneous input would be to allow the user to repeat the line</p>

<pre><code>if(number.find_first_not_of("0123456789.-") != std::string::npos) {
     std::cout &lt;&lt; "ERROR: Not only numbers entered." &lt;&lt; std::endl;
     return -1;
}
</code></pre>

<p>Furthermore, this still allows for invalid numbers, I could input something like <code>.-.-.-.</code> for example. </p>

<p>This   </p>

<pre><code>number = number + str[k];
</code></pre>

<p>Can be replaced by the shorter version  </p>

<pre><code>number += str[k];
</code></pre>
    </div>