<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Algorithm</h1>
<p>I don't understand the purpose of comparing the timestamp of the next datum here:</p>
<blockquote>
<pre><code>if (i &lt; len(data)-1 and data[i][0] == data[i+1][0]):
  continue
</code></pre>
</blockquote>
<p>The two events happened during the same second, but it's reasonable to assume that they are ordered, and therefore we should consider the total within that single second, unless the problem statement says otherwise.</p>
<p>Without that constraint, we have no need for the index <code>i</code>, and can consider just the members of the input data; we can give the elements meaningful names:</p>
<pre><code>  for time,quantity,direction in data:
</code></pre>
<p>Now, we know we won't find a new maximum when people are exiting (assuming we're not given negative numbers of people), so we can move the test into the <code>+=</code> branch:</p>
<pre><code>    if direction == 1:
      # Some people entered
      people += quantity
      # Have we reached a new maximum?
      if people &gt; max_people:
        max_time, max_people = time, people
    elif direction == 0:
      # Some people left
      people -= quantity
    else:
      raise ValueError(direction)
</code></pre>
<h1>General review</h1>
<ul>
<li><p>PEP8 recommends four spaces per indent level.</p>
</li>
<li><p>This doc-comment is both incomplete and incorrect:</p>
<blockquote>
<pre><code>"""
output: 1487800378 # since the increase in the number of people
                   # in the mall is the
"""
</code></pre>
</blockquote>
</li>
<li><p>The doc-comment is in the wrong place (it should be just within the function body).</p>
</li>
<li><p>We should use a <code>main</code> guard.</p>
</li>
<li><p>Consider using <code>doctest</code> to provide more test cases.</p>
</li>
</ul>
<hr>
<h1>Improved code</h1>
<pre><code>def find_busiest_period(data):
    """
    Find the timestamp when the greatest number of people
    are in the building.

    &gt;&gt;&gt; find_busiest_period([]) is None
    True

    &gt;&gt;&gt; find_busiest_period([ [0, 0, 2] ])
    Traceback (most recent call last):
        ...
    ValueError: 2

    &gt;&gt;&gt; find_busiest_period([ [0, -5, 0] ])
    Traceback (most recent call last):
        ...
    ValueError: -5

    &gt;&gt;&gt; find_busiest_period([ [0, 5, 1], [2, 5, 1], [3, 5, 0] ])
    2

    &gt;&gt;&gt; find_busiest_period([ [1487799425, 14, 1], \
                              [1487799425, 4,  0], \
                              [1487799425, 2,  0], \
                              [1487800378, 10, 1], \
                              [1487801478, 18, 0], \
                              [1487801478, 18, 1], \
                              [1487901013, 1,  0], \
                              [1487901211, 7,  1], \
                              [1487901211, 7,  0] ])
    1487901211
    """  
    people = 0 
    max_time = None
    max_people = 0

    for time,quantity,direction in data:
        if quantity &lt; 0:
            raise ValueError(quantity)
        if direction == 1:
            # Some people entered
            people += quantity
            # Have we reached a new maximum?
            if people &gt; max_people:
                max_time, max_people = time, people
        elif direction == 0:
            # Some people left
            people -= quantity
        else:
            raise ValueError(direction)

    return max_time 


if __name__ == "__main__":
    import doctest
    doctest.testmod()
</code></pre>
    </div>