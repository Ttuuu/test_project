<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Let's review each code segment one by one:</p>

<pre><code>public class UserController : Controller
{
    private readonly ILogger&lt;UserController&gt; _logger;
    private readonly IViewModelService _vmService;

    public UserController(ILogger&lt;UserController&gt; logger, IViewModelService vmService)
    {
        _logger = logger;
        _vmService = vmService;
    }

    public async Task&lt;IActionResult&gt; Index()
    {
        return View(await _vmService.GetIndexVM());
    }
}
</code></pre>

<p>I would generally recommend to avoid code like this:</p>

<pre><code>return View(await _vmService.GetIndexVM());
</code></pre>

<p>It is hard to add proper error handling, add transformation logic, add conditional branching, etc. A better approach would be to separate these two operations:</p>

<pre><code>var indexViewModel = await _vmService.GetIndexVM();
return View(indexViewModel);
</code></pre>

<hr>

<pre><code>public async Task&lt;UserListVM&gt; GetIndexVM()
{
    return new UserListVM()
    {
        UserList = await _userRepo.GetUserList()
    };
}
</code></pre>

<p>First of all the same applies here as above, do not mix object creation logic and async calls.</p>

<p>Secondly, in this simple code you have repeated four times the underlying collection type, which is an implementation detail. If you need to change that implementation detail in the lower layer that would propagate through several layers. Remember that hiding implementation details will help you minimize the scope of a change. A better approach would be:</p>

<pre><code>public async Task&lt;UsersVM&gt; GetIndexVM()
{
    return new UsersVM()
    {
        User = await _userRepo.GetUsers()
    };
}
</code></pre>

<p>There is another thing, this service now has two responsibilities:
1) Retrieve data via a lower layer
2) Transform data to the presentation layer</p>

<p>In other words, this layer is an <strong>adapter</strong> between your presentation layer and repository layer. Generally speaking the service layer is the place where your business logic should reside. Because there is no business logic here, that's why it acts as an adapter.</p>

<p>I have seen the following two approaches regarding object mapping:</p>

<ol>
<li>Each layer transforms its objects to the lower layer's object
model</li>
<li>Each layer accepts upper layer's object model and it
transforms it into its own model   </li>
</ol>

<p>The first one fits nicely into the n-layer architecture model where each layer only knows about that layer, which is directly beneath it. So, presentation layer knows about service layer. Service layer knows about repository layer.</p>

<p>The second approach violates this rule. Service layer knows about repository layer and knows about presentation layer's domain model. It is not bad, but the first approach (in my opinion) separates the concerns better. </p>

<hr>

<pre><code>public class UserListVM
{
    public IQueryable&lt;DimUser&gt; UserList { get; set; }
}
</code></pre>

<p>Here your naming and data type is not matching. With this name you are stating that it should contain a <code>List</code>, which implies that you could use such operators like <code>Add</code>, <code>Remove</code>, etc. <code>IQueryable</code> does not provide such API. </p>

<p><code>IQueryable</code> is a type, which is used for <em>deferred execution</em>. In other words it indicates that <strong>this is just a query not the materialised form of the query</strong>. The problem with this is that it will execute the query when you somehow iterate through it (via <code>foreach</code> or calling <code>.Count</code>, etc.) If you do this in your view then your repository's <strong>datacontext</strong> might already be disposed.</p>

<p>A better approach would be to expose it like this:</p>

<pre><code>public class UsersVM
{
    public IList&lt;DimUser&gt; Users{ get; set; }
}
</code></pre>

<hr>

<p>Your test's <em>Arrange</em> part looks good, so I will spend some thought on the rest:</p>

<pre><code>// Act
var result = await userController.Index();
var viewResult = Assert.IsType&lt;ViewResult&gt;(result);
var model = Assert.IsType&lt;UserListVM&gt;(viewResult.ViewData.Model);

// Assert
Assert.IsType&lt;UserListVM&gt;(model);
</code></pre>

<p>Your <em>Act</em> section should consist <strong>only</strong> of the call of the <code>Index</code> function of the <code>userController</code>. The assertions should go the under the <em>Assert</em> section.</p>

<p>I would also consider to use <code>IsAssignableForm&lt;T&gt;</code> instead of <code>IsType&lt;T&gt;</code>, because the former supports inheritance as well.</p>
    </div>