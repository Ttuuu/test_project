<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Style notes</h2>
<ul>
<li>Not putting <code>{</code>, <code>}</code> around single line statement blocks is a bad habit. Always delimit statement code blocks.</li>
<li>In <code>compressCharacters</code> <code>newArray</code> should be a constant. In <code>groupCharacters</code> <code>arr</code> should be a constant.</li>
<li>Consistent naming is important. Your naming is all over the place. You call a string, characters (in <code>compressCharacters</code>), string (in <code>compressString</code>), <code>signature</code>, and <code>e</code> in the <code>forEach</code>. A character you call <code>element</code>. You abbreviate an array to <code>arr</code> in one function and call it <code>newArray</code> in another. Most of the names are describing the type and not the abstracted data that they hold.</li>
<li>Don't add useless or redundant code. In <code>compressCharacters</code> you create a variable <code>result</code> that you do nothing with. Not to mention that <code>forEach</code> does not have a return defined. Also <code>result</code> in <code>groupCharacters</code> is never used.</li>
<li>Don't declare variables outside the scope that they are to be used. <code>newSignature</code> is only used inside <code>reduce</code> but declared outside the callback.</li>
</ul>
<p>Functional programing means that functions should not have side effect (change the state of anything outside the function's scope.) The <code>reduce</code> callback uses the array <code>arr</code> which breaks the no side effects rule. And the <code>forEach</code> pushes to <code>arr</code> which is also outside the <code>forEach</code> callbacks scope (use <code>map</code> or <code>reduce</code> in that case).</p>
<p>Applying the above you would get something like the following code.</p>
<pre><code>const groupRuns = str =&gt; [...str].reduce((groups, char) =&gt; {
        const last = groups.length - 1;
        if (last &lt; 0 || groups[last][0] !== char) { groups.push(char) }
        else { groups[last] += char }
        return groups;
    }, []);

const concatGroups = groups =&gt; groups.reduce((str, g) =&gt; 
        str + (g.length &gt; 2 ? g[0] + g.length : g)
    , "");

const compressString = str =&gt; concatGroups(groupRuns(str));

const signature = `aabcbbbaaaaaabcccccdddddddbbba`;
compressString(signature);
</code></pre>
<p>Note that rather than add numbers to groups of size 2 the group must be 3 or larger.</p>
    </div>