<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I can't comment on Ruby style, but there are a couple of algorithmic points which don't need Ruby knowledge to identify.</p>

<hr>

<blockquote>
<pre><code>  if @stack.length &gt;= 2
    unless WORDS.grep(/^#{@letters.join}/).any?
      pop_stack
      return
    end
  end
</code></pre>
</blockquote>

<p>Although you've preprocessed the wordlist into a sorted data structure with logarithmic time lookup, <code>grep</code> seems to be a method from <code>Enumerable</code> and I can't see any indication that there are special cases. In other words, this is (worst case) doing a linear scan of the entire wordlist. There should be a massive speed improvement either by exploiting the <code>SortedSet</code> interface or (more likely) by preprocessing the wordlist into a <a href="https://en.wikipedia.org/wiki/Trie" rel="nofollow noreferrer">trie</a>. The latter gives the advantage that you can pass the current node down the stack and not have to run the entire route from the root every time.</p>

<hr>

<blockquote>
<pre><code>    # Check whether the new position had been visited in current stack
    visited = false
    @stack.reverse_each do |pos|
      if pos == npos
        visited = true
        break 
      end
    end
</code></pre>
</blockquote>

<p>Again, this is doing a linear scan for something which doesn't need to be so slow. The OO way would be to use a <code>Set</code>, which ought to have fast <code>member?</code> checks. The optimisation-over-all approach would be to use an integer as a bitmask. Either approach requires minimal maintenance on the stack.</p>
    </div>