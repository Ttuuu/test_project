<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>        protected IDictionary&lt;TKey, TValue&gt; Dictionary { get; }
</code></pre>
</blockquote>

<p>I don't find this to be a very helpful name. FWIW my default choice for something like this would be <code>Wrapped</code>.</p>

<hr>

<blockquote>
<pre><code>        private const string CountString = "Count";
        private const string IndexerName = "Item[]";
        private const string KeysName = "Keys";
        private const string ValuesName = "Values";
</code></pre>
</blockquote>

<p>Why not <code>nameof</code> (except for <code>IndexerName</code>, obviously)?</p>

<hr>

<p>IMO there are two useful constructors missing: <code>ObservableDictionary(IEnumerable&lt;KeyValuePair&lt;TKey, TValue&gt;)</code> and similarly with a comparer. If you've left them out because YAGNI then fair enough, but in that case I'm surprised at how many constructors were necessary.</p>

<hr>

<blockquote>
<pre><code>                InsertObject(
                    key : key, 
                    value : value,
                    appendMode :  AppendMode.Replace, 
                    oldValue : out var oldItem);

                if (oldItem != null)
</code></pre>
</blockquote>

<p>Hmm. Technically this isn't quite correct: after <code>dict[foo] = null;</code> a call to <code>dict[foo] = bar;</code> should be considered a replacement rather than an addition. That's why <code>TryGetValue</code> returns a <code>bool</code> and has an out-parameter for the value, rather than just returning the value and letting you test whether it's null. I suggest reworking so that <code>InsertObject</code> returns a <code>bool</code>.</p>

<hr>

<blockquote>
<pre><code>        public ICollection&lt;TKey&gt; Keys =&gt; Dictionary.Keys;

        public ICollection&lt;TValue&gt; Values =&gt; Dictionary.Values;
</code></pre>
</blockquote>

<p>My biggest concern with this implementation: shouldn't these two properties <em>also</em> be observable? I would rather bind an <code>Items</code> property to <code>Keys</code> than bind it to the dictionary with an <code>IValueConverter</code> to select the key.</p>

<hr>

<blockquote>
<pre><code>        public void Add(TKey key, TValue value)
        {
            InsertObject(
                key: key,
                value: value,
                appendMode: AppendMode.Add);

            OnCollectionChanged(
                action: NotifyCollectionChangedAction.Add,
                changedItem: new KeyValuePair&lt;TKey, TValue&gt;(key, value));
        }

        public void Add(KeyValuePair&lt;TKey, TValue&gt; item)
        {
            InsertObject(
                key: item.Key,
                value: item.Value,
                appendMode: AppendMode.Add);

            OnCollectionChanged(
                action: NotifyCollectionChangedAction.Add,
                changedItem: new KeyValuePair&lt;TKey, TValue&gt;(item.Key, item.Value));
        }
</code></pre>
</blockquote>

<p>DRY: one of these methods should call the other one.</p>

<hr>

<blockquote>
<pre><code>            var removedItems = new List&lt;KeyValuePair&lt;TKey,TValue&gt;&gt;(Dictionary.ToList());
</code></pre>
</blockquote>

<p>Either use <code>new List&lt;...&gt;(Dictionary)</code> or use <code>Dictionary.ToList()</code>: you don't need both. (I prefer <code>ToList()</code> because it saves writing out the full type).</p>

<hr>

<blockquote>
<pre><code>        public bool Contains(KeyValuePair&lt;TKey, TValue&gt; item)
        {
            return Dictionary.Contains(item);
        }

        public bool ContainsKey(TKey key)
        {
            return Dictionary.ContainsKey(key);
        }
</code></pre>
</blockquote>

<p>Does your style guide allow <code>=&gt;</code> notation for properties but not methods?</p>

<hr>

<blockquote>
<pre><code>        private void OnCollectionChanged(NotifyCollectionChangedAction action, KeyValuePair&lt;TKey, TValue&gt; changedItem)
        {
            OnPropertyChanged();
            var handler = CollectionChanged;
            handler?.Invoke(
                this, new NotifyCollectionChangedEventArgs(
                    action:action,
                    changedItem: changedItem));
        }
</code></pre>
</blockquote>

<p>What about the index of the changed item? I know it's a pain in the neck to implement, but it ensures maximum compatibility. If YAGNI, document that.</p>

<hr>

<p>Finally, overall the code looks quite good. It uses modern syntactic sugar, and for the most part is well decomposed.</p>
    </div>