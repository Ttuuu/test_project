<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You have no synchronization for these package variables</p>
<pre><code>var shredPath, shredFlag string
</code></pre>
<p>Therefore,</p>
<pre><code>fmt.Println(shredPath, shredFlag)
go func() {
    for i := 0; i &lt; 1000; i++ {
        shredCmd()
    }
}()
for i := 0; i &lt; 1000; i++ {
    shredCmd()
}
fmt.Println(shredPath, shredFlag)

WARNING: DATA RACE
Found 3 data race(s)
</code></pre>
<p><code>os.Remove()</code> and commands may fail if the file is open.</p>
<p>If you encounter something unexpected, for example Windows, you do nothing, not even <code>os.Remove()</code>.</p>
<p>The <code>if</code> statements are ugly. Since <code>shredCmd()</code> is effectively a test, use the standard testing package technique, table-driven tests.</p>
<p>You provide no context for usage or testing, for example</p>
<pre><code>func ShredFile(filename string) error {
    // ...
}
</code></pre>
<p>And so on.</p>
<hr>
<p>Here's an attempt to fix some of the issues:</p>
<p><code>shred.go</code>:</p>
<pre><code>package main

import (
    "errors"
    "fmt"
    "io/ioutil"
    "os"
    "os/exec"
    "time"
)

var shredCmds = []struct {
    name, opts string
}{
    {"shred", "-u"},
    {"srm", "-f"},
    {"rm", "-Pf"},
    {"rm", "-f"},
    {"sdelete", "-a"},
}

func shredTemp(path, opts string) error {
    file, err := ioutil.TempFile("", "shredTemp.")
    if err != nil {
        return err
    }
    filename := file.Name()
    defer os.Remove(filename)
    defer file.Close()

    err = file.Close()
    if err != nil {
        return err
    }
    err = RunCmd(path, opts, filename)
    if err != nil {
        return err
    }
    return nil
}

var shredPath, shredOpts = func() (string, string) {
    for _, cmd := range shredCmds {
        path, err := exec.LookPath(cmd.name)
        if err != nil {
            continue
        }
        err = shredTemp(path, cmd.opts)
        if err == nil {
            return path, cmd.opts
        }
    }
    return "", ""
}()

func ShredFile(filename string) error {
    fi, err := os.Stat(filename)
    if err != nil {
        return err
    }
    if !fi.Mode().IsRegular() {
        err := errors.New("filename is not mode regular")
        return err
    }

    if shredPath == "" {
        return os.Remove(filename)
    }

    err = RunCmd(shredPath, shredOpts, filename)
    if err != nil {
        return err
    }
    return nil
}

func RunCmd(command string, args ...string) error {
    cmd := exec.Command(command, args...)
    cmd.Stdin = os.Stdin
    cmd.Stdout = os.Stdout
    cmd.Stderr = os.Stderr
    err := cmd.Start()
    if err != nil {
        return fmt.Errorf("RunCmd cmd=%q err=%w", command, err)
    }
    err = cmd.Wait()
    if err != nil {
        return fmt.Errorf("RunCmd cmd=%q err=%w", command, err)
    }
    return nil
}

func main() {
    file, err := ioutil.TempFile("", "ShredFile.")
    if err != nil {
        fmt.Println(err)
        return
    }
    filename := file.Name()
    file.Close()
    defer os.Remove(filename)
    start := time.Now()
    err = ShredFile(filename)
    since := time.Since(start)
    fmt.Println(filename, since, err)
}
</code></pre>
    </div>