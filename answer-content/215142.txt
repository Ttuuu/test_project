<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The space complexity of your solution is <span class="math-container">\$O(n)\$</span>. What if I told you that given the constraints in the question, you could solve this problem in <span class="math-container">\$O(1)\$</span> space?</p>

<p>Consider that you receive an already sorted list. This implies that all duplicates <strong>must be</strong> adjacent. This in turn means that for deduplicating these, you do not need to keep track of which values you already encountered.</p>

<p>Note that <code>del</code> is not necessary here. You never use <code>tmp</code> aside from assigning <code>node.next</code> to it in any case. <code>del</code> is not clearing the memory allocated to the variable (or the object it refers to), it only destroys the variable itself, the object is unaffected. As such it does <em>not</em> have any effect on the garbage-collection that python performs...</p>

<p>The following should already work just fine:</p>

<pre class="lang-py prettyprint-override"><code>def remove_duplicates(head):
    node = Node(None, head)
    while node.next:
        if node.next.data == node.data:
            node.next = node.next.next
        else:
            node = node.next
    return head
</code></pre>

<hr>

<p>Small sidenote: I really like the hack you used to ensure that you handle the <code>head is None</code> case, but you should be aware that it is just a hack. The cleaner solution to this would be:</p>

<pre class="lang-py prettyprint-override"><code>def remove_duplicates(head):
    if not head:
        return head
    node = head
    while node.next:
        # Rest of the code...
</code></pre>
    </div>