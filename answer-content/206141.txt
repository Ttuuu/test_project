<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>def change_plan
  account = Account.find(params[:id])

  old_plan = account.plan
  new_plan = Plan.find(params[:account][:plan_id])

  # maybe this method ought to return the new_plan, since it's basically repeating the line above
  account.change_plan!(params[:account][:plan_id])

  # since account has plan method on you don't necessarily need to pass the `new_plan` explicitly
  SlackService.new.plan_change(current_user, account, old_plan, new_plan).deliver
  redirect_to action: "show", id: params[:id]
end
</code></pre>

<hr>

<p>Now to address your questions</p>

<blockquote>
  <ol>
  <li>It seemed that I had to <code>require net/http</code> here in the service, but wasn't sure if that was the proper place for it.</li>
  </ol>
</blockquote>

<p>That's absolutely fine.</p>

<blockquote>
  <ol start="2">
  <li><p>I think the <code>SLACK_WEBHOOK_URL</code> and <code>SLACK_WEBHOOK_CHANNEL</code> constants should be defined here.
  These could be defined in a config file.</p></li>
  <li><p>I see many examples of services where the methods are class level, but it seemed to make sense to keep it instance level so you can define the channel on instantiation.</p></li>
  </ol>
</blockquote>

<p>It's fine to use instance methods. However, you can go one step further and define something like</p>

<pre><code>def SlackService.plane_change(current_user:, account:, old_plan: new_plan:)
  SlackService.new.plan_change(current_user, account, old_plan, new_plan).deliver
end
</code></pre>

<p>The nice thing about this is in your controller, you only have to do <code>SlackService.plane_change(current_user:, account:, old_plan: new_plan:)</code> this in the contoller, and you rid the controller of instantiating the class, calling method etc.</p>

<blockquote>
  <ol start="4">
  <li>Tying in with the above, the plan_change method accepts 4 params, but not sure if there's a cleaner way.</li>
  </ol>
</blockquote>

<p>4 is just about ok (see Sandi Metz's article <a href="https://robots.thoughtbot.com/sandi-metz-rules-for-developers#four-method-arguments" rel="nofollow noreferrer">https://robots.thoughtbot.com/sandi-metz-rules-for-developers#four-method-arguments</a>)</p>

<blockquote>
  <ol start="5">
  <li>Wasn't sure if my approach to loading the NumberHelper is correct.</li>
  </ol>
</blockquote>

<p>I am not sure I understand this question</p>
    </div>