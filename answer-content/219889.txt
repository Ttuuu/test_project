<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>Nesting promises defeats the purpose of promises as a whole. Promises can be chained together. This is done by returning a promise to <code>then</code>. </p>

<pre><code>function postTwit() {

  return saveImage(content.url, PATH)
    .then(() =&gt; {
      // Return a promise to a then. The promise returned by then
      // will not resolve until this promise resolves.
      return T.postMediaChunkedPromiseVersion()
    })
    .then(data =&gt; {
      const metaParams = {...}
      return T.post("media/metadata/create", metaParams)
    })
    .then(() =&gt; {
      const params = {...};

      return T.post("statuses/update", params)
    })
    .then(result =&gt; {
      fs.unlinkSync(PATH);
      resolve(result.data.text);
    })
    .catch(e =&gt; {
      // Log error
    })
}

// Or even better with async-await:


async function postTwit() {
  try {
    await saveImage(content.url, PATH)

    const data = await T.postMediaChunkedPromiseVersion()

    const metaParams = {...}
    await T.post("media/metadata/create", metaParams)

    const params = {...}
    const results = await T.post("statuses/update", params)

    fs.unlinkSync(PATH);
    return result.data.text

  } catch (e) {
    // Log the error
  }
}
</code></pre>

<p>If you have callback-style APIs that have no promise alternative, wrap them in promises so that you can still do chaining/async-await. Also, your error object should contain enough information so that regardless if you log in between operations or attach <code>catch</code> at the end, you can still extract enough information for the logging to make sense.</p></li>
<li><p>The <code>request</code> module has a <a href="https://www.npmjs.com/package/request-promise" rel="nofollow noreferrer">promise-based version</a>. You can use that instead of manually wrapping the vanilla API with a promise. The <code>fs</code> module also has a <a href="https://nodejs.org/api/fs.html#fs_fs_promises_api" rel="nofollow noreferrer">promise-based version</a> as well. You can also use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function" rel="nofollow noreferrer"><code>async</code></a> and <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await" rel="nofollow noreferrer"><code>await</code></a> instead of promises for less nested code.</p></li>
<li><p>Not sure how the Reddit API works. But if it works like the site, I suggest you use "New" content instead. Also, each item has an ID. Your app could keep a record of ones that have been Tweeted to avoid duplicates. This should work regardless of new or hot content, randomized or not.</p></li>
<li><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/extends" rel="nofollow noreferrer">Inheritance</a> or composition.</p></li>
</ol>
    </div>