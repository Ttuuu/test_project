<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It is a best-practice to have a clear separation between UI layer (the forms) and data access, so all your data access logic (opening the connection, issuing quries, closing it etc.) should be handled in a separate class (service) that can be reused by other classes / forms.</p>

<p>This will help you have a single place to handle specific things like logging, reverting changes on error: </p>

<pre><code>catch (Exception ex)
{
    //Discard Db Changes if error occurred:
    foreach (var ent in db.ChangeTracker.Entries())
    {
        if (ent.State == EntityState.Modified)
        {
            ent.State = EntityState.Unchanged;
        }
        else if (ent.State == EntityState.Added)
        {
            ent.State = EntityState.Detached;
        }
    }
}
</code></pre>

<p>Also, EF contexts are typically used for a short period (new + query stuff + save changes + dispose) because a Dispose does not mean a connection close (in most cases) since connection pooling kicks in. So, there is really no significant penalty, but you make sure that there no undisposed context lurking around. </p>

<p>There might be exceptions to this, such as when using a unit of work pattern which uses a connection per "unit of work" (e.g. thread, request), but stick the above for the beginning and you will be fine.</p>

<p>Also, try to create separate functions for each semantic part. E.g.: create new entity based on row, update entity based on row.</p>

<p>As a conclusion:</p>

<ul>
<li>move all database context logic into a separate class</li>
<li>put all context related logic into a <code>using</code> block that ensures context disposal</li>
</ul>
    </div>