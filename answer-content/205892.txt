<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You're missing the essential benefit of using a rolling hash:</p>
<pre><code>for (int i = 0; i &lt; tlen; i++) {
    String sub = haystack.substring(i, plen + i);
    int haystackHash = hashCode(sub);
</code></pre>
<p>Here, we examine <strong><code>plen</code></strong> characters of <code>haystack</code> at every character position, which is O(<em>mn</em>) where <code>m</code> is the haystack length and <code>n</code> the needle length.</p>
<p>By using a rolling hash, we only need to examine <strong>two</strong> characters each time around the loop (one to add to the hash, and one to remove from it).  That is of course O(<em>m</em>), which greatly improves the efficiency when <code>n</code> is large.</p>
<p>Only inspect the substring when there's a hash match, which should be infrequent.</p>
<hr>
<p>Other issues:</p>
<ul>
<li><p>Why convert <code>needle</code> and <code>sub</code> to char arrays to compare them?  You certainly don't want to do that every time around the <code>j</code> loop; you don't even need that loop if you write <code>if (sub == needle) return i;</code>.</p>
</li>
<li><p><code>if (t == true)</code> is more simply written <code>if (t)</code> since that's the only true value that <code>t</code> can hold.  Again, not needed when you eliminate the <code>j</code> loop.</p>
</li>
</ul>
<hr>
<h1>Improved code</h1>
<p>You meant to write something more like this:</p>
<pre><code>public int strStr(final String haystack, final String needle)
{
    if (haystack == null || needle == null)
        return -1;

    final int nlen = needle.length();
    final int hlen = haystack.length();
    if (nlen &gt; hlen)
        return -1;

    int needleHash = 0;
    int hash_remove = 1;
    for (char c: needle.toCharArray()) {
        needleHash = addHash(needleHash, c);
        hash_remove = addHash(hash_remove, '\0');
    }

    int haystackHash = 0;
    for (int i = 0;  i &lt; nlen - 1;  ++i) {
        haystackHash = addHash(haystackHash, haystack.charAt(i));
    }

    for (int i = 0;  i + nlen &lt; hlen;  ++i) {
        haystackHash = addHash(haystackHash, haystack.charAt(i + nlen));
        if (haystackHash == needleHash &amp;&amp; haystack.substring(i, i+nlen) == needle)
            return i;
        haystackHash -= haystack.charAt(i) * hash_remove;
    }

    return -1;
}

private int addHash(int h, char c)
{
    // calculation may overflow, but that's fine
    return 31 * h + c;
}
</code></pre>
<p>The only magic in there is the computation and use of <code>hash_remove</code>, to undo the effect of characters that have moved out of the match window.</p>
    </div>