<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are a couple of things that come to mind when reading your code. I'll write them down, in no particular order of importance.</p>

<p>Your example imports your library like this:</p>

<p><code>from converters import Converter, Converters</code></p>

<p>That's a major code smell. You import both a <code>Converter</code> <em>and</em> <code>Converters</code> from a file named <code>converters</code>. If you have 3 things with the same name, you should name them better. Why do you have a <code>Converter</code> and a <code>Converters</code> class anyway? I'd expect one to be a collection of the other, but since <code>Converter</code> already takes a template and is generic, what the heck do I need it's multiple for? It's not intuitive and probably violates the Zen of Python on half a dozen principles.</p>

<p>I see a lot of single-letter variables. While <code>T</code> is somewhat acceptable here, the rest is not. <code>i = International.from_json(</code> What? No. <code>i</code> is an index or some other integer, not something much more complicated than that. </p>

<pre><code>b = i.build()
a = American.from_(b)
</code></pre>

<p>Please, no. <code>American</code> and <code>International</code> are terrible names for classes anyway. You could use it as a sub-class or sub-type or something, or an instance of a class if the class makes clear it's a date of some sort, but don't make an <code>American</code> class.</p>

<p>Now we're talking about those classes anyway, did you notice the absurd amount of repetition?</p>

<pre><code>class International(Converter[Base]):
    date: str = Converters.date('date', '%d/%m/%y %H:%M')
    start: str = Converters.date('range.start', '%d/%m/%y %H:%M')
    end: str = Converters.date('range.end', '%d/%m/%y %H:%M')


class American(Converter[Base]):
    date: str = Converters.date('date', datetime_format)
    start: str = Converters.date('range.start', datetime_format)
    end: str = Converters.date('range.end', datetime_format)
</code></pre>

<p>So, a class has 3 lines and <em>all</em> of those lines contain either <code>'%d/%m/%y %H:%M'</code> or <code>'%m/%d/%y %H:%M'</code>. Have you considered making something like this instead?</p>

<pre><code>class TerriblyNamedGeneric(Converter[Base], datetime_format):
    date: str = Converters.date('date', datetime_format)
    start: str = Converters.date('range.start', datetime_format)
    end: str = Converters.date('range.end', datetime_format)
</code></pre>

<p>That's still not pretty and it can probably be done with even less repetition, but you get the idea.</p>

<p>The rest of your code is riddled with ambiguity.</p>

<pre><code>def from_(cls, b: T):
    """Build function from base object"""
    c = cls()
    c._obj = b
    return c
</code></pre>

<p>Why is a build function named <code>from_</code>? What is a cls (if it's not short for <a href="https://en.wikipedia.org/wiki/CLS" rel="noreferrer">one of these</a>, pick a better name) and why is that entire function just a jumble of one-letter variable names?</p>

<p>You say you want a review focussed on the readability. In short, I don't think it's that readable. It may work like a charm, but the readability leaves much to be desired.</p>
    </div>