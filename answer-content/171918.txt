<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Specific exception types</strong></p>

<p>The exceptions you throw are kind of vauge and expose implementation details. Consider making your own exceptions or using prebuilt ones. The <a href="https://docs.oracle.com/javase/7/docs/api/java/util/EmptyStackException.html" rel="nofollow noreferrer">EmptyStackException</a> is exactly what you need, and you can easily implement your own FullStackException:</p>

<pre><code>class FullStackException extends Exception {
    public FullStackException() {}
}
</code></pre>

<p>Vauge exceptions can lead to collisions in try catch blocks. For example, a <code>NullPointerException</code> could occur from all sorts of situations:</p>

<pre><code>try {
    myStackInstance.pop();
} catch (NullPointerException e) {
    // was `myStackInstance` null or that the stack was empty?
}
</code></pre>

<p>A more specific exception allows the user to take advantage of the extra information:</p>

<pre><code>try {
    myStackInstance.pop();
} catch (EmptyStackException e) {
    // no doubts that the stack was empty
} catch (NullPointerException e) {
    // must have been a null pointer
}
</code></pre>

<p><strong>Don't expose private data members</strong></p>

<p>A user could mess up your stack's data since you offer them the pointer to the array with <code>getStackArray</code>.</p>

<pre><code>MyStack&lt;Thing&gt; things = new MyStack&lt;Thing&gt;(10);
Things[] array = things.getStackArray();
array[0] = new Thing();
// the stack just got modified externally!!
</code></pre>

<p>To avoid this, you can return a <code>clone</code> of the array:</p>

<pre><code>private T[] getStackArray() {
    return stackArray.clone();
}
</code></pre>

<p>And do the same when assigning a new stackArray:</p>

<pre><code>private T[] setStackArray(T[] stackArray) {
    if (stackArray.length != size) {
        throw InvalidStackArraySizeException();
    }
    // ??? this.top = ...
    this.stackArray = stackArray.clone();
}
</code></pre>

<hr>

<p>Great work overall! Though be sure to stay consistent with the spacing in your if statements.</p>
    </div>