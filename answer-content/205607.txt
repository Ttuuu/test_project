<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Responding to your question</h2>
<blockquote>
<p><em>Can I reduce the code in a better way more optimised?</em></p>
</blockquote>
<p>There are multiple ways one could optimize the code. Other approaches are certainly possible. For example, you could merely use less functional approaches and instead use a more imperative approach. By replacing the <code>.some()</code> loop with a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of" rel="nofollow noreferrer"><code>for ... of</code></a> loop, there will no longer be a function called for each element in the array, which will require less computational resources.</p>
<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>function checkCookie(cookie, cookieToBeSearched) {
  if (cookie === "" || cookie === undefined) {
    return false
  }
  const pieces = cookie.split(";");
  for (piece of pieces) {
    const eachCookie = piece.split("=");
    if (eachCookie[0].trim() === cookieToBeSearched) {
      return true;
    }
  }
  return false;
}

let cookie = "_ga=GA1.2.2091695351.1539084164; __qca=P0-338702612-1539084164095; __gads=ID=770d92bcdac8de40:T=1539084164:S=ALNI_MbsRKpoSJdn8tsdShMHMZUAR17uZA; _gid=GA1.2.798724103.1539582973";

console.log("Cookie is available - ", checkCookie(cookie, "_gid"))

console.log("Cookie is available - ", checkCookie(cookie, "_ga"))

console.log("Cookie is available - ", checkCookie(cookie, "_giddd"))</code></pre>
</div>
</div>

<p>Another option is instead of splitting the string on semi-colons and then calling <code>.some()</code>, one could use the regular expression method <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test" rel="nofollow noreferrer"><code>.test()</code></a>. The code below can be compared in <a href="https://jsperf.com/splitfind-vs-regexptest" rel="nofollow noreferrer">this jsPerf test</a>, which uses the same two tests as in your example, plus a third for testing the check for a cookie name at the beginning of a string. The test does not compare checking for a cookie name using an empty string - that might yield different results.</p>
<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>function checkCookieRegExp(cookie, cookieToBeSearched) {
  if (cookie === "" || cookie === undefined) {
    return false
  }
  const pattern = new RegExp('(?:^|;\\s*)' + cookieToBeSearched + '=');
  return pattern.test(cookie);
}
const cookie = "_ga=GA1.2.2091695351.1539084164; __qca=P0-338702612-1539084164095; __gads=ID=770d92bcdac8de40:T=1539084164:S=ALNI_MbsRKpoSJdn8tsdShMHMZUAR17uZA; _gid=GA1.2.798724103.1539582973";
const elementsToFind = [
    {name: '_gid', expectation: true},
    {name: '_ga', expectation: true},
    {name: '_giddd', expectation: false},
    {name: 'ID', expectation: false}
];
for (element of elementsToFind) {
    const result = checkCookieRegExp(cookie, element.name);
    const method = !(result == element.expectation)  &amp;&amp; ('error' in console)?'error':'log';
    console[method](`result of finding "${element.name}":  ${result}`);
}</code></pre>
</div>
</div>

<h3>Other suggestions</h3>
<p>Notice in both examples that <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const" rel="nofollow noreferrer"><code>const</code></a> was used for any variable that wasn't re-declared. This avoids accidental re-assignment.</p>
<p>Also, in your original code, the variable name <code>cookie</code> gets re-used in the arrow function. While this doesn't overwrite the original value because it has different scope, it is best to use a different name to allow use of the original value inside the arrow function and avoid confusion - not only for future yourself but anybody else reading your code.</p>
<p><a href="https://i.stack.imgur.com/bLwS0.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/bLwS0.png" alt="cookie name conflict"></a></p>
    </div>