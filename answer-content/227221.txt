<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The linearity of your approach is due to the fact that your <code>longest</code> could never be longer than the size of the alphabet (otherwise it'd have a duplicate for sure). It means that your code runs at <span class="math-container">\$O(N * A)\$</span>, where <span class="math-container">\$N\$</span> is a length of the string, and <span class="math-container">\$A\$</span> is a size of alphabet. Since the latter is a constant, you may safely take it out of the big-O, yielding <span class="math-container">\$O(N)\$</span>.</p>

<p>The asymptotic constant is still a little bit too large (I don't know what alphabet is used in the test cases, but it is safe to assume at least 26), so there is a room for improvement. You correctly noticed that the immutability of the strings may hurt performance; try to get rid of them. A most obvious approach is to preallocate a list (of the alphabet size), and use it as a circular buffer.</p>

<p>In fact, even that is suboptimal. Try to get rid of the explicit buffer at all (hint: two indices into the original string).</p>

<p>It also <em>may</em> be beneficial to keep a dictionary indexed by letters currently present in the buffer with the values being their corresponding indices. This way you can do a constant time lookup rather than linear search in the buffer. Keep in mind however that such a dictionary may itself be costly; I expect it to improve performance if the alphabet is quite large. Try and profile it.</p>

<p>As for the code, it is simple and clean. Not much to say.</p>
    </div>