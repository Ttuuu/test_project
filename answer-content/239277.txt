<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Data safety</h2>

<p>Your current <code>HTML_search_attributes</code> is type-unsafe - it's closer to a serialized format than an in-memory format.</p>

<p>Consider moving those data to a <code>.json</code> file. Deserializing it will give you exactly what you have now, though I recommend going one step further. Make a class or at least a named tuple to represent a scraped domain, with attributes of <code>price</code>, <code>name</code>, and <code>has_javascript</code>. This will go farther to validate your data and increase the confidence in correctness of your code.</p>

<h2>URL parsing</h2>

<p>Don't do it by hand. This:</p>

<pre><code>    d = url.replace("https://", "").replace("www.", "")
</code></pre>

<p>will explode for sites such as</p>

<pre><code>https://foo.com/www.section/
</code></pre>

<p>At the least, you should regex-match to <code>^</code>, the beginning of the string. More likely, you should use <a href="https://docs.python.org/3/library/urllib.parse.html" rel="nofollow noreferrer">https://docs.python.org/3/library/urllib.parse.html</a> .</p>

<p>The next problem is your class representation of these URL parts. After a class is initialized, one should be able to assume within reason that its properties are accessible, but yours are not until <code>url</code> is run. The solution to this is to move this block:</p>

<pre><code>    d = url.replace("https://", "").replace("www.", "")
    r = requests.get(url, headers=headers)
    self._domain = d.split("/", maxsplit=1)[0]
    self._soup = BeautifulSoup(r.text, parser)
    self._url = url
</code></pre>

<p>into the constructor.</p>

<p>There probably shouldn't even be a public <code>url</code> setter. It only makes sense for it to be initialized once, in the constructor.</p>

<p>The real problem is that the scraping occurs immediately when the class is instantiated. Don't do lengthier operations such as soup calls in <code>__init__</code>; do them in a separate method.</p>

<h2>Invert your logic</h2>

<p>Rather than</p>

<pre><code>    if js is False:
        # ...
    else:
        # ...
</code></pre>

<p>do</p>

<pre><code>if js:
    # ...
else:
    # ...
</code></pre>
    </div>