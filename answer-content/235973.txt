<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The basic approach doesn't look bad.
You can optimize by working more with arrays that won't require any offset-handling.</p>

<p>For example:</p>

<ul>
<li>You can combine <code>'Zero'</code> and the arrays <code>OneToTen</code> and <code>TenToNineteen</code>
to one direct-initialized array. </li>
<li>The array <code>Ten</code> could also have two empty values in the first two entries, making <code>'Twenty'</code> available at index 2.</li>
<li>The Thousands, Millions, etc. could also be stored inside an array.</li>
</ul>

<p>This would look somewhat like this:</p>

<pre><code>  #Numbers 0-19 (unique numbers)
  ZeroToNineteen = [
    'Zero',
    'One',
    'Two',
    'Three',
    'Four',
    'Five',
    'Six',
    'Seven',
    'Eight',
    'Nine',
    'Ten',
    'Eleven',
    'Twelve',
    'Thirteen',
    'Fourteen',
    'Fifteen',
    'Sixteen',
    'Seventeen',
    'Eighteen',
    'Nineteen']

  #Numbers at intervals of 10
  Tens = [
    '',
    '',
    'Twenty',
    'Thirty',
    'Forty',
    'Fifty',
    'Sixty',
    'Seventy',
    'Eighty',
    'Ninety']

  #Numbers at intervals of 1000
  Thousands = [
    '',
    'Thousand',
    'Million',
    'Billion',
    'Trillion',
    'Quadrillion',
    'Quintillion',
    'Sextillion',
    'Septillion'
  ]
</code></pre>

<p>Doing so allows for a slightly shorter and simpler version of your <code>englishifyHundreds</code> function:</p>

<pre><code>  #Additional function for ease of processing of numbers
  def englishifyHundreds(number):
      #1. Number from 0-19
      if number &lt; 20:
          return ZeroToNineteen[int(number)]
      #2. Number from 20-99
      elif number &lt; 100:
          return Tens[int(number/10)] + ' ' + ZeroToNineteen[int(number%10)]
      #3. Number from 100-999
      else:
          #Accounting for edges = 0 (number = 100, 200, ...)
          remainder = int(number) % 100
          if remainder == 0:
              return ZeroToNineteen[int(number/100)] + ' Hundred'
          else:
              return ZeroToNineteen[int(number/100)] + ' Hundred And ' + englishifyHundreds(remainder)
</code></pre>

<p>The assembly can than be achieved by first splitting the number into number representing 3 digits each:</p>

<pre><code>  parts=[]
  iterations = int((len(str(number))-1)/3) + 1
  iteration = int(0)
  while iteration &lt; iterations:
    part = int(number % 1000)
    number = int(number / 1000)
    parts.append(part)
    iteration += 1
  parts.reverse()
</code></pre>

<p>And then reassembling it according to your rules:</p>

<pre><code>  numberString=''
  for i, part in enumerate(parts):
    if part == 0:
      continue
    thousandsIndex = len(parts) - (i+1)
    separatorString = ('' if i == 0 else ' And ' if (part &lt; 100 or part % 100 == 0)  else ', ')
    partString = englishifyHundreds(part)
    thousandString = (' ' + Thousands[thousandsIndex]) if thousandsIndex &gt; 0 else ''
    numberString += separatorString + partString + thousandString
  return numberString
</code></pre>

<hr>

<p>I have tried the code using Repl.it (<a href="https://repl.it/repls/AdventurousMerryWamp" rel="nofollow noreferrer">Link</a>) with the following test cases:</p>

<pre><code># Test cases
print(englishify(1)) # - One
print(englishify(222)) # - Two Hundred And Twenty two
print(englishify(1234)) # - One Thousand, Two Hundred and Thirty Four
print(englishify(31337)) # - Thirty One Thousand, Three Hundred And Thirty Seven
print(englishify(100100)) # - One Hundred Thousand And One Hundred
print(englishify(200111)) # - Two Hundred Thousand, One Hundred And Eleven

# Custom
print(englishify(10000000025))
</code></pre>

<p>Result:</p>

<pre><code>One
Two Hundred And Twenty Two
One Thousand, Two Hundred And Thirty Four
Thirty One Thousand, Three Hundred And Thirty Seven
One Hundred Thousand And One Hundred
Two Hundred Thousand, One Hundred And Eleven
Ten Billion And Twenty Five
</code></pre>
    </div>