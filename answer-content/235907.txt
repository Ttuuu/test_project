<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It's been a long time since I've heard the terms <code>BCD</code> or <code>Binary Coded Decimal</code>. Keep in mind that BCD was primarily a hardware encoding of integers provided by one particular manufacturer of main frame computers. There were computer performance issues when using BCD.</p>
<p>The best way to implement a BCD number would be an array of 4 bit integer values.</p>
<p>One good habit the code demonstrates is that all <code>if</code> statements and loops wraps the code in braces (<code>{</code> and <code>}</code>). Thank you for that!</p>
<h2>Magic Numbers</h2>
<p>There are Magic Numbers in the <code>void printBits(unsigned long number)</code> function (32, 9, 17, 25, 5, 13, 21 and 29), it might be better to create symbolic constants for them to make the code more readable and easier to maintain. These numbers may be used in many places and being able to change them by editing only one line makes maintenance easier.</p>
<p>Numeric constants in code are sometimes referred to as <a href="https://en.wikipedia.org/wiki/Magic_number_(programming)" rel="nofollow noreferrer">Magic Numbers</a>, because there is no obvious meaning for them. There is a discussion of this on <a href="https://stackoverflow.com/questions/47882/what-is-a-magic-number-and-why-is-it-bad">stackoverflow</a>.</p>
<h2>Unused Header Files</h2>
<p>The program includes <code>limits.h</code> and <code>string.h</code> but the contents of these files are not used by the code in the program. In the case of <code>string.h</code> it might be better to remove the <code>#include</code>. In the case of <code>limits.h</code> it might be better to use the limits provided. It is better to not include files that aren't being used since this will decrease the size of the code being compiled and might improve build times. The <code>#include</code> directive literally copies the header file into the intermediate file that is compiled after the C pre-processor is run.</p>
<h2>Algorithm</h2>
<p>It might be better to prompt the user for the number to be converted rather than use <code>argv</code> as the source of the input. Even if <code>argv</code> continues to be the source of the input, it would be better to check <code>argc</code> to see if there are enough arguments and either prompt the user for a number in screen input, or report an error and quit.</p>
<h2>Readability</h2>
<p>The some of the functions (<code>printBits</code> and <code>convertBinaryToBCD</code>) might be easier to read if there was vertical spacing in the functions.</p>
<h2>Off by One Bug</h2>
<p>As noted by @1201ProgramAlarm there is an <code>off by one bug</code> in <code>void printBits(unsigned long number)</code>, the code is accessing one invalid memory location <code>bit_position[32]</code> and ignoring <code>bit_position[0]</code>.</p>
<p>It is also not clear why bit_position is 32 bits rather than 64 bits, since the code is primarily using unsigned long rather than unsigned int.</p>
    </div>