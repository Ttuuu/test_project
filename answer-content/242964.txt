<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>source directory</h1>

<p>Put the module in a separate source directory. This has the advantage that you can install this directory separately with <code>pip install -e</code> for example, or by adding it to a <code>.pth</code> in your virtual environments site-packages. You are using virtual environments for the development?</p>

<h1>tools</h1>

<p>Use a good IDE, and the tools available to improve your code. I use <code>black</code> as code formatter, <code>mypy</code> with a strict configuration to check for typing errors, <code>pydocstyle</code> to check my docstrings, <code>pytest</code> for unit tests, <code>pyflakes</code> for other errors. Get to know them, look for configuration inspiration to larger python projects, and integrate them in your workflow. Most IDEs make this really simple.</p>

<h1>variable names</h1>

<p>In python, the length of the variable names has no influence on the performance of the program. then pick clear variable names like <code>requested_planks</code> instead or <code>reqs</code>. Decyphering your code is really difficult, due to these unclear names.</p>

<h1>split in functions</h1>

<p>You have 2 functions already, but this code needs a lot more.</p>

<ul>
<li>reads the input</li>
<li>validates the input</li>
<li>makes combinations</li>
<li>picks a combination</li>
<li>outputs to an output file</li>
</ul>

<p>Each of these deserves its own function. Doing so allows you to better document this, test the different parts and make changes in the future.</p>

<p>I try to separate my functions so the data transferred is clear.</p>

<h1>read the inputs</h1>

<p>Hoist your IO (talks: <a href="https://rhodesmill.org/brandon/talks/#clean-architecture-python" rel="nofollow noreferrer">1</a> <a href="https://rhodesmill.org/brandon/talks/#hoist" rel="nofollow noreferrer">2</a>)
Don't pass along the input file. read the input file in your <code>main()</code>, function and pass the contents on to the validator and later calculations. Same goes for the output. The calculation returns the required planks, and then the <code>main()</code> function writes the result to disk if needed.</p>

<h1>validate the input</h1>

<p>Your input validation is spread around the main method. You also communicate with strings. An alternative is to communicate a validation failure with a <code>ValueError</code></p>

<p>If you add in type hints and docstring you could end up with something like this:</p>

<pre><code>import typing


class Plank(typing.NamedTuple):
    """Requested plank."""

    Length: float
    Qty: int


class BasePlank(typing.NamedTuple):
    """Available base plank."""

    Length: float
    Price: float  # or Decimal?


InputData = typing.TypedDict(
    InputData,
    {
        "Cut loss": float,
        "Required Lengths": typing.List[Plank],
        "Available base material": typing.List[BasePlank],
    },
)


def validate_planks(planks: typing.Iterable[Plank]) -&gt; None:
    """Validate the requested planks.

    - Length must be larger than 0
    - Quantity must be larger than 0
    """
    for plank in planks:
        if "Length" not in plank:
            raise ValueError(f"`Length` not found in {plank}")
        if "Qty" not in plank:
            raise ValueError(f"`Qty` not found in {plank}")
        if plank["Length"] &lt; 0:
            raise ValueError(f"`Length` &lt; 0 in {plank}")
        if plank["Qty"] &lt; 0:
            raise ValueError(f"`Qty` &lt; 0 in {plank}")


def validate_baseplanks(planks: typing.Iterable[BasePlank],) -&gt; None:
    """Validate the available base planks.

    - Length must be larger than 0
    - price must not be negative
    """
    for plank in planks:
        if "Length" not in plank:
            raise ValueError(f"`Length` not found in {plank}")
        if "Qty" not in plank:
            raise ValueError(f"`Qty` not found in {plank}")
        if plank["Length"] &lt; 0:
            raise ValueError(f"`Length` &lt; 0 in {plank}")
        if plank["Price"] &lt;= 0:
            raise ValueError(f"negative `Price` in {plank}")


def validate_input(input_data: InputData) -&gt; None:
    """Validate the input."""

    if "Cut loss" not in input_data:
        raise ValueError("`Cut loss` not found.")
    if "Available base material" not in input_data:
        raise ValueError("`Available base material` not found.")
    baseplanks = input_data["Available base material"]
    validate_baseplanks(baseplanks)

    if "Required Lengths" not in input_data:
        raise ValueError("`Required Lengths` not found.")
    planks = input_data["Required Lengths"]
    validate_planks(planks)

    if max(plank["Length"] for plank in planks) &gt; max(
        plank[Length] for plank in baseplanks
    ):
        raise ValueError(
            "Maximum requested piece is longer than longest base plank"
        )
</code></pre>

<h2><code>jsonschema</code></h2>

<p>Or you can use <code>jsonschema</code> to do the validation for you:</p>

<pre><code>schema = jsonschema.Draft7Validator(
    {
        "type": "object",
        "properties": {
            "Cut loss": {"type": "number", "minimum": 0},
            "Required Lengths": {
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "Length": {"type": "number", "exclusiveMinimum": 0},
                        "Qty": {
                            "type": "number",
                            "exclusiveMinimum": 0,
                            "multipleOf": 1,
                        },
                    },
                    "required": ["Length", "Qty"],
                },
            },
            "Available base material": {
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "Length": {"type": "number", "exclusiveMinimum": 0},
                        "Price": {"type": "number", "minimum": 0},
                    },
                    "required": ["Length", "Price"],
                },
                "minProperties": 1,
            },
            "required": [
                "Cut loss",
                "Available base material",
                "Required Lengths",
            ],
        },
    }
)
</code></pre>

<p>and then use </p>

<pre><code>errors = list(schema.iter_errors(data))
</code></pre>

<p>Having validated your input data, you can choose to put them in classes, but for this solution that might be a bit too much.</p>

<h1>testing</h1>

<p>This way you can test your validation separately.</p>

<p>In a separate directory <code>tests</code>, file <code>test_cutlist.py</code> or in a separate file per function you want to test</p>

<pre><code>import pytest

def test_validatbaseplanks():
    correct_data = [
        {
            "Length": 300,
            "Price": 5.95
        },
        {
            "Length": 180,
            "Price": 2.95
        },
        {
            "Length": 360,
            "Price": 6.95
        }
    ]
    cutlistcalculator.validate_baseplanks(correct_data)

    missing_price = [
        {
            "Length": 300,
        },
        {
            "Length": 180,
            "Price": 2.95
        },
        {
            "Length": 360,
            "Price": 6.95
        }
    ]
    with pytest.raises(ValueError) as excinfo:
        cutlistcalculator.validate_baseplanks(correct_data)
    assert "`Price` not found" in str(excinfo.value)
</code></pre>

<p>etcetera.</p>

<h1>JSON</h1>

<p>Think about what format you want to serialize the input and output. You use <code>JSON</code>, but as you noticed, this has a few downsides. It is very verbose, and you can'y add comments. JSON is meant to be easily read by a computer. Alternatives are <code>BSON</code>, <code>TOML</code>, ...</p>

<p>I'm not saying these are better, but at least take a look at it. Especially when you are so early in the development, it is easy to switch.</p>

<p>On the other hand, if you partition your code correctly, and make the parsing of the input its own function, you can later easily change the input or aoutput format. You could even foresee multiple parsers, and accept different formats.</p>

<h1>calculation</h1>

<p>I don't get the algorithm you use. I don't have too much time to figure it out, but the way you use unclear names and have it all in 1 large blob doesn't help. Try to partition it in logical structures that you refactor to separate functions. Carefully name the functions, and foresee a docstring and type hnts. Once you have that, post them again as a new question.</p>

<p>Make a function that generates possible cut plans, with only the required planks and available baseplanks as input. Make this a generator, that yields a possible combination. You can the pipe this into a function that calculates the cost of this arrangement. This takes one single combination and the  prices of the baseplanks as arguments, and returns the cost of the combination. By splitting the work like this, you can document their behaviour , and can test each of these components separately.</p>

<h1>output</h1>

<p>Separate this from the code that calculates the best solution</p>

<p>use a <code>with</code> statement to construct a context.</p>

<pre><code>with output_file.open("w") as filehandle:
    json.dump(filehandle, result, indent=2)
</code></pre>

<h1>Conclusion</h1>

<p>I know this is a lot, but try to incorporate these tips, and the ones from Reinderien, and then if you're unsure come back with a new version. Keep up the good work</p>
    </div>