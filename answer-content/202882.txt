<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The most pythonic way (IMO) to check if two words are anagrams of each other is to check if the number of times each letter appears in each words is the same. For this you can use <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter</code></a>:</p>

<pre><code>from collections import Counter

&gt;&gt;&gt; Counter("test")
Counter({'e': 1, 's': 1, 't': 2})
</code></pre>

<p>With this we can re-write your function to :</p>

<pre><code>def anagrams(word, words):
    result = []
    counter_word = Counter(word)
    for other_word in words:
        if Counter(other_word) == counter_word:
            result.append(other_word)
    return result
</code></pre>

<p>This is a lot more readable. in addition, here are some more comments on your code itself:</p>

<ul>
<li><code>source = copy.deepcopy(list(i))</code> is not needed. Since strings are immutable, just doing <code>list(i)</code> would have been fine.</li>
<li>In <code>if(j in source):</code> there are two things:

<ol>
<li>Python has an official style-guide, <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP8</a>, which is well worth a read. It recommends not using parenthesis in <code>if</code> (and <code>while</code>) statements, so this should be <code>if j in source</code></li>
<li><a href="https://wiki.python.org/moin/TimeComplexity" rel="nofollow noreferrer"><code>in</code> is \$\mathcal{O}(n)\$ for lists and strings</a>, so this is actually quite an expensive way to do it. The better way is using a dictionary (<code>collections.Counter</code> is a dictionary plus some nice stuff).</li>
</ol></li>
<li>In <code>for i in wordList</code>, again, PEP8 has something to say, it should be <code>word_list</code>, or even easier <code>words</code>. Also <code>i</code> is not a good name.</li>
</ul>

<p>Depending on what you want to do afterwards with the anagrams, you could also make this a <a href="https://wiki.python.org/moin/Generators" rel="nofollow noreferrer">generator</a> (which you can iterate over and which continuesly yields anagrams):</p>

<pre><code>def anagrams(word, words):
    counter_word = Counter(word)
    for other_word in words:
        if Counter(other_word) == counter_word:
            yield other_word
</code></pre>
    </div>