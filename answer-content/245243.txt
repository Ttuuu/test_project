<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Reviewing this myself for the sake of completion.</p>
<hr>
<h2>Nits</h2>
<ul>
<li>Utilize the logger instead of System.out.println. Thus, use <code>logger.error(e.toString());</code> instead of <code>System.out.println(e.toString());</code></li>
<li><code>loadDocument</code> has been updated with a try-catch to facilitate multiple connection tries. The try catch is thus a necessary evil, but upon revieiwng the code it would be slightly preferable to write it this way:</li>
</ul>
<pre><code>    private Document loadDocument(final String url) throws ScraperException {
        for (int tries = 0; tries &lt; this.totalTries; tries++) {
            try {
                return Jsoup.connect(url).timeout((int) timeout.toMillis()).get();
            } catch (IOException e) {
                if (tries == this.totalTries) {
                    throw new ScraperException("Error loading ATP website: ", e);
                }
            }
        }
        return null;
    }
</code></pre>
<p>(Note that the final <code>return null</code> should never actually execute; it's only there to provide a compile error. A bit ugly but I prefer it over the anti-pattern of setting document null and then modifying it anyways).</p>
<hr>
<h2>Optionals &amp; Streams</h2>
<ul>
<li><p>Double checking the code, the rationale between having <code>Optional&lt;&gt;</code> type for <code>rankCell</code> elements is reasonable - we filter rankCell elements based on whether the rank value is No.1, and if not, the element should be considered empty for our purposes. Similarly, the boolean logic check for the <code>playerCell</code> element seems ok as well. We only want to consider <code>playerCell</code> if <code>rankCell</code> is non-empty, and even in that case, <code>playerCell</code> could return a null element, so the final return value of an <code>Optional</code> seems ok.</p>
</li>
<li><p>I have an issue with <code>extractWeeks</code>, specifically of the <code>filter</code>:</p>
</li>
</ul>
<pre><code>        return elements.stream()
                .map(Scraper::extractWeek)
                .filter(week -&gt; Optional.ofNullable(week).isPresent())
                .collect(Collectors.toList());
</code></pre>
<p>This code is implying that you want to filter out weeks that are null. This doesn't make sense in light of your logic in <code>scrape</code>, where you seek to either scrape a week's result if it exists, or re-construct week data by using <code>updateLatestWeekByOne()</code>. If you are already handling the case for a week being <code>null</code>, it's pointless to filter out null weeks.</p>
<ul>
<li>Building on this, <strong>you end up hiding a serious functionality bug in your code</strong>. Note that the main loop in <code>MyProject</code> is passing each <code>week</code> in <code>weeks</code> to <code>scraper.scrape</code>. Some of these weeks could be <code>null</code>, OR the data we want for these could be non-existent on the ATP site. What ends up happening in this case is that you "de-synchronize" from <code>weeks</code> in the latter case, as a result you run the risk of your loop prematurely ending. Luckily, your loop "re-synchronizes" since the value of forthcoming weeks are non-empty, but this introduces a new bug:  you still have jumps between your timeline! So your logic to get the <code>latestResult</code> is not quite right. You may wish to address this later or immediately, depending on how severe you feel this bug is (although it doesn't result in a fully correct program, 90+ % of the results are correct).</li>
</ul>
<hr>
<h2>Unit Testing</h2>
<p>Given such possible bugs, you may wish to look into unit testing the scraper. Moving forward, test-driven development (TDD) may be worth the initial time investment as it can help avoid wasting time on correcting subtle mistakes like this.</p>
<hr>
<h2>Scraper 'Chaining' Design</h2>
<p>(Disclaimer: still not fully sure about this, and I am considering posting this question to another site: eg. Software Engineering StackExchange)</p>
<ul>
<li>The chaining design can be made to work, however it might make the driver in <code>MyProject</code> unwieldy if you scale the number of such tasks to be chained.</li>
<li>Look into <code>Future</code>s in Java;  it seems like you can wrap a partially asynchronous operation into a syncrhonous one, since (I believe) 'get's are blocking. Refer to <a href="https://stackoverflow.com/questions/2180419/wrapping-an-asynchronous-computation-into-a-synchronous-blocking-computation">this</a> for more research.</li>
</ul>
    </div>