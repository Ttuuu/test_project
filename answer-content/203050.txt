<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The “set or increment dictionary value” logic </p>

<pre><code>freq = {}
for i in s:
    if i in freq:
        freq[i] +=1
    else:
        freq[i] = 1
</code></pre>

<p>can be simplified using a <a href="https://docs.python.org/3/library/collections.html#defaultdict-objects" rel="noreferrer"><code>defaultdict</code></a>:</p>

<pre><code>from collections import defaultdict

# ...

freq = defaultdict(int)
for i in s:
    freq[i] += 1
</code></pre>

<p>But instead of creating, updating and sorting your own dictionary you can 
use the built-in <a href="https://docs.python.org/3/library/collections.html#counter-objects" rel="noreferrer"><code>Counter</code></a> class:</p>

<blockquote>
  <p>A counter tool is provided to support convenient and rapid tallies.</p>
</blockquote>

<p>and its <a href="https://docs.python.org/3/library/collections.html#collections.Counter.most_common" rel="noreferrer"><code>most_common()</code></a> method:</p>

<blockquote>
  <p>Return a list of the n most common elements and their counts from the most common to the least.</p>
</blockquote>

<p>That simplifies the code to</p>

<pre><code>from collections import Counter


def frequencySort(s):
    """
    :type s: str
    :rtype: str
    """
    counter = Counter(s)
    output = "".join(char * freq for char, freq in counter.most_common())
    return output
</code></pre>
    </div>