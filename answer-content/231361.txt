<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Welcome to code review, good job using a docstring and trying to make your code readable.</p>

<ul>
<li><p><strong>Space after a comma:</strong> </p>

<p><code>test2 = ("lorem","ipsum","dolor", "fright", "nec","pellentesque","eu",
"pretium","quis","sem","nulla","consequat","massa","quis",)</code></p>

<p>According to <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP0008</a> which I recommend checking for being the official Python style guide: a space should be left after a comma for readability.</p>

<p><strong>Which should look like:</strong></p>

<p><code>test2 = ('lorem', 'ipsum', ...)</code></p></li>
<li><strong>Use descriptive names:</strong> names like <code>left_join()</code> <code>newstr</code> <code>j</code> are not describing the objects they represent ex: your function name can be <code>def replace_word(words, word, new_word):</code> </li>
<li><p><strong>Type hints:</strong> You may use type hints to indicate what are the inputs and outputs in the following way: </p>

<p><code>def your_function_name(phrases: tuple) -&gt; str:</code></p></li>
<li><p><strong>Docstrings:</strong> Good job using a docstring for your function, however the description is not very clear here's a better description and btw docstrings should indicate what the input and the output is (what the function parameters are and what it returns):</p>

<pre><code>def your_function_name(phrases: tuple, old_word: str, new_word: str) -&gt; str:
    """
    Replace the old_word by the new_word if found in phrases.
    Args:
        phrases: Tuple of words.
        old_word: The word to replace.
        new_word: The replacement.
 Return:
     Joined string after replacements.
    """
</code></pre></li>
<li><p><strong><code>str.replace()</code> and <code>str.join()</code></strong> You can use the <code>replace</code> method to achieve the same results in a shorter code and since you're familiar with <code>join()</code>:</p>

<p><strong>Instead of doing this for every letter in every word:</strong></p>

<pre><code>else:
    newstr += phrase + ','
</code></pre>

<p><strong>You can do:</strong></p>

<pre><code>', '.join(words)
</code></pre>

<p><strong>Code might look like:</strong></p>

<p>And Note: You usually wouldn't be creating a function for such a simple task but use <code>replace()</code> and <code>join()</code> directly, I'm creating a function just for the sake of the example.</p>

<pre><code>def replace_word(phrases: tuple, old_word: str, new_word: str) -&gt; str:
    """
    Replace the old_word by the new_word if found in phrases.
    Args:
        phrases: Tuple of words.
        old_word: The word to replace.
        new_word: The replacement.
 Return:
     Joined string after replacements.
    """
    return ', '.join(word.replace(old_word, new_word) for word in phrases)


if __name__ == '__main__':           
    test1 = ("bright aright", "ok", "brightness wright",)
    test2 = ("lorem","ipsum","dolor", "fright", "nec","pellentesque","eu",
 "pretium","quis","sem","nulla","consequat","massa","quis",)
    print(replace_word(test1, 'right', 'left'))
    print(replace_word(test2, 'right', 'left'))
</code></pre>

<p><strong>Output:</strong></p>

<blockquote>
  <p>bleft aleft, ok, bleftness wleft</p>
  
  <p>lorem, ipsum, dolor, fleft, nec, pellentesque, eu, pretium, quis, sem, nulla, 
  consequat, massa, quis</p>
</blockquote></li>
</ul>
    </div>