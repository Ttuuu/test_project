<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Using <code>@classmethod</code> for constructors is perfectly fine. It is basically the only reason you ever need to use them.</p>

<p>Classes create a namespace (and <a href="https://www.python.org/dev/peps/pep-0020/" rel="nofollow noreferrer">Namespaces are one honking great idea -- let's do more of those!</a>). You don't need to preface all your methods and classes with <code>my_</code>. Your code becomes much more readable if you just name them according to what they do:</p>

<pre><code>class ArgParser(argparse.ArgumentParser):
    ...
    def set_version(self, version):
        ...
    def add_flag(self, short, long, help):
        ...
    ...
</code></pre>

<p>Python also has an official style-guide, <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP8</a>, which programmers are recommended to follow. It recommends using <code>lower_case</code> for methods and variables.</p>

<p>In general I am not a huge fan of this class. It makes building an argument parser slightly easier (nice!) at the cost of hiding away all advanced functionality (not so nice). I would try finding an interface that at least allows you to add additional options (like specifying types, defaults, nargs, etc). Maybe each argument is also allowed to be a tuple of a tuple and a dictionary (for positional and keyword arguments)? </p>
    </div>