<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First the simple stuff:</p>

<ol>
<li><p>Standard naming convention for methods in C# is <code>PascalCase</code> while you run a mix of <code>camelCase</code> and <code>PascalCase</code>.</p></li>
<li><p>Some of the methods have unclear names and/or unclear parameter names. For example this:</p>

<pre><code>void Button(int p1, int p2, char[,] board)
</code></pre>

<p>What is <code>p1</code> or <code>p1</code> and what should the method do? The names should be descriptive enough to deduce the functionality from the names.</p></li>
<li><p>These comparisons are weird: <code>OX(board[1, 0]) == "O"[0]</code> - <code>OX</code> (another unclear name) returns a <code>char</code> so you should compare it to one: <code>OX(board[1, 0]) == 'O'</code></p></li>
</ol>

<hr>

<p>Now the bigger picture stuff:</p>

<p>The main issue with your solution is that UI and logic are very tightly coupled which in general is a bad thing as it makes it hard to re-use the current game logic (try making a text console, winforms or web version for that game) and also not very easy to unit test.</p>

<p>One very popular pattern with WPF application developers is the <a href="http://en.wikipedia.org/wiki/Model_View_ViewModel" rel="nofollow noreferrer">MVVM (Model-View-ViewModel) pattern</a>. The basic idea is that you have a model which is completely agnostic of the UI and the UI just observes the model and its changes. In WPF this is supported by something called <a href="http://msdn.microsoft.com/en-us/library/ms752347%28v=vs.110%29.aspx" rel="nofollow noreferrer">binding</a> where the UI "binds" the controls to the model which alleviates the need to manually push the data from the model to the UI.</p>

<p>It's a big topic so I won't spill out all the details and it would be a fair amount of work to re-work the code according to it but I would encourage you to do so (could make a great series of code reviews here). There are heaps of excellent articles on code project and lots of assisting frameworks around (although you don't need a framework to follow the MVVM pattern).</p>
    </div>