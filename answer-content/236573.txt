<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There is no need for the initial <code>product == 0</code></p>

<p>And you can simplify the <code>elif</code> tree with early returns</p>

<pre><code>def solve2(a, b, c):
    if a == b == c:
        return 1
    if a == b:
        return c
    if a == c:
        return b
    if b == c:
        return a
    return a * b * c
</code></pre>

<p>This makes the intent and logic very clear.</p>

<p>You can use the fact that in python, <code>True</code> and <code>False</code> are used as 1 and 0 in calculations:</p>

<pre><code>def my_product(a, b, c):
    return (
        a ** (a not in {b, c})
        * b ** (b not in {a, c})
        * c ** (c not in {a, b})
    )
</code></pre>

<p>or </p>

<pre><code>def my_product2(a, b, c):
    return (
        a ** (a != b and a != c)
        * b ** (b != a and b != c)
        * c ** (a != c and b != c)
    )
</code></pre>

<p>or using the new python 3.8 <a href="https://docs.python.org/3.8/library/math.html#math.prod" rel="nofollow noreferrer"><code>math.prod</code></a></p>

<pre><code>import math


def my_product_math(a, b, c):
    return math.prod(
        (
            a if a not in {b, c} else 1,
            b if b not in {a, c} else 1,
            c if c not in {a, b} else 1,
        )
    )
</code></pre>

<p>Then you need a few test cases:</p>

<pre><code>test_cases = {
    (2, 3, 5): 30,
    (3, 5, 3): 5,
    (5, 3, 3): 5,
    (3, 3, 3): 1,
    (3, 3, 2): 2,
}
</code></pre>

<p>and you evaluate them like this:</p>

<pre><code>[my_product(a,b,c) == result for (a,b,c), result in test_cases.items()]
</code></pre>

<p>You can even time this:</p>

<pre><code>import timeit
timeit.timeit(
    "[func(a,b,c) == result for (a,b,c), result in test_cases.items()]",
    globals={"func": my_product, "test_cases": test_cases},
)
</code></pre>

<p>and the all together behind a main guard:</p>

<pre><code>if __name__ == "__main__":
    test_cases = {
        (2, 3, 5): 30,
        (3, 5, 3): 5,
        (5, 3, 3): 5,
        (3, 3, 3): 1,
        (3, 3, 2): 2,
    }

    methods = [
        solve,
        solve2,
        my_product,
        my_product_math,
        solitary_product,
        solitary_numbers_product,
        solve_graipher,
        solve_kuiken,
        solve_kuiken_without_lambda,
        my_product2,
    ]

    for method in methods:
        result = all(
            [
                method(a, b, c) == result
                for (a, b, c), result in test_cases.items()
            ]
        )
        time = timeit.timeit(
            "[func(a,b,c) == result for (a,b,c), result in test_cases.items()]",
            globals={"func": method, "test_cases": test_cases},
        )
        print(f"{method.__name__}: {result} - {time}")
</code></pre>

<p>Which shows that in terms of speed, your method is one of the fastest</p>

<blockquote>
<pre><code>solve: True - 2.324101332999817
solve2: True - 2.386756923000121
my_product: True - 6.072235077000187
my_product_math: True - 5.299641845999986
solitary_product: True - 19.69770133299994
solitary_numbers_product: True - 2.4141538469998522
solve_graipher: True - 4.152514871999756
solve_kuiken: True - 7.715469948999726
solve_kuiken_without_lambda: True - 5.158195282000179
my_product2: True - 5.210837743999946
</code></pre>
</blockquote>

<p>So I would go with the simplification of your original algorithm</p>
    </div>