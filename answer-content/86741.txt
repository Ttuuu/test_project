<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This sort of thing is suited to <code>numpy</code> arrays.  You can invert a boolean numpy array using <code>~arr</code>, which is an element-by-element <code>not</code> operation.  You can do this to a slice by <code>arr[start:stop:step] = ~arr[start:stop:step]</code>, or in your case where you are going to the end <code>arr[start::step] = ~arr[start::step]</code>.  It is also an in-place operation, thus avoiding unnecessary copies.</p>

<p>So a direct translation of your code to numpy would be like so:</p>

<pre><code>import numpy as np

def invert_multiples(bools, n):
    """
    Inverts all the items at index n*a

    &gt;&gt;&gt; invert_multiples([True, True, True, True], 2)
    [False, True, False, True]
    """
    bools[num::num+1] = ~bools[num::num+1]

def invert_all_multiples(bools, nums):
    """
    Subsequentially inverts all the items that are
    multiples of each num. 

    &gt;&gt;&gt; doors = invert_all_multiples([True]*100, range(1,101))
    &gt;&gt;&gt; [i[0] for i in enumerate(doors) if not i[1]]
    [1, 4, 9, 16, 25, 36, 49, 64, 81]
    """
    bools = np.array(bools)
    for num in nums:
        invert_multiples(bools, num)
    return bools.tolist()
</code></pre>

<p>If you are able to avoid lists, a simpler version of the stated problem is:</p>

<pre><code>nmax = 100
lockers = np.zeros(nmax, dtype='bool')
for n in range(nmax):
    lockers[n::n+1] = ~lockers[n::n+1]
res = np.flatnonzero(lockers)  # add one to get one-based indexing
</code></pre>
    </div>