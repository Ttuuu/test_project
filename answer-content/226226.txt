<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Looks like some pretty spicy (nicely formatted) code :)</p>

<p>I'll explain my steps to make it look better and show you the end result. You can follow along and change them while they pop up.</p>

<ol>
<li><p>Remove the semicolons :P This is Python, not Javascript or C++ or (insert another language). Though they are optional and are perfectly fine to put in, they can cause clutter and reduce readability.</p></li>
<li><p>All functions and variables should be <code>lower_case_with_underscores</code>, classes as <code>UpperCase</code>, and constants as <code>UPPER_CASE_WITH_UNDERSCORES</code>. We'll replace them with the correct convention.</p></li>
<li><p>Replace <code>map</code> and <code>filter</code> with generator expressions. They may be a bit slower, but it'll be more readable as it resembles normal Python syntax such as the <code>for</code> loop and the <code>if</code> statement.</p></li>
<li><p>That recursive function at the bottom can be changed so that it doesn't need that <code>lambda</code>. It can make it look nicer without the hidden extra arguments.</p></li>
<li><p>The top function looks pretty complicated... Here's how to change it so that it doesn't need any variables. The first argument to <code>menaces</code> will always be the same, so it can be typed out manually. It's the <code>k</code>th item of <code>enumerate(positions)</code>, so the argument is <code>(k, positions[k])</code>. Note: we can remove the <code>import functools as fn</code> line.</p></li>
<li><p>The second function is a generator function, meaning it returns an iterator. This one is just combining results from two <code>for</code> loops. Nested <code>for</code> loops are discouraged, so let's replace it with <code>itertools.product(positions, range(n))</code>. We'll have to import itertools too. Note: <code>range(0, n)</code> is the same as <code>range(n)</code>.</p></li>
<li><p>I've changed the expression of <code>position + (i,)</code> to <code>(*position, i)</code>. I'm not sure which looks better, but personally the second one resembles the tuple that it yields better than the first.</p></li>
<li><p>The third function could do with a little makeover. The new variables aren't really needed. I've replaced them with <code>col_diff</code> and <code>row_diff</code> which store <code>abs(pair1[n] - pair2[n])</code> where <code>n</code> is <code>1</code> for the rows and <code>0</code> for the columns. I've also made it explicitly return <code>True</code> or <code>False</code> and it looks better :)</p></li>
<li><p>The doc strings also have a convention (for some reason). Single line doc strings can have the triple quotes (<code>"""</code>) at the start and end of the line, but multiline doc strings have them on their own lines. Note: I edited the example in <code>add_new_column</code> to look like an interactive session that shows how the function works.</p></li>
</ol>

<p>Here is the final result:</p>

<pre class="lang-py prettyprint-override"><code>import itertools


def safe(positions, k):
    """Given a list of positions, return True if the queen on the `k` column is safe."""
    return not any(
        menaces((k, positions[k]), pair)
        for pair in enumerate(positions)
        if pair[0] != k
    )


def add_new_column(positions, n):
    """
    Given an array of k-length `positions`, map each position to `n` new
    k+1-length positions by appending numbers from 0 to `n` - 1.

    &gt;&gt;&gt; list(add_new_column(((),), 3))
    [(0,), (1,), (2,)]
    &gt;&gt;&gt; list(add_new_column(((1,), (2,)), 3))
    [(1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)]
    """
    for position, i in itertools.product(positions, range(n)):
        yield (*position, i)


def menaces(pair1, pair2):
    row_diff = abs(pair1[1] - pair2[1])
    col_diff = abs(pair1[0] - pair2[0])
    if row_diff == col_diff:
        return True
    elif pair1[1] == pair2[1]:
        return True
    else:
        return False


def n_queens(board_size):
    """
    Given a dimension `board_size`, return an iterator with all the solutions
    to n-queens problem where n is `board_size`.
    """
    def _recur(i):
        if not i:
            return ((),)
        else:
            return (
                row
                for row in add_new_column(_recur(i - 1), board_size)
                if safe(row, i - 1)
            )
    return _recur(board_size)
</code></pre>

<p>An extra change I would make is to the <code>add_new_column</code> function. It receives the <code>positions</code> first which mean that it has to be in a tuple. By moving the <code>n</code> parameter to the front and using variable length parameters (<code>*positions</code>), the call can look less repetitive.</p>

<p>Here's the new function signature: (You can change the other calls if you like)</p>

<pre class="lang-py prettyprint-override"><code>def add_new_column(n, *positions):
    """
    Given an array of k-length `positions`, map each position to `n` new
    k+1-length positions by appending numbers from 0 to `n` - 1.

    &gt;&gt;&gt; list(add_new_column(3, ()))
    [(0,), (1,), (2,)]
    &gt;&gt;&gt; list(add_new_column(3, (1,), (2,)))
    [(1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)]
    """
    # Here's the code
</code></pre>
    </div>