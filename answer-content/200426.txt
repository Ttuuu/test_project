<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p><a href="https://adriann.github.io/programming_problems.html" rel="nofollow noreferrer">Simple Programming Problems</a></p>
  
  <p>Write a program that prints all prime numbers. (Note: if your
  programming language does not support arbitrary size numbers, printing
  all primes up to the largest number you can easily represent is fine
  too.)</p>
</blockquote>

<hr>

<p>Your program says one is prime. That is not correct.</p>

<p>The only even prime number is two. You don't appear take advantage of that. That is inefficient.</p>

<p>A number can only be divisible by a number less than or equal to its square root. You don't appear take advantage of that. That is inefficient.</p>

<p>You are asked to "[print] all primes up to the largest number you can easily represent." In Go, type int is either 32 or 64 bits. You don't guarantee the largest number by using type int64. Your program is not correct.</p>

<p>You have no program termination condition. Your program is not correct.</p>

<p>And so on.</p>

<hr>

<p>For example, fixing your code,</p>

<pre><code>package main

import (
    "fmt"
    "math"
)

func main() {
    fmt.Println("prime numbers:")
    fmt.Println(2)

    for n := int64(3); n &gt; 0; n += 2 {
        prime := true

        r := int64(math.Sqrt(float64(n))) + 1
        for i := int64(3); i &lt; r; i += 2 {
            if n%i == 0 {
                prime = false
                break
            }
        }

        if prime {
            fmt.Println(n)
        }
    }
}
</code></pre>

<hr>

<p>To provide a measure of performance, the results from a Go benchmark for all prime numbers up to 32,771:</p>

<pre><code>BenchmarkPeterSO-4           500       2661556 ns/op
BenchmarkIbnRushd-4            3     492864429 ns/op
</code></pre>
    </div>