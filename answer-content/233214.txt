<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>After reading Roland Illig's review and altering the code according to his recommendations, I went searching other improvements. The first thing I realized is that the code for the <code>operator&lt;=&gt;</code> function in <code>Strong_String</code> and <code>Weak_String</code> was really inefficient. So, I rewrote the function as follows:</p>

<pre><code>std::strong_ordering Strong_String::operator&lt;=&gt;(const Strong_String&amp; rhs) const
{
    const auto cmp = [](const unsigned char c, const unsigned char d) {
        return std::tolower(c) == std::tolower(d);
    };

    if (s == rhs.s) return std::strong_ordering::equal;
    auto values = std::mismatch(s.cbegin(), s.cend(), 
        rhs.s.cbegin(), rhs.s.cend(), cmp);
    if (values.first == s.cend()) {
        if (values.second == rhs.s.cend()) {    // no mismatches same length
            const auto comp = strcmp(s.c_str(), rhs.s.c_str()); // uppercase first
            if (comp &lt; 0) return std::strong_ordering::less;
            return std::strong_ordering::greater;
        }
        return std::strong_ordering::less;      // s is shorter than rhs.s
    }
    if (values.second == rhs.s.cend()) return std::strong_ordering::greater;
    if (tolower(*(values.first)) &lt; tolower(*(values.second))) {
        return std::strong_ordering::less;
    }
    return std::strong_ordering::greater;
}
</code></pre>

<p>In addition to being more compact and easier to read, this has the advantage of not having any unnecessary copying or additional looping, and it gets rid of code redundancy naming the lambda function. I have replaced the <code>std::equal</code> function with the <code>std::mismatch</code> function. This allows me to determine if the strings are the same as well as capture the differential character.</p>

<p>Well, that felt better, but when digging deeper, it seemed like the code for the class <code>Weak_String</code> and the class <code>Strong_String</code> were nearly identical. Further, I could not decide which version of the <code>Weak_String</code> class I liked better, when <code>operator==</code> was true only when the case matched or when just the character order was sufficient. So, with all these similar types of strings that I might want to use in some future project, decided to remove the redundancy through making a <em>templated class</em> <code>Multi_String</code>. I also create an <em>enum class</em> to distinguish the different kinds of strings.</p>

<p><code>Multi_String.hpp</code></p>

<pre><code>#ifndef MULTI_STRING
#define MULTI_STRING
#pragma once

#include &lt;compare&gt;
#include &lt;cstring&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;vector&gt;
#include &lt;algorithm&gt;
#include &lt;cassert&gt;

enum class String_Type : uint8_t {
    regular,
    dictionary,
    case_equivalent,
    case_insensitve
};

template &lt;String_Type ST&gt;
class Multi_String;
template &lt;String_Type ST&gt;
std::ostream&amp; operator&lt;&lt;(std::ostream&amp; out, const Multi_String&lt;ST&gt;&amp; str);

template &lt;String_Type ST&gt;
class Multi_String
{
    std::string s;
public:
    Multi_String(const char* cstr) : s{ cstr } {}
    Multi_String(const std::string&amp; s_) : s{ s_ } {}
    Multi_String(std::string&amp;&amp; s_) noexcept : s{ std::move(s_) } {}
    auto operator&lt;=&gt;(const Multi_String&lt;ST&gt;&amp; rhs) const;
    bool operator==(const Multi_String&lt;ST&gt;&amp; rhs) noexcept;
    const char* c_str() const noexcept;

    friend std::ostream&amp; operator&lt;&lt; (std::ostream&amp; out, const Multi_String&lt;ST&gt;&amp; s);
};


template&lt;String_Type ST&gt;
const char* Multi_String&lt;ST&gt;::c_str() const noexcept
{
    return s.c_str();
}

#pragma warning(push)
#pragma warning(disable:26486)
#pragma warning(disable:26489)
template&lt;String_Type ST&gt;
auto Multi_String&lt;ST&gt;::operator&lt;=&gt;(const Multi_String&lt;ST&gt;&amp; rhs) const
{
    const auto cmp = [](const unsigned char c, const unsigned char d) {
        return std::tolower(c) == std::tolower(d);
    };
    if (s == rhs.s) return std::weak_ordering::equivalent;
    auto values = std::mismatch(s.cbegin(), s.cend(), rhs.s.cbegin(),
        rhs.s.cend(), cmp);
    if (values.first == s.cend()) {
        if (values.second == rhs.s.cend())  // no mismatches same length
            return std::weak_ordering::equivalent;
        return std::weak_ordering::less;    // s is shorter than rhs.s
    }
    if (values.second == rhs.s.cend()) return std::weak_ordering::greater;
    if (tolower(*(values.first)) &lt; tolower(*(values.second))) {
        return std::weak_ordering::less;
    }
    return std::weak_ordering::greater;
}

template&lt;&gt;
auto Multi_String&lt;String_Type::regular&gt;::operator&lt;=&gt;
(const Multi_String&lt;String_Type::regular&gt;&amp; rhs) const
{
    if (s == rhs.s) return std::strong_ordering::equal;
    if (s &lt; rhs.s) return std::strong_ordering::less;
    return std::strong_ordering::greater;
}

template&lt;&gt;
auto Multi_String&lt;String_Type::dictionary&gt;::operator&lt;=&gt;
    (const Multi_String&lt;String_Type::dictionary&gt;&amp; rhs) const
{
    const auto cmp = [](const unsigned char c, const unsigned char d) {
        return std::tolower(c) == std::tolower(d);
    };
    if (s == rhs.s) return std::strong_ordering::equal;
    auto values = std::mismatch(s.cbegin(), s.cend(),
        rhs.s.cbegin(), rhs.s.cend(), cmp);
    if (values.first == s.cend()) {
        if (values.second == rhs.s.cend()) {    // no mismatches same length
            const auto comp = strcmp(s.c_str(), rhs.s.c_str()); // uppercase first
            if (comp &lt; 0) return std::strong_ordering::less;
            return std::strong_ordering::greater;
        }
        return std::strong_ordering::less;      // s is shorter than rhs.s
    }
    if (values.second == rhs.s.cend()) return std::strong_ordering::greater;
    if (tolower(*(values.first)) &lt; tolower(*(values.second))) {
        return std::strong_ordering::less;
    }
    return std::strong_ordering::greater;
}
#pragma warning (pop)

template&lt;String_Type ST&gt;
bool Multi_String&lt;ST&gt;::operator==(const Multi_String&lt;ST&gt;&amp; rhs) noexcept {
    return this-&gt;s == rhs.s;        // Distinguish between equal and equivalent
}

template&lt;&gt;
bool Multi_String&lt;String_Type::case_insensitve&gt;::operator==
(const Multi_String&lt;String_Type::case_insensitve&gt;&amp; rhs) noexcept {
    return (*this &lt;=&gt; rhs) == 0;    // Case Insensitive
}

std::ostream&amp; operator&lt;&lt;(std::ostream&amp; out, 
    const Multi_String&lt;String_Type::regular&gt;&amp; str) {
    out &lt;&lt; str.s;
    return out;
}

std::ostream&amp; operator&lt;&lt;(std::ostream&amp; out, 
    const Multi_String&lt;String_Type::dictionary&gt;&amp; str) {
    out &lt;&lt; str.s;
    return out;
}

std::ostream&amp; operator&lt;&lt;(std::ostream&amp; out, 
    const Multi_String&lt;String_Type::case_equivalent&gt;&amp; str) {
    out &lt;&lt; str.s;
    return out;
}

std::ostream&amp; operator&lt;&lt;(std::ostream&amp; out, 
    const Multi_String&lt;String_Type::case_insensitve&gt;&amp; str) {
    out &lt;&lt; str.s;
    return out;
}

#endif // !MULTI_STRING
</code></pre>

<p>I tried, but I was unable to combine the two identical versions of <code>cmp</code> within the body of the class. I was also unable to get a cleaner version of <code>operator&lt;&lt;</code>, but since there are only four cases, this was OK.</p>

<p>Additionally, I wanted to compare my <em>case insensitive</em> string to that of Mr. Sutter's GOTW #29 which manipulates the <code>class trait</code> of the <code>std::basic_string</code>. Both functions perform identically in Mr. Sutter's tests. I show this code here:</p>

<pre><code>// Herb Sutter solution to make case-insensitive strings
// Manipulate the "class traits" to lose case sensitivity
// for more see: http://gotw.ca/gotw/029.htm
// 
// CI_String.hpp
//
#ifndef CI_STRING
#define CI_STRING

#pragma once

#include &lt;string&gt;
#include &lt;cassert&gt;
using std::char_traits;
using std::basic_string;

struct ci_char_traits : public char_traits&lt;char&gt;
    // just inherit all the other functions
    //  that we don't need to override
{
    static bool eq(char c1, char c2);
    static bool ne(char c1, char c2);
    static bool lt(char c1, char c2);
    static int compare(const char* s1, const char* s2, size_t n);
    static const char* find(const char* s, int n, char a);
};

using ci_String = basic_string&lt;char, ci_char_traits&gt;;

#endif // !CI_STRING

//
// CI_String.cpp
//
#include "CI_String.hpp"
#pragma warning(push)
#pragma warning(disable:26440)
#pragma warning(disable:26489)
#pragma warning(disable:26481)

bool ci_char_traits::eq(char c1, char c2)
{
    return toupper(c1) == toupper(c2);
}

bool ci_char_traits::ne(char c1, char c2)
{
    return toupper(c1) != toupper(c2);
}

bool ci_char_traits::lt(char c1, char c2)
{
    return toupper(c1) &lt; toupper(c2);
}

int ci_char_traits::compare(const char* s1, const char* s2, size_t n)
{
    assert(s1 != nullptr);
    assert(s2 != nullptr);

    return _memicmp(s1, s2, n);
}

const char* ci_char_traits::find(const char* s, int n, char a)
[[gsl::suppress(26487)]]
{
    assert(s != nullptr);
    while (n-- &gt; 0 &amp;&amp; toupper(*s) != toupper(a)) {
        ++s;
    }
    return s;
}
</code></pre>

<p>As well as the reworked <strong>main</strong> program:</p>

<pre><code>#include "Multi_String.hpp"
#include "CI_String.hpp"    
#include &lt;compare&gt;
#include &lt;cstring&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;vector&gt;
#include &lt;algorithm&gt;
#include &lt;cassert&gt;
#include &lt;memory&gt;
#include &lt;random&gt;

constexpr int sign(int i) noexcept
{
    return i &lt; 0 ? -1 : i &gt; 0 ? +1 : 0;
}

template&lt;typename T&gt;
int spaceship(T a, T b) noexcept
{
    return a &lt; b ? -123 : a &gt; b ? +123 : 0;
}

std::string op(int cmp)
{
    return cmp &lt; 0 ? "&lt;" : cmp &gt; 0 ? "&gt;" : "==";
}

template&lt;typename T&gt;
void test_spaceship(const std::vector&lt;T&gt;&amp; elements)
{
    bool error = false;

    [[gsl::suppress(26446)]]
    for (std::size_t i = 0; i &lt; elements.size(); ++i) {
        for (std::size_t j = 0; j &lt; elements.size(); ++j) {
            const int expected = spaceship(i, j);
            const int actual = spaceship(elements[i], elements[j]);
            if (sign(expected) != sign(actual)) {
                std::cout &lt;&lt; __func__ &lt;&lt; ":\n";
                std::cout &lt;&lt; "  expected " &lt;&lt; elements[i] &lt;&lt; " "
                    &lt;&lt; op(expected) &lt;&lt; " " &lt;&lt; elements[j] &lt;&lt; "\n";
                std::cout &lt;&lt; "  but got  " &lt;&lt; elements[i] &lt;&lt; " "
                    &lt;&lt; op(actual) &lt;&lt; " " &lt;&lt; elements[j] &lt;&lt; "\n";
                error = true;
            }
        }
    }
    std::flush(std::cerr);
}

using EQ_String = Multi_String&lt;String_Type::case_equivalent&gt;;
using CI_String = Multi_String&lt;String_Type::case_insensitve&gt;;
using R_String = Multi_String&lt;String_Type::regular&gt;;
using D_String = Multi_String&lt;String_Type::dictionary&gt;;

#pragma warning(push)
#pragma warning(disable:26486)
int main()
{
    std::vector&lt;D_String&gt; dictionary_vector = { "cat","CAT","DOG","dog",
        "fish","Dog","" };

    std::cout &lt;&lt; "Before sort          : ";
    for (const auto&amp; s : dictionary_vector) std::cout &lt;&lt; s &lt;&lt; " ";
    std::cout &lt;&lt; "\n";
    std::sort(dictionary_vector.begin(), dictionary_vector.end());

    std::cout &lt;&lt; "After dictionary sort: ";
    std::vector&lt;CI_String&gt; ci_vector;
    std::vector&lt;EQ_String&gt; eq_vector;
    std::vector&lt;R_String&gt; regular_vector;
    std::vector&lt;ci_String&gt; sutter_vector;
    for (const auto&amp; s : dictionary_vector) {
        std::cout &lt;&lt; s &lt;&lt; " ";
        ci_vector.emplace_back(s.c_str());
        eq_vector.emplace_back(s.c_str());
        regular_vector.emplace_back(s.c_str());
        sutter_vector.emplace_back(s.c_str());
    }
    std::cout &lt;&lt; "\n\n";

    std::cout &lt;&lt; "CI_String:\n";
    test_spaceship(ci_vector);
    std::cout &lt;&lt; "\n";

    std::cout &lt;&lt; "EQ_String:\n";
    test_spaceship(eq_vector);
    std::cout &lt;&lt; "\n";

    std::cout &lt;&lt; "R_String:\n";
    test_spaceship(regular_vector);
    std::cout &lt;&lt; "\n";

    auto ci_last = std::unique(ci_vector.begin(), ci_vector.end());
    if (ci_last == ci_vector.end())
        std::cout &lt;&lt; "CI_vector is UNIQUE!\n";
    else std::cout &lt;&lt; "CI_vector is not UNIQUE!\n";
    ci_vector.erase(ci_last, ci_vector.end());
    for(const auto &amp; s : ci_vector) std::cout &lt;&lt; s &lt;&lt; " ";
    std::cout &lt;&lt; "\n\n";

    auto sutter_last = std::unique(sutter_vector.begin(), sutter_vector.end());
    if (sutter_last == sutter_vector.end())
        std::cout &lt;&lt; "Sutter ci_vector is UNIQUE!\n";
    else std::cout &lt;&lt; "Sutter ci_vector is not UNIQUE!\n";
    sutter_vector.erase(sutter_last, sutter_vector.end());
    for (const auto&amp; s : sutter_vector) std::cout &lt;&lt; s.c_str() &lt;&lt; " ";
    std::cout &lt;&lt; "\n\n";

    auto rd = std::random_device();
    auto e1 = std::default_random_engine(rd());
    std::shuffle(eq_vector.begin(), eq_vector.end(), e1);
    std::cout &lt;&lt; "EQ_vector shuffled: ";
    for (const auto&amp; s : eq_vector) std::cout &lt;&lt; s &lt;&lt; " ";
    std::cout &lt;&lt; "\n";
    std::sort(eq_vector.begin(), eq_vector.end());
    std::cout &lt;&lt; "EQ_vector sort    : ";
    for (const auto&amp; s : eq_vector) std::cout &lt;&lt; s &lt;&lt; " ";
    std::cout &lt;&lt; "\n";

    auto eq_last = std::unique(eq_vector.begin(), eq_vector.end());
    if (eq_last == eq_vector.end())
        std::cout &lt;&lt; "EQ_vector is UNIQUE!\n";
    else std::cout &lt;&lt; "EQ_vector is not UNIQUE!\n";
    eq_vector.erase(eq_last, eq_vector.end());
    for(const auto &amp; s : eq_vector) std::cout &lt;&lt; s &lt;&lt; " ";
    std::cout &lt;&lt; "\n\n";

    CI_String weak_test{ "AbCdE" };
    assert(weak_test == "abcde");
    assert(weak_test == "ABCDE");
    assert(std::strcmp(weak_test.c_str(), "AbCdE") == 0);
    assert(std::strcmp(weak_test.c_str(), "abcde") != 0);

    std::cout &lt;&lt; "success for CI_String: " &lt;&lt; weak_test.c_str() &lt;&lt; "\n\n";

    ci_String sutter_test{ "AbCdE" };
    assert(sutter_test == "abcde");
    assert(sutter_test == "ABCDE");
    assert(std::strcmp(sutter_test.c_str(), "AbCdE") == 0);
    assert(std::strcmp(sutter_test.c_str(), "abcde") != 0);

    std::cout &lt;&lt; "success for sutter ci_string: "
        &lt;&lt; sutter_test.c_str() &lt;&lt; "\n\n";
}
#pragma warning(pop)
</code></pre>

<p>And Output:</p>

<pre><code>Before sort          : cat CAT DOG dog fish Dog
After dictionary sort:  CAT cat DOG Dog dog fish

CI_String:
test_spaceship:
  expected CAT &lt; cat
  but got  CAT == cat
test_spaceship:
  expected cat &gt; CAT
  but got  cat == CAT
test_spaceship:
  expected DOG &lt; Dog
  but got  DOG == Dog
test_spaceship:
  expected DOG &lt; dog
  but got  DOG == dog
test_spaceship:
  expected Dog &gt; DOG
  but got  Dog == DOG
test_spaceship:
  expected Dog &lt; dog
  but got  Dog == dog
test_spaceship:
  expected dog &gt; DOG
  but got  dog == DOG
test_spaceship:
  expected dog &gt; Dog
  but got  dog == Dog

EQ_String:
test_spaceship:
  expected CAT &lt; cat
  but got  CAT == cat
test_spaceship:
  expected cat &gt; CAT
  but got  cat == CAT
test_spaceship:
  expected DOG &lt; Dog
  but got  DOG == Dog
test_spaceship:
  expected DOG &lt; dog
  but got  DOG == dog
test_spaceship:
  expected Dog &gt; DOG
  but got  Dog == DOG
test_spaceship:
  expected Dog &lt; dog
  but got  Dog == dog
test_spaceship:
  expected dog &gt; DOG
  but got  dog == DOG
test_spaceship:
  expected dog &gt; Dog
  but got  dog == Dog

R_String:
test_spaceship:
  expected cat &lt; DOG
  but got  cat &gt; DOG
test_spaceship:
  expected cat &lt; Dog
  but got  cat &gt; Dog
test_spaceship:
  expected DOG &gt; cat
  but got  DOG &lt; cat
test_spaceship:
  expected Dog &gt; cat
  but got  Dog &lt; cat

CI_vector is not UNIQUE!
 CAT DOG fish

Sutter ci_vector is not UNIQUE!
 CAT DOG fish

EQ_vector shuffled: CAT Dog DOG dog  cat fish
EQ_vector sort    :  CAT cat Dog DOG dog fish
EQ_vector is UNIQUE!
 CAT cat Dog DOG dog fish

success for CI_String: AbCdE

success for sutter ci_string: AbCdE
</code></pre>

<p>Notice that the <code>case_equivalent</code> (EQ_String) and <code>case_insensitive</code> (CI_String) designations give the same equivalency answers when sorting, but find a very different set of unique members. Also notice that the order for the <code>regular</code> vs. <code>dictionary</code> sorts differ only in how the capital letters get sorted.
I hope this helps</p>
    </div>