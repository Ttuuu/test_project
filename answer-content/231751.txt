<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First things first - syntax:</p>

<p>Why is generate an async function? You should change the way the files are read. Please read the answers to this question: <a href="https://stackoverflow.com/questions/46867517/how-to-read-file-with-async-await-properly">https://stackoverflow.com/questions/46867517/how-to-read-file-with-async-await-properly</a></p>

<p>Logic:</p>

<p>The <code>_validate</code> function checks integrity of your object. All the data it needs is available in the constructor and this is where this function should be called. Never defer throwing an exception if you cannot avoid it.</p>

<p>Structure:</p>

<p>As for what design to use - your class is doing multiple things at the same time. Reading a template file from disk is one thing - and it requires handling an asynchronous operation. Then there is template compilation - which in case of HBS is not asynchronous and there is rendering - not asynchronous again. I'd recommend to restructure the solution a bit:</p>

<ul>
<li>Use one class to read a file and return you a compiled template object. In case you needed to reuse your template objects - do not read from disk on every template call.</li>
<li>The returned class (let's call this one <code>HandlebarsTemplate</code>) should take a string as its constructor input and attempt compiling it as HBS. If the template was not correct - you get an exception thrown on object creation.</li>
<li>Note that <code>HandlebarsTemplate</code> could be reused for templates coming from sources other than files e.g. database or just a string literal in the code.</li>
<li>The object <code>HandlebarsTemplate</code> should expose a method called <code>generate(data)</code>. This method should attempt rendering <code>data</code> the with the compiled HBS template.</li>
<li>This way you get reusable template objects</li>
</ul>

<p>This would be up to you if you want to read the template each time or store a compiled instance in memory. Both approaches have their pros and cons.</p>
    </div>