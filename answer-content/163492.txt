<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are two ways you could represent a graph with weighted edges in Python:</p>

<ol>
<li><p>Represent a graph as a mapping from a node \$n\$ to a mapping from neighbouring node \$m\$ to the weight \$w\$ of the edge from \$n\$ to \$m\$:</p>

<pre><code>graph = {
    0: {2: 4, 4: 60, 3: 23},
    1: {},
    2: {3: 4},
    3: {1: 10},
    4: {2: 15},
}
</code></pre></li>
<li><p>Represent a graph as a pair of mappings: one from a node \$n\$ to a list of its neighbouring nodes, and the other from pairs of nodes \$n, m\$ to the weight \$w\$ of the edge from \$n\$ to \$m\$:</p>

<pre><code>graph = {
    0: [2, 4, 3],
    1: [],
    2: [3],
    3: [1],
    4: [2],
}
weights = {
    (0, 2): 4,
    (0, 4): 60,
    (0, 3): 23,
    (2, 3): 4,
    (3, 1): 10,
    (4, 2): 15,
}
</code></pre></li>
</ol>

<p>Either of these representations should work fine. Representation (2) would be good if you need to iterate over all the edges at some point in your algorithm. Representation (1) is the simplest and probably best if you have no special requirements.</p>

<p><strong>Answers to comments</strong></p>

<ol>
<li><p>You don't even need <code>.keys()</code> — in Python, iterating over a dictionary yields its keys, so you can write:</p>

<pre><code>for m in graph[n]:
    # m is a neighbour of n
</code></pre></li>
<li><p>Yes, <code>defaultdict</code> is a useful technique for building graphs. In representation (1) you'd start with:</p>

<pre><code>graph = defaultdict(dict)
</code></pre>

<p>and then add an edge from \$n\$ to \$m\$ with weight \$w\$ by writing:</p>

<pre><code>graph[n][m] = w
</code></pre>

<p>In representation (2) you'd start with:</p>

<pre><code>graph = defaultdict(list)
edges = {}
</code></pre>

<p>and then add an edge from \$n\$ to \$m\$ with weight \$w\$ by writing:</p>

<pre><code>graph[n].append(m)
edges[n, m] = w
</code></pre></li>
</ol>
    </div>