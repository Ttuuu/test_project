<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>How can I decrease code length?</p>
</blockquote>

<p>You could split your big <code>for</code> loop into <code>2</code> smaller ones. The first one would print all diagonals up to the main one, and the other one the remaining ones. </p>

<p>For instance, let's say there's a matrix like:</p>

<pre><code>1 2 3
4 5 6
7 8 9
</code></pre>

<p>Then, your first loop would print <code>1 4 2 7 5 3</code> and the second one <code>8 6 9</code>. The code would look conciser and more readable too:</p>

<pre><code>for (int i = 0; i &lt; N; i++) {
    for (int j = 0; j &lt;= i; j++) {
        printf("%d ", pixel_array[i - j][j]);
    }
}

for (int j = 0; j &lt; N - 1; j++) {
    for (int i = N - 1; i &gt; j; i--) {
        printf("%d ", pixel_array[i][N - i + j]);
    }
}
</code></pre>

<blockquote>
  <p>How can I improve the efficiency of this program?</p>
</blockquote>

<p>I don't think it's possible to make it more efficient than O(nÂ²) as you have to go through all matrix elements to print them diagonally. So, the suggested solution is efficient enough.</p>

<blockquote>
  <p>Any other programming practices to be implemented</p>
</blockquote>

<p>Rather than using an <code>int</code> type for defining a size of your array, you could use <code>uint32_t</code> (or <code>uint16_t</code> or <code>uint64_t</code> - it depends on your requirements). Your size cannot be negative, anyways. So, change <code>int N = 5;</code> to <code>const uint32_t N = 5</code>. </p>

<p>Rename your <code>array</code> to <code>squareMatrix</code> because you're actually dealing with square matrices in your app.    </p>

<p>Also, create a method out of your algorithm block - but I'll leave it up to you.</p>
    </div>