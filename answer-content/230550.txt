<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Collected thoughts:</p>

<p>Your <code>Helpers</code> class is weird. It mixes e.g. command line input (<code>GetArrayFromSplitInput</code>) with a bad pattern that you don't need, that is, the <code>RunCommandIfTrue</code> method: just use an if statement where you need it instead of using higher-order functions! You just make your code unnecessarily harder to read at the call sites of <code>RunCommandIfTrue</code>. </p>

<p>What's worse, your Helpers class also contains business logic (<code>IsValidPlacement</code>), which is a big no-no. Down that road lie God objects and the death of software architecture. This mixing of responsibilities is actually probably the biggest issue with your code, as it creates the impression that you gave no thought to future-proofing your design. It's the S in SOLID!</p>

<p>There's also basically your entire Main function. You have</p>

<pre><code>bool run = true;
[...]
while (run)
{
</code></pre>

<p>but there's no place where run is ever set to false, making the construct useless. Also, this line: </p>

<pre><code>handler.HandleCommand(Helpers.GetArrayFromSplitInput(Console.ReadLine()));
</code></pre>

<p>is considerably too busy. Separate state-changing or IO actions should almost always be in separate statements, not be crammed into a single statement like this. This is particularly true here. Your decision to cram it all into one line forces you to keep the entire statement inside a single try-block, even though the exception you are trying to catch can only happen within the <code>GetArrayFromSplitInput</code> method. This can cause your catch-block to catch exceptions that it is not supposed to and then misrepresent the error:</p>

<pre><code>catch (Exception e)
{
    Console.WriteLine("Invalid Input: " + e.Message);
}
</code></pre>

<p>Any error in your <code>HandleCommand</code> routine will be reported as an invalid input. The same is true if <code>Console.ReadLine</code> is called on a broken pipe. That is (potentially) a <strong>bug</strong>! Always keep try blocks as small as at all possible.</p>

<p>Speaking of try blocks, one of your methods represents success or failure with a boolean return value. This isn't the 1970's anymore, if your method fails to execute, throw an exception! A reminder here that other programmers might forget to check for the boolean return value when calling your method.</p>

<p>Then there's snippets like this:</p>

<pre><code>//Calls turn with direction as increment of _f
public void Left()
{
    Turn(() =&gt; (int)_f + 1);
}
</code></pre>

<p>Without knowing how the <code>Turn</code> method works internally, I am left guessing what this might be doing. And when looking at that <code>Turn</code> method, it is a lot of complexity for a one-liner: </p>

<pre><code>//If value less than zero default, otherwise calculate direction based on modulo
private void Turn(Func&lt;int&gt; newDirection)
{
    _f = (newDirection() &lt; 0) ? Direction.EAST : (Direction)(newDirection() % 4);
}
</code></pre>

<p>This is so much mental overload just to clamp a value in the [0, 3] range that it is not worth the DRY here. Rule of thumb: copying a line of code once (here: the clamping logic in the Left and Right functions) is probably okay, it's the third instance that tells you to start looking for a solution. Even then, it's better for readability if the solution doesn't involve random lambdas and higher-order functions!</p>

<p>All in all, the code looks very much like you were trying to be "clever" when writing it. This is a habit that you should work on. Remember the old adage: it is twice as hard to debug code as it is to write code, and by corollary, if you employ your full cleverness to write it, you are unable to debug it! Start writing stupider code, with more emphasis on KISS and clearly delineating the responsibilities of the classes you're writing. Even in a coding interview, the goal should not be to "show off" how well you understand higher-order logic, but to show that you are able to write correct and maintainable code that is, first and foremost, also easy to read for other programmers. That is an important skill when working in a team!</p>
    </div>