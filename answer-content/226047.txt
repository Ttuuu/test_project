<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Rubocop Report</h2>

<h3>connectedCell</h3>

<p>Avoid nested code blocks if clean alternative statements are available. 
For instance, in method <code>connectedCell</code> you have the following block:</p>

<blockquote>
<pre><code>if matrix[i][j] == 1
  # .. code omitted
end
</code></pre>
</blockquote>

<p>Replace the if-statement with <code>next unless matrix[i][j] == 1</code> and you'll be able to reduce nesting with 1 level.</p>

<p>The next part has a similar avoidable nesting, only this time we can use an inline if-statement.</p>

<blockquote>
<pre><code>if res[0] &gt; highest_count
    highest_count = res[0]
end
</code></pre>
</blockquote>

<p>This could be replaced with <code>highest_count = res[0] if res[0] &gt; highest_count</code>.</p>

<p>And prefer to use <em>snake_case</em> for method names: <code>connected_cell</code>.</p>

<p>The complete method could then be written as:</p>

<pre><code>def connected_cell(matrix)
  highest_count = 0
  visited = {}

  (0...matrix.length).each do |i|
    (0...matrix[0].length).each do |j|
      next if visited[[i, j]]

      next unless matrix[i][j] == 1

      res = get_area_count([i, j], matrix)
      highest_count = res[0] if res[0] &gt; highest_count

      visited = visited.merge(res[1])
    end
  end

  highest_count
end
</code></pre>

<h3>get_area_count</h3>

<p>The while condition <code>while q.length &gt; 0</code> should be replaced by <code>until q.empty?</code> because it's considered a negative condition (pseudo: <code>while !empty</code>). </p>

<p>We have another case of avoidable nesting: replace the <code>if !visited[tile_pos]</code> block with <code>next if visited[tile_pos]</code>.</p>

<p>The method rewritten:</p>

<pre><code>def get_area_count(pos, matrix)
  q = [pos]
  visited = {}
  count = 0
  until q.empty?
    tile_pos = q.shift
    next if visited[tile_pos]

    count += 1
    visited[tile_pos] = true
    q += nbrs(tile_pos, matrix)
  end

  [count, visited]
end
</code></pre>
    </div>