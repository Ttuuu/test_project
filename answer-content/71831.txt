<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Couple of additions to everyone else:</p>

<ul>
<li>both <code>Player</code> and <code>Board</code> need to know where pieces are, both theirs and the opponents. Can't think offhand the best way to decompose this, but consider how they'll talk to each other with minimal duplication. I guess it makes more sense to put it under <code>Board</code>, then have <code>Player</code> store a reference to <code>Board</code> and either inherit or composite its methods:</li>
<li><p><code>*.isValid()</code> only check from- and to-coords, they currently don't check if there are intervening friendly or enemy pieces, or indeed if the to-spot is occupied. I think you should do that in one function at the Board level, it will get very ugly if you do that for each piece. You might need a helper function (iterator?) for each piece to generate <code>interveningSpots(fromX,fromY,toX,toY,pieceType)</code> so <code>Board.validMove()</code> can test if they're occupied.</p></li>
<li><p>the name <code>Piece.isValid()</code> is confusing, it could mean either <code>validMove()</code> or <code>validPosition()</code>. Personally I'd rename it <code>validMove()</code>. (We'll also need a <code>validPosition()</code> if you ever implement promotion, but again, that would be implemented at Board level not Piece or Player)</p></li>
<li><p><code>King.isValid()</code> seems to currently always return false - bug?</p></li>
<li><p><code>Queen/Bishop/Rook.isValid()</code> currently allow null zero moves <code>(toX==fromX &amp;&amp; toY==fromY)</code>. This might sound like nitpicking, but a) it might wrongly allow you to evade mate by "doing nothing" b) it is likely to mess up recursion in any AI you or someone might want to add.</p></li>
<li><p>a tip for more performant and more compact code for <code>King.isValid()</code>: you don't need to take the sqrt; just directly test that dist2 = (dx^2 + dy^2) is either 1 or 2. And you don't need abs(dx) since the square of a negative number is positive. So:</p>

<pre><code>@Override
public boolean isValid(...) {
    if(!super.isValid(...)) {
        return false;

    int dist2 = Math.pow((toX - fromX), 2) + Math.pow((toY - fromY), 2);
    return (dist2 == 1 || dist2 == 2);
}
</code></pre></li>
</ul>
    </div>