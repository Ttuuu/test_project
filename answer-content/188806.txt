<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>Testing for <code>list-&gt;destroy</code> is done too many times. Better do it in the <code>list_init</code>:</p>

<pre><code>    if (!destroy) {
        destroy = dummy_destroy;
    }
    list-&gt;destroy = destroy;
</code></pre>

<p>with</p>

<pre><code>static void dummy_destroy(void * data) {}
</code></pre></li>
<li><p><code>list_splice</code> is unnecessarily verbose.</p>

<ol>
<li>It repeats what <code>list_find</code> is for.</li>
<li><code>found</code> is unnecessary: when <code>if(!found)</code> line is reached it is guaranteed that <code>p</code> was not there (otherwise one of the early returns was executed).</li>
<li><p>The sequence</p>

<pre><code>    free(list2);
    return list1;
</code></pre>

<p>is repeated too many times.</p></li>
<li><p>The function always returns <code>list1</code>, and therefore the return value conveys no information to the caller. I'd rather make it <code>void</code> or figure out something useful to return.</p>

<p>As a side note, I disagree with the design decision to treat a non-existent <code>pos</code> as a signal to append. In such situation it seems more logical to fail.</p></li>
</ol>

<p>All that said, consider</p>

<pre><code>list_splice(list_t * list1, list_t * list2, node_t * pos)
{
    pos = list_find(list1, pos);
    if (!pos) {
        return NULL;
    }

    list2-&gt;last-&gt;next = pos-&gt;next;
    pos-&gt;next-&gt;prev = list2-&gt;last;
    pos-&gt;next = list2-&gt;first;
    list2-&gt;first-&gt;prev = pos;

    free(list2);
    return list1;
}
</code></pre>

<p>Same applies to <code>list_insert</code> and <code>list_remove</code>.</p></li>
<li><p>The <code>found</code> clause in <code>list_remove</code> can be streamlined:</p>

<pre><code>if (!pos-&gt;prev) {
    list-&gt;first = pos-&gt;next;
} else {
    pos-&gt;prev-&gt;next = pos-&gt;next;
}
if (!pos-&gt;next) {
    list-&gt;last = pos-&gt;prev;
} else {
    pos-&gt;next-&gt;prev = pos-&gt;prev;
}
</code></pre></li>
<li><p>When popping the last element from the top, <code>list-&gt;first</code> automagically becomes <code>NULL</code> after the <code>list-&gt;first = list-&gt;first-&gt;next;</code> assignment. An explicit <code>list-&gt;first = NULL</code> is redundant. You may want to convert it into an assertion:</p>

<pre><code>if (list_empty(list)) {
    assert(list-&gt;first == NULL);
    list-&gt;last = NULL;
}
</code></pre>

<p>Same applies to <code>list_pop_back</code>.</p></li>
<li><p>The <code>list_push_front</code> can be streamlined (notice that certain things shall happen no matter what):</p>

<pre><code>newnode-&gt;next = list-&gt;first;
if (!list-&gt;first) {
    list-&gt;last = newnode;
} else {
    list-&gt;first-&gt;prev = newnode;
}
list-&gt;first = newnode;
</code></pre>

<p>Same applies to <code>list_push_back</code>.</p></li>
<li><p><code>return list-&gt;first ? list-&gt;first : NULL;</code> is a long way to say</p>

<pre><code>return list-&gt;first;
</code></pre></li>
<li><p>As a general note, I am not sure that exposing <code>node_t</code> to a client is a good idea.</p></li>
</ul>
    </div>