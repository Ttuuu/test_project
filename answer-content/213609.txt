<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First, note that this review is of general good coding practices for production code, and not all suggestions will be appropriate for the sphere of "competitive programming", in which I have no significant experience.</p>

<p>Some thoughts:</p>

<p>For readability, use whitespace consistently and more frequently. There should be whitespace (0) after control statements (<code>if</code>, <code>while</code>, <code>for</code>), around operators (<code>+</code>, <code>%</code>, ..), and before curly braces (<code>{</code>).</p>

<p>In Java, the convention is that open curly braces go on the same line, not on a newline.</p>

<p>Use <code>final</code> aggressively when variable declarations will not change to reduce cognitive load on readers.</p>

<p><code>AutoCloseable</code> resources such as <code>Scanner</code> should be used in a <code>try-with-resources</code> block to ensure they get closed.</p>

<p><code>a</code> and <code>b</code> are poor choices for variable names because they're meaningless. Variable names should describe the value they hold. You probably don't even need the intermediate variables.</p>

<p>Methods not intended for use outside their class should be <code>private</code>. Always prefer the most restrictive access you can reasonably apply.</p>

<p>In a real application, it would be highly preferable to having the reversed sum pushed back to the <code>main()</code> method to handle printing. This gives you flexibility, rather than pushing your output choice through your code - if you want to change later, it changes in fewer, higher-level places. </p>

<p>It might be nice to use the number of cases they provide you with. </p>

<p>Don't throw <code>Exception</code> ever - throw the most specific checked exception possible. Don't declare thrown checked exceptions if you don't actually throw them.</p>

<p>Your algorithm is much more complex than it needs to be. Lists are extraneous. The problem can be solved with math.</p>

<p>If you were to apply all the changes I suggested, your code might look more like:</p>

<pre><code>import java.util.Scanner;

class Main {

    public static void main(final String[] args) {
        try (final Scanner sc = new Scanner(System.in)) {
            final int numberOfCases = sc.nextInt();
            for (int i = 0; i &lt; numberOfCases; i++) {
                final int firstNumber = sc.nextInt();
                final int secondNumber = sc.nextInt();
                System.out.println(addReversedNumbers(firstNumber, secondNumber));
            }
        }
    }

    private static int addReversedNumbers(final int firstNumber, final int secondNumber) {
        return reverseNumber(reverseNumber(firstNumber) + reverseNumber(secondNumber));
    }

    private static int reverseNumber(final int number) {
        int numberToReverse = number;
        int reversedNumber = 0;

        while (numberToReverse &gt; 0) {
            final int digit = numberToReverse % 10;
            numberToReverse /= 10;
            reversedNumber = 10 * reversedNumber + digit;
        }
        return reversedNumber;

    }

}
</code></pre>
    </div>