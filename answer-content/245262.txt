<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Timing</h1>
<p>The timer thread is unnecessary and an inaccurate way to measure time.</p>
<blockquote>
<p>I do now know about this system_clock, system calls might slow down the process (maybe the context switch even more though)</p>
</blockquote>
<p>Querying the time costs a bit of time, even if it does not involve an actual system call - which it really may not, there are lots of clever tricks for example <code>clock_gettime</code> uses vDSO on modern Linux and reads from a shared memory location and <code>QueryPerformanceCounter</code> reads the TSC on <a href="https://docs.microsoft.com/en-us/windows/win32/sysinfo/acquiring-high-resolution-time-stamps#qpc-support-in-windows-versions" rel="noreferrer">typical Windows systems</a>, there is no transition into and out of kernel mode. It's never a lot of time relative to what this program is doing, the overhead of getting the time is only an issue when timing very short spans of time. Even if getting the time costs a milisecond (which would be unacceptable and considered a bug in the implementation), it would still be OK for this program.</p>
<h1>Performance</h1>
<p>Storing the factors in explicit linked lists is a major performance problem, and unlike usual, using vectors wouldn't be great either. There is an alternative: store only one factor of a number. That still gives a complete factorization for any number, because if a number <code>N</code> has a factor <code>factors[N]</code>, then you can divide <code>N</code> by that factor and look up a factor of the new (smaller) number and so on, until 1 is reached.</p>
<p>That way the inner loop of the sieve only does a bunch of stores into a vector, nothing heavy-weight like dynamically allocating nodes of a linked list, and the memory usage does not get out hand.</p>
<p>As a convention, I'll use that the lowest factor of a prime is the prime itself. That is the mathematical definition, and it makes iterating over the implicit factor lists easy.</p>
<h1>Other</h1>
<p>Defining <code>MAX</code> by macro definition and putting local variable declarations at the top of the function are very C things to do. Even C has moved away from "all locals at the top". As general guidelines, I recommend using <code>const</code> variables instead of defines, and limiting local variables with the smallest possible scope. That does not repeatedly incur a cost for "making a variable" because that's not how that happens, any fixed space a function needs is allocated all at once at function entry. Besides, most local variables spend their entire lifetime in registers.</p>
<p>Avoid <code>#include &lt;unistd.h&gt;</code> if possible/reasonable, it does not exist on all platforms.</p>
<p>Pick a brace style and stick to it. There were "same line"-braces and "next line"-braces. There are various opinions on which should be used, but at least they shouldn't be mixed.</p>
<p>In total, the code might come out like this:</p>
<pre><code>#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;math.h&gt;
#include &lt;chrono&gt;

int main() {
    const int MAX = 200000000;
    std::vector&lt;int&gt; factors;

    std::cout &lt;&lt; "Initiallizating" &lt;&lt; std::endl;
    auto start_time = std::chrono::steady_clock::now();
    factors.resize(MAX);
    std::cout &lt;&lt; "Initiallization took "
        &lt;&lt; std::chrono::duration_cast&lt;std::chrono::milliseconds&gt;(std::chrono::steady_clock::now() - start_time).count()
        &lt;&lt; " ms" &lt;&lt; std::endl;

    std::cout &lt;&lt; "Starting calculation" &lt;&lt; std::endl;
    start_time = std::chrono::steady_clock::now();
    int upper_bound = sqrt(MAX) + 1;
    for (int i = 2; i &lt; upper_bound; ++i) {
        if (factors[i] == 0) {
            for (int j = i; j &lt; MAX; j += i) {
                factors[j] = i;
            }
        }
    }
    std::cout &lt;&lt; "Calculation took "
        &lt;&lt; std::chrono::duration_cast&lt;std::chrono::milliseconds&gt;(std::chrono::steady_clock::now() - start_time).count()
        &lt;&lt; " ms" &lt;&lt; std::endl;

    std::cout &lt;&lt; "Validating results" &lt;&lt; std::endl;
    for (int i = 2; i &lt; 20; ++i) {
        std::cout &lt;&lt; i &lt;&lt; ": ";
        if (factors[i] == i) {
            std::cout &lt;&lt; "Is prime";
        }
        else {
            for (int N = i; N &gt; 1; N /= factors[N]) {
                std::cout &lt;&lt; factors[N] &lt;&lt; ", ";
            }
        }
        std::cout &lt;&lt; std::endl;
    }

    return 0;
}
</code></pre>
<p>On my PC the sieving takes about 2.5 seconds now. Ideone is a bit slower but the program is fast enough to <a href="https://ideone.com/grBGBl" rel="noreferrer">run there</a> too.</p>
    </div>