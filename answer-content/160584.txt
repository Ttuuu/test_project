<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A shorter version, functionally equivalent to yours:</p>

<pre><code>def dict_zip(*dicts):
    return {k: [d[k] for d in dicts] for k in args[0].keys()}
</code></pre>

<p>That's assuming all dicts have the same keys, or more exactly, all dicts have at least all the keys present in the first dict.</p>

<p>To make it more robust and handle cases when dicts don't have the same keys:</p>

<pre><code>def dict_zip(*dicts):
    all_keys = {k for d in dicts for k in d.keys()}
    return {k: [d[k] for d in dicts if k in d] for k in all_keys}
</code></pre>

<p>Regarding type hints: not sure, but it might be something based on <a href="https://docs.python.org/3.5/library/typing.html#typing.MutableMapping" rel="noreferrer">typing.MutableMapping</a>. But that's <strong>Python 3</strong>.</p>

<p><strong>EDIT</strong></p>

<p>To add padding for keys which are not present in all dicts:</p>

<pre><code>def dict_zip(*dicts, fillvalue=None):
    all_keys = {k for d in dicts for k in d.keys()}
    return {k: [d.get(k, fillvalue) for d in dicts] for k in all_keys}
</code></pre>

<p>If you have to use Python 2 <em>(if you can, upgrade to Py3 for your own good)</em>:</p>

<pre><code>def dict_zip(*dicts, **kwargs):
    fillvalue = kwargs.get('fillvalue', None)
    all_keys = {k for d in dicts for k in d.keys()}
    return {k: [d.get(k, fillvalue) for d in dicts] for k in all_keys}
</code></pre>

<p>Notice that you could just do <code>kwargs.get('fillvalue')</code> and if <code>'fillvalue'</code> is not in <code>kwargs</code>, <code>get</code> would return <code>None</code> anyways. But <a href="https://www.python.org/dev/peps/pep-0020/" rel="noreferrer">explicit is better than implicit</a>.</p>
    </div>