<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In addition to list_get, as opa mentioned, and list_size / list_length to go with it, I would include a version of list_remove that takes an index instead of an element to compare to, for the fairly common scenario where you want to see if an element is in the list, possibly do something with it, and then delete it.</p>

<pre><code>int player_index = list_index(entity_list, "player");
if(player_index == -1) 
{
    handle_no_player();
}
else
{
    handle_player();
    list_remove_at(entity_list, player_index);
}
</code></pre>

<p>Also, since you're using a function pointer for equality comparison anyway, it would be easy to include a version that takes a predicate:</p>

<pre><code>bool is_on_fire(void *entity) { return ((game_entity*)entity)-&gt;on_fire; }
int first_on_fire = list_index(entity_list, &amp;is_on_fire);
</code></pre>

<p>As the name first_on_fire indicates, the third issue is that if this is representing a general list rather than a set (meaning there can be duplicate elements), then you need a version of list_index that takes a starting index to search from, so that it's possible to find the second / third / nth instance of a given element.</p>

<p>list_pop is an ambiguous name, since it's not apparent whether it works like a stack or a queue.  list_pop_back would be more clear.</p>

<p>A function that inserts into the middle of a list could be useful as well.  </p>
    </div>