<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>For another take on the same problem (sorting parallel arrays), see <a href="https://codereview.stackexchange.com/questions/212711/quicksort-template-for-sorting-corresponding-arrays">Quicksort template (for sorting corresponding arrays)</a>.</p>

<p>Your code is strangely organized. I would expect it to have a single entry point, something like this:</p>

<pre><code>template&lt;class Vector, class... Vectors&gt;
void parallel_sort(Vector&amp; keyvector, Vectors&amp;... vectors) {
    std::vector&lt;size_t&gt; order(keyvector.size());
    std::iota(order.begin(), order.end(), 0);
    std::sort(order.begin(), order.end(), [&amp;](size_t a, size_t b) {
        return keyvector[a] &lt; keyvector[b];
    });
    (reorder(keyvector, order) , ... , reorder(vectors, order));
}
</code></pre>

<p>(Hey, look at that! It's a complete implementation, except for the <code>reorder</code> function you already wrote!)</p>

<p>But instead you require the calling code to set up their own <code>order</code> vector manually, then call <code>create_permutation</code>, then <code>sort_from_ref</code>, in that order. That's a lot of steps. At the very least, you could provide a function <code>create_order_vector</code> to simplify that first step.</p>

<hr>

<p>The one advantage I can see to requiring the caller to provide the <code>order</code> vector is that it allows your library code to do no heap allocations. Vice versa, a problem with my code above is that it requires O(n) memory to sort n elements. If I have a million-element vector, I need to heap-allocate <em>another</em> eight million bytes to sort it! That could be annoying or prohibitive for some callers — they might not expect a sorting function to throw <code>std::bad_alloc</code>. At least by making the caller allocate the eight million bytes themselves, you're putting the issue front and center where they can't miss it.</p>

<hr>

<p>I think it's strange that you define the alias <code>order_type</code> to be <code>std::vector&lt;std::pair&lt;size_t, iter&gt;&gt;</code>. I would rather see</p>

<pre><code>using order_type = std::pair&lt;size_t, iter&gt;;

[...] std::vector&lt;order_type&gt; order;
</code></pre>

<p>Again, I guess it comes down to my wanting to see <code>std::vector</code>-ness explicitly in the code. I have the same complaint about typedefs such as <code>using Foo = foo*;</code> that hide a type's pointer-ness.</p>

<hr>

<pre><code>template&lt;typename T, typename A, typename... argtype&gt;
void sort_from_ref(order_type order, std::vector&lt;T,A&gt; &amp;vect, argtype &amp;&amp;...args)
{
        reorder(vect, order);
        sort_from_ref(order, std::forward&lt;argtype&gt;(args)...);
}
</code></pre>

<p>In C++17, you can use a comma-operator fold-expression to do this, as I did above. But even in C++11, you can use a pack expansion to do this without all the "recursive template" stuff. (See <a href="https://quuxplusone.github.io/blog/2018/07/23/metafilter/" rel="nofollow noreferrer">"Iteration is better than recursion."</a>) You'd just do something like this:</p>

<pre><code>template&lt;class... Args&gt;
void sort_from_ref(order_type order, Args&amp;... args)
{
    int dummy[] = {
        [&amp;]() { reorder(args, order); return 0; } ...
    };
}
</code></pre>

<p>Notice that I also changed <code>argtype</code> to <code>Args</code>. It's a pack of <em>multiple</em> argtypes, not just one; and the C++ convention for template parameters is to CamelCase them.</p>

<p>I also eliminated your perfect forwarding. We <em>know</em> that all our <code>args</code> are going to be non-const lvalue references; so we should just say so.</p>

<p>We also know that all our <code>args</code> are going to be <code>std::vector&lt;T&gt;</code> for some <code>T</code>, because that's the only kind of argument that will be accepted by our <code>reorder</code> template. Therefore, it is incorrect (but largely harmless) that you wrote </p>

<pre><code>template&lt;typename T, typename A, [...]&gt;
void sort_from_ref([...] std::vector&lt;T,A&gt; &amp;vect, [...]
</code></pre>

<p>because there is only one possible <code>A</code> that can go there and have the code still compile. You should just have said</p>

<pre><code>template&lt;typename T, typename... argtype&gt;
void sort_from_ref(order_type order, std::vector&lt;T&gt;&amp; vect, argtype&amp;&amp;... args)
</code></pre>

<p>(except that, as we've seen, you don't need this "recursive" template at all).</p>

<hr>

<p>No comment on your <code>reorder</code> function; that part is all math. (Does it work? Did you test it exhaustively?)</p>

<p>Okay, two comments...</p>

<pre><code>                    index[i].first = old_target_idx;
                    vect[i]   = old_target_v;
</code></pre>

<p>Your whitespace here (and other places) is wonky. It looks like maybe you were trying to align the <code>=</code> signs, but failed? I strongly recommend <em>not</em> trying to align anything, ever. It's not robust against refactoring. (For example, if you change the name of a variable, now you have to realign everything it touched.)</p>

<pre><code>for (int i=0; i&lt; vect.size(); i++)
</code></pre>

<p>You should be getting a stupid warning from your compiler about "comparing signed and unsigned" here. If you're not, then turn up your warning levels — you should be using <code>-W -Wall</code> (and maybe <code>-Wextra</code>) on non-MSVC compilers, and I'd say <code>-W4</code> on MSVC. The traditional workaround would be to make <code>i</code> a <code>size_t</code> instead of an <code>int</code>.</p>
    </div>