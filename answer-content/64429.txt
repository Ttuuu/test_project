<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A lot of your code seems to be Hackerrank's boilerplate code, so I'll ignore that (though it could use a review), and focus on the "meat" which is:</p>

<pre><code>var value = 1;
for (var j = 0; j &lt; data[i]; j++) {
    if (j % 2 == 0)
        value *= 2;
    else value += 1;
}
process.stdout.write(value + '\n');
</code></pre>

<p>(It's run <em>T</em> times of course, but that's irrelevant for now.)</p>

<p>There's not a lot of code there, so there's little to review. Still, the <code>if..else</code> is not great, if you ask me. For one, I'd advice that you <em>always</em> use braces - even for one-liners. But if you don't, at least use linebreaks:</p>

<pre><code>if (j % 2 == 0)
    value *= 2;
else
    value += 1;
</code></pre>

<p>However, you can do it all in a ternary, which I would find more appropriate here:</p>

<pre><code>value += (j % 2 === 0 ? value : 1);
</code></pre>

<p>The parentheses aren't required, but I find they make it more readable.</p>

<p>Of course, you could also rely on zero being false'y in JavaScript, and just do</p>

<pre><code>value += (j % 2 ? 1 : value);
</code></pre>

<p><a href="http://jsperf.com/odd-and-even/10" rel="nofollow">A <em>slightly</em> faster</a> solution to the even/odd branching would be</p>

<pre><code>value += (j &amp; 1 ? 1 : value);
</code></pre>

<p>In other words: If the least-significant bit is 1, the number is odd.</p>

<p>In all, you get:</p>

<pre><code>var value = 1;
for (var j = 0; j &lt; data[i]; j++) {
    value += (j &amp; 1 ? 1 : value);
}
process.stdout.write(value + '\n');
</code></pre>

<p>Of course, there may be a purely mathematical, loop-less solution to this. But that's unfortunately not my strong suit.</p>

<hr>

<p><strong>Update:</strong> As mjolka points out in the comments, there <em>is</em> a very simple pattern to this. (And I feel pretty dumb for not realizing it.) I can't really explain it more succinctly than mjolka already has, so I'll just quote the comment here:</p>

<blockquote>
  <p>Look at the first few terms: <strong>1</strong>, 2, <strong>3</strong>, 6, <strong>7</strong>, 14, <strong>15</strong>, 30, <strong>31</strong>, ... and compare that to powers of two: 2, 4, 8, 16, 32, ...</p>
</blockquote>

<p>As is obvious, the output values are all equivalent to a power of 2, minus 1 or minus 2. In code, that can be expressed as a function like so:</p>

<pre><code>// calculate tree height after n cycles
function utopiaTreeHeight(n) {
  var exp = Math.ceil(n / 2) + 1,   // calculate the exponent
      value = Math.pow(2, exp) - 1; // power of 2, minus 1

  return value - (n &amp; 1);           // subtract another 1 if n is odd, and return
}
</code></pre>

<p>Which means that the rest of the code is just:</p>

<pre><code>for(var i = 0 ; i &lt; data.length ; i++) {
  var value = utopiaTreeHeight(data[i]);
  process.stdout.write(value + '\n');
}
</code></pre>

<p>Now, that's pretty clean, I'd say. Big tip of the hat to mjolka!</p>

<p>Below are my previous (iterative and na√Øve) solutions. I'll leave them in my answer, only because there's probably something of value in there, even if this particular problem has a much more elegant solution.</p>

<p>(End of update.)</p>

<hr>

<p>Now, about repeating it <em>T</em> times: If you're processing many test cases, it might be worth it to do some pre-processing. All you really need is to iterate to the <em>highest</em> cycle-count. So if you're asked to solve for <code>data = [3, 6, 5]</code> what you really want to just solve for <code>N = 6</code> but store the intermediate values for <code>N = 3</code> and <code>N = 5</code> along the way. You only need to loop once; from zero to <em>N<sub>max</sub></em>.</p>

<p>Of course, doing so will require extra setup, which may be <em>less</em> efficient than simply doing what you're doing now, if there's only one or two test cases.</p>

<p>Just for fun, though, one solution might be:</p>

<pre><code>var cycles = data.length,          // cache this for later
    sorted = data.slice(0).sort(), // copy and sort the input values (slightly faster if you use an explicit comparison function)
    limit  = sorted[cycles - 1],   // get the max
    target = sorted.shift(),       // grab the lowest value (our first target cycle)
    value  = 1,                    // initial tree height
    values = {};                   // a place to store values

// loop to the highest cycle-count (note the range is 0..limit)
for(var n = 0 ; n &lt;= limit ; n++) {
  while( n === target ) {
    // we reached our target cycle, so store the current value
    values[n] = value;

    // and grab the next target
    target = sorted.shift();
  }
  value += (n &amp; 1 ? 1 : value);
}

// print results in the correct order
for(var i = 0 ; i &lt; cycles ; i++) {
  process.stdout.write(values[data[i]] + '\n');
}
</code></pre>

<p>The <code>while</code> loop is there to handle duplicates in the input.</p>

<p>A simpler solution would be to simply store <em>every</em> value for <em>N</em> in 0..<em>N<sub>max</sub></em> in an array. That tradeoff would be memory consumption. If <code>data = [1, 923123]</code> you'd end up storing 923121 values (~7MB at worst) you're not going to use. Crazy example, but if you don't know your input, well...</p>

<p>Still, such an approach could look like:</p>

<pre><code>var limit = Math.max.apply(null, data),
    values = [],
    value = 1;

for(var n = 0 ; n &lt;= limit ; n++) {
  values.push(value);
  value += (n &amp; 1 ? 1 : value);
}

for(var i = 0 ; i &lt; data.length ; i++) {
  process.stdout.write(values[data[i]] + '\n');
}
</code></pre>
    </div>