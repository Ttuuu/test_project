<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Validate using Builder pattern</h2>

<p>Building a <code>RandomTree</code> follows a very canonical pattern: you add data, validate, and then start using the tree. However, your object-oriented design fails to reflect this: a valid or invalid <code>RandomTree</code> has the same type. I recommend using the Builder pattern to remedy this: instantiate a <code>RandomTree.Builder</code>, add entries to the builder, and then call a <code>build()</code> method to validate and return a <code>RandomTree</code>. If done properly, this guarantees that all <code>RandomTree</code> objects are valid. It also leads to a clean separation of validation and sampling code.</p>

<h2>Simplify approximate double equality</h2>

<p>If you use <code>Math.abs</code> properly, you should be able to deal with the cases where sum is slightly too high and slightly too low at the same time.</p>

<h2>Use simpler data structure</h2>

<p>Using your tree, each call to <code>getRandomElement</code> takes time O(log(n)); this is already very fast. However, building the tree takes time O(n log(n)).</p>

<p>We can do better using a simple array: store the same "cumulative probability" values you currently have in your tree in an array. Then binary search the array to find the ceiling entry.  This too takes time O(log(n)) to search, but only takes O(n) to build. Concretely, searching a list should be a bit faster than searching a tree; you'd have to do some profiling to test this.</p>

<h2>Randomness</h2>

<p>Percents are kind of arbitrary; a much more natural way to represent probabilities in with numbers in [0,1]. You can always divide the input by 100 if need be.</p>

<p>In addition, you should let the caller pass in an instance of <code>Random</code> to <code>getRandomElement</code>. Since your class doesn't care how the randomness arises, this allows more flexibility.</p>

<h2>Changes</h2>

<p>Here is my stab at the changes (comments omitted)</p>

<pre><code>import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;
import java.util.Random;

public class RandomSampler&lt;T&gt; {
    private static final double PRECISION = 0.001;

    public static class Builder&lt;T&gt; {
        private List&lt;T&gt; items;
        private List&lt;Double&gt; probabilities;

        private Builder() {
            this.items = new ArrayList&lt;T&gt;();
            this.probabilities = new ArrayList&lt;Double&gt;();
        }

        public void add(final T item, final double probability) {
            this.items.add(item);
            this.probabilities.add(probability);
        }

        public RandomSampler&lt;T&gt; build() {
            return new RandomSampler&lt;T&gt;(items, probabilities);
        }
    }

    public static &lt;T&gt; Builder&lt;T&gt; builder() {
        return new Builder&lt;T&gt;();
    }

    private final List&lt;T&gt; items;
    private final double[] cumulativeProbabilities;

    private RandomSampler(final List&lt;T&gt; items, final List&lt;Double&gt; probabilities) {
        double cumulativeProbability = 0.0;

        this.items = items;
        this.cumulativeProbabilities = new double[items.size()];

        Iterator&lt;Double&gt; it = probabilities.iterator();
        for (int i = 0; i &lt; items.size(); i++) {
            cumulativeProbability += it.next();
            this.cumulativeProbabilities[i] = cumulativeProbability;
        }

        if (Math.abs(cumulativeProbability - 1.0) &gt; PRECISION) {
            throw new IllegalStateException("probabilities do not sum to 1.0");
        } else {
            // fix last cumulative probability to 1.0
            this.cumulativeProbabilities[items.size() - 1] = 1.0;
        }
    }

    public T getRandomElement(Random rand) {
        double choice = rand.nextDouble();

        // equal to (-(i)-1) where cumulativeProbabilities[i] is the first element &gt; choice
        int searchResult = Arrays.binarySearch(this.cumulativeProbabilities, choice);
        int i = -(searchResult + 1);

        return this.items.get(i);
    }
}
</code></pre>

<pre><code>import java.util.concurrent.ThreadLocalRandom;

public class RandomSamplerTest {

    public static void main(String[] args) {
    RandomSampler.Builder&lt;String&gt; builder = RandomSampler.builder();

    builder.add("ten", 0.1);
    builder.add("twenty", 0.2);
    builder.add("thirty", 0.3);
    builder.add("forty", 0.4);

    RandomSampler&lt;String&gt; sampler = builder.build();
    ThreadLocalRandom rand = ThreadLocalRandom.current();

    int countTens = 0;
    int countTwenties = 0;
    int countThirties = 0;
    int countForties = 0;

    final double iterationNumber = 1000;

    for(int i = 0; i &lt; iterationNumber; i++) {
        String num = sampler.getRandomElement(rand);

        switch(num) {
        case "ten":
            countTens++;
            break;
        case "twenty":
            countTwenties++;
            break;
        case "thirty":
            countThirties++;
            break;
        case "forty":
            countForties++;
            break;
        }
    }

    double percentOfTens = (countTens / iterationNumber) * 100;
    double percentOfTwenties = (countTwenties / iterationNumber) * 100;
    double percentOfThirties = (countThirties / iterationNumber) * 100;
    double percentOfForties = (countForties / iterationNumber) * 100;

    String msg = "tens: " + percentOfTens + "%" + System.lineSeparator();
    msg += "twenties: " + percentOfTwenties + "%" + System.lineSeparator();
    msg += "thirties: " + percentOfThirties + "%" + System.lineSeparator();
    msg += "forties: " + percentOfForties + "%" +  System.lineSeparator();

    System.out.println(msg);
    }
}
</code></pre>
    </div>