<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>var ajax = new XMLHttpRequest();

ajax.open('POST', 'ajax.php?action=submit_form', true);
</code></pre>

<p>You can replace XHR with <code>fetch</code>. While XHR is widely supported, <code>fetch</code> is easier to work with. It uses promises instead of callbacks, which means you can readily use <code>async</code>/<code>await</code> with it. It's inspired from jQuery's <code>$.ajax()</code>. So if you're familiar with that, <code>fetch</code> will just click.</p>

<pre><code>var content = '';

content = content + 'agreement=' + document.querySelector('#agreement').checked;
content = content + '&amp;user=' + document.querySelector('#user').value;
content = content + '&amp;password=' + document.querySelector('#password').value;
content = content + '&amp;text=' + document.querySelector('#text').value;
</code></pre>

<p>Do not build query strings manually. The issue is that in query strings, certain characters must be escaped correctly for it to be valid. Otherwise, I could stick characters in there which can make the query string invalid. Use <code>URLSearchParams()</code> to construct the query string.</p>

<pre><code>&lt;button id="submit" onclick="submit_form()"&gt;Submit&lt;/button&gt;
</code></pre>

<p>Instead of using <code>onclick</code> on the button, use <code>onsubmit</code> on the form instead. This way, you can also catch someone submitting the form by pressing enter. Also, instead of inline event properties, use <code>element.addEventListener()</code>. This way, you can, among other things, add more than just one handler and avoid defining a global function for your event handler.</p>

<pre><code>if($_GET['action'] == 'submit_form')
{
    $agreement = $_POST['agreement'];
    $user = $_POST['user'];
    $password = $_POST['password'];
    $text = $_POST['text'];

    echo 'Data received: &lt;br/&gt;';
    echo 'Agreement: '.$agreement.'&lt;br/&gt;';
    echo 'User: '.$user.'&lt;br/&gt;';
    echo 'Password: '.$password.'&lt;br/&gt;';
    echo 'Text: '.$text.'&lt;br/&gt;';
}
</code></pre>

<p>Not exactly sure why you'd put <code>action</code> in a GET parameter while everything else is in POST. Use POST all the way if you intend to POST. Also, if I recall correctly, it's up to the server to parse GET parameters in a non-GET operation. The server may choose to ignore it. This might work in PHP, but it might not work on another platform.</p>

<p>Also, sanitize/escape the data before printing it on the page. This looks like debugging to me, so that's fine. But never trust user input, never print arbitrary values. This can easily be used in a reflected XSS, a security issue.</p>
    </div>