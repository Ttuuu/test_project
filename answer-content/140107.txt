<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Alternative to what follows</h2>

<p>An alternative to everything that follows is removing any carriage return (<code>\r</code>) from the strings when you get them as input into the program.</p>

<h2>Some reading on the iteration and carriage return</h2>

<p><a href="https://stackoverflow.com/questions/8894258/fastest-way-to-iterate-over-all-the-chars-in-a-string">This</a> question over at Stack Overflow will give you some insight into iteration over a string including speeds.</p>

<p><a href="https://stackoverflow.com/questions/3091524/what-are-carriage-return-linefeed-and-form-feed">This</a> one explains what's behind carriage return and why we have <code>\n\r</code> and just <code>\n</code>.</p>

<h2>Onto your code (What was already mentioned)</h2>

<p>As <code>Roland Illig</code> has already mentioned, in this answer, the function and parameter's names will be changed to match the following:</p>

<pre><code>public static boolean equalsIgnoringNewlineStyle(String a, String b)
</code></pre>

<p>And the two constants are now private.</p>

<p>Do read <code>CAD97</code>'s answer as it also gives you some new points of which only one I will mention: <em>if both are <code>null</code> the result should always be <code>true</code> in conformance with <code>java.util.Objects::equals</code></em>. All his other points maintain relevance. Thus:</p>

<pre><code>public static boolean equalsIgnoringNewlineStyle(String a, String b) {
    if (a == b) {
        return true;
    }

    if (a == null || b == null) {
        return false;
    }

    // ...
</code></pre>

<h2>toCharArray()</h2>

<p>This function returns a <strong>new copy</strong> of the string, this will slow down your function, specially if you have intentions on calling your function often. Given this we'll be indexing the strings instead, indexing them only once for each character needed, storing them in a <code>char</code>.</p>

<h2>Variable Declaration</h2>

<p>This might be more of a style option but declaring your variables each on it's own line tends to look cleaner and the end result is the same, not affecting performance. Thus I'd change the indexes declaration to this:</p>

<pre><code>int index_a = 0;
int index_b = 0;
</code></pre>

<h2><code>while (true)</code></h2>

<p><code>while (true)</code> is considered bad practice, either use a <code>while</code> or <code>do...while</code> depending on your needs. In this case we'd stick to a <code>while</code> as our condition is right at the start of the loop, we should then move the condition to the loop:</p>

<pre><code>while (index_a &lt; a.length() &amp;&amp; index_b &lt; b.length()) {
    // ...
}

return index_a == a.length() &amp;&amp; index_b == b.length();
</code></pre>

<p>Notice the <code>return</code> this tells us right away that anything that can change the result of the function call to <code>false</code> will be inside the <code>while</code> loop (either through other conditions that will return false or just through changes to <code>index_a</code> and <code>index_b</code>.</p>

<p>The return result is whether or not we went through the whole of both strings, if not then they are of different lengths.</p>

<h2><code>ch1</code> and <code>ch2</code></h2>

<p>Here I have renamed <code>ch1</code> and <code>ch2</code> to <code>first</code> and <code>second</code> respectively. The difference in names will allow for better spotting of which is which and avoids errors where one can write <code>ch1</code> or <code>ch2</code> when they meant the other; usually these kind of typos are hard to find too. Note the same could happen with my <code>a</code> and <code>b</code> but it is less likely.</p>

<pre><code>char first = a.charAt(index_a);
char second = b.charAt(index_b);
</code></pre>

<h2>Reduce Indentations</h2>

<p>This is a pretty simple change that makes the code easier to read by reducing the amount of indentation, making the code more vertical, and reduces brace nesting (which increases reading complexity). So instead of this:</p>

<pre><code>if (first != second){
    // ...            
}
</code></pre>

<p>we'll have this:</p>

<pre><code>if (first == second) {
    ++index_a;
    ++index_b;
    continue;
}
</code></pre>

<p>We have to increment the indices since we are not going to reach the end of the loop which is where we do it.</p>

<h2>Merging <code>if</code>s</h2>

<p>You have two sequential conditions both of which have a common result: returning <code>false</code>. This:</p>

<pre><code>if (ch1 != LF &amp;&amp; ch1 != CR) return false;
if (ch2 != LF &amp;&amp; ch2 != CR) return false;
</code></pre>

<p>becomes this:</p>

<pre><code>if ((first != LF &amp;&amp; first != CR) ||
    (second != LF &amp;&amp; second != CR)) {
    // different characters and are not 'NL' nor 'CR'
    return false;
}
</code></pre>

<h2>Removing <code>isCRAndLF</code></h2>

<p>I removed <code>isCRAndLF</code> as it is a simple function that can be simplified on-site, plus we remove the function call (in the case the compiler does no inline it). Even if it did inline the function, it removes reading complexity.</p>

<p>Applying the changes to this:</p>

<pre><code>if (index1 + 1 &lt; s1.length &amp;&amp; isCRAndLF(s1[index1], s1[index1 + 1])){
    index1++;
}
if (index2 + 1 &lt; s2.length &amp;&amp; isCRAndLF(s2[index2], s2[index2 + 1])){
    index2++;
}
</code></pre>

<p>we get this:</p>

<pre><code>if (index_a + 1 &lt; a.length()) {
    char other = a.charAt(index_a + 1);

    // 'first' here is either \n or \r (checked before)
    // other != first ::= not { \n\n , \r\r }
    if (other != first &amp;&amp; (other == LF || other == CR)) {
        ++index_a;
    }
}

if (index_b + 1 &lt; b.length()) {
    char other = b.charAt(index_b + 1);

    // same as above, but for 'second'
    if (other != second &amp;&amp; (other == LF || other == CR)) {
        ++index_b;
    }
}
</code></pre>

<p>Now explaining the condition further:
We've checked before in the function if <code>first</code> and <code>second</code> where either <code>NL</code> or <code>CR</code> and we only continued to this point if that was true, this means we have the following (same for <code>second</code>):</p>

<pre><code>first ::= LF | CR
</code></pre>

<p>So now we check <code>other != first</code> this means:</p>

<pre><code>first == LF &amp;&amp; other != LF || first == CR &amp;&amp; other != CR
</code></pre>

<p>This means they have to be different, so neither <code>\n\n</code> or <code>\r\r</code> happen. We then check:</p>

<pre><code>other == LF || other == CR
</code></pre>

<p>This makes sure that this character is either <code>LF</code> or <code>CR</code> because we have not checked yet and it could just be any other character and nothing to do with what we want, this constrains the possible results to <code>\n\r</code> and <code>\r\n</code> by making sure <code>other</code> is the <em>"opposite"</em> of <code>first</code>.</p>

<h2>Full code (untested)</h2>

<pre><code>public class StringUtils {
    static final char LF = '\n';
    static final char CR = '\r';

    public static boolean equalsIgnoringNewlineStyle(String a, String b){
        if (a == b) { // if both null return true
            return true;
        }

        if (a == null || b == null) {
            return false;
        }

        // toCharArray is slow (creates new copy of the whole string)
        // we'll use indexing instead (it's faster)

        // cleaner variable declaration (does not affect performance)
        int index_a = 0;
        int index_b = 0;

        // while (true) are a bad practice, moved loop condition to right place
        while (index_a &lt; a.length() &amp;&amp; index_b &lt; b.length()) {
            char first = a.charAt(index_a);
            char second = b.charAt(index_b);

            if (first == second) {
                // decrease amount of identations
                ++index_a;
                ++index_b;
                continue;
            }

            if ((first != LF &amp;&amp; first != CR) ||
                (second != LF &amp;&amp; second != CR)) {
                // at least one of the characters is not a new line
                return false;
            }

            if (index_a + 1 &lt; a.length()) {
                char other = a.charAt(index_a + 1);

                // 'first' here is either \n or \r (checked before)
                // other != first ::= not { \n\n , \r\r }
                if (other != first &amp;&amp; (other == LF || other == CR)) {
                    ++index_a;
                }
            }

            if (index_b + 1 &lt; b.length()) {
                char other = b.charAt(index_b + 1);

                // same as above, but for 'second'
                if (other != second &amp;&amp; (other == LF || other == CR)) {
                    ++index_b;
                }
            }

            ++index_a;
            ++index_b;
        }

        return index_a == a.length() &amp;&amp; index_b == b.length();
    }
}
</code></pre>
    </div>