<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>From top to bottom</strong></p>

<p>Since <code>AddCopyrighttoPDF()</code> is a <code>public</code> method you should validate its argument <code>path</code>.  </p>

<p>Variables should be named using <code>camelCase</code> casing and should be spelled correctly <code>string CopyRighText;</code> -&gt; <code>string copyrightText;</code></p>

<blockquote>
<pre><code>try
{

    CopyRighText = "Copyright © " + DateTime.Now.Year + " All Rights Reserved.";
    PdfStamper pdfStamper = null;
    PdfReader pdfReader = null;  
</code></pre>
</blockquote>

<p>why are these 3 lines of code inside a <code>try..catch</code> block? Which exception could here happen? The <code>try..cacth</code> block can be removed.  </p>

<p>You are using an <code>using</code> statement for the <code>MemoryStream</code> which is a good thing, but both <code>PdfReader</code> and <code>PdfStamper</code> are implementing the <code>IDisposable</code> interface as well hence they should be enclosed in an <code>using</code> block as well.  </p>

<blockquote>
<pre><code>for (int i = 1; i &lt;= pdfReader.NumberOfPages; i++)
{
    if (i &gt; 1)
    {  
</code></pre>
</blockquote>

<p>If the loop would start at <code>int i = 2</code> the <code>if</code> block would become superflous which saves one indentation-level of thecode.  </p>

<p><code>BaseFont baseFont</code> should be created outside of the loop and reused.  </p>

<p><code>float n2 = 15F;</code> should be named better and should be a constant.  </p>

<p><code>float n3</code> should be named better.  </p>

<p><code>overContent.ShowTextAligned(0, CopyRighText, n2, n3, 0F);</code> here <code>0F</code> should be extracted into a constant as well.  </p>

<p>Disposing of the <code>MemoryStream</code>, which happens when the end of the <code>using</code> block is reached will <code>Flush()</code> and <code>Close()</code> it as well.  </p>

<p>Implementing the mentioned points will lead to  </p>

<pre><code>private const float copyrightFontHeight = 7F;
private const float copyrightHorizontalPosition = 15F;
private const float copyrightVerticalBorder = 10F;
private const float copyrightRotationNone = 0F;
public static byte[] AddCopyrighttoPDF(string path)
{
    if (string.IsNullOrEmpty(path)) { return null; }

    string copyrightText = "Copyright © " + DateTime.Now.Year + " All Rights Reserved.";

    try
    {
        BaseFont baseFont = BaseFont.CreateFont("Helvetica", "Cp1250", false);
        using (MemoryStream ms = new MemoryStream())
        using (PdfReader pdfReader = new PdfReader(new RandomAccessFileOrArray(path), System.Text.ASCIIEncoding.UTF8.GetBytes("1111")))
        using (PdfStamper = new PdfStamper(pdfReader, ms))
        {
            for (int i = 2; i &lt;= pdfReader.NumberOfPages; i++)
            {
                Rectangle pageSizeWithRotation = pdfReader.GetPageSizeWithRotation(i);
                PdfContentByte overContent = pdfStamper.GetOverContent(i);
                overContent.BeginText();
                overContent.SetFontAndSize(baseFont, copyrightFontHeight);
                overContent.SetRGBColorFill(0, 0, 0);
                float copyrightVerticalPosition = pageSizeWithRotation.Height - copyrightVerticalBorder;
                overContent.ShowTextAligned(0, copyrightText, copyrightHorizontalPosition, copyrightVerticalPosition, copyrightRotationNone);
                overContent.EndText();
            }

            pdfStamper.FormFlattening = true;
            pdfStamper.Close();
            return ms.ToArray();
        }
    }
    catch { } //empty because if we just want to swallow the exception

    return null;
}  
</code></pre>

<p>This should behave exactly like your former code. Thats why its not throwing an <code>ArguemntNullException</code> if <code>path == null</code> and why its not throwing an <code>ArgumentException</code> if <code>path</code> is whitespace only.  </p>

<p>I couldn't find the C# documentation of <code>BaseFont</code> but if <code>BaseFont</code> is implementing <code>IDisposable</code> as well, it should be enclosed in an <code>using</code> block as well.</p>
    </div>