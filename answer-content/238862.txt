<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Error management</h2>

<p>This:</p>

<pre><code>        if search.status_code == 404:
            return "Sorry, this page isn't available."
        elif search.json()["graphql"]["user"]["is_private"] is True:
            return "This Account is Private"
        else:
            return True
</code></pre>

<p>is problematic. First of all, you're mixing return types (boolean and string). More importantly: returning "string if error or true-boolean otherwise" is a nasty mix of in-band error signalling, mixing of user display vs. business logic concerns, and tight coupling.</p>

<p>Instead of this <code>Errors</code> class, you could consider writing a method <code>check_availability</code>, which</p>

<ul>
<li>accepts the same parameters as your <code>__init__</code></li>
<li>fires off the same request</li>
<li>calls <code>search.raise_for_status()</code>, potentially catching and wrapping any exception that arises - this will cover your 404 and dozens of other HTTP errors</li>
<li>does the JSON load-and-check, and if there are any issues, raise an exception. It's important to note that your <code>["graphql"]["user"]["is_private"]</code> is fragile, so any key errors will currently be thrown with no additional information. Either catch and wrap that key error, or be more careful and use <code>get</code> on those nested dictionaries.</li>
<li>If nothing is wrong, do not throw an exception and simply return.</li>
</ul>

<p>The above, combined with custom exception types, will make your program much more programmer-friendly and will improve the structure of your code.</p>

<h2>Case conventions</h2>

<p><code>fetch_urls</code> should be <code>FetchURLs</code>. That said, its name makes it sound like a function when it's currently a class. So either:</p>

<ul>
<li>Just make it a function; it's not really useful as a class anyway; or</li>
<li>Name it something like <code>URLFetcher</code>.</li>
</ul>

<h2>Puzzling <code>None</code> logic</h2>

<pre><code>        self.cookies = cookies
        if self.cookies is not None:
            self.cookies = cookies
</code></pre>

<p>Not sure what you were going for here. The <code>if</code> can be dropped altogether, as it doesn't affect what will land in <code>self.cookies</code>.</p>

<h2>Cookie management</h2>

<p>This:</p>

<pre><code>        global COOKIES
        COOKIES = {cookies[i]['name']: cookies[i]['value'] for i in range(len(cookies)) if
                   cookies[i]['name'] in needed_cookies}
</code></pre>

<p>is also problematic. First of all, globals are a code smell, particularly when they're set from outside of global scope like this. Second of all, rather than manipulating these cookies yourself, you may want to set up a Requests session object and pass it around to those who need to use requests with that cookie jar. Advantages are that any additional cookies modified in the following web traffic will be obeyed. Disadvantages are that you may end up carrying around state that (a) you don't care about, or (b) actively harms your workflow; but these are unlikely.</p>

<h2>Method order</h2>

<pre><code>    def close(self):
        self.driver.close()
</code></pre>

<p>should appear after <code>__init__</code>, which should almost always appear first. Also: since you have a driver that needs closing, you should make <code>InstagramPV</code> a context manager and refer to it using a <code>with</code> block so that the driver gets closed regardless of any exceptions that take place.</p>
    </div>