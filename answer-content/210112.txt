<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Production code</h2>

<ol>
<li><p>In <code>addPrefixes</code>, my suggestions would be:</p>

<ul>
<li><p>To split into smaller private sub-methods with hierarchy:</p>

<pre><code>addPrefixes -&gt; //performs split by " "
   addPrefixesOfWord -&gt; //divides word into prefixes
      addParticularKeyword //adds particular prefix
</code></pre></li>
</ul>

<p>Also I was wondering why your program continues execution even after: <br>
<code>if (aKeyword.contains(" ")) {</code><br>
before reading your explanation<br>
It could be more clear if you just stated: <code>addPrefixesOfWord(longKeyword)</code> explicitely.</p>

<ul>
<li>To replace <code>while</code> loop with <code>for</code></li>
</ul></li>
</ol>

<p></p>

<ol start="2">
<li><p>I have noticed that lot of people use some good practice along with <a href="https://en.wikipedia.org/wiki/Command%E2%80%93query_separation" rel="nofollow noreferrer">C&amp;QSP (or CQRS)</a>. They simply return immutable objects from their query methods (I mean <code>documentsByKey</code> in your particular case).</p>

<p>In your code, to add new value into <code>invertedIndex</code>, you queried <code>documentsByKey</code> method and modified its result, which is a breach of this practice.</p>

<p>To introduce it in my own project, I hid <code>Map&lt;String, Set&lt;Loadout&gt;&gt;</code> equivalent behind separate interface/class with two methods:</p>

<ul>
<li>To associate new document with particular string keyword. (If you decide to apply my previous suggestions, the <code>addParticularKeyword</code> method would be just moved into that class.)</li>
<li>To get all documents associated with particular keyword.</li>
</ul></li>
<li><p>From the <code>query</code> method it is possible to extract two smaller private sub-methods:</p>

<ul>
<li>Getting <code>set</code> of results for each keyword.</li>
<li>Finding common subset of all previously gathered sets.</li>
</ul></li>
<li><p>I'm wondering what is the reason of <code>sort</code> inside <code>query</code>. If it is a performance adjustment, I guess that simply choosing <code>Set&lt;Loadout&gt; ans</code> to be the smallest set will be even a little bit faster.</p></li>
</ol>

<h2>Unit tests</h2>

<ol>
<li><p>I might be wrong, but I believe that tests like: <code>testQueryAND</code> or <code>testQueryByNamePrefix</code> or <code>testQueryNoModifyIndex</code> in particular could be divided into smaller independent test cases.</p></li>
<li><p>You can split your suite into smaller classes in the same package anyway to maintain some hierarchy. My proposition would be:</p>

<ul>
<li>Simple tests that provide some loadout seeded with custom data and test if are able to be found by query. (I suppose that in reality they test <code>merge</code> method)</li>
<li>More complex test cases which test scenarios, what happens when an entry is overwritten by another etc.</li>
</ul></li>
</ol>
    </div>