<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Generally, this is a well-written program, so it was hard to find much fault with it.  However, here are a few things that might help you improve your program.</p>

<h2>Don't over-use <code>const</code></h2>

<p>I don't know if I've ever given this advice here.  Much more frequently, I advise people to add more <code>const</code> but in this case, a significant improvement can be made by not using it.  Here's how.  The current code contains these lines:</p>

<pre><code>std::optional&lt;maze&gt; generate_maze(const maze&amp; nodes,
                   std::size_t border_neighbor_count,
                   std::size_t node_neighbor_count) {
    if (border_neighbor_count == 0)
        return {};
    auto new_nodes = nodes;
</code></pre>

<p>We're making a copy of <code>nodes</code> so we can manipulate the copy.  Why not just pass it in as non-const and use it directly?  Also, it probably makes little practical difference, but the other two passed parameters can be <code>const</code>:</p>

<pre><code>std::optional&lt;maze&gt; generate_maze(maze&amp; new_nodes,
                   const std::size_t border_neighbor_count,
                   const std::size_t node_neighbor_count) {
    if (border_neighbor_count == 0)
        return {};
</code></pre>

<p>Because of the recursion, this saves a great deal of memory and time.  (On my machine, a 500-node graph took 3.58 seconds before and with this single change, takes 2.95 seconds.)</p>

<h2>Avoid premature optimization</h2>

<p>The <code>has_this_neighbor</code> checks to see if the <code>neighbor_indices</code> vector is empty before calling <code>std::find_if</code>.  I think you'll find, if you look at the code for <code>std::find_if</code> that that first check is not needed and not helpful.  Omit it for clarity -- there is no measurable performance difference on my machine.</p>

<h2>Use <code>static</code> for variables common to all instances of a class</h2>

<p>The <code>border_count</code> variable within the <code>graph_node</code> structure should be <code>static</code> because all class members share the same value.  </p>

<h2>Remove unused templates</h2>

<p>The first template in <code>main.cpp</code> is not used and should be removed from the code.</p>

<h2>Use member functions where appropriate</h2>

<p>It seems to me that <code>is_satisfied</code>, <code>is_border_node</code> and <code>has_this_neighbor</code> would be more appropriate as member functions rather than standalone functions, given their nature. </p>

<h2>Minimize memory usage</h2>

<p>The first part of <code>generate_maze</code> includes these lines:</p>

<pre><code>auto remaining = new_nodes;
auto new_end = std::remove_if(remaining.begin(), remaining.end(), [border_neighbor_count, node_neighbor_count](auto&amp;&amp; node) {
    return node.is_satisfied(border_neighbor_count, node_neighbor_count);
});
remaining.erase(new_end, remaining.end());
</code></pre>

<p>But why copy all of them, then erase some of them when you could use <code>std::copy_if</code> instead to only grab the ones you need?</p>

<pre><code>maze remaining;
std::copy_if(new_nodes.begin(), new_nodes.end(), std::back_inserter(remaining), [border_neighbor_count, node_neighbor_count](auto &amp;node) { 
    return !node.is_satisfied(border_neighbor_count, node_neighbor_count);
</code></pre>

<p>This also confers a performance improvement because <code>graph_node</code> is trivially copyable.</p>

<h2>Use the appropriate data types</h2>

<p>In the <code>graph_node</code> structure, it seems to me that <code>wind</code> and <code>smell</code> should be <code>bool</code> rather than <code>double</code> types.  Also, <code>gold</code> should probably also be <code>bool</code> rather than <code>int</code>.</p>

<h2>Use <code>for</code> rather than <code>while</code> where appropriate</h2>

<p>The <code>while</code> loop within <code>generate_maze</code> would be better expressed as a <code>for</code> loop:</p>

<pre><code>const auto last = std::prev(remaining.rend());
for (auto first = remaining.rbegin(); first != last; ++first) {
    // loop contents, omitting all ++first 
}
</code></pre>

<p>One could make it even simpler using a range-for and a <a href="https://stackoverflow.com/a/28139075/3191481">reverse iterator adapter</a>.</p>

<h2>Define member functions to clarify algorithm</h2>

<p>It is quite simple to write a function like this:</p>

<pre><code>void connect(graph_node &amp;other) {
    neighbor_indices.push_back(other.index);
    other.neighbor_indices.push_back(index);
}
</code></pre>

<p>We can also write a complementary <code>disconnect</code> function and an <code>isConnected</code> similar to your existing <code>has_this_neighbor</code> function but taking a reference.  Now the contents of the <code>for</code> loop mentioned above can be written much more clearly:</p>

<pre><code>if (!first-&gt;isConnected(current_node)) {
    auto&amp; candidate_neighbor = new_nodes[first-&gt;index];
    candidate_neighbor.connect(current_node);
    auto result = generate_maze(new_nodes, border_neighbor_count, node_neighbor_count);
    if (result.has_value())
        return result;
    candidate_neighbor.disconnect(current_node);
}
</code></pre>

<h2>Consider wrapping it all in an object</h2>

<p>Although the problem description says to add all of the attributes at the end, the program carries them all around throughout the run, so one could assign them at the beginning with the same result.  I'd suggest make a <code>Maze</code> object that does the equivalent of <code>generate_nodes</code> and <code>assign_properties</code> in the constructor, and making <code>generate_maze</code> a member function.  It would make the interface cleaner and easier to understand and may provide a small performance increase since each node need only be touched once at the beginning of the run rather than both before and after.</p>
    </div>