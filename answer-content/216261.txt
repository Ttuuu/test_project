<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Below is a refactoring of your algorithm with some inline comments.</p>

<pre><code>string Review(string text)
{
  const string startTag = "&lt;upcase&gt;"; // Use declared string rather than string literals
  const string endTag = "&lt;/upcase&gt;";

  // textNew is a somewhat "backward" name. result or newText would be better
  char[] result = new char[text.Length];
  // Instantiate each variable on a single line. It's easier to find and maintain
  // Provide some meaningful names instead for i, j and k. (i, j and k may be alright in a lessser complex context, but here they easily lose their meaining through the loop)
  int curIndex = 0;
  int resultIndex = 0;
  int searchIndex = 0;

  while (curIndex &lt; text.Length)
  {
    if (text.IndexOf(startTag, searchIndex) &lt; 0) 
    {        
      while (curIndex &lt; text.Length)
      {
        result[resultIndex++] = text[curIndex++];
      }
    }
    else
    {
      // Repeatedly calling the same function with the same values is inefficient
      int startIndex = text.IndexOf(startTag, searchIndex);
      while (curIndex &lt; startIndex)
      {
        result[resultIndex++] = text[curIndex++];
      }

      curIndex += startTag.Length; // Use the length of the tag string instead of a magic number
      searchIndex = curIndex;
    }

    if (text.IndexOf(endTag, searchIndex) &lt; 0)
    {                                       
      while (curIndex &lt; text.Length)
      {
        result[resultIndex++] = Char.ToUpper(text[curIndex++]);
      }
    }
    else
    {
      // Repeatedly calling the same function with the same values is inefficient
      int endIndex = text.IndexOf(endTag, searchIndex);
      while (curIndex &lt; endIndex)
      {
        result[resultIndex++] = Char.ToUpper(text[curIndex++]);
      }

      curIndex += endTag.Length; // Use the length of the tag string instead of a magic number
    }
  }

  // Return the result instead of write it to the console.
  return new string(result.Take(resultIndex).ToArray()); // You have to truncate the char array in order to prevent a trailing new line
  //OR: return new string(textNew).TrimEnd('\0');
}
</code></pre>

<hr>

<p>Below is some other approaches that you may find useful for inspiration:</p>

<pre><code>string ToUpperInTags(string text)
{
  const string start = "&lt;upcase&gt;";
  const string stop = "&lt;/upcase&gt;";

  List&lt;string&gt; fragments = new List&lt;string&gt;();
  int curIndex = 0;
  while (curIndex &lt; text.Length)
  {
    int startIndex = text.IndexOf(start, curIndex);
    if (startIndex &gt;= 0)
    {
      fragments.Add(text.Substring(curIndex, startIndex - curIndex));
      int stopIndex = text.IndexOf(stop, startIndex + start.Length);
      if (stopIndex &lt; 0) throw new InvalidOperationException($"Unpaired start at {startIndex}");
      fragments.Add(text.Substring(startIndex + start.Length, stopIndex - (startIndex + start.Length)).ToUpper());
      curIndex = stopIndex + stop.Length;
    }
    else
    {
      fragments.Add(text.Substring(curIndex));
      break;
    }
  }

  return string.Join("", fragments);
}

string ToUpperInTags2(string text)
{
  string pattern = @"(?&lt;start&gt;&lt;upcase&gt;)(?&lt;content&gt;[^&lt;&gt;]*)(?&lt;stop&gt;&lt;/upcase&gt;)?";
  foreach (Match match in Regex.Matches(text, pattern))
  {
    text = Regex.Replace(text, $"{match.Groups["start"]}{match.Groups["content"]}{match.Groups["stop"]}", match.Groups["content"].Value.ToUpper());
  }

  return text;
}

string ToUpperInTags3(string text)
{
  string pattern = @"&lt;upcase&gt;(?&lt;content&gt;[^&lt;&gt;]*)(&lt;/upcase&gt;)?";
  return Regex.Replace(text, pattern, m =&gt; m.Groups["content"].Value.ToUpper());
}
</code></pre>

<p>They don't all behave exactly as yours, and are just provided for inspiration for further study...</p>
    </div>