<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Good job on adding the test suites; they make testing code extremely easy.</p>

<p>Recursion often results in a clean solution. However, I think that this problem can be solved just as well with an iterative approach.</p>

<p>The key to <code>innermost_parens</code> is to return the text between the last <code>(</code> and the first <code>)</code>. Recursion is a viable solution, but I find that this for loop does the job better and in a cleaner way:</p>

<pre><code>def innermost_parens(text):
    """
    Returns the innermost parenthesis.

    &gt;&gt;&gt; innermost_parens('* 1 2')
    '* 1 2'
    &gt;&gt;&gt; innermost_parens("1 + (2 * (4 - 1))")
    '(4 - 1)'
    &gt;&gt;&gt; innermost_parens("1 + (2 * (4 * (2 + (8 * 7)) - 1))")
    '(8 * 7)'
    &gt;&gt;&gt; innermost_parens("(1 + 2) * (3 + 4)")
    '(1 + 2)'
    """
    start = 0
    end = len(text)
    for (i, c) in enumerate(text):
        if c == '(':
            start = i
        if c == ')':
            end = i + 1
            break
    return text[start:end]
</code></pre>

<p>Take note that this function will return the first innermost expression with brackets. The reason for this will be clear later.</p>

<p>As for <code>polish_eval</code>, your program doesn't follow the standard Polish notation. In the standard <a href="https://en.wikipedia.org/wiki/Polish_notation" rel="nofollow noreferrer">Polish notation</a> you can only perform operations on two numbers. It is also unclear what 'start' does. I modified your code to do the above and added tests for subtraction and division:</p>

<pre><code>def polish_eval(expr):
    """
    Reduced Polish notation.

    &gt;&gt;&gt; polish_eval('+ 4 1')
    5.0
    &gt;&gt;&gt; polish_eval('* 4 5')
    20.0
    &gt;&gt;&gt; polish_eval('- 20 3')
    17.0
    &gt;&gt;&gt; polish_eval('/ 20 5')
    4.0
    """
    oper, a, b = expr.split()
    return OP_FOR_SYMBOL[oper](float(a), float(b))
</code></pre>

<p>I'll leave the documentation of the Polish notation to you. No changes were made to <code>infix_eval</code>.</p>

<p>Finally, we're on to <code>full_eval</code>. Since there's been a major change in the notation we support, we'll have to rewrite the code. First, to start off with the tests:</p>

<pre><code>&gt;&gt;&gt; full_eval("* (* 4 5) (+ 4 1)", polish_eval)
100.0
&gt;&gt;&gt; full_eval("* 4 (/ 1 10)", polish_eval)
0.4
&gt;&gt;&gt; full_eval("1 + (5 * 2)", infix_eval)
11.0
</code></pre>

<p>Rewriting Polish notation without brackets would require the use of a stack. This will not fit nicely in your <code>full_eval</code> function, so I will not implement the notation without brackets. In this function, the use of recursion is unnecessary and a while loop will fit the problem nicely.</p>

<pre><code>def full_eval(expr, eval_type):
    """
    Evals by the rules of eval_type starting from the inner
    parenthesis.

    &gt;&gt;&gt; full_eval("* (* 4 5) (+ 4 1)", polish_eval)
    100.0
    &gt;&gt;&gt; full_eval("* 4 (/ 1 10)", polish_eval)
    0.4
    &gt;&gt;&gt; full_eval("1 + (5 * 2)", infix_eval)
    11.0
    """
    while len(expr.split()) != 1:
        inn = innermost_parens(expr)
        result = eval_type(inn.strip('(').strip(')').strip())
        expr = expr.replace(inn, str(result))
    return float(expr)
</code></pre>

<p>Before I evaluate <code>inn</code>, I first strip off the brackets which enclose the expression, as well as any remaining whitespace.</p>

<p>The reason why I wrote <code>innermost_parens</code> as shown above is to allow for the easy replacement of the expression. Here's a trace of an expression in Polish:</p>

<pre><code>  * (/ 9 3) (+ (/ 3 5) (- 20 5))
= * (/ 9 3) (+ 0.6 (- 20 5))      # '(/ 3 5)' -&gt; '0.6'
= * (/ 9 3) (+ 0.6 15.0)          # '(- 20 5)' -&gt; '15.0'
= * 3.0 (+ 0.6 15.0)              # '(/ 9 3)' -&gt; '3.0'
= * 3.0 15.6                      # '(+ 0.6 15.0)' -&gt; '15.6'
= 46.8                            # '* 3.0 15.6' -&gt; '46.8'
</code></pre>

<p>and the same expression in infix:</p>

<pre><code>  (9 / 3) * ((3 / 5) + (20 - 5))
= (9 / 3) * (0.6 + (20 - 5))      # '(3 / 5)' -&gt; '0.6'
= (9 / 3) * (0.6 + 15.0)          # '(20 - 5)' -&gt; '15.0'
= 3.0 * (0.6 + 15.0)              # '(9 / 3)' -&gt; '3.0'
= 3.0 * 15.6                      # '(0.6 + 15.0)' -&gt; '15.6'
= 46.8                            # '3.0 * 15.6' -&gt; '46.8'
</code></pre>

<hr>

<p>Extensions:</p>

<ol>
<li>Write your program such that it can parse Polish notation without brackets. That's what Polish notation is invented for.</li>
<li>Handle edge cases such as <code>((* 3 15))</code> (Polish).</li>
<li>Write test suites to ensure that the expressions are evaluated correctly. While addition and multiplication is commutative, subtraction and division are not, and the order of the numbers matter.</li>
<li>Follow suggestions in <a href="https://codereview.stackexchange.com/a/86395/29611">l0b0's answer</a>, which are cosmetic. I did not make any cosmetic suggestions as I thought that it was more important to settle the logic of the program first.</li>
<li>Have your program create an <a href="https://en.wikipedia.org/wiki/Abstract_syntax_tree" rel="nofollow noreferrer">abstract syntax tree</a> instead of doing string operations (such as replacing innermost expression with its value).</li>
</ol>

<p>Feel free to ask questions in the comments.</p>
    </div>