<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>One loop to rule all animation.</h1>
<p>For almost all realtime animations the whole thing is handled from one timed loop running at as close to a constant rate as is possible.</p>
<p>Having many different timers call many different functions quickly gets complicated and very hard to follow.</p>
<p>For the browser <code>requestAnimationFrame</code> should be used for any content animations. It calls a special functions that holds any changes made to the DOM in a back buffer until the next display vertical refresh (60 times a second)</p>
<p>This ensures that the animation is in sync with the display and any other DOM rendered content.</p>
<p>You use that function as the main loop to control all the associated animation content.</p>
<h2>Simulating the typist</h2>
<p>You have over complicated the typer. All that is needed is the current character position and a way to move and clear lines when a newline char is found.</p>
<p>The function called by <code>requestAnimationFrame</code> is given the current time since the page loaded. You can use that time to calculate the character position and then iterate over the characters needing to be added, checking for new lines.</p>
<p>A variable is kept <code>currentLine</code> that holds the current typing line and you just append text to that as you go.</p>
<p>To reduce the load you can reuse existing elements, removing it from the top, and appending it to the bottom. See <code>newLine</code> function in example below</p>
<h2>Example</h2>
<p>Rather than change your code, I have started from scratch. There is one main loop function called <code>typer</code> and a function to setup a new line. The character position is calculated by dividing the time since start by the speed.</p>
<p>If you want to speed up the rate of characters just subtract from the start time. I have added an example that randomly speeds up every 1/20 character. To slow down just add to the start time.</p>
<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>requestAnimationFrame(typer);

const words = `
 Testing type writer.
 And now some more text.
 You can remove some&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;delete text as well.
 Displays a typing effect on the home page.
 If you want to speed up the rate of characters just subtract from the start time.
 I have added an example that randomly speeds up every 1/20 character. 
 To slow down just add to the start time.`;

const leftChar = ":&gt;";
const textContainer = document.getElementById('typingText');
const speed = 100;
var startTime;
var lastCharPos;
var currentLine;

for (let i = 0; i &lt; 2; i++) {
  textContainer.appendChild(Object.assign(document.createElement("div"), {
    className: "typed--typed-text",
    textContent: ""
  }));
}
// removes top line, clears it and adds to bottom of container
function newLine() {
  currentLine = textContainer.querySelector(".typed--typed-text");
  textContainer.removeChild(currentLine);
  textContainer.appendChild(currentLine);
  currentLine.textContent = leftChar;
}


function typer(time) {
  var str = "";
  if (startTime === undefined) {
    newLine();
    startTime = time;
    lastCharPos = 0;
  }

  // 1 in 20 characters are 50ms faster
  if (Math.random() &lt; 0.05) { startTime -= 50 }

  const charPos = (time - startTime) / speed | 0;
  while (lastCharPos &lt;= charPos) {
    const char = words[(lastCharPos++) % words.length];
    if (char === "\n") {
      currentLine.textContent += str;
      str = "";
      newLine();
    } else if (char === "&lt;") {
      const text = currentLine.textContent;
      currentLine.textContent = text.substring(0,text.length-1);
    } else {
      str += char;
    }
  }
  currentLine.textContent += str;
  requestAnimationFrame(typer);
}</code></pre>
<pre class="snippet-code-css lang-css prettyprint-override"><code>.typed {}

.typed--typed-text {}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;div id="typingText" class="typed"&gt;
&lt;/div&gt;</code></pre>
</div>
</div>

    </div>