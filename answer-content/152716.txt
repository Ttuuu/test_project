<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>When checking the function <code>play_game()</code>, codes for <code>P1_turn</code> and for <code>P2_turn</code> are identical at algorithm level and only different for player identity <code>1 or 2</code> and its associated board <code>opponnent_board or game_board</code>.</p>

<blockquote>
  <p><strong>Minimize redundancy - PART 1</strong></p>
</blockquote>

<p><strong>Step 1</strong> - define a function <code>play_turn()</code> to manage the update the board of the player.</p>

<blockquote>
  <p>The function returns <code>victory</code> to be checked by the exit-condition.</p>
</blockquote>

<pre><code>def play_turn(player_id, player_board):
    pos = input("Player {0}, enter target: ".format(player_id))
    row = pos[0]
    row = ord(row)-65
    if len(pos) &gt; 2:
        col = (pos[1]+pos[2])
    else:
        col = pos[1]
    row = int(row)
    col = int(col) - 1
    target = player_board[row][col]
    ship_hit = target
    target = str(ship_hit)
    if target in check_ships:
        print("Hit")
    else:
        print("Miss")
    player_board[row][col] = "X"
    destroyed = True
    for y in player_board:
        if destroyed:
            for x in y:
                if x == ship_hit:
                    destroyed = False
                    break
        else:
            break
    if destroyed:
        if target in check_ships:
            print("{0} DESTROYED.".format(target))
    victory = True
    for y in player_board:
        if victory:
            for j in y:
                if j not in check_ships:
                    victory = True
                else:
                    victory = False
                    break
    return victory
</code></pre>

<p><strong>Step 2</strong> - keep only the while-loop mechanism with the exit condition.</p>

<blockquote>
  <p>Adding the exit-condition and the <code>P1_turn / P2_turn</code> switching in the
  <code>play_turn()</code> function is not efficient because it will need to change
  the <code>if P1_turn:</code> and <code>elif P2_turn:</code> mechanism.</p>
</blockquote>

<pre><code>while True:
    if P1_turn:
        while not victory:
            # P1_turn = player 1 and opponnent_board
            victory = play_turn(1,opponnent_board)
            # exit condition player 1
            if victory:
                print("PLAYER 1 WINS")
                sys.exit()
            P1_turn = False
            P2_turn = True
            break

    elif P2_turn:
        while not victory:
            # P2_turn = player 2 and game_board
            victory = play_turn(2,game_board)
            # exit condition player 2
            if victory:
                print("PLAYER 2 WINS")
                sys.exit()
            P1_turn = True
            P2_turn = False
            break
</code></pre>

<blockquote>
  <p><strong>Minimize redundancy - PART 2</strong></p>
</blockquote>

<p>It is your turn... Check in the function <code>place_ship()</code> what algorithm is identical and what variable are different.</p>

<blockquote>
  <p>The function could be called <code>move_ship()</code>.</p>
</blockquote>
    </div>