<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>For starters, I feel inclined to go meta and question the <strong>design</strong>. One possible shortcoming of your method is that it falls back to the default value, which - for primitives - isn't null. So "blah blah" would evaluate to <code>(int) 0</code> or <code>(bool) false</code>, and unlike <code>TryParse</code>, your method won't tell me if this result actually came from the input, or whether it only reflects the inability to convert it. This could lead to issues with invalid data getting swept under the rug, and as such it's sort of buggy by design (especially when handling dates).</p></li>
<li><p>The biggest no-no though is that you're not handling <strong>exceptions</strong>. That's quite a leap of faith when invoking a method by reflection, especially as it's only loosely identified by its signature. I wouldn't blindly trust the return type, or that the method we happened to find actually does what we hope it does. </p>

<p>Given that the name of the method promises to fall back to default if parsing is impossible, I would say not handling an exception breaks the principle of least surprise here.</p></li>
<li><p><code>var MethodInfo = type.GetMethods().FirstOrDefault(MI =&gt;</code></p>

<p>How do you know the method you're looking for will always come up first on the list returned by <code>GetMethods</code>? If you only expect one, use <code>SingleOrDefault</code>. But <code>FirstOrDefault</code> indicates you consider the possibility that more than one method matches your given criteria. So, do we have some guarantee it would always be the first one in our way, or are we just "feeling lucky"? :) This looks pretty fragile to me.</p></li>
<li><p>This is subjective of course, but I have to say that since this method is actually less functional than <code>TryParse</code> and the implementation is rather brittle, I would personally veto this extension in a peer review, since I don't believe whatever readability improvement it brings to the table justifies the trade-offs.</p>

<p>I think this is a textbook example of what Jon Skeet calls <em>evil code</em>. It's not wrong as in "doesn't work", it's sort of clever, its "magic" can even have some appeal to it, but it's fundamentally unclear and dangerous. I highly recommend this talk: <a href="https://youtu.be/lGbQiguuUGc">https://youtu.be/lGbQiguuUGc</a>.</p></li>
<li><p>If you really want such syntactic sugar, I'd ditch generics and reflection-based approach, and replace it with hardcoded extensions for <code>bool</code>, <code>DateTime</code>, <code>int</code> - come on, it's not like there's dozens of use-cases anyway. Oh, and have them return a <code>Nullable</code> to distinguish between input actually converted to the default value, and not converted at all. Like so:</p>

<pre><code>public static bool? ToBoolOrNull(this string str) 
{
    bool result;
    return Boolean.TryParse(str, out result) ? result : (bool?) null;
}
</code></pre>

<p>And analogically for these few other types.</p></li>
</ol>

<p>PS. Note that in C# lower-case names should be used for parameters and variables - so it would be <code>this string value</code>, <code>methodInfo</code>, <code>mi</code> etc. And I believe you don't really need <code>ReturnedValue</code>.</p>
    </div>