<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You can easily check that H(n) = T(2n - 1). So all hexagonal numbers are triangular numbers, meaning we can ignore the triangular numbers altogether. </p>

<p>To compute pentagonal numbers: Start with p = 1, dp = 4. To get the next pentagonal number, let p = p + dp, dp = dp + 3. </p>

<p>To compute hexagonal numbers: Start with h = 1, dh = 5. To get the next hexagonal number, let h = h + dh, dh = dh + 4. </p>

<p>So here is simple pseudo-code that finds all numbers that are both pentagonal and hexagonal (and therefore triangular):</p>

<pre><code>Let p = 1, dp = 4
Let h = 1, dh = 5

Forever:
    If p = h then output p. 
    Let h = h + dh, dh = dh + 4
    Repeat
        Let p = p + dp, dp = dp + 3
    While p &lt; h
</code></pre>

<p>Implemented in a low-level language like C or C++, this should find all 64 bit numbers in a few seconds. If you want to go further, change the code slightly: "diff" equals h - p from the previous code, but it will be a lot smaller, so you get much further with 64 bit integers.</p>

<pre><code>Let dp = 4, np = 1
Let dh = 5, nh = 1
Let diff = 0

Forever:
    If diff = then output "np'th pentagonal number = nh'th pentagonal number". 
    Let diff = diff + dh, dh = dh + 4, nh = nh + 1
    Repeat
        Let diff = diff - dp, dp = dp + 3, np = np + 1
    While p &lt; h
</code></pre>

<p>This outputs the indexes of pentagonal and hexagonal numbers that are equal. On an eight year old MacBook it takes less than six nanoseconds to examine each index, more than 10 billion indexes per minute, or about 150 trillion indexes per day. Hn with n = 1,042,188,953 is also pentagonal and triangular. There is another such Hn with n a bit over 201 billions; Hn is about 8.175 x 10^22. Finding another solution with this method will likely take a few days or weeks.</p>

<p>If you want to go further, solve p(m) = h(n), for integer n, calculating m as a real number. As n gets large, m as a function of n will be getting closer and closer to a linear function. Then you can use the GCD algorithm to quickly find values where m is close to an integer. You will need multi-precision arithmetic, but it should get you arbitrary large solutions very quickly. (If P(m) = H(n), then m â‰ˆ n * sqrt (4/3) - (sqrt (1/12) - 1/6), with an error less than 4 / n^2, so starting with some n, you use the GCD algorithm to find the next n where m = n * sqrt (4/3) - (sqrt (1/12) - 1/6) is within 3.5 / n^2 of an integer).</p>
    </div>