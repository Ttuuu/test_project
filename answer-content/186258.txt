<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You could use <a href="https://docs.python.org/3/library/itertools.html#itertools.takewhile" rel="nofollow noreferrer"><code>itertools.takewhile</code></a> to keep on taking tuples until they are not the same count anymore:</p>

<pre><code>from collections import Counter
from itertools import takewhile

def integer_frequency(integers):
    int_freq = Counter(integers)
    most_common = int_freq.most_common(1)[0]
    return list(takewhile(lambda x: x[1] == most_common[1],
                          int_freq.most_common()))
</code></pre>

<p>I also renamed your <code>integer_list</code> to <code>integers</code>, because it can be any iterable of integers.</p>

<p>Alternatively, you could use <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>itertools.groupby</code></a> to group the tuples by their frequency and return the group with the highest frequency, as @Gareth Reese has suggested <a href="https://codereview.stackexchange.com/questions/186162/most-frequent-integer-in-a-list/186258#comment355203_186258">in the comments</a>:</p>

<pre><code>from collections import Counter
from itertools import groupby

def integer_frequency(integers):
    return list(next(groupby(Counter(integers).most_common(),
                             key=lambda x: x[1]))[1])
</code></pre>

<p>This approach is consistently faster (by a small amount):</p>

<p><a href="https://i.stack.imgur.com/X67mi.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/X67mi.png" alt="enter image description here"></a></p>

<p>However, both beat your algorithm by quite a lot:</p>

<p><a href="https://i.stack.imgur.com/bK2qN.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/bK2qN.png" alt="enter image description here"></a></p>
    </div>