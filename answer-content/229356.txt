<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Two things:</p>

<ol>
<li><p>The function may fail for a tree with an incomplete last layer.  For example:</p>

<pre><code>is_symmetric([1, 2, 2, 3, 4, 3])  returns True, but it should be False.
</code></pre></li>
</ol>

<p>This can be fixed by checking if layers have the expected length.</p>

<pre><code>if len(layer) != (end - start) or layer != list(reversed(layer)):
        return False
</code></pre>

<ol start="2">
<li><p>The for loop iterates more times than needed.  The loop only needs to run for each layer in the tree, not for each node.  A tree with n layers has 2**n - 1 nodes. It may not matter for small trees, but a tree with 20 layers has over a million nodes.  Replace the for loop with a while loop:</p>

<pre><code>while start &lt; len(tree):
...
</code></pre></li>
<li><p>Okay, three things.  <code>interval</code> isn't needed.  Use:</p>

<pre><code>end = 2 * end + 1
</code></pre></li>
</ol>

<p>The revised routine:</p>

<pre><code>def is_symmetric(tree: list) -&gt; bool:
    """
    Returns if the passed tree is symmetric

    :param tree: A list representing a binary tree
    """

    start = 0
    end = 1

    while start &lt; len(tree):
        # Find next layer
        layer = tree[start:end]

        # Determine if layer isn't mirror
        if len(layer) != (end - start) or layer != list(reversed(layer)):
            return False

        # Setup for next layer
        start = end
        end = 2 * end  + 1

    return True


if __name__ == '__main__':
    tests = [
        ([1], True),
        ([1, 2, 2, 3, 4, 4, 3], True),
        ([1, 2, 2, None, 3, None, 3], False),
        ([1, 2, 2, 3, 4, 3], False)
        ]

    for n, (test, answer) in enumerate(tests):
        result = is_symmetric(test)
        print(f"Test {n} {'Pass' if answer==result else 'FAIL'}: is_symetric({test})")
</code></pre>
    </div>