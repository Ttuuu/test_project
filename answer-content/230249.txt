<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Style</h1>

<p>I suggest you check PEP0008 <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">https://www.python.org/dev/peps/pep-0008/</a> the official Python style guide for writing a more Pythonic code and Flake8 <a href="http://flake8.pycqa.org/en/latest/" rel="nofollow noreferrer">http://flake8.pycqa.org/en/latest/</a> for style enforcement. The following goes accordingly:</p>

<ul>
<li><p><strong>Blank lines:</strong> Surround top-level function and class definitions with two blank lines. Method definitions inside a class are surrounded by a single blank line.
Extra blank lines may be used (sparingly) to separate groups of related functions. Blank lines may be omitted between a bunch of related one-liners (e.g. a set of dummy implementations).</p>

<p>No blank lines between the function and what's above:</p>

<pre><code># this function prints the players inventory in a list and reports the total items
def display_inventory(inventory):
</code></pre>

<p>and same goes to the other function.</p></li>
<li><p><strong>f-strings:</strong> Since you're using Python 3.x I can tell from the print statements F-strings provide a way to embed expressions inside string literals, using a minimal syntax. It should be noted that an f-string is really an expression evaluated at run time, not a constant value. You could use f-strings for readability enhancement in the following way:</p>

<p><strong>This line:</strong></p>

<pre><code>print("\nTotal number of items: " + str(item_total))
</code></pre>

<p><strong>is written:</strong></p>

<pre><code>print(f'\nTotal number of items: {item_total!s}')
</code></pre>

<p><strong>as well as:</strong></p>

<pre><code>print(str(v) + " " + str(k))
</code></pre>

<p><strong>is written:</strong></p>

<pre><code>print(f'{v!s} {k!s}')
</code></pre></li>
<li><p><strong>Docstrings:</strong> Python documentation strings (or docstrings) provide a convenient way of associating documentation with Python modules, functions, classes, and methods. ... A docstring is simply a multi-line string, that is not assigned to anything. It is specified in source code that is used to document a specific segment of code. You should include docstrings to your functions indicating what they do and what they return.</p>

<p><strong>Example:</strong></p>

<pre><code>def add_to_inventory(inventory: dict, added_items: list):
    """Update and return inventory."""
</code></pre>

<p>And note the type hints to indicate the types of these parameters.</p></li>
<li><strong>Indentation:</strong> your function <code>add_to_inventory</code> body is over indented (8 spaces instead of 4) and 4 spaces is the common convention in Python.</li>
</ul>

<h1>Code</h1>

<ul>
<li><p><strong>A function returns:</strong> functions are meant to return, not to print.</p>

<pre><code>def display_inventory(inventory):
    print("Inventory:")
    item_total = 0
    for k, v in inventory.items():
        print(str(v) + " " + str(k))
        item_total = item_total + int(v)
    print("\nTotal number of items: " + str(item_total))
</code></pre>

<p>And since there is no particular sophisticated printing pattern required, the display function can be replaced by <code>print()</code> statement(s).</p></li>
<li><p><strong>Augmented assignment:</strong> Python supports augmented assignment using <code>+=</code></p>

<p><code>item_total = item_total + int(v)</code> is written: <code>item_total += int(v)</code></p></li>
<li><p><strong><code>main</code> guard:</strong> Use <code>if __name__ == '__main__':</code> at the end of your script and call your functions from there. to allow the module to be imported by other modules without running the whole script.</p></li>
</ul>

<p><strong>And the code can be a one-liner:</strong></p>

<pre><code>from collections import Counter


def update_inventory(inventory: dict, new_items: list):
    """Update and return inventory."""
    return Counter(inventory) + Counter(new_items)


if __name__ == '__main__':
    inventory = {'rope': 1, 'torch': 6, 'gold coin': 42, 'dagger': 1, 'arrow': 12}
    dragon_loot = ['gold coin', 'dagger', 'gold coin', 'gold coin', 'ruby']
    new_inventory = update_inventory(inventory, dragon_loot)
    for item, number in new_inventory.items():
        print(f'{number} {item}')
    print(f'\nTotal number of items: {sum(new_inventory.values())}')
</code></pre>
    </div>