<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First of all I'd reduce indentation. It makes your code really too hard to read. Doing that you will see it may be simplified.</p>

<p>First of all <code>try</code>/<code>catch</code>: a catch-all block where you rethrow the exception is useless (and you may even throw away line number information.)</p>

<p>This code:</p>

<pre><code>if (obj != null)
{
    // Do something...
}
</code></pre>

<p>May be replaced simply with:</p>

<pre><code>if (obj == null)
    return false;
</code></pre>

<p>You do not need to declare a local variable for <code>result</code>, simply return its value where appropriate.</p>

<p>You do not have to check condition <code>result == false</code> inside your <code>foreach</code> loop (you will still enumerate through all properties), simply <code>break</code> the loop and exit immediately.</p>

<p>You do not need to use to <code>dynamic</code>, when casting you have the right type at compile-time. Also move all this code inside a separate function:</p>

<pre><code>private static bool IsNullOrEmpty(object obj) {
}
</code></pre>

<p>Let's see how to fill this function. Let's read the value of the property:</p>

<pre><code>object value = pi.GetValue(obj);
</code></pre>

<p>First of all a common case, valid for all reference types:</p>

<pre><code>if (Object.ReferenceEquals(value, null))
    return true;
</code></pre>

<p>Then explicitly check for strings:</p>

<pre><code>if (value is string &amp;&amp; String.IsNullOrEmpty((string)value))
    return true;
</code></pre>

<p>For <code>Int32</code> (note that in your original code <code>value &lt;= 0 ? true : false</code> is redundant it may be simplified to <code>value &lt;= 0</code>). BTW are you sure you want to consider negative numbers as empty values?!</p>

<pre><code>if (value is int)
    return ((int)value) &lt;= 0;
</code></pre>

<p><code>Boolean</code> does not need to be checked in this case (<code>null</code> case has been already handled). We just need to work out <code>Guid</code>:</p>

<pre><code>if (value is Guid)
    return ((Guid)value) == Guid.Empty;
</code></pre>

<p>That's all. Note that now or in future you may want to check for <code>Nullable&lt;T&gt;</code> and or other types. With the exception of strings and negative integer numbers you can also do something like this:</p>

<pre><code>if (Object.ReferenceEquals(value, null))
    return true;

var type = value.GetType();
return type.IsValueType
    &amp;&amp; Object.Equals(value, Activator.CreateInstance(type));
</code></pre>

<p>What left in your original function? In this example let me use simplified check (negative numbers are not <em>empty</em> and I do not check for <code>String.Empty</code> against strings however it handles nullable types), feel free to pick the one works for you:</p>

<pre><code>public static bool IsAnyNullOrEmpty(object obj)
{
    if (Object.ReferenceEquals(obj, null))
        return true;

    return obj.GetType().GetProperties()
        .Any(x =&gt; IsNullOrEmpty(x.GetValue(obj)));
}

private static bool IsNullOrEmpty(object value)
{
    if (Object.ReferenceEquals(value, null))
        return true;

    var type = value.GetType();
    return type.IsValueType
        &amp;&amp; Object.Equals(value, Activator.CreateInstance(type));
}
</code></pre>

<p>Last note: if working with databases you may also want to check equality with <code>DBNull.Value</code>.</p>
    </div>