<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Review</h2>

<p>You have a handful of difficulty levels, so you can manage this with a couple of booleans:</p>

<blockquote>
<pre><code>bool Increased100500 = false;
bool Increased5001500 = false;
bool Increased15003000 = false;
</code></pre>
</blockquote>

<p>Your <code>Increase</code> method is a black-box to us. Maybe it's linearly changing some difficulty parameters, or maybe it sets custom values to each of these parameters.</p>

<p>As the game gets bigger, gets more parameters that are sensitive to the difficulty level, gets more difficulty levels and gets such features as skipping levels, decreasing score and levels, it will be hard to maintain the code.</p>

<h2>Proposed Changes</h2>

<p>To allow the game to get more complex, I would opt to use a <em>state machine pattern</em> to handle difficulty levels. All actions concerning changing game parameters that influence the difficulty are handled by each specific state. This allows for an object-oriented design, extensibility, and drastically decreasing the amount of boolean flags in the game.</p>

<h3>State</h3>

<p>Each state has actions on <code>Enter</code> and <code>Exit</code>. A Difficulty level state also handles <code>OnScoreUpdated</code> events.</p>

<pre><code>abstract class DifficultyLevelState
{
    public virtual void Enter(Game game) { }
    public virtual void Exit(Game game) { }

    protected virtual DifficultyLevelState EasyLevel() =&gt; new EasyState();
    protected virtual DifficultyLevelState NormalLevel() =&gt; new NormalState();
    protected virtual DifficultyLevelState HardLevel() =&gt; new HardState();
    protected virtual DifficultyLevelState ExpertLevel() =&gt; new ExpertState();

    public void OnScoreUpdated(Game game)
    {
        var score = game.Score;
        if (score &lt; 100)
        {
            game.UpdateDifficultyLevel(EasyLevel());
        }
        else if (score &lt; 500)
        {
            game.UpdateDifficultyLevel(NormalLevel());
        }
        else if (score &lt; 1500)
        {
            game.UpdateDifficultyLevel(HardLevel());
        }
        else //if (score &lt; 3000)
        {
            game.UpdateDifficultyLevel(ExpertLevel());
        }
    }
}
</code></pre>

<p>Each specific state implements a self-transition to avoid unnecessary state changes and actions on <code>Enter</code> to change the game's difficulty level. I haven't found a use for <code>Exit</code>, but I'll keep the method because the pattern provides it, and you might find a use case for it. Implement <code>EasyState</code>, <code>NormalState</code>, <code>HardState</code> and <code>ExpertState</code>.</p>

<pre><code>class EasyState : DifficultyLevelState
{
    protected override DifficultyLevelState EasyLevel() =&gt; this;

    public override void Enter(Game game)
    {
        // Change game difficulty parameters:
        // game.SpeedFactor = 1;
        // game.CollisionFactor = 0.75;
    }
}
</code></pre>

<h3>State Machine</h3>

<p>Your <code>Game</code> probably provides a <code>score</code> somehow and has an entrypoint to <code>Start</code> the game:</p>

<blockquote>
<pre><code>class Game
{
    private int score;
    bool Increased100500 = false;
    bool Increased5001500 = false;
    bool Increased15003000 = false;

    public void Start()
    {
        Score = 0;
    }

    public int Score
    {
        get =&gt; score;
        protected set
        {
            if (score != value)
            {
                score = value;
                IncreaseScore(); // OP method
            }
        }
    }
}
</code></pre>
</blockquote>

<p>Let's remove the <code>IncreaseScore</code>, the boolean flags and implement the state machine.</p>

<pre><code>class Game
{
    private int score;
    private DifficultyLevelState difficultyLevel;

    public void Start()
    {
        Score = 0;
        UpdateDifficultyLevel(new EasyState());
    }

    public int Score
    {
        get =&gt; score;
        protected set
        {
            if (score != value)
            {
                score = value;
                OnScoreUpdated();
            }
        }
    }

    private void OnScoreUpdated()
    {
        difficultyLevel.OnScoreUpdated(this);
    }

    internal void UpdateDifficultyLevel(DifficultyLevelState state)
    {
        if (difficultyLevel != state)
        {
            difficultyLevel?.Exit(this);
            difficultyLevel = state;
            difficultyLevel?.Enter(this);
        }
    }
}
</code></pre>

<p>Now, any time the score gets updated, the game asks the current difficulty state to handle the score. The current state might decide to keep the state as is, or to change the state to another difficulty level based on the current score. Whenever the difficulty state changes, its <code>Enter</code> actions change the difficulty parameters of the game. This pattern also allows to skip states (big score leaps) and decrease difficulty levels.</p>
    </div>