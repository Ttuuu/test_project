<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I see one big problem and one smaller problem with this code.</p>

<p>The big problem is the complete lack of handling of exceptions. If just one of the tasks fails, there's no way to get the results of any of the rest of the tasks, because an <code>AggregateException</code> is going to be thrown out. The best solution to this problem that I've found is to make the return type be <code>IEnumerable&lt;Task&lt;TResult&gt;&gt;</code> rather than <code>IEnumerable&lt;TResult&gt;</code>/<code>TResult[]</code>. That way you encapsulate neatly for each task its result if it succeeded, or its exception if it didn't.</p>

<p>The smaller problem is that it's overly complicated. There's no need for partitioners or semaphores. The same result can be obtained using <code>Task.WhenAny</code> to wait for the first of the active tasks to finish, whereupon you replace it with a new task and loop:</p>

<pre><code>    public static async Task&lt;IEnumerable&lt;Task&lt;TResult&gt;&gt;&gt; ForEachAsync&lt;TSource, TResult&gt;(
        this IEnumerable&lt;TSource&gt; source,
        Func&lt;TSource, Task&lt;TResult&gt;&gt; operation,
        int maxParallel = int.MaxValue)
    {
        var result = new List&lt;Task&lt;TResult&gt;&gt;();
        var active = new HashSet&lt;Task&lt;TResult&gt;&gt;();
        var enumerator = source.GetEnumerator();
        while (active.Count &lt; maxParallel &amp;&amp; enumerator.MoveNext())
        {
            var task = operation(enumerator.Current);
            result.Add(task);
            active.Add(task);
        }

        while (active.Count &gt; 0)
        {
            Task finished = await Task.WhenAny(active).ConfigureAwait(false);
            active.Remove(finished as Task&lt;TResult&gt;);

            if (enumerator.MoveNext())
            {
                var task = operation(enumerator.Current);
                result.Add(task);
                active.Add(task);
            }
        }

        return result;
    }
</code></pre>
    </div>