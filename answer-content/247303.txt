<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>These items won't necessarily address Excel's memory usage. I think you'd have to have a chat with MS's Excel development team to really address that. This will, however address some of the general coding issues I noticed that should help us write easier to understand and maintain code.</p>
<h1><a href="https://cultural-phenomenons.fandom.com/wiki/Danger,_Will_Robinson" rel="nofollow noreferrer">Danger Will Robinson, Danger!!</a></h1>
<pre><code>Debug.Print Now   'Don't know what it does come w the code i found online
</code></pre>
<p>This is, frankly, more than a little worrying. If you don't know what the code does, either figure it out or don't use it! This one is <em>very</em> innocuous, and isn't anything to worry about, but you could blindly paste buggy, or worse, <em>harmful</em> code in and run it without knowing what you're doing.</p>
<p>I'd recommend using your favorite search engine with the terms <code>msdn vba &lt;unknown function&gt;</code> to find out what that function will do, something like this:</p>
<blockquote>
<p>msdn vba debug.print</p>
</blockquote>
<p>That'll take you to the <a href="https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.debug.print?view=netcore-3.1" rel="nofollow noreferrer">MSDN documentation</a> for the <code>Debug.Print</code> command. Do the same for <code>Now</code> to find out what it does.</p>
<p>I'd guess, though, that you found more than just that one line online and blindly copied it in. I'll admit, I'm not always the best at figuring out what code does just by reading it (and the docs for unfamiliar commands), sometimes I have to step through it with the IDE's <code>Locals</code> window open to follow the execution path and see what variables are changing and how. That's OK if you're running in debug in a development environment and you're really taking your time to understand each line (hopefully <em>before</em> it executes and deletes stuff or sends all your private info to someone else), but don't just blindly paste, cross your fingers, and hope for the best. Please...</p>
<h2>Variables</h2>
<pre><code>Dim varSheetA As Variant          'External file ref sheet
Dim varSheetB As Variant          'Internal file ref sheet
Dim strRangeToCheck As String     
Dim iRow As Long                  'Row count
Dim iCol As Long                  'Col count
Dim Sheetname As String
</code></pre>
<p>We're using variables to hold references to the worksheets we're working with and that's awesome! Many just use <code>ActiveWorksheet</code> which has all sorts of inherent dangers. We've avoided that pitfall, but introduced others.</p>
<h3>Hungarian Notation</h3>
<p><a href="https://www.joelonsoftware.com/2005/05/11/making-wrong-code-look-wrong/" rel="nofollow noreferrer">Hungarian Notation is bad</a> (or at least useless) the way most people use it. (Go ahead, take a few minutes to read that to find out why, I'll wait.)</p>
<ul>
<li><p><code>varSheetA</code> I have no need to know that this variable is a <code>Variant</code> when I'm working with it. I really don't.</p>
</li>
<li><p><code>iRow</code> is misleading! We've claimed that it's an integer <code>i</code> (or an Apple product), yet it's actually a <code>Long</code> (which is better than an <code>Int</code> for any modern version of VBA, so stick with <code>Long</code>).</p>
</li>
</ul>
<h3>Naming</h3>
<p>I don't know what your variables are for without reading the comments, so make the comments the variable names! Let's rename our variables to indicate what they're actually for - it makes it much easier for a future programmer (maybe even future us) to follow our code.</p>
<ul>
<li><p><code>varSheetA</code>... well... I'm pretty sure that's a Worksheet, but which one? Let's scroll to the top to take a look at the comment to remind us</p>
</li>
<li><p><code>ExternalRefSheet</code> is a worksheet, and 400 lines of code later, we still remember that it's the External Reference Worksheet <em>without</em> having to scroll around to find it!</p>
</li>
<li><p><code>iRow</code> is a bit of a conundrum.</p>
<ul>
<li>The <code>i</code> is an unnecessary lie, leaving <code>Row</code></li>
<li>but <code>Row</code> is a property of <code>Worksheet</code>, so it's a bit redundant and confusing. What do to...</li>
<li>How about <code>currentRow</code> or possibly <code>externalRow</code> or <code>internalRow</code>? These will make it very explicitly clear <em>which</em> row we're referring to!</li>
<li>They also have the added benefit of avoiding the possibility of accidentally doing <code>Dim row As Long</code> which, due to VBA's "helpfulness", will manifest later as <code>ActiveWorkbook.row</code> instead of <code>ActiveWorkbook.Row</code> (notice the difference in capitalization).</li>
</ul>
</li>
</ul>
<h3>Efficiency</h3>
<p>Avoid <code>Variant</code> variables whenever possible! Each time our code references a <code>Variant</code>, the VBE run-time engine has to analyze the data <em>in</em> the variable to determine what kind of data it is, <em>then</em> it can determine if it's legal for the function we're trying to use it for. This takes time. Maybe not a <em>huge</em> amount of time, but it adds up, especially in loops.</p>
<ul>
<li><p><code>Dim varSheetA As Variant</code> is slow and confusing to both the programmer and the RTE</p>
</li>
<li><p><code>Dim ExternalRefSheet As Excel.Worksheet</code> is fast and explicit to both the programmer and the RTE</p>
<ul>
<li>Note that the <code>Excel.</code> portion isn't <em>absolutely necessary</em>, but it never hurts to be as explicit as possible - it removes the possibility of confusion.</li>
</ul>
</li>
</ul>
<p>There <em>are</em> some times when you do <em>need</em> to use <code>Variant</code>, but holding a reference to a <code>Worksheet</code> isn't one of them.</p>
<h3>Option Explicit</h3>
<p>We were doing so well, declaring variables, then we get to</p>
<pre><code>Set wbka = Workbooks.Open(fileName:="\\Backup\Opérations\Coaticook\Planification\Cédule détaillées\Cédule détaillées des composantes.xlsx")         ' Set outer file wb
</code></pre>
<p>I scrolled up to see what <code>wbka</code> is (an unintuitive name, possibly a typo?), and discovered that it isn't declared anywhere! VBA so "helpfully" declares it on the spot for us as a <code>Variant</code>. We've already discussed the evils of <code>Variant</code>, so we'll leave that behind. We've also discussed the necessity of naming variables so comments aren't necessary, so we'll ignore that, too.</p>
<p>How do we handle this? Put <code>Option Explicit</code> at the top of <em>every</em> code module you write! When you do this, the IDE will <em>not</em> compile your code unless you <code>Dim</code> every variable you use.</p>
<ul>
<li>This will prevent VBA from automatically declaring <em>slow</em> <code>Variant</code> variables for you</li>
<li>This will prevent typos from becoming new variables and becoming bugs!</li>
</ul>
<pre><code>Set wbka = Workbooks.Open("MyFile.xlsx")
If wkbka.Name = "MyFileName" Then...
</code></pre>
<ul>
<li>Without <code>Option Explicit</code>, VBA will happily declare a new variable <code>wkbka</code> and now you'll have 2 variables and subtle bugs.</li>
<li><em>With</em> <code>Option Explicit</code>, VBA won't compile this code and it will point to that 2nd line and tell you that it doesn't know what <code>wkbka</code> is, finding the bug for you!</li>
</ul>
<p>Setting <code>Option Explicit</code> is so critical that MS actually gives you a way of defaulting it on in <em>every</em> code module! In the IDE, select <code>Tools</code> from the menu, then <code>Options</code>, then on the <code>Editor</code> tab, make sure that <code>Require Variable Declaration</code> is checked:</p>
<p><a href="https://i.stack.imgur.com/Fe69n.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/Fe69n.png" alt="enter image description here"></a></p>
<p>Why that's not the default setting is beyond me, but, that's what it is...</p>
<h3>Lies!!</h3>
<p>Hey, wait a minute! Those variables lied to me!!!</p>
<pre><code>varSheetA = wbka.Worksheets(Sheetname).Range(strRangeToCheck)  ' Set outer file ref sheet
varSheetB = Worksheets(Sheetname).Range(strRangeToCheck) ' Set inner file ref sheet
</code></pre>
<p>Those sure <em>look</em> like they should be referencing <code>Workbook</code>s, but, in fact, they're actually referencing <code>Range</code>s of worksheets! Again, let's fix up the naming and the <em>data type</em> so we know <em>exactly</em> what they're for and don't need those comments.</p>
<pre><code>Dim externalRange as Excel.Range
externalRange = wbka.Worksheets(Sheetname).Range(strRangeToCheck)
Dim internalRange as Excel.Range
internalRange = Worksheets(Sheetname).Range(strRangeToCheck)
</code></pre>
<p>Now we know <em>exactly</em> what we've got our hands on without unnecessary comments.</p>
<h3>Pot luck</h3>
<p>Not really sure what to call this one...</p>
<pre><code>Dim Z As Integer: Z = 0     ' My different or same boolean (could prob be an actual boolean)
</code></pre>
<p>That pretty much hits all the points above.</p>
<ul>
<li>It's poorly named.
<ul>
<li>Why <code>z</code>? I think of the vertical axis in 3D space when I see <code>z</code>.</li>
</ul>
</li>
<li>Why <code>Integer</code>?
<ul>
<li>32-bit VBA (in use since about Office 95) will automatically internally convert all <code>Integer</code> to <code>Long</code>, so just use <code>Long</code> to begin with and eliminate <code>Integer</code> from your vocabulary and code.</li>
<li>Note that there are <em>some</em> exceptions - like when you call core Windows DLL functions and it's expecting 16 bits, you'd better pass it an <code>Integer</code>, but that's a bit of an advanced topic.</li>
</ul>
</li>
<li>Explicit is <em>good</em>, but <code>Z = 0</code> is actually unnecessary
<ul>
<li>VBA will helpfully initialize all variables to their 'initialized' state when you <code>Dim</code> them, so it's a bit redundant</li>
<li>I'm torn on this one, it's programmer preference</li>
</ul>
</li>
<li>Multi-line statements (<code>:</code>)
<ul>
<li>They do make for more compact code, but they make the code less readable.</li>
<li>It takes more cognitive energy for the human to parse the code to figure out what's going on, though the compiler certainly doesn't care.</li>
<li>The harder it is to read our code the harder it will be for a future programmer (maybe future you) to safely modify it.</li>
<li>Again, programmer preference, but I'm against it!</li>
</ul>
</li>
<li>More lies!
<ul>
<li><code>'My different or same boolean</code> Well, why don't we say so??</li>
<li>Give it a <em>good</em> name! How 'bout <code>rowsAreDifferent</code>?</li>
<li>While we're at it, let's actually declare it as a <code>Boolean</code> instead of just noting that this is how we're using it?</li>
<li>Talk about <em>readable</em> code!</li>
</ul>
</li>
</ul>
<pre><code>If Z = 1 Then    ' if my boleen = 1 then means its different
</code></pre>
<p>becomes</p>
<pre><code>If rowsAreDifferent Then
</code></pre>
<ul>
<li>Now there's no need for comments and there is <em>no</em> confusion about what's just about to happen!</li>
</ul>
<h3>More Efficiency</h3>
<p>Hey, let's find some efficiency in our code. Looping through cells in a worksheet is one of the more inefficient things we can do. It's much more efficient to copy them to an array and loop through the array. Excel is just <em>slow</em> when it comes to accessing the contents of <code>myWorkbook.cells(myRow, myCol)</code>, but it's really quick to access <code>myArray(myRow, myCol)</code> so let's do that.</p>
<pre><code>For iRow = LBound(varSheetA, 1) To UBound(varSheetA, 1)
    For iCol = LBound(varSheetA, 2) To UBound(varSheetA, 2)
        If varSheetA(iRow, iCol) = varSheetB(iRow, iCol) Then
                ' Cells are identical.
                ' Do nothing.
        Else
           
        Z = 1   ' My booleen = 1
        Exit for ' Exit
        End If
    Next iCol
Next iRow
</code></pre>
<p>Can become this:</p>
<pre><code>Dim externalRange() As Variant 'this is one of those times we actually NEED a Variant!
With externalSheet
  'this assumes all rows are filled to the same depth, so the last row in 'A' is 
  'the last row in every column
  'change the way we're finding the last row if this isn't the case
  Dim lastRow as Long
  lastRow = .Range("A" &amp; .Rows.Count).End(xlUp).Row
  externalRange = .Range("A1:AE" &amp; lastRow) 
End With
Dim internalRange() as Variant
With internalSheet
  lastRow = .Range("A" &amp; .Rows.Count).End(xlUp).Row
  internalRange = .Range("A1:AE" &amp; lastRow) 
End With

Dim currentRow as Long
Dim currentCol as Long
For currentRow = LBound(externalRange, 1) to UBound(externalRange, 1)
  For currentCol = LBound(externalRange, 2) to UBound(externalRange, 2)
    If externalRange(currentRow, currentCol) &lt;&gt; internalRange(currentRow, currentCol) Then
      rowsAreDifferent = TRUE
      Exit For
    End If
  Next
Next
</code></pre>
<ul>
<li>We're saving time by looping through an array instead of cells.</li>
<li>We've found a better, more accurate way of <a href="https://stackoverflow.com/a/11169920/2344413">determining the last row in a column</a>.</li>
<li>We're actually testing for the thing we're looking for (we're looking for the array elements to be <em>not equal</em> so let's test for that) instead of having an <em>empty</em> <code>TRUE</code> case in our <code>If..Then</code> which requires a comment to tell the world that this is <em>not</em> an error in our code.</li>
<li>We're setting our newly named <code>Boolean</code> variable so it's really obvious what we're looking for.</li>
<li>Oh, one other thing. Notice how the only comments in this code tell us <em>why</em> we're doing what we're doing, not <em>what</em> we're doing?
<ul>
<li>Since we vilified <code>Variant</code> earlier, we add a comment here stating that we <em>know</em> we have to use one, even though they're generally bad</li>
<li>We've also used a comment to document the logic and assumptions around the <code>lastRow</code> assignment, but not the <em>how</em> we're getting <code>lastRow</code>.</li>
<li><em>Why</em> comments are good - they explain the choices made in doing what we're doing.</li>
<li><em>How</em> comments are, generally, bad - they explain the logic in poorly written code that should have been clear enough in the first place.</li>
<li>There are, of course, exceptions to every rule, but if you have to document <em>how</em> your code works, you should probably take a step back and look at it again. Maybe set it down until tomorrow...</li>
</ul>
</li>
</ul>
<h3>Reopening workbooks</h3>
<p>We've determined that we have some different data, so now we <em>reopen</em> the exact same workbook that we've already opened! Way up at the top, we did:</p>
<pre><code>Set wbka = Workbooks.Open(fileName:="\\Backup\Opérations\Coaticook\Planification\Cédule détaillées\Cédule détaillées des composantes.xlsx")         ' Set outer file wb
</code></pre>
<p>Now we're going to</p>
<pre><code>Set wb = Workbooks.Open("\\Backup\Opérations\Coaticook\Planification\Cédule détaillées\Cédule détaillées des composantes.xlsx", False) ' Open outer wb
</code></pre>
<p>To my eye these are the same workbooks. We've already got it open and a variable <code>wbka</code> holding the reference to it, so let's not bother with opening it again. That will save us notable time by not getting it off the network again. That also means that we don't need the <code>Dim wb As Workbook</code> line, and we'll need to change all references below from <code>wb</code> to <code>wbka</code>. To be honest, though, we need a better name than <code>wbka</code>, so maybe we should have renamed that to <code>externalBook</code> or something meaningful. Maybe <code>sourceWorkbook</code> would be better?</p>
<h3>Kill <code>.Activate</code>! Kill it with fire!!!</h3>
<p>We were doing <em>so</em> well, then we hit</p>
<pre><code>wb.Activate
lastCol = Sheets(Sheetname).Range("a1").End(xlToRight).Column
Lastrow = Sheets(Sheetname).Cells(1, 1).End(xlDown).Row
</code></pre>
<p><code>.Select</code> and <code>.Activate</code> are <a href="https://stackoverflow.com/questions/10714251/how-to-avoid-using-select-in-excel-vba">fraught with potentials for errors</a> and so easy to avoid!.</p>
<p>To get rid of the unqualified <code>Sheets</code>, we make a simple change and we have:</p>
<pre><code>Dim lastCol As Long
'hey, remember we'd already loaded all the data into an array?
'the UBound of that array tells us the (almost) last column count
'the array is 0-based by default, so we have to add 1
lastCol = UBound(varSheetA, 2) + 1
Dim lastRow as Long
'we'll use the same trick as above
lastRow = uBound(varSheetA, 1) +1
</code></pre>
<h3>Hey wait a minute...</h3>
<p>We're copying <code>sheetName</code> from the backup copy into <em>this</em> workbook if somebody changed this workbook. We're <code>.Activate</code>ing and <code>.Selecting</code> and <code>.Copy</code>ing and <code>.Paste</code>ing <em>the whole worksheet</em>. Doesn't Excel have a nifty function to do that? Why... yes, yes it does!</p>
<pre><code>Dim curentSheetNumber as Long
currentSheetNumber = ThisWorkbook.Worksheets(sheetName).Index
ThisWorkbook.Delete(sheetName) 
wbka.Worksheets(sheetName).Copy After:=Thisworkbook.Worksheets(currentSheetNumber - 1)
</code></pre>
<p>There we go.</p>
<ul>
<li>We determined where in the Workbook <code>sheetName</code> is (in case someone moved it).</li>
<li>We deleted the whole WorkSheet - it's invalid after someone modified it, right?</li>
<li>Then we simply copied the whole WorkSheet from the backup version, and even put it back in the same place!</li>
</ul>
<p>All with as many lines of code as it took to describe the process and no comments necessary because the code is self explanitory.</p>
<h3>Breaking links to the past</h3>
<p>Hey, this is <em>excellent</em>! Excel is so "helpful" when it provides links back to the original workbook, except when it isn't. Frankly, I might borrow this little loop of code, I like it a lot!</p>
<p>I don't believe, however, that Excel will create the links when we copy the entire worksheet instead of copy/pasting all the cells. Try commenting this loop out to see if it's still needed.</p>
<h3>Consistant formatting</h3>
<p>The last thing we do is look for today's worksheet. This code is reasonably clean, but it's hard to read and has some small issues. The biggest issue is that the indentation is all over the place. That's been true of some of our other code, too, but it seems most egrigous here.</p>
<p>By reformatting the code a bit, it becomes easier to read:</p>
<pre><code>  Dim xSh As Worksheet
  For Each xSh In Worksheets                     ' For every sheet in wb
    If xSh.Visible Then                          ' If visible
      Dim sheetdate As Date
      sheetdate = xSh.Cells(4.2).Value           ' Set sheetdate as the date on sheet
      If sheetdate = Date Then                   ' If date on sheet = the actual date
        xSh.Select                               ' Select that sheet and exit for
        Exit For
      Else                                       ' else loop till you find it
      End If                                     ' else just stay on the sheet it closed on
    End If
  Next
</code></pre>
<p>Right away, we see what looks like a bug:</p>
<pre><code>sheetdate = xSh.Cells(4.2).Value
</code></pre>
<p>Even with international settings, I'm pretty sure that the parameter separator is a comma <code>,</code>, not a period <code>.</code>. So while this will compile, I don't think that's going to work the way we expect it to.</p>
<p>While it never hurts to declare and use a variable, since it does make what we're doing more obvious, if we're only going to use the variable 1 time, it's really optional. That means we could, if we wanted to simplify</p>
<pre><code>  Dim sheetdate As Date
  sheetdate = xSh.Cells(4.2).Value           ' Set sheetdate as the date on sheet
  If sheetdate = Date Then                   ' If date on sheet = the actual 
</code></pre>
<p>down to</p>
<pre><code>If xSh.Cells(4,2).Value = Date Then
</code></pre>
<p>Additionally there's no need for us to have an <code>Else</code> if we're not actually <em>doing</em> anything in that <code>Else</code> clause, so we can get rid of that.</p>
<h1>Final thoughts</h1>
<p>Since we're now copying the whole worksheet with those 3 simple lines, it's entirely possible that the sheer act of opening the "backup" source sheet from the network will be the longest portion of code execution.</p>
<p>I'd seriously recommend doing some time-based testing to see if just blindly copying the sheet will now be faster than doing all the analysis to determine if anything has changed. I have the funny feeling that it will be faster.</p>
    </div>