<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First, the things which are bad about the form:</p>

<ol>
<li><p><code>#include &lt;bits/stdc++.h&gt;</code> is non-standard and probably far too much.</p></li>
<li><p><code>using namespace std;</code> is evil because <code>std</code> is not designed to be imported wholesale, making conflicts and silent changes, now and in future, likely.</p></li>
<li><p><code>long substrCount(int n, string s)</code> is also a bad idea. <code>n</code> duplicates <code>s.size()</code> but with the wrong type (it should be <code>string::size_type</code>).</p></li>
<li><p>The code assumes that input won't fail. That's generally wrong.</p></li>
<li><p><code>return 0;</code> is implicit for <code>main()</code>.</p></li>
</ol>

<p>Now, about your code:</p>

<ol start="6">
<li><p>All your comments are just a distraction, as they contain cryptic code-fragments. Clean them up.</p></li>
<li><p>If you want to create a reverse of a range, just initialize the copy with reverse-iterators instead of copying and then reversing. <code>rbegin()</code> and <code>rend()</code> are your friends.</p></li>
<li><p>If you want to know whether a range is all copies of the same element except the middle, take a look at <a href="https://en.cppreference.com/w/cpp/algorithm/count" rel="nofollow noreferrer"><code>std::count()</code></a>:</p>

<pre><code>bool my_palindrome = range[range.size() / 2] != range[0]
    &amp;&amp; std::count(range.begin(), range.end(), range[0]) == range.size() - 1;
</code></pre>

<p>Making copies, reversing, and then comparing is just superfluous additional work.</p></li>
<li><p>Fixing all those small things might lead to a significant speed-up, but it doesn't improve the order of your algorithm which is <span class="math-container">\$O(n^2)\$</span>.</p>

<p>For that, move to a different algorithm:</p>

<ol>
<li>Start with zero.</li>
<li>Find runs of identical characters.</li>
<li>Add the number of substrings for the run, which is <span class="math-container">\$k * (k + 1) / 2\$</span>.</li>
<li>If the run has length one, and the bordering runs consist of identical characters, add the length of the smaller one.</li>
</ol>

<p>That's <span class="math-container">\$O(n)\$</span>, even single-pass.</p></li>
</ol>

<p>Improved version of your function (using C++17 <a href="https://en.cppreference.com/w/cpp/string/basic_string_view" rel="nofollow noreferrer"><code>std::string_view</code></a> as the parameter to avoid <em>any</em> copies, even in the caller, whether he has a <code>std::string</code> or not):</p>

<pre><code>long substrCount(std::string_view s) noexcept {
    char c[3] = {};
    long n[3] = {};
    long r = 0;
    for (auto curr = begin(s), last = end(s), pos = begin(s); curr != last; curr = pos) {
        pos = std::find_if(curr + 1, last, [=](char c){ return c != *curr; });
        std::tie(n[2], n[1], n[0]) = std::make_tuple(n[1], n[0], pos - curr);
        std::tie(c[2], c[1], c[0]) = std::make_tuple(c[1], c[0], *curr);
        r += *n * (*n + 1) / 2;
        if (n[1] == 1 &amp;&amp; c[0] == c[2])
            r += std::min(n[0], n[2]);
    }
    return r;
}
</code></pre>
    </div>