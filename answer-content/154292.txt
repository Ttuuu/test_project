<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Bug: Only works if longs are 64-bit</h3>

<p>I ran your program on my 32-bit machine and got the wrong answer for the 1 millionth prime: 15498907 instead of 15485863.  The problem is here:</p>

<blockquote>
<pre><code>        if (i*i &gt; i)        // overflow test
</code></pre>
</blockquote>

<p>If longs are 32 bits, then a number such as <code>0x10001</code> will pass this overflow test (because <code>0x10001 * 0x10001 = 0x20001</code> after overflowing).  This eventually causes problems because overflowed values are inserted into the map.  Actually, even if longs are 64-bit, you will still have a problem, but it will only happen after <code>i</code> reaches <code>0x100000001</code>.</p>

<p>I fixed the problem by doing this:</p>

<pre><code>    unsigned long max_i = std::sqrt(~0UL);
    // ...
        if (i &lt;= max_i)      // overflow test
</code></pre>

<h3>Slow compared to vector based solution</h3>

<p>I found your program to be a lot slower than a traditional vector based sieve.  Here are timings for your program vs a traditional sieve that I wrote which used a <code>vector&lt;bool&gt;</code>:</p>

<pre class="lang-none prettyprint-override"><code>Map    based,  1 millionth prime:  3.77 seconds
Map    based, 10 millionth prime: 47.91 seconds
Vector based,  1 millionth prime:  0.04 seconds
Vector based, 10 millionth prime:  0.93 seconds
</code></pre>

<h3>Sample vector based code</h3>

<p>Since there was a comment asking about how the vector based code would work, here is the full program I used:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;cstdlib&gt;
#include &lt;cmath&gt;
#include &lt;cstdio&gt;
#include &lt;vector&gt;

// This function uses the prime counting function approximation:
//
// n = x / ln(x)
//
// Where n is the number of primes below the number x.  Since we are trying
// to find the nth prime, we should solve for x here to determine an
// approximate value for the nth prime.  It turns out that for n &gt;= 6, the
// value we solve for x will always be larger than the nth prime value.
//
// If the sieve size doesn't fit in an unsigned long, this function returns 0.
unsigned long findSieveSize(unsigned long n)
{
    // For small n, the formula returns a value too low, so we can just
    // hardcode the sieve size to 5 (5th prime is 11).
    if (n &lt; 6)
        return 13;

    // We can't find a prime that will exceed ~0UL.
    if (n &gt;= (~0UL / std::log(~0UL)))
        return 0;

    // Binary search for the right value.
    unsigned long low  = n;
    unsigned long high = ~0UL - 1;
    do {
        unsigned long mid   = low + (high - low) / 2;
        double        guess = mid / std::log(mid);

        if (guess &gt; n)
            high = (unsigned long) mid - 1;
        else
            low = (unsigned long) mid + 1;
    } while (low &lt; high);
    return high + 1;
}

unsigned long find_nth_prime(unsigned long n)
{
    if (!n) return 1;           // "0th prime"
    if (!--n) return 2;         // first prime

    unsigned long sieveSize = findSieveSize(n);
    unsigned long count     = 0;
    unsigned long max_i     = std::sqrt(sieveSize-1)+1;

    if (sieveSize == 0)
        return 0;

    std::vector&lt;bool&gt; sieve(sieveSize);
    for (unsigned long i = 3;  true;  i += 2) {
        if (!sieve[i]) {
            if (++count == n)
                return i;
            if (i &gt;= max_i)
                continue;
            unsigned long j    = i*i;
            unsigned long inc  = i+i;
            unsigned long maxj = sieveSize - inc;
            // This loop checks j before adding inc so that we can stop
            // before j overflows.
            do {
                sieve[j] = true;
                if (j &gt;= maxj)
                    break;
                j += inc;
            } while (1);
        }
    }
    return 0;
}

int main(int, char **argv)
{
    std::cout.imbue(std::locale(""));
    while (*++argv) {
        try {
            std::cout &lt;&lt; find_nth_prime(atoi(*argv)) &lt;&lt; std::endl;
        } catch (std::exception&amp;) {
            std::cerr &lt;&lt; "Invalid argument: " &lt;&lt; *argv &lt;&lt; std::endl;
        }
    }
}
</code></pre>
    </div>