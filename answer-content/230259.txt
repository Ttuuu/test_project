<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>kotlinify getViewModel</h1>

<p>I would change</p>

<pre><code>protected fun &lt;T: ViewModel&gt;getViewModel(c: Class&lt;T&gt;): T
            = ViewModelProviders.of(activity)[c]
}
//with 
protected fun &lt;T: ViewModel&gt;getViewModel(c: KClass&lt;T&gt;): T
            = ViewModelProviders.of(activity)[c.java]
}
</code></pre>

<p>after replacing the Class with KClass in the activity, you can use the kotlin ones instead of the java-ones.</p>

<p>then you can use:</p>

<pre><code>private typealias RVM = RotateViewModel
private typealias CVM = CropViewModel
class CropFragment: BaseFragmentInOut&lt;CVM, RVM&gt;(CVM::class, RVM::class) {
    ...
}
</code></pre>

<h1>second example</h1>

<p>In your second example, you tell me you must do everything in the Cropfragment.
This isn't true as your Basefragment can have those fields and the parent can set them.</p>

<pre><code>abstract class BaseFragmentInOut&lt;InVM : BitmapViewModel, OutVM : BitmapViewModel : BaseFragment() {
    protected lateinit var inViewModel: InVM
    protected lateinit var outViewModel: OutVM
    fun getInBitmap(): Bitmap = inViewModel.bitmap
    fun setOutBitmap(bmp: Bitmap) { outViewModel.bitmap = bmp }

    @CallSuper
    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        inViewModel = getViewModel(c1)
        outViewModel = getViewModel(c2)
    }
}
</code></pre>

<p>and in your CropFragment:</p>

<pre><code>class CropFragment: BaseFragment() {
    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        inViewModel = getViewModel()   //changes the field in BaseFragment
        outViewModel = getViewModel() //changes the field in BaseFragment
    }
}
</code></pre>

<h1>template method</h1>

<p>If you don't want to have onViewCreated in the basefragment or you want to de other things after having set the viewmodels in onViewCreated in the basefragment, use a <a href="https://www.tutorialspoint.com/design_pattern/template_pattern.htm" rel="nofollow noreferrer">template method</a>:</p>

<p>create an abstract method in the super-class that should do what you want... In this case create the ViewModels</p>

<pre><code>abstract class BaseFragmentInOut&lt;InVM : BitmapViewModel, OutVM : BitmapViewModel : BaseFragment() {
    abstract fun createInViewModel() : InVM
    abstract fun createOutViewModel() : OutVM

    @CallSuper
    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        inViewModel = createInViewModel()
        outViewModel = createOutViewModel()
    }
}
</code></pre>

<p>your sub-class is then forced to implement them:</p>

<pre><code>class CropFragment: BaseFragment() {
    override fun createInViewModel() = getViewModel()
    override fun createOutViewModel() = getViewModel()
}
</code></pre>

<h1>to much?</h1>

<p>You can of course also combine both the template methods to one called <code>createViewModels</code>.
Then you can create a helper-function in BaseFragmentInOut:</p>

<pre><code>protected inline fun &lt;reified I : InVM, reified O : OutVM&gt;  initialize(){
    inViewModel = getViewModel(I::class)
    outViewModel = getViewModel(O::class)
}
</code></pre>

<p>The only thing you have to do at that moment is to implement createViewModels the following way:</p>

<pre><code>override fun createViewModels() = initialize&lt;RVM, CVM&gt;()
</code></pre>

<p>At the moment it's not possinle to remove RVM and CVM from the initialize, but it's <a href="https://discuss.kotlinlang.org/t/allow-typealias-to-have-the-same-name-as-generic-class/6789/9?u=tieskedh" rel="nofollow noreferrer">on the table</a></p>
    </div>