<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You need to create a delegate method on your <code>Person</code> class:</p>
<pre><code>class Person
  def team_name
    team.name unless team.nil?
  end
end
</code></pre>
<p>Then it's just a simple:</p>
<pre><code>&lt;%= @person.team_name %&gt;
</code></pre>
<p>If you have a lot of these, consider using the <a href="http://apidock.com/rails/Module/delegate" rel="nofollow noreferrer">Delegate</a> module:</p>
<pre><code>class Person
  delegate :name, :ranking, :jersey, :grounds,
             :to =&gt; :team, :allow_nil =&gt; true, :prefix =&gt; true
  # Person now responds to #team_name, #team_ranking, #team_jersey, #team_grounds as above
end
</code></pre>
<p>The reason this approach works better has to do with the <a href="https://en.wikipedia.org/wiki/Law_of_Demeter" rel="nofollow noreferrer">Principle of Least Knowledge</a>:</p>
<blockquote>
<p>The Law of Demeter (LoD) or principle of least knowledge is a design guideline for developing software, particularly object-oriented programs. In its general form, the LoD is a specific case of loose coupling. The guideline was proposed at Northeastern University towards the end of 1987, and can be succinctly summarized in each of the following ways:</p>
<ul>
<li>Each unit should have only limited knowledge about other units: only units "closely" related to the current unit.</li>
<li>Each unit should only talk to its friends; don't talk to strangers.</li>
<li><strong>Only talk to your immediate friends.</strong></li>
</ul>
</blockquote>
<p>(Emphasis, mine)</p>
<p>The last bullet point is the key. Your view should only be calling methods on <code>@person</code>. In order to get the team name, your view should not need to test for the existence of <code>@person.team</code>. That requires your view to have too much knowledge of the <code>@person</code> object, and instead it is preferable to create a delegate method in <code>Person</code> that checks for <code>team.nil?</code>.</p>
    </div>