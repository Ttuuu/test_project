<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Architecture</h2>

<p>DDD-wise : The most important thing about DDD is that the domain drives the design (so.. DDD). That means that when we look at your domain objects we should be able to understand the whole logic of your application.</p>

<p>Let's summarize what your application is doing : A <em>user</em> posts an <em>product</em> for sale, where the product can have a <em>Youtube link</em>, a <em>website</em> and <em>some photos</em>.</p>

<p>For every noun in there, there should be a corresponding object. Maybe you have them, maybe you don't, I can't tell from the picture you uploaded. The what I can at least tell is that a photo doesn't belong to a user, but to a product (which means that the class <code>UserPhotosPath</code> needs to be re-thought of).</p>

<p>So, your bounded context should look like <code>Product has {Photos, Youtube link, website link}</code> and a user has products.</p>

<hr>

<p>One very important thing I think you misunderstood about DDD is that the domain is the good place to put the domain logic, not <em>all</em> the logic. Domain logic includes : Relationship between entities, validations. That's... pretty much all. So, you need to ask yourself, does my domain depend on some file system? Do you want your domain, which should be comprised of <em>only</em> domain objects, to know that you use a file system to store your images? That's your problem. You have a hard time to create a domain object named <code>FileInfo</code> because it shouldn't be a domain object.</p>

<hr>

<p>Finally, Domain Driven Design is kind of a pain to use in a web context, there's one pitfall you should be very aware of that will kill the scalability and performance of your application. The whole bounded context things should be used <strong>only</strong> when writing to the application. Which means, when you need to show something on your website, have a separate project where all you do is load data in POCOs (plain old C# objects), skipping all business logic, because it doesn't apply to reading.</p>
    </div>