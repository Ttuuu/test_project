<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>counter = Counter()
for string in strings:
    for char in string:
        counter[char] +=1
</code></pre>
</blockquote>

<p>You are flattening your <code>strings</code> list to count each individual characters. For starter, if you were to extract letters individually, you could feed it to the <code>Counter</code> constructor and avoid the <code>+= 1</code> operation. Second, flattening an iterable is best done using <a href="https://docs.python.org/3/library/itertools.html#itertools.chain.from_iterable" rel="nofollow noreferrer"><code>itertools.chain.from_iterable</code></a>:</p>

<pre><code>counter = Counter(itertools.chain.from_iterable(strings))
</code></pre>

<hr>

<blockquote>
<pre><code>result = []
for c in ascii_lowercase:
    if c in counter:
        for _ in range(counter[c]):
            result.append(c)
return "".join(result)
</code></pre>
</blockquote>

<p>Instead of the inner <code>for</code> loop, you can create repeated sequence of characters using <code>c * counter[c]</code>. This also have the neat advantage to produce the empty string (<code>''</code>) when <code>counter[c]</code> is <code>0</code>, removing the need for the <code>c in counter</code> test:</p>

<pre><code>return ''.join(c * counter[c] for c in ascii_lowercase)
</code></pre>

<hr>

<p>These changes result in a Ã—4 speedup on my machine.</p>
    </div>