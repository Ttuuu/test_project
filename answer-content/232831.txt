<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Optimized version</h3>
<p>The crucial function can be thought through 3 phases:</p>
<p><em>Aggregating <strong>dictionary of sequential recurrences</strong></em></p>
<p>As was correctly mentioned <strong><code>defaultdict(list)</code></strong> is a more performant alternative to <code>dic.setdefault</code>.<br>Besides of that, as you've mentioned, input list could be of length <code>300</code>. In that case the initial approach will evaluate <code>len(seq)</code> 44850 times.<br>To optimize that we'll store the size of the input sequence in a separate variable <strong><code>seq_size = len(seq)</code></strong> and refer it in subsequent loops.</p>
<hr>
<p><em>Filtering out entries that weren't recurred (occurred once) with ordering</em></p>
<p>Instead of defining <code>clean</code> inner function and generating a redundant dictionary <code>cleandic</code> - both filtering and sorting can be performed in one pass:</p>
<pre><code>d = dict(sorted(((k, v) for k, v in d.items() if len(v) &gt; 1),
                key=lambda x: len(x[0]), reverse=True))
</code></pre>
<hr>
<p><em>Filtering out entries that are part (included) of other longer sequences</em></p>
<p>Instead of falling into a numerous noisy loops - a <em>string membership</em> trick can be applied. It's based on the idea of presenting string representations of <em>short</em> and <em>long</em> sequences as a <em>"needle"</em> and <em>"haystack"</em>.<br>It looks as:
<code>" 1 4 -5 "</code> <strong>in</strong> <code>" 1 4 -5 1 4 -5 "</code>.<br>Trailing spaces prevent incorrect matches like <code>"1 4 -5"</code> <strong>in</strong> <code>"1 4 -55 11 4 -5"</code> (which would be <em>truthy</em>)</p>
<hr>
<p>The new implementation is placed into a function called <strong><code>find_recurrences</code></strong>.<br>(I've moved the old implementation into function <code>find_recurrences_old</code> for comparison)</p>
<pre><code>from collections import defaultdict


def find_recurrences(seq):
    seq_size = len(seq)
    d = defaultdict(list)

    for i in range(0, seq_size):
        for j in range(i + 1, seq_size):
            d[tuple(seq[i:j])].append((i, j))

    d = dict(sorted(((k, v) for k, v in d.items() if len(v) &gt; 1),
                    key=lambda x: len(x[0]), reverse=True))
    d_copy = d.copy()

    for k, v in d_copy.items():
        if k not in d:
            continue
        k_str = f" {' '.join(map(str, k))} "
        for k_ in d.keys() - set([k]):
            if f" {' '.join(map(str, k_))} " in k_str:
                del d[k_]

    return d
</code></pre>
<hr>
<p>Ensuring that both functions return the same result:</p>
<pre><code>In [79]: seq = [-2, 3, -2, 3, 5, 3, 7, 1, 4, -5, 1, 4, -5, 1, 4, -5]                                                         

In [80]: find_recurrences_old(seq)                                                                                           
Out[80]: {(1, 4, -5, 1, 4): [(7, 12), (10, 15)], (-2, 3): [(0, 2), (2, 4)]}

In [81]: find_recurrences(seq)                                                                                               
Out[81]: {(1, 4, -5, 1, 4): [(7, 12), (10, 15)], (-2, 3): [(0, 2), (2, 4)]}
</code></pre>
<hr>
<p>But the <strong>new</strong> version has <em>time performance</em> advantage:</p>
<pre><code>In [84]: %timeit find_recurrences_old(seq)                                                                                   
97.3 µs ± 212 ns per loop (mean ± std. dev. of 7 runs, 10000 loops each)

In [85]: %timeit find_recurrences(seq)                                                                                       
80.5 µs ± 154 ns per loop (mean ± std. dev. of 7 runs, 10000 loops each)
</code></pre>
    </div>