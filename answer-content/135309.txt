<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Your Pokemon class (declaration)</h1>

<pre><code>class Pokemon {
public:
    std::string type;
    double weight, height;
    std::string Gender;
    int evoLevel;
    bool finalEvo;
    int dexNum;
    std::string name;

    Pokemon(std::string name2, std::string type2, double weight2, double height2, std::string Gender2, int evoLevel2, bool finalEvo2, int dexNum2);
    Pokemon();
}; 
</code></pre>

<p>Here are several things that spring to eye. First of all, all your fields are public. This indicates that you want a <code>struct</code>, not a <code>class</code>. In C++, they only differ by the default visibility. <code>class</code> is <code>private</code> by default, <code>struct</code> is <code>public</code> by default. So let's change that:</p>

<pre><code>struct Pokemon {
</code></pre>

<p>Next, we should disable <code>Pokemon()</code>. That way, one cannot create a pokemon by accident:</p>

<pre><code>    Pokemon() = delete;
</code></pre>

<p>Note that this isn't necessary, since any constructor will prevent the compiler from providing a default one. </p>

<h2>Better types</h2>

<p>In your other constructor, we change the name of the arguments and their types slightly:</p>

<pre><code>    Pokemon(Name name, Type type, Weight weight, Height height, Gender gender, 
            EvoLevel level, bool finalEvolution, PokedexID pid);
</code></pre>

<p>Wait. What the hell are all those types? First of all, <strong><em>they are an overkill</em></strong>. Second of all, they <a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Ri-typed" rel="noreferrer">follow the C++ core guidelines</a>. You don't want to use a Pokemon's name for its gender by accident, do you?</p>

<h2>Handling the Pokemon's type</h2>

<p>Which brings us to enumerations. <code>Type</code> and <code>Gender</code> are perfect candidates for those:</p>

<pre><code>enum class BasicType {
   Fire,
   Grass,
   Water,
   Electro,
   Poison,
   ...
};
</code></pre>

<p>Since Pokemon can have several types, we use another type <code>Type</code> to combine them:</p>

<pre><code>class Type{ 
    Type(BasicType main);
    Type(BasicType main, BasicType sub);

    void addSubType(BasicType);
    bool hasType(BasicType) const;
};
</code></pre>

<p>I'm not sure whether Pokemon will ever have more than two types, but as @Eeevee noticed, they are ordered.</p>

<p>If you want, you can define syntactic sugar upon this with by overloading <code>operator|</code>:</p>

<pre><code>Type operator|(BasicType main, BasicType sub) { return Type(main, sub); }
Type operator|(Type a,         BasicType sub) { return a.addSubtype(sub); }
</code></pre>

<p>The operator <a href="https://stackoverflow.com/q/1448396/1139697">enables us to use <code>Type::Fire | Type::Poison</code></a>. Note that this is probably again an overkill. However, it will prevent you from using</p>

<pre><code>Pokemon("Bulbasaur", "Gras and Poison", ...);
</code></pre>

<p>Instead, if you use</p>

<pre><code>Pokemon("Bulbasaur", Type::Gras | Type::Poison, ...);
</code></pre>

<p>you end up with a compiler error, instead of a frustrated user not able to find "Bulbasaur" by type "Grass". For testing, an <code>operator&amp;</code> might come in handy:</p>

<pre><code>Type operator&amp;(Type      a, BasicType b) { return a.hasType(b); }
Type operator&amp;(BasicType a, Type      b) { return b.hasType(a); }
</code></pre>

<p>That's very basic, but it gets its job done. How you actually store the types is left as an exercise, but not too hard. Note that you can add arbitrary methods to <code>Type</code> or functions that take <code>Type</code> as an argument, so there is enough space for additional <del>mad science experiments</del> features.</p>

<h2>A gender study</h2>

<p>We can do the same for gender, although it's slightly easier here, since there are only some and therefore we don't need the <code>operator|</code> trick or <code>addSubType</code>:</p>

<pre><code>enum class Gender {
   Male,
   Female,
   Both,
   Unknown
};
</code></pre>

<p>Again, this prevents you from writing</p>

<pre><code>Pokemon("Bulbasaur", Type::Grass | Type::Poison, 15.2, 28, "Apache helicopter", ...);
</code></pre>

<h2>Putting it all together</h2>

<p>For the other types, for the sake of simplicity, we say</p>

<pre><code>typedef std::string Name;
typedef double Weight;
typedef double Height;
typedef unsigned int EvoLevel;
typedef unsigned int PokedexID;
</code></pre>

<p>Therefore, we end up with the following struct:</p>

<pre><code>struct Pokemon {
    Pokemon() = delete;
    Pokemon(Name name, Type type, Weight weight, Height height, Gender gender, 
            EvoLevel level, bool isFinalEvolution, PokedexID pid);

  Name name;
    Type type;
    Weight weight;
    Height height;
    Gender gender;
    EvoLevel evolutionLevel;
    bool isFinalEvolution;
    PokedexID pid;
};
</code></pre>

<p>Note that contrary to your code, all variables here <strong>strictly</strong> follow camelCase, whereas your code contained <code>Gender</code>. Also notice that in <code>class</code> objects the members are usually prefixed with <code>m_</code>, suffixed with <code>_</code> or follow another naming convention. Since you want to use it without encapsulation and all public (e.g. <code>pokemon.type</code>) prefixes or suffixes would make your code harder to read here.</p>

<p><em>"But wait,"</em>, I here you say. <em>"Now the arguments have the same name as my members!"</em>. And that's good. If someone uses <code>Pokemon::Pokemon(...)</code> in their program, they want their IDE to show the argument names in a nice way, <em>without</em> the 2 as suffix.</p>

<p>Which brings us to your constructor's implementation:</p>

<pre><code>// your code
#include "Pokemon.h"

Pokemon::Pokemon(std::string name2, std::string type2, double weight2,  double height2, std::string Gender2, int evoLevel2, bool finalEvo2, int dexNum2) {
    name = name2;
    type = type2;
    weight = weight2;
    height = height2;
    Gender = Gender2;
    evoLevel = evoLevel2;
    finalEvo = finalEvo2;
    dexNum = dexNum2;
}
</code></pre>

<p>Aha. First of all, if you have an argument that has the same name as a member, you can use <code>this-&gt;[membername]</code> to distinguish, e.g.</p>

<pre><code>this-&gt;name = name2;
</code></pre>

<p>However, we're in a constructor. Therefore, we can <a href="http://en.cppreference.com/w/cpp/language/initializer_list" rel="noreferrer"><em>initialize</em> our values</a>. Note that <a href="https://stackoverflow.com/questions/926752/why-should-i-prefer-to-use-member-initialization-list">this isn't necessary with a POD</a>, but some of your members are classes, for example <code>Name</code> (it's a <code>std::string</code>). This saves a copy. We end up with:</p>

<pre><code>Pokemon(Name name, Type type, Weight weight, Height height, Gender gender, 
        EvoLevel level, bool isFinalEvolution, PokedexID pid) 
 : name(std::move(name)), type(type), weight(weight), height(height), gender(gender),
   evolutionLevel(evolutionLevel), isFinalEvolution(isFinalEvolution), pid(pid) {
}
</code></pre>

<p>Note that this indicates that we didn't really <em>need</em> have defined a constructor, we could just have used our usual <a href="https://stackoverflow.com/questions/11516657/c-structure-initialization"><code>struct</code> initialisation syntax</a></p>

<pre><code>Pokemon bulbasaur = { "Bulbasaur", ... };
</code></pre>

<p>But depending on your types, that's slightly more error prone.</p>

<h1>Output and DRY</h1>

<p>You don't follow the Don't-Repeat-Yourself principle. Your code contains the facilities to print a Pokemon <em>twice</em>. This is bad, since changes on one part should probably also be done on the other, but get lost. Instead, provide a operator, if you want to use <code>std::cout</code>:</p>

<pre><code>std::ostream &amp; operator&lt;&lt;(std::ostream &amp; out, const Pokemon &amp; pokemon) {
    out &lt;&lt; pokemon.name &lt;&lt; " is a " &lt;&lt; pokemon.type &lt;&lt; " type.\n"
        &lt;&lt; pokemon.name &lt;&lt; "'s weight and height are: " 
        &lt;&lt; pokemon.weight &lt;&lt; " lbs and " &lt;&lt; pokemon.height &lt;&lt; " inches.\n";
        &lt;&lt; pokemon.name &lt;&lt; "'s gender is " &lt;&lt; pokemon.gender &lt;&lt; "\n";

    if (pokemon.isFinalEvolution) {
        out &lt;&lt; pokemon.name &lt;&lt; " is the final evolution in its line.\n";
    }
    ...
    return out;
}
</code></pre>

<p>Note that this also needs <code>operator&lt;&lt;</code> on all types used in <code>Pokemon</code>, e.g. <code>Gender</code> and <code>Type</code>.</p>

<h1>The database</h1>

<p>So here's my greatest pet peeve with your code. Your <code>main</code>:</p>

<pre><code>Pokemon bulbasaur("Bulbasaur", "Grass and Poison", 15.2, 28, "Male and Female", 1, false, 1);
Pokemon ivysaur("Ivysaur", "Grass and Poison", 28.7, 39, "Male and Female", 2, false, 2);
Pokemon venusaur("Venusaur", "Grass and Poison", 220.5, 79, "Male and Female", 3, true, 3);
...
</code></pre>

<p>There are two things I'm not fond of here. First of all, you only use the names "bulbasaur" or "ivysaur" once later, in <code>std::vector&lt;Pokemon&gt; pokemon</code>, so you're polluting the local namespace. Instead, fill your vector directly:</p>

<pre><code>std::vector&lt;Pokemon&gt; pokedex = { 
    Pokemon("Bulbasaur", Type::Grass | Type::Poison, 15.2, 28, Gender::Both, 1, false, 1),
    Pokemon("Ivysaur", Type::Grass | Type::Poison, 28.7, 39, Gender::Both, 2, false, 2),
    ...
};
</code></pre>

<p><strong><em>But that's not how you should do it.</em></strong> </p>

<blockquote>
  <p>So far I have 120 or so of them in there and it works PERFECTLY!</p>
</blockquote>

<p>You're entering all of them by hand. That's insane. Let's say you've messed the lbs up of Pikachu, or you want to add more Pokemon later. You will always have to edit your program and compile it. That's bad. It's error prone. And the errors are hard (compiling) to fix.</p>

<p>Instead, have all your Pokemon in an external file. You can then read from that file into your vector easily (if you write the streaming operator):</p>

<pre><code>while(pokeFile &gt;&gt; pokemon){
    pokedex.push_back(pokemon);
}
</code></pre>

<p>That's all that's necessary, apart from getting the Pokemon data into the external file and writing <code>istream&amp; operator&gt;&gt;(istream&amp;, Pokemon&amp;)</code>. Instead of a <code>main</code> that gets larger with every other Pokemon generation, you only have to change your <code>Pokemon.txt</code> file. You can even translate it to other languages (e.g. "Bisasam", "Bisaknosp", "Bisaflor",...), but that's a little bit far at this point.</p>

<h1>Other stuff</h1>

<p>If you don't need the index, use a range-based <code>for</code> loop instead of <code>operator[]</code>. Also, you've shadowed the variable <code>input</code> several times. Don't. Furthermore strive for smaller functions, your <code>main</code> was too large.</p>

<p>If you're using C++11, use the range-based <code>for</code> loop more often.</p>

<p>Also if you don't want to modify a variable, use <code>const</code>. Your <code>std::vector&lt;Pokemon&gt;</code> is a perfect candidate for this, since you don't want to change it afterwards.</p>

<p>Concerning <code>ostream&amp; operator&lt;&lt;(ostream&amp;,const Pokemon&amp;)</code>, we've lost the ability to print the previous/next evolution, but that's by design, since you need access on the whole Pokedex for that (and there are possibly several evoltions for a single Pokemon, looking at you, Eevee). That's something you should probably think about a little bit more. You could store the ID of the previous Pokemon instead, or use an invalid ID if it does not exist. But that's left as an exercise.</p>

<p>Last but not least, if you were to write a productive Pokedex, use libraries that enable you to use database(-like) functions, for example SQLite, and/or abstract the queries behind a class, like</p>

<pre><code>class Pokedex {
public:
    template&lt;class F&gt;
    Result find_one(F &amp;&amp; f){
        return from_it(std::find(internal_list.begin(), internal_list.end(), f));
    }
    ResultList find_all(F &amp;&amp; f){
        ResultList results;
        std::copy_if(internal_list.begin(), internal_list.end(), ...);
        return results;
    }
};
</code></pre>

<p>depending how complex your queries should be.</p>

<h1>Your "new" main</h1>

<p>So, following the remarks above, I've somewhat rewritten your <code>main</code>. The Pokemon are gone from the cage of your code, instead they roam in some other <del>Pokeball</del> file.</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;vector&gt;
#include "Pokemon.h"

typedef std::vector&lt;Pokemon&gt; Pokedex;

std::string to_pokecase(const std::string &amp; str){
    // excercise, should make "Bulbasaur" from "buLbaSAUR".
}

bool print_pokemon_by_name(const Pokedex &amp; pokedex){
    //Ask for name
    std::cout &lt;&lt; "Enter the name of the pokemon" &lt;&lt; std::endl;
    Name input_name;
    std::cin &gt;&gt; input_name;

    input_name = to_pokecase(input_name);

    for (auto &amp; thePokemon : pokedex) {
        if (input_name == thePokemon.name) {
            std::cout &lt;&lt; "The pokemon " &lt;&lt; thePokemon.name &lt;&lt; " has been found!\n" 
                      &lt;&lt; thePokemon&lt;&lt; std::endl;
            return true;
        }
    }

    std::cerr &lt;&lt; "Pokemon not found!" &lt;&lt; std::endl;
    return false;
}

bool print_pokemons_by_type(const Pokedex &amp; pokedex){
    // exercise
}

bool print_pokemon_by_number(const Pokedex &amp; pokedex){
    // exercise
}

std::vector&lt;Pokemon&gt; read_pokemons_from_file(const std::string &amp; fileName){
    // exercise
}

int main() {
    const auto pokedex = read_pokemons_from_file("Pokemon.txt");

    //Ask the user which way they would like to search
    std::cout &lt;&lt; "Welcome to the Pokedex! We have the first " &lt;&lt; pokedex.size() + 4 &lt;&lt; " pokemon indexed!" &lt;&lt; std::endl;
    std::cout &lt;&lt; "Would you like to search by name, number, or type?" &lt;&lt; std::endl;
    std::string input = "";
    std::cin &gt;&gt; input;

    //make input uppercase
    for (auto &amp; p : input) {
        p = toupper(p);
    }

    if (input == "NAME") {
        print_pokemon_by_name(pokedex);
    }
    else if (input == "TYPE") {
        print_pokemons_by_type(pokedex);
    }
    else if (input == "NUMBER") {
        print_pokemon_by_number(pokedex);    
    } else {
        // handle invalid input
    }    
    return 0;
}
</code></pre>

<p>As you can see, the new <code>main</code> is much smaller. It can be read on a screen without scrolling at all. All functionalities that differ have been extracted into other functions, which themselves are rather small again.</p>

<p>There are several things that can be further refactored and rewritten, but that's left as an exercise.</p>

<h1>Addendum: The specification</h1>

<p>Thanks to all comments on this review and all the Pokemon specification I've missed in several revisions of this review, I guess this is a good place to add two things. </p>

<p>First of all, before you implement your class, ask yourself more questions: Can you easily test for (pokemon) types? Do you often test for them? Should that be in its own function? Do you test for names? Do you need to normalize names? More than once? Do the Pokemon's types need to be ordered?</p>

<p>Secondly, reflect the answers to those questions in your code, or, if the answer was negative, in your comments/documentation. Also, try to use higher-level code. The main above is already pretty high-level, with the effect that I can change <code>Pokedex</code> and <code>Pokemon</code> completely and never need to touch <code>main</code> at all.</p>

<p>Either way, good luck catching 'em all! May your Pokedex be complete.</p>
    </div>