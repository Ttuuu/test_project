<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The code should work fine once the issues mentioned by @alexwlchan are fixed, I added those changes and code looks like this:</p>

<pre><code>def peakfinder(arr):
    if len(arr) == 0: # If list is 0, there is no peak.
        return None

    if len(arr) == 1: # If list has been reduced to 1 element, it's a peak.
        return arr[0]

    if len(arr) == 2:
        if arr[1]&gt;= arr[0]:
            return arr[1]
        else:
            return arr[0]

    mid = len(arr) // 2

    left  = mid - 1
    right = mid + 1

    if arr[left] &lt;= arr[mid] &gt;= arr[right]:
        return arr[mid] # Base case. This is a peak.

    if arr[mid] &lt; arr[left]: # Look to left side of array for peak.
        return peakfinder(arr[:mid])

    if arr[mid] &lt; arr[right]: # Look to right side of array for peak.
        return peakfinder(arr[mid+1:])
</code></pre>

<p>Now as the question mentioned how it can be improved, I went further and modified it to not use recursion to improve on time. The non-recursive code is:</p>

<pre><code> def peakfinder_norecursive(arr):
    if len(arr) == 0: # If list is 0, there is no peak.
        return None

    elif len(arr) == 1: # If list has been reduced to 1 element, it's a peak.
        return arr[0]

    else:
        left  = 0
        right = len(arr)-1
        while(right-left &gt;1):
            mid = left + (right - left)//2

            if arr[mid-1] &lt;= arr[mid] &gt;= arr[mid+1]:
                return arr[mid] # Base case. This is a peak.

            elif arr[mid] &lt; arr[mid-1]: # Look to left side of array for peak.
                right = mid-1

            elif arr[mid] &lt; arr[mid+1]: # Look to right side of array for peak.
                left = mid+1
        if arr[right]&gt;= arr[left]:
            return arr[right]
        else:
            return arr[left]
</code></pre>

<p>To show the difference took a list with large n (such that last element is the peak, worst case scenario) and executed both the solutions, here are the timings-</p>

<pre><code>if __name__ == "__main__":

    A = []
    for i in range(1,9999999):
        A.append(i)

    start = time.time()
    peak = peakfinder(A)
    end = time.time()
    print(end - start)
    print("Recursive Method : Peak : {}\n".format(peak))

    start = time.time()
    peak = peakfinder_norecursive(A)
    end = time.time()
    print(end - start)
    print("Non Recursive Method: Peak : {}\n".format(peak))

Output: 
0.0650475025177002
Recursive Method : Peak : 9999998

0.0
Non Recursive Method: Peak : 9999998
</code></pre>
    </div>