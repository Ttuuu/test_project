<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You've a nice little calculator.  The other answers have made excellent points.  Here are some more to make it even better.  ;-)</p>

<hr>

<h1>Calculator</h1>

<h2>Constructor</h2>

<p>You are initializing 3 members in your constructor, and a fourth member <code>error</code> using a declaration initialization.  You could do all 4 initializations at the declaration, in which case your constructor would be empty ... and could be omitted entirely.</p>

<pre><code>private Operation prevOp = Operation.NONE;
private BigDecimal prevNumber = null;
private String currNumberStr = "";     // or new String()
private boolean error = false;
</code></pre>

<h2>currNumberStr</h2>

<p>You are using <code>String</code> concatenation to build up a string of characters representing a number.  It most cases, <code>String</code> concatenation should be avoided in favour of using a <a href="https://docs.oracle.com/javase/10/docs/api/java/lang/StringBuilder.html" rel="nofollow noreferrer"><code>StringBuilder</code></a>, which is more efficient.  Given there will be hundreds of milliseconds between adding characters to the <code>currNumberStr</code>, this is probably a pointless optimization.  But it might be worth the practice.</p>

<pre><code>final StringBuilder currNumberStr = new StringBuilder(MAX_DIGITS);
</code></pre>

<p>Notice that we can reuse the <code>StringBuilder</code> over and over, so it can be made <code>final</code>.  Use <code>currNumberStr.append(digit)</code> to add characters to the buffer, <code>currNumberStr.setLength(0)</code> to clear it, and <code>currNumberStr.toString()</code> to convert it into a <code>String</code> for parsing or display.</p>

<h2>interface UnaryOp</h2>

<p>You can remove this interface, and replace uses of it with <a href="https://docs.oracle.com/javase/10/docs/api/java/util/function/UnaryOperator.html" rel="nofollow noreferrer"><code>UnaryOperator&lt;BigDecimal&gt;</code></a>.</p>

<hr>

<h1>Frame</h1>

<h2>ButtonColorListener</h2>

<p>You create 19 <code>ButtonColorListener</code> objects, which is about 18 too many.  They all do the same thing; change the button's background colour.  The only difference is which button they change the background colour of...</p>

<p><a href="https://docs.oracle.com/javase/10/docs/api/java/util/EventObject.html#getSource()" rel="nofollow noreferrer"><code>MouseEvent.getSource()</code></a> will return the <code>Object</code> the mouse event occurs on ... which will be the button that was pressed/released.</p>

<pre><code>class ButtonColorListener extends MouseAdapter {
  public static final Color DOWN_COLOR = Color.GRAY;
  public static final Color UP_COLOR = Color.DARK_GRAY;

  @Override public void mousePressed(MouseEvent e) {
    JButton button = (JButton) e.getSource();
    button.setBackground(DOWN_COLOR);
  }

  @Override public void mouseReleased(MouseEvent e) {
    JButton button = (JButton) e.getSource();
    button.setBackground(UP_COLOR);
  }
}
</code></pre>

<p>With this change, you only need to create one <code>ButtonColorListener</code>, and add it to all of the buttons, instead of creating one per button.</p>

<pre><code>private final static ButtonColorListener btnClrListener = new ButtonColorListener();

private void addButton(int x, int y, int w, int h, String name, CalcAction action) {
    // ...
    button.addMouseListener(btnClrListener);
    // ...
}
</code></pre>

<h2>addButton</h2>

<p>This method gives you way too much flexibility.  You are creating buttons, and adding them to the <code>contentPane()</code> in order, left to right, top to bottom.  Let the computer do the counting for you!</p>

<pre><code>private final static int MAX_WIDTH = 4;
private int row = 1, column = 0;

private void addButton(String name, CalcAction action) {
    addButton(name, action, 1);
}    

private void addButton(String name, CalcAction action, int width) {
   // ...
   c.gridx = column;
   c.gridy = row;
   c.gridwidth = width;

   column += width;
   if (column &gt;= MAX_WIDTH) {
      column = 0;
      row++;
   }
   // ...
}
</code></pre>

<h2>Creating the Button Grid</h2>

<p>With the above <code>addButton</code> method keeping track of the locations, you just need to add the buttons in the correct order (which you were doing anyway).</p>

<pre><code>addButton("C", calc::clear);   // We can use method references for these first few!
addButton("±", calc::negate);
addButton("√", calc::root);
addButton("÷", () -&gt; calc.applyOp(Calculator.Operation.DIV));
addButton("7", () -&gt; calc.appendDigit('7'));
// ...
</code></pre>

<p>Since some of the methods take no arguments, we can simply use a method reference.  And as mentioned in another answer, <code>CalcAction</code> can be replaced by <code>Runnable</code>.</p>

<h2>main</h2>

<p>Swing Application must do UI interactions on Swing's Event Dispatching Thread (EDT).  Creating the UI can be an exception, since the UI is not shown until <code>frame.setVisible(true);</code> is called, but this is risky behaviour.  It is better to simply switch to the EDT to create and display the UI.</p>

<pre><code>public static void main(String[] args) {
    SwingUtilities.invokeLater(Frame::new);
}
</code></pre>

<p>That may feel even stranger, but it is better.</p>
    </div>