<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I haven't done a detailed review of Haskell code in a while, so I suspect my advice could structured better. Anyway, here's a mix of general and specific advice:</p>

<ol>
<li>"Functional core, imperative shell": Move more code out of <code>main</code> (and out of <code>IO</code>) into separate (pure) functions. The type signatures on the extracted functions will help with readability.</li>
<li>Use types to model your domain. Haskell makes it easy to define expressive types, you should make use of that feature! :) For example, you could define <code>type AdjacencyMatrix = Matrix Float</code>.</li>
<li>The <code>Int &lt;-&gt; Integer</code> conversions look unnecessary to me. Just stick to <code>Int</code> since the <code>Data.Matrix</code> API forces you to use it anyway.</li>
<li>In general, it's a good idea to use as few partial functions as possible. (I see <code>(!!)</code>, <code>(Data.Vector.!)</code>, <code>read</code>, <code>getRow</code> and <code>fromInteger</code>) Since this is a script, using <code>read</code> for parsing is acceptable. Instead of indexing with <code>(Data.Vector.!)</code> and <code>getRow</code>, I'd try to map, fold or zip instead, which usually are total operations. Instead of extracting the command line arguments with (<code>!!</code>), you could write <code>[filename, threshold] &lt;- getArgs</code>.</li>
<li><code>amatFromDmat</code> smells functorial to me, mostly because the input and output matrices have the same dimensions. Maybe try to implement it in terms of <code>fmap</code>. (Hint: If the input is a true distance matrix, the elements on the diagonal are the only ones that are <code>0</code>.)</li>
<li>Use qualified imports or import lists to make it more clear, where functions are coming from. (I personally prefer qualified imports)</li>
<li><code>Tree</code> has a <code>Foldable</code> instance and <code>length</code> is a method of <code>Foldable</code>. That means you can simply use <code>length</code> to get the size of the connected components. You don't need <code>flatten</code>.</li>
</ol>
    </div>