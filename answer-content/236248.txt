<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Stringly typed values. <code>DoSimpleChecks</code> can/should be typed as <code>Boolean</code> and renamed. Presently it's checking against a string value "Not Ready". It's also activating cells which means it's doing more than one thing. Rather than checking against a string have your function return a True/False value. Within that member you have a comment <em>'//Check if data has been pasted</em> which makes a fine name of <code>HasDataBeenPasted</code>. Refactor your code so that it does one thing and one thing only, checking whether data has been pasted.</p>

<pre><code>Private Function HasDataBeenPasted() As Boolean
    HasDataBeenPasted = Not (shData.Range("A2").Value2 = vbNullString Or shData.Range("B2").Value2 = vbNullString)
End Function
</code></pre>

<p>The call site where that function invoked is updated to convert the implicit activation to an explicit activation that you can see. Now whoever maintains this code, be it your future-self or an axe wielding maniac that gets enraged at implicit things being done, won't have a surprise when they come back to this code months from now after forgetting there was an activation.</p>

<pre><code>Private Sub StartTrackingButton_Click()
    If Not HasDataBeenPasted Then
        shData.Activate
        shData.Range("A2").Select
        MsgBox "Please paste in the following data:" &amp; vbNewLine &amp; vbNewLine &amp; "TRACKING number into A2" &amp; vbNewLine &amp; "CARTON number into B2", vbInformation, "Required Data"
    End If

    ProgressIndicatorForm.Show
End Sub
</code></pre>

<hr>

<p>You have 3 conditional formats when you need only one. Comparing the target cell to each possible value and wrapping that in with the OR function does this. <code>=OR(C2="Picked Up",C2="In transit",C2="Delivered")</code> produces a True value for each of the values. Building up the logic to check these values leads to the code below. Now if you need to add or remove a value you can do so easily.</p>

<pre><code>Private Sub SetConditionalFormattingStatusColumnofStatusSheet(ByVal interiorColor As Long)
    Dim targetArea As Range
    Set targetArea = shStatus.Range("tbl_FedEx[Status]")

    Dim prefix As String
    prefix = targetArea.Cells(1, 1).Address(False, False) &amp; "="""
    Dim suffix As String
    suffix = ""","
    Dim comparisonsToStringValues As String
    comparisonsToStringValues = Join(Array("Picked Up", "In transit", "Delivered"), suffix &amp; prefix)

    Dim builtFormula As String
    builtFormula = "=OR(" &amp; prefix &amp; comparisonsToStringValues &amp; """)"

    With targetArea.FormatConditions.Add(XlFormatConditionType.xlExpression, Formula1:=builtFormula, TextOperator:=XlContainsOperator.xlContains)
        .Interior.PatternColorIndex = xlColorIndexNone
        .Interior.Color = interiorColor
    End With
End Sub
</code></pre>

<p>You also now supply the color. You had the color defined in 2 locations. Keep your code DRY as in Don't Repeat Yourself (DRY). As <code>FilterResultsOfStatusSheet</code> was called by the same procedure <code>TopMost</code> I moved the declaration of the Granny color const there and supplied it as an argument.</p>

<pre><code>Public Sub TopMost()
    ...
    Const COLOR_GRANNY_APPLE As Long = 13561798  'Same as the Style "Good" fill color
    Call SetConditionalFormattingStatusColumnofStatusSheet(COLOR_GRANNY_APPLE)
    ....
    Call FilterResultsOfStatusSheet(COLOR_GRANNY_APPLE, False)
    ....
</code></pre>

<p>The signature of <code>FilterResultsOfStatusSheet</code> has changed too. Comments make it messy to enable/disable functionality, I prefer refactoring to have an argument to toggle it on or off. Also note that instead of having <code>shStatus.ListObjects("tbl_FedEx").Range</code> twice it's been consolidated to a single variable which is used. Another example of keeping your code DRY.</p>

<pre><code>Private Sub FilterResultsOfStatusSheet(ByVal interiorColor As Long, ByVal filterOutBlanks As Boolean)
    Dim tableArea As Range
    Set tableArea = shStatus.ListObjects("tbl_FedEx").Range

    If filterOutBlanks Then
        tableArea.AutoFilter Field:=1, Criteria1:="&lt;&gt;"
    End If

    tableArea.AutoFilter Field:=3, Criteria1:=interiorColor, Operator:=xlFilterCellColor
End Sub
</code></pre>

<hr>

<p>There is no need to format column widths individually in <code>FormatColumnWidthsOfStatusSheet</code>. Change them all at once with <code>.Columns("A:C").ColumnWidth = 26</code> instead.</p>
    </div>