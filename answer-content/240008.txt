<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In <code>get_option</code>, you have a <code>while</code> loop:</p>

<pre><code>while True:
    option = input(prompt)
    if not option:
        print("Please enter an option.")
        continue

    if option not in options:
        valid_options = ", ".join(options)
        print(f"Invalid option. Valid options: {valid_options}")
        continue

    return option
</code></pre>

<p>I think this would make more sense by making use of <code>elif</code> and <code>else</code> and dropping the <code>continue</code>s:</p>

<pre><code>while True:
    option = input(prompt)
    if not option:
        print("Please enter an option.")

    elif option not in options:
        valid_options = ", ".join(options)
        print(f"Invalid option. Valid options: {valid_options}")

    else:
        return option
</code></pre>

<p>And then similarly in <code>get_password</code>.</p>

<hr>

<p>And then another similar case in <code>get_name</code>:</p>

<pre><code>while True:
    name = input(prompt)
    if not name:
        print(
            "Name cannot be empty. We suggest you insert a "
            "descriptive name for your password."
        )
        continue

    return name
</code></pre>

<p>I think it would be much simpler to return at the top, instead of returning at the bottom and trying to divert execution away from the <code>return</code> using <code>continue</code>:</p>

<pre><code>while True:
    name = input(prompt)
    if name:
        return name

    else:
        print("Name cannot be empty. We suggest you insert a "
              "descriptive name for your password.")
</code></pre>

<p>I also recommend tightening up the <code>print</code> as I have there. There's a point where spreading things out and making your function longer begins to hurt readability.</p>

<p>A fun party-trick suggestion though: that can actually be made even more succinct if you're using Python3.8+:</p>

<pre><code>while True:
    if name := input(prompt):
        return name
    . . .
</code></pre>

<p><code>:=</code> is an <a href="https://www.python.org/dev/peps/pep-0572/" rel="nofollow noreferrer">assignment expression</a>.</p>

<hr>

<p>Your menu dispatch in <code>main</code> should be using <code>elif</code>s:</p>

<pre><code>if what_next == "1":
        list_all_passwords()

elif what_next == "2":
    name = get_name("New password name (unique!): ")
    value = get_password("New password: ")

. . .
</code></pre>

<p>You know that those checks will always be exclusive of each other (only one can ever be true). If <code>"what_next == "1"</code> is true, you're still doing all the rest of the checks when<code>list_all_passwords</code> returns, which is wasteful. It'll make a negligible here, but avoiding unnecessary overhead is a good habit to get into.</p>

<hr>

<p>There's no need to include <code>-&gt; None</code>. When type hinting  <code>__init__</code>, since it <em>must</em> return <code>None</code>.</p>

<hr>

<p><code>get_password_by_name</code> could be cleaned up a bit too. You have:</p>

<pre><code>with SaferSession() as session:
    try:
        password = session.query(Password)
        password = password.filter_by(name=name).first().value
    except AttributeError:
        password = None
        print(f"{name} could not be found!")
    return password
</code></pre>

<p>I'm not a fan of reassigning variable in most cases. If you want to debug and see intermittent results, you need to catch it before the second reassignment happens. I don't know what <code>session.query(Password)</code> returns, but is it itself a <code>password</code>? I think I'd give it a different name. This can be simplified though to remove that need:</p>

<pre><code>with SaferSession() as session:
    try:
        result = session.query(Password)
        return result.filter_by(name=name).first().value

    except AttributeError:
        print(f"{name} could not be found!")
        return None
</code></pre>
    </div>