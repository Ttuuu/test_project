<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You are repeatedly opening the DB connection in a loop:</p>
<pre><code>For index As Integer = 0 To v.dgv.RowCount - 1
    Using conn As New SqlConnection(myconnection)
        Dim commandText As String = "select productnmbr,descr from database where productnmbr = @prodnmbr"
        Using command As SqlCommand = New SqlCommand(commandText, conn)
            conn.Open()
            With command.Parameters
                .AddWithValue("@prodnmbr", v.dgv.Rows(index).Cells(0).Value.ToString)
            End With
            ...
        End Using
    End Using
Next
</code></pre>
<p>There is overhead involved when opening a connection. You could just open it once,  leave it open, do your stuff, then dispose of it:</p>
<pre><code>Using conn As New SqlConnection(myconnection)
    For index As Integer = 0 To v.dgv.RowCount - 1
        ' do something
    Next
End Using
</code></pre>
<p>Just moving code a bit should improve performance.</p>
<p>Something else: no need to read values from the DGV. This could even freeze your UI. Read the rows from the dataset instead, that is the one table it contains (match).</p>
<p>I see that you are also adding rows to the DGV but the better way would be to feed the underlying source, that is your datatable, possibly a bindingsource. Then let the DGV refresh itself.</p>
<p>I am not familiar with your SQL table but if the product table is not too large, I might be tempted to load it to a second datatable, then compare both datatable with LINQ for example (you will find code samples on Stack Overflow). The benefit is that all your data will be preloaded to memory and comparison should be quite fast if you're not doing it row by row. It depends on how much data there is.</p>
<p>Or do it differently: load your Excel file to a temporary table in your SQL server. Then compare the tables by doing a join, a stored procedure if you like.</p>
    </div>