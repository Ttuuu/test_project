<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>Stack* helper (char val, int x, int y)
  {
    Stack* node = (Stack*)malloc(sizeof(Stack));
    node-&gt;v = val;
    node-&gt;x = x;
    node-&gt;y = y;
    return node;
  }
</code></pre>
</blockquote>

<p>That's not a very descriptive name - something in keeping with the existing scheme might be <code>stack_node_create()</code>.</p>

<p>Since <code>malloc()</code> returns a <code>void*</code>, there's no need to scare readers by inserting a cast operator.</p>

<p>We must check that <code>malloc()</code> didn't give us a null pointer before we dereference it.</p>

<p>Fixing those issues gives us:</p>

<pre><code>#include &lt;stdlib.h&gt;

/**
 * Return a newly-created node, or a null pointer on failure.
 */
Stack *stack_node_create(char val, int x, int y)
{
    Stack *const node = malloc(sizeof *node);
    if (!node) { return node; }
    node-&gt;v = val;
    node-&gt;x = x;
    node-&gt;y = y;
    return node;
}
</code></pre>

<p>When we call this, we do need to remember that it can return a null pointer, and handle that accordingly.</p>
    </div>