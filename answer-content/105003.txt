<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You don't perform any parameter validation, so look what happens when I do these:</p>

<pre><code>&gt;&gt;&gt; f(1)
2
&gt;&gt;&gt; f(0)
2
&gt;&gt;&gt; f(-12312321)
2
</code></pre>

<p>The simple way to avoid this is </p>

<pre><code>def max_factor(num):
    if num &lt; 2:
        raise ValueError("Only numbers greater than 1 are allowed.")
</code></pre>

<p>Alternatively you could handle each case if they're acceptable inputs to the algorithm (I'm not sure of the maths here). 0 and 1 are easy since they're their own factors if they're considered valid:</p>

<pre><code>if num in (1, 0):
    return num
</code></pre>

<p>For negative numbers, you need <code>num</code> to be positive so that your algorithm works. You can turn it positive using <code>abs</code>. Before that you can just set a boolean that checks for a negative parameter then at the end you can check this value to see whether or not to return a negative number.</p>

<pre><code>negative = num &lt; 0
num = abs(num)

...

if (num &gt; 1):
    return num if not negative else -num
return factor if not negative else -factor
</code></pre>

<p>Whatever you decide is valid input should be noted in the docstring so that people don't have to just try passing parameters to see what's permissable.</p>

<pre><code>def max_factor(num):
    """Find the maximum prime factor for num &gt; 1."""
</code></pre>

<p>I also think that this is a complicated algorithm for someone not already familiar with it. I had to read the wikipedia page on max prime factor to realise how this works. A couple comments on the method behind it may be hard to manage, but referencing that it's a known algorithm for people to look up would at least clue them in that it's Googleable and not something you invented.</p>
    </div>