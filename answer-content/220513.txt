<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I didn't go over all the code. Here are my comments so far:</p>

<h2>Stack</h2>

<ol>
<li><p>The class contains a <code>Scanner</code> for no apparent reason.</p></li>
<li><p>While it is <em>your</em> implementation, which does not implement the interface from the JDK, you should be aware that in the "standard" contract for Stack, (in Java as in other programming languages) the <code>pop()</code> method returns the removed item. (making <code>peek</code>ing sometimes redundant)</p></li>
<li><p>any reason why your Stack isn't generic? it's good practice...</p></li>
</ol>

<h2>PostfixCalculator</h2>

<ol>
<li><p>This class violates the <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" rel="noreferrer">single responsibility principle</a>. besides doing what it is supposed to do (all the arithmetic calculation), It also receives input from the user, parses it and outputs the result. so your calculator cannot be used in a web app or mobile device because it can only receive input and emit output from/to the console. Your calculator should receive and return a <code>String</code> (or possible return an <code>int</code> or <code>float</code>) and let the caller worry about how to get the input and where to display the output. </p></li>
<li><p>The constructor - it does everything. in fact, while there are other public methods, the constructor is the only interface that is used by whoever uses this Calculator, as can be seen by Main. this design poses three problems: 1) it's counter-intuitive.  2) there is no way to reuse the same instance to do multiple calculations and 3) yet another violation of the single responsibility principle. a constructor should only set up the state (instance variables) of the instance. any operation or action should be done by different methods.</p></li>
<li><p>avoid literals. the parenthesis and operators should be defined once. either as <code>public static final</code> constants or better yet, as enum. putting then in an enum has the advantage that you can assign "properties" to the values, like precedence.</p></li>
</ol>
    </div>