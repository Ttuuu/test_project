<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It is indeed not so object oriented, but there's something to work with.</p>

<p>First things first : <code>UncassifiedText</code> -&gt; <code>UnclassifiedText</code> right?</p>

<p>If we look at all your classifiers, we can see pretty quickly that they are <strong>all</strong> the same except for the <code>key</code> and the <code>label</code>. There's another difference where only the <code>DayClassifier</code> actually uses the variables <code>key</code> and <code>label</code>.</p>

<p>Instead of having all these duplicated, why not just use : </p>

<pre><code>class Classifier():
  def __init__(self, key, label):
    self.index = createIndex(wordsByCategory)
    self._key = key
    self._label = label

  def classify(self, paragraph):
    count = 0
    matched_words = set()
    for word in paragraph.words():
      if self._key in self.index[word.lower()]:
        matched_words.add(word)
        count += 1 
    if count &gt; 0:
      return WeightedClassifiedText(
        paragraph.text(), count, self._label, list(matched_words))
    else:
      return UncassifiedText(paragraph.text())  
</code></pre>

<p>Then : </p>

<pre><code>classifiers = [
    Classifier("day", "Day"),
    Classifier("mood", "Mood"),
    ....
]
</code></pre>

<p>With only this change, you've removed all the duplication in your code, that's already pretty damn good OOP. But we can do a little better. </p>

<p>One thing that strikes me as not very OOP is the global usage of <code>wordsByCategory</code> and the whole mechanic behind it, we could make if much simpler. As a matter of fact <code>createIndex</code> is bloated. You create an index for every word in the dictionary, but your classifier only uses some of them. You could make this much simpler with something like this :</p>

<pre><code>class ClassifierV2():
  def __init__(self, key, label, words):
    self.words = words
    self._key = key
    self._label = label

  def classify(self, paragraph):
    count = 0
    matched_words = set()
    for word in paragraph.words():
      # Notice the difference here, we don't need to track if we have the right category
      # it's the only one possible.
      if word in self.words:
        matched_words.add(word)
        count += 1 
    if count &gt; 0:
      return WeightedClassifiedText(
        paragraph.text(), count, self._label, list(matched_words))
    else:
      return UncassifiedText(paragraph.text())  

ClassifierV2("day", "Day", ['sunday', 'monday', 'Friday'])
</code></pre>

<p>Here's a minor thing, if your label is always the key with a capitalized first letter, you should consider doing this instead in the constructor : </p>

<pre><code>class ClassifierV2():
  def __init__(self, label, words):
    self.words = words
    self._key = label.lower()
    self._label = label

ClassifierV2("Day", ['sunday', 'monday', 'Friday'])
</code></pre>

<p>The goal would be that, if you want to add a new classifier, you wouldn't need to touch your code back. How could we achieve this? I think a classifiers configuration file is in order. Configuration files can seem scary at first, but we'll keep it <em>very</em> simple : </p>

<p><strong>classifiers.json</strong> (I'm being dead honest I'm not sure what's the proper syntax for .json files I never hand write them lol, but that's got to be pretty close to it)</p>

<pre><code>{
  'time': ['monday', 'noon', 'morning'],
  'location': ['Here', 'Near', 'City', 'London', 'desk', 'office', 'home'],
  'mood': ['Happy', 'Excited', 'smiling', 'smiled', 'sick'],
  'day': ['sunday', 'monday', 'Friday']
}
</code></pre>

<p>Once we have this, if you want to add a new classifier, you add a new line to your json file, anyone can do this. You can then load your <code>wordDictionary</code> with the <code>json</code> package. And feed each <code>key:value</code> pair to a new instance of the <code>ClassifierV2</code>.</p>
    </div>