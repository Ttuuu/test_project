<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is a really good question -- starred it! I am not very experienced with RxJs, but I believe your code around <code>BehaviorSubject</code> and <code>Observable</code> is as concise as possible.</p>

<p><code>BehaviourSubject</code> itself is "subscribable" (just like an <code>Observable</code>) but it's a really bad practice to expose it directly to the consumer, i.e. your separation of <code>users$</code> and <code>usersSource</code> is a right thing to do. Exposing <code>Observable</code> is okay because it's designed to be read-only.</p>

<p><code>usersSource.getValue()</code> is inevitable in your code, unless you decide to keep the usersSource state as a local field, but IMO it does not do any good in this scenario. Having state to be stored as a part of the <code>BehaviorSubject</code> is handy.</p>

<hr>

<p>There are minor style things that could be improved in the code, but that's unrelated to RxJs, so I'll not comment on that.</p>

<hr>

<h1>Update 1</h1>

<p>Just a few months ago I was not aware of <code>.startsWith()</code> which seems to be an answer to a part of your question:</p>

<pre><code>const neverButStartsWithZero = Rx.Observable
                                .never()
                                .startWith(0);
// Emits 0
const subscription1 = neverButStartsWithZero
                        .subscribe(value =&gt; console.log('subscription1:', value));

const threeEventsWithExtraZero = Rx.Observable
                                .of(1, 2, 3)
                                .startWith(0);
// Emits 0, 1, 2, 3
const subscription2 = threeEventsWithExtraZero
                        .subscribe(value =&gt; console.log('subscription2:', value));
</code></pre>
    </div>