<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <ol>
  <li>the need of clone, because into_iter() is not allowed</li>
  </ol>
</blockquote>

<p>Well, into_iter() is allowed, and you can just use that and then you don't need clone.</p>

<blockquote>
  <ol>
  <li>the second let a = a?; because otherwise the compiler could not infer the type.</li>
  </ol>
</blockquote>

<p>Yeah, Rust doesn't handle inferring the error type when using ? very nicely. </p>

<p>The best strategy I've found so far is to move these things into reusable generic functions. For example:</p>

<pre><code>fn map_hash_values&lt;K: std::cmp::Eq + std::hash::Hash, V1, V2, E&gt;(
    data: HashMap&lt;K, V1&gt;,
    f: impl Fn(V1) -&gt; Result&lt;V2, E&gt;,
) -&gt; Result&lt;HashMap&lt;K, V2&gt;, E&gt; {
    data.into_iter().map(|(k, v)| Ok((k, f(v)?))).collect()
}

fn convert(raw_data: RawData) -&gt; Result&lt;EncodedData, String&gt; {
    Ok(EncodedData {
        a: map_hash_values(raw_data.a, parse)?,
        b: map_hash_values(raw_data.b, parse)?,
    })
}
</code></pre>
    </div>