<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The time complexity/scalability of your method is approximately \$O(n^3)\$ because:</p>

<ol>
<li><p>your code performs intersection analysis multiple times (3 times):</p>

<ol>
<li><code>both.retainAll(b);</code></li>
<li><code>onlyA.removeAll(both);</code></li>
<li><code>onlyB.removeAll(both);</code></li>
</ol></li>
<li><p>Each of these 3 operations is an \$O(n^3)\$ operation:</p>

<ol>
<li>scan the members in one set is \$O(n)\$ (where <code>n</code> is the size of the first set)</li>
<li>with that member, scan the other set is \$O(n)\$ (where <code>n</code> is the size of the secomd set)</li>
<li>remove the member if it matches which is  \$O(n)\$ (because it is an ArrayList, and removing a member means shifting all members after the removed item by one).</li>
</ol></li>
<li><p>For small data sets, this is a viable option, but, as the <code>n</code> sizes get larger (beyond about 10), the scalability drops off very quickly.</p></li>
</ol>

<p>The thing with ArrayList is that the add operation is  \$O(1)\$. A HashSet has a time complexity for the 'contains' method of  \$O(1)\$</p>

<p>Your code can be rearranged to use more convenient data structures that help significantly:</p>

<ul>
<li>only add to the list (don't remove)</li>
<li>use a Set for the lookups.</li>
</ul>

<p>This costs a bit to set up the Set, but the cost is recouped quickly when the data sets become even modestly big....</p>

<pre><code>private static final boolean areSame(Object a, Object b) {
    // a == b covers case when both are null too
    return (a == b) || (a != null &amp;&amp; a.equals(b));
}

public static final &lt;T&gt; FieldGroupSplit&lt;T&gt; splitHash(final FieldGroup&lt;T&gt; a, final FieldGroup&lt;T&gt; b) {

    if (a == b || a.isEmpty() || b.isEmpty()) {
        return null;
    }

    final boolean aissmall = a.size() &lt;= b.size();

    final FieldGroup&lt;T&gt; wsml = aissmall ? a : b;
    final Set&lt;T&gt; wbig = new HashSet&lt;&gt;(aissmall ? b : a);

    final Set&lt;T&gt; both = new HashSet&lt;&gt;(wsml.size());

    final FieldGroup&lt;T&gt; aonly = new FieldGroup&lt;&gt;(a.size());
    final FieldGroup&lt;T&gt; bonly = new FieldGroup&lt;&gt;(b.size());

    final FieldGroup&lt;T&gt; smlonly = aissmall ? aonly : bonly;
    final FieldGroup&lt;T&gt; bigonly = aissmall ? bonly : aonly;

    for (final T val : wsml) {
        if (wbig.contains(val)) {
            both.add(val);
        } else {
            smlonly.add(val);
        }
    }

    if (both.isEmpty()) {
        return null;
    }

    for (final T val : wbig) {
        if (!both.contains(val)) {
            bigonly.add(val);
        }
    }

    return new FieldGroupSplit&lt;&gt;(aonly, aonly.isEmpty() ? a : new FieldGroup&lt;T&gt;(both), bonly);

}
</code></pre>

<p>So, the above code uses scalable structures to do the algorithm, but incurs the setup cost for the Set.</p>

<p>After that, the scalability is about \$O(n)\$ ... </p>

<p>In my testing, for data of sizes less than about 10, your code was faster, but, after 10, my code was faster.... and, when you have sets up to 80 or more, my code was 1X faster, and up to 400, my code was 12X faster.</p>

<p>To make things work even better, I added this function (BOBW is 'best of both worlds'):</p>

<pre><code>public static final &lt;T&gt; FieldGroupSplit&lt;T&gt; splitBOBW(final FieldGroup&lt;T&gt; a, final FieldGroup&lt;T&gt; b) {
    return (a.size() + b.size() &gt; 20) ? splitHash(a, b) : split(a,b);
}
</code></pre>

<p>20 was about where it made sense to switch.... YMMV</p>
    </div>