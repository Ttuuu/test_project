<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Unnecessary code</strong></p>

<p>There is no need to make <code>size, nemb</code> even values.</p>

<pre><code>if(size % 2) size++;
if(nmemb % 2) nmemb++;
</code></pre>

<p><strong><code>__get_next_allocation(size_t size)</code> may benefit with rounding up of <code>size</code></strong></p>

<p>Say you want allocations to be a multiple of 8.</p>

<pre><code>#define ALLOC_MULTIPLE 8
int __get_next_allocation(size_t size) {
  if (size % ALLOC_MULTIPLE) {
    if (size &gt; SIZE_MAX - ALLOC_MULTIPLE) {
      return -1;
    }
    size += ALLOC_MULTIPLE - (size % ALLOC_MULTIPLE); 
  }
  ...
</code></pre>

<p><strong><code>calloc()</code> does not detect overflow</strong></p>

<pre><code>if (nmemb &gt; 0 &amp;&amp; SIZE_MAX/nmemb &gt; size) {
  return NULL;  // allocation too big.
} 
// Now safe to multiply.
size *= nmemb;
</code></pre>

<p><strong>Non compliant math</strong></p>

<p>In C, adding to a <code>void *</code> is UB.  May be OK in Posix.</p>

<pre><code>// (void *)tmp_alloc + sizeof(*tmp_alloc);
(char *)tmp_alloc + sizeof(*tmp_alloc);
</code></pre>

<p>Note: <code>ENOMEM</code> is not ISO C.</p>

<p><strong>Non compliant alignment</strong></p>

<p>The value returned from <code>*alloc()</code> is expected to be aligned for all types.  By adding <code>sizeof(*__mallchunk)</code>, coding may lose this vital property - thus UB.  Various ways to handle this, yet code needs to insure <code>__mallchunk-&gt;start</code> has an aligned value.  </p>

<blockquote>
  <p>The pointer returned if the allocation succeeds is suitably aligned so that it may be assigned to a pointer to any type of object with a fundamental alignment requirement and then used to access such an object or an array of such objects in the space allocated ยง7.22.3 1.</p>
</blockquote>
    </div>