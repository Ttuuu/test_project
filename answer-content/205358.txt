<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think this solution is way too complex because it requires abstract classes and inheriting from them. This is a lot to do and the simple test case does not justify this effort. Also creating instances of the builder, which is the <em>arrange</em> part could be complex too, so I doubt it's possible to hide this step (unless you really have some standarized procedure for it).</p>

<p>Instead I suggest creating a simple extension for the <code>Assert.That</code> property. You pass it an instance of the builder and it does the rest.</p>

<pre><code>internal static class AssertExtensions
{
    public static void DoesNotAllowNullArgument&lt;TInput, TOutput&gt;(this Assert assert, IBuilder&lt;TInput, TOutput&gt; builder) where TInput : class
    {
        Assert.ThrowsException&lt;ArgumentNullException&gt;(() =&gt; builder.Build(default));
    }
}
</code></pre>

<p>The <em>arrange</em> part is left to the user but even for this, I would rather create a factory class than using inheritance. What if you need/want to standardize other test cases like the <code>Build</code> method must not return <code>null</code>. You couldn't create another base class because C# does not support multiple inheritance. You'd either need multiple derived test classes or you'd have to extend the first class. Both solutions are IMO an overkill. </p>

<p>This is how you could use that new extension:</p>

<pre><code>[TestClass]
public class MyTestClass
{
    [TestMethod]
    public void MyTestMethod()
    {
        var builder = Mock.Create&lt;IBuilder&lt;object, object&gt;&gt;();
        Mock.Arrange(builder, b =&gt; b.Build(Arg.AnyObject)).DoInstead(() =&gt; throw new ArgumentNullException());
        Assert.That.DoesNotAllowNullArgument(builder);
    }
}
</code></pre>

<p>I used <code>Telerik.JustMock</code> here to implement a fake instace of the <code>IBuilder</code>.</p>

<hr>

<p>Alternatively you can create a more geneirc test just for the <code>Build</code> method:</p>

<pre><code>public static void DoesNotAllowNullArgument&lt;TInput, TOutput&gt;(this Assert assert, Func&lt;TInput, TOutput&gt; build) where TInput : class
{
    Assert.ThrowsException&lt;ArgumentNullException&gt;(() =&gt; build(default));
}
</code></pre>

<p>and pass only the <code>Func</code> to the test:</p>

<pre><code>Assert.That.DoesNotAllowNullArgument&lt;object, object&gt;(builder.Build);
</code></pre>
    </div>