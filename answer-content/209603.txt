<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>/**
 * @param $strength
 * @param $password
 * @return bool
 */
public function is($strength, $password)
{
    $method = sprintf("is%s", ucwords($strength));
    return call_user_func([$this, $method], $password);
}
</code></pre>

<p>This is not okay.</p>

<p>You're taking user input... (or something that I assume to be user input...) and then looking for a method in your own class, and then executing it. This whilst you know or at least can reasonably assume that you know which values the user input might contain.</p>

<p>So let's nuke it.</p>

<p>If we nuke it, then we need a new implementation here.</p>

<pre><code>/**
 * @param $field
 * @param $password
 * @param Arguments $args
 * @return mixed
 */
public function validate($field, $password, Arguments $args)
{
    $type = $args-&gt;getVariables();

    if ($type &amp;&amp; $type != self::NORMAL) {
        return $this-&gt;is($type[ 0 ], $password);
    }

    return $this-&gt;isNormal($password);
}
</code></pre>

<p>Well, we can use a switch. See also the documentation here: <a href="http://php.net/manual/en/control-structures.switch.php" rel="nofollow noreferrer">http://php.net/manual/en/control-structures.switch.php</a> (I'm not familiar with PHP syntax, but you should understand the gist of the idea.)</p>

<pre><code>/**
 * @param $field
 * @param $password
 * @param Arguments $args
 * @return mixed
 */
public function validate($field, $password, Arguments $args)
{
    $type = $args-&gt;getVariables();

    if ($type &amp;&amp; $type != self::NORMAL) {
        switch ($type [ 0 ]) {
            case self::NORMAL:
                return $this-&gt;isNormal($password);
                break;
            case self::MEDIUM:
                return $this-&gt;isMedium($password);
                break;
            case self::STRONG:
                return $this-&gt;isStrong($password);
                break;
        }
    }

    return $this-&gt;isNormal($password);
}
</code></pre>

<p>Lastly, I'd say you should reorder your methods so they are ordered as "normal", "medium" and "strong" in the code as well. It reads better.</p>
    </div>