<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1><code>Interval</code> class</h1>

<ul>
<li><p>Such a simple data-holding class should be immutable, thus the fields should be private and have getter methods. </p></li>
<li><p>The static construction method <code>newInterval</code> is a bit pointless. All that it saves is a single space compared with the constructor. If you want to use such a method, it's usually custom to call it <code>of</code> and use it exclusively by making the actual constructor <code>private</code>.</p></li>
<li><p>In the <code>equals</code> method it would be good idea to compare the object references first:</p>

<pre><code>@Override
public boolean equals(Object o) {
    if (this == o) {
        return true;
    }
    if (o instanceof Interval) {
        Interval other = (Interval) o;
        return this.start == other.start &amp;&amp; this.end == other.end;
    }

    return false;
}
</code></pre></li>
<li><p>In the <code>toString</code> method, simply use string concatenation:</p>

<p><code>"(start" + start + ",end=" + end + ")"</code></p>

<p>It better readable and the compiler will make a StringBuilder out of it internally anyway.</p></li>
</ul>

<h1><code>mergeRanges</code> method</h1>

<ul>
<li><p>The method should have a signature as "wide" as possible. Since the order of the intervals isn't relevant, it would make sense to use <code>Collection</code> instead of <code>List</code> as the input and return parameters.</p></li>
<li><p>The <code>sort</code> modifies the input list, something you should avoid, since the caller may not expect it. Better would be to create a sorted copy (which you'd have to do anyway, if you use a <code>Collection</code> as an input type). For this it would make sense to use a <code>SortedSet</code> have the <code>Interval</code> class implement <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Comparable.html" rel="nofollow noreferrer"><code>Comparable</code></a>:</p></li>
</ul>

<hr>

<pre><code>public static class Interval implements Comparable&lt;Interval&gt; {

    // Requires the getters to be defined
    private static Comparator&lt;Interval&gt; NATURAL_ORDER_COMPARATOR = Comparator.comparingInt(Interval::getStart)
        .thenComparing(Interval::getEnd);


    // ...

    @Override
    public int compareTo(Housenumber other) {
      return NATURAL_ORDER_COMPARATOR.compare(this, other);
    }
}
</code></pre>

<hr>

<ul>
<li>Merging to intervals seems to be a common operation, that could be useful outside of this algorithm, so I'd remove it and place it into the <code>Interval</code> class:</li>
</ul>

<hr>

<pre><code>public Optional&lt;Interval&gt; merge(Interval other) {
  if (this.end &gt; other.start || this.start &lt; other.end) {
     return Optional.of(new Interval(Math.min(this.start, other.start)), Math.max(this.end, other.end));
  }
  return Optional.empty();
}
</code></pre>

<hr>

<p>And the loop becomes: </p>

<hr>

<pre><code>for (int i = 1; i &lt; intervals.size(); i++) {
        Interval currentInterval = intervals.get(i);

        Optional&lt;Interval&gt; newInterval = pastInterval.merge(currentInterval);
        if (newInterval.isPresent()) {
            pastInterval = newInterval.get();
        } else {
            mergedIntervals.add(pastInterval);
            pastInterval = currentInterval;
        }
    }
    mergedIntervals.add(pastInterval);
}
</code></pre>

<hr>

<p>(This is not a nice use of Optional. If you don't like it, you can have the <code>merge</code> method just as well return <code>null</code>.)</p>

<p>(Also, all code is untested).</p>
    </div>