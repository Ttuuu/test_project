<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Counting and enumerating are two different problems.  Sometimes there is no better way to count than actually enumerating all the possible values, but that is often not the case, and this is one of those cases.</p>

<p>To build an efficient algorithm, we are going to use dynamic programming.  We will build a 7 rows by 10 columns array.  Using zero-based indexing, the item in row <code>r</code> and column <code>c</code> is the number of phone numbers of <code>r + 1</code> digits that have <code>c</code> as the last digit.</p>

<p>It should be obvious that the first row of that array will be</p>

<pre><code>first_row = [0, 0, 1, 1, 1, 1, 1, 1, 1, 1]
</code></pre>

<p>and that subsequent rows can be filled out by initializing them to all zeros, and then use the adjacency graph to add the values at a given column of the previous row, to all the columns that are successors of that one in the graph.</p>

<p>Once the array is fully filled out, the sum of the last row is the total number of numbers that can be created.  Because we only care about the sum of this last row, and each row only depends on the previous one, we only need to keep two rows of the array in memory at a time.  Putting it all together into code:</p>

<pre><code>def count_paths(graph, length):
    this_row = [0] * 2 + [1] * 8
    for row in range(1, length):
        prev_row = this_row
        this_row = [0] * 10
        for prev, nexts in graph.items():
            for next_ in nexts:
                this_row[next_] += prev_row[prev]
    return sum(this_row)
</code></pre>

<p>Converting your string dictionary into its int equivalent:</p>

<pre><code>knight = {0: [4, 6], 1: [6, 8], 2: [7, 9], 3: [4, 8], 4: [3, 9, 0],
          6: [1, 7, 0], 7: [2, 6], 8: [1, 3], 9: [4, 2]}
</code></pre>

<p>you can now run the following:</p>

<pre><code>&gt;&gt;&gt; count_paths(knight, 7)
952
</code></pre>

<p>which of course returns the same result as your code, but uses a more efficient algorithm.  How much more efficient?  Well, if \$n\$ is the length of the phone number, and \$m\$ is the maximum number of possible next digits for any digit, your algorithm will have exponential behavior, \$O(m^n)\$, while the DP approach brings that down to \$O(m n)\$.</p>

<p>That is, by the way, a huge improvement.  Try e.g. to run your code to calculate the number of 100 digit-long phone numbers, and I bet you will run out of memory before it finishes, while the DP approach spits the result in a blink of the eye:</p>

<pre><code>&gt;&gt;&gt; count_paths(knight, 100)
2657396588204099682921354979006480384L
</code></pre>
    </div>