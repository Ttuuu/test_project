<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I will not repeat what has been already said in the <a href="https://codereview.stackexchange.com/a/224474/98493">other, excellent, answer</a> by <a href="https://codereview.stackexchange.com/users/164931/avazula">@avazula</a>.</p>

<p>You open a few files, but never close them. This might lead to bad things. Instead just use the <a href="https://effbot.org/zone/python-with-statement.htm" rel="nofollow noreferrer"><code>with</code></a> keyword, which takes care of closing the file, even if an exception occurs. In addition, you can just iterate over a file and it will iterate over the lines. No need for <code>readlines</code>, which reads the whole file into memory (which might not be possible).</p>

<pre><code>with open(filePath) as read_file:
    for line in read_file:
        ...
</code></pre>

<p>Python has an official style-guide, <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP8</a>, which programmers are encouraged to follow. It recommend using <code>lower_case</code> for variables and functions, not <code>camelCase</code>.</p>

<p>An important thing to think about any time you use SQL are <a href="https://www.w3schools.com/sql/sql_injection.asp" rel="nofollow noreferrer">SQL injections</a>. If there is any chance at all that a user can manipulate the content of the variables, they might be able to execute a malicious query if you are not careful. </p>

<p>The <a href="http://initd.org/psycopg/docs/usage.html" rel="nofollow noreferrer"><code>psycopg2</code> documentation</a> even has this not so subtle warning:</p>

<blockquote>
  <p><strong>Warning:</strong> Never, <strong>never</strong>, <strong>NEVER</strong> use Python string concatenation (<code>+</code>) or string
  parameters interpolation (<code>%</code>) to pass variables to a SQL query string.
  Not even at gunpoint.</p>
</blockquote>

<p>To alleviate this, you can use the second argument of <code>execute</code>, as mentioned in the documentation:</p>

<pre><code>cur_psql.execute(f"INSERT INTO {table}"
                  " (created_date, product_sku, previous_stock , current_stock)"
                  " VALUES (%s, %s, %s, %s)",
                (date_part1+ " "+ date_part2, sku, prev_stock, current_stock))
</code></pre>

<p>Here I have used an <a href="https://realpython.com/python-f-strings/" rel="nofollow noreferrer"><code>f-string</code></a> (Python 3.6+) to insert the table name (unescaped in this case). You can properly escape it using <code>sql.Identifier(table)</code>.</p>
    </div>