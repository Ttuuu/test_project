<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<p>parses a string into a command struct</p>
</blockquote>
<p>Your use of testing is very effective, and isolating the parser from the rest of the system is good. However, a parser is difficult to test completely. You could use a <a href="https://en.wikipedia.org/wiki/Comparison_of_parser_generators" rel="nofollow noreferrer">parser-generator</a> to have more confidence that your code is correct. Also, it's shorter and faster then building your own from the standard library. <a href="http://re2c.org/" rel="nofollow noreferrer">re2c</a> has a similar example to <a href="http://re2c.org/manual/manual_c.html#submatch-extraction" rel="nofollow noreferrer">parse an IPv4 address</a>; I've successfully replaced your parser with this code.</p>
<pre><code>#include &lt;assert.h&gt;
#include "../src/command.h"

/** Returns whether the command could be parsed. */
int parse_command(char *buffer, struct command *c) {
    char *YYCURSOR = buffer, *YYMARKER, *o1, *o2, *o3, *o4;
/*!stags:re2c format = 'char *@@;'; */
    assert(buffer &amp;&amp; c);
scan:
/*!re2c
    // http://re2c.org/manual/manual_c.html#submatch-extraction
    re2c:yyfill:enable  = 0;
    re2c:flags:tags     = 1;
    re2c:define:YYCTYPE = char;

    end = "\x00";
    ws = [ \t\v\f\n\r];
    string = [^ \t\v\f\n\r\x00]{1,100};

    ws* { goto scan; } // skip blank lines and whitespace

    "GET" ws+ @o1 string @o2 ws* end {
        c-&gt;command_type = GET;
        c-&gt;key = o1, *o2 = '\0';
        c-&gt;data = 0;
        return 1;
    }

    "SET" ws+ @o1 string @o2 ws+ @o3 string @o4 ws* end {
        c-&gt;command_type = SET;
        c-&gt;key = o1, *o2 = '\0';
        c-&gt;data = o3, *o4 = '\0';
        return 1;
    }

    * { return 0; }
*/
}
</code></pre>
<p>I simplified the contract, instead of returning an error code, it returns success. Use <code>re2c -o parse.c parse.c.re</code> and modify the test programme. This also gets rid of the copying to dynamic memory that should probably be freed.</p>
    </div>