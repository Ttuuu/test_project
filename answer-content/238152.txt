<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Finally tribute to </p>

<h2>When should we use recursion?</h2>

<p>In view of formal verification of an algorithm you would write an <em>invariant</em>, which is a mathematical model of your algorithm, valid for any variables and arguments, which you prove then. When your result is anyway defined as recursion, as we have it for Fibonacci or Factorial series, proof may be performed by complete induction, where the induction step is trivially the recursive definition.</p>

<p>Investigating the asymptotic complexity, i.e. with large numbers, overhead for instantiating a function many times does not carry.</p>

<p>Though, the recursion depth is crucial as in runtime environments like C++. You must not have a StackOverflow; a recursion depth of O(n) as in the initial example is not acceptable!</p>

<p>So whenever you can control the asymptotic recursion depth and runtime is for the most part in evaluation of your intermediary results, a recursive algorithm is suggested.</p>

<p>Following is an algorithm with digit-wise evaluation of Fibonacci numbers, using two integer series derived from the relationship of Binet's Formula and Hyperbolic Functions; Complexity and recursion depth is O(log(n)).</p>

<p><a href="https://i.stack.imgur.com/cQTA0.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/cQTA0.png" alt="enter image description here"></a></p>

<pre><code>#include &lt;iostream&gt;

typedef unsigned long long N;

static void FibRec(int n, N&amp; S, N&amp;C)
{
    if (n &gt;= 1)
    {
        N S1, C1;
        FibRec(n &gt;&gt; 1, S1, C1);
        if ((n &gt;&gt; 1) &amp; 1)
        {
            C = (5 * C1 * C1 + S1 * S1) &gt;&gt; 1;
        }
        else
        {
            C = (C1 * C1 + 5 * S1 * S1) &gt;&gt; 1;
        }
        S= C1 * S1;
        if (n &amp; 1)
        {
            N Cn0 = C;
            C = (C + S) &gt;&gt; 1;
            S= (5 * S+ Cn0) &gt;&gt; 1;
        }
    }
    else
    {
        S = 0;
        C = 2;
    }
}


N fibonacci(int n)
{
    N S, C;
    FibRec(n, S,C);
    return (n &amp; 1) ? C : S;
}


int main()
{
    for (int n = 0; n&lt;=93; n++)
    {
        std::cout &lt;&lt; "Fib[" &lt;&lt; n &lt;&lt; "] = " &lt;&lt; fibonacci(n) &lt;&lt; std::endl;
    }
}
</code></pre>
    </div>