<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Prologue</h2>

<blockquote>
  <p><em>I have a <code>DateTime</code> class (my own, not <code>System.DateTime</code>)</em></p>
</blockquote>

<p>You could have just pasted the code for that class. Since you are asking a question about sorting, and your <code>DateTime</code> class implements <code>IComparable</code>, its content could have been pivotal for a proper review.</p>

<h2>Parodos</h2>

<blockquote>
  <p><em>Here is a method that takes a <code>List&lt;DateTime&gt;</code> and sorts it:</em></p>
</blockquote>

<p>You have just told us your class implements <code>IComparable</code>, but you don't show us how you'd use its functionality. I would have expected to to see <code>dateTimes[i].CompareTo(dateTimes[j])</code> but instead we get <code>dateTimes[i] &lt; dateTimes[j]</code>. This means you have created an operator overload on <code>&lt;</code> and are not sharing this crucial code with us.</p>

<p>Furthermore, why would you roll out your own sorting algorithm if built-in functionality is available? As suggested in the comments by VisualMelon, you could just call <code>dateTimes.Sort();</code></p>

<h2>Exodus</h2>

<blockquote>
  <p><em>I believe using foreach loops instead of for is suitable here, but having the following variable names drives me crazy</em></p>
</blockquote>

<p>To get things even more confusing, you ask about a syntactic change to the algorithm rather than going about how to properly sort or how to correctly implement <code>IComparable</code>.</p>

<p>Finishing off, in the <code>for (dateTime1 in dateTimes)</code> approach, you cannot change <code>dateTimes[i] = dateTimes[j];</code> as it will <code>throw System.InvalidOperationException: Collection was modified; enumeration operation may not execute.</code> rendering your suggested approach unusable. </p>

<h2>Cliffhanger</h2>

<p>As a challenge, I let you search how to prevent this exception.</p>
    </div>