<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You should split business logic and user interface.</p>

<p>Whilst it's common to get coffee machines that are hella advanced and can talk to humans.
When programming you should build in layers.</p>

<p>I always build the core of the logic to be a generic as possible. This allows for easier tests, re-usability and segregation of the project.</p>

<p>This would means changing the <code>CoffeeMachine</code> to only contain <code>available</code> and <code>deduct</code> as methods.</p>

<p>I would also add a class <code>CoffeeInterface</code> that can be a <a href="https://docs.python.org/3/library/cmd.html" rel="noreferrer"><code>cmd.Cmd</code></a>.
This will help cut out some of the code that you have right now.</p>

<ul>
<li><p>Only use <code>self.foo</code> for attributes defined in the <code>__init__</code>. Everything else should be passed via arguments.</p>

<p>I also wouldn't change any of the attributes defined in the <code>__init__</code> as only things directly related to the class should be defined there.</p></li>
<li><p>Please don't do things like <code>if not CoffeeMachine.running: self.start()</code> in <code>__init__</code>. You should let the user call <code>.start()</code>.</p></li>
<li><p><code>exit()</code> is not intended to be used in actual live programs. Instead you should structure your code so that it is not needed.</p>

<p>There are times when <code>exit(1)</code> or <code>raise SystemExit(1)</code> are useful. But unless you're doing Unix programming it's unlikely you'll need these.</p></li>
</ul>

<p>All this together can get the following code. Not much has changed as I mostly just split the two classes.</p>

<pre class="lang-py prettyprint-override"><code>class CoffeeMachine:
    def __init__(self, water, milk, coffee_beans, cups, money):
        self.water = water
        self.milk = milk
        self.coffee_beans = coffee_beans
        self.cups = cups
        self.money = money

    def available(self, water, milk, coffee_beans, cups, _):
        not_available = ""
        if self.water - water &lt; 0:
            not_available = "water"
        elif self.milk - milk &lt; 0:
            not_available = "milk"
        elif self.coffee_beans - coffee_beans &lt; 0:
            not_available = "coffee beans"
        elif self.cups - cups &lt; 0:
            not_available = "disposable cups"

        if not_available != "":
            print(f"Sorry, not enough {not_available}!")
            return False
        else:
            print("I have enough resources, making you a coffee!")
            return True

    def deduct(self, water, milk, coffee_beans, cups, money):
        self.water -= water
        self.milk -= milk
        self.coffee_beans -= coffee_beans
        self.cups -= cups
        self.money += money


class CoffeeInterface(cmd.Cmd):
    def __init__(self, coffee_machine, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.coffee_machine = coffee_machine

    def do_buy(self, _):
        choice = input("What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino, back - to main menu:\n")
        if choice == '1':
            requirements = [250, 0, 16, 1, 4]
            if self.coffee_machine.available(*requirements):
                self.coffee_machine.deduct(*requirements)

        elif choice == '2':
            requirements = [350, 75, 20, 1, 7]
            if self.coffee_machine.available(*requirements):
                self.coffee_machine.deduct(*requirements)

        elif choice == "3":
            requirements = [200, 100, 12, 1, 6]
            if self.coffee_machine.available(*requirements):
                self.coffee_machine.deduct(*requirements)

        elif choice == "back": # if the user changed his mind
            pass

    def do_fill(self, _):
        """Add supplies to the machine."""
        self.coffee_machine.water += int(input("Write how many ml of water do you want to add:\n"))
        self.coffee_machine.milk += int(input("Write how many ml of milk do you want to add:\n"))
        self.coffee_machine.coffee_beans += int(input("Write how many grams of coffee beans do you want to add:\n"))
        self.coffee_machine.cups += int(input("Write how many disposable cups of coffee do you want to add:\n"))

    def do_take(self, _):
        """Take money from the machine."""
        print(f"I gave you ${self.coffee_machine.money}")
        self.coffee_machine.money -= self.coffee_machine.money

    def do_status(self):
        """Display the quantities of supplies in the machine at the moment."""
        print(f"The coffee machine has:")
        print(f"{self.coffee_machine.water} of water")
        print(f"{self.coffee_machine.milk} of milk")
        print(f"{self.coffee_machine.coffee_beans} of coffee beans")
        print(f"{self.coffee_machine.cups} of disposable cups")
        print(f"${self.coffee_machine.money} of money")


CoffeeInterface(CoffeeMachine(400, 540, 120, 9, 550)).cmdloop()
</code></pre>

<p>Now that the two separate things have been split apart we can focus on reviewing the code.</p>

<ul>
<li><p>I would move supplies into yet another class.<br>
I would make this class a named tuple as it has a couple of benefits:</p>

<ol>
<li>It's immutable, meaning that it's hard to mess up <code>CoffeeMachine.available</code>.</li>
<li>Getting specific values from it is clean, <code>reduced.water</code> rather than <code>reduced[0]</code>.</li>
<li>We can pass around one object rather than using nasty <code>*requirements</code>.</li>
</ol>

<p>I have elected to use <a href="https://docs.python.org/3/library/typing.html#typing.NamedTuple" rel="noreferrer"><code>typing.NamedTuple</code></a> however <a href="https://docs.python.org/3/library/collections.html#collections.namedtuple" rel="noreferrer"><code>collections.namedtuple</code></a> may be simpler to understand as it doesn't use type hints.</p></li>
<li><p>I would define the <code>__sub__</code> dunder method on the <code>Supplies</code> class.<br>
This means when we are subtracting supplies, the core of your code, it's nicer to the eyes.</p>

<p>To get this working correctly you have the option to make <code>money</code> work differently to the rest. Or you can make money negative when you're supplying the cost of a drink. I think a negative cost to make a drink is the most intuitive.</p></li>
<li><p>The code for <code>available</code> can be reduced to less lines, however this would make the code more confusing at the moment.</p></li>
<li><p>I would move the <code>print</code> out of the <code>available</code> function, it is better located in <code>do_buy</code>.<br>
To allow printing the missing item you can change its name to <code>unavailable</code> and return the unavailable item.
This would have the benefit of still making sense.</p></li>
<li><p>You should move the available drinks out of <code>do_buy</code>.<br>
If you move them into a dictionary then you can significantly reduce the amount of code in <code>do_buy</code>.</p>

<p>To do this we can build a dictionary with each key being the value 1, 2 or 3. And the value as the <code>Supplies</code> for that drink.
From here we can use <code>dict.get(choice, None)</code>, which will return the <code>Supplies</code> for the selected drink or <code>None</code> if the user didn't enter a valid choice.</p>

<p>From here we can just return if it's not a valid choice, and interact with the <code>CoffeeMachine</code> otherwise.</p></li>
<li><p>To simplify <code>do_fill</code> and <code>take</code> we can add the <code>__add__</code> dunder method.<br>
This means we only need one <code>+</code> rather than four.</p></li>
</ul>

<pre class="lang-py prettyprint-override"><code>import cmd
from typing import NamedTuple


class Supplies(NamedTuple):
    water: int
    milk: int
    coffee_beans: int
    cups: int
    money: int

    def __sub__(self, other):
        return Supplies(
            self.water - other.water,
            self.milk - other.milk,
            self.coffee_beans - other.coffee_beans,
            self.cups - other.cups,
            self.money - other.money,
        )

    def __add__(self, other):
        return Supplies(
            self.water + other.water,
            self.milk + other.milk,
            self.coffee_beans + other.coffee_beans,
            self.cups + other.cups,
            self.money + other.money,
        )


DRINKS = {
    '1': Supplies(250, 0, 16, 1, -4),
    '2': Supplies(350, 75, 20, 1, -7),
    '3': Supplies(200, 100, 12, 1, -6),
}


class CoffeeMachine:
    def __init__(self, supplies):
        self.supplies = supplies

    def unavailable(self, drink):
        remaining = self.supplies - drink
        not_available = ""
        if remaining.water &lt; 0:
            not_available = "water"
        elif remaining.milk &lt; 0:
            not_available = "milk"
        elif remaining.coffee_beans &lt; 0:
            not_available = "coffee beans"
        elif remaining.cups &lt; 0:
            not_available = "disposable cups"
        return not_available if not_available else None

    def deduct(self, drink):
        self.supplies -= drink


class CoffeeInterface(cmd.Cmd):
    def __init__(self, coffee_machine, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.coffee_machine = coffee_machine

    def do_buy(self, _):
        choice = input("What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino, back - to main menu:\n")
        drink = DRINKS.get(choice, None)
        if drink is None:
            return

        unavailable = self.coffee_machine.available(drink)
        if unavailable:
            print(f"Sorry, not enough {unavailable}!")
        else:
            print("I have enough resources, making you a coffee!")
            self.coffee_machine.deduct(drink)

    def do_fill(self, _):
        """Add supplies to the machine."""
        self.coffee_machine.supplies += Supplies(
            int(input("Write how many ml of water do you want to add:\n")),
            int(input("Write how many ml of milk do you want to add:\n")),
            int(input("Write how many grams of coffee beans do you want to add:\n")),
            int(input("Write how many disposable cups of coffee do you want to add:\n")),
            0,
        )

    def do_take(self, _):
        """Take money from the machine."""
        money = self.coffee_machine.supplies.money
        print(f"I gave you ${money}")
        self.coffee_machine.supplies -= Supplies(0, 0, 0, 0, money)

    def do_status(self):
        """Display the quantities of supplies in the machine at the moment."""
        supplies = self.coffee_machine.supplies
        print(f"The coffee machine has:")
        print(f"{supplies.water} of water")
        print(f"{supplies.milk} of milk")
        print(f"{supplies.coffee_beans} of coffee beans")
        print(f"{supplies.cups} of disposable cups")
        print(f"${supplies.money} of money")


CoffeeInterface(CoffeeMachine(Supplies(400, 540, 120, 9, 550))).cmdloop()
</code></pre>

<ul>
<li><p>Given the amount of <code>self.coffee_machine.supplies.{x}</code> it should be blindingly apparent that <code>CoffeeMachine</code> is now more of a hindrance than a help.</p>

<ul>
<li>Having to read and write <code>self.coffee_machine.supplies</code> is rather annoying.</li>
<li>We can easily change <code>deduct</code> to just <code>self.coffee_machine.supplies -= drink</code>.</li>
<li>The function <code>unavailable</code> can be moved onto either <code>Supplies</code> or <code>CoffeeInterface</code>.</li>
</ul></li>
<li><p>One of the benefits to using <code>NamedTuple</code> is that it defines a means to iterate over it without us having to write it.<br>
This means that we can simplify the <code>__sub__</code>, <code>__add__</code> and <code>unavailable</code> methods.</p>

<p>To do so we can use <a href="https://docs.python.org/3/library/functions.html#zip" rel="noreferrer"><code>zip</code></a> which lets us iterate over two things at the same time.</p>

<pre class="lang-py prettyprint-override"><code>foos = 'abcdef'
bars = 'ghijkl'

# non-zip
for i in range(len(foos)):
    print(foos[i], bars[i])

# zip
for foo, bar in zip(foos, bars):
    print(foo, bar)
</code></pre>

<p>We can also use a list comprehension or generator expression to build the new <code>Supplies</code> on one line.</p></li>
<li><p>With <code>cmd</code> you can pass a string when entering a command.
This means it is possible to enter <code>buy espresso</code>.</p>

<p>It would be cool if you used this to buy by an item's name rather than an odd number.</p>

<p>To allow this you can have a menu option that shows a list of items that you can buy.</p></li>
</ul>

<pre class="lang-py prettyprint-override"><code>import cmd
from typing import NamedTuple


class Supplies(NamedTuple):
    water: int
    milk: int
    coffee_beans: int
    cups: int
    money: int

    def __sub__(self, other):
        return Supplies(*[s - o for s, o in zip(self, other)])

    def __add__(self, other):
        return Supplies(*[s + o for s, o in zip(self, other)])

    def unavailable(self):
        return [
            field
            for field, value in zip(self._fields, self)
            if value &lt; 0
        ]


DRINKS = {
    'espresso': Supplies(250, 0, 16, 1, -4),
    'latte': Supplies(350, 75, 20, 1, -7),
    'cappuccino': Supplies(200, 100, 12, 1, -6),
}


class CoffeeInterface(cmd.Cmd):
    def __init__(self, supplies, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.supplies = supplies

    def do_menu(self, _):
        print('\n'.join(DRINKS))

    def do_buy(self, choice):
        drink = DRINKS.get(choice.lower(), None)
        if drink is None:
            return

        remaining = self.supplies - drink
        unavailable = remaining.unavailable()
        if unavailable:
            print(f"Sorry, not enough {', '.join(unavailable)}!")
        else:
            print("I have enough resources, making you a coffee!")
            self.supplies = remaining

    def do_fill(self, _):
        """Add supplies to the machine."""
        self.supplies += Supplies(
            int(input("Write how many ml of water do you want to add:\n")),
            int(input("Write how many ml of milk do you want to add:\n")),
            int(input("Write how many grams of coffee beans do you want to add:\n")),
            int(input("Write how many disposable cups of coffee do you want to add:\n")),
            0,
        )

    def do_take(self, _):
        """Take money from the machine."""
        print(f"I gave you ${self.supplies.money}")
        self.supplies -= Supplies(0, 0, 0, 0, self.supplies.money)

    def do_status(self):
        """Display the quantities of supplies in the machine at the moment."""
        print(f"The coffee machine has:")
        print(f"{self.supplies.water} of water")
        print(f"{self.supplies.milk} of milk")
        print(f"{self.supplies.coffee_beans} of coffee beans")
        print(f"{self.supplies.cups} of disposable cups")
        print(f"${self.supplies.money} of money")


CoffeeInterface(Supplies(400, 540, 120, 9, 550)).cmdloop()
</code></pre>
    </div>