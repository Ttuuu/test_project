<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There isn't really a reason to make this "more object-oriented" if you don't need to. To add more AI constructs, for example, you can do:</p>

<pre><code>switch ($aiLevel) {
   case 1: $values = $OsTurn($values);
   case 2: $values = $betterAi($values);
   case 3: $values = $unbeatableAi($values);
}
</code></pre>

<p>Adding more features could be done in a similiar manner. I'm not sure exacly wht you have in mind, so I can only make some general comments. Break down everything into functions, and make sure that it's easy to see the flow of the program. The way you've structured your code is good. It should not be difficult to add more features if you use similiar style.</p>

<p>CSS won't affect your script; it just changes how the page looks. You'll just need to be sure you use the right elements when outputting html. Javascript may be trickier, but there are many ways of doing that including form elements (possibly hidden) and page submits. There may be other ways that I'm not aware of as I'm not primarily a web programmer.</p>

<p>I believe when you are talking about cheating, you're saying that you can send a winning board value set to the script by typing the URL yourself. To prevent this you need a way to preserve state. A cookie would be an easy way to start; store the current state of the board in it after every page call, and check that the only change was the placing of another piece. A more robust, but somewhat more involved, solution would be to use session variables to store the state. This would avoid the "cookys are bad" problem and the possibility that someone might fake the cooky!</p>
    </div>