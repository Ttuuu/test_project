<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>1) Use collections.Counter</h3>

<p><code>from collections import Counter</code>. Counter is a subclass of <code>dict</code> that helps keep tallies. This way, you don't need <code>.get(digit, 0)</code> or <code>if i in digit_counts</code>, making your code look a bit cleaner.</p>

<h3>2) Iterate in increasing order</h3>

<p>Right now, you need a <code>power</code> variable to track which position to place the next digit in. If you iterated in the opposite direction (i.e. <code>range(10)</code>), you could do <code>result *= 10</code> in each loop.</p>

<h3>3) Use a <code>for</code> loop instead of <code>while</code></h3>

<p>Whenever you are iterating and incrementing/decrementing, you have the opportunity to use a for loop. In this case, for <code>while digit_counts[i] &gt;= 1</code> you don't care about the number of iterations, so you can use the <code>_</code> as a "throwaway variable".</p>

<h3>4) Code localization</h3>

<p>Move <code>result = 0</code> down so that it's just above where it starts being used. Code localization improves readability - depending on your source, the human brain can only remember 4-7 things at once. The fewer variables your reader has to track, the better.</p>

<h1>Final Result</h1>

<pre><code>from collections import Counter

def sort_digits(n):
  digit_counts = Counter()

  while n &gt; 0:
    digit_counts[n % 10] += 1
    n /= 10

  result = 0
  for i in range(10):
    for _ in range(digit_counts[i]):
      result = 10 * result + i

  return result
</code></pre>
    </div>