<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I see some things that may help you improve your code.</p>

<h2>Provide complete code to reviewers</h2>

<p>This is not so much a change to the code as a change in how you present it to other people.  Without the full context of the code and an example of how to use it, it takes more effort for other people to understand your code.  This affects not only code reviews, but also maintenance of the code in the future, by you or by others.  One good way to address that is by the use of comments.  Another good technique is to include test code showing how your code is intended to be used.  Here's the test <code>main</code> I used for your code:</p>

<pre><code>int main() {
    const char *input[2] = {
        "ughIuytLikeretC", 
        "xxxExxxdwarxxxd",
    };
    const bool mask[] = {
        false, false, false, true, false,
        false, false, true, true, true,
        true, false, false, false, true,
    };
    char filt[100];
    char maskstr[100];
    // create the mask string
    pmask(mask, maskstr);

    printf("Orig: %s\nMask: %s\nFilt: %s\n", input[0], maskstr, filtArray(input[0], mask, filt));
    printf("Orig: %s\nMask: %s\nFilt: %s\n", input[1], maskstr, filtArray(input[1], mask, filt));
    for (int i = 0; i &lt; 10000000; ++i) {
        int n = rand() &gt; RAND_MAX/2 ? 1 : 0;
        printf("Orig: %s\nMask: %s\nFilt: %s\n", input[n], maskstr, filtArray(input[n], mask, filt));
    }
}
</code></pre>

<p>After it applies the function to two strings, it then iterates 10 million times, choosing one or the other test inputs randomly.  This is for testing timing.</p>

<h2>Use <code>const</code> where practical</h2>

<p>The <code>filtArray</code> function does not (and should not) alter either the passed <code>input</code> or <code>mask</code> arrays and so both of those should be declared <code>const</code>.</p>

<pre><code>char *filtArray(const char input[], const bool mask[], char *filtered) {
</code></pre>

<h2>Consider bounds checking</h2>

<p>If the input strings have already been validated for length, the function you have is OK, but in general, it's good to make sure there is enough room to copy the masked characters.  If there isn't enough room, that's the recipe for a <a href="https://en.wikipedia.org/wiki/Buffer_overflow" rel="nofollow noreferrer">buffer overflow vulnerability</a> and must be eliminated, either by the calling routine or by this one. </p>

<h2>Consider a custom copy</h2>

<p>If the same mask is used for billions of strings, it would probably make sense to do things differently.  For example, one alternative might look like this:</p>

<pre><code>#include &lt;string.h&gt;

char *filtArray(const char input[], char *filtered) {
    memcpy(&amp;filtered[1], &amp;input[7], 4);
    filtered[0] = input[3];
    filtered[5] = input[14];
    filtered[6] = '\0';
    return filtered;
}
</code></pre>

<p>Note that the <code>mask</code> is no longer used in this version, because the code has implemented it implicitly.  This is less flexible but offers better performance.  For 10 million strings on my machine, your original version takes about 1.3 seconds, while the version shown here takes around 1.0 seconds (redirecting the output to <code>/dev/null</code> on a Linux machine).</p>

<h2>Use pointers rather than indexing for speed</h2>

<p>Pointers are generally a faster way to access elements than using index variables.  For example, your <code>filtArray</code> routine could be written like this:</p>

<pre><code>char *filtArray(const char *input, const bool *mask, char *filtered) {
    char *beginning = filtered;
    for ( ; *input; ++input, ++mask) {
        if (*mask) {
            *filtered++ = *input;
        }
    }
    *filtered  = '\0';
    return beginning;
}
</code></pre>

<p>Because you're just beginning, this may seem strange to you, but this kind of use of pointers is a very common idiom in C.  </p>

<h3>Compilers are good, but not quite that good yet</h3>

<p>Because there's a tendency to assume the compiler will take care of it, here's compiler output comparison of the two approaches using gcc for ARM using the on-line compiler explorer:  <a href="https://godbolt.org/z/Y0TeVX" rel="nofollow noreferrer">https://godbolt.org/z/Y0TeVX</a></p>

<p>As can be seen in this case, the generated assembly code for the pointer version is much shorter.  Shorter code is usually faster (and it is in this case according to my testing) but not always.  For those who are expert in compiler design: The typical improvement is as likely to be the elimination of extra live variables as for the use of pointers <em>per se</em>, but the effect is nonetheless real.</p>

<h3>Measured timings</h3>

<p>For each of the three variations, original, pointer, and memcpy, here are the measured times for 10 million iterations and the variances of each set of samples and the relative speed measured as the average speed compared with the average speed of the original expressed as a percentage.  With no optimization:</p>

<p><span class="math-container">\$\begin{array}{l|c|c|c}
{\bf name}&amp;{\bf avg (s)}&amp;{\bf var (s)}&amp;{\bf relative}\\
\hline
\text{original}&amp;1.344&amp;0.01853&amp;100.00\% \\
\text{pointer}&amp;1.244&amp;0.01193&amp;92.56\% \\
\text{memcpy}&amp;0.998&amp;0.01177&amp;74.26\%
\end{array}\$</span></p>

<p>With <code>-O2</code> optimization:</p>

<p><span class="math-container">\$\begin{array}{l|c|c|c}
{\bf name}&amp;{\bf avg (s)}&amp;{\bf var (s)}&amp;{\bf relative}\\
\hline
\text{original}&amp;1.038&amp;0.01462&amp;100.00\% \\
\text{pointer}&amp;1.000&amp;0.00135&amp;96.34\% \\
\text{memcpy}&amp;0.948&amp;0.00692&amp;91.33\%
\end{array}\$</span></p>

<p>These results were on a 64-bit Linux machine using <code>gcc</code> version 8.2.1.  I look forward to seeing other measured timing results.  Time is user time as measured by <code>time -f %U</code> (See <a href="https://linux.die.net/man/1/time" rel="nofollow noreferrer">https://linux.die.net/man/1/time</a> for man page).</p>
    </div>