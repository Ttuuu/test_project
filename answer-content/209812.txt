<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Bug</h3>

<p>There is a bug in your example where you are using <code>SMALL_PASCAL</code> twice:</p>

<blockquote>
<pre><code> if (qty &lt;= 300)
 {
     return CartonType.SMALL_PASCAL;
 }
 else if (qty &gt; 300 &amp;&amp; qty &lt;= 600)
 {
     return CartonType.SMALL_PASCAL;
 }
</code></pre>
</blockquote>

<hr>

<h3>More flexibility with <em>free</em> mappings</h3>

<p>I would take a different approach for the other answer. Quantities are something that might change in time or be different in different contexts so I wouldn't use them as <code>enum</code> or <code>const</code> values but instead created a <em>pure</em> <code>enum</code> first:</p>

<pre><code>public enum CartonType
{
    Undefined = 0,
    SMALL_PASCAL,
    BIG_PASCAL,
    BABY_BOX,
    A485_1201,
    A4140_1901,
    A485,
    Default = A485
}
</code></pre>

<p>where there are two new items: <code>Undefined</code> and <code>Default</code> - that we can conveniently use in a new extension method. It would map <code>Quantity</code> to <code>CartonType</code> for any collection:</p>

<pre><code>public static CartonType GetCartonType(this int quantity, IEnumerable&lt;(int Quantity, CartonType Type)&gt; mappings)
{
     var mapping = mappings.FirstOrDefault(m =&gt; quantity &lt;= m.Quantity);
     return 
        mapping.Type == CartonType.Undefined 
            ? CartonType.Default 
            : mapping.Type;
}
</code></pre>

<p>With this you can specify different quantities if necessary and use them as a parameter:</p>

<pre><code>var quantityCartonTypeMappings = new(int Quantity, CartonType Type)[]
{
    (300, CartonType.SMALL_PASCAL),
    (600, CartonType.BIG_PASCAL),
};

var quantity = 700;

var cartonType = quantity.GetCartonType(quantityCartonTypeMappings);
</code></pre>
    </div>