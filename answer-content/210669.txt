<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Use standard types</h2>

<p>You define this:</p>

<pre><code>typedef unsigned char byte;
</code></pre>

<p>But you also already <code>#include &lt;stdint.h&gt;</code>. As such, you have access to <code>uint8_t</code>, which is more explicit about its size than <code>char</code>.</p>

<h2>Identify local functions</h2>

<p>If all of your functions are in the same translation unit (which seems to be the case), make them <code>static</code>.</p>

<h2>Forever loops</h2>

<p>This is quite minor, but <code>while (1)</code> isn't my favourite way of defining a forever loop. You can either do <code>for (;;)</code> or <code>while (true)</code>, after having included <code>stdbool.h</code>. <code>1</code> is less expressive than <code>true</code>.</p>

<h2>Unite declaration and initialization</h2>

<pre><code>int ch;
while (1) {
    ch = fgetc(fp);
</code></pre>

<p>can be</p>

<pre><code>while (true) {
    int ch = fgetc(fp);
</code></pre>

<h2>Define magic numbers</h2>

<p>Make a <code>#define</code> or a global <code>const int</code> for 256. It's used all over your code, and it'd be good to replace that with a symbol for legibility and maintainability.</p>

<h2>Do one thing at a time</h2>

<pre><code>lower[0] = 0, upper[0] = 256;
// ...
unsigned t = freq[i]; freq[i] = freq[j]; freq[j] = t;
</code></pre>

<p>It's rarely an improvement to the legibility of code to do multi-statement lines. Just put these on separate lines.</p>

<h2>Sanitize loop counters</h2>

<p>You have:</p>

<pre><code>unsigned top = 1;
// ...
while (top &gt; 0) {
    top--;
    // ...`continue`s under certain conditions...
    top += 2;
}
</code></pre>

<p>This is a little wacky. Just do:</p>

<pre><code>for (int top = 0; top &gt;= 0; top--) {
    // ... continue under certain conditions...
    top += 2;
}
</code></pre>

<p>I <em>think</em> those are equivalent.</p>

<h2>Sanitize logic</h2>

<pre><code>        int flag = 0;
        while (...) {
            if (freq[i] &lt; freq[j]) {
                //...
                flag = !flag;
            }
            flag ? i++ : j--;
        }
</code></pre>

<p>This is ternary abuse. The flag should be a <code>bool</code> (from <code>stdbool.h</code>). Rewrite this as:</p>

<pre><code>bool flag = false;
while (...) {
    if (freq[i] &lt; freq[j]) {
        //...
        flag = !flag;
    }
    if (flag) i++;
    else j--;
}
</code></pre>

<h2>Choose a pointer spacing standard</h2>

<p>You do:</p>

<pre><code>void compress_file(const char* filename, const char* newname) {
</code></pre>

<p>but you also do:</p>

<pre><code>FILE *fin = fopen(filename, "rb"),
     *fout = fopen(newname, "wb");
</code></pre>

<p>Personally I like the latter; either way, you should pick a standard and apply it everywhere.</p>

<h2>Let <code>fwrite</code> do the iteration</h2>

<p>This:</p>

<pre><code>for (int i = 0; i &lt; 256; i++)
    fwrite(freq + i, 4, 1, fout);
</code></pre>

<p>is equivalent to:</p>

<pre><code>fwrite(freq, 4, 256, fout);
</code></pre>
    </div>