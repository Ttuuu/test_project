<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First, some comments on your code:</p>

<ul>
<li><p>An <code>sqlite3</code> connection <a href="https://docs.python.org/3/library/sqlite3.html#using-the-connection-as-a-context-manager" rel="nofollow noreferrer">can be used as a context manager</a>. This ensures that the statement is committed if it succeeds and rolled back in case of an exception. Unfortunately it does not also close the connection afterwards</p>

<pre><code>with sqlite3.connect("test.sqlite") as connection, open("test_file.map") as f:
    connection.execute("""
        CREATE TABLE IF NOT EXISTS map (
            accession TEXT PRIMARY KEY,
            accession_version TEXT,
            taxid TEXT, gi TEXT
        )""")

    next(f)  # ignore header
    connection.executemany("INSERT INTO map VALUES (?, ?, ?, ?)", read_large_file(f))
connection.close()
</code></pre></li>
<li><p>You should separate your functions from the code calling it. The general layout for Python code is to first define your classes, then your functions and finally have a main block that is protected by a <a href="http://stackoverflow.com/questions/419163/what-does-if-name-main-do"><code>if __name__ == "__main__":</code> guard</a> to allow importing from the script without executing all the code.</p></li>
<li><code>open</code> automatically opens a file in read-mode, if not specified otherwise.</li>
</ul>

<hr>

<p>That being said, if you have a billion lines, basically any approach is probably going to be slow. Here is an alternate approach using <a href="https://docs.dask.org/en/latest/" rel="nofollow noreferrer"><code>dask</code></a>. It may or may not be faster, you will have to test it. The usage is very similar to <code>pandas</code>, except that the computations are only performed once committed to with the call to <code>compute()</code>.</p>

<p>First, to install <code>dask</code>:</p>

<pre><code>pip install dask[dataframe] --upgrade
</code></pre>

<p>Then for the actual usecase you mention, finding a specific <code>gi</code> in the table:</p>

<pre><code>from dask import dataframe

df = dataframe.read_csv("test_file.map", sep="\t")
df[df.gi == 7184].compute()
#   accession accession.version  taxid    gi
# 0    V00184          V00184.1  44689  7184
</code></pre>

<p>In the call to <code>dataframe.read_csv</code> you can set it to <a href="http://docs.dask.org/en/latest/dataframe-api.html#dask.dataframe.read_csv" rel="nofollow noreferrer">read the file in blocks</a> if needed, e.g. in 25MB chunks:</p>

<pre><code>df = dataframe.read_csv("test_file.map", sep="\t", blocksize=25e6)
</code></pre>
    </div>