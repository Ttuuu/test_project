<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Programming is easier if you can split the different tasks your program needs to do into functions. I don't have time for a full review, but can give you some pointers on how to tackle this</p>

<h1>Formatting you lines</h1>

<p>Try to adhere to pep-8.
The main thing that bothers me are too long lines, and when you split them, you do it in strange places. I found that using a code formatter (like <a href="https://github.com/ambv/black" rel="nofollow noreferrer">black</a>) helps me here. It has sane defaults, but is rather uncompromising.</p>

<h1>global</h1>

<p>why do you need <code>wrapper</code> as a <code>global</code>?</p>

<h1>functions</h1>

<h2>reading the file</h2>

<p>You can use the <code>csv</code> module to help you parse the lines. A simple generator which takes an open filehandle as input (<a href="http://rhodesmill.org/brandon/talks/#clean-architecture-python" rel="nofollow noreferrer">hoist your IO</a>) can be as easy as:</p>

<pre><code>def read_file(input_file):
    csv_file = csv.reader(input_file, delimiter=" ", )
    for row in csv_file:
        job_info, name, job_time, job_id, *_ = row
        yield job_id, job_info, job_time, row
</code></pre>

<p>for each row, this uses tuple unpacking to get the info from the first few lines, and yields those</p>

<h2>parsing</h2>

<p>Instead of making one huge method to parse each of the different states, it is easier to make a method per different state, and use a dict to dispact each row to the correct method:</p>

<pre><code>def parse_job_new(row):
    print('job new')
    return row
def parse_job_start(row):
    print('job start')
    return row
def parse_job_start_accept(row):
    print('job start accept')
    return row
def parse_job_execute(row):
    print('job execute')
    return row
def parse_job_status(row):
    print('job status')
    return row

ACTIONS = {
    "JOB_NEW": parse_job_new,
    "JOB_START": parse_job_start,
    "JOB_START_ACCEPT": parse_job_start_accept,
    "JOB_EXECUTE": parse_job_execute,
    "JOB_STATUS": parse_job_status,
}
</code></pre>

<p>Then you can also save the results in a <code>collections.defaultdict</code></p>

<pre><code>def main(input_file, job_match= None):
    results = defaultdict(dict)
    lines = read_file(input_file)
    for job_id, job_info, row in lines:
        if job_match is not None and job_id != job_match:
            continue
        results[job_id][job_info] = ACTIONS[job_info](row)
    return dict(results)
</code></pre>

<h1>main guard</h1>

<p>If you put the script code behind a main-guard, you can import the rest of the file in another program withtout this running all the time</p>

<pre><code>if __name__ == "__main__":
    job_match = '84' # from input parsing
    with StringIO(input_str) as input_file: # with open(&lt;filename&gt;, 'r')
        results = main(input_file, job_match=job_match)
    print(results)
</code></pre>

<p>This does not do exactly as you method does, but can be a start to improve your program</p>
    </div>