<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If you only care about ASCII characters, you can also exploit the fact that their character codes go from 97 for 'a' to 122 for 'z', contiguously, and do something like</p>

<pre><code>def alphabet_position(text):
    nums = [str(ord(x) - 96) for x in text.lower() if x &gt;= 'a' and x &lt;= 'z']
    return " ".join(nums)
</code></pre>

<p>Note, however, that it may give an impression of being faster than the @alecxe's solution, but is, in fact, quite a lot <em>slower</em> for long input strings, because calling <code>str()</code> and <code>ord()</code> on every input character is slower than dictionary lookup. <s>Gives about the same or even slightly better performance for repeated calls on short input strings, but only because <code>letters</code> dictionary is constructed anew on every call of @alecxe's function, which is easy to change.</s> (UPD.: no, not anymore). If that matters.</p>
    </div>