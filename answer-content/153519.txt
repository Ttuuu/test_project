<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You can determine the correct answer in a single pass, by working your way from the middle of the array outward, or from the ends of the array inward. Let's get started.</p>

<p>Although the problem description states to return 1 if the array is hollow  and 0 if it is not, such signature would make no sense in Java. It's only natural, and strongly recommended to use proper boolean <code>true</code> and <code>false</code>, respectively.</p>

<p>To work outward from the center, let's track <code>left</code> and <code>right</code> indexes.
If the array has odd number of elements,
<code>left</code> and <code>right</code> can both point to the middle element.
Otherwise the array has two central elements,
let's make <code>left</code> and <code>right</code> point at those.</p>

<pre><code>int mid = nums.length / 2;
int left, right;
if (nums.length % 2 != 0) {
    left = right = mid;
} else {
    left = mid - 1;
    right = mid;
}
</code></pre>

<p>Now, let's start moving the <code>left</code> and <code>right</code> indexes outward, as long as both <code>nums[left]</code> and <code>nums[right]</code> are 0, and <code>left &gt; 0</code>.</p>

<pre><code>while (left &gt; 0 &amp;&amp; nums[left] == 0 &amp;&amp; nums[right] == 0) {
    left--;
    right++;
}
</code></pre>

<p>The loop ends either when <code>left</code> reaches the second position of the array,
or when <code>nums[left]</code> or <code>nums[right]</code> (or both) are not zero.
If <code>left</code> and <code>right</code> were not moved enough, that is,
we haven't moved over enough zeros, then the array is not hollow and we can return.</p>

<pre><code>if (right - left &lt; 4) {
    return false;
}
</code></pre>

<p>Finally, we need to verify that the rest of the elements are all non-zero.
We can do that by continuing to move outward, and aborting if any of the values is 0.</p>

<pre><code>while (left &gt;= 0) {
    if (nums[left] == 0 || nums[right] == 0) {
        return false;
    }
    left--;
    right++;
}
</code></pre>

<p>When the loop completes without aborting, we know the array is hollow.</p>

<p>The complete solution, with some more test cases to verify it:</p>

<pre><code>boolean isHollow(int... nums) {
    int mid = nums.length / 2;
    int left, right;
    if (nums.length % 2 == 0) {
        left = mid - 1;
        right = mid;
    } else {
        left = right = mid;
    }

    while (left &gt; 0 &amp;&amp; nums[left] == 0 &amp;&amp; nums[right] == 0) {
        left--;
        right++;
    }

    if (right - left &lt; 4) {
        return false;
    }

    while (left &gt;= 0) {
        if (nums[left] == 0 || nums[right] == 0) {
            return false;
        }
        left--;
        right++;
    }

    return true;
}

@Test
public void verify_isHollow() {
    assertThat(isHollow(1, 2, 4, 0, 0, 0, 3, 4, 5)).isTrue();
    assertThat(isHollow(1, 2, 4, 0, 0, 0, 1, 0, 3, 4, 5)).isFalse();
    assertThat(isHollow(1, 2, 0, 0, 0, 3, 4, 5)).isFalse();
    assertThat(isHollow(1, 2, 4, 9, 0, 0, 0, 3, 4, 5)).isFalse();
    assertThat(isHollow(1, 2, 0, 0, 3, 4)).isFalse();
    assertThat(isHollow(1, 2, 0, 0, 0, 0, 3, 4)).isTrue();
    assertThat(isHollow(1, 0, 0, 0, 3)).isTrue();
    assertThat(isHollow(1, 2, 0, 0, 0, 0, 3, 4, 5)).isFalse();
    assertThat(isHollow(1, 2, 1, 0, 0, 0, 0, 3, 4)).isFalse();
    assertThat(isHollow(0, 0, 0)).isFalse();
    assertThat(isHollow(0, 0, 0, 0, 0)).isFalse();
    assertThat(isHollow(0, 0, 0, 0, 0, 1)).isFalse();
    assertThat(isHollow(1, 0, 0, 0, 0, 0)).isFalse();
    assertThat(isHollow(1, 0, 0, 0, 0, 0, 2)).isTrue();
}
</code></pre>
    </div>