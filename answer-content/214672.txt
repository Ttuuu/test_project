<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I would consider refactoring direction into an enum, instead of a magic number. This would allow to encapsulate the related logic in this type.</p>

<p>It might look like that:</p>

<pre><code>    enum Direction {
        UP(0, 1),
        RIGHT(1, 0),
        DOWN(0, -1),
        LEFT(-1, 0);

        final int xVector;
        final int yVector;

        private final Direction FIRST = Direction.values()[0];
        private final Direction LAST = Direction.values()[Direction.values().length];

        Direction(int xVector, int yVector) {
            this.xVector = xVector;
            this.yVector = yVector;
        }

        Direction rotatedLeft() {
            return this == FIRST
                    ? LAST // cycle complete
                    : Direction.values()[ordinal() - 1]; // previous value
        }

        Direction rotatedRight() {
            return this == LAST
                    ? FIRST // cycle complete
                    : Direction.values()[ordinal() + 1]; // next value
        }
    }
</code></pre>

<p>And then the <code>Robot</code> code becomes (including some subjective clean up, unrelated to the object-oriented aspect itself):</p>

<pre><code>class Robot {
    private int x;
    private int y;
    private Direction currentDirection;

    Robot() {
        this(0, 0);
    }

    Robot(int x, int y) {
        this.x = x;
        this.y = y;
        currentDirection = Direction.UP;
    }

    public void move(String moves) {
        for (char code : moves.toCharArray()) {
            // a matter of taste, I like to extract logic 
            // out of looping constructs for clarity
            move(code);
        }
    }

    private void move(char code) {
        switch (code) {
            case 'R': {
                currentDirection = currentDirection.rotatedRight();
                break;
            }
            case 'L': {
                currentDirection = currentDirection.rotatedLeft();
                break;
            }
            case 'F': {
                // you'd call the println thing here.
                // as it's not part of the requirements I assumed it to be a debugging artifact
                this.x += currentDirection.xVector;
                this.y += currentDirection.yVector;
                break;
            }
        }
    }

    public void reset() {
        x = 0;
        y = 0;
        currentDirection = Direction.UP;
    }

    public String position() {
        return x + ":" + y;
    }
}
</code></pre>

<p>I think this is more object-oriented, and also an improvement. </p>

<p>You could take it one step further and encapsulate the <code>x</code> and <code>y</code> coordinates in a little standalone class (<code>Position</code>). Like so:</p>

<pre><code>    class Position {
        static final Position DEFAULT = new Position(0, 0);

        final int x;
        final int y;

        public Position(int x, int y) {
            this.x = x;
            this.y = y;
        }

        public Position movedInto(Direction direction) {
            return new Position(x + direction.xVector, y + direction.yVector);
        }

        @Override
        public String toString() {
            return x + ":" + y;
        }
    }
</code></pre>

<p>Then in the <code>Robot</code> class you replace <code>x</code> and <code>y</code> fields with <code>Position position</code>, and you no longer recalculate the position in the <code>Robot</code> class, as you can simply go:</p>

<pre><code>case 'F': {
    position = position.movedInto(currentDirection);
    break;
}
</code></pre>

<p>in the <code>move</code> method.</p>

<p>Plus:</p>

<pre><code>    public void reset() {
        position = Position.DEFAULT;
        currentDirection = Direction.UP;
    }

    public String position() {
        return position.toString();
    }
</code></pre>

<p>Yet another idea would be to encapsulate the move codes themselves into a class or classes. It's sometimes hard to say where to draw the line, as making code more and more OO comes at the cost of more boilerplate, and can be a form of overengineering.</p>

<p>I admit I haven't tested my refactored version, I only approached the question in terms of code design.</p>
    </div>