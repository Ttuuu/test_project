<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First I would like to say that code can be functional <em>to a degree</em>, so I will point out what I like and what could be (even) more functional.</p>

<p>I like <code>isFizz</code> and <code>isBuzz</code> because they are declarative and pure functions (i.e. they have no obvious side effects and are deterministic). I also like that the <code>map</code> does not use intermediate variables, because that would be a more imperative approach. </p>

<p>A suggestion would be trying to reduce the potential number of evaluations in the <code>map</code> (for each <code>number</code>, both <code>isFizz</code> and <code>isBuzz</code> are potentially executed twice) without using intermediate variables. My suggestion can be found below in the <code>toTerms</code> function or the Ramdba pseudo code.</p>

<p>After taking the course <a href="https://frontendmasters.com/courses/functional-javascript-v3/" rel="nofollow noreferrer">Functional-Light JavaScript v3</a>, I have attempted to write a declarative/functional FizzBuzz implementation too.</p>

<p>In this course, Kyle Simpson recommends gradually converting to declarative style, which I found helpful. Also it resulted in a way over-engineered implementation, but I think it does show parts of the code that I really had to think about before finding an appropriate declarative alternative.</p>

<p>The implementation is in <a href="https://jsfiddle.net/mdvanes/4wsnLzo0/" rel="nofollow noreferrer">this fiddle</a>, with my intermediate progress too. It also contains suggestions for further refactoring. This is the state at time of writing:</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const range = (function rangeInner(acc) {
	return (first, last) =&gt; {
    if(first &gt; last) {
      return acc;
    }
    return rangeInner([...acc, first])(first + 1, last);  	
  }
})([]);

const isMod3 = n =&gt; n % 3 === 0;
const isMod5 = n =&gt; n % 5 === 0;

const predicatesAndTerms = [
    [isMod3, "Fizz"],
    [isMod5, "Buzz"]
]

const toTerms = n =&gt; predicatesAndTerms
	.reduce((acc, [predicateFn, term]) =&gt; acc += predicateFn(n) ? term : "", "");

const toFizzBuzz = n =&gt; toTerms(n) || n.toString();

console.log(range(1, 15).map(toFizzBuzz));</code></pre>
</div>
</div>


<p>In an attempt to avoid potentially evaluating <code>isMod3</code> (<code>isFizz</code> in the question) and <code>isMod5</code> twice for each number, I refactored to a <code>reduce</code> over an array of "predicate" and "term" tuples, that is evaluated by a ternary operator that returns a value directly. I also tried to avoid intermediate variables as much as possible, forcing myself to create tiny cohesive functions instead.</p>

<p>In an earlier version, I had a similar implementation of <code>range</code> as in the question, but I refactored it to try out recursion combined with a closure for the <code>acc</code> parameter, with the option to refactor it using <code>R.curry</code> later, (where R refers to <a href="https://ramdajs.com/" rel="nofollow noreferrer">Ramda</a>).</p>

<p>Pseudo-code for further refactoring <code>toFizzBuzz</code> with Ramda could be:</p>

<pre><code>const orDefault = fn =&gt; n =&gt; fn(n) || n; // looks like R.defaultTo, but executes fn over n first.
const toTermsOrDefault = orDefault(toTerms);
const toString = n =&gt; n.toString();
const toFizzBuzz = compose(toString, toTermsOrDefault);
</code></pre>

<p>Good luck learning FP JavaScript! If you want to discuss FP JS, I'm always interested. </p>
    </div>