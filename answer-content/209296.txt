<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>static</h1>

<p>The <code>Factorial</code> class doesn't have any non-class data members, so it shouldn't have any non-static methods.</p>

<p>In particular:</p>

<ol>
<li><code>getFactorialWithLoop()</code> can be made <code>static</code>.</li>
<li><code>getFactorialWithRecursion()</code> can be made <code>static</code> if <code>factorialRecursion()</code> is also made <code>static</code>.</li>
<li><code>getFactorialMultiThreaded()</code> can be made <code>static</code> if you change <code>class PartialFactorialJob</code> to be a <code>static</code> inner class.</li>
</ol>

<hr>

<p><code>getFactorialWithLoop()</code>:</p>

<p>Only change I'd make here would be to use the product-assignment operator.</p>

<pre><code>factorial *= index;
</code></pre>

<hr>

<h1>Tail-Recursion</h1>

<p><code>getFactorialWithRecusion()</code> / <code>factorialRecursion()</code>:</p>

<p>Since the value returned from a recursive call to <code>factorialRecursion()</code> is not directly returned from an outer call, tail-recursion-optimization cannot be performed.  This means the stack can overflow if a deep recursive call is made.  If the value returned from a recursive call is directly returned, tail-recursion-optimization by the compiler can eliminate recursive calls.</p>

<pre><code>public long getFactorialWithRecursion(final int number) {
    return factorialRecursion(number, 1);
}

private long factorialRecursion(int number, long accumulator) {
    if (number &lt;= 1)
        return accumulator;
    else
        return factorialRecursion(number - 1, accumulator * number);
}
</code></pre>

<p>The statement <code>return factorialRecursion(number - 1, accumulator * number);</code> can be translated by the compiler into a jump to the start of the function, with modified arguments.</p>

<hr>

<h1>Job-Size</h1>

<p>This loop is a no-op for values of <code>number</code> less than 10!</p>

<pre><code>    int pivot = JOB_SIZE;

    while(pivot &lt;= number) {
        // ...
    }
</code></pre>

<p>So the multi-threaded factorial does not calculate the result properly for <code>number &lt; 10</code>!</p>

<p>The size of a <code>PartialFactorialJob</code> can exceed <code>JOB_SIZE</code>.  Consider <code>number = 19</code>.  <code>pivot</code> equals 10, so <code>pivot + JOB_SIZE &gt; number</code> is <code>true</code>, and <code>pivot</code> is assigned <code>19</code>, so the first and only job submitted is <code>new PartialFactorialJob(1, 19)</code>.</p>

<p>What you want is the while-loop to test for <code>startIndex</code> not greater than <code>number</code>:</p>

<pre><code>int startIndex = 1;

while (startIndex &lt;= number) {
    int endIndex = Math.min(startIndex + JOB_SIZE - 1, number);
    partialFactorialJobs.add(new PartialFactorialJob(startIndex, endIndex));
    startIndex += JOB_SIZE;
}
</code></pre>

<p>But now this looks like a for-loop:</p>

<pre><code>for (startIndex = 1; startIndex &lt;= number; startIndex += JOB_SIZE) {
    int endIndex = Math.min(startIndex + JOB_SIZE - 1, number);
    partialFactorialJobs.add(new PartialFactorialJob(startIndex, endIndex));
}
</code></pre>

<hr>

<h1>Argument Limits</h1>

<p><code>21!</code> exceeds the size of a <code>long</code>.  You might want:</p>

<pre><code>if (number &lt; 0 || number &gt; 20)
    throw new IllegalArgumentException("Factorial out-of-range")
</code></pre>

<p>Or you may want to use <code>BigInteger</code> for calculation of larger factorials.</p>

<hr>

<h1>Bonus Methods</h1>

<p>You can also use the Stream API to calculate factorials:</p>

<pre><code>long getFactorialWithStream(final int number) {
    return LongStream.rangeClosed(1, number)
                     .reduce(1, (x,y) -&gt; x*y);
}

long getFactorialWithParallelStream(final int number) {
    return LongStream.rangeClosed(1, number)
                     .parallel()
                     .reduce(1, (x,y) -&gt; x*y);
}
</code></pre>
    </div>