<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Concept</h2>

<p>Obligatory XKCD comic, before I begin:</p>

<p><a href="https://xkcd.com/936/" rel="noreferrer"><img src="https://imgs.xkcd.com/comics/password_strength.png" alt="XKCD Password Strength"></a></p>

<p>Enforcing password strength by requiring human-unfriendly characters is no longer considered good practice.  Nevertheless, I'll review the code as you have written it.</p>

<h2>"Obvious" simplifications</h2>

<ul>
<li><p>Any code with the pattern <code>if <i>bool_expr</i>: return True; else: return False</code> should be written simply as <code>return <i>bool_expr</i></code>.</p></li>
<li><p>Strings are directly iterable; there is no need to convert them into a list first, using <code>.split()</code>.  In other words, the code would work the same if you just wrote:</p>

<pre><code>upper_list = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
</code></pre></li>
<li><p>Better yet, you could just use <a href="https://docs.python.org/2/library/string.html#string.ascii_uppercase" rel="noreferrer"><code>string.ascii_uppercase</code></a>.</p></li>
<li><p>The <code>uppers += 1</code> counting loop could be written more expressively using the <a href="https://docs.python.org/2/library/functions.html#sum" rel="noreferrer"><code>sum()</code></a> built-in function.  Actually, in this case, since you only care whether <code>uppers &gt; 0</code>, you could just use the <a href="https://docs.python.org/2/library/functions.html#any" rel="noreferrer"><code>any()</code></a> function.</p></li>
</ul>

<p>With those changes, your <code>check_upper()</code> function becomes a one-liner:</p>

<pre><code>def contains_upper(s):
    return any(c in ascii_uppercase for c in s)
</code></pre>

<p>I've renamed <code>check_upper()</code> to <code>contains_upper()</code> to make it clear that the function returns <code>True</code> or <code>False</code>.  Also, avoid using variable names, like <code>input</code>, that coincide with names of built-in functions: it could cause trouble if you ever want to use <a href="https://docs.python.org/2/library/functions.html#input" rel="noreferrer"><code>input()</code></a>.</p>

<h2>Code duplication</h2>

<p>Most of your <code>check_<i>something</i>()</code> functions are identical.  You should generalize, instead of duplicating the code.</p>

<pre><code>from string import ascii_uppercase, ascii_lowercase, digits

def contains(required_chars, s):
    return any(c in required_chars for c in s)

def contains_upper(s):
    return contains(ascii_uppercase, s)

def contains_lower(s):
    return contains(ascii_lowercase, s)

def contains_digit(s):
    return contains(digits, s)

def contains_special(s):
    return contains(r"""!@$%^&amp;*()_-+={}[]|\,.&gt;&lt;/?~`"':;""", s)

def long_enough(s):
    return len(s) &gt;= 8
</code></pre>

<p>Note that I've used a <a href="https://docs.python.org/2/reference/lexical_analysis.html#string-literals" rel="noreferrer">raw long string</a> to help deal with the need for backslashes in the punctuation string.</p>

<h2>validate_password()</h2>

<p>The <code>check_dict</code> isn't doing anything for you.  You'd be no worse off with five boolean variables. You are also calling each validation function twice.</p>

<p>The <code>&amp;</code> (<a href="https://docs.python.org/2/reference/expressions.html#binary-bitwise-operations" rel="noreferrer">binary bitwise AND</a>) operator is not quite appropriate here.  The <code>and</code> (<a href="https://docs.python.org/2/reference/expressions.html#boolean-operations" rel="noreferrer">boolean AND</a>) operator would be more appropriate. Even though the results appear identical, the execution differs: the logical <code>and</code> allows short-circuit evaluation. </p>

<p>Personally, I'd write it this way, gathering up a list of all of the failure messages:</p>

<pre><code>def validate_password(password):
    VALIDATIONS = (
        (contains_upper, 'Password needs at least one upper-case character.'),
        (contains_lower, 'Password needs at least one lower-case character.'),
        (contains_digit, 'Password needs at least one number.'),
        (contains_special, 'Password needs at least one special character.'),
        (long_enough, 'Password needs to be at least 8 characters in length.'),
    )
    failures = [
        msg for validator, msg in VALIDATIONS if not validator(password)
    ]
    if not failures:
        return True
    else:
        print("Invalid password! Review below and change your password accordingly!\n")
        for msg in failures:
            print(msg)
        print('')
        return False
</code></pre>

<p>If the function returns <code>True</code> in one place, then it would be good practice to return <code>False</code> instead of <code>None</code> in the other branch, for consistency.</p>

<h2>Free-floating code</h2>

<p>It is customary to put <code>if __name__ == '__main__':</code> around the statements in the module that are not inside a function.  That way, you could incorporate the functions into another program by doing <code>import psk_validate</code> without actually running this program.</p>

<p>Calling <code>sys.exit(0)</code> is rarely desirable or necessary, if you structure the code properly.  Here, all you needed was a <code>break</code>.</p>

<pre><code>if __name__ == '__main__':
    while True:
        password = raw_input("Enter desired password: ")
        print()
        if validate_password(password):
            print("Password meets all requirements and may be used.\n")
            print("Exiting program...\n")
            break
</code></pre>
    </div>