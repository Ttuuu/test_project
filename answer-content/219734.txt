<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I have written parsers for several similar file formats, and one time I started with the same idea as you: iterate over the lines and record the current state in some boolean variables. Over time, these parsers got too large to understand. Therefore I switched to a different strategy: instead of recording the current state in variables, record it implicitly in the code that is currently executed. I structured the parser like this:</p>

<pre><code>def parse_file(lines: Lines):
    sections = []
    while not lines.at_end():
        section = parse_section(lines)
        if section is None:
            break
        sections.append(section)
    return sections

def parse_section(lines: Lines):
    name = lines.must_match(r"^\[(\w+)\]$")[1]
    indices_str = lines.must_match(r"\s*indices:\s*(\d+(\s*\d+))$")[1]
    data = []

    while not lines.at_end():
        row = parse_row(lines)
        if row is None:
            break
        data.append(row)

    indices = map(int, indices_str.split())
    return Section(name, indices, data)
</code></pre>

<p>As you can see, each part of the file structure gets its own parsing function. Thereby the code matches the structure of the file format. Each of the functions is relatively small.</p>

<p>To make these functions useful, they need a source of lines, which I called <code>Lines</code>. This would be another class that defines useful function such as <code>must_match</code>, which makes sure the "current line" matches the regular expression, and if it doesn't, it throws a parse error. Using these functions as building blocks, writing and modifying the parser is still possible, even when the file format becomes more complicated.</p>

<p>Another benefit of having these small functions is that you can test them individually. Prepare a Lines object, pass it to the function and see what it returns. This allows for good unit tests.</p>

<p>The <code>Lines</code> class consists of a list of lines and the index of the current line. As you parse the file, the index will advance, until you reach the end of the lines.</p>

<hr>

<p>Regarding your code:</p>

<p>I don't like the union types very much. They make the code more complicated than necessary. For example, when stripping the comments, you actually only need the single comment marker <code>#</code>. Therefore all the list handling can be removed, and the comment character doesn't need to be a parameter at all.</p>

<p>Stripping the comments at the very beginning is a good strategy since otherwise you would have to repeat that code in several other places.</p>

<p>In that comment removal function you declared that the comment may also be <code>None</code>, but actually passing <code>None</code> will throw an exception.</p>

<p>Be careful when opening files. Every file that is opened must be closed again when it is not needed anymore, even in case of exceptions. Your current code does not close the file when a parse error occurs. This is another reason against union types. It would be easier to have separate functions: one that parses from a list of strings and one that parses from a file. How big are the files, does it hurt to load them into memory as a single block? If they get larger than 10 MB, that would be a valid concern.</p>
    </div>