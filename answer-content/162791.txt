<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Also, I was looking for an answer how to flatten (and automate) calls to rl.question(). In my solution I used Promises - chained - to display questions sequentially.</p>

<pre><code>const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

const QUESTIONS = {
    action1: ['A1: Question 1', 'A1: Question 2', 'A1: Question 3'],
    action2: ['A2: Question 1', 'A2: Question 2', 'A2: Question 3']
}

let askQuestions = (actionKey) =&gt; {
    return new Promise( (res, rej) =&gt; {
        let questions = QUESTIONS[actionKey];

        if(typeof questions === 'undefined') rej(`Wrong action key: ${actionKey}`);


        let chainQ = Promise.resolve([]); // resolve to active 'then' chaining (empty array for answers)

        questions.forEach(question =&gt; {
          chainQ = chainQ.then( answers =&gt; new Promise( (resQ, rejQ) =&gt; {
                rl.question(`${question}: `, answer =&gt; { answers.push(answer); resQ(answers); });
            })
          );
        });

        chainQ.then((answers) =&gt; {
            rl.close();
            res(answers);
        })
    });
};


let handleError = (err) =&gt; {
    console.log(`ERROR: ${err}`);
}


let doSomethingwithAnswers = (answers) =&gt; {
    return new Promise( (res, rej) =&gt; {
        console.log('OUTPUT:');
        console.dir(answers);
    });
}

askQuestions('action1')
    .then(doSomethingwithAnswers)
    .catch(handleError);
</code></pre>

<p>Output:</p>

<pre><code>A1: Question 1: a
A1: Question 2: b
A1: Question 3: c
OUTPUT:
[ 'a', 'b', 'c' ]
</code></pre>

<hr>

<p>If you want the action to be chosen by the user, add these functions:</p>

<pre><code>let showInterface = () =&gt; {
    return new Promise( (res, rej) =&gt; {
        console.log('Select action (enter action name):')
        console.log('-'.repeat(30));
        Object.keys(QUESTIONS).forEach(actionKey =&gt; {
            console.log(`${actionKey}`);
        });
        console.log('-'.repeat(30));
        res();
    });
};


let askQuestionForActionKey = () =&gt; {
    return new Promise( (res, rej) =&gt; {
        rl.question('Action key: ', actionKey =&gt; res(actionKey));
    });
}
</code></pre>

<p>And change main procedure to:</p>

<pre><code>showInterface()
    .then(askQuestionForActionKey)
    .then(askQuestions)
    .then(doSomethingwithAnswers)
    .catch(handleError);
</code></pre>

<p>Now output shoud be like:</p>

<pre><code>Select action (enter action name):
------------------------------
action1
action2
------------------------------

Action key: action1
A1: Question 1: a
A1: Question 2: b
A1: Question 3: c
OUTPUT:
[ 'a', 'b', 'c' ]
</code></pre>

<p>In case of error (e.g. enter non-existent action 'action3'):</p>

<pre><code>Select action (enter action name):
------------------------------
action1
action2
------------------------------
Action key: action3
ERROR: Wrong action key: action3
</code></pre>

<hr>

<p>It's very easy to apply this solution to your problem. Just define your questions as:</p>

<pre><code>const QUESTIONS = {
    sequence: ['Thing One', 'Thing Two', 'Thing Three'] 
};
</code></pre>

<p>Your callback with answers:</p>

<pre><code>let doSomethingwithAnswers = (answers) =&gt; {
    return new Promise( (res, rej) =&gt; {
        console.log('Make stuff with answers:');
        console.dir(answers);
    });
}
</code></pre>

<p>And the procedure may be unchanged - when a user has the ability to select a set of questions (actions):</p>

<pre><code>showInterface()
    .then(askQuestionForActionKey)
    .then(askQuestions)
    .then(doSomethingwithAnswers)
    .catch(handleError);
</code></pre>

<p>Output:</p>

<pre><code>Select action (enter action name):
------------------------------
sequence
------------------------------
Action key: sequence
Thing One: a
Thing Two: b
Thing Three: c
Make stuff with answers:
[ 'a', 'b', 'c' ]
</code></pre>

<p>Or if you want to apply to concrete questions set just use:</p>

<pre><code>askQuestions('sequence')
    .then(doSomethingwithAnswers)
    .catch(handleError);
</code></pre>

<p>Output:</p>

<pre><code>Thing One: a
Thing Two: b
Thing Three: c
Make stuff with answers:
[ 'a', 'b', 'c' ]
</code></pre>

<p>I hope it will be useful :)
Enjoy!</p>
    </div>