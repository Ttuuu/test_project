<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>    Public ReadOnly Property Count As Integer Implements IReadOnlyCollection(Of Integer()).Count
        Get
            Return CInt(LongCount)
</code></pre>
</blockquote>

<p>Should this be</p>

<pre><code>            Return If(LongCount &gt; Integer.MaxValue, Integer.MaxValue, CInt(LongCount))
</code></pre>

<p>? MSDN doesn't seem to be explicit on what <code>Count</code> should return if the collection has more than <code>MaxValue</code> elements, but I can see some advantage to giving the nearest possible answer rather than the lowest bits.</p>

<hr>

<blockquote>
<pre><code>    Public ReadOnly Property LongCount As Long
</code></pre>
</blockquote>

<p>It seems to me that if the number of elements could be so big that you need a <code>LongCount</code> then <code>IEnumerable</code> is not the right interface to implement. At the very least, you need some way to randomly sample elements because you can't count on being able to iterate through all of them in your lifetime.</p>

<hr>

<blockquote>
<pre><code>            If choose &lt; 1 Then Return 0 'If choosing 0 combinations, count must be 0 rather than 1
</code></pre>
</blockquote>

<p>This may be appropriate for your use case, but it's non-standard. For general purpose use I would expect it to return the empty set, once.</p>

<hr>

<blockquote>
<pre><code>            Dim minNumer As Long = If(repetition, total - 1, If(choose &lt; total - choose, total - choose, choose))
            Dim maxDenom As Long = If(repetition, choose, If(choose &lt; total - choose, choose, total - choose))
</code></pre>
</blockquote>

<p>The nested <code>If</code>s are a bit hard to follow, but I think that this has an optimisation which only applies when <code>Not repetition</code>. IMO it would be worth pulling out a static method which just calculates the binomial coefficient, employing the optimisation, and then this method would be reduced to little more than</p>

<pre><code>              return Binomial(If(repetition, total+choose-1, total), choose)
</code></pre>

<p>Also, I think you can use one fewer auxiliary variable if you reorder the calculation as </p>

<p><span class="math-container">$$n \backslash 1 \times (n-1) \backslash 2 \times (n-2) \backslash 3 \times \cdots \times (n-r+1) \backslash r$$</span></p>

<hr>

<p><code>GetEnumerator()</code> looks fairly clean - I'm a C# user rather than a VB.Net user, and I find it ugly, but I think that's almost entirely VB syntax rather than your code. There is one thing which it would be nice to tidy up if possible:</p>

<blockquote>
<pre><code>        Dim value(choose - 1) As Integer
        If Not repetition Then value = Enumerable.Range(0, choose).ToArray
</code></pre>
</blockquote>

<p>I assume that the <code>Dim</code> assigns an array which is then thrown straight in the garbage <code>If Not repetition</code>. If so, can that be avoided?</p>

<hr>

<p>To your specific questions:</p>

<blockquote>
  <ol>
  <li>The class implements <code>IReadOnlyCollection(Of Integer)</code> rather than <code>IEnumerable(Of Integer)</code> as the former provides a <code>Count</code> property. The latter has a <code>Count</code> extension method that iterates over the collection to count the items (and so can be slow for large collections), I believe that by implementing <code>IReadOnlyCollection(Of Integer)</code>, I am signalling to the user that my <code>Count</code> property is reasonably efficient.</li>
  </ol>
</blockquote>

<p>Yes. Unfortunately, the <code>Enumerable.Count</code> extension method only has a special case for <code>ICollection(Of T)</code>, and not for <code>IReadOnlyCollection(Of T)</code>.</p>

<p>An idea for further extension would be to implement <code>IReadOnlyList(Of Integer())</code> and allow direct indexing. That would be a big step towards what I commented earlier about random selection.</p>

<blockquote>
  <ol start="2">
  <li>The number of possible combinations can quickly become very large, so in addition to a <code>Count</code> property that returns an <code>Integer</code>, I provide a <code>LongCount</code> property that returns a <code>Long</code>. In both cases, I allow an <code>OverflowException</code> to be thrown if the number of combinations is too high. I believe that I have ensured that I have avoided any <code>OverflowException</code> in other cases by alternating the multiplication and division operations during the calculations.</li>
  </ol>
</blockquote>

<p>Perhaps instead of returning a <code>Long</code> it should return a <code>System.Numerics.BigInteger</code>?</p>

<blockquote>
  <ol start="3">
  <li>I chose to allow the user to specify that zero numbers should be selected (and in that case, the iterator function exits without yielding anything. In my application, the number of items to be picked is calculated and could be zero; treating this as a collection of zero objects works for me, but I'm not sure whether or not that would seem reasonable to another user.</li>
  </ol>
</blockquote>

<p>As noted above, this is not the standard combinatorial interpretation of selecting 0 objects.</p>

<blockquote>
  <ol start="4">
  <li>I am forced to implement the non-generic <code>IEnumerable.GetEnumerator</code> function and have done so with the <code>GetEnumerator1</code> function. This looks odd to me, is there a better way of satisfying the requirements of the interface?</li>
  </ol>
</blockquote>

<p>I don't know enough about VB syntax to give a definite answer, but I suspect that there isn't a better way.</p>
    </div>