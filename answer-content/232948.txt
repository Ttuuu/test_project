<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Avoid <code>using namespace std</code></h1>

<p>The <code>std</code> namespace isn't designed for wholesale importation into the global namespace like that, and it contains lots of names that are likely to disagree with your own identifiers (possibly leading to unexpected overloads, and thus a different to expected behaviour).  Leave the standard library identifiers where they belong, and enjoy clearer and more reliable code.</p>

<h1>Avoid the infinite loop</h1>

<p>Sometimes there's really a need for an infinite loop, but this doesn't appear to be one of those.  What we have here looks like two loops, with the <code>if</code> switching between states.  It's more honest and easier to read if we show the two loops clearly:</p>

<pre><code>for (num = 1;  num &lt; LLONG_MAX;  ++num) {
    bool dividesAll = true;
    for (int i = divMin;  i &lt; divMax;  ++i) {
        if (num % i) {
            dividesAll = false;
            break;
        }
    if (dividesAll) {
        std::cout &lt;&lt; num &lt;&lt; '\n';
        return 0;
    }
}
</code></pre>

<p>It becomes clearer again if we refactor a function:</p>

<pre><code>bool dividesAll(long long n, int min, int max) {
    for (int i = min;  i &lt; max;  ++i) {
        if (n % i) {
            return false;
        }
    return true;
}
</code></pre>

<p>and use it:</p>

<pre><code>for (num = 1;  !dividesAll(num, divMin, divMax);  ++num) {
    // empty body
}
std::cout &lt;&lt; num &lt;&lt; '\n';
return 0;
</code></pre>

<h1>Use unsigned types</h1>

<p>There's no use of negative numbers, so we can stick to unsigned integer types here.</p>

<h1>Improve the algorithm</h1>

<p>Brute-force search is a poor choice of technique for this problem.  Like all Project Euler challenges, you should be able to use some mathematical reasoning to produce much more efficient code.</p>
    </div>