<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>Meaning that I have to put half of my logic concerning the lazy property in the constructor, and having more boilerplate code.</p>
</blockquote>

<p>This is a little speculative, but I think you have an XY problem. You're trying to reduce boilerplate, but there are probably better ways to do that than what you've suggested.</p>

<p>If I understand correctly, your problem is that your classes look something like this:</p>

<pre><code>public class MyClass
{
    private Lazy&lt;string&gt; _MyStringValue;
    // ...

    public MyClass()
    {
        this._MyStringValue = new Lazy&lt;string&gt;(() =&gt; {
            var builder = new StringBuilder();
            builder.Append("a");
            // 50 more lines of expensive construction
            return builder.ToString();
        });

        // 100 more lines constructing OTHER lazy stuff
    }
}
</code></pre>

<p>Gloss over the details of building up the value; it's just an example. The important point is that you have all this logic here deep in your constructor.</p>

<p>I think there are two things you can do to alleviate this problem:</p>

<ol>
<li><p><strong>Parameterize</strong></p>

<p>Why put all this logic in the constructor? You're losing a lot of reusablity by doing that anyway. So make these things parameters and construct them elsewhere:</p>

<pre><code>public class MyClass
{
    private Lazy&lt;string&gt; _MyStringValue;
    // ...

    public MyClass(Lazy&lt;string&gt; myStringValue)
    {
        this._MyStringValue = myStringValue;
    }
}
</code></pre></li>
<li><p>You can embed this construction logic in a method, and then pass <em>the method</em> to the <code>Lazy</code> constructor:</p>

<pre><code>class MyStringValueMaker
{
    // Could be an instance method if that's more appropriate.
    // This is just for example
    public static string MakeValue()
    {
        var builder = new StringBuilder();
        builder.Append("a");
        // 50 more lines of expensive construction
        return builder.ToString();
    }
}
</code></pre>

<p>And then elsewhere:</p>

<pre><code>var myClass = new MyClass(new Lazy&lt;string&gt;(MyStringValueMaker.MakeValue));
</code></pre></li>
</ol>

<p>Now suddenly everything is much better organized, more reusable, and simpler to understand.</p>

<p>If that's not what your class originally looked like, well, then I think you'd be better off posting a new question asking for a review on the original class to get ideas about how to improve.</p>
    </div>