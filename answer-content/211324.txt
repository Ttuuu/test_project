<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Best general answer</h2>
<p><a href="https://codereview.stackexchange.com/a/211318/140921">@Mathias Ettinger's answer</a> is very comprehensive for the big picture design changes, so I would probably follow that one for my general design (though your question has piqued my interest in programming this question, so I may come back with my own variant at some point). However, I do have some useful tidbits to offer in my answer, and they can hopefully help you improve your knowledge, even if they aren't the big picture for this problem.</p>
<h2>Answering the meta question</h2>
<blockquote>
<p>In what cases would this implementation of THLPE require more formality?</p>
<p>...</p>
<p>Given that the code shown below was meant to simply test the ideas provided in the solution for the puzzle, it what case(s) would it be best to rewrite the program and clean it up if code quality is to be improved without having regards for how the problem and its solution reads?</p>
</blockquote>
<p>Code Review is a place for general review of code quality as described in <strong>Do I want the code to be good code?</strong> in our <a href="https://codereview.stackexchange.com/help/on-topic">on-topic page</a>. I will be reviewing just as described there. I am not approaching the problem in this way <em>just</em> because of how our rules are phrased. In my experience in general coding, I've found that following best practices in general helps to achieve better reliability, and I think most would agree with me on this. There is really not any conflict between best practices and reliability; they go hand in hand.</p>
<p>On the other hand, best practices and <em>performance</em> can sometimes come into conflict. However, for many (most?) problems, optimizing performance beyond best practices is not a real issue, hence the common programming aphorism of <a href="https://en.wikipedia.org/wiki/Program_optimization#When_to_optimize" rel="nofollow noreferrer">premature optimization</a>. And when this becomes a common enough issue in an active programming language (like Python), the language can be revised to address it, or alternate solutions can be developed by the community (like <a href="https://en.wikipedia.org/wiki/Cython" rel="nofollow noreferrer">Cython</a> for C-optimized Python code).</p>
<h1>Review</h1>
<h2><a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself" rel="nofollow noreferrer">Don't repeat yourself</a>!</h2>
<p>There's one extremely noticeable bad practice in your program. <code>question_1</code>, <code>question_2</code>, and <code>question_3</code> are all verbatim identical aside from their names. Instead of having repeated code, there should be a single <code>question</code> function, which I would probably renamed to <code>ask_question</code> for more clarity. If the number of the question was important, then it should be a parameter to that <em>one</em> function (probably named <code>num</code>, unless it has a more specific designation). However, the number does not matter in this problem. The only information that matters for this puzzle is the</p>
<p>Repeating code is a bad practice because there's more code to keep track of when revising the code, so it's easier to introduce a continuity error. It is also generally easier to read shorter code.</p>
<h2>Don't abuse <code>globals()</code></h2>
<p>You should be wary of using <code>globals()</code> because it introduces another layer of complexity into a program. Unless you're sure that you need it, you should try to find another way to accomplish your goal. In your case, you could have a dict or even an iterable to store the gods, so there's no reason to haphazardly query globals.</p>
<h2>Use the right function for the situation</h2>
<p>The following two lines come to my attention:</p>
<pre><code>    a, b, c = sample(('True', 'False', 'Random'), 3)
    da, ja = sample(('yes', 'no'), 2)
</code></pre>
<p>Here, you're using <code>random.sample</code> to randomly order a tuple. However, there is some implicit repetition here: you're entering the length of each tuple (3 and 2 respectively), when that information could be retrieved from the tuple itself through the <code>len</code> built-in function. This repetition occurs because <code>sample</code> is the <strong>wrong</strong> function for this situation: you actually want <a href="https://docs.python.org/library/random.html#random.shuffle" rel="nofollow noreferrer"><code>random.shuffle</code></a> if you're trying to reorder an iterable (though it modifies its argument in-place, so it would need a list instead of a tuple).</p>
<p>However, for the big picture, I wouldn't even use a randomly generated list like this; I would probably use enums in a way similar to <a href="https://codereview.stackexchange.com/a/211318/140921">@Mathias Ettinger's answer</a>.</p>
    </div>