<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm just going to take a look at the <code>interpret</code> function for now at least. I'm also up for suggestions to improve the review as I've not had a lot of time to go through it.</p>

<h3>The Interpret Function</h3>

<p>To start off, the function is doing two things; it's splitting the <code>line_of_code</code> into tokens(rather strictly for a programming language) and then interpreting it. This function should probably be split into two; a tokenizing function and the actual interpreter, I'll elaborate later.</p>

<p>As a bit of a tangent, most programming language would--after tokenization, create what's called an an Abstract Syntax Tree(AST) to validate code and also because things like an if statement can have a "body"; code nested inside of it which makes it a tree. This is enforced in Python by a visual indent, Linny does not appear to have a tree structure though. This would be a good place to begin if expanding the language as this limits the language.</p>

<p>Generally, your interpret function is overall much too permissive in several places because it doesn't check every token, and the method begins with checks that are subtly wrong;</p>

<ul>
<li><p><code>words</code> is a misleading name--for a programming language they are more like tokens that Linny seems to guarantee are delimited by spaces(most languages, like Python do not).</p></li>
<li><p><code>words</code>' type is not guaranteed to be an array by the time you check <code>words == []</code>, not unless it is passed as a string or already is an array. You'll likely want to just check that it's passed a string and raise an exception if it is not, or simply use type hints instead. Note that type <em>hints</em> aren't automatically enforced, they're there to explain to a user what the function does, ex <code>def interpret(line_of_code: str)</code> explains for a user that the code will probably error if it isn't a string.</p></li>
<li><p><code>"//" in words[0]</code> will think text like <code>foo//bar</code> is <em>all</em> a comment(i.e. foo would be assumed to be a comment, not only bar) because <code>in</code> looks "in" the whole string. You probably want <code>words[0].startswith("//")</code> for na√Øve approaches, but if comments are allowed without whitespace before it as the <code>foo//bar</code> example shows, more work would have to be done.</p></li>
</ul>

<blockquote>
  <p><strong>Note:</strong> All of the above code I've covered should probably be put into a function such as <code>tokenize</code>. This is so that you can create more advanced logic later and leave the <code>interpret</code> function with a single responsibility.</p>
</blockquote>

<p>The next component, the actual interpreting also has a few flaws, the most broad is that it is overall a bit hard to read/understand because of the lack of an AST. Passing in an AST to interpret it, instead of working with raw tokens, would allow the logic for parsing which command to be simplified. Overall this seems to be a reoccurring theme.</p>

<p>The out command, annotated:</p>

<pre><code># You commented the next line. It'd probably be better as: "out command" or something more descriptive.
# You also should add a space after the "#"; it's the typical Python style.
#If user wants to output a value
if len(words) == 3 and \ # This is probably too strict, unless you enforce one command per line.
                         # Secondly, this could be added to a tokenize function.
       words[0] == "out" and \ # NOTE: In an AST this would be the node name
       already_defined(words[1]) and \ # no error happens if it isn't already defined.
       words[2] == ";": # The tokenize function could handle this; expect a semicolon and strip it off.
        print(VARIABLES[words[1]]['value'])
        return
</code></pre>

<p>These notes apply to most, but now for the unique reviews of each one:</p>

<p>For the type command, you have the checks in a bit of a weird order. You should check the tokens in number order. Also, your nested check <code>words[0] == "type"</code> makes your <code>words[0] in MISC_KEYWORDS</code> check redundant; you should just use the <code>words[0] == "type"</code> because if <code>word[0] == "type"</code>, <code>word[0]</code> must be in <code>MISC_KEYWORDS</code> because it's a constant(by convention) and <code>"type"</code> is in <code>MISC_KEYWORDS</code>, in fact it's the only item. Those constants, such as <code>MISC_KEYWORDS</code> do actually seem to be a start towards a more versatile AST or language grammar, which is great.</p>

<p>Your <code>set</code> command is very flawed in its check. It only verifies that it has 5 tokens and ends with a semicolon; <code>foo bar lorem ipsum ;</code> would make your program think it's a set command. There may be checking in <code>add_to_variables</code>, but that sort of check should go in a tokenizer anyways. Then you could be passed something like <code>command</code> and check <code>command.name</code> instead.</p>

<p>Your next command, <code>edit</code> has a similar issue; it doesn't check anything except a semi-colon before trying to use it. If you ever expand your program this will be an issue because if anything has 5 or 4 tokens your code as is will believe it is a <code>set</code> or <code>edit</code> command(as I've dubbed them).</p>

<p>Lastly... your program just ends after this. If I give it <code>foobar lorem ipsum//this is incredibly invalid ; 12fasdf</code> the <code>interpret</code> function will just do nothing with it, at minimum a user would expect feedback that "this is invalid". This'd be something to catch at the tokenization stage; nothing invalid should ever be possible to feed to the interpreter function unless run directly(which it shouldn't be).</p>

<p>Here's what this looks like all together, and plus a little bit.</p>

<pre><code>def tokenize(line_of_code: str):
    """Tokenizes Linny code """

    # Now it's more obvious what you're doing; you're checking for an empty line.
    if line_of_code == "":
        return

    # Everything is a comment.
    if line_of_code.startswith("//"):
        return

    tokens = tokens.split() # They were warned with the type hint, you can always be more friendly and type check though.
    # There is *way* more you could do here though, like most of the command checking etc. It's just a lot more to change so I didn't.

    return tokens


def interpret(tokens):
    """Interprets Linny tokens"""

    # Out command
    if len(tokens) == 3 and \
       tokens[0] == "out" and \
       already_defined(tokens[1]) and \
       tokens[2] == ";":
        print(VARIABLES[tokens[1]]['value'])
        return

    # Type command
    if len(tokens) == 3 and \
       tokens[0] == "type":
       already_defined(tokens[1]) and \
       tokens[2] == ";":
        print(VARIABLES[tokens[1]]['data_type'])
        return

    # Create a variable
    if len(tokens) == 5 and \
       tokens[0] in VARIABLE_KEYWORDS and \
       # no check for the name (seemingly) needed.
       tokens[2] == "=" and \
       tokens[4] == ";":
        add_to_variables(
            name=tokens[1],
            value=tokens[3],
            data_type=tokens[0],
            line_number=0 # The line number probably shouldn't always be zero, or be in the function either way.
        )
        return

    # Edit a variable
    if len(tokens) == 4 and \
       is_variable(tokens[0]) == "" and \
       tokens[1] == "=" and \
       # is valid... value?
       tokens[3] == ";":
        change_value(tokens[0], tokens[2])
        return

    # No valid commands... what should *you* do?

</code></pre>

<blockquote>
  <p><strong>Note:</strong> Writing a whole language is a complicated beast. I have suggested some (simplified) tips that real languages follow, but this review could spiral into minute details not seemingly to accord with the expected level of responses. I'd suggest finding some good books or articles on programming languages it if you're interesting in making a more complete one, but acquiring more programming skills would also be valuable to do prior.</p>
</blockquote>

<p>P.S. The type things in and get a result back style of coding that you describe is called a Read-eval-print loop or a <code>REPL</code>--that's (mostly) what you've made in your code.</p>

<p>P.P.S. A formatter and a linter wouldn't hurt if you don't already have one.</p>
    </div>