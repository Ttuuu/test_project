<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>According to the leetcode description one requirement of the algorithm is:</p>

<p><em>...must be better than O(n log n), where n is the array's size.</em></p>

<p>I am not 100% sure but i think you can't use the built-in <code>sorted</code> method of python since it has a time complexity of O(n log n). One possibility for this problem is a bucket sort approach.</p>

<p>The idea: </p>

<ol>
<li>Count frequency of elements in list.</li>
<li>Create a list of buckets with <code>len(nums) + 1</code> length</li>
<li>Iterate over the frequency <code>dict</code> and put elements in buckets according to their frequency</li>
<li>Iterate in reversed order over the bucket list and return <code>k</code> first elements.</li>
</ol>

<ul></ul>

<pre><code>def top_k_frequent(nums, k):
    cnt = {}
    for n in nums:
        cnt[n] = cnt.get(n, 0) + 1

    bucket = [[] for _ in range(len(nums)+1)]    
    for key, val in cnt.items():
        bucket[val].append(key)

    res = []
    for i in reversed(range(len(bucket))):
        if bucket[i]:
            res.extend(bucket[i])
        if len(res) &gt;= k:
            break

    return res[:k]
</code></pre>

<p><em>Please also see the more elegant approach to count with <code>dict</code> in python.</em></p>
    </div>