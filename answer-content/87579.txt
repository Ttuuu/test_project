<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>1. Review</h3>

<ol>
<li><p>The docstring doesn't explain what the function does, or how to call it, or what it returns. There's just a doctest.</p></li>
<li><p>If the code were reformatted to fit in 79 columns, <a href="https://www.python.org/dev/peps/pep-0008/#maximum-line-length" rel="noreferrer">as recommended by the Python style guide (PEP8)</a>, then we wouldn't have to scroll it horizontally to read it here at Code Review.</p></li>
<li><p><code>hexlify</code> and <code>unhexlify</code> are only used by the doctest, so they could be included there.</p></li>
<li><p><code>sys</code> is not used, so the import could be omitted.</p></li>
<li><p>The key derivation function is called <a href="https://en.wikipedia.org/wiki/PBKDF2" rel="noreferrer">PBKDF2</a>, so I think the function would be better named <code>pbkdf2</code>, not <code>pbkdf_two</code>.</p></li>
<li><p>I don't think that having default values for arguments to this function is a good idea. The caller needs to think about these values, not rely on the defaults. Note that <a href="http://tools.ietf.org/html/rfc2898" rel="noreferrer">RFC 2898</a> doesn't specify any particular values.</p></li>
<li><p>We're not running out of letters, so why not <code>password</code> instead of <code>passwd</code> and <code>digest_size</code> instead of <code>dgsz</code>?</p></li>
<li><p>The helper function <code>pbhelper</code> is called from only one place in the code, so there's nothing to be gained by making it into a local function.</p></li>
<li><p>The fourth argument to <code>pbhelper</code> is named <code>blocksize</code>, but this is very misleading: it's actually the (1-based) <em>index</em> of the block.</p></li>
<li><p>The iteration variable <code>j</code> is not used in the body of the loop. It's conventional to name such a variable <code>_</code>.</p></li>
<li><p>Since <code>j</code> is not used, it doesn't matter what values it takes, and so it's simpler to use <code>range(iters-1)</code> instead of <code>range(2, iters+1)</code>.</p></li>
<li><p>Since <code>h</code> is always the same, there's no need for it to be a parameter to the <code>prf</code> function.</p></li>
<li><p>The <code>msg</code> argument to <a href="https://docs.python.org/3/library/hmac.html#hmac.new" rel="noreferrer"><code>hmac.new</code></a> defaults to <code>None</code> so there's no need to specify it.</p></li>
<li><p>If the code used <a href="https://docs.python.org/3/library/functions.html#bytearray" rel="noreferrer"><code>bytearray</code></a> instead of <a href="https://docs.python.org/3/library/functions.html#bytes" rel="noreferrer"><code>bytes</code></a> then it would be portable between Python 2 and 3 without needing a version test.</p></li>
<li><p>Instead of:</p>

<pre><code>L = int(keylen/dgsz) # L - number of output blocks to produce
if keylen % dgsz != 0: L += 1
</code></pre>

<p>the number of blocks can be computed like this, using the floor division operator <code>//</code>:</p>

<pre><code>L = (keylen + dgsz - 1) // dgsz
</code></pre></li>
<li><p>But even more simply, why not just iterate until the result is long enough? That way you wouldn't have to compute <code>digest_size</code>, and it would have the advantage that in Python 3.4 or later, the caller could pass in the <em>name</em> of the digest algorithm, just as for <a href="https://docs.python.org/3/library/hmac.html#hmac.new" rel="noreferrer"><code>hmac.new</code></a>.</p></li>
</ol>

<h3>2. Revised code</h3>

<pre><code>import hmac
import struct

def pbkdf2(password, salt, iters, keylen, digestmod):
    """Run the PBKDF2 (Password-Based Key Derivation Function 2) algorithm
    and return the derived key. The arguments are:

    password (bytes or bytearray) -- the input password
    salt (bytes or bytearray) -- a cryptographic salt
    iters (int) -- number of iterations
    keylen (int) -- length of key to derive
    digestmod -- a cryptographic hash function: either a module
        supporting PEP 247, a hashlib constructor, or (in Python 3.4
        or later) the name of a hash function.

    For example:

    &gt;&gt;&gt; import hashlib
    &gt;&gt;&gt; from binascii import hexlify, unhexlify
    &gt;&gt;&gt; password = b'Squeamish Ossifrage'
    &gt;&gt;&gt; salt = unhexlify(b'1234567878563412')
    &gt;&gt;&gt; hexlify(pbkdf2(password, salt, 500, 16, hashlib.sha1))
    b'9e8f1072bdf5ef042bd988c7da83e43b'

    """
    h = hmac.new(password, digestmod=digestmod)
    def prf(data):
        hm = h.copy()
        hm.update(data)
        return bytearray(hm.digest())

    key = bytearray()
    i = 1
    while len(key) &lt; keylen:
        T = U = prf(salt + struct.pack('&gt;i', i))
        for _ in range(iters - 1):
            U = prf(U)
            T = bytearray(x ^ y for x, y in zip(T, U))
        key += T
        i += 1

    return key[:keylen]
</code></pre>
    </div>