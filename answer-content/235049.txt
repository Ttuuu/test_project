<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I must admit that I haven't really used firebase or done any android development and thus cannot answer your questions about the correctness of the code. I did wonder if using a <a href="https://firebase.google.com/docs/firestore/manage-data/transactions" rel="nofollow noreferrer">transaction</a> would help satisfy the need to prevent deletion of items if other items cannot be deleted, but maybe the batch handles that... Maybe the process to delete the file (i.e. <code>deleteFile</code>) should be added to <code>batch</code>, although maybe that not possible because it is the firestorage document.</p>

<h2>Good things</h2>

<p>The code makes good use of <code>const</code> for values that don't get re-assigned.</p>

<p>Indentation is consistent and helps readability of the code.</p>

<p>Functions aren't overly long.</p>

<p>There aren't many indentation levels because the first function will exit early in an error state.</p>

<h2>Suggestions</h2>

<p>I don't see any comments. The code does seem mostly explanatory as it is but it would be helpful to have some insights about the code - at least function parameter types, return types, etc. Over time it might become difficult to remember why you may have done something a certain way.</p>

<p>Many variables are declared and then only used once. There is little point in doing this. Many of those variables can be eliminated - e.g. <code>the_post</code>, <code>promise</code>, <code>stored_image_name</code>, <code>filePath</code>, <code>updateUserLikes</code>. </p>

<p>The variable name <code>deleteDbEntry</code> could be confusing to other readers of your code. A more appropriate name might be <code>dbEntryToDelete</code>.</p>

<p>The lambda function passed to <code>.then()</code> of <code>Promise.all()</code> could be simplified to an arrow function - e.g. </p>

<pre><code>return Promise.all([deleteFile, batch_commit]).then(_ =&gt; 1)
</code></pre>
    </div>