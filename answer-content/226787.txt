<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In those lines doing equality checks, you write <code>inputs[i]</code> <em>repeatedly</em>. This has two main problems:</p>

<ul>
<li>It's likely bulkier than necessary</li>
<li>If you ever need to change from <code>inputs[i]</code> to something else, you're needing to change it roughly 17 places! That's not ideal.</li>
</ul>

<p>You can fix at least the second problem by just creating an intermediate variable:</p>

<pre><code>for (int i = 0; i &lt; inputs.length; i++) {
    String curInput = inputs[i];  // Create an intermediate

    if (isNumber(curInput)) {  // Then use it everywhere
        stack.push(Double.parseDouble(curInput));
        continue;
    }
    if (curInput.equals("e") || curInput.equals("p") || curInput.equals("c")) {
    . . . 
</code></pre>

<p>Now, if you need to change what defines the current input, you only need to make the change in one place instead of 10+ places. This doesn't really help bulk though as <code>curInput</code> is only one character shorter. It can certainly help sometimes though.</p>

<p>The main problem with that whole bit though is you're writing <code>.equals(. . .)</code> all over the place. Whenever you need to check one variable against several inputs, consider using a <code>Set</code> (like a <a href="https://docs.oracle.com/javase/7/docs/api/java/util/HashSet.html" rel="nofollow noreferrer"><code>HashSet</code></a>):</p>

<pre><code>// Create a set containing the input to check against.
// The "asList" part is just a shortcut so you don't need to call "add" a whole bunch of times
Set&lt;String&gt; functionInputs = new HashSet&lt;&gt;(Arrays.asList("sq", "sin", "cos", "tan", "asin", "acos", "atan"));

. . .

} else if (functionInputs.contains(curInput)) {  // Now it's much shorter and cleaner
    function(inputs[i], stack);
</code></pre>

<p>Then the same can be done for the other types of checks. Create a set holding all the different types to check against, then use <code>contains</code> to check if the input is in that set.</p>

<p>For an explanation of the <code>asList</code> shortcut I'm using, see <a href="https://stackoverflow.com/questions/2041778/how-to-initialize-hashset-values-by-construction">here</a>.</p>

<hr>

<pre><code>} catch (

Exception e) {
    e.printStackTrace();
}
</code></pre>

<p>I don't like a couple things here:</p>

<ul>
<li>You're using odd formatting. I don't see why this should be split over a few lines.</li>
<li><p>You should <em>not</em> be blindly catching <code>Exception</code>. You're printing the stack trace when an error has occurred, so you aren't silencing helpful errors, but you are potentially catching errors you shouldn't be. It seems like your intent there is to catch a <code>NumberFormatException</code> thrown by <code>parseDouble</code>. If that's the case, catch that specifically:</p>

<pre><code>} catch (NumberFormatException e) {
    e.printStackTrace();
}
</code></pre></li>
</ul>

<p>I'd still restructure this though. It would probably be a better idea to pre-check and pre-process the input before running through it in the main loop. I'd pre-parse all the inputs in a separate function. That way, you can entirely remove the <code>try</code> from the loop in <code>main</code> and make the code cleaner. <code>main</code> is huge and is doing a lot. I would try to move a lot of that functionality out into separate, smaller functions. That will make each piece of code much clearer.</p>

<hr>

<p>Back onto the topic of duplication, look at this code and think about if it has unnecessary  duplication:</p>

<pre><code>double num = stack.pop();
switch (string) {
case "sq":
    stack.push(num * num);
    break;
case "sin":
    stack.push(Math.sin(Math.toRadians(num)));
    break;
case "cos":
    stack.push(Math.cos(Math.toRadians(num)));
    break;
case "tan":
    stack.push(Math.tan(Math.toRadians(num)));
    break;
case "asin":
    stack.push(Math.asin(Math.toRadians(num)));
    break;
case "acos":
    stack.push(Math.acos(Math.toRadians(num)));
    break;
case "atan":
    stack.push(Math.atan(Math.toRadians(num)));
    break;
}
</code></pre>

<p>How many times do you call <code>toRadians</code> in that code? What if you add more functions to deal with? Convert the number, then check against that:</p>

<pre><code>double num = stack.pop();
double rads = Math.toRadians(num);  // Store radians here
switch (string) {
case "sq":
    stack.push(num * num);
    break;
case "sin":
    stack.push(Math.sin(rads));
    break;
case "cos":
    stack.push(Math.cos(rads));
    break;
case "tan":
    stack.push(Math.tan(rads));
    break;
case "asin":
    stack.push(Math.asin(rads));
    break;
case "acos":
    stack.push(Math.acos(rads));
    break;
case "atan":
    stack.push(Math.atan(rads));
    break;
}
</code></pre>

<p>Note how you have <code>stack.push</code> over and over as well. You could get rid of that duplication by calling it after the <code>switch</code>:</p>

<pre><code>double num = stack.pop();
double rads = Math.toRadians(num);  // Store radians here

Double answer = null;  // 
switch (string) {
case "sq":
    answer = num * num;
    break;
case "sin":
    answer = Math.sin(rads);
    break;
case "cos":
    answer = Math.cos(rads);
    break;
case "tan":
    answer = Math.tan(rads);
    break;
case "asin":
    answer = Math.asin(rads);
    break;
case "acos":
    answer = Math.acos(rads);
    break;
case "atan":
    answer = Math.atan(rads);
    break;
}

if (answer) {
    stack.push(answer);
}
</code></pre>

<p>Now if you ever change how the stack you're using works, you don't need to make multiple changes. This still isn't great though. Now I have <code>answer =</code> duplicated. You could make use of some semi-advanced functional techniques and store the functions in a <code>Map</code>, and dispatch on it:</p>

<pre><code>import java.util.function.DoubleUnaryOperator;
import java.util.Map;
import java.util.HashMap;

Map&lt;String, DoubleUnaryOperator&gt; nameToFunc = new HashMap&lt;&gt;();
nameToFunc.put("sin", Math::sin);
nameToFunc.put("cos", Math::cos);
nameToFunc.put("tan", Math::tan);
. . . // And the rest of the mappings
</code></pre>

<p>Then</p>

<pre><code>private static void function(String string, Stack&lt;Double&gt; stack) {
    if (stack.size() &gt; 0) {
        double num = stack.pop();
        DoubleUnaryOperator f = nameToFunc.get(string);  // Get the func
        Double answer = f.applyAsDouble(Math.toRadians(num));  // Will be null if it's a bad string

        if (answer != null) {
            stack.push(answer);
        }
    }
}
</code></pre>

<p>For simplicity, I ignored the <code>"sq"</code> case though. Since it uses non-radian input, it's a special case.</p>

<p>The advantage of using this is, because it uses the same strings as the Set suggestion I made at the top, you can change the definition of <code>functionInputs</code> to be based on <code>nameToFunc</code>:</p>

<pre><code>Set&lt;String&gt; functionInputs = nameToFunc.keySet();
</code></pre>

<p>Now, if you add more function names to handle, you only need to update <code>nameToFunc</code> and they'll both be updated. You could also just avoid <code>functionInputs</code> altogether and just use <code>nameToFunc</code>. You could change your checks to:</p>

<pre><code>} else if (nameToFunc.get(curInput)) {  // "get" returns null (falsey) on a bad lookup
    function(inputs[i], stack);
</code></pre>

<hr>

<p>You write:</p>

<pre><code>if (isNumber(curInput)) {
    stack.push(Double.parseDouble(curInput));
    continue;
}
</code></pre>

<p>There's one performance-related issue with this: your <code>isNumber</code> already calls <code>parseDouble</code>. You could avoid this by changing <code>isNumber</code>:</p>

<pre><code>private static Double maybeParse(String input) {
    try {
        return Double.parseDouble(input);

    } catch (NumberFormatException e) {  // Only catch what you intend on catching! 
        return null;  // Return null on failure
    }
}
</code></pre>

<p>Then you can do:</p>

<pre><code>Double maybeN = maybeParse(curInput);
if (maybeN != null) {
    stack.push(maybeN);
    continue;
}
</code></pre>

<p>Instead of returning a <code>null</code> on a bad parse, you could also make use of <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html" rel="nofollow noreferrer"><code>Optional</code></a> here. What I'm showing in <code>maybeParse</code> is basically the Optional pattern, minus the use of the standard wrapper class. As long as you document that <code>null</code> may be returned, this should be fine. <code>Optional</code> is nice though in that it's self-documenting. </p>

<p>The use of <code>Double</code> will cause a little overhead due to the boxing/unboxing of the <code>double</code>. I expect the cost to be less than it is to parse the string twice though. </p>

<hr>

<p>Hopefully this gives you some good ideas. Good luck!</p>
    </div>