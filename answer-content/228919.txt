<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>EventController</h2>

<h3>Transformation</h3>

<blockquote>
  <p><em>the events have to be augmented/transformed in different ways</em></p>
</blockquote>

<p>The code provided in the question does not show event transformation. However, if targets are allowed to change the event data to fit the needs of the that specific target, you should provide a <strong>copy</strong> of the event to each target. </p>

<hr>

<h3>Dispatching</h3>

<blockquote>
  <p><em>There are different servers which have to be notified if something happens.</em></p>
</blockquote>

<p>Given the code provided in the question it doesn't look like multiple servers get notified. All we see is a controller dispatching an event received from any caller to the registered targets (in-process or external .. not clear). I can't tell whether each server has such controller running, or whether a master server receives the event from a UI and dispatches the events further to other servers.</p>

<blockquote>
<pre><code>EventController.SendEvent(IEvent e) // Does this code run on a master server that dispatches 
                                    // events to other servers, or does each server have its
                                    // own controller?
</code></pre>
</blockquote>

<p>Regardless where the code runs, if the requirement is that each target should get notified independently, I would make event publication more robust.</p>

<blockquote>
<pre><code>public void SendEvent(IEvent e)
{
    foreach (var target in Targets)
    {
        // - what if a target gets registered during publication of an event?
        // - what if a target throws an exception?
        // - what if a target takes ages to process the event?
        target.SendEvent(e);
    }
}
</code></pre>
</blockquote>

<p>Consider changing the following aspects:</p>

<ul>
<li>use a mutex to make event publication and target registration mutually exclusive operations (unless all targets are only set once at constructor, but that doesn't provide much configuration options at runtime)</li>
<li>catch and handle errors by individual targets without exiting the loop early</li>
<li>dispatch the event asynchronously to each target</li>
</ul>

<hr>

<h2>FileTarget</h2>

<p>You've provided a <strong>static</strong> file lock, meaning you allow multiple instances to write to the same file. </p>

<blockquote>
<pre><code>private static readonly object FileLock = new object();
</code></pre>
</blockquote>

<p>But what's the benefit of having an <strong>instance queue</strong> if several concurrent queues (each instance its own queue) are used to write to the same file?</p>

<blockquote>
<pre><code>private readonly BlockingCollection&lt;IEvent&gt; _queue = ..
</code></pre>
</blockquote>

<p>And how sure can you be that no other process is accessing the file simultaniously?</p>

<blockquote>
<pre><code>System.IO.File.AppendAllLines..
</code></pre>
</blockquote>

<p>This is already a more robust approach that allows shared access to the file:</p>

<pre><code>new FileStream(FileName, FileMode.Append, FileAccess.Write, FileShare.Read);
</code></pre>

<p>As suggested in the other answers, use a <code>CancellationToken</code> rather than a <code>bool _backgroundActionShouldRun</code> and implement the <em>Dispose Pattern</em>.</p>

<p>I don't know how many targets will write to a file. But think about how many shared threadpool threads will not be able to participate in the server because they are exclusively working for a target instance.</p>

<blockquote>
<pre><code>private void StartBackgroundAction()
{
    Task.Run((Action) BackgroundAction); // This task's worker thread is dedicated to you :s
}
</code></pre>
</blockquote>
    </div>