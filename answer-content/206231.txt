<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>From my performance tuning I have found that the monte-carlo solution isn't easy to make faster, but that the integration approach is. The main differences this version has it it first filters out points small enough that they will have no impact on the result. It then, computes everything except the integrals without any loops, leading to significant gains by only calling <code>cdf</code> and <code>pdf</code> once each. I could probably remove the <code>pdf</code> call by taking a cumulative difference of the <code>cdf</code>, but by now the numerical integration is taking over half the time. With these improvements, I can run this function 2500 times per second, or about 4x faster than originally. Unless anyone can speed up the integration step, I think this code is as fast as it' s going to get in python.</p>

<pre><code>def integ(dx=.05):
    ind = np.argmax(m)
    m_max, sd_max = m[ind], sd[ind]
    not_small = np.where(m+4*sd &gt; m_max)[0]
    m_big = m[not_small]
    sd_big = sd[not_small]

    n = len(m_big)
    ts = np.arange(np.min(m_big), m_max + 4*sd_max, dx)
    ts = np.transpose(np.tile(ts, (n, 1)))

    xs = (ts - m_big) / sd_big
    cdfs = norm.cdf(xs)
    prod_cdfs = np.transpose(np.tile(np.prod(cdfs, axis=1), (n, 1)))

    ys =  norm.pdf(xs) / sd_big * prod_cdfs / cdfs
    result = np.zeros(n)
    for i in range(n):
        result[i] = integrate.simps(ys[:,i], dx=dx)
    return result * m_big
</code></pre>
    </div>