<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2><a href="https://github.com/tc39/proposal-regexp-named-groups" rel="noreferrer">Named Capture Groups</a></h2>
<p>JavaScript <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp" rel="noreferrer">RegExp</a> has <a href="https://github.com/tc39/proposal-regexp-named-groups" rel="noreferrer">named capture groups</a> that can make life a lot simpler when dealing with complicated <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp" rel="noreferrer">RegExp</a>. Combined with <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment" rel="noreferrer">destructuring assignment</a> you can extract the named hours minutes and seconds as follows.</p>
<pre><code>function toSeconds(time) {
    const {groups: {h = 0, m = 0, s = 0}} = /(?&lt;h&gt;\d*)h(?&lt;m&gt;\d*)m(?&lt;s&gt;\d*)/i.exec(time);
    return h * 3.6e3 + m * 60 + s * 1;  // * 1 to coerce s to Number
}
</code></pre>
<p>Missing digits are set to zero in the assignment defaults.</p>
<p>However this is limited to strings that have hours, minutes, and seconds in the correct order (hence no need to match the <code>"s"</code>) and will throw an error if there is a problem.</p>
<h2>A more robust solution</h2>
<p>You can also <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce" rel="noreferrer">reduce</a> the array created by <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@matchAll" rel="noreferrer"><code>symbol.matchAll</code></a> (it returns an iterator that you convert to an array via <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax" rel="noreferrer">spread operator</a>)</p>
<p>It <code>RegExp[symbol.matchAll]</code> is the same call as <code>String.matchAll(RegExp)</code></p>
<p>To handle as many variations as possible you can convert the time string to lowercase, soak up white spaces, allow for fractions, multiple periods, and negative periods.</p>
<p>Using an IIF to wrap the periods constant via closure the function looks like</p>
<pre><code>const toSeconds = (() =&gt; {
    const periods = {h: 3600, m: 60, s: 1};
    return time =&gt; [.../(\-*\d*\.*\d*)\W*([hms])/g[Symbol.matchAll](time.toLowerCase())]
        .reduce((time, [, digits, type]) =&gt; periods[type] * digits + time, 0);
})();
</code></pre>
<p>Or via the string</p>
<pre><code>const toSeconds = (() =&gt; {
    const periods = {h: 3600, m: 60, s: 1};
    return time =&gt; [...time.toLowerCase().matchAll(/(\-*\d*\.*\d*)\W*([hms])/g)]
        .reduce((time, [, digits, type]) =&gt; periods[type] * digits + time, 0);
})();
</code></pre>
<p>To combat the readability the next version creates some extra variables to segregate the logic parts a little</p>
<pre><code>const toSeconds = (() =&gt; {
    const periods = {h: 3600, m: 60, s: 1};
    const extractHMS = /(\-*\d*\.*\d*)\W*([hms])/g;
    const sumSeconds = (time, [, digits, type]) =&gt; periods[type] * digits + time;

    return time =&gt; [...time.toLowerCase().matchAll(extractHMS)].reduce(sumSeconds, 0);
})();
</code></pre>
<p>The snippet below shows some of the results of a variety of inputs.</p>
<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="false" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const toSeconds = (() =&gt; {
    const periods = {h: 3600, m: 60, s: 1};
    return time =&gt; [.../(\-*\d*\.*\d*)\W*([hms])/g[Symbol.matchAll](time.toLowerCase())]
        .reduce((time, [, digits, type]) =&gt;periods[type] * digits + time, 0);
})();



"1h,1m,1s,1,,1s2m3h,3h2m1s,2H2M2S,1h 1H1s1 S1m1M,1.1s,1.2s,s,1h-5m,1 1s,hms"
    .split(",")
    .forEach(time =&gt; log("\"" + time + "\" =" , toSeconds(time)+" seconds"));
    
function log(...data) {
    document.body.appendChild(
        Object.assign(
            document.createElement("div"), {textContent: data.join(" ")}
        )
    )
}</code></pre>
</div>
</div>

<p>BTW in Javascript we put...</p>
<ul>
<li>the opening <code>{</code> on the same line as the statement,</li>
<li>use camelCase for naming.</li>
</ul>
<p>And from many years of C style language experience I would advise you to always delimit statement blocks with <code>{</code> <code>}</code>  eg  Bad  <code>if (foo) bar = foo</code>, Good <code>if (foo) { bar = foo }</code></p>
    </div>