<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'd use a code like this:</p>

<pre><code>#Message table 
MESSAGES = {"StoreValueRequest": "Valor do produto na loja em Reais (Formato 00.00): ", 
            "SupplyValueRequest": "Valor do produto no fornecedor em Reais (Formato 00.00): ", 
            "AcquisitionCostRequest": "Custo por aquisição (Formato 00.00): ", 
            "ProfitInCash": "Lucro à vista: {0}", 
            "NumInstallments": "Número de parcelas sem juros (Formato: 0-24): ", 
            "ProfitNInstallments": {2: "Lucro parcelado 2x: {0}", 
                                    3: "Lucro parcelado 3x: {0}", 
                                    4: "Lucro parcelado 4x: {0}", 
                                    5: "Lucro parcelado 5x: {0}", 
                                    6: "Lucro parcelado 6x: {0}", 
                                    7: "Lucro parcelado 7x: {0}", 
                                    8: "Lucro parcelado 8x: {0}", 
                                    9: "Lucro parcelado 9x: {0}", 
                                    10: "Lucro parcelado 10x: {0}", 
                                    11: "Lucro parcelado 11x: {0}", 
                                    12: "Lucro parcelado 12x: {0}", 
                                    15: "Lucro parcelado 15x: {0}", 
                                    18: "Lucro parcelado 18x: {0}", 
                                    24: "Lucro parcelado 24x: {0}"}, 
            "SectionSeparation": "\n", 
            "Disclaimer": "AVISO: Lucro calculado usando as taxas atuais do MercadoPago (23/07/2018)" } 


#Table for the evaluation of fees. The keys are the number of installments 
FEES_BY_INSTALLMENTS = {2: 2.03, 3: 4.06, 4: 6.09, 5: 7.64, 6: 8.92, 7: 10.06, 
                        8: 10.62, 9: 11.23, 10: 12.41, 11: 13.60, 12: 14.80, 
                        15: 18.47, 18: 22.23, 24: 23.83 } 

#Percent points for the fees 
FEE_SHOPIFY = 2 
FEE_MERCADOPAGO = 4.99 

#Number of digits for the rounding of prices 
PRICE_ROUNDING_DIGITS = 2 


def get_user_input():                        
    """Handles the input of parameters from the user interface 

    Args: 

    Returns: 
        product_retail_price: (float) The retail price of the item 
        product_cost: (float) The cost of the item from the supplier 
        cost_per_acquisition: (float) The costs to get the item from the supplier 
        installments (int) Required number of installments 

    Raises: 
        ValueError: The user input values that cannot be converted to numerics 
    """ 

    #Values    
    product_retail_price = float(input(MESSAGES["StoreValueRequest"])) 
    #Costs 
    product_cost = float(input(MESSAGES["SupplyValueRequest"])) 
    cost_per_acquisition = float(input(MESSAGES["AcquisitionCostRequest"])) 
    #Other parameters    
    installments = int(input(MESSAGES["NumInstallments"])) 

    return product_retail_price, product_cost, cost_per_acquisition, installments 


def evaluate_profits(product_retail_price, product_cost, cost_per_acquisition, installments): 
    """Handles the evaluation of fees and profits 

    Args: 
        product_retail_price: (float) The retail price of the item 
        product_cost: (float) The cost of the item from the supplier 
        cost_per_acquisition: (float) The costs to get the item from the supplier 
        installments (int) Required number of installments 

    Returns: 
        base_profit: (float) The profit without installments 
        evaluated_profits: (dict) Value of the profit with the given installments 

    Raises: 

    """ 

    fee_shopify = (product_retail_price / 100) * FEE_SHOPIFY 
    fee_mercadopago = (product_retail_price / 100) * FEE_MERCADOPAGO 

    #Evaluates a dictionary of fees for the product. The number of installments 
    #are the keys 
    installment_fees = {k: (product_retail_price / 100) * fee 
                      for k, fee in FEES_BY_INSTALLMENTS.items()} 

    #Calculations 
    base_profit = round(product_retail_price - product_cost - 
                        fee_shopify - fee_mercadopago - 
                        cost_per_acquisition, PRICE_ROUNDING_DIGITS) 

    evaluated_profits = {k: round(base_profit - fee - cost_per_acquisition, 
                         PRICE_ROUNDING_DIGITS) 
                         for k, fee in installment_fees.items()} 

    return base_profit, evaluated_profits 


def output_results(base_profit, evaluated_profits, installments): 
    """Outputs the evaluation results to the user 

    Args: 
        base_profit: (float) The profit without installments 
        evaluated_profits: (dict) Value of the profit with the given installments 
        installments (int) Required number of installments 

    Returns: 

    Raises: 

    """ 

    print(MESSAGES["SectionSeparation"]) 

    print(MESSAGES["ProfitInCash"].format(base_profit))

    #Iterates on the expected messages and only print the appropriate ones 
    #according to the number of installments input by the user 
    for installments_key, format_string in MESSAGES["ProfitNInstallments"].items(): 
        if installments &gt;= installments_key: 
            print(format_string.format(evaluated_profits[installments_key])) 
        else: 
            break 

    print(MESSAGES["SectionSeparation"]) 

    print(MESSAGES["Disclaimer"]) 


if __name__ == '__main__': 
    ( product_retail_price, product_cost, 
      cost_per_acquisition, installments ) = get_user_input() 

    ( base_profit, evaluated_profits ) = evaluate_profits( 
        product_retail_price, product_cost, 
        cost_per_acquisition, installments) 

    output_results(base_profit, evaluated_profits, installments)
</code></pre>

<p>I did put all the messages in one structure (well dictionary of dictionaries) at the beginning so that you can localize your messages and use only English in code.</p>

<p>The table of fees is defined in a similar fashion, so that it can be changed if needed without reading all the code.</p>

<p>The evaluation of fees and profits is done with a single function iterated over the range of fees.</p>

<p>The messages to be printed are handled according to the value passed as number of installments.</p>

<p>I separated the logic from the user interface. Placed an import guard so that you can reuse both, would you need it.</p>

<p>All the functions have docstrings so that everyone can read and understand what they are supposed to do.</p>

<p>Now you can add some optimization, and test cases.</p>
    </div>