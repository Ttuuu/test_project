<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Welcome there new programmer :-)</p>
<p>For the first piece of code it's looking good and of course a lot can be rewritten or done in a different way, but a lot of it also depends on someone's programming style/experience. Don't worry about it too much since this will improve more and more the longer you craft software.</p>
<p>What I did is rewrite some parts of your code and put in some comments for you to learn from. Take a look at it and if you have questions just ask.</p>
<p>What editor do you use? If you take a close look on what hints it gives you can also learn/improve your code!</p>
<pre><code>using System;
using System.Collections.Generic;
using System.Linq;

class Bird
{
    // Use properties instead of members. This is safer. Also start publics with a capital.
    // Most of the times the properties are public in (POCO) classes like this
    //
    // set; is also availble, but since we set it from the constructor we want this to be controlled like this.
    public string Name { get; }
    public string Size { get; }
    public string Color { get; }
    public string Habitat { get; }

    public Bird(string name, string size, string color, string habitat)
    {
        Name = name;
        Size = size;
        Color = color;
        Habitat = habitat;
    }
}

class Program
{
    // Use a collection initializer - it is cleaner code
    // Mark it as readonly so Birds cannot be overwritten somewhere (except in constructor)
    static readonly List&lt;Bird&gt; Birds = new List&lt;Bird&gt;
    {
        new Bird("Bald Eagle", "large", "white", "America"),
        new Bird("American Kestrel", "small", "brown", "America"),
        new Bird("Mississippi Kite", "medium", "grey", "America"),
        new Bird("Red Kite", "medium", "brown", "Europe"),
        new Bird("Secretary Bird", "large", "grey", "Africa"),
        new Bird("Shoebill Stork", "large", "grey", "Africa"),
        new Bird("Cockatoo", "medium", "white", "Australia")
    };

    // The list of possible actions I've put in a dictionary. This eliminates the manual writing of a lot of ifs
    static readonly Dictionary&lt;string, Action&gt; Actions = new Dictionary&lt;string, Action&gt;
    {
        {"1", BirdList}, 
        {"2", BirdQuestions},
    };

    // Use private access modifier when only the containing class is using the method or property
    // Since this all is initiated in a static Main method you are bound to the static context
    // unless you instantiate a new object (class) inside that Main method; this can have plain public and private methods.
    // Check https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/access-modifiers
    // and https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/static-classes-and-static-class-members
    // for more info on this topic.
    private static void Start()
    {
        Console.WriteLine("Welcome to the Bird of prey identification helper.");
        Console.WriteLine("(1) List of all birds and their descriptions\n(2) Identification help.\n");

        string input;
        do
        {
            Console.Write("Enter 1 or 2: ");
            input = Console.ReadLine();
            if (Actions.ContainsKey(input))
            {
                Actions[input](); // call the action that belongs to the input (in Dictionary)
            }
        } while (!Actions.ContainsKey(input));
    }

    static void BirdList()
    {
        Console.Clear();
        foreach (var bird in Birds)
            Console.WriteLine(
                // Use string interpolation  (with the $ before the ") so you can directly put in the variables in the string
                $"Name: {bird.Name} | Size: {bird.Size} | Main Color: {bird.Color} | Habitat Location: {bird.Habitat}");
    }

    static void BirdQuestions()
    {
        // Pass local variables to the next method - makes it more clear how the code flow is, instead of magically setted
        // values in some method and reads in other methods.
        string colorInput;
        string sizeInput;
        string habitatInput;

        Console.Clear();
        Console.WriteLine("This process will help you through identifying a bird you have seen.");

        // Prevent a lot of 'hard coded variables' - the options are based on the Birds list I assume
        // Let's get a distinct list of colors from the birds collection
        var colors = Birds.Select(s =&gt; s.Color).Distinct();
        
        // create a comma separated string of all the colors
        var colorsString = string.Join(", ", colors);
        do
        {
            Console.WriteLine($"\nWhat was the birds main color? Enter {colorsString}.");
            Console.Write("Enter: ");
            colorInput = Console.ReadLine();
        } while (!colors.Contains(colorInput));

        // Now all the possible colors hard codings have been eliminated 
        
        
        var sizes = Birds.Select(s =&gt; s.Size).Distinct();
        var sizesString = string.Join(", ", sizes);
        do
        {
            Console.WriteLine($"\nHow large or small was the bird? Enter {sizesString}.");
            Console.Write("Enter: ");
            sizeInput = Console.ReadLine();
        } while (!sizes.Contains(sizeInput));

        var habitats = Birds.Select(s =&gt; s.Habitat).Distinct();
        var habitatsString = string.Join(", ", habitats);
        do
        {
            Console.WriteLine($"\nWhere did you see the bird? Enter {habitatsString}.");
            Console.Write("Enter: ");
            habitatInput = Console.ReadLine();
        } while (!habitats.Contains(habitatInput));

        BirdId(colorInput, sizeInput, habitatInput);
    }

    static void BirdId(string colorInput, string sizeInput, string habitatInput)
    {
        // Use LINQ to iterate over a collection - increases readability in cases you have a big if condition on properties
        var foundBirds = Birds.Where(bird =&gt;
            bird.Color == colorInput &amp;&amp;
            bird.Size == sizeInput &amp;&amp;
            bird.Habitat == habitatInput).Select(bird =&gt; bird.Name);

        if (foundBirds.Any())
        {
            Console.WriteLine("\n" + string.Join('\n', foundBirds));
        }
        else
        {
            Console.WriteLine("\nNo birds found.");
        }
    }

    static void Main(string[] args)
    {
        Start();
    }
}
<span class="math-container">```</span>
</code></pre>
    </div>