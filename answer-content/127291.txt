<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Code Style:</h2>

<ul>
<li>You should give your class a proper name like PositiveSequenceFinder. Or maybe you can think of something better.</li>
<li>Use methods instead of doing everything in the main method. For example <code>int[] findSequence(int[] array)</code> and <code>printSequence(int[] sequence)</code></li>
<li>There are too many comments, some of them not really helpful:</li>
</ul>

 <pre class="lang-js prettyprint-override"><code> //  0     1     2      3     4    5    6     7    8   9   10   11     12   13   14      15
 int numberArray[] = {-2,   -3,   -5,    -6,   -7,  -7,  -8,    9,   0,  -6,  3,  -1,    -2,   0,   -9,    -12};
</code></pre>

<ul>
<li><p>Wrong spacing:</p>

<pre><code>//Setting value of Start Index after One Set of Calculation is Completed.
if(endIndex!=numberArray.length-1 &amp;&amp; numberArray[index]&lt;0 ){
    startIndex=endIndex+1;
}

}
</code></pre>

<p>In my opinion it is more readable if there are spaces between operatos. At least use it consistently (why are there spaces before and after <code>&amp;&amp;</code>?</p></li>
</ul>

<hr>

<h2>Algorithm:</h2>

<p>You can make it much more simpler. This would be my solution:</p>

<pre><code>import java.util.Arrays;

public class SequenceFinder
{
    private static final int INPUT[] = {-2, -3, -5, -6, -7, -7, -8, 9, 0, -6, 3, -1, -2, 0, -9, -12};

    public static void main(String[] args)
    {
        System.out.println(Arrays.toString(findPositiveSequence(INPUT)));
    }

    public static int[] findPositiveSequence(int[] array)
    {
        int maxSequenceStartIndex = 0;
        int maxSequenceLength = 0;
        int currentSequenceStartIndex = 0;
        int currentSequenceLength = 0;
        for (int i = 0; i &lt; array.length; i++)
        {
            if(array[i] &lt; 0)
            {
                if(currentSequenceLength &gt; maxSequenceLength)
                {
                    maxSequenceLength = currentSequenceLength;
                    maxSequenceStartIndex = currentSequenceStartIndex;
                }
                currentSequenceStartIndex = i + 1;
                currentSequenceLength = 0;
            }
            else
            {
                currentSequenceLength++;
            }
        }

        if(currentSequenceLength &gt; maxSequenceLength)
        {
            maxSequenceStartIndex = currentSequenceStartIndex;
            maxSequenceLength = currentSequenceLength;
        }

        int maxSequenceEndIndex = maxSequenceStartIndex + maxSequenceLength;
        return Arrays.copyOfRange(array, maxSequenceStartIndex, maxSequenceEndIndex);
    }

}
</code></pre>

<p>I can't see how sorting the array could be helpful, because the order of the elements is important to the problem. The time complexity of your algorithm is linear, and - correct me if I'm wrong -  I don't think it goes any better. </p>
    </div>