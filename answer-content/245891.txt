<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This seems to so what you want, but is specific to the example and code you gave.</p>
<p>There are two pairs of subarrays in <code>arr</code> and two different sets of indices and data to add to the subarrays.  So there are four combinations. These get figured out by the values of <code>i</code>, <code>j</code>, and 'k'.</p>
<p>Because the data to be added is sparse, I'm going to use <code>scipy.sparse.coo_matrix()</code> to build arrays from <code>reference</code> and <code>mydict</code>.</p>
<p>The line <code>data = ...</code> converts the information in <code>mydict</code> and <code>reference</code> into a list of three tuples.  <code>data[0]</code> is the values to be added, <code>data[1]</code> are the row coordinates, and <code>data[2]</code> are the col coordinates.</p>
<p><code>m = coo_matrix(...)</code> builds the sparse matrix and converts it to an <code>numpy.array</code>.</p>
<p><code>x = arr[2*j:2*j+2] + m</code> uses the numpy array broadcasting rules to add <code>m</code> to the subarrays of the <code>arr</code> slice. So <code>x</code> is a pair of subarrays with the values added to the selected coordinates.</p>
<p>All of the <code>x</code> arrays are gathered in a list <code>newarr</code>, and are vertically stacked at the end.</p>
<pre><code>import numpy as np
from scipy.sparse import coo_matrix

newarr = []

for k in range(4):
    i,j = divmod(k,2)
    
    data = [*zip(*((mydict[tuple(coord)][i], *coord) for coord in reference[j]))]

    m = coo_matrix((data[0],(data[1], data[2]))).toarray()
    
    x = arr[2*j:2*j+2] + m

    newarr.append(x)
    
newarr = np.vstack(newarr)
</code></pre>
    </div>