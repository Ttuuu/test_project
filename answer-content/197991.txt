<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First, I disagree with the comment of <strong>xReprisal</strong> about static.  A Static method is a useful tool and spoiling it is a waste.   However, you are also using a static field and it is not recommended (because it's not safe, at least on Java).  I avoid (my example, see below) to use static by creating a new instance once.</p>

<p>For this task, I create a project (free, MIT license) that it does the auto mapper</p>

<p><a href="https://github.com/EFTEC/AutoLoadOne" rel="nofollow noreferrer">https://github.com/EFTEC/AutoLoadOne</a>   </p>

<p>It generates an automap from all the classes, interfaces and traits and it produces an autoload.php.  It does the autoload the most efficiently possible (I hope). So it's a two stage program.</p>

<p>About your code:</p>

<p>a) PHP 5.6 will be close to being obsolete.  So, I don't think it's worth to support an old version of PHP.  </p>

<p>b) You are scanning an entire folder (and their subfolders) each time you call a new class/interface/trait ($resource_files = glob($pattern); instead of self::resource_files i.e the recommendation of <strong>xReprisal</strong>). Even if you are doing the scan of the entire folder once, you are doing it once per customer per call.  So it impacts the performance.   If you can, you could cache the $self:: resource data on APCU, REDIS or even in a text field).   What I did to solve it? pre-scan the folder once and for all by generating the class:</p>

<p>The class has two arrays, one if for map classes that are specials such as classes in different folders or classes in the same .php file.
And the second array has a map of namespaces and folders.</p>

<p>It is how a generated autoload.php looks:</p>

<pre><code>&lt;?php
/**
 * This class is used for autocomplete.
 * Class _AutoLoad
 * @noautoload it avoids to index this class
 * @generated by AutoLoadOne 1.3 generated 2018/07/06 05:39:35
 * @copyright Copyright Jorge Castro C - MIT License. https://github.com/EFTEC/AutoLoadOne
 */
class _AutoLoad
{
    var $debug=false;
    private $_arrautoloadCustom = array(
        'MyProject\Connection' =&gt; '/../test/folder/multiplenamespace.php',
        'AnotherProject\Connection' =&gt; '/../test/folder/multiplenamespace.php',
        'MyProject\Connection2' =&gt; '/../test/folder/multiplenamespace2.php',
        'AnotherProject\Connection2' =&gt; '/../test/folder/multiplenamespace2.php',
        'ClassWithoutNameSpace' =&gt; '/../test/folder/subfolderalt/ClassWithoutNameSpace.php',
        'folder\subfolder\CustomClass' =&gt; '/../test/folder/subfolderalt/CustomClass.php'
    );
    private $_arrautoload = array(
        'folder' =&gt; '/../test/folder',
        'folder\subfolder' =&gt; '/../test/folder/subfolder',
        'sub\sub\sub' =&gt; '/../test/folder/subfolder/subsubfolder'
    );
    /**
     * _AutoLoad constructor.
     * @param bool $debug
     */
    public function __construct($debug=false)
    {
        $this-&gt;debug = $debug;
    }
    /**
     * @param $class_name
     * @throws Exception
     */
    public function auto($class_name) {
        // its called only if the class is not loaded.
        $ns = dirname($class_name); // without trailing
        $ns=($ns==".")?"":$ns;        
        $cls = basename($class_name);
        // special cases
        if (isset($this-&gt;_arrautoloadCustom[$class_name])) {
            $this-&gt;loadIfExists($this-&gt;_arrautoloadCustom[$class_name] );
            return;
        }
        // normal (folder) cases
        if (isset($this-&gt;_arrautoload[$ns])) {
            $this-&gt;loadIfExists($this-&gt;_arrautoload[$ns] . "/" . $cls . ".php");
            return;
        }
    }

    /**
     * @param $filename
     * @throws Exception
     */
    public function loadIfExists($filename)
    {
        if((@include __DIR__."/".$filename) === false) {
            if ($this-&gt;debug) {
                throw  new Exception("AutoLoadOne Error: Loading file [".__DIR__."/".$filename."] for class [".basename($filename)."]");
            } else {
                throw  new Exception("AutoLoadOne Error: No file found.");
            }
        }
    }
} // end of the class _AutoLoad
if (defined('_AUTOLOADONEDEBUG')) {
    $_autoLoad=new _AutoLoad(_AUTOLOADONEDEBUG);
} else {
    $_autoLoad=new _AutoLoad(false);
}
spl_autoload_register(function ($class_name)
{
    global $_autoLoad;
    $_autoLoad-&gt;auto($class_name);
});
</code></pre>
    </div>