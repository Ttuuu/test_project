<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You state that <em>operating specific functions are out</em>, which I assume means that you don't want to use operating system specific system functions. However in this particular case that is actually hindering you from actually solving your task, as POSIX-based systems and Windows-based systems has two different ways of handling this.</p>

<p>Although the <code>ftime</code> is present in various operating system, it has been marked as <a href="http://man7.org/linux/man-pages/man3/ftime.3.html#CONFORMING_TO" rel="nofollow noreferrer">obsolete as of POSIX.1-2008</a>:</p>

<blockquote>
  <p>4.2BSD, POSIX.1-2001.  POSIX.1-2008 removes the specification of ftime().</p>
  
  <p>This function is obsolete.  Don't use it.  If the time in seconds
  suffices, time(2) can be used; gettimeofday(2) gives microseconds;
  clock_gettime(2) gives nanoseconds but is not as widely available.</p>
</blockquote>

<p>Further is the <code>gettimeofday()</code> also obsolete as of POSIX.1-2008, leaving only the <code>clock_gettime()</code> alternative, which is not as widely available. Most notably not present in Windows, as indicated in <a href="https://stackoverflow.com/q/5404277/1548472">"Porting clock_gettime to windows"</a>.</p>

<p>On Windows there are some other options, but seems that most fall back to using <code>QueryPerformanceCounter</code> &amp; co (referred to as QPCs) as indicated in <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/dn553408(v=vs.85).aspx" rel="nofollow noreferrer">"Acquiring high-resolution time stamps"</a>. Some of my search findings also indicate that the QPCs are not be trusted in SMP (Symmetric MultiProcessing environments).</p>

<p>In other words, <em>if you want to do this correctly for use in various operating systems, you do need to make it operating system dependent</em>. If you choose to carry on with your solution using the obsolete <code>ftime()</code> more could surely be said, but here are some comments on your actual code:</p>

<ul>
<li><em>Loose the <code>append</code> variable</em> – You already have room in <code>buf</code> for the result, and know how much you've already used. I.e. replace it with something like either <code>sprintf(&amp;buf[8], ":%03u", start.millitm);</code> or <code>sprintf(buf + 8, ":%03u", start.millitm);</code><sup>1</sup>, and you can return without doing the <code>strcat</code> at the end.</li>
<li><em>Avoid busy loops</em> – Your <code>while</code> loop is called a busy loop as it does nothing excepting counting. It is usually better to trigger a sleep function or similar, allowing the processor to do other work in between. </li>
<li><em>Strange reset of <code>countdown</code></em> – Instead of resetting the <code>countdown</code> in the <code>for</code> loop, it would be clearer code to reset it just before the <code>while</code> loop, or even better (if persisting to use the busy loop) to make it into a locally scoped <code>for</code> loop, i.e <code>for (int countdown = 0; countdown &lt; 1000000; countdown++) ;</code></li>
<li><p><em>Decide on <strong>one</strong> style of bracing</em> – Decide whether you want to have opening braces on the start of the line, or end of preceding line, and <em>stick to it</em>. Mixing like you've done here make your code somewhat harder to read, and when mixing with empty block (aka the busy loop) with missing braces, it is not good. </p>

<p>Some guys advocate a different opening brace style for functions versus other blocks, but I would suggest using the same style for everything making it more consistent.</p></li>
</ul>

<h2>Addendum: C11 and <code>xtime_get</code> or rather <code>timespec_get</code></h2>

<p>Jerry Coffin refers to a <code>xtime_get()</code> with potential nanoseconds precision (albeit still dependent on operating system precision). This is part of the C++ <a href="http://www.boost.org/doc/libs/1_31_0/libs/thread/doc/xtime.html" rel="nofollow noreferrer">boost library</a>. It was proposed to be included in C11 (see <a href="http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1548.pdf" rel="nofollow noreferrer">N1548.pdf, 7.25.7, p 383</a>. This was revised in <a href="http://port70.net/~nsz/c/c11/n1570.html#7.27.2.5" rel="nofollow noreferrer">N1570, 7.27.2.7</a>, into a <code>timespec_get()</code> function. N1570 is the latest draft available, before the standard was defined (and made commercially available). From this I quote:</p>

<blockquote>
  <p><a href="http://port70.net/~nsz/c/c11/n1570.html#7.27.2.5p3" rel="nofollow noreferrer">3</a> If base is TIME_UTC, the tv_sec member is set to the number of seconds since an implementation defined epoch, truncated to a whole value and the tv_nsec member is set to the integral number of nanoseconds, rounded to the resolution of the system clock.<sup>321)</sup><br>
  ...<br>
  <sub><sup>321)</sup> Although a struct timespec object describes times with nanosecond resolution, the available resolution is system dependent and may even be greater than 1 second.</sub></p>
</blockquote>

<p>This does however seem to have made it into C11 (also known as ISO/IEC 9899:2011), according to the table of contents <a href="https://www.iso.org/obp/ui/#iso:std:iso-iec:9899:ed-3:v1:en" rel="nofollow noreferrer">listed here</a>, see section 7.27.2.5. So if your compiler and libraries is compliant to C11<sup>2</sup>, you might use <code>timespec_get()</code> and <em>possibly</em> get a system dependent precision up to nanoseconds (or even greater than 1 second).</p>

<hr>

<p><sub><sup>1</sup> Thanks to 200_success for pointing out error in code related to <code>buf[8]</code> not being an acceptable target for <code>sprintf()</code></sub><br>
<sub><sup>2</sup> For the gcc family <a href="https://gcc.gnu.org/wiki/C11Status" rel="nofollow noreferrer">this seems to be</a> gcc ver 4.6 and glibc ver 2.16, or newer</sub></p>
    </div>