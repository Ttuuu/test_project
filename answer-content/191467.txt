<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>    int digit;
    std::string stringDigit, answer, instring;
    std::cin&gt;&gt;instring;
    int in = std::stoi(instring,nullptr);
</code></pre>

<p>Declare variables as you need them.</p>

<p>Every file should be self-sufficient.  Make sure you <code>#include</code> the headers for components you are using.  Do not rely on implicit inclusion.</p>

<p>Check that <code>std::cin</code> successfully read a value from the stream.</p>

<p>Rather than jumping through the hoop of <code>std::stoi</code> conversion, just read the value as an integer.</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;string&gt;

int main() {
    int in;
    if (!(std::cin &gt;&gt; in)) {
        std::cerr &lt;&lt; "Invalid user-id";
        return EXIT_FAILURE;
    }
</code></pre>

<hr>

<pre><code>    while (in != 0){
        digit = in % 7;
        if (digit &lt; 10){
            stringDigit = '0' + digit;
        }else{
            stringDigit = digit - 10 + 'A';
        }
            answer = stringDigit + answer;
            in /= 7;
    }
</code></pre>

<p>Use symbolic constants instead of magic constants (<code>'0'</code>, <code>'A'</code>, <code>7</code>).</p>

<p>If you are taking a modulus of 7, <code>digit</code> will never be greater than 7.  The <code>else</code> branch is never taken.</p>

<hr>

<p>Keep functions short and simple.  Each function should perform a single logical operation.  Functions then become simpler to understand, test, and reuse.</p>

<p>You find the remainders, format them to ASCII, unformat them back to the remainders (indices), then format them to your own custom format.  Just save the intermediate remainders and map to your own values.</p>

<pre><code>#include &lt;algorithm&gt;
#include &lt;array&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;vector&gt;

int read_int(std::istream&amp; in) {
  // ...
}

std::vector&lt;int&gt; itoa_unformatted(int number, int base) {
  // ...
}

int main() {
  constexpr auto mappings = std::make_array("\u180E", "\u200B", "\u200C", "\u200D", 
                                            "\u2060", "\u2063", "\uFEFF");

  auto user_id = read_int(std::cin);
  auto digits = itoa_unformatted(user_id, mappings.size());
  transform(digits, std::make_ostream_joiner(std::cout, ""),
            [&amp;mappings](auto index) { return mappings[index]; });
  std::cout &lt;&lt; "a\n";
}
</code></pre>

<p><em>Note - Example code for <strong>exposition only</strong>.  <code>std::make_array</code> and <code>std::make_ostream_joiner</code> are part of C++20 (Library Fundamentals V2).  <code>transform</code> is just a helper for <code>std::transform</code> over a container.  If you would like to play with these features now on gcc/clang, see <a href="https://github.com/mnmlstc/core" rel="nofollow noreferrer">mnmlstc core</a>.</em></p>

<p>If your base is never going to change, you don't need a generalized base conversion solution then.  The base conversion could be specialized for your specific use case, from sizing the appropriate buffer to strength reducing the expensive operations (like division/modulus).  Always measure before optimizing.</p>
    </div>