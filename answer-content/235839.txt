<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p><a href="https://www.oracle.com/technetwork/java/javase/documentation/index-137868.html#styleguide" rel="noreferrer">Document your code. In the code.</a><br>
• what use is <code>MovingAverage</code>?<br>
• is <code>size</code> fixed for the lifetime of any given <code>MovingAverage</code> instance?<br>
 I don't know even scrutinising the code: <code>size</code> is neither <code>final</code> nor <code>private</code><br>
• what does <code>next(int value)</code> return?  </p></li>
<li><p>accumulate <code>int</code>s into <code>long</code>s - even the sum of <em>two</em> <code>int</code>s can overflow.  </p></li>
<li>program against <code>interface</code>s - and give yourself and others a chance to:<br>
define  <code>interface</code>s</li>
<li>take advantage of work already done: keep the sum around and update it instead of computing it from scratch</li>
<li>don't repeat yourself (DRY): there's <code>myQueue.add(val);</code> in both branches of your conditional statement</li>
</ul>

<p>Assuming <code>size</code> fixed:  </p>

<pre><code> /** provide one running summary about
 *  &lt;code&gt;int&lt;/code&gt; values specified one by one. */
interface RunningIntStatistics {
    /** Returns the next summary value
     *  given the additional input &lt;code&gt;value&lt;/code&gt;.*/
    double next(int value);
}

/** moving average over the last up to &lt;code&gt;size&lt;/code&gt; 
 * &lt;code&gt;int&lt;/code&gt; values specified one by one.
 * &lt;code&gt;size&lt;/code&gt; is specified for instantiation.
 */
@SuppressWarnings("serial")
class MovingAverage extends java.util.ArrayDeque&lt;Integer&gt;
implements RunningIntStatistics {
    final int size;
    long sum;

    /** Fixes &lt;code&gt;size&lt;/code&gt;. */
    public MovingAverage(int size) {
        super(size);
        this.size = size;
    }

    public double next(int value) {
        // fine point: _if_ there are "extra" elements,
        // should their values get subtracted?
        while (size &lt;= size())
            sum -= remove().longValue();

        sum += value;
        add(value);

        return (double) sum / size();
    }
}
</code></pre>

<p>(<code>MovingAverage.next()</code> "inherits" <code>RunningIntStatistics.next()</code>'s doc comment.)<br>
The above is somewhat lazy:<br>
one should use <em>inheritance</em> in cases of specialisation,<br>
else <em>composition</em>.<br>
Using <a href="https://docs.oracle.com/en/java/javase/13/docs/api/java.base/java/util/IntSummaryStatistics.html#getAverage()" rel="noreferrer">IntSummaryStatistics</a> still required keeping account of values to account for.</p>
    </div>