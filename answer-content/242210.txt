<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>Not so much about performance. The cosine similarity can be expressed in a more concise (and maybe even more performant) way with STL:</p>

<pre><code>dot_product = std::inner_product(v1.begin(), v1.end(), v2.begin());
ss1 = std::inner_product(v1.begin(), v1.end(), v1.begin());
ss2 = std::inner_product(v2.begin(), v2.end(), v2.begin());
</code></pre>

<p>This of course assumes that the vectors are of the same size.</p></li>
<li><p>Since you want it for every pair of vectors, nothing can be done to speed thins up algorithmically. There are <span class="math-container">\$O(n^2)\$</span> pairs, so the performance is bound to be quadratic.</p></li>
<li><p><code>cosine_similarity</code> works with each vector many times, and recomputes its length (<code>ss1</code>/<code>ss2</code>) many times. Compute them all in advance. It is probably the biggest performance gain you can achieve.</p></li>
<li><p>There is no need to pass <code>vector_size</code> by reference.</p></li>
</ul>
    </div>