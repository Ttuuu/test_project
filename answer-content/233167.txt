<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3><em>Restructuring and consolidation</em></h3>

<p><em>Logging configuration</em></p>

<p>When having a <em>constant</em> logging options like posted <code>log_format</code> or <code>log_level=logging.DEBUG</code> you might have been used <a href="https://docs.python.org/3/library/logging.html#logging.basicConfig" rel="nofollow noreferrer"><code>logging.basicConfig</code></a> or even <a href="https://docs.python.org/3/library/logging.config.html#logging.config.dictConfig" rel="nofollow noreferrer"><code>dictConfig</code></a> to apply specified options globally to all underlying cases.<br>But since your intention is to allow the client create different specialized <em>loggers</em> with dynamic logging options, <em>"base"</em> config won't give much benefit. At least, it's good to remind of such a <em>base configuration</em> capability.</p>

<hr>

<p><em>Handlers</em></p>

<p>All 3 handlers run the same common set of statements to ensure <em>logging format</em>:</p>

<pre><code>if log_format is None:
    log_format = get_default_log_format()
console_handler.setFormatter(log_format)
</code></pre>

<p>That calls for consolidation and reducing duplication.<br>Moreover, when creating some concrete logger instance a client may pass <code>log_format</code> as a raw format string like <code>log_format='%(funcName)s:%(lineno)d — %(message)s'</code>, not as <code>logging.Formatter</code> instance. Thus, for further optimizations I'll eliminate <code>get_default_log_format</code> function and declare a constant:</p>

<pre><code>LOG_FMT = '%(module)s - %(asctime)s — %(name)s — %(levelname)s - %(funcName)s:%(lineno)d — %(message)s'
</code></pre>

<p>According to the scenario where the client/caller operates only on <code>.._logger</code> functions to instantiate concrete loggers, that points to direct relation between specific <em>logger</em> and respective <em>handler</em>(s). And assuming that duplicated common code should be moved out from all handlers - they ceased <em>pulling their weigh</em> and are removed in favor of direct handler usage. See the final implementation below.</p>

<hr>

<p><em><code>..._logger</code> functions</em></p>

<p><em>"logger"</em> creation functions perform a common set of actions:</p>

<pre><code>logger = logging.getLogger(logger_name)
logger.setLevel(log_level)
logger.addHandler(handler)
</code></pre>

<p>that also calls for consolidation.<br>The condition</p>

<pre><code>if log_file is None:
    log_file = "execution.log"
</code></pre>

<p>is eliminated by simply making <code>log_file</code> a default argument <strong><code>log_file="execution.log"</code></strong>.</p>

<hr>

<p>To perform consolidation and reducing duplication a <em>factory</em> function <strong><code>logger_factory(logger_name, handlers_list, log_format, log_level)</code></strong> is introduced. It concentrates a common behavior and also allows to attach multiple <em>handlers</em> to the same <em>logger</em>. </p>

<p>The final optimized version:</p>

<pre><code>import logging
import sys
import logging.handlers

LOG_FMT = '%(module)s - %(asctime)s — %(name)s — %(levelname)s - %(funcName)s:%(lineno)d — %(message)s'


def logger_factory(logger_name, handlers_list, log_format, log_level):
    logger = logging.getLogger(logger_name)
    logger.setLevel(log_level)

    if not isinstance(handlers_list, (list, tuple)):
        handlers_list = [handlers_list]
    for handler in handlers_list:
        handler.setFormatter(logging.Formatter(log_format))
        logger.addHandler(handler)

    return logger


def create_console_logger(logger_name, log_format=LOG_FMT, log_level=logging.DEBUG):
    return logger_factory(logger_name, handlers_list=[logging.StreamHandler(sys.stdout)],
                          log_format=log_format, log_level=log_level)


def create_file_logger(logger_name, log_file="execution.log", log_format=LOG_FMT, log_level=logging.DEBUG):
    return logger_factory(logger_name, handlers_list=[logging.FileHandler(log_file)],
                          log_format=log_format, log_level=log_level)


def create_rotating_file_logger(logger_name, log_file="out.log", max_log_bytes=2000000, max_log_backup_files=20,
                                log_format=LOG_FMT, log_level=logging.DEBUG):
    """ Creates rotating file logger with the given file name, max_log_bytes, max_log_backup_files and log_format.
         :param log_file: log file name
         :param max_log_bytes: the maximum size of file in Bytes
         :param max_log_backup_files: the number of backup files to store
         :param log_format: custom format as logging.Formatter object
         :param log_level: logging level
         :return: logging.Logger
     """
    handler = logging.handlers.RotatingFileHandler(log_file, maxBytes=max_log_bytes,
                                                   backupCount=max_log_backup_files)
    return logger_factory(logger_name, handlers_list=[handler],
                          log_format=log_format, log_level=log_level)


def create_file_console_logger(logger_name, log_file="execution.log", log_format=LOG_FMT, log_level=logging.DEBUG):
    handlers = [logging.FileHandler(log_file), logging.StreamHandler(sys.stdout)]
    return logger_factory(logger_name, handlers_list=handlers,
                          log_format=log_format, log_level=log_level)


if __name__ == "__main__":
    # To get a console handler, run this code
    console_logger = create_console_logger(logger_name="logger1")
    console_logger.debug("Hello World")

    # To get a file logger, run this code
    file_logger = create_file_logger(logger_name="logger3", log_file="out.log")
    file_logger.critical("This is a critical message")

    # To get a console and file logger, run this code
    console_file_logger = create_file_console_logger(logger_name="my_logging2", log_file="out3.log")
    console_file_logger.error("Error: This is from console file logger")
</code></pre>
    </div>