<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I noticed that this question has been unanswered for some time, so I'll try to at least partially review your code.</p>

<h1>Components re-use</h1>

<p>Components are simply abstractions, an encapsulation of something that can stand on its own. If it is re-usable, that would be great, but it is not a requirement to make something their own component.</p>

<p>A navigation bar is something that can stand on it's own, so I would recommend putting it in a separate component, together with its styling. If most of your components are self-contained, your code will stay easy to reason about.</p>

<h1>Repeated class definitions</h1>

<p>You should move <code>:class="{ 'nav-open' : mobile }"</code> to the top-most element in your application. In your separate navigation, and footer, and header component you can then use the following SCSS:</p>



<pre><code>// Namespacing of all your css
.navigation {
    // css if your navigation is closed

    .nav-open &amp; {
        // css if your navigation is opened
    }
}
</code></pre>

<p>This makes sure that whatever future element you make that needs to do something when your navigation opens can do so without a problem, even if you change your layout significantly.</p>

<h1>Opening and closing your navigation</h1>

<p>You currently have your navigation and hamburger icon in the same file. This works, for now, but if your header, footer and navigation get bigger, your <code>App.vue</code> will become really bloated. I recommend using <a href="https://www.npmjs.com/package/vuex" rel="nofollow noreferrer">Vuex</a> to keep the global state of the navigation bar, or a bus such as <a href="https://www.npmjs.com/package/vue-bus" rel="nofollow noreferrer">this one</a> if you do not want to create a state.</p>

<p>You can then do this:</p>

<p><em>App.vue</em></p>

<pre><code>&lt;template&gt;
  &lt;div :class="appClasses"&gt;
    &lt;app-header /&gt;
    &lt;app-navigation /&gt;
    &lt;app-footer /&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
import { mapGetters } from 'vuex'

export default {
  name: 'app',
  computed: {
    ...mapGetters('global', ['navigationOpen']),

    appClasses () {
      return {
        'my-app': true,
        'nav-open': this.navigationOpen
      }
    }
  }
}
&lt;/script&gt;

&lt;style lang="scss"&gt;
  .my-app {
    // There should be very little css in your App.vue file
  }
&lt;/style&gt;
</code></pre>

<p>A <em>header.vue</em> with a hamburger that toggles the menu</p>

<pre><code>&lt;template&gt;
  &lt;header class="app-header"&gt;
    &lt;hamburger-menu @click="toggleMenu" /&gt;
  &lt;/header&gt;
&lt;/template&gt;

&lt;script&gt;
export default {
  name: 'app-header',
  methods: {
    toggleMenu () {
      this.$store.commit('global/toggleNavigation')
    }
  }
}
&lt;/script&gt;

&lt;style lang="scss"&gt;
.app-header {
  // Hopefully a bit more css here
}
&lt;/style&gt;
</code></pre>

<p>And a <em>store/modules/global.js</em> file:</p>

<pre><code>const state = {
  navigationOpen: false
}

const getters = {
  navigationOpen (state) {
    return state.navigationOpen
  }
}

const mutations = {
  toggleNavigation (state) {
    state.navigationOpen = !state.navigationOpen
  }
}

export default {
  state,
  getters,
  mutations
}
</code></pre>

<h1>Avoid external scss files</h1>

<p>The strength of Vue comes in that all javascript, styling and markup is in a single component file. If you move styling to a separate file, you are sort of defeating this strength as developers are required to switch between files again.</p>

<p>As a rule of thumb, try to limit external scss files to only contain variables, mixins and external dependencies.</p>

<h2>Imports in components</h2>

<p>You import a file with variables in one of your components. From experience I know this will get old really fast. I recommend splitting your external scss files in two parts:</p>

<ul>
<li>Files that only contain variables and mixins, but no actual styling</li>
<li>Files that contain styling</li>
</ul>

<p>You include the main styling file in your <code>App.vue</code>, so it only gets included once. The main variable/mixin file can be added to your webpack config, so that any scss in your component files can use those variables and mixins without an explicit import.</p>

<h1>Odd naming of property</h1>

<p>Your property <code>this.text</code> in your hamburger menu is named oddly. It seems to serve some purpose of making the hamburger visible, so I would recommend renaming it to <code>visible</code>. You can then add it as a single class to the div with class <code>hamburger</code> and style it from there.</p>

<h1>Scss and <code>scoped</code></h1>

<p>The <code>scoped</code> attribute on your style tag makes Vue add a component identifying attribute to all html elements in that component. This is great when you have classes that could be used by other components or other elements on the same page, but also makes the generated html look rather ugly.</p>

<p>In most cases, the same can be accomplished by using unique names for your components and adding a class to the root element of that component. Then you can style your components by "namespacing" your css:</p>

<pre><code>&lt;template&gt;
  &lt;div class="my-component"&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
export default {
  name: 'my-component'
}
&lt;/script&gt;

&lt;style lang="scss"&gt;
.my-component {
  .btn {
    // Styling will only be applied to buttons within this component
  }
}
&lt;/style&gt;
</code></pre>
    </div>