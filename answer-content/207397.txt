<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Note that this answer is unfinished, but I decided to post it so that the OP could benefit from the process, because Arthur Havlicek posted an answer. I intend to come back later and finish it (we'll see).</strong></p>
<h1>Spelling</h1>
<p>You've spelled "length" as "lenght" a total of 38 times throughout your code (though most of those are unnecessarily redundant, which we'll get to in a moment). While you have been consistent in your misspelling, this could cause problems later if you wanted to write more code, or if someone else was modifying you code. To fix this, you can find-and-replace <code>lenght</code> to <code>length</code> (if your code editor of choice has that functionality, which it should.)</p>
<hr>
<h1>Sprite handling</h1>
<p>Your handling of sprites provides a good case study for how you can generally improve your coding style to be more cohesive. I have split the refactoring into several steps.</p>
<h2>1. Create <a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself" rel="nofollow noreferrer">DRY</a> code</h2>
<p>In the beginning you declare several lists of items that have unnecessary repetition. I recommend using the following list comprehensions with <a href="https://docs.python.org/3/reference/lexical_analysis.html#f-strings" rel="nofollow noreferrer">formatted string literals</a> instead:</p>
<pre><code>idle = [py.image.load(os.path.join('player', f'Idle ({i}).png')) for i in range(1,11)]
run_right = [py.image.load(os.path.join('player', f'Run ({i}).png')) for i in range(1,9)]
jump = [py.image.load(os.path.join('player', f'Jump ({i}).png')) for i in range(1,11)]
shoot_idle = [py.image.load(os.path.join('player', f'Shoot ({i}).png')) for i in range(1,5)]
shoot_run = [*(py.image.load(os.path.join('player', f'RunShoot ({i}).png')) for i in range(1,8)),
               py.image.load(os.path.join('player', 'Run (8).png'))]
</code></pre>
<p>Here's the rundown on formatted string literals: they are string preceded by an <code>f</code>, and anything within curly brackets is interpreted literally in Python, instead of as a string. So for example, <code>f'Idle ({i}).png'</code> replaces <code>{i}</code> with whatever the value of i is at the time of assignment. Here, the list comprehension loops through 1, 2, ..., 9, 10, so at various points in the list, the string becomes <code>'Idle (1)'</code>, <code>'Idle (2)'</code>
, ..., <code>'Idle (9)'</code>, <code>'Idle (10)'</code>.</p>
<h2>2. Move similar code together... for now</h2>
<p>Code that has similar functionality should be kept together to make it more difficult to make inconsistent changes. I notice you declared the sprite list <code>pows</code> separately from the rest of the sprites. You can move that together with the rest of the sprites and apply the same type of loop:</p>
<pre><code># ...
pows = [py.image.load(os.path.join('player', f'Bullet_{i:0&gt;3}.png')) for i in range(5)]
</code></pre>
<p>At this point it also pays to know more of the <a href="https://docs.python.org/3/library/string.html#formatspec" rel="nofollow noreferrer">format specification mini language</a>. here, the replacement field <code>{i:0&gt;3}</code> means:</p>
<pre><code>i        # Variable i
 :       # Begin specifying string formatting options
  0      # Pad with '0'
   &gt;     # Right align the variable
    3    # Pad the variable to fill at least a 3-character width
</code></pre>
<p>But this is only the first step: there's still repetition <em>between</em> the lists. We could make a custom sprite import function to make this process more convenient. That leads us to:</p>
<h2>3. Be consistent, unless you have a good reason</h2>
<p>When your initial sprite loading code is all put together, I notice you use two different file naming formats:</p>
<ul>
<li><code>SpriteType (1_INDEXED_NUM)</code></li>
<li><code>SpriteType_THREE_PADDED_0_INDEXED_NUM</code></li>
</ul>
<p>(Three-padded means it fills up three digits, and <code>N</code>-Indexed means the numbers start from <code>N</code>.)</p>
<p>I would switch to a the following style:</p>
<ul>
<li><code>SpriteType0_INDEXED_NUM</code></li>
</ul>
<p>It's a good idea to 0-index, because it allows better interoperability with Python's sequence indexing: <a href="https://docs.python.org/3/library/stdtypes.html#ranges" rel="nofollow noreferrer"><code>range()</code></a>, which I've been using above, starts from 0 and excludes its <code>stop</code> argument; this allows one to easily specify ranges of a certain size: <code>range(5)</code> has 5 elements (0 through 4), and <code>range(10)</code> has 10 elements (0 through 9).</p>
<p>I've removed the space between the sprite name and number because it seems unnecessary. If sprite names in the future needed numbers, they could be spelled out to avoid confusion.</p>
<p>This will require changing all of your file names in that directory, but you can do that by going into the <code>player</code> directory and running a simple* script I hacked together and tested:</p>
<pre><code>import os
import re

name_fmt = re.compile(r'''(?P&lt;name&gt;\w+)
                          (?P&lt;underscore&gt;_)?
                          (?(underscore)|[ ]\()
                          (?P&lt;num&gt;\d+)
                          (?(underscore)|\))
                          .png''', re.X)
unrecognized = []
for filename in os.listdir():
    match = name_fmt.fullmatch(filename)
    if match:
        name = match['name']
        num = int(match['num'])
        if not match['underscore']:
            num -= 1
        os.rename(filename, f'{name}{num}.png')
    else:
        unrecognized.append(filename)
print('The following files were not recognized as needing a format change:', ', '.join(f'"{f}"' for f in unrecognized))
</code></pre>
<p><sub>* Unless you know <a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer">regular expressions</a> (and even if you do), the <code>name_fmt</code> bit is probably a <em>bit</em> complicated. But it was relatively easy for me to do, because I know regex very well. There are probably better ways to handle the file extension, but I created this script with speed of coding from memory in mind, especially since this answer will be very long, and I have will spend a chunk of time on other parts.</sub></p>
<h2>4. Standardizing sprite loading through functions (more DRY coding)</h2>
<p>Then I would make the following functions:</p>
<pre><code>def load_sprite(name, i):
    return py.image.load(os.path.join('player', f'{name} {i}.png'))

def load_sprites(name, num):
    return [load_sprite(name, i) for i in range(num)]
</code></pre>
<p>And apply them:</p>
<pre><code>idle = load_sprites('Idle', 10)
run_right = load_sprites('Run', 8)
jump = load_sprites('Jump', 10)
shoot_idle = load_sprites('Shoot', 4)
shoot_run = load_sprites('RunShoot', 7) + [load_sprite('Run', 7)]
pows = load_sprites('Bullet', 5)
</code></pre>
<h1>5. Utilize object oriented programming</h1>
<p><em>Unfinished section.</em></p>
<hr>
<h1>Some PEP-8 Notes</h1>
<p><a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP-8</a> is the style guide for Python, and we like following it because it makes code easier to read and understand. It's basically a way to ensure that Python coders have a set of style standards, e.g. naming, formatting, etc., so we can understand each other's code as easily as possible. I would recommend reading it thoroughly and trying your best to follow it. There are several things you can do to improve your compliance:</p>
<h2>1. Names</h2>
<p><a href="https://www.python.org/dev/peps/pep-0008/#class-names" rel="nofollow noreferrer">PEP-8 says</a>:</p>
<blockquote>
<p>Class names should normally use the CapWords convention.</p>
<p>The naming convention for functions may be used instead in cases where the interface is documented and used primarily as a callable.</p>
<p>Note that there is a separate convention for builtin names: most builtin names are single words (or two words run together), with the CapWords convention used only for exception names and builtin constants.</p>
</blockquote>
<p>This means you should rename your classes to <code>Player</code> and <code>Bullet</code> (because <code>Bulletss</code> is not an easy name to remember.)</p>
<p><a href="https://www.python.org/dev/peps/pep-0008/#function-and-variable-names" rel="nofollow noreferrer">Additionally</a>:</p>
<blockquote>
<p>Function names should be lowercase, with words separated by underscores as necessary to improve readability.</p>
<p>[...]</p>
<p>mixedCase is allowed only in contexts where that's already the prevailing style (e.g. threading.py), to retain backwards compatibility.</p>
</blockquote>
<p>So <code>drawGameScreen</code> should become <code>draw_game_screen</code>.</p>
<p>If you're using an IDE, it might allow you to rename your variables. Otherwise, you can highlight all the changes in your editor <code>find</code> function (to ensure you don't change anything you didn't want to) before replacing.</p>
<h2>2. Avoid extraneous whitespace</h2>
<p><a href="https://www.python.org/dev/peps/pep-0008/#pet-peeves" rel="nofollow noreferrer">PEP-8 says</a>:</p>
<blockquote>
<p>Avoid extraneous whitespace in the following situations:</p>
<ul>
<li><p>Immediately before the open parenthesis that starts the argument list of a function call:</p>
<ul>
<li><p>Yes: <code>spam(1)</code></p>
</li>
<li><p>No: <code>spam (1)</code></p>
</li>
</ul>
</li>
</ul>
</blockquote>
<p>That means every time you call <code>screen.blit</code>, there should <strong>not</strong> be a space before the opening parenthesis of the method body. The same applies throughout the rest of your code; it starts at <code>py.init ()</code>. As Arthur Havlicek mentioned, there should not be multiple lines after a block. Coming back around:</p>
<hr>
<h1>Practice DRY coding (II)</h1>
<p>Generally, if you have statements of the form:</p>
<pre><code>if conditional:
    # do something

    something_count += 1
else:
    # do something else
    
    something_count += 1
</code></pre>
<p>You can remove the <code>something_count</code> increment from the conditionals and just have it as a post-conditional increment:</p>
<pre><code>if conditional:
    # do something
else:
    # do something else
something_count += 1
</code></pre>
<h1>Don't use magic constants</h1>
<p>Here's a conditional I see many times throughout your code: <code>self.direction == 1</code>. What is <code>1</code>? Is <code>1</code> left or right? This is what programmers call a <a href="https://en.wikipedia.org/wiki/Magic_number_(programming)#Unnamed_numerical_constants" rel="nofollow noreferrer">magic constant</a>. You should try to avoid literal integer comparisons in your code unless the purpose is completely clear (and some would argue you shouldn't have them even then.) Instead, you should make variables called left and right for comparisons. But there's an even better way: use <a href="https://docs.python.org/3/library/enum.html" rel="nofollow noreferrer">enums</a>: derive a class from enum called <code>Direction</code> and then make it have the values <code>LEFT</code> and <code>RIGHT</code>.</p>
    </div>