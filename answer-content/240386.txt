<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li>Explicit use of new and delete for memory management is old school and very very prone to memory leaks. Use containers like std::vector or std::array. In current code, you are leaking memory pointed by theheap pointer.</li>
<li>Function readheap is doing two things. Reading input from cin into array theheap and then converting theheap array into actual heap. Split it into separate functions. ReadInput and Heapify</li>
<li>To improve code readability, index operation like <code>theheap[(j - 1) / 2]</code> or <code>index = (2 * j + 1)</code> can be encapsulated in GetParent, GetLeftChild, GetRightChild like APIs.</li>
<li>Heapify in iterative mode can look like below. Please note switching from recursion from iteration shouldn't change code logic. Recursion vs iteration can be seen as embedding difference. </li>
</ol>

<pre><code>    void BuildHeap(std::vector&lt;int&gt;&amp; theHeap)
    {
        for (int i = theHeap.size() / 2; i &gt;= 0; i--)
        {
            Heapify(theHeap, i);
        }
    }

    void Heapify(std::vector&lt;int&gt;&amp; theHeap, size_t index)
    {
       // Next three lines (stack and while loop) needed for converting recursion to iteration. If you remove these three lines and add recusrion call in place of callStack.push leaving other code unchanged, you will get recursive version of Heapify. 
        std::stack&lt;int&gt; callStack;
        callStack.push(index);
        while (!callStack.empty())
        {
            callStack.pop();
            size_t left = GetLeft(index);
            size_t right = GetRight(index);
            size_t smallest = index;
            if (left &lt; theHeap.size() &amp;&amp; theHeap[left] &lt; theHeap[smallest])
                smallest = left;
            if (right &lt; theHeap.size() &amp;&amp; theHeap[right] &lt; theHeap[smallest])
                smallest = right;

            if (smallest != index)
            {
                auto temp = m_buffer[index];
                m_buffer[index] = m_buffer[smallest];
                m_buffer[smallest] = temp;
                callStack.push(smallest); // Line needed for converting recursion to iteration
            }
        }
    }
</code></pre>
    </div>