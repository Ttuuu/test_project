<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>These are my thoughts on how the multi-threaded solution should look like. This is only a pseudo code, so don't take it literally.</p>

<p>A few notes:</p>

<ol>
<li>Most likely your bottleneck is reading from a file, so I would consider reading the largest possible bulk into memory and only then reading it line by line.</li>
<li>Same goes to the processing task. You generally don't want to run more than 2-5 processes in parallel, so use a larger bulk of lines to process.</li>
<li>I don't see any reason to use locking at all in my solution, since you don't access any shared resources while processing partial results and merging happens on the main thread.</li>
<li>Since you mentioned you're using SSD, it might be worthwhile to research parallel read access to the file. You might get some performance gains there. If that is true, then combine the logic of reading and processing the bulk of lines in my solution.</li>
</ol>

<p></p>

<pre><code>public void ProccessFile(){
    var List&lt;Dictionary&lt;string,int&gt;&gt; partialResults = new List....

    while file has lines
    {
        var (bulkLines = file.readNLines()
        var t = Task.StartNew((ProcessLines(bulkLines));
        partialResults.add(t.Result);
    }

    Dictionary&lt;string,int&gt; wordFreq = MergeResults(partialResults);    
}
public Dictionary&lt;string,int&gt; MergeResults(partialResults)
{
    Dictionary&lt;string,int&gt; wordFreq = new Dictionary&lt;string,int&gt;();
    foreach(var p in partialResults){
        foreach(var key in p.Keys){
            var totalWordCnt;
            var partialWordCount = p[key];
            if(wordFreq.TryGetValue(key, out totalWordCnt)){
                wordFreq[key] = totalWordCnt + partialWordCount;
            }else{
                wordFreq.Add(key,partialWordCount );
            }
        }
    }

    return wordFreq;
}
</code></pre>
    </div>