<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The question seems to be missing an important constraint in case there are repeating elements in the input collection that satisfy the condition given. Therefore, there is an assumption around the solutions provided that we are interested in the <strong>first encounter only</strong>.</p>

<p>How about a more general approach to return an IEnumerable collection so that the caller can decide what to take out of that such as the first, the last or the nth, etc.</p>

<pre><code>    private static IEnumerable&lt;object&gt; Find(object[] array)
    {
        if (array == null) throw new ArgumentNullException(nameof(array));

        object previous = null;
        foreach (var current in array)
        {
            if (Predicate(current)) yield return previous;

            previous = current;
        }
    }

    private static bool Predicate(object o)
    {
        return o != null &amp;&amp; (int)o == 2;
    }
</code></pre>

<p>There is also a null check for the input to fail fast. Predicate logic is irrelevant here.</p>

<p>Following is the test cases for the Find method:</p>

<pre><code>    [Test]
    public void TestFind()
    {
        var items = Find(new object[] { 1, 2, 5, 2, 10, 2, 100, 2 });
        Assert.AreEqual(1, items.First());

        items = Find(new object[] { 0, 1, 1, 1, 1, 1 });
        Assert.IsEmpty(items);

        Assert.Throws&lt;ArgumentNullException&gt;(() =&gt; Find(null).ToList());
    }
</code></pre>
    </div>