<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I could have written the code better ...</p>

<hr>

<h1>Removing violation of the one-definition rule</h1>

<p>I made a silly mistake â€” I violated the one-definition rule by failing to mark the following functions <code>inline</code>:</p>

<ul>
<li><p><code>new_table</code></p></li>
<li><p><code>operator&gt;&gt;</code></p></li>
<li><p><code>set_delim</code></p></li>
</ul>

<p>I was too accustomed to writing templates ...</p>

<hr>

<h1>Preserving the <code>toupper</code>, etc. behavior of the original locale</h1>

<p>The <code>ctype_space</code> facet inherits from <code>std::ctype&lt;char&gt;</code> rather than the type of the current facet in the locale because dynamically determining the base type to derive from is not possible.  Unfortunately, this also means that the overridden versions of virtual functions are lost.  Copying the underlying lookup table ensures that the semantics of the <code>is</code> function is preserved because they use the table instead of relying on dynamic dispatching; however, the following functions use dynamic dispatching and their custom semantics is lost:</p>

<ul>
<li><p><a href="https://en.cppreference.com/w/cpp/locale/ctype/toupper" rel="nofollow noreferrer"><code>toupper</code></a></p></li>
<li><p><a href="https://en.cppreference.com/w/cpp/locale/ctype/tolower" rel="nofollow noreferrer"><code>tolower</code></a></p></li>
<li><p><a href="https://en.cppreference.com/w/cpp/locale/ctype/widen" rel="nofollow noreferrer"><code>widen</code></a></p></li>
<li><p><a href="https://en.cppreference.com/w/cpp/locale/ctype/narrow" rel="nofollow noreferrer"><code>narrow</code></a> (takes an additional fallback character argument)</p></li>
</ul>

<p>The protected virtual <code>do_</code> version of each of these functions has two overloads, operating on a single character and a sequence of characters respectively.</p>

<p>Correctly forwarding the behavior of the original facet requires storing the underlying locale:</p>

<pre><code>class ctype_space : public std::ctype&lt;char&gt; {
    using Base = std::ctype&lt;char&gt;;
    std::locale underlying_locale;

    const Base&amp; underlying_facet() const
    {
        return std::use_facet&lt;Base&gt;(underlying_locale);
    }
public:
    ctype_space(std::string_view d, std::locale l)
        : Base{new_table(d, l), true}
        , underlying_locale{l}
    {
    }
    char do_toupper(char c) const override
    {
        return underlying_facet().toupper(c);
    }
    const char* do_toupper(char* first, const char* last) const override
    {
        return underlying_facet().toupper(first, last);
    }
    char do_tolower(char c) const override
    {
        return underlying_facet().tolower(c);
    }
    const char* do_tolower(char* first, const char* last) const override
    {
        return underlying_facet().tolower(first, last);
    }
    char do_widen(char c) const override
    {
        return underlying_facet().widen(c);
    }
    const char* do_widen(const char* begin, const char* end, char* dest) const override
    {
        return underlying_facet().widen(begin, end, dest);
    }
    char do_narrow(char c, char fallback) const override
    {
        return underlying_facet().narrow(c, fallback);
    }
    const char* do_narrow(const char* begin, const char* end,
                          char fallback, char* dest) const override
    {
        return underlying_facet().narrow(begin, end, fallback, dest);
    }
};
</code></pre>

<hr>

<h1>Minimizing usage of <code>new</code></h1>

<p>The <code>new_table</code> function allocates memory for the lookup table using <code>new</code>.  The underlying facet is responsible for deleting the memory because I passed <code>del = true</code> to the constructor.  I should have used <code>std::unique_ptr</code> to control the memory and <code>release</code> the ownership at the end to ensure exception safety.</p>

<p>But now that I think of it, I don't need dynamic allocation at all.  I can simply make the table a member of the <code>ctype_space</code> facet, and pass <code>del = false</code>.  The table will still live as long as the underlying facet.</p>

<hr>

<p>I'm pretty sure I came up with a fourth issue at some time, but I can't seem to recall it right now ...</p>
    </div>