<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The strategy needs work: brute-force search is going to scale very badly.  As an order-of-magnitude estimate, observe that the code calls <code>IsValid()</code> around <code>SIZE</code> times for each cell - that's O(<em>n</em>Â³), where <em>n</em> is the <code>SIZE</code>.</p>

<p>Be more consistent with formatting.  It's easier to read (and to search) code if there's a consistent convention.  To take a simple example, we have:</p>

<blockquote>
<pre><code>int IsValid (int sudoku[SIZE][SIZE], int row, int col, int number)
int Solve(int sudoku[SIZE][SIZE], int row, int col)

   if (Solve (sudoku,0,0))
        if(IsValid(sudoku,row,col,number))
</code></pre>
</blockquote>

<p>all with differing amounts of space around <code>(</code>.  This kind of inconsistency gives an impression of code that's been written in a hurry, without consideration for the reader.</p>

<p>Instead of defining <code>SIZE</code> and deriving <code>SQRT</code>, it's simpler to start with <code>SQRT</code> and define <code>SIZE</code> to be <code>(SQRT * SQRT)</code>.  Then there's no need for <code>&lt;math.h&gt;</code> and no risk of floating-point approximation being unfortunately truncated when it's converted to integer.</p>

<hr>

<p>The declaration/definition of <code>main()</code> should specify that it takes no arguments:</p>

<pre><code>int main(void)
</code></pre>

<p>If we write <code>int main()</code>, that declares <code>main</code> as a function that takes an <em>unspecified</em> number of arguments (unlike C++, where <code>()</code> is equivalent to <code>(void)</code>).</p>

<p>You can see that C compilers treat <code>void foo(){}</code> differently from <code>void foo(void){}</code> <a href="https://godbolt.org/z/pJyy64" rel="nofollow noreferrer">on the Godbolt compiler explorer</a>.</p>
    </div>