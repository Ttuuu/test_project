<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Thanks for sharing your code.</p>

<h1>OOP</h1>

<p>OOP doesn't mean to "split up" code into random classes.</p>

<p>The ultimate goal of OOP is to reduce code duplication, improve readability and support reuse as well as extending the code.</p>

<p>Doing OOP means that you follow certain principles which are (among others):</p>

<ul>
<li>information hiding / encapsulation</li>
<li>single responsibility</li>
<li>separation of concerns</li>
<li>KISS (Keep it simple (and) stupid.)</li>
<li>DRY (Don't repeat yourself.)</li>
<li>"Tell! Don't ask."</li>
<li>Law of demeter ("Don't talk to strangers!")</li>
</ul>

<p>E.g.: in your class <code>TicTacToeGame</code> you access a field in the class <code>PrintBoard</code>. This is a violation of the <em>information hiding / encapsulation</em> principle. 
The cause why you "can't get rid" of that static access is that you should not access this field from outside at all. The method in you <code>FullPlace</code> class schould be in class <code>PrintBoard</code> (which should not be named with the prefix "print"). 
In turn the class<code>FullPlace</code> should't exist at all.</p>

<h1>Naming</h1>

<p>Finding good names is the hardest part in programming, so always take your time to think about the names of your identifiers.</p>

<h3>Naming Conventions</h3>

<p>Please read (and follow) the 
<a href="http://www.oracle.com/technetwork/java/codeconventions-135099.html" rel="nofollow noreferrer">Java Naming Conventions</a></p>

<h3>misleading naming</h3>

<p>Some of your identifiers have somewhat misleading names, eg. <code>ChangePlayer</code> and <code>PrintBoard</code> which look like  method names since they start with a <em>verb</em> but they are classes. 
But classes don't <em>do</em> something. They <em>are</em> something which is <em>able to do</em> something.</p>

<h1>Magic numbers</h1>

<p>Your code has some magic numbers. This are literal values with a special meaning like here:</p>

<pre><code>    for (int i = 0; i &lt; 3; i++) {
        for (int j = 0; j &lt; 3; j++) 
</code></pre>

<p>You should either use constants with meaningful names like</p>

<pre><code>private static final int GAME_FIELD_SIZE =3;
// ...
for (int i = 0; i &lt; GAME_FIELD_SIZE; i++) {
    for (int j = 0; j &lt; GAME_FIELD_SIZE; j++) {
</code></pre>

<p>or use existing constraints like so:</p>

<pre><code>for (int i = 0; i &lt; board.length; i++) {
    for (int j = 0; j &lt; board[0].length; j++) {
</code></pre>
    </div>