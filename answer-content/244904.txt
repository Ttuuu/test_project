<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Specific suggestions:</p>
<ol>
<li>In many situations it would probably be useful to return <code>sub</code> rather than <code>len(sub)</code>. This makes the code somewhat simpler and gives the caller more information. Depending on the context that may or may not be useful, but it simplifies the code, which makes it easier to focus on the core issue.</li>
<li>The code iterates over all sub-lists, calculating <code>min</code> and <code>max</code> of <em>each</em> of them. This is a lot of duplicate work. You can instead iterate only once over the list (with some backtracking):
<ol>
<li>Set the longest sub-list to the empty list.</li>
<li>Set the <em>working</em> sub-list to a list containing just the first item in the input list.</li>
<li>Set working sub-list min and max to the first item in the working sub-list.</li>
<li>Move along the input list, updating min and max as long as the difference between them ends up being less than one and adding the current item to the working sub-list.</li>
<li>Once you encounter a number which makes the difference between min and max <em>more</em> than one (or the end of the list, at which point you'd terminate after this step), check if the working sub-list is longer than the longest sub-list and update the latter if so.</li>
<li>Once you encounter a number which makes the difference between min and max more than one you can't simply start the new working sub-list from that list item, because valid sub-lists may overlap (for example, <code>[1, 1, 2, 3]</code> has valid sub-lists <code>[1, 1, 2]</code> and <code>[2, 3]</code>). At this point you need to set the new working sub-list to include all the items at the tail end of the previous working sub-list which make a valid sub-list with the new item (if any).</li>
<li>Go to 3 until you reach the end of the list.</li>
</ol>
</li>
</ol>
<h2>Tool support</h2>
<ol>
<li><p><a href="https://github.com/ambv/black" rel="noreferrer"><code>black</code></a> can automatically format your code to be more idiomatic, for example adding spaces around infix mathematical operators like <code>+</code>.</p>
</li>
<li><p><a href="https://gitlab.com/pycqa/flake8" rel="noreferrer"><code>flake8</code></a> can give you more hints to write idiomatic Python beyond <code>black</code>:</p>
<pre><code> [flake8]
 ignore = W503,E203
</code></pre>
</li>
<li><p>I would then recommend validating your <a href="https://docs.python.org/3/library/typing.html" rel="noreferrer">type hints</a> using a strict <a href="https://github.com/python/mypy" rel="noreferrer"><code>mypy</code></a> configuration:</p>
<pre><code> [mypy]
 check_untyped_defs = true
 disallow_any_generics = true
 disallow_untyped_defs = true
 ignore_missing_imports = true
 no_implicit_optional = true
 warn_redundant_casts = true
 warn_return_any = true
 warn_unused_ignores = true
</code></pre>
<p>In your case it looks like the type of <code>arr</code> should be <code>Iterable[int]</code> and the output is <code>int</code>.</p>
</li>
</ol>
    </div>