<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>try
{
  bool userDirExist = StoryManager.MainWindow.FtpClient.DirectoryExists(userDir);
  bool projectsDirExist = StoryManager.MainWindow.FtpClient.DirectoryExists(userDir + "/Projects");
  bool fileExist = StoryManager.MainWindow.FtpClient.FileExists("log.txt");

  if (userDirExist)
  {
      try
      {
          await StoryManager.MainWindow.FtpClient.SetWorkingDirectoryAsync(userDir);
      }
      catch (Exception ex)
      {
          System.Windows.Forms.MessageBox.Show("An error ocurred please try again " + ex.Message);
      }

      if (!projectsDirExist)
      {
          try
          {
              await StoryManager.MainWindow.FtpClient.CreateDirectoryAsync(userDir + "/Projects");
          }
          catch (Exception ex)
          {
              System.Windows.Forms.MessageBox.Show("An error ocurred please try again " + ex.Message);
          }
      }
  }

  else
  {
      try
      {
          await StoryManager.MainWindow.FtpClient.CreateDirectoryAsync(userDir);
          await StoryManager.MainWindow.FtpClient.SetWorkingDirectoryAsync(userDir);
          await StoryManager.MainWindow.FtpClient.CreateDirectoryAsync(userDir + "/Projects");
      }
      catch (Exception ex)
      {
          System.Windows.Forms.MessageBox.Show("An error ocurred please try again " + ex.Message);
      }
  }

  if (!fileExist)
  {
      var tempPath = Path.GetTempPath();
      var textFile = "##### Log File #####";
      textFile.AddLine(DateTime.Now.ToString());
      File.WriteAllText(tempPath + "log.txt", textFile);
      await StoryManager.MainWindow.FtpClient.UploadFileAsync(tempPath + "log.txt", "log.txt");
      File.Delete(tempPath + "log.txt");
  }

  StoryManager.Add(new WelcomeScreen());
}


catch (Exception ex)
{
  System.Windows.Forms.MessageBox.Show("An error ocurred please try again " + ex.Message);
}
</code></pre>
</blockquote>

<p>I don't think this entire block is very useful. Regardless of any errors it tries to proceed with the next step. At the same time it confuses the user by showing them messages that read <em>please try agian</em> but the user has no chance in doing so as the code continues so he probably sees more of these messages asking themselfes what's going on? In the worst case, they'll see it four times.</p>

<p>What you should do:</p>

<ul>
<li>if the next step relies on the results of the previous one, then remove all <code>try/catch</code>es here and handle these exceptions inside the caller, only once and and with a single error message giving the user actually a chance to repeat the process</li>
<li>if, however, all steps are independent, then you should encapsulate them in separate methods and tell the user which steps failed and what needs to be tried again.</li>
</ul>

<p>Tell the user exactly what went wrong like <em>Could not create a new folder 'ABC'</em> or <em>Could not set working directory to 'ABC'</em> etc. The stack trace won't help him very much as he would need to know the implementation to make heads or tails from them. And even you, in a couple of weeks, will be asking yourself <em>what is that?</em> and you'll end up debugging.</p>

<hr>

<blockquote>
<pre><code>if (UsernameTextBox.Text.Equals("") || PasswordTextBox.Password.ToString().Equals(""))
{

  MessageBox.Show("Please, enter your credentials");
  ContentGrid.Opacity = 1;
  LoadingIndicator.Opacity = 0;
  return;
}
</code></pre>
</blockquote>

<p>Instead of showing the user an error message after it's too late, you should validate these fields and prevent him from clicking <code>OK</code> (or whatever) until the input is valid.</p>

<p>There are many ways to do this and different frameworks might have their own ways but a native one is the <a href="https://docs.microsoft.com/en-us/dotnet/framework/winforms/user-input-validation-in-windows-forms" rel="nofollow noreferrer"><code>Validating</code> and <code>Validated</code></a> events. You can use them to show meaningful hints how to fill the input boxes.</p>

<hr>

<blockquote>
<pre><code>public static async Task&lt;User&gt; LoginAsync(string usernameValue, string passwordValue)
{
  try
  {
      // ...

      return loggedUser;

  }
  catch (Exception ex)

  {
      Console.WriteLine(ex.ToString());
  }

  return null;
}
</code></pre>
</blockquote>

<p>It's better to not return <code>null</code>s. Let the caller handle the error as it must do it anyway in the form of a <code>null</code>. It would simplify the code not only here, because there wouldn't be any <code>try/catch</code> but also on the other side as you woulnd't need any null checks and probably more messages.</p>
    </div>