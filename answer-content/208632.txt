<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There is no particular need for this to be a class. While the reading of the file and the writing of the file are coupled, IMO this is not yet enough to make it into a class.</p>

<p>What is especially confusing is that you use members even for local variables which are not needed in the other methods.</p>

<hr>

<p>Now, first, your reading of the file can be greatly simplified:</p>

<pre><code>def read_password_file(file_name="passwords.txt"):
    with open(file_name) as f:
        return {key: password for key, password in map(str.split, f)}
</code></pre>

<p>This also allows using a different file than the default. It uses a <a href="https://stackoverflow.com/a/1747827/4042267">dictionary comprehension</a> and the fact that files are iterable.</p>

<hr>

<p>The generation of the random passwords should be separate from the CLI interface (in case you want to change one without the other). The generation itself can also be simplified by using the <a href="https://docs.python.org/3/library/string.html" rel="nofollow noreferrer"><code>string</code></a> module:</p>

<pre><code>import random
from string import ascii_lowercase, ascii_uppercase, digits, punctuation

ALLOWED_CHARS = ascii_lowercase + ascii_uppercase + digits + punctuation

def generate_random_pass_word(length=14, allowed_chars=ALLOWED_CHARS):
    return "".join(random.choices(allowed_chars, k=length))
</code></pre>

<p>This uses the <a href="https://docs.python.org/3/library/random.html#random.choices" rel="nofollow noreferrer"><code>random.choices</code></a> function introduced in Python 3.6.</p>

<hr>

<p>Your saving and retrieving from the passwords dictionary can become this:</p>

<pre><code>import hashlib

def get_key(name):
    return hashlib.md5(name.encode('utf-8')).hexdigest()

def save_password(passwords, password, file_name="passwords.txt"):
    if password is None:
        print('First generate a password')
        return
    print('to save the generated pass word give it a name')
    name = get_key(input())
    if name in passwords:
        print('your key password already exists!')
    else:
        with open(file_name, 'a') as f:
            f.write(f"{name} {password}\n")
        passwords[name] = password
        print('password stored')

def read_password(passwords):
    print('to read the generated pass word type its name')
    name = get_key(input())
    if names in passwords:
        print(passwords[name])
    else:
        print('we are sorry your password is non existent')
</code></pre>

<p>Note that I call your <code>self.myPass</code> what it is, a simple name. It is not really a password (you could look it up in the file and use a rainbow table to get the cleartext) and even the context of having to think of a good password to store your good password seems ridiculous (do you use this password generation function to generate this password? What password do you use to store that password?).</p>

<p>I also used the new <a href="https://www.python.org/dev/peps/pep-0498/" rel="nofollow noreferrer"><code>f-string</code></a> (Python 3.6+) to simplify the writing to the file.</p>

<hr>

<p>And finally, your <code>main</code> function, which has the user interface:</p>

<pre><code>def main():
    pass, action = None, None
    passwords = read_password_file()

    print('perform one of the actions')
    while action != 'break':
        action = input('new action please\n')
        if action == 'generate':
            print('determine your generated password length, We recommend above 14 characters')
            length = int(input())
            pass = generate_random_pass_word(length)
            print('generated:', pass)
        elif action == 'read':
            read_password(passwords)
        elif action == 'save':
            save_password(passwords, pass)
        else:
            print(action + 'is not a valid action')

if __name__ == "__main__":
    main()
    print('fin')
</code></pre>

<p>Note that I put the calling of <code>main</code> under a <a href="http://stackoverflow.com/questions/419163/what-does-if-name-main-do"><code>if __name__ == "__main__":</code></a> guard to allow importing from this script from another script.</p>
    </div>