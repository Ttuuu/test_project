<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First don't mix <code>Item</code> class with <code>Recipe</code>(<code>ShoppingCart</code>) class. the <code>quantity</code> should be part of <code>RecipeItem</code>(<code>ShoppingCartItem</code>), as well as <code>Tax</code>&amp;<code>Cost</code>. The <code>TotalTax</code>&amp;<code>TotalCost</code> should be part of <code>ShoppingCart</code>.</p>

<p>My <code>Item</code> class, has only <code>Name</code>&amp;<code>Price</code> &amp; some readonly properties(getters) like <code>IsImported</code> (in c#):</p>

<pre><code>class Product
{
    static readonly IDictionary&lt;ProductType, string[]&gt; productType_Identifiers = 
        new Dictionary&lt;ProductType, string[]&gt;
        {
            {ProductType.Food, new[]{ "chocolate", "chocolates" }},
            {ProductType.Medical, new[]{ "pills" }},
            {ProductType.Book, new[]{ "book" }}
        };

    public decimal ShelfPrice { get; set; }

    public string Name { get; set; }

    public bool IsImported { get { return Name.Contains("imported "); } }

    public bool IsOf(ProductType productType)
    {
        return productType_Identifiers.ContainsKey(productType) &amp;&amp;
            productType_Identifiers[productType].Any(x =&gt; Name.Contains(x));
    }
}

class ShoppringCart
{
    public IList&lt;ShoppringCartItem&gt; CartItems { get; set; }

    public decimal TotalTax { get { return CartItems.Sum(x =&gt; x.Tax); } }

    public decimal TotalCost { get { return CartItems.Sum(x =&gt; x.Cost); } }
}

class ShoppringCartItem
{
    public Product Product { get; set; }

    public int Quantity { get; set; }

    public decimal Tax { get; set; }

    public decimal Cost { get { return Quantity * (Tax + Product.ShelfPrice); } }
}
</code></pre>

<p>Your tax calculation part is coupled with <code>Item</code>. An item doesn't define tax policies it's Government's job. Based on the problem's description, there are two kind of Sales Taxes: <code>Basic</code> and <code>Duty</code> taxes. You can use <a href="https://www.infoworld.com/article/3199484/c-sharp/how-to-implement-the-template-method-design-pattern-in-c.html" rel="nofollow noreferrer"><code>Template Method Design Pattern</code></a> to implement it:</p>

<pre><code>abstract class SalesTax
{
    abstract public bool IsApplicable(Product item);
    abstract public decimal Rate { get; }

    public decimal Calculate(Product item)
    {
        if (IsApplicable(item))
        {
            //sales tax are that for a tax rate of n%, a shelf price of p contains (np/100)
            var tax = (item.ShelfPrice * Rate) / 100;

            //The rounding rules: rounded up to the nearest 0.05
            tax = Math.Ceiling(tax / 0.05m) * 0.05m;

            return tax;
        }

        return 0;
    }
}

class BasicSalesTax : SalesTax
{
    private ProductType[] _taxExcemptions = new[] 
    { 
        ProductType.Food, ProductType.Medical, ProductType.Book 
    };

    public override bool IsApplicable(Product item)
    {
        return !(_taxExcemptions.Any(x =&gt; item.IsOf(x)));
    }

    public override decimal Rate { get { return 10.00M; } }
}

class ImportedDutySalesTax : SalesTax
{
    public override bool IsApplicable(Product item)
    {
        return item.IsImported;
    }

    public override decimal Rate { get { return 5.00M; } }
}
</code></pre>

<p>And finally a class to apply taxes:</p>

<pre><code>class TaxCalculator
{
    private SalesTax[] _Taxes = new SalesTax[] { new BasicSalesTax(), new ImportedDutySalesTax() };

    public void Calculate(ShoppringCart shoppringCart)
    {
        foreach (var cartItem in shoppringCart.CartItems)
        {
            cartItem.Tax = _Taxes.Sum(x =&gt; x.Calculate(cartItem.Product));
        }

    }
}
</code></pre>

<p>You can try them out at <a href="https://dotnetfiddle.net/zz6Jp4" rel="nofollow noreferrer">MyFiddle</a>.</p>
    </div>