<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>You badly need more functions. </p></li>
<li><p><code>apply</code> functions will not speed up your code that much compared to for loops, but they will make it much more readable, and then you'll be able to spot inefficiencies, in this case though you will more often need <code>purrr::accumulate</code>, or <code>Reduce</code> with <code>accumulate = TRUE</code>, as a given iteration is using the result of the previous iteration. Chances are that all the objects that you initiate with empty values should probably be outputs from an accumulate call of some sort.</p></li>
<li><p>Put all objects that belong to one iteration together inside a list, so you can do things like <code>your_list &lt;- ovoposite(your_list)</code>.</p></li>
<li><p>I don't think <code>generation tracker</code> should be initiated as a big data.frame, it should be a list that you'd get from accumulate, you can use <code>bind_rows</code> on it afterwards to get a data.frame.  <code>for (j in 1:length(seed)) {temp_seed &lt;- seed[j]</code> should be <code>for (temp_seed in seed)</code></p></li>
<li><p>I think some of the sampling and some other operations can be done outside of loops in a vectorized way, but i'm never too sure because I can't keep track of what is modified in a loop or not, functions will help there as well.</p></li>
<li><p>Data wrangling will be faster using <code>data.table</code>, loops will be faster with <code>Rcpp</code> but you really need to structure the code much more before. </p></li>
<li><p><code>for (j in 1:length(seed)) {temp_seed &lt;- seed[j]</code> should be <code>for (temp_seed in seed)</code></p></li>
<li><p>in the <code>if next</code> sequence, skip the else and save a pair of brackets.</p></li>
<li><p>All of this (beside the data.table / Rcpp mentions) won't speed up your code that much, but it's crucial to make the logic of your algorithm appear clearly, and have data structure and functions that follow that logic, then we might find some tricks to speedup the code by leveraging some vectorized functions.</p></li>
</ul>

<hr>

<p>Edit : more on accumulate</p>

<p>I can't build an example directly from your code because it's a bit too complex, but hopefully this will help.</p>

<p>This is the kind of code that you produced:</p>

<pre><code>x   &lt;- c(10,20,30)
res &lt;- numeric(3)
a   &lt;- 1
b   &lt;- 5

res[[1]] &lt;- a * b + x[1]
for(i in 2:length(res)){
  a = a+1 # using the previous value
  b = b^2
  res[[i]] &lt;- a * b + x[i] - res[[i-1]]
}
res
# [1]   15   55 1850
</code></pre>

<p>Let's simplify this, a and b could be defined as vectors outside of the loop more efficiently:</p>

<pre><code>a &lt;- 1:3
b &lt;- accumulate(1:2, ~.^2,.init=5)
# or better b &lt;- 5^(2^(0:2)), i needed to think deeper about the math but it's faster, and this intermediate step helped do it
library(purrr)
abx &lt;- a * b + x
res &lt;- accumulate(abx[-1], ~ .y - .x, .init = abx[1])
res
# [1]   15   55 1850
</code></pre>

<p>This will run much faster too, not because of <code>accumulate</code> which just hides a regular loop, but because it forced me to think more clearly about what are my inputs and outputs and vectorize what could be.</p>

<p>We can make it more readable by giving a name to the function that we use to get res, we'll place this function at the top of the R file with the other and we'll document it, which will be easy because they are few parameters and it does something simple. :</p>

<pre><code>iterate_on_result &lt;- function(prev, abx_i) abx_i - prev
</code></pre>

<p>The in our code we'll just call :</p>

<pre><code>res &lt;- accumulate(abx[-1], iterate_on_result, .init = abx[1])
</code></pre>

<p>Which makes it clear what is the input and what is modified, and makes it easier to simplify the rest of the code.</p>
    </div>