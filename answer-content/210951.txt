<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm adding another answer in a different direction from my previous one, both to show the OP some alternative techniques, and to illustrate an adaptation of @RJM's method.</p>

<p>Here's the code; it's quite simple:</p>

<pre><code>#include &lt;stdint.h&gt;
#include &lt;stdio.h&gt;

static void printBinary(const uint8_t *restrict num, int bytes) {
    for (int p = bytes - 1; p &gt;= 0; p--) {
        uint8_t x = num[p];
        for (int i = 0; i &lt; 8; i++) {
            putchar('0' | (x &gt;&gt; 7));
            x &lt;&lt;= 1;
        }
    }
}

int main() {
    int64_t x;
    for (;;) {
        puts("Enter an integer: ");
        if (scanf("%lld", &amp;x) == 1)
            break;
        while (getchar() != '\n');
    }

    printBinary((uint8_t*)&amp;x, sizeof(x));
    putchar('\n');

    return 0;
}
</code></pre>

<p>Things to observe as compared to the OP's code (and RJM's code):</p>

<ul>
<li>There are no calls to <code>malloc</code> or <code>memcpy</code>.</li>
<li>The result is not stored in memory; it's output directly to <code>stdout</code>.</li>
<li>The input integer has a primitive form of validation. The program will loop until <code>scanf</code> succeeds.</li>
<li>The input integer supports 64 bits instead of 32.</li>
<li>The output routine supports integers of any length, with the assumption that the integer is little-endian.</li>
<li>The bit sequence reversal is done directly in the decoding loop, rather than as a separate step.</li>
<li>There is no need for a "filter" (mask) variable.</li>
<li>The main loop does not need an <code>if</code>.</li>
</ul>

<h2>A brief word on computers</h2>

<p>This code assumes a few things that are true in the vast (vast) majority of cases:</p>

<ul>
<li>The processor is little-endian</li>
<li>There are 8 bits per byte</li>
<li>The caller cares about the "real" binary representation of data in the processor, rather than the "logical" binary translation of variables</li>
</ul>

<p>The last point applies to both signed and floating-point data. This code does not care to write "-10", because that's not how the processor stores the data. This code will show either one's-complement (never seen these days) or two's-complement (always seen these days) machine representations of the data.</p>

<p>Similarly, this code does not show "-0.5" as "-0.1" in binary. To do so would make the code more complicated.</p>

<h2>A brief word on <code>restrict</code></h2>

<p>For the dirty details, do some <a href="https://en.cppreference.com/w/c/language/restrict" rel="nofollow noreferrer">reading here</a>.</p>

<p><code>restrict</code> is a promise that no aliasing is done; i.e. that this pointer is the only way to access the data it points to, to enable some optimizations that wouldn't otherwise be possible. In the context of this program, if it's self-contained, the keyword won't have any effect. <code>restrict</code> enables some optimizations that would make it invalid for other code to modify the same data. Even in a context where there is only one pointer argument to the function, <code>restrict</code> has meaning. A multi-threaded program could alias the data, or (though not the case here) this function could call out to another function that already holds an alias. These aliases and <code>restrict</code> cannot coexist.</p>

<p>I'm happy to explain any aspect of this approach for the purposes of education.</p>
    </div>