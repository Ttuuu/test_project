<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I see a number of things that may help you improve your program.</p>

<h2>Isolate platform-specific code</h2>

<p>If you must have <code>stdafx.h</code>, consider wrapping it so that the code is portable:</p>

<pre><code>#ifdef WINDOWS
#include "stdafx.h"
#endif
</code></pre>

<h2>Make sure you have all required <code>#include</code>s</h2>

<p>The code uses <code>std::thread</code> but doesn't <code>#include &lt;thread&gt;</code>. It was not difficult to infer, but maintenance is simplified if all of the required <code>#include</code>s are present.  While the code may compile on your machine as is, if it does it is implicitly relying on one of the other named headers to include the missing one.  This is not portable and eventually becomes a maintenance headache.  Best is to use the documented <code>#include</code>s from the beginning. </p>

<h2>Use only required <code>#include</code>s</h2>

<p>Only include files that are actually needed.  Nothing from the <code>&lt;sstream&gt;</code> header appears to be needed here, so I'd recommend omitting it.</p>

<h2>Supply the missing <code>isVowel</code> function</h2>

<p>This is more a matter of helping reviewers rather than necessarily a flaw in your code, but without the implementation of the <code>isVowel</code> code, reviewers are forced to guess what that code does.</p>

<h2>Allow the user to specify input file name</h2>

<p>The input file name is currently hardcoded which certainly greatly restricts the usefulness of the program.  Consider using <code>argc</code> and <code>argv</code> to allow the user to specify file names on the command line.  </p>

<h2>Avoid data races</h2>

<p>The <code>ProduceData</code> and <code>ConsumeData</code> functions both potentially access <code>std::cout</code> but that's a single resource that might simultaneously be used by other threads.  One fix for this is to use a <code>std::mutex</code> like this:</p>

<pre><code>std::mutex cout_mutex;

// wherever cout is used:
some_function() {
    std::lock_guard&lt;std::mutex&gt; lock(cout_mutex);
    std::cout &lt;&lt; "Now we can do this safely!\n";
}
</code></pre>

<p>Note that <a href="http://en.cppreference.com/w/cpp/thread/lock_guard" rel="nofollow noreferrer"><code>std::lock_guard</code></a> is intended to be used via RAII so that the lock is obtained when the object is created and released when it's destroyed, making it easy to avoid the bug of forgetting to unlock the mutex.</p>

<h2>Avoid the use of global variables</h2>

<p>The current code has <code>mutex</code>, <code>queue</code> and <code>conditionVariable</code> as global variables.  It's generally better to explicitly pass variables your function will need or declare them within the appropriately smallest possible scope rather than using the vague implicit linkage of a global variable.  Also, those are very generic names that are not very helpful to understanding what the code is doing.  For example, I generally prefer to name a <code>mutex</code> after the thing it's protecting to make it easier to see why it's being used at all; for that reason, in this case I'd suggest <code>q_mutex</code> or the like.</p>

<h2>Minimize the time a lock is held</h2>

<p>The code currently contains these lines:</p>

<pre><code>while (!queue.empty())
{
    const std::string&amp; str = queue.front();
    std::size_t numVowels = std::count_if(str.begin(), str.end(), isVowel);
    std::cout &lt;&lt; str &lt;&lt; "-" &lt;&lt; numVowels;
    queue.pop();
}
uniqueLock.unlock();
</code></pre>

<p>This effectively keeps the queue locked until the queue is entirely emptied and all of the output has been written.  That's potentially a long time and also not really necessary.  It's good design to try to always minimize the time a lock is held.  In this case I'd probably just go through once rather than exhausting the queue, and do the printing outside the protection of the lock.  If string duplication is fast enough, one could rewrite it like this:</p>

<pre><code>std::string str;
if (!queue.empty())
{
    str = queue.front();
    queue.pop();
}
uniqueLock.unlock();
std::size_t numVowels{std::count_if(str.begin(), str.end(), isVowel)};
std::cout &lt;&lt; str &lt;&lt; "-" &lt;&lt; numVowels;
</code></pre>

<p>Better, of course, would be to take the advice above and also obtain a lock for <code>std::cout</code>.  </p>

<h2>Fix the bug</h2>

<p>The producer currently has this curious bit of code</p>

<pre><code>for (std::uint8_t count = 0; (count &lt; maxWordCount) || (count != '\0'); ++count)
    queue.push(word);
</code></pre>

<p>The problem with that is that even for a <code>count &gt;= maxWordCount</code> the second part of the <code>||</code> clause will be true, leading to an endless loop.  Better would be to simply push a word at a time and simply use <code>queue.push(word);</code> without the loop.</p>
    </div>