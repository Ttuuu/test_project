<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I just realized, that I can simplify <code>mktemp</code> by directly returning the <code>tempfile._TemporaryFileWrapper</code>'s buffer, which can be used in a file context for open and closing without deleting the superordinate <code>_TemporaryFileWrapper</code>:</p>

<pre><code>def mktemp(self, mode='w+b', encoding=None, suffix=''):
    """Creates and registers a named temporary
    file and returns the file object.
    """
    return self.enter_context(NamedTemporaryFile(
        mode=mode, encoding=encoding, suffix=suffix, prefix=self.prefix,
        dir=self.root)).file
</code></pre>

<p><strong>Update</strong><br>
With the change above, the returned buffer does not behave as expected regarding its attribute <code>name</code>.
To fix that, I introduced a wrapper class:</p>

<pre><code>class NamedFile:
    """Wraps a file buffer and its associated name."""

    def __init__(self, file, name):
        """Sets buffer and name."""
        self.file = file
        self.name = name

    def __enter__(self):
        self.file.__enter__()
        return self

    def __exit__(self, typ, value, traceback):
        return self.file.__exit__(typ, value, traceback)

    def __getattr__(self, attr):
        return getattr(self.file, attr)

    @classmethod
    def from_ntf(cls, named_temporary_file):
        """Creates a named file from the specified NamedTemporaryFile."""
        return cls(named_temporary_file.file, named_temporary_file.name)
</code></pre>

<p>And return it instead of the raw buffer accordingly:</p>

<pre><code>def mktemp(self, mode='w+b', encoding=None, suffix=''):
    """Creates and registers a named temporary
    file and returns the file object.
    """
    return NamedFile.from_ntf(self.enter_context(NamedTemporaryFile(
        mode=mode, encoding=encoding, suffix=suffix, prefix=self.prefix,
        dir=self.root)))
</code></pre>
    </div>