<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Tested on Windows</h3>

<p>I tried your program natively on Windows to see what would happen.  First, I modified the Java and C files to remove all of the Android related code/naming.  Second, I increased the array sizes to 200000 and 2000000.  Then I used Visual Studio C++ to compile the C file, using this command:</p>

<pre><code>cl /LD csort.c /I&lt;$JAVA_HOME&gt;\include /I&lt;$JAVA_HOME&gt;\include\win32
</code></pre>

<p>(where <code>&lt;$JAVA_HOME&gt;</code> was the name of my Java home directory).</p>

<p>Then I compiled and ran the Java portion:</p>

<pre class="lang-none prettyprint-override"><code>% javac qsort.java
% java -Djava.library.path=. qsort

Java 23927588 C 29405966
Java 17247793 C 29613407
Java 16999298 C 28819718
Java 192228697 C 371417828
Java 193105113 C 344951184
Java 193282387 C 344107735
</code></pre>

<p>As you can see, the C sort was slower than the Java sort, just like what you encountered.</p>

<h3>Turn optimizations on</h3>

<p>I instrumented the C code to print out timestamps after each line of C code and found that the <code>GetIntArrayElements()</code> and <code>ReleaseIntArrayElements()</code> were not using any time. 
 All of the time was spent in <code>quicksort()</code> itself.  So I was puzzled by why the C code would be slower than the Java code.</p>

<p>Then I thought about turning optimizations on.  I recompiled the C code with an additional <code>/O2</code> flag:</p>

<pre><code>cl /LD csort.c /I&lt;$JAVA_HOME&gt;\include /I&lt;$JAVA_HOME&gt;\include\win32 /O2
</code></pre>

<p>I reran the test:</p>

<pre class="lang-none prettyprint-override"><code>java -Djava.library.path=. qsort 

Java 21830161 C 12143244
Java 16070011 C 11936736
Java 16373243 C 13104565
Java 186278523 C 143997203
Java 189248011 C 144834744
Java 193083653 C 141156471
</code></pre>

<p>Now you can see that the C code is actually about 30% faster than the Java code.</p>

<h3>Modified code</h3>

<p>Here is the modified code in case you want to try it yourself:</p>

<h3>qsort.java</h3>

<pre><code>import java.util.Arrays;
import java.util.Map;
import java.util.Random;
import java.util.concurrent.ThreadLocalRandom;

public class qsort {
    public native void QuicksortCPassArray(int a[]);

    static {
        System.loadLibrary("csort");
    }

    public static void main(String [] args)
    {
        int n1[] = {200000, 2000000};
        int j1 = 0;
        for (j1 = 0; j1 &lt; n1.length; j1++) {
            int counts=0;
            for (int k1=0;k1&lt;3;k1++) {
                int i, n = n1[j1];
                long startTime, estimatedTime, estimatedTime1;

                int a[];
                a = new int[n];
                for (i = 0; i &lt; n; i++) {
                    a[i] = i;
                }

                int z, j;
                Random rnd = new Random(System.currentTimeMillis());
                for (j = n - 1; j &gt; 0; j--) {
                    z = rnd.nextInt(j + 1);
                    swap(a, z, j);
                }

                int b[]= Arrays.copyOf(a,a.length);

                startTime = System.nanoTime();
                quicksort(a, 0, n - 1);
                estimatedTime = System.nanoTime() - startTime;
                System.out.print("Java " + estimatedTime + ' ');

                startTime = System.nanoTime();
                new qsort().QuicksortCPassArray(b);
                estimatedTime1 = System.nanoTime() - startTime;
                System.out.print("C " + estimatedTime1 + '\n');

            }

        }
    }

    private static void quicksort(int a[], int x, int y) {

        int q;
        if (x &lt; y) {
            q = partition(a, x, y);
            quicksort(a, x, q - 1);
            quicksort(a, q + 1, y);
        }
    }

    private static int partition(int a[], int x, int y) {
        int temp = a[y];
        int i = x - 1;
        int j;
        for (j = x; j &lt;= y - 1; j++) {
            if (a[j] &lt;= temp) {
                i++;
                swap(a, i, j);
            }
        }
        swap(a, i + 1, y);
        return (i + 1);
    }

    private static void swap(int a[], int i, int j) {
        int t = a[i];
        a[i] = a[j];
        a[j] = t;
    }

    private int[] shuffleArray(int a[]){
        int i;
        for (i = 0; i &lt; a.length; i++) {
            a[i] = i;
        }

        int z;
        Random rnd = ThreadLocalRandom.current();
        for (int j = a.length - 1; j &gt; 0; j--) {
            z = rnd.nextInt(j + 1);
            swap(a, z, j);
        }
        return a;

    }
}
</code></pre>

<h3>csort.c</h3>

<p>(only changed the name of the function)</p>

<pre><code>#include &lt;jni.h&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;time.h&gt;

void quicksort(jint *a, jint x, jint y);

jint partition(jint *a, jint x, jint y);

void swap(jint *a, jint *b);

JNIEXPORT void JNICALL
Java_qsort_QuicksortCPassArray(
        JNIEnv *env,
        jobject this,
        jintArray arr) {

    jint *c_array = (*env)-&gt;GetIntArrayElements(env, arr, 0);

    jint n = (*env)-&gt;GetArrayLength(env, arr);

    quicksort(c_array, 0, n - 1);

    (*env)-&gt;ReleaseIntArrayElements(env, arr, c_array, 0);
}


void quicksort(jint *a, jint x, jint y) {
    jint q;
    if (x &lt; y) {
        q = partition(a, x, y);
        quicksort(a, x, q - 1);
        quicksort(a, q + 1, y);
    }
}


jint partition(jint *a, jint x, jint y) {
    jint temp = *(a + y);
    jint i = x - 1;
    jint j;
    for (j = x; j &lt;= y - 1; j++) {
        if (*(a + j) &lt;= temp) {
            i++;
            jint temp1 = *(a + i);
            *(a + i) = *(a + j);
            *(a + j) = temp1;
            //swap(&amp;a[i], &amp;a[j]);
        }
    }
    jint temp2 = *(a + i + 1);
    *(a + i + 1) = *(a + y);
    *(a + y) = temp2;
    //swap(&amp;a[i + 1], &amp;a[y]);
    return (i + 1);
}


void swap(jint *a, jint *b) {
    jint temp = *a;
    *a = *b;
    *b = temp;
}
</code></pre>
    </div>