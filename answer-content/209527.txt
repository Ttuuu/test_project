<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Various things with no precise order:</p>

<p><strong>Function names</strong></p>

<p>Numbers are accepted in <a href="https://docs.python.org/3/reference/lexical_analysis.html#identifiers" rel="nofollow noreferrer">identifier</a> such as function names. Instead of having <code>my_func_v_one</code>, you could go for <code>my_func_v1</code>.</p>

<p><strong>Less verbose tests</strong></p>

<p>These comments are to be taken with a pinch of salt: some prefer their unit test to be as simple as possible, some prefer to consider them as code and apply the usual principles such as Don't repeat yourself.</p>

<p>In order to make the tests more concise and easier to write, you could consider adding an helper method.</p>

<p>Also, you could have a single class like this:</p>

<pre><code>class TestBubbleSortAlgorithm(unittest.TestCase):

    def _test_sort(self, sorting_func, input_list, expected_list):
        self.assertEqual(sorting_func(input_list), expected_list)

    def test_bubble_sort_v1_with_positive_numbers(self):
        self._test_sort(bubble_sort_v1, [5, 5, 7, 8, 2, 4, 1], [1, 2, 4, 5, 5, 7, 8])

    def test_bubble_sort_v1_negative_numbers_only(self):
        self._test_sort(bubble_sort_v1, [-1, -3, -5, -7, -9, -5], [-9, -7, -5, -5, -3, -1])

    def test_bubble_sort_v1_with_negative_and_positive_numbers(self):
        self._test_sort(bubble_sort_v1, [-6, -5, -4, 0, 5, 5, 7, 8, 2, 4, 1], [-6, -5, -4, 0, 1, 2, 4, 5, 5, 7, 8])

    def test_bubble_sort_v1_same_numbers(self):
        self._test_sort(bubble_sort_v1, [1, 1, 1, 1], [1, 1, 1, 1])

    def test_bubble_sort_v1_empty_list(self):
        self._test_sort(bubble_sort_v1, [], [])

    def test_bubble_sort_v2_with_positive_numbers(self):
        self._test_sort(bubble_sort_v2, [5, 5, 7, 8, 2, 4, 1], [1, 2, 4, 5, 5, 7, 8])

    def test_bubble_sort_v2_negative_numbers_only(self):
        self._test_sort(bubble_sort_v2, [-1, -3, -5, -7, -9, -5], [-9, -7, -5, -5, -3, -1])

    def test_bubble_sort_v2_with_negative_and_positive_numbers(self):
        self._test_sort(bubble_sort_v2, [-6, -5, -4, 0, 5, 5, 7, 8, 2, 4, 1], [-6, -5, -4, 0, 1, 2, 4, 5, 5, 7, 8])

    def test_bubble_sort_v2_same_numbers(self):
        self._test_sort(bubble_sort_v2, [1, 1, 1, 1], [1, 1, 1, 1])

    def test_bubble_sort_v2_empty_list(self):
        self._test_sort(bubble_sort_v2, [], [])
</code></pre>

<p>Then you can use the fact that we have a sorting function we can trust to use it as a <a href="https://en.wikipedia.org/wiki/Test_oracle" rel="nofollow noreferrer">Test Oracle</a>.</p>

<p>Then you can write something like:</p>

<pre><code>class TestBubbleSortAlgorithm(unittest.TestCase):

    def _test_sort(self, sorting_func, input_list):
        expected_list = sorted(input_list)
        self.assertEqual(sorting_func(input_list), expected_list)

    def test_bubble_sort_with_positive_numbers(self):
        input_list = [5, 5, 7, 8, 2, 4, 1]
        self._test_sort(bubble_sort_v1, input_list)
        self._test_sort(bubble_sort_v2, input_list)

    def test_bubble_sort_negative_numbers_only(self):
        input_list = [-1, -3, -5, -7, -9, -5]
        self._test_sort(bubble_sort_v1, input_list)
        self._test_sort(bubble_sort_v2, input_list)

    def test_bubble_sort_with_negative_and_positive_numbers(self):
        input_list = [-6, -5, -4, 0, 5, 5, 7, 8, 2, 4, 1]
        self._test_sort(bubble_sort_v1, input_list)
        self._test_sort(bubble_sort_v2, input_list)

    def test_bubble_sort_same_numbers(self):
        input_list = [1, 1, 1, 1]
        self._test_sort(bubble_sort_v1, input_list)
        self._test_sort(bubble_sort_v2, input_list)

    def test_bubble_sort_empty_list(self):
        input_list = []
        self._test_sort(bubble_sort_v1, input_list)
        self._test_sort(bubble_sort_v2, input_list)
</code></pre>

<p>Or even:</p>

<pre><code>class TestBubbleSortAlgorithm(unittest.TestCase):

    def _test_sort_single_func(self, sorting_func, input_list):
        expected_list = sorted(input_list)
        self.assertEqual(sorting_func(input_list), expected_list)

    def _test_sort_all_funcs(self, input_list):
        self._test_sort_single_func(bubble_sort_v1, input_list)
        self._test_sort_single_func(bubble_sort_v2, input_list)

    def test_bubble_sort_with_positive_numbers(self):
        input_list = [5, 5, 7, 8, 2, 4, 1]
        self._test_sort_all_funcs(input_list)

    def test_bubble_sort_negative_numbers_only(self):
        input_list = [-1, -3, -5, -7, -9, -5]
        self._test_sort_all_funcs(input_list)

    def test_bubble_sort_with_negative_and_positive_numbers(self):
        input_list = [-6, -5, -4, 0, 5, 5, 7, 8, 2, 4, 1]
        self._test_sort_all_funcs(input_list)

    def test_bubble_sort_same_numbers(self):
        input_list = [1, 1, 1, 1]
        self._test_sort_all_funcs(input_list)

    def test_bubble_sort_empty_list(self):
        input_list = []
        self._test_sort_all_funcs(input_list)
</code></pre>

<p>Also, as for the tests themselves, I wouldn't base my tests on type of numbers you have (positive, negative, etc) other criteria. For instance, I'd write the following tests:</p>

<pre><code>class TestBubbleSortAlgorithm(unittest.TestCase):

    def _test_sort_single_func(self, sorting_func, input_list):
        expected_list = sorted(input_list)
        self.assertEqual(sorting_func(input_list), expected_list)

    def _test_sort_all_funcs(self, input_list):
        self._test_sort_single_func(bubble_sort_v1, input_list)
        self._test_sort_single_func(bubble_sort_v2, input_list)

    def test_bubble_sort_empty_list(self):
        input_list = []
        self._test_sort_all_funcs(input_list)

    def test_bubble_sort_one_element(self):
        input_list = [0]
        self._test_sort_all_funcs(input_list)

    def test_bubble_sort_same_numbers(self):
        input_list = [1, 1, 1, 1]
        self._test_sort_all_funcs(input_list)

    def test_bubble_sort_already_sorted(self):
        input_list = [1, 2, 3, 4]
        self._test_sort_all_funcs(input_list)

    def test_bubble_sort_reversed(self):
        input_list = [4, 3, 2, 1]
        self._test_sort_all_funcs(input_list)

    def test_bubble_sort_disorder_with_repetitions(self):
        input_list = [3, 5, 3, 2, 4, 2, 1, 1]
        self._test_sort_all_funcs(input_list)
</code></pre>
    </div>