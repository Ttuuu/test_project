<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p><strong>Obvious bug: confusing <code>print</code> with <code>return</code> in a function</strong></p>

<ul>
<li>your spec says modify the code so your function <strong>returns</strong> both solutions as a tuple. Not <strong>print</strong> them, which is what it currently does.</li>
<li>remove the <code>print(...)</code> line inside the function</li>
<li>the line <code>return solve_quadratic</code> should now be <code>return sol1, sol2</code></li>
<li>in general get out of the bad habit of having functions print their result instead of returning it (strictly that makes it only a subroutine, not a function). Returning the result is much more flexible, we can use it in unit-test, send it into another function or iterator, etc. If you only want to print the function's output, have your calling code do that: <code>print(solve_quadratic(...))</code>. So you lose nothing and gain a huge amount by having functions always return their result.</li>
</ul></li>
<li><p>Nastier bug: Your code is <strong>arbitrarily rounding subvalues to integers for no good reason, and hence returns the wrong answer for many non-integer inputs</strong>:</p>

<ul>
<li>Why does it do <code>d = int(b*b) - int(4*a*c)</code>, that's weird and outright wrong. Why not simply <code>d = b*b - 4*a*c</code>? Why are you rounding anything before the division? (If your intent is merely to get rounded solutions, then do say <code>round(sol, 1)</code> at the end)</li>
<li>Example: calling your function on <code>a=1, b=4, c=4.1</code> will wrongly round the slightly negative discriminant up to 0 and wrongly return a real result, where it should throw a ValueError</li>
<li>the code is not quite requiring all of <code>a,b,c</code> to be integers, but nearly: it (totally arbitrarily) requires b to at least be the sqrt of an integer, and <code>4*a*c</code> to be an integer.</li>
<li>as an aside we've uncovered that your spec/teacher didn't seem to care about testing with non-integer inputs.</li>
<li>(at least in Python 3 you no longer have to care about integer division and unwanted rounding when dividing an integer numerator by an integer denominator, which would have given a second unwanted source of rounding on the line <code>(-b + math.sqrt(d))/(2*a)</code>)</li>
</ul></li>
<li><p><strong>Exception for negative discriminant case, do you need to handle it</strong></p>

<ul>
<li>You don't handle the case where the discriminant is negative <code>d = int(b*b) - int(4*a*c)</code> hence taking <code>sqrt(d)</code> will blow up (if you're looking for real roots only). If you want to handle that, you could <code>try...catch</code> the <code>ValueError: math domain error</code> and return the tuple <code>None, None</code>. Probably this doesn't matter in your exercise, but it's good practice not to write exception-happy code that generally behaves well (unless you explicitly want the <code>ValueError</code> on negative discriminant). It all depends on what behavior your client code expects.</li>
</ul></li>
<li><p><strong>You can do <code>from math import sqrt</code> for common everyday identifiers</strong></p>

<ul>
<li>Now you can write <code>sqrt</code> rather than <code>math.sqrt</code> and your code is shorter and clearer. Python ain't Java :) We don't want to see fully qualified package names for simple everyday stuff like <code>sqrt</code>, <code>abs</code>, <code>ceil</code>, <code>random</code> etc. Well maybe some teachers do, but they were probably indoctrinated in Java-land, with abominations like <code>System.out.println()</code> and <code>.toString()</code>, and simple lines exceed 80 chars and thus are unreadable (and in fact defeat some diff'ing tools). Those teachers are made of wood, therefore weigh the same as a duck, therefore...</li>
<li>Just don't abuse with huge import lines: <code>from package import thing1, thing2, thing3, thing4, thing5...</code>. Do <code>import sqrt</code> if you want to use lots of its functions. You can still also do <code>from math import sqrt, abs</code> for the subset of functions you use a lot. Yes, this is strictly frowned upon, but it makes for shorter clearer code.</li>
<li>Or if you ever started using numpy, which also has a (different) <code>numpy.sqrt</code> function, then you don't want your code to be at the mercy of whichever imports got run, and which order. So then you'd write an explicit <code>math.sqrt</code> or <code>np.sqrt</code>. (Probably you'd never use <code>math.sqrt</code> again, but you get the wider point about avoiding name collisions.)</li>
</ul></li>
<li><p>Give the function a <strong>docstring</strong></p>

<ul>
<li>it's good practice, it tell us the input args and types, and return type(s)</li>
<li>you can also mention the input domain is restricted, what assumptions you make, whether you handle corner cases. e.g. <em>"real coefficients a,b,c, returns real roots only (, errors on negative discriminants)"</em></li>
<li>particularly important when your code might get thrown over the wall to someone else to use and/or test, i.e. any non-trivial real-world codebase</li>
</ul></li>
</ol>
    </div>