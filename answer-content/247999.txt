<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here is a review of the solution.</p>
<ul>
<li><p><code>^</code> is xor in Python. It is not for computation of exponentials.</p>
</li>
<li><p>When running code outside a method / class, it is a good practice to put the code inside a <em>main guard</em>. See <a href="https://docs.python.org/3/library/__main__.html" rel="nofollow noreferrer">here</a> for more explanation.</p>
<pre><code> if __name__ == "__main__":
    ...
</code></pre>
<p>When you are providing quick answers on a forum, the guard might not always be necessary. However, if you are writing reusable code for yourself, it is better to adopt the practice.</p>
</li>
<li><p>By convention, <code>_</code> is used to represent a don't-care variable, which won't be used after its value is assigned, e.g. <code>v = [[] for _ in range(4)]</code>. It is undesirable to refer to it in an expression like <code>answer[_]</code>.</p>
</li>
<li><p>The output is a pure text file. It is unnecessary to open it in binary mode (<code>b</code>). The original question does not suggest an append mode (<code>a</code>) either.</p>
</li>
<li><p>The <code>q-1</code> index would no longer work if <code>q</code> is changed to a different group of values. Therefore, it is better to use <code>enumerate</code> in this case:</p>
<pre><code>for i, q in enumerate(RANGE_Q):
   ...
   export[i, 0] = q
   ...
</code></pre>
<p>A better approach is to use <code>zip</code>:</p>
<pre><code>for q, output_row in zip(RANGE_Q, output_arr):
    ...
    output_row[0] = q
    ...
</code></pre>
</li>
<li><p>The assignments to the output numpy array can be improved, as shown in my solution below.</p>
</li>
</ul>
<p>Here is my solution.</p>
<pre><code>import numpy as np

if __name__ == "__main__":
    # Define constants
    RANGE_Q = range(1, 11)               # Range of q values
    POLY_DEG = 4                         # Degree of polynomial
    OUTPUT_PATH = "/tmp/latest_foo.csv"  # Output csv path

    # Compute roots
    roots_arr = np.array([np.roots([1, 3*q*q, 4*q, np.sqrt(q), q]) for q in RANGE_Q])
    
    # Construct output array and assign values
    output_arr = np.empty(shape=(len(RANGE_Q), POLY_DEG * 2 + 1))
    output_arr[:, 0] = RANGE_Q
    output_arr[:, 1::2] = roots_arr.real
    output_arr[:, 2::2] = roots_arr.imag

    # Save results to output file
    np.savetxt(OUTPUT_PATH, output_arr, fmt="%.4g", delimiter=',')
</code></pre>
    </div>