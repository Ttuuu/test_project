<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>First, Python has an official style-guide, <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP8</a>, which you should follow. It recommends using <code>lower_case</code> for functions and variables.</p></li>
<li><p>I would also rename your function, since <code>write_save</code> does not say what this function is doing. I think <code>overwrite_setting</code> or <code>update_value</code> or something similar would be better.</p></li>
<li><p>You might want to add a check if any keyword arguments are passed to the function. Either raise an exception (a simple <code>AssertionError</code> might be enough), or at least don't waste time reading the file and writing the same content back.</p></li>
<li><p>While <code>open</code> opens a file in read-mode by default, here I think it is actually fine to open it once explicitly with <code>'r'</code> and then with <code>'w'</code>.</p></li>
<li><p>Your <code>z = yamDict.copy()</code> should be completely unnecessary. Mutating the original dictionary does not do any harm. The updating does not need to be within the <code>with</code> block either.</p></li>
<li><p>Finally, you could use <code>or</code> for the check of an empty dictionary.</p></li>
</ul>

<p>With all of the above changes, your code would become:</p>

<pre><code>import yaml

def update_value(filename, **kwargs):
    assert kwargs
    with open(filename, 'r') as f:
        yaml_dict = yaml.load(f) or {}
    yaml_dict.update(kwargs)
    with open(filename, 'w') as f:
        yaml.dump(yaml_dict, f)
</code></pre>

<hr>

<p>If you have only one thread, you could skip the reading of the config everytime you want to change a value and instead keep the dictionary in memory (after having it read once at the beginning). You will still want the write to save state, though. For this you might want to have a <code>Config</code> class, derived from <code>dict</code>:</p>

<pre><code>import os

class Config(dict):
    def __init__(self, filename):
        self.filename = filename
        if os.path.isfile(filename):
            with open(filename) as f:
                # use super here to avoid unnecessary write
                super(Config, self).update(yaml.load(f) or {})

    def __setitem__(self, key, value):
        super(Config, self).__setitem__(key, value)
        with open(self.filename, "w") as f:
            yaml.dump(self, f)

    def __delitem__(self, key):
        super(Config, self).__delitem__(key)
        with open(self.filename, "w") as f:
            yaml.dump(self, f)

    def update(self, kwargs):
        super(Config, self).update(kwargs)
        with open(self.filename, "w") as f:
            yaml.dump(self, f)
</code></pre>

<p>You might want to define a decorator to add the dumping part to the methods:</p>

<pre><code>import functools

def dumps(func):
    @functools.wraps(func)
    def wrapper(self, *args, **kwargs):
        ret = func(self, *args, **kwargs)
        with open(self.filename, "w") as f:
            yaml.dump(self, f)
        return ret
    return wrapper

class Config(dict):
    def __init__(self, filename):
        self.filename = filename
        if os.path.isfile(filename):
            with open(filename) as f:
                # use super here to avoid unnecessary write
                super(Config, self).update(yaml.load(f) or {})

    __setitem__ = dumps(dict.__setitem__)
    __delitem__ = dumps(dict.__delitem__)
    update = dumps(dict.update)
</code></pre>

<p>You can use this class like a <code>dict</code>, but every change to the dictionary is also dumped to the yaml file. The file is only read once (when the config is initialized), so changes to the file will only be visible when the script is re-started.</p>

<pre><code>cfg = Config("test.yaml")
print(cfg)
cfg['a'] = 3
print(cfg)
cfg.update({"b": 4})
cfg.update(c=5)
del cfg['a']
print(cfg)
</code></pre>
    </div>