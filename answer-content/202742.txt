<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>Is std::list the best choice for the List datatype? There are a couple of places where using operator[] would make the code a little easier to read but std::list doesn't provide that. On the other hand it seems that e.g std::deque or std::vector use more memory/have other features I don't need.</p>
</blockquote>

<p>Probably not. <code>(cdr)</code> returns a list, but <code>std::list</code> does not have tail, so, first, <code>cdr</code> defined on a <code>std::list</code> works in O(N), and more important, it returns <em>a fresh distinct</em> list, unlike Scheme's that would only return the second element of a pair. Same for <code>cons</code>. It would make more sense to either use true pairs, as they did fifty years ago, or pairs of iterators pointing inside a storage (which is idiomatic in STL.)</p>

<blockquote>
  <p>Would I be better off in the long run providing my own class to hold Scheme data types (perhaps a wrapper around std::any?) instead of using raw std:any?</p>
</blockquote>

<p>Why not <code>std::variant</code>? Basically, there's but a few types in Scheme, and <code>std::variant</code> gives you type predicates for free.</p>

<blockquote>
  <p>My workaround was to wrap lambdas in a std::function which does have an identifiable type name. Is this the right way to do it?</p>
</blockquote>

<p>Why do you call it a workaround? <code>std::function</code> is a longed function object finally standardized in C++ after so many years. It is exactly that: a first-class callable, something that is quite common in many languages but was not found in C++ stdlib years ago. Scheme's procedures are exactly that.</p>

<blockquote>
  <p>is M_PI standard C++ or not? It seems not to be but if you include cmath, g++ defines it without giving a warning.</p>
</blockquote>

<p>It's an extension.</p>

<p>Recursive templates are quite possible, why not. They form the basis of CRTP after all. One drawback, you cannot make template alias recursive, the LHS of <code>using</code>-declaration cannot appear in its RHS; but distinct types can depend on themselves easily.</p>

<pre><code>#include &lt;variant&gt;
#include &lt;vector&gt;

struct Tree: std::variant&lt;int, std::vector&lt;Tree&gt;&gt; {
    using std::variant&lt;int, std::vector&lt;Tree&gt;&gt;::variant;
};

int main() {
    Tree shallow{std::vector{Tree{42}, Tree{278}}};
}
</code></pre>

<p>With lists it would be somewhat harder to implement. of course, there is always an option to do it as before:</p>

<pre><code>using Cons = std::pair&lt;Expression, std::shared_ptr&lt;Expression&gt;&gt;;
</code></pre>

<p>But to save some memory and processing time we can try to make it more complicated.</p>

<pre><code>struct Chunk: std::enable_shared_from_this {
     std::deque&lt;Expression&gt; storage;
     int negative = 0; // amount of elements prepended
     std::shared_ptr&lt;Chunk&gt; next;
     int nextIdx;
};

struct List {
     std::shared_ptr&lt;Chunk&gt; data;
     int dataIdx;
};

List cons(Expression head, List tail) {
    if(tail.dataIdx + tail.data-&gt;negative == 0) {
        // tail starts with its chunk
        List retVal{std::move(tail.storage), tail.index - 1};
        --retVal.storage-&gt;negative;
        return retVal;
    };
    else {
        // tail starts somewhere inside the chunk
        List retVal{std::make_shared&lt;Chunk&gt;(
            std::deque{head}, 0, tail.data, tail.dataIdx)};
        return retVal;
    }
}

Expression &amp;car(List &amp;l) { return l.data-&gt;storage[l.dataIdx]; }
Expression &amp;cdr(List &amp;l) {
    if(l.dataIdx + l.data-&gt;negative == l.data-&gt;size() - 1) {
        return List{l.data-&gt;next, l.data-&gt;next-&gt;negative};
    }
    return List{l.data, l.dataIdx + 1}
}
</code></pre>

<p>And so forth. This may take long to write down everything properly and consistently.</p>

<p>Anyway the real challenge starts when you start implementing <code>call/cc</code>. :-|</p>
    </div>