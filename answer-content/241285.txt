<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Preface:</strong></p>

<blockquote>
  <p>if you can, don't use advanced syntax</p>
</blockquote>

<p>I understand why you say this, but do not shy away from strange looking syntax.  When you encounter something you cannot read, take the time to lookup what the syntax does (even experienced developers do this).  The weird looking syntax may be doing useful stuff.  And after you understand what's going on, the syntax usually doesn't look weird anymore.</p>

<p><strong>Another algorithm:</strong></p>

<p>First off, for a beginner, this is a great start.  It's very simple code which is good.</p>

<p>If you want faster code, the first thing to do is make sure your general approach is reasonable or better yet optimal.  Your algorithm generates all possible sets of length <code>K</code> with elements from <code>{1,2,...N}</code> and then checks if the sets are sorted.  Note that I have used <code>N</code> for the size of the input set and <code>K</code> for the size of the combinations -- this is a convention I have seen in many places but is different from your code.</p>

<p>There are <span class="math-container">$$K^N$$</span> possible sets of length <code>K</code> from a set of <code>N</code> objects.  For the same set of <code>N</code> objects, there are <span class="math-container">$$\frac{N!}{K!(N-K)!}$$</span> combinations.  Since the combinations are a subset of the possible sets, they are a smaller set and in many cases they are a much smaller set.  Interestingly there are some non integer solutions for <code>K^N &lt; (N choose K)</code> e.g. <code>K</code> = 0.5 and <code>N</code> = 1.5. maybe someone else can shed some light on that.  But they key takeaway is that only generating combinations will be a lot faster.</p>

<p>How can you only generate combinations?  There's more than one way to do this, but I will describe one way.</p>

<p>Consider the n=5, k=3 example.  The set of numbers to maybe print is <code>1,2,3,4,5</code>, and the set of numbers to definitely print is <code>{}</code> (empty set).  I'll simplify this as <code>({}, {1,2,3,4,5})</code>.  Some of the combinations have <code>1</code> and some don't. So we now have to consider both the possibilities <code>({1},{2,3,4,5})</code> and <code>({}, {2,3,4,5})</code>.  We repeat this recursively, and when we have a set of things of size <code>el_maxim</code> (or, by convention, <code>k</code>), we print.  In psuedo-code:</p>

<pre><code>void recurse(int indexK, int indexN) {
    if (indexK == K) {
        print(result);
        return;
    }

    // "if there more slots to fill than numbers to fill them"
    // could also say `if (indexN == N)` ... correct but slower
    if (N - indexN &lt; K - indexK) {
        return;
    }

    result[indexK] = indexN;

    recurse(indexK + 1, indexN + 1);
    recurse(indexK, indexN + 1);
}
</code></pre>

<p>I encourage you to try getting this function to compile and then benchmarking to make sure you see the speedup you would expect.  You'll have to try a few different values of N and K.  For some inputs &lt;10, the improved algorithm should run 1000s of times faster!</p>

<p><strong>Review of your code:</strong></p>

<p>Since my main advice is to use a better algorithm, I haven't given any specific comments on your code.  I'll do that here:</p>

<p>Your program should be based around a function that can generate combinations.  The function should take <code>N</code> and <code>K</code> as input, and it should return all the combinations.  Something like this:</p>

<pre><code>/// This function generates all combinations of integers {1,2,...,N}
/// @param N    the size of the set
/// @param K    the size of the combinations
ResultType generateCombinations(int N, int K) { ... }
</code></pre>

<p>Then your <code>main</code> function should call <code>generateCombinations</code>.  This has several advantages over your method:</p>

<ul>
<li><p>The compiler will make sure you set all the inputs.  In your version, if you forget to set a global variable, then you'll get the wrong answer.</p></li>
<li><p>You have a convenient place to put a big comment about what the function does.  The comment I've placed above is in Doxygen's format so you can generate documentation from your comments.  It also looks pretty good in my opinion.</p></li>
<li><p>You can easily call the function in several places.</p></li>
<li><p>You don't have to worry about name collisions.</p></li>
<li><p>The compiler can optimize arguments better than global variables.  In general, compilers are really good with functional code and not so good with code that uses lots of memory.</p></li>
<li><p>I could go on but I think you get the point.</p></li>
</ul>

<hr>

<p>Separate printing the combinations from generating the combinations.  You've sort of done that with the <code>display</code> function, but not really since anyone who calls <code>bkt</code> is forced to print the result.  There are two main ways to do this.  The first way is to return a big data structure, and then print it:</p>

<pre><code>std::vector&lt;std::vector&lt;int&gt;&gt; generateCombinations(int N, int K) { ... }

for (auto&amp; vec : genCombinations(5, 3)) { print(vec); }
</code></pre>

<p>This way is pretty easy/simple.  The downside is it uses a lot of memory.</p>

<p>The second way is to accept an argument that says what to do with each result:</p>

<pre><code>void genCombinations(int N, int K, std::function&lt;void(vector&lt;int&gt;&amp;)&gt; func) { ... }

genCombinations(5, 3, [](auto&amp; vec) { print(vec); });
</code></pre>

<p>This is probably harder to read for many people, but it saves a large amount of memory in this case!</p>

<hr>

<p>Your names are a little weird.  <code>el_maxim</code> instead of <code>maximum_element</code> or <code>N</code> as dictated by convention.  <code>n</code> instead of <code>num_elements</code> or <code>K</code> per the convention.  Also <code>bkt</code> and <code>okay</code> seem like they were chosen because they are short rather than because they are good descriptions of what they do.</p>

<hr>

<pre><code>okay();
if (okay() == 1)
</code></pre>

<p>Is this intended?</p>

<p><strong>P.S.</strong></p>

<p>I encourage you to rewrite and post another code review using a faster algorithm!  You may get more comments on your code rather than on your approach.</p>
    </div>