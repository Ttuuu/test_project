<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It's a couple of decades (!) since I did any CGI, but I'll cast a quick eye over this.  I hope other reviewers will pitch in and fill the gaps (or correct my errors).</p>

<p>It's an interesting choice to use the same <code>TITLE</code> for success and failure.  It might be better to write a small function:</p>

<pre><code>header()
{
cat &lt;&lt;EOT
Content-type: text/html; charset=us-ascii

&lt;!doctype html&gt;
&lt;html&gt;
        &lt;head&gt;
                &lt;title&gt;$*&lt;/title&gt;
                &lt;link rel="icon" href="/favicon.png"&gt;
        &lt;/head&gt;
        &lt;body&gt;
EOT
}
</code></pre>

<p>Note also the form of function declaration - that's more portable than the <code>function</code> keyword, and to be preferred.  We now use it like</p>

<pre><code>if [ "$REQUEST_METHOD" != "POST" ] || [ ! "$POST" ]
then
    header 'Error'
    echo '&lt;h1&gt;Error&lt;/h1&gt;&lt;p&gt;Wrong HTTP method; please go back and try again&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;';
    exit 1;
fi
</code></pre>

<p>Also, for that <code>exit</code>, I'd <code>exit 0</code> there, because the script has succeeded in its job (to report the status to the user).  There's no error as far as the caller (the Web server) is concerned - everything is working correctly.</p>

<p>A further refinement: if we add another <code>cat</code> to the end of <code>header()</code>, it can write the message, too:</p>

<pre><code>#renamed to reflect new purpose
write_html()
{
cat &lt;&lt;EOT
Content-type: text/html; charset=us-ascii

&lt;!doctype html&gt;
&lt;html&gt;
        &lt;head&gt;
                &lt;title&gt;$*&lt;/title&gt;
                &lt;link rel="icon" href="/favicon.png"&gt;
        &lt;/head&gt;
        &lt;body&gt;
        &lt;h1&gt;$*&lt;/h1&gt;
EOT
cat
}

if [ "$REQUEST_METHOD" != "POST" ] || [ ! "$POST" ]
then
    write_html 'Error' &lt;&lt;"EOT"
        &lt;p&gt;Wrong HTTP method; please go back and try again&lt;/p&gt;
    &lt;/body&gt;&lt;/html&gt;
EOT
fi
</code></pre>

<hr>

<p>There seems to be a couple of errors in the <code>sed</code> command in <code>input()</code>:</p>

<pre><code>s/^.*$1=\([^&amp;]\+\)&amp;.*$/\1/
</code></pre>

<p>The most obvious is the requirement for <code>&amp;</code> after the target parameter - this means we'll be unable to extract the last parameter in the line.  The more subtle bug is that we can be confused if one parameter is a suffix of another, because we didn't anchor the beginning of <code>$1</code> at all.  Finally, if <code>$1</code> isn't present in the string, we'll use the entire request as value; we can fix that by printing only if there's a substitution:</p>

<pre><code># untested
sed -n 's/^.*[?&amp;]'"$1"'=\([^&amp;]\+\).*$/\1/p'
</code></pre>

<p>Here, I rely on the greediness of <code>+</code> to take us to the next <code>&amp;</code> or end of line.</p>

<p>Do have another look through the Python library to see if there's something there to help us unpack POST data - since we're using Python anyway for decoding characters, there's no penalty to adding code there.</p>

<p>Since we're using Bash, we could write <code>sed &lt;&lt;&lt;"$POST"</code> instead of echo in that function.</p>

<p>BTW, good job getting the quoting right there!</p>

<hr>

<p>From here onwards, nothing I haven't already mentioned.</p>
    </div>