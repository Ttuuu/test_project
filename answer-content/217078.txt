<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You've used a single class to encapsulate virtual all the behavior of Mad Libs. Although this code is syntactically correct, it is clear you started with existing code and just poured most of it into a class. That's not the best approach.</p>

<p>Your code is also extremely inflexible. It cannot be reused for any other Mad Lib story, and that would be the whole point, I think.</p>

<p>So, what to do?</p>

<p>First you need to analyze the domain for which you're going to write OOP code. What are the obvious elements here? There's a story with blanks which need to be substituted by user input. That gives you, right away, three object: The <code>MadLibStory</code>, the <code>MadLibBlank</code>, and <code>MadLibUserInput</code>. Let's not think any futher, that can really hurt, and just create these classes:</p>

<pre><code>class MadLibStory {
}

class MadLibBlank {
}

class MadLibUserInput {
}
</code></pre>

<p>Before we go on we need to think about the relations between these classes. To me the story is at the center. First a story needs to be chosen. That story requires certain substitutions. The user will supply the substitutions and the result is a funny story.</p>

<p>We want to be flexible, so there will be different types of substitutions. Therefore we need a way to identify which type we are dealing with. For greatest flexibility I will use simple strings, which can also be used in the story, like this:</p>

<pre><code>'Have you seen the [adjective] [noun]? They got up and started to [verb] [adverb]!'
</code></pre>

<p>This means that in a story, anything between '[' and ']' needs to be substituted with the type indicated.</p>

<p>Let's now write the constructors of the classes. The constructor will, in this case, have all the needed parameters to set up the class.</p>

<pre><code>class MadLibStory {

    private $storyText;
    private $blanks = [];

    public function __construct($storyText)
    {
        $this-&gt;storyText = $storyText;
        // match all blanks and remember them
        if (preg_match_all('/\[([^\]]*)\]/', $this-&gt;storyText, $matches, PREG_OFFSET_CAPTURE)) {
            foreach ($matches[1] as $match) {
                $this-&gt;blanks[] = new MadLibBlank($this, $match[0], $match[1]);
            }
        }
    }

    public function getStoryText()
    {
        return $this-&gt;storyText;
    }

}

class MadLibBlank {

    private $story;
    private $type;
    private $offset;

    public function __construct($story, $type, $offset)
    {
        $this-&gt;story  = $story;
        $this-&gt;type   = $type;
        $this-&gt;offset = $offset;
    }

    public function getStory()
    {
        return $this-&gt;story;
    }

    public function getType()
    {
        return $this-&gt;type;
    }

    public function getOffset()
    {
        return $this-&gt;offset;
    }

}
</code></pre>

<p>At this point I am going to forget about user input. This is going to be simple, and I am putting user input and HTML output at the global level, just like you did. Mind you, for larger programs this is not optimal, but for now it will do. See <a href="https://medium.com/@noufel.gouirhate/create-your-own-mvc-framework-in-php-af7bd1f0ca19" rel="nofollow noreferrer">MVC design pattern</a>.</p>

<p>We have only two classes, one which deals with the overall story, and one that deals with the blanks. These two classes are intimately linked. Inside the story class constructor we use blank objects, and the blank class constructor has a story object as a parameter. These classes know about each other.</p>

<p>I did not use <a href="https://www.php.net/manual/en/functions.arguments.php#functions.arguments.type-declaration" rel="nofollow noreferrer">type hinting</a>.</p>

<p>I also defined the getters for the constructor parameters, they can be useful. Alternatively I could have made the fields 'public'. I prefer it this way, because it gives the class more control over the field. This is a personal choice.</p>

<p>The <code>preg_match_all()</code> function, in the <code>MadLibStory</code> constructor, uses a regular expression. Personally I don't like these, because they are difficult to understand and debug. I used it here because it results in the least amount of code. For an explanation of the regular expression see: <a href="https://regex101.com/r/jXeChC/1" rel="nofollow noreferrer">regex101.com</a> All I can say is: It works. Sorry.</p>

<p>I would now like to change what is stored in the database, to be more flexible. I will make two database tables, one for the stories and one for the user input. Like this:</p>

<pre><code>CREATE TABLE `madlib_story` (
   `id` INT NOT NULL AUTO_INCREMENT,
   `story` TEXT NOT NULL,
   PRIMARY KEY (`id`)
);

CREATE TABLE `madlib_input` (
   `id` INT NOT NULL AUTO_INCREMENT,
   `story_id` INT NOT NULL,
   `type` VARCHAR(50) NOT NULL,
   `offset` INT NOT NULL,
   `substitute` TEXT NOT NULL,
   PRIMARY KEY (`id`),
   INDEX (`story_id`,`type`)
);
</code></pre>

<p>I have chosen, in this case, not to put any prepared stories in a database table. The story table here will be used, each time the user submits substitutions for a story, to store that story and give it an unique identifier which can be used to store the substitutions. It is, of course, quite easy to store prepared stories in another database table. Note that there's a reference to the unique story identifier in the input table.</p>

<p>The only thing left now is that we need to make use of these database tables. I will use mysqli, as you did, but with parameter binding. I will also complete these classes.</p>

<p>The code below is placed in a file called 'madlib.inc':</p>

<pre><code>&lt;?php

class MadLibStory {

    private $storyText;
    private $blanks  = [];
    private $storyId = 0; // zero mean it is not known

    public function __construct($storyText)
    {
        $this-&gt;storyText = $storyText;
        // match all blanks and remember them
        if (preg_match_all('/\[([^\]]*)\]/', $this-&gt;storyText, $matches, PREG_OFFSET_CAPTURE)) {
            foreach ($matches[1] as $match) {
                $this-&gt;blanks[] = new MadLibBlank($this, $match[0], $match[1]);
            }
        }
    }

    public function getStoryText()
    {
        return $this-&gt;storyText;
    }

    public function storeStory($mysqli)
    {
        $text = $this-&gt;getStoryText();
        // store story in database (no error handling!)
        $stmt = $mysqli-&gt;prepare("INSERT INTO madlib_story(text) VALUES (?)");
        $stmt-&gt;bind_param('s', $text);
        $stmt-&gt;execute();
        $stmt-&gt;close();
        // and set the story id
        $this-&gt;storyId = $mysqli-&gt;insert_id;
        // return object for chaining
        return $this;
    }

    public function getStoryId()
    {
        return $this-&gt;storyId;
    }

    public function getBlanks()
    {
        return $this-&gt;blanks;
    }

    public function getMadness()
    {
        // put substitutions into blanks, correct for length differences
        $storyText  = $this-&gt;getStoryText();
        $correction = 0;
        foreach ($this-&gt;getBlanks() as $blank) {
            $offset      = $blank-&gt;getOffset() + $correction;
            $substitute  = $blank-&gt;getSubstitute();
            $typeLength  = strlen($blank-&gt;getType());
            $storyText   = substr_replace($storyText, $substitute, $offset, $typeLength);
            $correction += strlen($substitute) - $typeLength;
        }
        return $storyText;
    }

}

class MadLibBlank {

    private $story;
    private $type;
    private $offset;
    private $substitute = '????';

    public function __construct($story, $type, $offset)
    {
        $this-&gt;story  = $story;
        $this-&gt;type   = $type;
        $this-&gt;offset = $offset;
    }

    public function getStory()
    {
        return $this-&gt;story;
    }

    public function getType()
    {
        return $this-&gt;type;
    }

    public function getOffset()
    {
        return $this-&gt;offset;
    }

    public function setSubstitute($substitute)
    {
        $this-&gt;substitute = $substitute;
        // return object for chaining
        return $this;
    }

    public function storeSubstitute($mysqli)
    {
        $storyId    = $this-&gt;getStory()-&gt;getStoryId();
        $type       = $this-&gt;getType();
        $offset     = $this-&gt;getOffset();
        $substitute = $this-&gt;getSubstitute();
        // store substitute in database (no error handling!)
        $stmt = $mysqli-&gt;prepare("INSERT INTO madlib_input(story_id, type, offset, text) VALUES (?,?,?,?)");
        $stmt-&gt;bind_param('isis', $storyId, $type, $offset, $substitute);
        $stmt-&gt;execute();
        $stmt-&gt;close();
        // return object for chaining
        return $this;
    }

    public function getSubstitute()
    {
        return $this-&gt;substitute;
    }

}
</code></pre>

<p>The only thing, apart form the database storage methods, that's new, is the <code>getMadness()</code> method. It uses an existing story, fills in the substitutions, and returns it. This returned story still has the '[' and ']' brackets in it. That's because I want to replace them with HTML tags, and it is bad practice to do that inside this class. The class should be about the Mad Lib story, not about generating HTML.</p>

<p>Normally you would probably place both classes in a seperate file and use autoloading, but there's only so much we can do in this answer.</p>

<p>Finally we have our main script:</p>

<pre><code>&lt;?php

// show errors during development (disable in production)
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);

// get classes 
require('madlib.inc');

// compressed page start
echo '&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;body&gt;&lt;h1&gt;Mad Libs&lt;/h1&gt;&lt;hr&gt;&lt;br&gt;';

// this is the story in this example code
$text  = 'Have you seen the [adjective] [noun]? They got up and started to [verb] [adverb]!';
$story = new MadLibStory($text);

if (count($_POST) &gt; 0) {
    // open connection to database
    $mysqli = new mysqli('127.0.0.1', 'user', 'password', 'database');
    if (mysqli_connect_errno()) die('Connect failed: '.mysqli_connect_error().PHP_EOL);

    // store the story
    $story-&gt;storeStory($mysqli);

    // get information from story object
    $storyId = $story-&gt;getStoryId();
    $blanks  = $story-&gt;getBlanks();

    // fill in the substitutions
    foreach ($blanks as $key =&gt; $blank) {
        $substitute = filter_input(INPUT_POST, 'blank'.$key, FILTER_SANITIZE_STRING);
        $blank-&gt;setSubstitute($substitute)
              -&gt;storeSubstitute($mysqli);
    }

    // show the result
    $madness = $story-&gt;getMadness();
    echo str_replace(['[', ']'], ['&lt;b&gt;', '&lt;/b&gt;'], $madness);

    // close connection to database
    $mysqli-&gt;close();
}
else {
    // use a form to get user input
    echo '&lt;form method="post"&gt;';
    $blanks  = $story-&gt;getBlanks();
    foreach ($blanks as $key =&gt; $blank) {
        $id = 'blank'.$key;
        echo '&lt;label&gt;Enter a &lt;b&gt;'.ucfirst($blank-&gt;getType()).'&lt;/b&gt;: &lt;/label&gt;'.
             '&lt;input name="'.$id.'"&gt;&lt;br&gt;&lt;br&gt;';
    }
    echo '&lt;input type="submit" value="Submit"&gt;'.
         '&lt;/form&gt;';
}

// compressed page end
echo '&lt;/body&gt;&lt;/html&gt;';
</code></pre>

<p>And that's it, for now. I hope you can see that these two classes can easily be expanded. You might want to restructure everything a bit when you store original stories in a database table, and you want to retrieve any previously created Mad Lib stories. This code is only meant as an example, it is far from perfect. It tries to illustrate two points:</p>

<ul>
<li><p>Each class should represent one thing in your program (a story, a blank, etc) and all the methods should relate to that.</p></li>
<li><p>Classes should be extendible, like when I added database storage. But I didn't put the story text into the story class, so I can reuse that class for another story.</p></li>
</ul>

<p>Those are the first two principle of <a href="https://scotch.io/bar-talk/s-o-l-i-d-the-first-five-principles-of-object-oriented-design" rel="nofollow noreferrer">SOLID</a>. The other principles are not really applicable yet to these two simple classes.</p>
    </div>