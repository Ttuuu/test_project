<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>For Java the Code style conventions are quite rigorous. I would adhere to the code style that is followed by 99% of the community. The firms you will be working for will determine the coding style.</p>

<blockquote>
  <p>When Java was launched, C++/C generally had an indentation of 3. And the
  code had often a large number of nested { }.
  It was decided to opt for more Methods (academic style) and indent to 4 in order to support "good style." The alternative explanation is that 4 is the half of 8, the normal tab size.</p>
</blockquote>

<p>The NetBeans IDE's GUI builder let's set properties and code Fragments. You can use that to disable the slider, add Action listeners and such.</p>

<p>Since Java 8 one can use lambas, representations of anonymous functions, that under the hood will become an interface implementation. This abbreviates the Code, introducing parameter names:</p>

<pre><code>component.addActionListener(new ActionListener() {
    @Override
    public void actionPerformed(ActionEvent evt) {
        myShape = new MyCircle();
    }
});
</code></pre>

<p>can be shortened to</p>

<pre><code>component.addActionListener(evt -&gt; myShape = new MyCircle());
</code></pre>

<p>If not, always use @Override on overriden Methods. Should the method have a typo, that would be reported with a compile error.</p>

<p>The fields may be private.</p>

<pre><code>    private MyShape myShape;
    private int value;

    public MyFrame() {

        // Create frame, panels and items within
        initComponents();
        shapeSlider.setEnabled(false);

        // Create instances of shapes when chosen in Menu
        initShapes();    

        // Adds Changelistener to slider and updates dimensionOutputField
        shapeSlider.addChangeListener(new MyChangeAction());

        exitButton2.addActionListener(actionEvent -&gt; MyFrame.this.dispose());
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    }                        
</code></pre>

<p>The ShapeHandler could not use if-else-if chains but be object-oriented:</p>

<pre><code>    public class ShapeHandler implements ActionListener {
        private final Supplier&lt;MyShape&gt; shapeCreator;

        public ShapeHandler(Supplier&lt;MyShape&gt; shapeCreator) {
            this.shapeCreator = shapeCreator;
        }

        public void actionPerformed(ActionEvent e)  {
            myShape = shapeCreator.get();
            shapeSlider.setEnabled(true);
        }
    }

    private void initShapes() {
        squareMenuItem.addActionListener(new ShapeHandler(MySquare::new));
        circleMenuItem.addActionListener(new ShapeHandler(MyCircle::new));
        triangleMenuItem.addActionListener(new ShapeHandler(MyTriangle::new));

        // Or:
        squareMenuItem.addActionListener(evt  -&gt; myShape = new MySquare());
        circleMenuItem.addActionListener(evt -&gt; myShape = new MyCircle());
        triangleMenuItem.addActionListener(evt -&gt; myShape = new MyTriangle());
    }
</code></pre>

<p>But as you see, the class is not really needed. Though nice to not "repeat one self".</p>

<p>I would use <code>@Override</code> and possible an other Name, as <code>Action</code> is a known interface in swing.</p>

<pre><code>    public class MyChangeAction implements ChangeListener {
        @Override
        public void stateChanged(ChangeEvent e) {
</code></pre>

<p>The generated <code>main</code> method is conservative: compilable for very old versions of Java &lt; 7. Shorter would be:</p>

<pre><code>public static void main(String args[]) {
    try {
        for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
            if ("Nimbus".equals(info.getName())) {
                UIManager.setLookAndFeel(info.getClassName());
                break;
            }
        }
     } catch (ClassNotFoundException | InstantiationException
             | IllegalAccessException | UnsupportedLookAndFeelException ex) {
         Logger.getLogger(MyFrame.class.getName()).log(Level.SEVERE,
                 "Error setting theme", ex);
     }

     EventQueue.invokeLater(() -&gt; new MyFrame().setVisible(true));
}  
</code></pre>
    </div>