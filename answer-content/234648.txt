<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Specific suggestions:</p>

<ol>
<li>The <code>try</code>/<code>catch</code> blocks should be as small as possible. In the first case that means only <code>bet = int(input('Enter the amount to bet '))</code> should be guarded, and in the second case only <code>control_value = input("Enter your choice - (H)it or (S)tand ").upper()</code>.</li>
<li>You could still take this much further in terms of OO. <code>Game</code> and <code>Dealer</code> classes, for example, would be helpful to encapsulate several of the methods.</li>
<li>An abstract deck of cards is a sequence of cards, so it should probably inherit from <code>list</code>. One immediate benefit is that the custom <code>__len__</code> simply goes away.</li>
<li><code>view_card</code> should return <code>None</code> rather than <code>'None'</code> if there are no cards. Or you could even throw something like a <code>NoCardsInDeckError</code> since you should never reach that point.</li>
<li>The suits and ranks are the same for all decks (at least if you're playing Blackjack) so they should probably conceptually be <code>enum</code>s.</li>
<li><p>It is generally considered good practice to implement your own exception classes rather than overloading built-in ones. And giving one thing <em>two</em> meanings is generally a bad idea. So</p>

<pre><code>if amount &gt; self.account or amount &lt; 0:
    raise ValueError('Balance_Exceeded or invalid value')
</code></pre>

<p>should probably be something like</p>

<pre><code>if amount &gt; self.account:
    raise BalanceExceededError()
elif amount &lt;= 0:
    raise TooLowBetError()
</code></pre></li>
<li>I can't quite tell, but it looks like the support for more than one player is not yet complete. <code>check_for_bust</code> only allows for two players, for example.</li>
<li>Writing this in TDD fashion would be a handy way to ensure a minimal and correct implementation. You would probably need in the order of 30+ tests to ensure basic game compliance and many more to get to a bulletproof implementation.</li>
<li>More generally, asking yourself questions like "Is it still a deck if there are no cards in it?" or "Who or what is responsible for this?" can be useful ways to work out the model.</li>
</ol>
    </div>