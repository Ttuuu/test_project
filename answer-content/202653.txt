<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There is no need to create lists and add items to the lists when working with enumerables; <a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/yield" rel="nofollow noreferrer">yield</a> is your new best friend.</p>

<p>As written, <code>GetScheduleList()</code> is messy to unit test so we can push the condition up a level and then use yield</p>

<pre><code>private static IEnumerable&lt;KpiSchedule&gt; GetScheduleList(PlantConfiguration plant, bool includeDaily)
{
    yield return plant.HourlySchedule;
    if (includeDaily)
    {
        yield return plant.DailySchedule;
    }
}
</code></pre>

<p>To aggregrate the schedules for each plant we can use <a href="https://docs.microsoft.com/en-us/dotnet/api/system.linq.enumerable.selectmany?view=netframework-4.7.2" rel="nofollow noreferrer">SelectMany()</a>.</p>

<pre><code>private static IEnumerable&lt;KpiSchedule&gt; GetAllSchedules(IEnumerable&lt;PlantConfiguration&gt; allPlants, bool includeDaily)
{
    return allPlants.SelectMany(p =&gt; GetScheduleList(p, includeDaily));
}
</code></pre>

<p>We can now revise <code>UpdateValues()</code> to something like</p>

<pre><code>private static void UpdateValues(PlantList plantList)
{
    DateTime utcTopHourDate = GetUtcTopHourDate();
    var includeDaily = CheckIncludeDaily(utcTopHourDate);

    var schedulesToUpdate = GetAllSchedules(plantList.Plants, includeDaily);
    //... Do stuff with the schedule list

}
</code></pre>

<p>or even</p>

<pre><code>private static void UpdateValues(PlantList plantList)
{
    DateTime utcTopHourDate = GetUtcTopHourDate();
    var includeDaily = CheckIncludeDaily(utcTopHourDate);

    var schedulesToUpdate = plantList.Plants.SelectMany(p =&gt; GetScheduleList(p, includeDaily));
    //... Do stuff with the schedule list
}
</code></pre>
    </div>