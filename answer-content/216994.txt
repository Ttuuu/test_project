<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First, you tackled a tough problem and you obviously put a lot of effort into it. The code is well structured. The organization of the code seems fine.</p>

<blockquote>
  <p>My code contains occasional free() statements, but my primary memory
  management strategy was not to release any memory, as the program
  works only for a couple of seconds.</p>
</blockquote>

<p>Two seconds is a lot of time, you could fill up a lot of memory.</p>

<p>You may want to look into compiler development tools such as <a href="https://en.wikipedia.org/wiki/Lex_(software)" rel="noreferrer">lex</a>, <a href="https://en.wikipedia.org/wiki/Flex_(lexical_analyser_generator)" rel="noreferrer">flex</a>, <a href="https://en.wikipedia.org/wiki/Yacc" rel="noreferrer">yacc</a>  and <a href="https://en.wikipedia.org/wiki/GNU_Bison" rel="noreferrer">bison</a> that can be used to generate the lexical analyzer and the parser.</p>

<p>A minor nit about indentation, 2 spaces may be too small to see the logic.</p>

<p><strong>Reserved Words as Variable Names</strong>  </p>

<p>Some users might be using C++ to compile C, the user of a variable name that is keyword in C++ such as <code>class</code> in main.c might therefore be a problem.</p>

<p><strong>Portability</strong>  </p>

<p>Not all C compilers provide the function <code>xprintf()</code>. To write to stdout by default it might be better to use <code>printf()</code>. To print error messages it might be better to use <code>fprintf(stderr, FMT, Args);</code> The header files <code>libgen.h</code> and <code>dirent.h</code> are not common header files and may not be available on all systems, for example <code>windows</code>.</p>

<p>It might be better to make use of common function such as <code>fopen()</code> and to write code to navigate the file system and directory.</p>

<p><strong>Avoid calling <code>exit()</code> From Lower Level Functions</strong>  </p>

<p>There are a number of places where <code>exit(EXIT_FAILURE)</code> is called, this is not a good programming practice in C. It prevents the program from cleaning up after itself and can have side effects. If this was an operating system instead of a compiler it would bring the system down. A better way would be to call <a href="https://en.wikipedia.org/wiki/Setjmp.h" rel="noreferrer">setjmp()</a> <a href="https://stackoverflow.com/questions/14685406/practical-usage-of-setjmp-and-longjmp-in-c">in main.c and longjmp()</a> where the error occurs.</p>

<p><strong>Use Tables and Arrays</strong>  </p>

<p>The extended switch/case statement in the function <code>char *keyword_to_string(KeyWord keyWord)</code> might be better implemented as indexing into an array. This would be just as easy to maintain and would improve performance of the program.</p>

<p>There are 2 ways this could be implemented, the first and prefered one would be an array of strings where the integer value of the KeyWord enum is used as an index into the array.</p>

<pre><code>typedef enum {
    CLASS = 0,
    STATIC = 1,
    ...
    LASTKEYWORD
}

char *KeyWordToStringValues[] = {
    "class",
    "static",
    ...
}

char *keyword_to_string(KeyWord keyWord) {
    if (keyWord &lt; LASTKEYWORD) {
        return KeyWordToStringValues[(int) keyWord];
    }
    else {
        xprintf("%i is not specified in keyword_to_string", keyWord);
        longjmp();
    }
}
</code></pre>

<p>The second method would be</p>

<pre><code>typedef struct {
    KeyWord keyword;
    char *stringKeyWord;
} KeyWordToken;

KeyWordToken keyWordTokens[] = {
    {CLASS, "class"},
    {STATIC, "static"},
    ...
    {FALSE, "false"}
}

char *keyword_to_string(KeyWord keyWord) {
    int keyWordCount = sizeof(keyWordTokens) / sizeof(*keyWordTokens);
    if (keyWord &lt; keyWordCount {
        int i;
        for (i = 0; i &lt; keyWordCount; i++) {
            if (keyWordTokens[i].keyword == keyWord) {
                return KeyWordToStringValues[(int) keyWord];
            }
        }
    }
    else {
        xprintf("%i is not specified in keyword_to_string", keyWord);
        longjmp();
    }
}
</code></pre>

<p>Another place where arrays might be beneficial would be to replace the varargs implementation of the function <code>bool is_one_of(int actual, int nOfElements, ...)</code>.</p>

<pre><code>KeyWord VarDeclKeywords[] = {STATIC, FIELD};
KeyWord SubroutineKeywords[] = {CONSTRUCTOR, FUNCTION, METHOD};
KeyWord TypeKeywords[] = {INT, CHAR, BOOLEAN};

bool is_one_of(KeyWord keyword, Keyword members) {
    int membersCount = sizeof(members) / sizeof(*members);
    int i;
    for (i = 0; i &lt; membersCount; i++) {
        if (keyword = members[i]) {
            return true;
        }
    }
    return false;
}
</code></pre>

<p>This improves performance because there is overhead involved in using va_list argp, va_start(argp, nOfElements), va_arg(argp, int). It also simplifies the implementation in 2 ways, because varargs isn't necessary and the count of items doesn't need to be included in the function call. The count of arguments is error prone as it is implemented.</p>
    </div>