<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The methods <code>DecodeInt32</code> and <code>DecodeInt16</code> are very confusing. The bitwise or (<code>|</code>) of 2 <code>bytes</code> can never give you something less than 0. Furthermore, <code>bytes[0] &lt;&lt; 24</code> <em>can</em> give you a negative number. I really have no idea what these methods are meant to achieve.</p>

<hr>

<p>Also, your <code>packetId</code> seems to be included in the <code>packetLength</code>, which may create issues in the future. If the idea is that only packets with <code>packetId == 0</code> should be read, then you should make this clearer, and use a method which doesn't incorporate the first byte when computing the <code>packetLength</code>.</p>

<hr>

<pre><code>if (packetId == 67)
</code></pre>

<p>What does <code>67</code> mean? 'Magic Numbers' like <code>67</code> and <code>60</code> are cryptic, and generally a maintainability nightmare. They often appear in multiple places, and changing the magic number means going through and changing all of them (or else the system breaks). Much better to provide a named constant, e.g.</p>

<pre><code>public const int CrossDomainPolicyRequestPacketId = 60;
</code></pre>

<p>I don't know if that is a good name because I don't really know what it means. You need to give it a good name so that I do know what it means.</p>

<hr>

<p>I don't think this check makes any sense:</p>

<pre><code>if (config == null)
{
    return;
}
</code></pre>

<p>I think you really want to throw an exception here, complaining that no configuration was provided, otherwise someone calling this method will receive no feedback if it fails. At the <em>very least</em> this warrants logging, but exceptions are your friends because they prevent your code doing something wild and dangerous by plodding on despite being in an invalid/unexpected state.</p>

<hr>

<p>I'm not going to review <code>ProcessReceivedData</code> and <code>OnReceivedData</code> methods in full because the whole system has a serious problem, and I'll just explain briefly why:</p>

<p>You cannot know how many bytes you will receive each time <code>OnReceivedData</code> is called: it could be 1, it could be a thousand. Your code has to cope with this <em>somehow</em>, and statements like the following immediately remove any hope of dependable networking:</p>

<pre><code>if (receivedBytes.Length &lt; 4)
{
    return;
}
</code></pre>

<p>This says "if I don't have a full packet, throw away what I do have": now you will never receive that package, or likely any other.</p>

<p>Similarly, an invalid <code>packetLength</code> is not cause for ignoring the packet: if you don't read that packet, then the stream becomes meaningless: you <em>must</em> handle this. If you can't work out how to handle it now, then die as loudly as possible (invalidate the <code>PlaerConnection</code> and throw an expectation), so that it can't come back to bite you, because if you do ever face an invalid packet, you will know about it straight away, instead of finding that the program keeps on running but none of the data makes any sense.</p>

<p>My guess is that <code>_halfDataReceived</code> is concerned with not forgetting a packet when you read it at the same time as another packet, but with networking a packet could end up being cut up any way imaginable, and you have to compensate by accumulating bytes until you have all the data that you need. This sort of code can appear to work when it is used locally (i.e. on a single machine), but all bets are off when you go beyond that.</p>

<hr>

<p>Though it is using a <code>ConcurrentDictionary</code>, <code>PlayerHandler.TryAddPlayer</code> isn't thread-safe as I think you intended (though it lacks documentation explaining what it should do, so it's difficult to comment usefully). It's hard to know what it should do without more code, but if you want to support simultaneous calls to <code>TryAddPlayer</code> (as opposed to just using a <code>ConcurrentDictionary</code> for the purpose of allowing concurrent reads) then you need to deal with the case where both calls read the same value of <code>_players.Count</code>. Even if you don't want simultaneous adding, you need to consider how this will break when you try removing players. A classic way would be to use an incrementing id, which you access with the <a href="https://docs.microsoft.com/en-us/dotnet/api/system.threading.interlocked.increment?view=netframework-4.8" rel="nofollow noreferrer"><code>Interlocked.Increment</code></a> method.</p>

<hr>

<p>Public types and members always benefit from having inline documentation (<code>///</code>). It forces whoever wrote the method to make sure they understand what they want it to do, it ensures that the maintainer knows what it is meant to do, and it tells consumers how they can use it.</p>
    </div>