<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I would generalize it as an extension method:</p>
<pre><code>public static IEnumerable&lt;IEnumerable&lt;U&gt;&gt; GroupByValueRange&lt;T, U&gt;(
    this IEnumerable&lt;T&gt; items,
    int rangeSize,
    Func&lt;T, double&gt; getValue,
    Func&lt;T, U&gt; map)
{
    items = items.ToList();

    double steps = Math.Ceiling(items.Max(getValue) / rangeSize);

    for (int i = 1; i &lt;= steps; i++)
    {
        int max = i * rangeSize;
        int min = (i - 1) * rangeSize;

        yield return items
            .Where(p =&gt; getValue(p) &gt;= min &amp;&amp; getValue(p) &lt;= max)
            .Select(map);
    }
}
</code></pre>
<p>Your code to call it would look like:</p>
<pre><code>var grouped = _itemRepository.GetAll().GroupByValueRange(10, p =&gt; p.Value, p =&gt; _mapper.Map&lt;RepoistoryItem, DTO.Item&gt;(p));
</code></pre>
<p>(I made up <code>RepositoryItem</code> for this)</p>
    </div>