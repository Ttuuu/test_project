<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Very bad code</h2>

<p>Your code is very poorly written making it difficult to workout what your intent is. </p>

<p>The <code>try catch</code> was a red flag and immediately told me not to trust the code. </p>

<p>Looking further at your code I found it full of redundant code and conflicting logic.</p>

<h3>List of problems</h3>

<ul>
<li><p><code>if (reference[prop] != undefined || reference[prop] != null) {</code></p>

<p>Is the same as <code>if(A == true || A == false) {</code></p>

<p>This is always true, if <code>A</code> is not <code>true</code>, then it is <code>true</code> that <code>A</code> is <code>false</code></p>

<p>That makes the <code>else</code> and the associated block redundant (will never happen)</p></li>
<li><p><code>if ( /*...*/ &amp;&amp; typeof Array.isArray(originalReference[prop])) {</code>   </p>

<p><code>typeof</code> creates a non empty string. Thus the second half of the above statement is always <code>true</code> and thus redundant.</p></li>
<li><p><code>if (typeof(reference[prop]) == 'object' &amp;&amp; typeof(originalReference[prop]) == 'object')</code>   and</p>

<p><code>if (Array.isArray(reference[prop]) &amp;&amp; typeof Array.isArray(originalReference[prop])) {</code> </p>

<p>If <code>reference[prop]</code> is an <code>array</code>, <code>null</code>, or an <code>object</code> and <code>originalReference[prop]</code> is an <code>array</code>, <code>null</code>, or <code>object</code> then both the above statements are true, which I think is not your intent.</p></li>
<li><p><code>var length = Object.keys(reference[prop]).length;</code></p>

<p><code>length</code> is never used making this line redundant. </p></li>
<li><p><code>reference[prop].forEach((item, index) =&gt; vm.evaluateEmptyValues(item, originalReference[prop][index]))</code></p>

<p>It is common for objects to contain references to themselves, or have properties that reference them selves. Thus this type of recursion can end up in an infinite loop. Luckily JS has a finite call stack that will cause an exception to be thrown, but as you catch the errors rather than stop, it will grind to a stop as it throws overflow error after error till it gets past all the self references.  </p></li>
</ul>

<h2>Minor points</h2>

<ul>
<li><p><code>var vm = this;</code></p>

<p>The reference to <code>vm</code> is used in the previous point. The <code>forEach</code> is using an arrow function that maintains the outer context of <code>this</code>. The variable <code>vm</code> is thus redundant.</p></li>
<li><p><code>referenceLength = Object.entries(reference).length;</code></p>

<p><code>Object.entries</code> creates an array of arrays. <code>[[key, value], [key, value], ...]</code> You should use <code>Object.keys</code> or <code>Object.values</code> if you want the number of properties.</p></li>
<li><p><code>typeof (reference[prop]) == 'string'</code></p>

<p><code>typeof</code> is a token not a function and does not need to be followed by a pair of <code>()</code></p></li>
<li><p>Use <code>===</code> or <code>!==</code> rather than <code>==</code> or <code>!=</code></p></li>
</ul>

<h2>Comments just add to the mess</h2>

<p>Your comments are noise if they repeat what is self evident in the code.</p>

<p>Or worse, comments are lies when in direct conflict with the code</p>

<p>You should only comment when the code can not represent the higher level abstraction that the logic is implementing. This is usually rare. </p>

<p>The better the code the less comments are needed to understand what is going on.</p>

<p>Some examples</p>

<ul>
<li><p><code>// Do another loop</code></p>

<p><code>for (var property in reference[prop]) {</code></p>

<p>Really!... a loop you say.</p></li>
<li><p><code>// Check if current prop in both objects is an object</code></p>

<p><code>if (typeof(reference[prop]) == 'object' &amp;&amp; typeof(originalReference[prop]) == 'object') {</code></p>

<p>Again the comment is repeating what is self evident in the code.</p></li>
<li><p><code>if (Array.isArray(reference[prop]) &amp;&amp; typeof Array.isArray(originalReference[prop])) {</code></p>

<p><code>// Recurse if both are arrays</code></p>

<p>No its not?... The comment is in direct conflict the the statement above it. </p></li>
</ul>

<h2>Summing up</h2>

<p>Sorry to be so harsh, but your code is boarder line on topic for code review. You need to be much more careful when writing code.</p>

<p>I think part of the problem is the very long naming and indirect referencing (eg <code>originalReference[prop][property]</code>) you are using which is making it hard to see the logic from the referencing.</p>

<p>Your code is nested up to 10 times, and one line is over 120 characters long. In that line of the 100 characters (ignoring indent/white spaces) 71 characters are naming, and only 29 are part of the logic. Little wonder you are making obvious logic mistakes in the code, you can not see the wood from the trees.</p>

<p>There are a variety of other problems in your code that I did not address.</p>
    </div>