<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think it's a nice project. I would say that the main things for you to work on is getting further acquainted with Python's standard library and with standard practices, which is what most of my advice will be surrounding.</p>

<h1>Minor improvements</h1>

<p>For your alphabet, you could use <code>ascii_lowercase</code> from string, i.e.: </p>

<pre><code>from string import ascii_lowercase
alphabet = [character for character in ascii_lowercase]
</code></pre>

<hr>

<p>Unless I'm misreading, your function <code>position()</code> looks like an attempt at recreating <code>list.index(value)</code> (or in your case <code>source.index(tofind)</code>).</p>

<hr>

<p>"Unneeded" variables can sometimes make sense if they improve readability, but your function:</p>

<pre><code>def converttolist(text):
    size = len(text)
    l = []
    for i in range(0,size,1):
        l.append(text[i])
    return l
</code></pre>

<p>would be just as readable if written as:</p>

<pre><code>def converttolist(text):
    l = []
    for i in range(0,len(text),1):
        l.append(text[i])
    return l
</code></pre>

<p>and while we're on that particular function, I would strongly recommend having a look at list comprehension---it's both faster and cleaner. Your function would then become:</p>

<pre><code>def convert_to_list(text: str) -&gt; list:
    return [text[i] for i in range(len(txt)]
</code></pre>

<p>but I should add that, for cases like this, even better is to just use in-line built-ins like <code>str.split()</code> or <code>[character for character in text]</code>.</p>

<hr>

<p>You don't need to write <code>str(input(&lt;whatever&gt;))</code> since <code>input</code> <a href="https://docs.python.org/3/library/functions.html#input" rel="noreferrer">already returns a string</a>.</p>

<hr>

<p>The function <code>range()</code> defaults to step-size 1, so writing <code>range(start, end, 1)</code> is unnecessary.</p>

<hr>

<p>I would also recommend using a <code>main</code> function for your main loop. You could move all of the stuff in the bottom into a <code>if __name__ == "__main__":</code>, which also would allow you to load in this python script into other programs.</p>

<h2>Naming</h2>

<p>Remember that <a href="https://www.python.org/dev/peps/pep-0020/" rel="noreferrer">Readability counts</a>. The standard in python is to use <code>snake_case</code> for variable names, but more importantly ensure that your names make the variables' purpose clear; avoid names like <code>x</code> and <code>sizea</code>.</p>
    </div>