<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The main reason why your code is so slow is because your for loop in main spends most of the time checking for things that are logically impossible to be true. You have one million elements in every number group, every iteration of the for loop you are comparing one value to 2 million other values, when most of them can not be true.</p>

<blockquote>
<pre><code>for _, terms in enumerate(hexagonal):
    if len(triangle_number) == 3:
        break
    elif terms in triangle and terms in pentagonal:
        triangle_number.append(terms)
        print(terms)
</code></pre>
</blockquote>

<p>With changing as little as possible and taking into account that as <a href="https://codereview.stackexchange.com/users/1402/peter-taylor">@Peter Taylor</a> said all of the <code>sequences are increasing</code>. I was able to get the runtime of the program from 452.8s to 3.2s</p>

<pre><code>t_iterator = 0
p_iterator = 0
for _, terms in enumerate(hexagonal):
    if len(triangle_number) == 3:
        break
    while (pentagonal[p_iterator] &lt;= terms):
        if pentagonal[p_iterator] == terms:
            while (triangle[t_iterator] &lt;= terms):
                if triangle[t_iterator] == terms:
                    print(terms)
                    triangle_number.append(terms)
                t_iterator += 1
        p_iterator += 1
</code></pre>

<p>This code I gave is still far from nice, it can be optimised further. You really should consider what the other answers have highlighted. It's not just that it does not look good and would be hard to understand. If you add another arbitrary 0 to the arbitrary <code>"limit"</code> you will probably run out of memory very quickly. You do not actually need to pre-calculate any of the values to solve the problem.  </p>
    </div>