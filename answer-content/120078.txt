<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Only minor remarks - not so much related to the code itself, but rather to the concepts:</p>

<hr>

<p>In <a href="https://codereview.stackexchange.com/questions/118893/combination-generator-in-java">your previous question</a>, you emphasized that the combinations should be returned in <strong>lexicographic</strong> order. From my understanding, this is not the case: The output is</p>

<pre><code> 1: [A]
 2: [B]
 3: [C]
 4: [D]
 5: [E]
 6: [A, B]
 7: [A, C]
 8: [A, D]
 9: [A, E]
...
</code></pre>

<p>Imagining these as "words in a dictionary" (in line with the <a href="https://en.wikipedia.org/wiki/Lexicographical_order" rel="nofollow noreferrer">Wikipedia page about lexicographical_order</a>), "AB" would come before "B" - but maybe this is just a misinterpretation on my side, and you are considering the words to be "filled with some character that comes before 'A'" at the beginning, as in</p>

<pre><code>____A
____B
____C
...
___AB
___AC
...
_ABCD
_ABCE
...
ABCDE
</code></pre>

<hr>

<p>The word "Combination" usually has a predefined meaning that differs from how you use it: A <a href="https://en.wikipedia.org/wiki/Combination" rel="nofollow noreferrer">Combination</a> is usually a selection of a <em>certain number of elements</em> from a given set. (Differentiated between "combinations with repetition" and "combinations without repetition"). </p>

<p>What you are computing there are actually the elements of the <a href="https://en.wikipedia.org/wiki/Power_set" rel="nofollow noreferrer">Power Set</a> of the given list (which usually also involves the empty list - but this is just a detail).</p>

<p>This is also what the comments referred to: When looking closely at the elements of the power set, you'll see a resemblance of these elements and the bit patterns of the binary representations of numbers:</p>

<pre><code>               EDCBA   Result:
0   binary:    00000   {     }
1   binary:    00001   {    A}
2   binary:    00010   {   B }
3   binary:    00011   {   BA}
...
9   binary:    01001   { D  A}
...
31  binary:    11111   {EDCBA}
</code></pre>

<p>This can be imagined as "taking the elements into the result when the binary representation of the corresponding number has a '1' at the respective position".</p>

<p>Unfortunately, the order would then be different from your current one, so this may not be applicable here. </p>

<hr>

<p>In terms of API design, there is probably not much more to say: The implementation as an <code>Iterable</code> makes it very easy to use it, as there are only two (relevant) public methods with well-known semantics, and, as far as I can see, they are implemented properly. One could consider different, minor restructurings of the private parts, but none that would objectively be "better" than the current solution.</p>

<hr>

<p><sub>A side note: A while ago I created some similar classes at <a href="https://github.com/javagl/Combinatorics" rel="nofollow noreferrer">https://github.com/javagl/Combinatorics</a> . They are also implemented as <code>Iterable</code>s, including a <code>CombinationIterable</code>, but as mentioned above, this computes <em>combinations</em> - in contrast to the <a href="https://github.com/javagl/Combinatorics/blob/master/src/main/java/de/javagl/utils/math/combinatorics/PowerSetIterable.java#L114" rel="nofollow noreferrer"><code>PowerSetIterable</code></a>, which computes the power set that you actually seem to be looking for - it contains a few words about the implementation using the binary number representations.</sub></p>
    </div>