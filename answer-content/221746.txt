<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>At first glance, your code looks quite good. I would like to share some of my thoughts with you nevertheless.</p>

<ol>
<li>Some variable names could be improved to make the code more readable. For instance <code>grp_keys</code>, seems to hint towards keys to groups. To me it would be more intuitive if the name was something like <code>key_groups</code>, which does sound more what you actually want from the user. One can likely argue about this. The name <code>self._storage</code> is also quite generic.</li>
<li>There should be no whitespace around the <code>=</code> when used for keyword arguments, i.e. <code>default_value=None</code> instead of <code>default_value = None</code> (<a href="https://www.python.org/dev/peps/pep-0008/#whitespace-in-expressions-and-statements" rel="nofollow noreferrer">relevant PEP8 section</a>)</li>
<li>Some of the comments could use a second look. E.g. <code>groupes</code> should likely be <code>groups</code> and there are a few sentences that don't make much sense, e.g. <code>Every group will share the same value. Intersected group will share the same value.</code> should likely be <code>Every key of a group will share the same value. Intersecting groups will also share the same value.</code></li>
<li>Using <code>Set[FrozenSet]</code> to initialize your class might be overly restrictive. Your code should work fine with other sequence types and likely even iterables.</li>
</ol>

<hr>

<p>It took me quite some time to understand what's going on in <code>__init__</code>. While thinking about an alternative solution I arrived at something similar to <a href="https://codereview.stackexchange.com/users/42401/peilonrayz">@Peilonrayz'</a> <a href="https://codereview.stackexchange.com/a/221745/92478">answer</a>. <s>so I won't duplicate that. Using this approach invalidates the last point mentioned above and you should stick with your current approach.</s> My approach can be found below. I'm not sure if it meets your complexity requirements, but it did pass your tests.</p>

<p><strong>A word of warning:</strong> As @Peilonrayz rightfully pointed out in a comment, the presented implementation will fail for cases like <code>MultiKeysDict([frozenset('ab'), frozenset('cd'), frozenset('bc')])</code>. The changes need to fix that would lead to what he presented in his answer.</p>

<pre class="lang-py prettyprint-override"><code>class MultiKeysDict(Mapping):
    """
     Dictionary to manage multiple key to one value.
     The keys groups has to be set at initialization and can't change later.
     If two keys groups share a key they will reference the same value.
     """

    class Value:
        """
        Store the value data
        """

        def __init__(self, default_value):
            self.data = default_value

        def __repr__(self):
            return f"Value({self.data!r})"

    def __init__(self, key_groups: Set[FrozenSet], default_value=None):
        """Create a dictionary based on key groups.

        Every key in a group will share the same value.
        Intersecting groups will also share the same value.

        :param key_groups: The groups of keys.
        :param default_value: The default value.
        """
        self._proxy = dict()
        self._data = dict()

        current_group_id = 0
        for keys in key_groups:
            known_keys = keys.intersection(self._proxy.keys())
            if known_keys:  # merge
                key = next(iter(known_keys))
                self._proxy.update(dict.fromkeys(keys, self._proxy[key]))
            else:
                self._proxy.update(dict.fromkeys(keys, current_group_id))
                self._data[current_group_id] = MultiKeysDict.Value(default_value)
                current_group_id += 1

    def __getitem__(self, key):
        return self._data[self._proxy[key]].data

    def __setitem__(self, key, value):
        self._data[self._proxy[key]].data = value

    def __len__(self):
        return len(self._data)

    def __iter__(self):
        return iter(self._data)

</code></pre>
    </div>