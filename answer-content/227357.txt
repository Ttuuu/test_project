<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First the really easy advice:</p>

<ul>
<li>use strict mode <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode" rel="nofollow noreferrer">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode</a></li>
<li>use <code>const</code> instead of <code>let</code> for stuff you know you're not supposed to change (symbol, player1, player2); declaring it const helps you keep some assumptions later</li>
<li>use <code>===</code> instead of <code>==</code> generally; I think the only legitimate use for <code>==</code> is for using it with <code>null</code> when you allow undefined or results of <code>typeof</code> if you feel like you're a JS human minifier :)</li>
<li>prefer camel case since JS already does it and it would look weird to have two casing strategies in the same codebase</li>
<li>use better naming in general: I'm talking about <em>array</em> in <code>function checkforOwin(array)</code> - <em>array</em> is extremely generic (what array?!?) I would call it <em>board</em> so I know what I'm dealing with; the fact that it's implemented as an array is a detail</li>
<li>I'd also like a function named <code>checkforOwin</code> to just check and return true/false than exit the process xD</li>
<li>who's <code>O</code> in this same function name? I thought we're comparing with the variable <code>player1</code>; stick to one or the other, not both; you'd have to update quite a bit of code if you change the initial statement of <code>let player1 = "X"</code></li>
</ul>

<p>...and the more involved:</p>

<ul>
<li>I would use nested arrays for the board because I can't easily picture what <code>board[7]</code> is; but I can picture what <code>board[2][1]</code> is</li>
<li>those really long if statements look very repetitive; they look a lot like patterns on a board so instead let's turn that code into data so we can manage it easier; we can rewrite the patterns like this:</li>
</ul>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const isOWinner = [
  [0, 1, 2],
  [3, 4, 5],
  [6, 7, 8],
  [0, 4, 8],
// ...
].some((indices) =&gt; indices.every((index) =&gt; board[index] === player1))</code></pre>
</div>
</div>


<p>That big condition blob in your if statements can be rewritten like this. Because it's an array you can store it somewhere; load it; merge with other patterns or extend or whatever you can do with arrays. Code that looks like data should be represented as data.
In fact let's use the same data in both functions and merge them into one:</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>function checkForWin (board, player) {
  const isWinner = [
    [0, 1, 2],
    [3, 4, 5],
    [6, 7, 8],
    [0, 4, 8],
    // ...
  ].some((indices) =&gt; indices.every((index) =&gt; board[index] === player))

  if (isWinner) {
    console.log(player + 'wins')
    process.exit()
  }
}</code></pre>
</div>
</div>


<p>And now you just call <code>checkForWin(board, player1)</code> or <code>checkForWin(board, player2)</code></p>
    </div>