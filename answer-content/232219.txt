<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>These are wrong. It doesn't make sense for operators on the array to succeed if the pointer is null. I would remove the <code>constexpr</code> and <code>noexcept</code> from the first three and access the array's member functions through the pointer so that it will segfault.</p>

<pre><code>    constexpr bool empty() const noexcept               { return SZ == 0; }
    constexpr auto size() const noexcept                { return SZ; }
    constexpr auto max_size() const noexcept            { return SZ; }
</code></pre>

<p>The <code>noexcept</code> in this is wrong, all allocation can throw.</p>

<pre class="lang-cpp prettyprint-override"><code>    void reset_ptr() noexcept                           { p.reset(new element_type); }
</code></pre>

<p>These constructors could be <code>noexcept</code>.</p>

<pre class="lang-cpp prettyprint-override"><code>    unique_heap_array(std::nullptr_t)                   { }
    unique_heap_array(element_pointer_type ptr)         { reset_ptr(ptr); }
</code></pre>

<p>If you remove the <code>Deleter</code> parameter so that you don't have to potentially feed it to <code>transform</code>, you can deduce the output type and not have to require the user to determine the output type. You could probably find a way to support the deleter, but it's rarely used and even if defaulted you would still have to call it with the empty argument list <code>transform&lt;&gt;(...)</code>, which some people find annoying. I would remove <code>Deleter</code> entirely from the class and the <code>get_deleter</code> method as well.</p>

<pre class="lang-cpp prettyprint-override"><code>    template &lt;typename F&gt;
    auto transform(F&amp;&amp; func)
    {
        using O = decltype(func((*this)[0]));
        static_assert((sizeof(O) == sizeof(T)) &amp;&amp;
                      (alignof(O) &lt;= alignof(T)),
                      "input and output types are not compatible");
        auto res = unique_heap_array&lt;O, SZ&gt;(reinterpret_cast&lt;std::array&lt;O, SZ&gt;*&gt;(borrow_ptr()));
        std::transform(begin(), end(), res.begin(), func);
        release_ptr();
        return res;
    }
    template &lt;typename F, typename T2&gt;
    auto transform(F&amp;&amp; func, const unique_heap_array&lt;T2, SZ&gt;&amp; other)
    {
        using O = decltype(func((*this)[0], other[0]));
        static_assert((sizeof(O) == sizeof(T)) &amp;&amp;
                      (alignof(O) &lt;= alignof(T)),
                      "input and output types are not compatible");
        auto res = unique_heap_array&lt;O, SZ&gt;(reinterpret_cast&lt;std::array&lt;O, SZ&gt;*&gt;(borrow_ptr()));
        std::transform(begin(), end(), other.begin(), res.begin(), func);
        release_ptr();
        return res;
    }
</code></pre>
    </div>