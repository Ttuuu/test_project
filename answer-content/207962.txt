<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First of all, it's nice that you've split your logic among different classes and tried to make them small. And also it's good that you've introduced some interfaces.  </p>

<p>Now to the tips:
Your mediator is risky. As a user, I can destroy your mediator if I:  </p>

<ul>
  <li>forget to add all necessary components</li>
  <li>forget to call "createGUI"</li>
  <li>call one of the other methods</li>
</ul>

<p>If you design your classes, you should do everything possible to make them hard to break and easy to use. Imagine you're the user. How would you like to use the class? Personally, I would find the following reasonable:</p>

<pre><code>public static void main(String[] args) {
  new CalculatorWindow(
    new Calculator()
  ).show();
}
</code></pre>

<p>It may be that they need some more arguments (window size for example), but at first, this should be enough.  </p>

<p>The next is about splitting the jobs:  </p>

<p><strong>Calculator</strong>: Should be calculating your stuff, but additionally, I would put the clearing logic and similar stuff inside of it. Just let the GUI code out of the calculator. He shouldn't even know that there is a GUI at all.  </p>

<p><strong>CalculatorWindow</strong>: This class would be similar to your mediator class but without the clearing logic and with some changes:<br>
1) Let it create your buttons. This way you can remove your "registerComponent" method.<br>
2) Remove all other methods besides createGUI. Currently, your buttons call methods like "calculate" on Mediator and thus the Mediator needs these methods. The problem with these methods is that the user can also see and use them to destroy your calculator. There is an alternative:</p>

<pre><code>// when you register a component, instead of:
component.setMediator(this);

// use this:
component.setMediator(
  new MediatorInterface() {
    @Override
    public void clearOne() {
      // ...
    }

    // ...
  }
);
</code></pre>

<p>And by the way: If you have an interface like MediatorInterface, use it. Currently, your buttons take the Mediator class in their "setMediator" method.  </p>

<p><strong>Button</strong>: It's ok to use your own classes that wrap the standard GUI classes but you don't need one for every possible text they are displaying. In your case, one button is enough:  </p>

<pre><code>// I wouldn't extend JButton because JButton just fills your interface with
// maaaaany methods.
public final class Button implements Addable {
  private final JButton button; // instead of extending JButton, just keep an instance of it

  public Button(String text, ActionListener actionListener, /* what ever you might want */) {
    button = new JButton(text); 
    // button setting...
  }


  // from Addable:
  @Override
  public void addOn(Container container) {
    container.add(button);
  }
}
</code></pre>

<p><strong>Why Addable?</strong><br>
You already have a Component interface but the problem with it is that Swing already has a Component class. Using the same name for an interface is not a good idea, so I chose another name. In this case, it has exactly one method: addOn. This is necessary because this version of Button doesn't extend from JButton and this way you can still add it to other Swing components.<br>
The setMediator method is not necessary because you can just take an action listener as an argument for the constructor and do the setting there. It's more stable than introducing a setter for that.<br>
GetName isn't necessary either.  </p>

<p>That's all. These tips won't make everything perfect but they should be a good start.</p>
    </div>