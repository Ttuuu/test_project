<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Since it's a code-review site, I'll focus on issues you have with your code...</p>
<h3>Having <code>Main</code> in your class</h3>
<p>I would generally avoid this. I understand that this is probably a single-class demonstration project, but typically C# projects have a <code>Program</code> class that has <code>Main</code> inside of it, and I would stick with that. If you want to be able to unit-test <code>FizzBuzzer</code>, the <code>Main</code> function would not be unit-testable. As a result, your code-coverage of this class will be lower.</p>
<h3>Inconsistent method names</h3>
<p>You have a method properly cased as <code>StartLoop</code> and then you have an improper cased <code>getOutputForI</code>. Stick with the Microsoft recommendation of <a href="https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/capitalization-conventions" rel="noreferrer">Capitalization Rules for Methods</a> which should be Pascal Cased.</p>
<h3>Method names and parameters that don't self-document</h3>
<p>The name you give a method should identify to the caller what it does. <code>StartLoop</code> both starts and ends a loop, and runs the entire sequence. Ideally this would be named <code>Run</code> instead of <code>StartLoop</code>, but even then, what is it returning? Maybe <code>CountFizzBuzz</code> would be even better. Similarly, <code>getOutputForI</code> certainly gets the output for the method parameter <code>I</code>, but that really doesn't say what it does. Maybe consider renaming it to <code>FizzBuzz(int input)</code> instead.</p>
<p>Similarly the method parameters are not self documenting. What is <code>n</code> exactly in <code>StartLoop</code>? It would be more apparent if the method were something like <code>Run(int max)</code>. Which would also require a modification of your <code>for</code> loop because you would stop just shy of <code>max</code>. <code>i</code> is also not apparent of what it is (see a suggested version in the paragraph above).</p>
<h3>Mixing UI with code</h3>
<p>This makes your code unit-test unfriendly. You can't unit test the output to the console, so in order to unit test this you would need to pass a stream to the output:</p>
<pre><code>public int CountFizzBuzz(int max, TextWriter output)
{
    int fizzBuzzes = 0;
    for (int i = 0; i &lt;=max; i++)
    {
        string fizzBuzz = FizzBuzz(i);
        if (fizzBuzz == "FizzBuzz")
        {
            fizzBuzzes++;
        }
        output.WriteLine(fizzBuzz);
    }
    return fizzBuzzes;
}
</code></pre>
<p>Now this is unit-testable because you can create a <code>TextWriter</code> and pass in a value that can be <code>Assert</code>ed later.</p>
<h2>Inconsistent Brackets</h2>
<p>You have two methods of writing brackets in your code, the "Microsoft" way, and the "Java" way. Again, I would stick with Microsoft practices here and use the one that has both brackets on their own lines.</p>
<h3>Using an instance object for something that has no state</h3>
<p><code>FizzBuzzer</code> has no state, so why isn't everything <code>static</code>? There isn't a good reason to require a <code>new</code> each time you have to run the "Fizz Buzzer", take up space on the stack, etc. This class should be made <code>static</code>.</p>
<hr>
<p>So with all my recommendations, here is what it would <em>possibly</em> turn out like:</p>
<pre><code>public static class FizzBuzzer
{
    public static int CountFizzBuzzes(int max)
    {
        return CountFizzBuzzes(max, Console.Out);
    }

    public static int CountFizzBuzzes(int max, TextWriter output)
    {
        int fizzBuzzes = 0;
        for (int i = 0; i &lt;= max; i++)
        {
            string result = FizzBuzz(i);

            if (result == "FizzBuzz")
                fizzBuzzes++;

            output.WriteLine(result);
        }
        return fizzBuzzes;
    }

    public static string FizzBuzz(int input)
    {
        string s = "";

        if (input % 3 == 0)
            s += "Fizz";

        if (input % 5 == 0)
            s += "Buzz";

        if (s.Length == 0)
            s = "" + input;

        return s;
    }
}
</code></pre>
<p>I still don't find this completely "ideal" as <code>CountFizzBuzzes</code> really does two things, counts them and outputs them to the stream. This really should be two separate methods for separation of concerns.</p>
<p>Just as a final note, your <code>Main</code> has an issue... Right now when you start the program it just stares at you with a blank window until you mash the right key(s).</p>
<pre><code>public static void Main()
{
    FizzBuzzer fizzBuzzer = new FizzBuzzer();
    int n = Convert.ToInt32(Console.ReadLine());
    fizzBuzzer.StartLoop(n);
}
</code></pre>
<p>What is to stop the user here from entering "My Name Is" instead of "42"? The <code>Convert.ToInt32</code> will throw an exception and the program will terminate. The user isn't even prompted for a number or any thing. At least prompt the user:</p>
<p>There are a multitude of questions on here about how to validate console input, so I'll leave that to you to research, but you should prompt the user <em>"Please Enter a Number:"</em> and if that isn't a number, tell them and ask again (and provide them a way to quit).</p>
    </div>