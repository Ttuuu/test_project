<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Blocking code in a loop</h2>

<p>You are starting your tasks asynchronously..</p>

<blockquote>
  <p><code>Task.Factory.StartNew(()</code></p>
</blockquote>

<p>only to block synchronously inside the loop..</p>

<blockquote>
  <p><code>allLinks.Add(task.Result.ToList());</code></p>
</blockquote>

<p>resulting in sequentially starting and awaiting the intermediate results for each cycle in the loop.</p>

<blockquote>
<pre><code>    foreach (string rootUrl in rootUrls)
    { 
        // .. code omitted

        // start an asynchronous task
        var task = Task.Factory.StartNew(() =&gt;
        {
            // .. code omitted
        });

        tasks.Add(task);

        // BOTTLE-NECK:
        // synchronously await its result before starting the next task
        allLinks.Add(task.Result.ToList());
    }

    // super fast! but only because you have already awaited all results synchronously
    Task.WaitAll(tasks.ToArray());

    return allLinks.SelectMany(x =&gt; x).Distinct(); 
</code></pre>
</blockquote>

<p>You could solve this by extracting the line  <code>allLinks.Add(task.Result.ToList());</code> from the loop and returning   <code>return tasks.SelectMany(x =&gt; x.Result).Distinct();</code> .</p>

<pre><code>private static IEnumerable&lt;string&gt; getManyPageLinks(IEnumerable&lt;string&gt; rootUrls, bool hostMatch, bool validatePages)
{
    var tasks = new List&lt;Task&gt;();

    foreach (var rootUrl in rootUrls)
    { 
        string rootUrlCaptured = rootUrl;
        var task = Task.Run(() =&gt;
        {
            var taskResult = getSinglePageLinks(rootUrlCaptured, hostMatch, validatePages);
            return taskResult;
        });

        tasks.Add(task);
    }

    Task.WaitAll(tasks.ToArray());
    return tasks.SelectMany(task =&gt; task.Result).Distinct();            
}
</code></pre>
    </div>