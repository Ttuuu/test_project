<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I suppose I am not convinced that your simple game actually needs to establish any exceptions for these predictable failures in flow.  I agree with Greg that a win should definitely not be a throwable exception -- because it is predictable.</p>
<p>I like <a href="https://stackoverflow.com/a/41387958/2943403">this simplistic answer</a> to "When should you use PHP Exceptions?".  Because your script is handling very predictable failures in the user's actions, adding exceptions seems like unnecessary overhead / code bloat.  With some simple refactoring to return the reason the guess was wrong else no reason (guess was correct), exceptions can be cleanly avoided.</p>
<p>Code: (tested on <a href="https://repl.it" rel="nofollow noreferrer">https://repl.it</a>)</p>
<pre><code>class ABorC
{
    const CHOICES = ['a', 'b', 'c'];
    public $answer;
    public $validGuesses = 0;

    public function __construct(?string $answer = null)
    {
        $this-&gt;answer = in_array($this-&gt;answer, self::CHOICES)
            ? $answer
            : self::CHOICES[array_rand(self::CHOICES)];
    }

    public function wrongGuessReason(string $guess): ?string
    {
        if (!in_array($guess, self::CHOICES)) {
            return 'Invalid input';
        }
        ++$this-&gt;validGuesses;
        if ($guess === $this-&gt;answer) {
            return 'Wrong!';
        }
        return null;
    }
}

$game = new ABorC;
do {
    $reasonIncorrect = $game-&gt;wrongGuessReason(readline("Enter your guess a, b or c?\n"));
    echo $reasonIncorrect . "\n";
} while ($reasonIncorrect);
printf(
    "Correct!\nYou won after %d valid attempt%s\n",
    $game-&gt;validGuesses,
    $game-&gt;validGuesses === 1 ? '' : 's'
);
</code></pre>
<ol>
<li>Please review all of the recommendations in PSR-12.  I know you like to omit curly braces in your code, but this is <a href="https://www.php-fig.org/psr/psr-12/#:%7E:text=An%20if%20structure%20looks%20like,body" rel="nofollow noreferrer">a violation of PSR guidelines</a>.</li>
<li>You could also validate that any manually loaded answer is also in the expected range and fallback to a randomized answer.</li>
<li>I am becoming increasingly supportive of the use of <code>printf()</code> and <code>sprintf()</code> instead of messy concatenation involving variables.  If you are going to use commas to concatenate in your <code>echo</code>s, then write a space on either side of the comma so that it gets the same treatment as dot-concatenation.  (...not to be confused with commas used to separate arguments.)</li>
<li>I don't see any reason to cache the guesses in your class, since you are not printing them in the conclusion.  For this reason, just use <code>$this-&gt;validGuesses</code> as a counter and increment it on each valid turn.</li>
<li>As soon as the guess is right, break the loop and show the congratulations.</li>
<li>I try to avoid single-use variables, but if you want to declare a variable to store the <code>readline()</code> value, that's not ridiculous because it may help coders who read your code and do not know what <code>readline()</code> does/returns.</li>
</ol>
    </div>