<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You’ve got many errors in your code. </p>

<p>In <code>class Door</code>, you set <code>self.is_open</code> to <code>False</code>, but door already contained the method <code>def is_open(self)</code>, so you’ve overwritten the object’s method, and can no longer call <code>door.is_open()</code>.</p>

<p>The method <code>def is_open(self)</code> returned <code>self.is_open</code>, which would be a method reference if it wasn’t overwritten above, so the method would have always return a “truthy” value. </p>

<p>In <code>class Player</code>, you have <code>def select_door(self, force_change: int=False)</code>.  The parameter <code>force_change</code> is given the type <code>int</code>, with a default value of <code>False</code>.  Round peg in a square hole. </p>

<hr>

<p>Your code is unnecessarily verbose:</p>

<pre><code>    if self.content == GIFT:
        return True
    else:
        return False
</code></pre>

<p>Could be:</p>

<pre><code>    return self.content == GIFT
</code></pre>

<p>But <code>GIFT</code> is a list of all of the prizes!  Shouldn’t there just be one prize behind a door?  Maybe:</p>

<pre><code>    return self.content in GIFT
</code></pre>

<p>How does your code actually work?  Oh, right, you never call the method <code>door.is_prize()</code>, just like you never call <code>door.is_open()</code>.  If you write a function, test it and make sure it works. </p>

<hr>

<blockquote>
  <p>1) Would I benefit from making Player a subclass of Game (or the other
  way around)?</p>
</blockquote>

<p>Use the “is-a” test.  Is a player a game?  I’d say “no”.  How about is a game a player?  Again, I’d say “no”.  Unless the answer to one of those is a “yes”, making something a subclass of another thing is a very bad idea.</p>
    </div>