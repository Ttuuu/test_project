<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is a really useful thing to implement! Good choice of projects. Here are some thoughts on how you could improve it:</p>
<h1>Naming</h1>
<p>Generally when I think of a linked list I don't think of a list of links. I think of a list of nodes which are linked to each other (via next and/or previous pointers). For  that reason, I wouldn't call your class <code>Link</code>, I'd call it <code>Node</code>. The link in your class is the <code>next</code> pointer.</p>
<p>The distinction between <code>push_back()</code> and <code>insert()</code> is unclear. In the base class there doesn't appear to be a difference as <code>insert()</code> simply calls <code>push_back()</code>. If I make an <code>LRU</code> object and call <code>push_back()</code> what are the consequences? (Or <code>push_front()</code> for that matter?) Perhaps <code>LRU</code> shouldn't make the methods of <code>LinkList</code> public. Also, renaming <code>insert()</code> to <code>add_new_cache_item()</code> would make clear which a caller should be using given a particular use case.</p>
<p>Related method names should follow the same pattern. You have <code>insert()</code> but then its opposite is called <code>deleteKey()</code>. Presumably that's because <code>delete</code> is a keyword so you couldn't call it that. I'd either rename <code>insert()</code> to <code>insertKey()</code> or rename <code>deleteKey()</code> to simply <code>remove()</code>.</p>
<h1>Do you need <code>setValue</code>?</h1>
<p>Is there a reason why you need a <code>setValue()</code> method in <code>Link</code>? It's only called from the constructor. You could simply move the code for it into the constructor and get rid of the public function. (If you added a <code>next</code> parameter to the constructor you could make the class immutable which is helpful for multithreading, though it would involve changing some of the logic of updating the list.)</p>
<h1>Encapsulation</h1>
<p>I don't generally like <code>friend</code> functions. People will say that <code>operator&lt;&lt;()</code> is always a <code>friend</code> function. But here you're careful to keep the <code>Link</code> parameter <code>const</code> and it only calls the (also <code>const</code>) <code>getValue()</code> method. There's nothing  here that requires it be a <code>friend</code> function, so I say get rid of the <code>friend</code> designation. Just make it a free function in the header.</p>
<h1>Double-ended Queue</h1>
<p>What you've created actually has a name other than "linked list". It's often called a <a href="https://en.wikipedia.org/wiki/Double-ended_queue" rel="nofollow noreferrer">double-ended queue</a> or <code>deque</code> for short. They have several useful characteristics such as being O(1) for insertion and deletion at the ends, as you've no doubt discovered. There is a standard container called <code>std::deque</code> that implements this. (Though I realize you tagged this as "reinventing the wheel", which is always good for learning!)</p>
<h1>Avoid raw pointers</h1>
<p>I agree with others that you could implement this with a <code>vector</code> or <code>array</code> (or <code>deque</code>) if you wanted to. But whatever you do, you should avoid using raw pointers. They have so many potential pitfalls that they're really not worth it. I recommend using either <code>std::unique_ptr</code> or <code>std::shared_ptr</code> depending on the situation. They help avoid a large class of resource management errors.</p>
<h1>Symmetry</h1>
<p>You should strive to make the interface for your classes symmetrical to make them easier to use and understand. By that I mean that if you have an <code>insert()</code> method that does one thing, the <code>remove()</code> or <code>delete()</code> method should do the opposite. In <code>LRU</code> you've overridden <code>insert()</code> to do things like increment the <code>max_len</code> counter. But then in <code>access()</code> you have to manually decrement it after calling <code>deleteKey()</code>. You should also override <code>deleteKey()</code> to call the base class and decrement <code>max_len</code>  so that someone updating <code>access()</code> doesn't have to know this fact in the future. They can simply call <code>deleteKey()</code> and not worry about it.</p>
    </div>