<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>For assigning data members in a constructor, it's more common to use an initializer list:</p>

<pre><code>node()
    : data(-1)
    , prev(-1)
    , next(-1)
{}
</code></pre>

<p>Moreover, you don't really need to initialize <code>data</code> as well.  It may even be misinterpreted as an actual data value at the start, which you may not want.</p></li>
<li><p>Try to avoid global variables unless they're absolutely necessary.  In this case, you can wrap them in a <code>class</code> and make each variable <code>private</code>.  You can then probably have that <code>node</code> <code>struct</code> within that <code>class</code>.</p></li>
<li><p>Don't use single-character variable names:</p>

<blockquote>
<pre><code>int a, b;
char c;
</code></pre>
</blockquote>

<p>It shouldn't be up to the reader to deduce the usage, plus you may eventually forget this as well.  Always use meaningful names for variables to avoid this.</p>

<p>For loop counter variables, on the other hand, single letters are okay (and would be initialized within the <code>for</code> loop anyway).</p></li>
<li><p>There's no need for <code>return 0</code> at the end of <code>main()</code>.  This will be done automatically from just this function.</p></li>
<li><p>Error messages such as "no elements to delete" or "no free space available" should be printed to <code>std::cerr</code> instead.</p></li>
<li><p>If you're going to hold the user to a static array size, then you should also state this size to the user.  A "no free space" warning may instead scare the user into thinking that there's no more <em>memory</em> available to use.</p></li>
<li><p>There is some duplication in <code>deleteElement()</code>.  Since each case will end with a <code>return</code>, use <code>if</code>/<code>else if</code> (starting with the second <code>if</code>) and remove each <code>return</code> statement starting from there.  With that, you can just have one <code>elements--</code> at the very end.</p></li>
<li><p>Don't put that first print statement in <code>print()</code>.  Users may not expect that and not even want it.  If it's desired, then they'll put it in their own driver file.  In addition, replace the <code>endl</code>s with <code>'\n'</code> so that they're not forced to have the buffer flushed as well.</p></li>
<li><p>Whether or not you're allowed to use library functions, do know that you can just have <code>reverse()</code> call <a href="http://en.cppreference.com/w/cpp/algorithm/reverse" rel="nofollow"><code>std::reverse()</code></a>:</p>

<pre><code>void reverse() {
    std::reverse(std::begin(A), std::end(A));
}
</code></pre>

<p>Note: <code>std::begin()</code>/<code>std::end()</code> are under <a href="http://en.cppreference.com/w/cpp/iterator" rel="nofollow"><code>&lt;iterator&gt;</code></a> and require C++11.</p></li>
</ul>
    </div>