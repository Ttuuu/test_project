<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The usage of <code>target</code> is not consistent:</p>

<pre><code>target: resb 4      ; 4 bytes of storage (enough for a 32bit number)
...
mov     [target], rdx ; store 8 bytes
</code></pre>

<p>That's easy to improve, just use <code>edx</code>.</p>

<p>Using <code>rand</code> like this is not very random, it's some function of the time in seconds. Seconds are long, you could easily start the program twice in the same second. Maybe that's fine for a simple number guessing game. On not-too-old processors there is a simpler <em>and</em> more random way to get a random number though:</p>

<pre><code>.rand_retry:
    rdrand eax
    jnc .rand_retry
</code></pre>

<p>But that doesn't work on some older processors (Intel processors older than Ivy Bridge, for example Nehalem or Core2, and AMD processors older than Excavator), and can actually be slower than calling <code>rand</code>. Seeding the random number generator with the TSC value is more portable and less predictable than using <code>time</code>:</p>

<pre><code>rdtsc ; read TSC into edx:eax
mov ecx, eax
call srand
call rand
</code></pre>

<p>Since you asked for performance tips (this program is obviously limited by waiting for user input but you can still learn useful things from this):</p>

<p>This remainder calculation is inefficient:</p>

<pre><code>mov     rcx, 100
div     rcx     ; 64bit div, quite slow
inc     rdx
</code></pre>

<p>There are other options. For example, for a 2<sup>32</sup> input range (which <code>rand</code> normally does not deliver but <code>rdrand</code> does), a very similar-looking fixed-point scale can be used:</p>

<pre><code>mov     ecx, 100
mul     ecx
inc     edx
</code></pre>

<p>The <code>mul</code>, combined with using the upper half of the result, effectively multiplies the input by 100 / 2<sup>32</sup> so 0xFFFFFFFF maps to 99 and so on. This method can be adjusted for smaller ranges such as up to <code>RAND_MAX</code> by multiplying by a higher constant, namely 100 * 2<sup>32</sup> / (RAND_MAX + 1)</p>

<p>The too low/too high cases could be less branchy and can share some code - admittedly they call an IO function anyway, but still. For example:</p>

<pre><code>    cmp     r8d, [target]
    jne     .not_equal
...
.not_equal:
    lea     rcx, [too_high]
    lea     rdx, [too_low]
    ;; if "less than", use the too_low string
    cmovl   rcx, rdx
    call    printf
    jmp     .check
</code></pre>
    </div>