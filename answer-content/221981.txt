<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First, your use of camelCase isn't ideal in Python. For variable and function names, snake_case is preferred. I'll be using that with any re-written code that I show.</p>

<hr>

<p>I think <code>throw_dice</code> can be improved a bit. You're checking for the value of <code>fair_dice</code> once per iteration in the function instead of once at the beginning. This will be negligible performance-wise, but it's unnecessary and checking once per loop suggests that it's a value that can change in the loop, which isn't the case here.</p>

<p>There's different ways of approaching this depending on how close to <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP</a> you want to adhere to; but both ways I'll show depend on dispatching to a function using a conditional expression. Following PEP, you could do something like:</p>

<pre><code>def throw_loaded_die():
    return 1 # For brevity

# Break this off into its own function
def throw_fair_die():
    return random.randint(1, 6)

def throw_dice():
    # Figure out what we need first
    roll_f = throw_fair_die if fair_dice else throw_loaded_die

    total = 0
    for _ in range(8):
        total += roll_f() # Then use it here

    return total
</code></pre>

<p>That cuts down on duplication which is nice. I also got rid of the <code>0</code> argument in the call to <code>range</code> as that's implicit if it isn't specified.</p>

<p>I think the separate <code>def throw_fair_die</code> is unfortunate though. For such a simple function that isn't needed anywhere else, I find it to be noisy, and looking around, I'm not the <a href="https://stackoverflow.com/a/37489941/3000206">only one to feel this way</a>. Personally, I'd prefer to just write:</p>

<pre><code>def throw_dice():
    # Notice the lambda
    roll_f = (lambda: random.randint(1, 6)) if fair_dice else throw_loaded_die

    total = 0
    for _ in range(8): # Specifying the start is unnecessary when it's 0
        total += roll_f()

    return total
</code></pre>

<p>This is arguably a "named lambda" though, which is in violation of the recommendations of <a href="https://www.python.org/dev/peps/pep-0008/#id51" rel="nofollow noreferrer">PEP</a>:</p>

<blockquote>
  <p>Always use a def statement instead of an assignment statement that binds a lambda expression directly to an identifier.</p>
</blockquote>

<p>¯\_(ツ)_/¯ </p>

<p>I still think it can be improved though. Look carefully at the loop. It's just a summing loop! Python has a built-in for that that can be used cleanly with a generator expression:</p>

<pre><code>def throw_dice():
    roll_f = throw_fair_die if fair_dice else throw_loaded_die

    return sum(roll_f() for _ in range(8))
</code></pre>

<hr>

<p><code>is_extra_prize</code> has a redundant return. It can be simplified to:</p>

<pre><code>def is_extra_prize(score):
    return (18 &lt;= score &lt;= 21) or (score == 29) or (35 &lt;= score &lt;= 38)
</code></pre>

<p>I'll point out though that right below it you have <code>need_double_fee</code>. Either it's justified to have <code>score == 29</code> broken off into its own function (in which case it should be used in the appropriate cases), or it's not. If you feel the need to have it as a separate function, I'd use it:</p>

<pre><code>def need_double_fee(score):
    return score == 29

def is_extra_prize(score):
    return (18 &lt;= score &lt;= 21) or need_double_fee(score) or (35 &lt;= score &lt;= 38)
</code></pre>

<p>Although it could be argued that the other two parts of the condition in <code>is_extra_prize</code> are more complicated than <code>score == 29</code>, and may benefit from having a name attached to them as well. There's also the alternative of naming the <code>29</code> magic number directly, which I feel would probably be an even better option:</p>

<pre><code>EXTRA_PRIZE_SCORE = 29

def is_extra_prize(score):
    return (18 &lt;= score &lt;= 21) or (score == EXTRA_PRIZE_SCORE) or (35 &lt;= score &lt;= 38)
</code></pre>

<p>You may find naming <code>18</code>, <code>21</code>, <code>35</code> and <code>38</code> are beneficial as well; although that will certainly make that function more verbose.</p>

<hr>

<p>I think <code>get_points</code> can be improved as well. The score dictionary seems like it's a "member of the entire program", not something that should be local to the function. You can also use <code>get</code> on the dictionary to avoid the explicit membership lookup:</p>

<pre><code>SCORE_TO_POINTS = {8:100, 9:100, 10:50, 11:30, 12:50,
                   13:50, 14:20, 15:15, 16:10, 17:5, 
                   39:5, 40:5, 41:15, 42:20, 43:50, 
                   44:50, 45:50, 46:50, 47:50, 48:100}

def get_points(score):
    # 0 is the default if the key doesn't exist
    return SCORE_TO_POINTS.get(score, 0)
</code></pre>

<hr>

<p><code>simulate_turn</code> returns a tuple (actually a list, although it probably should be a tuple) representing the new state of the game. This is fine for simple states, but your current state has four pieces, and accessing them requires memorizing what order they're in, and allows mistakes to be made if data is placed incorrectly. You may want to look into using a class here for organization and clarity, or even a <a href="https://docs.python.org/3/library/collections.html#collections.namedtuple" rel="nofollow noreferrer">named tuple</a> as a shortcut.</p>

<p>In that same function, I'd also add some lines to space things out a bit:</p>

<pre><code>def simulate_turn(points, prizes, fee):
    score = throwDice()

    if isExtraPrize(score):
        prizes += 1

    if needDoubleFee(score):
        fee *= 2

    points += getPoints(score)

    return (points, prizes, fee, score)
</code></pre>

<p>Personal style, but I like open space in code.</p>

<p>You could also do away with the mutation of the parameters:</p>

<pre><code>def simulate_turn(points, prizes, fee):
    score = throw_dice()

    return (points + get_points(score),
            prizes + 1 if is_extra_prize(score) else prizes,
            fee * 2 if need_double_fee(score) else fee,
            score)
</code></pre>

<p>Although now that it's written out, I'm not sure how I feel about it.</p>

<hr>

<hr>

<p>I really only dealt with <code>5.</code> here. Hopefully someone else can touch on the first four points.</p>
    </div>