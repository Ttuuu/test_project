<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Next step: Make it <code>Expression&lt;&gt;</code>-oriented.</h1>

<p>Making your own math tools is tons of fun and practical! </p>

<p>Since you're asking about potential improvements, my suggestion is to move toward <code>Expression&lt;&gt;</code>-oriented coding next.</p>

<p>First, you define:</p>

<pre><code>public abstract partial class Expression&lt;T&gt;
{
    public T Evaluate()
    {
        return this.Internal_Evaluate();
    }
    protected abstract T Internal_Evaluate();
}
</code></pre>

<p>You can ignore the <code>.Evaluate()</code>/<code>.Internal_Evaluate()</code> distinction for now, though I'd suggest that you include it as it may make your life easier later.</p>

<p>Anyway, then you can define stuff like constants</p>

<pre><code>public partial class ConstantExpression&lt;T&gt;
    :        Expression&lt;T&gt;
{
    protected T ConstantValue { get; private set; }

    //  Empty constructor that no external code should ever use:
    protected ConstantExpression() { }

    //  Primary factory-style constructor.
    //  If you add overloads, try to make them call this one,
    //  such that this is the only method that ever includes
    //  "new ConstantExpression&lt;&gt;()" anywhere in your code.
    public static ConstantExpression&lt;T&gt; New(
                T constantValue
        )
    {
        var toReturn = new ConstantExpression&lt;T&gt;();

        toReturn.ConstantValue = constantValue;

        System.Threading.Thread.MemmoryBarrier();  // Just always include this until you have a reason not to.

        return toReturn;
    }

    protected override T Internal_Evaluate()
    {
        return this.ConstantValue;
    }
}
</code></pre>

<p>and addition</p>

<pre><code>public partial class AdditionExpression
    :        Expression&lt;double&gt;
{
    protected Expression&lt;double&gt; Argument0Expression { get; private set; }
    protected Expression&lt;double&gt; Argument1Expression { get; private set; }

    //  Empty constructor that no external code should ever use:
    protected AdditionExpression() { }

    //  Primary factory-style constructor.
    //  If you add overloads, try to make them call this one,
    //  such that this is the only method that ever includes
    //  "new AdditionExpression()" anywhere in your code.
    public static AdditionExpression New(
                Expression&lt;double&gt; argument0Expression
            ,   Expression&lt;double&gt; argument1Expression
        )
    {
        if (argument0Expression == null || argument1Expression == null)
        {
            throw new Exception();  // replace with your preferred debug-tracing style
        }

        var toReturn = new AdditionExpression();

        toReturn.Argument0Expression = argument0Expression;
        toReturn.Argument1Expression = argument1Expression;

        System.Threading.Thread.MemmoryBarrier();  // Just always include this until you have a reason not to.

        return toReturn;
    }

    protected override double Internal_Evaluate()
    {
        var argument0 = this.Argument0Expression.Evaluate();
        var argument1 = this.Argument1Expression.Evaluate();

        return argument0 + argument1;
    }
}
</code></pre>

<p>with usability helpers like</p>

<pre><code>partial class Expression&lt;T&gt;
{
    public static implicit operator Expression&lt;T&gt;(
                T constantValue
        )
    {
        return ConstantExpression&lt;T&gt;.New(constantValue);
    }

    public static Expression&lt;double&gt; operator +(
                Expression&lt;double&gt; addend0Expression
            ,   Expression&lt;double&gt; addend1Expression
        )
    {
        return AdditionExpression.New(
                   addend0Expression
               ,   addend1Expression
            );
    }
}
</code></pre>

<p>Then now that you've got the basic outline for <code>Expression&lt;&gt;</code>'s, you can rewrite your matrix code:</p>

<pre><code>public partial class MatrixExpression
    :        Expression&lt;double[,]&gt;
{
    protected Expression&lt;double&gt;[,] MatrixElementsExpressions { get; private set; }

    protected MatrixExpression() { }
    public static MatrixExpression New(
                Expression&lt;double[,]&gt; matrixElementsExpressions
        )
    {
        var toReturn = new MatrixExpression();

        toReturn.MatrixElementsExpressions = matrixElementsExpressions;

        System.Threading.Thread.MemoryBarrier();

        return toReturn;
    }

    protected override double[,] Internal_Evaluate()
    {
        var matrixElementsExpressions = this.MatrixElementsExpressions;

        var length_0 = matrixElementsExpressions.GetLength(0);
        var length_1 = matrixElementsExpressions.GetLength(1);

        var toReturn = new double[length_0, length_1];

        for (long i_0 = 0; i_0 &lt; length_0; ++i_0)
        {
            for (long i_1 = 0; i_1 &lt; length_1; ++i_1)
            {
                toReturn[i_0, i_1] = matrixElementsExpressions[i_0, i_1].Evaluate();
            }
        }

        return toReturn;
    }
}
</code></pre>

<p>Then, it might be tempting to add, say, a <code>.Transpose()</code> method to <code>MatrixExpresion</code> – but <strong><em>don't</em>!</strong></p>

<p>Instead:</p>

<pre><code>public static Expression&lt;double[,]&gt; Transpose(
            this Expression&lt;double[,]&gt; matrixExpression
    )
{
    if (matrixExpression == null)
    {
        throw new Exception();    //  Replace with your preferred error-handling system.
    }

    var toReturn = TransposedMatrixExpression.New(
                matrixExpression
        );

    return toReturn;
}

public partial class TransposedMatrixExpression
    :        Expression&lt;double[,]&gt;
{
    protected Expression&lt;double[,]&gt; MatrixExpression { get; private set; }

    protected TransposedMatrixExpression() { }
    public static TransposedMatrixExpression New(
                Expression&lt;double[,]&gt; matrixExpression
        )
    {
        var toReturn = new TransposedMatrixExpression();

        toReturn.MatrixExpression = matrixExpression;

        System.Threading.Thread.MemoryBarrier();

        return toReturn;
    }

    protected override double[,] Internal_Evaluate()
    {
        var matrixExpression = this.MatrixExpression;

        var matrix = matrixExpression.Evaluate();

        var length_0 = matrix.GetLength(0);
        var length_1 = matrix.GetLength(1);

        var toReturn = new double[length_1, length_0];

        for (long i_0 = 0; i_0 &lt; length_0; ++i_0)
        {
            for (long i_1 = 0; i_1 &lt; length_1; ++i_1)
            {
                toReturn[i_1, i_0] = matrix[i_0, i_1];
            }
        }

        return toReturn;
    }
}
</code></pre>

<p>In general, keep <code>Expression&lt;&gt;</code>-definitions slim.  New operations shouldn't be additional methods within other classes, but rather each get its own <code>Expression&lt;&gt;</code>, e.g. as we effectively added a <code>.Transpose()</code> method via the <code>class TransposedMatrixExpression</code> above.</p>

<blockquote>
  <h3>Note: Classes and methods are the same thing.</h3>
  
  <p><em>This may be confusing, so I'm quote-boxing it out: you can ignore this point if it doesn't make sense.</em></p>
  
  <p>C# methods and C# classes are logically equivalent, if we ignore some variation in presentation and implied implementation details.  To better understand this, you might look into how anonymous C# methods get their own C# class in the runtime.</p>
  
  <p>Once you understand their equivalence, it'll help frame why we define methods as classes, e.g. as with <code>.Transpose()</code> above.</p>
</blockquote>

<hr>

<h3>Tips</h3>

<ol>
<li><p>Put operator definitions, e.g. <code>+</code>, into a <code>partial class Expression&lt;&gt;{ }</code> block, as we did for <code>+(Expression&lt;double&gt;, Expression&lt;double&gt;)</code> above.</p></li>
<li><p>My coding style may look verbose.  I've left a lot of room for things that I suspect most people will want to add as they develop a project like this.  I'd advise against trying to make it shorter for a long time, until you get several steps beyond this.</p></li>
<li><p>It may feel weird to have <code>ConstantExpression&lt;T&gt;</code>'s getting trivially <code>.Evaluate()</code>'d to the <code>T .ConstantValue</code> that they wrap.  You may feel inclined to try to reduce overhead by, for example, defining a variant of <code>AdditionExpression</code> that works on a <code>T</code> and an <code>Expression&lt;T&gt;</code>, rather than two <code>Expression&lt;T&gt;</code>'s, to help reduce unnecessary method calls.  If you feel strongly about trying this, then it can be a good learning experience – but, it's a mistake.</p></li>
</ol>

<hr>

<h3>Next steps.</h3>

<p>Obviously, there's a lot to play with here.  That's a lot of fun!</p>

<p>Then you can also do stuff like:</p>

<ol>
<li><p>Creating graphical interfaces for <code>Expression&lt;&gt;</code>'s.</p>

<ul>
<li>I originally did this with WPF.  I'd suggest coding it purely in C#; ignore the XML interface.</li>
</ul></li>
<li><p>Add in symbolic logic.</p></li>
<li><p>Extend the logic beyond math into general programming structures.</p></li>
<li><p>Add in calculus, differential equations, etc..</p></li>
<li><p>Hoist the whole thing onto a custom evaluation engine.</p>

<ul>
<li>At first, stick with just having an <code>Expression&lt;&gt;</code>-tree doing depth-first <code>.Evaluate()</code>-ing, as above.</li>
</ul></li>
</ol>
    </div>