<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Instead of adding back to the list to maintain an accumulator (the current minimum in this case), I'd just add a second parameter to the function, and allow it to default to <code>None</code>:</p>

<pre><code># acc, the accumulator, represents the current lowest found
def my_minimum(lst, acc = None):
   if not lst: # If the list is empty, return the current lowest
      return acc

   # Head is the first element, and the tail is the rest of the list
   # This is a common pattern when recursively iterating a list
   head, *tail = lst

   # The first time this is run, "not acc" fails, and it defaults to head
   new_acc = head if not acc or head &lt; acc else acc

   return my_minimum(tail, new_acc)

lst = [2, 3, 4, 9, 2, -2]

print(my_minimum(lst))
-2
</code></pre>

<p>Note though that <code>head, *tail = lst</code>, is quite inefficient, as it requires making an entire copy to construct <code>tail</code>. I'm using it here for brevity.</p>
    </div>