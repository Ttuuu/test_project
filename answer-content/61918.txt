<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>A riff on @200_success answer</strong></p>

<pre><code>// value is the base-score for that level
public enum Difficulty {
    Beginner = 0,
    Easy     = 100,
    Medium   = 500,
    Hard     = 1500
}

void IncreaseScore() // yeah, needs a different name
                     // increasing difficulty, not the score
{
    Difficulty NewDifficulty = 
         (Score &lt;  Difficulty.Easy)    ? Difficulty.Beginner
       : (Score &lt;= Difficulty.Medium)  ? Difficulty.Easy
       : (Score &lt;= Difficulty.Hard)    ? Difficulty.Medium
       :                                 Difficulty.Hard;

    // One-way ratchet: difficulty can only increase, even if the
    // score subsequently drops.
    if (NewDifficulty &lt; CurrentDifficulty)
    {
        CurrentDifficulty = NewDifficulty;
    }
}
</code></pre>

<ul>
<li>Defines levels for use everywhere. </li>
<li>Encapsulates the actual values associated w/ the levels</li>
<li>Useful throughout the application where ever the score-level needs to be used</li>
<li><em>Explicitly</em> defines an initial state</li>
<li>Eliminates all magic numbers as seen in several other answers</li>
<li>No need for intermediate <code>int</code>s - which were essentially redefining the difficulty values.</li>
<li>A single point of change ( the enum ) when level values change</li>
</ul>
    </div>