<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>            for ($j = $i; $j &lt; count($array); $j++) {
                $array[$j] = $array[$i];
            }
</code></pre>
</blockquote>

<p>PHP has built-in functions for this:  </p>

<pre><code>            array_pad(array_slice($array, 0, $i + 1), $length + 1, $array[i]);
</code></pre>

<p>or </p>

<pre><code>            $firstZero = $i + 1;
            $zeroCount = count($array) - $i;
            $suffix = array_fill($firstZero, $zeroCount, $array[$i]);
            $array = array_splice($array, $firstZero, $zeroCount, $suffix);
</code></pre>

<p>This also doesn't copy <code>$array[$i]</code> over <code>$array[$i]</code> which may be harmless in terms of effect but is a waste.  </p>

<p>Consider renaming <code>$length</code> to something like <code>$last</code>, as it isn't the length but the zero-indexed location of the last value.  </p>

<p>We can actually simplify the whole function to </p>

<pre><code>    $firstZero = array_search(0, $array, true);
    $lastNonZero = $firstZero - 1;
    if ($firstZero &gt; 0) {
        array_pad(array_slice($array, 0, $firstZero), count($array), $lastNonZero);
    }

    return $array;
</code></pre>

<p>I find this more readable as to what it is doing.  We're finding the first index of a zero element and thus the last index of a non-zero element.  If the first element isn't already zero, we fill all the elements starting with the zero element with the last non-zero value.  </p>

<p>The described inputs always include a zero in the array.  But if someone passes an array without a zero, <code>false</code> is not greater than zero, so it just returns the original array.  If you prefer, you could write this explicitly as </p>

<pre><code>    if ($firstZero !== false &amp;&amp; $firstZero &gt; 0) {
</code></pre>

<p>or </p>

<pre><code>    if ($firstZero === false) {
        return $array;
    }
</code></pre>

<p>But the behavior will be correct without that.  </p>

<p>It also may be faster, as the built-in functions are often faster than the manual versions.  </p>
    </div>