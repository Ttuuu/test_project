<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The code does not look appetizing, readable.</p>

<p>I reduced the conditionals which indeed brought some structure into the whole:</p>

<pre><code>red = 0
green = 0
black = 0

    c1 = listc[1][j]
    if c1 &lt;= lista[3][i] or c1 &gt;= lista[2][i]:
        if lista[0][i] == listc[0][j]:
            c2 = listc[2][i]
            if lista[8][i] == 'intended value':
                if lista[6][i] &lt;= c1 &lt;= lista[7][i]:
                    red += c2
                if lista[2][i] &lt;= c1 &lt;= lista[6][i]:
                    green += c2
            else:
                if lista[7][i] &lt;= c1 &lt;= lista[3][i]:
                    red += c2
                if lista[2][i] &lt;= c1 &lt;= lista[7][i]:
                    green += c2
            if lista[3][i - 1] &lt;= c1 &lt;= lista[2][i]:
                black += c2
</code></pre>

<p>The variables red, green, black to be initialized at the start of the for-i step.</p>

<p>Notice the <em>between</em> expression <code>... &lt;= ... &lt;= ...</code>, a pearl in the Python language.</p>

<p>Introducing variables, especially with good names enormously helps in reading, and simplifies all. Unfortunately here it does not seem to work for indices 6, 7, 2, 6 etcetera.</p>

<p>The algorithm could have been smaller, without repetitive <code>[i]</code> and <code>[j]</code>, when one would not have lista and listc with <code>[column][row]</code> but <code>[row][column]</code>. That is not doable without altering too much.</p>

<p>But one could make columns with meaningful names (<em>not</em> <code>lista3</code>):</p>

<pre><code>lista3 = lista[3]
...
</code></pre>
    </div>