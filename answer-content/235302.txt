<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>your non-common code is the line with the formula, so this is what you have to move to the outside,
and pass as a parameter.</p>

<pre><code>    public static float Area&lt;T&gt;(IReadOnlyCollection&lt;T&gt; points, Func&lt;T, T, float&gt; func)
    {
        float a = 0;
        for (int i = 0; i &lt; points.Count; i++)
        {
            var p1 = points[i];
            var p2 = points[(i + 1) % points.Count];
            a += func(p1, p2);
        }

        return a * 0.5f;
    }
</code></pre>

<p>And this you can call with</p>

<pre><code>   Area(yourpointVector2list, (p1, p2) =&gt; p1.x * p2.y - p2.x * p1.y)  
   Area(yourpointVector3list, (p1, p2) =&gt; p1.x * p2.z - p2.x * p1.z)
</code></pre>

<p>And since I changed it to ICollection, you can use it with lists and arrays, witout having the code twice.<br>
Using the readonly version documents, the method is not changing the collection. (Works with .NET 4.5 and above)</p>

<p>For your "IsClockwise" you  can apply this pattern yourself.</p>

<p>It will perform a little slower, the delegate call is a little costly,
depending on how often you use it, you will not notice it.</p>

<p>I give you the performance back, at another place</p>

<pre><code>    public static float Area&lt;T&gt;(IReadOnlyCollection&lt;T&gt; points, Func&lt;T, T, float&gt; func)
    {
        float a = 0;
        for (int i = 1; i &lt; points.Count; i++)
        {
            a += func(points[i-1], points[i]);
        }
        a += func(points[points.Count-1], points[0]);

        return a * 0.5f;
    }
</code></pre>

<p>This save the 'mod' operation in each iteration.</p>
    </div>