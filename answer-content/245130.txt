<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>From a short review;</p>
<ul>
<li>You probably want to encapsulate <code>if(matrix === null || matrix.length === 0)</code> into an <code>isValidMatrix</code> function for re-use</li>
<li>I would drop the whole <code>i</code>/<code>j</code> thing and go for variables named after <code>row</code> and <code>col</code></li>
<li>I would collect all the rows and columns with a 0 in one set of loops, and then clear the matrix based on the collected rows and columns in another set of loops.</li>
<li><code>let</code> only declares in the block, so the <code>for(i=0; i&lt;matrix.length; i++){</code> creates a global <code>i</code></li>
<li>I much prefer <code>function setFlag(matrix, i, j) {</code> over <code>const setFlag = function(matrix, i, j) {</code></li>
</ul>
<p>This is my current proposal, I did not test it, but you should get the gist of it;</p>
<pre><code>//This does not catch everything, but it'll do
function isValidMatrix(matrix){
  return !(!matrix || !matrix.length);
}

function setZeroes(matrix) {
  
  if(!isValidMatrix(matrix))
    return [];
  
  const rows = [], cols = [];
    
  for(let row = 0; row &lt; matrix.length; row++){
    for(let col = 0; col &lt; matrix[row].length; col++){
      if(matrix[row][col] === 0){
        rows.push(row);
        cols.push(col);
      }
    }
  }
    
  for(let row = 0; row &lt; matrix.length; row++){
    for(let col = 0; col &lt; matrix[row].length; col++){
      if(rows.includes(row) || cols.includes(col)){
        matrix[row][col] = 0;
      }
    }
  }
}
</code></pre>
<p>For further refinement, <code>rows</code> and <code>cols</code> might/will get multiple times the same value, so to deal with that gracefully you should use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set" rel="nofollow noreferrer">Sets</a> for that.</p>
    </div>