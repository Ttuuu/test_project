<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><code>GetTime</code> and <code>GetDistance</code> look very, <em>very</em> similar. In fact, they're identical, save for how the XML response is parsed:</p>

<blockquote>
<pre><code>Public Function GetDistance(start As String, dest As String)
    '...
    GetDistance = Round(WorksheetFunction.FilterXML(objHTTP.responseText, "//TravelDistance"), 0) &amp; " miles"
End Function

Public Function GetTime(start As String, dest As String)
    '...
    GetTime = Round(WorksheetFunction.FilterXML(objHTTP.responseText, "//TravelDuration"), 0) &amp; " minutes"
End Function
</code></pre>
</blockquote>

<p>This is great news: it means there's an opportunity to slash the total execution time by a third, by reducing the number of REST API calls you need to wait for by as much.</p>

<p>The first step is to remove all redundancies. Ultimately we want the 3 functions to look something like this:</p>

<pre><code>Public Function GetDistance(ByVal start As String, ByVal dest As String) As Double
    GetDistance = VirtualEarthAPI.DistanceMatrix(start, dest).Distance
End Function

Public Function GetTravelTime(ByVal start As String, ByVal dest As String) As Date
    GetTravelTime = VirtualEarthAPI.DistanceMatrix(start, dest).TravelTime
End Function

Public Function GetLatLong(ByVal address As String, ByVal city As String, ByVal state As String, ByVal zip As String) As String
    GetLatLong = VirtualEarthAPI.LocationPoint(address, city, state, zip)
End Function
</code></pre>

<p>Note that the <code>GetDistance</code> function now return a <code>Double</code>, and leave the formatting of that numeric value up to the client (i.e. the worksheet) - knowing that a number representing distance in miles needs to look like <code>123.45 miles</code> is a concern for the consumer of this function, not the function itself. As a bonus with the distances now understood as the numeric values they are by Excel, you can do math on these numbers and calculate average distances if you need to. The <code>NumberFormat</code> for distance could be <code>#,##0.00 "miles"</code>, for example.</p>

<p>Same with <code>GetTravelTime</code>: by returning a <code>Date</code> (using the <code>VBA.DateTime.TimeSerial</code> function to build it from the number of minutes returned by the API), you can have a <code>NumberFormat</code> for these values that looks like <code>hh:mm</code>, and now Excel can perform math on these values, too.</p>

<p>You have all parameters implicitly passed by reference (<code>ByRef</code>), but they should all be passed by value (<code>ByVal</code>); the functions' return type was also implicitly <code>Variant</code> - specifying an explicit return type makes a much cleaner API to use, especially if any VBA code needs to invoke these functions.</p>

<p>You could use a <code>Scripting.Dictionary</code> to cache the responses for <code>DistanceMatrix</code>, keyed with <code>{start}-&gt;{dest}</code> strings that would be easy to lookup from the <code>start</code> and <code>dest</code> arguments: if the dictionary contains that key, you return the cached response; otherwise, you make the HTTP request, cache the response, and return it.</p>

<p>But that's still synchronous, and while caching <code>DistanceMatrix</code> responses would essentially cut 33% of the total update time, we're still looking at almost 40 minutes (extrapolated from "almost an hour") to update, which makes it a lot of work for relatively little gain. The biggest win would be to change the strategy entirely, and replace the user-defined functions with a macro, which might look like this:</p>

<pre><code>Option Explicit
Private macro As New EmployeeTableUpdaterMacro

Public Sub UpdateEmployeeTableAsync()
    macro.ExecuteAsync
End Sub
</code></pre>

<p>The logic would need to move to a new <code>EmployeeTableUpdaterMacro</code> class module that exposes a <code>Public Sub ExecuteAsync()</code> procedure and proceeds to update the data in the employee table using asynchronous HTTP requests, i.e. updating the values as they come, possibly while displaying a <a href="https://rubberduckvba.wordpress.com/2018/01/12/progress-indicator/" rel="nofollow noreferrer">progress indicator</a> (or updating the <code>Application.StatusBar</code>) showing how many requests were sent vs. how many responses were received.</p>


    </div>