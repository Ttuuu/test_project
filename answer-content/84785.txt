<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Approach</strong></p>

<p>It's good that you realized that additional commands can be added (what calculator seriously only needs <code>+</code> and <code>*</code>), and that a programmer should think about how the program can be extended. It's also great that you realized that <code>-x</code> is just <code>+-x</code>. And for a quick solution your approach is fine.</p>

<p>But what if you now want to add <code>^</code> next? Would you just add yet another <code>for</code> loop? Sooner or later this would get really hard to read and maintain (it's already not the easiest to read).</p>

<p>I don't want to suggest a completely different approach, but there are many math parsers out there which you could check out for ideas. </p>

<p>One of the things most of them have in common is that they separate the parsing of the input from the actual calculation of the result. Ideally, the interface of your code would be such that adding new operands is as easy as you just passing an operand and it's functionality and precedence to your code.</p>

<p><strong>Misc</strong></p>

<ul>
<li>Declare your methods explicitly as private or public.</li>
<li>Your code would probably be easier to read if you at least extracted the division to its own method.</li>
</ul>

<p>It could look like this:</p>

<pre><code>private static double computeDivision(String operand) {
    if (!operand.contains("/")) {
        return Double.parseDouble(operand);
    }
    String[] division = operand.split("\\/");
    double divident = Double.parseDouble(division[0]);
    for (int i = 1; i &lt; division.length; i++) {
        divident /= Double.parseDouble(division[i]);
    }
    return divident;
}
</code></pre>
    </div>