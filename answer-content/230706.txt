<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Inconsistency</h2>

<p>This is a minor thing, but I tripped over it when skimming your code:</p>

<pre><code>throw2 = (throws.Length == 1) ? 0 : throws[1];
throw3 = (throws.Length == 3) ? throws[2] : 0;
</code></pre>

<p>Why did you invert one of the ternaries? It'd be easier to read if you kept the same structure, e.g.</p>

<pre><code>throw2 = (throws.Length &gt;= 2) ? throws[1] : 0;
throw3 = (throws.Length &gt;= 3) ? throws[2] : 0;
</code></pre>

<hr>

<h2>Variable juggling</h2>

<p>You're spending a whole lot of effort on putting things in other locations and then putting them back. Look at what happens to the throw data:</p>

<pre><code>public void RecordFrame(params int[] throws)
{
    throw1 = throws[0];
    // In case there is no second number (0) provided when someone throws a strike
    throw2 = (throws.Length == 1) ? 0 : throws[1];
    throw3 = (throws.Length == 3) ? throws[2] : 0;
    frameScore = throw1 + throw2;
    // Store the frame scores in a list as they come in, to be updated with strike and spare bonuses
    tenFrameScores.Add(frameScore);

    // Dynamically populate the JaggedArray tenFrames
    if (throws.Length == 3)
    {
        tenFrames[frame] = new[] { throw1, throw2, throw3 };
    } 
    else
    {
        tenFrames[frame] = new[] { throw1, throw2 };
    }

    // ...
}
</code></pre>

<ol>
<li>You get an array of throws</li>
<li>You define a custom variable for each element of the array</li>
<li>You then merge these custom variables into an array to store them.</li>
</ol>

<p>There's no point to making these separate variables. There is no coding overhead compared to e.g. calling <code>throws[0]</code> (which you already have) as opposed to <code>throw1</code> (which you need to create.</p>

<p>This can be rewritten to a much simpler:</p>

<pre><code>public void RecordFrame(params int[] throws)
{
    tenFrameScores.Add(throws.Take(2).Sum());
    tenFrames[frame] = throws;

    // ...
}
</code></pre>

<p>To be fair, what I have omitted here is the default <code>0</code> assignment to unmentioned throws which may be important down the line, but that is something I will tackle in a subsequent feedback point as I suggest reworking this much further. For the currently mentioned code, it will not throw an exception even if only one throw value was entered.</p>

<hr>

<h2>Storing empty throws</h2>

<p>I disagree that you should store empty throws. I don't mean gutter balls, but rather never-thrown values, such as the second throw in a strike frame, or the third throw in the 10th frame if there was no spare or strike.</p>

<p>By storing them as a <code>0</code> value, you make it harder on yourself to later tell the difference between a gutter ball (an actual <code>0</code> throw) or a non-existent throw.</p>

<p>The reason you should avoid this is that it complicates your strike bonus calculation. Very basically, the logic of a strike is that you add the value of the <strong>next two throws</strong> to the strike's score.<br>
Now, if the next frame is also a strike, and you were to store this second frame as <code>(10,0)</code>, your logic would think that those were the "next two" throws.</p>

<p>That is not the case. The second throw does not exist and does not count.</p>

<p>Compare this to if the second frame is <code>(0,0)</code> (two gutter balls). Here, the second throw <strong>does</strong> exist and it does count towards the "next two throws" after the strike.</p>

<p>By not storing the non-existent throws as zeroes, you could severely cut down on the complexity of your scoring calculation, as you wouldn't need to handle things like "is the second throw also a strike" fringe cases.</p>

<hr>

<h2>No validation</h2>

<p>You aren't really validating any of the input. There are some simple validation checks you could be implementing:</p>

<ul>
<li>Making sure at least 1 throw value is registered for each frame</li>
<li>Making sure no more than 2/3 values are registered for each frame (based on whether it's the 10th frame or not)</li>
<li>Making sure no frame contains more than 10 total score (unless it's the 10th frame, in which case 30 is the maximum)</li>
<li>Making sure no single throw value is lower than 0</li>
<li>Making sure no single throw value is higher than 10</li>
</ul>

<p>Validation can be short or elaborate, and we can argue and disagree which validation is necessary or superfluous; but as a job interviewer I would want to see <strong>some</strong> validation in the code as a matter of good practice.</p>

<hr>

<h2>Lists vs arrays</h2>

<pre><code>private readonly List&lt;int&gt; throws = new List&lt;int&gt;(21); // 21 is the maximum amount of throws.
</code></pre>

<p>One the the main sticking point of using a <code>List&lt;&gt;</code> over an array is that you do not need to pre-emptively specify the collection size. Lists can grow dynamically. It makes little sense to specify a maximum size here.</p>

<p><em>To be fair, I find it weird that the language allows for it, but I suspect this is one of those "it could be done even though no one really needs it" instances, the .Net framework has a few of those.</em></p>

<hr>

<h2>Expected usage inconsistency</h2>

<p>I noticed this in your test cases:</p>

<pre><code>// Test perfect game - SUCCESS! (300)
newGame.RecordFrame(10);
newGame.RecordFrame(10, 0);
newGame.RecordFrame(10);
</code></pre>

<p>I disagree that <code>(10,0)</code> should be a valid throw. You are not allowed to throw a second time in a frame if the first throw was a strike. It's a counterintuitive approach.</p>

<p>That being said, I also slightly disagree with the interface (which is not your fault but I'd still like to point it out), it makes more sense to use explicit parameters with default values here, e.g.:</p>

<pre><code>void RecordFrame(int throw1, int throw2 = 0, int throw3 = 0);
</code></pre>

<p>This enforces that a frame always consists of 1 to 3 throws. Using an <code>int[]</code> allows for 0 or more than 3 values, which is plain wrong.</p>

<p>I know you can't change the requirement you were given, but I think it is still useful to point it out as an improvement nonetheless.</p>

<hr>

<h2>When to calculate the end score</h2>

<p>I disagree with the location you've chosen to do the calculations:</p>

<pre><code>public void RecordFrame(params int[] throws)
{
    // Record frame logic

    if (numberFramesSoFar == 10)    // Ready to calculate a score
    {
        // Scoring logic
    }
}
</code></pre>

<p>Recording frames and calculating scores are two completely separate responsibilities. As an <strong>absolute minimum</strong>, these should've been separated into separate methods just to break up the monolithic method you've ended up with. E.g.:</p>

<pre><code>public void RecordFrame(params int[] throws)
{
    // Record frame logic

    if (numberFramesSoFar == 10)    // Ready to calculate a score
    {
        CalculateFinalScore();
    }
}

public void CalculateFinalScore()
{
    // Scoring logic
}
</code></pre>

<p>But I also disagree with triggering the score calculation during the recording of the tenth frame. It's much more intuitive to do this when the score is being observed:</p>

<pre><code>public void RecordFrame(params int[] throws)
{
    // Record frame logic
}

public int CalculateFinalScore()
{
    // Scoring logic
}

public int Score =&gt; CalculateFinalScore();
</code></pre>

<p>Note that you could cache the calculated score so that accessing the property a second time doesn't retrigger a recalculation, but I'm going to currently dismiss that as a "nice to have" based on more pressing issues with the code you've currently posted.</p>

<p>Nonetheless, if you are interested, here's a basic implementation:</p>

<pre><code>public void CalculateFinalScore()
{
    // Scoring logic

    _calculatedScore = // result from calculation
    _scoreWasCalculated = true;
}

private bool _scoreWasCalculated = false;
private int _calculatedScore = 0;

public int Score 
{
    get
    {
        if(!_scoreWasCalculated)
            CalculateFinalScore();

        return _calculatedScore;
    }
}
</code></pre>

<hr>

<h2>Lack of OOP</h2>

<p>The biggest issue I see in the codebase is that you are not using OOP.</p>

<p>I won't rehash JAD's answer, but he is correct about the public/private issues and some of the scope declarations (class variables vs local variables).</p>

<p>One thing I think hasn't been pointed out yet is that your entire logic relies on arrays and primitives. The only OOP object you've used is the <code>BowlingGame</code> class, which you were forced to use because of the interface in the requirements.</p>

<blockquote>
  <p>They were willing to give me a shot because I am really good at learning new programming languages and am otherwise a solid developer.</p>
</blockquote>

<p>Without trying to be mean, I'm going to disagree here. The low readability of your code is something that is independent of C#. Whatever your existing experience is in, I suspect your code is going to be of equally low readability, which is not what I would associate with a "solid developer".</p>

<p>Please don't take this as an attack - I genuinely don't mean to insult. There's nothing wrong with being a starter. Everyone has to start somewhere, we all had to learn the ropes, I've written worse C# code than yours when I was just beginning. But I would advise you against overselling yourself.<br>
If you overstate your ability and then fail to meet that claim, you're going to be less likely to be hired (if I were your interviewer) compared to if you are humble about your ability but put a genuine effort forward (even if you end up with mistakes).</p>

<p>As this was a job interview, as an interviewer I would conclude that you do not grasp the basics of OOP and are not a good fit for the position of a C# developer. A one year experience requirement is not very much, but in one year a developer should at least be able to apply OOP principles. </p>

<p>You can't be expected to apply OOP perfectly (SOLID etc) even if you had the required one year of experience, but you should at least be using it and in this exercise you didn't really try to implement OOP. </p>

<p>Without intending to sound mean, I can't explain the entirety of OOP and how it could be used for your example, but I will try to get you started on what you can look at (I suggest following some OOP tutorials as StackExchange cannot provide the same level of guidance)</p>

<p>As a basic example, a <code>Frame</code> class would come to mind, where you store the throw information. This allows you to not only work with neatly separated data objects, it also allows for reusable logic such as <code>IsStrike</code> or <code>IsSpare</code> checks.</p>

<p>A rough draft (this is open to many improvements, I'm trying to give you the simplest example to get started):</p>

<pre><code>public class Frame
{
    public List&lt;int&gt; Throws { get; private set; }

    public Frame(List&lt;int&gt; throws)
    {
        if(throws == null || throws.Count() &lt; 1 || throws.Count() &gt; 3)
            throw new ArgumentException("Frames must consist of 1 to 3 throws", "throws");

        if(throws.Any(throw =&gt; throw &gt; 10))
            throw new ArgumentException("A single throw cannot contain more 10 pins");

        this.Throws = throws;
    } 

    public bool IsSpare()
    {
        return this.Throws.Take(2).Sum() == 10;
    }

    public bool IsStrike()
    {
        return this.Throws.First() == 10;
    }

}
</code></pre>

<p>This means you can change all your "value equals 10" checks with a much more readable call to the <code>IsStrike()</code> and <code>IsSpare()</code> methods. Not only is it more readable, it's also more refactor-friendly (though admittedly I don't expect the rules of bowling to be changed anytime soon, the point still stands on principle).</p>

<p>I suggest you follow up with some C# OOP tutorials to learn the finer points of OOP and how to implement it.</p>

<hr>

<blockquote>
  <p>Can someone tell me why? Did I fail to understand what they were really looking for? I thought my code was good because it met all of their stated requirements and does what it's supposed to.</p>
</blockquote>

<p>The code doing what it's supposed to do is not the only measure of a good developer. I can write massively different code files that are treated exactly the same by a compiler, yet are dramatically different in terms of quality.</p>

<p>As a silly but blatant example:</p>

<pre><code>private int poizpdodz(int pdnzfe, int poknsdds)
{
     return pdnzfe + poknsdds;
}

private int Add(int a, int b)
{
     return a + b;
}
</code></pre>

<p>The compiler does not care about method/variable names and both methods will be compiled (and executed) the exact same way, but we can all agree that the second method is much better written.</p>

<p>Furthermore, it's not just about how the code works <em>now</em>, but also how easy it is to maintain the code in the future. A lot of code in the average codebase I work in is not related to the business goal of the specific application, but rather framework/architecture than ensures that any changes that need to be made in the future can be minimized in terms of effort and impact.</p>

<p>In short, there are many more metrics to the quality of code than just "it works".</p>
    </div>