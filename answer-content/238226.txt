<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You write this is a </p>

<blockquote>
  <p>Javascript function to convert SQL resultset to a string</p>
</blockquote>

<p>however that is not true. It's a function that </p>

<ol>
<li>executes an SQL query</li>
<li>converts its result set to a string</li>
<li>(sometimes) closes its DB connection</li>
</ol>

<p>Generally its bad idea to have a function to do more than one thing. Especially the closing of a DB connection that (I presume) is passed in open is very out of place and unexpected to the user of this function, more so because it only happens when the result set of the query is empty. (The last <code>dbConn.close()</code> is never executed).</p>

<p>Conversely the result set is only closed if it isn't empty. I don't know which DB library you are using, so it may be ok, but I doubt it.</p>

<p>Generally you should be using <code>try ... finally</code> blocks to make sure you are closing your resources.</p>

<hr>

<p>Next you have pointless assignments such as <code>col_delim = col_delim;</code> when handling default argument values. All current JavaScript implementations support <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters" rel="nofollow noreferrer">default 
parameters</a>:</p>

<pre><code> function get_sql_string(dbConn, query_string, col_delim = ",", row_delim = "\n") {
</code></pre>

<p>Also look into using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const" rel="nofollow noreferrer"><code>const</code></a>/<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let" rel="nofollow noreferrer"><code>let</code></a> instead of <code>var</code>.</p>

<hr>

<p>Another potential bug is the use of <code>.slice(0, -1)</code>. Besides being inefficient, it assumes that the delimiters are exactly one character long, which may not be the case. At the very least you should be using <code>.slice(0, -col_delim.length)</code>, better would be not to add this final delimiter in the first place. This could be done by collecting the results/lines in arrays and using <code>.join(col_delim)</code>.</p>

<p>String concatenation (especially in a loop) is anyway very inefficient and using <code>join</code> would help here, too.</p>

<hr>

<p>Other than that: Code formatting is very inconsistent. For example:</p>

<ul>
<li><code>if(</code> vs <code>if (</code> </li>
<li><code>if (...){</code> <code>if (...) {</code></li>
</ul>

<p>etc. Choose one style and stay with it (preferably the latter version). Consider using an editor/IDE that can format the code for you.</p>

<hr>

<p>Example reimplentation (untested):</p>

<pre><code>function executeQueryAndFormatResult(dbConn, queryString, colDelim = ",", rowDelim = "\n") {
  try {
    const result = dbConn.executeCachedQuery(queryString);
    return formatResult(result, colDelim, rowDelim);
  } finally {
    if (result) {
       result.close();
    }
  }
}

function formatSqlResult(result, colDelim = ",", rowDelim = "\n") {
   const columnCount = result.getMetaData().getColumnCount();
   const lines = [];
   while (result.next()) {
      const row = [];
      row.length = columnCount; // Allows JS engine to reserve the needed number of entries ahead of time
      for (let i = 1; i &lt;= columnCount; i++) {
         row[i-1] = result.getString(i);
      }
      lines.push(row.join(colDelim));
   }
   return lines.join(rowDelim);
}
</code></pre>

<p>EDIT: Do the columns actually start with index 1? It seems unusual, but I've adjusted my code.</p>
    </div>