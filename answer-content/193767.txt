<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Typically, a character-for-character replacement is best done using <a href="https://docs.python.org/3/library/stdtypes.html#str.translate" rel="noreferrer"><code>str.translate()</code></a>:</p>

<pre><code>strand.translate(str.maketrans('AaTtGgCc', 'TtAaCcGg'))
</code></pre>

<p>However, your situation is trickier, because you also want to map all invalid characters to <code>'x'</code>.  To achieve that, you would need to read the <a href="https://docs.python.org/3/library/stdtypes.html#str.maketrans" rel="noreferrer"><code>str.maketrans()</code></a> documentation carefully, and figure out that you can wrap the mapping in a <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="noreferrer"><code>collections.defaultdict</code></a>.</p>

<pre><code>from collections import defaultdict

DNA_COMPLEMENTS = defaultdict(lambda: 'x', str.maketrans('AaTtGgCc', 'TtAaCcGg'))

def complementary(strand):
    return strand.translate(DNA_COMPLEMENTS)
</code></pre>

<p>Note that <code>lambda: 'x'</code> is a way to make a function that, when called with no parameters, returns the letter <code>'x'</code>.</p>
    </div>