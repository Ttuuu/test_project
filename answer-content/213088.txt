<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>An alternative to defaulting variables by self-assigning with fallback is to use <code>${parameter:=word}</code> at the point of first use:</p>
<pre><code>for dir in ${IGNORED_DIRS:=build .git}; do
</code></pre>

<pre><code>for ext in ${EXTENSIONS:=c cc cpp h hpp}; do
</code></pre>
<p>Actually, since those are the only uses, we could get away with <code>:-</code> expansion, even there.</p>
<p>Also, it makes sense to allow user to specify <em>no</em> ignored dirs and/or no extensions (and we check for that later in the code), so perhaps remove the <code>:</code> from those expansions.</p>
<hr>
<p><code>RULE_GLUE</code> can also be simplified:</p>
<pre><code>RULE_GLUE=${PRUNE_RULES:+-o}
</code></pre>
<p>Again, it's not necessary to name this, but it might aid clarity.  Personally, I'd just add it directly to the end of the <code>PRUNE_RULES</code>:</p>
<pre><code>PRUNE_RULES="${PRUNE_RULES} ${PRUNE_RULES:+-o}
</code></pre>
<p>or just ensure that each prune rule contains its own <code>-o</code> as it should:</p>
<pre><code>for dir in ${IGNORED_DIRS}; do
  PRUNE_RULES="${PRUNE_RULES} -name ${dir} -prune -o"  
done
</code></pre>
<hr>
<p>The name rules can be simplified by starting with with the <code>-false</code> predicate (did you ever wonder what it's useful for?):</p>
<pre><code>NAME_RULES=${EXTENSIONS:+-false}
for ext in ${EXTENSIONS}; do
    NAME_RULES="${NAME_RULES} -o -name '*.${ext}'"
done
</code></pre>
<hr>
<p>It's unspecified whether <code>find</code> expands <code>{}</code> when it's a substring of an argument; the safer POSIX way is to pass it as a positional argument and have the child shell expand it:</p>
<pre><code>    -exec sh -c "printf '${FILE_HEADING}' \"<span class="math-container">\$1\" &amp;&amp; sed 's/^/    /' \$</span>1" -- {} ';'
</code></pre>
<p>It's probably a good idea to only match plain files (including symlinks to plain files), rather than everything that matches the name rules.  Especially if <code>$NAME_RULES</code> is empty, it's quite possible for a directory name to match.</p>
<p>I don't see why we need the explicit <code>sh</code> subshell as the final command (since we expand the "rules" predicates unquoted, so word splitting happens - though we'll need to disable globbing: <code>set -f</code>).  There's no good reason not to <code>exec</code> the final command.</p>
<p>Also, we need to be careful if <code>$FILE_HEADING</code> ever contains <code>'</code>: it might be safer to also pass this as a positional parameter, or to export the variable and have it expanded later:</p>
<pre><code>export FILE_HEADING
</code></pre>

<pre><code>exec find . ${PRUNE_RULES} ${NAME_RULES} -type f
    -exec sh -c 'printf "${FILE_HEADING}" "$1" &amp;&amp; sed "s/^/    /" "$1"' -- {} ';'
</code></pre>
<p>I think that rather than <code>-exec sh</code>, it might be simpler to have two <code>-exec</code> predicates:</p>
<pre><code>... -exec printf "${FILE_HEADING}" {} \; -exec sed 's/^/    /' {} \;
</code></pre>
<p>(and we no longer need to export <code>$FILE_HEADING</code>).</p>
<hr>
<h1>Modified code</h1>
<pre><code>#!/bin/sh

# user-modifiable parameters
FILE_HEADING='## File: %s\n\n'
DEFAULT_IGNORED_DIRS='build .git'
DEFAULT_EXTENSIONS='c cc cpp h hpp'

# end of user variables; code starts here

set -eu  # Usual safety
set -f   # Don't expand pathnames when expanding $NAME_RULES below

for dir in ${IGNORED_DIRS-$DEFAULT_IGNORED_DIRS}; do
    PRUNE_RULES="${PRUNE_RULES-} -name ${dir} -prune -o"  
done

for ext in ${EXTENSIONS-$DEFAULT_EXTENSIONS}; do
    NAME_RULES="${NAME_RULES:--false} -o -name *.${ext}"
done

# We intend word splitting of rules variables
# shellcheck disable=SC2086
exec find -L . ${PRUNE_RULES-} ${NAME_RULES:+'(' $NAME_RULES ')'} -type f \
     -exec printf "${FILE_HEADING}" {} \; \
     -exec sed 's/^/    /' {} \;
</code></pre>
<hr>
<h1>Modified one-liner</h1>
<pre><code>find . -name \*.sh -exec printf '## File: %s\n\n' {} \; -exec sed 's/^/    /' {} \;
</code></pre>
    </div>