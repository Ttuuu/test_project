<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You don't <em>really</em> need to destructure at all, you can simply use props directly if you like</p>
<pre><code>this.props.mesas.map(item =&gt; ...
</code></pre>
<p>example</p>
<pre><code>class Mesas extends Component {
  render() {
    return (
      &lt;div&gt;
        {this.props.mesas.map(function(item) {
          return (
            &lt;div key={item.id}&gt;
              &lt;text&gt;{item.id}&lt;/text&gt;
            &lt;/div&gt;
          );
        })}
      &lt;/div&gt;
    );
  }
}
</code></pre>
<p><em><strong>but</strong></em> if you did want/need to destructure your props, then the correct pattern is</p>
<pre><code>const { mesas } = this.props;
</code></pre>
<p>example</p>
<pre><code>class Mesas extends Component {
  render() {
    const { mesas } = this.props;
    return (
      &lt;div&gt;
        {mesas.map(function(item) {
          return (
            &lt;div key={item.id}&gt;
              &lt;text&gt;{item.id}&lt;/text&gt;
            &lt;/div&gt;
          );
        })}
      &lt;/div&gt;
    );
  }
}
</code></pre>
<p>At this point though there isn't much use in using a class-based component; no component lifecycle functions are used, no constructor, etc... a simpler functional component will do the job <em><strong>and</strong></em> allow you to destructure the props right in the function signature (you can even do this with the array::map callback).</p>
<pre><code>const Mesas = ({ mesas }) =&gt; (
  &lt;div&gt;
    {mesas.map(({ id }) =&gt; (
      &lt;div key={id}&gt;
        &lt;text&gt;{id}&lt;/text&gt;
      &lt;/div&gt;
    })}
  &lt;/div&gt;
);
</code></pre>
    </div>