<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Overall assessment</h1>
<p>For a beginner this is a great start. The use of computed properties is nice- especially with the filtering of players into teams. The selection of colors are ascetically pleasing.</p>
<h1>Suggestions</h1>
<h2>UI</h2>
<h3>Button Labels</h3>
<p>The labels on the top three buttons are <em>Color 1</em>, <em>SCRAMBLE</em> and <em>Color 2</em>, yet it seems that all three lead to some sort of scramble effect. For the first and last buttons it might make sense to each label contain the word <em>Scramble</em>, or else abstract the word <em>Scramble</em> out into a parent container - e.g.</p>
<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;link href="//unpkg.com/tailwindcss@0.5.2/dist/tailwind.min.css" rel="stylesheet"&gt;
&lt;fieldset&gt;
  &lt;legend&gt;Scramble&lt;/legend&gt;
  &lt;button class="btn bg-red text-white rounded-full p-2"&gt;Team 1&lt;/button&gt;
  &lt;button class="btn bg-red text-white rounded-full p-2"&gt;Both Teams&lt;/button&gt;
  &lt;button class="btn bg-red text-white rounded-full p-2"&gt;Team 2&lt;/button&gt;
&lt;/fieldset&gt;</code></pre>
</div>
</div>

<h3>Spacing between player squares and labels</h3>
<p>It would be wise to add some spacing between the squares and the player labels:</p>
<p><a href="https://i.stack.imgur.com/1tLSK.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/1tLSK.png" alt="screenshot with arrow"></a></p>
<h2>JavaScript / VueJS</h2>
<h3>use <code>const</code> as default</h3>
<p>It is wise to use <code>const</code> for declaring variables to avoid accidental re-assignment (e.g. <code>colorsToAssign</code> in <code>scrambleTeam1Colors()</code> and <code>scrambleTeam2Colors()</code>. Then when re-assignment is deemed necessary use <code>let</code> - e.g. <code>positionsToAssign</code> in <code>scrambleTeams</code>.</p>
<h3>Setting up <code>data</code></h3>
<p>The values setup in <code>data</code> are a bit redundant. A <code>for</code> loop could be used for that:</p>
<pre><code>data() {
  const data = {
    players: [],
    colors
  };
  for (let i = 1; i &lt;= 10; i++) {
    data.players.push({
      id: i + 1,
      name: "Player " + i,
      color: colors[(i - 1) % 5],
      position: i - 1
    });
  }
  return data;
},
</code></pre>
<p>where <code>colors</code> is moved out above the <code>export default</code> statement. This allows the <code>players</code> section of <code>computed</code> to be removed completely.</p>
<h3>spreading items into an array</h3>
<p>Instead of calling <code>Array.from()</code> - e.g.</p>
<blockquote>
<pre><code>let positionsToAssign = Array.from(Array(10).keys());
</code></pre>
</blockquote>
<p>the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax" rel="nofollow noreferrer">spread syntax</a> can be used for the same result, without the need to call a function:</p>
<pre><code>let positionsToAssign = [...Array(10).keys()];
</code></pre>
<h3>Swapping values</h3>
<p>instead of this</p>
<blockquote>
<pre><code>temporaryValue = array[currentIndex];
array[currentIndex] = array[randomIndex];
array[randomIndex] = temporaryValue;
</code></pre>
</blockquote>
<p>One could use <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment" rel="nofollow noreferrer">Destructuring assignment</a> to <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#Swapping_variables" rel="nofollow noreferrer">swap variables</a></p>
<pre><code>[array[randomIndex], array[currentIndex]] = [array[currentIndex],  array[randomIndex]];
</code></pre>
<p>However <a href="https://jsperf.com/swap-array-vs-variable/9" rel="nofollow noreferrer">it seems that is slower than other techniques</a> even though the V8 blog claims "<em>Once we unblocked escape analysis to eliminate all temporary allocation, array destructuring with a temporary array is as fast as a sequence of assignments.</em>"<sup><a href="https://v8.dev/blog/v8-release-68#performance" rel="nofollow noreferrer">1</a></sup>. There is a "hack" suggested in <a href="https://stackoverflow.com/a/16201730/1575353">this SO answer by showdev</a> that <a href="https://jsperf.com/swap-array-vs-variable/9" rel="nofollow noreferrer">appears to be the fastest method to swap variables</a>:</p>
<pre><code>array[randomIndex] = [array[currentIndex], (array[currentIndex] = array[randomIndex])][0];
</code></pre>
<p>This eliminates the need for â€˜temporaryValue`.</p>
<h3>Decrement operator</h3>
<p>Decrement by one can be simplified using a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Decrement" rel="nofollow noreferrer">decrement operator <code>--</code></a> - e.g. from</p>
<blockquote>
<pre><code>currentIndex -= 1;
</code></pre>
</blockquote>
<p>To:</p>
<pre><code>currentIndex--;
</code></pre>
    </div>