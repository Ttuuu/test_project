<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code># fall back on defaults
BLINK_DIGITS=${BLINK_DIGITS:-5}
BLINK_INTERVAL=${BLINK_INTERVAL:-0.5}
BLINK_QUIT=${BLINK_QUIT:-q}
BLINK_INCREMENT_DIGITS=${BLINK_INCREMENT_DIGITS:-l}
BLINK_DECREMENT_DIGITS=${BLINK_DECREMENT_DIGITS:-h}
BLINK_DECREMENT_TIME=${BLINK_DECREMENT_TIME:-j}
BLINK_INCREMENT_TIME=${BLINK_INCREMENT_TIME:-k}
</code></pre>
</blockquote>

<p>This is exactly the right way to do this.  Good job.</p>

<hr>

<blockquote>
<pre><code># activate extended regex
shopt -s extglob
</code></pre>
</blockquote>

<p>Is this even needed?</p>

<hr>

<blockquote>
<pre><code>generate_number() {
  gen=
  while (( ${#gen} &lt; $BLINK_DIGITS )); do
    gen=$gen$RANDOM
  done
  echo ${gen:0:$BLINK_DIGITS}
}
</code></pre>
</blockquote>

<p>This is biased because the first digit of <code>RANDOM</code> will rarely be zero, and the maximum value of 32767 means you get more 1-3 than 4-9.  Keep only the ones digit: it nearly eliminates the bias and avoids the need to truncate at the end.</p>

<pre><code>for (( i=0; i &lt; BLINK_DIGITS; ++i )); do 
    gen+=$(( RANDOM % 10 )); 
done
</code></pre>

<hr>

<blockquote>
<pre><code>center_vertically() {
  print_header
  lines=$(tput lines)
  for (( i = 0; i &lt; $lines/2; i++ )); do
    printf "\n"
  done
}
</code></pre>
</blockquote>

<p>You can use the <code>LINES</code> variable here with a <a href="https://stackoverflow.com/questions/5349718/how-can-i-repeat-a-character-in-bash"><code>printf</code> idiom to repeat a character</a> (which only works with constants because <code>{1..n}</code> doesn't allow variables):</p>

<pre><code>printf -vblank "\n%.0s" {1..1000}
echo "${blank:0:LINES/2}"
</code></pre>

<hr>

<blockquote>
<pre><code>print_spaces() {
  eval "printf ' %.0s' {1..$1}"
}
</code></pre>
</blockquote>

<p><code>printf</code> can repeat spaces natively, by supplying a width to <code>%s</code>.  This function can be reused by <code>center_horizontally()</code>:</p>

<pre><code>print_spaces() { printf "%${1}s" ""; }

center_horizontally() { print_spaces $(( ( COLUMNS - ${#1} ) / 2 )); }
</code></pre>

<hr>

<blockquote>
<pre><code>trim=$(( ${#right} - ${#wrong} ))
…
max_length=$(( ${#score_plus} &gt; ${#score_minus} ? ${#score_plus} : ${#score_minus} ))
</code></pre>
</blockquote>

<p>You can assign inside expresssions: </p>

<pre><code>(( trim = ${#right} - ${#wrong} ))
(( max_length = ${#score_plus} &gt; ${#score_minus} ? ${#score_plus} : ${#score_minus} ))
</code></pre>

<hr>

<blockquote>
<pre><code>decrement_time() {
  BLINK_INTERVAL="${BLINK_INTERVAL::$((${#BLINK_INTERVAL}-1))}$((${BLINK_INTERVAL:$((${#BLINK_INTERVAL}-1))} - 1))"
  (( ${BLINK_INTERVAL:$((${#BLINK_INTERVAL}-1))} == 0 )) &amp;&amp; BLINK_INTERVAL="${BLINK_INTERVAL}9"
}

increment_time() {
  (( ${BLINK_INTERVAL##0.} == 9 )) &amp;&amp; return 1
  BLINK_INTERVAL=${BLINK_INTERVAL%%[1-9]*}$((${BLINK_INTERVAL##0.*(0)} + 1))
  (( ${BLINK_INTERVAL:$((${#BLINK_INTERVAL} - 1))} == 0 )) &amp;&amp; BLINK_INTERVAL=${BLINK_INTERVAL/0.0/0.} &amp;&amp; BLINK_INTERVAL=${BLINK_INTERVAL%%0}
}
</code></pre>
</blockquote>

<p>This is really ugly and it fails if the user provides an integer value for <code>BLINK_INTERVAL</code>.  </p>

<p>You could take a value in milliseconds (or tenths of seconds) and manipulate that; it would be pure bash but still kind of ugly.  I think the best solution is to use a tool that does floating point calculations.  <code>bc</code> is suitable but not installed by default on some distributions.  <code>awk</code> is up to the task and universally available.  </p>

<p>Put the logic in a single function.</p>

<pre><code>adjust_time() { 
    BLINK_INTERVAL=$( awk -vb=$BLINK_INTERVAL -voffset=$1 'BEGIN { print b + offset/10 }' ) 
}

increment_time() { 
    adjust_time 1
}

decrement_time() { 
    adjust_time -1
}
</code></pre>

<hr>

<blockquote>
<pre><code>printf "$selected_time_interval$(print_spaces $(( $cols - ${#selected_time_interval} - $max_length )))$score_plus\n"
printf "$string_length$(print_spaces $(( $cols - ${#string_length} - $max_length )))$score_minus"
</code></pre>
</blockquote>

<p>Let <code>printf</code> handle the spacing for you.  It's a bad habit to put variable data inside the format string; use <code>%s</code> instead:</p>

<pre><code>printf "%s%$(( COLUMNS - ${#selected_time_interval} - max_length ))s%s\n" $selected_time_interval "" $score_plus
printf "%s%$(( COLUMNS - ${#string_length} - max_length ))s%s" $string_length  "" $score_minus
</code></pre>

<hr>

<blockquote>
<pre><code>while [[ "$answer${answer+xxx}" != "xxx" ]]
</code></pre>
</blockquote>

<p>This is hacky.  Just test the length of <code>answer</code>:</p>

<pre><code>while (( ${#answer} ))
</code></pre>

<hr>

<blockquote>
<pre><code>      (( BLINK_DIGITS &lt; $cols - 1 )) &amp;&amp; (( BLINK_DIGITS++ ))
</code></pre>
</blockquote>

<p>Use <code>COLUMNS</code>, then it remains correct even if the user resizes the terminal during a run.</p>

<hr>

<blockquote>
<pre><code>   if (( $answer == $number )); then
     (( right++ ))
   else
     (( wrong++ ))
   fi
</code></pre>
</blockquote>

<p>This can be condensed to one expression.  <code>$</code> inside <code>(( … ))</code> are not needed for simple variables that contain a number.</p>

<pre><code>(( answer == number ? right++ : wrong++ ))
</code></pre>

<hr>

<blockquote>
<pre><code>(( $? == 0 )) &amp;&amp; quit || exit
</code></pre>
</blockquote>

<p>Expressions test for zero by default.  This could be shortened to:</p>

<pre><code>(( $? )) &amp;&amp; exit || quit
</code></pre>

<p>But all <code>quit</code> does is clear the screen and exit normally.  Just attach <code>clear</code> to the loop, and the <code>quit</code> function can go away.</p>

<pre><code>while (( ${#answer} )); do 
    …
done &amp;&amp; clear
exit
</code></pre>

<hr>

<p>Finally, tell bash to exit on undefined variables, because you shouldn't have any:</p>

<pre><code>set -u
</code></pre>
    </div>