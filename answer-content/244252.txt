<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<p>I have question about scope yesterday, and someone gives an answer to don't return anything in scope. Is return something in scope really bad practice?</p>
</blockquote>
<ul>
<li><p>This is because laravel is handling "it" for you.</p>
</li>
<li><p>getSelect2Format is not the best name since you are not handling formatting but apply a specific set of rules relevant to select2 js plugin.</p>
</li>
<li><p>I would suggest a repository class or a helper class to handle this task.</p>
</li>
<li><p>Your code is messy, very long lines too, which is hard to read! I would suggest following PSR-12.</p>
</li>
<li><p>I would suggest using <code>response()</code> or just <code>return $data</code> in controller class methods.</p>
</li>
<li><p>I would also suggest early returns in your methods to reduce nesting hence easy reviewing by reviewers.</p>
</li>
<li><p>suggest not using <code>-&gt;get()</code> in a method unless you are absolutely certain on what method should do. i.e. you might want to apply a scope to this query  later on.</p>
</li>
<li><p>I suggest passing request data into the class to make it easier to test. Also, the less your class knows about other parts of the system the better.</p>
</li>
<li><p>Dont you have to use DB::raw for <code>$column.' as text'</code>?</p>
</li>
</ul>
<pre><code>class select2Filters
{
    public static function apply(
        Model $model, 
        array $data, 
        string $column = 'name', 
        int $limit = 5
    ) {
        $filter = Arr::get($data, 'filter');
    
        return $model::selectRaw(['id', "{$column} as text"])
             -&gt;where($column, 'like', "%{$data['q']}%")
             -&gt;when(is_array($filter), function($query) use ($filter) {
                 $query-&gt;where(Arr::only($filter, $model::filterable)); 
             })
             -&gt;orderBy($column, 'asc')
             -&gt;limit($limit)
             -&gt;get();
    }
}
</code></pre>
<p>I would also suggest adding an interface to each model that should have support for <code>select2Filters</code>. That interface should inforce <code>filterable</code> variable.</p>
<p>I would personally not use <code>static</code>, that way you can add configuration methods, i.e. setLimit(). OR use data struct class to contain data needed for <code>select2Filters</code> class.</p>
    </div>