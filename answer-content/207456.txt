<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Welcome on Code Review</p>

<h1>Generalities</h1>

<h3>Includes</h3>

<p>You don't need <code>#include &lt;stdlib.h&gt;</code> in <code>linkedlist.h</code>, so remove it and instead, just add it in <code>linkedlist.c</code>  right after <code>#include linkedlist.h</code>.</p>

<h3>Name collisions</h3>

<p>I'll discuss no more this subject after but be aware that names like <code>node</code>, <code>list</code>, <code>size</code> or <code>clear</code> for example, are very usual and subject to collisions. Consider using more robust names, maybe with a prefix.</p>

<h3>Usable interface</h3>

<p>Since the user look at your header file to know how to use your functions, a good habit is to to name the arguments, that's make the interface more explicit. Furthermore, adding documentation as comments about your interface help them to use it correctly.</p>

<h3>Use the <code>const</code> keyword</h3>

<p>Read <a href="https://softwareengineering.stackexchange.com/questions/204500/when-and-for-what-purposes-should-the-const-keyword-be-used-in-c-for-variables">this</a> and <a href="https://wiki.sei.cmu.edu/confluence/dosearchsite.action?queryString=const" rel="nofollow noreferrer">this</a> to know when et how.</p>

<h3>Assertions and error-checking</h3>

<p>You <em>could</em> use assertions to check preconditions, postconditions and invariants. It make your code more explicit and you avoid possibly broke you code when modifying.</p>

<ul>
<li><p><a href="https://ptolemy.berkeley.edu/~johnr/tutorials/assertions.html" rel="nofollow noreferrer">How to use assertions in C</a></p></li>
<li><p><a href="https://barrgroup.com/Embedded-Systems/How-To/Use-Assert-Macro" rel="nofollow noreferrer">How and When to Use C's assert() Macro</a></p></li>
<li><a href="https://stackoverflow.com/questions/1081409/why-should-i-use-asserts">Why should I use asserts?</a> (for C++ but still applicable)</li>
</ul>

<hr>

<h1><code>struct node</code></h1>

<h3><code>[typedef] struct [tag] { ... } [alias];</code></h3>

<p>Personally, I try to avoid to use sames ''<em>struct tag</em>'' and ''<em>typedef name</em>'' if I have to typedef a <code>struct</code>. It's completely a <a href="https://stackoverflow.com/a/20552739/2644192">matter of taste</a>, since "<em>modern</em>" compilers (for more than 20 years)  can handle this easily, but so, user know when he work with the tag or the alias. </p>

<p>But there are many others "conventions":</p>

<ul>
<li><a href="https://stackoverflow.com/a/252810/2644192">Some</a> prefer "<em>untagged aliased <code>struct</code></em>" (if there are no self-referencing members). </li>
<li>Where <a href="https://stackoverflow.com/a/4566358/2644192">others</a> says to <a href="https://www.kernel.org/doc/html/v4.10/process/coding-style.html#typedefs" rel="nofollow noreferrer">never</a> typedef a <code>struct</code>. </li>
<li>...</li>
</ul>

<h3>Consistency</h3>

<p>No matter <a href="https://stackoverflow.com/questions/180401/placement-of-the-asterisk-in-pointer-declarations">where you place asterisk</a> for pointers, try to be consistent through your code:</p>

<pre><code>void* data;
    ^ LEFT-ALIGNED
struct node *next;
            ^ RIGHT-ALIGNED
</code></pre>

<p>(<a href="https://www.quora.com/Where-should-I-put-the-asterisk-for-pointers-in-C++-Is-it-int*-ptr-int-*-ptr-or-int-*ptr" rel="nofollow noreferrer">here</a> is another talk on this endless debate)</p>

<p>So <strong>IMHO</strong>, this is cleaner:</p>

<pre><code>typedef struct node node_t;
typedef node_t* node_ptr;

struct node {
    void* data;
    node_ptr next;
    node_ptr prev;
};
</code></pre>

<hr>

<h1><code>struct List</code></h1>

<h3>Consistency</h3>

<p>The first letter of the <code>struct node</code> is <strong>lowercase</strong>, while the first of the <code>struct List</code> is <strong>uppercase</strong>.</p>

<h3>Variables declaration</h3>

<p>Try to don't declare several variables on the same line, it will avoid you <a href="https://wiki.sei.cmu.edu/confluence/display/c/DCL04-C.+Do+not+declare+more+than+one+variable+per+declaration" rel="nofollow noreferrer">many problems</a>.</p>

<pre><code>typedef struct list list_t;
typedef list_t* list_ptr;

struct list {
    node_ptr head;
    node_ptr tail;
};
</code></pre>

<hr>

<h1><code>init_list()</code>, <code>push_back()</code>, <code>push_front()</code></h1>

<ul>
<li><p>There's no need to cast the return type of <code>malloc</code> from <code>void*</code> since it's implicitly converted to any pointer type. </p></li>
<li><p>You can also omit the <code>struct</code>  as you aliases it.</p></li>
<li><p>Optionally, you could make more concise using <code>calloc</code> and rid of the manual initialization of <code>next</code> and <code>prev</code> (with few costs).</p></li>
<li><p>Since you have a <code>free_list</code> function, consider renaming <code>init_list</code> to  <code>alloc_list</code></p></li>
<li><p>For <code>push_*</code> function, you should use <code>sizeof *list-&gt;head</code>  instead of using the type. It's easier to maintain. (e.g. if you modify the node type latter, the change here is automatic)</p></li>
<li><p>For <code>push_*</code> function, you <em>could</em> return an <code>int</code>, an <code>enum</code> or a <code>bool</code> (via <code>&lt;stdbool.h&gt;</code>)  to indicate the success of the insert (since the <code>malloc</code> can fail) or a pointer to the new created node (and so <code>NULL</code> in case of fail). No matter how but <strong>you should always handle errors when using <code>malloc</code></strong></p></li>
</ul>

<h1><code>pop_back()</code>, <code>pop_front()</code></h1>

<ul>
<li>I find multiples assignments on same line less readable, but that's my opinion.</li>
<li><em>For info: On some not-wide-used platforms (PalmOS, 3BSD, and other non ANSI-C compatibles), you should check for NULL before freeing to avoid crashes.</em></li>
</ul>

<h1><code>clear()</code></h1>

<ul>
<li>You could rewrite the cleaning algorithm to be more efficient since you discard return values.</li>
</ul>

<h1><code>free_list()</code></h1>

<ul>
<li>Simply use <code>clear</code> before freeing, to avoid code duplication.</li>
</ul>
    </div>