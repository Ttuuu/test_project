<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Stop it. Just stop it. Unless you have some kind of unusual performance requirements, <strong>keep it simple</strong>:</p>

<pre><code>/// &lt;summary&gt;
/// Regular expression pattern that matches strings containing only Unicode
/// letters, digits, and hyphens.
/// &lt;/summary&gt;
public static Regex AllUnicodeLettersNumsHyphen = new Regex(@"^[\p{L}\p{Nd}-]*$");

public static bool IsValid(string s)
{
    return (
        s.Length &gt;= 6 &amp;&amp; s.Length &lt;= 16
        &amp;&amp; AllUnicodeLettersNumsHyphen.IsMatch(s)
        &amp;&amp; s.Count(c =&gt; c == '-') &lt;= 1
        &amp;&amp; Char.IsLetter(s, 0)
        &amp;&amp; s[s.Length - 1] != '-'
    );
}
</code></pre>

<p>(Those parentheses are optional. I find them visually appealing. Follow your group's coding guidelines on style choices like that.)</p>

<p>Given the requirements you specify, there's no reason for loops, extension methods, or <em>any</em> of that stuff. I promise you that 2 years down the line, anyone reading this code (including you!) will be much happier understanding the 5 liner than your code. The smaller the scope the better when you're reading. It will take someone 30 seconds to fully understand these 6 lines of code. It will take 10 minutes to dive through all yours.</p>

<p>And this isn't any less flexible. In fact it's more so. You can trivially add new rules to this 6 line method. That is <em>not</em> the case with your code. Your patterns require adding 20 extra lines of boilerplate that then has to be tested and presents more opportunities for mistakes.</p>

<p>And look how I dealt with the regular expression impenetrability: </p>

<ul>
<li>Encode as many rules as possible outside the regex.</li>
<li>Only use one fairly simple, <em>appropriately named and documented</em> regex for just the one check: that it matches the character classes. That and a comment are all you need.</li>
</ul>

<hr>

<p>If you are completely dead set against regular expressions, consider this LINQ based alternative:</p>

<pre><code>public static bool IsValid(string s)
{
    return (
        s.Length &gt;= 6 &amp;&amp; s.Length &lt;= 16
        &amp;&amp; s.All(c =&gt; Char.IsLetterOrDigit(c) || '-' == c)
        &amp;&amp; s.Count(c =&gt; c == '-') &lt;= 1
        &amp;&amp; Char.IsLetter(s, 0)
        &amp;&amp; s[s.Length - 1] != '-'
    );
}
</code></pre>
    </div>