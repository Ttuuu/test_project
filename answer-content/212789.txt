<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Complexity</h2>

<p>The sort is about  <span class="math-container">\$O(n log(n))\$</span> depending on the JS engine so this makes your function above <span class="math-container">\$O(n)\$</span></p>

<h2>Redundancies</h2>

<p>Your code is full of redundancies. </p>

<ul>
<li><code>compare</code> and <code>ascending</code> can just be <code>ascending</code> and if you needed <code>descending</code> you would just swap the arguments.</li>
<li>The object named <code>maxObj</code> has redundant naming. The <code>max</code> prefix is not needed in the properties. If you use it for <code>minObj</code> would you thus need to rename the two properties?</li>
<li>Does the max object need the name <code>Obj</code> ?</li>
<li>You ignor the second argument of reduce and then index the array to find it. The indexing is redundant as you already have the value stored in <code>_</code>.</li>
<li>The function <code>getMax</code> is not used.</li>
<li>The <code>()</code> around <code>src[idx] + 1</code> is not needed, the operator <code>+</code> has <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence#Table" rel="nofollow noreferrer">precedence</a> over <code>===</code>  </li>
<li>You can use <code>Math.max</code> if only complexity is important rather than the ternary that only gives a slight performance benefit over <code>Math.max</code></li>
<li>The line <code>maxObj.maxResult = ++maxObj.maxCurrent &gt; maxObj.maxResult ? maxObj.maxCurrent : maxObj.maxResult;</code> is redundant. Each time you call it <code>maxCurrent</code> is always greater than <code>maxResult</code>. Not only is the line redundant but it makes the need for <code>maxObj</code> redundant as well.</li>
</ul>

<h2>Same function without the redundant code</h2>

<p>You can thus remove most of the code, wrap it in a function, use closure to access <code>samples</code> to get 4 line and many fewer objects, arguments, and overhead to do the same thing. More readable and faster, (not less complex)</p>

<p>From about 16 lines to 4 for the same result.</p>

<pre><code>const countConsecutive = arr =&gt; {
    const count = (count, val, i) =&gt; count += val + 1 === arr[i + 1] ? 1 : 0;
    return sample.sort((a, b) =&gt; a - b).reduce(count, 1);
}
</code></pre>

<h2>However</h2>

<p>With all that said I am not sure that the result is correct?</p>

<p>For <code>[1, 100, 2, 90, 3, 88, 4, 9, 5]</code></p>

<blockquote>
  <p><em>"...the longest consecutive element sequence..."</em></p>
</blockquote>

<p>is 5 items.</p>

<p>That makes sense <code>1,2,3,4,5</code> </p>

<p>But you return 7 for <code>[1, 100, 2, 90, 3, 88, 89, 4, 9, 5]</code>?</p>

<p>To me <code>1, 2, 3, 4, 5, 88, 89, 90</code> is not a <em>"consecutive... sequence"</em> ???</p>

<h2>An example solution</h2>

<p>For a <span class="math-container">\$O(n)\$</span> solution you need to join sequences as you find them. </p>

<p>Use a <code>Set</code> to do the lookups (if the next number exists). Iterate the set deleting numbers as you go lets you only check values you have not encountered.</p>

<p>Counting forwards sequences as you find them and storing the result in a map. When the next in a sequence is in the map add to the sequence length.</p>

<p>That brings the solution to <span class="math-container">\$O(2n + m)\$</span> The <span class="math-container">\$2n\$</span> as one pass is needed to create the <code>Set</code> and where <span class="math-container">\$m\$</span> is the number of broken sequences that at max is <span class="math-container">\$n\$</span>. So <span class="math-container">\$O(3n)\$</span> is the same as <span class="math-container">\$O(n)\$</span></p>

<p>There is room for performance improvement as you can do some of the counting as you create the <code>Set</code></p>

<pre><code>const longestSequence = (arr) =&gt; {
    const numbers = new Set(arr), counts = {};
    var max = 1;
    for (const num of numbers.values()) {
        let counting = true, next = num + 1;
        numbers.delete(num);
        while (counting) {
            counting = false;
            while (numbers.has(next)) { numbers.delete(next++) }
            if (counts[next]) { counting = numbers.has(next += counts[next]) }
        }
        max = Math.max(counts[num] = next - num, max);
    }
    return max;
}
</code></pre>
    </div>