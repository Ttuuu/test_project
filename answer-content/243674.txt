<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This code is generally clean and easy to understand, which is good.  Here are some things that may help you improve your code.</p>
<h2>Make sure you have all required <code>#include</code>s</h2>
<p>The code uses <code>sort</code> but doesn't <code>#include &lt;algorithm&gt;</code> and <code>main</code> uses <code>map</code> but doesn't <code>#include &lt;map&gt;</code>.  For portability and immunity from changes to third party libraries, it's best to add includes for all of the functions your code uses, whether or not another library has already included them.</p>
<h2>Add support for multiline comments</h2>
<p>At the moment, if we have a header file which includes this:</p>
<pre><code>// this is comment #1
/* This is comment #2 */
/* 
 * This is a multiline comment #3
 */
</code></pre>
<p>only the first comment is excluded if we specify <code>--remove_comments</code>.</p>
<h2>Use rational return values</h2>
<p>Almost all of your member function return <code>void</code> and take no parameters.  This is highly suspect.  For example, it might be useful for <code>grabAllHeaderFiles</code> to report the number of files processed.  Also, the <code>displayInfo()</code> might benefit from being passed a <code>std::ostream</code> rather than always printing to <code>std::cout</code>.</p>
<h2>Rethink class data members</h2>
<p>Is it really necessary to have all of those data structures only to throw most of them away?  For instance, <code>m_unused_hf</code> could be replaced with a simple counter with no loss of functionality.  Also it appears that the <code>--remove_comments</code> is properly part of <code>HeaderManager</code>, so why is it duplicated in every <code>HeaderFile</code>?  It would probably be better to pass it in as a parameter.</p>
<h2>Rethink the exposed interface</h2>
<p>Only <code>HeaderManager</code> uses <code>HeaderFile</code> so it might make sense to put its definition inside <code>HeaderManager</code>.  Also, the only thing that uses <code>HeaderFile::path()</code> is <code>HeaderFile::extractData()</code>.  Instead of writing this:</p>
<pre><code>std::fstream f{path(), std::ios::in};
</code></pre>
<p>I'd rewrite that as:</p>
<pre><code>std::ifstream f{m_path};
</code></pre>
<p>Also, it seems to me that <code>extractData</code> should be <code>private</code>.</p>
<h2>Consider a more efficient algorithm and data structure</h2>
<p>The <code>removeUnIncludedFiles()</code> is not particularly efficient.  Instead of making <span class="math-container">\$n^2\$</span> comparisons, consider constructing a <code>map</code> and keeping a count of all local include files, as is done for the global include files, would be much simpler.  Another possibility would be to simply keep a global m-ary tree for all files.  Try running your program on <code>/usr/include</code> and see why reducing memory footprint might be a good idea.  On my machine, use uses up the entire stack and crashes.</p>
    </div>