<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A possible solution can be implemented in terms of two different paradigms.</p>

<h2>Look Before You Leap (LBYL)</h2>

<p>You can test if an object supports a certain <em>interface</em> using <code>collections.abc</code>, where <code>abc</code> stands for Abstract Base Classes.
The module provides the <a href="https://docs.python.org/3/library/collections.abc.html#collections.abc.Iterable" rel="noreferrer"><code>Iterable</code> class</a>.
If an object is an instance of that class, it can be considered iterable.
How the object handles this under the hood, we do not care for.
This can be used to test for iterables.</p>

<p>Secondly, there is <code>Mapping</code> to detect types like <code>dict</code>s.
This can go where you currently test for <code>isinstance(item, dict)</code>.</p>

<p>Checking if an object supports what you plan on doing to or with it is the <em>Look Before You Leap</em> style.
Unfortunately, this approach is slower than before.
However, the loss in performance is justifiable in the face of the gained value.
You can now support <em>any</em> iterable anyone can throw at you, and shift the responsibility of handling the actual iteration to them.
Otherwise, you would have to add every conceivable iterable to <code>iterables=(..)</code>.
You already noticed that this is not feasible.</p>

<pre class="lang-py prettyprint-override"><code>from collections.abc import Iterable, Mapping

def deeplen_lbyl(item):
    """Returns the number of non-iterable items in arbitrarily nested iterators.
    """
    if isinstance(item, Iterable) and not isinstance(item, str):
        if isinstance(item, Mapping):
            item = item.values()
        return sum(deeplen_lbyl(subitem) for subitem in item)
    else:
        return 1
</code></pre>

<h2>Easier to ask for forgiveness than permission (EAFP)</h2>

<p>This is an alternative approach, relying on just going ahead and letting things fail, then catching expected errors and handling them.
It is often considered the Pythonic one.
Its large advantage is its flexibility.
If there is a large number of both allowed and disallowed situations, adding all allowed situations to some sort of whitelist (like <code>isinstance</code>) can be tedious.
This is where the ABCs helped in the <em>LBYL</em> style above.
The <em>EAFP</em> style does not rely on ABCs or probing for interfaces.</p>

<pre class="lang-py prettyprint-override"><code>def deeplen_eafp(item):
    """Returns the number of non-iterable items in arbitrarily nested iterators.
    """
    try:
        iter(item)
    except TypeError:
        return 1

    if isinstance(item, str):
        return 1

    try:
        item = item.values()
    except AttributeError:
        pass

    return sum(deeplen_eafp(subitem) for subitem in item)
</code></pre>

<p>In the <code>Iterable</code> class description, it says that calling <code>iter</code> is the only save way of detecting an iterable.
So this is what is done here.
Note that there is also <a href="https://stackoverflow.com/a/61139278/11477374">a different viewpoint to that</a>.</p>

<p><code>TypeError</code> is raised if the object did not like being iterated over.</p>

<p>Now, <code>str</code> passes both <code>isinstance</code> and <code>iter</code> checks, so the guard clause is needed here, too.
It is required to avoid infinite recursion, since <code>str</code> would remain infinitely iterable.</p>

<p>If the <code>values()</code> attribute is not available, a <code>Mapping</code>-like object is not present.
Accordingly, <code>AttributeError</code> is raised, and we keep the original <code>item</code>.</p>

<h2>Performance</h2>

<p>Python has, unlike other languages, cheap error handling. A <code>try</code> block is cheap if it does not raise an exception.
However, the more we run into walls blindly, the more errors are thrown out the behind in the <code>try</code> blocks.
This is slowing that approach down.</p>

<hr>

<p>I did not touch your <code>test_deeplen</code> function.
Using it, all three (yours and the two presented here) functions return the same output.</p>

<p><code>deeplen_lbyl</code> and <code>deeplen_eafp</code> are equally slower than your function, in the ballpark:</p>

<pre><code>deeplen_lbyl:
  0.02510 / iter (10 iter avg, total time: 0.251); sizes:
  bignest: 53676
  arrays:  10010
  lists:   13886
  dicts:   17170
  tuples:  12610

deeplen_eafp:
  0.02497 / iter (10 iter avg, total time: 0.250); sizes:
  bignest: 53676
  arrays:  10010
  lists:   13886
  dicts:   17170
  tuples:  12610

deeplen from question:
  0.01695 / iter (10 iter avg, total time: 0.170); sizes:
  bignest: 53676
  arrays:  10010
  lists:   13886
  dicts:   17170
  tuples:  12610
</code></pre>
    </div>