<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Code Review:</h2>
<p>Please stop doing this:</p>
<pre><code>using namespace std;
</code></pre>
<p>It's a bad habit that will one day cause you lots of grief because it can silently change the meaning of the code. See: <a href="https://stackoverflow.com/a/1453605/14065">Why is “using namespace std” considered bad practice?
</a></p>
<p>Not indenting after <code>public/private</code> makes it very hard to spot the public interface:</p>
<pre><code>class SingleLL{
    private:
    Node * head;
    Node * tail;
    public:
    SingleLL();
};
</code></pre>
<p>Much easier if you had written like this:</p>
<pre><code>class SingleLL{
    private:
        Node * head;
        Node * tail;
    public:
        SingleLL();
};
</code></pre>
<p>The <code>*</code> is part of the type. Put it with the type not half way to the identifier.</p>
<pre><code>Node * head
</code></pre>
<p>Prefer to use the initializer list to initialize member variables.</p>
<pre><code>SingleLL::SingleLL(){
     head = nullptr;
     tail = nullptr;
}
</code></pre>
<p>Like this:</p>
<pre><code>SingleLL::SingleLL()
   : head(nullptr)
   , tail(nullptr)
{}
</code></pre>
<p>If the members had constructors then you would have constructed them before the code block then re-assigned them with the assignment operator. I know it seems trivial but changing types is a common maintenance task. If the type of the object but was expecting the behavior to not change then you now if a non optimal initialization strategy.</p>
<p>Sure this works:</p>
<pre><code>void SingleLL::pushFront(int i)
{
    Node * newNode =new Node;
    newNode-&gt;data=i;
    newNode-&gt;next=head;
    head=newNode;
    if(tail==nullptr)
        tail = head;
}
</code></pre>
<p>But it is very verbose. Why not create and initialize the object in one go?</p>
<pre><code>void SingleLL::pushFront(int i)
{
    head = new Node{i, head};
    if(tail==nullptr)
        tail = head;
}
</code></pre>
<p>I know checking is the nice thing to do.</p>
<pre><code>int SingleLL::topFront()
{
    if(empty())
    {
        cout&lt;&lt;"No element at the front top.\n";
        return 0;
    }
    return head-&gt;data;
}
</code></pre>
<p>But if your code guarantees that the list has values then this becomes a waste of time:</p>
<pre><code>// Here I am checking that the list is not empty before
// entering the loop and getting the value. So the internal
// check is completely wasted.
while(!list.empty()) {
    std::cout &lt;&lt; list.topFront();
    list.popFront();
}
</code></pre>
<p>There are times though when a check should be done. So most containers provide two accesses mechanisms. Both a checked and an un-checked version. It may be worth adding an unchecked version for situations where you don't need to check (like the loop above).</p>
<p>Same comment as above.</p>
<pre><code>void SingleLL::popFront()
{
    if (empty()){
        cout&lt;&lt;"No element to pop.\n";
        return;
    }
    head=head-&gt;next;
    if(head==nullptr)
        tail=nullptr;
}
</code></pre>
<p>I would also note that printing to the output so not a good idea for a generic container. Throw an exception or do nothing.</p>
<p>Sure have a traverse.</p>
<pre><code>void SingleLL::traverse()
    // STUFF
        cout&lt;&lt;ptr-&gt;data;
</code></pre>
<p>But why <code>std::cout</code>? You may not want to print it. Allow the caller to pass in a function and do an operation on the data. Then call the function for each node.</p>
<p>That's a good test.</p>
<pre><code>bool SingleLL::empty()
</code></pre>
<p>But it does not modify the state of the object. So you should mark it as a <code>const</code> method. <code>bool SingleLL::empty() const</code>.</p>
<hr>
<p>Update to implement traverse to show that you can apply an external function to all elements in the list:</p>
<p>Original code:</p>
<pre><code>void SingleLL::traverse()
{
    if (empty())
        cout&lt;&lt;"empty list. add elements";
    Node * ptr =  head;
    while(ptr!=nullptr)
    {
        cout&lt;&lt;ptr-&gt;data;
        ptr=ptr-&gt;next;
    }
}
</code></pre>
<p>Modify to pass function/functor/lambda</p>
<pre><code>// Use a template for the function
// This is because there are several different types that can
// act like a function and you should be able to support all of them.
// --
// If you want to limit this and support only a specific type that
// is possible.
// --
// Alternatively you can use the std::function&lt;void(int)&gt; will
// work just as well and be a specific type that accepts most function
// like objects.
template&lt;typename F&gt;
void SingleLL::traverse(F const&amp; action)
{
    Node * ptr =  head;
    while(ptr!=nullptr)
    {
        action(ptr-&gt;data);
        ptr=ptr-&gt;next;
    }
}
</code></pre>
<p>Now we can call traverse like this:</p>
<pre><code>SingleLL   list;
// Add items.

// Pass a lambda
list.traverse([](int val){std::cout &lt;&lt; val &lt;&lt; " ";});

// Pass a functor
struct Functor {
    void operator()(int val) const {std::cout &lt;&lt; val &lt;&lt; " ";}
};
list.traverse(Functor{});

// Pass a function
void function(int val) {std::cout &lt;&lt; val &lt;&lt; " ";}
list.traverse(&amp;function);

----

// Now the reason in allowing traverse() to have an action ist
// that you can now manipulate the data in the list (not just print it)

list.traverse([](int&amp; val) const {val += 2;}); // Add two to each member.

int  count[2] = {0,0};
list.traverse([&amp;count](int val) const {++count[val%2];}); // Count odd and even values in the list.
</code></pre>
    </div>