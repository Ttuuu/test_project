<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Something else to consider.</p>

<p>It looks like you might be overthinking the problem.  An algorithm to create the checksum digit is very simple.  To check if a number is valid re-create the checksum digit and check if they're the same.  Basically this reduces the validation to 3 small functions:</p>

<pre><code>public class IDNumber
{
    public static bool CheckNumber(string idNumber)
    {
        int truncatedLength = idNumber.Length - 1;
        return idNumber[truncatedLength] == CreateCheckDigit(idNumber.Substring(0, truncatedLength));
    }
    public static char CreateCheckDigit(string acctNumber)
    {
        int sum = 0;
        for (int i = acctNumber.Length - 1; i &gt;= 1; i -= 2)
        {
            sum += Get2DigitSum((acctNumber[i] - '0') * 2) + (acctNumber[i - 1] - '0');
        }

        //an odd number length means that the 0 index isn't evaluated.
        //if the length is even this will evaluate to 0.
        sum += Get2DigitSum((acctNumber[0] - '0') * (acctNumber.Length % 2) * 2);

        //the checksum digit is 10 minus the lastdigit of the sum(sum % 10). 
        //In case the answer is 10 then we need to % 10 again so that the result is 0.
        return (char)(((10 - (sum % 10))% 10) + '0');
    }

    //This will calculate the correct sum for one or two digits.
    static int Get2DigitSum(int num)
    {
        return (num / 10) + (num % 10);

    }
}
</code></pre>
    </div>