<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>By default, Entity Framework will create the foreign key with the name of the entity primary key that is referenced by the navigation property. </p>

<pre><code>// Navigation Propertites //

// (one-to-x) relation 
public User User { get; set; } 

// (many-to-x) relation
public ICollection&lt;User&gt; Users { get; set; }    

// works vice versa 
</code></pre>

<p>For the <code>ForeignKey</code> attribute : </p>

<pre><code>//########### Version 1 ###########
public int UserId { get; set; }

[ForeignKey( "UserId" )] // refer to the UserId (the foreign key) Property
public User User { get; set; }


//########### Version 2 ###########
[ForeignKey( "User" )] // refer to the User Navigation Property
public int UserId { get; set; } // will create this FK with the exact name (UserId)

public User User { get; set; }
</code></pre>

<p>both versions will create a foreign key column named <code>UserId</code>. as it's also, a vice versa configuration. So, you just need to change the name of each <code>ForeignKey</code> attribute to target its correct property. </p>

<p>Also, <code>ForeignKey</code> is handy if you want a custom naming for your foreign keys, but in your case, you're rewriting what entity framework does. If both entities primary key name are the same,then it'll rename it to <code>EntityName_ForeignKeyName</code>. For example, <code>User_Id</code>. Which what you did explicitly.  </p>

<p>I would also suggest using EF fluent API to control the models instead of using <code>Data Annotations</code> attributes. It has more control than attributes, and it's also readable.</p>

<p>you can use <code>OnModelCreating</code> to configure your models with <code>DbModelBuilder</code>. You can create a class to configure all models so you only pass <code>DbModelBuilder</code> to the constructor, something I do with large entities, I love to keep the configuration for the entities in one place. So, it's more flexible. </p>

<p>So, converting your attributes to EF fluent API would be : </p>

<pre><code>public partial class ApplicationDbContext : DbContext
{
    public ApplicationDbContext () : base("name=DbContext")
    {

    }

    public virtual DbSet&lt;Comment&gt; Comments { get; set; }
    public virtual DbSet&lt;Post&gt; Posts { get; set; }
    public virtual DbSet&lt;User&gt; Users { get; set; }

    protected override void OnModelCreating(DbModelBuilder modelBuilder)
    {
        /*
            User 
        */
        modelBuilder.Entity&lt;User&gt;()
            .Property(p =&gt; p.Id)
            .HasColumnName("id")
            .HasColumnOrder(1)
            .HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);

        modelBuilder.Entity&lt;User&gt;()
            .Property(e =&gt; e.FirstName)
            .HasColumnName("first_name")
            .HasMaxLength(100)
            .HasColumnOrder(2)
            .IsUnicode(false);

        modelBuilder.Entity&lt;User&gt;()
            .Property(e =&gt; e.MiddleName)
            .HasColumnName("middle_name")
            .HasMaxLength(100)
            .HasColumnOrder(3)
            .IsUnicode(false);

        modelBuilder.Entity&lt;User&gt;()
            .Property(e =&gt; e.LastName)
            .HasColumnName("last_name")
            .HasMaxLength(100)
            .HasColumnOrder(4)
            .IsUnicode(false);

        // Foreign Keys
        modelBuilder.Entity&lt;User&gt;()
           .HasMany(e =&gt; e.Comments)
           .WithRequired(e =&gt; e.User)
           .HasForeignKey(e =&gt; e.UserId)
           .WillCascadeOnDelete(false);

        modelBuilder.Entity&lt;User&gt;()
           .HasMany(e =&gt; e.Posts)
           .WithRequired(e =&gt; e.User)
           .HasForeignKey(e =&gt; e.UserId);

        /*
            Post 
        */   
        modelBuilder.Entity&lt;Post&gt;()
            .Property(p =&gt; p.Id)
            .HasColumnName("id")
            .HasColumnOrder(1)
            .HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);

        modelBuilder.Entity&lt;Post&gt;()
            .Property(e =&gt; e.Content)
            .HasColumnName("content")
            .HasColumnOrder(2)
            .IsUnicode(false);

        modelBuilder.Entity&lt;Post&gt;()
            .Property(e =&gt; e.Image)
            .HasColumnName("image")
            .HasMaxLength(255)
            .HasColumnOrder(3)
            .IsUnicode(false);

        // Foreign Keys
        modelBuilder.Entity&lt;Post&gt;()
           .HasMany(e =&gt; e.Comments)
           .WithRequired(e =&gt; e.Post)
           .HasForeignKey(e =&gt; e.PostId);

        /*
            Comment 
        */
        modelBuilder.Entity&lt;Comment&gt;()
            .Property(p =&gt; p.Id)
            .HasColumnName("id")
            .HasColumnOrder(1)
            .HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);

        modelBuilder.Entity&lt;Comment&gt;()
            .Property(e =&gt; e.Content)
            .HasColumnName("content")
            .HasColumnOrder(2)
            .IsUnicode(false);   

    }

}   
</code></pre>

<p>For the models structure, it's fine. but I think it can be improved. I think there is no need for <code>Comments</code> and <code>Posts</code> in <code>User</code> and <code>Post</code> for a couple of reasons. The most obvious reason is <code>performance</code>. assume you need to query User entity to get all current users, each user will be stored along with his posts and comments. The more users, the more collections. This would consume a lot of memory and also affect the performance as well, especially with large entities. So, separating entities and keep each one of them store its own data, is a good practice. There are some cases where using collections of other entities is a must, but always rethink about it before including it. Another reason is to minimize the code redundancy. </p>

<p>so, taking your models, we can do this : </p>

<pre><code>public class User
{
    public int Id { get; set; }

    public string FirstName { get; set; }

    public string MiddleName { get; set; }

    public string LastName { get; set; }
}

public class Post
{
    public int Id { get; set; }

    public string Content { get; set; }

    public string Image { get; set; }

    public User User { get; set; }
}


public class Comment
{
    public int Id { get; set; }

    public string Content { get; set; }

    public Post Post { get; set; }

    public User User { get; set; }
}
</code></pre>

<p>and the process would something like this : </p>

<pre><code>var user1 = new User
{
    FirstName = "Bikram",
    LastName = "Bhandari",
};

var user2 = new User
{
    FirstName = "Sabina",
    LastName = "Lamichhane"
};

var user3 = new User
{
    FirstName = "Jack",
    LastName = "Wonderland"
};

var post1 = new Post
{
    User = user1,
    Content = "This post is about fires going on in NSW"
};


var comments = new List&lt;Comment&gt;
{
    new Comment
    {
        User = user1,
        Post = post1,
        Content = "So sad to see this"
    },
    new Comment
    {
        User = user1,
        Post = post1,
        Content = "Let's hope for a rain"
    }
};


applicationDbContext.Users.AddRange(new List&lt;User&gt; { user1, user2, user3 });

applicationDbContext.Posts.Add(post1);

applicationDbContext.Comments.AddRange(comments);

applicationDbContext.SaveChanges();
</code></pre>

<p>The collection then can be used on your business logic where needed.</p>
    </div>