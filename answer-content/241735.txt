<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You can do this in a single loop, only moving forward through the slice when there are no more duplicates at the current position:</p>

<pre><code>func removeAdjacentDups(strings []string) []string {
    // Iterate over all characters in the slice except the last one
    for i := 0; i &lt; len(strings)-1; {
        // Check whether the character next to it is a duplicate
        if strings[i] == strings[i+1] {
            // If it is, remove the CURRENT character from the slice
            strings = append(strings[:i], strings[i+1:]...)
        } else {
            // If it's not, move to the next item in the slice
            i++
        }
    }
    return strings
}
</code></pre>

<p>Input:</p>

<pre><code>[]string{"hello", "hello", "hello", "hi", "hi", "hello", "howdy", "hello", "hello",}
</code></pre>

<p>Output:</p>

<pre><code>[hello hi hello howdy hello]
</code></pre>

<p>Explanation:</p>

<p>At each position, i, you check whether the element next to it, i + 1, is a duplicate. If it is, you replace the current slice by appending everything up to but not including i to everything after i. That is, <strong>you remove the current item</strong>, not the one that duplicates it.</p>

<p>Importantly, this solution handles the case when there are three duplicates in a row, e.g. [ "b", "a", "a", "a", "c"]. It does this by only incrementing the loop counter, i, when no duplicate is found at i + 1. If a duplicate is found and removed, the loop stays in the same position to check for additional copies.</p>

<p>Apologies for resurrecting an old question, but this will likely be useful for others with the same book.</p>
    </div>