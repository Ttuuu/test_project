<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I don't know enough about the shape of <code>testData</code> to write great code, but you could preprocess and convert <code>testData</code> from an array to an object or Map of key-value pairs. By using the first element of each item in <code>testData</code> as the key, then you can convert your <span class="math-container">\$O(n)\$</span> inner "search" loop into a constant time <span class="math-container">\$O(1)\$</span> key lookup. This would reduce your overall complexity from something on the order of <span class="math-container">\$O(n^2)\$</span> to a nicer linear <span class="math-container">\$O(n)\$</span> algorithm.</p>
<p><strong>Note</strong>: This assumes your data has unique values sitting at index 0 of each element in the main array. The difference being your code returns the first match, but the following technically return the last match as duplicate key overwrite existing value(s).</p>
<p>Something like:</p>
<pre><code>var tabData = tabDataRange
  .getValues()
  .reduce((tabData, data) =&gt; ({ ...tabData, [data[0]]: data }), {});
</code></pre>
<p>Then your loop becomes</p>
<pre><code>for (var i = 0; i &lt; sheetData.length; i++) {
  var sheetName = sheetData[i];

  if (tabData[sheetName]) {
    var data = tabData[sheetName];
    var tabProps = [
      tabName = data[0],
      tabVisibility = data[3],
      tabUpdVisibility = data[4],
      tabClearData = data[5],
      tabFormat = data[6],
      tabPosition = data[7],
      tabColor = data[8]
    ];
    break; // &lt;-- found data, break out of loop early
  }
  console.log("tabProps = ", tabProps);
  console.log("tabName = " + tabName);
}
</code></pre>
    </div>