<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>SQL is a set-oriented language. I think to obtain good performance you need to use it in that way. I suggest two temporary tables with the points reachable in one step, then two steps, then three steps etc from the two given points. At each step a new set of points will be inserted into the temporary tables. Something like this:</p>

<pre><code>create table #t1 ( pt unsigned (10 ) )
insert into #t1 (pt) @p1 -- The first given point

create table #t2 ( pt unsigned (10 ) )
insert into #t2 (pt) @p2 -- The second given point

while not exists ( select 1 from #t1 as A inner join #t2 as B where A.pt = B.pt )
begin
  insert into #t1 ( pt )   
  select edge_target from edges as E inner join #t1 as X on E.edge_from = X.pt

  insert into #t2 ( pt )   
  select edge_target from edges as E inner join #t2 as X on E.edge_from = X.pt
end
</code></pre>

<p>This simply finds the distance between the two points (or loops indefinitely if there is no path!), it shouldn't be too hard to modify it to recover the paths.</p>

<p>Just a suggestion, I haven't programmed this myself. The temporary tables should be indexed.</p>
    </div>