<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There is really no need to complicate matters. Keep it as simple as possible.</p>

<p>All you need is to track the word delimiter, in your case it is space and of course the null byte.</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
#include &lt;stdlib.h&gt;
char *reverse(char *string) {
    char *delim=string;
    while(*delim &amp;&amp; *delim!=' '){++delim;}; // &lt;-- this makes delim point to the next word
    if(*delim){  // &lt;-- do this block only if there a next word
        char *retval=malloc(strlen(string)+1);
        *(delim++)='\0';
        char *temp=reverse(delim);
        sprintf(retval, "%s %s", temp, string); // &lt;-- move the first word to the end of the sentence
        free(temp);  // &lt;--  release the temporary storage to avoid serious memory leak
        return retval; // &lt;-- return the newly constructed sentence
    }
    return strdup(string);  // &lt;-- for all others return a copy of the only word or a copy of an empty string.
}
int main(int argc, char *argv[]){
    char sentence[] = "cat is running";
    char *a = reverse(sentence);
    printf("'%s'\n",a);
    free(a);
    return 0;
}
</code></pre>

<p>Notice the line <code>sprintf(retval,"%s %s", reverse(delim),string);</code>? This line will print the string returned by the recursive call to <code>reverse()</code> containing the remaining words in reverse and the first word into <code>retval</code> which is then returned to the previous caller.</p>
    </div>