<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Python 3 classes</h2>
<p>You should omit <code>(object)</code> as the base class for classes in Python 3.</p>
<h2>Re-entrance</h2>
<p><code>changes</code> is a global that's mutated by <code>FolderSyncer</code>, so immediately this is neither re-entrant nor thread-safe. Maybe move the changes list to a member of <code>FolderSyncer</code>.</p>
<h2>Anonymous tuples</h2>
<p>Your <code>changes</code> has a few other issues:</p>
<ul>
<li>The inner lists should be tuples, because - though the outer list changes - the inner items do not.</li>
<li>The inner lists have implied positional significance - item 0 is assumed to be an operation string and item 1 is assumed to be a path. This should be replaced with a class (maybe a <code>@dataclass</code>) with operation and path members.</li>
<li>The operation, being stringly-typed, has no guarantees about constraint to valid values. It should be replaced with an <code>Enum</code>.</li>
</ul>
<h2>Pathlib</h2>
<p>There's a lot to unpack here:</p>
<pre><code>                (self.destination_path / change[1][0].replace(str(self.source_path), "")).replace(
                    self.destination_path / change[1][1].replace(str(self.source_path), "")
                )
</code></pre>
<p>Let's first reformat it so that it's legible by humans:</p>
<pre><code>source_path, dest_path = change[1]

(
    self.destination_path
    / (
        source_path
        .replace(str(self.source_path), "")
    )
).replace(
    self.destination_path
    / (
        dest_path 
        .replace(str(self.source_path), "")
    )
)
</code></pre>
<p>I can only be half-sure that I got that right. That one-liner should be unpacked into probably at least five separate statements, with well-named temporary variables. Otherwise, this is madness.</p>
<p>Further, you're doing a mix of <code>pathlib</code> (good) and string manipulation (not good). Attempt to avoid <code>str()</code> and <code>replace()</code>, and use the path manipulation functions from <code>pathlib</code> to extract what you need.</p>
<h2>Imports</h2>
<p>Rather than writing <code>pathlib.Path</code> all the time, consider just <code>from pathlib import Path</code>.</p>
<h2>Sleep?</h2>
<p>If you're doing this:</p>
<pre><code>time.sleep(1)
</code></pre>
<p>because the console window will disappear if you don't, then there are better solutions that don't pollute your code and hang the program for your user. The reason I'm guessing this is why you sleep is that you have Windows-style example paths.</p>
    </div>