<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Logical inconsistencies</h2>

<p>You create a <code>User</code> object expecting a <code>user_id</code> to be passed to setup the object, id object to this design but im sure you've got it covered, but then later on you ask for a <code>user_id</code> to run a query? </p>

<p>I would leave it in the constructor and use type hiniting (php 7.0 +) to make sure it passed on creation</p>

<pre><code>public function __construct(int $userId) {
    $this-&gt;userId = $userId;
    $this-&gt;get_user_by_id();
}    
</code></pre>

<p>But the type hint should make sure an exception is thrown if it isn't provided correctly!</p>

<h2>PSR2</h2>

<p>The PSR2 is a great coding style guide for php it says you should use <code>camelCase</code> for variable names &amp; function names you should look into it.</p>

<h2>Returning early</h2>

<p>You should return early where you can this makes your code easier to read and less indentation levels</p>

<pre><code>private function get_user_by_id($id) 
{
    if ($id) {
        return false;
    }

    $data   = $this-&gt;db-&gt;row("SELECT user_id, realm, user_name, display_name, created, last_seen, deleted, ignored, blacklisted, whitelisted, blocked, filtered FROM users WHERE user_id = :id", array('id' =&gt; $id));

    if ( !$data ) {
        return false;
    }

    $this-&gt;data($data);

    return $this;    
}
</code></pre>

<h2>Adding more functions to setup a user</h2>

<p>I would create a <code>Service</code> class for your user as your current class is doing both <code>Model</code> work (connecting to the database) and being a "Object". </p>

<pre><code>&lt;?php

namespace SomeNamespace\Services;

use SomeNamespace\Models\Users\GetUserDetails;
use SomeNamespace\Models\Users\GetUserGroupDetails;

class User
{
    // Properties list

    public function __construct(
        GetUserDetails $getUserDetails,
        GetUserGroupDetails $getUserGroupDetails
    ) {
        $this-&gt;getUserDetails = $getUserDetails;
        $this-&gt;getUserGroupDetails = $getUserGroupDetails;
    }

    public function populateData(int $userId)
    {
        $userDetails = $this-&gt;getUserDetails-&gt;get($userId);

        if(empty($userDetails)){
            throw new \Exception("Missing user for id $userId", 1);    
        }

        $groupDetails = $this-&gt;getUserGroupDetails-&gt;get($userId);

        $this-&gt;setupUserDetails($userDetails);
        $this-&gt;setupUserGroupDetails($groupDetails);

        return $this;
    }

    private function setupUserDetails($userDetails)
    {
        $this-&gt;someUserDetails = $userDetails["something"];
    }

    private function setupUserGroupDetails($groupDetails)
    {
        $this-&gt;someGroupDetail = $groupDetails["something"];
    }
}

// GetUserDetails.php

namespace SomeNamespace\Models\Users;

class GetUserDetails
{
    public function __construct()
    {
        $this-&gt;db = some::db::factory();
    }

    // Lots of sql queries
}

// GetGroupDetails.php

namespace SomeNamespace\Models\Users\Groups;

class GetUserGroupDetails
{
    public function __construct()
    {
        $this-&gt;db = some::db::factory();
    }

    // Lots of sql queries
}
</code></pre>

<p>I may be wrong as you seem to be using factories to construct objects instead of dependency injection, but im sure you see where im going with it!</p>
    </div>