<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Since you specifically talked about the <code>buildMaze</code> method, I'll start there.</p>

<p>While the following test may seem useful :
<code>if(!f.exists() || f.isDirectory()) {</code> it's actually already implied by the FileReader so you should skip it.</p>

<p>Don't catch exceptions in the <code>MazeSolver</code> to simply use printStackTrace on them. Let them bubble up until you have a layer that can "deal with them"... in your case, you can deal with them in the <code>main</code> method.</p>

<p>You should also control the validity of the user input as soon as possible, if, for example, the starting position is out of bound you won't detect it before the <code>solve</code> method. Same goes for a starting/ending position that is within a wall.</p>

<p>Also the second case in your switch will give a bad starting position if one of the value is &gt;= 10.</p>

<p>There is multiple pattern in the input. IMO the <code>Scanner</code> (<a href="https://docs.oracle.com/javase/8/docs/api/java/util/Scanner.html" rel="nofollow noreferrer">https://docs.oracle.com/javase/8/docs/api/java/util/Scanner.html</a>) class better fits your use case than a loop with a switch as I'll show below.</p>

<p>Lastly, the reader (now a Scanner) must be closed in the code as, otherwise, resources may leak (well, tbh, the file will automatically be closed upon program termination but it's better to use the "clean" way from the start).</p>

<p>There is basically 2 ways to close the reader :</p>

<ol>
<li>by calling explicitly the close method</li>
<li>by using a <code>try-with-resource</code></li>
</ol>

<p>We won't use the first solution, it's verbose, unpractical when dealing with exceptions and... just booooring ^^</p>

<p>So in the end the code should look like this :</p>

<pre><code>int heightCounter = 0;
try (Scanner sc = new Scanner(file)) {
    width = sc.nextInt(); // this will throw an exception if the next token cannot be parsed as an int
    height = sc.nextInt();
    maze = new char[width][height];
    startX = sc.nextInt();
    startY = sc.nextInt();
    endX = sc.nextInt();
    endY = sc.nextInt();
    sc.nextLine(); // necessary to get rid of the final line-feed
    while (sc.hasNext()) {
        String line = sc.nextLine();
        // same logic than your default case here
    }
    // don't forget to control the start and end position
}
</code></pre>

<hr>

<p>Well, let's move to other parts of your code :</p>

<p>You shouldn't set startX and startY to be static. You only use this to be able to call <code>ms.solve(startX, startY)</code>... to avoid this problem, you could give a <code>solve</code> method that takes no parameters and delegates to your "true" solve like this :</p>

<pre><code>public boolean solve() {
    return solve(startX, startY);
}
</code></pre>

<p>It's pretty neat because this new solve give a better abstraction ; two birds with one stone basically ^^</p>

<p>Doing your conditions like this : <code>if ((solve(XXXX, YYYY)) == true) {</code> is not useful, you should prefer to simply write <code>if (solve(i + 1, j)) {</code> ;)</p>

<p>On a more general note, there is something that bothers me with your architecture :<br>
the <code>MazeSolver</code> is much more than a simple solver : it actually stores the maze it's trying to solve and it's also responsible with the printing.<br>
It's doing way too much.</p>

<p>For the first part, you should consider moving the grid into it's own <code>Maze</code> class, the <code>buildMaze</code> method can be a <code>static method</code> that returns a new <code>Maze</code> from a given file. The <code>MazeSolver</code> will now solve a given maze like this :</p>

<pre><code>MazeSolver solver = new MazeSolver(Maze.buildFrom(filename));
if (solver.solve()) {
    // print something here....
</code></pre>

<p>The <code>Maze</code> may look like this :</p>

<pre><code>public class Maze {
    private char[][] maze;
    private int startX;
    private int startY;
    private int endX;
    private int endY;

    public Maze(final char[][] maze, final int startX, final int startY, final int endX, final int endY) {
        // set the fields here and validates the data
    }

    // getter, setters...

    public static Maze buildFrom(final String filename) throws IOException {
        int heightCounter = 0;
        try (Scanner sc = new Scanner(new File(filename))) {
            int width = sc.nextInt();
            int height = sc.nextInt();
            char[][] maze = new char[width][height];
            int startX = sc.nextInt();
            int startY = sc.nextInt();
            int endX = sc.nextInt();
            int endY = sc.nextInt();
            sc.nextLine(); // necessary to get rid of the final line-feed
            while (sc.hasNext()) {
                String line = sc.nextLine();
                // same logic than your default case here
            }
            return new Maze(maze, startX, startY, endX, endY);
        } catch (InputMismatchException e) {
            throw new IOException("Input cannot be parsed", e);
        }
    }
}
</code></pre>

<p>About the second point, the <code>printMaze</code> method also have a problem IMO. <code>MazeSolver</code> shouldn't know about the console... nor it should know anything about printing actually... same goes for the new <code>Maze</code>object(s) if you decided to add it.<br>
As such, you should replace this method with a method that gives you a <code>String</code> and it'll be the caller's responsability to do something with the returned string... either printing it to the console as you are already doing (so with a <code>System.out.println</code>) or maybe putting it into a file... or even send it to twitter :P</p>

<hr>

<p>Hope it helps. If you want you can provide an upgraded version of your code in a new question ;)</p>
    </div>