<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Oh well, I didnt notice the sql-server tag...</p>

<p>What a detailed execution plan they have :)</p>

<p>But anyway the answer may be as simple as that there is more answers than there are questions. </p>

<p>And because you are making another subselect for the column and you are selecting what you already have in the outer select, this may get expensive quite fast.</p>

<p>So I would move the subquery from columns to source tables.</p>

<p>Something like this (sorry, I'm not familiar with sql server syntax):</p>

<pre><code>SELECT TOP(10)
  Tags.Id,
  Tags.TagName,
  COUNT(Questions.Id) AS 'numOfQuestions',
  SUM(Answers.AnswerCount) AS 'numOfAnswers',
  (SUM(Answers.AnswerCount) + 0.0) / COUNT(Questions.Id) AS 'answersPerQuestion',
  (SUM(Questions.Score) + SUM(Answers.ScoreSum) + 0.0) / (COUNT(Questions.Id) + SUM(Answers.AnswerCount)) AS 'averageScore'
FROM Tags
INNER JOIN PostTags
  ON PostTags.TagId = Tags.Id
INNER JOIN Posts Questions
  ON Questions.Id = PostTags.PostId
LEFT JOIN (
  SELECT
    Question.Id AS QuestionId,
    COUNT(Answer.Id) AS AnswerCount,
    Sum(Answer.Score) AS ScoreSum
  FROM Posts Question
  INNER JOIN Posts Answer
    ON Question.Id = Answer.ParentId
  GROUP BY Question.Id
) AS Answers
  ON Answers.QuestionId = Questions.Id
GROUP BY Tags.Id, Tags.TagName
ORDER BY COUNT(Questions.Id) + SUM(Answers.AnswerCount) DESC
</code></pre>

<p>Few notes: </p>

<p>I'm intentionally doing left join with the subquery and then inner join in the subquery itself to limit the size of the subquery result. But this means that the outer query must handle possible nulls and replace them with zeroes, which I have not done (because idk sql server syntax), but you should know what I mean.</p>

<p>There is a lot of aggregations going on, but only top 10 are selected in the end. It is possible that the above approach may still not be the most performant. In which case I would recommend to split the query into few separate queries. First extract top 10 using only what is needed for this decision. Then aggregate the other stuff on subset of all posts limited to those 10 tags.</p>

<p>EDIT: I have now noticed that in your question you state:</p>

<blockquote>
  <p>The query is ordered by the total number of questions</p>
</blockquote>

<p>But your query is not doing that. It orders by <code>COUNT(*)</code> which means that a question without answers is counted as <code>+1</code> and question with N (N&gt;0) answers is counted as <code>+N</code>.</p>

<p>At first I made my query sort it by number of questions and answers together. Which is yet something different. But to comply with your statement, it should be <code>ORDER BY COUNT(Questions.Id) DESC</code> only. And should have been <code>COUNT(DISTINCT Questions.Id)</code> in your original query...</p>
    </div>