<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Review</h2>

<p><sup>Note that I'm using arrow notation which was not available back then. But that does not impact the issues addresses in this review.</sup></p>

<p>Method overload resolution allows an explicitly implemented interface method to call the implicitly one:</p>

<blockquote>
<pre><code>IEnumerator IEnumerable.GetEnumerator()
{
    return new NListEnumerator(this);
}
</code></pre>
</blockquote>

<pre><code>IEnumerator IEnumerable.GetEnumerator() =&gt; GetEnumerator();
</code></pre>

<p>Use properties for getters, and pascal-case naming convention.</p>

<blockquote>
<pre><code>public object car ()
{
    return _car;
}

public NList cdr ()
{
    return _cdr;
}
</code></pre>
</blockquote>

<pre><code>public object Car =&gt; _car;

public NList Cdr =&gt;_cdr; // TODO and favour using a fully qualified name over an abbreviation
</code></pre>

<p>The factory method should be made static and use naming conventions.</p>

<blockquote>
<pre><code>public NList cons (object o)
{
    return new NList(o, this);
}
</code></pre>
</blockquote>

<pre><code>public static NList Construct(object o) =&gt; new NList(o, this);
</code></pre>

<p>Extract all common steps out the branches to have more DRY code.</p>

<blockquote>
<pre><code>public NList(List&lt;Object&gt; lst)
{
    if (lst.Count == 1)
    {
        this._car = lst[0];
        this._cdr = null;
    }
    else
    {
        this._car = lst[0];
        this._cdr = new NList(lst.GetRange(1, lst.Count - 1));
    }
}
</code></pre>
</blockquote>

<pre><code>public NList(List&lt;Object&gt; lst)
{
    _car = lst.FirstOrDefault();
    if (lst.Count &gt; 1)
    {
        _cdr = new NList(lst.GetRange(1, lst.Count - 1));
    }
}
</code></pre>

<p>Use constructor overloads.</p>

<blockquote>
<pre><code>public NList (Object fst)
{
    this._car = fst;
    this._cdr = null;
}
</code></pre>
</blockquote>

<pre><code>public NList (Object fst) : this (fst, null)
{
}
</code></pre>

<p>There is no need for the function <code>length</code>. Put the logic behind property <code>Count</code>.</p>
    </div>