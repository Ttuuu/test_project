<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>What I've seen here hits the dict twice per iteration.<br>
If I was into this, I guess I'd try to hit the dictionary just once a number:</p>

<p>How about using as a key neither the current number nor its complement, but their absolute difference?<br>
Getting the index via <code>found = seen.setdefault(diff, value)</code>, you'd still have to check whether  </p>

<ol>
<li><code>found</code> was the current index  </li>
<li>the element at <code>found</code> was the complement and not the current element (special casing <code>target / 2</code>).<br>
(At second glance, <em>one</em> index for each difference is indeed enough…)</li>
</ol>

<p>Drawing heavily on solutions presented here (my pythons don't even like annotated function definitions?!):</p>

<pre><code>def two_sum(numbers: Sequence[number], target: number) -&gt; Sequence[int]:
    ''' Given a sequence of numbers,
        return the first pair of indices of two numbers adding up to target.
    '''
    seen = dict()  # keys will be absolute differences between value and complement

    for i, val in enumerate(numbers):
        complement = target - val
        diff = abs(complement - val)
        found = seen.setdefault(diff, i)
        # print(complement, i, found)
        if found != i:
            if complement == val or numbers[found] != val:
                return found, i

    return ()
</code></pre>

<p>(actually, the results don't always live up to how I read the doc string:<br>
while I hope that it returns the lowest index of the summand found last, I can see it returning the <em>highest</em> (lower) index of the other one. Resolution left…)</p>
    </div>