<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In PrintData method you are assigning values to TaskData object but you don't seem to do anything with it besides just printing it out.</p>

<p>I would parse the file into a List at the beginning and then work with this collection in later code.</p>

<pre><code>private static List&lt;TaskData&gt; ParseTaskData(string[] allData)
{
    var tasksData = new List&lt;TaskData&gt;();

    foreach (var task in allData)
    {
        string[] lineData = task.Split(',');

        tasksData.Add(new TaskData()
        {
            Name = lineData[0],
            // Before Enum: Status = lineData[1]
            Status = (Status)int.Parse(lineData[1].ToString())
        });
    };

    return tasksData;
}
</code></pre>

<p>Also your filter methods can then work as one-liners with lambda. I would be tempted here to split property Status into <code>Status</code> and <code>StatusReadable</code>. Make <code>Status</code> an Enum for ease of filtering.</p>

<pre><code>public List&lt;TaskData&gt; ShowUnCompletedFromList(List&lt;TaskData&gt; allData)
{
    return allData.Where(w =&gt; w.Status == "Not completed").ToList();
}
</code></pre>

<p>Enum solution (I changed the <code>ParseTaskData</code> above):</p>

<pre><code>internal enum Status
{
    NotCompleted = 0,
    Completed = 1
}
</code></pre>

<p>And TaskData then becomes:</p>

<pre><code>internal class TaskData
{
    public string Name { get; set; }

    public Status Status { get; set; }

    public string StatusDescription
    {
        get
        {
            if (Status == Status.NotCompleted)
            {
                return "Not completed";
            }
            else if (Status == Status.Completed)
            {
                return "Completed";
            }
            else
            {
                return "Unknown";
            }
        }
    }
}
</code></pre>

<p>Filtering is now based on Enum and not magic strings:</p>

<pre><code>public List&lt;TaskData&gt; ShowUnCompletedFromList(List&lt;TaskData&gt; allData)
{
    // With Magic string: return allData.Where(w =&gt; w.Status == "Not completed").ToList();
    return allData.Where(w =&gt; w.Status == Status.NotCompleted).ToList();
}
</code></pre>

<p>Try it out with Enum solution:</p>

<pre><code>// Parse all tasks to List.
var tasksData = ParseTaskData(allData);

// Show items in List&lt;&gt;.
Console.WriteLine("&gt;&gt; All tasks:");

foreach (var task in tasksData)
{
    Console.WriteLine($"Task: {task.Name} is {task.StatusDescription}.");
}

Console.WriteLine("&gt;&gt; Uncompleted tasks:");
foreach (var uncompletedTask in filterData.ShowUnCompletedFromList(tasksData))
{
    Console.WriteLine($"Task: {uncompletedTask.Name} is {uncompletedTask.StatusDescription}.");
}

// Actually no need for a filter method, this one-liner does it the same as above.
Console.WriteLine("&gt;&gt; Uncompleted tasks short:");
filterData.ShowUnCompletedFromList(tasksData).ForEach(e =&gt; Console.WriteLine($"Task: {e.Name} is {e.StatusDescription}."));
</code></pre>
    </div>