<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There is a lot to unpack here, so this review will be in multiple edits.</p>

<h1>GUI Creation</h1>

<p>You are creating and storing some widgets unnecessarily in member variables.  For instance, <code>self.truelabel</code> is only used in the <code>TruePosition</code> constructor, it could be a local variable instead of a member variable.  The same is true for almost all of the other labels.</p>

<p>Your GUI creating is a very manually intensive process.  You create each item, and later position it to absolute coordinates.  Let's let Python help us out here, and figure out the coordinates itself.</p>

<pre><code>class TruePosition:

    """Populates Tk window object with widgets"""
    def __init__(self, master):
        self.master = master
        master.title('True Position Validator')

        self.heading('True Point Location Details:')
        self.heading('Measured Point Location Details')

    def heading(self, title):
        _, rows = self.master.grid_size()
        label = Label(self.master, text=title, font=('Technic', 14))
        label.grid(row=rows, columnspan=4, sticky='w')


ROOT = Tk()
MYAPP = TruePosition(ROOT)

ROOT.mainloop()
</code></pre>

<p>This short little program just creates the two heading lines in your GUI.  Note that the first heading is on <code>row=0</code> and the second on <code>row=1</code>, but we never specified that.  We just created <code>self.heading(...)</code> lines, and the <code>heading(self, title)</code> method determine what the next row number was, created the <code>label</code> as a local variable, and positioned it all on its own.</p>

<p>Building on that, lets add the first 5 entry fields.  First, add this additional import:</p>

<pre><code>from tkinter import DoubleVar
</code></pre>

<p>TkInter has some special "Vars" that can be used to pass data into and out of control widgets.  A <code>DoubleVar</code> does this for floating point values, including the conversion to and from a string.</p>

<pre><code>        self.h_cor = DoubleVar()
        self.k_cor = DoubleVar()
        self.tol_cor = DoubleVar()
        self.x_cor = DoubleVar()
        self.y_cor = DoubleVar()

        self.heading('True Point Location Details:')
        self.row('Point Loc:', self.h_cor, ',', self.k_cor)
        self.row('Tolerance:', self.tol_cor)
        self.heading('Measured Point Location Details')
        self.row('Point Loc:', self.x_cor, ',', self.y_cor)
</code></pre>

<p>Now, we've created a <code>DoubleVar</code> for each of the 5 entry fields, and we're passing these variables, along with some text to <code>row()</code> functions.  Let's define those:</p>

<pre><code>    def row(self, *fields):
        _, rows = self.master.grid_size()
        for col, field in enumerate(fields):
            if isinstance(field, str):
                label = Label(self.master, text=field, font=('Technic', 12))
                label.grid(row=rows, column=col, sticky='w')
            elif isinstance(field, DoubleVar):
                entry = Entry(self.master, textvar=field, relief=GROOVE)
                entry.grid(row=rows, column=col)
</code></pre>

<p>Again, we're letting Python keep track of which row we're on.  For each of the <code>fields</code> we pass in (the arguments to the <code>row(...)</code> call), we check if we were given a string or not.  If a string was given, we create a <code>label</code> and position it.  Otherwise, we create an <code>entry</code> using that <code>field</code> as the <code>textvar</code>, and position it.</p>

<p>If you run this short little program, you'd see we've created the first 5 lines of your GUI.  Notice how easy it would be to add new items or change the layout; simply call the <code>heading()</code> or <code>row()</code> functions in the correct order.</p>

<p>To use the <code>DoubleVar</code>, simply <code>.get()</code> the values.  Ie)</p>

<pre><code>        self.h_val = float(self.h_cor.get())
</code></pre>

<p>becomes</p>

<pre><code>        self.h_val = self.h_cor.get()
</code></pre>

<p>To add <code>Button</code> and <code>Slider</code> objects to our grid, it is useful to pass in other Widget objects (<code>from tkinter import Widget</code>) to our <code>row()</code> method.  We can broaden <code>DoubleVar</code> to <code>Variable</code> to allow an <code>Entry</code> widget to be created if passed a <code>StringVar</code> or an <code>IntVar</code> as well.</p>

<pre><code>    def row(self, *fields):
        _, rows = self.master.grid_size()
        for col, field in enumerate(fields):
            if isinstance(field, str):
                label = Label(self.master, text=field, font=('Technic', 12))
                label.grid(row=rows, column=col, sticky='w')
            elif isinstance(field, Variable):
                entry = Entry(self.master, textvar=field, relief=GROOVE)
                entry.grid(row=rows, column=col)
            elif isinstance(field, Widget):
                field.grid(rows=row, column=col)
</code></pre>

<p>Sometimes, we will want to get the widgets that are created.  For instance, we would want the <code>labelout</code> widget that gets created, so we can change the colour of the label programmatically.  So, let's return a list of all the widgets that are created:</p>

<pre><code>    def row(self, *fields):
        _, rows = self.master.grid_size()
        widgets = []

        for col, field in enumerate(fields):
            widget = None
            if isinstance(field, str):
                widget = Label(self.master, text=field, font=('Technic', 12))
            elif isinstance(field, DoubleVar):
                widget = Entry(self.master, textvar=field, relief=GROOVE)
            elif isinstance(field, Widget):
                widget = field

            if widget:
                widget.grid(row=rows, column=col, sticky='w')
                widgets.append(widget)

        return widgets
</code></pre>

<p>Now we can create more of the GUI with:</p>

<pre><code>        self.heading('True Point Location Details:')
        self.row('Point Loc:', self.h_cor, ',', self.k_cor)
        self.row('Tolerance:', self.tol_cor)

        self.heading('Measured Point Location Details')
        self.row('Point Loc:', self.x_cor, ',', self.y_cor)
        btn = Button(master, text="Submit", font=('Technic', 10),
                     command=self.submit_action)
        self.row(None, None, btn)

        self.labelout = self.row("")[0]

        self.display_canvas = Canvas(master, bg='white', border=2, highlightthickness=1,
                                     highlightbackground='black')
        self.display_canvas.grid(columnspan=4, sticky='s')
</code></pre>

<h1>Math</h1>

<p>You're doing some calculations the hard way.</p>

<pre><code>        self.real = (((self.x_val-self.h_val)**2)+((self.y_val-self.k_val)**2))**0.5
</code></pre>

<p>could be written much simpler:</p>

<pre><code>       self.real = math.hypot(self.x_val - self.h_val, self.y_val - self.k_val)
</code></pre>

<h1>Don't use a Dictionary as a List</h1>

<p>This code is a poor design choice:</p>

<pre><code>    self.stored_points = {}
    self.count = 0
</code></pre>

<p>First, <code>count</code> is keeping track of the number of elements in <code>store_points</code>.  Python contains know how many items are in the container; just ask for the <code>len(container)</code>, and you'll get the equivalent of <code>count</code>.</p>

<p>Secondly, the data is being stored using the current <code>count</code> value as a key, which means you store the data under key <code>0</code>, then <code>1</code>, then <code>2</code>, and so on.  This is the hard-way of looking up items in a list!  You should just use a list!</p>

<pre><code>    self.stored_points = []
</code></pre>

<p>And <code>append</code> new items to the list:</p>

<pre><code>    self.stored_points.append(((self.linea, self.lineb), (self.x_val, self.y_val)))
</code></pre>

<p>And iterate over the list:</p>

<pre><code>        for pnt0, pnt1 in self.stored_points:
            self.meas_point(*pnt1)
            self.move_points(*pnt0)
</code></pre>

<h1>Crosses</h1>

<p>You are doing a lot of work to create crosses.  A lot of unnecessary information is being stored in members (<code>linea</code>, <code>lineb</code>, <code>linea_x1</code>, <code>linea_x2</code>, ... <code>lineb_x</code>)</p>

<p>Instead, it would make sense to have a function which creates crosses on the canvas, at an (x,y) location.</p>

<pre><code>    def cross(self, x, y, tag):
        scale = self.radius / self.tol_cor.get()
        half_len = self.line_length / 2
        center_x = self.canvas_width / 2
        center_y = self.canvas_height / 2
        x = center_x + scale * (x - self.h_cor.get())
        y = center_y - scale * (y - self.k_cor.get())

        self.display_canvas.create_line(x, y - half_len, x, y + half_len, tag=tag)
        self.display_canvas.create_line(x - half_len, y, x + half_len, y, tag=tag)
</code></pre>

<p>Calling <code>self.cross(self.h_cor.get(), self.k_cor.get(), None)</code> during the constructor would create the centre cross with no tag.  Calling <code>self.cross(self.x_cor.get(), self.y_cor.get(), "cross")</code> would create a measurement point cross with the tag <code>"cross"</code>.</p>
    </div>