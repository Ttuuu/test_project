<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2><code>secureRandomIntRange</code></h2>

<h2>Scheme</h2>

<p>Basically what you generated with painstaking work is to create an implementation of the <a href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-90Ar1.pdf" rel="nofollow noreferrer"><strong>Complex Discard Method</strong></a> described in section A.5.2. That's a known secure scheme, so kudos for that.</p>

<p>I don't like the way <code>bytes</code> is calculated in the <code>secureRandomIntRange</code> function. It probably uses floating point and that may introduce rounding errors.  It took quite a search, but it is easy to calculate the bit length of the integer using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32" rel="nofollow noreferrer">Math.clz32(x)</a> where <code>x</code> is the number:</p>

<pre><code>sizeBytes = ((32 - Math.clz32(range)) + 7) / 8;
</code></pre>

<p>Note the name change from <code>bytes</code> to <code>sizeBytes</code>.</p>

<p>If you look closely you'll notice that this creates a problem with the value 0, as that is now represented by 0 bytes. Best not to allow ranges of zero elements. And for one element, you may just want to return that element. It also shows that going to 2^32 and over will represent problems, so that's a maximum for the range in this case (which is different from <code>MAX_SAFE_INTEGER</code> because that's 2^53).</p>

<h2>Performance</h2>

<p>If the range is somewhat higher than half of <code>maxValueOfBytes</code> then the scheme will loop with a 50% certainty. You can somewhat reduce that by deliberately generating a higher amount of bytes. That way you don't need as many bytes from the random number generator <em>in the worst case scenario</em> (at the obvious disadvantage of requiring more bytes for the good scenario). Note thought that you can get very unlucky tossing coins, and you might want to avoid such hickups where the while loop keeps on running.</p>

<p>One little trick that is sometimes performed is to check if range has just one bit set, i.e. is a power of two. In that case you can just randomly generate bits and return those. For instance, if the range is 256, then you can just return a single byte. If the range is 128 then you can generate a single byte, set the most significant bit to <code>0</code> and return the result. Basically, if you use precisely as many bits as required then your method degenerates to the Simple Discard Method.</p>

<hr>

<h2><code>secureRandomFloat</code></h2>

<p>Random float is designed well, except that you might want to check how it handles precision for larger byte sizes. There is likely a maximum integer size as well, so rounding will probably get problematic for larger values of parameter <code>bytes</code>.</p>

<hr>

<h2><code>secureRandomChoice</code></h2>

<p>It does seem to pick a random from a list of options. So sure, fine.</p>

<hr>

<h2>Code</h2>

<ul>
<li>Already mentioned in passing: there should be more guard checks on the input, especially on the <code>secureRandomIntRange</code> low end values.</li>
<li>Guard statements should result in an exception, not in a function returning <code>null</code>. You're not just propagating the billion dollar mistake, you're adding to it.</li>
<li>Try to avoid floating point operations. I know, I know, that's a stupid requirement for JavaScript, but really it is important because proving that your JavaScript doesn't have any rounding issues might be tricky. Hence the integer calculations performed for <code>sizeBytes</code> above: I'm sure that they work as long as everything is within the maximum size of a 32 bit integer.</li>
</ul>

<p>That last note is probably going to be contested, especially since <code>floats</code> should not loose precision for calculations that stay within <code>[0, 2^53)</code>. So you may want to keep an open mind to different arguments about it.</p>
    </div>