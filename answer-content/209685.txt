<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Initializing object variables</h3>

<blockquote>
<pre><code>  private Map&lt;String, ArrayList&lt;Consumer&lt;?&gt;&gt;&gt; topicsSubscribers =
      new HashMap&lt;String, ArrayList&lt;Consumer&lt;?&gt;&gt;&gt;();
</code></pre>
</blockquote>

<p>The standard is to set the types as the interfaces, like <code>Map</code> and <code>List</code>.  </p>

<pre><code>    private final Map&lt;String, List&lt;Consumer&lt;?&gt;&gt;&gt; topicSubscribers = new HashMap&lt;&gt;();
</code></pre>

<p>Also, you don't need to specify the contents of <code>&lt;&gt;</code> in the implementation instantiation.  The compiler will work that out for you.  </p>

<h3>Initializing class variables</h3>

<blockquote>
<pre><code>  private static PubSub pubSubSingleton = null;

  public static PubSub getInstance() {
    if (pubSubSingleton == null)
      pubSubSingleton = new PubSub();

    return pubSubSingleton;
  }
</code></pre>
</blockquote>

<p>You don't have to do it this way.  You can simply say </p>

<pre><code>    private static final PubSub pubSubSingleton = new PubSub();

    public static PubSub getInstance() {
        return pubSubSingleton;
    }

    private PubSub() {
    }
</code></pre>

<p>This saves the null check each time while still only initializing once.  </p>

<p>However, Singleton is generally considered an anti-pattern now.  You may want to consider <a href="https://stackoverflow.com/q/1300655/6660678">alternatives</a>.  One possibility would be a separate instance for each message type.  </p>

<p>Your original code does not make the constructor private.  </p>

<p>The Java standard is four column indents rather than the two you are using.  </p>

<h3>Formatting</h3>

<blockquote>
<pre><code>    if (subscribers == null)
      return;
</code></pre>
</blockquote>

<p>If you are going to use the statement form, you should probably keep it one line:  </p>

<pre><code>    if (subscribers == null) return;
</code></pre>

<p>If it's too complicated to fit into one line, you should probably use the block form instead.  </p>

<p>I actually use the block form consistently regardless.  </p>

<pre><code>    if (subscribers == null) {
        return;
    }
</code></pre>

<h3>Factor out the common</h3>

<blockquote>
<pre><code>    if (subscribers == null) {
      subscribers = new ArrayList&lt;Consumer&lt;?&gt;&gt;();
      subscribers.add(subscriberCallback);
      this.topicsSubscribers.put(topicName, subscribers);
    } else {
      subscribers.add(subscriberCallback);
    }
</code></pre>
</blockquote>

<p>This could be </p>

<pre><code>    if (subscribers == null) {
        subscribers = new ArrayList&lt;Consumer&lt;?&gt;&gt;();
        topicsSubscribers.put(topicName, subscribers);
    }

    subscribers.add(subscriberCallback);
</code></pre>

<p>You don't have to do the <code>add</code> before the <code>put</code>.  It's the same object either way.  Otherwise, you'd have to do the <code>put</code> after the <code>add</code> in the non-null case.  </p>
    </div>