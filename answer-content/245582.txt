<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Code Review</h2>
<p>This initializes all members to zero:</p>
<pre><code>    int map_cherries[70][70][70] = {};
</code></pre>
<p>Then you manually initialize the map again:</p>
<pre><code>        std::memset(map_cherries, -1, sizeof(map_cherries));
</code></pre>
<hr>
<p>This is not doing what you think it is doing.</p>
<pre><code>        std::memset(map_cherries, -1, sizeof(map_cherries));
</code></pre>
<p>This is initializing every byte to -1. Each integer is probably 4 bytes (or more long). So each byte is being set to -1. Now it happens that in 2's compliment this work (if you set all bytes to -1 then the integer is also -1). But there is no guarantee in the standard that C++ will use 2's compliment as the representation of integers (even if it is very common).</p>
<hr>
<p>This returns a <code>const inline int</code>!</p>
<pre><code>    const inline int depth_first_search(
        ...
    )
</code></pre>
<p>I know it is legal but come on. That's hard to read. If you have to add inline put it first so we can make the return type readable.</p>
<pre><code>    inline const int depth_first_search(...)
</code></pre>
<p>Now we can see that the return type is <code>const int</code>. That still does not make that much sense. Just return the an <code>int</code>.</p>
<p>The <code>inline</code> keyword has no functional use to the C++ compiler (the compiler writers stopped believing developers had a good idea about this years ago). So this keyword has no effect on the code being generated. The only reason it is used is when the function is defined in the header file but not in the class it is needed to let the linker know there may be multiple definitions (as it may have been included multiple times). But when the method is part of the class this is redundant as it is automatically inline.</p>
<p>The general consensus is don't use <code>inline</code> unless you need to use inline. The only time you need to use inline is for method definitions in header files where they are not defined as part of the class.</p>
<pre><code>    int depth_first_search(...)
</code></pre>
<hr>
<p>If you don't intend to modify a reference pass it by const reference.</p>
<pre><code>    const inline int depth_first_search(
        std::vector&lt;std::vector&lt;int&gt;&gt; &amp;grid,
         ...
    )
</code></pre>
<p>This will prevent mistakes where you accidentally modify the data.</p>
<hr>
<p>Nice short circuit here.</p>
<pre><code>        if (row == row_length) {
            return 0;
        }
</code></pre>
<p><strike>But here: Not sure this will ever happen!</strike><br>
Nice optimization. I like it.</p>
<pre><code>        if (map_cherries[row][left_robot][right_robot] != -1) {
            return map_cherries[row][left_robot][right_robot];
        }
</code></pre>
<p>It took me a while to spot this as an optimization. I would add a comment on WHY this is working and how this is a shortcut optimization.</p>
<hr>
<p>This if statement is a bit complex. I would split it into a couple of statements.</p>
<pre><code>                if (curr_left_robot &gt; -1 and curr_left_robot &lt; col_length and curr_right_robot &gt; -1 and curr_right_robot &lt; col_length) {


                 // You can do in 1 statement if you want.
                 // But I like the use of a function here as it tells you
                 // what the test is and thus documents the code is doing.
                 if (!inBounds(curr_left_robot)) {
                     continue;
                 }
                 if (!inBounds(curr_right_robot)) {
                     continue;
                 }
</code></pre>
<hr>
<p>Sure that's legal.</p>
<pre><code>        return map_cherries[row][left_robot][right_robot] = max_cherries + cherries;
</code></pre>
<p>Makes the line very long though.<br>
I would split into three lines;</p>
<pre><code>        // Add cherries in this row to the previous row.            
        cherries += max_cherries;

        map_cherries[row][left_robot][right_robot] = cherries;
        return cherries;
</code></pre>
    </div>