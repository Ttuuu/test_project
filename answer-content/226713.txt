<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is overall well-thought-out, well-organized, and well-written.</p>

<p>There's at least one bug, and one oversight that I would consider a bug:</p>

<ul>
<li><p>In <code>traverse</code> your recursive call is passing the wrong second parameter:</p>

<pre><code>} else if (mode == Node.Traversal.DepthFirst) {
    callback(this);
    this.children.forEach(n =&gt; n.traverse(callback, <b>false</b>));
}</code></pre>

<p>should read</p>

<pre><code>} else if (mode == Node.Traversal.DepthFirst) {
    callback(this);
    this.children.forEach(n =&gt; n.traverse(callback, <b>Node.Traversal.DepthFirst</b>));
}</code></pre></li>
<li><p>in <code>add</code> you don't declare <code>child</code>.  Presumably is should read <code>for (<b>let</b> child of children)</code></p></li>
</ul>

<p>As to design decisions, there are several things you might want to consider.</p>

<ul>
<li><p><code>add</code> might be improved with <code>return this</code>.</p></li>
<li><p>I think a <code>clone</code> method might be a more common choice here than a static <code>from</code> function.</p></li>
<li><p>You might find the ES6 <code>class</code> syntax slightly more explicit.  I wasn't a big fan of it when it was proposed, and I'm still not; I don't like the implication it suggests that JS OOP is particularly similar to JS/C# style OOP.  But it does carry a bit less cruft than the constant repetition of <code>Node.prototype</code>.</p></li>
<li><p>Rather than use an enumeration of traversal types, you might want to consider simply using functions instead.  That is,</p>

<pre><code>Node.Traversal = {
    BreadthFirst: function(callback) {
        let nodes = [this];
        while (nodes.length &gt; 0) {
            const current = nodes.shift();
            callback(current);
            nodes = nodes.concat(current.children);
        }      
    },
    DepthFirst: function(callback) {
        callback(this);
        this.children.forEach(n =&gt; n.traverse(callback,  Node.Traversal.DepthFirst));
    }
};

Node.prototype.traverse = function(callback, traversal = Node.Traversal.BreadthFirst) 
{
    traversal.call(this, callback);
    return this;
};
</code></pre>

<p>This would make it easier for you to add another traversal, since you only have to do it in one place, and it lets users supply their own instead.</p></li>
<li><p>Perhaps most importantly, you might want to drop the <code>parent</code> property.  You do not use it anywhere except in building or cloning a tree, and it can lead to real problems.  For instance, if you cloned a tree with <code>from</code> (and therefore ended up with non-empty parent nodes), you will not be able to call <code>JSON.stringify</code> on it due to the cyclic nature.</p></li>
</ul>

<p>Putting this all together, here's an alternate version:</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>console.clear() 

class Node {
  constructor (value = 0, children = []) {
    this.value = value;
    this.children = children;
  }

  clone () {
    let that = Object.assign(new Node(), this);
    that.children = this.children.map(n =&gt; n.clone());
    return that;
  }
  
  add (...children) {
    for (let child of children) {
      this.children.push(child);
    }
    return this;
  }

  traverse (callback, traversal = Node.Traversal.BreadthFirst) {
    traversal.call(this, callback);
    return this;
  }

  reduce (callback, initial, mode) {
    let acc = initial;
    this.traverse(n =&gt; acc = callback(acc, n), mode);
    return acc;
  }

  every (callback) {
    return this.reduce((a, n) =&gt; a &amp;&amp; callback(n), true);
  }

  some (callback) {
    return this.reduce((a, n) =&gt; a || callback(n), false);
  }

  find (callback, mode) {
    return this.reduce((a, n) =&gt; a || (callback(n)? n: false), false, mode);
  }

  includes (value) {
    return this.some(n =&gt; n.value === value);
  }
  
}

Node.Traversal = {
    BreadthFirst: function(callback) {
        let nodes = [this];
        while (nodes.length &gt; 0) {
            const current = nodes.shift();
            callback(current);
            nodes = nodes.concat(current.children);
        }      
    },
    DepthFirst: function(callback) {
        callback(this);
        this.children.forEach(n =&gt; n.traverse(callback,  Node.Traversal.DepthFirst));
    }
};


const tree = new Node ('A', [
  new Node('  B', [
    new Node('    D'),
    new Node('    E', [
      new Node('      G'),
    ]),
    new Node('    F')
  ]),
  new Node('  C') 
])

tree.children[0].children[2].add(new Node('      H')).add(new Node('      I'))

const log = ({value}) =&gt; console.log(value)
console.log('===============================')
console.log('Breadth-first')
console.log('===============================')
tree.traverse(log)
console.log('===============================')
console.log('Depth-first')
console.log('===============================')
tree.traverse(log, Node.Traversal.DepthFirst)
console.log('===============================')
console.log('Clone, Breadth-first')
console.log('===============================')
tree.clone().traverse(log)
console.log('===============================')
console.log('Clone, Depth-first')
console.log('===============================')
tree.clone().traverse(log, Node.Traversal.DepthFirst)</code></pre>
</div>
</div>

    </div>