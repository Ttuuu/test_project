<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Since <code>it.duration</code> is quite long, you could use the alternative expression:</p>

<pre><code>(it.duration / 10 * 10) .. (it.duration / 10 * 10 + 9)
</code></pre>

<p>You still have common subexpressions, though. To avoid these, you can define a cluster:</p>

<pre><code>fun cluster(x: Double, size: Double) = (x - x % size) .. (x - x % size + size - 1)
</code></pre>

<p>or, to avoid the common subexpression:</p>

<pre><code>fun cluster(x: Double, size: Double) = (x - x % size).let { it .. (it + size - 1) }
</code></pre>

<p>(I wrote the above without a compiler, so it may or may not work, but you get the idea.)</p>

<p>Then, you can group the trips by their cluster:</p>

<pre><code>trips.groupBy { cluster(it.duration, 10.0) }
</code></pre>

<p>By the way, the group "30-39" also contains 39.999, so you might get contacted by a nitpicker that your range should better be called "[30,40)". ;)</p>
    </div>