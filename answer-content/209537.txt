<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>I tried adding a context manager, but couldn't really make it work in an elegant way.</p>
</blockquote>

<pre><code>class PyCatBase():
    def __enter__(self):
        return self
    def __exit__(exc_type, exc_val, exc_tb):
        self.socket.close()
        return False

# ...
if __name__ == '__main__':
    args = parse_arguments()
    pycat_class = PyCatServer if args.listen else PyCatClient
    pycat = pycat_class(**vars(args))
    with pycat:
        pycat.main()
</code></pre>

<p>Other things. <code>SUCCES_RESPONSE</code> should be spelled <code>SUCCESS_RESPONSE</code>. Similarly, there's a typo in that string.</p>

<p>This:</p>

<pre><code>self.operating_system = os.name == "nt"
</code></pre>

<p>suggests one of two things. Either <code>operating_system</code> should be named <code>is_windows</code>, or you need to change it to simply <code>self.operating_system = os.name</code>.</p>

<p>This:</p>

<pre><code>def __init__(self, **kwargs):
</code></pre>

<p>is only a good idea in other, limited, contexts (for example, if you're extending a class with a highly complex initializer). Don't do that, here. Spell out your args. Having implicit kwargs hurts you and your users in a number of ways, including kneecapping your IDE's static analysis efforts.</p>

<p>Here:</p>

<pre><code>cert = x509.CertificateBuilder()\
                .subject_name(subject)\
                .issuer_name(issuer)\
                .public_key(key.public_key())\
                .serial_number(x509.random_serial_number())\
                .not_valid_before(datetime.datetime.utcnow())\
                .not_valid_after(datetime.datetime.utcnow() +datetime.timedelta(days=365))
</code></pre>

<p>the generally accepted thing to do rather than a handful of newline continuations is to surround the thing in parens.</p>

<p>This:</p>

<pre><code>change_dir = re.match(r'cd(?:\s+|$)(.*)', command)  
</code></pre>

<p>should have its regex pre-compiled in <code>__init__</code>, since you call it for every command.</p>
    </div>