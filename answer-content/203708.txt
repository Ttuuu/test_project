<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>To add to <a href="https://codereview.stackexchange.com/a/203702/29485">@Toby Speight</a> good self answer:</p>

<p><strong>Avoid mixed signed types</strong></p>

<p>Alos, with array sizing and indexing, best to use <code>size_t</code>.</p>

<pre><code>//const int bufinc = 20;
const size_t bufinc = 20;
size_t size = 0;
//int len = 0;
size_t len = 0;
...
size += bufinc;
</code></pre>

<p><strong>Questionable specifier flag</strong></p>

<pre><code>//                                                       v
strftime(timestr, sizeof timestr, "%%%%CreationDate: %A %-d %B %Y, %H:%M:%S %Z", ctime);
</code></pre>

<p><strong>Prefer {}</strong></p>

<pre><code>    //if (*cp &amp; 0x80)
    //  printf("\\%03o", (unsigned int) (unsigned char) *cp++);
    //else
    //  putchar(*cp++);

    if (*cp &amp; 0x80) {
      printf("\\%03o", (unsigned int) (unsigned char) *cp++);
    } else {
      putchar(*cp++);
    }
</code></pre>

<p><strong>Use <code>double</code> unless <code>float</code> needed for space/speed</strong></p>

<p><code>double</code> is more the natural FP type in C.<br>
Below, <code>tp-&gt;nsongs[0]</code> converts to <code>double</code>, divides with <code>264.0</code> and then the <code>double</code> quotient is converted to <code>float</code> and passed to <code>print_songs()</code> as <code>step</code>.  <code>step</code> converts to <code>double</code> and then passed to <code>printf()</code>.  Hope about just staying with <code>double</code> and avoid the 2 conversions?</p>

<pre><code>// void print_songs(Strlist *s, int n, float step) {
void print_songs(Strlist *s, int n, double step) {
  printf("%.2f [", step);
}

print_songs(tp-&gt;songs[0], tp-&gt;nsongs[0], 264.0 / tp-&gt;nsongs[0]);


print_songs(tp-&gt;songs[0], tp-&gt;nsongs[0], 264.0f / tp-&gt;nsongs[0]);
//                                            ^
</code></pre>

<p><strong>Avoid looong string literals</strong></p>

<p>Such strings (&gt; 4095) go over the minimal environmental limit.  I'd expect this string data to be read from another file.</p>

<pre><code>"% ISOLatin1Encoding stolen from ps_init.ps in GhostScript 2.6.1.4:\n"
"% If the ISOLatin1Encoding vector isn't known, define it.\n"
 ...
 "%%PaperSize: A4\n"
 "%%EndSetup\n"
 "\n",
</code></pre>

<p><strong>Consider <code>bool</code> when able</strong></p>

<p>Yes, original code was C89, but we do not have to stay there.</p>

<pre><code>int wide; /* true if continuation pages */
bool wide; /* true if continuation pages */
</code></pre>

<p><strong>Long live <code>register</code>!!</strong></p>

<p>On 2nd thought, we can let <code>register</code> go to the <code>gets()</code> home  </p>

<pre><code>// register char *pc = line + len;
char *pc = line + len;
</code></pre>

<p><strong>Be careful with <code>is...()</code> functions</strong></p>

<p><code>is...(int x)</code> is valid for <code>EOF</code> and <code>unsigned char</code> values.  A negative <code>char</code> can lead to UB</p>

<pre><code>// isspace(*--pc)
isspace((unsigned char) *--pc)
</code></pre>

<p><strong>Consider being positive</strong></p>

<p>A style issue, yet I like to avoid <code>!</code> and <code>!=</code> when able as a positive test is easier to read.  Perhaps you don't  not think otherwise, no?</p>

<pre><code>// if (!strcmp(s-&gt;str, "..")) {
if (strcmp(s-&gt;str, "..") == 0) {
</code></pre>

<p><strong>Declare later and initialize</strong></p>

<p>A post C89 thing, yet instead of a dangling uninitialized object, declare it when needed.  Example:</p>

<pre><code>// struct tm *ctime;
// ...
// ctime = localtime(&amp;ct);

struct tm *ctime = localtime(&amp;ct);
</code></pre>

<p><strong>Timestamps: consider ISO8601</strong></p>

<pre><code>  //"%%%%CreationDate: %A %d %B %Y, %H:%M:%S %Z", ctime);
  "%%%%CreationDate: %F %T %z", ctime);
</code></pre>

<p><strong>Maybe more later, GTG</strong></p>
    </div>