<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think, you should be concerned about this behavior:</p>

<blockquote>
<pre><code>public class Client : IDisposable {
  private static HttpClient _client;

  public Client(bool payment)
  {
    var baseUrl = payment ? "https://payment.apiaddress.com/" : "https://api.apiaddress.com/";

    _client = new HttpClient {BaseAddress = new Uri(baseUrl)};
    _client.DefaultRequestHeaders.Accept.Clear();
    _client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
    _client.DefaultRequestHeaders.Add("X-API-KEY", Config.GetToken());
  }

  public Uri BaseAddress =&gt; _client?.BaseAddress; // Added by HH
  ....
</code></pre>
</blockquote>

<p>Test case</p>

<pre><code>  // 
  Client client1 = new Client(true);
  Console.WriteLine(client1.BaseAddress);
  Console.WriteLine();
  Client client2 = new Client(false);
  Console.WriteLine(client1.BaseAddress);
  Console.WriteLine(client2.BaseAddress);
</code></pre>

<p>Output:</p>

<pre><code>https://payment.apiaddress.com/

https://api.apiaddress.com/
https://api.apiaddress.com/
</code></pre>

<p>As you see the inner <code>static HttpClient _client</code> becomes a new instance when <code>client2</code> is called and therefore <code>client1</code> also changes base address which may result in unexpected behavior.</p>

<p>So as I see it, you can't use this concept with two different base addresses.</p>

<p>A solution could be to provide what could be called a "Dualton" in a fashion like:</p>

<pre><code>public class Client : IDisposable
{
  private HttpClient _client;

  private Client(string baseUrl)
  {
    //var baseUrl = payment ? "https://payment.apiaddress.com/" : "https://api.apiaddress.com/";

    _client = new HttpClient { BaseAddress = new Uri(baseUrl) };
    _client.DefaultRequestHeaders.Accept.Clear();
    _client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
    _client.DefaultRequestHeaders.Add("X-API-KEY", Config.GetToken());
  }

  static Client paymentClient;
  static Client normalClient;

  public static Client Create(bool payment)
  {
    if (payment)
    {
      paymentClient = paymentClient ?? new Client("https://payment.apiaddress.com/");
      return paymentClient;
    }

    normalClient = normalClient ?? new Client("https://api.apiaddress.com/");
    return normalClient;
  }
</code></pre>

<p>Someone would probably called that an anti pattern? </p>

<p>A more general solution could be to have a <code>static Dictionary&lt;string, Client&gt; clients</code> and the matching <code>public static Client Create(string baseUrl) {}</code>.</p>
    </div>