<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>This answer only has one tiny section (<code>IDisposable</code>) that I feel is an appropriate kind of answer for Code Review. The rest is more suitable as a StackOverflow answer (since it dives into the specifics of the <code>DocumentClient</code> class). I apologize in advance, and if I should move my answer or edit it in anyway, please feel free to advise me in the comments section.</p>
</blockquote>

<h2>The <code>DocumentClient</code>class is already thread-safe.</h2>

<p>From what I can gather reading the <a href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.azure.documents.client.documentclient?redirectedfrom=MSDN&amp;view=azure-dotnet#remarks" rel="nofollow noreferrer">latest documentation</a> on the <code>DocumentClient</code> class, is that it is already inherently thread-safe. Provided that this remains true, your class wrapper is obsolete.</p>

<p>It seems that this confusion was also asked as a question over at <a href="https://stackoverflow.com/q/39513803/3645638">StackOverflow</a></p>

<hr>

<h2>Microsoft's recommendation of using <code>DocumentClient</code> as a singleton</h2>

<blockquote>
  <p>If you can draw a parallel to how Microsoft recommends usage of the <code>HttpClient</code> then you might have a better idea of what I mean from this point onwards.</p>
</blockquote>

<p>Microsoft recommends that you use a <strong>single instance*</strong> per application. (again, think of <code>HttpClient</code>)</p>

<p>In the case of a web application using ASP.NET this usually comes in the form of dependency injection via declaring the lifetime of the class to <code>Singleton</code>.</p>

<pre><code>// dependency injection for ASP.NET
services.AddSingleton(myDocumentClientInstance);
</code></pre>

<p>This might be the root cause of your misunderstanding. The use of the word "singleton" from the article you probably read, is actually an ASP.NET convention for specifying a lifetime of the instance and also ensuring that only a single (shared) instance is used across your entire web application.</p>

<p>This doesn't mean that implementing the <code>DocumentClient</code> as a singleton class is wrong.</p>

<p>In such a case, a <strong>static instance</strong> (like you have done) could be the answer. But you're going to get a group of developers that will throw fists in the air at you for making the code difficult-to-impossible to unit test if you do so... You have been warned!</p>

<hr>

<h2>The <code>DocumentClient</code> class implements <code>IDisposable</code>.</h2>

<p>Based on your code it will become quite a complex task of making sure that the instance is properly disposed.</p>

<p>The recommended way to handle an object that implements the <code>IDisposable</code> interface is by using the the <code>using</code> block.</p>

<pre><code>using (IDocumentClient client = new DocumentClient(new Uri("endpoint"), "authKey"))
{
    ...
}
</code></pre>

<hr>

<h2>Special cases</h2>

<p>To summarize with a special case, which could hopefully shine some additional light why your implementation will be troublesome as a true singleton.</p>

<p>There are some special cases for using more than one instance. In particular, if you have multiple CosmosDb accounts, then you should actually use one instance for each account. You can read about that <a href="https://github.com/Azure/azure-cosmos-dotnet-v2/issues/289#issuecomment-310498742" rel="nofollow noreferrer">here</a>.</p>

<blockquote>
  <p>Note: The parallel to <code>HttpClient</code> does not work here, since we are creating multiple instances on purpose.</p>
</blockquote>

<p>Your particular implementation will fall short when you have a scenario with multiple CosmosDb accounts. So please keep that in mind.</p>
    </div>