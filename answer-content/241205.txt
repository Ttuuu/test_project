<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The general trick to "automating" code where you have multiple values that all work the same way is to:</p>

<ol>
<li>Put them in a collection, like a list or a dict.</li>
<li>Take whatever you're doing to all those values and define it as a function.</li>
</ol>

<p>In the case of this code, rather than having three variables for your routes, you should put them in a collection you can iterate over, and rather than having three copy and pasted expressions that translate the routes into costs, write a function that takes a route and calculates the cost.  This greatly reduces the risk that you'll end up with a bug because you copied+pasted something incorrectly, or forgot to update one piece of data in two different places (e.g. the values of the routes, which are currently duplicated in a sort of non-obvious way).</p>

<p>I don't actually understand what your code represents, but the pattern is easy enough to spot that I was able to write a script that at least produces roughly the same output while avoiding the copy+paste pitfalls.</p>

<pre><code>from typing import List

routes = {
    '1': [0, 4, 2, 1, 3, 0],
    '2': [0, 3, 5, 2, 4, 6, 0],
    '3': [0, 7, 6, 4, 1, 5, 0],
}

distance_matrix = [
    [0, 6, 12, 11, 6, 13, 8, 20, 7],
    [6, 0, 7, 9, 7, 9, 12, 15, 13],
    [12, 7, 0, 13, 10, 11, 16, 13, 19],
    [11, 9, 13, 0, 15, 4, 19, 12, 14],
    [6, 7, 10, 15, 0, 16, 6, 21, 12],
    [13, 9, 11, 4, 16, 0, 21, 8, 18],
    [8, 12, 16, 19, 6, 21, 0, 27, 10],
    [20, 15, 13, 12, 21, 8, 27, 0, 26],
    [7, 13, 19, 14, 12, 18, 10, 26, 0]
]


def cost_for_route(route: List[int], distance_matrix: List[List[int]]) -&gt; int:
    route_shifted = route[1:] + route[0:0]
    return sum(distance_matrix[i][j] for i, j in zip(route, route_shifted))


route_costs = {
    name: cost_for_route(route, distance_matrix)
    for name, route in routes.items()
}

for name, cost in route_costs.items():
    print(f"The cost of route {name}: {cost}")

best = min(route_costs.keys(), key=route_costs.get)
worst = max(route_costs.keys(), key=route_costs.get)
print(f"Best value has route {best}, {route_costs[best]} is the value.")
print(f"Worst value has route {worst}, {route_costs[worst]} is the value.")
</code></pre>

<p>Now that <code>routes</code> is simply a dict that the rest of the code iterates through, you can add more routes just by adding them to that dict; you don't need to manually generate the code to calculate the cost of the new route, or update the code that finds the best/worst routes or the code that prints them all out.</p>
    </div>