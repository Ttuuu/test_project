<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Adopt and enforce a "no warnings" policy.  You should compile with warnings and you should treat them like errors.  Compiling with the following flags</p>

<pre><code>-pedantic -Wall -Wextra -Weffc++ -Werror
</code></pre>

<p>is the following output</p>

<pre><code>In file included from Roman_int.cpp:3:
./Roman_int.h:50:28: error: extra qualification on member 'roman_to_integer'
    Integer Roman_int::roman_to_integer(const Roman&amp; roman);
            ~~~~~~~~~~~^
./Roman_int.h:20:14: error: field 'integer' will be initialized after field 'roman' [-Werror,-Wreorder]
        :integer{ value }, roman{ integer_to_roman(value) }
         ^
./Roman_int.h:25:14: error: field 'integer' will be initialized after field 'roman' [-Werror,-Wreorder]
        :integer{ roman_to_integer(value) }, roman{ value }
         ^
Roman_int.cpp:145:22: error: variable 'r' is uninitialized when used within its own initialization [-Werror,-Wuninitialized]
    Roman_int r{ r };
              ~  ^
3 errors generated.
</code></pre>

<p>The first one is just a flat out error that should have been caught.  The other two are warnings turned into errors.  Out-of-order initialization of data members and a variable initialized to its uninitialized self.</p>

<hr>

<pre><code>#pragma once
</code></pre>

<p>Be aware that you are giving up portability here as this is, while common, a non-standard compiler extension.  For nearly all applications, as long as you use implementations that support it, neither physically nor logically copy files around, and the filesystem doesn't trigger a false-positive, then <code>#pragma once</code> is fine.  Otherwise, stick with standard include guards and give some effort to differentiate the guard name.</p>

<hr>

<pre><code>#include &lt;string&gt;
#include &lt;vector&gt;
#include &lt;iostream&gt;
#include &lt;map&gt;
</code></pre>

<p>Only include what is required to make a file self-sufficient. You don't want to burden users of your code with the bloat of unused code (like <code>&lt;map&gt;</code> and <code>&lt;iostream&gt;</code>) but you don't want users latently including files because you forgot to include something.</p>

<p><code>&lt;iostream&gt;</code> is a special case.  Many of the implementations of C++ transparently injects static constructors into every translation unit that includes it's library.  You should avoid including <code>&lt;iostream&gt;</code> in headers unless you absolutely need it.  Consider splitting IO related operations from your class or include the minimal amount possible.  In your case, <code>&lt;iosfwd&gt;</code> provides the forward declarations for <code>std::ostream</code> and <code>std::istream</code>.  In the source file, you'll need <code>&lt;iostream&gt;</code> for the definitions to the declarations.</p>

<hr>

<pre><code>namespace roman_int
</code></pre>

<p>Use namespaces for logical structuring as they exist to group together types and functions that are similar.  Maybe you have a namespace for numerics (number systems).  Maybe you have a bunch of roman-related things.  Maybe you have a project-wide workspace of stuff written by you.</p>

<hr>

<pre><code>    using Roman = std::string;
    using Roman_value = std::string;
    using Integer = int;
    using Integer_value = int;

    class Roman_int {
</code></pre>

<p>These aliases are publicly exposed and may be better placed inside <code>Roman_int</code> or just deleted.  They aren't very safe to use and really just obfuscates the underlying types by being outside of its used scope.  Read up on type safety using strong types (<a href="https://www.fluentcpp.com/2016/12/08/strong-types-for-strong-interfaces/" rel="noreferrer">Boccara</a>, <a href="https://foonathan.net/blog/2016/10/11/type-safe.html" rel="noreferrer">MÃ¼ller</a>) to avoid issues commonly found with aliasing existing types.</p>

<p>Entities, like functions, classes, namespaces, and modules, should be open for extension, but closed for modification.  If someone wants to add data members or functionality, there are mechanisms in C++ to extend functionality, like Templates.</p>

<pre><code>    template &lt;typename Roman = std::string, typename Integer = int&gt;
    class Roman_int {
</code></pre>

<hr>

<p>Now a user isn't stuck using <code>std::string</code> when maybe they want some other class that will compress the symbols.  <code>int</code> may be the incorrect size for the users need.</p>

<hr>

<pre><code>        Roman_int() = default;
        ...
        Roman roman{};
        Integer integer{};
</code></pre>

<p>Constructors are used to guarantee and simplify initialization of classes.  Constructors should create a fully initialized object and if it cannot, then throw an exception.  Default constructors are simple.  We either know we have default values or we omit the default constructor from the interface.  For Roman Numerals, there is no representation for 0, but you set <code>integer</code> to <code>0</code>. Perhaps a sane default state may be to set <code>roman</code> to <code>"I"</code> and set <code>integer</code> to <code>1</code> to match the logic of <code>integer_to_roman()</code>?</p>

<hr>

<pre><code>        explicit Roman_int(const Integer&amp; value)
            :integer{ value }, roman{ integer_to_roman(value) }
        {}
        ...
        Roman roman{};
        Integer integer{};
</code></pre>

<p>If a user passes a non-positive integer which cannot be represented as a roman numeral, should this object fully initialize? The empty string is possible.  You could throw or use another type of error reporting option. You could have <code>roman</code> be of type <code>std::optional</code> <a href="/questions/tagged/c%2b%2b17" class="post-tag" title="show questions tagged 'c++17'" rel="tag">c++17</a> and have it's non-representable states be <code>std::nullopt</code> <a href="/questions/tagged/c%2b%2b17" class="post-tag" title="show questions tagged 'c++17'" rel="tag">c++17</a>.</p>

<p>As the warnings above noted, your initialization is out of order.  C++ actually has a <a href="https://en.cppreference.com/w/cpp/language/initialization" rel="noreferrer">defined initialization order</a>. From the <a href="http://eel.is/c++draft/class.base.init#13.3" rel="noreferrer">standard</a>:</p>

<blockquote>
  <p>In a non-delegating constructor, initialization proceeds in the following order:</p>
  
  <ul>
  <li><p>...</p></li>
  <li><p>Then, non-static data members are initialized in the order they were declared in the class definition (again regardless of the order of the mem-initializers).</p></li>
  </ul>
</blockquote>

<p>This didn't bite you here, but if you ever had data members dependent on each other where the misorder mattered, you would have seen a bug.</p>

<p>You passed the parameter by reference to-<code>const</code>.  Unless you plan on supporting integral types beyond 3-4 words (the natural size of a register), like infinite precision numerics, then that is fine.  Otherwise, cheap to pass values should be passed by value.</p>

<hr>

<pre><code>        if (integer &lt;1) {
            throw std::runtime_error(
                "Roman Roman_int::integer_to_roman(const Integer&amp; integer)\n"
                "Invalid Integer value it must be &gt;= 1 \n"
            );
        }
</code></pre>

<p>Keep in mind that an exception should reflect what went wrong.  The hierarchy of exceptions most users will use and derive from are:</p>

<p><a href="https://i.stack.imgur.com/7dUhZ.png" rel="noreferrer"><img src="https://i.stack.imgur.com/7dUhZ.png" alt="Exception Hierarchy"></a></p>

<p>Exceptions can carry type information and you can leverage the type system to handle each exception type differently.  You should have thrown a logic error instead of a runtime error as the error was caused by a flaw in the callers thinking.  Even better, throw an invalid argument exception or derive a new exception type specifically for your domain (<code>nonpositive_argument</code>).  Runtime errors can be thought of as errors beyond the users control (hardware failure, dropped connection, etc).</p>

<hr>

<pre><code>        for (auto it = lookup_table.cbegin(); it != lookup_table.cend(); ++it) {
            while (tmp_integer - it-&gt;integer &gt;= 0) {
                tmp_integer -= it-&gt;integer;
                roman += it-&gt;roman;
            }
        }
</code></pre>

<p>Prefer to use range-based <code>for</code> or an algorithm over writing your own loops. </p>

<pre><code>        for (auto&amp;&amp; numeral : lookup_table) {
            while (tmp_integer &gt;= numeral.integer) {
                tmp_integer -= numeral.integer
                roman += numeral.roman;
            }
        }
</code></pre>

<hr>

<pre><code>    Roman_int operator/(const Roman_int&amp; a, const Roman_int&amp; b)
    {
        Roman_int r{ a.as_integer() / b.as_integer() };
        return r;
    }
</code></pre>

<p>Since you currently have cases where the Roman_int can be 0, you should check if the divisor is 0 in both the division and modulus operator.  Assuming you disallow that, you don't need to check.</p>

<hr>

<pre><code>    Roman_int operator-(const Roman_int&amp; a, const Roman_int&amp; b)
    {
        int result = a.as_integer() - b.as_integer();
        if (result &lt; 0) {
            result = 1;
        }
        Roman_int r{ r };
        return r;
    }
</code></pre>

<p>Don't clamp the result to 1.  If the result is a nonpositive value, report it to the caller as its likely a logic error.</p>

<p>Enabled warnings would have caught the self-assignment problem.</p>

<p>You can construct the result as an unnamed temporary of your return type (<code>return {result};</code>).</p>

<hr>

<pre><code>    bool operator==(const Roman_int&amp; a, const Roman_int&amp; b)
    {
        if (a.as_integer() == b.as_integer() &amp;&amp; a.as_roman() == 
</code></pre>

<p>b.as_roman())
                return true;
            return false;
        }</p>

<p>Instead of returning <code>true</code> or <code>false</code> depending on the result of the <code>if</code> statement, just return the result of the <code>if</code> statement.</p>

<pre><code>    bool operator==(const Roman_int&amp; a, const Roman_int&amp; b)
    {
        return a.as_integer() == b.as_integer() &amp;&amp; a.as_roman() == b.as_roman();
    }
</code></pre>

<p>Assuming both the integer and roman representations are synchronized throughout the lifetime of the object, do you need to check both?</p>

<hr>

<p>While it's nice that you were able to print out the entire table from 1 to 99, it would be better if you had unit tests for each of your methods and compared observed results to expected results.  Consider picking up a testing framework like Catch2, Boost.Test, or Googletest.</p>

<hr>

<p>Overall, it's well written.  Some issues to fix.  I would suggest that you check out the <a href="http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines" rel="noreferrer">CPPCoreGuidelines</a> (if you use Visual Studio, use the CoreGuideline analysis tooling), read up on <a href="https://en.wikipedia.org/wiki/SOLID" rel="noreferrer">SOLID</a>, and integrate both unit testing and clang-format into your tooling.</p>

<hr>

<h2>Update</h2>

<pre><code>        Roman_integer_values(const Roman_value&amp; roman_digit, const Integer_value&amp; integer_digit)
            :roman{ roman_digit }, integer{ integer_digit }
        {
        };
         ^
</code></pre>

<p>You have extra semicolons after <strong>function</strong> definitions. Compilers will consider them as "empty statements" and ignore them.  Remove them.</p>

<p>There are multiple places where your class member functions have local variables that shadow class data members.</p>

<pre><code>    Roman roman{};
    Integer integer{};

    Integer Roman_int::roman_to_integer(const Roman&amp; roman);
                                                     ^^^^^
    Roman integer_to_roman(const Integer&amp; integer);
                                          ^^^^^^^
    bool is_valid_roman(const Roman&amp; roman);
                                     ^^^^^
</code></pre>

<p>Same applies with variables declared inside your class member functions.</p>

<pre><code>    Roman as_roman() const { return roman; }
    Integer as_integer()const { return integer; }
</code></pre>

<p>Consider returning the string by const reference. The user can then decide if they want a reference to the string or a copy.  That also allows you to qualify your string getter as non-throwing (<code>noexcept</code>).  If you opt to generalize your class with templated types instead of static aliased types, be consistent with your declaration of reference/value qualifiers.  Your constructor takes <code>int</code> by reference to const.  Your getting returns <code>int</code> by value.  If <code>Integer</code> is templated and the user passes <code>ExpensiveToCopyInteger</code> (infinite precision integers), then that copy becomes expensive.</p>

<pre><code>    const Roman&amp; as_roman() const noexcept { return roman; }
    Integer as_integer() const noexcept { return integer; }
</code></pre>
    </div>