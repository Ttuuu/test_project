<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p><em>..but I expect that most 4/5 cache accesses will result in a hit, and 1/5 in a miss followed by an add.</em></p>
</blockquote>

<p>You are not exposing your sync root <code>_lock</code>, meaning this class isn't thread-safe for consumers. The only meaningful way to use your class is as follows:</p>

<pre><code>if (!cache.TryGet(key, out var value))
{
    // watch out! one of the other threads may already have added the same value
    cache.Add(key, valueGenerator());
}
</code></pre>

<p>This would be a better approach:</p>

<pre><code>lock (cache.SyncRoot) 
{
    if (!cache.TryGet(key, out var value))
    {
        cache.Add(key, valueGenerator());
    }
}
</code></pre>

<p>Even better would be to provide a <code>GetOrAdd</code> method:</p>

<pre><code>var cachedResultRetrieved = cache.GetOrAdd(key, out var value, valueGenerator);
</code></pre>

<p>You may also argue whether using a global lock is the most efficient way of handling thread-safety here. I believe using <code>ConcurrentDictionary</code> would solve most threading issues. The only atomic operation I see is this one:</p>

<blockquote>
<pre><code>_lruList.Remove(node);
_lruList.AddLast(node);
</code></pre>
</blockquote>

<p>This would still require some locking mechanism. I don't think it's that important that both the <code>cache</code> and the <code>lrulist</code> are updated in the same lock. It's not crucial that the <strong>exact</strong> oldest item gets deleted.</p>
    </div>