<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>Note: Intermingling actual implementation code and testing code/usage example makes for bad reading.</p>
</blockquote>

<p><code>std::string</code> has a constructor that takes two iterators and constructs its contents from them. This allows <code>_str</code> to be simplified to:</p>

<pre><code>std::string operator"" _str(unsigned long long int num)
{
    std::deque&lt;char&gt; digits;

    for(; num != 0; num /= 10)
    {
        auto digit = '0' + (num % 10);
        digits.push_front(digit);
    }

    return std::string{ std::begin(digits), std::end(digits) };
}
</code></pre>

<p>Similar applies to <code>_cstr</code>. But beware! Since <code>converternum</code> in <code>_cstr</code> gets destructed once the function returns, the pointer returned by <code>c_str()</code> earlier will dangle. To return a valid <code>char*</code>, a copy has to be made - and in that case, the memory could be managed directly anyways:</p>

<pre><code>char* operator"" _cstr(unsigned long long int num)
{
    std::deque&lt;char&gt; digits;

    for(; num != 0; num /= 10)
    {
        char digit = char{'0'+(num % 10)};
        digits.push_front(digit);
    }

    auto string = new char[digits.size() + 1];

    std::copy(std::begin(digits), std::end(digits), string);
    string[digits.size()] = '\0';

    return string;
}
</code></pre>
    </div>