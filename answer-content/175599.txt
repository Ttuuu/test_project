<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If all your objects (<code>description</code>, <code>ingredient</code>) share a common type then you can add them to a collection and loop on it. However, you don't know which <code>text_view</code> is linked to it. So you should add them to a map.
I suppose that <code>description</code> and <code>ingredients</code> are <code>String</code>, then you can do something like</p>

<pre><code>Map&lt;String, TextView&gt; viewsByString = new HashMap&lt;&gt;();
viewsByString.put(description, description_text_view);
viewsByString.put(ingredient2, ingredient2_text_view);
// ..
for (Entry&lt;String, TextView&gt; entry : viewsByString) {
   String string = entry.getKey();
   TextView view = entry.getValue();
   if ( string.isNullOrEmpty() ) {
        view.visibility = View.GONE;
    } else {
       view.text = description;
    }
}
</code></pre>

<p>However, you have to populate the map and that is not always clean. But you can still reduce your code by extracting the condition to a method:</p>

<pre><code>void bind(String text, TextView view) {
    if ( text.isNullOrEmpty() ) {
        view.visibility = View.GONE;
    } else {
        view.text = text;
    }
}

// ...
bind(description, description_text_view);
bind(ingredient2, ingredient2_text_view);
</code></pre>

<p>Or try to use the reflection API, but that's not welcome on Android</p>

<p><strong>Edit, show composite</strong></p>

<p>This is not valid Kotlin, but I hope you can convert it.</p>

<pre><code>class TextWithDividers {
    TextView text;
     Divider[] divs;
      // Constructor 
     setText(String text) {
         this.text.text = text
     }
     setVisibility(int v) {
       this.text.visibility = v;
       this.divs.foreach { d =&gt; d.visibility=v }
     }
}
</code></pre>
    </div>