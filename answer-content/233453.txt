<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The code seems to be too complicated. There are a few ways it can be optimized:</p>

<pre><code>if i1 == len1:
        return intersection
</code></pre>

<p>and</p>

<pre><code>if i2 == len2:
        return intersection
</code></pre>

<p>return statements can be expressed as <code>yield</code> so that the return for the entire array is not required; it returns constantly. However, this condition needs to be there otherwise it won't work; it can be refactored into incrementing both pointers step-wise instead, which eliminates boundary checks and <code>intersection.append(lst1[i1])</code>.</p>

<p>With these rules applied, the following is the refactored version:</p>

<pre><code>def intersect(a, b):
  i = 0
  j = 0
  while i &lt; len(a) and j &lt; len(b):
    if a[i] &gt; b[j]:
      j += 1
    elif a[i] &lt; b[j]:
      i += 1
    else:
      yield a[i]
      j += 1
      i += 1
</code></pre>

<p>Depending on readability, it can be expressed more tersely as:</p>

<pre><code>def intersect(a, b):
  i = 0
  j = 0
  while i &lt; len(a) and j &lt; len(b):
    if a[i] == b[j]:
      yield a[i]
    i, j = i + (a[i] &lt;= b[j]), j + (a[i] &gt;= b[j])
</code></pre>

<p>This works because boolean operators return <code>0</code> if false and <code>1</code> if true. Since the failure conditions will add <code>0</code>, it won't affect the result. The variables have to be assigned together on one line as it has to use <code>i</code> and <code>j</code> copies for array indexing.</p>
    </div>