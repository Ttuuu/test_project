<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Organizationally, something that might help in this type of game is classes:
<a href="https://jeffknupp.com/blog/2014/06/18/improve-your-python-python-classes-and-object-oriented-programming/" rel="nofollow noreferrer">https://jeffknupp.com/blog/2014/06/18/improve-your-python-python-classes-and-object-oriented-programming/</a></p>

<p>For example, you could store all the relevant data for a single room together in a Room class, and you could store the state of various flags like gloves/battery/switch in a GameState class.</p>

<p>In addition to that, try to reduce global variables and instead just pass each function the data it needs.  This will make it much easier to grow your game further - at nine rooms, you already have ten global variables, and that number will keep going up until it becomes unmanageable.  </p>

<p>For example:</p>

<pre><code> def promptMovement(gameState):
     prompt = input("\n\nChoose a direction using AWSD:\n")
     if prompt.lower() == "a":
         attemptMovement(gameState, -1, 0)
     else if prompt.lower() == "w":
         attemptMovement(gameState, 0, 1)
     else if prompt.lower() == "s":
         attemptMovement(gameState, 0, -1)
     else if prompt.lower() == "d":
         attemptMovement(gameState, 1, 0)
     else
         print("That's not a valid input")

def attemptMovement(gameState, dx, dy):
    tx = gameState.x + dx
    ty = gameState.y + dy
    if tx &lt; 1 or tx &gt; 3 or ty &lt; 1 or ty &gt; 3:
        stutter("You hit a wall")
        sound.load("/home/leo/Documents/Python/Sounds/thud.mp3")
        sound.play()
    else:
        gameState.x = tx
        gameState.y = ty
</code></pre>

<p>By splitting the logic into multiple functions, you can avoid repetition and also make the code clearer to read.  This is just a starting point; you could also:</p>

<ul>
<li>Use a dynamic size for the play area rather than hard-coded 3.</li>
<li>Put some of this logic inside GameState as a member function.</li>
</ul>

<p>There are other parts of the code that can be made into functions as well.  For example:</p>

<pre><code>def playSoundFor(sfx, seconds):
    sound.load(sfx)
    sound.play()
    time.sleep(seconds)
    sound.stop()
</code></pre>

<p>In terms of the data itself, there's only so far you can compress that, but the map images (r1-r9) could all be generated by a single function.</p>
    </div>