<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think you might be better served breaking what you have into a database class and a query-type class that will use the database class to accomplish queries and return rows, maybe something like:</p>

<p><strong>/vendor/MyApp/Database/Model.php</strong></p>

<pre><code>&lt;?php
namespace MyApp\Database;
# You may want to implement an interface here or abstract class to allow for
# different connection types (looking to the future)
class Model
{
    protected $conn,
              $Log = false;
    # I think you might want to pass a logging class to save server/connection errors
    public function __construct(\MyApp\Logging\Model $Log)
    {
        $this-&gt;Log = $Log;
    }

    public function createConnection($host,$username,$password,$dbname)
    {
        $this-&gt;conn = new mysqli($host, $username, $password, $dbname);
        if(!empty($this-&gt;conn-&gt;connect_error)) {
            # Here is where you want to log potentially sensitive errors.
            $this-&gt;Log-&gt;saveError($this-&gt;conn-&gt;connect_error);
            # Just let the user know something has gone wrong, they don't need
            # to know the error code and cryptic messages doled out by MySQL
            throw new \Exception('Database can not connect.');
        }

        return $this;
    }

    public function getConnection()
    {
        if($this-&gt;conn instanceof \MySQLi)
            return $this-&gt;conn;

        throw new \Exception('Database connection not yet set.');
    }

    public function closeConnection()
    {
        if($this-&gt;conn instanceof \MySQLi)
            $this-&gt;conn-&gt;close();
    }
}
</code></pre>

<p><strong>/vendor/MyApp/Query/Controller.php</strong></p>

<pre><code>&lt;?php
namespace MyApp\Query;
# You can use the database model to create a contained connection
# You could extend this DB class to make this Query class, I am just going
# to use it instead though
use \MyApp\Database\Model as Connection;

class Controller
{
    private $con,
            $query,
            $Log,
            $Db;

    public function __construct(\MyApp\Logging\Model $Log)
    {
        # You probably want to log failed queries, so use the same logging class
        $this-&gt;Log = $Log;
        # Pass that class to the connection
        $this-&gt;Db = new Connection($this-&gt;Log);
        # Create the connection here using the CONSTANTS in your config file
        # Assign the connection internally to this class
        $this-&gt;con = $this-&gt;Db-&gt;createConnection(DB_HOST,DB_USERNAME,DB_PASSWORD,DB_NAME)
            -&gt;getConnection();
    }
    # You probably want to make a way to bind parameters
    # Also note, I use PDO, so is copied from yours...
    public function query($sql)
    {
        $this-&gt;query = $this-&gt;con-&gt;query($sql);
        if($this-&gt;query != TRUE) {
            # Same as connection, you need to know what really happened,
            # but your user doesn't
            $this-&gt;Log-&gt;saveError($conn-&gt;error);
            throw new \Exception('An error occurred.');
        }

        return $this;
    }
    # Here is where you would send back the rows (probably requires a while() here)
    public function getResults()
    {
        return $this-&gt;query;
    }
    # You may want to be able to get the raw connection, who knows...
    public function getConnection()
    {
        return $this-&gt;con;
    }
}
</code></pre>

<p>You won't ever (or very rarely) have to retrieve the database credentials so you don't really need to dedicate a bunch of methods to assign those.</p>

<p>Depending on your app, you can do a contained engine without having to always add your db credentials to the main database class:</p>

<pre><code>&lt;?php
# I might do a config file that has this kind of info or an editable php 
# array with the credentials in it. Something that can not be directly 
# accessed by a user
define('DB_HOST','localhost');
define('DB_USERNAME','root');
define('DB_PASSWORD','');
define('DB_NAME','dbname');
# Create the logging class
$Logger = new \MyApp\Logging\Model();
# Create the query engine, add in a logging class to keep track of errors
# You don't want to show the user the actual errors, those are best kept
# for the administrator's eyes. The user just needs to know something is not
# working
# One note here, you would want to pass $qEngine to all classes that use
# the query engine / database connection, don't make more instances of this
$qEngine = new \MyApp\Query\Controller($Logger);
# Create a query and get the results
# This is to allow for writing queries and fetch rows (the getResults() method)
$results = $qEngine-&gt;query("SELECT * FROM `users`")-&gt;getResults();
</code></pre>

<p>Finally, you don't really want to echo anything except in your view so you can use a <code>try</code> to catch errors and print them in the view, not inside the data fetching methods. Depending on the error, <code>die()</code> might be a bit much. If you throw an Exception, depending on the severity of it, you can print a designed page that has your error printed to the page instead of the rather bleak look of a <code>die('String of text here.')</code>.</p>

<p>Anyway, I am no hardcore expert, there are lots of books and articles regarding patterns and such that would be helpful to you. These are some things I have done in the past (and still do for the most part). Also note, I haven't tested this specifically, it's more to just give you some ideas.</p>
    </div>