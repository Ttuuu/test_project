<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2><a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP-8</a> Conventions</h2>

<ul>
<li><p>Top-level functions should be separated (preceded and followed) by two blank lines:</p>

<pre><code>logger.setLevel(logging.INFO)


def l(*args, **kwargs):
     &lt;body&gt;
</code></pre></li>
<li><p>Don't mix single quotes <code>'</code> and double quotes <code>"</code> in a single file (or project). You may you use either of them, but </p>

<blockquote>
  <p>Pick a rule and stick to it.</p>
</blockquote></li>
<li><p>Lines should not exceed 79 characters (or 73 characters for documentation).</p></li>
</ul>

<h2>General concerns</h2>

<ul>
<li><p><code>l</code> is a bad name for a function. Always try to pick a name that describes what the function does, like <code>log</code>.</p></li>
<li><p>You haven't added any <a href="https://en.wikipedia.org/wiki/Docstring" rel="nofollow noreferrer">docstrings</a> to your function. If anyone else wants to use your code, they have no way to know what parameters to pass (or what the function actually does). According to <a href="https://www.python.org/dev/peps/pep-0257/" rel="nofollow noreferrer">PEP-257</a>,</p>

<blockquote>
  <p>All modules should normally have docstrings, and all functions and classes exported by a module should also have docstrings.</p>
</blockquote>

<p>A good docstring describes what your function does, what parameters it expects, what it returns and if applicable, what <code>Exception</code> it raises if something goes wrong.</p></li>
<li><p><code>assert</code> should really only be used for debugging purposes, not in the 'stable' release. I propose raising a <code>ValueError</code> instead.</p></li>
<li><p>Since you're only retrieving the <code>level</code> argument from <code>**kwargs</code>, you may as well make it a keyword argument.</p></li>
</ul>

<h2>Improved code</h2>

<p>Taking into account all of the above, here's my rewritten version of your code:</p>

<pre><code>import logging
from inspect import getframeinfo, stack

logger = logging.getLogger()
formatter = logging.Formatter('
    %(asctime)s %(name)-7s %(levelname)-8s %(message)s
')
file_handler = logging.FileHandler('mm.log')
file_handler.setFormatter(formatter)
stream_handler = logging.StreamHandler()
stream_handler.setFormatter(formatter)
logger.addHandler(file_handler)
logger.addHandler(stream_handler)
logger.setLevel(logging.INFO)


def log(*args, level='info'):
    """Log a message to stdout and a log file.
    Arguments:
    - *args: All messages to be logged (as strings).

    - level: The level for debugging. Any of 'debug', 'info', 'warning',
             'error', 'critical'. Defaults to 'info'.

    Raises:
    - ValueError if an invalid `level` argument is passed.
    """
    LEVELS = ('debug', 'info', 'warning', 'error', 'critical')
    level = level.lower()
    if level not in LEVELS:
        raise ValueError('`level` argument must be any of {}'.format(
            str(LEVELS)[1:-1]
        )
    caller = getframeinfo(stack()[1][0])
    file_line = '%s:%d - ' % (caller.filename, caller.lineno)
    logger_input = file_line + ' '.join([str(a) for a in args])
    getattr(logger, level)(logger_input)
</code></pre>

<p><em>The use of <code>*args</code> in the above snippet breaks backward compatibility!</em></p>
    </div>