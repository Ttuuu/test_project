<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm agree with @TorbenPutkonen's <a href="https://codereview.stackexchange.com/a/242175/203649">answer</a> that you can refactor your code using <a href="https://docs.oracle.com/javase/8/docs/api/java/util/function/Function.html" rel="nofollow noreferrer">Function</a>.</p>

<p>From your code:</p>

<pre><code>ArrayList&lt;String&gt; files = new ArrayList&lt;&gt;();
if(pathOrName.equalsIgnoreCase("path")) { //adding strings to your list calling method toString }
else if(pathOrName.equalsIgnoreCase("name")) { //adding strings to your list calling method getName } }
return files;
</code></pre>

<p>Basically in your code you will return an empty list  or if your String <code>pathOrName</code> is case insensitive equals to <code>"path"</code> or <code>"name"</code> you will return a new list of Strings using method <code>toString</code> or method <code>getName</code>.</p>

<p>You can create a <code>Map&lt;String, Function&lt;File, String&gt;&gt;</code> in this way:</p>

<pre><code>Map&lt;String, Function&lt;File, String&gt;&gt; map = new HashMap&lt;&gt;();
map.put("path", (file) -&gt; file.toString());
map.put("name", (file) -&gt; file.getName());
</code></pre>

<p>Then you can return the new List created like below:</p>

<pre><code>String lowercase = pathOrName.toLowerCase();
if (!map.containsKey(lowercase)) { return Collections.emptyList(); }
return Arrays.stream(listOfFiles)
        .filter(File::isFile)
        .map(file -&gt; map.get(lowercase).apply(file))
        .collect(Collectors.toList());
</code></pre>

<p>The full code of the method is below:</p>

<pre><code>public static List&lt;String&gt; getFilePathOrName(String pathOrName) {
    File folder = new File("C:\\Users\\damar\\OneDrive\\Documenten\\FolderTest\\Folderretouren\\Niet verdeeld");
    File[] listOfFiles = folder.listFiles();        
    Map&lt;String, Function&lt;File, String&gt;&gt; map = new HashMap&lt;&gt;();
    map.put("path", (file) -&gt; file.toString());
    map.put("name", (file) -&gt; file.getName());

    String lowercase = pathOrName.toLowerCase();
    if (!map.containsKey(lowercase)) { return Collections.emptyList(); }
    return Arrays.stream(listOfFiles)
            .filter(File::isFile)
            .map(file -&gt; map.get(lowercase).apply(file))
            .collect(Collectors.toList());
    }
</code></pre>

<p>You could add a new parameter in your method passing the path of your file folder instead of instantiating it inside your method.</p>
    </div>