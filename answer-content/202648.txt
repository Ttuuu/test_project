<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Bubble Sort</h3>

<p>Are Random-Access Iterators overconstraining the <a href="https://en.cppreference.com/w/cpp/iterator" rel="nofollow noreferrer">requirements</a>? Looking over the operations, you need to support the following</p>

<ul>
<li><code>begin != end</code> - Inequality comparison for iterators (Forward Iterator)</li>
<li><code>temp_lhs = begin</code> - Copy-assignable (Iterator)</li>
<li><code>++temp_lhs</code> - Incrementable (Iterator)</li>
<li><code>--end</code> - Prefix decrement (Bidirectional Iterator)</li>
<li>Multipass (Forward Iterator)</li>
</ul>

<p>Your <code>bubble_sort</code> supports iterators that are Random Access or Bidirectional.</p>

<hr>

<pre><code>    template &lt;typename BidirIterator, typename Comparator = 
        std::less&lt;typename std::iterator_traits&lt;RandIterator&gt;::value_type&gt;&gt;
    void bubble_sort(...)
</code></pre>

<p><a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0634r2.html" rel="nofollow noreferrer">Down with <code>typename</code></a> has been accepted for <a href="/questions/tagged/c%2b%2b20" class="post-tag" title="show questions tagged 'c++20'" rel="tag">c++20</a>. Until you have access to that feature, use helper traits to help with the readability.</p>

<pre><code>    template &lt;typename Iterator&gt; 
    using value_type_t = typename std::iterator_traits&lt;Iterator&gt;::value_type;

    template &lt;typename BidirIterator, typename Comparator = 
        std::less&lt;value_type_t&lt;BidirIterator&gt;&gt;&gt;
    void bubble_sort(...)
</code></pre>

<p><a href="/questions/tagged/c%2b%2b14" class="post-tag" title="show questions tagged 'c++14'" rel="tag">c++14</a> introduced <a href="https://stackoverflow.com/a/20383136/3762339">transparent comparators</a>.  From <a href="https://en.cppreference.com/w/cpp/utility/functional/less" rel="nofollow noreferrer"><code>std::less&lt;&gt;</code></a>,</p>

<blockquote>
  <p>The standard library provides a specialization of <code>std::less</code> when <code>T</code> is not specified, which leaves the parameter types and return type to be deduced.</p>
</blockquote>

<p>You may omit the type in the comparator and let it be deduced.</p>

<pre><code>    template &lt;typename BidirIterator, typename Comparator = std::less&lt;&gt;&gt;
    void bubble_sort(...)
</code></pre>

<hr>

<pre><code>                    std::swap(*temp_lhs, *temp_rhs);
</code></pre>

<p>What happens if <code>swap</code> is specialized as a customization point for your dereferenced iterator type?  You could use the <a href="https://en.cppreference.com/w/cpp/language/adl" rel="nofollow noreferrer">ADL two-step</a>,</p>

<pre><code>                    using std::swap;
                    swap(*temp_lhs, *temp_rhs);
</code></pre>

<p>Or you could use <a href="https://en.cppreference.com/w/cpp/algorithm/iter_swap" rel="nofollow noreferrer"><code>std::iter_swap</code></a>, which does the two-step and dereference for you.</p>

<pre><code>                    std::iter_swap(temp_lhs, temp_rhs);
</code></pre>

<p>You'll notice a pattern where you guard a <code>swap</code> with a comparison check,</p>

<pre><code>if (cmp(rhs, lhs)) {
    std::iter_swap(lhs, rhs);
}
</code></pre>

<p>That's a candidate for an algorithm!</p>

<pre><code>template &lt;typename FwdIterator, typename Compare&gt;
bool iter_swap_if(FwdIterator lhs, FwdIterator rhs, Compare cmp) {
    bool result = cmp(*rhs, *lhs);
    if (result) {
        std::iter_swap(lhs, rhs);
    }
    return result;
}
</code></pre>

<p>You can write a version of bubble sort for Forward iterators by assigning the known previous to end as your new end.  Bubble sort is also nice in that a pass with no swaps means it's sorted and can exit early.</p>

<pre><code>template &lt;typename FwdIterator, typename Compare = std::less&lt;&gt;&gt;
inline void bubble_sort(FwdIterator first, FwdIterator last, Compare cmp = Compare{}) {
    if (first == last || std::next(first) == last) {
        return; 
    }

    for (bool swapped = true; swapped; /* */) {
        swapped = false;
        auto curr = first;
        for (auto next = std::next(curr); next != end; (void)++next, ++curr) {
            swapped |= iter_swap_if(curr, next, cmp);    
        }
        last = curr;
    }
}
</code></pre>

<hr>

<h3>Selection Sort</h3>

<p>As with <code>bubble_sort</code>, Random-Access iterators is overconstraining your iterator requirement.</p>

<ul>
<li><code>begin != end</code> - Inequality comparison for iterators (Forward Iterator)</li>
<li><code>smallest = begin</code> - Copy-assignable (Iterator)</li>
<li><code>++begin</code> - Incrementable (Iterator)</li>
</ul>

<p>So Forward iterator is your requirement.</p>

<pre><code>        while (begin != end) {
            auto smallest = begin;
            for (auto temp = begin; temp != end; ++temp) {
                if (cmp(*temp, *smallest)) {
                    smallest = temp;
                }
            }
            if (smallest != begin) {
                std::swap(*smallest, *begin);
            }
            ++begin;
        }
</code></pre>

<p>If you don't want to use <a href="https://en.cppreference.com/w/cpp/algorithm/min_element" rel="nofollow noreferrer"><code>std::min_element</code></a>, then extract the minimum element finding algorithm from your <code>selection_sort</code> and place it into its own abstraction.</p>

<pre><code>        for (; first != last; ++first) {
          // std::iter_swap(first, std::min_element(first, last, cmp));
             auto smallest = std::min_element(first, last, cmp);
             std::iter_swap(first, smallest);
        }
</code></pre>

<p>Don't let <a href="/questions/tagged/reinventing-the-wheel" class="post-tag" title="show questions tagged 'reinventing-the-wheel'" rel="tag">reinventing-the-wheel</a> prevent you from rewriting or reusing existing abstractions.</p>

<hr>

<h3>Bottom-Up Merge Sort</h3>

<p>As Martin noted, this is a long function and really could benefit from one abstraction.</p>

<pre><code>    template &lt;typename RandIterator, typename Comparator = std::less&lt;&gt;&gt;
    inline void merge_sort(RandIterator begin, RandIterator end, Comparator cmp = Comparator()) {
        while each successively longer chunk of pow2 is less than length
            for each paired chunk
                inplace_merge(first, mid, last, cmp);
    }
</code></pre>

<p><code>inplace_merge</code> can be reused for top-down merge sort and other merge operations.</p>

<hr>

<blockquote>
  <ol>
  <li>Any glaring mistakes? (I don't feel like my testing is as good as it should be.)</li>
  </ol>
</blockquote>

<p>Don't forget about the empty set!  <code>merge_sort</code> segfaults when <code>begin</code> and <code>end</code> are equal.  Test on containers with varying shape/size characteristics.  Think about what possible states your input arguments can possibly be.  Use different types (pairs for stability testing).  This is what I threw at it.</p>

<pre><code>#include &lt;algorithm&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;vector&gt;

#define TEST_SORT(NAME)                                                         \
template &lt;typename I, typename C = std::less&lt;&gt;&gt;                                 \
void test_ ## NAME (I first, I last, C cmp = C{}) {                             \
    std::cout &lt;&lt; #NAME &lt;&lt; ":\n";                                                \
    std::for_each(first, last, [](auto t) {                                     \
        bruglesco:: NAME ## _sort(begin(t), end(t), cmp);                       \
        std::cout &lt;&lt; std::boolalpha &lt;&lt; std::is_sorted(begin(t), end(t)) &lt;&lt; ","; \
    });                                                                         \
    std::cout &lt;&lt; "\n\n";                                                        \
}     

TEST_SORT(selection)
TEST_SORT(bubble)
TEST_SORT(merge)

#undef TEST_SORT

int main() {
    using C = std::vector&lt;int&gt;;

    auto empty         = C{};
    auto singleton     = C{0};
    auto doubleton     = C{0, 1};
    auto random        = C{6, 4, 1, 5, 8, 2, 3, 0, 9, 7};
    auto ascend        = C{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
    auto descend       = C{9, 8, 7, 6, 5, 4, 3, 2, 1, 0};
    auto one_off       = C{0, 1, 3, 2, 4, 5, 7, 6, 8, 9};
    auto few_unique    = C{0, 1, 2, 0, 1, 2, 0, 1, 2, 0};
    auto organ         = C{5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 5};
    auro hill          = C{0, 1, 2, 3, 4, 5, 4, 3, 2, 1, 0};

    auto sets = std::vector&lt;C&gt;{empty, singleton, doubleton, random, ascend
                               descend, one_off, few_unique, organ, hill};

    test_selection(begin(sets), end(sets));
    test_bubble(begin(sets), end(sets));
    test_merge(begin(sets), end(sets));
}
</code></pre>

<blockquote>
  <ol start="2">
  <li>Any performance optimizations I can make? *Assume for the sake of discussion that each function needs to represent said algorithm. (The best optimization for bubble sort is of course use a different algorithm.) Also assume that merge-sort needs to be done in-place.</li>
  </ol>
</blockquote>

<ul>
<li>Bubble sort - can return early if no swaps happen during a pass. Also, don't sleep on the performance of bubble sort with small sets of cheap to copy data or are working with nearly sorted data.</li>
<li>Selection sort - the interval you loop over may be <code>[first, last-1)</code> since the minimum element from <code>[last-1, last)</code> will always be the last remaining element at position <code>last-1</code>.</li>
<li>Merge sort - Using a buffer for merging reduces the number of comparisons from linearithmic to linear.  Bubble/Insertion sort can often be faster on small sets of values.  Measure to find the threshold where Bubble or Insertion sort outperform Merge Sort for an adaptive approach.</li>
</ul>

<blockquote>
  <ol start="3">
  <li>I believe I managed to maintain stability(which was not a requirement.) No?</li>
  </ol>
</blockquote>

<ul>
<li>Bubble sort - No. The negation on the compare result swaps on equal. You really wanted <code>cmp(*temp_rhs, *temp_lhs)</code>.</li>
<li>Selection sort - No. Rotate instead of swap.</li>
<li>Merge sort - Yes!</li>
</ul>

<blockquote>
  <ol start="4">
  <li>Any issues with readability or decisions I should have documented?</li>
  </ol>
</blockquote>

<p>Answered in the review.</p>
    </div>