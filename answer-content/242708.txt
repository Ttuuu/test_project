<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p></p>

<h2>Use References in place of <code>CreateObject</code></h2>

<p>If you include the reference to the <code>Microsoft Scripting Runtime</code> you can reduce the <code>dim</code> and <code>set</code> of <code>objFSO</code> to </p>

<pre class="lang-vb prettyprint-override"><code>Dim fso         As New Scripting.FileSystemObject
</code></pre>

<p>to increase readability. Note that i have removed the <code>obj</code> prefix as it is no longer dimmed as an object. Similarly, this can be done with the file as </p>

<pre class="lang-vb prettyprint-override"><code>Dim ScriptFile  As Scripting.File
</code></pre>

<p>Doing this not only makes your code siginificantly easier to read, but also enables intellisense for these objects which makes it easier to write with them. </p>

<h2>Make use of line continuation</h2>

<p>You can use <code>_</code> to allow for multi-line operations, and make your code more readable. For instance </p>

<pre class="lang-vb prettyprint-override"><code>OutputText = OutputText &amp; "SET" &amp; vbTab &amp; "15-01" &amp; vbTab &amp; "(" &amp; ArrayElementCounter &amp; ",0,00)" &amp; vbTab &amp; vbDoubleQuote &amp; ArrayForRange(ArrayElementCounter + 1, 1) &amp; vbDoubleQuote &amp; vbCrLf
</code></pre>

<p>can be formatted as </p>

<pre class="lang-vb prettyprint-override"><code>OutputText = _ 
    OutputText &amp; "SET" &amp; vbTab &amp; "15-01" &amp; vbTab &amp; _ 
    "(" &amp; ArrayElementCounter &amp; ",0,00)" &amp; vbTab &amp; _ 
    vbDoubleQuote &amp; ArrayForRange(ArrayElementCounter + 1, 1) &amp; _ 
    vbDoubleQuote &amp; vbCrLf
</code></pre>

<p>making it easier to read. Not that the <code>_</code> must be preceded by a space and that you cannot have comments after the line continuation character</p>

<h2>Consider using a named range for E3</h2>

<p>To make your code more readable, you may consider naming the range <code>E3</code> to something along the names of <code>FilePath</code>. You can do this by typing over the <code>E3</code> that appears to the left of the function bar when <code>E3</code> is selected or through the <code>Name Manager</code> under the <code>Formulas</code> ribbon menu. </p>

<p>This will allow you to reference the cell in VBA as <code>ws.[FilePath]</code> (where ws is your worksheet object) in place of <code>ThisWorkbook.Sheets("Sheet1").Range("E3")</code>. This will also make it so that if you move the named cell, you do not have to change the code (eg. if you insert a row it above for titling or something) </p>

<p>If you decide against this, you can still use the <code>[...]</code> notation to get this reference down to <code>ws.[E3]</code>.</p>

<h2>Consider using ListObjects</h2>

<p>If you convert your table into a <a href="https://docs.microsoft.com/en-us/office/vba/api/excel.listobject" rel="nofollow noreferrer"><code>ListObject</code></a> using <code>CTRL + T</code> while highlighting it, you can greatly reduce the complexity of some operations. </p>

<p>For instance if you define your listobject as <code>lo</code>, the row number of the last row can be found with </p>

<pre class="lang-vb prettyprint-override"><code>lo.Listrows.Count+lo.Range.Row
</code></pre>

<p>rather than </p>

<pre class="lang-vb prettyprint-override"><code>ws.Cells(Rows.Count, "B").End(xlUp).Row
</code></pre>

<p>Notably, the list object also allows for the data to be directly referenced with </p>

<pre class="lang-vb prettyprint-override"><code>lo.DataBodyRange
</code></pre>

<p>or for the iteration over <code>lo</code> as </p>

<pre class="lang-vb prettyprint-override"><code>For Each lr In lo.ListRows
</code></pre>

<p>where <code>lr</code> is a <code>ListRow</code> object</p>

<hr>

<h1>All Together</h1>

<p>As you noted in your comments, it is faster to handle all the data by pushing it into an array, however, this can lead to memory issues with large datasets (particularlly if you are using 32 Bit Excel which has a 2GB memory limit). So, just to be thurough I have included two solutions, one which puts the data into a variant array, and one which iterates over the data using <code>ListRows</code>. While both are quick the iterative approach is ~6% slower.</p>

<p>Both solutions assume that the table as been converted to a listobject, and that the range <code>E3</code> has been renamed to <code>FilePath</code></p>

<h2>Array Approach (for small lists)</h2>

<pre class="lang-vb prettyprint-override"><code>Sub WriteToPCSFile_SmallList()
    '----------------------------------------------------------------------------------------------------------
    'Description of operations:
    '----------------------------------------------------------------------------------------------------------
    '
    'First the sub grabs data from the listobject.
    'Then the range containing the extensions and names is created using these variables.
    '
    'A file system object is created and a new .pcs file is created (represented by variable 'txtStream'
    'The file path for the .pcs file is defined by the user on Sheet1 in range "FilePath" (E3)
    '
    'The range is put into an array as this is quicker than reading directly from each cell in the range.
    'The output string (out) is built by concatanating itself with each array element contatining a name.
    '      Each iteration has a carraige return/line feed (chr(13)&amp;chr(10)) at the end of the string so
    '       it's written on a new line
    '
    'The out string is then written to the .pcs file.
    '

    '==========================================================================================================
    '------------ Set variables for our range and dynamically define the range of ext and names --------------=
    '==========================================================================================================


    Dim ws  As Excel.Worksheet, _
        lo  As Excel.ListObject, _
        dat As Variant, _
        row As Long, _
        out As String

    '==========================================================================================================
    '------------ Collect data -------------------------------------------------------------------------------=
    '==========================================================================================================
    Set ws = Application.ThisWorkbook.Worksheets("Sheet1")
    Set lo = ws.[A1].ListObject
    Let dat = lo.DataBodyRange.Value

    If lo.ListRows.Count = 0 Then
        Call MsgBox("Please enter at least 1 extension AND name!", vbCritical + vbOKOnly, "No Extension And Name")
        Exit Sub
    End If

    '==========================================================================================================
    '------------ Make out string ----------------------------------------------------------------------------=
    '==========================================================================================================
    For row = 1 To UBound(dat, 1)
        If Not dat(row, 2) = Empty Then
            Let out = out &amp; _
                    "SET" &amp; vbTab &amp; "15-01" &amp; vbTab &amp; _
                    "(" &amp; row - 1 &amp; ",0,00)" &amp; vbTab &amp; _
                    vbDoubleQuote &amp; dat(row, 2) &amp; _
                    vbDoubleQuote &amp; vbCrLf
        End If
    Next row

    '==========================================================================================================
    '------------ Create scripting file system object and create .pcs file to user defined path --------------=
    '==========================================================================================================
    Dim fso         As New Scripting.FileSystemObject
    Dim txtStream   As Scripting.TextStream

    Let UDFilePath = ws.[FilePath]
    If UDFilePath = "" Then
        Call MsgBox("Please enter a file path in cell E3 to save the script file to.", vbInformation, "Save Location Required")
        Call ws.[FilePath].Select
        Exit Sub
    ElseIf Not Right(UDFilePath, 1) = "\" Then
        Let UDFilePath = UDFilePath &amp; "\"       ''Error check to ensure back slash is last character
    End If

    On Error GoTo PathNotFound
    Set txtStream = fso.CreateTextFile(UDFilePath &amp; "NEC_15-01_Names_Script.pcs", 2)
    On Error GoTo 0

    '==========================================================================================================
    '------------ Write Data to the File ---------------------------------------------------------------------=
    '==========================================================================================================
    Call txtStream.Write(out)
    Call txtStream.Close

    Exit Sub

PathNotFound:           ''  Error handler if non valid file path is used (such as non existent path)
    If Err.Number = 76 Then
        Call MsgBox("Run time error (76) has occured." &amp; vbNewLine &amp; vbNewLine &amp; _
                "The following path does not exist or is not in a valid format:" &amp; vbNewLine &amp; _
                vbDoubleQuote &amp; UDFilePath &amp; vbDoubleQuote &amp; vbNewLine &amp; vbNewLine &amp; _
                "Please check the path in cell E3 and try again.", _
                vbCritical + vbOKOnly, "Invalid File Path")
    Else                ''  Raise normal error if not due to invalid file path
        Call Err.Raise(Err.Number, Err.Source, Err.Description, Err.HelpFile, Err.HelpContext)
    End If

End Sub
</code></pre>

<h2>Iterative Approach (for large lists)</h2>

<pre class="lang-vb prettyprint-override"><code>Sub WriteToPCSFile_LargeList()

    '----------------------------------------------------------------------------------------------------------
    'Description of operations:
    '----------------------------------------------------------------------------------------------------------
    '
    'First the sub grabs data from the listobject.
    'Then the range containing the extensions and names is created using these variables.
    '
    'A file system object is created and a new .pcs file is created (represented by variable 'txtStream'
    'The file path for the .pcs file is defined by the user on Sheet1 in range "FilePath" (E3)
    '
    'The range is iterated over, rather than being put into an array, as this is more memotry efficent, and
    'the file is written to line by line
    '
    Dim ws  As Excel.Worksheet, _
        lo  As Excel.ListObject, _
        lr  As Excel.ListRow, _
        row As Long, _
        out As String

    '==========================================================================================================
    '------------ Collect data -------------------------------------------------------------------------------=
    '==========================================================================================================
    Set ws = Application.ThisWorkbook.Worksheets("Sheet1")
    Set lo = ws.[A1].ListObject

    If lo.ListRows.Count = 0 Then
        Call MsgBox("Please enter at least 1 extension AND name!", vbCritical + vbOKOnly, "No Extension And Name")
        Exit Sub
    End If

    '==========================================================================================================
    '------------ Create scripting file system object and create .pcs file to user defined path --------------=
    '==========================================================================================================
    Dim fso         As New Scripting.FileSystemObject
    Dim txtStream   As Scripting.TextStream

    Let UDFilePath = ws.[FilePath]
    If UDFilePath = "" Then
        Call MsgBox("Please enter a file path in cell E3 to save the script file to.", vbInformation, "Save Location Required")
        Call ws.[FilePath].Select
        Exit Sub
    ElseIf Not Right(UDFilePath, 1) = "\" Then
        Let UDFilePath = UDFilePath &amp; "\" 'Error check to ensure back slash is last character
    End If

    On Error GoTo PathNotFound
    Set txtStream = fso.CreateTextFile(UDFilePath &amp; "NEC_15-01_Names_Script.pcs", 2)
    On Error GoTo 0

    '==========================================================================================================
    '------------ Write Data to the File ---------------------------------------------------------------------=
    '==========================================================================================================

    For Each lr In lo.ListRows             ''  iter over rows
        If Not lr.Range(1, 2) = Empty Then  ''  write only if there is a name
            Call txtStream.WriteLine( _
                    "SET" &amp; vbTab &amp; "15-01" &amp; vbTab &amp; _
                    "(" &amp; row &amp; ",0,00)" &amp; vbTab &amp; _
                    vbDoubleQuote &amp; lr.Range(1, 2) &amp; vbDoubleQuote)
        End If
        Let row = row + 1                   ''  iter row counter
    Next lr

    Call txtStream.Close                    ''  close the file

    Exit Sub

PathNotFound:   'Error handler if non valid file path is used (such as non existent path)
    If Err.Number = 76 Then
        Call MsgBox("Run time error (76) has occured." &amp; vbNewLine &amp; vbNewLine &amp; _
                "The following path does not exist or is not in a valid format:" &amp; vbNewLine &amp; _
                vbDoubleQuote &amp; UDFilePath &amp; vbDoubleQuote &amp; vbNewLine &amp; vbNewLine &amp; _
                "Please check the path in cell E3 and try again.", _
                vbCritical + vbOKOnly, "Invalid File Path")
    Else    'Raise normal error if not due to invalid file path
        Call Err.Raise(Err.Number, Err.Source, Err.Description, Err.HelpFile, Err.HelpContext)
    End If

End Sub
</code></pre>
    </div>