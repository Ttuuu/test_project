<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Syntax</h1>

<p>First things first - I had to fix a handful of syntax errors for this to compile.  The most glaring is the misspelling of <code>std::cout</code> in many places.  The other bug is the forbidden conversion of string literals from <code>const char*</code> to <code>char*</code> - fixed by declaring <code>a</code> as <code>const char* a[]</code>.</p>

<h1>Style</h1>

<p>The code is very dense - more whitespace around operators will help readability.  The one-letter variable names also hinder comprehension - <code>i</code> and <code>j</code> are obviously loop indexes, but what's <code>k</code> for?</p>

<p>These style issues are especially important in interviews - your interviewer wants to know whether you can write code that other employees are able to work with.</p>

<h1>Structure</h1>

<p>Everything here is crammed into <code>main()</code>.  That's not great practice in general, as it makes your code hard to re-use.  Prefer to write a function - that's more amenable to unit test, allowing you to specify different strings to scroll, and to capture the output (e.g. into a <code>std::ostringstream</code>).</p>

<h1>Algorithm</h1>

<p>Rather than writing a single character at a time, it's probably easier to work with a <code>std::string</code>.  If we pad both ends with spaces, it's then just a matter of selecting the right substring to print at any given time.</p>

<hr>

<h1>Re-writing the code</h1>

<ol>
<li><p>I'd start by defining the interface I want to use.  Something like this:</p>

<pre><code>#include &lt;iostream&gt;

int main()
{
    scroll_text(std::cout, "TEST", 4);
}
</code></pre></li>
<li><p>Now we know how we want to call it, let's write the signature:</p>

<pre><code>void scroll_text(std::ostream&amp; out,
                 const std::string&amp; text,
                 unsigned width)
</code></pre></li>
<li><p>And now implement using the padding strategy I mentioned:</p>

<pre><code>const std::string padding(width-1, ' ');
auto padded_text = padding + text + padding;

for (unsigned i = 0;  i &lt;= padded_text.length() - width;  ++i) {
    out &lt;&lt; padded_text.substr(i, width) &lt;&lt; '\n';
}
</code></pre></li>
</ol>

<p>Putting this all together:</p>

<pre><code>#include &lt;ostream&gt;
#include &lt;string&gt;

void scroll_text(std::ostream&amp; out,
                 const std::string&amp; text,
                 unsigned width)
{
    const std::string padding(width-1, ' ');
    auto padded_text = padding + text + padding;

    for (unsigned i = 0;  i &lt;= padded_text.length() - width;  ++i) {
        out &lt;&lt; padded_text.substr(i, width) &lt;&lt; '\n';
    }
}


// Test program

#include &lt;iostream&gt;

int main()
{
    scroll_text(std::cout, "TEST", 4);
}
</code></pre>

<hr>

<h1>Advanced</h1>

<p>We could make the code more efficient by using <code>std::string_view</code> to reduce the amount of copying.  I won't show that here, but you might consider it as an exercise.</p>

<p>Another exercise - make the <code>width</code> argument optional, and if not specified, then use the length of the input string as the width.</p>
    </div>