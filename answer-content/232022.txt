<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I have some suggestions for your code, the first thing I saw from your <code>main</code> method is the use of <code>CloneNotSupportedException</code></p>

<p><strong>Create a copy constructor instead of using clone() method</strong></p>

<p>I have taken your <code>Product</code> class and added a copy constructor to avoid the use of <code>CloneNotSupportedException</code> like the code below:</p>

<pre><code>public class Product {
    private String name;
    private int price;
    private int count;

    public Product(String name, int price, int count) {
        this.name = name;
        this.price = price;
        this.count = count;
    }

    //copy constructor for one product
    public Product(Product product) {
        this.name = product.name;
        this.price = product.price;
        this.count = product.count;
    }
}
</code></pre>

<p>If you want to print the internal state of an object override the <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#toString--" rel="nofollow noreferrer">toString</a> method and return a String:</p>

<pre><code>@Override
public String toString() {
    return String.format("%s costs %d. There are %d", name, price, count);
}
</code></pre>

<p>Now you can use the <code>toString</code> method to print an array of <code>Product</code>:</p>

<pre><code>public static void print(Product[] assortiment) {
    final int n = assortiment.length;
    for(int i = 0; i &lt; n; ++i) {
        System.out.println((i + 1) + ". " + assortiment[i]);
    }
}
</code></pre>

<p>To obtain a copy of an array you can use the method <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Arrays.html#copyOf-T:A-int-" rel="nofollow noreferrer">Arrays.copyOf</a></p>

<pre><code>public static Product[] copyOf(Product[] original) {
    final int n = original.length;
    Product[] copy = Arrays.copyOf(original, n);
    return copy;
}
</code></pre>

<p>These code changes could be applied to other classes in your code. I have seen in your code the following lines:</p>

<blockquote>
<pre><code>public void play(Account user) throws CloneNotSupportedException {
    AccountAndDataBase userAndDataBaseClone;
    if(user == null) {
        System.err.println("user is not declared!");
        return;
    }
    if(!Account.isIn(dataBase, user)) {
        System.err.println("user " + user.getLogin() + " is not in the database!");
        return;
    }
...omitted
}
</code></pre>
</blockquote>

<p>This implies that when you pass illegal arguments to one method the method fails printing a message on the screen; for dealing with illegal arguments you can use the <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/IllegalArgumentException.html" rel="nofollow noreferrer">IllegalArgumentException</a> class and construct a custom message for the exception like the code below:</p>

<pre><code>public void play(Account user) throws CloneNotSupportedException {
    AccountAndDataBase userAndDataBaseClone;
    if(user == null) {
        throw new IllegalArgumentException("user is not declared!");
    }
    if(!Account.isIn(dataBase, user)) {
        throw new IllegalArgumentException("user " + user.getLogin() + " is not in the database!");
    }
...omitted
}
</code></pre>
    </div>