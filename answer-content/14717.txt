<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Not an answer</h3>
<p>don't vote.</p>
<p>Extended comment.</p>
<p>My first pass at this would be:</p>
<pre><code>int main()
{
    std::cout &lt;&lt; "Count of word 'a' or 'A': "
              &lt;&lt; std::count_if(std::istream_iterator&lt;std::string&gt;(std::cin),
                               std::istream_iterator&lt;std::string&gt;(),
                               [](std::string const&amp; word)
                               {
                                    return word == "a" || word == "A";
                               }
                              );
}
</code></pre>
<p>But the problem with this is that this only breaks up words based on space. What happens if there is punctuation in the input?</p>
<p>Well just imbue the stream with a facet that tells the stream functors that all non word characters are space and then the stream operators will work.</p>
<pre><code>class OnlyLettersNotSpaceFacet: public std::ctype&lt;char&gt;
{
    public:
        typedef std::ctype&lt;char&gt;   base;
        typedef base::char_type    char_type;

        OnlyLettersNotSpaceFacet(std::locale const&amp; l) : base(table)
        {
            // Get the ctype facet of the current locale
            std::ctype&lt;char&gt; const&amp;  defaultCType = std::use_facet&lt;std::ctype&lt;char&gt; &gt;(l);

            // Copy the default flags for each character from the current facet
            static char data[256];
            for(int loop = 0; loop &lt; 256; ++loop) {data[loop] = loop;}
            defaultCType.is(data, data+256, table);

            for(int loop = 0; loop &lt; 256; ++loop)
            {
                if (!std::isalpha(loop))
                {   table[loop] |= base::space;  // anything that is not alpha
                }                                // is now considered a space.
            }
        }
    private:
        base::mask table[256];
};
</code></pre>
<p>Now we can write the code just like we did first time (after imbuing the stream).</p>
<pre><code>int main()
{
    // Create a local and imbue the stream with it.
    const std::locale olns(std::cin.getloc(), new OnlyLettersNotSpaceFacet(std::cin.getloc()));
    std::cin.imbue(olns);


    std::cout &lt;&lt; "Count of word 'a' or 'A': "
              &lt;&lt; std::count_if(std::istream_iterator&lt;std::string&gt;(std::cin),
                               std::istream_iterator&lt;std::string&gt;(),
                               [](std::string const&amp; word)
                               {
                                    return word == "a" || word == "A";
                               }
                              );
}
// Note some systems have a bug in the standard where imbue on std::cin
// silently fails. If this is the case then convert the code to read from a file.
// Note you need to imbue the filestream `before` opening it.
</code></pre>
    </div>