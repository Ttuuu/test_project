<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Follow-up</h2>

<p>In your <a href="https://codereview.stackexchange.com/questions/222418/compact-command-line-argument-parser">previous post</a>, I described some design issues I found. 
I'm happy to see your new design is cleaner (specially the lexer) 
and no longer depends on an already parsed array of tokens!</p>

<p><a href="https://codereview.stackexchange.com/users/51173/pieter-witvoet">Pieter Witvoet</a>  has already went through your code and detected many edge cases
your API falls short. (No need for me to re-iterate them)
This is mainly because you still have a "<strong>lack of clear specification</strong>".
I can't stress enough how important this is, specially since you state yourself</p>

<blockquote>
  <p>you want to provide several layers of abstraction and allow for a flexible design.</p>
</blockquote>

<p>Without going into much detail (I'm mostly using pseudo-code), I will walk you through the steps required to
create a compiler, reflecting back to your code.</p>

<p>But first, we need a <strong>clear specification</strong>.</p>

<hr>

<h2>Specification</h2>

<p>We need to establish a specification. And since we are creating a compiler
from scratch, why not be ambitious about it? 
As starting point, we have the following snippet with <code>cmd_line_args</code> being the command line arguments string
and <code>cmd</code> the object graph representing the compiled string.</p>

<p>In pseudo-code:</p>

<p><code>var cmd = compile(cmd_line_args);</code></p>

<h3>Context-bound language</h3>

<p>Consider the following command line: <code>cmd/ioc:\temp\</code></p>

<p>It's written in "<strong>compact form</strong>", a form with the highest density. 
It could be normalized to "<strong>friendly form</strong>", a form that has optimal readability.</p>

<p>But how should we interpret this? In other words, what is our friendly form?
This brings us to our first design decision. Do we require a "<strong>context</strong>" or is our
language "<strong>context-free</strong>"?</p>

<ul>
<li><p>If our language is context-free, the command line above is ill-defined. 
The compact form would be the same as the friendly form: <code>cmd /io c:\temp\</code></p></li>
<li><p>If on the other hand, our language is context-bound, the command line above would
have a different friendly form depending on the context. The context could specify
the known switches, which would allow us to combine switches. </p></li>
</ul>

<p>Some possibilities include:</p>

<ul>
<li><p>If the context specifies a verb "cmd" 
with switches "i" and "o"
with the former having an argument "path", 
the friendly form would be: <code>cmd /o /i c:\temp\</code></p></li>
<li><p>If the context specifies a verb "cmd" 
with switches "i" and "o"
with the latter having an argument "path", 
the friendly form would be: <code>cmd /i /o c:\temp\</code></p></li>
<li><p>If the context specifies a verb "cmd" 
with switch "io" having an argument "path", 
the friendly form would be: <code>cmd /io c:\temp\</code></p></li>
</ul>

<blockquote>
  <p>Let's make sure our compiler is context-free, but can be augmented with an optional context.</p>
</blockquote>

<p>In pseudo-code:</p>

<p><code>var cmd = compile(cmd_line_args, context = null);</code></p>

<h3>Lexicon</h3>

<p>Next up, we need to determine which delimiters and other keywords are allowed.
The command line <code>cmd /o c:\temp\</code> could be formatted in different styles.
Note that the "<strong>system path seperator</strong>" influences the delimiters.</p>

<p>Some possibilities include:</p>

<ul>
<li>win style: <code>cmd /o c:\temp\</code></li>
<li>win posix style: <code>cmd -o c:\temp\</code></li>
<li>win posix long style: <code>cmd --output c:\temp\</code></li>
<li>unix posix style: <code>cmd -o /c/temp/</code></li>
<li>unix posix long style: <code>cmd --output /c/temp/</code></li>
</ul>

<p>Furthermore, a switch and its arguments could be formatted in different styles.</p>

<p>Some possibilities include:</p>

<ul>
<li><code>cmd /o:c:\temp\</code></li>
<li><code>cmd /o=c:\temp\</code></li>
<li><code>cmd /o c:\temp\</code></li>
<li><code>cmd /o c:\temp\out1\ c:\temp\out2\</code></li>
<li><code>cmd /o c:\temp\out1\,c:\temp\out2\</code></li>
</ul>

<blockquote>
  <p>Let's make sure our compiler uses a "<strong>lexicon</strong>", based on style preference and system path separator.</p>
</blockquote>

<p>In pseudo-code:</p>

<p><code>var cmd = compile(cmd_line_args, lexicon = default, context = null);</code></p>

<h3>Features</h3>

<p>There is no universal set of features a command line tool must comprise. This means the compiler can
be as simple or complex as we decide. The more complex compilers (like Powershell) allow for
expressions, piping, and more exotic stuff. Perhaps this is a bridge too far for our use case.</p>

<p>I propose to use the a superset of the most common features found across compilers.</p>

<p>Feature list:</p>

<ul>
<li>verbs: <code>cmd get-logs</code></li>
<li>flags: <code>cmd /a -q --verbose</code></li>
<li>options: <code>cmd /input c:\in\ -o=c:\out\</code></li>
<li>arguments: <code>cmd -o c:\logs\ c:\out\</code></li>
<li>operands: <code>cmd -o c:\logs\ -- readme.txt</code></li>
<li>combined switches: <code>cmd /aqo c:\out\</code> </li>
<li>repeating options: <code>cmd -o c:\in\ -o c:\in\nested\</code></li>
<li>help: <code>cmd get-logs -? /h --help</code></li>
<li>about: <code>cmd -! --version</code></li>
<li>escape sequence: <code>cmd a\r\nb</code> ~ a[newline]b</li>
<li>unicode escape sequence: <code>cmd get-logs \u002Dq</code> ~ <code>cmd get-logs -q</code></li>
<li>literal unicode escape sequence: <code>cmd get-logs c:\temp\\x69\x6E\</code> ~ <code>cmd get-logs c:\temp\in\</code></li>
<li>quoted literal: <code>cmd "my \"quoted\" literal"</code></li>
<li>alt quoted literal: <code>cmd 'my "quoted" literal'</code></li>
</ul>

<p>Definitions:</p>

<ul>
<li><p><strong>Verb</strong>: defines a group of shared functionality and operations.</p></li>
<li><p><strong>Switch</strong>: the union of flags and options with their arguments.</p></li>
<li><p><strong>Flag</strong>: a switch that does not have an argument. It's considered a boolean.</p></li>
<li><p><strong>Option</strong>: a switch that takes 0..* arguments. Some arguments may be mandatory, others optional.</p></li>
<li><p><strong>Argument</strong>: the value or one of the values linked to a parent option.</p></li>
<li><p><strong>Operand</strong>: the value or one of the values linked to the verb, or default verb is none specified.</p></li>
</ul>

<p>Syntax:</p>

<ul>
<li>Escaping unicode: <code>\u[n,4]</code> or <code>\U[n,8]</code> -&gt; <code>\u002D</code>, <code>\U00020B20</code></li>
<li>Escaping unicode in literal: <code>\x[n,1-4]</code> -&gt; <code>\x0</code>, <code>\x01</code>, <code>\x001</code>, <code>\x0001</code></li>
<li>Quoting literal: "A string with whitespace, and other delimiters and \"escaped\" quotes"</li>
<li>Alt quoting literal: 'A string with whitespace, and other delimiters and "no need to escape" quotes'</li>
<li>Operand delimiter: <code>cmd -o c:\logs\ -- readme.txt</code> -&gt; -- forces all remaining tokens to be operands</li>
</ul>

<hr>

<h2>Compiler</h2>

<p>Having our specification, we should let a command line go through a set of layers to get it compiled.
Ideally, we would like to end up with our compiler doing:</p>

<p>In pseudo-code:</p>

<pre><code>// input
var cmd_line_args = "cmd get-logs \u002Dq -ab c:\temp\in\ -- out.txt";

// compiler
var cmd = compile(cmd_line_args, lexicon = default, context = null);

// print command line back to string, using some style
cmd.print(win, short) -&gt; "cmd get-logs -q -a -b c:\temp\in\ -- out.txt"
cmd.print(posix, long) -&gt; "cmd get-logs --quiet --all --binary -c /c/temp/in/ -- out.txt""

let compile(cmd_line_args, lexicon = default, context = null) = 
{
    var cmd_line_sanitized = preprocess(cmd_line_args);
    var tokens = lex(cmd_line_sanitized, lexicon, context);
    var astTree = parse(tokens, lexicon, context).optmize();
    var graph = materialize(astTree);
}
</code></pre>

<h3>1. Pre-processor</h3>

<ul>
<li>unescape unicode escape sequences: <code>get-logs -q -ab c:\temp\in\ -- out.txt</code></li>
</ul>

<blockquote>
  <p>Your API does not have a pre-processor defined.</p>
</blockquote>

<h3>2. Lexer</h3>

<ul>
<li>create tokens from pre-processed command line string</li>
</ul>

<blockquote>
  <p>Your API provides a set of tokens.</p>

<pre><code> public enum CommandLineTerminal
    {
        Switch,
        Argument,
        Comma,
    }
</code></pre>
</blockquote>

<p>Given our specification, we should extend this:</p>

<pre><code>public enum CommandLineTerminal
{
    Verb,
    Switch, // could be flag, combined flags, option (lexer might not know the difference)
    Flag,
    Option, 
    Argument,
    Operand,
    // keyword terminals (many lexers include these, but keep them hidden from higher layers)
    Whitespace, // contextual
    SwitchPrefix // '-' '/' '--'
    OptionArgumentSeparator, // ':' '=' 
    ArgumentDelimiter, // ','
    OperandDelimiter, // '--' (without an option attached)
}
</code></pre>

<p>yielding us:</p>

<pre><code>- verb: get-logs
- whitespace
- switch prefix: -
- switch: q
- whitespace
- switch prefix: -
- switch: ab
- whitespace
- argument: c:\temp\in\
- whitespace
- operand delimiter: --
- whitespace
- operand: out.txt
</code></pre>

<blockquote>
  <p>Your API stores tokens as follow:</p>

<pre><code>public struct CommandLineToken
{
    public CommandLineTerminal Terminal { get; }
    public string Text { get; }

    public CommandLineToken(CommandLineTerminal terminal, string text)
    {
        Terminal = terminal;
        Text = text;
    }
}
</code></pre>
</blockquote>

<p>I would extend this, and keep track of:</p>

<ul>
<li>line number -&gt; allows for better exception output to consumer</li>
<li>token type (hidden or normal) -&gt; hidden: white space, delimiters, ..</li>
</ul>

<h3>3. AST Parser</h3>

<ul>
<li>create an abstract syntax tree from the tokens</li>
<li>could use the context of a tree to further refine tokens (switch -&gt; flag or option)</li>
<li>not all tokens from the lexer end up in the AST</li>
</ul>

<blockquote>
  <p>Your API does not include this step, instead goes on to materialize directly.</p>

<pre><code> private IList&lt;IArgument&gt; ParseAllArgs()
 {
    // impl ..
 }
</code></pre>
</blockquote>

<p>An AST might look like this:</p>

<p>In pseudo-code:</p>

<pre><code> // `get-logs -q -ab c:\temp\in\ -- out.txt`
 Node-&gt;verb: name=get-logs
    child: Node-&gt;flag: name=q longname=quiet
    child: Node-&gt;combined flag: name=ab longname=all
        child: Node-&gt;argument: name=path value=c:\temp\in\
    child: Node-&gt;operand delimiter
    child: Node-&gt;operand: name=logfile value=out.txt
</code></pre>

<p>In fact, by not using the AST parser, you are working yourself a bit in trouble.
This next quote by you makes me think you try to have a flattened parser, rather than
a tree parser.</p>

<blockquote>
  <p>Comma separated lists are intentionally processed as one argument.</p>
</blockquote>

<p><strong>AST Node</strong></p>

<p>You were struggling to build a tree structure. I suggest a class in the likes of:</p>

<pre><code>class AstNode 
{
    internal AstNode Parent;
    internal List&lt;AstNode&gt; Children;
    internal CommandLineToken Token;
    internal CommandLineTerminal Terminal;
}
</code></pre>

<p>Building the AST from a flattened list of lexed tokens requires a common parsing technique <em>shift-reduce</em>. See links for parsing and examples.</p>

<p>Links:</p>

<ul>
<li><a href="https://stackoverflow.com/questions/25049751/constructing-an-abstract-syntax-tree-with-a-list-of-tokens">How to parse an AST</a></li>
<li><a href="https://stackoverflow.com/questions/21064599/building-parse-trees-with-shift-reduce-parsing">How to parse an AST using Shift-Reduce</a></li>
<li><a href="https://en.wikipedia.org/wiki/Abstract_syntax_tree" rel="nofollow noreferrer">AST Wiki</a></li>
</ul>

<h3>4. AST Optimizer</h3>

<p>A set of predefined optimizers should be run on the AST to normalize the graph.</p>

<p>In our example:</p>

<p>Combined flag <code>ab</code> can be uncombined. The context might show us that the argument belongs to <code>b</code>.</p>

<pre><code>child: Node-&gt;flag: name=a longname=all
child: Node-&gt;option: name=b longname=binary
    child: Node-&gt;argument: name=path value=c:\temp\in\
</code></pre>

<h3>5. Parser / Materializer</h3>

<ul>
<li>Map the AST to a concrete object graph, usable by consumers of the API.</li>
</ul>

<blockquote>
  <p>Your API has such classes as <code>CommandLineArgument</code>.</p>
</blockquote>

<h3>6. Printer</h3>

<ul>
<li>the materialized graph can be printed back to a command line string</li>
<li>using tree walkers the graph can be transformed to a string</li>
</ul>

<hr>
    </div>