<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Dimensions</h2>

<p>How big is your chess board, and is it square, or at least rectangular?</p>

<p>First, you use <code>range(len(board))</code> to determine the rows of the chess board, but then you use <code>range(len(board[r]))</code> for the columns, which means you can handle each row having a different number of columns!</p>

<p>(Supporting a non-rectangular chess board would be a challenging challenge, but totally possible, as demonstrated above.)</p>

<p>But then, you use <code>range(r+1, 8)</code> and <code>range(c+1, 8)</code>, indicating that you only support square 8x8 chess boards.</p>

<p>Unfortunately, you haven’t posted the challenge problem text, so we can only guess at the actual challenge.  Additional context would go a long way.</p>

<h2>Verbosity &amp; Fancyness</h2>

<p>In order to be less verbose, we need to do something at least a little bit “fancy”.  With only rook movements, it may seem overly fancy, but if you later support bishops and queens, the additional capability we build in will be leveraged, and very little code need be added.</p>

<p>Additionally, you only need the white bishop blocking the white rook, and only black pawns being captured.  What about white pawns with a black rook and bishop?  This shouldn’t be a special case; it should be generalized.  But again, generalization one one hand will be more verbose, and “fancy”, and the other hand will be leveraged to make the code agnostic to the current player.</p>

<p>First of all, you should have an <code>on_board</code> function, which will return <code>True</code> if a given position is actually on the chess board.  I’ll hard-code the board size, and assume the board is stored in <code>self</code>; the dimensions could be stored in <code>self</code> or derived from <code>self.board</code> on the fly.</p>

<pre><code>def on_board(self, r, c):
    return r in range(8) and c in range(8)
</code></pre>

<p>Next, pieces get “blocked” by other pieces.  So let’s formalize that.  Again, I’ll assume the <code>piece</code> is the <code>'R'</code>, so any white (uppercase) piece will block it.   (You should return the appropriate expression based on the colour of <code>piece</code> ... left to student)</p>

<pre><code>def blocked(self, piece, r, c):
    return self.board[r][c].isupper()
</code></pre>

<p>A black pawn doesn’t “block” a white rook’s move, but it does terminate it in a “capture” event.  Again, we’ll assume a white <code>piece</code> is moving, so it will “capture” any black (lowercase) piece.  (Again, base actual return value on <code>piece</code> ... left to student)</p>

<pre><code>def capture(self, piece, r, c):
    return self.board[r][c].islower()
</code></pre>

<p>Rooks, bishops, and queens can move in a straight line any number of spaces until blocked, or it captures another piece.  Note that a blocked move is not a valid move, but a capture move is a valid move.</p>

<pre><code>def direction_moves(self, piece, r, c, dr, dc):
    r += dr
    c += dc
    while self.on_board(r, c) and not self.blocked(piece, r, c):
        yield r, c
        if self.capture(piece, r, c):
            break
        r += dr
        c += dc
</code></pre>

<p>Rooks, bishops and queens can move in more than one direction, so let’s allow multiple directions to be given at once:</p>

<pre><code>def linear_moves(self, piece, r, c, *dirs):
    for dr, dc in dirs:
        yield from self.direction_moves(piece, r, c, dr, dc)
</code></pre>

<p>Now that we have the building blocks, getting a rook’s moves from a given position is easy:</p>

<pre><code>def rook_moves(self, piece, r, c):
    yield from self.linear_moves(piece, r, c, (1, 0), (0, 1), (-1, 0), (0, -1))
</code></pre>

<p>Moves for the piece at a given position might be:</p>

<pre><code>def moves(self, r, c):
    piece = self.board[r][c]
    if piece in {'R', 'r'}:   # Black or white rook
        yield from self.rook_moves(piece, r, c)
    # ... other types of pieces ...
</code></pre>

<p>With this, your <code>find_p</code> becomes trivial:</p>

<pre><code>def find_p(self, r, c):
    return sum(1 for i, j in self.moves(r, c) if self.board[i][j] == 'p')
</code></pre>

<hr>

<p>The above has increased the amount of code, but at the same time it is more generalized.  It has work to be done to generalize it for white -vs- black.  It would be trivial to add movements for bishops and queens to this structure, and that would not be repetitive code, unlike the original structure.</p>

<p>Unfortunately, you may conclude that it has become overly “fancy”.</p>
    </div>