<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Style</h1>

<ol>
<li><p>Python has a style guide called <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP 8</a>. Much of your code goes against it.</p>

<ul>
<li>Functions and variables should be <code>lower_snake_case</code>.</li>
<li>You should have one space around most operators. Commas and brackets are the common exceptions.</li>
<li>You should have two newlines before and after each top level function.</li>
<li>All module level Imports should be at the top of the file.</li>
<li>You should spell things correctly. <code>array</code> not <code>arrary</code>.</li>
<li>You shouldn't shadow builtins.</li>
<li>Don't put brackets around if statements.</li>
</ul>

<p>You can get many tools to check this for you like pycodestyle, Prospector and flake8.
You can also get tools to fix this like Black and YAPF.</p></li>
</ol>

<pre class="lang-py prettyprint-override"><code>import copy

import pysnooper


def change_array_inverted(array)
    dict_1 = {}
    for index in range(len(array) - 1, -1, -1):
        dict_1["name"] = array[index]
        dict_2 = copy.copy(dict_1)
        dict_1["children"] = dict_2
    return dict_1["children"]


def get_res_array(array):
    list_all = []
    for item in array:
        item = str(item).split("/")[1::]
        item = change_array_inverted(item)
        list_all.append(item)
    print(list_all)
    return list_all


# @pysnooper.snoop()
def merge(dict1, dict2):
    result = copy.copy(dict1)
    if isinstance(dict1, dict):
        if dict1["name"] == dict2["name"]:
            if 'children' in dict1 and 'children' in dict2:
                if isinstance(dict1["children"], dict):
                    if dict1['children']['name'] == dict2['children']['name']:
                        result['children'] = [merge(dict1['children'], dict2['children'])]
                    else:
                        result['children'] = [dict1['children'], dict2['children']]
                if isinstance(dict1["children"], list):
                    for index in range(0, len(dict1["children"])):
                        if dict1['children'][index]['name'] == dict2['children']['name']:
                            result['children'] = [merge(dict1['children'][index], dict2['children'])]
                        else:
                            if dict2['children'] not in result['children']:
                                result['children'].append(dict2['children'])
            elif 'children' in dict1:
                result['children'] = [dict1['children']]
            elif 'children' in dict2:
                result['children'] = [dict2['chidlren']]
            else:
                if "children" in result:
                    del result['children']
            return result
        else:
            result = [result, dict2]
            return result
    elif isinstance(dict1, list):
        for index in range(0, len(dict1)):
            if dict1[index]["name"] == dict2["name"]:
                if 'children' in dict1[index] and 'children' in dict2:
                    if isinstance(dict1[index]["children"], dict):
                        if dict1[index]['children']['name'] == dict2['children']['name']:
                            result['children'] = [merge(dict1[index]['children'], dict2['children'])]
                        else:
                            result['children'] = [dict1[index]['children'], dict2['children']]
                    if isinstance(dict1[index]["children"], list):
                        for index in range(0, len(dict1[index]["children"])):
                            if dict1[index]['children'][index]['name'] == dict2['children']['name']:
                                result['children'] = [merge(dict1[index]['children'][index], dict2['children'])]
                            else:
                                if dict2['children'] not in result[index]['children']:
                                    result[index]['children'].append(dict2['children'])
                elif 'children' in dict1[index]:
                    result[index]['children'] = [dict1[index]['children']]
                elif 'children' in dict2:
                    result[index]['children'] = [dict2['chidlren']]
                else:
                    if "children" in result[index]:
                        del result[index]['children']
                return result
            else:
                result = [result, dict2]
                return result


def cir_array_to_result(array):
    re = {}
    for index in range(0, len(array)):
        if index &lt; len(array) - 1:
            if len(re) == 0:
                re = merge(array[index], array[index+1])
            else:
                if index == len(array) - 1:
                    return re
                re = merge(re, array[index+1])
    return re


a = ["/desktop/folderA/fileA", "/desktop/folderA/folderX/file1", "/diskKH/folderA/fileA", "/desktop/folderB/folderC/fileX"]
res = get_res_array(a)
res = cir_array_to_result(res)
print("res:", res)
</code></pre>

<h1>Improvements</h1>

<ol start="2">
<li><p>The code in <code>change_array_inverted</code> is really confusing.</p>

<ol>
<li>Please don't copy objects when you can just create a new one.
Copying can add things that are not immediately apparent.</li>
<li>Rather than building from the bottom up we can build from the top down.
This makes the code easier to follow.</li>
<li>I would change the name of the argument to <code>names</code> as we are being passed a list of names.</li>
</ol></li>
<li><p>There are some changes I'd make to <code>get_res_array</code>.</p>

<ol>
<li>Change the name of the argument to <code>paths</code> as we are being passed paths.</li>
<li>Use a list comprehension. This is special syntax to make building lists quicker to read and write.</li>
</ol></li>
<li><p>There are some changes I would make to <code>cir_array_to_result</code>.</p>

<ol>
<li>We can remove the <code>if index &lt; len(array) - 1:</code> statement by changing the value we pass to <code>range</code>.</li>
<li>Rather than having the <code>if index == len(array) - 1:</code> check we can start by assigning <code>re</code> to <code>array[0]</code>.</li>
</ol></li>
<li><p>The function <code>merge</code> really needs some love.</p>

<ol>
<li><p>We need to split the function into two.
Whenever you think about copying and pasting a block of code you should always think about making a function instead.</p>

<p>The code to handle lists looks like it has some errors in it.</p>

<ol>
<li>You use <code>result[index]</code> when there are no children in both dict1 or dict2.</li>
<li>You don't use <code>result[index]</code> when <code>dict1['children']</code> is a dictionary, or the names are not the same.</li>
<li>You use <code>result[index]</code> when <code>dict1['children']</code> is a list, but you have another loop that changes the value of <code>index</code>.</li>
</ol>

<p>This smaller function will be called <code>_merge</code> take <code>dict1</code>, <code>dict2</code> and <code>result</code>.</p></li>
<li>When <code>dict1</code> is a list, if the first dictionary doesn't have the same name as <code>dict2</code> then none of the other dictionaries get checked.
Move the <code>else: return [result, dict2]</code> outside the loop.</li>
<li>When <code>dict1['children']</code> is a list you have another issue. If there is more than one child, then <code>dict2</code> is always appended and potentially merged.</li>
</ol></li>
</ol>

<pre class="lang-py prettyprint-override"><code>import copy

import pysnooper


def change_array_inverted(names)
    root = item = {}
    for name in names:
        item["children"] = {"name": array[index]}
    return root["children"]


def get_res_array(paths):
    return [
        change_array_inverted(str(path).split("/")[1::])
        for path in paths
    ]


def cir_array_to_result(array):
    re = array[0]
    for index in range(1, len(array)):
        re = merge(re, array[index])
    return re


def _merge(lhs, rhs, result):
    if 'children' in lhs and 'children' in rhs:
        if isinstance(lhs["children"], dict):
            if lhs['children']['name'] == rhs['children']['name']:
                result['children'] = [merge(lhs['children'], rhs['children'])]
            else:
                result['children'] = [lhs['children'], rhs['children']]
        if isinstance(lhs["children"], list):
            for index in range(0, len(lhs["children"])):
                if lhs['children'][index]['name'] == rhs['children']['name']:
                    result['children'] = [merge(lhs['children'][index], rhs['children'])]
                    break
            else:
                if rhs['children'] not in result['children']:
                    result['children'].append(rhs['children'])
    elif 'children' in lhs:
        result['children'] = [lhs['children']]
    elif 'children' in rhs:
        result['children'] = [rhs['chidlren']]
    else:
        if "children" in result:
            del result['children']


# @pysnooper.snoop()
def merge(dict1, dict2):
    result = copy.copy(dict1)
    if isinstance(dict1, dict):
        if dict1["name"] == dict2["name"]:
            _merge(dict1, dict2, result)
            return result
        else:
            return [result, dict2]
    elif isinstance(dict1, list):
        for index in range(len(dict1)):
            if dict1[index]["name"] == dict2["name"]:
                _merge(dict1[index], dict2, result[index])
                return result
        return [result, dict2]


a = ["/desktop/folderA/fileA", "/desktop/folderA/folderX/file1", "/diskKH/folderA/fileA", "/desktop/folderB/folderC/fileX"]
res = get_res_array(a)
res = cir_array_to_result(res)
print("res:", res)
</code></pre>

<p>There are still some other ways to improve the code, but they're starting to get challenging to implement.</p>

<h1>High Level Review</h1>

<p>It's much easier to use dictionaries in a different way.
By only taking the folder names as the keys and having them point to child dictionaries we can build a tree.</p>

<pre class="lang-py prettyprint-override"><code>root = {}
root.setdefault('desktop', {}).setdefault('folderA', {}).setdefault('fileA', {})
print(root)
# {'desktop': {'folderA': {'fileA': {}}}}

root.setdefault('desktop', {}).setdefault('folderA', {}).setdefault('folderX', {}).setdefault('file1', {})
print(root)
# {'desktop': {'folderA': {'fileA': {}, 'folderX': {'file1': {}}}}}
</code></pre>

<p>Rather than using <code>.setdefault</code> all the time we can instead subclass <code>dict</code> to make it super simple.</p>

<pre class="lang-py prettyprint-override"><code>class TreeDict(dict):
    def __missing__(self, key):
        self[key] = value = TreeDict()
        return value


root = TreeDict()
root['desktop']['folderA']['fileA']
print(root)
# {'desktop': {'folderA': {'fileA': {}}}}

root['desktop']['folderA']['folderX']['file1']
print(root)
# {'desktop': {'folderA': {'fileA': {}, 'folderX': {'file1': {}}}}}

root['diskKH']['folderA']['fileA']
root['desktop']['folderB']['folderC']['fileX']
</code></pre>

<p>From this we can then just convert to whatever form you want.</p>

<pre class="lang-py prettyprint-override"><code>import json


def to_desired(node, name=''):
    result = {'name': name}
    if node:
        children = [
            to_desired(value, key)
            for key, value in node.items()
        ]
        if len(children) == 1:
            children = children[0]
        result['children'] = children
    return result


result = to_desired(root)['children']
print(json.dumps(result, indent=4))
</code></pre>

<pre class="lang-py prettyprint-override"><code>[
    {
        "name": "desktop",
        "children": [
            {
                "name": "folderA",
                "children": [
                    {
                        "name": "fileA"
                    },
                    {
                        "name": "folderX",
                        "children": {
                            "name": "file1"
                        }
                    }
                ]
            },
            {
                "name": "folderB",
                "children": {
                    "name": "folderC",
                    "children": {
                        "name": "fileX"
                    }
                }
            }
        ]
    },
    {
        "name": "diskKH",
        "children": {
            "name": "folderA",
            "children": {
                "name": "fileA"
            }
        }
    }
]
</code></pre>
    </div>