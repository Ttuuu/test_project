<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>General Implementation Suggestions</strong></p>

<ol>
<li><p>First of all I would suggest that the function is doing too much - and could be broken into multiple smaller functions to keep single behaviour in a single function. This is a good mindset to get into for unit testing and mocking (later down the line).</p>

<p>For example currently your method is doing the following 2 bit of behaviour:</p>

<ol>
<li>Opening, Reading and Closing a file from the file system.</li>
<li>Collecting the word frequency</li>
</ol>

<p>I would suggest having 2 methods:</p>

<pre class="lang-py prettyprint-override"><code>def open_and_read_file_content(filepath):
  handle = open(filename,'rU')
  text = handle.read()
  handle.close()
  return text

def collect_word_frequency_in_text(text):
  ...

</code></pre></li>
</ol>

<p><strong>Code Review</strong></p>

<p>First I would suggest that there is a redundant <code>if</code> statement when checking if the punctuation character is in the text body and you just want to call the replace.</p>

<p>In this case if the punctuation doesn't exist you are doing the same number of iterations as currently, however, if it does exist it is replaced there and then rather than being checked before hand:</p>

<pre class="lang-py prettyprint-override"><code># Before
...
for char in MUST_STRIP_PUNCTUATION:
    if char in text:
      text = text.replace(char,' ')
...

# After
...
for char in MUST_STRIP_PUNCTUATION:
    text = text.replace(char,' ')
...
</code></pre>

<p>Finally, while the 2 <code>for</code> statements don't look pretty and look like they can be made clearer - if efficiency is what you are looking for - I am not sure of any solution that will be better.</p>

<p>Currently the time complexity (for the two loops) is O(2n) - you could collect each unique entry in the text block and then count each occurrence of the word using Python's <code>count()</code>, however I am not sure this will be more time efficient but might look cleaner.</p>

<p>Additionally - You could do an <code>if</code> to check the <code>word != ''</code> rather than deleting it from the set at the end of the process - however, depending on the frequency of <code>''</code> in the data set, that might not be desired. </p>

<p>I would stress though, that similar to my initial point made before the code review section, for readability and understanding (debugging/testing) this might be desired (example below)</p>

<pre class="lang-py prettyprint-override"><code>...
  words_list = text.split(' ')
  words_dict = {}
  for word in words_list:
    if(word != '')
      words_dict[word] = text.count(word)
  return words_dict
...
</code></pre>
    </div>