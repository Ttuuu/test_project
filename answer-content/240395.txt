<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A few minor tips on making the code more compact:</p>

<ol>
<li><p>Remove unneeded variables/initializations.  In particular your <code>t</code> variable doesn't need to be initialized outside the loop since its value is always set within the loop before it's used.</p></li>
<li><p>The <code>run</code> variable can also be eliminated; make the loop <code>while True</code> and use a <code>break</code> to escape it when you're done.</p></li>
<li><p>Instead of doing <code>text.isdigit()</code> just do the <code>int</code> conversion inside a <code>try</code> block.</p></li>
<li><p>Combine your two "Try again" cases into a single block of code rather than repeating yourself.</p></li>
</ol>

<p>With those changes the code looks like:</p>

<pre><code># Init previous two values of Fibonacci sequence
prev_2 = 1
prev_1 = 0

# Run while loop to prompt user enter Fibonacci number
while True:
    try:
        t = int(input('Enter the next Fibonacci number &gt;'))
        if t != prev_2 + prev_1:
            raise ValueError('not the next Fibonacci number!')
        if t &gt; 50:
            print('Well done')
            break
        # move to next value in the sequence
        prev_2, prev_1 = prev_1, t
    except ValueError:
        print('Try again')
        break
</code></pre>

<p>A larger tip on improving the code would be to separate the two distinct tasks the code is doing: computing the Fibonacci sequence up to 50, and quizzing the user on it.  Here's how I might write that:</p>

<pre><code># Init Fibonacci sequence up to first value past 50 (shfifty-five)
fib = [0, 1]
while fib[-1] &lt;= 50:
    fib.append(fib[-2] + fib[-1])

# Prompt the user for all those values (after the initial 0, 1)
for n in fib[2:]:
    try:
        if int(input('Enter the next Fibonacci number &gt;')) != n:
            raise ValueError('not the next Fibonacci number!')
    except ValueError:
        print('Try again')
        break
else:
    print('Well done')
</code></pre>

<p>Now the code is in two smaller parts that are each a lot simpler than the previous version -- the first few lines compute the Fibonacci sequence in a very straightforward way, and the rest of the code simply iterates over the sequence and checks the input against it.</p>

<p>In a larger project you'd probably take these two "chunks" of code and define them as functions (you'd have one function that generates the sequence and another that handles the quizzing), but even within a function it's valuable to think about how you can break a problem does into distinct simple parts (and once you've done that, the next step of refactoring it into smaller functions becomes easy).</p>
    </div>