<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In Python 3 <code>itertools</code> gained a new function <a href="https://docs.python.org/3.6/library/itertools.html#itertools.accumulate" rel="noreferrer"><code>accumulate</code></a> that does what you want.
I'd recommend that you instead used this function. Or if you can't if you're in Python 2 to upgrade.
This would single handedly change your code to:</p>

<pre><code>from itertools import accumulate

new_l = accumulate(l)
</code></pre>

<hr>

<p>If you however done this as a learning exercise, then I'd instead use iterators.
I'd first change <code>l</code> to an iterator, via <code>iter</code>.
Which would allow you to use <code>next</code> to remove the default value.
After this I would then loop through the iterator and <code>yield</code> rather than <code>new_list.append</code> the new values.
This can allow you to get something like:</p>

<pre><code>def accumulate_sum(l):
    l = iter(l)
    try:
        total = next(l)
    except StopIteration:
        return
    yield total
    for item in l:
        total += item
        yield total
</code></pre>

<p>Which funnily enough is almost exactly the same to how it's done in <a href="https://github.com/python/cpython/blob/master/Modules/itertoolsmodule.c#L3465-L3490" rel="noreferrer"><code>itertools.accumulate</code></a>.
If you wanted to at a later date use a different function rather than addition, then you could pass that as a function, to call on each iteration.</p>
    </div>