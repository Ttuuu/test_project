<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This shouldn't involve an instance of a class: you can (and should) implement this as a standalone static method, which takes the input array as a parameter and returns the peaks. Introducing a class to record the state is just introducing complexity which will make the code harder to maintain without providing any benefit.</p>

<p>I would also like some documentation explaining exactly what the method does: for example, it doesn't return non-positive peaks, and (as Toby Speight's comment indicates) some might thing it would return plateaus. Basically you need a better specification, and that needs to appear as documentation, so that the intention of the code is completely unambiguous (for the benefit of the implementer, maintainer, and consumer). I would not expect a method like this to return the heights of peaks, rather than their position.</p>

<hr>

<p><code>IGNORE_FIRST_POSITION</code> sounds like the name of a <code>boolean</code>, not an int. You'd be better off, I think, changing the <code>for</code> loop to start at 1, end at <code>array.Length - 1</code>, and include a comment explaining why this is the case.</p>

<hr>

<p>I like that <code>CheckPeak</code> is its own method because it puts the corresponding logic 'all in one place', but I don't like that you are creating a new array every time you check for a peak: I would much prefer you pass the array and candidate position as parameters, and it checks 'in-place'. This is a simpler API (the current one lacks any specification that it takes an array of three parameters), and will reduce the overhead from calling the method.</p>

<p>I also don't like that it returns the height of the peak, rather than whether or not a peak appears: this too is lacking documentation (though granted it is private, so it isn't as important as the public method). Much better to return <code>true</code> or <code>false</code> if it is a peak, then add the peak to the list of peaks if it returns <code>true</code>, otherwise do not (then you can remote the confusing <code>filterZeros</code> at the end).</p>

<p>This can also remove the unpleased <code>output</code> variable, which is defined too early. It only has meaning once it is assigned, and if it isn't assigned it just has a default value you will filter anyway, so you might as well declare and assign it in one.</p>

<hr>

<p>Really tiny thing that is almost completely subjective: I'd prefer to write</p>

<pre><code>if (inputArray[1] &gt; inputArray[0] &amp;&amp; inputArray[1] &gt; inputArray[2])
</code></pre>

<p>as</p>

<pre><code>if (inputArray[0] &lt; inputArray[1] &amp;&amp; inputArray[1] &gt; inputArray[2])
</code></pre>

<p>It keeps them 'in order, and makes it a little easier to feel what is going on.</p>

<hr>

<p>Your code only works with <code>Integers</code>: if I wanted to find peaks in a <code>Double[]</code>, I would need to write a new class. You might want to make it generic on a type <code>T</code> that implements <code>Comparable&lt;T&gt;</code>. This can create some confusion with floating point types (i.e. <code>NaN</code>s), but by depending on a basic interface, your code will be reusable and harder to 'get wrong'.</p>

<p>You might also consider taking an abstract collection as a parameter; it's good that you return <code>List&lt;T&gt;</code> rathern than <code>ArrayList&lt;T&gt;</code>.</p>

<hr>

<p>Example rewrite (disclaimer: untested, and I don't know Java, and I'm running out of time...):</p>

<pre><code>public class ArrayPeak
{
    public static &lt;T extends Comparable&lt;T&gt;&gt; List&lt;T&gt; findPeaks(T[] array)
    {
        List&lt;T&gt; peaks = new ArrayList&lt;&gt;();

        // ignore first and last elements
        for (int position = 1; position &lt; array.length - 1; position++)
        {
            if (checkPeak(array, position)
            {
                peaks.add(array[position]);
            }
        }

        return peaks;
    }

    private static &lt;T extends Comparable&lt;T&gt;&gt; int checkPeak(T[] array, int position)
    {
        if (inputArray[position - 1].compareTo(inputArray[position]) &lt; 0 &amp;&amp; inputArray[position].compareTo(inputArray[position + 1]) &gt; 0)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
} 
</code></pre>
    </div>