<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>An array to list can be done by the function <code>toList()</code>.<br>
list.size-1 is an existing property on a list called <code>lastIndex</code>.</p>
<p>'Math.abs' is from Java. Kotlin has its own <code>abs</code>, which isn't prefixed by a class.</p>
<p>List provides an operator function to access by index:
<code>stack.get(curIndex)</code> can be written as <code>stack[curIndex]</code></p>
<pre><code>fun asteroidCollision(asteroids: IntArray): IntArray {
    val stack = asteroids.toMutableList()
    var curIndex = stack.lastIndex
    while (curIndex &gt;= 1) {
        val cur = stack[curIndex]
        val prev = stack[curIndex - 1]
        if (prev.isRight() &amp;&amp; cur.isLeft()) {
            if (abs(cur) == abs(prev)) {
                stack.removeAt(curIndex)
                stack.removeAt(curIndex - 1)
                if (curIndex - 2 == stack.lastIndex)
                    curIndex -= 2
                else curIndex--
            } else if (abs(prev) &gt; abs(cur)) {
                stack.removeAt(curIndex)
                if (curIndex - 1 == stack.lastIndex)
                    curIndex--
            } else {
                stack.removeAt(curIndex - 1)
                curIndex--
            }
        } else curIndex--
    }
    return stack.toIntArray()
}
</code></pre>
<h1>flow</h1>
<p>The <code>if</code>-<code>else if</code>-<code>else</code> chain can be reduced to two if-statements.<br>
This is because the case where the absolute value of <code>cur</code> and <code>prev</code> are the same is just the other two cases combined.<br>
As far as I know, you do need more variables, to make it possible.
Therefor, this is just another choice, with its own drawbacks:</p>
<pre><code>fun asteroidCollision(asteroids: IntArray): IntArray {
    val stack = asteroids.toMutableList()
    var index = stack.lastIndex
    while (index &gt;= 1) {
        val curIndex = index
        val cur = stack[curIndex]
        val prevIndex = index-1
        val prev = stack[prevIndex]
        if (prev.isRight() &amp;&amp; cur.isLeft()) {
            if (abs(prev) &gt;= abs(cur)){
                stack.removeAt(curIndex)
                if (index-1==stack.lastIndex)
                    index--
            }
            if (abs(cur) &lt;= abs(prev)){
                stack.removeAt(prevIndex)
                index--
            }
        } else index--
    }
    return stack.toIntArray()
}
</code></pre>
    </div>