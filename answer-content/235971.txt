<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here, we print an error message to the standard output stream:</p>

<blockquote>
<pre><code>    puts("Incorrect input.");
</code></pre>
</blockquote>

<p>I'd expect to use standard <em>error</em> here:</p>

<pre><code>fputs("Incorrect input.\n", stderr);
</code></pre>

<p>(Note that <code>puts()</code> appends a newline, but we have to provide our own for <code>fputs()</code>.)</p>

<hr>

<p>Don't use <code>assert()</code> for run-time checks.  <code>assert()</code> compiles to nothing in non-debug builds, so we risk undefined behaviour here:</p>

<blockquote>
<pre><code>int **arr = malloc(sizeof *arr *rows);
assert(arr != NULL);
</code></pre>
</blockquote>

<p>We need a real test here, as <code>malloc()</code> <em>can</em> return a null pointer:</p>

<pre><code>int **arr = malloc(sizeof *arr *rows);
if (!arr) { return arr; }
</code></pre>

<p>The correct handling for the allocations within the loop is more complex.  However, there are advantages to allocating a single array of <code>width * height</code> elements: not only does it simplify the memory handling, but it also improves locality of reference as it's accessed, improving code efficiency.</p>

<hr>

<p>I'm surprised to see the return value of <code>scanf()</code> ignored in <code>fillArr()</code>, given the exemplary code in <code>getArrSize()</code>.  What happened here?</p>
    </div>