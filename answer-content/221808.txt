<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><code>OutputRecursiveNode()</code></p>

<ul>
<li>You are sometimes using <code>var</code> where the concrete type it isn't quite obvious from the right-hand-side of the assignment. Sometimes you use the concrete type where the type is obvious from the right-hand-side of the assignment (<code>string indenter = new string('\t', count);</code>)  </li>
<li>Appending a concatenated string to a <code>StringBuilder</code> should better be done by using multiple <code>Append()</code>'s.  </li>
<li>the <code>var @class</code> is created for each node but is only needed if <code>node.Childs.Count &gt; 0</code>.  </li>
<li>the <code>indenter</code>is created for each iteration of the loop which should be done outside of the loop.  </li>
<li>The <code>StringBuilder</code>'s <code>ApendXx()</code> methods provide a fluent implementation, meaning these methods are returning a <code>StringBuilder</code> which could be used as well.  </li>
<li>The <code>GenerateClass()</code> method adds a <code>Environment.NewLine</code> which is then replaced by <code>Environment.NewLine + indenter</code>. By simply returning <code>"public static class " + name</code> from that method we can then <code>Append()</code> new line, the <code>indenter</code> and the opening brace.</li>
<li>The condition  <code>!string.IsNullOrEmpty(@class)</code> can't never evaluate to <code>false</code>. </li>
</ul>

<p>Implementing these points will lead to  </p>

<pre><code>private static string OutputRecursiveNode(IEnumerable&lt;RecursiveNode&gt; nodes, Func&lt;string, string&gt; getFieldValue, int count = -1)
{
    var sb = new StringBuilder();

    ++count;

    var indenter = new string('\t', count);
    foreach (var node in nodes)
    {

        if (node.Childs.Count &gt; 0)
        {
            sb.Append(indenter)
                .AppendLine(GenerateClass(node.Value))
                .Append(indenter)
                .Append("{")
                .AppendLine(indenter)
                .Append(OutputRecursiveNode(node.Childs, getFieldValue, count))
                .Append(indenter)
                .AppendLine("}");
        }
        else
        {
            sb.Append(indenter)
                .Append(GenerateField(node.Value, getFieldValue(node.CurrentParent + UsedSeparator + node.Value)));
        }
        sb.AppendLine();
    }

    return sb.ToString();
}  
</code></pre>

<p>and the changed <code>GenerateClass()</code> would look like so  </p>

<pre><code>private static string GenerateClass(string name)
{
    if (string.IsNullOrEmpty(name))
    {
        return string.Empty;
    }
    return "public static class " + name;
}  
</code></pre>

<p>which leads to the next problem. If the name of the class is either <code>null</code> or <code>Empty</code> returning <code>string.Empty</code> wouldn't produce correct code. It would be better to either throw an <code>tException</code> (in the <code>OutputRecursiveNode()</code> method) or omitting classes which names are <code>null</code> or <code>Empty</code> but because the same applies to the <code>GenerateField()</code> method you should throw an Exception.  </p>

<p>Just placing </p>

<pre><code>if (nodes.Any(n =&gt; string.IsNullOrEmpty(n.Value))) { throw new YourDesiredtException(); }  
</code></pre>

<p>at the top of the <code>OutputRecursiveNode()</code> method will do the trick.</p>
    </div>