<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It is probably cheating, but the <code>bin(x)</code> function would do most of the heavy lifting, converting <code>x</code> into a string of bits.  Iterate in the reverse direction (via <code>[::-1]</code>) to match bits with their proper two-to-the-power-of index, select only those indices where <code>bit</code> is <code>"1"</code>, and create the list with list comprehension.  It could be done in one statement.  </p>

<pre><code>def two_powers(num):
    return [ 1 &lt;&lt; idx for idx, bit in enumerate(bin(num)[:1:-1]) if bit == "1" ]
</code></pre>

<p><em>Note</em>: <code>bin()</code> actually returns a string prefixed with <code>"0b"</code>.  The above code skips the prefix, by using an end index in the slice: <code>[:1:-1]</code>.</p>

<hr>

<p>As @200_success mentions, creating and decimating the binary string might not be the most efficient approach.  A bit of research turned up <code>int.bit_length()</code> which can be used to determine an upper bound in the <code>range()</code> for list comprehension.  <strike>Improved</strike> solution:</p>

<pre><code>def two_powers(num):
    return [ 1 &lt;&lt; idx for idx in range(num.bit_length()) if num &amp; (1 &lt;&lt; idx) ]
</code></pre>

<hr>

<p>Timing for the original method, Harold's, and my method, on 32 &amp; 64 bit numbers, with most significant bit set, for various density of <code>1</code> bits:</p>

<p><a href="https://i.stack.imgur.com/An5Vs.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/An5Vs.png" alt="enter image description here"></a></p>

<p>As can be seen, and as expected, Harold's method is best when there are more zero bits than one bits.  With more one bits than zero bits, it can perform worse than the original.  The list comprehension method is always slightly better than the original, but not by a lot.</p>

<p>The real surprise is the <code>bin(num)</code> version, which converts the number to a string.  I threw that into my timing for a laugh, and it turned out to be <em>way better</em> than my <em>improved</em> version.  Moral of the story: "Test it! Don't guess."</p>
    </div>