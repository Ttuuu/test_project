<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You can halve your <code>concat</code> calls by just creating new typelists inline and skipping the intermediate 2-param <code>concat</code> objects on rewind.</p>

<p>Should <code>concat</code> be callable on empty and single argument lists?</p>

<pre><code>template &lt;typename...&gt;
struct concat {};

template &lt;&gt;
struct concat&lt;&gt; {
    using type = typelist&lt;&gt;;
};

template &lt;typename... Ts&gt;
struct concat&lt;typelist&lt;Ts...&gt;&gt; {
    using type = typelist&lt;Ts...&gt;;
};

template &lt;typename... Ts0, typename... Ts1, typename... Rest&gt;
struct concat&lt;typelist&lt;Ts0...&gt;, typelist&lt;Ts1...&gt;, Rest...&gt; 
: concat&lt;typelist&lt;Ts0..., Ts1...&gt;, Rest...&gt; {};

// Helper until C++20
template &lt;typename... Ts&gt;
using concat_t = typename concat&lt;Ts...&gt;::type;
</code></pre>

<hr>

<p>Rather than recursively filtering your list, consider a sequential approach using pack expansion.  To do this, we'll need to exploit a property of concatenation with <code>typelist</code>s.  When you concatenate a list with no elements to a list of elements (<code>concat&lt;typelist&lt;int&gt;, typelist&lt;&gt;&gt;</code>), the result list remains the same (<code>typelist&lt;int&gt;</code>).  </p>

<p>First, maps the predicate result (<code>true</code>/<code>false</code>) to either <code>typelist&lt;T&gt;</code> or <code>typelist&lt;&gt;</code>.</p>

<pre><code>template &lt;bool&gt;
struct filter_if_result {
    template &lt;typename T&gt; using type = typelist&lt;T&gt;;
};

template &lt;&gt;
struct filter_if_result&lt;false&gt; {
    template &lt;typename T&gt; using type = typelist&lt;&gt;;
};
</code></pre>

<p>Second, pack expand the unfiltered types and apply the predicate to each. Then <code>concat</code> the results to merge typelists with the collected elements with the empty typelists.</p>

<pre><code>template &lt;template &lt;typename&gt; class Predicate, typename Sequence&gt;
struct filter_if;

template &lt;template &lt;typename&gt; class Predicate, typename... Ts&gt;
struct filter_if&lt;Predicate, typelist&lt;Ts...&gt;&gt; {
    using type = concat_t&lt;
        typename filter_if_result&lt;Predicate&lt;Ts&gt;::value&gt;::template type&lt;Ts&gt;...&gt;;
};

// Helper until C++20
template &lt;template &lt;typename&gt; class Predicate, typename Sequence&gt;
using filter_if_t = typename filter_if&lt;Predicate, Sequence&gt;::type;
</code></pre>

<p><em>Note - <code>filter_if</code> is used to differentiate the predicate version from the version that <code>filter</code>s on a specific type.</em></p>
    </div>