<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Overall Impression</h2>

<p>The code is pretty good. The structure of the code is good, good use of <code>typedef</code>. The code uses that safe version of string comparison <code>strncmp(string1, string2, maxLength)</code>. Each Variable is declared on a separate line.</p>

<p>One overall observation is the code is not very extendable.</p>

<p>The program might be more understandable to the user if <code>=</code> is used to get the result rather than <code>%</code>. This would also possibly allow the addition of a <code>modulus</code> operation.</p>

<h2>Error Checking</h2>

<p>There are at least 2 places in the code where error checking should be performed, the first is always check the return value of <code>malloc(size_t size)</code>. If <code>malloc()</code> fails for some reason, it returns <code>NULL</code> access through a null pointer results in UB (Unknown Behavior). Quite often it terminates the program in some nasty manner.</p>

<p>It's always best to check user input for errors so that they can be reported and the user can correct their error.</p>

<h2>Magic Numbers</h2>

<p>There are Magic Numbers in the <code>main()</code> function (<code>9</code>, <code>4</code> and <code>3</code>), it might be better to create symbolic constants for them to make the code more readable and easier to maintain. These numbers may be used in many places and being able to change them by editing only one line makes maintenance easier.</p>

<p>Numeric constants in code are sometimes referred to as <a href="https://en.wikipedia.org/wiki/Magic_number_(programming)" rel="nofollow noreferrer">Magic Numbers</a>, because there is no obvious meaning for them. There is a discussion of this on <a href="https://stackoverflow.com/questions/47882/what-is-a-magic-number-and-why-is-it-bad">stackoverflow</a>.</p>

<p>In the case of the array of <code>Operations</code> called <code>ops</code> you don't need to specify <code>4</code> in the array definition, and you can get the size after the creation of the array using this formula: <code>sizeof(ops)/sizeof(*ops);</code> </p>

<p>In the cases of using <code>9</code> and <code>3</code> define a constant values that can change the value throughout the program:</p>

<p>At the top of the file:</p>

<pre><code>#define INPUT_COMMAND_SIZE 9
#define OPERATION_SIZE 3
</code></pre>

<h2>Complexity</h2>

<p>The function <code>main()</code> is too complex (does too much). As programs grow in size the use of <code>main()</code> should be limited to calling functions that parse the command line, calling functions that set up for processing, calling functions that execute the desired function of the program, and calling functions to clean up after the main portion of the program.</p>

<p>There is also a programming principle called the <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" rel="nofollow noreferrer">Single Responsibility</a> Principle that applies here. The Single Responsibility Principle states:</p>

<blockquote>
  <p>that every module, class, or function should have responsibility over a single part of the functionality provided by the software, and that responsibility should be entirely encapsulated by that module, class or function.</p>
</blockquote>

<h2>Declare Variables When Needed</h2>

<p>The original version of the C programming language did require variables to be defined at the top of the function, however, this hasn't been true since 1989. It is better to declare the variables when they are necessary to reduce the scope of the variables and make the code easier to understand and maintain.</p>

<h2>Initialize Local Variables</h2>

<p>The C programming language does not automatically initialize variables. Uninitialized variables can sometimes be the cause of UB. It is generally a best practice to always initialize variables when they are declared.</p>

<h2>Horizontal Spacing</h2>

<p>Code is much more readable when there is a space separating operators and operands in an expression: <code>return a - b;</code>.</p>

<h2>System Macros for Exit Status</h2>

<p>The code already includes <code>stdlib.h</code> for the definitions of <code>malloc()</code> and <code>free()</code>. Since <code>stdlib.h</code> is already included it would be better to use the system constants <code>EXIT_SUCCESS</code> and <code>EXIT_FAILURE</code> which can make the code more portable. These constants are defined in <code>stdlib.h</code>.</p>

<h2>Example Using Suggestions</h2>

<p>Note error checking on user input hasn't been added.</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;

#define INPUT_COMMAND_SIZE 9
#define OPERATION_SIZE 3

typedef int (*calc_function)(int, int);

typedef struct operation {
    char *name;
    calc_function calculate;

} Operation;

int add(int a, int b)
{
    return a + b;
}

int sub(int a, int b)
{
    return a - b;
}
int mul(int a, int b)
{
    return a * b;
}

int divi(int a, int b)
{
    return a / b;
}

int programLoop(Operation *ops, int opsCount)
{
    int programStatus = EXIT_SUCCESS;
    char *command = malloc(INPUT_COMMAND_SIZE);
    if (command != NULL){
        while((command = fgets(command, INPUT_COMMAND_SIZE, stdin)) != NULL) {

            for(int i = 0; i &lt; opsCount; ++i) {
                int result = 0;
                int a = 0;
                int b = 0;
                if (0 == strncmp(ops[i].name, command, OPERATION_SIZE)) {
                    command = strchr(command, ' ');
                    command++;
                    if (*command == '%') {
                        a = result;
                    } else {
                        sscanf(command, "%d", &amp;a);
                    }
                    command = strchr(command, ' ');
                    command++;
                    if (*command == '%') {
                        b = result;
                    } else {
                        sscanf(command, "%d", &amp;b);
                    }
                    result = ops[i].calculate(a, b);
                    printf("%d\n", result);
                }
            }
        }
        free(command);
    }
    else
    {
        fprintf(stderr, "Malloc returned NULL\n");
        programStatus = EXIT_FAILURE;
    }

    return programStatus;
}

int main() {
    Operation ADD = {"ADD", add};
    Operation SUB = {"SUB", sub};
    Operation MUL = {"MUL", mul};
    Operation DIV = {"DIV", divi};

    Operation ops[] = {ADD, SUB, MUL, DIV};

    int opsCount = sizeof(ops)/sizeof(*ops);

    return programLoop(ops, opsCount);
}
</code></pre>
    </div>