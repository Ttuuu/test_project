<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The main thing that I see when I look at your code is that it's too complicated. You have one big function, and I won't even count the amount of nested loops you have.</p>

<p>The first thing I'd do is to simplify this, and split it into separate functions. The second thing I'd to is to improve it. </p>

<p>To improve it, I used <a href="https://stackoverflow.com/questions/6284396/permutations-with-unique-values">this</a> question on StackOverflow to generate unique permutations. The rest uses what you wrote above, but in a clearer presentation:</p>

<pre><code>import itertools

alpha = "bcdfghjklmnpqrstvwxz"
digits = "2456789"
def get_letters_greater(letter, forbidden):
    for a in alpha:
        if a &gt; letter and a not in forbidden:
            yield a

def get_letters(forbidden = set()):
    for a in alpha:
        if a not in forbidden:
            yield a

def get_numbers():
    for d in digits:
        yield d

order = [
    0,2,3,6,8,9,12,13,14,15,16,17,24,26,27,30,32,33,36,37,38,
    39,40,41,48,50,51,54,56,57,60,61,62,63,64,65,72,73,74,75,
    76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95
]

def get_permutations(s):
    all_perms = list(itertools.permutations(s))
    unique_perms = [all_perms[i] for i in order]
    return unique_perms

def get_all_combinations():
    strings = []
    for digit in get_numbers():
        for double_letter in get_letters():
            forbidden = set(double_letter)
            for letter_1 in get_letters(forbidden):
                two_forbidden = set(double_letter + letter_1)
                for letter_2 in get_letters_greater(letter_1, two_forbidden):
                    s = digit + letter_1 + letter_2 + double_letter*2
                    strings.append(s)

    flat_list = [item for s in strings for item in get_permutations(s)]
    return flat_list
</code></pre>

<p>all_combinations = get_all_combinations()</p>

<p>First, I generate all unique combinations. Then I generate all unique permutations for each combination. Since I know that the combinations are unique, I don't have to check for duplicates. However, I can't just generate all \$5!\$ permutations, since there's a duplicate letter. That's why I used the code to handle that.</p>

<p>This code generates a list with exactly 1436400 elements, meaning that no elements are generated twice. I don't have to check for duplicates, since my code doesn't generate them. </p>

<p>EDIT:</p>

<p>From the comments, it seems as if this approach is slightly slower than the original solution. I profiled it quickly, and it seems as if the unique permutation code is the culprit. Since there is only one pair of letters, the overhead from creating unique permutations is worse than just filtering them out. Thus, I've changed the code to just use <code>itertools</code>. It runs in less than a second, and produces the same result.</p>

<p>I also used the fact that itertools always gives the results in the same order, rendering the use of <code>set</code> in <code>get_permutations()</code> obsolete. This version is more complicated and not as readable, but it performs better. I get an average execution time of around 0.45s on my machine. which makes it about 6-7 times faster than the original solution.</p>

<p>To get the <code>order</code> list, I ran <code>itertools.permutations('abcdd')</code> and checked how the duplicate elements paired up. Since the ordering is the same every time, I could just save the indices of the unique elements that are returned, and use that to access the permutations from <code>itertools</code>. That way, I'm guaranteed to get all unique permutations, as long as the input is on the same form (with the duplicate letters in the end of the 5 letter string). Note that this solution breaks for any other input, and in that case you should use <code>return list(set(itertools.permutations(s)))</code>.</p>

<p>Last edit (I promise):</p>

<p>I realized that I had some overhead from first creating all permutations, and then flattening the list. I combined the two steps into one list comprehension, and cut another 25% off the runtime. </p>

<p>If you want to get the result as strings rather than tuples of characters, then use <code>unique_perms = [''.join(all_perms[i]) for i in order]</code> instead of the current definition. It makes the runtime 0.1s slower.</p>
    </div>