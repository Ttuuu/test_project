<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>General comments</strong></p>

<ul>
<li><p>There is no reason to use a class. Instead, the functionality should be made into a free function.</p></li>
<li><p>Your code is overly complicated. There is no reason to make new string from which you erase characters one-by-one. Instead, you can convert the input integer to a string and use a standard function to reverse that.</p></li>
<li><p>Also, pay attention to const correctness. This protects from unintended mistakes and helps the compiler optimize more.</p></li>
</ul>

<p>I would simplify your function to just:</p>

<pre><code>int reverse(int i) 
{
    try
    {
        auto reversed{ std::to_string(i) };
        std::reverse(reversed.begin(), reversed.end());

        const auto result{ std::stoi(reversed) };
        return i &lt; 0 ? -1 * result : result;
    }
    catch (const std::out_of_range&amp; e) 
    {
        return 0;
    }
}
</code></pre>

<p><strong>Further comments</strong></p>

<ul>
<li><p>If you want to have a fast solution, you should avoid <code>std::string</code> altogether. This you can do by "iterating" through the digits using arithmetic operations (division and modulus), as in (using <code>std::string</code> to only show you what is happening):</p>

<pre><code>int x = 1234;
std::string s;

while (x &gt; 0)
{
    s.push_back('0' + (x % 10));
    x /= 10;
}

std::cout &lt;&lt; s &lt;&lt; "\n"; // Prints 4321
</code></pre>

<p>I will let you take it from here to use these ideas to make your program even faster.</p></li>
<li><p>Regarding your theoretical question concerning complexity, if we assume that the input is treated as a string of n characters, there is <span class="math-container">\$\Omega(n)\$</span> lower bound by a trivial adversary argument. Basically, if you don't spend at least n time, you can't read the whole of the input, and then you cannot guarantee correct output on every instance.</p></li>
</ul>
    </div>