<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1><code>RecPascal</code> feedback</h1>
<p><a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP-8</a>, the widely-accepted style guide for Python, <a href="https://www.python.org/dev/peps/pep-0008/#function-and-variable-names" rel="nofollow noreferrer">advises the following</a>:</p>
<blockquote>
<h1>Function and Variable Names</h1>
<p>Function names should be lowercase, with words separated by underscores as necessary to improve readability.</p>
<p>Variable names follow the same convention as function names.</p>
<p>mixedCase is allowed only in contexts where that's already the prevailing style (e.g. threading.py), to retain backwards compatibility.</p>
</blockquote>
<p>So you will probably want to rename this function to <code>rec_pascal()</code>. I would also recommend generally familiarizing yourself with PEP-8's guidelines; it makes it easier to communicate code with other Python users.</p>
<hr>
<p><code>[]</code> as a default function parameter is a red flag because <a href="https://stackoverflow.com/q/1132941/8117067">mutable default function arguments are modified outside of the function's scope</a>:</p>
<pre><code>def RecPascal(n, m=1, prev=[]):
</code></pre>
<p>This is unlikely to cause problems in your current code (although it could if people do nonstandard calls), but it's better to be safe than sorry. The common workaround is to make the parameter default None, and then replace it with an empty list if it's None:</p>
<pre><code>def RecPascal(n, m=1, prev=None):
    if prev is None:
        prev = []
</code></pre>
<hr>
<p>I don't like your <code>m</code> parameter (though if I could indulge in a conceptual suggestion, you can fix your <code>n+1</code> iterations problem by initializing <code>m</code> to 0; then you just compare <code>m</code> to <code>n</code>.) The <code>m</code> parameter is somewhat unintuitive and also unnecessary because you can glean the same information for the length of <code>prev</code>. But more importantly it comes from an iterative mindset; you're using it as a counter to compare to the total (which is <code>n</code>).</p>
<p>Not to say iteration is bad, but it's cleaner to do it inline (instead of as a counter parameter for a recursive function) if you're going to do it iteratively:</p>
<pre><code>def RecPascal(n):
    triangle = [[1], *([None] * (n-1))]
    for i in range(1, n): 
        triangle[i] = calculate(triangle[i-1])
</code></pre>
<p>I will come back to a better way to do it recursively.</p>
<h1><code>calculate</code> feedback</h1>
<p>Python has a fancy way of extending assignment. Instead of <code>res[0], res[-1] = 1, 1</code>, you can do <code>res[0] = res[1] = 1</code>. It's mostly a matter of personal style (though it can be convenient and it looks a bit cleaner.)</p>
<hr>
<p>This loop can be structured better:</p>
<pre><code>    res[0], res[-1] = 1, 1
    for i in range(0,len(res)):
        if res[i] == 0:
            res[i] = prev[i-1] + prev[i]
</code></pre>
<p>Since you already know <em>only</em> the first and last elements are 1, you don't have to iterate through them or check for elements equal to 1. Instead, you can just restrict your <code>range</code> more tightly:</p>
<pre><code>    res[0], res[-1] = 1, 1
    for i in range(1, len(res)-1):
        res[i] = prev[i-1] + prev[i]
</code></pre>
<hr>
<p>And... AJNeufeld basically said was what I was going to say about refactoring it to be a better recursive function (with slight variation, maybe even a bit better than I would have done it). I'll let <a href="https://codereview.stackexchange.com/a/207776/140921">that answer</a> take it from here.</p>
    </div>