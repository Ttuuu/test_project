<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As said in the other answers there is room to improvement. First of all you should apply the naming conventions to your 
package, fields and methods. Then you may want to separate the concerns of asking the user and doing the translation so 
that you can easily unit test your encoding and decoding algorithms. </p>

<h3>Managing user interactions</h3>

<p>The user interactions will be done by a dedicate class that, as you have done, continuously ask the user for an action 
and execute it. But if you want to use the "functional" constructs of Java8 you can see that actions as something that 
change the state of your application by setting the <code>stop</code> flag to true or by translating the user input.</p>

<pre><code>public void start() {   
    do {
        Consumer&lt;EncoderUi&gt; action = askForAction();
        action.accept(this);
    } while (!stop);
}


private Consumer&lt;EncoderUi&gt; askForAction(){
    System.out.println("\n\nType \"encrypt(message_to_encrypt)\" or \"decrypt(message_to_decrypt)\" please (or \"stop\" to stop).");
    final String input = Normalizer.normalize(sc.nextLine(), Normalizer.Form.NFD)
            .replaceAll("[^\\p{ASCII}]", "")
            .toLowerCase();

    if ( "stop".equals(input) ) {
        return ui -&gt; ui.stop = true;
    } else if ( input.startsWith("encrypt(") ) {
        return translate(input, cipher::encode);
    } else if ( input.startsWith("decrypt(") ) {
        return translate(input, cipher::decode);
    } else {
        return ui -&gt; ui.print("Invalid action \""+input+"\".");
    }
}
</code></pre>

<p>Your <em>encrypt</em> or <em>decrypt</em> actions are basically doing the same thing :</p>

<ol>
<li>Extract the message from the user input</li>
<li>Transform the message</li>
<li>Print the result</li>
</ol>

<p>The transformation is basically a <code>Function&lt;String, String&gt;</code> that takes a string and return another. And this is the 
only thing that changes in your process. You can use the method references to pass the correct transformation and keep
the whole process the same. </p>

<pre><code>private Consumer&lt;EncoderUi&gt; translate(String input, Function&lt;String, String&gt; algorithm) {
    return ui -&gt; {
        String message = parse(input);
        String result = algorithm.apply(message);
        ui.print(result);
    };
}
</code></pre>

<p>You cannot unit test your user interactions but the code is quite clear so this is not a real issue. However if you want 
to do it, you can move the parsing of the user input to another method (or class) and test that each input produce an 
action that change your state as expected</p>

<pre><code>MockedUi state = // ...
Consumer&lt;EncoderUi&gt; action = parse("stop");
action.accept(state);

assertThat(state.stop).isTrue();
</code></pre>

<h3>Improving your translation</h3>

<p>As said in the other answers your translation code can also be refactored to something more reusable. As previously said
the encoding and decoding are basically a transformation of string with the only variation being the direction of the 
shift. The only difference is the way you compute the substitution character.</p>

<pre><code>public String encode(String input) {
    return translate(input, chr -&gt; chr+1);
}

public String decode(String input) {
        return translate(input, chr -&gt; chr-1);
    }

private String translate(String input, IntUnaryOperator translation) {
    input.chars()
      .map(chr -&gt; translation.apply(chr-'a'))
      .map(pos -&gt; ALPHABET[pos % 26])
      .mapToObj(Objects::toString)
      .collect(joining());
}
</code></pre>

<p>You can avoid the nested loops by using the <code>char[] ALPHABET = {'a', 'b',..}</code> array. 
The <code>chr-'a'</code> is used to place to translate the Ascii char code to your array (<code>'a'</code> being at position <code>0</code>).</p>
    </div>