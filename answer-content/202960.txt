<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Iterating in Python</h3>

<p>In Python if you find yourself writing something like:</p>

<pre><code>while index &lt; (length):   
</code></pre>

<p>There is good chance you are not writing Pythonic code.  Looping over an index is just not needed that often.  I will start with showing some ways to improve your code.  And then at the end will show a more Pythonic solution.</p>

<p>I would suggest changing your looping statement to:</p>

<pre><code>for index, di_dah in enumerate(morse_code.strip() + ' '):
</code></pre>

<p><a href="https://docs.python.org/3/library/functions.html#enumerate" rel="noreferrer"><code>enumerate()</code></a> is used to iterate over an object and give the index of of the current element.  The <a href="https://docs.python.org/3/library/stdtypes.html#str.strip" rel="noreferrer"><code>str.strip()</code></a> removes leading and trailing spaces, and the <code>+ ' '</code> at the end removes the need special casing after the loop.  This fairly simple change can greatly simplify the code needed inside the loop:</p>

<pre><code>def decodeMorse2(morse_code):
    clear_text = ''
    char = ''

    for index, di_dah in enumerate(morse_code.strip() + ' '):
        if di_dah != ' ':
            char += di_dah
        elif char:
            clear_text += MORSE_CODE[char]
            char = ''
            if index &lt; len(morse_code) - 2:
                if morse_code[index: index + 3] == '   ':
                    clear_text += " "

    return clear_text    
</code></pre>

<h3>More Pythonic?</h3>

<p>I don't have access to the test cases, but I read the spec I think this would do the job:</p>

<pre><code>def decodeMorse(morse_code):
    return ' '.join(
        ''.join(MORSE_CODE[char] for char in word.split())
        for word in morse_code.strip().split('   ')
    )
</code></pre>

<h3>How does this work?</h3>

<p>This code uses two nested loops in the form of <a href="https://docs.python.org/3/reference/expressions.html#generator-expressions" rel="noreferrer">generator expressions</a>.  It uses <a href="https://docs.python.org/3/library/stdtypes.html#str.split" rel="noreferrer"><code>str.split()</code></a> to initially split the words in the outer loop and then again to split the characters in the inner loop.  Then does a character lookup and finally uses <a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="noreferrer"><code>str.join()</code></a> to build the sentence. </p>
    </div>