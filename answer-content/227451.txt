<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>public T_Inv this[T_Proto key]
{
  get
  {
    if (!_Proto.ContainsKey(key))
    {
      throw new KeyNotFoundException("[Bijection] The key " + key + " could not be found");
    }

    return _Proto[key];
  }
  set
  {
    this.Add(key, value);
  }
</code></pre>
</blockquote>

<p>For <code>get</code>: I would just rely on the behavior of <code>_Proto[TKey]</code> - because you're not adding any new or extended behavior with your code.</p>

<p>For <code>set</code>: I would just do:</p>

<pre><code>_Proto[key] = value;
_Inv[value] = key;
</code></pre>

<p>because you're not adding to the dictionary, you're setting.</p>

<p><strong>Update</strong> : As JAD points out in his comment this isn't consistent either, because it could lead to orphans in <code>_Inv</code>. So be careful.</p>

<hr>

<blockquote>
<pre><code>public void Add(T_Proto key, T_Inv value)
{
  if (_Proto.ContainsKey(key))
  {
    _Inv.Remove(_Proto[key]);
  }

  _Proto.Add(key, value);
  _Inv.Add(value, key);
}
</code></pre>
</blockquote>

<p>There is something wrong with the workflow or logic here:</p>

<p>Let's say <code>_Proto.ContainsKey(key)</code> returns true, then you remove the value from the inverse. But if <code>_Proto.ContainsKey(key)</code> is true, <code>_Proto.Add(key, value)</code> will throw an exception, and you then have an inconsistent <code>Bijection</code> object - because the existing inverse was removed while the proto was not.</p>

<p>Further: doing this:</p>

<pre><code>  Bijection&lt;string, int&gt; b = new Bijection&lt;string, int&gt;();
  b["a"] = 1;
  b.Add("b", 1);
</code></pre>

<p><code>b.Add("b", 1);</code> will throw an exception because <code>_Inv</code> already has a key of <code>1</code> - but now <code>b.Proto</code> contains both an entry for <code>"a"</code> and <code>"b"</code> with the value of <code>1</code>, while <code>b.Inv</code> only have the entry <code>1 = "a"</code>.</p>

<p>You'll have to ensure that there always is a one-one correspondence between key and value, and ensure that the <code>Bijection</code> object is consistent even if a invalid operation is performed on it.</p>

<p><strong>Update</strong></p>

<p>I can see, that you've updated the <code>Add()</code> method after I've copied the code to my IDE, so the above relates to the first version.</p>

<p>The new version:</p>

<blockquote>
<pre><code>    public void Add(T_Proto key, T_Inv value)
    {
        if (_Proto.ContainsKey(key))
        {
            _Inv.Remove(_Proto[key]);
        }

        if (_Inv.ContainsKey(value))
        {
            throw new ArgumentException("[Bijection] The inverse already maps " + value + " to " + _Inv[value]);
        }

        _Proto.Add(key, value);
        _Inv.Add(value, key);
    }
</code></pre>
</blockquote>

<p>however, doesn't do the trick either, because it will still throw and exception if <code>_Proto</code> contains <code>key</code> leaving the dictionaries out of sync.</p>

<hr>

<blockquote>
<pre><code>public bool Remove(T_Proto key)
{
  if (_Proto.ContainsKey(key))
  {
    bool removed_inv = _Inv.Remove(_Proto[key]);
    bool removed_proto = _Proto.Remove(key);

    return (removed_proto &amp;&amp; removed_inv);              // == true
  }
  else
  {
    return false;
  }
}
</code></pre>
</blockquote>

<p>You can simplify this by using <code>TryGetValue()</code>:</p>

<pre><code>public bool Remove(T_Proto key)
{
  if (_Proto.TryGetValue(key, out T_Inv value))
  {
    _Proto.Remove(key);
    _Inv.Remove(value);
    return true;
  }

  return false;
}
</code></pre>
    </div>