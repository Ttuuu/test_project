<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Use Iterators</strong><br>
The <code>int i</code> and <code>int j</code> are unnecessary parameters in <code>int evaluate(const std::string&amp; expr, int i, int j)</code>.
The string class is a standard container class. Standard container classes provide the <code>begin()</code> and
<code>end()</code> functions that provide iterators to the first element and the last element of the container.
This <a href="https://stackoverflow.com/questions/131241/why-use-iterators-instead-of-array-indices">StackOverflow.com Question</a> highlights why iterators are good.</p>

<p>This <a href="https://stackoverflow.com/questions/5422835/c-string-iterator">StackOverflow.com question</a> provides a possible example for finding the last character to process. </p>

<p>Using iterators will be faster than using indexing by integer. In C++11 or later the following loop
will advance the iterator until non-white space characters are found in the string.</p>

<pre><code>for (auto CharInExperession : exper)
{
    if (!isspace(*CharInExperssion)) {
        break;
    }
}
</code></pre>

<p><strong>Use Standard C++ functions to check for white space</strong>
In the example above <code>isspace()</code> is used, this checks for all white space, not just space so it checks for
tabs, spaces and new lines. See <a href="http://en.cppreference.com/w/cpp/string/byte/isspace" rel="nofollow noreferrer">isspace</a> for information on how to use it. </p>

<p><strong>Reduce the Complexity of the Code</strong><br>
There is no reason to have the else clause for <code>if(i == j) {</code>, the code in the else clause can be out-dented
because of the return in the if-then portion.</p>
    </div>