<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Picking random seats</h2>

<blockquote>
  <p>I think my algorithm for generate 20 random taken seats doesn't look that efficient.</p>
</blockquote>

<pre><code>while (totalGeneratedEmptySeats != totalTakenSeatsNeeded)
{
    // Generate a random number
    var randomNo = new Random();

    // Get a random seat
    var randomSeat = seats[randomNo.Next(seats.Count)];

    // Remove random seat
    //seats.Remove(randomSeat);

    // Update random seat status
    if(randomSeat.Status == Seat.EnumStatus.Empty)
    {
        randomSeat.Status = Seat.EnumStatus.Taken;
        totalGeneratedEmptySeats++;
    }
}
</code></pre>

<p>You shouldn't recreate a new <code>Random</code> (= random number <strong>generator</strong>, not a number by itself) for every new number, you should be using the same <code>Random</code> and requesting numbers multiple times. To that effect, put your initialization outside of the loop:</p>

<pre><code>var random = new Random();

while(...)
{
    // ...
}
</code></pre>

<p>The randomization process can also be optimized, as you're currently running into possible retries when you randomly select a seat you had already selected before. That's inefficient, and it can be avoided by changing your "shuffle and draw" approach.</p>

<p>Using the example of a deck of cards, if you want to draw 10 random cards, you don't need to draw these cards separately, shuffling the deck again each time (and putting the drawn card back in the deck on top of that). You can simply shuffle the deck and take the top 10 cards. Since the deck is in random order, the top 10 cards are as random as any other group of 10 cards would be.</p>

<p>This also avoids having to retry draws, as the top 10 cards of the deck are guaranteed to not overlap with one another.</p>

<p>Using LINQ, this can be done quite tersely:</p>

<pre><code>var shuffledSeats = seats.OrderBy(seat =&gt; random.Next());
</code></pre>

<p>Usually, you pick an ordering method that related to the seat (e.g. <code>OrderBy(seat =&gt; seat.Price)</code>), but in this case, we tell LINQ to order it by a random number, which effectively means that LINQ will randomly order our list.</p>

<p>We then take the first 20 seats:</p>

<pre><code>var twentyRandomSeats = shuffledSeats.Take(20);
</code></pre>

<p>and then we register these seats as taken:</p>

<pre><code>foreach(var seat in twentyRandomSeats)
{
    seat.Status = Seat.EnumStatus.Taken;
}
</code></pre>

<p>These operations can be chained together:</p>

<pre><code>foreach(var seat in seats.OrderBy(seat =&gt; random.Next()).Take(20))
{
    seat.Status = Seat.EnumStatus.Taken;
}
</code></pre>

<p>Whether you chain them or not is up to you. It's a readability argument. It's definitely not wrong to keep the steps separate if you find it clearer.</p>

<hr>

<h2>Separating taken seats from empty seats</h2>

<blockquote>
  <p>I will remove the random seat and push that random seat to taken list. But the problem with this is to print all the complete 30 seats, I have merge taken and empty list.</p>
</blockquote>

<p>This can indeed be an issue when you want to handle the complete list too. And you don't want to store three separate lists (all, taken, empty) as they may become desynchronized and it's a generally cumbersome juggling act.</p>

<p>Since each seat carries its own status which indicates whether it's taken or not, we can simple keep all seats together in a single list, and then <strong>filter</strong> that list when we need to. </p>

<p>LINQ allows for a terse and clean to read syntax:</p>

<pre><code>var emptySeats = seats.Where(seat =&gt; seat.Status == Seat.EnumStatus.Empty);
var takenSeats = seats.Where(seat =&gt; seat.Status == Seat.EnumStatus.Taken);
</code></pre>

<p>Since your <code>seats</code> list is a class field, you can define the other lists as computed class fields:</p>

<pre><code>class Cinema
{
    private readonly List&lt;Seat&gt; seats = new List&lt;Seat&gt;();

    private List&lt;Seat&gt; takenSeats =&gt; seats.Where(seat =&gt; seat.Status == Seat.EnumStatus.Taken);
    private List&lt;Seat&gt; emptySeats =&gt; seats.Where(seat =&gt; seat.Status == Seat.EnumStatus.Empty);
}
</code></pre>

<p>You can add null-checking here if you need it, but I would generally advise to avoid having nulls instead of continually having to check for it. To that effect, I've given <code>seats</code> a default value. As long as you don't explicitly make it <code>null</code>, you don't need to continually null check.</p>
    </div>