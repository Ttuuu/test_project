<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Maintainability</h2>

<p>No matter the possibilities of a regex, it's not intended for parsing complex languages. Nobody (no sane person) is able to make changes to this regex (even if provided with comments):</p>

<blockquote>
<pre><code>^((?:(?:(?:[^"'/\n]|/(?!/))*)(?("(?=(?:\\\\|\\"|[^"])*"))(?:"(?:\\\\|\\"|[^"])*")|(?('(?=(?:\\\\|\\'|[^'])*'))(?:'(?:\\\\|\\'|[^'])*')|(?(/)|.))))*)
</code></pre>
</blockquote>

<p>In addition, even if you think you are covering it all, some people might still find edge cases, rendering the regex incomplete, requiring even more subtle changes to the regex. At some point, you might (and probably will) get in a situation where you realise the problem is harder than you imagined, and that the problem might even require complex context, that just isn't solvable through regex. Back to drawing boards and think about an alternative solution the your problem.</p>

<p>As P.Roe so eloquently states in the comments:</p>

<blockquote>
  <p><em>Some people, when confronted with a problem, think “I know, I'll use regular expressions.” Now they have two problems.</em></p>
</blockquote>

<h2>Missing Edge Case(s)</h2>

<ul>
<li><del>There is a case I noticed you didn't cover.</del> C# allows <a href="https://devblogs.microsoft.com/csharpfaq/what-character-escape-sequences-are-available/" rel="nofollow noreferrer">unicode escape sequences</a>. Literals can have <code>\xnnnn</code> escape sequences, while all C# code can handle <code>\unnnn</code> and <code>\Unnnnnnnn</code> escape sequences. The preprocessor of the compiler transforms these latter two into characters, but <a href="https://msdn.microsoft.com/en-us/data/aa664669(v=vs.85)" rel="nofollow noreferrer">only in the following cases</a>:

<ul>
<li>identifiers </li>
<li>character literals</li>
<li>regular string literals
This means <code>\u2215</code> which represents a slash <code>/</code> is not found by your regex. </li>
</ul></li>
<li>I'm also not sure whether you can track inline comments in interpolated strings. Should be verified.</li>
</ul>

<h2>Alternative Approach</h2>

<p>Scanning text to parse to some intermediate language, in this case <em>C# comments grammar</em>, requires a process called <em>lexing</em> or <em>tokenizing</em>. In a <strong>Lexer</strong>, you would like to scan the text and use an internal state machine to determine what you are currently looking at. A state might be <em>QuoteState</em> in which state a comment delimiter is a literal and not a comment. The end result of lexing provides you tokens (comments in this case) and their position in the input text.</p>
    </div>