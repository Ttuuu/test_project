<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Gui.java</h3>

<p>1) The <code>panel</code> and  <code>frame</code> variables are unused.</p>

<pre class="lang-java prettyprint-override"><code>    static JPanel panel;
    static JFrame frame;
</code></pre>

<p>2) The <code>test</code> variable can be converted to a boolean.</p>

<pre class="lang-java prettyprint-override"><code>    static boolean test;
</code></pre>

<p>3) The <code>helper</code> method can be simplified</p>

<pre class="lang-java prettyprint-override"><code>    public static void helper() {
        test = count++ % 2 == 0;
    }
</code></pre>

<p>4) Method <code>GraphicalInterface</code></p>

<ul>
<li><p>You should rename it to <code>graphicalInterface</code>, since the methods start with a lowercase.</p></li>
<li><p>The variable <code>BOX_DIM</code> should be a class constant.</p></li>
</ul>

<pre class="lang-java prettyprint-override"><code>    public static final int BOX_DIM = 10;
</code></pre>

<ul>
<li>In the loop, you can use an else-if or a switch case, since you can have only one choice.</li>
</ul>

<pre class="lang-java prettyprint-override"><code>if (array[i][j] == 0) {
    graphic.setColor(Color.WHITE);
} else if (array[i][j] == 1) {
    graphic.setColor(Color.BLACK);
} else if (array[i][j] == 2) {
    graphic.setColor(Color.RED);
}
</code></pre>

<p><strong>or</strong></p>

<pre class="lang-java prettyprint-override"><code>if (array[i][j] == 0) {
    graphic.setColor(Color.WHITE);
} else if (array[i][j] == 1) {
    graphic.setColor(Color.BLACK);
} else if (array[i][j] == 2) {
    graphic.setColor(Color.RED);
}
</code></pre>

<h3>GameOfLife.java</h3>

Method <code>applyRules</code>

<p>1) Since the array is not updated during the execution of the method, I suggest that you extract the <code>array.length</code> in a variable (used 6 times).</p>

<p>2) You can extract <code>array[x][y]</code> in a variable.</p>

<pre class="lang-java prettyprint-override"><code>    public static void applyRules(int[][] array) {
        final int lengthOfTheArray = array.length;

        int[][] newArray = new int[lengthOfTheArray][lengthOfTheArray];

        for (int y = 1; y &lt; lengthOfTheArray - 1; y++) {
            for (int x = 1; x &lt; lengthOfTheArray - 1; x++) {
                int neighbors = neighborsCounter(array, x, y);

                final int currentArrayValue = array[x][y];

                if (currentArrayValue == 1) {
                    if ((neighbors &lt; 2) || (neighbors &gt; 3)) {
                        newArray[x][y] = 0;
                    }
                    if ((neighbors == 2) || (neighbors == 3)) {
                        newArray[x][y] = 1;
                    }
                } else if (currentArrayValue == 0) {
                    if (neighbors == 3) {
                        newArray[x][y] = 1;
                    } else {
                        newArray[x][y] = 0;
                    }
                }
            }
        }

        for (int i = 1; i &lt; lengthOfTheArray - 1; i++) {
            for (int j = 1; j &lt; lengthOfTheArray - 1; j++) {
                array[i][j] = newArray[i][j];
            }
        }
    }

</code></pre>

Method <code>neighborsCounter</code>

<p>1) Instead of increasing the variable <code>neighbors</code> using <code>neighbors = neighbors + 1;</code>, you can use <code>neighbors++;</code>.</p>

<p>2) Same for the decrease, you can use:</p>

<pre class="lang-java prettyprint-override"><code>if (array[x][y] == 1) {
    neighbors--;
}
<span class="math-container">``</span>
</code></pre>
    </div>