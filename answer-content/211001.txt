<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>if I have used the elements of this language properly. Suggestions for improvement are welcome.</p>
</blockquote>

<ul>
<li>Good use of <code>sizeof(int)</code> to form a right size buffer rather than assuming some magic number.</li>
</ul>

<hr>

<p>Improvements ideas</p>

<p><strong>Negative numbers</strong></p>

<p>Code only prints a <code>'\n'</code> (and no  visible text) when the <code>int</code> is negative.</p>

<p><strong>Unnecessary code</strong></p>

<p>The special test for <code>0</code> can be deleted ...</p>

<pre><code>if (number == 0) {
    printf("0\n");
    return;
}
</code></pre>

<p>... by using a following</p>

<pre><code>do  {
  ...
} while (number &gt; 0);
</code></pre>

<p>instead of</p>

<pre><code>while (number &gt; 0) {
  ...
}
</code></pre>

<p><strong>Assumed <code>char</code> size</strong></p>

<p>Code assumes 8 bits/<code>char</code> with <code>sizeof(int) * 8</code>.  This is very common yet not specified in C.  Instead use <code>CHAR_BIT</code> for maximum portability.  </p>

<pre><code>#include &lt;limits.h&gt;

// char bits[sizeof(int) * 8 + 1] = {0};
char bits[sizeof(int) * CHAR_BIT + 1] = {0};
</code></pre>

<p><strong>Simplified code</strong> </p>

<p>To well print negative numbers takes a little work to properly handle <em>all</em> negative values including <code>INT_MIN</code>.</p>

<p>Remember that <code>-number</code> is <em>undefined behavior</em> (UB) when <code>number == INT_MIN</code>.</p>

<p>Simplified code that forms the string right-to-left to skip the reverse step.</p>

<pre><code>#include &lt;limits.h&gt;
#include &lt;stdio.h&gt;

void print_decimal_number_binary_alt(int number) {
  int n = number;
  char bits[sizeof(int) * CHAR_BIT + 2];  // + 2 for '-' and '\0';

  char *s = &amp;bits[sizeof bits - 1];  // Point to last array element;
  *s = '\0';

  do {
    s--;
    *s = '0' + (n % 2 != 0);
    n /= 2;
  } while (n);

  if (number &lt; 0) {
    *(--s) = '-';
  }

  puts(s);
}
</code></pre>

<p>Sample</p>

<pre><code>int main(void) {
  print_decimal_number_binary_alt(0);
  print_decimal_number_binary_alt(1);
  print_decimal_number_binary_alt(-1);
  print_decimal_number_binary_alt(42);
  print_decimal_number_binary_alt(INT_MAX);
  print_decimal_number_binary_alt(INT_MIN);
}
</code></pre>

<p>Output</p>

<pre><code>0
1
-1
101010
1111111111111111111111111111111
-10000000000000000000000000000000
</code></pre>
    </div>