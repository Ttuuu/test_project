<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As pointed out as a comment, I was unhappy about the <code>extractCondition</code> function.
This function handles, variables which do conform your <code>Predicate&lt;T&gt;</code> type. Which is fine, but I think this doesn't belong here.
Because a <code>Predicate</code> should have an <code>accept</code> or, if we talk about the Java implementation, <code>test</code> function.
This is not given when we can pass on <em>any</em> random function which do return a <code>boolean</code>. But does not conform our design of a <code>Predicate</code>.</p>

<p>Next <em>naming</em>, the <code>PredicateBuilder</code> seems okay-ish, but it feels wrong. As it isn't a builder in the classical sense.
Furthermore we have to work around functional interfaces, and this is I think the main pain point. To achieve this I would propose to rename the <code>Predicate&lt;T&gt;</code> interface, as it should be describing what a Predicate holds (a function which takes a parameter and returns a boolean). Therefore the name <code>Predicate</code> is available again and should be used instead of <code>PredicateBuilder</code>.</p>

<p>The repetition regarding <code>and</code>, <code>or</code>, etc... feels also some kind off. But I think that's because you always do <code>extractCondition</code> and other stuff (I've eliminated this in my suggestion, as the Java Predicate implementation does basically the same). Plus I've create a static method <code>Predicate#of(...)</code> to <em>easier</em> "get" a new Predicate. This reduces the mess a bit, but changing the operands is also still a bit clumsy, in my opinion.</p>

<p>Oh and btw. I've felt free to use arrow functions :-)</p>

<pre class="lang-js prettyprint-override"><code>interface InternalPredicate&lt;T&gt; {
  (x: T) : boolean
}

class Predicate&lt;T&gt; {
  constructor(private condition: InternalPredicate&lt;T&gt;) {}

  public static of = &lt;T&gt;(condition: InternalPredicate&lt;T&gt;) =&gt; {
    return new Predicate(condition);
  }

  public and = (input: Predicate&lt;T&gt;): Predicate&lt;T&gt; =&gt;
    Predicate.of((x: T) =&gt; this.apply(x) &amp;&amp; input.apply(x));

  public or = (input: Predicate&lt;T&gt;): Predicate&lt;T&gt; =&gt;
    Predicate.of((x: T) =&gt; this.apply(x) || input.apply(x));

  public not = (): Predicate&lt;T&gt; =&gt;
    Predicate.of((x: T) =&gt; !this.apply(x));

  public apply = (x: T): boolean =&gt; this.condition(x);
}
</code></pre>

<p>Those are my two cents to the Predicate implementation, feel free to discuss them with me.</p>

<p>Alternative solution to eliminate the <code>InternalPredicate</code> and to support functions which are booleans:</p>

<pre class="lang-js prettyprint-override"><code>type PredicateType&lt;T&gt; = (x: T) =&gt; boolean;

class Predicate&lt;T&gt; {
        constructor(private condition: PredicateType&lt;T&gt;) {}

        private static isInstance = &lt;T&gt;(input: Predicate&lt;T&gt; | PredicateType&lt;T&gt;): Predicate&lt;T&gt; =&gt; (input instanceof Predicate) ? input : Predicate.of(input);

        public static of = &lt;T&gt;(condition: PredicateType&lt;T&gt;) =&gt; new Predicate(condition);

        public and = (input: Predicate&lt;T&gt; | PredicateType&lt;T&gt;): Predicate&lt;T&gt; =&gt;
          Predicate.of((x: T) =&gt; this.apply(x) &amp;&amp; Predicate.isInstance(input).apply(x));

        public or = (input: Predicate&lt;T&gt; | PredicateType&lt;T&gt;): Predicate&lt;T&gt; =&gt;
          Predicate.of((x: T) =&gt; this.apply(x) || Predicate.isInstance(input).apply(x));

        public not = (): Predicate&lt;T&gt; =&gt;
          Predicate.of((x: T) =&gt; !this.apply(x));

        public apply = (x: T): boolean =&gt; this.condition(x);
}
</code></pre>

<p>It comes pretty close the the <code>extractCondition</code> approach, but the main difference here is, that a new instance is created if the input is a <em>raw</em> function. This adds up to be more robust to changes and being less error prone. Another advantage is, we don't care about how the predicate internally works, we're just in charge of returning a predicate based on the input. This clears up the use case of the function a bit more. </p>

<p><strong>EDIT</strong>: As discussed in the comments, it is <em>nicer</em> to merge the private <code>isInstance</code> function into the static <code>of</code> function.</p>
    </div>