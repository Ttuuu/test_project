<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Coding style</h1>
<p>Python has some conventions about coding style, for example <code>snake_case</code> for variables and functions etc. You can find these in <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">pep-8</a></p>
<h1><code>Node.__repr__</code></h1>
<p>for troubleshooting, this can be handy:</p>
<pre><code>def __repr__(self):
    return f"Node({self.value})"
</code></pre>
<p>with optionally the values of the children elements too</p>
<h1><code>BST.update</code></h1>
<p>adding a simple method to add multiple nodes can make initialization a lot simpler:</p>
<pre><code>def update(self, values):
    for value in values:
        self.insert(value)
</code></pre>
<p>It also allows you to do this immediately in the <code>__init__</code></p>
<pre><code>def __init__(self, values=None):
    self.root = None
    if values is not None:
        self.update(values)
</code></pre>
<p>and use something like this in your tests:</p>
<pre><code>bst = BST(range(5))
</code></pre>
<h1>Node</h1>
<p>All of the methods you prepend with an <code>_</code> make more sense as methods on the <code>Node</code></p>
<h2><code>_xxorder</code></h2>
<p>for example <code>_inorder</code>:</p>
<pre><code>def inorder(self):
    if self.left is not None:
        yield from self.left.inorder()
    yield self
    if self.right is not None:
        yield from self.right.inorder()
</code></pre>
<p>and then <code>BST.inorder</code>:</p>
<pre><code>def inorder(self):
    return self.root.inorder()
</code></pre>
<p>You can easily foresee a reverse iteration too (for example to find the maximum of the tree:</p>
<pre><code>def inorder_reverse(self):
    if self.right is not None:
        yield from self.right.inorder_reverse()
    yield self
    if self.left is not None:
        yield from self.left.inorder_reverse()
</code></pre>
<p>same goes for the <code>_doFind</code>. <code>Node.find</code>:</p>
<pre><code>def find(self, key):
    if self.value == key:
        return self
    next = self.right if self.value &lt; key else self.left
    if next is None:
        return None  # or raise IndexError
    return next.find(key)
</code></pre>
<p>and <code>BST.find</code>:</p>
<pre><code>def find(self, key):
    return self.root.find(key)
</code></pre>
<h1><code>magic</code> methods</h1>
<p><code>isSameTree</code> compares 2 trees. Why not name it <code>__eq__</code>.
Your implementation doesn't really use seld, so it might make more sense to transfer it to <code>Node</code> to compare subtrees</p>
<p><code>Node.__eq__</code>:</p>
<pre><code>def __eq__(self, other):
    if other is None:
        return False
    return (
        self.value == other.value
        and self.left == other.left
        and self.right == other.right
    )
</code></pre>
<p><code>BST.__eq__</code>:</p>
<pre><code>def __eq__(self, other):
    return self.root == other.root
</code></pre>
<p>You can easily implement the <code>Iterator</code> protocol on <code>BST</code>:</p>
<pre><code>__iter__ = inorder
</code></pre>
<p>and <code>reversed</code>:</p>
<pre><code>__reversed__ = inorder_reverse
</code></pre>
<h1>Sum</h1>
<p>You don't need the <code>Sum</code> class, you can just pass on a value. Also this method seems more appropriate under the <code>Node</code> class:</p>
<pre><code>def sumRToL(self, partial_sum=0):
    if self.right is not None:
        partial_sum = self.right.sumRToL(partial_sum)
    self.value += partial_sum
    if self.left is not None:
        self.left.sumRTol(self.value)
    return self.value
</code></pre>
<p>Using this on mutable <code>value</code>s might have strange effects.</p>
<p>on <code>BST</code>:</p>
<pre><code>def sumelementsfromRtoLinplace(self):
    if self.root is not None:
        self.root.sumRToL()
</code></pre>
<h1>validate</h1>
<p>checking whether your tree is valid can become very easy via the iterator we just implemented. Using <code>pairwise</code> from the itertool recipes:</p>
<pre><code>def validate(self):
    return all(a &gt; b for a, b in pairwise(self)) # or self.inorder() for extra clarity
</code></pre>
<h1>testing</h1>
<p>These unit tests can be better done in another file, importing this file, and using one of the unit test frameworks. I'm quite happy with <code>py.test</code>.</p>
<pre><code>import pytest

from binary_tree import BST


def test_order():
    bst = BST(range(10))
    assert [item.value for item in bst.inorder()] == list(range(10))
    assert [item.value for item in bst] == list(range(10))


def test_reverse():
    bst = BST(range(10))

    items = list(reversed(range(10)))
    assert [item.value for item in bst.inorder_reverse()] == items
    assert [item.value for item in reversed(bst)] == items


def test_equal():
    bst1 = BST(range(5))
    bst2 = BST(range(5))
    bst3 = BST(range(6))
    bst4 = BST(range(-3, 6))

    assert bst1 == bst2
    assert bst1 != bst3
    assert bst3 != bst1
    assert bst1 != bst4
...
</code></pre>
<hr>
<h1>total code</h1>
<pre><code>from general_tools.itertools_recipes import pairwise


class Node:
    def __init__(self, value):
        self.left: Node = None
        self.right: Node = None
        self.value = value

    def inorder(self):
        if self.left is not None:
            yield from self.left.inorder()
        yield self
        if self.right is not None:
            yield from self.right.inorder()

    def inorder_reverse(self):
        if self.right is not None:
            yield from self.right.inorder_reverse()
        yield self
        if self.left is not None:
            yield from self.left.inorder_reverse()

    def preorder(self):
        yield self
        if self.left is not None:
            yield from self.left.inorder()
        if self.right is not None:
            yield from self.right.inorder()

    def postorder(self):
        if self.left is not None:
            yield from self.left.inorder()
        if self.right is not None:
            yield from self.right.inorder()
        yield self

    def find(self, key):
        if self.value == key:
            return self
        next = self.right if self.value &lt; key else self.left
        if next is None:
            return None  # or raise IndexError
        return next.find(key)

    def __eq__(self, other):
        if other is None:
            return False
        return (
            self.value == other.value
            and self.left == other.left
            and self.right == other.right
        )

    def sumRToL(self, partial_sum=0):
        if self.right is not None:
            partial_sum = self.right.sumRToL(partial_sum)
        self.value += partial_sum
        if self.left is not None:
            self.left.sumRTol(self.value)

    def __str__(self):
        return f"{self.value} "

    def __repr__(self):
        return f"Node({self.value})"


class BST:
    def __init__(self, values=None):
        self.root: Node = None
        if values is not None:
            self.update(values)

    def insert(self, key):
        if self.root is None:
            self.root = Node(key)
            return
        curr = self.root
        parent = None
        while curr and curr.value != key:
            parent, curr = curr, curr.right if curr.value &lt; key else curr.left
        if parent is not None:
            if parent.value &lt; key:
                parent.right = Node(key)
            else:
                parent.left = Node(key)

    def update(self, values):
        for value in values:
            self.insert(value)

    def delete(self, key):
        pass

    def find(self, key):
        return self.root.find(key)

    def inorder(self):
        return self.root.inorder()

    def inorder_reverse(self):
        return self.root.inorder_reverse()

    def preorder(self):
        return self.root.preorder()

    def postorder(self):
        return self.root.postorder()

    def sumelementsfromRtoLinplace(self):
        if self.root is not None:
            self.root.sumRToL()

    def validatebst(self):
        return all(a &gt; b for a, b in pairwise(self))

    __iter__ = inorder
    __reversed__ = inorder_reverse

    def __eq__(self, other):
        return self.root == other.root
</code></pre>
    </div>