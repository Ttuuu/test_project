<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Naming</h3>

<p><code>perfect</code> is quite general for a function name. A better choice might be something like <code>nth_perfect_power</code>.</p>

<h3>Docstring comments</h3>

<p>You have documented the function with a docstring comment, which is good. There is some repetition and verbosity however. I would perhaps use a single-line description, plus a description of what a perfect power is. You could also add some <a href="https://docs.python.org/3/library/doctest.html" rel="nofollow noreferrer"><code>doctest</code></a> examples:</p>

<pre><code>def nth_perfect_power(n: int) -&gt; int:
    """Return the n'th perfect power.

    A perfect power is a positive integer of the form m ** k with
    m &gt;= 1 and k &gt;= 2. Examples from https://oeis.org/A001597:

    &gt;&gt;&gt; nth_perfect_power(1)
    1
    &gt;&gt;&gt; nth_perfect_power(10)
    49
    &gt;&gt;&gt; nth_perfect_power(50)
    1521
    """
</code></pre>

<p>Of course this is largely opinion-based.</p>

<h3>Review and performance improvements</h3>

<p>The initial assignment </p>

<pre><code>i = 1
for i in range(0, n**2+1):
    // ...
        i += 1
</code></pre>

<p>has no effect, and incrementing <code>i</code> within the loop makes the logic difficult to understand. Perhaps this is done to take care of duplicate powers such as <span class="math-container">\$ 8^2 = 4^3 \$</span>, but there are better approaches to solve that. You can for example move the check for a perfect power to a separate function (where you can early-return). </p>

<p>Apart from the first perfect power <span class="math-container">\$ i = 1 \$</span> one only needs to check values <span class="math-container">\$ m, k \ge 2 \$</span>.</p>

<p>The length of the <code>powers</code> array needs only to be checked again if we added an element, not for each value of <span class="math-container">\$ i \$</span>.</p>

<p>The last element of an array can be retrieved as <code>powers[-1]</code>.</p>

<p>Summarizing these topics so far, we get the following implementation:</p>

<pre><code>def is_perfect_power(i: int) -&gt; bool:
    if i == 1:
        return True
    for k in range(2, i):
        for m in range(2, i):
            if m ** k == i:
                return True
    return False

def nth_perfect_power(n: int) -&gt; int:
    powers = []
    for i in range(1, n**2 + 1):
        if is_perfect_power(i):
            powers.append(i)
            if len(powers) == n:
                break
    return powers[-1]
</code></pre>

<p>This is more code than your original, but easier to read and slightly more efficient. It can be improved further: The exponentiation <span class="math-container">\$ m^k \$</span> can be replaced by repeated multiplication with <span class="math-container">\$ m \$</span>. Also the inner loop can be exited as soon as a power is larger than the candidate <span class="math-container">\$ i \$</span>:</p>

<pre><code>def is_perfect_power(i: int) -&gt; bool:
    if i == 1:
        return True
    for m in range(2, i):
        p = m * m
        while p &lt; i:
            p *= m
        if p == i:
            return True
    return False
</code></pre>

<p>With these changes, the <span class="math-container">\$ 20^\text{th} \$</span> perfect power is found in approx. 3 milliseconds (compared to 2.6 seconds with your original code), and the <span class="math-container">\$ 100^\text{th} \$</span> perfect power is found in approx. 2.5 seconds.</p>

<h3>A different approach</h3>

<p>Your code determines for every candidate <span class="math-container">\$ i \$</span> if it is a perfect power by computing <span class="math-container">\$ m^k \$</span> for all <span class="math-container">\$ m, k \$</span> in the range <span class="math-container">\$ 0, \ldots, i \$</span>. This is done for all <span class="math-container">\$i \$</span> up to  <span class="math-container">\$ n^2\$</span>, until <span class="math-container">\$ n \$</span> perfect powers are found.</p>

<p>As an example, in order to find the <span class="math-container">\$ 20^\text{th} \$</span> perfect power, <span class="math-container">\$ m^k \$</span> is computed <span class="math-container">\$ 3382670\$</span> times.</p>

<p>We already improved that by restricting the base <span class="math-container">\$ m \$</span> and the exponent <span class="math-container">\$ k \$</span> to smaller ranges. But for larger values of <span class="math-container">\$ n \$</span> we need a different approach.</p>

<p>It is much more efficient to compute all perfect powers (in some range) instead, and then take the <span class="math-container">\$ n^\text{th} \$</span> smallest number. Since there can be duplicates (e.g. <span class="math-container">\$ 8^2 = 4^3 \$</span>), a <em>set</em> should be used to collect the perfect powers.</p>

<p>You already used that there must be <span class="math-container">\$ n \$</span> perfect numbers in the range <span class="math-container">\$ 1, \ldots, n^2 \$</span>. This can still be used to limit the range of the exponent <span class="math-container">\$ k \$</span>.</p>

<p>As an example, in order to find the <span class="math-container">\$ 20^\text{th} \$</span> perfect power we need the numbers <span class="math-container">\$ m^k \$</span> in the range <span class="math-container">\$1, \ldots, 400 \$</span>. The first perfect number <span class="math-container">\$ 1 \$</span> can be handled separately, so that <span class="math-container">\$ m \ge 2 \$</span> and <span class="math-container">\$ k \ge 2 \$</span>:</p>

<p><span class="math-container">$$
\begin{align}
 m&amp;=2:  4, 8, 16, 32, 64, 128, 256 \\
 m&amp;=3: 9, 27, 81, 243 \\
 m&amp;=4:  16, 64, 256 \\
 m&amp;=5:  25, 125 \\
 m&amp;=6:  35, 216 \\
 m&amp;=7:  49, 343 \\
 m&amp;=8:  64 \\
 \vdots \\
 m&amp;=20: 400
\end{align}
$$</span></p>

<p>This leads to the following implementation:</p>

<pre><code>def nth_perfect_power(n: int) -&gt; int:
    upper_limit = n * n
    powers = set([1])
    for m in range(2, n + 1):
        p = m * m
        while p &lt;= upper_limit:
            powers.add(p)
            p *= m
    return sorted(powers)[n-1]
</code></pre>

<p>This finds the <span class="math-container">\$ 100000^\text{th} \$</span> perfect power is found in approx. 0.1 seconds, and the one-millionth perfect power in approx. 1.4 seconds.</p>

<p>For even more performance, we can use a <em>heap</em> structure to store only the <span class="math-container">\$ n \$</span> smallest powers found so far. The Python <code>heapq</code> is a min-heap but we need a max-heap. Therefore all powers are multiplied by <span class="math-container">\$(-1)\$</span>. We start with the list of squares and then add the third, fourth, ... powers. For every base <span class="math-container">\$ m \$</span> we can stop as soon as <span class="math-container">\$ p = m^k \$</span> is larger than the <span class="math-container">\$ n \$</span> smallest powers found so far.</p>

<p>Implementation:</p>

<pre><code>def nth_perfect_power(n: int) -&gt; int:
    heap = [- i * i for i in range(1, n+1)]
    heapq.heapify(heap)
    powers = set(heap)
    for m in range(2, n + 1):
        p = - m * m * m
        if p &lt;= heap[0]:
            break
        while p &gt; heap[0]:
            if not p in powers:
                powers.remove(heapq.heappushpop(heap, p))
                powers.add(p)
            p *= m
    return -heap[0]
</code></pre>

<p>This computes the one-millionth perfect power in approx. 0.42 seconds.</p>
    </div>