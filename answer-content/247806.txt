<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are a few things that came to my mind:</p>
<hr>
<h2>Bug</h2>
<ul>
<li><p><code>if temp != ' '</code> will not work when there are more than 1 consecutive spaces.<br>
To fix this, use <code>if not temp.isspace()</code> instead of comparing with a hard-coded string.<br>
For example, <code>s = 'a,   [b]'</code> will output <code>['a', ['b'], '   ']</code> for your current code.</p>
</li>
<li><p>Your code outputs <code>['a', ' b']</code> for <code>a, b</code>. I'll assume that including the space is a feature and not a bug.</p>
</li>
</ul>
<hr>
<h2>Design</h2>
<ul>
<li><p>Wrap the test code inside  <code>if __name__ == '__main__'</code>. This will prevent the code from being called when being imported from another module.</p>
</li>
<li><p>Function names should preferably be lowercase. Change the CamelCase names to snake_case.</p>
</li>
<li><p>In return statements, you need not enclose the items in a parenthesis if you are returning a tuple</p>
</li>
<li><p><code>result = list()</code> can be replaced with just <code>result = []</code></p>
</li>
<li><p><code>if len(temp)</code> can be replaced with just <code>if temp</code>. The bool of empty values are <code>False</code> in python.</p>
</li>
</ul>
<pre class="lang-py prettyprint-override"><code>res = parse_to_list(string, i + 1)
i = res[1]
result.append(res[0])
</code></pre>
<p>The above can be a bit simplified and can be made a bit more understandable.</p>
<pre class="lang-py prettyprint-override"><code>nested_list, i = parse_to_list(string, i + 1)
result.append(nested_list)
</code></pre>
<ul>
<li><p>Instead of using <code>string[i]</code>, you can declare a new element <code>char</code> which is equal to <code>string[i]</code><br>
(This is just my personal preference)</p>
</li>
<li><p>You can declare <code>parse_to_list</code> to inside <code>list_parse</code>. This will remove the need to pass <code>string</code> inside a recursion repeatedly, and will also make the inner function "private".<br>
(But this is also just my personal preference)</p>
</li>
</ul>
<p>The final code should look something like this after applying the above:</p>
<pre class="lang-py prettyprint-override"><code>def list_parse(string):
    def parse_to_list(cont=0):
        result = []
        temp = ''
        i = cont

        while i &lt; len(string):
            char = string[i]

            if char == ',':
                if temp and not temp.isspace():
                    result.append(temp)
                temp = ''

            elif char == '[':
                nested_list, i = parse_to_list(i + 1)
                result.append(nested_list)

            elif char == ']':
                if temp and not temp.isspace():
                    result.append(temp)
                return result, i

            else:
                temp += char

            i += 1

        if temp and not temp.isspace():
            result.append(temp)

        return result, i

    return parse_to_list()[0]


if __name__ == '__main__':
    s = 'a,s,[c,f],[f,t], [[a,c],[d3,32]]'

    print(list_parse(s))
</code></pre>
    </div>