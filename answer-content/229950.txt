<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Imports</h2>

<p>In general, imports should be listed at the top of the script, not inside function definitions.  So instead of this:</p>

<pre><code>def validate_word(words, letters):
    from collections import Counter
    ...
</code></pre>

<p>Write:</p>

<pre><code>from collections import Counter

def validate_word(words, letters):
    ...
</code></pre>

<h2>Variable names</h2>

<p>In Python, variable names should be <code>snake_case</code>.  Words beginning with upper case letters are reserved from classes, like <code>Counter</code>, so <code>Count</code> should be called <code>count</code>.</p>

<h2>Test Code</h2>

<p><code>user_word</code> and <code>letters</code> are declared far from the code that uses them.  They should be declared near where they are used, so at the bottom of the script, and ideally inside a <code>__name__ == '__main__'</code> guard:</p>

<pre><code>from collections import Counter

def validate_word(word, letters):
    ...

if __name__ == '__main__':
    user_word = 'BANANA'
    letters = ['N', 'B', 'N', 'A', 'A', 'P', 'M', 'S', 'A']
    print(validate_word(user_word, letters))
</code></pre>

<h2>A String is a List of Characters</h2>

<p>The <code>Counter</code> class accepts an iterable for its construction argument, such as the list of letters you want to count.  But a string is also an iterable list of characters, so instead of a list, you could simply pass in a string, and it would work just as well:</p>

<pre><code>if __name__ == '__main__':
    user_word = 'BANANA'
    letters = 'NBNAAPMSA'
    print(validate_word(user_word, letters))
</code></pre>

<h2>Counters</h2>

<p>You are counting up the counts of letters you are allowed to use.  Why not count up the count of letters in the <code>user_word</code>?</p>

<pre><code>&gt;&gt;&gt; Counter('NBNAAPMSA')
Counter({'A': 3, 'N': 2, 'B': 1, 'P': 1, 'M': 1, 'S': 1})
&gt;&gt;&gt; Counter('BANANA')
Counter({'A': 3, 'N': 2, 'B': 1})
</code></pre>

<p>Then instead of looping over the letters of the user word, and subtracting 1 from the letter count, you could compare the letter counts directly.</p>

<p>Or ... you could subtract one from the other ...</p>

<pre><code>&gt;&gt;&gt; counts = Counter('NBNAAPMSA')
&gt;&gt;&gt; counts.subtract('BANANA')
&gt;&gt;&gt; counts
Counter({'P': 1, 'M': 1, 'S': 1, 'N': 0, 'B': 0, 'A': 0})
&gt;&gt;&gt; 
</code></pre>

<p>As long as all values in the counter are non-negative, the word is valid.</p>

<pre><code>&gt;&gt;&gt; all(count &gt;= 0 for count in counts.values())
True
</code></pre>

<p>From this, a simpler function can be created.  Left to student.</p>
    </div>