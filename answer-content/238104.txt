<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm concentrating only on the API design.</p>

<pre><code>final long timeStart = System.currentTimeMillis();
...
final long timeEnd = System.currentTimeMillis();
builder.addObservation((timeEnd - timeStart) / 1000.0);
</code></pre>

<p>This code is IMHO a bit too cumbersome for the user and allows for programming errors to mess up the statistics. The user has to remember to do the logging exactly the same way every time. I would like to see the time keeping offloaded to the statistics library itself.</p>

<p>For example with an observation token that has an internal callback to the builder. This would have the benefit that if you don't want to gather statistics, you could control it with a config switch and just return a common dummy token that does nothing (zero memory footprint, practically no processor time wasted).</p>

<pre><code>final Observation observation = builder.startObservation();
...
observation.finish();
</code></pre>

<p>Possibly with a Runnable:</p>

<pre><code>builder.observe(() -&gt; {
    ...
});
</code></pre>

<p>Once this is implemented, the recording of the time stamps should be made with a <code>Supplier&lt;Long&gt;</code> if the user wants to log a specific time source other than <code>System.currentTimeMillis()</code>. This feature would also allow efficient unit testing.</p>

<pre><code>private Supplier&lt;Long&gt; timeSupplier = () -&gt; System.currentTimeMillis();

public void setTimeSupplier(Supplier&lt;Long&gt; timeSupplier) {
    this.timeSupplier = timeSupplier;
}
</code></pre>

<p>Instead of fractions of seconds as <code>double</code>s I would just log the smallest available time units (millis) and convert them to human readable format during formatting.</p>
    </div>