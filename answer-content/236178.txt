<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I have some suggestions.</p>
<h2>MessageViewerProgram</h2>
<ol>
<li>Instead of brute forcing all the messages in the directory, I suggest that you list them and iterate on them instead. You can use the method <code>java.io.File#listFiles()</code> for this.</li>
</ol>
<pre class="lang-java prettyprint-override"><code>File file = new File(saveDir);
File[] files = file.listFiles();
</code></pre>
<p>This will give you an array of the files in the message folder, and you can iterate.</p>
<pre class="lang-java prettyprint-override"><code>File saveDir = new File(".save/messages/");

for (File currentMessageFile : saveDir.listFiles()) {
   try (FileInputStream fis = new FileInputStream(currentMessageFile);
            ObjectInputStream ois = new ObjectInputStream(fis)) {

      Message message = (Message) ois.readObject();
      System.out.println(message.getSenderName() + ": " + message.getMessage());
   } catch (IOException e) {
      e.printStackTrace();
   } catch (ClassNotFoundException e) {
      e.printStackTrace();
   }
}
</code></pre>
<h2>MessageWriterProgram</h2>
<ol>
<li>The initialization of the <code>MessageWriterProgram#scanner</code> variable outside the constructor is useless, it's created  inside the constructor already.</li>
</ol>
<pre class="lang-java prettyprint-override"><code>private Scanner scanner;

public MessageWriterProgram() {
   scanner = new Scanner(System.in);
}
</code></pre>
<ol start="2">
<li>I suggest that you rename the method <code>mainLoop</code> in <code>start</code> or <code>run</code> or even <code>execute</code>.</li>
</ol>
<h3><code>MessageWriterProgram#saveMessage</code> method</h3>
<ol>
<li><p>Rename the variable <code>filename</code> into <code>fileName</code></p>
</li>
<li><p>I suggest that you extract the logic of counting the next file name in a method.</p>
</li>
</ol>
<pre class="lang-java prettyprint-override"><code>public void saveMessage(Message message) {
   // create file name that isn't used
   int fileName = getNextFilename();
   //[...]
}

private int getNextFilename() {
   int fileName = getNextFilename();

   while (true) {
      File file = new File(SAVE_DIR_NAME + fileName);
      if (file.exists()) {
         fileName++;
      } else {
         break;
      }
   }

   return fileName;
}
</code></pre>
<ol start="3">
<li>Instead of counting the messages in the loop, you can use the <code>java.io.File#listFiles()</code> and check the number of files in the folder.</li>
</ol>
<pre class="lang-java prettyprint-override"><code>private int getNextFilename() {
   File messageDirectory = new File(SAVE_DIR_NAME);
   File[] files = messageDirectory.listFiles();

   if (files != null) {
      return files.length + 1;
   } else {
      return 1;
   }
}
</code></pre>
<h3><code>MessageWriterProgram#login</code> method</h3>
<p>In my opinion, this method is a bit useless and add confusion, since it does more than one thing.</p>
<ul>
<li>Check if the User is present.</li>
<li>Update the <code>identity</code> variable.</li>
</ul>
<p>If you inline it, it will be more readable and you can convert the <code>identity</code> variable to a local variable.</p>
<pre class="lang-java prettyprint-override"><code>System.out.print("Name: ");
String name = scanner.nextLine();
System.out.print("Password: ");
String password = scanner.nextLine();

User identity = userManager.retainUserIdentity(name, password);

if (identity == null) {
   System.out.println("Login was not successful.");
   return;
}
</code></pre>
<h3>Refactored <code>MessageWriterProgram</code> class</h3>
<pre class="lang-java prettyprint-override"><code>public class MessageWriterProgram {
   public static void main(String[] args) {
      MessageWriterProgram mwp = new MessageWriterProgram();
      mwp.mainLoop();
   }

   private static final String SAVE_DIR_NAME = ".save/messages/";

   private Scanner scanner;
   private UserManager userManager;

   public MessageWriterProgram() {
      scanner = new Scanner(System.in);
      userManager = new UserManager();
   }

   public void mainLoop() {
      System.out.print("Name: ");
      String name = scanner.nextLine();
      System.out.print("Password: ");
      String password = scanner.nextLine();

      User identity = userManager.retainUserIdentity(name, password);

      if (identity == null) {
         System.out.println("Login was not successful.");
         return;
      }

      System.out.println(identity.getName());

      while (true) {
         System.out.print("&gt; ");
         String input = scanner.nextLine();

         if (!input.isEmpty()) {
            Message message = new Message(identity.getName(), input);
            saveMessage(message);
         }
      }
   }

   public void saveMessage(Message message) {
      // create file name that isn't used
      int fileName = getNextFilename();

      File file = new File(SAVE_DIR_NAME + fileName);

      // store message
      try (FileOutputStream fos = new FileOutputStream(file);
               ObjectOutputStream oos = new ObjectOutputStream(fos)) {
         oos.writeObject(message);
      } catch (IOException e) {
         e.printStackTrace();
      }
   }

   private int getNextFilename() {
      File messageDirectory = new File(SAVE_DIR_NAME);
      File[] files = messageDirectory.listFiles();

      if (files != null) {
         return files.length + 1;
      } else {
         return 1;
      }
   }
}
</code></pre>
    </div>