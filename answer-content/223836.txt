<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A few things might be better, but you will need to measure if they actually help. (untested code)</p>

<p>The most costly thing in your program (except the I/O) is properly allocation for the strings. So to avoid continuous reallocation you could try </p>

<pre><code>result.reserve(word.size());
</code></pre>

<p>and </p>

<pre><code>constexpr int LargeBuffer { 4096 };
std::string word;
word.reserve(LargeBuffer); // reuse the buffer.
while (tests--) {
    std::cin &gt;&gt; word;
    std::cout &lt;&lt; reduce(word) &lt;&lt; "\n"; // this call might use NRVO
}
</code></pre>

<p>That might still trigger one allocation per word, so a more drastic rebuild could be</p>

<pre><code>std::string&amp; reduce(std::string const&amp; word, std::string &amp; result)
</code></pre>

<p>and</p>

<pre><code>constexpr int LargeBuffer { 4096 };
std::string word, result;
word.reserve(LargeBuffer); // reuse the buffer.
result.reserve(LargeBuffer);
while (tests--) {
    std::cin &gt;&gt; word;
    result.clear(); // should not dealloc.
    std::cout &lt;&lt; reduce(word, result) &lt;&lt; "\n";
}
</code></pre>

<p>The strings will grow and keep their new size if the actual word is larger than expected.</p>

<p>The next most expensive should be the std::to_string</p>

<pre><code>    if (dist &lt; 3) {
        result.append(dist, *it); // from Toby's answer
    } else {
        result.append(*it);
        if (dist &lt; 10) {
          result.append('0'+dist);
        } else {
          result.append(std::to_string(dist));  // hopefully we are saved here by short string optimisation
      }
    }
</code></pre>

<p>The change should work nicely for your example data, less so if the repeats randomly change between &lt;10 and &gt;= 10.</p>
    </div>