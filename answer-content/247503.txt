<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>i think the comments cover the why of things, but please feel free to ask if you have any questions. [<em>grin</em>]</p>
<pre><code>#region &gt;&gt;&gt; fake reading in a list of names
#    in real life, use Get-Content
$InStuff = @'
Čedomir Đorđević
JANKOV ZORAN 
Stojić Gradimir
Vučićević R Željko
Magda Boškić
'@ -split [System.Environment]::NewLine

&lt;# intended output
cedomir.djordjevic
zoran.jankov
gradimir.stojic
zeljko.vucicevic 
magda.boskic [lastname @ end]
#&gt;
#endregion &gt;&gt;&gt; fake reading in a list of names



function Get-UserNameFromFullName
    # your "Get-UsernameFromFullName" name leaves the "N" in "Username" in lowercase
    #    that is not consistent with your use of that in other names of items
    {

    &lt;#
    where is the Comment Based Help?
    #&gt;

    [CmdletBinding ()]
    Param
        (
        [Parameter (
            Position = 0,
            # the following are switches that default to "$False"
            #    that means there is no need to add "= $True"
            #    the simple presense of the attribute flips it to "$True"
            Mandatory,
            ValueFromPipeline,
            # the following requres the pipeline object contain a property named ".FullName"
            #    is that always going to be the case?
            #    if not, then the "ValueFromPipeline" above will handle bare values
            ValueFromPipelineByPropertyName
            )]
            [string]
            $FullName,

        [Parameter (
            Position = 1,
            # making this mandatory makes little sense when a default is supplied
            #Mandatory,
            # does it make any sense to use the following attribute?
            ValueFromPipelineByPropertyName
            )]
            # don't use "First" and "Last" for _position_ info when the same words are used for the name parts
            #    it's needlessly confusing
            #[ValidateSet ('First', 'Last')]
            [ValidateSet ('Start', 'End')]
            [string]
            $LastNamePosition = 'Start'
        )

    begin {}

    process
        {
        # properly supporting the pipeline requires one to have a "process" block.
        #    otherwise all code is run in a virtual "end" block ... and that does not correctly support pipeline input

        # mixing camelCase and PascalCase for variable names is confusing [*grin*] 
        #    the recommended style for PoSh is PascalCase
        #$usernameComponents = $FullName.ToLower().Split(" ")
        # the 2nd sample name has a trailing space
        #    the ".Trim()" removes that
        # good practice in PoSh is to avoid using double quotes since that can trigger unwanted expansion of $Vars
        $UserNameComponents = $FullName.Trim().ToLower().Split(' ')

        switch ($LastNamePosition)
            {
            'Start' {
                # "index -1, index 0" for the $UserNameComponents skips any middle name or initial
                $UserName = '{0}.{1}' -f $UserNameComponents[-1], $UserNameComponents[0]
                }
            'End' {
                $UserName = '{0}.{1}' -f $UserNameComponents[0], $UserNameComponents[-1]
                }
            # this is a binary choice, so the "default" is not needed
            #Default { $firstName = $UserNameComponents.Length -1; $lastName = 0 }
            }

        # there is no need to assign the output to anything
        #    whatever is left unassigned will be sent out
        # there is also no need for "return"
        #    that is disrecommeded since it gives the false impression that ONLY the item to its right will be returned
        # the "-replace" operator can be chained. so can the ".Replace()" method
        #    that allows us to skip breaking things into an array of chars
        $UserName -replace 
            'č', 'c' -replace
            'ć', 'c' -replace
            'đ', 'dj' -replace
            'š', 's' -replace
            'ž', 'z'

        } # end &gt;&gt;&gt; process

    end {}

    } # end &gt;&gt;&gt; function Get-UserNameFromFullName
</code></pre>
<p>run with all names, no parameters, and using the pipeline ...</p>
<pre><code>$InStuff |
    Get-UserNameFromFullName
</code></pre>
<p>output ...</p>
<pre><code>djordjevic.cedomir
zoran.jankov
gradimir.stojic
zeljko.vucicevic
boskic.magda
</code></pre>
<p>run with all parameters listed and only one input value ...</p>
<pre><code>Get-UserNameFromFullName -FullName $InStuff[-1] -LastNamePosition End
</code></pre>
<p>output = <code>magda.boskic</code></p>
    </div>