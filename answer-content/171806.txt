<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Bug</h3>
<p>If you insert a key, it might get pushed forward in the array because other keys are in the way.  Then if you delete one of those keys that were in the way, you can never retrieve the first key.  For example, imagine that key <code>A</code> and key <code>B</code> hash to the same index.  Then if you do this :</p>
<pre><code>putValueForKey(hash, A, data1); // Ends up in slot [0]
putValueForKey(hash, B, data1); // Ends up in slot [1]
deleteHash(hash, A);            // Now slot [0] is NULL
</code></pre>
<p>Then you can never find key <code>B</code> again:</p>
<pre><code>// Here, ret becomes NULL because the hash table can't find B any more!
ret = getValueByKey(hash, B);
</code></pre>
<p>In order to fix this bug, your deletion function needs to be a lot more complicated.  You should read <a href="https://en.wikipedia.org/wiki/Linear_probing#Deletion" rel="nofollow noreferrer">this wikipedia article on how to delete an item when using linear probing</a>.  Better yet, you could choose a different collision strategy than linear probing.  <a href="https://en.wikipedia.org/wiki/Hash_table#Collision_resolution" rel="nofollow noreferrer">Here are some alternatives</a>.</p>
    </div>