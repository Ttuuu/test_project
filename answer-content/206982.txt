<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Keep it simple</h2>

<p>There is an awful lot of arguments being passed and objects being created and returned, on top of  3 exposed functions that are just middle men complicating the core need.</p>

<p>You want to check a rule set and see if it valid, if not then see the errors.</p>

<p>This can all be done via getters for <code>isValid</code> and <code>errors</code> and a setter for the rule set that also initiates the validation.</p>

<p>You can use <code>Object.entries</code> to get the <code>key</code> and <code>value</code> pairs</p>

<pre><code> function Validator(ruleSet) {
    const errors = [];
    const rules = {
        required(element) {
            if (element.value.length &lt;= 0) {
                errors.push(`${element.getAttribute("name")} is required.`);
            }
        },
         // todo: alpha =&gt; only alpha characters
         // todo: alphanum =&gt; Alphanumeric characters
         // todo: num =&gt; Numbers only

    }
    const API = {
        set rules(ruleSet) { 
            errors.length = 0;
            Object.entries(ruleSet).forEach(([key, value]) =&gt; {
                const element = document.getElementsByName(key)[0];
                if (element) {
                    value.forEach(rule =&gt; rules[rule] &amp;&amp; rules[rule](element));
                }
            });
        },
        get isValid() { return errors.length === 0 },
        get errors() { return [...errors] },
    };
    if(ruleSet) { API.rules = ruleSet };
    return API;
}
</code></pre>

<p>Instantiating the <code>Validator</code> with a rule set and getting the results without the need to force the validation</p>

<pre><code>//  Usage 

const validator = Validator({
    username: ["required"],
    password: ["required"],
});
if(!validator.isValid){
    alert('Errors are: \n' + validator.errors.join("\n"));
}
</code></pre>

<h2>But why create a complex object</h2>

<p>You create an object that does not actually contain the information you are after. All you want is the result <code>{isValid, errors}</code></p>

<p>It would be more practical as a basic function</p>

<pre><code>function validator(ruleSet) {
    const errors = [];
    const rules = {
        required(element) {
            if (element.value.length &lt;= 0) {
                errors.push(`${element.getAttribute("name")} is required.`);
            }
        },
    }
    Object.entries(ruleSet).forEach(([key, value]) =&gt; {
        const element = document.getElementsByName(key)[0];
        if (element) {
           value.forEach(rule =&gt; rules[rule] &amp;&amp; rules[rule](element));
        }
    });
    return {isValid : errors.length === 0, errors};
}
</code></pre>

<p>BTW the <code>split("|")</code> is a little hacky and limits you rules to be strings. Using arrays to hold the values give more flexibility.</p>

<pre><code>const result = validator({
    username: ["required"],
    password: ["required"],
});
if(!result.isValid){
    alert('Errors are: \n' + result.errors.join("\n"));
}
</code></pre>
    </div>