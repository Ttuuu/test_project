<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First impressions: I like the comments that clearly specify preconditions and postconditions - very valuable in C!  One thing that wasn't clear was the meaning of the return value from the insert/add/remove methods - is that the number of elements added/removed?</p>

<p>It would be nice to have a list of all the functions at the top of the file (I was surprised to find no accessor to return the size of a dynamic array).</p>

<p>It's a shame there's no simple <code>main()</code> included.</p>

<hr>

<p>A limitation of pasting type names to create identifiers is that it requires typedefs for types such as <code>long long</code> or <code>struct foo</code> or <code>char*</code>.  We can probably live with that.</p>

<hr>

<p>Here's a memory leak:</p>

<blockquote>
<pre><code>LinkedListNode *new_node;
LinkedList *new_llist;

new_node = create_node(head_key); 
new_llist = malloc(sizeof(LinkedList));
if (new_node == NULL || new_llist == NULL)
{
    /* Allocation failed. */
    return NULL;
}
</code></pre>
</blockquote>

<p>If one of the allocations succeeds and the other fails, we never free the successful one, and lose our reference to it.</p>

<p>Thankfully, <code>free()</code> will do the right thing when given a null pointer, so we can unconditionally free both pointers:</p>

<pre><code>LinkedListNode *const new_node = create_node(head_key); 
LinkedList *const new_llist = malloc(sizeof *new_llist);

if (new_node == NULL || new_llist == NULL) {
    /* Allocation failed. */
    free(new_node);
    free(new_llist);
    return NULL;
}
</code></pre>

<hr>

<p>A nicety: it may simplify calling code if it can accept a null pointer instead of a list:</p>

<pre><code>#define DEFINE_DYNAMIC_ARRAY_DTOR(T)                            \
    void dynamic_array_##T##_destruct(DynamicArray_##T *self)   \
    {                                                           \
        if (self) {                                             \
            free(self-&gt;array);                                  \
            free(self);                                         \
        }                                                       \
    }
</code></pre>

<p>This makes it behave more like <code>free()</code> causing less surprise to users.</p>

<hr>

<p>I don't think there's much to be gained by having <code>load</code> as a member, given that it can always be obtained from <code>size</code> and <code>capacity</code>.</p>

<hr>

<p>We can make the expand/contract functions much more efficient, by using <code>realloc()</code> instead of <code>malloc()</code> and copy every time:</p>

<pre><code>#define DEFINE_DYNAMIC_ARRAY_EXPAND(T)                                  \
    static int dynamic_array_##T##_expand(DynamicArray_##T *self)       \
    {                                                                   \
        size_t new_capacity = EXPANSION_FACTOR * (self-&gt;capacity);      \
        T *new_array = realloc(self-&gt;array, new_capacity * sizeof (T)); \
        if (!new_array) {                                               \
            /* Return and do not alter original array. */               \
            return 1;                                                   \
        }                                                               \
                                                                        \
        self-&gt;array = new_array;                                        \
        self-&gt;capacity = new_capacity;                                  \
        dynamic_array_##T##_recalc_load(self);                          \
        return 0;                                                       \
    }
</code></pre>

<p><code>realloc()</code> only needs to copy data if it couldn't extend the existing allocation.</p>

<p>The <code>contract()</code> function has almost exactly the same code, with only a different <code>new_capacity</code> calculation (and perhaps should be merged).</p>

<p>On a related note, instead of loops like this:</p>

<blockquote>
<pre><code>/* Move all elements in [i+1..self-&gt;size) forward one index. */          \
array = self-&gt;array;                                                     \
for (idx = self-&gt;size; idx &gt; i; idx--)                                   \
{                                                                           \
    array[idx] = array[idx - 1];                                            \
}                                                                           \
</code></pre>
</blockquote>

<p>we could save both code and CPU time by using <code>memmove()</code> (untested):</p>

<pre><code>    /* Move all elements in [i+1..self-&gt;size) forward one index. */ \
    memmove(self-&gt;array + i + 1, self-&gt;array + i,                   \
            (self-&gt;size - i) * sizeof *self-&gt;array);                \
</code></pre>

<p>And in the <code>delete_elem()</code>:</p>

<pre><code>    /* Copy every element in [i+1..) back one index. Overwrites array[i] */ \
    memmove(self-&gt;array + i, self-&gt;array + i + 1,                   \
            (self-&gt;size - i) * sizeof *self-&gt;array);                \
</code></pre>

<hr>

<p>We have unused local variables called <code>idx</code> in several functions: <code>linked_list_add_at()</code>, <code>linked_list_remove_at()</code>, <code>linked_list_remove_key()</code>, <code>linked_list_contains_key()</code>, <code>linked_list_get_key()</code>.</p>

<p>The dynamic array <code>construct</code> declaration ought to be a prototype (explicitly declare <code>(void)</code> = no arguments, rather than <code>()</code> = unspecified arguments).</p>

<p>Make <code>INIT_CAPACITY</code> an unsigned type to prevent unexpected promotion when multiplying by <code>size_t</code>.   Using <code>double</code> rather than <code>float</code> for the other constants reduces compiler warnings, too.</p>
    </div>