<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><em>(Extension of my comment above)</em></p>

<p>It would be a better idea to use literal Unicode rather than HTML entities. The advantage of Unicode characters is that they are usable universally and not only when outputting HTML. If you don't like the literal characters in the source code, or find them hard them to read, then you can use JavaScript escape sequences with the hex Unicode. For example: <code>"“" === "\u201C"</code>. Additionally you can define a constant with a readable name: <code>const LEFT_DOUBLE_QUOTES = "\u201C";</code> or/and do what one always should do if the code is difficult to read and there are no better option: Use comments.</p>

<p>There is nothing to say against using placeholders/markup like this for input, however conversion should happen earlier and not as the last thing. </p>

<p>In case of data stored in the database, if you have a front-end for editing the data in the database, then have that front-end convert the text and store the converted text in the database.</p>

<p>Or this could be done in the HTML templates or even by the template engines themselves by having helper functions, plugins or extensions. That way you can avoid, what I see as the biggest danger when doing globally as the last step: Converting things that shouldn't be converted, such as empty HTML attributes or comments.</p>

<p><code>&lt;input value=''&gt;</code> → <code>&lt;input value=&amp;rdquo;&gt;</code></p>

<p><code>&lt;!-- comment --&gt;</code> → <code>&lt;!&amp;ndash; comment &amp;ndash;&gt;</code></p>

<p>BTW, there is another problem with the placeholders you have chosen: ambiguity. <code>'''</code> could mean either <code>&amp;rdquo;&amp;rsquo;</code> or <code>&amp;rsquo;&amp;rdquo;</code>.</p>

<p>Finally: There are keyboard layouts that have typographical quotes. And there are macro programs that, for example, allow you to define abbreviations or key combinations that could output quotes or other characters, and text editors/IDE also often have a such mechanism built in.</p>
    </div>