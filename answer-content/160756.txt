<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><em>@RolandIllig</em> has raised a fair point: If the array contains a zero, the result at the index of that zero will be <code>NaN</code>.</p>

<p>Here is a functional solution.</p>

<ul>
<li>If the array contains multiple zeros, then all products will contain at least one zero, and therefore all products are zero.</li>
<li>If the array contains one zero, all products will be zero, except the one at the index of that zero.</li>
</ul>

<p></p>

<pre><code>const main2 = (numbers) =&gt; {
    const firstZeroIdx = numbers.indexOf(0);
    const secondZeroIdx = numbers.slice(firstZeroIdx+1).indexOf(0);
    const containsZero = firstZeroIdx !== -1;
    const containsMultipleZeros = secondZeroIdx !== -1;

    let res;    

    if (containsMultipleZeros) {
      res = numbers.map( _ =&gt; 0 );
    }
    else {
      const product = numbers.reduce((acc, val) =&gt; acc * (val || 1), 1);

      if (containsZero) {
        res = numbers.map( (val) =&gt; (val === 0) ? product : 0 );
      }
      else {
        res = numbers.map( (val) =&gt; product / val );
      }
    }

    return res;
};
</code></pre>

<p>This could be further "simplified". Ehm...</p>

<pre><code>const main3 = (numbers) =&gt; {
    const product = numbers.reduce((acc, val) =&gt; acc * val, 1);
    const firstZeroIdx = numbers.indexOf(0);
    const productWithoutFirstZero = numbers.reduce(
              (acc, val, idx) =&gt; acc * (val || idx === firstZeroIdx), 1);
    return numbers.map(
              (val) =&gt; val ? (product / val) : productWithoutFirstZero );
};
</code></pre>
    </div>