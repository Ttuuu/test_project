<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Separate code and test. It's great that you've written a unit test, but the test code should be in a separate class (and typically a separate project) from the code under test.</p>

<p>The testing could also be a bit more exhaustive. Given the same input you can test each value of <code>n</code>: it'll still run in milliseconds. A separate test could handle repeated elements. A third test could handle the extreme of repeated elements: if you have an array of length one million where every element is the same and you give <code>n = arr.Length / 2</code>, does the performance take a nose-dive? I suspect it does, and that's something you might want to address with a Dutch flag partition. Other corner cases would be <code>n = -1</code> or <code>n = arr.Length</code>: at present, I don't think either of those is particularly well handled.</p>

<hr>

<p><code>Select</code> as a name makes sense in context, but when you think about embedding it in a large project or library it isn't very specific. Naming things is hard: my best suggestion after two minutes' thought is <code>PartitionAroundMedian</code>.</p>

<hr>

<p><code>pivotIndex</code> is doing double duty. I think it would be clearer to separate out those duties; since I'm received a comment that this point was unclear, the first step in refactoring this would be</p>

<pre><code>            var pivotIndexIn = n;
            Random r = new Random();
            while (endIndex &gt; startIndex)
            {
                var pivotIndexOut = QuickSelectPartition(partiallySortedArray, startIndex, endIndex, pivotIndexIn);
                if (pivotIndexOut == n)
                {
                    break;
                }
                if (pivotIndexOut &gt; n)
                {
                    endIndex = pivotIndexOut - 1;
                }
                else
                {
                    startIndex = pivotIndexOut + 1;
                }

                pivotIndexIn = r.Next(startIndex, endIndex);
            }
</code></pre>

<p>In fact, <code>QuickSelectPartition</code> doesn't strictly need to receive <code>pivotIndexIn</code> as an argument at all. If the reason for passing it in is to have a clear lifecycle of <code>r</code>, pass <code>r</code> instead.</p>

<p>Note that the scope of <code>pivotIndexOut</code> is narrowed to inside the loop body.</p>

<p>Since I'm talking about names: <code>r</code> is awful. My convention for instances of <code>Random</code> is to call them <code>rnd</code>; others might prefer <code>random</code> or <code>rng</code> (for <em>random number generator</em>).</p>

<hr>

<p>I find it inconsistent to use the primitive type <code>int</code> for the array elements but <code>CompareTo</code> instead of the primitive <code>&gt;</code> to compare them. Since it costs nothing, I would change the first: genericise the quick-select to operate on <code>T where T : IComparable&lt;T&gt;</code>.</p>

<hr>

<p>The decision that <code>Select</code> does not modify its input can be reflected in the type signature by changing it from array to <code>IReadOnlyList&lt;&gt;</code> (or perhaps <code>IEnumerable&lt;&gt;</code> - see below). Similarly the return type could be <code>IList&lt;&gt;</code> or <code>IReadOnlyList&lt;&gt;</code> to indicate the expectation the method has of its user. (Personally I'd favour <code>IList&lt;&gt;</code>).</p>

<hr>

<p><code>Select</code>, <code>QuickSelectPartition</code>, and <code>Swap</code> don't use any instance members of the class, so you need a good reason <em>not</em> to make them all <code>static</code>. In fact, I'd be strongly tempted to make <code>Select</code> an extension method <code>public static IList&lt;T&gt; PartitionAroundMedian&lt;T&gt;(this IEnumerable&lt;T&gt; elements, int n) where T : IComparable&lt;T&gt;</code>.</p>

<hr>

<blockquote>
<pre><code>            for (int i = startIndex; i &lt; endIndex; i++)
            {
                if (array[i].CompareTo(pivotValue) &gt; 0)
                {
                    continue;
                }
                Swap(ref array[i], ref array[startIndex]);
                startIndex++;
            }
</code></pre>
</blockquote>

<p>There are times when a quick-reject and <code>continue</code> makes for readable code. I don't think this is one of them.</p>

<pre><code>            for (int i = startIndex; i &lt; endIndex; i++)
            {
                if (array[i].CompareTo(pivotValue) &lt;= 0)
                {
                    Swap(ref array[i], ref array[startIndex]);
                    startIndex++;
                }
            }
</code></pre>

<p>is shorter and doesn't require mental effort to invert the condition.</p>

<hr>

<blockquote>
<pre><code>            while (endIndex &gt; startIndex)
            {
                pivotIndex = QuickSelectPartition(partiallySortedArray, startIndex, endIndex, pivotIndex);
                if (pivotIndex == n)
                {
                    break;
                }
                ...
            }

            return partiallySortedArray;
</code></pre>
</blockquote>

<p>I'd cut to the chase by putting the <code>return</code> where the <code>break</code> is.</p>

<hr>

<p>Minor quibbles on whitespace: there's inconsistency over whether <code>,</code> in an argument list is followed by a space or not. And I'd prefer to put a blank line after every <code>}</code> unless the following line is another <code>}</code> or directly related to it (e.g. the <code>else</code> is directly related to the <code>if</code> block).</p>
    </div>