<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Finally a <em>real</em> vector class :P.</p>

<ol>
<li><p>Any reason why you use <code>VEC_ASSERT</code> instead of just <code>assert</code>. I don't really see the advantage of doing so.</p></li>
<li><p><code>using</code> declarations are nicer than <code>typedef</code>s IMO:</p>

<pre><code>using dataType = T;
</code></pre></li>
<li><p>If you use exceptions, mark functions that don't or shouldn't throw <code>noexcept</code>.</p></li>
<li><p>Make use of the <a href="https://en.cppreference.com/w/cpp/language/injected-class-name" rel="nofollow noreferrer"><em>injected-class-name</em></a>:</p>

<pre><code>Vec cross(const Vec &amp;v) const;
</code></pre></li>
<li><p>You should implement all the <code>@=</code> operators for vectors. Also unary <code>-</code>.</p></li>
<li><p>Use standard algorithms:</p>

<pre><code>std::fill(values, values + C, 0); // default constructor, second one too
std::copy(v.begin(), v.end(), values); // std::vector constructor, init list
std::inner_product(v.begin(), v.end(), v.begin(), 0); // length/dot
std::transform(values, values + C, result.values, [length](const auto&amp; value) {
  return values / length;
}); // norm, operator@
assert(std::all_of(v.values, v.values + C, [](const auto&amp; value) {
  return value != 0;
})); // operator/
</code></pre></li>
<li><p>You don't have to use <code>this-&gt;</code> everywhere you know :).</p></li>
<li><p>You should consider using <code>assert</code> messages: <code>assert(v[0] == 0 &amp;&amp; "the first element must be 0!");</code></p></li>
<li><p>No love for <code>long double</code> and <code>signed char</code>? They don't have aliases.</p></li>
<li><p>You don't fill the rest of the elements to 0 in your <code>std::vector</code>, initializer list constructors and in <code>to</code>.</p></li>
<li><p>You don't need <code>push</code> by changing your signature a bit and doing:</p>

<pre><code>template &lt;typename T, unsigned int C&gt;
template &lt;typename... Args&gt;
Vec&lt;T, C&gt;::Vec(Args&amp;&amp;... args) : Vec{std::forward&lt;Args&gt;(args)...} {
  static_assert(sizeof...(Args) &lt;= C, "too many arguments to vector");
}
</code></pre></li>
<li><p>There are techniques to avoid implementing similar code between <code>operator@</code> and <code>operator@=</code>:</p>

<pre><code>friend Foo operator+(Foo lhs, const Foo&amp; rhs) {
  lhs += rhs;
  return lhs;
}
Foo&amp; operator+=(const Foo&amp; rhs) const {
  // do logic
  return *this;
}
</code></pre>

<p>More information very good advice for overloading operator can be found on <a href="https://en.cppreference.com/w/cpp/language/operators" rel="nofollow noreferrer">cppref</a>.</p></li>
<li><p>If you want you can reduce the code duplicate of cv qualified <code>operator[]</code>s by using <code>const_cast</code>.</p></li>
<li><p>Please prohibit creating a vector of length 0! :)</p></li>
<li><p>You could provide rvalue overloads of <code>operator[]</code> to enable efficient moving, but you don't have to. This is overkill, mostly used in the standard library. Have a look at <a href="https://en.cppreference.com/w/cpp/utility/optional/operator*" rel="nofollow noreferrer"><code>std::optional::operator*</code></a> to see this in action.</p></li>
<li><p>You might want to consider adding a constructor that takes a pair of iterators, so that <code>Vec</code> can be initialized by anything really, not just a <code>std::vector</code>.</p></li>
<li><p>Consider making everything <code>constexpr</code>.</p></li>
</ol>
    </div>