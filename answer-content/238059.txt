<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The key to programs like this (or, to be honest, to any program) is to think carefully about abstractions.  When approaching any programming problem, the first step is to choose the level of abstraction at which you want to work.  </p>

<p>In this case, the obvious abstraction is the notion of "coins" to represent nickels, dimes, quarters, etc.  That tells you two things:</p>

<ul>
<li>Data representation: You'll want some abstract way of representing
"coins" as data.</li>
<li>Functions/methods: Any functions or routines that you write should use this abstract "coin" representation when performing any calculations.</li>
</ul>

<p>There are many choices for how you actually do this.  In his answer, Pete presented a good way to do the second bullet: a generic function that will work for any denomination of coin.  Personally, I would do things in a different order and start by thinking about the first: how to represent a coin.</p>

<p>One way, of course, is to use the full blown object-oriented approach in all its glory: create a "coin" class and write methods to do all the manipulation (to include printing the output).  This is the approach emphasized in most computer programming classes, and there's nothing wrong with it except that it may be a bit overkill for such a simple application.</p>

<p>Another approach is to use simpler data constructs, such as lists or dictionaries, to represent coins.  You can then loop over the elements in the list to give you the correct change.  An example of that approach using dictionaries is:</p>

<pre><code>coinTypes = {'Dollars':100, 'Quarters':25, 'Dimes':10, 'Nickels':5, 'Pennies':1}

money = int(input(''))  

for name,denom in coinTypes.items():
    ncoins, money = divmod(money, denom)
    print('{}: {}'.format(name, ncoins))
</code></pre>

<p>Minor variations could use lists instead of dictionaries, or use a separate list/dictionary to keep track of the number of coins for future use.  Again, there's no "right" design for the program, but (in my opinion) there is a right way to think about it, and that is to start by thinking about the abstractions you want to use. </p>
    </div>