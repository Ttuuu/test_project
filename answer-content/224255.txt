<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>Extract <code>day.title()</code> to  a separate method. In this case, if you wanted to change how you store the days of the weeks (e.g. Monday, Tuesday ... -&gt; monday, tuesday...), you would have to change <code>day.title()</code> to <code>day.lower()</code> only in one place*.</p></li>
<li><p>Implement <code>set_start_and_end()</code> by calling <code>set_start()</code> and <code>set_end()</code>. Identically for getters. The rationale is similar to the previous point: if you decided to change the data structure where you store the time slots, you would have to change less code*.</p></li>
<li><p><strong>Magic numbers</strong>. e.g. 11. First of all extract such number into a constant with a meaningful name. Btw, is this value really a constant? Will you still want to use this value if the names of the days of the week change (e.g. you decide to use Mon, Tue etc., or names in another language)</p></li>
<li><p>Do not do formatting in <code>calculate_***</code> methods. You have <code>display_**</code> methods responsible for that. Let all the formatting be done there. Btw, maybe <code>format_***</code> would be a better name?</p></li>
<li><p>Another question is how you initialize your days_dict. Maybe you would want to pass a dictionary with some already existing values as an argument to the constructor. Possibly make it optional, and if we don't pass anything initialize it with default values as you do now: </p>

<pre><code>def __init__(self, worker, company, days_dict=None):
    self.worker = worker
    self.company = company
    # This can be a JSON file or a SQL DB
    self.days_dict = days_dict or DEFAULT_DAYS_DICT
</code></pre>

<p>Also, maybe it would be nicer to have default values like <code>"Monday": {"start": "0000", "end": "0000"}</code>?</p></li>
<li><p>How about having a fluent API?</p>

<pre><code>wt = WorkingTime('Maffaz', 'IT Circle Consult')
        .set_start_hour("monday", "0730")
        .set_end_hour("monday", "1800")
        ...
        .set_start_and_end("FrIDAY", "", "")
</code></pre>

<p>For that you would need to return <code>self</code> object from every setter/getter:</p>

<pre><code>def set_start_hour(self, day, hour):
    ...
    return self
</code></pre></li>
</ul>

<p>* I wrote about situations where you would have to change a lot of code. The problem is actually not with changing it. The problem is that in some situations you might forget to do it and your program will start working incorrectly.</p>
    </div>