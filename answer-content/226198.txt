<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li>I think your evaluation context is correct; and yes, it’s convoluted. In particular it impacts your second point; and …</li>
<li>… unfortunately I’m not aware of a way to improve this. You <em>can</em> manually modify the stack trace by editing the <code>base::.Traceback</code> variable (!). However, this must happen <em>after</em> <code>stop</code> is called so I don’t think it’s helpful here.</li>
<li>Same answer.</li>
<li>I think your assumptions are sound.</li>
</ul>

<p>Two further points: you can slightly simplify your handler by using early exit:</p>

<pre class="lang-r prettyprint-override"><code>myerror &lt;- function(e) {
  msg &lt;- conditionMessage(e)
  for (hndlr in names(handlers)) {
    # can use ptn of "." for catch-all
    if (grepl(hndlr, msg, perl = perl, fixed = fixed)) {
      return(handlers[[hndlr]](e))
    }
  }
  stop(e)
}
</code></pre>

<p>And as you probably know there’s no need to quote <code>tryCatch</code> in the <code>do.call</code> call.</p>

<p>… an afterthought:</p>

<p>Something that simplifies the call stack slightly <em>and</em> circumvents the complex quoting of the expression is the following:</p>

<pre class="lang-r prettyprint-override"><code>call &lt;- match.call(expand.dots = FALSE)
tc_call &lt;- call("tryCatch", expr = call$expr, error = myerror, finally = call$finally)
eval.parent(tc_call)
</code></pre>

<p>This seems to work.</p>
    </div>