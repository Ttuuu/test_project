<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Welcome to Code Review. While your script works as is, it is a good practice to setup and split parts of code into functions, and place the entry point inside <a href="https://stackoverflow.com/questions/419163/what-does-if-name-main-do">the <code>if __name__</code> wall</a>.</p>

<hr>

<p>You have an extra conversion to <code>int</code> for <code>productsnm</code> (which could be better named <code>product_count</code>).</p>

<hr>

<p>Since each product is associated with its own quantity, say hello to a <a href="https://devdocs.io/python~3.7/library/collections#collections.namedtuple" rel="nofollow noreferrer"><code>namedtuple</code></a>:</p>

<pre><code>from collections import namedtuple
Product = namedtuple('Product', ['name', 'quantity'])
# inside the for-loop:
    products.append(Product(name=product_name, quantity=quantity))
</code></pre>

<p>You wont need the string manipulation, or the loop. Just printing out the <code>products</code> list should give you something like</p>

<pre><code>[Product(name='n0', quantity=0), Product(name='n1', quantity=1), Product(name='n2', quantity=32)]
</code></pre>

<p>Each element of the list now has <code>name</code> and <code>quantity</code> as its property as well.</p>

<hr>

<p>You can have multiple functions as follows:</p>

<ul>
<li><code>gather_products_list</code> which returns a list of <code>N</code> products.</li>
<li><code>generate_email_body</code> to process the <code>products</code> provided to the function and generating the raw email body.</li>
<li><code>send_email</code> which accepts the aforementioned raw body, and sends it via the provider of choice.</li>
<li><code>get_integer</code> which repeatedly asks the user to input an integer value. This function could accept an optional <code>prompt</code> message as well as an <code>error</code> message!</li>
</ul>
    </div>