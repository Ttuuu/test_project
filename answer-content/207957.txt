<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Code Review</h2>

<p>Code is good, except the naming. There are some pieces which could be improved</p>

<p>Use <code>auto</code> for iterators, as exact iterator type is not important, but it's properties are. Iterator properties are usually inherited from container it came from.</p>

<p>Use better constructor, there <a href="http://dirk.eddelbuettel.com/code/rcpp/html/classRcpp_1_1Vector.html" rel="nofollow noreferrer">seems to be one</a> which accepts pair of iterators, and in this case, pair of pointers denoting contiguous range.</p>

<h2>Better (?) approach</h2>

<p>The problem seems to be somewhat specific case of trimming in general. Note that trimming from the right and trimming from the left are symmetric, and <code>std::reverse_iterator</code> "normalizes" trimming from right (great improvements thanks to <a href="https://codereview.stackexchange.com/users/75307/toby-speight">@Toby</a>).</p>

<pre><code>template &lt;typename BidirIterator,
          typename Predicate&gt;
auto trim(BidirIterator first, BidirIterator last, Predicate predicate) {
    auto left_edge = std::find_if_not(first, last, predicate);
    auto right_edge = std::find_if_not(std::reverse_iterator(last),
                                       std::reverse_iterator(left_edge),
                                       predicate).base();

    return std::pair{left_edge, right_edge};
}
</code></pre>

<p>When reversing a range, <code>first</code> becomes <code>last</code>, and vice versa, that is why <code>std::reverse_iterator</code> arguments were swapped. There is also C++17 feature in play (template class argument deduction).</p>

<hr>

<p>Full code:</p>

<pre><code>#include &lt;utility&gt;
#include &lt;iterator&gt;
#include &lt;algorithm&gt;

template &lt;typename BidirIterator,
          typename Predicate&gt;
auto trim(BidirIterator first, BidirIterator last, Predicate predicate) {
    auto left_edge = std::find_if_not(first, last, predicate);
    auto right_edge = std::find_if_not(std::reverse_iterator(last),
                                       std::reverse_iterator(left_edge),
                                       predicate).base();

    return std::pair{left_edge, right_edge};
}

#include &lt;vector&gt;
#include &lt;stdexcept&gt;

int main() {
    std::vector&lt;int&gt; initial_values{2, 2, 3, 4, 5, 6};
    auto predicate = [](int x) { return x % 2 == 0; };
    auto [new_first, new_last] = trim(initial_values.begin(),
                                      initial_values.end(),
                                      predicate);
    std::vector&lt;int&gt; resulting_values(new_first, new_last);
    std::vector&lt;int&gt; correct_result{3, 4, 5};
    if (resulting_values != correct_result) {
        throw std::logic_error("incorrect trimming occured");
    }
}
</code></pre>

<p><a href="https://wandbox.org/permlink/lqfgMYIqD6pshspK" rel="nofollow noreferrer">Demo on Wandbox</a>.</p>

<hr>

<p>To make trimming a little bit easier to use, one might write something like this:</p>

<pre><code>template &lt;typename Container, typename Predicate&gt;
Container trim_copy(Container&amp;&amp; container, Predicate predicate) {
    auto [new_first, new_last] = trim(container.begin(), container.end(),
                                      predicate);
    return Container(new_first, new_last);
}
</code></pre>

<p>and pass a lambda calling the <code>NumericVector::is_na</code>:</p>

<pre><code>auto predicate = [](auto x) { return NumericVector::is_na(x); };
</code></pre>

<p>or may be pointer to the function directly.</p>
    </div>