<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You could save yourself a lot of repetition by defining a generic class that takes elements of the tree and saves them. This way you can separate the class from the data needed to build it.</p>

<p>In one file you can have all your fields defined:</p>

<pre><code>XMLDOC_FIELDS = {"language": ("language",),
                 "service_type": ("serviceType",),
                 "trader_declaration_number": ("traderDeclarationNumber",),
                 "trader_reference": ("traderReference",),
                 "clearance_location": ("clearanceLocation",),
                 "declaration_time": ("declarationTime",),
                 "declaration_type": ("declarationType",),
                 "correction_code": ("correctionCode",),
                 "customs_office_number": ("customsOfficeNumber",),
                 "dispatch_country": ("dispatchCountry",),
                 "transport_in_container": ("transportInContainer",)}

CONSIGNOR_FIELDS = {"name": ("consignor", "name"),
                    "street": ("consignor", "street"),
                    "postal_code": ("consignor", "postalCode"),
                    "city": ("consignor", "city"),
                    "country": ("consignor", "country")}

IMPORTER_FIELDS = {"name": ("importer", "name"),
                   "street": ("importer", "street"),
                   "postal_code": ("importer", "postalCode"),
                   "city": ("importer", "city"),
                   "country": ("importer", "country"),
                   "trader_id": ("importer", "traderIdentificationNumber"),
                   "reference": ("importer", "importerReference")}

CONSIGNEE_FIELDS = {"name": ("consignee", "name"),
                    "street": ("consignee", "street"),
                    "postal_code": ("consignee", "postalCode"),
                    "city": ("consignee", "city"),
                    "country": ("consignee", "country"),
                    "trader_id": ("consignee", "traderIdentificationNumber")}

...
</code></pre>

<p>Which you can then use like this in your main file:</p>

<pre><code>from fields import *

class Entity:
    def __init__(self, cls_name, parser, fields):
        self.cls_name = cls_name
        self.name = ""
        for field_name, path in fields.items():
            setattr(self, field_name, parser._get(*path))

    def __repr__(self):
        return f"{self.cls_name}: {self.name}"

class XMLDoc(Entity):
    def __init__(self, path_to_xml):
        self.tree = minidom.parse(path_to_xml)
        self.parser = XMLParser(self.tree)
        self.goods = self._make_goods_list()
        super().__init__("XMLDoc", self.parser, XMLDOC_FIELDS)
        self.name = self.trader_reference
        self.consignor = Entity("Consignor", self.parser, CONSIGNOR_FIELDS)
        self.importer = Entity("Importer", self.parser, IMPORTER_FIELDS)
        self.consignee = Entity("Consignee", self.parser, CONSIGNEE_FIELDS)
        ...
</code></pre>

<p>Only the <code>GoodsItem</code> class cannot be replaced with this, for that you probably still need a separate class.</p>
    </div>