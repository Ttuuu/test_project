<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The problem with your sieve implementation is that the operations are not primitive operations but are rather time consuming. </p>

<p>You create an array of integers. Let's say n = 1 billion. You add 500 million integers. Each operation of adding an integer checks if there is enough space, increases the array size if needed, and adds a number. Thatâ€™s slow but reasonably harmless. </p>

<p>Removing the non-primes is the killer. The harmless looking <code>if j in primes_in_range</code> visits all elements of the array until it finds the matching one. That can be tens of millions array elements checked <em>for each multiple you are removing</em>. And the <code>remove(j)</code> will find <code>j</code> again, remove it, and then fill the gap in the array by moving all the following items one position forward. </p>

<p>What you do instead is create an array of Boolean values, and set these Boolean to true or false, which will be a primitive and therefore fast operation. </p>

<p>An implementation in C or C++ would be expected to handle a few hundred million integers per second. </p>

<p>Measure the time; as long as it grows quadratically with <code>n</code>, you are still doing many non-primitive operations. </p>
    </div>