<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Type Hint</h2>

<p>The return type <code>-&gt; Generator[List[T], None, None]</code> is correct, but it is a little verbose.  The <a href="https://docs.python.org/3/library/typing.html?highlight=generator#typing.Generator" rel="nofollow noreferrer">documentation</a> suggests a simpler way of documenting generators that just yield values, using <code>Iterator[]</code></p>

<pre><code>def _partition_by(...) -&gt; Iterator[List[T]]:
</code></pre>

<p>The method <code>_grouper()</code> doesn't have a return type hint.</p>

<h2>The Hard Way</h2>

<blockquote>
  <ul>
  <li>Anything else that I may be doing the hard way.</li>
  </ul>
</blockquote>

<p>Well, you are doing the whole thing The Hard Wayâ„¢.</p>

<p>You are looking for occurrences of <code>&lt;number&gt;&lt;chars&gt;</code> in a string.  This sounds like a job for the <a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer"><code>regular expression module</code></a>.  The <code>&lt;number&gt;</code> pattern is simply <code>(\d+)</code>, and the <code>&lt;chars&gt;</code> pattern would be characters which are not numbers, which can be expressed concisely as <code>(\D+)</code> ... using a capital letter indicates it is matching not-digit characters.</p>

<p>Since you wish to find successive occurrences of these, you would want to use <a href="https://docs.python.org/3/library/re.html#re.findall" rel="nofollow noreferrer"><code>re.findall</code></a>, or perhaps <a href="https://docs.python.org/3/library/re.html#re.finditer" rel="nofollow noreferrer"><code>re.finditer</code></a>:</p>

<pre><code>for m in re.finditer(r"(\d+)(\D+)", encoded_str)
</code></pre>

<p>Now, <code>m.group(1)</code> is the string containing <code>&lt;number&gt;</code> characters and <code>m.group(2)</code> is the string containing the <code>&lt;chars&gt;</code> character.  At this point, we can turn the digits into an integer, multiply the character string by that value, and join successive values together into one large string:</p>

<pre><code>def basic_run_length_decode(encoded_string: str) -&gt; str:
    """
    Decodes a string in the form of &lt;number&gt;&lt;chars&gt;&lt;number&gt;&lt;chars&gt;. . .

    &gt;&gt;&gt; basic_run_length_decode("1A2B3C")
    'ABBCCC'
    &gt;&gt;&gt; basic_run_length_decode("10AB10CD")
    'ABABABABABABABABABABCDCDCDCDCDCDCDCDCDCD'
    """

    return "".join(m.group(2) * int(m.group(1))
                   for m in re.finditer(r"(\d+)(\D+)", encoded_string))
</code></pre>

<p>Yup.  Your function can be simplified to one line of code, with no helper functions.  Re-adding error checking left as exercise.  ;-)</p>

<h2>Doctest</h2>

<p>I've changed the format of your <code>"""docstring"""</code> slightly.</p>

<p>Instead of writing:</p>

<pre><code>    basic_run_length_decode("1A2B3C") =&gt; 'ABBCCC'
</code></pre>

<p>which implies to the reader that when you execute <code>basic_run_length_decode("1A2B3C")</code>, it will return the value <code>'ABBCCC'</code>, I've replaced this with:</p>

<pre><code>    &gt;&gt;&gt; basic_run_length_decode("1A2B3C")
    'ABBCCC'
</code></pre>

<p>which implies if you are at Python's REPL, and you type <code>basic_run_length_decode("1A2B3C")</code>, it will return the value <code>'ABBCCC'</code>, the representation of (ie, with quotes) which will be printed by the REPL.</p>

<p>Basically, exactly the same thing.</p>

<p>Except ... </p>

<p>The <a href="https://docs.python.org/3.8/library/doctest.html" rel="nofollow noreferrer"><code>doctest</code></a> module knows how to read docstrings for functions, and extract things that look like Python REPL commands (ie, appear after a <code>&gt;&gt;&gt;</code> prompt), and will execute those commands and compare the actual result with the indicated result, and raise an error if they don't match.  Built-in unit testing!</p>

<p>Let's test our code!</p>

<pre><code>aneufeld$ python3 -m doctest run_length_decode.py
aneufeld$
</code></pre>

<p>Well, that was anticlimactic; nothing got printed.  That's a good thing.  It means the tests passed.  We can add a <code>-v</code> to make the output more verbose:</p>

<pre><code>aneufeld$ python3 -m doctest -v run_length_decode.py 
Trying:
    basic_run_length_decode("1A2B3C")
Expecting:
    'ABBCCC'
ok
Trying:
    basic_run_length_decode("10AB10CD")
Expecting:
    'ABABABABABABABABABABCDCDCDCDCDCDCDCDCDCD'
ok
1 items had no tests:
    run_length_decode
1 items passed all tests:
   2 tests in run_length_decode.basic_run_length_decode
2 tests in 2 items.
2 passed and 0 failed.
Test passed.
aneufeld$ 
</code></pre>
    </div>