<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Building the list takes a lot of time. Note that your <code> arr += [i] * arr[i]</code> repeats the same value <code>i</code> over and over again. This can be much compressed by just storing <code>repeat(i, arr[i])</code> instead. This succeeds in about 6 seconds, well under their 12 seconds limit:</p>
<pre><code>from itertools import chain, repeat

def find(n):
    if n &lt;= 3:
        return [0, 1, 2, 2][n]
    arr = [[2]]
    arr_sum = 5
    arr_len = 4
    for i, arr_i in enumerate(chain.from_iterable(arr), 3):
        arr_sum += i * arr_i
        if arr_sum &gt;= n:
            x = (arr_sum - n) // i
            return arr_len + arr_i - (x+1)
        arr.append(repeat(i, arr_i))
        arr_len += arr_i
</code></pre>
<p>Note that in the <code>n &gt; 3</code> case, we start already with the number 3, appending it twice to the list. Thus of the sequence start <code>[0, 1, 2, 2]</code> we only need <code>[2]</code>, so I start with <code>arr = [[2]]</code> (which is shorter than <code>[repeat(2, 1)]</code>, and <code>chain</code> doesn't mind).</p>
<hr>
<p>Alternatively... note that you're extending <code>arr</code> much faster than you're consuming it. For n=2<sup>41</sup>, you grow it to over 51 million elements, but you're actually reading fewer than the first 70 thousand. So you could stop truly extending the list at that point. This succeeds in about 4.7 seconds:</p>
<pre><code>def find(n):
    arr = [0, 1, 2, 2]
    if n &lt;= 3:
        return arr[n]
    arr_sum = 5
    arr_len = 4
    for i in range(3, n+1):
        arr_sum += i * arr[i]
        if arr_sum &gt;= n:
            x = (arr_sum - n) // i
            return arr_len + arr[i] - (x+1)
        arr_len += arr[i]
        if arr_len &lt; 70_000:
            arr += [i] * arr[i]
</code></pre>
<hr>
<p>And... you can combine the above two improvements, i.e., apply that <code>if arr_len &lt; 70_000:</code> to the <code>repeat</code>-version. That then succeeds in about 4.5 seconds.</p>
<p>Benchmark results on my PC for n=2<sup>41</sup>:</p>
<pre><code>Your original:   1.795 seconds
My first one:    0.043 seconds (42 times faster)
My second one:   0.041 seconds (44 times faster)
The combination: 0.026 seconds (69 times faster)
</code></pre>
<hr>
<p>Oh and a style comment: You twice do this:</p>
<pre><code>if ...:
    return ...
else:
    ...
</code></pre>
<p>The <code>else</code> and the indentation of all the remaining code are unnecessary and I'd avoid it. I've done so in the above solutions.</p>
    </div>