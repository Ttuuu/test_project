<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>in <code>main()</code>, there is a call to <code>calculateSum()</code> then checking if the sum is &lt; 2n,  etc.</p>

<p>However, that same determination is made in the function: <code>isDeficient()</code></p>

<p>for this: </p>

<pre><code>typedef enum bool bool;
enum bool {
  false, true
};
</code></pre>

<p>you might want to use the header file: <code>stdbool.h</code>  </p>

<p>ISO C forbids forward references to <code>enum</code>s</p>

<p>regarding:</p>

<pre><code>List* list = (List*) malloc(sizeof(List));
</code></pre>

<p>1) in C, the returned type is <code>void*</code>, which can be assigned to any pointer.  Casting just clutters the code, making it more difficult to understand, debug, etc</p>

<p>2) the heap allocation functions: <code>malloc</code> <code>calloc</code> and <code>realloc</code> can fail, so should always check (!=NULL) the returned value to assure the operation was successful</p>

<p>The use of a linked list is 'overkill'   Suggest a simple array</p>

<p>regarding:</p>

<pre><code>    debug++;
}
#if DEBUG
</code></pre>

<p>using multiple symbols those only difference is capitalization can be very confusing (to the person reading the code) Suggest using unique names</p>

<p>for ease of readability and understanding:  1) Suggest using an indent width of 4 spaces as 2 spaces is very difficult to distinguish when using variable width fonts.  2) separate code blocks: <code>for</code> <code>if</code> <code>else</code> <code>while</code> <code>do...while</code> <code>switch</code> <code>case</code> <code>default</code> via a single blank line.  3) separate functions by 2 or 3 blank lines (be consistent)</p>

<p>There is no provision in the code to input a 'range' of values to use for finding deficients.</p>

<p>regarding:</p>

<pre><code>int n = atoi(argv[1]);
</code></pre>

<p>the function: <code>atoi()</code> does not indicate if an error occurred.  Suggest using: <code>strtol()</code>  as that does indicate when an error occurred</p>

<p>regarding:</p>

<pre><code>#define DEBUG 1
</code></pre>

<p>it is much more flexible to use <code>-DDEBUG</code> as a parameter to the compile statement rather than hardcoding the value in the source code</p>
    </div>