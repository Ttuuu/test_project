<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As was mentioned - always do separation of implementation and test cases. </p>

<p>For a better/optimized functionality consider the following actions:</p>

<p><strong><code>calculate_player_hand</code></strong> <em>function</em></p>

<ul>
<li><p><code>card_values = {"2": 2, "3": 3, ...}</code> is better defined as top-level constant called <strong><code>CARDS</code></strong>:</p>

<pre><code># Dictionary mapping cards to their score value
CARDS = {"2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9, "T": 10, "J": 10, "K": 10, "Q": 10}
</code></pre></li>
<li><p>instead of going through redundant variable <code>total_player_hand_score</code> and <code>for</code> loop + <code>continue</code> flow - the entire function can be replaced with concise <code>sum</code> + <em>generator</em> expression approach:</p>

<pre><code>def calculate_player_hand(player_hand_input):
    """Return the score of a player hand except Ace card(s)"""
    # Variable to hold score for a hand
    return sum(CARDS.get(card) for card in player_hand_input if card != 'A')
</code></pre></li>
</ul>

<hr>

<p><em>Iterating through test cases</em></p>

<ul>
<li><p>the condition <code>if 21 - player_score_without_aces &lt; 11:</code> can be replaced with a shorter equivalent <strong><code>if score_without_aces &gt;= 11:</code></strong> (<code>player_score_without_aces</code> renamed to <code>score_without_aces</code>):</p>

<pre><code>    for j in range(get_aces_count(player_hand)):
        score_without_aces += 1 if score_without_aces &gt;= 11 else 11
</code></pre></li>
<li><p>no need to rename the variable <code>total_player_score = score_without_aces</code> as <strong><code>score_without_aces</code></strong> will contain the last resulting value from the upper <code>for</code> loop:</p>

<pre><code>total_scores.append("Bust" if score_without_aces &gt; 21 else score_without_aces)
</code></pre></li>
</ul>
    </div>