<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The only reason <code>BinaryInsertionSort</code> outperforms <code>StraightInsertionSort</code> is that it is in the position to call <code>System.arraycopy</code>, which I expect to be highly optimized (possibly all the way down to <code>memcpy</code>), and much faster than the element-by-element copying loop <code>StraightInsertionSort</code> does. It tastes like cheating. You compare apples to oranges.</p>

<p>From the purely algorithmic point of view, both versions copy elements the same number of times. Binary version may do less comparisons. However, it may do way more. Consider the case of sorting a sorted array. Both versions do zero copies. Straight sort does 1 comparison per element; <span class="math-container">\$O(n)\$</span> total. Binary sort does <span class="math-container">\$\log k\$</span> comparisons per element; <span class="math-container">\$O(n\log n)\$</span> total.</p>

<p>Also, the straight sort implementation is suboptimal. It does two comparisons per inner loop iteration: <code>j &gt;= fromIndex</code> and <code>comparator.compare(array[j], targetElement) &gt; 0</code>. It is possible to get away with one:</p>

<pre><code>        if (comparator.compare(array[fromIndex], targetElement &gt; 0) {
            // The target element is less than all other elements. We
            // don't need to compare values anymore.
            // NB: May as well call System.arraycopy here.
            while (j &gt;= fromIndex) {
                array[j+1] = array[j];
                j--;
        } else {
            // The leftmost element is now a natural sentinel. We don't
            // need to compare indices anymore.
            while (comparator.compare(array[j], targetElement) &gt; 0) {
                array[j+1] = array[j];
                j--;
            }
        }
</code></pre>

<hr>

<p>The only practical application of the insertion sort I am aware of is sorting almost sorted arrays, that is those in which every element is within fixed small distance <code>k</code> from its final position (e.g. quicksort with the recursion cutoff). Benchmarking such arrays will be most instructive. Try a 100 million-strong array with <code>k = 16</code>.</p>
    </div>