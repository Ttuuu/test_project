<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>My main issue with the game is that you randomly generate cards:</p>

<pre><code>    rank1 = f() % NUM_OF_CARDS + 1;
    rank2 = f() % NUM_OF_CARDS + 1;
    suit1 = f() % 4 + 1;
    suit2 = f() % 4 + 1;
</code></pre>

<p>This is not like real life where the probability of two people getting the same card is zero (here the chances are small but they exist).</p>

<p>A better technique would be to generate a pack of cards and then randomly shuffle the cards. Then select cards from the top of the pack (selected cards can not be re-selected you can just keep track of the current top). When you want to reset simply re-shuffle and reset the top to zero. This way you guarantee that you get a fair chance of any card but you can not have two cards the same.</p>

<hr>

<p>Talking about random numbers.</p>

<p>The old C style random number generator:</p>

<pre><code>srand()
rand()
</code></pre>

<p>They are easy to use (also easy to use incorrectly).</p>

<p>Assuming <code>f()</code> maps to <code>rand()</code> then:</p>

<pre><code> f() % NUM_OF_CARDS + 1;
</code></pre>

<p>Is <strong>not</strong> correct (just check stack-overflow for answers about this (there are some violent debates)). Suffice to say not all the numbers in <code>[0..NUM_OF_CARDS]</code> are equally as likely (the lower numbers have a slightly higher probability than the higher numbers).</p>

<p>Also it has been shown that <code>rand()</code> is not that random. There are papers on the subject.</p>

<p>Rather than work out how to do all the correctly you can simply switch to the C++ functionality:</p>

<pre><code> // Only create this once in main.
 // Then pass it to where it needs to go.
 std::default_random_engine generator;

 std::uniform_int_distribution&lt;int&gt; suit(1,4);
 std::uniform_int_distribution&lt;int&gt; rank(1,13);

 rank1 = rank(generator);
 suit1 = suit(generator);
 //etc
</code></pre>

<p>Or probably better:</p>

<pre><code> std::default_random_engine generator;

 std::uniform_int_distribution&lt;int&gt; card(0,51);

 card1 = card(generator);
 rank1 = (card % 13) + 1; // you use 1-13 hence the +1
 suit1 = (card / 13) + 1; // you use 1-4. hence the +1
</code></pre>

<hr>

<p>This is an interesting comment:</p>

<pre><code>// function used for testing instead of rand() 
// ints passed in instantiation will be returned in subsequent calls
</code></pre>

<p>yes testing becomes hard when you use random numbers. But the rand functionality is designed with that in mind. You can make sure you get the same set of random numbers by seeding the generator with a specific start point.</p>

<pre><code>srand(10);   // The random number will start from the seed of 10.
             // starting here will always generate the same set of random
             // numbers. So if you want your unit tests to always run the
             // same way simply seed the rand number generator before
             // running the test with a specific value (you will get the
             // same sequence of randoms).
</code></pre>

<p>Same happens for the C++ version:</p>

<pre><code>std::default_random_engine generator(10);
</code></pre>

<p>But saying all that I do like your number generator idea.</p>

<hr>

<p>In C++ we frown upon <code>#define</code></p>

<pre><code>#define NUM_OF_CARDS 52
#define NUM_OF_RETRIES 2
</code></pre>

<p>Nearly all use cases for <code>#define</code> have been replaced by language (rather than pre-processor) features. Prefer to use language features where they exist.</p>

<pre><code>static constexpr int NumOfCards   = 52; // Note all uppercase is still macro names so avoid them.
static constexpr int NumOfRetries = 2;
</code></pre>

<p>Here these values are correctly typed.</p>

<hr>

<p>Better implementation:</p>

<p>if you have a lot <code>if () else if else if else if</code>.</p>

<pre><code>template&lt;int n1, int n2, int n3, int n4,
         int n5 = -1, int n6 = -1, int n7 = -1, int n8 = -1&gt;
int drawNums()
{
    static int i = -1;
    i++;
    if (i % 8 == 0)
        return n1;
    else if (i % 8 == 1)
        return n2;
    else if (i % 8 == 2)
        return n3;
    else if (i % 8 == 3)
        return n4;
    else if (i % 8 == 4)
        return n5;
    else if (i % 8 == 5)
        return n6;
    else if (i % 8 == 6)
        return n7;
    else 
        return n8;
}
</code></pre>

<p>You may want to look at using a <code>switch</code> statement.</p>

<pre><code>template&lt;int n1, int n2, int n3, int n4,
         int n5 = -1, int n6 = -1, int n7 = -1, int n8 = -1&gt;
int drawNums()
{
    static int i = -1;
    i++;

    switch(i % 8) {
        case 0: return n1;  // Though i would have numbered from n0 - n7
        case 1: return n2;  // To make this more logical.
        case 2: return n3;
        case 3: return n4;
        case 4: return n5;
        case 5: return n6;
        case 6: return n7;
        case 7: return n8;
    }
}
</code></pre>

<p>But we can go one better than that.<br>
Why do we need a switch when we simply use an array and look up the value.</p>

<pre><code>template&lt;int n1, int n2, int n3, int n4,
         int n5 = -1, int n6 = -1, int n7 = -1, int n8 = -1&gt;
int drawNums()
{
    static int result[] = {n1, n2, n3, n4, n5, n6, n7, n8};
    static int i = -1;
    i++;
    return result[i % 8];
}
</code></pre>

<p>But let's take this a step further. We don't need to limit ourselves to 8 values we can simply allow as many values as we like by using var arg template arguments:</p>

<pre><code>template&lt;int... Vals&gt;
int drawNums()
{
    static int result[] = {Vals...};
    static int i = -1;
    i++;
    return result[i % sizeof...(Vals)];
}
</code></pre>

<hr>

<p>Remember C is not the same language as C++. So pefer not to use C header files where eqivelent <strong>BUT</strong> correctly namespaced for C++ versions exist in C++</p>

<pre><code>#include &lt;stdlib.h&gt;
----
#include &lt;cstdlib&gt;    // Functions are placed in the `std` namespace.
                      // Helps avoid collisions.
</code></pre>

<hr>

<p>One of the obscure corner cases where C and C++ actually differ is the use of a void parameter.</p>

<pre><code> func();
 func(void);
</code></pre>

<p>In C these have different meanings.<br>
In C++ they mean exactly the same thing. As a result in C++ we don't bother with the extra <code>void</code> parameter as it does not convey any extra meaning and is just fluff.</p>

<p>Thus you're declarations for function pointers:</p>

<pre><code> int (*f) (void)
</code></pre>

<p>That <code>void</code> has no menaing in this context. This is simpler to write (and more commonly written as):</p>

<pre><code> int (*f)()
</code></pre>

<p>Though to be honest even this is rare. We would normally wrap this in a <code>std::function</code> object that allows us to pass other types (not just functions)</p>

<pre><code>  bool HighCard::Play( int (*f) (void), std::ostream&amp; os )
</code></pre>

<p>I would write like this:</p>

<pre><code>  bool HighCard::Play(std::function&lt;int()&gt; const&amp; action, std::ostream&amp; os)
</code></pre>

<p>Now I can pass a function pointer a functor or even a lambda.</p>

<pre><code>  highCard.Play([](){return 5;}, std::cout);
</code></pre>
    </div>