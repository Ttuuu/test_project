<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The following code is very inefficient:</p>

<pre><code>    Double sum = 0.0;

    for (Number num : value){
        sum += num.doubleValue();
    }
</code></pre>

<p>It creates a <code>Double</code> object for <code>0.0</code>, and then, since <code>Double</code> objects are immutable, for every <code>num</code> in the <code>value</code> list, it creates yet another <code>Double</code> object for the resulting partial sum.  If you replaced <code>Double</code> with <code>double</code>, then you won't be creating new objects for each iteration through the loop.</p>

<hr>

<p>Since you are already using the stream API, why not use <a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/DoubleStream.html#sum--" rel="nofollow noreferrer"><code>DoubleStream::sum</code></a> to sum the values as a <code>double</code>?</p>

<pre><code>    double sum = value.stream().mapToDouble(Number::doubleValue).sum();
</code></pre>

<hr>

<p>Finally, you could use the <a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/Collectors.html#toMap-java.util.function.Function-java.util.function.Function-" rel="nofollow noreferrer"><code>Collectors.toMap()</code></a> stream method to create the map.</p>

<pre><code>public Map&lt;String, Double&gt; add(Map&lt;String, List&lt;? extends Number&gt;&gt; map) {
    return map.entrySet().stream()
          .collect(Collectors.toMap(Map.Entry::getKey,
                                    e -&gt; e.getValue().stream()
                                              .mapToDouble(Number::doubleValue)
                                              .sum()));
}
</code></pre>

<p>Whether or not this last step is an "improvement" may be a matter of taste.</p>

<p>Note: the return type is no longer a <code>HashMap</code>; it just a <code>Map</code>.</p>

<hr>

<p>The <code>add()</code> method doesn't depend on any members of <code>Adder</code>, so the method should be <code>static</code>.  Then you can get rid of the <code>Adder adder = new Adder()</code> object.</p>

<hr>

<p>Using <code>List.of(...)</code> and <code>Map.of(...)</code> can simplify your test code:</p>

<pre><code>public static void main(String[] args) {

    List&lt;Integer&gt; list1 = List.of(1, 2, 3);
    List&lt;BigDecimal&gt; list2 = List.of(new BigDecimal("9.87654321e300"),
                                     new BigDecimal("987654321"),
                                     new BigDecimal("987654321"));

    Map&lt;String, List&lt;? extends Number&gt;&gt; hashMap = Map.of("list1", list1,
                                                         "list2", list2);

    System.out.println(Adder.add(hashMap));
}
</code></pre>
    </div>