<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>string.chars().rev().collect() 
</code></pre>

<ul>
<li><code>chars()</code> returns an iterator that gives one <code>char</code> (unicode scalar) of the string at a time.</li>
<li><code>rev()</code> reverses an iterator</li>
<li><code>collect()</code> is a generic function that can build various types from an iterator. Types like <code>String</code> implement <code>FromIterator</code> interface to work with it.</li>
</ul>

<pre><code>let mut parity_bits: HashMap&lt;u64, u32&gt; = HashMap::new()
</code></pre>

<p>You generally don't need to specify types. Rust will guess them from the usage. <code>let mut parity_bits = HashMap::new()</code> may be enough.</p>

<pre><code>(&amp;base_code).chars()
</code></pre>

<p>You almost never need to borrow a type before calling a method. The <code>.</code> operator does it automatically when necessary.</p>

<pre><code>    let mut hamming_code_string = String::new();
    for c in hamming_code {
        hamming_code_string.push(c);
    }

    hamming_code_string
</code></pre>

<p>Can be simplified to <code>hamming_code.into_iter().collect()</code> on the same principle as reversing a string. <code>into_iter()</code> gives owned values instead of references.</p>
    </div>