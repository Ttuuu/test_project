<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I agree with @Timothy Truckle in that you have some issues with the MVC-pattern.  I disagree with where they've drawn the line between the model, view and controller.</p>

<p>As they've stated, the model should be a data store, containing the state of the application.  In addition, the model may have logic about persistence, integrity and infrastructure; I don't disagree with that.  But the model should also have logic which can be used to both update the model and query the state of the model; checking to see if the game is over (a win by either player or a tie game) is a state-query.</p>

<p>Amplifying this a bit.  If you were to update your program so that it runs as a GUI, with buttons to click to make moves, the model should not need to be changed.  The code to check for a win or a tie doesn't need to change; it would be the same whether the game is uses console input/output or has buttons and windows.  It is merely a query of the game state, and certainly is allowed in the model.</p>

<p>Reporting the result of that query to user is the violation.  </p>

<hr>

<p>You are mixing symbolic identifiers and integer values.  Consider:</p>

<pre><code>static final int X = 1;
static final int O = -1;
</code></pre>

<p>Using an <code>enum</code> would be better, but using names for the values is an excellent step in the right direction.  But consider:</p>

<pre><code>            if( board[row][col] == 0 )
                board[row][col] = X;
</code></pre>

<p>If the board contains a zero, you store the symbol <code>X</code>.  Wait.  What is that zero?  What does it mean?  Perhaps you want to create and use another symbol:</p>

<pre><code>static final int EMPTY = 0;
</code></pre>

<hr>

<p>You are repeating yourself.</p>

<p>In <code>main()</code>, you have a <code>while( model.hasWon(board) == false)</code>, and midway through the function, you have the same test <code>if( model.hasWon(board) == false) break;</code>.  Before and after the <code>if</code> statement, you have almost exactly the same lines of code. You could move those lines of code into their own function, with parameters to identify which player's turn is being played.  Eg)</p>

<pre><code>    while( model.hasWon(board) == false) {

        getAndPlayMove(board, "X", X);

        if (model.hasWon(board) == false)
            break;

        getAndPlayMove(board, "O", O);
    }
</code></pre>

<p>Again, that <code>while</code> loop is doing the same operation twice, with the loop condition tested in the middle.  It would be better to do twice the number of iterations through the loop, and swap which player is playing each time through.  For example:</p>

<pre><code>    int player = X;  // Starting player

    while (model.hasWon(board) == false) {

        String player_name = (player == X) ? "X" : "O";

        getAndPlayMove(board, player_name, player);

        player = (player == X) ? O : X;   // Switch players
    }
</code></pre>

<p>With a two player game, repeating the same code for each player may not seem like much of a burden, but for a multi-player game, it quickly becomes clear the correct thing to do is write the code once and change the player each pass through the loop.</p>

<hr>

<p><code>hasWon()</code> is a very misleading method name.  In a tie-game, nobody has won, but the function still returns <code>true</code>.</p>

<p><code>isOver()</code> would be a better name; you play the game while it is not over.</p>

<hr>

<p>Hard coded numbers are BADâ„¢.  Using a hard-coded number once is almost acceptable, but the second time you use that number in the same context is an error waiting to happen.  What if you want to change the number?  Go from a 5x5 game grid to a 6x6 game grid.  Find and replace every instance of a "5" with a "6"?  If I had a nickel for every time find-and-replace replaced the wrong thing ...</p>

<pre><code>public static final int SIZE = 5;
int [][] board = new int[SIZE][SIZE];
</code></pre>

<p>Good.  Now we won't end up with a 5x6 grid.  Change all of the <code>if (sum == 5)</code> to <code>if (sum == SIZE)</code> and all of the <code>if (sum == -5)</code> to <code>if (sum == -SIZE)</code> and we're golden, right?  No more 5's!</p>

<p>Except when we play, we can't enter the cell <code>5,5</code>, because you have <code>if(col&lt;=4 &amp;&amp; col&gt;=0)</code>.  Oh!  That wasn't a 4, that was a <code>5-1</code> optimized by hand to read <code>4</code>.  I guess we want...</p>

<pre><code>if (col &lt;= SIZE-1  &amp;&amp;  col &gt;= 0)
</code></pre>

<p>But <code>col &lt;= SIZE-1</code> is ugly, and takes 3 too many characters.  Use the <code>&lt;</code> operator instead:</p>

<pre><code>if (col &lt; SIZE  &amp;&amp;  col &gt;= 0)
</code></pre>

<p><strong>BUG</strong>: You don't validate the <code>row</code> input!  If the user enters <code>105</code> and <code>3</code>, the program accepts it as valid input, but will crash with an <code>IndexOutOfRangeException</code>.</p>

<hr>

<p>The game now works for a 6x6 grid with a row or column of 6 in-a-row.  The diagonals fail, though.</p>

<pre><code>    if( (matrix[0][0] + matrix[1][1] + matrix[2][2]+matrix[3][3]+matrix[4][4]) == SIZE ){
        System.out.println("X wins.");
        retVal = true;
    } else if ( (matrix[0][4] + matrix[1][3] + matrix[2][2]+matrix[3][1]+matrix[4][0]) == -SIZE ) {
        System.out.println("O wins.");
        retVal = true;
    }
    if( (matrix[0][4] + matrix[1][3] + matrix[2][2]+matrix[3][1]+matrix[4][0]) == SIZE){
        System.out.println("X wins.");
        retVal = true;
    } else if ( (matrix[0][4] + matrix[1][3] + matrix[2][2]+matrix[3][1]+matrix[4][0]) == -SIZE ) {
        System.out.println("O wins.");
        retVal = true;
    }
</code></pre>

<p>Yuk!  Lots of hard-coded matrix indices.</p>

<p>You <s>want</s> need to use a loop here:</p>

<pre><code>int diag1 = 0, diag2 = 0;
for (int i=0; i&lt;SIZE; i++) {
    diag1 += matrix[i][i];
    diag2 += matrix[i][SIZE-1-i];
}

if (diag1 == SIZE || diag2 == SIZE) {
    System.out.println("X wins.");
    retval = true;
} else if (diag1 == -SIZE || diag2 == -SIZE) {
    System.out.println("O wins.");
    retval = true;
}
</code></pre>

<p>Shorter code, and it works with any SIZE game grid.  Of course, you still want to refactor things to remove the output statements from the model.</p>

<p>Bug: It is possible to print multiple outcomes from the game.  Imagine playing 24 moves with neither X nor O completing a row column or diagonal ...</p>

<pre><code>X O X O X
O X X X O
O O . O O
O X X X O
X O X O X
</code></pre>

<p>Now play X's last and only move -- the centre cell.  With your original code, you'd get this output:</p>

<pre><code>X wins.
X wins.
X wins.
Ends in a tie.
</code></pre>

<hr>

<p>Your model doesn't store anything.  It has no data, and exactly 1 <code>static</code> method.  To use your model, you call <code>model.hasWon(board)</code> ... so you are passing the state of the game into the model!  If your model actually contained the state, you could simply call <code>model.hasWon()</code>.</p>

<p>A better model might be:</p>

<pre><code>public enum Player { X, O };

public class Model {
    public  final int        size;
    private final Player[][] board;
    private       int        moves_left;

    public Model(int size) {
        this.size = size;
        board = new Player[size][size];
        moves_left = size * size;
    }

    public boolean valid_cell(int row, int col) {
        return row &gt;= 0  &amp;&amp;  row &lt; size  &amp;&amp;  col &gt;= 0  &amp;&amp;  col &lt; size;
    }

    public boolean valid_move(int row, int col) {
        if (!valid_cell(row, col)  ||  moves_left == 0)
            return false;

        return board[row][col] == null;
    }

    public Player get_cell(int row, int col) {
        return board[row][col];
    }

    public boolean make_move(int row, int col, Player player) {
        if (!valid_move(row, col))
            throw new IllegalStateException("You didn't validate the player's move!");

        board[row][col] = player;
        spaces_left--;

        boolean won = ...
        /* Add code to see if player made a winning move */

        if (won)
            moves_left = 0;

        return won;
    }

    public int moves_left() {
        return moves_left;
    }
}
</code></pre>

<p>Both <code>board</code> and <code>moves_left</code> are private, to prevent tampering with the game state.  The <code>get_cell()</code> method allows a read-only access to the board, so the board can be displayed.  <code>moves_left</code> is used to keep track of the available spaces, without needing to search over the entire board for an empty spot.</p>

<p><code>make_move()</code> is used to change the board's state.  After ensuring the move is valid, it fills in the player's move, and decrements the <code>moves_left</code> counter.  Then, it checks if the move has caused the player to win, and returns that to the caller.</p>

<p>By checking if the <strong>current player</strong> has won, you eliminate the need to check dual conditions (eg, <code>if (sum == 5)</code> or <code>if (sum == -5)</code>).  You can additionally optimize the check for win by only checking the row and column the player moved in, instead of every row and every column in the board.  (This optimization would be important if you try to build an AI which has to do an exhaustive search of possible moves.)</p>

<p>To use this model, you might write code along the lines of:</p>

<pre><code>Model model = new Model(5);
Player player = Player.X;

while (model.moves_left() &gt; 0) {

    // Get row, col from player, ensuring model.valid_move(row, col)
    // returns `true` before continuing.

    if (model.make_move(row, col, player)) {
       // Record or report the win
    }

    // Set player to the other player
}

System.out.println("Game over");
</code></pre>
    </div>