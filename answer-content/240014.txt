<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your retrieval of checkboxes is a bit verbose. Consider using a single selector to get all of them instead, instead of having to select each one individually.</p>

<pre><code>const daysOfWeek = {};
for (const input of document.querySelectorAll('.form-group &gt; input[type="checkbox"]') {
  daysOfWeek[input.id] = input;
}
</code></pre>

<p>Then, rather than examining each separate variable to see if it's checked, iterate over that object to see if any values are checked.</p>

<p>To avoid indentation hell, consider <code>return</code>ing early when an error is encountered, rather than a very large <code>else</code> block when there isn't an error.</p>

<p>Your <code>savedSchedules</code> is an object which is never reassigned:</p>

<pre><code>var savedSchedules = {};
</code></pre>

<p>So it'll always be truthy - the <code>if (savedSchedules &amp;&amp;</code> check is superfluous, since it'll always be true.</p>

<p>There's also no need to check how many keys the object has beforehand - just iterate through them all regardless. If there aren't any, then no conflicts will be detected. So the <code>Object.keys(savedSchedules).length &gt;= 1</code> can be removed.</p>

<p><code>Object.entries</code>'s callback accepts an entry array parameter of the key and the value. Since you already have the value as a variable, there's no need to select it <em>again</em> by going through the <code>[key]</code>:</p>

<pre><code>Object.entries(savedSchedules).forEach(function([key, value]) {
  schedule_ = savedSchedules[key];
</code></pre>

<p>simplifies to</p>

<pre><code>Object.entries(savedSchedules).forEach(function([key, schedule_]) {
</code></pre>

<p>But since you aren't actually using the schedule name (the <code>key</code>), you may as well remove it and use <code>Object.values</code> instead:</p>

<pre><code>Object.values(savedSchedules).forEach(function(schedule_) {
</code></pre>

<p>But since you're trying to find whether there are <em>any</em> conflicts, it would be more appropriate to short-circuit when a problem is found. Consider using a <code>for</code> loop instead. When a problem is found, tell the user about it and <code>return</code>.</p>

<p>The underscores after the variable names are confusing - they don't match a convention I know of. It looks like they're meant to distinguish a single schedule's object from the day and object value for the day. I think it would be appropriate to note this in the variable names explicitly, eg <code>schedule</code>, <code>day</code>, and <code>dayObj</code>.</p>

<p>Also, since you're using <code>Object.entries</code>, your environment supports ES6 - in ES6, you should <a href="https://medium.com/javascript-scene/javascript-es6-var-let-or-const-ba58b8dcde75" rel="nofollow noreferrer">always use <code>const</code></a> to declare variables when possible, never <code>var</code> (and <code>let</code> only when you have to reassign).</p>

<p>The <code>startTime</code> variable name (which comes from the input) is a bit unclear once you're deep into the verification stage and are comparing against <code>value_.StartTime</code> variable name. Maybe call the input variable <code>inputStartTime</code> (and the same for <code>endTime</code>) to reduce possible confusion?</p>

<p>The conflict checker is a decent chunk of code that probably deserves to be in its own function. This allows you to see a decent overview of the whole click process from the click listener without having to scroll through large amounts of code to get a general idea.</p>

<p>Assigning to <code>onclick</code> should usually be avoided. It can work if done <em>once</em>, but if <em>any other</em> code follows the same bad practices and ever tries to do the same thing, your prior listener will be overwritten. Best to always use <code>addEventListener</code> instead.</p>

<p>In full:</p>

<pre><code>const daysOfWeek = {};
for (const input of document.querySelectorAll('.form-group &gt; input[type="checkbox"]')) {
    daysOfWeek[input.id] = input;
}
const getConflicts = () =&gt; {
    for (const schedule of Object.values(savedSchedules)) {
        // Loop through the schedule (key_ = 'Name', 'Sunday', ...)
        for (const [day, dayObj] of Object.entries(schedule)) {
            // Only check if weekday has a time value and weekdays that are selected
            if (day === 'Name' || !dayObj || !daysOfWeek[day].checked) {
                continue;
            }
            // if there is conflict, return it
            const conflict = checkForConflict(dayObj.StartTime, dayObj.EndTime, inputStartTime, inputEndTime);
            if (conflict) {
                console.log('Conflict Detected');
                const conflictData = [day, `Start: ${dayObj.StartTime}/${inputStartTime}`, `End: ${dayObj.EndTime}/${inputEndTime}`];
                return `There is a scheduling conflict ${conflictData}:  - Cannot proceed...`;
            }
        }
    }
};
saveButton.addEventListener('click', () =&gt; {
    // Check that fields are filled
    if (!scheduleName || !inputStartTime || !inputEndTime || Object.values(daysOfWeek).every(input =&gt; !input.checked)) {
        warningMsg.textContent = 'All required fields must contain data';
        return;
    }
    // Check for Schedule Conflicts
    const conflictsMessage = getConflicts();
    if (conflictsMessage) {
        // Handle Conflict Resolution -&gt; Overwrite Schedule, etc
        // Probably CALL A FUNCTION HERE, don't write it all inside this click listener
        return;
    }
    // Save the Schedule

    // ...
});
</code></pre>

<p>The generation of the <code>schedule</code> object isn't shown, but it would be great not to have to do the <code>if (day === 'Name'</code> check - rather than combining the schedule name with the day keys, consider putting the days into a completely separate property, eg:</p>

<pre><code>{
  scheduleName: 'schedule-1',
  days: {
    Sunday: ...
    Monday: ...
</code></pre>
    </div>