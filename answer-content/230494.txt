<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Data structure-wise, it seems okay, and does what you're after.</p>

<p>Code-style wise, I see a few things:</p>

<ol>
<li><p>It's not quite <a href="https://www.python.org/dev/peps/pep-0008/" rel="noreferrer">PEP8</a>, the coding style. Whilst you can read it, which is always good, there are tools to automatize the process, such as <a href="https://pypi.org/project/flake8/" rel="noreferrer"><code>flake8</code></a>, <a href="https://github.com/psf/black" rel="noreferrer"><code>black</code></a>. Most likely, your editor will have a plugin. </p>

<p>This is include things like <code>underscore_names</code> in lieu of <code>camelCasing</code>.</p>

<p>Note that this standard is a living document, and gets updated once in a while.</p></li>
<li><p><code>None</code> is a singleton in Python, and thus you can use the <code>is</code> keyword instead.
Python relies on its <code>id()</code> function to get a hash of an object, and compare them.
As <code>None</code> is a singleton, the hash is the same. </p>

<p>So your line <code>if node == None:</code> could be <code>if node is None</code>.<br>
<strike>Going further this way, <code>None</code> evaluates to <code>False</code> in a test, so you could go <code>if not node:</code></strike> (edit: as discussed with @Gloweye, it's indeed clearer and preferred to use the first variant).</p></li>
<li><p>Python returns <code>None</code> when no value is being explicitly returned, whether you have no <code>return</code> in a function, or do a blank <code>return</code>.</p></li>
</ol>

<p>These two lines taken together could then be:</p>

<pre class="lang-py prettyprint-override"><code>if node is None:
    return
</code></pre>

<p>and would be considered idiomatic.</p>

<ol start="4">
<li>Lastly, in Python3 (which you ought to be using), class definition have been revamped. The way you do it:</li>
</ol>

<pre class="lang-py prettyprint-override"><code>class TST(object):
</code></pre>

<p>is now:</p>

<pre class="lang-py prettyprint-override"><code>class TST:
</code></pre>

<p>If you were inheriting from something, though, it would indeed be:</p>

<pre class="lang-py prettyprint-override"><code>class TST(ParentClass):
</code></pre>

<p>Maybe what you could try next is to implement unit tests with <a href="https://docs.python.org/3/library/unittest.html" rel="noreferrer">unittest</a> or <a href="https://pytest.org/en/latest/" rel="noreferrer">pytest</a> and see whether your structure holds on with more convoluted cases.</p>
    </div>