<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In addition to the other answers, I wanted to add my own thoughts on Q1 and Q4.</p>
<h1>Question 1</h1>
<h3>Break up <code>readtoken</code> into multiple functions.</h3>
<p>Right now, you are using a state machine in a single recursive function to try and read different types of tokens. As mentioned in another answer, recursion is not very "pythonic". Additionally, it is hard to follow the logic in this function since the state changes in each recursion.</p>
<p>This logic would be easier to understand if you break the different states up into separate functions, as it appears you have done in your OCaml example. You can even use similar high-level function names. We can then change our definition of <code>readtoken</code> to to route to other helper functions based on the first character we read from the stream.</p>
<pre><code>def readtoken(inputchannel, location):
    for nextchar in readchar(inputchannel, location):
        if nextchar == '\n':
            yield '\n'
        elif nextchar.isspace():
            continue
        elif nextchar == '"':
            yield read_quoted_string(inputchannel, location)
        elif nextchar == '[':
            yield read_bracketed_string(inputchannel, location)
        else:
            yield read_token(nextchar, inputchannel, location)
</code></pre>
<p>Note how the function immediately becomes easier to read. We are delegating our responsibilities out to other named functions, just like in your OCaml example. The purpose of <code>readtoken</code> is now simply that of a router, where we are delegating work out to other functions based on the first character we read from the stream.</p>
<p>Each of these helper functions now has a single responsibility - read their given token type from the stream, and return the result. Note that these functions should actually <code>return</code> a result, and not <code>yield</code> it - these functions are not generators, the only generator here is the <code>readtoken</code> function.</p>
<p>Helper function implementations:</p>
<pre><code>def read_quoted_string(inputchannel, location):
    token = ''
    for nextchar in readchar(inputchannel, location):
        if next_char == '"':
            return token
        else:
            token += nextchar
    raise Exception("End of character stream in quoted string.")


def read_bracketed_string(inputchannel, location):
    token = ''
    for nextchar in readchar(inputchannel, location):
        if nextchar == ']':
            return token
        else:
            token += nextchar
    raise Exception("End of character stream in bracketed string.")


def read_token(token, inputchannel, location):
    for nextchar in readchar(inputchannel, location):
        if nextchar.isspace():
            return token
        else:
            token += nextchar
    return token # if we reach the end of the stream
</code></pre>
<p>Take note of a few things with this implementation:</p>
<ul>
<li>Each function becomes much more readable. We no longer have to trace through a single recursive function and keep track of the state it is in.</li>
<li>We can now see that <code>read_quoted_string</code> and <code>read_bracketed_string</code> have a lot of common logic. Perhaps we should combine these into a single function <code>read_string</code> with a <code>string_delimiter</code> as a parameter.</li>
<li><code>read_token</code> takes an initial token as its first parameter - this is the character that we read from the top-level <code>readtokens</code> function. If we don't like this implementation, we could try to solve it by using <code>peek</code> at the top-level instead.</li>
</ul>
<h3>Don't make <code>readtoken</code> a generator function.</h3>
<p>In your example, the <code>Lexer</code> class has implemented <code>__iter__</code> which treats it as an iterable. This means that your <code>readtoken</code> does <em>not</em> need to be a generator function (i.e you can replace all <code>yield</code> statements with <code>return</code>), because the <code>Lexer</code> class is already a generator that wraps around it.</p>
<h1>Question 4</h1>
<p>When a generator function exits, it automatically raises a <code>StopIteration</code>. <code>for</code>-loops and <code>while</code>-loops will automatically handle this <code>StopIteration</code> by ending their loops and continuing on.</p>
<p>Therefore, the "normal" way to end a generator is to simply end the function. <code>return None</code> does accomplish this, but a more traditional method would be to simply reach the end of the function and return naturally. You can accomplish this by <code>break</code>ing out of the <code>while</code>-loop in your <code>readchar</code> function.</p>
    </div>