<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The code looks fine and it is working for the given input
data. However, it can be difficult to
assess which inputs will be regarded as valid, and how it will behave
in case of unexpected input. One approach to uncertainty about code
(will it work?) is to let it pass through a testing framework. This
requires splitting your code into smaller units that can easily be
tested.</p>
<p>At the end of this post, I will present an example of how the code can
be adapted to a testing framework, but before that there are some
minor issues I would like to mention.</p>
<h2>Unecessary <code>g</code> and <code>m</code> flag</h2>
<p>Consider this line:</p>
<pre><code>if( $data[0] =~ /FileName=([^_]+(?=_))_(\S+)_file.csv:(\S+),/gm ){
</code></pre>
<p>Since the code is only processing a single line at a time and there is only one
node on each line, global matching is not necessary. Also the <code>m</code> is
not needed. It allows <code>^</code> and <code>$</code> to match internal the start and end of
internal lines for a multiline string.</p>
<h2>Unnecessary use of lookahead regex</h2>
<p>Consider this line:</p>
<pre><code>if( $data[0] =~ /FileName=([^_]+(?=_))_(\S+)_file.csv:(\S+),/gm ){
</code></pre>
<p>First, as commented above we can remove the <code>g</code> and <code>m</code> flags. Then</p>
<pre><code>/[^_]+(?=_)_/ 
</code></pre>
<p>is simpler written as</p>
<pre><code>/[^_]+_/
</code></pre>
<h2>Make code easier to read</h2>
<p>This code:</p>
<pre><code>($node, $time, $unit) = ($2, $1, $3);
</code></pre>
<p>is easier to read (my opinion) if written as:</p>
<pre><code>($time, $node, $unit) = ($1, $2, $3);
</code></pre>
<p>such that the capture variables are sorted in numerical order. Similar
for this line:</p>
<pre><code>my ($second,$minute,$hour,$day,$month,$year) = (0, $5, $4, $3, $2, $1);
</code></pre>
<p>it can be written as:</p>
<pre><code>my ($year, $month, $day, $hour, $minute, $second ) = ( $1, $2, $3, $4, $5, 0);
</code></pre>
<h2>Shebang</h2>
<p>See <a href="https://www.cyberciti.biz/tips/finding-bash-perl-python-portably-using-env.html" rel="nofollow noreferrer">this</a> blog for more information.
I usually use <code>#!/usr/bin/env perl</code> instead of <code>#!/usr/bin/perl</code>.
Most systems have <code>/usr/bin/env</code>, and it allows your script to run if you e.g.have multiple <code>perl</code>s on your system. For example if you are using <code>perlbrew</code>.</p>
<h2><code>say</code> vs <code>print</code></h2>
<p>I prefer to use <code>say</code> instead of <code>print</code> to avoid typing a final
newline character for print statements.
The <code>say</code> function was introduced in
perl 5.10, and is mad available by adding <code>use v5.10</code> or use <code>use feature qw(say)</code> to the top of your script.</p>
<h2>Declare variable as close to their definition as possible</h2>
<p>By declaring variable in the same scope as they are used and as close
the their first usage point as possible will help a reader to quickly
reason about the code, which will help producing correct code. For example,
in this code</p>
<pre><code>my ($second,$minute,$hour,$day,$month,$year);
if ($datetime =~ /(....)(..)(..)(..)(..)/){
    ($second,$minute,$hour,$day,$month,$year) = (0, $5, $4, $3, $2, $1);
</code></pre>
<p>the variables are only used within the <code>if</code> clause, so we can write it as:</p>
<pre><code>if ($datetime =~ /(....)(..)(..)(..)(..)/){
    my ($second,$minute,$hour,$day,$month,$year) = (0, $5, $4, $3, $2, $1);
</code></pre>
<h2>Easier parsing of dates using <a href="https://perldoc.perl.org/Time/Piece.html" rel="nofollow noreferrer"><code>Time::Piece</code></a></h2>
<p>In the program below, I show how you can use <code>Time::Piece</code> instead of
<code>timelocal</code> to simplify the parsing of dates.</p>
<h1>Example code with unit tests</h1>
<h2>Main script <code>p.pl</code>:</h2>
<pre><code> #! /usr/bin/env perl

package Main;
use feature qw(say);
use strict;
use warnings;

use Carp;
use Data::Dumper qw(Dumper);

# Written as a modulino: See Chapter 17 in "Mastering Perl". Executes main() if
#   run as script, otherwise, if the file is imported from the test scripts,
#   main() is not run.
main() unless caller;

sub main {
    my $self = Main-&gt;new();
    $self-&gt;run_program();
}

# ---------------------------------------------
# Methods and subroutines in alphabetical order
# ---------------------------------------------

sub bad_arguments { die "Bad arguments\n" }

sub init_process_line {
    my ( $self ) = @_;

    $self-&gt;{lineno} = 1;
}

sub new {
    my ( $class, %args ) = @_;

    my $self = bless \%args, $class;
}

sub process_line {
    my ($self, $line) = @_;

    my $proc = ProcessLine-&gt;new( $line, $self-&gt;{lineno} );
    $self-&gt;{lineno}++;
    return $proc-&gt;process();
}

sub read_data {
    my ( $self ) = @_;

    # TODO: Read the data from file instead!
    my $data = [
'Node=01:FileName=A20200804.1815+0530-1816+0530_Network=NODE01_file.csv:Unit=R1,Meter=1 Vol 19,12,17,20,23,15,16,11,13,17',
'Node=02:FileName=A20200804.1830+0530-1831+0530_Network=NODE02_file.csv:Unit=R5,Meter=3 Vol 12,13,15,16,10,15,15,13,14,11'
   ];

    $self-&gt;{data} = $data;
}

sub run_program {
    my ( $self ) = @_;
    $self-&gt;read_data();
    $self-&gt;init_process_line();
    for my $line ( @{$self-&gt;{data}} ) {
        my ($node, $dt, $unit, $val) = $self-&gt;process_line($line);
        my $res = {
            node =&gt; $node,
            dt   =&gt; $dt,
            unit =&gt; $unit,
            val  =&gt; $val,
        };
        # TODO: write the data to STDOUT or to file in correct format
        print Dumper($res);
    }
}

package ProcessLine;
use feature qw(say);
use strict;
use warnings;

use Carp;
use POSIX qw( strftime );
use Time::Piece;

sub convert_date_to_epoch {
    my ( $self,  $date ) = @_;

    my $unix_time = Time::Piece-&gt;strptime( $date, "%Y%m%d.%H%M%z" )-&gt;epoch();
    return $unix_time;
}

# INPUT:
#  - $time_piece : initialized Time::Piece object
#
#
sub convert_epoch_to_date {
    my ( $self,  $time_piece ) = @_;

    my $dt = $time_piece-&gt;strftime("%Y-%m-%d %H:%M:%S");

    return $dt;
}

sub get_volumes {
    my ( $self,  $data ) = @_;

    $self-&gt;parse_error("No volumes") if !defined $data;
    my @vols = split /,/, $data;
    $self-&gt;parse_error("No volumes") if @vols == 0;
    for my $vol ( @vols ) {
        if ( $vol !~ /^\d+$/ ) {
            $self-&gt;parse_error("Volume not positive integer");
        }
    }
    return \@vols;
}

# INPUT:
#  - $volumes : list of volumes (integers).
#
# RETURNS: - index of smallest item (if there are multiple minimal, the index of
#  the first is returned.
#
# ASSUMES:
#  - Length of list &gt;= 1
#  - Each item is a positive integer.
#  - NOTE: The items do not need to be unique.
#
sub find_min_vol {
    my ( $self, $volumes) = @_;

    my $min = $volumes-&gt;[0];
    my $idx = 0;
    for my $i (1..$#$volumes) {
        my $value = $volumes-&gt;[$i];
        if ( $value &lt; $min) {
            $min = $value;
            $idx = $i;
        }
    }
    return $idx;
}

sub new {
    my ( $class, $line, $lineno ) = @_;

    my $self = bless {line =&gt; $line, lineno =&gt; $lineno}, $class;
}

sub parse_error {
    my ( $self, $msg ) = @_;

    croak ( sprintf( "Line %d: %s : '%s'\n", $self-&gt;{lineno}, $msg,
                 $self-&gt;{line} // "[undef]" ) );
}

sub process {
    my ($self) = @_;

    my $line = $self-&gt;{line};
    chomp $line;
    $self-&gt;parse_error("Empty line") if !$line;

    my ($field1, $field3) = $self-&gt;split_line( $line );
    my $date = $field1-&gt;get_date();
    my $node = $field1-&gt;get_node();
    my $unit = $field1-&gt;get_unit();
    my $unix_time = $self-&gt;convert_date_to_epoch( $date );
    my $volumes = $self-&gt;get_volumes( $field3 );
    my $idx = $self-&gt;find_min_vol($volumes);
    my $vol = $volumes-&gt;[$idx];
    my $vol_epoch = $unix_time + $idx*6;
    my $time_piece = localtime($vol_epoch);  # convert to local time zone
    my $dt = $self-&gt;convert_epoch_to_date( $time_piece );
    return ($node, $dt, $unit, $vol);
}

# INPUT:
#  - $line: defined string
#
sub split_line {
    my ( $self, $line ) = @_;

    my @data = split / /, $line;
    my $N = scalar @data;
    $self-&gt;parse_error( "Expected 3 fields (space-separated). Got $N fields.") if $N !=3;
    return (Field0-&gt;new($self, $data[0]), $data[2]);
}

package Field0;
use feature qw(say);
use strict;
use warnings;

sub get_date {
    my ( $self ) = @_;
    my $data = $self-&gt;{data};
    my $date;
    if( $data =~ s/FileName=([^_]+)_// ) {
        my $time = $1;
        if( $time =~ /[a-zA-Z](\d{8}\.\d{4}[+-]\d{4})-\d{4}[+-]/ ) {
            $date = $1;
        }
        else {
            $self-&gt;{parent}-&gt;parse_error("Could not parse time info");
        }
    }
    else {
        $self-&gt;{parent}-&gt;parse_error("Could not parse time info");
    }
    $self-&gt;{data} = $data;
    return $date;
}

sub get_node {
    my ( $self ) = @_;
    my $data = $self-&gt;{data};
    my $node;
    if( $data =~ s/(\S+)_// ) {
        $node = $1;
    }
    else {
        $self-&gt;{parent}-&gt;parse_error("Could not parse node info");
    }
    $self-&gt;{data} = $data;
    return $node;
}

sub get_unit {
    my ( $self ) = @_;
    my $data = $self-&gt;{data};
    my $unit;
    if( $data =~ s/file\.csv:(\S+),// ) {
        $unit = $1;
    }
    else {
        $self-&gt;{parent}-&gt;parse_error("Could not parse unit info");
    }
    $self-&gt;{data} = $data;
    return $unit;
}

sub new {
    my ( $class, $parent, $data ) = @_;
    return bless {parent =&gt; $parent, data =&gt; $data}, $class;
}
</code></pre>
<h2>Unit test script <code>t/main.t</code>:</h2>
<pre><code>use strict;
use warnings;
use Test2::Tools::Basic qw(diag done_testing note ok);
use Test2::Tools::Compare qw(is like);
use Test2::Tools::Exception qw(dies lives);
use Test2::Tools::Subtest qw(subtest_buffered);
use lib '.';
require "p.pl";

{
    subtest_buffered "split line" =&gt; \&amp;split_line;
    subtest_buffered "get_date" =&gt; \&amp;get_date;
    subtest_buffered "get_node" =&gt; \&amp;get_node;
    # TODO: Complete the test suite..
    done_testing;
}

sub get_date {
    my $proc = ProcessLine-&gt;new( "", 1 );
    my $fld = Field0-&gt;new($proc, "Node=01:FileName=A20200804.1815+0530-1816+0530_N");
    is($fld-&gt;get_date(), '20200804.1815+0530', 'correct');
    $fld = Field0-&gt;new($proc, "ileName=A20200804.1815+0530-1816+0530_N");
    like(dies { $fld-&gt;get_date() }, qr/Could not parse/, "bad input");
    $fld = Field0-&gt;new($proc, "FileName=A20200804.1815-1816+0530_N");
    like(dies { $fld-&gt;get_date() }, qr/Could not parse/, "bad input2");
}

sub get_node {
    my $proc = ProcessLine-&gt;new( "", 1 );
    my $fld = Field0-&gt;new($proc, "Node=01:FileName=A20200804.1815+0530-1816+0530_N");
    # TODO: complete this sub test..
}

sub split_line {
    my $proc = ProcessLine-&gt;new( "", 1 );
    like(dies { $proc-&gt;split_line( "" ) }, qr/Got 0 fields/, "zero fields");
    like(dies { $proc-&gt;split_line( " " ) }, qr/Got 0 fields/, "zero fields");
    like(dies { $proc-&gt;split_line( "1" ) }, qr/Got 1 fields/, "one field");
    like(dies { $proc-&gt;split_line( "1 2" ) }, qr/Got 2 fields/, "two fields");
    my ($f1, $f3);
    ok(lives { ($f1, $f3) = $proc-&gt;split_line( "1 2 3" ) }, "three fields");
    is($f1-&gt;{data}, "1", "correct value");
    is($f3, "3", "correct value");
}
</code></pre>
    </div>