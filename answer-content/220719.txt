<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>Is it good to map every DTOs into Proxy's DataContract? As my this
  class will grow with more service calls with different DTOs.</p>
</blockquote>

<p>Yes, mapping to your own domain improves modularity by decoupling the DTO library from your domain.</p>

<blockquote>
  <p>How this class should be architect so that it doesn't violate
  SRP/Design-patterns?</p>
</blockquote>

<ol>
<li>Use either a custom or existing mapping framework to remove the boiler-plate mapping code from your flow. You could create a <code>Mapper</code> class.</li>
<li>Consider using <a href="https://en.wikipedia.org/wiki/Aspect-oriented_software_development" rel="nofollow noreferrer">AOP</a> for refactoring boiler-plate try-catch blocks. You could create a <code>LogEntryExitAndErrorAnnotation</code> class.</li>
<li>Your reponse object is not required</li>
<li>Use a <code>using</code> block to dispose the client</li>
<li>Don't use a <code>boolean</code>, when it is always <code>true</code> on success, and hidden when an <em>exception</em> occured.</li>
</ol>

<p>adapted:</p>

<pre><code>     [LogEntryExitAndErrorAnnotation]
     public void Send()
     {
          var sd = mapper.Map&lt;Proxy.MessageProcessorProxy.SessionDetails&gt;(_sessionDataDTO);               

          // see notes below why to use an adapter
          using (var client = new MessageProcessorClientAdapter(
              new Proxy.MessageProcessorProxy.MessageProcessorClient()))
                  client.LogEventDetails(sd);
     }
</code></pre>

<h2>Note on (4)</h2>

<p>As the OP pointed out: <a href="https://docs.microsoft.com/en-us/dotnet/framework/wcf/samples/use-close-abort-release-wcf-client-resources" rel="nofollow noreferrer">Dispose could hide the root exception</a>.</p>

<p>To avoid this, you can use an adapter. I would use T4 templates to generate these for all my clients.</p>

<p>Suppose your client interface is</p>

<pre><code>public interface IMessageProcessorClient : IDisposable {
    void LogEventDetails(object data); // or typed class
}
</code></pre>

<p>You can use the code below to have the best possible exception details. If no error occured during the operation, the error of Dispose is thrown, else an aggregate error is thrown.</p>

<pre><code>public class MessageProcessorClientAdapter : IMessageProcessorClient {
    public IMessageProcessorClient Source {get; private set;}
    public Exception Error {get;private set;}
    public MessageProcessorClientAdapter(IMessageProcessorClient source) {
        this.Source = source; // check for null
    }
    public void LogEventDetails(object data) {
        try {
            this.Source.LogEventDetails(data);
        } catch (Exception error) {
            this.Error = error;
        }
    }
    public void Dispose() {
        try {
            this.Source.Dispose();
        } catch (Exception error) {
            if (this.Error == null) {
                this.Error = error;
            } else {
                this.Error = new AggregateException(this.Error, error);
            }
        } finally {
            if (this.Error != null) {               
                throw this.Error;
            }
        }
    }
</code></pre>
    </div>