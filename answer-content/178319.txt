<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It took me a while to decipher what you meant with 'less than n values'. What your function actually does: it filters out all words that are either shorter than the specified length (<code>less</code>) or contain any character from the specified language(s).</p>

<ul>
<li>The function name is very undescriptive. In a small project that may not be an issue, but in larger projects it quickly becomes impossible to remember what every piece of code does. A good name allows you to quickly understand what a function does. A poor name often requires you to look at how it's implemented, which takes a lot more time. What about <code>removeShortAndForeignWords</code>?</li>
<li>The same goes for parameter and variable names. Good names make code easier to understand: <code>$array</code> -&gt; <code>$words</code>, <code>$less</code> -&gt; <code>$minimumLength</code>, <code>$lang</code> -&gt; <code>$languageCode</code>, <code>$languages</code> -&gt; <code>$languageFilters</code>, and so on.</li>
<li>Why do you try to parse language names? That's very difficult to get right (what if I wanted to use <code>American English</code>, or <code>ру́сский</code>?), so the effect is that your function becomes <em>less</em> reliable, not easier to use. It's much more effective to just document which language codes your function supports (<code>en</code>, <code>ru</code> and <code>tj</code>). In a statically typed language I'd use an enum, but here a set of constants should do.</li>
<li><code>$lang[$lan] = str_replace($search, $replace, $lan);</code> - Here, because you use <code>$lan</code> as a key, you're <em>adding</em> entries. If the input was <code>array('en', 'ru')</code>, you end up with <code>array('en', 'ru', 'en' =&gt; 'en', 'ru' =&gt; 'ru')</code>, which results in double work (the filters for each language are executed twice).</li>
<li><code>if(is_array($lang))</code> - Use <code>else if</code> here.</li>
<li><code>qwertyuiopasdfghjklzxcvbnm</code> matches a specific keyboard layout, but <code>abcdefghijklmnopqrstuvwxyz</code> is a much more natural order for latin characters. However, since you're using a regex, you can simply use <code>a-zA-Z</code>.</li>
<li>You can remove a lot of code duplication by making your function recursive. If <code>$lang</code> is an array, then your function can call itself (once for every language code in the array) and then return the final result. Then the rest of the code doesn't need to take multiple language codes into account anymore.</li>
<li>The return value behavior of your function is inconsistent. If you pass an invalid language code, it returns <code>false</code>. However, if you pass an array of invalid language codes, it returns the input words array.</li>
<li>Personally I'd be <em>very</em> careful with references in PHP (<code>&amp;$array</code>). I've seen some surprising edge-cases and as far as I know they often degrade performance. In this case, your function is both returning a filtered array, and it's updating the original array (but only if you pass an array of language codes). So in your last example, not only does the output contain 2 russian words, <code>$words</code> has also been replaced with the results array. That's a very surprising side-effect.</li>
</ul>

<hr>

<p>As per your request, here's how I would probably have written it. I don't often work with PHP, and I haven't thoroughly tested this, but it should give you a reasonable impression:</p>

<pre><code>const LANG_EN = 'en';
const LANG_RU = 'ru';
const LANG_TJ = 'tj';

/**
 * Takes an array of words and filters out any words that are too short or that contain any characters from the specified language(s).
 *
 * @param array $words The array of words to filter
 * @param number $minimumLength The minimum allowed word length
 * @param string|array $languageCode The language(s) that must be filtered out. The following languages are supported: LANG_EN, LANG_RU and LANG_TJ.
 *
 * @return array The given words, excluding words that are too short and words that are from the specified language(s).
 */
function removeShortAndForeignWords($words, $minimumLength = 2, $languageCode = LANG_EN) {
    if (is_array($languageCode)) {
        foreach ($languageCode as $language) {
            $words = removeShortAndForeignWords($words, $minimumLength, $language);
        }
        return $words;
    }

    $languageFilters = [
        LANG_EN =&gt; '[^a-zA-Z]',
        LANG_RU =&gt; '[^ёйцукенгшщзхъфывапролджэячсмитьбюЁЙЦУКЕНГШЩЗХЪФЫВАПРОЛДЖЭЯЧСМИТЬБЮ]',
        LANG_TJ =&gt; '[^ғӯқҳҷӣҒӮҚҲҶӢ]',
    ];
    if (!isset($languageFilters[$languageCode])) {
        return false;
    }

    return preg_grep('~\A'.$languageFilters[$languageCode].'{'.$minimumLength.',}\z~u', $words);
}
</code></pre>
    </div>