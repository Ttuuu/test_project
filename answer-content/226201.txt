<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I tested your code and it does work, so far, so good. This type of code has been written many times, so by searching online you can find a lot of good examples.</p>

<p>The main problem I have with your code is that it is rather difficult to understand. I can work it out, but it is not obvious. Starting with prepending the <code>$params</code> with something, then the very weird: <code>$params[$i] = &amp;$params[$i]</code> loop, followed by the usage of <code>ReflectionMethod</code> normally used for <code>reverse-engineering</code> code.</p>

<p>I prefer more down to earth code for a simple function like this. Something like:</p>

<pre><code>function executeQuery($mysqli, $query, $parameters)
{
    $stmt = $mysqli-&gt;stmt_init();
    if ($stmt-&gt;prepare($query)) {
        $types = str_repeat("s", count($parameters));
        if ($stmt-&gt;bind_param($types, ...$parameters)) {
            if ($stmt-&gt;execute()) {
                return $stmt-&gt;get_result();
            }
        }
    }
    return ['error' =&gt; $stmt-&gt;error];
}
</code></pre>

<p>Short and sweet. Some notes:</p>

<ul>
<li>I try to use a function name that actually reflects what the function does.</li>
<li>I supply the database connection as an argument, for more flexibility. You can use multiple database connections and they don't need to be in the global scope.</li>
<li>I check whether the query could be properly prepared.</li>
<li>My code differs quite a bit from your code when it comes to binding the parameters. As you can see this is quite straightforward. <a href="https://www.php.net/manual/en/functions.arguments.php#functions.variable-arg-list.new" rel="noreferrer">Using ... to access variable arguments</a> has been available since PHP 5.6 which came out in 2014.</li>
<li>By directly returning the results when the execution was successful I know that an error must have occurred when the last line of the function is executed. This therefore also catches other problems.</li>
</ul>

<p>Personally I would not have expected to get a MySQLi result object out of this function. Because it will always have to be processed. Why not do this processing inside this function? Like this:</p>

<pre><code>function executeQuery($database, $query, $parameters)
{
    $stmt = $database-&gt;stmt_init();
    if ($stmt-&gt;prepare($query)) {
        $types = str_repeat("s", count($parameters));
        if ($stmt-&gt;bind_param($types, ...$parameters)) {
            if ($stmt-&gt;execute()) {
                if ($result = $stmt-&gt;get_result()) {
                    $rows = [];
                    while ($row = $result-&gt;fetch_assoc()) {
                        $rows[] = $row;
                    }
                    return $rows;
                }
            }
        }
    }
    return ['error' =&gt; $stmt-&gt;error];
}
</code></pre>

<p>Now you simply get an array back. I agree that is not much different from returning a MySQLi result, but I am thinking ahead. Suppose you decide to change over from MySQLi to PDO in the future. You can easily recode the function above to work with PDO, but recoding the handling of MySQLi results everywhere in your code will be a lot harder. So I am using the function to abstract away from a particular database interface.</p>

<p>Some people don't like the deep nesting of <code>if () {}</code> blocks. To prevent this you could instead write something, like the code below, for all these blocks:</p>

<pre><code> if (!$stmt-&gt;prepare($query)) {
     return ['error' =&gt; $stmt-&gt;error];
 }
</code></pre>

<p>I have to repeat that there are lots of ways of doing this. The answer I gave is based on the code you presented. It is, for instance, not hard to find out the type of the parameters, and adjust the <code>$types</code> string accordingly. </p>
    </div>