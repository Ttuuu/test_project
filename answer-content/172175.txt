<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There's good news and bad news about this code.  The bad news is that it's not very good code.  The good news is that it's not going to be too hard to improve it greatly, and the ASCII art is awesome!  Here are some observations that may help you improve your code.</p>

<h2>Don't abuse <code>using namespace std</code></h2>

<p>Putting <code>using namespace std</code> at the top of every program is <a href="http://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice">a bad habit</a> that you'd do well to avoid.  </p>

<h2>Consider separating I/O from the algorithm</h2>

<p>Right now, everything is done in main.  Better practice is to separate things into functions.  In particular, I'd recommend separating the input/output routines into separate functions.  Right now the control flow is too difficult to follow and it's hard to tell what's happening in the code.</p>

<h2>Avoid using <code>goto</code></h2>

<p>Having a proliferation of <code>goto</code> statements is usually a sign of bad design.  Better would be to eliminate them entirely -- it makes the code easier to follow and less error-prone.  In this code, it's probable that you could use a state machine and <code>switch</code> statement instead which would make the code much easier to follow and much less prone to error.</p>

<h2>Use objects</h2>

<p>Because you're writing in C++, it would make sense to use objects.  For example, you might have a class <code>Player</code> which contains all of the variables currently only labelled with a comment saying "player variables" and a game state class to simplify loading and saving the game state.</p>

<h2>Consider using a better random number generator</h2>

<p>You are currently using </p>

<pre><code>random = rand()%5+1;
</code></pre>

<p>There is a problem with this approach: the low order bits of the random number generator are not particularly random, so neither will <code>random</code> be.  On my machine, there's a slight but measurable bias toward 0 with that.  A better solution, if your compiler and library supports it, would be to use the <a href="http://en.cppreference.com/w/cpp/numeric/random/uniform_int_distribution" rel="nofollow noreferrer">C++11 `std::uniform_int_distribution</a>.  It looks complex, but it's actually pretty easy to use.</p>

<pre><code>class Die {
public:
    Die(int min, int max) : min{min}, max{max} {}
    Die(int max=6) : min{1}, max{max} {}
    int operator()() { 
        std::uniform_int_distribution&lt;&gt; dist(min,max);
        return dist(eng);
    }

private:
    int min; 
    int max;
    static std::mt19937 eng;
};

std::mt19937 Die::eng{std::random_device{}()};
</code></pre>

<p>When you want, as in this example, some number from 1 to 6, just call it like this:</p>

<pre><code>int main() {
    Die die{6};   // create conventional 6-sided die
    for (int i=20; i; --i) {
        std::cout &lt;&lt; die();
    }
}
</code></pre>

<h2>Eliminate "magic numbers"</h2>

<p>There are numbers sprinkled throughout the code, such as <code>5</code> and <code>6</code> that have a specific meaning in their particular context.  By using named constants the program becomes easier to read and maintain.  For cases in which the constant only has sense with respect to a particular object, consider making that constant part of the object.</p>

<h2>Omit <code>return 0</code></h2>

<p>When a C or C++ program reaches the end of <code>main</code> the compiler will automatically generate code to return 0, so there is no need to put <code>return 0;</code> explicitly at the end of <code>main</code>.  </p>
    </div>