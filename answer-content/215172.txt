<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I do not see any errors in the code. However, I do not like the choice of data structure in <code>GradeDistribution</code>. Not only are insertions slow -- taking time linear in the number of ranges -- but it is also unnecessarily involved. Java has a wealth of data structures in the standard library. Choosing the right one can make your code faster and cleaner. I recommend <code>TreeMap</code>, which has a <code>floorEntry</code> method that makes is easy to find the appropriate range for a given score.</p>

<p>More detailed critique:</p>

<ul>
<li>Use constants to hold magic numbers like the min/max scores and ranges.</li>
<li>Add scores to the data structure one at a time instead of as a list.</li>
<li>Shorten variables and method names.</li>
<li>Use name <code>getAcceptedPercent</code> to make it clear this method is an accessor.</li>
<li>Use <code>Scanner.nextInt</code> and <code>Scanner.hasNextInt</code>.</li>
<li>Use an infinite loop and break to avoid checking <code>number != -1</code> twice.</li>
<li>Keep track of total and accepted scores as you go.</li>
</ul>

<p>Here is my implementation, which addresses each issue:</p>

<pre><code>import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner reader = new Scanner(System.in);
        GradeDistribution grades = new GradeDistribution();

        System.out.println("Type exam scores, -1 to end");
        while (reader.hasNextInt()) {
            int number = reader.nextInt();
            if (number == -1) {
                break;
            }
            grades.add(number);
        }

        grades.print();
        System.out.println(grades.getAcceptedPercent());
    }
}
</code></pre>

<pre><code>import java.util.TreeMap;
import java.util.Map;

public class GradeDistribution {
    private static final int MIN = 0, MAX = 60;
    private static final int[] RANGE_STARTS = {0, 30, 35, 40, 45, 50};

    private TreeMap&lt;Integer, Integer&gt; rangeCount = new TreeMap&lt;Integer,Integer&gt;();
    private int totalScores = 0, acceptedScores = 0;

    public GradeDistribution(){
        for (int s : RANGE_STARTS) {
            rangeCount.put(s, 0);
        }
    }

    public void add(int grade) {
        if (grade &lt; MIN || grade &gt; MAX) {
            return;
        }

        Map.Entry&lt;Integer,Integer&gt; e = rangeCount.floorEntry(grade);
        rangeCount.put(e.getKey(), e.getValue() + 1);

        totalScores++;
        if (e.getKey() &gt; MIN) {
            acceptedScores++;
        }
    }

    public void print(){
        int rangeNum = 1;
        for (int count : rangeCount.tailMap(MIN, false).values()) {
            System.out.printf("%d: ", rangeNum++);
            for (; count &gt; 0; count--) {
                System.out.print('*');
            }
            System.out.println();
        }
    }

    public double getAcceptedPercent(){
        return (100.0 * acceptedScores) / totalScores;
    }
}
</code></pre>

<p>There is another further improvements you could consider, though I did not implement it here for the sake of brevity. You could use a mutable type for the map values. If, say the map was of type <code>TreeMap&lt;Integer,WrappedInteger&gt;</code> for a type <code>WrappedInteger</code> that supports an <code>increment</code> operation, we could write <code>e.getValue().increment()</code> instead of the <code>put</code> in the current implementation. This is potentially faster, as it avoids accessing the tree again.</p>
    </div>