<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Debug output</h1>

<p>For each line of debug output you write 3 lines of code. You may also want to write debug output to stderr instead of stdout so you'll be able to isolate debug output from regular output. I suggest defining something like the following in a common header:</p>

<pre class="lang-c prettyprint-override"><code>#ifdef ENABLE_DEBUG_OUTPUT
# define DEBUG(FMT, ...) fprintf(stderr, FMT, __VA_ARGS__)
#else
# define DEBUG(FMT, ...)
#endif
</code></pre>

<p>instead of writing</p>

<pre><code>#ifdef DEBUG
    printf("stuff and %s\n", "other stuff");
#endif
</code></pre>

<p>you can now write</p>

<pre><code>DEBUG("stuff and %s\n", "other stuff");
</code></pre>

<p>That output will only happen if you define <code>ENABLE_DEBUG_OUTPUT</code>.</p>

<h1>Linebreaks</h1>

<p>You always put the linebreak at the beginning of your format string (<code>printf("\nstuff")</code>). This may lead to strange output (demonstrated with bash, but it still applies):</p>

<pre class="lang-bsh prettyprint-override"><code>user@host:~$ printf "\nstuff"

stuffuser@host:~$ 
</code></pre>

<p>Always put linebreaks at the end of your format string:</p>

<pre class="lang-c prettyprint-override"><code>printf("stuff\n");
</code></pre>

<h1>Struct initialization</h1>

<p>Instead of writing</p>

<pre><code>// Initialize members with default values
pool-&gt;numThreads = 0; 
pool-&gt;FRONT = NULL;
pool-&gt;REAR = NULL;
pool-&gt;waitingThreads = 0;
pool-&gt;isInitialized = 0;
pool-&gt;removeThreads = 0;
pool-&gt;suspend = 0;
</code></pre>

<p>I'd just write</p>

<pre><code>memset(pool, 0, sizeof(*pool));
</code></pre>

<p>That is both shorter and sure to actually zero the whole structure even if you add fields in the future.</p>

<h1>Suspend/Resume</h1>

<p>Are there use cases for you being able to suspend/resume your threadpool? Is it useful for something? If you can't think of a use case then don't include it in your API. The more surface your API exposes the harder it is to maintain backwards compatibility in the future.</p>

<h1>Lots of conds/mutexes</h1>

<p>I think you can actually reduce the number of mutexes quite a bit. Just one mutex to lock access to the <code>ThreadPool</code> and one condition var to wake up threads should be enough to implement the exact same API you're currently using. Lock the mutex whenever you interact with the <code>ThreadPool</code>. Always notify your condition var when a job is added. broadcast on the same condition var when the pool is destroyed.</p>

<p>Pseudocode for function executed in thread:</p>

<pre><code>lock(pool-&gt;mutex)
while (pool-&gt;running) {
  var job = get_next_job(pool-&gt;queue);
  if (job is null) {
    // No jobs. Go to sleep.
    wait(pool-&gt;cond);
    continue;
  }
  else {
    unlock(pool-&gt;mutex);
    execute(job);
    lock(pool-&gt;mutex);
  }
}
unlock(pool-&gt;mutex)
</code></pre>
    </div>