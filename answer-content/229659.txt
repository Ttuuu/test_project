<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I decided to take a stab at this, and I ended up reducing your algorithm down to one line (tested for equality with the original algorithm from n = [0,500] :</p>

<pre><code>highest_value = (n &gt; 2) ? ( 1+n*(n-1) ) : ( 2*n );
</code></pre>

<p>If you would like to see the steps I took, then please see my steps below...</p>

<p>Let's start by removing the comparison in the 2nd loop by splitting up the 2nd loop into 2 parts:</p>

<pre><code>for(int i = 1; i &lt;= n; i++) {
    // smaller = j
    for(int j = 1; j &lt; i; j++) {
        for(int y = 1; y &lt;= j/*smaller*/; y++) {
            if(i%y==0 &amp;&amp; j%y==0) gcd = y;
        }
        equation = gcd+((i*j)/gcd); //since lcm(x,y) = (x*y)/gcd(x,y)
        if(equation &gt; highest_value) highest_value = equation;
    }
    // smaller = i
    for(int j = i; j &lt;= n; j++) {
        for(int y = 1; y &lt;= i/*smaller*/; y++) {
            if(i%y==0 &amp;&amp; j%y==0) gcd = y;
        }
        equation = gcd+((i*j)/gcd); //since lcm(x,y) = (x*y)/gcd(x,y)
        if(equation &gt; highest_value) highest_value = equation;
    }
}
</code></pre>

<p>Now let's extract the simple case where <code>i == j</code> by adding</p>

<pre><code>// i == j
// gcd = i;
// equation = gcd+((i*j)/gcd);
// equation = i + (i*i)/i
equation = 2 * i;
if(equation &gt; highest_value) highest_value = equation;
</code></pre>

<p>and changing the limits of the second loop to exclude <code>i == j</code></p>

<pre><code>for(int j = i+1; j &lt;= n; j++) {
</code></pre>

<p>we now have</p>

<pre><code>for(int i = 1; i &lt;= n; i++) {
    // i == j
    equation = 2 * i;
    if(equation &gt; highest_value) highest_value = equation;
    // smaller = j
    for(int j = 1; j &lt; i; j++) {
        for(int y = 1; y &lt;= j/*smaller*/; y++) {
            if(i%y==0 &amp;&amp; j%y==0) gcd = y;
        }
        equation = gcd+((i*j)/gcd); //since lcm(x,y) = (x*y)/gcd(x,y)
        if(equation &gt; highest_value) highest_value = equation;
    }
    // smaller = i
    for(int j = i+1; j &lt;= n; j++) {
        for(int y = 1; y &lt;= i/*smaller*/; y++) {
            if(i%y==0 &amp;&amp; j%y==0) gcd = y;
        }
        equation = gcd+((i*j)/gcd); //since lcm(x,y) = (x*y)/gcd(x,y)
        if(equation &gt; highest_value) highest_value = equation;
    }
}
</code></pre>

<p>we can observe that the second loop checks the same values (just mirrored with i and j), so we can get rid of the second loop entirely giving us:</p>

<pre><code>for(int i = 1; i &lt;= n; i++) {
    // i == j
    equation = 2 * i;
    if(equation &gt; highest_value) highest_value = equation;
    // smaller = j
    for(int j = 1; j &lt; i; j++) {
        for(int y = 1; y &lt;= j/*smaller*/; y++) {
            if(i%y==0 &amp;&amp; j%y==0) gcd = y;
        }
        equation = gcd+((i*j)/gcd); //since lcm(x,y) = (x*y)/gcd(x,y)
        if(equation &gt; highest_value) highest_value = equation;
    }
}
</code></pre>

<p>we can also observe that the maximum value for the i == j case will be where <code>i == n</code>, so we can get rid of that section and start our highest_value at 2*n :</p>

<pre><code>int highest_value = 2*n;
int equation, gcd;

for(int i = 1; i &lt;= n; i++) {
    // smaller = j
    for(int j = 1; j &lt; i; j++) {
        for(int y = 1; y &lt;= j; y++) {
            if(i%y==0 &amp;&amp; j%y==0) gcd = y;
        }
        equation = gcd+((i*j)/gcd); //since lcm(x,y) = (x*y)/gcd(x,y)
        if(equation &gt; highest_value) highest_value = equation;
    }
}

return highest_value;
</code></pre>

<p>Now let's look at the inner-most loop</p>

<pre><code>for(int y = 1; y &lt;= j; y++) {
    if(i%y==0 &amp;&amp; j%y==0) gcd = y;
}
</code></pre>

<p>we know that y == 1 is a simple case where <code>gcd = 1</code> and <code>equation = 1 + i*j</code>, so we can extract that from the loop:</p>

<pre><code>equation = 1 + i*j;
if(equation &gt; highest_value) highest_value = equation;

for(int y = 2; y &lt;= j; y++) {
    if(i%y==0 &amp;&amp; j%y==0) gcd = y;
}
</code></pre>

<p>let's also notice that the equation <code>1 + i*j</code> has a maximum consistent with the maximum values of i and j where <code>i = n</code> and <code>j = n-1</code> which gives us <code>1 + n*(n-1)</code> or <code>1 + n*n - n</code>. Now we can move this equation to the beginning of the function and check it against our initial highest_value of <code>2 * n</code>. Don't forget to exclude the case where <code>n == 0</code>, because it is impossible to achieve a value of <code>i</code> or <code>j == 0</code> inside the loop.</p>

<pre><code>int highest_value = 2*n;
int gcd, equation;

if ( n &gt; 0 ) {
    equation = 1 + n*(n-1);
    if(equation &gt; highest_value) highest_value = equation;
}
</code></pre>

<p>We can notice that our new equation exceed our initial equation at a value of <code>n &gt;= 3</code></p>

<pre><code>int highest_value, gcd, equation;

if ( n &gt; 2 ) {
    highest_value = 1 + n*(n-1);
} else {
    highest_value = 2 * n;
}
</code></pre>

<p>We can notice that <code>i == 1</code> and <code>j == 1</code> will never be divisible by the initial value of <code>y</code>, so we can start them at 2. Then notice that the j loop never happens if <code>i == 2</code>, so we can start i at 3.</p>

<pre><code>int highest_value, gcd, equation;

if ( n &gt; 2 ) {
    highest_value = 1 + n*(n-1);
} else {
    highest_value = 2 * n;
}

for(int i = 3; i &lt;= n; i++) {
    for(int j = 2; j &lt; i; j++) {
        for(int y = 2; y &lt;= j; y++) {
            if(i%y==0 &amp;&amp; j%y==0) gcd = y;
        }
        equation = gcd+((i*j)/gcd);
        if(equation &gt; highest_value) highest_value = equation;

    }
}

return highest_value;
</code></pre>

<p>Finally... We can notice a pattern where we can take this approach indefinitely where we can continue to factor our i and j, so I noticed a pattern where the initial highest_value is true for every i and j, so the final function is :</p>

<pre><code>highest_value = (n &gt; 2) ? ( 1+n*(n-1) ) : ( 2*n );
</code></pre>
    </div>