<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I don't know why you add the stuff to the form controls twice in most of the classes, so I am going to assume you don't need to do that.</p>

<p>I would suggest moving the x and y into the component classes, it will help with your for loop.</p>

<p>I took out tabIndex because you were passing i in for that and your number parameter, you can keep it in if you like it doesn't really change the underlying principles.</p>

<p>I am going to use generics to show how it would work with them, you can do it without generics but I don't want to do two examples, I use virtual for stuff that only some child classes will override and abstract for ones that every child class needs to override, because of the way collections work in c# I am having 2 levels of abstract classes, one that uses generics and one that doesn't</p>

<pre><code>// abstract class
public abstract class add_components
{
    protected abstract int _offset { get; }
    protected abstract string _name { get; }
    protected virtual int _width =&gt; 75;
    protected virtual int _height =&gt; 23;
    public int x { get; set; }
    public int y { get; set; }
    public abstract void add_dynamic_components(int number, Form1 form)
}

public abstract class add_components&lt;TControl&gt; : add_components
    where TControl : Control, new()
{
    public override void add_dynamic_components(int number, Form1 form)
        var control = new TControl();
        form.panel1.Controls.Add(control);
        control.Location = new Point(x, y);
        control.Size = new System.Drawing.Size(_width, _height);
        control.Name = "Add_" + _name + number;
        control.TabIndex = number * 7 + _offset;
        DoControlSpecific(control);
    }

    protected virtual void DoControlSpecific(TControl control)
    {
    }
}

public class addButtonComponents : add_components&lt;Button&gt;
{
    protected override int _offset =&gt; 8;
    protected override string _name =&gt; "Button";

    protected override void DoControlSpecific(Button control)
    {
        control.Text = "Add";
        control.Click += new EventHandler(f.btnAddCptInformation);
    }
}

// inherit from add_components&lt;TControl&gt; for your other controls

using System.Collections.Generics;

public partial class Form1 : Form
{
    addButtonComponent addButtonComponents = new addButtonComponent();

    public void createDynamiccomponents()
    {
        int value;
        if (int.TryParse(txtboxvalLines.Text, out value))
        {
            List&lt;add_components&gt; addComponents = new List&lt;add_components&gt;
            {
                addButtonComponents
                // all other components go in this list
            };
            addButtonComponents.x = 1170;
            addButtonComponents.y = 24;
            // set all other components x and y here.

            for (int i = 0; i &lt; txtno; i++)
            {
                customize_panel();
                foreach (add_component addComponent in addComponents)
                {
                    addComponent.add_dynamic_components(i, this, i);
                    addComponent.y += 50;
                }
                panel1.Show();
            }

            btnAdd.Enabled = false;
            txtboxvalLines.Enabled = false;
            panel1.Focus();
        }
        else
        {
            MessageBox.Show("Please provide the count of total Claim lines");
            txtboxvalLines.Text = "";
        }
    }
}
</code></pre>

<p>This code may have syntax errors or bugs I didn't write it with a ide.</p>

<p>The abstract class type can be given to your generic list so that you can loop through that list and call the same method on each</p>

<ul>
<li>you could accomplish that with an interface</li>
</ul>

<p>but you can't define protected properties or methods in an interface</p>

<ul>
<li>you could accomplish that with a non abstract base class</li>
</ul>

<p>but you can't define abstract methods in a non abstract base class which means you can't force your child classes to override things</p>
    </div>