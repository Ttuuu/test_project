<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>The GUI</h2>

<p>Usually, in the "view" side, you can decompose your frames in many components, this <strong>smart and dumb components</strong> pattern is a simple one that give a better structure to your code.</p>

<p>You can extract one class for the buttons and another for the grid. You can also create a subclass of <code>JButton</code> for all of your buttons and use the fancy lambdas notations for a concise syntax :</p>

<pre><code>public Gui(LangtonsAnt langtonsAnt) {
    this.simulation = langtonsAnt;

    worldGrid = new WorldGrid(simulation);

    JPanel buttons = new VerticalStackPanel( // Your Jpanel with GridLayout
            new ActionButton("Start / Stop", this::onStartStop),
            new ActionButton("Faster", langtonsAnt::increaseSpeed),
            new ActionButton("Slower", langtonsAnt::decreaseSpeed)
    );

    add(worldGrid, BorderLayout.CENTER);
    add(buttons, BorderLayout.EAST);

    setSize(
            worldGrid.getWidth() + BUTTONS_WIDTH + ARBITRARY_SPACE,
            worldGrid.getHeight() + ARBITRARY_SPACE);
    setDefaultCloseOperation(EXIT_ON_CLOSE);
    // duplicated setVisible(true) removed, alrdeay called in your Control.
}
</code></pre>

<h2>The core, LangtonsAnt</h2>

<p>Your code contains some <strong>magic numbers</strong>, you can replace them by constants to reduce the cognitive load and improve the readability.  </p>

<p>You have a <code>speed</code> field that is accessible from all classes. However it is subject to some rules. So it is better to <strong>encapsulate</strong> it under a getter so that other classes cannot change it, they have to use your method to increase and decrease it. It can also be a good improvement to rename your <code>slower</code> and <code>faster</code> method to <code>decraseSpeed</code> and <code>increaseSpeed</code> so that the relation between those two methods and the <code>getSpeed</code> accessor is clear.</p>

<p>In your system, the speed is part of the GUI so it may be better to move it to the GUI or remove it form the <code>LangtonsAnt</code> class to improve the <strong>separation of concerns</strong>. For the same goal you could also find a way to remove the static call to <code>Gui.antDied()</code> and <code>Control.exit = true</code> because it add two useless and non explicit dependencies.  </p>

<p>It looks like there is a bit of repetition in your rules. The proposal of @sharon is a good idea. However it don't use the power of OOP, I believe it would be a good exercise because there are a lot of possibles implementations. </p>

<p>To have an idea, mine will have one class that represent the map, encapsulate the two dimensional array and provide a <code>Cell</code> abstraction. One <code>Ant</code> that hold the state of the system (current cell and direction) and produce movements that can be executed to mutate the map.</p>

<pre><code>class WorldMap {
    private static final int WHITE_CELL = 1;
    private static final int BLACK_CELL = 0;

    private final int[][] map;

    // ..

    public Cell getCellAt(int x, int y)

    public void execute(Movement movement)

    class Cell {
        final int x, y;

        private void toggle() {
            world.map[y][x] ^= 1;
        }

        public boolean isWhite() {
            return get() == WHITE_CELL;
        }

        public Direction change(Direction direction) {
            return isWhite()
                ?direction.turnLeft()
                :direction.turnRight();
        }

        // ...
    } 
}

class Ant {

    private Direction direction = new Direction(Direction.UP);
    private Cell position;

    // ...

    class Direction {
        private static final int ROTATION = 90;
        private static final int UP = 0;
        private static final int RIGHT = UP + ROTATION;
        private static final int DOWN = RIGHT + ROTATION;
        private static final int LEFT = DOWN + ROTATION;
        private final int angle;

        Direction(int angle) {
            this.angle = angle;
        }

        public Direction turnRight() {
            return new Direction((angle + ROTATION) % 360);
        }
    }
} 
</code></pre>
    </div>