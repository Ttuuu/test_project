<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Whenever you find yourself writing long (or sometimes even short) comments explaining a single line/a block of lines, you should ask yourself if this was not better placed in a function. Functions can be given a meaningful name and you can add a <a href="https://www.python.org/dev/peps/pep-0257/" rel="nofollow noreferrer">docstring</a> to them (which can be considerably longer than a comment practically can). It also give you one obvious place to change if, for example, the Amazon Music website is changed at some point. </p>

<p>IMO, here the function names should already be self-explanatory enough, so I did not add any docstrings.</p>

<pre><code>import requests
from bs4 import BeautifulSoup
from itertools import count

def get_soup(url):
    r = requests.get(url)
    r.raise_for_status()
    return BeautifulSoup(r.text, 'lxml')

def track_titles(soup):
    attrs = {'class': 'a-link-normal a-color-base TitleLink a-text-bold'}
    return [a.text for a in soup.find_all('a', attrs=attrs)[::2]]

def track_durations(soup):
    attrs = {'class': 'a-text-right a-align-center'}
    return [td.text.strip() for td in soup.find_all('td', attrs=attrs)]

def track_artist(soup):
    return soup.find('a', attrs={'id':'ProductInfoArtistLink'}).text

if __name__ == "__main__":
    url = input("Please enter an Amazon music url:")
    soup = get_soup(url)

    titles = track_titles(soup)
    durations = track_durations(soup)
    artist = track_artist(soup)

    for i, title, duration in zip(count(1), titles, durations):
        print(f"{i}. {title} - {artist} ({duration})")
</code></pre>

<p>Other things I changed:</p>

<ul>
<li>Added a <a href="http://stackoverflow.com/questions/419163/what-does-if-name-main-do"><code>if __name__ == "__main__":</code> guard</a> to ensure you can import this module from another script.</li>
<li>Used the fact that <code>input</code> already returns a string (in Python 3).</li>
<li>Added <a href="http://docs.python-requests.org/en/master/api/#requests.Response.raise_for_status" rel="nofollow noreferrer"><code>r.raise_for_status()</code></a> so that the code raises an exception if the request does not succeed.</li>
<li>Consistently followed Python's official style-guide, <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP8</a>.</li>
<li>Used the usually faster <a href="https://lxml.de/installation.html" rel="nofollow noreferrer"><code>lxml</code> parser</a>.</li>
<li><a href="https://nedbatchelder.com/text/iter.html" rel="nofollow noreferrer">Iterate over the elements instead of the indices</a>.</li>
<li>Used the recently introduced <a href="https://www.python.org/dev/peps/pep-0498/" rel="nofollow noreferrer"><code>f-string</code></a> to make the formatting easier.</li>
<li>Used <code>str.strip</code> instead of hardcoding indices for the duration.</li>
<li>Made the functions do all the cleanup.</li>
</ul>
    </div>