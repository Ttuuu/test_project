<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p><code>OnStart</code> and <code>OnEnd</code> should be called from <code>Main</code>.</p></li>
<li><p>Although, I am a proponent of using single letter iterates in simple <code>For</code> loops, I think that <code>i</code> should have a more descriptive name like <code>pageIndex</code>.</p>

<blockquote>
<pre><code>Navigate pageIndex, appIE, keyword
</code></pre>
</blockquote></li>
<li><code>Sleep</code> - A common subroutine used across many programming languages. 
I see no reason to wrap it in <code>WaitSomeMilliseconds()</code>.  You could even give it a default value.

<blockquote>
<pre><code>Public Declare PtrSafe Sub Sleep Lib "kernel32" (Optional ByVal dwMilliseconds As LongPtr = 1000)
</code></pre>
</blockquote></li>
<li>I don't see any reason to use <code>Sleep</code> in the first place.  I would use <code>appIE.readyState &lt;&gt; READYSTATE_COMPLETE</code> instead because the only thing that you are waiting on is the Page to load.  There is no lazy loading or controls to be clicked.

<blockquote>
<pre><code>Const READYSTATE_COMPLETE = 4
While appIE.readyState &lt;&gt; READYSTATE_COMPLETE
</code></pre>
</blockquote></li>
<li><code>PageWithResultsExists()</code> - Probably the biggest reason for the slow code.  The way the code is structured it runs until a page is called that has no data and checks that page for 10 seconds.  The last link in the Paginator class name is <code>pagnDisabled</code>.  You can get the last page number by checking its <code>innerText</code>.</li>
<li><code>WriteToExcel()</code> - Why?  This just adds an extra layer of complexity and slows down the code.  Simply process the data in memory.</li>
<li><code>MakeURL()</code> - I know getters are pretty boring but I would still use <code>getURL()</code>.  No big deal though.</li>
<li><code>WriteFormulas()</code> - You should write all the formulas at once after all the data is processed.</li>
<li><p><code>GetPrice()</code> - There is no distinction made between Paperback, Hardcover or Kindle.  I would expand the dataset to include all the categories; so that you are not comparing apples to oranges.</p></li>
<li><p>Microsoft HTML Object Library - This library is very convenient when working with HTML.  Since there is only one version of the library, I would take advantage of early binding and intellisense by setting a reference to it. </p></li>
</ul>

<p><a href="https://i.stack.imgur.com/MU28p.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/MU28p.png" alt="Microsoft HTML Object Library"></a></p>

<p>I only use Internet Explorer which I need to process events, I prefer <code>XMLHTTP</code>.  </p>

<h2>Sample Userform</h2>

<p>The Userform should have a single Textbox with multiline set to true.  When ran the code parses 20 pages of results asynchronously in under 12 seconds.  The code is unrefined. It is just a proof of concept.</p>

<pre><code>Option Explicit
Const READYSTATE_COMPLETE = 4

Private Sub UserForm_Initialize()
    Dim t As Double: t = Timer
    TextBox1.Text = Join(getBooks("VBA").ToArray, vbNewLine)
    Debug.Print Round(Timer - t, 2)
End Sub

Function getDocument(URL As String) As MSHTML.HTMLDocument
    Dim document As MSHTML.HTMLDocument
    With CreateObject("MSXML2.XMLHTTP")
        'open(bstrMethod As String, bstrUrl As String, [varAsync], [bstrUser], [bstrPassword])
        .Open bstrMethod:="GET", bstrUrl:=URL, varAsync:=False
        .send
        If .readyState = READYSTATE_COMPLETE And .Status = 200 Then
            Set document = New MSHTML.HTMLDocument
            document.body.innerHTML = .responseText
            Set getDocument = document
        Else
            MsgBox "URL:  " &amp; vbCrLf &amp; "Ready state: " &amp; .readyState &amp; vbCrLf &amp; "HTTP request status: " &amp; .Status, vbInformation, "URL Not Responding"
        End If
    End With
End Function

Function getBooks(keyword As String) As Object
    Dim server As Object, servers As Object
    Dim document As MSHTML.HTMLDocument, documents As Object
    Set servers = CreateObject("System.Collections.ArrayList")
    Set documents = CreateObject("System.Collections.ArrayList")

    Dim URL As String
    URL = MakeUrl(1, keyword)

    Set document = getDocument(URL)

    documents.Add document

    Dim pageindex As Long
    For pageindex = 2 To getPageCount(document)
        URL = MakeUrl(pageindex, keyword)
        Set server = CreateObject("MSXML2.XMLHTTP")
        server.Open bstrMethod:="GET", bstrUrl:=URL, varAsync:=True
        server.send
        servers.Add server
    Next

    For Each server In servers
        While server.readyState &lt;&gt; READYSTATE_COMPLETE
            DoEvents
        Wend

        If server.Status = 200 Then
            Set document = New MSHTML.HTMLDocument
            document.body.innerHTML = server.responseText
            documents.Add document
        End If

    Next

    Dim books As Object
    Set books = CreateObject("System.Collections.ArrayList")

    Dim ul As HTMLUListElement
    Dim li As HTMLLIElement

    For Each document In documents
        Set ul = document.getElementById("s-results-list-atf")

        If Not ul Is Nothing Then
            For Each li In ul.getElementsByTagName("LI")
                books.Add li.innerText
            Next
        End If
    Next

    Set getBooks = books
End Function

Function getPageCount(document As HTMLDocument) As Long
    Dim element As HTMLGenericElement
    Set element = document.querySelector(".pagnDisabled")
    If Not element Is Nothing Then getPageCount = CInt(element.innerText)
End Function

Public Function MakeUrl(i As Long, keyword As String) As String
    MakeUrl = "https://www.amazon.com/s/ref=sr_pg_" &amp; i &amp; "?rh=i%3Aaps%2Ck%3A" &amp; keyword &amp; "&amp;page=" &amp; i &amp; "&amp;keywords=" &amp; keyword
End Function
</code></pre>
    </div>