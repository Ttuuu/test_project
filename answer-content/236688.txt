<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Long name</h3>

<p><code>ThorsAnvil::Util::getRandomIteratorFromContainer</code> is a really long name. I suggest something like <code>getRandomElement</code> or even <code>randomElement</code>.</p>

<h3>Unnecessary function</h3>

<p><code>getDist</code> seems kind of unnecessary to me. I think it would be cleaner to construct the distribution directly.</p>

<pre><code>std::uniform_int_distruction&lt;int&gt; dist{0, container.size() - 1};
</code></pre>

<h3>Types</h3>

<p>The integer type used for iterator arithmetic is <code>typename C::difference_type</code>. This is almost always equivalent to <code>std::ptrdiff_t</code> so to be crystal clear, use <code>std::ptrdiff_t</code>.</p>

<pre><code>std::uniform_int_distruction&lt;std::ptrdiff_t&gt; dist{0, container.size() - 1};
</code></pre>

<h3>Unnecessary variable</h3>

<p><code>offset</code> is initialized with a random offset and is only used once. If it's only used once then it doesn't really need to exist.</p>

<pre><code>std::advance(pos, dist(generator));
</code></pre>

<h3>Wrong function</h3>

<p><code>std::advance</code> modifies an existing iterator. This means that we need store the iterator, advance it, then return the iterator. That's three steps. <code>std::next</code> takes an iterator and returns an incremented one.</p>

<pre><code>return std::next(container.begin(), dist(generator));
</code></pre>

<h3>Covering all cases</h3>

<p>Using <code>.begin()</code> and <code>.size()</code> is a little bit restrictive. If we use <code>std::begin</code> and <code>std::size</code>, this function will work on C-style arrays which is a nice. If we want to be even more general (as Toby mentioned in the comments), we can let ADL pick up the right function for containers that declare their own <code>begin</code> and <code>size</code> functions.</p>

<pre><code>using std::begin;
using std::size;
</code></pre>

<h3>Short names</h3>

<p>My answer has been pretty nitpicky so far but this is particularly nitpicky. Long template parameter names that clearly describe the parameter are better than single character names.</p>

<pre><code>template &lt;typename Container, typename Generator&gt;
</code></pre>

<h3>How I would write it</h3>

<p>After applying the above transformations. We get this function:</p>

<pre><code>template &lt;typename Container, typename Generator&gt;
auto random_element(Container &amp;con, Generator &amp;gen) {
  using std::begin;
  using std::size;
  std::uniform_int_distribution&lt;std::ptrdiff_t&gt; dist{0, size(con) - 1};
  return std::next(begin(con), dist(gen));
}
</code></pre>
    </div>