<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In general in F# we try to minimize the use of explicit type declaration on function arguments:</p>

<pre><code>let left (node: Node&lt;'a&gt;) = node.Left
</code></pre>

<p>becomes</p>

<pre><code>let left node = node.Left
</code></pre>

<p>etc.</p>

<hr>

<p>The function <code>insertNode</code> violates the single responsibility principle in that if <code>root =  None</code> then it creates a new tree/root node instead of actual inserting the value.</p>

<p>Personal I wouldn't allow <code>root</code> to be <code>Option/None</code></p>

<p>Instead I would provide a function called <code>newTree</code> taking a <code>'a</code> value as argument and returning a <code>Node&lt;'a&gt;</code></p>

<hr>

<blockquote>
  <p><code>let rec insertNode (root: Node&lt;'a&gt; option) (nextValue: 'a) : Node&lt;'a&gt; = ...</code></p>
</blockquote>

<p>In general you should have object in question of the module as the last argument of a function in order to make use of the pipe operator:</p>

<pre><code>let rec insertNode value root =...

root |&gt; BinarySearchTree.insertNode value
</code></pre>

<hr>

<p><code>sortedData</code> seems overly complicated - maybe from the use of <code>List.sort</code>. In principle it's just a depth-first-search (dfs), where you for each node can concatenate the values in the left child node with the value of the node itself concatenated with the values in the right child node:</p>

<p>For a list it could be:</p>

<pre><code>let toList root =
    let rec dfs optNode =
        match optNode with
        | Some node -&gt; (dfs (left node))@(data node::dfs (right node))
        | None -&gt; []

    dfs (Some root)
</code></pre>

<p>Or if you prefer a Sequence (which I do):</p>

<pre><code>let toSeq root =
    let rec dfs optNode =
        match optNode with
        | Some node -&gt; seq {
            yield! dfs (left node)
            yield data node
            yield! dfs (right node)
            }
        | None -&gt; Seq.empty

    dfs (Some root)
</code></pre>

<p>I call the functions <code>toList</code> and <code>toSeq</code>. Maybe <code>toOrderedList/Seq</code> are better names.</p>

<hr>

<p>You could consider to extend the <code>List</code>-module with a <code>toBinaryTree items</code> instead of the <code>create items</code> function. That way it is possible to write:</p>

<pre><code>let data = [ 5; 8; 1; 5; 1; 2; 2; 4; 6; 3 ]
let root = data |&gt; List.toBinaryTree
</code></pre>

<p>which may be more intuitive</p>

<hr>

<p>In the <code>create items</code> function you should consider to sort the items and do a binary insertion in order to create a balanced tree, because if you provide a list of items that is sorted then your function will merely produce a singly linked list of nodes using only one of the child nodes instead of a tree.</p>

<p>You should consider to provide a function that can balance an existing tree.</p>

<hr>

<p>As an alternative to the <code>Node&lt;'a&gt;</code> type as a record type, you could consider to define it as a discriminated union type with the following definition:</p>

<pre><code>type Node&lt;'a&gt; =
    | Empty
    | Node of Data:'a * Left:Node&lt;'a&gt; * Right:Node&lt;'a&gt;
</code></pre>

<p>That is more in line with the functional style of F# and your functions become somewhat more simple and intuitive:</p>

<pre><code>module BinaryTree =

let data = function Empty -&gt; failwith "Empty Tree" | Node (d, _, _) -&gt; d
let left = function Empty -&gt; Empty | Node (_, l, _) -&gt; l
let right = function Empty -&gt; Empty | Node (_, _, r) -&gt; r

let first root = 
    let rec goLeft node =
        match node with
        | Empty -&gt; None
        | Node (d, ln, _) -&gt;
            match ln with
            | Empty -&gt; Some d
            | Node _ -&gt; goLeft ln

    goLeft root

let last root = 
    let rec goRight node =
        match node with
        | Empty -&gt; None
        | Node (d, _, rn) -&gt;
            match rn with
            | Empty -&gt; Some d
            | Node _ -&gt; goRight rn

    goRight root

let rec insert data root =
    match root with
    | Empty -&gt; Node(data, Empty, Empty)
    | Node (d, l, r) -&gt;
        match data &lt;= d with
        | true -&gt; Node (d, l |&gt; insert data, r)
        | false -&gt; Node (d, l, r |&gt; insert data)

let toOrderedSeq root =
    let rec dfs node =
        match node with
        | Empty -&gt; Seq.empty
        | Node (d, ln, rn) -&gt; seq {
                yield! dfs ln
                yield d
                yield! dfs rn
            }

    dfs root


module List =
    let toBinaryTree data = data |&gt; List.fold (fun n x -&gt; n |&gt; BinaryTree.insert x) Empty
</code></pre>

<p>As seen, the use of <code>option</code> is unnecessary and the <code>insert</code> function is consistent, because an <code>Empty</code> node as <code>root</code> is also a <code>Node&lt;'a&gt;/Tree</code> - just without any elements.</p>
    </div>