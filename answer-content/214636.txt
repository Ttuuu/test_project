<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>An OOP suggestion by way of analogy:</p>

<p>Consider a <code>Document</code> and a <code>Cabinet</code>. Should a <code>Document</code> know how to put a copy of itself in a <code>Cabinet</code>? Or should a <code>Cabinet</code> know how to copy a document into itself?</p>

<p>In a small program, either is probably fine. However, it will become unmaintainable as more ways for them to interact are added as the system grows in complexity.</p>

<p>When that happens, there should be an actor at a higher abstraction level, e.g. a "secretary" that makes a copy (perhaps by requesting it via <code>Document#copy</code>) and files the copy into the cabinet (perhaps by requesting it of the <code>Cabinet#file</code>). In their respective isolated context, they don't need to interact or know about each other, so their implementations would not contain references to each other.</p>

<p>If there is only ever "one secretary", just leave the action at the top level abstraction -- the main program. As complexity grows, perhaps a <code>Secretary</code> class can be defined.</p>

<p>However, remember that <code>Secretary</code>'s actions are the higher abstraction and <code>Document</code> is a lower abstraction. The dependency directionality is important. A <code>Document</code> shouldn't be imposing a <code>Secretary</code> to act.</p>

<p><strong>Where this applies to your code:</strong></p>

<ol>
<li><code>export</code>

<ul>
<li><code>FillablePdfForm</code> is the Document</li>
<li><code>PdfForms</code> is the Cabinet</li>
<li>problem: <code>FillablePdfForm#export</code> is the Document putting itself in the Cabinet</li>
</ul></li>
<li><code>fill_form_with_data</code>

<ul>
<li><code>field_data</code> and <code>FormStack::Form</code> are the Documents</li>
<li><code>PdfScrie</code> is the Cabinet</li>
<li>problem: <code>PdfScrie#fill_form_with_data</code> is the Cabinet putting the Document in itself</li>
</ul></li>
</ol>

<p>By the way, this concept is the <a href="https://en.wikipedia.org/wiki/Dependency_inversion_principle" rel="nofollow noreferrer">D</a> in <a href="https://en.wikipedia.org/wiki/SOLID" rel="nofollow noreferrer">SOLID</a></p>

<p>Another issue is where <code>FillablePdfForm#template_path</code> calls <code>which_application</code>, which is implemented in the subclass <code>Scrie</code>, which the <a href="https://en.wikipedia.org/wiki/Liskov_substitution_principle" rel="nofollow noreferrer">L</a> in SOLID talks about.</p>

<p>The Wikipedia articles are a little thick to get through though, Google around for some alternative explanations of each of the SOLID principles.</p>
    </div>