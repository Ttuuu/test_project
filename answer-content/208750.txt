<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'll take time to review just one of the APIs which I find is the most confusing one:</p>

<blockquote>
<pre><code>public void Validate(TRow row)
{
    this.ValidationErrors = new List&lt;ValidationError&gt;();

    foreach (var method in this.methods)
    {
        bool condition = true;
        if (method.Condition != null)
        {
            condition = method.Condition(row);
        }

        if (condition)
        {
            bool ok = method.ToCheck(row);
            if (!ok)
            {
                this.ValidationErrors.Add(ValidationError.Failure(this.fieldName,this.MessageErrorFactory(row, method)));

                break; // by default breaks if error
            }
        }
    }
}
</code></pre>
</blockquote>

<p>This method does some very strange things:</p>

<ul>
<li>calls <code>.Condition</code> that returns a <code>condition</code></li>
<li>if <code>condition</code> is <code>true</code> then <code>ToCheck</code> returns a <code>bool</code> and if that one is <code>false</code> the validation failes</li>
<li>stops evaluating other methods on first error without any particular reason</li>
</ul>

<p>There is not a single helpful name here. Every single line just makes it worse. But at least you have commented these APIs so that one can look there for an explanation:</p>

<blockquote>
<pre><code>/// &lt;summary&gt;
/// Gets or sets a condition prior to check if property value is valid.
/// &lt;/summary&gt;
public Func&lt;TRow, bool&gt; Condition { get; set; }
</code></pre>
</blockquote>

<p>OK, I understand it's a <em>pre-validation-condition</em> but why do we need this at all? This should be part of the validation logic. A value is either valid or not. This puts it somehow inbetween. One could argue that it's <em>inconclusive</em> when <code>Condition</code> is <code>false</code> but I'd say if it's not invalid then it's valid. How else would I handle the <em>inconclusive</em> state?</p>

<p>I would remove this step or if you <em>insist</em> on keeping it than you should rename it to something like <code>CanValidate</code>.</p>

<blockquote>
<pre><code>/// &lt;summary&gt;
/// Gets or sets a method to check if property value is valid.
/// &lt;/summary&gt;
public Func&lt;TRow, bool&gt; ToCheck { get; set; }
</code></pre>
</blockquote>

<p>This API also needs to be changed. Since this is the actual validation method then you should name it <code>IsValid</code>.</p>

<blockquote>
<pre><code>break; // by default breaks if error
</code></pre>
</blockquote>

<p>There is still this unexplained <code>break</code>. I see what it's doing so this comment does not help me to understand the logic. You need to tell the reader <strong>why</strong> this is the default. To me, a casual reader, it's simply weird that it cannot continue with other checks.</p>

<p>When you apply these suggestions and squeeze the conditions together then the method can be shortend to this nice LINQ:</p>

<pre><code>public void Validate(TRow row)
{
    ValidationErrors = 
        (
            from method in methods
            where method.CanValidate(row) &amp;&amp; !method.IsValid(row)
            select ValidationError.Failure(fieldName, MessageErrorFactory(row, method))
        ).ToList();
}  
</code></pre>
    </div>