<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Why do you make your arrays only 10 elements large when the task explicitly says 20?</p>

<p>Even worse, you don't protect the program from writing outside the array. The C programming language doesn't protect against this wrong behavior, therefore you as the programmer must do this.</p>

<p>Before every write to an array you must check that the array index is valid. For example:</p>

<pre><code>assert(0 &lt;= idx &amp;&amp; idx &lt; arr_len);
arr[idx] = value;
</code></pre>

<p>Only if you can prove mathematically that the <code>assert</code> condition is always true, can you leave out the <code>assert</code>. Follow this advice, and your programs will be better than 80% of the existing C programs.</p>

<hr>

<p>To reduce the complexity of the <code>main</code> function, you should define a function like this:</p>

<pre><code>bool intarray_contains(const int *arr, size_t arr_len, int value) {
    ...
}
</code></pre>

<p>Then you don't need to write this code in <code>main</code>.</p>

<hr>

<p>After that, to ensure that your program works correctly (it currently doesn't), you should extract the calculation into a separate function:</p>

<pre><code>int min_not_present_in(const int *arr1, size_t arr1_len, const int *arr2, size_t arr2_len) {
    ...
}
</code></pre>

<p>This function definition allows you to do the calculation without entering the values every time. Like this:</p>

<pre><code>int positive[] = { 1, 2, 3 };
int odd[] = { 1, 3, -1 };
int even[] = { -2, 0, 2 };

assert(min_not_present_in(positive, 3, odd, 3) == 2);
assert(min_not_present_in(positive, 3, even, 3) == 1);
</code></pre>

<p>To make all this work, you need the following lines at the top of your file:</p>

<pre><code>#include &lt;assert.h&gt;
#include &lt;stdbool.h&gt;
</code></pre>
    </div>