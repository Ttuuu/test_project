<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>static std::ofstream debuggStream("DebugLog.txt"); // remove for release
</code></pre>
</blockquote>

<p>This could possibly be wrapped in <code>#ifdef DEBUG</code>. Alternatively you could use a logging library for finetuned logging needs. Personally I like <a href="https://github.com/gabime/spdlog" rel="nofollow noreferrer">spdlog</a>.</p>

<hr>

<p>I think the name <code>Memory</code> is a bit misleading (probably just me though). I'd prefer something like <code>MemoryGame</code>.</p>

<hr>

<blockquote>
<pre><code>MenuScreen::MenuScreen(ModelData&amp; data, GameScreen&amp; game, sf::Font&amp; font) :
data{ data },
game{ game },
font{ font }
</code></pre>
</blockquote>

<p>Not a fan of your formatting for this. A better (IMO) way  to format this would be:</p>

<pre><code>MenuScreen::MenuScreen(ModelData&amp; data, GameScreen&amp; game, sf::Font&amp; font) 
    : data{ data }
    , game{ game } 
    , font{ font }
</code></pre>

<p>This way the respective entries nicely line up and are easier to read and edit.</p>

<hr>

<blockquote>
<pre><code>for (std::vector&lt;sf::Text&gt;::iterator string = pairString.begin(); string != pairString.end(); ++string)
</code></pre>
</blockquote>

<p>Does SFML not play nice with ranged for loops or why are you using the clunky iterator version? You use this version more than once.<br>
In this instance I'm also not happy about the name <code>string</code>. Although not wrong it looks strange to me and I'd choose a different name. Maybe something that also conveys a bit of info like <code>menu_string</code> perhaps?</p>

<hr>

<p>The way you do things in <code>trackMouse</code> doesn't seem efficient to me. However I'm not totally sure how to do it better.<br>
One idea I had was to use a map and then just iterate. I'm just not very sure this is better or even feasible but for what it's worth, here is what I'd try (<em>very</em> untested):</p>

<pre><code>std::map&lt;sf::RectangleShape, bruglesco::menuMouseIn&gt; const static mapping
{
    {playButton, bruglesco::menuMouseIn::play},
    {sixPairs, bruglesco::menuMouseIn::six},
    {eightPairs, bruglesco::menuMouseIn::eight},
    {twelvePairs, bruglesco::menuMouseIn::twelve},
    {sixPairs, bruglesco::menuMouseIn::sixteen},
};

for (auto const&amp; element : mapping)
{
    if (element.first.getGlobalBounds().contains(mousePos))
    {
        mouseIn = element.second;
    }
}
</code></pre>

<p>This way you save the code duplication in the countless if branches. As I said I'm not sure this will even work and it's probably quite a bit of overhead anyways.</p>
    </div>