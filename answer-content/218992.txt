<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Performance improvement</strong></p>

<p>A key attribute concerning <em>hashing</em>, <code>capacity</code> and doubling the table size <code>*= 2</code>: <strong>primes</strong></p>

<p>The hash table index calculation has 2 stages: <code>hash_func()</code> and <code>% capacity</code>.</p>

<p>A poor or modest <code>hash_func()</code> is <em>improved</em> when modded by a prime.  A prime will not harm a good hash function.  Modding by a power-of-2 is the worst as it simply becomes a bit mask discarding many distinguishing bits from <code>hash_func()</code>.</p>

<p><a href="https://stackoverflow.com/a/32915815/2410359">Better</a> to use capacities that are primes in the <code>%</code> step.</p>

<p>Instead of <code>capacity *= 2</code>, form a table of "primes" just under a power of 2: <code>static const size_t capacity[] = 0,1,3,7,13,31,61, ... near SIZE_MAX;</code>.</p>

<p>Use a member <code>.capacity index</code> into that table and increment as needed.</p>

<pre><code>struct array {
    size_t size;
    unsigned char capacity_index;  // Or some small type.
    int* contents;
};
</code></pre>
    </div>