<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>To be frank, I'm not sure it really is a <code>Maybe</code> implementation. It's actually not very different from a smart pointer (well, maybe not that smart since the destructor deletes the underlying value twice, as @user673679 points out :). By the way I don't think that a smart pointer -or any pointer- is a bad approximation of the Haskell <code>Maybe</code> type: it can be either <code>nullptr</code> (<code>Nothing</code>) or pointing to some value (<code>Just some_value</code>). Of course, <code>std::optional</code> would probably be more efficient, since it stores the optional value on the stack, but I don't believe it's a conceptual leap towards <code>Maybe</code> either: the real difference between pointers and <code>std::optional</code> on the one hand, and <code>Maybe</code> on the other hand is that <code>Maybe</code> is a sum type, that is a type that can be either one of different types, whereas pointers or <code>std::optional</code> are types with a well-defined null/void value.</p>

<p>Implementing sum types in C++ is rather difficult. The standard library's sum type -<code>std::variant</code>- is rather cumbersome and has drawn convincing <a href="https://bitbashing.io/std-visit.html" rel="nofollow noreferrer">complaints</a>. But it's also a path to a lot more power than you could reach with pointers or optional: they can be a good approximation of <code>Maybe</code>, but not of <code>Either</code>, for instance, which isn't fundamentally different though, and a lot more powerful.</p>

<p>So what would <code>Maybe</code> as a sum type look like in C++? I would say something like:</p>

<pre><code>#include &lt;variant&gt;

struct Nothing {};

template &lt;typename T&gt;
struct Just {
    Just(const T&amp; t) : value(t) {}
    Just(T&amp;&amp; t) : value(t) {}
    Just() = default;

    T value;   
};

template &lt;typename T&gt;
using Maybe = std::variant&lt;Nothing, Just&lt;T&gt;&gt;;
</code></pre>

<p>So, how would you use it then? Creating one looks very much like what you did:</p>

<pre><code>Maybe&lt;char&gt; letter(int i) {
    if (i &gt;= 0 &amp;&amp; i &lt; 26) return Just&lt;char&gt;('A' + i);
    return Nothing();
}
</code></pre>

<p>Now, what can you do with it? <code>Maybe</code> is a functor in the Haskell sense, so you need a way to map a function onto it. The Haskell signature is : <code>(a -&gt; b) -&gt; F a -&gt; F b</code>. The C++ implementation would be along the lines:</p>

<pre><code>template &lt;typename Fn, typename T&gt;
auto fmap(Fn fn, const Maybe&lt;T&gt;&amp; mb) {

    using return_type   = decltype(fn(std::declval&lt;T&gt;()));    

    auto visitor = [fn](auto&amp;&amp; arg) -&gt; Maybe&lt;return_type&gt; 
    {
        using Type = std::decay_t&lt;decltype(arg)&gt;;
        if constexpr(std::is_same_v&lt;Type, Nothing&gt;) return Nothing();
        else return Just&lt;return_type&gt;(fn(arg.value));
    };

    return std::visit(visitor, mb); 
      /* visit is the *apply* you're looking for: given a visitor with 
         overloads for any type the variant can contain a value of, it 
         will apply the correct overload on the value it contains */
}
</code></pre>

<p>Now Maybe is also a monad. If you want to implement the <code>&gt;&gt;=</code> (aka <code>bind</code>), whose signature in Haskell is <code>(a -&gt; M b) -&gt; M a -&gt; M b</code>, it isn't very different:</p>

<pre><code>template &lt;typename Fn, typename T&gt;
auto bind(Fn fn, const Maybe&lt;T&gt;&amp; mb) {

    using return_type = decltype(fn(std::declval&lt;T&gt;()));    

    auto visitor = [fn](auto&amp;&amp; arg) -&gt; return_type 
    {
        using Type = std::decay_t&lt;decltype(arg)&gt;;
        if constexpr(std::is_same_v&lt;Type, Nothing&gt;) return Nothing();
        else return fn(arg.value);
    };

    return std::visit(visitor, mb);
}
</code></pre>

<p>Here's a <a href="https://wandbox.org/permlink/P3lXkzuKq6FQs58C" rel="nofollow noreferrer">link</a> to those few snippets of code if you feel like exploring that vein.</p>
    </div>