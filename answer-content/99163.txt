<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You do this:</p>

<pre><code>for i in range(len(prime_list)):
    x = prime_list[i]
</code></pre>

<p>and then don't use <code>i</code> again. So this can just be <code>for x in prime_list:</code>. Similarly in the <code>j</code> loop.</p>

<p>Just below that, this test:</p>

<pre><code>if result == number: break
</code></pre>

<p>It's usually preferred to put the <code>break</code> on a new line. </p>

<p>You test this condition twice in a row - to break out of the inner <code>for</code> loop at the bottom of it and then again here. Instead of repeating yourself like that, use <a href="https://docs.python.org/3.4/library/itertools.html#itertools.product" rel="nofollow"><code>itertools.product</code></a> to write them as one loop:</p>

<pre><code>import itertools as it    
...
for x, y in it.product(prime_list, repeat=2):
    ...
    if result == number:
        break
</code></pre>

<p>To save another level of nesting, you can reverse this condition at the top:</p>

<pre><code>if not number % 2:
</code></pre>

<p>to:</p>

<pre><code>if number % 2:
    return 0, 0

x, y = 0, 0
</code></pre>

<p>This emphasises that you don't do any work in that case. You might want to add a short comment about <em>why</em> you don't need to. From your title, it sounds like you might want to treat this as an error condition and do this:</p>

<pre><code>if number % 2:
    raise ArgumentError("Expected an even number")
</code></pre>

<p>Then you can move your <code>return</code> inside the <code>for</code> loop, in place of the <code>break</code>. At that point, continuing the search to find all pairs is trivial: change the <code>return</code> to a <code>yield</code>, and your function will become a <em>generator</em> that will keep yielding every pair that works until it has exhausted the search space.</p>

<p>This outer loop:</p>

<pre><code>while result != number:
</code></pre>

<p>looks unneeded and possibly buggy. If the conjecture is true, you will find a pair, return it, and this will not be tested again. If you find a counter-example disproving the conjecture, then this would just do the whole search again giving you an infinite loop instead of fame and fortune. If you change it to <code>yield</code> each pair instead of returning the first one, this will repeat the full sequence indefinitely unless the very last pair tested happens to work. I would just drop it.</p>
    </div>