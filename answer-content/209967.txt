<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>The company told me that this was not good enough, so I would like to get feedback about what's wrong and how to improve it.</p>
</blockquote>

<p>Fundamentally, you have to ask them. We can give your our thoughts, but it might come down to company culture / style.</p>

<hr>

<blockquote>
<pre><code>    class Program
    {
        static void Main(string[] args)
        {
            var game = new Game();

            game.Roll(1);
            ...
            game.Roll(6);

            Console.WriteLine("Score: " + game.Score());
</code></pre>
</blockquote>

<p>To be honest, I'd prefer to submit the class with no tests whatsoever than with this "test". It's very long-winded (why not use a loop for the rolls?) and doesn't even compare the observed score with the expected score.</p>

<p>Better, though, would be to provide a test suite using a proper test framework (NUnit, Microsoft.VisualStudio.TestTools.UnitTesting, ...) with a series of tests to cover the corner cases and comments to show what corner cases they cover: at least the exceptions, scenarios with and without an extra roll in the last frame, and the maximum score.</p>

<hr>

<p>My personal opinion is that the code is very complicated for the task it does. The scoring could be implemented without a separate method to calculate the bonus and with a single loop: it just needs variables to indicate whether the previous ball was a normal throw, a spare, or a strike; and whether the ball before that was a strike or not. Then on the basis of those variables you multiply the score for the current ball by 1, 2, or 3. If the person assessing the code was an architecture astronaut you're probably fine; if they were an optimisation obsessive then this might count quite heavily in their assessment.</p>

<hr>

<blockquote>
<pre><code>        public List&lt;int&gt; RollResults { get; } = new List&lt;int&gt;();
</code></pre>
</blockquote>

<p>It's a read-only property which can be freely modified. Prefer to expose <code>IReadOnlyList&lt;T&gt;</code> so that all modification has to be done by calling methods on the class.</p>

<hr>

<blockquote>
<pre><code>            if (!isLastFrame &amp;&amp; RollResults.Count == 2 || 
                isLastFrame &amp;&amp; RollResults.Count == 2 &amp;&amp; !extraRollAllowed ||
                RollResults.Count &gt; 2)
            {
                throw new InvalidOperationException($"Can't register more than {RollResults.Count} rolls in this frame");
            }
</code></pre>
</blockquote>

<p><a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself" rel="nofollow noreferrer">DRY</a>. The condition should be <code>if (IsClosed)</code> - and if it isn't, I suspect a bug.</p>

<hr>

<p>There are other things I would do differently, but that's questions of style and shouldn't matter in an interview unless you've been given a style document to follow. The first two points are my best guess as to why the company rejected the code. The other two are minor points - they might count against you in comparison against another candidate, but I wouldn't expect them to disqualify you.</p>
    </div>