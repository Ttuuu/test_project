<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I see some things that may help you improve your code.</p>

<h2>Don't leak memory</h2>

<p>I see that there are a number of places in which <code>new</code> is invoked but there is no corresponding <code>delete</code>.  For example, one leak can be addressed by adding this destructor:</p>

<pre><code>Minefield::~Minefield() {
    delete mCellInputHandler;
}
</code></pre>

<h2>Put <code>friend</code> declarations in <code>public</code> section</h2>

<p>It's misleading to put a <code>friend</code> declaration (as in <code>friend class CellInputHandler</code> in <code>cell.h</code>) in a <code>private</code> section.  Because access specifiers have no effect on <code>friend</code> declarations, any <code>friend</code> designation is essentially public.  For this reason, I advocate always putting <code>friend</code> declarations in <code>public</code> sections.</p>

<h2>Write code for human comprehension</h2>

<p>The <code>Cell</code> constructor has this peculiar line:</p>

<pre><code>mHasMine{ static_cast&lt;bool&gt;(state) },
</code></pre>

<p>I had to look up the definition of <code>state</code> and found this:</p>

<pre><code>enum class State{
    empty,
    mine
};
</code></pre>

<p>Rather than relying on an unintuitive <code>static_cast</code>, I would suggest instead writing this:</p>

<pre><code>  mHasMine{ state == State::mine },
</code></pre>

<h2>Put static initializers into declaration</h2>

<p>When you have a class that has a member data items that are initialized to constants (as with <code>Cell</code>), I recommend using in-class initializers instead of explicitly listing them as part of the constructor.  See <a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Rc-in-class-initializer" rel="nofollow noreferrer">C.48</a> for details.</p>

<h2>Prefer a <code>switch</code> to long <code>if</code> chain</h2>

<p>In the <code>CellInputHandler::eventFilter()</code> we have this code:</p>

<pre><code>if(event-&gt;type() == QEvent::MouseButtonPress){
    handleMouseButtonPressEvents(watched, event);
    return true;
}
if(event-&gt;type() == QEvent::MouseButtonRelease){
    handleMouseButtonReleaseEvents(watched, event);
    return true;
}
if(event-&gt;type() == QEvent::MouseMove) {
    handleMouseMoveEvents(event);
    return true;
}
return false;
</code></pre>

<p>I would suggest instead writing it like this:</p>

<pre><code>bool result{true};
switch (event-&gt;type()) {
    case QEvent::MouseButtonPress:
        handleMouseButtonPressEvents(watched, event);
        break;
    case QEvent::MouseButtonRelease:
        handleMouseButtonReleaseEvents(watched, event);
        break;
    case QEvent::MouseMove:
        handleMouseMoveEvents(event);
        break;
    default:
        result = false;
}
return result;
</code></pre>

<p>The resulting object code is likely to be very similar, but it has an advantage for human comprehension.  First, it's easy to see that only a single value is being interrogated.  Second, there is a single <code>return</code> which, to me, makes it simpler for readers of the code to understand the flow.</p>

<h2>Rethink your event handler</h2>

<p>The typical approach in Qt is to have each object handle its own events.  Since <code>Minefield</code> is derived from <code>QWidget</code>, I would have expected that it would have an <code>event</code> handler.  Instead we have the separate <code>CellInputHandler</code> implemented as an <code>EventFilter</code>.  I would suggest that the events handled within <code>CellInputHandler</code> would be better expressed as part of the <code>event()</code> override function in <code>Minefield</code>.  </p>

<p>Even better, however, would be to eliminate that completely and simply let the <code>Cell</code> objects handle their own events.  Let's consider the scenario you mentioned:</p>

<ol>
<li>press left mouse button on Cell A and hold it.</li>
<li>Move out of Cell A -&gt; Cell A gets "unpressed" on move out</li>
<li>Move into Cell B -&gt; Cell B gets "pressed"</li>
</ol>

<p>All that's needed is to provide handlers for <code>QEvent::Enter</code> and <code>QEvent::Leave</code>.  Pseudocode:</p>

<pre><code>Enter: 
   if LeftMouseButtonDown, call LeftMouseButtonDown handler

Leave:
    if LeftMouseButtonDown, restore to normal state
</code></pre>

<p><strong>Note</strong>: Unfortunately, as pointed out in the comment, this doesn't actually work out of the box because a <code>QWidget</code> does a <code>grabMouse()</code> on mouse button press events.  However, I suspect that one could issue an explicit <code>releaseMouse()</code> call from within the handler and still keep this approach. I may experiment with that if I get some time.</p>

<h2>Encapsulate more</h2>

<p>I don't think there's much reason for any class other than <code>Minefield</code> to know about individual <code>Cell</code>s.  Therefore, I'd suggest changing the interface so that <code>Minefield</code>'s constructor is only give a width and height and all <code>Cell</code> creation and further handling would be inside the class.</p>
    </div>