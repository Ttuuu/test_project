<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As always, I recommend using <a href="https://github.com/rust-lang/rust-clippy#as-a-cargo-subcommand-cargo-clippy" rel="nofollow noreferrer">clippy</a> for help. Running it, we get the following output:</p>

<pre><code>warning: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`
   --&gt; src/main.rs:188:9
    |
188 | /         match output_file.write_all(info.as_bytes()) {
189 | |             Err(why) =&gt; panic!("\ncouldn't write to file: {}", why),
190 | |             Ok(_) =&gt; (),
191 | |         }
    | |_________^ help: try this: `if let Err(why) = output_file.write_all(info.as_bytes()) { panic!("\ncouldn't write to file: {}", why) }`
</code></pre>

<p>So that's the first change we can make.</p>

<pre><code>/**
 * # CSV Sorter
 *
 * ## Author: Daniel Hammer
 *
 * ### Date: 2020/5/2
 *
 * ### Description:
 * This program reads in a CSV composed of information about people, such as
 * names and addresses. It then stores each entry into a struct, and those
 * structs into a vector. The vector is sorted by last name (or first, if
 * last names are identical) and the newly sorted data is written to an
 * output file.
 */
</code></pre>

<p>For module-level documentation, use <code>//!</code> instead of <code>/**</code>.</p>

<pre><code>fn arg_parser(args: &amp;[String]) -&gt; Result&lt;(File, File), &amp;'static str&gt; {
</code></pre>

<p>You really shouldn't return strings as your error type—they don't implement <a href="https://doc.rust-lang.org/std/error/trait.Error.html" rel="nofollow noreferrer">Error</a>, so they don't play nicely with other stuff. Use an error handling crate instead, such as anyhow (or implement it yourself).</p>

<pre><code>// Person constructor
impl Person {
    fn new(first_name: String, last_name: String,
           street: String, city: String, state: String,
           zip_code: String) -&gt; Person {

        Person {
            first_name,
            last_name,
            street,
            city,
            state,
            zip_code,
        }
    }
}
</code></pre>

<p><code>// Person constructor</code> is a useless comment. Remove it. And for that matter, there's no need for a constructor like this at all—and it's hard to remember the parameter order. Just fill in the <code>Person</code> struct manually.</p>

<pre><code>    let input_file = match File::open(format!("{}{}", "src/", &amp;args[1])) {
        Err(why) =&gt; panic!("\ncouldn't open file: {}", why),
        Ok(file) =&gt; file,
    };

    // Get the output file
    let output_file = match File::create(format!("{}{}", "src/", &amp;args[2])) {
        Err(why) =&gt; panic!("\ncouldn't create file: {}", why),
        Ok(file) =&gt; file,
    };
</code></pre>

<p>Don't format paths like that, use <a href="https://doc.rust-lang.org/std/path/struct.Path.html#method.join" rel="nofollow noreferrer">Path::join</a> instead.</p>

<pre><code>let data: Vec&lt;&amp;str&gt; = line.split(", ").collect();
</code></pre>

<p>You don't need to allocate a vector for that, just use Iterators directly (see my final code for my implementation).</p>

<pre><code>fn sort_person_vec(person_vec: &amp;mut [Person]) {
</code></pre>

<p>Just implement <code>Ord</code> on <code>Person</code> so you can just call <code>person_vec.sort()</code>.</p>

<pre><code>/**
 * Writes data to the output file
 *
 * # Description
 * Writes all Person structs to the output file, catching errors if the file
 * is not available to be written to.
 *
 * # Arguments
 * * `person_vec` - A vector containing Person structs.
 * * `output_file` - The file to write to.
 */
fn write_to_file(person_vec: &amp;mut Vec&lt;Person&gt;, output_file: &amp;mut File) {

    for p in person_vec {

        // Format the peron's information as a string
        let info = format!("{}, {}, {}, {}, {}, {}\n",
                           p.first_name, p.last_name, p.street, p.city,
                           p.state, p.zip_code);

        // Write to output file
        match output_file.write_all(info.as_bytes()) {
            Err(why) =&gt; panic!("\ncouldn't write to file: {}", why),
            Ok(_) =&gt; (),
        }
    }
}
</code></pre>

<p>Rust uses <code>///</code> documentation comments (vs <code>//!</code> for modules), not <code>/**</code>. When you run <code>cargo doc</code> or publish your crate, this documentation won't get carried over. It's also not common to use a Description header in Rust, as that's implied. And there's no need to say what each argument is if that's all you're gonna say: it's obvious that the parameter <code>person_vec</code> of type <code>&amp;mut Vec&lt;Person&gt;</code> is a <code>Vec</code> of <code>Person</code>s. Additionally, there's no need for <code>person_vec</code> to be mutable, or even a <code>Vec</code> at all. Instead, you should accept a <code>&amp;[Person]</code>. There's also no reason for <code>output_file</code> to be a file—what if you want to send it over the network instead or compress it (e.g. gzip) before writing it? You should accept a <code>&amp;mut impl Write</code> instead.</p>

<pre><code>let info = format!("{}, {}, {}, {}, {}, {}\n",
                   p.first_name, p.last_name, p.street, p.city,
                   p.state, p.zip_code);
</code></pre>

<p>is probably written better with a <code>fmt::Display</code> implementation.</p>

<p>In general, you should also not create <code>BufReader</code>s/<code>BufWriter</code>s within a function that reads or writes stuff. Leave the caller to do that.</p>

<p><a href="https://gist.github.com/lights0123/23b3cded6ee039db2ce0ac5c8677a37c" rel="nofollow noreferrer">Final code</a>:</p>

<pre class="lang-rust prettyprint-override"><code>//! # CSV Sorter
//!
//! This program reads in a CSV composed of information about people, such as
//! names and addresses. It then stores each entry into a struct, and those
//! structs into a vector. The vector is sorted by last name (or first, if
//! last names are identical) and the newly sorted data is written to an
//! output file.

use std::cmp::Ordering;
use std::env;
use std::fs::File;
use std::io::{BufRead, BufReader, BufWriter, Write};
use std::path::PathBuf;
use std::process;

/// Person struct to hold relevant data
#[derive(Debug, PartialEq, Eq)]
struct Person {
    first_name: String,
    last_name: String,
    street: String,
    city: String,
    state: String,
    zip_code: String,
}

impl Ord for Person {
    fn cmp(&amp;self, other: &amp;Self) -&gt; Ordering {
        (
            self.last_name.to_lowercase(),
            self.first_name.to_lowercase(),
        )
            .cmp(&amp;(
                other.last_name.to_lowercase(),
                other.first_name.to_lowercase(),
            ))
    }
}

impl PartialOrd for Person {
    fn partial_cmp(&amp;self, other: &amp;Self) -&gt; Option&lt;Ordering&gt; {
        Some(self.cmp(other))
    }
}

///
/// Processes command-line arguments
///
/// # Description
/// This function processes the passed-in command line arguments and attempts
/// to open and create valid input/output files from the names given.
///
/// # Arguments
/// * `args` - A string array of command-line arguments.
///
/// # Returns
/// * A tuple of the input file and output file if they are found, else errors.
///
fn arg_parser(args: &amp;[String]) -&gt; Result&lt;(File, File), &amp;'static str&gt; {
    // Exit if too many or too few arguments were passed
    if args.len() != 3 {
        return Err("Usage: 'cargo run [input file] [output file]");
    }

    // Get the input file
    let input_file = File::open(PathBuf::from("src").join(&amp;args[1])).expect("Couldn't open file");
    let output_file =
        File::create(PathBuf::from("src").join(&amp;args[2])).expect("Couldn't create file");

    // Return both files as a tuple
    Ok((input_file, output_file))
}

///
/// Builds a list of Person structs
///
/// # Description
/// This function reads the input file line by line and creates a Person
/// struct based on the line's contents. It then adds that struct to a vector
/// and repeats for every line in the file. The final vector contains every
/// Person struct read in from the file.
///
/// # Returns
/// * A vector of type Person containing all Person structs from the file.
fn build_person_vec(reader: &amp;mut impl BufRead) -&gt; Vec&lt;Person&gt; {
    let mut person_vec: Vec&lt;Person&gt; = Vec::new();

    for line in reader.lines() {
        let line = line.unwrap();

        let mut data = line.split(',').map(|s| s.trim());

        let p = Person {
            first_name: String::from(data.next().unwrap()),
            last_name: String::from(data.next().unwrap()),
            street: String::from(data.next().unwrap()),
            city: String::from(data.next().unwrap()),
            state: String::from(data.next().unwrap()),
            zip_code: String::from(data.next().unwrap()),
        };
        person_vec.push(p);
    }
    person_vec
}

///
/// Writes data to the output file
///
/// Writes all Person structs to the output file, catching errors if the file
/// is not available to be written to.
fn write_to_file(person_vec: &amp;[Person], output_file: &amp;mut impl Write) {
    for p in person_vec {
        let info = format!(
            "{}, {}, {}, {}, {}, {}\n",
            p.first_name, p.last_name, p.street, p.city, p.state, p.zip_code
        );

        output_file
            .write_all(info.as_bytes())
            .expect("Couldn't write to file");
    }
}

fn main() {
    let args: Vec&lt;String&gt; = env::args().collect();

    // Get the input and output files
    let (input_file, output_file) = arg_parser(&amp;args).unwrap_or_else(|err| {
        eprintln!("\nError: {}", err);
        process::exit(1);
    });

    let mut person_vec = build_person_vec(&amp;mut BufReader::new(&amp;input_file));

    person_vec.sort();

    write_to_file(&amp;person_vec, &amp;mut BufWriter::new(output_file));
}
<span class="math-container">```</span>
</code></pre>
    </div>