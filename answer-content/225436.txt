<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code seems unnecessarily complicated.</p>

<p><code>nums1</code> is subset of <code>nums2</code>. So no need to iterate over <code>nums2</code>. Because <code>nums2</code> may be bigger than <code>nums1</code>  </p>

<p>Here's the algo;  </p>

<ol>
<li>Take a number <code>n</code> from <code>nums1</code>  </li>
<li>Find <code>n</code>'s index in <code>nums2</code>. Because <code>nums1</code> is subset of <code>nums2</code> <code>n</code> will definitely be found.  </li>
<li>Check if there's a number say <code>m</code> which is greater than <code>n</code> starting from the <code>index + 1</code> index at <code>nums2</code>  </li>
<li>If found output the number  </li>
<li><p>Otherwise output <code>-1</code>  </p>

<pre><code>class Solution:
    def nextGreaterElement(self, nums1: List[int], nums2: List[int]) -&gt; List[int]:
        output = []
        for n in nums1:
            idx = nums2.index(n)
            for m in nums2[idx+1:]:
                if m &gt; n:
                    output.append(m)
                    break
            else:
                output.append(-1)
        return output
</code></pre>

<p>Finding index sucks time. To optimize the index can be pre-calculated.  </p>

<pre><code>output = []
index = { n: i for i, n in enumerate(nums2) }
for n in nums1:
    idx = index[n]
    for m in nums2[idx+1:]:
        if m &gt; n:
            output.append(m)
            break
    else:
        output.append(-1)
return output
</code></pre></li>
</ol>
    </div>