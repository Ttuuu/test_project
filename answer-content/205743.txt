<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>When you are looping over the keys <code>a</code> and values <code>elements[a]</code> of a dictionary, use the <a href="https://docs.python.org/3/library/stdtypes.html#dict.items" rel="noreferrer"><code>items</code></a> method to loop over both at the same time:</p>

<pre><code>for a, value in elements.items():
    for (b, c), d in value:
</code></pre>

<p>(If I knew what these values represented, I would pick a better name than <code>value</code>.)</p></li>
<li><p>The code here doesn't use the keys, it only uses the values. So use the <a href="https://docs.python.org/3/library/stdtypes.html#dict.values" rel="noreferrer"><code>values</code></a> method instead:</p>

<pre><code>for value in elements.values():
    for (b, c), d in value:
</code></pre></li>
<li><p>The code doesn't use <code>b</code> or <code>d</code> either. It is conventional to use the name <code>_</code> for unused variables:</p>

<pre><code>for (_, c), _ in value:
</code></pre></li>
<li><p>A double iteration over some lists and then over the elements of those lists can be combined into a single iteration using <a href="https://docs.python.org/3/library/itertools.html#itertools.chain.from_iterable" rel="noreferrer"><code>itertools.chain.from_iterable</code></a>:</p>

<pre><code>from itertools import chain
for (_, c), _ in chain.from_iterable(elements.values()):
</code></pre></li>
<li><p>The repeated calls to <code>max</code> can become a single call taking a generator expression:</p>

<pre><code>values = chain.from_iterable(elements.values())
max_abs_c = max(abs(c) for (_, c), _ in values)
</code></pre></li>
<li><p>It's common to worry whether code is "Pythonic" but it is better to think in terms of general principles (clarity, simplicity, maintainability, testability, usability, efficiency, etc.) that apply to code in any language.</p></li>
</ol>
    </div>