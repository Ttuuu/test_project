<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Depends of the data</h2>

<p>The best solution to the problem will depend on the data you are processing. As you have given no indication as to what the data contains I can but guess.</p>

<h2>Small range</h2>

<p>If the values are a small set within a known range then the optimal solutions is to create an array that will fit all the values before the loop, fill it with zero and then count each index.</p>

<h3>Example A</h3>

<p><code>values</code> is array of integers in the range of 0-<code>setSize</code></p>

<pre><code>function countValuesA(values, setSize) { // example A
    const counts = new Array(setSize);
    counts.fill(0);
    var i;
    for (i = 0; i &lt; values.length; i++) { counts[values[i]]++ }
    return counts;
}
</code></pre>

<h2>Limited</h2>

<p>This only works for values that are integers &gt;= 0. The following solutions will work for any type of values. But as you can see in the benchmarking the above method can provide a huge advantage, So much so that is worth upstream modification to bring small range sets into an integer range.</p>

<h2>Unknown set with small range</h2>

<p>If the set of values is unknown but small then you know that each iteration is more likely to find an existing value to count. Thus you can write the function to favor that situation.</p>

<p>When using a Map, either as <code>count = new Map</code>, or <code>counts = {}</code> there is a cost each time you access a key. This is the cost of converting the key to a hash. </p>

<p>So avoiding the hash calculation when possible gives an advantage.</p>

<h3>Example B</h3>

<p>When the set of values is small (compared to the number of values) but the range of the values is unknown</p>

<pre><code>function countValuesB(values) { // example B
    const counts = new Map();
    var i,count;
    for (i = 0; i &lt; values.length; i++) {
        count = counts.get(values[i]);
        if (count) { count[0]++ }
        else { counts.set(values[i], [1]) }
    }
    return counts;
}
</code></pre>

<h2>Unknown set with large range</h2>

<p>If the set of values is large (near or greater than the length of the array) then the above example is at a disadvantage, as each new value found require that a new array is created. The new array has a higher cost than calculating the hash, so we can put the advantage to adding new items in the map of counts</p>

<h3>Example C</h3>

<p>When the set of values is large or the range is unknown </p>

<pre><code>function countValuesC(values) {  // example C
    const counts = new Map();
    var i;
    for (i = 0; i &lt; values.length; i++) {
        const num = values[i];
        if (counts.has(num)) { counts.set(num, counts.get(num) + 1) }
        else { counts.set(num, 1) }
    }
    return counts;
}
</code></pre>

<h2>Bench-marking</h2>

<p>To get a flavor as to how each performs we must benchmark the performance for different types of data. To define the data I have used the following</p>

<pre><code>const data = (length, min, max) =&gt; setOf(length, () =&gt; randI(min, max));
</code></pre>

<p>Where <code>setOf</code> creates an array of <code>length</code>. The array contains random integers from <code>min</code> to <code>max-1</code></p>

<p>If we benchmark the three example A,B,C. The values are linear metrics denoting time taken, with lower values faster. </p>

<h3>Performance comparisons</h3>

<pre><code>  length |  min  |   max  ||   A   |   B   |    C   |  ~ perf Best Worst            
 -------------------------  ---------------------------------------------
  32000  |     0 |   1000 || 0.205 | 1.472 |  2.159 | A 10 times faster C
  32000  | 10000 |  11000 || 2.091 | 1.554 |  2.249 | B 30% faster C
  32000  | 10000 |1000000 || 8.888 | 4.541 |  4.003 | C 2 times faster A
</code></pre>

<p><em><sub><strong>Note</strong> Function A uses max as its second argument.</sub></em></p>

<p>From the best of the worst (last line C) to the best of the best (first line A) processing 32000 items can have a performance difference of 2000% simply by taking advantage of the type, distribution, and range of the items being processed.</p>

<h2>Ternary</h2>

<p>In JavaScript ternary expression always tend to be slightly quicker than statements. In my view ternaries are easier to read.</p>

<p>The two examples B,and C can be written with ternary and give both function a 3% performance increase. The benefit is marginal, but it is good practice to favor a performant and readable style over any other.</p>

<h3>Example B ternary</h3>

<pre><code>function countValuesBT(values) {
    const counts = new Map();
    var i, c;
    for (i = 0; i &lt; values.length; i++) {
        (c = counts.get(values[i])) ? c[0]++ : counts.set(values[i], [1]);
    }
    return counts;
}
</code></pre>

<h3>Example C ternary</h3>

<pre><code>function countValuesCT(values) { 
    const counts = new Map();
    var i, num;
    for (i = 0; i &lt; values.length; i++) {
        counts.has(num = values[i]) ?
            counts.set(num, counts.get(num) + 1) :
            counts.set(num, 1);
    }
    return counts;
}
</code></pre>
    </div>