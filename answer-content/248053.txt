<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First thing I would do is separate CSV serialization from export data generation. For example the export data generation could be:</p>
<pre><code>  def self.to_export
    attributes = %w[appointment_id location_id employee_id client_id child_id notes 
    has_specific_employee start_time end_time]
      all.map do |appointment|
        attributes.map { |attr| appointment.send(attr) }
      end
    end
  end
</code></pre>
<p>Then you'd have a method that takes an array of primitive Ruby objects and serializes to CSV.</p>
<p>The fancy name for this is <a href="https://www.rubyguides.com/2019/09/rails-patterns-presenter-service/" rel="nofollow noreferrer">presenter pattern</a>.</p>
<p>Your zip file method is similar in that it does data processing, CSV serialization and zip export. Have one method that builds the data you want, (re)use the CSV serialization we just went over, add another method that takes a file and creates a zip file from it.</p>
    </div>