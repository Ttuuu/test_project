<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is a pretty straightforward exercise, and you did a fine job.</p>

<p>Criticisms of the requirements (not your code):</p>

<ul>
<li>Fields <code>headPhoneColor</code> and <code>headPhoneModel</code> are verbose and redundant.  Why not just <code>color</code> and <code>model</code>?</li>
<li>Why <code>changeVolume(value)</code> rather than <code>setVolume(value)</code>?  I think that your <code>setVolume(value)</code> is better.</li>
<li>I would think that certain characteristics are immutable once the object is instantiated: manufacturer, color, and model.  Perhaps those fields should not have setters.</li>
</ul>

<p>Criticisms of your code:</p>

<ul>
<li><code>getPluggedIn()</code> is a predicate that returns a <code>boolean</code>.  By convention, it should be called <code>isPluggedIn()</code>.</li>
<li>Do these headphones go up to 11?  It might be a good idea to perform some validation in <code>setVolume(volume)</code>, and throw an <code>IllegalArgumentException</code> if needed.</li>
<li><p>The <code>getColorName()</code> function could use some work.  The <code>String colorName = "Black"</code> assignment is redundant and should therefore be avoided.  Interestingly, the <a href="https://docs.oracle.com/javase/10/docs/api/java/awt/Color.html#toString%28%29" rel="nofollow noreferrer"><code>Color.toString()</code></a> documentation says that you should not rely on it, but I'd use it as a fallback anyway, because it is possible to create colors outside the predefined palette.</p>

<p>A <code>switch</code> block could work:</p>

<pre><code>public String getColorName() {
    switch (this.headPhoneColor) {
        case Color.BLACK: case Color.black: return "Black";
        case Color.WHITE: case Color.white: return "White";
        …
        default: return this.headPhoneColor.toString();
    }
}
</code></pre></li>
<li>In <code>toString()</code>, "volumne" is a misspelling.</li>
<li><p>Technically, you don't have to write the constructor explicitly, since a zero-parameter public constructor is provided implicitly.</p>

<pre><code>public class HeadPhones {
    public static final int LOW = 1;
    public static final int MEDIUM = 2;
    public static final int HIGH = 3;

    private int volume = MEDIUM;
    private boolean pluggedIn;
    private String manufacturer = "";
    private Color headPhoneColor = Color.BLACK;

    public int getVolume() {
        return volume;
    }

    …
}
</code></pre>

<p>That said, your explicit constructor is not necessarily bad.</p></li>
</ul>
    </div>