<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<ol>
<li>Is the coding in my project acceptable?</li>
</ol>
</blockquote>
<p>More or less. There are no essential flaws but the structure is quite questionable.</p>
<blockquote>
<ol start="2">
<li>Is it similar to how most PHP projects are built? (i.e. are most procedural or OOP)</li>
</ol>
</blockquote>
<p>Depends on the project's maturity. Your code is quite similar to what a usual first project looks like, and even above the average. Speaking of mature projects, they indeed are mostly written using OOP and essentially different from what you wrote here.</p>
<blockquote>
<ol start="3">
<li>What should I learn as a beginner? (procedural or OOP?)</li>
</ol>
</blockquote>
<p>First of all, there is nothing wrong with procedural programming, it's perfectly OK to start from it. Eventually you will learn some OOP and may be even master it.<br>
Besides, it looks like you are confusing <a href="https://en.wikipedia.org/wiki/Object-oriented_programming" rel="nofollow noreferrer">OOP</a> which is indeed opposite to procedural programming with <a href="https://phpdelusions.net/pdo" rel="nofollow noreferrer">PDO</a> which is just a PHP extension to work with databases (though using OOP syntax).<br>
PDO is better than mysqli which you are using at the moment, so to answer your questions about procedural/OOP/PDO:</p>
<ul>
<li>Learn procedural PHP with occasional use of built-in objects</li>
<li>Better to use PDO for the database access instead of mysqli</li>
</ul>
<blockquote>
<p>Do you have any beginner advice?</p>
</blockquote>
<p>Just write a code and post it here for the review.</p>
<p>Now to your code</p>
<h3>db.php</h3>
<p>this file is better to be rewritten (in case you are going to stick with mysqli) according to my article <a href="https://phpdelusions.net/mysqli/mysqli_connect" rel="nofollow noreferrer">How to properly connect to Mysql database using mysqli</a>.</p>
<h3>index.php</h3>
<p>is better to be split into two parts, the data gathering part and the output part. Such a separation will make both parts cleaner:</p>
<pre><code>&lt;?php
include 'db.php';
// Fetch data from db
$query = mysqli_query($con, 'SELECT *, t_firstNo * t_secondNo as result FROM data');
// the following function will give you an array
$data = mysqli_fetch_all($query);
?&gt;
&lt;?php foreeach ($data as $row) : ?&gt;
    &lt;li&gt;
        &lt;?= $row['t_name'] ?&gt; entered 
        &lt;?= $row['t_firstNo'] ?&gt; and 
        &lt;?= $row['t_secondNo'] ?&gt; 
        (result = &lt;?= $row['result'] ?&gt;)
    &lt;/li&gt;
&lt;?php endwhile ?&gt;
</code></pre>
<p>as you can see, we calculated the result right in the query, which made our output code cleaner and focused on the output. Getting data into array before output is also a good practice, completely separating the database interaction from the output.</p>
<h3>process.php</h3>
<pre><code>&lt;?php
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    if(empty($_POST['nickname']) || empty($_POST['firstNo']) || empty($_POST['secondNo'])) {
        echo 'Bad input - try again.';
    } else {
        include 'db.php';
        // insert into DB
        $sql = "INSERT INTO data (t_name, t_firstNo, t_secondNo) VALUES (?,?,?)";
        $stmt = mysqli_prepare($sql);
        $stmt-&gt;bind_param("sss", $_POST['nickname'], $_POST['firstNo'], $_POST['secondNo']);
        $stmt-&gt;execute();
        header("Location: index.php");
        exit();
    }
}
?&gt;
&lt;form&gt;
Here goes your input form
</code></pre>
<p>some notes</p>
<ul>
<li>it's better to use <code>$_SERVER['REQUEST_METHOD']</code> if POST method is used.</li>
<li><code>empty()</code> is essentially a shorthand of <code>isset($var) || $var==''</code>.</li>
<li>it's better to keep the form and its processing on the same page. it can let you to fill the entered values for the convenience.</li>
<li>it is much, much better to use a <strong>prepared statement</strong> as opposite to the manual escaping you were using, so you should stick with the former.</li>
<li>there is no need to check for the success, your application should be just configured to say "Error" in case of error automatically.</li>
</ul>
    </div>