<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>but am not sure if that applies here. And, is it necessary to return
  the result wrapped in a new promise, at all?</p>
</blockquote>

<p>Yes, that applies here. </p>

<p>No, returning <code>Promise.resolve()</code> is not necessary. <code>.then()</code> returns a new <code>Promise</code> object. Use </p>

<p><code>return result</code></p>

<p>within the function passed to <code>.then()</code>.</p>

<p>Note, a value <code>return</code>ed from <code>.catch()</code> results in a resolved <code>Promise</code>. Depending on how errors are handled an error could be <code>throw</code>n (withing <code>{}</code> of a function).</p>

<pre><code>this.fetchCalendarData(0, 6).then((fetched_calendar_data) =&gt; {
    this.calendar_data = fetched_calendar_data;
});
</code></pre>

<p>should include the second parameter to <code>.then()</code> to handle potential error</p>

<pre><code>.then((fetched_calendar_data)=&gt;{}, err=&gt;{/* handle error */})
</code></pre>

<p>given then <code>Promise.reject()</code> is returned from <code>.catch()</code>, or <code>.catch()</code> should be chained to <code>.then()</code></p>

<pre><code>.then((fetched_calendar_data)=&gt;{}
.catch(err=&gt;{/* handle error */})
</code></pre>

<hr>

<pre><code>fetchCalendarData(offset, length) {
  return fetch(this.props.Uri + '?offset=' + offset + '&amp;length=' + length)
  .then(response =&gt; response.json())
  .then(result =&gt; {
    if (result.hasOwnProperty('redirect_to_login') 
       &amp;&amp; result.redirect_to_login == true) {
         window.location.reload(window.globalAppState.base_url + "/login");
    }
    return result;
  })
  .catch(() =&gt; {
    throw new Error('FAILURE');
  });
}

this.fetchCalendarData(0, 6)
.then(fetched_calendar_data =&gt; {
  this.calendar_data = fetched_calendar_data;
})
.catch(err =&gt; console.error(err));
</code></pre>
    </div>