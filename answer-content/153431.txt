<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You could write extension method that combines Replaces and returns new query.</p>

<pre><code>static class LinqExtensions
{
    public class Projection&lt;T&gt;
    {
        public T Item { get; set; }
        public string Field1 { get; set; }
        public string Field2 { get; set; }
    }

    public static IQueryable&lt;T&gt; ContainsEx&lt;T&gt;(this IQueryable&lt;T&gt; query, 
        string[] toRemove, string filter, Expression&lt;Func&lt;T, Projection&lt;T&gt;&gt;&gt; projection)
    {
        var projectionQuery = query.Select(projection);

        foreach (var str in toRemove)
        {
            projectionQuery = projectionQuery.Select(x =&gt; new Projection&lt;T&gt;
            {
                Field1 = x.Field1.Replace(str, ""),
                Field2 = x.Field2.Replace(str, ""),
                Item = x.Item
            });
        }

        return projectionQuery
            .Where(x =&gt; filter.Contains(x.Field1) || filter.Contains(x.Field2))
            .Select(x =&gt; x.Item);
    }
}
</code></pre>

<p>And use it:</p>

<pre><code>            var removeCharacters = new[] { ",", "#", "/", "-" };

            var query = context.Accounts;
            var result = query.ContainsEx(removeCharacters, "filter", x =&gt; new LinqExtensions.Projection&lt;Accounts&gt;
            {
                Field1 = x.Name,
                Field2 = x.FullName,
                Item = x
            }).ToArray();
</code></pre>
    </div>