<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>What to Store</h3>

<p>First of all, I'd advise against (ever) storing an age if you can help it. By <em>strong</em> preference, I would store something like a birthday instead of an age. Once a person is born, their birthday remains the same forever<sup>1</sup>. Depending on what sort of "age" you're dealing with, the relevant data might be when something was manufactured, harvested, collected, or something else, but the basic idea remains the same--if at all possible, record the starting time from which you an compute the age, rather than recording the age itself.</p>

<h3>Pseudo-classes and Quasi-classes</h3>

<p>[Warning: heretical statements ahead]</p>

<p>There's an old (by now probably even qualifies as ancient) <a href="http://www.idinews.com/quasiClass.pdf" rel="nofollow noreferrer">paper about pseudo-classes and quasi-classes</a>. Far too few have read or understood what it has to say, and the result is a lot of problematic code.</p>

<p>It's far better to read the paper than just my short summary, but your <code>Person</code> is nearly a textbook example of a quasi-class. You have a class with two data members, and each data member has an accessor and a mutator--each of which does <em>nothing</em> other than pass a value though from the inside to the outside or vice versa.</p>

<p>What you have is really a simple struct with effectively public data, but ugly, unreadable syntax to use it. Based on what you've shown so far, you'd be better off just writing:</p>

<pre><code>struct Person {
    int age;
    std::string name;

    void printInfo() // ...
};
</code></pre>

<p>Some will certainly tell you that public data is always evil. You never know when you might need to represent a person's name in Sanskrit and modify your accessor to do an on-the-fly translation from Sanskrit by English by way of Swahili.</p>

<p>This sort of nonsense is what prompted the phrase "You ain't gonna need it" (and variations thereof). The fact is, lots of people write lots of code that throws away readability in favor of some long-term possibility that there's no particularly good reason to believe is ever likely to materialize.</p>

<p>Yes, it's possible that some day you may need to make changes. It has happened before, and it'll happen again. But experience tends to indicate that the changes we plan for and the changes that happen aren't always the same--and aren't the same even often enough to justify most of the attempts at planning ahead that people make either.</p>

<hr>

<ol>
<li>Of course, that doesn't mean their birthday can't ever be edited, such as to correct an error, but even that's fairly rare.</li>
</ol>
    </div>