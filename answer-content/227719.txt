<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>at first I thought to write this as a comment, perhaps the comment would be a little to long… </p>

<p>There are many things to consider here, not really inline with your question but perhaps you should consider them. </p>

<ol>
<li>Transactional scope. You update the database, remove records… you may end-up orphaning the disk images where you have images that are
not referenced in your database.</li>
<li>Disc capacity, when disks get full you need to stripe them, having a
full database is easyer to solve as you can just ad a datafile and
have a filegroup span multiple disks</li>
<li>Giving write access to the disk subsystem to your website</li>
<li>Load balancing becomes hard, you will have to start working with
mountpoints and add one more point of failure</li>
<li>Disk and operating system performance with large quantities of files
degradates, I have an icon repository, when I load it on my PC I
loose the ability to preview images.</li>
</ol>

<p>As to your code, I would consider caching the data where you think it makes sense. At the moment I see no cashing and I guess that this could help reduce some IO, perhaps look at ClientCache and OutputCache.</p>

<p>We ended up storing images in the database and we had a webservice running as a CDN so that browsers make better use of parallel loads and the webservice could better process content and cash the content. Depending on the Trafik and SLA you might get issues, not saying you will, but be aware.</p>
    </div>