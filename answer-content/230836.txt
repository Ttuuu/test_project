<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This looks like a good attempt. Let's first start assuming we only have to deal with positive values. </p>

<pre><code>private int getProductOfMaximalsForMoreThanTwoElements( List&lt;int&gt; B)
{
    int max1 = B.Max();
    B.RemoveAt(B.IndexOf(max1));
    int max2 = B.Max();
    B.RemoveAt(B.IndexOf(max2));
    int max3 = B.Max();
    return max1 * max2 * max3;
}
</code></pre>

<p>This method would provide the solution. So let's review it.</p>

<p>Starting with a couple of style choices, method names in C# should be PascalCase. Additionally, the name of the method is vague. The method provides the product of the 3 biggest numbers: <code>GetProductOfTop3Numbers</code>.</p>

<p><code>B.IndexOf(B.Max())</code> is doing unnecessary work. <code>Max</code> loops over the entire list to find the maximum value, and <code>IndexOf</code> does it all over again. That's a waste of effort. Sadly, <code>System.Linq</code> doesn't provide an <code>ArgMax</code> method, so we will have to spin our own:"</p>

<pre><code>public static int ArgMax(this IList&lt;int&gt; list) {
  var max = int.MinValue;
  var argmax = -1;
  var index = 0;
  foreach(var item in list) {
    if (item &gt; max) {
      max = item;
      argmax = index;
    }
    index++;
  }
  return argmax;
}
</code></pre>

<p>Here, instead of looping through the list to find the maximum value, and then search the list for that value, we can just return the index we found that biggest value at. The max is then easily retrievable through <code>B[index]</code>.</p>

<p>The act of searching the list for the max, and popping it can be its own method:</p>

<pre><code>public static int PopMax(List&lt;int&gt; list)
{
  var argmax = list.ArgMax();
  var max = list[argmax];
  list.RemoveAt(argmax);
  return max;
}
</code></pre>

<p>Our initial method would then be:</p>

<pre><code>private static int GetProductOfTop3Numbers(List&lt;int&gt; list) {
  var product = 1;
  product *= PopMax(list);
  product *= PopMax(list);
  product *= PopMax(list);
  return product;
}
</code></pre>

<p>Or, more generic:</p>

<pre><code>private static int GetProductOfTopNNumbers(List&lt;int&gt; list, int n) {
  var product = 1;
  for(var times = 0; times &lt; n; times++) {
    product *= PopMax(list);
  }
  return product;
}
</code></pre>

<hr>

<p>Now let's return to the actual problem: negative numbers. This is what caused you problems introducing a bunch of if-statements. Let's see if we can find something for that.</p>

<p>We want the highest possible product. If we simply take the top 3 items from the list, we might risk missing out on very negative numbers. Take for instance the list <code>new [] { -5, -5, -3, -1, 0, 1, 2, 3 }</code>. In this case, the naive solution would be <code>1 * 2 * 3</code>, but actually <code>-5 * -5 * 3</code> has a bigger product. Note that if we consider negative numbers in our solution, it will always have to be a pair of negative numbers, to cancel out the <code>-</code> signs. </p>

<p>This pair would then always be the two lowest entries in the list. The two most negative numbers together should provide the biggest product out of all negative numbers. The product of these can then be compared to the product of the biggest numbers, to decide which of the two sets to pick.</p>

<p>Furthermore, because we will never take 3 negative numbers (because the product would be negative), we can freely take the biggest number in the list. Should this number also be negative (because the input only consists of negative numbers), this is fine as well, because it would then be the least negative number, which still would result in the biggest product.</p>

<p>So, to recap:</p>

<ol>
<li>Take the biggest number</li>
<li>Take the next two biggest numbers, or take the next two smallest numbers</li>
<li>Check which together has the biggest product</li>
<li>Done</li>
</ol>

<p>For the mins, we need to provide a similar <code>ArgMin</code> and <code>PopMin</code> implementations. Also realise that simultaneously popping items from the list at both ends might cause troubles if this list is very short, so be sure to copy the list:</p>

<pre><code>private static int GetProductOfTopNNumbers(List&lt;int&gt; list, int n) {
  var copiedList = new List&lt;int&gt;(list);
  var product = 1;
  for(var times = 0; times &lt; n; times++) {
    product *= PopMax(copiedList);
  }
  return product;
}
</code></pre>

<p>All in all, that leaves us with:</p>

<pre><code>public int Solution(int[] A) {
  var list = A.ToList();
  var max = PopMax(list);
  return Math.Max(max * GetProductOfMinNNumbers(list, 2), max * GetProductOfTopNNumbers(list, 2));
}

public static int ArgMin(this IList&lt;int&gt; list)
{
  var min = int.MaxValue;
  var argmin = -1;
  var index = 0;
  foreach (var item in list)
  {
    if (item &lt; min)
    {
      min = item;
      argmin = index;
    }
    index++;
  }
  return argmin;
}

public static int PopMin(List&lt;int&gt; list)
{
  var argmin = list.ArgMin();
  var min = list[argmin];
  list.RemoveAt(argmin);
  return min;
}

private static int GetProductOfMinNNumbers(List&lt;int&gt; list, int n)
{
  var copiedList = new List&lt;int&gt;(list);
  var product = 1;
  for (var times = 0; times &lt; n; times++)
  {
    product *= PopMin(copiedList);
  }
  return product;
}
</code></pre>
    </div>