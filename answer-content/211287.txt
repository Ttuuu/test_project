<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>To answer your immediate question: You can search in an array <em>slice:</em></p>

<pre><code> guard let prime = numbers[start...].first(where: {$0 != nil}) else {break}
</code></pre>

<p>That works because array slices share their indices with the originating array.</p>

<hr>

<p>There is a small bug in your program, as one can see here:</p>

<pre><code>let sieve = Sieve(4)
print(sieve.primes) // [2, 3, 4]
</code></pre>

<p>The reason is that the</p>

<pre><code>if lo &lt; maxValue { ... }
</code></pre>

<p>loop does not include the last value. The test should be <code>lo &lt;= maxValue</code>.</p>

<hr>

<p>There are also some possible improvements: </p>

<pre><code>        let lo = 2 * prime!
</code></pre>

<p>can be replaced by</p>

<pre><code>        let lo = prime! * prime!
</code></pre>

<p>because all lower multiples have been “nilled” before. As a consequence, the outer loop </p>

<pre><code>    while start &lt;= maxValue { ... }
</code></pre>

<p>can be replaced by</p>

<pre><code>    while start * start &lt;= maxValue { ... }
</code></pre>

<p>Now instead of repeatedly searching for the next non-nil entry in the array you might as well <em>iterate</em> over the array. This allows also to get rid of the ugly forced unwrapping <code>prime!</code>:</p>

<pre><code>    for i in (2..&lt;numbers.count).prefix(while: { $0 * $0 &lt;= maxValue }) {
        if numbers[i] != nil {
            for x in stride(from: i * i, to: numbers.count, by: i) {
                numbers[x] = nil
            }
        }
    }
</code></pre>

<p>At this point it becomes apparent that the information in the <code>numbers</code> array is redundant: Each element is equal to its index or <code>nil</code>. Therefore  a <em>boolean</em> array is sufficient instead of an array of optional integers, this reduces the required memory considerably.</p>

<p>I suggest that you first try to implement that yourself, otherwise have a look at <code>func eratosthenesSieve()</code> in <a href="https://codereview.stackexchange.com/questions/192021/prime-number-generator-efficiency/192042#192042">Prime Number Generator &amp; Efficiency</a>.</p>
    </div>