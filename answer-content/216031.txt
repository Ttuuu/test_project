<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li>Don't leave white space at the end of lines.</li>
<li><a href="https://codereview.stackexchange.com/a/215985">Use <code>enumerate</code></a>.</li>
<li>When comparing with <code>None</code> use <code>is</code> and <code>is not</code>.</li>
<li>It'd be cleaner to just use <code>in</code> rather than <code>get</code>.</li>
<li>If you want to use <code>nums_d.get</code> then you should use it outside the <code>if</code> so you don't have to use it a <em>second</em> time when you enter the <code>if</code>.<br>
This however makes the code messy for not much of a benefit IMO.</li>
<li>Unless the site forces you to return lists returning a tuple would be more Pythonic.</li>
<li>Your comments aren't helpful, if anything they make the code harder to read for me.</li>
<li>The variable name <code>nums</code> is easier to read then <code>nums_d</code>, the <code>_d</code> is useless.</li>
<li><p>When returning it would be better to either:</p>

<ul>
<li>Raise an exception, as the lookup failed.</li>
<li>Return a tuple where both values are <code>None</code>. This is so you can tuple unpack without errors.</li>
</ul></li>
</ol>

<p>Getting the code:</p>

<pre><code>def test_peil(nums: List[int], target: int) -&gt; Tuple[int, ...]:
    lookup = {}
    for i, v in enumerate(nums):
        if target - v in lookup:
            return i, lookup[target - v]
        lookup[v] = i
    raise ValueError('Two sums target not in list.')
</code></pre>

<p>You can further improve performance <a href="https://codereview.stackexchange.com/a/216057">by including Alain T.'s change for small numbers.</a></p>

<pre><code>def test_peil_alain(nums: List[int], target: int) -&gt; Tuple[int, ...]:
    if len(nums) &lt;= 100:
        for i, n in enumerate(nums):
            if target - n in nums:
                return i, nums.index(target - n)
    else:
        lookup = {}
        for i, v in enumerate(nums):
            if target - v in lookup:
                return i, lookup[target - v]
            lookup[v] = i
    raise ValueError('Two sums target not in list.')
</code></pre>

<p>And has a performance improvement: (the graph is volatile due to only using one input sample)</p>

<p><a href="https://i.stack.imgur.com/0srBa.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/0srBa.png" alt="enter image description here"></a></p>
    </div>