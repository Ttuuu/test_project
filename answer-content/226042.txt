<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I really like clear and speaking method names, I quickly tried to refactor the first method but have had not much time, I hope this helps anyway.</p>

<p>I have not understand the other initialization of the <code>visited</code> hash in the area_count method (yet).</p>

<p>The new neighbors method indeed looks some kind of overloaded with information, no good idea yet how to change it, if needed at all as you described.</p>

<pre><code>require 'json'
require 'stringio'

def connectedCell(matrix, visited = {})
    (0...matrix.length).each do |row|
        (0...matrix[0].length).each do |col|
        next if visited[[row, col]]
            if matrix[row][col] == 1
              return update_count_stats(row, col, matrix, visited)
            end
        end
    end
end

def update_count_stats(row, col, matrix, visited)
    result = area_count([row, col], matrix)
    visited.merge(result[1])
    result[0] &gt; 0 ? result[0] : 0
end

def area_count(pos, matrix)
    q = [pos]
    visited = {}
    count = 0
    while q.length &gt; 0
        tile_pos = q.shift
        if !visited[tile_pos]
            count += 1
            visited[tile_pos] = true
            q += neighbors(tile_pos, matrix)
        end 
    end

    return [count, visited]
end

def neighbors(pos, matrix)
    right = [pos[0], pos[1] + 1]
    left = [pos[0], pos[1] - 1]
    top = [pos[0] + 1, pos[1]]
    bottom = [pos[0] - 1, pos[1]]

    top_right = [top[0], right[1]]
    bottom_right = [bottom[0], right[1]]
    top_left = [top[0], left[1]]
    bottom_left = [bottom[0], left[1]]

    positions = [right, left, top, bottom, top_right, bottom_right, top_left, bottom_left]
    positions.select{|npos| in_bounds?(npos, matrix.length, matrix[0].length) &amp;&amp; matrix[npos[0]][npos[1]] == 1}
end

def in_bounds?(pos, number_of_columns, number_of_rows)
    pos[0] &gt;= 0 &amp;&amp; pos[0] &lt; number_of_columns &amp;&amp; pos[1] &gt;= 0 &amp;&amp; pos[1] &lt; number_of_rows   
end

number_of_rows = 4 # just for testing, was gets.to_i
number_of_columns = 4 # just for testing, was gets.to_i
matrix = Array.new(number_of_rows)

# sample input
# 1 1 0 0
# 0 1 1 0
# 0 0 1 0
# 1 0 0 0

number_of_rows.times do |i|
    matrix[i] = gets.rstrip.split(' ').map(&amp;:to_i)
end
result = connectedCell matrix
puts result
<span class="math-container">```</span>
</code></pre>
    </div>