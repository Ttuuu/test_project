<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I have come up with some suggestions to <em>improve your code performance</em></p>
<ul>
<li>Extract from the loops any variable declaration.</li>
<li>If a variable is called only to assign a value or execute an operation <em>only one</em> time, you should replace the value assigned to that variable in its place.</li>
<li>Numeric values which are in the code should be either avoided or if they are needed, turned in constants.</li>
<li>Repeated lines or code blocks are candidates to be written as functions.</li>
<li>If you use compiler optimization it could make your code run faster (but be careful, some unexpected things may happen).</li>
</ul>
<p>I made the following refactor to your code in order to optimize it:</p>
<pre>double compute_brightness(double *color) //pointer = avoids array copy
{
    return ((212671.0*color[0])+(715160.0*color[1])+(72169.0*color[2]))/1000000.0;
}

//this value is constant but it gets created each time the function is called
//(consider to use INFINITY from &lt;cmath&gt;)
const double maxerror = 1.0/0.0;

uint64_t selectnearest(uint32_t* palette, uint64_t palettelength, uint32_t color)
{
    uint64_t index = 0;
    double color1[3];
    double color2[3];
    double brightness1;
    double brightness2;
    double brightnessdifference;
    double sRGBbrightnessdifference;
    double result;
    for (uint64_t i = 0; i &lt; palettelength; i++)
    {
        //...
        brightness1 = compute_brightness(color1);//the same operation is applied
        brightness2 = compute_brightness(color2);//to these arrays
        //the value of `brightnessdifference` and `sRGBbrightnessdifference`
        //depends on this if, the else avoids to compute unused values
        if (brightness1 == brightness2)
        {
            brightnessdifference = 1;
            sRGBbrightnessdifference = lineartosRGBderivative(brightness1);
        }
        else
        {
            brightnessdifference = brightness2 - brightness1;
            sRGBbrightnessdifference = lineartosRGB(brightness2) - lineartosRGB(brightness1);
        }
        result = sqrt((square(212671.0*(color1[0]-color2[0])) + 
            square(715160.0*(color1[1]-color2[1]))+square(72169.0*(color1[2]-color2[2])))/561891144402.0) *
                (sRGBbrightnessdifference/brightnessdifference);
        if (result &lt; maxerror)
        {
            index = i;
            maxerror = result;
        }
    }
    return index;
}

int main()
{
    //...
    volatile uint32_t color;
    for (uint64_t i = 0; i &lt; 65536; i++)
        color = palette[selectnearest(palette, amountofcolors, (rand()%4096)+(rand()%4096*4096))];
}
</pre>
<p>I hope it helps you.</p>
    </div>