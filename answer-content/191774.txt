<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are some excellent pointers on the other answers, but I feel that they miss the most pythonic solution:</p>

<pre><code>def comma_code(words):
    *head, final = words

    if head:
        final = f'and {final}'

    return ', '.join(*head, final)
</code></pre>

<p>This solution should be fairly clear to any reader, and to me reads as an encoding of the problem definition: given a non-empty list of words, join them with a comma. If there are more than one, add the word 'and' before the final word.</p>

<p>This code does not need to special-case the empty list as the unpacking operation will raise a ValueError for an empty input. You could catch this and return an empty string if this is the desired behaviour, or you could use varadiac arguments to clarify an interface like so:</p>

<pre><code>def comma_code_args(first, *rest):
    *head, final = first, *rest

    if head:
        final = f'and {final}'

    return ', '.join(*head, final)
</code></pre>

<p>This would be called like so:</p>

<pre><code>&gt;&gt;&gt; spam = ['apples', 'bananas', 'tofu', 'cats']

&gt;&gt;&gt; comma_code(spam)
'apples, bananas, tofu, and cats'

&gt;&gt;&gt; comma_code_args('apples', 'bananas', 'tofu', 'cats')
'apples, bananas, tofu, and cats'

&gt;&gt;&gt; comma_code_args(*spam)
'apples, bananas, tofu, and cats'
</code></pre>
    </div>