<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The first two points I want to make in this review are general ones that are good discipline to aid in any maintenance.</p>

<ul>
<li>Always use <code>Option Explicit</code>. <strong><em>Always</em></strong>. At the very least, it
will encourage strong type checking and help avoid any nuisance
errors caused by spelling errors.</li>
<li>Always indent your code properly. This will help any reader identify
logical blocks.</li>
</ul>

<p>I can see from your above code that you have done neither. This makes the code harder to read, thus harder to review.</p>

<p>The next point is also a common one - <strong>D</strong>on't <strong>R</strong>epeat <strong>Y</strong>ourself (DRY). In your code you have a repetitive theme:</p>

<pre><code>Range("D" &amp; ThisRow).Value = Now
' Windows level UserName | Application level UserName
Range("C" &amp; ThisRow).Value = Environ("username") &amp; "|" &amp; Application.UserName
Range("C:D").EntireColumn.AutoFit
</code></pre>

<p>Repeated blocks identify two methods for improvement - either a stand-alone routine or a loop. Because your code logic is based on the conditional location of the change, I advocate for a stand-alone routine here (in this case, a <code>Sub</code>, not a <code>Function</code>):</p>

<pre><code>Sub MakeMyAmendments(rangeToAmend as Range) `** See notes below
    rangeToAmend(1).Value = Environ("username") &amp; "|" &amp; Application.UserName
    rangeToAmend(2).Value = Now()
    rangeToAmend.EntireColumn.Autofit
End Sub
</code></pre>

<p>Notes:</p>

<ol>
<li>Name this sub something sensible, something that fits in with your
logic flow</li>
<li>I could have approached this a number of ways - such as passing in
the address rather than the range, passing in the row number,
passing in any other factors.</li>
<li>For me the easiest and simplest way was simply to let the logic in
the main event handler identify what had to be changed.</li>
</ol>

<p>This reduces the main event handler to:</p>

<pre><code>Private Sub Worksheet_Change(ByVal Target As Excel.Range)
    If Target.Column = 1 Or Target.Column = 2 Then
        'ThisRow = Target.Row
        If (ThisRow = 1) Then Exit Sub
        'MakeMyAmendments Target.Worksheet.Range("C" &amp; ThisRow &amp; ":D" &amp; ThisRow) ' Option 1 - following closely to the original
        'MakeMyAmendments Target.Worksheet.Range("C" &amp; Target.Row &amp; ":D" &amp; Target.Row) ' Option 2, negating need for the additional variable
        With Target.Worksheet
            MakeMyAmendments .Range(.Cells(Target.Row,3),.Cells(Target.Row,4))
        End With - preferred, fully qualified and makes the next logic leap easier to see.
    End If
    If Target.Column = 1 Or Target.Column = 5 Then
            ThisRow = Target.Row
            If (ThisRow = 1) Then Exit Sub
        With Target.Worksheet
            MakeMyAmendments .Range(.Cells(Target.Row,6),.Cells(Target.Row,7))
        End With
    End If
    If Target.Column = 1 Or Target.Column = 8 Then
            ThisRow = Target.Row
            If (ThisRow = 1) Then Exit Sub
        With Target.Worksheet
            MakeMyAmendments .Range(.Cells(Target.Row,9),.Cells(Target.Row,10))
        End With
    End If
    ' Repeat: 11 gives us 12 &amp; 13 ' Yeah, I am getting bored with this.
    ' Repeat: 14 gives us 15 &amp; 16
    ' Repeat: 17 gives us 18 &amp; 19
    ' Repeat: 20 gives us 21 &amp; 22
    ' Repeat: 23 gives us 24 &amp; 25
    ' Repeat: 26 gives us 27 &amp; 28
    ' Repeat: 29 gives us 30 &amp; 31
    ' Repeat: 32 gives us 33 &amp; 34
    ' Repeat: 35 gives us 36 &amp; 37
End Sub
</code></pre>

<p>You can see a clear pattern here. But, what happens if you want to expand to the right - just keep adding more "If" statements?</p>

<p>And your logic is non-intuitive (a subtle trap that I missed on the first reading). If the Column = 1 then you want to amend all the other columns, but if the Column = anything other than that, then only amend the one set. So now we have to understand the full collection.</p>

<p>And if my statement above is wrong - then you certainly have a problem in your code - refer to my first points about making the logic easier to see.</p>

<p>How do we describe the pattern. I think one way is to set up an array. Another way is to use a formula to reflect the 3-based pattern - but I think an array is the easiest to see and maintain.</p>

<p>Again, this is an example of DRY - in this case we can use a loop.</p>

<pre><code>Dim iterator as Long ' always long
For iterator = 2 to 35 Step 3 ' this will include the first and last columns, so easy to amend if the number of data points change.
    If Target.Column = 1 Or Target.Column = Iterator Then
        With Target.Worksheet
            MakeMyAmendments .Range(.Cells(Target.Row,iterator+1),.Cells(Target.Row,iterator+2))
        End With
    End If
Next iterator
</code></pre>

<p>Putting all this together:</p>

<pre><code>Private Sub Worksheet_Change(ByVal Target As Excel.Range)
    Dim iterator as Long ' always long
    For iterator = 2 to 35 Step 3 ' this will include the first and last columns, so easy to amend if the number of data points change.
        If Target.Column = 1 Or Target.Column = Iterator Then
            With Target.Worksheet
                MakeMyAmendments .Range(.Cells(Target.Row,iterator+1),.Cells(Target.Row,iterator+2))
            End With
        End If
    Next iterator
End Sub
</code></pre>

<p>This creates a simple and maintainable event handler. It will also be easier to add further logic for different change rules as a new logic block because you are now not dealing with lots of lines of code.</p>

<p>What can we do to slightly speed this up? Calls to Excel Objects incur an overhead because the VBA has to switch from the VBA model to the Excel model (referencing and de-referencing) every time we reference the object. We can minimise those switches for those items we know that will not change:</p>

<pre><code>Dim targetColumn as Long
Dim targetRow as Long
targetColumn = Target.Column
targetRow = Target.Row
</code></pre>

<p>Throwing this in adds a few lines, but will save time (not much in this case but could add up if you are looking at 100s of columns).</p>

<pre><code>Private Sub Worksheet_Change(ByVal Target As Excel.Range)
    Dim targetColumn as Long
    Dim targetRow as Long
    targetColumn = Target.Column
    targetRow = Target.Row

    Dim iterator as Long ' always long
    For iterator = 2 to 35 Step 3 ' this will include the first and last columns, so easy to amend if the number of data points change.
        If targetColumn = 1 Or targetColumn = Iterator Then
            With Target.Worksheet
                MakeMyAmendments .Range(.Cells(targetRow ,iterator+1),.Cells(targetRow ,iterator+2))
            End With
        End If
    Next iterator
End Sub
</code></pre>

<p>In this case, creating an object to represent the <code>Target.Worksheet</code> is unlikely to make any difference. But should always consider it!</p>

<p>All code in this answer is untested.</p>
    </div>