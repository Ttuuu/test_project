<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Using CiaPan's answer, combined with some <code>numpy</code>, we can design quite an efficient solution. It does have some overhead which makes it slower for small lists, but for lists with more than 100 elements it is about as fast as Ludisposed's answer, and for larger arrays it is blazingly fast:</p>

<pre><code>import time
import numpy as np

def find_repeating(lst, count=2):
    ret = []
    counts = [None] * len(lst)
    for i in lst:
        if counts[i] is None:
            counts[i] = i
        elif i == counts[i]:
            ret += [i]
            if len(ret) == count:
                return ret

def find_repeating_fast(lst):
    n = len(lst)-2
    num_sum = -n*(n+1)//2 + np.sum(lst)
    sq_sum = -n*(n+1)*(2*n+1)//6 + np.dot(lst, lst)

    root = (sq_sum/2 - num_sum*num_sum/4)**.5
    base = num_sum / 2
    a = int(base - root)
    b = int(base + root)
    return a, b


tests = int(input())
print("Comparison to Ludisposed's solution (worst case):")

for k in range(tests):
    inp = input()
    iterations = 10
    t0 = time.clock()
    for _ in range(iterations):
        test = [int(i) for i in inp.split()]
        find_repeating(test)

    t1 = time.clock()

    for _ in range(iterations):
        test_np = np.fromstring(inp, dtype=np.int64, sep=' ')
        find_repeating_fast(test_np)

    t2 = time.clock()
    print("Time per iteration (10^%d): %9.2fµs /%9.2fµs, speedup: %5.2f" % (
        k+1, 
        (t1-t0)/iterations*1e6,
        (t2-t1)/iterations*1e6, 
        (t1-t0)/(t2-t1))
    )
</code></pre>

<p>To ensure that both functions are timed properly, I give the same string to each of them, which is read from <code>input()</code>. The test file looks like this:</p>

<pre><code>6
1 2 3 4 5 6 7 8 9 10 1 9
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 1 99
[4 more lines of increasing size...]
</code></pre>

<p>Note that I used the worst case array for testing, with the repeating elements on the very end. Here are the results from my machine:</p>

<pre><code>Comparison to Ludisposed's solution (worst case):
Time per iteration (10^1):      5.60µs /    16.10µs, speedup:  0.35
Time per iteration (10^2):     32.80µs /    14.60µs, speedup:  2.25
Time per iteration (10^3):    291.60µs /    43.40µs, speedup:  6.72
Time per iteration (10^4):   3043.70µs /   403.80µs, speedup:  7.54
Time per iteration (10^5):  32288.70µs /  3353.60µs, speedup:  9.63
Time per iteration (10^6): 329928.50µs / 32224.60µs, speedup: 10.24
</code></pre>

<p>Here we can clearly see the overhead of using <code>numpy</code>, but that the improvement is significant for large arrays. It should also be noted that this method fails with an integer overflow for arrays larger than \$ \sim 10^7\$. This can be rectified using <code>dtype=object</code> when creating the numpy array, but then the speedup is significantly reduced. </p>

<p>It should also be noted that this solution is also faster for the best case, even if the difference is slightly smaller:</p>

<pre><code>Comparison to Ludisposed's solution (best case):
Time per iteration (10^1):     15.10µs /    41.60µs, speedup:  0.36
Time per iteration (10^2):     54.20µs /    28.90µs, speedup:  1.88
Time per iteration (10^3):    476.10µs /    87.50µs, speedup:  5.44
Time per iteration (10^4):   3204.40µs /   371.10µs, speedup:  8.63
Time per iteration (10^5):  27249.40µs /  3304.90µs, speedup:  8.25
Time per iteration (10^6): 269125.60µs / 32336.10µs, speedup:  8.32
</code></pre>
    </div>