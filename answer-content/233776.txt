<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There's a timing attack. To see whether a user has registered or not, I can try to login. If it fails fast, the user is not registered. If it takes time, the user is registered. To fix this information disclosure, calculate some dummy hash even if the user cannot be found in the database.</p>

<p>The SQL part is fine.</p>

<p>The <code>$submitted_username</code> calls <code>htmlentities</code> too early. The only correct time to call <code>htmlentities</code> is exactly at the point where you embed a text into an HTML snippet. That doesn't happen in your code, though. To fix this, rename the variable from <code>submitted_username</code> to <code>submitted_username_html</code>, to prevent it from being used in any other context. For example, code that reads <code>db_insert($submitted_username_html)</code> looks wrong enough to warrant a thorough code review.</p>

<p>Your code could benefit from being split into a few well-named functions. After doing that, the main code might read like this:</p>

<pre class="lang-php prettyprint-override"><code>$logged_in_user = log_in($_POST);
if ($logged_in_user === FALSE) {
    // …
} else {
    // …
}
</code></pre>

<p>When you extract all the detailed code into a function, you can use early returns for all the error cases. And when you step through the code using a debugger, you can easily skip over all the details of the login process, if you are not interested in it.</p>

<p>In the config part, you should prefix all variable names with <code>db_</code>, to avoid confusing the <code>username</code> with the <code>submitted_username</code>. Or group them into an object called <code>db_config</code>. Then you can access it as <code>$db_config['username']</code>. There, the identifier <code>username</code> is appropriate since it is qualified by the word <code>db_config</code>, which makes it unambiguous.</p>

<p>The SHA-256 algorithm you use for hashing is <a href="https://dusted.codes/sha-256-is-not-a-secure-password-hashing-algorithm" rel="noreferrer">not secure enough anymore</a> since specialized hardware can compute it too fast, even with 65536 iterations. PHP has a built-in <a href="https://www.php.net/manual/en/function.password-hash.php" rel="noreferrer">set of password hashing algorithms</a>. Just use that instead of iterating on your own. Migrating from your custom password hashing to the PHP default will cost a bit of time and work, but it's worth the effort. And since you are not the first to do that, there's already plenty of documentation on it. Probably. Hopefully.</p>
    </div>