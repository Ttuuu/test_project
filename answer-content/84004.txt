<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Generally speaking, I have to admit that I don't understand everything the code is doing and that I could use a little more time in order to understand it. However, I hope I can still give you some hopefully useful pieces of advice:</p>

<ul>
<li><p>You could use a little more C++ in your code, which could be considered a bit too C-ish. What comes to my mind is <code>BITS_PER_WORD</code> which can actually be obtained with <code>std::numeric_limits</code>:</p>

<pre><code>enum { BITS_PER_WORD = std::numeric_limits&lt;word_t&gt;::digits };
</code></pre>

<p>The same goes for several other constants such as <code>UINT32_MAX</code> which could be <code>std::numeric_limits&lt;uint32_t&gt;::max()</code>. I have to admit that it makes the code longer too, but it may be easier to change the integer type with a basic find-and-replace if you ever need to.</p></li>
<li><p>You could also use the C++ algorithms instead of the C library. For example, replace <code>std::memset</code> by <code>std::fill_n</code>, which is likely to be optimized back into an <code>std::memset</code> anyway while being clearer:</p>

<pre><code>std::fill_n(target_segment, std::size_t((max_bit + CHAR_BIT) / CHAR_BIT), 0);
</code></pre></li>
<li><p>It is likely that it has already been optimized by the compiler but since you compute both <code>index / BITS_PER_WORD</code> and <code>index % BITS_PER_WORD</code>, you may as well make even more sure that these two values are computed together by using <a href="http://en.cppreference.com/w/cpp/numeric/math/div" rel="noreferrer"><code>std::div</code></a>. It also applies to <code>bits_to_sieve % segment_size</code> and <code>bits_to_sieve / segment_size</code> somewhere else in the program.</p></li>
<li><p>If you have access to a C++11 compiler, don't hesitate to declare some variables <code>constexpr</code>, like <code>SIEVE_BITS</code> which can totally be computed at compile time.</p></li>
</ul>
    </div>