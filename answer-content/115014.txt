<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As mentioned in the comments, it would be useful if you included more than just the models here. As a result, I can only really do a design review of what appears to be a fairly generic quiz application.</p>

<p>Right now your models are set up this way</p>

<p><a href="https://i.stack.imgur.com/eSmDh.png" rel="noreferrer"><img src="https://i.stack.imgur.com/eSmDh.png" alt="Exam &lt;-&gt; Question &lt;-&gt; Answer"></a></p>

<p>So exams can share questions, and questions can share answers. This is useful in cases where exams typically share questions, and questions share common answers, but it can (and often will) cause issues down the road. I'll get to those later.</p>

<p>Typically the next step is to build out the models for making selections on an exam. You might consider a adding a new many-to-many relationship on the exam that holds the selections (assuming a single exam per person). Here's a rough diagram of what that would look like, where the "selection" is the many-to-many relationship. This can either be implemented as a single property, or as a separate model with two foreign keys.</p>

<p><a href="https://i.stack.imgur.com/viPnE.png" rel="noreferrer"><img src="https://i.stack.imgur.com/viPnE.png" alt="Selection -&gt; Exam &lt;-&gt; Question &lt;-&gt; Answer &lt;- Selection"></a></p>

<p>But then there is a problem: How do you handle questions/answers duplicated on exams? There's no easy way to determine what selection tied to which question, because the answer that was selected is shared across multiple questions <em>in the same exam</em>. This means that you can't properly associate selections with questions, and you can't share answers across an exam, because there are multiple ways traverse the tree.</p>

<p>My recommendation would be to remove the flexibility of sharing questions and answers in favor of a more rigid, single-directional tree structure.</p>

<p><a href="https://i.stack.imgur.com/Y8PON.png" rel="noreferrer"><img src="https://i.stack.imgur.com/Y8PON.png" alt="Exam &lt;- Question &lt;- Answer"></a></p>

<p>So a question has a defined set of answers, and those answers are unique to the question and cannot be shared. And those questions are specific to the exam that are specified for, and cannot appear across multiple exams. This means that a selection (the "glue" between the answer and the exam) cannot be duplicated across a single exam, so there will always be a clear path from an exam to an answer, and the reverse.</p>

<p><a href="https://i.stack.imgur.com/GDrs0.png" rel="noreferrer"><img src="https://i.stack.imgur.com/GDrs0.png" alt="Selection -&gt; Exam &lt;- Question &lt;- Answer &lt;- Selection"></a></p>

<p>So the revised models would look like</p>

<pre><code>from django.db import models


class Exam(models.Model):
    """
    Exam's model, works as a wrapper for the questions
    """
    name = models.CharField(max_length=64, verbose_name=u'Exam name', )
    slug = models.SlugField()

    def __str__(self):
        return self.name


class Question(models.Model):
    question_text = models.CharField(max_length=256, verbose_name=u'Question\'s text')
    is_published = models.BooleanField(default=False)
    exam = models.ForeignKey(Exam, related_name='questions')

    def __str__(self):
        return "{content} - {published}".format(content=self.question_text, published=self.is_published)


class Answer(models.Model):
    """
    Answer's Model, which is used as the answer in Question Model
    """
    text = models.CharField(max_length=128, verbose_name=u'Answer\'s text')
    is_valid = models.BooleanField(default=False)
    question = models.ForeignKey(Question, related_name='answers')

    def __str__(self):
        return self.text
</code></pre>

<p><em>All diagrams were created using <a href="http://www.nomnoml.com/" rel="noreferrer">nomnoml</a>.</em></p>
    </div>