<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Struct with a single pointer</h3>
<p>Instead of making your set a struct with a single pointer (presumably to hide the implementation details of your set state), just use a forward struct declaration and force the users to only use a pointer to your set:</p>
<pre><code>struct unordered_set;
typedef struct unordered_set unordered_set;
</code></pre>
<p>Now your set can just be what you now call <code>unordered_set_state</code> without the extra level of indirection.</p>
<h3>Out of memory checks missing</h3>
<p>You check the return value of <code>malloc/calloc/realloc/unordered_set_entry_alloc</code> in a few places, but there are several places where you don't.  Notably, <code>unordered_set_alloc()</code> and <code>unordered_set_add()</code> are missing checks.</p>
<h3>Potential overflow</h3>
<p>There is no maximum value for <code>load_factor</code>, so the following line could cause an overflow:</p>
<blockquote>
<pre><code>set-&gt;state-&gt;max_allowed_size = (size_t)(initial_capacity * load_factor);
</code></pre>
</blockquote>
<p>This could lead to <code>max_allowed_size</code> becoming some small value or even zero, which could lead to the set resizing itself on every entry added.</p>
    </div>