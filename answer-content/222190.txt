<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This seems faster in <code>r</code>:</p>

<pre><code>minem2 &lt;- function(ncols, nrows, col_probs){
  r &lt;- lapply(1:ncols, function(x) {
    p &lt;- col_probs[x]
    i &lt;- sample.int(2L, size = nrows, replace = T, prob = c(1 - p, p))
    which(i == 2L)
  })
  rl &lt;- lengths(r)
  nc &lt;- rep(1:ncols, times = rl) # col indexes
  nr &lt;- unlist(r) # row index
  ddims &lt;- c(nrows, ncols)
  sparseMatrix(i = nr, j = nc, dims = ddims)
}
</code></pre>

<p>Andrew Guster commented on this approach (<a href="https://stackoverflow.com/a/56348978/4321711">link</a>)</p>

<p>Maybe using this logic <code>Rcpp</code> code could be written faster...</p>

<p>Generally, we do not need to generate all values, but just get the indexes where value is 1.</p>
    </div>