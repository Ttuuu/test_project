<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The main problem with this code is that it's not screening column values, unfortuantely buit in mechanisms in <code>Invoke-SQLCMD</code> aren't viable. It allows to use <code>-Variable</code> but it also accepst stings, like <code>-Variable "p0='var_value'"</code> which don't help at all with escaping, even making it worse. </p>

<p>but here are opesource alternative to Invoke-SQLCMD: <a href="https://github.com/RamblingCookieMonster/PowerShell/blob/master/Invoke-Sqlcmd2.ps1" rel="nofollow noreferrer">https://github.com/RamblingCookieMonster/PowerShell/blob/master/Invoke-Sqlcmd2.ps1</a></p>

<p>It can be installed by executing</p>

<pre><code>Install-Module WFTools -Force -AllowClobber
</code></pre>

<p>Example of unescaped query with <strong>Invoke-SQLCMD</strong></p>

<pre><code>&gt; Invoke-Sqlcmd -Database tb-sql-db -Server XXXXX -Username YYYY -Password ZZZZ -Query "SELECT id, um.text FROM archive_srv_db.tbUniMessage um WHERE id = '3161e665-a30e-48c4-87f2-0008d62da8a6'"

id                                   text
--                                   ----
3161e665-a30e-48c4-87f2-0008d62da8a6 Hello!
</code></pre>

<p>Same query using parameters and <strong>Invoke-Sqlcmd2</strong>:</p>

<pre><code>$secpasswd = ConvertTo-SecureString "ZZZZ" -AsPlainText -Force
$mycreds = New-Object System.Management.Automation.PSCredential ("YYYYY", $secpasswd)
Invoke-Sqlcmd2 -Database tb-sql-db -Server XXXXX -Credential $mycreds -Query "SELECT id, um.text FROM archive_srv_db.tbUniMessage um WHERE id = @p0" -SqlParameters @{ p0="3161e665-a30e-48c4-87f2-0008d62da8a6"}

id                                   text
--                                   ----
3161e665-a30e-48c4-87f2-0008d62da8a6 Hello!
</code></pre>

<p>If you are concerned with escaping issues, if any had occur, you should migrate to <strong>Invoke-Sqlcmd2</strong>.
But please take a note, that parametrized query in ADO.NET can hold up to roughly 2000 parameters.
So your loop condition should be  <code>($i * $columns.Length) -gt 1900</code>  (just assumption that you won't have more than 100 columns. It's to late here to write exact code :-).</p>

<p>And in your loop you should append to query <code>@p$counter</code>, where counter is incrementing variable defined outside of a loop and incremetring inside loop on each value. and build dictionary, populating it with named parameters.</p>

<p><strong>Example:</strong></p>

<pre><code>#define dictionary before outer loop
$dict = @{}
....

#add value inside inner loop
$Insert += "?,"
$dict.Add("@p$counter",$data.rows[$x].$item)
</code></pre>
    </div>