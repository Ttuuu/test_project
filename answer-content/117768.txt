<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Just answering your numbered questions.</p>

<ol>
<li><p>Static methods are necessary in languages like Java where everything has to be part of a class. But in Python you can just write a function, and so <code>@staticmethod</code> is never necessary, and rarely helpful.</p></li>
<li><p><code>dummyFunction</code> is fine, but I think many Python programmers would prefer to use <code>None</code> as the default value and write:</p>

<pre><code>if periodicFunction is not None:
    periodicFunction()
</code></pre>

<p>The reasons for preferring this, even though the implementation has to be slightly more wordy, are (i) it's very common in Python for optional arguments to default to <code>None</code>, and so this is easier for the reader to understand; (ii) sometimes you need to explicitly request the default behaviour, and then it's easy to supply the <code>None</code>.</p>

<p>See for example <a href="https://docs.python.org/3/library/threading.html#threading.Thread" rel="nofollow noreferrer"><code>threading.Thread</code></a>, where:</p>

<blockquote>
  <p><em>target</em> is the callable object to be invoked by the <code>run()</code> method. Defaults to <code>None</code>, meaning nothing is called.</p>
</blockquote></li>
<li><p>Since <code>MAX_CHARS_PER_MESSAGE</code> is only used by <code>breakLongMessage</code>, it would be simplest to make it an optional argument to that function:</p>

<pre><code>def breakLongMessage(msg, max_len=2048):
    """Split the string msg into pieces that are no longer than
    max_len and return them as a list.
    """
</code></pre>

<p>This keeps related code together, improves the documentation, and makes the function easier to test (because you can pass in small values for <code>max_len</code> to keep the tests and their results readable).</p></li>
<li><p>Use the <a href="https://docs.python.org/3/library/traceback.html" rel="nofollow noreferrer"><code>traceback</code></a> module to format stack traces.</p></li>
<li><p>The reason why it's good to keep statements on separate lines is because many Python introspection tools use line numbers. (i) Python stack traces only tell you the line number where the exception happened, so if there are multiple statements on a line, you won't know which one raised the exception; (ii) the Python debugger only lets you set a breakpoint on the first statement on a line, so that if you write <code>if condition: statement</code>, then you won't be able to set a breakpoint on <code>statement</code>; (iii) Python tracing, profiling and coverage tools are line-based.</p>

<p>But, in this particular case, instead of:</p>

<pre><code>if update.message.document: return True
else: return False
</code></pre>

<p>you can write:</p>

<pre><code>return bool(update.message.document)
</code></pre></li>
<li><p>The <code>_</code> and <code>__</code> prefixes don't have anything to do with the concepts of <em>public</em> and <em>private</em> in languages like Java. All methods in Python are public, but there's a <a href="https://www.python.org/dev/peps/pep-0008/#method-names-and-instance-variables" rel="nofollow noreferrer">convention</a> whereby an initial single underscore is used to mean "method that's not intended for use outside of the class". But it's just a convention: the language itself does nothing to enforce it.</p>

<p>The double underscore prefix has a particular use case: to allow a class to be sure that a method name won't collide with a method name in some other class, when the two classes are combined via inheritance. If this use case doesn't apply to you, then don't use the double underscore. (The double underscore doesn't make the method private: it just causes the compiler to translate the name so that it's unique; you can still call it via its transformed name.)</p></li>
<li><p>There's no standard format for docstrings. There are several tools that automatically process docstrings into documentation (<a href="https://docs.python.org/3/library/pydoc.html" rel="nofollow noreferrer">pydoc</a>, <a href="http://www.sphinx-doc.org/en/stable/ext/autodoc.html" rel="nofollow noreferrer">autodoc</a>, <a href="http://www.doxygen.nl/" rel="nofollow noreferrer">doxygen</a>, etc.), and they have different formats. Use the format for your preferred documentation-processing tool.</p></li>
<li><p>Yes, it's a good idea to document the types of function arguments and results.</p></li>
<li><p>There's nothing wrong with using <code>while True:</code> and <code>break</code>. Here's <a href="https://mail.python.org/pipermail/python-list/2009-October/554366.html" rel="nofollow noreferrer">Raymond Hettinger on the subject</a>:</p>

<blockquote>
  <p>Like you, I use <code>while True</code> often.  We use it frequently in the standard library and have no PEP 8 admonition against it, nor does pychecker report it as a negative practice. The use of <code>while 1</code> loops has a long history in other languages as well.</p>
  
  <p>So, if you hear someone make-up a new "best practice" proscribing <code>while True</code>, just smile and continue to write programs as you have been.  You will not be alone.  Many excellent programmers write <code>while True</code> whenever it is called for.</p>
</blockquote></li>
</ol>
    </div>