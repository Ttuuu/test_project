<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The <code>Purse</code> class could be rewritten in the following way:</p>
<pre class="lang-cs prettyprint-override"><code>public class Purse
{
    private ArrayList coins = new ArrayList();
    private readonly object lockObject = new object();

    public void Add(Coin aCoin)
    {
        lock (lockObject)
        {
           coins.Add(aCoin);
        }
    }
    public void RemoveCoin(Coin aCoin)
    {
        lock (lockObject)
        {
            coins.Remove(aCoin);
        }
    }

    public double GetTotal()
    {
        lock (lockObject)
        {
            return coins.Cast&lt;Coin&gt;().Sum(aCoin =&gt; aCoin.GetValue());
        }
    }
}
</code></pre>
<p>Some remarks regarding the code:</p>
<ol>
<li>As the OP stated <code>ArrayList</code> could not be change. So here we can't use neither generic collections nor concurrent collections.<br>
1.1) In order to be able to use <code>System.Linq</code> on an <code>ArrayList</code>, first we have to call the <code>Cast&lt;T&gt;</code> operator</li>
<li>Syncronization is needed not just for the write operations but also for read operations as well.<br>
2.1) All shared resource access should be protected when you want to expose thread-safe methods<br>
2.2) You should consider to use <a href="https://docs.microsoft.com/en-us/dotnet/api/system.threading.readerwriterlockslim?view=netcore-3.1" rel="noreferrer">Read Write Lock</a> if you want to allow multiple read access at the same time</li>
<li>You should use a dedicated lock object as the <a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/lock-statement#guidelines" rel="noreferrer">Guidlines</a> says<br>
3.1) Visual Studio can warn you if you forgot to protect one of the shared resource access
<a href="https://i.stack.imgur.com/8q6X6.png" rel="noreferrer"><img src="https://i.stack.imgur.com/8q6X6.png" alt="Missing lock statement"></a></li>
</ol>
    </div>