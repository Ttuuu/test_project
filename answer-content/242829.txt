<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Static functions</h2>

<p>Given that this is a one-file program, all of your functions (except <code>main</code>) and global variables should be marked <code>static</code> as they will not be used in other translation units.</p>

<h2>stdbool</h2>

<p>Functions like <code>readLine</code> should return <code>bool</code> (from <code>stdbool.h</code>), and not <code>int</code>.</p>

<p>This will also allow</p>

<pre><code>while (1)
</code></pre>

<p>to change to</p>

<pre><code>while (true)
</code></pre>

<h2>Global state</h2>

<p>Most of your global variables after <code>// INIT</code> should be moved. <code>input</code> should just be a local variable. The others could be moved into a game state structure that gets passed around, to enable re-entrance.</p>

<h2>Simple output</h2>

<p>I prefer <code>puts</code> to <code>printf</code> when you are only outputting a string literal with no formatting. Note that <code>puts</code> includes a newline, so</p>

<pre><code>printf("What do you want to open?\n\n");
</code></pre>

<p>would turn into</p>

<pre><code>puts("What do you want to open?\n");
</code></pre>

<p>but <code>printf("&gt;  ");</code> would stay as-is.</p>

<p>The reasons I prefer this change:</p>

<ul>
<li>it produces more terse code;</li>
<li>if we were to assume a non-optimizing compiler, <code>printf</code> would be slower; and</li>
<li><code>puts</code> is constrained to a much simpler set of behaviour.</li>
</ul>

<h2>executeGo</h2>

<p>Rather than representing this as a long list of <code>if</code> statements, you could factor it out into an array of string/function-pointer pairs. Iterate through them until you find a matching string and call the appropriate function. If this list gets longer as you add to the game, consider using a dictionary library.</p>
    </div>