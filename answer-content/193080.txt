<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>Instead of assigning all the methods to <code>this</code> inside one large function, just write a class:</p>

<pre><code>class AjaxManager {
    constructor() {
        this.processes = {};
    }
    ajax() { ... }
    post() { ... }
}
</code></pre></li>
<li><p>Why do you need the logging? I would just drop all the <code>console.log()</code> calls.</p>

<p>The required <code>label</code> parameter looks pretty inconvenient. I guess you need to use it like so:</p>

<pre><code>manager.get("myLabel", "/some/url");
...
manager.abort("myLabel");
</code></pre>

<p>Why not simply return the promise itself:</p>

<pre><code>const request = manager.get("/some/url");
...
request.abort();
</code></pre>

<p>This way, you don't need to come up with label names, especially when you never plan to abort. You would also remove the need for a "Manager"... which leads me to my next point.</p></li>
<li><p>The <code>AjaxManager</code> constructor takes no parameters. So I guess you create it once as a singleton object and use for all requests in your app. Better to avoid such global objects and create one per request.</p></li>
<li><p>Come to think of it... you probably don't need an object at all. You could replace this all with a single function:</p>

<pre><code>ajax("POST", "/some/url");
</code></pre>

<p>Even the <code>success</code> and <code>fail</code> params could be dropped. You could just use <code>.done()</code> and <code>.fail()</code> methods directly.</p></li>
</ul>

<p>So in conclusion... this whole big <code>AjaxManager</code> doesn't really seem to provide many benefits over the jQuery.ajax() API. Perhaps all you need is a simpler helper function to wrap it in.</p>
    </div>