<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You were trying to implement the algorithm as it is described for collections with certain properties, which, as noted by sds led you to create a very inefficient implementation, since the property that accessing an element anywhere in collection takes constant time simply doesn't hold for lists.</p>

<p>Now, a more interesting question to ask would be: <em>is it in principle possible to implement insertion sort for lists?</em>  And, the answer here is: "it depends".  If you take the definition of insertion sort from Cormen's book or similar literally, then there is no way, because constant element access time is a requirement and by its nature list doesn't satisfy that requirement.  However, if you relax that requirement and only satisfy some other properties of the algorithm, then there may be a solution!</p>

<p>Some properties of the algorithm that may be satisfied together:</p>

<ol>
<li>The sorting is in place, only constant (and small) amount of extra memory needs to be allocated.</li>
<li>At any given time there is a sorted and unsorted part of the collection.</li>
<li>There is a helper <code>insert</code> function which, given an element and a sorted portion of the collection will insert the element into that collection such that the order established by the comparison function is not violated.</li>
<li>The running time is the same.</li>
<li>The behavior exhibited by completely sorted and reversed inputs are the same.</li>
</ol>

<p>I'm not going to prove the claim about running time, but, informally, you can see why this would be true: <code>insert</code> would either perform constant time operation by prepending an element to the list, or by appending it to the list. Or, it will look through the entire list to find the correct position to insert the element.  Now, we look at each element of the list exactly once, and apply <code>insert</code> to it exactly once, thus, in the worst case, we will do <code>N * N</code> comparisons, (where <code>N</code> is the number of elements in the list).</p>

<hr>

<p>Below is a possible implementation:</p>

<pre><code>(defpackage :doodles (:use :cl :iterate))
(in-package :doodles)

(defun insert (list elt cmp previous-tail)
  (when (funcall cmp (car elt) (car list))
    (setf (cdr elt) list
          list elt)
    (return-from insert (values list previous-tail)))
  (when (funcall cmp (car elt) (car previous-tail))
    (iter
      (for tail :on (cdr list))
      (for prev :on list)
      (when (funcall cmp (car elt) (car tail))
        (setf (cdr prev) elt
              (cdr elt) tail)
        (return-from insert (values list previous-tail)))))
  (setf (cdr previous-tail) elt
        previous-tail elt)
  (values list previous-tail))

(defun insertion-sort (list cmp)
  (let ((sorted list)
        (unsorted (cdr list)))
    (setf (cdr sorted) nil)
    (iter
      (with sorted-tail := sorted)
      (for unsorted-head :on unsorted)
      (multiple-value-bind (head tail)
          (insert sorted unsorted-head cmp sorted-tail)
        (setf sorted head
              sorted-tail tail))
      (finally
       (progn
         (setf (cdr sorted-tail) nil)
         (return sorted))))))
</code></pre>
    </div>