<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The declaration <code>int letter = 0;</code> is perhaps too early in the program.  <code>letter</code> is only used inside the <code>while</code> loop, so it should be inside of the loop.</p>

<p>Initializing <code>int letter = 0;</code> is misleading.  The initial value of <code>letter</code> is overwritten by the <code>std::cin &gt;&gt; letter;</code> statement, so the initial value of <code>0</code> is never used, and could be removed.</p>

<p><code>while (1) {</code> should be written as <code>while (true) {</code>.  Both amount to an infinite loop, but the latter reads better.</p>

<p><code>26</code> is a magic number, so you might want to turn into a named constant.  Still, it is a pretty obvious constant, so I’d actually be ok with leaving it as is.  However ...</p>

<p><code>64</code> is a magic number which absolutely should be turned into a named constant ... or eliminated altogether.  What does <code>64</code> represent?  The ASCII character<code>'@'</code>?  Still not obvious what it is doing, or why.  How about using the expression <code>'A' + (letter - 1)</code>?  That is much clearer and better!</p>

<hr>

<p>Problem: If the user enters the number <code>"hello"</code>, the <code>std:cin</code> stream will go into a <code>fail</code> state, and executing <code>std::cin &gt;&gt; letter;</code> subsequent times will continue to fail, and <code>"The English Alphabet ... Try again"</code> will be repeated forever.  You should check for the stream going into the <code>fail</code> state, clear the error, then discard the invalid input, before returning to reading the next integer.</p>

<p>Outputting <code>"The letter that coresponds [sic] to that value is"</code> inside the <code>while</code> loop makes it look like you can enter several values and get the results in the loop, when in reality you can only get one translation before the program exits.  You should loop for the user’s input, and break out of the loop once the input is valid, and print the translation outside, after the loop.  Something like:</p>

<pre><code>int letter;

do {
   if (std::cin &gt;&gt; letter) {
       if (letter &gt;= 1  &amp;&amp;  letter &lt;= 26)
           break;
   } else {
       std::cin.clear();
       std::cin.ignore(std::numeric_limits&lt;std::streamsize&gt;::max(), '\n');
   }
   std::cout &lt;&lt; "Try again\n";
} while (true);

std::cout &lt;&lt; "The letter that corresponds ...
</code></pre>
    </div>