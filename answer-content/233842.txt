<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think this is where LINQ to Sql would come in handy. A simple method like this:</p>

<pre><code>public List&lt;T&gt; getObjects&lt;T&gt;(IDbConnection connection,string tableName,params string[] columnNames)
{
    string query = $@"SELECT {String.Join(",", columnNames)} FROM {tableName}";
    using (var dc = new DataContext(connection))
    {
        return dc.ExecuteQuery&lt;T&gt;(query).ToList();
    }

}
</code></pre>

<p>would simplify things greatly. For instance using a simple class:</p>

<pre><code>public class Company
{
    public string CustomerID { get; set; }
    public string CompanyName { get; set; }
    public string Address { get; set; }
}
</code></pre>

<p>you could get a list from the Northwinds database like this:</p>

<pre><code>OleDbConnection conn = new OleDbConnection("Provider=Microsoft.Jet.OLEDB.4.0;Data Source=NWind.mdb");
var companyList = getObjects&lt;Company&gt;(conn,"Customers","CustomerID","CompanyName","Address");
</code></pre>

<p>This requires that your properties be properly typed and that the names match the column names you need(they can be case insensitive though). If conversions are needed you can leverage the <code>set</code>ter for that.</p>

<p>Depending on what you need to do with the data, you might find it easier to create a <code>DataTable</code> instead of a <code>List</code>. This will automatically get the names and the types properly set, while still allowing you to iterate over the data and access any data item you need.</p>
    </div>