<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Review</h1>

<ul>
<li><p>Remove unused imports</p>

<p>You don't use <em>any</em> of these imports, just remove them to reduce clutter</p></li>
<li><p>Read <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP8</a> the python style guide</p>

<ol>
<li>Functions and variables should be <code>snake_case</code></li>
<li>There should be a <code>&lt;space&gt;</code> in between operators</li>
</ol></li>
<li><p>Instead of appending to a <code>list</code>, you could create the <code>string</code> for the start</p>

<p>So instead of making <code>st = []</code>, do <code>st = ''</code> and <code>st += char</code>, no need to join then</p>

<p>However you could make the shifting a separate function, and then <code>''.join()</code> becomes needed again</p></li>
<li><p>When looping, loop over the item not the index</p>

<p>Instead of <code>for i in range(len(s))</code> you could directly loop over the char --&gt; <code>for i in s</code></p></li>
<li><p>There is a function to determine if we encounter an uppercase or lowercase</p>

<p>You could use <a href="https://docs.python.org/3/library/stdtypes.html#str.isupper" rel="nofollow noreferrer"><code>char.isupper()</code></a> or <a href="https://docs.python.org/3/library/stdtypes.html#str.islower" rel="nofollow noreferrer"><code>char.islower()</code></a></p></li>
<li><p>Simplify the shifting</p>

<p>You could use the fact that if you subtract the start <code>ord('a')</code> or <code>ord('A')</code> and then modulo, the extra check of <code>if temp &gt; x</code> becomes not needed</p></li>
<li><p>Notice how the operations for each case (upper, lower) are mostly similar</p></li>
</ul>

<h1>Putting it all together</h1>

<pre><code>import string
APLHA_LEN = len(string.ascii_lowercase)

def shift_letter(letter, shift):
    start = ''
    if letter.isupper():
        start = ord('A')
    elif letter.islower():
        start = ord('a')
    return chr((ord(letter) - start + k) % APLHA_LEN + start) if start else letter

def ceasar_cipher(st, shift):
    return ''.join(shift_letter(letter, shift) for letter in st)
</code></pre>

<p><strong>BUT, there is a better way...</strong></p>

<p>As mentioned by someone already you could use the <a href="https://docs.python.org/3/library/stdtypes.html#str.maketrans" rel="nofollow noreferrer">maketrans</a> function very nicely for ceasar ciphers.</p>

<p>Giving you something like this</p>

<pre><code>from string import ascii_lowercase as lc, ascii_uppercase as uc

def ceasar_cipher_translate(st, k):
    trans = str.maketrans(lc + uc, lc[k:] + lc[:k] + uc[k:] + uc[:k])
    return str.translate(st, trans)
</code></pre>

<p><em>NOTE That this code assumes Python3.x</em></p>
    </div>