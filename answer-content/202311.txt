<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>First reviewing the code itself:</h3>

<ol>
<li><p>First, fix the indentation, and insert an empty line before your <code>main()</code>. Proper formatting is a most basic step allowing easier comprehension.</p></li>
<li><p><code>"stdafx.h"</code> is part of the MSVC-support for pre-compiled headers. Your project is so small it cannot really take advantage of that anyway, so it's just a wart.</p></li>
<li><p>Use the right loop for the job. A <code>for</code>-loop seems to fit better, as you have <em>init</em> (with declaration), <em>condition</em>, <em>next</em>, and <em>body</em>.</p></li>
<li><p>Don't use <code>contine</code> where it has no effect, nor clarifies intent.</p></li>
<li><p>In general, <code>int</code> is too small for your result. Luckily(?), on Windows it's 32 bit, which should suffice.</p></li>
<li><p>Put the calculation into its own function for re-use.</p></li>
<li><p>Don't forget to output a newline at the end, it's expected and omitting it might have interesting effects.</p></li>
</ol>

<h3>And then the algorithm:</h3>

<p>Testing every 20<sup>th</sup> number whether it's the target is supremely inefficient. Even using steps of 2520 instead isn't that much better.<br>
Consider constructing the result instead:</p>

<ol>
<li><em>r</em> = 1</li>
<li>For <em>i</em> = 2 to the limit

<ul>
<li>If <em>i</em> does not divide <em>r</em>

<ul>
<li>Multiply <em>r</em> by the highest integer-power of <em>i</em> not exceeding the limit.</li>
</ul></li>
</ul></li>
</ol>

<p>Keeping in mind that Project Euler is not really for brute-force or straight-up coding, but figuring out an intelligent approach for manually calculating things:</p>

<ol>
<li>2520 is the least common multiple of the numbers 1 through 10.</li>
<li>Go through 11 to 20, and figure out whether you need an additional factor.<br>
Observation: 4 times the number itself (it's prime), once the fourth root.</li>
<li>That's easily put into a calculator, for the result 232792560.</li>
</ol>

<h3>Putting it all together:</h3>

<pre><code>#include &lt;iostream&gt;

static unsigned long lcm_until(unsigned n) noexcept {
    auto r = 1UL;
    for (auto i = 2UL; i &lt;= n; ++i) {
        if (r % i) { // i is prime
            auto x = i;
            while (x * i &lt;= n)
                x *= i;
            r *= x;
        }
    }
    return r;
}

int main() {
    std::cout &lt;&lt; lcm_until(20) &lt;&lt; '\n';
}
</code></pre>
    </div>