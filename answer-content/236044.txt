<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Code block 1</h1>

<ul>
<li>Please don't use variable names like <code>object</code>, <code>i</code> or <code>y</code>.</li>
<li>Standard indentation in Python is 4 spaces, not a mix between 2 and 4.</li>
<li>Mutating values out of a functions scope isn't best practice. This is because it leads to confusing code.</li>
<li><p>The following snippet is not needed. You can just use <code>names[i]</code>.</p>

<pre class="lang-py prettyprint-override"><code>y = "{0}".format(i + 1)
names[int(y)-1]
</code></pre></li>
<li><p>Rather than <code>findbits</code> I would make a function <code>find_names</code>. Which will return the names that can use the object.</p></li>
<li>Your bit mask, <code>num &amp; 1 &lt;&lt; i</code>, is good. But you can change it to use <code>while num:</code> to allow you to not waste any loops. Since the input you've provided us only goes to <code>1 &lt;&lt; 4</code>, there's not much point in looping all the way to <code>128</code>. And so we can bitshift the other way.</li>
</ul>

<pre class="lang-py prettyprint-override"><code>def find_names(number, names):
    index = 0
    while number:
        if number &amp; 1:
            yield names[index][1]
        number &gt;&gt;= 1
        index += 1


def main(map, ownership):
    output = []
    for obj, number in ownership:
        for name in find_names(int(number), map):
            output.append([name, obj])
    return output


if __name__ == '__main__':
    print(main(
        [['1','alex'],['2','ben'],['4','clark'],['8','dean'],['16','eric']],
        [['radio','3'],['telly','31']],
    ))
</code></pre>

<p>Both my solution and your solution are similar, however my solution bitshifts <code>number</code> downwards, where yours shifts <code>i</code> upwards. This means that you're constantly making <code>1 &lt;&lt; i</code> larger and comparing with <code>number</code>. This means on the first iteration <code>1 &lt;&lt; i</code> is <span class="math-container">\$1\$</span>, in binary form, where on the third iteration it's <span class="math-container">\$100\$</span>, in binary form.</p>

<p>Mine however works the opposite way checking the least significant bit, with <code>number &amp; 1</code>. And so on the first iteration <code>number</code> would be something like <span class="math-container">\$10001001\$</span>. Where on the third iteration it would be <span class="math-container">\$100010\$</span>. This is as <code>&gt;&gt;</code> discards the least significant bit.</p>

<p>I find the following table to highlight the increase and decrease in size of the numbers to help. It's apparent that yours grows to match the bitlength of the original number, where mine shrinks until it reaches zero. The red highlights the bit that we're comparing with on each iteration.</p>

<p><span class="math-container">$$
\begin{array}{l l r l}
\text{iteration} &amp; \text{matching bit}   &amp; \text{Yours - 1 &lt;&lt; i} &amp; \text{Mine - number} \\
0                &amp; 1000100\color{red}{1} &amp;        \color{red}{1} &amp; 1000100\color{red}{1}\\
1                &amp; 100010\color{red}{0}1 &amp;       \color{red}{1}0 &amp; 100010\color{red}{0} \\
2                &amp; 10001\color{red}{0}01 &amp;      \color{red}{1}00 &amp; 10001\color{red}{0}  \\
3                &amp; 1000\color{red}{1}001 &amp;     \color{red}{1}000 &amp; 1000\color{red}{1}   \\
4                &amp; 100\color{red}{0}1001 &amp;    \color{red}{1}0000 &amp; 100\color{red}{0}    \\
5                &amp; 10\color{red}{0}01001 &amp;   \color{red}{1}00000 &amp; 10\color{red}{0}     \\
6                &amp; 1\color{red}{0}001001 &amp;  \color{red}{1}000000 &amp; 1\color{red}{0}      \\
7                &amp; \color{red}{1}0001001 &amp; \color{red}{1}0000000 &amp; \color{red}{1}       \\
\end{array}
$$</span></p>

<h1>Code block 2</h1>

<ul>
<li>We can transfer a lot of the changes from the above code block to the second.</li>
<li>I would split the <code>objects</code> comprehension over multiple lines, as I find it helps with readability.</li>
<li>The variable <code>m</code> is never used and so you can use the name <code>_</code> to denote that it is never used.</li>
<li>I would move the <code>mask</code> iterator into <code>get_ownerships</code> and just generate one in the <code>for</code>. This allows you to generate both the name and the mask with ease.</li>
</ul>

<pre class="lang-py prettyprint-override"><code>import random
import string


def generate_ownerships(amount, limit):
    for _ in range(amount):
        object_name = ''.join(
            random.choice(string.ascii_letters)
            for _ in range(4)
        )
        mask = random.randrange(1, limit)
        yield [object_name, mask]


def find_names(number, names):
    index = 0
    while number:
        if number &amp; 1:
            yield names[index][1]
        number &gt;&gt;= 1
        index += 1


def main(map, ownership):
    output = []
    for obj, number in ownership:
        for name in find_names(int(number), map):
            output.append([name, obj])
    return output


if __name__ == '__main__':
    main(
        [['1','al'],['2','be'],['4','cl'],['8','de'],['16','er'],['32','fa'],['64','ga'],['128','ha'],['256','ia'],['512','ja'],['1024','ka'],['2048','la'],['4096','ma'],['8192','na'],['16384','oa']],
        generate_ownerships(1000, 32767),
    )
</code></pre>

<h1>Further comments</h1>

<ul>
<li><p>The first value in <code>names</code> is never used. As only <code>names[index][1]</code> is used. This means you can change your input so that you only specify the names.</p>

<p>If you would still like to specify the value in any order, <code>[['2', 'be'], ['1', 'al']]</code>, then you can normalize the names. This requires ordering the names by the first value.</p></li>
<li><p>Since this is tagged <a href="/questions/tagged/performance" class="post-tag" title="show questions tagged 'performance'" rel="tag">performance</a> you may be able to get a performance increase if you use an <a href="https://docs.python.org/3/library/functools.html#functools.lru_cache" rel="nofollow noreferrer">LRU cache from <code>functools</code></a>. This will store the <span class="math-container">\$n\$</span> most recently used values to a function so you don't need to regenerate the output.</p>

<p>This would require a small change to <code>find_names</code> to return an iterable rather than an iterator, and to only take hashables. For best performance it would only take <code>number</code>.</p>

<p>It should be noted that this may not lead to a performance gain. The amount of performance gain you get may also change depending on the size of <span class="math-container">\$n\$</span> and so you should test the performance on your data with different values.</p>

<p>If you have both space and time constraints then you can utilize the <a href="https://en.wikipedia.org/wiki/Birthday_problem#Generalizations" rel="nofollow noreferrer">generalized birthday problem</a> to find a rough number to limit the cache to. As it's 50% chance for hits at a fraction the size of the maximum input is a good way to save on both. If this is needed then I will leave it to you to implement.</p></li>
</ul>

<pre class="lang-py prettyprint-override"><code>import functools


def normalize_names(names):
    return [name for _, name in sorted(names, key=lambda i: int(i[0]))]


@functools.lru_cache(maxsize=None)
def find_names(number):
    output = ()
    index = 0
    while number:
        if number &amp; 1:
            output += (index,)
        number &gt;&gt;= 1
        index += 1
    return output


def main(map, ownership):
    output = []
    for obj, number in ownership:
        for index in find_names(int(number)):
            output.append([map[index], obj])
    return output


if __name__ == '__main__':
    print(main(
        normalize_names(
            [['2','ben'],['1','alex'],['4','clark'],['8','dean'],['16','eric']],
        ),
        [['radio','3'],['telly','31']],
    ))
</code></pre>
    </div>