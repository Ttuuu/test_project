<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The second loop can be eliminated by creating a 2D array by tiling the <code>self.x</code> array with the <code>np.tile</code> method. The removal of elements in de 1D array with <code>np.delete</code> can than be replaced with a <em>boolean mask</em> (unfortunately this results in a 1D array which needs to be reshaped).</p>
<p>The calculation of the 2D array can be done outside the first loop, as can be the calculation of <code>lower</code> as they do not depend on <code>x</code>.</p>
<p>See my rewrite of the <code>__call__</code> method:</p>
<pre><code>def __call__(self,x):

    y_interp = np.zeros(len(x))
    
    n = self.degree + 1
    mask =  ~np.eye(n, dtype=np.bool)

    tiled = np.tile(self.x, (n,1))
    masked = np.reshape(tiled[mask], (n, n-1))

    lower = np.prod(self.x[:,np.newaxis] - masked, axis=1)
    
    for i in range(len(x)):

        upper = np.prod(masked -x[i], axis=1)
        
        y_interp[i] = np.sum((upper/lower) * self.y)
           
    return y_interp
</code></pre>
    </div>