<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Fluent API</h3>

<p>Fluent APIs are generally very useful but one has to be very careful with them as there is a chance of making them <em>overfluent</em>. This means that you try to create an API for every possible combination like:</p>

<blockquote>
<pre><code>  var validator = Validator.For&lt;Person&gt;(ValidationStopConditions.RunAll)
    .WarnIfTrue(p =&gt; p.Age &gt; 50, "Person is older than 50")
    .WarnIfFalse(p =&gt; p.Age &lt; 50, "Person is older than 50")
    .NotNull(p =&gt; p.LastName, "LastName is null")
    .MustBeNull(p =&gt; p.LastName, "LastName should be null")
    .IsTrue(p =&gt; p.FirstName.Length &gt; 3, "First Name is too short")
    .IsFalse(p =&gt; p.FirstName.StartsWith("Cos"), "First Name starts with Coo")
    .Match(p =&gt; p.Address.Street, @"^Sesa(m|n)e Street$", "Street Name doesn't conform to the pattern");
</code></pre>
</blockquote>

<p>Instead, I think it's better to make them composable so that end-users have the freedom of creating expressions not anticipated by the API creator. (I made this mistake in my utility too (by having <code>Null</code> and <code>NotNull</code> instead of using a <em>modifier</em>) so I have redesigned it since).</p>

<p>This would both reduce the number of available APIs and the learning curve for the end-user and make also coding and testing easier because there would be much less combinations.</p>

<p>Consider this:</p>

<pre><code>Validator
   .For&lt;Person&gt;()
   .True(p =&gt; p.Age &gt; 50)
      // then modifiers can be chained...
      .Exclude() // &lt;- or Exclude/Not/Negate etc,
      .Require() // &lt;- upgrades this check to yield an error instead of a warning
</code></pre>

<p>Without such <em>modifiers</em> like <code>Exclude/Not</code> or <code>Warn</code> you would need to create these versions for each and every rule. Then you add a new one... and you can create it three or four times again. Now, what happens if you create a new modifier? You'll have to create even more versions of all existing APIs. You would end up with so many of them...</p>

<h3>Consistency</h3>

<p>There should be more consistency between the APIs. So, when there is <code>MustBeNull</code> then there should also be <code>MustBeTrue</code> instead of just <code>IsTrue</code>, etc.</p>

<h3>Validation levels</h3>

<p>I like that idea of having results other than just black-n-white but also a <em>gray</em> <code>Warning</code> inbetween. This opens a bunch of whole new possibilities such as fixing property values.</p>

<h3>Handling validations</h3>

<p>I think the first <em>switch</em> is (might be) dagerous:</p>

<blockquote>
<pre><code>  public enum ValidationStopConditions
  {
    RunAll = 1,
    StopOnFailure = 2,
    StopOnWarning = 3
  }
</code></pre>
</blockquote>

<p>I haven't exactly analyzed how rules are handled but it might crash when <code>person.FirstName</code> is <code>null</code> and later <code>person.FirstName &gt; 3</code> is used. The idea of having <code>Error</code> rule was to break here because it's pointless to check other conditions that rely on that one. This should signal an <em>unrecoverable</em> validation error. But I guess it just yields through all other rules (according to ROP).</p>

<h3>Creating &amp; compiling expressions</h3>

<p>Expressions can be very tricky but they are at the same time super useful for generating error messages and it's nice to see that model here too. However some of them are less useful than other. Let's take a look at this one:</p>

<blockquote>
<pre><code>  var getter = expression.Compile();
  Predicate&lt;T&gt; predicate = source =&gt; Regex.IsMatch(getter(source), pattern);
</code></pre>
</blockquote>

<p>The generated expression string won't show the <code>Regex.IsMatch</code> because it's not part of the expression. Unless it's by design, I suggest the follwing approach (taken from my new APIs). Here, you build a new expression containing all calls so that they are rendered into the final string.</p>

<pre><code>    public static LambdaExpression Match&lt;T&gt;(Expression&lt;Func&lt;T, string&gt;&gt; expression, string pattern, RegexOptions options)
    {
        var isMatchMethod = typeof(Regex).GetMethod(nameof(Regex.IsMatch), new [] { typeof(string), typeof(string), typeof(RegexOptions) });
        return
            Expression.Lambda(
                Expression.Call(
                    isMatchMethod,
                    expression.Body,
                    Expression.Constant(pattern),
                    Expression.Constant(options)),
                expression.Parameters
            );
    }
</code></pre>

<h3>Naming</h3>

<p>I would rename the <code>ValidateExpressionVisitor</code> to something more intuitive like <code>ValidationMessageCreator</code>. It doesn't have to have the <code>Visitor</code> ending as it rarely fits into what a visitor is actually doing. I suggest dropping that suffix.</p>
    </div>