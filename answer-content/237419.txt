<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>class Node(object):

    def __init__(self, item, left=None, right=None):
        self.item = item
        self.left = None
        self.right = None
</code></pre>

<p>The parameters <code>left</code> and <code>right</code> are not used in the constructor!  Remove them, or actually use them.</p>

<hr>

<pre><code>    def _add(self, value):
        new_node = Node(value)

        if not self.item:
            self.item = new_node
        ...
</code></pre>

<p>Given <code>self.item</code> is unconditional set in the constructor, this first test seems unnecessary.</p>

<pre><code>        elif not self.left:
            self.left = new_node
        elif not self.right:
            self.right = new_node
</code></pre>

<p>Your binary tree does not seem to have any ordering imposed on the left/right nodes.  If there is no left node, you create one even if the new value is larger than the current node.  Similarly, if there is a left node, but no right node, you create a right node even if the value is smaller than the current node.  </p>

<pre><code>        else:
            self.left = self.left._add(value)
        return self
</code></pre>

<p>Finally, if both left and right exist, you unconditionally add the new node to the left sub tree, which will create a very unbalanced tree.  Moreover, the newly created <code>new_node</code> is discarded, to be recreated by the <code>_add()</code> method one level down, so is wasteful.  And the sole purpose of <code>return self</code> seems to be so that there is a return value to assign to <code>self.left</code>, which results in the the original value <code>self.left</code> being assigned to itself, so again useless busy work.</p>

<blockquote>
  <p>A binary tree does not have any ordering imposed - nodes are added in the following preference: <code>root</code> -&gt; <code>left</code> -&gt; <code>right</code>. Ordering is imposed i[sic] a binary search tree.  â€“ <a href="https://codereview.stackexchange.com/users/169130/saurabh">Saurabh</a></p>
</blockquote>

<p>With your sample code, adding the values 1 to 10 to your <code>BinaryTree</code>, you get the following "tree":</p>

<pre><code>                           1
                          / \
                         2   3
                        / \
                       4   5
                      / \
                     6   7
                    / \
                   8   9
                  /
                10   
</code></pre>

<p>This is not really a binary tree; it is a stick with leaves.  It could be represented as a list of tuples: <code>[(1,3), (2,5), (4,7), (6,9), (8,), (10,)]</code>.</p>

<p>If you wish to create a general binary tree, which does not impose an ordering, you need to include methods for building the desired tree, such as finding the "5" node, and explicitly adding to the right branch.  A generic <code>add_node()</code> doesn't have enough detail to control how the tree is built.</p>
    </div>