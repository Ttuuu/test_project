<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Musing on this question some more, it occurred to me that Pascals Triangle is of course completely constant and that generating the triangle more than once is in fact an overhead.</p>

<p>Whatever function is used to generate the triangle, caching common values would save allocation and clock cycles.</p>

<p>Something like this would help,</p>

<pre><code>private static readonly int[] Row0 = { 1 };
private static readonly int[] Row1 = { 1, 1 };
private static readonly int[] Row2 = { 1, 2, 1 };
private static readonly int[] Row3 = { 1, 3, 3, 1 };
private static readonly int[] Row4 = { 1, 4, 6, 4, 1 };
private static readonly int[] Row5 = { 1, 5, 10, 10, 5, 1 };
private static readonly int[] Row6 = { 1, 6, 15, 20, 15, 6, 1 };
private static readonly int[] Row7 = { 1, 7, 21, 35, 35, 21, 7, 1 };
private static readonly int[] Row8 = { 1, 8, 28, 56, 70, 56, 28, 8, 1 };
private static readonly int[] Row9 = { 1, 9, 36, 84, 126, 126, 84, 36, 9, 1 };

private static int[][] Triangle(byte n) =&gt;
    n switch
    {
        0 =&gt; new[] { Row0 },
        1 =&gt; new[] { Row0, Row1 },
        2 =&gt; new[] { Row0, Row1, Row2 },
        3 =&gt; new[] { Row0, Row1, Row2, Row3 },
        4 =&gt; new[] { Row0, Row1, Row2, Row3, Row4 },
        5 =&gt; new[] { Row0, Row1, Row2, Row3, Row4, Row5 },
        6 =&gt; new[] { Row0, Row1, Row2, Row3, Row4, Row5, Row6 },
        7 =&gt; new[] { Row0, Row1, Row2, Row3, Row4, Row5, Row6, Row7 },
        8 =&gt; new[] { Row0, Row1, Row2, Row3, Row4, Row5, Row6, Row7, Row8 },
        9 =&gt; new[] { Row0, Row1, Row2, Row3, Row4, Row5, Row6, Row7, Row8, Row9 },
        _ =&gt; throw new ArgumentOutOfRangeException(nameof(n))
    };
</code></pre>
    </div>