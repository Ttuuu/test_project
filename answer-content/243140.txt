<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You described the idea very clearly, thanks for the example that you gave.</p>

<p>The code looks only half-baked though.</p>

<p>The most important part in getting the code right is to know all involved concepts and how these are called officially. When you know the correct names, you can search for them, and most probably someone else has already programmed everything you need, you just need to stick the parts together.</p>

<p>The official term for the lines from <code>Links.txt</code> is URL or URI. These have a well-known format, and Python provides a module to extract the various parts from URLs. For example, googling for "python split url" directly links to the <a href="https://docs.python.org/3/library/urllib.parse.html" rel="nofollow noreferrer">Python urllib module</a>, which provides a few examples with their corresponding code.</p>

<p>The part of the URL that you are interested in is called the <code>hostname</code>. For the Walmart URL you gave, this would be <code>www.walmart.com</code>.</p>

<p>Finding the "most interesting part" of a hostname is not as trivial as it may seem at first. There are countries in which the "top-level domain" actually consists of two parts, for example the University of London can be found at <code>london.ac.uk</code>. Once you know the terms "domain" and "top-level" and "second-level", you can google for it at find <a href="https://stackoverflow.com/questions/4916890/extract-2nd-level-domain-from-domain-python">this question</a>.</p>

<p>To test and improve your code, you should split up the work into several small tasks. One of these tasks is to find the "interesting part of the host name" of a URL. In Python, you define a function for this:</p>

<pre class="lang-py prettyprint-override"><code>def main_host_name(url: str) -&gt; str:
    ...
</code></pre>

<p>By giving a name to this function and explicitly declaring the parameter and return type, you give the reader of your code a lot of helpful information. It's also easier to test simple pieces of code like this function, rather than the code that reads a whole file and transforms all the links in it.</p>

<p>The variable names in your code are mostly confusing. The computer does not care how you name the variables, but human readers do. By convention, the variable <code>f</code> stands for a file. In your code though, you store a list of lines in it. Therefore a better name for the <code>f</code> at the top of the code is <code>lines</code>.</p>

<p>Next, you wrote <code>for i in f</code>. This is too cryptic. It's much easier if the code reads <code>for line in lines</code>.</p>

<p>At the bottom of the code you do something very unusual. You assign a value of a <em>different type</em> to the same variable that you already used before. In the upper half of the code, <code>f</code> is a list of strings, and in the lowest part of the code, it's a file. That's confusing for human readers.</p>

<p>There is no need that you only use 3 different variable names. You can (almost) choose whatever name you want for the variables. There is absolutely no requirement to have single-letter names. That was common in the 1970s and still is in code from mathematicians or physicists, but that's only because these people are accustomed to abbreviated names.</p>
    </div>