<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The sad fact is that your code should be even uglier. If <code>f()</code> throws an exception, you won't restore the resources correctly.</p>

<p>Idiomatic OCaml recommends that a recurring pattern can be described with a function. So you would define a function that takes:</p>

<ul>
<li>a resource (<code>'a</code>)</li>
<li>a function to execute with the resource (<code>'a -&gt; 'b</code>)</li>
<li>and a function to free the resource (<code>'a -&gt; unit</code>)</li>
</ul>

<p>The signature becomes:</p>

<pre><code>val bracket : 'a -&gt; ('a -&gt; 'b) -&gt; ('a -&gt; unit) -&gt; 'b
</code></pre>

<p>The <code>bracket</code> function would do the ugly <code>let res = f()</code> thing, but also wrap it with a <code>try-catch</code>.</p>

<p>UPDATE: The next version of OCaml (v4.08.0) looks like it will have a <code>finally</code>-type function added to the standard library: <a href="https://github.com/ocaml/ocaml/pull/1855" rel="nofollow noreferrer">https://github.com/ocaml/ocaml/pull/1855</a></p>
    </div>