<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Update: Runnable Example: <a href="https://dotnetfiddle.net/qPCoKu" rel="nofollow noreferrer">https://dotnetfiddle.net/qPCoKu</a></p>

<p>Update: 2018-10-26 Tweaked code slightly so the CSV piece returns an array then uses <code>AddRange</code> to add values to the lists, instead of having to pass a reference to the lists themselves (i.e. allows more consistent behavior, and gives more re-usable code).  Also includes an extension method to provide <code>AddRange</code> on an <code>IList&lt;T&gt;</code>.</p>

<hr>

<p>I've made a few assumptions about what your classes look like / outlined those in the code below.</p>

<p>I'm not sure what benefit <code>FhirSearchExtensions.RequestParameterNames</code> adds, as it seems you've already got your parameter names defined in <code>FhirRequestParameters</code>; so you may be duplicating effort there... but without knowing more I can't really comment.</p>

<p>Beyond that, you've correctly identified that there's a lot of repetition in your code which makes for a good refactor candidate.  I've attempted to do this by having one method to fetch back the values from your requestParameters object, and allowing that to take a function which can convert from the string to the required type / returning default values where applicable.</p>

<p>I've put the split to  list piece in a separate function to the passed function, since your code assumes that the list has already been initialised; so I don't want to overwrite the existing value, but rather only add the new items to this existing list.</p>

<p>Hopefully the code speaks for itself.  Apologies for any issues; knocked up in a text editor / untested so far...  Please let me know in the comments if any questions or issues.</p>

<pre><code>//assumption: your parameters are in an IDictionary:
//public class ProviderRequestParameters{public IDictionary&lt;string,string&gt; RequestParameters{get;}}
public class SearchParameterSet
{
    //Assumption: based on your code I assume you have properties something like this
    public ProviderRequestParameters ProviderParameters {get;set;}
    private IList&lt;string&gt; patientIds = new List&lt;string&gt;();
    public IList&lt;string&gt; PatientIds {get{return patientIds;} set {patientIds = value;}} 
    private IList&lt;string&gt; caseIds = new List&lt;string&gt;();
    public IList&lt;string&gt; CaseIds {get{return caseIds;} set {caseIds = value;}} 
    public DateTime DateFrom {get;set;} 
    public DateTime DateTo {get;set;} 
    public string Profile {get;set;} 
    public string Format {get;set;} 
    public string ResourceType {get;set;} 
    public string User {get;set;} 

    //actual changes below based on the above assumptions
    public SearchParameterSet(ProviderRequestParameters requestParameters)
    {
        var rParams = requestParameters.RequestParameters;

        ProviderParameters = requestParameters;

        PatientIds.AddRange(RequestParameterHelper.GetValueOrDefault&lt;IEnumerable&lt;string&gt;&gt;(rParams, FhirRequestParameters.ByPatient, RequestParameterHelper.ReturnCsvStrings));
        CaseIds.AddRange(RequestParameterHelper.GetValueOrDefault&lt;IEnumerable&lt;string&gt;&gt;(rParams, FhirRequestParameters.ByCase, RequestParameterHelper.ReturnCsvStrings));
        DateFrom = RequestParameterHelper.GetValueOrDefault&lt;DateTime&gt;(rParams, FhirRequestParameters.ByDateFrom, RequestParameterHelper.ReturnDate);
        DateTo = RequestParameterHelper.GetValueOrDefault&lt;DateTime&gt;(rParams, FhirRequestParameters.ByDateTo, RequestParameterHelper.ReturnDate);
        Profile = RequestParameterHelper.GetValueOrDefault&lt;string&gt;(rParams, FhirRequestParameters.Profile, RequestParameterHelper.ReturnString);
        Format = RequestParameterHelper.GetValueOrDefault&lt;string&gt;(rParams, FhirRequestParameters.Format, RequestParameterHelper.ReturnString);
        ResourceType = RequestParameterHelper.GetValueOrDefault&lt;string&gt;(rParams, FhirRequestParameters.ResourceType, RequestParameterHelper.ReturnString);
        User = RequestParameterHelper.GetValueOrDefault&lt;string&gt;(rParams, FhirRequestParameters.ByUser, RequestParameterHelper.ReturnString);
    }
}

public static class RequestParameterHelper
{
    public static T GetValueOrDefault&lt;T&gt;(IDictionary&lt;string, string&gt; requestParameters, string key, Func&lt;string, T&gt; parseValue)
    {
        string value = null;
        var parameterName = FhirSearchExtensions.RequestParameterNames[key]; //Ideally we wouldn't need this, but I don't know your code well enough to say if we can remove it
        requestParameters.TryGetValue(parameterName, out value); //or use key if the above line can be removed
        return parseValue(value);   
    }
    public static string ReturnString(string value)
    {
        return value;
    }
    public static DateTime ReturnDate(string value)
    {
        return DateTime.TryParse(value, out DateTime result) ? result : DateTime.MinValue;
    }
    public static IEnumerable&lt;string&gt; ReturnCsvStrings(string value)
    {
        if (value == null) return Enumerable.Empty&lt;string&gt;();
        return value.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
    }
}



public static class IListExtension //thanks to https://stackoverflow.com/a/33104162/361842
{
    public static void AddRange&lt;T&gt;(this IList&lt;T&gt; list, IEnumerable&lt;T&gt; items)
    {
        if (list == null) throw new ArgumentNullException("list");
        if (items == null) throw new ArgumentNullException("items");

        if (list is List&lt;T&gt;)
        {
            ((List&lt;T&gt;)list).AddRange(items);
        }
        else
        {
            foreach (var item in items)
            {
                list.Add(item);
            }
        }
    }
}
</code></pre>
    </div>