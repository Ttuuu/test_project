<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Overall, a  nicely laid our design and implementation.</p>

<ol>
<li>Is there any bugs or improvements?</li>
</ol>

<p><strong><code>int</code> vs. <code>size_t</code></strong></p>

<p>Rather than use <code>int</code>, consider <code>size_t</code> for lengths, <code>.cap</code> and sizing.  It is the type that supports all array indexing, unlike <code>int</code>.</p>

<p>Even if stuck on using <code>int</code>, consider below.  As <code>int</code>, the product can overflow as <code>int</code>, but not <code>size_t</code>.</p>

<pre><code>// realloc(m-&gt;buf, (m-&gt;cap + 1) * m-&gt;item_len);
realloc(m-&gt;buf, (size_t)(m-&gt;cap + 1) * m-&gt;item_len);
</code></pre>

<p><strong>Information hiding</strong></p>

<p>Rather than user code using <code>m-&gt;cnt</code>, consider a helper function <code>map_count(m)</code>, could even be <code>inline</code>.</p>

<p>The <a href="https://en.wikipedia.org/wiki/Information_hiding" rel="nofollow noreferrer">goal</a> is for user code to not <em>know</em> about the details and members of <code>map</code>.</p>

<p><strong>Deeper Information hiding</strong></p>

<p>Allocate <code>map</code> as part of the initialization.  Then only <code>map*</code> needed in <code>map.h</code> and the entire <code>map</code> structure is hidden in map.c</p>

<p><strong><code>NULL</code> valid to add?</strong></p>

<p>Since <code>NULL</code> is return in getting, perhaps test if <code>data == NULL</code> on adding.</p>

<pre><code>assert(data);
</code></pre>

<p><strong>include order</strong></p>

<p>To test that <code>map.h</code> does not rely on any <em>includes</em>, let <code>map.h</code> be first in map.c</p>

<pre><code>// #include &lt;assert.h&gt;
#include "map.h"
#include &lt;assert.h&gt;
</code></pre>

<p><strong>map.h only include what is needed for map.h</strong></p>

<pre><code>#include &lt;stddef.h&gt;
//#include &lt;stdbool.h&gt;
//#include &lt;stdint.h&gt;
//#include &lt;stdlib.h&gt;
//#include &lt;string.h&gt;
</code></pre>

<p><strong>Documentation</strong></p>

<p>Often a user only has access or cares about the.h file.  Add info there to describe the functions and the overall goals.</p>

<p><strong><code>const</code></strong></p>

<p><code>map_find(Map *m, void *key, int *idx)</code> shouldn't modify the <code>map</code> structure. </p>

<pre><code>// void *map_find(Map *m, void *key, int *idx) {
void *map_find(cont Map *m, void *key, int *idx) {

  // if (m-&gt;cmpfunc == NULL) m-&gt;cmpfunc = memcmp;
  map_cmp cmpfunc = (m-&gt;cmpfunc == NULL) ? memcmp : m-&gt;cmpfunc;
  // or put m-&gt;cmpfunc = memcmp in map_init()
</code></pre>

<p><strong><code>void *</code> vs. <code>char *</code></strong></p>

<p>Using <code>char *</code> has no disadvantages here and reduces casting.</p>

<pre><code> //void *buf;  
 char *buf;  
</code></pre>

<p><strong>Avoid overflow</strong></p>

<p>For large values...</p>

<pre><code>// int middle = (first + last) / 2;
int middle = first + (last - first) / 2;
</code></pre>

<ol start="2">
<li>I simply used sorted dynamic array to store the data, how about performance and scalability of the design?</li>
</ol>

<p><strong>scalability</strong></p>

<p>See above discussion about <code>size_t</code> vs. <code>int</code>.</p>

<ol start="3">
<li>Is there any better algorithm to set capacity of the buffer?</li>
</ol>

<p><strong><code>realloc()</code></strong></p>

<p>Rather than increasing the <code>cap</code> by 1, I'd double it.</p>

<p><strong>Other</strong></p>

<p>Need to think on it.</p>
    </div>