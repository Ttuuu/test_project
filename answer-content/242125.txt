<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Unfortunately, this is not very good code, for several reasons.</p>
<p>First, I'm not certain what need you have for this kind of list to begin with. It is almost always more convenient to know the size of the data in advance, rather than relying on a NULL sentinel value. You could combine the two though, having both a "count" and the sentinel.</p>
<p>Though lets suppose you come up with a need for this list as-is; then question if it has to be heap allocated with read/write access. Because if you can drop that part, the code could be massively simplified into a plain read-only look-up table:</p>
<pre><code>const char** get_list (void)
{
  static const char* items[] = {"John", "Jane", NULL };
  return &amp;items[0];
}
</code></pre>
<p>Notably, it would have been more convenient if we knew the table size and don't have to rely on the NULL sentinel value, because that would enable the caller to write faster code with random access to any item. (That is, <code>if(i &lt; size) access(array[i])</code> directly rather than to slowly loop and count until item <code>i</code> is found, if it exists.)</p>
<p>So maybe consider <code>const char** get_list (size_t* size)</code> instead, where the size 2 can be optionally returned through parameter.</p>
<hr>
<p>Dissecting the code that you have, here are some remarks:</p>
<ul>
<li><p>Never write functions with empty parenthesis <code>char **getList()</code>. This is obsolete style in C and might not work in future revisions of the language. Write an explicit <code>(void)</code> instead. (C and C++ are different here.)</p>
</li>
<li><p><code>char **items</code> should be <code>const</code> qualified. Whenever you have a pointer to a string literal, always const-qualify it, no exceptions.</p>
</li>
<li><p>There isn't a need to run-time calculate the array size inside the function, since it is known there. The array size is <code>size_t size = sizeof items / sizeof *items</code>, which can be computed at compile-time. <code>-1</code> to not count the sentinel value. Again, it is much more convenient to know the size instead of iterating for a terminating sentinel value.</p>
</li>
<li><p>The "on error goto" design pattern is only meaningful here if you do actual clean-up upon error. Otherwise you could just <code>return NULL</code>. Instead you should have <code>err: free(data);</code> at the end of the function and you won't have any leaks, because <code>free(NULL)</code> is well-defined to be a no-op. If you don't write the code like that, then <code>if (data[i] == NULL) goto err;</code> leaks memory.</p>
<p>(Which is a nit-pick, because if any malloc fails, your program is toast and needs to terminate anyway. But this way you keep tools like Valgrind happy.)</p>
</li>
<li><p>As a design rule of thumb, whoever did the <code>malloc</code> is responsible for doing the <code>free</code>. You shouldn't outsource the <code>free</code> to the caller, that's bad API and is exactly how millions of defective C programs throughout history have created memory leaks before you. Instead create a function inside the same file as <code>get_list</code> for this purpose: <code>void free_list (char** list)</code> that does the clean-up.</p>
</li>
<li><p>Don't mix user I/O with algorithms. That is, leave the printing of error messages to the caller.</p>
</li>
</ul>
    </div>