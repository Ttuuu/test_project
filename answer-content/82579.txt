<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Code which is commented out is dead code which should be deleted to increase readability.  </p>

<hr>

<p>Using correct indention will add readability.  </p>

<blockquote>
<pre><code>            while (testCases &gt; 0) {

            Integer lng = scanInput.nextInt();
            if(lng!=0){
            int[] sortArray= new int[lng];
                long stime=System.currentTimeMillis();
                for (int i = 0; i &lt; lng; i++) {
                Integer test = scanInput.nextInt();
                sortArray[i] = test;
            }
</code></pre>
</blockquote>

<p>looks strange and not readable while  </p>

<pre><code>            while (testCases &gt; 0) {
                Integer lng = scanInput.nextInt();
                if(lng!=0){
                    int[] sortArray= new int[lng];
                    long stime=System.currentTimeMillis();
                    for (int i = 0; i &lt; lng; i++) {
                        Integer test = scanInput.nextInt();
                        sortArray[i] = test;
                    }
</code></pre>

<p>looks much more readable. Your IDE will have some kind of keyboard shortcut to automatically format your source.   </p>

<hr>

<p>You should always code against interfaces rather than against concrete implementations.  </p>

<blockquote>
<pre><code>ArrayList&lt;Integer&gt; buckets[] = new ArrayList[bucketCount];  
</code></pre>
</blockquote>

<p>should be  </p>

<pre><code>List&lt;Integer&gt; buckets[] = new ArrayList[bucketCount];  
</code></pre>

<hr>

<p>Using braces <code>{}</code> for single line <code>if</code> statements also, makes your code less error prone.  </p>

<hr>

<p>Variables should be declared as near as possible to their usage.  </p>

<blockquote>
<pre><code>double interval = ((double)(high - low + 1))/bucketCount; //range of one bucket

ArrayList&lt;Integer&gt; buckets[] = new ArrayList[bucketCount];
for (int i = 0; i &lt; bucketCount; i++) { //initialize buckets
    buckets[i] = new ArrayList();
}

for (int i = 0; i &lt; array.length; i++) { //partition the input array
    buckets[(int)((array[i] - low)/interval)].add(array[i]);
}
</code></pre>
</blockquote>

<p>should be  </p>

<pre><code>ArrayList&lt;Integer&gt; buckets[] = new ArrayList[bucketCount];
for (int i = 0; i &lt; bucketCount; i++) { //initialize buckets
    buckets[i] = new ArrayList();
}

double interval = ((double)(high - low + 1))/bucketCount; //range of one bucket
for (int i = 0; i &lt; array.length; i++) { //partition the input array
    buckets[(int)((array[i] - low)/interval)].add(array[i]);
}
</code></pre>

<hr>

<p>You should let your variables have some space to breathe.  </p>

<blockquote>
<pre><code>double interval = ((double) (high - low + 1))/bucketCount;
</code></pre>
</blockquote>

<p>should be  </p>

<pre><code>double interval = ((double) (high - low + 1)) / bucketCount;
</code></pre>
    </div>