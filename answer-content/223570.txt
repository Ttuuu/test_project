<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>timing</h1>

<p>Put the code to time the run time of the function outside of the function</p>

<h1>augmented assignment</h1>

<p><code>value = (value // i)</code> can be expressed as <code>value //= i</code></p>

<h1><code>divisors</code></h1>

<p>Why do you need to keep a list of divisors. They only as for the largest one. The largest one will always be the last one, so you just need to remember this</p>

<h1>pep-8</h1>

<ul>
<li>your variable names are clear and in the correct format, apart from <code>i</code>. I would rename that to <code>divisor</code> or <code>prime</code></li>
<li>The spacing around the operators and <code>(</code> is inconsistent</li>
<li>the <code>if i &gt;= 3: i += 2</code> on one line is advised against</li>
</ul>

<h1>increments</h1>

<pre><code>    if i &gt;= 3: i += 2 #when i is bigger than 3, search divisors among odd numbers( this reduces the search field)
    else: i += 1  
</code></pre>

<p>can be simplified to <code>i += (2 if i &gt;= 3 else 1)</code> or even <code>i += 1 + (i &gt;= 3)</code>, using the fact that <code>int(True)</code> is <code>1</code>. But here you don't use the fact that your divisors are all primes. A quicker process would be to get the next possible divisor from a prime generator, instead of incrementing by 2 manually</p>

<h1>while loop</h1>

<p>You can integrate the <code>if i == 1 : break</code> into the condition for the while loop: <code>while value % prime == 0 and value != 1:</code></p>

<hr>

<pre><code>def largest_prime_divisor(value):
    largest_divisor = 1
    for prime in prime_generator():
        while value % prime == 0 and value != 1:
            value //= prime 
            largest_divisor = prime 
    return largest_divisor
</code></pre>

<p>Possible implementations of <code>prime_generator</code> can be found in dozens of SO and Code review posts</p>

<h1>shortcut</h1>

<p>If the divisor is larger than the square root of the value, you know the next divisor will be the value itself, so you can shortcut when the divisor exceeds this</p>

<pre><code>def largest_prime_divisor(value):
    largest_divisor = 1
    for prime in prime_generator():
        while value % prime == 0:
            value //= prime 
            largest_divisor = prime 
        if prime ** 2 &gt; value:
            return max(largest_divisor, value)
    return largest_divisor
</code></pre>
    </div>