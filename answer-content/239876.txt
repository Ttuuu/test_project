<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think most people would be surprised and annoyed by an iterator that mutated previously yielded values every time you called <code>next</code>. While it makes sense to take what you can from the <em>concept</em> of an iterator, the thing you're trying to make isn't an iterator. (Perhaps the idea of a "cursor" would be more applicable, IDK.)</p>

<p>Your proposed interface <code>{hasCurrent, getCurrent, generateNext}</code> seems fine. I do have some questions/suggestions. </p>

<ol>
<li>If <em>not</em> <code>x.hasCurrent()</code>, does <code>x.getCurrent()</code> return null, or throw an exception, or what?</li>
<li>Depending on 1 (particularly if it <em>doesn't</em> throw an exception), <code>.getCurrent()</code> sounds more like a read-only property, in which case just call it <code>.current()</code>. (or <em>maybe</em> even just <code>.value</code>)</li>
<li><code>.generateNext()</code> specifically doesn't <em>make</em> anything (because we're supposing that would be expensive); it changes the thing in question. Therefore maybe call it <code>.mutate()</code> or <code>.becomeNext()</code></li>
<li>A <code>void</code> return is usually a wasted opportunity, even if just for a little extra debugging context. Exactly what will be best to return here depends on exactly how this is going to be used. Returning boolean success might save you a call to <code>.hasNext()</code>; returning <code>T</code> might save you a call to <code>.current()</code>. Probably boolean is better, but it's hard to say.</li>
</ol>
    </div>