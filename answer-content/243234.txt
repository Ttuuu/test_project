<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>What are the various ways to improve the code(?)</p>
</blockquote>

<p><strong>PI</strong></p>

<p>Why code a coarse machine pi as used in <code>double</code> math (good to 15+ decimal places) when a better value is a copy and paste away?</p>

<p>Some systems provide <code>M_PI</code>.  That is non-standard.</p>

<pre><code>#ifdef M_PI
#define PI M_PI
#else
// #define PI 3.141592654
#define PI    ‭3.1415926535897932384626433832795‬
#endif
</code></pre>

<p><strong>Old style declaration</strong></p>

<p><code>load();</code> does not declare the return type nor the parameters.</p>

<pre><code>// load(); 
void load(void); 
</code></pre>

<p><strong>FP precision</strong></p>

<p><code>"%.5f"</code> makes small answers all "0.00000" and large values verbose 123456789012345.00000.  Recommend instead <code>%.5g</code> which shifts to exponential notation for large and small values.</p>

<p><strong>Code re-use</strong></p>

<p>Below code repeated many times.  Use a helper function.</p>

<pre><code>void print_results(double NUm1, int oper, double Num2, double ans) {
  printf("Here is your answer:\n%f  %c %f = %.5f (To 5 decimal places)\n\n", 
      Num1, oper, Num2, ans);
  Sleep(2450);
}
</code></pre>

<p>Samples calls</p>

<pre><code>     ...
     } else if (oper == '-'){
       print_results(Num1, oper, Num2, Num1 - Num2);
     } else if (oper == '/'){
       print_results(Num1, oper, Num2, Num1 / Num2);
     }
     ...
</code></pre>

<p><strong>Advanced: <code>sind(deg)</code> for large <code>deg</code></strong></p>

<p>When code is attempting to do trig on large degree values, rather than scale by <code>PI/180</code> and then call <code>sin(), cos(), ...</code>, perform argument reduction in degrees as that can be done exactly - then scale.  You will get better answers for large degree values.  <a href="https://stackoverflow.com/q/31502120/2410359">Sin and Cos give unexpected results for well-known angles</a>.  Of course when only printing a few digits, you may not <em>see</em> this improvement often, yet it is there.</p>

<pre><code>    // ans = (sin (Num1 * PI/180));
    ans = fmod(Num1, 360);
    ans = sin(Num1 * PI/180);
</code></pre>

<p><strong>Simplify</strong></p>

<p>With digits, a range test can be used</p>

<pre><code>// if (Opt != '1' &amp;&amp; Opt!= '2' &amp;&amp; Opt!= '3' &amp;&amp; Opt != '4'){
if (Opt &lt; '1' || Opt &gt; '4') { 
</code></pre>

<blockquote>
  <p>My requirement requires me to have indentation. I am unsure how to apply that indentation in my code.</p>
</blockquote>

<p>Life is too short to <em>manually</em> indent.  Use (or find) your IDE's code formatter and use that.</p>

<pre><code>    // OP's
    if (oper == '+'){
        ans = (Num1 + Num2);
        printf("Here is your answer:\n%f  %c %f = %.5f (To 5 decimal places)\n\n", Num1, oper, Num2, ans);
        Sleep(2450);
        } else if (oper == '-'){
        ans = (Num1 - Num2);
        printf("Here is your answer:\n%f  %c %f = %.5f (to 5 decimal places)\n\n", Num1, oper, Num2, ans);
        Sleep(2450);
        } else if (oper == '/'){
        ans = (Num1 / Num2);
        printf("Here is your answer:\n%f  %c %f = %.5f (to 5 decimal places)\n\n", Num1, oper, Num2, ans);
        Sleep(2450);
</code></pre>

<p>vs.</p>

<pre><code>     // Eclipse
    if (oper == '+') {
      ans = (Num1 + Num2);
      printf("Here is your answer:\n%f  %c %f = %.5f (To 5 decimal places)\n\n", Num1, oper, Num2, ans);
      Sleep(2450);
    } else if (oper == '-') {
      ans = (Num1 - Num2);
      printf("Here is your answer:\n%f  %c %f = %.5f (to 5 decimal places)\n\n", Num1, oper, Num2, ans);
      Sleep(2450);
    } else if (oper == '/') {
      ans = (Num1 / Num2);
      printf("Here is your answer:\n%f  %c %f = %.5f (to 5 decimal places)\n\n", Num1, oper, Num2, ans);
      Sleep(2450);
</code></pre>
    </div>