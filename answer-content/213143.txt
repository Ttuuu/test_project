<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I was going to use lens, but everything worked out mundanely. :/</p>

<pre><code>-- is there a path from `source` to `target` in `bound` steps
guessPath :: Int -&gt; Vertex -&gt; Vertex -&gt; NonDet ()
guessPath bound source target = nonDeterministicWalk source bound where
  nonDeterministicWalk v bound = do
    guard $ bound &gt;= 0
    unless (v == target) $ do
      w &lt;- getNextVertex v
      nonDeterministicWalk w (bound - 1)

-- figure out the number of vertices reachable from source
-- in `steps` steps
countReachable :: [Vertex] -&gt; Int -&gt; Vertex -&gt; NonDet Int
countReachable vertices steps source = if steps &lt;= 0 then return 1 else do
  previouslyReachable &lt;- countReachable vertices (steps - 1) source
  fmap sum $ for vertices $ \v -&gt; (`evalStateT` False) $ do
    -- the state flag witnesses that 
    -- v has at most distance 1 from u
    guard . (== previouslyReachable) . sum =&lt;&lt; vertices `for` \u -&gt;
      -- guess if u reachable from the source in (steps - 1) steps
      return 0 &lt;|&gt; 1 &lt;$ do -- if not, then we can move ahead to the next u
        -- since we guessed that u is reachable, we should verify it
        guessPath (steps - 1) source u
        if u == v then put True
        else do
          neighbor &lt;- lift $ getNextVertex u
          when (u == neighbor) $ put True
          -- if v is neither u nor a neighbor of u,
          -- we just move to the second iteration
    -- if v was at most distance 1 from u, which
    -- we verfied to be a vertex reachable in
    -- (steps - 1) steps, then v is reachable
    -- in steps steps
    gets $ bool 0 1

-- finally put all the methods together and show that
-- target is unreachable from source
certifyUnreach :: [Vertex] -&gt; Vertex -&gt; Vertex -&gt; NonDet ()
certifyUnreach vertices source target = do
  c &lt;- countReachable vertices (length vertices) source
  guard . (== c) . sum =&lt;&lt; vertices `for` \v -&gt;
    -- guess whether the vertex v is reachable and not the target
    return 0 &lt;|&gt; 1 &lt;$ do
      -- verify that the vertex is indeed reachable and not the target
      guard $ v /= target
      guessPath (length vertices) source v
</code></pre>
    </div>