<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is a lot of code.  It may take multiple edits over multiple days to provide all my feedback.  (Of course, others may provide feedback in areas I haven't got to yet...)</p>

<hr>

<p>C++11 allows "raw" string literals.  Instead of:</p>

<pre><code>       std::cout &lt;&lt; "\t\t  ____________________________________  \n"
                    "\t\t |              MAIN MENU             | \n"
                    "\t\t |             -----------            | \n"
                    "\t\t |     --XX---            ---XX--     | \n"
                    "\t\t |       :      ~Hangman~     :       | \n"
                    "\t\t |       :                    :       | \n"
                    "\t\t |       O      1.  Play      O       | \n"
                    "\t\t |      /|\\                  /|\\      | \n"
                    "\t\t |      / \\     2.  Rules    / \\      | \n"
                    "\t\t |                                    | \n"
                    "\t\t |              3.  Exit              | \n"
                    "\t\t |____________________________________| \n\n\n"
</code></pre>

<p>You could write:</p>

<pre><code>        std::cout &lt;&lt; R"RAW(
                  ____________________________________
                 |              MAIN MENU             |
                 |             -----------            |
                 |     --XX---            ---XX--     |
                 |       :      ~Hangman~     :       |
                 |       :                    :       |
                 |       O      1.  Play      O       |
                 |      /|\                  /|\      |
                 |      / \     2.  Rules    / \      |
                 |                                    |
                 |              3.  Exit              |
                 |____________________________________|


)RAW";
</code></pre>

<p>Notice no need to end a line with <code>\n"</code> or escape the backslash <code>\\</code>.  Just type what you want to appear in the string, including returns, tabs, backslashes, etc.  The string is everything between <code>R"RAW(</code> and <code>)RAW"</code>.  (You can choose your own delimiter text, or none at all; it doesn't have to be <code>RAW</code>.</p>

<hr>

<p>Try to write DRY (<strong>D</strong>on't <strong>R</strong>epeat <strong>Y</strong>ourself) code, instead of WET (<strong>W</strong>rite <strong>E</strong>verything <strong>T</strong>wice) code.</p>

<p>Your code starts off with</p>

<pre><code>std::string keyboard = "&lt;-- long multiline string --&gt;";
</code></pre>

<p>Later, in the <code>AgainMenu()</code>, you reset the variable to its initial value, by repeating:</p>

<pre><code>keyboard = "&lt;-- the same long multiline string --&gt;";
</code></pre>

<p>If you wanted to change that string, you have to change it in both places.  Failure to change one of them would be a bug.  Cut your work in half by making initialization constants into ... well ... constants.</p>

<pre><code>const std::string INITIAL_KEYBOARD = "&lt;-- long multiline string --&gt;";
std::string keyboard = INITIAL_KEYBOARD;
</code></pre>

<p>And in the <code>AgainMenu()</code> function:</p>

<pre><code>keyboard = INITIAL_KEYBOARD;
</code></pre>

<hr>

<p>But wait!  What if we wanted to reformat the keyboard?  Maybe making it wider/narrower, remove the numbers, or show the letters in UPPER CASE, without damaging the "KEYBOARD" title?</p>

<p>Perhaps it would be better to store the valid characters in an array, and generate the keyboard display programmatically.</p>

<pre><code>const std::string VALID_CHARACTERS = "abcdefghijklmnopqrstuvwxyz0123456789";
const std::string KEYBOARD_INDENT = "\t\t ";
const int CHARACTERS_PER_LINE = 9;

std::string keyboard = VALID_CHARACTERS;

private void show_keyboard() {
    int width = 4*CHARACTERS_PER_LINE - 1;
    std::string divider = KEYBOARD_INDENT + "|" + std::string(width, '-') + "|\n";

    std::cout &lt;&lt; KEYBOARD_INDENT &lt;&lt; " " &lt;&lt; std::string(width, '_') &lt;&lt; "\n";
    std::cout &lt;&lt; KEYBOARD_INDENT &lt;&lt; "|" &lt;&lt; std::string(width/2-4, ' ') &lt;&lt; "KEYBOARD"
              &lt;&lt; std::string(width-width/2-4, ' ') &lt;&lt; "|\n";
    std::cout &lt;&lt; divider;

    for(int i=0; i&lt; keyboard.length(); i += CHARACTERS_PER_LINE) {
        std::cout &lt;&lt; KEYBOARD_INDENT &lt;&lt; "|";

        for(int j=0; j&lt;CHARACTERS_PER_LINE; j++) {
            char ch = (i+j) &lt; keyboard.length() ? keyboard[i+j] : ' ';
            std::cout &lt;&lt; " " &lt;&lt; ch &lt;&lt; " |";
        }
        std::cout &lt;&lt; "\n";
        std::cout &lt;&lt; divider;
    }
    std::cout &lt;&lt; KEYBOARD_INDENT &lt;&lt; "|" &lt;&lt; std::string(width, '_') &lt;&lt; "|\n";
}
</code></pre>

<p>Now, instead of checking that the typed character isn't one of the formatting characters ...</p>

<pre><code>if (ch != '|'&amp;&amp; ch != '_' &amp;&amp; ch != '-' &amp;&amp; keyboard.find(ch) != std::string::npos)
    keyboard[keyboard.find(ch)] = '#';
</code></pre>

<p>... you just check if the character is inside <code>keyboard</code>.  More DRY techniques: instead of repeatedly finding it, just save the returned position.</p>

<pre><code>size_t index = keyboard.find(ch);
if (index != std::string::npos) {
    keyboard[index] = '#';
    ... find character in wordName, update answer, or increase hang ...
} else {
    ... beep for illegal input ...
}
</code></pre>

<hr>

<p><code>HangCheck()</code>: Displaying the incremental hangman.</p>

<p>Again, like keyboard, this should be done programmatically.  Most of the hangman graphic is the same.  Just a small 3x3 area needs to be updated as the hang count increases.  You could initial a string with the initial unhung graphic, and just update the appropriate location with the appropriate character.  Or, you could have 7 3x3 sub images and display the appropriately indexed sub image as you output your fixed graphic.</p>

<hr>

<p>Error checking.</p>

<p>What if the host player enters a word with illegal characters?  For instance, <code>CAN'T</code> or <code>Carrie-Anne</code>?  Since the guesser can never enter these invalid characters, they can never win.  You should validate the host's word is guessable according to the rules.  Or, reveal all unguessable characters before the guesser starts.  For instance, the guesser would see: <code>_____-____</code>.</p>
    </div>