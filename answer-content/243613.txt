<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Impressive...</p>

<h2>hashing</h2>

<p>I would suggest that the strHash just take the string, the strDoubleHash not exist, and the hash map code handle making the first and second hash values.
This would facilitate putting other hashes of different types of keys in.</p>

<p>As a hint: assume strHash is expensive, and minimize it's calls.</p>

<h2>deleted</h2>

<p>I suspect there is a flaw in hm_findItemIndex about deleted items.  If you:</p>

<ol>
<li>place item X at location n</li>
<li>try placing item Y again at location n, so it gets location m instead</li>
<li>delete item X</li>
<li>try to get item Y</li>
</ol>

<p>At this point, hm_findItemIndex will return (n,deleted) instead of (m,normal), and Y has disappeared.
hm_findItemIndex must skip deleted, except for a special case for hm_set().  For hm_set(), you can use one pass to find an existing Y, and a second to find a deleted entry you can fill, and the first pass could return that there was a deleted, or even search to the empty and then return the deleted. </p>

<h2>fractions</h2>

<pre><code>  long long load = hm-&gt;count * 100 / hm-&gt;size;
  if (load &gt; HIGH_DENSITY &amp;&amp; currentSizeIndex &lt; (int)(sizeLength - 1))
</code></pre>

<p>well, load will be between 0 and 70.  No need for long long, or even long or int.
However, you might overflow before then.  Try:</p>

<pre><code>  int load = (int)(((long long)hm-&gt;count) * 100 / hm-&gt;size);
</code></pre>

<p>On the other hand, you might be better with changing HIGH_DENSITY to 0.70 and writing:</p>

<pre><code>  if ((hm-&gt;count &gt; (hm_size * HIGH_DENSITY)) &amp;&amp; 
       currentSizeIndex &lt; (int)(sizeLength - 1))
</code></pre>

<h2>currentSizeIndex</h2>

<p>currentSizeIndex is a global.  Get rid of it.  Add a function to pick a size from your list given a minimum needed size.  This only is needed when you make an initial hash or when you enlarge the hash.</p>

<p>Speaking of which, if the caller knows he is going to add 5000 items, he should be able to access hm_initSize() telling it 5000, which should then back out the HIGH_DENSITY and find the right size in the list.</p>

<h2>Size List</h2>

<p>Curious choices.  Primes less than <span class="math-container">\$2^n\$</span>, but not the largest such primes.  Why not?</p>

<p>Edit: two additional thoughts</p>

<h2>Memory Management##</h2>

<p>Currently you duplicate and free the keys, and leave the caller responsible for the values.  If you wish to continue this, hm_set() and hm_delete() should return the removed values for deletion, if needed.</p>

<p>Alternatively, the could be configuration in the hm_init() saying how to delete the value entries.  (This would be a function to call, with stock functions for do nothing and call free().)  There could also reasonably be a need to clone the value entries.</p>

<h2>Other Key Types</h2>

<p>Other key types would also be good.  hm_init would need to be passed: a clone function, a free function, a compare function, and a hash function.  For keys that are stable and lasting, the clone could could return its parameter and the free do nothing.</p>

<p>Having hm_init() variants that provide the default string version would be quite reasonable.</p>
    </div>