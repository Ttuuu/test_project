<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are many ways to solve this puzzle.
Your approach seems to fine. It is simple and it is easy to understand. But you can replace your inner loop by a method of List: </p>

<pre><code>public static boolean checkList_contains(List&lt;Integer&gt; list, int sum) {
    if (list.size() &lt; 2) {
        return false;
    }
    for (int i = 0; i &lt; list.size() - 1; i++) {
        if (list.contains(sum - list.get(i)))
            return true;
    }
    return false;
}
</code></pre>

<p>This tries to find the missing value by calling <code>contains</code>.</p>

<p>Then you can use modern streams instead of for loops:</p>

<pre><code>public static boolean checkList_streams(List&lt;Integer&gt; list, int sum) {
    return list.stream()
            .map(x -&gt; sum - x)
            .filter(list::contains)
            .findAny()
            .isPresent();
}
</code></pre>

<p>But here it should be allowed to use the same element twice.</p>

<p>Theses both solutions are very inefficient. Both have a running time in O(nÂ²). </p>

<p>If you expect a sorted list you can use two indices which moves from left and right until you find a matching pair (which is what @200_success has written):</p>

<pre><code>public static boolean checkList_sorted_list(List&lt;Integer&gt; list, int sum) {
    int lowerIndex = 0;
    int upperIndex = list.size() - 1;
    while (lowerIndex &lt; upperIndex) {
        int testSum = list.get(lowerIndex) + list.get(upperIndex);
        if (testSum &gt; sum) upperIndex --;
        else if (testSum &lt; sum) lowerIndex ++;
        else return true;
    }
    return false;
}
</code></pre>

<p>This is in <code>O(n)</code>.</p>
    </div>