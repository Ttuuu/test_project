<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Generating unique random numbers within a range</h3>

<p>A good way to generate unique random numbers within a range is to create a list with the desired unique numbers, and then shuffle it.</p>

<pre><code>  private Set&lt;Integer&gt; getRandomUniqueNumberSet(int min, int max) {
    List&lt;Integer&gt; numbers = IntStream.rangeClosed(min, max).boxed().collect(Collectors.toList());
    Collections.shuffle(numbers);
    return new LinkedHashSet&lt;&gt;(numbers);
  }
</code></pre>

<h3>Don't used boxed types when you don't need <code>null</code> values</h3>

<p>This method takes <code>Integer</code> parameters, which may be <code>null</code>:</p>

<blockquote>
<pre><code>private Set&lt;Integer&gt; getRandomUniqueNumberSet(Integer min, Integer max)
</code></pre>
</blockquote>

<p>But the implementation doesn't handle the case when these values are <code>null</code>.
And it doesn't make sense to support such ranges.
Change those types to primitive <code>int</code>.</p>

<p>The same goes for the local variables <code>Integer index</code> and <code>Boolean loop</code>.</p>

<h3>Why <code>ThreadLocalRandom</code>?</h3>

<p>As per the <a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadLocalRandom.html" rel="nofollow noreferrer">javadoc</a>, <em>"use of <code>ThreadLocalRandom</code> is particularly appropriate when multiple tasks use random numbers in parallel in thread pools"</em>. I doubt that's necessary in your use case, in which case I suggest to use an instance of <code>Random</code> instead.</p>
    </div>