<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I find it fine as it is, but if you really want to keep a single method, you can parametrize it by the name of the key to set:</p>

<pre><code>handleChange = (keyName, e) =&gt; { this.setState({ [keyName]: e.target.value }); }
</code></pre>

<p>and call it like <code>handleChange('content', event)</code> or <code>handleChange('author', event)</code>.</p>

<p>Problem is, now, to call it properly when creating your components. You could write things like:</p>

<pre><code>&lt;input onChange={(e) =&gt; this.handleChange('content', e)} value={this.state.content} type="text" placeholder="comment" /&gt;
</code></pre>

<p>But this syntax creates a new function each time the component is rendered, potentially triggering child re-render as well. <a href="https://reactjs.org/docs/handling-events.html" rel="nofollow noreferrer">React recommends</a> to <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind" rel="nofollow noreferrer"><code>bind</code></a> functions in the constructor instead:</p>

<pre><code>import React, { Component } from 'react';

class AddComment extends Component {
    constructor(props) {
        super(props);
        this.state = { author: '', content: '' };
        this.handleAuthorChange = this.handleChange.bind(this, 'author');
        this.handleContentChange = this.handleChange.bind(this, 'content');
        this.handleSubmit = this.handleSubmit.bind(this);
    }

    handleChange(keyName, e) {
        this.setState({ [keyName]: e.target.value });
    }

    handleSubmit(e) {
        e.preventDefault();
        this.props.addComment(this.state);
        this.setState({ author: '', content: '' });
    }

    render() {
        return (
            &lt;div className="add-form"&gt;
                &lt;form onSubmit={this.handleSubmit} className="card hoverable p-bottom"&gt;
                    &lt;p className="p-top"&gt;ADD COMMENT&lt;/p&gt;
                    &lt;input onChange={this.handleContentChange} value={this.state.content} type="text" placeholder="comment" /&gt;
                    &lt;input id="name" onChange={this.handleAuthorChange} value={this.state.author} type="text" placeholder="name" /&gt;
                    &lt;input value="submit" type="submit"/&gt;
                &lt;/form&gt;
            &lt;/div&gt;
        );
    }
};

export default AddComment;
</code></pre>
    </div>