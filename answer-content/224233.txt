<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>verbose vs readable</h2>

<p>Why choose?</p>

<p>Just encapsulate all the explicit code and error checkings into functions (if possible) or macros (only when functions can't do it), and have a clean high level function.</p>

<hr>

<h2>Safe usage of <code>malloc()</code></h2>

<p>Malloc is easily misused.  Problems using malloc are the following:</p>

<ul>
<li><code>sizeof(type)</code> vs <code>sizeof(*foo)</code>:</li>
</ul>

<p><code>foo = malloc(sizeof(*foo) * nmemb);</code> is better because if you ever change the type of <code>foo</code>, this call will still be valid, while if not, you would have to change every line where malloc is called with foo.  If you forget any of those lines, good luck!</p>

<ul>
<li>overflow:</li>
</ul>

<p>If <code>(sizeof(*foo) * nmemb) &gt; SIZE_MAX</code>, it will silently wrap around, and allocate a very small amount of memory, and you will most likely end up accessing memory that you shouldn't.</p>

<p>Solution:</p>

<p><a href="https://codereview.stackexchange.com/a/223175/200418">Use this enclosure around <code>malloc</code></a></p>

<hr>

<h2><code>sizeof(type)</code> vs <code>sizeof(*foo)</code></h2>

<p>As I said above, use the second.  Apart from <code>malloc</code> you also have this problem in <code>memcpy</code>.</p>

<hr>

<h2><code>fprintf(stderr, ...)</code> + <code>exit()</code></h2>

<p>You could combine those two in just one function call:</p>

<p><a href="http://man7.org/linux/man-pages/man3/error.3.html" rel="nofollow noreferrer"><code>error()</code></a>: GNU extension</p>

<p><a href="http://man7.org/linux/man-pages/man3/err.3.html" rel="nofollow noreferrer"><code>err()</code></a>: BSD extension</p>

<p>I would advise to use the first one: first, GNU extensions are more commonly available (even Clang has most (if not all) of them); second, because <code>err</code> is a common name used in temporary variables or labels used in case of an error.</p>

<hr>

<h2>C99 types</h2>

<p>If you don't have a reason to use old C89 (yes, 1989) types, don't use them. What is <code>long long</code>, and why would you use it?</p>

<p><code>int64_t</code> is clearer, shorter, and better in every way, unless you need to interface a library that hasn't been updated in the last 30 years, which ironically is most of them.</p>

<p>Also instead of <code>int</code>, use <code>int32_t</code>, although if you want factorials that fit into an <code>int64_t</code>, I don't think you need more than <code>int8_t</code>.</p>
    </div>