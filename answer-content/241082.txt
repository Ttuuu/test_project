<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>Is this a decent use of abstract classes and inheritance?</p>
</blockquote>

<p>Yes, it's decent. My personal preference is, rather than using <code>ABC</code>, simply</p>

<pre><code>def process(self):
    # Method to process frames.
    # Method will be overwritten by subclasses
    raise NotImplementedError()
</code></pre>

<p>You can also simplify this somewhat by</p>

<ul>
<li>Renaming <code>Video</code> to <code>ColorVideo</code></li>
<li>Deleting the class that is now called <code>ColorVideo</code></li>
<li>Rather than making <code>process</code> abstract, make it "virtual" (in C++ parlance): make it take the contents of what is now <code>get_raw_frame</code> and delete <code>get_raw_frame</code></li>
<li>In the child <code>GrayVideo</code>, override <code>process</code> to call its <code>super().process</code> and convert the results</li>
</ul>

<p>If you're concerned that this more minimal representation is confusing (i.e. why is a <code>GrayVideo</code> a <code>ColorVideo</code>?) then you can keep <code>Video</code> as a conceptually abstract class, and simply</p>

<pre><code>class ColorVideo(Video):
    pass
</code></pre>

<p>Other stuff:</p>

<ul>
<li><code>end</code> should actually be the <code>__exit__</code> of a context manager; </li>
<li>it looks like your <code>source</code> argument should take a default of <code>0</code>;</li>
<li>make a <code>main</code> function called by standard <code>__name__</code> guard.</li>
</ul>
    </div>