<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I see a number of things that may help you improve your program.</p>

<h2>Omit empty destructor</h2>

<p>The compiler will automatically generate a destructor that would, in this case be identical to the empty one your wrote.  It's better to simply omit it and let the compiler do its thing.</p>

<h2>Cleanly separate interface and implementation</h2>

<p>In all, the files are fairly neatly divided, but I'd make a couple of changes.  First, I'd move the <code>#include &lt;cmath&gt;</code> to the <code>.cpp</code> file because it's an implementation detail (and as you'll see a bit later, might not be necessary).  Second, I'd remove the <code>processOneSampleLinMidtread()</code> and <code>processOneSampleLinMidrise()</code> from the <code>.h</code> file and make them static free-standing functions in the <code>.cpp</code> file.  More on that in a moment, too.</p>

<h2>Avoid comparing floating point numbers for equality</h2>

<p>It's generally a good idea to avoid comparing floating point numbers for equality, even if it's only comparing with zero.  See the oft-cited and still excellent <a href="http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html" rel="nofollow noreferrer">What Every Computer Scientist Should Know About Floating-Point Arithmetic, by David Goldberg</a> for a readable technical discussion for why this is so.</p>

<h2>Reconsider the interface</h2>

<p>At the moment, there's no way to read back out how many bits are in effect and no way to find out what the digital encoding would have been for a particular input <code>float</code>.  I'd suggest a couple of changes to address that.  First, it is probably useful to provide functions for reading back the publically settable parameters.  Second, I'd suggest splitting the current <code>processOneSample</code> into two pieces: <code>int encode(float n)</code> which would return the binary encoding of the input <code>n</code> and <code>float decode(int x)</code> which would return the corresponding floating point value for the encoding <code>x</code>.</p>

<h2>Reduce repeated calculations where practical</h2>

<p>The expression <code>powf(2.f, m_nBits - 1.f)</code> is used very many times within the class, but it only depends on <code>m_nBits</code> and not on any other value.  For that reason, it would make more sense to calculate it once and store the result.</p>

<h2>Avoid floating point where practical</h2>

<p>It's often faster to do integer mathematics rather than floating point.  For that reason, and because we know that the result of <code>powf(2.f, m_nBits - 1.f)</code> is always going to be an integer, I'd suggest instead to calculate using the expression <code>1 &lt;&lt; (bits - 1)</code>.</p>

<h2>Use standard library features</h2>

<p>Instead of the current code checking for upper and lower boundaries, it's much more succinctly expressed using <a href="https://en.cppreference.com/w/cpp/algorithm/clamp" rel="nofollow noreferrer"><code>std::clamp</code></a> if you are using a C++17 compiler.  If not, it's not hard to write your own version.</p>

<h2>Use <code>const</code> where practical</h2>

<p>The <code>processOneSample()</code> routine does not (and should not!) alter the underlying object, so it should be declared <code>const</code>.</p>

<pre><code>float processOneSample(float in) const;
</code></pre>

<h2>Think about future uses</h2>

<p>Many people agree that the <a href="https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it" rel="nofollow noreferrer">YAGNI</a> principle is a sound one, and I agree with that.  But there is a balance between only coding what's needed right now and anticipating at least the <em>possibility</em> that there may be future uses.  An example in this case is using other kinds of digitizing algorithms such as <a href="https://en.wikipedia.org/wiki/A-law_algorithm" rel="nofollow noreferrer">A-law</a> or <a href="https://en.wikipedia.org/wiki/%CE%9C-law_algorithm" rel="nofollow noreferrer">\$\mu\$-law</a> for audio digitizing.  An alternative approach might be to have a base class (possibly virtual) and then derived classes that implement each kind of alternative encoding.</p>

<h2>Think about whether you need a class at all</h2>

<p>This may seem heretical for C++, but not everything needs to be an object.  Really what this code is about is turning one floating point value into another.  It may be that freestanding functions (with the appropriate parameters) might work as well.  It depends on how often you anticipate changing the parameters of the base object vs. how many times <code>processOneSample</code> is used.</p>

<h2>Consider using a modern constructor style</h2>

<p>An alternative to this constructor:</p>

<pre><code>CQuantizer::CQuantizer(CQuantizer::qType type, int nBits, float amplitude)
{
    setType(type);
    setNBits(nBits);
    setAmplitude(amplitude);
}
</code></pre>

<p>might be this:</p>

<pre><code>CQuantizer::CQuantizer(CQuantizer::qType type, int nBits, float amplitude) :
    m_nBits{nBits},
    m_amplitude{amplitude},
    m_type{type}
{}
</code></pre>
    </div>