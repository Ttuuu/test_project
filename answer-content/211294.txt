<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This can be done using tail recursion as well.</p>

<pre><code>def mulSeq(numbers: Seq[Int]): Seq[Long] = {
    @tailrec
    def recurMul(numbersPart: Seq[Int], mul: Int, acc: List[Long]): Seq[Long] = {
        numbersPart match {
            case num1::num2::Nil =&gt;
                (num1*num2) :: ((mul*num2).toLong :: acc)
            case num1::num2::tail =&gt;
                recurMul(num2::tail, num1, (mul*num2)::acc)
            case _ =&gt;
                acc
        }
    }

    numbers.headOption match {
    case Some(first) =&gt;
        recurMul(numbers, first, Nil).reverse
    case None =&gt;
        Nil
    }
}
</code></pre>

<p>Although the solution above with <code>List.sliding</code> is a little bit shorter, tail recursion is a beloved thing in Scala ^_^.
Also, I think in the proposed solution edge cases are more clear.  </p>
    </div>