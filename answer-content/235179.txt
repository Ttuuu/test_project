<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It appears the goal here is to provide parameters to a resolve operation using a different format, something string-based. This appears to be primarily useful in a service location (manually executing <code>Resolve</code>) scenario rather than true DI, so I would caution you to be careful.</p>

<p>Since this started as an Autofac solution, I'll post an answer based on Autofac.</p>

<p>My first recommendation would be to <strong>implement <a href="https://github.com/autofac/Autofac/blob/1c9ce9926f/src/Autofac/Core/Parameter.cs" rel="nofollow noreferrer">a new <code>Parameter</code> type</a></strong> rather than entirely separate handling of strings. This would make the solution more interoperable with other parameter types and Autofac on the whole. You can see how other parameter types like <a href="https://github.com/autofac/Autofac/blob/1c9ce9926f/src/Autofac/Core/ResolvedParameter.cs" rel="nofollow noreferrer"><code>ResolvedParameter</code></a> and <a href="https://github.com/autofac/Autofac/blob/1c9ce9926f/src/Autofac/NamedParameter.cs" rel="nofollow noreferrer"><code>NamedParameter</code></a> are implemented to give you examples.</p>

<p>My second recommendation would be to <strong><a href="https://github.com/autofac/Autofac.Configuration/blob/e1cf62b26e2177f975253496e8bf671ec9b09c2c/src/Autofac.Configuration/Util/TypeManipulation.cs#L54" rel="nofollow noreferrer">look at how Autofac.Configuration handles parsing the string values into objects</a></strong>. <code>Convert.ChangeType</code> doesn't work on a lot of things and having a more robust mechanism will be valuable.</p>

<p>Finally... if possible, I might <strong>consider looking at the design that requires this and see if it can be changed.</strong> As I mentioned, this appears to be primarily useful in service location and it'd be better if you can switch your solution to use actual dependency injection. That'd mean the parameters need to be available either during registration time (e.g., read them from config and include their values when registering things); or during runtime, in which case you'd likely <a href="https://autofac.readthedocs.io/en/latest/resolve/relationships.html#parameterized-instantiation-func-x-y-b" rel="nofollow noreferrer">resolve a <code>Func&lt;Xy, Y, B&gt;</code> or something similar</a> in your consuming class and not use a lifetime scope. In either case, the utility of this mechanism once you switch to DI is much more limited. It could be that just using Autofac.Configuration will suffice.</p>
    </div>