<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You should learn more about partial functions. Everything you need to know is written in the <a href="https://www.scala-lang.org/api/current/scala/PartialFunction.html" rel="nofollow noreferrer">documentation</a>.</p>

<p>It is a structure that allows you to do a basic check on something and if it succeed, it does something. It is composed of two methods :</p>

<ul>
<li><code>apply(v1: A): B</code></li>
<li><code>isDefinedAt(x: A): Boolean</code></li>
</ul>

<p>It applies the <code>apply</code> method on your input parameter only if the <code>isDefinedAt</code> method returned <code>true</code> when called with your input parameter.</p>

<p>The great thing about partial functions is that you can chain them easily with the <code>andThen</code>, <code>compose</code> and <code>applyOrElse</code> operators. Also, they can be written very easily by using the <code>case</code> syntax : </p>

<pre><code>val divideByTwo: PartialFunction[Int, Int] = { case d: Int if d%2 == 0 =&gt; d/2 }
</code></pre>

<p>But there is another way to write it :</p>

<pre><code>val divideByTwo = new PartialFunction[Int, Int] {
  def apply(d: Int) = d / 2
  def isDefinedAt(d: Int) = (d%2 == 0)
}
</code></pre>

<p>Here is a <a href="http://blog.bruchez.name/2011/10/scala-partial-functions-without-phd.html" rel="nofollow noreferrer">great article</a> about it.</p>
    </div>