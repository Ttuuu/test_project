<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Welcome to programming! I'm new to code reviews (your StackOverflow post brought me here), but hopefully I have enough other experiences that something that follows will be of value to you.</p>

<p>As to your OOP question, since you're already learning it I would <strong>stick to Python</strong> rather than learning 2+ languages at once. It still has full support for objects and OOP principles, so there isn't a whole lot to lose. If you had to pick between Simula or SmallTalk, I'd recommend <strong>SmallTalk</strong> in a heartbeat (and I'd recommend temporarily dropping Python so that you're still only learning one language at a time).</p>

<h3>Positives</h3>

<p>I don't generally think critiques should only include the negatives, both for psychological reasons and since it's also important to keep doing the good things. At a high level, all of the following are nice. Keep it up.</p>

<ul>
<li><p>You're breaking the code up into <strong>modular components</strong>. In your case, the components happen to be <em>functions</em> rather than <em>objects</em>, and that's fine. Functional code can express many problems more easily than OOP code.</p></li>
<li><p>The <code>#---</code> comments you're using make the code surprisingly pleasant to read. I haven't seen that before, and I rather like it.</p></li>
<li><p>The <code>if __name__ == '__main__'</code> bit is a best practice in Python code, allowing different behavior if your program is called as a script or imported.</p></li>
<li><p>Your <strong>variable names are descriptive</strong>. This IS a big deal and makes everyone's lives easier (including yours). This is an important detail that I've noticed most new programmers leave out.</p></li>
</ul>

<h3>Needs Improvement</h3>

<p>This looks like a lot in a big wall of text, but I promise there aren't that many things; I'm just trying to make sure that there's enough explanation that the comments are actually helpful to you.</p>

<ul>
<li><p>Using <strong>global variables</strong> is almost universally recognized as a poor programming practice in every major language. The problem is that as the number of <strong>connections</strong> between different parts of your code increases, the number of <strong>code paths</strong> increases exponentially. It becomes very hard to reason about the behavior of your program. By having everything linked to even one (or in this case more than one) global variable, it is hard to analyze any component by itself. Even in your current code, if you tried to find the prime factors of several numbers at once you would likely have hard-to-track-down bugs due to the global variables.</p>

<p>One way to approach that option is to <strong>pass more arguments</strong> in your functions. As one example, instead of having <code>look4factors()</code> and <code>find_prime_factors()</code> both share the global variable <code>list_of_factors</code>, you could have <code>look4factors()</code> <strong>return</strong> the <strong>local</strong> variable <code>list_of_factors</code>, and then that could be an <strong>argument</strong> to <code>find_prime_factors()</code>.</p></li>
<li><p><strong>Capitalization</strong> schemes should typically be <strong>consistent</strong> in your code. The occasional use of <code>Prime</code> instead of <code>prime</code> could cause problems down the road.</p></li>
<li><p>Having <strong>hard-coded</strong> values should be <strong>avoided</strong> as much as possible. It's a lot of work for you, and it makes your code less robust too. With that few prime factors, it wouldn't work for numbers much bigger than 1000000 (approximately your biggest prime number squared).</p>

<p>It would be better to <strong>generate</strong> those <strong>prime numbers</strong> at run time. You could do that with <em>trial division</em> (for each new number, check to see if it's prime by checking if all the primes you've found up to the square root of that number so far are factors), or with more complicated algorithms like the Sieve of Eratosthenes. The key point is that by doing so you can handle any size of input instead of just small inputs.</p></li>
<li><p>Since you're using Python 2, the use of <code>range()</code> is discouraged when you're just iterating over those values. The <code>range()</code> function creates an object storing every integer you'll iterate over, whereas <code>xrange()</code> simply keeps <strong>yielding</strong> the new values. It saves a lot of RAM to use <code>xrange()</code>. This is one of the things that broke between Python 2 and Python 3. In Python 3, <code>xrange()</code> doesn't exist by default, and <code>range()</code> behaves like the old <code>xrange()</code> used to.</p></li>
<li><p>When you have a list of things (like <code>list_of_Prime_factors</code>) and need to do something special for just the beginning or just the end, rather than having an <code>if</code> statement inside your loop, it's better to have the special case either before or after the loop and have the loop only do the main operation. This matters because</p>

<ul>
<li><code>if</code> statements and other branches are more expensive for modern CPU's to deal with than other kinds of operations. Arguably that doesn't matter as much in Python since everything is so abstracted and since some of those branches are inlined by the bytecode compilation step, but maybe it's a tidbit you'll find useful one day.</li>
<li>Nested code is harder to reason about and debug than flat code.</li>
<li>Whether <code>if</code> statements are comparatively more expensive or not, you're still doing a lot of them that you don't need to.</li>
</ul></li>
<li><p>Python has a concept of <strong>iterables</strong> that you might find helpful in simplifying your code. You can do other things than iterables, but one idea is that instead of writing</p></li>
</ul>

 <pre class="lang-py prettyprint-override"><code>for i in (0, len(thing)):
    # stuff with thing[i]
</code></pre>

<p>You can write something like</p>

 <pre class="lang-py prettyprint-override"><code>for item in thing:
    # stuff with item
</code></pre>

<h3>Extras</h3>

<p>Most libraries, services, and security updates have been implemented in or completely switched to Python 3. If it were only for that, I'd recommend switching. There are some syntactical things that make your life easier too though, even in this code example. In Python 3.6+ you have so-called <strong>f-strings</strong> which allow arbitrary expressions inside them. Instead of <code>'{}'.format(x)</code> you can just write <code>{x}</code>, and the code runs faster too.</p>

<p>Note that many common things that you can do in a loop have already been implemented in the language. For example, it's possible to replace all of</p>

<pre><code>for index in range (0, len(list_of_Prime_factors)):
    print "{}".format(list_of_Prime_factors[index]), 
    if (index + 1 == len(list_of_Prime_factors)):
        pass
    else:
        print "X",
</code></pre>

<p>With the following line of code</p>

<pre><code>print ' X '.join(map(str, list_of_Prime_factors))
</code></pre>

<p>Or if you'd rather learn about Python's list comprehensions, the following is roughly the same thing (and still works in Python 3 after modifying <code>print</code> to be a function, where the example I just gave would need a little tweaking).</p>

<pre><code>print ' X '.join([str(p) for p in list_of_Prime_factors])
</code></pre>
    </div>