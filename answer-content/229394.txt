<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You're doing some weird things with the scripts. I consider the first to be better, since especially in the second one, you're doing a lot of things with variables which we have better ways to do. I'll point those out separately - lets first have a look at your first script. </p>

<h2>Your first script</h2>

<h3>Code Duplication</h3>

<p>If you find yourself typing the same thing a lot, you're probably doing something wrong. Examples of this are incrementing z and printing the message. </p>

<h3>Variable Names</h3>

<p>Variables should have short but meaningful names. That means that if you find yourself using variables like z or n, you're probably doing something wrong somewhere.</p>

<h3>Loops and termination</h3>

<p>We have a really nice command named <code>break</code> in python. It will terminate the inner-most loop. Using this will obsolete all nested loops your currently have. </p>

<p>I'll keep using while loops here, but you might also want to try the following instead:</p>

<pre class="lang-py prettyprint-override"><code>from itertools import count

for iteration in count(1):
    # do stuff...
    if we_are_done():
        break
</code></pre>

<p>this function is basically an infinity list - it's doing exactly the same as:</p>

<pre class="lang-py prettyprint-override"><code>iteration = 0
while True:
    iteration += 1
    # do stuff....
    if we_are_done():
        break
</code></pre>

<p>Which we'll be doing all the time here.</p>

<h3>Keeping that all in mind....</h3>

<pre class="lang-py prettyprint-override"><code>iteration = 0
while True:
    command = input("Go Left or Right?")
    if "left" in command.lower():  # Transforms the input to all lowercase. This makes it case-insensitive.
        # We also use "in" as membership test, so that whitespace is ignored, and even an command like
        # "go left" will be considered valid. 
        break  # Terminates the loop.
    iteration += 1
    print(f"You lose * {iteration if iteration &lt; 4 else 'infinity'}")
print("\nYou Win!")
</code></pre>

<p>This will do the same as your first script. In the loop, we get the input. We decide if we have won yet, and if we do, we break out. Then we increment the iteration variable. Then we print how often we've moved wrong before, or if it's more than 3 times, we instead print we lost * infinity.</p>

<p>If you're confused by the way we put our variable in that string, you should read up on <a href="https://realpython.com/python-f-strings/" rel="nofollow noreferrer">f-strings</a>. If you're confused by how we print that number, read up on <a href="https://stackoverflow.com/questions/394809/does-python-have-a-ternary-conditional-operator">ternary expressions</a>. A good python programmer will know both. If the python version allows it, (s)he'll probably also use both. </p>

<h2>Now lets dissect your second function...</h2>

<p>I'll ignore everything I've already said something about regarding the first script.</p>

<h3>Variable instantiation - don't do it unless you have to</h3>

<pre class="lang-py prettyprint-override"><code>v = 0
z = 0
u = 0
x = 0 
n = 0
</code></pre>

<p>If you find yourself writing something like this, you should ask yourself if you really need all those. Generally, you'll only instantiate variables in python when you need them, and leave them undefined as long as you don't. IF, and this is a big if, you really need them, you'd write it like this:</p>

<pre class="lang-py prettyprint-override"><code>v = z = u = x = n = 0
</code></pre>

<h3>How not to loop</h3>

<p>Your outer loop should of course be either with <code>count()</code> or <code>while True:</code>. But the first inner loop is just obsolete alltogether. It cannot run more than once, since there's an <code>u == 0</code> requirement for it to run, and at the end of the loop you unconditionally set it to <code>" "</code>, which is a totally different something. Your second inner loop does the exact same thing, but with <code>v</code>. </p>

<p>For both of these, you should at the least change the loops to <code>if</code> statements. However, if you also do the following paragraph, you can just remove them and unindent your code instead.</p>

<h3>Do it just once if you can.</h3>

<p>You check for <code>n not in ["left", "Left"]</code> twice. Of course, the first time is to guard against the printing, and the second is to <code>break</code> out of your loop. If you just <code>break</code> at the top, you'll have avoided having to do it twice. </p>
    </div>