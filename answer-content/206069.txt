<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Reducing Duplication</h3>

<p>The first <code>if</code> statement can be removed by taking a step back and realising that what we really want is the index of the next element,
which is usually <code>i + 1</code> but wraps back around to the start of the list. We can use the modulo <code>%</code> operator to achieve this.</p>

<p>The inner <code>if-else</code> statements can be refined by storing the slope changes in a 2d array, imagining a chart with the x and y axis
corresponding to the current and next values of <code>slopeChanges</code> respectively.</p>

<p>Looping over this array (ignoring any slope changes that you're not interested in), we can both print the number of each slope change
that occurred and add the probability of it occurring to the probability array.</p>

<p>I also separated the core logic of the program into it's own class and method, allowing for easier re-use.</p>

<p>Example of changes, I took some liberties by adjusting the output text slightly, I felt it no longer made sense to print the variable names since they had been removed.</p>

<pre><code>public class Main
{
  public static void main(String[] args)
  {
    List&lt;Integer&gt; slopeChanges = new ArrayList&lt;Integer&gt;();
    slopeChanges.add(0);
    slopeChanges.add(0);
    slopeChanges.add(1);
    slopeChanges.add(0);
    slopeChanges.add(1);

    List&lt;Double&gt; sixProbabilities = SlopeCounter.CalculateProbabilities(slopeChanges);
  }
}

public class SlopeCounter
{
  public static List&lt;Double&gt; CalculateProbabilities(List&lt;Integer&gt; slopeChanges)
  {
    List&lt;Double&gt; sixProbabilities = new ArrayList&lt;Double&gt;();

    int slopeChangeSize = slopeChanges.size();

    int[][] slopeChangeCounts = new int[3][3];

    for(int i = 0; i &lt; slopeChangeSize; i++) {
        int nextIndex = (i + 1) % slopeChangeSize;

        int currentValue = slopeChanges.get(i);

        int nextValue = slopeChanges.get(nextIndex);

        // Relying on the fact that both currentValue and
        // nextValue are between -1 and 1 we can add 1 to
        // both values to store in a 2d array

        slopeChangeCounts[currentValue + 1][nextValue + 1]++;

        // This will also count non-slopes, i.e. 11, 00, -1-1,
        // but we can ignore these
    }

    System.out.println(slopeChanges);

    for (int j = 0; j &lt; 3; j++) {
        for (int k = 0; k &lt; 3; k++) {
            if(j == k) continue; // Skip non-slopes

            int changeCount = slopeChangeCounts[j][k];

            if(changeCount == 0) continue; // Skip slopes that didnt happen

            System.out.println("Slope " + (j-1) + " to " + (k-1) + " = " + changeCount);

            sixProbabilities.add((double)changeCount / ((double)slopeChangeSize));
        }
    }

    return sixProbabilities;
  }
}
</code></pre>
    </div>