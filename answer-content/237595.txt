<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>fifteen.py</h1>

<h2><code>__init__</code></h2>

<ul>
<li>For easier testing, consider adding a way to initialize the board to a certain state. Something like this would be nice:

<pre class="lang-python prettyprint-override"><code>"""
2 81
73B6
A4EC
59DF
"""
puzzle = FifteenPuzzle("2 8173B6A4EC59DF")
</code></pre>

You would need to validate the input and transform it into a 4x4 grid (and of course omit the call to <code>shuffle()</code> for this flow) which is a bit of extra work, but it will prove very useful when writing unit tests.</li>
<li>You should initialize an instance variable to track the coordinates of the blank space (more on this below).</li>
</ul>

<h2><code>shuffle</code></h2>

<ul>
<li>You're repeatedly calling <code>list(Direction)</code> within the loop when you could instead call it once outside the loop and bind it to a local variable. Also it doesn't need to be a list because we're not mutating it in any way, and <code>random.choice</code> accepts any sequence. So I would do <code>directions = tuple(Direction)</code> before the loop to get a sequence of all the directions.</li>
<li>To avoid doing a bunch of repeated attribute lookups (e.g. <code>self.move</code>, <code>random.choice</code>) in a loop, we can instead do the lookups once and save the results in local variables for a speedup:

<pre class="lang-python prettyprint-override"><code>def shuffle(self) -&gt; None:
    directions = tuple(Direction)
    move = self.move
    random_choice = random.choice
    for _ in range(100):
        move(random_choice(directions))
</code></pre>

Source is <a href="https://wiki.python.org/moin/PythonSpeed#Take_advantage_of_interpreter_optimizations" rel="nofollow noreferrer">this page on Python speed</a>:

<blockquote>
  <p>In functions, local variables are accessed more quickly than global variables, builtins, and attribute lookups. So, it is sometimes worth localizing variable access in inner-loops. For example, the code for <code>random.shuffle()</code> localizes access with the line, <code>random=self.random</code>. That saves the shuffling loop from having to repeatedly lookup <code>self.random</code>. Outside of loops, the gain is minimal and rarely worth it.</p>
</blockquote></li>
</ul>

<h2><code>findzero</code></h2>

<ul>
<li>A more apt name for this is probably <code>find_blank</code> since we're actually finding the blank space (missing tile) in the puzzle.</li>
</ul>

<h2><code>move</code></h2>

<ul>
<li><code>findzero</code> is called every time <code>move</code> is called, which means we do a full scan of the board to find the blank space each time before stepping into the move logic. This is inefficient. Instead, track the coordinates of the blank space as an instance variable, e.g. <code>self.blank_space</code>. Then we only need to call <code>findzero</code> once, right after board initialization. After <code>self.blank_space</code> is initialized, on every move we can update <code>self.blank_space</code> accordingly.</li>
<li>There is a lot of duplicated logic here that essentially swaps a designated adjacent tile with the current blank space based on the given direction. I would refactor some of this logic into a helper method that takes in the coordinates of the designated tile, and does the swapping and updating of the blank space position for you:

<pre class="lang-python prettyprint-override"><code>def move_tile_to_blank(self, t: Coordinates) -&gt; None:
    board = self.board
    b = self.blank_space
    board[b.y][b.x], board[t.y][t.x] = board[t.y][t.x], board[b.y][b.x]
    self.blank_space = t
</code></pre></li>
</ul>

<h2><code>is_win</code></h2>

<ul>
<li>A better name for this method is probably <code>is_solved</code>.</li>
<li>This is a prime candidate for the <code>@property</code> decorator so you can retrieve this status like you would an attribute:

<pre class="lang-python prettyprint-override"><code>&gt;&gt;&gt; puzzle = FifteenPuzzle("2 8173B6A4EC59DF")
&gt;&gt;&gt; puzzle.is_solved
False
&gt;&gt;&gt; puzzle = FifteenPuzzle("123456789ABCDEF ")
&gt;&gt;&gt; puzzle.is_solved
True
</code></pre></li>
<li>Instead of converting the whole board to a tuple of tuples and comparing it to <code>initial_board</code>, it's more time- and memory-efficient to compare the boards tile-by-tile with iterators:

<pre class="lang-python prettyprint-override"><code>@property
def is_solved(self) -&gt; bool:
    return all(
        tile == expected_tile
        for tile, expected_tile in zip(
            itertools.chain.from_iterable(self.board),
            itertools.chain.from_iterable(self.initial_board)
        )
    )
</code></pre></li>
</ul>

<h2><code>__str__</code></h2>

<ul>
<li><p>Use <code>join()</code> to concatenate strings. From <a href="https://wiki.python.org/moin/PythonSpeed#Use_the_best_algorithms_and_fastest_tools" rel="nofollow noreferrer">the same page on Python speed</a>:</p>

<blockquote>
  <p>String concatenation is best done with <code>''.join(seq)</code> which is an O(n) process. In contrast, using the '+' or '+=' operators can result in an O(n**2) process because new strings may be built for each intermediate step. The CPython 2.4 interpreter mitigates this issue somewhat; however, <code>''.join(seq)</code> remains the best practice.</p>
</blockquote>

<p>So this can actually be refactored to the following one-liner:</p>

<pre class="lang-python prettyprint-override"><code>def __str__(self) -&gt; str:
    return "\n".join("".join(row) for row in self.board)
</code></pre></li>
</ul>

<h2>Style</h2>

<p>The following comments can be addressed by hand, or if you don't mind delegating that responsibility to a tool, you can use a code formatter like <a href="https://black.readthedocs.io/en/stable/" rel="nofollow noreferrer">Black</a> which will do it for you.</p>

<ul>
<li>Leave whitespace in between method declarations, it makes the code easier to read.</li>
<li><p>Leave a space after commas, e.g.</p>

<pre class="lang-python prettyprint-override"><code># Yes:
("1", "2", "3", "4")

# No:
("1","2","3","4")

# Yes:
def move(self, direction):

# No:
def move(self,direction):
</code></pre></li>
</ul>

<h1>curses_frontend.py</h1>

<h2>Dependency injection</h2>

<p>Your frontend logic exists in both the <code>CursesApp</code> class and the <code>main()</code> method, but I think it would be cleaner for all the logic to live in <code>CursesApp</code> instead. Dependencies such as <code>FifteenPuzzle</code> could then be initialized and injected into <code>CursesApp</code>. More on this below.</p>

<h2>High score management</h2>

<p>I would create a separate class dedicated to score management with the following responsibilities:</p>

<ul>
<li>loading the high score from a file</li>
<li>tracking the current score and high score</li>
<li>incrementing the current score</li>
<li>resetting the current score</li>
<li>saving the high score to a file</li>
</ul>

<p>Then this score tracker could be initialized and injected into <code>CursesApp</code> as a dependency, just like <code>FifteenPuzzle</code>.</p>

<h2><code>curses.wrapper</code></h2>

<p>Your <code>CursesApp</code> is a context manager that does proper setup/teardown of the curses application via methods like <code>curses.noecho()</code>, <code>curses.cbreak()</code>, etc. The <code>curses</code> module actually provides a nice convenience method <a href="https://docs.python.org/3/howto/curses.html#starting-and-ending-a-curses-application" rel="nofollow noreferrer"><code>curses.wrapper()</code></a> which does the same thing without all of that boilerplate code.</p>

<h2><code>time.sleep</code></h2>

<p>I would generally avoid using <code>time.sleep</code> here; it blocks the main thread, and combined with input buffering, if we make enough (let's say <code>k</code>) "invalid moves" in rapid succession, we end up with an unresponsive application for <code>k * SLEEP_TIME</code> seconds. This is not a great user experience.</p>

<p>Instead, I would recommend giving the keyboard controls text its own line and moving the message window to its own line. Then you can use the pattern of displaying messages, blocking on any user input, and clearing the message once you've received that user input.</p>

<h2><code>draw_score</code> and <code>draw_highscore</code></h2>

<p>These should honestly be combined into one method, i.e. any time you print the current score, you should also print the high score as well. One advantage of doing things this way is we avoid brittle logic like</p>

<pre class="lang-python prettyprint-override"><code>self.score_win.addstr(0,7,"    ") # clear regular score
self.score_win.addstr(0,7,str(score))
</code></pre>

<p>where we are implicitly assuming the current score will never exceed four digits.</p>

<h2>Mapping keyboard input to a <code>Direction</code></h2>

<p>Use a map of ASCII values to <code>Direction</code>s instead of using four separate lists and <code>if</code> statements. So instead of this</p>

<pre class="lang-python prettyprint-override"><code>direction = None
if c in app.KEYS_UP:
    direction = Direction.UP
if c in app.KEYS_DOWN:
    direction = Direction.DOWN
if c in app.KEYS_LEFT:
    direction = Direction.LEFT
if c in app.KEYS_RIGHT:
    direction = Direction.RIGHT
if direction:
    # ...
</code></pre>

<p>you could have a map that starts out like this</p>

<pre class="lang-python prettyprint-override"><code>KEY_TO_DIRECTION = {
    curses.KEY_UP: Direction.UP,
    curses.KEY_DOWN: Direction.DOWN,
    curses.KEY_LEFT: Direction.LEFT,
    curses.KEY_RIGHT: Direction.RIGHT,
}
</code></pre>

<p>a separate map for custom key aliases for up/down/left/right</p>

<pre class="lang-python prettyprint-override"><code>DIRECTION_TO_CUSTOM_KEYS = {
    Direction.UP: ("w", "j"),
    Direction.DOWN: ("s", "k"),
    Direction.LEFT: ("a", "h"),
    Direction.RIGHT: ("d", "l"),
}
</code></pre>

<p>then you can populate <code>KEY_TO_DIRECTION</code> like so</p>

<pre class="lang-python prettyprint-override"><code>for direction, keys in DIRECTION_TO_CUSTOM_KEYS.items():
    for key in keys:
        KEY_TO_DIRECTION[ord(key.lower())] = direction
        KEY_TO_DIRECTION[ord(key.upper())] = direction
</code></pre>

<p>and use it like so</p>

<pre class="lang-python prettyprint-override"><code>if direction := KEY_TO_DIRECTION.get(c, None):
    # do something with `direction`
</code></pre>

<h2>Style</h2>

<ul>
<li><p><a href="https://www.python.org/dev/peps/pep-0008/#imports" rel="nofollow noreferrer">PEP8</a> recommends the following order for imports, with a blank line between each group of imports:</p>

<ol>
<li>Standard library imports</li>
<li>Related third party imports</li>
<li>Local application/library specific imports</li>
</ol></li>
<li><p>Same issues here with lack of whitespace between methods and lack of whitespace after commas</p></li>
<li>Drop unnecessary parentheses for the <code>__main__</code> guard, i.e. <code>if __name__ == "__main__":</code></li>
</ul>

<h2>Refactored version</h2>

<p>Here's a refactored version (Python 3.8) of <code>curses_frontend.py</code> with the above suggestions incorporated:</p>

<pre class="lang-python prettyprint-override"><code>#!/usr/bin/env python3

import curses
from pathlib import Path
from typing import Tuple

from fifteen import FifteenPuzzle, Direction

DEFAULT_HIGHSCORE = 999
SAVE_LOCATION = Path.home() / ".15scores"
DIRECTION_TO_CUSTOM_KEYS = {
    Direction.UP: ("w", "j"),
    Direction.DOWN: ("s", "k"),
    Direction.LEFT: ("a", "h"),
    Direction.RIGHT: ("d", "l"),
}


class Scoreboard:
    score: int
    high_score: int
    save_file: Path

    def __init__(self, save_file: Path) -&gt; None:
        self.save_file = save_file
        self._load_high_score()
        self.score = 0

    def _load_high_score(self) -&gt; None:
        try:
            self.high_score = int(self.save_file.read_text().strip())
        except (FileNotFoundError, ValueError):
            self.high_score = DEFAULT_HIGHSCORE

    def increment(self, k: int = 1) -&gt; None:
        self.score += k

    def reset(self) -&gt; None:
        self.score = 0

    @property
    def current_and_high_score(self) -&gt; Tuple[int, int]:
        return (self.score, self.high_score)

    def publish(self) -&gt; bool:
        if self.score &lt; self.high_score:
            self.save_file.write_text(str(self.score))
            self.high_score = self.score
            return True
        return False


class CursesApp:
    QUIT_KEYS = (ord("q"), ord("Q"))
    YES_KEYS = (ord("y"), ord("Y"))
    NO_KEYS = (ord("n"), ord("N"))
    KEY_TO_DIRECTION = {
        curses.KEY_UP: Direction.UP,
        curses.KEY_DOWN: Direction.DOWN,
        curses.KEY_LEFT: Direction.LEFT,
        curses.KEY_RIGHT: Direction.RIGHT,
    }

    def __init__(self, stdscr, puzzle, scoreboard):
        self.stdscr = stdscr
        self.puzzle = puzzle
        self.scoreboard = scoreboard
        curses.curs_set(False)
        curses.use_default_colors()
        self.puzzle_win = curses.newwin(4, 5, 0, 0)
        self.score_win = curses.newwin(1, curses.COLS - 1, 4, 0)
        self.stdscr.addstr(5, 0, "arrows/hjkl/wasd:move | q:quit")
        self.message_win = curses.newwin(1, curses.COLS - 1, 6, 0)
        self.stdscr.refresh()

        _ord = ord
        key_map = self.KEY_TO_DIRECTION
        for direction, keys in DIRECTION_TO_CUSTOM_KEYS.items():
            for key in keys:
                key_map[_ord(key.lower())] = direction
                key_map[_ord(key.upper())] = direction

    def start(self):
        while self.play():
            self.scoreboard.reset()
            self.puzzle.shuffle()

    def play(self):
        while self.refresh() and not self.puzzle.is_solved:
            c = self.stdscr.getch()
            if c in self.QUIT_KEYS:
                self.draw_message("Press q again to quit")
                if self.stdscr.getch() in self.QUIT_KEYS:
                    return False
                self.clear_message()
            elif direction := self.KEY_TO_DIRECTION.get(c, None):
                if self.puzzle.move(direction):
                    self.scoreboard.increment()

        if self.scoreboard.publish():
            self.draw_scores()
            self.draw_message("New high score!")
            self.block_on_input()

        return self.wants_to_play_again()

    def wants_to_play_again(self):
        while True:
            self.draw_message("Play again? (y/n)")
            c = self.stdscr.getch()
            if c in self.YES_KEYS:
                self.clear_message()
                return True
            elif c in self.NO_KEYS:
                self.clear_message()
                return False

    def draw_scores(self):
        current_score, high_score = self.scoreboard.current_and_high_score
        scores = f"Moves: {current_score} | High Score: {high_score}"
        self.score_win.clear()
        self.score_win.addstr(0, 0, scores)
        self.score_win.refresh()

    def refresh(self):
        self.puzzle_win.addstr(0, 0, str(self.puzzle))
        self.puzzle_win.refresh()
        self.draw_scores()
        return True

    def draw_message(self, s):
        self.message_win.clear()
        self.message_win.addstr(0, 0, s)
        self.message_win.refresh()

    def clear_message(self):
        self.message_win.clear()
        self.message_win.refresh()

    def block_on_input(self):
        return self.stdscr.getch()


def main(stdscr):
    puzzle = FifteenPuzzle()
    scoreboard = Scoreboard(SAVE_LOCATION)
    CursesApp(stdscr, puzzle, scoreboard).start()


if __name__ == "__main__":
    curses.wrapper(main)
    print("Thanks for playing!")
</code></pre>
    </div>