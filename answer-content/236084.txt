<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I don't see any glaring issues with the generic EventManager.  Yes Dictionary of Dictionary does happen and is sometimes needed.  </p>

<p>One thing to consider is this implementation violates the Liskov substitution principle of SOLID.   Usually in a non generic version the code would take the object and do "as" their type and check if not null.  While the that wouldn't be an option anymore with the generic.  What if the handler wanted to listen to all events for an Id?   with the non generic it would have that option. With the generic it couldn't unless it knew all the types that got register, not likely.  Also with program growing might start with something like </p>

<pre><code>public class FeatureEvent
{
    public virtual string Title =&gt; "Original Event";
}
</code></pre>

<p>then in phase 2 or 3 down the road need to expand to add more data.  </p>

<pre><code>public class ExtraFeatureEvent : FeatureEvent
{
    public override string Title =&gt; "Better Event";
    public DateTime UseAfter { get; set; } = DateTime.Now;
}

public class ExtraFeature2Event : FeatureEvent
{
    public override string Title =&gt; "Even Better Event";
    public Guid Id { get; set; } = Guid.NewGuid();
}
</code></pre>

<p>Since these both come from FeatureEvent but would be sending data as a different type only the specific types events would get triggered and not the handlers listening for the base event.  </p>

<p>You could expand the trigger to handle and check If with <a href="https://docs.microsoft.com/en-us/dotnet/api/system.type.isinstanceoftype?view=netframework-4.8" rel="nofollow noreferrer">IsInstanceOf</a> but then you have to handle casting the type and gets a bit more complex.  Only you know if this is something that out weights the casting but it something I see a lot of people forget about when they switch to a generic scheme like this.</p>

<p>Also a side note you might want to constrain the event data to come from a base abstract event class to make it clear this is event data and not send over bunch of data.  Like MS does for their events that event data comes from a class that is based on EventArgs.</p>
    </div>