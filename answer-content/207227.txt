<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Upgrade to php7 in order to use strict typings. (I consider type safety a maintenance boost.)</p>

<hr>

<p>I recommend decreasing the amount of lines per method. Rule of thumb: A method should not be longer than 15 lines, as anything longer becomes hard to reason about. Try to figure out chunks that could be their own method. In the future, you might use them on their own as a helper for a different use case.</p>

<hr>

<p>Also, avoid if-else nesting. In most cases, you can keep the nesting level flat by doing:</p>

<pre><code>if (conditon) {
    return "foo" // or throw new Exception("Some Error!");
}

// continue will normal flow
</code></pre>

<hr>

<p>Avoid flags. Martin Fowler has a nice article <a href="https://martinfowler.com/bliki/FlagArgument.html" rel="nofollow noreferrer">why to aovid flags</a>.</p>

<p>The gist against flag arugments are:</p>

<ul>
<li>bad readability `helloWorld("Marting", true, true, false, false) </li>
<li>tends to generate tangled code with loads of if-else checks, sometimes multiple times in a method</li>
</ul>

<p>One can solve it differently by either having specifically named functions or polymorphism. In my example refactoring I have used a different named function the creation of the periods with and without weekend days.</p>

<p>You yourself realize the bad readability as you re-state the purpose of a flag in your unit-test setup within the data provider.</p>

<hr>

<p>Why the huge try-catch block? Why catch all throwables? If something breaks, let it break. If certain exception should make your code still be executable, only catch those. But only try-catch the relevant part of your method. Not its entirety.</p>

<hr>

<p>You have a lot of how comments:</p>

<pre><code>//placeholder to store dates
//get date periods
</code></pre>

<p>Delete those. They are redundant. Comments should never describe the how and what, but only the why.</p>

<p>For example, you do:</p>

<pre><code>//store day as array key
$days[$day] = 1;
</code></pre>

<p>Yet why don't you just:</p>

<pre><code>$day[] = $day;
</code></pre>

<p>as it turns out, the latter generates duplicates and you are only interested in the count of shared days, not totals. This reasoning is not communicated, I had to understand that by playing around with your code base.</p>

<hr>

<p>Make your more explicit. Instead of using a has map with 1 values, I rather would have done:</p>

<pre><code>return \count(\array_unique($days));
</code></pre>

<p>at the end. You don't need the hash map. (It's a nitpick.)</p>

<hr>

<p>Avoid code duplication. At some places you are redoing the same in an if-else block, even though the difference could be streamlined. </p>

<p>Here is my refactoring:</p>

<p>

</p><pre><code>use Carbon\Carbon;
use Carbon\CarbonPeriod;

/**
 * DateTimeHelper
 **/
class DateTimeHelper
{
    /**
     * @param array $intervals
     * @param bool $excludeWeekendDays
     * @return int
     */
    public static function calculateDaysByIntervals(array $intervals, bool $excludeWeekendDays = false): int
    {
        $days = [];
        foreach ($intervals as $dateRange) {
            list($startDate, $endDate) = static::getDates($dateRange);

            $period = $excludeWeekendDays ? static::createPeriodWithoutWeekendDays($startDate, $endDate) : static::createPeriod($startDate, $endDate);
            foreach ($period as $date) {
                $day = $date-&gt;format('Y-m-d');
                $days[] = $day;
            }
        }

        return \count(\array_unique($days));
    }

    /**
     * @param array $dateRange
     * @param bool $removeTime
     * @return array string[]
     */
    private static function getDates(array $dateRange, $removeTime = true): array
    {
        $start = Carbon::parse($dateRange[0]);
        $end = Carbon::parse($dateRange[1]) ?? Carbon::now();


        if ($removeTime) {
            return [$start-&gt;toDateString(), $end-&gt;toDateString()];
        }

        return [$start-&gt;toDateTimeString(), $end-&gt;toDateTimeString()];
    }

    /**
     * @param $startDate
     * @param $endDate
     * @return CarbonPeriod
     */
    protected static function createPeriod(string $startDate, string $endDate): CarbonPeriod
    {
        return CarbonPeriod::between($startDate, $endDate);
    }

    /**
     * @param $startDate
     * @param $endDate
     * @return CarbonPeriod
     */
    protected static function createPeriodWithoutWeekendDays(string $startDate, string $endDate): CarbonPeriod
    {
        return static::createPeriod($startDate, $endDate)-&gt;addFilter(function (Carbon $date) {
            return $date-&gt;isWeekday();
        });
    }
}
</code></pre>
    </div>