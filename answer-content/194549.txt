<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Instead of writing your own <code>lock_guard</code>-like object specifically to use with a CMutex, I'd write a wrapper for CMutex to give it the <code>Lockable</code> interface, then just use it with a normal <code>std::lock_guard</code>:</p>

<pre><code>namespace mfc {
class mutex {
    CMutex m;
public:
    mutex(BOOL bInitiallyOwn = FALSE,  
          LPCTSTR lpszName = NULL,  
          LPSECURITY_ATTRIBUTES lpsaAttribute = NULL) 
        : m(bInitiallyOwn, lpszName, lpsaAttribute) 
    {}

    void lock() { m.Lock(); }
    void unlock() { m.Unlock(); }
};
</code></pre>

<p>Then you can just lock it like you would an <code>std:mutex</code>:</p>

<pre><code>// Define the mutex
mfc::mutex m;

void foo() { 
    std::lock_guard&lt;mfc::mutex&gt; L(m);
    // use whatever m is protecting
}
</code></pre>

<p>You may not even need that though. You may have run into the fact that a Windows-native mutex is always a recursive mutex, and a <code>std::mutex</code> is not. If you replace it with <code>std::recursive_mutex</code> instead of <code>std::mutex</code>, it may work just fine (or depending on how you do your locking, you may need a <code>recursive_timed_mutex</code>).</p>
    </div>