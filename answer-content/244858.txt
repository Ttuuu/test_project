<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Let me share my <code>async await</code> solution for that:</p>
<ul>
<li>Because Your fetch function is pretty similar till the <code>res.text()</code>, I would create an own function (<code>fetchData </code>) for that, what is returning a <code>Promise</code>, what is resolving a <code>res.text()</code></li>
<li>Now you can assign an <code>async</code> to your <code>getLogs</code>function</li>
<li>Lets reorganise your code above</li>
<li><b>Error handling is missing here, but take care about it </b></li>
</ul>
<p>:</p>
<pre><code>  fetchData = (url) =&gt; {
    return new Promise((res, rej) =&gt; {
      fetch(url)
        .then(r =&gt; r.text())
        .then(text =&gt; {
          res(text)
        })
        .catch(e =&gt; rej(e));
    });
  }

  getLogs = async () =&gt; {
    const { user } = this.props.auth;
    const regxmlPromise = fetchData(`http://127.0.0.1:60000/onexagent/api/registerclient?name=${user.id}`);
    const secondDataPromise = fetchData(`/api/avaya/getid/${user.id}`);
   
    const resolves = await Promise.all([regxmlPromise, secondDataPromise]);
    
    const [firstResultStepOne, secondResultStepOne] = resolves || [];
    
    const secondResultStepTwo = await fetchData(`http://127.0.0.1:60000/onexagent/api/nextnotification?clientid=${secondResultStepOne}`);

    if (firstResultStepOne) {
      const regxml = new XMLParser().parseFromString(firstResultStepOne);
      if (regxml.attributes.ResponseCode === "0") {
        axios.post(`/api/avaya/register/${user.id}`, regxml);
      }
      console.log(regxml);
    }
    
    if (secondResultStepTwo) {
      const xml = new XMLParser().parseFromString(secondResultStepTwo);
      axios.post(`/api/avaya/getlogs/${user.id}`, xml);
    }
  };
</code></pre>
    </div>