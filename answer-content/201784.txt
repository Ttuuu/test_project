<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>class XYZCoordinate{
public:
    int x;
    int y;
    float z;

    XYZCoordinate(int X, int Y, float Z){
    x = X;
    y = Y;
    z = Z;
    }
};
</code></pre>

<p>Integrate a formatting utility, like <a href="https://clang.llvm.org/docs/ClangFormat.html" rel="noreferrer">clang-format</a> or <a href="http://astyle.sourceforge.net/" rel="noreferrer">astyle</a>, into your tool-chain. Your indentations and spacing are inconsistent.</p>

<p>Do you plan on working with <code>x</code> and <code>y</code> as <code>float</code>s? Avoid transformations until you absolutely need them.</p>

<p>For constructors, prefer initialization over assignment.</p>

<pre><code>class XYZCoordinate {
public:
    XYZCoordinate(int x, int y, float z) : x{x}, y{y}, z{z} {}

    int x;
    int y;
    float z;
};
</code></pre>

<p>Consider leveraging the type system to safely operate on the dimensions of your coordinate class. You can read up on strong types <a href="https://foonathan.net/blog/2016/10/11/type-safe.html" rel="noreferrer">here</a> and <a href="https://www.fluentcpp.com/2017/05/05/news-strong-types-are-free/" rel="noreferrer">here</a></p>

<hr>

<pre><code>Loadfileoutput(int xmn, int xmx, int ymn, int ymx, vector&lt;XYZCoordinate&gt; val){
</code></pre>

<p><a href="https://www.fluentcpp.com/2017/05/05/news-strong-types-are-free/" rel="noreferrer">Avoid <code>using namespace std;</code></a>.</p>

<p>Your coordinate vector argument is being copied here.  Treat <code>vector&lt;XYZCoordinate&gt;</code> either as a input-only argument or as a sink argument.</p>

<pre><code>// In-Only - Pass by reference to const then copy
Loadfileoutput(/* ... */, const std::vector&lt;XYZCoordinate&gt;&amp; val) 
  : /* ... */
  , values{val} // copied!
{}  

// Sink - Pass by value and move into place
Loadfileoutput(/* ... */, std::vector&lt;XYZCoordinate&gt; val) 
  : /* ... */
  , values{std::move(val)} // moved!
{}
</code></pre>

<hr>

<pre><code>    std::string str;
</code></pre>

<p>Poorly-chosen names can mislead the reader and cause bugs. It is important to use descriptive names that match the semantics and role of the underlying entities, within reason. Your intent is to use the string as a buffer, so just name it <code>buffer</code>.</p>

<hr>

<pre><code>    bool isfirst = true;
    int xmin, xmax, ymin, ymax;
</code></pre>

<p>Any time you have a situation where you need a boolean flag to distinguish between a value being set or not, consider using an optional type (<code>boost::optional</code>, <code>std::optional</code>, etc).</p>

<hr>

<pre><code>    vector&lt;XYZCoordinate&gt; file = vector&lt;XYZCoordinate&gt;();
</code></pre>

<p>Don't repeat yourself.</p>

<pre><code>    std::vector&lt;XYZCoordinate&gt; coordinates(); 
    ^                          ^
    Type mentioned once        Has an appropriate name
</code></pre>

<hr>

<pre><code>    while (std::getline(in, str))
        if (str[0] == '#') //.skipping the .txt file header
</code></pre>

<p><a href="https://en.cppreference.com/w/cpp/string/basic_string/getline" rel="noreferrer"><code>std::getline</code></a> does not skip leading whitespace.  Use the IO manipulator <a href="https://en.cppreference.com/w/cpp/io/manip/ws" rel="noreferrer"><code>std::ws</code></a>:</p>

<pre><code>    while (std::getline(in &gt;&gt; std::ws, str))
        if (str[0] == '#') //.skipping the .txt file header
</code></pre>

<p>If you really want to use <code>std::getline</code> and a string buffer, consider using string_views liberally to access the buffer.  Trim and split are easy to implement for string views. Numeric conversions already exists (<code>std::from_chars</code>).</p>

<hr>

<pre><code>        vector&lt;string&gt; v = vector&lt;string&gt;();
</code></pre>

<p><code>std::vector</code> doesn't have a small buffer optimization to take advantage of, so every loop on a line builds up and tears down this buffer.  Move it outside the loop.  That will also mean that you need to appropriately size it (3 records + remaining) and you'll need to wrap either <code>boost::split</code> or <code>boost::is_any_of</code> with that limits to 3 splits.</p>

<p><code>std::string</code> does have a small string optimization, but it's implementation defined on how much space you have before you are forced to allocate. </p>

<p><a href="https://i.stack.imgur.com/l8mzj.png" rel="noreferrer"><img src="https://i.stack.imgur.com/l8mzj.png" alt="SSO Capacities for the big three"></a></p>

<p>The longest coordinate from your example above, including sign and decimal, is 14 characters in length.  If it's possible for coordinates to be longer than the SSO supported capacity of your implementation, consider using a string view instead (<code>boost::string_view</code>, <code>std::string_view</code>) and use <code>from_chars()</code> to convert to your numeric type.</p>

<hr>

<pre><code>        boost::split(v, str, boost::is_any_of(" ,"));
</code></pre>

<p>Separators are an interesting detail you must take care with. Locales using the SI style may use spaces for its thousands separator.  Almost half of the countries using the hindu-arabic numeral system use period for its <a href="https://en.wikipedia.org/wiki/Decimal_separator" rel="noreferrer">decimal separator</a>.  A similar amount use the comma as a decimal separator.  The rest use some combination of both and other characters.  Unless you are sure everyone uses the same locale, you just can't split on comma.  Similarly, <a href="https://tools.ietf.org/html/rfc4180" rel="noreferrer">CSV fields</a> typically allow commas to be part of the value, as long as they are part of an escaped sequence,</p>

<pre><code>212311231,3.14,"3,14"
         ^    ^  ^
         |    |  Don't split on this
         Split on these commas
</code></pre>

<p>If you want to support CSVs, then support the full specification or document the extent by which you support comma separated values.</p>

<hr>

<pre><code>        string xstr = v[0];
        string ystr = v[1];
        string zstr = v[2];
</code></pre>

<p>These are unused variables and should be removed.  Your compiler didn't mention it because copying may have intended side effects for non-pod types.  Keep in mind that you have pointers and references if you need to locally refer to something.</p>

<hr>

<pre><code>        int xint, yint;
        float x,y,z;

        stringstream(v[0]) &gt;&gt; x;
        xint = (int)round(x);

        stringstream(v[1]) &gt;&gt; y;
        yint = (int)round(y);

        stringstream(v[2]) &gt;&gt; z;
</code></pre>

<p>You construct and destruct 3 instances of <code>std::stringstream</code>, which is expensive.</p>

<p>Make sure you are using the C++ version of <code>std::round</code> by including <code>&lt;cmath&gt;</code>.</p>

<p>Calls to <code>round</code> can fail.  Check to see if <a href="https://en.cppreference.com/w/cpp/numeric/math/round" rel="noreferrer"><code>std::round</code></a> flagged an error with <a href="https://en.cppreference.com/w/cpp/numeric/fenv/fetestexcept" rel="noreferrer"><code>std::fetestexcept</code></a>.</p>

<pre><code>        XYZCoordinate temp = XYZCoordinate(xint, yint, z);
        file.push_back(temp);
</code></pre>

<p>You've created a named temporary object and you copy it into your vector.  Since you no longer need <code>temp</code>, just move it into the vector.</p>

<pre><code>        XYZCoordinate temp(xint, yint, z);
        file.push_back(std::move(temp));
</code></pre>

<p>You can shorten this up by avoiding the named temporary.</p>

<pre><code>        file.push_back(XYZCoordinate(xint, yint, z));
</code></pre>

<p>You can avoid the temporary by directly emplacing the objects arguments.</p>

<pre><code>        file.emplace_back(xint, yint, z);
</code></pre>

<p>Consider another approach that doesn't rely on string conversions and the temporary shuffling.  Others have mentioned implementing <code>operator&gt;&gt;(istream&amp;, XYZCoordinate&amp;)</code> which does a formatted read and the rounded conversion.</p>

<pre><code>   friend std::istream&amp; operator&gt;&gt;(istream&amp; in, XYZCoordinate&amp; c) {
        float f_x;
        float f_y;

        if (!(in &gt;&gt; f_x &gt;&gt; f_y &gt;&gt; c.z)) {
            return in;
        }

        c.x = static_cast&lt;int&gt;(std::round(f_x)); // check the error!
        c.y = static_cast&lt;int&gt;(std::round(f_y)); // check the error!
        return in;
    }
</code></pre>

<p>Back in the line reading loop, you simply move the sentry in the file, skipping whitespace and unnecessary portions (your data is 1 record per line, so skip everything after the third value).</p>

<pre><code>    while (in &gt;&gt; std::ws) {      // skip any whitespace
        if (in.peek() == '#') {  // skip comment lines
            consume_line(in);    // by skipping to '\n'
            continue;
        }

        auto&amp; coord = coordinates.emplace_back();  // create the object     
        if (!(in &gt;&gt; coord)) {                      // write its values
            // Read failed: Log, throw, something
        }
        consume_line(in); // the record has been read, to the next record!

        // use coord.x and coord.y for minmax finding.
    }
</code></pre>

<p>As the comment says, <code>consume_line</code> just skips all the remaining characters upto and including the end-of-line character.</p>

<pre><code>std::istream&amp; consume_line(std::istream&amp; stream) {
    return stream.ignore(std::numeric_limits&lt;std::streamsize&gt;::max(), stream.widen('\n'));
}
</code></pre>

<hr>

<pre><code>    Loadfileoutput output = Loadfileoutput(xmin,xmax,ymin,ymax,file);
    return output;
</code></pre>

<p>Similarly on simplifying things, you can directly initialize <code>output</code>.</p>

<pre><code>    Loadfileoutput output(xmin, xmax, ymin, ymax, file);
    return output;
</code></pre>

<p>You don't need a named return variable as you just returning it immediately and making no changes.</p>

<pre><code>    return Loadfileoutput(xmin, xmax, ymin, ymax, file);
</code></pre>

<p>Your compiler will still be able to use return value optimization and construct the returned value in-place.</p>
    </div>