<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As usual there isn't much left to say about your code then I'll try to imagine to use it:</p>

<p>I'd expect <code>CreateFileAsync()</code> to only <em>create</em> the file like <code>File.Create()</code>, returning a <code>Stream</code> to that (abstract) file. It might be even easier to use because instead of:</p>

<pre><code>using (var stream = new MemoryStream()) {
    stream.Write(...);
    await output.CreateFileAsync(path, stream);
}
</code></pre>

<p>I might write:</p>

<pre><code>using (var stream = await output.CreateFile(path)) {
    stream.Write(...);    
}
</code></pre>

<p>There is something similar for reading (in <code>IFileInfo</code>) then it might be handy to have it also for writing. Not a big deal if I can't but then I'd probably expect <code>CreateFileAsync()</code> to be named <code>CreateFileFromStreamAsync()</code> (or something like that).</p>

<hr>

<p>I'd, personally, love to have an <code>*Async()</code> version of all those methods. This code might be easily extended to work through a network using different transports. What about a (finally) easy to use FTP client? I might not want to wait for a <code>Delete()</code> call to complete (or I might want to do something else while waiting, maybe preparing the file to upload).</p>

<hr>

<p><code>EmbeddedFileProvider</code> expects <code>\</code> as directory separator, you might use <code>Path.DirectorySeparatorChar</code> instead of the hard-coded character and you should probably check also for <code>Path.AltDirectorySeparatorChar</code>. This code might be compiled for .NET Standard and run on .NET Core on a Linux machine. Even if Windows is the only target I appreciate applications which handle both when I switch often from Linux to Windows (and I suppose I'm not the only one).</p>

<hr>

<p>I'd like to have few read-only properties to check what a <code>IFileInfo</code> supports: <code>CanRead</code>, <code>CanWrite</code>, <code>CanDelete</code> and similar. As a caller I might find easier to check for that property instead of catching an exception (that's toooo Pythonic).</p>

<hr>

<blockquote>
  <p>should I be concerned about thread-safty here? I didn't use any locks but adding them isn't a big deal. Should I? Where would you add them? I guess creating files and directories could be good candidates, right?</p>
</blockquote>

<p>I suppose you should not. .NET streams are not thread-safe, native file system is <em>thread-safe</em> in the sense that its behavior is well-defined then - for consistency - I'd at least change <code>DeleteFile()</code> and <code>DeleteDirectory()</code> of <code>InMemoryFileProvider</code> to mimic the same behavior (assuming <code>FileShare.Delete</code> if file is "in use" it'll be deleted when every handle is closed). Of course to do this you have to add locks to its functions (and if <code>IFileInfo</code> is not <code>IDisposable</code> current implementation works pretty smoothly).</p>

<p>Can you do more? Probably but we will go in the <em>opinions</em> realm and I appreciate foundation classes to be as unopinionated as possible.</p>

<blockquote>
  <p>should the EmbeddedFileProvider use the RelativeFileProvider to add the assembly namespace to the path or should I leave it as is?</p>
</blockquote>

<p>I'd leave it as-is but it's more a gut feeling than an educated decision. I don't think it can make code better or easier to understand.</p>
    </div>