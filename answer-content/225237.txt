<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your implementation consistently uses trailing return type specification even when not needed, hopefully to look more sexy.  Personally, I don't like it, but sexiness is subjective.</p>

<p>The <code>log2</code> function can be made <code>constexpr</code> (thus <code>noexcept</code>), and <code>Integer</code> should be constrained.  Also, <code>assumes n &gt; 0</code> may deserve an assertion.  Like this:</p>

<pre><code>template &lt;typename Integer,
          std::enable_if_t&lt;std::is_integral&lt;Integer&gt;::value, int&gt; = 0&gt;
constexpr Integer log2(Integer n)
{
    assert(n &gt; 0);
    // ...
}
</code></pre>

<p>Also, the name <code>log2</code> is likely to cause a name clash.  We have <a href="https://en.cppreference.com/w/cpp/numeric/math/log2" rel="nofollow noreferrer"><code>log2</code></a> in the standard library.</p>

<p>Since C++20, the <code>log2</code> function can be simplified:</p>

<pre><code>template &lt;std::Integral Integer&gt;
constexpr Integer log2(Integer n)
{
    assert(n &gt; 0);
    return std::log2p1(static_cast&lt;std::make_unsigned_t&lt;Integer&gt;&gt;(n)) - 1;
}
</code></pre>

<p>(You will need <code>#include &lt;concept&gt;</code> and <code>#include &lt;bit&gt;</code>.)</p>

<p><code>RandomAccessIterator</code> is an incredibly long names.  This is unnecessary.  Use a shorter name like <code>RanIt</code>.</p>

<p>Similarly, <code>vergesort</code> may also benefit from constraint.  Currently, the <code>vergesort</code> function is way too long.  It should definitely be broken up to logical parts.  Also, uses a <code>std::list</code> to handle the runs.  You probably chose it based on benchmarks, but it is definitely better to provide an interface to customize.  You can take a buffer template parameter:</p>

<pre><code>template &lt;/* same as before */, typename Buffer = std::list&lt;RanIt&gt;&gt;
</code></pre>

<p>Also, there is the (extremely unlikely) edge-case of <code>difference_type</code> being unable to hold such a "big" number as <code>128</code>.</p>
    </div>