<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Querying for row elements</h3>
<p>The original code queries for elements with tag name <code>tr</code>:</p>
<blockquote>
<pre><code>var allRows = table.querySelectorAll("tr"); 
</code></pre>
</blockquote>
<p>Just as the code utilizes table methods like <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/insertRow" rel="nofollow noreferrer"><code>insertRow()</code></a>, the property <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/rows" rel="nofollow noreferrer"><code>rows</code></a> could be used instead:</p>
<pre><code>var allRows = table.rows;
</code></pre>
<p>That way there is no DOM query each time the button is clicked.</p>
<p>If there was in fact a need to get all elements with tag name <code>tr</code>, the method <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/getElementsByTagName" rel="nofollow noreferrer"><code>Element.getElementsByTagName()</code></a> could be used, and since it "<em>returns a live <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLCollection" rel="nofollow noreferrer"><code>HTMLCollection</code></a> of elements</em>"<sup><a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/getElementsByTagName" rel="nofollow noreferrer">1</a></sup> that could happen outside the click handler (e.g. where the other elements fetched by Id are stored). For more information about the differences refer to answers to <a href="https://humanwhocodes.com/blog/2010/09/28/why-is-getelementsbytagname-faster-that-queryselectorall/" rel="nofollow noreferrer">this post from 2010</a> which (at the time) claimed “<em><code>querySelectorAll("a")</code> is a shocking 98% slower than <code>getElementsByTagName("a")</code></em>”, as well as answers to <a href="https://stackoverflow.com/q/18247289/1575353">What is the difference between querySelector and getElementsByTagName?</a> like <a href="https://stackoverflow.com/a/18247327/1575353">Quentin's answer</a> plus <a href="https://jsperf.com/queryselectorall-vs-getelementsbytagname" rel="nofollow noreferrer">this jsPerf test</a>.</p>
<p><a href="https://www.browserscope.org/user/tests/table/agt1YS1wcm9maWxlcnINCxIEVGVzdBj_ptMCDA" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/UjcX3.png" alt="browserScope"></a></p>
<h3>inline <code>onfocus</code> handler vs Javascript</h3>
<p>The markup contains the text input element with the <em>onfocus</em> attribute:</p>
<blockquote>
<pre><code> &lt;input id="input" class="input" type="text" placeholder="Enter here!!!" onfocus="this.value=' ' "&gt;
</code></pre>
</blockquote>
<p>Instead of specifying the focus handler in the markup, it can be added in the JavaScript. That way there is a separation between the business logic and the markup. One way to do this is to use <a href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener" rel="nofollow noreferrer"><code>Element.addEventListener()</code></a> to add a callback function whenever an event occurs. See the example code below:</p>
<pre><code>input.addEventListener('focus', function(event) {
    input.value = ' '; // could also use event.target instead of input
});
</code></pre>
<p>That way the logic of clearing the value is separated from the markup.</p>
    </div>