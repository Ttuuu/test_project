<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A few things about your encryption algorithm:</p>

<p>I don't think you gain anything by using a <code>StringBuilder</code>.  Modifying a <code>char[]</code> is easier to use and just as easy to make a string with.</p>

<p>Your enum I would suggest naming it something like <code>EncryptionMode</code>.</p>

<p>The names of the arguments need work.  I would suggest instead of <code>n</code> use <code>shift</code>, instead of <code>test</code> change it to take the enum(<code>EncryptionMode mode</code>)</p>

<p>You're restricting the shift to just the upper case alphabet.  To me it makes more sense to use the whole ASCII character set.  This way you can handle any letters, numbers and punctuation.</p>

<p>Instead of assigning the shift modifier to a separate variable, I would suggest modifying the shift variable.</p>

<p>Anytime you use magic values try to set up constants instead.  This puts names to the values, making it easier to decipher why they are there.</p>

<p>Putting this all together.  It could look like this:</p>

<pre><code>final static char UPPER_LIMIT = (char)255;
final static int NO_ASCII_CHARS = 256;
enum EncryptionMode {ENCRYPT, DECRYPT};
public static String EncryptOrDecrypt(String text, int shift, EncryptionMode mode) {

    if(mode == EncryptionMode.DECRYPT) {
        shift *= -1;
    }
    char[] chars = text.toCharArray();
    for(int i = 0; i &lt; chars.length; ++i){
        chars[i] += shift;
        if(chars[i] &lt; '\0'){
            chars[i] = (char)(chars[i] + UPPER_LIMIT);
        }
        else{
            chars[i] = (char)(chars[i] % NO_ASCII_CHARS );
        }
    }
    return new String(chars);
}
</code></pre>

<p>Took another look and realized this code could be more performant.  Here's the revision:</p>

<pre><code>public static String EncryptOrDecrypt(String text, int shift, EncryptionMode mode) {

    if(mode == EncryptionMode.DECRYPT) {
        shift *= -1;
    }
    char[] chars = new char[text.length()];
    for(int i = 0; i &lt; chars.length; ++i){            
        chars[i] = (char)(shift + text.charAt(i));
        if(chars[i] &lt; '\0'){
            chars[i] = (char)(chars[i] + UPPER_LIMIT);
        }
        else{
            chars[i] = (char)(chars[i] % NO_ASCII_CHARS );
        }
    }
    return new String(chars);
}  
</code></pre>
    </div>