<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I hate to provide an "answer only" code review, but I'd like to expand upon Mast's "Python comes batteries included" point:</p>

<p>Python comes with a <a href="https://docs.python.org/3/library/stdtypes.html#str.translate" rel="noreferrer"><code>str.translate</code></a>, function which will do a letter-for-letter substitution in a string:</p>

<pre><code>&gt;&gt;&gt; help(str.translate)
Help on method_descriptor:

translate(self, table, /)
    Replace each character in the string using the given translation table.

      table
        Translation table, which must be a mapping of Unicode ordinals to
        Unicode ordinals, strings, or None.

    The table must implement lookup/indexing via __getitem__, for instance a
    dictionary or list.  If this operation raises LookupError, the character is
    left untouched.  Characters mapped to None are deleted.
</code></pre>

<p>Continuing on the batteries included, it also has a <a href="https://docs.python.org/3/library/stdtypes.html#str.maketrans" rel="noreferrer"><code>str.maketrans</code></a> function for creation of the translation table:</p>

<pre><code>&gt;&gt;&gt; help(str.maketrans)
Help on built-in function maketrans:

maketrans(x, y=None, z=None, /)
    Return a translation table usable for str.translate().

    If there is only one argument, it must be a dictionary mapping Unicode
    ordinals (integers) or characters to Unicode ordinals, strings or None.
    Character keys will be then converted to ordinals.
    If there are two arguments, they must be strings of equal length, and
    in the resulting dictionary, each character in x will be mapped to the
    character at the same position in y. If there is a third argument, it
    must be a string, whose characters will be mapped to None in the result.
</code></pre>

<p>So, to continue improvements upon Mast's solution:</p>

<pre><code>import string

def caesar_cipher(msg, shift, alphabet=string.ascii_lowercase):
    shift %= len(alphabet)
    xlate = str.maketrans(alphabet, alphabet[shift:] + alphabet[:shift])
    return msg.translate(xlate)

def main():
    print(caesar_cipher("abcde test bla bla bla", 51))

if __name__ == "__main__":
    main()
</code></pre>
    </div>