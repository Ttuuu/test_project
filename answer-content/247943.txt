<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>import quantumrandom
</code></pre>
<p>The problem is that you should not trust third parties when importing random numbers. Furthermore, getting the randomness requires a secure connection in the first place. The secure connection relies on random numbers to remain secure. A secure random number generator that has been seeded by the OS is generally the best way to go.</p>
<pre><code>HMAC_KEY = "738525cf1f8acd06beb4cf6cd816d1dc"
</code></pre>
<p>Generally keys should not be strings, not even hexadecimal strings. Strings are easy to find. I'd rather even use a Python <code>\b</code> string than hexadecimals, but preferably you'd use a keystore, or keys derived from a password supplied by the user. Which brings us to the next point:</p>
<pre><code>hashed = pyscrypt.hash(
    password=password,
    salt="2df2e24c76d4d7b37e7ffcdf787e426b",
    N=16384,
    r=8,
    p=1,
    dkLen=16)
</code></pre>
<p>Don't use single-person unmaintained libraries. Never ever use a static salt. A salt, again, is a binary string, not a normal string. 16Ki iterations is on the short scale of things.</p>
<pre><code>iv = quantumrandom.binary()[:16]
</code></pre>
<p>If you'd have used a random salt for each encryption then you can simply derive the keys (the encryption and MAC key) <em>and</em> IV from it. As the salt is unique, the key and IV combination will be unique as well.</p>
<pre><code>data = iv.encode("hex") + cipher.encrypt(plaintext).encode("hex")
sig = hmac.new(HMAC_KEY, data, hashlib.sha512).digest().encode("hex")
</code></pre>
<p>I applaud you for having the IV authenticated as well. I also applaud you for using encrypt-then-MAC which is generally considered more secure than encrypt-and-MAC or MAC-then-encrypt.</p>
<p>I cannot applaud you to perform the HMAC over the hexadecimal representation of the bytes though; you've just doubled the required effort for calculating it. Never confuse binary with the <em>representation</em> of the binary in some textual format (hex, base64).</p>
<p>And while we're at it, hex requires an overhead of 100% when viewed as bytes (assuming an 8 bit encoding). Base 64 is a lot more efficient. Generally: first concatenate the binary, then encode; this will generate fewer characters as well. Or keep it as binary of course; a lot of ciphertext is encoded unnecessarily (leading to so called "stringified" code).</p>
<hr>
<p>One improvement would be the use of an authenticated cipher such as AES-GCM instead of performing the encryption and HMAC separately.</p>
<p>For larger plaintext / ciphertext you could think about piecemeal updates / streaming so that the entire plaintext / ciphertext doesn't need to be in memory all at once.</p>
    </div>