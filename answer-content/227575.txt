<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>However, I'm concerned that using subqueries like this may be a bit of a hack and affect performance (especially if I end up adding additional columns that need this information).</p>
</blockquote>

<p>Whenever you find yourself including a subquery as part of your <code>SELECT</code> list, you're right to question whether or not you're doing the correct thing. These can often suffer from performance issues, and are much harder to read and troubleshoot.</p>

<p>I wouldn't worry as much about the second half of your question:</p>

<blockquote>
  <p>especially if I end up adding additional columns that need this information</p>
</blockquote>

<p>Unless you know that you're likely to do this in the future, you're likely micro- and pre-optimizing.</p>

<p>That being said, ultimately your solution is very straightforward. All you want is a join from table <code>A</code> to table <code>B</code> on two different columns. You might recognize that what you actually need is <em>two</em> joins from table <code>A</code> to table <code>B</code>. That would just look like this:</p>

<pre><code>SELECT created_at,
       filing_id,
       PriorStatuses.dd_doc_status_name prior_dd_status,
       NewStatuses.dd_doc_status_name new_dd_status
  FROM REP_ASSIST.ES_LOG
    LEFT OUTER JOIN REP_ASSIST.ES_DOCUMENT_STATUSES PriorStatuses
      ON ES_LOG.prior_dd_rcvd_status_id = PriorStatuses.dd_doc_status_id
    LEFT OUTER JOIN REP_ASSIST.ES_DOCUMENT_STATUSES NewStatuses
      ON ES_LOG.new_dd_rcvd_status_id = NewStatuses.dd_doc_status_id
  WHERE filing_id = 988;
</code></pre>

<p>I did my best to come up with meaningful names based on context, but you should just pick some domain-relevant alias as appropriate.</p>

<p>If you do find yourself with a really large number of these columns, you might want to consider a new table design. For example, it might then be easier to have a table like this:</p>

<pre><code>CREATE TABLE REP_ASSIST.ES_LOG_STATUSES
(
  filing_id       bigint       NOT NULL,
  doc_status_type nvarchar(50) NOT NULL,
  status_id       bigint       NOT NULL
);
</code></pre>

<p>Then you can add new status types (or whatever the appropriate domain terminology would be) ad-hoc to this table, and your query then becomes something like this</p>

<pre><code>SELECT ES_LOG.created_at,
       ES_LOG.filing_id,
       ES_LOG_STATUSES.doc_status_type,
       ES_DOCUMENT_STATUSES.dd_doc_status_name
  FROM REP_ASSIST.ES_LOG
    INNER JOIN REP_ASSIST.ES_LOG_STATUSES
      ON ES_LOG.filing_id = ES_LOG_STATUSES.filing_id
    LEFT OUTER JOIN REP_ASSIST.ES_DOCUMENT_STATUSES 
      ON ES_LOG_STATUSES.status_id = ES_DOCUMENT_STATUSES.status_id
  WHERE ES_LOG.filing_id = 988;
</code></pre>

<p>If its important to have the output be one row per <code>filing_id</code> instead of one row per <code>filing_id</code> and <code>doc_status_type</code> combination, you could always <a href="https://docs.microsoft.com/en-us/sql/t-sql/queries/from-using-pivot-and-unpivot?view=sql-server-2017" rel="nofollow noreferrer"><code>PIVOT</code></a> your result set. If the set of possible status types is unknown or changes rapidly, there are <a href="https://stackoverflow.com/q/10404348/3076272">plenty</a> of ways to do that dynamically</p>
    </div>