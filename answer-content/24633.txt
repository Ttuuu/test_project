<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You could use the <a href="http://en.wikipedia.org/wiki/Sieve_of_Eratosthenes" rel="nofollow">Sieve of Eratosthenes</a> for numbers less than 10 million (you are only going up to 100 million).</p>

<p>I think that  checking the low bit <code>(num &amp; 1) == 0</code> is quicker than checking the remainder <code>num % 2 == 0</code>.  Similarly, bit shifting is quicker for division or multiplication by 2: <code>d /= 2</code> could be <code>d &gt;&gt; 1</code>.</p>

<p>You might experiment with doing an initial check for division by a few low primes (3, 5, 7, 11) in your IsPrime method and see if that makes a difference.</p>

<p>Finally, for your "random" numbers, you might want to choose products of primes, e.g. 3*5*7*11*13..., or maybe that plus 1.  Maybe that's crazy.  But some "random" numbers might provide richer test cases than others, and cause a faster elimination of non-primes.</p>
    </div>