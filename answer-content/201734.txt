<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You can skip Ramda altogether. JS has a built-in <code>array.map()</code>. </p>

<p>I'd avoid doing side-effects on a <code>map</code> operation. The goal of a <code>map</code> operation is to transform one array of things into another array of things without affecting the original array or its contents. Not following this breaks expectations, and thus your code's reliability.</p>

<p>If you intend to mutate, use <code>array.forEach()</code> instead. Otherwise, if you want to continue using <code>array.map()</code>, create new objects.</p>

<p>You can do either of the following:</p>

<pre><code>// Not mutating elements of events
const newEvents = events.map(e =&gt; {
  if (!['ts', 'sxi', 'ht', 'hd'].includes(el.value)) {
    // Copy e to a new object, append extras to this new object.
    return { ...e, extras: {type: 'cx', label: 'Es', name: 'es', options: ['cf']} }
  } else {
    // Changed nothing, return original element.
    return e
  }
})

// Mutating elements of events
events.forEach(e =&gt; {
  if (['ts', 'sxi', 'ht', 'hd'].includes(el.value)) return
  e['extras'] = {type: 'cx', label: 'Es', name: 'es', options: ['cf']}
})
</code></pre>
    </div>