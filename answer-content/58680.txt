<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think that most things are said, I recapitulate and add some of my own stuff:</p>

<ul>
<li>As Jesse said, I'd use <code>Any</code> instead of <code>Where</code> + <code>Count</code>. It should have a better performance, I think.</li>
<li>Properties are for me: <code>HasNoIssues</code>, <code>HasWarnings</code> and <code>HasErrors</code></li>
<li>In my Opinion the rest should be methods</li>
<li><code>Issues.Where(x =&gt; x.Name == "Warnings").First()</code> is the same as <code>Issues.First(x =&gt; x.Name == "Warnings")</code></li>
<li>I changed the names of the functions (but it may be a matter of taste).</li>
</ul>

<p>So it would be in my approach like this:</p>

<pre><code>    public Field[] Issues { get; set; }

    public bool HasErrors
    {
        get
        {
            if (HasIssues)
            {
                return Issues.Any(x =&gt; x.Name == "Errors");
            }
            return false;
        }
    }

    public bool HasIssues
    {
        get
        {
            return Issues != null &amp;&amp; Issues.Length &gt; 0;
        }
    }

    public bool HasWarnings
    {
        get
        {
            if (HasIssues)
            {
                return Issues.Any(x =&gt; x.Name == "Warnings");
            }
            return false;
        }
    }

    public ResponseTags[] GetErrors()
    {
        if (HasErrors)
        {
            return Issues.First(x =&gt; x.Name == "Errors").Groups.First().Warnings;
        }
        return new ResponseTags[0];
    }

    public ResponseTags[] GetWarnings()
    {
        if (HasWarnings)
        {
            return Issues.First(x =&gt; x.Name == "Warnings").Groups.First().Warnings;
        }
        return new ResponseTags[0];
    }

    // For the display functions:
    // I don't understand why you only usses the first
    // groups of errors and warnings, but that may be a requirement.

    public string GetErrorsDisplayData()
    {
        var errorString = "";
        if (HasErrors)
        {
            errorString += Issues.First(x =&gt; x.Name == "Errors")
                .Groups.First()
                .Errors.Aggregate("", (data, t) =&gt; data + t.Value + "\n");
        }
        return errorString;
    }

    public string GetWarningsDisplayData()
    {
        var warningString = "";
        if (HasWarnings)
        {
            warningString += Issues.First(x =&gt; x.Name == "Warnings")
                .Groups.First()
                .Warnings.Aggregate("", (data, t) =&gt; data + t.Value + "\n");
        }
        return warningString;
    }
</code></pre>
    </div>