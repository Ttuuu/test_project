<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Good stuff</h2>

<p>Impressive early use of signal handling.</p>

<p>Good formating.</p>

<p>Good comment level.</p>

<h2>Functional error?</h2>

<p><strike> Something thing is amiss concerning <code>height</code> and <code>width</code>. I'd expect <code>height</code>  possible values for <code>coord_a</code>, not <code>height-2</code>.</strike></p>

<pre><code>// ??
coord_a = (rand() % (height-2)) + 1;
</code></pre>

<p>With using a sub-range of <code>height-2</code>, <code>height * width &lt; mine_cnt</code> then does not look like a proper test.</p>

<p>I'd recommend a review and tolerate mine fields as small as 1x1.</p>

<p>Ah, I now see <code>height += 2; width  += 2;</code> which handle most of this concern.</p>

<p>As <code>height</code> is no longer the mine field <em>height</em>, use of a different variable name would add clarity.  <code>height_p2</code>  maybe?</p>

<p>Either way, <code>if(height * width &lt; mine_cnt)</code> is likely incorrect.  Perhaps <code>if((height - 2) * (width - 2) &lt; mine_cnt)</code></p>

<h2>Non-standard code</h2>

<p>My compile reported: "ISO C forbids omitting the middle term of a ?: expression".  </p>

<pre><code>// height   = (atoi(argv[1]) ? : 16);
// Perhaps?
int i = atoi(argv[1]);
height = i &gt; 0 ? i : 16;  // also perform sign check

// Later code depends on `height &gt; 2` so maybe
height = i &gt; 2 ? i : 16; 
// Also suggest an sane upper bound check
</code></pre>

<h2>Avoid naked <a href="https://en.wikipedia.org/wiki/Magic_number_(programming)" rel="nofollow noreferrer">magic numbers</a></h2>

<p>Either add a comment to detail the screen <a href="https://en.wikipedia.org/wiki/ANSI_escape_code#Colors" rel="nofollow noreferrer">escape sequences</a> or use some constant</p>

<pre><code>    "\x1b[94m1",  // Bright Blue
    "\x1b[32m2",  // Green
    // or
    #define GREEN "\x1b[32m2"
</code></pre>

<p>Let code compute </p>

<pre><code>// fgets(input_buf, 99, stdin);
fgets(input_buf, sizeof input_buf, stdin);
</code></pre>

<h2>malloc() style</h2>

<p>Rather than <code>ptr = malloc(n * sizeof (some_type))</code>, consider <code>ptr = malloc(sizeof *ptr * n)</code>.  It is easier to code right, review and maintain.  Leading with <code>sizeof()</code> insures correct math for more complicated computations.</p>

<pre><code>// field = malloc(height * sizeof(int*));
field = malloc(sizeof *field * height);
</code></pre>

<h2>Debug idea</h2>

<p>Allow a select seed, via command options, for <code>srand(time(NULL));</code>.  Then one can use a desired set-up.</p>

<hr>

<p>Minor stuff follows</p>

<hr>

<h2>Global variables</h2>

<p>I am neither a fan nor a opponent of global variables.  Either approach has it merits, yet in this case, consider a structure storing the  puzzle data and pass the <code>b_mine *state</code> through funcitons.   This approach allows for future growth and, in my experience, easier to debug.</p>

<pre><code>// int **field;
//... 
// int mine_cnt;

typedef struct {
  int **field;
  //... 
  int mine_cnt;
} b_mine;
</code></pre>

<h2>Why #define?</h2>

<p>Although <code>#define IS_MINE(_Tile) (_Tile == MINE)</code> is certainly a benign and speedy use of a macro for an otherwise <code>is_mine()</code> function, be wary of using <code>define</code> when a function will suffice.</p>

<h2>Concatenate literals</h2>

<p>An alternative to many <code>puts()</code></p>

<pre><code>    puts(
      "Input format while playing:\n"
      "a b c\n"
      "a: x coordinate\n";
      ...
      "c: 0 or 1: step on cell or flag cell (default: 0)");
</code></pre>
    </div>