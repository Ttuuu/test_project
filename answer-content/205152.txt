<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Mixing responsibilities</h2>

<pre><code>var snakeGame = new SnakeGame
{
    Snake = new Snake(
        length: 3,
        startPosition: StartPosition.Center,
        bodyColor: Brushes.Red,
        headColor: Brushes.Black),
    GameField = new GameField(
        pixelSize: 50,
        playingField: playingField,
        pixelType: PixelType.Square),
    Difficulty = Difficulty.Hard,
    FoodColor = Brushes.GreenYellow,
    AmountOfFood = 6
};
</code></pre>

<blockquote>
  <p>Just add library to your wpf-project, and instantiate SnakeGame class with input parameters:</p>
</blockquote>

<p>From your description, I infer that <code>SnakeGame</code> is part of your library class.</p>

<p>If it is, then you should not be passing <strong>colors</strong> to the library. Coloring is specifically a UI-based setting, and should thus reside in the UI layer of your solution. All other (library) classes should not have a reference to <code>SolidColorBrush</code> or any similar UI class. I'll omit that from the rest of the review.</p>

<p>The same applies to <code>pixelSize</code>. If you are talking about actual screen pixels, that is a UI-based setting. If you are referring to your board game cells as pixels, I suggest you <em>rename</em> this, as "pixel" is massively ambiguous with screen pixels (Suggested improvement: <code>Cell</code>).</p>

<p><em>Minor comment</em>: I see you like using named parameters. There's nothing wrong with them, but I would in general suggest using object initialization over named parameters. You've actually used an object initializer for your <code>SnakeGame</code> object but have then switched to named parameters in the constructor for the <code>Snake</code> and <code>GameField</code> properties.</p>

<p>I'm actually apprehensive of stating that you <em>shouldn't</em> use named parameters (they serve largely the same purpose with essentially the same syntax), but I would suggest <strong>not mixing styles</strong>. Pick one and stick with it as much as you can.</p>

<hr>

<h2>Enums as data types</h2>

<pre><code>public enum Difficulty
{
    Easy = 300,
    Normal = 250,
    Hard = 200,
    VeryHard = 180,
    Impossible = 140
}
</code></pre>

<p>I'm not a fan of this. You're using the int value of your enum as an actually meaningful value. While it is technically possible, it irks me.</p>

<p>What happens if tomorrow you need two values for a given difficulty? You can no longer use your enum, will have to resort to classes, and are probably going to have to rework every location where you've been handling the enum.</p>

<p>And this is already creeping into your code:</p>

<pre><code>if (Difficulty &lt; Difficulty.Impossible || Difficulty &gt; Difficulty.Easy)
{
    throw new ArgumentException($"{nameof(Difficulty)} illegal enum value");
}
</code></pre>

<p>What happens if tomorrow you want to make a toddler version of your game, and you create a <code>VeryEasy</code> option for the toddlers? You're going to have to make sure you remember to change this <code>if</code> check as well.</p>

<p>It makes no sense to validate your enum using this <code>if</code> block. <strong>If a particular enum exists, it is therefore a valid option</strong>. That's the entire point of an enum; it's a closed list of valid options. There is no need for this <code>if</code> check.</p>

<p><strong>Suggested fix</strong></p>

<p>Create a class that holds your difficulty settings (note that I gave an appropriate name to your int setting)</p>

<pre><code>public class DifficultySettings
{
    public int IntervalTime { get; set; }
}
</code></pre>

<p>Provide a static dictionary where you define the difficulty settings.</p>

<pre><code>public static Dictionary&lt;Difficulty, DifficultySettings&gt; DifficultySettings = 
    new Dictionary&lt;Difficulty, DifficultySettings&gt;()
    {
        { Difficulty.Easy, new DifficultySettings() { IntervalTime = 300 } },
        { Difficulty.Normal, new DifficultySettings() { IntervalTime = 250 } },
        { Difficulty.Hard, new DifficultySettings() { IntervalTime = 200 } },
        { Difficulty.VeryHard, new DifficultySettings() { IntervalTime = 180 } },
        { Difficulty.Impossible, new DifficultySettings() { IntervalTime = 140 } },
    }
</code></pre>

<p>And then you can retrieve the settings whenever you want:</p>

<pre><code>    _dispatcherTimer.Interval = TimeSpan.FromMilliseconds( DifficultySettings[difficulty].IntervalTime );
</code></pre>

<ul>
<li>Note that you can use <code>TimeSpan.FromMilliseconds</code> instead of <code>new TimeSpan</code>, which removed the need for having all those zeroes.</li>
<li>If a second property is added to the <code>DifficultySettings</code>, all you need to do is add and initialize the property. You will have no conflicts with your existing code.</li>
<li>Note that I hardcoded the values for the sake of simplicity. There is an argument to be made to have these values from from a config file (often a <strong>.ini</strong> files is used for game configuration). However, I kept it simple here, to keep it readable.</li>
</ul>

<hr>

<h2>More UI in the library</h2>

<pre><code>public enum PixelType
{
    Circle,
    Square
}
</code></pre>

<p>This shouldn't be in the library. How to visualize the snake is up to the UI, not the game library. For example, consider that you want to add <strong>custom themes</strong> to your library. The gameplay (=library) remains unchanged, but the UI will change dramatically. You can't actually guarantee when you'll be using circles and squares.</p>

<hr>

<h2>Reworking the library class responsibilities</h2>

<p>Many of your library classes are dirtied due to pushing the UI responsibilities in your library. It's not that easy to point them all out, it would dramatically change the classes. Instead, I'm going to list what your class' responsibilities should be, so that you know which code belongs inside and which doesn't:</p>

<ul>
<li><code>GameField</code> should only <strong>track values, not visuals</strong>.

<ul>
<li>No matter how you implement it, you're basically going to end up with some sort of collection of <code>Cell</code> (previously named <code>Pixel</code>) values, and positional values for the snake's body and the food on the board.</li>
<li>No colors, no UI shapes, no screen coordinates (you can use <strong>board</strong> coordinates, but not <strong>screen</strong> coordinates) </li>
</ul></li>
<li><code>Cell</code> (previously named <code>Pixel</code>) should only contain boardcell-related information. This means that it's mostly a data class which will contain some handy methods, such as e.g. telling you what the current content of the board cell is (empty/snake/food/...)</li>
<li><code>Snake</code> should contain all information pertaining to the snake, <em>but not what it looks like</em>.</li>
</ul>

<hr>

<h2>Smaller comments</h2>

<pre><code>    if (pixelType &lt; PixelType.Circle || pixelType &gt; PixelType.Square)
    {
        throw new ArgumentException($"{nameof(pixelType)} illegal enum value");
    }
</code></pre>

<p>Similar to before, this is an irrelevant check. Don't use weird and undocumented enum values. If the enum value is included in the list, it should by definition be an allowed value.</p>

<pre><code>    if (pixelSize &lt; 10 || pixelSize &gt; 100)
    {
        throw new ArgumentOutOfRangeException($"{nameof(pixelSize)} must be between '5' and '100'");
    }
</code></pre>

<p>First of all, your validation (between 10 and 100) does not match your message (between 5 and 100). You should change these magic values into <code>const</code> values, so that you only have to adjust the value in one place and both the check and the message stay consistent.</p>

<p>But more importantly, why should you care about the pixelsize of the board?</p>

<p>If "pixel" refers to a screen pixel, you should not care at all, as this is a UI consideration.<br>
If "pixel" refers to a cell on the board, then why do you feel the need to limit the board size? Why can't I play on a 200x200 board if I want to?</p>

<pre><code>    Snake.OnLackOfFood += InitializeFood;
    Snake.OnSnakeCrash += GameOver;
</code></pre>

<p><strong>There is nothing wrong with using events, but...</strong> events are notoriously hard to debug. There are similar approaches that are easier to debug. Look into <em>delegates</em> (and lambdas) if you're interested.  </p>

<p>Also, while I'd need to delve much deeper into the code that I have for this code review, I would suggest not relying on spreading the game state information across multiple classes. I suggest having one class control the game state and trigger the needed events, and use the underlying classes (such as <code>Snake</code>) simply to <strong>store</strong> the data.</p>

<p>This advice is unique to game development. Running the logic for a particular game is often better not divided into separate classes as it may be hard to figure out what's going wrong when you don't have a unified "judge" to evaluate the game state and decided major events.</p>

<hr>
    </div>