<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Over the years I have seen other students here and they are quite proud of the performance of their code.  In some of those past instances I have discovered that they had simply run their code and thought it was fast.  They did not compare it to other methods. </p>

<p>You don't mention any testing or provide any numbers.  If you were to do this, just be sure that (1) your code is a Release build and not a Debug, and (2) that you do have disabled "Prefer 32-bit" for Build.</p>

<p>The biggest thing that strikes me about your implementation versus others I have seen is that you make 2 lists (<code>smaller</code> and <code>bigger</code>) per invocation whereas other implementations perform an in-place sort on the list or array.</p>

<p><em>Does this matter?</em></p>

<p><strong>YES</strong>.  Performance is significantly faster when performing in-place sorting using the one list.</p>

<p>I wrote a sample for you.  I have decide not to post my code here because you are a CS student and your namespace is <code>Assignment</code> which tells me this is classwork.  It would be unethical of me to write this code for you.  What I will do instead you point you to the resources I used, and show my performance timings.</p>

<p>My reference was <a href="https://en.wikipedia.org/wiki/Quicksort" rel="nofollow noreferrer">Wikipedia Quicksort</a>.  In particular I used the <strong>Hoare partition scheme</strong>.  I translated the psuedocode to C#.</p>

<p>I will share key method signatures.  Yes, plural.</p>

<pre><code>public static void Sort2(List&lt;int&gt; list) =&gt; Sort2(list, 0, list.Count - 1);

private static void Sort2(List&lt;int&gt; list, int lowIndex, int highIndex)
{
    // Good luck on your assignment!
}
</code></pre>

<p>I also had a <code>Partition</code> and <code>Swap</code> method.  I leave it to you to decide whether these should be <code>public</code> or <code>private</code> and what they do.</p>

<p><strong>PERFORMANCE</strong></p>

<ul>
<li><p>Size of list: 10_000</p></li>
<li><p>Number of trials: 10_000</p></li>
<li><p>Original QuickSort ElapsedTicks: 117_816_477</p></li>
<li><p>In-place QuickSort ElapsedTicks:  50_171_790</p></li>
</ul>

<p>Which means your original is 2.3 times slower than my in-place sorting.</p>
    </div>