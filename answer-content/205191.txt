<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I don't see the point of an outter class. <a href="https://stackoverflow.com/a/7984625/463206">Read: Public nested classes are a code smell</a></p>

<hr>

<p>The interface is chaotic. I can't tell how to use the class. Functionality is illogically scattered. The <code>Game</code> class is and does nothing. The flexibility to vary difficulty is not possible with the code as it is. You should re-write the program.</p>

<p>For example, there are two public methods: <code>Test</code> and <code>PlayGame</code>. You'd think I should call <code>PlayGame</code> but the game object is instantiated in <code>Test</code>.  The user is prompted for input and then game is instantiated.</p>

<hr>

<p><strong>Make a simple user interface</strong></p>

<p>Client code should at most have to instantiate a game object and then call <code>Play</code>, or something like that.  All the code is inside this game object.</p>

<hr>

<p><strong>Write a program outline</strong> then write the code around it. This big picture outline could be a single method - the "main" method or the "play" method let's say. Each outline statement could possibly represent separate methods. </p>

<pre><code>Display instructions
Ask how many attempts

While there are attempts left
   prompt for guess
   Check the answer
   correct? jump out. Wrong? loop
end while

Show stats? 
Ask to play again?
</code></pre>

<p>Write methods based on what they do. The outline statements are a good guide. A single method that both prompts for an answer and calculates the result is doing two different things - different things, different methods.  Do not squish methods into larger lumps of code just because you think they are not the "right size." Goldilocks was a lousy programmer.</p>

<p>Good program structure, focused smaller methods, etc. looks like overkill and a waste of time when building small projects like this. Hear me now and believe me later, you're on the road to perdition if you do otherwise.</p>

<hr>

<p><strong>Adding difficulty</strong> is doable once the code is structured.</p>
    </div>