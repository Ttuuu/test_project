<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Coding style</strong></p>

<p>Overall looks good. I only got some small remarks:</p>

<p>Put <code>{}</code> after each <code>if</code> and <code>else</code> as well. This is mostly to prevent stupid bugs if you (or someone after you) adds an innocent looking line like this:</p>

<pre><code> for(String key : ransomMap.keySet()){
    if(!magazineMap.containsKey(key))
        System.out.println("Not enough of: " + key);
        return false;  //&lt;- this false is actually outside the if block now.

    if(magazineMap.get(key) &lt; ransomMap.get(key))
        return false;
}
</code></pre>

<p>Suddenly it always returns false, even tho we just wanted to print which key wasn't found. Most IDE's can be set up to always place the braces for you.</p>

<p>A minor thing is also the name for magazineMap. I would rename this to magazineFrequencyMap to make it clear that it's a frequency map (like your great method name says to populate the map). But since that might feel a little long later on you'll have to decide for yourself what feels better.</p>

<p>The last thing is that you never <a href="https://stackoverflow.com/questions/15613626/scanner-is-never-closed">close your Scanner</a>. Since this is in your main method and your program ends after execusion it doesn't really matter much, but since we're talking best practices here I couldn't ignore this.  </p>

<hr>

<p><strong>Efficiency</strong></p>

<p>Why store the number of words in a Long if there's at most 30k of them? An Integer should do:</p>

<pre><code>Map&lt;String, Integer&gt; magazineMap = getFrequencyMapFromArray(magazine);
</code></pre>

<p>A major change to gain efficiency is to never build the frequency map for the ransom notes. Instead use the following strategy to solve the problem:</p>

<p>Put all the magazine words into a map like you did now.<br>
Try to take each ransom word out of that bag while reading them from the file.<br>
If it's not in the bag (or count is 0) you can stop here and return false</p>

<p>If you are "lucky" and the first ransom word is not present in your magazines you can stop early. This can save "a lot" of time counting the other ransom words. (Note that "a lot" means a couple of miliseconds probably, so it doesn't really matter that much for this problem).</p>

<hr>

<p><strong>the best way</strong></p>

<p>I would argue that there is no <strong>best</strong> way to solve a computer problem. Only a <strong>better</strong> way given certain criterea.</p>

<p>For the given problem I would argue that my "take ransom words out of the existing bag as we go" is better since it's more memory efficient and fails faster.</p>

<p>If, however, we want to expand this problem later to:</p>

<blockquote>
  <p>Given a stack of magazines, which of these magazines can be used to write the ransom note?</p>
</blockquote>

<p>Then it makes a lot more sense to read the ransom note once and put them into their own frequency map. Because we can use this map to compare with each of the magazine frequency maps like you did in your solution.</p>
    </div>