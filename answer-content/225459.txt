<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First, your code doesn't give correnct answers; for <code>(m, 1)</code> the answer should be 120 (30 in <code>./1</code>, +10 in <code>./1/2</code>, +20 in <code>./1/2/3</code>, +60 in <code>./1/4</code>; you never count more than a single entry in the sub-folder slice).</p>

<p>Also, you should run <code>go fmt</code> (or <a href="https://golang.org/x/tools/cmd/goimports" rel="nofollow noreferrer"><code>goimports</code></a>) on your code (perhaps you did and that was lost when posting). Also, adding a <a href="https://play.golang.org/p/web83IsUyly" rel="nofollow noreferrer">Go Playground</a> link to your original code in posts is helpful.</p>

<p>You mention that you wanted to create a function taking two parameters, the first being <code>[]Folder</code> but your code instead converts the slice into a map and uses that as the first argument. Which did you intend? When you have a function or functions that are answering questions based on an argument you could consider making a method. For example, perhaps something like:</p>

<pre class="lang-golang prettyprint-override"><code>type Folders []Folder
// or
type Folders struct {
    list []Folder
    byID map[int]Folder
}

func (f Folders) EMailCount(folder int) int {
    // code that uses f and folder as arguments
}
</code></pre>

<p>You use <code>snake_case</code> for some of your identifiers and <code>camelCase</code> for others; idiomatic Go code uses <code>camelCase</code> for all identifiers.</p>

<p>In your <code>InsertIntoMap</code> function:</p>

<ul>
<li>When you <code>make</code> the map you know how many entries you expect so you should include that number to make as a size hint (e.g. <code>make(map[int]Folder, len(data))</code>). If the size is large this avoids the having to dynamically re-size the map as you add entries.</li>
<li>You name the map <code>retval</code>, I'd instead name it based on what contains (a map of folders by ID) rather than it happens to be the return value. I'd call it just <code>m</code> or <code>byID</code>.</li>
<li>Within the loop you effectively copy the element <code>elem</code> to the variable <code>folder</code>. You can do this with just <code>folder := elem</code> but at that point the entire loop body can just be rewritten as <code>retval[elem.ID] = elem</code>.</li>
</ul>

<p>In your <code>GetTotalEmailCount</code> function:</p>

<ul>
<li><p>Normally in Go instead of:</p>

<pre><code>var foo []int
foo = something[bar].foo
</code></pre>

<p>you'll just see:</p>

<pre><code>foo := something[bar].foo
</code></pre>

<p>not only is it shorter but it can make future code changes easier. In the latter if the field <code>foo</code> changes type you don't need to edit the type of the variable <code>foo</code> to match. (By the way, shorter isn't always better. Clarity is more important than conciseness).</p></li>
<li><p>Idiomatic Go code tends avoid indenting code by using early returns (see <a href="https://github.com/golang/go/wiki/CodeReviewComments#indent-error-flow" rel="nofollow noreferrer">https://github.com/golang/go/wiki/CodeReviewComments#indent-error-flow</a>). You return if <code>len(…) == 0</code> so you should just drop the <code>else</code> clause and remove the indent (<a href="https://golang.org/x/lint/golint" rel="nofollow noreferrer"><code>golint</code></a> will suggest this). E.g, instead of:</p>

<pre><code>if someCondition {
    return something
} else {
    // other code
    //     possibly with more conditional/loop indenting
}
</code></pre>

<p>it would be:</p>

<pre><code>if someCondition {
    return something
}

// other code
//     possibly with more conditional/loop indenting
</code></pre></li>
<li><p>In this specific case, you don't even need the conditional since <code>for range</code> loops don't do anything on empty/nil slices the following <code>return total</code> line is sufficient.</p></li>
<li><p>It's in this <code>for</code> loop your your bug exists. On the first iteration you stop looping and return the total of this folder and it's first child without iterating to the next child.</p>

<pre><code>return total + GetTotalEmailCount(p_map, child_folders[e])
</code></pre>

<p>should be:</p>

<pre><code>total += GetTotalEmailCount(p_map, child_folders[e])
</code></pre></li>
</ul>

<p>Without changing the basic structure of your code, all the above gives something like this (<a href="https://play.golang.org/p/_SLPYNTOwcu" rel="nofollow noreferrer">Go Playground</a>):</p>

<pre class="lang-golang prettyprint-override"><code>package main

import "fmt"

type Folder struct {
    ID             int
    emailCount     int
    childFolderIDs []int
}

func InsertIntoMap(data []Folder) map[int]Folder {
    m := make(map[int]Folder, len(data))
    for _, e := range data {
        m[e.ID] = e
    }
    return m
}

func GetTotalEmailCount(m map[int]Folder, folder int) int {
    children := m[folder].childFolderIDs
    total := m[folder].emailCount

    for e := range children {
        // BUG: doesn't detect infinite loops
        total += GetTotalEmailCount(m, children[e])
    }

    return total
}

func main() {
    var folders = []Folder{
        Folder{1, 30, []int{2, 4}},
        Folder{2, 10, []int{3}},
        Folder{4, 60, []int{}},
        Folder{3, 20, []int{}},
    }

    var m = InsertIntoMap(folders)
    fmt.Println(GetTotalEmailCount(m, 1)) // result is 120, 30+10+20+60
    fmt.Println(GetTotalEmailCount(m, 2)) // result is 30
    fmt.Println(GetTotalEmailCount(m, 3)) // result is 20
    fmt.Println(GetTotalEmailCount(m, 4)) // result is 60
}
</code></pre>
    </div>