<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some extra points that Sam Onᴇᴌᴀ's good review skipped.</p>

<h2>Capitalizing function names</h2>

<p>Don't capitalize functions if they are not used to create an object. In JavaScript we only capitalize functions or objects that can be instantiated with the <code>new</code> token. Thus <code>MakeStats</code> should be <code>makeStats</code>.</p>

<p>However if you were to return the object <code>statJSON</code> then you could use the name <code>MakeStats</code> to indicate that it instantiates an object. You can then create the object in 3 ways, each of which return the same object.</p>

<pre><code>    // last 2 lines of MakeStats to be
    return statJSON;
}

const s1 = new MakeStats();
const s2 = new MakeStats;  // with new objects () is not needed if there are no arguments
const s3 = MakeStats();
</code></pre>

<h2>Quoted property names</h2>

<p>I see this a lot, when people create an object that is to be stringified. For some reason  quoted property names are used. Doing so is just adding unneeded noise to the code. </p>

<p>The only time you need to use quotes to define a property is if the property is not a valid javascript variable name. e.g.  <code>{data-one: "one"}</code> will throw an error as <code>data-one</code> is not a valid name, you would thus write it <code>{"data-one": "one"}</code> </p>

<h2>Shorthand property names (ES2015)</h2>

<p>Use object property shorthand if you are adding existing named variables to an object.</p>

<p>You have</p>

<pre><code>let tempJSON = {
    "location": {
        "home": home,
        "motel": motel,
        "relative": relative,
        "shelter": shelter,
        "apartment": apartment
    },
    "moneyLeft": money,
    "ACLeft": AC,
    "finalDestination": currentlocation,
    "hasAttorney": hasAttorney,
    "hasAC": hasAC,
    "hasMoney": hasMoney
};
</code></pre>

<p>can be written as</p>

<pre><code>const tempJSON = {
    location: {home, motel, relative, shelter, apartment},
    moneyLeft: money,
    ACLeft: AC,
    finalDestination: currentlocation,
    hasAttorney, 
    hasAC,
    hasMoney
};
</code></pre>

<p>the resulting object is identical to the longhand version.</p>

<h2><code>localStorage</code></h2>

<p>You can use simpler notation when accessing <code>localStorage</code>.</p>

<p>You have </p>

<pre><code>localStorage.setItem("playerStats", JSON.stringify(statJSON));
</code></pre>

<p>is identical to </p>

<pre><code>localStorage.playerStats = JSON.stringify(statJSON);
</code></pre>

<p>The same applies to reading from <code>localStorage</code></p>

<pre><code>stats = localStorage.playerStats; // Note If that data is not there you get undefined
                                  // Note All data from local storage is a string
</code></pre>

<h2>Don't trust <code>localStorage</code></h2>

<p>There is no way to guarantee that <code>localStorage</code> content written in one session will be available next time, nor can you trust the data you read back, and many 3rd party extensions have full access to <code>localStorage</code>. </p>

<p>If the data is important, requires trust, or contains personal client data it should be saved on the server.</p>

<h2>Warning about cyclic data</h2>

<p><code>JSON.stringify</code> will throw a <code>TypeError: "Converting circular structure to JSON"</code> if the data contains cyclic references. </p>

<p>Cyclic references are everywhere in JavaScript so if you are stringifying data from unknown or unsure sources is pays to wrap the <code>stringify</code> in a <code>try</code> <code>catch</code> so at least you can recover gracefully. As your function is using data from outside its control it would pay to be safe (unless you are in full control of all data).</p>
    </div>