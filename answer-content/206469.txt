<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>For me the code looks rather okay, I have just a few small remarks:</p>

<h2> Formatting </h2>

<p>The line</p>

<pre><code>print('\n'.join(('dev=' + str(round(result.deviation, 2)) + ', ' + 'CAGR=' + str(round(result.CAGR, 2))) for result in results))
</code></pre>

<p>is very hard to read, could you possibly split it or use a function?</p>

<pre><code>def format_result(result):
    dev = round(result.deviation,2)
    cagr = round(result.CAGR,2)
    return f'dev={str(dev)}, CAGR={str(cagr)}'
</code></pre>

<p>and then just </p>

<pre><code>print('\n'.join(format_result(result) for result in results))
</code></pre>

<h1> Performance </h1>

<p>I'm unsure whether you need an extreme performance but it seems that potentially you might want to run the code large number of iterations. </p>

<h2>namedtuple</h2>

<p><code>namedtuple</code> datastructure is extremely handy if you want to use it to make your code looks better. However, if you care about performance (i.e. you will be using <em>many</em> of them) you might be better off with usual <code>tuple</code>. 
Reference: <a href="https://stackoverflow.com/questions/41003081/is-namedtuple-really-as-efficient-in-memory-usage-as-tuples-my-test-says-no">link1</a>, <a href="https://stackoverflow.com/questions/49419132/namedtuple-slow-compared-to-tuple-dictionary-class">link2</a>, <a href="https://rhye.org/post/python-cassandra-namedtuple-performance/" rel="nofollow noreferrer">link3</a>.</p>

<h2>list.append</h2>

<p>In this section I'll be referring to <code>results.append(net_returns(deviation, avg_returns))</code>. <code>append</code> is rather a slow operation if you know a list size before the appending. I think your code would be faster if you allocated <code>results</code> list first and then just put each net return on it's place. </p>

<h2>reverse=True</h2>

<p>As tempting it is, it might have a performance hit as well. As one might see in <a href="https://hg.python.org/cpython/file/2914ce82bf89/Objects/listobject.c#l1972" rel="nofollow noreferrer">source code</a> the list is actually <em>reversed</em> to keep the stability. It should be better just to pass a negative value to your lambda:</p>

<pre><code>return sorted(results, key=lambda x: -x.CAGR)
</code></pre>
    </div>