<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>When order of <code>RULES</code> matter, prefer a list of tuples instead of a dict as a dict's order might change depending of the version. You can iterate through the tuple with <code>for divider, value in RULES</code></p>

<p>If all <code>value</code>s have to be capitalized, use <code>str.capitalize</code> in case you don't provide proper capitalization by mistake.</p>

<p>Prefer <code>for num in range(1, 100 + 1):</code> instead of using <code>num + 1</code> each time. It's really easy to forget the <code>+ 1</code> and <code>num + 1</code> is confusing.</p>

<p>As @RayButterworth mentioned, <code>is_divisible</code> is a bit awkward. You aren't exactly checking if a number is divisible. You are checking the rules. So use a name like <code>check_rules</code></p>

<p>Instead of using <code>"".join(output)</code> each time you use <code>check_rules</code>, convert <code>output</code> to a string inside the <code>check_rules</code> function.</p>

<p>This can be done using the idea @AJNeufeld mentioned.</p>

<pre class="lang-py prettyprint-override"><code>return "".join(value for divider, value in RULES if num % divider == 0)
</code></pre>

<p>Use all the parts you wouldn't want to run if imported inside a <code>if __name__ == '__main__'</code> statement.</p>

<pre class="lang-py prettyprint-override"><code>output = check_rules(num)

if not output:
    print(num)
else:
    print(output)
</code></pre>

<p>This part can be a bit simplified with</p>

<pre class="lang-py prettyprint-override"><code>output = check_rules(num)

if not output:
    output = num

print(output)
</code></pre>

<p>Here's the final code:</p>

<pre class="lang-py prettyprint-override"><code># The case is weird to emphasize the use of str.capitalize
RULES = [
    (3, "FiZz"),
    (5, "buzz"),
    (7, "MUZZ")
]


def check_rules(num: int) -&gt; str:
    return "".join(value.capitalize() for divider, value in RULES if num % divider == 0)


if __name__ == '__main__':
    END = 120

    for num in range(1, END + 1):
        output = check_rules(num)

        if not output:
            output = num

        print(output)
</code></pre>
    </div>