<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Took me a <em>long</em> time to implement all the changes I made, so I hope you find this helpful!</p>

<ul>
<li><strong>Docstrings</strong>: You should include a <a href="https://www.python.org/dev/peps/pep-0008/#documentation-strings" rel="nofollow noreferrer"><code>docstring</code></a> at the beginning of every method/class/module you write. This will allow documentation to identify what your code is supposed to do.</li>
<li><strong>Unused Imports</strong>: You had a total of four unused imports. Having these in your code and confuse you and other people reading your code, as they/you try to find where you use them. Removing them can improve the readability of your code.</li>
<li><strong>Parameter Spacing</strong>: There should not be any spacing between the parameter name, the <code>=</code>, and the value being passed. PEP-8 has <a href="https://www.python.org/dev/peps/pep-0008/#whitespace-in-expressions-and-statements" rel="nofollow noreferrer">rules about whitespace in expressions and statements</a>.</li>
<li><strong>Multiline Parameters</strong>: Should you have to have multiple lines to pass in parameters, each parameter gets its own line. The indentation should also be four spaces after the beginning of the line that the method starts on. That may have been confusing; look at the improved code.</li>
<li><strong>Unused loop variables</strong>: When you want to loop through something, or do something a number of times without using the variable created, use an <code>_</code>. This makes it clear that the variable used in the loop should be ignored, since you don't intend on using it.</li>
<li><strong>Variable Naming</strong>: Variables in python should be in <code>snake_case</code>, not <code>Upper_Snake_Case</code> or <code>camelCase</code>. Classes in python should be <code>PascalCase</code>.</li>
<li><strong>String Formatting</strong>: You have strings that require you to use <code>... + str(...) + ...</code>. This is a big red flag to me. You should use <code>f""</code> to directly include your variables into your strings, without having to cast them as other types (<code>str()</code>, <code>int()</code>, etc).</li>
<li><strong>Global Variables</strong>: It is almost never a good idea to use global variables, in python or any programming language. <a href="http://wiki.c2.com/?GlobalVariablesAreBad" rel="nofollow noreferrer">This list</a> does a very good job of explaining the negatives of using global variables, while also providing some instances where it might be okay. In general, though, it's not recommended.</li>
<li><strong>Unneeded lambdas</strong>: You don't need to create a lambda to call a function.</li>
<li><strong>Indentation</strong>: PEP-8 <a href="https://www.python.org/dev/peps/pep-0008/#indentation" rel="nofollow noreferrer">has rules about indentation</a>. Specifically, all indentation should be four spaces. A few spots in your code you use eight. Wrongly indented code could possibly mess with the entire scope of your program.</li>
<li><strong>Unneeded Variable Assignment</strong>: When you call <code>mesagebox.showinfo(...)</code>, you assign it to a variable. This is not needed, since you don't use that variable.</li>
</ul>

<p><strong><em>Updated Code</em></strong></p>

<pre><code>"""
Module Docstring:
A description about this program goes here
"""

import tkinter
from tkinter import *
from tkinter import messagebox

import Letters_Listening_Test
import Numbers_1_Intro_1, Numbers_1_Intro_2
import Numbers_License_Plate_Decoder
import Lesson_1_Part_1
import Personal_Pronouns_Intro_1, Personal_Pronouns_Intro_2
import Greetings_Intro_1, Greetings_Intro_2, Greetings_Intro_3
import Greetings_Conversation_1, Greetings_Conversation_2

class InitializeScreen:
    """
    Class for setting up the screen
    """
    def __init__(self, cfn, img):
        self.current_frame_number = cfn
        self.image = img
        self.profile = "Still in progress"

        for index in range(0, NUMBER_OF_FRAMES):  #This is for question frames
            FRAMES[index].grid_remove()

        cfn.grid(column=0, row=0, sticky=(tkinter.W, tkinter.E))
        for num in range(0, 4):
            cfn.grid_columnconfigure(num, weight=1)
            cfn.grid_rowconfigure(2, weight=1)
            cfn.grid_rowconfigure(5, weight=1)

        temp_image = f"{MENU_BACKROUND_IMAGES}{str(img)}.png"
        background_image = PhotoImage(file=(temp_image))
        background_image_label = Label(cfn, image=background_image)
        background_image_label.place(x=0, y=0, relwidth=1, relheight=1)
        background_image_label.tempimage = background_image

    def home_button(self):
        """
        Builds the home button
        """
        home_button = Button(
            self.current_frame_number,
            text="Home",
            font=("Helvetica", 25),
            command=initialize_main_menue
        )
        home_button.grid(column=0, row=0, sticky=(tkinter.W, tkinter.E))

    def profile_button(self):
        """
        Buids the profile button
        """
        profile_button = Button(
            self.current_frame_number,
            text="     Profile     ",
            font=("Helvetica", 35),
            command=opening_screen.profile
        )
        profile_button.grid(column=1, columnspan=2, row=3)

    def main_program_button(self):
        """
        Builds the main program button
        """
        main_program_button = Button(
            self.current_frame_number,
            text="LibLib Arriby",
            font=("Helvetica", 35),
            command=initialize_lesson_menue
        )
        main_program_button.grid(column=1, columnspan=2, row=4)

    def back_to_main_program(self):
        """
        Builds the button that takes you back to the main program
        """
        back_to_main_program_button = Button(
            self.current_frame_number,
            text="Back",
            font=("Helvetica", 25),
            command=initialize_lesson_menue)
        back_to_main_program_button.grid(column=0, row=0)

class SideFrame:
    """
    Class that builds a side frame on creation
    """
    def __init__(self, current_frame):
        self.current_frame_number = current_frame
        current_frame['borderwidth'] = 2
        current_frame['relief'] = 'sunken'
        current_frame.grid_propagate(True) #Turns off autoshrink of Frame widget
        current_frame.grid_rowconfigure(0, weight=1)
        current_frame.grid_columnconfigure(1, weight=1)
        current_frame.grid(column=1, row=1)

def initialize_main_menue():
    """
    Initializes the main menu
    """
    opening_screen = InitializeScreen(FRAMES[0], 1)
    opening_screen.profile_button()
    opening_screen.main_program_button()

def initialize_lesson_menue():
    """
    Initializes the lesson menu
    """
    lesson_menue = InitializeScreen(FRAMES[1], 2)
    lesson_menue.home_button()
    lessons()

def lessons():
    """
    Creates the lesson frame, and the corresponding buttons
    """
    lessonframe = tkinter.Frame(
        FRAMES[1],
        bg="gray",
        borderwidth=2,
        relief="sunken"
    )
    lessonframe.grid(column=1, row=1)
    lessonframe.grid_rowconfigure(0, weight=1)
    lessonframe.grid_rowconfigure(1, weight=1)

    current_frame = lessonframe

##############################################################################
## The items below list out the titles of all of the different lesson plans ##
##############################################################################
    letters_button = Button(
        current_frame,
        text="Letters",
        font=("Helvetica", 25),
        command=letters
    )

    numbers_button = Button(
        current_frame,
        text="Numbers",
        font=("Helvetica", 25),
        command=Numbers
    )

    lesson_1_button = Button(
        current_frame,
        text="Lesson 1",
        font=("Helvetica", 25),
        command=lesson_1
    )

    letters_button.grid(
        column=0,
        columnspan=1,
        row=1,
        sticky=(tkinter.W, tkinter.E)
    )
    numbers_button.grid(
        column=0,
        columnspan=1,
        row=2,
        sticky=(tkinter.W, tkinter.E)
    )
    lesson_1_button.grid(
        column=0,
        columnspan=1,
        row=3,
        sticky=(tkinter.W, tkinter.E)
    )

def letters():
    """
    Creates all the letters buttons
    """
    letter_screen = InitializeScreen(FRAMES[2], 3)
    letter_screen.back_to_main_program()
    current_frame = tkinter.Frame(FRAMES[2], width=100, height=100, bg="gray")
    SideFrame(current_frame)

    def all_buttons_forget():
        """
        Configurates all buttons
        """
        letters_1_button.config(relief=RAISED, bg="gray95")
        letters_2_button.config(relief=RAISED, bg="gray95")
        letters_3_button.config(relief=RAISED, bg="gray95")
        letters_4_button.config(relief=RAISED, bg="gray95")

    class Letters:
        """
        Creates intro and quiz buttons uppon creation
        """
        def __init__(self, LN):
            self.lesson_number = LN

            intro_1_button = Button(
                current_frame,
                text=f"Letters {LN}: Introduction Part 1",
                font=("Helvetica", 25),
                command=intro_1(LN)
            )
            intro_1_button.grid(column=1, columnspan=2, row=1)
            intro_1_button.config(bg="gold")

            intro_2_button = Button(
                current_frame,
                text=f"Letters {LN}: Introduction Part 2",
                font=("Helvetica", 25),
                command=intro_2(LN)
            )
            intro_2_button.grid(column=1, columnspan=2, row=2)
            intro_2_button.config(bg="gold")

            quiz_button = Button(
                current_frame,
                text=f"Letters {LN}: Quiz",
                font=("Helvetica", 25),
                command=quiz(LN)
            )
            quiz_button.grid(column=1, columnspan=2, row=3)
            quiz_button.config(bg="gold")

    def intro_1(LN):
        """
        Intro One to Letters
        """
        module = __import__(f"Letters_{LN}_Intro_1")
        func = getattr(module, f"letters_{LN}_intro_1")
        func()

    def intro_2(LN):
        """
        Intro Two to Letters
        """
        module = __import__(f"Letters_{LN}_Intro_2")
        func = getattr(module, f"letters_{LN}_intro_2")
        func()

    def quiz(LN):
        """
        Quiz for Letters
        """
        module = __import__(f"Letters_{LN}_Quiz")
        func = getattr(module, f"letters_{LN}_quiz")
        func()

    def letters_1():
        """
        Sets `letters_1_button` as the selected button
        """
        all_buttons_forget()
        letters_1_button.config(relief=SUNKEN, bg="gold")

    def letters_2():
        """
        Sets `letters_2_button` as the selected button
        """
        all_buttons_forget()
        letters_2_button.config(relief=SUNKEN, bg="gold")

    def letters_3():
        """
        Sets `letters_3_button` as the selected button
        """
        all_buttons_forget()
        letters_3_button.config(relief=SUNKEN, bg="gold")

    def letters_4():
        """
        Sets `letters_4_button` as the selected button
        """
        all_buttons_forget()
        letters_4_button.config(relief=SUNKEN, bg="gold")

    def about_letters():
        """
        Displays information about the arabic alphabet
        """
        messagebox.showinfo("About this Section", "The arabic alphabet consists of 28 letters which have been divided into four sections for ease of learning. Each section introduces two sets of letters and then provides a quiz on those letters. The section on letters is then concluded with a listening comphrension and spelling test.")

    def additional_resources():
        """
        Displays additional information, if needed
        """
        imageroot = f"{ROOT_FILE_NAME}Lessons\\Letters\\AdditionalResources\\"
        image = f"{imageroot}Arabic_Alaphabet.png"
        photo = PhotoImage(file=image)

        canvas = Canvas(tkinter.Toplevel(), height=566, width=850)
        canvas.grid(column=0, row=0)

        alphabet_photo = canvas.create_image(0, 0, image=photo, anchor=NW)
        alphabet_photo.image = photo

    about_button = Button(
        current_frame,
        text="About",
        font=("Helvetica", 25),
        command=about_letters
    )
    about_button.grid(column=1, columnspan=1, row=0, sticky=(tkinter.W, tkinter.E))

    letters_1_button = Button(
        current_frame,
        text="Letters 1",
        font=("Helvetica", 25),
        command=letters_1
    )
    letters_1_button.grid(column=0, columnspan=1, row=1, sticky=(tkinter.W, tkinter.E))

    letters_2_button = Button(
        current_frame,
        text="Letters 2",
        font=("Helvetica", 25),
        command=letters_2
    )
    letters_2_button.grid(column=0, columnspan=1, row=2, sticky=(tkinter.W, tkinter.E))

    letters_3_button = Button(
        current_frame,
        text="Letters 3",
        font=("Helvetica", 25),
        command=letters_3
    )
    letters_3_button.grid(column=0, columnspan=1, row=3, sticky=(tkinter.W, tkinter.E))

    letters_4_button = Button(
        current_frame,
        text="Letters 4",
        font=("Helvetica", 25),
        command=letters_4
    )
    letters_4_button.grid(column=0, columnspan=1, row=4, sticky=(tkinter.W, tkinter.E))

    listening_test_button = Button(
        current_frame,
        text="Listening Test",
        font=("Helvetica", 25),
        command=Letters_Listening_Test.letters_listening_test
    )
    listening_test_button.grid(column=0, columnspan=1, row=5, sticky=(tkinter.W, tkinter.E))

    additional_resources_button = Button(
        current_frame,
        text="Additional Resources",
        font=("Helvetica", 25),
        command=additional_resources
    )
    additional_resources_button.grid(column=1, columnspan=2, row=5, sticky=(tkinter.W, tkinter.E))

def Numbers():
    """
    Creates numbers buttons
    """
    number_screen = InitializeScreen(FRAMES[3], 4)
    number_screen.back_to_main_program()

    current_frame = tkinter.Frame(FRAMES[3], width = 100, height = 100, bg = "gray")
    SideFrame(current_frame)

    def all_buttons_forget():
        """
        Configures all buttons
        """
        numbers_1_button.config(relief=RAISED, bg="gray95")
        license_plate_decoder_button.config(relief=RAISED, bg="gray95")

    def numbers_1():
        """
        Creates numbers_1 button
        """
        all_buttons_forget()
        numbers_1_button.config(relief=SUNKEN, bg="gold")

        numbers_1_intro_1_button = Button(
            current_frame,
            text="Intro to Numbers: Part 1",
            font=("Helvetica", 25),
            command=Numbers_1_Intro_1.numbers_1_intro_1
        )
        numbers_1_intro_1_button.grid(column=1, columnspan=1, row=1)
        numbers_1_intro_1_button.config(bg="gold")

        numbers_1_intro_2_button = Button(
            current_frame,
            text="Intro to Numbers: Part 2",
            font=("Helvetica", 25),
            command=Numbers_1_Intro_2.numbers_1_intro_2
        )
        numbers_1_intro_2_button.grid(column=1, columnspan=1, row=2)
        numbers_1_intro_2_button.config(bg="gold")

    def about_numbers():
        """
        Shows information about the numbers section
        """
        messagebox.showinfo("About this Section", "Though arabic letters are written right to left, arabic numbers are still written left to right. In this numbers section, the individual arabic numbers are introduced in two sets: 0-4, and 5-9.")

    about_button = Button(
        current_frame,
        text="About",
        font=("Helvetica", 25),
        command=about_numbers
    )
    about_button.grid(column=1, columnspan=1, row=0, sticky=(tkinter.W, tkinter.E))

    numbers_1_button = Button(
        current_frame,
        text="Intro to Numbers",
        font=("Helvetica", 25),
        command=numbers_1
    )
    numbers_1_button.grid(column=0, columnspan=1, row=1, sticky=(tkinter.W, tkinter.E))
    numbers_1_button.config(highlightcolor="gold")

    license_plate_decoder_button = Button(
        current_frame,
        text="License Plate Decoder",
        font=("Helvetica", 25),
        command=Numbers_License_Plate_Decoder.license_plate_game
    )
    license_plate_decoder_button.grid(column=0, columnspan=1, row=2, sticky=(tkinter.W, tkinter.E))
    license_plate_decoder_button.config(highlightcolor="gold")

def lesson_1():
    """
    Displays the first lesson
    """
    lesson_screen = InitializeScreen(FRAMES[4], 5)
    lesson_screen.back_to_main_program()

    current_frame = tkinter.Frame(FRAMES[4], width=100, height=100, bg="gray")

    def about_letters():
        """
        Displays information about personal pronouns
        """
        messagebox.showinfo("About this Section", "Lesson 1 focuses on learning personel pronouns.")

    about_button = Button(
        current_frame,
        text="About",
        font=("Helvetica", 25),
        command=about_letters
    )
    about_button.grid(column=1, columnspan=1, row=0, sticky=(tkinter.W, tkinter.E))

    lesson_1_button = Button(
        current_frame,
        text="Lesson 1",
        font=("Helvetica", 25),
        command=Lesson_1_Part_1.lesson_1_part_1
    )
    lesson_1_button.grid(column=0, columnspan=1, row=2, sticky=(tkinter.W, tkinter.E))
    lesson_1_button.config(highlightcolor="gold")

#################################################################3
ROOT_FILE_NAME = "C:\\LearningArabic\\LiblibArriby\\"
IMAGE_PATH = f"{ROOT_FILE_NAME}Icon\\"
MENU_BACKROUND_IMAGES = f"{IMAGE_PATH}menue_screen_images\\"
ICON_TITLES = f"{IMAGE_PATH}menue_screen_images\\"

opening_screen = None

MASTER = Tk()
MASTER.title("LibLib Arriby") # Label the root GUI window.
##master.geometry('700x900+0+0')
##master.attributes("-fullscreen", True) #This would make it full screen

#Define window size
WINDOW_WIDTH = MASTER.winfo_screenwidth() - 100
WINDOW_HEIGHT = MASTER.winfo_screenheight() - 100

NUMBER_OF_FRAMES = 6 #This is the number of frames
FRAMES = []  # This includes frames for all questions
for _ in range(0, NUMBER_OF_FRAMES):
    frame = tkinter.Frame(
        MASTER,
        width=WINDOW_WIDTH,
        height=WINDOW_HEIGHT,
        borderwidth=2,
        relief="sunken"
    )
    frame.grid(column=0, row=0, sticky=(tkinter.W, tkinter.E))
  # frame.grid_remove()
    frame.grid_propagate(False) #Turns off  autoshrinking of Frame widget
    FRAMES.append(frame)

initialize_main_menue()

MASTER.mainloop()
</code></pre>
    </div>