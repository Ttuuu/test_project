<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You ask whether there is an oversight in the <code>map</code> solution, slowing it down.
There is, in the form of <code>lambda</code>.
When passing <code>lambda</code> objects, <code>map</code> is slowed down, as <a href="https://stackoverflow.com/a/40948713/11477374">shown here</a>.
Passing proper function objects does not have the same restrictions.</p>

<p>Other than that, I was unable to confirm the large performance discrepancy you found between <code>append</code> (40ms) and <code>__iadd__</code>/<code>+=</code> (28ms).
In the below tests, <code>append</code> is <em>faster</em> than <code>+=</code> by (just) about 2 percent.
That is negligible.</p>

<p>Below, five versions of your function are tested.
Next to <code>kidsWithCandies_map_builtin</code>, which uses the <code>ge</code> function of the <code>operator</code> module to get a <code>callable</code> <code>ge(a, b)</code> that returns the same as <code>a &gt;= b</code>, the arguably most Pythonic approach is also tested, list comprehension.</p>

<pre class="lang-py prettyprint-override"><code>from collections import defaultdict, namedtuple
from operator import ge
from pprint import pprint as pp
from timeit import timeit
from typing import List

candy_distribution = namedtuple(
    "CandyDistribution", ["candies", "extra_candies", "solution"]
)

candy_distributions = [
    candy_distribution([2, 3, 5, 1, 3], 3, [True, True, True, False, True]),
    candy_distribution([4, 2, 1, 1, 2], 1, [True, False, False, False, False]),
    candy_distribution([12, 1, 12], 10, [True, False, True]),
]


def kidsWithCandies_map_lambda(candies: List[int], extraCandies: int) -&gt; List[bool]:

    threshold = max(candies) - extraCandies
    return list(map(lambda x: x &gt;= threshold, candies))


def kidsWithCandies_map_builtin(candies: List[int], extraCandies: int) -&gt; List[bool]:

    threshold = max(candies) - extraCandies
    thresholds = [threshold] * len(candies)
    return list(map(ge, candies, thresholds))


def kidsWithCandies_append(candies: List[int], extraCandies: int) -&gt; List[bool]:

    threshold = max(candies) - extraCandies
    ans = []
    for x in candies:
        ans.append(x &gt;= threshold)
    return ans


def kidsWithCandies_iadd(candies: List[int], extraCandies: int) -&gt; List[bool]:

    threshold = max(candies) - extraCandies
    ans = []
    for x in candies:
        ans += [(x &gt;= threshold)]
    return ans


def kidsWithCandies_comprehension(candies: List[int], extraCandies: int) -&gt; List[bool]:

    threshold = max(candies) - extraCandies
    return [element &gt;= threshold for element in candies]


functions_to_runtimes = defaultdict(int)


for func in (
    kidsWithCandies_map_lambda,
    kidsWithCandies_map_builtin,
    kidsWithCandies_append,
    kidsWithCandies_iadd,
    kidsWithCandies_comprehension,
):
    for candy_supply in candy_distributions:
        args = (candy_supply.candies, candy_supply.extra_candies)
        assert candy_supply.solution == func(*args)
        functions_to_runtimes[func.__name__] += timeit("func(*args)", globals=globals())

functions_to_runtimes = {  # sort by value, ascending
    k: v for k, v in sorted(functions_to_runtimes.items(), key=lambda item: item[1])
}

pp(functions_to_runtimes)
</code></pre>

<p>with an output of</p>

<pre class="lang-py prettyprint-override"><code>{'kidsWithCandies_append': 2.2671058810083196,
 'kidsWithCandies_comprehension': 2.3766544990066905,
 'kidsWithCandies_iadd': 2.3180257579660974,
 'kidsWithCandies_map_builtin': 2.9652103499975055,
 'kidsWithCandies_map_lambda': 3.658640267996816}
</code></pre>

<p>So while there is not much of a difference between <code>append</code>, <code>comprehension</code> and in-place addition (<code>+=</code>), <code>map</code> is much improved by <em>not</em> using a lambda.</p>

<p>The most non-grandpa style approach is the list comprehension. <code>map</code> was even originally supposed to be <a href="https://www.artima.com/weblogs/viewpost.jsp?thread=98196" rel="nofollow noreferrer">dropped from Python 3</a>; as such (but this is speculation), one can suspect that all the performance love and care went towards (list) comprehensions, <code>append</code> and <code>+=</code>. Others have tried <a href="https://stackoverflow.com/a/6407222/11477374">here</a>, but <code>map</code>, as a built-in, seems hard to introspect.</p>

<p>I omitted space complexity considerations because these seem similar for all approaches.</p>
    </div>