<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There is a room for improvement:</p>
<ol>
<li><code>var items = _itemRepository.GetAll().ToList();</code>: Try to separate methods based on their responsibilities. Data retrieval and data processing should be not be in the same method.</li>
<li>List is treated as IEnumerable:  List's <a href="https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1.enumerator?view=netcore-3.1" rel="nofollow noreferrer">Enumerator is a struct</a> but because you are accessing via the interface an implicit hidden boxing is happening unnecessarily. <a href="https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1.enumerator?view=netcore-3.1" rel="nofollow noreferrer">Further details</a></li>
<li><code>List&lt;IEnumerable&lt;T&gt;&gt;</code> and <code>IEnumerable&lt;IEnumerable&lt;T&gt;&gt;</code>: IEnumerable is a forward only iterator. This enables you construct the elements one-by-one (using <code>yield return</code>) so you don't have to compute all values upfront (into the <code>groups</code>) and then return it as  an iterator of iterators.</li>
<li>Depending on the size of the source an <strong>ascending ordering</strong> and the use of the <code>ArraySegment</code> can cause significant performance improvement.</li>
</ol>
    </div>