<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Responding to your questions</h2>

<blockquote>
  <p><em>“Is there a simpler, more semantic, faster, or otherwise better way than to use two nested map in step 1?”</em></p>
</blockquote>

<p>While I like the benefits of functional approaches, they are often slower because of the extra function calls. </p>

<p>Steps 1 and 2 could be simplified by using two <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Statements/for...of" rel="nofollow noreferrer"><code>for...of</code></a> loops (since <a href="/questions/tagged/ecmascript-6" class="post-tag" title="show questions tagged 'ecmascript-6'" rel="tag">ecmascript-6</a> features like <code>const</code> are also used). Also, instead of constructing a new object to return in the nested map callback, you can just return <code>subCategory.key2</code> (though perhaps you simplified the data and the original data contains more properties that aren't needed in the end).</p>

<pre><code>const arrOfObj = [];
for (let category of arr) {
    for (let subCategory of category.key1) {
        arrOfObj.push(subCategory.key2);
    }
}
</code></pre>

<p>This generally works faster, at least for the small dataset supplied - <a href="https://jsperf.com/manipulating-data-steps-1-2" rel="nofollow noreferrer">see this jsPerf test for comparison</a></p>

<blockquote>
  <p><em>“I realise that step 3 is longer than it should be and there has to be a better way to do it. How can step 3 be improved?”</em></p>
</blockquote>

<p>I was thinking of using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify" rel="nofollow noreferrer"><code>JSON.stringify()</code></a> to make an array of counts in step 1 and then use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse" rel="nofollow noreferrer"><code>JSON.parse()</code></a> in step 3 for lookups in constant time, but apparently that was slower, possibly because of the original data set which only has 1 collision. Maybe for a larger dataset that would be faster. <a href="https://jsperf.com/manipulating-arrays-and-counts" rel="nofollow noreferrer">See this jsPerf for a comparison</a>.</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const arr = [
    {key1: [{key2: {id: 1, name: 'a'}}]},
    {key1: [{key2: {id: 2, name: 'b'}}]},
    {key1: [{key2: {id: 2, name: 'b'}}, {key2: {id: 3, name: 'c'}}]}
];
const counts = {};
for (let category of arr) {
  for (let subCategory of category.key1) {
    const countKey = JSON.stringify(subCategory.key2)
    counts[countKey] = (counts[countKey] || 0) + 1;
  }
}
const dedupedArrWithCount = [];
for (let key in counts) {
  const obj = JSON.parse(key);
  dedupedArrWithCount.push(Object.assign(obj, {
    count: counts[key]
  }));
}
console.log(dedupedArrWithCount);</code></pre>
</div>
</div>


<hr>

<h2>Other feedback</h2>

<p>The variable <code>l</code> is declared without any keyword: </p>

<blockquote>
<pre><code>let dedupedArrWithCount = [];
l = arrOfObj.length;
</code></pre>
</blockquote>

<p>Unless this code is wrapped in an <a href="https://developer.mozilla.org/en-US/docs/Glossary/IIFE" rel="nofollow noreferrer">IIFE</a>, <code>l</code> becomes a global variable, which can lead to unintentional consequences if that name is used later. Read more about this topic in <a href="https://softwareengineering.stackexchange.com/q/148108/244085">this post about global variables</a>.  It is advisable to use <code>const</code> (or <code>let</code> if there was a need to re-assign it).  </p>

<p>In that same vein, <code>dedupedArrWithCount</code> could be declared with the <code>const</code> keyword, since it is never re-assigned, just mutated using the push method.</p>

<hr>

<p>One other thing I noticed is that </p>

<blockquote>
<pre><code>const arrOfObj = [].concat(...arrOfArrOfObj);
</code></pre>
</blockquote>

<p>Is equivalent to</p>

<pre><code>const flatArr = arrOfArrOfObj.flat();
</code></pre>

<p>Using <code>.flat()</code> appears to run faster in Firefox and Safari but not Chrome, at least when I ran <a href="https://jsperf.com/js-concat-vs-flat" rel="nofollow noreferrer">this jsPerf</a>.</p>
    </div>