<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Learn from the existing implementations, they usually have solutions to corner cases and common pitfalls. For example, Apache Commons Lang <a href="http://commons.apache.org/proper/commons-lang/apidocs/org/apache/commons/lang3/StringUtils.html" rel="nofollow noreferrer"><code>StringUtils</code></a> also has a <a href="http://commons.apache.org/proper/commons-lang/apidocs/org/apache/commons/lang3/StringUtils.html#reverse%28java.lang.String%29" rel="nofollow noreferrer"><code>reverse</code></a> function. Its <a href="http://svn.apache.org/viewvc/commons/proper/lang/trunk/src/main/java/org/apache/commons/lang3/StringUtils.java?view=markup#l6270" rel="nofollow noreferrer">implementation</a> is quite simple:</p>

<pre><code>public static String reverse(final String str) {
    if (str == null) {
        return null;
    }
    return new StringBuilder(str).reverse().toString();
} 
</code></pre>

<p>It uses <a href="http://docs.oracle.com/javase/7/docs/api/java/lang/StringBuilder.html#reverse%28%29" rel="nofollow noreferrer"><code>StringBuilder.reverse</code></a> whose <a href="http://docs.oracle.com/javase/7/docs/api/java/lang/StringBuilder.html#reverse%28%29" rel="nofollow noreferrer">javadoc</a> mentions some special cases:</p>

<blockquote>
  <p>If there are any surrogate pairs included in the sequence, 
  these are treated as single characters for the reverse operation. 
  Thus, the order of the high-low surrogates is never reversed.</p>
</blockquote>

<p>Here are a few tests:</p>

<pre><code>@Test
public void testCstring() {
    assertEquals("\uD800\uDC00", CString.reverse("\uD800\uDC00")); // fails
    assertEquals("\uD800\uDC00", CString.reverse("\uDC00\uD800")); // OK
}

@Test
public void testStringUtils() throws Exception {
    assertEquals("\uD800\uDC00", StringUtils.reverse("\uD800\uDC00"));
    assertEquals("\uD800\uDC00", StringUtils.reverse("\uDC00\uD800"));
}
</code></pre>

<p>I don't know too much about these surrogates but you should check it and handle them in your code. I suppose the JDK's implementation is more reliable and it's not coincidence that the handle them in the way they mention in the javadoc.</p>

<p>There is a good question (with great answers) about surrogates on Stack Overflow: <a href="https://stackoverflow.com/q/5903008/843804">What is a surrogate pair in Java?</a></p>

<p>(See also: <em>Effective Java, 2nd edition</em>, <em>Item 47: Know and use the libraries</em>)</p>
    </div>