<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First of all we should describe a <a href="https://en.wikipedia.org/wiki/User_story" rel="nofollow noreferrer">user-story</a> for your ID-generator. This description should contain use-cases (including examples), requirements, and related technical context.</p>

<h3>Use-Story</h3>

<p>As <em>creator of a <strong>new entity</strong></em> (system) I would like to make sure that this entity can be identified within the system by an <strong><a href="https://en.wikipedia.org/wiki/Identifier" rel="nofollow noreferrer">Identifier (ID)</a></strong>. So the ID should be <strong>automatically generated</strong> when the new entity is created and persisted.</p>

<p>As <strong>administrator or user</strong> of the system I would like to <strong>read some information</strong> about the entity directly from the generated ID. So
the ID should be a <a href="https://en.wikipedia.org/wiki/Natural_key" rel="nofollow noreferrer">Natural Key</a> which encodes some business information.</p>

<p><strong>Requirements:</strong></p>

<ol>
<li>the ID should be <strong>numerical</strong></li>
<li>depending on the <strong>entity-type</strong> the ID could vary in shape/pattern</li>
<li>the <strong>pattern</strong> and information encoded into the ID should <strong>tell something</strong> about it. Thus it contains <em>informational parts</em>, each encoded as a number. Parts may be <em>workstation-id</em>, <em>running-counter</em> or <em>creation-date</em></li>
<li>the <em>informational parts</em> (numbers) of the ID are <strong>separated by</strong> a dash <code>-</code> </li>
<li>the <strong>running-counter</strong> should be (at least) <strong>unique per entity-type</strong></li>
<li>the <strong>default ID</strong> (if not specified separately for the entity-types) should contain two parts: (a) <em>workstation-id</em> as 1-digit, (b) <em>running counter</em> as 2-digits. So the pattern <code>&lt;workstation_id&gt;-&lt;count&gt;</code> can for example be represented as <code>1-01</code> for the first <strong>entity XY</strong> (<em>running counter</em> <code>01</code>) created on <em>workstation</em> <code>1</code>.</li>
<li>the ID of an entity-type <strong>TICKET</strong> should consist of one extra information: (c) <em>creation-date</em> as 6-digit ISO-date in format <code>yyMMdd</code>. So the pattern <code>&lt;workstation_id&gt;-&lt;date_yyMMdd&gt;-&lt;count&gt;</code> can for example be represented as <code>1-191230-01</code> for the first <strong>ticket</strong> (<em>running counter</em> <code>01</code>) created on <em>workstation</em> <code>1</code> on <code>30th of December 2019</code>.</li>
<li>additionally the <strong>running-counter</strong> of entity-type <strong>TICKET</strong> should be <strong>reset on each new creation-date</strong>. So that the <em>running-counter</em>
is unique within each creation-date.</li>
</ol>

<h3>Design &amp; Modelling</h3>

<p>Now you can <strong>model the data structures</strong> needed to fulfill the requirements, i.e. classes or interfaces.</p>

<p><strong>class <code>EntityID</code></strong>:
learn from Java's <a href="https://docs.oracle.com/javase/8/docs/api/java/util/UUID.html" rel="nofollow noreferrer">UUID</a> class and its implemented interfaces:</p>

<pre class="lang-java prettyprint-override"><code>public class EntityID implements Serializable, Comparable&lt;EntityID&gt; {
  public static final String SEPARATOR = "-";
  public static final int REQUIRED_PARTS = 2;

  protected int workstationId;
  protected int counter;

  public EntityID(int workstationId, int counter) {
    // could add some parameter validation (like only positive values)
    this.workstationId = workstationId;
    this.counter = counter;
  }

  @Override // implements Comparable&lt;EntityID&gt; 
  public int compareTo(EntityID value) {
    // needed to make sure if compared objects are same, or for sorting: lesser, greater
    // left for you to implement
    return -1;
  }

  public static EntityID fromString(String name) {
    if (name == null || name.trim().isEmpty()) {
      throw new IllegalArumentException("ID to parse must not be null or empty!");
    }
    String[] parts = name.split(SEPARATOR);
    if (parts.length != REQUIRED_PARTS) {
      throw new IllegalArumentException(String.format("ID to parse must consist of %d parts, separated by '%s', but was: %s", REQUIRED_PARTS, SEPARATOR, name));
    }
    int workstationId = Integer.parseInt(parts[0]);
    int counter = Integer.parseInt(parts[1]);
    return new EntityID(workstationId, counter);
  }

  // getter and setter for all information parts
  // left to implement

  public String toString() {
    return String.format("%01d%s%02d", workstationId, SEPARATOR, counter); 
  }
}
</code></pre>

<p>This class servers the <strong>default ID</strong>. For the special case <strong>TICKET</strong> you need to inherit this class, as follows.</p>

<p><strong>class <code>TicketId</code></strong>:</p>

<pre class="lang-java prettyprint-override"><code>public class TicketID extends EntityID implements Serializable, Comparable&lt;TicketID&gt; {
  public static final String SEPARATOR = "-";
  public static final int REQUIRED_PARTS = 3;
  public static final DateTimeFormatter DATE_FORMATTER = DateTimeFormatter.ofPattern("yyMMdd");

  protected LocalDate creationDateUtc;

  public TicketID(int workstationId, int counter, LocalDate utcDate) {
    super(workstationId, counter);
    this.creationDateUtc = utcDate;
  }

  @Override // implements Comparable&lt;TicketID&gt; 
  public int compareTo(TicketID value) {
    // needed to make sure if compared objects are same, or for sorting: lesser, greater
    // left for you to implement
    return -1;
  }

  public static TicketID fromString(String name) {
    if (name == null || name.trim().isEmpty()) {
      throw IllegalArumentException("ID to parse must not be null or empty!");
    }
    String[] parts = name.split(SEPARATOR);
    if (parts.length != REQUIRED_PARTS) {
      throw new IllegalArumentException(String.format("ID to parse must consist of %d parts, separated by '%s', but was: %s", REQUIRED_PARTS, SEPARATOR, name));
    }
    int workstationId = Integer.parseInt(parts[0]);
    LocalDate utcDate = LocalDate.parse(parts[1], DATE_FORMATTER);
    int counter = Integer.parseInt(parts[2]);
    return new TicketID(workstationId, counter, utcDate);
  }

  // getter and setter for all information parts
  // left to implement

  public String toString() {
    // could also use a DateFormatter like
    // return String.format("%01d-%s-%02d", workstationId, DATE_FORMATTER.format(creationDateUtc), counter);
    return String.format("%01d-%tY%tm%td-%02d", workstationId, creationDateUtc, counter);
  }
}
</code></pre>

<p><strong>Note:</strong></p>

<p>How <strong>parsing</strong> (form <em>representation</em> String to <em>value</em> ID) and <strong>formatting</strong> (from <em>value</em> ID to <em>representation</em> String) was implemented using static facotry method <code>fromString</code> and instance method <code>toString</code>.  </p>

<p>The above classes implement requirements 1. - 4. and 6. - 7. </p>

<p>Now the ID-generator comes into play. Using <a href="https://www.oodesign.com/factory-pattern.html" rel="nofollow noreferrer">Factory</a> <em>Design-Pattern</em> we can implement it like follows.</p>

<p>The <code>counter</code> for each entity-type should be managed inside the generator, not be dependent on some DataManager. Thus make use of Java's <strong>concurrent</strong> counter classes [AtomicInteger](<a href="https://stackoverflow.com/questions/4818699/practical-uses-for-atomicinteger%5D">https://stackoverflow.com/questions/4818699/practical-uses-for-atomicinteger]</a></p>

<pre class="lang-java prettyprint-override"><code>public class EntityIdGenerator {

   protected AtomicInteger counter;
   protected Integer counterMax;
   protected Integer workstationId; 

   // here the current value from DataManager can be injected as counterStart
   // counterMax = 99 (limit to 2-digits), workstationId = 1
   public EntityIdGenerator(int counterStart, int counterMax, int workstationId) {
     if (counterMax &lt;= counterStart || counterStart &lt; 0 || counterMax &lt; 1) {
       throw new IllegalArgumentException("CounterStart must positive and &gt;= 0, counterMax must be &gt; 1 and &gt; counterStart"!); 
     }
     this.counter = new AtomicInteger(counterStart);
     this counterMax = counterMax;
     this.workstationId = workstationId;
   }

   protected int rollToNextCounter() {
     // if current counter is 99 == counterMax, then reset  
     boolean hasReachedMaxAndReset = this.counter.compareAndSet(counterMax, 0);
     // if counterStart was 0, the nextCounter will also be 0 (first used) 
     return this.counter.getAndIncrement();     
   }

   public EntityID generateId() {
     return new EntityID(this.workstationId, rollToNextCounter());
   }

}
</code></pre>

<p>The above class has some benefits:</p>

<ul>
<li>can now be <strong>tested isolated</strong> without need of some DataManager (independent)</li>
<li>can now have different instances (each of it manages state for a special entity-type, and its counter).</li>
</ul>

<p>With the last (multiple instances) we implemented requirement 5.</p>

<ul>
<li>can be <em>specialized</em>, meaning it can be inherited to some class <code>TicketIdGenerator</code> which manages some property <code>lastIssuedDateUtc</code> in order to reset the counter even if the <code>counterMax</code> has not yet reached.</li>
</ul>

<pre class="lang-java prettyprint-override"><code>public class TicketIdGenerator extends EntityIdGenerator {
   private LocalDate lastIssuedDateUtc;

   public TicketIdGenerator(int counterStart, int counterMax, LocalDate lastIssuedDateUtc) {
     super(counterStart, counterMax);
     if (lastIssuedDateUtc &gt; todayUtc()) {
       throw new IllegalArgumentException("date (as UTC) must can be now or in the past; must not be in the future: " + lastIssuedDateUtc);
     }
     this.lastIssuedDateUtc = lastIssuedDateUtc;
   }

   public LocalDate todayUtc() {
     return LocalDate.now("UTC");
   }

   public TicketID generateId() {
     if (this.lastIssuedDateUtc &lt; todayUtc()) {
       this.lastIssuedDateUtc = todayUtc();
     }
     return new TicketID(this.workstationId, rollToNextCounter(), this.lastIssuedDateUtc);
   }

   // rest of logic and methods remain same as in EntityIdGenerator

}
</code></pre>

<p>With above we implemented requirement 8.</p>
    </div>