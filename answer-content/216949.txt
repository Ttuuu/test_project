<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First, your definition of <code>consonants</code> can be simplified a bit using set operations:</p>

<pre><code>from string import ascii_lowercase

# Storing vowels in a set instead of a list
vowels = {'a', 'e', 'i', 'o', 'u'} 

# Read as "Take the set of lowercase letters, and remove the vowels"
consonants = set(ascii_lowercase) ^ vowels
</code></pre>

<hr>

<p>The vowel counting code below that is repetitious. You have the same counting loop twice. This is a good place to make use of a function:</p>

<pre><code>def count_vowels(name):
    count = 0
    for i in vowels:
        count += name.count(i)

    return count

total_vowel1 = count_vowels(name1)
total_vowel2 = count_vowels(name2)
</code></pre>

<hr>

<p>Instead of importing <code>random</code> a few times throughout the script, just import it at the top once. Unless you have a good reason to hold off on importing something until you really need it, just import any modules right at the top for clarity.</p>

<hr>

<p>Your spacing is kind of a mess. At different points you have:</p>

<ul>
<li><code>total_vowel1 =0</code></li>
<li><code>consonants1 = 0</code></li>
<li><code>love +=random.randint(10,50)</code></li>
<li><code>((love&lt;49) or (love == 49))</code></li>
<li><code>love +=random.randint(10,30)</code></li>
<li><code>love+=random.randint(1,10)</code></li>
</ul>

<p>See the problem? You're either being wildly inconsistent in your spacing, or you aren't caring to make sure your code readable and nice looking. Pick a spacing style and stick to it. I'd recommend putting spaces around infix operators (<code>love &lt; 49 or love == 49</code>).</p>

<hr>

<p>You're using two different counting and naming methods for vowels and consonants: a full loop, and a comprehension:</p>

<pre><code>total_vowel1 =0
for i in ['a','e','i','o','u']:
     total_vowel1 += name1.count(i)

. . .

consonants1 = len([letter for letter in name1 if letter.lower() in consonants])
</code></pre>

<p>Again, try to be consistent. You or someone else may need to read your code later, and consistency greatly helps readability.</p>

<hr>

<p><code>((love&gt;90) or (love == 90))</code> is needlessly complicated. Just write <code>love &gt;= 90</code>.</p>

<hr>

<p>In that same area, you have a bunch of <code>if</code>s. They're all exclusive of each other though, so really, all the <code>if</code>s after the first should be <code>elif</code>s.</p>

<hr>

<p><code>if love &lt;= 89 and love &gt;= 70</code> (which I fixed up) could be simply written as <code>70 &lt;= love &lt;= 89</code>. Python, unlike most languages, allows for comparison chaining.</p>

<hr>

<p>The last case can just be an <code>else</code>. By elimination, if the other cases weren't picked, the last one must be.</p>

<hr>

<hr>

<p>After taking all that into consideration and fixing some more spacing, I ended up with:</p>

<pre><code>from string import ascii_lowercase
import random
import time

name1 = input("Please type Name 1.\n")
name2 = input("Please type Name 2.\n")

vowels = {'a', 'e', 'i', 'o', 'u'}
consonants = set(ascii_lowercase) ^ vowels

def count_vowels(name):
    count = 0
    for i in vowels:
        count += name2.count(i)

    return count

total_vowel1 = count_vowels(name1)
total_vowel2 = count_vowels(name2)

love = 0
if(total_vowel1 == total_vowel2):
    love += random.randint(10, 30)

consonants1 = len([letter for letter in name1 if letter.lower() in consonants])
consonants2 = len([letter for letter in name2 if letter.lower() in consonants])

if(consonants1 == consonants2):
    love += random.randint(20, 40)

line1 = name1
line2 = name2
split1 = line1.split()
split2 = line2.split()
fl1 = [word[0] for word in split1]
fl2 = [word[0] for word in split2]

if (fl1 == fl2):
    love += random.randint(10,30)

if (len(name1) == len(name2)):
    love += random.randint(1,10)

love += random.randint(10,50)

if (love &gt; 100):
    love = 100

print("Calculating...")

print(name1, "and", name2, "have a", love, "% relationship.")

if love &gt;= 90:
    print("They have an unbreakable relationship that will last forever.")

elif 70 &lt;= love &lt;= 89:
    print("They have a strong relationship that will most likely lead to a marriage.")

elif 50 &lt;= love &lt;= 69:
    print("They have a good relationship that can lead to a honeymoon to Paris.")

else:
    print("They have a weak relationship that could have been a 'match made in heaven'.")
</code></pre>
    </div>