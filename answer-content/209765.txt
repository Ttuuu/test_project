<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Bad names!!</h1>

<ul>
<li>Very poor naming, so much so that your code is almost unreadable and definitely unusable.</li>
<li>Use constants for variables that do not change. eg <code>var n1=</code> should be <code>const n =</code></li>
<li>Always! indent your code.</li>
<li>Spaces between operators <code>var n1=prompt(</code> should be <code>var n1 = prompt(</code> </li>
<li><code>else</code> on same line as closing <code>}</code> eg <code>} else if (</code></li>
<li>Use <code>===</code> rather than <code>==</code> and <code>!==</code> rather than <code>!=</code></li>
<li>The code is broken and throws errors because you have missing function calls. Next time you post on code review please make sure that the code works, or clearly mark code stubs.</li>
<li>A lot of repeated code could be put together as a function.</li>
</ul>

<p>eg Ask question function</p>

<pre><code>function askQuestion(message, yesCall, noCall, unsureCall) {
    const result = prompt(message, "").toLowerCase();
    if ( result === "y") { yesCall() }
    else if (result === "n") { noCall() }
    else if (result === "i") { unsureCall() }
    else { askQuestion(message, yesCall, noCall, unsureCall) }
}
</code></pre>

<p>Then you can ask the question </p>

<pre><code>function mcs1() {
    askQuestion(
        "Do you have Medicare benefits (Y=Yes, N=No, I=I don't know)",
         mcs2, mcs1a, mcs1b
    );
}
</code></pre>

<h2>User friendly</h2>

<p>When creating interfaces you should never have ask the user to correct themselves due to improper use of the interface. </p>

<p>If you ask for a Y or N and you can not control the keys, don't respond with <code>"Enter a valid choice Y,N or I!"</code> as it is a pointless and frustrating step for the user. Just ask the question again. <code>"Try again... Do you have Medicare benefits? Y/N"</code>  </p>

<p>Best is to ensure that the user can only make correct selections.</p>

<p>Use <code>String.toLowerCase()</code> or <code>String.toUpperCase()</code> to eliminate the need to differentiate between upper and lower case input.</p>

<p>Use a dialog with clickable options, or vet the key inputs with a keyboard event listener (not available on prompt) </p>

<h2>Alert and Prompt are evil</h2>

<p>Don't use prompts or alerts. Use the HTML5 element dialog (or use standard HTML) and create custom dialogs. </p>

<p>Custom dialogs  are non blocking and let you control the inputs, style, and much more. Giving a much better feel and flow to the interrogation.</p>

<p>See example how to use <code>&lt;dialog&gt;</code> element. (Note: full support for <code>&lt;dialog&gt;</code> element is only on Chrome for the moment. A <a href="https://github.com/GoogleChrome/dialog-polyfill" rel="nofollow noreferrer">polyfill</a> can be found on <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog" rel="nofollow noreferrer">MDN dialog reference</a> page.)</p>

<h2>Separate questions from code.</h2>

<p>You have coded the questions into the source such that if you make a change to the questions you will need to make changes to the source code. </p>

<p>These types of apps (survey or interrogations) are generally a class of finite state machine. The state (a question or message) will always follow a previous known state, and the following state will depend on the current answer. </p>

<p>Seperate the state flow from the logic in such a way that you do not need to code the questions. You should be able to present any list of questions as a dataset (eg JSON) without needing to change any of the source code.</p>

<p>If the data structure is well defined, it also allows for non coders to create and change the interrogation.</p>

<h2>An example.</h2>

<p>The example may be a little advanced but have a look anyways, take what you can and feel free to ask questions in the comments.</p>

<ul>
<li>It uses the dialog element to create the dialogs.</li>
<li>Async functions and promises to wait for user input.</li>
<li>Event listeners to get user clicks.</li>
<li>Defines a state machine via the object <code>interrogation</code> that uses named properties to connect states. The function <code>interrogate</code> takes a state name and use it to determine how to present and act on that state.</li>
</ul>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>setTimeout(()=&gt;interrogate("start"),0);

/* Structure of interrogation All names are case sensitive [] means optional
  name: { // state name
    [action]: string, // one of two actions "reset" or "showResult"
    [question]: string,  //  The question if included the must have Y,N and/or [I]
    [Y]: string  // name of state for yes result
    [N]: string  // name of state for no result
    [I]: string  // name of state for unsure result
    [message]: string, // Message to display. This is only optional if question is defined
    [next]: string // name of next state. If omitted then defaults to "exit"
  }
*/

const interrogation = {
    results: "",
    start: {
        action: "reset",
        question: "Do you have Medicare benefits?",
        Y: "partsAB",
        N: "deniedMedicare",
        I: "refSocialSecurityAdministration"
    },
    partsAB: {
        question: "Do you have Medicare Part A AND B",
        Y: "applyForHF",
        N: "unknown",
        I: "unknown"      
    },
    applyForHF: {
        question: "Would you like to apply for HF MEdicare",
        Y: "applyForHFInfo",
        N: "haveCaretaker"
    },
    haveCaretaker: {
        question: "Do you have a caretaker relative who claims you on their taxes",
        Y: "haveCaretakerInfo",
        N: "dontHaveCaretakerInfo", 
    },
    deniedMedicare: {
        question: "Have you applied and been denied Medicare Coverage",
        Y: "unknown",
        N: "unknown",      
    },   
    startAgain: {
        question: "Would you like to restart?",
        Y: "start",
        N: "exit",              
    },
    unknown: {
        message: "Arrrghhhh. computer meltdown.. the pain, the pain... :P",
        next: "startAgain",
    },
    refSocialSecurity: {
        message: "Refer to Social Security to apply for the other part (Code E01M1)!"
    },
    refSocialSecurityAdministration: {
        message: "Refer to Social Security Administration to check status (Code E01M1)!"    
    },
    haveCaretakerInfo: {
        message: "Follow standard prequalification with caretaker relative as the income."
    },
    dontHaveCaretakerInfo: {
        message: "Refer to the HRA/LDSS/SLDSS to apply for benefits (CODE E01H)",
    },
    applyForHFInfo: {
        message: "Transfer to Medicare Advertising to apply for HealthFirst Medicare"
    },
    exit: {
        action: "showResult",
        message: "Thank you for your participation.",
    },
}

async function askQuestion(message, includeNotSure) {
    return new Promise(selectionMade =&gt; {
        quesionMenuEl.addEventListener("click", event =&gt; {
            selectionMade(event.target.value);
            event.preventDefault();  // stops the dialog from permanently closing
            questionDialog.close();
        }, {once: true});
        questiomMessageEl.textContent = message;
        notSureButton.style.display = includeNotSure ? null : "none"; //null is default 
        questionDialog.showModal();
    });
}
async function showMessage(message) {
    return new Promise(selectionMade =&gt; {
        messageMenuEl.addEventListener("click", event =&gt; {
            messageDialog.close();
            event.preventDefault(); // stops the dialog from permanently closing
            selectionMade("OK");
        }, {once: true});
        messageMessageEl.textContent = message;
        messageDialog.showModal();
    });
}
function interrogate(stateName = "exit") {
    const state = interrogation[stateName];
    if(state.action === "reset") { interrogation.results = "" }
    else if(state.action === "showResult") { console.log("Result: " + interrogation.results) }
    if (state.question) { 
        askQuestion(state.question, state.I !== undefined)
            .then(result =&gt; {
                if (result !== undefined) {
                    interrogation.results += result;
                    interrogate(state[result]);
                } else {
                    interrogate(stateName); // clicked outside button
                }
            });            
    } else if (state.message) {
        showMessage(state.message)
            .then(() =&gt; {
                if (stateName !== "exit") { interrogate(state.next) } 
            });
    }
}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;dialog id="questionDialog"&gt;
  &lt;form method="dialog"&gt;
    &lt;p id = "questiomMessageEl"&gt;&lt;/p&gt;
    &lt;menu id="quesionMenuEl"&gt;
      &lt;button value="Y"&gt;Yes&lt;/button&gt;
      &lt;button value="N"&gt;No&lt;/button&gt;
      &lt;button value="I" id="notSureButton"&gt;Not sure&lt;/button&gt;
    &lt;/menu&gt;
  &lt;/form&gt;
&lt;/dialog&gt;
&lt;dialog id="messageDialog"&gt;
  &lt;form method="dialog"&gt;
    &lt;p id="messageMessageEl"&gt;&lt;/p&gt;
    &lt;menu id="messageMenuEl"&gt;
      &lt;button value="ok"&gt;OK&lt;/button&gt;
    &lt;/menu&gt;
  &lt;/form&gt;
&lt;/dialog&gt;</code></pre>
</div>
</div>

    </div>