<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong><code>unsigned</code> vs, <code>unsigned long</code></strong></p>

<p>Code mixes use of <code>unsigned</code> and <code>unsigned long</code> as if they are of the 32-bit size.</p>

<p>In 2020, 16-bit <code>unsigned</code> is commonly found in embedded processors and 64-bit <code>unsigned long</code> in 64-bit processors.</p>

<p>Do not assume <code>unsigned</code>, <code>unsigned long</code> size/range other than they are at <strong>least</strong> 16, 32 bits.</p>

<pre><code>#define UINT_MAXIMUM 4294967294  // UINT_MAX may only be 65535
printf("%10lu", input);          // Largest `unsigned long` could be 19+ digits.
unsigned long  output_binary;
if(output_binary != UINT_MAX)    // output_binary could well exceed `UINT_MAX

unsigned long convertBinaryToBCD(unsigned long number) {
  ...
  return UINT_MAX;               // Why not ULONG_MAX?
</code></pre>

<p>In particular, the below is not portable as it <a href="https://en.wikipedia.org/wiki/Jerry_Belson#Career" rel="nofollow noreferrer">assumes</a> an <code>unsigned long</code> is 32 bits. </p>

<pre><code>int bit_position[32];
</code></pre>

<p><strong>Questionable code</strong></p>

<p><code>((number &gt;&gt; 8) * 100)</code> is always zero.</p>

<pre><code>if(number &lt; 100) {
  return (((number &gt;&gt; 8) * 100) + ((number &gt;&gt; 4) * 10) + (number &amp; 0xF));
}
</code></pre>

<p><strong>Use math</strong></p>

<p>Rather than enumerate a list that assume 32-bit integer, use a rule</p>

<pre><code>// if(counter == 5 || counter == 13 || counter == 21 || counter == 29)
if (counter%8 == 5)
</code></pre>
    </div>