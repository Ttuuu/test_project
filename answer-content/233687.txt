<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In all, it's a good effort.  Here are some things that may help you improve your program.</p>

<h2>Choose appropriate variable types</h2>

<p>The <code>keep_running</code> flag is a <code>std::sig_atomic_t</code> but since you're using C++17 anyway (for <code>std::filesystem</code>), I'd recommend making that an <code>atomic_bool</code> which more clearly reflects its usage and intent.</p>

<h2>Use <code>const</code> where practical</h2>

<p>The <code>is_in_processing</code> function doesn't (and shouldn't) alter the underlying <code>DirectoryView</code> object, so it should be declared as a <code>const</code> function like this:</p>

<pre><code>bool is_in_processing(const fs::path&amp; ret) const;
</code></pre>

<h2>Understand differences between C and C++</h2>

<p>I don't know if you come from C or just wanted to be explicit, but this function:</p>

<pre><code>void reload(void) { it = fs::directory_iterator(dir); }
</code></pre>

<p>could also be declared as</p>

<pre><code>void reload() { it = fs::directory_iterator(dir); }
</code></pre>

<p>Unlike C, when the argument list is empty in C++, it means the same as <code>void</code>.</p>

<h2>Use the standard library</h2>

<p>The code currently contains this function:</p>

<pre><code>bool is_in_processing(const fs::path&amp; ret) 
{
    for (int i = 0; i != process_list_size; ++i) {
        if (process_list[i] == ret)
            return true;
    }
    return false;
}
</code></pre>

<p>Adding <code>const</code> as mentioned above, this could be very succinctly rewritten using <code>std::any_of</code></p>

<pre><code>bool is_in_processing(const fs::path&amp; ret) const {
    return std::any_of(&amp;process_list[0], &amp;process_list[process_list_size], [ret](const fs::path &amp;p){ 
            return p == ret; });
}
</code></pre>

<h2>Prefer <code>lock_guard</code> to <code>scoped_lock</code> for single <code>mutex</code></h2>

<p>The essential difference between <code>scoped_lock</code> and <code>lock_guard</code> is that <code>scoped_lock</code> handles the coordination of multiple mutexes.  Since you've only got one, it makes sense to use the somewhat simpler <code>lock_guard</code> instead.</p>

<h2>Rethink the architecture</h2>

<p>The current architecture uses multiple threads to process the same directory, but the descriptions seems to imply a desire to process a single directory using multiple threads.  The difference is that the current design has multiple threads all processing every file with the result that if we have four threads, we could have the same file processed four or more times.  A different design could split up a single directory of files among multiple threads and have only <em>one</em> thread process each file so that each file is only processed once.  One way to do that is to have a <code>DirWatcher</code> looking for changes in the directory and then dispatching <code>DirWorker</code>s (possibly in multiple threads) to do the work.  Alternatively, have them communicate via a thread-safe work queue and let each <code>DirWorker</code> independently grab an item and process it.</p>
    </div>