<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>FontObject</strong></p>

<ul>
<li><p>Since all your data members and methods are <code>public</code>, consider making it a <code>struct</code> instead of a <code>class</code>. Makes no difference to a compiler, but makes your intention clearer.</p></li>
<li><p>Consider using a <code>unique_ptr</code> instead of <code>shared_ptr</code>, since only one instance of GameObject <em>owns</em> the object. </p></li>
</ul>

<p><strong>FontsLoader</strong></p>

<ul>
<li><p>I'm sure they are many people who will explain why you shouldn't use the Singleton pattern. Ultimately, it comes down to whether you (and people you're coding with) are okay with. I've seen various large projects (~100K-1M lines) use the Singleton pattern, so I'm not going to tell you whether you should or shouldn't use it.</p></li>
<li><p>Use something like an <code>std::unordered_map&lt;FontsID, FontsObject&gt;</code>. That way, you won't have to cast it into an integer and access a vector.</p></li>
<li><p>On a side note, for vector access, use <code>size_t</code>.</p></li>
<li><p>Consider passing the <code>sf::Font</code> object as a raw pointer or a const reference. Remember, non-owning raw pointers is FINE, even recommended. Whatever calls the <code>getFont</code> method is not concerned with ownership of the object, just the object itself. Don't pass smart pointers around unless you want the calling code to have ownership of the object.</p></li>
</ul>
    </div>