<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I don't normally code in JavaScript but here's some problems I see with the code.</p>

<ul>
<li><p>When skimming your code it's hard to tell where a lot of function's argument and body, end and begin.
this is because all arguments, return type and function body are at the same level of indentation.</p>

<blockquote>
  <pre class="lang-js prettyprint-override"><code>function useGetLayout2&lt;TData, TParam, TExtra extends {}&gt;(
  getData: IoGetDataT&lt;TData, TParam&gt;,
  getLayout: GetLayoutT&lt;TData, TExtra, void&gt;,
  param: TParam,
  extra: TExtra)
  : React.ReactElement {
  return useGetLayout3&lt;TData, TParam, TExtra, void&gt;(getData, getLayout, param, extra);
}
</code></pre>
</blockquote>

<p>Whilst you're consistent with this problem, you're not consistent in how it manifests.
I would at the very least pick one form and stick with it.</p>

<p>In addition to the above it's easy to misread the return type of functions as part of the type of the last argument. Take:</p>

<blockquote>
  <pre class="lang-js prettyprint-override"><code>function useGetLayout0&lt;TData&gt;(
  getData: IoGetDataT&lt;TData, void&gt;,
  getLayout: GetLayoutT&lt;TData, {}, void&gt;): React.ReactElement {
  return useGetLayout&lt;TData, void&gt;(getData, getLayout, isVoid);
}
</code></pre>
</blockquote>

<p>Contrast with:</p>

<pre class="lang-js prettyprint-override"><code>function useGetLayout0&lt;TData&gt;(
  getData: IoGetDataT&lt;TData, void&gt;,
  getLayout: GetLayoutT&lt;TData, {}, void&gt;,
): React.ReactElement {
  return useGetLayout&lt;TData, void&gt;(getData, getLayout, isVoid);
}
</code></pre>

<p>The trailing comma helps with Git diffs when you need to add another argument to a function.</p></li>
<li><p>I'm not a fan of how you call <code>React.useMemo</code>, in no way does it look like the lambda is not the only argument to it.</p>

<ul>
<li>You have not put the start of the lambda on a new line from the opening bracket of the function.</li>
<li>You have not indented the body of the lambda to show that there are other arguments at the same level.</li>
</ul>

<blockquote>
  <pre class="lang-js prettyprint-override"><code>const newData = React.useMemo(() =&gt; {
  ...
}, [getData, param]);
</code></pre>
</blockquote>

<pre class="lang-js prettyprint-override"><code>const newData = React.useMemo(
  () =&gt; {
    ...
  },
  [getData, param],
);
</code></pre>

<p>The second form allows for more functions to be passed to the function without the need for janky formatting of the arguments.</p>

<pre class="lang-js prettyprint-override"><code>const newData = React.useMemo(() =&gt; {
  ...
}, [getData, param], () =&gt; {
  ...
});
</code></pre></li>
<li><p>I'm not a fan of how you're getting <code>newData</code> in <code>useGetLayout3</code>:</p>

<ul>
<li>I'm not a fan of making <code>const variable</code> and then just <code>return variable</code> the next line.</li>
<li>Normally there's never a need to manually make a <code>Promise</code>. I've not used JS in a while but I'm pretty sure you can just use <code>getData(...).then(fetched =&gt; {setData(fetched)})</code></li>
</ul>

<p></p>

<pre><code>const newData = React.useMemo(
  () =&gt; (param2: TParam2) =&gt; getData(param, param2).then(f =&gt; {setData(f)}),
  [getData, param],
);
</code></pre></li>
</ul>
    </div>