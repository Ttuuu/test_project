<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is some interesting code, thanks for posting it here. Good work Mawg.</p>

<p><strong>Nitpicking</strong></p>

<blockquote>
<pre><code># +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+
# Given the lines and current line number, this function reads
# from the current line (or the first following line containing the start string,
</code></pre>
</blockquote>

<p>Please get rid of banners like this. If you are using an IDE such as PyCharm it can generate documentation comments for you. Current python industry standard regarding documentation is PEP-287.</p>

<ol>
<li><a href="https://www.python.org/dev/peps/pep-0287/" rel="nofollow noreferrer">PEP-287</a></li>
<li><a href="https://stackoverflow.com/questions/3898572/what-is-the-standard-python-docstring-format">Related SO Question</a></li>
</ol>

<blockquote>
<pre><code>lines,lineNumber,
</code></pre>
</blockquote>

<p>Use consistent spacing. I personally like to use <a href="https://github.com/ambv/black" rel="nofollow noreferrer">black</a> to format my code. But you can use anything that formats to PEP8.</p>

<blockquote>
<pre><code>GetLinesBetween, lineNumber, ...
</code></pre>
</blockquote>

<p>Please use correct PEP8 style such as <code>get_lines_between</code> and <code>line_number</code>?</p>

<blockquote>
<pre><code>#-----------------------
except Exception as err:
    print('Exception:')
    exc_type, exc_value, exc_tb = sys.exc_info()
</code></pre>
</blockquote>

<p>This is sloppy exception handling. </p>

<ul>
<li>If you must use a catch-all: Maybe use a higher level method that captures exceptions and change this to
<code>try_get_lines_between</code> or <code>_get_lines_between</code> as a more readable alternative. 
<strong>Why</strong>: separation of error handling and application logic - It is up to you to decide if this is best course of action.</li>
<li>You
can also create your own exceptions if that is more suitable to you. You can for example raise them instead of returning empty list if it is more suitable. </li>
<li>Use a <a href="https://docs.python.org/3/library/logging.html" rel="nofollow noreferrer">logger</a> instead of print to log exceptions. <code>logger.exception</code> is more suitable for this.</li>
<li>Instead of <code>sys.exit(0)</code> - maybe exit with non zero value so you know that there was an error.</li>
</ul>

<blockquote>
  <p>emmpty, serach</p>
</blockquote>

<p>Please use a spell checker plugin in your IDE.</p>

<blockquote>
<pre><code># ToDo: consider (a) parameter(s) to indicate that lines must start with,
#       or be equal to, a search string, rather than just containing?
#       That would make this even more generic, but would require (an) extra parameter(s)
#
</code></pre>
</blockquote>

<p>People sometimes forget to do to-dos. Use a software like JIRA, Github Projects to track your tasks and remove them from code. It's OK to create tasks for yourself.</p>

<p><strong>How would I design this better?</strong></p>

<ul>
<li>Use generators instead of creating lists, so you can create pipeline of functions and can even read multiple files, and also save some memory.</li>
<li>Maybe use <a href="https://en.wikipedia.org/wiki/Aho%E2%80%93Corasick_algorithm" rel="nofollow noreferrer">Aho-Corasick</a> algorithm (Trie based) to match against multiple strings.</li>
<li>Sensible defaults - there are lot of parameters for this function. If you add default values then API would be easier to use.</li>
</ul>
    </div>