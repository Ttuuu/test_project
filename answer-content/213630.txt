<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>It is misleading that the same field in <code>Link</code> is sometimes referred as <code>key</code> and sometimes as <code>value</code>.</p></li>
<li><p><code>LRU::insert</code> works too hard.</p>

<ul>
<li>It calls <code>findPage</code>, followed by <code>access</code>, which in turn calls 

<ul>
<li><code>findPage</code> <em>with the same argument</em>, and</li>
<li><code>deleteKey</code>, which also traverses the list <em>looking for the same key</em>.</li>
</ul></li>
</ul>

<p>Three traversals with the same argument seems excessive. Consider finding the page which <em>links to</em> the victim.</p></li>
<li><p>A standard implementation of the linked list may exhibits an undesirable behavior. Continuous deletion and creation of nodes will eventually scatter the nodes all over the heap, leading to the poor referential locality, hence plenty of cache misses during traversal. Since your list by definition has a fixed number of entries, try to keep your <code>Link</code>s compactly, say in an array, and reuse them.</p></li>
<li><p><code>LinkList::push_front</code> shall be streamlined. <code>head = newNode</code> is executed in both branches; take it out of <code>if/else</code>:</p>

<pre><code>    newNode-&gt;setNext(head);
    if (head == nullptr) {
        tail = newNode;
    }
    head = newNode;
</code></pre>

<p>Ditto for <code>push_back</code>.</p></li>
<li><p>I do not endorse trivial getters and setters. There are no invariants to protect, so they just add noise. Making <code>Link::key</code> and <code>Link::next</code> public is just as good.</p></li>
</ul>
    </div>