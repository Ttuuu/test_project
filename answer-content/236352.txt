<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm omitting the lines from your method not directly involved with creation of Scanner:</p>

<blockquote>
<pre><code>Scanner in = createScanner(inFile);
//Check empty file
if (in.hasNextLine() == false) {
       throw new IllegalArgumentException("Can not encode an empty file");
}
//...other lines not involved with scanners 
in = createScanner(inFile); &lt;-- assignment of second scanner, first not closed
in.close();
</code></pre>
</blockquote>

<p>The first Scanner resource is not closed both in the case of empty file (exception cause the exit from the method) and when you reassign a new Scanner to the variable containing the old Scanner instance, so you have a <strong>resource leak</strong>.</p>

<p>Personally I would separate the control of empty file from creation of a Scanner instance: a possible solution for it using the File.<a href="https://docs.oracle.com/javase/7/docs/api/java/io/File.html#length()" rel="nofollow noreferrer">empty</a> method (lot of debates about possible solutions how to check if one file is empty, check which is the best method for you)</p>

<pre><code>public HoffmanEncoding(File inFile) throws FileNotFoundException {
    if (inFile.length() == 0L) {
        throw new IllegalArgumentException("Can not encode an empty file");
    }
    // other lines of the method
}
</code></pre>

<p>After, I would put the <a href="https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html" rel="nofollow noreferrer">try with resources</a> construct inside your methods <code>encodeMessage</code> and <code>buildNodeHashMap</code> to ensure the automatic closing of scanners like the code below:</p>

<pre><code>public class HoffmanEncoding {

    public HoffmanEncoding(File inFile) throws FileNotFoundException {
        if (inFile.length() == 0L) {
            throw new IllegalArgumentException("Can not encode an empty file");
        }
        //omitting all lines in the method not involved with scanners
        nodeHashMap = buildNodeHashMap(inFile);
        encodedMessage = encodeMessage(inFile);
    }

    private String encodeMessage(File inFile) throws FileNotFoundException {
        StringBuilder encodedMessage = new StringBuilder();
        try (Scanner sc = new Scanner(inFile)) {
            //operations to construct the message
        }
        return encodedMessage.toString();
    }

    private Map buildNodeHashMap(File inFile) throws FileNotFoundException {
        Map nodeHashMap; //initialize it 
        try (Scanner sc = new Scanner(inFile)) {
            //operations to populate the map
        }
        return nodeHashMap;
    }
}
</code></pre>

<p>Note : better to add <code>static</code> to the two methods to avoid calls to instance methods inside the constructor.</p>
    </div>