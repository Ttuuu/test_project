<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>Questions I have:</p>
  
  <p>Is there a better way of maintaining the returned images JSON between
  the Ajax request and populating the page i.e.</p>
  
  <p><code>images = [];</code></p>
</blockquote>

<p><code>images</code> is a value that can be removed from the global scope. The value is defined when the jQuery promise object returns a value</p>

<p><code>images</code> variable is not necessary</p>

<p>Define a function to handle errors</p>

<pre><code>  function handleError(error) {
    alert(error.message)
  }
</code></pre>

<p><code>return</code> a value from <code>callUnsplash</code></p>

<pre><code>  function callUnsplash(url) {
    return $.ajax({
      url: url,
      dataType: 'json',
      method: 'GET',
      beforeSend: function(xhr) {
        xhr.setRequestHeader('Authorization', 'Client-ID ' + settings.apiClientId);
        xhr.setRequestHeader('Accept-Version', 'v1');
      },
      success: function(json) {
        totalImageCount = (json.hasOwnProperty('total')) ? json.total : settings.imagesToReturn;
        // `return` value here, which will be `images` parameter at `populateImages`
        return json.hasOwnProperty('results') ? json.results : json;
      },
      error: function(xhr, status, error) {
        // throw error
        throw new Error("Sorry, something went wrong (" + error + " " + xhr.status + " " + xhr.statusText + ")");
      }
    });
  }
</code></pre>

<p><code>images</code> is value <code>return</code>ed from <code>callUnsplash()</code>. <code>$.map()</code> can be substituted for <code>$.each()</code> for ability to <code>return</code> an HTML string or jQuery object when passed as parameter to <code>.append()</code>. Concatenate HTML strings where possible instead of calling <code>.append()</code> more than once chained to more than one <code>jQuery()</code> call. Include missing closing <code>&lt;/div&gt;</code> where HTML is appended to <code>#imageList</code> unexpected results.</p>

<pre><code>  function populateImages(images) {
    if (images.total == 0) {} else {
      //clear any existing images in the list
      $('#imageList').empty()
      .append($.map(images, function(image, index) {
        return `&lt;li&gt;&lt;a href="#" class="splashImage" data-photoid="${image.id}"&gt;&lt;div class="in_max200"&gt;&lt;img src='${image.urls.thumb}' class='in_singlepic in_max200'&gt;&lt;/div&gt;&lt;/a&gt;&lt;/li&gt;`
      }));
      //bind the callback function to the splashImage so it is called when clicked. if no callback is provided, then the default will be performed
      $(".splashImage").on("click", function(event) {
        event.preventDefault();
        if (typeof settings.cbOnImageSelect == 'function') {
          var photoId = $(this).data('photoid');
          var url = getImageURL(photoId);
          // use `.then()`, handle errors
          callUnsplash(url).then(function(i) {
            settings.cbOnImageSelect.call(this, i);
          }, handleError);
        }
      });
      if (totalImageCount &lt;= settings.imagesToReturn) {
        $('#us_Paging').hide();
      } else {
        $('#us_Paging').empty().show();
        if (totalImageCount &gt; settings.imagesToReturn) {
          var noOfPages = Math.ceil(totalImageCount / settings.imagesToReturn);
          var x = pagination(settings.page, noOfPages);
          for (var p = 0; p &lt; x.length; p++) {
            var linkText = ((x[p] !== '...') &amp;&amp; (x[p] !== settings.page)) ? '&lt;a href="##" class="us_changePage" data-page="' + x[p] + '"&gt;' + x[p] + '&lt;/a&gt;&amp;nbsp;&amp;nbsp;' : x[p] + '&amp;nbsp;&amp;nbsp;';
            $('#us_Paging').append(linkText);
          }
          //add the click event to the buttons with the class us_changePage
          $(".us_changePage").on("click", function(event) {
            event.preventDefault();
            var nextPage = $(this).data('page');
            settings.page = nextPage;
            var nextURL = getSearchURL(settings.searchTerm, nextPage);
            searchAndPopulate(nextURL, settings.apiClientId);
          });
        }
      }
    }
  }
</code></pre>

<p>Use <code>.then()</code> instead of <code>.done()</code>. Handle errors</p>

<pre><code>  function searchAndPopulate(url, key) {
    callUnsplash(url, key)
    .then(populateImages, handleError);
  }
</code></pre>

<blockquote>
  <p>Have I bound the click event handlers correctly in the plugin; i.e.</p>
  
  <p><code>$("#us_SearchBtn").bind("click", function(e) {</code></p>
</blockquote>

<p>Substitute <code>.on()</code> for <code>.bind()</code> which is deprecated</p>

<blockquote>
  <p>Also if you have any suggestions on how to run a different callback
  depending on which "Choose background" link is clicked, I'd be really
  grateful.</p>
</blockquote>

<p>Not certain what is meant by "a different callback". If a different handle for the <code>click</code> event is meant logic can be included in the function passed to <code>.on()</code> where the <code>data-photoid="${image.id}"</code> of the clicked element can be evaluated to perform different tasks based on the <code>image.id</code> value. For example</p>

<pre><code>if ($(this).data().photoid === "abc") {
  // do stuff
}
</code></pre>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="false" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>(function($) {
  /*
   *  unsplash
   * 
   *  jQuery plugin to manage interaction with unsplash API
   * 
   *
   */
  $.fn.unsplash = function(options, cbOnImageSelect) {
    // defaults for the plugin, client ID can be provided on a init by init basis so that each client can have their own CLIENTID and therefore won't count towards
    // a common limit
    var defaults = {
      apiRootURL: "https://api.unsplash.com", // root for API, should not need to be overridden                                                               
      searchTerm: '', // the search term the results will be relating to
      imagesToReturn: 6, // number of rows to output per page of results
      page: 1, // page of search results to display, will be 1 to start
      randomImagesToShow: 3, // number of images to display at the outset, 0 for none
      apiClientId: '9371fe014143706ce089532bc0149f75e5672f1a07acdd1599d42461c73e0707', // can be overridden for a client id per account
      orientation: 'landscape', // orientation of images to query for [landscape | portrait | squarish]
      source: '', // where the plugin is being called from
      cbOnImageSelect: $.noop
    };

    // images = [];
    var totalImageCount = 0;
    var selectedImage = {};

    function handleError(error) {
      alert(error.message)
    }

    var settings = $.extend({}, defaults, options);

    //return to avoid breaking chaining
    return this.each(function() {
      //clear any content in the unsplash search
      $('#unsplashSearch').empty()
        //add a search form
        .append('&lt;div class="in_searchBox"&gt;&lt;input type="text" name="us_searchTerm" id="us_searchTerm" value="" maxlength="50"&gt;&lt;button type="submit" name="us_SearchBtn" id="us_SearchBtn"&gt;&lt;span&gt;Search&lt;/span&gt;&lt;/button&gt;&lt;/div&gt;');
      //bind the search handler event to the button in the form
      $("#us_SearchBtn").on("click", function(e) {
        e.preventDefault();
        //reset page back to 1 to avoid a new search starting on the wrong page.
        settings.page = 1;
        //set the settings search term to the new value
        settings.searchTerm = $('#us_searchTerm').val();
        searchAndPopulate(getSearchURL(settings.searchTerm, 1), settings.apiClientId);
      });
      $('#unsplashSearch').append('&lt;ul id="imageList" class="horizontalList"&gt;&lt;/ul&gt;' +
        '&lt;div id="us_Paging" style="text-align: center;"&gt;&lt;/div&gt;');
      if (settings.randomImagesToShow &gt; 0) {
        //build up the request url based on whether the search term is null or not...
        searchAndPopulate((!settings.searchTerm) ? getRandomURL(settings.randomImagesToShow) : getSearchURL(settings.searchTerm, 1), settings.apiClientId);
      } else {
        $('#us_Paging').hide();
      }

      //private functions
      function callUnsplash(url) {
        return $.ajax({
          url: url,
          dataType: 'json',
          method: 'GET',
          beforeSend: function(xhr) {
            xhr.setRequestHeader('Authorization', 'Client-ID ' + settings.apiClientId);
            xhr.setRequestHeader('Accept-Version', 'v1');
          },
          success: function(json) {
            totalImageCount = (json.hasOwnProperty('total')) ? json.total : settings.imagesToReturn;
            return json.hasOwnProperty('results') ? json.results : json;
          },
          error: function(xhr, status, error) {
            throw new Error("Sorry, something went wrong (" + error + " " + xhr.status + " " + xhr.statusText + ")");
          }
        });
      }

      function searchAndPopulate(url, key) {
        callUnsplash(url, key)
          .then(populateImages, handleError);
      }

      function populateImages(images) {
        if (images.total == 0) {} else {
          //clear any existing images in the list
          $('#imageList').empty()
            .append($.map(images, function(image, index) {
              return `&lt;li&gt;&lt;a href="#" class="splashImage" data-photoid="${image.id}"&gt;&lt;div class="in_max200"&gt;&lt;img src='${image.urls.thumb}' class='in_singlepic in_max200'&gt;&lt;/div&gt;&lt;/a&gt;&lt;/li&gt;`;
            }));
          //bind the callback function to the splashImage so it is called when clicked. if no callback is provided, then the default will be performed
          $(".splashImage").on("click", function(event) {
            event.preventDefault();
            if (typeof settings.cbOnImageSelect == 'function') {
              var photoId = $(this).data('photoid');
              var url = getImageURL(photoId);
              callUnsplash(url).then(function(i) {
                settings.cbOnImageSelect.call(this, i);
              }, handleError);
            }
          });
          if (totalImageCount &lt;= settings.imagesToReturn) {
            $('#us_Paging').hide();
          } else {
            $('#us_Paging').empty().show();
            if (totalImageCount &gt; settings.imagesToReturn) {
              var noOfPages = Math.ceil(totalImageCount / settings.imagesToReturn);
              var x = pagination(settings.page, noOfPages);
              for (var p = 0; p &lt; x.length; p++) {
                var linkText = ((x[p] !== '...') &amp;&amp; (x[p] !== settings.page)) ? '&lt;a href="##" class="us_changePage" data-page="' + x[p] + '"&gt;' + x[p] + '&lt;/a&gt;&amp;nbsp;&amp;nbsp;' : x[p] + '&amp;nbsp;&amp;nbsp;';
                $('#us_Paging').append(linkText);
              }
              //add the click event to the buttons with the class us_changePage
              $(".us_changePage").on("click", function(event) {
                event.preventDefault();
                var nextPage = $(this).data('page');
                settings.page = nextPage;
                var nextURL = getSearchURL(settings.searchTerm, nextPage);
                searchAndPopulate(nextURL, settings.apiClientId);
              });
            }
          }
        }
      }

      function getSearchURL(searchTerm, pageToShow) {
        return settings.apiRootURL + '/search/photos?page=' + pageToShow + '&amp;per_page=' + settings.imagesToReturn + '&amp;orientation=' + settings.orientation + '&amp;query=' + searchTerm;
      }

      function getRandomURL(numberOfImages) {
        return settings.apiRootURL + '/photos/random?count=' + numberOfImages + '&amp;orientation=' + settings.orientation;
      }

      function getImageURL(photo_id) {
        return settings.apiRootURL + '/photos/' + photo_id;
      }

      function pagination(c, m) {
        var current = c,
          last = m,
          delta = 2,
          left = current - delta,
          right = current + delta + 1,
          range = [],
          rangeWithDots = [],
          l;
        for (var i = 1; i &lt;= last; i++) {
          if (i == 1 || i == last || i &gt;= left &amp;&amp; i &lt; right) {
            range.push(i);
          }
        }
        for (var i of range) {
          if (l) {
            if (i - l === 2) {
              rangeWithDots.push(l + 1);
            } else if (i - l !== 1) {
              rangeWithDots.push('...');
            }
          }
          rangeWithDots.push(i);
          l = i;
        }
        return rangeWithDots;
      }
    });
  };
})(jQuery);</code></pre>
</div>
</div>


<p><a href="https://jsfiddle.net/fwa7mh0d/6/" rel="nofollow noreferrer">jsfiddle</a> </p>
    </div>