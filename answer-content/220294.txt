<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Because I see that i get a lot of comments about the Row pointers , i changed it using smart pointers and more c++ 11. I am posting the hole code if anyone would like to use it. I made some of the changes proposed but not all of the proposed for example I was not able to make a factory for the setAttributes. And if anyone could give me a hint how to get rid of the if statements in the factory for the production of the IProducts i would appreciate it. And of course any other advice's would be welcome</p>

<p>User.h</p>

<pre><code>#pragma once
#include"Products.h"

class IUser 
{
public:
   IUser(const std::string myName, const double myPassword) { name = myName, password = myPassword; }
   const std::string getName() const
   {
       return name;
   }

   const double getPassword() const
   {
       return password;
   }
protected:
   std::string name;
   double password;
};

class Client : public IUser
{
public:
   Client(const std::string myName, double passWord) :IUser(myName, passWord) {};
   void buyProduct(std::shared_ptr&lt;IProducts&gt; currentProduct) { boughtProducts.push_back(currentProduct); }
   void checkOut() {
       for (size_t i = 0; i &lt; boughtProducts.size(); ++i)
       { 
           std::cout &lt;&lt; "Your " &lt;&lt; i + 1 &lt;&lt; " bought product is " &lt;&lt; boughtProducts[i]-&gt;getProductName() &lt;&lt; " with the above charecteristics " &lt;&lt; std::endl;
           boughtProducts[i]-&gt;Display();
       }
   }
private:
   std::vector&lt;std::shared_ptr&lt;IProducts&gt;&gt; boughtProducts;

};
</code></pre>

<p>Products.h</p>

<pre><code>#pragma once

#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;vector&gt;

// Create an Interface for Product Objects
class IProducts
{
public:
    // Virtual Function to get the name of the product implementing the interface
     virtual   const std::string getProductName() const  = 0;
    // Virtual Function to Display  the names of all components of a class implementing the interface
    virtual void DisplayComponents() = 0;
    // Virtual Function to display the values of the components of a class implementing the interface 
    virtual void Display() = 0;
    // Virtual Function to set the components to desired values 
    virtual void setAttributes() = 0;
};

// Concretion of Product Interface
class PC_Towers final : public IProducts
{
public:
    // Function to set the member variables of the class
    void setAttributes ()
    {

            std::cout &lt;&lt; "Please enter Memory size for PC_Tower in GB : ";
            // MAke sure that the input in numeric
            while(!(std::cin &gt;&gt; this-&gt;Memory))
            { 
                std::cout &lt;&lt; "All input's must be numeric " &lt;&lt; std::endl;

                break;
            }

            std::cout &lt;&lt; "Please enter CPU size for PC_Tower in GHz : ";
            while (!(std::cin &gt;&gt; this-&gt;CPU))
            {

                std::cout &lt;&lt; "All input's must be numeric " &lt;&lt; std::endl;
                break;
            };




    }
    // Function to get the Name of the product
    const std::string getProductName() const { return this-&gt;productName; }
    // Function to display the names of the components of the class
    void DisplayComponents() { std::cout&lt;&lt;"The Tower is composed from : 1) Memory  2) CPU " &lt;&lt; std::endl; }
    // Function to display the values of the member variables
    void Display()
        {
        std::cout &lt;&lt; "Your Tower has a Memory of " &lt;&lt; this-&gt;Memory &lt;&lt; " GB and a CPU of " &lt;&lt; this-&gt;CPU &lt;&lt; " GHZ" &lt;&lt; std::endl;


        }


private:
    double Memory;
    double CPU;
    const std::string productName = "PC_Tower";
};

// Another concrition on the IProduct interface the same as the one before
class PC_Screen : public IProducts
{
public:
    void setAttributes () 
    {


        std::cout &lt;&lt; "Please enter size of your Screen in inches: " ;
        while (!(std::cin &gt;&gt; this-&gt;Size_inch))
        {
            std::cout &lt;&lt; "All input's must be numeric " &lt;&lt; std::endl;
            break;


        }



    }
    const std::string getProductName() const { return this-&gt;productName; }
    void DisplayComponents() { std::cout &lt;&lt; "The screen is composed from a screen measured in inches " &lt;&lt; std::endl; }
    void Display()
    {
        std::cout &lt;&lt; "Your screen is " &lt;&lt; this-&gt;Size_inch &lt;&lt; " inches " &lt;&lt; std::endl;


    }

private:
    double Size_inch;
    const std::string productName = "PC_Screen";
};
// Concrition of IProducts
class Personal_Computer : public IProducts
{
public:
    // Function to set the attributes of the member variable. In this case the function works as a decorator
    // arround the setAttributes of the IProduct adding functionalities to it
    void setAttributes() 
    {
        Tower.setAttributes();
        Screen.setAttributes();

        std::cout &lt;&lt; " Please enter size of your HardDics in GB : " ;
        while (!(std::cin &gt;&gt; this-&gt;HardDisc))
        {
            std::cout &lt;&lt; "All input's must be numeric " &lt;&lt; std::endl;
            break;
        }



    }
    const std::string getProductName() const { return this-&gt;productName; }
    // Decorate the DisplayComponents() and add functionalities
    void DisplayComponents() 
    { 
        std::cout &lt;&lt; "Personal Computer is composed from: 1) Tower 2) PC Screen 3) Hard Disc" &lt;&lt; std::endl;
        Tower.DisplayComponents();
        Screen.DisplayComponents();

    }
    // Decorate the Display() and add functionalities
    void Display()
    {
        Tower.Display();
        Screen.Display();
        std::cout &lt;&lt; "Your Hard Disc has size : " &lt;&lt; this-&gt;HardDisc &lt;&lt; " GB " &lt;&lt; std::endl;


    }


private:
    PC_Towers Tower;
    PC_Screen Screen;
    double HardDisc;
    const std::string productName = "Personal_Computer";
};

// Concretion of Iproduct
class Work_Station : public IProducts
{
public:
    void setAttributes()
    {
        Computer.setAttributes();

        std::cout &lt;&lt; "Please Enter your Operating System " ;
        while (!(std::cin &gt;&gt; this-&gt;OperatingSystem))
        {
            std::cout &lt;&lt; "Operating system must be string " &lt;&lt; std::endl;
            break;
        }


    }
    const std::string getProductName() const  { return this-&gt;productName; }
    void DisplayComponents()
    {
        std::cout &lt;&lt; "Work station is composed from : 1) Personal computer 2) Operating System (Linux or Windows) " &lt;&lt; std::endl;
        Computer.DisplayComponents();
    }
    void Display()
    {
        Computer.Display();
        std::cout &lt;&lt; "Your Operating System is :" &lt;&lt; this-&gt;OperatingSystem &lt;&lt; std::endl;

    }

private:
    Personal_Computer Computer;
    std::string OperatingSystem;
    std::string productName = "WorkStation";
};



</code></pre>

<p>ProductsFactory.h</p>

<pre><code>#pragma once
#include"Products.h"

class IProductFactory
{
public:
    virtual std::shared_ptr&lt;IProducts&gt; createProduct(std::string) = 0;

};
// Concretion of Interface for IProduct creation. This Factory produces IProducts based on the an string input 
// to the function ( like a user input)
class UserInputFactoryProduct : public IProductFactory
{
public:

    std::shared_ptr&lt;IProducts&gt; createProduct(std::string myProduct)
    {
        std::shared_ptr&lt;IProducts&gt; product;
        if (myProduct == "PC_Tower")
            product = std::make_shared&lt;PC_Towers&gt;();
        else if (myProduct == "PC_Screen")
            product = std::make_shared&lt;PC_Screen&gt;();
        else if (myProduct == "Personal_Computer")
            product = std::make_shared&lt;Personal_Computer&gt;();
        else if (myProduct == "WorkStation")
            product = std::make_shared&lt;Work_Station&gt;();
        else
            product = nullptr;

        return product;

    }


};


</code></pre>

<p>e_shop.h</p>

<pre><code>#pragma once
#include"Products.h"

// Class e-shop to add and display all the products of the shop
class e_shop
{
public:
    // Function to add products to the shop
    void addProduct(std::shared_ptr&lt;IProducts&gt;newProduct) { this-&gt;allProducts.push_back(newProduct); }
    // Function to display all the products of the shop
    void desplayAllProducts()
    {

        for (auto e:allProducts)
            std::cout &lt;&lt; e-&gt;getProductName() &lt;&lt; std::endl;
    }
private:
    // vector to keep all the products of the shop
    std::vector&lt; std::shared_ptr&lt;IProducts&gt; &gt; allProducts;
};

</code></pre>

<p>main.cpp</p>

<pre><code>#include "Products.h"
#include "e_shop.h"
#include"ProductsFactory.h"
#include "User.h"
int main()
{
    Client first("Aris", 12345);
    // create some products
    std::shared_ptr&lt; IProducts &gt; Product1 = std::make_shared&lt;PC_Towers&gt;();
    std::shared_ptr&lt; IProducts &gt; Product2 = std::make_shared&lt;PC_Screen&gt;();
    std::shared_ptr&lt; IProducts &gt; Product3 = std::make_shared&lt;Personal_Computer&gt;();
    std::shared_ptr&lt; IProducts &gt; Product4 = std::make_shared&lt;Work_Station&gt;();
    // create an e-shop and add the products created
    e_shop myEshop;
    myEshop.addProduct(Product1);
    myEshop.addProduct(Product2);
    myEshop.addProduct(Product3);
    myEshop.addProduct(Product4);
    myEshop.desplayAllProducts();
    std::string finish;

    while(finish != "N")
    { 
    std::string choosedProduct;
    std::cout &lt;&lt; std::endl;
    std::shared_ptr&lt;IProducts&gt; myProduct = nullptr;
    UserInputFactoryProduct ProductFactory;

    // choose a product and use factory to create the object based on the user input
    while (myProduct == nullptr)
    {
        std::cout &lt;&lt; "Chose one of the above products : ";
        std::cin &gt;&gt; choosedProduct;

        myProduct = ProductFactory.createProduct(choosedProduct);

    } ;


    // display all the attributes of the product
    myProduct-&gt;DisplayComponents();
    // let the user to add values to components
    myProduct-&gt;setAttributes();
    // display the product ith the values of the user
    first.buyProduct(myProduct);
    std::cout &lt;&lt; "Do you want to continue: Y or N :" ;
    std::cin &gt;&gt; finish;
    }
    std::cout &lt;&lt; first.getName() &lt;&lt; " bought :" &lt;&lt; std::endl;
    first.checkOut();
    system("pause");
}

</code></pre>
    </div>