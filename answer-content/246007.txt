<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The first thing that I notice when looking at the code is something that directly stings in my eyes: Formatting. The code is is not formatted according to the SUN or Google Code Conventions (which are largely identical). The opening curly braces are misplaced, and the <code>else</code> is misplaced. Also, the indentation is inconsistent. Some blocks are indented 2, some 3, some 4 spaces. The visual appearance of Java code should be an indentation of 4 spaces.</p>
<p>The second thing which I noticed right away is that there are no tests.</p>
<p>The third thing is that your implementation of Game of Life is limited to a finite universe: the width and height of the universe must be known upfront. It is possible to create an implementation that supports an infinite universe. And if you like Game of Life (I do), you may find it a very interesting and enlightening challenge to attempt yourself at such an implementation.</p>
<p>Use descriptive names for variables. In your code, unless <code>i</code> really is just an anonymous counter, it's better to use <code>x</code> and <code>y</code> or <code>row</code> and <code>col</code>. And these names should be consistent throughout the code. I see sometimes <code>i</code> and <code>j</code>, sometimes <code>p</code> and <code>m</code>, sometimes <code>row</code> and <code>column</code> in your code.</p>
<p>Same goes for <code>width</code> and <code>height</code>, for which I sometimes see <code>N</code> and <code>M</code> instead.</p>
<p>The <code>this</code> qualifier should be omitted unless it is necessary to resolve ambiguity or otherwise communicate intent.</p>
<p>Your "main" class is a component that <code>extends JFrame</code>. I know that code examples in books and tutorials are full of examples like that. But this is bad practice and not proper OO: It violates the LSP (Liskov Substitution Principle; Barbara Liskov justifiedly received a Turing award for coming up with this) because your main class cannot be reused the same way as a JFrame. In layman's terms, subclasses should always represent adequate substitutes for their superclasses. And it is not necessary at all to <code>extend JFrame</code>. You can just fine do something like <code>JFrame frame = new JFrame()</code> and then call its methods.</p>
<p>Besides, <code>GameOfLife</code> is a bad name for something that <code>extends JFrame</code>. It should be possible to make an educated guess about the class hierarchy from the class name. The class name <code>GameOfLife</code> has nothing in it that suggests that it is a <code>JFrame</code>, nor anything that suggests that this is the class with the <code>main()</code> method.</p>
<p>Same goes for <code>Cells</code>. The name <code>Cells</code> does not suggest to the reader that this class is a UI component.</p>
<p>The superclass for <code>Cells</code> should be <code>JComponent</code>, not <code>JPanel</code>. The purpose of a <code>JPanel</code> is that you can set its layout manager and add components. Using <code>JPanel</code> instead of <code>JComponent</code> is again an LSP violation.</p>
<p>You could use more and thus smaller methods. This would allow you to have less duplication, more code reuse, and thus also fewer errors. For example, look at the constructor <code>Universe()</code>. It includes a section of code that initializes the entire universe with random bits. The method <code>reset()</code> does the same. You could extract this into a method <code>randomize()</code>, like this:</p>
<pre><code>    public void randomize(int height, int width, int seed) {
        for (int y = 0; y &lt; h; y++) {
            for (int x = 0; x &lt; h; x++) {
                currentGeneration[y][x] = random.nextBoolean();
            }
        }
    }
</code></pre>
<p>You could call this <code>randomize()</code> method from both, <code>reset()</code> and <code>Universe()</code>.</p>
<p>You might want to prefer method references over anonymous lambdas if you do not need Java's half-assed closures (access to variables of the enclosing method; in Java half-assed because they must be effectively <code>final</code>). This makes your code cleaner.</p>
<p>Fields which are initialized with a field initializer or with an assignment in the constructor but never assigned again should be <code>final</code>. If you want to write really good code, then most of your data will be <code>final</code>.</p>
<p><code>calculateNeighbors()</code> is always called with <code>currentGrid</code> as its first argument. Remove the argument and make <code>calculateNeighbors()</code> an instance method. Same for <code>calculateAlive()</code>.</p>
<p>In <code>calculateNeighbors()</code>, the code</p>
<pre><code>            if (r &lt; 0)
                r = N - 1;
            if (r &gt; N - 1)
                r = 0;
            if (c &lt; 0)
                c = M - 1;
            if (c &gt; M - 1)
                c = 0;
</code></pre>
<p>can be simplified significantly:</p>
<pre><code>            r = (r + N) % N;
            c = (c + M) % M;
</code></pre>
<p><em>(x + r) % r</em> is the general formula to ensure for <em>x ∈ ℤ, r ∈ ℕ</em> that <em>0 &lt;= x &lt; r</em>.
Besides, this simplification will ensure the expected (torus universe) behavior in case you want to support a ruleset with a neighbor distance &gt; 1.</p>
<p>In the methods <code>generateNthGeneration()</code>, <code>X</code> (uppercase) is used as a parameter name. This is misleading: A single uppercase letter is expected to be a type or a constant, but not a (in this case parameter) variable.</p>
<p>In your <code>repaint</code>, you have this code:</p>
<pre><code>cells.grid = universe.getCurrentGeneration();
</code></pre>
<p>The class <code>Cells</code> should be able to render the correct generation without having another class (<code>GameOfLife</code>) helping with it. For that, class <code>Cells</code> should directly refer to class <code>Universe</code>, not its <code>grid[][]</code>.</p>
<p>Overall, look out for duplication and remove it.</p>
<p>Also, look out for misplaced responsibility. You can detect misplaced responsibility by using <code>.</code>, especially when using it multiple times. There is a princple called <em>Law of Demeter</em> that can help you with identifying misplaced responsibility. You will notice that when you fix misplaced responsibility by moving things in the right places, that lines become shorter.</p>
<p>Remove unused code. Method <code>getNextGeneration()</code> is never used.</p>
<p>In method <code>generateNextGeneration()</code>, you may want to use a separate class to determine whether a cell survives or is born. This would allow you to easily implement other rulesets. Conway's Game of Life is B3/S23. Another popular ruleset is Highlife, B36/S23. The design pattern to do that is called <em>Strategy</em>.</p>
    </div>