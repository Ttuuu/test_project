<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>My observations...</p>

<p><strong>Leave generated classes alone</strong> You have modified <code>Contracts</code> by adding a custom constructor to it. You'll loose this changes when you regenerate the model. This class is <code>partial</code> not without a purpose. If you want to customize it then you should create another file in the same project and within the same namespace and define your own <code>partial class Contract</code>. This one will survive the model generation process.</p>

<p>As far as the changes are concerned initiailzing <code>Id</code> to <code>0</code> is unnecessary because the default value for <code>int</code>s is already <code>0</code>.</p>

<p><strong>Do not initialize ICollection with HashSet</strong> Initializing the other two collections with <code>HashSet</code>s is something you should definitely document. I usually wouldn't expect these <code>ICollection</code>s to be sets and when they are retrieved from the database the most probably aren't so your model behaves inconsistently. It has different functionality when created with <code>new Contracts</code> because you can only add unique items to it and allows adding non-unique items when retrieved with linq. If these fields are always sets then their type should most probably be <code>ISet</code> but I'm not really sure it is supported by Entity Framework. Anyways, this should be documented somewhere and be consistent.</p>

<p><strong>Initialize either everything or nothing</strong> The implementation of <code>ActCompletion</code> is also inconsistent as it initializes only <code>Dates</code> to an instance and leaves <code>Contract</code> as <code>null</code>. I find this is strange and should be documented if it serves any purpose.</p>

<p><strong>Change which classes implement <code>IDocument</code></strong> Both classes <code>DocumentContract</code> and <code>DocumentActCompletion</code> redirect the call to <code>Export</code> to another <code>Export</code>. This looks like the other two classes <code>ModelContract</code> and <code>ModelActCompletion</code> should implement this interface. They already can do what the interfaces specifies. There is no need to create a wrapper that doesn't add anything.</p>

<p><strong><code>ConverterBase</code> should have a more specific name</strong> Seeing the code it's difficult to figure out what that converter is for. I see it does something with dictionaries but I'm not sure what. You should use names that are clear about the purpose of a class. This one looks rather like a factory but it's hard to say. It even uses the json-serializer so maybe it's even some serializer... mhmm, who knows.</p>
    </div>