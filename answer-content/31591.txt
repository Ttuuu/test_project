<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The code can be simplified somewhat:</p>

<pre><code>private boolean isPortInUse(String host, int port) {
  // Assume no connection is possible.
  boolean result = false;

  try {
    (new Socket(host, port)).close();
    result = true;
  }
  catch(SocketException e) {
    // Could not connect.
  }

  return result;
}
</code></pre>

<p>Note, however, that if you want to check for an available port, that could be reflected in the method name:</p>

<pre><code>private boolean availablePort(String host, int port) {
  // Assume port is available.
  boolean result = true;

  try {
    (new Socket(host, port)).close();

    // Successful connection means the port is taken.
    result = false;
  }
  catch(SocketException e) {
    // Could not connect.
  }

  return result;
}
</code></pre>

<p>Neither approaches employ object-oriented programming (OOP) techniques, though. In OOP, behaviour (determining port availability) is kept with the object that contains the attributes. For example:</p>

<pre><code>public SocketAnalyzer extends java.net.Socket {
  public boolean isPortAvailable() {
    // ... code here ...
  }
}
</code></pre>

<p>Now the initial method simplifies to:</p>

<pre><code>private boolean availablePort(String host, int port) {
  return (new SocketAnalyzer(host, port)).isPortAvailable();
}
</code></pre>

<p>And that allows the "availablePort" method to be removed completely, if desired:</p>

<pre><code>if( (new SocketAnalyzer(host, port)).isPortAvailable() ) {
  // Launch the server socket on 'port'!
}
</code></pre>

<p>This promotes re-use, and shows one more idea: you could extend <code>ServerSocket</code> instead! The code would become:</p>

<pre><code>// The constructor would have to bind to the host/port combination...
// This is arguably poor form as the constructor really shouldn't do anything.
// You could, instead, use the superclass' constructor and then call bind,
// but for the purposes of this example, the idea is key: inherit.
ServerSocketAnalyzer ssa = new ServerSocketAnalyzer( host, port );

if( ssa.isPortAvailable() ) {
  // Code to use the server socket...
  Socket s = ssa.accept();
}
</code></pre>

<p>Clean and simple, but there's a race condition. In between the time it takes to determine whether the port is available and the server starts accepting connections to that port, another service may have started to commandeer the port.</p>

<p>The best solution is to allow the server to pick an available port using an atomic operation, as per <a href="https://codereview.stackexchange.com/a/31594/20611">the other answer</a>.</p>
    </div>