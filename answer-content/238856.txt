<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If you want a cleaner version of dynamic/ExpandoObject, I would go step by step and fix what you don't like. Let's say you want to do something close to a Javascript-like syntax:</p>

<pre><code>obj = {};
obj.a = 123;
obj.b = "message";
obj.c = [ 456, "something", {} ];
obj.d = {
    x: 50,
    y: [ "a", "b", "c" ],
    z: null
};

obj.e = "eeee";
obj.d.z = { z: "zz" };
obj.d.y.Add("d");
</code></pre>

<p>Converting this to the equivalent syntax using out-of-the-box dynamic/ExpandoObject:</p>

<pre><code>dynamic obj = new ExpandoObject();
obj.a = 123;
obj.b = "message";
obj.c = new List&lt;dynamic&gt; { 456, "something", new ExpandoObject() };
obj.d = new ExpandoObject();
obj.d.x = 50;
obj.d.y = new List&lt;dynamic&gt; { "a", "b", "c" };
obj.d.z = null;

obj.e = "eeee";
obj.d.z = new ExpandoObject();
obj.d.z.z = "zz";
obj.d.y.Add("d");
</code></pre>

<p>The first major issue with the syntax is that there is no shortcut syntax for creating an ExpandoObject and giving it properties like a normal object:</p>

<pre><code>// Can't do this...
obj.d = new ExpandoObject()
{ 
    x = 50,
    y = new List&lt;dynamic&gt; { "a", "b", "c" },
    z = null
}
</code></pre>

<p>One attempt would be to create and then convert an anonymous object (like you did in your code), however this requires reflection which is slow and can bring on other challenges. Instead, I think the cleanest solution would be to create a helper for creating an ExpandoObject and initializing it in some way, before returning it:</p>

<pre><code>public static class Dynamic
{
    public static dynamic Object(Action&lt;dynamic&gt; init)
    {
        var obj = new ExpandoObject();
        init(obj);
        return obj;
    }
}
</code></pre>

<p>This makes inline objects much nicer:</p>

<pre><code>dynamic obj = new ExpandoObject();
obj.a = 123;
obj.b = "message";
obj.c = new List&lt;dynamic&gt; { 456, "something", new ExpandoObject() };
obj.d = Dynamic.Object(o =&gt;
{
    o.x = 50;
    o.y = new List&lt;dynamic&gt; { "a", "b", "c" };
    o.z = null;
});

obj.e = "eeee";
obj.d.z = Dynamic.Object(o =&gt; o.z = "zz");
obj.d.y.Add("d");
</code></pre>

<p>From here, the syntax is very close, and I would only add a few things to make things more consistent in naming/style:</p>

<pre><code>public static class Dynamic
{
    public static dynamic Object(Action&lt;dynamic&gt; init)
    {
        var obj = new ExpandoObject();
        init(obj);
        return obj;
    }

    public static dynamic Object() =&gt; Object(_ =&gt; {});

    public static List&lt;dynamic&gt; List(params dynamic[] items) =&gt; items.ToList();
}

</code></pre>

<p>Usage:</p>

<pre><code>dynamic obj = Dynamic.Object();
obj.a = 123;
obj.b = "message";
obj.c = Dynamic.List(456, "something", Dynamic.Object());
obj.d = Dynamic.Object(o =&gt;
{
    o.x = 50;
    o.y = Dynamic.List("a", "b", "c");
    o.z = null;
});

obj.e = "eeee";
obj.d.z = Dynamic.Object(o =&gt; o.z = "zz");
obj.d.y.Add("d");

Console.WriteLine(Newtonsoft.Json.JsonConvert.SerializeObject(obj,
    Newtonsoft.Json.Formatting.Indented));
</code></pre>

<p>Output:</p>

<pre><code>{
  "a": 123,
  "b": "message",
  "c": [
    456,
    "something",
    {}
  ],
  "d": {
    "x": 50,
    "y": [
      "a",
      "b",
      "c",
      "d"
    ],
    "z": {
      "z": "zz"
    }
  },
  "e": "eeee"
}
</code></pre>

<p>There are other strategies you could use to implement Dynamic.Object and the other helpers, but they would all depend on your own personal style/preferences. Let me know if there is some key functionality that this is missing, and I'd be happy to add in a few more helpers.</p>
    </div>