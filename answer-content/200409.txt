<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Answering your question by number</p>

<p>1) From your example file one could think that <code>line.startswith('0')</code> is sufficient. You could also try to convert the hex number <code>int(line.split()[0],16)</code> and catch for <code>ValueError</code>. But unless there is reason to avoid regex you can stick to it.</p>

<p>2) Logikables answer shows how to correctly use nested if-else instead of combinations of nested conditions in an elif rake. However even if you work line by line you should separate the tasks/stages you perform. The stages are reading, cleaning/decoding and interpreting/processing. your control flow should look like</p>

<pre><code>for line in f:

    # cleaning and decoding file format
    if is_comment(line):
        continue
    store(buffer, line)

    # interpret/process
    if is_complete(buffer):
        interpret(buffer)
        clear(buffer)
</code></pre>

<p>thus resulting in something like</p>

<pre><code>buffer = []
for line in f:

    line = line.strip()

    if line.startswith('#'): # ignore comments
        continue

    if line.endswith('\\'):
        buffer.append(line[:-2])
    else:
        buffer.append(line)

    if not line.endswith('\\'):
        event_rule_match = re.match(REGEX, ' '.join(buffer))
        if event_rule_match:
            yield event_rule_match.group(1), event_rule_match.group(2)
        else:
            # error handling or logging?
            pass
        buffer = []
</code></pre>

<p>this saves tons of error prone code duplication. Do not work on buffer in some cases and on line in others. always work on buffer. do not define re patterns multiple times. all this slight modifications and special cases have to be tested. avoid all thes flags and conditional buffer cleanups. </p>

<p>Code with duplication is unmaintainable and untestable. Do not repeat yourself, neither code nor regex patterns, nor numeric constants. If you cannot avoid to reuse code in other control blocks define functions and patterns outside and use those.</p>

<p>3a) Yes, you can avoid reading line by line. But don't dare to do so, seriously. What would be better on reading the whole file? nothing. What would be worse? You lose the ability to process big files. Get used to thinking of processing endless streams, this is superior in any case.</p>
    </div>