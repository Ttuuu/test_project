<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your approach is completely wrong.</p>

<h2>There is a difference between <em>escaping</em> and <em>validation</em></h2>

<p><strong>Validation</strong> is the act of making sure a piece of input conforms to certain rules (be it logical, or business rules). It <strong><em>should not be used for security</em></strong>. You can't catch all possible edge cases with a blacklist, don't try.</p>

<p><strong>Escaping</strong> (or <strong>Sanitization</strong>) is the act of escaping characters with special meaning and replacing them with another character or a string that will have the meaning of the literal character in <strong>the target context</strong> (for example, replacing <code>&lt;</code> with <code>&amp;lt;</code> in HTML). Escaping can and should be used for making sure nothing with special meaning enters the target context (HTML, MySQL query, JavaScript, etc).</p>

<hr>

<p>In your case, the context is a MySQL query, you're trying to prevent SQL injection. The solution to SQL injection is <em>not</em> validation. It's <strong>prepared statements</strong>. So:</p>

<pre><code>$pdo = //Instantiate PDO connection.
$stmt = $pdo-&gt;prepare("INSERT INTO fonts(id) VALUES (:id)");
$stmt-&gt;bindValue(":id", "1; DROP TABLE fonts -- "); //Unsafe input
$stmt-&gt;execute(); //Will not drop the table. No results will be returned.
</code></pre>

<p>With an insert, the entire string <code>1; DROP TABLE fonts --</code> will be inserted.</p>

<p>Sometime in the future (when you try to <em>fetch</em> the font from the database), and before you <strong>output it into CSS</strong>, you'll want to escape the string <strong>for this new context</strong>. CSS escaping is something that hasn't a native PHP API, but there are probably libraries around.</p>
    </div>