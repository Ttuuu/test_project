<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In <code>getOverlaps</code> I think you should find the <code>gcd(small, large)</code> and divide with that instead of testing for <code>large % small &lt;&gt; 0</code> (if I understand the project right).</p>

<p>E.g.: <code>spokes 12 and 15 -&gt; gcd = 3 -&gt; 180 / 3 = 60 rotations -&gt; rotation angle: 360 / 60 = 6</code></p>

<hr>

<p>IMO you overdo the use of the <code>|&gt;</code> operator a little:</p>

<blockquote>
<pre><code>let input = () |&gt; Console.ReadLine
if input |&gt; validate then
</code></pre>
</blockquote>

<p>To me it is more clear and straight forward to write:</p>

<pre><code>let input = Console.ReadLine()
if validate input then
  ...
</code></pre>

<hr>

<p>All in all it's definitely better and cleaner than the first version, but I still think it could be more stringent in the workflow.</p>

<p>For instance:</p>

<p>The <code>main</code> function could be be split into:</p>

<pre><code>let processInfo = promptForInput()

prepareOutputDirectory processInfo.OutputPath
processRotations processInfo
</code></pre>

<p>All the exiting stuff are hidden in <code>Graphics.saveImages</code>. I think I would "revert" the process/workflow, so that it is more clear what the algorithm and what the output are - for instance:</p>

<pre><code>let processRotations processInfo =
    let rec processRotation info =
        if info.RotationIndex &lt; info.Rotations then
            createImage info
            processRotation (rotate info)
        else
            postProcess info  // create gif, print info etc...

    processRotation processInfo
</code></pre>

<p>The function <code>rotate info</code> handles the rotation of one of the shapes and returns a new instance of processInfo that holds that new state state plus all the other (input) information</p>

<p>I hope this skeleton makes any sense...</p>
    </div>