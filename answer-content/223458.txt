<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First of all I would suggest you changing <code>PairCurrency</code> constructor from</p>

<pre><code>class PairCurrency:
    def __init__(self, name):
        self.name = name
</code></pre>

<p>to</p>

<pre><code>class PairCurrency:
    def __init__(self, name, ratio):
         self.name = name
         self.ratio
</code></pre>

<p>There is literally no reason to make it different. This is not a functional class but rather DataStructure.</p>

<p>It's also much easier to create instances with</p>

<pre><code>us = PairCurrency('US', 3)
</code></pre>

<p>than</p>

<pre><code>us = PairCurrency('US')
us.setRate(3)
</code></pre>

<p>As stated above, <code>__eq__</code> method is wrong. It should be:</p>

<pre><code>def __eq__(self, other):
    return self.name == other.name and self.rate == other.rate
</code></pre>

<p>Also there is no need to create your own structures like that.</p>

<p>Your <code>PairCurrency</code> class isn't better than just a simple python tuple.</p>

<pre><code>PairCurrency('US', 3) == PairCurrency('US', 3) =&gt; true
('US', 3) == ('US', 3) =&gt; true
</code></pre>

<p>The only reason you would want to do that is to increase verbosity, but this can be achieved by using builtin <code>namedtuples</code>.</p>

<pre><code>from collections import namedtuple

PairCurrency = namedtuple('PairCurrency', 'name rate')
us = PairCurrency('US', 3)
print(us) 
=&gt; PairCurrency(name='US', rate=3)
</code></pre>

<p>Sets would work the same with <code>tuples</code>, <code>namedtuples</code> and your custom <code>PairCurrency</code> with custom <code>__eq__</code>.</p>
    </div>