<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The most obvious thing to me is the repetition in the code. I think that addressing the repetition, you can make this game scalable (change the number of guesses, change the number of pegs, change the number of colours).</p>

<pre><code>Public Type GuessArray
    ColorOne                As GamePieceColor
    ColorTwo                As GamePieceColor
    ColorThree              As GamePieceColor
    ColorFour               As GamePieceColor
End Type
</code></pre>

<p>becomes</p>

<pre><code>Public Type GuessArray
    Color(MaxPegs-1) As GamePieceColor
End Type
</code></pre>

<p><code>Private Function DetermineMatches(ByRef GuessArray As GuessArray) As ResponsePegs</code> is screaming out to be made not repetitive!</p>

<p>At this stage, I would consider the use of Classes instead of Types because of inherent flexibility within VBA. This requires an understanding of the objects in the game. The game consists of a <em>Board</em>, which holds both the <em>MasterAnswer</em>, and the Moves; where each move consists of a <em>Guess</em> [<code>GuessArray</code>s which are individually coloured <em>Pegs</em>], and the <em>Result</em>. Looking at the code, you already have some good bones to work with. </p>

<p>In removing repetition and improving both scability and maintainability, you would have to learn how to create arrays of controls in VBA Forms. For example <code>Private Sub D9_Click()</code> would be replaced by a function that looks a little more complicated, but only once instead of 36 times. Two websites (working as of today, cannot guarantee that they will not break in the future) that describe how to create a control array are <a href="http://www.siddharthrout.com/index.php/2018/01/15/vba-control-arrays/" rel="nofollow noreferrer">http://www.siddharthrout.com/index.php/2018/01/15/vba-control-arrays/</a> or <a href="https://bettersolutions.com/excel/macros/vba-control-arrays.htm" rel="nofollow noreferrer">https://bettersolutions.com/excel/macros/vba-control-arrays.htm</a> - Just search "VBA Control Array" in your favourite search engine.</p>

<p><code>HideMasterGuessArray</code> and <code>UnhideMasterGuessArray</code> could be collapsed into a single sub:</p>

<pre><code>Sub RevealMasterGuessArray(MasterGuessArrayVisible As Boolean)
</code></pre>

<p>I am not sure why ButtonColour and ButtonCaption codes are not aligned - one set of <code>Select</code> gives the corresponding assignment, the other gives a black/white assignment with no comment on how this apparently arbitrary assignment has been created. </p>

<h2>Why use Excel?</h2>

<p>As a final note: The only Excel function I could see in your code was <code>RandomNumber = Application.WorksheetFunction.RandBetween(0, 5)</code>, which could be replaced with VBA's <code>Rnd()</code> function (see: <a href="https://docs.microsoft.com/en-us/office/vba/language/reference/user-interface-help/rnd-function" rel="nofollow noreferrer">https://docs.microsoft.com/en-us/office/vba/language/reference/user-interface-help/rnd-function</a>). </p>

<p>As such, Excel is not essential to your game, it is just a convenient coding platform. If possible, I would recommend you move to Visual Studio (even the free Community version) which will allow you to use VB.NET.</p>

<p>VB.Net is a different language than VBA, but is also similar in so many ways, so your current logic doesn't require much work to change over. Some of the advantages:</p>

<ul>
<li>Better handling of custom controls and assigning handlers to arrays
of controls meaning less repetition and better scalability.</li>
<li>The ability to create a stand-alone program</li>
<li>Better functionality and handling of Types, but I still prefer Classes!</li>
<li>Better range of Collection-like classes that give more flexibility on creating a collection of general items (like <em>Moves</em> or controls that present <em>Moves</em>).</li>
<li>Better alignment with Object-Oriented-Programming, so inheritance and implementation are more flexible.</li>
<li>You will still practice the same coding principles, so your current learning path will continue with greater flexibility.</li>
</ul>

<p>There are times when using Excel (or Word or MS-Access) are great foundations for creating programs. I think, in this case, you have out-grown Excel. I originally did a MasterMind-type program (analysis, not a Game) in Visual Studio so I could learn about saving information in XML files!</p>
    </div>