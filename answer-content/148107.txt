<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Sure you can DRYfy you code in several ways.</p>

<p>The most obvious point is that you're using 3 times the almost identical sequence of statements, so it should be factorized.  </p>

<pre><code>var isValid = true;
 $('input,textarea,select').filter('[required]:visible').each(function() {
  if ( $(this).val() === '' )
     isValid = false;
});
// then do something with "isValid"
</code></pre>

<p>Having isolated the sequence, we can already both simplify and improve its "core":</p>

<ul>
<li><code>$(this).val()</code> can be simpler and faster: <code>this.value</code></li>
<li>but as pointed by @Tushar, it should be secured: <code>this.value.trim()</code>;<br>
<em>on the other hand, yes we might stop looping as soon as <code>false</code> (returning <code>false</code> rather than with <code>break;</code>, since <code>each()</code> is not a loop), but there can never be a significative lot of inputs so personally I'll give up, for the sake of readability</em></li>
<li>and finally the whole condition <code>$(this).val() === ''</code> can be yet simplified: <code>!this.value.trim()</code></li>
</ul>

<p>Now it's time to look at how to really factorize, i.e. make this sequence usable each time we need it to work.</p>

<p>But at the same time we may also think about how to make it of more general use. The idea here is to be able to work independently (while automatically) upon all or some of several forms.<br>
It may be achieved by wrapping the sequence in a handler:</p>

<ul>
<li>fired on any input element</li>
<li>looking for valid state of all input elements in its own form</li>
</ul>

<p>So the whole sequence becomes a function like this:</p>

<pre><code>function checkForm() {
  // here, "this" is an input element
  var isValidForm = true;
  $(this.form).find(':input[required]:visible').each(function() {
    if (!this.value.trim()) {
      isValidForm = false;
    }
  });
  // then do something with "isValidForm"... not stated yet
}
</code></pre>

<p>At this step we must decide how to make this handler be launched.<br>
It worth mention that <code>change</code> is not a good choice, because it fires only when the element value had changed <em>AND the element lost focus</em>.<br>
So for example, based on a full valid form, if user empties a required input the submit button remains enabled till navigated to another element!</p>

<p>It's why I suggest using <code>keyup</code> event instead (nevertheless if checkboxes or radios should also be involved, you'll have to also use <code>change</code> event).</p>

<p>For the sake of simple usage, I suggest affecting a distinguishing class to the submit button of each form you want to be involved, say <code>monitored-btn</code>.<br>
So the way to make monitoring active will be:</p>

<pre><code>$('.monitored-btn').closest('form').find(':input[required]:visible').keyup(checkForm);
</code></pre>

<p>This way, we know that our handler will be fired each time an element value changes.<br>
So it's time to add what we want the handler to do depending on the form state, so it becomes:</p>

<pre><code>function checkForm() {
  // here, "this" is an input element
  var isValidForm = true;
  $(this.form).find(':input[required]:visible').each(function() {
    if (!this.value.trim()) {
      isValidForm = false;
    }
  });
  $(this.form).find('.monitored-btn').prop('disabled', !isValidForm);
}
</code></pre>

<p>Now, each time an element value changes the involved submit button is enabled or not depending on the whole form state.<br>
But when page was just loaded, the buttons are always all enabled regardless of anything else.<br>
It's why we must immediately fire the handler as soon as it has been bound:</p>

<pre><code>$('.monitored-btn').closest('form').find(':input[required]:visible')
  // bind the handler
  .keyup(checkForm)
  // immediately fire it to initialize buttons state
  .keyup();
</code></pre>

<p>Last point, regarding your care of user-hacking with Firebug (a bit strange, from my point of view, since if user can suppress the <code>disabled</code> attribute he can also do almost anything he wants, including directly submit through the console).</p>

<p>A simple way to also monitor that is to fire the same handler on form <code>submit</code> event, with two slight changes:</p>

<ul>
<li>the handler expects <code>this</code> to be an input element, so we must call it like if it was a simple function (not a handler): <code>checkForm.apply($(this).find(':input')[0]);</code></li>
<li>apart from enabling/desabling button, the handler should now return <code>isValidForm</code>, so we can use it to prevent defaut</li>
</ul>

<p>It actually results in this final whole version:</p>

<pre><code>function checkForm() {
  // here, "this" is an input element
  var isValidForm = true;
  $(this.form).find(':input[required]:visible').each(function() {
    if (!this.value.trim()) {
      isValidForm = false;
    }
  });
  $(this.form).find('.monitored-btn').prop('disabled', !isValidForm);
  return isValidForm;
}

$('.monitored-btn').closest('form')
  // indirectly bind the handler to form
  .submit(function() {
    return checkForm.apply($(this).find(':input')[0]);
  })
  // look for input elements
  .find(':input[required]:visible')
  // bind the handler to input elements
  .keyup(checkForm)
  // immediately fire it to initialize buttons state
  .keyup();
</code></pre>

<p>Here is a working example where I used two forms with distinct "required" exigences:</p>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="false" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const inputSelector = ':input[required]:visible';
function checkForm() {
  // here, "this" is an input element
  var isValidForm = true;
  $(this.form).find(inputSelector).each(function() {
    if (!this.value.trim()) {
      isValidForm = false;
    }
  });
  $(this.form).find('.monitored-btn').prop('disabled', !isValidForm);
  return isValidForm;
}
$('.monitored-btn').closest('form')
  // in a user hacked to remove "disabled" attribute, also monitor the submit event
  .submit(function() {
    // launch checkForm for the first encountered input,
    // use its return value to prevent default if form is not valid
    return checkForm.apply($(this).find(':input')[0]);
  })
  .find(inputSelector).keyup(checkForm).keyup();</code></pre>
<pre class="snippet-code-css lang-css prettyprint-override"><code>form {
  border: 1px solid #000;
  margin: 10px;
}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js"&gt;&lt;/script&gt;
&lt;body&gt;
  &lt;form action="#myForm"&gt;
         Name * &lt;input name="myForm-name1" placeholder="required" required&gt; &lt;br /&gt;
         Surname * &lt;input name="myForm-surname" placeholder="required" required&gt; &lt;br /&gt;
         Age &lt;input name="myForm-surname" placeholder="not-required"&gt; &lt;br /&gt;
         &lt;button id="myForm-submitBtn" class="monitored-btn" type="submit"&gt;Submit&lt;/button&gt;
  &lt;/form&gt;
  &lt;form action="#otherForm"&gt;
         Name * &lt;input name="otherForm-name1" placeholder="required" required&gt; &lt;br /&gt;
         Surname * &lt;input name="otherForm-surname" placeholder="not-required"&gt; &lt;br /&gt;
         Age &lt;input name="otherForm-surname" placeholder="required" required&gt; &lt;br /&gt;
         &lt;button id="otherForm-submitBtn" class="monitored-btn" type="submit"&gt;Submit&lt;/button&gt;
  &lt;/form&gt;&lt;/body&gt;</code></pre>
</div>
</div>

    </div>