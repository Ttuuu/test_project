<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Pass values as parameters for modularity</h1>
<p>You can make your code a lot more modular if you pass values to functions as parameters instead of hardcoding values in the function itself.</p>
<p>Let's change the <code>bot_login()</code> function to this.</p>
<pre><code>def bot_login(client):
    print("Login...")
    reddit = praw.Reddit(client_id=client["id"],
                client_secret=client["secret"],
                password=client["password"],
                user_agent=client["useragent"],
                username=client["username"])
    print("Login succesfull!")
    return reddit
</code></pre>
<p>This way you can call the function like this</p>
<pre><code>client={ "id":"1",
    "secret":"supersecret",
    "password":"password123",
    "useragent":"Chrome 1.0",
    "username":"beepbot"}
bot_login(client)
</code></pre>
<p>Your Github_text() function should look something like this.</p>
<pre><code>def github_text(github_url):
</code></pre>
<p>Also, notice the lowercase function definitions. You are better off following standards.
Similarly, you should never go with generic variable names such as <code>data</code> <code>text</code> even though they are better than x,y,t1 etc. You can use them if the context is very clear but even so using specific names such as <code>website_response</code> is better.</p>
<p>You can change the function definition of <code>run_bot(reddit)</code> to
<code>run_bot(reddit,subreddit,limit)</code>
This way you can maybe run your bot in other subreddits.</p>
<h1>Code is better understood vertically</h1>
<pre><code>if any(sentence in submission.selftext for sentence in check_sentences) \
        and submission.author not in users_messaged and not submission.stickied and submission.is_self: 
</code></pre>
<p>That is very hard to read.</p>
<p>Maybe write it like this</p>
<pre><code>conditions=[any(sentence in submission.selftext for sentence in check_sentences),
            submission.author not in users_messaged,
            not submission.stickied,
            submission.is_self]
if all(conditions):
</code></pre>
<h1>Please handle edge cases</h1>
<p>What happens to the <code>github_text()</code> function if <code>re.search()</code> does not return anything? <code>private_message_text</code> is not defined! Probably won't happen but nothing is guaranteed.</p>
<p>Also if you are using Python3 why not use urllib2 instead of urllib. <code>urlopen()</code> seems to be deprecated use <code>urllib2.urlopen()</code> instead.</p>
<h1><code>Use if __name__=='__main__'</code></h1>
<p>It is better to use this format to run code.</p>
<pre><code>if __name__=='__main__':
    main()
</code></pre>
<p>It is a good programming habit even if you are not going to import this anywhere.</p>
<pre><code>  if len(users_messaged) &gt; 50: 
      del users_messaged[0] 
      users_messaged.append(submission.author) 
  else:
      users_messaged.append(submission.author)
</code></pre>
<p>I don't know what you are trying to do with this piece of code. But it probably does not do what you want. Since you don't want to message the same person again.</p>
<h1>Perfomance</h1>
<p>The major performance bottleneck you will face is probably in the network and not in your code. (I could be wrong). I am not familiar with the Reddit API. But if it allows you to message a bunch of users at the same time then you should probably generate the user list and message them all at once.</p>
<p>As a side note, you should handle exceptions if there are any. Especially, if you are going to run this code for a long time. You don't want your program to suddenly stop because of a read timeout.</p>
    </div>