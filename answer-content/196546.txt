<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>How can I enhance the efficiency and make it faster?</p>
</blockquote>

<p>There are two big algorithmic improvements you can make.</p>

<p>Firstly, optimise the solver. The solver does nearly all of the work in the generator, but it looks pretty close to the simplest possible implementation. That's fine as a starting point: make it work, <em>then</em> make it fast.</p>

<p>If you want to stick to brute force, you can at least use heuristics to speed it up. For example, rather than just sticking all of the cells into a queue, use a priority queue and tackle the ones with fewest remaining options first. A slightly more sophisticated version of this expresses the constraints in more symmetrical form and tackles rows/columns/boxes with few options as well as cells with few options. See the Wikipedia description of <a href="https://en.wikipedia.org/wiki/Exact_cover#Sudoku" rel="nofollow noreferrer">sudoku as exact set cover</a>.</p>

<p>Alternatively, don't use brute force. Instead, use the strategies that humans use to solve sudoku. The great advantage of doing this is that you know that the sudoku you generate won't leave the human solver frustrated by requiring "trial and error". It also means that you can easily implement a crude difficulty ranking: what's the most advanced technique required to solve it? If it requires XY-wing, it's harder than one which can be solved purely by the basic techniques. You can push this idea further by looking at how many cells are directly solvable at a time, but that's getting off-topic.</p>

<p>Secondly, optimise the usage of the solver. In <code>remove_cells</code>, when you're testing whether <code>index</code> can be removed, you don't need to solve the entire puzzle. You just need to show that there's only one possibility for <code>index</code>. If you're doing brute force, that means prioritising that cell. If you're using standard techniques, it means that you can put an early <code>return</code> into <code>solver</code>.</p>
    </div>