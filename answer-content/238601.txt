<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code doesn't handle empty tuples gracefully.  The first version generates a compilation error, and the second version returns <code>void</code>.  For the first version, you can add an <code>apply_tuple</code> overload for empty tuples.  For the second version, you can change</p>

<pre><code>return ((seed = hash_combine(std::get&lt;I&gt;(t), seed)), ...);
</code></pre>

<p>to</p>

<pre><code>((seed = hash_combine(std::get&lt;I&gt;(t), seed)), ...);
return seed;
</code></pre>

<hr>

<p>Is <code>0</code> really a good initial seed?  Some prime number, I guess, might be better (e.g., <code>672807365</code>, <a href="https://stackoverflow.com/q/54147254/9716597">which is what MSVC returns for <code>std::hash&lt;std::nullptr_t&gt;{}(nullptr)</code></a>).</p>

<hr>

<p>The tuple unpacking can be simplified with <code>std::apply</code>, avoiding <code>index_sequence</code>s:</p>

<pre><code>template &lt;typename... Args&gt;
struct hash&lt;std::tuple&lt;Args...&gt;&gt; {
    std::size_t operator()(const std::tuple&lt;Args...&gt;&amp; tuple) const noexcept
    {
        return std::apply([](const auto&amp;... args) {
            auto seed = static_cast&lt;std::size_t&gt;(672807365);
            ((seed = hash_combine(args, seed)), ...);
            return seed;
        }, tuple);
    }
};
</code></pre>

<p>(<a href="https://wandbox.org/permlink/Jieey9yon25o6Tsc" rel="nofollow noreferrer">live demo</a>)</p>
    </div>