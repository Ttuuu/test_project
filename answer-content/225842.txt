<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If you need performance optimized code, your solution looks very well. I think the performance can be optimized best by using a simplified aproximation approach (e.g.:  <code>Math.Abs(value1 - value2) &lt;= Double.Epsilon</code>).</p>

<p>Another note (that actually doesn't affect performance): Use '||' instead of use '|' because the second one evaluates always both conditions whereas the firs one stops as soon as the result is known.</p>

<p>However, for 100.000 sorted values, performance doesn't matter. For that use case I would optimize code for maintainablity and readability:</p>

<pre><code>public class ApproximatelyDoubleComparer : IEqualityComparer&lt;Double&gt;
{
    private readonly double epsilon;

    public ApproximatelyDoubleComparer(double epsilon)
    {
        this.epsilon = epsilon;
    }

    public bool Equals(double value1, double value2)
    {
        // If they are equal anyway, just return True.
        if (value1.Equals(value2))
            return true;

        // Handle NaN, Infinity.
        if (Double.IsInfinity(value1) | Double.IsNaN(value1))
            return value1.Equals(value2);
        else if (Double.IsInfinity(value2) | Double.IsNaN(value2))
            return value1.Equals(value2);

        // Handle zero to avoid division by zero
        double divisor = Math.Max(value1, value2);
        if (divisor.Equals(0))
            divisor = Math.Min(value1, value2);

        // https://github.com/dotnet/samples/pull/1152/
        return Math.Abs((value1 - value2) / divisor) &lt;= epsilon;
    }

    public int GetHashCode(double obj)
    {
        return obj.GetHashCode();
    }
}
</code></pre>

<p>Usage;</p>

<pre><code>var union = a1.Concat(a2)
              .Distinct(new ApproximatelyDoubleComparer(1e-15))
              .OrderBy(x =&gt; x) // if a sorted list is required
              .ToArray();
</code></pre>
    </div>