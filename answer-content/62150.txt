<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I have been using php for over 10 years and never found a need for a session wrapper, but maybe you find it easier/better.</p>

<p>There are a few improvements that could be made with your code</p>

<p>If we are checking to see if the session has a key, a simpler test is</p>

<pre><code>public static function has($Key)
{
    // return (bool)(isset($_SESSION[$Key])) ? $_SESSION[$Key] : false; 
    return array_key_exists($Key, $_SESSION); 
}
</code></pre>

<p>The get function here would probably be more useful with a default value option then just returning false.</p>

<pre><code>public static function get($Key, $default=false)
{
    return (self::has($Key)) ? $_SESSION[$Key] : $default; 
}
</code></pre>

<p>The del function, I am unsure what you are trying to achieve by returning false, but returning nothing if it isn't set?
Personally I wouldn't bother to check if it is set or not, just unset it, and return nothing. I would also call it delete, so it is painfully obvious to the use what it does</p>

<pre><code>    public static function delete($Key)
    {
       if(isset($_SESSION){
            unset($_SESSION[$Key]);
       //         return false; 
       }
    }
</code></pre>

<p>The dump function, why do you throw an exception if the session doesn't exist, but not anywhere else if the session doesn't exist? I would re-write it like a guard clause rather then having a return halfway through the function.</p>

<pre><code>public static function dump()
{
    if(!isset($_SESSION))
    {
        throw new \Exception("Session is not initialized");
    }

    print_r($_SESSION);
}
</code></pre>

<p>Another useful function you might add is get_once. I do something similar for when I store an error message in the session, then redirect to a new page and display the error message. After that the error message is no longer relevant so I remove it from the session.</p>

<pre><code>public static function get_once($Key, $default=false)
{
    $value = self::get($Key, $default);
    self::delete($Key);
    return $value;
}
</code></pre>

<p>Other things you could do is to manage different "namespaces" (maybe not the best word to describe it) within a session.</p>

<pre><code>// keep in mind if you do this, you can't use static everywhere like you have

function __construct($namespace) {
    $this-&gt;namespace = $namespace;
}

function set($key, $value) {
   $_SESSION[$this-&gt;namespace][$this-&gt;key] = $value;
}

// Then you can use simple keys that don't overwrite each other
$user_session = new session('user');
$user_session-&gt;set('name', 'Donald Duck');

$page_session = new session('page');
$page_session-&gt;set('name', 'Home Page');
</code></pre>
    </div>