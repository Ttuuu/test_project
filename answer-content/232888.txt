<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I would suggest following:</p>

<ol>
<li><p>Do not compare strings by <code>==</code>, use <code>String.equals()</code>. And in Your case is better <code>String.isEmpty()</code></p>

<p><code>text != ""</code> → <code>!text.isEmpty()</code></p></li>
<li><p>Use constants for numbers and strings. It increases readability and futher refactoring.</p>

<p><code>private static final String WORD_SEPARATOR = " ";</code></p></li>
<li><p>There is no need to use indexed iterations</p>

<p><code>for(int j=0;j&lt;arry.length;j++)</code> → <code>for (String s : arry)</code></p></li>
<li><p>Use IDE with spelling checker:</p>

<p><code>arry</code> → <code>array</code></p></li>
<li><p>Use meaning variable names.</p>

<p><code>String s</code> → <code>String word</code></p></li>
<li><p>No need to use cast:</p>

<p><code>int number = (int) sd[0];</code> → <code>int number = sd[0];</code></p></li>
<li><p>Decrease level of visibility</p>

<p><code>public static String encryptThis</code> → <code>static String encryptThis</code></p></li>
<li><p>Use method extraction to decrease <code>nesting level</code></p>

<p><code>private static StringBuilder encrypt(char[] wordChars, int number)</code></p></li>
<li><p>You add first char in any case so condition can be omitted.</p></li>
<li><p>You could use chain of method <code>.append(...)</code> calls for <code>StringBuilder</code></p></li>
<li><p>It is nice to move conditions like <code>k==1</code> to meaningful named method:</p>

<p>See <code>isSecondChar(...)</code></p></li>
<li><p>It is nice to validate input params early and prevent any actions if it is not valid:</p>

<p><code>if(text!="")</code> → <code>if (text.equals("")) then return empty string;</code></p></li>
</ol>

<p>I would strongly suggest you to read great Joshua Bloch 'Effective Java' book. </p>

<p>Have a look at the refactored code:</p>

<pre><code>class NewEnpc {

    private static final String WORD_SEPARATOR = " ";

    static String encryptThis(String text) {
        if (text.isEmpty()) {
            return text;
        }
        StringBuilder result = new StringBuilder();
        String[] words = text.split(WORD_SEPARATOR);
        for (String word : words) {
            char[] wordChars = word.toCharArray();
            result.append((int) wordChars[0])
                    .append(encrypt(wordChars))
                    .append(" ");
        }
        return result.toString().trim();
    }

    private static StringBuilder encrypt(char[] wordChars) {
        StringBuilder encrypted = new StringBuilder();
        for (int index = 1; index &lt; wordChars.length; index++) {
            if (isSecondChar(index)) {
                int len = wordChars.length - 1;
                encrypted.append(wordChars[len]);
            } else if (isLastChar(index, wordChars.length - 1)) {
                encrypted.append(wordChars[1]);
            } else {
                encrypted.append(wordChars[index]);
            }
        }
        return encrypted;
    }

    private static boolean isLastChar(int currentIndex, int prevCharIndex) {
        return currentIndex == prevCharIndex;
    }

    private static boolean isSecondChar(int currentIndex) {
        return isLastChar(currentIndex, 1);
    }
}

public class EncryPt {
    public static void main(String[] args) {
        System.out.println("Hello");
        System.out.println(NewEnpc.encryptThis("A wise old owl lived in an oak"));
    }
}
</code></pre>
    </div>