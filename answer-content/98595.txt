<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Bubble sort is well described at <a href="https://en.wikipedia.org/wiki/Bubble_sort" rel="nofollow">https://en.wikipedia.org/wiki/Bubble_sort</a>. The optimized form remembers the last exchange made and notes that all higher elements are sorted already. Bubble sort is an inefficient amgorithm but easy to implement. At worst it runs in O(n^2). In pseudo code:</p>

<pre><code>sort (A, n)     // bubble sort array A[0..n-1]
int j, k, l;

k= n-1;         // k holds position of last interchange. All higher elements are sorted.
while (k &gt; 0)
{
    l= 0;
    for (j=0; j &lt; k; j++)
    {
        if (A[j] &gt; A[j+1])
        {
            tmp   = A[j];
            A[j]  = A[j+1];
            A[j+1]= tmp;
            l= j;
        }
    }
    k= l;
}
</code></pre>

<p><strong>EDIT</strong>
Applying this to the sort algorithm and making the sort more generic, results in how I would write it:</p>

<pre><code>/* Sort unsorted array 'unsorted' of pointers to objects into a sorted array 'sorted'.
 * 'size' has the number of elements in 'unsorted'. Array 'sorted' is assumed to be large enough
 * to hold the sorted result. The arrays are 'pointers to objects' and the result has only
 * the pointers to the original objects, but now in a sorted order. The objects themselves
 * are not copied. Function 'cmp' provided by the caller compares two objects.
 */
void sort(void **sorted, void **unsorted, const size_t size, const int ascending, int (*cmp)(void *, void *))
{
    size_t i, lastXchg, thisXchg;

    for (i=0; i &lt; size; i++)    // first copy the unsorted array to the result array
        sorted[i]= unsorted[i];

    lastXchg= size-1;           // lastXchg remembers the last exchange; all higher elements are sorted
    while (lastXchg &gt; 0)        // now  bubble sort the result array
    {
        thisXchg= 0;                        // remember the last exchange this round
        for (i=0; i &lt; lastXchg; i++)
        {
            int result= cmp(sorted[i], sorted[i+1]);
            if (( ascending &amp;&amp; result &gt; 0)
            ||  (!ascending &amp;&amp; result &lt; 0))
            {
                void *tmp= sorted[i];
                sorted[i]= sorted[i+1];
                sorted[i+1]= tmp;
                thisXchg= i;
            }
        }
        lastXchg= thisXchg;
    }
}
</code></pre>
    </div>