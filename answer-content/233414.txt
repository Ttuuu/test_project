<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In case you need to modify the initial <code>columns</code> list (mutable data structure) you don't need to <code>return</code> it.<br></p>

<p>The crucial pattern can be moved out to the <em>top</em> making it reusable and accessible for other potential routines or <em>inline</em> conditions:</p>

<pre><code>UNNAMED_PAT = re.compile(r'^Unnamed:\s\d+$')
</code></pre>

<p>As the function's responsibility is to <strong><em>back fill</em></strong> (backward filling) items matched by specific regex pattern I'd rename it appropriately like say <strong><code>backfill_by_pattern</code></strong>. The <em>search</em> pattern is passed as an argument.</p>

<p>I'll suggest even more concise solution based on replacement of <em>search</em> items by the item at the <em>previous</em> index:</p>

<pre><code>def backfill_by_pattern(columns, pat):
    fill_value = None
    for i, column in enumerate(columns):
        if pat.match(column):
            columns[i] = columns[i - 1] if i else fill_value
</code></pre>

<p>Sample usage:</p>

<pre><code>backfill_by_pattern(columns, pat=UNNAMED_PAT)
print(columns)
</code></pre>

<p>The output:</p>

<pre><code>['Village Trustee V Belleville',
 'Village Trustee V Belleville',
 'Village Trustee V Belleville',
 'Village President V Black Earth',
 'Village Trustee V Black Earth',
 'Village Trustee V Black Earth',
 'Village Trustee V Black Earth',
 'Village President V Blue Mounds',
 'Village Trustee V Blue Mounds',
 'Village Trustee V Blue Mounds',
 'Village Trustee V Cottage Grove',
 'Village Trustee V Cottage Grove',
 'Village Trustee V Cottage Grove',
 'Village President V Cross Plains',
 'Village Trustee V Cross Plains',
 'Village Trustee V Cross Plains',
 'Village Trustee V Cross Plains']
</code></pre>
    </div>