<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>After staring at your code for some time,</p>

<ul>
<li>You are using <a href="https://en.wikipedia.org/wiki/Hungarian_notation" rel="nofollow noreferrer">Hungarian notation</a>, that is not a JavaScript practice

<ul>
<li>Related to that, <code>strArr</code> probably should have been <code>arrStr</code> if the code was consistent</li>
</ul></li>
<li>It seems odd that you would return <code>0</code> when either word is not present, <code>0</code> would indicate that the words are neighbours. I would return -1 in that case.</li>
<li>You seem to track too much state in <code>acc</code>, you can get away with just tracking the last matched word, the location of the last matched word and what the best distance has been thus far</li>
<li>There are no comments whatsoever, I think your code could have used some</li>
</ul>

<p>This is my functional approach:</p>

<pre><code>const s = "dog cat hello cat dog dog hello cat dog world dog hello";
​
function smallestWordDistance(s, w1, w2) {
​
  function analyze(acc, word, index) {
​
    if (word == w1 || word == w2) {
​
      if (acc.word &amp;&amp; acc.word != word) {
        const distance = index - acc.index - 1;
        acc.out = acc.out == -1 ? distance : Math.min(acc.out, distance);
      }
      acc.index = index;
      acc.word = word;
    }
    return acc;
  }
​
  return s.split(' ').reduce(analyze, { out: -1 }).out;
}
​
console.log(smallestWordDistance(s, "hello", "world"));
</code></pre>
    </div>