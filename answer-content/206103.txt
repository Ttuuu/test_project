<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Note that your code for checking that the inputs are 'consistent' involves rounding, so you might ignore the last few elements, and could obscure an insidious bug (e.g. off-by-one) somewhere else:</p>



<pre class="lang-cs prettyprint-override"><code>uint numElements = (uint)arrays[i].Length / indices[i];
if (numElements != elements)
</code></pre>

<p>Checking <code>arrays[i].Length % indices[i] == 0</code> is probably how I'd solve this. Such checks would also be incompatible with the behaviour of <code>if (arrays.Length == 1) return arrays[0];</code>.</p>

<p><code>elements = numElements;</code> is redundant and I think will only create confusion. I'd consider renaming <code>numElements</code> to something which implies its provisionalness.</p>

<hr>

<p>As t3chb0t has said, the message in <code>"Specified arrays are not consistent sizes"</code> could be more useful. A dedicated check that <code>indices[i]</code> is non-zero might be appreciated, since it will manifest as a division by zero at the moment (granted it could be worse). You probably ought to throw in a <code>null</code> check as well, so that when the consumer makes a mistake he immediately knows what was <code>null</code> and doesn't spend 30 seconds moaning about the API while they work it for themselves.</p>

<p>I'd expect the code to check <code>(indices.Length != arrays.Length)</code> before fast-pathing <code>if (arrays.Length == 1) return arrays[0];</code>, and that fast-path <em>really needs documenting</em> if it is an actual use-case, since it isn't returning a copy. Inline documentation (<code>///</code>) takes little time to add, and really helps.</p>

<hr>

<p>The nested loops at the end are rather confusing, especially <code>offset</code>, which I'd replace with a single incrementing position counter which is trivial to understand, and makes plain the 'progressive' nature of the loops.</p>

<pre class="lang-cs prettyprint-override"><code>uint pos = 0; // current position in result
for (uint i = 0; i &lt; elements; ++i) {
    for (int j = 0; j &lt; indices.Length; ++j) {
        for (uint k = 0; k &lt; indices[j]; ++k) {
            result[pos] = arrays[j][(i * indices[j]) + k];
            pos++;
        }
    }
}
</code></pre>

<p><em>(not tested)</em></p>

<hr>

<p>I agree that <code>indices</code> is not a good name; <code>elementLengths</code> might be better, since it holds the lengths of each of the elements of a component. <code>"Index count is not same as array count"</code> should also be changed in accordance.</p>

<p>I'm guessing you have a good reason to make it <code>uint</code>, but generally life is easier if <code>int</code> is used everywhere if you do not. Nothing in your code would stop working if you were to switch to <code>int</code>, but it would of course change the logical API.</p>

<hr>

<p>You have a missing space after the third <code>if</code>.</p>
    </div>