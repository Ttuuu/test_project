<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>This is C++, not C, so use <code>&lt;cmath&gt;</code> instead of <code>&lt;math.h&gt;</code>.</p></li>
<li><p>This would look and function better with more <code>class</code>es, especially since it's a game.  For instance, <code>Player</code> can become a class instead of a <code>struct</code> so that it can be kept <code>private</code>.  There should also be a <code>Game</code> class to keep a collection of Players and handle the gameplay.  You will simply initiate the game in <code>main()</code> by creating a Game object.  Note that <code>main()</code> should not have access to anything within the game beyond the ability to start it.</p></li>
<li><p>I agree with @Lstor about making an <code>std::vector</code> of <code>Player</code>s.  This will also allow you to access each Player using the container's iterators.  If you have C++11, you have two options, depending on whether or not your compiler supports <strong>range-based for-loops</strong>:</p>

<p><em>If it does...</em></p>

<pre><code>for (auto const&amp; player : players)
{
    std::cout &lt;&lt; player;
}
</code></pre>

<p><em>If it does not...</em></p>

<pre><code>for (auto iter = players.cbegin(); iter != players.cend(); ++iter)
{
    std::cout &lt;&lt; *iter;
}
</code></pre>

<p>In your game, you would be operating on this vector inside the Game class only.  This is important because it shouldn't be exposed through the interface.  You're free to define a display function (or overload <code>operator&lt;&lt;</code>), <strong>but you mustn't break encapsulation</strong>.</p></li>
<li><p>The parameters in <code>getCX()</code> and <code>getCY()</code> should be const-refs since they're not modified:</p>

<pre><code>float getCX(Player const&amp; me, Player const&amp; target) {}
float getCY(Player const&amp; me, Player const&amp; target) {}
</code></pre></li>
<li><p>The <code>playerBaseOffset</code>s look like they should be <code>const</code>.  I'd also prefer something more concise than single arrays, such as an <code>enum</code>.  It could also be put into a <code>namespace</code> to avoid name collisions.</p></li>
<li><p>The STL <em>should</em> especially be utilized to take advantage of smart pointers in place of raw pointers (the latter is more C-like).  Beyond that, using the STL as much as possible will clean up your code considerably.  As for pointers in general, use <code>nullptr</code> instead of <code>NULL</code> if you're using C++11.</p></li>
<li><p>Regarding @Lstor's answer, include <code>&lt;cstddef&gt;</code> in order to use <code>std::size_t</code>.</p></li>
</ul>
    </div>