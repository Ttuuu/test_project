<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Domain Model layer</h3>

<p>Your domain classes serve 3 conflicting purposes:</p>

<ul>
<li>Data Transfer Object</li>
<li>ORM Object (Data Record for EF, some call this a DAO, others wouldn't)</li>
<li>Business Entity</li>
</ul>

<p>For bigger projects, you would like to have 3 different layers exposing equivalent classes. The main problem for your API is that next to having business operations defined that guard the state of the entities, you're also exposing all state through public getters and setters. Let's take a look at <code>BankAccount</code>:</p>

<blockquote>
<pre><code>public int Id { get; set; }
public string AccountName { get; set; }
public string CardNumber { get; set; }
public string CardPin { get; set; }
public decimal Balance { get; set; }
</code></pre>
</blockquote>

<p>Method <code>Withdraw</code> has a business rule defined, albeit hard-coded:</p>

<blockquote>
<pre><code>if (amount &gt; Balance)
{
    throw new Exception("Withdraw amount exceed account balance.");
}
</code></pre>
</blockquote>

<p>But it could easily by cirmcumvented by calling the setter on <code>Balance</code></p>

<pre><code>someBankAccount.Balance = -1000;
</code></pre>

<p>To solve this, you should have a different entity for the persistence layer than in the domain layer and use a mapper between layers.</p>

<p>I would also advise to use use throw hard-coded validation messages, but use some pattern for it (get from DB, from resource files, ..). I would make a custom exception to indicate business errors.</p>

<pre><code>throw new BusinessException(ResourceManager.GetString(Resources.WithDrawExceeded));
</code></pre>

<h3>Persistence Layer</h3>

<p>I am not convinced of the concept to put all entity queryables in a single class <code>AppDbContext</code>. I would let each specific <code>Repository</code> have its own scope of what to manage.</p>

<p>Class <code>DatabaseUtility</code> is a weird one, what would you use it for? Also, since it has no instance state, it should be made <em>static</em>. It's probably a convenience used only internally by the API, so make it <code>internal</code>. Method <code>TestDBConn</code> screems to return a <code>Boolean</code>. If you do decide to throw an error, I would throw some kind of <code>TechnicalException</code> to distinguish technical from business errors. Technical errors could be converted differently to end users, using a generic error message "Something went wrong, please try again later".</p>

<p><code>RepositoryBankAccount</code> is usually called <code>BankAccountRepository</code>. Method <code>FindByCardNoPin</code> sits at the right location here. An endpoint should call <code>repository.FindByCardNoPin</code> rather than <code>service.FindByCardNoPin</code>. Only when additional business logic is required, the service should provide this method. But even then, the repository should also provide it as input for the service.</p>

<p>Returning <code>SingleOrDefault</code> is ok if your model explicitly guards against multiple matches. But even then, if not found you'll get a generic .NET exception. Invest in your LINQ-style methods that take a friendly message on not found, too many found, etc.</p>

<h3>Application Layer</h3>

<p>This layer is pretty well implemented. It handles transactions, calls to repositories and business checks.</p>

<p>Method <code>CheckBalanceAmount</code> throws a really lame exception. Clean this up a bit.</p>

<pre><code>if (bankAccount == null)
{
    throw new Exception("Error");
}
</code></pre>

<p>Method <code>DepositAmount</code> has different behavior than <code>WithdrawAmount</code> concerning transaction rollback. The former performs <code>trans.Rollback();</code> while the latter also rethrows the exception <code>throw;</code>. The latter is better practice. You should try to invest in a solution that handles transactions as an <a href="https://en.wikipedia.org/wiki/Aspect-oriented_programming" rel="nofollow noreferrer">aspect</a> instead, this to avoid boiler-plate code.</p>
    </div>