<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>public class EmployeeLeave : ILeaveRequest
...
var leaveRequest = new EmployeeLeaveDetail();
</code></pre>
</blockquote>

<p>This is confusing. Going by name, <code>ILeaveRequest</code> implies that the class implementing that interface is a "leave request" (I'm aware that classes don't have an "is a" relationship with interfaces). But then we see an <em>actual</em> leave request in the form of an <code>EmployeeLeaveDetail</code>. This <code>EmployeeLeave</code> class simply processes leave requests. So why does this class implement an interface called <code>ILeaveRequest</code> when it's not a request and doesn't implement an interface consistent with what you might expect from a leave request? And for that matter, if <code>EmployeeLeaveDetail</code> is a leave request (as per your variable's name), why is it called <code>EmployeeLeaveDetail</code> rather than <code>EmployeeLeaveRequest</code>? I see you created an interface called <code>ILeaveRequestDetail</code>. You should rename that interface to <code>ILeaveRequest</code>, and rename the current <code>ILeaveRequest</code> to something more accurate.</p>

<blockquote>
<pre><code>if ((DateTime.Now - employee.StartDate).TotalDays &lt;= 90 &amp;&amp; !employee.IsMarried)
  throw new Exception("Invalid leave request.");

if (days &gt; 20)
  throw new Exception("Invalid leave request.");
</code></pre>
</blockquote>

<p>What's the significance of 90 and 20? Don't use magic numbers, create well named constants and use those instead.</p>

<p>Also as Heslacher said, don't throw an <code>Exception</code>; use one of the more specific types or create your own domain-specific exceptions. And at least say what's wrong, otherwise you're left scratching your head as to which of your (potentially) 20 checks failed when you get an <code>Exception</code> and it simply says <code>Invalid leave request</code>.</p>

<blockquote>
  <p><code>public void ProcessLeaveRequest(DateTime leaveStartDate, int days, string reason, int employeeId)</code></p>
</blockquote>

<p>I take some issue with the name of this method, because it's not processing (whatever that means) a "leave request". You have a method right underneath, <code>SaveLeaveRequest(ILeaveRequestDetail)</code>, which actually deals with a leave request. <code>ProcessLeaveRequest</code> just deals with ints, strings, etc. </p>

<p>What I think should be happening here is you have a method in some class to create a leave request for an employee. That method takes the ints, strings, etc, performs validation, and returns a leave request. You can then call the Save method to save the request.</p>

<p>Also in general you should be using domain constructs more. For example, you're accepting an <code>int</code>for the employee id. Why? Surely at this point you should have already constructed your <code>Employee</code> - it should be impossible to create a request without selecting which <code>Employee</code> to create it for - so when creating a request you can just pass in the <code>Employee</code>, which removes the need to look it up and potentially fail on request creation.</p>

<blockquote>
  <ol>
  <li>Extensible code to support different annual leave rules for HR
  departments. </li>
  <li>Maintainable code to add/change the existing rules
  without any impact on the other clients.</li>
  </ol>
</blockquote>

<p>Your rules:</p>

<blockquote>
<pre><code>public void ProcessLeaveRequest(DateTime leaveStartDate, int days, string reason, int employeeId)
{
  if ((DateTime.Now - employee.StartDate).TotalDays &lt;= 90 &amp;&amp; !employee.IsMarried)
      throw new Exception("Invalid leave request.");

  if (days &gt; 20)
      throw new Exception("Invalid leave request.");
</code></pre>
</blockquote>

<p>In what way does hardcoding the rules into the single method that creates and validates the holiday requests meet those requirements? You completely ignored requirement 1.</p>

<hr>

<p>Overall this class feels like it should be a repository, given all the database work it's doing. </p>
    </div>