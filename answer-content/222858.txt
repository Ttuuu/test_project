<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Suggestions on your code:</p>

<ol>
<li><p>Your code currently returns the input string unmodified if it contains nothing but spaces and tabs.  I'd say it should return an empty string.</p></li>
<li><p>You always use <code>input.at(x)</code> instead of <code>input[x]</code>.  The former checks at runtime for out of range errors and in which case throws an exception, while the latter does not.  Your code ensures that you are calling them with valid indexes and no additional check is needed.</p></li>
<li><p>Your code begins with an <code>if</code> statement.</p>

<pre><code>if ((input.empty()) ||
    ((input.at(0) != ' ') &amp;&amp; (input.at(0) != '\t'))) {
    return input;
}
</code></pre>

<p>This special case looks redundant because your <code>else</code> branch already handles input that is empty or does not start with <code>' '</code> or <code>'\t'</code>.</p></li>
<li><p>Parentheses are welcome to clarify operator precedence, but you are using too many parentheses IMHO.  I would rewrite it like this:</p>

<pre><code>if (input.empty() || (input[0] != ' ' &amp;&amp; input[0] != '\t'))
</code></pre>

<p>I removed the parentheses around <code>input.empty()</code> (which is a <a href="http://eel.is/c++draft/expr.post#nt:postfix-expression" rel="nofollow noreferrer"><em>postfix-expression</em></a>), and <code>input[0] != ' '</code> and <code>input[0] != '\t'</code> (which are <a href="http://eel.is/c++draft/expr.eq#nt:equality-expression" rel="nofollow noreferrer"><em>equality-expression</em></a><em>s</em>).  I don't think people will take it wrong.</p></li>
<li><p>Your use of <code>size_t</code> instead of <code>int</code> is great.  In fact, <code>std::string::size_type</code> is guaranteed to be <code>size_t</code>.  However, you should use <code>std::size_t</code> instead of the unqualified <code>size_t</code>.  (See <a href="https://stackoverflow.com/q/32606023">When using C headers in C++, should we use functions from <code>std</code> or the global namespace?</a>)</p></li>
<li><p><code>s.substr(i)</code> is equivalent to <code>s.substr(i, s.size() - i)</code>, so instead of</p>

<pre><code>return input.substr(pos, (input.length() - pos));
</code></pre>

<p>It suffices to write</p>

<pre><code>return input.substr(pos);
</code></pre></li>
<li><p>You store the value of <code>i</code> to <code>pos</code>, break the loop, and then construct the return value based on <code>pos</code>.  This looks unnecessary to me.  Why don't you just directly return inside the loop when the desired <code>i</code> is found?</p></li>
</ol>

<p>With these applied, your code is already only three lines:</p>

<pre><code>for (std::size_t i = 0; i &lt; input.length(); i++)
    if (input[i] != ' ' &amp;&amp; input[i] != '\t')
        return input.substr(i);
</code></pre>

<p>(You still need to fix the <code>trim("    ") == "    "</code> bug.)</p>

<p>In fact, you can simply make use of the C++ standard library facilities and simplify your code even further:</p>

<pre><code>std::string trim_left(const std::string&amp; input)
{
    if (auto p = input.find_first_not_of(" \t"); p != std::string::npos)
        return input.substr(p);
    else
        return "";
}
</code></pre>

<p>If you cannot use C++17, move the declaration of <code>p</code> out of the <code>if</code> statement.</p>
    </div>