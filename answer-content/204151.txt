<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1><code>switch</code> vs. <code>if</code></h1>

<p>In</p>

<pre><code>        switch (rpgLevelGrid[i][j])
        {
        case 1:
            cout &lt;&lt; "X";
            break;
        default:
            cout &lt;&lt; "-";
        }
</code></pre>

<p>do not use switch when all you need is a regular <code>if</code>. Instead do</p>

<pre><code>        if (rpgLevelGrid[i][j])
        {
            cout &lt;&lt; "X";
        }
        else
        {
            cout &lt;&lt; "-";
        }
</code></pre>

<p>or even better do </p>

<pre><code>        cout &lt;&lt; (rpgLevelGrid[i][j] ? "X" : "-");
</code></pre>

<p>You could also fill the grid with the characters to print unless there is reason not to do so. Then you only do</p>

<pre><code>        cout &lt;&lt; rpgLevelGrid[i][j];
</code></pre>

<p>A third option for the output is to define a symbol table like</p>

<pre><code>const char symbols[] = "-X";
</code></pre>

<p>and use it like</p>

<pre><code>        cout &lt;&lt; symbols[rpgLevelGrid[i][j]];
</code></pre>

<h1>Initialisation</h1>

<p>Also our inner init loop is not consistent. you conditionally init with <code>1</code> on <code>i</code> but conditionally overwrite the previously initialized <code>0</code> with <code>1</code> on <code>j</code>. Wwhy not init all with <code>0</code> and overwrite the borders? That is less complex. So</p>

<pre><code>        switch (i) 
        {
        case 0: case 19:
            rpgLevelGrid[i][j] = 1;
            break;
        default:
            rpgLevelGrid[i][j] = 0;
            break;
        }

        switch (j)
        {
        case 0:
            rpgLevelGrid[i][j] = 1;
            break;
        case 19:
            rpgLevelGrid[i][j] = 1;
            break;
        }
</code></pre>

<p>becomes</p>

<pre><code>        rpgLevelGrid[i][j] = 0;
        if (i==0 || i==19 || j==0 || j==19)
        {
            rpgLevelGrid[i][j] = 1;
        }
</code></pre>

<h1>Number literals</h1>

<p>Still there are some magic numbers. We now define</p>

<pre><code>const int dim = 20;
</code></pre>

<p>and replace all literals in the code like </p>

<pre><code>int rpgLevelGrid[dim][dim];

for (int i = 0; i &lt; dim; i++) 

case dim-1:
</code></pre>

<p>or </p>

<pre><code>        if (i==0 || i==dim-1 || j==0 || j==dim-1)
</code></pre>

<h1>Functions</h1>

<p>Finally we pull out some code from main and provide two functions for init and print and end up in </p>

<pre><code>#include &lt;iostream&gt;

using namespace std;

const int dim = 20;

void init(int grid[dim][dim])
{
    for (int i = 0; i &lt; dim; i++) 
    {
        for (int j = 0; j &lt; dim; j++)
        {
            grid[i][j] = 0;
            if (i==0 || i==dim-1 || j==0 || j==dim-1)
            {
                grid[i][j] = 1;
            }
        }
    }
}

void print(int grid[dim][dim])
{
    const char symbols[] = "-X";
    for (int i = 0; i &lt; dim; i++)
    {
        for (int j = 0; j &lt; dim; j++)
        {
            cout &lt;&lt; symbols[grid[i][j]];
        }
        cout &lt;&lt; endl;
    }
}

int main()
{
    int rpgLevelGrid[dim][dim];

    init(rpgLevelGrid);
    print(rpgLevelGrid);
} 
</code></pre>

<p>That is a resonable result for a beginner.</p>
    </div>