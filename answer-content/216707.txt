<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>SRP</h2>
<p>As you noticed too, this one is fairly clear, your grouping of different sources of data under a single parser interface violates the single responsibility principle. Ideally, you should have a single interface which has a generic method (<code>parse</code>) which all your classes can implement. If that's not possible as the signatures for each method might be different, you should create interfaces for each one and implement said interface.</p>
<h2>LSP</h2>
<p>LSP has been covered extensively in <a href="https://stackoverflow.com/questions/56860/what-is-an-example-of-the-liskov-substitution-principle">this</a> SO post - which I advise that you take a look through. I have no intention to regurgitate what has previously been written, so again, I'll keep it brief. Liskov imposes certain standards, one of them being:</p>
<blockquote>
<p>No new exceptions should be thrown by methods of the subtype, except where those exceptions are themselves subtypes of exceptions thrown by the methods of the supertype.</p>
</blockquote>
<p>When you define the function <code>parseStream</code> in your interface <code>FileHandlerInterface</code>:</p>
<pre><code>/**
 * @param string   $type
 * @param resource $data
 *
 * @return array &gt;&gt;&gt;&gt; always return parsed data in one format
 */
public function parseStream(string $type, resource $data);
</code></pre>
<p>The return is specified as an array, it actually says <em>'always return parsed data in one format'</em>, so it seems that you were consciously aware of the principle but maybe in the heat of the moment you glanced over it further on. If we look in the <code>PriceFileHandler</code> class, you'll notice that you define the function with nothing but an exception as part of its body:</p>
<pre><code>/**
 * @param string   $type
 * @param resource $data
 *
 * @return array
 */
public function parseStream(string $type, resource $data)
{
    throw new Exception('doesn\'t support');
}
</code></pre>
<p>Yet, the return type that is documented for <em>this</em> definition is an array too. This falls under the undesired effects category that LSP warns against.</p>
<p>As far as OCP goes, I can't see anything right now, however, I'll revisit this again if I do see something.</p>
    </div>