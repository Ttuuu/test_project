<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There's a quite a lot to improve on this. Here are a couple of tips to get your started.</p>

<h3>Excessive comments</h3>

<p>Do these comments add anything new that isn't clear already?</p>

<blockquote>
<pre><code>private int rank;//represents the rank of a card
private int suit;//represents the suit of a card
private int value;//represents the value of a card
</code></pre>
</blockquote>

<p>They don't. In fact most of the other comments in the code don't add value either.
The best code doesn't need comments.
Look through all the comments in your code,
if they are not needed, then remove them,
if they are needed, then try to change the code in a way to not need comments.</p>

<h3>Making <code>Card</code> immutable</h3>

<p>Will it make sense for <code>rank</code>, <code>suit</code> and <code>value</code> to change in the lifetime of a <code>Card</code> instance? Probably not. So make these fields <code>final</code>.
There is a <code>setValue</code> method, which you don't need either.</p>

<p>Review the other classes too.
Make everything <code>final</code> that doesn't need to change or doesn't make sense to ever change.
This practice can help you spot some design bugs.</p>

<h3>Refer to types by interfaces</h3>

<p>You declare several lists like this:</p>

<blockquote>
<pre><code>ArrayList&lt;Card&gt; hand;
</code></pre>
</blockquote>

<p>Use the interface type instead:</p>

<pre><code>List&lt;Card&gt; hand;
</code></pre>

<h3>Consider <code>enum</code>s</h3>

<p>These variables are good candidates for <code>enum</code>s:</p>

<blockquote>
<pre><code>private static String[] ranks = {"Joker","Ace","Two","Three","Four","Five","Six","Seven","Eight","Nine","Ten","Jack","Queen","King"};
private static String[] suits = {"Clubs","Diamonds","Hearts","Spades"};
</code></pre>
</blockquote>

<p>Like this:</p>

<pre><code>enum Suit {
    Clubs,
    Diamonds,
    Hearts,
    Spades
}
</code></pre>

<p>If you want to iterate over the possible suits, you can do <code>for (Suit suit : Suit.values()) { ... }</code></p>

<h3>Magic numbers</h3>

<p>There are too many magic numbers in the code.
17, 10, 11, 4, ...
It would be better to put these in <code>public static final</code> variables with descriptive names, to clarify the purpose of these values,
have them together near the top of the code for easier control and flexibility to play with.</p>

<h3>Formatting</h3>

<p>The code doesn't follow the common formatting generated by the auto-format option of common IDEs like Eclipse and IntelliJ. I suggest to reformat the entire thing, to make the code look more familiar and easier to read for the majority of Java coders. In Eclipse the keyboard shortcut is Control-Shift-f</p>
    </div>