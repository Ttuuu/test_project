<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Overall feedback</h1>

<p>The code feels a bit overly-complex. For instance, it seems like a lot of overhead to make a function to get the colours object, and use that to create an object, when one could simply create an object. Also, having every function start with the letters <code>fun</code> feels foreign - presumably this is a familiar convention from other programming languages but it is rare to see in JavaScript code.</p>

<h2>Flaws</h2>

<h3>Checking the length of an element (or null) instead of value</h3>

<p>The code in <code>funUpdateColourSelector()</code> utilizes <code>document.querySelector()</code>, which either returns "the first Element within the document that matches the specified selector, or group of selectors " or "  If no matches are found, null is returned."<sup><a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector" rel="nofollow noreferrer">1</a></sup>. So the code below checks the length of the element:</p>

<blockquote>
<pre><code>let strElHexColour = document.querySelector("#elHexCol" + intFormElNo);
let elColourSelector = document.querySelector("#elFrmColourSelector" + intFormElNo);
if (strElHexColour.length != 7 ){
</code></pre>
</blockquote>

<p>Perhaps you intended to check the <em>value</em> property of that element? </p>

<h3>Extra closing span tag</h3>

<p>There is a superfluous closing tag: <code>&lt;/span&gt;</code>. Remove that to make the HTML more valid.</p>

<blockquote>
<pre><code>&lt;label id="elAvgColourTxt"&gt;#808080&lt;/span&gt;&lt;/label&gt;
</code></pre>
</blockquote>

<h1>Suggestions</h1>

<h3>Use <code>const</code> unless value needs to be re-assigned</h3>

<p>Many variables are declared with <code>let</code>, given a value and never re-assigned. It is recommended to default to using <code>const</code> and when a need for re-assignment arises (e.g. iterating in a loop, etc.) then use <code>let</code>. </p>

<h3>Cache DOM References in variables</h3>

<p>Querying for DOM elements (e.g. using <code>querySelector()</code>) is not very cheap. It is wise to store elements that get used frequently in a variable (perhaps using <code>const</code>) once the DOM is ready.</p>

<h3>Use <code>document.getElementById()</code> instead of <code>document.querySelector()</code></h3>

<p>Using <code>document.querySelector()</code> is like using a tank to hammer in a nail... well maybe not that extreme but along those lines. See <a href="https://jsperf.com/getelementbyid-vs-queryselector" rel="nofollow noreferrer">this jsPerf</a> for a comparison.</p>

<h3>Don't mix JavaScript in with the HTML</h3>

<p>This requires a bit of a rework (see code below) but it is wise to separate the layout/markup (HTML) from the logic (JavaScript). The functions called from the <em>onchange</em> attributes can be moved into a callback fired whenever a change is fired on the document:</p>

<pre><code>document.body.addEventListener('change', event =&gt; {
    //use event.target as the input that was changed
});
</code></pre>

<p>Also notice in the code below that <em>name</em> attributes were added to the input elements and then those are used to find the sibling to update.</p>

<h3>Use more arrow functions</h3>

<p>Using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions" rel="nofollow noreferrer">arrow functions</a> can greatly reduce the number of lines required. For example, </p>

<blockquote>
<pre><code>function funHexToDec(strHexCode, intStart, intEnd){
    return parseInt(strHexCode.substring(intStart,intEnd), 16);
}
</code></pre>
</blockquote>

<p>Can be reduced to:</p>

<pre><code>const funHexToDec = (strHexCode, intStart, intEnd) =&gt; parseInt(strHexCode.substring(intStart,intEnd), 16);
</code></pre>

<h2>Rewrite</h2>

<p>See the code below that is dramatically simplified.</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const validateValue = value =&gt; {
  if (value.length != 7) {
    alert("HTML Hex colour codes are 7 characters in length and start with a # symbol");
    return false;
  }
    const intHashCheck = value.indexOf("#");
    if (intHashCheck != 0) {
      if (value.length == 6) {
        funErrorHandler("User inputted a colour code without the # symbol, prefixing entry.", "funUpdateColourSelector");
      } else {
        funErrorHandler("User inputted a colour code without the # symbol.", "funUpdateColourSelector");;
      }
      return false;
    }
    return true;
}

//pad values less than 10 with a leading 0
const padValue = value =&gt; value &lt; 10 ? '0' + value: value;
//convert hex to decimal
const hexToDec = (strHexCode, intStart, intEnd) =&gt; parseInt(strHexCode.substring(intStart, intEnd), 16);
//calculate average of hex numbers
const HEXAverage = (intValue1, intValue2) =&gt; {
  intAvg = Math.ceil((intValue1 + intValue2) / 2);
  return intAvg.toString(16);
}

document.addEventListener('DOMContentLoaded', _ =&gt; {
  //cache DOM references
  const elColourBox = document.getElementById("elAvgColour");
  const elAvgColourLabel = document.getElementById("elAvgColourTxt");
  document.body.addEventListener('change', event =&gt; {
    if (!validateValue(event.target.value)) {
      event.target.focus();
      return;
    }
    let siblingName;
    if (event.target.name.indexOf('color') &gt; -1) {
      siblingName = event.target.name.replace('color', 'text');
    } else {
      siblingName = event.target.name.replace('text', 'color');
    }
    const siblingInput = document.forms[0].elements[siblingName];
    siblingInput.value = event.target.value;
    funCalculateMeanColour();
  });

  function funCalculateMeanColour(elMeanColour) {
    const strHexColour1 = document.forms[0].elements.colorInput1.value;
    const strHexColour2 = document.forms[0].elements.colorInput2.value;
    const r1 = hexToDec(strHexColour1, 1, 3);
    const g1 = hexToDec(strHexColour1, 3, 5);
    const b1 = hexToDec(strHexColour1, 5, 7);
    const r2 = hexToDec(strHexColour2, 1, 3);
    const g2 = hexToDec(strHexColour2, 3, 5);
    const b2 = hexToDec(strHexColour2, 5, 7);
    const r3 = HEXAverage(r1, r2);
    const g3 = HEXAverage(g1, g2);
    const b3 = HEXAverage(b1, b2);
    const strHex = "#" + padValue(r3) + padValue(g3) + padValue(b3);
    elColourBox.style.background = strHex;
    elAvgColourLabel.innerHTML = strHex;
  }
});

function funErrorHandler(errString, elName) {
  console.log("Error:");
  console.log(errString);
  console.log("Element: " + elName);
}</code></pre>
<pre class="snippet-code-css lang-css prettyprint-override"><code>/* Task 1 */

div#frmColorContainer {
  padding: 10px;
  border-style: inset;
  border-width: 1px;
  border-color: #C0C0C0;
  background: silver;
  border-radius: 7px;
  width: 300px;
  height: 84px;
  font-family: arial;
}

div#elAvgColour {
  position: absolute;
  left: 340px;
  top: 10px;
  border: 2px solid grey;
  background: #808080;
  height: 100px;
  width: 100px;
}

label#elAvgColourTxt {
  position: relative;
  top: 6px;
}

label#elAvgColourTxt::before {
  content: 'Average Colour: ';
}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;form id="frmEls" method="get"&gt;
  &lt;div id="frmColorContainer"&gt;
    &lt;label&gt;Colours:&lt;/label&gt;
    &lt;label&gt;HEX:&lt;/label&gt;&lt;br&gt;
    &lt;label&gt;Colour 1:&lt;/label&gt;&lt;input type="color" id="elFrmColourSelector1" value="#000000" title="Colour 1" name="colorInput1"&gt;&amp;nbsp;&lt;input type="text" id="elHexCol1" value="#000000" maxlength=7 name="textInput1"&gt;&lt;br&gt;
    &lt;label&gt;Colour 2:&lt;/label&gt;&lt;input type="color" id="elFrmColourSelector2" value="#FFFFFF" title="Colour 2" name="colorInput2"&gt;&amp;nbsp;&lt;input type="text" id="elHexCol2" value="#FFFFFF" maxlength=7 name="textInput2"&gt;
    &lt;label id="elAvgColourTxt"&gt;#808080&lt;/label&gt;
  &lt;/div&gt;
&lt;/form&gt;
&lt;div id="elAvgColour"&gt;
&lt;/div&gt;</code></pre>
</div>
</div>


<p><sup>1</sup><sub><a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector" rel="nofollow noreferrer">https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector</a></sub></p>
    </div>