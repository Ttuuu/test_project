<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You can reduce your code duplication a bit. First, the way you are currently using the <code>ckin</code> function is like this:</p>

<pre><code>name = input("Enter a name").strip()
name = ckin(name)
</code></pre>

<p>Wouldn't it be nicer to be able to do:</p>

<pre><code>name = ask_user("Enter a name: ")
</code></pre>

<p>For this, just modify your function like this:</p>

<pre><code>def ask_user(message=""):
    user_input = ""
    while not user_input:
        user_input = input(message).strip()
    return user_input
</code></pre>

<p>Note that I renamed it (to make it clearer what it does), used the fact that empty strings are falsy and added whitespace around the <code>=</code> operator, as recommended by Python's official style-guide, <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP8</a>.</p>

<hr>

<p>Going further, you should get into the habit of defining clearly named functions for separate things.</p>

<p>One such concern is getting a pre-populated username list. Currently this list is populated with user input, but this might change in the future. So it would be nice to bundle that part all together in one function:</p>

<pre><code>def get_users():
    # creates a users set, which always includes admin
    users = {'admin'}

    #Ask for 5 names to store as usernames
    print('Please enter 5 unique user names: ')
    while len(users) &lt; 6:
        users.add(ask_user("Enter a valid user name: ").lower())
    return users
</code></pre>

<p>Note that I made the datastructure a <code>set</code> here, which gives you \$\mathcal{O}(1)\$ time complexity for <code>in</code> tests. I also made sure that there are actually 5 + 1 users (in other words, user names need to be unique). I also put the <code>str.lower</code> transformation here so we don't need to do it later and only store the canonical user name.</p>

<hr>

<p>Next is a login function, that asks for a username until a valid one is entered:</p>

<pre><code>def login(users):
    user_name = None
    while user_name not in users:
        user_name = ask_user("Enter login name: ").lower()
    return user_name
</code></pre>

<hr>

<p>And then, the greeting. Instead of iterating over all users until you reached the user that is currently logging in, use the fact that we already know that the user is in <code>users</code> (since we explicitly checked for that in <code>login</code>). So this becomes a simple <code>if..else</code> check:</p>

<pre><code>def print_greeting(user_name):
    if user_name == 'admin':
        print('Hello admin, would you like to see a status report?')
    else:
        print(f'Hello {user_name}, thank you for logging in again')
</code></pre>

<p>Here I used an <a href="https://docs.python.org/3/whatsnew/3.6.html#whatsnew36-pep498" rel="nofollow noreferrer"><code>f-string</code></a>, as introduced in Python 3.6, to make the string formatting a bit easier.</p>

<hr>

<p>And finally, tying it all together in a <code>main</code> function:</p>

<pre><code>def main():
    users = get_users()
    user_name = login(users)
    print_greeting(user_name)

if __name__ == "__main__":
    main()
</code></pre>

<p>Note that I call this <code>main</code> function only under a <a href="https://stackoverflow.com/questions/419163/what-does-if-name-main-do"><code>if __name__ == "__main__":</code> guard</a>. This ensures that the <code>main</code> function does not run if you import from this script in another script.</p>
    </div>