<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Simplifying</h3>

<p>If you replace </p>

<blockquote>
<pre><code>    boolean isUgly=false;
    if(num&gt;0){
        isUgly=true;
</code></pre>
</blockquote>

<p>with </p>

<pre><code>    if (num &lt;= 0) {
        return false;
    }
</code></pre>

<p>and </p>

<blockquote>
<pre><code>    return isUgly;
</code></pre>
</blockquote>

<p>with </p>

<pre><code>    return true;
</code></pre>

<p>Then you don't have to manage the extra <code>isUgly</code> variable, and you avoid a level of indent over most of the method.  </p>

<p>I also added some extra whitespace around operators, before <code>(</code>, and after <code>)</code>.  This makes it easier to see where things begin and end.  The compiler won't care (it throws away most whitespace anyway), but for human beings it makes the code more readable.  </p>

<h3>Prime factorization by trial division</h3>

<p>I tend to agree that this isn't a problem that should be solved by prime factorization, but other problems should.  </p>

<blockquote>
<pre><code>        Set&lt;Integer&gt; set = new HashSet&lt;&gt;();

        for(int i=2;i&lt;=num;i++){
            while(num%i==0){
                num=num/i;
                set.add(i);
            }
        }
</code></pre>
</blockquote>

<p>Consider </p>

<pre><code>    Set&lt;Integer&gt; factors = new HashSet&lt;&gt;();

    for (int i = 2; i * i &lt;= num; i++) {
        if (num % i == 0) {
            do {
                num /= i;
            } while (num % i == 0);

            factors.add(i);
        }
    }

    // Any remaining num must be a prime factor, 
    // as divisors must come in pairs, one less than or equal to the square root
    // one greater than or equal to the square root.  
    // Since any number less than the square root was already checked, 
    // this pair must be 1 and the num.  
    // If num is not 1, then it is a prime factor.
    if (num &gt; 1) {
        factors.add(num);
        num = 1;
    }
</code></pre>

<p>This way you only check \$\mathcal{O}(\sqrt{n})\$ factors at most.  </p>

<p>Combining the <code>if</code> with the <code>do</code>/<code>while</code> means that we only try to add <code>i</code> to <code>factors</code> once, where the original code would try to add it as many times as it appeared.  </p>

<p>The <code>num /= i</code> is more idiomatic and shorter than writing <code>num = num / i</code> but does the same thing.  </p>

<p>We can cut the number of factors in half by moving the check for 2 out of the <code>for</code> loop.  </p>

<p>First, a helper method.  </p>

<pre><code>public int updateFactor(int number, int candidate, Set&lt;Integer&gt; factors) {
    if (number % candidate == 0) {
        do {
            number /= candidate;
        } while (number % candidate == 0);

        factors.add(candidate);
    }

    return number;
}
</code></pre>

<p>Then we can replace the <code>for</code> loop with </p>

<pre><code>    num = updateFactor(num, 2, factors);
    for (int i = 3; i * i &lt;= num; i += 2) {
        num = updateFactor(num, i, factors);
    }
</code></pre>

<p>This works because 2 is the only even prime.  </p>

<p>If we don't mind complexity, we can keep going.  </p>

<pre><code>    num = updateFactor(num, 2, factors);
    num = updateFactor(num, 3, factors);

    int increment = 4;
    for (int i = 5; i * i &lt;= num; i += increment) {
        num = updateFactor(num, i, factors);
        increment = 6 - increment;
    }
</code></pre>

<p>This alternates between adding 2 (6 - 4) and 4 (6 - 2), so <code>i</code> has values </p>

<blockquote>
  <p>5, 7, 11, 13, 17, 19, 23, 25, 29, 31, ...</p>
</blockquote>

<p>Notice how it skips 9, 15, 21, 27, 33, etc.  All those are divisible by 3 and thus can't be prime factors.  </p>

<p>This may be faster, although the added complexity could offset that.  </p>

<p>Back to something related to this problem.  </p>

<h3>Characteristics of numbers</h3>

<p>Before we get to it, I agree with your decision to use curly brackets even when there is only one statement in the then block.  Doing so consistently helps avoid certain bugs and makes viewing edits in source control easier in the future.  </p>

<blockquote>
<pre><code>                if(n!=2 &amp;&amp; n!=3 &amp;&amp; n!=5){
                    return false;
                }
</code></pre>
</blockquote>

<p>We know that <code>n</code> can never be 4, as we 4 would never divide the number after we removed all the 2s.  In fact, <code>n</code> would never be less than 2, as that's where we start.  So consider </p>

<pre><code>            if (n &gt; 5) {
                return false;
            }
</code></pre>

<p>Because <code>n</code> can only be 2, 3, 5, and numbers larger than 5, this has the same effect as the original with fewer comparisons.  </p>

<p>But we can do this even easier in the trial division loop </p>

<blockquote>
<pre><code>        Set&lt;Integer&gt; set = new HashSet&lt;&gt;();

        for(int i=2;i&lt;=num;i++){
            while(num%i==0){
                num=num/i;
                set.add(i);
            }
        }
</code></pre>
</blockquote>

<p>could be </p>

<pre><code>    for (int i = 2; i &lt;= LARGEST_UGLY_FACTOR; i++) {
        while (num % i == 0) {
            num /= i;
        }
    }

    return num == 1;
</code></pre>

<p>And we don't need the rest of the method or the <code>set</code> variable.  </p>

<p>You do need something like </p>

<pre><code>public static final int LARGEST_UGLY_FACTOR = 5;
</code></pre>

<p>This would allow you to change the constant to support alternative versions of ugly numbers, e.g. only divisible by 2, 3, 5, and 7.  Of course, it's not complicated enough to handle definitions like only divisible by 2, 5, and 7.  </p>

<p>This is essentially the same as <a href="https://codereview.stackexchange.com/a/163323/71574">this solution</a> in a more expandable way.  This would be slightly less efficient at runtime.  </p>
    </div>