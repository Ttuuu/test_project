<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>For reasons laid out in <a href="https://stackoverflow.com/questions/21832809/php-singleton-database-connection-pattern">this stackoverflow question</a>  the singleton design pattern is not good match for PHP! </p>

<h2>Clone Prevention</h2>

<p>The advice from <a href="https://stackoverflow.com/a/21832927/1575353">the accepted answer</a> to the above stackoverflow question gives is to stop callers from cloning your object by adding a magic method like so:</p>

<pre><code>public function __clone() {
    throw new Exception("Can't clone a singleton");
}
</code></pre>

<p>Your code will return <code>false</code>. <code>false</code> can be ignored / overlooked by programmers quite easily so I would stick to throwing an exception which is more explicit!</p>

<h2>The Database Class</h2>

<p>According to the <a href="https://secure.php.net/manual/en/language.oop5.magic.php#object.wakeup" rel="nofollow noreferrer">php manual</a></p>

<blockquote>
  <p>The intended use of <a href="https://php.net/manual/en/language.oop5.magic.php#object.wakeup" rel="nofollow noreferrer">__wakeup()</a> is to reestablish any database
  connections that may have been lost during serialization and perform
  other reinitialization tasks.</p>
</blockquote>

<p>Seeing as your class doesn't do that I can't see the value in the <code>__wakeup</code> method at all. There is a quote that is something along the lines of "don't write code you don't need now, because you won't in the future". </p>

<h2>Chaining methods</h2>

<p>As your <code>getInstance</code> method just returns an instance of the <code>Database</code> class and the method <code>getConnection</code> is public you can chain the calls like so:</p>

<pre><code>$this-&gt;db = Database::getInstance()-&gt;getConnection();
</code></pre>

<h2>PDO Exceptions</h2>

<p>Make sure when setting up your PDO error mode to throw exceptions; this will prevent instances of trying to chain functions based on objects that fail to setup correctly.</p>

<h2>Conclusion</h2>

<p>If its not impractical too I would recommend (based on personal biases) that you drop the singleton pattern and move towards dependency injection simply because its easier to test and easier to get your head around!  </p>
    </div>