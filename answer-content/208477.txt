<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The code is correct. However, I still have some recommendations:</p>

<ol>
<li><p>Sort the includes, so you can easily spot recurring/missed ones</p>

<pre><code>#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;map&gt;
#include &lt;utility&gt;
#include &lt;vector&gt;
</code></pre></li>
<li><p>You do not need to run the loop, you can simply pass the map to the <code>std::vector</code> constructor. As you use structured bindings and therewith at least C++17, I suggest Template Argument Deduction to omit the type of the vector</p>

<pre><code>std::vector items(freq.begin(), freq.end());
</code></pre></li>
<li><p>The comparison function takes the arguments by copy, which is not optimal. Rather use <code>const auto&amp;</code>:</p>

<pre><code>[] (const auto&amp; a, const auto&amp; b) { return a.second &gt; b.second;})
</code></pre></li>
<li><p>Note that <code>std::sort</code> may change the ordering of elements with equal value. If you want those elements with equal frequency to appear in the same order than in the map you would need <code>std::stable_sort</code>. However, keep in mind that this requires additional resources in memory and compute time.</p></li>
<li><p>You are using a <code>std::map</code>, which is an ordered container. If you are only interested in the frequencies then a <code>std::unordered_map</code> will generally offer better performance. Although for a simple alphabet this will most likely be negligible.</p></li>
</ol>
    </div>