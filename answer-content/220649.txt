<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Getters and setters</h3>
<p>So there is a getter for item (i.e. <code>get_item()</code>) - why not a getter (and setter) for the <code>next</code> property? If getters and setters are added, then those properties could be set to <code>private</code> visibility if deemed appropriate.</p>
<p>Are you familiar with the <a href="https://www.php-fig.org/psr/" rel="nofollow noreferrer">PHP Standards Recommendations</a>? While it is only a suggestion, you might find them helpful for writing code that is maintainable and readable, not only for others but also your future self.</p>
<p>According to <a href="https://www.php-fig.org/psr/psr-1/" rel="nofollow noreferrer">PSR-1</a>:</p>
<blockquote>
<p>Method names MUST be declared in <code>camelCase()</code>.<sup><a href="https://www.php-fig.org/psr/psr-1/#43-methods" rel="nofollow noreferrer">1</a></sup></p>
</blockquote>
<p>A format of <code>getItem()</code> is more widely used amongst many PHP developers.</p>
<h3>Types and conditions</h3>
<p>Inside <code>Queue::push()</code> and <code>Queue::pop()</code> I see this common first line:</p>
<blockquote>
<pre><code>if ($this-&gt;size == 0) {
</code></pre>
</blockquote>
<p>It is advisable to use strict equality comparison operators (i.e. <code>===</code> and <code>!==</code>) to avoid excess type-juggling. As a consequence, <code>size</code> should perhaps be declared with a initial value of <code>0</code>.</p>
<p>The conditional could also be shortened to <code>if (!$this-&gt;size) {</code> though that would allow any type that is considered to <strong><code>FALSE</code></strong> to allow the conditional block to be executed.</p>
<h3>keyword <code>var</code></h3>
<p><code>var</code> is a feature from PHP 4 and it isn't needed anymore<sup><a href="https://stackoverflow.com/a/1206120/1575353">2</a></sup> - while it works as a synonym for <code>public</code> it is deprecated. If you adhere to <a href="https://www.php-fig.org/psr/psr-2/" rel="nofollow noreferrer">PSR-2</a> then note it specifies:</p>
<blockquote>
<p>The <code>var</code> keyword MUST NOT be used to declare a property.<sup><a href="https://www.php-fig.org/psr/psr-2/#42-properties" rel="nofollow noreferrer">3</a></sup></p>
</blockquote>
<h3><code>for</code> loops</h3>
<p>There isn't anything wrong with a traditional loop, but you could use the <a href="https://php.net/range" rel="nofollow noreferrer"><code>range()</code></a> function to iterate <code>$i</code> for you in a <code>foreach</code> loop:</p>
<blockquote>
<pre><code>for ($i = 1; $i &lt;= 10; $i++) {
</code></pre>
</blockquote>
<p>can be changed to:</p>
<pre><code>foreach(range(1, 10) as $i) {
</code></pre>
    </div>