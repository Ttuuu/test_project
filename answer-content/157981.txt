<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>   Type type = input.GetType();
   MemberInfo[] memInfo = type.GetMember(input.ToString());
</code></pre>
</blockquote>

<p>You should use more meaningful variable names like <code>enumType</code> and <code>enumMembers</code> and your code could use some more LINQ and <code>var</code>s.</p>

<hr>

<blockquote>
<pre><code>if (memInfo != null &amp;&amp; memInfo.Length &gt; 0)
</code></pre>
</blockquote>

<p>This null check is unnecessary. The docs says about <code>GetMember</code>:</p>

<blockquote>
  <p>An array of MemberInfo objects representing the public members with the specified name, if found; <strong>otherwise, an empty array</strong>.</p>
</blockquote>

<p>So we can remove one null check and test only the description-attribute and turn it into a ternary operator:</p>

<pre><code>public static string GetDescription(System.Enum value)
{
    var enumMember = value.GetType().GetMember(value.ToString()).FirstOrDefault();
    var descriptionAttribute = 
        enumMember == null 
            ? default(DescriptionAttribute) 
            : enumMember.GetCustomAttribute(typeof(DescriptionAttribute)) as DescriptionAttribute;
    return 
        descriptionAttribute == null 
            ? value.ToString() 
            : descriptionAttribute.Description;
}
</code></pre>

<hr>

<blockquote>
  <p>I think this code can be more elegant</p>
</blockquote>

<p>With C# 6 it can be just a <em>small</em> chain of method calls...</p>

<pre><code>public static string GetDescription(Enum value)
{
    return
        value
            .GetType()
            .GetMember(value.ToString())
            .FirstOrDefault()
            ?.GetCustomAttribute&lt;DescriptionAttribute&gt;()
            ?.Description
        ?? value.ToString();        
}
</code></pre>
    </div>