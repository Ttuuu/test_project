<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are two possible rewrites. For the first one, notice how <code>Hmisc::rcorr</code> already computes correlations (<code>$r</code>) and p-values (<code>$P</code>) matrices so you can base all your work from it, provided you extract the rights rows (<code>a_vars</code>) and columns (<code>b_vars</code>) and only keep the diagonal values:</p>

<pre><code>correlations &lt;- rcorr(as.matrix(all_items), type = "spearman")
a_vars &lt;- ends_with("a", vars = names(all_items))
b_vars &lt;- ends_with("b", vars = names(all_items))
all_correlation &lt;- data.frame(
  item    = seq_along(a_vars),
  Result  = diag(correlations$r[a_vars, b_vars]),
  P_Valor = diag(correlations$P[a_vars, b_vars])
)
</code></pre>

<p>What I don't like too much about this approach is that it only uses 3 of the 36 correlations that were computed by <code>rcorr</code>. In this second approach, I start by splitting the data into two tables (one for <code>a</code> and one for <code>b</code>) so as to compute only 3 correlations via <code>Map</code>. I also switched from <code>rcorr</code> to the base <code>cor.test</code> which has (IMO) a more intuitive behavior: when given two vectors as input, it computes one correlation, not four.</p>

<pre><code>a &lt;- all_items %&gt;% select(ends_with("a"))
b &lt;- all_items %&gt;% select(ends_with("b"))
cor_test &lt;- Map(cor.test, a, b)
all_correlation &lt;- data.frame(
  item    = seq_along(a),
  Result  = sapply(cor_test, `[[`, "estimate"),
  P_Valor = sapply(cor_test, `[[`, "p.value")
)
</code></pre>
    </div>