<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I feel like the <code>datetime</code> module isn't really doing much to help you.  By using it, you avoid performing arithmetic and hard-coding constants <code>86400</code>, <code>3600</code>, and <code>60</code>.  However, in exchange, you end up hard-coding the accessors <code>.day</code>, <code>.hour</code>, <code>.minute</code>, and <code>.second</code>, in such a way that you have to write similar code four times, with no easy way to generalize them.  Attempts at generalization are further complicated by the fact that you need <code>d.day-1</code>, due to the way that you have abused <code>datetime</code> addition as a trick to convert the <code>timedelta</code> object into a <code>datetime</code> object.</p>

<p>Your output includes a trailing space, which I consider to be an annoyance.  One way to avoid that would be to use <a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow noreferrer"><code>' '.join(â€¦)</code></a>.  On the other hand, if <code>sec</code> is <code>0</code>, then the function would return an empty string, which is also unintuitive.  I would prefer <code>0s</code> as output in that special case.</p>

<p>In my opinion, you would be no worse off doing all of the arithmetic and formatting yourself, without the use of the <code>datetime</code> module.</p>

<pre><code>def format_seconds(sec):
    def repeatedly(f, xs, n):
        for x in xs:
            m, n = f(n, x)
            yield m
    return ' '.join(
        '{}{}'.format(n, unit)
        for n, unit in zip(
            repeatedly(divmod, [86400, 3600, 60, 1], sec),
            'dhms'
        )
        if n
    ) or '0s'
</code></pre>
    </div>