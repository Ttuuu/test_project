<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As <a href="https://codereview.stackexchange.com/questions/191838/tweaking-this-pong-game-to-embed-a-smarter-ai#comment368304_191838">Phrancis alluded to in the comment</a>, this review pertains to the existing code and has no remarks about the AI.</p>

<h2>Feedback</h2>

<p>The game appears to function well, and the code appears to be organized somewhat well. The CSS and HTML are very simple but sufficient. </p>

<h2>Suggestions</h2>

<ul>
<li><p><strong>Instance/Prototype Methods</strong>: 
It would be much more efficient to define the methods on the prototypes instead of attaching to each instance. That way each method is declared only once instead of once per each instance. That would have huge impacts on the memory used by the browser. For more information about that topic, read about it in <a href="https://www.thecodeship.com/web-development/methods-within-constructor-vs-prototype-in-javascript/" rel="nofollow noreferrer">this post</a>.</p>

<p>The code would need to be re-worked to use either more instance variables or variables with scope larger than the current functions/closures.</p>

<p>Because <a href="/questions/tagged/ecmascript-6" class="post-tag" title="show questions tagged 'ecmascript-6'" rel="tag">ecmascript-6</a> features like arrow functions and the <code>let</code> keyword are used, the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes" rel="nofollow noreferrer">class</a> notation could be used also.</p></li>
<li><strong>Indentation</strong>: some lines are indented with four spaces while others are indented with tab characters. It is simple to see when pasted into the code blocks here- e.g. the first line of the <code>Pong()</code> constructor looks like it is indented with 8 spaces but upon further inspection it appears that it is a tab character.</li>
<li><strong><code>const</code> vs <code>let</code></strong>: - it appears that <code>let</code> is used exclusively. It is wise to use <code>const</code> for any value that shouldn't get re-assigned - especially constant values. This can help avoid unintentional re-assignment.</li>
<li><strong>CONSTANT NAMES</strong>: Most style guides recommend constant values have all capital letters in the name - e.g. <code>ghostspeed</code> would be changed to <code>GHOST_SPEED</code>. The code already has <code>WIDTH</code> and <code>HEIGHT</code> but those almost seem excessive - the code could just use <code>canvas.width</code> and <code>canvas.height</code> in their place.</li>
<li><strong>variable names</strong>: most <a href="https://codeburst.io/5-javascript-style-guides-including-airbnb-github-google-88cbc6b2b7aa" rel="nofollow noreferrer">JS style guides</a> recommend using <code>camelCase</code> for variable names and <code>ProperCase</code> for class names/constructor methods. </li>
<li><p><strong><code>for...of</code> loops</strong>: could be used to simplify looping - e.g. </p>

<blockquote>
<pre><code>for (let particle in Particles) {
    Particles[particle].draw();
}
</code></pre>
</blockquote>

<p>could be simplified to:</p>

<pre><code>for (const particle of Particles) {
    particle.draw();
}
</code></pre></li>
</ul>
    </div>