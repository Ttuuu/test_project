<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Inspired by JanDotNet's answer, I have made an attempt at improving the OP's code using best practices. I am using both the <a href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93viewmodel" rel="nofollow noreferrer">M-V-VM</a> and <a href="https://en.wikipedia.org/wiki/Finite-state_machine" rel="nofollow noreferrer">State Machine</a> pattern.</p>

<p><strong>View</strong></p>

<p>The calculator view is no longer a part of <code>MainWindow</code>.</p>

<p><em>MainWindow</em></p>

<pre><code>&lt;Window x:Class="Calculator.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:view="clr-namespace:Calculator.Views"
        Title="Calculator" Height="500" Width="300"&gt;
    &lt;Grid&gt;
        &lt;view:CalculatorView /&gt;
    &lt;/Grid&gt;
&lt;/Window&gt;
</code></pre>

<p><em>CalculatorView</em></p>

<p>Styles, commands, command parameters are refactored into best practices. Styles are moved into <a href="https://docs.microsoft.com/en-us/windows/uwp/design/controls-and-patterns/resourcedictionary-and-xaml-resource-references" rel="nofollow noreferrer">resource dictionaries</a>. Commands are plumbed with the command pattern of <a href="https://docs.telerik.com/data-access/quick-start-scenarios/wpf/quickstart-wpf-viewmodelbase-and-relaycommand" rel="nofollow noreferrer">Telerik</a>. Command parameters are type-casted for convenience in order for the view model and model not to parse strings.</p>

<pre><code>&lt;UserControl x:Class="Calculator.Views.CalculatorView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:view="clr-namespace:Calculator.Views"
             xmlns:viewModel="clr-namespace:Calculator.ViewModels"
             xmlns:model="clr-namespace:Calculator.Models"
             mc:Ignorable="d" 
             d:DesignHeight="500" d:DesignWidth="300"&gt;
    &lt;Grid Margin="8"&gt;
        &lt;Grid.ColumnDefinitions&gt;
            &lt;ColumnDefinition/&gt;
            &lt;ColumnDefinition/&gt;
            &lt;ColumnDefinition/&gt;
            &lt;ColumnDefinition/&gt;
        &lt;/Grid.ColumnDefinitions&gt;
        &lt;Grid.RowDefinitions&gt;
            &lt;RowDefinition Height="1.5*"/&gt;
            &lt;RowDefinition/&gt;
            &lt;RowDefinition/&gt;
            &lt;RowDefinition/&gt;
            &lt;RowDefinition/&gt;
            &lt;RowDefinition/&gt;
        &lt;/Grid.RowDefinitions&gt;

        &lt;Label x:Name="result" Content="0" Grid.ColumnSpan="4" HorizontalAlignment="Right" VerticalAlignment="Bottom" FontSize="50"/&gt;

        &lt;Button Content="AC" Grid.Column="0" Grid.Row="1"
                Style="{StaticResource OperationButton}" Command="{Binding OperationCommand}" 
                CommandParameter="{x:Static model:Operation.ClearAll}" /&gt;
        &lt;Button Content="+/-" Grid.Column="1" Grid.Row="1"
                Style="{StaticResource OperationButton}" Command="{Binding OperationCommand}" 
                CommandParameter="{x:Static model:Operation.Negate}" /&gt;
        &lt;Button Content="%" Grid.Column="2" Grid.Row="1"
                Style="{StaticResource OperationButton}" Command="{Binding OperationCommand}" 
                CommandParameter="{x:Static model:Operation.Modulo}" /&gt;
        &lt;Button Content="รท" Grid.Column="3" Grid.Row="1"
                Style="{StaticResource OperationButton}" Command="{Binding OperationCommand}" 
                CommandParameter="{x:Static model:Operation.Divide}" /&gt;

        &lt;Button Content="7" Grid.Column="0" Grid.Row="2"
                Style="{StaticResource NumericButton}" Command="{Binding NumericCommand}" 
                CommandParameter="7" /&gt;
        &lt;Button Content="8" Grid.Column="1" Grid.Row="2"
                Style="{StaticResource NumericButton}" Command="{Binding NumericCommand}" 
                CommandParameter="8" /&gt;
        &lt;Button Content="9" Grid.Column="2" Grid.Row="2"
                Style="{StaticResource NumericButton}" Command="{Binding NumericCommand}" 
                CommandParameter="9" /&gt;
        &lt;Button Content="ร" Grid.Column="3" Grid.Row="2"
                Style="{StaticResource OperationButton}" Command="{Binding OperationCommand}" 
                CommandParameter="{x:Static model:Operation.Multiply}" /&gt;

        &lt;Button Content="4" Grid.Column="0" Grid.Row="3"
                Style="{StaticResource NumericButton}" Command="{Binding NumericCommand}" 
                CommandParameter="4" /&gt;
        &lt;Button Content="5" Grid.Column="1" Grid.Row="3"
                Style="{StaticResource NumericButton}" Command="{Binding NumericCommand}" 
                CommandParameter="5" /&gt;
        &lt;Button Content="6" Grid.Column="2" Grid.Row="3"
                Style="{StaticResource NumericButton}" Command="{Binding NumericCommand}" 
                CommandParameter="6" /&gt;
        &lt;Button Content="-" Grid.Column="3" Grid.Row="3"
                Style="{StaticResource OperationButton}" Command="{Binding OperationCommand}" 
                CommandParameter="{x:Static model:Operation.Subtract}" /&gt;

        &lt;Button Content="1" Grid.Column="0" Grid.Row="4"
                Style="{StaticResource NumericButton}" Command="{Binding NumericCommand}" 
                CommandParameter="1" /&gt;
        &lt;Button Content="2" Grid.Column="1" Grid.Row="4"
                Style="{StaticResource NumericButton}" Command="{Binding NumericCommand}" 
                CommandParameter="2" /&gt;
        &lt;Button Content="3" Grid.Column="2" Grid.Row="4"
                Style="{StaticResource NumericButton}" Command="{Binding NumericCommand}" 
                CommandParameter="3" /&gt;
        &lt;Button Content="+" Grid.Column="3" Grid.Row="4"
                Style="{StaticResource OperationButton}" Command="{Binding OperationCommand}" 
                CommandParameter="{x:Static model:Operation.Add}" /&gt;

        &lt;Button Content="0" Grid.Column="0" Grid.Row="5" Grid.ColumnSpan="2"
                Style="{StaticResource NumericButton}" Command="{Binding NumericCommand}" 
                CommandParameter="0" /&gt;
        &lt;Button x:Name="dec" Content="." Grid.Column="2" Grid.Row="5"
                Style="{StaticResource OperationButton}" Command="{Binding OperationCommand}" 
                CommandParameter="{x:Static model:Operation.DecimalSeperator}" /&gt;
        &lt;Button Content="=" Grid.Column="3" Grid.Row="5"
                Style="{StaticResource OperationButton}" Command="{Binding OperationCommand}" 
                CommandParameter="{x:Static model:Operation.Equals}" /&gt;
    &lt;/Grid&gt;
&lt;/UserControl&gt;
</code></pre>

<p><em>CalculatorView (code-behind)</em></p>

<p>This is the entrypoint for plumbing the view model and model to the view. The view model attaches itself as <code>Datacontext</code> on the view (inside constructor of the view model). </p>

<pre><code>public partial class CalculatorView : UserControl, ICalculatorView
    {
        private CalculatorViewModel viewModel;

        public CalculatorView() {
            InitializeComponent();
            this.viewModel = new CalculatorViewModel(this, new SimpleCalculator());
        }

        public void Display(string value) {
            result.Content = value;
        }
    }
</code></pre>

<p><strong>ViewModel</strong></p>

<p>The view model is responsible for dispatching user events to the model and displaying evaluated data from the model to the view.</p>

<p><em>CalculatorViewModel</em></p>

<pre><code>public class CalculatorViewModel : ViewModelBase&lt;ICalculatorView&gt;
    {
        private ICommand operationCommand;
        private ICommand numericCommand;
        private ICalculator calculator;

        public CalculatorViewModel(ICalculatorView view, ICalculator calculator)
            : base(view) 
        {
            Guard.NotNull(calculator);
            this.calculator = calculator;
        }

        protected virtual void OnOperationCommand(Operation operation) {
            calculator.HandleOperationEvent(operation);
            View.Display(calculator.CurrentToken);
        }

        protected virtual void OnNumericCommand(int digit) {
            calculator.HandleNumericEvent(digit);
            View.Display(calculator.CurrentToken);
        }

        public ICommand OperationCommand {
            get {
                return this.operationCommand ?? (this.operationCommand
                    = new RelayCommand&lt;Operation&gt;(this.OnOperationCommand));
            }
        }

        public ICommand NumericCommand {
            get {
                return this.numericCommand ?? (this.numericCommand
                    = new RelayCommand&lt;int&gt;(this.OnNumericCommand));
            }
        }
    }
</code></pre>

<p><strong>Model</strong></p>

<p>The model is a simple calculator that uses states to process user input. Note that this part is the most complex and could still get improved:</p>

<ul>
<li>error handling (perhaps an error state)</li>
<li>unit tests (state machines tend to have alot of edge cases!)</li>
</ul>

<p><em>SimpleCalculator</em></p>

<pre><code>    /// &lt;remarks&gt;
    /// Implemented as a simple subset of an UML state machine: https://en.wikipedia.org/wiki/UML_state_machine
    /// with event processing, extended state and mealy/moore operations.
    /// &lt;/remarks&gt;
    public class SimpleCalculator : ICalculator
    {
        public SimpleCalculator() {
            Transition(new InitialState(this));
        }

        #region Event Processing

        public void HandleOperationEvent(Operation operation) {
            state.HandleOperationEvent(operation);
        }

        public void HandleNumericEvent(int digit) {
            state.HandleNumericEvent(digit);
        }

        public Operation DeferredOperation { get; internal set; }

        #endregion

        #region Extended State

        // only important if you want to send the evaluated result to some other API
        public decimal Result {
            get;
            internal set;
        }

        // this is what will be outputted on the view after each user input event
        public string CurrentToken {
            get;
            internal set;
        }

        #endregion

        #region State Machine

        private State state;

        internal void Transition(State newState) {
            Guard.NotNull(newState);
            if (state != null)
                state.Exit();
            state = newState;
            state.Enter();
        }

        protected decimal CurrentResult {
            get {
                return string.IsNullOrEmpty(CurrentToken) ? 0m
                    : decimal.Parse(CurrentToken.EndsWith(State.DecimalSeperator) 
                    ? CurrentToken.Substring(0, CurrentToken.Length - 1) : CurrentToken,
                    State.Formatter);
            }
        }

        protected void Negate() {
            if (CurrentResult != 0) {
                if (CurrentToken.StartsWith(State.NegateSymbol)) {
                    CurrentToken = CurrentToken.Substring(1);
                }
                else {
                    CurrentToken = State.NegateSymbol + CurrentToken;
                }
            }
        }

        protected void HandleDeferredOperation() {
            switch (DeferredOperation) {
                case Operation.Add:
                    Result += CurrentResult;
                    break;
                case Operation.Subtract:
                    Result -= CurrentResult;
                    break;
                case Operation.Multiply:
                    Result *= CurrentResult;
                    break;
                case Operation.Divide:
                    Result /= CurrentResult;
                    break;
                case Operation.Modulo:
                    Result %= CurrentResult;
                    break;
                default:
                    break;
            }
            Result = Math.Round(Result, 8);
            DeferredOperation = Operation.None;
            CurrentToken = Result.ToString(State.Formatter);
        }

        internal abstract class State
        {
            protected SimpleCalculator context;
            internal const string DecimalSeperator = ".";
            internal const string NegateSymbol = "-";
            internal readonly static IFormatProvider Formatter = new CultureInfo("en-US", false);

            protected internal State(SimpleCalculator context) {
                Guard.NotNull(context);
                this.context = context;
            }

            protected void ChangeState(State newState) {
                context.Transition(newState);
            }

            protected void ChangeToDecimalInputState(Operation operation) {
                var decimalState = new DecimalInputState(context);
                ChangeState(decimalState);
                decimalState.HandleOperationEvent(operation);
            }

            protected void ChangeToNumericInputState(int digit) {
                var newState = new NumericInputState(context);
                ChangeState(newState);
                newState.HandleNumericEvent(digit);
            }

            protected void ChangeToBinaryOperationState(Operation operation) {
                var binaryState = new BinaryOperationState(context);
                ChangeState(binaryState);
                binaryState.HandleOperationEvent(operation);
            }

            internal virtual bool HandleOperationEvent(Operation operation) 
            {
                switch (operation) {
                    case Operation.ClearAll:
                        ChangeState(new InitialState(context));
                        return true;
                    case Operation.Equals:
                        ChangeState(new EqualState(context));
                        return true;
                    case Operation.DecimalSeperator:
                        ChangeToDecimalInputState(operation);
                        return true;
                    case Operation.Add:
                    case Operation.Subtract:
                    case Operation.Multiply:
                    case Operation.Divide:
                    case Operation.Modulo:
                        ChangeToBinaryOperationState(operation);
                        return true;
                    case Operation.Negate:
                        context.Negate();
                        return true;
                }

                return false;
            }

            internal virtual bool HandleNumericEvent(int digit) {
                this.ChangeToNumericInputState(digit);
                return true; 
            }

            internal virtual void Enter() {}
            internal virtual void Exit() { }
        }

        internal sealed class InitialState : State
        {
            internal InitialState(SimpleCalculator context)
                : base(context) {
            }

            internal override bool HandleOperationEvent(Operation operation) {
                switch (operation) {
                    case Operation.ClearAll:
                        // let's stay in the current state, rather then triggering an
                        // external self transition
                        return true;
                    default:
                        return base.HandleOperationEvent(operation);
                }
            }

            internal override void Enter() {
                context.Result = 0m;
                context.CurrentToken = string.Empty;
                context.DeferredOperation = Operation.None;
            }
        }

        private sealed class EqualState : State
        {
            internal EqualState(SimpleCalculator context)
                : base(context) {
            }

            internal override void Enter() {
                context.HandleDeferredOperation();
            }

            internal override bool HandleOperationEvent(Operation operation) {
                switch (operation) {
                    case Operation.Negate:
                        // ignore
                        return true;
                    default:
                        return base.HandleOperationEvent(operation);
                }
            }
        }

        internal sealed class DecimalInputState : State
        {
            internal DecimalInputState(SimpleCalculator context)
                : base(context) {
            }

            internal override bool HandleOperationEvent(Operation operation) {
                switch (operation) {
                    case Operation.DecimalSeperator:
                        // ignore attempt to set another decimal seperator
                        if (!string.IsNullOrEmpty(context.CurrentToken)
                            &amp;&amp; !context.CurrentToken.Contains(State.DecimalSeperator)) 
                        {
                            context.CurrentToken += State.DecimalSeperator;
                        }
                        return true;
                    default:
                        return base.HandleOperationEvent(operation);
                }
            }

            internal override bool HandleNumericEvent(int digit) {
                if (context.CurrentResult == 0) {
                    // only output the decimal seperator once a number event is received
                    context.CurrentToken = "0";
                }
                if (!context.CurrentToken.Contains(State.DecimalSeperator)) {
                    context.CurrentToken += State.DecimalSeperator;
                }
                // append the digit to the current token
                context.CurrentToken += digit.ToString();
                return true;
            }

            internal override void Enter() {
                context.CurrentToken = string.Empty;
                base.Enter();
            }

            internal override void Exit() {
                if (context.DeferredOperation == Operation.None) {
                    context.Result = 0m;
                    context.DeferredOperation = Operation.Add;
                }
            }
        }

        private sealed class NumericInputState : State
        {
            internal NumericInputState(SimpleCalculator context)
                : base(context) {
            }

            internal override bool HandleNumericEvent(int digit) {
                if (context.CurrentResult == 0 &amp;&amp; digit == 0) {
                    // ignore 0 as prepend
                    return true;
                }
                // append the digit to the current token
                context.CurrentToken += digit.ToString();
                return true;
            }

            internal override void Enter() {
                context.CurrentToken = string.Empty;
                base.Enter();
            }

            internal override void Exit() {
                if (context.DeferredOperation == Operation.None) {
                    context.Result = 0m;
                    context.DeferredOperation = Operation.Add;
                }
            }
        }

        private sealed class BinaryOperationState : State
        {
            internal BinaryOperationState(SimpleCalculator context)
                : base(context) {
            }

            internal override void Enter() {
                context.HandleDeferredOperation();
            }

            internal override bool HandleOperationEvent(Operation operation) {
                switch (operation) {
                    case Operation.Negate:
                        // ignore
                        return true;
                    case Operation.Add:
                    case Operation.Subtract:
                    case Operation.Multiply:
                    case Operation.Divide:
                    case Operation.Modulo:
                        // store the deferred event
                        context.DeferredOperation = operation;
                        return true;
                    default:
                        return base.HandleOperationEvent(operation);
                }
            }
        }

        #endregion
    }
</code></pre>

<p><strong>Infrastructure</strong></p>

<p>An appendix of other classes and resources used.</p>

<pre><code>public enum Operation
    {
        None,
        ClearAll,
        Negate,
        Modulo,
        Divide,
        Multiply,
        Subtract,
        Add,
        DecimalSeperator,
        Equals,
    }

public interface ICalculator
    {
        void HandleOperationEvent(Operation operation);
        void HandleNumericEvent(int digit);
        decimal Result { get; }
        string CurrentToken { get; }
    }

public interface ICalculatorViewModel
    {
        ICalculatorView View { get; }
    }

public interface ICalculatorView : IView
    {
        void Display(string value);
    }

public interface IViewModel : INotifyPropertyChanged, IDisposable
    {
        IView View { get; }
    }

public interface IViewModel&lt;TView&gt; : IViewModel where TView : IView
    {
        new TView View { get; }
    }

public interface IView
    {
        object DataContext { get; set; }
    }

public abstract class ViewModelBase&lt;TView&gt; : IViewModel&lt;TView&gt;
        where TView : IView
    {
        public event PropertyChangedEventHandler PropertyChanged;
        private readonly TView view;

        public TView View {
            get {
                return this.view;
            }
        }

        protected ViewModelBase(TView view) {
            Guard.NotNull(view);
            this.view = view;
            this.View.DataContext = this;
        }

        protected virtual void RaisePropertyChanged(string propertyName) {
            var handler = this.PropertyChanged;
            if (handler != null) {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        IView IViewModel.View {
            get { return View; }
        }

        ~ViewModelBase() {
            Dispose(false);
        }

        public void Dispose() {
            Dispose(true);
        }

        protected virtual void Dispose(bool disposing) {
            if (disposing) {
                this.PropertyChanged = null;
            }
        }
    }

public class RelayCommand : ICommand
    {
        public event EventHandler CanExecuteChanged {
            add { 
                CommandManager.RequerySuggested += value;
            }
            remove { 
                CommandManager.RequerySuggested -= value; 
            }
        }

        private Action methodToExecute;
        private Func&lt;bool&gt; canExecuteEvaluator;

        public RelayCommand(Action methodToExecute, Func&lt;bool&gt; canExecuteEvaluator) {
            Guard.NotNull(methodToExecute);
            this.methodToExecute = methodToExecute;
            this.canExecuteEvaluator = canExecuteEvaluator;
        }

        public RelayCommand(Action methodToExecute)
            : this(methodToExecute, null) {
        }

        public bool CanExecute(object parameter) {
            return this.canExecuteEvaluator == null || this.canExecuteEvaluator.Invoke();
        }

        public void Execute(object parameter) {
            this.methodToExecute.Invoke();
        }
    }

    public class RelayCommand&lt;TParameter&gt; : ICommand
    {
        public event EventHandler CanExecuteChanged {
            add {
                CommandManager.RequerySuggested += value;
            }
            remove {
                CommandManager.RequerySuggested -= value;
            }
        }

        private Action&lt;TParameter&gt; methodToExecute;
        private Func&lt;TParameter, bool&gt; canExecuteEvaluator;

        public RelayCommand(Action&lt;TParameter&gt; methodToExecute, Func&lt;TParameter, bool&gt; canExecuteEvaluator) {
            Guard.NotNull(methodToExecute);
            this.methodToExecute = methodToExecute;
            this.canExecuteEvaluator = canExecuteEvaluator;
        }

        public RelayCommand(Action&lt;TParameter&gt; methodToExecute)
            : this(methodToExecute, null) {
        }

        private TParameter ConvertType(object parameter) {
          return parameter == null ? default(TParameter) 
              : (TParameter)Convert.ChangeType(parameter, typeof(TParameter));
        }

        public bool CanExecute(object parameter) {
            return this.canExecuteEvaluator == null
                || this.canExecuteEvaluator.Invoke(ConvertType(parameter));
        }

        public void Execute(object parameter) {
            this.methodToExecute.Invoke(ConvertType(parameter));
        }
    }

internal static class Guard
    {
        [DebuggerStepThrough]
        public static void NotNull(object value) {
            if (value == null) {
                throw new ArgumentNullException("The value must be set.");
            }
        }
    }

AppResources.xaml -&gt;

&lt;ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"&gt;
    &lt;ResourceDictionary.MergedDictionaries&gt;
        &lt;ResourceDictionary Source="Style.xaml" /&gt;
    &lt;/ResourceDictionary.MergedDictionaries&gt;
&lt;/ResourceDictionary&gt;

Style.xaml -&gt;

&lt;ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"&gt;

    &lt;Style x:Key="CalculatorButton" TargetType="{x:Type Button}"&gt;
        &lt;Setter Property="Margin" Value="2" /&gt;
    &lt;/Style&gt;

    &lt;Style x:Key="OperationButton" TargetType="{x:Type Button}" BasedOn="{StaticResource CalculatorButton}"&gt;
        &lt;Setter Property="FontWeight" Value="bold" /&gt;
    &lt;/Style&gt;

    &lt;Style x:Key="NumericButton" TargetType="{x:Type Button}" BasedOn="{StaticResource CalculatorButton}"&gt;
        &lt;Setter Property="FontSize" Value="20" /&gt;
    &lt;/Style&gt;

&lt;/ResourceDictionary&gt;

App.xaml -&gt;

&lt;Application x:Class="Calculator.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             StartupUri="MainWindow.xaml"&gt;
    &lt;Application.Resources&gt;
        &lt;ResourceDictionary Source="Resources/AppResources.xaml" /&gt;
    &lt;/Application.Resources&gt;
&lt;/Application&gt;
</code></pre>
    </div>