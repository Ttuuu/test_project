<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are a few things we don't see in your code, such as the way the memory for the <code>output</code> is allocated. The easiest way is to <code>malloc</code> as many bytes as needed for the the <code>input</code>, but it isn't optimal. It isn't optimal to allocate buffers every time you extract a key/value pair from the string anyway.</p>

<p>In C++, you would probably use iterators and make the transformation in place -keeping a copy of the original string if needed. Iterators are great, because they aren't tied to a particular container; they're an abstraction to describe a range.</p>

<p>Here's what I'd do:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;algorithm&gt;
#include &lt;functional&gt;
#include &lt;cctype&gt;

template &lt;typename Iterator&gt;
auto skip_word(Iterator first, Iterator last) {
    auto is_space = [](unsigned char c) { return std::isspace(c); };
    // why a lambda? 1) to convert the argument to unsigned
    // and 2) to allow deduction in template context
    return std::find_if(
        std::find_if(first, last, std::not_fn(is_space)),
        last, is_space);
}

template &lt;typename Iterator&gt;
Iterator remove_kv(Iterator first, Iterator last, Iterator kv_first, Iterator kv_last) {
    auto kv_loc = std::search(first, last, kv_first, kv_last);
    if (kv_loc == last) return last;
    auto kv_end = skip_word(std::next(kv_loc, std::distance(kv_first, kv_last)), last);
    return std::rotate(kv_loc, kv_end, last);
}
</code></pre>

<p><code>std::find_if</code>, <code>std::search</code>, <code>std::rotate</code> are standard algorithms, very much optimized, with parallelized versions in the oven. <code>std::rotate</code> is useful in a wide range of situations: it performs a left rotation where its second argument becomes the first element of the range, and returns the new position of its first argument. So <code>remove_kv</code> returns the iterator past the expurgated sentence, which becomes available without memory allocation. The return value is also the beginning of the key/value pair, which can be reused.</p>
    </div>