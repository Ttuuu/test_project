<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Using a function pointer of function reference as a deleter has two major disadvantages:</p>

<ol>
<li><p>The deleter has <em>state</em> and thus requires storage, even though it is always the same, and the maker function is artificially used to create this "constant" state even though there is no choice to make here.</p></li>
<li><p>Taking the address of a standard-library function is highly problematic. C++20 has started outright outlawing this practice, and it generally creates brittle code. Functions are first and foremost designed to be <em>called</em> in a certain way. The details of whether a function has overloads, default arguments, etc. are generally not meant to be observable, and liable to change at the whim of the implementer. Standard library functions should therefore always be <em>called</em>.</p></li>
</ol>

<p>Putting those two observations together immediately leads to an improved solution: Define your own custom deleter class. This class can be default-constructible, making the smart pointer construction straight-forward.</p>

<p>Example (using <code>dlopen</code>/<code>dlclose</code>):</p>

<pre><code>struct DlCloser
{
  void operator()(void * dlhandle) const noexcept { dlclose(dlhandle); } 
};

using dl_ptr = std::unique_ptr&lt;void, DlCloser&gt;;

dl_ptr make_loaded_dso(const string &amp; filename)
{
  return dl_ptr(dlopen(filename.c_str()));
}
</code></pre>

<p>Note that the maker function is now almost useless; I might as well just write <code>dl_ptr p(dlopen(filename))</code> instead of <code>auto p = make_loaded_dso(filename.c_str())</code>.</p>

<p>Finally, here is a small aside on lambdas: The usual way to use library functions as callbacks and abide by the aforementioned "call-only" interface is to use a lambda expression, such as <code>[](void * h) { dlclose(h); }</code>. However, lambda expressions don't make for good deleter types. Even though C++20 made stateless lambdas default-constructible and allowed lambdas to appear in unevaluated contexts, we cannot generally use something like</p>

<pre><code>std::unique_ptr&lt;void, decltype([](void * h) { dlclose(h); })&gt;
</code></pre>

<p>as a library type, since (if the above is contained in a header file) the lambda expression has a unique type in every translation unit and we would therefore have ODR violations. Unevaluated and default-construcible lambdas are only useful in a local setting, but not for libraries and interface types.</p>
    </div>