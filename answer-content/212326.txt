<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Rather than writing something custom, you could use the <a href="https://docs.microsoft.com/en-us/dotnet/standard/parallel-programming/dataflow-task-parallel-library" rel="nofollow noreferrer">TLP Dataflow</a> library.</p>

<pre><code>public static Task ForEachAsync&lt;TSource&gt;(
    this IEnumerable&lt;TSource&gt; items,
    Func&lt;TSource, Task&gt; action,
    int maxDegreesOfParallelism)
{
    var actionBlock = new ActionBlock&lt;TSource&gt;(action, new ExecutionDataflowBlockOptions
    {
        MaxDegreeOfParallelism = maxDegreesOfParallelism
    });

    foreach (var item in items)
    {
        actionBlock.Post(item);
    }

    actionBlock.Complete();

    return actionBlock.Completion;
}
</code></pre>

<p>Check out <a href="https://dotnetfiddle.net/2312hL" rel="nofollow noreferrer">this Fiddle</a> to see it in action.</p>

<p><strong>EDIT</strong></p>

<p>If you need the results:</p>

<pre><code>public static async Task&lt;IEnumerable&lt;TResult&gt;&gt; ForEachAsync&lt;TSource, TResult&gt;(
    this IEnumerable&lt;TSource&gt; items,
    Func&lt;TSource, Task&lt;TResult&gt;&gt; action,
    int maxDegreesOfParallelism)
{
    var transformBlock = new TransformBlock&lt;TSource, TResult&gt;(action, new ExecutionDataflowBlockOptions
    {
        MaxDegreeOfParallelism = maxDegreesOfParallelism
    });

    var bufferBlock = new BufferBlock&lt;TResult&gt;();

    using (transformBlock.LinkTo(bufferBlock, new DataflowLinkOptions {PropagateCompletion = true}))
    {
        foreach (var item in items)
        {
            transformBlock.Post(item);
        }

        transformBlock.Complete();
        await transformBlock.Completion;
    }

    bufferBlock.TryReceiveAll(out var result);
    return result;
}
</code></pre>
    </div>