<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Separate construction and action</h3>

<p>Avoid performing any actions in constructors.
The purpose of constructors is to create objects that are ready to use.
The construction of an object should not trigger actions.</p>

<p>For example:</p>

<ul>
<li><p>The constructor of <code>Main</code> triggers everything in the program. This is not expected from a constructor. Move this code from the constructor to the static <code>main</code> method. That is an appropriate place to drive a program.</p></li>
<li><p>The constructor of <code>Simulation</code> starts the simulation. Remove the line starts the simulation, let the owner of the object make that call.</p></li>
<li><p>The constructor of <code>Board</code> takes a <code>World</code> as parameter, and calls <code>createRandomWorld</code> on it which will mutate the world, reinitializing its content. It is unexpected from a constructor to mutate its parameter.</p></li>
</ul>

<h3>Double computation</h3>

<p>Consider this snippet in <code>Simulation</code>:</p>

<blockquote>
<pre><code>world.applyRules();
world.updateWorld();
</code></pre>
</blockquote>

<p>Did you notice that calling <code>world.applyRules()</code> has no effect?
It computes the new state of the world and returns it,
which is not stored anywhere.
In fact it's unnecessary here,
because <code>world.updateWorld()</code> makes that call,
to replace the state of the world with the new state.
And I don't see a need to separate these two methods.</p>

<p>Also note that in a class named "World", including the term "world" in method names is usually redundant. In this example, you could drop it and <code>world.update()</code> will be naturally readable.</p>

<h3>Scope</h3>

<p>Many variables are defined as class fields,
when they can be local variables.
Always try to limit variables to the minimum scope where they are needed.
This reduces the chance of accidental uses and modifications.</p>

<p>For example <code>worldCopy</code> is only used in one method that computes the new state.
It's a low-level implementation detail of that method,
and so it should only be visible there.</p>

<p>I suggest to review all other variables too and ask yourself if it really needs to be visible at the scope, or if it can be moved into a smaller scope.</p>

<h3>Separation of concerns and naming</h3>

<p>There are some distinct concepts that are easy to grasp in this program:</p>

<ul>
<li>A board that represents the state of the world</li>
<li>Displaying the board</li>
<li>Driving the program from state to state</li>
</ul>

<p>How does the program map to these concepts?</p>

<ul>
<li>The <code>World</code> class manages the state of the board</li>
<li>The <code>Board</code> class displays the board</li>
<li>The <code>Simulation</code> drives the program, started from <code>Main</code></li>
</ul>

<p>I think <code>World</code> and <code>Board</code> are not well separated.
From their names I cannot tell their purpose,
I need to look at the implementation,
and it surprises me,
because <code>World</code> manages a board,
while <code>Board</code> manages display of a board.</p>

<p>In short, I would rename <code>World</code> to <code>Board</code>, and <code>Board</code> to <code>BoardPanel</code>.</p>

<p>With this renaming, it also becomes clear that <code>BoardPanel</code> should not modify the state of a <code>Board</code>,
so calling <code>board.createRandomWorld</code> is inappropriate.
<code>BoardPanel</code> should be only an observer of the state of the board,
it should not modify it.</p>
    </div>