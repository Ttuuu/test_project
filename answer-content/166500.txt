<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>My snippets will not outperform yours because function calls will come with more overhead, but I think I'll post them anyhow to show some flexible alternatives.</p>

<p>If you would like to avoid the nested loop structure, yet have a dynamic method that will permit key name changes and increases in "rows" and "columns" with just one foreach loop, then <code>array_column()</code> and <code>array_combine()</code> are useful:</p>

<p>Code: (<a href="http://sandbox.onlinephpfunctions.com/code/a31d7d0f48e312551426141263cbac13c44c0dfa" rel="nofollow noreferrer">Demo</a>)</p>

<pre><code>$arr = [
    'name' =&gt; ['a', 'b', 'c', 'd'],
    'age'  =&gt; [ 2 ,  1 ,  3 ,  4 ],
    'shoe' =&gt; [11 ,  9 ,  8 , 10 ],
    'kids' =&gt; [ 1 ,  0 ,  2 ,  3 ]
];
$keys = array_keys($arr);
foreach ($arr[$keys[0]] as $k =&gt; $v) {  // only iterate first "row"
    $result[] = array_combine($keys, array_column($arr, $k));  // store each "column" as an associative "row"
}
var_export($result);
</code></pre>

<p>Output:</p>

<pre><code>array (
  0 =&gt; 
  array (
    'name' =&gt; 'a',
    'age' =&gt; 2,
    'shoe' =&gt; 11,
    'kids' =&gt; 1,
  ),
  1 =&gt; 
  array (
    'name' =&gt; 'b',
    'age' =&gt; 1,
    'shoe' =&gt; 9,
    'kids' =&gt; 0,
  ),
  2 =&gt; 
  array (
    'name' =&gt; 'c',
    'age' =&gt; 3,
    'shoe' =&gt; 8,
    'kids' =&gt; 2,
  ),
  3 =&gt; 
  array (
    'name' =&gt; 'd',
    'age' =&gt; 4,
    'shoe' =&gt; 10,
    'kids' =&gt; 3,
  ),
)
</code></pre>

<hr>

<p>If you might have missing values in your subarrays, then using <code>array_map()</code>'s transposing technique can autofill elements with <code>null</code> elements.  This will be more expensive, but the benefit is in the potential data stability.</p>

<p>Code: (<a href="https://3v4l.org/8BTuV" rel="nofollow noreferrer">Demo</a>)</p>

<pre><code>$arr = [
    'name' =&gt; ['a', 'b', 'c'],
    'age'  =&gt; [ 2 ,  1 ,  3 ,  4 ],
    'shoe' =&gt; [11 ,  9 ],
    'kids' =&gt; [ 1 ,  0 ,  2 ]
];    

$keys = array_keys($arr);
$transposed = array_map(null, ...array_values($arr));
foreach ($transposed as &amp;$subarray) {
    $subarray = array_combine($keys, $subarray);
}
var_export($transposed);
</code></pre>

<p>Output:</p>

<pre><code>array (
  0 =&gt; 
  array (
    'name' =&gt; 'a',
    'age' =&gt; 2,
    'shoe' =&gt; 11,
    'kids' =&gt; 1,
  ),
  1 =&gt; 
  array (
    'name' =&gt; 'b',
    'age' =&gt; 1,
    'shoe' =&gt; 9,
    'kids' =&gt; 0,
  ),
  2 =&gt; 
  array (
    'name' =&gt; 'c',
    'age' =&gt; 3,
    'shoe' =&gt; NULL,
    'kids' =&gt; 2,
  ),
  3 =&gt; 
  array (
    'name' =&gt; NULL,
    'age' =&gt; 4,
    'shoe' =&gt; NULL,
    'kids' =&gt; NULL,
  ),
)
</code></pre>
    </div>