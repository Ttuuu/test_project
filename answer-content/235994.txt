<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This answer is focused on one very specific part of this program.</p>

<hr>

<p>Let's take a look at the <code>Actor</code> class. Specifically, these two methods:</p>

<pre><code>def lost_bet(self):
    raise NotImplementedError("Subclass must inherit this abstract method")

def won_bet(self):
    raise NotImplementedError("Subclass must inherit this abstract method")
</code></pre>

<p>Now lets list how many subclasses actually use this method:</p>

<ul>
<li><code>Player</code></li>
<li>Wait, <em>just</em> player?</li>
</ul>

<p>Since <code>Dealer</code> is a subclass of <code>Actor</code>, I expected <code>Dealer</code> to utilize these methods as well. Not even <code>Actor</code> uses them in a meaningful way, except to make sure the subclasses write their own definition for them.</p>

<p>From our conversation in the comments, you state you came from Java. Now I can clearly see why you used inheritance in this way. This is unnecessary for Python. <code>lost_bet</code> and <code>won_bet</code> should be standalone methods in the <code>Player</code> class, since that subclass is the only class that uses these two methods in a meaningful way.</p>

<p>What I recommend is to keep <code>Player</code> exactly how it is. What I would change is the following:</p>

<ul>
<li>Remove <code>lost_bet</code> and <code>won_bet</code> from the <code>Actor</code> class.</li>
<li>Set the <code>Dealer</code> class to <code>pass</code>.</li>
</ul>

<p>For the <code>Dealer</code> point, something like this:</p>

<pre><code>class Dealer(Actor):
    pass
</code></pre>

<p>Now you have a way to clear distinguish a <code>Dealer</code> and <code>Actor</code> from each other, without the two unnecessary methods.</p>
    </div>