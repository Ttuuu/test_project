<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Disclaimer: I know nothing about these "Discord letters"</p>

<p><strong>Code organisation</strong></p>

<p>You could reorganise your code to make units easier to use independently.</p>

<p>The easiest thing to do it to re-write the <code>discord</code> function so that it returns a value instead of updating a global variable.</p>

<p>Another thing to do is to put all the Tkinter logic into a function. Usually, that function actually doing things would be put <a href="https://stackoverflow.com/questions/419163/what-does-if-name-main-do">behind an <code>if __name__ == "__main__"</code> guard</a>.</p>

<p>We'd have</p>

<pre><code># the function to convert a String to "Discord Letters"
def convert_to_discord_letters(word):
    # A List in which the converted Letters are stored it's later used to output the converted Letters in a Textbox
    result = []
    # List of numbers from 0-9 , is used to check the string for numbers and then convert them
    # to "Discord Digits" since they have a different syntax in discord than Letters
    chars = set('0123456789')
    s = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v',
         'w', 'x', 'y', 'z'}
    # In case the User enters spaces they get removed since they just cause trouble
    word = word.replace(" ", "")
    word = word.lower()
    w = word
    for i in range(len(w)):
        # checks if the string has a number and outputs accordingly
        if any((c in chars) for c in w[i]):
            list_one = ["zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", ]
            result.append(':' + list_one[int(w[i])] + ":" + " ")
        # checks if the string has letter and outputs accordingly (might be unnecessary)
        elif any((c in s) for c in w[i]):
            result.append(':regional_indicator_' + w[i] + ":" + " ")
        else:
            # In case the user inputs something wrong
            print("False Input")
    # print(result)
    return result


# defines the funtion click which gets called when the submitButton1 is pressed
def click():
    # saves the text which is entered in the textentry box, this later gets converted to "Discord Letters"
    entered_text=textentry.get()
    # deletes the output box in case the user presses the button again to convert something new
    output.delete(1.0, END)
    # the function to convert a String to "Discord Letters"
    result = convert_to_discord_letters(entered_text)
    # loop which gets the length of the string typed in the textentry box and then outputs it to the output textbox
    for i in range(len(entered_text)):
        output.insert(END, result[i])


def tkinter_discord_letter_converter():
    root = Tk()
    root.title("Discord Letter Converter")
    # TextInput
    textentry = Entry(root, width=20, bg="white")
    textentry.pack()
    # submitButton
    submitButton1 = Button(root, text="Submit", width=6, command=click)#
    submitButton1.pack()
    # TextOutput
    output = Text(root, width=75, height=6, wrap=WORD, background="white")
    output.pack()
    root.mainloop()



if __name__ == '__main__':
    tkinter_discord_letter_converter()
</code></pre>

<p>Note: I do not have tested this because I do not have Tkinter but I've tested parts of your code because I have...</p>

<p><strong>Unit Tests</strong></p>

<p>Now that the code is reorganised, we can easily write small tests for the <code>discord</code> function that I've renamed <code>test_convert_to_discord_letters</code></p>

<pre><code>def test_convert_to_discord_letters():
    """Test function convert_to_discord_letters."""
    # TODO: This could/should use a proper unit-test framework
    # Empty case
    assert convert_to_discord_letters("") == []
    # Whitespace
    assert convert_to_discord_letters(" ") == []
    # Special characters
    assert convert_to_discord_letters("#~&amp;$Â£()[]") == []
    # Lowercase letters
    assert convert_to_discord_letters("abcz") == [':regional_indicator_a: ', ':regional_indicator_b: ', ':regional_indicator_c: ', ':regional_indicator_z: ']
    # Uppercase letters
    assert convert_to_discord_letters("ABCZ") == [':regional_indicator_a: ', ':regional_indicator_b: ', ':regional_indicator_c: ', ':regional_indicator_z: ']
    # Digits
    assert convert_to_discord_letters("42") == [':four: ', ':two: ']
    # Mix
    assert convert_to_discord_letters("Bar -_- 9") == [':regional_indicator_b: ', ':regional_indicator_a: ', ':regional_indicator_r: ', ':nine: ']
</code></pre>

<p><strong>Improving <code>test_convert_to_discord_letters</code></strong></p>

<p>Now that we have unit-tests for the function, we can more safely try to improve it without breaking its behavior.</p>

<p><strong>Loop like a native</strong></p>

<p>I highly recommend <a href="https://nedbatchelder.com/text/iter.html" rel="nofollow noreferrer">Ned Batchelder's talk "Loop like a native"</a> about iterators. One of the most simple take away is that whenever you're doing range(len(iterabme)), you can probably do things in a better way: more concise, clearer and more efficient.</p>

<p>In your case, this gives:</p>

<pre><code>    for char in w:
        # checks if the string has a number and outputs accordingly
        if any((c in chars) for c in char):
            list_one = ["zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", ]
            result.append(':' + list_one[int(char)] + ":" + " ")
        # checks if the string has letter and outputs accordingly (might be unnecessary)
        elif any((c in s) for c in char):
            result.append(':regional_indicator_' + char + ":" + " ")
        else:
            # In case the user inputs something wrong
            pass # print("False Input")
</code></pre>

<p>Then, a few things seem more obvious:</p>

<ul>
<li>we don't really need the <code>w</code> variable. Also, various re-assignment of <code>word</code> are not required</li>
<li>the variations of <code>any((c in XXX) for c in char)</code> look weird once we realise that <code>char</code> is a single character. We could write this: <code>if char in XXX</code></li>
<li>the variable <code>chars</code> would be better named <code>digits</code> while <code>s</code> would be better named <code>letters</code></li>
</ul>

<p>At this stage, we have</p>

<pre><code># the function to convert a String to "Discord Letters"
def convert_to_discord_letters(word):
    # A List in which the converted Letters are stored it's later used to output the converted Letters in a Textbox
    # List of numbers from 0-9 , is used to check the string for numbers and then convert them
    # to "Discord Digits" since they have a different syntax in discord than Letters
    digits = set('0123456789')
    letters = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'}
    result = []
    for char in word.replace(" ", "").lower():
        # checks if the string has a number and outputs accordingly
        if char in digits:
            list_one = ["zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", ]
            result.append(':' + list_one[int(char)] + ":" + " ")
        # checks if the string has letter and outputs accordingly (might be unnecessary)
        elif char in letters:
            result.append(':regional_indicator_' + char + ":" + " ")
        else:
            # In case the user inputs something wrong
            pass # print("False Input")
    # print(result)
    return result
</code></pre>

<p><strong>Definitions of data used</strong></p>

<p>For letters, you could use <code>ascii_lowercase</code> from <code>string</code> module:</p>

<pre><code>import string
...
    letters = set(string.ascii_lowercase)
</code></pre>

<p>For digits, you define a set and a list, convert the value to integer to get the string at the relevant index. It seems like the best data structure to use would be a single dictionnary mapping digits to strings.</p>

<pre><code>    digits = {"0": "zero", "1": "one", "2": "two", "3": "three", "4": "four", "5": "five", "6": "six", "7": "seven", "8": "eight", "9": "nine"}
</code></pre>

<p><strong>Useless concatenations of literal string</strong></p>

<p><code>":" + " "</code> can be written <code>": "</code>.</p>

<p>At this stage, we have:</p>

<pre><code># the function to convert a String to "Discord Letters"
def convert_to_discord_letters(word):
    # A List in which the converted Letters are stored it's later used to output the converted Letters in a Textbox
    # List of numbers from 0-9 , is used to check the string for numbers and then convert them
    # to "Discord Digits" since they have a different syntax in discord than Letters
    digits = {"0": "zero", "1": "one", "2": "two", "3": "three", "4": "four", "5": "five", "6": "six", "7": "seven", "8": "eight", "9": "nine"}
    letters = set(string.ascii_lowercase)
    result = []
    for char in word.replace(" ", "").lower():
        # checks if the string has a number and outputs accordingly
        if char in digits:
            result.append(':' + digits[char] + ": ")
        # checks if the string has letter and outputs accordingly (might be unnecessary)
        elif char in letters:
            result.append(':regional_indicator_' + char + ": ")
        else:
            # In case the user inputs something wrong
            pass # print("False Input")
    print(result)
    return result

</code></pre>

<p>And we realise that most comments are not required anymore because the code is much clearer. On the other hand, we could add a proper docstring.</p>

<pre><code>def convert_to_discord_letters(word):
    """Convert a string into a list of strings corresponding to "Discord Letters"."""
    digits = {"0": "zero", "1": "one", "2": "two", "3": "three", "4": "four", "5": "five", "6": "six", "7": "seven", "8": "eight", "9": "nine"}
    letters = set(string.ascii_lowercase)
    result = []
    for char in word.replace(" ", "").lower():
        if char in digits:
            result.append(':' + digits[char] + ": ")
        elif char in letters:
            result.append(':regional_indicator_' + char + ": ")
        else:
            pass # TODO: I'll let you decide how to handle other cases
    return result
</code></pre>

<p><strong>Removing the useless logic</strong></p>

<p>It is now clearer that the <code>.replace(" ", "")</code> logic removes whitespace which would have no effect anyway (as we'd end up in the non-handled case).
You can remove this.</p>

<p><strong>More</strong></p>

<p>I suspect the <code>click</code> function could benefit from the same ideas but it can't test it at the moment.</p>

<p>Also, the code seems to assume that <code>entered_text</code> and <code>result</code> will have the same length which may not be the case for non-handled characters.</p>
    </div>