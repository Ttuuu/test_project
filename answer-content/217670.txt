<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is overall look quite good for me. I personally prefer <code>"""</code> for comments.</p>

<hr>

<h2>Dependency Injection</h2>

<p>Problem I see with <code>PermaDict</code> is that it needs to know about <code>json/pickle/csv</code> <code>load</code> and <code>dump</code> methods. This makes it harder for you to add any new serialisation without changing the code. </p>

<p>In Python functions are objects, so you can pass them as parameters to construction. You can even pass whole modules/classes, etc too.</p>

<pre><code>def __init__(self, filename, flag='c', mode=None, format='json', *args, **kwds):
</code></pre>

<p>Instead of specifying <code>'json'</code> as a string. We can simply pass <code>json</code> or any other object with <code>.load</code> and <code>.dump</code> methods. </p>

<pre><code> def __init__(self, filename, flag='c', mode=None, serializer=json, *args, **kwds):
</code></pre>

<p>Now we just use <code>self.serializer.dump</code> and <code>self.serializer.load</code>. This way you can easily support multiple serializers.</p>

<pre><code>for loader in (pickle.load, json.load, csv.reader):
</code></pre>

<p>I don't personally like this kind of try all loading. I'd avoid pickle and stick with <code>json</code> if it is possible due to security concerns. </p>

<blockquote>
  <p><strong>Warning</strong> The pickle module is not secure against erroneous or
  maliciously constructed data. Never unpickle data received from an
  untrusted or unauthenticated source.</p>
</blockquote>

<p>However since it is for your own pickled content it might be fine. </p>

<h2>Designing for resilience</h2>

<p>I suggest you give LMDB a try. You can find more information here: <a href="https://symas.com/lmdb/" rel="nofollow noreferrer">https://symas.com/lmdb/</a>. There are also python bindings available. This should be easier than trying to come up with your own resilient data store.</p>

<p>To be resilient is hard work. To have some resilience maybe store 2 copies of same data, store data checksums or create backups that you can recover from. All hardwares, softwares, OSes, Python interpreters and C runtimes. are subject to failure.</p>
    </div>