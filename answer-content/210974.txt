<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are some things that may help you improve your program.</p>

<h2>Declare variables only where needed</h2>

<p>Old-style C required all variables to be declared at the top of the function in which they were used, but modern C has not required this for many years.  For that reason, you can remove the declarations of <code>i</code> and <code>j</code> and incorporate them into the <code>for</code> loops instead, as in the following suggestion.  (Note that this requires C99 or later.)</p>

<h2>Use <code>size_t</code> instead of <code>int</code> where appropriate</h2>

<p>My version of <code>gcc</code> complains because <code>size_t</code> is unsigned and <code>int</code> is unsigned.  To address that, we can change the types of <code>i</code> and <code>j</code>:</p>

<pre><code>for (size_t i = 0; i &lt; n; ++i) {
    for (size_t j = i; j &lt; n; ++j) {
</code></pre>

<h2>Think carefully about the algorithm</h2>

<p>The diagonal of the matrix doesn't really need to be touched.  This can easily be addressed by starting the inner loop from <code>i + 1</code> instead of <code>i</code>.</p>

<h2>Consider using pointers</h2>

<p>It might be a bit more clear within the inner loop if pointers were used.  Here's one way to do that:</p>

<pre><code>int *a = &amp;mat[(n*i)+j];
int *b = &amp;mat[(n*j)+i];
// swap *a and *b
int temp = *a;
*a = *b;
*b = temp;
</code></pre>

<h2>Consider adding testing</h2>

<p>Since the transpose of a transpose of any matrix should equal itself, this suggests one method of testing the results.  I'd suggest testing a few matrices with small size and manually worked answers and then a larger number of matrices with varying sizes using the double-transpose and checking for equality.</p>

<h2>Omit <code>return 0</code> in main</h2>

<p>Since C99, the <code>return 0</code> at the end of main is implicit and may be omitted.</p>

<p><strong>Note:</strong> when I make this suggestion, it's almost invariably followed by one of two kinds of comments:  "I didn't know that." or "That's bad advice!"  My rationale is that it's safe and useful to rely on compiler behavior explicitly supported by the standard.  For C, since C99; see ISO/IEC 9899:1999 section 5.1.2.2.3:</p>

<blockquote>
  <p>[...] a return from the initial call to the <code>main</code> function is equivalent to calling the <code>exit</code> function with the value returned by the <code>main</code> function as its argument; reaching the <code>}</code> that terminates the <code>main</code> function returns a value of 0.</p>
</blockquote>

<p>For C++, since the first standard in 1998; see ISO/IEC 14882:1998 section 3.6.1:</p>

<blockquote>
  <p>If control reaches the end of main without encountering a return statement, the effect is that of executing return 0;</p>
</blockquote>

<p>All versions of both standards since then (C99 and C++98) have maintained the same idea.  We rely on automatically generated member functions in C++, and few people write explicit <code>return;</code> statements at the end of a <code>void</code> function.  Reasons against omitting seem to boil down to <a href="http://stackoverflow.com/questions/2581993/what-the-reasons-for-against-returning-0-from-main-in-iso-c/2582015#2582015">"it looks weird"</a>.  If, like me, you're curious about the rationale for the change to the C standard <a href="http://stackoverflow.com/questions/31394171/what-was-the-rationale-for-making-return-0-at-the-end-of-main-optional">read this question</a>.  Also note that in the early 1990s this was considered "sloppy practice" because it was undefined behavior (although widely supported) at the time.  </p>

<p>So I advocate omitting it; others disagree (often vehemently!)  In any case, if you encounter code that omits it, you'll know that it's explicitly supported by the standard and you'll know what it means.</p>
    </div>