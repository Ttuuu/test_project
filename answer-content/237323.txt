<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm not really going to address your core algorithm, however there are things that you can do to make your code more approachable.</p>

<p><strong>Access modifiers</strong></p>

<p>You've got an interesting collection of access modifiers used in your code.  The only one that's missing is <code>private</code>.  In general, you want the methods that will be interacted with from outside to be declared as <code>public</code> and everything else in your class to be declared as <code>private</code>.  You should only be using <code>protected</code>  if you're expecting there to be a derived implementation of the class which needs access to those members (typically this would be methods, not fields).</p>

<p><strong>Constants can help</strong></p>

<p>There's a few magic strings in your code that could really benefit from being constants.  Not only does this offer the opportunity to give a descriptive name to the value, but it reduces that chances of you creating a typo/mismatch.  So, for example:</p>

<pre><code>private static final String MATRIX_PADDING_CHARACTER = "\u25A0";
</code></pre>

<p><strong>Parameter names are important</strong></p>

<p>Your <code>ScoreScheme</code> constructor looks like this:</p>

<blockquote>
<pre><code>public ScoreScheme(int m1, int m2, int i)
</code></pre>
</blockquote>

<p>At the time you wrote the code, this probably made sense, without looking, does it still make sense?  What's the difference between <code>m1</code> and <code>m2</code>?  It's easy enough to check by looking at the implementation, however the less context switching required, the easier it is to work with the code.  Modern IDE's give helpful information, such as parameter names when you start coding a call to a method.  If the parameters have sensible names, <code>matchScore</code> (<code>m1</code>) and <code>mismatchScore</code> (<code>m2</code>) are unlikely to get reversed by accident.</p>

<p><strong>One declaration per line</strong></p>

<p>Whilst the compiler allows you to declare multiple variables of the same type on the same line, I've rarely seen it done in practice.  </p>

<blockquote>
<pre><code>int matchScore, mismatchScore, indel;
</code></pre>
</blockquote>

<p>Having a separate line for each of the declarations doesn't cost a lot and can make the list easier to read.  There's a very similar rule around single line <code>if</code> and <code>for</code>.  Whilst you can do them, most places adopt an always include braces approach, because it's just too easy to make a mistake otherwise.</p>

<p><strong>Scheme vs Members</strong></p>

<p>You pass the <code>ScoreScheme</code> into your DNASequence class, however you then extract the values and store them in individual member variables.</p>

<blockquote>
<pre><code>matchScore = s.matchScore;
mismatchScore = s.mismatchScore;
indel = s.indel;
</code></pre>
</blockquote>

<p>It's unclear why you wouldn't just store the <code>ScoreScheme</code> itself.  This maintains the encapsulation of those variables so that it's clear they belong together.</p>

<p><strong>Consistency</strong></p>

<p>Again, this comes down to naming.  The <code>ScoreScheme</code> members have a <code>Score</code> post-fix, apart from <code>indel</code>.  They all represent scoring, either make them all '..Score' or not.</p>

<p>There's a similar mismatch in <code>Node</code></p>

<blockquote>
<pre><code>this.i = x;
this.j = y;
</code></pre>
</blockquote>

<p>The parameter is 'x', the field is 'i'.  Picking a coordinate system and using it consistently throughout the code will make it easier to follow.</p>

<p><strong>Dead Code</strong></p>

<p>Dead / unused code should be removed before checkin / review.  You've got some code that doesn't appear to ever be called (<code>Node.toString</code>) and other seconds of code that are just commented out, such as <code>println</code>s that you used for debugging.  The less noise there is in the code, the easier it is to focus on what it actually does.</p>

<p><strong>Unnecessary checks</strong></p>

<p>There's a redundant check in the <code>else if</code>, <code>curr.j</code> must not equal <code>0</code>, or the <code>while</code> loop would already have terminated.</p>

<blockquote>
<pre><code>while (curr.i != 0 || curr.j != 0) {
  if (curr.i != 0 &amp;&amp; curr.j == 0){
    curr.prev = matrix[curr.i-1][curr.j];
    curr = traceHelper(curr);
  }else if (curr.i == 0 &amp;&amp; curr.j != 0) {
    curr.prev = matrix[curr.i][curr.j-1];
    curr = traceHelper(curr);
  }
}
</code></pre>
</blockquote>

<p>As a side note, consistent spacing is important.  Modern IDE's will auto-format your code so that it has consistent spacing.  This makes it more approachable, but also helps to avoid false-positives when checking for differences in source control.  If you always use the same format, then you don't need to worry about opening a file with a hundred changes in it only to find out all but one of them is somebody fixing the 'space before brace' style to their preference.</p>

<p><strong>String vs StringBuilder</strong></p>

<p>You have three buffers (<code>top</code>, <code>buffer</code>, <code>bottom</code>) which are all declared as strings.  You build them up, starting from the right as you loop through the matrix.  Typically, you'd be better off using a <code>StringBuilder</code> to perform these kinds of joining operations in a loop.</p>

<p><strong>traceHelper and duplicate code</strong></p>

<p><code>traceHelper</code> is quite a big function, that has quite a lot of duplication in it.  Essentially, you're prepending each new character and its match to the three buffers, with four scenarios.  If I create a method:</p>

<pre><code>final String NON_MATCHING_PADDING = " " + " ";

void insertPair(char seq1, boolean match, char seq2) {
    top.insert(0, seq1 + " ");
    buffer.insert(0, match ? "|" + " " : NON_MATCHING_PADDING );
    bottom.insert(0, seq2 + " ");
}
</code></pre>

<p>Then it can be simplified to:</p>

<pre><code>protected Node traceHelper(Node curr) {
    while (curr.prev != null) {
        if (curr.i - curr.prev.i == 1 &amp;&amp; curr.j - curr.prev.j == 1) {    // If the path leads diagonal
            insertPair(seq_1.charAt(curr.i), 
                       seq_1.charAt(curr.i) == seq_2.charAt(curr.j), 
                       seq_2.charAt(curr.j));
        } else if (curr.i - curr.prev.i == 1) {                           // If the path leads up
            insertPair(seq_1.charAt(curr.i), false, '-');
        } else if (curr.j - curr.prev.j == 1) {                           // If the path leads left
            insertPair('-', false, seq_2.charAt(curr.j));
        }
        curr = curr.prev;
    }

    return curr;
}
</code></pre>

<p>This makes the method a bit more approachable and highlights additional questions, such as could <code>else if (curr.j - curr.prev.j == 1)</code> be replaced by <code>else</code>, or is there another condition that needs to be handled?</p>

<p><strong>Random</strong></p>

<p>You only use if for generating test sequences, however prefer <code>Random.nextInt</code> over <code>Math.random()</code>.  See discussion <a href="https://stackoverflow.com/a/738651/592182">here</a>.</p>

<p><strong>Overall design</strong></p>

<p>For me, it feels like there's a bit too much going on in the <code>DNASequence</code> class.  It's responsible for taking to sequences and a score scheme, performing analysis, storing the results, outputting them to the console.  Having an analyser that took in two sequences and a score scheme and produced some analysis results, which could then be printed would seem like a better split.</p>

<p>You also want to try to design your classes so that the caller needs to know as little as possible about how they work under the surface.  If you've got two methods that are intrinsically linked, and need to be called in a specific order, then they should probably be a single public method on your class (you can have private methods if the split makes sense).  At the moment, you have to call <code>runAnalysis</code>, followed by <code>traceback</code> to get the results.  If you call <code>traceback</code> first, the application crashes.  If you call it twice, you get double the result (because it doesn't clear the buffers before starting to append to them).  From a client perspective, having them as separate methods doesn't really make sense, the traceback is really part of the analysis.</p>
    </div>