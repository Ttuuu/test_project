<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>    var zipFile = ZipFile.OpenRead(ChapterLocation);
    ...
    zipFile.Dispose();
</code></pre>
</blockquote>

<p>One word: <code>using</code>.</p>

<hr>

<blockquote>
<pre><code>    using (var stream = z.Open())
    {
        using (var mstream = new MemoryStream())
        {
            stream.CopyTo(mstream);
            mstream.Position = 0;

            var bitmap = new BitmapImage();
            bitmap.BeginInit();
            bitmap.CacheOption = BitmapCacheOption.OnLoad;
            bitmap.StreamSource = mstream;

            bitmap.EndInit();
            bitmap.Freeze();
</code></pre>
</blockquote>

<p>This needs a comment explaining why <code>mstream</code> is necessary and you can't just use <code>stream</code>.</p>

<p>I suspect that really <code>mstream</code> is either unnecessary or insufficient. If it's necessary then it's probably because of threading issues due to multiple <code>ZipArchiveEntry</code> streams all reading from one backing stream, and in that case doing the read with <code>stream.CopyTo</code> might be reducing the probability of the problem surfacing rather than actually fixing it.</p>

<hr>

<blockquote>
<pre><code>    foreach (ZipArchiveEntry z in zipFile.Entries)
    {
        Thread t = new Thread(() =&gt; BitmapLoad(z));
        t.Start();
        t.Join();
        Debug.WriteLine(z.Name);
    }
</code></pre>
</blockquote>

<p>Ah, it's not really multi-threaded after all. If you want to do old-school multithreading then you need to spin off all of the threads before calling <code>Join()</code>.</p>

<p>I say "<em>old-school</em>" because a more modern approach would be to use Parallel Linq. Bearing in mind my previous comment about streams, the approach would probably be to map the entries to <code>(string Name, MemoryStream ms)</code>s in one thread and then map those tuples to <code>Page</code>s in parallel threads. I <em>think</em> that this can be written as</p>

<pre><code>Pages = zipFile.Entries.
    Select(z =&gt; Read(z)).
    AsParallel().
    Select(tuple =&gt; LoadPage(tuple)).
    OrderBy(page =&gt; page).
    ToList();
</code></pre>

<p>but I haven't really used Parallel Linq myself, and I don't guarantee that this does the <code>Read</code> calls all in the same thread.</p>
    </div>