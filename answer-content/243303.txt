<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Getting lines from a file</h1>

<p>You can use simple list comprehension to get all the lines from a file.</p>

<pre><code>words = [word for word in open("dictionary.txt", "r")]
</code></pre>

<p>However, this does not ensure the file will be closed. To be safe, I would do this:</p>

<pre><code>with open("dictionary.txt", "r") as file:
    words = [word for word in file]
</code></pre>

<p>The <code>with</code> ensures the file will be closed once you're done working with the file.</p>

<h1>Globals</h1>

<p>With a small program like this, globals can be quite helpful since you don't have to pass <code>word_to_guess</code> through functions. However, as you begin to develop more complicated programs, you should be mindful and careful about your globals "leaking" into other parts of your programs, should you be using multiple files.</p>

<h1>Random choices</h1>

<p>Instead of generating a random number between the min and max of the list, use <code>random.choice(...)</code> to chose a random word from the dictionary. And if you're worried about the beginning of the alphabet, you can create a buffer variable and splice the list so the beginning of the alphabet is removed.</p>

<pre><code># The first 11 words will be removed from the list #
buffer = 11
word_to_guess = random.choice(words[buffer:])
</code></pre>

<h1><code>check_index_and_replace</code></h1>

<p>Instead of casting replace on each index, you can use an <code>if</code> statement to make sure the letter is equal to the letter in <code>word_to_guess</code>, and in the same position. If it is, then assign that letter to the position in the list.</p>

<pre><code>from typing import List

def check_and_replace(letter: str) -&gt; List[str]:
    """
    For each character in the word, if that character
    is equal to the passed letter, then the position in
    user_guesses is changed to that letter.
    """
    for idx, char in enumerate(word_to_guess):
        if char == letter:
            user_guesses[idx] = letter
    return user_guesses
</code></pre>

<h1>Type Hints</h1>

<p>These help yourself and other people looking at your code understand what types of variables are being passed and returned to/from functions. As above, the function accepts a <code>str</code> for <code>letter</code>, and returns a list of strings.</p>

<h1><code>lettersleft</code></h1>

<p>If you have a function that only has one line, most of the time you can delete the function and put that line where the function is called. And since this function utilizes a built-in function to count the occurrences of <code>#</code> in the list, this function doesn't need to be written.</p>

<h1>The main body</h1>

<p>Instead of keeping track for each try, use a <code>for</code> loop and only run as many times as the user inputed. If the user enters <code>4</code>, the loop only runs four times.</p>

<p>When I first played this game, it was impossible to win. I could guess the word, but the game wouldn't end. A quick fix is to check if the number of letters left is <code>0</code>. If it is, display a game won message and exit the program. If it isn't, print how many are left and go through the loop again.</p>

<hr>

<p>All in all, your program would look something like this:</p>

<pre><code>import random
from typing import List

with open("dictionary.txt", "r") as file:
    words = [word for word in file]
buffer = 11
word_to_guess = random.choice(words[buffer:])
user_guesses = ['#' for _ in word_to_guess]

def check_and_replace(letter: str) -&gt; List[str]:
    """
    For each character in the word, if that character
    is equal to the passed letter, then the position in
    user_guesses is changed to that letter.
    """
    for idx, char in enumerate(word_to_guess):
        if char == letter:
            user_guesses[idx] = letter
    return user_guesses

def main():
    tries = int(input('How many tries you want? '))
    for _ in range(tries):
        letter = input('Try a letter ')
        print(check_and_replace(letter))
        letters_left = user_guesses.count("#")
        if letters_left == 0:
            print("You guessed the word!")
            quit()
        else:
            print(letters_left, "letters remaining!")
    print("The word was", word_to_guess)

if __name__ == '__main__':
    main()
</code></pre>
    </div>