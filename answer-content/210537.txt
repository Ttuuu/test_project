<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The time complexity really depends on the <code>unshift</code> time complexity. ECMA does not specify it, but I would expect that it is not constant. I would not be surprised if it is actually linear in the size of the array. If so, the complexity of <code>rotate</code> would be <span class="math-container">\$O(nk)\$</span>.</p>

<p>In fact, I tested the performance of your code by timing your <code>rotate</code> by 1, for arrays of size from <code>100000</code> to <code>100000000</code>, doubling the size every time. The results (in milliseconds) are</p>

<pre><code>1, 3, 8, 14, 29, 33, 69, 229, 447, 926
</code></pre>

<p>I did few runs, the exact numbers were different, but consistent. You can see that as size doubles the run time (at least) doubles as well.</p>

<p>And again, it was rotation by 1. Rotation by <code>k</code> will take proportionally longer.</p>

<hr>

<p>There are few classic algorithms which perform the rotation in true <span class="math-container">\$O(n)\$</span> complexity, that is their execution time does not depend on <code>k</code>. One is extremely simple to code, but takes effort to comprehend. In pseudocode:</p>

<pre><code>    reverse(0, k)
    reverse(k, n)
    reverse(0, n)
</code></pre>

<p>Notice that each element is moved twice. This is suboptimal. Another algorithm moves each element exactly once - right into the place where it belongs. I don't want to spoil the fun of discovering it. Try to figure it out (hint: it needs to compute <code>gcd(n, k)</code>).</p>

<hr>

<p>That said, the leetcode problem only asks to print the rotated array. I would seriously consider to not actually perform rotation, but</p>

<pre><code>    print values from n-k to n
    print values from 0 to n-k
</code></pre>

<p>It feels like cheating, but in fact it is valid, and sometimes very useful technique.</p>
    </div>