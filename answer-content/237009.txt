<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There's enough to review in just the <code>appendNode()</code> function; much of this applies to the rest of the code, too.</p>
<hr>
<p>Don't cast the result of <code>malloc()</code> like this:</p>
<blockquote>
<pre><code>node = (node_t*)malloc(sizeof(node_t));
</code></pre>
</blockquote>
<p>If declared properly, <code>malloc()</code> returns a <code>void*</code>; that's assignable to any pointer type.  (If not declared properly, fix that first).</p>
<p>Also, instead of making readers check the type of <code>node</code>, use it as argument to <code>sizeof</code>.  Like this:</p>
<pre><code>node = malloc(sizeof *node);
</code></pre>
<p>In fact, <code>node</code> is declared but not assigned in the line above.  Remove that gap, so we can't accidentally add code that uses the uninitialized value:</p>
<pre><code>node_t *const node = malloc(sizeof *node);
</code></pre>
<hr>
<p>Don't write error messages to <code>stdout</code> - that's for program output.  Write such messages to <code>stderr</code>, where users expect them:</p>
<pre><code>    fputs("An error occurred while allocating memory for node in appendNode\n", stderr);
</code></pre>
<p>(I fixed the typo in "occurred" - that sort of thing gives a bad impression.)</p>
<p>For larger programs, you want to <em>return</em> an indicator of failure, so the calling code can decide whether it can recover or alert the user.  This is a good opportunity to return a <em>pointer to the new node</em> (or NULL on failure), so that the caller can pass that back in, and we don't have to walk the whole list every time we add a digit (that's <a href="https://www.joelonsoftware.com/2001/12/11/back-to-basics/" rel="nofollow noreferrer">Shlemiel the painterâ€™s algorithm</a>).</p>
<hr>
<p>We point <code>temp</code> to some newly allocated memory, but then ignore that and point it somewhere else instead.  That memory is now leaked, with no way to access or release it.  Just remove that block.</p>
<hr>
<h1>Modified code</h1>
<pre><code>node_t *appendNode(node_t** headref, int data)
{
    node_t *const node = malloc(sizeof *node);
    if (!node) {
        return node;
    }
    node-&gt;val = data;
    node-&gt;next = NULL;

    if (!*headref) {
        *headref = node;
        return node;
    }
    node_t *temp = *headref;
    while (temp-&gt;next) {
        temp = temp-&gt;next;
    }
    temp-&gt;next = node;
    return node;
}
</code></pre>
    </div>