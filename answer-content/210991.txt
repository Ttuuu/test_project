<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Code must be correct. To be sure that code is correct, code must be readable.</p>

<hr>

<p>I took some of your baffling code:</p>

<pre><code>var bgcolor = color.RGBA{0, 0, 0, 255}
var fgcolor = color.RGBA{255, 255, 255, 255}

if value, exists := r.Form["bgcolor"]; exists {
BGColorLoop:
    for {
        parts := strings.Split(value[0], ",")
        if len(parts) != 3 {
            break BGColorLoop
        }
        for _, val := range parts {
            if v, err := strconv.ParseInt(val, 10, 0); err != nil || int(v) &gt; 255 || int(v) &lt; 0 {
                break BGColorLoop
            }
        }
        r, _ := strconv.ParseInt(parts[0], 10, 8)
        g, _ := strconv.ParseInt(parts[1], 10, 8)
        b, _ := strconv.ParseInt(parts[2], 10, 8)
        bgcolor = color.RGBA{uint8(r), uint8(g), uint8(b), 255}
        break BGColorLoop
    }
}
if value, exists := r.Form["fgcolor"]; exists {
FGColorLoop:
    for {
        parts := strings.Split(value[0], ",")
        if len(parts) != 3 {
            break FGColorLoop
        }
        for _, val := range parts {
            if v, err := strconv.ParseInt(val, 10, 0); err != nil || int(v) &gt; 255 || int(v) &lt; 0 {
                break FGColorLoop
            }
        }
        r, _ := strconv.ParseInt(parts[0], 10, 8)
        g, _ := strconv.ParseInt(parts[1], 10, 8)
        b, _ := strconv.ParseInt(parts[2], 10, 8)
        fgcolor = color.RGBA{uint8(r), uint8(g), uint8(b), 255}
        break FGColorLoop
    }
}
</code></pre>

<p>I rewrote it (a first draft) in Go:</p>

<pre><code>bgcolor, err := formColor(r, "bgcolor")
if err != nil {
    bgcolor = color.RGBA{0, 0, 0, 255}
}
fgcolor, err := formColor(r, "fgcolor")
if err != nil {
    fgcolor = color.RGBA{255, 255, 255, 255}
}
</code></pre>

<p>Where</p>

<pre><code>var errFormColor = errors.New("invalid form color")

func formColor(r *http.Request, colorKey string) (color.RGBA, error) {
    var rgb [3]uint8

    value := r.Form[colorKey]
    if len(value) &lt;= 0 {
        return color.RGBA{}, errFormColor
    }
    parts := strings.SplitN(value[0], ",", len(rgb)+1)
    if len(parts) != len(rgb) {
        return color.RGBA{}, errFormColor
    }
    for i, part := range parts {
        p, err := strconv.ParseUint(part, 10, 8)
        if err != nil {
            return color.RGBA{}, errFormColor
        }
        rgb[i] = uint8(p)
    }

    return color.RGBA{rgb[0], rgb[1], rgb[2], 255}, nil
}
</code></pre>
    </div>