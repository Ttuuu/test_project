<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The classes seem OK but the usage makes no sense:</p>

<pre><code>                case "GOLD":
                    //Gold 
                    clsBL blgold = new clsBL(new clsGoldDiscountStrategy());
                    blgold.costPrice = 5;
                    blgold.qty = 10;

                    result = blgold.GetfinalPrice(blgold.costPrice, blgold.qty);
                    break;
</code></pre>

<p>This code (and the other switch case) does not use the polymorphism that the interface <code>IStrategy</code> enables. Rather, you can have simply written this code as:</p>

<pre><code>                case "GOLD":
                    double GetGoldPrice(double x, double y) =&gt; (x * y) * 0.8;
                    result = GetGoldPrice(5, 10);
                    break;
</code></pre>

<p>Here, all classes and interfaces are deleted. There is just a static method.</p>

<p>If you want to use the strategy pattern it must look something like:</p>

<pre><code>IStrategy strategy = GetStrategy();
strategy.Calculate(...);
</code></pre>

<p>Here, <code>GetStrategy()</code> can return any object compliant with that interface and further code does depend on any concrete type.</p>

<hr>

<p>Regarding naming, the classes do not have to be called "Strategy". I'd use the names <code>IDiscountCalculator</code> and <code>GoldDicountCalculator</code>. Or, instead of "Calculator" you could use "Model" or "Provider".</p>
    </div>