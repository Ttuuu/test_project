<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Low level parsing like you do with <code>StringBuilder</code> is usefull and certainly performant but no easy to understand. So it may be a bit too-much for such usage. </p>

<p>The <code>split</code> solution is more common. You can manage the corner cases with some index checks. </p>

<p>But I would suggest the usage of a regex. You can easily grab the idea without understanding the pattern :</p>

<pre><code>String input = "key={value}&amp;key2&amp;key3={value3}";
Pattern pattern = Pattern.compile("(\\w+)=?([^&amp;]+)?");
Matcher matcher = pattern.matcher(input);
while (matcher.find()) {
    System.out.println(" - Key   : "+matcher.group(1));
    System.out.println("   Value : "+matcher.group(2));
}


/* Output :
 - Key   : key
   Value : {value}
 - Key   : key2
   Value : null
 - Key   : key3
   Value : {value3}
*/
</code></pre>

<p>This one accept the missing values by returning <code>null</code> for <code>matcher.group(2)</code></p>

<p><a href="https://docs.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html" rel="nofollow noreferrer">https://docs.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html</a>
<a href="https://docs.oracle.com/javase/7/docs/api/java/util/regex/Matcher.html" rel="nofollow noreferrer">https://docs.oracle.com/javase/7/docs/api/java/util/regex/Matcher.html</a></p>
    </div>