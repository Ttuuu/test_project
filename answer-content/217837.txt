<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>following the advice to make the main function smaller and outsource (quite literally) as much as possible in seperate functions i came up with this:</p>

<pre><code>// spoj.cpp: Definiert den Einstiegspunkt für die Konsolenanwendung.
//

#include "stdafx.h" //vc++ specific may be ommitted

#include &lt;iostream&gt;
#include &lt;math.h&gt;
#include &lt;vector&gt;
#include &lt;fstream&gt;

#include &lt;stdint.h&gt;

using std::cin;
using std::cout;
using std::ifstream;
using std::vector;
using std::ios_base;

void findPrimesUponTillSqrtN(uint64_t sqrtN, vector&lt;bool&gt; * Flag)
{       
    for (register uint64_t i = 2; i &lt;= sqrtN; i++) 
    {
        if ((*Flag)[i]) 
        {
            for (register uint64_t j = i * i; j &lt;= sqrtN; j += i) 
            {
                (*Flag)[j] = false;
            }
        }
    }
}

void storePrimesUponTillSqrtN(uint64_t sqrtOfN, vector&lt;uint64_t&gt; * primes, vector&lt;bool&gt; * Flag)
{
    for (register uint64_t i = 2; i &lt;= sqrtOfN; i++) 
    {
        if ((*Flag)[i]) 
        {
            (*primes).push_back(i); 
        }
    }
}
void primesManipulation(vector&lt;uint64_t&gt; * primes, vector&lt;bool&gt; * Flag,uint64_t n, uint64_t q)
{
    for (uint64_t x : (*primes)) 
    {
        uint64_t temp;
        temp = q / x;
        temp *= x;
        // from primes arrays increment each prime with that num , set the index as false
        for (register uint64_t y = temp; y &lt;= n; y += x) 
        {
            (*Flag)[y] = false;
        }
    }
}

void flagMultiplesOfFoundPrimes(vector&lt;bool&gt; * Flag, vector&lt;uint64_t&gt; * primes)
{
    // set the falsed indexes in previous primes arrays to true
    register const uint64_t sizeOfPrimes = (*primes).size();
    for (register uint64_t i = 0; i &lt; sizeOfPrimes; ++i) 
    {
        (*Flag)[(*primes)[i]] = true;
    }
}

void printFoundPrimes(uint64_t q, uint64_t n, vector&lt;bool&gt; * Flag)
{
    for (register uint64_t i = q; i &lt;= n; i++) 
    {
        if ((*Flag)[i])
        {
            cout &lt;&lt; i &lt;&lt; " "; 
        }
    }
    cout &lt;&lt; "\n";
}
void sieve(int64_t t, uint64_t q, uint64_t n)
{
    while (t--) 
    {
        cin &gt;&gt; q &gt;&gt; n;
        vector&lt;bool&gt; Flag(n, true);
        Flag[0] = false;
        Flag[1] = false;
        uint64_t sqrtOfN = sqrt(n);

        findPrimesUponTillSqrtN(sqrtOfN,&amp;Flag); 

        vector&lt;uint64_t&gt; primes;
        storePrimesUponTillSqrtN(sqrtOfN, &amp;primes, &amp;Flag);

        primesManipulation(&amp;primes, &amp;Flag, n, q);

        flagMultiplesOfFoundPrimes(&amp;Flag, &amp;primes);

        printFoundPrimes(q, n, &amp;Flag);
    }
}

int main() 
{
    ios_base::sync_with_stdio(false); 
    cin.tie(NULL); 
    cout.tie(NULL);
    //ifstream in("inp.txt");
    int64_t t;
    uint64_t n, q;
    cin &gt;&gt; t;
    sieve(t, q, n);
    return 0;
}
</code></pre>

<p>explaination / thoughts / Input / Food for thought:</p>

<ol>
<li>renamed Array/vector <code>a</code> to <code>Flag</code> (according to the link given in your Code)</li>
<li>changed type of just About everything to <code>uint64_t</code> this is what modern x64 processors should be optimized for and if Nothing else it does save you some keystrokes in the Long run.</li>
<li>often used variables get the Register qualifier to state that this variable is intended to be stored in a Register. the Compiler may or may not place them in Registers but if he does it Speeds up your Code significantly.</li>
<li>as i dont know of top if vectors are passed to functions as pointers per Default i pass over a pointer to them to ensure that. Maybe this is not at all necessary.</li>
<li>naming convention: it does not cost you anything (not even Computational power) to give variables and functions meaningful names. this helps others (like me, who had a hard time figuring out the meaning of your variables) to grasp your algorithm faster and makes some comments completely unneccessary</li>
<li>using sqrt Returns a double and you store that in an integer variable of some sort!!! this is at best horrible style there is an sqrtl function available!!!</li>
<li>your temp variable is only used inside that one Codeblock that can easily refactored in a new function so making it local instead may bring some Advantages...</li>
<li><code>temp = q/x; temp*= x;</code> yields q if q/x is not fractional… and therefor this can surely be optimized</li>
<li>the lenght of your <code>primes</code> Vector is constant (or at least it is for the time you call your for loop that flags all the multiples of found primes) therefor there is no Need to retrieve that Information over and over again. store it in a variable declare it constant and tell the Compiler to store it in Registers if he is in the mood to do so. </li>
<li>some Parameters that are asked for during the runtime like the Limits are not neccessarily to be asked there. they can be given at the time the Program is called using commandline paramameters for instance. this may reduce runtime a Little bit because the whole <code>cin</code> Thing has not to be executed.</li>
<li>further improvements may result from not using <code>cout</code> or <code>printf</code> or the like and immediately print to stdout without traversing the same dozen layers of abstraction everytime.</li>
<li>vectors as such may be slow as they allow to add and remove Elements and therefor are basically variable lenght Arrays. internally they are most likely not more than linked lists which are known for their slowness and thus should be avoided.</li>
</ol>
    </div>