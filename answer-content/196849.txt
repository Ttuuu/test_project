<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>When allocating an array to hold arbitrary numbers of things, consider using <code>calloc</code> and <code>reallocarray</code> (<code>reallocarray</code> is not standard C, but there isn't a standard analog to <code>calloc</code>).</p>

<p>The reason is that <code>calloc</code> will fail if you try to allocate more memory than <code>size_t</code> can hold. If, for example on a 32-bit system, you decide you want to allocate 500 million of some struct, you could do this:</p>

<pre><code>typedef struct { char a; } little_struct_t;
...
ptr = malloc(500000000 * sizeof(little_struct_t));
</code></pre>

<p>and it might work. But later, when you decide that your struct actually needs more stuff, you'll end up with something like this:</p>

<pre><code>typedef struct { char a; int b; bool c } little_struct_t;
...
ptr = malloc(500000000 * sizeof(little_struct_t));
</code></pre>

<p>and boom, you've just caused a multiplication overflow without thinking about it. If instead you had used <code>calloc</code>, you'd either see the error when you checked that <code>ptr</code> was not <code>NULL</code> (see my next comment) or a happy segfault when you try to dereference <code>ptr</code>. Instead, now you have a 1705032704-byte (<code>(sizeof(little_struct_t) * half a billion) &amp; 0xffffffff)</code>) chunk of memory, and if you're lucky you'll get a segfault when you write off the end of it. If you're not lucky, you'll corrupt a bunch of other memory before your program crashes.</p>

<p>My second comment is that you should always <em>always</em> check the return value of <code>malloc</code>. If it's not <code>NULL</code>, no harm done. If it is, either you want to crash <em>right now</em> or you want to take a different path. Whatever happens, you don't want your program to happily keep chugging along as though nothing's wrong.</p>

<p>Third, and this isn't super relevant to your example (though I would apply it in <code>deallocate_words</code> after the <code>free</code> call inside the loop), but it's good practice to null out your pointers after you free them. I think I've spent too many words already, so I'll just say that it will simplify debugging and get rid of double free issues in the future.</p>
    </div>