<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Employee</strong></p>

<p>If you're not going to change the fields for <code>Employee</code>, then they should be final.  As it stands, there doesn't seem to be anyway to access the values...</p>

<p><strong>List interface</strong></p>

<p>Your list implementation doesn't really make sense to me.  I think part of that is because you've implemented your <code>display</code> method as part of the list.  This really doesn't belong there, writing to the console has nothing to do with storing/retrieving elements from a collection.  More than that, by putting the method within the class itself, you've deprived yourself of an opportunity to test out using your class in the real world.</p>

<p>Iterating through the items in a list is one of it's core functionalities.  You should be able to trivially write this function outside of your class.  At the moment this would be harder than necessary, because you don't expose the <code>size</code> property.  So you essentially iterate until the <code>get</code> throws an exception.  You have a very similar experience if you want to remove an item from the list (unless you happen to know the index because you've hard coded the elements). It can be done, but it feels quite messy.</p>

<p><strong>ensureCapacity</strong></p>

<p>I was expecting this to perform the 'is the collection big enough, if not resize it' check.  It only performs the resizing, instead the check is performed in the add method.  This seems wrong to me.  I'd consider either renaming the method to indicate that it's actually growing the collection, or putting the checking into the method so that it's name more accurately reflects what it does.</p>

<p><strong>Testing</strong></p>

<p>Rather than writing a test harness that outputs to the console, consider writing actual unit tests.  Most IDE's have built in JUnit integration and the process of writing tests to validate your collection really help you to understand how usable your API is from the outside.</p>

<p><strong>The whole wheel</strong></p>

<p>Do you really want to re-invent the whole wheel?  A lot of the legwork for figuring out usable interfaces for collections has already been done.  If you implement the <code>Collection&lt;E&gt;</code> interface, then it would mean your class both conforms to developer expectations and also allow you to make use of other built in features when using your collection, such as <code>stream</code>ing.</p>
    </div>