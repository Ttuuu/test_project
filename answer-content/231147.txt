<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This looks great. Honestly, there isn't anything I'd change. You could make it more pointfree in some parts, but that's not going be more readable or maintainable.</p>

<h1>Magic numbers</h1>

<p>The only part I'd change are the static dimensions in <code>main</code>. Those are fine in a toy program, but a proper one will need some kind of configuration, so make sure that you use proper values from the beginning:</p>

<pre><code>main :: IO ()
main = display FullScreen white . scale width height . pictures $ [
        color blue $ graph f (l, r, b, t) 0.001,
        color black $ Line [(origin, b), (origin, t)],
        color black $ Line [(l, origin), (r, origin)]
    ]
    where
        f :: Float -&gt; Float
        f x = 1 / (x - 1)

        -- easy configurable:
        (l, r, b, t) = (-10, 10, -10, 10)
        width  = 20
        height = 20
        origin =  0
</code></pre>

<p>That way you can also exchange the values with proper command line interpretation</p>

<pre><code>main :: IO ()
main = do
    (l, r, b, t) &lt;- getDimensions
    let width = r - l
    let height = t - b
    let origin = ...
    display FullScreen white . scale width height . pictures $ [
...
</code></pre>

<p>After all, <em>no magic numbers</em> is a good practice in both imperative and functional languages.</p>

<p>Next, I'd introduce <code>GraphBound</code> as a type synonym, just to make <code>graph</code>'s type signature easier on the eye:</p>

<pre><code>-- | Graph boundaries, given in (left, right, bottom, top) order
type GraphBound = (Float, Float, Float, Float)

graph :: (Float -&gt; Float) -&gt; GraphBound -&gt; Float -&gt; Picture
graph f (l, r, b, t) dx = pictures $ map Line visible
    ...
</code></pre>

<p>You might even exchange <code>GraphBound</code> with a proper <code>data</code> type later which checks does not export its constructor to make sure that you don't end up with <code>left = 20</code> and <code>right = -10</code>:</p>

<pre><code>makeGraph :: Float -&gt; Float -&gt; Float -&gt; Float -&gt; Maybe GraphBound
</code></pre>

<p>However, that's an overkill, so let's not focus on that for too long.</p>

<h1>List comprehensions vs. point-free</h1>

<p>Now let's get back to your original query. Is it possible to make <code>graph</code> more point-free?</p>

<p>Sure:</p>

<pre><code>graph :: (Float -&gt; Float) -&gt; (Float, Float, Float, Float) -&gt; Float -&gt; Picture
graph f (l, r, b, t) = pictures . map Line 
                     . filter (all (\(_,y) -&gt; b &lt;= y &amp;&amp; t &gt;= y)) 
                     . (tail &gt;&gt;= flip (zipWith (\x y -&gt; [x, y]))) 
                     . map (\x -&gt; (x, f x)) 
                     . flip (enumFromThenTo l) r . (l+)
</code></pre>

<p>The point <code>dx</code> is completely gone from <code>graph</code>. However, the function is now unreadable. We went from a perfectly understandable function to a highly complex one. It gets a lot more readable if we use some helpers, but at that point we're almost back to your original function:</p>

<pre><code>graph :: (Float -&gt; Float) -&gt; (Float, Float, Float, Float) -&gt; Float -&gt; Picture
graph f (l, r, b, t) = pictures . map Line . filter inGraph
                     . segments . points . ranged
   where
     inGraph (_,y) = fall (\(_,y) -&gt; b &lt;= y &amp;&amp; t &gt;= y)
     segments ps   = zipWith (\x y -&gt; [x, y]) ps $ tail ps
     ...
</code></pre>

<p>That's not better than your original version, because <strong>your original version is already very good to begin with</strong>. The only change I could envision is a list comprehension in <code>visible</code>, but that's a matter of preference:</p>

<pre><code>graph :: (Float -&gt; Float) -&gt; (Float, Float, Float, Float) -&gt; Float -&gt; Picture
graph f (l, r, b, t) dx = pictures lines
    where
        points = [(x, f x) | x &lt;- [l,l+dx..r]]
        pairs  = zipWith (\x y -&gt; [x,y]) points $ tail points

        lines = [Line segment | segment &lt;- pairs,  all (\(_,y) -&gt; b &lt;= y &amp;&amp; t &gt;= y)) segment]
</code></pre>

<p>But you're the judge on which variant <em>you</em> want to use.</p>

<h1>Other remarks</h1>

<p>Thank you for using type signatures. Keep in mind that it's uncommon to use them in local bindings (<code>where</code>), as the outer function's signature should fix all types already. Inner type signatures can be a hassle if you change your outer type signature later, but they're sometimes necessary.</p>
    </div>