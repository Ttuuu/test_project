<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You have 1 reputation point, and you make no use of functions or complex data structures. Because of this, I'm going to assume you're a beginner to coding. </p>

<p>Congratulations, beginner, on finishing a program and on submitting it for review! You will find that you can learn a huge amount from reviews, probably more stuff faster than by any other method.</p>

<p><strong>Control &amp; Data structures</strong></p>

<p>You don't show any loops or functions, so I won't suggest using them. Yet.</p>

<p><strong>PEP 8</strong> </p>

<p>I will suggest that you take a look at <a href="https://pep8.org/" rel="noreferrer">PEP-8</a>. It's "THE standard" for writing Python code, so the sooner you start drinking the Kool-Aid, the sooner you'll stop getting criticized for not following it. </p>

<p><strong>CAPS are for constants</strong></p>

<p>One thing you'll find in PEP 8 is the notion of different letter-case conventions for different kinds of name. Variable names that change are generally in what is called <a href="https://en.wikipedia.org/wiki/Snake_case" rel="noreferrer"><code>snake_case</code></a>, while "variables" that <em>don't change</em> (that are called "constants" despite the fact that you <em>could</em> change them) are spelled using <code>ALL_CAPS</code>.</p>

<p>In your code, you have some symbols that meet these criteria. Specifically, <code>married_bracket_caps</code> and <code>single_bracket_caps</code> are constants, and should be spelled that way.</p>

<p>You can argue about whether other symbols, that are initialized based on a single choice and never change later, are constant or not. And people do. ;-)</p>

<p><strong>Error Checking</strong></p>

<p>You don't check for errors. At this point, with no way to loop and try again, your only option would be to exit the program. But you should still get in the habit of validating your inputs, especially inputs that come from those pesky humans. Humans are notorious for providing bad inputs. You have this:</p>

<pre><code>if marital_status == "M":
    standard_deduction = "24800"
    # marrital standard deduction
elif marital_status == "S":
    standard_deduction = "12400"
    # single standard deduction
</code></pre>

<p>Add this:</p>

<pre><code>else:
    print("Eat flaming death, vile Terry!")
    sys.exit(1)
</code></pre>

<p>(Or some other message, if you'd like.)</p>

<p><strong>Don't Repeat Yourself</strong></p>

<p>There is a currently-popular "principle" of programming called "DRY" -- short for "Don't Repeat Yourself." A good programmer has dry code, dry socks, and a dry wit.</p>

<p>In your case, you are repeating a test:</p>

<pre><code>if marital_status == "M":
    standard_deduction = "24800"
...    

taxable_income = int(household_income) - int(standard_deduction)

if marital_status == "M":
    bracket = married_bracket_caps
...
</code></pre>

<p>Instead of repeating yourself, move the check down until you have all the data you need, and then do the test one time:</p>

<pre><code>if marital_status == "M":
    bracket = MARRIED_BRACKET_CAPS
    standard_deduction = MARRIED_STANDARD_DEDUCTION
</code></pre>

<p><strong>DRY your code, redux</strong></p>

<p>Also, you have this:</p>

<pre><code>elif taxable_income &lt;= int(bracket[1]):
    tax = (int(bracket[0]) * .1)+(.12*(taxable_income - int(bracket[0])))
</code></pre>

<p>This is bad because it repeats a lot, and because it puts too much work in a single expression. Let's look at it:</p>

<pre><code>tax = bracket-0-cap * some rate + (income - bracket-0-cap) * some other rate
</code></pre>

<p>You can dry this out by eliminating a lot of the calls. For example, why are you calling <code>int()</code> on numbers that YOU put into YOUR array as <code>integers</code>? They're already <code>int</code>s, you don't need to do that!</p>

<p><strong>No Magic Numbers</strong></p>

<p>What's .1? What's .12? Those are called <a href="https://en.wikipedia.org/wiki/Magic_number_(programming)" rel="noreferrer"><strong>magic numbers</strong></a> and they're bad.</p>

<p>Use constants (which you now know should be in ALL_CAPS) to replace these. Or use a lookup of an array (which is constant). Like:</p>

<pre><code>tax = RATE_0 * income
</code></pre>

<p>or</p>

<pre><code>tax = TAX_RATES[0] * income
</code></pre>
    </div>