<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If you collect the indices along with the duplicates, you don't need to loop over the list again:</p>

<pre><code>var header = new List&lt;string&gt;();
var duplicates = header.Select((x, index) =&gt; new { x, index }).ToLookup(x =&gt; x.x, x =&gt; x.index);
foreach(var duplicate in duplicates.Where(x =&gt; x.Count() &gt; 1)) {
  var start = 1;
  foreach(var index in duplicate) {
    header[index] = $"{duplicate.Key}{start++}";
  }
}
</code></pre>

<p>This uses string interpolation (<code>$</code>-strings) as a shorthand for <code>string.Format</code>.</p>

<hr>

<p>On premature optimisation:</p>

<p>You seem concerned about the <span class="math-container">\$O(n^2)\$</span> performance of your solution. At the same time you mention your actual input will have ~30 items. Before spending too much time worrying about the efficiency of your code, did you try to find out whether your current solution is problematic? It seems to me that the list is small enough that even a less efficient solution should be quick enough. </p>

<p>Before trying to optimise specific parts of your code, ask yourself two things:</p>

<ol>
<li>Do I need to optimise? Is execution time currently a problem?</li>
<li>Where is the efficiency problem in the code?</li>
</ol>

<p>Before optimising, profile your program to figure out where the problems actually are. Before that, efficiencies like  <span class="math-container">\$O(n^2)\$</span>  or <span class="math-container">\$O(n \log n)\$</span> are purely academic.</p>
    </div>