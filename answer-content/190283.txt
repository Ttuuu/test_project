<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I subscribe to what @user1118321 and @AJD said, but want to add a few remarks.</p>

<h2>About references</h2>

<p>References aren't always the way to go. In your constructor (<code>Circle(const int &amp; r = 1.0);</code>), it isn't optimal to get the argument by reference, because an int will be smaller than a reference (a pointer under the hood), generally 4 bytes vs 8 bytes. So it'd be better to pass it by value: <code>Circle(int r = 1)</code>. By the way, <code>1.0</code> is a <code>float</code>, so the assignment looks a bit weird.</p>

<p>Idem, as a return value: <code>const double &amp; corey::Circle::getRadius() const</code>. A const reference will act as a value, so return by value is better (and more idiomatic): <code>double Circle::getRadius() const</code>.</p>

<h2>About encapsulation</h2>

<p>You probably have read about data encapsulation, that principle according which the class, and the class alone is responsible for handling its data members. Your design is built around this principle.</p>

<p>Don't take such things too literally. In this case, it makes your interface difficult to use without any safety benefit. If I want to modify the radius of my circle (which sounds legitimate), I have to assign it a new circle with the desired radius. That is unefficient and cumbersome.</p>

<p>You should rather start from what functionality you want to offer, and derive your implementation from it. If your circle is defined only by its radius, it's basically a <code>double</code>. And I can sum up all of your code by:</p>

<pre><code>using Circle = double; 
double area(Circle radius) { return M_PI * radius * radius; }
// I get all the rest for free since +, =, etc. are already defined for double
</code></pre>

<h2>About constness</h2>

<p>I don't see any reason to make every circle behave like it is <code>const</code>. Client code might legitimately wish to differentiate const circles and those which aren't.</p>

<p>You can provide for this by implementing two member functions:</p>

<pre><code>double  radius() const { return radius; }
double&amp; radius()       { return radius; } // will be called if `this` isn't const
</code></pre>

<p>Or, you can simplify more radically your design and implement <code>Circle</code> as a <code>struct</code>: <code>struct Circle { double radius; };</code> seems good enough, at least until you have a good reason not to be satisfied with it.</p>

<h2>About case</h2>

<p>There aren't hard rules about it, but <code>get_radius</code> is more C++-like than <code>getRadius</code></p>
    </div>