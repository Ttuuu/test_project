<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your use of lambdas and partials makes no sense, and is really hard to understand. If you need them to be functions then just make them functions. Or even better, just write the code out. Some of them are just one-off functions and don't add any value, and should be inlined. The others are just ridiculously hard to read, and should be defined as normal functions.</p>

<p>First let's look at how you get the values from the file. I'm <em>pretty</em> sure I know what the general idea of your algorithm is.</p>

<pre class="lang-none prettyprint-override"><code>for line in source file
    if the line has one of the values we want
        parse the line, and save the value
</code></pre>

<p>This is much easier to implement like this</p>

<pre class="lang-py prettyprint-override"><code>def extract_values(source_file, desired_vars):
    with open(source_file) as f:
        for line in f:
            if any(line.startswith(var) for var in desired_vars):
                parsed = ast.parse(line).body[0]
                yield parsed.targets[0].id, parsed.value.s

filename = path.join(package_name, '__init__.py')
metadata_names = '__author__', '__version__'
values = dict(extract_values(filename, metadata_names))
</code></pre>

<p>Using all of your lambdas and iterables doesn't seem to give much value - I assume you were doing them because this is potentially a big file and you don't want it all in memory? If so don't worry about it - doing the <code>for line in f</code> <a href="https://stackoverflow.com/a/8010133/3076272">automatically does buffered-IO and memory management</a>.  Then we can use a generator and construct a dict from it.  This is much more readable, and is unlikely to make much of a difference in performance. More importantly, however, is that unless you're doing something ridiculous in setup.py it shouldn't really matter.</p>

<p>Next let's look at how you get the data files.  I cannot figure out why you did it this way. This line:</p>

<pre><code>data_files=[
    (_data_install_dir(), map(_data_join, listdir(_data_join())))
]
</code></pre>

<p>is basically nonsensical.  You map <code>_data_join</code> onto each file inside of calling <code>_data_join()</code>?  What we really have here are two constants - some data install directory, and some data file directory. We want to list all of the files in the data file directory, and pair them with the data install directory.  We can just do something like this</p>

<pre><code>data_files = data_install_folder, [path.join(data_file_source, filename) for filename in listdir(data_file_source)]
</code></pre>

<p>Putting this all together, we have something like this</p>

<pre><code>from setuptools import setup, find_packages
import os
import ast

from compatibility import filter, map
from pip import __file__ as pip_loc


def extract_values(source_file, desired_vars):
    with open(source_file) as f:
        for line in f:
            if any(line.startswith(var) for var in desired_vars):
                parsed = ast.parse(line).body[0]
                yield parsed.targets[0].id, parsed.value.s


if __name__ == '__main__':
    package_name = 'foooooo'

    filename = os.path.join(package_name, '__init__.py')
    metadata_names = '__author__', '__version__'
    values = dict(extract_values(filename, metadata_names))

    data_file_source = os.path.join(os.path.dirname(__file__), package_name)
    data_install_folder = os.path.join(os.path.dirname(path.dirname(pip_loc)), package_name)

    all_data_files = os.path.join(data_file_source, filename) for filename in listdir(data_file_source)
    data_files = [(data_install_folder, all_data_files)]

    setup(name=package_name,
        author=values['__author__'],
        version=values['__version__'],
        test_suite=package_name + '.tests',
        packages=find_packages(),
        package_dir={package_name: package_name},
        data_files=data_files
    )
</code></pre>

<p>As a quick note, if you want to get things working for both Python 2 and Python 3, <code>imap</code> and <code>ifilter</code> don't exist in Python 3. I usually like to make a file like <code>compatibility.py</code> that I put things like that into, then just import from that.</p>

<pre><code>try:
    from itertools import imap as map, ifilter as filter
except ImportError:
    pass
</code></pre>
    </div>