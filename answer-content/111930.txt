<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Data Handling &amp; Security</strong></p>

<p>You use prepared statements, which protects you from SQL injection, which is good. However, the way you handle passwords could be improved to increase security.</p>

<p>It's not a good idea to semi-randomly apply sanitation functions to user input as it results in dirty data. </p>

<p><code>stripslashes</code> for example really only makes sense when magic quotes is enabled, so you should check that first (and then only strip the slashes in some init file, not every time you access GET). For example, if a user has a password like this: <code>a\'b\\c\'d</code>, stripping slashes reduces the password length from 9 to 6 characters. </p>

<p>Same problem with <code>strip_tags</code>, only much worse. If my password is <code>a&lt;super$secure!password</code>, now my password is <code>a</code>.</p>

<p>You also don't need <code>strip_tags</code>. As XSS protection it's not sufficient anyways (and definitely not needed for passwords, which aren't echoed); You should HTML-encode data when echoing it instead.</p>

<p>There's also really no need to have a length restriction on the password, especially not one that is shorter than what your hashing algorithm allows.</p>

<p><strong>Hashing</strong></p>

<p><a href="https://codereview.stackexchange.com/questions/104818/hashing-passwords-in-php/104826#104826">Simple sha is really not good enough anymore</a>, as it's too fast. Use <a href="https://secure.php.net/manual/en/function.password-hash.php">bcrypt</a> instead.</p>

<p><strong>Error Handling</strong></p>

<p>Don't echo database error messages directly to the enduser. They won't know what to do with it, and it may provide attackers with information or enable some forms of attacks (such as error based SQL injection). </p>

<p>It's also not a good idea to echo anything in a function, as side-effects like that make it harder to reuse.</p>

<p><strong>Structure</strong></p>

<p>I think your structure is pretty clean, and your code easy to read. Just a couple of small points:</p>

<p><code>storeFormValues</code> doesn't seem to have any purpose. I wouldn't call the constructor inside a function of the same class, but just use it directly. </p>

<p>I would also not pass a magic array to the constructor, as it's hard to use and reuse (I have to guess how the array must be build and what it must contain, and I have to use the pre-defined array keys).</p>

<p>Instead, just change your constructor to <code>__construct($username, $password)</code>. This increases clarity and reduces future bugs.</p>

<p><strong>Misc</strong></p>

<ul>
<li>remove unused variables such as <code>$correct</code>.</li>
<li>comments such as <code>//store the parameters</code> are not really needed as they don't add any information.</li>
<li>same things should be named in the same way to avoid confusion. For example, registering and logging in are quite similar. But the names <code>userLogin</code> and <code>register</code> are constructed differently. Just use <code>login</code> and <code>register</code>. </li>
</ul>
    </div>