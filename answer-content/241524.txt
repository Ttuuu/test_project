<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Perhaps only marginally, but the readability of your code can be improved by using <code>enumerate</code> and the <code>reverse=True</code> flag in <code>sorted</code>.</p>

<pre><code>def transpose_r(ls): 
    return [len(ls)-1-k
            for k, Pk in sorted(enumerate(ls), 
                                reverse=True, 
                                key=itemgetter(1))]
</code></pre>

<p>If we index starting from the left, then this is further simplified.</p>

<pre><code>def transpose_l(ls): 
    return [x for x, Px in sorted(enumerate(ls), key=itemgetter(1))]
</code></pre>

<hr>

<p>The transpose has the funny property that <code>transpose(ls)[ls[j]] == j</code>. We can use this to build the transpose without sorting.</p>

<pre><code>def transpose_l(ls):
    tr_ls = [0]*len(ls)

    for l in ls:
        tr_ls[ls[l]] = l

    return tr_ls

def transpose_r(ls):
    n = len(ls)
    tr_ls = [0]*n

    for l in ls:
        tr_ls[n - 1 - ls[l]] = n - 1 - l

    return tr_ls
</code></pre>

<p>Alternatively, we can use <code>enumerate</code> again.</p>

<pre><code>def transpose_l(ls):
    tr_ls = [0]*len(ls)

    for ix, l in enumerate(ls):
        tr_ls[l] = ix

    return tr_ls

def transpose_r(ls):
    n = len(ls)
    tr_ls = [0]*n

    for ix, l in enumerate(ls):
        tr_ls[n - 1 - l] = n - 1 - ix

    return tr_ls
</code></pre>
    </div>