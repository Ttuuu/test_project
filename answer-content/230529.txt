<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here is another generic and deferred extension method version that seems to work for me. We iterate through all sequences one by one at once and only stop when there is nowhere to go within any sequence or the number of items requested have already been yielded.</p>

<pre><code>    public static IEnumerable&lt;TIn&gt; FecthFromEach&lt;TIn&gt;(
        this IEnumerable&lt;IEnumerable&lt;TIn&gt;&gt; sequences,
        int maxLimit)
    {
        var enumerators = sequences.Select(_ =&gt; _.GetEnumerator()).ToList();
        var length = enumerators.Count;
        var breakEnumerators = new bool[length];            
        var count = 0;

        try
        {
            while (count &lt; maxLimit &amp;&amp; breakEnumerators.Any(_ =&gt; !_))
            {
                foreach (var i in Enumerable.Range(0, length))
                {
                    if (count &gt;= maxLimit) break;

                    if (!enumerators[i].MoveNext()) breakEnumerators[i] = true;
                    else
                    {
                        yield return enumerators[i].Current;
                        ++count;
                    }
                }
            }                
        }
        finally
        {
            enumerators.ForEach(_ =&gt; _.Dispose());
        }
    }
</code></pre>

<p>Here are the test cases that I use to confirm it's working as expected:</p>

<pre><code>[TestFixture]
public class CollectionExtentionsTests
{        
    [TestCaseSource(nameof(CountResultPairs))]
    public void TestFetchFromEach(Tuple&lt;int, int[]&gt; pair)
    {
        var l1 = new[] { 1, 11, 111, 1111, 11111 };
        var l2 = new[] { 2, 22 };
        var l3 = new[] { 3 };
        var l4 = new[] { 4, 44, 444, 4444 };
        var l5 = new[] { 5, 55, 555 };

        var input = new[] { l1, l2, l3, l4, l5 };

        var result = input.FecthFromEach(pair.Item1);

        CollectionAssert.AreEqual(pair.Item2, result);
    }

    private static IEnumerable&lt;Tuple&lt;int, int[]&gt;&gt; CountResultPairs
    {
        get
        {
            yield return Tuple.Create(10, new[] { 1, 2, 3, 4, 5, 11, 22, 44, 55, 111 });
            yield return Tuple.Create(11, new[] { 1, 2, 3, 4, 5, 11, 22, 44, 55, 111, 444 });
            yield return Tuple.Create(12, new[] { 1, 2, 3, 4, 5, 11, 22, 44, 55, 111, 444, 555 });
            yield return Tuple.Create(13, new[] { 1, 2, 3, 4, 5, 11, 22, 44, 55, 111, 444, 555, 1111 });
            yield return Tuple.Create(14, new[] { 1, 2, 3, 4, 5, 11, 22, 44, 55, 111, 444, 555, 1111, 4444 });
            yield return Tuple.Create(15, new[] { 1, 2, 3, 4, 5, 11, 22, 44, 55, 111, 444, 555, 1111, 4444, 11111 });
            yield return Tuple.Create(115, new[] { 1, 2, 3, 4, 5, 11, 22, 44, 55, 111, 444, 555, 1111, 4444, 11111 });
        }
    }
}
</code></pre>

<p>Note that I used int instead of string in the tests but it should affect anything anyway.</p>
    </div>