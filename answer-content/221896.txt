<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>General</h2>

<p>Going through your list of concerns:</p>

<ol>
<li>the function names are not crazy, though you could definitely benefit from implementing type hints;</li>
<li>the doc strings should specifically describe all parameters and return values;</li>
<li>no, I don't see <code>enum</code> being useful here;</li>
<li>logging seems fine to me;</li>
<li>Your exceptions are fine. The DRY concern is... not really that big of a deal. You could go out of your way to define a tuple of default keys needed for a dictionary, but it's more hassle than it's worth. About unhandled exceptions: let them stay exceptional. At the most, you may want a top-level <code>except Exception</code> in your <code>main</code> that logs exceptions that fall through.</li>
<li>Seems fine, though I don't understand your data well enough to speak authoritatively</li>
<li>Yes. Generally, they should be listed in order of dependency (callee first, caller later). This is already what you have.</li>
</ol>

<h2>Add a shebang</h2>

<p>at the top, probably <code>#!/usr/bin/env python3</code> .</p>

<h2>Use pathlib instead of path.join</h2>

<p>Something like <code>AIRPORT_INFO = Path(THIS_PY_LOC) / 'airports.csv'</code></p>

<h2>Use f-strings instead of concatenates</h2>

<p>Something like <code>LOG_FILENAME = f'{os.path.basename(__file__)}.log'</code></p>

<p>Also seen: <code>str(data['Latitude']) + "," + str(data['Longitude'])</code> becomes </p>

<p><code>f'{data["Latitude"]},{data["Longitude"]}'</code></p>

<h2>Use generators</h2>

<pre><code>def image_paths(top_folder):
    for filename in os.listdir(IMAGE_FOLDER):
        _file = Path(IMAGE_FOLDER) / filename
        if _file.exists():
            yield _file
</code></pre>

<p>This also applies to your <code>unknown_coords</code>.        </p>

<h2>Use <code>update</code> on dicts</h2>

<p>i.e.</p>

<pre><code>        primary_dict[key]['closest city'] = None
        primary_dict[key]['airport'] = None
        primary_dict[key]['distance_to_airport'] = None
</code></pre>

<p>becomes</p>

<pre><code>primary_dict[key].update({
    'closest city': None,
    'airport': None,
    'distance_to_airport': None
})
</code></pre>

<h2>Use <code>scandir</code> instead of <code>listdir</code></h2>

<p>According to the docs:</p>

<blockquote>
  <p>The <code>scandir()</code> function returns directory entries along with file attribute information, giving better performance for many common use cases.</p>
</blockquote>

<p>So use that in your <code>image_paths</code> function. In fact... reading that function again, why are you looping at all? This can be a one-liner - just call <code>scandir()</code>. I'm not sure why you are checking for existence of the files - do you not trust the values returned by <code>listdir</code>?</p>
    </div>