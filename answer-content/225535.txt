<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In your first implementation you can make <code>deleteAction</code> a  <em>constant</em> if you initialize it in all cases of the switch-statement:</p>

<pre><code>    let deleteAction: UIContextualAction?
    switch currentShowingStatus {
    case .accepted:
        deleteAction = UIContextualAction(...)
    case .sent:
        deleteAction = UIContextualAction(...)
    case .received:
        deleteAction = nil
    }
</code></pre>

<p>That makes it clear that the variable is initialized exactly once before used. I would also replace <code>default:</code> by the explicit <code>case received:</code>. That makes it obvious to reader in which case no swipe action is configured (without looking up the enum definition) and forces you to update the code if more cases are added.</p>

<p>The double definition of <code>UISwipeActionsConfiguration</code> could be avoided by initializing the <em>array</em> of actions instead:</p>

<pre><code>    let actions: [UIContextualAction]
    switch currentShowingStatus {
    case .accepted:
        actions = [UIContextualAction(...)]
    case .sent:
        actions = [UIContextualAction(...)]
    default:
        actions = []
    }

    let configuration = UISwipeActionsConfiguration(actions: actions)
    configuration.performsFirstActionWithFullSwipe = false
    return configuration
</code></pre>

<p>It remains the code duplication for <code>UIContextualAction</code> though.</p>

<p>In your alternative approach you append or remove elements from the <code>actions</code> array. But that array is initially empty. Similarly as above, you can simplify it to</p>

<pre><code>    let deleteAction = ...

    let actions: [UIContextualAction]
    switch currentShowingStatus {
    case .accepted, .sent:
        actions = [deleteAction]
    case .received:
        actions = []
    }
</code></pre>

<p>But – as you noticed – you have to evaluate <code>self.currentShowingStatus</code> inside the closure again. I would avoid that for an additional reason: You are relying on the fact that the status has not changed when the closure is <em>executed.</em></p>

<p>The code duplication for <code>UIContextualAction</code> can be avoided if you initialize the <em>request</em>  first:</p>

<pre><code>   let request: Request?
   switch currentShowingStatus {
   case .accepted:
       request = self.acceptedRequests[indexPath.row]
   case .sent:
       request = self.sentRequests[indexPath.row]
   case .received:
       request = nil
   }

   if let request = request {
       let deleteAction = UIContextualAction(style: .destructive, title: "Delete") {
           _, _, completionHandler in
           self.deleteClientRequest(request)
           completionHandler(true)
       }
       let configuration = UISwipeActionsConfiguration(actions: [deleteAction])
       configuration.performsFirstActionWithFullSwipe = false
       return configuration
   } else {
       return UISwipeActionsConfiguration(actions: [])
   }
</code></pre>

<p>Note also that unused closure parameters can be replaced by the wildcard parameter <code>_</code>. </p>

<p>I would probably leave it like that, but of course you can combine the techniques:</p>

<pre><code>    let request: Request?
    switch currentShowingStatus {
    case .accepted:
        request = self.acceptedRequests[indexPath.row]
    case .sent:
        request = self.sentRequests[indexPath.row]
    case .received:
        request = nil
    }

    let actions: [UIContextualAction]
    if let request = request {
        actions = [UIContextualAction(style: .destructive, title: "Delete") {
            _, _, completionHandler in
            self.deleteClientRequest(request)
            completionHandler(true)
            }]
    } else {
        actions = []
    }

    let configuration = UISwipeActionsConfiguration(actions: actions)
    configuration.performsFirstActionWithFullSwipe = false
    return configuration
</code></pre>
    </div>