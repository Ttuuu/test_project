<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p><strong><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let" rel="nofollow noreferrer">let</a> vs <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const" rel="nofollow noreferrer">const</a> is fundamentally an ES6+ issue:</strong></p>
</blockquote>

<ul>
<li><strong>const</strong><br>Creates a constant whose scope can be either <code>global</code> or <code>local</code> to the block in which it is declared. An <code>initializer</code> for a constant is required. You must specify its value in the same statement in which it's declared.</li>
</ul>

<pre><code>// wrong
const timer;
// Uncaught SyntaxError: Missing initializer in const declaration

// right
const timer = 60;
</code></pre>

<ul>
<li><strong>let</strong><br>Allows you to declare variables that are limited to a scope of a <code>block</code> statement, or expression on which it is used, unlike the <code>var</code> keyword, which defines a variable globally, or locally to an entire function regardless of block scope. <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let#Temporal_dead_zone" rel="nofollow noreferrer">Please note that a <code>let</code> variable is initialized to a value only when a parser evaluates it</a>.</li>
</ul>

<pre><code>function do_something() {
  console.log(bar); // undefined
  console.log(foo); // ReferenceError
  var bar = 1;
  let foo = 2;
};
</code></pre>

<p><strong>With that said, change the declaration to <code>let timer;</code></strong></p>

<pre><code>// Within the first `useEffect`
useEffect(() =&gt; {
     let timer; // change this
     if (secCount &gt; 0) {
       timer = setInterval(() =&gt; {setSecCount(secCount - 1)}, oneSec);
     }
     if (secCount === 0 &amp;&amp; minCount &gt; 0) {
       timer = setInterval(() =&gt; {setSecCount(60)}, oneSec);
     }
     return () =&gt; clearInterval(timer);
   }, [secCount]);
<span class="math-container">```</span>
</code></pre>
    </div>