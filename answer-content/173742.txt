<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If you have large enumerations, you might find that linear search in an array is inefficient.  There's also a real risk of accidentally omitting one or more of the mappings.</p>

<p>I solved this a different way by writing the enum→string conversion as a <code>switch</code> (with compiler warnings to indicate a missed <code>case</code>), and then generating a string→enum <code>std::map</code> when it's first required:</p>

<pre><code>std::string to_string(some_class::enum_type e) {
    switch (e) {
    // you might want to use a macro to get matching labels and strings
    case some_class::enum_type::none: return "none";
    case some_class::enum_type::type1: return "type1";
    case some_class::enum_type::type2: return "type2";
    // N.B. no 'default', or GCC won't warn about missing case
    }
    // invalid value
    return {};
}

some_class::enum_type from_string(const std::string&amp; s) {
    static auto const m = invert(some_class::enum_type::none,
                                 some_class::enum_type::type2,
                                 to_string);
    auto it = m.find(s);
    return it == m.end() ? some_class::enum_type::none : *it;
}

template&lt;typename T, typename R&gt;
std::map&lt;R,T&gt; invert(T first, T last, R(*forward_func)(T))
{
    if (first &gt; last) std::swap(first, last);

    std::map&lt;R,T&gt; m;
    for (int i = first;  i &lt;= last;  ++i)  {
        T t = T(i);
        R r = to_string(t);
        m[r] = t;
        // Or: if (!m.insert_or_assign[t].second)
        //         log_warning(m[r] and t both map to r);
    };
    return m;
}
</code></pre>

<p>To make <code>from_string()</code> into a template, you'll want some sort of <code>enum_traits&lt;T&gt;</code> to specify the 'first' and 'last' values and the default value to return if the string isn't found (your unit tests can use these limits when checking that every enum maps back to itself).</p>

<p>You might also need to help the compiler select the correct overload of <code>to_string()</code>; alternatively, you should be able to inline it into <code>invert()</code>.  In my case, some of the enums I inherited had more than one mapping to/from string, depending on the context, so calling them all <code>to_string</code> wasn't an option for me.</p>
    </div>