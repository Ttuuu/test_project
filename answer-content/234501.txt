<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I have to state right at the start, I don't know what your code does.  That's ok.  I'm going to stream-of-conciousness review the code, so you'll get all my thoughts and improvements as it goes on.  Maybe that's a good thing.</p>

<h2>Global Variables</h2>

<p>Global variables are frowned upon.  They make code harder to test and harder to reason about.  The function <code>user_in</code> modifies <code>all_primes</code>.  What value(s) can <code>all_primes</code> have before the function runs?  If the function is run more than once, does more stuff get added to <code>all_primes</code>?  Does stuff get replaced?  Is the result corrupted?</p>

<p>In this case, the global variable is easy to get rid of.  Instead of modifying a global <code>all_primes</code> variable, how about returning it?</p>

<pre><code>def user_in(num):
    all_primes = []
    while True:
        ...
        all_primes.append(primes)
        ...
    return all_primes

...
all_primes = user_in(x)
...
</code></pre>

<p>Now you can run <code>user_in()</code> several times with different input values, and actually test that the right value is returned in your test cases.</p>

<h2>Method Naming</h2>

<p>What does <code>user_in()</code> do?  It sounds like it might ask the user for some input, but it isn't clear what that input might be.</p>

<p>But reading the <code>user_in()</code> method, it doesn't ask for any input at all!  Rather, the mainline code ask the user to enter a number, and this number is given as an input to the <code>user_in()</code> method.  A better name would be <code>process_and_output()</code>, but that is still a horrible name; it doesn't say what kind of processing is being done, nor what kind of output is produced.  Moreover, the method is producing output and it is (now) returning a value.  Functions should do one logical thing, and be named after what it does.</p>

<h2>Ranges, Lists, and Iterables</h2>

<p>The statement <code>numbers = [i for i in range(1, num + 1)]</code> constructs a range object with the numbers from 1 to <code>num</code> inclusive, takes successive numbers in that range, and extracts them into a list.  The remainder of the code iterates over the values stored in <code>numbers</code>.</p>

<p>Why?</p>

<p>First of all, <code>numbers = list(range(1, num + 1))</code> would be a shorter way of expressing the construction of <code>numbers</code>.</p>

<p>Second, why realize a physical list of numbers when you are just going to iterator over it, and a <code>range()</code> object itself is iterable?  Just use the range object.</p>

<pre><code>numbers = range(1, num + 1)
</code></pre>

<h2>Factorization</h2>

<pre><code>factors = [i for i in numbers if num % i == 0]
</code></pre>

<p>This is fine, but it is inefficient.  Factors come in pairs.  If <code>num % i == 0</code>, then <code>i</code> is a factor and <code>num // i</code> is also a factor.  If you recorded both, then instead of looping over all <code>numbers</code>, you could loop up to <code>math.isqrt(num) + 1</code>.  If <code>num</code> is one million, this would save you nine hundred and ninety nine thousand trial divisions!  Note, you would have to watch for the special cases of <code>num</code> being a perfect square: you would want to generate that factor exactly once.</p>

<h2>Move Constant Expressions Out of Loops</h2>

<p>What does this statement do?</p>

<pre><code>    primes = [i for i in factors if len(factors) &lt;= 2 and i != 1]
</code></pre>

<p>First, look at the <code>len(factors) &lt;= 2</code> condition.  Can it change during the loop, or will it always be either <code>True</code> or <code>False</code>?  The list of <code>factors</code> doesn't change, so clearly the length is constant.  So we could write this as a two statements:</p>

<pre><code>    if len(factors) &lt;= 2:
        primes = [i for i in factors if True and i != 1]
    else:
        primes = [i for i in factors if False and i != 1]
</code></pre>

<p>Simplifying <code>if True and anything</code> to <code>if anything</code>, as well as <code>if False and anything</code> to "never", we get:</p>

<pre><code>    if len(factors) &lt;= 2:
        primes = [i for i in factors if i != 1]
    else:
        primes = []
</code></pre>

<p>Moreover, if there are 2 or less factors, those factors are <code>1</code> and <code>num</code>.  Since you are filtering out the <code>i == 1</code> factor, you will always be left with the second factor, if it exists, which will always be <code>num</code>:</p>

<pre><code>    if len(factors) == 2:
        primes = [num]
    else:
        primes = []
</code></pre>

<p>Then, you are adding this list to <code>all_primes</code>, and later flattening the list, to remove the empty lists which you added.</p>

<p>How about, just adding the prime you found to <code>all_primes</code>, and not generating a list of lists?</p>

<pre><code>    if len(factors) == 2:
        all_primes.append(num)
</code></pre>

<h2>Printing</h2>

<p>That is a rather long print statement.  Any reason for making it that long?  Maybe split it up into the equivalent 7 print statements?  We've gotten rid of <code>primes</code>, which contained 0 or 1 value, so computing the "sum of primes" needed to be adjusted.  It begs the question as to what the "sum of primes" was supposed to be?  Why does it produce 0 if the number wasn't prime?</p>

<pre><code>    print('Number: {}'.format(num))
    print('Factors: {}'.format(factors))
    print('Factor count: {}'.format(len(factors)))
    print('Sum of factor: {}'.format(sum(factors)))
    print('Sum of numbers: {}'.format(sum(numbers)))
    print('Sum of Primes: {}'.format(num if len(factors) == 2 else 0))
    print(''.format(primes))
</code></pre>

<p>Wait a second ... what is that last print statement printing?  <code>''.format(primes)</code>?  Did you have an argument to the format statement that didn't have a corresponding <code>{}</code> code???</p>

<p>Python 3.6+ now has something called an <a href="https://www.python.org/dev/peps/pep-0498/" rel="nofollow noreferrer">f-string</a>, which allows you to interpolate values and expressions directly into the string, so you will never mismatch <code>.format(*args)</code> again!</p>

<pre><code>    print(f'Number: {num}')
    print(f'Factors: {factors}')
    print(f'Factor count: {len(factors)}')
    print(f'Sum of factor: {sum(factors)}')
    print(f'Sum of numbers: {sum(numbers)}')
    print(f'Sum of Primes: {num if len(factors) == 2 else 0}')
    print()
</code></pre>

<h2>Looping a Fixed Number of Times</h2>

<pre><code>def user_in(num):
    while True:
        if num &lt;= 2:
            break
        num -= 1
        ...
</code></pre>

<p>This code wants to loop starting from <code>num - 1</code>, and go down and stop at <code>2</code>.  This is what <code>for variable in range():</code> statements were meant for.  Don't recreate <code>for</code> loops by using <code>while True</code> loops and modifying the loop index yourself:</p>

<pre><code>def user_in(start):
    for num in range(start - 1, 2, -1):
        ...
</code></pre>

<h2>Sum of all primes</h2>

<pre><code>print('... Sum of all primes: {} ...'.format(..., sum(flat_list) + x, ...))
</code></pre>

<p>What is that <code>+ x</code> doing there?  If I give as input the number <code>4</code>, it computes the primes less than <code>4</code> to be <code>[2, 3]</code>, and the sum to be <code>9</code>!  I'm pretty sure this is wrong.</p>

<h2>Reworked Code</h2>

<p>I've reworked the code a little bit, trying to reason out what you were actually trying to do.  For example "Sum of primes" I implemented a running total of the prime numbers being generated.  I also implemented the faster factorization method, I mentioned above, as a separate function.  For good measure, I added a <code>sum_up_to</code> function for computing <span class="math-container">\$\sum_{i=1}^{n} i\$</span>.  Finally, the main function has been renamed to <code>find_primes_up_to()</code>, since that seems to be what it is doing, and the mainline code has been moved into a <code>if __name__ == '__main__':</code> guard, so the file can be imported into other files, and allows unit tests to be added.</p>

<pre><code>import math

def factorize(num):
    if num == 1:
        return [1]

    limit = math.isqrt(num) + 1

    small = [1]
    large = [num]
    for i in range(2, limit):
        if num % i == 0:
            small.append(i)
            large.append(num // i)

    if small[-1] == large[-1]:
        large.pop()

    return small + large[::-1]

def sum_up_to(num):
    return sum(range(1, num + 1))

def find_primes_up_to(limit):
    sum_of_primes = 0
    primes = []

    for num in range(1, limit + 1):
        factors = factorize(num)

        print(f'Number: {num}')
        print(f'Factors: {factors}')
        print(f'Factor count: {len(factors)}')
        print(f'Sum 1 to {num}: {sum_up_to(num)}')

        if len(factors) == 2:
            primes.append(num)
            sum_of_primes += num
            print(f'Sum of primes: {sum_of_primes}')

        print()

    return primes

if __name__ == '__main__':
    limit = int(input("Enter upper limit: "))
    primes = find_primes_up_to(limit)
    print(f'Primes: {primes}')
    print(f'Sum of all primes: {sum(primes)}')
</code></pre>
    </div>