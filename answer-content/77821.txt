<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Technique:</h2>
<p>Rather than indexes into an array you should write your algorithm in terms of iterators.</p>
<pre><code>quicksort(arr, 0, (sizeof(arr)/sizeof(arr[0]))-1);
</code></pre>
<p>Much easier to write as:</p>
<pre><code>quicksort(std::begin(arr), std::end(arr));
</code></pre>
<p>The iterator divorcees your algorithm from container it is actually working on. So it will work just as well with arrays and std::vectors and std::array etc..</p>
<h2>Clarity</h2>
<p>You should not need to use this magic <code>(sizeof(arr)/sizeof(arr[0]))-1</code> like this anymore. Couple of problems with it. It is very susceptible to cut and paste problems (because arrays decay into pointers very quickly the above may stop working very quickly if moved to a function (if not done correctly)).</p>
<p>In terms of code clarity you should write a function that does size for you:</p>
<pre><code>template &lt;typename T, std::size_t N&gt;
constexpr std::size_t getSize(T const (&amp;)[N])
{ 
    return N;
}
</code></pre>
<p>Now your code becomes self documenting:</p>
<pre><code>quicksort(arr, 0, getSize(arr)-1);
</code></pre>
<p>It also shows more clearly you are using non idiomatic C++ (the -1). Ranges in C++ are expressed in terms <code>[beginning, end)</code>. ie. <code>end</code> is one past the end of the container. This is done everywhere in C++ code; breaking from this idiom is going to cause you a lot of confusion with other C++ developers.</p>
<h3>Compilers Job</h3>
<p>Don't do work the compiler can do for you:</p>
<pre><code>int arr[8] = {110, 5, 10,3 ,22, 100, 1, 23};
</code></pre>
<p>The compiler is better than you at it anyway and it will prevent errors. Here you have said the number of elements is 8. As a human I can't see that at a glance I could count them to verify but as a human I am lazy and going to assume you got it correct. If you did not get it correct then we will have problems.</p>
<p>So let the compiler work it out.</p>
<pre><code>int arr[] = {110, 5, 10,3 ,22, 100, 1, 23};
</code></pre>
<p>Now if the array changes size you only have to change one thing (the data). Rather than two things (data and size).</p>
    </div>