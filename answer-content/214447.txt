<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Maybe One of Us has the Wrong Idea</h1>

<p>When I work with the code I gets confused by the <code>CommandLineInterpreter</code> and <code>CommandLineInteraction</code>, because currently a <code>CommandLineInteraction</code> <strong>is a</strong> <code>CommandLineInterpreter</code>. I think actually a <code>CommandLineInteraction</code> <strong>has a</strong> <code>CommandLineInterpreter</code></p>

<p>Then I looked into the <code>CommandLineInterpreter</code>:</p>

<blockquote>
  <pre class="lang-java prettyprint-override"><code>public interface CommandLineInterpreter {
   Set&lt;Command&gt; getCommands();
}
</code></pre>
</blockquote>

<p>but by the name I thought to found</p>

<pre class="lang-java prettyprint-override"><code>public interface CommandLineInterpreter {
    Command interpret(String lineOfInput);
}
</code></pre>

<p>With this interface the <code>start</code> in <code>CommandLineInteraction</code> would look like</p>

<pre class="lang-java prettyprint-override"><code>public void start() {
    Scanner scanner = new Scanner(input);
    showHelp();
    while (isRunning) {
        output.print(COMMAND_PROMPT);
        String line = scanner.nextLine();
        Command command = interpreter.interpret(line);
        // ..
   }
}
</code></pre>

<hr>

<h1><a href="https://blog.codinghorror.com/code-smells/" rel="nofollow noreferrer">Type Embedded in Name</a></h1>

<blockquote>
  <p>Avoid placing types in method names; it's not only redundant, but it forces you to change the name if the type changes.</p>
</blockquote>

<p>In every place I can read <code>command</code>. Imagine you want to change the name to <code>task</code> you have to change at so many places..</p>

<blockquote>
  <p><a href="http://users.csc.calpoly.edu/~jdalbey/305/Lectures/SmellsToRefactorings" rel="nofollow noreferrer">Prefer schedule.add(course) to schedule.addCourse(course)</a></p>
</blockquote>

<hr>

<h1><a href="https://docs.oracle.com/javase/tutorial/java/generics/types.html" rel="nofollow noreferrer">Type Parameter Naming Conventions</a></h1>

<blockquote>
  <p>The most commonly used type parameter names are:</p>
  
  <ul>
  <li>E - Element (used extensively by the Java Collections Framework)</li>
  <li>K - Key</li>
  <li>N - Number</li>
  <li>T - Type</li>
  <li>V - Value</li>
  <li>S,U,V etc. - 2nd, 3rd, 4th types</li>
  </ul>
</blockquote>

<p>The class signature of <code>Command</code> do not follow the convention</p>

<blockquote>
  <pre class="lang-java prettyprint-override"><code>public abstract class Command&lt;Application&gt;
</code></pre>
</blockquote>

<p>This is not bad, but first I thought <code>Application</code> would be a class name and searched for it. If you really want to use a type parameter more than one letters, than write them all in UPPERCASE.</p>

<p>In your <a href="https://codereview.stackexchange.com/questions/214300/java-commandline-interface-implementation">previous question</a> you wrote</p>

<blockquote>
  <p>Any class that implements this interface can use the [<code>CommandLineInteraction</code>]. [<code>Application</code>] is the application, which implements the <code>CommandLineInteraction</code>.</p>
</blockquote>

<p>This is not the case still your type parameter <code>Application</code> is not a <a href="https://docs.oracle.com/javase/tutorial/java/generics/bounded.html" rel="nofollow noreferrer">bounded type parameter</a>. This means that I can create the following Commands:</p>

<pre class="lang-java prettyprint-override"><code>Command&lt;Integer&gt;
Command&lt;String&gt;
Command&lt;CustomTypeXY&gt;
</code></pre>

<p>If you do not want to have this behavior, you can add a <em>upper bound</em> with the key word <code>extends</code> for a class or <code>implements</code> for an interface.</p>

<pre class="lang-java prettyprint-override"><code>public abstract class Command&lt;T extends CommandLineInteraction&gt;
</code></pre>

<p>This means that a <code>T</code> must be a subtype or a <code>CommandLineInteraction</code>.</p>

<p>But if you have not the flexibility and it will only be a <code>CommandLineInteraction</code> you do not need a generic parameter at this point.</p>

<hr>

<h1>Create an Instance Variable in <code>CommandLineInteraction</code></h1>

<p>In <code>CommandLineInteraction</code> we can find a method <code>getAllCommands</code>. This method is used in two other methods: <code>findCommand</code> and <code>showHelp</code>.
<code>getAllCommands</code> creates on each call a new <code>Set</code> with the commands of the <code>cli</code> and the commands of <code>commandLineInteractionInterpreter</code>.</p>

<p>Can the commands change? I think not because I find now methods, which add new commands at runtime. If this is true, create a instance variable <code>commands</code> in <code>CommandLineInteraction</code> instead of treat the method <code>getAllCommands</code> as an instance variable.</p>

<pre class="lang-java prettyprint-override"><code>public class CommandLineInteraction implements CommandLineInterpreter {

    // ..
    Set&lt;Command&gt; commands;

    public CommandLineInteraction(CommandLineInterpreter cli, InputStream input, PrintStream output) {
        // ..
        this.commands = getAllCommands();
    }
</code></pre>

<hr>

<h1>What is a <code>CommandLineInteractionInterpreter</code></h1>

<blockquote>
  <p>provides the two basic command help and exit</p>
</blockquote>

<p>The name of <code>CommandLineInteractionInterpreter</code> is confusing and from the quote and the code you can see that it is not more than a <a href="https://en.wikipedia.org/wiki/Factory_method_pattern" rel="nofollow noreferrer">Factory</a>, that gives you default commands.</p>

<hr>

<h1>Give <code>Set&lt;Command&gt;</code> a Home</h1>

<p>A <a href="https://www.cs.helsinki.fi/u/luontola/tdd-2009/ext/ObjectCalisthenics.pdf" rel="nofollow noreferrer">First Class Collection</a>:</p>

<blockquote>
  <p>Any class that contains a collection should contain no other member variables. Each collection gets wrapped in its own class, so now behaviors related to the collection have a home. </p>
</blockquote>

<h2>Create It</h2>

<pre class="lang-java prettyprint-override"><code>class CommandColletion {
    private Set&lt;Command&gt; values;

    public add(Command) {/* ... */}
    public union(CommandColletion values) {/* ... */}
    public contains(CommandColletion values) {/* ... */}
}
</code></pre>

<h2>Use it</h2>

<pre class="lang-java prettyprint-override"><code>class CommandLineInteraction implements CommandLineInterpreter {
    // ..
    CommandCollection commands;

    CommandLineInteraction(CommandLineInterpreter cli, InputStream input, PrintStream output, CommandCollection defaults) {
        // ..
        this.commands = defaults.union(cli.getCommands());
    }
</code></pre>

<hr>

<p>And now you can safely <a href="https://codereview.stackexchange.com/a/214356/149394">change Set to <code>Map</code></a> :P</p>
    </div>