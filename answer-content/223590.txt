<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Bug</h2>

<pre><code>    for (int p = rangeMax; p &gt; rangeMin; p--)
        for (int q = rangeMax; q &gt; rangeMin; q--)
</code></pre>

<p>You are not including <code>rangeMin</code> in either of the loops, so you will never test products which involve the lower limit.  You want <code>&gt;=</code> in the loop condition:</p>

<pre><code>    for (int p = rangeMax; p &gt;= rangeMin; p--)
        for (int q = rangeMax; q &gt;= rangeMin; q--)
</code></pre>

<h2>Commutativity</h2>

<p>Note that <code>p * q == q * p</code>, so you don't need to test all combinations in the range:</p>

<pre><code>    for (int p = rangeMax; p &gt; rangeMin; p--)
        for (int q = rangeMax; q &gt; rangeMin; q--)
</code></pre>

<p>Only the ones where either <code>p &gt;= q</code> or <code>q &gt;= p</code>, which will reduce your search space by close to 50%!  For example, you could change the <code>q</code> range to start at the current <code>p</code> value and go down from there:</p>

<pre><code>    for (int p = rangeMax; p &gt;= rangeMin; p--)
        for (int q = p; q &gt;= rangeMin; q--)
</code></pre>

<h2>Test order: Fastest tests first!</h2>

<p><code>isPal(P)</code> is an involved function which will take a bit of time.  In comparison, <code>P &gt; maxP</code> is blazingly fast.  So instead of:</p>

<pre><code>            if (isPal(P))
                if (P &gt; maxP)
                {
                    maxp = p; maxq = q; maxP = P;
                }
</code></pre>

<p>how about:</p>

<pre><code>            if (P &gt; maxP)
                if (isPal(P))
                {
                    maxp = p; maxq = q; maxP = P;
                }
</code></pre>

<h2>Early termination</h2>

<p>If <code>p*q</code> is ever less than <code>maxP</code>, then multiplying <code>p</code> by any smaller value of <code>q</code> is a waste of time; you can break out of the inner loop, and try the next value of <code>p</code>.</p>

<p>If <code>p*p</code> is ever less than <code>maxP</code>, and the inner loop only multiplies <code>p</code> by <code>q</code> values which a not greater than <code>p</code>, then you can break out of the outer loop, too!</p>

<h2>String Manipulation</h2>

<p>The following is inefficient, because temporary objects are being created and destroyed during each iteration.</p>

<pre><code>    for (int i = numStr.length() - 1; i &gt;= 0 ; --i)
        rNumStr += numStr.charAt(i);
</code></pre>

<p>It is much better to use a <a href="https://docs.oracle.com/en/java/javase/12/docs/api/java.base/java/lang/StringBuilder.html" rel="nofollow noreferrer"><code>StringBuilder</code></a> to build up strings character by character, because the <code>StringBuilder</code> maintains a mutable buffer for the interm results.</p>

<p>Even better, it includes the <a href="https://docs.oracle.com/en/java/javase/12/docs/api/java.base/java/lang/StringBuilder.html#reverse()" rel="nofollow noreferrer"><code>.reverse()</code></a> method, which does what you need in one function call.</p>

<pre><code>StringBuilder sb = new StringBuilder(numStr);
String rNumStr = sb.reverse().toString();
</code></pre>

<h2>Unnecessary Operations</h2>

<p>Why convert <code>numStr</code> to a number using <code>Long.parseLong(numStr)</code>?  Isn't the result simply <code>num</code>, the value that was passed in to the function?</p>

<p>Why convert <code>rNumStr</code> to a number?  If <code>num</code> is a palindrome, then aren't <code>numStr</code> and <code>rNumStr</code> equal?</p>

<pre><code>public static boolean isPal(long num) 
{
    String numStr = Long.toString(num);
    StringBuilder sb = new StringBuilder(numStr);
    String rNumStr = sb.reverse().toString();

    return numStr.equals(rNumStr);
}
</code></pre>
    </div>