<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Unnecessary <code>else:</code></h1>

<pre><code>    if length &lt;= 1:
        return arr

    else:
        pivot = arr.pop()

    ...
</code></pre>

<p>If the first path is taken, the method exits.  If the second path is taken, then execution continues with the remainder of the method.  So you could write the rest of the method inside the <code>else:</code> clause:</p>

<pre><code>    if length &lt;= 1:
        return arr

    else:
        pivot = arr.pop()

        ...  # Now part of the else statement
</code></pre>

<p>Or, for more "left leaning" code, remove the <code>else:</code> clause altogether:</p>

<pre><code>    if length &lt;= 1:
        return arr

    pivot = arr.pop()

    ...
</code></pre>

<h1>Loop like a native</h1>

<pre><code>    items_greater = []
    items_lower = []

    for item in arr:
        if item &gt; pivot:
            items_greater.append(item)
        else:
            items_lower.append(item)
</code></pre>

<p>Here, you are creating a list, and then calling <code>.append()</code> to repeatedly add items to that list in a loop.  Python has a builtin mechanism to do this, faster.  List comprehension:</p>

<pre><code>    items_greater = [item for item in arr if item &gt; pivot]
    items_lower = [item for item in arr if not(item &gt; pivot)]
</code></pre>

<p>Why <code>not(item &gt; pivot)</code>, and not simply <code>item &lt;= pivot</code>?  For the most part, the latter will work.  But there are gotchas and special cases.  If there are infinities (<code>+Inf</code>, <code>-Inf</code>) or a not-a-numbers (<code>NaN</code>) in the list, items might be omitted from both lists.  For example, if the list contains a <code>NaN</code>, both <code>NaN &gt; 10</code> and <code>NaN &lt;= 10</code> are <code>False</code>, which would result in that item not being added to either the <code>items_greater</code> or the <code>items_lower</code> lists!  Worse, if <code>pivot</code> happened to become <code>NaN</code>, then all <code>arr</code> items would be excluded!  Similarly, if there are two infinities in the list, both <code>+Inf &gt; +Inf</code> and <code>+Inf &lt;= +Inf</code> are <code>False</code>.</p>

<h1>PEP-8</h1>

<p>The <a href="https://lmgtfy.com/?q=PEP-8&amp;s=d" rel="nofollow noreferrer">PEP-8</a> coding standard has many suggestion about how to format code.  Binary operators, for example, should have a single space on either side of the binary operator.</p>

<pre><code>    return quick_sort(items_lower)+[pivot]+quick_sort(items_greater)
</code></pre>

<p>should be:</p>

<pre><code>    return quick_sort(items_lower) + [pivot] + quick_sort(items_greater)
</code></pre>
    </div>