<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I like when I see a small main() function! Also the way you check the value from <code>std::cin</code> is nice.</p>

<p>Here's what I think could be better:</p>

<p><strong>Reference and copy</strong></p>

<p>You are using a <code>const std::vector&lt;std::pair&lt;std::string, std::string&gt; &gt;&amp;</code> in your Menu constructor. This reference avoids a copy when you call the constructor, but as <code>_choices</code> isn't a reference, you still copy your <code>std::vector</code> during the assignment (and that's fortunate because the original variable is destroyed right after the constructor ends, when the current iteration of the <code>for</code> loop ends in <code>Game::parseXML(std::string file)</code>). To avoid this copy, you could use a move assignment.</p>

<p><strong>std::find and std::vector</strong></p>

<p>I find the way you use <code>std::find</code> a bit confusing. It is easy to understand, but doesn't help readability. Appart from that, you are using an std::vector on which you never iterate but only try to access elements by their key (which is currently an instance, but may be their name according to <code>Menu::operator==</code>). You probably want to use an <code>std::unordered_map</code> instead of an <code>std::vector</code> in <code>Game::road</code>.</p>

<p><strong>Naming</strong></p>

<p><code>std::vector&lt;Menu&gt; game</code> doesn't look like a good name choice. Maybe something like <em>currentLevel</em> would be better. Same for <code>choice</code> and <code>_choices</code> that could be named <em>playerchoice</em> and <em>availableChoices</em> respectively.</p>

<p>A famous quote from Phil Karlton - <em>There are only two hard things in Computer Science: cache invalidation and naming things.</em> It is important that you take some time to name things correctly.</p>
    </div>