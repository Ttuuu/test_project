<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your algorithm isn't the most efficient out there. </p>

<p>As you process the input, you can keep track of the numbers you have already seen and which numbers would complement those to sum to <code>x</code>. For instance, in your example, <code>x=4</code>: You read <code>1</code>, you know that if you encounter a <code>x - 1 = 3</code>, you have found a pair. Next you read a <code>2</code>, you know that if you encounter a <code>x - 2 = 2</code>, you have found a pair. Then you encounter a <code>3</code>, which we knew we needed earlier. We can return <code>true</code>.</p>

<p>In code:</p>

<pre><code>public static bool AnyPairSumAlternative(this IEnumerable&lt;int&gt; source, int sum) {
  var complements = new HashSet&lt;int&gt;();
  foreach(var item in source) {
    if (complements.Contains(item)) {
      return true;
    }
    try {
      checked {
        complements.Add(sum - item);
      }
    } catch (OverflowException) {
      // If sum - item overflows, that means that no two ints together can sum to sum.
      // We swallow the exception and don't add anything to complements, since the complement
      // clearly doesn't exist within the data type.
    }
  }
  return false;
}
</code></pre>

<p>This approach skips out of the sorting, and loops through the input list only once. Checking for inclusion in the Hashset is <span class="math-container">\$O(1)\$</span>, so if I'm not mistaken, this takes the solution from <span class="math-container">\$O(n\log n)\$</span> to <span class="math-container">\$O(n)\$</span>.</p>

<p>As comment by @slepic points out, we need to be careful that <code>sum - item</code> doesn't overflow. If that happens, that automatically means that the complement cannot appear in the array, since it wouldn't fit in our datatype. To account for this, we can do the subtraction in <code>checked</code> context and catch any <code>OverflowException</code>. </p>
    </div>