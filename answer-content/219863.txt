<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code is correct and IMHO optimal for the algorithm it implements.<br>
The only two details I would recommend to change are:</p>

<ul>
<li>rename the node member <code>val</code> to <code>value</code> – there's no reason to strip the last two characters,</li>
<li>and make the <code>doInOrderTraversal</code> method private – it seems useful inside this <code>Solution</code> only.</li>
</ul>

<p>What concerns the algorithm: yes, you can reach the same result without the additional <code>Stack</code> object. 
Here is an example of a full <strong>recursive test without an explicit stack</strong>.</p>

<p>The base case is an empty tree, which is a valid BST.</p>

<p>A left subtree of any node has values bounded from above by that node, similarly a right subtree values are bounded from below. It follows that any subtree is bounded by its closest left- and right-side ancestors (except the left-most branch, which has no left-side ancestor, and the right-most branch, which has no right-side ancestor; and a special case of the root node, which has no ancestor at all).</p>

<p>(Using your <code>TreeNode</code> class.)</p>

<pre><code>class Solution {

    public boolean isValidBST(TreeNode root) {
        return isValidBST(null, root, null);
    }

    private boolean isValidBST(TreeNode leftAncestor, TreeNode node, TreeNode rightAncestor) {
        // base case
        if (node == null)
            return true;

        // bounds by ancestors (duplicated keys not allowed; replace
        // &lt;= and &gt;= with &lt; and &gt;, respectvely, to allow duplicates)
        if (leftAncestor != null &amp;&amp; node.val &lt;= leftAncestor.val)
            return false;

        if (rightAncestor != null &amp;&amp; node.val &gt;= rightAncestor.val)
            return false;

        // this node valid - validate its subtrees; this node becomes
        // the closest right-side ancestor for its left subtree
        // and the closest left-side ancestor for its right subtree
        return
            isValidBST(leftAncestor, node.left, node) &amp;&amp;
            isValidBST(node, node.right, rightAncestor);
    }
}
</code></pre>

<p>At the cost of additional conditions (which obfuscate the code a bit) you can save about a half of recursive calls:</p>

<pre><code>    public boolean isValidBST(TreeNode root) {
        return (root == null) || isValidBST(null, root, null);
    }

    private boolean isValidBST(TreeNode leftAncestor, TreeNode node, TreeNode rightAncestor) {
        assert node != null;

        // bounds by ancestors (duplicated keys not allowed; replace
        // &lt;= and &gt;= with &lt; and &gt;, respectvely, to allow duplicates)
        if (leftAncestor != null &amp;&amp; node.val &lt;= leftAncestor.val)
            return false;

        if (rightAncestor != null &amp;&amp; node.val &gt;= rightAncestor.val)
            return false;

        // this node valid - validate its subtrees; this node becomes
        // the closest right-side ancestor for its left subtree
        // and the closest left-side ancestor for its right subtree
        return
            (node.left == null || isValidBST(leftAncestor, node.left, node)) &amp;&amp;
            (node.right == null || isValidBST(node, node.right, rightAncestor));
    }
</code></pre>

<hr>

<p><strong>If you're allowed to modify the tree...</strong></p>

<p>...you can also get rid of the stack by transforming your tree into a list – it's the first stage of the <a href="https://en.wikipedia.org/wiki/Day%E2%80%93Stout%E2%80%93Warren_algorithm" rel="nofollow noreferrer">Day-Stout-Warren algorithm</a> to balance a BST.</p>

<p>The algorithm is a constant-memory – it does not use a stack, it just iterates through the right-most branch of the tree while merging left subtrees into it.</p>

<p>Then you can iterate through the list to check if values make a strictly increasing sequence.</p>

<hr>

<p>Of course you can make the final testing inside the tree-to-list transformation. That would save you one loop in the code structure, but it would also make the code much less readable with virtually no gain in efficiency.</p>

<hr>

<p><strong>I wonder, however,</strong> what do these notes mean:</p>

<pre><code>Input: [2,1,3]
Input: [5,1,4,null,null,3,6]
</code></pre>

<p>Are the code expected to read and parse the character line shown?<br>
Or is it fed with an array?<br>
In the latter case, does it mean it's array of <code>Integer</code>s?<br>
If it is supposed to be array of <code>int</code>s, what does <code>null</code> represent?</p>
    </div>