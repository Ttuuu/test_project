<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code is quite complicated. The C standard library provides all the ingredients you need to sort an array. You just need to define a comparison function. All the rest is done by the <code>qsort</code> function from <code>stdlib.h</code>.</p>

<p>The comparison function should look like:</p>

<pre><code>static int even_first(const void *a, const void *b) {
    int left = *(const int *)a;
    int right = *(const int *)b;

    int res = (left % 2 != 0) - (right % 2 != 0);
    if (res == 0)
        res = (left &gt; right) - (left &lt; right);
    return res;
}
</code></pre>

<p>The expressions of the form <code>cond1 - cond2</code> may look strange at first, but they are commonly used in C code in comparison functions like this one.</p>

<p>The benefit over a na√Øve <code>left - right</code> is that no integer overflow can happen. Integer overflow is a common source of undefined behavior.</p>

<p>To make the code more readable, it's also possible to extract the basic integer comparison into a separate function:</p>

<pre><code>static int compare(int a, int b) {
    return a &lt; b ? -1 : a &gt; b ? +1 : 0;
    // alternatively: return (a &gt; b) - (a &lt; b);
    // alternatively: return a &lt; b ? -1 : a &gt; b;
}
</code></pre>

<p>Then, the comparison function becomes:</p>

<pre><code>static int even_first(const void *a, const void *b) {
    int left = *(const int *)a;
    int right = *(const int *)b;

    int res = compare(left % 2 != 0, right % 2 != 0);
    if (res == 0)
        res = compare(left, right);
    return res;
}
</code></pre>

<p>This form is much less of a brain twister than the above variant.</p>
    </div>