<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Variadic_datablock:</strong></p>

<ul>
<li><blockquote>
  <p>class Variadic_datablock 
  /* Requires elements in T... are unique (not repeat of types) */</p>
</blockquote>

<p>We could enforce this requirement with <code>std::enable_if</code> or a <code>static_assert</code> in the class, combined with some template-metaprogramming.</p></li>
<li><p>Should an empty parameter pack be allowed? It looks like this would break the print / read functions, so we should probably check for that too.</p></li>
<li><p>What's the purpose of the protected member functions? Do we actually need inheritance or could we make everything public except <code>m_id</code>? That would make the class a lot easier to test. Access control in C++ is best used to prevent breaking class-invariants and hide complex internal functionality. The only invariant here seems to be that the ID shouldn't be changed after creation.</p></li>
<li><p>The constructor doesn't need to create a temporary tuple. We can move the arguments directly into <code>m_data</code>:</p>

<pre><code>explicit Variadic_datablock(std::string id, T... args):
    m_id{ std::move(id) },
    m_data{ std::move(args)... }
{

}
</code></pre></li>
</ul>

<hr>

<p><strong>Printer:</strong></p>

<ul>
<li><p>There's some unnecessary duplication. We could definitely abstract this bit into a <code>print_element(os, std::get&lt;n - 1&gt;(t));</code></p>

<pre><code>auto type_name =
    extract_type_name(typeid(std::get&lt;n - 1&gt;(t)).name());

os &lt;&lt; "   " &lt;&lt; id &lt;&lt; "." &lt;&lt; type_name &lt;&lt; " := "
    &lt;&lt; std::get&lt;n - 1&gt;(t) &lt;&lt; "; " &lt;&lt; '\n';
return os;
</code></pre></li>
<li><p>Since the <code>Printer</code>, <code>Reader</code> classes and the <code>print</code> and <code>read</code> functions aren't supposed to be used directly by the user, they could be placed in a <code>detail</code> (or similarly named) namespace.</p></li>
<li><p><code>typeid(x).name()</code> <a href="https://en.cppreference.com/w/cpp/types/type_info/name" rel="nofollow noreferrer">is implementation defined</a>. Several different types may have the same name, and the name can even change between invocations of the same program. In other words, it's not something we should use for serialization. I'd suggest adding a <code>static const std::string</code> data-member to each element class.</p></li>
</ul>

<hr>

<p><strong>Reader:</strong></p>

<ul>
<li><p>Same issues as <code>Printer</code>.</p></li>
<li><p>It would be reasonable to merge the <code>extract_id</code> and <code>is_expected_id</code> into one function. This means we don't return state that may or may not be valid and then have to pass it into a separate function to check. Sticking with the input operator conventions, we get: <code>std::istream&amp; extract_id(std::istream&amp; is, std::string&amp; id, std::string const&amp; expected_id);</code>. We can use the state of the stream to indicate success / failure, and don't need the extra boolean. e.g.:</p>

<pre><code>std::string id;
if (!extract_id(is, id, last_id)) // checks stream fail / bad bits (eof will be caught at next read)
    return is;
</code></pre></li>
<li><p>One test-case with valid input calling the high-level stream operator is not enough to properly confirm the behavior. We need to check the behavior of the individual functions and think about edge cases. For example, for the <code>extract_id</code> function, one might expect the following:</p>

<pre><code>TEST(Test_Reader, IStreamWithValidIDAndDot) { ... }
TEST(Test_Reader, IStreamWithOnlyDot) { ... }
TEST(Test_Reader, IStreamWithIDAndNoDot) { ... }
TEST(Test_Reader, EmptyIStream) { ... }
TEST(Test_Reader, IStreamWithValidIDAndDotAndBadbitSet) { ... }
TEST(Test_Reader, IStreamWithValidIDAndDotAndFailitSet) { ... }
TEST(Test_Reader, IStreamWithValidIDAndDotAndEofbitSet) { ... }
</code></pre></li>
<li><p><code>discard</code>, not <code>dischard</code>.</p></li>
<li><p>Extra parentheses in <code>FakeType::insert()</code> and <code>EnableValve::insert()</code>:</p>

<pre><code>void insert(std::string(s)) {
    m = s;
}
</code></pre>

<p>It's fine to take the argument by value, but we can then move it into place:</p>

<pre><code>void insert(std::string s) {
    m = std::move(s);
}
</code></pre></li>
<li><p>We have an <code>operator&gt;&gt;</code> for the <code>FakeType</code>s, but we aren't using it?</p></li>
<li><p>I think we only need to set <code>last_id</code> once for a given datablock.</p></li>
</ul>
    </div>