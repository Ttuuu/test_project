<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Feedback</h2>
<p>As was pointed out in other answers, the (outer) array isn't really associative- it is numeric, and the sub-arrays are associative. And I agree with the point in <a href="https://codereview.stackexchange.com/a/166498/120114">mickmackusa's answer</a> - just use <code>shuffle()</code> along with <code>array_slice()</code> to simplify that function.</p>
<p>The <code>foreach</code> within <code>shuffle_assoc()</code> iterates over the keys, which will be numerically-indexed and thus it is pointless to create <code>$i</code> and increment it manually. It can simply use the associative syntax (i.e. <code>foreach ($keys as $i =&gt; $key)</code>).</p>
<h2>Suggestion</h2>
<h3>Simplifying array generation</h3>
<p>Perhaps the code used to add values to <code>$arr</code> is synthesized for this post, but it could be simplified, using a <code>foreach</code> or even <a href="http://php.net/array_map" rel="nofollow noreferrer"><code>array_map</code></a>, combined with <a href="http://php.net/range" rel="nofollow noreferrer"><code>range()</code></a> to iterate 7 times, plus <a href="http://php.net/manual/en/numberformatter.format.php" rel="nofollow noreferrer"><code>NumberFormatter::format()</code></a> to generate the spelled out numbers:</p>
<pre><code>$nf = new NumberFormatter('en', NumberFormatter::SPELLOUT);
$arr = array_map(function($index) use($nf) {
    $word = strtoupper($nf-&gt;format($index));
    $dim = 100 + 50 * $index;
    return array('img' =&gt; "http://placehold.it/{$dim}x150", 'link' =&gt; '#'.$index, 'text1' =&gt; $word . " 1", 'text2' =&gt; $word . ' 2');
}, range(1,7));
</code></pre>
<p>See a demonstration of the <a href="https://www.tehplayground.com/ykUF2x1HOLAKCVmT" rel="nofollow noreferrer">updated code in this playground example</a></p>
    </div>