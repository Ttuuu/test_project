<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">

<h2>A conceptual problem</h2>
<p>The idea to choose between MergeSort and QuickSort looks very promising, but because the code that makes the decision is so lengthy and <strong>because that code gets repeated on every recursive call</strong>, the program is spending 99% of its time deciding and only 1% of its time sorting. That's a bad trade-off!</p>
<p>Also consider:</p>
<blockquote>
<pre class="lang-none prettyprint-override"><code>While i &lt; j
    razvrstanost := razvrstanost + (originalni_niz[i] &lt; originalni_niz[i+1])
    i := i + 1
EndWhile
</code></pre>
</blockquote>
<p>A cascade of comparing adjacent elements is typical for the lesser sorting methods. Because in your program this cascade is repeated on arrays that get smaller and smaller, you can not hope for this approach to lead to something better/faster than an humble BubbleSort.</p>
<p>My suggestions:</p>
<blockquote>
<p>Find out where it leads you if you apply the current decision process only once on the original array.</p>
</blockquote>
<blockquote>
<p>Simplify the decision process. Go for Less Accurate but Much Faster.</p>
</blockquote>
<h2>Why c++ <code>std::sort</code> is much faster</h2>
<p>Apart from not suffering from the above conceptual problem, that library function</p>
<ul>
<li><p>will have been written directly in Assembly or at least in some higher level  language that translates very closely to Assembly.</p>
</li>
<li><p>will use 32-bit integers as much as possible (array indexing, counting, ...) Your project exclusively works with single precision floating point variables.</p>
</li>
<li><p>will avoid using FPU instructions whenever possible. e.g. copying variables even if they represent floats:</p>
<pre class="lang-none prettyprint-override"><code>  mov eax, [donja_granica]
  mov [i], eax
</code></pre>
<p>Your code makes a detour via the FPU stack</p>
<pre class="lang-none prettyprint-override"><code>  #i := donja_granica
  finit
  fld   dword ptr [donja_granica]
  fstp  dword ptr [TEMP]
  mov   edx, dword ptr [TEMP]
  mov   dword ptr [i], edx
</code></pre>
</li>
<li><p>will use the normal stack in a straightforward fashion. e.g. preserving the <em>LeftBound</em></p>
<pre class="lang-none prettyprint-override"><code>  push  dword ptr [donja_granica]
</code></pre>
<p>Your code uses a series of arrays to mimic several stacks:</p>
<pre class="lang-none prettyprint-override"><code>  #stog_s_donjim_granicama[vrh_stoga] := donja_granica
  finit
  fld   dword ptr [donja_granica]
  fstp  dword ptr [TEMP]
  mov   edx, dword ptr [TEMP]
  fld   dword ptr [vrh_stoga]
  fistp dword ptr [TEMP]
  mov   ebx, dword ptr [TEMP]
  mov   dword ptr [stog_s_donjim_granicama+4*ebx], edx
</code></pre>
</li>
<li><p>...</p>
</li>
</ul>
<h2>What you can do</h2>
<p>The idea of your sorting methods is to partition the array into ever smaller pieces until such a piece is of length 1 or 2. You correctly return immediately for a length of 1, but for a length of 2 your code executes pointlessly all of those very costly calculations (using <code>pow()</code>, <code>mod()</code>, <code>ln()</code>, <code>exp()</code>) in order to assign values to <em>razvrstanost_na_potenciju[i]</em>, <em>polinom_pod_apsolutnom</em>, <em>Eulerov_broj_na_koju_potenciju</em>,  <em>koliko_usporedbi_ocekujemo_od_QuickSorta</em>, and  <em>koliko_usporedbi_ocekujemo_od_MergeSorta</em> - <strong>values that will not be used</strong>.<br>
This is the major reason why the code is slow, since reductions downto a length of 2 are very common.</p>
<p>In the line <code>razvrstanost := razvrstanost / ((gornja_granica-donja_granica-1)/2) - 1</code> you are expecting, that for an already sorted partition the value be 1.<br>
But what if this should ever produce 0.99999999 or 1.00000001 ? Floating point divisions tend to do this.<br>
Then the line <code>If razvrstanost = 1</code> will be missed and the code will go haywire. Could be the reason why the program crashes.</p>
<p>Next code tries to address both concerns:</p>
<pre class="lang-none prettyprint-override"><code>razvrstanost := 0
i := donja_granica
j := gornja_granica - 1    ; This optimizes the following WHILE
While i &lt; j
    razvrstanost := razvrstanost + (originalni_niz[i] &lt; originalni_niz[i+1])
    i := i + 1
EndWhile

j := j - donja_granica

If razvrstanost = j
    broj_vec_poredanih_podniza := broj_vec_poredanih_podniza + 1
    ...

ElseIf razvrstanost = 0
    broj_obrnuto_poredanih_podniza := broj_obrnuto_poredanih_podniza + 1
    ...

Else
    i := 2
    razvrstanost := razvrstanost / (j / i) - 1
    While i &lt;= 7 
        razvrstanost_na_potenciju[i] := pow(abs(razvrstanost), i)
        razvrstanost_na_potenciju[i] := ...
        i := i + 1
    EndWhile
    polinom_pod_apsolutnom := ...
    Eulerov_broj_na_koju_potenciju := ...
    koliko_usporedbi_ocekujemo_od_QuickSorta := ...
    koliko_usporedbi_ocekujemo_od_MergeSorta := ...
    If koliko_usporedbi_ocekujemo_od_MergeSorta &lt; koliko_usporedbi_ocekujemo_od_QuickSorta
        broj_pokretanja_MergeSorta := broj_pokretanja_MergeSorta + 1
        ...

    Else ;QuickSort algoritam
        broj_pokretanja_QuickSorta := broj_pokretanja_QuickSorta + 1
        ...

    EndIf
EndIf
</code></pre>
<hr>
<blockquote>
<pre class="lang-none prettyprint-override"><code>If (gdje_smo_u_prvom_nizu = sredina_niza | originalni_niz[gdje_smo_u_drugom_nizu] &lt; originalni_niz[gdje_smo_u_prvom_nizu]) &amp; gdje_smo_u_drugom_nizu &lt; gornja_granica
</code></pre>
</blockquote>
<p>Because your AEC does not perform an early out on the <code>|</code> operator in this complex expression, everything in it is evaluated every single time. Moreover this expression can at some point read past the last element of the array.<br>
Next code, using simple <code>If</code>'s, avoids reading array elements unnecessarily or  illegally. I believe it's also easier to understand.</p>
<pre class="lang-none prettyprint-override"><code>i := donja_granica
gdje_smo_u_prvom_nizu := donja_granica
gdje_smo_u_drugom_nizu := sredina_niza
While i &lt; gornja_granica
    If gdje_smo_u_prvom_nizu = sredina_niza
        PickRightSide := 1
    ElseIf gdje_smo_u_drugom_nizu = donja_granica
        PickRightSide := 0
    Else
        PickRightSide := (originalni_niz[gdje_smo_u_drugom_nizu] &lt; originalni_niz[gdje_smo_u_prvom_nizu])
    Endif
    If PickRightSide = 1
        pomocni_niz[i] := originalni_niz[gdje_smo_u_drugom_nizu]
        gdje_smo_u_drugom_nizu := gdje_smo_u_drugom_nizu + 1
    Else
        pomocni_niz[i] := originalni_niz[gdje_smo_u_prvom_nizu]
        gdje_smo_u_prvom_nizu := gdje_smo_u_prvom_nizu + 1
    EndIf
    i := i + 1
EndWhile
</code></pre>
<hr>
<blockquote>
<pre class="lang-none prettyprint-override"><code>pomocna_varijabla_za_zamijenu := originalni_niz[i + 1]
originalni_niz[i + 1] := originalni_niz[gornja_granica - 1]
originalni_niz[gornja_granica - 1] := pomocna_varijabla_za_zamijenu
gdje_je_pivot := i + 1
</code></pre>
</blockquote>
<p>This snippet can be optimized.<br>
If you assign <em>gdje_je_pivot</em> first, you can avoid the index addition <code>[i + 1]</code>  twice. And because at this point in the code <code>originalni_niz[gornja_granica - 1]</code> is stored in the <em>pivot</em> variable, you should get it from there which will be a lot faster.</p>
<pre class="lang-none prettyprint-override"><code>gdje_je_pivot := i + 1
pomocna_varijabla_za_zamijenu := originalni_niz[gdje_je_pivot]
originalni_niz[gdje_je_pivot] := pivot
originalni_niz[gornja_granica - 1] := pomocna_varijabla_za_zamijenu
</code></pre>
<hr>
<p>The simplest change you can make to AEC is to dismiss that myriad of <code>finit</code>  instructions. When every snippet in the program always pops everything it pushes (and your code seems to work that way), then you only need to use <code>finit</code> once and only once at the start.</p>
<p>You should special-case some very common operations if you desire speed.</p>
<ul>
<li><p>To copy a simple variable to another simple variable, you don't need to use the FPU. e.g. <code>i := donja_granica</code></p>
<pre class="lang-none prettyprint-override"><code>  mov     eax, [donja_granica]
  mov     [i], eax
</code></pre>
</li>
<li><p>Incrementing a simple variable. e.g. <code>inc i</code></p>
<pre class="lang-none prettyprint-override"><code>  fld1
  fadd    dword ptr [i]
  fstp    dword ptr [i]
</code></pre>
</li>
<li><p>Decrementing a simple variable. e.g. <code>dec i</code></p>
<pre class="lang-none prettyprint-override"><code>  fld1
  fsubr   dword ptr [i]
  fstp    dword ptr [i]
</code></pre>
</li>
<li><p>If you would compile a short list of frequently used immediates (<code>iList dw 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10</code>), then using these would be a breeze. Assigning would be very efficient. e.g. <code>i := 2</code></p>
<pre class="lang-none prettyprint-override"><code>  fild    word ptr [iList + 4]
  fstp    dword ptr [i]
</code></pre>
</li>
</ul>
<p>There's nothing that prevents you from using the normal stack instead of dedicated arrays</p>
<pre class="lang-none prettyprint-override"><code>#AsmStart
push  dword ptr [donja_granica]
#AsmEnd
</code></pre>
<h2>The segmentation fault</h2>
<p>I see 3 reasons why this could happen:</p>
<ul>
<li>Reading past the last element of the array. See above.</li>
<li>The code goes haywire if the execution misses <code>If razvrstanost=1</code>. See above.</li>
<li>The dedicated arrays that mimic a stack are too small. This can happen when the pivotting mechanism, continually partitions the array in a very big and a very small chunk. On an array with 65536 elements, the recursion depth will rapidly exceed 1024
(dimension of your special arrays).</li>
</ul>
    </div>