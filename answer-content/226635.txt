<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Answering your question</h2>
<p>Overall, I think the solution is sound, but there are a few things you could make cleaner. I agree with everything in <a href="https://codereview.stackexchange.com/a/226633/47529">dfhwze's answer</a>, but assuming this is the route you keep here are a few thoughts:</p>
<p>This piece is a little risky in case <code>N'|'</code> exists in the new value.</p>
<pre><code>SELECT @value_separator_index = CHARINDEX( '|', @valueOrDefault );
</code></pre>
<p>You probably want the last <code>N'|'</code> in the value (didn't test this; I probably have an off-by-one error or missing zero-handling).</p>
<pre><code>SELECT @value_separator_index = LEN( @valueOrDefault - CHARINDEX( N'|', REVERSE( @valueOrDefault ) ) )
</code></pre>
<p>You can also provide an expected label to the function to avoid an issue that dfhwze calls out.</p>
<blockquote>
<p>the replacement can introduce a value with the same format {%}; your sql has no way of knowing that this is a replacement value, and since the format matches that of a place holder, it will be ignored and the default value will be taken</p>
</blockquote>
<p>Then you can make sure the Label doesn't have unexpected values by comparing it with... <em>another pattern</em></p>
<pre><code>IF @Label LIKE N'%[%]%' 
   OR @Label LIKE N'%[_]%' 
   OR @Label LIKE N'%[\[]%' ESCAPE '\' 
   OR @Label LIKE N'%[\]]%' ESCAPE '\'
BEGIN
  -- Do stuff, like replace the values and escape them
END;
</code></pre>
<p>From this point, your final validation becomes (assuming you use <code>\</code> to escape things), which avoids the issue of them providing a strange non-default value</p>
<pre><code>RETURN IIF( @valueOrDefault LIKE '{' + @Label + '}|%' ESCAPE '\', @default_value, @current_value)
</code></pre>
<hr>
<h2>Disputing your premise, and providing an alternative</h2>
<p>Once you peel back the string parsing, you can realize that this effectively becomes <code>ISNULL</code></p>
<pre><code>SET @environment = ISNULL( &lt;&lt;maybePopulated&gt;&gt;, N'production' )
</code></pre>
<p>You could accomplish this like so:</p>
<pre><code>DECLARE @configuredEnvironment nvarchar(17);
DECLARE @defaultEnvironment nvarchar(17) = N'production'
DECLARE @environment nvarchar(17) = ISNULL( @configuredEnvironment, @defaultEnvironment );
</code></pre>
<p>Then if your test runner can just make sure to set <code>@configuredEnvironment</code> in the task (this might be as easy as dropping the first row of the file and replacing it with your configuration) and you don't have to do string parsing.</p>
<hr>
<h2>Providing another alternative</h2>
<p>Ultimately, what you're really trying to do is create parameterized SQL with default values. As it turns out, this is a concept that already exists:</p>
<pre><code>CREATE PROCEDURE dbo.[test my cool thing]
( @environment nvarchar(17) = N'production',
  @version nvarchar(17) = N'3.9.0'
)
AS
BEGIN
  -- do something cool
END;
GO
</code></pre>
<p>From your test runner, this then becomes</p>
<pre class="lang-cs prettyprint-override"><code>using (var conn = new SqlConnection(connectionString)) // Can be pulled from a config file
{
    conn.Open();
    using (var cmd = new SqlCommand("dbo.[test my cool thing]", conn))
    {
        // I forget the exact properties, but this should be close
        cmd.Parameters.AddWithValue("@environment", environment); // config file
        cmd.Parameters.AddWithValue("@version", version); // config file
        cmd.CommandType = CommandType.StoredProcedure;
        
        cmd.ExecuteNonQuery();
    }
}
</code></pre>
<p>Then for end-users running it in the IDE it just becomes</p>
<pre><code>EXECUTE dbo.[test my cool thing] -- Pass parameters if you want them
</code></pre>
    </div>