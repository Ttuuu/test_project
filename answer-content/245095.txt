<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>The important part</h2>
<p>They want something below O(n). Using map is a good idea but actually you should find the cycles and return the right position on the cycle instead of computing line by line.</p>
<h2>Spoiler (possible solution)</h2>
<p>Change:</p>
<pre class="lang-py prettyprint-override"><code>            if tuple(cells) in step_map:
                return  step_map[tuple(cells)]
</code></pre>
<p>to:</p>
<pre class="lang-py prettyprint-override"><code>            if tuple(cells) in step_map:
                cycle = list()
                head = tuple(cells)
                cycle.append(head)
                previous = head
                while True:
                    next_node = tuple(step_map[previous])
                    if next_node == head:
                        return list(cycle[(N - k) % len(cycle)])
                    cycle.append(next_node)
                    previous = next_node
</code></pre>
<hr>
<h2>Old edit - Some small improvements</h2>
<p>There are some O(m) operations multiple times...</p>
<p>For example:</p>
<pre><code> tmp = [0] + tmp + [0]
</code></pre>
<p>Python operation for that is O(m). Therefore, your solution is O(nm).</p>
<pre><code>step_map[tuple(cells)] = tmp
</code></pre>
<p>this is also O(m).</p>
    </div>