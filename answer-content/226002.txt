<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The best way to see how the system is architected is to look at the tests. It is great that you have provided such tests with the <code>BasketTest</code> class! So I will review your code by reviewing the <code>BasketTest</code>class.</p>

<ul>
<li>Initializing class fields to null is unnecessary and duplicate as they are automatically initialized to null (default value)</li>
<li><code>setup()</code> would be a better place to setup your products.</li>
<li>Don't use field and variable names like <code>map</code>, <code>list</code>. They need to speak to whomever is reading the code. I have no idea what your <code>map</code> represents.</li>
<li>Make name of the products like <code>"COKE_CAN"</code> constants and replace all occurrences in the code with the new constants. </li>
<li>Without looking into the implementation, I cannot tell what the 2nd parameter means: <code>new Offer(coke_can, 2, DiscountType.TWO_FOR_ONE)</code>. I would like this code to be improved to be readable with less effort.</li>
<li>Use  <a href="https://junit.org/junit4/javadoc/4.12/org/junit/Assert.html#assertArrayEquals(float%5B%5D,%20float%5B%5D,%20float)" rel="nofollow noreferrer">assertArrayEquals(float[] expecteds, float[] actuals, float delta)</a> for comparing floats. </li>
<li>Improve <code>testApply2For1Offer()</code> test. There you put elements to the <code>map</code> but it is not clear how the <code>map</code> interacts with the rest of the code.</li>
<li>Every basked needs to have <code>DiscountStrategy</code> and offers in form of <code>Map&lt;String, Offer&gt;</code>. This does not seem right. I would think that there is only one <code>Discounts</code> object that can calculate a discount or final price for a given <code>Basket</code>. This is the biggest issues I see here, the design of the <code>Basket</code>.</li>
</ul>

<p>Overall you did great with your design! I like it.</p>
    </div>