<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Whilst your code works, there are a number of simplifications that you might try.</p>

<ol>
<li><p>As Reinderien says, get rid of "magic" numbers </p></li>
<li><p>Having done that, declare a single string containing all 95 characters with the special ones last. This does away with all the <code>strcat</code> code.</p></li>
<li><p>It's good practice to declare <code>has_special_characters</code> as type <code>bool</code>.   You will have to include <code>&lt;stdbool.h&gt;</code>.</p></li>
<li><p>You can then test it to set an integer variable, <code>modulus_divider</code>, to the correct <code>const</code> or <code>#define</code> value as in 1).</p></li>
<li><p>You can then take the modulus of the random number with <code>modulus_divider</code> That way you don't need to keep using <code>strlen(to_be_used)</code> and you only need one generating loop.</p></li>
<li><p>You don't really need all the intermediate variables in your <code>for</code> loop. Assuming you have set up <code>char_set</code> as the full 94 character array as in 2), your entire <code>for</code> loop could become:</p>

<pre><code>for(int i = 0; i &lt; password_lenght; i++)
{
    random_password[i] = char_set[random() % modulus_divider];
}
</code></pre></li>
</ol>

<hr>

<p>Later</p>

<p>I'm not claiming this is perfect, but here is my version. I don't currently have a C compiler installed but this does compile and run with the online compiler at <a href="https://www.onlinegdb.com/" rel="noreferrer">onlinegdb.com</a></p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;time.h&gt;
#include &lt;stdbool.h&gt;

char *generate_random_password(const int password_length, bool has_special_characters)
{
    const int alphamerics = 64; /* length of alphameric character set */
    const int alphamerics_plus = 94; /* length of alphameric character set plus special chatacters */
    const char character_set[] = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\"#$%&amp;'()*+,-./:;&lt;=&gt;?@[\\]^_`{|}~"; /* full character set */
    int n =  has_special_characters ? alphamerics_plus : alphamerics; /* set the length of character_set to be used */

    char *random_password = malloc(sizeof(char) * (password_length + 1)); /* allocate memory for password */

    srandom(time(NULL)); /* initialise random number generator, srandom(clock()); works just as well*/
    for (int i = 0; i &lt; password_length; i++)
    {
        random_password[i] = character_set[random() % n]; /* get a character from character_set indexed by the remainder when random() os divided by n */
    }
    random_password[password_length] = '\0'; /* append terminating null to string */

    return random_password;
}

int main(void)
{
    printf("%s\n", generate_random_password(17, true));
    printf("%s\n", generate_random_password(17, false));

    return 0;
}
</code></pre>

<p>Typical output is</p>

<pre><code>W$Mg-tT?oTwa~EF$S
xGLMrqJBS6IB96xvp 
</code></pre>
    </div>