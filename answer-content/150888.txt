<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As Simon suggested, here is a memory optimised solution.  I keep track of the current best solution using only two variables: <code>bestLength</code> and <code>bestStart</code>:</p>

<pre><code>public static void main(String[] args) {

    long timeStart = System.nanoTime();

    int bestLength = 1;
    int bestStart = 1;

    for (int i = 2; i &lt; 1000000; ++i) {

       int current = chainLength(i);
       if (current &gt;= bestLength) {
           bestLength = current;
           bestStart = i;

           // Optional to show progress.
           // System.out.println("New best at " + i + " = " + current);
       }

    }

    System.out.println("Best length = " + bestLength + " starting at " + bestStart);

    long timeTaken = (System.nanoTime() - timeStart) / 1000000L;
    System.out.println("Time taken: " + timeTaken + " ms.");

    System.out.println("Finished.");

} // end main()


// Needs a long otherwise get integer overflow.
static int chainLength(long num) {

    int count = 1;

    while (num &gt; 1L) {
        num = (num % 2L == 0L) ? num / 2L : 3L * num + 1L;
        ++count;
    }

    return count;

} // end chainLength()
</code></pre>

<p>This runs in about 500ms on my machine and uses a lot less memory than an array.  I always run a timer on my Project Euler solutions; feel free to remove if you want to.</p>
    </div>