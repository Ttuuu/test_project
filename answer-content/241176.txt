<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>General impression</h1>

<p>The indentation and spacing are inconsistent.  Fix them.  Remove gratuitous blocks of several blank lines.</p>

<p>Compare your code formatting to the auto-generated files.  There's a huge difference.</p>

<h1>Include guards</h1>

<p>Sometimes you use <code>#pragma once</code>, and sometimes <code>#ifndef</code>.  Pick one and use it consistently.</p>

<h1>Preprocessor directives</h1>

<p>This is a mess:</p>

<blockquote>
<pre><code>#include &lt;QMainWindow&gt;
#include &lt;QWidget&gt;
#include &lt;QEvent&gt;
#include "qcustomplot.h"
#include &lt;QElapsedTimer&gt;
#include &lt;chrono&gt;
#include &lt;thread&gt;
#include &lt;QString&gt;
#include "Processitem.h"
#include &lt;cstddef&gt;
#define _WIN32_DCOM
#include&lt;windows.h&gt;
#include&lt;memory&gt;
</code></pre>
</blockquote>

<p>Sort them by some clear metric and add blank lines; for example:</p>

<pre><code>#define _WIN32_DCOM

#include &lt;chrono&gt;
#include &lt;cstddef&gt;
#include &lt;memory&gt;
#include &lt;thread&gt;
#include &lt;windows.h&gt;

#include &lt;QElapsedTimer&gt;
#include &lt;QEvent&gt;
#include &lt;QMainWindow&gt;
#include &lt;QString&gt;
#include &lt;QWidget&gt;

#include "Processitem.h"
#include "qcustomplot.h"
</code></pre>

<h1>Dealing with bytes</h1>

<blockquote>
<pre><code>#define gb (1024.0*1024.0*1024.0)
#define mb (1024.0*1024.0)
#define kb (1024.0)
</code></pre>
</blockquote>

<p>Use <code>constexpr</code> variables instead of macros:</p>

<pre><code>constexpr double gb = 1024.0 * 1024.0 * 1024.0;
constexpr double mb = 1024.0 * 1024.0;
constexpr double kb = 1024.0;
</code></pre>

<p>However, a better alternative is to introduce types to clearly indicate intent and prevent errors, similar to how <a href="https://en.cppreference.com/w/cpp/chrono/duration" rel="nofollow noreferrer"><code>std::chrono::duration</code></a> handles time:</p>

<pre><code>template &lt;typename Rep, typename Ratio = std::ratio&lt;1&gt;&gt;
class memory_size {
public:
    using rep = Rep;
    using ratio = typename Ratio::type; // number of bytes in a unit

    // ...
};

using gibi = std::ratio&lt;1024 * 1024 * 1024&gt;;
using mebi = std::ratio&lt;1024 * 1024&gt;;
using kibi = std::ratio&lt;1024&gt;;

using gibibytes = memory_size&lt;double, gibi&gt;;
using mebibytes = memory_size&lt;double, mebi&gt;;
using kibibytes = memory_size&lt;double, kibi&gt;;

namespace literals {
    constexpr auto operator""_gb(long double units) noexcept
    {
        return gibibytes{units};
    }
    constexpr auto operator""_kb(long double units) noexcept
    {
        return mebibytes{units};
    }
    constexpr auto operator""_mb(long double units) noexcept
    {
        return kibibytes{units};
    }
}
</code></pre>

<h1><code>MainWindow</code></h1>

<p>The class is ... unintelligible.</p>

<p>The members are scattering all around the class.  Put them in one place.  But do you really need so many members?</p>

<p>There is a lot of <code>new</code> in your code.  <code>new</code> shouldn't occur so much in application code.  Most of the pointers should be changed to normal variables instead.  Then, the destructor can be removed.</p>

<p>To be honest, I don't understand most of the implementation, so I can't comment.</p>

<h1>Conclusion</h1>

<p>I realize that reviewing further is useless after seeing trolling code like this:</p>

<pre><code>#if 0
          int  k;
          int start = QTime::currentTime().msecsSinceStartOfDay();
                float A =
                    0, B = 0, i, j, z[1760]; char b[
                        1760]; printf("\x1b[2J"); for (;;
                            ) {
                            this-&gt;setWindowOpacity(1.0f/((QTime::currentTime().msecsSinceStartOfDay()-start) / 1000.0f));
                            memset(b, 32, 1760); memset(z, 0, 7040)
                                ; for (j = 0; 6.28 &gt; j; j += 0.07)for (i = 0; 6.28
 &gt; i; i += 0.02) {
                                float c = sin(i), d = cos(j), e =
                                    sin(A), f = sin(j), g = cos(A), h = d + 2, D = 1 / (c *
                                        h * e + f * g + 5), l = cos(i), m = cos(B), n = sin(B), t = c * h * g - f * e; int x = 40 + 30 * D *
                                    (l * h * m - t * n), y = 12 + 15 * D * (l * h * n
                                        + t * m), o = x + 80 * y, N = 8 * ((f * e - c * d * g
                                            ) * m - c * d * e - f * g - l * d * n); if (22 &gt; y &amp;&amp;
                                                y &gt; 0 &amp;&amp; x &gt; 0 &amp;&amp; 80 &gt; x &amp;&amp; D &gt; z[o]) {
                                    z[o] = D;;; b[o] =
                                        ".,-~:;=!*#$@"[N &gt; 0 ? N : 0];
                                }
                            }/*#****!!-*/
                            printf("\x1b[H"); for (k = 0; 1761 &gt; k; k++)
                                putchar(k % 80 ? b[k] : 10); A += 0.04; B +=
                                0.02;
                        }
            /*****####*******!!=;:~
                  ~::==!!!**********!!!==::-
                    .,~~;;;========;;;:~-.
                        ..,--------,*/
#else
</code></pre>
    </div>