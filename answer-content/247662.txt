<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The code look good.  Here's some nitpicks:</p>
<h1><code>rustfmt</code></h1>
<p>First of all, I ran <code>cargo fmt</code> on your code.  There were some
differences (trailing comma, linebreaks, etc.).</p>
<h1><code>anyhow</code></h1>
<p>Consider changing the return type of all functions to use
<a href="https://docs.rs/anyhow/1.0/anyhow/type.Result.html" rel="nofollow noreferrer"><code>anyhow::Result</code></a>, which provides contexts and backtracks.</p>
<pre><code>return Err(format!("Invalid input character: {}", character));
</code></pre>
<p>can be simplified to</p>
<pre><code>bail!("Invalid input character: {}", character);
</code></pre>
<h1>Matching on <code>enum</code>s with two variants</h1>
<p>For <code>enum</code>s with two variants, it is probably clearer to write</p>
<pre><code>if self == &amp;Self::Wall { '#' } else { '.' }
</code></pre>
<p>as</p>
<pre><code>match self {
    Self::Wall =&gt; '#',
    Self::Open =&gt; '.',
}
</code></pre>
<h1><code>sort_unstable_by_key</code></h1>
<pre><code>adjacent_enemy_units.sort_unstable_by(|a, b| match a.hp.cmp(&amp;b.hp) {
    Ordering::Equal =&gt; a.location.cmp(&amp;b.location),
    hp_cmp =&gt; hp_cmp,
});
</code></pre>
<p>can be written as</p>
<pre><code>adjacent_enemy_units.sort_unstable_by_key(|unit| (unit.hp, unit.location));
</code></pre>
<h1><code>FnMut</code></h1>
<p><code>FnMut</code> is more general than <code>Fn</code>, and can be used in the signature of
<code>maybe_move</code>:</p>
<pre><code>pub fn maybe_move(
    &amp;self,
    enemy_units: &amp;HashMap&lt;Location, Unit&gt;,
    is_open_fn: impl Fn(&amp;Location) -&gt; bool,
) -&gt; Option&lt;Location&gt; {
</code></pre>
<h1><code>derive</code></h1>
<pre><code>impl Ord for SearchNode {
    fn cmp(&amp;self, other: &amp;Self) -&gt; Ordering {
        self.distance.cmp(&amp;other.distance).then(
            self.current_location
                .cmp(&amp;other.current_location)
                .then(self.starting_location.cmp(&amp;other.starting_location)),
        )
    }
}

impl PartialOrd for SearchNode {
    fn partial_cmp(&amp;self, other: &amp;Self) -&gt; Option&lt;Ordering&gt; {
        Some(self.cmp(&amp;other))
    }
}
</code></pre>
<p>These implementations are equivalent to the automatic versions, so use
<code>derive</code>.</p>
    </div>