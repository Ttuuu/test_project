<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Consistency</h1>

<p>Sometimes you use snake_case and sometimes you use camelCase: in JavaScript we usually use camel case, it's not mandatory but stick to one. Then, for example, <code>count_el</code> should be <code>countEl</code> (or a better, more descriptive name, IMHO no need to abbreviate <em>element</em> here.)</p>

<p>In ctor you <em>saved</em> a copy of some properties to abbreviate (I suppose) code elsewhere however, you use it just once. You can drop it altogether.</p>

<h1>Reuse</h1>

<p>You <em>parse</em> a boolean value twice, it's enough to introduce a more robust function:</p>

<pre><code>const parseBoolean(value) =&gt; (/true/i).test(value);
</code></pre>

<p>There are a few different techniques to parse a boolean (direct string comparison as you're doing, regex, <code>JSON.parse()</code>, and few more). Just pick one, in this case it's not probably that important. Note: use <code>===</code> instead of <code>==</code>.</p>

<p>Now that you have a function (which accepts, via conversion, both a boolean and a string) you can write:</p>

<pre><code>toggle() {
    this.el.dataset.toggled = !parseBoolean(this.el.dataset.toggled);
}
</code></pre>

<p>In this example I'm storing <code>boolean</code>, add <code>.toString()</code> if appropriate. <code>toggleCount()</code> will then use <code>if (parseBoolean(this.el.dataset.toggled))</code>. You may want to introduce a function <code>const isElementToggled = () =&gt; parseBoolean(this.el.dataset.toggled);</code>.</p>

<h1>Style &amp; misc</h1>

<p>IMHO <code>setClickHandlers()</code> does both too little and too much. Its responsibility is to add a click handler (and it's too little to be a separate function) but it also <em>IS</em> the click handler (and it's too much). Declare a separate function:</p>

<pre><code>handleClick(e) {
    this.postVote();
    this.toggle();
    this.toggleCount();
}
</code></pre>

<p>And attach it directly in your ctor:</p>

<pre><code>el.addEventListener("click", this.handleClick.bind(this));
</code></pre>

<p>If you're targeting ES6 then do not use (unless there is a strong compelling reason) <code>var</code>, use <code>const</code> and <code>let</code> instead.</p>

<p>The snippet where you <em>create</em> <code>Vote</code> may be simplified, no need to check <code>Array.length</code> if using <code>Array.forEach()</code>:</p>

<pre><code>document.addEventListener("turbolinks:load", ()=&gt; {
  document.querySelectorAll('[data-vote]').forEach(x =&gt; new Vote(x));
});
</code></pre>

<p>If the AJAX call to post a vote fails then you local counter is already incremented and it won't go back. The problem is that you consider these actions as part of the click event handler when they should really be an effect of the sucessfull AJAX call:</p>

<pre><code>axios({ ... }).then((data) =&gt; {
    this.toggle();
    this.toggleCount();
});
</code></pre>

<p>In this way if the call fails you won't have unsynchronized UI. Alternatively, if call is really slow, you may want to update UI immediately and revert it back if failed:</p>

<pre><code>this.toggle();
this.toggleCount();

axios({ /* ... */ }).then((data) =&gt; {
    // ...
}).catch((data) =&gt; {
    this.toggle();
    this.toggleCount();
});
</code></pre>

<p>In any case the code to attach the event handler in ctor will then simply be:</p>

<pre><code>el.addEventListener("click", this.postVote.bind(this));
</code></pre>

<hr>

<p>I, personally, find that to create a discardable object only because of its <em>side effects</em> is slightly misleading for the reader. In JavaScript you can have nested functions and if you do not need to carry a <em>state</em> then you do not need classes. There is no reason to avoid something like this:</p>

<pre><code>document.addEventListener("turbolinks:load", ()=&gt; {
  document.querySelectorAll('[data-vote]').forEach(attachClickHandler);
});
</code></pre>

<p>Where <code>attachClickHandler()</code> is simply:</p>

<pre><code>function attachClickHandler(element) {
    function postVote() { /* ... */ }
    function toggle() { /* ... */ }
    function toggleCount() { /* ... */ }

    el.addEventListener("click", postVote);
}
</code></pre>

<p>Code might be even more simple if you had a module for this "Vote Component" but it really really depends on the UI framework/library you're using (if any.)</p>
    </div>