<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>1. Quick fixes in the first part</h3>
<p>I wouldn't do that:</p>
<pre><code>names = ('Mark', 'Sally')
adjs = ('wacky', 'cool')
adjs_probability_map = (0.1, 0.99)
hellos = ('Hi!', 'Hey!', 'Good morning.')
hellos_probability_map = (0.5, 0.25, 0.25)
adj = random.choices(adjs, adjs_probability_map)[0]
hello = random.choices(hellos, hellos_probability_map)[0]
</code></pre>
<p>instead:</p>
<pre><code>names = {'Mark', 'Sally'}
adjs = {'wacky': 0.1, 'cool': 0.99}
hellos = ('Hi!': 0.5, 'Hey!': 0.25, 'Good morning.': 0.25)
adj = random.choices(*adjs.items())[0]
hello = random.choices(*hellos.items())[0]
</code></pre>
<p>Also:</p>
<pre><code>sum(adjs_probability_map) # 1.09
</code></pre>
<p>I don't think that was intended</p>
<h3>2. Problems in second part:</h3>
<pre><code>re.search('(?&lt;==)\((\d+),(\d+)\)', var_b), re.search('(?&lt;==)((\d+))', var_b)
</code></pre>
<p>You have to escape your backslashes</p>
<pre><code>re.search('(?&lt;==)\\((\\d+),(\\d+)\\)', var_b), re.search('(?&lt;==)((\\d+))', var_b)
</code></pre>
<hr>
<pre><code>def compile(generator):
    """Returns a Compiled object useful when generating multiple times from the same generator."""
    return _Compiler(generator)._compile()
</code></pre>
<p><code>compile</code> is a builtin, don't overload it</p>
<hr>
<pre><code>class RandomGenerationError(Exception):
    """General exception for rrsg"""

    def __init__(self, message):
        super().__init__(message)
</code></pre>
<p>Equivalent to :</p>
<pre><code>class RandomGenerationError(Exception):
    """General exception for rrsg"""
    pass
</code></pre>
<p>Which can be replaced by :</p>
<pre><code>
</code></pre>
<p>Because they are plenty of more descriptive built-in exceptions and you probably don't need to create more:</p>
<pre><code>BaseException  
 +-- SystemExit  
 +-- KeyboardInterrupt  
 +-- GeneratorExit  
 +-- Exception  
      +-- StopIteration  
      +-- StopAsyncIteration  
      +-- ArithmeticError  
      |    +-- FloatingPointError  
      |    +-- OverflowError  
      |    +-- ZeroDivisionError  
      +-- AssertionError  
      +-- AttributeError  
      +-- BufferError  
      +-- EOFError  
      +-- ImportError  
      |    +-- ModuleNotFoundError  
      +-- LookupError  
      |    +-- IndexError  
      |    +-- KeyError  
      +-- MemoryError  
      +-- NameError  
      |    +-- UnboundLocalError  
      +-- OSError  
      |    +-- BlockingIOError  
      |    +-- ChildProcessError  
      |    +-- ConnectionError  
      |    |    +-- BrokenPipeError  
      |    |    +-- ConnectionAbortedError  
      |    |    +-- ConnectionRefusedError  
      |    |    +-- ConnectionResetError  
      |    +-- FileExistsError  
      |    +-- FileNotFoundError  
      |    +-- InterruptedError  
      |    +-- IsADirectoryError  
      |    +-- NotADirectoryError  
      |    +-- PermissionError  
      |    +-- ProcessLookupError  
      |    +-- TimeoutError  
      +-- ReferenceError  
      +-- RuntimeError  
      |    +-- NotImplementedError  
      |    +-- RecursionError  
      +-- SyntaxError  
      |    +-- IndentationError  
      |         +-- TabError  
      +-- SystemError  
      +-- TypeError  
      +-- ValueError  
      |    +-- UnicodeError  
      |         +-- UnicodeDecodeError  
      |         +-- UnicodeEncodeError  
      |         +-- UnicodeTranslateError  
      +-- Warning  
           +-- DeprecationWarning  
           +-- PendingDeprecationWarning  
           +-- RuntimeWarning  
           +-- SyntaxWarning  
           +-- UserWarning  
           +-- FutureWarning  
           +-- ImportWarning  
           +-- UnicodeWarning  
           +-- BytesWarning  
           +-- ResourceWarning
</code></pre>
<p>Also :</p>
<p><code>generate</code> runs a function <code>generate</code> on the result of
<code>compile</code>
which calls <code>_compile</code>
on a <code>_Compiler</code> object which returned a <code>Compiled</code> object</p>
<p>That might make sense to you, but I doubt people will take the time to read your program if you name your variables like this.</p>
    </div>