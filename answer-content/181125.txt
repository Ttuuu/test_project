<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>One thing you may want to consider is remove the hard coding for <code>'L'</code> and <code>'R'</code> instructions. Instead, you can pick up current orientation's proper new orientation by the letter itself.</p>

<pre><code>const executeDirections = (directions, rover, movedRoversArr) =&gt; {
  //deep clone the rover
  const movedRover = JSON.parse(JSON.stringify(rover));
  directions.forEach(directionLetter =&gt; {
    if (directionLetter === 'M') {
      movedRover.position = cardinals[orientation]['move'](movedRover.position.x, movedRover.position.y);
      failures.checkCollisions(movedRover.position.x, movedRover.position.y, movedRoversArr);
    } else {
      movedRover.orientation = cardinals[orientation][directionLetter];
    }
  });
  return movedRover;
};
</code></pre>

<p>This has a fundamental difference (basically, it's following the idea of <a href="https://sourcemaking.com/design_patterns/strategy" rel="nofollow noreferrer">"Strategy" design pattern</a>). Think, what the if-based code would look like if NASA says: "Oh, we want rover to support A direction for turning 45 degrees left, and B for 45 degrees right, and R to fully reverse -- 180 degrees!"</p>

<p>With what I'm suggesting, only the <code>cardinals</code> object would need to change, not the <code>executeDirections</code> function...</p>
    </div>