<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>Simply call this code:</p>

<pre><code>    DatabaseHelper db = new DatabaseHelper(this);
    db.OpenDB();
    try {
        db.CreateTable(new myClass1());
        db.CreateTable(new myClass2());
        ...
    } catch (Exception e) {
        e.printStackTrace();
    }
</code></pre>
</blockquote>

<p>Be aware that there are database upgrades which can't be automated so straightforwardly. E.g. the initial values of a new column might need to be calculated based on some older column.</p>

<hr>

<blockquote>
<pre><code>interface IGenericClass {
    ArrayList&lt;?&gt; SelectAll(Class&lt;?&gt; type, Context ctx, String whereClause);

    int SelectCount(Class&lt;?&gt; type, Context ctx, String whereClause);

    Integer SumColumn(Class&lt;?&gt; type, Context ctx, String whereClause, String columnName);

    boolean DeleteAll(Class&lt;?&gt; type, Context ctx);

    boolean Delete(Class&lt;?&gt; ciboClass, Context ctx, String whereClause);

    Object SelectById(Class&lt;?&gt; type, Context ctx, UUID id);
}
</code></pre>
</blockquote>

<p>Why do all of those methods have <code>Class&lt;?&gt; type</code> parameters? An object knows its own type, and if these aren't operating on the type of <code>this</code> then they probably should be in a different class altogether.</p>

<hr>

<blockquote>
<pre><code>interface IGenericClass {
    ArrayList&lt;?&gt; SelectAll(Class&lt;?&gt; type, Context ctx, String whereClause);

    boolean SaveAll(List&lt;?&gt; objects, Context ctx);
}
</code></pre>
</blockquote>

<p>This is not typesafe, although fixing it requires a moderately advanced technique called f-bounded polymorphism. Also, code to the interface (<code>List</code>) rather than the instance (<code>ArrayList</code>).</p>

<pre><code>interface IGenericClass&lt;T extends IGenericClass&lt;T&gt;&gt; {
    List&lt;T&gt; SelectAll(Context ctx, String whereClause);
    boolean SaveAll(List&lt;T&gt; objects, Context ctx);
}
</code></pre>

<hr>

<blockquote>
<pre><code>    public ArrayList&lt;?&gt; SelectAll(Class&lt;?&gt; type, Context ctx, String whereClause) {

        DatabaseHelper db = new DatabaseHelper(ctx);
        db.OpenDB();

        ArrayList&lt;?&gt; returnList = new ArrayList&lt;&gt;();
        try {
            return db.SelectAll(this.getClass(), whereClause);
        } catch (Exception ex) {
            return null;
        }
    }
</code></pre>
</blockquote>

<p>Database connections should either be closed or (preferably) returned to a cache. <code>OpenDB()</code> with neither in sight is a red flag. There <em>are</em> extremely advanced techniques to return it to the cache automatically, but they require getting intimate with the garbage collector, so it's better to use a standard pattern.</p>

<p>This implementation illustrates my point above about <code>Class&lt;?&gt; type</code>: it's not even used!</p>

<p>Catching the exception and returning <code>null</code> without logging anything is a classic "worst practice".</p>

<hr>

<blockquote>
<pre><code>interface IDatabaseHelper {
    ArrayList&lt;?&gt; SelectAll(Class&lt;?&gt; tipo, String whereClause);
    int SelectCount(Class&lt;?&gt; type, String whereClause);
    boolean Save(Object object);
    boolean SaveAll(List&lt;?&gt; objects);
    Integer SumColumn(Class&lt;?&gt; type, String whereClause, String columnName);
    boolean DeleteAll(Class&lt;?&gt; type);
    Object SelectById(Class&lt;?&gt; type, UUID id);
    boolean Delete(Class&lt;?&gt; type, String whereClause);
    boolean UpdateObject(Object objToUpdate);
}
</code></pre>
</blockquote>

<p>You say about <code>IGenericClass</code> that </p>

<blockquote>
  <p><strong>(Every class that needs to be a database table, must extend this class)</strong></p>
</blockquote>

<p>Why? The <code>IDatabaseHelper</code> API doesn't care. If you're serious about that statement, <code>IDatabaseHelper</code> should enforce it. And while we're at it, let's fix the generics:</p>

<pre><code>interface IDatabaseHelper {
    ArrayList&lt;T&gt; SelectAll&lt;T extends IGenericClass&lt;T&gt;&gt;(Class&lt;T&gt; tipo, String whereClause);
    int SelectCount(Class&lt;? extends IGenericClass&lt;?&gt;&gt; type, String whereClause);
    boolean Save(IGenericClass&lt;?&gt; object);
    boolean SaveAll(List&lt;? extends IGenericClass&lt;?&gt;&gt; objects);
    Integer SumColumn(Class&lt;? extends IGenericClass&lt;?&gt;&gt; type, String whereClause, String columnName);
    boolean DeleteAll(Class&lt;? extends IGenericClass&lt;?&gt;&gt; type);
    T SelectById&lt;T extends IGenericClass&lt;T&gt;&gt;(Class&lt;T&gt; type, UUID id);
    boolean Delete(Class&lt;? extends IGenericClass&lt;?&gt;&gt; type, String whereClause);
    boolean UpdateObject(IGenericClass&lt;?&gt; objToUpdate);
}
</code></pre>

<hr>

<blockquote>
<pre><code>interface IDatabaseHelper {
    boolean CreateTable(Object object);
}
</code></pre>
</blockquote>

<p>Shouldn't that take a <code>Class&lt;? extends IGenericClass&lt;?&gt;&gt;</code> instead of an instance?</p>

<hr>

<blockquote>
<pre><code>interface IDatabaseHelper {
    void Close();
}
</code></pre>
</blockquote>

<p>So it does exist and is just never used?</p>

<hr>

<p>Why does <code>IDatabaseHelper</code> have <code>DeleteAll(Class)</code> and <code>Delete(Class, String)</code> but not <code>Delete(Object)</code> (to be corrected to <code>Delete(IGenericClass&lt;?&gt;)</code>)?</p>

<hr>

<blockquote>
<pre><code>public class DatabaseHelper implements IDatabaseHelper {
    private static final String DATABASE_NAME = "myDatabase.db";
    private static String DATABASE_FULLPATH = "";
    private static SQLiteDatabase database;
//    private static SimpleDateFormat simpleDateFormat = new SimpleDateFormat("dd/MM/yyyy", Locale.getDefault());


    //constructor
    public DatabaseHelper(Context context) {
        DATABASE_FULLPATH = context.getFilesDir().getPath() + "/" + DATABASE_NAME;
    }

    ...

    //open db
    public boolean OpenDB() {
        try {
            database = SQLiteDatabase.openOrCreateDatabase(DATABASE_FULLPATH, null, null);
            return true;
        } catch (Exception ex) {
            return false;
        }
    }
</code></pre>
</blockquote>

<p>This speaks to me of confusion about the meaning of <code>static</code>. Setting a static field in an instance constructor is a big red flag. Similarly, setting a static field in an instance method. The only exceptions I can think of are things like instance counting, and they should be made thread-safe.</p>

<p>IMO the database helper used at app start should be conserved and passed around, and no further helpers should need to be constructed.</p>

<p>Also, that path is non-standard. It should be <code>context.getDatabasePath(DATABASE_NAME)</code>.</p>

<hr>

<blockquote>
<pre><code>    public boolean Save(Object object) {

        //we build the query for each object
        String insertQuery = "insert into " + object.getClass().getSimpleName() + "(";
        try {
            ArrayList&lt;Pair&lt;String, Object&gt;&gt; name_value = GetFieldNameValue(object);

            String tableNames = "";
            String tableValues = "";
            //for each record we add the values and the field names
            for (Pair&lt;String, Object&gt; pair : name_value) {
                tableNames += pair.first + ",";
                tableValues += "'" + pair.second.toString() + "'" + ",";
            }
</code></pre>
</blockquote>

<p>That is a classic SQL injection attack waiting to happen. Use parameterised queries. Always. This also applies to all of the methods which take a <code>queryString</code>.</p>
    </div>