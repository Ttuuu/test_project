<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If (and only if) the $array that you start with is always ordered from 1 to n (as you said in the comments), then you don't have to do any sorting on your part. It's simply a matter of accessing your array. I came up with the following solution:</p>

<pre><code>$array = [
    ['id' =&gt; 1, 'content' =&gt; 'value 1'],
    ['id' =&gt; 2, 'content' =&gt; 'value 2'],
    ['id' =&gt; 3, 'content' =&gt; 'value 3'],
    ['id' =&gt; 4, 'content' =&gt; 'value 4'],
];

$order = [3, 1, 2, 4];
$sorted = [];

$i = 0;
foreach ($array as $value) {
    $sorted[$i] = $array[$order[$i]-1];
    $i++;
}
</code></pre>

<p>However, I'm afraid that I've misunderstood your question if this answers it. The code produces identical output compared to the function in the question, provided that the <code>$array</code> is sorted. Otherwise it breaks horribly. </p>

<p>If this doesn't fit your use case, write a comment and I'll try to see what's missing.</p>
    </div>