<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Well, technically you should really post complete code and not have
missing definitions.  Especially since <code>Data</code> and <code>OtherData</code> could
instead be generic type arguments perhaps, or interfaces, so that it's
actually clear what's happening.  I'm just gonna imagine they're
basically both <code>Object</code>s.  Also <code>Processor</code> is undefined.  If it was
really not important just pass it in as an argument to <code>System</code>, as it
is, this is incomplete too.</p>

<hr>

<p>In <code>System</code> having a separate <code>idList</code> is pointless, the <code>inputMap</code>
already has the right size for implementing back pressure (I wanted to find a good definition, but right now at least Wikipedia doesn't have one under that term; basically if the input can grow unlimited, the system might not be able to catch up if processing takes too long and you might end up with a congested (read: out of memory) system).</p>

<hr>

<p>In <code>Evaluator</code>, <code>x.size() &gt; 0</code> could be <code>!x.isEmpty()</code>, that might
potentially be cheaper, but it also expresses intent a bit more clearly:
The check is really whether the map "isn't empty", not about how many
items are in the container exactly.</p>

<p><code>InterruptedException</code> is for control flow,
<a href="https://stackoverflow.com/questions/3976344/handling-interruptedexception-in-java">don't just print a stack trace</a>.</p>

<p>Also now that I read it, why's there three containers, <code>inputMap</code>,
<code>futureMap</code> and <code>idList</code> all related to the same task?  It'd be much
easier if there was just a sequence of tuples, <code>Tuple&lt;Input, Future&gt;</code>,
and then work through them.  Then replace the <code>List</code> with a
<a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/BlockingQueue.html" rel="nofollow noreferrer"><code>BlockingQueue&lt;Tuple&lt;Input, Future&gt;&gt;</code></a> and it's already supporting the
waiting / back pressure too.  An <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ArrayBlockingQueue.html" rel="nofollow noreferrer"><code>ArrayBlockingQueue</code></a> could be used to
limit the number of elements, while a <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/LinkedBlockingQueue.html" rel="nofollow noreferrer"><code>LinkedBlockingQueue</code></a> could have
an unbounded size (that's really not advisable though).</p>

<p>Lastly instead of <code>keepRunning</code> a tombstone object could then be
inserted to cancel the thread, then there's also no need for polling via
<code>wait</code>.  That is, insert a <code>new Tuple&lt;&gt;()</code> (same as the IDs at the
moment via <code>new Object()</code>) and when dequeuing from the input, check
whether this element was inserted, due to the object identity being
unique that's then safe to do.</p>

<p>So without spelling it all out, the main thread would look like this
perhaps:</p>

<pre><code>public void run() {
    while (true) {
        Tuple&lt;Input, Future&gt; tuple = input.take();
        if (tuple == tombstone) {
            return;
        }
        tuple.getFuture().complete(processor.apply(tuple.getInput()));
    }
}
</code></pre>

<p>With some implementation of <code>Tuple</code> of course; a custom class would work
too.</p>

<hr>

<p>For the other questions:  I can't see it deadlocking right now, the check for 32 and the <code>notifyAll</code> are a bit odd though.</p>

<p>Other tools in the Java tool set?  Yes, I'd suggest starting with reading through the <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/package-summary.html" rel="nofollow noreferrer"><code>java.util.concurrent</code> namespace</a>.  In particular the <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ExecutorService.html" rel="nofollow noreferrer"><code>ExecutorService</code></a> perhaps.</p>
    </div>