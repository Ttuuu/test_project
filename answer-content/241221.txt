<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This code needs better abstraction and <strong>S</strong>ingle <strong>R</strong>esponsibility <strong>P</strong>rinciple re-structuring which will naturally facilitate pattern use. Right off the bat I see "factory pattern" as one result.</p>

<hr>

<p><strong>Factory Pattern</strong></p>

<p>When <code>abstract Transfer</code> defines ALL members needed to do stuff then we can use factory pattern to build all the derived types. Same for those three <code>xxTransferProcessing</code> types.</p>

<pre><code>// EVERYTHING needed to instantiate a Transfer must be in here.
public static class TransferFactory {

  // maybe no switch, but overloaded `Create` for different parameters. Or maybe use `params`.

  public static Transfer Create( TransferType thisGuy ) {
    Transfer aTransfer;

    switch ( thisGuy ) {

         case TransferType.DC: {
           aTransfer = new DCTransfer( thisGuy );
           break;
         }

         case TransferType.DG: {
           aTransfer = new DGTransfer( thisGuy );
           break;
         }

         case TransferType.MC: {
           aTransfer = new MCTransfer( thisGuy );
           break;
         }

         case TransferType.Undefined: { ... }  // see below

         default: { ... }
    }

    return aTransfer;
  }
}
</code></pre>

<hr>

<p><strong>TransferType enum</strong></p>

<pre><code>public enum TransferType { undefined, MC, DC, DG }
</code></pre>

<p><code>enum</code> default value is zero, so might as well give it a name. Assigning it explicitly is saying "yeah, this guy is 'undefined' on purpose". The next time you have a 60 value <code>enum</code> used across dozens of classes you'll say "thanks for the tip, Bob." Yeah, you will. ;-)</p>

<p>In a way it makes a "nothing / null-like" value type safe with respect to <code>TransferType</code> variables.</p>

<hr>

<p>Now the massive <code>TransferProcess.StartTransferProcessing()</code> total code is cut by at least 2/3.</p>

<pre><code>transferInfo =  GetAllTransferInfo()
                .Where(f =&gt; f.TransferCode.ToUpper().Trim() == Parameter.ToUpper().Trim())
                .FirstOrDefault();

 _directoryFiles = GetFilesFromDirectory(transfer.Directory, Extension);

 if (!_directoryFiles == null &amp;&amp; !_directoryFiles.Files.Count == 0)
 {
   foreach (DataFile file in _directoryFiles.Files)
   {
 // ******* LOOK! NO SWITCH *******
     Transfer = TranferFactory.Create( Transfer, this.Market,
                                       transferInfo, file )
   };

   result = TransferProcesor.Processing( transfer );

   TransferProcesor.SaveResult(result); 

// yeah, this should be in try/catch.
{
    if ( Debugger.IsAttached )
        Debugger.Break();
    throw new Exception("...!", ex);
}
</code></pre>

<hr>

<p><strong>abstract class Transfer</strong></p>

<p>Move <code>public TransferInfo TransferInfo</code> into the abstract class. Make its implementation required and have some kind of "nothing" or "null-ish" implementation for classes like <code>DCTransfer</code>. </p>

<pre><code>public abstract class Transfer
{
  public FileData fileData { get; set; }
  public TransferType transferType  { get; set; }
  public abstract TransferInfo TransferInfo ();
}

public class DCTransfer : Transfer  {     }

public class MCTransfer : Transfer  {     }

public class DGTransfer : Transfer  
{ public TransferInfo get{ return null; }  }
</code></pre>

<p>When all base-type object are consistent then client code gets much simpler. If client code must, for itself, differentiate derived types that's <em>possibly</em> a design defect (aka "code smell").</p>

<p>Resulting OO goodness:</p>

<p><strong>public static TransferResult Processing(Transfer transfer)</strong></p>

<p>becomes dead simple when we treat all derived objects the same way. </p>

<pre><code>{
   Transfer Transfer = TransferFactory.Create(transfer.TransferType);
   TransferResult result = Transfer.ProcessData();
   return result;
}
</code></pre>

<hr>

<p><strong>abstract class TransferProcessing</strong></p>

<p>Make a base for <code>xxxTransferProcessing</code> objects. </p>

<p>Resulting OO goodness:</p>

<pre><code>public abstract class TransferProcesor {
{
  public static TransferResult Processing(Transfer transfer)
  {
     TransferResult result;
     TransferProcessing xxProcessing = ProcessFactory.Create( transfer )
     result = xxProcessing.ProcessData();
     return result;
  }
}
</code></pre>

<hr>

<p><strong>Collection classes</strong></p>

<p>I sigh whenever I see this kind of thing:</p>

<pre><code>private readonly List&lt;AutomaticProcess&gt; processes;
</code></pre>

<p>Do this instead:</p>

<pre><code>public class AutoProcesses { 
  protected List&lt;AutomaticProcess&gt; processes { get; set; }

  public AutoProcesses() { processes = new List&lt;AutomaticProcesses&gt;() }

  public void Add(AutomaticProcess thisGuy) {
     if ( thisGuy == null ) return;

     processes.Add(thisGy);
  }

  pubic AutoProcesses AllDC() {
     AutoProcesses DcProcesses = new AutoProcesses();

     forEach (var process in processes) {
        DcProcesses.Add(this.processes.Find(process.Type == TransferType.DC);
     }

     return DcProcesses;   
  }
}
</code></pre>

<p>The OO goodness:</p>

<ul>
<li>Look and feel of a business domain object</li>
<li>All <code>List</code> public members are hidden. Does only what you intend. This is why there's no inheritance.</li>
<li>Proper SRP. The collection knows how to find its own members, thank you very much.</li>
<li>Client code is vastly simplified because needed collection functionality is encapsulated in the right kind of class.</li>
<li>Client code becomes far more readable, understandable, and amazingly simplified.</li>
<li>Principle of least knowledge. Client does not do-it-yourself with internal access to the collection ( nor the contained objects ).</li>
</ul>

<hr>

<h2>Which Design Pattern?</h2>

<p>Heck, I don't know. Often a certain pattern may inspire some design aspect but without precisely implementing the pattern. IN ALL CASES, good OO design of your basic classes is essential. I hope I have shown this in getting to the factory pattern.</p>

<p><strong>Factory</strong> is a <em>construction</em> pattern. Its purpose is to encapsulate details and complexities of building objects, giving clients a simple interface (method calls) to use it. However complex the construction process may be, the client is blissfully ignorant - all it knows is <code>myFactory.Create( thisGuy )</code>.</p>
    </div>