<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Now for something completely different!</p>

<p>I re-analyzed my problem and determined that I didn't really need to implement the above data structure. How my program works is that I have many modules (that change) that are connected together to perform operations on large arrays of data. Ideally, I want minimal memory usage for both performance and scalability, so I must reuse memory allocations in my calculations to store the temporary calculations that get sent from module to module, copying only when necessary.</p>

<p>The best solution to this problem is to allocate all the memory up front and give ownership of it to an entity that sits above all the modules that shuffles the data through the system. As the system runs through an iteration of data processing it gives <em>handles</em> to the memory locations it allocated to each of the modules for I/O. These handles claim no ownership. The handles can be initialized with a borrowed pointer, and then later invalidated in a call to <code>transform</code>. And only one "view" of the memory space should exist at a time, seeing as each view could be as a different type.</p>

<p>I found this example of a non-owning observer smart pointer written by Howard Hinnant in <a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3514.pdf" rel="nofollow noreferrer">this proposal</a>. They went on to modify it to add copy semantics, but the original implementation serves my purposes better.</p>

<pre class="lang-cpp prettyprint-override"><code>struct no_delete {
    template &lt;typename T&gt;
    void operator() (T*) {}
};

template &lt;typename T&gt;
using unique_handle = std::unique_ptr&lt;T, no_delete&gt;;

template &lt;typename T&gt;
auto get_handle_to(T&amp; a) {
    return unique_handle&lt;T&gt;(&amp;a);
}
</code></pre>

<p>Transform can be as follows.</p>

<pre class="lang-cpp prettyprint-override"><code>template &lt;typename I, size_t SZ, typename F&gt;
auto transform(unique_handle&lt;std::array&lt;I, SZ&gt;&gt;&amp; in, F&amp;&amp; func)
{
    using O = decltype(func((*in)[0]));
    auto out = unique_handle&lt;std::array&lt;O, SZ&gt;&gt;(reinterpret_cast&lt;std::array&lt;O, SZ&gt;*&gt;(in.get()));
    std::transform(in-&gt;begin(), in-&gt;end(), out-&gt;begin(), func);
    in.release();
    return out;
}

template &lt;typename I, size_t SZ, typename I2, typename F&gt;
auto transform(unique_handle&lt;std::array&lt;I, SZ&gt;&gt;&amp; in, const unique_handle&lt;std::array&lt;I2, SZ&gt;&gt;&amp; in2, F&amp;&amp; func)
{
    using O = decltype(func((*in)[0], (*in2)[0]));
    auto out = unique_handle&lt;std::array&lt;O, SZ&gt;&gt;(reinterpret_cast&lt;std::array&lt;O, SZ&gt;*&gt;(in.get()));
    std::transform(in-&gt;begin(), in-&gt;end(), in2-&gt;begin(), out-&gt;begin(), func);
    in.release();
    return out;
}
</code></pre>
    </div>