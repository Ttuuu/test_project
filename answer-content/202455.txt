<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Python has something called magic methods (sometimes also called dunder methods, but the other name is way cooler).</p>

<p>These methods have special names and enable custom classes to use built-in functionality. If, for example you write a custom numeric class, you would want to be able to do e.g. <code>a + b</code>, with at least one of them being an instance of your class (and the other one either as well or even just a plain number). In order to achieve this, you would just implement an appropriate <code>__add__</code> method for your class.</p>

<p><a href="https://rszalski.github.io/magicmethods/" rel="nofollow noreferrer">Here is a good list</a> going through all available magic methods.</p>

<p>In your class, we can use the <code>__str__</code> method. It gets used when you call <code>str(obj)</code>, <code>print(obj)</code>, <code>"{}".format(obj)</code> (unless you also implement the <code>__format__</code> method):</p>

<pre><code>class User:
    def __init__(self, first_name, last_name, city, age):
        self.first_name = first_name
        self.last_name = last_name
        self.city = city
        self.age = age

    def __str__(self):
        s = ["-----",
             f"First Name : {self.first_name}",
             f"Last Name : {self.last_name}",
             f"City : {self.city}",
             f"Age : {self.age}"]
        return "\n".join(s)
</code></pre>

<p>Note that I made some more changes:</p>

<ul>
<li>The empty parenthesis after the class name are not needed. You only need parenthesis if you want to inherit from some other class.</li>
<li>I also called the first argument of the methods <code>self</code>, which is the customary name for it in Python.</li>
<li>I did not build the string using simple addition, since that is quite slow in Python (strings are immutable objects, so each string addition involves creating a new string of the right length and copying the content of the two strings being added).</li>
<li>And finally, I used <a href="https://docs.python.org/3/whatsnew/3.6.html#whatsnew36-pep498" rel="nofollow noreferrer"><code>f-strings</code></a> to make the formatting a bit easier.</li>
</ul>

<hr>

<p>In your <code>form_complete</code> function (which IMO should be called <code>complete_form</code>, since that describes an action), you could use a list comprehension:</p>

<pre><code>def complete_form(n_users):
    return [User(ask_user("Enter First Name: ").title(),
                 ask_user("Enter Last Name: ").title(),
                 ask_user("Enter City: ").title(),
                 ask_user("Enter Age: ", type=int)
            for _ in range(n_users)]
</code></pre>

<p>Note that I moved the alls to <code>str.title</code> here, since it should be the responsibility of the user of your class to pass in correct values (for example, what if your user enters a name for which <code>title()</code> does not make sense? There are also names that start with lowercase letters. Etc...)</p>

<p>I also removed <code>values</code> and <code>placement</code> from the signature, since you override them right away anyways.</p>

<hr>

<p>And finally, I added a keyword argument to <code>ask_user</code>, which allows you to validate that age is actually an integer:</p>

<pre><code>def ask_user(message='', type=str):
    user_input = ''
    while not user_input:
        try:
            user_input = type(input(message).strip())
        except ValueError:
            continue
    return user_input
</code></pre>

<p>By default, this just calls the <code>str</code> function on whatever your user supplied. If you instead specify <code>type=int</code>, it will call <code>int</code> on the input, which raises a <code>ValueError</code> if it cannot parse the input it received as an <code>int</code>.</p>

<p>This has only one weakness right now: If the user wants to enter something that parses as <code>0</code>, they are stuck in an infinite loop (so no users under the age of 1 allowed).</p>

<p>I also added a call to <code>str.strip</code>, so user names like <code></code> (space) and <code></code> (tab) are not allowed either.</p>
    </div>