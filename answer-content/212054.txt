<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Using the strategy pattern from the GOF would be a solution, but I don't speak python... </p>

<ol>
<li>create an abstract class <code>ValueCalculator</code> with the functions <code>calculate_value_to_time(self, time)</code>and <code>calculate_value(self)</code></li>
<li>create three different classes that implement the interface: <code>ValueCalculatorWithContinuous</code>, <code>ValueCalculatorWithDue</code> and <code>ValueCalculatorWithImmediate</code></li>
<li>each class offers the special implementation of the formula</li>
<li>create a <code>self.valueCalculator</code>-property for the Annuity-class</li>
<li>instantiate the correct ValueCalculator, decided from the annuity_type, and set the <code>self.valueCalculator</code> in the <code>__init__</code>-part to this</li>
<li>then you can shorten the functions to</li>
</ol>

<pre><code>#Functions
def present_value_to_time(self, time):
    if time &gt;= self.term:
        return self.present_value
    else:
        return self.valueCalculator.calculate_value_to_time(self, time)
</code></pre>

<p>Hope that helps. Watch out, this is not REAL Python code!</p>
    </div>