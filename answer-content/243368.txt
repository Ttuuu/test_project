<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First off, I must say the task as written is not very good. It encourages some bad practices, mostly requiring separate <code>calculateAvg()</code> and <code>findGrade()</code> methods. Instead this functionality should be integrated in <code>getAverage()</code> and <code>getGrade()</code>.</p>

<h1>Class <code>StudentMain</code></h1>

<p>All three static fields are unnecessary. They are only used/needed inside the method <code>getStudentDetails()</code> so they should be local variables inside that method. And the case of the field <code>n</code> is especially bad, since it is accessed later on in a way that never should be used (more on that later).</p>

<p>Furthermore the names are bad. Don't unnecessarily abbreviate them and do call them after what they hold, not what they are. <code>sc</code> should be called <code>scanner</code> and <code>al</code> should be called <code>marks</code>.</p>

<h2>Method <code>getStudentDetails()</code></h2>

<p>Don't leave in commented out code lines and remove the <code>for</code> loop that doesn't do anything. </p>

<p>You are missing the part of the task requiring you check that the marks are between 0 and 100.</p>

<p>There is no need to manually copy the contents of the <code>ArrayList</code> to an array. For one <code>List</code>s have a method <a href="https://docs.oracle.com/javase/8/docs/api/java/util/List.html#toArray-T:A-" rel="nofollow noreferrer"><code>toArray()</code></a> to do that for you (although it is a bit awkward to use due to limitations of the Java language).</p>

<p>But more importantly, since know the number of elements ahead of time, it would be sensible to store the marks directly in an array:</p>

<pre><code>Integer[] marks = new Integer[n];

for (int i = 0; i &lt; n; i++) { // It is convention to use spaced around operators
  int subjectNr = i + 1; // Use readable variable names, not random single letters
  System.out.println("Enter mark for subject " + subjectNr);
  int mark = sc.nextInt();
  marks[i] = mark;
}
</code></pre>

<h1>class <code>Student</code></h1>

<p>Another of the weaknesses of this task is requirement to add "appropriate" setters. I'd argue that it's appropriate to have no setters at all, since they are not needed.</p>

<h2>Method <code>calculateAvg()</code></h2>

<p>This method contains the biggest flaw in your code. This class should never access the field <code>n</code> from <code>StudentMain</code> for many reasons:</p>

<ul>
<li>The class <code>Student</code> has no business even to know about <code>StudentMain</code>. A method in <code>Student</code> should only access its parameters and members (fields and methods) of <code>Student</code>.</li>
<li>Since <code>n</code> is static there only one value, but if you had more than one <code>Student</code> there is a good chance, that the value <code>n</code> contains the information from a different <code>Student</code> than the one you are currently calculating the average of.</li>
<li><code>StudentMain</code> only contains static members, so creating a new instance with <code>new</code> is generally pointless. Actually your IDE/compiler should be warning you about accessing the static field <code>n</code> via an instance. Especially as a beginner you should consider warnings errors.</li>
<li>You don't even need to get the number of marks from <code>StudentMain</code>. <code>marks.length</code> contains the same information.</li>
</ul>

<h2>Method <code>findGrade()</code></h2>

<p>You have some errors in here. </p>

<ul>
<li>Averages of exactly 80 or 100 will return an 'F'.</li>
<li>The task asks you return an 'F' if the student has less than 50 in any subject, not less than 50 in average.</li>
</ul>
    </div>