<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Such a problem is also looking whether the interviewed has a nice logic filtering, simplifying things.</p>

<p>Now the problem actually only varies for the question marks. So:</p>

<pre><code>void allCombinations(String pattern) {
    if (!pattern.matches("[01\\?]+") {
        throw new IllegalArgumentException("Invalid pattern: " + pattern);
    }
    int questionMarks = pattern.replaceAll("[^\\?]", "").length();
    if (questionMarks == 0) {
        System.out.println(pattern);
        return;
    }
    if (questionMarks &gt; 63) {
        throw new IllegalArgumentException("Limited to 63 question marks: 2^63 combinations.");
    }
    long n = 1L &lt;&lt; questionMarks; // Number of combinations.
    ...
    for (long i = 0; i &lt; n; ++i) {
        // The bits of i[0 .. questionMarks-1] should fill in the pattern's qm's.
        ...
    }
}
</code></pre>

<p>The real work, its optimal programming I leave to your creativity.</p>

<p>The important thing is not to overcomplicate the combinating algorithm, a counter upto <code>2^questionMarks</code> (java: <code>1 &lt;&lt; questionMarks</code>) suffices here.</p>

<p>Your solution loop + recursion is not that adequate, and seeing that this problem delivers <strong>O(2<sup>n</sup>)</strong> I would not be entirely satisfied.</p>

<p>Also one should consider how to deliver the result: a <code>List&lt;String&gt;</code> is immensive. An iterator like function would be better. Explained.</p>

<hr>

<p><strong><em>One implementation</em></strong></p>

<p>As the work to do was still not entirely trivial:</p>

<pre><code>    long n = 1L &lt;&lt; questionMarks; // Number of combinations.
    ...
    char[] chars = pattern.toCharArray();
    int[] qmIndices = new int[questionMarks];
    int qmII = 0;
    for (int j = 0; qmII &lt; questionMarks &amp;&amp; j &lt; chars.length; ++i) {
        if (chars[j] == '?') {
            qmIndices[qmII++] = j;
        }
    }
    for (long i = 0; i &lt; n; ++i) {
        // The bits of i[0 .. questionMarks-1] should fill in the pattern's qm's.
        int bits = i;
        for (int j = 0; j &lt; questionMarks; ++j) {
            chars[qmIndices[j]] = (char)('0' + (bits &amp; 1));
            bits &gt;&gt;= 1;
        }
        System.out.println(new String(chars));
    }
</code></pre>
    </div>