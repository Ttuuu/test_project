<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your solution computes <em>all</em> possible target sums that are obtained by distributing the signs <span class="math-container">\$+1\$</span> and <span class="math-container">\$-1\$</span> to the numbers. For an array with <span class="math-container">\$n\$</span>  numbers that are <span class="math-container">\$2^n\$</span> combinations.</p>

<p>This is a typical case where <a href="https://en.wikipedia.org/wiki/Dynamic_programming" rel="nofollow noreferrer">dynamic programming</a> is of advantage. Instead of searching for all combinations which lead to the target sum  <span class="math-container">\$S\$</span>, one computes the number of combinations leading to <em>any</em> target sum in a range.</p>

<p>The crucial hint here is</p>

<blockquote>
  <ol start="2">
  <li>The sum of elements in the given array will not exceed 1000.</li>
  </ol>
</blockquote>

<p>which means that only target sums between <span class="math-container">\$-1000\$</span> and <span class="math-container">\$1000\$</span> can be obtained by distributing the signs <span class="math-container">\$+1\$</span> and <span class="math-container">\$-1\$</span> to the numbers, that are “only” <span class="math-container">\$2001\$</span> possible target sums.</p>

<p>So the idea is to maintain a list <code>L</code> of length <span class="math-container">\$2001\$</span>, corresponding to the possible target sums <span class="math-container">\$-1000 \ldots 1000\$</span>. At each point in the following iteration <code>L[i + 1000]</code> is the number of ways to obtain the target sum <code>i</code> with the numbers encountered so far.</p>

<p>Initially, <code>L[1000] = 0</code> and all other entries are zero, because <code>0</code> is the only target sum that can be obtained using none of the numbers.</p>

<p>Then you iterate over the given array of numbers and update the list <code>L</code>.</p>

<p>Ultimately, <code>L[S + 1000]</code> is the wanted number of ways to obtain the target sum <code>S</code> using all the given numbers.</p>

<p>This approach has <span class="math-container">\$ O(n) \$</span> time complexity, which is asymptotially much better than <span class="math-container">\$O(2^n)\$</span> of your original approach.</p>
    </div>