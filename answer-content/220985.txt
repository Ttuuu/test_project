<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>One immediate thing I would improve is the naming of your variables. While in general very descriptive, it took me a while to realize that <code>start_dt</code> is actually the time of sunset and <code>end_dt</code> the time of sunrise, instead of the other way around. I would also make these variables global constants and use those as default values. This way you can do it all in one still short and readable function.</p>

<p>I would add some <a href="https://www.python.org/dev/peps/pep-0257/" rel="nofollow noreferrer"><code>docstring</code></a> describing what your function(s) do and use a compound comparison instead of two comparisons to determine if the time is day or night.</p>

<p>The <code>datetime</code> module is often imported as <code>from datetime import datetime</code>, although your import is also OK.</p>

<p>The calling of the code should happen under a <a href="http://stackoverflow.com/questions/419163/what-does-if-name-main-do"><code>if __name__ == "__main__":</code> guard</a>, where I would also put at least some very rudimentary testing code.</p>

<pre><code>from datetime import datetime

SUNRISE = datetime.strptime('06:00', '%H:%M')
SUNSET = datetime.strptime('18:00', '%H:%M')

def sun_angle(time, sunrise=SUNRISE, sunset=SUNSET):
    """Return the angle of the sun at `time`.
    Assumes that the sun moves 180 degrees between `sunrise` and `sunset`.
    During night return 'I don\'t see the sun!'.
    """
    time = datetime.strptime(time, '%H:%M')
    if not sunrise &lt;= time &lt;= sunset:
        return "I don't see the sun!"

    angle_per_hour = 180 / (sunset - sunrise).seconds * 3600
    time_since_sunrise = (time - sunrise).seconds / 3600
    return time_since_sunrise * angle_per_hour

if __name__ == "__main__":
    test_cases = [("07:00", 15),
                  ("01:23", "I don't see the sun!"),
                  ("12:15", 93.75)]
    for time, expected in test_cases:
        output = sun_angle(time)
        print(f"solar_angle({time!r}) == {output!r}")
        assert output == expected, f"Failed: expected {expected!r}!"       
</code></pre>

<hr>

<p>The calculation of the sun angle could probably still be a bit better in order to be able to be extended for different latitudes in the future.</p>

<p>If this is not a class exercise or programming challenge, I would also recommend to change the interface of the function a bit. Make <code>time</code> always a <code>datetime</code> object and instead of returning a string in case of invalid input raise a custom exception:</p>

<pre><code>class NightTimeException(ValueError):
    pass

...

    if not sunrise &lt;= time &lt;= sunset:
        raise NightTimeException("I don't see the sun!")
</code></pre>
    </div>