<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Avoid <code>using namespace std;</code></h2>

<p>In <code>Application.cpp</code> the statement <code>using namespace std;</code> is used. If you are coding professionally you probably should get out of the habit of using the <code>using namespace std;</code> statement. The code will more clearly define where <code>cout</code> and other identifiers are coming from (<code>std::cin</code>, <code>std::cout</code>). As you start using namespaces in your code it is better to identify where each function comes from because there may be function name collisions from different namespaces. The identifier<code>cout</code> you may override within your own classes, and you may override the operator <code>&lt;&lt;</code> in your own classes as well. This <a href="https://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice">stack overflow question</a> discusses this in more detail.</p>

<h2>Use Source Control Properly</h2>

<p>There are several places in the source code where code is commented out, this is generally an indication that the code is not ready for review. It seems that the IDE in use is Visual Studio 2019, which means that the IDE supports the use  of GIT for source control. Since GIT is readily available code that is commented out can be removed from source code and easily restored if the code is needed after all. This makes the code easier to read and maintain.</p>

<h2>Commenting Versus Self-Documenting Code and DRY Code</h2>

<p>In <code>Chunk.cpp</code> there are 6 functions (<code>bool ShouldAddTop()</code>, <code>bool ShouldAddBottom(),</code> ...) of similar format that generally have the same comments, in at least 3 of the functions at least one comment is incorrect.</p>

<pre><code>        if (auto bch = BackChunk.lock()) //top chunk exist, check value from there
</code></pre>

<p>All of these functions could be simplified, when the inner if statement is changed to :</p>

<pre><code>        return (bch-&gt;Data[x][y][0] &gt;= 0);   // Condition is different in each function
</code></pre>

<p>versus</p>

<pre><code>        if (bch-&gt;Data[x][y][0] &gt;= 0) // voxel in top chunk is full, dont display
        {
            return false;
        }
        else
        {
            return true;
        }
</code></pre>

<p>As mentioned in the review by @G.Sliepen it is best to find a way to remove code that repeats itself.</p>

<h2>Magic Numbers</h2>

<p>There are Magic Numbers in the following code:</p>

<pre><code>Application::Application(int windowWidth, int windowHeight)
    : MainCamera(60.0f, 4.0f / 3.0f, 0.1f, 1000.0f)
{
    WindowWidth = windowWidth;
    WindowHeight = windowHeight;

    BackgroundColor = Color(0.25f, 0.5f, 1, 1);

    DeltaTime = 0;
    LastTime = 0;
}
</code></pre>

<p>it might be better to create symbolic constants for them to make the code more readble and easier to maintain. These numbers may be used in many places and being able to change them by editing only one line makes maintainence easier.</p>

<pre><code>constexpr double Left = 60.0f;    // This might be Top rather than left
</code></pre>

<p>I couldn't even guess at what the RGB values are for <code>Color()</code>.</p>

<p>Numeric constants in code are sometimes referred to as <a href="https://en.wikipedia.org/wiki/Magic_number_(programming)" rel="noreferrer">Magic Numbers</a>, because there is no obvious meaning for them. There is a discussion of this on <a href="https://stackoverflow.com/questions/47882/what-is-a-magic-number-and-why-is-it-bad">stackoverflow</a>.</p>
    </div>