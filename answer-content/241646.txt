<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your script seems to create a one row csv file with each data element having a separate column.  That didn't seem to make much sense, so here's a script that creates a new csv row for each top-level object in the json file.  I suspect this still isn't what you want, because each unique data element gets its own column in the csv file.  The script provides an outline; you can change the two passes to get what you want.</p>

<p>The script that does two passes over the json file.  First pass is to get the column names.  The second pass creates the csv file.  I used StringIO for testing, you'll want to change <code>StringIO</code> to <code>open</code> (e.g., <code>with open(...) as f</code>).  It uses the <code>ijson</code> library to incrementally read the json file.  Also, the script only handles string data, because that's what is in the example data.</p>

<pre><code>import csv
import ijson
import io

from collections import ChainMap

defaults = {}

#first pass through json data collect all collumn names
#they will be used for the field names in the csv file
# and for default values when writing the csv file
with io.StringIO(jsondata) as jsonfile:
    for (prefix, event, value) in ijson.parse(jsonfile):
        if event == "string":
            defaults[prefix] = ''


# row.maps[0] will be updated as each new top level json objec
# is read from the json file.  row.maps[1] holds the default values
# for csv.DictWriter
row = ChainMap({}, defaults)

# StringIO is used for prototyping, you'll probably want to 
# change them to `open(filename, ...)` or something
with io.StringIO(jsondata) as jsonfile, io.StringIO() as csvfile:
    writer = csv.DictWriter(csvfile, fieldnames=list(defaults.keys()))

    for (prefix, event, value) in ijson.parse(jsonfile):
        if event == "string":
            row[prefix] = value

        # if we're at the top-level key (prefix=='') and we are starting a new
        # row (event=='map_key') or were all done (event=='end_map') and there is
        # a row to write (row.maps[0] not empty), then write a row to the csvfile
        # and clear the row for the next top level json object
        elif prefix=='' and event in ('map_key', 'end_map') and row.maps[0]:
                print(row)
                writer.writerow(row)
                row.maps[0].clear()

    # this is to see what would be in the file.  It's here, inside the with
    # because the `csvfile` gets deleted when the `with` statement ends
    print(csvfile.getvalue())
</code></pre>
    </div>