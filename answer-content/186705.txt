<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are (at least) two ways to easily achieve this. The first one is what <a href="https://codereview.stackexchange.com/users/140549/ludisposed">@Ludisposed</a> <a href="https://codereview.stackexchange.com/questions/186699/using-os-scandir-to-get-all-txt-files-in-subfolders#comment356201_186699">suggested in the comments</a>, <a href="https://docs.python.org/3/library/glob.html" rel="nofollow noreferrer"><code>glob</code></a>. It can also recurse down into subdirectories with <code>**</code> (in Python 3):</p>

<pre><code>import glob

def get_txt_files(base_dir):
    return glob.iglob(f"{base_dir}/**/*.txt", recursive=True)
</code></pre>

<p>Or, if you are using Windows, which uses different delimiters for paths:</p>

<pre><code>def get_txt_files(base_dir):
    return glob.iglob(rf"{base_dir}\**\*.txt", recursive=True)
</code></pre>

<p>The other one is basically what <a href="https://codereview.stackexchange.com/users/52915/mast">@Mast</a> suggested, <a href="https://codereview.stackexchange.com/questions/186699/using-os-scandir-to-get-all-txt-files-in-subfolders#comment356206_186699">also in the comments</a>, make this a fully recursive function:</p>

<pre><code>def get_txt_files(base_dir):
    for entry in os.scandir(base_dir):
        if entry.is_file() and entry.name.endswith(".txt"):
            yield entry.name
        elif entry.is_dir():
            yield from get_txt_files(entry.path)
        else:
            print(f"Neither a file, nor a dir: {entry.path}")
</code></pre>

<p>Both functions return iterators. You can print all names with a simple <code>for</code> loop:</p>

<pre><code>for name in get_txt_files("foo"):
    print(name)
</code></pre>

<p>If your directory <code>X</code> also contains txt files, they will be yielded from these functions. You can avoid this with <code>glob</code> by making the depth level explicit:</p>

<pre><code>def get_txt_files(base_dir):
    return glob.iglob(f"{base_dir}/*/*.txt")
</code></pre>

<p>A third, very similar, way is to use <a href="https://docs.python.org/3/library/pathlib.html#pathlib.PurePath" rel="nofollow noreferrer"><code>pathlib.Path</code></a> (Python 3 only), which also has a <code>glob</code> method (that directly returns an iterator). This way you can be sure that this works both on UNIX and Windows:</p>

<pre><code>from pathlib import Path

def get_txt_files(base_dir):
    return Path(base_dir).glob("*/*.txt")
</code></pre>
    </div>