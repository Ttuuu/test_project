<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Nice work.  I approve of <code>set -eu</code>, and the script pleases Shellcheck.</p>

<p>Here's the things I'd consider changing.</p>

<hr>

<p>I think error messages should go to the error stream.  Example:</p>

<pre><code>[ "${#}" -ne 1 ] &amp;&amp; { echo "Invalid number of arguments." &gt;&amp;2; exit 1; }
#                                                         ^^^ here
</code></pre>

<hr>

<p>Instead of using the negation operator, I'd replace the form <code>! test &amp;&amp; error</code> with plain <code>test || error</code> like this:</p>

<pre><code>is_block_device "${device_string}" || { echo "The given argument is not a block device." &gt;&amp;2; exit 1; }
</code></pre>

<hr>

<p>The script <strong>doesn't work</strong> when I use other links to block devices, such as those in <code>/dev/disk/by-label</code>.  I'd fix that by abandoning the <code>/by-uuid/</code> test, and instead following symlinks until a real file or dangling link is found:</p>

<pre><code>resolve_symlink() {
    f="$1"
    while [ -h "$f" ]
    do f=$(readlink -f -n "$f")
    done
    printf '%s' "$f"
}
</code></pre>



<pre><code>is_empty_string "${device_string}" &amp;&amp; { echo "The given argument is not a device path." &gt;&amp;2; exit 1; }
is_block_device "${device_string}" || { echo "The given argument is not a block device." &gt;&amp;2; exit 1; }

readonly device_name=$(resolve_symlink "$device_string")

if is_device_mounted "$device_name"
then
</code></pre>

<hr>

<p>Why does <code>is_device_mounted</code> ignore its argument and use <code>$device_name</code> instead?</p>

<hr>

<p>Minor issue: we assume that the block device name contains no regex metacharacters here:</p>

<pre><code>grep "^${device_name} "
</code></pre>

<p>That's probably a fair assumption on a non-weird Linux system; I normally use Awk for robust versions such tests (<code>$1 = $device_name</code>, with a suitable <code>-v</code> option) but I don't know how well that meets your portability goals.</p>

<p>If using <code>grep</code> (without the non-standard <code>-q</code> option), then it's usual to discard the output, and use <code>grep</code>'s exit status directly, rather than capturing the output and testing it's non-empty.</p>

<hr>

<p>Minor/style: I'm not a big fan of using braces for every variable expansion.  I prefer to reserve them for when they are really needed, and that seems to be the usual idiom.</p>
    </div>