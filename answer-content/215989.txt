<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>Note that <code>pch.h</code> header is not standard, and probably should not be part of this review.</p></li>
<li><p><a href="https://stackoverflow.com/q/1452721/551375">Don't do <code>using namespace std;</code></a>.</p></li>
<li><p>Use initializer lists. That is, the constructor should be written as <code>Train::Train(int loc, int vel) : location(loc), velocity(vel) { }</code>. For POD types this might not matter, but it is idiomatic.</p></li>
<li><p>Because <code>int getLocation()</code> does not modify the state of the object, it should be made const, i.e., <code>int getLocation() const</code>.</p></li>
<li><p>In your main program, don't strive to declare all variables as soon as possible as this is C++ and not C. Instead, introduce variables as late as possible and as close to their site of usage as possible. As a remark, you should also initialize e.g., <code>time</code> when you define it to improve readability.</p></li>
<li><p>Yes, you could use a while-loop, but the for-loop has the advantage that you have to make an explicit decision as to what happens at the end of the loop in order for the program to compile. Because you need the <code>time</code> variable outside of the loop, you could do say <code>for(; trainA.getLocation() &lt; trainB.getLocation(); ++time) { ... }</code>. A while-loop is also perfectly fine, and this boils down mostly to personal preference. </p></li>
<li><p>Perhaps you should enforce the train speeds to be positive. Otherwise you can get stuck in an infinite loop as the trains will never meet.</p></li>
<li><p>Your comments are too verbose. Good code is self-documenting via variables names and logical structure. Prefer comments that answer "why" to "what". For example, a comment like "input", "initialize each train", and "run the sim" are unnecessary, and only hurt readability. </p></li>
</ul>
    </div>