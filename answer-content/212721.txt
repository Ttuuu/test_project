<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>2019 Answer - React 16+ compatible</h2>

<p>TL;DR : Fully fonctional code :</p>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="true">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>class TestBox extends React.Component {
    constructor(props) {
        super(props)

        this.state = {
            firstName: '',
            lastName: ''
        }
    }

    handleInput = field =&gt; ev =&gt; {
        this.setState({ [field]: ev.target.value })
    }

    render(){
        const { firstName, lastName } = this.state

        return (
            &lt;div className="test-box"&gt;
                {[
                    ['firstName', 'First Name : ', 'John'],
                    ['lastName', 'Last Name : ', 'Smith']
                ].map(([id, label, place]) =&gt; &lt;TestInput id={id} label={label} placeholder={place} onChange={this.handleInput(id)} key={id} /&gt;)}
                &lt;TestOutput first={firstName} last={lastName} /&gt;
            &lt;/div&gt;
        )
    }
}

const TestInput = ({ id, label, onChange, placeholder }) =&gt; (
    &lt;div className="form-group"&gt;
        &lt;label htmlFor={id}&gt;{label}&lt;/label&gt;
        &lt;input className="form-control" onChange={onChange} placeholder={placeholder} /&gt;
    &lt;/div&gt;
)

const TestOutput = ({ first, last }) =&gt; &lt;h3&gt;Hello {[last ? first || 'Mr.' : first, last &amp;&amp; ' ' + last].join('') || 'Anonymous'}&lt;/h3&gt;
    
ReactDOM.render(&lt;TestBox/&gt;, document.getElementById('container'));</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.6.0/umd/react.production.min.js"&gt;&lt;/script&gt;
&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.6.0/umd/react-dom.production.min.js"&gt;&lt;/script&gt;
&lt;div id='container'&gt;</code></pre>
</div>
</div>


<hr>

<p>React has evolved quite a lot since 2015, so here is my answer.<br>
I will be using <code>class</code> (statefull) and <code>function</code> (stateless) components for this answer.</p>

<p>Let's take a look at your ouput component first.  </p>

<p>It should print out <code>Hello</code> followed by the first and last name, which can be done with a single line component and an array containing the name props that we will <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join" rel="nofollow noreferrer"><code>join</code></a> :</p>

<pre><code>const TestOutput = ({ first, last }) =&gt; &lt;h3&gt;Hello {[first, last].join('')}&lt;/h3&gt;
</code></pre>

<p>If both names are empty, the result should be <code>Anonymous</code>, for that we will use the <code>||</code> operator :</p>

<pre><code>{[last: first].join('') || 'Anonymous'}
</code></pre>

<p>And now, display <code>Mr.</code> if there is a last name, but not the first :</p>

<pre><code>[last ? first || 'Mr.' : first, last &amp;&amp; ' ' + last]
</code></pre>

<p><em>Why isn't the space char always added to the last name ?</em></p>

<p>If the user does not put anything in the <code>last name</code> input, a space would be generated anyway, and <code>Anonymous</code> would never be shown since the generated string could not be empty.</p>

<p>Final output :</p>

<pre><code>const TestOutput = ({ first, last }) =&gt; &lt;h3&gt;Hello {[last ? first || 'Mr.' : first, last &amp;&amp; ' ' + last].join('') || 'Anonymous'}&lt;/h3&gt;
</code></pre>

<p>The <code>TestInput</code> components will be quite similar to the one made in the question, but with an up-to-date syntaxing using a stateless component :</p>

<pre><code>const TestInput = ({ id, label, onChange, placeholder }) =&gt; (
    &lt;div className="form-group"&gt;
        &lt;label htmlFor={id}&gt;{label}&lt;/label&gt;
        &lt;input className="form-control" onChange={onChange} placeholder={placeholder} /&gt;
    &lt;/div&gt;
)
</code></pre>

<p>And the last part, the <code>TestBox</code>. This component will still have the last and first name in its state and has to be a class (statefull) component :</p>

<pre><code>class TestBox extends React.Component {
    constructor(props) {
        super(props)

        this.state = {
            firstName: '',
            lastName: ''
        }
    }
</code></pre>

<p>A single function will be responsible for getting both input fields change, and receive which field sent an update in its first value :</p>

<pre><code>handleInput = field =&gt; ev =&gt; {
    this.setState({ [field]: ev.target.value })
}
</code></pre>

<p>The value in the state that will get updated depends on the first parameter set, before being fired by an event.</p>

<p>Now, the rendering.  </p>

<p>Since both your inputs are fairly similar, I preferred mapping them over an array containing their differences, but this is up to your preferences, as it may decrease readability :</p>

<pre><code>{[
    ['firstName', 'First Name', 'John'],
    ['lastName', 'Last Name', 'Smith']
].map(([id, label, place]) =&gt; &lt;TestInput id={id} label={label} placeholder={place} onChange={this.handleInput(id)} key={id} /&gt;)}
</code></pre>

<p>Each input will have the given id, placeholder, label and preconfigured <code>handleInput</code> function.</p>

<p>The remaining rendering function will now look like the following :</p>

<pre><code>render(){
    const { firstName, lastName } = this.state

    return (
        &lt;div className="test-box"&gt;
            {[
                ['firstName', 'First Name', 'John'],
                ['lastName', 'Last Name', 'Smith']
            ].map(([id, label, place]) =&gt; &lt;TestInput id={id} label={label} placeholder={place} onChange={this.handleInput(id)} key={id} /&gt;)}
            &lt;TestOutput first={firstName} last={lastName} /&gt;
        &lt;/div&gt;
    )
}
</code></pre>

<p>I dod not include it in my snippet but the new <code>propType</code> syntax would look like the following for <code>TestInput</code> :</p>

<pre><code>TestInput.propTypes = {
    id: PropTypes.string.isRequired,
    label: PropTypes.string.isRequired,
    placeholder: PropTypes.string
}
</code></pre>

<p><a href="https://reactjs.org/docs/typechecking-with-proptypes.html" rel="nofollow noreferrer">More information about new <code>propTypes</code></a></p>
    </div>