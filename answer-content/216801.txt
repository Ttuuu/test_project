<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If you updated your repo to contain a make/ant/maven/graven build file, I would be able to easily change and run your code. Without being able to reproduce your build environment, I can make some general comments.</p>

<h2>Don't roll your own builder</h2>

<p>Consider using Google's <a href="https://github.com/google/CallBuilder" rel="nofollow noreferrer">CallBuilder</a> library to save a lot of boilerplate code. The library makes it easy to make a builder simply by annotating your constructor. You may have to implement a custom "style" class to duplicate the exact behavior you have in your custom builder; however, I think it's worthwhile. Using code generation to make builders saves you from a lot of repetitive, error-prone code, and helps enforce consistent builder interfaces across your project.</p>

<p>In fact, writing CallBuilder style classes for all of the Gauva data structures would be an extremely cool and useful project. But that is beyond the scope of this algorithm.</p>

<h2>Make the constructor for <code>ViterbiModel</code> more accepting</h2>

<p>Something like:</p>

<pre><code>private ViterbiModel(Map&lt;? extends S, Double&gt; initialDistributions, 
            Table&lt;? extends S, ? extends S, Double&gt; transitionProbabilities,
            Table&lt;? extends S, ? extends T, Double&gt; emissionProbabilities)
</code></pre>

<p>Then, inside of the constructor, use the <code>ImmutableMap.copyOf</code> and <code>ImmutableTable.copyOf</code> methods to make and store immutable copies. These same changes need to be extended appropriately to the builder.</p>

<h2>Make a <code>ViterbiObservations</code> class</h2>

<p>It should contain the list of observations. It should provide a Builder. This is for uniformity, matching the <code>VirterbiModel</code> class.</p>

<h2>Perform validation in constructors</h2>

<p>Validate the <code>ViterbiModel</code> and <code>VirterbiObservations</code> objects separately and in the appropriate constructors. Failing early in such a case is an important way to communicate with the user. If they manage to create a <code>VirterbiModel</code> without throwing any exceptions, it should be a valid one.</p>

<h2>Be more accepting of generic types</h2>

<p>You should have</p>

<pre><code>ViterbiMachine(ViterbiModel&lt;S, ? extends T&gt; model, ImmutableList&lt;T&gt; observations)
</code></pre>

<p>Since a series of child observations could be emitted in a model consisting of parent types.</p>

<h2>Extend <code>ImmutableTable</code></h2>

<p>The <code>getOrDefault</code> and <code>rowOrDefault</code> methods you write are nice. However, they should belong to the table class itself. So, extend <code>ImmutableTable</code> to a class that has these methods.</p>

<h2>Inline the <code>initialize()</code> method</h2>

<p>It is unclear why this is not part of the constructor.</p>

<h2>Make a utility class</h2>

<p>Some of your smaller functions have very little to do with <code>VirterbiMachines</code>. Move them to another class.</p>

<h2>Do not force <code>S, T</code> to be enum types</h2>

<p>I don't understand why these need to be enums. Might someone want to create a <code>VirterbiMachine</code> where, say the states were integers and the outputs were strings? Surely your code could allow this.</p>
    </div>