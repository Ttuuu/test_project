<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>On the idiomatic front this code is excellent. All looks good.</p>

<p>You should use a priority queue to implement Dijkstra's algorithm. It is both far more efficient, and also more concise. I would go so far as to say that the beauty of Dijkstra's algorithm is underpinned by the priority queue data structure (which in turn is underpinned by the concept of a heap). There is much written about these topics, so I won't expand on that here unless it is not clear why. Java has a priority queue implementation that you can use via interop.</p>

<p>You only need a open list of candidates (in a priority queue so you can efficiently take the next minimum distance expansion, efficiently update shorter candidates as discovered, and remove visited nodes), and one map of visited nodes parents (you currently have a set and a parents map, the set is just the keys of parents).</p>

<p>The add/update/remove operations on a priority queue don't need to be implemented by you (they are methods of the datastructure), so less code :)</p>
    </div>