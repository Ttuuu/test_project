<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In your first solution you are traversing the list 3 times, whereas in the second solution only once. Given the functional-tag, I’d say you’re after the <code>reduce</code> function:</p>

<pre><code>const flatten = (acc, x) =&gt; acc.concat(x)

const pivotPartition = (pivot, ary) =&gt; {
  const toOrdered = (triplet, n) =&gt; {
    let [less, equal, greater] = triplet

    switch(true) {
      case n &lt; pivot: less.push(n); break
      case n &gt; pivot: greater.push(n); break
      default: equal.push(n)
    }

    return triplet
  }

  return ary.reduce(toOrdered, [[], [], []]).reduce(flatten)
}
</code></pre>

<p>If you want to sort the subarrays as well, then the whole thing is just a <code>ary.sort((a, b) =&gt; a - b)</code>, although as it is mutating the list, it isn’t a functional solution.</p>
    </div>