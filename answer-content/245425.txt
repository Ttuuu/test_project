<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Observation</h2>
<p><strike>There is no destructor (so this simply leaks memory when it is done).</strike></p>
<p>The fact that it leaks is probably a blessing as it does not obey the rule of three/five. So copying or assigning this object is probably not going to work the way you want it (though it is hard to tell what that is since you don't document it). Either implement these methods or delete them.</p>
<p>Overall I find the code overall dense to read. Please add some vertical white space and group things logically. I also hate the useless comments. Comments should not explain the code (the code explains the code with good use of variable/function names). If you do this you have to deal with comment written over time. Good comments explain WHY.</p>
<pre><code>        //pointer to the previous physical block header  (Are you sure this is necessary!)
        BlockHeader* previousPhysicalBlock;
</code></pre>
<p>Would love to see some unit tests that validate that the state is correct after usage. This is something you definitely want to test a lot before use.</p>
<h2>Code Review</h2>
<p>This is a bit screwy:</p>
<pre><code>#if _DEBUG
#include &lt;iostream&gt;
#include &lt;ostream&gt;

#ifndef Log
#define Log(x) std::cout &lt;&lt; x &lt;&lt; std::endl;
#endif

#else               // Notice this else belongs to the top _DEBUG
                    // Notice that if _DEBUG is defined you test
                    // for the existence of Log but not here!
#define Log(x)
#endif
</code></pre>
<hr>
<p>This looks like a bug.</p>
<pre><code>        BlockHeader* currentNode = head;
        while (currentNode != nullptr &amp;&amp; currentNode-&gt;data.managedBlocks &lt; requestedBlocks+getHeaderBlockCount()) {
</code></pre>
<p>What happens when the head is not part of the "Free" block chain. You probably need one more statement:</p>
<pre><code> BlockHeader* currentNode = head;
 if (!currentNode-&gt;isFree) {
     currentNode = currentNode-&gt;nextFreeBlock;
 }
</code></pre>
<p>I would move those two lines into its own self documenting function.</p>
<pre><code> BlockHeader* getHeadOfFreeList()
 {
         ....
 }
</code></pre>
<hr>
<p>This looks like another bug:</p>
<pre><code>   void coalesce(BlockHeader* left, BlockHeader* right) {

        ....
        //relink so right-&gt;next-&gt;previous points to left
        if (right-&gt;data.nextFreeBlock != nullptr) {
            right-&gt;data.nextFreeBlock-&gt;data.previousFreeBlock = left;
        }
  }
</code></pre>
<p>You just coalesced blocks. Does that not mean that the physical block does not exist any more? You removed the physical block from this blocks chain. Why are you not removing if from the next blocks chain. Your physical chains are no longer consistent in both directions.</p>
<hr>
<p>The pointer arithmetic gets overly complicated hard for me to follow at this point. So I will assume it is wrong until you have unit tests to prove it is correct.</p>
<hr>
<p>The design is a bit simplistic. You only have a physical list and a free list.</p>
<p>Most designs for pools I see is a list of sizes. With each size being a list of free chunks. So when a chunk is freed you add it to a list of chunks of that size. When an allocation is done you try and re-use already chunked memory of the correct size only splitting of unused memory if chunks of the correct size are not available.</p>
<p>This reduces the amount of searching you have to do (you don't traverse the whole list looking for free chunks that are not available).</p>
<p>You can optimize splitting. If there is no free are left try splitting a chunk that is twice the size into two chunks of a useful size (leaves you with less small bits lying around that are unusable, which reduces collation calls).</p>
    </div>