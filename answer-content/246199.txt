<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are a number of things that may help you improve your code.</p>
<h2>Separate interface from implementation</h2>
<p>It makes the code somewhat longer for a code review, but it's often very useful to separate the interface from the implementation.  In C++, this is usually done by putting the interface into separate <code>.h</code> files and the corresponding implementation into <code>.cpp</code> files.  It helps users (or reviewers) of the code see and understand the interface and hides implementation details.  The other important reason is that you might have multiple source files including the <code>.h</code> file but only one instance of the corresponding <code>.cpp</code> file.  In other words, split your existing <code>.cpp</code> file into a <code>.h</code> file and a <code>.cpp</code> file.  The current code <code>#include</code>s <code>.cpp</code> files which is incorrect and leads to problems.</p>
<h2>Use include guards</h2>
<p>There should be an include guard in each <code>.h</code> file.  That is, start the file with:</p>
<pre><code>#ifndef TREENODE_H
#define TREENODE_H
// file contents go here
#endif // TREENODE_H
</code></pre>
<p>The use of <code>#pragma once</code> is a common extension, but it's not in the standard and thus represents at least a potential portability problem.  See <a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#sf8-use-include-guards-for-all-h-files" rel="nofollow noreferrer">SF.8</a>  Also, it should never go in a <code>.cpp</code> file per the advice above.</p>
<h2>Omit unused variables</h2>
<p>Because <code>argc</code> and <code>argv</code> are unused, you could use the alternative form of <code>main</code>:</p>
<pre><code>int main ()
</code></pre>
<h2>Don't use <code>std::endl</code> when '\n' will do</h2>
<p>Using <code>std::endl</code> emits a <code>\n</code> and flushes the stream.  Unless you really need the stream flushed, you can improve the performance of the code by simply emitting <code>'\n'</code> instead of using the potentially more computationally costly <code>std::endl</code>.</p>
<h2>Use <code>const</code> where practical</h2>
<p>I would not expect the <code>tokenize</code> or <code>JSONifyArrayOfTokens</code> routines to alter the data structures passed to them and indeed they do not.  You should make this expectation explicit by using the <code>const</code> keyword:</p>
<pre><code>static std::vector&lt;TreeNode&gt; tokenize(const std::string&amp; input);
static std::string JSONifyArrayOfTokens(const std::vector&lt;TreeNode&gt;&amp; tokenizedString);
</code></pre>
<p>Similarly, the <code>interpretAsACompileTimeConstant()</code> function does not alter the underlying object, so it should also be declared <code>const</code>.  The syntax is a little different for this:</p>
<pre><code>int interpretAsACompileTimeConstant() const;
</code></pre>
<p>Not only will the code become more robust, but it will also likely run faster because it can avoid making temporary copies.</p>
<h2>Improve your constructors</h2>
<p>The <code>TreeNode</code> class has this constructor:</p>
<pre><code>TreeNode::TreeNode(std::string newText, int newLine, int newColumn) {
    *this = TreeNode(); // For some weird reason, just "TreeNode()" won't do the
                        // trick.
    text = newText;
    lineNumber = newLine;
    columnNumber = newColumn;
}
</code></pre>
<p>A more modern style for your constructor might be this:</p>
<pre><code>TreeNode::TreeNode(std::string newText, int newLine, int newColumn) :
    text{newText},
    lineNumber{newLine},
    columnNumber{newColumn}
{}
</code></pre>
<p>The <code>basicDataTypeSizes</code> and <code>children</code> member elements will automatically be initialized to empty containers.</p>
<h2>Use "range <code>for</code>" and simplify your code</h2>
<p>Having test code is good, both for you to make sure your code works, and also for reviewers to better understand what you intend.  However, these tests could be simplfied a great deal.  Here's one of the tests as it exists now, complete with the <code>tests</code> definition:</p>
<pre><code>struct test { 
  std::string input, expectedResult;
};

void tokenizerTests() {
  std::vector&lt;test&gt; tests(
      {{"\"/*Comment inside a string*/\"",
        "['\"/*Comment inside a string*/\"']"},
       {"5+5", "['5','+','5']"},
       {"5+5=10", "['5','+','5','=','10']"},
       {"structureName.structureMember/3.14159265359",
        "['structureName','.','structureMember','/','3.14159265359']"},
       {"sin(pi/2)=1", "['sin(','pi','/','2',')','=','1']"},
       {"'A'+2='C'", "['65','+','2','=','67']"},
       {"a:=a+1; //Some random comment.\nb:=b-1;",
        "['a',':=','a','+','1',';','b',':=','b','-','1',';']"},
       {"/*This should be tokenized into\nan empty string*/", "[]"},
       {"a/*Randomly\ninserted\ncomment.*/+/*Another\nrandom\ncomment*/b",
        "['a','+','b']"},
       {"array_name:={1,1+1,1+1+1}", "['array_name',':=','{','1',',','1','+','"
                                     "1',',','1','+','1','+','1','}']"}});
  for (unsigned int i = 0; i &lt; tests.size(); i++) {
    std::string result =
        TreeNode::JSONifyArrayOfTokens(TreeNode::tokenize(tests[i].input));
    if (result != tests[i].expectedResult) {
      std::cerr &lt;&lt; "Internal compiler error: Tokenizer test failed: \""
                &lt;&lt; tests[i].input &lt;&lt; "\" tokenizes into \"" &lt;&lt; result
                &lt;&lt; "\" instead of to \"" &lt;&lt; tests[i].expectedResult &lt;&lt; "\"!"
                &lt;&lt; std::endl;
      std::exit(1);
    }
  }
}
</code></pre>
<p>There are a number of ways this could be improved.  First, you could use the C++11 "range <code>for</code>" for the loop:</p>
<pre><code>for (const auto&amp; thisTest : tests) {
    std::string result =
        TreeNode::JSONifyArrayOfTokens(TreeNode::tokenize(thisTest.input));
    if (result != thisTest.expectedResult) {
      std::cerr &lt;&lt; "Internal compiler error: Tokenizer test failed: \""
                &lt;&lt; thisTest.input &lt;&lt; "\" tokenizes into \"" &lt;&lt; result
                &lt;&lt; "\" instead of to \"" &lt;&lt; thisTest.expectedResult &lt;&lt; "\"!"
                &lt;&lt; std::endl;
      std::exit(1);
    }
}
</code></pre>
<p>If you're using a C++17 compiler, the code can be even nicer:</p>
<pre><code>for (const auto&amp; [input, expected] : tests) {
    std::string result = TreeNode::JSONifyArrayOfTokens(TreeNode::tokenize(input));
    if (result != expected) {
      std::cerr &lt;&lt; "Internal compiler error: Tokenizer test failed: \""
                &lt;&lt; input &lt;&lt; "\" tokenizes into \"" &lt;&lt; result
                &lt;&lt; "\" instead of to \"" &lt;&lt; expected &lt;&lt; "\"!"
                &lt;&lt; std::endl;
      std::exit(1);
    }
}
</code></pre>
<h2>Don't Repeat Yourself (DRY)</h2>
<p>The tests are all doing the same thing.  That is, they apply some transformation to the input code and verify that the output is what was expected.  Rather than repeating that same code multiple times, better would be to consolidate it into a single location:</p>
<pre><code>class TestCollection {
    std::string name;
    std::string (*func)(const std::string&amp;);
    struct test {
        std::string input; 
        std::string expectedResult;
    };
    std::vector&lt;test&gt; tests;
public:
    TestCollection(std::string name, std::string (*func)(const std::string&amp;), std::vector&lt;test&gt; tests) : name{name}, func{func}, tests{tests} {}
    bool operator()() const {
        bool result{true};
        for (const auto&amp; [input, expected] : tests) {
            std::string result = func(input);
            if (result != expected) {
                result = false;
                std::cerr &lt;&lt; "Internal compiler error: " &lt;&lt; name &lt;&lt; " failed: \""
                &lt;&lt; "with input \"" &lt;&lt; input 
                &lt;&lt; "\", expected \"" &lt;&lt; expected &lt;&lt; "\" but got \"" &lt;&lt; result &lt;&lt; "\"!\n";
            }
        }
        return result;
    }
};
</code></pre>
<p>Using this, the tests each become data structures:</p>
<pre><code>TestCollection parsingVariableDeclarationsTests{"Variable declarations parser test",
    [](const std::string&amp; input) -&gt; std::string { 
        return TreeNode::parseVariableDeclaration( TreeNode::tokenize(input))[0]
                             .getLispExpression();
    },
      {{"Integer32 some_array[80*23],array_width:=80,array_height:=23",
        "(Integer32 (some_array (* 80 23)) (array_width (:= 80)) (array_height "
        "(:= 23)))"}}
};
</code></pre>
<p>The overall test function then becomes:</p>
<pre><code>bool runTests() {
  return tokenizerTests() 
    &amp;&amp; simpleParserTests() 
    &amp;&amp; interpreterTests() 
    &amp;&amp; parsingVariableDeclarationsTests()
    &amp;&amp; parserTests();
}
</code></pre>
<p>Note also that the function returns a boolean value instead of calling <code>exit(1)</code>.</p>
<h2>Make data members <code>private</code></h2>
<p>None of the data members of the <code>TreeNode</code> class need to be public, so they ought to be made private.</p>
<h2>Avoid the use of iso646 keywords</h2>
<p>The alternate keywords <code>"or"</code>, <code>"and"</code>, etc. still exist in C++, but you should probably not use them.  Instead use <code>||</code> and <code>&amp;&amp;</code>.  See <a href="https://codereview.stackexchange.com/questions/68018/bfs-shortest-path-program/68071#68071">BFS shortest path program</a> for more detail.</p>
<h2>Write efficient code</h2>
<p>I was surprised by how slowly this code ran until I looked more closely.  Here's just one clause from the tokenizer:</p>
<pre><code>} else if (regex_match(input.substr(i, 1), regex("\\d|[a-z]|[A-Z]|_")) and
           regex_match(
               tokenizedExpression.back().text,
               regex("(^(\\d|_|[a-z]|[A-Z])*$)|(^(\\d|_|[a-z]|[A-Z])+\\.("
                     "\\d|_|[a-z]|[A-Z])*$)")) and
           !areWeInAString and !areWeInAComment) // Names and numbers
{
    currentColumn++;
    tokenizedExpression.back().text += input[i];
} 
</code></pre>
<p>There is a lot going on here, and most of it is extremely inefficient.  First, all four of the clauses in the <code>if</code> have to be true to execute the lines below.  However, the simple boolean value comparisons are much faster to execute than the <code>regex_match</code> functions.  For that reason, it would likely be more efficient to reorder them so that the "cheap" tests are done first.</p>
<p>Next, let's look at each <code>regex_match</code> individually.  The first inefficiency is that a temporary string is created via <code>input.substr(i, 1)</code>.  That requires a memory allocation and subsequent deallocation all to simply get a single character.  The next inefficiency is that a dynamic regex is created (and destroyed) each time.  Third, using a <code>regex</code> for a single character is almost never an efficient solution.  So let's rewrite the first clause:</p>
<pre><code>(std::isalnum(input[i]) || input[i] == '_')
</code></pre>
<p>The next clause is this:</p>
<pre><code>regex_match(tokenizedExpression.back().text,
   regex("(^(\\d|_|[a-z]|[A-Z])*$)|(^(\\d|_|[a-z]|[A-Z])+\\.("
         "\\d|_|[a-z]|[A-Z])*$)")) 
</code></pre>
<p>This is looking at the last word in the tree to decide if it might be an identifier.  This complex regex is created and destroyed for every call and that last word is rescanned anew for every character in the input string.  That's very inefficient!  A better way to do it would be to keep track of the last token's type and simply check that.  If it could be an identifier, for instance if we had scanned the "Inte" portion of "Integer32" then it still could be an identifier after we add the qualified character.  In other words, just as with the booleans <code>areWeInAString</code> and <code>areWeInAComment</code>, you could keep a boolean <code>inId</code> and rewrite the entire <code>if</code> clause like this:</p>
<pre><code>  } else if (!areWeInAString 
            &amp;&amp; !areWeInAComment 
            &amp;&amp; (std::isalnum(input[i]) || input[i] == '_')
            &amp;&amp; (inId || (tokenizedExpression.back().text.size() == 0)))
  {
</code></pre>
<p>Doing so on my machine drops the execution time from 2.520 seconds to 0.544 seconds, for a 5x speedup.</p>
<h2>Rethink the approach</h2>
<p>Tokenizing like this is often much better done via a <em>state machine</em>.  See <a href="https://codereview.stackexchange.com/questions/171863/overhauled-tokenizer-for-markargs/172391#172391">this answer</a> for an example of how this can be done.  A state machine makes the code neater and easier to reason about as well as much faster than using regex in many cases.</p>
<h2>Summary</h2>
<p>I haven't had time to go through the parser, but this should give you plenty to work on for now.  C++ is indeed a very useful and efficient language, but it requires some expertise to use it effectively.  I'd recommend <a href="https://www.stroustrup.com/Tour.html" rel="nofollow noreferrer">this book</a> if you haven't already studied the language much.</p>
    </div>