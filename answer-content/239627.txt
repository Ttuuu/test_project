<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In addition to the valuable answer already given:</p>

<ul>
<li>use JavaDoc for comments describing method/class</li>
<li>do not use <code>float</code> or <code>double</code> for monetary values (calculation inaccuracies!)</li>
<li>use existing collection implementations of Java, as <code>ArrayList</code> or at least wrap them</li>
<li>learn the advantages of Single Responsibility Principle (<em>SRP</em>) </li>
</ul>

<p>Here some improvements on modelling and design:</p>

<ul>
<li>use <code>BigDecimal</code> for <strong>monetary values</strong> and store currency (at least in the names)</li>
<li>use separate class for storing and calculating <strong>summary</strong> information (<strong>aggregation</strong>)</li>
<li>use separate class for <strong>formatting</strong> (as everything UI related)</li>
</ul>

<h3>Monetary values</h3>

<p>Monetary values (e.g. prices and costs) can be modeled in different, disputed ways in Java:</p>

<ul>
<li>using <code>BigDecimal</code> (see also <a href="https://en.wikipedia.org/wiki/Decimalisation" rel="nofollow noreferrer">Decimalisation</a></li>
<li>using <code>Integer</code> (or <code>int</code>) by representing them as non-fractional numbers by their minor-units (e.g. cents). See also <a href="https://stackoverflow.com/questions/18934774/what-are-the-downsides-to-storing-money-values-as-cents-minor-units">downsides</a>.</li>
<li>wrapping them in their own types (class) with attached currency-symbol (see <code>Locale</code>)</li>
<li>using Java's new "Money &amp; Currency API" (JSR-354). See <a href="https://www.baeldung.com/java-money-and-currency" rel="nofollow noreferrer">tutorial</a>.</li>
</ul>

<p>Though for simple cases <code>BigDecimal</code> or even <code>int</code> will do a good job. Simple like single currency (no conversion, single representation) with calculating sums only (no division, tax, etc.).</p>

<h3>Aggregation and Summary</h3>

<p>Since the <strong>total costs</strong> or <strong>count of songs</strong> as well as <strong>average price</strong> are all aggregated facts of a collection of songs, they should be calculated (technical term: aggregated) separately (see SRP). Together they have the purpose of a "summary".</p>

<p>So extract them in a class <code>SongCollectionSummary</code> which holds all summarized information, and may also do all the calculation/aggregation.</p>

<pre class="lang-java prettyprint-override"><code>public class SongCollectionSummary {
  private BigDecimal totalCostsInUSD;
  private int songsCount;
  private String description;

  public static summarize(Collection&lt;Song&gt; songs, String description) {
    // use only the factory method to create a summary
    SongCollectionSummary summary = new SongCollectionSummary(description);
    summary.songsCount = songs.size();
    // add each 
    for (Song song : songs) {
      summary.totalCostsInUSD.add(song.getPrice())
    }

    return summary;
  }

  private SongCollectionSummary(String description) {
    this.description = description;
    this.totalCostsInUSD = BigDecimal.ZERO;
    this.songsCount = 0;
  }

  // only getters for the 3 private fields

  public BigDecimal getAveragePriceInUSD() {
    // prevent division by zero
    if (songsCount &gt; 0) {
      return totalCostsInUSD.divide(songsCount);
    }
    // could also throw an exception here, since no songs, no average
    return null;
  }

}
</code></pre>

<h3>Formatting</h3>

<p>This is part of the UI and belongs in a separate class, better in a separate module (pacakge).
Responsibility of the class is to build a representation of the domain model (e.g. single <code>Song</code> or  collection of songs).</p>

<p>To produce a textual representation there could be a class <code>SongFormatter</code>.
This class should allow to format a <code>Song</code> or a collection of many (parameter) and return a <code>String</code> (textual representation).</p>

<pre class="lang-java prettyprint-override"><code>public class {
  // used with static methods, must also be static
  // a constant named in UPPER_CASE
  public static final NumberFormat CURRENCY_FORMAT = NumberFormat.getCurrencyInstance();

  public static String format(Song song) {
    // using an adjustable template to arrange text
    return String.format("%s\t%d\t%s", CURRENCY_FROMAT.format(song.getPrice()), song.getTackId(), song.getTitle());
  }

  public static String format(Collection&lt;Song&gt; songs, String summaryText) {
    // using a builder to append songs (or summary) dynamically
    StringBuilder sb = new StringBuilder();
    sb.append("Song list: ");
    // helding the summary separately and inject customisable as parameter
    sb.append(summaryText);
    // format each song by calling dedicated method (if collection empty, end here)
    for (Song song : songs) {
      sb.append("\n").append(format(song));
    }

    return sb.toString();
  }

}
</code></pre>

<p>You will find some missing spots above:</p>

<ul>
<li><code>summaryText</code> needs to be formatted by a separated class or method that may use calculated <code>SongCollectionSummary</code> (as explained before)</li>
<li>if collection is empty, there will a line <code>Song list:</code> without any songs following, hence take care when calling the method and passing an empty <code>ArrayList</code> of songs (e.g. adjust <code>summaryText</code> to <code>"[EMPTY] No songs added!"</code></li>
</ul>

<p>Hope you will discover some benefits and make use valuable parts to improve your design.</p>
    </div>