<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Despite of very simple and "verbose" initial implementation it has a bunch of issues:</p>

<ul>
<li><p><code>r_p_s = ['Rock', 'Paper', 'Scissors']</code> is better defined as constant of immutable values</p></li>
<li><p><code>result</code> is accessed within <code>response()</code> function body as a global variable.<br>Instead, it's better called within the function <em>on demand</em>:</p>

<pre><code>def response():
    result = game()
    ...
</code></pre></li>
<li><p>instead of arbitrary strings concatenation <code>... + " vs. " + ...</code>, <code>"Roll: " + "\n" + result</code> <br>- use flexible <code>f-string</code> formatting.<br>
For ex.: <code>print(f"Roll: \n{result}")</code></p></li>
<li><p>the conditions like:</p>

<pre><code>if "Scissors vs. Paper" == result or \
    "Paper vs. Scissors" == result:
    print("\nScissors beats Paper")
</code></pre>

<p>are too verbose and hard-coded to be manageable and reliable</p></li>
</ul>

<hr>

<p>Now, when you realize the bad things described above and wonder if there a manageable and advanced approach - take and consider the one below, which is OOP approach representing <strong><code>RPSGame</code></strong> class (as a main class) and powered by <a href="https://docs.python.org/3/library/enum.html" rel="noreferrer"><code>enum</code></a> classes to represent the crucial <em>shapes</em>.<br>
The new implementation itself is pretty descriptive (I hope). Enjoy!</p>

<pre><code>import random
from enum import Enum


class RPSGame:
    class Shape(Enum):
        R = 'Rock'
        P = 'Paper'
        S = 'Scissors'

    # winning outcome bindings
    WIN_OUTCOMES = {
        (Shape.P, Shape.R), (Shape.R, Shape.S), (Shape.S, Shape.P),
    }

    @staticmethod
    def choice():
        shapes = list(RPSGame.Shape)
        return random.choice(shapes), random.choice(shapes)

    def play(self):
        shape1, shape2 = self.choice()
        print(f"Roll: \n{shape1.value} vs {shape2.value}\n")

        if shape1 == shape2:
            print("Draw! Roll again.")
        else:
            # check to swap shapes to get winning output order
            if (shape1, shape2) not in RPSGame.WIN_OUTCOMES:
                shape1, shape2 = shape2, shape1
            print(f"{shape1.value} beats {shape2.value}!")


if __name__ == "__main__":
    rps = RPSGame()
    rps.play()
    rps.play()
    rps.play()
</code></pre>

<p>Sample output (from 3 plays):</p>

<pre><code>Roll: 
Paper vs Scissors

Scissors beats Paper!
Roll: 
Scissors vs Scissors

Draw! Roll again.
Roll: 
Rock vs Paper

Paper beats Rock!
</code></pre>
    </div>