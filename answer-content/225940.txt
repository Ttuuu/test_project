<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>The algorithm</h1>
<p>This algorithm creates every combination of ships and tests them one by one, including combinations that could be seen to be useless by the first choice made. For example, if the first choice is to assign a unit of weight 60 to a ship with capacity 50, then it no longer matters what the rest of the content of <code>arrayWithGeneratedNumbers</code> will be, there is no point recursively calling <code>generate</code> when there is already such a problem.</p>
<p>The solution to that is checking as much as possible as early as possible. So in <code>generate</code>, do not only check the solution when it is fully formed, check for capacity violations every time. That seems like more wasted work, but it's not a waste, it prevents a ton of recursion. If a capacity check fails early, thousands maybe millions of combinations will be skipped, by simply not generating them.</p>
<p>For example like this, using the names from below:</p>
<pre><code>private void generateAssignments(int fromIndex) {
    if (!isValidAssignment(unitAssignment))
        return;
    ...
</code></pre>
<p>Or like this:</p>
<pre><code>for (int i = 0; i &lt;= numberOfShips; i++) {
    unitAssignment[fromIndex] = i;
    if (isValidAssignment(unitAssignment))
        generateAssignments(fromIndex + 1);
}
</code></pre>
<p>A similar related trick is computing the strength early, and returning back up the recursion tree once you see that the current branch cannot result in a better solution than some solution that you already have. So this only works if there is some non-trivial solution already, and it is useful to do a simple greedy pass first to initialize with, so more of the recursion is pruned right from the start.</p>
<p>For example:</p>
<pre><code>private void generateAssignments(int fromIndex, int currentStrength, int remainingStrength) {
    if (currentStrength + remainingStrength &lt;= bestStrengthSoFar)
        return;
</code></pre>
<p>Where <code>currentStrength</code> is the sum of strengths of units that have been assigned to ships, and <code>remainingStrength</code> is the sum of strengths of units for which no choice has been made, both can be maintained easily when choices are made. That's a pretty naive technique that does not take weights into account, which you could do, for example taking the unit with the best strength-to-weight ratio for which no choice has been made, and set the remaining strength to <code>(double)remainingCapacity / unitWeight * unitStrength</code>, in essence pretending that you can fill all of the remaining capacity with the best possible unit even it it needs to be cloned and cut into pieces.</p>
<p>With pruning, the order in which choices are made matters: pruning near the root of the tree is orders of magnitude better than pruning near the leafs. A general rule of thumb is to pick the most-constrained item first, and try the least-constraining choice for it first. So in this domain, pick the heaviest unit, and put it on the biggest ship. However, we can also make use of the strengths and go for units with a high strength-per-weight ratio first, relying on the idea of filling the ships with good units first and then trying to "fill the gaps" with worse units. There are different strategies here, probably almost anything is better than not using a strategy.</p>
<h1>Naming</h1>
<p>There are several extremely generic names in this code, bordering on meaninglessness. <code>generate</code>, generate what? <code>processGeneratedNumbers</code>, what is process? What are "generated numbers"? <code>arrayWithGeneratedNumbers</code>, variable names shouldn't repeat their type and again what are "generated numbers". This is not an abstract domain where we don't know what is being generated or what the numbers mean, the data here has a specific meaning, and the methods do specific things. So you could use names such as:</p>
<ul>
<li><code>unitAssignment</code>, in the sense of assigning units to ships. Or <code>shipAssignment</code>, in the same sense.</li>
<li><code>isAssignmentValid</code>, <code>checkCapacities</code>, something like that. That's for the version that does not also update the best-solution-so-far, just pure checking for the purpose of pruning.</li>
</ul>
<p>Also I wouldn't put the unrelated <code>input</code> between two related methods.</p>
<h1>Boolean flag logic</h1>
<p>Always a contentious point, but I would say, as a rough approximation, the fewer boolean flags the better. Return when the first checks fails, no messy business with flags.</p>
    </div>