<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I can't comment on performance implications of state monad usage, but it seems like list
<a href="https://stackoverflow.com/questions/5188286/idiomatic-efficient-haskell-append">concatenation may be a bottleneck</a> (e.g. in <code>getTemporalSubformulas</code> or <code>l ++ [time]</code> in <code>update</code>).</p>

<p><strong>Minor style notes</strong></p>

<p>It is common practice to import <code>Data.Map</code> and <code>Data.Set</code> with alias and to
import main type unqualified. This makes type signatures a bit more concise.</p>

<pre><code>import qualified Data.Map as Map
import Data.Map (Map)

foo :: Int -&gt; Map Int String
foo x = Map.singleton x "hello"
</code></pre>

<hr>

<p>In <code>isTemporal</code> you can use <code>{}</code> to match on data constructor without matching
its fields. This is potentially future-proof in case of changing number of
fields in data constructor.</p>

<pre><code>isTemporal Since{} = True
isTemporal _       = False
</code></pre>

<hr>

<p>It may be a bit easier to encode intervals as a pair of bounds:</p>

<pre><code>data EndPoint t = Open t | Closed t
type Interval t = (EndPoint t, EndPoint t)

afterStart, beforeEnd :: Ord t =&gt; t -&gt; Interval t -&gt; Bool
afterStart t (Open start)   = t &gt;  start
afterStart t (Closed start) = t &gt;= start
beforeEnd  t (Open end)     = t &lt;  end
beforeEnd  t (Closed end)   = t &lt;= end

inInterval, inleqInterval :: Ord t =&gt; t -&gt; Interval t -&gt; Bool
inInterval t int = afterStart t int &amp;&amp; beforeEnd t int
inleqInterval = beforeEnd
</code></pre>

<p>It is also may be beneficial to reuse intervals
from <a href="https://hackage.haskell.org/package/data-interval" rel="nofollow noreferrer">data-interval</a> package.</p>

<hr>

<p>In <code>iinint</code></p>

<pre><code>foldr (\psi map -&gt; Data.Map.insert psi [] map) Data.Map.empty subformulas
</code></pre>

<p>can be rewritten as</p>

<pre><code>Map.fromList $ map (,[]) subformulas
</code></pre>

<hr>

<p>Try to compile with <code>-Wall</code> flag, seems like you have a lot of non-exhaustive
pattern matches, which is bad.</p>

<p>For example:</p>

<pre><code>  let lphi = case (Data.Map.lookup phi bufffs) of Just l -&gt; l
</code></pre>

<p>If you are absolutely sure that lookup won't fail here, you can rewrite it with <a href="http://hackage.haskell.org/package/containers-0.6.2.1/docs/Data-Map-Strict.html#v:-33-" rel="nofollow noreferrer"><code>Data.Map.!</code></a>:</p>

<pre><code>  let lphi = bufffs `Map.!` phi
</code></pre>

<hr>

<p><code>ddrop</code> can be rewritten to make it more explicit what parts of the list you are removing:</p>

<pre><code>ddrop ls inter tao = case dropWhile f ls of
  [] -&gt; []
  kappa:ls' -&gt; kappa : dropWhile g ls'
  where
     f kappa = not $ inleqInterval (tao - kappa) inter
     g kappa = inInterval (tao - kappa) inter
</code></pre>

<p>or a bit shorter with the <a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#view-patterns" rel="nofollow noreferrer">ViewPatterns</a> extension</p>

<pre><code>ddrop ls inter tao = case dropWhile f ls of
  | dropWhile f ls -&gt; kappa:ls' = kappa : dropWhile g ls'
  | otherwise = []
  where
     f kappa = not $ inleqInterval (tao - kappa) inter
     g kappa = inInterval (tao - kappa) inter
</code></pre>
    </div>