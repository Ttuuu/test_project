<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>So based on feedback from User319 I modified the code to only do the progress calculation at selected intervals.</p>

<ul>
<li>Firstly, no progress indication for less than 5000 decimal places on the basis that this calculation runs fast enough not to require update.</li>
<li>Calculation carried out at intervals based on observation of how many calculation cycles it took to calculate a certain number of decimal places.</li>
</ul>

<p>With the changes I measured the following:</p>

<ul>
<li>Calculating to 5000 decimal places with no user feedback took 7.63 seconds</li>
<li>Calculating to 5000 decimal places with new feedback method 41.76 seconds</li>
<li>Calculating to 5000 decimal places with old feedback method over 1400 seconds</li>
</ul>

<p>So a dramatic improvement but still a slowdown to indicate progress.  In the code below I have commented out the new method of calculating progress.  I subsequently did some more work and eliminated the need to calculate the logarithm which I believe was the major reason for the code slow down.  I have implemented a progress indicator using strings to determine how many decimal places have been calculated.  This performs much better and actually had very little to no impact on the calculation time.  The code below includes this method.</p>

<p>Finally I have subsequently realised that because I set the precision for Decimals equal to the number of decimal places I want to calculate from the beginning of the calculation; specifying more decimal places slows the calculation down form the very first step.  I will now investigate changing the precision as the calculation progresses so that higher precision doesn't slow down early steps in the calculation.  </p>

<p>Here is the code:</p>

<pre><code># A program to calculate PI to a user specified number of decimal digits
# The program uses the Chudnovsky algorithm.  
# Further details on the algorithm are availabler here:
# https://en.wikipedia.org/wiki/Chudnovsky_algorithm

# A generator which divides the user requested number of decimal places into 10% increments

def ten_percent(places):

    for i in range(int(places/10),int(places+1),int(places/10)):
        yield i

# A function which takes in a string representation of a decimal and finds the first non-zero
# digit in the string.

def first_non_zero(input_string):

    current_x = input_string.find('1')
    new_x = 0

    for i in range(2,10):
        new_x = input_string.find(str(i))
        if new_x != -1 and new_x &lt; current_x:
            current_x = new_x

    return current_x

def pi_calc(places):

    # places is user specified number of decimal places that should be calculated.

    import decimal
    import time
    import numpy as np
    start_time = time.time()

    decimal.getcontext().prec = places + 3

    # The function makes succesive calculations of PI using the algorithm.
    # The current calculated PI value is subtracted from the succesive PI value
    # If the difference is less than the 1 x 10**(-places) the result is returned

    # Initialise some variables

    current_pi = 3
    next_pi = 3
    precision = 1 * 10**(-places-3)
    counter = 1
    precision_step = ten_percent(places)
    precision_check = next(precision_step)

    # Initialise terms used in the itteration

    L = 13591409
    X = 1
    M = 1
    K = 6
    S = decimal.Decimal(M*L)/X

    next_pi = 426880*decimal.Decimal(10005).sqrt()/S

    # Perform the itterative calculation until the required precision is achieved

    while abs(next_pi - current_pi) &gt; precision:
        current_pi = next_pi

        # Calculate the next set of components for the PI approximation

        L += 545140134
        X *= -262537412640768000
        M = M*(K**3-16*K)//(counter)**3
        S += decimal.Decimal(M*L)/X
        K += 12
        counter += 1

        # Calculate the next approximation of PI

        next_pi = 426880*decimal.Decimal(10005).sqrt()/S

        # Give the user some feedback on progress of the calculation

        if places &gt;= 5000 and counter%int(places/1000*7+1) == 0:

            # This section is the slow method that is replaced with the string method below.
            # try:
            #   test_num = abs(round(np.log10(abs(decimal.Decimal(next_pi - current_pi)))))
            # except:
            #   pass

            test_num = abs(decimal.Decimal(next_pi - current_pi))
            test_string = '{0:f}'.format(test_num)
            test_num = first_non_zero(test_string)

            if test_num &gt;= precision_check:
                print('Calculation steps: ' + str(counter-1) + ' Approximate decimal places: ' + str(precision_check))
                if precision_check &lt; places:
                    precision_check = next(precision_step)      

    end_time = time.time()
    print(str(end_time-start_time))
    return decimal.Decimal(str(next_pi)[:places+2])

# Get the required number of decimal places from the user and call the function to perform
# the calculation

while True:

    try:
        places = int(input('To how many decimal places would you like to calculate PI? '))
    except:
        print('Please provide a valid integer value.')
        continue
    else:
        break

calculated_pi = pi_calc(places) 
print('The value of PI to '+ str(places) + ' decimal places is:\n%s' % (calculated_pi))
</code></pre>
    </div>