<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Based on your code, I created a class for getting cached values (without dictionaries). The usage is syntactically not so elegant as your approach, but for time-consuming operations and frequently access it may improve performance.</p>

<p>For testing performance, 2 methods (that differ in execution time) are compared with it's cached versions:</p>

<p><strong>MathOperation</strong></p>

<pre><code>public double MathOperation()
{
    return Math.Sin(Math.Sqrt(Val1 * Val2) * Math.Sqrt(Val1 * Val2));
}
</code></pre>

<p><strong>StringOperation</strong></p>

<pre><code>public double StringOperation()
{
    double value = 0;
    for (int i = 0; i &lt; 50; i++)
        value = double.Parse((Val1 * Val2).ToString());
    return value;
}
</code></pre>

<p>The table below displays the ellapsed time in milli seconds for each method depending on the number of calls. </p>

<ul>
<li>Column "XXXCached" displays the ellapsed time for constant Val1 and Val2 (full caching effect). </li>
<li>Column "XXXCached (changed values)" displays the ellapsed time if Val1 changes before each call (no caching effect).
<a href="https://i.stack.imgur.com/WN8hf.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/WN8hf.png" alt="enter image description here"></a></li>
</ul>

<p><strong>Cached class:</strong></p>

<pre><code>public class Cached
{
    public static Cached&lt;TVal&gt; Create&lt;TVal&gt;(Func&lt;TVal&gt; getter, params Func&lt;object&gt;[] dependencies)
    {
        return new Cached&lt;TVal&gt;(getter, dependencies);
    }
}

public class Cached&lt;T&gt;
{
    public static implicit operator T(Cached&lt;T&gt; property) =&gt; property.GetValue();

    private T _currentValue;
    private object[] _context;
    private readonly Func&lt;object&gt;[] _dependencies;
    private readonly Func&lt;T&gt; _getter;
    public Cached(Func&lt;T&gt; getter, params Func&lt;object&gt;[] dependencies)
    {
        _getter = getter;
        _dependencies = dependencies;
    }

    public T GetValue()
    {
        lock(this)
        {
            var context = _dependencies.Select(d =&gt; d()).ToArray();
            if (_context?.SequenceEqual(context) != true)
            {
                _context = context;
                _currentValue = _getter();
            }
            return _currentValue;
        }
    }
}
</code></pre>

<p><strong>Usage:</strong></p>

<pre><code>public class Container
{
    public Container()
    {
        MathOperationCached = Cached.Create(() =&gt; MathOperation, () =&gt; Val1, () =&gt; Val2);
        StringOperationCached = Cached.Create(() =&gt; StringOperation(), () =&gt; Val1, () =&gt; Val2);
    }
    public double Val1 { get; set; }
    public double Val2 { get; set; }

    public Cached&lt;double&gt; MathOperationCached { get; private set; }
    public Cached&lt;double&gt; StringOperationCached { get; private set; }

    public double MathOperation =&gt; Math.Sin(Math.Sqrt(Val1 * Val2) * Math.Sqrt(Val1 * Val2));
    public double StringOperation() 
    {
        double value = 0;
        for (int i = 0; i &lt; 50; i++)
            value = double.Parse((Val1 * Val2).ToString());
        return value;
    }
}
</code></pre>

<p><strong>Conclusion:</strong></p>

<p>For most mathematical operations, it is faster to recalculate the result each time. For other time-consuming operations that are frequently accessed, it may may be faster to cache the result. However, such cases are so rare (IMHO), that there is no need for a special class. The availability of such a class misleads to use it also for operations that are faster without such kind of caching. In addition, implementing custom caching (for instance by setting a flag in the setter of the depending properties) is even faster.</p>
    </div>