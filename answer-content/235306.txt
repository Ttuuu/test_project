<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>See
<a href="https://stackoverflow.com/questions/1100311/what-is-the-ideal-growth-rate-for-a-dynamically-allocated-array">this Stackoverflow answer</a> for
a discussion on the optimal growth factor for dynamic
arrays. The gist of it is that it depends, but growth
factors around the golden ratio are easier for the memory allocator to
handle. I'd recommend using 1.5 because it is easy to implement:</p>

<pre><code>DEST-&gt;cap += DEST-&gt;cap / 2
</code></pre>

<p>It likely fares worse on artifical benchmarks but better on real
workloads. This requires that the minimum capacity of the dynamic
array is 2 which is reasonable. But a more realistic minimum size
likely should be 8 or 16 since
the <a href="https://prog21.dadgum.com/179.html" rel="noreferrer">minimum malloc size</a> is 32
bytes.</p>

<p>In <code>aAppend</code> you are always realloc:ing which will cause performance
to suffer if many small dynamic arrays are collected into one big one
in a loop. Instead, you want something like:</p>

<pre><code>size_t req = DEST-&gt;size + X-&gt;size;
if (req &gt; DEST-&gt;cap) {
    aResize(DEST);
}
memcpy(DEST-&gt;data + DEST-&gt;size, X-&gt;data, X-&gt;size * X-&gt;typeSize);
DEST-&gt;size = req;
</code></pre>

<p>The last thing I'd change is the alignment of the capacity to a power
of two in <code>aInit</code>. On realistic workloads, a good chunk of all
variable arrays never grow so the alignment just wastes space. But
if you insist on alignment, this function is better than the loop:</p>

<pre><code>static inline int
next_pow2(int v) {
    v--;
    v |= v &gt;&gt; 1;
    v |= v &gt;&gt; 2;
    v |= v &gt;&gt; 4;
    v |= v &gt;&gt; 8;
    v |= v &gt;&gt; 16;
    v++;
    return v;
}
</code></pre>

<p>I also wonder why you are using macros when C99 has inline functions?
They have many advantages in comparison to code macros.</p>
    </div>