<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Welcome to Code Review! This is an interesting project and hopefully the information below is helpful. By the way, some of the statements and questions in the post (e.g. "<em>I can't get it to draw correctly. Sometimes it can't detect collisions.</em>" and "<em>How should I approach the arrow tip thing?</em>") could be perceived as making the post not <a href="https://codereview.stackexchange.com/help/on-topic">on-topic</a> on this site but the suggestions below pertain to the existing code.</p>
<p>There are fourteen variables declared with <code>const</code> though that does not mean that they are immutable - it just means they cannot be re-assigned. Properties of objects declared with <code>const</code> can be updated unless <code>Object.freeze()</code> is called on the object when it is assigned.  It is recommended that <code>const</code> be the default keyword used and then when re-assignment is deemed necessary switch to using <code>let</code>. There are very few reasons to use <code>var</code>.</p>
<p>Typically code in C-based languages
follows a convention where constants are named in ALL_CAPS. This code has <code>CANVAS_CLICKED</code> but that is not a constant. For the sake of readability use a consistent convention like <code>camelCase</code> or <code>snake_case</code> for that variable like the other variables. Additionally, Uppercase names are often reserved for classes, so while <code>Ball</code> is a class, the array <code>Balls</code> should be <code>balls</code>.</p>
<hr>
<p>There are multiple functions that call <code>document.getElementById()</code> to fetch DOM elements. While it may not be a large issue with todays browsers, it is wise to cache those references to the DOM elements in variables because each lookup can be expensive.</p>
<p><a href="https://i.stack.imgur.com/ybMID.jpg" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/ybMID.jpg" alt="bridge toll"></a></p>
<blockquote>
<p><em>”...DOM access is actually pretty costly - I think of it like if I have a bridge - like two pieces of land with a toll bridge,  and the JavaScript engine is on one side, and the DOM is on the other, and every time I want to access the DOM from the JavaScript engine, I have to pay that toll”</em><br>
    - John Hrvatin, Microsoft, MIX09, in <a href="https://channel9.msdn.com/Events/MIX/MIX09/T53F" rel="nofollow noreferrer">this talk <em>Building High Performance Web Applications and Sites</em></a> at 29:38, also cited in the <a href="https://books.google.com/books?id=ED6ph4WEIoQC&amp;pg=PA36&amp;lpg=PA36&amp;dq=John+Hrvatin+%22DOM%22&amp;source=bl&amp;ots=2Wrd5G2ceJ&amp;sig=pjK9cf9LGjlqw1Z6Hm6w8YrWOio&amp;hl=en&amp;sa=X&amp;ved=2ahUKEwjcmZ7U_eDeAhVMGDQIHSfUAdoQ6AEwAnoECAgQAQ#v=onepage&amp;q=John%20Hrvatin%20%22DOM%22&amp;f=false" rel="nofollow noreferrer">O'Reilly <em>Javascript</em> book by Nicholas C Zakas Pg 36</a>, as well as mentioned in <a href="https://www.learnsteps.com/javascript-increase-performance-by-handling-dom-with-care/" rel="nofollow noreferrer">this post</a></p>
</blockquote>
<hr>
<p>The click handler on the launcher button, i.e.</p>
<blockquote>
<pre><code>manualLauncherBtn.addEventListener('click', () =&gt; {
  performManuaLaunch(); 
});
</code></pre>
</blockquote>
<p>could be simplified to:</p>
<pre><code>manualLauncherBtn.addEventListener('click', performManuaLaunch)
</code></pre>
<hr>
<p>The loops could be update to use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of" rel="nofollow noreferrer"><code>for...of</code></a> loops in some places - e.g. instead of this loop in <code>updateBalls()</code>:</p>
<blockquote>
<pre><code>for(let i = Balls.length-1 ; i &gt;= 0; i--){       
    Balls[i].draw();
    Balls[i].move();
}
</code></pre>
</blockquote>
<p>It could be simplified to:</p>
<pre><code>for(const ball of Balls){       
    ball.draw();
    ball.move();
}
</code></pre>
<p>Though bear in mind that performance would suffer. If you did want to keep the <code>for</code> loop, the post-loop operation could be combined with the <em>while</em> expression:</p>
<pre><code>for(let i = Balls.length ; i--; /* intentionally blank */){       
</code></pre>
<p>And this loop in <code>updateCollisionsCounter()</code> could be simplified from:</p>
<blockquote>
<pre><code>for(let i = 0; i &lt; Balls.length; i++){        
    if(Balls[i].colliding) counter++;
}
</code></pre>
</blockquote>
<p>to:</p>
<pre><code>const counter = Balls.filter(b =&gt; b.colliding).length;
</code></pre>
    </div>