<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Short take …<br>
<code>most efficient way to do this</code><br>
resources including developer time</p>

<p>… of uncommented code:</p>

<p>Starting with <code>testCreateTree()</code> raises hope for a stab at <em>test first</em> - I don't see it.</p>

<p>What <em>is</em> <code>this</code> above: is there more to <em>tree</em> than <code>Node</code>, how does <em>searchable</em> manifest?</p>

<ul>
<li>there is no <code>interface</code> for <code>Node</code><br>
(and <code>testCreateTree()</code> shows one is urgently needed)<br>
(what use is <em>parent</em> of a <code>Node</code>?)<br>
(come to think of it:<br>
 what use are all the setters?<br>
<code>getNodeType()</code> could use <code>null == children</code>, and parent <code>null</code> or not)  </li>
<li>one ticklish part in designing <code>Node</code> is deciding whether construction of a <code>Node</code> with <code>null != parent</code> should add the new  <code>Node</code> to <code>parent</code>'s children.<br>
(One alternative being an instance method <code>Node addChild(name …)</code> which instantiates a child, adds it to children and returns it.)</li>
<li>the one thing <code>Node</code> provides beyond <em>data members&amp;infrastructure</em> is <em>get child by name and type</em>, which is only useful if there are to be children of identical name, differing in type, only  </li>
<li>with neither assignment nor setter invocation, the lazy instantiation of <code>children</code> doesn't work</li>
<li><p><code>getChild(name, type)</code> uses linear search (which may be justified if the expected number of children is quite small) - open coded, if using <code>Iterable.forEach()</code> (which seems to preclude "early out" - ?):<br>
if only <code>java.util.Collection</code> (or, at least, <code>Set</code>) provided for an <code>E find(Object toEqual)</code>: implement <code>equals()</code> and use that.</p>

<ul>
<li>the use of an array with one solitary element is uncalled for</li>
</ul></li>
<li><p>"The Way" to support a representation of an instance for human reception is a implementing <code>toString()</code><br>
  - the use of an array with one solitary element is uncalled for</p>

<ul>
<li>use a <code>StringBuilder</code> to build strings</li>
<li>you don't need to use <code>.toString()</code> "in a <code>String</code> context" (e.g., <code>+</code> multiple <code>String</code>s). Doing so allows <code>NullPointerException</code>s (which are sidestepped (implicitly) using <code>String.valueOf()</code>).</li>
<li>there's a way to avoid <code>&lt;some (involved) lvalue expression&gt; = &lt;same (involved) lvalue expression&gt; &lt;operator&gt; &lt;expression&gt;</code>: <em>compound assignment operators</em> (e.g., <code>&lt;(involved) lvalue expression&gt; /= &lt;expression&gt;</code>)<br>
(should prevent the funny pile of <code>'['</code>s at the beginning of the string produced by <code>printNode()</code> - that string is formatted horribly, anyway)</li>
</ul></li>
<li>for all I don't know about JSON, I'd pattern support after <code>toString()</code> or (de/)serialisation.</li>
<li><p><code>printNodeJSON()</code> is weird for duplicating <code>printNodeJSONWithoutChildren()</code>'s code instead of using it.<br>
Neither prints.</p></li>
<li><p>in <code>testCreateTree()</code>, you walk the <code>Node</code> structure, potentially searching for the same names time and again.<br>
  - the use of an array with one solitary element is uncalled for  </p>

<ul>
<li>Why provide parameters to <code>Node</code>'s constructor to go on and set deviating values?  </li>
</ul>

<p>As an alternative, separate <em>path lookup</em> and <em>tree</em>:<br>
get the index of the last path part separator (<code>'/'</code>), if any.<br>
if separator was found, use root as folder<br>
else look up the folder for the part up to that separator (path)<br>
  if not found, create folder(s recursively) linked up with its parent and enter into path-&gt;folder lookup<br>
create a leaf for the part to the end "in" that folder  </p></li>
</ul>
    </div>