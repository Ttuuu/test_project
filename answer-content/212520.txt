<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I would refactor your code and add  <code>Worksheets("Data Validation").Range("A1").Select</code> to the end to clear the selection.  </p>

<h2>Refactored Code</h2>

<p>Changes:</p>

<ul>
<li><code>ColumnLetter()</code>: Removed</li>
<li>sht2: Replaced using a <code>With</code> block.</li>
<li><code>For j</code>: Changed to <code>For item</code>.  <code>item.Value</code> is much easier to distinguish than <code>sht.Cells(j, listcol).Value</code></li>
<li><code>.Range("A1").Select</code>:  Added to clear the dreaded selected column</li>
<li>Cell reference fully qualified for the Sort ranges (I am surprised that the code would run without <code>Worksheets("Data Validation")</code> being the ActiveSheet.</li>
<li><code>sht2.Range("A2:K500").ClearContents</code>: Replaced made dynamic using <code>sht2.Range("A1:K1").CurrentRegion.Offset(1).ClearContents</code></li>
</ul>

<hr>

<pre><code>Sub PopulateAllDataValidationLists()
    Dim sht As Worksheet
    Dim i As Long, listcol As Long
    With Worksheets("Data Validation")
        Application.ScreenUpdating = False

        .Range("A1:K1").CurrentRegion.Offset(1).ClearContents
        Dim columnName As String
        Dim InvalidValues As Variant

        InvalidValues = Array("UNK", "xxx", "yyy", "zzz", "yxz", "zyx")

        Dim rColumn As Range, item As Range
        For i = 1 To 11
            columnName = .Cells(1, i).Value
            With Worksheets("Sheet 1")
                listcol = .Rows("1:1").Find(What:=columnName, LookAt:=xlWhole).Column
                Set rColumn = Range(.Cells(1, listcol), .Cells(.Rows.Count, listcol).End(xlUp))
            End With

            For Each item In rColumn
                If item.Value &lt;&gt; "" Then
                    If IsError(Application.Match(item.Value, .Columns(i), 0)) And _
                       IsError(Application.Match(item.Value, InvalidValues, 0)) And _
                       Len(item.Value) &lt;= 3 Then
                        .Cells(.Cells(.Rows.Count, i).End(xlUp).Row + 1, i).Value = item
                    End If
                End If
            Next

            .Sort.SortFields.Clear
            .Sort.SortFields.Add Key:=.Cells(2, i), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
            Dim target As Range
            Set target = Range(.Cells(2, i), .Cells(.Rows.Count, i).End(xlUp))

            With .Sort
                .SetRange target
                .Header = xlNo
                .MatchCase = False
                .Orientation = xlTopToBottom
                .SortMethod = xlPinYin
                .Apply
            End With
        Next i
        .Range("A1").Select
    End With

    Application.ScreenUpdating = True

End Sub
</code></pre>

<h2>Other Method</h2>

<p>There are many ways that you can sort the data: </p>

<ul>
<li>System.Collection.ArrayList : <a href="https://docs.microsoft.com/en-us/dotnet/api/system.collections.arraylist?view=netframework-4.7.2" rel="nofollow noreferrer">ArrayList Class (System.Collections) | Microsoft Docs</a>, <a href="http://www.snb-vba.eu/VBA_Arraylist_en.html" rel="nofollow noreferrer">VBA for smarties: ArrayList</a></li>
<li>System.Collections.SortedList: <a href="https://docs.microsoft.com/en-us/dotnet/api/system.collections.sortedlist?view=netframework-4.7.2" rel="nofollow noreferrer">SortedList Class (System.Collections) | Microsoft Docs</a>, <a href="http://www.snb-vba.eu/VBA_Sortedlist_en.html" rel="nofollow noreferrer">VBA voor smarties: SortedList</a>, <a href="https://www.robvanderwoude.com/vbstech_data_sortedlist.php" rel="nofollow noreferrer">VBScript Scripting Techniques: SortedLists - Rob van der Woude</a></li>
<li>Bubble Sort: <a href="https://bettersolutions.com/vba/arrays/sorting-bubble-sort.htm" rel="nofollow noreferrer">VBA Arrays - Bubble Sort - BetterSolutions.com</a></li>
<li>Quick Sort: <a href="https://bettersolutions.com/vba/arrays/sorting-quick-sort.htm" rel="nofollow noreferrer">VBA Arrays - Quick Sort - BetterSolutions.com</a></li>
</ul>

<p>Here is an example of how you can use an <code>ADODB.Recordset</code> to create a table in memory to sort and potentially filter the data.</p>

<h2>RSSort: Class</h2>

<pre><code>Option Explicit
Public FieldName As String
Private Const adVarChar = 200
Private Const adOpenKeyset = 1
Private Const adUseClient = 3
Private Const adLockPessimistic = 2
Private rs As Object

Private Sub Class_Initialize()
    FieldName = "Values"
    Set rs = CreateObject("ADODB.Recordset")

    With rs
        .Fields.Append FieldName, adVarChar, 255
        .CursorType = adOpenKeyset
        .CursorLocation = adUseClient
        .LockType = adLockPessimistic
        .Open
    End With
End Sub

Public Sub AddNew(ByVal item As Variant)
    rs.AddNew FieldName, item
End Sub

Public Property Get Filter() As String
    Filter = rs.Filter
End Property

Public Property Let Filter(ByVal sFilter As String)
    rs.Filter = sFilter
End Property

Public Sub Sort(Optional SortAscending As Boolean = True)
    rs.Sort = FieldName &amp; IIf(SortAscending, " ASC", " DESC")
End Sub

Public Function ToArray() As Variant
    Dim data As Variant, results As Variant
    If rs.RecordCount = 0 Then
        ReDim results(1 To 1, 1 To 1)
        ToArray = results
        Exit Function
    End If
    rs.MoveFirst
    data = rs.GetRows(rs.RecordCount)
    ReDim results(1 To UBound(data, 2) + 1, 1 To 1)

    Dim r As Long

    For r = 1 To UBound(data, 2)
        results(r + 1, 1) = data(0, r)
    Next

    ToArray = results
End Function
</code></pre>

<h2>Demo Code</h2>

<pre><code>Sub RSSorterPopulateAllDataValidationLists()
    Application.ScreenUpdating = False

    Dim data As Variant
    Dim c As Long

    With Worksheets("Data Validation")
        .Range("A1:K1").CurrentRegion.Offset(1).ClearContents
        For c = 1 To 11
            data = getValidationValues(.Columns(c), "", "UNK", "xxx", "yyy", "zzz", "yxz", "zyx")
            .Cells(2, c).Resize(UBound(data)).Value = data
        Next
    End With
End Sub

Function getValidationValues(MatchColumn As Range, ParamArray InvalidValues() As Variant) As Variant()
    Dim sorter As New RSSorter
    Dim col As Range
    Dim ColumnHeader As String
    ColumnHeader = MatchColumn.Cells(1, 1).Value
    Dim vExcluded As Variant
    vExcluded = InvalidValues

    With Worksheets("Sheet 1")
        Dim item As Range
        Set col = .Rows("1:1").Find(What:=ColumnHeader, LookAt:=xlWhole)
        If Not col Is Nothing Then
            For Each item In Range(col.Cells(2, 1), .Cells(.Rows.Count, col.Column).End(xlUp))
                If item.Value &lt;&gt; "" Then
                    If IsError(Application.Match(item.Value, MatchColumn, 0)) And _
                       IsError(Application.Match(item.Value, vExcluded, 0)) And _
                       Len(item.Value) &lt;= 3 Then
                        sorter.AddNew item
                    End If
                End If
            Next
        End If
    End With
    sorter.Sort
    getValidationValues = sorter.ToArray
End Function
</code></pre>

<h2>Edit</h2>

<ul>
<li><code>sht</code>replaced with <code>With Worksheets("Sheet 1")</code></li>
<li>Constants (adOpenKeyset, adUseClient, adLockPessimistic) added to completely convert from early binding to late binding.</li>
<li>The ADODB library <code>"Microsoft ActiveX Data Objects x.x Library"</code> removed from original workbook</li>
</ul>
    </div>