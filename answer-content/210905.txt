<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>Do not cast what <code>malloc</code> returns.</p></li>
<li><p>It is beneficial to take size of a variable, rather than a type.</p>

<pre><code>    list_t* list = malloc(sizeof *list);
</code></pre>

<p>is immune to possible changes in type of <code>list</code>.</p>

<p>Along the same line, <code>calloc</code> is preferable when allocating arrays. First, the allocated memory is in known state, and second, multiplication <code>size * number</code> may overflow. Consider</p>

<pre><code>    list-&gt;elements = calloc(initial_capacity, sizeof list-&gt;elements[0]);
</code></pre></li>
<li><p><code>list_delete</code> doesn't <code>free(list-&gt;elements)</code>.</p></li>
<li><p><code>list-&gt;elements[0]</code> is never initialized. This would cause problems with <code>list_delete</code>. Similarly, <code>list_delete</code> does not touch the last element. Along the same line, <code>list-&gt;elements[list-&gt;length]</code> gives an impression of out of bounds access.</p>

<p>An idiomatic way would be to assign the pointer first, and only then increment the length, e.g.</p>

<pre><code>    list-&gt;elements[list-&gt;length++] = element;
</code></pre></li>
<li><p><code>list_remove</code> is unnecessarily complicated. Consider breaking it up, e.g.</p>

<pre><code>    i = list_index(list, element)

    if (i == -1) {
        return false;
    }

    while (i &lt; list_length - 1) {
        list-&gt;elements[i] = list-&gt;elements[i+1];
    }
</code></pre>

<p>I also recommend to factor the last loop out into a <code>list_shift</code> method.</p></li>
</ul>
    </div>