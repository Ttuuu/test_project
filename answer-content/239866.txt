<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Interface</h1>

<p>Prefer <a href="https://en.cppreference.com/w/cpp/string/basic_string_view" rel="nofollow noreferrer"><code>wstring_view</code></a> to <code>wstring</code> for parameters to save one copy:</p>

<pre><code>ConnectionPool(std::size_t nWorkers, std::wstring_view baseUri)
</code></pre>

<p>(Whether this is effective depends on the way <code>http_client</code> works.)</p>

<blockquote>
<pre><code>void assignWork(int pidx, const Function&amp; f)
</code></pre>
</blockquote>

<p><code>std::size_t pidx</code>, I guess?  (Same for other occurrences of <code>int</code>.)</p>

<blockquote>
<pre><code>~ConnectionPool()
{
}
</code></pre>
</blockquote>

<p>Remove this destructor; the only thing it does is prevent move operations from generating.</p>

<h1>Locking</h1>

<blockquote>
<pre><code>//m2 isn't needed, right?!
//m2.lock();
</code></pre>
</blockquote>

<p>Regardless of whether it's needed, use</p>

<pre><code>std::lock_guard lock{m2};
</code></pre>

<p>so you don't have to repeat the unlock operation.</p>

<h1>Loops</h1>

<p>Don't squeeze everything on one line like this:</p>

<blockquote>
<pre><code>ConnectionPool(size_t nWorkers, std::wstring baseUri) :BaseUri(baseUri)
{
    for (size_t i = 0; i &lt; nWorkers; i++) Pool.emplace_back(http_client(baseUri), http_request(methods::GET));
}
</code></pre>
</blockquote>

<p>Directly using the constructor of <code>vector</code> looks better (and avoids reallocation):</p>

<pre><code>ConnectionPool(std::size_t nWorkers, std::wstring_view baseUri)
    : BaseUri(baseUri)
    , Pool(nWorkers, {http_client(baseUri), http_request(methods::GET)})
{
}
</code></pre>

<p>This line is especially unreadable:</p>

<blockquote>
<pre><code>for (size_t i = nDone = 0, limit = nActive = std::min(Pool.size(), WorkItems.size()); i &lt; limit; ++i) assignWork(i, f);
</code></pre>
</blockquote>

<p>Break it into lines:</p>

<pre><code>nDone = 0;
limit = nActive = std::min(Pool.size(), WorkItems.size());
for (std::size_t i = 0; i &lt; limit; ++i) {
    assignWork(i, f);
}
</code></pre>

<h1>Miscellaneous</h1>

<p><code>size_t</code> &amp;rightarrow; <code>std::size_t</code>.  And <code>#include &lt;cstddef&gt;</code> for it.</p>

<blockquote>
<pre><code>#include &lt;cpprest/http_client.h&gt;
#include&lt;string&gt;
#include&lt;vector&gt;
#include &lt;mutex&gt;
#include &lt;cpprest/filestream.h&gt;
</code></pre>
</blockquote>

<p>Two remarks:</p>

<ul>
<li><p>consistently put a space after <code>#include</code>;</p></li>
<li><p>group <code>cpprest</code> headers together.</p></li>
</ul>
    </div>