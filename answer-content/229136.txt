<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Review</h2>

<ul>
<li><p>A <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Thread.html#isInterrupted--" rel="noreferrer">Java Thread</a>'s default behavior is:</p>

<blockquote>
  <p>A thread interruption ignored because a thread was not alive at the
  time of the interrupt will be reflected by this method returning
  false.</p>
</blockquote></li>
<li>Changing the default behavior of interruption in a thread's lifecycle seems a bit tricky to me. I don't think you should override exising methods to change their specification when dealing with such common and wellknown threading constructs. </li>
<li>Instead, I would create 2 new methods, <code>requestRun()</code> and <code>requestInterruption()</code> to clearly indicate different functionality from <code>run()</code> and <code>interrupt()</code>.</li>
<li>If you do decide to override <code>run()</code> and <code>interrupt()</code> make sure to clearly state in the Javadoc that the specification of these methods has changed.</li>
<li><code>InterruptableThread</code> is an unfortunate name, since <code>Thread</code> is also interruptible. A better name would be <code>PreemptiveInterruptibleThread</code>.</li>
<li>Since you have atomic booleans, perhaps you could check the value before taking the lock, in order to mitigate access to the locks. There is a possible race condition though. You can read more about <a href="https://en.wikipedia.org/wiki/Double-checked_locking" rel="noreferrer">Double-checked locking</a> here. Is your question implementation <em>Idempotent</em>?</li>
<li>If the atomic booleans are only used inside this lock, they could be replaced with ordinary booleans.</li>
<li>I like the fact everything that could be made final, has been declared final.</li>
<li>I do believe there still is a race condition after releasing the lock in <code>run()</code> and before calling <code>super.run()</code>.</li>
</ul>
    </div>