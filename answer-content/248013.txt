<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I have some suggestions for your code.</p>
<h2>Always add curly braces to <code>loop</code> &amp; <code>if</code></h2>
<p>In my opinion, it's a bad practice to have a block of code not surrounded by curly braces; I saw so many bugs in my career related to that, if you forget to add the braces when adding code, you break the logic / semantic of the code.</p>
<h2>Extract the expression to variables when used multiple times.</h2>
<p>In your code, you can extract the expression into variables; this will make the code shorter and easier to read.</p>
<p><strong>Before</strong></p>
<pre class="lang-java prettyprint-override"><code>if (ke.getKeyCode() == KeyEvent.VK_LEFT) {
   board.moveShape(-1, 0);
} else if (ke.getKeyCode() == KeyEvent.VK_RIGHT) {
   board.moveShape(1, 0);
} else if (ke.getKeyCode() == KeyEvent.VK_DOWN) {
   board.moveShape(0, 1);
} else if (ke.getKeyCode() == KeyEvent.VK_UP) {
   board.hardDown();
} else if (ke.getKeyCode() == KeyEvent.VK_SPACE)
   board.rotateShape();
</code></pre>
<p><strong>After</strong></p>
<pre class="lang-java prettyprint-override"><code>int keyCode = ke.getKeyCode();
if (keyCode == KeyEvent.VK_LEFT) {
   board.moveShape(-1, 0);
} else if (keyCode == KeyEvent.VK_RIGHT) {
   board.moveShape(1, 0);
} else if (keyCode == KeyEvent.VK_DOWN) {
   board.moveShape(0, 1);
} else if (keyCode == KeyEvent.VK_UP) {
   board.hardDown();
} else if (keyCode == KeyEvent.VK_SPACE) {
   board.rotateShape();
}
</code></pre>
<p>There are other cases like this one in your code, I suggest you do the same thing for them (<code>new Dimension(width, height)</code>, ect).</p>
<h2>Always uses a copy of the array when returning it or receiving it</h2>
<p>Most of the containers (Map, List, Arrays) in java are mutable (exception for some implementations). If you return an instance in a getter, any class that have access to it can modify the collection; you lose the control of your own data this way. To overcome that, you need to create a new copy of the array / convert the collection to an implementation that cannot be modified and then, return the value.</p>
<p>Always try to keep control over your own data, never share the collections directly with the others and when receiving a collection / array, copy the data to your internal collections.</p>
<p><strong>Before</strong></p>
<pre class="lang-java prettyprint-override"><code>public int[] coordinates() {
   return coords;
}
</code></pre>
<p><strong>After</strong></p>
<pre class="lang-java prettyprint-override"><code>public int[] coordinates() {
   return Arrays.copyOf(coords, coords.length);
}
</code></pre>
<p>They are multiple ways to <a href="https://stackoverflow.com/questions/5785745/make-copy-of-an-array">copy an array</a>.</p>
<h2>Uses getters instead of static variables</h2>
<p>In the <code>Board</code> class, you use static variables to share the values; this is a bug and a bad habit, since the static variables will be shared across instances (if you create multiple instances of the board, the values will be changed in all instances). Instead, I suggest that you hide the data and create getters for them.</p>
<h2>Replace the <code>for</code> loop with an enhanced 'for' loop</h2>
<p>In your code, you donâ€™t actually need the index provided by the loop, you can the enhanced version.</p>
<p><strong>Before</strong></p>
<pre class="lang-java prettyprint-override"><code> for (int i = 0; i &lt; coords.length; i++) {
    //[...]
 }
</code></pre>
<p><strong>After</strong></p>
<pre class="lang-java prettyprint-override"><code>for (int coord : coords) {
}
</code></pre>
    </div>