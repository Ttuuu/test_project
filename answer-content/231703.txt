<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You are abusing <code>global</code>s here. Ideally, functions should take in data using parameters, and return data they produce. Reassigning globals like you are makes it much more difficult to tell what a function does when reading code.</p>

<p>For example, instead of</p>

<pre><code>def pickRando():
    global randoPick
    randoPick = random.choice(options)

. . .

finish(combatCheck(player, randoPick))
</code></pre>

<p>You should get rid of the global <code>randoPick</code> and just do:</p>

<pre><code>def pickRando():
    # The data is simply returned instead of altering a global
    return random.choice(options)  

. . .

randoPick = pickRando()  # local instead of global
finish(combatCheck(player, randoPick))
</code></pre>

<p>The less "behind-the-scenes" data manipulation you do, the better. Code is much easier to reason about when function calls are simply an in/out flow of information.</p>

<hr>

<p>There's multiple odd things going on with <code>game</code>.</p>

<ul>
<li><p>It alters the global <code>check</code>, then returns <code>check</code>, then you do <code>check = game()</code> again when calling <code>game</code>.</p></li>
<li><p>You're returning whether or not the input failed, then dealing with a bad result externally when calling <code>game</code>.</p></li>
</ul>

<p>I would make a helper to take input in a loop, and eliminate the global <code>check</code>. We just need a function that will loop for us while the input is invalid. Something like:</p>

<pre><code>from typing import Callable

def get_valid_input(ask_message: str, error_message: str, validator: Callable[[str], bool]):
    while True:
        user_input = input(ask_message)

        if validator(user_input):
            return user_input

        else:
            print(error_message)
</code></pre>

<p>It loops for you until <code>validator</code> returns <code>True</code>. <code>validator</code> is a function that we supply that tells it if an input is valid or not.</p>

<p>I'd also re-jig things a bit and alter the responsibility of <code>game</code>. Once you make the changes I suggested, you're basically just left with:</p>

<pre><code>def game(): #start up the game
    print('Rock, Paper, Scissors:')
    player = get_valid_input("Choose wisely: ",
                             'You have not chosen a viable option! Try again',
                             lambda move: move.lower() in options)

    print("Okay, you picked " + player + ' and I picked ' + randoPick + '!')
</code></pre>

<p>It doesn't seem to have much point. I'd change this to something like a <code>play_round</code> function that handles the entirety of one round:</p>

<pre><code>def play_round():
    computer_move = pickRando()

    print('Rock, Paper, Scissors:')
    player_move = get_valid_input("Choose wisely: ",
                             'You have not chosen a viable option! Try again',
                             lambda move: move.lower() in options)

    print("Okay, you picked " + player_move + ' and I picked ' + computer_move + '!')

    finish(combatCheck(player_move, computer_move))
</code></pre>

<p>This eliminates multiple globals, and makes the calling code make a lot more sense:</p>

<pre><code>while True:
    play_round()

    answer = get_valid_input("Run again? (y/n): ",
                             "Invalid input.",
                             lambda a: a in {'y', 'n'})

    if answer == 'y':
        continue

    else:
        print('You are weak!')
        break
</code></pre>

<p>Now you aren't needing to manually validate input, which gets rid of a lot of messy looping.</p>

<hr>

<hr>

<p>This still has a lot that can be commented on:</p>

<ul>
<li><p>There's still some globals in charge of keeping track of the scores. I would bundle those scores into a class or tuple or something, and pass them into and out of <code>play_round</code>.</p></li>
<li><p><code>convertible</code> can be simply made into a dictionary:</p>

<pre><code>{'rock': 0,
 'paper', 1,
 'scissors', 2}
</code></pre>

<p>Then you can do <code>a = convertible[a]</code>. Note though that this will raise an error instead of defaulting to <code>2</code> if somehow bad input makes its way through. This is arguably a good thing though.</p></li>
<li><p>A lot of your comments are useless. Comments like in <code>(a - b) % 3 #modmath</code> and <code>input("Choose wisely: ") #get player input</code> are just repeating what the code says. Comments should explain <em>why</em> code is as it is; if that's necessary. Ideally, your code should be "fluent" enough that you don't need to comment what a code does because it's obvious already.</p></li>
</ul>

<p>I hate to rush reviews, but FedEx just got here with my new laptop :D</p>
    </div>