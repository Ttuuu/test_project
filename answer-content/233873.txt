<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The code is very C-like indeed. But fortunately there is no need to resort to raw pointers in that case. Rust has very useful <a href="https://doc.rust-lang.org/std/iter/trait.Iterator.html" rel="noreferrer"><code>Iterator</code></a>s along with a handy method called <a href="https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.zip" rel="noreferrer"><code>zip(...)</code></a> that can be used here. To quote the relevant documentation:</p>

<blockquote>
  <p><code>zip()</code> returns a new iterator that will iterate over two other
  iterators, returning a tuple where the first element comes from the
  first iterator, and the second element comes from the second iterator.</p>
</blockquote>

<p>Sounds like a good match for what you're trying to do.</p>

<p>Below is the code rewritten using <code>zip()</code> (I omitted <code>&amp;self</code> to make it compile in the <a href="https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=36ef2f78418cb77cd68c8b29d239f51f" rel="noreferrer">Rust playground</a>).</p>

<pre class="lang-rust prettyprint-override"><code>fn compare(a: &amp;[u8], b: &amp;[u8]) -&gt; i64 {

    let mut ret = 0;
    for (p1, p2) in a.iter().zip(b.iter()) {
        if p1 != p2 {
            ret = *p1 as i64 - *p2 as i64;
            break;
        }
    }

    if ret == 0 {
        if a.len() &lt; b.len() {
            ret = -1;
        }
        else if a.len() &gt; b.len() {
            ret = 1;
        }
    }

    ret
}
</code></pre>

<p>Since you did not provide any test vectors, you will have to check yourself if the result is fully as expected in your application, and also if there are any major performance hits if that matters to you.</p>

<p>Also, there are likely even more compact versions to write this, because I'm not really highly experienced in Rust programming.</p>
    </div>