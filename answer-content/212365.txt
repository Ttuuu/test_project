<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Code</h2>

<blockquote>
  <p>"When all you have is a hammer, everything looks like a nail."</p>
</blockquote>

<p>Your tool chest seems to have <code>dict</code>, which you are using to implement a container which doesn't contain any duplicates.  There is a name for that tool.  It is called as <code>set</code>.  Study it; you will find it very useful.</p>

<p>Consider:</p>

<pre><code>    nums_dict = {}

    for indx, val in enumerate(nums_small, target):
        if target - val in nums_dict: 
            pass 
        nums_dict[val] = indx
</code></pre>

<p>You are never <strong>using</strong> the value <code>indx</code>; you are just storing it and never retrieving it.  You could just as easily write:</p>

<pre><code>    nums_dict = {}

    for val in nums_small:
        if target - val in nums_dict: 
            pass 
        nums_dict[val] = True
</code></pre>

<p>which avoids the <code>enumerate()</code>, with the odd initial value, and the indices which did nothing.  But this is still storing the values <code>True</code>, and never retrieving them.  You don't need to do this, if you use a set:</p>

<pre><code>    nums_dict = set()

    for val in nums_small:
        if target - val in nums_dict: 
            pass 
        nums_dict.add(val)
</code></pre>

<p>You again use a <code>dict</code> for <code>return_dict</code> to ensure you don't have any duplicate solutions.  Actually, this code is a worse that the former, because you are using <code>in return_dict.values()</code>, so instead of an <span class="math-container">\$O(1)\$</span> key lookup, you're doing an <span class="math-container">\$O(n)\$</span> search through the entire list of values!  If that wasn't bad enough, you are sorting solutions twice: once to see if they already exist in <code>return_dict</code>, and a second time to add it into the dictionary if it wasn't found.  Saving the sorted solution would avoid the second sort.</p>

<p>You could replace <code>return_dict</code> with a <code>set</code> as well, but there is a catch, you can't add a <code>list</code> into a <code>set</code>, because the items in a <code>set</code> must be hashable to a constant value but lists are unhashable (because they can be mutated).  You can get around this by using tuples, which can't be mutated, so they can be hashed.</p>

<pre><code> return_dict = set()

 for index, val in ...:
    for solution in ...:
        sorted_solution = tuple(sorted(solution))
        return_dict.add(sorted_solution)

 return list(return_dict)
</code></pre>

<p>The above returns a list of tuples.  If you need a list of lists, that can be easily obtained as well, using list comprehension ...</p>

<pre><code> return [ list(solution) for solution in return_dict ]
</code></pre>

<p>... which is another useful tool for your tool chest.</p>

<hr>

<h2>Algorithm</h2>

<p>Using <code>_twoSum()</code> to solve the <code>threeSum()</code> problem is good reuse of code.  Kudos.</p>

<p>However, looping over all indices and for each index, constructing a new list omitting just that one value from the list <code>nums[:indx] + nums[indx+1:]</code> is extremely inefficient.</p>

<p>Since "Leetcode" is a puzzle solving site, I won't give you the better algorithm, but I will say that splitting <code>nums</code> into <code>len(nums)</code> different lists is not the way to go.  I would split it into 2 lists, or maybe 3 lists tops.  Good luck!</p>
    </div>