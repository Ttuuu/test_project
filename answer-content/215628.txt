<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Data representation</h2>

<p>Your choice of data representation is curious. It's a middle ground between a fully-serialized text format and a fully-deserialized in-memory format (such as nested tuples or dictionaries). I'd offer that it's not as good as either of the above. If you're going for micro-optimization, you need to do "pre-deserialized" literal variable initialization that doesn't require parsing at all. The best option would probably be named tuples or even plain tuples, i.e.</p>

<pre><code>available = (
    ('Fiddleheads', 3, 1, 0, 3, 80),
    # ...
)
</code></pre>

<p>But this won't yield any noticeable benefit, and it's not as maintainable as the alternative: just write a CSV file.</p>

<h2>main isn't main</h2>

<p>You've written a <code>main</code> function that isn't actually top-level code. This is not advisable. Rename it to something else, and put your top-level code in an <em>actual</em> main function, called from global scope with a standard <code>if __name__ == '__main__'</code> check.</p>

<h2>list duplication</h2>

<p>This:</p>

<pre><code>totalNames[::]
</code></pre>

<p>should simply be</p>

<pre><code>list(totalNames)
</code></pre>

<h2>snake_case</h2>

<p>Your names should follow the format <code>total_names</code>, rather than <code>totalNames</code>.</p>

<p>Also, variables in global scope (i.e. <code>AllSP</code>) should be all-caps; and you shouldn't need to declare them <code>global</code>.</p>

<h2>Suggested</h2>

<p>This doesn't at all tackle the main issue of algorithmic complexity, only Python usage. It isn't a good implementation, it's just to illustrate some stylistic improvements.</p>

<p>Note a few things:</p>

<ul>
<li>Having a shebang at the top is very important to indicate to the shell and other programmers what's being executed</li>
<li>Use csv</li>
<li>Use tuple unpacking in your loops where possible</li>
<li>Abbreviate the formation of new lists by doing appends inline</li>
<li>Never <code>except:</code>; at a minimum <code>except Exception:</code> although even this should be more specific</li>
<li>Use f-strings where appropriate</li>
<li>Drop inner lists in list comprehensions when you don't need them</li>
</ul>

<p><em>foods.csv</em></p>

<pre><code>name,carbs,protein,fat,vitamins,calories
Fiddleheads,3,1,0,3,80
Fireweed Shoots,3,0,0,4,150
Prickly Pear Fruit,2,1,1,3,190
Huckleberries,2,0,0,6,80
Rice,7,1,0,0,90
Camas Bulb,1,2,5,0,120
Beans,1,4,3,0,120
Wheat,6,2,0,0,130
Crimini Mushrooms,3,3,1,1,200
Corn,5,2,0,1,230
Beet,3,1,1,3,230
Tomato,4,1,0,3,240
Raw Fish,0,3,7,0,200
Raw Meat,0,7,3,0,250
Tallow,0,0,8,0,200
Scrap Meat,0,5,5,0,50
Prepared Meat,0,4,6,0,600
Raw Roast,0,6,5,0,800
Raw Sausage,0,4,8,0,500
Raw Bacon,0,3,9,0,600
Prime Cut,0,9,4,0,600
Cereal Germ,5,0,7,3,20
Bean Paste,3,5,7,0,40
Flour,15,0,0,0,50
Sugar,15,0,0,0,50
Camas Paste,3,2,10,0,60
Cornmeal,9,3,3,0,60
Huckleberry Extract,0,0,0,15,60
Yeast,0,8,0,7,60
Oil,0,0,15,0,120
Infused Oil,0,0,12,3,120
Simple Syrup,12,0,3,0,400
Rice Sludge,10,1,0,2,450
Charred Beet,3,0,3,7,470
Camas Mash,1,2,9,1,500
Campfire Beans,1,9,3,0,500
Wilted Fiddleheads,4,1,0,8,500
Boiled Shoots,3,0,1,9,510
Charred Camas Bulb,2,3,7,1,510
Charred Tomato,8,1,0,4,510
Charred Corn,8,1,0,4,530
Charred Fish,0,9,4,0,550
Charred Meat,0,10,10,0,550
Wheat Porridge,10,4,0,10,510
Charred Sausage,0,11,15,0,500
Fried Tomatoes,12,3,9,2,560
Bannock,15,3,8,0,600
Fiddlehead Salad,6,6,0,14,970
Campfire Roast,0,16,12,0,1000
Campfire Stew,5,12,9,4,1200
Wild Stew,8,5,5,12,1200
Fruit Salad,8,2,2,10,900
Meat Stock,5,8,9,3,700
Vegetable Stock,11,1,2,11,700
Camas Bulb Bake,12,7,5,4,400
Flatbread,17,8,3,0,500
Huckleberry Muffin,10,5,4,11,450
Baked Meat,0,13,17,0,600
Baked Roast,4,13,8,7,900
Huckleberry Pie,9,5,4,16,1300
Meat Pie,7,11,11,5,1300
Basic Salad,13,6,6,13,800
Simmered Meat,6,18,13,5,900
Vegetable Medley,9,5,8,20,900
Vegetable Soup,12,4,7,19,1200
Crispy Bacon,0,18,26,0,600
Stuffed Turkey,9,16,12,7,1500
</code></pre>

<p><em>Python</em></p>

<pre><code>#!/usr/bin/env python3

import csv
from time import time

ALL_SP = []
ALL_NAMES = []


def read(fn):
    with open('foods.csv') as f:
        reader = csv.reader(f, newline='')
        next(reader)  # ignore title
        return tuple(
            (name, float(carbs), float(protein), float(fat), float(vitamins), float(calories))
            for name, carbs, protein, fat, vitamins, calories in reader
        )


AVAILABLE = read('foods.csv')


def find_combs(total_names, total_carbs, total_protein, total_fat, total_vitamins, total_nutrients,
               total_calories, max_calories):
    for name, carbs, protein, fat, vitamins, calories in AVAILABLE:
        nutrients = carbs+protein+fat+vitamins

        if sum(total_calories) + calories &lt;= max_calories:
            find_combs(total_names + [name],
                       total_carbs + [carbs],
                       total_protein + [protein],
                       total_fat + [fat],
                       total_vitamins + [vitamins],
                       total_nutrients + [nutrients],
                       total_calories + [calories],
                       max_calories)
        else:
            # find SP
            try:
                carbs    = sum(x * y for x, y in zip(total_calories, total_carbs)) / sum(total_calories)
                protein  = sum(x * y for x, y in zip(total_calories, total_protein)) / sum(total_calories)
                fat      = sum(x * y for x, y in zip(total_calories, total_fat)) / sum(total_calories)
                vitamins = sum(x * y for x, y in zip(total_calories, total_vitamins)) / sum(total_calories)
                balance  = (carbs+protein+fat+vitamins)/(2*max(carbs,protein,fat,vitamins))
                thisSP   = sum(x * y for x, y in zip(total_calories, total_nutrients)) / sum(total_calories) * balance + 12
            except Exception:
                thisSP = 0

            # add SP and names to two lists
            ALL_SP.append(thisSP)
            ALL_NAMES.append(total_names)


def calc(max_calories):
    find_combs([], [], [], [], [], [], [], max_calories)
    index = ALL_SP.index(max(ALL_SP))
    print()
    print(f'{ALL_SP[index]:.2f} {ALL_NAMES[index]}')


def main():
    for i in range(100, 3000, 10):
        start = time()
        calc(i)
        print(f'Calories: {i} &gt;&gt;&gt; Time: {time()-start:.3f}')


if __name__ == '__main__':
    main()
</code></pre>

<p>I'm going to do some reading and see what you're doing in terms of algorithm and submit a second answer to suggest a saner one.</p>
    </div>