<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><code>__MYLIB_COM_HPP</code> is a reserved identifier, you're not allowed to use these in your code.</li>
<li>Instead of including both <code>&lt;string&gt;</code> and <code>&lt;string.h&gt;</code>, you could also use <code>std::strcpy()</code>. Also, you don't need that in the header, move it to the implementation file.</li>
<li><code>sizeof (char)</code> is by definition one, because <code>sizeof</code> gives you the size in multiples of that of a <code>char</code>. That part is basically redundant.</li>
<li>Outputting an error with <code>perror()</code> and throwing it as an exception is kind-of redundant as well. If you don't log an error when you catch it, you're a fool or have reason to ignore it, but you can't make that decision at the place where the error occurs.</li>
<li>You are using C-style casts. Don't, use the C++ casts (<code>static_cast</code> in the cases here) instead.</li>
<li>I'm not sure what <code>u_char</code> is, that may not be portable.</li>
<li>Avoid casting altogether: <code>mmap()</code> returns <code>void*</code>, which you cast to <code>u_char*</code> and store in buffer. In the only case where you use <code>buffer</code>, you cast it to <code>char*</code> first. Don't, just keep it a <code>void*</code> and only cast when you need.</li>
<li>You have no error checking when writing. You just take the <code>char const*</code> and feed it to <code>strcpy()</code>, without any bounds check.</li>
</ul>
    </div>