<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You can avoid the call to <code>Collections.reverse</code> by using a structure that allows for efficient additions to the front:</p>

<pre><code>public static List&lt;Integer&gt; numberToListOfDigits2(int number)
{
    // LLs allow for fast head additions
    LinkedList&lt;Integer&gt; list = new LinkedList&lt;&gt;(); 

    while(number &gt; 0) {
        list.addFirst(number % 10); // Note the change here
        number /= 10;
    }

    return list;
}
</code></pre>

<p>This prevents <code>numberToListOfDigit</code> from needing to reiterate the whole list at the end to reverse it. For small lists, the overhead will be minimal, but it's worth thinking about.</p>

<p>I also spaced out your <code>&gt;</code> and <code>%</code> calls for readability. You have everything (inconsistently) compacted in your other function as well. I'd change <code>listToNumberMadeOfDigits</code> to something closer to:</p>

<pre><code>public static int listToNumberMadeOfDigits(List&lt;Integer&gt; digits)
{
    int number = 0;

    for(int i = 0; i &lt; digits.size(); i++) {
        number += Math.pow(10, i) * digits.get(i);
    }

    return number;
}
</code></pre>

<p>I like space. I find it helps readability in nearly every situation.</p>
    </div>