<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>"Jaccard coefficient", not "Jacard" or "Jacquard": it's named after <a href="https://en.wikipedia.org/wiki/Paul_Jaccard" rel="nofollow noreferrer">Paul Jaccard</a>.</p></li>
<li><p>There are no docstrings. What do these functions do? What do they return?</p></li>
<li><p>The results of these functions depend on the global variable <code>G</code>. If you ever needed to generalize your program to operate on more than one graph at a time this dependency would become very inconvenient. The functions ought to either take the graph as an argument, or be methods on the graph class.</p></li>
<li><p>Is <code>Gamma</code> standard graph terminology for this function? I've seen it called '<a href="https://en.wikipedia.org/wiki/Neighbourhood_(graph_theory)" rel="nofollow noreferrer">neighbourhood</a>' (or 'open neighbourhood' when it needs to be clear that <code>u</code> is not included).</p></li>
<li><p>Python has a built-in decorator <a href="https://docs.python.org/3/library/functools.html#functools.lru_cache" rel="nofollow noreferrer"><code>functools.lru_cache</code></a> for caching the results of a function. So you can write:</p>

<pre><code>@lru_cache(maxsize=None)
def neighbourhood(g, u):
    "Return the set of vertices in the graph g that are adjacent to u."
    return set(g.successors(u)).union(g.predecessors(u))
</code></pre></li>
<li><p>Reuse the set of successors instead of discarding it:</p>

<pre><code>@lru_cache(maxsize=None)
def neighbourhood(g, u):
    "Return the set of vertices in the graph g that are adjacent to u."
    result = set(g.successors(u))
    result.update(g.predecessors(u))
    return result
</code></pre></li>
<li><p>In <code>common_friends</code> and <code>total_friends</code>, there is no need to make a copy of the neighbourhood before taking the union/intersection. You can take the union/intersection directly:</p>

<pre><code>def total_friends(g, u, v):
    """Return the number of vertices in the graph g that are in the
    neighbourhoods of u or v (or both).

    """
    return len(neighbourhood(g, u) | neighbourhood(g, v))

def common_friends(g, u, v):
    """Return the number of vertices in the graph g that are in the
    neighbourhoods of both u and v.

    """
    return len(neighbourhood(g, u) &amp; neighbourhood(g, v))
</code></pre></li>
</ol>
    </div>