<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Concurrency</h3>

<p>In the encode and decode method you use <code>queue.sync()</code> to dispatch code to a concurrent queue – which means that the current queue is blocked until the computation is finished. If that is the main queue in an iOS or macOS application, UI updates and event handling are blocked for that time.</p>

<p>Therefore using a dispatch queue does not really help here. Also the Huffman encoder cannot know in which context it is executed (such as “user initiated”).</p>

<p>Dispatching the code with GCD – if necessary – should be done by the <em>caller</em> of these methods, not in the Huffman class itself. </p>

<h3>The API</h3>

<p>In its current form, the class seems of limited use to me. </p>

<pre><code>let huffEncoded = Huffman("MISSISSIPPI_RIVER!")
</code></pre>

<p>builds the Huffman tree and encodes the given string and stores the results in private member variables. The only thing that I can do with the result is to decode it again. What I am missing are methods to</p>

<ul>
<li>retrieve the generated Huffman tree so that it can be stored (perhaps in some serialized form) for later decompression,</li>
<li>retrieve the compressed string as a sequence of zeros and ones,</li>
<li>an initializer which takes a (previously created) Huffman tree, </li>
<li>a decode methods which takes a previously compressed string and decodes it, using the given Huffman tree.</li>
</ul>

<h3>Simplifications and other remarks</h3>

<p>All properties in <code>class Node</code> are never mutated, and can be declared as constants (with <code>let</code>).</p>

<p>In <code>func decode()</code> the reverse dictionary mapping can be created with</p>

<pre><code>let reverseKey = Dictionary(uniqueKeysWithValues: zip(key.values, key.keys))
</code></pre>

<p>instead of a loop. The following loop can be more simply done with <code>compactMap()</code>:</p>

<pre><code>let word = code.compactMap({ reverseKey[$0] }).joined()
</code></pre>

<p>In <code>func getKey()</code> it is not necessary to create an array from the given string. The <code>return</code> in the closure of the <code>reduce()</code> call is misleading: An assignment does not return anything. <code>+=</code> can be used for the increment. Using <code>$n.value</code> instead of <code>$n.1$</code> in the sort predicate emphasizes that the dictionary is sorted according to its values:</p>

<pre><code>let sortedFrequency = input.reduce(into: [String: Int](), { freq, char in
        freq[String(char), default: 0] += 1
    })
    .sorted(by: {$0.value &gt; $1.value})
</code></pre>

<p>In <code>func encode()</code>, <code>compactMap()</code> can be used again instead of a for loop:</p>

<pre><code>let code = input.compactMap( { key[String($0)] } )
</code></pre>

<p>In <code>func createTree()</code> a “safe subscript” method (defined as an extension
of the <code>Collection</code> protocol) is used to access the third last queue element if it exists. Testing <code>if queue.count &gt;= 3</code> would seem more clear to me.</p>

<h3>The Huffman tree algorithm</h3>

<p>Your algorithm does not generate the optimal code. The reason is that at each step it only considers the last two or three nodes, not the two nodes with the minimal total weight. Here is an example: For the string
"ABCDEFGH" (i.e. 8 distinct characters with equal freqency) your 
program generates the codes</p>

<pre><code>"D": 01
"G": 11
"F": 001
"E": 101
"A": 0001
"C": 0000
"H": 1000
"B": 1001
</code></pre>

<p>with an average code length of 26/8 = 3.25. (Your output can be different because hash values are randomized since Swift 4.2.) The optimal tree in this case would be a balanced binary tree, where every code has length 3.</p>
    </div>