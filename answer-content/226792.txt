<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You define a <code>clear_screen</code> function, but then at the top you have</p>

<pre><code>#opening statement
os.system('cls')  # Here
print ('Welcome to the Hangman!\n')
</code></pre>

<p>You might as well use the function there.</p>

<hr>

<p>A little further down you have:</p>

<pre><code>while game_on is True:
</code></pre>

<p>The <code>is</code> check is only necessary if <code>game_on</code> could be some truthy value other than <code>True</code>, and you wanted to check if it was literally only equal to <code>True</code>. <code>game_on</code> will only every have the values <code>True</code> or <code>False</code> though, so you can just write:</p>

<pre><code>while game_on:
</code></pre>

<p>Which reads nicer anyways.</p>

<hr>

<p><code>tried_but_wrong</code> is a list, but you're using it to do membership tests when you write</p>

<pre><code>guess in tried_but_wrong
</code></pre>

<p>If you're using <code>in</code> to test for membership like you are here, ideally, the collection shouldn't be a list. <code>x in some_list</code> requires that the entire list is potentially checked, which can be an expensive operation. It would be better if <code>tried_but_wrong</code> was a set, since you don't seem to need the insertion order maintained anyway.</p>

<pre><code>tried_but_wrong = set()  # An empty set. Python doesn't have a literal for an empty set
. . .
if not tried_but_wrong:  # Empty sets and lists are falsey
. . .
tried_but_wrong.add(guess)
</code></pre>

<p>Membership lookups on sets are very fast due to how they're implemented. If the purpose of a collection is just to track what you've "seen" already, and you don't care about order<code>*</code>, use a set.</p>

<p><code>*</code> I think sets actually maintain insertion order in the latest versions of 3. If you want broadly compatible code though, you shouldn't rely on that.</p>

<hr>

<p>In Python 3, <code>print</code> is a function call, yet you're using "detached braces":</p>

<pre><code>print ("Please input [y] or [n]")
</code></pre>

<p>All this does is momentarily make your code look like Python 2. Since it's an ordinary function call, format it as such and have the braces "attached" to the call:</p>

<pre><code>print("Please input [y] or [n]")
</code></pre>

<p>And the same goes for code like:</p>

<pre><code>hidden_word_list [indices] = guess
</code></pre>

<p><code>[indices]</code> is a part of <code>hidden_word_list</code>. Having the indexing floating there makes it slightly less obvious what's going on. Keep them attached.</p>

<p>And this isn't just my word. PEP 8, Python's style guide, <a href="https://www.python.org/dev/peps/pep-0008/#whitespace-in-expressions-and-statement" rel="nofollow noreferrer">explicitly recommends this</a>.</p>

<p>And on the subject of white-space styling, make sure you have white-space around binary operators. Lines like</p>

<pre><code>while attempts_left&gt;0 or hidden_word_list != word_to_guess_list:
</code></pre>

<p>Are inconsistent and violate the guide. Have space around <code>&gt;</code>:</p>

<pre><code>while attempts_left &gt; 0 or hidden_word_list != word_to_guess_list:
</code></pre>

<p>Even if you were fine violating PEP 8, you're inconsistent with how you style things. You space some things out in some places but not others. <strong>Be consistent</strong>. Consistency and proper naming are two very valuable tools that ensure your code is readable.</p>

<hr>

<p>A few places, you're putting parenthesis around string literals for some reason:</p>

<pre><code>hidden_word = ('_')*length_of_word_to_guess
. . . 
guess = ('')
</code></pre>

<p>I'm not sure why though. This momentarily makes it seem like they're tuples. Just use bare strings, and for the first line there, again, put space around <code>*</code>.</p>

<hr>

<pre><code>if tried_but_wrong == []:
    pass
else:
    print(f'\nTip: you have alread tried these letters: {tried_but_wrong}\n')
</code></pre>

<p>This has a couple things off; one of which I mentioned earlier:</p>

<ul>
<li><p>Empty collections are falsey. It's generally regarded as idiomatic to use <code>if some_coll</code> to test if a collection has elements (or <code>if not some_coll</code> to test if it's empty).</p></li>
<li><p>You're testing for a condition, then only using the <code>else</code>. Just negate the condition if necessary. Here though, negation isn't even needed:</p>

<pre><code>if tried_but_wrong:
   print(f'\nTip: you have already tried these letters: {tried_but_wrong}\n')
</code></pre></li>
</ul>

<hr>

<hr>

<p>There are some things I like though:</p>

<ul>
<li><p>You're making good use of f-strings. That certainly makes the string construction neater.</p></li>
<li><p>You use snake_case and use descriptive names. Both are good practices.</p></li>
</ul>
    </div>