<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Style and code</h2>

<ul>
<li>There are several places where you should use <code>const</code> rather than <code>let</code>. Mainly inside the for loops.</li>
<li>The second <code>movingScreens = {}</code> is redundant.</li>
<li>Avoid nesting loops too deeply. Use a function to avoid this.</li>
<li>Don't use <code>for...in</code> as you need to be sure you are not getting properties higher up the prototype chain. Use <code>Object.keys</code> to get the keys and iterate them with a <code>for...of</code></li>
<li>Avoid long lines by using alias to reference object paths or long names.</li>
<li>The naming is confusing, you have <code>shapes</code>, <code>screens</code>, <code>scrollScreens</code> that seam to be interchangeable</li>
<li>Is this a typo or a really bad name and reference <code>this.animations.screen1IfContainer.current.container.current</code></li>
</ul>

<h2>Avoid iterating again</h2>

<p>You build the object <code>movingScreens</code> then you iterate it again. Would be better to process the items instead of building the object <code>movingScreens</code>.</p>

<p>You use <code>Array.map</code> to create an array of elements, then you iterate that array again. Process the elements as you iterate the first time.</p>

<h2>Rewrite</h2>

<ul>
<li>Removed the object <code>movingScreens</code> processing the shapes in the first loop.</li>
<li>Added function <code>scrollScreen</code> to process a (<code>screen</code>, <code>shape</code>, or <code>scroll</code> I can not be sure).</li>
<li>Used aliases to reference long names and paths. <code>currentCont</code>, and <code>screens</code></li>
<li>All variables are now <code>const</code></li>
<li>Used <code>Object.keys</code> for safer key iteration.</li>
</ul>

<p>As there is no way for me to test this code, nor do I have a context (what is what), it may contain typos or logic errors.</p>

<pre><code>animate() {
    const currentCont = this.animations.screen1IfContainer.current.container.current;
    const scrollScreen = shape =&gt; {
        for (const scroll of shape.scrolls) {
            const from = scroll.from * this.scrollMax;
            const to = scroll.to * this.scrollMax;
            if (from &lt;= this.scrollTop &amp;&amp; to &gt;= this.scrollTop) {
                const styles = scroll.styles((this.scrollTop - from) / (to - from));
                for (const style of Object.keys(styles)) {
                    for(const ref of shape.els) {
                        const el = ref === 'screen1IfContainer' ? 
                            currentCont : this.animations[ref].current;
                        if (el) { el.style[style] = styles[style] }
                    }
                }
            }
        }
    }
    if (!this.animationsDisabled()) {
        const screens = scrollAnimationDefs.movingScreens;
        for (const key of Object.keys(screens)) {
            if (key !== 'appsTop' &amp;&amp; key !== 'appsBottom' &amp;&amp; screens[key].scrolls) {
                scrollScreen(screens[key]);
            }
        }
    }
}
</code></pre>

<h2>Questions</h2>

<blockquote>
  <p><span class="math-container">\$O(n^4)\$</span> (I hope that's right, if not please do correct me)</p>
</blockquote>

<p>You have not defined <code>n</code> thus its is meaningless to define the complexity.</p>

<blockquote>
  <p>Would using functional operators like map and filter improve performance?
  I'd be really interested to see some suggestions to this, and maybe the ideal optimisation for it?</p>
</blockquote>

<p>As this is animation these points can not be answered. The slow point is the moving of pixels, this is highly dependent on the device it is running on. The JS code is but a fraction of the workload, you can optimize it till the cows come home and it may not make a spec of difference on the performance of the animation.</p>

<p>Any optimization would require the full animation to see when and where the many GPU  state changes, compositing, and what not can be optimized.</p>

<h2>Update</h2>

<p>I forgot this line in your question.</p>

<blockquote>
  <p>I'd assume const uses a bit less memory than let due to not needing to support re-allocation</p>
</blockquote>

<p>If <code>const</code> uses less memory that would be up to the JS engine. I would not use it as a criteria as when to use <code>const</code> or not.</p>

<ul>
<li>We use <code>const</code> to protect against accidental mutation.</li>
<li>We use <code>let</code> and <code>const</code> to avoid accidentally redefining a variable.</li>
<li>We use <code>const</code> (as with <code>let</code>) to scope the variable to a block. A block is code between <code>{</code> and <code>}</code> The exception is when a variable is defined in a <code>for</code>, <code>do</code>,  or <code>while</code> loop as a <code>const</code> or <code>let</code> it is scoped to the loop block, not to the current block. eg <code>{ /*current block a is not in scope */ for(const a of b) { /* a is in scope  loop block*/ } }</code></li>
<li>We use <code>const</code> to give meaning to constants that are otherwise just numbers or strings in your source code. eg <code>const unit = 1;</code></li>
<li><p>Currently chrome, FF, edge give <code>const</code>, <code>let</code>, and <code>var</code> have a slight performance benefit over literals.  eg <code>1 + 1</code> is a little slower than <code>one + one</code> with <code>one</code> defined as <code>const one = 1;</code> </p>

<p>Do not rely on this to remain true as engines are constantly changing. The benefit is <strong>very</strong> small and only an advantage under very specific conditions.</p></li>
</ul>
    </div>