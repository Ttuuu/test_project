<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Design</h1>

<h3>Calculator class</h3>

<p>Looking at your <code>Calculator</code> class, you are doing all your work in the constructor, including printing output. The consumers of this class (the <code>main</code> function, in this case) never actually use the class features. This implies that your <code>Calculator</code> class does not actually represent an object, so it shouldn't be a class in the first place.</p>

<p>It seems to me that <code>Calculator</code> would be better as a namespace of related functions, and the functionality that is currently in the constructor could be moved to a function like <code>void calculateFromString(std::string const&amp; expr)</code>. This is much more intuitive than a class that only contains private member functions, and no real outward-facing functionality.</p>

<p>You can even accomplish the same public/private interface by moving the new <code>Calculator</code> namespace to a separate header file, and just putting all the helper functions in an unnamed namespace in the corresponding source file, so they are not visible to clients.</p>

<p>Calculator.h:</p>

<pre><code>namespace Calculator {
    void calculateFromString(std::string const&amp; expression);
}
</code></pre>

<p>Calculator.cpp:</p>

<pre><code>namespace {
    // Helper functions placed here will not be visible outside of Calculator.cpp
    class operator_t { ... }
    auto getOperator() { ... }
    ...
}

namespace Calculator {
    void calculateFromString(std::string const&amp; expression) {
        // Move code from Calculator constructor to here.
    }
}
</code></pre>

<p>main.cpp:</p>

<pre><code>#include "Calculator.h"

int main() {
    while (true) {
        ...
        Calculator::calculateFromString(input);
    }
}
</code></pre>

<h1>Code Style</h1>

<ul>
<li><p><strong>Use more descriptive variable names.</strong> The longer, the better. In general, the greater the scope of a variable, the more descriptive it should be. These are just a few examples I noticed right away:</p>

<ul>
<li><code>p_stack</code> - What does the p stand for? What does the stack actually do?</li>
<li><code>fretval</code> - I know this is a return value, but why the f? Even if it's hungarian notation for <code>float</code>, <code>evaluate</code> returns a <code>double</code>, not a <code>float</code>, so it is misleading.</li>
<li><code>s</code>, <code>i</code>, and <code>a</code> in <code>operator_t::operator_t</code> - The constructor parameter names should at least be named analogous to the member variables they are fulfilling. This is less egregious due to code locality, but one-character variable names are rarely a good choice.</li>
<li><code>Calculator::_cur</code> - "cur" what? Current iterator? What is it iterating?</li>
</ul></li>
<li><p><strong>Put public members before private in classes.</strong> You did this in <code>operator_t</code>, but not in <code>Calculator</code>. Users of a class generally care more about what <em>they</em> can do with a class than what the class can do with <em>itself</em>, so it is natural to place the <code>public:</code> section first.</p></li>
<li><p><strong>Group related functionality together.</strong> For example, in your <code>Calculator</code> class, the <code>operator_t</code> class definition is right in the middle of all the <code>Calculator</code> constructor definitions. Try to keep related functionality as vertically close as you can, so that consumers don't have to go skipping all over your codebase.</p></li>
<li><p><strong>Don't explicitly declare <code>= delete</code> for <code>operator_t</code> default constructor</strong>. If you have defined a constructor for a class, then the default constructor is automatically deleted. Explicitly deleting it is redundant. You can also safely put <code>= delete</code> statements in the <code>public:</code> section of a class, since they are technically part of the class interface - you are telling your clients "I have chosen to remove this functionality, so don't try to use it."</p></li>
<li><p><strong>Turn <code>operator_t</code> into a struct.</strong> Continuing off the above point, if we remove the line <code>operator_t() = delete;</code>, then there is nothing left in the <code>private:</code> section, and <code>operator_t</code> can be changed from a class to a struct. This also conveys our intent more precisely - <code>operator_t</code> is a small collection of publicly-accessible values with no inherent functionality, which is a perfect use-case for <code>struct</code>.</p></li>
<li><p><strong>Don't explicitly specify enum values in <code>enum_op_t</code></strong> I couldn't find a case where you actually treat the <code>enum_op_t</code> values as characters, so there is no reason to explicitly specify each value as matching to a character. Additionally, <code>NULLTYPE = '0'</code> seems like an error - I suspect that what you actually wanted was the null byte <code>'\0'</code>, not the character <code>'0'</code>. It should be irrelevant anyway, since the whole point of enums is that you shouldn't be concerned with their underlying values, in which case it is more conventional/"less weird" to just declare the enum constants and not assign specific values.</p></li>
</ul>
    </div>