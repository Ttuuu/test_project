<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If we're talking <a href="/questions/tagged/functional-programming" class="post-tag" title="show questions tagged 'functional-programming'" rel="tag">functional-programming</a>, I'd use <code>.forEach()</code> instead of a <code>for</code> loop. It abstracts the iteration process.</p>

<hr>

<p><code>if (!curProp[paths[i]]) return</code> does not seem quite right to me, because it will work funny with <strong>falsy</strong> values. It's better to rely on <code>object.hasOwnProperty()</code>, or <code>Object.keys()</code> depending on the way you want it to work.</p>

<p>Example:</p>

<pre><code>var obj = {};
obj["property1"] = 0;
obj["property2"] = "";

obj["property1"] ? obj["property1"] : "No property1 is available";
  // --&gt; "No property1 is available", isn't right from the humans perspective noramally

obj["property2"] ? obj["property2"] : "No property2 is available";
  // --&gt; "No property2 is available"
</code></pre>

<hr>

<p>I think, it's always good to spell out the return value. In other words, <code>return undefined</code> is better than <code>return</code> in this function.</p>

<hr>

<p>Slightly different variant:</p>

<pre><code>function get(targetObject, targetPropertyPath) {
    const pathPartList = targetPropertyPath.split('.');
    let currentProperty = targetObject;

    pathPartList.forEach(pathPart =&gt; {
        if (!currentProperty.hasOwnProperty(pathPart)) return undefined;

        const property = currentProperty[pathPart];
        currentProperty = (typeof property !== 'function') ? property : property();
    });

    return currentProperty;
}
</code></pre>
    </div>