<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Use more functions</h3>

<p>The expression that checks if a port is available is a bit complex.
It would be good to encapsulate it in a separate function.</p>

<h3>Avoid hardcoded values</h3>

<p>It seems you are using a hard-coded IP address buried in the middle of the code.
It would be better to extract such values and define them at the top of the script.
Then you wouldn't even need to redact anything for code review purposes.</p>

<h3>Validate input</h3>

<p>The function accepts ranges that wouldn't make sense.
It would be good to add input validation to fail fast with a clear message.</p>

<h3>Exploring a list of things in random order</h3>

<p>In this example "things" is port numbers within a range.
A simple technique to explore all of them in random order is to enumerate and shuffle.</p>

<pre><code>ports "$lo" "$hi" | shuf | while read candidate; do
    if is_available "$candidate"; then
        echo "$candidate"
        return
    fi
done
return 1
</code></pre>

<p>Where <code>ports</code> is a custom function that produces the candidate ports within the specified range, and <code>shuf</code> is the GNU shuffle tool or a custom function that implements <a href="https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle" rel="nofollow noreferrer">Fisher-Yates shuffle</a> using a Bash array.</p>

<p>If in the typical use case you expect to find an available port easily in at most a few random trials, then I agree that this shuffling technique would be overkill, and your current method is just fine.</p>
    </div>