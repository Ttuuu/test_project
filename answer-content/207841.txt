<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Overview</h2>
<p>Your biggest issue is encapsulation (there is none).</p>
<p>Start writing classes with methods.<br>
Only allow the class methods to modify the internal members.</p>
<p>I would note that <code>std::map</code> has the same characteristics as a balanced binary search tree (this implies its implementation is a Red/Black tree).</p>
<p>I don't mention it in the code below. But when passing object you usally pass by const reference. This will avoid unneeded copies being created. You pass the strings around by value which cause a copy of the string to be created with each function call (that's expensive).</p>
<p>If you re-write to include all the above advice we can discuss the opportunities that come with using move semantics.</p>
<h2>Code Review</h2>
<p>Why is this a function?</p>
<pre><code>BstNode* NewNodeCreator(std::string data)  //creating a new node, pointing left and right to null
{
    /*I make a pointer, pointing to a new space in memory. To allocate that memory I am using new operator, taking sizeof(BstNode) struct*/
    BstNode* newNode = new BstNode();

    newNode-&gt;data = data;
    newNode-&gt;left = newNode-&gt;right = NULL; // left and right poiners to NULL
    newNode-&gt;frequ = 1; //for first time in BST
    return newNode;
}
</code></pre>
<p>This should be the constructor of <code>BstNode</code></p>
<p>There is a much simpler way to read a text file into a vector.</p>
<pre><code>std::vector&lt;std::string&gt;   list;
...
while (book &gt;&gt; word)
{
    list.emplace_back(word); //store the words in a vector
}
</code></pre>
<p>I would write this as:</p>
<pre><code>// Iterate over a stream and build a vector.
std::vector&lt;std::string&gt;   list(std::istream_iterator&lt;std::string&gt;(book),
                                std::istream_iterator());
</code></pre>
<p>I would avoid using exit().</p>
<pre><code>if (!book.is_open())
{
    std::cout &lt;&lt; "Unable to open file";
    system("pause");
    exit(1);
}
</code></pre>
<p>This is an unexpected (otherwise you would not exit). So throw an exception. You can catch exceptions in main and display an error message. By doing it this way your code to display error messages is in a single location and not spread around the code. This makes the error messages (or the way the application exits consistent across all errors).</p>
<pre><code>if (!book.is_open()) {
    throw std::runtime_error("Unable to open file");
}
</code></pre>
<p>Another place where you have a function rather than a method:</p>
<pre><code>BstNode* InsertNode(BstNode* root, std::string data);
</code></pre>
<p>The trouble here is that you call your insert like this</p>
<pre><code>root = InsertNode(root, "Blob");
</code></pre>
<p>But there is nothing to stop a person modifying the variable <code>root</code>. What happens if they modify the tress pointed at by root so that it is no longer consistent with a BST?</p>
<p>What you should do is make <code>root</code> a private member of a class. The only way to modify <code>root</code> is to call the <code>InsertNode()</code> method. That way you know that your tree is always going to be a BST.</p>
<pre><code>class BSTTree
{
    private:
        BSTNode*   root;

        void InsertNode(BSTNode* node, std::string data);
    public:
        BSTTree()
            : root(nullptr)
        {}
        void InsertNode(std::string data) {
            root = InsertNode(root, data);
        }
}
</code></pre>
<p>You are definitely going in the correct direction here. But you need to fix a couple of bugs here:</p>
<pre><code>    else //for node with two children
    {
        BstNode* minData = root-&gt;right;

        while (minData-&gt;left != NULL)
        {
            minData = minData-&gt;left;
        }
        return minData;             // This return is wrong.

        BstNode *temp = minData;
        root-&gt;data = temp-&gt;data;
        root-&gt;right = NodeDestructor(root-&gt;right, temp-&gt;data);
    }
</code></pre>
<p>I think you want:</p>
<pre><code>    else //for node with two children
    {
        BstNode* minData = minValue(root-&gt;right);

        root-&gt;data  = minData-&gt;data;
        root-&gt; frequ= minData-&gt; frequ;
        root-&gt;right = NodeDestructor(root-&gt;right, root-&gt;data);
    }
</code></pre>
    </div>