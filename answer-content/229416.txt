<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><a href="https://github.com/dmitrynogin/x-utils" rel="nofollow noreferrer">GitHub</a>, <a href="https://www.nuget.org/packages/X.ComponentModel/" rel="nofollow noreferrer">NuGet</a></p>

<p>Letâ€™s hope for a non-nullable references in the upcoming version of C#. As for now on I would say that the easiest way is just to check for null reference with <code>?? throw new ArgumentNullException()</code>. </p>

<p>Here is what I use to check for white spaces in my DTO/models - at the end of the day it allows to save on typing:</p>

<pre><code>public class Dto 
{
    public Dto(ProductName name)
    {
        Name = name ?? throw new System.ArgumentNullException(nameof(name));
    }

    public ProductName Name { get; }
}
</code></pre>

<p>Json.NET will properly serialize read-only properties in both ways.
My <code>ProductName</code> like classes are defined as:</p>

<pre><code>public class ProductName : String&lt;ProductName&gt;
{
    public ProductName(string text)
        : base(text, NotNullOrWhitespace, Trim)
    {
    }
}
</code></pre>

<p>Where:</p>

<pre><code>[JsonConverter(typeof(StringJsonConverter))]
public abstract class String&lt;T&gt; : ValueObject&lt;T&gt;
    where T: String&lt;T&gt;
{
    protected static string Trim(string text) =&gt; text?.Trim();
    protected static string EmptyIfNull(string text) =&gt; text ?? Empty;
    protected static string Upper(string text) =&gt; text?.ToUpper();
    protected static string Lower(string text) =&gt; text?.ToLower();

    protected static string NotNull(string text) =&gt; 
        text != null ? text : throw new ArgumentNullException(nameof(text));
    protected static string NotNullOrWhitespace(string text) =&gt; 
        !IsNullOrWhiteSpace(text) ? text : throw new ArgumentException("Text is required.", nameof(text));
    protected static string NotNullOrEmpty(string text) =&gt;
        !IsNullOrEmpty(text) ? text : throw new ArgumentException("Text is required.", nameof(text));

    public static implicit operator string(String&lt;T&gt; s) =&gt; s?.Text;

    protected String(string text, params Func&lt;string, string&gt;[] actions) =&gt; 
        Text = actions.Aggregate(text, (acc, f) =&gt; f(acc));

    public string Text { get; set; }

    public override string ToString() =&gt; Text;

    protected override IEnumerable&lt;object&gt; EqualityCheckAttributes =&gt; 
        new[] { Text };
}
</code></pre>

<p>Where:</p>

<pre><code>public abstract class ValueObject&lt;T&gt; : IEquatable&lt;ValueObject&lt;T&gt;&gt;
             where T : ValueObject&lt;T&gt;
{
    protected abstract IEnumerable&lt;object&gt; EqualityCheckAttributes { get; }

    public override int GetHashCode() =&gt;
        EqualityCheckAttributes
            .Aggregate(0, (hash, a) =&gt; unchecked(hash * 31 + (a?.GetHashCode() ?? 0)));

    public override bool Equals(object obj) =&gt;
        Equals(obj as ValueObject&lt;T&gt;);

    public virtual bool Equals(ValueObject&lt;T&gt; other) =&gt;
        other != null &amp;&amp;
        GetType() == other.GetType() &amp;&amp;
        EqualityCheckAttributes.SequenceEqual(other.EqualityCheckAttributes);

    public static bool operator ==(ValueObject&lt;T&gt; left, ValueObject&lt;T&gt; right) =&gt;
        Equals(left, right);

    public static bool operator !=(ValueObject&lt;T&gt; left, ValueObject&lt;T&gt; right) =&gt;
        !Equals(left, right);
}
</code></pre>

<p>And:</p>

<pre><code>class StringJsonConverter : JsonConverter
{
    public override bool CanConvert(Type objectType) =&gt;
        objectType == typeof(object) ? false :
        objectType.IsConstructedGenericType &amp;&amp; objectType.GetGenericTypeDefinition() == typeof(String&lt;&gt;) ? true :
        CanConvert(objectType.BaseType);

    public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) =&gt;
        Activator.CreateInstance(objectType, reader.Value);

    public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) =&gt;
        writer.WriteValue(value.ToString());
}
</code></pre>

<p>It is easy to extend the list of available operations:</p>

<pre><code>public class Slug : String&lt;Slug&gt;
{
    protected static string Dash(string text) =&gt; text.Replace(" ", "-");
    public Slug(string text) 
        : base(text, NotNullOrWhitespace, Trim, Lower, Dash)
    {
    }
}
</code></pre>
    </div>