<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>The algorithm</h3>
<p>Your algorithm needs O(n) space (for storing all items), and O(n * k) time (for selecting the best ones) (n = items to choose from, k = items chosen, bounded by n).</p>
<p>By choosing as you go, you can get that down to O(k') space and O(n * k') time (k' = maximum items chosen at any time, at least k, bounded by n).</p>
<p>Take a look at <a href="https://en.cppreference.com/w/cpp/algorithm/push_heap" rel="nofollow noreferrer"><code>std::push_heap</code></a>, <a href="https://en.cppreference.com/w/cpp/utility/tuple" rel="nofollow noreferrer"><code>std::tuple</code></a> and <a href="https://en.cppreference.com/w/cpp/language/lambda" rel="nofollow noreferrer">lambdas</a> for implementing the new algorithm.</p>
<h3>Avoid casting</h3>
<p>Casting is error-prone, as it circumvents the protections of the type-system. Thus, use the most restricted cast you can, and don't cast at all if reasonably possible. In your case, why not multiply with <code>1.0</code> instead?</p>
<h3>Floating-point is hard</h3>
<p>You are calculating the specific value (value per weight) of your items for comparison purposes. Luckily, a double has enough precision that you are extremely unlikely to suffer from rounding-errors when dividing two 32 bit numbers. Still, instead of comparing <code>1.0 * a_value / a_weight &lt; 1.0 * b_value / b_weight</code> you could compare <code>1LL * a_value * b_weight &lt; 1LL * b_value * a_weight</code>, avoiding division and floating-point.</p>
<h3>All those useless copies</h3>
<p>While copying small trivial types is generally the right approach, a <code>std::vector</code> is neither small nor trivial; Copying it is rather expensive. If you only need to read it, use a constant reference or preferably a <a href="https://en.cppreference.com/w/cpp/container/span" rel="nofollow noreferrer">C++2a <code>std::span</code></a> for increased flexibility.</p>
<h2>Gracefully handle all kinds of invalid input</h2>
<p>No need to assume malice, you are assured your load of garbage anyway.</p>
<h3>Just the code</h3>
<ol>
<li><p>I don't see where you use anything from <code>&lt;cstdio&gt;</code>, so don't include it.</p>
</li>
<li><p>Never import a namespace wholesale which isn't designed for it. Especially <code>std</code> is huge and ever-changing, which can silently change the meaning of your code even between minor revisions of your toolchain, let alone using a different one.<br>
It cannot be guaranteed to break noisily.</p>
</li>
<li><p><code>return 0;</code> is implicit for <code>main()</code>. Make of that what you will.</p>
</li>
</ol>
    </div>