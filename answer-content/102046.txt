<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Such a data structure already exists, and is called <a href="https://msdn.microsoft.com/en-us/library/vstudio/bb534291(v=vs.100).aspx"><code>ILookup&lt;TKey, TElement&gt;</code></a>. It can be created using the <a href="https://msdn.microsoft.com/en-us/library/vstudio/system.linq.enumerable.tolookup(v=vs.100).aspx"><code>ToLookup</code></a> extension.</p>

<blockquote>
  <p>The <code>ToLookup&lt;TSource, TKey&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TSource, TKey&gt;)</code> method returns a <code>Lookup&lt;TKey, TElement&gt;</code>, a one-to-many dictionary that maps keys to collections of values. A <code>Lookup&lt;TKey, TElement&gt;</code> differs from a <code>Dictionary&lt;TKey, TValue&gt;</code>, which performs a one-to-one mapping of keys to single values.</p>
</blockquote>

<pre><code>var list = new List&lt;Tuple&lt;string, int&gt;&gt;
{
    Tuple.Create("a", 1),
    Tuple.Create("a", 2),
    Tuple.Create("a", 3),
    Tuple.Create("b", 4),
    Tuple.Create("c", 5)
};

var lookup = list.ToLookup(t =&gt; t.Item1, t =&gt; t.Item2);

foreach(var kv in lookup)
{
    Console.Write(kv.Key);
    Console.WriteLine(" - " + string.Join(", ", kv));
}

// prints
// a - 1, 2, 3
// b - 4
// c - 5
</code></pre>

<p>As Vince pointed out, your <code>DuplicateDictionary</code> will suffer from slow access. <code>Lookup</code> won't.</p>
    </div>