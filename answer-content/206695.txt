<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>That class can still be abstracted </p>

<pre><code>public interface IAdSummaryMapper {
     List&lt;IAdSummary&gt; MapAdSummaries(List&lt;AdResult&gt; esResults);
}
</code></pre>

<p>The search service can then explicitly depend on the abstraction and not be tightly couple to static implementation concerns.</p>

<pre><code>public class SearchService : ISearchService {
    private ISearchClient _searchClient;
    private readonly IAdSummaryMapper summaryMapper;

    public SearchService(ISearchClient searchClient, IAdSummaryMapper summaryMapper) {
        _searchClient = searchClient;
        this.summaryMapper = summaryMapper;
    }

    public HomeListViewModel Search(HomeSearchRequestViewModel searchRequest) {
        // map search request View Model to Elasticsearch request entity
        HomeESRequestMapper esRequestBuilder = new HomeESRequestMapper(searchRequest);
        var elasticsearchRequest = esRequestBuilder.GetESRequest();

        // do the search 
        ESResultContainer esResultContainer = _searchClient.SearchDocuments(elasticsearchRequest);

        // map ES result to view model
        List&lt;IAdSummary&gt; adSummaries = summaryMapper.MapAdSummaries(esResultContainer.AdResults);

        // put the summary View Models in HomeListViewModel container
        HomeListViewModel homeList = new HomeListViewModel(searchRequest.MainQuery) {
            SearchResult = {
                AdSummaries = adSummaries,
                ServerError = esResultContainer.ServerError
            },
            HomeSearchRequest = searchRequest
        };

        return homeList;
    }
}
</code></pre>

<p>The <code>IAdSummaryMapper</code> implementation can still make use of the static members. Assuming that <code>Mapper</code> is from Automapper, you should also use the instance API that has a <code>IMapper</code> abstraction.</p>

<pre><code>public class AdSummaryMapper: IAdSummaryMapper {
    private static readonly Dictionary&lt;string, Type&gt; AdSummaryTypes;

    static AdSummaryMapper() {
        // load ad summary types
        AdSummaryTypes = new Dictionary&lt;string, Type&gt;();

        IEnumerable&lt;Type&gt; typesInThisAssembly = Assembly.GetExecutingAssembly().GetTypes();

        foreach (Type type in typesInThisAssembly) {
            if (type.GetInterface(typeof(IAdSummary).ToString()) != null) {
                AdSummaryTypes.Add(type.Name.ToLower(), type);
            }
        }
    }

    public AdSummaryMapper(IMapper mapper) {
        this.mapper = mapper;
    }

    public List&lt;IAdSummary&gt; MapAdSummaries(List&lt;AdResult&gt; esResults) {
        List&lt;IAdSummary&gt; adSummaries = new List&lt;IAdSummary&gt;();
        foreach (var esResult in esResults) {
            // choose type of Ad Summery based on controller name
            type = GetTypeToCreate(esResult.Controller);
            var adSummary = mapper.Map(esResult, typeof(AdResult), type);
            adSummaries.Add((IAdSummary)adSummary);
        }
        return adSummaries;
    }

    private static Type GetTypeToCreate(string controller) {
        string adSummaryTypeName = controller.ToLower() + "summaryviewmodel";

        if (AdSummaryTypes.TryGetValue(adSummaryTypeName, out Type type)) {
            return type;
        }

        throw new Exception($"{adSummaryTypeName} type was not found, or it does not implement IAdSummary.");
    }
}
</code></pre>

<p>The instance class can still have a static constructor that will be invoked the first time an instance of the <code>AdSummaryMapper</code> class is initialized.</p>
    </div>