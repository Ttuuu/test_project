<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As a speedup, I was expecting some sorting to be performed on size; I'm a bit surprised to only see maps in this regard. HashMaps behave well, but I wonder how much faster it would be if the size was taken care of <em>before</em> trying to find stuff by comparison (of hashes or values).</p>

<p>One problem I have with your solution in general is the naming of the variables. Yes, an <code>index</code> is an <code>index</code> and a <code>vertice</code> is a <code>vertice</code>. But an index <em>of what?</em>. It doesn't help if you then throw everything on one heap; one method with a single helper method. The method goes 4 deep and contains other branches as well.</p>

<pre><code>class Solution {
</code></pre>

<p>Ah, yes, that's of course not a good distinguishing class name.</p>

<pre><code>int[] longestChain; // memoization for longest chain length for fromKey vertex
</code></pre>

<p>That doesn't seem right to me, just forward it using a parameter, but don't use fields unless necessary (e.g. this makes the function not-thread safe, while accomplishing nothing). Furthermore, in Java you don't declare anything until you're prepared to initialize it.</p>

<pre><code>if (words.length == 0) {
    return 0;
}
</code></pre>

<p>Using a special case for zero is nothing to be ashamed of. Zero is such a special number that the Romans didn't even have a representation of it. However, it does make sense to check if your algorithm doesn't run even if you have a zero (does it?).</p>

<pre><code>Map&lt;Integer, List&lt;Integer&gt;&gt; adjList = new HashMap&lt;&gt;(words.length);
</code></pre>

<p>To a new developer it is entirely unclear what <code>adjList</code> means here.</p>

<pre><code>for (int i = 0; i &lt; words.length; i++) {
    wordToIndex.put(words[i], i);
}
</code></pre>

<p>This should be performed in a separate method, so that you get the least amount of loops (and don't use <code>i</code> to mean separate things).</p>

<pre><code> String curr = word.substring(0, i) + word.substring(i+1, word.length()); // take one char out at a time for each word and see if it's part of words[]
</code></pre>

<p>What about <code>smallerWord</code> or similar as name instead of <code>curr</code>?</p>
    </div>