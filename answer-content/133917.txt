<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow">PEP8</a>(which is a Style Guide for Python Code) comments regarding your coding style and formatting:</p>

<h3>1. Spacing</h3>

<p>Between methods, you should have two blank lines.</p>

<pre><code>def questionOne():
    ....

def questionTwo():
    ....
</code></pre>

<h3>2. Naming conventions</h3>

<p>In PEP8 it's recommended to:</p>

<blockquote>
  <p>Use the function naming rules: lowercase with words separated by
  underscores as necessary to improve readability.</p>
</blockquote>

<p>That said, <code>questionNumber</code> would become <code>question_number</code></p>

<p>I've seen many people using also <code>camelCase</code> for variables, so that's rather a matter of preference.</p>

<p>The same rule applies for your methods:</p>

<p><code>questionOne()</code> -&gt; <code>question_one()</code></p>

<p>Put a space after each comma (<code>,</code>). It really helps when going through your code.</p>

<p>So this:</p>

<pre><code>print("\nSo far ",name,"You have got",right,"Answers right,",wrong,"Answers wrong and you have completed",questionNumber,"Questions\n")
</code></pre>

<p>Might be rewritten as:</p>

<pre><code>print("\nSo far ", name, "You have got", right, "Answers right,", wrong, "Answers wrong and you have completed",
      questionNumber, "Questions\n")
</code></pre>

<h3>3. Other comments</h3>

<p>Instead of <code>right = right + 1</code> you can use an augmented assignment: <code>right += 1</code>.</p>

<p>More, instead of doing this:</p>

<pre><code>print()
print("So far",name,"You have got",right,"Answers right,",wrong,"Answers wrong and you have completed",questionNumber,"Questions")
print()
</code></pre>

<p>You can do:</p>

<pre><code>print("\nSo far",name,"You have got",right,"Answers right,",wrong,"Answers wrong and you have completed",questionNumber,"Questions\n")
</code></pre>

<p>I don't like how you formatted the above <code>print()</code> but I'll come back to it later on.</p>

<p>Let's see what we've got so far using the modifications I mentioned so far:</p>

<pre><code>import time

wrong = 0
right = 0
question_number = 0
name = str(input("Please Enter your name: "))


def questions():
    def question_one():
        global right, wrong, question_number
        print("What is the population of New Zealand?")
        print("Is it A:6.7m B:3.2m C:5.1m or D:4.5m")
        ans = str(input())
        if ans == "D" or ans == "d" or ans == '4.5' or ans == '4':
            print("You got it right!")
            right += 1
        else:
            print("You got it wrong!")
            wrong += 1
        question_number += 1

    question_one()
    time.sleep(2)
    print("\nSo far", name, "You have got", right, "Answers right,", wrong, "Answers wrong and you have completed",
          question_number, "Questions\n")
    time.sleep(4)

    def question_two():
        global right, wrong, question_number
        print("What year did the first european set foot on New Zealand (Abel Tasman)")
        print("Is it A:1830 B:1543 C:1642 or D:1765")
        ans = str(input())
        if ans == "C" or ans == "c" or ans == '1642' or ans == '3':
            print("You got it right!")
            right += 1
        else:
            print("You got it wrong!")
            wrong += 1
        question_number += 1

    question_two()
    time.sleep(2)
    print("\nSo far ", name, "You have got", right, "Answers right,", wrong, "Answers wrong and you have completed",
          question_number, "Questions\n")
    time.sleep(4)

    def question_three():
        global right, wrong, question_number
        print("How many Kiwi are there left in New Zealand (Approx)")
        print("Is it A:2000 B:600 C:70,000 or D:100000")
        ans = str(input())
        if ans == "D" or ans == "d" or ans == '100000' or ans == '4':
            print("You got it right!")
            right += 1
        else:
            print("You got it wrong!")
            wrong += 1
        question_number += 1

    question_three()
    time.sleep(2)
    print("\nSo far ", name, "You have got", right, "Answers right,", wrong, "Answers wrong and you have completed",
          question_number, "Questions\n")
    time.sleep(4)

    def question_four():
        global right, wrong, question_number
        print("How many new babys where born in New Zealand in 2015")
        print("Is it A:61,000 B:208,000 C:98,000 or D:18,000")
        ans = str(input())
        if ans == "D" or ans == "d" or ans == '100000' or ans == '4':
            print("You got it right!")
            right += 1
        else:
            print("You got it wrong!")
            wrong += 1
        question_number += 1

    question_four()

questions()
</code></pre>

<h2>Digging deeper:</h2>

<h3>Globals</h3>

<p>Try to avoid using globals as much as possible. Global variables should be avoided because they inhibit code reuse. The reason they are bad is that they allow functions to have hidden (as in "non-obvious" and "undeclared") and thus hard to understand side effects. Also, this can lead to <a href="https://en.wikipedia.org/wiki/Spaghetti_code" rel="nofollow">Spaghetti code</a>.</p>

<h3>Duplicate code</h3>

<p>As you can see, your functions are pretty much the same, so you can use this and try making a single method. More, we can get rid of that ugly usage of inner methods. It's just not necessary in this case.</p>

<p>What I'd do is:</p>

<ul>
<li>Create three lists: one containing questions, one answers and another one which contains the correct answers.</li>
<li>Then create a simple method, and basically do what you've done, but in a shorter / nicer way.</li>
</ul>

<p>Let's see what we have:</p>

<pre><code>list_of_questions = ['What is the population of New Zealand ?',
                     'What year did the first european set foot on New Zealand (Abel Tasman) ?',
                     'How many Kiwi are there left in New Zealand (Approx) ?',
                     'How many new babys where born in New Zealand in 2015 ?']

lists_of_answers = [['A:1830', 'B:1543', 'C:1642', 'D:1765'],
                    ['A:1830', 'B:1543', 'C:1642', 'D:1765'],
                    ['A:2000', 'B:600',  'C:70,000', 'D:100000'],
                    ['A:61,000', 'B:208,000', 'C:98,000', 'D:18,000']]

list_of_correct_answers = [['D', 'd', '4.5', '4'],
                           ['C', 'c', '1642', '3'],
                           ['D', 'd', '100000', '4'],
                           ['D', 'd', '100000', '4']]


def questions():
    wrong = 0
    right = 0

    for each_question, each_answer, each_correct_answer in zip(list_of_questions, lists_of_answers, list_of_correct_answers):
        print(each_question + '\n' + ' '.join(each_answer))
        get_answer = raw_input()

        if get_answer in each_correct_answer:
            print('Your answer is correct!\n')
            right += 1
        else:
            print('That is not the answer I had in mind!\n')
            wrong += 1
        print('So far, you answered correctly to {0} questions and incorrectly to {1}. Good luck!'.format(right, wrong))


if __name__ == '__main__':
    questions()
</code></pre>

<p>You can observe that I also added <code>if __name__ == '__main__':</code>. The reason I did this is that you can also import your code as a module in another script and then run the main function if and when your program decides.</p>

<p>Next steps:</p>

<ul>
<li>Please try to be consistent when writing code.</li>
<li>Avoid printing to many things. And if you do so, try to review your grammar.</li>
</ul>
    </div>