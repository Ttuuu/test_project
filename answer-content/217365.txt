<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Code style</h2>
<ul>
<li><p>Use constants for variables that do not change. Eg <code>const sortedArray = [];</code></p>
</li>
<li><p>Don't include the type in the name, Eg <code>const sortedArray = [];</code> can be Eg <code>const sorted = [];</code></p>
</li>
<li><p>The default parameter in this case seams inappropriate as it is likely that <code>"JFK"</code> is not an origin in all calls to this function. If no origin is given one could assume that the first item in trips contains the origin.  <code>function sortByLinked(trips, origin = trips[0].from) {</code> which will throw an error if trips is empty so the function should not be called with an empty trips array if you don't pass the <code>from</code> parameter.</p>
<p>However in this example best to leave the default as <code>undefined</code> if not passed as that will return an empty array which is more fitting the input parameters.</p>
</li>
<li><p>The name <code>sort</code> is inappropriate as in JS it implies that the array be sorted in place, that all items be sorted (may not be possible).</p>
</li>
<li><p>You have declared <code>i</code> two times. As a <code>var</code> you should put the declaration at the top of the function and not in the <code>for</code> loop.</p>
</li>
<li><p>Rather than use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter" rel="noreferrer"><code>Array.filter</code></a> you can use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find" rel="noreferrer"><code>Array.find</code></a>. It will find the first instance.</p>
</li>
<li><p>Using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of" rel="noreferrer"><code>for...of</code></a> rather than <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for" rel="noreferrer"><code>for(;;)</code></a> reduces the code complexity.</p>
</li>
<li><p>No point continuing the search inside the for loops when you have found a match. Use the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/break" rel="noreferrer"><code>break</code></a> token to stop a loop early</p>
</li>
<li><p>Put a space between <code>if</code> and <code>(</code></p>
</li>
<li><p>Don't forget to add the <code>;</code> where appropriate. It is missing from the call <code>sortByLinked(trips)</code></p>
</li>
<li><p>You call the origin <code>origin</code> and <code>from</code> this can get confusing. Keep the naming unambiguous. As the trip items use <code>from</code> then that would be the better name for the second input argument.</p>
</li>
</ul>
<p>Using the above points to modify your code we get</p>
<pre><code>function tripFrom(trips, from) {
  const sorted = [];
  const first = trips.find(trip =&gt; trip.from === from);
  sorted.push(first);

  for (const trip of trips) {
    if (first.to === trip.from) {
      sorted.push(trip);
      break;
    }
  }
  for (const trip of trips) {
    if (sorted[sorted.length - 1].to === trip.from) {
      sorted.push(trips);
      break;
    }
  }
  return sorted;
}

sortByLinked(trips, "JFK");
</code></pre>
<p>This is still not a good solution. Its not at all <a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself" rel="noreferrer">DRY (don't repeat yourself)</a> and is hard coded to a single use case.</p>
<h2>Improving the function.</h2>
<p>It can all be done within a single loop and work for any length array.</p>
<p>To create the function we must add some constraints on the array <code>trips</code> and what to do when we encounter any problems.</p>
<ol>
<li>That the array <code>trips</code> contains objects that each have the property <code>from</code> and <code>to</code> that are correctly formatted static strings. The resulting array is erroneous or indeterminate if not so.</li>
<li>That the array does not contain circular trips shorter than the array length.</li>
<li>That a complete trip length is no longer than the array, or when a matching <code>trip.to</code> can not be found. The returned array can be 0 to <code>trips.length</code> in size.</li>
<li>Locations are case sensitive.</li>
<li>If there is more than one matching <code>trip.from</code> it is assumed that the first match in trips is the correct one. (It would be interesting to extract the longest possible trip from? or the shortest trip that returns to the origin?)</li>
</ol>
<h2>Example</h2>
<pre><code>function tripFrom(trips, from) {
    const result = [];
    while (result.length &lt; trips.length) {
        const trip = trips.find(trip =&gt; trip.from === from);
        if (!trip) { break }
        from = trip.to;
        result.push(trip);
    }
    return result;
}
tripFrom(trips, "JFK");
</code></pre>
<p>Or if it is known that the trip is the same length as the input array.</p>
<pre><code>function tripFrom(trips, from) {
    const res = [];
    while (res.length &lt; trips.length) {
        from = (res[res.length] = trips.find(trip =&gt; trip.from === from)).to;
    }
    return res;
}
tripFrom(trips, "JFK");
</code></pre>
<p>It is unclear if you want the array sorted in place. If that is a requirement then the above version can be modified to do that by simply copying the results array <code>res</code> to the <code>trips</code> array. You can empty an array by setting its length to zero. The <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax" rel="noreferrer">spread <code>...</code> operator</a> in this case spreads the array items over the functions arguments <code>trips.push(...res)</code> thus pushing all the items to the array.</p>
<pre><code>function tripFrom(trips, from) {
    const res = [];
    while (res.length &lt; trips.length) {
        from = (res[res.length] = trips.find(trip =&gt; trip.from === from)).to;
    }
    trips.length = 0; 
    trips.push(...res);
    return trips;
}
tripFrom(trips, "JFK");
</code></pre>
    </div>