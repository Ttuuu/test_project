<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Supplementing my earlier answer (rather than editing it and negating the comments so far). After the comments exchange between myself and Cris Luengo, I thought there was some additional information that would be useful in this Code Review.</p>

<p>A key point made by Cris is that a pure approach to OOP is not appropriate for this simple example. In the real world I would largely agree, although saying a <code>Dog</code> can be inherited from <code>Kennel</code> is stretching the maintainability a tad. I will offer some revised code below on the basis that:</p>

<ul>
<li>This is part of a graduated learning exercise</li>
<li>The code base will be used later to expand upon OOP fundamentals</li>
<li>A pure OOP approach is warranted.</li>
</ul>

<p>Cris's excellent points about code efficiency must be considered if trying to do this in the real world.</p>

<pre><code>class Kennel
{
public:
    Kennel() { };
    ~Kennel(){
        for (auto i : KennelList) {
            delete i;
        }
    };
    void ReceiveAnimal(Mammal * newAnimal){
                KennelList.push_back(newAnimal);
    };
    void RollCall(){
        for (unsigned int i = 0; i &lt; KennelList.size(); ++i){
            KennelList[i]-&gt;makeSound();
        }
    };
private:
    std::vector &lt;Mammal*&gt; KennelList;
protected:
};

class Mammal
{
public:
    Mammal(std::string newName){
        name = newName;
    }
    ~Mammal() { };
    void makeSound()
    {
        std::cout &lt;&lt; name &lt;&lt; " says " + noise &lt;&lt; std::endl;
    };
private:
protected:
    std::string name;
    std::string noise;
};

//Dog inherits Mammal
class Dog :public Mammal
{
public:
    Dog(std::string dogName): Mammal(dogName)
    {
        noise = "Woof";
        name = dogName;  // I don't know the language well enough, I suspect this line is not required.
    }
    //~Dog() { };
   };
 //Cat inherits Mammal
class Cat :public Mammal
{
public:
    Cat(std::string catName): Mammal(catName)
    {
        noise = "Meow";
        name = catName;
    }
    //~Cat() { };
   };
</code></pre>

<p>I may have been slightly inefficient in my coding above, I don't know the language well enough to deal with the abstracted destructor and the abstracted constructor. But Visual Studio did not complain (but I have not run it).</p>

<p>The main would now look like:</p>

<pre><code>int main()
{
    Kennel kennel;

    kennel.ReceiveAnimal(new Cat("Garfield"));
    kennel.ReceiveAnimal(new Dog("Odie"));
    kennel.ReceiveAnimal(new Dog("Pluto"));
    kennel.ReceiveAnimal(new Cat("Felix"));
    kennel.ReceiveAnimal(new Cat("Sylvester"));
    kennel.ReceiveAnimal(new Cat("Scratchy"));
    kennel.ReceiveAnimal(new Dog("Scooby Doo"));
    kennel.ReceiveAnimal(new Cat("Puss in Boots"));
    kennel.ReceiveAnimal(new Dog("Goofy"));
    kennel.ReceiveAnimal(new Dog("Old Yeller"));

    kennel.RollCall();

}
</code></pre>

<p>AN advantage of this approach is that if you already have an animal, you can now just pass it through <code>kennel.ReceiveAnimal(myExistingAnimal);</code></p>

<p>I have done this extended answer to look at pure OOP and code maintainability as if this was a large endeavour (again, Cris's points about the level of effort for this simple example should be considered). </p>

<p>If the Kennel decided to take new animals (e.g. a Fox), then simply add a new class (which can be as simple as the following code):</p>

<pre><code>class Fox :public Mammal
{
public:
    Fox(std::string foxName): Mammal(foxName)
    {
    noise = "Ha Ha Ha! Boom! Boom!";
    } // see my previous notes about inexperience with this language and assuming name will be handled by superclass.
   };
</code></pre>

<p>Mammals give birth. Using the full OOP fundamentals, you can modify the superclass with a new method, which means the subclasses will have this new functionality. The bit I don't know because of my inexperience is how to constrain the new method to ensure it returns a new instance of the subclass rather than the superclass.</p>

<pre><code>class Mammal
{
public:
    Mammal(std::string newName){
        name = newName;
    }
    ~Mammal() { };
    void makeSound()
    {
        std::cout &lt;&lt; name &lt;&lt; " says " + noise &lt;&lt; std::endl;
    };
    Mammal giveBirth(std::string newName) {
        return new Mammal(newName);  // pardon my ignorance here but you get the gist
   };

private:
protected:
    std::string name;
    std::string noise;
};
</code></pre>
    </div>