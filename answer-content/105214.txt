<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Well, it's a large chunk of code so here just a few things which came to mind when skimming over it:</p>

<ol>
<li><p>You don't have any unit tests (at least none that I could find on github). You should start writing them. I suspect it will be a PITA to do so which is good since it will highlight refactoring targets plus it will provide regression tests for when you break things while refactoring. Yes it means you'll have to invest time in it without making actual progress on features but if you'd like the project to grow and more people contributing to it you can easily put yourself into a world of pain if you don't.</p></li>
<li><p>Check all your <code>public</code>/<code>private</code> modifiers and make sure that only things which need to be <code>public</code> actually are. In large blobs like these I often find public methods or properties which aren't used anywhere outside of the class (or not even there). Anything public is a lot harder to change since it will potentially affect a lot of calling code. Things which are private can be changed around at will (as long as you don't break anything, see unit testing above).</p></li>
<li><p>There is no documentation on the public interface of the class so you are pretty much resigned to read the code if you want to use it.</p></li>
<li><p>Related to this: The public interface of this class is very broad and it's absolutely not obvious how it is meant to be used. I assume methods are meant to be called in a certain order and in certain states or otherwise things will go wrong. Also having a public dictionary called <code>Constants</code> which is apparently everything but constant seems like an oxymoron to me.</p></li>
<li><p>I tend to start refactoring these kind of things in baby steps. A good candidate seems to the be <code>CallStack</code>. Code like this:</p>

<blockquote>
<pre><code>if (CallStack.Count &gt; 0 &amp;&amp;
      (CallStack.Peek().Scope.Symbols.Contains(name) || CallStack.Any(x =&gt; x.Locals.ContainsKey(name))))
       CallStack.First(x =&gt; x.Locals.ContainsKey(name) || x.Scope.Symbols.Contains(name))
                .Locals.Remove(name);
</code></pre>
</blockquote>

<p>makes things very hard to read and is scattered around in various places. Create a <code>Callstack</code> class, define the interface to it in terms of how the Interpreter should interact with it on the most basic level. This should clean up some code.</p></li>
<li><p>I'm not 100% sure what exactly the purpose of the <code>Accept</code> methods is and how they are related to the <code>interpret*</code> methods and how it is all related to <code>Execute</code>. So at the first glance it seems your <code>Interpreter</code> has at least two responsibilities: Turn the AST nodes into <code>Hassium*</code> nodes and execute the <code>Hassium*</code> nodes. This is at least one responsibility too much and turning the AST nodes into <code>Hassium*</code> nodes should probably be extracted.</p></li>
<li><p>Also reading a lot of code like <code>if (evaluated is HassiumArray || evaluated is HassiumString)</code> seems like a step backwards in the age of OOP.</p></li>
</ol>
    </div>