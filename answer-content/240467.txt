<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'll answer some of the questions in your code comments.</p>

<hr>

<pre><code>T&amp; front(); // actually I don't see why would we need this function to be
            // a reference, I think it should be only a const reference,
            // any insight?
</code></pre>

<p>This is the non-const version of <code>front()</code>, so it should allow the vector to be modified in some way. This method returns a non-const reference so that the item at the front can be modified.</p>

<pre><code>std::vector&lt;int&gt; numbers;
numbers.push_back(2);
numbers.front() += 10;
</code></pre>

<p>The last line would not be possible if <code>front()</code> returned a const reference.</p>

<hr>

<pre><code>template&lt;typename... ARGS&gt;
void emplace_back(ARGS&amp;&amp;... args); // since C++17 the std::vector::emplace_back()
                                   // function type is a reference T&amp;, why is
                                   // that? what does this change brings to the
                                   // table?
</code></pre>

<p>This change was for the convenience of the programmer. Emplace methods take arguments to a constructor, but the constructed object was not immediately accessible. So, programmers would have to do the following to get the just-constructed object:</p>

<pre><code>things.emplace_back(arg1, arg2, arg3);
auto&amp; last_thing = things.back(); // or, constantly type things.back()
</code></pre>

<p>Now, this can be reduced to a single line.</p>

<pre><code>auto&amp; last_thing = things.emplace_back(arg1, arg2, arg3);
</code></pre>

<p>I've seen some people say that returning <code>void</code> was a feature. The reason for this being that references to items contained in a vector are invalidated when the vector is reallocated (e.g., calling <code>push_back()</code> when <code>size() == capacity()</code>), so the returned reference can be fragile if not tracked carefully.</p>

<hr>

<pre><code>template&lt;typename T&gt;
inline void Vector&lt;T&gt;::pop_back()
{
    --v_size;

    // what if I use this below, what would be happening and what would be the difference??
    /*   values[--v_size].~T(); */
}
</code></pre>

<p>If you call the commented version of <code>pop_back()</code> and then the vector goes out of scope, the destructor of the vector element will be called again on the same item, most likely crashing your program. The <code>delete [] values;</code> calls the destructor of each of the items in the vector.</p>

<hr>

<pre><code>// see https://stackoverflow.com/questions/3279543/what-is-the-copy-and-swap-idiom
</code></pre>

<p>The copy-and-swap idiom is great when you want the strong exception guarantee: if assignment fails, no data is changed. It's as if the assignment was never attempted. There is a trade-off. Because of the copy required by this idiom, it is slower and there are optimizations that cannot be done by the compiler. This is just a reminder to think about what your code needs before automatically picking a common practice.</p>

<p>For example:</p>

<pre><code>template&lt;typename T&gt;
inline Vector&lt;T&gt;&amp; Vector&lt;T&gt;::operator=(Vector&lt;T&gt; src)
{
    swap(*this, src);

    return *this;
}
</code></pre>

<p>If the vector being assigned to already has enough space, then there's no need to allocate memory (which is being done by the by-value parameter). A const-ref version might look like this:</p>

<pre><code>template&lt;typename T&gt;
inline Vector&lt;T&gt;&amp; Vector&lt;T&gt;::operator=(const Vector&lt;T&gt;&amp; src)
{
    if(src.size() &lt;= capacity())
    {
        std::copy(src.cbegin(), src.cend(), begin());
        v_size = src.size();
    }
    else
    {
        auto src_copy = src;
        swap(*this, src_copy);
    }

    return *this;
}
</code></pre>

<p>The first branch reuses already allocated memory, so it can be much faster.</p>

<p>Now, if assignment can throw, then it might be the case that the assignment is left half done if an exception is thrown. If this cannot be allowed to happen, use copy-and-swap and take the performance penalty.</p>

<ul>
<li>Here's a great talk about this by C++ expert Howard Hinnant: <a href="https://www.youtube.com/watch?v=vLinb2fgkHk" rel="nofollow noreferrer">https://www.youtube.com/watch?v=vLinb2fgkHk</a>

<ul>
<li>Same video, Skipped ahead to the copy-and-swap commentary: <a href="https://youtu.be/vLinb2fgkHk?t=2127" rel="nofollow noreferrer">https://youtu.be/vLinb2fgkHk?t=2127</a></li>
</ul></li>
</ul>

<hr>

<p>One last thing: check if your for-loops can be replaced by something out of <a href="https://en.cppreference.com/w/cpp/algorithm" rel="nofollow noreferrer"><code>&lt;algorithm&gt;</code></a>. In your case, look at <a href="https://en.cppreference.com/w/cpp/algorithm/copy" rel="nofollow noreferrer"><code>std::copy()</code></a> and <a href="https://en.cppreference.com/w/cpp/algorithm/fill" rel="nofollow noreferrer"><code>std::fill()</code></a>.</p>

<hr>

<hr>

<p>Answers to follow-up questions:</p>

<blockquote>
  <p>I have been going over the video you gave me the link (2nd one), in the talk Howard Hinnant said that the solution is default everything, wouldn't that create a shallow copy issue?</p>
</blockquote>

<p>Yes, if a class contains pointers and is responsible for deleting them ("owning pointers" in modern C++ parlance), then the default copy constructor and default assignment operator (as well as their move versions) will do the wrong thing. Your vector class has such pointers, so you need to follow the <a href="https://en.cppreference.com/w/cpp/language/rule_of_three" rel="nofollow noreferrer">Rule of 5</a>, that if you need to write custom version of any of the following, then you probably need to write a custom version of all of them: destructor, copy constructor, move constructor, copy assignment operator, move assignment operator.</p>

<p>Your other choice is to replace members that cause problems (non-smart pointers that need deletion, a.k.a., "raw pointers") with smart pointers that handle all of this automatically. That way, the default versions of the constructors/destructors/assignment operators all do the correct thing by default with no code that needs to be written by you. Then you would be following the <a href="https://en.cppreference.com/w/cpp/language/rule_of_three" rel="nofollow noreferrer">Rule of 0</a>.</p>

<p>In all cases, you need to consider whether the default versions of the special methods do the correct thing. If not, you have two choices: write the correct methods yourself, or change the class members so that the default methods do the correct thing.</p>

<blockquote>
  <p>Is the code you provided me about the copy constructor the fix for this?</p>
</blockquote>

<p>No. The purpose of my version of the copy-assignment operator was to be more efficient and faster than the copy-and-swap idiom version. Your code that uses the copy-and-swap idiom is also a correct fix to the shallow copy problem.</p>

<blockquote>
  <p>Shouldn't the line be <code>if(src.capacity() &lt;= capacity())</code> instead of <code>if(src.size() &lt;= capacity())</code>?</p>
</blockquote>

<p>In one sense, the capacity of a vector is an implementation detail. Everything with an index larger than <code>size() - 1</code> and up to <code>capacity() - 1</code> is garbage data, so there's no need to make room for it in the vector being assigned to. Consider the following stupid code:</p>

<pre><code>vector two_numbers = {1, 2};
vector million_numbers{};
for(auto i = 0; i &lt; 1'000'000; ++i)
    million_numbers.push_back(i);
while(million_numbers.size() &gt; 2)
    million_numbers.pop_back()
two_numbers = million_numbers;
</code></pre>

<p>Now, the capacity of <code>million_numbers</code> is at least one million and the capacity of <code>two_numbers</code> is two. Should memory be allocated for a million numbers when only two will be copied?</p>

<p>In fact, my version of the copy assignment operator isn't even optimal. In the branch where the <code>src.size()</code> is greater than the <code>*this</code> capacity, enough memory is allocated to store the capacity of the <code>src</code> vector instead of just the size due to the copying of <code>src</code>.</p>
    </div>