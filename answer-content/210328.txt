<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Code analysis</h3>

<p>Let's run through your code bit by bit.</p>

<p>First a note about paths: use verbatim strings to disable escape sequences, so you don't need to escape those slashes: <code>@"C:\myfile.m4a"</code> instead of <code>"C:\\myfile.m4a"</code>.</p>

<hr>

<pre><code>public static bool WriteAaray(string originalFile, List&lt;float&gt; myFloatPoints)
{
</code></pre>

<ul>
<li><code>originalFile</code> is a path, not a file (stream), and I'm not sure why it's called 'original', so I would rename it to <code>filePath</code>.</li>
<li>I'd also fix the typo in <code>Aaray</code>.</li>
</ul>

<hr>

<pre><code>    FileStream inputFileStream = null;
    inputFileStream = new FileStream(originalFile, FileMode.Open);
</code></pre>

<ul>
<li>The 'input' in <code>inputFileStream</code> is misleading: you're not reading from this file, you're writing to it. I'd rename it to just <code>file</code>.</li>
<li>There's no need for that first line: just write <code>var file = new ...</code> instead.</li>
<li>File streams are disposable, so it's better to use a <code>using</code> statement here.</li>
<li>Note that the <code>File</code> class contains several useful methods, such as <code>File.Open</code>, or the very convenient <code>File.AppendAllText</code>.</li>
</ul>

<hr>

<pre><code>    var length = inputFileStream.Length;
    inputFileStream.Seek(length, SeekOrigin.Begin);
</code></pre>

<ul>
<li>There's no need for that local variable (<code>length</code>): just pass <code>file.Length</code> directly into <code>Seek</code>.</li>
<li>Instead of manually seeking, consider opening the file with <code>FileMode.Append</code>. Not only does that seek to the end for you, it also creates the file if it doesn't exist yet (in your code that'll throw an exception, which will crash your program because you're not catching it).</li>
</ul>

<hr>

<pre><code>    StringBuilder mystring = new StringBuilder();
    string myImpPoints = "[MYIMPPOINTS]";
    mystring.Append(myImpPoints);
</code></pre>

<ul>
<li>While string builders are often more efficient than string concatenation, in this case you're only concatenating two strings (this header and the result of that <code>string.Join</code> call), so a string builder won't help here - it might even be less efficient. Note that <code>string.Join</code> uses a string builder internally, and with 5000 floats it certainly is useful there.</li>
<li>Again, no need for a local variable (<code>myImpPoints</code>) - just pass it into <code>Append</code> directly.</li>
</ul>

<hr>

<pre><code>    var points = string.Join(",", myFloatPoints.Select(f =&gt; f.ToString()));
    mystring.Append(points);
</code></pre>

<ul>
<li>There's no need for that <code>Select</code> call - one of the overloads of <code>string.Join</code> takes an <code>IEnumerable&lt;T&gt;</code>, so you can pass your list of floats in directly.</li>
<li>On the other hand, this only gives you 7 digits of precision. If that's a problem, then you should keep the <code>Select</code> part, but be sure to specify <code>"R"</code> (round-trip) or <code>"G9"</code> (<a href="https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-numeric-format-strings#GFormatString" rel="noreferrer">recommended for performance reasons</a>) as the to-string format.</li>
<li>Again, no need for a local variable (<code>points</code>).</li>
<li>Note that formatting and parsing string representations of floats is slower than writing and reading them as binary data.</li>
</ul>

<hr>

<pre><code>    byte[] byteArray = Encoding.ASCII.GetBytes(mystring.ToString());
    inputFileStream.Write(byteArray, 0, byteArray.Length);
    inputFileStream?.Close();
</code></pre>

<ul>
<li>Consider using a <code>StreamWriter</code> instead. That takes care of encoding and buffering, so you don't have to mess with string builder buffers and byte arrays and all that.</li>
<li>With a <code>using</code> statement around the file stream, you don't need to call <code>Close</code> manually here. Either way, you don't need an 'elvis operator' here - <code>inputFileStream</code> obviously won't be null.</li>
</ul>

<hr>

<pre><code>    return true;
}
</code></pre>

<ul>
<li>You're returning a boolean to indicate success, but that's actually somewhat misleading: this method <em>can</em> fail, but instead of returning false (which I would expect, with such a method signature) it'll throw an exception. Either catch it and return false (but then the caller won't know why it failed), or don't return anything and let the method throw (but document it).</li>
</ul>

<h3>Alternatives</h3>

<p>5000 floats isn't a whole lot, so unless you need to create a lot of these files, the following code should be fast enough:</p>

<pre><code>File.AppendAllText(filePath, "[MYIMPPOINTS]" + string.Join(",", values), Encoding.ASCII);
</code></pre>

<p>If, after actually measuring performance, that turns out to be too slow, then here's what your code could look like with the above notes taken into account:</p>

<pre><code>using (var file = File.Open(originalFile, FileMode.Append, FileAccess.Write))
using (var writer = new StreamWriter(file, Encoding.ASCII)) // buffer size can be adjusted if necessary
{
    writer.Write("[MYIMPPOINTS]");

    if (values.Count &gt; 0)
        writer.Write(values[0]);

    for (int i = 1; i &lt; values.Count; i++)
    {
        writer.Write(',');
        writer.Write(values[i]);
    }
}
</code></pre>
    </div>