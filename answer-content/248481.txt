<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Proper capitalization of SHA1</h1>
<p>The algorithm's name is SHA1, not Sha1, so I think it is better to use all caps here. That makes grepping the code for a particular algorithm easier.</p>
<h1>You only need one class per hash algorithm</h1>
<p>Indeed, as you mentioned in your own answer, the <code>Sha1</code> class seems superfluous, since it doesn't store any state. However, instead of creating static functions inside a <code>Sha1</code> namespace, you could make those functions member functions of the class that holds the actual state. This avoids repeating the type; for example:</p>
<pre><code>Sha1::DigestStore digest;
Sha1::hash("Bob", digest)
</code></pre>
<p>Becomes:</p>
<pre><code>Sha1::DigestStore digest;
digest.hash("Bob");
</code></pre>
<h1><code>Sha1::Digest</code> vs. <code>Digest&lt;Sha1&gt;</code></h1>
<p>I think having a namespace <code>Sha1</code> with a <code>DigestStore</code> and functions inside it is a bad choice. There is more you can do with SHA1 than just create plain hashes, for example you might want to create a <a href="https://en.wikipedia.org/wiki/HMAC" rel="nofollow noreferrer">HMAC</a> instead of a plain hash. So you would have to add functions to create a HMAC to each namespace that implements a hash algorithm. It's much better to have classes <code>Digest</code> and <code>HMAC</code> that are templated on the hash algorithm.</p>
<h1>Allow hashes to be updated</h1>
<p>The code you wrote only performs one-shot conversions of some input to a hash. However, it is not uncommon for programs to not have all the data they want to create a hash for in a single, contiguous memory region. In those cases, you want to write:</p>
<pre><code>std::ostream output;
Digest&lt;SHA1&gt; digest;

digest.add("Header");
digest.add("Data");
digest.add("Footer");

output &lt;&lt; digest.view();
</code></pre>
<p>Some digest algorithms might require you to call some function to calculate the final hash value after adding all the data. You could add an explicit <code>finish()</code> function or call this implicitly when accessing the digest result.</p>
<h1>Getting the result out</h1>
<p>You internally store the hash as a <code>std::array&lt;std::byte, size&gt;</code>. That's the proper thing to do. I don't think it is necessary to provide any member functions other than one that gets you a <code>const</code> reference to that array. It's up to the caller to convert it to whatever form they way. A <code>std::array</code> is already implicitly convertible to a <code>std::span</code>. And once you have a reference to the array, it's easy to get the begin and end iterators from it.</p>
<h1>Add comparison operators</h1>
<p>It's quite common to want to check whether two hashes are identical, so it would be helpful to at least define <code>operator==()</code> and <code>operator!=()</code> to the class that holds the digest result.</p>
    </div>