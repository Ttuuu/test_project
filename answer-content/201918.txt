<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Manually assigning column letters</h3>
<blockquote>
<p>I have 4 variables for the specific columns I will be referencing
(will probably need to add more before the end of this code). I
manually assigned a letter because the columns will rarely if ever
change. I then put a formula in to assign a variable to the column #</p>
</blockquote>
<p>If you need the column number, just make the column numbers e.g. -</p>
<pre><code>Const TOTAL_TIME As Long = 8
Const CALL_NUMBER As Long = 3
</code></pre>
<p>This saves you from running the <code>Asc</code> and it also makes it more clear when assigning the ranges. Now you set it up top and if you need to change it, just change it there.</p>
<p>So it would be</p>
<pre><code>Const TOTAL_TIME As Long = 8
Const CALL_NUMBER As Long = 3
Const TYPE_COLUMN As Long = 13
Const NUMBER_CALLED As Long = 9
Const UNIQUE_COLUMN As Long = 14
Const DURATION_COLUMN As Long = 15
Const LAST_DIGIT_COLUMN As Long = 16
</code></pre>
<hr>
<h3>Variables</h3>
<p>Always turn on <code>Option Explicit</code>. You can have it automatically by going to Tools -&gt; Options in the VBE and checking the <strong>Require Variable Declaration</strong> option. This way if you have any variables not defined, the compiler will let you know.</p>
<p>Variables <code>infi</code>, <code>filename</code> and <code>cafi</code> are not declared.</p>
<p>When you don't define your variable, VBA will declare it as a <em>Variant</em> type that can hold any type of data. While this may be more flexible, it adds processing time to your macro as VBA decides or tests for the type. Additionally, since a Variant can be any type of data, you may miss out on valuable troubleshooting information on <em>Type Mismatch</em></p>
<p>Additionally, your naming could be improved. See how you needed comments next to all your variable declarations?</p>
<blockquote>
<pre><code>Dim TT As String '/ Column Letter for Total Time in seconds
Dim TTN As Long '/ Column # for Total time in seconds
Dim TTR As Range '/ Column as Range Total time

Dim CN As String '/ Column Letter for Call Number
Dim CNN As Long '/ Column # for Call Number
Dim CNR As Range '/ Column as Range Call Number
</code></pre>
</blockquote>
<p>Comments - <a href="http://blog.codinghorror.com/code-tells-you-how-comments-tell-you-why/" rel="nofollow noreferrer">"code tell you how, comments tell you why"</a>. The code should speak for itself, if it needs a comment, it might need to be made more clear. If not, the comment should describe <em>why</em> you're doing something rather than <em>how</em> you're doing it. Here are a <a href="http://programmers.stackexchange.com/a/254979/125931">few reasons</a> to avoid comments all together.</p>
<p>Use the variable's name to tell us what it does. <code>TTN</code> means nothing to the reader - he/she needs to go back up to look at the comment. Whereas if it was just called <code>totalTimeColumnNumber</code> (for instance) it would be clear.</p>
<h3>Error Handling</h3>
<p>This line right here</p>
<blockquote>
<pre><code>Set cafi = ActiveWorkbook.Sheets("Calls")
</code></pre>
</blockquote>
<p>needs some error handling. What if it doesn't exist? Furthermore, Worksheets have a <code>CodeName</code> property - View Properties window (<kbd>F4</kbd>) and the <code>(Name)</code> field (the one at the top) can be used as the worksheet name. This way you can avoid <code>Sheets("calls")</code> and instead just use <code>Calls</code>.</p>
<h3>Select</h3>
<blockquote>
<pre><code>cafi.Activate
Cells(1, 1).Select
</code></pre>
</blockquote>
<p>Be sure to avoid things like <code>.Select</code> - it just slows the code down by needing to fiddle with the spreadsheet while doing everything else behind the scenes. There's a good question on StackOverflow <a href="http://stackoverflow.com/questions/10714251/how-to-avoid-using-select-in-excel-vba-macros">addressing this</a>. Essentially, since you're doing everything in the development environment, there's no need to leave it. Just get the data, do your stuff and spit it back out.</p>
<h3>Last Row</h3>
<blockquote>
<pre><code>Set TTR = .Range(.Cells(1, TTN), .Cells(1, TTN).End(xlDown))
</code></pre>
</blockquote>
<p>You pretty much never want to use <code>xlDown</code> when defining a range. There is a <a href="http://stackoverflow.com/a/11169920/1161309">standard</a> way to find lastRow and lastColumn. That post explains why.</p>
<h3>Readability</h3>
<p>Take this <code>if</code> for instance</p>
<blockquote>
<pre><code>If Cells(TyLo, TTN).Value &gt; 1 And Cells(TyLo, TTN).Value &lt; 30 Then
    Cells(TyLo, TYN + 2).Value = "&gt;1"
ElseIf Cells(TyLo, TTN).Value &gt; 30 And Cells(TyLo, TTN).Value &lt; 60 Then
    Cells(TyLo, TYN + 2).Value = "&gt;30"
ElseIf Cells(TyLo, TTN).Value &gt; 60 And Cells(TyLo, TTN).Value &lt; 600 Then
    Cells(TyLo, TYN + 2).Value = "&gt;60"
ElseIf Cells(TyLo, TTN).Value &gt; 600 Then
    Cells(TyLo, TYN + 2).Value = "&gt;600"
Else: Cells(TyLo, TYN + 2).Value = "Missed Call"
End If
</code></pre>
</blockquote>
<p>Can you look at that and tell what's happening - because I can't. Even just a simple change in structure would make it more readable</p>
<pre><code>Dim printOut As String
Dim length As Long
length = Sheet1.Cells(TyLo, tnn).Value
Select Case length
    Case 0
        printOut = "Missed Call"
    Case 1 To 19
        printOut = "&gt;1"
    Case 30 To 59
        printOut = "&gt;30"
    Case 60 To 599
        printOut = "&gt;60"
    Case Else
        printOut = "&gt;600"
End Select
Sheet1.Cells(TyLo, tnn + 2).Value = printOut
</code></pre>
<p>I know that doesn't do exactly what yours does, but without the data I can't make many inferences.</p>
    </div>