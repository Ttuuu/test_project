<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>Do you see any flaws in my code and anything that could be improved?</p>
</blockquote>

<p><strong>Segregate code</strong></p>

<p>Splitting into <code>bin_add.c</code>, <code>bin_add.h</code>, <code>main.c</code> would help delineate what is the code, its user interface and test code.</p>

<p><strong>No compilation errors</strong></p>

<p>As posted now, I did not notice any warnings either- good.</p>

<p><strong>Some comments would help</strong></p>

<p><code>gpp()</code> would benefit with at least a line comment about its goal, expected input, output, etc.  Same for <code>bin_add()</code> - which should alert that the return pointer needs to be free'd.  This becomes even more important when the user only has access to the declaration in a <code>.h</code> file.</p>

<p>Commenting some of the block of code would help too.</p>

<p><strong>When to shift</strong></p>

<p>When there is not a final carry, code shifts <code>Ol[]</code>.  As a final carry with this FP-like code is more rare, I'd shift when there is a carry.</p>

<p><strong>Collapsing</strong></p>

<p>With floating point strings, I expect code to drop trailing zero digits to the right of the <code>'.'</code>.  </p>

<p>Leading zero digits are possible based on input.  Perhaps eat those too with an early <code>while (*a == '0') a++;</code> and with <code>b</code>. - depends on coding goals though. </p>

<p><strong>Inconsistent bracket style</strong></p>

<pre><code>//                                v ?? 
pp[i] = pp[i] ? ll[i] - pp[i] : 0;}
</code></pre>

<p>Hopefully code is auto-formatted.</p>

<p><strong>Inconsistent indentation</strong></p>

<pre><code>if((Ol[0] = '0' + xc) == '1') return Ol;
//  v   Why indented here?
    for (size_t i = 0; i &lt;= ML - lO + 1; ++i)
        Ol[i] = Ol[lO + i];
</code></pre>

<p>This implies code is not auto formatted.  Save time, and use auto-formatting. </p>

<p><strong>Terse digit like object names lose clarity</strong></p>

<p>The short object names <code>OO, lO, O, Ol, ll</code> look too much like <code>00, 10, 0, 01, 11</code>.  Consider more clear alternatives.</p>

<p>Other examples:<br>
<code>int xc</code> as the carry bit looks more clear as <code>int carry</code>.
<code>size_t ML</code> more meaningful as <code>MaxLength</code>.</p>

<p><strong>Input error detection</strong></p>

<p>I'd suggest a separate <code>bool bin_valid(const char *s)</code> and let <code>bin_add()</code> assume  valid strings <code>a,b</code>.  This would help simplify - a <code>NULL</code> return would only indicate out-of-memory.</p>

<p><strong>Good use of cast to ward off warnings</strong></p>

<pre><code>return n  ? (size_t)(n - s + 1) : 0;
//          ^------^
</code></pre>

<p><strong>Misc.</strong></p>

<p><code>ops[2], cc[2]</code> could be local to <code>for (size_t i = ML; i; --i) {</code></p>

<p>Good use of <code>const</code>.</p>

<p>Good use of <code>size_t</code>.</p>

<p>Personal preference: Consider <code>char *Ol = calloc(ML + 2, sizeof *Ol);</code></p>

<hr>

<p>Main</p>

<p><strong>Do not assume <code>EOF</code> is -1</strong></p>

<p>Simply test if the <code>scanf()</code> result is 2.</p>

<pre><code>// while (scanf(" %80[0.1] %80[0.1]", a, b) &amp; 1 &lt;&lt; 1) {
while (scanf(" %80[0.1] %80[0.1]", a, b) == 2) {
</code></pre>

<p><strong>ENOMEM</strong></p>

<p><code>ENOMEM</code> is not part of the standard C.</p>

<p><strong>Test cases</strong></p>

<p>Some specific example test cases would be useful.</p>

<blockquote>
  <p>maybe even C90/C89</p>
</blockquote>

<p>Not quite.</p>

<p>Lots of <code>error: 'for' loop initial declarations are only allowed in C99 or C11 mode</code> problems</p>

<p><code>warning: control reaches end of non-void function [-Wreturn-type]</code></p>

<p><code>error: redefinition of 'i'</code></p>
    </div>