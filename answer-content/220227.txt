<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It seems to me that you go a very long and very complicated way to do exactly what <code>std::variant</code> does; since you're tagging your question with <code>reinvent-the-wheel</code> it could be perfectly legitimate, but then you can't use <code>std::variant</code> inside your code, because you can't use a wheel to reinvent it.</p>

<p>What is the <code>Either</code> monad? It's not necessarily about error handling, even if it indeed is often used as beefed-up version of <code>Maybe</code>. It only is a type that can hold one of two arbitrary types. Generalizing it into a <code>AnyTypeOf</code> monad, it would become a type that can hold one of several arbitrary types. That is to say, a <code>std::variant</code>. At least conceptually, you rely on a more powerful type (<code>std::variant</code>) to implement a less powerful one (<code>Either</code>) and need 350 lines of very complex code to do it.</p>

<p>Here's my version of the <code>Either</code> monad:</p>

<pre><code>template &lt;typename T, typename U&gt;
using Either = std::variant&lt;T, U&gt;;
</code></pre>

<p>I confess that it is a bit rudimentary, but it isn't very difficult to derive the whole monadic interface from it. But let's precise the semantics a bit, since we're looking for exception-free error handling:</p>

<pre><code>template &lt;typename T&gt;
using SafeType = Either&lt;std::string, T&gt;;
</code></pre>

<p>Note that the convention is for the right type to hold the correct value, and the left type the error. Now we can write simple constructors-like functions:</p>

<pre><code>using SafeInteger = Either&lt;std::string, int&gt;; /

SafeInteger left(std::string error_message) { return SafeInteger(error_message); }
SafeInteger right(int i)                    { return SafeInteger(i); }
</code></pre>

<p>If the type of the error message and of the value are the same, it's just a few characters longer:</p>

<pre><code>using SafeString = Either&lt;std::string, std::string&gt;;

SafeString left(std::string error_message) { return SafeString(std::in_place_index_t&lt;0&gt;(), error_message); }
SafeString right(std::string str)          { return SafeString(std::in_place_index_t&lt;1&gt;(), std::move(str)); }
</code></pre>

<p>The monadic scaffolding is also just a few lines long (I implemented it around <code>return</code> and <code>bind</code>, but <code>join</code> wouldn't have been more complex):</p>

<pre><code>auto monadic_return(std::string str) {
    return right(str);
}

template &lt;typename Function&gt;
auto monadic_bind(const SafeString&amp; str, Function func) {
    if (std::get_if&lt;0&gt;(&amp;str)) return str;
    return func(std::get&lt;1&gt;(str));
}
</code></pre>

<p>Complete example here: <a href="https://wandbox.org/permlink/Sj61MC1jbEO20T5B" rel="nofollow noreferrer">https://wandbox.org/permlink/Sj61MC1jbEO20T5B</a></p>
    </div>