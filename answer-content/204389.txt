<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Be careful using floating-point arithmetic for money</h1>

<p>The challenge has been favourable to you, because all your prices are a multiple of 0.25, which can be represented exactly in binary.  If the environment changes, so that prices are in units of 0.05, for instance, code such as the <code>fmod()</code> test won't necessarily do what you want:</p>

<pre><code>    if (fmod(price, 0.25f) != 0.0f) // works, for "small" price

    if (fmod(price, 0.05f) != 0.0f) // may have rounding error
</code></pre>

<p>It's better to represent currency using one of the integer types; you'll need to parse the dollars and cents separately and combine them into total cents in your code.</p>

<h1>Bills</h1>

<p>I like the <code>bills</code> array, that gives you a single point of control for the inputs that will be accepted (making it easier to change for different currencies, for example).  It may be to your advantage to have a similar array for the coins that can be given in change.</p>

<p>One improvement that can be made is that <code>bills</code> and <code>max_bill</code> don't need automatic storage, as they are constant:</p>

<pre><code>static const std::array&lt;int, 4&gt; bills = {1, 5, 20, 100};

// The biggest bill we have available
static const int max_bill = *std::max_element(std::begin(bills), std::end(bills));

static const std::size_t lengthOfBills = sizeof bills / sizeof bills[0];
</code></pre>

<p>Given that <code>bills</code> is a <code>std::array</code>, we should just be using its <code>size()</code> member instead:</p>

<pre><code>    for (std::size_t i = 0;  i &lt; bills.size();  ++i)
</code></pre>

<p>Similarly, if we know it's sorted, we can use <code>bills.back()</code> to get the largest value.</p>

<h1>Coins</h1>

<p>Unlike the bills, the coin handling is very inflexible, and hard to change if you add additional coins to the machine's repertoire.</p>

<h1>Other improvements</h1>

<ul>
<li>Include <code>&lt;cmath&gt;</code> rather than <code>&lt;math.h&gt;</code> and qualify names e.g. <code>std::fmod()</code>, <code>std::floor()</code>.</li>
<li>Signed/unsigned mismatch in <code>for (unsigned int i = 0; i &lt; lengthOfBills; i = i + 1)</code> - <code>lengthOfBills</code> should probably be a <code>std::size_t</code>.</li>
<li>Although the challenge specifies that the customer inserts "a bill" and receives change, it would be nicer if it would accept multiple bills as necessary (so the customer could insert 3Ã—$1 for an item costing 2.25).</li>
<li>It's more idiomatic to write <code>!std::cin</code> than <code>std::cin.fail()</code>.</li>
</ul>
    </div>