<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>To answer your (1) <code>yield return</code> in a recursive method ... Eric Lippert does it in <a href="http://ericlippert.com/2013/04/22/producing-permutations-part-three/" rel="nofollow">Producing Permutations series, Part Three</a> , specifically in his <code>HamiltonianPermutationsIterator</code> recursive method.</p>

<p>I won't dive into your (2) only to suggest that perhaps you read all of Eric Lippert's series to learn more.</p>

<p><strong>Braces Need Improving</strong></p>

<p>On coding style, your use (or lack thereof) of braces could be improved.  The C# convention is to put the opening brace on a new line (this differs from Java).</p>

<p>More importantly is that you lack braces on so many one-liners.  This is heavily discouraged.</p>

<p>I would suggest cleaning your code to change a snippet from this:</p>

<pre><code>if (r &gt; 1) {
    list.Swap(startPos, i);
    foreach (var permute in GetPermutations(list, r - 1, startPos + 1))
        yield return new List&lt;T&gt;().AddRange(list[startPos].AsEnumerable(), permute);
    list.Swap(startPos, i);
} else
    yield return new List&lt;T&gt;() { list[i] };
</code></pre>

<p>To this:</p>

<pre><code>if (r &gt; 1) 
{
    list.Swap(startPos, i);
    foreach (var permute in GetPermutations(list, r - 1, startPos + 1))
    {
        yield return new List&lt;T&gt;().AddRange(list[startPos].AsEnumerable(), permute);
    }
    list.Swap(startPos, i);
} 
else
{
    yield return new List&lt;T&gt;() { list[i] };
}
</code></pre>

<p><strong>Swap Method</strong></p>

<p>You really don't do anything with the <code>bool</code> returned from the <code>Swap</code> method.  Plus I see little reasoning in not swapping 2 values that happen to be equal.  This method could simply be <code>void</code>.</p>

<p>You are also encouraged to have meaningful names in C#, so <code>i1</code> would be better named as <code>index1</code>.  Ditto for <code>i2</code>.</p>

<pre><code>public static void Swap&lt;T&gt;(this IList&lt;T&gt; list, int index1, int index2) 
{
    var temp = list[index1];
    list[index1] = list[index2];
    list[index2] = temp;
}
</code></pre>
    </div>