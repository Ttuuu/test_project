<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I believe you could reduce it to <span class="math-container">\$O(n\log{n}+m\log{n}+n m)\$</span> if you want.  </p>

<p>Sort the inputs, then iterate over the tests and for each one, do a two variable iteration over the inputs, where you start as close to the test value/2, and move one index in the increasing direction and the other in the decreasing direction depending on whether the sum is less than or greater than the test value.  </p>

<p>This is somewhat confusing, so a partial implementation is:</p>

<pre><code>def one_test(sorted_array, test_value):

    index1 = index_just_under(sorted_array, test_value/2)
    index2 = index1 + 1

    while (index1&gt;=0) and (index2 &lt; len(sorted_array)):
        sum = sorted_array[index1] + sorted_array[index2];
        if sum == test_value:
            return True
        if sum &gt; test_value:
            index1 = index1 - 1
        else:
            index2 = index2 + 1

    return False
</code></pre>

<p>Function <code>index_just_under</code> would be an <span class="math-container">\$O(\log{n})\$</span> method to find our initial cut point.  It returns the number of entries in the array below the second parameter, minus 1.  Given a sorted array, a binary search can be used.</p>

<p>The rest of this <code>one_test</code> function is <span class="math-container">\$O(n)\$</span>.  This function is executed <span class="math-container">\$m\$</span> times, and the initial sort is <span class="math-container">\$O(n\log{n})\$</span>.</p>

<p>While this might be a poor savings of the two input arrays are the same size, if tests array is much smaller, this could be a big saving.</p>

<p>If you start the indexes at the <code>0</code> and <code>len(sorted array) - 1</code>, you might be able to eliminate the <code>index_just_under()</code> call, reducing the time by <span class="math-container">\$O(m\log{n})\$</span>.  On the other hand, it would eliminate any early-outs in the <span class="math-container">\$O(n m)\$</span> loops.  Effectiveness could depend on your expected number ranges.</p>
    </div>