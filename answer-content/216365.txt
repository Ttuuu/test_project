<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>Do you want to test whether an element is in a container, or an iterator-range?</p>

<ul>
<li>The first allows for optimisation (taking advantage of the container's peculiarities). See "<em><a href="https://codereview.stackexchange.com/questions/59997/contains-algorithm-for-stdvector">contains() algorithm for std::vector</a></em>" for an example.</li>
<li>The second is more general in the absence of any range-library, like the one expected for the C++20 standard, and available for earlier versions.</li>
</ul></li>
<li><p>Constraining the needle to the type <code>decltype(*begin)</code> is very problematic:</p>

<ul>
<li>It forces pass-by-value, which while it <em>should</em> be possible, at least with moveing, might be inefficient.</li>
<li>You cannot take advantage of transparent comparators (a C++14 feature), forcing the creation of a useless temporary. On the flip-side, if transparent comparators are not used, only a single temporary is constructed.</li>
<li>If the type is a proxy like with the dreaded <code>std::vector &lt;bool&gt;</code>, hilarity ensues.</li>
</ul></li>
<li><p>Consider taking advantage of the standard library, specifically <code>std::find ()</code>.</p></li>
<li><p>C++ will deduce the function's template-arguments perfectly fine, no need for error-prone verbosity.</p></li>
</ol>
    </div>