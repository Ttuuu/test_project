<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In addition to the other answers, I'm focusing on the <code>main</code> method.</p>

<p>It's great that you have provided example test cases with your code since the words "balance parentheses" leave much room for interpretation. By providing examples, you close this gap. Ideally you would add a few comments to the examples, for example why you expect exactly this output and what other outputs would be possible but not desired.</p>

<p>When you want to validate your tests, you currently have to inspect the output from <code>System.out</code> manually. That's error prone, especially for counting lots of parentheses. You can easily automate this by writing the following code:</p>

<pre class="lang-java prettyprint-override"><code>private static void testBalanceParentheses(String input, String expectedOutput) {
    String actualOutput = balanceParenthesis(input);
    if (!Objects.equals(actualOutput, expectedOutput)) {
        throw new AssertionError(
            String.format(
                "Expected \"%s\" for \"%s\", but got \"%s\".",
                expectedOutput, input, actualOutput));
    }
}

private static void testBalanceParentheses() {
    testBalanceParentheses("q(y)s)", "q(y)s");
    testBalanceParentheses("(((((", "");
    testBalanceParentheses(")))", "");
    testBalanceParentheses("(()()(", "()()");
    testBalanceParentheses(")())(()()(", "()()()");
    testBalanceParentheses("((())))", "((()))");
}

public static void main(String[] args) {
    testBalanceParentheses();
}
</code></pre>

<p>This way, you just have to run the program, and if it outputs nothing, everything is fine.</p>

<p>This idea of having automated test cases is so popular that the <a href="https://junit.org/junit5/" rel="nofollow noreferrer">JUnit project</a> has developed a framework to make testing easier. When you use it, you don't have to write the low-level <code>throw new AssertionError</code> yourself, but can use the higher-level <code>Assert.assertEquals</code> method:</p>

<pre class="lang-java prettyprint-override"><code>private static void testBalanceParentheses(String input, String expectedOutput) {
    String actualOutput = balanceParenthesis(input);
    Assert.assertEquals(expectedOutput, actualOutput);
}

@Test
void testBalanceParentheses() {
    testBalanceParentheses("q(y)s)", "q(y)s");
    testBalanceParentheses("(((((", "");
    testBalanceParentheses(")))", "");
    testBalanceParentheses("(()()(", "()()");
    testBalanceParentheses(")())(()()(", "()()()");
    testBalanceParentheses("((())))", "((()))");
}
</code></pre>

<p>See how the code gets shorter and simpler? That's what JUnit is for.</p>

<p>Finally, here is the test code with the additional comments I would add:</p>

<pre class="lang-java prettyprint-override"><code>@Test
void testBalanceParentheses() {

    // Trailing closing parentheses are omitted.
    testBalanceParentheses("q(y)s)", "q(y)s");

    // Opening parentheses that don't get closed again are omitted as well.
    testBalanceParentheses("(((((", "");

    // Unmatched closing parentheses are omitted.
    testBalanceParentheses(")))", "");

    // TODO: Add another test case to demonstrate which of
    // the opening parentheses is omitted.
    // "a(b(c(d)e(f)g(h"
    // Do you expect "ab(c" or "a(bc"?
    testBalanceParentheses("(()()(", "()()");

    // TODO: Add another test case to demonstrate which of the
    // closing parentheses is omitted, like above.
    testBalanceParentheses(")())(()()(", "()()()");

    // Perfectly balanced nested parentheses are kept.
    testBalanceParentheses("((())))", "((()))");
}
</code></pre>
    </div>