<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Optional</h2>

<p>I find it less useful to include <code>None</code> in an enum like <code>Evaluation</code>, and more useful to write <code>Optional[Evaluation]</code> where appropriate. It's useful to be able to choose whether you have a value that cannot be <code>None</code> at a certain point, or otherwise, based on context.</p>

<p>In other words, this:</p>

<pre><code>sentiment: Literal[
        Evaluation.POSITIVE, Evaluation.NEUTRAL, Evaluation.NEGATIVE, Evaluation.NONE
    ] = Evaluation.NONE
</code></pre>

<p>can just be</p>

<pre><code>sentiment: Optional[Evaluation] = None
</code></pre>

<p>The same goes for the return value of <code>__extract_sentiment</code>.</p>

<h2>File existence</h2>

<p>I find this:</p>

<pre><code>    if not os.path.exists(url_file):
        raise OSError("File Not Found: %s" % url_file)
</code></pre>

<p>to be redundant. <code>open</code> will do that for you.</p>

<h2>Lists</h2>

<p>Since you're learning about type hinting: what is this a list <em>of</em>?</p>

<pre><code>self.data: list = []
</code></pre>

<p>Similarly, this:</p>

<pre><code>status_forcelist: tuple = (500, 502, 504)
</code></pre>

<p>is probably</p>

<pre><code>status_forcelist: Tuple[int, ...] = (500, 502, 504)
</code></pre>

<h2>Inner lists</h2>

<pre><code>    extracted_ratings = Ratings(
        *[len(_.xpath(STAR_XPATH)) for _ in rating_subjects]
    )
</code></pre>

<p>should be</p>

<pre><code>    extracted_ratings = Ratings(
        *(len(_.xpath(STAR_XPATH)) for _ in rating_subjects)
    )
</code></pre>

<p>In other words, unpack a generator, not a materialized list. Also, never call a variable <code>_</code> if you actually use it.</p>
    </div>