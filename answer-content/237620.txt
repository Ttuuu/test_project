<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Naming</h2>

<p>Function names usually read nicely as verbs, since they "do" stuff. So <code>word_splitter()</code> might be a good name for a class, some reusable thing that splits words, but as a function it reads more descriptively as <code>split_word()</code> or <code>split_term()</code> (or maybe <code>tokenize_term()</code>). Similarly, <code>result_print()</code> reads more smoothly as <code>print_results()</code>. It's a command, it's <em>doing</em> something. <code>data_to_dictionary()</code> is ok, but <code>load_data()</code> or <code>load_index()</code> are more descriptive.</p>

<p>Also, generally, lists don't need "list" in the name. Parameters like <code>result_list: list</code>, especially with type annotations, usually imply that they are a list if they are plural, like <code>results: list</code>.</p>

<h2>Optimizations</h2>

<ul>
<li>In <code>word_matcher()</code>, you repeatedly call <code>.lower()</code> on the contents of each document. Since you're only printing titles, not document contents, you could convert each document's text to lowercase once during the initial loading, and then not need to do so during the query/ies. This is appealing because the document contents are almost certainly much longer than your search queries, so cutting out extra loops is nice.</li>
</ul>

<h2>Code</h2>

<p><code>word_matcher()</code></p>

<ul>
<li><p>Notice how the behaviour for when <code>term</code> is a string vs a list is identical, aside from the loop. If you make sure it's always a list, by starting the function with</p>

<pre class="lang-py prettyprint-override"><code>if isinstance(term, basestring):
    term = [term]
</code></pre>

<p>then you only need to handle the list-looping case, and can remove the first if-branch.</p>

<p>Alternatively, you could make <code>word_matcher()</code> only take in single terms, and move the looping into the calling function.</p>

<p>Either way, it would be nice for both readability and future maintenance to remove that duplication.</p></li>
<li><p>Generally <code>isinstance()</code> is preferable over a direct comparison with <code>type()</code>, because it will play nicely with inheritance. This doesn't matter for this program, because you're not subclassing <code>str</code> or anything like that, but it's nice in general.</p></li>
</ul>

<hr>

<p><code>result_print()</code></p>

<ul>
<li><pre><code>for item in enumerate(result_list):
    print(f"{item[0] + 1}: {item[1]}")
</code></pre>

Colloquially, this would use unpacking:

<pre><code>for index, result in enumerate(result_list):
    print(f"{index + 1}: {result}")
</code></pre></li>
</ul>

<hr>

<p><code>data_to_dictionary()</code></p>

<ul>
<li>This is fine. If you have many thousands of files (or it takes more than a second or two to load), you could consider using a <a href="https://docs.python.org/3/library/concurrent.futures.html" rel="nofollow noreferrer">ThreadPoolExecutor</a> to read the data files concurrently using multiple threads.</li>
</ul>

<hr>

<pre><code>    # If no results are found, loop until user closes program
    if not result_list:
        print("No Results Found")
        while True:
            pass
</code></pre>

<p>Looping infinitely with <code>while True: pass</code> is just going to heat up the room by occupying a CPU. If there is nothing more to do, quit. The user will notice. Use <code>sys.exit()</code> in a quick script like this, or return from the function.</p>

<hr>

<h2>Considerations</h2>

<h3>Ranking / Relevance</h3>

<p>This is a search tool. If the volume of indexed data grows, you may want to order the results by some kind of measure of relevance, so that users can find their stuff more effectively. Maybe a match in the title is worth 3x more than a match in the body. Maybe when the term contains multiple words, results matching all of the term words are scored higher (and shown before) results matching just one word.</p>

<p>Search is a big field with endless optimizations. If this is interesting, check out <em>Relevant Search</em> by Turnbull and Berryman (2016), or stuff about search engine indexing and natural language processing.</p>

<h3>Indexing</h3>

<p>Right now, a search needs you to iterate through your entire index. At the cost of increased upfront processing time, and memory usage, you could do some pre-processing, and construct some more efficient indexes for faster searches.</p>

<p>Your <code>data</code> dict is a mapping of document name → contents. You could make an <em>inverted index</em> of term → document name, effectively pre-computing the results of any search term. Here is a simple example, you might also want to store things like the number of times the term appears in the document, to weigh into rankings:</p>

<pre><code>from collections import defaultdict
import itertools, typing

def make_inverted_index(data: typing.Dict[str, str]) -&gt; typing.Dict[str, typing.Set[str]]:
    terms = defaultdict(set)

    for doc_name, contents in data.items():
        body = [contents.lower()]
        for sep in SEPARATORS:
            body = list(itertools.chain.from_iterable(s.split(sep) for s in body)
        for term in body:
            terms[term].add(doc_name)

    return terms
</code></pre>

<p>and then, during queries, you can easily check if the query term is a key in the inverted index dict, without scanning all the contents.</p>
    </div>