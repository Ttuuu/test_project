<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>While your new solution does look somewhat better than the original, I would suggest that constantly removing elements from the list can be quite expensive.  I would suggest shuffling or randomly sorting the list then simply divvying up the players to the teams.</p>

<p>Also you're still putting the implementation in Main, instead of calling a method.</p>

<p>Instead of hardcoding everything for 2 teams I would be in favor of allowing any number of teams as long as it's an exact divisor of the number of players.</p>

<p>Instead of multidimensional lists, I would use a Dictionary where the Key is the name of the team and the players names are in a list.</p>

<p>It could look something like this:</p>

<pre><code>public static Dictionary&lt;int,List&lt;T&gt;&gt; MakeTeams&lt;T&gt;(this List&lt;T&gt; playerList, int numTeams)
{

    int count = playerList.Count();
    if(count % numTeams != 0)
    {
        throw new ArgumentException("The number of players must be a multiple of numTeams to get even distribution of players");
    }
    var randomList = playerList.OrderBy(x =&gt; Guid.NewGuid()).ToList();
    var teams = (from int i in Enumerable.Range(0, count)
                 let item = randomList[i]
                 group item by (i % numTeams) into team
                 select team).ToDictionary(team =&gt; team.Key, team =&gt; team.ToList());

    return teams;
}
</code></pre>

<p>This simply uses a number for the team name.  If you wanted to get fancier with it you could add a string array of team names to use instead:</p>

<pre><code>public static Dictionary&lt;string, List&lt;T&gt;&gt; MakeTeams&lt;T&gt;(this List&lt;T&gt; playerList, int numTeams, string[] teamNames)
{
    if(teamNames.Length &lt; numTeams)
    {
        throw new ArgumentException("The number of team names must be equal to or greater than numTeams");
    }
    int count = playerList.Count();
    if (count % numTeams != 0)
    {
        throw new ArgumentException("The number of players must be a multiple of numTeams to get even distribution of players");
    }
    var randomList = playerList.OrderBy(x =&gt; Guid.NewGuid()).ToList();
    var teams = (from int i in Enumerable.Range(0, count)
                 let item = randomList[i]
                 group item by (i % numTeams) into team
                 select team).ToDictionary(team =&gt; teamNames[team.Key], team =&gt; team.ToList());

    return teams;
}
</code></pre>
    </div>