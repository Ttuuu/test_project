<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Too many <code>try/catch</code> blocks, and it's redundant and misplaced. For instance <code>Checkout_clicked</code> method can be done this way : </p>

<pre><code>private async void Checkout_clicked(object sender, EventArgs e)
{
    try
    {
        await Navigation.PushPopupAsync(new LoadingPopup());

        // what is happning here ? 
        // when Cart is NULL OR Does not have any elements OR Count is less than zero ? 
        if (FullCart.CartList == null || FullCart.CartList.Count &lt;= 0 || !FullCart.CartList.Any())
        {
            var yx = await DisplayAlert("Whoops","Cart seem's to be empty, We cant checkout nothing", "Back to Cart", "Supplier");

            if (!yx)
            {
                var masterDetailPage = new Home();
                masterDetailPage.Detail = new NavigationPage(new Suppliers());
                Application.Current.MainPage = masterDetailPage;
            }
        }
        else
        {
            await BeginCheckout();
        }

        await Navigation.PopPopupAsync();

    }
    catch (Exception ex)
    {
        Crashes.TrackError(ex);
    }
}
</code></pre>

<p>same thing can applied to the other blocks. This is a must do modification as nested <code>try/catch</code> is a bad practice, ugly, and it would impact the performance. So,  it must be avoided.</p>

<p>Secondly, when using <code>if</code> statements to validate, don't put your method validation in <code>else</code> clause. Take <code>BeginCheckout</code> as an example :</p>

<pre><code>/*
    Part 1 : Validations 
*/

//You cant checkout if your not logged in There are no Guest Checkouts(I can But would rather not)
if (_spamClick)
{
    await DisplayAlert("Woops", "Your trying to order twice", "Ok");
    return; 
}

if (!Users.LoggedIn)
{
    // User is not logged in it should display this message immediately, and return it back to login screen or give the user the choice to go there     
    await DisplayAlert("Woops", "Please Login to check Out", "Login", "Home");
    return;
}

// this is okay
if (_orderlineitems == null) {  _orderlineitems = new List&lt;OrderLineItem&gt;(); }

// outside the loop since it's not releated to the loop 
if (!_simpleCartlist.Any(i =&gt; i.InStock == false) || _productBoughtOut) 
{ 
    await Navigation.PopPopupAsync(); 
    return;
}   

if(FullCart.CartList == null || _items.Items == null) { return; /* what should happen if the cart is null ? */ }


/*
    Part 2 : Process 
*/
foreach (var item in _simpleCartlist)
{   
    //if out of stock
    if (item.StockStatus != "instock" || !string.IsNullOrWhiteSpace(item.StockStatus)) { continue; } // skip this and go to the next item

    ... //rest of the loop 
    var a = Convert.ToInt32(item.ProductQuantity);
    if (item.VariationId &lt;= 0) item.VariationId = item.PId;
    if (item.StockQuantity == 0)
    {
    _productBoughtOut = true;
    _productnames.Add(item.ProductName);
    }

    order.line_items = order.line_items ?? new List&lt;OrderLineItem&gt;();
    order.line_items.Add(new OrderLineItem
    { product_id = item.PId, variation_id = item.VariationId, quantity = a });  
}

_spamClick = true;
await wc.Order.Add(order);
Preferences.Clear("Cart");
Preferences.Remove("Cart");
FullCart.CartList.Clear();
_items.Items.Clear();
var masterDetailPage = new Home();
masterDetailPage.Detail = new NavigationPage(new Checkedout());
Application.Current.MainPage = masterDetailPage;
</code></pre>

<p><em>FOR DEMONSTRATION PURPOSE ONLY</em> </p>

<p>Refactoring the <code>if</code> statements, to put the main validations at the top of the code, then go to the process. This way, the code would execute the validation part first, then if it passed this part it would go and execute the process part. This is a common used methodology since it's readable, easy to follow, and also follow the execution workflow. </p>

<p>The main idea is, whenever you see that the if condition would have a long executable logic or will include nested <code>if</code>s, you should think of inverting it to make it simpler and extract the actual code outside it. Like the example above. </p>

<p>Also, in the example you will notice that I've used <code>return;</code> which is something I don't recommend to be used often in a work environment. But for testing and examples would be okay. The reason for that it would not handle anything, while you should handle every expected condition that happens in your logic to be more maintainable and understandable for other developers. </p>

<p>Another thing, braces exist for a reason. So, try to use them, as it would make things much easier to follow and maintainable. Even in Visual Studio, with braces, you could collapse or expand any part you want in the source. </p>
    </div>