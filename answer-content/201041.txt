<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Implementation issues</h1>
<ul>
<li><p><code>using namespace std;</code> is frowned upon, especially in header files. Assuming <code>MyStack</code> is intended to be included elsewhere, this might cause name collisions in other unrelated code.</p>
</li>
<li><p>There's a superfluous (and possibly confusing) semicolon after default constructor.</p>
</li>
<li><p>Memory leak: If something inside the copy constructor were to throw an exception (e.g. one of those calls to <code>new</code>), already created nodes will not be <code>delete</code>d.</p>
</li>
<li><p>Another memory leak/bug in the copy constructor: <code>pre</code> doesn't get advanced during the <code>while</code> loop, so it's always pointing to <code>top_node</code>. Every assignment <code>pre-&gt;next = cur</code> overwrites the current value of <code>top_node-&gt;next</code>, resulting in a stack of depth 2.</p>
</li>
<li><p>Also, since the copy constructor doesn't modify <code>st</code>, it could be made <code>const MyStack&amp;</code>.</p>
</li>
<li><p>Memory leak: <code>MyStack&lt;T&gt;::push</code> leaks <code>temp</code> in case the <code>Node</code> constructor throws an exception (e.g. because <code>T</code>s copy constructor throws one).</p>
</li>
<li><p>Wrong return type: <code>MyStack::top()</code> is declared to return an <code>int</code>, but actually returns <code>MyStack&lt;T&gt;::Node::val</code>, which is of type <code>T</code>.</p>
</li>
<li><p>No need for <code>top_node = nullptr</code> inside the destructor: Nobody is going to read that value again.</p>
</li>
<li><p>The whole destructor body could be extracted into a <code>clear</code> member function, which the destructor then calls.</p>
</li>
<li><p>A lot of the member functions (basically everything not calling <code>new</code>) can be marked <code>noexcept</code>. Doing so allows for better code generation and allows others to use <code>MyStack</code> to its fullest.</p>
</li>
<li><p><code>pop</code> doesn't decrease <code>count</code>.</p>
</li>
</ul>
<h1>Design issues</h1>
<ul>
<li><p><code>MyStack::print</code> might be helpful with debugging, but likely shouldn't be in the final product (unless there is a specific requirement for it).</p>
<p><code>print</code> can likely be very easily implemented using an iterator interface if one is provided.</p>
</li>
<li><p><code>MyStack</code> is unable to contain types that cannot be copy-constructed. Think about splitting <code>push(T)</code> into two functions <code>push(const T&amp;)</code> and <code>push(T&amp;&amp;)</code>, and maybe add an <code>emplace</code> member function that forwards its arguments in order to construct the <code>T</code> in place.</p>
</li>
<li><p><code>top</code> could return a referene instead of a copy. This prevents issues with non-copyable types. Might require two overloads, though (<code>const T&amp; top() const</code> and <code>T&amp; top()</code>), to accomodate for <code>const</code>ness of <code>this</code>.</p>
</li>
<li><p>Technically, <code>MyStack&lt;T&gt;</code> can be copied only if <code>T</code> is copy-constructible. This can be asserted at compile time using some template metaprogramming (which might be too advanced at the moment), but at the very least I'd expect this behavior to be documented.</p>
</li>
</ul>
<h1>C++11 features</h1>
<p>C++11 introduced smart pointer like <code>std::unique_ptr</code> and <code>std::shared_ptr</code> into the standard library. You might want to read up on them, as they come in quite handy and help a lot to prevent memory leaks. Just know their limits (recursive destruction/cycles).</p>
<p>Using them would have prevented a lot of the memory issues mentioned above. For more information on the topic I can recommend <a href="https://www.youtube.com/watch?v=JfmTagWcqoE" rel="nofollow noreferrer">this talk</a> by Herb Sutter.</p>
<hr>
<p>Also, C++11 introduced <code>{}</code> for object initialization, in order to "fix" the so-called most vexing parse: What is <code>foo</code> in the following snippet?</p>
<pre><code>int foo(A);
</code></pre>
<p>That answer depends on what <code>A</code> is:</p>
<ul>
<li><p>If <code>A</code> can be interpreted as a type then <code>foo</code> is declared as a function taking an <code>A</code> as parameter and returning an <code>int</code>.</p>
</li>
<li><p>If <code>A</code> is a value then <code>foo</code> is a local <code>int</code> variable that gets initialized to the value of <code>A</code>.</p>
</li>
</ul>
<p>In order to prevent this ambiguity (and a huge list of similar ones) prefer to use brackets <code>{}</code> for object initialization instead of <code>()</code> if possible.</p>
<blockquote>
<p>There are some cases where this isn't possible; however, those cases are rare (I can only think of one off my head, and that's the <code>std::vector&lt;T&gt;::vector(size_t, T)</code> constructor where <code>T</code> is some arithmetic type like <code>int</code> or <code>float</code>, as the initializer-list constructor takes precedence there).</p>
</blockquote>
<h1>Q&amp;A</h1>
<ol>
<li>
<blockquote>
<p>What should top() return if the stack is empty?</p>
</blockquote>
<p>What can it meaningfully return? Nothing!</p>
<p>The precondition of calling <code>top</code> is that the stack must not be empty. If <code>top</code> is called while the stack is empty, that operation is meaningless. You can be nice and throw an exception to signal that this function was called erroneously, or not be nice and force checking upon the caller in order to avoid internal <code>nullptr</code> dereferences.</p>
<blockquote>
<p>Usually, stack implementations throw an exception, unless the environment forbids those or safety is sacrificed to gain some minimal performance.</p>
</blockquote>
</li>
<li>
<blockquote>
<p>Why it’s better to use size_t for count?</p>
</blockquote>
<p>This point has been up for debate quite a lot, and most often the consensus is: Don't use unsigned values for sizes, as it can cause unexpected interactions with signed values.</p>
<blockquote>
<p>It got into the standard library as "the" size type because they wanted to use another bit for size (in order to use up to 4 GiB RAM on 32-bit machines), but in hindsight (and with modern 64-bit processors) the unexpected interactions with signed values tipped the scale towards that conclusion.</p>
</blockquote>
</li>
<li>
<blockquote>
<p>I didn’t use new to create the stack in main(). Do I need to call the destructor? If no, why? If yes, how should I do it?</p>
</blockquote>
<p><code>sasa</code> and <code>sec</code> in <code>main</code> have automatic storage duration, which means that they get automatically destructed once they fall out of scope (at the closing <code>}</code> of <code>main</code>) in reverse order of construction.</p>
</li>
<li>
<blockquote>
<p>According to the rule of three, how will I define the assignment operator for stack? Can you give one example?</p>
</blockquote>
<p>The "Rule of Three" got extended to "Rule of Five" in C++11 and onwards in order to accomodate for move constructors and move assignment operators. So, let's get started with those additions (as they are fairly easy to implement):</p>
<pre><code>MyStack(MyStack&amp;&amp; other) noexcept : top_node{other.top_node}, count{other.count} {
    other.top_node = nullptr;
    other.count = 0;
}

MyStack&amp; operator=(MyStack&amp;&amp; other) noexcept {
    if(this != &amp;other) {
        // destroy current list
        clear();

        // move others list
        top_node = other.top_node;
        count = other.count;

        // leave other in a valid state
        other.top_node = nullptr;
        other.count = 0;
    }

    return *this;
}
</code></pre>
<p>One way to do the copy assignment operator is to use the copy-and-swap idiom:</p>
<pre><code>MyStack&amp; operator=(const MyStack&amp; other) {
    auto copy = other;
    swap(other);
    return *this;
}
</code></pre>
<p>But this requires a <code>swap</code> function, which might look like this:</p>
<pre><code>void swap(MyStack&amp; other) noexcept {
    using std::swap;
    swap(top_node, other.top_node);
    swap(count, other.count);
}
</code></pre>
<blockquote>
<p>Most implementations also provide a freestanding <code>swap(MyType&amp; a, MyType&amp; b)</code> function (which basically forwards to <code>a.swap(b)</code>) to allow their types to be used in this fashion.</p>
</blockquote>
</li>
<li>
<blockquote>
<p>I feel I have some misunderstanding about private. I put top_node in the private section, but why I am able to access top_node in the copy constructor?</p>
</blockquote>
<p>You can access <code>st.top_node</code> and <code>st.count</code> inside the copy constructor because you are still inside the same class!</p>
<p><code>private</code> just means "nobody outside of this class (or its <code>friend</code>s) can see this" - but the copy constructor is obviously inside. (Otherwise, how could it initialize <code>this-&gt;top_node</code>?)</p>
<p>This level of access can also be granted to other classes or functions by making them a <code>friend</code> of the class:</p>
<pre><code>class A;
void foo(B b);

class B {
    friend class A;
    friend void foo(B b);

    int c;
};
</code></pre>
<p>Now <code>B::c</code> is visible inside <code>A</code> or <code>foo</code>, too.</p>
<blockquote>
<p>Use this sparingly, though, as it breaks encapsulation. Sometimes it is needed, but more often than not there is a better alternative available.</p>
</blockquote>
</li>
</ol>
    </div>