<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>My answer is additive to the others; I'm not going to repeat points already made.</p>

<h1>1. Nitpick: prefer <code>int[] arr</code> over <code>int arr[]</code></h1>

<p>The "arrayness" (<code>[]</code>) has more to do with the type than it does the variable name, so it's better to keep them together. Not to appeal to authority, but <a href="https://google.github.io/styleguide/javaguide.html#s4.8.3-arrays" rel="nofollow noreferrer">Google's style guide also suggests this.</a></p>

<h1>2. Avoid "for" loops where "for-each" loops are applicable.</h1>

<p>You never really need the indices <code>i</code> and <code>j</code>, aside from using them to get the elements. Just avoid them altogether:</p>

<pre><code>for (int a : arr) {
    for (int b : arr) {
        if (Math.sqrt(a) == b) {
            s += a + "," + b + " ";
        }
    }
}
</code></pre>

<p>Even if a <code>for-each</code> loop wasn't available (e.g. in C), I would still recommend extracting repeated terms (<code>arr[i]</code>, <code>arr[j]</code>) to a variable.</p>

<h1>3. Don't intermix computation of a result, and the printing of the result</h1>

<p>I would advise against this cross-over of computing and printing that you're doing.</p>

<p>Perhaps you want to use this list as an input to some other process. Parsing the string back would be both inconvenient and inefficient. It's better to make systems that shuttle around machine-usable values (e.g. a list of numbers) as much as possible, and only formatting and printing them as the last possible moment.</p>

<p>Here's a first approximation:</p>

<pre><code>import java.util.List;
import java.util.ArrayList;

class Untitled {
    public static void main(String[] args) {
        int arr[] = {5,25,3,25,4,2,25};

        List&lt;Integer&gt; discoveredRoots = new ArrayList&lt;&gt;();
        for (int a : arr) {
            for (int b : arr) {
                if (Math.sqrt(a) == b) {
                    discoveredRoots.add(b);
                }
            }
        }

        String s = "";
        for (int root : discoveredRoots) {
            int perfectSquare = root * root;
            s += root + "," + perfectSquare + " ";
        }
        System.out.println(s);
    }
}
</code></pre>

<h1>4. Split off distinct chunks of code</h1>

<p>Now we have two distinct chunks of our code within the <code>main</code> function. These are clearly two new functions, just waiting to get out:</p>

<pre><code>class Untitled {
    public static void main(String[] args) {
        int[] input = {5,25,3,25,4,2,25};

        List&lt;Integer&gt; discoveredRoots = findPerfectSquarePairs(input);
        String formattedResult = formatPerfectSquarePairs(discoveredRoots);
        System.out.println(formattedResult);
    }


    // Returns a stream of factors whose squares (which are perfect squares)
    // were found in `input`.
    static List&lt;Integer&gt; findPerfectSquarePairs(int[] input) {
        List&lt;Integer&gt; discoveredRoots = new ArrayList&lt;&gt;();

        for (int a : input) {
            for (int b : input) {
                if (Math.sqrt(a) == b) {
                    discoveredRoots.add(b);
                }
            }
        }

        return discoveredRoots;
    }

    static String formatPerfectSquarePairs(List&lt;Integer&gt; discoveredRoots) {
        String s = "";

        for (Integer root : discoveredRoots) {
            int perfectSquare = root * root;
            s += root + "," + perfectSquare + " ";
        }

        return s;
    }
}
</code></pre>

<p>These functions have the added benefit of being <a href="https://en.wikipedia.org/wiki/Pure_function" rel="nofollow noreferrer"><em>pure</em></a>. They don't do anything besides process over their parameters, and return a value (e.g. they don't print anything directly).
 * The lack of side-effects make these methods trivial to unit unit test. Just provide some hard-coded parameters, and assert that their equality to some hard-coded results.
 * Their separation make isolation trivial. You can test printing without processing, and processing without printing.</p>

<h1>5. Optimize the internals of <code>findPerfectSquarePairs</code> and <code>formatPerfectSquarePairs</code>.</h1>

<p>Now that we've "discovered" these two functions, we can improve each component separately. We're able to lean on unit tests to ensure we didn't break anything.</p>

<p>First, we can use a <code>Set</code> to remember which numbers we've seen, without having to do a <code>O(input.length * 2)</code> search over every possible pair of numbers. We don't even have to put every number in the set, only those which are perfect squares.</p>

<pre><code>    /*
    import static java.lang.Math.pow;
    import static java.lang.Math.sqrt;
    import static java.lang.Math.round;
    */

    static boolean isPerfectSquare(int i) {
        if (i &lt; 0) return false; // negative numbers can't be perfect squares

        double root = sqrt(i);
        double squared = pow(round(root), 2);
        return round(squared) == i;
    }
    static List&lt;Integer&gt; findPerfectSquarePairs(int[] input) {
        Set&lt;Integer&gt; uniqueNumbers = new HashSet&lt;&gt;();
        for (int a: input) {
            if (isPerfectSquare(a)) uniqueNumbers.add(a);
        }

        List&lt;Integer&gt; discoveredRoots = new ArrayList();

        for (int a : uniqueNumbers) {
            int perfectSquare = a * a;
            if (uniqueNumbers.contains(perfectSquare)) {
                discoveredRoots.add(a);
            }
        }

        return new ArrayList(discoveredRoots);
    }
</code></pre>

<p>All of these loops are just a stream screaming to get out. Let's do that:</p>

<pre><code>    /*
    import static java.lang.Math.pow;
    import static java.lang.Math.sqrt;
    import static java.lang.Math.round;

    import static java.util.stream.Collectors.toSet;
    import static java.util.stream.Collectors.toList;
    */

    static List&lt;Integer&gt; findPerfectSquarePairs(int[] input) {
        Set&lt;Integer&gt; perfectSquares = Arrays.stream(input)
            .filter(Untitled::isPerfectSquare)
            .boxed()
            .collect(toSet());

        List&lt;Integer&gt; discoveredRoots = perfectSquares.stream()
                    .filter (root -&gt; {
                        int perfectSquare = root * root;
                        return perfectSquares.contains(perfectSquare);
                    })
                    .collect(toList());

        return discoveredRoots;
    }
</code></pre>

<p>Next we can turn our attention to <code>formatPerfectSquarePairs</code>. It too could be simplified with a stream:</p>

<pre><code>    static String formatPerfectSquarePairs(List&lt;Integer&gt; discoveredRoots) {
        return discoveredRoots.stream()
            .map(root -&gt; {
                int perfectSquare = root * root;
                return root + "," + perfectSquare;
            })
            .collect(joining(" "));
    }
</code></pre>

<h1>6. Redesign the interaction of <code>findPerfectSquarePairs</code> and <code>formatPerfectSquarePairs</code></h1>

<p>At this point, we can realize that both of these methods use streams internally, but don't communicate to each other using streams. <code>findPerfectSquarePairs</code> unnecessarily collects results into a <code>List&lt;Integer&gt;</code>, only for <code>formatPerfectSquarePairs</code> to <code>stream()</code> its elements. This is unnecessary.</p>

<p>Returning a <code>Stream&lt;Integer&gt;</code> would use less memory (there's no need to concurrently store all <code>discoveredRoots</code> in memory), and would be more flexible. If consumers want a <code>List&lt;Integer&gt;</code>, they can <code>.collect(toList())</code> it themselves. But now we've given them the ability to iterate over the stream, to <code>reduce</code> it, <code>map</code> it, etc.</p>

<pre><code>    static Stream&lt;Integer&gt; findPerfectSquarePairs(int[] input) {
        Set&lt;Integer&gt; perfectSquares = Arrays.stream(input)
            .filter(Untitled::isPerfectSquare)
            .boxed()
            .collect(toSet());

        return perfectSquares.stream()
            .filter (root -&gt; {
                int perfectSquare = root * root;
                return perfectSquares.contains(perfectSquare);
            });
    }

    static String formatPerfectSquarePairs(Stream&lt;Integer&gt; discoveredRoots) {
        return discoveredRoots
            .map(root -&gt; {
                int perfectSquare = root * root;
                return root + "," + perfectSquare;
            })
            .collect(joining(" "));
    }
</code></pre>

<h1>7. Fix the formatting of the output</h1>

<p>...to match your desired <code>[5,25],[5,25],[2,4],[5,25]</code> style:</p>

<pre><code>    static String formatPerfectSquarePairs(Stream&lt;Integer&gt; discoveredRoots) {
        return discoveredRoots
            .map(root -&gt; {
                int perfectSquare = root * root;
                return root + "," + perfectSquare;
            })
            .map(s -&gt; "[" + s + "]")
            .collect(joining(","));
    }
</code></pre>

<h1>Final result</h1>

<pre><code>import java.util.Set;
import java.util.Arrays;

import java.util.stream.Stream;

import static java.lang.Math.pow;
import static java.lang.Math.sqrt;
import static java.lang.Math.round;

import static java.util.stream.Collectors.toSet;
import static java.util.stream.Collectors.joining;

class Untitled {
    public static void main(String[] args) {
        int[] input = {5,25,3,25,4,2,25};

        Stream&lt;Integer&gt; discoveredRoots = findPerfectSquarePairs(input);
        String formattedResult = formatPerfectSquarePairs(discoveredRoots);
        System.out.println(formattedResult);
    }

    static boolean isPerfectSquare(int i) {
        if (i &lt; 0) return false; // negative numbers can be perfect squares

        double root = sqrt(i);
        double squared = pow(round(root), 2);
        return round(squared) == i;
    }


    static Stream&lt;Integer&gt; findPerfectSquarePairs(int[] input) {
        Set&lt;Integer&gt; perfectSquares = Arrays.stream(input)
            .filter(Untitled::isPerfectSquare)
            .boxed()
            .collect(toSet());

        return perfectSquares.stream()
            .filter (root -&gt; {
                int perfectSquare = root * root;
                return perfectSquares.contains(perfectSquare);
            });
    }

    static String formatPerfectSquarePairs(Stream&lt;Integer&gt; discoveredRoots) {
        return discoveredRoots
            .map(root -&gt; {
                int perfectSquare = root * root;
                return root + "," + perfectSquare;
            })
            .map(s -&gt; "[" + s + "]")
            .collect(joining(","));
    }
}
<span class="math-container">```</span>
</code></pre>
    </div>