<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>public static T ToEnum&lt;T&gt;(this int value)
{
    Type type = typeof(T);

    if (!type.IsEnum)
    {
        throw new ArgumentException($"{type} is not an enum.");
    }
</code></pre>
</blockquote>

<p>You haven't said anything specific about which version of C# you're using, so I'm going to address two cases.</p>

<p>If you're able to be at the cutting edge and use C# v7.3 then you can simplify this to</p>

<pre><code>public static T ToEnum&lt;T&gt;(this int value)
    where T : Enum
{
    Type type = typeof(T);
</code></pre>

<p>If for whatever reason you're forced to use an earlier version of C# you can still at least detect <em>some</em> problems at compile-time with</p>

<pre><code>public static T ToEnum&lt;T&gt;(this int value)
    where T : struct
{
    Type type = typeof(T);

    if (!type.IsEnum)
    {
        throw new ArgumentException($"{type} is not an enum.");
    }
</code></pre>

<p>Note that it is a matter of preference or local style whether in 7.3 you combine both tests: the only subtype of <code>Enum</code> which isn't a <code>struct</code> is <code>Enum</code> itself, so the gain is minor.</p>

<hr>

<p>Depending on your use case, this might not be a problem, but enums aren't necessarily ints. In particular, the following is legal:</p>

<pre><code>enum Foo : long
{
    Bar = 0x1234567890
}
</code></pre>

<p>So you might need to use a wider type for <code>value</code>.</p>
    </div>