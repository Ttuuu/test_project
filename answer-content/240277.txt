<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Based on an answer in an all partitions question (<a href="https://stackoverflow.com/questions/19368375/set-partitions-in-python/61141601">https://stackoverflow.com/questions/19368375/set-partitions-in-python/61141601</a>): This can be done with simple recursion, no need for itertools, no need for a complicated algorithm.  I am surprised this was not suggested.  It should be just as efficient as Knuth's algorithm as well as it goes through every combination only once.</p>

<pre><code>def subsets_k(collection, k): yield from partition_k(collection, k, k)
def partition_k(collection, min, k):
  if len(collection) == 1:
    yield [ collection ]
    return

  first = collection[0]
  for smaller in partition_k(collection[1:], min - 1, k):
    if len(smaller) &gt; k: continue
    # insert `first` in each of the subpartition's subsets
    if len(smaller) &gt;= min:
      for n, subset in enumerate(smaller):
        yield smaller[:n] + [[ first ] + subset]  + smaller[n+1:]
    # put `first` in its own subset 
    if len(smaller) &lt; k: yield [ [ first ] ] + smaller
</code></pre>

<p>Test:</p>

<pre><code>something = list(range(1,5))
for n, p in enumerate(subsets_k(something, 1), 1):
  print(n, sorted(p))
for n, p in enumerate(subsets_k(something, 2), 1):
  print(n, sorted(p))
for n, p in enumerate(subsets_k(something, 3), 1):
  print(n, sorted(p))  
for n, p in enumerate(subsets_k(something, 4), 1):
  print(n, sorted(p))
</code></pre>

<p>Yields correctly:</p>

<pre><code>1 [[1, 2, 3, 4]]

1 [[1], [2, 3, 4]]
2 [[1, 2], [3, 4]]
3 [[1, 3, 4], [2]]
4 [[1, 2, 3], [4]]
5 [[1, 4], [2, 3]]
6 [[1, 3], [2, 4]]
7 [[1, 2, 4], [3]]

1 [[1], [2], [3, 4]]
2 [[1], [2, 3], [4]]
3 [[1], [2, 4], [3]]
4 [[1, 2], [3], [4]]
5 [[1, 3], [2], [4]]
6 [[1, 4], [2], [3]]

1 [[1], [2], [3], [4]]
</code></pre>

<p>Compared to the Knuth implementation above (modified for Python3 - <code>xrange</code> changed to <code>range</code>):</p>

<pre><code>if __name__ == '__main__':
  import timeit
  print(timeit.timeit("for _ in subsets_k([1, 2, 3, 4, 5], 3): pass", globals=globals()))
  print(timeit.timeit("for _ in algorithm_u([1, 2, 3, 4, 5], 3): pass", globals=globals()))
</code></pre>

<p>Results in more than twice as fast code:</p>

<pre><code>20.724652599994442
41.03094519999286
</code></pre>

<p>Sometimes a simple approach is the best one.  It would be interesting to know if optimizations can be applied to Knuth variation to fix this, or if this simple algorithm is the best one.</p>

<p>Update: the Knuth timing information above is both wrong and misleading!!!</p>

<p>The <code>t</code> implementation compiles a whole list and does not return a generator.  Whereas the Knuth version has a generator.  To make a fair test comparison, one must enumerate all the elements otherwise the Knuth implementation is just running to the first <code>yield</code> returning the generator and timing this...  <code>for _ in generator: pass</code> would have been sufficient to have a real test comparison.</p>
    </div>