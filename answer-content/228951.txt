<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are some <a href="https://en.wikipedia.org/wiki/Sparse_matrix" rel="nofollow noreferrer">sparse matrix formats</a> that are commonly used in linear algebra settings. However, they are not optimized for random access, they are optimized for various linear algebra tasks. So whether they make sense to use (and which of them makes the most sense) depends on how you use your matrix. The code so far only implements random access, but since it is common to prematurely abstract in that way, that does not necessarily tell me that you also primarily use the matrix in random access mode.</p>

<p>Similarly, a single hashmap with a pair as key could be used. That saves a level of indirection so it is useful for random access, but it would also mean that the data structure no longer automatically tracks the number of items in a row (which could be useful information for a constraint satisfaction algorithm, to quickly zero in on courses with the most conflicts), it's not unambiguously better. If you do this, the hash of the pair shouldn't be just the XOR of the coordinates, because it will collide any two pairs with swapped coordinates ((1,2) with (2,1) etc), and even more on top of that ((0,3) and (5,6) and (4,7) and (8,11) and (9,10) and (12,15) and their swapped versions also all on top of (1,2)).</p>

<p>Unfortunately an other significant issue is that <code>std::unordered_map</code> is just not a great hash map, there are many benchmarks (<a href="https://tessil.github.io/2016/08/29/benchmark-hopscotch-map.html" rel="nofollow noreferrer">exhibit 1</a>, <a href="https://attractivechaos.wordpress.com/2018/01/13/revisiting-hash-table-performance/" rel="nofollow noreferrer">exhibit 2</a>, <a href="https://probablydance.com/2018/05/28/a-new-fast-hash-table-in-response-to-googles-new-fast-hash-table/" rel="nofollow noreferrer">exhibit 3</a>) and not only that, the existence of the <a href="https://en.cppreference.com/w/cpp/container/unordered_map/bucket" rel="nofollow noreferrer">bucket interface</a> mandated by the standard bars efficient implementations. There are many nearly-drop-in replacements without the bucket interface that waste less memory and are faster for small keys/elements.</p>
    </div>