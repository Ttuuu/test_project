<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong><code>is...()</code> UB</strong></p>

<p><code>is...(c)</code> can be <em>undefined behavior</em> (UB) when <code>c &lt; 0</code>.  To prevent, cast to <code>unsigned char</code>.</p>

<pre><code>// isspace(*str);
isspace((unsigned char) *str);

// isdigit(*str);
isdigit((unsigned char) *str);
</code></pre>

<p><strong>Invalid C code</strong></p>

<p><code>cout &lt;&lt; j &lt;&lt; endl;</code> is not well defined in C.  I suspect OP is using a non-C compiler.</p>

<p><strong>Code assumes <code>long long</code> wider than <code>int</code></strong></p>

<p><code>if (j &gt; INT_MAX)</code> is not possible when <code>INT_MAX == LLONG_MAX</code>.  Prior <code>i = i * 10</code> can readily overflow signed integer math which is UB.</p>

<p>In any case, the approach of needing wider math fails when trying to code <code>atoll()</code>.</p>

<p>Better to detect potential overflow using <code>int</code> math.  Alternative:</p>

<pre><code>int neg_sum = 0;
while (isdigit((unsigned char) *str))) {
  int digit = *str++ - '0';
  if (neg_sum &lt;= INT_MIN/10 &amp;&amp; (neg_sum &lt; INT_MIN/10 || digit &gt; -(INT_MIN%10))) {
    neg_sum = INT_MIN; // out of range
    break;
  } 
  neg_sum = neg_sum*10 - digit;
}

if (sign == 1) {
  if (neg_sum &lt; -INT_MAX) {
    return INT_MAX; 
  }
  return -neg_sum; 
}
return neg_sum; 
</code></pre>
    </div>