<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your solution is inefficient: for a list of length <em>n</em>, the worst-case running time is O(<em>n</em><sup>2</sup>), because you may need to test every possible pair of numbers.</p>

<p>A better algorithm would be to sort the list first.  (Maybe it's already sorted?  You didn't specify, but your examples suggest that that might be the case.)  Then, you would only need to try pairs where the left index only increases (if the pair sum is too small) and the right index only decreases (if the pair sum is too large).  The running time for that would be O(<em>n</em> log <em>n</em>) for the sorting step, plus O(<em>n</em>) for the search.</p>
    </div>