<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think your answer is much too long. Here's mine:</p>

<pre><code>def check_for_1_3_4(seq):
    return (1, 3, 4) in zip(seq, seq[1:], seq[2:])
</code></pre>

<p>Here are some tests:</p>

<pre><code>&gt;&gt;&gt; check_for_1_3_4([1, 3, 4, 5, 6, 7])
True
&gt;&gt;&gt; check_for_1_3_4([5, 6, 7, 1, 3, 4])
True
&gt;&gt;&gt; check_for_1_3_4([5, 6, 1, 3, 4, 7, 8])
True
&gt;&gt;&gt; check_for_1_3_4([1, 3])
False
&gt;&gt;&gt; check_for_1_3_4([])
False
&gt;&gt;&gt; 
</code></pre>

<p>My code may seem terse, but it's still readable for anyone who understands slicing and <code>zip</code>. I expect Python experts to at least know about slicing.</p>

<p>Unfortunately for me, my answer is less efficient than yours. It could triple the amount of memory used! By using generators a more efficient but more complicated solution can be created. Instead of creating copies of the sequence, this new code uses only the original sequence, but the logic is nearly the same.</p>

<pre><code>import itertools

def check_for_1_3_4(seq):
    return (1, 3, 4) in itertools.izip(seq,
                                       itertools.islice(seq, 1, None),
                                       itertools.islice(seq, 2, None))
</code></pre>

<p>The tests still pass.</p>

<p>I wouldn't expect most Python programmers to be familiar with <code>itertools</code>, but I was under the impression that Python experts do know it.</p>
    </div>