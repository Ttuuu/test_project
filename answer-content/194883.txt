<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>To promote code reuse, you should design the <code>collatz()</code> function so that it doesn't print anything.  Functions should either perform computations or I/O, not both.  Furthermore, there should be as little "free-floating" code as possible, and the input-prompting loop should be in a function.  Ideally, the main body of the program should look like this:</p>

<pre><code>for n in collatz(ask_positive_int()):
    print(n)
</code></pre>

<hr>

<p>Your <code>collatz()</code> function works recursively.  For long sequences, that will cause your program to crash due to stack overflow.  It should be written using a loop instead.</p>

<p>To avoid mixing I/O with the computations, you should <code>yield</code> the results instead of <code>print()</code>ing them.  That makes your function a Python <a href="https://docs.python.org/3/tutorial/classes.html#generators" rel="noreferrer">generator</a>.</p>

<p>Your function does not print the initial number.  I find that behaviour to be a bit counterintuitive.  It also complicates the code a bit, making you write two <code>print(newNumber)</code> calls.</p>

<p>You don't need a <code>newNumber</code> variable at all; you can just overwrite the <code>number</code> parameter.</p>

<pre><code>def collatz(n):
    """
    Generate the Collatz sequence, starting from n, until 1 is reached.
    The output starts with n and ends with 1.
    """
    while True:
        yield n
        if n % 2 == 0:
            n //= 2
        elif n == 1:
            break
        else:
            n = 3 * n + 1

def ask_positive_int():
    """Ask the user to enter a positive integer, retrying on invalid input."""
    while True:
        try:
            n = int(input("Enter a positive integer: "))
            if n &lt; 1:
                print("Number must be positive")
            else:
                return n
        except ValueError:
            print("Number must be an integer")

for n in collatz(ask_positive_int()):
    print(n)
</code></pre>
    </div>