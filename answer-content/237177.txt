<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Let's look for some patterns in your code:</p>

<p>First of all, we notice that you have three parameters with similar names. <code>condition</code>, <code>condition2</code> and <code>condition3</code>. These names indicates a code smell, that we should use an array or list instead.</p>

<p>Taking one step at a time, we see this code is repeated multiple times:</p>

<pre><code>if (StringUtils.isNotEmpty(condition.toString())) {
    query.append(ApplicationConstants.AND+"(");
    query.append("( " + condition + " )");

if (StringUtils.isNotEmpty(condition2.toString())) {
    query.append(ApplicationConstants.AND);
    query.append("( " + condition2 + " )");

if (StringUtils.isNotEmpty(condition3.toString())) {
    query.append(ApplicationConstants.AND);
    query.append("( " + condition3 + " )");

if (StringUtils.isNotEmpty(condition3.toString())) {
    query.append(ApplicationConstants.AND);
    query.append("( " + condition3 + " )");

if (StringUtils.isNotEmpty(condition2.toString())) {
    query.append(ApplicationConstants.AND+"(");
    query.append("( " + condition2 + " )");

if (StringUtils.isNotEmpty(condition3.toString())) {
    query.append(ApplicationConstants.AND);
    query.append("( " + condition3 + " )");

if (StringUtils.isNotEmpty(condition3.toString())) {
    query.append(ApplicationConstants.AND+"(");
    query.append("( " + condition3 + " )");
</code></pre>

<p>This indicates that we can extract a method. (We can also notice that the <code>"("</code> should be added for the <em>first true</em> if-statement, this is important but we will ignore this for now and get back to this later).</p>

<pre><code>private boolean addParameter(StringBuilder query, StringBuilder condition) {
    if (StringUtils.isNotEmpty(condition.toString())) {
        query.append(ApplicationConstants.AND);
        query.append("( " + condition + " )");
        return true;
    }
    return false;
}

private void appendConditions(StringBuilder query, StringBuilder condition, StringBuilder condition2,
    StringBuilder condition3) {
if (addParameter(condition)) {
    if (addParameter(condition2)) {
        if (addParameter(condition3)) {
            // we don't actually care about the result here
        }
    } else {
        if (addParameter(condition3)) {
            // not here either
        }
    }
    query.append(" )");
} else {
    if (addParameter(condition2)) {
        if (addParameter(condition3)) {
            // again, don't care about result
        }
        query.append(" )");
    } else {
        if (addParameter(condition3)) {
            // yeah ok, here we actually care...
            query.append(" )");
        }
    }
}
</code></pre>

<p>Now it's pretty clear that <code>query.append(" )");</code> should always be done last, so that can be moved out and then we can avoid some <code>if</code> statements.</p>

<pre><code>private void appendConditions(StringBuilder query, StringBuilder condition, StringBuilder condition2,
    StringBuilder condition3) {
if (addParameter(condition)) {
    if (addParameter(condition2)) {
        addParameter(condition3);
    } else {
        addParameter(condition3);
    }
} else {
    if (addParameter(condition2)) {
        addParameter(condition3);
    } else {
        addParameter(condition3);
    }
}
query.append(" )");
</code></pre>

<p>And now we're doing the same in both some if's and else's, so that can be simplified:</p>

<pre><code>private void appendConditions(StringBuilder query, StringBuilder condition, StringBuilder condition2,
    StringBuilder condition3) {
if (addParameter(condition)) {
    addParameter(condition2);
    addParameter(condition3);
} else {
    addParameter(condition2);
    addParameter(condition3);
}
query.append(" )");
</code></pre>

<p>Once again we're doing the same thing:</p>

<pre><code>private void appendConditions(StringBuilder query, StringBuilder condition, StringBuilder condition2,
    StringBuilder condition3) {
addParameter(condition);
addParameter(condition2);
addParameter(condition3);
query.append(" )");
</code></pre>

<p>So we're essentially doing the same thing three times. This is where a loop would be handy.</p>

<pre><code>private void appendConditions(StringBuilder query, StringBuilder... conditions) {
    for (StringBuilder condition : conditions) {
        addParameter(condition);
    }
    query.append(" )");
</code></pre>

<p>And now of course, we don't really need that separate <code>addParameter</code> method.</p>

<pre><code>private void appendConditions(StringBuilder query, StringBuilder... conditions) {
    for (StringBuilder condition : conditions) {
        if (StringUtils.isNotEmpty(condition.toString())) {
            query.append(ApplicationConstants.AND);
            query.append("( " + condition + " )");
        }
    }
    query.append(" )");
</code></pre>

<hr>

<p>Now, let's get back to the parenthesis: <code>+"("</code> is added in the first true if-statement in your original code. So this, in connection with the closing <code>" )"</code> can be handled by for example keeping a <code>boolean</code> to check for if an if-statement has been true so far.</p>

<pre><code>private void appendConditions(StringBuilder query, StringBuilder... conditions) {
    boolean conditionUsed = false;
    for (StringBuilder condition : conditions) {
        if (StringUtils.isNotEmpty(condition.toString())) {
            query.append(ApplicationConstants.AND);
            if (!conditionUsed) {
                conditionUsed = true;
                query.append(" (");
            }
            query.append("( " + condition + " )");
        }
    }
    if (conditionUsed) {
        query.append(" )");
    }
</code></pre>

<p>But when reflecting more about what it is that you do, we see that you have a collection of <code>StringBuilder</code>s, you check each if it is not empty, then you join them together with <code>ApplicationConstants.AND</code>.</p>

<pre><code>    String specialConditions = Arrays.stream(conditions)
        .map(StringBuilder::toString)
        .filter(StringUtils::isNotEmpty)
        .collect(Collectors.joining(ApplicationConstants.AND));
    if (StringUtils.isNotEmpty(specialConditions)) {
        query.append(" (");
        query.append(specialConditions);
        query.append(" )");
    }
</code></pre>

<p>Voil√†!</p>
    </div>