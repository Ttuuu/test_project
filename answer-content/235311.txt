<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Let's see what is the Big O of your code.</strong></p>

<ol>
<li>In new versions of Java <code>substring</code> creates a new String and performs in <span class="math-container">\$O(n)\$</span> (In older versions this is <span class="math-container">\$O(1)\$</span>)</li>
<li><code>uniqueRepeats.contains(character)</code> results in <span class="math-container">\$O(m)\$</span> where <span class="math-container">\$m\$</span> is count of unique characters.</li>
<li><code>restOfString.indexOf(character) != -1</code> - this is again <span class="math-container">\$O(n)\$</span></li>
<li><code>uniqueRepeats += character</code> Depending on the JVM this might end up creating set of <code>StringBuilder</code> objects or set of <code>String</code> objects that are discarded. So this is probably <span class="math-container">\$O(m^2)\$</span></li>
<li>You are doing this for <span class="math-container">\$n\$</span> characters.</li>
</ol>

<p>So time complexity is - <span class="math-container">\$O(n *(n + m + m^2))\$</span> in some situations <span class="math-container">\$m\$</span> can be as large as <span class="math-container">\$n\$</span>. So if we simplyfy things we get <span class="math-container">\$O(n^3)\$</span>.</p>

<p><strong>Ideas:</strong></p>

<ul>
<li>This is where your <code>HashMap</code> idea would've been better. We can simply store <code>Char</code> and an <code>Integer</code> count. Then iterate over your map to count all elements that has more than <span class="math-container">\$1\$</span> element. <code>LinkedHashMap</code> is very useful for a situation like this.</li>
<li>Why is <code>LinkedHashMap</code> better? Because it has an internal linked list that allows faster iteration.</li>
<li>We can also use an array if this is ASCII only. (But it is easier with a <code>Map</code>).</li>
<li>This will result in armotized <span class="math-container">\$O(n)\$</span>. Which is lot better.</li>
<li>Either way all these are theoretical and it is always better to profile things.</li>
</ul>

<hr>

<p><strong>Code</strong></p>

<blockquote>
<pre><code>//Will keep track of unique repeats.
//Convert single char to String to be used in method.
//If not in uniqueRepeats, check if it is a repeat. 
//If it is a repeat, increase count and concat it to uniqueRepeats
</code></pre>
</blockquote>

<ul>
<li>You have mentioned <strong>what</strong> you are doing in comments. We can also understand that from code itself. So it is better to include <strong>why</strong> comments.</li>
<li>I recommend that you use an IDE to indent code. Code is clearly not indented accurately.</li>
</ul>

<blockquote>
<pre><code>if(!uniqueRepeats.contains(character)) {
    if(restOfString.indexOf(character) != -1) {
</code></pre>
</blockquote>

<ul>
<li>Be consistent. We can use <code>contains</code> to both above statements.</li>
</ul>

<p><sub>
<strong>References</strong></sub></p>

<ul>
<li><a href="https://stackoverflow.com/a/1532483/1355145">https://stackoverflow.com/a/1532483/1355145</a></li>
<li><a href="http://java-performance.info/changes-to-string-java-1-7-0_06/" rel="nofollow noreferrer">http://java-performance.info/changes-to-string-java-1-7-0_06/</a></li>
<li><a href="https://stackoverflow.com/questions/26311776/why-iteration-through-buckets-in-linkedhashmap-is-faster-than-hashmap">https://stackoverflow.com/questions/26311776/why-iteration-through-buckets-in-linkedhashmap-is-faster-than-hashmap</a></li>
</ul>

<p></p>
    </div>