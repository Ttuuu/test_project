<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>I have succeeded in implementing a working code, but it seems it is
  quite complex (it is like inception) and if the count of the numbers
  is to be greater, it would be rather pointless to use such a method.</p>
</blockquote>

<p>This is called <a href="http://c2.com/cgi/wiki?ZeroOneInfinityRule" rel="nofollow">Zero One Infinity Rule</a>. </p>

<p>Here, you enumerate all subsets of some N (=5) numbers. You do this by first enumerating 2-element subsets then 3-element subsets and so on. And you couldn't generalize this to arbitrary N. (Not handling <em>Zero</em> and <em>One</em> cases can impede seeing the <em>Infinity</em> cases.)</p>

<p>When you meet a situation like this, take a step back and reexamine the problem. First restate the problem with N identified clearly and the statement of the problem doesn't include the method used to solve it. (This is another reason why you should extract snippets of your code and give them names indicating what they do and not how they do.)</p>

<p>As I mentioned before what you try to do above can be stated as "enumerate all subsets of some N (=5) numbers". The way to generalize this to arbitrary N is to look at how would one "enumerate <em>all subsets of some N numbers</em>, given <em>all subsets of some N-1 numbers</em>" and go from there. It is easy to figure out, then, that the subsets of N numbers consist of the subsets of the first N-1 of those numbers and those subsets obtained by adding the Nth element to each of those subsets.</p>

<p>The problem with your decomposition was that from the get go (2 element subsets) you are using all N elements.</p>

<h2>Powerset of an IEnumberable:</h2>

<pre><code>public static IEnumerable&lt;IEnumerable&lt;T&gt;&gt; PowerSet&lt;T&gt;(IEnumerable&lt;T&gt; elements)
{
    return elements.Aggregate(
        new []{new T[]{}} as IEnumerable&lt;IEnumerable&lt;T&gt;&gt;,
        (subsetsSoFar, element) =&gt; subsetsSoFar.Concat(
            subsetsSoFar.Select(subset =&gt; subset.Concat(new[]{element}))));
}
</code></pre>

<p>The example of powerset implementations I could find online are not lazy and most copy around lists a lot and so this, apart from being shorter and more readable, also should behave better for larger input, though I haven't tried.</p>

<p>The rest is similar to other answers, except that if the subsets having at least 2 elements is a requirement, it should be stated (in the problem description as well as solution).</p>

<pre><code>var zeroSumSubsets = PowerSet(numbers)
                     .Where(subset =&gt; subset.Count() &gt; 1)
                     .Where(subset =&gt; subset.Sum() == 0);

foreach(var subset in zeroSumSubsets)
    // Do whatever...
</code></pre>
    </div>