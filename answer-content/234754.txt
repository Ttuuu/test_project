<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Solver</h1>

<p>Your back-tracking algorithm to find the solution to the puzzle is fine, although it is fairly inefficient.</p>

<ul>
<li>On each recursive call, the algorithm must search for the position of the next unknown, which means starting at <code>[0][0]</code> and searching over the same locations over and over on each call.  You could improve it by creating an <code>ArrayList&lt;&gt;</code> of unknown positions, and directly indexing to the unknown corresponding to the current search depth.  Or you could pass the current board position <code>(i, j)</code> as a starting point for the next level of the search.</li>
<li>You could use a <code>Set&lt;&gt;</code>, such as a <code>BitSet</code>, to store the unused numbers in each row, column, and box.  When processing each cell, you could "and" those sets together to create a much smaller set of candidate values to try.</li>
</ul>

<p>But these optimizations are only necessary if your solver algorithm isn't fast enough.  I haven't tried it.</p>

<p>An organizational improvement might be to move the Sudoku Solver code into its own class, so it could be used in other projects.  For instance, you could make a JavaFX, or an SWT version of your program, and reuse the solver code ... if it was a stand-alone class.</p>

<h1>GUI</h1>

<p>Your GUI is where a lot of work is absolutely needed.  This code is just plain awful.</p>

<h2>Minor</h2>

<p>Starting with the easiest to fix items:</p>

<ul>
<li><p>the <code>getSudoku()</code> method creates a <code>JFrame</code> and sets <code>EXIT_ON_CLOSE</code>, but the <code>display()</code> method creates a <code>JFrame</code> without <code>EXIT_ON_CLOSE</code>.  If the user closes the second frame, the program will not immediately terminate.</p></li>
<li><p><code>JTextArea</code> is a multiline text edit window.  You are creating 81 of these in a 9x9 grid.  Surely you wanted to use the much lighter weight <code>JTextField</code> ... or even the <code>JLabel</code> when displaying the solution.</p></li>
<li><p>You create 81 identical <code>Font</code> objects, one for each <code>JTextArea</code>.  You should create just one, and set the font of each <code>JTextArea</code> (or <code>JTextField</code>/<code>JLabel</code>) to this common <code>Font</code> object.  Simply move the statement out of the double loop.</p></li>
<li><p><code>public static int[][] getSudoku(int[][] board)</code> is this method allocating a new board and returning it, or is it just modifying the board it was given?  Why have both an input parameter <code>board</code> and a return value, if the board that it is given is the board that is returned?</p></li>
</ul>

<p>But the most <strong>SERIOUS</strong> problem is you are creating and manipulating Swing GUI objects from threads other than the <strong><em>Event Dispatching Thread</em></strong> (EDT).  Swing is <strong>NOT</strong> thread safe.  It is a convenience, and a thorn, that Swing allows you to build the GUI on the main thread.  Swing goes to great lengths to allow it ... once.  After the realization of any Swing GUI object, or after any <code>Timer</code> is started, all interaction must be performed on the EDT, or unexplainable, hard-to-debug behaviour -- up to and including application crashes -- are possible.  So up to this line, which realizes the GUI components:</p>

<pre><code>    frame.setVisible(true);
</code></pre>

<p>you are safe.  However, it is followed by:</p>

<pre><code>    while(helper(0)) {

    }
    frame.dispose();
</code></pre>

<p>which is a recipe for disaster.  It is bad that this is an empty spin loop on the main application thread, but <code>frame.dispose()</code> is the violation about touching live Swing objects from threads other than the EDT.  Then, the code returns to the <code>main()</code> function where <code>display()</code> is called, and more Swing GUI items are created on not the EDT.</p>

<h2>Working on the EDT</h2>

<p>First, you should divorce yourself from the main thread, and create your GUI on the EDT:</p>

<pre><code>public class SudokuSolver {

    public static void main(String[] args) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            void run() {
                createGUI();
            }
        });
    }

    private static void createGUI() {
        /* Create JFrame, JPanel, etc here */
        frame.setVisible(true); 
   }

   ...
}
</code></pre>

<p>Or, if you are comfortable with lambdas and method references:</p>

<pre><code>public class SudokuSolver {

    public static void main(String[] args) {
        SwingUtilities.invokeLater(SudokuSolver::createGUI);
    }

    private static void createGUI() {
        /* Create JFrame, JPanel, etc here */
        frame.setVisible(true); 
   }

   ...
}
</code></pre>

<p>The <code>invokeLater()</code> method takes a runnable, switches to the Event Dispatching Thread, and runs the runnable.  So this create all GUI objects on the EDT.  The final step is the frame is made visible.  And then execution ends.  Nothing else happens.   The main thread has already reached the end of <code>main()</code> and has terminated; nothing else happens there, either.  The application has become purely an event driven GUI application.  It is now waiting for the user to interact with the GUI elements.</p>

<h2>Working off the EDT</h2>

<p>Once the user has entered their grid, the press the <code>"OK"</code> button, and the <code>actionPerformed</code> method is called.</p>

<p>Note that this method called <code>helper(1)</code> a total of 81 times.  At any point after this method was called once, and before it had been called the last time, the <code>board[][]</code> would have contained an incomplete starting point for the solution, but the main thread could start attempting to solve the grid, since the <code>test</code> flag would have been cleared!  Just one more danger of multithreaded processing.</p>

<p>Instead, after both loops in the <code>actionPerformed</code> method, a <a href="https://docs.oracle.com/javase/7/docs/api/javax/swing/SwingWorker.html" rel="nofollow noreferrer"><code>SwingWorker</code></a> should be created and given a copy of the <code>board</code>.  This worker could solve the <code>board</code> in its background thread, and then in its <a href="https://docs.oracle.com/javase/7/docs/api/javax/swing/SwingWorker.html#done()" rel="nofollow noreferrer"><code>done()</code></a> method, which is run once again on the EDT, the solved board could be displayed in the GUI.</p>
    </div>