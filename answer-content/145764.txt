<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Inheritance is typically describe as an "is-a" relationship.  So when you derive a <code>Dog</code> from an <code>Animal</code>, we can say that a <code>Dog</code> is a <code>Animal</code>.  However, when you derive a <code>Cat</code> from a <code>Dog</code>, unless this is some other planet, we can't correctly say that a <code>Cat</code> is a <code>Dog</code>.  Further, we can, without error, invoke <code>Tina.woof('ferocious')</code> to cause "Tina just did a ferocious woof".  Since no Persian cat I've ever seen has been known to "woof" either ferociously or not, this is an alarming and surprising result.</p>

<p>Better would be to derive both <code>Dog</code> and <code>Cat</code> types from <code>Animal</code>.  If you have other animals which don't have names, breeds or genders, you could have some intermediate class such as <code>Pet</code> that would capture the additional detail not already in <code>Animal</code>.  Otherwise, just add those attributes to <code>Animal</code>.</p>

<p>Finally, we can put the <code>speak</code> method in the base <code>Animal</code> class.  One simple illustration is this:</p>

<pre><code>class Animal:
    def __init__(self, kind, place):
        self.kind = kind
        self.place = place

    def speak(self, adverb):
        print("%s just did a %s %s" % (self.name, adverb, self.speechtype))

    #getallinfo method, get's all the parametrs of both classes.
    def getallinfo(self):
        print("%s is a %s %s %s, sitting on the %s" % (self.name, self.gender, self.breed, self.kind, self.place))

#This class inherits kind and place arguments from Animal class (which can work for any animal)
#Initiates a Dog object with name, gender and breed parameters.

class Dog(Animal):
    def __init__(self, name, gender, breed):
        self.name = name
        self.gender = gender
        self.breed = breed
        self.speechtype = "woof";
        Animal.__init__(self, 'Dog', 'Ground')


#Cat class inherits the paramets of use for a Cat (similar things) like name, gender and breed, which they both share, also the getallinfo method and initiate them. 
class Cat(Animal):
    def __init__(self, name, gender, breed):
        self.name = name
        self.gender = gender
        self.breed = breed
        self.speechtype = "meow";
        Animal.__init__(self, 'Cat', 'Ground')


#Here I create 3 objects, 2 dogs and 1 cat with selected arguments.
#And check for some methods on the objects.
Mickey = Dog('Mickey', 'Male', 'Bulldog')
Flora = Dog('Flora','Female','Pug')
Tina = Cat('Tina','Female','Persian')
Tina.getallinfo()
Tina.speak('soft')
Flora.getallinfo()
Mickey.speak('loud')
</code></pre>

<p>There's more that could be improved, but I hope that helps until others weigh in on your question and give more expansive answers.</p>
    </div>