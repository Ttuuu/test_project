<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Spacing</h3>

<p>The usage of (horizontal) space is not consistent, you have a space
after <code>if</code> and <code>switch</code>, but not after <code>else</code> and <code>while</code>. 
I would generally use more whitespace to increase the readability, in particular after keywords, around operators, etc. For example</p>

<pre><code>while (answer.length() &gt;= i) {
</code></pre>

<h3>Scope</h3>

<p>It is a good habit to declare variables at the narrowest scope where they are used, and not at the top of the function. This applies for example
to <code>digit</code> and <code>stringDigit</code>, which are only used inside the while-loop.</p>

<h3>Input validation</h3>

<p><code>std::stoi(instring, nullptr)</code> silently ignores leading whitespace
and trailing non-digits, that might or might not be wanted.
The <code>pos</code> parameter could be used to check if the complete string
has been converted successfully.</p>

<p>Also <code>std::stoi(instring, nullptr)</code> throws an <code>std::invalid_argument</code>
exception if the input string contains no valid digits at all,
you might want to catch that.</p>

<h3>Iterating too far</h3>

<p>In </p>

<pre><code>int i = 0;
while(answer.length()&gt;=i){
    switch (answer[i]-'0'){
        // ...
    }
    i++;
}
</code></pre>

<p>the last iteration accesses <code>answer[answer.length()]</code>, which is
the null character. Even if this causes no harm (<code>answer[i]-'0'</code>
then matches none of the cases) it is probably unintended and you'll
want <code>answer.length() &gt; i</code> instead. (See below for further improvements
of this part.)</p>

<h3>Simplifications</h3>

<p>The remainder modulo 7 <em>cannot</em> be <code>&gt;= 10</code>, so the while loop
simplifies to</p>

<pre><code>while (in != 0) {
    int digit = in % 7;
    std::string stringDigit;
    stringDigit = '0' + digit;
    answer = stringDigit + answer;
    in /= 7;
}
</code></pre>

<p>which can further be simplified to</p>

<pre><code>while (in != 0) {
    char digit = '0' + in % 7;
    answer.insert(0, 1, digit);
    in /= 7;
}
</code></pre>

<p>making the <code>stringDigit</code> variable obsolete, and mutating <code>answer</code>
instead of concatenating strings.</p>

<p>Iterating over all valid string indices is better done with a for loop:</p>

<pre><code>for (int i = 0; i &lt; answer.length(); ++i) {
    // ... use `answer[i]` ...
}
</code></pre>

<p>But actually you don't need the index, only the characters, and
iterating over all characters in a string can be done more simply
with a range-based for loop (added in C++ 11):</p>

<pre><code>for (char&amp; c : answer)
    // ...
}
</code></pre>

<p>The switch statement can be replaced by an array lookup:</p>

<pre><code>std::string blameStrings[] = {
    "\u180E", "\u200B", "\u200C", "\u200D", "\u2060", "\u2063", "\uFEFF"
};
for (char&amp; c : answer) {
    std::cout &lt;&lt; blameStrings[c - '0'];
}
</code></pre>

<p>(You can probably choose a better name for the array, but I have no
idea what those strings stand for.)</p>

<h3>Get rid of the intermediate string storage</h3>

<p>Your code computes <code>answer</code> as the base-7 representation of the
input number, and then iterates over the characters in that string.</p>

<p>The conversion from digits to characters in a string and back to
digits can be avoided by storing the integer digits in a vector
instead. And instead of prepending additional digits, we can append
them (to avoid that memory needs to be moved repeatedly) and then iterate
over the result in reverse order:</p>

<pre><code>#include &lt;vector&gt;

// ...

int in = std::stoi(instring, nullptr);
std::vector&lt;int&gt; digits;
while (in != 0) {
    digits.push_back(in % 7);
    in /= 7;
}

std::cout&lt;&lt;"!!/blame\u180E ";
for (auto it = digits.rbegin(); it != digits.rend(); ++it) {
    std::cout &lt;&lt; blameStrings[*it];

}
std::cout&lt;&lt;"a\n";
</code></pre>
    </div>