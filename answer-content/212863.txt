<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In addition to all the great advice in the other answers, specifically about always using <code>Option Explicit</code> and the <a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself" rel="nofollow noreferrer">DRY</a> principle...</p>

<p>What happens when someone pastes multiple cells at once (instead of using the down down)?</p>

<p>Typically I use a <code>For Each cell in Target</code> followed by a <code>Select Case Cell.Column</code>.  </p>

<p>It handles the pasting of multiple cells at once (where your code only deals with the first cell) and is much easier to read.</p>

<p>There are also a few Application variables that you can change to speed things up.  The main one, that should almost be a requirement for the <code>Worksheet_Change</code> function is:</p>

<p><strong>Application.EnableEvents</strong>.  </p>

<p><strong><em>If you don't turn this off while you make changes to the current worksheet, you could get stuck in an endless loop</em></strong>.  </p>

<p>Anyway, this is the basic idea of what I end up using...</p>

<pre><code>Private Sub Worksheet_Change(ByVal Target As Range)
Dim isActiveWindow As Boolean
Dim InitialScreenUpdating As Boolean, InitialEnableEvents As Boolean, InitialCalculation As Boolean
Dim DataRange As Excel.Range, Cell As Excel.Range

    ' Get current State
    isActiveWindow = Not ActiveWindow Is Nothing
    ' Can't reference Application.Calculation unless a Window is active
    If isActiveWindow Then InitialCalculation = Application.Calculation
    InitialEnableEvents = Application.EnableEvents
    InitialScreenUpdating = Application.ScreenUpdating

    ' In case anything goes wrong, we need a safe exit...
    On Error GoTo ErrHandler

    ' Turn off Automatic Calculation mode...if changing a lot of values that are referenced in formulas
    If isActiveWindow Then Application.Calculation = xlCalculationManual
    ' Turn off All Events...such as Worksheet_Change.
    ' Make sure that you turn it back on (specificaly when debugging and you stop the code, no events will trigger)
    Application.EnableEvents = False
    ' Pause screen rendering, to speed up code if there are lots of changes (doesn't apply while debugging)
    Application.ScreenUpdating = False

    ' Limit the Target to the range that you care about...
    ' in this case anything but the first row
    Set DataRange = ActiveSheet.Range("2:" &amp; ActiveSheet.Rows.Count)
    Set Target = Intersect(Target, DataRange)

    ' Just in case there are multiple cells changed...
    For Each Cell In Target
        Select Case Cell.Column
        Case 1
            ' Do something
        Case Else
            If Cell.Column Mod 3 = 2 Then
                ' Do something else
            End If
        End Select
    Next

ErrHandler:
    If Err.Number &lt;&gt; 0 Then
        MsgBox "Error: " &amp; Err.Number &amp; vbCr &amp; vbCr &amp; Err.Description
    End If

    ' Restore States to what it was at the start
    isActiveWindow = Not ActiveWindow Is Nothing
    ' Can't reference Application.Calculation unless a Window is active, hence the nested If statements
    If isActiveWindow Then _
            If Application.Calculation &lt;&gt; InitialCalculation Then _
                Application.Calculation = InitialCalculation
    If Application.EnableEvents &lt;&gt; InitialEnableEvents Then _
        Application.EnableEvents = InitialEnableEvents
    If Application.ScreenUpdating &lt;&gt; InitialScreenUpdating Then _
        Application.ScreenUpdating = InitialScreenUpdating
    ' You could just set these, but if this is added to nested functions, 
    ' you wouldn't want to cause unnecessary flickering.
End Sub
</code></pre>

<hr>

<p>In reality, and because of DRY, you would want to create a function to clean it up so that it would look something like this...</p>

<pre><code>Private Sub Worksheet_Change(ByVal Target As Range)
Dim AppState As AppStateType
    On Error GoTo ErrorHandler
    AppState = ChangeAppState(AppState, -1, True, True)

    ' Do stuff here

ErrorHandler:

EndSub:
    ChangeAppState AppState, , True, True
End Sub
</code></pre>

<p>Where I have a public <em>User Defined Type</em>:</p>

<pre><code>Public Type AppStateType
    ScreenUpdating As Boolean
    DisplayStatusBar As Boolean
    Calculation As Integer
    EnableEvents As Boolean
End Type
</code></pre>

<p>and the <em>ChangeAppState</em> Function</p>

<pre><code>' Turn ScreenUpdating off for speed, while writing values to the cells.
' Turn EnableEvents off to disable the SheetChange Events from firing while updating values.
' Turn Calculation to xlCalculationManual for speed while updating values.
Function ChangeAppState(AppState As AppStateType, Optional State As Integer, _
                        Optional SetScreenUpdating As Boolean, Optional SetEnableEvents As Boolean, _
                        Optional SetCalculation As Boolean, Optional SetDisplayStatusBar As Boolean) As AppStateType
Dim bActiveWindow As Boolean
' Change the Application States to False/Manual if State is -1
' Change the Application States back to the the values in AppState if State is 0
' Change the Application States to True/Automatic if State is 1
    bActiveWindow = Not ActiveWindow Is Nothing
    ChangeAppState.ScreenUpdating = Application.ScreenUpdating
    ChangeAppState.DisplayStatusBar = Application.DisplayStatusBar
    If bActiveWindow Then ChangeAppState.Calculation = Application.Calculation
    ChangeAppState.EnableEvents = Application.EnableEvents
    Select Case State
    Case -1
        If SetScreenUpdating And Application.ScreenUpdating &lt;&gt; False _
        Then Application.ScreenUpdating = False
        If SetEnableEvents And Application.EnableEvents &lt;&gt; False _
        Then Application.EnableEvents = False
        If bActiveWindow Then _
            If SetCalculation And Application.Calculation &lt;&gt; xlCalculationManual _
            Then Application.Calculation = xlCalculationManual
        If SetDisplayStatusBar And Application.DisplayStatusBar &lt;&gt; False _
        Then Application.DisplayStatusBar = False
    Case 0
        If SetDisplayStatusBar And Application.DisplayStatusBar &lt;&gt; AppState.DisplayStatusBar _
        Then Application.DisplayStatusBar = AppState.DisplayStatusBar
        If bActiveWindow Then _
            If SetCalculation And Application.Calculation &lt;&gt; AppState.Calculation _
            Then Application.Calculation = AppState.Calculation
        If SetEnableEvents And Application.EnableEvents &lt;&gt; AppState.EnableEvents _
        Then Application.EnableEvents = AppState.EnableEvents
        If SetScreenUpdating And Application.ScreenUpdating &lt;&gt; AppState.ScreenUpdating _
        Then Application.ScreenUpdating = AppState.ScreenUpdating
    Case 1
        If SetScreenUpdating And Application.ScreenUpdating &lt;&gt; True _
        Then Application.ScreenUpdating = True
        If SetEnableEvents And Application.EnableEvents &lt;&gt; True _
        Then Application.EnableEvents = True
        If bActiveWindow Then _
            If SetCalculation And Application.Calculation &lt;&gt; xlCalculationAutomatic _
            Then Application.Calculation = xlCalculationAutomatic
        If SetDisplayStatusBar And Application.DisplayStatusBar &lt;&gt; True _
        Then Application.DisplayStatusBar = True
    End Select
End Function
</code></pre>

<h2>In addition</h2>

<p>The <code>AutoFit</code> function is probably going to be one of the slowest operations that you have.  The above code should help speed it up.  If it doesn't, you may want/need to do the following</p>

<ul>
<li>create a new temporary sheet in the background</li>
<li>add the same username/date values</li>
<li><code>Autofit</code> the new sheet</li>
</ul>

<p>If those columns are larger then the ones in the original sheet, you would</p>

<ul>
<li>adjust the original sheet's columns</li>
<li>delete the temporary sheet.  </li>
</ul>

<p>Just make sure the font/size &amp; sheet zoom are the same.</p>
    </div>