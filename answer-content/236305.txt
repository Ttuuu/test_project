<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Instead of calling <code>strtol</code> repeatedly, you could also call it once to extract a 64-bit integer, and then do some calculations on that integer.</p>

<p>The basic idea is:</p>

<pre class="lang-c prettyprint-override"><code>bool checksum(const char *card) {

    unsigned long long int num = strtoull(card, NULL, 16);

    unsigned long long int xored = 0;

    xored ^= num &gt;&gt; 40;
    xored ^= num &gt;&gt; 32;
    xored ^= num &gt;&gt; 24;
    xored ^= num &gt;&gt; 16;
    xored ^= num &gt;&gt; 8;
    xored ^= num;

    return (xored &amp; 0xFF) == 0;
}
</code></pre>

<p>The above code works by looking at a small "window" of the number in each line. One after another, the digit pairs are shifted into that "window" and xored to form the final result. It basically looks like this:</p>

<pre><code>AABBCCDDEEFF   &lt;- the number
00AABBCCDDEE   &lt;- the number, shifted by 8 bits to the right
        00AA   &lt;- the number, shifted by 40 bits to the right

          **
          AABBCCDDEEFF    40 bits
        AABBCCDDEEFF      32 bits
      AABBCCDDEEFF        24 bits
    AABBCCDDEEFF          16 bits
  AABBCCDDEEFF             8 bits
AABBCCDDEEFF               0 bits
          **
</code></pre>

<p>The small part between the asterisks is the interesting part of the "window", which will form the final result. Outside this window, the bits also take part in the computation, but they will be ignored. The nice thing about xor is that the outside bits cannot influence the inside bits. This is different from the usual integer addition or subtraction.</p>

<p>After xoring all the shifted numbers, the interesting part of the window is extracted using <code>&amp; 0xFF</code>. In the first attempt I used an <code>unsigned char xored</code>, but then I realized that it might be larger than 8 bits. It seemed clever at first but really wasn't. I could have used <code>uint8_t</code>, which would have worked as well. Which one is better depends on the generated machine code. When you have learned assembler, you can look at the generated code and compare them.</p>

<p>What's left now is some error checking. Your code silently assumes that it will only be passed valid data, that is a 12-digit hex number. It's not that difficult to add the missing error handling:</p>

<pre class="lang-c prettyprint-override"><code>#include &lt;ctype.h&gt;
#include &lt;stdbool.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;

bool checksum(const char *card) {
    if (strlen(card) != 12) {
        return false;
    }

    // Make sure that the whole card number looks like a hex number.
    char *end;
    unsigned long long int num = strtoull(card, &amp;end, 16);
    if (end != card + 12) {
        return false;
    }

    // Make sure the first character is not a space or hyphen or plus,
    // which would be accepted by strtoull.
    if (!isxdigit((unsigned char)card[0])) {
        return false;
    }

    // Make sure the second character is not an x, since 0x would be
    // interpreted as "hex" by strtoull.
    if (!isxdigit((unsigned char)card[1])) {
        return false;
    }

    unsigned long long int xored = 0;

    xored ^= num &gt;&gt; 40;
    xored ^= num &gt;&gt; 32;
    xored ^= num &gt;&gt; 24;
    xored ^= num &gt;&gt; 16;
    xored ^= num &gt;&gt; 8;
    xored ^= num;

    return (xored &amp; 0xFF) == 0;
}
</code></pre>

<p>To be sure that the above code is correct, you must think of a whole bunch of test cases. One test case is definitely not enough since a simple <code>return true</code> would have made that test succeed.</p>

<p>A few test cases I came up with are:</p>

<pre><code>#include &lt;assert.h&gt;

int main(void) {
    assert(checksum("") == false);
    assert(checksum("00000000000") == false); // 11 digits are too short
    assert(checksum("000000000000") == true);
    assert(checksum("0000000000000") == false); // 13 digits are too long
    assert(checksum("000000000001") == false);
    assert(checksum("000000000101") == true);
    assert(checksum("000000010001") == true);
    assert(checksum("000001000001") == true);
    assert(checksum("000100000001") == true);
    assert(checksum("010000000001") == true);
    assert(checksum("FF01020408F0") == true);
    assert(checksum("123456563412") == true);
    assert(checksum("123456654321") == false);
    assert(checksum("abcdefABCDEF") == true);
    assert(checksum("abcdefABCDEF") == true);
    assert(checksum("abcdegABCDEF") == false); // invalid character in the middle
    assert(checksum("-00000000000") == false); // invalid character at the beginning
    assert(checksum("           0") == false); // invalid character at the beginning
    assert(checksum("+00000000000") == false); // invalid character at the beginning
    assert(checksum("0x0000000000") == false); // don't let strtoull trick us with hex

    assert(checksum("1E00EDE5E5F3") == true);
}
</code></pre>

<p>I intentionally used the <code>== true</code> and <code>== false</code> here to keep the beginnings of the lines the same, to make them clearly stick out as a block of code. If I had used the often recommended form of omitting the <code>== true</code> and replacing <code>x == false</code> with <code>!x</code>, the visual code layout would have been much more chaotic.</p>
    </div>