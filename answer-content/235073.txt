<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>Can I do it in a better way?</p>
</blockquote>

<p>From the time complexity or space complexity your solution is good enough. Your store all your string frequencies beforehand so that to retrieve a frequency by any given string in <code>O(1)</code> time later. Also, it passes all the test cases so it's a good sign too.</p>

<p>Below are a couple of concerns regarding other aspects of your code.</p>

<p><strong>Variable Naming</strong></p>

<p>Your choice of variable names should be improved. For instance, <code>Map&lt;String, Integer&gt; counter</code> doesn't really reflect for what it stands for. I would call it <code>stringFrequencyMap</code> or <code>stringCountMap</code>.  </p>

<p>Also, <code>result</code> sounds too generic here. How about <code>queryResults</code>?</p>

<p>I'll leave it up to you to think about other variable names you have (luckily not many left :) ).</p>

<p><strong>Static method</strong></p>

<p>I guess you've kept this method <code>static</code> as it was like this by default and to avoid creating an instance of your <code>Solution</code> class in the <code>main()</code> method. While it's fine for a small challenge like yours, generally there should be a good reason to add <code>static</code> to your method.</p>

<p><strong>Improvements</strong></p>

<blockquote>
  <p>Can this be simplified in Java-8, 11 or later?</p>
</blockquote>

<p>Of course, if we just use <strong>JAVA 8</strong> then we can take advantage of <code>streams</code> and write a solution as :</p>

<pre><code>static long[] matchingStrings(String[] strings, String[] queries) {
    Map&lt;String, Long&gt; stringCountMap = Arrays.stream(strings).collect(Collectors.groupingBy(Function.identity(), counting()));

    return Arrays.stream(queries).mapToLong(query -&gt; stringCountMap.getOrDefault(query, 0L)).toArray();
}
</code></pre>

<p>As you can see, we do this in 2 steps. First, we calculate a frequency map and then calculate an array of results using streams again. Please note that I changed the return type from <code>int[]</code> to <code>long[]</code>.</p>

<p><strong>UPDATE</strong></p>

<p>Since there was a question why I've used <code>Map&lt;String, Long&gt;</code> rather than <code>Map&lt;String, Integer&gt;</code> - well, <code>Long</code> can hold bigger numbers. But since it's irrelevant for this problem here's a solution for <code>Map&lt;String, Integer&gt;</code>:</p>

<pre><code>int[] matchingStrings(String[] strings, String[] queries) {
    Map&lt;String, Integer&gt; stringCountMap = Arrays.stream(strings).collect(Collectors.groupingBy(Function.identity(), summingInt(x -&gt; 1)));

    return Arrays.stream(queries).mapToInt(query -&gt; stringCountMap.getOrDefault(query, 0)).toArray();
}
</code></pre>
    </div>