<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><s>The methods look fine to me. Reasonable variable names; no confusing control-flow; sensible enough signatures for what they are doing.</s> (see t2chb0t's answer as to why I am wrong)</p>

<p>The tests could be more comprehensive. They should probably check the length of the list, and since the whole data-structure is exposed, you ought verify that the list isn't otherwise malformed (e.g. <code>head.prev</code> should always be <code>null</code>, especially worth checking in the special case of removing the <code>head</code> from the list).</p>

<p>The 'edge case' you have is because you've got a quick-and-nasty definition of a linked list as just 'the head node' (or <code>null</code>). The effect is that you are exposing a highly mutable data-structure which is easy to misuse. Much <em>much</em> better, would be to hide the <code>Node</code>s away under a <code>LinkedList</code> type, which provides a simple interface (e.g. <code>Add(T)</code>, <code>Remove(T)</code>, <code>GetEnumerator()</code>) without exposing any implementation details.</p>

<pre class="lang-cs prettyprint-override"><code>public class LinkedList
{
    private Node Head; // keep track of the head

    public LinkedList()
    { // start empty...
        Head = null;
    }

    Remove(int value)
    {
        RemoveRefElement(ref Head, value);
    }

    // some more public methods and helper methods...
}
</code></pre>

<p>Having such an interface solves your 'edge case' interface problem, because the edge case is now an implementation detail, and instead you have a nice interface. I'd argue that your <code>Ref</code> version is better, because it is modifying the data-structure passed to it, which the <code>return</code> version doesn't make entirely clear. Having a <code>LinkedList</code> class with a nice <code>Remove</code> member that returns nothing serves the same purpose, and allows you to pass the <code>LinkedList</code> around (you can't pass the <code>Head</code> node around as a mutable list, because if it is removed from the list, then everyone except the caller suddenly has a list with exactly one element in it). Having a well-defined interface also makes writing tests easier, because you don't have to think about whether the data-structure is 'correct' or not, just whether it does the job.</p>

<p>As an implementation detail, I'd maintain that the <code>Ref</code> version would be better, but once something is private it matters less what it looks like.</p>

<p>Petty stuff:</p>

<ul>
<li><p>Inline documentation (<code>///</code>) is always appreciated</p></li>
<li><p>The <code>break</code> is redundant in <code>RemoveElement</code>, and I'd personally make the <code>break</code> in <code>RemoveRefElement</code> a <code>return</code> (just makes it clearer that the method has ended)</p></li>
<li><p>Personally I'd appreciate more empty lines. The back-to-back <code>if</code>s, for example, would be easier for me to scan if they were separated, since they are separate pieces of logic.</p></li>
<li><p>A generic implementation would always be nice, and gives you a chance to demonstrate awareness of how to do comparisons effectively.</p></li>
</ul>
    </div>