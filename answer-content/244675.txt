<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There is not much to add to Slicers answer other than underscore in names is rather un-C#-ish, and you should avoid single character names (<code>s</code>) as well.</p>
<p>You ask for more efficient ways for the algorithm. One could be the following:</p>
<pre><code>public (char value, int count) MaxByFrequency(string input)
{
  var chars = input.ToCharArray();
  Array.Sort(chars);
  char value = ' ';
  int max = 0;

  for (int i = 0; i &lt; chars.Length; )
  {
    int j = i;
    char ch = chars[j];
    while (j &lt; chars.Length &amp;&amp; chars[j] == ch) j++;

    if (j - i &gt; max)
    {
      max = j - i;
      value = ch;
    }

    i = j;
  }

  return (value, max);
}
</code></pre>
<p>It is efficient time wise (in my measures more than twice as fast) but of cause is rather "expensive" in memory usage because of the temporary array of chars.</p>
<hr>
<p>Another linq approach using <code>Aggregate</code> could be:</p>
<pre><code>public (char value, int count) MaxByFrequency(string input)
{
  (char value, int count) seed = (' ', 0);
  return input
    .GroupBy(c =&gt; c)
    .Aggregate(seed, (acc, gr) =&gt;
    {
      int cnt = gr.Count();
      if (cnt &gt; acc.count)
        return (gr.Key, cnt);
      return acc;
    });
}
</code></pre>
    </div>