<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The main idea is to cover the entire space occupied by points with a rectangular regular grid.</p>

<ul>
<li><p>Each grid cell contains a small subset of points which are located within the cell.</p></li>
<li><p>Since the grid is regular, for a given point we can easily calculate its cell index <code>(I, J)</code>.</p></li>
<li><p>Next we search for the nearest point in the range <code>I-1 &lt;= i &lt;= I+1, J-1 &lt;= j &lt;= J+1</code>.</p></li>
<li><p>If no points found, iterate for all indexes in the range <code>I-n &lt;= i &lt;= I+n, J-n &lt;= j &lt;= J+n</code> for <code>n = 2, 3, ...</code>, except indexes from the previous steps.</p></li>
</ul>

<p>Side notes:</p>

<ul>
<li><p>There is no need to use the <code>Math.Pow</code> method, consider to use <code>Pow2</code> method instead:</p>

<pre><code>private static double Pow2(double x)
{
    return x * x;
}
</code></pre></li>
<li><p>There is no need to calculate distance, consider to use square of distance:</p>

<pre><code>private static double Distance2(Point p1, Point p2)
{
    return Pow2(p2.X - p1.X) + Pow2(p2.Y - p1.Y);
}
</code></pre></li>
<li><p>There is no need to remove points from the source list, you could iterate</p>

<pre><code>while (orderedList.Count != pointList.Count)
</code></pre></li>
</ul>

<p>Here is the complete code:</p>

<pre><code>[DebuggerDisplay("X={X}, Y={Y}")]
internal sealed class Point
{
    public readonly double X;
    public readonly double Y;

    public Point(double x, double y)
    {
        X = x;
        Y = y;
    }
}

internal static class PointsSorter
{
    public static List&lt;Point&gt; GeneratePoints(int count)
    {
        Random rnd = new Random();
        List&lt;Point&gt; tmp = new List&lt;Point&gt;(count);
        for (int i = 0; i &lt; count; i++)
        {
            tmp.Add(new Point(rnd.NextDouble() * 100000 - 50000, rnd.NextDouble() * 100000 - 50000));
        }
        return tmp;
    }

    private static double Pow2(double x)
    {
        return x * x;
    }

    private static double Distance2(Point p1, Point p2)
    {
        return Pow2(p2.X - p1.X) + Pow2(p2.Y - p1.Y);
    }

    private static Tuple&lt;Point, double&gt; GetNearestPoint(Point toPoint, LinkedList&lt;Point&gt; points)
    {
        Point nearestPoint = null;
        double minDist2 = double.MaxValue;
        foreach (Point p in points)
        {
            double dist2 = Distance2(p, toPoint);
            if (dist2 &lt; minDist2)
            {
                minDist2 = dist2;
                nearestPoint = p;
            }
        }
        return new Tuple&lt;Point, double&gt;(nearestPoint, minDist2);
    }

    public static List&lt;Point&gt; OrderByDistance(List&lt;Point&gt; points, int gridNx, int gridNy)
    {
        if (points.Count == 0)
            return points;

        double minX = points[0].X;
        double maxX = minX;
        double minY = points[0].Y;
        double maxY = minY;

        // Find the entire space occupied by the points
        foreach (Point p in points)
        {
            double x = p.X;
            double y = p.Y;

            if (x &lt; minX)
                minX = x;
            else if (x &gt; maxX)
                maxX = x;

            if (y &lt; minY)
                minY = y;
            else if (y &gt; maxY)
                maxY = y;
        }

        // The trick to avoid out of range
        maxX += 0.0001;
        maxY += 0.0001;

        double minCellSize2 = Pow2(Math.Min((maxX - minX) / gridNx, (maxY - minY) / gridNy));

        // Create cells subsets
        LinkedList&lt;Point&gt;[,] cells = new LinkedList&lt;Point&gt;[gridNx, gridNy];

        for (int j = 0; j &lt; gridNy; j++)
            for (int i = 0; i &lt; gridNx; i++)
                cells[i, j] = new LinkedList&lt;Point&gt;();

        Func&lt;Point, Tuple&lt;int, int&gt;&gt; getPointIndices = p =&gt;
        {
            int i = (int)((p.X - minX) / (maxX - minX) * gridNx);
            int j = (int)((p.Y - minY) / (maxY - minY) * gridNy);
            return new Tuple&lt;int, int&gt;(i, j);
        };

        foreach (Point p in points)
        {
            var indices = getPointIndices(p);
            cells[indices.Item1, indices.Item2].AddLast(p);
        }

        List&lt;Point&gt; ordered = new List&lt;Point&gt;(points.Count);

        Point nextPoint = points[0];
        while (ordered.Count != points.Count)
        {
            Point p = nextPoint;
            var indices = getPointIndices(p);
            int pi = indices.Item1;
            int pj = indices.Item2;

            ordered.Add(p);
            cells[pi, pj].Remove(p);

            int radius = 1;
            int maxRadius = Math.Max(Math.Max(pi, cells.GetLength(0) - pi), Math.Max(pj, cells.GetLength(1) - pj));

            double[] minDist2 = { double.MaxValue };    // To avoid access to modified closure
            Point nearestPoint = null;

            while ((nearestPoint == null || minDist2[0] &gt; minCellSize2 * (radius - 1)) &amp;&amp; radius &lt; maxRadius)
            {
                int minI = Math.Max(pi - radius, 0);
                int minJ = Math.Max(pj - radius, 0);
                int maxI = Math.Min(pi + radius, cells.GetLength(0) - 1);
                int maxJ = Math.Min(pj + radius, cells.GetLength(1) - 1);

                // Find the nearest point in the (i, j)-subset action
                Action&lt;int, int&gt; findAction = (i, j) =&gt;
                {
                    if (cells[i, j].Count != 0)
                    {
                        var areaNearestPoint = GetNearestPoint(p, cells[i, j]);
                        if (areaNearestPoint.Item2 &lt; minDist2[0])
                        {
                            minDist2[0] = areaNearestPoint.Item2;
                            nearestPoint = areaNearestPoint.Item1;
                        }
                    }
                };

                if (radius == 1)
                {
                    // Iterate through all indexes in the 3x3
                    for (int j = minJ; j &lt;= maxJ; j++)
                    {
                        for (int i = minI; i &lt;= maxI; i++)
                        {
                            findAction(i, j);
                        }
                    }
                }
                else
                {
                    // Iterate through border only
                    for (int i = minI; i &lt; maxI; i++)
                    {
                        findAction(i, minJ);
                    }
                    for (int j = minJ; j &lt; maxJ; j++)
                    {
                        findAction(maxI, j);
                    }
                    for (int i = minI + 1; i &lt;= maxI; i++)
                    {
                        findAction(i, maxJ);
                    }
                    for (int j = minJ + 1; j &lt;= maxJ; j++)
                    {
                        findAction(minI, j);
                    }
                }

                radius++;
            }
            nextPoint = nearestPoint;
        }
        return ordered;
    }
}
</code></pre>

<p>Usage:</p>

<pre><code>var sortedPoints = PointsSorter.OrderByDistance(PointsSorter.GeneratePoints(500000),
                   500, 500);
</code></pre>

<p>Execution time on my PC (in Debug): <strong>~15 seconds</strong>.</p>
    </div>