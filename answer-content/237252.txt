<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think iterators are amazing. However not everything should be an iterator, or use comprehensions.
Statements like:</p>

<blockquote>
  <p>Obviously I need to replace the loop with proper code.</p>
</blockquote>

<p>Only make me see short-sighted snobbishry. Which I only see in the FP vs OOP part of the programming world. Iterators and comprehensions can't and shouldn't be jammed into everything.</p>

<hr>

<ul>
<li>The function <code>_look_and_say</code> looks pretty good.</li>
<li>Rather than assigning <code>i</code> and never using it, it's commonly accepted to use <code>_</code> as a throw away variable.</li>
<li><p>Python has a style guide, which a large amount of users follow. This style guide suggests putting two empty lines around top level functions and classes.</p>

<p>I would recommend you do this too, so that your code looks like everyone elses. Which improves readability for everyone.</p></li>
<li><p>It's best not to have code run in the global scope, just wrap it up in a <code>main</code>.</p></li>
<li>You should wrap your code in a <code>if __name__ == '__main__':</code>, making your code only run if you run the file. As opposed to importing it.</li>
</ul>

<p>Which results in the following <em>proper code</em>:</p>

<pre class="lang-py prettyprint-override"><code>from itertools import groupby, chain 


def _look_and_say(seq: str):
    return ''.join(f"{len(list(g))}{k}" for k, g in groupby(seq))


def main():
    a = '1'
    for _ in range(100):
        a = _look_and_say(a)
    print(a)


if __name__ == '__main__':
    main()
</code></pre>

<hr>

<p>I would prefer <code>_look_and_say</code> to return all look and say numbers, and for main to stop <code>_look_and_say</code> when it has reached the number it wants.</p>

<p>To do this I would move the for loop into <code>_look_and_say</code> as a <code>while True:</code> loop. Change it so you <code>yield</code> from the function. And then finally use <code>itertools.islice()</code> to extract the desired number, with the <code>nth</code> recipe.</p>

<pre class="lang-py prettyprint-override"><code>import itertools


def look_and_say():
    value = '1'
    while True:
        yield value
        value = ''.join(f"{len(list(g))}{k}" for k, g in itertools.groupby(value))


def nth(iterator, n, default=None):
    return next(itertools.islice(iterator, n , None), default)


def main():
    print(nth(look_and_say(), 100 - 1))


if __name__ == '__main__':
    main()
</code></pre>
    </div>