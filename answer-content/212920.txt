<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your <code>Collector</code> is reinventing the wheel.  There already exists a collector which partitions the collected items into groups: <a href="https://docs.oracle.com/javase/10/docs/api/java/util/stream/Collectors.html#groupingBy(java.util.function.Function)" rel="nofollow noreferrer"><code>Collectors.groupingBy</code></a>, which you could use something like:</p>

<pre><code>.collect(
    Collectors.groupingBy(
        item -&gt; (item.category == CAT_3 || item.category == CAT_4) &amp;&amp; !isValid(item.id)
                     ? CAT_5 : item.category)
    )
)
</code></pre>

<p>Of course, this will return a <code>Map&lt;ItemCategory, List&lt;Item&gt;&gt;</code>.  You can transform this back to a list of lists, if needed. </p>

<p>And of course, you would need to add the <code>CAT_5</code> to the <code>ItemCategory</code> enum.  Alternately, you could use <code>null</code> at the category 5 key, if you don't mind <code>null</code> as a key value, but be warned that it will make some people's skin crawl.</p>

<hr>

<p>If the order of the items in the all of the groups (as opposed to just the Category 5 group) does not matter, then <a href="https://docs.oracle.com/javase/10/docs/api/java/util/stream/Collectors.html#groupingByConcurrent(java.util.function.Function)" rel="nofollow noreferrer"><code>groupingByConcurrent</code></a> will give better parallel stream performance.</p>
    </div>