<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>tl;dr</h1>
<p>The code can be re-written to first count the number of occurrences of each number, then return an array filtering out any number that occurs more than 3 times.</p>
<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="true">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>// Remove duplicates that occur 3 or more times in an array
// keeping unique values and those with less than 3
function removeMany(arr) {
  const countMappings = arr.reduce(function(carry, item) {
    carry[item] = (carry[item] || 0) + 1;
    return carry;
  }, {});
  return arr.filter(item =&gt; countMappings[item] &lt; 3);
}

// Ex. 1
const numbers = [1, 2, 3, 2, 4, 4, 5, 5, 5, 5];
console.log(removeMany(numbers));</code></pre>
</div>
</div>

<h1>Suggestions</h1>
<blockquote>
<p>I was looking for any feedback / suggestions on how to make it more concise and efficient (the for loop inside the forEach method is especially repulsive).</p>
</blockquote>
<p>The original code already uses functional techniques - i.e. <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach" rel="nofollow noreferrer">array.forEach()</a>- for one loop. Perhaps you are already familiar with functional techniques like that and others but if not, I recommend going through <a href="http://reactivex.io/learnrx/" rel="nofollow noreferrer">these exercises</a>.</p>
<p>That inner <em>for</em> loop can be re-written using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach" rel="nofollow noreferrer">array.forEach()</a>:</p>
<pre><code>arr.forEach(function(element, i) { //for (var i = 0; i &lt; arr.length; i++) {
    if (element === value) {
        result.push(element);
    }
});
</code></pre>
<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="true">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>// Remove duplicates that occur 3 or more times in an array
// keeping unique values and those with less than 3
function removeMany(arr) {
  const newArr = Array.from(arr).sort()
  let count = 0;
  let result = []

  newArr.forEach((value, index, ar) =&gt; {
    count += 1;
    // refactored afterwards from (ar[index + 1] !== value)
    if (ar.lastIndexOf(value) &lt;= index &amp;&amp; count &lt;= 2) {
      arr.forEach(function(element, i) { //for (var i = 0; i &lt; arr.length; i++) {
        if (element === value) {
          result.push(element);
        }
      });
      count = 0
    } else if (ar[index + 1] !== value) {
      count = 0;
    }
  });

  // +1 is there anyway to return a result that mimicks the original order of `numbers`?
  return result;  // [1, 2, 2, 3, 4, 4]
}

// Ex. 1
const numbers = [1, 2, 3, 2, 4, 4, 5, 5, 5, 5];
console.log(removeMany(numbers));</code></pre>
</div>
</div>

<p>For that commented line:</p>
<blockquote>
<p>// +1 is there anyway to return a result that mimicks the original order of <code>numbers</code>?</p>
</blockquote>
<p>One approach to handle that would be to iterate over the elements using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce?v=a" rel="nofollow noreferrer">array.reduce()</a> (so we can conditionally add values to the output array), counting the occurrences of each element, then in a second iteration, only return elements where there are 2 or less occurrences of that element.</p>
<p>One main advantage here compared to the original is that there is not a nested iteration... the complexity is <span class="math-container">\$O(n)\$</span> instead of <span class="math-container">\$O(n^2)\$</span>.</p>
<p>See the example below. I wanted to compare with <a href="http://jsperf.com" rel="nofollow noreferrer">jsPerf</a> but that appears to be down. I did find a similar system: <a href="https://www.measurethat.net" rel="nofollow noreferrer">measurethat.net</a> - see <a href="https://www.measurethat.net/Benchmarks/ShowResult/6291" rel="nofollow noreferrer">the comparison here</a>.</p>
<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="true">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>// Remove duplicates that occur 3 or more times in an array
// keeping unique values and those with less than 3
function removeMany(arr) {
  const countMappings = arr.reduce(function(carry, item) {
      if (carry[item]!== undefined) {
        carry[item]++;
      }
      else {
        carry[item] = 1;
      }
      return carry;
  }, {});
  return arr.reduce(function(final, item) {
    if (countMappings[item] &lt;3) {
      final.push(item);
    }
    return final;
  }, []);
}

// Ex. 1
const numbers = [1, 2, 3, 2, 4, 4, 5, 5, 5, 5];
console.log(removeMany(numbers));</code></pre>
</div>
</div>

<h3>Edit</h3>
<p>Bravo to Gerrit0 for using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter" rel="nofollow noreferrer">Array.filter()</a> and having very concise code! <a href="https://www.measurethat.net/Benchmarks/ShowResult/6295" rel="nofollow noreferrer">The performance results appear to be similar</a>.</p>
<p>Utilizing <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter" rel="nofollow noreferrer"><em>filter()</em></a> instead of <em>reduce</em> for the second iteration can eliminate a few lines:</p>
<pre><code>return arr.reduce(function(final, item) {
    if (countMappings[item] &lt;3) {
      final.push(item);
    }
    return final;
  }, []);
</code></pre>
<p>becomes:</p>
<pre><code>return arr.filter(function(item) {
    return countMappings[item] &lt; 3;
 });
</code></pre>
<p>Or if you want to use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions" rel="nofollow noreferrer">ES-6 arrow functions</a>:</p>
<pre><code>return arr.filter(item =&gt; countMappings[item] &lt; 3);
</code></pre>
<p>Additionally, the first iteration, to count the occurrences of each element, could be simplified using a ternary operator:</p>
<pre><code>const countMappings = arr.reduce(function(carry, item) {
    if (carry[item]!== undefined) {
        carry[item]++;
    }
    else {
        carry[item] = 1;
    }
    return carry;
}, {});
</code></pre>
<p>becomes:</p>
<pre><code>const countMappings = arr.reduce(function(carry, item) {
    carry[item] = carry[item]? carry[item] + 1: 1;
    return carry;
}, {});
</code></pre>
<p>Or as was suggested in comments, use <em>logical OR</em>:</p>
<pre><code>carry[item] = (carry[item] || 0) + 1;
</code></pre>
<p>to implicitly check if <code>carry[item]</code> has a value - if not, use <code>0</code> before incrementing the count for the value of the given element.</p>
<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="true">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>// Remove duplicates that occur 3 or more times in an array
// keeping unique values and those with less than 3
function removeMany(arr) {
  const countMappings = arr.reduce(function(carry, item) {
    carry[item] = (carry[item] || 0) + 1;
    return carry;
  }, {});
  return arr.filter(item =&gt; countMappings[item] &lt; 3);
}

// Ex. 1
const numbers = [1, 2, 3, 2, 4, 4, 5, 5, 5, 5];
console.log(removeMany(numbers));</code></pre>
</div>
</div>

    </div>