<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I wouldn't follow this approach at all, trying to create a dynamic SQL by hand using StringBuilder or StringBuffer.</p>

<p>It is inevitable that the complexity will shoot off the roof. And it is very rare to find a need for building SQL statements dynamically like that. </p>

<p>In 30 years, I haven't seen a justification. Every application I've known has a finite set of access patterns, ergo a finite set of SQL statements it needs. </p>

<p>Instead, I would suggest you use parameterized SQL statements (see example below from <a href="http://tutorials.jenkov.com/jdbc/preparedstatement.html" rel="noreferrer">this tutorial</a>)</p>

<pre><code>String sql = "update people set firstname=? , lastname=? where id=?";

PreparedStatement preparedStatement =
        connection.prepareStatement(sql);

preparedStatement.setString(1, "Gary"); 
preparedStatement.setString(2, "Larson"); 
preparedStatement.setLong  (3, 123);

int rowsAffected = preparedStatement.executeUpdate();
</code></pre>

<p>Better yet, load that string from a resource bundle or property.</p>

<p>Other possibilities include using a DSL like <a href="http://www.jooq.org/" rel="noreferrer">jOOQ</a> (example below, from the jOOQ's site):</p>

<pre><code>create.select(AUTHOR.FIRST_NAME, AUTHOR.LAST_NAME, count())
      .from(AUTHOR)
      .join(BOOK).on(AUTHOR.ID.equal(BOOK.AUTHOR_ID))
      .where(BOOK.LANGUAGE.eq("DE"))
      .and(BOOK.PUBLISHED.gt(date("2008-01-01")))
      .groupBy(AUTHOR.FIRST_NAME, AUTHOR.LAST_NAME)
      .having(count().gtÂçå)
      .orderBy(AUTHOR.LAST_NAME.asc().nullsFirst())
      .limit(2)
      .offset(1)
</code></pre>

<p>Or <a href="http://blog.mysema.com/2011/01/querying-in-sql-with-querydsl.html" rel="noreferrer">QueryDSL</a> (example below):</p>

<pre><code>QCustomer customer = new QCustomer("c"); // alias for the CUSTOMER table

SQLTemplates dialect = new HSQLDBTemplates(); // SQL-dialect
SQLQuery query = new SQLQueryImpl(connection, dialect); 
List&lt;String&gt; lastNames = query.from(customer)
    .where(customer.firstName.eq("Bob"))
    .list(customer.lastName);
</code></pre>

<p>Or, if you are using JPA, to use the JPA's <a href="https://www.baeldung.com/jpa-criteria-api-in-expressions" rel="noreferrer">Criteria API</a> (example below):</p>

<pre><code>Subquery&lt;Department&gt; subquery = criteriaQuery.subquery(Department.class);
Root&lt;Department&gt; dept = subquery.from(Department.class);
subquery.select(dept)
  .distinct(true)
  .where(criteriaBuilder.like(dept.get("name"), "%" + searchKey + "%"));

criteriaQuery.select(emp)
  .where(criteriaBuilder.in(emp.get("department")).value(subquery));
</code></pre>

<p>Good luck.</p>
    </div>