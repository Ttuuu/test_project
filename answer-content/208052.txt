<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Fast review:</h2>
<h3>Be sure about what you post</h3>
<p>Actually your code isn't a linked list, but a stack implemented in term of simply linked list, which the underlying data is publicly accessible. A linked list (even simply linked) have <a href="https://en.cppreference.com/w/cpp/container/forward_list" rel="nofollow noreferrer">a lot of things</a> that your implementation is lacking.</p>
<hr>
<p><em><strong>Sidenote</strong>: Please, you post a lot of code but before posting ask yourself if your code is really ready to be reviewed. "What's the purpose of my code?</em>
<em>How usable it is? Did it lack something or isn't fully implemented?"</em>
<em>Proposing codes to be reviewed isn't just throw as much code as possible in lesser time.</em></p>
<hr>
<h3>Your code have a lot of <a href="https://stackoverflow.com/questions/6261201/how-to-find-memory-leak-in-a-c-code-project">memory leaks</a>.</h3>
<p>Even if the memory will be cleaned up <a href="https://stackoverflow.com/questions/677812/is-there-a-reason-to-call-delete-in-c-when-a-program-is-exiting-anyway">by the program termination</a>, it's a good habit to <code>delete</code> resource that you allocated once you don't need it anymore. Because, yes, the OS <em>normally</em> will clean not released memory, but then, it don't call destructor.</p>
<p><a href="https://www.internalpointers.com/post/beginner-s-look-smart-pointers-modern-c" rel="nofollow noreferrer">Consider using smart pointer</a> they are <a href="https://www.fluentcpp.com/2017/08/22/smart-developers-use-smart-pointers-smart-pointers-basics/" rel="nofollow noreferrer">better, safer, stronger</a> (Â© DP).</p>
<hr>
<h3>Misc</h3>
<ul>
<li>Prefer the C++ <code>std::size_t</code> to the C <code>size_t</code> (<a href="https://stackoverflow.com/questions/5813700/difference-between-size-t-and-stdsize-t">here's the difference</a>)</li>
<li>The member variable <code>value</code> have to be initialized after field <code>next</code>, because you declare it last. (<a href="https://stackoverflow.com/questions/1828037/whats-the-point-of-g-wreorder">more info</a>)</li>
<li>Use <code>nullptr</code> instead of <code>NULL</code> or <code>0</code>. To know why, read <a href="https://stackoverflow.com/questions/20509734/null-vs-nullptr-why-was-it-replaced">this</a> (and follow inside's links)</li>
<li>Don't be redundant in your conditions: As explained in the <a href="http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines.html#es87-dont-add-redundant--or--to-conditions" rel="nofollow noreferrer">Core Guideline</a>, comparing a pointer to nullptr in a condition, not only is useless, but it's also much more verbose.</li>
<li>Returning <code>NULL</code> in case of empty list when you call <code>pop</code> is a poor design and should be avoided. You have many better option here: returning a <a href="https://en.cppreference.com/w/cpp/utility/optional" rel="nofollow noreferrer">std::optional</a>, using <a href="https://isocpp.org/wiki/faq/exceptions" rel="nofollow noreferrer">exceptions</a> ans <a href="https://hackernoon.com/error-handling-in-c-or-why-you-should-use-eithers-in-favor-of-exceptions-and-error-codes-f0640912eb45" rel="nofollow noreferrer">many other ways</a>.</li>
<li>Be consistent: at one place, you use <strong>pre</strong>-crementation, at other you use <strong>post</strong>-decrementation. There's a <a href="https://stackoverflow.com/questions/tagged/c%2b%2b%20pre-increment%20post-increment">huge list of SO posts</a> talking about post that.</li>
<li>Take care that <a href="https://stackoverflow.com/questions/6833143/how-to-check-memory-allocation-failures-with-new-operator">memory allocation can fail</a>.</li>
</ul>
    </div>