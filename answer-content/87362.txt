<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Look at the problem and think about the algorithm first (do not get distracted by limitations like 1D array instead of 2D).</p>

<p>For example:</p>

<blockquote>
  <p>Fill each column with consecutive positive integers, starting from the last column. Additionally each consecutive column should contain one less row filled than previous (starting from the first row).</p>
</blockquote>

<p>Then using @AlanT suggestion of how to convert 2D indexing into 1D one:</p>

<pre><code>public int[] squareUp(int n) {
    int[] result = new int[n*n]; 
    int numberToInsert = 1;
    for(int column = n-1; column &gt;= 0; column--){
        for(int row = n-1; row &gt;= n-1-column; row--){
            result[(row * n) + column] = numberToInsert;
        }
        numberToInsert++;
    }
    return result;
}
</code></pre>

<p>Explanation:</p>

<blockquote>
  <p>Outer loop iterates columns, starting from the last one. Inner loop iterates rows, also starting from the last one, then uses column count to find stopping condition.</p>
</blockquote>

<p>It also handles 0 and 1 array sizes. We also do not need to set 0 values as single-dimensional arrays of primitive values in Java will be set to default values on initialization.</p>
    </div>