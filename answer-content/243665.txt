<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Say you are at a number <em>abcdef</em>. If b==1 and d==3 you can skip from <em>abcd00</em> to <em>abc(d+1)00</em>. That is the gist of optimizing the algorithm.</p>
<p>Needing the individual digits and intelligently stepping to the next digits seems a better approach. (Now decomposing <em>every</em> number in digits.)</p>
<p>Use an array of digits, and compose the lucky numbers.</p>
<p>As far as a <strong>review</strong> of the existing code goes, is the review from <strong>@harold</strong> fine.</p>
<hr>
<p><em><strong>Clarification, schematic solution:</strong></em></p>
<p>Your code walks <em>all</em> numbers and for every number looks at its digits:</p>
<pre><code>// Loop for every number i:
for (long i = start; i &lt;= end; i++) {

    // Loop to determine all digits again:
    long number = i;
    while (number &gt; 0) {
        long lastDigit = number % 10; ...
        number /= 10;
    }
</code></pre>
<p>It would be better to have the digits as array or char array/StringBuilder (the inner loop):</p>
<p>If you store the digits with the least significant first 1234 as {4, 3, 2, 1}
then you use for loops with ++.</p>
<pre><code>int[] startDigits = ...
int[] endDigits = ...
assert startDigits.length == endDigits.length;

int[] digits = startDigits();
while (!Arrays.equals(digits, endDigits); stepNext(digits)) {
    int p1 = digits.indexOf(1);
    int p3 = digits.indexOf(3);
    if ((p1 &gt;= 0) != (p3 &gt;= 0) {
        // Lucky
        print number ... a[2] a[1] a[0]
    } else {
        int p = Math.min(p1, p3);
        for (int i = 0; i &lt; p; ++i) {
            a[i] = 9;
        }
    }
    // increment digits from a[0] .. a[n-1]
    for (int i = 0; i &lt; n; ++i) {
        boolean carry = a[i] == 9;
        if (carry) {
            a[i] = 0;
        } else {
            ++a[i];
            break;
        }
    }
}
</code></pre>
<p>The above shows one shortcut for having an unlucky number with first position of 1 or 3 at p. There are other possibilities too.</p>
<hr>
<p><em><strong>An abstract solution of the problem:</strong></em></p>
<p>A lucky number looks a bit like <code>abc...X...def</code> where X is 1 or 3, and a, b, c, d, e, f are not Y (3 or 1) - but may be X.</p>
<p>How many different combinations are there? And then from start to end?</p>
<p>For N digits with n Xs you need the number of possible combinations (math) (times 2 for X in  {1, 3}) and the other digits can each have 8 values (not 1 or 3). In fact this subproblem is like counting the number of 1s/0s in a binary number of N bits: 10000, 11000, 10100, ... - There are 2^N - 1 different combinations with at one 1. 00000 being the exception. If 1 represents X,
the number with 3 0s would be N over 3 which would add 2<em>8^(N over 3) = (1 or 3)</em>(8 candidates for the N-3 0s).</p>
<p>Start and end restrictions are the difficult part. Simplify by excluding the common prefix. And then you need to walk the actual patterns 1101001 and check which digits are allowed there.</p>
<p>To exclude 000 == without 1, and get all bit patterns:</p>
<pre><code>long luckyNumbers = 0;
assert N &lt; 64;
for (long bitPattern = 1; bitPattern &lt; (1L &lt;&lt; N); ++bitPattern) {
     // Check the possible number of digits for every bit.
     ...
</code></pre>
<p>This reduces the problem merely from N digits to N bits, but you have only lucky numbers and need not create all 10^N numbers.</p>
    </div>