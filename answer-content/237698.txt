<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Data Design</h2>

<p>your major flaw is your poor data design. As described in the question you have </p>

<ol>
<li><strong>find out when one word is a predecessor of another</strong></li>
<li><strong>A word chain is a sequence of words, where one word is a predecessor of another</strong></li>
</ol>

<h2>1. find out when one word is a predecessor of another</h2>

<p>this describes an algorithm on how to find out if one word is a predecessor of another. you should provide <strong>at least one method</strong> that does only this and only this:</p>

<pre><code>private final String word;

public boolean isPredecessor(String predecessor) {
    if (predecessor == null) {
        return false;
    }
    if (predecessor.length() != word.length() + 1) {
        return false;
    }
    if(predecessor.length() == 1){
        return true;
    }
    boolean breakReached = false;
    int breakIndex = 0;
    for (int index = 0; index &lt; word.length(); index++) {
        if (word.charAt(index) != predecessor.charAt(index)) {
            breakReached = true;
            breakIndex = index;
            break;
        }
    }
    for (int index = breakIndex; index &lt; word.length(); index++) {
        if (breakReached &amp;&amp; word.charAt(index) != predecessor.charAt(index+1)) {
            return false;
        }
    }
    return true;
}
</code></pre>

<p>compare letter by letter and if you come to <strong>one breaking difference</strong> you continue with index+1 - if all other match, then we have a predecessor. You iterate only once over the whole word.</p>

<p><a href="https://i.stack.imgur.com/7Avj7.jpg" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/7Avj7.jpg" alt="enter image description here"></a></p>

<h2>2. A word chain is a sequence of words, where one word is a predecessor of another</h2>

<p>that leads to the following data structure where you can store a word and its predecessors. Such a data structure makes the code very clearly to read later.</p>

<pre><code>public class Predecessor {

    private final String word;
    private final List&lt;Predecessor&gt; predecessors = new ArrayList&lt;&gt;();

    public Predecessor(String word){
        this.word = word;
    }

    public void addPredecessor(Predecessor predecessor){
        predecessors.add(predecessor);
    }


    public List&lt;Predecessor&gt; getPathToRoot(){
        List&lt;Predecessor&gt; path = new ArrayList&lt;&gt;();
        if(!predecessors.isEmpty()){
            path.add(this);
            path.addAll(predecessors.get(0).getPathToRoot());
        }
        return path;
    }

    public boolean isPredecessor(String predecessor) {...}

    @Override
    public String toString(){
        if (!predecessors.isEmpty()){
            return "['"+word + "'-&gt;'"+predecessors.get(0).word+"']";
        }
        return "['"+word + "']";
    }

}
</code></pre>

<h2>applied output</h2>

<p>the algorithm with these applied methods and data structure would be fairly clear:</p>

<pre><code>public int longestStrChain(String[] words) {

    //create predecessor list 
    List&lt;Predecessor&gt; predecessors = new ArrayList&lt;&gt;();
    for(String word: words){
        Predecessor newOne = new Predecessor(word);
        predecessors.add(newOne);
        for(Predecessor predecessor: predecessors){
            if(predecessor.isPredecessor(word)){
                predecessor.addPredecessor(newOne);
                predecessors.add(newOne);
                break;
            }
        }
    }

    //find out the longest one
    List&lt;Predecessor&gt; candidate = null;
    int depth = 0;
    for(Predecessor predecessor: predecessors){
        List&lt;Predecessor&gt; path = predecessor.getPathToRoot();
        if (path.size() &gt; depth){
            depth = path.size();
            candidate = path;
        }
    }

    System.out.println(candidate);
    return candidate.size();
}
</code></pre>

<h2>notes</h2>

<p>since the data structure provide information <em>from a --&gt; to b</em> it's result is -1 to the original size </p>

<blockquote>
  <p>[a --&gt; ba] , [ba --&gt; bca] , [bca --&gt; bdca]</p>
</blockquote>

<h2>notes</h2>

<p>since we don't care which predecessor we choose (<code>predecessors.get(0)</code>) it's a bit unpredictable which word chain we get. - but we're guaranteed to find one longest!</p>
    </div>