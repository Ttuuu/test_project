<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As the comment threads make clear, the mystery about <code>global</code> goes away when you recognize the difference between <em>accessing</em> a variable from an outer scope (like your did with <code>__registers___</code> and <em>assigning</em> to a variable whose name happens to also exist in an outer scope (what happened with <code>__max__</code>)</p>

<p>You can simplify a good bit of this by exploiting exactly this behavior.  If you store your registers in a module-level dictionary, you can access that dictionary in any part of the code without having to pass it around. Since you don't <em>assign</em> the dictionary -- you just access it -- you don't need to declare it global.  So in you case you could eliminate the <code>find()</code> function because you'd just grab a register value out of the dictionary.</p>

<pre><code> REGISTERS = {'a': 0, 'b': 1}

 def increment(reg, val):
     REGISTERS[reg] += val
</code></pre>

<p>would be an example.  In this case we can be a bit lazy and use a <a href="https://www.datacamp.com/community/tutorials/python-dictionary-comprehension" rel="nofollow noreferrer">dictionary comprehension</a> -- a shorthand way to fill out a dictionary with keys from 'a' to 'z' and values of all zeros:</p>

<pre><code>import string  # the string module has a builtin for the ascii alphabet
REGISTERS = {char: 0 for char in string.ascii_lowercase}
</code></pre>

<p>So you don't need a register class -- you just manipulate the values in the dictionary for each register.</p>

<p>To do the instruction parsing, you can simplify things a good bit by eliminating the regex and simply using Python's builtin string <code>split()</code> function, which will take a string like  'b inc 5 if a &gt; 1' and turn it into ['b', 'inc', '5', 'if', 'a', '&gt;', '1'] without any extra work (this would not be appropriate if any of your directives had spaces in them -- but they don't seem to in this example).  That gives you 7 tokens -- your comment here was very useful -- 3 describing the tests you want to apply and three describing the operation to perform in the test passes (#3, the <code>if</code>, is basically ignorable).</p>

<p>With everything already parsed out, you really don't need to use classes.  The <code>Instruction</code> class does only two things: it applies the test in the last three tokens, and if that test is true it uses the instructions in the first three tokens to change the register.  Python has a handy built-in way to do what you're trying to do -- capturing common operations like addition or comparison.  The <a href="https://docs.python.org/3/library/operator.html" rel="nofollow noreferrer">operator</a> module has a bunch of functions which correspond to the basic operations. For example 'inc' corresponds to <code>operator.iadd</code> which is basically a += b expressed as a function.  '&gt;' becomes <code>operator.gt</code>, a function that returns true if the first of its arguments is greater than the second.   </p>

<p>That would get rid of much of the logic in your <code>Instruction</code> class.  Another module level 'global' dictionary is an easy way to map the strings to the operator,  simplifying both the process of parsing -- no conditional checks, just dictionary lookups -- and of running the tests.  So, first a dictionary to do the mapping:</p>

<pre><code># match operator functions to string identifiers
OPERANDS = {
    'inc': operator.iadd,
    'dec': operator.isub,
    '&gt;': operator.gt,
    '&gt;=': operator.ge,
    '&lt;': operator.lt,
    '&lt;=': operator.le,
    '==': operator.eq,
    '!=': operator.ne
}
</code></pre>

<p>and with that in place the functions to use these operators are very simple. If you want to apply some operation to a register, you get the value from the REGISTERS dictionary, the operator from the OPERANDS dictionary, then call the operator with your value:</p>

<pre><code>def apply_value(register, opstring, valstring):
    operator = OPERANDS[opstring]
    value = float(valstring)
    orig = REGISTERS[register]
    REGISTERS[register] = operator(orig, value)
</code></pre>

<p>doing the test ('is this larger than 5' or whatever) is equally simple:</p>

<pre><code>def condition(register, teststring, testval):
    check = OPERANDS[teststring]
    value = float(testval)
    existing = REGISTERS[register]
    return check(existing, value)
</code></pre>

<p>So as you parse a line of instructions, you just run condition function on the last three tokens ("a &gt; 5") and if it's true, run the <code>apply_value</code> function on the first three:</p>

<pre><code>    with open(filename, 'rt') as fileread:
        for directive in fileread:
            tokens = directive.split()  # [3] is always 'if', so ignored
            if condition(tokens[4], tokens[5], tokens[6]):
                apply_value(tokens[0], tokens[1], tokens[2])
</code></pre>

<p>If you run that on all your directives you'll see the register values going up and down.  Python also has an easy built-in way to find the maximum value in a series -- so to get the largest register value it's just </p>

<pre><code>    max_value = max(REGISTERS.values())
</code></pre>

<p>with no need for you to track the max value manually.</p>

<p>Putting it all together it might look like this:</p>

<pre><code>import sys
import operator
import string

# match operator functions to string identifiers
OPERANDS = {
    'inc': operator.iadd,
    'dec': operator.isub,
    '&gt;': operator.gt,
    '&gt;=': operator.ge,
    '&lt;': operator.lt,
    '&lt;=': operator.le,
    '==': operator.eq,
    '!=': operator.ne
}

# REGISTERS is a dictionary with names as keys, initialized to 0's
REGISTERS = {char: 0 for char in string.ascii_lowercase}


def apply_value(register, opstring, valstring):
    operator = OPERANDS[opstring]
    value = float(valstring)
    orig = REGISTERS[register]
    REGISTERS[register] = operator(orig, value)


def check_condition(register, teststring, testval):
    check = OPERANDS[teststring]
    value = float(testval)
    existing = REGISTERS[register]
    return check(existing, value)

if __name__ == '__main__':
    filename = sys.argv[-1]
    with open(filename, 'rt') as fileread:
        for directive in fileread:
            tokens = directive.split()  # [3] is always 'if', so ignored
            if check_condition(tokens[4], tokens[5], tokens[6]):
                apply_value(tokens[0], tokens[1], tokens[2])


    max_value = max(REGISTERS.values())
    for name, value in REGISTERS.items():
        if value == max_value:
            print ("highest register:", name, value)
</code></pre>

<p>As with many problems in Python, the rich offerings in the standard library often let you get away with just simple functions instead of lots of custom classes.</p>
    </div>