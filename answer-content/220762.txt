<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Main script</h2>

<ul>
<li>Consider using the <a href="https://www.npmjs.com/package/commander" rel="nofollow noreferrer"><code>commander</code></a> module. One benefit you get is that it parses arguments for you. Another is that the API that declares the arguments and options  autogenerates <code>--help</code> text for you. This way, you avoid having to write all the argument parsing yourself and you get a self-documenting CLI.</li>
</ul>

<h2>Lookup module</h2>

<ul>
<li><p>Move that <code>require</code> call outside the function. You only need to import <code>aes</code> once, not on every call to the lookup function.</p></li>
<li><p>When inside an <code>async</code> function, you can use <code>await</code> to write async operations in a synchronous-looking fashion. When you use <code>await</code>, you can assign the resolved value of an async operation to a variable in the same way you do it with synchronous operation.</p></li>
<li><p>The code inside the <code>for-of</code> is essentially a filter operation. Consider using <code>array.filter()</code> instead, assuming <code>data</code> is just an array.</p></li>
<li><p>I also recommend breaking out that nested ternary into nested <code>if</code> statements for readability. You could arrange the conditions so that it's cascading rather than nested.</p></li>
<li><p>I recommend returning an empty array instead of <code>false</code> when no matches are found. This way, the consuming code won't have to deal with type checking. </p></li>
</ul>

<h2>Decrypt module</h2>

<ul>
<li><p>The <code>decryptAll</code> function does not appear to rely on any variables in the scope of the exported function. You can move <code>decryptAll</code> out of that function.</p></li>
<li><p>That <code>for-of</code> is essentially a mapping function (transforming one array's values into another array of values). Use <code>array.map()</code> instead.</p></li>
<li><p>Since <code>decryptAll</code> is just mapping select properties into a new object, you can use a combination of destructuring and shorthand properties to simplify it.</p></li>
</ul>

<hr>

<p>Bottom line, your code could look like this:</p>

<h2>Lookup</h2>

<pre><code>const aes = require('../../Code/MiddleWare/Security/index').encryption.AES

module.exports = async function(type, string, users, exact,  encrypted = true) {
  return await users.query('Users').filter(i =&gt; {

    // Technically, the encrypted block is a nested ternary in the
    // false portion of the first ternary. But written this way, 
    // it looks like a flat list.
    return !encrypted ? i[type] === string
      : exact ? aes.decrypt(i[type]) === string
      : aes.decrypt(i[type]).match(string)
  })
}
</code></pre>

<h2>Decrypt</h2>

<pre><code>const decrypt = require('../../Code/MiddleWare/Security/encryption').AES.decrypt

// Destructure arguments, then return an object with shorthand properties.
// Eliminates obj.
const decryptAll = ({ ID, Username, Email, Data, Password }) =&gt; {
  return { ID, Username, Email, Data, Password }
}

module.exports = function(array) {
  // We're expecting an array so the check is no longer needed.

  const retval = array.map(i =&gt; {
    const item = decryptAll(i)
    const itemWithDecryptedData = { ...item, Data: JSON.parse(item.Data) }
    return itemWithDecryptedData
  })

  return retval
}
</code></pre>
    </div>