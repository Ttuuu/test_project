<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Splitting up <code>game()</code></h1>

<blockquote>
  <p>My questions are: is <code>int game()</code> doing too many things that I should split further into smaller functions?</p>
</blockquote>

<p>You can definitely split up <code>game()</code> into more functions. There is no hard rule for when to split up a function. There are some rules of thumb, like if a function is more than one screen big or more than say 30 lines. However, the best way is to find blocks of code that are either very generic and could be reused elsewhere (you already do that with <code>press_enter_to_continue()</code> and <code>clear_screen()</code>), or blocks of code that can stand on their own. For example, most of the code inside the outer <code>while</code>-loop in <code>game()</code> deals with handling a single game of hangman. You could move it to its own function, so the <code>while</code>-loop is reduced to:</p>

<pre><code>while (another_game == 'y')
{
    do_one_game();

    std::cout &lt;&lt; "Another game? (y/n)\n";
    std::cin &gt;&gt; another_game;
}
</code></pre>

<p>This makes the function <code>game()</code> much smaller, and it is now much easier to see from a quick glance that it is repeating games until the user wants to stop.</p>

<p>Another great candidate for getting its own function is the inner-most <code>while</code>-loop. It basically reads characters until you enter a letter that hasn't already been guessed. You could create a function for it like so:</p>

<pre><code>char get_guess(const std::string &amp;guessed_letters)
{
    char letter;

    do {
        std::cin &gt;&gt; letter;
        std::cin.clear();
        std::cin.ignore(std::numeric_limits&lt;std::streamsize&gt;::max(), '\n');
    } while (!isalpha(letter) || is_inside(guessed_letters, letter));

    return letter;
}
</code></pre>

<p>You could also create a function for filling in a guessed letter at the right places in the <code>guessed_word</code> string.</p>

<h1>Avoiding nested loops</h1>

<blockquote>
  <p>And how to avoid those nested while-loops? Or are they ok for what I intend (to make it possible to replay the game without executing it more than once)?</p>
</blockquote>

<p>There is nothing wrong with nesting loops. In many cases, it's the right thing to do. However, as shown above, in your case you can easily reduce one level of nesting by creating a function <code>do_one_game()</code> that contains all the code inside the outer loop,
and another one by creating <code>get_guess()</code>.</p>

<h1>Consider using <code>std::getline()</code> to read input</h1>

<p>You are jumping through hoops to read single characters and then ignoring everything until a newline character. It might be simpler to use <code>[std::getline()</code>]<a href="https://en.cppreference.com/w/cpp/string/basic_string/getline" rel="nofollow noreferrer">1</a>; this function reads a whole line into a <code>std::string</code>. For example, you could then write:</p>

<pre><code>std::string guess;
std::getline(std::cin, guess);
letter = guess[0];
</code></pre>

<p>Note that if something happens to the input, <code>std::getline()</code> might return an empty string. It's always good to add some error checking to ensure you got valid input. With <code>std::getline()</code>, you can do it like so:</p>

<pre><code>if (!std::getline(std::cin, guess))
{
   // handle error here
}
</code></pre>

<h1>Use C++17's <code>std::filesystem</code> if possible</h1>

<p>C++17 introduced the <a href="https://en.cppreference.com/w/cpp/filesystem" rel="nofollow noreferrer">filesystem library</a> that makes it easier to perform operations on files and directories. In order to check if a file exists, you can use <a href="https://en.cppreference.com/w/cpp/filesystem/exists" rel="nofollow noreferrer"><code>std::filesystem::exists(file_name)</code></a>.</p>

<p>However, your function <code>fexists()</code> is not necessary at all. It opens a file, and if it succeeds you open it again. That is rather silly. Why not just unconditionally open the file in <code>load_file_to_string()</code>, and do the error checking there? It would look like:</p>

<pre><code>std::ifstream t(file_name);

if (t.good())
{
   // read file here
}
</code></pre>

<p>Also note that checking whether a file exists is no guarantee that you can actually succesfully read the whole file. In general you should check that the state of the <code>std::ifstream</code> is still OK after reading the contents of the file.</p>

<h1>Don't write useless functions</h1>

<p>You wrote <code>is_alpha()</code>, which just calls <code>isalpha(c)</code> and returns its result. You are not using this function at all, and even if you did, you could just have called <code>isalpha()</code> instead. You should remove this function.</p>

<h1>Use exceptions or explicit error codes to return errors from functions</h1>

<p>Your function <code>load_file_to_string()</code> returns the string <code>"1"</code> if it couldn't find the file. However, you could actually create a file <code>wordlist.txt</code> that just contains the text <code>"1"</code>. You would still get the error message in this case, which would not be correct. Avoid situations like this where you can have confusion between valid and invalid return values.</p>

<p>Either use exceptions to return an error, like so:</p>

<pre><code>#include &lt;stdexcept&gt;

std::string load_file_to_string(const std::string &amp;filename)
{
    ...
    if (error)
    {
        throw std::runtime_error("Could not open wordlist file");
    }
}
</code></pre>

<p>Or make sure the function has clearly separated return values for the string and the error status. One option would be to just return a <code>bool</code> to indicate the status, and pass a non-const reference to the string to be filled in with the word list:</p>

<pre><code>bool load_file_to_string(const std::string &amp;filename, std::string &amp;string_from_file)
{
    ...
    if (error)
    {
        return false;
    }
    ...
    return true;
}
</code></pre>

<p>Or use <a href="https://en.cppreference.com/w/cpp/utility/optional" rel="nofollow noreferrer"><code>std::optional</code></a> to combine the information into a single return value:</p>

<pre><code>#include &lt;optional&gt;

std::optional&lt;std::string&gt; load_file_to_string(const std::string &amp;filename)
{
    ...
    if (error)
    {
        return {};
    }
    ...
    return string_from_file;
}
</code></pre>

<p>And this is how you use the latter:</p>

<pre><code>auto dictionary = load_file_to_string("wordlist.txt");

if (!dictionary)
{
    std::cerr &lt;&lt; "Please make sure that wordlist.txt is in the same directory as this program!\n";
    return 1;
}
...
secret_word = random_word_from_string(*dictionary);
</code></pre>

<h1>Use consistent code formatting</h1>

<p>You are not very consistent in formatting your source code; sometimes there are spaces around operators and between <code>if</code> and <code>(</code>, sometimes not. I recommend always adding the spaces; it makes the code easier to read. This is a matter of taste, however it is always good to be at least consistent. You don't have to go over the code yourself and correct every small issue: there are code formatting tools that can do it for you. Perhaps the editor you are using to write the source code can already do it, otherwise there are <a href="https://stackoverflow.com/questions/841075/best-c-code-formatter-beautifier">stand-alone code formatters</a> you can use.</p>
    </div>