<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The problem is not that <code>StringBuilder.deleteCharAt()</code>is O(<em>n</em>) â€” you only ever use it to strip the last character.  Rather, it's your <code>builder.toString()</code> that is problematic. It's an O(<em>n</em>) operation that is invoked in a loop up to <em>n</em> times.</p>

<p>Rather than using a <code>StringBuilder</code>, I recommend manipulating a <code>char[]</code> array directly.  <del>The problem, as you pointed out, is that <code>StringBuilder.deleteCharAt(i)</code> is O(<em>n</em>) because it shifts the rest of the string over.</del>  By doing your own accounting, you can just build the string correctly the first time.</p>

<pre><code>public static String removeDuplicates(String s) {
    if (s.isEmpty()) {
        return s;
    }
    char[] buf = s.toCharArray();
    char lastchar = buf[0];

    // i: index of input char
    // o: index of output char
    int o = 1;
    for (int i = 1; i &lt; buf.length; i++) {
        if (o &gt; 0 &amp;&amp; buf[i] == buf[o - 1]) {
            lastchar = buf[o - 1];
            while (o &gt; 0 &amp;&amp; buf[o - 1] == lastchar) {
                o--;
            }
        } else if (buf[i] == lastchar) {
            // Don't copy to output
        } else {
            buf[o++] = buf[i];
        }
    }
    return new String(buf, 0, o);
}
</code></pre>
    </div>