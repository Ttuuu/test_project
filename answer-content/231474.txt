<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Avoid Using Namespace <code>std</code></h2>
<p>It is possible that <code>#include &lt;bits/stdc++.h&gt;</code> and <code>using namespace std;</code> was provided by the challenge site, in that case it might be better to delete that from the code when you answer the challenge.</p>
<p>If you are coding professionally you probably should get out of the habit of using the <code>using namespace std;</code> statement. The code will more clearly define where <code>cout</code> and other identifiers are coming from (<code>std::cin</code>, <code>std::cout</code>). As you start using namespaces in your code it is better to identify where each function comes from because there may be function name collisions from different namespaces. The identifier<code>cout</code> you may override within your own classes, and you may override the operator <code>&lt;&lt;</code> in your own classes as well. This <a href="https://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice">stack overflow question</a> discusses this in more detail.</p>
<p>As an example of how the <code>using namespace std;</code> can be confusing, while reviewing the code I found the code</p>
<pre><code>    } while (next_permutation(patrol_dists.begin(), patrol_dists.end()));
</code></pre>
<p>since I don't know every std library routine I performed a search for <code>next_permutation</code> in the code. I ended up in the algorithm include header.</p>
<h2>Include Headers</h2>
<p>The code contains <code>#include &lt;string&gt;</code> and is missing <code>#include &lt;algorithm&gt;</code>. The <code>string</code> header is not necessary because string are not used in the program. The only reason the code was compiling on the challenge site is because the <code>#include &lt;bits/stdc++.h&gt;</code> was there. Make sure to include all the headers necessary.</p>
<h2>Magic Numbers</h2>
<p>There is a numeric constant in the <code>solution()</code> function (<code>0x3f3f3f3f</code>), it might be better to create symbolic constants for this to make the code more readable and easier to maintain. These numbers may be used in many places and being able to change them by editing only one line makes maintenance easier. In this particular instance it isn't clear what this value means.</p>
<p>Numeric constants in code are sometimes referred to as <a href="https://en.wikipedia.org/wiki/Magic_number_(programming)" rel="nofollow noreferrer">Magic Numbers</a>, because there is no obvious meaning for them. There is a discussion of this on <a href="https://stackoverflow.com/questions/47882/what-is-a-magic-number-and-why-is-it-bad">stackoverflow</a>.</p>
<h2>Memory Leak</h2>
<p>The function <code>std::vector&lt;int&gt;&amp; create_dist_btw_wp(std::vector&lt;int&gt;&amp; weak_points, int wall_length)</code> allocates a vector, but the vector is never deleted. In a larger program this would lead to a memory leak that could have serious side effects. If returning a reference was done for performance reasons, then at the end of the function <code>solution()</code> the vector should be deleted. If it was done for any other reason perhaps the function should be rewritten as</p>
<pre><code>std::vector&lt;int&gt; create_dist_btw_wp(std::vector&lt;int&gt;&amp; weak_points, int wall_length) {
    std::vector&lt;int&gt; result;
    
    for (size_t i = 1; i &lt; weak_points.size(); ++i)
    {
        result.push_back(weak_points[i] - weak_points[i - 1]);
    }
    result.push_back(weak_points[0] + wall_length - weak_points.back());
    
    return result;
}
</code></pre>
<p>The memory allocated for the <code>result</code> vector in the function will automatically be deleted when the function ends, a copy of <code>result</code> is returned to the <code>solution()</code> function. That copy will be automatically deleted when the function <code>solutions</code> ends.</p>
<h2>Use Code Blocks</h2>
<p>Primarily for maintenance reasons it is a good habit to create code blocks within if statements, else clauses and within loops. Many bugs have been created during maintenance when one or more statements was added to an if statement or a loop. There is an example of this in the code above. It also makes the code a little easier to read. Vertical spacing should also be used to make the code more readable.</p>
<h2>Complexity</h2>
<p>The function <code>solution()</code> is too complex (does too much). Perhaps the contents of the outer <code>for</code> loop of the <code>do while</code> should be a function.</p>
<p>There is also a programming principle called the Single Responsibility Principle that applies here. The <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" rel="nofollow noreferrer">Single Responsibility Principle</a> states:</p>
<blockquote>
<p>that every module, class, or function should have responsibility over a single part of the functionality provided by the software, and that responsibility should be entirely encapsulated by that module, class or function.</p>
</blockquote>
    </div>