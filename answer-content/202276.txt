<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This statement doesn't work:</p>

<blockquote>
  <p><code>orderTemp.Id = Convert.ToInt32(order.Attribute("id").ToString());</code></p>
</blockquote>

<p>It should be</p>

<pre><code>orderTemp.Id = Convert.ToInt32(order.Attribute("id").Value);
</code></pre>

<hr>

<p>The <code>Order.OrderDate</code> should be of type <code>DateTime</code> in order to meet the format of the <code>date</code>-attribute in the xml-file </p>

<blockquote>
  <p><code>date='2000-04-20'</code></p>
</blockquote>

<hr>

<p>If you modify the <code>Order</code> class to:</p>

<pre><code>  public class Order
  {
    public int Id;
    public int CategoryId;
    public DateTime OrderDate;
    public int ProductCount;

    public string GroupId =&gt; $"{OrderDate}{Id}{CategoryId}";

    public override string ToString()
    {
      return $"{Id} -&gt; {CategoryId} -&gt; {OrderDate} -&gt; {ProductCount}";
    }

    public static Order FromXml(XElement xElement, IFormatProvider formatProvider)
    {
      if (xElement == null) throw new ArgumentNullException(nameof(xElement));

      return new Order
      {
        OrderDate = Convert.ToDateTime(xElement.Attribute("date").Value, formatProvider),
        Id = Convert.ToInt32(xElement.Attribute("id").Value),
        CategoryId = Convert.ToInt32(xElement.Attribute("categoryId").Value),
        ProductCount = Convert.ToInt32(xElement.Attribute("productCount").Value)
      };
    }

  }
</code></pre>

<p>Then you can handle the xml-input like:</p>

<pre><code>public IEnumerable&lt;Order&gt; Load(string path, IFormatProvider formatProvider)
{
  var xElements = XElement.Load(path);
  var xOrders = xElements.Elements();

  formatProvider = formatProvider ?? CultureInfo.CurrentCulture;

  var groups = xOrders.Select(xo =&gt; Order.FromXml(xo, formatProvider)).GroupBy(o =&gt; o.GroupId);

  foreach (var group in groups)
  {
    Order order = group.First();
    order.ProductCount = group.Sum(o =&gt; o.ProductCount);
    yield return order;
  }
}
</code></pre>

<hr>

<p>An alternative method to read the xml-file is to use <code>XmlSerializer.Deserialize(...)</code></p>
    </div>