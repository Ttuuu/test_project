<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>On the whole, I think this is a pretty neat solution to your problem.  A couple of observations...</p>

<p><strong>case == CASE</strong></p>

<p>You lower case everything.  Maybe this is exactly what you're after, but to me, <code>fieldOne</code> and <code>fieldone</code> aren't the same, so I'd want to know about that difference.</p>

<p><strong>Developer time vs test time</strong></p>

<p><code>symmetricDifference</code> gives back a set of all of the differences, it doesn't discriminate between the left and the right side.  So, if you've added something to <code>FieldsModel</code> and something else to <code>POTENTIAL_FIELDS</code> they would both come back.  The developer then has to go and look at both and reconcile where the problem is.  In reality this might not be a problem because the developer has probably worked on one of the files recently, so would realise which one they'd missed, however it would be better if the test showed what was missing from where.  You could do something like this:</p>

<pre><code>String inConstantButNotModel = constantFields.stream()
        .filter(i -&gt; !reflectFields.contains(i))
        .collect(Collectors.joining(","));
String inModelButNotConstant = reflectFields.stream()
        .filter(i -&gt; !constantFields.contains(i))
        .collect(Collectors.joining(","));

assertThat(String.format("ConstantsMissing: %s\nModelMissing: %s\n",
        inModelButNotConstant,
        inConstantButNotModel))
        .isEqualTo("ConstantsMissing: \nModelMissing: \n");
</code></pre>

<p>To give output along the lines of...</p>

<pre><code>ConstantsMissing: field5,field4
ModelMissing: field3
</code></pre>
    </div>