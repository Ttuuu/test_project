<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Based on your stated goals, I would offer the following suggestions.</p>

<h1>Separate the game model from the game UI</h1>

<p>You have a text-based game.  You want a JavaFX based game.  The text-based game is outputting messages to the console.  When you have the JavaFX based game, you won't have a console, but will want to present game feedback in an entirely different way.  Finally, if you have an AI which explores the game-space by playing a number of fake games starting at the current state of the board, you don't want any visible feedback - just an indication of whether the series of moves the AI had made results in winning or losing.</p>

<p>Separating the model from the UI will allow you to have all both a text-based game and a JavaFX game.  It will allow you to write an AI which can play the game.  It will do this because the game model will just maintain the state of the game, and determine when a player makes a winning move.</p>

<p>Maybe:</p>

<pre><code>interface ConnectFour {
    enum Player { PLAYER_ONE, PLAYER_TWO }
    enum GameState { IN_PROGRESS, DRAW, WIN }

    void         reset();
    GameState    makeMove(Player player, int col) throws IllegalMoveException;
    List&lt;Player&gt; getColumn(int col);
}
</code></pre>

<p>Notice the interface doesn't have player names, nor does it assign colours to the players.  That is a UI detail.</p>

<p>It also doesn't use weird numbers for status results, instead an <code>enum</code> is used.  Any move is assumed to be valid; we don't need to return a boolean to indicate that the move was valid, so we can use the return to indicate if the player made the winning move.  If <code>PLAYER_ONE</code> made the winning move, <code>PLAYER_ONE</code> wins.  If <code>PLAYER_TWO</code> made the winning move, <code>PLAYER_TWO</code> wins.  No need for separate enum values to distinguish the two at the game model.  If the move is not valid, throw an exception.  If the UI doesn't want to handle exceptions, then it should ensure the move is legal before asking the model to perform it.</p>

<p>Finally, we provide a function which will allow the UI to query the game board, so it can display it to the user.  Perhaps as text.  Perhaps as JavaFX elements.  Or perhaps just to an AI which will have to process the information algorithmically.  I've shown getting each column as a list.  If a column has only two tokens, the list for the column will be length 2.  No need to coerce <code>EMPTY</code> as some kind of fake <code>Player</code> enum value; empty locations are indicated by the shorter-than-maximum list length.</p>

<p>Then, you can write your UI's.</p>

<pre><code>class ConnectFourConsole {
    ConnectFour game = new ConnectFourImpl();
    // ...
}
</code></pre>

<p>And,</p>

<pre><code>class ConnectFourJavaFX {
    ConnectFour game = new ConnectFourImpl();
    // ...
}
</code></pre>

<p>Neither UI need worry about whether a player gets four-in-a-row horizontally, vertically, or diagonally.  The model handles that.</p>

<p>Finally, your model implementation.</p>

<pre><code>class ConnectFourImpl implements ConnectFour {
    // ... 
}
</code></pre>

<hr>

<h1>Implementation</h1>

<h2>Game Grid</h2>

<p>The 2-d array for the game grid is fine, but I would use an <code>enum</code> for the data type.  As an alternate, I like <code>List&lt;List&lt;Player&gt;&gt; columns</code>, where you can simply add <code>Player</code> tokens to the column's list as moves are made.</p>

<pre><code>if (col &lt; 0  ||  col &gt;= columns.size())
    throw new IllegalMove("Invalid column");

List&lt;Player&gt; column = columns.get(col);

// Row we are about to play into (0 = bottom)
int row = column.size();

if (row == ROWS)
    throw new IllegalMove("Column Full");

// Move is valid.
column.add(player);

// Check for win by player, or full board, return
//   WIN, DRAW, or IN_PROGRESS respectively.
</code></pre>

<h2>Checking for a Win</h2>

<p>Adding 4 values to a <code>Set</code> and checking if the <code>.size()</code> is 1 is an interesting way of solving the "all 4 values match" problem.  But it is may be easier to simply check if all 4 values match the <code>player</code> who just played.  And it avoids the "4-blanks-in-a-row is not a win" issue, too.</p>

<p>With 6 rows, and 7 columns, the number of 4-in-a-rows you can get horizontally, vertically, or diagonally is (I think) 69.  This is a lot of combinations to check.  However, the only way the player could have achieved 4-in-a-row vertically is if it happened in the column that the player just played in.  At the top.  Exactly one possibility.</p>

<pre><code>// Four-in-a-row Vertically?
if (row &gt;= 3  &amp;&amp; column.stream()
                       .skip(row - 3)
                       .allMatch(token -&gt; token == player))
     return WIN;
</code></pre>

<p>The only way the player can win horizontally is if the the horizontal row is the <code>row</code> the player's piece landed in.   At most 4 possibilities: the piece just added is at the start, 2nd, 3rd or last in the row of 4.</p>

<p>Diagonals are similarly constrained.  The player's piece ended up at <code>row</code>,<code>col</code>.  You just need to check <code>row+i</code>,<code>col-i</code> for i running from -3 to +3, as long as you don't fall off the game grid, which works out to at most 3 possible combinations.  <code>row-i</code>,<code>col+i</code> gives at most another 3.</p>

<p>That reduces 69 four-in-a-row checks down to a maximum of 11, by only considering possibilities including the newly added piece.</p>

<h2>Player.java</h2>

<p>Your <code>Player</code> class has a <code>final</code> name, and a <code>private static</code> counter which is used to assign the player number when the <code>Player</code> is created.  And comments indicate you return <code>1</code> if player one wins and <code>2</code> if player two wins.</p>

<p>What if you don't exit the game, but an new player wants to challenge the winner of the last match?  Maybe this is JavaFX version.  You need <code>new Player(name)</code> to allow the challenger to be named, which creates <code>player.playerNumber == 3</code>.  Does your code still work?  If so, your comments are unclear.  If not, you've unnecessarily restricted your game to exactly two named players; if you want a different person to play, quit &amp; restart the game!!!</p>

<h2>Main.java</h2>

<pre><code>while(hasWon == false) {
   // Code to ask player 1 for move
   // Code to check for a winner, and exit
   // Code to draw board

   // Code to ask player 2 for move
   // Code to check for a winner, and exit
   // Code to draw board
}
</code></pre>

<p>Don't repeat yourself.  There are two almost identical copies of the code in the while loop.  Move the common code into a function.</p>

<pre><code>while(hasWon == false) {
   processTurnFor(playerOne);
   // break if won
   processTurnFor(playerTwo);
}
</code></pre>

<p>Closer.  But we are still explicitly handling <code>playerOne</code> and <code>playerTwo</code>.  If we had a 4-player game, the code would still be ugly.  Store the players in an array/list, and walk through the list, wrapping back to the start when you reach the end:</p>

<pre><code>Player[] players = { playerOne, playerTwo };
player_index = 0;
while (hasWon == false) {
    processTurnFor(players[player_index]);
    player_index = (player_index + 1) % players.length;
}
</code></pre>
    </div>