<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your implementation is correct. The additional comments are also welcome. I would write <code>&lt;*&gt;</code> without <code>runState</code>, but that's personal preference.</p>

<p>Keep in mind that you've re-implementend <code>Control.Monad.Trans.State.Strict.StateT</code>. For the lazy variant <code>Control.Monad.Trans.State.Lazy.StateT</code>, you would have to use lazy pattern matches in several places, so I assume you wanted to implement the strict variant.</p>

<p>To answer your question: no, we cannot implement <code>Applicative (StateT s m)</code> in terms of <code>Applicative m</code>. A <a href="https://stackoverflow.com/q/18673525/1139697">Q&amp;A on StackOverflow</a> contains some hints, but let's reiterate them:</p>

<p>Suppose you have two values <code>f</code>, <code>x</code> and want <code>y</code> with the following types:</p>

<pre><code>f :: StateT m s (a -&gt; b)
x :: StateT m s a
y :: StateT m s b
</code></pre>

<p>We first remove the newtype:</p>

<pre><code>f :: s -&gt; m (s, (a -&gt; b))
x :: s -&gt; m (s, a)
y :: s -&gt; m (s, b)
</code></pre>

<p>If our initial state is <code>p</code>, we have</p>

<pre><code>f p :: m (s, (a -&gt; b))
x   :: s -&gt; m (s, a)
</code></pre>

<p>We want to use the <code>s</code> from <code>f p</code> in <code>x</code> to feed into <code>x</code> and the function to use the <code>a</code>. Now, let's suppose that <code>m</code> is an Applicative. This gives us only <code>pure</code>, <code>fmap</code> and <code>&lt;*&gt;</code> to work with. Let's try to write an expression that only uses those three functions<code>pure</code>, <code>fmap</code> and <code>&lt;*&gt;</code>:</p>

<pre><code>z s = fmap (\(s', f') -&gt; fmap (\(s'', x') -&gt; (s'', f' x')) x s') (f s)
</code></pre>

<p>Let's check whether that implementation is sane. It's easier to deciper if we swap <code>fmap</code>'s arguments:</p>

<pre><code>x ~~&gt; f = fmap f x
z s = f s                                   --  1
      ~~&gt; (\(s', f') -&gt;                     --  2
           x s'                             --  3
           ~~&gt; (\(s'', x') -&gt; (s'', f' x')  --  4
         )
</code></pre>

<ol>
<li>We run <code>f s</code> to get our new state and our function. </li>
<li>Both are in <code>m</code>, so we use <code>fmap</code> to get in there.</li>
<li>We run <code>x s'</code> to get our new state again and our value. </li>
<li>Both are in <code>m</code>, so we use <code>fmap</code> yet again. However, we're using <code>fmap</code> <strong>inside</strong> <code>fmap</code>, which already tells us that we're not going to end up with a simple <code>m ...</code>.</li>
</ol>

<p>In (4), we end up with the correct new state <code>s''</code> and the correct value <code>f' x'</code>. However, our type is <code>s -&gt; m (m (s, b))</code>. Applicative does not provide any methods to reduce the number of <code>m</code>'s, so we're stuck. We need to use <code>join :: Monad m =&gt; m (m x) -&gt; m x</code>.</p>

<p>If we go back, we see that the problem arises due to <code>x</code>'s type <code>s -&gt; m (s, a)</code>. If it was <code>m (s -&gt; (s, a))</code>, we could simply use <code>Applicative</code>. <a href="https://stackoverflow.com/a/18676062/1139697">Petr provides a detailed answer on SO</a>.</p>
    </div>