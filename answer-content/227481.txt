<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First, at the top you list all the consonants out. There are two things that can be improved here:</p>

<ul>
<li><p>Since you only use it to check whether or not something is a consonant, it should be a <a href="https://docs.python.org/3.7/library/stdtypes.html#set-types-set-frozenset" rel="noreferrer">set</a>. It's much more efficient to to a membership lookup on a set than it is to do one on a list. Just replace the <code>[]</code> with <code>{}</code>.</p>

<pre><code>consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}
</code></pre></li>
<li><p>Second, there's a slightly less painful way to generate those letters. Python's <code>string</code> module contains a <code>ascii_lowercase</code> built-in that holds <code>'abcdefghijklmnopqrstuvwxyz'</code>. You can use that along with a set of vowels to limit what letters need to be hard-coded:</p>

<pre><code>import string as s

vowels = {'a', 'e', 'i', 'o', 'u'}
consonants = set(s.ascii_lowercase) - vowels  # Consonants are the set of letters, minus the vowels
</code></pre>

<p>I personally prefer this way.</p></li>
</ul>

<p>You could also just change your algorithm to use <code>vowels</code> directly.</p>

<hr>

<p>Just to clear something up, </p>

<pre><code>word_copy = word
</code></pre>

<p>does <em>not</em> create a copy of <code>word</code>. This just creates a second name for the <code>word</code> string. For Strings this doesn't matter because Strings are immutable, but with a mutable object, this will bite you:</p>

<pre><code>my_list = []
list_copy = my_list  # Does not actually create a copy!
my_list.append(1)
print(my_list, list_copy)  # prints [1] [1]
</code></pre>

<p>Notice how <em>both</em> lists were added to. This happens because there's actually only one list. Both names are referring to the same list.</p>

<p>For the sake of clarity, I'd rename it to say what it's <em>purpose</em> is. Offhand though, I can't see the need for <code>word_copy</code> at all! It would make sense if it was being used as an accumulator for a loop or something, but the only time its ever used is at <code>word_copy[0]</code>, and since you never reassign <code>word</code>, you could just do <code>word[0]</code>. I'd simply get rid of <code>word_copy</code>.</p>

<p>Along the same lines, I'd reconsider <code>ay</code>. The name you've given it is exactly as descriptive as the string it contains, and is only ever used in one place. At the very least, I'd rename it to something meaningful:</p>

<pre><code>pig_latin_suffix = ['a', 'y']
</code></pre>

<p>I'll also note that there's no reason to use a list of Strings here instead of a multi-character String. They behave the same in this case:</p>

<pre><code>" ".join(['a', 'y'])
'a y'

" ".join("ay")
'a y'
</code></pre>

<p>Strings are iterable just like lists are.</p>

<hr>

<p>I think <code>pig_latin</code> is too big. It's doing two main jobs: breaking the message into words, and processing the words. I would make the processing step its own function:</p>

<pre><code>def process_word(word):
    ay = ['a', 'y']
    listed_word = list(word)
    word_copy = word
    moved_consonants = ''

    for letter in listed_word.copy():
        if letter.lower() == 'y':
            if letter in word_copy[0]:
                moved_consonants += letter
                listed_word.remove(letter)
            else:
                break
        elif letter.lower() in consonants:
            moved_consonants += letter
            listed_word.remove(letter)
        else:
            break

    listed_word.append('-' + moved_consonants + ''.join(ay))

    return ''.join(listed_word)

def pig_latin(message):
    new_message = ''

    for word in message.split():
        processed_word = process_word(word)

        new_message += processed_word + ' '

    return new_message
</code></pre>

<p><code>process_word</code> could arguably be broken down further. This is already much better though. The immediate benefit is now you can test individual words, and not have to worry about how the rest of the code will react:</p>

<pre><code>print(process_word("Can"))  # Prints 'an-Cay'
</code></pre>
    </div>