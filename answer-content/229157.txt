<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>On the logic, you should notice that the next state of the <code>i</code>'th house becomes</p>

<pre><code>state[i - 1] ^ state[i + 1]
</code></pre>

<p>(some care at the boundaries to be exercised). Upon the closer inspection you may also notice that if you represent the state of the entire block as an integer composed of bits from each house, then</p>

<pre><code>state = (state &lt;&lt; 1) ^ (state &gt;&gt; 1)
</code></pre>

<p>is all you need to do. Python would take care of boundaries (by shifting in zeroes into right places), and update all bits simultaneously.</p>

<hr>

<p>I don't know the constraints, but I suspect that the number of days could be quite large. Since there are only that many states the block may be in (for 8 houses there are mere 256 of them), you are going to encounter the loop. An immediate optimization is to identify it, and use its length, rather than simulating each day in the entire time period.</p>
    </div>