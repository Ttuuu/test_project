<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First some comments related to your module structure:</p>

<ul>
<li><p>You may want to mirror the module structure of the <a href="https://hackage.haskell.org/package/cryptonite" rel="nofollow noreferrer">cryptonite</a> and <a href="https://hackage.haskell.org/package/crypto-api" rel="nofollow noreferrer">crypto-api</a> packages, which are the most popular cryptography packages on Hackage; <code>Crypto.Cipher.Caesar</code>, <code>Crypto.Cipher.Vigenere</code>, etc.</p></li>
<li><p>You may want to place the Vigenere crack implementation in <code>Crypto.Cipher.Vigenere.Crack</code>, call the method <code>crack</code> rather than <code>crackVigenere</code> (since the cipher is implied by the module), and only export <code>crack</code>:</p>

<pre><code>module Crypto.Cipher.Vigenere.Crack ( crack
                                    ) where

...
</code></pre>

<p>as this provides a clean interface to the algorithm.</p>

<p>If, for some reason, you wish to export the internal functions (such that they may be used by other modules), a common thing to do is to place the actual implementation in a module called <code>Crypto.Cipher.Vigenere.Crack.Impl</code>, and in the module <code>Crypto.Cipher.Vigenere.Crack</code> import this <code>Impl</code> but only export the public interface. This means that users of your library will know that <code>Impl</code> might change and should be referred to at their own risk, whereas <code>Crack</code> has a stable interface.</p></li>
<li><p>If you import these modules using <code>qualified</code>, you don't need to prefix each combinator as <code>caesarEncrypt</code>, <code>vigenereEncrypt</code>, etc. You can instead write e.g.</p>

<pre><code>import qualified Crypto.Cipher.Caesar as Caesar
import qualified Crypto.Cipher.Vigenere as Vigenere

... Caesar.encrypt ...
... Vigenere.decrypt ...
</code></pre></li>
<li><p>Give your modules a common interface, so it's <code>Caesar.encrypt</code>, <code>Caesar.decrypt</code>, <code>Vigenere.encrypt</code>, <code>Vigenere.decrypt</code>, and finally <code>break</code> or <code>crack</code> in the corresponding implementations, whichever you choose.</p></li>
<li><p>In the ADFGVX module in particular, and also in general, consider placing the high-level definitions / the definitions you aim to explicitly export, such as <code>encrypt</code> and <code>decrypt</code>, first in the file and all its helper definitions below. This provides more clarity when reading the code.</p></li>
<li><p>The <code>Codebreaking.Cryptanalysis</code> module is only used in the Vigenere cipher, so perhaps name this accordingly as e.g. <code>Crypto.Cipher.Vigenere.Analysis</code> to clarify what its use is.</p></li>
<li><p>Since the cryptonite package already has a module <code>Crypto.Cipher.Utils</code>, adding your <code>MyUtils</code> under this name may conflict with use-cases where you wish to use both packages simultaneously.</p></li>
</ul>

<p>Secondly some low-level comments related to your syntax and helper functions:</p>

<ul>
<li><p>As Michael Chav suggested, you may want to use quasi quotation on your longer strings. As an additional suggestion, you may want to consider the module <a href="https://hackage.haskell.org/package/file-embed" rel="nofollow noreferrer"><code>Data.FileEmbed</code></a> to move your very long formattable strings to a separate file:</p>

<pre><code>import Data.FileEmbed (embedStringFile)

someVeryLongStringWithWhitespaceFormatting :: String
someVeryLongStringWithWhitespaceFormatting = $(embedStringFile "path/to/foo.txt")
</code></pre></li>
<li><p>But for your terminal user-interface, you may want to use a library for building this; there are quite a lot out there, and I can only personally recommend <a href="https://hackage.haskell.org/package/brick" rel="nofollow noreferrer">brick</a>, but there are also byline, cli, haskeline, HCL and structured-cli.</p>

<p>Depending on whether you choose one of these or not, cct.hs could see some refactoring on its own that warrants its own code review, I think. Mainly there's a lot of UI-related code duplication and some separation of displaying the UI and reacting to input that could be separated. E.g. <a href="https://en.wikipedia.org/wiki/Functional_reactive_programming" rel="nofollow noreferrer">FRP</a> with Brick would enforce that.</p></li>
<li><p>Consider using HLint as it will provide you with a lot of helpful warnings about redundant parentheses and formatting; I won't comment on these, but there's for example quite a lot of parentheses that are not necessary and do not improve reading (one case is <code>map (toLower) xs</code>).</p></li>
<li><p>I assume the intent with MyUtils is to extract the most generic helper functions you've used. But it seems to me that a lot of these are dead (no longer used) or only used in one cipher. I understand that some of these helper functions are used by other helper functions inside MyUtils.</p>

<p>And finally, perhaps, generic functions used in multiple ciphers?</p>

<p>I'd recommend not extracting things to a common place until you need them in two places, and not export functions that are not expected to be used outside of a library. There's a principle to back this up somewhere, but I can only think of <a href="http://wiki.c2.com/?PrematureGeneralization" rel="nofollow noreferrer">premature generalization</a> right now.</p>

<p>If this completely eradicates MyUtils, that's good.</p>

<p>Notice that <a href="https://hackage.haskell.org/package/cryptonite-0.25/docs/Crypto-Cipher-Utils.html" rel="nofollow noreferrer">cryptonite's <code>Crypto.Cipher.Utils</code></a> only has a single definition.</p></li>
<li><p>As another point of comparison with the cryptonite package, you'll notice that it works on <code>Data.ByteArray</code>. Since your ciphers are not binary but letter-based, this is not really appropriate, but have you considered <code>Data.Text</code> for more efficient representation of strings? See the <a href="https://haskell.fpcomplete.com/tutorial/string-types" rel="nofollow noreferrer">String Types</a> tutorial by FPComplete for an intro.</p></li>
<li><p>Avoid a mixture of <code>CamelCase</code> and <code>snake_case</code>. You have both <code>adfgvxEncryption</code> and <code>caesar_decryption</code>.</p></li>
<li><p>You don't want as complex machinery as in <a href="https://hackage.haskell.org/package/cryptonite-0.25/docs/Crypto-Cipher-Types.html#t:Cipher" rel="nofollow noreferrer"><code>Crypto.Cipher.Types</code></a>, but you may want to create some type aliases to convey the meaning behind the many <code>String</code> and <code>Int</code> arguments.</p>

<p>E.g. instead of</p>

<pre><code>caesarShift :: Int -&gt; String -&gt; String
caesarShift n xs = [shift n x | x &lt;- map (toLower) xs]

...

vigenereEncrypt :: String -&gt; String -&gt; String
vigenereEncrypt key plaintext = ...
</code></pre>

<p>you can have</p>

<pre><code>type CaesarKey = Int

encrypt :: CaesarKey -&gt; String -&gt; String
encrypt key plaintext = map (shift key . toLower) plaintext

...

type VigenereKey = String

encrypt :: VigenereKey -&gt; String -&gt; String
encrypt key plaintext = ...
</code></pre></li>
<li><p>The <code>vigenereEncrypt</code> function is nicely written in the sense of its use of combinators, so you're using Haskell's standard library quite well. Stylistically I might prefer to rewrite</p>

<pre><code>vigenereEncrypt :: String -&gt; String -&gt; String
vigenereEncrypt key plaintext = ints2text result
  where result = map (`mod` 26) (zipWith (+)  keyCycle intPlainText)
        keyCycle = (cycle(text2ints key))
        intPlainText = text2ints (map (toLower) (filter (isAlphaNum) plaintext))
</code></pre>

<p>into</p>

<pre><code>encrypt :: VigenereKey -&gt; String -&gt; String
encrypt key plaintext = ints2text . encrypt' . text2ints $ plaintext'
  where
    encrypt' = map (`mod` 26) . zipWith (+) (cycle key')
    plaintext' = map toLower (filter isAlphaNum plaintext)
    key' = text2ints key
</code></pre>

<p>although I'm still a little unsatisfied with the name and use of <code>text2ints</code> and <code>ints2text</code>.</p></li>
</ul>

<p>Hope it helps.</p>
    </div>