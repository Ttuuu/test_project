<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>For greater brevity, you could also solve this puzzle using Python's functional programming tools:</p>

<pre><code>import operator
from collections import Counter
from functools import reduce


def solitary_product(*numbers):
    """
    Return the product of the given numbers, ignoring all numbers
    that repeated anywhere.
    """
    counts = Counter(numbers)
    distinct_numbers = [n for n in numbers if counts[n] == 1]

    return reduce(operator.mul, distinct_numbers, 1)

</code></pre>

<p>This has the added benefit of extending your solution to collections of numbers of arbitrary length instead of just sequence of three numbers. </p>

<p>It is worth noting that this method would likely be less efficient for short sequences of numbers due to the added overhead of additional functions calls and constructing a new collection. However, for longer sequences, this method offers the most ideal performance, and will be much more readable than long if-else chains. </p>

<hr>

<p><strong>Update for Python 3.8:</strong></p>

<p>The <a href="https://docs.python.org/3.8/library/math.html" rel="nofollow noreferrer"><code>math</code></a> module now includes the <a href="https://docs.python.org/3/library/math.html#math.prod" rel="nofollow noreferrer"><code>prod</code></a> function, which can compute the product of the elements in any iterable. Using this new feature, we can implement  this solution more briefly as</p>

<pre><code>import math
from collections import Counter


def solitary_product(*numbers):
    """
    Return the product of the given numbers, ignoring all numbers
    that repeated anywhere.
    """
    counts = Counter(numbers)
    distinct_numbers = [n for n in numbers if counts[n] == 1]

    return math.prod(distinct_numbers)
</code></pre>

<p>Thanks to L.F. for bring this to my attention.</p>

<p>As mentioned in the comments, you could even express this as a one-liner at the expense of readability:</p>

<pre><code>def solitary_product(*numbers):
    return math.prod(n for n, counts in Counter(numbers).items() if counts == 1)
</code></pre>
    </div>