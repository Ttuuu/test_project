<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>All in all I really like your code. It's good and easy to read, and there's nothing really wrong with it AFAICS. In the following I'm writing down whatever's coming to my mind what <em>could theoretically</em> be improved/changed. Therefore don't take that as a list of things to change, but rather as points to think about.</p>

<hr>

<h3>Too much of <code>this</code></h3>

<p>Whenever you refer the data members of your class, you use <code>this</code>:</p>

<pre><code>this-&gt;m_elements[i] = elements[i];
</code></pre>

<p>I think you do this to clearly separate between local variables / function parameters / global variables and the data members of the class. I've done this, too. But I think it's a reasonable assumption to make that somebody reading your code knows that data members <em>can</em> be accessed without <code>this</code>, and to know (at least roughly) the rules regarding name resolution.</p>

<p>And, moreover, you already have something in place to distinguish between data members and "the rest": That <code>m_</code> prefix. I read that as <code>m</code><em>ember</em><code>_elements</code>, or alternatively as <code>m</code><em>atrix</em><code>_elements</code>.</p>

<p>Having both just means more to type and more to read. And the long lines suffer somewhat from that "more". Compare:</p>

<pre><code>this-&gt;m_elements[0] = this-&gt;m_elements[0] * rhs.m_elements[0] + this-&gt;m_elements[1] * rhs.m_elements[4] + this-&gt;m_elements[2] * rhs.m_elements[8] + this-&gt;m_elements[3] * rhs.m_elements[12];

// No this
m_elements[0] = m_elements[0] * rhs.m_elements[0] + m_elements[1] * rhs.m_elements[4] + m_elements[2] * rhs.m_elements[8] + m_elements[3] * rhs.m_elements[12];
</code></pre>

<p><em>This point is highly debatable though, so if that's just "your style" then feel free to ignore it ;)</em></p>

<h3>C style arrays are out of fashion</h3>

<p>Instead of</p>

<pre><code>GLfloat m_elements[16];
</code></pre>

<p>you could (should?) use</p>

<pre><code>std::array&lt;GLfloat, 16&gt; m_elements;
</code></pre>

<p>The benefit is more information - the array size - for you (and the compiler) in some circumstances. A C style array "decays" (is implicitly converted) to a pointer to its first element in most situations. This conversion loses the information about the array size.</p>

<p>I doubt that this has any benefit to you in your particular case, though, because you can use ...</p>

<h3>range based <code>for</code></h3>

<p>... even with plain C arrays, too. This saves you from accidentally wrong indexing and other, often hard to find bugs:</p>

<pre><code>// your code
for(int i = 0; i &lt; 16; i++)
{
    this-&gt;m_elements[i] *= rhs;
}

// with range based loop
for(GLfloat &amp; element : m_elements)
{
    element *= rhs;
}
</code></pre>

<p>You can also go one step further and use <a href="http://en.cppreference.com/w/cpp/algorithm/for_each" rel="nofollow"><code>std::for_each</code></a>, possibly making use of execution policies when (if) you switch to C++17.</p>

<h3>Getting rid of more "manual" <code>for</code> loops</h3>

<p>Using <code>std::transform</code> you can get rid of more of these manual indexing loops:</p>

<pre><code>// your code
for(int i = 0; i &lt; 16; i++)
{
    this-&gt;m_elements[i] += rhs.m_elements[i];
}

// using std::transform
std::transform(std::begin(m_elements), std::end(m_elements),
               std::begin(rhs.m_elements),
               std::begin(m_elements),
               [] (GLfloat const &amp; l, GLfloat const &amp; r) { return l + r; });
</code></pre>

<p>Whether that's better in terms of readability is ... eh ... let's say "debatable", too. And of course it changes semantics: <code>operator+</code> and <code>operator=</code> are now used, instead of <code>operator+=</code>.</p>

<p>Instead you could also keep the manual indexing, but make sure you run over the correct range:</p>

<pre><code>size_t const number_elements = 
    std::distance(std::begin(m_elements), std::end(m_elements));
// or with std::array use
//  m_elements.size();
for(size_t i = 0; i &lt; number_elements; i++)
{
    m_elements[i] += rhs.m_elements[i];
}
</code></pre>

<p>Oh, and I like indexing with <code>size_t</code> as that's what's returned from the various <code>size()</code> member functions and may protect you from fallacies with the "usual arithmetic conversions" between unsigned and signed integer types. And of course when dealing with large amounts of data, <code>int</code> might be too narrow to hold possible indices. But of course, this doesn't apply here.</p>

<h3><code>memset</code> can be dangerous, better avoid it</h3>

<p>Instead of <code>memset</code> you could use the C++ (almost) equivalent <a href="http://en.cppreference.com/w/cpp/algorithm/fill" rel="nofollow"><code>std::fill</code></a>. <code>memset</code> is a bad idea when using anything but plain old data types, and even then I'm not sure whether aliasing (and in the future also "laundering" or lack thereof) could still cause undefined behavior. Thus I recommend to avoid it.</p>

<h3>DRY using the evil preprocessor</h3>

<p>The definitions of <code>operator+</code>, <code>operator-</code> and the two <code>operator*</code> are almost identical. You can use a macro to save you from that repetition:</p>

<pre><code>#define OP_FROM_SELF_ASSIGN_OP(op, lhstype, rhstype)         \
  inline Matrix4x4 operator op (lhstype lhs, rhstype rhs) \
  {                                                          \
      Matrix4x4 newMatrix = Matrix4x4(lhs);                  \
      newMatrix op ## = rhs;                                 \
      return newMatrix;                                      \
  }
</code></pre>

<p><em>Note: Untested, it may be necessary to have the token concatenation (<code>##</code>) in a helper macro.</em></p>

<p>Using it as such:</p>

<pre><code>OP_FROM_SELF_ASSIGN_OP(+, const Matrix4x4&amp;, const Matrix4x4&amp;)
OP_FROM_SELF_ASSIGN_OP(-, const Matrix4x4&amp;, const Matrix4x4&amp;)
OP_FROM_SELF_ASSIGN_OP(*, const Matrix4x4&amp;, const Matrix4x4&amp;)
OP_FROM_SELF_ASSIGN_OP(*, const Matrix4x4&amp;, const GLfloat&amp;)
</code></pre>

<p>Note that you could do similar tricks in the header file for <code>operator+=</code> and <code>operator-=</code>, but I'd advise against that as the benefit is minor compared to the issues that may arise if the used macros interfere with code including that header. Better keep ones macros behind closed doors ;)</p>

<h3>No pointers to arrays without a size or end, please</h3>

<pre><code>Matrix4x4::Matrix4x4(GLfloat elements[])
</code></pre>

<p>This constructor rings alarm bells, though. Here you accept a pointer to (probably) an array of <code>GLfloat</code>s, but you have no idea how many you'll get neither give the caller any chance to tell you how many objects live behind that pointer.</p>

<p>Sure we can expect people to be able to infer from the name <code>Matrix4x4</code> that there are 16 <code>GLfloat</code>s required, but it's a dangerous practice / API design nonetheless.</p>

<p>You could also provide a constructor accepting a <code>std::initializer_list</code>. Or an (<code>explicit</code> please) constructor accepting a <code>std::array</code>.</p>

<h3>Don't break encapsulation in your factory functions</h3>

<p>In your factory (<code>static</code>) functions you (IMO) break encapsulation by directly accessing the underlying array. Better let the constructor do the work:</p>

<pre><code>Matrix4x4 Matrix4x4::CreateScale(Vector4 scale)
{
    GLfloat elements[] = {
      scale.x, 0,       0,       0,
      0,       scale.y, 0,       0,
      0,       0,       scale.z, 0,
      0,       0,       0,       0};
    return Matrix4x4{elements}; // Note: Using your constructor without size/end
}
</code></pre>
    </div>