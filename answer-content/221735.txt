<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You really need to focus on the various "who" s in your model.  </p>

<ul>
<li>Company </li>
<li>Contact </li>
<li>User </li>
<li>Buyer</li>
<li>Seller</li>
<li>Party</li>
<li>Participator</li>
</ul>

<p>Try to separate the who from the role.  The role is the relationship between the who and the event.</p>

<p>As a modelling example:</p>

<ul>
<li>a user is the entity that performs some action.</li>
<li>a user must belong to one organization (or many, see broker below)</li>
<li>An organization contains 0 to many users and can be residential or commercial. (An organization without
users can't do anything)</li>
<li>A customer is an organization that buys product (transacted by the user
within the organization).</li>
<li>A vendor is an organization that sells product (transacted by a user
within that organization).</li>
<li>A user that buys and sells products is still a single user, belonging
to a single organization.</li>
<li>A broker that buys or sells on behalf of multiple organizations is
(<em>design decision</em>) [a unique user for each organization it represents 
| associated to each organization it represents but is still a single
user]</li>
</ul>

<p>That first bullet is very important.  Every action should be associated to a real physical entity.  If there is ever a question of who bought/sold something, you should be able to tie it back to the real entity that performed the action.  Eventually fraud will occur and you don't want to be the system that dead-ends the investigation because you only associated the order to a generic company record.  Make sure you build accountability into your system, even if the company may circumvent it by using shared credentials, etc.</p>

<p>I'm not a big fan of uniqueidentifiers (16 bytes).  I'd switch to int (4 bytes) instead.  If you expect a very high volume, use bigint (8 bytes) .  This also helps provide a human consumable (order, product, etc) id.  In my opinion, GUIDs just take up more space and run a bit slower without providing a tangible benefit.  Even Amazon uses big integers for their order numbers.</p>

<p>Non-clustered indexes are for performance tuning and are not considered part of the data model.  In your question, they just add clutter.</p>

<p>One of the best ways to refine your model is to ask questions of it before you write any code.  Go back to your requirements and see if you can generate some questions your model is intended to fulfill.</p>
    </div>