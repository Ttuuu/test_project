<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>lowerCase and uppercase should be treated te same? Let's make them the same:</p>

<pre><code>val lowerText = text.toLowerCase()
</code></pre></li>
<li><p>Check for duplicates? A set doesn't allow duplicates.<br>
Also, <code>add</code> returns a <code>Boolean</code> which tells if the value is added.<br>
This means we can get a list off all the unique values by checking if we can add it to a set:</p>

<pre><code>fun duplicateCount(text: String): Int {
    val lowerText = text.toLowerCase()
    val invalid = mutableSetOf&lt;Char&gt;()

    val chars = lowerText.filter{ invalid.add(it) }
    return chars.length
}
</code></pre></li>
<li><p>But we needed the duplicates...<br>
Well, this means that we need to get the items that already were in our set.<br>
As we can only add items to our set once, the duplicates are the items where we cannot add it (because they are already added):</p>

<pre><code>fun duplicateCount(text: String): Int {
    val lowerText = text.toLowerCase()
    val invalid = mutableSetOf&lt;Char&gt;()

    val chars = lowerText.filterNot{ invalid.add(it) }
    return chars.length
}
</code></pre></li>
<li><p>What happens if we come come across a character three times:  </p>

<ol>
<li>it can be added -&gt; add returns true -&gt; we ignore it</li>
<li>it can't be added -&gt; add returns false -&gt; we add it to <code>chars</code>.</li>
<li>it can't be added -&gt; add returns false -&gt; we add it to <code>chars</code> again.</li>
</ol>

<p>but, I guess we can change the list into a collections that doesn't allow duplicates :-)</p>

<pre><code>fun duplicateCount(text: String): Int {
    val lowerText = text.toLowerCase()
    val invalid = mutableSetOf&lt;Char&gt;()

    val chars = lowerText
        .filterNot{ invalid.add(it) }
        .toSet()
    return chars.length
}
</code></pre></li>
</ol>

<p>or without redundant params:</p>

<pre><code>    fun duplicateCount(text: String): Int {
        val invalid = mutableSetOf&lt;Char&gt;()

        return text
            .toLowerCase()
            .filterNot{ invalid.add(it) }
            .toSet()
            .length
    }
</code></pre>

<p>5*. We can optimize it a bit by adding it immediately to a Set.<br>
  We can do this by calling <code>filterNotTo</code> instead of <code>filterNot</code>.<br>
  We need to get the <code>filterNotTo</code> for classes with an <a href="https://kotlinlang.org/docs/reference/iterators.html" rel="noreferrer">iterator</a> (which implements Iterable), but String doesn't have this.<br>
Fortunately, <code>String</code> has a function <code>asIterable</code> which returns an <code>Iterable</code> for the <code>String</code>.</p>

<p>When we combine this we get:</p>

<pre><code>fun duplicateCount(text: String): Int {
    val invalid = mutableSetOf&lt;Char&gt;()
    return text
        .toLowerCase()
        .asIterable()
        .filterNotTo(mutableSetOf()){
            invalid.add(it.toLowerCase())
        }.size
}
</code></pre>
    </div>