<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are two approaches</p>

<ol>
<li><p>For the sake of completeness, I’ll describe the typical, simple solution:</p>

<pre><code>struct UserLoginResponse: Codable {
    let status: Bool
    let error: ErrorResponse?
    let accessToken: String?
    let data: [UserLoginData]?
}
</code></pre>

<p>The <code>status</code> is not optional (because it’s presumably there regardless). But you can just decode this <code>struct</code>:</p>

<pre><code>do {
    let responseObject = try decoder.decode(UserLoginResponse.self, from: data)
    switch responseObject.status {
    case true:
        guard let accessToken = responseObject.accessToken, let userLoginData = responseObject.data else {
            throw ParsingError.requiredFieldMissing
        }

        // use accessToken and userLoginData here

    case false:
        guard let errorObject = responseObject.error else {
            throw ParsingError.requiredFieldMissing
        }

        // use errorObject here
    }
} catch {
    print(error)
}
</code></pre></li>
<li><p>If you really want to do this generic, wrapper approach, I’d suggest a slight refinement. Notably, the code in your question returns an object for which both the success and error objects are optionals. (There seem like there are a lot of <code>?</code> thrown in there quite liberally, whereas most API dictate “if success, <em>x</em> and <em>y</em> will be present, if failure, <em>z</em> will be present”.)</p>

<p>I’d suggest, instead, a pattern that captures the fact that the response will be either success (when <code>status</code> is <code>True</code>) or failure (when <code>status</code> is <code>False</code>), and rather than returning both success and failure objects as optionals, use the <code>Result&lt;Success, Failure&gt;</code> enumeration with associated values, which is included in Swift 5. Or, if you’re using an earlier version of Swift, you can define it yourself:</p>

<pre><code>enum Result&lt;Success, Failure&gt; {
    case success(Success)
    case failure(Failure)
}
</code></pre>

<p>Then, the API response wrapper can have a non-optional <code>result</code> property of type <code>Result&lt;T, E&gt;</code>, where:</p>

<ul>
<li>If <code>status</code> is <code>True</code>, parse the success object as a non-optional associated value which is the <code>Success</code> type;</li>
<li>If <code>status</code> is <code>False</code>, parse the error object as a non-optional associated value which is the <code>Failure</code> type;<br> </li>
</ul>

<p>Thus:</p>

<pre><code>struct ApiResponse&lt;T: Codable, E: Codable&gt;: Codable {
    let status: Bool
    var result: Result&lt;T, E&gt;
    var error: E?

    enum CodingKeys: String, CodingKey {
        case status, error
    }

    init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        status = try values.decode(Bool.self, forKey: .status)
        if status {
            let singleValue = try decoder.singleValueContainer()
            result = try .success(singleValue.decode(T.self))
        } else {
            let parsedError = try .failure(values.decode(E.self, forKey: .error))
            error = parsedError
            result = .failure(parsedError)
        }
    }
}
</code></pre>

<p>Then you can do:</p>

<pre><code>do {
    let responseObject = try decoder.decode(ApiResponse&lt;UserLoginResponse, ErrorResponse&gt;.self, from: data)
    switch responseObject.result {
    case .success(let object):
        print(object.accessToken, object.data)

    case .failure(let error):
        print(error)
    }
} catch {
    print(error)
}
</code></pre>

<p>This would seem to better capture the true nature of the response, that it’s either successful (and you get the non-optional success object) or it’s a failure (and you get the non-optional <code>ErrorResponse</code> object).</p>

<p>By the way, I’d suggest that in this scenario, that <code>UserLoginResponse</code> be updated to reflect which fields are truly optional and which aren’t. For example, if you know that if <code>status</code> is <code>True</code>, that both <code>accessToken</code> and <code>data</code> will be present, then I’d make those non-optional properties:</p>

<pre><code>struct UserLoginResponse: Codable {
    let accessToken: String
    let data: [UserLoginData]
}
</code></pre></li>
</ol>
    </div>