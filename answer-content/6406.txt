<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><code>str.Replace</code> does a lot of copying behind the scenes. Especially if you have a complex string, you'd be better off with a <code>StringBuilder</code> in a loop. Something like (untested code):</p>

<pre><code>StringBuilder sb = new StringBuilder();
int idx = 0;
while (true) {
    int nextIdx = str.IndexOf("[%", idx);
    if (nextIdx &lt; 0) break;
    // Copy unexpanded text
    sb.Append(str, idx, nextIdx - idx);
    // Find end
    int endIdx = str.IndexOf("%]", nextIdx);
    if (endIdx &lt; 0) throw new Exception("Unmatched [%");
    // Copy the substitution and then skip past it
    string field = str.Substring(nextIdx + 2, endIdx - nextIdx + 2);
    sb.Append(GetValueByName(invoice, field));
    idx = nextIdx + 2;
}
// Copy the tail.
sb.Append(str, idx, str.Length - idx);
return sb.ToString();
</code></pre>

<p>NB I've assumed that GetValueByName is now a static field - it makes no sense to me for it to be a method of Invoice, as that both pushes functionality into Invoice which is nothing to do with invoicing, and limits its applicability. I would be tempted to make it an extension method of object.</p>

<p>Also, I've used your <code>[%</code> for consistency, but when I do things like this I prefer to use <code>{</code> and reuse <code>string.Format</code>'s syntax. I also handle <code>:formattingString</code> and take an IFormatProvider as an argument.</p>
    </div>