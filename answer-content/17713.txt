<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You have two lines marked as "doesn't scale".</p>

<p>The initial team list can be obtained from your database table of available teams (select of team details).</p>

<p>The other "problem line", is</p>

<pre><code> if gameid in [8,12,14]:  ##this is a manual decision tree, doesn't scale at all
</code></pre>

<p>But that's easily avoided by noticing that the games in a round are always half the previous round, and the initial round is half the number of teams!</p>

<p>In other words, you can do something like (if you include the initial round):</p>

<pre><code>def NewRoundIds( teams_in_tournament ):
    round_ids = []
    game_id = 0
    games_in_next_round = len(teams_in_tournament)/2 #need to count the number of teams_in_tournament list
    while games_in_next_round &gt; 0:
        round_ids += [game_id]
        game_id += games_in_next_round
        games_in_next_round /= 2
    return round_ids

new_round_game_ids = NewRoundIds( teamlist )
...
if gameid in new_round_game_ids:
    # etc
</code></pre>

<p>== edit ==</p>

<p>This puts it <em>well</em> outside the brief of the site, but it was interesting. The following I think does what you want, <code>generate_tournament(16)</code>. It could do with a bit of tidying up, and it's the sort of thing that will certainly benefit from docstrings and doctests, which I shall leave as a exercise.</p>

<pre><code>import math

def tournament_round( no_of_teams , matchlist ):
    new_matches = []
    for team_or_match in matchlist:
        if type(team_or_match) == type([]):
            new_matches += [ tournament_round( no_of_teams, team_or_match ) ]
        else:
            new_matches += [ [ team_or_match, no_of_teams + 1 - team_or_match ] ]
    return new_matches

def flatten_list( matches ):
    teamlist = []
    for team_or_match in matches:
        if type(team_or_match) == type([]):
            teamlist += flatten_list( team_or_match )
        else:
            teamlist += [team_or_match]
    return teamlist

def generate_tournament( num ):
    num_rounds = math.log( num, 2 )
    if num_rounds != math.trunc( num_rounds ):
        raise ValueError( "Number of teams must be a power of 2" )
    teams = 1
    result = [1]
    while teams != num:
        teams *= 2
        result = tournament_round( teams, result )
    return flatten_list( result )
</code></pre>
    </div>