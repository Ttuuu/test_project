<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It would make more sense to store the distance with the point so that you don't have to calculate it each time.  </p>

<pre><code>class CoordinatePoint implements Comparable&lt;CoordinatePoint&gt; {

    int[] coordinates;
    int squaredDistance;

    private CoordinatePoint(int[] coordinates, int squaredDistance) {
        this.coordinates = coordinates;
        this.squaredDistance = squaredDistance;
    }

    public CoordinatePoint create(int[] coordinates) {
        int squaredDistance = coordinates[0] * coordinates[0] + coordinates[1] * coordinates[1];
        return new CoordinatePoint(coordinates, squaredDistance);
    }

    public int[] getCoordinates() {
        return coordinates;
    }

    @Override
    public int compareTo(CoordinatePoint coordinatePoint) {
         return -Integer.compareTo(this.squaredDistance, point.squaredDistance);
    }

}
</code></pre>

<p>I stored the squared distance because it compares the same as the distance but is easier to calculate.  </p>

<p>The square of an integer (real numbers in general) is always positive, so taking the absolute value is unnecessary.  </p>

<p>I implemented <code>Comparable</code> so that it could be used with a <code>PriorityQueue</code> without declaring a <code>Comparator</code>.  </p>

<pre><code>    Queue&lt;CoordinatePoint&gt; nearestPoints = new PriorityQueue&lt;&gt;(K);

    for (int[] point : points) {
        nearestPoints.add(CoordinatePoint.create(point));

        while (nearestPoints.size() &gt; K) {
            nearestPoints.remove();
        }
    }

    int index = 0;
    int[][] results = new int[nearestPoints.size()][2];
    for (CoordinatePoint point : nearestPoints) {
        results[index] = point.getCoordinates();
        index++;
    }

    return results;
</code></pre>

<p>Defined this way, the <code>PriorityQueue</code> returns the largest distance.  So what this does is it adds each point to the heap (which is how a <code>PriorityQueue</code> is stored).  Then if there are too many points, it removes all but <code>K</code> of them.  Then it just converts the heap to an array.  </p>

<p>Using the <code>PriorityQueue</code> simplifies the logic.  And this solution has a runtime complexity of <span class="math-container">\$\mathcal{O}(n\log k)\$</span> where <span class="math-container">\$n\$</span> is the number of points in the input and <span class="math-container">\$k\$</span> is the number to return.  This is because for each element in the input, you insert it into a heap of at most <span class="math-container">\$k\$</span> elements.  And heaps have logarithmic insertion complexity.  Your original solution was <span class="math-container">\$\mathcal{O}(n\log n)\$</span> because it inserted all the elements into the set before removing only some of them.  </p>

<p>But actually, I think that this problem is trying to get you to implement the heap yourself.  The reason that I think that is that it would be quite possible to return an array organized as a heap.  You'd lose the storage of the squared distance that way, so you'd have to calculate it each time.  But you'd save storage space and the work of copying the results from intermediate storage.  </p>

<p>The part about not caring about order strongly suggests using a heap, as that is one of the properties of a heap.  It makes finding the smallest or largest element easy but does not store the elements in order after that.  </p>

<p>I haven't tested this code, so be careful of compile errors, etc.  </p>
    </div>