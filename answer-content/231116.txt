<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are a few places for improvement (in my opinion), but remember - measure! This was written under an assumption that the code works correctly and we do not need any fancy data structures to perform this task. </p>

<h1>Arrays</h1>

<h3>Declaration </h3>

<p>As far as I remember, jagged arrays (<code>[][]</code>) have a better performance than multi dimensional ones (<code>[,]</code>) you could try to measure performance with creating <code>dp</code> as <code>string[][]</code> instead.</p>

<h1>String building </h1>

<h3>Allocation</h3>

<p><code>StringBuilder</code> allocates more memory when it doesn't have any more space to fill. Consider passing an <a href="https://docs.microsoft.com/en-us/dotnet/api/system.text.stringbuilder.-ctor?view=netframework-4.8#System_Text_StringBuilder__ctor_System_Int32_" rel="nofollow noreferrer">argument to it's constructor</a> to pre allocate needed size. You can easily get an upper bound but average size (optimal?) would require some testing. </p>

<h3>Building</h3>

<p>For a short strings, string concatenation is faster than using a string builder due to memory allocations. You can take a look <a href="https://support.microsoft.com/en-us/help/306822/how-to-improve-string-concatenation-performance-in-visual-c" rel="nofollow noreferrer">here</a> for some <em>magical</em> guidance. </p>

<h1>Misc</h1>

<h3>Split vs Substring</h3>

<p>Consider using <code>.Split</code> method instead of <code>Substring</code>, I've never personally see any difference but there is <a href="https://codereview.stackexchange.com/a/194974/138806">some evidence</a> that it might actually speed up the execution. </p>

<h3>Unsafe</h3>

<p>You can try to mark your methods as <code>unsafe</code> this will request from the compiler to not check boundaries of the arrays and also will give you access to pointer manipulation. I've seen cases where this improved performance. This might give you a significant performance only with a large number of calls. </p>

<h1>General notes</h1>

<p>Remember, all <code>Substring</code> or string concatenation allocates a new string. I think you should try to figure out how to do this without strings at all! Remember that in reality, characters are just numbers. In my opinion, the main killer here is string concatenation (as you probably guessed). </p>
    </div>