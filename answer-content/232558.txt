<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Code Review</h2>

<p>Great work! Programming is a skill that most find near impossible to pick up. Your game clearly demonstrates you have the mind of a coder and just getting an app to work, as a beginner, deserves full points.</p>

<p>I could only see one bug and that is the page will lock up if the number of mines is greater than the number of cells.</p>

<p>Your code does show your lack of experience (which is not a bad thing we all started this way) so this review is rather long as there are many items to cover. The example rewrite may also be a little advanced so if you have questions please do ask in the comments and I will reply in comment or update this answer to clarify any points.</p>

<p>This answer should contain many links but as there are so many I have just included this <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript" rel="nofollow noreferrer">MDN JavaScript reference</a> From that page you can find all you will need regarding and of the functions and objects mentioned in this answer.</p>

<h2>Logic, layout and design.</h2>

<h3>Use the DOM</h3>

<p>You create a table with columns and rows however you reference (by name) the columns as row and the rows as columns. This type of missing naming can create serious problems when maintaining the code. Always be precise in your naming and abstraction.</p>

<h3>Single event</h3>

<p>You add events for every cell in the game. You are far better of adding one event listener to the tables and in that listener using the <code>event</code> object to get the cell that triggered the event. see example <code>field.cellClicked</code></p>

<h3><code>String.split</code></h3>

<p>Extracting content from a string. You get the row and column of a cell using the <code>Id</code> of an element. First the <code>id</code> should never represent any type of information, it is just an identifier. Second your method of extraction is somewhat clunky</p>

<p>You have</p>

<blockquote>
<pre><code>let x = id.substring(0, id.indexOf("/"));
let y = id.substring((id.indexOf("/") + 1), (id.length + 1));
</code></pre>
</blockquote>

<p>you could use </p>

<pre><code>let [x, y] = id.split("/");
// or
const [x, y] = id.split("/").map(Number);
</code></pre>

<h3>Keep out of global scope</h3>

<p>Keep the global scope clean. Put the whole game inside a function (see example where the game is contained within the <code>load</code> event). This makes the code far more portable and safe to insert into other pages. Pages that will contain 3rd Party code.</p>

<h3>Complexity is the enemy</h3>

<p>Your code is in many parts very repetitive and complex (mostly due to inexperience). You often repeat the same logic to find the same state in various parts of the code.</p>

<p>Your data structure is also too complex, structuring it to match the game layout rather than what you need to manage the game state. </p>

<p>Always aim to keep it as simple as possible. Don't store information not needed, don't compute information more than once.</p>

<h2>Warning</h2>

<h3>Always in Strict mode</h3>

<p>You have some undeclared variables in use (variable without <code>var</code>, <code>let</code>, or <code>const</code>). This is very dangerous as undeclared variables are created in global scope and can easily be used in various places without you noticing that they are all the same reference.</p>

<p>To prevent these types of easy to make oversights always run your scripts in strict mode. To set strict mode just add the line <code>"use strict";</code> at the top of the JavaScript file.</p>

<h3>Query the DOM</h3>

<p>DOM queries are very slow compared to using a stored or direct reference to the elements.</p>

<p><code>document.getElementById(newId)</code> is a DOM query and you use it all over the place. As this is not a realtime game its not that big of a deal, but it is a bad habit and should be avoided. </p>

<p>Locate and store a reference to all the DOM elements you need once at the start of the code and use those references when you need to do something to an element. see example <code>field.elements</code> object that is used to store elements needed in the game</p>

<h2>User friendly</h2>

<p>You might create the best game ever but with a clunky and hard to use UI nobody will evry want to play it. </p>

<p>Try to not give users options that are invalid. Eg you provide inputs to set the rows and columns, in the function run you then check if the values are &lt;= 1 or &gt; 100 and display an alert. The user should never be able to add these invalid settings. This is a basic UI design rule you should always consider.</p>

<p>Provide as much feedback as you can to let the user know what can and can not be done. Eg I have added mouse pointer only to cells that can be clicked. You can add more and custom pointers to.</p>

<p>DO NOT use alerts. Often they can be deactivated so you can never know if the user has seen them. They are also blocking and if there are problems (repeated calls to alert) you can leave such a bad taste in the user that they will never come back.</p>

<h2>CSS</h2>

<p>Use CSS style rules to define styles and use these styles to modify element styles. See Example. You can access the elements class name via <code>element.className</code> and also <code>element.classList</code> for a higher level interface.</p>

<h2>General style points</h2>

<p>-Use object function shorthand to reduce code noise. eg <code>checkWin: function () {</code> becomes <code>checkWin() {</code></p>

<ul>
<li><p>Use function declarations eg <code>function run(</code> rather than function expressions <code>const run = () =&gt; {</code> as function declarations can be call from any point in the code while function expressions can only be called after the expression has been executed.</p></li>
<li><p>Use <code>addEventListener</code> to add event rather than assigning to the <code>onEvent</code> property of the element.</p></li>
<li>Use <code>const</code> for variables that do not change.</li>
<li><p>Why are you constantly using <code>parseInt</code> (OMDG <code>parseInt(parseInt(x) + parseInt(i))</code> !!!) You only need to do this if the variable is a string representation of the number and often it is better to use <code>Number("1")</code> to convert to a number than <code>parseInt</code>.</p></li>
<li><p>`Don't create content using HTML. Use the DOM interface to create elements to add to the pages. It is 100s of times quicker and prevents a whole pile of problems with the page settings.</p></li>
<li><p>Use strict equality and inequality <code>===</code> and <code>!==</code> rather than truthy equalities <code>==</code> and <code>!=</code>.</p></li>
<li><p>Avoid single use variables unless they help in readability (eg make a line shorter). </p>

<p>Example of poor use of variables <code>let cols = document.getElementById("cols").value;</code> only used once on the next line. Much better as <code>field.cols = document.getElementById("cols").value;</code></p></li>
<li><p>DO NOT add JavaScript to the HTML. eg <code>onclick="run()"</code> should be set via <code>addEventListener</code> in the JavaScript code.</p></li>
</ul>

<h2>Naming</h2>

<p>Your code is full of very bad naming practices.</p>

<ul>
<li>You use <code>cols</code>, and <code>rows</code> to define row and column counts. Generally we use <code>rows</code> and <code>cols</code> to reference collections or arrays. Use <code>colCount</code> and <code>rowCount</code> to clearly define what the variables represent.</li>
<li>You call mines <code>mine</code> and <code>bomb</code>, this makes it very difficult to know what the variable name should be. In the example I have changed the names of all bomb references to <code>mine</code>.</li>
<li>Do not include the variables type in the name eg <code>field.bombArray</code> should be <code>field.bombs</code> the plural hits that the variable is an array or array like.</li>
<li>You are mixing <code>field</code> and <code>this</code> within the <code>field</code> object. As field is a single instance use <code>field</code> rather than <code>this</code>  <code>this</code> is used when you have many instances of an object.</li>
</ul>

<p>OK that will do it. I have not covered everything by there is a size limit to answers here.</p>

<h2>Rewrite example</h2>

<p>I have completely rewritten the code from the ground up (well almost). Have a look and take what you can from it. </p>

<p>Some points</p>

<ul>
<li>Mines and Cells are stored in one dimensional array. X and y coords are converted to index to locate neighbors. </li>
<li>A cell object created by <code>createCell</code> contains all the logic and states of a cell</li>
<li>Recursive <code>reveal</code> The cell <code>reveal</code> function calls reveal on its neighbors if needed. This automatically and efficiently reveals all the neighbors without a lot of complicated repeated searches.</li>
<li>CSS rules to reflex cell state eg <code>class="gameCell hidden mine marked"</code> </li>
<li>One event listener handles left and right clicks. Listeners are removed when not needed. </li>
<li><code>field.reset</code> starts the game rather than a function independent of <code>field</code></li>
<li>Some helper function, game constants are stored at the beginning of the code.</li>
<li>"Use strict" at the top to ensure there are no simple typos and forgot it's in the code</li>
<li>Used getters and setters on the cell object</li>
<li>Used short circuit style to avoid to much code noise. Eg <code>x &lt; 0 &amp;&amp; neighbours.push(</code> is the same as <code>if (x &lt; 0) { neighbours.push(</code></li>
<li>Used ternaries to reduce code noise. eg <code>text = mine ? "X" : (mineCount &gt; 0 ? mineCount : "");</code> is the same as if (mine) { text = "X" } else { if (minecount &gt; 0) { text = mineCount } else { text = "" } }`</li>
</ul>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>"use strict";  
addEventListener("load", () =&gt; {  // isolates the game from the global scope

    // utility functions
    const createElement = (tag, props ={}) =&gt; Object.assign(document.createElement(tag), props);
    const byId = id =&gt; document.getElementById(id);
    
    // constants
    const MINE_CHAR = "\ud83d\udca3";
    const EXP_CHAR = "\ud83d\udca5";
    const LOSS = "You loss!";
    const WIN = "You win!";
    const PLAY_AGAIN = "Click start?";
    const DEBUG = false; // set to true to help debug game
    
    // The 0 timeout just waits till all the code below has been executed 
    // so that the setup code can hang out at the top 
    setTimeout(() =&gt; {            
            newGame.addEventListener("click",field.reset);
            field.reset();
        },0);
    
    function createCell(x, y) {
        var mine = false;
        var hidden = true;
        var marked = false;
        const neighbours = [];
        var element, mineCount;
        const API = {
            set element(el) { element = el }, 
            get isMine() { return mine },
            get isHidden() { return hidden },
            get isMarked() { return marked },
            updateNeighbours(field) {
                x &gt; 0 &amp;&amp; neighbours.push(field.cells[x - 1 + y * field.colCount]);
                y &gt; 0 &amp;&amp; neighbours.push(field.cells[x + (y - 1) * field.colCount]);
                x &lt; field.colCount - 1 &amp;&amp; neighbours.push(field.cells[x + 1 + y * field.colCount]);
                y &lt; field.rowCount - 1 &amp;&amp; neighbours.push(field.cells[x + (y + 1) * field.colCount]);
                mineCount = neighbours.reduce((count, cell) =&gt; count + (cell.isMine ? 1 : 0), 0);
                if (DEBUG) {
                    element.textContent = mine ? MINE_CHAR  : (mineCount ? mineCount : " " );
                }
            },
            makeMine() {
                if (!mine) {
                    mine = true;
                    element.classList.add("mine");
                    return API;
                }
            },
            show(exploded = false) {
                hidden = false;
                element.classList.remove("hidden");
                if (mine) {
                   if (exploded) {
                       element.textContent = EXP_CHAR; 
                       element.classList.remove("safe");
                   } else {
                       element.textContent = MINE_CHAR;
                       element.classList.add("safe");
                   }
                } else {
                   element.textContent = mineCount &gt; 0 ? mineCount : "";
                }
            },          
            toggleMark(field) {
                marked = !marked;
                if (marked) {
                    field.marked ++;
                    element.classList.add("marked");
                } else {
                    field.marked --;
                    element.classList.remove("marked");
                }
            },
            reveal() {
                this.show();
                if (!mine &amp;&amp; mineCount === 0) {
                    neighbours.forEach(cell =&gt; cell.isHidden &amp;&amp; cell.reveal()); 
                }
            }
        };
        return API;
    }

    const field = {
        elements: {
            marked: byId("marked"),
            minesLayed: byId("minesLayed"),
            colCount: byId("colCount"),
            rowCount: byId("rowCount"),
            mineCount: byId("mineCount"),
            gameField: byId("gameField"),
            newGameBtn: newGame,
        },
        colCount: 0,
        rowCount: 0,
        maxMines: 10,
        marked: 0,
        mines: [],
        cells: [],
        reset() {
            field.elements.newGameBtn.textContent = "Restart";
            field.colCount = Number(field.elements.colCount.value);
            field.rowCount = Number(field.elements.rowCount.value);
            field.maxMines = Number(field.elements.mineCount.value);
            field.mines.length = 0;
            field.cells.length = 0;
            field.marked = 0;
            field.createBoard();
            field.updateDisplay();
        },
        endGame(message){
            field.elements.marked.textContent = message;   
            field.elements.minesLayed.textContent = PLAY_AGAIN;
            field.elements.table.removeEventListener("click",field.cellClicked);
            field.elements.table.removeEventListener("contextmenu",field.cellClicked);  
            field.elements.newGameBtn.textContent = "Start";                
        },
        checkWin() { 
            if (field.mines.every(mine =&gt; mine.isMarked)) {
                field.showAllCells();
                field.endGame(WIN);
            }
        },
        createBoard() {
            var x,y;
            field.elements.gameField.innerHTML = "";
            const table = field.elements.table = createElement("table",{className: "field"});
            for (y = 0; y &lt; field.rowCount; y++) {
                const row = table.insertRow()
                for (x = 0; x &lt; field.colCount; x++) {
                    const cell = createCell(x,y);
                    field.cells.push(cell);
                    cell.element = Object.assign(
                        row.insertCell(), {
                            className: "gameCell hidden", 
                            game_cell: cell,  // Use snake_case when assigning props
                        }
                    );
                }
            }
            while (field.mines.length &lt; field.maxMines &amp;&amp; field.mines.length &lt; field.cells.length) { 
                const mine = field.cells[Math.random() * field.cells.length | 0].makeMine();  
                if (mine) { field.mines.push(mine) }
            }
            field.cells.forEach(cell =&gt; cell.updateNeighbours(field));
            field.elements.gameField.appendChild(table);
            table.addEventListener("click",field.cellClicked);
            table.addEventListener("contextmenu",field.cellClicked);    
        },
        updateDisplay() {
            field.elements.marked.textContent = field.marked;
            field.elements.minesLayed.textContent = field.mines.length - this.marked;
        },
        showAllMines(exp = false) { field.mines.forEach(mine =&gt; mine.show(exp)) },
        showAllCells() { field.cells.forEach(cell =&gt; cell.show()) },
        cellClicked(event) {
            if (event.target.game_cell) {
                if (event.type === "contextmenu") {
                    event.preventDefault();
                    event.target.game_cell.toggleMark(field);
                    field.updateDisplay();
                    field.checkWin();               
                } else {
                    event.target.game_cell.reveal();
                    if (event.target.game_cell.isMine) {
                        field.showAllMines();
                        setTimeout(() =&gt; {
                                field.showAllMines(true);                            
                                field.endGame(LOSS);
                            }, 1000
                        );
                    }
                }
            }
        },
    };

});</code></pre>
<pre class="snippet-code-css lang-css prettyprint-override"><code>html {
    font-family: sans-serif;
 }

 .wrapper {
    display: grid;
    grid-template-columns: 200px, 8fr;
    grid-template-areas:
        "settings content";
    justify-content: left;
    grid-gap: 20px;
    white-space:nowrap;

 }

 .settings{
    grid-area: settings;
    position: absolut;
    white-space: nowrap;
    margin-top: 2px;
 }
 input {
    -moz-appearance: textfield;
    text-align: right;
    text-decoration: none;
    border: 0;
    background: black;
    border-bottom: 1px solid;
    color: #ffffff;
    width: 75px;
}

input[type=number]::-webkit-inner-spin-button,
input[type=number]::-webkit-outer-spin-button {
    opacity: 0;
}

 .content {
    grid-column-start: 2;
    grid-area: content;
    margin-top: 2px;
 }

 body {
    background: black;
 }

 
.gameCell {
    height: 24px;
    width: 24px;
    
    text-align: center;
    background: yellow; 
 }

.gameCell.hidden {
	 background: blue; 
     cursor: pointer;
}
.gameCell.hidden:hover{
    background: rgba(0, 0, 255, 0.527);
}
.gameCell.mine {
	 background: red; 
}
.gameCell.mine.safe {
	 background: #0D0; 
}
.gameCell.hidden.mine {
	 background: blue; 
}
.gameCell.hidden.mine.marked {
	background: red; 
    cursor: pointer;
}
.gameCell.hidden.marked {
	background: red; 
    cursor: pointer;
}



 p {
    color: white;
 }

 button {
    margin-top: 20px;

 }

 .markedMines {
    color: white;
    margin-top: 25px;
 }

 .minesLayed {
    color: white;
    margin-top: 25px;
 }</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;div class="wrapper"&gt;

        &lt;div id="settings" class="settings" align="right"&gt;
			&lt;p&gt;columns:&lt;input type="number" id="rowCount" value="5" min="2" max="100"/&gt;&lt;/p&gt;
			&lt;p&gt;rows:&lt;input type="number" id="colCount" value="5" min="2" max="100"/&gt;&lt;/p&gt;
			&lt;p&gt;mines: &lt;input type="number" id="mineCount" value="5" /&gt;&lt;/p&gt;
			&lt;button id="newGame"&gt;Start&lt;/button&gt;
			&lt;div class="minesLayed" id="minesLayed"&gt;&lt;/div&gt;
			&lt;div class="markedMines" id="marked"&gt;&lt;/div&gt;
		&lt;/div&gt;
		&lt;div id="gameField" class="content"&gt;&lt;/div&gt;
    &lt;/div&gt;</code></pre>
</div>
</div>


<h3>Update</h3>

<p>I have just added some cosmetic changes. Removed the header so that the small game board fits the CodeReview snippet a little better.</p>
    </div>