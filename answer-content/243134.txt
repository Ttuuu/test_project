<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>My requirement requires me to have indentation. I am unsure how to apply that indentation in my code.</p>
</blockquote>

<p>Just indent your C code exactly the same way you'd indent Python code. Start at the left margin (column 0), and then each time you "go in a level" (in the body of a function, or an <code>if</code> or <code>while</code> or <code>for</code>, or when breaking an expression across multiple lines), just space over by 4. For example, you wrote this before:</p>

<pre><code>    if (Opt == '1'){
    printf("Welcome to Normal maths operation Mode.\n\nYour two numbers: ");
        scanf("%f%f", &amp;Num1, &amp;Num2);
        printf("\nAVAILABLE SYMBOLS:\n\n+ for Addition\n- for Subtraction\n/ for Division\n* for Multiplication\n^ for Power function\n\nYour input: ");
        scanf(" %c", &amp;oper);
        if (oper == '+'){
            ans = (Num1 + Num2);
            printf("Here is your answer:\n%f  %c %f = %.5f (To 5 decimal places)\n\n", Num1, oper, Num2, ans);
            Sleep(2450);
            } else if (oper == '-'){
            ans = (Num1 - Num2);
</code></pre>

<p>Instead, just think "What would Python do?" and then do that.</p>

<pre><code>    if (Opt == '1') {
        printf("Welcome to Normal maths operation Mode.\n\n");
        printf("Your two numbers: ");
        scanf("%f%f", &amp;Num1, &amp;Num2);
        printf(
            "\nAVAILABLE SYMBOLS:\n\n"
            "+ for Addition\n"
            "- for Subtraction\n"
            "/ for Division\n"
            "* for Multiplication\n"
            "^ for Power function\n\n"
        );
        printf("Your input: ");
        scanf(" %c", &amp;oper);
        if (oper == '+') {
            ans = Num1 + Num2;
            printf("Here is your answer:\n");
            printf(
                "%f  %c %f = %.5f (To 5 decimal places)\n\n",
                Num1, oper, Num2, ans
            );
            Sleep(2450);
        } else if (oper == '-') {
            ans = Num1 - Num2;
</code></pre>

<p>Another good solution is to run <a href="https://clang.llvm.org/docs/ClangFormat.html" rel="noreferrer"><code>clang-format</code></a> over your source file, or use a text editor that understands curly braces and can indent for you.</p>

<hr>

<pre><code>#define PI 3.141592654
load();                                                                                         //Function is being referred at first so as to use it in main.
int main(void)
</code></pre>

<p>Whoa — there's a comment on that line! I didn't even see it in your question, because you'd put it insanely far over to the right. Don't do that. You <em>want</em> people to see these comments; that's why you wrote them, right? So indent them just as you would in Python.</p>

<p>Secondly: <code>load();</code> is a function call expression (or in this case, an expression statement). You can't have a function call just dangling out at file scope. Every statement must go inside some function (e.g. <code>main</code>).</p>

<p>But, I can tell from context that what you mean was to <em>forward-declare</em> the function <code>load</code>. The way you write a function declaration in C is, exactly the same as a function definition — except you omit the body! So, to forward-declare</p>

<pre><code>void load() {
    ...
}
</code></pre>

<p>you would write</p>

<pre><code>//Function is being referred at first so as to use it in main.
void load();
</code></pre>

<p>(The comment is pretty pointless, actually. I just included it to show how you should indent comments, i.e., nothing special.)</p>

<hr>

<p>Finally, that <code>#define</code> for <code>PI</code>:</p>

<ul>
<li><p>The C standard library already defines <code>M_PI</code> in <code>&lt;math.h&gt;</code>. So you could have just used that.</p></li>
<li><p>You only ever use <code>PI</code> as part of the expression <code>x * PI/180</code>. This looks a lot like "converting <code>x</code> to radians." That's a named operation in English; it should be a named function in your C program.</p>

<pre><code>#define PI 3.141592654
double to_radians(double degrees) {
    return degrees * PI / 180;
}
</code></pre></li>
</ul>

<p>Now you have only a single use of <code>PI</code> in your whole program, and so you don't save anything by giving it a name. Eliminate the macro:</p>

<pre><code>double to_radians(double degrees) {
    return degrees * (3.141592654 / 180.0);
}
</code></pre>

<p>I've also parenthesized the constant part in hopes that the constant-folder will do the arithmetic ahead of time. That might be unnecessary, but it certainly can't hurt anything.</p>

<hr>

<p>In general, your <code>main</code> function is much much too long. Figure out some logical way to split it up into functions. For example, you might say</p>

<pre><code>if (Opt == '1') {
    do_normal_maths_mode();
} else if (Opt == '2') {
    do_trigonometric_function_mode();
} else if (Opt == '3') {
    do_fibonacci_series_mode();
} else if (Opt == '4') {
    print_greeting_and_exit();
} else {
    printf("Wrong Option. Please retype your option correctly\n");
    Sleep(2450);
    system("cls");
}
</code></pre>

<p>Notice that I'm using a terminal <code>else</code> clause on my <code>if</code> — just like I would in Python! (although Python uses <code>elif</code> instead of <code>else if</code>) — so that any <code>Opt</code> other than 1, 2, 3, or 4 will drop into the <code>else</code> branch and print "Wrong Option." You don't have to test <code>(Opt != '1' &amp;&amp; Opt!= '2' &amp;&amp; Opt!= '3' &amp;&amp; Opt != '4')</code> manually.</p>

<p>C does provide a control-flow structure that Python doesn't: the <em>switch</em>. It would look like this:</p>

<pre><code>switch (Opt) {
    case '1':
        do_normal_maths_mode();
        break;
    case '2':
        do_trigonometric_function_mode();
        break;
    case '3':
        do_fibonacci_series_mode();
        break;
    case '4':
        print_greeting_and_exit();
        break;
    default:
        printf("Wrong Option. Please retype your option correctly\n");
        Sleep(2450);
        system("cls");
        break;
}
</code></pre>

<p>However, I wouldn't really recommend a <code>switch</code> in this case, because it's more lines of code and easier to mess up. (For example, you might accidentally forget one of those <code>break</code> statements.) Any mainstream compiler will generate equally efficient code for either version: the <code>if-else</code> chain or the <code>switch</code> statement.</p>

<hr>

<p>There's more that can be said, but I'll stop here. The big giant enormous issue is "you need to break your code up into functions."</p>
    </div>