<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A shorter form of Trevor's answer (but essentially doing the same thing):</p>

<pre><code>public static IEnumerable&lt;T&gt; Circle&lt;T&gt;(this IEnumerable&lt;T&gt; list, int startIndex)
{
    return list.Skip(startIndex).Concat(list.Take(startIndex));
}
</code></pre>

<p>This will still lazy evaluate just like Trevor's answer, because <code>Concat</code> lazily evaluates.</p>

<p>Further more, if you have written a method to <em>cycle</em> through an <code>IEnumerable</code>, why not call it <code>Cycle</code>?</p>

<p>Lastly, I'd actually recommend taking advantage of lazy evaluation to give you a more useful method. The one below will continue to cycle indefinitely, starting with an optional index:</p>

<pre><code>public static IEnumerable&lt;T&gt; Cycle&lt;T&gt;(this IEnumerable&lt;T&gt; list, int index = 0)
{

    var count = list.Count();
    index = index % count;

    while(true)
    {
        yield return list.ElementAt(index);
        index = (index + 1) % count;
    }
}
</code></pre>

<p>Then you can do something like:</p>

<pre><code>foreach(var num in Enumerable.Range(1, 10).Cycle(4).Take(30))
{
    Console.WriteLine(num.ToString());
}
</code></pre>

<p>And this lets you specify just how many repeated items you want.</p>
    </div>