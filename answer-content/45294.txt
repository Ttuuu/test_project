<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><code>n</code> is an unused variable.  Your compiler should have warned you about it (and you should compile with warnings enabled).</p>

<p>Declaring variables with <code>auto</code> and an unsigned integer literal is unconventional.  Just <code>int n1 = 999</code> would have been more readable.</p>

<p>Your for-loop is weird.  The three fields of a for-loop header should clearly state how the loop behaves.  Testing for <code>n1 &gt;= 100</code> while decrementing <code>n2</code>, then having a separate test for <code>n2 &lt; 100</code> that decrements <code>n1</code> and resets <code>n2</code> is a really convoluted way of writing a nested for-loop!</p>

<p>Since <code>n1</code> and <code>n2</code> are symmetric, you can cut the work in half by making the inner loop condition <code>n2 &gt;= n1</code> instead of <code>n2 &gt;= 100</code>.</p>

<p><code>palindrom()</code> would be better named <code>reverse()</code> or <code>reverse_digits()</code>.</p>

<p>Testing whether the product exceeds the largest palindrome so far is cheaper than testing whether the product is a palindrome, so do the cheaper test first.</p>

<pre><code>#include &lt;iostream&gt;
// You don't need &lt;math.h&gt;

int reverse(int num)
{
    int new_num = 0;
    while (num != 0)
    {
        int digit = num % 10;     // Move the declaration inside the loop
        new_num = new_num * 10 + digit;
        num /= 10;
    }
    return new_num;
}

int main()
{
    int largest = 0;
    for (int n1 = 999; n1 &gt;= 100; n1--)
    {
        for (int n2 = 999; n2 &gt;= n1; n2--)
        {
            int product = n1 * n2;
            if (product &gt; largest &amp;&amp; reverse(product) == product)
            {
                largest = product;
            }
        }
    }
    std::cout &lt;&lt; "Largest " &lt;&lt; largest &lt;&lt; std::endl;
    return 0;
}
</code></pre>
    </div>