<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The task here is to <em>collate</em> the list of cities according to a <em>key</em>. In this case the key can be <code>'a' in city</code>, which is <code>True</code> if the city contains <code>'a'</code> and <code>False</code> otherwise.</p>

<p>It's common to encounter processing tasks which require collation, for example to <a href="https://codereview.stackexchange.com/a/187465/11728">find words that are anagrams of each other</a> we could collate the words in a dictionary according to their sorted letters.</p>

<p>There is a standard pattern for collation in Python, which is to use <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="noreferrer"><code>collections.defaultdict</code></a> and a loop. In the cities case, it goes like this:</p>

<pre><code>from collections import defaultdict
with_a = defaultdict(list)
for city in cities:
    with_a['a' in city].append(city)
</code></pre>

<p>After running this loop, <code>with_a[True]</code> is the list of cities with <code>'a'</code> and <code>with_a[False]</code> is the list of cities without.</p>

<p>I prefer this approach to <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="noreferrer"><code>itertools.partition</code></a> because it iterates over the input just once (whereas <code>partition</code> iterates over the input twice), and it's clear how to generalize it to other kinds of key.</p>
    </div>