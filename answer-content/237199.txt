<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are some suggestions you can use to improve your code.</p>

<h1>Formatting</h1>

<p>Insert a space before a <code>{</code> that starts a compound statement and does not go on a separate line; e.g., instead of <code>int main(){</code>, write</p>

<pre><code>int main() {
</code></pre>

<p>or</p>

<pre><code>int main()
{
</code></pre>

<p>Place a space after a comma and after a control word (<code>while</code>, etc.):         <code>SendInput(1, &amp;input, sizeof(INPUT))</code> and <code>while (true) {</code>.</p>

<p>Place two spaces around the <code>=</code> operator.</p>

<p>The indentation level of the <code>leftClick</code> function should be reduced to 4 spaces to keep consistent with <code>main</code>.</p>

<h1>Naming</h1>

<p>In C++, functions are usually named in <code>snake_case</code> instead of <code>camelCase</code>.  This is subjective though.</p>

<h1>Standard library usage</h1>

<p>Please try to avoid <code>using namespace std;</code> because it is considered bad practice.  The contents of the C++ standard library are put in a special namespace to avoid polluting the global namespace and causing name clashes.  The <code>std</code> namespace is not intended for use with using directives (in general).  <code>using namespace std;</code> forces you to avoid standard names and invalidates the purpose of the <code>std</code> namespace.  See <a href="https://stackoverflow.com/q/1452721">Why is “using namespace std;” considered bad practice?</a>.</p>

<p><code>std::endl</code> is generally inferior to <code>\n</code>, but it is necessary in this case because of flushing requirements.  Good.</p>

<p>Currently, your code isn't clear in terms of unit of time.  Is the interval intended to be in seconds, milliseconds, or microseconds?  The standard <code>&lt;chrono&gt;</code> library solves this problem.  And instead of <code>Sleep</code>, use <code>std::this_thread::sleep_for</code> from <code>&lt;thread&gt;</code>, which plays well with <code>&lt;chrono&gt;</code>:</p>

<pre><code>using namespace std::chrono_literals;

std::cout &lt;&lt; "Place the cursor where you want to click ..." &lt;&lt; std::endl;
std::this_thread::sleep_for(7s); // NB: valid syntax!
</code></pre>

<p>Indicate your presumed unit of time:</p>

<pre><code>cout &lt;&lt; "Set the interval to click (ms): ";

int cinterval {0};
cin &gt;&gt; cinterval;

// ...
std::this_thread::sleep_for(std::chrono::milliseconds{cinterval});
</code></pre>
    </div>