<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A useful idea; thanks for sharing it with us.</p>
<h1>Limitations and bugs</h1>
<p>I have a nagging doubt about the implicit conversion to/from <code>value_type</code>.  There are cases where we could have unchecked arithmetic when we expected it to be checked.  For example, given:</p>
<pre><code>safe_int&lt;int&gt; i = std::numeric_limits&lt;int&gt;::max();
int j = i;
</code></pre>
<p>With the above, I find that <code>i + j</code> throws, but <code>j + i</code> continues with its undefined behaviour.  I think we'd prefer both expressions to throw.</p>
<p>I admit I was slightly surprised that the above didn't reach an ambiguous overload.  However, <code>long j = i</code> causes <code>i + j</code> to be ambiguous and <code>j + i</code> to be unchecked; that's no better IMO.</p>
<p>All in all, I think the safety would be greatly improved if we declare the conversion to unsafe with the <code>explicit</code> keyword:</p>
<pre><code>explicit operator value_type() const noexcept { return val; }
value_type value() const noexcept{ return val; }
</code></pre>
<p>The <code>value()</code> accessor is useful as it allows us to avoid numerous <code>static_cast</code> operators (which always need closer inspection).</p>
<hr>
<p>We're missing promotions from narrower <code>safe_int</code> types.  For example, this code ought to be valid, but isn't:</p>
<pre><code>safe_int&lt;int&gt; i = std::numeric_limits&lt;int&gt;::max();
safe_int&lt;long&gt; j = i;
</code></pre>
<p>We need some converting constructors such as these (I'll use Concepts syntax, as it's easier to read than lots of <code>std::enable_if</code> - adapt as necessary if that's not available to you):</p>
<pre><code>template&lt;typename T&gt;
      requires std::is_assignable_v&lt;value_type&amp;,T&gt;
safe_int(T t = {})
      noexcept(std::is_nothrow_assignable_v&lt;value_type&amp;,T&gt;)
    : val{t}
{}

template&lt;typename T&gt;
      requires std::is_assignable_v&lt;value_type&amp;,T&gt;
safe_int(safe_int&lt;T&gt; t)
      noexcept(std::is_nothrow_assignable_v&lt;value_type&amp;,T&gt;)
    : val{static_cast&lt;value_type&gt;(t)}
{}
</code></pre>
<p>We also need binary operations that promote to <code>safe_int</code> of the common type of the arguments (for <code>i+j</code> and <code>j+i</code> to both work); this is my quick attempt:</p>
<pre><code>template&lt;typename T, typename U&gt;
safe_int&lt;std::common_type_t&lt;T,U&gt;&gt; operator+(safe_int&lt;T&gt; a, safe_int&lt;U&gt; b)
{
    using V = std::common_type_t&lt;T,U&gt;;
    return safe_int&lt;V&gt;(std::move(a)) + safe_int&lt;V&gt;(std::move(b));
}

template&lt;typename T, typename U&gt;
    requires std::is_integral_v&lt;U&gt;
safe_int&lt;std::common_type_t&lt;T,U&gt;&gt; operator+(safe_int&lt;T&gt; a, U b)
{
    using V = std::common_type_t&lt;T,U&gt;;
    return safe_int&lt;V&gt;(std::move(a)) + safe_int&lt;V&gt;(b);
}

template&lt;typename T, typename U&gt;
    requires std::is_integral_v&lt;U&gt;
safe_int&lt;std::common_type_t&lt;T,U&gt;&gt; operator+(U a, safe_int&lt;T&gt; b)
{
    return std::b + a;
}
</code></pre>
<hr>
<h1>Style</h1>
<p>This seems old-fashioned:</p>
<blockquote>
<pre><code>typedef I value_type;
</code></pre>
</blockquote>
<p>Modern C++ authors prefer <code>using</code>:</p>
<pre><code>using value_type = I;
</code></pre>
<p>Instead of <code>static_cast</code> of arguments to the assignment operators, just use the <code>val</code> member directly:</p>
<pre><code>safe_int &amp;operator+=(safe_int rhs)
{
    return *this += rhs.val;
}
</code></pre>
<p>There's a stray <code>;</code> after the converting constructor.</p>
    </div>