<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>One way to speed this up is to use a package designed for numerical evaluation, <a href="https://numpy.org/" rel="nofollow noreferrer"><code>numpy</code></a>. It is implemented in C and can take advantage of multiple cores if necessary. The only limitation is that you can only create arrays that fit into memory. At least on my machine (16GB RAM) your current values fit easily, though (if each integer takes 64 bytes, then I could store over 250 million of them).</p>

<p>Another limitation is that you are limited to long long integers (64 bytes on my machine), so you will have to adapt your upper ceiling for the numbers to that. The largest value being produced by this code is <code>s * (s - a) * (s - b) * (s - c)</code>, so this needs to fit even if all of <code>a</code>, <code>b</code> and <code>c</code> are the maximum value. There is a programmatic way to get the size, so we can figure out what it is. Unfortunately, this formula has basically a <span class="math-container">\$n^4\$</span> in it, so the maximum value is quite small. On my machine I can generate values of up to just 83748 this way. Although practically this is probably not relevant, since the likelihood that you generate a larger number like that is very small (case in point, I had previsously assumed <code>a * b * c /2</code> would be the largest value, but I still found 100% matching the inequality). The only problem with this is that if you <em>do</em> get a larger value, you get an overflow, the next number after the largest integer is the smallest integer, so you get negative numbers under the square root. But <code>numpy</code> will tell you about that with a warning, if it happens.</p>

<p>Here is a straight-forward implementation of your code using <code>numpy</code>. I did not make any effort to speed it up in addition, the only real difference is the value of <code>limit</code> and that I moved the factor 2 in the inequality to the other side (so I can make the limit a factor two larger).</p>

<pre><code>import numpy as np

#limit = 100000000
max_int = np.iinfo(np.longlong).max
limit = int((16./3 * max_int) ** (1./4)) + 1   # 83748 with np.int64
max_tries = 10000000

a, b, c = np.random.randint(1, limit, size=(3, max_tries), dtype=np.longlong)
mask = (a + b &gt; c) &amp; (a + c &gt; b) &amp; (b + c &gt; a)
a, b, c = a[mask], b[mask], c[mask]
s = (a + b + c) / 2
k = np.sqrt(s * (s - a) * (s - b) * (s - c))
inequality_true = a / 2 * b * c &gt; k

print(inequality_true.sum() / len(inequality_true))
</code></pre>

<p>This script runs in about 1.1s on my machine. Your code (with the same limit for the random numbers) takes about 83s.</p>

<hr>

<p>In addition to speeding up your code, you should also try to make it more readable. Python has an official style-guide, <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP8</a>. It recommends using spaces around the <code>=</code> when doing assignments and around binary operators (like <code>+</code> and <code>*</code>). In addition, try to use clear variable names (<code>hn</code> tells me nothing about what it is for) and put your main calling code under a <a href="http://stackoverflow.com/questions/419163/what-does-if-name-main-do"><code>if __name__ == "__main__":</code> guard</a> if you want to be able to import from a script without everything running.</p>
    </div>