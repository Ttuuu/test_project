<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Welcome to the Haskell programming world. Strap in, it's going to be a ride. </p>

<h1>Case study: <code>getVideoBy*</code></h1>

<p>Your functions <code>getVideoByIndex</code> and <code>getVideoByName</code> provide a great case study for improvement. At the moment, both functions look <em>very</em> similar. This brings us to our first principle.</p>

<h2>Don't repeat yourself</h2>

<p>Both functions work the same we apply <code>filter</code> and then <code>head</code> on the resulting list. We can extract that function into a single one:</p>

<pre><code>find :: (a -&gt; Bool) -&gt; [a] -&gt; Maybe a
find p xs = 
    if length v &gt; 0 
        then Just (head v)
        else Nothing
    where v = filter p xs

-- | not used yet
getVideoByIndex :: [Video] -&gt; Integer -&gt; Maybe Video
getVideoByIndex files i = find (\v -&gt; index v == i) files

-- | not used yet
getVideoByName :: [Video] -&gt; String -&gt; Maybe Video
getVideoByName files s = find (\ v -&gt; isInfixOf (map toLower s) (map toLower $ takeBaseName $ path v)) files
</code></pre>

<p>Any improvement on <code>find</code> will now improve both functions at once.</p>

<h2>Use <code>null</code> instead of <code>length</code> to check whether a list is empty</h2>

<p>Next, we see that you check <code>length v</code>. That's suboptimal, since <code>length</code> is \$\mathcal O(n)\$. Also, it will fail on infinite lists, e.g. <code>length [1..] &gt; 0</code> will never quit.</p>

<p>Instead, we use <code>null</code>, which is \$\mathcal O(1)\$:</p>

<pre><code>find :: (a -&gt; Bool) -&gt; [a] -&gt; Maybe a
find p xs = 
    if null v
        then Nothing
        else Just (head v)
    where v = filter p xs
</code></pre>

<h2>Use pattern matching if you're going to use the head</h2>

<p>But what happens if we accidentally write the following?</p>

<pre><code>find :: (a -&gt; Bool) -&gt; [a] -&gt; Maybe a
find p xs = 
    if null v
        then Just (head v)
        else Nothing
    where v = filter p xs
</code></pre>

<p>Well, that's a bug. We use <code>head</code> on an empty list. Ouch. We can completely remove this kind of error if we use pattern matching instead:</p>

<pre><code>find :: (a -&gt; Bool) -&gt; [a] -&gt; Maybe a
find p xs = 
    case filter p xs of
        (x:_) -&gt; Just x
        _     -&gt; Nothing
</code></pre>

<h2>Know thy standard library</h2>

<p>The function <code>find</code> actually exists. It's exported by <code>Data.List</code>. We <a href="https://www.haskell.org/hoogle/?hoogle=%28a%20-%3E%20Bool%29%20-%3E%20%5Ba%5D%20-%3E%20Maybe%20a" rel="nofollow noreferrer">can find it easily with Hoogle</a>.</p>

<h2>Use collections as <em>last</em> argument</h2>

<p>Here are some functions that use a collection as an argument:</p>

<pre><code>foldl  :: (a -&gt; b -&gt; a) -&gt; a -&gt; [b] -&gt; a
foldr  :: (a -&gt; b -&gt; b) -&gt; b -&gt; [a] -&gt; b
filter :: (a -&gt; Bool)   -&gt;      [a] -&gt; Maybe a
map    :: (a -&gt; b)      -&gt;      [a] -&gt; [b]
delete :: Eq a =&gt; a     -&gt;      [a] -&gt; [a]
lookup :: Eq a =&gt; a     -&gt;  [(a,b)] -&gt; Maybe b
</code></pre>

<p>All those functions use the list as the last argument because it enables currying. We should do the same for <code>getVideosBy*</code>:</p>

<pre><code>import Data.List (find, isInfixOf)

-- | not used yet
getVideoByIndex :: Integer -&gt; [Video] -&gt; Maybe Video
getVideoByIndex i = find (\v -&gt; index v == i)

-- | not used yet
getVideoByName :: String -&gt; [Video] -&gt; Maybe Video
getVideoByName s = find (\v -&gt; (map toLower s) `isInfixOf` (map toLower $ takeBaseName $ path v))
</code></pre>

<h1>Further remarks</h1>

<p>I'm not going to apply the remarks above to the rest of the code, that's left as an exercise. Make sure to check the functions in the <a href="http://hackage.haskell.org/packages/archive/base/latest/doc/html/Prelude.html" rel="nofollow noreferrer"><code>Prelude</code></a>, for example <code>getVideos</code> can be written as</p>

<pre><code>-- | Creates Video objects with indexes
getVideos :: [FilePath] -&gt; [Video]
getVideos list = zipWith Video [1..] list
-- or
getVideos = zipWith Video [1..]
</code></pre>

<h1>Your questions</h1>

<h2>Little functions</h2>

<blockquote>
  <p>I have all those little functions, which do one specific task and call each other to achieve the end goal. This makes it very hard to read the code if one is not familiar with it.</p>
</blockquote>

<p>That's part of Haskell. However, as you can see, <code>getVideoBy</code> is already in the standard library. If you use a function only once, it's sometimes better to inline them, e.g.</p>

<pre><code>-- | Bundles the videos in a specific directory in a Directory type.
getDirectory :: [Video] -&gt; String -&gt; Directory
getDirectory videos name = Directory name $ filter (\ v -&gt; (bottomFolder $ path v) == name) videos
</code></pre>

<p>Alternatively, you can use a local binding to keep the name:</p>

<pre><code>-- | Bundles the videos in a specific directory in a Directory type.
getDirectory :: [Video] -&gt; String -&gt; Directory
getDirectory videos name = Directory name (getVideosInDirectory videos name)
  where
    getVideosInDirectory videos name = filter (\ v -&gt; (bottomFolder $ path v) == name) videos
</code></pre>

<p>Now that we have a local binding, we don't even have to supply the arguments:</p>

<pre><code>-- | Bundles the videos in a specific directory in a Directory type.
getDirectory :: [Video] -&gt; String -&gt; Directory
getDirectory videos name = Directory name videosInDirectory
  where
    videosInDirectory = filter (\ v -&gt; (bottomFolder $ path v) == name) videos
</code></pre>

<p>If we want to keep both functions, they get easier to apply and read if we change the argument order (see "Use collections as last argument" above):</p>

<pre><code>-- | Bundles the videos in a specific directory in a Directory type.
getDirectory :: String -&gt; [Video] -&gt; Directory
getDirectory name videos  = Directory name (getVideosInDirectory name videos)

getVideosInDirectory :: String -&gt; [Video] -&gt; [Video] 
getVideosInDirectory name videos = filter (\ v -&gt; (bottomFolder $ path v) == name) videos
</code></pre>

<p>which, as we saw in "Use collections as last argument", can get simplified to</p>

<pre><code>getDirectory :: String -&gt; [Video] -&gt; Directory
getDirectory name = Directory name . getVideosInDirectory name

getVideosInDirectory :: String -&gt; [Video] -&gt; [Video] 
getVideosInDirectory name = filter (\ v -&gt; (bottomFolder $ path v) == name)
</code></pre>

<h2><code>unlines . map show</code></h2>

<blockquote>
  <p>It's nice that I can describe how a custom type should Show itself when printed. But because I'm dealing with lists, I then have to <code>unlines $ map show</code> it, which is not pretty.</p>
</blockquote>

<p>You could use</p>

<pre><code>mapM_ print lib
</code></pre>

<p>The default <code>Show</code> class is very basic. There is actually only one requirement for <code>Show</code> and <code>Read</code>: any type that derives both automatically has <code>read (show x) == x</code>. If you want to provide pretty formatting, a custom typeclass</p>

<pre><code>class Pretty a where
    pretty :: a -&gt; String
</code></pre>

<p>can give you more control. Alternatively, <a href="https://ideone.com/LScCEm" rel="nofollow noreferrer">add a <code>newtype</code> around the list, e.g.</a></p>

<pre><code>newtype WithNewlines t a = WithNewlines { unWithNewLines :: t a }

instance (Show a, Foldable t) =&gt; Show (WithNewlines t a) where
  show = unlines . concatMap (pure . show) . unWithNewLines
</code></pre>

<p>and then use</p>

<pre><code>putStrLn $ WithNewLines lib
</code></pre>

<p>but that's also more or less arcane.</p>
    </div>