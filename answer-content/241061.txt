<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You can get the same results a little more directly.</p>

<pre><code>def cumulativeTokenise(string: String): Array[String] =
  string.split("\\s+")
        .inits
        .map(_.mkString(" "))
        .toArray
        .reverse
        .tail
</code></pre>

<p>Or a, perhaps simpler, two step procedure.</p>

<pre><code>def cumulativeTokenise(string: String): Array[String] = {
  val tokens = string.split("\\s+")
  Array.tabulate(tokens.length)(n =&gt; tokens.take(n+1).mkString(" "))
}
</code></pre>

<p>One problem I see here is that you rely on whitespace to separate tokens. That might not always be the case.</p>

<pre><code>def cumulativeTokenise(string: String): Array[String] =
  string.split("((?=\\W)|(?&lt;=\\W))")
        .filter(_.trim.nonEmpty)
        .inits
        .map(_.mkString(" "))
        .toArray
        .reverse
        .tail

cumulativeTokenise("here@there")
//res0: Array[String] = Array(here, here @, here @ there)
</code></pre>

<p>Probably not the best solution to the problem, but it's something to think about.</p>
    </div>