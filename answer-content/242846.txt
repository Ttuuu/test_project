<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are a few ways that <code>struct</code> types, and restructuring in general, could clean up your code.</p>

<h1>Stack Overflow</h1>

<p>First, I'll point out that your code is infinitely mutually recursive. If a player <em>goes</em> from the kitchen to the hall and back again, over and over, the stack will overflow.</p>

<p>As such, you should first concentrate on eliminating this recursion. Understand why you felt the need to encode it, and move that reason into some kind of data structure that is independent of the stack.</p>

<h1>The three most important things in real estate:</h1>

<p>Your various <code>loc_</code> functions seem to have a similar structure. First they set a location string, then they mostly print a static message (with one exception), then they maybe print some extra text depending on the player's inventory or past actions.</p>

<p>Some of the locations then enter a nested command loop, but that should be addressed above.</p>

<p>So if you had a data structure that encoded those data items, you could process all the <code>loc_</code> code with a single function. Something like:</p>

<pre><code>typedef struct LOCATION {
    const char * name;
    const char * enter_msg;
    struct CONDITIONAL_MESSAGE {
        int    item_id;
        const char * per_item_msg;
    } * conditional_messages;
} LOCATION;
</code></pre>

<p>If your maze grows to require it, you might include a function pointer for really complex rooms. Also, you might want to have a "first time" entry message and a "every other time" entry message, so the game doesn't get too verbose.</p>

<h1>Sic transit gloria mundi!</h1>

<p>English verbs are divided between <em><a href="https://en.wikipedia.org/wiki/Transitive_verb" rel="nofollow noreferrer">transitive</a></em> and <em><a href="https://en.wikipedia.org/wiki/Intransitive_verb" rel="nofollow noreferrer">intransitive</a></em> forms. Transitive verbs take an <em><a href="https://en.wikipedia.org/wiki/Object_(grammar)" rel="nofollow noreferrer">object</a></em> while intransitive verbs do not.</p>

<p>An example of an intransitive verb would be "quit" -- the command you should always implement first. A transitive verb would be something like "go kitchen" or "read note".</p>

<p>Most of your verbs are transitive, which is fine. But the transitive verbs have a very similar structure when you process them:</p>

<pre><code>1. Was there an object specified? If not, snark.
2. Is the object valid for this verb? If so, do something.
3. If not, snark.
</code></pre>

<p>So that leads to the suggestion that you move as much of this structure as possible into your parsing engine, and clean up the rest of your code. </p>

<pre><code>struct VERB {
    unsigned flags;
    const char * word;
    const char * no_object_msg;
    const char * bogus_object_msg;
    // maybe a helper function?
};
</code></pre>

<h1>Lots and lots of lists and lists</h1>

<p>When thinking about transitive verbs, there are three obvious sources for objects. First, there is the map itself. The various "go XXX" commands will change based on where a player is standing. So it makes sense for there to be a list of rooms that is currently reachable.</p>

<p>The "take" verb, and the "open" verb, both suggest that there should be a list of items in the room. Some of those items are take-able, like the gun or the ammo. If taken, these items will leave the room and move into the player's inventory. Other items are permanently in the room, like a door or the fridge. You can still open them, but cannot have them in inventory. (A bit flag would be sensible for this. CAN_TAKE, CAN_OPEN, etc.)</p>

<p>Finally, there are the items in the player's inventory. These items will "always" be available, regardless of what room the player is in. You have used global variables for this, which IMO is a mistake. Better to create an array or a list.</p>

<p>Once you have all these lists figured out, you can search them for verb-objects. If the player enters, "take gun", it makes sense to check her inventory for the gun and print "you already have that", then check the room inventory for a gun that is take-able.</p>

<p>Hope this helps.</p>
    </div>