<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Guard conditions</h3>

<p><code>ArgumentNullException</code> is typically thrown on incorrect usage of the API. It is not an end-user exception, so I would not bother with an exception message.</p>

<blockquote>
  <p><code>throw new ArgumentNullException("A string is required");</code></p>
</blockquote>

<pre><code>throw new ArgumentNullException(nameof(s)); // perhaps rename 's' to 'input' or 'value'
</code></pre>

<p>For the <code>ArgumentException</code> instances you throw, I would also add the <code>nameof(parameterName)</code> to the constructor. A decent error message is relevant here, so keep the message.</p>

<p>You have a guard on whitespace. I don't see this in the spec. Is this a requirement? If not, allow white space as either an open or close bracket.</p>

<blockquote>
  <p><code>if (char.IsWhiteSpace(open) || char.IsWhiteSpace(close))</code></p>
</blockquote>

<p>The next guard checks on duplicate registrations. An alternative policy is to ignore a registration if already registered. This depends on whether you want your API to be error-prone or act as a sandbox for consumers.</p>

<blockquote>
  <p><code>if (openBrackets.Contains(open) || openBrackets.Contains(close))</code></p>
</blockquote>

<p>I'm missing a guard condition. I doubt <code>open</code> and <code>close</code> can be the same.</p>

<pre><code>if (open == close)  // throw ..
</code></pre>

<h3>Readability</h3>

<p>You could substitute some <code>if</code> statements with a ternary operator.</p>

<pre><code>s = s ?? throw new ArgumentNullException(nameof(s));
validator = validator ?? BracketValidator.CreateDefaultValidator();
</code></pre>

<p>Redundant type declarations can be replaced by <code>var</code>. Unlike javascript, <code>var</code> is ok in C#.</p>

<blockquote>
  <p><code>Stack&lt;char&gt; openStack = new Stack&lt;char&gt;();</code></p>
</blockquote>

<pre><code>var openStack = new Stack&lt;char&gt;();
</code></pre>
    </div>