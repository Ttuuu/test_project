<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If you had ran simulation or loaded onto FPGA, you would noticed you didn't get the expected behavior. Run simulation and look at waveforms before loading to FPGA.</p>

<p>You have <code>hcnt &lt;= hcnt + 1;</code> at the bottom of your always block, this will override <code>hcnt &lt;= 0;</code> which is not what you want. <code>&lt;=</code> is a non-blocking assignment which means it will be evaluated immediately but the value will not be updated until the end of the timestep. Order matters.</p>

<p>The simplest solution is to move <code>hcnt &lt;= hcnt + 1;</code> above the case statement.</p>

<p>Be aware that your <code>hcnt</code> are counting from 0 to 800 which is 801 clocks. You may want to consider subtracting 1 from each case condition or initiating/resetting <code>hcnt</code> (and <code>vcnt</code>) as 1 instead of 0.</p>

<p>Your <code>vcnt</code> will only be 525 for one clock, which don't look intentional. Consider moving it inside the <code>case(hcnt)</code>'s condition 800.</p>

<p>I will recommend adding a reset input. And also recommend using an ANSI header Non-ANSI is required for Verilog-95 and pre IEEE1364. Since Verilog-2001, ANSI style is preferred mostly because it reduces the amount of typing.</p>

<p>Below is my suggestion. Note I haven't tested that all functional requirements are met (that should be done in your testbench).</p>

<pre><code>module sync (
  input clk, rst_n,                       // &lt;-- ANSI header
  output reg hblank, hsync, vblank, vsync
);
  reg [9:0] hcnt, vcnt;

  always @(posedge clk) begin
    if (!rst_n) begin // &lt;-- synchronous reset logic
      hblank &lt;= 1'b0;
      hsync &lt;= 1'b1;
      vblank &lt;= 1'b0;
      vsync &lt;= 1'b1;
      hcnt &lt;= 10'h001;  // &lt;-- init as 1 so case index doesn't need to change
      vcnt &lt;= 10'h001;  // &lt;-- same as vcnt
    end
    else begin
      hcnt &lt;= hcnt + 10'h001; // &lt;-- default assignment, will be updated after the clock
      case (hcnt) // &lt;-- uses the sampled value, not the result of the above line
        10'd640: hblank &lt;= 1'b1;
        10'd656: hsync &lt;= 1'b0;
        10'd752: hsync &lt;= 1'b1;
        10'd800: begin
          hblank &lt;= 1'b0;
          hcnt &lt;= 10'h001; // &lt;-- reset as 1, last assignment wins
          vcnt &lt;= vcnt + 10'h001;
          case (vcnt)
            10'd480: vblank &lt;= 1'b1;
            10'd490: vsync &lt;= 1'b0;
            10'd492: vsync &lt;= 1'b1;
            10'd525: begin
              vblank &lt;= 1'b0;
              vcnt &lt;= 10'h001; // &lt;-- reset as 1, last assignment wins
            end
          endcase
        end
      endcase
    end
  end
endmodule
</code></pre>

<p>You may want to consider using the 2-alway block coding style. It does require more lines of code small designs (usually reduces lines of code for large/complex desings). The main benefit is you can access to the present state and next state of a flop.</p>

<pre><code>// sequential logic (uses non-blocking assignment and is synchronous)
always @(posedge clk) begin
  if (!rst_n) begin
    hblank &lt;= 1'b0;
    hsync &lt;= 1'b1;
    vblank &lt;= 1'b0;
    vsync &lt;= 1'b1;
    hcnt &lt;= 10'h001;
    vcnt &lt;= 10'h001;
  end
  else begin
    hblank &lt;= next_hblank;
    hsync &lt;= next_hsync;
    vblank &lt;= next_vblank;
    vsync &lt;= next_vsync;
    hcnt &lt;= next_hcnt;
    vcnt &lt;= next_vcnt;
  end
end

// combinational logic (uses blocking assignment and is asynchronous)
always @* begin
  next_hblank = hblank; // &lt;-- default keep previous
  next_hsync = hsync;
  next_vblank = vblank;
  next_vsync = vsync;
  next_hcnt = hcnt + 10'h001; // &lt;-- default increment
  next_vcnt = vcnt;

  // calc next values, update as needed
  case (hcnt)
    10'd640: next_hblank = 1'b1;
    10'd656: next_hsync = 1'b0;
    10'd752: next_hsync = 1'b1;
    10'd800: begin
      next_hblank = 1'b0;
      next_hcnt = 10'h001;
      next_vcnt = vcnt + 10'h001;
      case (vcnt)
        10'd480: next_vblank = 1'b1;
        10'd490: next_vsync = 1'b0;
        10'd492: next_vsync = 1'b1;
        10'd525: begin
          next_vblank = 1'b0;
          next_vcnt = 10'h001;
        end
      endcase
    end
  endcase
end
</code></pre>
    </div>