<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Quoting <a href="https://en.wikipedia.org/wiki/Factorial" rel="nofollow noreferrer">Wikipedia</a>:</p>

<blockquote>
  <p>In mathematics, the factorial of a <strong>non-negative integer</strong> n, denoted by n!, is the product of all positive integers less than or equal to n. </p>
</blockquote>

<p>So, you can use an '<em>unsigned</em>' to don't have to deal with negative number.</p>

<p>Taking a '<em>ulong</em>' you can calculate factorial until 20 (instead of 12 with a '<em>int</em>' in your implementation).
If you want a larger range, try returning a '<em>decimal</em>' or deal with '<em>BigInteger</em>' from '<em>System.Numerics</em>'.</p>

<blockquote>
  <p>The value of <strong>0! is 1</strong>, according to the convention for an empty product.</p>
</blockquote>

<p>You need catching this special case (what you dont), and set returning value according.</p>

<p>Now, we have to make the product of all numbers less than N:</p>

<blockquote>
  <p>n! = 1 * 2 * 3 * ... * (n-2) * (n-1) * n</p>
</blockquote>

<p>We can reverse order, multiplication being commutative:</p>

<blockquote>
  <p>n! = n * (n-1) * (n-2) * ... * 3 * 2 * 1</p>
</blockquote>

<p>or since *n * 1 = n*, we can reduce:</p>

<blockquote>
  <p>n! = n * (n-1) * (n-2) * ... * 3 * 2</p>
</blockquote>

<p>or another notation:</p>

<blockquote>
  <p>n! = n * (n-1) * (n-2) * ... * (n-n+2)</p>
</blockquote>

<hr>

<p>Resulting to:</p>

<pre><code>static ulong factorial(ulong n)
{
    ulong result = (n &gt; 0) ? n : 1;
    while (n &gt; 1) result *= n--;
    return result;
}
</code></pre>
    </div>