<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I see some things that may help you improve your code.</p>

<h2>Prefer <code>class</code> to <code>struct</code></h2>

<p>The way it's currently defined, any code can modify the contents of the structure.  Better would be to make the data members private and provide necessary accessors to assure that the class is always complete and coherent.</p>

<h2>Don't use parallel structures</h2>

<p>Right now, the tag attributes and tag contents are stored in parallel vectors. The only association between an attribute and its value is that they have the same position within both vectors.  Instead, use a <code>std::pair</code> and create a vector of those.  That way, each attribute is a single entity.  We can replace the two vectors with this one:</p>

<pre><code>std::vector&lt;std::pair&lt;std::string,std::string&gt;&gt; attributes;
</code></pre>

<h2>Use "range-for" to simplify code</h2>

<p>C++11 and newer allow the use of "range-for" which can really simplify code.  For instance, the current code has this loop:</p>

<pre><code>unsigned int i2;
for(i2 = 0; i2 &lt; myHTML.tagattrcontent.size(); i2++) {
    std::cout &lt;&lt; myHTML.tagattrcontent[i2] &lt;&lt; ":" &lt;&lt; myHTML.attributes[i2] &lt;&lt; std::endl;
}
</code></pre>

<p>If we follow the previous point and have a single <code>attributes</code> vector instead, we can rewrite this as:</p>

<pre><code>for (const auto &amp;attr : myHTML.attributes) {
    std::cout &lt;&lt; attr.first &lt;&lt; ":" &lt;&lt; attr.second &lt;&lt; std::endl;
}
</code></pre>

<h2>Use <code>const</code> where practical</h2>

<p>In the <code>returnTag</code> routine, the underlying <code>HtmlTag</code> is not altered.  Make this explicit by declaring that method <code>const</code>:</p>

<pre><code>std::string returnTag() const {
</code></pre>

<h2>Think of the user</h2>

<p>As a user of this code, I think I'd prefer to remove an attribute by name rather than by position.  It's also not clear that returning the new count of attributes would be useful if the caller already has to keep track of the indexing.</p>

<h2>Provide a constructor</h2>

<p>It seems to me that it would be nice to be able to write code like this:</p>

<pre><code>HtmlTag myHTML{"foo","bar",{{"spam","eggs"}}};
</code></pre>

<p>We can do that by providing the appropriate constructor.  In this case, it's actually quite simple:</p>

<pre><code>HtmlTag(std::string name, std::string content, std::vector&lt;std::pair&lt;std::string,std::string&gt;&gt; attr) :
    tagname{name},
    tagcontent{content},
    attributes{attr}
{}
</code></pre>

<p>Note that I'm assuming the attributes are now pairs as previously suggested.</p>

<h2>Use your own code</h2>

<p>Why doesn't the <code>generateHTML</code> code use any <code>HtmlTag</code>s?  Here's a way it could be rewritten to do so:</p>

<pre><code>std::string generateHTML(std::string doctype, std::string headtext, std::string bodytext) {
    HtmlTag body{"body",bodytext};
    HtmlTag head{"head",headtext};
    HtmlTag html{"html",head.returnTag()+body.returnTag()};
    return "&lt;!DOCTYPE " + doctype + " /&gt;\n\n" + html.returnTag();
}
</code></pre>

<p>If that's not the way you'd like to write the code, it may suggest some improvements that might be made to the <code>HtmlTag</code> class.</p>
    </div>