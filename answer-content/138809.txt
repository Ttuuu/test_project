<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Within your models, you have a few fields that you might be able to improve.</p>

<ul>
<li><p>You should be using a <code>CharField</code> for anything that shouldn't accept line breaks.</p>

<p>You are using a <code>TextField</code> in combination with a <code>URLValidator</code> a few times. A <code>TextField</code> is designed to be for things which do not have a maximum length, usually things like descriptions. A <code>CharField</code> is better for things which can usually fit into a defined length, like most restaurant URLs.</p></li>
<li><p>Django has a <a href="https://docs.djangoproject.com/en/1.10/ref/models/fields/#urlfield" rel="nofollow"><code>URLField</code></a> for storing and validating a single URL, which you probably want.</p>

<p>It sets the URL validators automatically, and it also handles the custom form field for entering URLs.</p></li>
<li><p>Your <code>Restaurant.user</code> field may be better named <code>Restaurant.owner</code>, assuming that's who you were pointing to.</p>

<p>Having clear field names helps later when you are looking at the code, so you can know for sure what user is supposed to be referenced by that field.</p></li>
<li><p>You don't need to repeat your model name in front of field names (looking at <code>Restaurant.restaurant_name</code> and <code>Restaurant.restaurant_email</code>)</p>

<p>This can actually cause issues if you don't do this consistently, which you don't appear to be. In your case, you actually have both the <code>Restaurant.email</code> and <code>Restaurant.restaurant_email</code> fields, and I have no idea what the difference is.</p></li>
<li><p>Twitter handles can be a <a href="https://support.twitter.com/articles/14609" rel="nofollow">maximum of 15 characters</a></p>

<p>Your model has a <code>twitter_handle</code> field right now which can handle 80 characters, which is 65 more than you really need. It's always good to research constraints of your system, so you can better architect everything.</p></li>
</ul>

<p>Additionally, you are using Django's Model Meta options, which is good, but a few can safely be removed.</p>

<ul>
<li><p>Don't set the <code>verbose_name</code> if it's the same as the model name.</p>

<p>By default, Django will generate a <code>verbose_name</code> which is the same as your model name. It's used in quite a few places (Django admin, forms, etc.), and usually it gets it right. The one exception is the plural form, which is where most people override <code>verbose_name_plural</code> for things ending in 'y'.</p></li>
<li><p>Setting <code>index_together</code> instead of waiting.</p>

<p>There are usually fields where it Just Makes Senseâ„¢ to add an index to them, like a slug which will be referenced in a URL. But I suspect you may not need to set a combined index on your slug and your primary key, and I'd recommend waiting to see how your performance is.</p></li>
</ul>
    </div>