<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First, interesting code!</p>

<p>I agree with most of what @CacahueteFrito wrote in his review except for the <code>#pragma once</code> item. The method you are using is more portable. I sometimes use <code>#pragma once</code> when the editor defaults to it on windows (Visual Studio), but not for C++.</p>

<p>I will primarily address style.</p>

<p><strong>Code Consistency</strong><br>
The code is consistently indented, which is great, but the use of braces (<code>{</code> and <code>}</code>) in if statements is inconsistent. There are many places where braces are used around a single statement, but there are many places where braces aren't used around a single statement. It is more readable and maintainable when the code is consistent. Braces around a single statement are a good practice because quite often a new line of code needs to be inserted during maintenance.</p>

<p><strong>Always Test the Return Value of Memory Allocation Functions</strong><br>
In most of the cases where memory is allocated the code is testing the return value, however, in the function <code>MOVE_DATA return_all_moves(BOARD_STATE* plegal_board_state, char ignore_check)</code> there is a call to <code>malloc(size_t size)</code> that is not tested. The function <code>malloc()</code> may also return NULL if there is not enough memory.</p>

<p>It might be better if the code was </p>

<pre><code>char **tmp = malloc(move_data.array_size * sizeof(*p));
if (tmp) {
    move_data.moves = tmp;
}
else {
    // needs to be defined
}
</code></pre>

<p>because only the type of tmp needs to change if the type of <code>move_data.moves</code> is changed. This would be true for all the memory allocation performed in the program.</p>

<p><strong>Casting Malloc</strong><br>
In modern C the functions <code>malloc()</code>, <code>calloc()</code> and <code>realloc()</code> return <code>void *</code>. It is not necessary to cast the memory returned by these statement to the proper type.</p>

<p><strong>Readability</strong><br>
The code would be easier to read if there were some blank lines between blocks of code, such as after variable declarations at the top of the function, after a <code>if then else</code> block, after each of the cases in the switch statement.</p>

<p><strong>Function Complexity</strong><br>
The function <code>char store_all_moves_of_rock(char copy_board[8][8], char from_x, char from_y, MOVE_DATA* move_info, char color)</code> is very complex and could be broken up into at least 4 sub functions, <code>up</code>, <code>down</code>, <code>left</code> and <code>right</code>. This function is probably misnamed, I believe is should be <code>all_moves_of_rook</code> rather than rock.</p>
    </div>