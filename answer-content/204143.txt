<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Let me add something that no one else seems to have mentioned before.  You should not be using public fields, unless its a constant or readonly, but instead should use public properties.  Consider the <code>Card</code> class for example, but you are guilty with your other classes.</p>

<pre><code>class Card
{
    public Suit suit;
    public Face face;

    public void PrintCard()
    {
        Console.Write("{0} of {1}", face, suit);
    }
}
</code></pre>

<p>I would want to see:</p>

<ul>
<li>explicit access modifier</li>
<li>readonly properties instead of fields</li>
<li>Property names should be PascalCased.</li>
<li>method name <code>PrintCard</code> could be simplified to be <code>Print</code> but really
could be <code>ToString</code> or a <code>Name</code> property.</li>
</ul>

<p>So that would be rewritten as:</p>

<pre><code>public class Card
{
    public Suit Suit { get; }
    public Face Face { get; }

    public Card(Face face, Suit suit)
    {
        Face = face;
        Suit = suit; 
    }

    public string Name =&gt; $"{Face}{Suit}";
    public override string ToString() =&gt; Name;
}
</code></pre>

<p>You don't need to populate them based on magic numbers or the deck size. Rather set them directly.  Example:</p>

<pre><code>public void GenerateDeck()
{
    CurrentlyInDeck = new List&lt;Card&gt;();  // Not concerned with count.
    var suits = Enum.GetValues(typeof(Suit)).Cast&lt;Suit&gt;().ToList();
    var faces = Enum.GetValues(typeof(Face)).Cast&lt;Face&gt;().ToList();
    foreach (var suit in suits)
    {
        foreach (var face in faces)
        {
            CurrentlyInDeck.Add(new Card(face, suit));
        }
    }
}
</code></pre>
    </div>