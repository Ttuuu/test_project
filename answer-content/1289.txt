<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Two things: <strong>1)</strong> Extract <code>GetCompasDirection</code> as a separate method which will return an enum <strong>2)</strong> Create a collection of angles and corresponding headers to remove a lot of <code>Is...Heading</code> methods:  </p>

<pre><code>public enum CompasDirection
{
    North,
    NorthEast,
    // other directions
}

public CompasDirection GetCompasDirection(int heading)
{
    // directions in clock-wise order:
    var directionUpperLimitAngles = new [] {
         Tuple.Create(CompasDirection.North, 22),
         Tuple.Create(CompasDirection.NorthEast, 67),
         Tuple.Create(CompasDirection.East, 112),
         // other directions,
         Tuple.Create(CompasDirection.North, 360), // north again
    };

    return directionUpperLimitAngles.Last(d =&gt; d.Item2 &lt;= heading).Item1;
}

public string GetHeadingImage(string imageName, int heading)
{
    var directionToIconSuffixMapping = new Dictionary&lt;CompasDirection, string&gt; {
        { CompasDirection.North, "n"},
        { CompasDirection.NorthEast, "ne"},
        // other directions
    };
    var direction = GetCompasDirection(heading);
    return iconName + directionToIconSuffixMapping[direction] + ICON_FILE_EXTENTION;
}
</code></pre>

<p>Some parts here can be simplify (for example you can remove second dictionary and simply name your icon files correspondingly to enum members).  </p>

<p>This approach with direction-heading table if I remember correctly I've taken from McConnel's <code>Code Complete</code></p>

<p><strong>UPDATE</strong>: replaced inner private class with <code>Tuples</code></p>
    </div>