<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'd want to address the <code>generator</code>, to begin. <code>:param generator: accepts no parameters and returns a vector</code> is false. The generator returns a number (with floating point or not). This is pretty confusing. When I read the code at first, I thought the generator would be an iterable that returns numbers (like <code>range(0,10)</code> for example). </p>

<p>In that case you wouldn't need to pass both the parameters <code>num_of_iterations</code> and <code>generators</code>. Otherwise, I don't think the parameter should be named <code>generator</code> or maybe your documentation should be stronger.</p>

<p>Next thing, you shouldn't initialize <code>sum = sumSquares = None</code> this way. They are numbers, initialize them at zero, that would give you the opportunity to remove your if/else.</p>

<pre><code>sum = sumSquares = 0
for i in range(num_of_iterations):
    x_i = generator()
    sum += x_i
    sumSquares = (x_i*x_i)
</code></pre>

<p>Apart from that, the coding style is a little off. Sometimes you use <code>camelCase</code> and sometimes <code>snake_case</code>.</p>

<p>If we were to have an iterator instead of the generator, you could do something like this : </p>

<pre><code>def mean_and_stderr(iterator) -&gt; (float,float):
    sum = sumSquares = 0
    for x in iterator:
        sum = x
        sumSquares = (x*x)

    mean = sum / num_of_iterations
    variance = sumSquares / num_of_iterations - (mean*mean)
    stderr = np.sqrt(variance) / num_of_iterations
    return (mean,stderr)
</code></pre>
    </div>