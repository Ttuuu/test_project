<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>That you know to use <code>dplyr</code> is a good start; I'd recommend you read a good tutorial to grasp the important concepts. For example, instead of looping on the PERSON_ID and YEAR, you should use <code>group_by</code>. Then, within each PERSON_ID/YEAR, you should apply a same function via <code>do</code>. See how the <code>combn</code> function from the <code>utils</code> package can do a lot of the heavy-lifting:</p>

<pre><code>combn(c("A", "B", "C"), 2)
#      [,1] [,2] [,3]
# [1,] "A"  "A"  "B" 
# [2,] "B"  "C"  "C"
</code></pre>

<p>You can wrap it as follows to create a data.frame of pairs, triplets, etc.:</p>

<pre><code>combo &lt;- function(x, n) {
  x &lt;- as.data.frame(t(combn(x, n)), stringsAsFactors = FALSE)
  names(x) &lt;- paste0("VALUES_", 1:n)
  x
}

combo(c("A", "B", "C"), 2)
#   VALUES_1 VALUES_2
# 1        A        B
# 2        A        C
# 3        B        C
</code></pre>

<p>Putting it all together:</p>

<pre><code>pairs &lt;- df %&gt;%
         group_by(PERSON_ID, YEAR) %&gt;%
         filter(n() &gt;= 2) %&gt;%
         do(combo(.$VALUES, 2))

triplets &lt;- df %&gt;%
            group_by(PERSON_ID, YEAR) %&gt;%
            filter(n() &gt;= 3) %&gt;%
            do(combo(.$VALUES, 3))

quadruplets &lt;- df %&gt;%
               group_by(PERSON_ID, YEAR) %&gt;%
               filter(n() &gt;= 4) %&gt;%
               do(combo(.$VALUES, 4))
</code></pre>

<p>Note that everywhere I used a <code>filter</code> step to ensure that <code>combn</code> is never called with insufficient data otherwise it will die (e.g. if asking for pairs when there is only one data point).</p>

<p>I hope this will be fast enough on your large data, please let me know otherwise.</p>
    </div>