<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Playability</h1>
<p>I ran your game to test it out first, and noticed something odd when a letter is found twice in the same word, such as "glass" here:</p>
<blockquote>
<pre><code>Pick a letter
 A
You guessed correctly!
['-', '-', 'a', '-', '-']
Pick a letter
 s
You guessed correctly!
['-', '-', 'a', 's', '-']
['-', '-', 'a', 's', 's']
</code></pre>
</blockquote>
<p>I'm not sure if that is by design, but as a player I find it odd that it's displayed twice. I found where it originated in the code:</p>
<pre><code>for x in range(0, length_word): #This Part I just don't get it
    if secretWord[x] == guess:
        guess_word[x] = guess
        print(guess_word)
</code></pre>
<p>If you just unindent <code>print(guess_word)</code> by two levels, you'll avoid that behavior since it won't run in a loop:</p>
<pre><code>for i in range(0, length_word):
    if secretWord[i] == guess:
        guess_word[i] = guess
print(guess_word)
</code></pre>
<hr>
<p>Printing a raw array like <code>['-', '-', 'a', 's', 's']</code> is a bit confusing, at first I didn't know what it was for until I guessed one right and saw the results. So let's make it print something more friendly:</p>
<pre><code>print("Word to guess: {0}".format(" ".join(guess_word)))
</code></pre>
<blockquote>
<pre><code>Pick a letter
 o
You guessed correctly!
Word to guess: - o -
</code></pre>
</blockquote>
<p>Much better! But it will get a bit clunky to type all that each time, so let's make a utility function for it and we can use it for the <code>print(guess_word)</code> at the beginning of a game too.</p>
<pre><code>def print_word_to_guess(letters):
    """Utility function to print the current word to guess"""
    print("Word to guess: {0}".format(" ".join(guess_word)))
</code></pre>
<p>Then we just <code>print_word_to_guess(guess_word)</code> whenever we need it. It would also be possible to make an optional different message but default to <code>Word to guess:</code>, but I'll leave that for you as a challenge.</p>
<hr>
<p>The game also doesn't ever tell me anything about how many chances I have left, so I'm left guessing (literally) until I figure it out. That's very easy to make a small utility function to do:</p>
<pre><code>def print_guesses_taken(current, total):
    """Prints how many chances the player has used"""
    print("You are on guess {0}/{1}.".format(current, total))
</code></pre>
<p>Then a few code additions:</p>
<pre><code>def guessing():
    guess_taken = 1
    MAX_GUESS = 10
    print_guesses_taken(guess_taken, MAX_GUESS)
    
    while guess_taken &lt; MAX_GUESS:
</code></pre>
<p>And:</p>
<pre><code>for i in range(0, length_word):
    if secretWord[i] == guess:
        guess_word[i] = guess
print_word_to_guess(guess_word)
print_guesses_taken(guess_taken, MAX_GUESS)
</code></pre>
<hr>
<p>Your list of words is pretty limited, for future consider perhaps looking for a text file online with a whole bunch of words and just read a random one from it, that would bring more variety!</p>
<hr>
<h1>Code Improvements</h1>
<h3><code>main</code> function</h3>
<p>You run all your game functions as soon as you make them. It would make more sense to put them inside the <a href="https://stackoverflow.com/questions/419163/what-does-if-name-main-do"><code>__main__</code></a> function:</p>
<pre><code>if __name__ == "__main__":
    beginning()
    newFunc()
    change()
    guessing()
</code></pre>
<p>By the way, <code>newFunc()</code> doesn't work well as a name, as it says nothing about what it does. Something like <code>ask_user_to_play()</code> would be much better.</p>
<hr>
<h3>Constants naming</h3>
<p>Python doesn't have real constants, but nevertheless, it's good practice to name variables that shouldn't change (by change I mean reassigned to a different values) in ALL_CAPS_WITH_UNDERSCORES. A simple find &amp; replace in an IDE or text editor does the trick to fix your whole script.</p>
<pre><code>GUESS_WORD = []
SECRET_WORD = random.choice(wordList) # lets randomize single word from the list
LENGTH_WORD = len(SECRET_WORD)
ALPHABET = "abcdefghijklmnopqrstuvwxyz"
letter_storage = []
</code></pre>
<hr>
<h3>Docstring</h3>
<p>It's a good habit to add a <a href="https://www.python.org/dev/peps/pep-0257/" rel="noreferrer">docstring</a> to all functions, classes, and modules, to describe for other programmers what the code in question is for. I've done that for the above 2 utility function.</p>
<hr>
<h3>Type hints</h3>
<p>Since Python 3, you can now use <a href="https://docs.python.org/3/library/typing.html" rel="noreferrer">type hints</a> for your function and method signatures, and use static code analysis tools. This also makes the code easier to read for humans.</p>
<hr>
<h2>Improved code</h2>
<p>Here is what I came up with,applying all of the above, and improving the spacing (yours had too many blank lines everywhere). There are likely other things that could be improved, but this should be a good start.</p>
<pre><code>import random, sys
from typing import List

# TODO try to load these from a text file
WORD_LIST = [
"lion", "umbrella", "window", "computer", "glass", "juice", "chair", "desktop",
 "laptop", "dog", "cat", "lemon", "cabel", "mirror", "hat"
           ]

GUESS_WORD = []
SECRET_WORD = random.choice(WORD_LIST) # lets randomize single word from the list
LENGTH_WORD = len(SECRET_WORD)
ALPHABET = "abcdefghijklmnopqrstuvwxyz"
letter_storage = []

# Utility functions

def print_word_to_guess(letters: List) -&gt; None:
    """Utility function to print the current word to guess"""
    print("Word to guess: {0}".format(" ".join(letters)))

    
def print_guesses_taken(current: int, total: int) -&gt; None:
    """Prints how many chances the player has used"""
    print("You are on guess {0}/{1}.".format(current, total))


# Game functions

def beginning() -&gt; None:
    """Starts the game"""
    print("Hello Mate!\n")
    while True:
        name = input("Please enter Your name\n").strip()
        if name == '':
            print("You can't do that! No blank lines")
        else:
            break


def ask_user_to_play() -&gt; None:
    """Ask user if they want to play"""
    print("Well, that's perfect moment to play some Hangman!\n")
    while True:
        gameChoice = input("Would You?\n").upper()
        if gameChoice == "YES" or gameChoice == "Y":
            break
        elif gameChoice == "NO" or gameChoice == "N":
            sys.exit("That's a shame! Have a nice day")
        else:
            print("Please Answer only Yes or No")
            continue


def prepare_secret_word() -&gt; None:
    """Prepare secret word and inform user of it"""
    for character in SECRET_WORD: # printing blanks for each letter in secret word
        GUESS_WORD.append("-")
    print("Ok, so the word You need to guess has", LENGTH_WORD, "characters")
    print("Be aware that You can enter only 1 letter from a-z\n\n")
    print_word_to_guess(GUESS_WORD)


def guessing() -&gt; None:
    """
    Main game loop to have user guess letters
    and inform them of the results
    """
    guess_taken = 1
    MAX_GUESS = 10
    print_guesses_taken(guess_taken, MAX_GUESS)
    
    while guess_taken &lt; MAX_GUESS:
        guess = input("Pick a letter\n").lower()
        if not guess in ALPHABET: #checking input
            print("Enter a letter from a-z ALPHABET")
        elif guess in letter_storage: #checking if letter has been already used
            print("You have already guessed that letter!")
        else: 
            letter_storage.append(guess)
            if guess in SECRET_WORD:
                print("You guessed correctly!")
                for i in range(0, LENGTH_WORD):
                    if SECRET_WORD[i] == guess:
                        GUESS_WORD[i] = guess
                print_word_to_guess(GUESS_WORD)
                print_guesses_taken(guess_taken, MAX_GUESS)
                if not '-' in GUESS_WORD:
                    print("You won!")
                    print("Game Over!")
                    break
            else:
                print("The letter is not in the word. Try Again!")
                guess_taken += 1
                print_guesses_taken(guess_taken, MAX_GUESS)
                if guess_taken == 10:
                    print(" Sorry Mate, You lost :&lt;! The secret word was {0}".format(SECRET_WORD))


if __name__ == "__main__":
    beginning()
    ask_user_to_play()
    prepare_secret_word()
    guessing()
</code></pre>
    </div>