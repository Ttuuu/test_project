<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A few notes:</p>

<ul>
<li>All <code>IResource</code> properties have public setters. Are you absolutely certain that other code should be able to modify those? I'd recommend making these read-only unless you have specific reasons not to.</li>
<li><code>ConvertQualityToString</code> and <code>GetResourceYield</code> look like internal helper methods. Making them part of the <code>IResource</code> interface creates a very confusing API: what's the difference between <code>resource.Yield</code> and <code>resource.GetResourceYield()</code>? With the way the code is structured, I'd expect these methods to be <code>protected</code>.</li>
<li>Are you sure that <code>string</code> is a good type for <code>Quality</code>? If you've got a fixed number of qualities an <code>enum</code> is a more strongly-typed and descriptive choice. And if different qualities have different characteristics then perhaps a <code>Quality</code> class makes more sense. Try to avoid writing 'stringly-typed' code.</li>
<li><code>ConvertQualityToString</code> gives a 33% chance for each quality. Likewise, <code>GetResourceYield</code> always produces yields between 1 and 25. Are you sure that's applicable to all resources and in all circumstances? Should quality and yield even be determined by a <code>Resource</code> instance itself? What if, for example, some enemies should have a higher chance of dropping high-quality resources? Or what if you want to provide player upgrades that increase the average resource yield?</li>
<li>What's the point of that <code>Granite</code> class? There's no custom logic in there, and the resource name itself is sufficient to distinguish between different resources.</li>
<li>In <code>ConvertQualityToString</code>, there's no need for that local <code>quality</code> variable: you can let each <code>case</code> return a value directly (which also allows you to remove those <code>break</code> statements).</li>
<li><code>ConvertQualityToString</code> is a strange name: it doesn't really convert anything. Inaccurate and confusing names tend to make code more difficult to work with.</li>
</ul>
    </div>