<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I see two main readability issues here, one is only for Kotlin, but the other one should be a Java thing two.</p>
<p>If we take a look at your code snippet we can see that all functions are very similar, that means that I will just explain my concept on one of your functions, i.e. the first one, in this case <code>Identifier.toBluetoothNameId()</code>.</p>
<p>Also I will only go about readability and not functionality of your code since I first of all do not know what you are exactly working with and you also only asked for that.</p>
<p>In your function you have three base if-statements</p>
<pre><code>if (this is ControllerIdentifier.Id) { 
    ... 
}
if (this is Identifier.FullSerialNumberId) { 
    ... 
}
if (this is Identifier.BluetoothBrickedId)
    ...
</code></pre>
<p>In Kotlin you would approach this with a when-statement</p>
<pre><code>when (this) {
    is ControllerIdentifier.Id -&gt; { 
        ... 
    }
    is Identifier.FullSerialNumberId -&gt; { 
        ... 
    }
    is Identifier.BluetoothBrickedId -&gt; ...
}
</code></pre>
<p>Additionally <code>when</code> can also be used as an expression in Kotlin, which would change the complete thing from</p>
<pre><code>if (this is ControllerIdentifier.Id) { 
    ... 
    return Identifier.BluetoothNameId
}
if (this is Identifier.FullSerialNumberId) { 
    ... 
    return Identifier.BluetoothNameId
}
if (this is Identifier.BluetoothBrickedId)
    return ...Identifier.BluetoothNameId
return this as Identifier.BluetoothNameId
</code></pre>
<p>to</p>
<pre><code>return when (this) {
    is ControllerIdentifier.Id -&gt; { 
        ... 
        Identifier.BluetoothNameId
    }
    is Identifier.FullSerialNumberId -&gt; { 
        ... 
        Identifier.BluetoothNameId
    }
    is Identifier.BluetoothBrickedId -&gt; ...Identifier.BluetoothNameId
    else -&gt; this as Identifier.BluetoothNameId
}
</code></pre>
<p>Note that in the when-expression with <code>return</code> in front, the return is left out in the blocks inside the <code>when</code> and the last value in a block will always be returned. You can read more about statements as expressions in Kotlin <a href="https://kotlinlang.org/docs/reference/control-flow.html" rel="nofollow noreferrer">here</a>.</p>
<p>Now your whole function looks like this</p>
<pre><code>fun Identifier.toBluetoothNameId(): Identifier.BluetoothNameId? {
    val id = this.mId

    return when (this) {
        is ControllerIdentifier.Id -&gt; { 
            ... 
            Identifier.BluetoothNameId
        }
        is Identifier.FullSerialNumberId -&gt; { 
            ... 
            Identifier.BluetoothNameId
        }
        is Identifier.BluetoothBrickedId -&gt; ...Identifier.BluetoothNameId
        else -&gt; this as Identifier.BluetoothNameId
    }
}
</code></pre>
<p>But this is not optimal. If you just sacrifice your shorting of <code>val id = this.mId</code> and write <code>this.mId</code> every time in your calls we can use this nice shortcut</p>
<pre><code>fun Identifier.toBluetoothNameId() = when (this) {
    is ControllerIdentifier.Id -&gt; { 
        ... 
        Identifier.BluetoothNameId
    }
    is Identifier.FullSerialNumberId -&gt; { 
        ... 
        Identifier.BluetoothNameId
    }
    is Identifier.BluetoothBrickedId -&gt; ...Identifier.BluetoothNameId
    else -&gt; this as Identifier.BluetoothNameId
}
</code></pre>
<p>Because we are now using an <a href="https://kotlinlang.org/docs/reference/basic-syntax.html#defining-functions" rel="nofollow noreferrer">expression body</a> we can even omit the return type because Kotlin automatically detects it.</p>
<p>The second thing I would change in your code is using two if-statements in a row, instead of <code>if else</code>. This is something that I would also prefer in Java when there is no need for two separate if-statements. It simply saves a line and shows the reader that the two statements check the same thing.</p>
<p>Instead of</p>
<pre><code>if (IdentifierManager.mFromSerialToBluetoothCache.containsKey(id)) {
        return IdentifierManager.mFromSerialToBluetoothCache[id]
}
if (ControllerParser.parseValidControllerId(id)) {
    val fromControllerId = BluetoothIdControllerCreator.createFromControllerId(id)
    IdentifierManager.mFromSerialToBluetoothCache.put(id, fromControllerId)
    return fromControllerId
}
</code></pre>
<p>I would do this</p>
<pre><code>if (IdentifierManager.mFromSerialToBluetoothCache.containsKey(id)) {
        return IdentifierManager.mFromSerialToBluetoothCache[id]
} else if (ControllerParser.parseValidControllerId(id)) {
    val fromControllerId = BluetoothIdControllerCreator.createFromControllerId(id)
    IdentifierManager.mFromSerialToBluetoothCache.put(id, fromControllerId)
    return fromControllerId
}
</code></pre>
<p>Before I just left out your code with "...", now I will insert it to make clear what I am talking about completely. So the function <code>Identifier.toBluetoothNameId()</code> now looks like this</p>
<pre><code>fun Identifier.toBluetoothNameId() = when (this) {
    is ControllerIdentifier.Id -&gt; { 
        if (IdentifierManager.mFromSerialToBluetoothCache.containsKey(this.mId)) {
            IdentifierManager.mFromSerialToBluetoothCache[id]
        } else if (ControllerParser.parseValidControllerId(id)) {
            val fromControllerId = BluetoothIdControllerCreator.createFromControllerId(this.mId)
            IdentifierManager.mFromSerialToBluetoothCache.put(this.mId, fromControllerId)
            fromControllerId
        } else {
            throw IllegalArgumentException("Not valid convertion")
        }
    }
    is Identifier.FullSerialNumberId -&gt; { 
        if (IdentifierManager.mFromBarcodeToBluetoothCache.containsKey(this.mId)) {
            IdentifierManager.mFromBarcodeToBluetoothCache[id]
        } else if (ControllerParser.parseValidControllerBarcodeId(this.mId)) {
            val fromBarcodeID = BluetoothIdControllerCreator.createFromBarcodeID(this.mId)
            IdentifierManager.mFromBarcodeToBluetoothCache.put(this.mId, fromBarcodeID)
            fromBarcodeID
        } else {
            throw IllegalArgumentException("Not valid convertion")
        }
    }
    is Identifier.BluetoothBrickedId -&gt; throw IllegalArgumentException("Not valid convertion")
    else -&gt; this as Identifier.BluetoothNameId
}
</code></pre>
<p>Okay, I think you should be able to apply this to your other functions by yourself now.</p>
<p>Concerning functionality I would say that you could see if there is a possibility to shorten those three long very similar functions to one long and three rather short ones, but I did not find a solution in a hurry right here.</p>
<p><strong>Side note</strong>: I think you misspelled "conver<strong>s</strong>ion" ^^</p>
<p><em>Thank you for reading :)</em></p>
    </div>