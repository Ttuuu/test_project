<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>main</strong></p>

<p>It is not considered good practice to just catch <em>every</em> possible exception like this. You should always specify which exceptions are possible and should be catched. In this specific case, the <code>try-catch</code>-statement is not necessary at all, because you are catching all possible exceptions in <code>demoLoop</code> already:</p>

<pre><code>public static void main(String[] args) {
    demoLoop();
}
</code></pre>

<p><strong>demoLoop</strong></p>

<p>Are you trusting the user with making correct inputs? If the user does enter a String instead of a number, your program will crash. You can solve this problem by using the following snippet:</p>

<pre><code>private static void demoLoop() {
    Scanner scanner = new Scanner(System.in);
    showOptions();
    int option;
    while(true) {
        try {
            option = scanner.nextInt();
            if(option &gt; 2 || option &lt; 0) {
                throw new InputMismatchException();
            }
            break;
        }
        catch(InputMismatchException e) {
            System.out.println("Enter 0, 1 or 2!");
            scanner.nextLine();
        }
    }
}
</code></pre>

<p>(don't forget to <code>import java.util.InputMismatchException;</code>)</p>

<p>I also don't like the way how you use the <a href="https://docs.oracle.com/javase/tutorial/java/nutsandbolts/switch.html" rel="nofollow noreferrer">switch-case</a>-statement, but this is probably just a matter of taste. I prefer the standard way:</p>

<pre><code>switch (option) {
    case 0 : 
        System.exit(0);
        break;
    case 1 : 
        showDesignPrinciples();
        break;
    case 2 : 
        runDuckSimulator();
        break;
    default : 
        System.err.println("Please select a valid option.");
}
</code></pre>
    </div>