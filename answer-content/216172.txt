<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Approach 1</h2>

<blockquote>
<pre><code>def main():
    ... monolithic method ...

main()
</code></pre>
</blockquote>

<p>Either this is a throwaway program, in which case you don't need to define <code>main</code> at all, or it isn't, in which case you should only call <code>main()</code> if <code>__name__ == "__main__"</code>.</p>

<hr>

<blockquote>
<pre><code>    from collections import defaultdict

    with open("DATA21.txt") as all_data:
        my_lines = iter(all_data.readlines())

    number_of_assignments = int(next(my_lines))

    homework_dict = defaultdict(list)

    for _ in range(number_of_assignments):
        d, w = [float(i) for i in next(my_lines).split()]
        d = int(d)
        # Setting up the dictionary

        homework_dict[d].append(w)
</code></pre>
</blockquote>

<p>This looks to me like a method which should be factored out, so that there is clear isolation between the I/O and the processing.</p>

<p>I don't understand the use of <code>float</code> and <code>int</code>. Would it not be clearer to avoid the double-coercion with something like this?</p>

<pre><code>        d, w = next(my_lines).split()
        homework_dict[int(d)].append(float(w))
</code></pre>

<hr>

<blockquote>
<pre><code>    all_deadlines = list(homework_dict.keys())

    all_deadlines.sort()
</code></pre>
</blockquote>

<p>I'm not sure what <code>all_</code> adds to the name. <code>deadlines</code> works for me, or <code>distinct_deadlines</code> to be more explicit.</p>

<hr>

<blockquote>
<pre><code>    # Algorithm starts here
</code></pre>
</blockquote>

<p>See my previous point about factoring out methods.</p>

<hr>

<blockquote>
<pre><code>    selected_assignments = []
    for deadline in all_deadlines:
        deadline_assignments = homework_dict[deadline]
        deadline_assignments.extend(selected_assignments)
        deadline_assignments.sort()
</code></pre>
</blockquote>

<p>This is going to be doing a lot of sorts of already sorted data. That seems like a plausible bottleneck. I see at least three obviously better approaches:</p>

<ol>
<li>Sort <code>homework_dict[deadline]</code> and then merge two sorted lists in linear time.</li>
<li>Use a priority queue of some kind for <code>selected_assignments</code>. Add <code>homework_dict[deadline]</code> to the queue and then pop it down to the desired length.</li>
<li>The asymptotically best option that I can see, although possibly not the fastest in practice, would be to append the new assignments and then use a linear time median finder to slice the merged list.</li>
</ol>

<blockquote>
<pre><code>        difference = len(deadline_assignments) - deadline
        if difference &lt; 0:
            selected_assignments = deadline_assignments
        else:
            selected_assignments = deadline_assignments[difference::]
</code></pre>
</blockquote>

<p><code>difference</code> is not an informative name. What does the difference actually <em>mean</em>? It's something like "<em>number of assignments to discard</em>". I might use <code>excess</code> as a name, or <code>num_excess_assignments</code> if I wanted to be more explicit.</p>

<hr>

<p>It would be nice to see some comments in the code explaining why it's correct. I would say that having read it carefully a few times I find its correctness plausible, but I wouldn't be willing to guarantee it.</p>

<hr>

<h2>Approach 2</h2>

<p>A lot of the comments (about structure, names, proof of correctness, ...) on approach 1 apply here too.</p>

<hr>

<blockquote>
<pre><code>    possible_days = [day+1 for day in range(biggest)]
</code></pre>
</blockquote>

<p>What is <code>possible_days</code> used for? <code>in possible_days</code> and <code>possible_days.remove</code>. This is a classic performance blunder (so don't feel bad, because you're far from the first person to stumble into it: clearly there are popular learning resources which should address this and don't). In general, the appropriate data structure for this use case is <code>set</code>, not <code>list</code>.</p>

<hr>

<blockquote>
<pre><code>        while deadline not in possible_days:
            deadline -= 1
            # This means the only days left are really high, with much more time. 
            if deadline &lt; possible_days[0]:
                break
</code></pre>
</blockquote>

<p>However, it turns out that the use of <code>possible_days</code> is even more specialised than it seemed at first. Even if you replace the list with a <code>set</code>, this would still be a linear scan, and it doesn't need to be. You want the largest value smaller than a given one: if you keep the values in order then a binary chop will get there in logarithmic time rather than linear.</p>

<blockquote>
<pre><code>        if deadline in possible_days:
            # One day cannot be used twice 
            possible_days.remove(deadline)
            total += weight
</code></pre>
</blockquote>

<p>However, updating the array needed for binary chop would not be logarithmic time. What you need is some kind of tree which allows searches and removals in logarithmic time. The access pattern is not going to be random, so to guarantee logarithmic time it probably needs to be a self-balancing tree, or some kind of self-pruning trie. I'm not aware of a suitable implementation in the standard library: I think you would have to write it yourself.</p>

<p>Actually, thinking about it some more, I reckon you could use an augmented union-find data structure to get amortised linear time. Initially each index (and -1 as a sentinel) is in a singleton set with associated data equal to the index. The search and delete becomes (pseudocode):</p>

<pre><code>available = find(deadline).data
if available &gt;= 0:
    total += weight
    union(available, available - 1)
</code></pre>

<p>ensuring that <code>union</code> chooses the smaller of the two associated data items.</p>
    </div>