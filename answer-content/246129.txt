<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You haven't indicated the purpose for writing these implementations.  The natural alternative would be to use <code>Arrays.binarySearch</code> unless this is purely for learning purposes.</p>
<h1>Testing</h1>
<p>Your test suite is far from exhaustive, testing that both methods can find the item at position 2 is very minimal (at the moment both implementations could simply always return 2).  Consider adding additional tests for edge cases (end of array being searched, beginning of array being searched for example).  Consider what behaviour you're expecting if the item isn't in the array being searched and adding test cases for those scenarios.</p>
<p><code>array</code> isn't a great name for the source data in your tests.  <code>sortedArray</code> or <code>dataToSearch</code> would be a bit better however consider declaring the array in each test method.  In a larger test file, scrolling up and down to see the data in the array, versus the test that's being performed adds extra overhead, which can be undesirable.</p>
<h1>Implementations</h1>
<p>All of your methods are declared as private.  Some of them are meant to be called from outside the class, some of them (such as the recursive call) probably aren't.  This should be reflected in the access declarations.</p>
<p>Naming is an important aspect of development.  The better your names are and the more consistent you are with them, the easier your code is to follow.  You're consistent with your use of <code>left</code> and <code>right</code>, but <code>mid</code> is called <code>pivot</code> in the alternate implementation.  The item to find is either <code>i</code> or <code>item</code>.  IDE's will often give parameter name prompts even when there is no Java Doc.  If you name your parameters well, it's clear that the parameters are <code>(int[] arrayToSearch, int itemToFind)</code></p>
<h1>Doh...</h1>
<p>I should really have noticed this earlier... but both of your methods return <code>boolean</code>, however you're asserting they both return <code>2</code>, which isn't a boolean...  Think about what you want the method to return...implement that...and write the tests accordingly...</p>
    </div>