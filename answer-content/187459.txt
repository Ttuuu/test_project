<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think you should split your code into two functions.</p>

<ol>
<li>You should add some code to group your object lists together. I'd call this <code>group_by</code>.</li>
<li>Take the first from each match, and error in the <code>match</code> function.</li>
</ol>

<p>To perform the first function, I'd use <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="noreferrer"><code>collections.defaultdict</code></a>, so that you only generate the keys that you need.
This also has the benefit of having \$O(kn)\$ performance, rather than \$O(n^k)\$.
Where \$n\$ is the amount of objects in each list, and \$k\$ are the amount of lists.</p>

<p>After this you can check if there are enough items to yield correctly. This is two checks, 1 that there are items in the first group. Then you check that there are the same amount of items in both groups. After this, you can use <code>zip</code> to group together items in pairs.</p>

<pre><code>import collections


def group_by(lists, key):
    amount = range(len(lists))
    d = collections.defaultdict(lambda:tuple([[] for _ in amount]))
    for i, objects in enumerate(lists):
        for obj in objects:
            d[key(obj)][i].append(obj)
    return d


def match(al, bl, key):
    for key, groups in group_by((al, bl), key).items():
        if groups[0] and len(groups[0]) != len(groups[1]):
            raise ValueError("Missing value for {!r}".format(key))
        yield from zip(*groups)
</code></pre>

<p>The type of exception that should be raised is debatable, however it shouldn't be <code>Exception</code>.</p>

<ul>
<li>If you think the error is predominantly due to missing values, then using <a href="https://docs.python.org/3/library/exceptions.html#ValueError" rel="noreferrer"><code>ValueError</code></a> would probably be best.</li>
<li>If you think the error is because it requires there to be a common key, then <a href="https://docs.python.org/3/library/exceptions.html#LookupError" rel="noreferrer"><code>KeyError</code></a> or <a href="https://docs.python.org/3/library/exceptions.html#KeyError" rel="noreferrer"><code>LookupError</code></a> may be better.</li>
<li>Alternately if you're planning on making an entire rational algebra Python library, create your own exceptions.</li>
</ul>
    </div>