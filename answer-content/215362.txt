<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think the big <code>switch</code> is a problem.  Consider a more data-driven approach where each opcode is described by a struct:</p>

<pre><code>struct OpCode
{
    unsigned char command_byte;
    unsigned char mask;  // if only a subset of bits determine command
    unsigned char length;
    // other members as needed - e.g. a pointer to the "print" function
};
</code></pre>

<p>Now, the code that reads instructions can determine whether the command is unterminated, without needing to repeat the logic for every multi-byte opcode.</p>

<p>I've included the <code>mask</code> so that we don't encode every single instruction (e.g. <code>ld R1, R2</code> encodes the source and destination registers in the bits of a single-byte command; it would be tedious and error-prone to write them all separately here).</p>

<p><s>The simple <code>length</code> value I've shown isn't quite enough, given that the Game Boy's LR35902 processor supports the 0xCB prefix for extended Z80 instructions - we might want to handle that outside of the normal flow, and use it to switch between different instruction tables.</s><br>
We get away with a simple <code>length</code> value here, because the only prefix instruction supported by the Game Boy's LR35902 processor is 0xCB, which is always followed by a single-byte instruction.  If we were decoding Z80 instructions (with ED prefix), then we'd need something a little more sophisticated.</p>
    </div>