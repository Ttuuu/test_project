<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>    public class BinaryTree&lt;T&gt; where T : IComparable, new()
</code></pre>
</blockquote>

<p>I suspect that you are unaware of the possibility of writing</p>

<pre><code>    public class BinaryTree&lt;T&gt; where T : IComparable&lt;T&gt;, new()
</code></pre>

<p>If you did deliberately choose <code>IComparable</code> over <code>IComparable&lt;T&gt;</code>, it would be helpful to add a comment explaining why.</p>

<p>Why <code>where T : new()</code>? The code doesn't call <code>new T()</code> anywhere.</p>

<p>The class would be a lot more powerful if you also implemented <code>IEnumerable&lt;T&gt;</code>, and ideally you would implement <code>ICollection&lt;T&gt;</code>.</p>

<hr>

<blockquote>
<pre><code>        private Node&lt;T&gt; _parentNode;
</code></pre>
</blockquote>

<p><code>Node</code> is an inner class, so it doesn't need the type parameter. You can remove it, and <code>T</code> from the outer class will be in scope. If you've come to C# from Java then note that this is one of the bigger differences in their type systems.</p>

<hr>

<blockquote>
<pre><code>#if DEBUG
            if (Log)
                Console.WriteLine("Initializing binary-tree..");
#endif
</code></pre>
</blockquote>

<p>If you use <code>System.Diagnostics.Debug.WriteLine</code> then (a) you can skip all the <code>#if DEBUG</code>; (b) when running in Visual Studio the log will be available in the Output pane even after the process has finished.</p>

<p>Alternatively you could take it up a level and use a proper runtime-configurable logging library like Serilog, log4net, ...</p>

<hr>

<blockquote>
<pre><code>        public void Add(T item)
        {
#if DEBUG
            if (Log)
                Console.WriteLine("Initializing binary-tree..");
#endif
            _parentNode.Add(item);
        }
</code></pre>
</blockquote>

<p>That log message looks suspicious...</p>

<p>Also, I see you've made a design decision to push the majority of the logic into the nodes. Since you appear to be doing this as a learning exercise, I suggest that for comparison you separately implement a version which leaves the nodes as pure data objects and puts all the logic in the methods of <code>BinaryTree</code>. That lets you use tail optimisation (turn recursion into a <code>while</code> loop).</p>

<hr>

<blockquote>
<pre><code>        public override bool Equals(object obj)
        {
            return obj is BinaryTree&lt;T&gt; tree &amp;&amp; tree._parentNode.Equals(_parentNode);
        }
</code></pre>
</blockquote>

<p>Visual Studio gives me a warning about this: when you override <code>Equals</code> you should override <code>GetHashcode</code> because otherwise you will spend ages debugging if you ever put an instance of this class in a <code>HashSet&lt;&gt;</code> or as the key in a <code>Dictionary</code>.</p>

<p>The same applies to <code>Node</code>.</p>

<hr>

<blockquote>
<pre><code>            /// &lt;summary&gt;
            /// Right "lower" arm of current node - this is where everything bigger than this node is getting redirect towards.
            /// &lt;/summary&gt;
            [DataMember]
            private Node&lt;T&gt; _bigger;
</code></pre>
</blockquote>

<p>I managed to understand the code ok, but it would be more conventional to call this <code>_right</code>. (Or maybe <code>right</code>, but I don't want to be pedantic about that kind of naming convention).</p>

<hr>

<blockquote>
<pre><code>            private (T data, int count) _item;
</code></pre>
</blockquote>

<p>That <code>count</code> is unusual. In effect you're implementing an <code>IDictionary&lt;T, int&gt;</code>: perhaps it would make sense to generalise to <code>IDictionary&lt;TKey, TValue&gt;</code> and have a separate wrapper class which turns any <code>IDictionary&lt;TKey, TValue&gt;</code> into a counter.</p>

<hr>

<pre><code>            public override bool Equals(object obj)
            {
                return obj is Node&lt;T&gt; node &amp;&amp;
                       (node._bigger?.Equals(_bigger) ?? _bigger == null) &amp;&amp;
                       (node._item.data?.Equals(_item.data) ?? _item.data == null) &amp;&amp;
                       (node._item.count.Equals(_item.count)) &amp;&amp;
                       (node._parent?.Equals(_parent) ?? _parent==null) &amp;&amp;
                       (node._smaller?.Equals(_smaller) ?? _smaller == null);
            }
</code></pre>

<p><code>ValueStruct</code> overrides <code>==</code>, so you could simplify this a bit. Unless you want to be paranoid and assume that <code>T</code> might not have <code>Equals</code> consistent with <code>CompareTo</code>, in which case you should use <code>CompareTo</code> here to compare <code>_item.data</code>.</p>

<hr>

<blockquote>
<pre><code>            public void Remove(T data)
            {
                if (data.Equals(_item.data))
                {
                    if (_item.count &gt; 1)
                    {
                        _item.count--;
                    }
                    else
                    {
                        if (_parent == null) return;
</code></pre>
</blockquote>

<p>The only place that <code>_parent</code> is touched is in <code>Remove</code>, so if I add one item to the tree and then call <code>Remove</code> with that same item, it won't be removed.</p>

<hr>

<blockquote>
<pre><code>            public int Contains(T value)
            {
                if (_item.data.Equals(value))
</code></pre>
</blockquote>

<p>I got a <code>NullReferenceException</code> here when I called <code>Contains</code> on an empty tree.</p>

<hr>

<blockquote>
<pre><code>            public void Add(T item)
            {
                if (_item.data.Equals(default(T)))
</code></pre>
</blockquote>

<p>I got a <code>NullReferenceException</code> here when the tree was empty: did you test this code at all?</p>

<hr>

<blockquote>
<pre><code>                        if (_parent._item.data.CompareTo(_item.data) == 1)
                    if (data.CompareTo(_item.data) == 1)
                if (item.CompareTo(_item.data) == 1)
                if (value.CompareTo(_item.data).Equals(1))
</code></pre>
</blockquote>

<p>The contract of <code>IComparable</code> does not say that the value returned will always be <code>-1</code>, <code>0</code>, or <code>1</code>. I'm not sure why lots of people seem to think that it does. You should always compare the return value against <code>0</code>.</p>
    </div>