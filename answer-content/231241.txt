<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>First Of All</h1>

<p>You are doing a great job as a beginner. I have been programming for 10 years and my code for a long time was much, much less readable that what you have written. That said:</p>

<h1>What needs Fixing</h1>

<p>I'm not privy of all of the details of the n-body problem but I have an idea of what it does. I'm not an expert on numerical accuracy so I won't comment on the arithmetic you are performing. Here are a few things that I see from a design perspective.</p>

<h2>This class is effectively Impossible to test</h2>

<p>Between randomizing the input data upon construction and having one method that does the vast majority of the work, it is very difficult to write meaningful automated tests for this class. This is in part because this class does way too much.</p>

<h2>The Public interface does not reflect its usage</h2>

<p>The public interface is much broader than what a client would use. As far as I can tell, the only thing a client would need to do is construct one of these objects and immediately call <code>timeIntegration()</code> upon it, then record the results somehow. More on this later.</p>

<h2>You use Non standard ways to convey standard concepts</h2>

<p>You provide a "print_data" and a "write_data" method. The dependency on <code>&lt;iostream&gt;</code> &amp; <code>&lt;fstream&gt;</code> is needless for this class and will make it very difficult to test in an automated (read: unit test) fashion. You should provide a <code>&lt;&lt;</code> operator for the particle class instead and allow the client to decide what to do with the results. </p>

<h2>There's no way to get at the raw data for this class</h2>

<p>Furthermore, since the <code>print_data()</code> and <code>write_data()</code> methods are seemingly the only way get data from this class, the use of this class in anything other than a simple command prompt program is limited. A method to get the internal data in non-printed form would be helpful. </p>

<h2>What to do</h2>

<p>A better design for this class may be a public constructor with the necessary parameters which immediately calls everything necessary to compute the integration, and then a method to get the data that has been processed. Nothing else would be public. This way, it is very difficult for a client to use this class incorrectly. A class with a getter for its only owned data should raise a red flag in an OOP design, so all of this rethinking is really leading to a bigger realization that...</p>

<h1>This shouldn't be a class</h1>

<p>My biggest consideration would be to not have this be a class at all. None of the data that it owns are invariant across the useful public interface. <a href="https://en.wikipedia.org/wiki/Class_invariant" rel="nofollow noreferrer">More on invariants in class design here on Wikipedia</a>. There is no reason for the state that has been introduced to be owned by this class across its lifetime and there are plenty of opportunities to use this class in ways that produce completely invalid data. This instead should have an interface that consists of one high, level function.</p>

<p>The public interface to the n-body calculator should take in two or three things: </p>

<ol>
<li>A settings struct. This will include all necessary pieces to properly run the calculation other than the "hot" data. this will be initialized by the client. If the struct data is not valid (i.e. something that will be a denominator of zero), the function should exit with a return code of some sort (or exception if that's allowed in your environment and that's your thing). This should probably be taken by const l-value reference</li>
<li>A <code>std::vector&lt;Particle&gt;</code> by (possibly const l-value) reference, this is the input data to the n-body calculator</li>
<li>a time step to run for. This could be part of the settings struct, but in my mind it's distinctly different than the other concepts that would be in the settings struct.</li>
</ol>

<p>This function should guarantee to either modify the <code>std::vector&lt;Particle&gt;</code> in place or return a transformed <code>std::vector&lt;Particle&gt;</code>. My personal preference is the latter, however depending on which version of C++ you are using, that can be inhibitive to good performance. In essence, all that this function is doing is transforming a list of particle states. It can (and should) use other helper functions to do its work, and these functions would very likely get reused in other parts of a larger particle framework. All functions should be stateless other than the particle set passed in.</p>

<p>The value add from this multi-fold:</p>

<ol>
<li>It is more obvious how to use this interface correctly. See the principle of least surprise. <a href="https://en.wikipedia.org/wiki/Principle_of_least_astonishment" rel="nofollow noreferrer">Wiki article</a>.</li>
<li>It is much, much easier to test a set of stateless functions than it is to test a big, entangled class.</li>
<li>This will allow much higher reuse of basic operations as this code base expands. </li>
</ol>

<h1>Other Suggestions</h1>

<h2>Names</h2>

<p>I would suggest better names for the <code>Particle</code> struct members. If they are used correctly in a larger program they will likely become ubiquitous as the base data types. There is nothing wrong with typing out mass, position, velocity and force. While it's true that people will probably know what you mean when you talk about position as x, they will definitely know what you mean when you type position. </p>

<h2>Strong Types</h2>

<p>I would use strong types for the particle members. Jonathan Bocarra has some excellent blog articles on it on cppfluent (e.g. <a href="https://www.fluentcpp.com/2016/12/08/strong-types-for-strong-interfaces/" rel="nofollow noreferrer">CppFluent Strong types</a>). They can be treated the same as doubles, with the advantage of making it much more difficult to switch arguments around in function calls, and making the code more expressive. </p>

<h2>Get Rid Of The Globals</h2>

<p>Globals are a bad thing, and should be avoided. Regardless of whether the object-oriented approach is gotten rid of, these should be incorporated into a settings struct of some kind.</p>

<h2>Use the STL more than you are</h2>

<p>A lot of your summing <code>for</code> loops can use <code>std::accumulate()</code>; you should be using <code>std::vector</code>s rather than raw c-style arrays. You should be using range-based <code>for</code> loops where you can't use <code>std::vector</code> or an STL algorithm. </p>
    </div>