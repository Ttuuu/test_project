<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Why are you giving seperate implementations for each enum value? All <code>getTitle()</code> and <code>getFragmentToAdd()</code> implementations are the same.</p>

<pre><code>enum class ImageHolderEnum(
    val titleId: Int,
    val qFragment: BaseFragment,
    val fragment: BaseFragment
) : IPageHolder {
    PAGE1(R.string.tab_shop_baby, BabyTwoFragment(), BabyThreeFragment()),
    PAGE2(R.string.tab_shop_mom, MomThreeFragment(), MomTwoFragment()),
    PAGE3(R.string.tab_shop_dad, DadTwoFragment(), DadThreeFragment()),
    ;

    override fun getTitle(): Int = titleId
    override fun getFragmentToAdd(): BaseFragment = if (isFeatureAllowed()) qFragment else fragment

    fun isFeatureAllowed(): Boolean  {
        val qSlideConfig: QSlideConfig by remoteFeatureFlag() // Kind of dependency injection here 
        return qSlideConfig.isQSlideEnabled()
    }
}
</code></pre>

<p>Interfaces can also have properties, so there's no need to have <code>getTitle()</code> as a function, when it can just be a value.</p>

<pre><code>interface IPageHolder {
    val titleId: Int
    fun getFragmentToAdd(): BaseFragment
}
</code></pre>

<p>And you can then use it like this in the enum class:</p>

<pre><code>enum class ImageHolderEnum(
    override val titleId: Int,
    ...
</code></pre>
    </div>