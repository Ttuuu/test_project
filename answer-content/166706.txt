<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In assembler it is often possible to avoid <code>jmp</code> instructions. This is done to improve <em>branch prediction</em> and thereby performance.</p>

<p>Your code can be written without the jump to <code>add_one</code>:</p>

<pre><code>xor ebx, ebx
shr eax, 1
adc ebx, 0
</code></pre>

<p>These three instructions replace the whole jumping. The <code>adc</code> (add with carry) instruction's original purpose is to support chained addition, but it can be used creatively for many other purposes. Note that I had to move the <code>xor ebx, ebx</code> to the top since it updates the carry flag.</p>

<p>There are also the <code>rcr</code> and <code>rcl</code> instructions that efficiently use the carry flag as a one-bit register. You can just repeat 32 times:</p>

<pre><code>rcr eax, 1
rcl ebx, 1
</code></pre>

<p>And you're done. When you inline this loop, you have a constant-time operation that finishes in 64 instructions. Each of them probably takes a single cycle, therefore 64 cycles. That's already acceptable, but there are probably better ways.</p>

<p>On the electrical, hardware level, the <code>bitswap</code> operation can be implemented by just swapping the wires, therefore chances are high that there is <em>some</em> machine instruction that makes this task more efficient. Just read through the whole processor manual to see if there is anything related. Have a look for the keywords "swap", "shift", "mask".</p>

<p>If you want to get a really fast program, you should use the <code>bswap eax</code> instruction, followed by code that reverses the bit order. This can probably be found in the excellent book <em>Hacker's Delight</em>.</p>

<p>The basic idea is to take every second bit and shift it to the left. At the same time, take the remaining bits and shift them to the right. Like this:</p>

<pre><code>bits0 = (x &amp; 0x55555555) &lt;&lt; 1
bits1 = (x &gt;&gt; 1) &amp; 0x55555555
x = bits0 | bits1
</code></pre>

<p>Then do the same thing with groups of 2 bits, and then once more with groups of 4 bits. The groups of 8 and 16 bits are done by the <code>bswap</code> instruction, you don't need to implement them on your own.</p>
    </div>