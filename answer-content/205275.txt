<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>All in all it seems to work all right.</p>

<p>Personally I don't like constructs like:</p>

<blockquote>
  <p><code>if (0 &lt; Count) {...}</code></p>
</blockquote>

<p>but:</p>

<pre><code>if (Count &gt; 0) {...}
</code></pre>

<p>And this:</p>

<blockquote>
  <p><code>if (!(offset &lt; Capacity))</code></p>
</blockquote>

<p>is less readable than:</p>

<pre><code>if (offset &gt;= Capacity)
</code></pre>

<hr>

<p>If I interpret <code>Operations.NextPowerOf2</code> in the right way, I think it makes the heap capacity grow unnecessarily for larger number of existing data. Istead I think, I would have a constant value to expand the heap with.</p>

<hr>

<p>In the below the outer parentheses are redundant:</p>

<blockquote>
<pre><code>    var left = ((offset &lt;&lt; 1) + 1);
    var right = (left + 1);
</code></pre>
  
  <p><code>for (var i = ((Count - 1) &gt;&gt; 1); (-1 &lt; i); i--)</code></p>
</blockquote>

<hr>

<blockquote>
<pre><code>private void Grow(int maxCapacity)
{
  var currentCapacity = Capacity;

  for (var i = currentCapacity; i &lt; maxCapacity; i++)
  {
    m_values.Add(default);
  }

  m_nextIndex = currentCapacity;
}
</code></pre>
</blockquote>

<p>In <code>Grow()</code>, I don't think that <code>m_nextIndex</code> should change (and accidentally it won't here) . <code>Grow()</code> should only change the capacity - not the state of the heap.</p>

<hr>

<p>Because you are not interested in feedback about naming, I will not write, that I would call the class <code>PriorityQueue&lt;T&gt;</code> (using a binary heap as data structure).</p>
    </div>