<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A few small things to add to Henrik Hansen's answer.</p>

<hr>

<p>This is a bit odd:</p>

<pre><code>byte[] arrayByte = { 0x00 };
</code></pre>

<p>There is no need to assign this a value at all when declaring it: not doing so would prevent its use before it is assigned a meaningful value, which is good. If you must use a meaningless initial value (for whatever reason), a <code>null</code> would probably be better, as it will likely crash any code which tries to use it, rather than doing something meaningless/destructive.</p>

<p>Here, it would be better to simply declare <code>arrayByte</code> when you use it inside the loop: it's always good to define things as close to where they are used as possible, because it makes it clearer what their purpose is and limits their technical scope to their conceptual scope (e.g. it wouldn't make any sense to access <code>arrayByte</code> after the loop).</p>

<pre><code>byte[] arrayByte = ToByteArray(subString);
</code></pre>

<hr>

<p>As Henrik Handsen points out, there is no need to repeatedly open the output file and seek to the end. However, if ever you must seek to the end of a <code>FileStream</code>, you can use the <a href="https://docs.microsoft.com/en-us/dotnet/api/system.io.filestream.seek?view=netframework-4.7.2" rel="noreferrer"><code>Seek(long, SeekOrigin)</code></a>. This expresses the intention much more clearly than the non-trivial <code>FileInfo</code> route, and works with certain other types of stream as well.</p>

<hr>

<p>It's unusual to see a method parameter or local variable in <code>ProperCamelCase</code>:</p>

<pre><code>public static byte[] ToByteArray(String HexString)
{
    int NumberChars = HexString.Length;
</code></pre>

<p>The private variable is completely hidden from the external API, so is relatively unimportant, but most guidelines suggest using <code>lowerCamelCase</code> for local variables and method parameters.</p>

<hr>

<p>This method does a fair amount of work, and has nothing to do with the UI it is (I'm guessing from the name) embedded in. If it is taking a while, that will also provide a terrible user experience, as it will block the UI thread, stalling the application.</p>

<p>I would suggest, therefore, that it be pulled out into its own method (taking a <code>filename</code> parameter, rather than pulling it from what I assume is a private field/property), and perhaps making it <code>async</code> (maybe even with progress reporting), so that it can be conveniently run away from the UI thread.</p>

<hr>

<p>You have a couple of 'magic numbers' and 'magic strings' in your code, which are essentially meaningless to anyone unfamiliar with the domain. Why, for example, do you look for <code>":10"</code>, why do you skip the first 9 characters, and why do you remove the last 2? All of these warrant some form of documentation, ideally through the use of meaningful prior definitions (ideally with inline doc), or at least some comments explaining why those numbers are what they are.</p>

<p>Your code even contains <code>"_gugggu"</code> twice, so it's an even more obvious candidate for being replaced with a well-named variable/constant/whatever. It is all-too-easy to change such magic constants in one place but to forget to change them in another.</p>

<p>Additionally, inline documentation (<code>///</code>) on any public facing methods (<code>ToByteArray</code>) is always nice, and a few more carefully placed empty lines and otherwise consistent whitespace would really help to break up the logic a bit and keep the code looking tidy (e.g. <code>fileName+"_gugggu"</code> vs. <code>fileName + "_gugggu"</code></p>
    </div>