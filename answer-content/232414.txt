<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong><em><h3>Areas to fix/improve:</h3></em></strong></p>

<p><strong><em>Namings</em></strong></p>

<p>The function names like <code>split_full_name_and_filter_stop_word</code>, <code>check_and_update_username_to_unique</code> and alike are considered as <em>anti-patterns</em> for function naming.<br>
<code>run_and_fly</code> or <code>think_or_talk</code> like names point to ambiguity or excessive responsibilities assigned to a function.<br>A function should have a concrete responsibility. Therefore, you need to analyze those functions and apply whether <em>Rename function</em> or <em>Extract function</em> (in your case - split a function into several functions each with separate responsibility) technique.</p>

<p>Some variable and function names are too verbose:<br>
<code>name_words</code> --&gt; just <code>names</code><br>
<code>get_name_from_list_of_words</code> --&gt; just <code>compose_username</code><br>
<code>list_of_words</code> --&gt; just a plural <code>words</code><br>
<code>unique_name_list</code> --&gt; just <code>unique_names</code><br> </p>

<hr>

<p><strong><code>def generate_username(self, full_name, size, unique_name_list=None)</code></strong> method.</p>

<ul>
<li><p>to avoid passing the same <code>unique_name_list</code> across multiple methods - it's good to pass it into <code>UniqueNameGenerator</code> constructor at once.<br></p></li>
<li><p><code>full_name = re.sub("[^\sa-zA-Z]+", "", full_name)</code>. In case if <code>full_name</code> happened to be empty, to avoid redundant calls of subsequent functions - it's good to add a check for that:</p>

<pre><code>...
full_name = re.sub("[^\sa-z]+", "", full_name.strip(), re.I)
if not full_name:
    raise ValueError(f'Incorrect full name `{full_name}`')
</code></pre></li>
<li><p>either of these complements:</p>

<pre><code>if self.suffix:
    username = username + self.suffix
if self.prefix:
    username = self.prefix + username
</code></pre>

<p>can throw <code>TypeError</code> in case if caller would pass non-string argument for <code>prefix</code> or <code>suffix</code>.<br>Instead, use flexible <code>f-string</code> formatting:</p>

<pre><code>username = f'{self.prefix}{username}{self.suffix}'
</code></pre></li>
</ul>

<hr>

<p><strong><code>def split_full_name_and_filter_stop_word(self, full_name, size)</code></strong> method</p>

<ul>
<li>the function name is better named as <code>filter_valid_words</code> or <code>select_valid_words</code> (or alike)</li>
<li><p><code>" ".join(full_name.split(" ")).split()</code> - this looks like a "5-wheel bicycle that circles rounds instead of going <em>straight</em>".<br>Simply <code>words = full_name.split()</code></p></li>
<li><p>the whole construction:</p>

<pre><code>words_considered = []
for word in name_words:
    ignore_word = False
    if word.lower() in self.stop_words:
        ignore_word = True
    if not ignore_word:
        words_considered.append(word)
</code></pre>

<p>is a verbose "invention" of a simple list comprehension with <code>if</code> constraint:</p>

<pre><code>valid_words = [w for w in words if w.lower() not in self.stop_words]
</code></pre>

<p>The restructured function would look as:</p>

<pre><code>def filter_valid_words(self, full_name, size):
    words = full_name.split()
    if len(words) &gt; size:
        words = words[:size]

    return [w for w in words if w.lower() not in self.stop_words]
</code></pre></li>
</ul>
    </div>