<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>one dimensional array</strong><br>
Defining the backing array with only one dimension allows immediatly to use the class <code>Arrays</code> - instead of row- or column-wise. It provides functionality which then you don't need to write.</p>

<p><code>private int[] elements;</code></p>

<p>Initialization:<br>
<code>elements = new int[n*n];</code>  </p>

<p>That's all. There is no need to fill the array row-wise with <code>0</code>. According to <a href="https://docs.oracle.com/javase/specs/jls/se8/html/jls-4.html#jls-4.12.5" rel="nofollow noreferrer">JLS</a> all elements are initialized with the default value of the component type. This is <code>0</code> in case of <code>int</code>,</p>

<p>Determine the position of an element to get or set it's value: <code>elements[i * n + j];</code></p>

<p><strong>comparing two arrays for equality</strong><br>
When using a one dimensional array you can call <code>Arrays.equals(int[] a, int[] b)</code> to check if the backing arrays are equal.</p>

<p><strong>cloning the matrix</strong><br>
When using a one dimensional array you can call <code>Arrays.copyOf(elements, elements.length)</code> to create a copy of the backing array using a <code>native</code> method which performs very fast.</p>

<p><strong>dedicated zero-size matrix</strong><br>
If your application will use frequently zero-size matrices, you could follow the example of <code>Collections.emptyMap()</code> and implement a dedicated subtype of <code>DenseMatrix</code> which will have simplified implementations of the mathods provided by <code>DenseMatrix</code>. Storing such a zero-sized matrix as a singleton will save memory and creation time.</p>
    </div>