<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>you can write fluent extension methods:</p>
<pre><code> public static class Extensions {
     public static T EnsureNotNull&lt;T&gt;(this T t, string message = null) {
         if (t == null) throw new StudentCourseValidationException(message ?? "Value not found");
         return t;
     }
     public static Student EnsureAlreadyRegistered(this Student student, string courseId) {
          if (student.Enrollments.Any(x =&gt; x.CourseId == courseId) throw new StudentCourseRegistrationException("Student is Already Registered for Course");
          return student;
      }
      //and so on
 }
</code></pre>
<p>then your code would look like:</p>
<pre><code>public async Task&lt;bool&gt; RegisterStudentForCourseAsync(RegisterStudentForCourseRequest registerStudent)
    {
        var student = await _studentRepository.GetStudentInformationAsync(registerStudent.StudentId);

        student
              .EnsureNotNull()
              .EnsureNotAlreadyRegistered(registerStudent.CourdeId)
              .EnsureCanHaveMoreCourses();
        
        var course = _courseRepository.GetCourseInformation(registerStudent.CourseId);

        course
             .EnsureNotNull()
             .EnsureNotFullyBooked();

        return await _courseRepository.SaveRegisterationOfStudentForCourse(course, registerStudent, student);
    }
}
</code></pre>
    </div>