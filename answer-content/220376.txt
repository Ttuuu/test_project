<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your program is definitely improved over the last version.  Good job!  Here are some ideas for you about further improvements.</p>

<h2>Make the object interface easy for the user</h2>

<p>The <code>app</code> object has two public functions, <code>start</code> and <code>end</code> that are apparently intended to be called in that order.  To me, it would make more sense to eliminate <code>end</code> and simply move the contents of <code>end</code> to the end of <code>start</code> outside the <code>while</code> loop.  That way the user only need to make a single call.  Another idea would be to have a freestanding function that does what <code>main</code> currently is doing.  It might look like this:</p>

<pre><code>void snakes(int width, int height, const wchar_t *label) {
    Game::app game(width, height, label);
    game.start();
}
</code></pre>

<h2>Try to make the application portable</h2>

<p>The application currently tries to load the font from "res/fonts/arial.ttf" but no such file is on my machine so that load attempt fails.  The error message is good, but could be better if it were to tell the user the actual path name the program is trying to use.  Even better would be to allow the user to select a font or at least make it configurable per platform.  This also leads us to the next suggestion.</p>

<h2>Reduce or name and isolate constants</h2>

<p>To run this code on my Linux machine, I created a new variable:</p>

<pre><code>static const auto fontfile{"/usr/share/fonts/gnu-free/FreeSans.ttf"};
</code></pre>

<p>Then I used <code>fontfile</code> to load the file instead of having a hardcoded string embedded within the constructor.  This way it's much easier to find and, if needed, change in the future.  Similarly, instead of passing a constant to construct the <code>common_divisor</code>, one could instead compute it like this:</p>

<pre><code>common_divisor{static_cast&lt;float&gt;(windowWidth)/Board::width}
</code></pre>

<p>Using that method, the code will continue to work even with different size windows as long as they have a 4:3 aspect ratio.  This brings us to the next suggestion.</p>

<h2>Avoid hardcoding large, regular data structures</h2>

<p>There's nothing particularly <em>wrong</em> with having the default map hardcoded as in the current code, but it would be very simple to make it much more flexible and interesting.  One way to do that is to construct the entire <code>Board</code> on the fly.  Here's one way to do that:</p>

<pre><code>Board::Board() : 
    map(static_cast&lt;size_t&gt;(width*height), static_cast&lt;char&gt;(OPEN))
{
    // set top and bottom walls
    for (unsigned i=0; i &lt; width; ++i) {
        place({i, 0}, WALL);
        place({i, height-1}, WALL);
    }
    // set left and right walls
    for (unsigned j=1; j &lt; height-1; ++j) {
        place({0, j}, WALL);
        place({width-1, j}, WALL);
    }

    // create two-segment snake
    place(snake.headLocation(), SNAKE);
    place(snake.add(), SNAKE);

    // add a bit of food
    genFood();
}
</code></pre>

<p>Now it is able to accept an arbitrary size window.  Another subtle point here is that when a variable has a default that is always assigned when the object is constructed, assign it inline with the declaration instead.  In this case the relevant declaration is:</p>

<pre><code>int m_score = 0;
</code></pre>

<p>Also, if you wanted to always have a 4:3 aspect ratio, you could define <code>height</code> in terms of <code>width</code> like this:</p>

<pre><code>static constexpr int height = width * 3 / 4;
</code></pre>

<h2>Consider using finer-grained helper functions</h2>

<p>At the moment, the code includes a function called <code>genFood()</code> which find a random empty square and then puts food there.  Since there's already a function to put an object at an arbitrary location, I'd suggest the only thing missing is a function to find a random empty square.  I'd write it like this:</p>

<pre><code>Coord Board::randomEmpty() const {
    static std::random_device rd;
    static std::mt19937 gen(rd());
    static std::uniform_int_distribution&lt;unsigned&gt; disX(1, width - 2);
    static std::uniform_int_distribution&lt;unsigned&gt; disY(1, height - 2);
    Coord coord{disX(gen),disY(gen)};

    while (!isEmpty(coord)) {
        coord = {disX(gen),disY(gen)};
    }
    return coord;
}
</code></pre>

<p>Then where the code currentl uses <code>genFood</code>, one would write this:</p>

<pre><code>place(randomEmpty(), Food);
</code></pre>

<p>I'd suggest that using <code>randomEmpty()</code> to initialize the snake's location might also be good as long as the direction was chosen such as to not cause the player to immediately crash into a wall!  Also note here that the maximums are <code>width - 2</code> and <code>height - 2</code> and not <code>width - 1</code> and <code>height - 1</code> which are the locations of walls and thus not actually candidate locations for the food.</p>

<h2>Use helper functions to simplify code</h2>

<p>Now that there are some helper functions in the code, such as <code>Board::at()</code>, I'd suggest that using them would make the code simpler and easier to read and understand.  Here's a way to rewrite the <code>app::drawWindow()</code> function:</p>

<pre><code>void Game::app::drawWindow() {
    for (unsigned i = 0, h = board.height; i &lt; h; ++i) {
        for (unsigned j = 0, w = board.width; j &lt; w; ++j) {
            Coord here{j, i};
            sf::RectangleShape rect;
            rect.setSize({ common_divisor, common_divisor });
            rect.setPosition({ common_divisor * j, common_divisor * i });
            switch(board.at(here)) {
                case Board::WALL:
                    window.draw(rect);
                    break;
                case Board::SNAKE:
                    rect.setFillColor(sf::Color::Green);
                    window.draw(rect);
                    break;
                case Board::FOOD: 
                    rect.setFillColor(sf::Color::Red);
                    window.draw(rect);
            }
        }
    }
    // Draws the game score
    sf::Text text;
    text.setFont(calibri);
    text.setCharacterSize(common_divisor);
    text.setPosition({ 0.0f, 0.0f });
    text.setString("Score: " + std::to_string(board.score()));
    text.setFillColor(sf::Color::Black);
    window.draw(text);
}
</code></pre>

<p>This requires that both <code>Board::at()</code> and the <code>enum</code> are made <code>public</code> instead of <code>private</code> but it makes the code much easier to read and understand.  It also eliminates the need for the <code>operator[]</code>.  This version also scales the score string so that it is always the same size as the wall.</p>

<h2>Consider more fully using SFML</h2>

<p>SFML includes a number of virtual base objects that make things simpler if you use them.  For instance, you could derive <code>app</code> from <a href="https://www.sfml-dev.org/documentation/2.5.1/classsf_1_1Drawable.php" rel="noreferrer"><code>sf::Drawable</code></a> and change from <code>drawWindow()</code> to this instead:</p>

<pre><code>void draw(sf::RenderTarget&amp; target, sf::RenderStates states) const override;
</code></pre>

<p>Then within <code>updateWindow()</code> it would look like this:</p>

<pre><code>void Game::app::updateWindow() {
    window.clear(sf::Color::Black);
    window.draw(*this);
    window.display();
}
</code></pre>

<h2>Make sure you have all required <code>#include</code>s</h2>

<p>The code uses <code>std::string</code> but doesn't <code>#include &lt;string&gt;</code>.  Also, carefully consider which <code>#include</code>s are part of the interface (and belong in the <code>.h</code> file) and which are part of the implementation and therefore belong in the <code>.cpp</code> file.</p>

<h2>Don't use unnecessary <code>#include</code>s</h2>

<p>This is a complementary suggestion to the one above. The code has <code>#include "Snake.h"</code> in <code>app.h</code> but nothing from that include file is actually needed in that code. For that reason, that <code>#include</code> should be eliminated.   Also <code>Snake.h</code> includes <code>SFML/Graphics.hpp</code> but also makes no use of it.</p>

<h2>Don't store variables that aren't needed</h2>

<p>The <code>winWidth</code> and <code>winHeight</code> variables are not really needed within the class.  Instead, use the passed values within the <code>app</code> constructor and don't bother saving them.</p>

<h2>Reconsider the class interface</h2>

<p>The <code>Board</code> class knows almost nothing about SFML and that's pretty good design because it means that only the <code>app</code> class needs to deal with SFML.  But it's not quite perfect.  The <code>update</code> function is passed an <code>sf::RenderWindow</code>.  I'd suggest that a better way to do this is to eliminate the parameter and instead pass a <code>bool</code> back that is <code>true</code> if the user has crashed.</p>

<h2>Eliminate redundant data</h2>

<p>Each <code>Snake_segment</code> contains both the current and previous coordinates.  However, only the current position and direction are really needed.  The head of the snake needs the direction, but all subsequent nodes only need to update their current position to the previous segment's current position.  The only slightly tricky part is to keep track of where to add a tail piece, but I'm sure that you will be able to see how to do this with a bit of thought.</p>

<h2>Clean up as the program ends</h2>

<p>Almost everything is automatically cleaned up at the end of the program except that there may be extra keystrokes in the input buffer.  It would be nice to empty those out before the program leaves so they don't show up on the command line after the game is over.</p>

<h2>Tighten up the interface</h2>

<p>The <code>Board::place</code> routine takes a <code>Coord</code> and an <code>int item</code> as parameters.  It would be a wee bit more correct and also aid the reader of the code if it took a <code>Tile item</code> as the second parameter instead.</p>
    </div>