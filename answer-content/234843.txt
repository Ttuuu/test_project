<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>Is there a way to improve the time complexity of this solution without
  exceeding the space limitation?</p>
</blockquote>

<p>Yes, there's a way. We don't actually need any additional array of numbers because we can check all numbers from <code>1</code> to the maximum possible mask for given elements of the array. Then, we will perform <code>AND</code> of the current number candidate with all array elements only if its <code>1's</code> count lower than that of the current best candidate. Please check the code for more details.</p>

<blockquote>
  <p>Should a completely different approach be used here?</p>
</blockquote>

<p>I've come up with a similar brute force approach that requires only additional <code>O(1)</code> space. It's quite simple and also passes all the tests. </p>

<p><strong>Remove duplicates from the original array</strong></p>

<p>We can safely do it because duplicate elements do not influence the final answer. It also helps us to reduce the size of the array and thus improve the time complexity of the algorithm.</p>

<p><strong>Sort the array by 1's count</strong></p>

<p>By doing so, we won't perform a bitwise <code>AND</code> for most of best mask candidates with <strong>ALL</strong> array elements and thus save a lot of execution time.</p>

<p><strong>Perform <code>AND</code> only for candidate numbers having fewer <code>1's</code></strong></p>

<p>That's another important optimisation. Before checking a candidate against the array elements make sure it has fewer <code>1's</code> than the current best candidate. </p>

<p><strong>Code</strong></p>

<pre><code>#include &lt;vector&gt;
#include &lt;iostream&gt;
#include &lt;algorithm&gt;
#include &lt;bitset&gt;

uint8_t popCount(const uint32_t&amp; number) {
    std::bitset&lt;26&gt; bitSet(number);

    return bitSet.count();
}

uint32_t solve(std::vector&lt;uint32_t&gt;&amp; array) {
    // exclude duplicates from the array to reduce its size
    std::sort(array.begin(), array.end());
    array.erase(unique(array.begin(), array.end()), array.end());

    // sort array elements based on their 1's count in ascending order
    std::sort(array.begin(), array.end(), [](const auto&amp; a, const auto&amp; b) {
        uint8_t count1 = popCount(a);
        uint8_t count2 = popCount(b);

        if (count1 == count2) {
            return a &lt; b;
        }
        return count1 &lt; count2;
    });

    // Initially, bestMask is the maximum possible mask
    uint32_t maxPossibleMask = 0;
    for (const auto&amp; element : array) {
        maxPossibleMask |= element;
    }

    uint32_t bestMask = maxPossibleMask;
    for (uint32_t bestMaskCandidate = 1; bestMaskCandidate &lt; maxPossibleMask; bestMaskCandidate++) {
        if (popCount(bestMaskCandidate) &lt; popCount(bestMask)) {

            bool candidateFound = true;
            for (uint32_t index = 0; index &lt; array.size(); index++) {
                if (!(bestMaskCandidate &amp; array[index])) {
                    candidateFound = false;
                    break;
                }
            }

            if (candidateFound) {
                bestMask = bestMaskCandidate;
            }
        }
    }

    return bestMask;
}

int main() {
    //read an array size
    uint32_t size;
    std::cin &gt;&gt; size;

    //save each value into the corresponding array position
    std::vector&lt;uint32_t&gt; array(size);
    for (auto&amp; element : array) {
        std::cin &gt;&gt; element;
    }

    uint32_t bestMask = solve(array);
    std::cout &lt;&lt; bestMask &lt;&lt; "\n";

    return 0;
}
</code></pre>
    </div>