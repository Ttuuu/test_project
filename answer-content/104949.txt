<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>I see a lot of checks here, how can I reduce those and make my code more readable and covering all the edge cases?</p>
</blockquote>

<p>Using a dummy node that points to the head can help reduce many of the checks:</p>

<pre><code>Node insertNth(Node head, int data, int position) {
    Node dummy = new Node();
    dummy.next = head;

    Node runner = dummy;
    for (int i = 0; i &lt; position; ++i) {
        runner = runner.next;
    }

    Node node = new Node();
    node.data = data;
    node.next = runner.next;
    runner.next = node;

    return dummy.next;
}
</code></pre>

<blockquote>
  <p>Also, is there any recursive version possible for the given code because list is a recursive data structure hence, there should be some recursive way, right?</p>
</blockquote>

<p>Naturally, a recursive solution is also possible:</p>

<pre><code>Node insertNthRecursive(Node head, int data, int position) {
    if (position == 0) {
        Node node = new Node();
        node.data = data;
        node.next = head;
        return node;
    }
    head.next = insertNthRecursive(head.next, data, position - 1);
    return head;
}
</code></pre>

<p><strong>Update</strong></p>

<p>As <a href="https://codereview.stackexchange.com/users/50567/peter-cordes">@PeterCordes</a> pointed out, the above implementation is a bit dirty,
as it rewrites the links unnecessarily.
Here's a variant replacing the <code>head.next = ...</code> line above to make it cleaner.</p>

<pre><code>    Node next = insertNthRecursive(head.next, data, position - 1);
    if (position == 1) {
        head.next = next;
    }
</code></pre>

<h3>Input validation</h3>

<p>I intentionally omitted input validation from these example implementations:
they won't work with position values outside the range \$[0, n]\$.
I leave that fun up to you.</p>
    </div>