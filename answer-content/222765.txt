<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You can indeed simplify this quite a bit using a generator and the <code>itertools</code> module.</p>

<p>I would separate out the generating of the pushups to be done from the total pushups. For this you can use two <code>range</code> objects and the <a href="https://docs.python.org/3/whatsnew/3.3.html#pep-380" rel="nofollow noreferrer"><code>yield from</code> (Python 3.3+) keyword combination</a>:</p>

<pre><code>def pushups(n):
    yield from range(1, n)
    yield from range(n, 0, -1)
</code></pre>

<p>The accumulation can be done using <a href="https://docs.python.org/3.7/library/itertools.html#itertools.accumulate" rel="nofollow noreferrer"><code>itertools.accumulate</code></a> and <a href="https://docs.python.org/3.7/library/itertools.html#itertools.tee" rel="nofollow noreferrer"><code>itertools.tee</code></a> to duplicate the generator:</p>

<pre><code>from itertools import accumulate, tee

def leader_step(n):
    gen1, gen2 = tee(pushups(n))
    return list(gen1), list(accumulate(gen2))

if __name__ == "__main__":
    print(leader_step(5))
# ([1, 2, 3, 4, 5, 4, 3, 2, 1], [1, 3, 6, 10, 15, 19, 22, 24, 25])
</code></pre>

<p>As noted in the comments by @Peilonrayz, it is not actually necessary to split the generator (as long as it fits into memory, which is very likely, given that presumably a human will try to do this training):</p>

<pre><code>def leader_step(n):
    training = list(pushups(n))
    return training, list(accumulate(training))
</code></pre>
    </div>