<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>A doc string reads nicer then # blockcomments</p>
<p>Consider making a doc string of that function, so you can do <code>help(validate_ip)</code> and it will print the doc string in the interpreter.</p>
</li>
<li><p>Adhere to PEP8</p>
<p>Functions and variables should be <code>snake_case</code> ie <code>def validate_ip(ip):</code></p>
</li>
<li><p>You could use the <code>all</code> keyword to check if each part is correct; this will return <code>False</code> for the first failure.</p>
</li>
<li><p>Make actual tests that ensure validity</p>
<p>Instead of printing tests, make actual tests either with <code>assert</code> or the modules <code>doctest</code> or <code>unittest</code>.</p>
</li>
<li><p>There is a module that does this for you</p>
<p>Python is often described as "batteries included", and here you could use the <code>ipaddress module</code>, which will validate an IP when you create the <code>IPv4Adress</code> object.</p>
</li>
</ol>
<h1>Reworked code</h1>
<pre><code>import doctest

def validate_ip(ip):
    """
    Checks if the ip address is valid
    args:
        ip (str): The IP address
    ret:
        A boolean: True for a a valid IP
    
    &gt;&gt;&gt; validate_ip('08.0.0.0')
    False

    &gt;&gt;&gt; validate_ip('192.169.0.1')
    True

    &gt;&gt;&gt; validate_ip('0.0.0.0')
    True

    &gt;&gt;&gt; validate_ip('192.168.123.456')    
    False

    &gt;&gt;&gt; validate_ip('oooh.0.0.1')
    False
    """
    ranges = ip.split('.')
    return len(ranges) == 4 \
        and all(
                r.isdigit() and                 # Check for digits
                int(r) in range(0, 256) and     # Check in range of 0-255
                (r[0] != "0" or len(r) == 1)    # Check for leading zero's
                for r in ranges
            )

if __name__ == '__main__':
    doctest.testmod()
</code></pre>
<h1>ipaddress module</h1>
<pre><code>from ipaddress import IPv4Address

def is_valid_ip(ip):
    try:
        IPv4Address(ip)
        return True
    except ValueError:
        return False
</code></pre>
    </div>