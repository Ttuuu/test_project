<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First, I'd prefer to parse the <code>int[]</code> into a <code>Node[]</code> or somesuch - I'd even argue the name of <code>node_value</code> is a code smell indicating that it should be a member called <code>value</code> of a type called <code>Node</code>. I believe this is part of what causes your consternation with the <code>header</code> variable.</p>

<p>Speaking of names, D naming conventions generally avoids underscores except for constants, so more idiomatic names would be <code>nodeValue</code> and <code>countMetadata</code> (which would perhaps more correctly be called <code>sumMetadata</code>).</p>

<p>One of the reasons you should parse to <code>Node[]</code> is it factors out the common parts between <code>node_value</code> and <code>count_metadata</code>, making their responsibilities clearer and the code easier to follow - remember, you're writing code for the next person who looks at it; the computer is happy with a string of bits that nobody can read.</p>

<p>Now, you mention genericity. For the most part, replacing <code>(ref int[] r)</code> with <code>(R)(ref R r) if (isForwardRange!R)</code> will deal with this. This templates the functions on the type of the range passed. Your code otherwise uses range functions (<code>front</code>, <code>popFront</code>, <code>take</code>, etc), so so no other change is necessary.</p>

<p>However, due to the structure of the file format, you will need to read all child nodes before getting at the metadata of a node. This limits the possible laziness of the solution. Since you are always iterating over every node, this doesn't matter a whole lot, but since that's one of the great benefits of ranges, it's worth pointing out.</p>

<p>As for consuming the range, there is no very simple, unobtrusive solution. You need to either create a temporary variable (like <code>p1</code>), have a duplicate function for the non-ref case, or use inner functions:</p>

<p><code>
int count_metadata(R)(R r0)
if (isForwardRange!R)
{
    int impl(ref R r) {
        // Same code as before, but call impl instead of count_metadata
    }
    return impl(r);
}
</code></p>

<p>You also mentioned efficiency. I don't think I can improve much on that. Both <code>count_metadata</code> and <code>node_value</code> are O(n), and my proposed solution doesn't change that.</p>
    </div>