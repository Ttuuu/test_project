<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I couldn't find any drawbacks in your code. Maybe one nitpicking:</p>

<p>instead of</p>

<pre><code>for idx, pair in enumerate(graph_1):
    if pair in crosses:
        dct[pair][0] = dct[pair][0] or idx+1
</code></pre>

<p>you can do</p>

<pre><code>for idx, coords in enumerate(graph_1, 1): 
    if coords in crosses:
        dct[coords][0] = dct[coords][0] or idx
</code></pre>

<p>But I can suggest another approach - storing the length of wire while tracing, instead of calculating it afterward. It allows to eliminate the <code>reaches</code> function at all. I tried to add this functionality into your solution, but too much changes are required - it is easier to write from the beginning.</p>

<p>I have my own solution, which uses this approach. It is different from your in many aspects:</p>

<ul>
<li>finding intersections happens at once for both part of the task. They are stored inside the <code>Grid</code> object.</li>
<li>every point of wire has the <strong>length</strong> and <strong>x, y</strong> coordinates, so why not to store this information together? I store these values into wire's dictionary in form of <code>(y, x) : length</code>.</li>
<li>using a dictionary instead of switch like <strong>if-else</strong> construction for <code>R, L, U, D</code> commands execution.</li>
</ul>

<p><strong>crossed_wires.py</strong></p>

<pre><code>class Grid:
    def __init__(self):
        self.commands = {
                            'R' : {"axis" : 'x', "step" : +1},
                            'L' : {"axis" : 'x', "step" : -1},
                            'U' : {"axis" : 'y', "step" : +1},
                            'D' : {"axis" : 'y', "step" : -1}
                        }
    def trace_wires(self, wire_1, wire_2):
        self.wire_1_coords = self.wire_coords_with_length(wire_1)
        self.wire_2_coords = self.wire_coords_with_length(wire_2)
        self.cross_coords = self.wires_intersections()

    def wire_coords_with_length(self, path):
        coords = {'x' : 0, 'y' : 0}
        wire_coords = {}
        wire_length = 0
        for move in path.split(','):
            direction = move[0] 
            magnitude = int(move[1:])

            axis = self.commands[direction]["axis"]
            step = self.commands[direction]["step"]

            start_axis_value = coords[axis]
            end_axis_value = start_axis_value + magnitude * step
            for new_axis_value in range(start_axis_value, end_axis_value + step, step):
                coords[axis] = new_axis_value
                new_coords = (coords['y'], coords['x'])

                if new_coords not in wire_coords:
                    wire_coords[new_coords] = wire_length
                    wire_length += 1

        return wire_coords

    def wires_intersections(self):
        intersections = self.wire_1_coords.keys() &amp; self.wire_2_coords.keys()
        intersections.remove((0, 0))
        return intersections

    def min_manhattan_dst(self):
        return min(abs(coords[0]) + abs(coords[1]) for coords in self.cross_coords)

    def min_wire_lens(self):
        return min(self.wire_1_coords[coords] + self.wire_2_coords[coords] for coords in self.cross_coords)

wire_1 = input()
wire_2 = input()

grid = Grid()
grid.trace_wires(wire_1, wire_2)

print(grid.min_wire_lens())
print(grid.min_manhattan_dst())
</code></pre>

<p>It gets data from the standard input, so in the Linux the usage will be:</p>

<pre><code>crossed_wires.py &lt; input.txt
</code></pre>

<p>My solution is a little slower than your (for each part separately), the difference is about <code>50 ms</code>. Probable it is caused by building a class.</p>
    </div>