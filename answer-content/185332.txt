<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You should usually not put the <code>import</code>s into your functions. While Python does not re-import a module it has already imported, it still needs to run the check for this. So this introduces an unnecessary overhead, when running the function multiple times. There are a few use cases for doing this, though, like not wanting to pollute the global namespace if that module does some dirty hacks during its initialization or it takes a very long time to import and you only want to do this sometimes (and only run the function once). But <code>random</code> is no such module.</p>

<hr>

<p>Your code makes this also too complicated. The biggest part of your algorithm is making sure that you don't re-use a letter you already used. You can use <a href="https://docs.python.org/3/library/random.html#random.sample" rel="nofollow noreferrer"><code>random.sample</code></a> for this, instead. It randomly samples (duh) from an iterable (well it needs to be iterable and indexable, actually), without replacement:</p>

<pre><code>import random

def anagram(value):
    '''Returns random anagram of given value'''
    return ''.join(random.sample(value, len(value)))
</code></pre>

<p>An alternative would be <a href="https://docs.python.org/3/library/random.html#random.shuffle" rel="nofollow noreferrer"><code>random.shuffle</code></a>, which shuffles a list in place, but this has the overhead of casting to a list first. The documentation actually recommends using the first one (which is also a lot clearer IMO).</p>

<pre><code>def anagram(value):
    '''Returns random anagram of given value'''
   value_list = list(value)
   random.shuffle(value_list)
   return ''.join(value_list)
</code></pre>

<hr>

<p>As for corner cases to test? The obvious one is the empty string <code>''</code>. Then maybe a string containing only one distinct letter, like <code>'aaa'</code> (to catch some very weird algorithm that only looks at the set of letters, which would be quite wrong, of course). And then finally maybe the scaling behavior of the algorithm so strings of increasing length.</p>

<p>All should be tested for example with this:</p>

<pre><code>from collections import Counter

def test_anagram_function(s):
    assert Counter(s) == Counter(anagram(s))
</code></pre>
    </div>