<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Rework the API</h1>

<p>The main issue with your code is the way you structured your API. It is a bit weird and not generic. If I want to compress a file, I need to write four lines of code:</p>

<pre><code>LZ77 lz77(5, 7);
lz77.readFileUncompressed("somepath");
lz77.compress();
lz77.createFileCompressed("somepath");
</code></pre>

<p>First of all, what numbers should I specify for <code>lookBufMaxSize</code> and <code>histBufMaxSize</code>? Unless I know the algorithm intimately, I don't have any clue what numbers are good. It would be better to have defaults, and a simple way to set these parameters, similar to how gzip has compression levels from 1 to 9.</p>

<p>Second, why do you have to specify a directory, but not the actual filename that is to be read or written? It would be better if the application can choose the complete filename.</p>

<p>Third, I need to read the file, compress it, and write it back in separate steps. But it is very unlikely that I would ever want to run these steps in a different order. So it would make much more sense to have a single function that does everything in one go, so I could write something like:</p>

<pre><code>LZ77 lz77(...);
lz77.compress("somepath/uncompressed.txt", "somepath/compressed.lz77");
</code></pre>

<p>But then it would even be better to avoid instantiating a class. What if we could just write:</p>

<pre><code>LZ77::compress("somepath/uncompressed.txt", "somepath/compressed.lz77");
</code></pre>

<p>Perhaps with an optional third parameter to set the compression level.
This will make the API much simpler, and prevent mistakes from happening.
For example, with your API it is probably not safe to reuse an instance of <code>class LZ77</code> without calling <code>reset()</code> between operations.</p>

<p>By limiting the input and output methods of the class to reading and writing files, you have made your code less general than possible. What if an application already has some data in memory, and wants to send a compressed version of it over the network? Having to write it out to file, then compressing it, writing it to another file, and reading back is hugely inefficient. Also, if the application does want to read and write to files, but already has an open input or output stream, it would be much nicer if you could pass in those.</p>

<p>Having a class keeping state would make more sense if you would support some kind of streaming interface, where an application could feed small amounts of data into the state at a time.</p>

<h1>Avoid large temporary buffers</h1>

<p>One way to improve memory usage is to get rid of the temporary buffers, which you can do if you make the API changes I mentioned above. If you are (de)compressing a file of N bytes, this will save you something in the order of 2*N bytes worth of memory.</p>
    </div>