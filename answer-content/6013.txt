<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>That <code>Thread.Sleep(1)</code> is a real problem, especially if you're going to use this to generate thousands or millions of coupons at a time. The only reason you need it is because you're creating a new instance of <code>Random</code> <strong>for each coupon</strong> and seeding that instance with the current time. The default constructor of <code>Random</code> already handles time-based seeding; if you make the instance static, you only need to construct it once and thus avoid the duplication issue.</p>

<p>I like @palacsint's idea of using a <code>List&lt;char&gt;</code> to store allowed characters and populating it with character-indexed <code>for</code> loops, although I'd make the list a lazy-initialized property rather than recreating it each time. And I fully agree with @Guffa's point about using <code>StringBuilder</code> to create the coupon rather than the <code>+=</code> operator.</p>

<pre><code>public class CouponGenerator
{
    private static List&lt;char&gt; _allowed = null;
    private static List&lt;char&gt; AllowedChars
    {
        get
        {
            if (_allowed == null)
            {
                _allowed = new List&lt;char&gt;();
                for (char c = 'A'; c &lt; 'Z'; c++)
                {
                    _allowed.Add(c);
                }
                for (char c = 'a'; c &lt; 'z'; c++)
                {
                    _allowed.Add(c);
                }
                for (char c = '0'; c &lt; '9'; c++)
                {
                    _allowed.Add(c);
                }
            }
            return _allowed;
        }
    }
    private static Random _rg = new Random();
    public static string GenerateCoupon(int length)
    {
        StringBuilder sb = new StringBuilder(length);
        for (int i = 0; i &lt; length; i++)
        {
            sb.Append(AllowedChars[_rg.Next(0, AllowedChars.Count)]);
        }
        return sb.ToString();
    }
}
</code></pre>
    </div>