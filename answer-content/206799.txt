<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li>There is no need for brackets in <code>class Matrix(): ...</code>. It can be just <code>class Matrix: ...</code>. See <a href="https://docs.python.org/3/tutorial/classes.html#class-definition-syntax" rel="nofollow noreferrer">docs</a> for class definition syntax.</li>
<li>In <code>self.rows = [[0]*width for i in range(height)]</code> you should replace <code>i</code> by <code>_</code> that we usually use for <a href="https://stackoverflow.com/questions/5893163/what-is-the-purpose-of-the-single-underscore-variable-in-python">throwaway variables</a>.  </li>
<li><p>In the same line <code>0</code> is a <a href="https://stackoverflow.com/questions/47882/what-is-a-magic-number-and-why-is-it-bad">magic number</a>. You could make it a default parameter: </p>

<pre><code>def __init__(self, height, width, fill_value=0):
    self.rows = [[fill_value] * width for _ in range(height)]
</code></pre></li>
</ol>

<hr>

<ol start="4">
<li><p>Regarding <code>__str__</code>: </p>

<blockquote>
<pre><code>def __str__(self):
    s = "\n" + "\n".join([str(i) for i in [rows for rows in self.rows] ]) + "\n"
    return s
</code></pre>
</blockquote>

<p>Having those <code>"\n"</code> on both ends seems unnecessary. Just return the middle part and let user decide if he wants more blank lines between output.</p></li>
<li><p><code>[rows for rows in self.rows]</code> is the same as <code>self.rows</code>. That leaves us:  </p>

<pre><code>def __str__(self):
    s = "\n".join([str(i) for i in self.rows])
    return s
</code></pre></li>
<li><p><code>i</code> is a bad name. <code>row</code> is better.</p></li>
<li><p>Removing unnecessary <code>s</code>: </p>

<pre><code>def __str__(self):
    return "\n".join([str(row) for row in self.rows])
</code></pre></li>
<li><p>And making it more concise: </p>

<pre><code>def __str__(self):
    return "\n".join(map(str, self.rows))
</code></pre></li>
</ol>

<hr>

<ol start="9">
<li><p>Regarding <code>__repr__</code>:</p>

<blockquote>
<pre><code>def __repr__(self):
    return (f'{self.__class__.__name__} ({self.height!r} , {self.width!r})')
</code></pre>
</blockquote>

<p>The brackets are unnecessary here, and spacing is a bit weird. It should be like this: </p>

<pre><code>return f'{self.__class__.__name__}({self.height!r}, {self.width!r})'
</code></pre></li>
<li><p>As you probably already know, with <a href="https://stackoverflow.com/questions/1984162/purpose-of-pythons-repr"><code>__repr__</code></a> you should be able to pass the returned string to Python interpreter so that it could recreate the object. But in your case information about the values in your matrix would be lost. What you return is just something like <code>Matrix(5, 5)</code>. Would this be OK? Probably it would be better if the values would be returned as well, but then the current logic of the class won't allow you to recreate the matrix as you separated filling (<code>fill_matrix</code>) from initializing. Maybe it would be better to be able to do both at the same time?</p></li>
</ol>

<hr>

<ol start="11">
<li><p><code>len</code> method should be called <code>__len__</code>.</p></li>
<li><p>As with current implementation its value is constant, you could use <a href="https://docs.python.org/3/library/functools.html#functools.lru_cache" rel="nofollow noreferrer"><code>lru_cache(1)</code></a> so to calculate it only once and then reuse the cached value:</p>

<pre><code>from functools import lru_cache

...

@lru_cache(1)
def __len__(self) -&gt; int:
    return self.height * self.width
</code></pre></li>
<li><p>You have some not implemented yet methods. Instead of returning nothing:  </p>

<blockquote>
<pre><code>def __add__(self, matrix2):
    return
</code></pre>
</blockquote>

<p>raise a <a href="https://docs.python.org/3/library/exceptions.html#NotImplementedError" rel="nofollow noreferrer"><code>NotImplementedError</code></a>:</p>

<pre><code>def __add__(self, matrix2):
    raise NotImplementedError
</code></pre></li>
</ol>

<hr>

<ol start="14">
<li><p>Regarding <code>fill_matrix</code>:</p>

<blockquote>
<pre><code>def fill_matrix(self, fill_list):
    index = 0
    for i in range(len(self.rows)):
        try:
            for j in range(len(self.rows[i])):
                self.rows[i][j] = fill_list[index]
                index += 1
        except IndexError:
            print (f"Matrix not filled \nMatrix fill stopped at: row {i}, Column {j}")
            break        
    return fill_list[index:]
</code></pre>
</blockquote>

<p>Add a docstring. It is not clear at the first sight why this method should return anything. Something like: </p>

<pre><code>def fill_matrix(self, fill_list):
    """
    Fills matrix by `fill_list`
    and returns what didn't fit in it.
    """
</code></pre></li>
<li><p>You are catching <code>IndexError</code> but this case seems impossible as indices are always taken from the ranges defined by shape of the matrix. You can remove it.</p></li>
<li><p>Why recalculating <code>len(self.rows)</code> and <code>len(self.rows[i])</code> if you already have <code>self.height</code> and <code>self.width</code>?</p></li>
<li><p>The idea of iterating the <code>index</code> doesn't seem Pythonic. How about something like this instead:  </p>

<pre><code>from itertools import product

...

def fill_matrix(self, fill_list):
    fill_values = iter(fill_list)

    indices = product(range(self.height), range(self.width))

    for (i, j), value in zip(indices, fill_values):
        self.rows[i][j] = value

    return fill_values
</code></pre>

<p>This can accept iterators or sequences and will return an iterator with "overflow". So if you need to use those leftovers, you get them like this:</p>

<pre><code>myMat = Matrix(5, 5)
overflow = myMat.fill(range(30))
print(list(overflow))
&gt;&gt;&gt; [25, 26, 27, 28, 29]
</code></pre></li>
<li><p>It would be better to rename <code>fill_matrix</code> as <code>fill</code> and its argument <code>fill_list</code> as <code>values</code>.</p></li>
</ol>

<hr>

<ol start="19">
<li><p>Regarding <code>add_value</code>. I think it's better to name it <code>replace</code> instead.</p></li>
<li><p>This method is too complicated and doesn't follow <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" rel="nofollow noreferrer">Single responsibility principle</a>. Catch the errors outside, and use this method just for replacing one value. If you need to replace multiple values, then put the function call inside the loop. See <a href="https://stackoverflow.com/questions/30759501/loop-inside-or-outside-a-function">this post</a> for a better explanation. In the end it should be as simple as that:  </p>

<pre><code>def insert(self, row_index, column_index, value):
    self.rows[row_index][column_index] = value
</code></pre>

<p>And you could call it, and catch and save the errors like this:</p>

<pre><code>import traceback

...

values = [(-1, 3, 500),
          (0, 0, 3),
          (51, 5, 7),
          (1, 2, 667),
          [3, 4, 676],
          (1),
          [3, 4, 676, 123],
          (1, "a", 1),
          (1, 1, "Â£")]

errors = []
bad_values = []

for value in values:
    try:
        myMat.insert(*value)
    except (IndexError, TypeError):
        errors.append(traceback.format_exc())
        bad_values.append(value)

for error, value in zip(errors, bad_values):
    print(f'Error occurred for value {value}:\n'
          f'{error}')
</code></pre>

<p>And the output is: </p>

<pre><code>Error occurred for value (51, 5, 7):
Traceback (most recent call last):
  File "C:/Users/Georgy/SO_CR/main.py", line 82, in &lt;module&gt;
    myMat.insert(*value)
  File "C:/Users/Georgy/SO_CR/main.py", line 55, in insert
    self.rows[row_index][column_index] = value
IndexError: list index out of range

Error occurred for value 1:
Traceback (most recent call last):
  File "C:/Users/Georgy/SO_CR/main.py", line 82, in &lt;module&gt;
    myMat.insert(*value)
TypeError: insert() argument after * must be an iterable, not int

Error occurred for value [3, 4, 676, 123]:
Traceback (most recent call last):
  File "C:/Users/Georgy/SO_CR/main.py", line 82, in &lt;module&gt;
    myMat.insert(*value)
TypeError: insert() takes 4 positional arguments but 5 were given

Error occurred for value (1, 'a', 1):
Traceback (most recent call last):
  File "C:/Users/Georgy/SO_CR/main.py", line 82, in &lt;module&gt;
    myMat.insert(*value)
  File "C:/Users/Georgy/SO_CR/main.py", line 55, in insert
    self.rows[row_index][column_index] = value
TypeError: list indices must be integers or slices, not str
</code></pre>

<p>You might be interested in Python <a href="https://docs.python.org/3/library/logging.html" rel="nofollow noreferrer">logging module</a> as well.
Though, I find it strange that you decided to pay so much attention to catching the errors.</p></li>
</ol>

<hr>

<p>Some other notes:</p>

<ul>
<li>Don't forget about naming conventions. <code>myMat</code> should be <code>my_matrix</code>, <code>Errors</code> should be <code>errors</code>. See <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP 8:</a> for more.</li>
<li>Consider using <a href="https://docs.python.org/3/library/typing.html" rel="nofollow noreferrer">type hints</a>. </li>
</ul>

<hr>

<p>In the end your code could look like this: </p>

<pre><code>from functools import lru_cache
from itertools import product
from typing import (Any,
                    Iterable,
                    Iterator)


class Matrix:
    def __init__(self,
                 height: int,
                 width: int,
                 fill_value: Any = 0) -&gt; None:
        self.height = height
        self.width = width
        self.rows = [[fill_value] * width for _ in range(height)]

    def __str__(self) -&gt; str:
        return "\n".join(map(str, self.rows))

    def __repr__(self) -&gt; str:
        return f'{self.__class__.__name__}({self.height!r}, {self.width!r})'

    @lru_cache(1)
    def __len__(self) -&gt; int:
        return self.height * self.width

    def __add__(self, matrix2):
        raise NotImplementedError

    def __mul__(self, matrix2):
        raise NotImplementedError

    def remove(self, item):
        raise NotImplementedError

    def fill(self, values: Iterable[Any]) -&gt; Iterator[Any]:
        """
        Fills matrix by `fill_values`
        and returns what didn't fit in it.
        """
        values = iter(values)

        indices = product(range(self.height), range(self.width))

        for (i, j), value in zip(indices, values):
            self.rows[i][j] = value

        return values

    def replace(self,
                row_index: int,
                column_index: int,
                value: Any) -&gt; None:
        """Replaces a value by given indices by a new one."""
        self.rows[row_index][column_index] = value
</code></pre>
    </div>