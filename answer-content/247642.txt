<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Welcome to Code Review.</p>
<h1>Formatting</h1>
<p>The first thing I did to your code was to apply <code>rustfmt</code> by typing
<code>cargo fmt</code>.  <code>rustfmt</code> formats your code to fit with Rust's standard
formatting guidelines.  Here's some notable changes.</p>
<pre><code>-    company = depts.into_iter()
-    .map(|x| x.to_string())
-    .zip(tup.iter().map(|y| {g = y.iter().map(|q| q.to_string()).collect(); g.clone()}))
-    .collect();
+    company = depts
+        .into_iter()
+        .map(|x| x.to_string())
+        .zip(tup.iter().map(|y| {
+            g = y.iter().map(|q| q.to_string()).collect();
+            g.clone()
+        }))
+        .collect();
</code></pre>
<p>Method invocation chains are indented.  Complex closures are formatted
over several lines.</p>
<pre><code>-    if length !=3 &amp;&amp; length !=4 {
+    if length != 3 &amp;&amp; length != 4 {
</code></pre>
<p>Most binary operators are surrounded by spaces.</p>
<h1>Clippy</h1>
<p>After that, <code>cargo clippy</code> pointed out some issues with your code.</p>
<pre><code>warning: unneeded `return` statement
   --&gt; src\main.rs:270:13
    |
270 |             return;
    |             ^^^^^^^ help: remove `return`
    |
    = note: `#[warn(clippy::needless_return)]` on by default
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
   --&gt; src\main.rs:332:13
    |
332 |             return;
    |             ^^^^^^^ help: remove `return`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
</code></pre>
<p>In Rust, functions automatically return when control flow reaches the
end of the function body, so the explicit <code>return</code>s are unnecessary.</p>
<pre><code>warning: value assigned to `company` is never read
  --&gt; src\main.rs:16:9
   |
16 |     let mut company = HashMap::new();
   |         ^^^^^^^^^^^
   |
   = note: `#[warn(unused_assignments)]` on by default
   = help: maybe it is overwritten before being read?
</code></pre>
<p>You assigned an initial value to <code>company</code>, but overwrote it
afterwards.  It is recommended to postpone the declaration of
<code>company</code> to the place you calculate it.</p>
<pre><code>warning: you don't need to add `&amp;` to both the expression and the patterns
  --&gt; src\main.rs:64:9
   |
64 | /         match &amp;&amp;keyword[..] {
65 | |             &amp;"EXIT" =&gt; return,
66 | |             &amp;"HELP" =&gt; help(),
67 | |             &amp;"ADD" =&gt; add(&amp;mut query, &amp;mut company),
...  |
71 | |             _ =&gt; (),
72 | |         }
   | |_________^
   |
   = note: `#[warn(clippy::match_ref_pats)]` on by default
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_ref_pats
help: try
   |
64 |         match &amp;keyword[..] {
65 |             "EXIT" =&gt; return,
66 |             "HELP" =&gt; help(),
67 |             "ADD" =&gt; add(&amp;mut query, &amp;mut company),
68 |             "LIST" =&gt; list(&amp;mut query, &amp;mut company),
69 |             "UPDATE" =&gt; update(&amp;mut query, &amp;mut company),
 ...
</code></pre>
<p>Self explanatory.</p>
<pre><code>warning: use of `or_insert` followed by a function call
  --&gt; src\main.rs:98:37
   |
98 |                 company.entry(dept).or_insert(Vec::new());
   |                                     ^^^^^^^^^^^^^^^^^^^^^ help: try this: `or_insert_with(Vec::new)`
   |
   = note: `#[warn(clippy::or_fun_call)]` on by default
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#or_fun_call
</code></pre>
<p><code>.or_insert(Vec::new())</code> always constructs the vector; if the entry
already exists, the newly constructed empty vector is discarded.  A
better alternative is <code>.or_default(Vec::new)</code>.  (It probably doesn't
make a big difference in this case though.)</p>
<h1>Structuring data</h1>
<p>In Chapter 5 <a href="https://doc.rust-lang.org/stable/book/ch05-00-structs.html" rel="nofollow noreferrer">Using Structs to Structure Related Data</a>, we learned
to use structs and methods to organize our data.  We can define some
<code>struct</code>s to clarify the meaning of our data:</p>
<pre><code>#[derive(Clone, Debug)]
struct Department {
    employees: Vec&lt;String&gt;,
}

#[derive(Clone, Debug)]
struct Company {
    departments: HashMap&lt;String, Department&gt;,
}
</code></pre>
<p>And we can build the preset data in an associated function:</p>
<pre><code>impl Company {
    fn preset() -&gt; Self {
        let departments = &amp;[
            ("SALES", &amp;["Sally", "Jordan", "Charlie", "Abigail"]),
            ("ENGINEERING", &amp;["Suzy", "Jay", "Chi", "Amy"]),
            ("HR", &amp;["Son", "Jack", "Chia", "Anna"]),
            ("SANITATION", &amp;["August", "Entangle", "Will", "Jada"]),
        ];

        Company {
            departments: departments
                .iter()
                .map(|&amp;(name, department)| {
                    (
                        name.to_string(),
                        Department {
                            employees: department.iter().map(|&amp;s| s.to_string()).collect(),
                        },
                    )
                })
                .collect(),
        }
    }
}
</code></pre>
<p>(Personally, I would prefer using serialization instead of hardcoding
the preset data.)</p>
<h1>Unnecessary allocation</h1>
<p>In <code>main</code>, there is an unnecessary allocation:</p>
<pre><code>query = query.trim().to_string();
</code></pre>
<p>You can simply make a reference into the original input:</p>
<pre><code>let query = query.trim();
</code></pre>
<p>Note that <a href="https://doc.rust-lang.org/stable/book/ch03-01-variables-and-mutability.html#shadowing" rel="nofollow noreferrer">shadowing</a> is used here to maintain the variable that
owns the original string.</p>
<h1>Input parsing</h1>
<p>You first check for empty input, and then use <code>.next().unwrap()</code>.
Just use a <code>match</code>:</p>
<pre><code>let query = query.trim();
let mut args = query.split_whitespace();

match args.next() {
    None =&gt; println!("Empty input. Type HELP for a keyword reference."),
    Some("ADD") =&gt; execute::add(args.collect(), &amp;mut company),
    Some("EXIT") =&gt; return,
    Some("HELP") =&gt; help(),
    Some("LIST") =&gt; execute::list(args.collect(), &amp;mut company),
    Some("REMOVE") =&gt; execute::remove(args.collect(), &amp;mut company),
    Some("UPDATE") =&gt; execute::update(args.collect(), &amp;mut company),
    Some(_) =&gt; println!("Invalid Keyword. Type HELP for a keyword reference."),
}
</code></pre>
<p>I put all the helper functions in a <code>execute</code> module.  I also changed
the parsing functions to take <code>args</code> by value.  The keyword is
excluded from the list of arguments.</p>
<h1><code>add</code></h1>
<p>Checking if a department exists can be done with the entry API:</p>
<pre><code>let department = department.to_uppercase();
match departments.entry(&amp;department) {
    Entry::Occupied(_) =&gt; println!("Department {} already exists.", d),
    Entry::Vacant(entry) =&gt; {
        entry.insert(Department::new());
        println!("Created department {}.", d);
    }
}
</code></pre>
<p>In fact, the whole function can be simplified with pattern matching:</p>
<pre><code>pub fn add(args: &amp;[&amp;str], company: &amp;mut Company) {
    let departments = &amp;mut company.departments;

    match *args {
        ["-D", department] =&gt; {
            use std::collections::hash_map::Entry;

            let department = department.to_uppercase();

            match departments.entry(department) {
                Entry::Occupied(entry) =&gt; {
                    println!("Department {} already exists.", entry.key())
                }
                Entry::Vacant(entry) =&gt; {
                    println!("Created department {}.", entry.key());
                    entry.insert(Department::new());
                }
            }
        }
        [name, "TO", department] =&gt; {
            let department = department.to_uppercase();

            let employees = match departments.get_mut(&amp;department) {
                None =&gt; {
                    println!("Department {} does not exist.", department);
                    return;
                }
                Some(department) =&gt; &amp;mut department.employees,
            };

            if employees.iter().any(|employee| employee == name) {
                println!("The name {} already exists in {}.", name, department);
            } else {
                employees.push(name.to_string());
                println!("Added {} to {}.", name, department);
            }
        }
        _ =&gt; println!("Invalid syntax."),
    }
}
</code></pre>
<p>Other functions can be simplified in a similar fashion.</p>
<h1><code>continue</code></h1>
<p>Similar to the implicit <code>return</code>, you do not need to explicitly
continue to the next iteration of the loop at the end of the loop
body.</p>
<h1><code>help</code></h1>
<p>The <a href="https://docs.rs/indoc/1.0/indoc/" rel="nofollow noreferrer"><code>indoc</code></a> crate provides a nice way to write multiline string
literals:</p>
<pre><code>pub fn help() {
    println!(indoc! { r#"
        &lt;fill in text here&gt;
    "#})
}
</code></pre>
<p>The indentation common to every line will be stripped, and the rest of
the indentation will be preserved.</p>
    </div>