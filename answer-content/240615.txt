<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Below your question:</p>

<blockquote>
  <p>Is it safe to say that in terms of time complexity the solution is
  optimal already?</p>
</blockquote>

<p>Yes, you are comparing chars from front and back of the string and stop when you encounter two different chars so this is a complexity O(n).</p>

<p>Some minor changes to your code, instead of iterate over your string transform it to a char array and instead of break the cycle return directly the result with the use of a <code>StringBuilder</code> for the result:</p>

<pre><code>char[] arr = string.toCharArray();

StringBuilder builder = new StringBuilder();
for (int i = 0; i &lt; half; ++i) {
    if (arr[i] != arr[len -1 -i]) {
        return builder.toString();
    }
    builder.append(arr[i]);
}

return string;
</code></pre>

<p>In this way you avoid the use of consecutive creation of substrings and the code is simpler.</p>

<p>Your method can be rewritten then in this equivalent way:</p>

<pre><code>public static String mirrorEnds(String string) {
    final int len = string.length();
    final int half = len / 2;
    char[] arr = string.toCharArray();

    StringBuilder builder = new StringBuilder();
    for (int i = 0; i &lt; half; ++i) {
        if (arr[i] != arr[len -1 -i]) {
            return builder.toString();
        }
        builder.append(arr[i]);
    }

    return string;
}
</code></pre>
    </div>