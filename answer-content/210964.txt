<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>General:</strong></p>

<p>Creating specialized controls for each use case was necessary with Windows Forms and it is still possible with WPF. However, WPF has powerful theming, styling and data binding capabilities, that allows to use the existing controls with customized templates / style.</p>

<p>If icon and text are not changing often, I would consider to use the build-in toggle button with 2 customized styles - one for the vertical and one for the horizontal aligned icon / text representation.</p>

<p><strong>Review:</strong></p>

<p>If you need a button where text and icon should be highly customizable, it makes sense to create a new button with additional dependency properties.</p>

<p>Some points that may improve the implemenation:</p>

<ul>
<li><p>use ToggleButton as base class and replace the "State" property with the exiting (and known by all developers) "IsChecked" property.</p></li>
<li><p>Instead of setting a "DataTemplate" to the "ContentTemplate" property, I would set a "ControlTemplate" to the "Template" property which is the right way for defining the appearance of a control.</p></li>
<li><p>use "TemplateBinding" for the wrapped controls, so that fontsize, color, ... can be configured.</p>

<pre><code>&lt;DataTemplate&gt;
        &lt;StackPanel Margin="5"
                    Orientation="{Binding Orientation, RelativeSource={RelativeSource AncestorType=Button}}"&gt;
            &lt;TextBlock Name="IconOff"  
                       FontFamily="{TemplateBinding FontFamily"}
                       HorizontalAlignment="Center"
                       FontSize="{TemplateBinding FontSize, Converter=FontSizeToIconSizeConverter}"
                       Text="{Binding Icon, RelativeSource={RelativeSource AncestorType=Button}}" /&gt;
            &lt;TextBlock Name="TextOff" 
                       FontFamily="{TemplateBinding FontFamily"}
                       HorizontalAlignment="Center"
                       FontSize="{TemplateBinding FontSize}"
                       Text="{Binding Text, RelativeSource={RelativeSource AncestorType=Button}}"
                       HorizontalAlignment="Center"
                       Margin="0,5,0,0" /&gt;
        &lt;/StackPanel&gt;
        ...
&lt;/DataTemplate&gt;
</code></pre></li>
<li><p>One Trigger can have mulitple setters, there is no need to define multiple DataTrigger with the same logic:</p>

<pre><code> &lt;DataTemplate.Triggers&gt;
            &lt;DataTrigger Binding="{Binding State, RelativeSource={RelativeSource AncestorType=Button}}"  Value="True"&gt;
                &lt;Setter TargetName="Text" Property="Text" Value="{Binding TextOn, RelativeSource={RelativeSource AncestorType=Button}}"/&gt;
                &lt;Setter TargetName="Icon"  Property="Text" Value="{Binding IconOn, RelativeSource={RelativeSource AncestorType=Button}}"/&gt;
            &lt;/DataTrigger&gt;
            &lt;DataTrigger Binding="{Binding State, RelativeSource={RelativeSource AncestorType=Button}}" Value="False"&gt;
                &lt;Setter TargetName="Text" Property="Text" Value="{Binding TextOff, RelativeSource={RelativeSource AncestorType=Button}}"/&gt;
                &lt;Setter TargetName="Icon"  Property="Text" Value="{Binding IconOff, RelativeSource={RelativeSource AncestorType=Button}}"/&gt;
            &lt;/DataTrigger&gt;
&lt;/DataTemplate.Triggers&gt;
</code></pre></li>
</ul>

<p>.</p>
    </div>