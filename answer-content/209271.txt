<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Welcome! Let's look at your code:</p>

<ul>
<li>I notice that you have code that appears to be part of a class, so I will be treating it as a class for the purposes of review. In your original code, you use a class to group all your operations together, but the class doesn't really serve a purpose (i.e. the method could exist independent of the class, with a name like <code>is_prime</code>). In your second version, you have two separate method, and while the encapsulation of different functionally is <em>better</em>, they are not connected in a meaningful way so it is not clear how you run the program. In both cases, a class is unnecessary: you could have a single function that prompts the user for a positive integer input, and another function that checks if a positive integer is prime or composite (which I will demonstrate below). Personally I store my input validation methods in a separate module that I've added to my <a href="https://docs.python.org/3/using/cmdline.html#envvar-PYTHONPATH" rel="nofollow noreferrer">PYTHONPATH</a>, since it's useful for many different projects if you use the command line often.</li>
<li>Commenting in general on your goal to "check the input implicitly", I would say this is misguided, but I will also say that you can use a <a href="https://docs.python.org/3/library/functions.html#property" rel="nofollow noreferrer"><code>property</code></a> decorator to implicitly check variables on assignment. However, as Michael mentions you still would need to loop to prompt input from the user until they enter valid input, so it's not really that usefully for input validation.</li>
</ul>

<p>Now, if you're trying to validate input in Python, <a href="https://stackoverflow.com/a/23294659/8117067">this SO answer</a> provides a good primer on the subject.</p>

<ul>
<li>Your <code>check_digit</code> method checks if the input is valid before the user actually enters any input. As mentioned in the above answer, <code>while True</code> and with an <code>if valid: break</code> is a better structure for this kind of validation.</li>
<li>Your <code>userinput</code> method is ambiguously named (you can't tell what it does from the name alone), and it's broken: it only checks if <code>2</code> is prime before breaking. You need to <em>only</em> check if the number is composite inside the loop, and return prime if a composite factor is not detected.</li>
</ul>

<p>Here's code that demonstrates the principles I mention above:</p>

<pre><code>def prompt_positive_number(message):
    while True:
        try:
            num = int(input(message))
            if num &lt;= 0:
                message = "Please enter a positive number. "
            else:
                return num
        except ValueError:
            message = "Please enter a number. "

def is_prime(num):
    for i in range(2, num):
        if num % i == 0:
            return False
    return True

if __name__ == "__main__":
    user_input = prompt_positive_number("Check if a number is prime: ")
    if is_prime(user_input):
        print(user_input, "is prime!")
    else:
        print(user_input, "is composite!")
</code></pre>

<p>There's one more optimization I can use to make my code even shorter: using the built-in function <a href="https://docs.python.org/3/library/functions.html#any" rel="nofollow noreferrer"><code>any</code></a> for <code>is_prime</code>:</p>

<pre><code>def is_prime(num):
    return not any(num % i == 0 for i in range(2, num))
</code></pre>

<p>Or, reversing the equality check, <a href="https://docs.python.org/3/library/functions.html#all" rel="nofollow noreferrer"><code>all</code></a> is even shorter:</p>

<pre><code>def is_prime(num):
    return all(num % i != 0 for i in range(2, num))
</code></pre>

<p>Finally, commenting on the algorithm, there are more efficient ways to check if a number is prime; however, this is outside of the scope of my knowledge and you'd have to do your own research on that. Rather famously in the world of <a href="https://en.wikipedia.org/wiki/Computational_complexity" rel="nofollow noreferrer">computational complexity</a>, it was proved that <a href="https://en.wikipedia.org/wiki/AKS_primality_test" rel="nofollow noreferrer">primes is in P</a>.</p>
    </div>