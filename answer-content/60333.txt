<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strike>Using reflection for that simple task is a slow and an inefficient way of doing it, your first approach was fine, you could trim it a little, for example:</strike></p>

<pre><code>func in_array(val string, array []string) (ok bool, i int) {
    for i = range array {
        if ok = array[i] == val; ok {
            return
        }
    }
    return
}
</code></pre>

<p>Generic version using interfaces:</p>

<pre><code>func in_array(v interface{}, in interface{}) (ok bool, i int) {
    val := reflect.Indirect(reflect.ValueOf(in))
    switch val.Kind() {
    case reflect.Slice, reflect.Array:
        for ; i &lt; val.Len(); i++ {
            if ok = v == val.Index(i).Interface(); ok {
                return
            }
        }
    }
    return
}
</code></pre>

<p><a href="http://play.golang.org/p/Z7A4NuqF4J" rel="nofollow"><kbd>playground</kbd></a></p>
    </div>