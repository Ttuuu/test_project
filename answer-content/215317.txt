<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First, taking a look at your code as a consumer of your API:</p>

<ol>
<li><p>I like that the autocomplete for <code>.on("</code> shows what events I can listen to.</p></li>
<li><p>How do I stop listening to an event? If I don't want <code>countDown</code> events anymore then I have to do <code>countDown.listeners.get("countDown")!.splice(index, 1)</code> which is ugly.</p></li>
<li><p>How do I cancel a countdown?</p></li>
<li><p>Why is <code>listeners</code> exposed? This is an internal property of your class that I shouldn't need to know about as a consumer. It should be either <code>private</code> or <code>protected</code>. It's also probably worth marking <code>startCountDown</code> as <code>private</code> or <code>protected</code>.</p></li>
<li><p>Why does the <code>expired</code> event pass an extra parameter, <code>isExpired</code>? If the <code>expired</code> event is fired, doesn't that imply that the countdown is expired?</p></li>
<li><p>The <code>countDown</code> event is not fired every second. What happened to second 9 and 6?</p>

<p>This is a common problem with timers, and is present in (almost) every JavaScript clock/timer question on this site. There are several possible solutions, the simplest of which is to check the time more frequently. The <a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout#Reasons_for_delays_longer_than_specified" rel="nofollow noreferrer">MDN notes</a> on it is worth reading.</p>

<p>[![broken countdown ticks][1]][1]</p></li>
</ol>

<h3>TypeScript specific notes:</h3>

<ol>
<li><p>Turn on strict null checks. Yesterday. Without it, TypeScript ignores a whole class of errors.</p></li>
<li><p>Turn on no implicit any. Once turned on this will point out that the <code>on</code> method has a return type of <code>any</code></p></li>
<li><p>Don't create a class to just hold properties. An interface is fine.</p>

<pre class="lang-ts prettyprint-override"><code>interface CountDownValues {
    days: number;
    hours: number;
    minutes: number;
    seconds: number;
}
</code></pre></li>
<li><p>Consider initializing properties where they are declared when using classes.</p></li>
</ol>

<h3>Other:</h3>

<ol>
<li><p><code>new Date().getTime()</code> can be more concisely written as <code>Date.now()</code></p></li>
<li><p>The <code>thousand</code>, <code>sixty</code>, and <code>twentyfour</code> variables make it harder to read your code. Get rid of them. You can make the code more readable by instead defining <code>day</code>, <code>hour</code>, etc.</p></li>
<li><p>Countdown is a word, you don't need to capitalize the D.</p></li>
<li><p>Using a map for events here is probably overkill. There are only two events and they are both known at compile time. I'd just use an object.</p></li>
<li><p><code>countDown</code> is kind of an odd name for an event, without looking at your code I had no idea when it would be fired. I prefer <code>tick</code>, but there are other good options.</p></li>
</ol>

<h3>Rewrite:</h3>

<p>I kept the feature set <em>mostly</em> the same, but wanted to add the ability to stop the timer, remove event listeners, and initialize a countdown before starting it. I let this run for ~15 minutes, and it never skipped a second or repeated one twice, which isn't conclusive, but I'm fairly confident it is stable.</p>

<p>Note that instead of firing the <code>tick</code> function multiple times per second, I do some math to figure out how long to wait and then schedule a tick based on that. This results in some more complicated code, but avoids the need to track what the last reported second was.</p>

<pre class="lang-ts prettyprint-override"><code>interface TickEvent {
    days: number;
    hours: number;
    minutes: number;
    seconds: number;
}

interface CountdownEvents {
    tick(values: TickEvent): void;
    expired(): void;
    stop(): void;
}

// Unfortunately we can't use T[K][] without getting messy.
type EventMap&lt;T&gt; = { [K in keyof T]: Function[] };

class Countdown {
    private listeners: EventMap&lt;CountdownEvents&gt; = { tick: [], expired: [], stop: [] };
    private timer?: number;

    on&lt;K extends keyof CountdownEvents&gt;(eventName: K, listener: CountdownEvents[K]): void {
        this.listeners[eventName].push(listener);
    }

    off&lt;K extends keyof CountdownEvents&gt;(eventName: K, listener: CountdownEvents[K]): void {
        const listeners = this.listeners[eventName];
        const index = listeners.indexOf(listener);
        if (index !== -1) {
            listeners.splice(index, 1);
        }
    }

    start(date: Date) {
        const end = Math.floor(date.getTime() / 1000);

        const tick = () =&gt; {
            const now = Date.now();
            const nowSec = Math.floor(now / 1000);
            const time = end - nowSec;

            if (time &lt;= 0) {
                delete this.timer;
                this.listeners.expired.forEach(listener =&gt; listener());
                return;
            }

            const minute = 60;
            const hour = minute * 60;
            const day = hour * 24;

            const days = Math.floor(time / day);
            const hours = Math.floor(time % day / hour);
            const minutes = Math.floor(time % hour / minute);
            const seconds = time % minute;

            this.listeners.tick.forEach(listener =&gt; listener({ days, hours, minutes, seconds }));

            const timeToNextSecond = (nowSec + 1) * 1000 - now;
            this.timer = setTimeout(tick, timeToNextSecond);
        }

        tick();
    }

    stop() {
        if (this.timer) {
            clearTimeout(this.timer);
            delete this.timer;
            this.listeners.stop.forEach(listener =&gt; listener());
        }
    }
}

const countdown = new Countdown();
countdown.on("tick", event =&gt; console.log("tick", event));
countdown.on("expired", () =&gt; console.log("expired"));
countdown.on("stop", () =&gt; console.log("stopped"));

const date = new Date();
date.setSeconds(date.getSeconds() + 20);
countdown.start(date);

setTimeout(() =&gt; countdown.stop(), 3 * 1000);
</code></pre>
    </div>