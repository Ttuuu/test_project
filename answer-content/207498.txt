<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>OP only asked a few direct questions.</p>

<blockquote>
  <p>When either a tab or a single blank would suffice to reach a tab stop, which should be given preference?</p>
</blockquote>

<p>Use <em>blanks</em> <code>' '</code>.  </p>

<p><a href="https://stackoverflow.blog/2017/06/15/developers-use-spaces-make-money-use-tabs/">Developers Who Use Spaces Make More Money Than Those Who Use Tabs</a></p>

<hr>

<blockquote>
  <p>For lines that can fit in the buffer, the solution is straightforward. However, what if they can't?</p>
</blockquote>

<p>Use a generous buffer.  <strong>And</strong> when the line does not fit in the buffer, exit with a failure message. </p>

<p>Let us go deeper ...</p>

<p>When memory was expensive, too often code used fixed size small buffers, leading to problems with expanded uses.</p>

<p>With cheap memory, code could be written to allow for re-allocated read buffers sizes, virtually unlimited yet technically limited to <code>SIZE_MAX</code>.</p>

<p>This value can readily exceed the memory capacity of the platform.</p>

<p>Now we live in an era of code security vs. hacking.  A program that allows external input to readily consume system  resources is a hacker target as part of an exploitation.  For the purpose of en-tabbing a line, why support 1 Gbyte long lines?  Say code limited lines to 1 MByte.  Yes once in a great while some application will die due to a <em>long</em> line and a Defect Report may ensue - and go to the bottom of the list in resolution handling.  Risk vs. reward: handling ever larger lines vs. greater extrapolation risk.</p>

<p>In any case, C has an <em>Environmental limit</em>, </p>

<blockquote>
  <p>An implementation shall support text files with lines containing at least 254 characters, including the terminating new-line character. The value of the macro <code>BUFSIZ</code> shall be at least 256.  C11dr §7.21.2 7</p>
</blockquote>

<p>Any code working with lines much larger than <code>BUFSIZ</code> runs into that limitation and so risks UB.</p>

<p>I recommend:</p>

<ul>
<li>Use buffers 2x the largest expected need for that task.  In this case, consider <code>#define LINEBUF (BUFSIZ+1u)</code> or <code>#define LINEBUF (BUFSIZ*2u)</code> and allocate <code>char *line</code>.</li>
<li>Treat long input as non-compliant and either reject the partial line and the rest of the line OR fail the code with a message.</li>
</ul>

<p>Note: On many platforms, code can allocate very large buffers with <code>*alloc()</code> and not truly consume resources until needed.  <a href="https://stackoverflow.com/q/19991623/2410359">Why is malloc not “using up” the memory on my computer?
</a>.</p>

<hr>

<blockquote>
  <p>For lines that can fit in the buffer, the solution is straightforward. However, what if they can't?  (Take 2)</p>
</blockquote>

<p><em>Entab</em> only requires about a few bytes.  Think <a href="https://en.wikipedia.org/wiki/Finite-state_machine" rel="nofollow noreferrer">state machine</a>.  Re-write code.  See below.</p>

<hr>

<blockquote>
  <p>Other</p>
</blockquote>

<p><strong>Conditions</strong></p>

<p>Conditions like <code>LINEBUF &gt;= MAXTW</code> can be made into a compile time check</p>

<pre><code>#if !(LINEBUF &gt;= MAXTW)
  #error Buffer size too small
#endif
</code></pre>

<p>Also research <a href="https://stackoverflow.com/questions/3385515/static-assert-in-c">Static assert in C</a>.</p>

<p><strong>Overview</strong></p>

<p>Nice format and good style.</p>

<p><strong>getline()</strong></p>

<p><a href="http://man7.org/linux/man-pages/man3/getline.3.html" rel="nofollow noreferrer"><code>ssize_t getline(char **, size_t *, FILE *)</code></a> is a popular *nix function that conflicts with OP's <code>size_t getline(char s[], size_t sz)</code>.  Consider a different name <code>my_getline()</code>.</p>

<p>Suggested alternative with, IMO, improvements. (Ignoring "<code>break</code> not introduced yet")</p>

<pre><code>size_t my_getline(char s[], size_t sz) {
  if (sz &lt;= 0) { // Handle this pathological case right away
    return 0;
  }
  sz--;

  int c = 0;
  size_t i = 0;
  while (i &lt; sz &amp;&amp; (c = getchar()) != EOF) {
    s[i++] = (char) c;
    if (c == '\n') {
      break;
    }
  }

  if (c == EOF &amp;&amp; !feof(stdin)) { // EOF due to read error
    i = 0;
  }
  s[i] = '\0';
  return i;
}
</code></pre>

<p>Note: OP's code has UB in the pathological case <code>sz == 1</code> as it tests uninitialized <code>c</code> with <code>c == EOF</code>.</p>

<p><strong>copy()</strong></p>

<p>Alternative code for consideration:</p>

<pre><code>void copy(char * restrict to, char const * restrict from) {
  while ((*to++ = *from++));
}
</code></pre>

<p><strong>entab()</strong></p>

<p>Alternative code for consideration:</p>

<p>With the following there is no  limitation on tab width, line length (other than <code>int</code>).  No <code>LINEBUF</code> or <code>MAXTW</code> buffers needed.  Just 3 <code>int</code>.</p>

<pre><code>#define PRT_TAB "^I"
#define TAB_WIDTH 4
#define FAVORRED ' '

void entab(FILE *istream) {
  int queued_spaces = 0;
  int tab_position = 0;
  int ch;
  while ((ch = fgetc(istream))  != EOF) {
    if (ch == ' ') {
      queued_spaces++;
      tab_position++;
      if (tab_position == TAB_WIDTH) {
#if FAVORRED == '\t'
        putchar('\t');
#else
        if (queued_spaces == 1) putchar(' ');
        else fputs(PRT_TAB, stdout);
#endif
        queued_spaces = 0;
        tab_position = 0;
      }
    } else if (ch == '\t') {
      fputs(PRT_TAB, stdout);
      queued_spaces = 0;
      tab_position = 0;
    } else {
      while (queued_spaces &gt; 0) {
        putchar(' ');
        queued_spaces--;
        tab_position++;
      }
      putchar(ch);
      tab_position++;
      tab_position %= TAB_WIDTH;
    }
  }
  while (queued_spaces &gt; 0) {
    putchar(' ');
    queued_spaces--;
  }
}

int main(void) {
  int ch;
  FILE *istream = fopen("Input", "rb");
  assert(istream);
  puts("Input");
  while ((ch = fgetc(istream))  != EOF) {
    putchar(ch);
  }
  rewind(istream);
  puts("");

  puts("Output");
  entab(istream);
  fclose(istream);
}
</code></pre>
    </div>