<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A couple of stylistic comments and python gotchas:</p>

<p>If you are just starting out in Python I would look to use Py3 and if you can't use Py3, use some of the <code>__future__</code> imports to ensure you are writing code that is compatible and behaves the same, e.g.:</p>

<pre><code>from __future__ import print_function   # print(...)
from __future__ import division         # a / b - float division, a // b - integer division
</code></pre>

<p>This will make the transition to Py3 easier.</p>

<p>I find it very hard to read when you have <code>if</code> statements that are collapsed on one line and especially if there is no empty line afterwards, e.g.:</p>

<pre><code>    if(list_of_all_quotients[-1] == 1 ):list_of_all_quotients.pop()       
    #remove the duplicate elements in the list
    set_of_factors = set(list_of_all_quotients)
</code></pre>

<p>Also, you don't need parens <code>()</code> around <code>if</code> expressions, e.g. above:</p>

<pre><code>    if list_of_all_quotients[-1] == 1:
       list_of_all_quotients.pop()

    #remove the duplicate elements in the list
    set_of_factors = set(list_of_all_quotients)
</code></pre>

<p>Having a <code>pass</code> block in the if condition can be removed by just checking the negative of the condition, e.g.:     </p>

<pre><code>     if (index + 1 == len(factors)):
         pass
     else:
         print separator,
</code></pre>

<p>Can be replaced with:</p>

<pre><code>     if index+1 != len(factors):
         print separator,
</code></pre>

<p>You have to be very careful with mutable default arguments (see: <a href="https://stackoverflow.com/questions/1132941/least-astonishment-and-the-mutable-default-argument">“Least Astonishment” and the Mutable Default Argument</a>). In many cases you don't need the default argument in your code as it is required for the call to succeed.<br>
E.g. In general, you would be only able to call this function once without passing in <code>list_to_printed</code> or the next call would give you unexpected results but you usage doesn't have this problem because you always pass in the list (suggest you remove the default argument):</p>

<pre><code>def print_factors(number, list_to_be_printed=[], separator=''):
</code></pre>

<p>Why do you want to do this recursively? Recursive algorithms tend to have good partitioning of the problem into smaller sub problems - factorization doesn't feel like that is the case. Python's default recursion depth is relatively low and python doesn't perform recursion optimisations that other languages designed for recursion perform, so you often pay a penalty for recursion (call stack).</p>

<p>Overall the algorithmic complexity is much higher than it needs to be. An easier way to find prime factors is to have a good reliable algorithm for generating primes:</p>

<p>Here's a relatively simple prime number generator:</p>

<pre><code>import itertools as it

def primes():
    yield 2
    sieve = {}
    for n in it.count(3, 2):
        if n not in sieve:
            sieve[n*n] = 2*n
            yield n
            continue
        a = sieve.pop(n)
        x = n + a
        while x in sieve:
            x += a
        sieve[x] = a
</code></pre>

<p>Then to get the prime factors of a number:</p>

<pre><code>def prime_factors(n):
    for p in primes():
        while n % p == 0:
            n //= p
            yield p
        if p*p &gt; n:
            break
    if n &gt; 1:
        yield n

In []:
list(prime_factors(120))

Out[]:
[2, 2, 2, 3, 5]
</code></pre>

<p>You can use a <code>collections.Counter</code> to hold both the factors and exponents, e.g.</p>

<pre><code>In []:
from collections import Counter
pfactors = Counter(prime_factors(120))
pfactors

Out[]:
Counter({2: 3, 3: 1, 5: 1})
</code></pre>

<p>So now the unique primes are <code>pfactors.keys()</code> and their exponents are <code>pfactors.values()</code>:</p>

<p>You can then you this to generate all the <code>factors</code> from the primes and their exponents, by multplying together all the primes with every combination of exponent up to <code>pfactor.values()</code></p>

<pre><code>In []:
factors = []
for exponents in it.product(*[range(e+1) for e in pfactors.values()]):
    factor = 1
    for prime, exponent in zip(pfactors.keys(), exponents):
        factor *= prime**exponent
    factors.append(factor)

factors

Out[]:
[1, 5, 3, 15, 2, 10, 6, 30, 4, 20, 12, 60, 8, 40, 24, 120]
</code></pre>

<p>You can obviously sort it with <code>sorted()</code> e.g.:</p>

<pre><code>In []:
sorted(factors)

Out[]:
[1, 2, 3, 4, 5, 6, 8, 10, 12, 15, 20, 24, 30, 40, 60, 120]
</code></pre>
    </div>