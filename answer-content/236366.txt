<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You don't need the loop. Once <code>i &gt; 0</code>, the <code>if</code> statement will always be <code>False</code>:</p>

<pre class="lang-py prettyprint-override"><code>x = 'abba'
x[0::1] == x[::-1]
True

x[1::1] == x[::-1]
False

x[1::1]
'bba'
</code></pre>

<p>So drop the iteration. Besides, the immediate <code>return</code> won't allow for iteration anyways, a second iteration will never be reached:</p>

<pre class="lang-py prettyprint-override"><code>def is_palindrome(x):
    x = x.lower()

    if x[::-1] == x:
        return f'{x} is a palindrome'
    else:
        return f'{x} is not a palindrome'
</code></pre>

<p>You don't need the parentheses with <code>return</code>, and I'd use f-strings instead of <code>%</code> formatting if you're on python 3.5+.</p>

<p>If you are adding the possibilities of spaces/punctuation, you could change <code>x</code> to only include alphabet chars:</p>

<pre class="lang-py prettyprint-override"><code>def is_palindrome(x):
    # this will produce only alphabet lowercase chars
    # and join them into a string, though I'm not sure if
    # this is a use case for you
    x = ''.join(filter(str.isalpha, x.lower()))

    if x[::-1] == x:
        return f'{x} is a palindrome'
    else:
        return f'{x} is not a palindrome'
</code></pre>

<p>To show what that join statement does:</p>

<pre class="lang-py prettyprint-override"><code># maybe this should be a palindrome if you ignore the
# non-alpha chars including spaces
x = "ABC1234CB a."

y = ''.join(filter(str.isalpha, x.lower()))
'abccba'
</code></pre>

<h2>Edit</h2>

<p>To address concerns in the comments, if you wanted to offer options into what kind of filtering you want to provide, you could use a dictionary to act as a mapping:</p>

<pre class="lang-py prettyprint-override"><code>from functools import partial

def is_palindrome(input_str, filter_type='nofilter'):
   """
   Parameter 'filter_type' defaults to pass-through, but you can
   provide options such as 'alphanum', 'nospace' (to just get rid of spaces), and 'alpha'
   """
   filters = {
       'alpha': partial(filter, str.isalpha),
       'alphanum': partial(filter, str.isalnum),
       'nospace': partial(filter, lambda char: not char.isspace()),
       'nofilter': partial(map, lambda char: char) # this is just a pass-through 
   }

   # raise this exception just so the use is more clear to the user
   # what is expected
   try:
       f = filters[filter_type]
   except KeyError as e:
       raise ValueError(
           f"Invalid filter_type, choose one of {'\n'.join(filters)}"
       ) from e

   x = ''.join(filter_type(input_str.lower()))

   # you can just check the first half of the string
   # against the last half reversed, rather than comparing the entire string 
   midpoint = len(x) // 2
   if len(x) % 2: # even length
       a = b = midpoint
   else:
       a, b = midpoint + 1, midpoint

   return x[:a] == x[b::-1]
</code></pre>

<p><a href="https://docs.python.org/3.6/library/functools.html#functools.partial" rel="nofollow noreferrer"><code>partial</code></a> will bind arguments to a function and return a new callable. As a small example:</p>

<pre class="lang-py prettyprint-override"><code>def f(a):
    return a

g = partial(f, 1)
f(2)
2

g()
1
</code></pre>

<p>Which is helpful for taking a function that takes many arguments and returning one that takes fewer arguments.</p>

<p>Credit to <a href="https://codereview.stackexchange.com/a/236367/185198">Toby Speight</a> for returning <code>bool</code> type, @Baldrickk for midpoint slice, and @Peilonrayz for concern over input filtering.</p>
    </div>