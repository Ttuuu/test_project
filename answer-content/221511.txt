<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>General Code Review</h1>

<p>First, your function and my proposed changes (<code>entropy'</code>) side-by-side.</p>

<pre class="lang-hs prettyprint-override"><code>import Data.List (foldl1', foldl')

entropy :: [Int] -&gt; Int -&gt; Int -&gt; Double
entropy itemFrequencies totalElements logarithmicBase =
  -(foldl1' (+) $ map (\p -&gt; p * (logBase b p)) probabilities)
    where
      is = map fromIntegral itemFrequencies
      l  = fromIntegral totalElements
      b  = fromIntegral logarithmicBase
      probabilities = map (\i -&gt; i / l) $ is

entropy' :: (Foldable f, Integral a, Floating b) =&gt; a -&gt; a -&gt; f a -&gt; b
entropy' totalElems base =
  negate . foldl' (\ent f2 -&gt; ent + freqEntropy f2) 0
  where
    freqEntropy f = let p = (fromIntegral f) / l
                    in  p * logBase b p
    l             = fromIntegral totalElems
    b             = fromIntegral base
</code></pre>

<p>My comments, in an arbitrary order:</p>

<ol>
<li>Why are you using <code>foldl1'</code>? It makes sense to use <code>foldl'</code> from a performance perspective, but it isn't clear to me why you require a nonempty list. Perhaps use a <code>Maybe</code> to encapsulate this possibility of failure, or outline why you expect a nonempty list in a comment. It's a good idea to keep tabs on where your partial functions are to avoid surprises at runtime. My function just returns 0 for a null <code>Foldable</code>.</li>
<li>Your types can be generalized more than <code>Int</code> and <code>Double</code>, if you want this to be more flexible/reusable. What I did to find these types was track down what functions you were using and figure out what their types were (which were more general than <code>Int</code> or <code>Double</code> or <code>[]</code>). Then I resolved the overall function to its most general type. Whether this is necessary or useful depends on your application. I think the most useful generalization here is to <code>Foldable</code> in case you wanted to calculate entropy of things that were not lists.</li>
<li>When I changed to generalize to <code>Foldable</code>, I rolled all of the <code>map</code>s into the <code>foldl'</code>. This may be more performant if the compiler doesn't combine <code>map</code>s, but it's also a tad bit more complicated to understand.</li>
<li>I moved the <code>itemFrequencies</code> to be the last argument so I could write the function pointfree. Pointfree is kind of cute, but if you think it's more readable you can change the order and/or put the explicit <code>itemFrequencies</code> back in.</li>
<li>I added an explicit call to <code>negate</code> (I didn't get what was going on at first with the <code>-(foldl1' ...)</code>).</li>
<li>I shortened the names so that things are not overwhelmingly long or verbose. This is just my personal taste. I think if you're going to have descriptively long variable names, you shouldn't skimp on the description for your temporary variables. I think <code>b</code> is OK since it's a common variable for base, but I would recommend using something like <code>len</code> instead of <code>l</code> and <code>itemFreqs'</code> instead of <code>is</code>.</li>
</ol>

<h1>Performance and Profiling</h1>

<p>I can't really help you on this front. GHC does have a <a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/profiling.html" rel="nofollow noreferrer">profiler</a>, which might be useful if you want to do some serious profiling.</p>
    </div>