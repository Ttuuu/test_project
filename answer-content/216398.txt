<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>For much more optimization, you might dig into the source for <a href="https://en.wikipedia.org/wiki/Fractint" rel="nofollow noreferrer">Fractint</a>.  It was written in the late '80s/early '90s for hardware that was thousands of times slower than modern CPUs (but could generate the image you generated in less than a minute, in 640x480 tiles, of course).  One of the "big deals" with FractInt was that most of the implementation uses integer math to implement fixed-point arithmetic (a much bigger deal when floating point was either emulated by slow-ish libraries or by means of optional, expensive, external chips (see Intel <a href="https://en.wikipedia.org/wiki/Intel_8087" rel="nofollow noreferrer">8087</a> through <a href="https://en.wikipedia.org/wiki/X87#80387" rel="nofollow noreferrer">80387</a>)).</p>

<p>Another area of improvement : divide the image into squares.  Since the Mandelbrot set is connected, if a square has no point of the set on its boundary, it has no point of the set in its interior.  This leads to <a href="https://en.wikipedia.org/wiki/Mandelbrot_set#Border_tracing_/_edge_checking" rel="nofollow noreferrer">edge-following</a> as a strategy to vastly reduce the number of pixels that must actually be calculated.</p>

<p>Source as well as MS-DOS and Win 3.x executables are still <a href="http://archives.math.utk.edu/software/msdos/fractals/fractint/" rel="nofollow noreferrer">available</a>.</p>
    </div>