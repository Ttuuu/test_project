<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>1. Testing</h3>

<p>Let's take a look at your second problem:</p>

<blockquote>
  <p>I've tested it on rather trivial cases, but have no way of knowing [...] if it returns the correct answer in more intricate examples</p>
</blockquote>

<p>A good strategy in this kind of situation, where you have a complex implementation that you are not sure is correct, is to implement a simple and clearly correct (but slow) solution. Then you can generate some test data and compare the outputs of the two implementations.</p>

<p>But before doing that, I have to confront an ambiguity in the problem description: am I supposed to count <em>all</em> the triples satisfying the "lucky" condition, or only the <em>distinct</em> triples? The examples in the problem description don't make this clear. So the only thing I have to go on is your implementation, and you've used the "distinct triples" interpretation:</p>

<pre><code>&gt;&gt;&gt; answer([1, 1, 1, 1])
1
</code></pre>

<p>(In the "all triples" interpretation, the result here would be 4.)</p>

<p>So, back to writing a slow-but-correct implementation. Let's write a function that loops over all the triples, checks each one to see if it is lucky, and builds a set (to ensure distinctness):</p>

<pre><code>from itertools import combinations

def lucky_triples(iterable):
    """Return the set of distinct triples x, y, z from an iterable of
    numbers, such that x &lt;= y &lt;= z and x divides y and y divides z.

    """
    return set((x, y, z)
               for x, y, z in combinations(sorted(iterable), 3)
               if y % x == 0 and z % y == 0)
</code></pre>

<p>Then we can use this as an <a href="https://en.wikipedia.org/wiki/Oracle_(software_testing)">oracle</a> for our tests:</p>

<pre><code>from random import randrange

def test(m, n):
    data = [randrange(1, m) for _ in range(n)]
    if answer(data) != len(lucky_triples(data)):
        print("Failed on {!r}".format(data))
</code></pre>

<p>Let's try it:</p>

<pre><code>&gt;&gt;&gt; test(10, 10)
Failed on [4, 5, 2, 8, 5, 9, 2, 2, 7, 1]
</code></pre>

<p>Oops. What's gone wrong here? Our oracle function shows that there are nine distinct lucky triples here:</p>

<pre><code>&gt;&gt;&gt; sorted(lucky_triples([4, 5, 2, 8, 5, 9, 2, 2, 7, 1]))
[(1, 2, 2), (1, 2, 4), (1, 2, 8), (1, 4, 8), (1, 5, 5), (2, 2, 2),
 (2, 2, 4), (2, 2, 8), (2, 4, 8)]
</code></pre>

<p>But the code from the post only counts eight of them:</p>

<pre><code>&gt;&gt;&gt; answer([4, 5, 2, 8, 5, 9, 2, 2, 7, 1])
8
</code></pre>

<p>So, it's back to the drawing board, I'm afraid.</p>

<h3>2. Analysis</h3>

<p>If the problem isn't immediately clear, it often helps to perform
<em>test case reduction</em> — that is, to remove superfluous elements from
the failing test case until no more elements can be removed without
causing the test to pass. In this case we get following minimal test
case:</p>

<pre><code>&gt;&gt;&gt; answer([1, 2, 4, 8])
3
&gt;&gt;&gt; sorted(lucky_triples([1, 2, 4, 8]))
[(1, 2, 4), (1, 2, 8), (1, 4, 8), (2, 4, 8)]
</code></pre>

<p>It's clear that the problem is here:</p>

<blockquote>
  <p>for any list of multiples where each element \$n\$ is a factor of element \$n+1\$, for example 1, 2, 4, 8, 16, the number of lucky triples in the list is equal to the summation from x = 0 to x = length - 2.</p>
</blockquote>

<p>Suppose that the list has length \$k\$, then you'd calculate the count of lucky triples as $$ \sum_{0 \le x \le k-2} x = {(k-1)(k-2) \over 2}.$$ But actually in such a list <em>any</em> combination of three numbers form a lucky triple, so the count we need is $${k \choose 3} = {k(k-1)(k-2) \over 6}.$$ You'll see that these are the same when \$k=3\$, but that's just a coincidence.</p>

<p>So let's try replacing this code:</p>

<pre><code>    for depth in self._depths:
        tmp = range(1, depth - 1)
        self._lucky_triple_count += sum(tmp)
</code></pre>

<p>with this code:</p>

<pre><code>    for k in self._depths:
        self._lucky_triple_count += k * (k - 1) * (k - 2) // 6
</code></pre>

<p>Now the result is correct for the test case that failed:</p>

<pre><code>&gt;&gt;&gt; answer([1, 2, 4, 8])
4
</code></pre>

<p>So that fixes one problem. But might there be any other problems? Let's test lots of cases:</p>

<pre><code>&gt;&gt;&gt; for i in range(2, 20):
...     test(i, i)
Failed on [7, 4, 2, 15, 14, 11, 10, 1, 13, 3, 6, 4, 12, 15, 5, 11]
</code></pre>

<p>What's the problem here?</p>

<pre><code>&gt;&gt;&gt; answer([7, 4, 2, 15, 14, 11, 10, 1, 13, 3, 6, 4, 12, 15, 5, 11])
25
&gt;&gt;&gt; len(lucky_triples([7, 4, 2, 15, 14, 11, 10, 1, 13, 3, 6, 4, 12, 15, 5, 11]))
23
</code></pre>

<p>In this case, the code is counting too many triples! After removing superfluous elements, we get this minimal test case:</p>

<pre><code>&gt;&gt;&gt; answer([1, 2, 4, 6, 12])
8
&gt;&gt;&gt; len(lucky_triples([1, 2, 4, 6, 12]))
7
</code></pre>

<p>Now it is clear what the problem is: we have <em>two</em> divisibility chains here, both of length four, namely \$1 \mid 2 \mid 4 \mid 12\$ and \$1 \mid 2 \mid 6 \mid 12\$:</p>

<pre><code>&gt;&gt;&gt; LuckyTriples([1, 2, 4, 6, 12])._depths
[4, 4]
</code></pre>

<p>Each of these chains contributes four lucky triples to the sum — but this leads to double-counting, because the lucky triple \$(1, 2, 12)\$ belongs to both divisibility chains but must be counted just once.</p>

<p>It's clear, I think, from this example, that the whole approach (of searching for divisibility chains and counting their length) is not going to work. That's because some lucky triples are going to appear on multiple divisibility chains and it is not clear how to avoid double-counting.</p>

<h3>3. Alternative implementation</h3>

<p>So here's an alternative implementation that runs in time \$Θ(n^2)\$. For each number \$x\$ in the input, it counts the number of distinct proper divisors of \$x\$, \$d(x)\$, and the number of distinct proper multiples of \$x\$, \$m(x)\$. Then the number of distinct lucky triples \$(w, x, y)\$ with \$w &lt; x &lt; y\$ is \$d(x)m(x)\$. If there are at least 2 occurrences of \$x\$, then there are also \$d(x)\$ lucky triples \$(w, x, x)\$ with \$w &lt; x\$ and \$m(x)\$ lucky triples \$(x, x, y)\$ with \$x &lt; y\$. Finally, if there are at least 3 occurrences of \$x\$, then there is one lucky triple \$(x, x, x)\$.</p>

<pre><code>from collections import Counter
from itertools import combinations

def lucky_triple_count(iterable):
    """Return the number of distinct triples x, y, z from an iterable of
    numbers, such that x &lt;= y &lt;= z and x divides y and y divides z.

    """
    counts = Counter(iterable)  # {x: occurrences of x}
    divisors = Counter()        # {x: distinct proper divisors of x}
    multiples = Counter()       # {x: distinct proper multiples of x}
    for x, y in combinations(sorted(counts), 2):
        if y % x == 0:
            divisors[y] += 1
            multiples[x] += 1
    result = 0
    for x, n in counts.items():
        result += divisors[x] * multiples[x]
        if n &gt;= 2:
            result += divisors[x] + multiples[x]
            if n &gt;= 3:
                result += 1
    return result
</code></pre>
    </div>