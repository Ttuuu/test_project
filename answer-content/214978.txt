<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I am prejudiced against variables named <code>data</code>.</p>

<p>You need to escape literal <code>"</code>, <code>\</code>, and <code>\n</code> characters in quoted strings.  It's good form to do tabs too.</p>

<p>Using a dispatch table for types (instead of <code>if/else</code>) makes it easy to handle all the types.</p>

<p>Instead of passing <code>tab</code> up and down the call stack, wrap the calls in a function that indents a block of text.  Nested <code>traverse</code> will be nested in <code>indent</code> too and get indented the right number of times.  </p>

<p>Instead of checking whether you're at the end of a delimited list (to decide whether to add a delimiter), use <code>arr.join(delimiter)</code>. It puts delimiters on inner boundaries only.</p>

<p><code>Array(n).fill(' ').join('');</code> is the same as <code>' '.repeat(n)</code>.</p>

<p>It would be nice to omit the quotes on property names that don't need them.  Doing this perfectly <a href="https://stackoverflow.com/questions/1661197/what-characters-are-valid-for-javascript-variable-names/9337047#9337047">happens to be really laborious</a>â€”the regex is 11 kilobytes long!!  It's manageable if we limit the exceptions to 7-bit ASCII, which is probably a good idea anyway.</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>function prettyPrint(obj) {
    const stringify = {
        "undefined": x =&gt; "undefined",
        "boolean":   x =&gt; x.toString(),
        "number":    x =&gt; x,
        "string":    x =&gt; enquote(x),
        "object":    x =&gt; traverse(x),
        "function":  x =&gt; x.toString(),
        "symbol":    x =&gt; x.toString()
    },
    indent = s =&gt; s.replace(/^/mg, "  "),
    keywords = `do if in for let new try var case else enum eval null this true 
            void with await break catch class const false super throw while 
            yield delete export import public return static switch typeof 
            default extends finally package private continue debugger 
            function arguments interface protected implements instanceof`
       .split(/\s+/)
       .reduce( (all, kw) =&gt; (all[kw]=true) &amp;&amp; all, {} ),
    keyify = s =&gt; ( !(s in keywords) &amp;&amp; /^[$A-Z_a-z][$\w]*$/.test(s) ? s : enquote(s) ) + ": ",
    enquote = s =&gt; s.replace(/([\\"])/g, '\\$1').replace(/\n/g,"\\n").replace(/\t/g,"\\t").replace(/^|$/g,'"'),
    traverse = obj =&gt;  [ 
           `{`,
            indent( Object.keys(obj) 
                    .map( k =&gt; indent( keyify(k) + stringify[ typeof obj[k] ](obj[k]) ) )
                    .join(",\n")
                    ),
            `}`
        ]
        .filter( s =&gt; /\S/.test(s) )
        .join("\n")
        .replace(/^{\s*\}$/,"{}");
    return traverse(obj);
}

console.log(prettyPrint( 
    {
        "name":"Jon",
        "facts":{
            "car":"Ford",
            "address":{
               "city":"New York"
            },
            "watch":"Casio",
            "other": { 
                "true":false, 
                blargh:undefined, 
                "111number":1e5, 
                method:function(x){x++} 
            }
        }
    } 
));</code></pre>
</div>
</div>

    </div>