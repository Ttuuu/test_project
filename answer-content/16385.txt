<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I liked HaskellElephant's answer, but since you mentioned performance, I put together a version using the killer cassava library + vector. It's a little less elegant, but runs 30x faster in my tests.</p>

<pre><code>module CSVTest.New where
import Data.Csv
import Data.Vector
import Data.ByteString.Lazy (ByteString, readFile)
import Prelude hiding (tail, readFile, filter, take, init, 
                      last, sum, zipWith, map, head, length,
                      foldl)
import Data.Vector.Algorithms.Heap
import Data.Ord
import Control.Monad
import Control.Monad.ST

data SpamType = Spam | NotSpam
                deriving (Show, Eq, Enum, Bounded)

type FeatureSet = Vector Float 

toSpam :: Int -&gt; SpamType
toSpam 0 = NotSpam
toSpam 1 = Spam 
toSpam a = NotSpam

parseClassifiedRecord :: Vector Float -&gt; (FeatureSet, SpamType)
parseClassifiedRecord x = (init x, toSpam . truncate . last $ x)

difference :: FeatureSet -&gt; FeatureSet -&gt; Float
difference a b = sum  . zipWith (\x y -&gt; (x - y)^2) a $ b

findNearest :: Vector (FeatureSet, SpamType) -&gt; FeatureSet -&gt; Vector SpamType
findNearest trainingSet toMatch = result where
    v = map (\x -&gt; (difference (fst x) toMatch, snd x)) trainingSet
    v' = runST $ do
             mv &lt;- thaw v
             sortBy (comparing fst) mv
             freeze mv
    result = map snd v 

getMostCommon :: Vector SpamType -&gt; SpamType
getMostCommon v = result where
    (spamCount, notSpamCount) = foldl (\(sc, nsc) x -&gt; if x == Spam 
                                            then (sc + 1, nsc) 
                                            else (sc, nsc + 1)) (0,0) v
    result = if spamCount &gt;= notSpamCount 
                then Spam
                else NotSpam

classify :: Int -&gt; Vector (FeatureSet, SpamType) -&gt; FeatureSet -&gt; SpamType
classify k trainingSet = getMostCommon . take k . findNearest trainingSet


accuracy :: Vector (SpamType, SpamType) -&gt; Float
accuracy cs = 
  (fromIntegral . length . filter (uncurry (==)) $ cs)
  / (fromIntegral . length $ cs)

parseCSVFromFile :: FilePath -&gt; IO (Either String (Vector FeatureSet))
parseCSVFromFile = fmap decode . readFile 

parseFile = liftM (either (error . show) (tail . init)) . parseCSVFromFile

run trainingFile testFile = do 
    trainingSet &lt;- parseFile trainingFile
    testSet     &lt;- parseFile testFile
    let classifiedTrainingSet = map parseClassifiedRecord trainingSet
    let unclassified = map parseClassifiedRecord testSet
    let classified   = map (\x -&gt; (classify 1 classifiedTrainingSet (fst x), snd x)) 
                            unclassified
    print (accuracy classified) 
</code></pre>
    </div>