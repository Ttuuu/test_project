<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Include only what you need</h1>
<p>This program uses only C++ Standard Library, so we can omit</p>
<pre><code>#include &lt;unistd.h&gt;
</code></pre>
<p>We're also including but not using <code>&lt;set&gt;</code>.</p>
<h1>Interface</h1>
<p><code>dupcheck()</code> accepts a string by value, but only reads it.  That means we should consider passing a reference to constant string, which will avoid copying the string's contents:</p>
<pre><code>void dupcheck(const std::string&amp; usr)
</code></pre>
<p>A significant concern of the interface is that it requires the input string to already be sorted and stripped of spaces.  We could write some comments explaining that, but to me it's a sign that we want to re-think the interface.  It's much more difficult to understand code where the work is spread between the caller and the function.</p>
<h1>Avoid fixed-size storage</h1>
<blockquote>
<pre><code>    char temp[1024]={0};
    strncpy(temp,usr.c_str(),sizeof(temp));
</code></pre>
</blockquote>
<p>This is another constraint that's not apparent to users - if a string of 1024 characters or longer is passed as input, then the contents of <code>temp</code> will not be null-terminated, and that results in undefined behaviour.</p>
<p>As an aside, initialising <code>temp</code> with zeros may be considered good defensive programming, but I think it's wasteful when we're going to immediately overwrite them - I prefer to use tools such as Valgrind to prevent use of uninitialised memory.</p>
<h1>Be careful with braces</h1>
<p>GCC warns that the indentation is misleading here:</p>
<blockquote>
<pre><code>                    if(temp[i]==temp[j])
                            count++;
                            i=j;
</code></pre>
</blockquote>
<p>I don't know whether you meant <code>{ count++; i=j; }</code> instead.</p>
<h1>Don't write to <code>cout</code> in functions</h1>
<p>Instead of writing to <code>std::cout</code>, we could accept a <code>std::ostream&amp;</code> parameter, or we could return a suitable data structure containing the results, and allow the caller to decide what and how to print it.</p>
<hr>
<h1>Alternative method</h1>
<p>We can use a standard container as a "bag" (also known as a "multiset"), and populate it directly from the string.  Then remove from the contents any character that appears only once.</p>
<pre><code>#include &lt;algorithm&gt;
#include &lt;map&gt;
#include &lt;string&gt;

// Helper function cribbed from https://stackoverflow.com/a/29004221
template&lt;typename Container, typename Predicate&gt;
void erase_if(Container&amp; items, const Predicate&amp; predicate) {
    for (auto it = items.begin();  it != items.end(); ) {
        if (predicate(*it))
            it = items.erase(it);
        else
            ++it;
    }
}

template&lt;typename T&gt;
using bag = std::map&lt;T,int&gt;;

bag&lt;char&gt; get_dupes(const std::string&amp; s)
{
    bag&lt;char&gt; values;

    for (auto c: s)
        ++values[c];

    // remove spaces and non-duplicate characters
    erase_if(values, [](const auto&amp; e){ return e.first==' ' || e.second &lt; 2;});

    return values;
}

// Test code

#include &lt;ostream&gt;
std::ostream&amp; print_dupes(std::ostream&amp; os, const bag&lt;char&gt;&amp; dupes)
{
    const char *sep = "";
    for (const auto&amp; e: dupes) {
        os &lt;&lt; sep &lt;&lt; e.first &lt;&lt; ":" &lt;&lt; e.second;
        sep = ", ";
    }
    return os &lt;&lt; std::endl;
}

#include &lt;iostream&gt;
int main()
{
    for (auto s: { "Hello World!", "foobar" })
        print_dupes(std::cout &lt;&lt; s &lt;&lt; " has these duplicates: ",
                    get_dupes(s));
}
</code></pre>
    </div>