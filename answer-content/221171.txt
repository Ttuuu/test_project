<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>To amplify @200_success’s comment:</p>

<p>Python 3.5 introduces <a href="https://docs.python.org/3/library/typing.html" rel="nofollow noreferrer">type hints</a>.  Eg)</p>

<pre><code>&gt;&gt;&gt; def foo2(x:str, y:float) -&gt; None:
...    print(f"Hi, foo has been called with {x} {y}")
... 
&gt;&gt;&gt; foo2("2", 3.4)
Hi, foo has been called with 2 3.4
&gt;&gt;&gt;
</code></pre>

<p>These type hints (the <code>x:str</code>, and <code>y:float</code>) are not used by the standard Python interpreter, but they are recorded during the parsing of the code, so they are available to the program.</p>

<pre><code>&gt;&gt;&gt; foo2.__annotations__
{'return': None, 'x': &lt;class 'str'&gt;, 'y': &lt;class 'float'&gt;}
&gt;&gt;&gt; 
</code></pre>

<p>Directly accessing the <code>foo2.__annotations__</code> is not that interesting, but accessing <code>func.__annotations__</code> in the <code>@typecheck</code> decorator means you don’t have to provide the argument types to the decorator; the decorator can inspect the argument types directly.  Thus you could decorate the function with simply <code>@typecheck</code>, instead of <code>@typecheck(str, float)</code>.</p>

<p>For a variant <code>str</code> or <code>float</code> type argument, you could use the <code>typing</code> module to define your own <code>STR_OR_FLOAT = TypeVar("STR_OR_FLOAT", str, float)</code> type (or a better name if you have one), which you could decorate the argument with.</p>

<p>As a bonus, using type hints to provide argument type checking information — even for your do-it-yourself via a function decorator type check system — also gives you the following benefits:</p>

<ul>
<li>IDE type hints, as you are writing code</li>
<li>Can be understood by standard documentation generators</li>
<li>Only consumes CPU time during parsing of the code; does not affect execution speed</li>
</ul>
    </div>