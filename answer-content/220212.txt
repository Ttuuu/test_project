<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Wow that is a lot of code to add two numbers.</p>

<h2>Potential bug</h2>

<p>The function ListNode has one argument yet in the function <code>addTwoNumbers</code> you call it with two arguments. However it does not manifest as a bug as you add the link in the lines following the node creation.</p>

<p>This also results in you creating twice as many nodes as needed. </p>

<p>E.G the second node is dropped and never used.</p>

<pre><code>sum = new ListNode(k, new ListNode(k));
</code></pre>

<h2>Sanitize</h2>

<p>The question states that the inputs are digits so there is no need to sanitize the lists. The only time you vet (arr sanitize) input is when that input comes from the insane, only networks and humans can be insane hence you only sanitize data from them. (Why I hate libraries and frameworks.. Their interfaces face humans (via code) so they are full of vetting code that negatively effect their performance)</p>

<h2><code>i</code>, <code>j</code> and sometime <code>k</code></h2>

<p>Generally the named variables <code>i</code>, <code>j</code>, <code>k</code> are used as indexes. This is so ubiquitous in C syntax like languages that using them for other purposes is a definite no no.</p>

<h2>Use numbers</h2>

<p>You should never bring a string to a numbers party.</p>

<p>The variable you call <code>rollover</code> is called <code>carry</code>. The carry can be extracted from the sum as <code>carry = sum / 10 | 0</code> which is a lot faster than converting to a string.</p>

<p>The core of the adder requires 3 numbers <code>a</code>, <code>b</code>, and <code>carry</code> that will give a <code>val</code> and <code>carry</code> and use one intermediate to avoid repeating an operation.</p>

<pre><code>sum = a + b + carry, 
val = sum % 10;
carry = (sum - val) / 10;

// or 
sum = a + b + carry, 
val = sum % 10;
carry = sum / 10 | 0;
</code></pre>

<h2>Testing</h2>

<p>I did not fully test your code as it did not fit well with my linked list lib and <strike>my brain not work good this morn</strike> I'm a little lazy today. If there are other problems I do not see them in the code.</p>

<h2>Rewrite</h2>

<p>It is assumed that the linked list functions are not part of the problem to solve. The answer contains some list helpers that can be implemented in a variety of ways.</p>

<ul>
<li>Node creates a linked list node the new token.</li>
<li>Helper function for testing <code>toList</code> converts an array to a list returning the head node as the most significant digit. (Note <code>| 0</code> to force type <code>Number</code></li>
</ul>

<p>Changes</p>

<ul>
<li>No sanity check</li>
<li>Uses numbers rather than string to find carry</li>
<li>Uses a <code>do while</code> to avoid the extra code needed to handle the final carry (some argue <code>do whiles</code> are too complex for humans to use and should be avoided, all I can say to the down voters, "Du..Really???")</li>
</ul>

<h3>Edge case</h3>

<p>The example show an edge case of zero add zero as long lists of zero</p>

<p>The second version check if the result is zero and returns a single node containing <code>0</code> which to me seams to more correct answer. </p>

<p>BUT what about <code>001 + 1</code> the result is <code>002</code> I have not bothered with this edge case (or  <em>"leave it for you to solve if interested"</em>) </p>

<p><sub><sup>(hint: hold last node with value)</sup></sub></p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>function Node(val, next){ return {val, next, 
   toString() {return "" + (this.next ? this.next : "") + this.val}
}};
const toList = (vals, p) =&gt; (vals.forEach(v =&gt; p = Node(v | 0, p)), p);
const reverseList = (l, p) =&gt; {do{p = Node(l.val ,p) }while(l = l.next); return p};

const A = toList([..."33140613"]), B = toList([..."9283629"]);
const A1 = toList([..."00000"]), B1 = toList([..."00000"]);
const A2 = toList([..."00100"]), B2 = toList([..."900"]);

console.log(A + " + " + B + " = " + add(A, B));
console.log("Wrong: " + A1 + " + " + B1 + " = " + add(A1, B1));
console.log("Wrong ?: " + A2 + " + " + B2 + " = " + add(A2, B2));


function add(nA, nB) {
    var carry = 0, a, b, result;
    do {
        nA ? (a = nA.val, nA = nA.next) : a = 0;
        nB ? (b = nB.val, nB = nB.next) : b = 0;
        const sum = a + b + carry, val = sum % 10;
        carry = (sum - val) / 10;
        result = Node(val, result);
    } while(nA || nB || carry !== 0);
    return reverseList(result);
}</code></pre>
</div>
</div>


<h3>Edge case</h3>

<p>Return single node for zero.</p>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>function Node(val, next){ return {val, next, 
   toString() {return "" + (this.next ? this.next : "") + this.val}
}};
const toList = (vals, p) =&gt; (vals.forEach(v =&gt; p = Node(v | 0, p)), p);
const reverseList = (l, p) =&gt; {do{p = Node(l.val ,p) }while(l = l.next); return p};


const A = toList([..."33140613"]), B = toList([..."9283629"]);
const A1 = toList([..."00000"]), B1 = toList([..."00000"]);
const A2 = toList([..."00100"]), B2 = toList([..."900"]);

console.log(A + " + " + B + " = " + add(A, B));
console.log(A1 + " + " + B1 + " = " + add(A1, B1));
console.log("Wrong: " + A2 + " + " + B2 + " = " + add(A2, B2));


function add(nA, nB) {
    var carry = 0, a, b, result, hasVal = 0;
    do {
        nA ? (a = nA.val, nA = nA.next) : a = 0;
        nB ? (b = nB.val, nB = nB.next) : b = 0;
        const sum = a + b + carry, val = sum % 10;
        carry = (sum - val) / 10;
        result = Node(val, result);
        hasVal += sum;
    } while(nA || nB || carry !== 0);
    return hasVal ? reverseList(result) : Node(0);
}</code></pre>
</div>
</div>


<p><sub><sup><em>This answer contains subjective opinions that do not reflect the view of the CR community</em><sup> <strong>B.M.</strong></sup></sup></sub></p>
    </div>