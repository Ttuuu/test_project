<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Much better.</p>

<p>I have the following to add to vnp's answer:</p>

<blockquote>
<pre><code>public T Head =&gt; _head == null ? throw new ArgumentNullException("Head is null") : _head.Data;
public T Tail =&gt; _tail == null ? throw new ArgumentNullException("Tail is null") : _tail.Data;
</code></pre>
</blockquote>

<p>Instead of <code>ArgumentNullException</code> it's better to use <code>NullReferenceException</code> because there is no argument.</p>

<hr>

<p>Instead of iterating this way:</p>

<blockquote>
<pre><code>  while (pointer.Data.Equals(item) == false)
  {
    if (pointer.Next == null)
      return false;
    pointer = pointer.Next;
  }
</code></pre>
</blockquote>

<p>I find it more intuitive to do:</p>

<pre><code>  Node node = _head;
  while (node != null)
  {
    if (item.Equals(node.Data))
    {
      break;
    }

    node = node.Next;
  }

  if (node == null) return false;
</code></pre>

<hr>

<p>Instead of this:</p>

<blockquote>
<pre><code>  if (pointer.Previous == null)
  {
    // It is the Head
    pointer.Next.Previous = null;
    return true;
  }
</code></pre>
</blockquote>

<p>consider reuse <code>RemoveHead()</code>:</p>

<pre><code>  if (node == _head)
  {
    RemoveHead();
    return true;
  }
</code></pre>

<p>That will be more DRY. And you can do the same for the tail.</p>

<hr>

<p>You could consider to implement:</p>

<pre><code>public bool IsEmpty { get; }
public int Count { get; }
</code></pre>

<hr>

<p>You tests seems OK to me. You're missing one for <code>Remove(T value)</code>. </p>

<p>About "Head_Should_Only_Have_Previous_Equal_NULL": unit tests are about testing the public interface of an object, so checking for <code>_head.Previous == null</code> should be tested indirectly through testing the public interface. In fact you'd have to test for it every time you make a change to the list. An indirect test could be trying to remove the head or tail from an empty list. If that doesn't fail, it may indicate that something is wrong with the handling of <code>Node.Previous</code>. In your case, you'll then have to throw or return false from <code>RemoveHead()</code> to find out...</p>
    </div>