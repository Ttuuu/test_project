<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Splitting <code>line</code> into <code>words</code> using <code>words = line.split(" ")</code> will only split the line on space characters.  If two words are separated by a tab character, or other white space character other than a space, the split will not happen at that point, which may confuse your explicit checker.</p>

<p>Using <code>words = line.split()</code> would split on spaces, tab characters, and any other white space characters.</p>

<p>You might also want to investigate splitting using the word break regular expression <code>\b</code>, which would treat non-word characters as break points, so that a line containing an explicit word immediately followed by a comma (such as <code>"explicit,"</code>) or period, or semicolon, etc. won't sneak through the filter.</p>

<hr>

<pre><code>            for explicit_word in explicit_words:
                if word == explicit_word:
                    return False
</code></pre>

<p>Python has great searching built into it.  Instead of explicitly writing a loop over all explicit words, you could just ask Python to tell you if a word is in the list of explicit words:</p>

<pre><code>            if word in explicit_words:
                return False
</code></pre>

<p>Or better, use a <code>set()</code> of explicit words, and the <code>in</code> operation drops from <span class="math-container">\$O(n)\$</span> to <span class="math-container">\$O(1)\$</span> time complexity:</p>

<pre><code>explicit_words = {
    "explicit", "bad", "ugly", "offensive", "words" 
}

# ...

            if word in explicit_words:
                return False
</code></pre>

<hr>

<p>We've improved things a little, but we still have an explicit (pun intended) loop over the list of words in a line.  We can use the <code>any()</code> method, and a list comprehension, to get Python to do the looping for us, which should be faster.</p>

<pre><code>    for line in song:
        words = line.split()
        if any(word in explicit_words for word in words):
            return False
</code></pre>

<p>If <code>word in explicits</code> returns <code>True</code> for any of the <code>word</code> in the list <code>words</code>, the <code>any()</code> method will "short-circuit" and immediately return <code>True</code> without examining the remaining items in <code>words</code>.</p>

<hr>

<p>If <code>"explicit"</code> is a bad word, and the song lyrics contains <code>"Explicit"</code> or <code>"EXPLICIT"</code>, you wouldn't want to mark the song as "CLEAN", right?  Perhaps you want <code>word.lower() in explicit_words</code>?   As @wizzwizz4 pointed out, <code>.casefold()</code> is better than <code>.lower()</code>.</p>

<hr>

<p>Resulting method:</p>

<pre><code>explicit_words = set(explicit_word.casefold()
    for explicit_word in ("explicit", "bad", "ugly", "offensive", "words"))

def isClean(song_path):
    with open(song_path) as song:
        for line in song:
            words = line.split()
            if any(word.casefold() in explicit_words for word in words):
                return False    
        return True
</code></pre>
    </div>