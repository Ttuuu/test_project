<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>General Style</h1>
<p>Your translation <code>dict</code> uses a keyword and lower case letters.
Consider writing constants with upper-case letters and giving them expressive names like <code>MORSE_CODES = {...}</code>.</p>
<p>According to <a href="https://www.python.org/dev/peps/pep-0008/" rel="noreferrer">PEP 8</a>, functions should be named using <code>snake_case</code>. <code>CamelCase</code> is reserved for classes:
<code>outputMessage</code> → <code>output_message</code>, <code>def Encrypt(...)</code> → <code>def encrypt(...)</code>, etc.</p>
<h1>Performance</h1>
<p>Using the <code>Get_Key</code> function is not very performant, since it performs a linear search of the dict. Just reverse the translation dict once and then use it:</p>
<pre><code>MORSE_ENCODING = {
    'a': '.-',
    'b': '-...',
    ...
}
MORSE_DECODING = {value: key for key, value in MORSE_ENCODING.items()}

...

        temp = MORSE_DECODING[letter]
</code></pre>
<h1>Handling errors</h1>
<p>Currently the <code>Encrypt</code> function silently skips all non-translatable characters. Consider Throwing a <code>ValueError()</code> instead to indicate, that invalid input was provided:</p>
<pre><code>def encode(message):
    """Encodes a string into morse code."""

    code = ''

    for index, char in enumerate(message):
        try:
            code += MORSE_ENCODING[char.lower()]
        except KeyError:
            raise ValueError(f'Char "{char}" at {index} cannot be encoded.')

        code += ' '

    return code[:-1]  # Remove trailing space.


def decode(morse_code):
    """Decodes morse code."""

    message = ''

    for index, sequence in enumerate(morse_code.split()):
        try:
            message += MORSE_DECODING[sequence]
        except KeyError:
            raise ValueError(f'Cannot decode code "{sequence}" at {index}.')

    return message
</code></pre>
<h1>Correctness</h1>
<p>Your <code>Encrypt</code> function currently always returns a trailing space. You can avoid that by returning <code>output[:-1]</code>.</p>
<h1>Terminology</h1>
<p>Converting from morse code to text back and forth is not really an encryption in its sense. You might want to rephrase <code>{en,de}crypt</code> with <code>{en,de}code</code>.</p>
<h1>Globals</h1>
<p>Using global variables like <code>outputMessage</code> can have nasty side-effects when the program is used as a library. All the code below the <code>def Play_Sound</code> function should go into a <code>def main()</code> function that you can invoke via</p>
<pre><code>if __name__ == '__main__':
    main()
</code></pre>
<p>At the bottom of the unit.</p>
    </div>