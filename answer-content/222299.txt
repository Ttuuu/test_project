<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Deciding which exceptions to handle, rethrow, wrap in other exceptions is a design decision. Some exceptions might be caught to branch to a different flow. Naively catching all exceptions is a bad call. <a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/exceptions/" rel="nofollow noreferrer">Guidelines for handling and throwing exceptions</a></p>

<hr>

<p>Some exceptions should be propagated all the way up, because of the integrity of the application or even your machine cannot be preserved. Be careful when encountering <code>OutOfMemoryException</code>, <code>BadImageFormatException</code>, <code>StackOverflowException</code>.</p>

<p>Would you really want to wrap/hide the aforementioned exceptions in a custom exception?</p>

<blockquote>
<pre><code>catch (Exception ex)
{
    // Capture any generic exception and retrhow it as a 'WhException'.
    throw new WhException("An error occurred whilst ..", ex.Message, ex);
}
</code></pre>
</blockquote>

<hr>

<p>Keep in mind that detail is lost when you catch and <code>throw ex;</code>. A new stacktrace is created.</p>

<blockquote>
<pre><code>catch (WhException ex)
{
    // Capture and rethrow a 'WhException', ensurig that the detail is not lost.
    throw ex;
}
</code></pre>
</blockquote>

<p>Use <code>throw;</code> to preserve stacktrace.</p>

<pre><code>catch (WhException ex)
{
    throw; // preserves stacktrace
}
</code></pre>

<p>If you want to rethrow outside the catch block you could use <code>ExceptionDispatchInfo</code>. Suppose <code>Exception error</code> is declared before the try:</p>

<pre><code>catch (WhException ex)
{
    error = ExceptionDispatchInfo.Capture(ex);
}

error?.Throw(); // preserves stacktrace
</code></pre>

<hr>

<p>Consider throwing these well-known exceptions for common situations:</p>

<ul>
<li>ArgumentNullException : when a mandatory argument is not provided</li>
<li>ArgumentException: when an argument does not meet the preconditions to run</li>
<li>AggregateException: when packing multiple exceptions together</li>
</ul>

<hr>
    </div>