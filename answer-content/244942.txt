<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Errors aren't answers</h2>
<p>This:</p>
<pre><code>    try
    {
        return new DriveInfo(path).DriveType == DriveType.Network;
    }
    catch (Exception)
    {
        return false;
    }
</code></pre>
<p>will harm and not help you. What if a caller passes the integer <code>3</code> for <code>path</code>? The network drive status is certainly not <code>True</code>, but you can't say that it's <code>False</code>, either. It's an error, and should be allowed to fall through, which means you should not be catching <code>Exception</code>. In a different vein: what if (for some weird reason) the <code>DriveType</code> property lookup runs into an <code>OutOfMemoryException</code>? That is also not proof that this is not a network drive.</p>
<p>If you understand that there are certain (perhaps <code>IOException</code> or derived) exceptions that actually <em>do</em> indicate that this is not a network drive, then catch those specifically.</p>
    </div>