<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Errors</h1>

<p>An assumption: you never ever want to return a 500 HTTP status code (<em>Internal server error</em>). It may leak information you do not want to expose and it's not informative enough.  Do not throw any exception: return the correct HTTP status code and eventually supplement it with the an appropriate error message. For example if <code>SaveAll()</code> failed because a concurrent request you may return 409 (<em>Conflict</em>). This leads to two more points:</p>

<ul>
<li>In your code you should almost never catch <code>Exception</code> and never throw it. There are many, more informative, exceptions to use which will play well with your exception handling policy (do you have one, right?).</li>
<li><code>SaveAll()</code> returning a boolean just to throw an exception is, TBH, sub-optimal. If it's an error condition then it should be an exception (and caller MUST handle it, if it can). A boolean return value can too easily be ignored (and you don't want this to happen if data has not been saved).</li>
</ul>

<p>You're not catching any exception, if anything happens with the repository then API calls will fail with an internal server error.</p>

<h1>Reuse</h1>

<p>You parse the current user ID in many functions, move it out to a separate function. Also do not use <code>Int32.Parse()</code> without specifying the culture you want to use (probably <code>CultureInfo.InvariantCulture</code>).</p>

<h1>Security</h1>

<p>Do not use <code>UserParams</code> both in your repository and in your controller. It <em>smells</em> because:</p>

<ul>
<li>You can't change them independently.</li>
<li>You have unused values you can specify in the query.</li>
<li>If you add a new field and you forget to handle it in a controller method you might end up with a vulnerability.</li>
</ul>

<p>ALWAYS validate and translate request parameters (and the easiest way is to have two separate objects). For example <code>userParams.Gender</code> is directly exposed to your repository as an unvalidated string.</p>

<p><code>UpdateUser()</code> (and <code>LikeUser()</code>) does not actually need the user ID as parameter. Do not require useless and redundant data from the client (which must be validated) when you already have it server-side.</p>

<h1>Gender</h1>

<p>Do not compare strings using <code>==</code> unless you exactly know what it means. In this case an even simpler and faster ordinal comparison is enough however...</p>

<p>Do not store the gender as a string. If your app is limited to binary genders (at birth) then you may use an <code>enum</code>, however...</p>

<p><em>Gender</em> is much more <em>complex</em> than a simple binary identity:</p>

<ul>
<li>Gender at birth is not necessarily binary.</li>
<li>Gender at birth may not be the current gender.</li>
<li>The <em>assigned</em> gender at birth may not be what a person identifies with.</li>
<li>Especially in a dating app it's also important the sexual orientation (which is obviously independent from gender).</li>
</ul>

<p>In short: do not use an hard-coded list and do not assume gender equals sexual orientation.</p>

<h1>Performance</h1>

<p>If your app will be successful then you definitely want to avoid to search the <code>likes</code> table (which will grow much faster than the <code>users</code> table) for an entry and to retrieve it only to return <em>Bad request</em>. Best case scenario is to have a simpler function to determine if the entry exists instead of reading, transmitting and mapping the entry itself. See also the next section...</p>

<h1>Design</h1>

<p>I'm generally against the indiscriminate use of the Repository pattern. It's an invaluable tool but the price you pay in complexity to use it (properly) must be justified. I do not see the <em>big picture</em> here but you should seriously consider if directly using your ORM is <em>enough</em>. From what I see you really need a domain model, much more than a repository.</p>

<p>You have an instance field <code>_repo</code>, you do not show that code but I do not see any synchronization mechanism and I do not see how you dispose its resources when controller is re-created. Generally, in your controllers, you should avoid instance fields as much as possible.</p>

<p>Your API should never ever work directly with the repository to perform any business logic. It should interact with an high-level model (or a Service layer on the top of the Data layer exposed by your ORM). For example I'd imagine the <em>Like</em> feature like this:</p>

<pre><code>public async Task&lt;IActionResult&gt; LikeUser(int recipientId)
{
    using (var service = _serviceFactory.Create())
        await service.AddLike(GetCurrentUserId(), recipientId);

    return Ok();
}
</code></pre>

<p>Yes, controller methods should not contain much more than this. All the logic must be TESTABLE then it is much easier to have it elsewhere. Note that in this fictional example I used a factory to create the service object: you may get it directly from your DI framework in the controller ctor but do not create it here (...<code>new MyService()</code>) because you want to test the controller with a mocked service.</p>

<p>Note that the <code>AddLike()</code> is probably implemented with a stored procedure, you really need performance here. Given that user should not be able to click <em>Like</em> for someone he already liked then when it happens it's definitely an error condition and as such it should trigger an exception. Code is probably more complex than this because of error handling but I think you now got the point:</p>

<pre><code>try
{
    ...
}
catch (ItemNotFoundException e)
{
    return NotFound(...);
}
catch (ConcurrencyException e)
{
    // TODO: try again?
}
</code></pre>

<p>If you structure well your service layer then you can probably move all this boilerplate code into a function method and reuse it in all controller methods.</p>
    </div>