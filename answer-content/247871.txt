<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Never use <code>using namespace std</code> in header files</h1>
<p>You should never write <code>using namespace std</code> in header files, as this can cause issues in larger projects where multiple libraries are combined. If every header file starts adding their own <code>using namespace ...</code>, it might result in hard to debug problems where it's no longer clear from what namespace a function or variable name is coming from.</p>
<p>You can safely use it in your own <code>.cpp</code> files, but even then I would avoid this habit. See <a href="https://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice">this question</a> for more details.</p>
<h1>Store coordinates by value</h1>
<p>In <code>class Snake</code>, you store pointers to coordinates in the vector <code>body</code>. But you don't need this at all, and can just store the pointers by value:</p>
<pre><code>std::vector&lt;coordinates&gt; body;
</code></pre>
<p>You then no longer need to manually call <code>new</code> and <code>delete</code> to allocate memory for the coordinates. And I see you never call <code>delete</code> in your code, so this will already fix a memory leak.</p>
<h1>Pass <code>coordinates</code> where appropriate</h1>
<p>Since you have a nice <code>struct coordinates</code>, use it everywhere you have to pass coordinates instead of passing two <code>int</code>s, and you can also use it as a return value. For example:</p>
<pre><code>Snake::Snake(coordinates position) {
    body.push_back(position);
}

...

coordinates Snake::getCoordinates(int position) {
    return body[position];
}

...

void Snake::step(coordinates position, ...) {
    body.erase(body.begin());
    body.push_back(position);
    ...
}
</code></pre>
<h1>Use <code>std::deque</code> for the body coordinates</h1>
<p>The body of the snake is added to from one end, and removed from from the other end. A <code>std::vector</code> is not the best container in this case, because it can only efficiently dd and remove from the back. The <a href="https://en.cppreference.com/w/cpp/container/deque" rel="noreferrer"><code>std::deque</code></a> class does provide efficient insertion and removal from both ends, and provides easy functions for that:</p>
<pre><code>class Snake {
    std::deque&lt;coordinates&gt; body;
    ...
};

void Snake::step(coordinates position, ...) {
    body.pop_front();
    body.push_back(position);
    ...
}
</code></pre>
<h1>Avoid using <code>std::endl</code></h1>
<p>Prefer writing <code>"\n"</code> instead of <code>std::endl</code>. The latter is equivalent to the former, but also forces a flush of the output, which can be bad for performance. For more details, see <a href="https://stackoverflow.com/questions/4512631/difference-between-endl-and-n">this question</a>.</p>
<h1>Use range-for where appropriate</h1>
<p>Assuming you can use C++11 features, try to use range-based for-loops where possible. For example, looping over the elements of the snake's body can be done so:</p>
<pre><code>for (auto &amp;element: body) {
    if (element.x == position.x &amp;&amp; element.y == position.y) {
        ...
    }
}
</code></pre>
<h1>Separate logic from presentation</h1>
<p>Your <code>class Snake</code> encapsulates the logic of the snake's body, but it also prints a game over message. You should try to separate logic from presentation where possible. The function <code>Snake::step()</code> should just check whether the step is valid or not, and <code>return</code> a value indicating this. The caller can then decide whether or not to print a game over message. For example:</p>
<pre><code>bool Snake::step(coordinates position) {
    body.pop_front();
    body.push_back(position);

    for (auto &amp;element: body) {
        if (element.x == position.x &amp;&amp; element.y == position.y) {
            return false;
        }
    }

    return true;
}

...

void Game::render() {
    ...
    while (true) {
        ...
        if (!snake.step(position)) {
            std::cout &lt;&lt; "Game over!\n";
            break;
        }
    }
}
</code></pre>
<h1>Use a proper random number generator</h1>
<p>You use the C function <code>rand()</code>, which is a poor random number generator, but it could be good enough for a game of Snake. However, you never call <code>srand()</code>, which means the random number generator will always start with the same seed value, and thus always produce the same sequence of random values.</p>
<p>C++11 introduced much better random number generator functions. In particular, you might want to use <a href="https://en.cppreference.com/w/cpp/numeric/random/uniform_int_distribution" rel="noreferrer"><code>std::uniform_int_distribution</code></a> to generate integers in a given range. You could use it like so:</p>
<pre><code>class Apple {
    coordinates position;

    std::mt19937 gen(std::random_device());
    std::uniform_int_distribution x_distrib;
    std::uniform_int_distribution y_distrib;

public:
    ...
    void generate();
};

void Apple::Apple(int width, int height):
    x_distrib(1, width - 1), y_distrib(1, height - 1)
{
    generate();
}

void Apple::generate() {
    position = {x_distrib(), y_distrib()};
}
</code></pre>
<h1>Alternative way to evolve the snake body</h1>
<p>Your method of evolving the snake's body requires saving the last direction the snake moved in, and you also move the whole body. In a typical Snake game, what happens is that the snake's body stays in the same place, but for the next move the tail will not shrink. To do this, you can keep a variable that tracks whether the snake needs to grow:</p>
<pre><code>class Snake {
    std::deque&lt;coordinates&gt; body;
    int grow = 0;
    ...
public:
    ...
    void grow(int size);
};

void Snake::grow(int size) {
    grow += size;
}

bool Snake::step(coordinates position) {
    if (!grow) {
         body.pop_front();
    } else {
         grow--;
    }

    body.push_back(position);
    ...
};
</code></pre>
<p>So when the snake eats an apple, you can just call <code>snake.grow(1)</code>. And this way, you can easily make the game harder by increasing the amount of elements the snake grows for each apple it eats.</p>
<h1>Improve handling the snake wrapping the screen</h1>
<p>When the snake makes a move, the only part of its body that could wrap round is its head. There is no need to check all elements of its body to see if they are out of bounds. So after reading the input, you should check whether the new head position has crossed the board boundaries, and if so wrap the coordinates. Only then call <code>Snake::step()</code>.</p>
<p>Alternatively, you could just call <code>Snake::step()</code> with the delta position, and handle the updating of the position in <code>Snake::step()</code>.</p>
<h1>Split <code>Game::render()</code> up</h1>
<p>The function <code>Game::render()</code> does too many things. It not only renders the current board, it also handles input and performs most of the game logic. I suggest you create a function named <code>Game::loop()</code> which just does a high level implementation of the game loop, and calls other functions that implement the various parts I just mentioned, including <code>Game::render()</code> which now should only render the board.</p>
<p>Make a function <code>Game::handle_input()</code> that handles the player's input. It should just make the snake do one step.</p>
<p>Make a function <code>Game::logic()</code> that implements the rest of the game logic. In particular, check if the snake's head is at the same position of the apple, or if the snake bit itself.</p>
<p>Doing this will make these functions small and concise, making maintenance easier.</p>
    </div>