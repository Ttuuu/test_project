<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You can load the List like this  </p>

<pre><code>List&lt;string&gt; tempList = new List&lt;string&gt;(whichDictionary.Keys);
</code></pre>

<p>That is Java style { }.  C# is typically on new line.</p>

<p>Dictionary does not guarantee order but you could use <a href="https://msdn.microsoft.com/en-us/library/system.collections.specialized.ordereddictionary.aspx" rel="nofollow noreferrer">OrderedDictionary</a>. 
Turns out <code>OrderedDictionary</code> does not guarantee order either. 
I thought might be able to just use the index but it appears you cannot retrieve the key from the index.</p>

<p>Shorter:  </p>

<pre><code>Dictionary&lt;string, string&gt; dic = new Dictionary&lt;string, string&gt; 
                                 { { "csync", "a" },  { "bsync", "a" } };
OrderedDictionary oDic = new OrderedDictionary(dic.Count);
foreach (KeyValuePair&lt;string, string&gt; kvp in dic.OrderBy(x =&gt; x.Key))
{
    oDic.Add(kvp.Key, kvp.Value);
}
</code></pre>

<p>Or SortedDictionary as given in another answer.</p>
    </div>