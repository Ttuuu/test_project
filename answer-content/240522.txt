<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I am no expert at all, but you are missing some optimization which <code>std::vector</code> implements with some certainty.</p>

<p>Note that you can make almost no assumptions about the type <code>T</code>, e.g. you do not know how expensive it is to construct or destruct instances, or how much dynamic memory it consumes.
Also, a constructor might have side effect, and a user might expect that for an empty <code>Vector</code> with non-zero capacity, no instances where created and no side effects happened.
In short: you should minimize the call of constructors/destructors.</p>

<p>Here is an example: in the constructor 
<code>Vector&lt;T&gt;::Vector(size_t sz)</code> you write</p>

<pre><code>values = new T[v_capacity];

for(int i = 0; i &lt; sz; ++i)
    values[ i ] = T();
</code></pre>

<p>The for-loop is unnecessary. The <code>new T[...]</code> already creates an array of instances, and calls the standard constructor for each of these. In other words: for each element of <code>values</code> you call the constructor <code>T::T()</code>, then the destructor <code>T::~T()</code>, and then the constructor again.</p>

<p>Another example is your resize function, which when called as <code>Vector::resize(n)</code> on an empty <code>Vector</code> calls the constructor <code>T::T()</code> <code>n</code> times, even though the vector still does not contain any actual elements (from the perspective of the user).</p>

<p><strong>The solution</strong></p>

<p>There are ways to allocate memory for <code>T* values</code> without calling the constructors, and only calling them later when actual elements are added.</p>

<p>Instead of <code>values = new T(n)</code> you might write</p>

<pre><code>values = (T*)(new char[sizeof(T) * n]);
</code></pre>

<p>to allocate a block of memory, equivalent to the one allocated with <code>new T(n)</code>, but without calling any constructors (<code>char</code> is used because it is of size 1 byte, and <code>sizeof(T)</code> gives the size of <code>T</code> in bytes).
This is also the same as <code>malloc(sizeof(T) * n)</code> but is actual <code>C++</code>.</p>

<p>If you want to call the constructor of the <code>i</code>-th element of <code>values</code>, you could use <a href="https://en.cppreference.com/w/cpp/language/new#Placement_new" rel="nofollow noreferrer"><em>placement new</em></a>, which goes as folllows:</p>

<pre><code>new (values + i) T();
</code></pre>

<p>or you write <code>values[i]-&gt;T()</code>. Equivalently if you want to destruct an element explicitly use <code>values[i]-&gt;~T()</code>. With the latter, in the destructore <code>Vector::~Vector</code> you would call the destructor only for the actually initialized elelemts of <code>values</code> with indices 0, ..., <code>v_size-1</code>.</p>
    </div>