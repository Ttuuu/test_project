<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Alas, an online search for 'php tutorial' returns plenty of <strong>outdated</strong> tutorials, some of which are downright <strong>dangerous</strong> (SQL injections). It's no wonder newcomers to PHP perpetuate bad code and bad practices. This kind of code does not belong in 2020, nowadays developers are expected to use <strong>development frameworks</strong> and not Notepad or some variant - <a href="https://laravel.com/docs/7.x/database#running-queries" rel="nofollow noreferrer">Example</a></p>

<hr>

<p>I think there are logical flaws in your code, for example:</p>

<pre><code>$username = isset($_SESSION['username']) ? $_SESSION['username'] : '';
</code></pre>

<p>That means: if <code>$_SESSION['username']</code> is not set then <code>$username = '';</code> but you proceed with the rest of the code anyway, and therefore insert a blank username in your table ?</p>

<p>If you use session variables then you have to make sure that the session is still active and in a valid state.</p>

<p>This code does not look like a finished product. Yes, it is <strong>vulnerable</strong> (SQL injections). Try to hack your site using <a href="http://sqlmap.org/" rel="nofollow noreferrer">SQLmap</a>, even with default options it might very well be able to dump your database. Maybe upload a shell too, leading to total compromise of your server (in addition to the data leak).</p>

<p>AFAIk PHP does not allow stacked queries in order to mitigate possible injections but there are still plenty of ways the code can be abused. Note that a SQL injection is not always exploitable but it is nonetheless pretty serious.</p>

<p>You must stop these coding practices immediately or you will get into trouble. If you have code like this in production you need to patch it. At a minimum, use prepared queries whenever user-supplied input is involved.</p>

<p>If you deliver defective code to clients you should consider your legal liability. If your code results in a data breach you might be prosecuted for failure to observe minimum security standards (in America perhaps, you can be sued for anything by anybody). Otherwise your reputation could take a hit. There is no excuse for code like that in 2020.</p>

<hr>

<p><strong>File uploads</strong> are also dangerous and there are quite a few ways they can be abused.
See for example:</p>

<ul>
<li><a href="https://owasp.org/www-community/vulnerabilities/Unrestricted_File_Upload" rel="nofollow noreferrer">Owasp - Unrestricted File Upload</a></li>
</ul>

<p>In your code you make no effort to <strong>sanitize</strong> the file name, that may contain stuff like: <code>../../</code> or characters that are invalid on the local (server) file system.</p>

<p>There are very few checks, the most important being the check on the extension.</p>

<p>The relevant lines are:</p>

<pre><code>$file_name = $_FILES['fileToUpload']['name'];
$userPic = date('Y-m-d_H-i-s').$file_name;
move_uploaded_file($file_tmp,"uploads/".$userPic);
</code></pre>

<p>I have made some tests on a Linux machine in an attempt to defeat your code and upload a PHP shell. I can for example upload names that contain a carriage return. I have tried null byte injections too but I think PHP now has built-in protection.</p>

<p><strong>An old version of PHP could be vulnerable.</strong> In particular check out this bug report: <a href="https://bugs.php.net/bug.php?id=69207" rel="nofollow noreferrer">Sec Bug #69207     move_uploaded_file allows nulls in path</a>. This is the situation you want to avoid.</p>

<p>The point is that you rely on a file name that is supplied by the user (browser) and can be manipulated using a proxy or some tool like Burp. I have not tried Unicode tricks like RTL (right to left) makers or whatever, I will leave the exercise to interested readers.</p>
    </div>