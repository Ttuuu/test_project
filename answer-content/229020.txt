<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>General remarks</h3>

<p>This</p>

<pre><code>using namespace std;
</code></pre>

<p>is considered bad practice, see for example <a href="https://stackoverflow.com/q/1452721/1187415">Why is “using namespace std” considered bad practice?</a> on Stack Overflow.</p>

<p>Consistent indenting and spacing increases the legibility of the code.</p>

<p>Use curly braces for if/else blocks even if they consist only of a single statement.</p>

<p>Enable all compiler warnings and fix them, such as</p>

<pre><code>std::cout&lt;&lt;x1&lt;&lt;" "&lt;&lt;y1;
// Variable 'x1' may be uninitialized when used here
// Variable 'y1' may be uninitialized when used here
</code></pre>

<p>Choose better variable names: </p>

<pre><code>bool flag = false;
</code></pre>

<p>does not indicate what the flag is used for.</p>

<p>Testing boolean values: This may be opinion-based, but I prefer</p>

<pre><code>if (!flag) { ... }
</code></pre>

<p>over </p>

<pre><code>if (flag == false) { ... }
</code></pre>

<p>The <code>return</code> statement in <code>main()</code> is optional, and can be omitted.</p>

<h3>Program structure</h3>

<p>Separating the actual computation from the I/O makes the main method short, increases the clarity of the program, and allows you to add unit tests easily. In addition, you can “early return” from the function if a solution is found, so that the <code>flag</code>, <code>x1</code>, <code>y1</code> variables becomes obsolete.</p>

<p>As of C++17 you can return an <em>optional</em> which contains a value (the solution as a pair) or not.</p>

<p>With these suggestions, the program could look like this:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;optional&gt;

std::optional&lt;std::pair&lt;int, int&gt;&gt; solveSteps(int x, int y, int n) {
    for (int i = 0; i &lt;= n; i++) {
        for (int j = 0; j &lt;= n; j++) {
            if (x * i + j * y == n) {
                // Return solution:
                return std::make_optional(std::make_pair(i, j));
            }
        }
    }
    // No solution found:
    return std::nullopt;
}

int main()
{
    int n, x, y;
    std::cin &gt;&gt; n &gt;&gt; x &gt;&gt; y;

    auto solution = solveSteps(x, y, n);
    if (solution) {
        std::cout &lt;&lt; solution-&gt;first &lt;&lt; " " &lt;&lt; solution-&gt;second &lt;&lt; "\n";
    } else {
        std::cout &lt;&lt; "-1\n";
    }
}
</code></pre>

<h3>Increasing the performance</h3>

<p>First you can increase <code>i</code> and <code>j</code> in steps of <code>x</code> and <code>y</code>, respectively. That reduces the number of iterations and save the multiplications:</p>

<pre><code>std::optional&lt;std::pair&lt;int, int&gt;&gt; solveSteps(int x, int y, int n) {
    for (int i = 0; i &lt;= n; i += x) {
        for (int j = 0; j &lt;= n; j += y) {
            if (i + j == n) {
                // Return solution:
                return std::make_optional(std::make_pair(i/x, j/y));
            }
        }
    }
    // No solution found:
    return std::nullopt;
}
</code></pre>

<p>The next improvement is to get rid of the inner loop: After moving  <code>i</code> steps of width  <code>x</code> you only have to check if the remaining distance is a multiple of <code>y</code>:</p>

<pre><code>std::optional&lt;std::pair&lt;int, int&gt;&gt; solveSteps(int x, int y, int n) {
    for (int i = 0; i &lt;= n; i += x) {
        if ((n - i) % y == 0) {
            // Return solution:
            return std::make_optional(std::make_pair(i/x, (n-i)/y));
        }
    }
    // No solution found:
    return std::nullopt;
}
</code></pre>

<p>Another improvement would be to check if <code>y &gt; x</code>. In that case it is more efficient to iterate in steps of width  <code>y</code> and check if the remaining distance is a multiple of <code>x</code>. </p>

<h3>Mathematics</h3>

<p>Some final remarks on how this can be solved mathematically, with links for further reading.</p>

<p>What you are looking for is solution <span class="math-container">\$ (i, j) \$</span> to the equation
<span class="math-container">$$
 n = i x + j y
$$</span>
with non-negative integers <span class="math-container">\$ i, j \$</span>. This is related to <a href="https://en.wikipedia.org/wiki/B%C3%A9zout%27s_identity" rel="nofollow noreferrer">Bézout's identity</a>. In particular, a solution can only exist if  <span class="math-container">\$ n  \$</span> is a multiple of the greatest common divisor  <span class="math-container">\$ \gcd(x, y)  \$</span>, which is efficiently determined with the <a href="https://en.wikipedia.org/wiki/Euclidean_algorithm" rel="nofollow noreferrer">euclidean algorithm</a>. In that case it is easy to check if a solution with non-negative numbers exists, compare e.g. <a href="https://math.stackexchange.com/q/237372/42969">Finding positive Bézout coefficients</a> on Mathematics Stack Exchange.</p>
    </div>