<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>Wanted to use &amp;str as return value as it's immutable</p>
</blockquote>

<p>That is not possible because the function may produce a new, owned string out of <code>value</code>, in this line:</p>

<pre><code>    (_, _) =&gt; value.to_string()
</code></pre>

<p>All other match arms could return a <code>&amp;'static str</code> since they are string literals, but the output of this one is a <code>String</code>. And the fact that you will not mutate the string doesn't change things here, because a new string needs to be constructed anyway.</p>

<p>For cases where a value may either borrow or own the data, you may consider using a <a href="https://doc.rust-lang.org/stable/std/borrow/enum.Cow.html" rel="noreferrer"><code>Cow</code></a>.</p>

<pre><code>fn fizzbuzz(value: i32) -&gt; Cow&lt;'static, str&gt; {
    match (value % 3, value % 5) {
        (0, 0) =&gt; "FizzBuzz".into(),
        (0, _) =&gt; "Fizz".into(),
        (_, 0) =&gt; "Buzz".into(),
        (_, _) =&gt; value.to_string().into()
    }
}
</code></pre>

<p>This function will be slightly more efficient memory-wise: the first three guards will return a borrowed static string (<code>Cow::Borrowed</code>), whereas the last one will own a string (<code>Cow::Owned</code>). The <code>.into()</code> calls are necessary for the conversion from the base type (either <code>&amp;str</code> or <code>String</code>) to a <code>Cow</code>.</p>

<p>Other issues:</p>

<ul>
<li><code>return</code> statements at the end of a function are redundant. You can just write the expression without a semi-colon at the end.</li>
<li>you are not using the variable <code>ss</code> in <code>main</code>.</li>
<li>although entirely subjective, <code>u32</code> may be used instead of <code>i32</code> when negative numbers are never considered in your program logic.</li>
</ul>

<blockquote>
  <p>Is there a way to make it simpler without calling straight <code>println!("Fizzbuzz")</code> and so on?</p>
</blockquote>

<p>Other than the given suggestions, I'm afraid that the given code appears simple and readable enough. That function does not hold a very complex logic.</p>
    </div>