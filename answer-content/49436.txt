<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The code generally looks pretty good, but I think there are some things you could fix up here.</p>

<h2>Don't forget the stop code</h2>

<p>You have the start code of <code>0000</code> but you've forgotten the stop code which is <code>100</code>.  When you calculate, you could just tack it onto the end with <code>bits += '100'</code> </p>

<h2>Use SVG <code>&lt;def&gt;</code>s</h2>

<p>Since the purpose is to create an SVG barcode, it make sense to tighten the resulting SVG.  You may already know how to use a <code>&lt;def&gt;</code> in SVG and it definitely makes things a little easier to understand here.  The way your code is currently structures, it creates four different styles of <code>&lt;rect&gt;</code> which are all combinations of narrow/wide and black/white.  You could predefine each of those shapes and then simply intantiate them within the body of the svg code.  That would make the definition for <code>svg</code> and <code>bar</code> like this:</p>

<pre><code>svg = '''&lt;svg height="50"&gt;&lt;defs&gt;
&lt;g id="b0"&gt;&lt;rect x="0" y="0" width="2" height="50"/&gt;&lt;/g&gt;
&lt;g id="b1"&gt;&lt;rect x="0" y="0" width="4" height="50"/&gt;&lt;/g&gt;
&lt;/defs&gt;'''
bar = '&lt;use xlink:href="#b{0}" x="{1}" y="0" {2}/&gt;'
</code></pre>

<p>Using it would then be </p>

<pre><code>svg += bar.format(bit, pos, style)
</code></pre>

<p>An improvement would be to create both bars and spaces like this:</p>

<pre><code>&lt;g id="b0"&gt;&lt;rect x="0" y="0" width="2" height="50" style="fill:rgb(0,0,0)"/&gt;&lt;/g&gt;
&lt;g id="b1"&gt;&lt;rect x="0" y="0" width="4" height="50" style="fill:rgb(0,0,0)"/&gt;&lt;/g&gt;
&lt;g id="s0"&gt;&lt;rect x="0" y="0" width="2" height="50" style="fill:rgb(255,255,255)"/&gt;&lt;/g&gt;
&lt;g id="s1"&gt;&lt;rect x="0" y="0" width="4" height="50" style="fill:rgb(255,255,255)"/&gt;&lt;/g&gt;
</code></pre>

<p>Then your loop could look then like this:</p>

<pre><code>for i, bit in enumerate(bits):
    width = int(bit) * 2 + 2
    svg += bar.format('bs'[i%2], bit, pos)
    pos += width
</code></pre>

<p>Although that may look verbose, it actually is over 2k shorter for a 12 digit barcode.</p>

<h2>Think carefully about data representation</h2>

<p>Your code currently translates digits into a series of '1' and '0' characters and then translates again into SVG rectangles.  Why not eliminate a step? Your code could just as easily translate them in a single operation.</p>

<h2>Use list comprehensions instead of <code>for</code> loops</h2>

<p>The use of list comprehensions is almost always faster than a <code>for</code> loop in Python, so we use them when we can.  It also tends to make the code shorter.  So for example, we could change your loop to calculate the string of bar code bits to calculate all the black bits and then all the white bits like this:</p>

<pre><code>black = "".join([bytes[i] for i in digits[0::2]])
white = "".join([bytes[i] for i in digits[1::2]])
# shuffle them together
databits = "".join("".join(i) for i in zip(black,white))
# create the full bar code string with start and stop
bits = "".join(['0000',databits,'100'])
</code></pre>

<p>Doing this with <code>join</code> also saves time.  Appending strings with <code>+=</code> is very slow in Python.</p>

<h2>Prefer <code>xrange</code> to <code>range</code></h2>

<p>When you use <code>range</code>, a whole list object is created, using memory.  With <code>xrange</code>, a generator is created instead populated which can save memory.  For any reasonably sized bar code this won't make much difference here, but it's good practice for Python 2.7.  In Python 3, <code>xrange</code> doesn't exist and <code>range</code> creates a generator, so keep that in mind if you change versions.</p>

<h2>Don't draw more than you have to</h2>

<p>You're drawing one <code>&lt;rect&gt;</code> for every bar or space, but it's really not necessary.  Instead, you could create one larger rectangle that's the "background" space color and then only draw the black bars.</p>
    </div>