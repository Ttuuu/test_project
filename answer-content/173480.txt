<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>EDIT: As Paparazzi made it clear to me, a <code>Dictionary</code> is not guaranteed to hold order. I did some research into why and edited my answer to accommodate this fact.</p>

<hr>

<p>A <code>Dictionary</code> is an implementation of a hash table. When we look at what <code>Add(TKey, TValue)</code> actually does, it assigns each key to a bucket which is then stored in an array of buckets. </p>

<p>Each time you resize your <code>Dictionary</code> (removing, inserting), it will be rehashed and it is not guaranteed to be the same order each time. </p>

<p>Refer to <a href="https://github.com/Microsoft/referencesource/blob/master/mscorlib/system/collections/generic/dictionary.cs" rel="nofollow noreferrer">this</a> for better understanding of how <code>Dictionary</code> is implemented.</p>

<p>If you care about keeping the order of your <code>Dictionary</code>, you can create a <code>SortedDictionary</code> which <b>will</b> preserve order. <code>SortedDictionary</code> can take a <code>Dictionary</code> as a parameter as one of its overloaded constructors:</p>

<pre><code>var sortedDictionary = new SortedDictionary&lt;string, string&gt;(dictionary);
</code></pre>

<hr>

<p>If you do want a method of enumerating by key value (alphabetically, in this case), you can use LINQ. It's only slightly different than t3chb0t's answer but I thought I'd add my way:</p>

<pre><code>Dictionary&lt;string, string&gt; sortMacroDictionary(Dictionary&lt;string, string&gt; whichDictionary)
{
    return whichDictionary.OrderBy(x =&gt; x.Key).ToDictionary(x =&gt; x.Key, y =&gt; y.Value);
}
</code></pre>

<p>This creates an <code>IOrderedEnumerable&lt;KeyValuePair&lt;string, string&gt;&gt;</code>. We then use <code>Enumerable.ToDictionary</code> to generate a dictionary based on that order.</p>

<p>You can also use a sorted list (using an <code>IComparer</code>) to achieve the same result:</p>

<pre><code>Dictionary&lt;string, string&gt; sortMacroDictionary(Dictionary&lt;string, string&gt; whichDictionary)
{
    var sortedList = whichDictionary.ToList();
    sortedList.Sort((x, y) =&gt; x.Key.CompareTo(y.Key));
    return sortedList.ToDictionary(x =&gt; x.Key, y =&gt; y.Value);
}
</code></pre>
    </div>