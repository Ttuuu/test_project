<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>What you actually need is just a thin layer that would handle your requirements on top of the generic <code>Dictionary&lt;TKey, TValue&gt;</code>. You don't need any fancy or complex work to achieve that, as you're not building the collection from the scratch. </p>

<p>So, your implementation would use </p>

<pre><code>Dictionary&lt;TKey, IEnumerable&lt;TValue&gt;&gt; _Data
</code></pre>

<p>Now, you don't the struct that you have in your code, you just need to create your own interface that would have your requirements along with the minimum necessary methods or properties that needed. </p>

<p>Something like : </p>

<pre><code>public interface IMultiDictionary&lt;TKey, TValue&gt;
{

    IEnumerable&lt;TValue&gt; this[TKey key] { get; set; }

    IEnumerable&lt;TKey&gt; Keys { get; }

    IEnumerable&lt;TValue&gt; Values { get; }

    int Count { get; }

    void AddOrUpdate(TKey key, TValue value);

    bool ContainsKey(TKey key);

    // remove a key along with its values
    bool RemoveKey(TKey key);

    // remove a single value from a key values.
    bool RemoveValue(TKey key, TValue value);

    //Clear All Key values, but keep the key
    void Clear(TKey key);

    bool TryGetValue(TKey key, out IEnumerable&lt;TValue&gt; value);
}
</code></pre>

<p>now you can do this : </p>

<pre><code>public class MultiDictionary&lt;TKey, TValue&gt; : IMultiDictionary&lt;TKey, TValue&gt;, IEnumerable
{
    private readonly Dictionary&lt;TKey, IEnumerable&lt;TValue&gt;&gt; _Data = new Dictionary&lt;TKey, IEnumerable&lt;TValue&gt;&gt;();

    public IEnumerable&lt;TValue&gt; Values =&gt; _Data.Values.SelectMany(x =&gt; x);

    public IEnumerable&lt;TKey&gt; Keys =&gt; _Data.Keys;

    public int Count =&gt; _Data.Count;

    public IEnumerable&lt;TValue&gt; this[TKey key]
    {
        get =&gt; _Data[key];
        set =&gt; AddOrUpdate(key, value);
    }

    public void AddOrUpdate(TKey key, IEnumerable&lt;TValue&gt; values)
    {
        if (ContainsKey(key)) // if key exists
        {
            (_Data[key] as List&lt;TValue&gt;)?.AddRange(values);                
        }
        else
        {
            // add the new key with its value.
            _Data.Add(key, values);
        }
    }

    public void AddOrUpdate(TKey key, TValue value)
    {
        if (ContainsKey(key)) // if key exists
        {
            //check value and add it if not exists
            if (!_Data[key].Contains(value)) { (_Data[key] as List&lt;TValue&gt;)?.Add(value); }
        }
        else
        {
            // add the new key with its value.
            _Data.Add(key, new List&lt;TValue&gt;() { value });
        }
    }

    public void Clear(TKey key)
    {
        if (ContainsKey(key))
        {
            (_Data[key] as List&lt;TValue&gt;)?.Clear();
        }
    }

    public bool TryGetValue(TKey key, out IEnumerable&lt;TValue&gt; values) =&gt; _Data.TryGetValue(key, out values);

    public bool ContainsKey(TKey key) =&gt; _Data.ContainsKey(key);

    public bool RemoveKey(TKey key) =&gt; _Data.Remove(key);

    public bool RemoveValue(TKey key, TValue value) =&gt; ContainsKey(key) &amp;&amp; (_Data[key] as List&lt;TValue&gt;)?.Remove(value) == true;

    public void Clean()
    {
        foreach (var item in _Data.Where(x =&gt; !x.Value.Any()))
        {
            _Data.Remove(item.Key);
        }
    }
    // enabling foreach loop
    public IEnumerator GetEnumerator() =&gt; _Data.GetEnumerator();

}
</code></pre>

<p><em>(NOTE : I skipped validations just to minimize the code for demonstration purpose).</em> </p>

<p>If you see the <code>AddOrUpdate</code> there is two overloads (one accepts single value, and the other accepts a collection). This would give more flexibility when you adding or updating a key. And since each key has a collection of values, we needed something like <code>RemoveKey</code> and <code>RemoveValue</code> you can rename them to <code>Remove</code> but I found it would be more readable this way. Both will come in handy. The <code>Clean()</code> method can be called whenever you need to delete empty keys.</p>

<p>The use of <code>IEnumerable</code> is to have the minimum collection requirement, meaning, it'll be flexible with other collection types, since most generic collections (including Array) implements it. </p>
    </div>