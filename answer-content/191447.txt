<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>pointers</h1>

<p>I supposed the use of shared pointers was the possibility of sharing tree representation across instances, "persistence", and transactions.  I’ve just watched some presentations on persistent data structures (and on Google’s trie, for that matter) so that was in my mind.</p>

<p>I agree with Frank about pointers.  When calling code that operates on an object, it doesn’t care how the object is owned, so making it take an argument of type shared_ptr means it can’t take objects owned by unique_ptr, or that are direct members of larger structures, or on the stack, etc.  So these arguments are passed <strong>as a reference</strong>.</p>

<p><a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Ri-raw" rel="nofollow noreferrer">In the Standard Guidelines, pointers are always non-owning</a>.  You mark them with owner&lt;&gt; to indicate otherwise.</p>

<p>I agree that the root does not need to be dynamically allocated.  But you need to avoid having an ugly special case for the first node.</p>

<pre><code>Node* n = &amp;root;
for (auto c : key) {
    int index = to_index(c);
    auto&amp; slot = n-&gt;children[index];
    if (!slot)  slot = make_unique&lt;Node&gt;();
    n= slot.get();
}
</code></pre>

<h1>duplicated traversal code</h1>

<p>I note that both functions have the same logic to traverse the tree, in their core.  Normally, like in standard containers, there will be a single function that does this, and it is used by all the other functions.</p>

<p>If these are the only two functions you have, it’s probably not worth the effort.  But if you have more (remove, find the closest match, etc.) then you should do that.</p>

<h1>26</h1>

<p>The first thing I noticed on your update was that you replaced the evil macro with a magic number, rather than a better way of defining a constant.</p>

<pre><code>static constexpr size_t nodesize = 1+'z'-'a';
std::unique_ptr&lt;Node&gt; children[nodesize];
</code></pre>

<h1>bad key</h1>

<pre><code>int index = c - 'a';  // note signed result wanted
if (index&lt;0 || index&gt;=nodesize)  throw invalid_argument("oops");
</code></pre>

<p>Both functions go over a string in the same manner, so make that a common function.</p>

<pre><code>int index = to_index(c);
</code></pre>

<hr>

<h1>Portability of character encoding</h1>

<p>It’s been noted that the letters are not necessarily contiguous in the source character set.  However, if you are writing in (original) <a href="https://en.wikipedia.org/wiki/EBCDIC_001" rel="nofollow noreferrer">EBCDIC</a> you have worse problems and would not be able to type the <code>{ }</code> characters into the source file.  (I’ve <em>discussed</em> C++ on a primitive type of forum software running on an EBCDIC system that was lacking <code>[ ]</code> and a few others, and it is not simple.</p>

<p>The execution character set is distinct from the source character set, and depends on the locale.  More generally, you can see that it depends on the source of the strings such as a saved file — if the file uses a character set that doesn’t use the same codes for letters as we expected, then things will go bad.</p>

<p>So, part of the specification is that the input strings will always be in UTF-8, or (sufficient for our purposes) is compatible with ASCII.</p>

<p>What about at compile-time though?  The standard <a href="https://timsong-cpp.github.io/cppwp/n4659/lex.ccon" rel="nofollow noreferrer">says</a> that the value of a character literal <code>'a'</code> is in the <em>execution</em> character set, not the source character set, which is good.  Except that the execution character set is not known until run time, so how can it do that?</p>

<p>However, you <em>can</em> specify that a character is using UTF-8, regardless of any locale or whatnot going on in the compiler or target system.</p>

<pre><code>static constexpr size_t nodesize = 1+u8'z'-u8'a';
</code></pre>
    </div>