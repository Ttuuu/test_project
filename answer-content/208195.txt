<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Following @Calak's comment, I'm now thinking of the following change of order of the template parameters:</p>

<pre><code>#include &lt;type_traits&gt;

template &lt;typename U&gt;
struct constness_of { 
    enum { value = std::is_const&lt;U&gt;::value };
    template &lt;typename T&gt;
    struct applied_to {
        using type = typename std::conditional&lt;
            value,
            typename std::add_const&lt;T&gt;::type,
            typename std::remove_const&lt;T&gt;::type
            &gt;::type;
    };
#if __cplusplus &gt;= 201402L
    template &lt;typename U&gt;
    using applied_to_t = typename applied_to&lt;U&gt;::type;
#endif
};
</code></pre>

<p>Which would be used as follows:</p>

<pre><code>if (constness_of&lt;bar&gt;::value) { std::cout &lt;&lt; "bar is const!\n"; }
</code></pre>

<p>and:</p>

<pre><code>using altered_foo = constness_of&lt;bar&gt;::applied_to&lt;foo&gt;::type;
using altered_foo_2 = constness_of&lt;bar&gt;::applied_to_t&lt;foo&gt;;
</code></pre>
    </div>