<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><em>Python-specific</em> improvements:</p>

<ul>
<li><p>creating <code>bw_checkers</code> (in <code>get_checkers</code> function). Instead of appending repeatedly to previously created empty list:</p>

<pre><code>for i in range(8):
    bw_checkers.append(bw_row if i % 2 == 0 else bw_row[::-1]) 
</code></pre>

<p>use <em>old-good</em> list comprehension:</p>

<pre><code>bw_checkers = [bw_row if i % 2 == 0 else bw_row[::-1] for i in range(8)]
</code></pre></li>
<li><p>composing string keys in <code>get_army()</code> function. Formatted strings <code>f""</code> give a better visual perception:</p>

<pre><code>...
guard = [chrs[f'{u}_rook'], chrs[f'{u}_knight'], chrs[f'{u}_bishop']]
</code></pre></li>
<li><p><strong><code>get_board</code></strong> function. <br>Creating the initial board with <code>board = [squad for squad in get_army('B')]</code> is redundantly, but essentially the same as <code>board = get_army('B')</code>.<br>Appending 4 rows of 8 <code>0</code>s with:</p>

<pre><code>for _ in range(4):
    board.append(['0'] * 8)
</code></pre>

<p>is flexibly replaced with <em>list multiplication</em>:</p>

<pre><code>board += [['0'] * 8] * 4
</code></pre>

<p>or <code>board += [['0'] * 8 for _ in range(4)]</code> - to avoid <em>cross-mutability</em> if those rows happen to be modified in further potential game  </p></li>
<li><p><code>board.copy()</code> (in <code>print_board</code> function) is redundant as the <code>board</code> argument itself is created with <code>np.array(board)</code> (as new array)</p></li>
</ul>
    </div>