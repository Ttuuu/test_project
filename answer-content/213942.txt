<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Object Oriented Programming</h1>

<blockquote>
  <p>I would like you to analyze my code that it follows basic OOPS concepts like Abstraction, Encapsulation, Polymorphism etc</p>
</blockquote>

<p>In general it is about sending messages (interact with methods) from one object to an other.</p>

<p>The code uses the keyword <code>class</code> but this makes no program object-oriented. To analyze the code and to make it object-oriented takes time and should be done by you.</p>

<p>Some guide lines based the code you provide us:</p>

<ul>
<li>A class should have only one responsibility</li>
<li>A class should be small</li>
<li>A method should be small</li>
<li><a href="https://en.wikipedia.org/wiki/Open%E2%80%93closed_principle" rel="nofollow noreferrer">A class should be open for extension, but closed for modification</a> </li>
<li>A class should have a reduced number of members</li>
</ul>

<hr>

<h1><a href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller" rel="nofollow noreferrer">Model-View-Controller</a></h1>

<p>Currently the business logic and view logic has a high cohesion. With MVC you can decouple the view from the business logic. So it could be imaginable to switch the a view from the "normal" numerals to Roman numerals without changing the business logic. </p>

<hr>

<h1>Code Smell</h1>

<h2>Don't Make me Think</h2>

<p>What is a <code>Cal</code>? Is it a abbreviation for <em>Calculation</em>? Let me take a look into the class.. Ok.. there is a <code>b0</code>, <code>b1</code>, .. they could represent the buttons of a calculator. So <code>Cul</code> stands for <em>Calculator</em>.</p>

<p>Rename <code>Cul</code> to <code>Calculator</code> </p>

<h2>Commented-Out Code</h2>

<p>Robert C Martin <a href="http://www.informit.com/articles/article.aspx?p=1334908" rel="nofollow noreferrer">sad</a></p>

<blockquote>
  <p>When you see commented-out code, delete it! Don’t worry; the source code control system still remembers it. If anyone really needs it, he or she can go back and check out a previous version. Don’t suffer commented-out code to survive.</p>
</blockquote>

<p>A example from the code you provided</p>

<blockquote>
  <pre class="lang-java prettyprint-override"><code>/*
* if (getModel().isPressed()) { setBackground(bgcolor.darker().darker()); //
* setForeground(Color.WHITE); } else if (getModel().isRollover()) {
* setBackground(bgcolor.darker().darker()); // setForeground(Color.WHITE); }
* else { // setForeground(color2); setBackground(bgcolor.darker()); }
*/
</code></pre>
</blockquote>

<p>What does it mean to the person how read it? Should the person ignore it, like a compiler, or shout it be a hind, that this could work? Now one knows.. </p>

<h2>Comments</h2>

<blockquote>
  <p><a href="https://www.goodreads.com/author/quotes/45372.Robert_C_Martin?page=2" rel="nofollow noreferrer">Don’t Use a Comment When You Can Use a Function or a Variable</a></p>
</blockquote>

<p>To improve the readability of he code we could wrap the following in methods</p>

<blockquote>
  <pre class="lang-java prettyprint-override"><code>/************* Initialising buttons ************/
b1 = new DigitButton("1");
b2 = new DigitButton("2");
// ...
</code></pre>
</blockquote>

<pre class="lang-java prettyprint-override"><code>private void initializeButtons() {
    b1 = new DigitButton("1");
    b2 = new DigitButton("2");
    // ...
}
</code></pre>

<p>and </p>

<blockquote>
  <pre class="lang-java prettyprint-override"><code>// TextField in which result is to be displayed
tf = new JTextField();
tf.setEditable(false);
// ...
</code></pre>
</blockquote>

<pre class="lang-java prettyprint-override"><code>private void createTextfield() {
    tf = new JTextField();
    tf.setEditable(false);
    //..
}
</code></pre>

<p>till the constructor looks like</p>

<pre class="lang-java prettyprint-override"><code>Cal() {
    initializeButtons();
    createTextfield();
    giveButtonLocations();
    giveButtonsActionListeners();
}
</code></pre>

<h2>Follow the Standard</h2>

<p>When I first saw the statement <code>Text.equals("0")</code> I thought <code>Text</code> would be a class with a static method <code>equals</code>.</p>

<p>But <code>Text</code> is just a <code>String</code></p>

<blockquote>
  <pre class="lang-java prettyprint-override"><code>private boolean isZero(String Text)
</code></pre>
</blockquote>

<p><code>Text</code> should be renamed to <code>text</code> so it is clear that it is a variable.</p>

<h2>Empty Blocks</h2>

<blockquote>
  <pre class="lang-java prettyprint-override"><code>if (tf.getText().equals("∞")) {

} else if (tf.getText().equals("Invalid input")) {

}
</code></pre>
</blockquote>

<p>As a reader I do not know if there is code missing and if these blocks should be empty that I have to thing about it why they are empty. But if you remove these two empty blocks the logic will be the same.</p>

<h2>Duplicate Code</h2>

<blockquote>
  <pre class="lang-java prettyprint-override"><code>} else if (e.getSource().equals(b0)) {
    if (isZero(tf.getText())) {
        tf.setText("0");
    } else {
        tf.setText(tf.getText().concat("0"));
    }
} else if (e.getSource().equals(b1)) {
    if (isZero(tf.getText())) {
        tf.setText("1");
    } else {
        tf.setText(tf.getText().concat("1"));
    }
} else if (e.getSource().equals(b2)) {
    // ...
}
// ...
</code></pre>
</blockquote>

<h3>Put Buttons Into a Map</h3>

<pre class="lang-java prettyprint-override"><code>class Calculator {
    private Map&lt;DigitButton&gt; digitButtons;

    Calculator() {
        initializeButtons();
        // ...
    }

    private void initializeButtons() {
        Map&lt;DigitButton&gt; digitButtons = new HashMap();
        digitButtons.put("0", new DigitButton("0"));
        digitButtons.put("1", new DigitButton("1"));
        // ..
        this.digitButtons  = digitButtons;
    }
}
</code></pre>

<p>A other way would be to accept a map of buttons through the constructor.</p>

<pre class="lang-java prettyprint-override"><code>class Calculator {
    private Map&lt;String, DigitButton&gt; digitButtons;
    // ...

    Calculator(Map&lt;String, DigitButton&gt; digitButtons) {
        this.digitButtons = digitButtons;
        // ...
    }
}
</code></pre>

<h3>Replace If-Statements by <code>get</code></h3>

<p>Since a <code>DigitButton</code> is a <code>JButton</code> it is possible to get the text of the button via <code>getText</code>. </p>

<pre class="lang-java prettyprint-override"><code>private void getInput(ActionEvent e) {
    DigitButton button = digitButtons.get(e.getSource());
    String digit = button.getText();
    if (isZero(tf.getText())) {
        tf.setText(digit);
    } else {
        tf.setText(tf.getText().concat(digit));
    }
    // ...
}
</code></pre>

<h2>Wrap the Map into a First-Class-Collection</h2>

<p>The First Class Collection [FCC] is an idea of the <a href="https://www.cs.helsinki.fi/u/luontola/tdd-2009/ext/ObjectCalisthenics.pdf" rel="nofollow noreferrer">Object Calisthenics</a>.</p>

<blockquote>
  <p>Any class that contains a collection should contain no other member variables. Each collection gets wrapped in its own class, so now behaviors related to the collection have a home.</p>
</blockquote>

<pre class="lang-java prettyprint-override"><code>class DigitButtonColletion {
    private Map&lt;String, DigitButton&gt; digitButtons;

    DigitButtonColletion(Map&lt;String, DigitButton&gt; digitButtons) {
        this.digitButtons = digitButtons;
    }

    public DigitButton findBySymbol(String symbol) {
        return digitButtons.get(symbol);
    }

    // example for another method
    public DigitButton findAllLessThan(String symbol) {
        //...
    }
}
</code></pre>

<p>When you do same for the <code>OpButtons</code> the <code>Calculator</code> could look like</p>

<pre class="lang-java prettyprint-override"><code>class Calculator {
    private DigitButtonCollection digitButtons;
    private OperationButtonCollection operationButtons;
    // ...

    Calculator(DigitButtonCollection digitButtons,
               OperationButtonCollection operationButtons) {
        this.digitButtons = digitButtons;
        this.operationButtons = operationButtons;
        // ...
    }
}
</code></pre>
    </div>