<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A few suggestions for general code quality:</p>

<ul>
<li>If your class only does one thing and it doesn't store any values, it should be a function. <code>Redpy</code> only downloads images from reddit and stores values to achieve exactly this, which you could do in a function. Using a class can have unforeseen consequences.</li>
<li>Choose descriptive names for variables and functions. <code>_getImages</code> does not actually get the images, it returns a list of links of images. In this method, you have <code>images = [] #contains links of images</code>. The comment could have been avoided if you would have chosen <code>image_links</code> as name.</li>
<li>If you split your code up into methods or functions, everything belonging to one task should be inside it. The removal of <code>'amp;'</code> in every <code>image_link</code> does not belong in <code>_DownloadFiles</code>, it should be in <code>_getImages</code>. <code>download</code> gets unnecessarily separated into <code>_DownloadFiles</code> and <code>_DownloadFiles</code> doesn't generally download files, but it could if some of its functionality got relocated elsewhere.</li>
<li>Clean up your code: there are unnecessary line breaks after <code>_DownloadFiles</code> and a redundant <code>return True</code> in <code>createFolder</code>.</li>
<li>Don't catch general Exceptions, be more specific. In <code>_getImages</code>, you should just look out for <code>KeyError</code>s. Exceptions in <code>request.get</code> on the other hand are not handled although they possibly should be.</li>
<li>The pattern of looping over a list with a counter (<code>index</code> in your code) in <code>_DownloadFiles</code> can be simplified with <a href="http://book.pythontips.com/en/latest/enumerate.html" rel="noreferrer">enumerate</a>.</li>
<li>When working with files, it is more elegant to use a <a href="http://book.pythontips.com/en/latest/context_managers.html" rel="noreferrer">context manager</a>.</li>
</ul>

<p>Possible bugs:</p>

<ul>
<li><code>subreddit.strip('/')</code> just returns a new string that you would have to assign to a new variable. In your code, the value of <code>subreddit</code> remains unchanged.</li>
<li><code>self.user</code> gets updated every time <code>download</code> is called. If this happens multiple  times, <code>self.user</code> becomes a dict encapsulating a dict encapsulated a dict...</li>
<li>If something goes wrong when extracting links in <code>_getImages</code>, less links than expected get returned.</li>
<li>If your folder already contains images, they will be overwritten.</li>
</ul>

<p>Concerning PEP8:</p>

<ul>
<li>A few of your lines are longer than 80 characters. Try to split them up, either by implementing the same logic over multiple lines or by <a href="https://stackoverflow.com/questions/53162/how-can-i-do-a-line-break-line-continuation-in-python">breaking the line up</a>.</li>
<li>In PEP8, functions and methods are in <a href="https://en.wikipedia.org/wiki/Snake_case" rel="noreferrer">snake_case</a>.</li>
</ul>

<p>Nit-picky stuff:</p>

<ul>
<li>You could just use an empty string as default argument for <code>sort_option</code>. Strings are immutable, so you don't have the problem of <a href="https://docs.python-guide.org/writing/gotchas/#mutable-default-arguments" rel="noreferrer">mutable default arguments</a>.</li>
<li>I don't see why you would import <code>requests as _requests</code> and <code>os as _os</code></li>
<li>There is no need to construct an absolute file path. <code>f'{_os.getcwd()}/red_media/{index}.jpg'</code> could become <code>f'red_media/{index}.jpg'</code></li>
</ul>

<hr>

<p>Here is my attempt at solving this problem:</p>

<pre><code>import requests
import os


def get_image_links(json, N):
    '''returs a list of the first &lt;N&gt; links to reddit images found in &lt;json&gt;'''
    try:
        children = json['data']['children']
    except KeyError:
        return []

    # append links from children until N are found
    image_links = []
    for child in children:
        try:
            image_link = child['data']['preview']['images'][0]['source']['url']
        except KeyError:
            continue

        image_link = image_link.replace('amp;', '')
        image_links.append(image_link)

        if len(image_links)==N:
            break

    return image_links

def download_files(file_links, folder_name='data', file_extension='jpeg'):
    '''downloads files from &lt;file_links&gt; into subfolder ./&lt;folder_name&gt;/'''

    # create subfolder if it does not exist
    if not os.path.exists(folder_name):
        os.mkdir(folder_name)

    # download files
    for i, file_link in enumerate(file_links):
        try:
            res = requests.get(file_link)
        except requests.exceptions.RequestException:
            print(f"Unable to download {file_link}")
            continue
        if not res.ok:
            print(f"Error {res.status_code} when requesting {file_link}")
            continue

        file_path = os.path.join(folder_name, f'{i}.{file_extension}')
        with open(file_path, 'wb') as file:
            for chunk in res.iter_content(100000):
                file.write(chunk)

def download_reddit_images(user, subreddit, N=5, sort_by='',
                           folder_name='red_media'):
    '''
    downloads the first &lt;N&gt; images of &lt;subreddit&gt; sorted by &lt;sort_by&gt;
    (''/'new'/'hot'/'top') into subfolder ./&lt;folder_name&gt;/
    '''

    json_url = ('https://www.reddit.com/r/' + subreddit.strip('/') + '/'
                + sort_by + '.json')

    try:
        res = requests.get(json_url, headers={'user-agent':user})
    except requests.exceptions.RequestException:
        print(f"Unable to get {json_url}")
        return

    if not res.ok:
        print(f"Error {res.status_code} when requesting {json_url}")
        return

    image_links = get_image_links(res.json(), N)
    if not len(image_links):
        print("Unable to find any images")
        return

    download_files(image_links, folder_name=folder_name, file_extension='jpeg')


if __name__=='__main__':
    download_reddit_images('', 'all')
</code></pre>

<p>The problem of overwriting existing images persists. A solution would be to use the original filename from reddit that is included in the url.</p>
    </div>