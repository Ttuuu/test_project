<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Separate generation and presentation</h1>

<p><code>valid_boards</code> both generates the solutions, prints and counts them. Better would be to have 1 method to generate the solutions, another to present the result. The simplest way to do this is to make a generator that <code>yield</code>s the solutions, and another method that prints and counts them</p>

<h1><code>reversed</code></h1>

<p><code>reversed(range(row))</code> is a lot more clear than <code>range(row - 1, -1, -1)</code></p>

<h1>magical values</h1>

<p>you use 0 for blocked, 1 for free and 2 for an occupied tile. defining these as global constants would be a lot clearer</p>

<pre><code>BLOCKED = 0
FREE = 1
OCCUPIED = 2
</code></pre>

<p>and then use if for example</p>

<pre><code>chess_board[row, col] = BLOCKED
</code></pre>

<h1>board size</h1>

<p>You use <code>num</code> and <code>limit</code> for the same value, the size of the board. Lat's just call this <code>boardsize</code></p>

<h1>DRY</h1>

<p>In <code>block_positions</code> you do a lot of repetition for the different directions to block. More clear would be to use a generator that <code>yield</code>s all the neighbour of a tile, and use the coordinates yielded to block those</p>

<p>To do this you need a method to check whether a coordinate is valid:</p>

<pre><code>def valid_coord(coordinate, boardsize=5):
    row, column = coordinate
    return 0 &lt;= row &lt; boardsize and 0 &lt;= column &lt; boardsize
</code></pre>

<p>then using <code>itertools.takewhile</code>, <code>functools.partial</code> and <code>itertools.count</code></p>

<pre><code>def neighbours(row, column, boardsize):
    validator = partial(valid_coord, boardsize=boardsize)
    yield from ((row, i) for i in range(0, column))
    yield from ((row, i) for i in range(column + 1, boardsize))
    yield from ((i, column) for i in range(0, row))
    yield from ((i, column) for i in range(row + 1, boardsize))
    yield from takewhile(validator, ((row - i, column - i) for i in count(1)))
    yield from takewhile(validator, ((row + i, column + i) for i in count(1)))
    yield from takewhile(validator, ((row - i, column + i) for i in count(1)))
    yield from takewhile(validator, ((row + i, column - i) for i in count(1)))
</code></pre>

<blockquote>
<pre><code>list(neighbours(2, 3, boardsize=5))
</code></pre>
</blockquote>

<pre><code>[(2, 0), (2, 1), (2, 2), (2, 4), (0, 3), (1, 3), (3, 3), (4, 3), (1, 2), (0, 1), (3, 4), (1, 4), (3, 2), (4, 1)]
</code></pre>

<p>Then the <code>block_positions</code> suddenly becomes very simple</p>

<pre><code>def block_positions(chess_board, row, column, boardsize):
    """Fills all squares that can no longer contain a queen with the value -1
    There are a maximum of 8 directions that must be blocked from a given square"""
    for x, y in neighbours(row, column, boardsize):
        chess_board[x, y] = BLOCKED
</code></pre>

<p>This method doesn't need to return the board. The standard library's convention is that if a method changes the object, it doesn't return something. If it returns a new object, that is returned.</p>

<p>By just changing the <code>neighbours</code>, you can easily change this to find the solutions for [related puzzles(<a href="https://en.wikipedia.org/wiki/Eight_queens_puzzle#Related_problems" rel="nofollow noreferrer">https://en.wikipedia.org/wiki/Eight_queens_puzzle#Related_problems</a>)</p>

<h1><code>numpy</code></h1>

<p>You hardly use any of the numpy strengts, but even then this can be simpler
You can pass a tuple to <code>np.one</code>, so <code>initialise_board</code>  can be as simple as</p>

<pre><code>def initialise_board(num):
    """Build the empty board"""
    return  np.ones((num, num)) * FREE
</code></pre>

<p>Counting the number of places queens can be simpler too: <code>(board == OCCUPIED).sum() == num</code> instead of <code>np.flatten</code> and <code>Counter</code></p>

<h1>generator</h1>

<p>Now the <code>valid_boards</code> method both generates the solutions, prints them and augments the counter. Simpler would be to have them just generate the solutions, and have something else take care of the printing and counting.</p>

<p>Slightly adapting your algorithm to a generator approach:</p>

<pre><code>def add_queen(board, row, boardsize):
    if row == boardsize:
        yield board
        return
    free_columns = (index for index in range(boardsize) if board[row, index] == FREE)
    for column in free_columns:
        new_board = board.copy()
        new_board[row, column] = OCCUPIED
        block_positions(new_board, row, column, boardsize)
        yield from add_queen(new_board, row + 1, boardsize)
</code></pre>

<p>and call it like this:</p>

<pre><code>if __name__ == "__main__":
    boardsize = 5
    board = initialise_board(boardsize)
    for solution_count, solution in enumerate(
        add_queen(board, row=0, boardsize=boardsize), 1
    ):
        print(solution)
        print()
    print(f"{solution_count} solutions")
</code></pre>
    </div>