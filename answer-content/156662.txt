<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Ok so it turns out that the using <code>CALL</code> in a batch script is very slow. So calling a function once per cell was very expensive time-wise.</p>

<p>So I knew I had to move the logic from the function <code>GETNCOUNT</code> into the main processing loop. However the main issue I ran into here was variable expansion.</p>

<p>I am storing each cell value in a variable named <code>A[x][y]</code> e.g. <code>A[1][1]</code>, <code>A[1][2]</code>, <code>A[1][3]</code> etc. So after I had calculated the <code>x</code> and <code>y</code> value of the neighbouring cell that I wanted to check, I had to get the value of that variable somehow.</p>

<p>I tried all kinds of double-expansion-nested syntax, e.g. <code>!A[!X!][!Y!]!</code> but this just resulted in <code>XY</code> because the script was trying to expand variables <code>!A[!</code> <code>!][!</code> <code>!]!</code>.</p>

<p>In the end I tried a <code>FOR</code> loop and this worked very nicely. E.g.: </p>

<p><code>FOR /F "tokens=1,2" %%a IN ("!X! !Y!") DO (ECHO !A[%%a][%%b]!)</code></p>

<p>So what this is doing is expanding and assigning <code>!X!</code> and <code>!Y!</code> to variables local to the <code>FOR</code> loop <code>%%a</code> and <code>%%b</code>. Thus I can inject them into my cell variable and expand this to get the value its assigned.</p>

<p>So here is the 'final' code, it works much much faster than before. I am pretty satisfied with the performance now, I don't think I can get much more speed out of it.</p>

<p>What I would like to do next is figure out a way to exit gracefully as the only way currently is to press <kbd>CTRL</kbd>+<kbd>C</kbd>. But that's for another time...</p>

<pre><code>@ECHO OFF
SETLOCAL ENABLEDELAYEDEXPANSION

IF "%3"=="" GOTO HELP
SET WIDTH=%1
SET HEIGHT=%2
SET DENSITY=%3
SET GENERATION=0
SET /A CELLCOUNT=%WIDTH%*%HEIGHT%
SET ALIVECOUNT=0

::::::::::::::::::::
:: Generate grid 'A'. This grid holds the cell layout for display
:: Also for safety, delete any grid 'B' cells that might be in memory
:: Grid 'B' used to store temporary cell values before they are assigned to grid 'A' 
FOR /L %%h IN (1, 1, %HEIGHT%) DO (
        FOR /L %%w IN (1, 1, %WIDTH%) DO (

            SET /A RAND=!RANDOM!*100/32768

            IF !DENSITY! GEQ !RAND! (
                SET A[%%w][%%h]=@
                SET /A ALIVECOUNT=!ALIVECOUNT!+1
            ) ELSE (
                SET "A[%%w][%%h]= "
            )

            SET B[%%w][%%h]=
        )   
)

::::::::::::::::::::::::::::::
:: TOP OF MAIN PROCESSING LOOP
::
:: Display grid 'A'
:: Loop through all the Grid 'A' cells:
::  - Get values neighbouring cells
::  - Get count of alive neighbours 
::  - Apply 'Game of Life' rules and store resulting value in grid 'b' cell
:: Assign grid 'b' cell values to grid 'a' cell values
:: Loop back to start process again
:PROCESS
SET /A GENERATION=%GENERATION%+1
CLS
ECHO Conway's Game of Life. 
ECHO Generation: %GENERATION%
ECHO Live Cells: %ALIVECOUNT%/%CELLCOUNT%
CALL :DISPLAY

IF "%ALIVECOUNT%"=="0" (GOTO EOF)

SET ALIVECOUNT=0
SET COUNTER=0
FOR /L %%h IN (1, 1, %HEIGHT%) DO (
    FOR /L %%w IN (1, 1, %WIDTH%) DO (

        SET /A COUNTER=!COUNTER!+1
        TITLE Calculating Cell !COUNTER!/%CELLCOUNT%

        SET X=0
        SET Y=0
        SET NCOUNT=0

        REM Find the 3 cells above this cell
        IF %%h EQU 1 (SET Y=%HEIGHT%) ELSE (SET /A Y=%%h-1)
        IF %%w EQU 1 (SET X=%WIDTH%) ELSE (SET /A X=%%w-1)
        FOR /F "tokens=1,2" %%a IN ("!X! !Y!") DO (IF "!A[%%a][%%b]!"=="@" (SET /A NCOUNT=!NCOUNT!+1))  
        SET X=%%w
        FOR /F "tokens=1,2" %%a IN ("!X! !Y!") DO (IF "!A[%%a][%%b]!"=="@" (SET /A NCOUNT=!NCOUNT!+1))
        IF %%w EQU %WIDTH% (SET X=1) ELSE (SET /A X=%%w+1)
        FOR /F "tokens=1,2" %%a IN ("!X! !Y!") DO (IF "!A[%%a][%%b]!"=="@" (SET /A NCOUNT=!NCOUNT!+1))

        REM Find the 2 cells left and right of this cell
        SET Y=%%h
        IF %%w EQU 1 (SET X=%WIDTH%) ELSE (SET /A X=%%w-1)
        FOR /F "tokens=1,2" %%a IN ("!X! !Y!") DO (IF "!A[%%a][%%b]!"=="@" (SET /A NCOUNT=!NCOUNT!+1))
        IF %%w EQU %WIDTH% (SET X=1) ELSE (SET /A X=%%w+1)
        FOR /F "tokens=1,2" %%a IN ("!X! !Y!") DO (IF "!A[%%a][%%b]!"=="@" (SET /A NCOUNT=!NCOUNT!+1))

        REM Find the 3 cells below this cell
        IF %%h EQU %HEIGHT% (SET Y=1) ELSE (SET /A Y=%%h+1)
        IF %%w EQU 1 (SET X=%WIDTH%) ELSE (SET /A X=%%w-1)
        FOR /F "tokens=1,2" %%a IN ("!X! !Y!") DO (IF "!A[%%a][%%b]!"=="@" (SET /A NCOUNT=!NCOUNT!+1))
        SET X=%%w
        FOR /F "tokens=1,2" %%a IN ("!X! !Y!") DO (IF "!A[%%a][%%b]!"=="@" (SET /A NCOUNT=!NCOUNT!+1))
        IF %%w EQU %WIDTH% (SET X=1) ELSE (SET /A X=%%w+1)
        FOR /F "tokens=1,2" %%a IN ("!X! !Y!") DO (IF "!A[%%a][%%b]!"=="@" (SET /A NCOUNT=!NCOUNT!+1))  

        REM Check if this cell is alive or not
        IF "!A[%%w][%%h]!"=="@" (
            SET ALIVE=Y
            SET /A ALIVECOUNT=!ALIVECOUNT!+1
        ) ELSE (
            SET ALIVE=N
        )

        REM Assign live status to grid 'B' based on rules
        IF "!ALIVE!"=="Y" (
            IF !NCOUNT! LSS 2 (
                SET "B[%%w][%%h]= "
            )
            IF !NCOUNT! EQU 2 (
                SET B[%%w][%%h]=@
            )
            IF !NCOUNT! EQU 3 (
                SET B[%%w][%%h]=@
            )
            IF !NCOUNT! GTR 3 (
                SET "B[%%w][%%h]= "
            )
        )

        REM Assign dead status to grid 'B' based on rules
        IF "!ALIVE!"=="N" (
            IF !NCOUNT! EQU 3 (
                SET B[%%w][%%h]=@
            )
        )   
    )   
)

:: Now check if we have set any Grid 'B' cells 
:: If so, assign these cell values to Grid 'A' cells
FOR /L %%h IN (1, 1, %HEIGHT%) DO (
        FOR /L %%w IN (1, 1, %WIDTH%) DO (

            IF DEFINED B[%%w][%%h] (
                IF "!B[%%w][%%h]!"==" " (
                    SET "A[%%w][%%h]= "
                )
                IF "!B[%%w][%%h]!"=="@" (
                    SET A[%%w][%%h]=@
                )
            )       
        )   
)

:: Loop back to the top of process to start again
GOTO PROCESS


::::::::::::::::::::::::::::::::::::::::::::
:: THIS FUNCTION DISPLAYS GRID 'A' ON SCREEN 
::::::::::::::::::::::::::::::::::::::::::::
:DISPLAY
SET TOP=
SET BOT=
FOR /L %%h IN (1, 1, %height%) DO (

    IF %%h EQU 1 (FOR /L %%w IN (1, 1, %width%) DO (SET TOP=_!TOP!))
    IF %%h EQU 1 ECHO .!TOP!.

    SET ROW=
    FOR /L %%w IN (1, 1, %WIDTH%) DO (
            SET ROW=!ROW!!A[%%w][%%h]!
    )

    ECHO ^|!ROW!^|

    IF %%h EQU %height% (FOR /L %%w IN (1, 1, %width%) DO (SET BOT=~!BOT!))
    IF %%h EQU %height% ECHO `!BOT!'    
)
GOTO EOF

:HELP
ECHO/
ECHO 'Conway's Game of Life' - Batch Edition - Chazjn 01/03/2017
ECHO ===========================================================
ECHO Usage is as follows:
ECHO    life [width] [height] [%%density]
ECHO E.g.
ECHO    life 15 10 25
ECHO/
ECHO For more infomation visit: https://en.wikipedia.org/wiki/Conway's_Game_of_Life
GOTO EOF

:EOF
</code></pre>
    </div>