<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I would group the code in functions and call them from a central <code>main</code>. With how you have it now, simply loading the file into an interactive console will cause all the code to run, which, if the code is long running or causes side-effects, may be less than ideal. Say I wrote a port-scanner, and it takes 2-3 minutes to run. I may not want it to start simply because I loaded the file into a REPL in Pycharm. Not only would that waste a few minutes each time, port-scanning can get you in trouble if done on a network that you don't have permission to scan.</p>
<p>Code wrapped in functions is simply easier to control the execution of, because it will only run when the function is called.</p>
<p>Grouping code into functions also allows you to easily test each chunk in isolation from the rest of the code. It's difficult to test code when you're dependent on the first half of the code to supply test data to the latter-half. It's much easier however to simply load the script into a REPL, and throw test data at the function (or use proper unit-tests). Then you can test one piece of code in isolation without touching the rest of the code.</p>
<hr>
<p>I personally believe that <code>STRs</code> and <code>STR</code> should be lower-case. <a href="https://www.python.org/dev/peps/pep-0008/#function-and-variable-names" rel="nofollow noreferrer">According to PEP8</a>, Python's style and convention guide, regular variables should be lower case, with words separated by underscores. Variables that are considered to be constants however should be upper-case, separated by underscores.</p>
<p>Local variables that remain unchanged have never clicked as "constants" in my head, so it depends on what you decide.</p>
<p>Regardless though, <code>STRs</code> should either be all upper-case, or all lower-case; in which case the <code>STR</code> counterpart will need to be renamed so it doesn't clash with the <code>str</code> built-in. A name like <code>str_</code> could be used, or you could use a more descriptive name.</p>
<hr>
<pre><code>compare = {}

. . .

for key, value in row.items():
    compare[key] = int(value)
</code></pre>
<p>This can make use of a dictionary comprehension. Whenever you have the pattern of creating a set/list/dictionary before a loop, then populating the structure within the loop, you should consider a comprehension:</p>
<pre><code>compare = {key: int(value) for key, value in row.items()}
</code></pre>
<hr>
<p>Similarly, to ensure that a condition holds for an entire collection (or two in this case), you can combine <a href="https://docs.python.org/3/library/functions.html#all" rel="nofollow noreferrer"><code>all</code></a> with a generator expression (the part passed to <code>all</code>):</p>
<pre><code>if all(compare[STR] == str_counts[STR] for STR in STRs):
    matched = True
    print(match_name)
</code></pre>
<p>"If all corresponding values in the two dictionaries match, set the matched flag". It reads quite nicely.</p>
<p>That gets rid of the need for <code>match_count</code>, and the second last loop.</p>
<hr>
<p>You're looping more than you need to. You appear to only care about if at least one match is found; yet you keep looping even after one is.</p>
<p>I'd break once one is found. If you combine that with <a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops" rel="nofollow noreferrer"><code>for's</code> <code>else</code> clause</a>, you can prevent unnecessary looping and still detect failure:</p>
<pre><code>for row in db:
    . . .
    if all(compare[STR] == str_counts[STR] for STR in STRs):
        print(match_name)
        break

else:
    print("No Match")
</code></pre>
    </div>