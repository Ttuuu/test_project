<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Grouping</h2>

<p>If you need to group anything using; <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="noreferrer"><code>groupby</code></a> is probably the easiest way</p>

<p>Here we can use a <code>itertools.groupby</code> recipe to group the consecutive ranges:</p>

<pre><code>&gt;&gt;&gt; for _, g in groupby(enumerate(lst), lambda i_x : i_x[0] - i_x[1]):
...     print([x for _, x in g])
[-6]
[-3, -2, -1, 0, 1]
[3, 4, 5]
[7, 8, 9, 10, 11]
[14, 15]
[17, 18, 19, 20]
</code></pre>

<h2>Yielding the correct representation</h2>

<p>Now all is left is to check whether there are more then <code>2</code> items in the range, and return the range. Else return all the numbers in the range normally</p>

<p>We can make this a generator, which yields either the range or a number, and afterwards join them together.</p>

<h1>Full Code</h1>

<pre><code>def group_consecutives(lst):
    for _, g in groupby(enumerate(lst), lambda i_x : i_x[0] - i_x[1]):
        r = [x for _, x in g]
        if len(r) &gt; 2:
            yield f"{r[0]}-{r[-1]}"
        else:
            yield from map(str, r)

def range_extraction(lst):
    return ','.join(group_consecutives(lst))
</code></pre>
    </div>