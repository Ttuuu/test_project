<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p><code>if(isset($_FILES['avatar']) AND !empty($_FILES['avatar']['name'])) {</code> can more simply be:  <code>if(!empty($_FILES['avatar']['name'])) {</code> because if the latter is <code>true</code>, then the former is <code>true</code> as well.</p>
</li>
<li><p><code>$tailleMax</code>, <code>$extensionsValides</code>, <code>$resultat</code> are "single-use variables".  In the majority of cases, I prefer not to declare single-use variables because they end up needlessly bloating my scripts.  That said, there are times when they are advisable:</p>
<ol>
<li>When the value is somewhat mysterious in what it is for.</li>
<li>When the declaration prevents writing a line of code which is excessively long.<br><br></li>
</ol>
<p>If you think you may use the first two variables elsewhere in your project, then it would be sensible to store then in a config file for ease of use and maintenance.</p>
</li>
<li><p>There is A LOT of debate on the web about how to best determine the extension / mime type of an imported file and cleanse it of any malicious code. On <a href="https://codereview.stackexchange.com/search?q=%5Bphp%5D%20validate%20uploaded%20image%20file">Code Review</a> and <a href="https://security.stackexchange.com/search?q=validate%20upload%20image">Information Security</a> you may research as much as you like. After spending a couple hours reading heaps of posts all over Stack Exchange about how everything can be spoofed by the user and how using the <code>GD</code> extension to recreate the uploaded image, I'm actually not game enough to post a claim on what is best / most secure.  If you merely want the portion of the filename after the latest dot, then there are several ways to isolate that with fewer function calls.</p>
</li>
<li><p>As a personal preference, I like to write all of my failing conditions earlier in my script and reserve the successful outcome(s) for the later in the script.  I don't know if you need to <code>exit()</code> or <code>return</code> for your script, but using these process ending calls will prevent your script for using "arrow head" tabbing (an antipattern).  In other words, this will keep more of your code "left" and require less horizontal scrolling in your IDE.</p>
</li>
</ol>
<p>Here's an untested version of what I am suggesting that assumes that you are doing something like passing a string response back to an ajax call:</p>
<pre><code>if (empty($_FILES['avatar']['name'])) {
    exit('No importation');
}
if ($_FILES['avatar']['size'] &gt; 6844685465456456) {
    exit('Votre photo de profil ne doit pas dépasser 2Mo');
}
$extensionUpload = strtolower(pathinfo($_FILES['avatar']['name'], PATHINFO_EXTENSION));
if (!in_array($extensionUpload, ['jpg', 'jpeg', 'gif', 'png'])) {
    exit('Votre photo de profil doit être au format jpg, jpeg, gif ou png');
}
if (!move_uploaded_file($_FILES['avatar']['tmp_name'], "uploads/{$_SESSION['id']}.{$extensionUpload}")) {
    exit("Erreur durant l'importation de votre photo de profil extension");
}
exit('success');
</code></pre>
    </div>