<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Time constants</h2>

<p>Rather than writing</p>

<pre><code>tick_time_seconds = 300
</code></pre>

<p>you're better off using a more expressive built-in:</p>

<pre><code>from datetime import timedelta
tick_time = timedelta(minutes=5)
</code></pre>

<h2>Unnecessary parens</h2>

<p>...around this:</p>

<pre><code>line = ("################################################################################### \n")
</code></pre>

<p>besides, you're better off writing</p>

<pre><code>line = 80*'#'
</code></pre>

<h2>Windows paths</h2>

<p>These:</p>

<pre><code>pathTodo = "c:\\myXlFiles\\**\\*"
pathDone = ("c:\\Done\\")
pathError = ("c:\\Error\\")
</code></pre>

<p>have a few issues. First, declare them as raw strings (<code>r''</code>) so that you don't have to double up on backslashes. Also, none of those parens are necessary. Finally, the variable names here should probably be in all caps due to these things being global string constants.</p>

<h2>Passwords</h2>

<p>I sure hope that this:</p>

<pre><code>sqlPWD="PWD" 
</code></pre>

<p>isn't what I think it is. Don't hard-code passwords in your code. This is a whole thing - you're best to google a reasonable way to have a wallet accessible from Python.</p>

<h2>Spelling</h2>

<p>Recieves = Receives</p>

<p>firts = first</p>

<h2>Manual path concatenation</h2>

<pre><code>path+extension
</code></pre>

<p>is something you probably don't want to do yourself. Refer to <code>Path.with_suffix</code>.</p>

<h2>Generators</h2>

<pre><code>        listFiles = []
        for filename in listFileSystem:
            listFiles.append(Path(filename))
        setFiles = set(listFiles)
</code></pre>

<p>should just be</p>

<pre><code>files = {Path(filename) for filename in all_files}
</code></pre>

<p>Note that your variable names shouldn't include the type (i.e. <code>list</code>), just a useful description of what they actually hold.</p>

<h2>f-strings</h2>

<pre><code>print("{0}trying to read finalized state ... of {1}".format(line, filename))
</code></pre>

<p>can be</p>

<pre><code>print(line)
print(f'Trying to read finalized state of {filename}')
</code></pre>

<p>The <code>line</code> print should be separated for clarity, since it's a different line on the output.</p>

<h2>Boolean comparison</h2>

<pre><code>if dataframe.iloc[0]["finalized"] == False:
</code></pre>

<p>should be</p>

<pre><code>if not dataframe.iloc[0]["finalized"]:
</code></pre>
    </div>