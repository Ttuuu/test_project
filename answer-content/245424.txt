<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Bug</h2>
<pre><code>    elif get_score_name == 'monthly_expenses' and user_input &lt; 0.40:
        i = 1
    elif get_score_name == 'monthly_expenses' and user_input &gt; 0.40:
        i = 0
</code></pre>
<p>What happens if <code>user_input</code> is exactly 4.0?</p>
<h2>General algorithm</h2>
<p>Those sequential <code>if</code>s should go away. Maintain a dictionary where the key is a score name and the value is a sorted tuple of 2-tuples: input threshold and score. Look up the outer tuple by score name, then use <a href="https://docs.python.org/3/library/bisect.html" rel="nofollow noreferrer">bisect</a> to do efficient lookup of the applicable score.</p>
<h2>Score name</h2>
<p><code>get_score_name</code> as a method name is fine. <code>get_score_name</code> as a parameter name is confusing and should simply be <code>score_name</code>, though that parameter should not even exist since you already have <code>self.score_name</code>.</p>
<h2>Example code</h2>
<p>Note:</p>
<ul>
<li>I've taken liberties with some of your boundary conditions that didn't make sense; in particular the upper boundary for <code>monthly_surplus</code></li>
<li>This approach allows for some slightly silly things to happen, like <code>loan_reason</code> and <code>job_security</code> coercing floating-point answers to integers, when - for these two categories - floating-point doesn't make sense</li>
<li><code>user_input</code> is put in a tuple for easy comparison to the other threshold tuples</li>
</ul>
<pre><code>from bisect import bisect
from typing import Tuple, Dict, Optional

ScoreName = str
Score = float
Threshold = float
ScorePair = Tuple[Threshold, Score]
ScoreDict = Dict[ScoreName, Tuple[ScorePair, ...]]

INF = float('inf')

THRESHOLDS: ScoreDict = {
    'loan_term': (
        (18, 5),
        (24, 4),
        (48, 3),
    ),
    'loan_reason': (
        (0, 3.5),
        (1, 2.0),
        (2, 1.5),
        (3, 2.5),
        (4, 1.5),
        (5, 2.0),
        (6, 0.5),
    ),
    'job_security': (
        (0, 1),
        (1, 2),
        (2, 3),
        (3, 4),
        (4, 5),
    ),
    'average_apr': (
        (-1.0, 5),
        (-0.6, 4),
        ( 0.5, 3),
        ( 1.0, 2),
        ( INF, 1),
    ),
    'monthly_expenses': (
        (0.1, 5),
        (0.2, 4),
        (0.3, 3),
        (0.4, 1),
        (INF, 0),
    ),
    'monthly_surplus': (
        (0.20, 5),
        (0.35, 4),
        (0.45, 3),
        (0.60, 2),
        ( INF, 1),
    ),
}


def get_score(score_name: ScoreName, user_input: Threshold) -&gt; Optional[Score]:
    thresholds = THRESHOLDS[score_name]
    index = bisect(thresholds, (user_input,))
    if index &gt;= len(thresholds):
        return None
    return thresholds[index][1]


def test():
    assert get_score('loan_term', 17) == 5
    assert get_score('loan_term', 18) == 5
    assert get_score('loan_term', 48) == 3
    assert get_score('loan_term', 49) is None
    assert get_score('monthly_surplus', 0.62) == 1


if __name__ == '__main__':
    test()
</code></pre>
    </div>