<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Foreword</h1>
<p>Your code is quite decent.  However, I did make a general outline of how I would probably implement a <code>Board</code> to improve readability.  Don't feel the need to take my suggestion.  The major changes I made to the code is CSS and HTML restructuring.  Additionally, I made modifications to accommodate different window sizes better.  The updated code is at the bottom.  I know that the topic of resizing can be difficult, so I wrote up the example.</p>
<p>Major JavaScript changes are not implemented (although some minor are) but are outlined inside the <strong>JavaScript Structure Changes</strong> section.</p>
<h1>Scaling problem</h1>
<p>Your code seems to scale oddly at different dimensions.  I fixed that by assigning <code>canvas.width</code> to <code>Math.min(window.innerWidth - 40, 500)</code> to accomodate for smaller windows.  I also changed where you set the width/height of the <code>#menu</code> to <code>#board</code> becuase it looked better.  I also changed it to <code>max-width</code> to accommodate smaller game boards better.  It didn't make much sense to set a <code>max-height</code> as that is relative (depending on the size of <code>#menu</code>).</p>
<h1>CSS Structure changes</h1>
<p>I removed <code>#content</code> it seemed erroneous and just completely removed <code>margin:auto</code> except for in <code>body</code>.</p>
<p>To increase DRYness I moved all <code>font-family: Georgia</code> to one selector.</p>
<pre><code>#menu input, #menu button, body {
  font-family: Georgia;
}
</code></pre>
<p>I added a spacer between menu and the game because it looked better (<code>maring-top</code>)  I removed <code>display:grid</code> for <code>#menu</code> because when I removed <code>#content</code> it did not perform properly.</p>
<h1>JavaScript Structure Changes</h1>
<p>I liked most of your JavaScript; however, I find that allowing on-the-fly dimension changes to be important when programming a 2d game like this.  So, I added a <code>window.addEventListener</code> to your code and had to make some minor changes to your class.</p>
<p>This is more of a band-aid solution, however.  Optimally, the <code>Block</code> class's x and y should have very little to do with drawing.  <code>Block.draw</code> would simply store how it should be drawn based on some values given (like x, y, w, h).  Then <code>Board.draw</code> would loop through <code>Block</code>s and invoke <code>Block.draw</code>.  <code>Board</code> would manage location information.</p>
<p>More of a style thing, but I prefer:</p>
<pre><code>let pos = toNested(i),
    w = width / boardSize,
    h = height / boardSize;
</code></pre>
<p>over having lots of let's pile up in my code:</p>
<pre><code>let pos = toNested(i);
let w = width / boardSize;
let h = height / boardSize;
</code></pre>
<p>Some people prefer to use <code>let</code>, that's fine.  <code>var</code> can be used where it does not matter when changes occur after the control block is over.  <code>let</code> saves the head ache so I understand the choice.</p>
<p>Board is implemented as an array.  You could probably benefit a little from turning it into a class.  From there, instead of:</p>
<pre><code>let temp = board[i];
board[i] = board[zIndex];
board[zIndex] = temp;
</code></pre>
<p>You could invoke something like <code>board.swap</code>.  This change would improve readability in <code>handleClick</code> and <code>shuffle</code>, as you are creating clearly defined functions: one for each purpose.  You could also add easy functions like <code>moveUp</code> or <code>moveDown</code>... etc.</p>
<p>It would be preferred to have a <code>Board.collision</code> that returns first collision with a block (there should only be one...).  It would prevent <code>handleClick</code> from having to perform both collision detection and board swapping and movement checks.</p>
<p>I would prefer to use a 2D array within the <code>Board</code> class instead of <code>toNested</code>, it would make code more readable. I liked that you decided to just make that a function.  However, it isn't as great as a simple 2d array.</p>
<p>It would probably also be easier to store the location of the empty square.  I liked your decision to have be a <code>0</code> tile.  Very clever way to work with an array.  But it may be simpler to leave it as a <code>null</code> inside a 2d array in <code>Board</code>.</p>
<p>When swapping, it would be simpler to use <code>Board.draw</code> and then swapping them inside of the 2d array, just my opinion.  Then having <code>Board.draw</code> set up how where to draw each tile.</p>
<p>Having a <code>Board</code> class would also help you encapsulate a lot of the erroneous draw functions scattered in global namespace.  I typically make a <code>Game</code> class which is responsible for invoking appropriate draw functions, but in a game this small, I think you could incorporate it inside of <code>Board</code>.</p>
<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>"use strict";

class Block {
  constructor(value) {
    this.value = value;
  }
  
  setDrawSettings(x, y , w, h) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
  }

  draw() {
    if (this.value) {
      let padding = 5;
      ctx.strokeStyle = "#000";
      ctx.font = (this.w / 4).toString() + "px Georgia";
      ctx.textAlign = "center";
      ctx.textBaseline = "middle";
      ctx.fillStyle = "#7d4b1488";
      ctx.fillRect(this.x + padding, this.y + padding, this.w - padding, this.h - padding);
      ctx.strokeRect(this.x + padding, this.y + padding, this.w - padding, this.h - padding);
      ctx.fillStyle = "#000";
      ctx.fillText(this.value.toString(), this.x + this.w / 2, this.y + this.h / 2, width * 0.75);
    }
  }

  collidePoint(x, y) {
    return (
      x &gt; this.x &amp;&amp;
      x &lt; this.x + this.w &amp;&amp;
      y &gt; this.y &amp;&amp;
      y &lt; this.y + this.h
    );
  }

  sendTo(position) {
    moving++;
    let pos = {
      x: position.x,
      y: position.y,
    }
    let vel = {
      x: (this.x - pos.x) / 10,
      y: (this.y - pos.y) / 10,
    }
    let self = this;
    let n = 0;
    let movement = () =&gt; {
      drawAll();
      self.x -= vel.x;
      self.y -= vel.y;
      if (n &gt;= 10) {
        self.x = pos.x;
        self.y = pos.y;
        moving--;
      }
      else {
        setTimeout(movement, 15);
        n++;
      }
    };
    setTimeout(movement, 15);
  }
}

function shuffle(array) {
  for (let i = 0; i &lt; array.length; ++i) {
    let newI = Math.floor(Math.random() * (i + 1));
    let temp = array[i];
    array[i] = array[newI];
    array[newI] = temp;
  }
}

function isValidNeighbor(ind1, ind2) {
  let pos1 = toNested(ind1);
  let pos2 = toNested(ind2);
  let dist1 = Math.abs(pos1[0] - pos2[0]);
  let dist2 = Math.abs(pos1[1] - pos2[1]);
  if (!dist1 || !dist2) {
    if (dist1 === 1 || dist2 === 1) {
      return dist1 !== dist2;
    }
  }
  return false;
}

function toNested(index) {
  return [ index % boardSize, Math.floor(index / boardSize) ];
}

function findZero() {
  for (let i = 0; i &lt; board.length; ++i) {
    if (board[i].value === 0) {
      return i;
    }
  }
}

function win() {
  if (!moving) {
    ctx.clearRect(0, 0, width, height);
    ctx.fillStyle = "#000";
    ctx.font = "50px Georgia";
    ctx.textAlign = "center";
    ctx.textBaseline = "middle";
    ctx.fillText(`You won in ${moves} ${moves === 1 ? "move" : "moves"}!`, width / 2, height / 2);
    setTimeout(() =&gt; {
      location.reload();
    }, 2500);
  }
  else {
    setTimeout(win, 150);
  }
}

function drawAll() {
  ctx.clearRect(0, 0, width, height);
  board.forEach(block =&gt; {
    block.draw();
  });
}

function update() {
  drawAll();
  if (checkWin()) {
    setTimeout(() =&gt; {
      canvas.removeEventListener("click", handleClick);
      setTimeout(win, 1000);
    }, 200);
  }
  document.getElementById("moves").innerHTML = "Moves: " + moves.toString();
}

function checkWin() {
  let noZ = board.slice(0);
  noZ.splice(findZero(), 1);
  for (let i = 1; i &lt; noZ.length; ++i) {
    if (noZ[i].value &lt; noZ[i - 1].value) {
      return false;
    }
  }
  return true;
}

const canvas = document.getElementById("display");
const ctx = canvas.getContext("2d");
let width,
    height,
    boardSize,
    board,
    moves,
    moving;

//new
function setDimensions() {
  canvas.width = Math.min(window.innerWidth - 40, 500);
  canvas.height = Math.min(window.innerHeight - 20, 500);
  width = canvas.width;
  height = canvas.height;
}
setDimensions();

window.addEventListener("resize", function () {
  setDimensions();
  let w = width / boardSize,
      h = height / boardSize;
  setUpBoard(board);
  update();
});

function setUpBoard(board) {
  for (let i = 0; i &lt; board.length; ++i) {
    let pos = toNested(i),
        w = width / boardSize,
        h = height / boardSize;
    board[i].setDrawSettings(pos[0] * w, pos[1] * h, w, h);
  }
}

function init() {
  moving = 0;
  boardSize = parseInt(document.getElementById("size").value);
  if (boardSize &lt; 2 || boardSize &gt; 5 || isNaN(boardSize)) {
    boardSize = 4;
  }
  board = Array.from(Array(boardSize ** 2).keys());
  moves = 0;
  shuffle(board);
  for (let i = 0; i &lt; board.length; i++) {
    board[i] = new Block(board[i]);
  }
  setUpBoard(board);
  update();
}

function handleClick(e) {
  if (!moving) {
    let rect = canvas.getBoundingClientRect();
    for (let i = 0; i &lt; board.length; ++i) {
      if (board[i].collidePoint(e.clientX - rect.x, e.clientY - rect.y)) {
        let zIndex = findZero();
        if (isValidNeighbor(i, zIndex)) {
          moves++;
          let tempPos = {
            x: board[i].x,
            y: board[i].y,
          };
          board[i].sendTo(board[zIndex]);
          board[zIndex].sendTo(tempPos);
          
          let temp = board[i];
          board[i] = board[zIndex];
          board[zIndex] = temp;
        }
        break;
      }
    }
    update();
  }
}

canvas.addEventListener("click", handleClick);

document.getElementById("reset").onclick = init;
init();</code></pre>
<pre class="snippet-code-css lang-css prettyprint-override"><code>html {
  height: 100%;
  display: grid;
}

body {
  background-color: #fac4af;
  margin: auto;
}

#menu input, #menu button, body {
  font-family: Georgia;
}

#board {
  display: inline-block;
  background-image: url("https://15-puzzle-game--joyalmathew.repl.co/board.jpeg");
  padding: 10px;
  box-shadow: 10px 20px #9b857a;
  border: 1px solid black;
  border-radius: 15px;
  max-width: 500px;
}

#display {
  margin-left: 0px;
  float: right;
}

#menu {
  font-size: 15pt;
  float: left;
  margin-right: 0px;
  box-sizing: border-box;
  margin-top:10px;
}

#menu p {
  margin-top: 1px;
  margin-bottom: 1px;
}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;meta charset="utf-8"&gt;
    &lt;meta name="viewport" content="width=device-width"&gt;
    &lt;title&gt;15 Puzzle Game&lt;/title&gt;
    &lt;link href="style.css" rel="stylesheet" type="text/css" /&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;div id="board"&gt;
      &lt;canvas id="display" width="500" height="500"&gt;&lt;/canvas&gt;
      &lt;div id="menu"&gt;
        &lt;p id="moves"&gt;Moves: &lt;/p&gt;&lt;br&gt;&lt;br&gt;
        &lt;p&gt;Try getting the blocks into ascending order: left to right, top to bottom.&lt;/p&gt;
        &lt;p&gt;Click any block next to the space to swap them.&lt;/p&gt;
        &lt;br&gt;
        Size: &lt;input id="size" type="number" min="2" max="5" value="4"&gt;
        &lt;button id="reset"&gt;Reset&lt;/button&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;script src="script.js"&gt;&lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;</code></pre>
</div>
</div>

    </div>