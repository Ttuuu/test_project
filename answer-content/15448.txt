<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>Proper and consistent indentation would improve the readability a lot. Here is mine:</p>

<pre><code>&lt;?php
    $Sql = new mysqli("localhost", "root", "*******", "serveradmin");
    if ($Sql-&gt;connect_error) { 
        die("Sorry, Could not connect (" . $Sql-&gt;connect_errno . ") " . $Sql-&gt;connect_error);
    }
    $Data = $Sql-&gt;query("SELECT * FROM trial");
    while ($q = $Data-&gt;fetch_assoc()) {
        $Start = $q['Start'];
        $Stop = $q['Stop'];
        $Steam = $q['Steam'];
        $Result = $Start - $Stop;
        $Time = time();
        if ($q['Expired'] == "True") {
            echo "All expired \n";
        } else {
            if ($Stop &lt;= $Time) { 
                echo "Deleted " . $Steam . " From trial Reason: Expired"; 
                $Sql-&gt;Query("DELETE FROM `sm_admins` WHERE `identity` = '" . $Steam . "'");
                $Sql-&gt;Query("UPDATE trial SET `Expired` = 'True' WHERE `Steam` = '" . $Steam . "'");
            } else { 
                echo "All ok, 0 deleted"; 
            }
        }
    }
?&gt;
</code></pre></li>
<li><p>These conditions are good candidates for guard clauses:</p>

<pre><code>if ($q['Expired'] == "True") {
    echo "All expired \n";
} else {
</code></pre>

<p>and</p>

<pre><code>if ($Stop &lt;= $Time) { 
</code></pre>

<p>Here is the modified version:</p>

<pre><code>while ($q = $Data-&gt;fetch_assoc()) {
    $Start = $q['Start'];
    $Stop = $q['Stop'];
    $Steam = $q['Steam'];
    $Result = $Start - $Stop;
    $Time = time();
    if ($q['Expired'] == "True") {
        echo "All expired \n";
        continue;
    }
    if ($Stop &gt; $Time) { 
        echo "All ok, 0 deleted"; 
        continue;
    }
    echo "Deleted " . $Steam . " From trial Reason: Expired"; 
    $Sql-&gt;Query("DELETE FROM `sm_admins` WHERE `identity` = '" . $Steam . "'");
    $Sql-&gt;Query("UPDATE trial SET `Expired` = 'True' WHERE `Steam` = '" . $Steam . "'");
}
</code></pre>

<p>References: <em>Replace Nested Conditional with Guard Clauses</em> in <em>Refactoring: Improving the Design of Existing Code</em>; <a href="http://www.codinghorror.com/blog/2006/01/flattening-arrow-code.html" rel="nofollow noreferrer">Flattening Arrow Code</a></p></li>
<li><p>Furthermore, if you are not interested in those records whose <code>Expired</code> flag is <code>True</code> and <code>Stop</code> attribute is bigger than the current time you could modify the SQL query to filter those records, for example:</p>

<pre><code>$Data = $Sql-&gt;query("SELECT * FROM trial WHERE Expired != `True` AND Stop &gt; " . $Time);
</code></pre>

<p>(If you are using string concatenation to create SQL commands be careful about SQL injections attacks. The value of <code>$Time</code> comes from the <code>time()</code> function so it can't contain any malicious data here.)</p></li>
<li><p>I'd consider using MySQL's datetime attributes for storing the date informations and using MySQL's date and time functions for the comparison. I'd improve the database structure and make the raw data readable. You might want to prepare for situations when the current time is different between the webserver and the database server.</p></li>
<li><p><code>$mysql-&gt;query</code> has a return value. You might want to check whether it's <code>FALSE</code> and print a proper error message.</p></li>
<li><p>PHP functions are not case sensitive, but according to <a href="https://stackoverflow.com/a/5643544/843804">this answer</a> you might want to modify <code>-&gt;Query(...)</code> to <code>-&gt;query(...)</code>.</p></li>
<li><p>This line seems unnecessary, since the <code>$Result</code> variable is not used:</p>

<pre><code>$Result = $Start - $Stop;
</code></pre></li>
<li><p>The delete and update statement uses the <code>$Steam</code> variable as the part of the query without escaping it. I think it could cause <a href="https://stackoverflow.com/a/9828040/843804">2nd order SQL attacks</a>.</p></li>
</ol>
    </div>