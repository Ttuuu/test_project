<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This part isn't very robust:</p>

<blockquote>
<pre><code>    index1 = s1[i] - 'a';
    index2 = s2[i] - 'a';
    ++alphabet[index1];
    --alphabet[index2];
</code></pre>
</blockquote>

<p>Think of the assumptions we're making here.  We're assuming that the input will never contain characters outside the range <code>'a'</code> to <code>'a' + 25</code>.  Even if the strings do conform to the implicit expectations, there's no guarantee that the execution character set has contiguous positions for the letters (e.g. most ISO 8859 or ECBDIC codings).</p>

<p>A safer approach would be to count <em>all</em> characters, and filter later to just the alphabetic ones.  So declare</p>

<pre><code>int alphabet[UCHAR_MAX+1] = { 0 };
</code></pre>

<p>Then we can simply:</p>

<pre><code>    ++alphabet[(unsigned char)s1[i]];
    --alphabet[(unsigned char)s2[i]];
</code></pre>

<p>Then at the end, count only the alphabetic characters:</p>

<pre><code>for (i = 0;  i &lt; sizeof alphabet;  ++i) {
    if (isalpha(i) &amp;&amp; alphabet[i] != 0) {
        return 0;
    }
}
</code></pre>

<p>We might want to consider using <code>toupper((unsigned char)s1[i])</code> when counting, if anagrams are intended to be case-insensitive; that may or may not be specified in the problem statement.  Remember, interview questions often test your ability to gather requirements as well as to write code!</p>
    </div>