<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As a general rule, you should allow exceptions to percolate back to the caller; this makes it easier for the caller to find bugs in their own code.  A function should have a clear "contract" with its caller that will typically include raising an exception if the caller passes it invalid arguments.  If part of your function's contract is that it will catch invalid arguments and return a default value in that case, make sure that's explicit in the docstring and/or name of the function:</p>

<pre><code>def divide(a, b):
    """Divide a by b.  Raises an exception if a and b are not divisible."""
    return a / b

def safe_divide(a, b):
    """Divide a by b.  Returns zero if a and b are not divisible for any reason."""
    try:
        return a / b
    except:
        return 0
</code></pre>

<p>As a general rule, a bare <code>except</code> is bad practice and you should instead catch specific exceptions.  For example, this code:</p>

<pre><code>try:
   result = x / y
except Exception:
   print("You entered 0 in for denominator")
</code></pre>

<p>is incorrect because there are failure modes other than <code>y</code> being zero.  Better exception handling might look like this:</p>

<pre><code>try:
    result = x / y
except ZeroDivisionError:
    print("You entered 0 in for denominator")
except TypeError:
    print("One of these things is not a number")
</code></pre>

<p>If an exception is raised that you completely didn't expect, it's better to <strong>not</strong> catch it so that it will cause your program to fail hard and fast; this makes it easier for you to find your bug and fix it.</p>
    </div>