<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I have no knowledge about Unity3d, so here are some general comments.</p>
<p>If <code>world.SectorSize</code> is constant throughout the session, you can change some of the properties to readonly fields and calculate them in the constructor:</p>
<pre><code>public readonly int SectorX;
public readonly int SectorY;
public readonly FlowFieldSector Sector;
...


public Coordinates(int worldX, int worldY, FlowFieldWorld world)
{
  this.worldX = worldX;
  this.worldY = worldY;
  this.world = world;
  SectorX = worldX % world.SectorSize;
  SectorY = worldY % world.SectorSize;
  Sector =  world.Sectors[worldX / world.SectorSize, worldY / world.SectorSize];
}
</code></pre>
<p>Doing so with <code>Sector</code>, <code>Cost</code>, <code>Integration</code> and <code>Flow</code> requires of cause that these objects are reference types and not replaced - if they are updated while the <code>Coordinates</code> instance lives. It is probably just a micro optimization - but everything counts?</p>
<hr>
<blockquote>
<pre><code>public bool Equals(Coordinates other)
{
  return worldX == other.worldX &amp;&amp; worldY == other.worldY;
}
</code></pre>
</blockquote>
<p>This is actually an implementation of <code>IEquatable&lt;Coordinates&gt;</code> so you can add this interface to the inheritance list:</p>
<pre><code>public struct Coordinates : IEquatable&lt;Coordinates&gt;
</code></pre>
<hr>
<p>In respect to the DRY-principle you could do the following changes:</p>
<p>The copy constructor can call the other constructor:</p>
<pre><code>public Coordinates(Coordinates source) : this(source.worldX, source.worldY, source.world)
{
}
</code></pre>
<p>The comparison operators can call <code>Equals(Coordinates other)</code>:</p>
<pre><code>public static bool operator ==(Coordinates left, Coordinates right)
{
  return left.Equals(right);
}
</code></pre>
    </div>