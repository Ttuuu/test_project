<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Crashing bug</h3>

<p>If I call <code>peakfinder([0, 0])</code>, I get an <code>IndexError</code>:</p>

<pre class="lang-none prettyprint-override"><code>Traceback (most recent call last):
  File "peaks.py", line 32, in &lt;module&gt;
    peakfinder([0, 0])
  File "peaks.py", line 22, in peakfinder
    if arr[left] &lt;= arr[mid] &gt;= arr[right]:
IndexError: list index out of range
</code></pre>

<p></p>

<p>(I’m not sure if these are the “size constraints” you allude to in the question, you didn’t provide details.)</p>

<p>If we inspect these, we discover that we have <code>(L, M, R) = (0, 1, 2)</code>, but trying to get the element at index <code>2</code> will fail. This will fail whenever you have an array of length 2.</p>

<p>One way to handle this would be to add an extra base case for when you have an array of length 2. Alternatively, you could tweak the bounds checking so that it only looks for elements within the bounds of the array.</p>

<p>Let’s suppose we never pass in an array of size 2. But it turns out other arrays will hit the same, if they reduce to an length-2 array at an intermediate step. For example:</p>

<pre class="lang-none prettyprint-override"><code>&gt;&gt;&gt; peakfinder([0, 1, 0, 0])
Traceback (most recent call last):
  File "peaks.py", line 35, in &lt;module&gt;
    peakfinder([0, 1, 0, 0])
  File "peaks.py", line 29, in peakfinder
    return peakfinder(arr[:mid])
  File "peaks.py", line 31, in peakfinder
    if arr[mid] &lt; arr[right]: # Look to right side of array for peak.
IndexError: list index out of range
</code></pre>

<p></p>

<p>Here’s a small test I wrote with <a href="http://hypothesis.readthedocs.io" rel="nofollow noreferrer">Hypothesis</a> to find some counterexamples:</p>

<pre class="lang-py prettyprint-override"><code>from hypothesis import given, strategies as st

@given(st.lists(st.integers()))
def test_peakfinder_doesnt_crash(xs):
    """Finding the peak of a list doesn't crash."""
    peakfinder(xs)
</code></pre>

<p><br></p>

<h3>The peak of an array must be an element of the array</h3>

<p>Sounds reasonable enough, right? But your code will return a <code>list</code> of length 1 if any of the intermediate steps reduce to such a list, an element otherwise. For example:</p>

<pre class="lang-none prettyprint-override"><code>&gt;&gt;&gt; from peaks import peakfinder
&gt;&gt;&gt; peakfinder([1, 0])
[1]
&gt;&gt;&gt; [1] in [1, 0]
False
&gt;&gt;&gt; peakfinder([1, 2, 3])
2
&gt;&gt;&gt; 2 in [1, 2, 3]
True
</code></pre>

<p>You should tweak the case when <code>len(arr) == 1</code> to return the single element:</p>

<pre><code>if len(arr) == 1:
    return arr[0]
</code></pre>

<p></p>

<p>Here’s another small test I wrote to find a counterexample:</p>

<pre class="lang-py prettyprint-override"><code>from hypothesis import assume, given, strategies as st

@given(st.lists(st.integers()))
def test_peak_is_in_original_list(xs):
    """The peak of a list is in the list."""
    assume(len(xs) &gt; 0)
    assert peakfinder(xs) in xs
</code></pre>
    </div>