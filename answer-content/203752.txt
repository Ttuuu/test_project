<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I like this question (for no particular reason) so I will answer with an example (OP can put it into the question so it doesn't get closed). </p>

<p>Say, we want to create a game which will randomize a string and user is expected to guess one letter within that string.</p>

<pre><code> void MainGameLoop()
 {
    while(true)
    {
        Console.WriteLine("Randomizing new string ...");
        var randomizedString = RandomizeString(); 
        Console.WriteLine("Please input the value, only first letter of the input will be taken into account");
        var userInput = Console.ReadLine();
        var userCharacter = userInput[0].ToString();
        // OP's code starts here
        if(!randomizedString.Contains(userCharacter))
        {
            Console.WriteLine("Sorry, wrong guess.");
        }
        // OP's code ends here
        else
        {
            Console.WriteLine("You guessed it!");
        }
    }

 }
</code></pre>

<p>Now, my answer:</p>

<p>For me, usage of Contains is okay. It says <strong>exactly</strong> what you intend to check. In case you are curious, underneath it actually calls (in your case) <code>randomizedString.IndexOf(userCharacter, StringComparison.Ordinal) &gt;=0</code> which is a search within an array. 
Additionally, I think you should change the order of logical conditions, using <code>!</code> is not needed in this case:</p>

<pre><code>if(randomizedString.Contains(userCharacter))
{
        Console.WriteLine("You guessed it!");
}
else
{
        Console.WriteLine("Sorry, wrong guess.");
}
</code></pre>

<p>EDIT:
One could also argue that in this case it would be better to use <a href="https://docs.microsoft.com/pt-br/dotnet/api/system.string.indexof?view=netframework-4.7.2#System_String_IndexOf_System_Char_" rel="nofollow noreferrer">IndexOf(Char)
</a> since OP needs only one character to check but for me, if performance is not an issue <code>.Contains(string)</code> is more readable than doing</p>

<pre><code>if (randomizedString.IndexOf(someCharacter) != -1) { }
</code></pre>

<p><strong>NOTE</strong>: if performance would be an issue, one would probably use for loop instead.</p>
    </div>