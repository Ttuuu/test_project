<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Regex compilation</h2>

<p>Your code here:</p>

<pre><code># ratings
ratings = re.compile(r"\b\d+\b")
rating_vals = (ratings.findall(sms_reply)[:5])

# added meds
add = re.compile(r"\+(.*?\))")
add_meds = add.findall(sms_reply)

# removed meds
remove = re.compile(r"\-(.*?\))")
remove_meds = remove.findall(sms_reply)
</code></pre>

<p>gets only halfway to a good idea. It is useful to separate regex compilation from regex execution, but only if the compiled regexes are persisted. You can put them as constants in global scope. Then the compilation cost is only paid once.</p>

<h2>Help me</h2>

<pre><code>helpme_variants = ["help me", "helpme", "help-me"]
display_help = any([re.findall(i, sms_reply, flags=re.IGNORECASE) for i in helpme_variants])
</code></pre>

<p>First of all: <code>any</code> doesn't require a list; you should be passing the generator to <code>any</code> directly.</p>

<p>Beyond that: you don't need "variants" or a generator at all; you can do this with another regex:</p>

<pre><code>display_help_re = re.compile(r'help[ -]?me', flags=re.IGNORECASE)

# ...

display_help = display_help_re.search(sms_reply) is not None
</code></pre>

<p>The same is true of your <code>med_variants</code>.</p>

<h2>Waiting for...?</h2>

<pre><code>time.sleep(4)
</code></pre>

<p>Why is this here? It's spooky. At the very least, drop a comment. More likely is that you should attempt some manner of polling if possible to detect when the given condition is met.</p>

<h2>Magic values</h2>

<p><code>'G2'</code> is a magic value. At the least, it should be put into a named constant. More likely is that you should be making a named range in your spreadsheet and using that range, if this is at all possible.</p>

<p>5 is also a magic value here:</p>

<pre><code>    assert len(parsed_response["ratings"]) == 5
</code></pre>

<h2>Logic by exception</h2>

<p>This:</p>

<pre><code>try:
    for med in parsed_response["remove meds"]:
        assert med in current_meds
except AssertionError:
    invalid_responses.append("Med to remove not found, see your meds by replying 'see-meds'")
</code></pre>

<p>is awkward and not necessary. Just do the check yourself, and use a <code>set</code> instead:</p>

<pre><code>parsed_meds = set(parsed_response['remove_meds'])
for missing_med in parsed_meds - current_meds:
   invalid_responses.append(f'Med to remove "{missing_med} not found; see your meds by replying "see-meds"')
</code></pre>

<h2>Character escapes</h2>

<pre><code>"\'"
</code></pre>

<p>does not need an escape backslash.</p>

<h2>String continuation</h2>

<p>Rather than using backslashes here:</p>

<pre><code>message = "Respond to messages with: " \
          "\n1. Hours slept " \
          "\n2. Stress level (1-9) " \
          "\n3. Joints (1-9) " \
          "\n4. Energy (1-9) " \
          "\n5. Mood (1-9) " \
          "\n6. Add a note with NOTE(YOUR NOTE)* " \
          "\n7. Add a med with +MEDNAME(DOSE)* " \
          "\n8. Remove a med with -MEDNAME(DOSE)* " \
          "\n9. See all meds with 'see-meds'* " \
          "\n10. See this menu with 'help-me'*" \
          "\n*Optional values in response"
</code></pre>

<p>Put the whole thing in parens and drop the backslashes.</p>

<h2>f-strings</h2>

<pre><code>def see_meds_message() -&gt; str:
    message = "Your current meds are: " + str(get_current_meds())
    return message
</code></pre>

<p>can be</p>

<pre><code>def see_meds_message() -&gt; str:
    return f'Your current meds are: {get_current_meds()}'
</code></pre>

<h2>Implicit <code>None</code></h2>

<p>Drop the <code>, None</code> from this:</p>

<pre><code>from_body = request.values.get('Body', None)
</code></pre>

<p>Because that's already the default for <code>get</code>.</p>

<h2>Boolean comparison</h2>

<pre><code>        if sms['display help'] == True:
</code></pre>

<p>should simply be</p>

<pre><code>        if sms['display help']:
</code></pre>
    </div>