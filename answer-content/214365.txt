<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm just gonna add some observations on top of already mentioned
suggestions:</p>

<ul>
<li><p>If there's any way you can incorporate automatic layouting and some
sort of declarative UI, or use a UI builder, methods like <code>InputBox</code>
might be a little bit easier:  The tedious stuff should be done by the
machine (well, the computer) really.  Additionally that would in many
cases also allow you to rescale windows and dialogs more easily while
keeping proportions etc.</p>

<p>That is, <code>FlowLayoutPanel</code> or <code>TableLayoutPanel</code> pop up in the search
for me when I enter <code>winforms</code>, plus
<a href="https://stackoverflow.com/questions/6466129/dock-anchor-and-fluid-layouts-in-windows-forms-applications">this post</a>.</p></li>
<li><code>if (x == false) ...</code> - that's just <code>if (!x)</code>; <code>... == true</code> - that's
just <code>...</code> itself, no need to compare to <code>true</code> or <code>false</code>.</li>
<li><p>The error messages don't seem to give the user a lot of context.
Like, if there's already a check in place, then just tell the user
what exactly went wrong in the check, otherwise they'll still have to
consult with a manual, or the programmer, or a colleague?  While the
source of truth for what's actually being checked is right there!</p>

<p>E.g. instead of saying
<code>ERROR! Please check Coil Number entered for Sheet.</code> it could instead
say something like <code>ERROR! Input '%s' doesn't match Coil Number '%s' entered for Sheet.</code> 
(with the appropriate parameters of course).</p>

<p>Same for the <code>Pipe Number range incorrect format.</code> ... just tell me
what I have to enter directly and where I went wrong.  With the right
library that could be auto-generated, but I suspect with just these
few checks that'd be easy enough to do manually too.</p></li>
<li>The validation should be generalised if you have more of these
dialogs.  If not, then still, make that a separate method so that
<code>InsertMillData</code> can all be read on one screen!</li>
<li><code>InitMillForm</code> - how long exactly are you maintaining this?  Maybe add
a default case and show a helpful message if we're past 2023 ...</li>
<li>The comment in <code>updateMill</code> should be the docstring of the method.
It's not useful where it is right now, I already know what it says by
just reading the line below it and that like is much shorter.
However, as a docstring for the method I'd then actually know what the
contract for <code>updateMill</code> is.  Well, part of it, I still have no idea
what the parameters mean of course.  That is to say, I value
self-describing code ... but then you also have to make it more
readable.  E.g. <code>scrapl</code>, it wouldn't hurt to spend a few more
characters to spell it out and make the reader immediately aware of
what that parameter contains (apart from that it's a string, yes, but
that was mentioned.  Domain-specific data types are quite good for
understanding and preventing errors because parameter order was
accidentally flipped etc.).</li>
<li>There's also unused variables, just remove them.</li>
<li><code>TransactionStat</code> is updated and never read when a <code>return</code> follows
immediately after, just remove those too.</li>
<li>The <code>pipePrefix</code> check uses the magic number 8, as does the formatting
a bit below, with <code>PadRight</code> - make that number a constant so those
don't get out of sync.</li>
<li><code>fillDataGridMillIns</code> - I trust that catching those exceptions is the
most useful thing to do.  The block can be simplified a bit
<a href="https://stackoverflow.com/a/22864936/2769043">if you're on C# 6 or higher</a>.</li>
</ul>
    </div>