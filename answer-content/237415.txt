<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Turn on <a href="https://docs.microsoft.com/en-us/office/vba/Language/Reference/User-Interface-Help/option-explicit-statement" rel="noreferrer">Option Explicit</a>. From the VBIDE menu at the top Tools&gt;Options to display the Options dialog&gt;Editor tab&gt;Code Settings group&gt;Require Variable Declaration.</p>

<p><a href="https://i.stack.imgur.com/SVPZa.png" rel="noreferrer"><img src="https://i.stack.imgur.com/SVPZa.png" alt="enter image description here"></a></p>

<p>Tick that check box. From that point on <code>Option Explicit</code> will always be added to the top of every new (Standard, Form, Class) module you create. Future-you will thank you. This mandates that all your variables are declared before use IE <code>Dim branchesSurveyed As Range</code> before they can be used. For any existing modules you'll need to go back and add them by hand. Well worth doing because once you do you'll notice that your variable <code>BranchesSurveyed</code> is never actually declared anywhere which means it's a Variant. You can confirm this by stepping into your code (Hotkey: <code>F8</code>) and examining the locals window View&gt;Locals Window.</p>

<hr>

<p>Explicitly declare your Subs as Public. This is achieved by including <code>Public</code> when you declare it as part of the <a href="https://docs.microsoft.com/en-us/office/vba/language/reference/user-interface-help/sub-statement" rel="noreferrer">Sub statement</a>. <code>Sub Foo()</code> and <code>Public Sub Foo()</code> are both public but the latter makes your intent explicitly clear because you included the Public keyword.</p>

<hr>

<p>Indentation. You have extra indentation under your EXTRACT UNIQUE BRANCHES banner. No need for that. You will actually refactor that and pull it into its own private method which I'll explain later. Keep indentation consistent, typically 1 TAB within each logical block. The example code block below shows this. The <a href="https://docs.microsoft.com/en-us/office/vba/language/reference/user-interface-help/fornext-statement" rel="noreferrer">For...Next statement</a> is a logical block, the <a href="https://docs.microsoft.com/en-us/office/vba/language/reference/user-interface-help/with-statement" rel="noreferrer">With statement</a> is another.</p>

<pre><code>Public Sub Foo()
    Dim bar As String
    bar = Sheet1.Range("A1").Value2

    Debug.Print bar

    Dim counter As Long
    For counter = 1 To 10
        Sheet1.Cells(counter, "C").Value2 = counter
    Next

    With Sheet2.Range("A1:A10")
        .NumberFormat = "General"
        .Font.Bold = True
        .Font.Italic = True
        .BorderAround XlLineStyle.xlContinuous, XlBorderWeight.xlThick, Color:=RGB(120, 255, 18)
    End With
End Sub
</code></pre>

<p><a href="http://rubberduckvba.com/" rel="noreferrer">http://rubberduckvba.com/</a> can help you with that. It's an open source COM add-in for VBA hosts. Take your original code and paste it into <a href="http://rubberduckvba.com/Indentation" rel="noreferrer">http://rubberduckvba.com/Indentation</a> to indent it an example. Rubberduck (RD) does a lot more than that too.</p>

<p>***Note: I'm a contributing member to RD and openly biased in favor of it.</p>

<hr>

<p>Hungarian Notation (HN) is a holdover from a time long ago. <code>vaData</code>, <code>colUnique</code>, <code>aOutput</code> I'm assuming are using this for Variant, Collection, and Array. If you need to know the type of a variable place your cursor on or within the variable and from the menu Edit&gt;Quick Info (Hotkey: <code>Ctrl+I</code>) to display its type, as shown below. RD warns about common HN prefixes.</p>

<p><a href="https://i.stack.imgur.com/06qnS.png" rel="noreferrer"><img src="https://i.stack.imgur.com/06qnS.png" alt="enter image description here"></a></p>

<hr>

<p>You have a Wall-of-Declarations at the top. Declare variables right before their use. This has a few benefits. One is it aids in refactoring/restructuring your code by allowing you to get the declaration and first use without a lot of scrolling. A second is it allows you to see unused variables easier. Notice that <code>vaData</code> and <code>LastRow</code> aren't actually used anywhere. They're declared but, never used. With a wall of declarations at the top this is something commonly missed. RD gives code inspections about these unused variables.</p>

<hr>

<p>Static cell references. <code>Sheet2.Range("b7:b107")</code> will break if a row is entered above or a column to the left. How? The cells will shift but your text <code>"b7:b107"</code> won't. To protect yourself from this breaking change use named ranges. These can be added from the Formulas tab&gt;Defined Names group&gt;Name Manager button to display the Name Manager dialog (Hotkey: <code>Ctrl+F3</code>). Click New to display the New Name dialog and enter in the name you want to use. I've assumed the name is <code>BranchLocations</code>.</p>

<p><a href="https://i.stack.imgur.com/J4VcA.png" rel="noreferrer"><img src="https://i.stack.imgur.com/J4VcA.png" alt="enter image description here"></a></p>

<p>There are also static references <code>"K23"</code> through <code>"K28"</code>. Your variable names are already good. Descriptive variable names make understanding the code a lot easier. Keep it up by doing this with your named ranges too. Future-you will thank present-you for doing so.</p>

<hr>

<p>Headers like <code>'///////////////////////// EXTRACT UNIQUE BRANCHES ////////////////////</code> are a signpost/trail-marker for a dedicated Sub/Function through <a href="https://en.wikipedia.org/wiki/Code_refactoring" rel="noreferrer">refactoring</a>. What's refactoring?</p>

<blockquote>
  <p>Change <strong>how</strong> somethings being done without changing the result it produces.</p>
</blockquote>

<p>You still end up the same result but it's now achieved in a better/improved way. Do this by adding a reference. Do that from the menu Tools&gt;References to display the References dialog. Scroll down to the M's and look for <code>Microsoft Scripting Runtime</code>. Add a check mark and accept with OK.</p>

<p><a href="https://i.stack.imgur.com/q2ER2.png" rel="noreferrer"><img src="https://i.stack.imgur.com/q2ER2.png" alt="enter image description here"></a></p>

<p>This new reference gives you access to another assembly (think toolbox as a layman's analogy) that has just the tool you need, a <a href="https://docs.microsoft.com/en-us/office/vba/language/reference/user-interface-help/dictionary-object" rel="noreferrer">Dictionary object</a>. The Dictionary object has an <a href="https://docs.microsoft.com/en-us/office/vba/language/reference/user-interface-help/exists-method" rel="noreferrer">Exists method</a> (in VBA terms a boolean function) which allows you to check if it already contains the item. As I mentioned previously about the banner comment refactoring, here it is below. The refactoring using the new Dictionary object.</p>

<pre><code>Private Function GetUniqueBranches(ByVal sourceArea As Range) As Scripting.Dictionary
    Set GetUniqueBranches = New Scripting.Dictionary
    Dim surveyCell As Range
    For Each surveyCell In sourceArea
        If Not GetUniqueBranches.Exists(surveyCell.Value2) Then
            GetUniqueBranches.Add surveyCell.Value2, CStr(surveyCell.Value2)
        End If
    Next
End Function
</code></pre>

<p>This function is now called as shown below. You supply a source area that is a Range object and it returns you a Dictionary object with the unique values.</p>

<pre><code>Dim uniqueBranches As Scripting.Dictionary
Set uniqueBranches = GetUniqueBranches(Sheet2.Range("BranchLocations"))
</code></pre>

<hr>

<p>Implicit sheet references. <code>Set start = Range("b110")</code> is implicitly accessing whatever sheet happens-to-be the active sheet when this code is run. These are ticking time bombs waiting to blow up at the least convenient moment possible. Qualify them with the sheet it's on <code>Sheet2.Range("b110")</code>. Another static cell reference. The unqualified Range also occurs when <code>BranchesList</code> is assigned <code>Set BranchesList = Range(...)</code>. And looking at your code that can be condensed down to the code below</p>

<pre><code>Dim branchCount As Long
branchCount = uniqueBranches.Count

Dim start As Range
Set start = Sheet2.Range("UniqueBranchLocations").Cells(1, 1)

'set range containing current brancheslist
Dim BranchesList As Range
Set BranchesList = start.Resize(RowSize:=branchCount)
BranchesList.Value2 = Application.WorksheetFunction.Transpose(uniqueBranches.Items)
</code></pre>

<hr>

<p><code>Range.Select</code> immediately followed by <code>Selection.Anything</code> is another signpost. <em>Rarely</em> is <code>.Select</code> required. Cut out <code>Select</code> and <code>Selection</code> to end up with <code>BranchesList.Sort ...</code></p>

<hr>

<p>The rest of your logic with Option 1-6 extract that into its own Sub and refactor the logic a bit. It looks/feels like you can consolidate some of the logic into helper functions. Putting all that together you end up with the code below. </p>

<pre><code>Option Explicit

Public Sub GetResults()
    Application.ScreenUpdating = False

    With Sheet2.Range("UniqueBranchLocations")
        .ClearContents
        .ClearFormats
    End With

    Dim uniqueBranches As Scripting.Dictionary
    Set uniqueBranches = GetUniqueBranches(Sheet2.Range("BranchLocations"))
    Dim branchCount As Long
    branchCount = uniqueBranches.Count

    Dim start As Range
    Set start = Sheet2.Range("UniqueBranchLocations").Cells(1, 1)

    Dim BranchesList As Range
    Set BranchesList = start.Resize(RowSize:=branchCount)
    BranchesList.Value2 = Application.WorksheetFunction.Transpose(uniqueBranches.Items)

    BranchesList.Sort key1:=start, order1:=xlAscending, Header:=xlNo

    CountEachOptionForEachBranch start, BranchesList, branchCount

    Application.ScreenUpdating = True

End Sub

Private Function GetUniqueBranches(ByVal sourceArea As Range) As Scripting.Dictionary
    Set GetUniqueBranches = New Scripting.Dictionary
    Dim surveyCell As Range
    For Each surveyCell In sourceArea
        If Not GetUniqueBranches.Exists(surveyCell.Value2) Then
            GetUniqueBranches.Add surveyCell.Value2, CStr(surveyCell.Value2)
        End If
    Next
End Function

Private Sub CountEachOptionForEachBranch(ByVal start As Range, ByVal BranchesList As Range, ByVal branchCount As Long)
    'Refactored code with simplified logic.
End Sub
</code></pre>
    </div>