<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Quickfire opinions:</h3>

<ul>
<li>Swing is deprecated. If you have the choice: <strong>do not use swing!</strong></li>
<li>Empty lines are a useful thing. 
It's pretty conventional to use empty lines between members and around the import section of code.
It helps delineate logically connected sections of code fromone another.</li>
<li>The use of <code>extends JPanel</code> is something that many swing tutorials do. 
It's also one of the worst things to teach people new to the UI framework.
Especially for UI the rule of thumb "Composition over Inheritance" applies. 
The calling code for the UI should not care whether the UI is a Panel or a CLI interface or even some web interface.
Use MVP or MVC to write properly encapsulated and abstracted UIs that can be easily maintained or replaced.</li>
<li>There should be no reason whatsoever in a GUI to ignore the warnings rawtypes and serial.
Both of these warnings point to an underlying problem in the modelling of the domain and a lack of familiarity with the GUI framework.
I do appreciate the commitment to treating warnings as important though :)</li>
<li>Systems hungarian notation should die. 
Don't suffix or prefix members with indications of their type like <code>Txt</code> <code>box</code> or <code>Btn</code>. 
If you need that to have unique names, your UI is not properly separating model from presentation.</li>
<li>Use <code>final</code> wherever possible to indicate a lack of modifiability.</li>
<li>Use the smallest access scope possible.
All text fields in the view should be private</li>
<li>Section headers in comments are a code-smell. 
Using them implies that you're not using sufficiently communicative names for members.</li>
</ul>

<h3>Not so quickfire changes:</h3>

<p>Use compile-time guarantees for correctness wherever possible:</p>

<pre><code>private static final String[] types = { String.class.getSimpleName(), Integer.class.getSimpleName(),
                                        Date.class.getSimpleName(), Boolean.class.getSimpleName() };
private static final String[] entities = { User.class.getSimpleName(), Client.class.getSimpleName() };
</code></pre>

<p>Note that this does change which strings are actually displayed. 
What you're conveniently ignoring in the code presented is challenges posed by localization of your user interface and the application domain.
The code can't deal with your sales team getting the idea of selling the software in any non-englishspeaking country. 
That's an issue, because it detracts from the value of the product on one hand and additionally adds technical debt and a suboptimal approach to exposing the domain to the user.</p>

<p>I also noticed that you're declaring all the members and variables you use upfront. Only a little portion of those need to be explicitly maintained, though. The only things that you should "cache" in members are the panels that you're returning from the side-effecting getters and the members you need to expose for presentation purposes. The fact that your getters create a new JPanel every time they are invoked just made me go into a rant to a friend sitting next to me for 15 minutes!!!! <strong>DON'T DO THAT!</strong> </p>

<p>Side-effecting getters result in a change in reference and operation semantics that make it near-impossible to correctly refactor any code that's interfacing with your UI without fully understanding said UI.</p>

<p>Consider the following simplified code example:</p>

<pre><code>Foo someFoo = new Foo();
Bar someBar = someFoo.getBar();
someBar.doSomething();
someBar.doSomethingElse();
</code></pre>

<p>Assuming the usual semantics for standard getters in java, I'd have expected the following code to have the same effect:</p>

<pre><code>Foo someFoo = new Foo();
someFoo.getBar().doSomething();
someFoo.getBar().doSomethingElse();
</code></pre>

<p>The code is violating these assumptions and semantics of getters. This makes it near-unmaintainable IMO.
Instead of naming these <code>get*</code>, you should call them <code>create*</code>, since every invocation of these methods returns a specifically created value. </p>

<p>I'm happy that these are just private factory methods encapsulating the creation of components, but it's still something that you shouldn't do!</p>

<h3>CRUD is actually written C.R.U.D.</h3>

<p>The overall UI experience presented here is badly designed. 
The UI realizes multiple fundamentally different operations in the same View. 
Updating and Adding an Attribute are fundamentally different. 
Don't handle them in the same UI. </p>

<p>I'd be okay with modification and deletion to be on the same view, but then you should present a proper <code>ListView</code> of all attributes that the user can modify.</p>

<p>As it stands the class you presented does not expose any facilities for invoking code to <em>set</em> values (which are read from a database).
You're not exposing any reasonable way to prefill the <code>ModifyAttributePanel</code>. </p>

<p>I'm kinda sorry, but this code is not even close to production ready.
Please go back to the drawing board and reconceptualize how the requirements should be translated into a view.</p>

<p>This brings me to the end of today's post in the category "Vogel Rants". </p>
    </div>