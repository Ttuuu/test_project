<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Welcome to Code Review. Great first question!</p>

<h2>Things to maintain</h2>

<p>You have some good habits already; keep them up:</p>

<ul>
<li>Commenting code</li>
<li>Reasonable variable and function names</li>
</ul>

<p>There are some other things to improve:</p>

<h2>Whitespace</h2>

<p>Programmers (sometimes snobbishly) think of code as poetry that should be broken up into <a href="https://en.wikipedia.org/wiki/Stanza" rel="nofollow noreferrer">stanzas</a>, basically paragraphs of related statements. This helps break up the code for it to be more legible for humans without having any effect on Python's interpretation of the code. For example, the first few lines of your program could be</p>

<pre><code># Imports random function for computer choice
import random


win_cnt = 0
losses_cnt = 0


def game_main():
    """
    Game function
    """

    # Prompts user about game   
    print(user_name + " will face off against the computer!\nIn this duel you and the computer will face off  by taking turns battling the first to fall loses! ")
    print("Remember to use nearby cover and to reload BEFORE you attack!")

    # Variables needed for tracking computer and users health, ammo, and damage.
    user_potion = 0
    com_potion = 0
    user_ammo = 0
    com_ammo = 0
    user_heal = 10
    com_heal = 10
    user_atk = 10
    com_atk = 10
    user_HP = 30
    com_HP = 30

    # Battle loop that loops as long as both players health is above 0   
    # ...
</code></pre>

<p>Note the use of triple-quotes for a standard function docstring, and standard indentation of comments at the same level as the corresponding code.</p>

<p>Have a read through <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP8</a>, and/or use pretty much any modern Python IDE that has auto-linting (PyCharm is my usual go-to); you will find many other suggestions there about whitespace in your code.</p>

<h2>String interpolation</h2>

<pre><code>print(user_name + " will face off against the computer!\nIn this duel you and the computer will face off  by taking turns battling the first to fall loses! ")
</code></pre>

<p>can be more easily coded as</p>

<pre><code>print(
    f'{user_name} will face off against the computer!\n'
    'In this duel you and the computer will face off '
    'by taking turns battling the first to fall loses! '
    'Remember to use nearby cover and to reload BEFORE '
    'you attack!'
)
</code></pre>

<p>The <code>f</code> does the interpolation to allow for the <code>{}</code> field insertion, and the consecutive strings use implicit string literal concatenation to keep the line length down.</p>

<h2>Parentheses</h2>

<p>This is not C/Java/C#/etc., so this:</p>

<pre><code>while (user_HP &gt; 0 and com_HP &gt; 0):
</code></pre>

<p>does not need parentheses.</p>

<h2>Input validation</h2>

<pre><code>    user_move = int(input("What would you like to do? 1) Attack 2) Block 3) Reload 4) Heal? 5) Grab Bandage(potion)"))
    if user_move &gt; 5: #or str:
        print("INVALID INPUT! MUST BE 1-5")
</code></pre>

<p>What if someone inputs 0? Or "banana"? You will want to change this to (a) catch a <code>ValueError</code>, and also <code>if not (1 &lt;= input &lt;= 5)</code>.</p>

<p>That aside, you should also consider making an <code>enum.Enum</code> to represent these choices, for many reasons - symbolic references to the numbers will make your code more legible; validation will be easier; etc.</p>

<h2>Random</h2>

<p>This:</p>

<pre><code>random.randint(0,100) &gt; 50
</code></pre>

<p>technically does not need to have a range of 100. You could use an upper limit of 2, or even</p>

<pre><code>random.choice((True, False))
</code></pre>

<h2>Functions</h2>

<p><code>game_main</code> is very long. Consider pulling out chunks of it into subroutines - perhaps one for every different possible type of user move.</p>

<h2>No-op return</h2>

<p>This:</p>

<pre><code>else:
    return
</code></pre>

<p>does not do anything and can be removed.</p>

<h2>Procedure</h2>

<p>I encourage you to work on your code based on the feedback you get, ensure that your code is still working, and then post another question with your new, proposed code once you are satisfied that you have received enough responses on this question. Given that you are a beginner, there are many things that you can do to this code to improve it, and it wouldn't be very feasible to tackle it all at once.</p>
    </div>