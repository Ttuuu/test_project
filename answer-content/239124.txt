<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Human Computer Interaction</h1>

<h2>Prompts</h2>

<pre><code>        li = input("enter the first sequence of numbers by giving exactly one space between numbers:")
        lj = input("enter the second sequence of numbers by giving exactly one space between numbers:")
</code></pre>

<p>These are awfully long prompts for the user to enter in a list of values after.  Maybe instructions, and then two short input prompts?</p>

<pre><code>        print("Enter two space separated integer number sequences, of the same length.")
        li = input("First sequence:  ")
        lj = input("Second sequence: ")
</code></pre>

<h2>White-space separators</h2>

<p><code>li.split(" ")</code> will separate a string into a number of items separated by exactly one space.  If the user wants to enter a single digit number on one line, and a two digit number on the next, and keep the columns of numbers lined up, they can't use extra spaces.</p>

<p><code>.split()</code>, with no arguments, will split a string into a number of items separated by one or more white-space characters.</p>

<pre><code>&gt;&gt;&gt; "     2     3 \t   \n  4 \r  5     ".split()
['2', '3', '4', '5']
</code></pre>

<p>No hard requirements to use exactly one space.  And leading and trailing spaces are trimmed, too!</p>

<h1>Unexpected Behaviour</h1>

<pre><code>def pair_finder(list1, list2, t):
    list1.sort()
    list2.sort()
    ...
</code></pre>

<p>After calling <code>pair_finder(l1, l2, target)</code>, you'll find that <code>l1</code> and <code>l2</code> have been sorted!  The caller probably did not expect that.</p>

<p>Use:</p>

<pre><code>def pair_finder(list1, list2, t):
    list1 = sorted(list1)
    list2 = sorted(list2)
    ...
</code></pre>

<p>The <code>sorted(...)</code> function doesn't modify the input list, and it returns a new list.  By assigning those to the original variables, <code>list1</code> &amp; <code>list2</code> will be sorted, but the caller's <code>l1</code> &amp; <code>l2</code> lists won't be touched.</p>

<h1>Pythonic Constructs</h1>

<h2>Loop like a native</h2>

<h3>List comprehension</h3>

<pre><code>l1 = []
for i in li.split(" "):
    l1.append(int(i))
</code></pre>

<p>This is an inefficient construct.  You are creating a list, and then expanding the list one item at a time.</p>

<p>You could create the list all at once, using list comprehension:</p>

<pre><code>l1 = [int(i) for i in li.split(" ")]
</code></pre>

<p>And applying the same operation to every item in a sequence is called a mapping operation, and Python has a built-in <code>map(func, sequence)</code> function:</p>

<pre><code>l1 = list(map(int, li.split(" ")))
</code></pre>

<p>Or, combining with the input and using the better space handling:</p>

<pre><code>print("Enter two space separated integer number sequences, of the same length.")
l1 = list(map(int, input("First sequence:  ").split()))
l2 = list(map(int, input("Second sequence: ").split()))
</code></pre>

<h3>Enumerate</h3>

<pre><code>        k = 0
        for j in list2:
            ...
            k += 1
</code></pre>

<p>This should be replaced with:</p>

<pre><code>        for k, j in enumerate(list2):
            ...
</code></pre>

<p>to allow Python to maintain the <code>k</code> index while walking through the <code>list2</code> items.</p>

<h2>Extending Lists</h2>

<p>Adding a list to another list is a <code>list.extend(...)</code> operation:</p>

<pre><code>pairs = []
for q in pairs_low:
    pairs.append(q)
for w in pairs_high:
    pairs.append(w)
for r in pairs_equal:
    pairs.append(r)
</code></pre>

<p>Could become simply:</p>

<pre><code>pairs = []
pairs.extend(pairs_low)
pairs.extend(pairs_high)
pairs.extend(pairs_equal)
</code></pre>

<h2>if ... elif</h2>

<pre><code>        if i + j &lt; t:
            ...
        if i + j &gt; t:
            ...
        if i + j == t:
            ...
</code></pre>

<p>If the sum is less than <code>t</code>, it won't be greater than <code>t</code>, or equal to <code>t</code>.  And if it is greater than <code>t</code>, it won't be equal to <code>t</code>.  And if it is not less than or greater than <code>t</code>, it can only be equal to <code>t</code>.  Why do the extra comparisons?</p>

<pre><code>        if i + j &lt; t:
            ...
        elif i + j &gt; t:
            ...
        else:
            ...
</code></pre>

<h2>PEP-8</h2>

<h3>Unnecessary parenthesis:</h3>

<pre><code>            elif (i + j == t_low):
</code></pre>

<h3>Variable names too short to be meaningful</h3>

<p><code>li</code>, <code>lj</code>, <code>l1</code>, <code>l1</code>, <code>q</code>, <code>w</code>, <code>r</code>, <code>t</code></p>

<h3>Main guard</h3>

<p>Mainline code should be protected with</p>

<pre><code>if __name__ == '__main__':
    ...
</code></pre>

<p>to allow the file to be imported into another file, for unit tests, etc.</p>

<h1>Algorithmic Improvements</h1>

<p><code>pair_finder()</code> starts off by sorting both input lists.  That is an <span class="math-container">\$O(N \log N)\$</span> operation.  Then it reverses one of the lists, which is an <span class="math-container">\$O(N)\$</span> operation.  And then ...</p>

<pre><code>for i in list1:
    ...
    for j in list2:
        ...
</code></pre>

<p>... which is <span class="math-container">\$O(N^2)\$</span>!  Right now, this is the time consuming part of the algorithm.  But what are we doing?  We are looking for two numbers which sum to <code>target</code>.  Let’s turn that around:</p>

<pre><code>for i in list1:
    desired = target - i
    # find “desired” in list2
</code></pre>

<p>Well, <code>list2</code> is sorted, so we can do a binary search to find the <code>desired</code> value.</p>

<pre><code>for i in list1:
    desired = target - i
    pos = bisect.bisect_left(list2, desired)
    ...
</code></pre>

<p>The binary search is <span class="math-container">\$O(\log N)\$</span>, so with the outer loop, the time complexity has dropped to <span class="math-container">\$O(N \log N)\$</span>, the same as the sorting.</p>

<p>The <code>desired</code> value may or may not be in <code>list2</code>.  If it is, it is at <code>list2[pos]</code>.  Assuming we don’t fall off the start of <code>list2</code>, then for the current <code>i</code> value, <code>i+list2[pos-1]</code> would be the largest sum less than <code>target</code>.</p>

<p>Assuming we don’t fall off the end of <code>list2</code>, if <code>list2[pos] == desired</code>, then the sum <code>i+list2[pos+1]</code> will be the smallest sum greater than <code>target</code> for the current value of <code>i</code>.</p>

<pre><code>for i in list1:
    desired = target - i
    pos = bisect.bisect_left(list2, desired)
    if pos &lt; len(list2):
        if list2[pos] == desired:
            # add (i, desired) to pairs_equal
            low, high = pos - 1, pos + 1
        else:
            low, high = pos - 1, pos
        if low &gt;= 0:
            # add (i, list2[low]) to pairs_low, if &gt;= t_low
        if high &lt; len(list2):
            # add (i, list2[high]) to pairs_high, if &lt;= t_high
</code></pre>

<p>But ... what about duplicates?  If <code>list2</code> contains duplicate values, <code>pos + 1</code> may not be sufficient to advanced to a value larger than <code>desired</code>.  You could use both <code>bisect_left</code> and <code>bisect_right</code> to find either end of a sequence of multiple <code>desired</code> values.  The difference in <code>right</code> and <code>left</code> would be the count of those values, and you could add <code>[(i, desired)] * count</code> to <code>pairs_equal</code>.  But you’d also need to do the same for the <code>pairs_low</code> and <code>pairs_high</code>, which means more binary searching to find those ends.  Or, you could use two <code>collections.Counter</code> objects to count occurrences of each value in <code>list1</code> and <code>list2</code>, and then remove duplicates values from <code>list1</code> and <code>list2</code>.  Any pairs added would need to be replicated by the product of the respective counts to occur the correct number of times in the result.</p>
    </div>