<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I have been refactoring this code myself as well in the meanwhile, so I thought I'd post some of the insights I have gained myself.</p>

<h2>Class inheritance</h2>

<p>Instead of passing a <code>Universe</code> instance when creating a <code>Query</code>, by making <code>Query</code> a subclass of <code>Universe</code>, I was able to reduce the amount of information that was stored in both classes. This makes accessing the attributes and methods of <code>Universe</code> in <code>Query</code>'s methods shorter as well.</p>

<h2><code>Query.join_strings</code> does nothing</h2>

<pre><code>    self.join_strings = {}
    for i in self.graph.tables:
        self.join_strings[i] = self.graph.json[i]['Joins']
</code></pre>

<p><code>self.join_strings</code> is defined, but used nowhere else. Also the use of <code>i</code> is bad (was an oversight).</p>

<h2>Indirectly still iterating over <code>.keys()</code></h2>

<pre><code>    self.json = self.json['graph']
    self.tables = self.json.keys()
</code></pre>

<p>in <code>Universe.__init__()</code> stores the keys (tablenames). This is only used to iterate later:</p>

<pre><code>    edges = {}
    for table in self.tables:
        edges[table] = []
        try:
            edges[table] += [connected_tables
                             for connected_tables in self.json[table]['Joins']]
        except AttributeError:
            pass
</code></pre>

<p>We might as well have iterated over <code>self.json</code>. However, for naming purposes, I prefer the following:</p>

<pre><code>    self.tables = self.json['graph']
</code></pre>

<p>Since that improves the naming, and removes the need to keep the <code>json</code> attribute around. So we can turn that into a regular variable without the <code>self</code>.</p>

<h2>Expand the <code>add_*</code> methods to also allow for removing of that item.</h2>

<p>This is mostly relevant with the GUI in mind. It contained a bit of a workaround to be able to remove tables and columns from the Query.</p>

<p>So I added an argument to the <code>add_*</code> methods to be able to set to remove instead.</p>

<pre><code>def add_tables(self, tablename, add_or_remove=True):
    """
    Toggles active setting of given tablename. GUI ensures that only valid names
    will be given.
    """
    if add_or_remove:
        if tablename not in self.active_tables:
            self.active_tables.append(tablename)
            self.active_columns[tablename] = []
    else:
        self.active_tables.remove(tablename)
</code></pre>
    </div>