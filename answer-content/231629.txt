<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some minor modifications can be applied to your code to improve readibility, your first part of code is this:</p>

<blockquote>
<pre><code>Map&lt;Integer, List&lt;Integer&gt;&gt; spans = new HashMap&lt;&gt;();
for (int i = 0; i &lt; nums.length; i++) {
  if (!spans.containsKey(nums[i])) {
  List&lt;Integer&gt; position = new ArrayList&lt;&gt;();
     position.add(i);
     spans.put(nums[i], position);
  } else {
     List&lt;Integer&gt; position = spans.get(nums[i]);
     position.add(i);
    }
}
</code></pre>
</blockquote>

<p>You can use a ternary operator and aggregate operations executed in both branchs of <code>if else</code> like below:</p>

<pre><code>Map&lt;Integer, List&lt;Integer&gt;&gt; spans = new HashMap&lt;&gt;();
final int n = nums.length;
for (int i = 0; i &lt; n; ++i) {
    boolean condition = spans.containsKey(nums[i]);
    List&lt;Integer&gt; position = condition ? spans.get(nums[i]) : new ArrayList&lt;&gt;();
    position.add(i);
    spans.put(nums[i], position);
}
</code></pre>

<p>Same suggestions for the second part of your code:</p>

<blockquote>
<pre><code>int globalMaxSpan = 0; // empty set has maxSpan = 0
for (List&lt;Integer&gt; value : spans.values()) { //iterating over values only
    int localMaxSpan = 0;
    if (value.size() &gt; 1) {
       localMaxSpan = value.get(value.size() - 1) - value.get(0) + 1;
    } else localMaxSpan = 1;
    if (localMaxSpan &gt; globalMaxSpan)
      globalMaxSpan = localMaxSpan;
}
return globalMaxSpan;
</code></pre>
</blockquote>

<p>You can write a more concise code like this below using again a ternary operator because you already know every list has at least one element:</p>

<pre><code>int globalMaxSpan = 0;

for (List&lt;Integer&gt; value : spans.values()) {
    final int size = value.size();
    int localMaxSpan = size &gt; 1 ? value.get(size - 1) - value.get(0) + 1 : 1;
    globalMaxSpan = Math.max(globalMaxSpan,localMaxSpan);
}

return globalMaxSpan;
</code></pre>

<p>It is possible to write a more complex version of this part of code to avoid calls <code>max</code> operations (I made it) when lists contains exactly one value, but the version is not concise like this and so I won't post it.</p>
    </div>