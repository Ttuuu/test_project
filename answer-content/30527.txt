<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I've never tackled such a problem before, so I'll proceed with this cautiously.</p>

<ul>
<li><p>You don't need to declare those three variables and then assign to them.  Instead, initialize them right away where they're first used.</p>

<p>You can also move <code>number</code> right above the <code>cin</code> for slightly closer scope.</p>

<pre><code>std::cout &lt;&lt; "Enter the number: ";
int number;
std::cin &gt;&gt; number;
int first_digit = number/10;
int second_digit = number%10;
</code></pre></li>
<li><p>I suppose <code>switch</code> is an okay choice for this program.  Either way, the <code>switch</code> can still be condensed while making the program more modular (with functions).</p>

<p>Here's what 11-20 could look like within its own function:</p>

<pre><code>std::string elevenThroughTwenty(unsigned int number)
{
    switch (number)
    {
        case 11: return "eleven";
        // ...
        case 20: return "twenty"; // you forgot the 20 in your code

        // throw an exception if number not in the switch
        // include &lt;stdexcept&gt; to use this
        default: throw std::logic_error("Not 11 through 20");
    }
}
</code></pre>

<p>Separating them as such helps with readability, organization, and conciseness.  You will also need proper <code>default</code>s so that invalid numbers don't cause crippling errors.</p></li>
</ul>
    </div>