<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><em><strong>Is it wrong to perform any sort of calculations within the constructor?</strong></em></p>

<p>Opinion is somewhat divided on this matter. I think it is generally accepted that a constructor should not contain business logic because it makes your code much more difficult to mock for testing, however this particular case you show comes down to how you define that term "business logic".</p>

<p>Personally I believe that checking for global dependencies (in this case, checking for the existence of the SSH2 extension) is acceptable. Ideally you would not need to be checking for any global environmental state, you would simply inject a state object, but because of the way PHP's extension system works that's not really possible. Obviously injecting state object is possible, but that would still need to check global state, so you haven't really gained anything, except possibly in terms of SRP - but this would require an added layer of abstraction to separate the protocol from the connection. It's up to you whether you think this is worthwhile.</p>

<p>The alternative is to put this check in a separate method and require that the consumer call it explicitly. However, to me this is at odds with the idea of the interface and is defining and exposing the underlying implementation.</p>

<p>There are only two cases that need to be mocked: the dependencies exist, or they don't. There's no real logic that needs to be tested here. What you definitely should <em>not</em> do is automatically connect in the constructor, but I think that dependency validation in the constructor is harmless.</p>

<p>However, I know there are others who would disagree with me on this point.</p>

<p><em><strong>Should the <code>ping()</code> function be here?</strong></em></p>

<p>No, the ping function should not be there. We have already had a <a href="http://chat.stackoverflow.com/rooms/11/conversation/jimbos-ssh2-code-review">conversation about this in chat</a>, but sum it up in a sentence: The ping function is there to validate that the host is connectable, this should be done internally by the <code>connect()</code> method and not by a separate external API call. This is exposing part of your implementation in your interface, exactly what you are trying to avoid.</p>

<p><em><strong>What about the actual data retrieval?</strong></em></p>

<p>It depends. If the class contains a <code>send()</code> mechanism, it should also contain the <code>retrieve()</code> mechanism. But it may be that this should be divided up a bit more:</p>

<pre class="lang-php prettyprint-override"><code>/**
 * Value object that just holds the connection parameters like host, port, protocol
 *
 * It may be that this is simply a concrete implementation and an interface isn't required
 */
interface ConnectionParameters
{
    // ...
}

interface Connector
{
    /**
     * Uses a parameters object to create a connection object
     *
     * @param ConnectionParameters $parameters The parameters to use
     *
     * @return Connection The created connection
     *
     * @throws \RuntimeException When the connect operation fails
     */
    public function connect(ConnectionParameters $parameters);
}

/**
 * Represents an active connection
 */
interface Connection
{

    /**
     * Get the connection parameters used to create the connection
     *
     * This is optional, but personally I believe it makes sense to carry this
     * information with the connection. Obviously in order for this to be implemented
     * the object will need to be passed in by the Connector.
     *
     * Some may say this is inviting LoD violations and that the association, if
     * required, should be carried by the consumer.
     *
     * @return ConnectionParameters Parameters used to create the connection
     */
    public function getParameters();

    /**
     * Send data from a buffer
     *
     * @param DataBuffer $buffer Buffer that holds data to send
     * @param int        $length Number of bytes to send (&lt;0: drain buffer)
     *
     * @return int Number of bytes sent
     */
    public function send(DataBuffer $buffer, $length = -1);

    /**
     * Receive data into a buffer
     *
     * @param DataBuffer $buffer Buffer to populate with received data
     * @param int        $length Number of bytes to receive (&lt;0: all pending data)
     *
     * @return int Number of bytes received
     */
    public function recv(DataBuffer $buffer, $length = -1);

    /**
     * Close the connection
     */
    public function close();
}

/**
 * Represents a store of data that can be transmitted via the connection
 *
 * You may wish to add other methods to this interface, for example an fgets()
 * equivalent. Arguably though, that might be a case for extending this interface:
 * This assumes all data is binary, you might want to have TextBuffer extends DataBuffer
 */
interface DataBuffer
{
    /**
     * Read some data from the buffer
     *
     * @param int $length Number of bytes to read (&lt;0: drain buffer)
     *
     * @return string Data from buffer
     */
    public function read($length = -1);

    /**
     * Write some data to the buffer
     *
     * @param string $data   Data to write
     * @param int    $length Number of bytes to write (&lt;0: all pending data)
     *
     * @return int Number of bytes written
     */
    public function write($data, $length = -1);
}
</code></pre>
    </div>