<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Note:</strong> general observation before starting to say anything about code written here, my humble not important in any way opinion here is, this might be too far advanced than your current level of coding skills given by the way you write your code I suggest that you write simpler codes first, get used to what's wrong and what's right and then scale your programs as you go through your learning journey. The amount of mistakes here is insane. Even if this code does the job you created for, this might be the machine understands the instructions you presented, however a code is meant to be interpreted by machines and read by human beings and it's ultra-hard to make sense of your code.</p>

<p>A better example: <a href="https://codereview.stackexchange.com/questions/144551/find-and-display-best-poker-hand">Find and display best Poker hand</a> I suggest you check this if your code is meant to assess a poker hand, might give you some idea on other approaches to write a similar code.</p>

<p>As I remember mentioning earlier in your previous card game <a href="https://codereview.stackexchange.com/questions/229822/my-second-game-war-card-game-v-1">My second game: War Card game V.1</a> to refer to PEP0008 when writing your code <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">https://www.python.org/dev/peps/pep-0008/</a></p>

<ul>
<li><p><strong>An infinite loop full of imports and function definitions:</strong> analyzer.py and goodhands.py (both contain the same approach)</p>

<pre><code>while True:
    from goodhands import *
    import random 
</code></pre>

<p>Let me explain the main structure of your program: you keep defining your functions each time you go through the loop and keep importing things as well.
This is a terribly inefficient and poor structure. A loop is meant to automate repetitive tasks. In some cases functions are defined inside loops  and since this is not one of them, your functions should be defined outside the loop plus import statements according to PEP0008 should be always at the top of your script.</p></li>
<li><strong>Possible bug:</strong> When I run the one you call analyze.py I get this result <code>[21.5, 0, 2, None, 23, 5, None, None, 5]</code> and sometimes a list full of numbers which is inconsistent and very ambiguous to anyone trying to make sense of the code. And this is due to the fact that in your goodhands.py, there are 10 p1 through p10 that have a value or a None value(What is this exactly?)</li>
<li><strong>Docstrings and type hints:</strong> I will not repeat myself defining what those are(refer to your earlier post where I explained what those are) your function <code>good_hands()</code> is A) Ultra long (250 lines for 1 function) that's a mess, you should break it into several functions doing specific tasks in probably 75% less than this and B)Type hints and docstrings are absent and it's hard for anyone trying understand your code to make conclusions about what this function does and what the parameters <code>plays</code> and <code>player</code> are. They could be strings, lists, dicts ...</li>
<li><p><strong>DRY code</strong>: Which stands for DON'T REPEAT YOURSELF! opposite to <strong>WET</strong> 'write everything twice' There are loops that automate repeating tasks, if you find yourself repeating a code even twice ... think again.</p>

<p>Terrible repetitions in <code>good_hands()</code>:</p>

<p><code>for i in occurrences:</code> repeated 3 times</p>

<p><code>if i[0].isdigit() == True:</code> repeated 13 times!</p></li>
<li><p><strong>How to Never Ever do this? It's done in the following way:</strong></p>

<pre><code>if i[0].isdigit():
    # do 1
    # do 2
    # do 3
    # ...
    # do 13
</code></pre>

<p>The if <code>i[0].isdigit():</code> shows up once and contains 13 things to execute instead of the 13 repetitions.</p></li>
<li><p><strong>Comparison to True:</strong> I also remember mentioning this as well in your previous game, whenever you have a condition, you shouldn't be
comparing to True and false <code>if condition == True:</code> is the same as <code>if condition:</code> 
and if <code>condition == False:</code> is the same as <code>if not condition:</code></p></li>
<li><p><strong>Naming:</strong> you should Never Ever repeat an identifier name ... also in <code>good_hands()</code> there is a list called <code>good_hands</code> what is
happening here is first good_hands was a function and inside its
body, it became a list ... this is terribly wrong, maybe it did not
produce side effects and maybe it did, I don't know however this is a
no no never situation. Same goes for <code>deck = numbers + specials</code> in 
<code>deck()</code> function, <code>players = {"p" + str(num): None for num in range(1, 10)}</code> in <code>players()</code> function.</p></li>
<li><p><strong>A dictionary that becomes a list:</strong>  <code>occurrences = list(Counter(all_cards[player]).items())</code> Is there any explanation here to why are you listing the <code>Counter()</code> dict?</p></li>
<li><p><strong>Magic numbers:</strong> and the list of magic numbers in your code can never be exhausted ... Examples:</p>

<ul>
<li>lines 17 to 27 in <code>good_hands()</code> what are these variables that have values of 0 (all of them)</li>
<li>line 34 <code>if "0" in i[0]:</code> what is '0'?</li>
<li>line 45 <code>for n in range(2, 6):</code> what is n? why <code>range(2, 6)</code> why not <code>range(2, 9)</code>?</li>
<li>line 48  <code>if atofive == 5 and 21 not in good_hands:</code> what is 5? what is 21?</li>
<li>line 52 <code>for n in range(2, 7):</code> what is 2? why 7?</li>
<li>And as I said the list is endless, so I won't go through them all but you must've got the point</li>
</ul></li>
<li><p><strong>Nested structures:</strong> line 237 through 250</p>

<pre><code>for suit in suits:
    if "10" + suit in p1_cards:
        royal_count += 1
        if "J" + suit in p1_cards:
            royal_count += 1
            if "Q" + suit in p1_cards:
                royal_count += 1
                if "K" + suit in p1_cards:
                    royal_count += 1
                    if "A" + suit in p1_cards:
                        royal_count += 1
                        if royal_count == 5:
                            print("ROYAL FLUSH!!!!")
                            good_hands.append(100)
</code></pre>

<p>This is seriously terrible: 6 nested ifs? and what for? the conditions do not depend on each other and can be:</p>

<pre><code>for suit in suits:
    if "10" + suit in p1_cards:
        royal_count += 1
    if "J" + suit in p1_cards:
        royal_count += 1
    if "Q" + suit in p1_cards:
        royal_count += 1
    if "K" + suit in p1_cards:
        royal_count += 1
    if "A" + suit in p1_cards:
        royal_count += 1
    if royal_count == 5:
        print("ROYAL FLUSH!!!!")
        good_hands.append(100)
</code></pre></li>
<li><p><strong>False shuffle:</strong> I also mentioned this as well in your previous game,         <code>shuffled = random.sample(deck, len(deck))</code> does not shuffle, it creates card duplicates and I remember the <code>set()</code> example I used earlier produced 43 cards instead of 52. To properly shuffle, use <code>random.shuffle(list_name)</code> and after shuffling return the list unless there is no point to shuffle in the first place(which is the case here) because the card selection is already random so there is no point in shuffling the list and as I can see you copied the <code>deck()</code> function I presented in the early review without understanding how it works, never copy a code unless you fully understand it(and copying code is not the best way to become a good programmer).</p></li>
<li><p><strong>main guard:</strong> was also mentioned earlier(please revise the previous feedbacks)  </p>

<pre><code>print(outcome)
print(plays)
</code></pre>

<p>should be inside <code>if __name__ == '__main__':</code> at the end of your script after the elimination of the while loop that continuously defines and imports things in the following structure:</p>

<pre><code>import thing_one
import thing_two


def func1:

def func2:

def func3:

# ...

if __name__ == '__main__':
    # do things
</code></pre></li>
<li><p><strong>Useless code:</strong></p>

<pre><code> hands += 1
 if hands == 1:
    break
</code></pre>

<p>should be just <code>break</code> (given that the while loop is not already useless)</p></li>
<li><p><strong>Code structure suggestions:</strong> Finally a better way to do this(which is an assignment left to you) if you insist on working on something with that level of difficulty, I suggest making the following functions:
A) a deck builder B) A poker hand scoring function C)A hand assessor/analyzer/comparison function and you might break these functions down to smaller functions and you go from there.</p></li>
</ul>
    </div>