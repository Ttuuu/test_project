<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I see some things that may help you improve your code.</p>

<h2>Cleanly separate interface from implementation</h2>

<p>The header file contains a variable and four inline functions. The variable should be declared <code>extern</code> in the header.  For the functions, because they're declared as <code>inline</code> they're subject to somewhat the reverse of the usual rule.  That is, the header file contains the function implementations, as you have done it, but the <code>.c</code> file needs to declare them as <code>extern</code> or the files can't be compiled and linked separately.  See <a href="http://en.cppreference.com/w/c/language/inline" rel="noreferrer">this explanation</a> which correctly notes that the code must not depend on whether the called function is inline or external.  With that said, the next point may make it moot.</p>

<h2>Eliminate unneeded functions</h2>

<p>Because each of the four functions simply return what they're passed, they don't seem to be required at all.  For example, this macro</p>

<pre><code>#define GP_setbase(base)     GP_format[GP_set_base], (GP_check_int(base))
</code></pre>

<p>works just as well in its simplified form:</p>

<pre><code>#define GP_setbase(base)     GP_format[GP_set_base], (base)
</code></pre>

<p>Perhaps you were concerned about macro evaluation and expansion? I don't see why these were introduced except perhaps as a reminder to the reader about the expected types.</p>

<h2>Initialize the entire structure</h2>

<p>I'd recommend changing <code>style</code> so that it initializes all fields to reasonable defaults.  In particular, you could add the defaults to the <code>struct</code> declaration like this:</p>

<pre><code>struct GP_style {
  char buf[sizeof(intmax_t) + 1 + 1];
  // char sign[2][2];
  int prec[3];
  int width;
  int repeat_m1;
  unsigned base;
  _Bool fixed;
} default_GP_style = 
{
  {0}, // buf
  { FLT_DECIMAL_DIG - 1, DBL_DECIMAL_DIG - 1, LDBL_DECIMAL_DIG - 1}, // prec
  0,  // width
  0,  // repeat_m1
  10, // base
  false  // fixed
};
</code></pre>

<p>Then instead of the current lines to initialize various parts of <code>style</code>, you could have just this:</p>

<pre><code>struct GP_style style = default_GP_style;
</code></pre>

<h2>Allow for output file flexibility</h2>

<p>You probably already have it in mind, but I would probably prefer to have a <code>GfPrintf</code> which would allow me to write to a <code>FILE *</code> other than <code>stdout</code>.</p>

<h2>Don't forget about <code>const</code> pointers</h2>

<p>There is a provision for printing a <code>void *</code> type but not at <code>const void *</code> type.  This is easy to fix and requires only another few lines in the code, but it does also demonstrate the problem that adding support for a particular type requires changes in three different places in two different files.  It would be nice to consolidate that.</p>

<h2>Consider the user</h2>

<p>With C++, if I want to write a custom stream inserter, it's fairly simple to do.  It would be nice to be able to allow the user of this to be able to allow custom printing routines for user-defined structures.  </p>

<pre><code>struct dummy {
    int lucky[3];
};

const char* dummyPrint(struct dummy d) {
    static char buffer[200];
    sprintf(buffer, "%d-%d-%d", d.lucky[0], d.lucky[1], d.lucky[2]);
    return buffer;
}
</code></pre>

<p>One way to approach that might be using a macro like this:</p>

<pre><code>#define GP_Custom(X) _Generic((X), \
    struct dummy: dummyPrint(X) \
)
</code></pre>

<p>Because it returns a string pointer, we can use it without modification to <code>GPrint</code>:</p>

<pre><code>struct dummy d = {{ 7, 5, 1 }};
GPrintf("My lucky numbers are: ", GP_Custom(d), GP_eol); 
</code></pre>

<p>However, it's not so nice because of the requirement to convert via a buffer.  Also, <code>_Generic</code> requires that all results must be of the same type, so with more than one kind of structure, one would need something even uglier like this:</p>

<pre><code>#define GP_Custom(X) _Generic((X), \
    struct dummy: dummyPrint((void *)&amp;X) , \
    struct macho: machoPrint((void *)&amp;X) \
)
</code></pre>

<p>Perhaps you can find a better way. </p>
    </div>