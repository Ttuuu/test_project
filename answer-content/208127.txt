<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Care about <a href="https://stackoverflow.com/questions/6261201/how-to-find-memory-leak-in-a-c-code-project">memory leaks</a> and memory allocation</h3>
<p>Even if the memory will be cleaned up <a href="https://stackoverflow.com/questions/677812/is-there-a-reason-to-call-delete-in-c-when-a-program-is-exiting-anyway">by the program termination</a>, it's a good habit to <code>delete</code> resource that you allocated once you don't need it anymore. Because, yes, the OS <em>normally</em> will clean not released memory, but then, it don't call destructor.
Here, the good place to put deletion is the destructor of your class.</p>
<p><a href="https://www.internalpointers.com/post/beginner-s-look-smart-pointers-modern-c" rel="nofollow noreferrer">Consider using smart pointer</a> they are <a href="https://www.fluentcpp.com/2017/08/22/smart-developers-use-smart-pointers-smart-pointers-basics/" rel="nofollow noreferrer">better, safer, stronger</a> (Â© DP). If you used smart pointers instead of raw pointer, your allocated resources would have been automatically released by the default constructed destructor.</p>
<p>Check <a href="https://codereview.stackexchange.com/a/208050/182616">this reply from @TobySpeight</a> for further information.</p>
<p>Finally, take care that <a href="https://stackoverflow.com/questions/6833143/how-to-check-memory-allocation-failures-with-new-operator">memory allocation can fail</a>.</p>
<hr>
<h3>Use <code>nullptr</code></h3>
<p>Use <code>nullptr</code> instead of <code>NULL</code> or <code>0</code>. There's <a href="https://stackoverflow.com/questions/20509734/null-vs-nullptr-why-was-it-replaced">a lot of reasons</a> (and follow inside's links)
Also, don't be redundant in your conditions: As explained in the <a href="http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines.html#es87-dont-add-redundant--or--to-conditions" rel="nofollow noreferrer">Core Guideline</a>, comparing a pointer to <code>nullptr</code> (or even worst, to <code>NULL</code> or <code>0</code>) in a condition, not only is useless, but it's also much more verbose.</p>
<hr>
<h3>Avoid <code>using namespace std;</code></h3>
<p>Putting <code>using namespace std</code> at the top of every program is a <a href="https://stackoverflow.com/a/1453605/5416291">bad practice</a> that can cause a lot of problems that are easy to avoid, most people are used to the prefix, and three letters aren't that hard to type.</p>
<ul>
<li><p>Although it's "safe" to use it in some place (e.g. implementation files), as long as you aren't familiar with the features of c ++, <a href="https://isocpp.org/wiki/faq/coding-standards#using-namespace-std" rel="nofollow noreferrer">try to avoid it</a>.</p>
</li>
<li><p>It led to a world of name collisions. (best case)</p>
</li>
<li><p>It's source of silent errors and weird bugs. (worst case)</p>
</li>
<li><p>If typing <code>std::</code> is so tedious for you, try to import only truncated namespaces. ( e.g. <code>using namespace std::string;</code>).</p>
</li>
<li><p>If importing nested namespaces still too awful for you, try to do it <a href="https://en.cppreference.com/w/cpp/language/namespace#Using-declarations" rel="nofollow noreferrer">inside a restricted scope</a> (e.g. a functions) and not in global scope.</p>
</li>
</ul>
<hr>
<h3><strong>Don't use <code>std::endl</code></strong></h3>
<p>Using <code>std::endl</code> send a <code>'\n'</code> and then flushes the output buffer. So <code>std::endl</code> is more expensive in performance. Instead, use <code>'\n'</code> and then, if you want to manually flush the stream, explicitly call <a href="https://en.cppreference.com/w/cpp/io/manip/flush" rel="nofollow noreferrer"><code>std::flush</code></a>.</p>
<hr>
<h3>Constructors/destructor</h3>
<ul>
<li>Prefer <a href="https://arne-mertz.de/2015/08/new-c-features-default-initializers-for-member-variables/" rel="nofollow noreferrer">member initialization list</a> for <code>value</code>.</li>
<li>Prefer [in-class initialization] for <code>next</code>.</li>
<li>Provide a constructor with only one parameter  and another with explicitly two parameters (without defaulted  <code>next</code>).</li>
<li>Respect  <a href="https://en.cppreference.com/w/cpp/language/rule_of_three" rel="nofollow noreferrer">rules of 3/5/0</a></li>
</ul>
<hr>
<h3>Avoid <code>system (... )</code></h3>
<p>You should <a href="https://stackoverflow.com/questions/1107705/systempause-why-is-it-wrong">avoid using <code>system('pause')</code></a> and <a href="http://www.cplusplus.com/forum/articles/11153/" rel="nofollow noreferrer">all it family</a>.</p>
<ul>
<li>It's non-portable</li>
<li>It's slow</li>
<li>It's dangerous</li>
</ul>
<hr>
<h3>Interface</h3>
<ul>
<li>Don't put the <code>Print</code> method inside of the class. Instead split it into two function a <code>to_string</code> to transform your list to a string and a overload to <code>operator &lt;&lt;</code> to output the string representation of your list (via <code>to_string</code>).</li>
<li>Where did you <code>Add</code> value? At the beginning or at the end? We know because we see the code, but user of your class don't. The interface is unclear, should be <code>push_front</code> or <code>push_back</code></li>
<li>Look at the C++ Standard implementation of singly linked list (<a href="https://en.cppreference.com/w/cpp/container/forward_list" rel="nofollow noreferrer">std::forward_list</a>) and doubly linked list (<a href="https://en.cppreference.com/w/cpp/container/list" rel="nofollow noreferrer">std::list</a>), and try to implement iterators related functions, useful for a lot of things.</li>
</ul>
<hr>
<h3>Sorting</h3>
<ul>
<li>Move sort method as free function</li>
<li>Add an optional comparator parameter</li>
<li>Rethink your sorting algorithm, it's not the optimal way. You can do it in less operations (think about "comparator" and iterator).</li>
<li>Don't reinvent the wheel, use swap.</li>
</ul>
<hr>
<h3>Misc</h3>
<p>Also, don't use long commentary lines, it don't help improving readability</p>
    </div>