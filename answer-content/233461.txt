<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is a supplement to the excellent <a href="/a/233455/75307">answer by Edward</a>.</p>
<h1>Care with namespaces</h1>
<p>Currently, the header has</p>
<blockquote>
<pre><code>using std::uint16_t;
using std::uint8_t;
</code></pre>
</blockquote>
<p>I recommend not bringing these into the global namespace in a header - that affects every translation unit that uses the header, which can be a nuisance in larger programs (particularly when not all written by the same author).  Instead, if you really feel that <code>std::</code> is too much to type and to read, bring them into a smaller scope (e.g. within a function, or at worst into global scope in individual, non-header, files).</p>
<p>There are a few uses of unqualified names from the <code>std</code> namespace - these should be portably written <code>std::size_t</code>, <code>std::memcpy</code>, etc.  You've probably only compiled on systems that use their freedom to put copies of Standard Library identifiers into the global namespace, but that's not required, and you can't depend on it.</p>
<h1>Includes</h1>
<p>I recommend re-ordering these includes:</p>
<blockquote>
<pre><code>#include &lt;cerrno&gt;
#include &lt;limits&gt;
#include &lt;cstdlib&gt;
#include &lt;cstring&gt;
#include &lt;fstream&gt;
#include &lt;iostream&gt;
#include &lt;exception&gt;
#include "z80emu.hpp"
</code></pre>
</blockquote>
<p>If we put our own includes before the standard library headers, we stand a better chance of identifying accidental dependencies:</p>
<pre><code>#include "z80emu.hpp"

#include &lt;cerrno&gt;
#include &lt;cstdlib&gt;
#include &lt;cstring&gt;
#include &lt;exception&gt;
#include &lt;fstream&gt;
#include &lt;iostream&gt;
#include &lt;limits&gt;
</code></pre>
<p>I'm pretty sure we don't use <code>&lt;limits&gt;</code>, and really ought to have <code>&lt;cstdint&gt;</code> instead (for <code>UINT16_MAX</code> and the like).</p>
<h1>Error reporting</h1>
<p>Most error messages are correctly sent to <code>std::cerr</code>.  But when we call <code>usage()</code> to indicate invocation errors, that's sent to <code>std::cout</code>.  We should pass the stream to this function, too, so we can make it print to the error stream when it's shown as an error (rather than specifically requested, when we add support for <code>--help</code> argument).</p>
<pre><code>static void usage(std::ostream&amp; os, const char *progname)
{
    os &lt;&lt; "  Usage: " &lt;&lt; progname &lt;&lt; " z80-prog\n";
}
</code></pre>
<p>I also recommend static linkage here, as this function shouldn't need to be accessible from other translation units.</p>
    </div>