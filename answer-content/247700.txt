<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Warning: this is pretty opinionated I just didn't want to sprinkle the word "maybe" halfway through an explanation</p>
<p>There's a lot of things going on here. I see you use a lot of type hints. I'd recommend using TypeScript, as it enforces the hints such that they become rules rather than suggestions. In general, though, the code appears to have a lot of noisy comments. The worst offender is right here.</p>
<pre><code>/**
 * Returns true, if str only contains ascii-chars.
 * @param {String} str String the function will be applied on
 * @return {Boolean} test True if str only contains ascii-chars
 */
function isASCII(str) {
  /*
   * returns true if str only contains (non-extended) ascii-chars;
   * see https://www.ascii-code.com/ for reference
   */
  const test = /^[\x00-\x7F]*$/.test(str);
  return test;
}
</code></pre>
<p>The code here is pretty much self explanatory from the method name. Adding the block style comments makes this section appear more complex than it actually is.</p>
<pre><code>let input; // The text the user wants to compress
let occurences; // Array that contains the number of occurences of every char
let forest; // Array that contains the nodes for every char
let code; // Array that contains the code-words for every char
let text; // Compressed text
let codeWords; // Array code as user-friendly string
let ascii; // ASCII-text
</code></pre>
<p>That's a lot of global state to be hanging to for a function that requires no persistence. None of these variables need to live in the global scope.</p>
<p>The code is littered with references to the DOM and your output statistics. Only the encoded output and the huffman encoding dictionary are required for the analysis, so generate the DOM elements elsewhere.</p>
<p>With the global state and the DOM references removed, the main <code>huffman()</code> function can be written as such.</p>
<pre><code>function huffman(input) {
    if (input === '' || !isASCII(input))
        throw 'invalid_input';
    const histogram = createHistogram(input);
    const leafs = createLeafs(histogram);
    const tree = createTree(leafs);
    const code = createCode('',tree);
    const encoded = encode(code,input);
    return {
      output:encoded,
      code
    };
}
</code></pre>
<p>Note how all of the variables are kept in the scope of the function.</p>
<p>The <code>Tree</code> structure is entirely unnecessary. Sometimes, adding an object like this can help readability. However, in this case, the code is infected with a bunch of <code>.root</code> properties. This is particularly strange in the case where the trees are being joined, and trees must be converted to nodes when they are added to another tree.</p>
<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>/*
 * Attribution:
 * https://stackoverflow.com/a/38362821/13634030
 * https://stackoverflow.com/a/14313213/13634030
 */

/*
 * This program is an implementation of the Huffman-algorithm.
 * Huffman-coding is an algorithm for lossless data compression. It was
 * first published by David A. Huffman in 1952.
 * The algorithm returns a binary code-word for every source symbol. Like
 * most encoding methods, the words for often used symbols are shorter than
 * the ones for not so commonly used symbols. The result is a optimal prefix-
 * free code.
 * For more information see https://en.wikipedia.org/wiki/Huffman_coding.
 */

const MAX_CODE = 128;

class Node {
  constructor(count, char, left, right) {
    this.count = count;
    this.char = char;
    this.left = left;
    this.right = right;
  }
}

function isASCII(str) {
  const test = /^[\x00-\x7F]*$/.test(str);
  return test;
}

function huffman(input) {
    if (input === '' || !isASCII(input))
        throw 'invalid_input';
    const histogram = createHistogram(input);
    const leafs = createLeafs(histogram);
    const tree = createTree(leafs);
    const code = createCode('',tree);
    const encoded = encode(code,input);
    return {
      output:encoded,
      code
    };
}

// builds histogram of letter frequency
function createHistogram(input) {
  const histogram = {};

  for (let i = 0; i &lt; input.length; i++) {
    const code = input.charCodeAt(i);
    ++histogram[code];
  }

  return histogram;
}

// creates the forest with one tree for every char
function createLeafs(histogram) {
  return Object.entries(histogram).map(([code,freq])=&gt;{
      const char = String.fromCharCode(code);
      return new Node(freq,char,null,null);
  })
}

// splits trees into small and big
function splitTrees(forest) {
  const sorted = forest.sort((a,b)=&gt;a.count-b.count);
  const small = sorted.slice(0,2);
  const big = sorted.slice(2);
  return [small,big];
}

function createTree(forest) {
  if (forest.length===1)
    return forest[0]
  const [small_trees,big_trees] = splitTrees(forest);
  const new_tree = new Node(
    small_trees[0].count+small_trees[1].count,
    null,
    small_trees[0],small_trees[1]
  );
  const new_trees = [...big_trees,new_tree];
  return createTree(new_trees);
}

// Creates the code-words from the created huffman-tree
function createCode(prefix, node) {
  // empty root node
  if (!node) return {};
  // leaf node
  if (!node.left &amp;&amp; !node.right) {
    return {[node.char] : prefix};
  }
  // recursive call
  return {
    ...createCode(prefix + '0', node.left),
    ...createCode(prefix + '1', node.right)
  }
}

function encode(code,string) {
    return Array.from(string).map(
        c=&gt;code[c]
    );
}

console.log(huffman("hi dude"));</code></pre>
</div>
</div>

    </div>