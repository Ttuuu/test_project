<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The unique data could be appended, using a Scripting Dictionary and arrays in less than a second.  Alternatively, you could use an ADO Query to append records from sheet1, not in sheet2.</p>

<p>The easiest method would be to add all the records to the second worksheet then record a macro that:</p>

<ul>
<li>Convert the range to a table</li>
<li>Select a cell in the range then click Ribbon &gt;  Table Tools &gt; Remove Duplicates</li>
</ul>

<p>All that is left to do is refactor the Macro to make the code dynamic.</p>

<p>Watch:
 - <a href="https://www.youtube.com//watch?v=h9FTX7TgkpM&amp;index=28&amp;list=PLNIs-AWhQzckr8Dgmgb3akx_gFMnpxTN5" rel="nofollow noreferrer">Excel VBA Introduction Part 25 - Arrays</a>
 - <a href="https://www.youtube.com//watch?v=dND4coLI_B8&amp;index=43&amp;list=PLNIs-AWhQzckr8Dgmgb3akx_gFMnpxTN5" rel="nofollow noreferrer">Excel VBA Introduction Part 39 - Dictionaries</a>
 - <a href="https://www.youtube.com//watch?v=-c2QvyPpkAM&amp;index=36&amp;list=PLNIs-AWhQzckr8Dgmgb3akx_gFMnpxTN5" rel="nofollow noreferrer">Excel VBA Introduction Part 32 - ADO (ActiveX Data Objects) SQL Statements (INSERT, UPDATE, DELETE)</a></p>

<hr>

<p>Here is how I would rewrite the OP's code using a Scripting Dictionary and arrays.</p>

<pre><code>Function UpdateNEW2() As Long
    Const Delimiter As String = "|"
    Dim dic As Object
    Set dic = CreateObject("Scripting.Dictionary")
    Dim newRows As Range
    Dim vSteps, key
    With Sheets("Steps")
        vSteps = .Range("A2:O2", .Cells(.Rows.Count, 2).End(xlUp)).Value
    End With

    Dim r As Long, c As Long, n As Long
    For r = 1 To UBound(vSteps)
        key = vSteps(r, 3) &amp; Delimiter &amp; vSteps(r, 4)
        Debug.Print key
        If Not dic.Exists(key) Then dic.Add key, 0
    Next

    Dim vInterface, results
    With Sheets("Interface")
        vInterface = .Range("A7:O7", .Cells(.Rows.Count, "C").End(xlUp)).Value
    End With

    ReDim results(1 To UBound(vInterface), 1 To 15)
    For r = 1 To UBound(vInterface)
        key = vInterface(r, 4) &amp; Delimiter &amp; vInterface(r, 5)
        Debug.Print key
        If Not dic.Exists(key) Then
            n = n + 1
            For c = 3 To 15
                results(n, c - 2) = vInterface(r, c)
            Next
        End If
    Next
    If n &gt; 0 Then
        With Sheets("Steps")
            With .Cells(.Rows.Count, 2).End(xlUp).Offset(1)
               .Resize(n, 15).Value = results
            End With
        End With
    End If
    UpdateNEW2 = n
End Function
</code></pre>

<p>(<a href="https://drive.google.com/open?id=1kVU1NobGBaVO2Jk3vucIcrMcecD-C-QU" rel="nofollow noreferrer">Sample Data</a>)</p>
    </div>