<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are 4 ways to a solve this:</p>

<h2>Solution 1:</h2>

<p>You can define a fixed width STD_LOGIC_VECTOR (SLV), which can be used to construct other vectors (let's call them STD_LOGIC_VECTOR_VECTORs (SLVV).</p>

<pre><code>subtype T_SLV_8  is STD_LOGIC_VECTOR(7 downto 0);        -- define a Byte
type    T_SLVV_8 is array(NATURAL range &lt;&gt;) of T_SLV_8;  -- define a new unconstrained vector of Bytes.
</code></pre>

<p>Now you can define your entity as follows:</p>

<pre><code>entity mux_slvv_8 is
  generic (
    PORTS  : POSITIVE  := 4
  );
  port (
    sel  : in  STD_LOGIC_VECTOR(log2ceilnz(PORTS) - 1 downto 0);
    X    : in  T_SLVV_8(PORTS - 1 downto 0);
    Y    : out T_SLV_8
  );
end;
</code></pre>

<p>The internal logic can be reduced to:</p>

<pre><code>architecture rtl of mux_slvv_8 is
begin
  Y &lt;= X(to_integer(unsigned(sel)));
end;
</code></pre>

<p>This can be improved by extracting <code>to_integer(unsigned(..))</code> into a function called to_index.</p>

<h2>Solution 2:</h2>

<p>The next step would be, to be also flexible in how many bits are multiplexed at once. So let's introduce a generic BITS to specify the data bits. VHDL has a problem to define array of unconstrained arrays (this is solved with VHDL-2008, but not all vendors support this feature).</p>

<p>So solution 2 uses a flat vector to pass all bits to the mux.</p>

<pre><code>entity mux_flat is
  generic (
    PORTS  : POSITIVE  := 4;
    BITS   : POSITIVE  := 8
  );
  port (
    sel  : in  STD_LOGIC_VECTOR(log2ceilnz(PORTS) - 1 downto 0);
    X    : in  STD_LOGIC_VECTOR((BITS * PORTS) - 1 downto 0);
    Y    : out STD_LOGIC_VECTOR(BITS - 1 downto 0)
  );
end;

architecture rtl of mux_flat is
  type T_SLVV is array(NATURAL range &lt;&gt;) of STD_LOGIC_VECTOR(BITS - 1 downto 0);
  signal mux_in : T_SLVV(PORTS - 1 downto 0)
begin
  gen : for i in 0 to PORTS - 1 generate
    -- convert flat vector to slvv
    mux_in(i) &lt;= X(((i + 1) * BITS) - 1 downto (i * BITS));
  end generate;
  Y &lt;= mux_in(to_integer(unsigned(sel)));
end;
</code></pre>

<h2>Solution 3:</h2>

<p>Being flexible in PORTS and BITS can also be done by using a real 2-dimensional array -&gt; STD_LOGIC_MATRIX (SLM).</p>

<pre><code>type T_SLM is array(NATURAL range &lt;&gt;, NATURAL range &lt;&gt;) of STD_LOGIC;
</code></pre>

<p>This would be the entity declaration:</p>

<pre><code>entity mux_slm is
  generic (
    PORTS  : POSITIVE  := 4;
    BITS   : POSITIVE  := 8
  );
  port (
    sel  : in  STD_LOGIC_VECTOR(log2ceilnz(PORTS) - 1 downto 0);
    X    : in  T_SLM(PORTS - 1 downto 0, BITS - 1 downto 0);
    Y    : out STD_LOGIC_VECTOR(BITS - 1 downto 0)
  );
end;
</code></pre>

<p>You could also write a generate loop to do some wiring or you can define some functions to do that.</p>

<pre><code>-- get a matrix row
function get_row(slm : T_SLM; RowIndex : NATURAL) return STD_LOGIC_VECTOR is
  variable slv : STD_LOGIC_VECTOR(slm'high(2) downto slm'low(2)); -- Xilinx iSIM work-around, because 'range(2) = 'range(1); tested with ISE/iSIM 14.2
begin
  for i in slv'range loop
    slv(i) := slm(RowIndex, i);
  end loop;
  return slv;
end function;
</code></pre>

<p>And thats the corresponding architecture:</p>

<pre><code>architecture rtl of mux_slm is
begin
  Y &lt;= get_Row(X, to_integer(unsigned(sel)));
end;
</code></pre>

<h2>Solution 4:</h2>

<p>If your tool supports VHDL-2008 and arrays of unconstrained vectors, then you can use this type:</p>

<pre><code>type T_SLVV is array(NATURAL range &lt;&gt;) of STD_LOGIC_VECTOR;
</code></pre>

<h2>Type Conversion:</h2>

<p>The following images illustrates all possible type conversions regarding: SL, SLV, SLVV and SLM.</p>

<p><img src="https://i.stack.imgur.com/3oDAc.png" alt="enter image description here"></p>

<p>If you are interested in more, I could upload my complete collection of vector, vector-vector and matrix types, functions and procedures. Please give me a hint.</p>

<h2>Edit:</h2>

<p>Here is the package <a href="https://code.google.com/p/picoblaze-library/source/browse/vhdl/lib_PoC/vectors.vhdl?name=release" rel="nofollow noreferrer">PoC.common.vectors</a>. It's included in my PicoBlaze Library which is currently in beta state. The release of PoC is also planned, but not so progressed. So I included some necessary packages and modules into this library. The source code license is 'Apache License 2.0'.</p>
    </div>