<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Loop like a native</h2>

<pre><code>    while n&gt;=0:
        n -=1
</code></pre>

<p>You don't actually use <code>n</code>, nor should you be manually decrementing it, so this can become</p>

<pre><code>for _ in range(n+1):
</code></pre>

<h2>Returns</h2>

<p>I'm not clear on why you have two <code>return</code>s. <code>return num</code> will take effect on the last iteration of the loop, so how would the other return happen at all? Probably you should remove the <code>if n == 0</code> condition and rework the place where <code>heappop</code> is called so that the <code>for _ in range</code> can completely control the loop.</p>

<h2>Set operations</h2>

<p>Try this out to see what performance impact it has:</p>

<p>Rather than </p>

<pre><code>        for p in primes:
            if num * p not in seen:
                seen.add(num*p)
                heapq.heappush(heap, num*p)
</code></pre>

<p>try</p>

<pre><code>to_add = {num*p for p in primes} - seen
seen |= to_add
for a in to_add:
    heapq.heappush(heap, a)
</code></pre>
    </div>