<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm not going to address what else you <em>could</em> test, since it really depends what you're expecting your <code>Polynomial</code> class to do.  However, looking at your test, there's several things that could be improved.</p>
<h1>Test One Thing</h1>
<p>Having all of your assertions in the same test means that the test can fail for multiple different reasons, some of which are unrelated.  Consider modifying your tests so that they contain the complete AAA for what they are testing.  This makes it much clearer what the relationship between the data setup in the Arrange phase is, to the Assertions made.</p>
<p>As an example, your code current does this:</p>
<blockquote>
<pre><code>int [] c1 = {0, 0, 0, 1};
Polynomial p1 = new Polynomial(c1);
c1[2] = 1;
assertEquals("Degree error", 3, p1.getDegree());
assertEquals("Polynomial must compute coefficients out of range", 0, p1.getCoefficient(-1)); 
assertEquals("Polynomial must compute coefficients out of range", 0, p1.getCoefficient(4));
assertEquals("Array is not immutable", 0, p1.getCoefficient(2));
</code></pre>
</blockquote>
<p>There's three unrelated assertions between the point where you modify your array (<code>c1[2] = 1</code>) and the assertion that it impacts 'Array it not immutable'.  This make far less obvious what the 'c1[2] = 1' is doing there.</p>
<p>Having multiple tests, where each one tests only a single thing also means that you don't need to put a message in each of your <code>assertEquals</code> calls.  The test name itself tells you what you're testing.</p>
<h1>Duplicate tests</h1>
<p>Sometimes you want to test the same thing in different scenarios.  Other times, it doesn't make as much sense.  I'm pretty sure that if the array is immutable for <code>c1</code>, it will also be immutable for <code>c2</code>, testing it again doesn't seem like it's really adding value.  If you do want to test the same thing, with different values, consider using parameterised tests.  Something like this:</p>
<pre><code>@ParameterizedTest
@MethodSource("coefficients_outOfRangeCoefficient")
void getCoefficient_outOfRange_computesZero(int[] coefficients, int outOfRangeCoefficient) {
    Polynomial polynomial = new Polynomial(coefficients);
    assertEquals(0, polynomial.getCoefficient(outOfRangeCoefficient));
}

static Stream&lt;Arguments&gt; coefficients_outOfRangeCoefficient() {
    return Stream.of(
            arguments(new int[] {0,0,0,1}, -1),
            arguments(new int[] {0,0,0,1}, -4),
            arguments(new int[] {-1,0,0,0}, -1),
            arguments(new int[] {-1,0,0,0}, 4)
    );
}
</code></pre>
<p>Would allow the same test to be used across four different combinations of coefficients and get indexes.</p>
    </div>