<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I use the same idea that you had: pop elements on the left and append them on the right. However, instead of recursion, I took all the elements I needed to pop at once, by taking <code>n % len(l)</code> (because the result of shifting a list of 5 elements 7 times is the same as the result of shifting it 2 times). This approach is simpler and uses less space than your recursive approach. </p>

<p>To mutate the original list, I used the <code>extend</code> method, which is useful if you wanted to extend list with elements from another list instead of appending them one by one.</p>

<pre><code>def shift_left(l, n):
    """ 
    In place shift n elements of list l to the left. 
    Won't work on strings.
    """  
    n = n % len(l)
    head = l[:n]
    l[:n] = []
    l.extend(head)
    return l
</code></pre>

<p>Some unit tests, for sanity's sake:</p>

<pre><code>import unittest
from random import randrange

class TestShiftLeft(unittest.TestCase):
    def test_zero_shifts(self):
        self.assertEqual([1], shift_left([1], 0))
        self.assertEqual([1, 2], shift_left([1, 2], 0))

    def test_single_element(self):
        self.assertEqual([1], shift_left([1], 1))
        self.assertEqual([1], shift_left([1], 2))
        self.assertEqual([1], shift_left([1], 3))

    def test_two_elements(self):
        self.assertEqual([2, 1], shift_left([1, 2], 1))
        self.assertEqual([1, 2], shift_left([1, 2], 2))
        self.assertEqual([2, 1], shift_left([1, 2], 3))
        self.assertEqual([1, 2], shift_left([1, 2], 4))

    def test_odd_number_elements(self):
        self.assertEqual([2, 3, 1], shift_left([1, 2, 3], 1))
        self.assertEqual([3, 1, 2], shift_left([1, 2, 3], 2))
        self.assertEqual([1, 2, 3], shift_left([1, 2, 3], 3))
        self.assertEqual([2, 3, 1], shift_left([1, 2, 3], 4))

    def test_even_number_elements(self):
        self.assertEqual([2, 3, 4, 1], shift_left([1, 2, 3, 4], 1))
        self.assertEqual([3, 4, 1, 2], shift_left([1, 2, 3, 4], 2))
        self.assertEqual([4, 1, 2, 3], shift_left([1, 2, 3, 4], 3))
        self.assertEqual([1, 2, 3, 4], shift_left([1, 2, 3, 4], 4))
        self.assertEqual([2, 3, 4, 1], shift_left([1, 2, 3, 4], 5))

    def test_len_l_shift(self):
        l = list(range(randrange(1000)))
        self.assertEqual(l, shift_left(l, len(l)))

if __name__ == '__main__':
    unittest.main()
</code></pre>
    </div>