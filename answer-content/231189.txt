<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I honestly think you should be breaking up the treatment of the file into two parts, as you are already (implicitly) doing so in your function. One part to read the file into a line iterator, another to actually parse.</p>

<p>The "reading into an iterator" is a simple combination of <code>std::fs::File::read_line</code>; I'll instead focus on the other part:</p>

<pre><code>pub fn read_xy_pairs(i: impl Iterator&lt;Item = String&gt;) -&gt; (Vec&lt;f32&gt;, Vec&lt;f32&gt;) {
    i
        .map(|string| -&gt; Vec&lt;f32&gt; {
            string.split(" ")
                .take(2)
                .map(|element| element.parse::&lt;f32&gt;())
                .filter(|element| element.is_ok())
                .map(|element| element.unwrap())
                .collect()
        })
        .filter(|item| item.len() == 2)
        .map(|mut item| (item.swap_remove(0), item.swap_remove(0)))
        .unzip()
}
</code></pre>

<p>The processing is clearly laid out, in order:</p>

<ol>
<li>I convert each element of the iterator, in turn, into an iterator of <code>&amp;str</code> via <code>String::split()</code></li>
<li>I then truncate this iterator to only take the first two elements lazily</li>
<li>Each element of this iterator gets <code>parsed()</code> and I filter any element that isn't okay, unwrapping those that are</li>
<li>This iterator gets collected into a <code>Vec&lt;f32&gt;</code></li>
<li>From there, I filter out any element that does not have <strong>exactly</strong> 2 components, and convert those that do into a tuple2 of (f32, f32)</li>
<li>I then <code>unzip</code> this iterator of <code>(f32, f32)</code> into a <code>(Vec&lt;f32&gt;, Vec&lt;f32&gt;)</code> to fit your type signature</li>
</ol>
    </div>