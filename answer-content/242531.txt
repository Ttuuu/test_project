<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As others have said, don't use floating point math, but in some sense that's reviewing the wrong layer. The real issue behind that is that you don't need to be branching on a <em>derived quantity</em>, the number of bits. Instead branch on the codepoint value ranges (original input). For example (excerpt from <a href="https://git.musl-libc.org/cgit/musl/tree/src/multibyte/wcrtomb.c?id=v1.2.0" rel="noreferrer">my implementation</a>):</p>

<pre><code>} else if ((unsigned)wc &lt; 0x800) {
    *s++ = 0xc0 | (wc&gt;&gt;6);
    *s = 0x80 | (wc&amp;0x3f);
    return 2;
}
</code></pre>

<p>Not only is branching directly on the input quantity simpler than computing a derived quantity like number of bits; for the problem at hand (UTF-8) it's necessary in order to do proper error handling. Boundaries that are not exact numbers of bits (between D800 and DFFF, above 10FFFF) correspond erroneous inputs that should not be output as malformed UTF-8 but rejected in some manner.</p>
    </div>