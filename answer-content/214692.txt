<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>The Switch</h1>

<blockquote>
  <pre class="lang-java prettyprint-override"><code>private BigDecimal applyOp(Operation op, BigDecimal a, BigDecimal b) {
    switch (op) {
      case NONE:
        assert false;
        break;
      case ADD:
        return a.add(b, ARITH_ROUND);
      case SUB:
        return a.subtract(b, ARITH_ROUND);
      case MUL:
        return a.multiply(b, ARITH_ROUND);
      case DIV:
        return a.divide(b, ARITH_ROUND);
      case EQUALS:
        return a;
    }
    return null;
}
</code></pre>
</blockquote>

<h2>The Default Section</h2>

<p>The statement <code>return null</code> can be replaced by a <code>default</code>-section. From <a href="https://docs.oracle.com/javase/tutorial/java/nutsandbolts/switch.html" rel="noreferrer">oracles <code>switch</code> tutorial</a> </p>

<blockquote>
  <p>The default section handles all values that are not explicitly handled by one of the case sections</p>
</blockquote>

<pre class="lang-java prettyprint-override"><code>private BigDecimal applyOp(Operation op, BigDecimal a, BigDecimal b) {
    switch (op) {
        // ..
        case EQUALS:
            return a;
        default: 
            return null;
    }
}
</code></pre>

<h2>Polymorphism</h2>

<p>Currently the switch tries to express: "<em>Let's have a look, what the concrete type of <code>op</code> is and <strong>let me</strong> execute the correct logic for it</em>"</p>

<p>This can be rewritten to: "Let <code>op</code> execute the correct logic."</p>

<pre class="lang-java prettyprint-override"><code>private BigDecimal applyOp(Operation op, BigDecimal a, BigDecimal b) {
    return op.calculate(a, b);
}
</code></pre>

<p>For that we need to change the enum <code>Operation</code>. But before we change it, you need to know from <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/enum.html" rel="noreferrer">Oracles Enum Tutorial</a></p>

<blockquote>
  <p>Java programming language enum types are much more powerful than their counterparts in other languages. The enum declaration defines a class (called an enum type). The enum class body can include methods and other fields. The compiler automatically adds some special methods when it creates an enum. [...]</p>
</blockquote>

<pre class="lang-java prettyprint-override"><code>public enum Operation {
  NONE((a, b) -&gt; null),
  ADD((a, b) -&gt; a.add(b, ARITH_ROUND)), 
  // ...
  EQUALS((a, b) -&gt; a);

  BiFunction&lt;BigDecimal, BigDecimal, BigDecimal&gt; calculation;

  Operation(BiFunction&lt;BigDecimal, BigDecimal, BigDecimal&gt; calculation) {
    this.calculation = calculation;
  }

  BigDecimal calculate(BigDecimal a, BigDecimal b) {
    return calculation.apply(a, b);
  }
}
</code></pre>
    </div>