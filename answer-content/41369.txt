<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I don't have much to say.</p>
<p>Your implementation is similar to the GoF's (<a href="https://web.archive.org/web/20151002171119/http://codewrangler.home.comcast.net/%7Ecodewrangler/tech_info/patterns_code.html#State" rel="nofollow noreferrer">posted here</a>) except that your machine instance is passed by reference to the states' constructors, instead of being passed-in to the states' state-transition methods.</p>
<ul>
<li>Advantage: cleaner syntax of the state-transition method</li>
<li>Disadvantage: state instances can't be flyweights</li>
</ul>
<p>I wonder whether the following would allow a similarly-clean syntax but allow states to be flyweights:</p>
<pre><code>class LevelState {
public:
    virtual LevelState* liftUp() = 0;
    virtual LevelState* bringDown() = 0;
};

class HighLevelState : public LevelState {
public:
    LevelState* liftUp() { print("already High"); return this; }
    LevelState* bringDown() { print("leaving High"); return LowLevelState::enter(); }
    static LevelState* enter() { print("entering High"); return &amp;singleton; }
private:
    static HighLevelState singleton;
};

class Machine
{
public:
    Machine() { levelState = LowLevelState::enter(); }
    ~Machine() {}
   void liftUp() { levelState = levelState-&gt;liftUp(); }
   void bringDown() { levelState = levelState-&gt;bringDown(); }

private:
   LevelState* levelState;
};
</code></pre>
<p>This has some of the same advantages as your scheme (clean state methods) but also allows singleton/flyweight states.</p>
<p>Heap operations can be relatively expensive; and I imagine that some state machines (<a href="http://www.goldparser.org/doc/templates/tag-dfa-table.htm" rel="nofollow noreferrer">for example, the tokenizer of a parser</a>) might want to be as fast as possible.</p>
<p>IMO a benefit of your scheme is when the state instances should carry state-specific data. For example, perhaps the TCPEstablished state has <a href="http://en.wikipedia.org/wiki/Transmission_Control_Protocol#TCP_segment_structure" rel="nofollow noreferrer">associated data</a> which needs to be stored somewhere. If the state is a flyweight then that data must be stored in the machine; but maybe the machine has many states, each with state-specific data, and it's not appropriate for the machine to contain data for the states which it's not in at the moment: in that case you may want state-specific data for the machine in the state instance =&gt; state is not a flyweight.</p>
    </div>