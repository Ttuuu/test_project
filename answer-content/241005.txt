<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The crux of the problem is that how many different characters (including their count) both sliced strings have, gives the operations need to be done from sice1 string to slice 2 for anagram creation. </p>

<p>For example the string 1 'abb' against string 2 'bbc'. For string 2 to be anagram of string 1, it needs 'a' character with frequency 1. Because condition of b's frequency 2 is already met.</p>

<p>We will create hashes of frequencies for both strings and if frequency goes to 0 or less then 0 between two hashes, it means string 1 can create anagram string 2 with it's characters successfully without operation for that character.
if frequency is more then 0, that is an operation need to be done on string 2 to make it anagram of string 1 for that character.</p>

<p>At the end we sum all operations against each character and return.</p>

<pre><code>function countAnagramOperations(s) {
    if (s.length % 2 != 0) return -1;
    const midIndex = s.length / 2;
    const s1 = s.substring(0, midIndex).split('');
    const s2 = s.substring(midIndex, s.length).split('');
    const m1 = {}; // here count the frequency of each character
    const m2 = {}; 
    s1.forEach(c =&gt; {
        m1[c] = m1[c] ? m1[c] + 1 : 1; // make frequencies map
    });
    s2.forEach(c =&gt; {
        m2[c] = m2[c] ? m2[c] + 1 : 1;
    });
    Object.keys(m1).forEach(key =&gt; {
        // find how many characters are different in both hashes,
        if (m2[key]) {
            m1[key] = m1[key] - m2[key]; 
            if (m1[key] &lt;= 0) {
                delete m1[key];
            }
        }
    });
    // return total sum of operations against each character
    return Object.values(m1).reduce((a, b) =&gt; a + b, 0);
}

console.log(countAnagramOperations('abccde')); // 2
console.log(countAnagramOperations('ab')); // 1
console.log(countAnagramOperations('abbbbc')); // 1
</code></pre>
    </div>