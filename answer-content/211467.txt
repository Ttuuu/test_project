<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Both the original and your revision have the same problem.  They reset <code>sum</code>/<code>res</code> to zero on every iteration and then recalculate it.  To avoid this, store the sums in an array.  </p>

<pre><code>int[] sums = new int[a.length + 1];
sums[0] = 0;
for (int i = 0; i &lt; a.length; i++) {
    sums[i + 1] = sums[i] + a[i];
}
</code></pre>

<p>This takes <span class="math-container">\$\mathcal{O}(n)\$</span> time to calculate.  </p>

<p>For any <code>i</code>, <code>sums[i]</code> is the sum of the first <code>i</code> elements of the array.  </p>

<p>Since we know that all values are positive, adding a value always increases the sum.  And removing a value decreases it.  So how do we use that?  Consider </p>

<pre><code>int left = 0;
int right = 0;
while (right &lt; sums.length) {
    int sum = sums[right] - sums[left];
    if (sum == target) {
        return true;
    }

    if (sum &gt; target) {
        // if the sum is too big, reduce it by dropping a value from it
        left++;
    } else {
        // if the sum is too small, increase it by adding a value to it
        right++;
    }
}
</code></pre>

<p>I changed the name of <code>num</code> to <code>target</code> as being more descriptive of what it represents.  </p>

<p>This uses the sums stored in our array to calculate the sum from <code>left + 1</code> to <code>right</code> in the original array.  </p>

<p>On each iteration of the loop, we either return or increment one of the indexes.  The worst case is where the sum of the elements before the last is too small but the last element itself is equal to or larger than the target.  In that case, we increment <code>right</code> <code>sums.length</code> times and we increment <code>left</code> <code>sums.length</code> times.  That's <span class="math-container">\$2n + 2\$</span> total, which is <span class="math-container">\$\mathcal{O}(n)\$</span>.  </p>

<hr>

<p>This takes <span class="math-container">\$\mathcal{O}(n)\$</span> space as well.  If you need constant space, you can skip the first part and track the sum as an integer.  See <a href="https://codereview.stackexchange.com/a/211465/71574">here</a>.  </p>

<p>If you can't see the deleted answer from <a href="https://codereview.stackexchange.com/users/125850/mtj">mtj</a>, it basically says to do something like </p>

<pre><code>int left = 0;
int right = 0;
int sum = 0;
while (right &lt; a.length) {
    if (sum &gt; target) {
        // if the sum is too big, reduce it by dropping a value from it
        sum -= a[left];
        left++;
    } else {
        // if the sum is too small, increase it by adding a value to it
        sum += a[right];
        right++;
    }

    if (sum == target) {
        return true;
    }
}

return false;
</code></pre>

<p>Assumes that <code>target</code> and all the values in <code>a</code> are positive.  </p>

<p>You can see a solution to a similar problem <a href="https://codereview.stackexchange.com/a/52139/71574">here</a> as well.  </p>
    </div>