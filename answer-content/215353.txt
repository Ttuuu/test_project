<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code's division into functions isn't very natural. The objective is to have each function performing one specific task, which should also be as orthogonal as possible to the tasks performed by the other functions. For instance, your <code>disassemble</code> function performs three different functions: it reads from the instruction stream, it interprets assembly code and returns the number of bytes that should be skipped to get to the next instruction. That's a not-so-coherent mix of responsibilities.</p>

<p>There's also a bug in your code, because <code>it+=disassemble(it);</code> could point beyond <code>char_vect.end()</code> which is in itself undefined behavior, even if you don't dereference the iterator.</p>

<p>I would build my disassembler around an iterator, or better even a range (if you don't mind external libraries or anticipating the next standard):</p>

<pre><code>#include &lt;algorithm&gt;
#include &lt;vector&gt;
#include &lt;iostream&gt;
#include &lt;range/v3/view.hpp&gt;

using iterator = std::vector&lt;char&gt;::const_iterator;
struct truncated_instruction {};

// one function to interpret the instruction
void interpret(char instruction) { 
     if (instruction == 'x' throw bad_instruction();
     std::cout &lt;&lt; (int) instruction &lt;&lt; ' ';
}

// one function to get the number of bytes to skip
int nb_bytes(char c) { return 1; } 

class disassembled
  : public ranges::view_facade&lt;disassembled&gt;
{
    friend ranges::range_access;
    iterator first, last;
    char const &amp; read() const { return *first; }
    bool equal(ranges::default_sentinel) const { return first == last; }
    void next() { 
    // one function to get to the next instruction
        auto bytes_to_skip = nb_bytes(*first); 
        if (std::distance(first, last) &lt; bytes_to_skip) throw truncated_instruction();
        // check if there's enough space left to advance before advancing
        std::advance(first, bytes_to_skip);
    }
public:
    disassembled() = default;
    explicit disassembled(const std::vector&lt;char&gt;&amp; v) : first(v.begin()), last(v.end()) {}
};

int main() {
    std::vector&lt;char&gt; char_vect = {0x76, 0x10, 0x20, 0x30};
    try {
        for (auto instruction : disassembled(char_vect)) interpret(instruction);
    }
    catch // ...
}
</code></pre>
    </div>