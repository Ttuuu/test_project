<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You are given:</p>

<ul>
<li>all the numbers are in the range 1 .. n</li>
<li>there are exactly 2 repeated numbers</li>
</ul>

<p>You aren’t using either of these facts in your solution.  </p>

<p>For the second, you could break out of the loop after printing the second number.  This, by itself, might speed up the code enough to avoid the time limit. </p>

<p>But the true speed up comes from the first fact.  </p>

<p>You can initialize a <code>count</code> array of n zeros.  Each time you see a number, increment the count at that index.  If you increase the count to 2, emit the  number. </p>

<p>This avoids the <code>l.count(i)</code> function needing to loop through every element of the array.  Done n times, this becomes an O(n²) operation.  Maintaining a <code>count</code> array is O(n). </p>

<hr>

<p>Note: due to 1-based numbers in challenge &amp; 0-based lists in python, you’ll want to use a <code>count</code> array of n+1 zeros. </p>

<hr>

<pre><code>[ int(x) for x in input().split() ]
</code></pre>

<p>This line can take up a lot of time, and a lot of memory.  Consider n=10000.  The input will be split into a list of 10002 strings.  Each of those strings is then converted to an integer, and stored in another list.  Then the processing of the real algorithm begins.</p>

<p>But what if the duplicate are found near the start of the list?  Have we created 9000 strings, and converted 9000 strings to integers for nothing?</p>

<p>We can use <code>re.finditer(r"\d+", line)</code> to split the input <code>line</code> into strings, with an important difference.  The value returned is a "generator"; it only does enough work to return the first value, and then stops until the next value is requested.  We can take each returned string, and convert it to an integer ... when requested.</p>

<pre><code>numbers = (int(term.group(0)) for term in re.finditer(r"\d+", line))
</code></pre>

<p>Again, this is a generator expression.  It has done no work as of yet.  The first matching characters have not been found.</p>

<p>We can create a <code>find_repeats(n, numbers)</code> function that takes in a list of numbers, and returns a generator for any repeated numbers it finds.</p>

<pre><code>def find_repeats(n, numbers):
  count = bytearray(n+1)   # was: count = [0] * (n+1)

  for number in numbers:
    count[number] += 1
    if count[number] == 2:
      yield number
</code></pre>

<p>The function doesn't care if we pass it a list of numbers, or an iterable object, or a generator.  It will fetch <code>number</code>, one at a time, increment a <code>count</code>, and if it finds the <code>count</code> increase to 2, it will pause the function and return the <code>number</code>.  If we've given the function a generator as input, we now have 2 chained, paused generators.</p>

<p>Since we are only looking for 2 duplicate pairs, lets link one more generator into our chain:</p>

<pre><code>repeats = itertools.islice(find_repeats(n, numbers), 2)
</code></pre>

<p><code>islice</code> returns a slice of the sequence.  In this case, we are asking for only the first two values of the sequence.</p>

<p>Again, we still haven't done any work.  The first character of <code>line</code> has not been examined.  It won't be until we asked for any values from the <code>repeats</code> generator expression.  Let's asked for them all.</p>

<pre><code>print(*repeats)
</code></pre>

<p>This starts our repeat generator engine in motion.  The regex finds the first "word" of digits, it gets converted to an <code>int</code>, and gets counted into the <code>count</code> array.  Then the regex finds the next word, it gets converted to an <code>int</code>, and counted.  When the first count is incremented to 2, the value is yielded to the <code>islice</code> generator (which maintains its own internal count of values), and passes it on to be accumulated into the print statement arguments.  Then the regex finds the next word, which gets converted to an <code>int</code> and counted, and so on.  Eventually, the second count of 2 is reached, and that value is yield to the <code>islice</code> generator, which also passes it on into the print statement arguments.  Then the <code>islice</code> generator says "enough, I've emitted my two values", and stops.  The print statement prints out the two values.  The generators are discarded, before completing any addition (and unnecessary) work.</p>

<p>Example:</p>

<pre><code>n = 15
line = "1 2 3 4 5 6 10 9 8 7 6 10 11 12 13 14 15"
numbers = (int(term.group(0)) for term in re.finditer(r"\d+", line))

repeats = itertools.islice(find_repeats(n, numbers), 2)
print(*repeats)
</code></pre>

<p>When this prints "6 10", <code>finditer</code> has not processed "11 12 13 14 15" into words, nor have they been converted to integers, nor have they been counted.  You can add a <code>print</code> statement into the <code>find_repeats</code> method to verify this.  The numbers that were counted were never converted into the list of numbers [1, 2, 3, 4, 5, 6, 10, 9, 8, 7, 6, 10] either, because that too was unnecessary; the generators simply created and emitted the values one at a time -- no list was necessary.</p>
    </div>