<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I have some suggestions for your code.</p>

<p>1) Since we know the size of the output, I suggest that you initialize the <code>java.util.HashMap</code> with the size + 1, since the default capacity of a <code>Map</code> is 16; this will prevent the map to do a rehashing if you have more than 16 values.</p>

<p>If you want more information about the rehashing / load factor, you can read the <code>java.util.HashMap</code> <a href="https://docs.oracle.com/en/java/javase/13/docs/api/java.base/java/util/HashMap.html" rel="nofollow noreferrer">javadoc</a>.</p>

<pre class="lang-java prettyprint-override"><code>//[...]
int queryLength = queries.length;
Map&lt;String, Integer&gt; counter = new HashMap&lt;&gt;(queryLength + 1);
//[...]
</code></pre>

<p>2) I suggest that you create a method to create a <code>Map</code> containing the count of the similar string; instead of building it in the method.</p>

<pre class="lang-java prettyprint-override"><code>
static int[] matchingStrings(String[] strings, String[] queries) {
    int queryLength = queries.length;
    Map&lt;String, Integer&gt; counter = getSimilarStringCountMap(strings, queryLength);
    //[...]
}


private static Map&lt;String, Integer&gt; getSimilarStringCountMap(String[] strings, int queryLength) {
    Map&lt;String, Integer&gt; counter = new HashMap&lt;&gt;(queryLength + 1);

    for (String current : strings) {
        counter.put(current, counter.getOrDefault(current, 0) + 1);
    }
    return counter;
}
</code></pre>

<p><strong>Refactored code</strong></p>

<pre class="lang-java prettyprint-override"><code>    public static void main(String[] args) {
        String[] strings = {"ab", "ab", "bc"};
        String[] queries = {"ab", "abc", "bc"};

        System.out.println(Arrays.toString(matchingStrings(strings, queries)));
    }

    static int[] matchingStrings(String[] strings, String[] queries) {
        int queryLength = queries.length;

        Map&lt;String, Integer&gt; counter = getSimilarStringCountMap(strings, queryLength);

        int[] result = new int[queryLength];
        for (int i = 0; i &lt; queryLength; i++) {
            result[i] = counter.getOrDefault(queries[i], 0);
        }

        return result;
    }

    private static Map&lt;String, Integer&gt; getSimilarStringCountMap(String[] strings, int queryLength) {
        Map&lt;String, Integer&gt; counter = new HashMap&lt;&gt;(queryLength + 1);

        for (String current : strings) {
            counter.put(current, counter.getOrDefault(current, 0) + 1);
        }

        return counter;
    }
<span class="math-container">```</span>
</code></pre>
    </div>