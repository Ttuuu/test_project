<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><code>tmp</code> is never a good name for a variable.  In this case, you should call it <code>token</code> instead, or perhaps <code>word</code>.  And you rightly complain that building strings using repeated <code>+=</code> operations is inefficient, and correctly suggest that <code>.substring()</code> would be better.</p>

<p>Logically, then, you need to find the starting and ending indexes of each token!  So, let's define those helper functions (as <code><strong>private</strong> static</code> functions):</p>

<pre><code>/**
 * Considering str starting at startIndex, find the index at which the 
 * next token starts.
 *
 * @return The index of the start of a token (or str.length() if no more
 *         tokens).
 */
private static int start(String str, char sep, int startIndex) {
    int i;
    for (i = startIndex; i &lt; str.length() &amp;&amp; str.charAt(i) == sep; i++);
    return i;
}

/**
 * Considering str starting at startIndex, find the index at which the 
 * current token ends.
 *
 * @return The index just beyond the end of a token (the index of a
 *         sep character, or str.length() if this is the last token)
 */
private static int end(String str, char sep, int startIndex) {
    assert(str.charAt(sep) != sep);
    int i;
    for (i = startIndex; i &lt; str.length() &amp;&amp; str.charAt(i) != sep; i++);
    return i;
}
</code></pre>

<p>Then, we can use them in <code>tokenize()</code>:</p>

<pre><code>public static String[] tokenize(String str, char sep) {
    int tokenCount = 0;
    for (int s, e = 0; (s = start(str, sep, e)) &lt; str.length(); e = end(str, sep, s)) {
        tokenCount++;
    }
    String[] tokens = new String[tokenCount];
    tokenCount = 0;
    for (int s, e = 0; (s = start(str, sep, e)) &lt; str.length(); ) {
        tokens[tokenCount++] = str.substring(s, e = end(str, sep, s));
    }
    assert(tokens.length == tokenCount);
    return tokens;
}
</code></pre>

<p>Notice that now you can take advantage of the helper functions to predetermine the size of the array.  Also, a lot of the repetitiveness of your conditions and loops is eliminated.</p>

<p>All of the analysis is done using string indexes, so there is no string manipulation other than just the essential <code>.substring()</code> calls â€” and even the <code>trim()</code> call is gone!</p>
    </div>