<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your algorithm is functional, but is not necessarily very efficient, and it will collide more, and more often if the count of numbers increases.</p>

<p>It's generally neater to start off with a unique set of numbers, and to extract a random selection of those numbers, instead of selecting random numbers, and testing for uniqueness.</p>

<p>PHP makes this relatively neat, because it has a <a href="http://php.net/manual/en/function.shuffle.php" rel="noreferrer">built-in shuffle function</a> (that's essentially doing a <a href="https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle" rel="noreferrer">Fisher-Yates shuffle</a> using the same random system that you are).</p>

<p>So, get an array of the unique values, shuffle it, take a selection of it, and sort the result:</p>

<pre><code>$count = 6;
$highball = 45;
$numbers = range(0, $highball);
shuffle($numbers);
$drawn = array_slice($numbers, - $count);
sort($drawn);
</code></pre>

<p>Note, using named variables instead of constants makes it clearer what you are doing.</p>

<p>See this running on ideone: <a href="https://ideone.com/1Hh0y8" rel="noreferrer">https://ideone.com/1Hh0y8</a></p>
    </div>