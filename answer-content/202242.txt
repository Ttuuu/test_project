<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The algorithm seems okay so I'll review the OOP aspect.</p>
<h2>Naming</h2>
<ol>
<li>The method named <code>PrintBinaryZigZag</code> but it doesn't print anything.</li>
<li>The class named <code>BinaryTree</code> isn't really a binary tree, it's more of a <code>Node</code>.</li>
</ol>
<h2>Implementations vs interfaces</h2>
<p>You return <code>List&lt;int&gt;</code>, but do you really need a list?</p>
<p>The goal of this method if to return a list that represents a binary tree.</p>
<p>Should you be able to add/remove objects from this list? Do you need the indexer, that is specific to the list? I don't think so. In this case, return <code>IEnumerable&lt;int&gt;</code>.</p>
<h2>C# details</h2>
<pre><code>BinaryTree temp = currentLevel.Peek();
currentLevel.Pop();
</code></pre>
<p>You could simply do : <code>BinaryTree temp = currentLevel.Pop();</code></p>
<h2>Flow</h2>
<pre><code>if (leftToRight)
{
    if (temp.Left != null)
    {
        nextLevel.Push(temp.Left);
    }
    if (temp.Right != null)
    {
        nextLevel.Push(temp.Right);
    }
}
else
{
    if (temp.Right != null)
    {
        nextLevel.Push(temp.Right);
    }
    if (temp.Left != null)
    {
        nextLevel.Push(temp.Left);
    }
}
</code></pre>
<p>I'm <em>sure</em> there's a way to make this smaller. Now, this is a take to maybe give you an idea, I don't think it's perfect, it's weird to use a <code>foreach</code> when you only have two elements in the list. But maybe if can give you an idea to make this code smaller.</p>
<pre><code>var orderedNodes = leftToRight ? new []{ temp.Left, temp.Right } : new []{ temp.Right, temp.Left };

foreach(var node in orderedNodes.Where(n =&gt; n != null)) 
{
    nextLevel.Push(node);
}
</code></pre>
<p>This :</p>
<pre><code>if (currentLevel.Count == 0)
{
    leftToRight = !leftToRight;
    Stack&lt;BinaryTree&gt; tempStack = currentLevel;
    currentLevel = nextLevel;
    nextLevel = tempStack;
}
</code></pre>
<p>I think it could be outside your <code>while</code> loop.</p>
    </div>