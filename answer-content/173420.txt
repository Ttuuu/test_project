<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Recursive Method</h2>

<p>You can change your <code>GetGCD()</code> method to be much more intuitive and minimal using a ternary operator and recursion. I recommend also documenting what it's doing for readability purposes:</p>

<pre><code>static int GetGCD(int x, int y)
{
    // If y is equal to 0, return x.
    // If y is not equal to 0, recursive call with x as y and y as the remainder.
    return y == 0 ? x : GetGCD(y, x % y);
}
</code></pre>

<p>Can also be written as:</p>

<pre><code>static int GetGCD(int x, int y)
{
    // If y is equal to 0, return x.
    if (y == 0)
        return x;
    // If y is not equal to 0, recursive call with x as y and y as the remainder.
    return GetGCD(y, x % y);
}
</code></pre>

<p>Depending on your preference.</p>

<h2>Iterative Method</h2>

<p>As stated in other answers, you might use an iterative method:</p>

<pre><code>static int GetGCD(int x, int y)
{
    while (y != 0)
    {
        int tmp = x % y;
        x = y;
        y = tmp;
    }
    return x;
}
</code></pre>

<h2>Entry Point</h2>

<p>Use <code>TryParse()</code> for retrieving integer input from the console. We don't want exceptions on user input.</p>

<p>Modular arithmetic should be positive. To ensure this, we use the absolute value of the input (<a href="https://en.wikipedia.org/wiki/Euclidean_division" rel="nofollow noreferrer">Euclidean division</a>). Here's how I would implement it:</p>

<pre><code>static void Main()
{
    int x, y;

    // Get x. Ensure it's an integer.
    Console.WriteLine("Input first number: ");
    while(!Int32.TryParse(Console.ReadLine(), out x));

    // Get y. Ensure it's an integer.
    Console.WriteLine("Input second number: ");
    while(!Int32.TryParse(Console.ReadLine(), out y));

    // Ensure the values being used are positive.
    Console.WriteLine(GetGCD(Math.Abs(x), Math.Abs(y)));

    Console.ReadKey();
}
</code></pre>

<h2>Output</h2>

<p>As you can see, it will wait for an input that can be parsed to an integer and returns the expected value:</p>

<pre>
Input first number: 
a
b
c
585
Input second number: 
d
442
13
</pre>

<h2>Benchmark</h2>

<p>Just for fun, I thought I'd test the difference between the recursive and iterative methods.</p>

<pre>
Benchmarked method: Recursive
Test cases: 20
Bench in MS: 184
Iterations per case: 10000000

Benchmarked method: Iterative
Test cases: 20
Bench in MS: 121
Iterations per case: 10000000
</pre>

<p>The difference is negligible in real application (unless you plan to run this millions of times). These tests were run from entirely different processes.</p>
    </div>