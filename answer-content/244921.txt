<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Hello and welcome to code review! My main question is: How often do you write programs that have several threads running throughout the application lifecycle with identical exit condition? It is possible that this might negatively affect the way you design your applications and make you use practises that aren't quite optimal? For example, instead of starting and stopping a thread when needed, do you now have threads running forever and waiting for a specific start signal?</p>
<p>Java already has quite powerful tools for managing concurrency, such as executors and parallel streams. I think you might benefit from studying those before rolling your own.</p>
<p><strong>Code</strong></p>
<p>The <code>ThreadRegister</code> has one glaring bug: even though it deals with threads and concurrency, it is not thread safe itself. Access to <code>threadIDList</code> and <code>threadID</code> should be synchronized.</p>
<p>You should follow <a href="https://www.oracle.com/java/technologies/javase/codeconventions-namingconventions.html" rel="nofollow noreferrer">Java naming conventions</a>. Mainly, packages should be in lower case.</p>
<p>By using property-classes from the <a href="/questions/tagged/javafx" class="post-tag" title="show questions tagged 'javafx'" rel="tag">javafx</a> package, you have created a dependency from a fairly generic looking utility to a full blown desktop application framework. This limits the usability of your utility a lot.</p>
    </div>