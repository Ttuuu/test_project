<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You do not need the <code>out</code> attribute here:</p>

<pre><code>public static string TellMeWhatToSay(out string passTheQuote)
{
    //...
    return passTheQuote;
}
</code></pre>

<p>What <code>out</code> does, is it requires the parameter to be assigned somewhere in the method a value is returned.  It is only to be used in places such as:</p>

<pre><code>public bool trySomething(out parameter)
{
    parameter = someValue;
    return somethingSucceeded;
}
</code></pre>

<p>Notice how we are supplying two values to the caller in the above method--the return value and the <code>out</code> parameter value.</p>

<p>If you don't use the <code>out</code> flag, you can change this:</p>

<blockquote>
<pre><code>   public static string TellMeWhatToSay(out string passTheQuote)
    {
        string whatIsWritten;
        Console.WriteLine("Tell Me What To Say");
        whatIsWritten = Console.ReadLine();
        passTheQuote = whatIsWritten;
        return passTheQuote;
    }
</code></pre>
</blockquote>

<p>to:</p>

<pre><code>    public static string TellMeWhatToSay()
    {
        Console.WriteLine("Tell Me What To Say");
        string whatIsWritten = Console.ReadLine();
        return whatIsWritten;
    }
</code></pre>

<hr>

<p>Given what you are using this for, the use of <code>static</code> members of the <code>Work</code> class is alright, although I'd also make the class static.  However, for the most part, you should not work with <code>static</code> members like this--you should learn how to instantiate a class and use specific instances.</p>

<hr>

<p>You should allow the user to pass a custom prompt to <code>TellMeWhatToSay</code>, instead of just having one prompt.  This will make your input method much more flexible.</p>
    </div>