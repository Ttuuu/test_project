<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The code presented lacks <a href="https://www.python.org/dev/peps/pep-0257/#what-is-a-docstring" rel="nofollow noreferrer">doc strings</a>.<br>
This has consequences: How is anyone supposed to form an opinion on, say, <code>create_a_cycle()</code> (or even <code>removeNthFromEnd()</code>)?  </p>

<ul>
<li>interface<br>
(I'm preoccupied by exposure to <a href="http://simula67.at.ifi.uio.no/Standard-86/chap_11.htm" rel="nofollow noreferrer">SIMSET</a> at an impressible age <code>link</code> looks <em>almost</em> as good as <code>succ</code>.)<br>
after a while, I see test support mixed freely with class interface - don't</li>
<li>use of a reserved built-in symbol (<code>next</code>) as a variable name - don't<br>
(In <code>create_a_cycle()</code>, you manage to walk a list with a single reference. You don't even use both in <code>__len__()</code> and <code>find_middle_element()</code>. (In <code>delete(, key)</code>, there is the less readable alternative of using <code>succ.succ</code> (see <code>next</code> avoided).))</li>
<li><code>__len__()</code>:<br>
It <em>looks</em> possible to do source level loop unrolling - but almost never a good idea.<br>
First of all, it impedes readability, <em>especially</em> if not commented properly.  </li>
</ul>

<p>A stripped-down shot at an unrolled <code>__len__()</code> (if not implementing a built-in, there would need to be a docstringâ€¦):</p>

<pre><code>def __len__(self):
    # unrolled to follow two links per trip
    curr = self.head
    size = 0
    while curr:
        succ = curr.succ
        if not succ:
            return size + 1
        size += 2
        curr = succ.succ
    return size
</code></pre>
    </div>