<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>1) I would like to add that the solution is not using object-oriented.
Which would add alot to the readability and extensibility of the code.
I think practically its a better as a solution then "free style - incremental programming".</p>

<p>The main object can be for example:
- ExpensesSheet or ExpensesCalculator
- You can pass proper formatted input object into it
- You can set up filters
- You can execute the query</p>

<p>2) You should consider translating long statements into functions that can be read as English</p>

<p>3) ExceptableCategories can be a map instead of an array to lookup isCategoryAcceptable in O(1)</p>

<p>4) var is old and considered bad way to define variables - js linters will recommend using const or let</p>

<p>i.e.: Here's a translation of your code to object-oriented style.</p>

<p>Note: To hide the private functions from the class interface I buried them as functions inside functions, that is not a style recommendation, just a solution I picked on the way. </p>

<pre><code>class ExpensesCalculator {
  constructor(categories, expenses) {
    this.expensibleCateogries = new Map();
    this.expensibleExpenses = {};

    initExpensibleCategories(this, categories);
    initExpensibleExpenses(this, expenses);
    calculateTotal(this);

    function initExpensibleCategories(_this, categories) {
      categories.split('\n').forEach(category =&gt; {
        const [categoryID, categoryName, isExpensable] = category.split(',');

        if(isExpensable) {
          _this.expensibleCateogries.set(categoryID, categoryName);
        }
      })
    }

    function initExpensibleExpenses(_this, expenses) {
      expenses.split('\n').forEach(expense =&gt; {
        const [vendor, date, item, price, category] = expense.split(',');
        if (_this.expensibleCateogries.has(category)) {
          if(!_this.expensibleExpenses[date]) {
            _this.expensibleExpenses[date] = {};
          }
          if(!_this.expensibleExpenses[date][vendor]) {
            _this.expensibleExpenses[date][vendor] = 0;
          }

          _this.expensibleExpenses[date][vendor] += parseFloat(price);
        }
      })
    }

    function calculateTotal(_this) {
      _this.result = [];
      Object.keys(_this.expensibleExpenses).forEach(ddate =&gt; {
        Object.keys(_this.expensibleExpenses[ddate]).forEach(vendor=&gt;{
          _this.result.push({
            date: new Date(ddate), 
            vendor, 
            total: _this.expensibleExpenses[ddate][vendor]})
        })
      })
    }
  }

  printReport() {
    this.result
      .sort(byDateAndVedor)
      .forEach(item=&gt;{
        console.log(`${getFormattedDate(item.date)}: ${item.vendor} - ${item.total}`);
      })

    function byDateAndVedor(a,b) {
      return a.date - b.date === 0 ? // if date is same
      ('' + a.vendor).localeCompare(b.vendor) : // then sort by vendor
      a.date - b.date // otherwise soft by date
    }

    function getFormattedDate(date) {
      const dateTimeFormat = 
          new Intl.DateTimeFormat('en', { year: 'numeric', month: '2-digit', day: '2-digit' });

        const [{ value: month },,{ value: day },,{ value: year }] = dateTimeFormat.formatToParts(date);

        return `${month}/${day}/${year}`;
    }
  }
}

// Input Values
const categories = "CFE,Coffee,Y\nFD,Food,Y\nPRS,Personal,N";
const expenses = "Starbucks,3/10/2018,Iced Americano,4.28,CFE\nStarbucks,3/10/2018,Nitro Cold Brew,3.17,CFE\nStarbucks,3/10/2018,Souvineer Mug,8.19,PRS\nStarbucks,3/11/2018,Nitro Cold Brew,3.17,CFE\nHigh Point Market,3/11/2018,Iced Americano,2.75,CFE\nHigh Point Market,3/11/2018,Pastry,2.00,FD\nHigh Point Market,3/11/2018,Gift Card,10.00,PRS";

const expensesCalculator = new ExpensesCalculator(categories, expenses);
expensesCalculator.printReport();

</code></pre>
    </div>