<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Specifying a downstream <code>Collector</code> for <code>Collectors.groupingBy</code></h3>

<p>There is an alternative <a href="https://docs.oracle.com/javase/10/docs/api/java/util/stream/Collectors.html#groupingBy(java.util.function.Function,java.util.stream.Collector)" rel="nofollow noreferrer"><code>Collectors.groupingBy(Function, Collector)</code></a> method that lets you specify further steps that you want to do with the intermediary <code>List&lt;SimpleRatifiableAction&gt;</code> values after the grouping.</p>

<p>Then, with a bit of renaming, some help from method references, plus some convenience methods like having a <code>SimpleRatifiableAction.getKey()</code>:</p>

<pre><code>public String getKey() {
    return getOrderNumber() + getActionType();
}
</code></pre>

<p>You can have a method that reads:</p>

<pre><code>// dropping method visibility modifier for brevity
List&lt;GroupedOrderActionUpdateEntity&gt; process(List&lt;SimpleRatifiableAction&gt; actions) {
    return new ArrayList&lt;&gt;(actions.stream()
            .collect(Collectors.groupingBy(SimpleRatifiableAction::getKey,
                    Collectors.collectingAndThen(Collectors.toList(), 
                                                  this::createUpdateEntity)))
            .values());
}
</code></pre>

<h3>Looping once, aggregating multiple values</h3>

<p>Inside <code>convertToUpdateGroup(List)</code>, now renamed as <code>createUpdateEntity(List)</code>, you are streaming twice on the <code>List</code> argument. While this shouldn't be an issue for most cases, there is still an option to just loop once should it be one of the remaining places to optimize (hopefully with some runtime analysis/micro-benchmarking to prove it). </p>

<p>This is achieved by creating the <a href="https://docs.oracle.com/javase/10/docs/api/java/util/StringJoiner.html" rel="nofollow noreferrer"><code>StringJoiner</code></a> instance yourself (instead of relying on <code>Collectors.joining()</code>). To avoid similar <code>List.get(0)</code> calls, you can also get a reference to it once.</p>

<p>Putting it altogether:</p>

<pre><code>// dropping method visibility modifier for brevity
GroupedOrderActionUpdateEntity createUpdateEntity(List&lt;SimpleRatifiableAction&gt; actions) {
    SimpleRatifiableAction first = actions.get(0);
    StringJoiner joiner = new StringJoiner(", ", "Group Order Note: ", ".");
    List&lt;OrderActionUpdateEntity&gt; updateEntities = new ArrayList&lt;&gt;();
    actions.forEach(v -&gt; {
        joiner.add(v.getNote());
        updateEntities.add(v.createUpdateEntity());
    });
    return new GroupedOrderActionUpdateEntity(
            first.getOrderNumber(),
            OrderActionType.valueOf(first.getActionType()),
            first.getSource(),
            12345,
            joiner.toString(),
            updateEntities);
}
</code></pre>

<p><code>SimpleRatifiableAction.createUpdateEntity()</code> is also another convenience method that you can consider:</p>

<pre><code>public OrderActionUpdateEntity createUpdateEntity() {
    return new OrderActionUpdateEntity(getId(), OrderActionState.valueOf(getState()));
}
</code></pre>
    </div>