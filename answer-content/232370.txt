<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You can use the standard <code>C</code> function <a href="https://en.cppreference.com/w/c/io/fprintf" rel="nofollow noreferrer"><code>sprintf(buffer,"%d",x)</code></a> to get an array of digits. In this case, the <code>buffer</code> will contain big-endian representation of x, so the conversion to a digit from each char will be something like this</p>

<pre><code>for(int i = 0; buffer[i] != '\0' &amp;&amp; i &lt; sizeof(buffer);++i)
  digits[i] = buffer[i] - '0';
</code></pre>

<p>This work if <code>x</code> is positive.</p>

<p>But if you want to make your own implementation of splitting a number into digits, you should analyze the problem:</p>

<ol>
<li>What is the <code>base</code> - is it always 10?</li>
<li>How many digits could be - is it always <code>int</code>, i.e. mostly 32-bit?</li>
</ol>

<p>The answer for first question is to have the <code>base</code> parameter <code>int base = 10</code> or 2 or 3 or 8 or any you want.</p>

<p>The answer for second question is <code>ceil( log(|x| + 1) / log(base) ) + 1</code>. The <code>+1</code> for the minus sign. Or if you didn't want to care about maximum of digits use <code>char digits[128]</code> - more than enough even for 64-bit integer.</p>

<p>So, how to fill <code>digits</code>?</p>

<pre><code>// int x - somewhere
unsigned base = 10;

char digits[128];
char isNegative = 0;
int digit = 0;

unsigned tmp = x; // this fix INT_MIN problem thanks chux - Reinstate Monica for note
if(x &lt; 0) {
  isNegative = 1;
  tmp = -x;
} 
if(x == 0) {
  digits[0] = 0;
  digit = 1;
} else {
  for(digit = 0; tmp &gt; 0; ++digit) {
    digits[digit] = tmp % base;
    tmp /= base;
  }  
}
</code></pre>

<p>At least you got little-endian representation of <code>x</code> on <code>base</code> as digits[i], where <code>0 &lt;= i &lt; digit</code> and <code>isNegative</code> for the minus sign</p>
    </div>