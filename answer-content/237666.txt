<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Having <code>Option Explicit</code> is a great start :+1: for that alone!</p>

<hr>

<p>Your Const <code>MDP</code> doesn't need to be declared outside your Sub. In fact it should be a local variable to that Sub as it's only used there. You unprotect the ActiveSheet &amp; ActiveWorkbook but never reprotect that. Feels like a possible oversight.</p>

<hr>

<p>Explicitly declare your <a href="https://docs.microsoft.com/en-us/office/vba/language/reference/user-interface-help/sub-statement" rel="nofollow noreferrer">Sub statement</a>s with <code>Public</code> or <code>Private</code>. If you don't declare this it is implicitly <code>Public</code>. Make your intent clear by including it.</p>

<hr>

<p>Comments. I did the same thing when I first started with VBA. Code should be self documenting. Write code in such a way that it is self evident <em>what</em> is occurring. Then if need you to explain <em>why</em> something is done a specific way a comment is appropriate. Otherwise the comment is noise. <code>'Unmerge all cells</code> is self evident with <code>rangeVariable.UnMerge</code> the comment is restating what was already stated.</p>

<p>If you have a comment that's explaining <em>what</em> is being done, like a comment banner, then that is an indicator you should break that logical group of code into its own Sub/Function (aka Member). This increases the abstraction layer and makes the code more self documenting.</p>

<hr>

<p>Declare your variables just before using them. This lets you realize that <code>Dim FormatRuleInput As String</code> is never referenced anywhere and should be deleted.</p>

<p>Use descriptive variable names. <code>rng</code> doesn't help specify what it is whereas <code>formatConditionsArea</code> tells me you're working with FormatConditions.</p>

<p>Declare variables on their own individual line. <code>Dim condition1, ... , condition26 As FormatCondition</code> has only the last variable <code>condition26</code> as a FormatCondition. You can see this behavior by displaying the Locals window from the menu at the top Edit&gt;Locals Window then step into/through the code with <code>F8</code>.</p>

<p>To remedy this eliminate them all together. You can use a <a href="https://docs.microsoft.com/en-us/office/vba/language/reference/user-interface-help/with-statement" rel="nofollow noreferrer">With statement</a> to hold the variable reference while you assign the properties. Removes the need for the variable altogether.</p>

<pre><code>With rng.FormatConditions.Add(xlTextString, TextOperator:=xlContains, String:="G , 0")
    .Interior.Color = RGB(255, 255, 255)
    .Font.ColorIndex = 3
End With
</code></pre>

<p>Then notice that you're doing the same thing again and again. Extract this into a dedicated sub with parameters. The refactored <a href="https://docs.microsoft.com/en-us/office/vba/language/reference/user-interface-help/sub-statement" rel="nofollow noreferrer">Sub</a> below includes the use of the <a href="https://docs.microsoft.com/en-us/office/vba/language/concepts/getting-started/understanding-named-arguments-and-optional-arguments" rel="nofollow noreferrer">Optional keyword</a>. The first 3 parameters are required and the last is optional (self documenting code example right here). The use of the <code>IsMissing</code> function mandates that <code>fontColorIndex</code> type is a  <code>Variant</code>.</p>

<pre><code>Private Sub ApplyConditionalFormattingTo(ByVal formatArea As Range, _
                                            ByVal checkForValue As String, _
                                            ByVal interiorColor As Long, _
                                            Optional ByVal fontColorIndex As Variant)
    With formatArea.FormatConditions.Add(XlFormatConditionType.xlTextString, TextOperator:=XlContainsOperator.xlContains, String:=checkForValue)
        .Interior.Color = interiorColor

        If Not IsMissing(FontColorIndex) Then
            .Font.ColorIndex = FontColorIndex
        End If
    End With
End Sub
</code></pre>

<p>Then supply arguments to those parameters. This cleans up the code a lot. A <a href="https://docs.microsoft.com/en-us/office/vba/Language/Reference/User-Interface-Help/const-statement" rel="nofollow noreferrer">Const statement</a> is used so that if the need arises you change it once and all uses of it update.</p>

<pre><code>Const FontColorIndex As Long = 3
ApplyConditionalFormattingTo rng, "G , 0", RGB(255, 255, 255), FontColorIndex
...
ApplyConditionalFormattingTo rng, "F9 , 1", RGB(25, 45, 0)
</code></pre>

<hr>

<p>Create a variable to store the sheet you want to work on. Then work off that variable.</p>

<pre><code>Dim formatSheet As Worksheet
Set formatSheet = ActiveSheet
Dim formatRuleInput As String
formatSheet.Name = "Sheet1"
</code></pre>

<p>Later after you copy the sheet you can activate the sheet you were formatting with <code>formatSheet.Activate</code>. Are you making a copy of the worksheet in case something messes up? If so, explicitly mark the copied sheet as such. If not then this copy just feels out of place.</p>

<p>You want to avoid using <code>someVariable.Select</code> followed by <code>Selection.AnyMember</code> as it's almost never required. This occurred because you used the macro recorder. Replace</p>

<pre><code>Worksheets("Sheet1").Activate
rng.Select
With Selection
    .HorizontalAlignment = xlCenter
</code></pre>

<p>with the code below. Directly connect them together as <code>someVariable.AnyMember</code> to eliminate this selecting.</p>

<pre><code>formatSheet.Activate
With addConditionsArea
    .HorizontalAlignment = xlCenter
</code></pre>

<p>Within the with block there are a lot of properties that likely don't need to be there. The macro recorder does not generate efficient code and will usually include properties you don't actually want/need. Review each member in that with block and remove those you don't need.</p>

<p>A example of the macro recorders inefficiency is </p>

<pre><code>.Borders(xlEdgeTop).LineStyle = xlContinuous
.Borders(xlEdgeBottom).LineStyle = xlContinuous
.Borders(xlEdgeRight).LineStyle = xlContinuous
.Borders(xlEdgeLeft).LineStyle = xlContinuous
</code></pre>

<p>which can be replaced with</p>

<pre><code>.BorderAround XlLineStyle.xlContinuous
</code></pre>

<hr>

<p>Putting everything together.</p>

<pre><code>Option Explicit

Public Sub CellAnalysis()
    Const MDP As String = "PASSWORD"
    ActiveSheet.Unprotect Password:=MDP
    ActiveWorkbook.Unprotect Password:=MDP

    Dim formatSheet As Worksheet
    Set formatSheet = ActiveSheet
    Dim FormatRuleInput As String
    formatSheet.Name = "Sheet1"

    Dim defaultRange As Range
    If TypeName(Selection) = "Range" Then
        Set defaultRange = Selection
    Else
        Set defaultRange = ActiveCell
    End If

    On Error Resume Next
    Dim formatConditionsArea As Range
    Set formatConditionsArea = Application.InputBox( _
              Title:="Select Worksheet Range", _
              Prompt:="Select Worksheet Range", _
              Default:=defaultRange.Address, _
              Type:=8)

    On Error GoTo 0
    If formatConditionsArea Is Nothing Then Exit Sub

    formatConditionsArea.UnMerge

    'Use following formula to retrieve cell informations
    formatSheet.Copy After:=Sheets(1)
    formatConditionsArea.Cells.FormulaR1C1 = "=CELL(""Format"",'Sheet1 (2)'!RC)&amp;"" , ""&amp;CELL(""Protect"",'Sheet1 (2)'!RC)&amp;""     ,     ""&amp;ISFORMULA('Sheet1 (2)'!RC)"

    formatConditionsArea.FormatConditions.Delete

    Const fontColorIndex As Long = 3
    ApplyConditionalFormattingTo formatConditionsArea, "G , 0", RGB(255, 255, 255), fontColorIndex
    ApplyConditionalFormattingTo formatConditionsArea, "D1 , 0", RGB(153, 204, 255), fontColorIndex
    ApplyConditionalFormattingTo formatConditionsArea, "D2 , 0", RGB(102, 178, 255), fontColorIndex
    ApplyConditionalFormattingTo formatConditionsArea, "F0 , 0", RGB(229, 255, 204), fontColorIndex
    ApplyConditionalFormattingTo formatConditionsArea, "F1 , 0", RGB(204, 255, 153), fontColorIndex
    ApplyConditionalFormattingTo formatConditionsArea, "F2 , 0", RGB(178, 255, 102), fontColorIndex
    ApplyConditionalFormattingTo formatConditionsArea, "F3 , 0", RGB(153, 255, 51), fontColorIndex
    ApplyConditionalFormattingTo formatConditionsArea, "F4 , 0", RGB(128, 218, 0), fontColorIndex
    ApplyConditionalFormattingTo formatConditionsArea, "F5 , 0", RGB(102, 204, 0), fontColorIndex
    ApplyConditionalFormattingTo formatConditionsArea, "F6 , 0", RGB(76, 153, 0), fontColorIndex
    ApplyConditionalFormattingTo formatConditionsArea, "F7 , 0", RGB(51, 102, 0), fontColorIndex
    ApplyConditionalFormattingTo formatConditionsArea, "F8 , 0", RGB(37, 72, 0), fontColorIndex
    ApplyConditionalFormattingTo formatConditionsArea, "F9 , 0", RGB(25, 45, 0), fontColorIndex
    ApplyConditionalFormattingTo formatConditionsArea, "G , 1", RGB(255, 255, 255)
    ApplyConditionalFormattingTo formatConditionsArea, "D1 , 1", RGB(153, 204, 255)
    ApplyConditionalFormattingTo formatConditionsArea, "D2 , 1", RGB(102, 178, 255)
    ApplyConditionalFormattingTo formatConditionsArea, "F0 , 1", RGB(229, 255, 204)
    ApplyConditionalFormattingTo formatConditionsArea, "F1 , 1", RGB(204, 255, 153)
    ApplyConditionalFormattingTo formatConditionsArea, "F2 , 1", RGB(178, 255, 102)
    ApplyConditionalFormattingTo formatConditionsArea, "F3 , 1", RGB(153, 255, 51)
    ApplyConditionalFormattingTo formatConditionsArea, "F4 , 1", RGB(128, 218, 0)
    ApplyConditionalFormattingTo formatConditionsArea, "F5 , 1", RGB(102, 204, 0)
    ApplyConditionalFormattingTo formatConditionsArea, "F6 , 1", RGB(76, 153, 0)
    ApplyConditionalFormattingTo formatConditionsArea, "F7 , 1", RGB(51, 102, 0)
    ApplyConditionalFormattingTo formatConditionsArea, "F8 , 1", RGB(37, 72, 0)
    ApplyConditionalFormattingTo formatConditionsArea, "F9 , 1", RGB(25, 45, 0)

    'Select the sheet to see the final result
    formatSheet.Activate
    With formatConditionsArea
        .HorizontalAlignment = xlCenter
        .VerticalAlignment = xlTop
        .ColumnWidth = 15
        .RowHeight = 18
        .BorderAround XlLineStyle.xlContinuous
        .Borders(xlInsideVertical).LineStyle = xlContinuous
        .Borders(xlInsideHorizontal).LineStyle = xlContinuous
        .HorizontalAlignment = xlCenter
        .VerticalAlignment = xlCenter
        .Font.Bold = True
    End With

    'Display result of analyzed cells
    MsgBox formatConditionsArea.Count &amp; "   Cells treated : " &amp; formatConditionsArea.Columns.Count &amp; " Columns" &amp; " &amp; " &amp; formatConditionsArea.Rows.Count &amp; "  Rows"
End Sub

Private Sub ApplyConditionalFormattingTo(ByVal formatArea As Range, _
                                            ByVal checkForValue As String, _
                                            ByVal interiorColor As Long, _
                                            Optional ByVal fontColorIndex As Variant)
    With formatArea.FormatConditions.Add(XlFormatConditionType.xlTextString, _
                                            TextOperator:=XlContainsOperator.xlContains, _
                                            String:=checkForValue)
        .Interior.Color = interiorColor

        If Not IsMissing(fontColorIndex) Then
            .Font.ColorIndex = fontColorIndex
        End If
    End With
End Sub
<span class="math-container">```</span>
</code></pre>
    </div>