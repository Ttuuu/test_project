<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>To achieve the <span class="math-container">\$\mathcal{O}(log(n))\$</span> time complexity of insert and delete functions you should store the binary tree as an array - <a href="https://en.wikipedia.org/wiki/Binary_heap#Heap_implementation" rel="nofollow noreferrer">Heap implementation</a>. Because you need to have a link to the last element for performing insert and delete operations and the easiest (common) way to track this link is an array representation of the binary tree. You can devise your own method of tracking the last element for your binary tree representation, but I think it will be similar to the array method at the end.</p>

<p><strong>My implementation:</strong></p>

<pre><code>class BinHeap:
    def __init__(self):
        self.lst = []

    def insert(self, data):
        self.lst.append(data)
        self.heapify_up(len(self.lst) - 1)

    def pop_root(self):
        root = self.lst[0]
        last = self.lst.pop()

        if len(self.lst) &gt; 0:
            self.lst[0] = last 
            self.heapify_down(0, 0)

        return root

    def heapify_down(self, parent_idx, child_idx):
        if child_idx &gt;= len(self.lst):
            return

        parent_greater_bool = self.lst[parent_idx] &gt; self.lst[child_idx]

        if parent_greater_bool:
            self.lst[parent_idx], self.lst[child_idx] = self.lst[child_idx], self.lst[parent_idx]

        if parent_greater_bool or parent_idx == 0:
            self.heapify_down(child_idx, child_idx * 2 + 1)
            self.heapify_down(child_idx, child_idx * 2 + 2)

    def heapify_up(self, child_idx):
        parent_idx = (child_idx - 1) // 2

        if parent_idx &lt; 0:
            return

        if self.lst[parent_idx] &gt; self.lst[child_idx]: 
            self.lst[parent_idx], self.lst[child_idx] = self.lst[child_idx], self.lst[parent_idx]
            self.heapify_up(parent_idx)
</code></pre>

<p><strong>Testing:</strong></p>

<pre><code>heap = BinHeap()

heap.insert(4)
heap.insert(5)

print(heap.lst)

print(heap.pop_root())
print(heap.pop_root())

print(heap.lst)

###Output:
# [4, 5]
# 4
# 5
# []

heap.insert(4)
heap.insert(5)
heap.insert(3)
heap.insert(7)
heap.insert(9)
heap.insert(10)
heap.insert(2)

print(heap.lst)

print(heap.pop_root())
print(heap.lst)

heap.insert(1)
print(heap.lst)

###Output:
# [2, 5, 3, 7, 9, 10, 4]
# 2
# [3, 5, 4, 7, 9, 10]
# [1, 5, 3, 7, 9, 10, 4]
</code></pre>
    </div>