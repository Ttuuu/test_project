<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Both optional collection and a collection of optionals are anti-patterns. There is no scenario where returning <code>Optional&lt;Set&lt;X&gt;&gt;</code> or <code>Set&lt;Optional&lt;X&gt;&gt;</code> is preferable to returning a <code>Set&lt;X&gt;</code> that can be empty.</p>

<p>As @AJNeufeld mentions, a guard condition is a good way to start. In your case. If incoming <code>usersIds</code> are null then return an empty set.</p>

<pre><code>public Set&lt;TenantDTO&gt; getAllTenantsOfUsers(Set&lt;Long&gt; usersIds) {
    if (usersIds == null) {
        return Collections.emptySet();
    }
    // ...
}
</code></pre>

<p>Its really confusing when you mix Optional.map and Stream.map in a single call chain. But since the <code>usersIds == null</code> case is handled, you don't need <code>Optional.ofNullable</code> anymore. You can simplify this to just operations over your ids and Tenants.</p>

<p>Something like this:</p>

<pre><code>public Set&lt;TenantDTO&gt; getAllTenantsOfUsers(Set&lt;Long&gt; usersIds) {
    if (usersIds == null) {
        return Collections.emptySet();
    }
    return tenantRepository
            .findAll(QTenant.tenant.users.any().id.in(usersIds))
            .stream()
            .map((tenant) -&gt; tenantMapper.toDto(tenant))
            .collect(Collectors.toSet());
}
</code></pre>

<p>Now that <code>getAllTenantsOfUsers</code> returns Set(possibly empty Set), all clients of this code can use it directly instead of caring about handling and unwrapping optional.</p>
    </div>