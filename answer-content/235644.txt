<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Δ​<em>t</em></h1>

<p>Since you have the timestamps of the velocity measurements, there is no need to calculate the step size. For all you know, the steps are not even all equal.
You can use <code>np.diff</code> to calculate the differences between all the data points:</p>

<pre><code>time_differences = (np.diff(time))
</code></pre>

<p>or in pure python:</p>

<pre><code>time_differences = [b - a for a, b in zip(time, time[1:])]
</code></pre>

<p>or using the <code>pairwise</code> itertools recipe:</p>

<pre><code>time_differences = [b - a for a, b in pairwise(time)]
</code></pre>

<h1>distance</h1>

<p>How much the particle travelled in a certain period is then as simple as <code>velocity[1:] * dt</code>. To calculate the position from this, you take the cumulative sum:</p>

<pre><code>distance= (velocity[1:] * time_differences).cumsum()
</code></pre>

<p>or in pure python using <code>itertools.accumulate</code>:</p>

<pre><code>from itertools import accumulate
distance = list(
    accumulate(
        v * time_difference
        for v, time_difference in zip(velocity[1:], time_differences)
    )
)
</code></pre>

<h1>formatting</h1>

<p>I use <a href="https://github.com/psf/black" rel="nofollow noreferrer">black</a> (with a maximum line length of 79) to take care of formatting like spacing between operators.</p>

<h1>pylab</h1>

<p>Pylab takes care of a lot of things for you, but I prefer importing <code>numpy</code>, <code>matplotlib</code> etc. individually. Especially <code>from pylab import ...</code> can become problematic if you have a variable which you want to call <code>title</code> or <code>plot</code>. Which happens a lot for me.</p>
    </div>