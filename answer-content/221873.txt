<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>One issue with your approach is your memory usage is <span class="math-container">\$O(n^2)\$</span>.  You are building up the entire Pascal's Triangle, and subsequently printing it.  If you simply want to print Pascal's Triangle, you don't need to keep the entire triangle in memory.  You can simply generate and print it row by row.  Since you generate the next row from only the previous row, the memory requirement is simply two rows, which is <span class="math-container">\$O(n)\$</span>.</p>

<pre><code>&gt;&gt;&gt; row = [1]
&gt;&gt;&gt; for _ in range(5):
...    row = [1] + [x + y for x, y in zip(row[:-1], row[1:])] + [1]
...    print(row)
... 
[1, 1]
[1, 2, 1]
[1, 3, 3, 1]
[1, 4, 6, 4, 1]
[1, 5, 10, 10, 5, 1]
&gt;&gt;&gt; 
</code></pre>

<p>Demystifying <code>[1] + [x + y for x, y in zip(row[:-1], row[1:])] + [1]</code>:</p>

<p><code>row[:-1]</code> is all the values in <code>row</code>, except the last one.  For example, if <code>row</code> is <code>[1, 3, 3, 1]</code>, then <code>row[:-1]</code> is <code>[1, 3, 3]</code>.  Similarly, <code>row[1:]</code> is all the values of <code>row</code> except the first, so <code>[3, 3, 1]</code>.  <code>zip()</code> takes the first value of each of the lists, and returns those as the tuple <code>(1, 3)</code>, which get assigned to <code>x</code> and <code>y</code> respectively, which get added together to get <code>4</code>.  Then, <code>zip()</code> emits the next pair of values, <code>(3, 3)</code> which results in <code>6</code>, and then the final pair <code>(3, 1)</code> results in <code>4</code>, producing the list <code>[4, 6, 4]</code>.  The <code>[1] + ... + [1]</code> adds the bookends, which results in the next row of the triangle: <code>[1, 4, 6, 4, 1]</code>.</p>

<p>Instead of needing to keep track of the last row, and feed that back to generate the next row, we can package that up into a generator function, which can prime the loop and do the feedback itself:</p>

<pre><code>&gt;&gt;&gt; def pascals_triangle(n):
...     row = [1]
...     yield row
...     for _ in range(n):
...         row = [1] + [x + y for x, y in zip(row[:-1], row[1:])] + [1]
...         yield row
... 
&gt;&gt;&gt; for row in pascals_triangle(5):
...     print(row)
... 
[1]
[1, 1]
[1, 2, 1]
[1, 3, 3, 1]
[1, 4, 6, 4, 1]
[1, 5, 10, 10, 5, 1]
&gt;&gt;&gt; 
</code></pre>

<p>Format the resulting rows as desired.</p>

<pre><code>&gt;&gt;&gt; for i, row in enumerate(pascals_triangle(5)):
...     print(("   "*(5-i) + "{:6}"*(i+1)).format(*row))
... 
                    1
                 1     1
              1     2     1
           1     3     3     1
        1     4     6     4     1
     1     5    10    10     5     1
&gt;&gt;&gt; 
</code></pre>
    </div>