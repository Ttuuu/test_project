<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I don't see anything wrong with the approach you're using, which is changing the variables' names and writing the code as a whole piece. The reason for that is simple: you have two fundamentally different charts. </p>

<p>What I mean by that is that you don't have the same <em>kind</em> of chart printed several times, with different parameters, like <a href="https://gf.neocities.org/dh/drugharms.html" rel="nofollow noreferrer">this dataviz I made</a>. In a case like that, DRY is a very important principle and it makes no sense writing every single little chart in a code with unique variables...</p>

<p>But your case is different: you have different charts. In a situation like this, when I have two, three or more charts in the same page, I like to write the code as a whole, as if I were telling a story (because that's what sometimes we do in data visualisation, we tell stories). </p>

<p>So, I'd start the code with the bar chart and end it with the donut chart, as a whole piece, giving specific names for all the selections (from the SVG to the smallest elements), scales, axes, listeners etc. A good practice is giving meaningful names to your selections and constants according to the charts, like <code>svgBar</code>, <code>svgDonut</code>, <code>widthBar</code>, <code>widthDonut</code> etc, as you did.</p>

<p>However, if that doesn't sound a good option to you, or if you're trying to merge codes that were originally written separately, you have alternatives.</p>

<h3>IIFEs</h3> 

<p>One of them, out of many, is using IIFEs to namespace your code, so you can keep the same variables.</p>

<p>Something like this:</p>

<pre><code>(function barChart(){
    //code here...
}());

(function donutChart(){
    //code here...
}());
</code></pre>

<p>Using that approach you can use the same variable in both charts, and they will not conflict:</p>

<pre><code>(function barChart(){
    var svg = foo;
    //this reefers to the bars' SVG
}());

(function donutChart(){
    var svg = foo;
    //this refers to the donut's SVG
}());
</code></pre>

<p>But pay attention to this: even using IIFEs, if you do <code>d3.select(foo)</code>, you'll select <strong>the first element</strong> D3 finds in that page matching the criterion, not depending on where that element is. On the other hand, if you do <code>svg.select(foo)</code>, you'll select only the element inside the SVG of that specific code (be it the bar chart or the donut chart).</p>

<h3>Back to your question</h3>

<p>Since after your edit you provide a code using different variables for the different charts (bar and donut chart), I'll write a code review for <strong>that</strong>, not for the IIFE version. </p>

<p>Here are the main points:</p>

<ol>
<li><p>Don't use <code>document.querySelector</code>, it makes no sense in a D3 code. You're using D3! So, just do <code>d3.select</code>. When dealing with DOM elements, take care of using <code>node()</code>.</p></li>
<li><p>You're attaching a <code>.on("change"</code> listener to the form containing the radio buttons...</p>

<pre><code>d3.select('#type-selector').on('change', updateRadio);
</code></pre>

<p>... and then you're selecting the radio buttons:</p>

<pre><code>var updateRadio = function() {
    typeSelected = document.querySelector('input[name=type-selector]:checked', '#type-selector').value; 
</code></pre>

<p>You don't need that. The whole thing can be just:</p>

<pre><code>d3.selectAll('input[name=type-selector]').on('change', function(){
    var typeSelected = this.value;
    //rest of the code
});
</code></pre></li>
<li><p>Your <code>getDataFromType</code> can be way simpler:</p>

<pre><code>function getDataFromType(type) {
    var arr = [];
    data.forEach(function(item) {
        arr.push({
            "year": item.year,
            "value": item[type]
        });
    });
    return arr;
}
</code></pre></li>
</ol>

<p>And here comes the important part:</p>

<ol start="4">
<li><p>Since now you have a simpler listener and a data filter, you don't need that awkward <code>drawBar</code> and <code>createBar</code> functions. Put everything inside <code>createBar</code>. That way, you can also have simpler scales and axes (check my code below).</p></li>
<li><p>This is by far <strong><em>the most important advice</em></strong>: you are deleting elements to paint the SVG again:</p>

<pre><code>d3.selectAll('rect').remove();
</code></pre>

<p><strong>Don't do that!</strong>. Instead of that, use the D3 enter-update-exit selections (here, enter and update only):</p>

<pre><code>var bars = gBar.selectAll(".bar")
    .data(data);

bars.enter().append("rect")
    .attr("class", "bar")
    .merge(bars)
    .attr("x", function(d) {
        return xBar(d.year);
    })
    .attr("y", function(d) {
        return yBar(d.value);
    })
    .attr("width", xBar.bandwidth())
    .attr("height", function(d) {
        return heightBar - yBar(d.value);
    });
</code></pre></li>
<li><p>Do the same changes for the donut section:</p>

<pre><code>d3.select('#year-slider').on('input', function() {
    yearSelected = this.value;
    d3.select("#year-span").text(yearSelected);
    drawDonut(getDataFromYear(yearSelected));
});
</code></pre></li>
</ol>

<p>All together, this is the refactored code:</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;html lang='en'&gt;

  &lt;head&gt;
    &lt;meta charset='utf-8'&gt;

    &lt;style&gt;
      .bar {
        fill: steelblue;
      }

      .bar:hover {
        fill: brown;
      }

      .arc text {
        font: 10px sans-serif;
        text-anchor: middle;
      }

      .arc path {
        stroke: #fff;
      }

    &lt;/style&gt;

    &lt;title&gt;Donut &amp; Bar charts&lt;/title&gt;
    &lt;script src='https://d3js.org/d3.v5.js' charset='utf-8'&gt;&lt;/script&gt;
    &lt;script src='https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js'&gt;&lt;/script&gt;
  &lt;/head&gt;

  &lt;body&gt;

    &lt;div id='year-selector-container'&gt;
      &lt;input id='year-slider' class='year-range' type='range' min='2000' max='2005' value='2004'&gt; Year: &lt;span id='year-span'&gt;2004&lt;/span&gt;
    &lt;/div&gt;

    &lt;div id='type-selector-container'&gt;
      &lt;form id='type-selector'&gt;
        &lt;input type='radio' name='type-selector' id='rb-1' value='type1' checked /&gt;
        &lt;label for='rb-1'&gt;Type 1&lt;/label&gt;

        &lt;input type='radio' name='type-selector' id='rb-2' value='type2' /&gt;
        &lt;label for='rb-2'&gt;Type 2&lt;/label&gt;

        &lt;input type='radio' name='type-selector' id='rb-3' value='type3' /&gt;
        &lt;label for='rb-3'&gt;Type 3&lt;/label&gt;
      &lt;/form&gt;
    &lt;/div&gt;

    &lt;div id='barchart'&gt;&lt;/div&gt;
    &lt;div id='donutchart'&gt;&lt;/div&gt;

    &lt;script&gt;
      /////////////////////////////////////////////////
      // SHARED CODE
      /////////////////////////////////////////////////
      var data = [{
          "year": 2000,
          "type1": 30,
          "type2": 40,
          "type3": 30
        },
        {
          "year": 2001,
          "type1": 75.5,
          "type2": 4.5,
          "type3": 30
        },
        {
          "year": 2002,
          "type1": 0,
          "type2": 90,
          "type3": 10
        },
        {
          "year": 2003,
          "type1": 15,
          "type2": 20,
          "type3": 65
        },
        {
          "year": 2004,
          "type1": 20,
          "type2": 40,
          "type3": 40
        },
        {
          "year": 2005,
          "type1": 50,
          "type2": 25,
          "type3": 25
        }
      ];

      d3.selectAll('input[name=type-selector]').on('change', function() {
        typeSelected = this.value;
        createBar(getDataFromType(typeSelected));
      });

      d3.select('#year-slider').on('input', function() {
        yearSelected = this.value;
        d3.select("#year-span").text(yearSelected);
        drawDonut(getDataFromYear(yearSelected));
      });

      var yearSelected = d3.select('#year-span').text();
      var typeSelected = d3.select('input[name=type-selector]:checked', '#type-selector').node().value;

      /////////////////////////////////////////////////
      // BAR
      /////////////////////////////////////////////////
      var svgBar = d3.select("#barchart").append("svg").attr("width", 450).attr("height", 200);
      var marginBar = {
        top: 20,
        right: 20,
        bottom: 30,
        left: 40
      };
      var widthBar = +svgBar.attr("width") - marginBar.left - marginBar.right;
      var heightBar = +svgBar.attr("height") - marginBar.top - marginBar.bottom;
      var xBar = d3.scaleBand().rangeRound([0, widthBar]).padding(0.1);
      var yBar = d3.scaleLinear().rangeRound([heightBar, 0]);
      var gBar = svgBar.append("g").attr('id', 'gBar').attr("transform", "translate(" + marginBar.left + ", " + marginBar.top + ")");

      var gX = gBar.append("g")
        .attr("class", "axis axis--x")
        .attr("transform", "translate(0," + heightBar + ")");

      var gY = gBar.append("g")
        .attr("class", "axis axis--y")

      createBar(getDataFromType(typeSelected));

      function createBar(data) {

        xBar.domain(data.map(function(d) {
          return d.year;
        }));
        yBar.domain([0, d3.max(data, function(d) {
          return d.value
        })]);

        gX.call(d3.axisBottom(xBar));

        gY.call(d3.axisLeft(yBar).ticks(10, "%"))
          .append("text")
          .attr("transform", "rotate(-90)")
          .attr("y", 6)
          .attr("dy", "0.71em")
          .attr("text-anchor", "end");

        var bars = gBar.selectAll(".bar")
          .data(data);

        bars.enter().append("rect")
          .attr("class", "bar")
          .merge(bars)
          .attr("x", function(d) {
            return xBar(d.year);
          })
          .attr("y", function(d) {
            return yBar(d.value);
          })
          .attr("width", xBar.bandwidth())
          .attr("height", function(d) {
            return heightBar - yBar(d.value);
          });

      }

      // return the right data
      function getDataFromType(type) {
        var arr = [];
        data.forEach(function(item) {
          arr.push({
            "year": item.year,
            "value": item[type]
          });
        });
        return arr;
      }

      /////////////////////////////////////////////////
      // DONUT
      /////////////////////////////////////////////////
      var widthDonut = 400;
      var heightDonut = 200;
      var radiusDonut = Math.min(widthDonut, heightDonut) / 2;
      var colorDonut = d3.scaleOrdinal()
        .range(["#98abc5", "#8a89a6", "#7b6888", "#6b486b", "#a05d56", "#d0743c", "#ff8c00"]);
      var arcDonut = d3.arc()
        .outerRadius(radiusDonut - 10)
        .innerRadius(radiusDonut - 60);
      var pieDonut = d3.pie()
        .sort(null)
        .value(function(d) {
          return d.value;
        });
      var svgDonut = d3.select("#donutchart").append("svg")
        .attr("width", widthDonut)
        .attr("height", heightDonut);
      var dataNestDonut = d3.nest()
        .key(function(d) {
          return d.year;
        })
        .object(data);

      createDonut();

      function createDonut() {
        var initialData = getDataFromYear(yearSelected);
        drawDonut(initialData);
      }

      // return the right data
      function getDataFromYear(year) {
        var filterData = dataNestDonut[year].slice();
        var arr = [{
          "typeData": "type1",
          "value": filterData[0].type1
        }, {
          "typeData": "type2",
          "value": filterData[0].type2
        }, {
          "typeData": "type3",
          "value": filterData[0].type3
        }];
        return arr;
      }

      function drawDonut(data) {
        var svgG = svgDonut.append("g")
          .attr('class', 'svgG')
          .attr("transform", "translate(" + widthDonut / 2 + "," + heightDonut / 2 + ")");

        var g = svgG.selectAll(".arc")
          .data(pieDonut(data))
          .enter()
          .append("g")
          .attr("class", "arc");

        g.append("path")
          .attr("d", arcDonut)
          .style("fill", function(d) {
            return colorDonut(d.data.typeData);
          });

        g.append("text")
          .attr("transform", function(d) {
            return "translate(" + arcDonut.centroid(d) + ")";
          })
          .attr("dy", ".35em")
          .text(function(d) {
            return d.data.typeData;
          });
      }

    &lt;/script&gt;

  &lt;/body&gt;

&lt;/html&gt;</code></pre>
</div>
</div>

    </div>