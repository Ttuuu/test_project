<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>User Experience</h2>
<p>The function method <code>pincodeSearch</code> is called whenever the pincode value changes and is vald. It would likely be wise to consider minimizing server requests by debouncing the function and/or cancelling existing requests if the method is called rapidly in short succession.</p>
<h2>Vue / Javascript</h2>
<p>It looks like you started to add a computed property <code>pincodeValid</code> but didn't implement and use it. It could be something as simple as this example:</p>
<pre><code>pincodeValid: function () {
    return this.pincode &gt;= 100000 &amp;&amp; this.pincode &lt;= 999999
} 
</code></pre>
<p>then instead of needing the watcher, a method could be added and bound to the <code>@input</code> attribute of the pincode input:</p>
<pre><code>pincodeChange: function() {
   if (this.pincodeValid) {
        //this should probably be debounced to minimize server requests
        this.pincodeSearch();
        
    }
    else {
        this.resetIn();
        this.pinValid = null
    }
}
</code></pre>
<p>Then the whole <code>watch</code> section can be eliminated.</p>
<p>According to the <a href="https://vuejs.org/v2/guide/computed.html#Computed-vs-Watched-Property" rel="nofollow noreferrer">VueJS documentation</a>:</p>
<blockquote>
<p>When you have some data that needs to change based on some other data, it is tempting to overuse <code>watch</code> - especially if you are coming from an AngularJS background. However, it is often a better idea to use a computed property rather than an imperative <code>watch</code> callback. <sup><a href="https://vuejs.org/v2/guide/computed.html#Computed-vs-Watched-Property" rel="nofollow noreferrer">1</a></sup></p>
</blockquote>
<p>While it may not help this situation much, it is better to get into the practice of using computed properties instead of watchers where possible, since "<em>computed properties are cached based on their reactive dependencies. A computed property will only re-evaluate when some of its reactive dependencies have changed.</em>"<sup><a href="https://vuejs.org/v2/guide/computed.html#Computed-Caching-vs-Methods" rel="nofollow noreferrer">2</a></sup></p>
<hr>
<p>There is this loop in the callback to the <code>axios.get()</code> call:</p>
<blockquote>
<pre><code>for (let i = 0; i &lt; response.data.length; i++) {
      this.l_options.push(response.data[i].locality);
}
</code></pre>
</blockquote>
<p>That could be simplified using a <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Statements/for...of" rel="nofollow noreferrer"><code>for...of</code> loop</a> - e.g.</p>
<pre><code>for (const datum of response.data) {
    this.l_options.push(datum.locality);   
}
</code></pre>
<p>While there may be a slight performance hit due to the iterator it is simpler to read.</p>
    </div>