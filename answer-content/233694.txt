<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are a number of ideas that may help you improve your program.</p>

<h2>Separate calculation from I/O</h2>

<p>The <code>Serial.println();</code> call from within <code>getWeigand</code> really shouldn't be there.  It's better if the function does just one thing, and that is to calculate and return the number.</p>

<h2>Don't leak memory</h2>

<p>The code calls <code>new</code> but there isn't any matching <code>delete</code> which means that the program leaks memory.  It's better to make sure all memory is freed, but better still, see the next suggestion.</p>

<h2>Avoid using <code>new</code> and <code>delete</code></h2>

<p>Modern C++ doesn't use <code>new</code> and <code>delete</code> as much as it used to.  In this case, much better than passing around a raw array pointer and hoping the other end knows what the size is, is to use <code>std::array</code> instead.  That is an improvement over a plain array because it works with all of the standard container algorithms and has its own <code>.size()</code> operator. See <a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#i13-do-not-pass-an-array-as-a-single-pointer" rel="nofollow noreferrer">I.13</a> for more details on why passing around a single array pointer is not a good idea.</p>

<h2>Prefer single bit shifting to multi-bit shifting</h2>

<p>Many processors have hardware optimizations for multi-bit shifts, but not all do.  That means on some machines, multi-bit shifts take longer.  For that reason, and because I think it's more readable, I'd suggest changing the first <code>for</code> loop to this:</p>

<pre><code>for (int i = 24; i &gt; 0; --i) {
    wiegandNum[i] = dec &amp; 1;
    dec &gt;&gt;= 1;
}
</code></pre>

<h2>Simplify your code</h2>

<p>Instead of doing things like this:</p>

<pre><code>if(even) {
    wiegandNum[0] = 0;
} else {
    wiegandNum[0] = 1;
}
</code></pre>

<p>just use the value directly:</p>

<pre><code>wiegandNum[0] = !even;
</code></pre>

<h2>Use whitespace for readability</h2>

<p>Lines like this one:</p>

<pre><code>for(int i=1;i&lt;13;i++) {
</code></pre>

<p>are much easier to read with a little more whitespace:</p>

<pre><code>for (int i = 1; i &lt; 13; i++) {
</code></pre>

<h2>Create a test routine</h2>

<p>With code like this, it's usually good to do extensive testing to make sure it does what you intend.  I am not using an Arduino, but created a version that runs on Linux (or really any computer that supports C++):</p>

<pre><code>#include &lt;string&gt;
#include &lt;iostream&gt;
#include &lt;iomanip&gt;
std::string weiString(unsigned int dec)
{
    std::string str{};
    auto answer = getWiegand(dec);
    for (const auto digit: answer) {
        str.push_back(digit ? '1' : '0');
    }
    return str;
}

int main()
{
    struct {
        unsigned n;
        std::string expected;
        bool operator()() const {
            std::string calculated = weiString(n);
            bool ok{calculated == expected};
            std::cout &lt;&lt; std::hex &lt;&lt; n 
                &lt;&lt; std::dec 
                &lt;&lt; '\t' &lt;&lt; expected 
                &lt;&lt; '\t' &lt;&lt; calculated 
                &lt;&lt; '\t' &lt;&lt; (ok ? "OK" : "incorrect!") 
                &lt;&lt; '\n';
            return ok;
        }
    } tests[]{
        {12679548,  "01100000101111001011111000" },
        {0xffff,    "00000000011111111111111111" },
        {0x1ffff,   "10000000111111111111111111" },
        {0xffffff,  "01111111111111111111111111" },
        {0xdecade,  "01101111011001010110111101" },
        {0xfffffff, "01111111111111111111111111" },  // ignore high bits
    };

    for (const auto&amp; test: tests) {
        test();
    }
}
</code></pre>

<h2>Results</h2>

<p>Here's the alternate version that uses these suggestions.  It also uses the exclusive-or operator <code>^</code> to simplify parity calculations:</p>

<pre><code>#include &lt;array&gt;

std::array&lt;unsigned, 26&gt; getWiegand(unsigned int dec)
{
    std::array&lt;unsigned, 26&gt; wiegandNum;
    for (int i = 24; i &gt; 0; --i) {
        wiegandNum[i] = dec &amp; 1;
        dec &gt;&gt;= 1;
    }
    // check for parity of the first 12 bits
    bool even = false;
    for (int i = 1; i &lt; 13; i++) {
        even ^= wiegandNum[i];
    }
    wiegandNum[0] = even;

    // check for parity of the last 12 bits
    bool odd = true;
    for (int i = 13; i &lt; 25; i++) {
        odd ^= wiegandNum[i];
    }
    wiegandNum[25] = odd;

    return wiegandNum;
}
</code></pre>

<p>Even shorter is to process one of the parity bits over the entire array as it's generated and then recalculate just the other one and adjust.  It might be less obvious why this works, but it does.  See if you can see why.</p>

<pre><code>std::array&lt;unsigned, 26&gt; getWiegand(unsigned int dec)
{
    bool odd = true;
    std::array&lt;unsigned, 26&gt; wiegandNum;
    for (int i = 24; i &gt; 0; --i) {
        wiegandNum[i] = dec &amp; 1;
        odd ^= wiegandNum[i];
        dec &gt;&gt;= 1;
    }
    // check for parity of the first 12 bits
    bool even = false;
    for (int i = 1; i &lt; 13; i++) {
        even ^= wiegandNum[i];
    }
    wiegandNum[0] = even;
    wiegandNum[25] = odd ^ even;
    return wiegandNum;
}
</code></pre>
    </div>