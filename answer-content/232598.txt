<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Classes (and functions) should ideally do one thing and do it well. The Python Zen also stipulates "There should be one-- and preferably only one --obvious way to do it."</p>

<p>Your class goes against this principle in two ways:</p>

<ul>
<li>You have many different ways to actually execute the commands. There is <code>Run</code>, <code>Step</code> and <code>StepThrough</code>.</li>
<li>You have multiple keywords for the same command. Note how e.g. Python has only <code>if</code>, not also <code>when</code>, <code>case</code>, or a second syntax like <code>if ... fi</code>.</li>
</ul>

<p>Your loop structure is also a bit weird. Files like this should raise a <code>SyntaxError</code> (or your equivalent), not be silently ignored:</p>

<pre><code>name ThisShouldCrashAndBurn
loop 10 one
loop 10 two
forwards 1
endloop one
backwards 1
endloop two
</code></pre>

<p>I also have no idea what your code outputs for this, or should output. It will depend entirely on the implementation how this is handled.</p>

<p>Instead, just keep a stack of loop counters around. You always increment the last counter and <code>pop</code> it from the loop counters if a loop ends. This way you always end the innermost loop.</p>

<p>Here is a slightly simplified version, which removes duplicate keywords and uses the simplified loopcounter. It also gives the user a bit of the control back (by not providing e.g. a method to add a command).</p>

<p>I also removed the other run methods. Now the <code>run</code> method <code>yield</code>s after each step, so it is the user's responsibility to loop. I did add a convenience method that does not pause.</p>

<p>The whole thing directly inherits from <code>turtle.Turtle</code>, and uses the method names as keywords, where applicable. This eliminates all the trivial commands. It has a whitelist of all commands to block access to other turtle commands, although you might want to remove that to allow access to all of them directly.</p>

<pre><code>import turtle

class Turtle(turtle.Turtle):
    keywords = {"forward", "backward", "left", "right", "setposition",
                "reset", "circle", "colour", "penup", "pendown",
                "switchpen", "undo", "name", "done", "speed", "name",
                "loop", "endloop"}

    def __init__(self, commands, speed=6):
        """Initialise turtle with a speed."""
        super().__init__()
        self.speed(speed)
        self.name("terry")
        self.pointer = 0
        self.loops = []
        self.commands = commands

    @classmethod
    def from_file(cls, file_name, speed=6):
        with open(file_name) as f:
            commands = [line[:line.find(";")].strip().lower()
                        for line in f]
        return cls(commands, speed)

    def run(self):
        """Run commands in buffer, pausing after each step"""
        print(f"{self._name} is ready to go!")
        # need a while loop here because the pointer might be moved by the command
        self.pointer = 0
        while self.pointer &lt; len(self.commands):
            self.run_command(self.commands[self.pointer])
            yield self.pointer
            self.pointer += 1
        print(f"{self._name} is finished!")

    def run_all(self):
        """Run all commands."""
        for _ in self.run():
            pass

    def run_command(self, command):
        """Send 1 command to turtle. Big switch case handles command."""
        print(f"{self._name} is trying {command}")
        try:
            command, *data = command.split(" ")
            data = list(map(convert, data))
        except:
            print(f"Error: {self._name} could not perform command {command}")
            return None
        if command in self.keywords:
            getattr(self, command)(*data)
        else:
            print(f"{self._name} doesn't know how to do {command}")

    def loop(self, iterations):
        self.loops.append([iterations, self.pointer])

    def endloop(self):
        try:
            n, start = self.loops[-1]
        except IndexError:
            print("No loop to end")
            return
        if n == 1:
            self.loops.pop()
        else:
            self.loops[-1][0] -= 1
            self.pointer = start

    def reset(self):
        self.setposition(0, 0)

    def circle(self, radius, extent=None, steps=None):
        """Draw a circle with the built in turtle circle function."""
        super().circle(radius, extent, steps)

    def switchpen(self):
        """Flip pen state."""
        if self.isdown():
            self.penup()
        else:
            self.pendown()

    def undo(self, num=1):
        """Undo specified number of commands"""
        for _ in range(num):
            super().undo()

    def name(self, name):
        """Set the turtle name"""
        self._name = name

    def done(self):
        """Forces window to stay open after completion. Function for runturtle.py. No
        more commands can be executed after this one."""
        turtle.done()


def convert(input):
    """
    Converts a string to an int or float.
    Converts a list of strings into a list of strings, ints or floats.
    Args:
        input (str, list[str]): string or list of strings to attempt to convert.
    Returns:
        (str, int, float, list[...]): Depending on data contained in input.
    """
    if isinstance(input, str):
        input = [input]
    converted = []
    for item in input:
        try:
            if "." in item:
                converted.append(float(item))
            else:
                converted.append(int(item))
        except ValueError:
            converted.append(item)
    if len(converted) == 1:
        converted = converted[0]
    return converted

if __name__ == "__main__":
    import sys
    t = Turtle.from_file(sys.argv[1])
    t.run_all()
</code></pre>

<p>Note that if <code>data</code> is the empty list (which is allowed by the extended tuple unpacking), the splatting using <code>*</code> will not interfere and allow even methods without arguments being run. I.e. the following works:</p>

<pre><code>def f():
    pass

f(*[])
</code></pre>
    </div>