<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You said you implemented</p>

<blockquote>
  <p>a container that can hold objects of various types, and look
  up an object convertible to a given type</p>
</blockquote>

<p>This idea can be simplified and generalized: we want to</p>

<blockquote>
  <p>look up an object convertible to a given a type in a sequence of variants</p>
</blockquote>

<p>We can focus on the <code>get</code> function and strip everything else.  The container does not have to be a <code>std::vector&lt;std::variant&gt;</code> â€” we can use iterators:</p>

<pre><code>template &lt;typename T, typename ForIt&gt;
T get_convertible(ForIt first, ForIt last);
</code></pre>

<p>In the code, you want to find an element that is convertible to <code>T</code>, and throw an exception if such an element is not found.  You used <code>std::optional</code> to conditionally return the visited element.  This overhead can be eliminated:</p>

<pre><code>template &lt;typename T, typename ForIt&gt;
T get_convertible(ForIt first, ForIt last)
{
    auto it = std::find_if(first, last, [](const auto&amp; variant) {
        return std::visit([](const auto&amp; value) {
            using U = std::decay_t&lt;decltype(value)&gt;;
            return std::is_convertible_v&lt;U, T&gt;;
        }, variant);
    });

    if (it == last) {
        throw std::runtime_error{"..."};
    } else {
        return std::visit([](const auto&amp; value) -&gt; T {
            using U = std::decay_t&lt;decltype(value)&gt;;
            if constexpr (std::is_convertible_v&lt;U, T&gt;)
                return value;
        }, *it);
    }
}
</code></pre>

<p>(<a href="https://wandbox.org/permlink/4PiLaEmOfB6BdqlG" rel="nofollow noreferrer">live demo</a>, includes code to disable return warning)</p>
    </div>