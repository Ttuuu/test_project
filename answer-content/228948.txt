<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>def decToBase(n: int, b: int) -&gt; list:
def baseToDec(n: list, b: int) -&gt; int:
</code></pre>
</blockquote>

<p>These names reflect a common misconception. <code>int</code> is <strong>not</strong> inherently decimal. If any named base were appropriate, it would be <code>bin</code> for binary. But it's far more sensible to think of <code>int</code> as being <code>int</code>: either call them <code>int to base</code> and <code>base to int</code> or, IMO better, <code>base compose</code> and <code>base decompose</code>. Python's style guide (PEP8) would prefer you to use <code>base_compose</code> than <code>baseCompose</code>.</p>

<hr>

<blockquote>
<pre><code>        for d1, d2 in zip(reversed(self.digits), reversed(o.digits)):
            ...
        return BN(list(reversed(res)), self.base)
</code></pre>
</blockquote>

<p>Would it make more sense to store the digits in the reversed (little-endian) order, and only reverse them for display purposes?</p>

<hr>

<blockquote>
<pre><code>    if a &lt; b:
        a, b = b, a # ensure a &gt;= b
    next2 = 2 ** ceil(log2(floor(log10(a))+1)) # next power of 2
    a, b = BN(a, base), BN(b, base)
    a.digits, b.digits = ['0'] * (next2 - a.length) + a.digits, ['0'] * (next2 - b.length)
    n = next2 // 2
</code></pre>
</blockquote>

<p>Firstly, don't mix types like that. <code>[0] *</code> would be consistent and lead to fewer bugs.</p>

<p>Secondly, why care about powers of two? None of the algebra here requires that. You might as well optimise with</p>

<pre><code>    if a &lt; b:
        a, b = b, a # ensure a &gt;= b
    a, b = BN(a, base), BN(b, base)
    b.digits = [0] * (a.length - b.length) + b.digits
    n = a.length // 2
</code></pre>

<p>(Well, actually even that extension of <code>b</code> isn't strictly necessary).</p>

<hr>

<blockquote>
<pre><code>    p1, p2, p3 = p1.getDecimalForm(), p2.getDecimalForm(), p3.getDecimalForm()

    xy = p1 * base ** (2*n) + (p3 - (p1 + p2)) * base ** n + p2
</code></pre>
</blockquote>

<p>Why not do the whole thing using <code>BN</code> and arrays? That is, after all, the way you would <em>have</em> to do it in any language where making your own implementation of Karatsuba's algorithm is necessary.</p>
    </div>