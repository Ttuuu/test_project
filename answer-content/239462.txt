<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Going to run through this code making edits and explain as I go:</p>

<ol>
<li><p>You only ever use <code>position</code> to find the position within the <code>alphabet</code>; I think it'd be clearer to just make this function's purpose more specific and call it something like <code>index_in_alphabet</code>.</p></li>
<li><p>Having narrowed and defined the purpose of this function, it can be implemented much more simply by subtracting the character values:</p></li>
</ol>

<pre><code>def index_in_alphabet(letter: str) -&gt; int:
    """Converts a lowercase letter to an index from 1-26."""
    return 1 + ord(letter) - ord('a')
</code></pre>

<ol start="3">
<li><p>We probably also want it to raise an exception instead of returning an out-of-bounds value if <code>letter</code> isn't a lowercase letter.  <code>assert</code> is an easy way to do that.</p></li>
<li><p>Similarly to how I used <code>ord</code> to replace <code>alphabets</code> for finding the index, you can use <code>chr</code> to replace it for generating the character from the index:</p></li>
</ol>

<pre><code>    element = chr(ord('a') + z - 1) # instead of alphabet[z-1]
</code></pre>

<ol start="5">
<li>Your entire <code>converttolist</code> function can be replaced with just:</li>
</ol>

<pre><code>def converttolist(text: str) -&gt; List[str]:
    return list(text)
</code></pre>

<p>which of course in turn means that instead of <code>converttolist()</code> you can just use <code>list()</code>.</p>

<ol start="6">
<li><p>Instead of making the caller convert the input to and from a list, you could just do it inside the function (so you accept a string and return a string).  In fact, you don't need to convert anything to a list in the first place, because you can already index a string the same way you index a list!</p></li>
<li><p>Use <code>if __name__ == '__main__':</code> to indicate which part of your module is the "main program".  This is the standard convention for Python and it has a practical purpose: if something else imports your module, whatever you put inside that <code>if</code> block won't get executed at import time (which is good).</p></li>
<li><p>The comment <code>defining all sorts of functions</code> isn't very helpful to the reader; a better use of comments is to explain what each function does!</p></li>
<li><p>Going to just kinda proofread some of the formatting here -- there are odd spaces and unnecessarily parentheses in some spots.</p></li>
<li><p>Eliminate unneeded variables!</p></li>
</ol>

<p>Here's the code I ended up with:</p>

<pre><code>def index_in_alphabet(letter: str) -&gt; int:
    """Converts a lowercase letter to an index from 1-26."""
    index = 1 + ord(letter) - ord('a') 
    assert 1 &lt;= index &lt;= 26
    return index

def encrypt(a: str) -&gt; str:
    """Returns the encrypted version of the input string."""
    output = ""
    for i in range(len(a)):
        x = i + 1
        y = index_in_alphabet(a[i])
        z = 26 - x + y
        if z &gt; 26:
            z %= 26
        output += chr(z - 1 + ord('a'))
    return output

if __name__ == '__main__':
    print()
    print("NOTE : Please enter all the alphabets in lowercase...")
    print()
    given = str(input("Please enter the word to be coded: "))
    print()
    print("The code for", given, "is:", encrypt(given))
</code></pre>
    </div>