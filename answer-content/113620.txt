<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The following is from <a href="https://en.wikipedia.org/wiki/Separation_of_concerns" rel="nofollow">Wikipedia</a></p>

<blockquote>
  <p>Modularity, and hence separation of concerns, is achieved by
  encapsulating information inside a section of code that has a
  well-defined interface</p>
</blockquote>

<p>That's why we should first think about the primary concerns of our application, and try to seperate these concerns into classes, which can then also be re-used if designed modularity in mind.</p>

<p>Therefore, Assuming what you are trying to achieve is something like this:</p>

<pre><code>ExecutionPlan aInterval = ExecutionPlan.Repeat(500, a);
ExecutionPlan bInterval = ExecutionPlan.Repeat(500, b);
ExecutionPlan cInterval = ExecutionPlan.Repeat(500, c);

ExecutionPlan.Delay(3500, () =&gt; { aInterval.Abort(); });
ExecutionPlan.Delay(7000, () =&gt; { bInterval.Abort(); });
ExecutionPlan.Delay(10500, () =&gt; { cInterval.Abort(); });
</code></pre>

<p>You can wrap your timers in ExecutionPlan class.</p>

<p>Using a class for wrapping the timers have many benefits.</p>

<ol>
<li>You keep track of class instances and not bare integer values,</li>
<li>You can re-use this class in other projects or forms (if designed &amp; implemented correctly),</li>
<li>You can extend this class to enrich it's functions</li>
<li>etc.. (There are an infinite number of benefits)</li>
</ol>

<p>Here is my ExecutionPlan class which works with an underlying <code>System.Timers.Timer</code>:</p>

<pre><code>public class ExecutionPlan : IDisposable
{
    private System.Timers.Timer planTimer;
    private Action planAction;
    bool isRepeatedPlan;

    private ExecutionPlan(int millisecondsDelay, Action planAction, bool isRepeatedPlan)
    {
        planTimer = new System.Timers.Timer(millisecondsDelay);
        planTimer.Elapsed += GenericTimerCallback;
        planTimer.Enabled = true;

        this.planAction = planAction;
        this.isRepeatedPlan = isRepeatedPlan;
    }

    public static ExecutionPlan Delay(int millisecondsDelay, Action planAction)
    {
        return new ExecutionPlan(millisecondsDelay, planAction, false);
    }

    public static ExecutionPlan Repeat(int millisecondsInterval, Action planAction)
    {
        return new ExecutionPlan(millisecondsInterval, planAction, true);
    }

    private void GenericTimerCallback(object sender, System.Timers.ElapsedEventArgs e)
    {
        planAction();
        if (!isRepeatedPlan)
        {
            Abort();
        }
    }

    public void Abort()
    {
        planTimer.Enabled = false;
        planTimer.Elapsed -= GenericTimerCallback;
    }

    public void Dispose()
    {
        if (planTimer != null)
        {
            Abort();
            planTimer.Dispose();
            planTimer = null;
        }
        else
        {
            throw new ObjectDisposedException(typeof(ExecutionPlan).Name);
        }
    }
}
</code></pre>
    </div>