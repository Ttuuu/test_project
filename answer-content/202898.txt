<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Bearing in mind that this comes a couple years late and you (the OP) haven't logged in since 9/ 2016, it might not be seen for some time.  Also, I don't really have much ruby experience so I will focus this review on the JavaScript code but <a href="https://codereview.stackexchange.com/questions/129629/electron-application-with-javascript-backdoor-and-ruby-command-line-listener#comment245127_129629">the comment</a> by <a href="https://codereview.stackexchange.com/users/105947/gcampbell">@gcampbell</a> about using heredocs sounds like a good suggestion for not having to manually include new line characters in the text.</p>

<h2>Feedback</h2>

<p>The code looks pretty succinct, though perhaps the error handling (e.g. for the Auto Launch promise fail handler) should be improved (i.e. more than empty functions). There appears to be a little bit of redundancy in the code (see suggestions below) but nothing excessive (e.g. copy-paste).</p>

<h2>Suggestions</h2>

<h3>Simplify <code>manageStartup()</code></h3>

<p>The conditional blocks could be simplified, from:</p>

<blockquote>
<pre><code>if (enable) {
    appLauncher.isEnabled().then(function(enabled){
        if(enabled) return;
        return appLauncher.enable();
    }).then(function(err){
        // TODO: Deal with error
    });
} else {
    appLauncher.isEnabled().then(function(enabled){
        if(!enabled) return;
        return appLauncher.disable();
    }).then(function(err){
        // TODO: Deal with error
    }); 
}
</code></pre>
</blockquote>

<p>Since both cases call <code>appLauncher.isEnabled()</code>, the check of <code>enable</code> can be moved into the promise callback. The real differences are when to return early and which method to call. For returning early, we could write out the logic like below:</p>

<pre><code>if((enable &amp;&amp; enabled) || (!enable &amp;&amp; !enabled)) {
</code></pre>

<p>This can be simplified using the negated value of <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#(Bitwise_XOR)" rel="nofollow noreferrer">XOR</a>:</p>

<pre><code>if(!(enable ^ enabled)) {
</code></pre>

<p>Then to call the method, we could use another <code>if-else</code> block:</p>

<pre><code>if(enable) {
    return appLauncher.enable();
}
return appLauncher.disable();
</code></pre>

<p>Or a ternary operator could be used to branch on the method name:</p>

<pre><code>return appLauncher[enable?'enable':'disable']();
</code></pre>

<h3>Don't loop through args to find one and continue</h3>

<p>Perhaps it is a moot point due to the fact that there may likely not be more than a few arguments but the code to find <code>--startup</code>:</p>

<blockquote>
<pre><code>// Accept --startup as command line argument to enable on startup.
process.argv.forEach(function (val, index, array) {
  if (val === "--startup") {
    manageStartup(true);
  }
})
</code></pre>
</blockquote>

<p>One could simply use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes" rel="nofollow noreferrer"><code>Array.includes()</code></a> to check for that argument:</p>

<pre><code>if (process.argv.includes('--startup')) {
    manageStartup(true);
}
</code></pre>

<h3>Extra function wrapper</h3>

<p>There is an extra function wrapper used here:</p>

<blockquote>
<pre><code>// Re-open if all windows are closed.
app.on('window-all-closed', function() {
    createWindow();
});
</code></pre>
</blockquote>

<p>This could be simplified by simply replacing the name of the function <code>createWindow</code> with the lambda/anonymous callback:</p>

<pre><code>app.on('window-all-closed', createWindow); 
</code></pre>

<p>It appears that the callback subscribed to the <a href="https://electronjs.org/docs/api/app#event-window-all-closed" rel="nofollow noreferrer"><code>window-all-closed</code></a> event is passed no arguments but if there were any, those would be passed to <code>createWindow()</code> in that case.</p>
    </div>