<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You can use <code>Object.entries</code> instead, to get an array of entries (an entry is an array of the key and the value), filter it by whether the value is undefined, then use <code>Object.fromEntries</code> to turn it back into an object:</p>

<pre><code>const propsSelector = (props: object) =&gt; {
    return Object.fromEntries(
        Object.entries(props)
            .filter(([_, val]) =&gt; val !== undefined)
    );
};
</code></pre>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const propsSelector = (props) =&gt; {
    return Object.fromEntries(
        Object.entries(props)
            .filter(([_, val]) =&gt; val !== undefined)
    );
};

console.log(propsSelector({
  foo: 'foo',
  bar: undefined
}));</code></pre>
</div>
</div>


<p>Also:</p>

<ul>
<li>Best to type functions precisely, and <a href="https://itnext.io/avoiding-any-in-typescript-advanced-types-and-their-usage-691b02ac345a" rel="nofollow noreferrer">avoid using <code>any</code></a>, since that loses type safety - if you use <code>any</code> everywhere, you may as well not be using Typescript at all, to some extent. If you don't know anything about what an argument will be, type it as <code>unknown</code> and use type guards to check it inside the function.</li>
<li><a href="https://softwareengineering.stackexchange.com/questions/278652/how-much-should-i-be-using-let-vs-const-in-es6">Don't use <code>let</code></a>, always use <code>const</code> when possible</li>
<li>When assigning a plain property to an object, no need for <code>Object.assign</code> - simple <code>=</code> assignment works just fine. (<code>newProps[prop] = props[prop];</code>)</li>
</ul>

<blockquote>
  <p>I would love a reduce like method for objects.</p>
</blockquote>

<p>You <em>can</em> use <code>reduce</code> here, but it's <a href="https://www.youtube.com/watch?v=qaGjS7-qWzg" rel="nofollow noreferrer">arguably not very appropriate</a> since the accumulator is the same object each time.</p>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const propsSelector = (props) =&gt; {
    return Object.entries(props).reduce((a, [prop, val]) =&gt; {
      if (val !== undefined) {
        a[prop] = val;
      }
      return a;
    }, {});
};

console.log(propsSelector({
  foo: 'foo',
  bar: undefined
}));</code></pre>
</div>
</div>

    </div>