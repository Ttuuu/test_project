<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Missing Include Headers</h2>

<p>There are 2 missing include headers, in event.hpp <code>#include &lt;functional&gt;</code> and <code>#include &lt;algorithm&gt;</code> are missing (<code>std::remove_if()</code>). In the example code <code>#include "event.hpp"</code> is missing.</p>

<h2>Indentation</h2>

<p>This may be a copy and paste problem from your editor to the mark up editor, but <code>namespace detail {</code> and all the code in it should be indented since it is within <code>namespace events {</code>.</p>

<p>To make the code easier to read and maintain it might be better if the <code>detail</code> namespace had it's own header file.</p>

<h2>DisconnectObject</h2>

<p>Since <code>(t.getThisPtr() != nullptr &amp;&amp; t.getThisPtr() == obj)</code> is a boolean expression the following code can be simplified:</p>

<pre><code>        struct DisconnectObject {

            template&lt;typename TObject, typename TContainer&gt;
            void operator()(TContainer &amp;t, TObject *obj) {
                t.slots.erase(std::remove_if(t.slots.begin(), t.slots.end(), [&amp;](typename TContainer::functional_type &amp;t){
                    /* Only delete when the pointer to an object
                     * is different from nullptr to prevent deleting
                     * non member function slots.
                     */
                    if(t.getThisPtr() != nullptr &amp;&amp; t.getThisPtr() == obj) {
                        return true;
                    } else{
                        return false;
                    }
                }), t.slots.end());
            }
        };
</code></pre>

<p>To</p>

<pre><code>        struct DisconnectObject {

            template&lt;typename TObject, typename TContainer&gt;
            void operator()(TContainer &amp;t, TObject *obj) {
                t.slots.erase(std::remove_if(t.slots.begin(), t.slots.end(), [&amp;](typename TContainer::functional_type &amp;t){
                    /* Only delete when the pointer to an object
                     * is different from nullptr to prevent deleting
                     * non member function slots.
                     */
                    return (t.getThisPtr() != nullptr &amp;&amp; t.getThisPtr() == obj);
                }), t.slots.end());
            }
        };
</code></pre>

<h2>Constructors for FunctionalHelper Inconsitently use Initializers</h2>

<p>There are 3 different constructors for <code>FunctionalHelper</code> On doesn't use initializers at all, but could consist of only initializers</p>

<pre><code>            FunctionalHelper() {
                this_ptr = nullptr;
                id = 0;
            }
</code></pre>

<p>Could be refactored as </p>

<pre><code>            FunctionalHelper()
            : this_ptr{nullptr}, id{0}
            {
            }

            template&lt;typename TObject&gt;
            FunctionalHelper(TObject *obj, typename TSignal::template member_function_pointer&lt;TObject&gt; ptr) {
                this_ptr = obj;
                id = FunctionalIdentifier&lt;TSignal, decltype(ptr), TObject&gt;::getID();

                /* Use of C++14 generic lambda makes calling the member
                 * function so much painless. Unpacking of the tuple happens inside the
                 * CallHelper::call function.
                 */
                fn = [obj, ptr](auto &amp;&amp; ... args){
                    return (obj-&gt;*ptr)(std::forward&lt;decltype(args)&gt;(args)...);
                };
            }
</code></pre>

<p>Could be refactored as </p>

<pre><code>            template&lt;typename TObject&gt;
            FunctionalHelper(TObject *obj, typename TSignal::template member_function_pointer&lt;TObject&gt; ptr)
            : this_ptr {obj}
            {
                id = FunctionalIdentifier&lt;TSignal, decltype(ptr), TObject&gt;::getID();
                fn = [obj, ptr](auto &amp;&amp; ... args){
                    return (obj-&gt;*ptr)(std::forward&lt;decltype(args)&gt;(args)...);
                };
            }
</code></pre>

<p>The functions <code>std::size_t getID()</code> and <code>void *getThisPtr()</code> are never used, this could indicate that the variables <code>id</code> and <code>this_ptr</code> are never used. Unused functions and unused variables can lead to problems during maintenance.</p>

<p>The variable <code>this_ptr</code> is a raw pointer, perhaps a smart pointer should be used?</p>
    </div>