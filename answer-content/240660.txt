<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I can share with you an example version of redis service such as getting subscriber or accessing to the other databases and also for catching connection issues. </p>

<p><code>ConfigurationOptions</code> allows us to initiaze service with more redis servers(redis pool), if needed you can easly change the constructor parameters.</p>

<p>Note that <code>ConnectionMultiplexer.Connect();</code> is <code>already static</code> method, so you can initialize service in class when needed as i did below.</p>

<p>In Addition, i assume that you take <code>ISerializer</code> for the object serialization, if it is, i added example <code>serialize</code>/<code>deserialize</code>for you. </p>

<p>I hope it helps you.</p>

<pre class="lang-c# prettyprint-override"><code>    public class CacheClient : ICacheClient
    {
        private readonly ConfigurationOptions configuration = null;
        private Lazy&lt;IConnectionMultiplexer&gt; _Connection = null;

        public CacheClient(string host = "localhost", int port = 6379, bool allowAdmin = false)
        {
            configuration = new ConfigurationOptions()
            {
                //for the redis pool so you can extent later if needed
                EndPoints = { { host, port }, },
                AllowAdmin = allowAdmin,
                //Password = "", //to the security for the production
                ClientName = "My Redis Client",
                ReconnectRetryPolicy = new LinearRetry(5000),
                AbortOnConnectFail = false,
            };
            _Connection = new Lazy&lt;IConnectionMultiplexer&gt;(() =&gt;
            {
                ConnectionMultiplexer redis = ConnectionMultiplexer.Connect(configuration);
                //redis.ErrorMessage += _Connection_ErrorMessage;
                //redis.InternalError += _Connection_InternalError;
                //redis.ConnectionFailed += _Connection_ConnectionFailed;
                //redis.ConnectionRestored += _Connection_ConnectionRestored;
                return redis;
            });
        }

        //for the 'GetSubscriber()' and another Databases
        public IConnectionMultiplexer Connection { get { return _Connection.Value; } }

        //for the default database
        public IDatabase Database =&gt; Connection.GetDatabase();

        public T JsonGet&lt;T&gt;(RedisKey key, CommandFlags flags = CommandFlags.None)
        {
            RedisValue rv = Database.StringGet(key, flags);
            if (!rv.HasValue)
                return default;
            T rgv = JsonConvert.DeserializeObject&lt;T&gt;(rv);
            return rgv;
        }

        public bool JsonSet(RedisKey key, object value, TimeSpan? expiry = null, When when = When.Always, CommandFlags flags = CommandFlags.None)
        {
            if (value == null) return false;
            return Database.StringSet(key, JsonConvert.SerializeObject(value), expiry, when, flags);
        }
        private void _Connection_ErrorMessage(object sender, RedisErrorEventArgs e)
        {
            throw new NotImplementedException();
        }

        //add/set cache methods removed for the sake of brevity.
    }

</code></pre>

<p><strong>Adding Service</strong></p>

<pre class="lang-c# prettyprint-override"><code> services.AddSingleton&lt;ICacheClient&gt;(new CacheClient(allowAdmin:true));

</code></pre>
    </div>