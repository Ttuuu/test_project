<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>The code wastes quite a few cycles rejecting palindromes less than <code>lo_bound</code>. It is not hard to find the smallest palindrome above <code>lo_bound</code>, and start from there.</p>
<p>If you are not comfortable constructing such palindrome, consider lifting the lead-in into the separate loop:</p>
<pre><code>    long num = 1;
    while (num &lt; lo_bound) {
        num = make_next_palindrome(queue);
    }
</code></pre>
</li>
<li><p>The entire business around <code>queue</code> is very non-obvious, and it takes a great mental effort to realize that it iterates palindromes. I recommend to factor this logic out into a class of its own, along the lines of</p>
<pre><code>class palindrome_iterator {
    std::queue&lt;...&gt; queue;
    // length, W, etc as necessary
public:
    palindrome_iterator(long start_num);
    long next();
};
</code></pre>
<p>This way the main loop is streamlined into</p>
<pre><code>    palindrome_iterator p_i(lo_bound);
    for (long num = p_i.next(); num &lt; hi_bound; num = p_i.next()) {
        superpalindromes += is_palindrome(num * num);
    }
</code></pre>
<p>An additional (and possibly more important) benefit of such refactoring is that it enables unit testing of palindrome generation logic (which really sreams to be unit tested).</p>
</li>
<li><p>I strongly advise against <code>-~length</code> trick. <code>length + 1</code> is much more clear, and for sure not slower.</p>
</li>
</ul>
    </div>