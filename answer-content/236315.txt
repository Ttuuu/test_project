<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Good things</h2>

<p>I like the functional approach taken with this code, and that some <a href="/questions/tagged/ecmascript-6" class="post-tag" title="show questions tagged 'ecmascript-6'" rel="tag">ecmascript-6</a> features like arrow functions are used.</p>

<h2>Suggestions</h2>

<h3><code>const</code> vs <code>let</code></h3>

<p>It would be wise to default to using <code>const</code> for any variable that doesn't need to be re-assigned. If you later determine a value should be re-assigned then switch it to using <code>let</code>. This helps prevent accidental re-assignment in the future.</p>

<h3>Use consistent indentation</h3>

<p>Some lines appear to be indented with two spaces, while others are indented with four. It is wise to use uniform indentation throughout the code.</p>

<h3>Use consistent line terminators</h3>

<p>Many lines are terminated with a semi-colon but some are not. Unless you completely understand rules of <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#Automatic_semicolon_insertion" rel="nofollow noreferrer">Automatic semicolon insertion</a> or are using a compiler/module bundler it is best to include line terminators. </p>

<h3>multiple calls to <code>Object.keys()</code> in loop</h3>

<p>Let us take a look at the following block:</p>

<blockquote>
<pre><code>for (let i = 1; i &lt; Object.keys(scoreSeries).length; i++) {
  if (scoreSeries[Object.keys(scoreSeries)[i]] &gt; scoreSeries[key]) {
    rank++
  }
} 
</code></pre>
</blockquote>

<p>For each iteration of the loop, <code>Object.keys()</code> is called twice. That function could be called once if the result is stored in a variable. </p>

<pre><code>const scoreKeys = Object.keys(scoreSeries)
for (let i = 1; i &lt; scoreKeys.length; i++) {
  if (scoreSeries[scoreKeys[i]] &gt; scoreSeries[key]) {
    rank++
  }
} 
</code></pre>

<p>The syntax could be simplified using a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of" rel="nofollow noreferrer"><code>for...of</code> loop</a>:</p>

<pre><code>const scoreKeys = Object.keys(scoreSeries)
for (const scoreKey of scoreKeys) {
  if (scoreSeries[scoreKey] &gt; scoreSeries[key]) {
    rank++
  }
} 
</code></pre>

<p>The whole function could be simplified with a more function approach using <code>.filter()</code>:</p>

<pre><code>//to calculate the ranking of each source
function calculateSourceRank(scoreSeries, key) {
    const scoreKeys = Object.keys(scoreSeries)
    return 1 + scoreKeys.filter(scoreKey =&gt; scoreSeries[scoreKey] &gt; scoreSeries[key]).length
}
</code></pre>

<p>A similar approach could be applied to <code>calculateFinalRank()</code></p>
    </div>