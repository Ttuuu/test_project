<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>General feedback</h1>
<p>For a <a href="/questions/tagged/beginner" class="post-tag" title="show questions tagged 'beginner'" rel="tag">beginner</a> this looks quite thorough, though I did spot a couple places where improvements can be made. See the suggestions below. It is really tempting to suggest <a href="/questions/tagged/ecmascript-6" class="post-tag" title="show questions tagged 'ecmascript-6'" rel="tag">ecmascript-6</a> features but I will resist the temptation because you seem to want to stick with ES5 for now.</p>
<h1>Suggestions</h1>
<h2>Strict mode</h2>
<p>Some functions contain:</p>
<blockquote>
<pre><code>'use_strict';
</code></pre>
</blockquote>
<p>This contains an underscore but should not.<sup><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode#Invoking_strict_mode" rel="nofollow noreferrer">1</a></sup></p>
<pre><code>'use strict';
</code></pre>
<p>And instead of adding it to each wrapping function, it could be added <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode#Strict_mode_for_scripts" rel="nofollow noreferrer">to the entire script</a>.</p>
<h2>Prototypical inheritance</h2>
<p>Apparently <code>Element</code> does not have any methods that are not overridden by sub-classes. However if there were any, those would not be inherited properly. For example, say there was a method called <code>getSides</code> on Element:</p>
<pre><code>Element.prototype.getSides = function() {
  return 3;
};
</code></pre>
<p>And one of the sub-classes needed to call that function</p>
<pre><code>Container.prototype.buildElement = function() {
    const sides = this.getSides();
</code></pre>
<p>This would lead to an error:</p>
<blockquote>
<p>Uncaught TypeError: this.getSides is not a function</p>
</blockquote>
<p>To be thorough the sub-classes should have the prototype set to <code>Element.prototype</code> -</p>
<p>e.g.</p>
<pre><code>Container.prototype = Object.create(Element.prototype);
Object.defineProperty(Container.prototype, 'constructor', { 
    value: Container, 
    enumerable: false, // so that it does not appear in 'for in' loop
    writable: true });  
Rectangle.prototype = Object.create(Element.prototype); 
Object.defineProperty(Rectangle.prototype, 'constructor', { 
    value: Rectangle, 
    enumerable: false, // so that it does not appear in 'for in' loop
    writable: true }); 
Ellipse.prototype = Object.create(Element.prototype);
Object.defineProperty(Ellipse.prototype, 'constructor', { 
    value: Ellipse, 
    enumerable: false, // so that it does not appear in 'for in' loop
    writable: true });
//... and so on... 
</code></pre>
<p>Refer to <a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Inheritance#Setting_Teachers_prototype_and_constructor_reference" rel="nofollow noreferrer">this section of the MDN page <em>Inheritance in JavaScript</em></a></p>
<hr>
<h2>Typo on Method name</h2>
<p>There is a typo in the Link method <code>camputePath</code> - presumably it should be <code>computePath</code>...</p>
<hr>
<h2>Method added to each instance instead of prototype</h2>
<p><code>computePath</code> is added as a method on each instance of <code>Link</code>. For better performance<sup><a href="https://stackoverflow.com/a/4508498/1575353">2</a></sup> it should be added to the prototype.</p>
    </div>