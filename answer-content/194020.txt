<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Bloat</h1>
<p>I started reviewing the code, most of it was good with a quick glance, I was going to comment on the long variable names and suggest you consider using common abbreviations to make the code more readable.</p>
<p>As I looked deeper I started to find more and more bloat. There is a point where code granularity is a burden on the source quality. One line functions called from only one location is not a good way to use functions. It make the code harder to follow, especial that the names are so long they all look the same and need to be read to find, rather than a quick scan.</p>
<p>The example</p>
<pre><code>(function (exports) {
    'use strict';

    const protocolPrefixRegex = new RegExp('^[a-z]+://'),

        // Known secure protocols handled by the browser
        internalSecureProtocols = ['https'],

        // Presumed secure since they are handled externally (see network.protocol-handler.external.[protocol])
        externallyHandledProtocols = ['mailto', 'news', 'nntp', 'snews'],

        // Presumed secure, commonly handled by add-ons or externally
        expectedExternallyHandledProtocols = ['tel'],

        secureProtocols = [].concat(
            internalSecureProtocols,
            externallyHandledProtocols,
            expectedExternallyHandledProtocols
        );

    function isSecureURL(url, protocol) {
        const urlProtocol = url.split(':', 1)[0].toLowerCase();

        if (secureProtocols.includes(urlProtocol)) {
            return true;
        }

        return !hasExplicitProtocol(url) &amp;&amp; (protocol === 'file:' || protocol === 'https:');
    }

    function hasExplicitProtocol(url) {
        return protocolPrefixRegex.test(url.toLowerCase());
    }

    exports.hasExplicitProtocol = hasExplicitProtocol;
    exports.isSecureURL = isSecureURL;
}(this));
</code></pre>
<p>It was not until I read it that I realized most of it is completely unneeded.</p>
<p>With identical functionality is the following</p>
<pre><code>;(function (exports) {
    'use strict';
    const secure = ['https', 'mailto', 'news', 'nntp', 'snews', 'tel'];
    const protoPrefix = /^[a-z]+:\/\//;

    exports.isSecureURL = (url, protocol) =&gt; {
        url = url.toLowerCase();
        if (secure.includes(url.split(':', 1)[0])) { return true }
        return !protoPrefix.test(url) &amp;&amp; (protocol=== 'file:' || protocol === 'https:');
    }
}(this));
</code></pre>
<p>The rest is similar with many redundancies and bad use of functions (too granular)</p>
    </div>