<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Concept</h2>

<p>Current security research recommends <a href="https://www.microsoft.com/en-us/research/publication/password-guidance/" rel="nofollow noreferrer">eliminating character composition requirements</a>. It's more important to blacklist common weak passwords. Also, <a href="https://protonmail.com/blog/protonmail-com-blog-password-vs-passphrase/" rel="nofollow noreferrer">passphrases</a> are a good alternative to passwords. For the purposes of this code review, though, I'll play along with your original premise.</p>

<h2>Style</h2>

<p><a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP 8</a>, the official Python style guide, recommends <code>lower_case_with_underscores</code> for variable names. <code>Err_mess</code> violates that guideline for no good reason.</p>

<h2>Regexes</h2>

<p>You don't need the capturing parentheses, if you're not going to do anything with the capture groups. You also don't need the <code>+</code> modifiers, since the requirement is for just one character of each class.</p>

<p>Within a character class (inside square brackets), most characters lose their special meanings. You don't need to escape <code>?</code> and <code>*</code> with backslashes.</p>

<h2>Design</h2>

<p>You're performing each check twice: once to check the password validity, and a second time to gather all of the failure reasons.</p>

<p>This code suffers from the fact that the rules are encoded in multiple places:</p>

<ul>
<li>the regular expressions (and their variable names)</li>
<li>the comments</li>
<li>the <code>if</code> statements (note especially the length check, which breaks the pattern)</li>
<li>the error message strings </li>
</ul>

<p>It would be better to treat all of the rules as data, uniformly, and have a single statement that performs all of the checks.</p>

<pre><code>import re

pw_to_check = input('please enter the password to be checked:')

rules = [
    ('password is too short', r'.{8}'),
    ('password needs at least one lower case character', r'[a-z]'),
    ('password needs at least one upper case character', r'[A-Z]'),
    ('password needs at least one special character', r'[-_?!@#$%^&amp;*]'),
    ('password needs at least one number', r'[0-9]'),
]

err_msg = '\n'.join(
    req
    for req, regex in rules
    if not re.search(regex, pw_to_check)
)

print(err_msg or 'password is ok')
</code></pre>
    </div>