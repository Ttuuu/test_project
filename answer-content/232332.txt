<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In the face of all else the assembler assumes a 16bit flat binary, so all that is required is;</p>

<blockquote>
  <p>~$ nasm ?.asm -o?.com</p>
</blockquote>

<p>Although not wrong, but even <strong>bits 16</strong> is redundant. In operating system development you might <strong>use32</strong> or <strong>use64</strong> to utilize those instruction sets, but it would still be a flat binary file. Otherwise, the only thing that makes this type of executable unique is;</p>

<pre><code>    org 0x100
</code></pre>

<p>This establishes the entry point, so a label like <strong>main</strong> is unnecessary unless it is required to branch back to the beginning of the application.</p>

<p>As to the question I asked in your original post, knowing what resources you have to deal with is monumentally important. DOS provides a lot of utility that can be found <a href="http://www.ctyme.com/intr/int.htm" rel="nofollow noreferrer">here</a>, therefore this</p>

<pre><code>    mov     dx, Prompt
    mov     ah, WRITE
    int    DOS
</code></pre>

<p>replaces all of this</p>

<pre><code>    putstring:
        cmp     byte [di], 0 ; see if the current byte is a null terminator
        je      .done        ; nope keep printing
    .continue:
        mov     dl, [di]     ; grab the next character of the string
        mov     dh, 0        ; print it
        call    putchar
        inc     di           ; move to the next character
        jmp     putstring
    .done:
        ret
</code></pre>

<p>by terminating string with what DOS expects as so</p>

<pre><code>    Prompt   db   13, 10, 13, 10, 'Please enter your first name: $'
</code></pre>

<p>and because CR/LF is embedded in string now, this can be eliminated.</p>

<pre><code>    mov    dx, 13       ; write a newline for sanity
   call    putchar
   mov     dx, 10
   call    putchar
</code></pre>

<p>Input as such</p>

<pre><code>; Read string from operator
    mov     dx, InpBuff
    mov     ah, READ
    int     DOS

; To a buffer specified with Max input of 128 chars. -1 is just a place holder
; which will be replace by the number of characters entered.

    InpBuff:  db   128, -1  
</code></pre>

<p>The input is terminated with 0x0D and must be replaced with '$'. This little snippet does that.</p>

<pre><code>; Terminate this input with '$'
    mov     bx, dx
    movzx   ax, byte [bx+1]
    inc     al
    inc     al
    add     bx, ax
    mov     byte [bx], '$'
</code></pre>

<p>replaces these</p>

<pre><code>    ; no parameters
    ; returns a char in ax
    getchar:
        mov     ah, 0        ; call interrupt x16 sub interrupt 0
        int     0x16
        mov     ah, 0
        ret

    ; takes an address to write to in di
    ; writes to address until a newline is encountered
    ; returns nothing
    getstring:
        call    getchar      ; read a character
        cmp     ax, 13       ; dos has two ascii characters for new lines 13 then 10
        je      .done        ; its not a 13, whew...
        cmp     ax, 10       ; check for 10 now
        je      .done        ; its not a 10, whew...
        mov     [di], al     ; write the character to the current byte
        inc     di           ; move to the next address
        mov     dx, ax       ; dos doesn't print as it reads like windows, let's fix that
        call    putchar
        jmp     getstring
</code></pre>

<p>So all in all this code is almost 50% smaller (91 bytes vs 163) and only because I've utilized what DOS provides. If I was to have utilized BIOS calls, then my code would not have been that much smaller, maybe 5-10 %.</p>

<pre><code>           org 0x100

          DOS equ   33      ; = 21H
        WRITE equ    9
         READ equ   10

        ; Display initial prompting
            mov     dx, Prompt
            mov      ah, WRITE
            int    DOS

        ; Read string from operator
            mov     dx, InpBuff
            mov     ah, READ
            int     DOS

        ; Terminate this input with '$'
            mov     bx, dx
            movzx   ax, byte [bx+1]
            inc     al
            inc     al
            add     bx, ax
            mov     byte [bx], '$'

       ; Display next prompting
            push    dx        ; We will want this pointer again
            mov     dx, hello
            mov     ah, WRITE
            int     DOS

            pop     dx
            inc     dx        ; Bump over max and actual lengths
            inc     dx
            int     DOS       
            ret

      Prompt   db   13, 10, 13, 10, 'Please enter your first name: $'
       hello   db   10, 10, 9, 'Hello, $'
     InpBuff:  db   128, -1  
</code></pre>

<p>I changed the formatting of hello slightly just you can see the difference and experiment a little and replace 10's with 13's @ hello and watch what happens.</p>
    </div>