<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A big issue with your solution is that you have to repeat yourself a lot, even when you have a macro to help you. I've come up with an alternative that doesn't use macros at all, and reduces the amount of repetition, although it still is more verbose that I would like. It uses the following class, which is similar to your <code>class encapsulate</code>, except that it doesn't store a pointer to a setter function, but instead has virtual getter and setter functions that can be overridden in a derived class:</p>

<pre><code>template&lt;typename T&gt;
class property
{
protected:
    T v;

    virtual const T &amp;get(void) const {
        return v;
    }

    virtual void set(const T &amp;o) {
        v = o;
    }

public:
    property() {}
    property(const T &amp;v_) { set(v_); }
    property &amp;operator=(const int &amp;o) { set(o); return *this; }
    operator T() const { return get(); }
};
</code></pre>

<p>So now you can declare and use a property variable this way:</p>

<pre><code>property&lt;int&gt; foo;
foo = 42;
</code></pre>

<p>When you assign a value to <code>foo</code>, it will call <code>operator=()</code>, which in turn will call the function <code>set()</code>. The trick is that since this is a virtual function, you can create a class or struct that inherits <code>property&lt;int&gt;</code>, and override the <code>set()</code> function. You can make use of the fact that you can declare a class or struct within another class or struct, and that you don't have to give them a name. It looks a bit weird at first, but it looks like this:</p>

<pre><code>struct: property&lt;int&gt; {      // declare a nameless struct that inherits from property&lt;&gt;
    void set(const int &amp;o) { // override the set() function
        ...;
    }
} bar;                       // declare a variable named foo with this type
</code></pre>

<p>The main problem is that while a bare property variable works perfectly fine:</p>

<pre><code>property&lt;int&gt; foo;
foo = 42;
</code></pre>

<p>The moment you inherit from it, the derived class has an implicitly defined assignment operator which hides the one in the base class. To get the one from the base class back, you have to add <code>using property::operator=;</code> to the body of the derived class. The same goes for the constructor that takes a value.</p>

<p>Here is your <code>class A</code> converted to use <code>class property</code>:</p>

<pre><code>template&lt;typename T&gt;
class A
{
public:
    struct: property&lt;T&gt; {
        using property::operator=; // required for assigning

        void set(const T &amp;other) {
            std::cout &lt;&lt; "Setting value..." &lt;&lt; endl;
            property::set(other);
        }
    } v;

    struct: property&lt;double&gt; {
        using property::operator=; // required for assigning
        using property::property;  // required for initialization to explicit value

        void set(const T &amp;gl) {
            if (gl &lt; 0)
               property::set(0);
            else if (gl &gt; 1)
               property::set(1);
            else
               property::set(gl);
        }
    } g = 0;
};
</code></pre>

<p>Another option that avoids having to add the <code>using</code> statements is to make the derived property struct hidden, and add a base property reference to it that is public, like so:</p>

<pre><code>class example {
    struct: property&lt;int&gt; {
        void set(const int &amp;o) { ... }
    } foo_;

public:
    property&lt;int&gt; &amp;foo = foo_;
};
</code></pre>

<p>When assigning a value to <code>foo</code>, it doesn't know it's actually a derived class, so it will directly call <code>operator=</code> from the base class, which is what we want.</p>

<p>Perhaps the above <code>class property</code> can be combined with a macro that hides the verbosity. For example:</p>

<pre><code>#define PROPERTY(type, setter) \
struct: property&lt;type&gt; { \
    using property::property; \
    using property::operator=; \
    void set(const T &amp;value) { property::set(setter(value)); } \
}
</code></pre>

<p>This way, you can provide the name of a function that acts as the setter, or even a lambda. For example:</p>

<pre><code>class B {
    static float invert(float x) {
        return -x;
    }

public:
    PROPERTY(float, invert) foo;
    PROPERTY(int, [](int v){ return v * v; }) bar = 0;
};
</code></pre>

<p>The drawback of this macro is that you can't easily use non-static member functions as getters and setters.</p>
    </div>