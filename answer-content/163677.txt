<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If your array is completely "empty" your current method will throw an exeption because it will try to get <code>array[-1]</code>.</p>

<p>Just use a <code>for</code> loop starting at <code>0</code> and if you find the first <code>0</code> return index-1. For the case that the whole buffer is filled return <code>array.Length - 1</code>.  </p>

<p><strong>Update</strong>:  </p>

<p>As it seems it is possible that there are <code>0</code> values in between valid data like <code>[+][+][+][+][ ][ ][ ][+][+][+][ ]...[ ]</code>. Hence going from start to end of the array doesn't seem a reliable action.  </p>

<p>Using a <code>for</code> loop instead of using the while loop enables your code to do the <code>empty</code> check as well like so  </p>

<pre><code>public const int NotFound = -1;
public static int GetPositionOfLastByteWithData(this byte[] array)
{
    for (int i = array.Length - 1; i &gt; -1; i--)
    {
        if (array[i] &gt; 0) { return i; }
    }
    return NotFound;
}  
</code></pre>

<hr>

<p>As you are talking about streams in your question, wouldn't it be better to store the index of the last written byte ? This would be the easiest and the most safe variant because, assuming you are reading exactly <code>10</code> bytes from the stream and later on you need exactly these <code>10</code> bytes to restore the read data. If the last byte of that stream would be a <code>0</code> like<br>
<strong>[+][+][+][+][+][+][+][+][+][ ]</strong>[ ][ ][ ][ ]...[ ]  </p>

<p>both methods, yours and mine, would return <code>8</code> but the really read byte count would be <code>9</code>.  </p>
    </div>