<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Nomenclature</h2>
<p><code>create_grid</code> does not just create the grid - it runs the entire game and then kills the process. It should be divided up into multiple functions, but that aside, it does not do what's on the tin.</p>
<h2>Forced-exit</h2>
<p>Your use of <code>sys.exit()</code> is not a great idea. What if a unit tester (who would have a difficult time anyway, given the size of your function) wanted to test multiple runs of <code>create_grid</code>? Or what if a different caller wanted to run your game, and then perform some other cleanup after?</p>
<h2>Round-to-multiple</h2>
<p>This:</p>
<pre><code>mouse_x // 20 * 20, mouse_y // 20 * 20
</code></pre>
<p>is a little awkward. An alternative is</p>
<pre><code>mouse_x - mouse_x%20, mouse_y - mouse_y%20
</code></pre>
<h2>Early-return</h2>
<p>I would find</p>
<pre><code>    if mine_count == 0:
        board[i][j] = -1
    else:
        board[i][j] = mine_count
        return
    for cell in neighbors:
        if 0 &lt;= i + cell[0] &lt; m and 0 &lt;= j + cell[1] &lt; n:
            uncover(i + cell[0], j + cell[1], m, n, board, neighbors) #call neighbors
</code></pre>
<p>more legible as</p>
<pre><code>    if mine_count == 0:
        board[i][j] = -1
        for cell in neighbors:
            if 0 &lt;= i + cell[0] &lt; m and 0 &lt;= j + cell[1] &lt; n:
                uncover(i + cell[0], j + cell[1], m, n, board, neighbors) #call neighbors
    else:
        board[i][j] = mine_count
</code></pre>
    </div>