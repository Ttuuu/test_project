<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Why do the getters for <code>Entry</code> return const references?  <code>getEntryType</code>, in particular, does not benefit at all from returning a reference since it just returns an enum value (which is the same size or smaller than what would be returned for the reference).</p>

<p><code>getParentDirectory</code> should be a const function.</p>

<p>If the first three members of <code>Entry</code> are const members, why is <code>m_parent</code> not const (<code>Directory * const m_parentDirectory</code>)?</p>

<p>In the <code>Directory</code> class, if <code>list</code> would return the number of entries found, that would avoid the need to call <code>count</code> (and iterate thru the directory twice) in the <code>listEntries</code> function.  <code>list</code> can be a <code>const</code> function, and the for loop should use <code>const auto &amp;entry</code>.</p>

<p><code>countEntries</code> and <code>checkEntry</code> can also be const functions.</p>

<p>Why does <code>countEntries</code> return an <code>int</code>?  You can't have negative entries in a directory, and if you use <code>std::size_t</code> then you won't need to do the casting with the return value, and just <code>return std::count_if</code> directly.  Additionally, <code>countEntries</code> won't work if passed an <code>EntryType</code> of <code>ANY_TYPE</code>.</p>

<p><code>checkEntry</code> can be simplified a bit by removing the <code>if</code> and separate returns and replacing them with <code>return findEntry != entries.end();</code>, possibly replacing the <code>findEntry</code> value with the <code>find_if</code> call.  (<code>findEntry</code> is misnamed; <code>foundEntry</code> would be better.)</p>

<p>Nether <code>makeDirectory</code> or <code>makeFile</code> return or report any sort of error if the entry already exists.</p>

<p>The uses of <code>this-&gt;</code> in <code>listDirectory</code> and <code>changeDirectory</code> are unnecessary.  That can also both be const functions.</p>

<p><code>deleteEntry</code> and <code>checkEntry</code> both use the same <code>find_if</code>.  This could be moved into a separate function, which can then be used by <code>changeDirectory</code> as well.</p>

<p>When you make the default <code>root</code> entry in <code>FileSystem</code>, you explicitly create an entry for ".", which none of the subdirectories have.  Is this necessary?  This will also allow someone to "rmdir ." from the root.</p>

<p>Your "del" command can be used to delete a directory, which is probably not intended since you have an explicit command for that.  You can also remove a non-empty directory.</p>

<p>With a little bit of adjustment, you can create a table with commands and function pointers for <code>processCommand</code> to use, rather than using nested if/elses.</p>

<p>You might want to look over <a href="https://stackoverflow.com/q/10231349/5231607">this question</a> on Stack Overflow about whether to pass strings by value or reference.</p>
    </div>