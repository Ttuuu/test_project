<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Unused header</h1>
<p>We use nothing from <code>&lt;cmath&gt;</code>, so it need not be included.</p>
<h1>This should be a function, not a class</h1>
<p>Putting all code into a class suggests you have a background in Java or similar.</p>
<p>In C++, we can (and should) use ordinary functions for operations that are mathematically functions.  In this case, we have a <em>pure</em> function: it has no state, and should always give the same result for any given input.</p>
<p>If it's part of your program requirements that it must provide this (unhelpfully-named) class, then comment that.  I'd recommend that you still write a plain function, and simply provide an <em>adapter</em> to conform to the requirements:</p>
<pre><code>int reverse_decimal_digits(int i);

class Solution 
{
    public:
        int reverse(int i) { return reverse_decimal_digits(i); }
}
</code></pre>
<h1>Choice of data type</h1>
<p>If we're processing a 32-bit integer, then we should be using <code>std::int32_t</code>.  Plain <code>int</code> isn't necessarily large enough (it can be any size from <strong>16 bits</strong> upwards).</p>
<h1>Incorrect test</h1>
<p>Given <code>int i</code>, then <strong><code>i &gt; INT_MAX || i &lt; INT_MIN</code></strong> is false <em>by definition</em>.  The requirement you quote is (my emphasis):</p>
<blockquote>
<p>When the <strong>reversed</strong> integer overflows, return 0.</p>
</blockquote>
<h1>Not all integers have a negative</h1>
<p>Beware of overflow here:</p>
<blockquote>
<pre><code>        if(i &lt; 0) { 
            sign = -1;
            i = i*sign;
        }
</code></pre>
</blockquote>
<p>On 2s-complement systems, <code>-1 * INT_MIN</code> is undefined.</p>
<p>It turns out that we don't need this step, as in modern C++, the <code>%</code> operator can be used predictably with negative numbers to our advantage (see my modified code, below).</p>
<h1>Don't do I/O from a pure function</h1>
<p>I guess this is some leftover debugging that should have been removed:</p>
<blockquote>
<pre><code>        std::cout &lt;&lt; reversed &lt;&lt; '\n';
</code></pre>
</blockquote>
<h1>Additional tests</h1>
<p>It's good that you've included some unit tests - I wish more people would do that!</p>
<p>Do think about which values to test.  Your choice agrees with mine somewhat, but diverges later:</p>
<ul>
<li><code>0</code>, <code>1</code> and <code>-1</code> for the three simplest cases.</li>
<li>positive and negative two-digit numbers (e.g. <code>12</code> and <code>-23</code>).</li>
<li>smallest and largest allowable <em>input</em> (<code>INT32_MIN</code> and <code>INT32_MAX</code>).</li>
<li>smallest and largest allowable <em>result</em>, and the first overflow in each direction in first and last digits (±<code>1463847412</code>, ±<code>1463847413</code>,  ±<code>1563847412</code>).</li>
</ul>
<p>Don't be tempted to over-test.  Tests need to be maintained, too, so try to limit the tests to those that exercise the limits within the implementation.</p>
<h1>Minor improvements</h1>
<p>The scope of <code>pop</code> can be reduced to within the loop.  And perhaps a better name would be <code>digit</code>?</p>
<h1><code>noexcept</code> and <code>constexpr</code></h1>
<p>Can we annotate the function with <code>noexcept</code> and <code>constexpr</code>?</p>
<h1>Future</h1>
<p>Should the number base be hard-coded to 10?  Perhaps there's a use for a reverser that works in arbitrary bases.  Certainly, base-16 is convenient for testing.</p>
<hr>
<h1>Modified code</h1>
<p>I've used GoogleTest rather than plain C <code>assert()</code>, so as to get better messages when a test fails, but any testing method is fine.</p>
<pre><code>#include &lt;cstdint&gt;

constexpr std::int32_t
reverse_digits(std::int32_t i, int base = 10) noexcept
{
    std::int32_t reversed = 0;
    const bool negative = i &lt; 0;

    while (negative ? i &lt;= -base : i &gt;= base) {
        auto const digit = i % base; // negative if i &lt; 0
        reversed = reversed * base + digit;
        i /= base;
    }

    // final digit may cause overflow
    const bool overflow =
        negative
        ? (reversed &lt; (INT32_MIN - i) / base)
        : (reversed &gt; (INT32_MAX - i) / base);
    if (overflow) {
        return 0;
    }

    return reversed * base + i;
}
</code></pre>

<pre><code>#include &lt;gtest/gtest.h&gt;

TEST(Reverse, decimal)
{
    EXPECT_EQ(0, reverse_digits(0));
    EXPECT_EQ(1, reverse_digits(1));
    EXPECT_EQ(-1, reverse_digits(-1));

    EXPECT_EQ(21, reverse_digits(12));
    EXPECT_EQ(-32, reverse_digits(-23));

    EXPECT_EQ(0, reverse_digits(INT32_MIN));
    EXPECT_EQ(0, reverse_digits(INT32_MAX));

    EXPECT_EQ(2147483641, reverse_digits(1463847412));
    EXPECT_EQ(0, reverse_digits(1463847413));
    EXPECT_EQ(0, reverse_digits(1563847412));

    EXPECT_EQ(-2147483641, reverse_digits(-1463847412));
    EXPECT_EQ(0, reverse_digits(-1463847413));
    EXPECT_EQ(0, reverse_digits(-1563847412));
}

TEST(Reverse, hexadecimal)
{
    EXPECT_EQ(0x7ffffff7, reverse_digits(0x7ffffff7, 16));
    EXPECT_EQ(0, reverse_digits(0x10000008, 16));

    EXPECT_EQ(-0x7ffffff7, reverse_digits(-0x7ffffff7, 16));
    EXPECT_EQ(0, reverse_digits(-0x10000008, 16));
}
</code></pre>
    </div>