<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Portability</h3>

<p>You mentioned portability as one of your top concerns.
The commands used by the script limit it to certain systems:</p>

<ul>
<li><code>swapon</code>, <code>mkswap</code>: these are common in Linux systems</li>
<li><code>fallocate</code>: available in Linux, supporting certain filesystems depending on the version</li>
<li><code>sudo</code>: available in a wide range of systems but not always installed by default</li>
</ul>

<p>This script is not portable, and I think that's not a real concern.
It's designed to run in Linux systems with the supported filesystems.
I think it wouldn't make sense to try to make it "portable".</p>

<hr>

<p>In less specialized scripts that conceptually could make sense in many systems,
using <code>echo -e</code> would be a portability concern.
<code>echo</code> without flags works reliably,
but its flags are not equally well supported in all systems.
It's best to write scripts in a way to use only <code>echo</code> without any flags.</p>

<h3>Broken help message</h3>

<p>This is clearly a bug:</p>

<blockquote>
<pre><code>echo -e help_text
</code></pre>
</blockquote>

<p>You probably intended this instead:</p>

<pre><code>echo -e "$help_text"
</code></pre>

<p>And even then, the output would be pretty weird:</p>

<blockquote>
<pre><code>/n&gt;&gt; Documentation:



Usage: script.sh [-h]

Creates a new permanent swapfile


where:

    -h  displays help text
</code></pre>
</blockquote>

<p>Probably this is not what you intended.</p>

<h3>Readability</h3>

<p>I find the script very hard to read. For example this:</p>

<blockquote>
<pre><code>help_text="/n&gt;&gt; Documentation:\n\n\t

Usage: $(basename "$0") [-h]\n\t 
Creates a new permanent swapfile\n\n\t
where:\n\t\t
    -h  displays help text"
</code></pre>
</blockquote>

<p>Probably you intended something more like this:</p>

<pre><code>help_text="
&gt;&gt; Documentation:

    Usage: $(basename "$0") [-h]
    Creates a new permanent swapfile

    where:
        -h  displays help text"
</code></pre>

<p>Which will output:</p>

<blockquote>
<pre><code>&gt;&gt; Documentation:

    Usage: a.sh [-h]
    Creates a new permanent swapfile

    where:
        -h  displays help text
</code></pre>
</blockquote>

<p>There is no need for escape sequences like <code>\n</code> and <code>\t</code>,
you can write them directly inside strings,
a lot easier to read,
and now you can <code>echo "$help_text"</code> without the <code>-e</code> flag and it just works.</p>

<h3>Keep it simple</h3>

<p>It's a good rule of thumb to keep things as simple as possible.
For example you used the <code>-e</code> in all <code>echo</code> statements,
even though most of them don't need it.
I suggest to question the purpose of every single element,
and cut out anything that isn't essential.</p>

<hr>

<p>What is going on here?</p>

<blockquote>
<pre><code>?(-)@(-h|-help) )
</code></pre>
</blockquote>

<p>Why not simply this:</p>

<pre><code>-h|-help )
</code></pre>

<hr>

<p>Some usability features can be simpler too.
For example:</p>

<blockquote>
<pre><code>[Yy]|[Yy][Ee][Ss] )
</code></pre>
</blockquote>

<p>How about like this instead:</p>

<pre><code>[Yy]|yes|Yes )
</code></pre>

<p>The second is a lot easier to read.
Sure, it's not the same thing,
because the first version will match <code>yEs</code> too and the second won't.
But is that really a problem?</p>

<h3>Quoting</h3>

<p>One of the most important things to learn properly in Bash scripting is how quoting works.
It's not that complicated though.
Whenever you use a variable as command arguments,
they should be within double-quotes.</p>

<p>For example these statements are unsafe:</p>

<blockquote>
<pre><code>case $1 in

while $retry; do
</code></pre>
</blockquote>

<p>They should be:</p>

<pre><code>case "$1" in

while "$retry"; do
</code></pre>

<h3><code>sudo</code> in scripts</h3>

<p>It's not great when a script needs to use <code>sudo</code>,
because it can be annoying to get prompted for a password unexpectedly.</p>

<p>This script cannot do anything useful without <code>sudo</code>.
It would be better to remove all the <code>sudo</code> from inside the script,
and make it required to call the script itself with <code>sudo</code>.
Add a simple check at the top of the script:</p>

<pre><code>if [ "$(id -u)" != 0 ]; then
    echo "This script must be run as root or with sudo $0" &gt;&amp;2
    exit 1
fi
</code></pre>

<h3>Check yourself</h3>

<p>There is a nice online service where you can paste your shell script and it points out bugs and safety issues, called <a href="https://www.shellcheck.net/#" rel="nofollow noreferrer">shellcheck.net</a>.</p>
    </div>