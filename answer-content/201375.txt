<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Generally excellent code.  Although you claim it's "minimal", the only non-trivial thing that seems to be missing is user-specified allocation.</p>

<p>Good use of <code>noexcept</code> and <code>const</code> throughout.</p>

<p>There's an argument for reducing duplication by making the iterator itself be a template, so that the constness of the iterant is in the template argument:</p>

<pre><code>template&lt;typename T&gt;
class forward_list
{
public:
    template&lt;typename S = T&gt;
    class iterator_impl;
    using iterator = iterator_impl&lt;T&gt;;
    using const_iterator = iterator_impl&lt;const T&gt;;
}
</code></pre>



<pre><code>template&lt;typename T&gt;
template&lt;typename S&gt;
class forward_list&lt;T&gt;::iterator_impl
{
    node_type* node = nullptr;
    bool before_begin = false;

public:
    friend class forward_list&lt;T&gt;;

    using value_type = S;
    using pointer = S*;
    using reference = S&amp;;
    using difference_type = std::ptrdiff_t;
    using iterator_category = std::forward_iterator_tag;

    iterator_impl() = default;
    iterator_impl(node_type* node, bool before_begin = false) noexcept;

    // allow converson from mutable iterator to const iterator
    template&lt;typename U, typename = std::enable_if_t&lt;std::is_assignable_v&lt;S*&amp;, U*&gt;&gt;&gt;
    iterator_impl(iterator_impl&lt;U&gt; other) noexcept
        : node{other.node}, before_begin{other.before_begin} {}
    template&lt;typename U, typename = std::enable_if_t&lt;std::is_assignable_v&lt;S*&amp;, U*&gt;&gt;&gt;
    iterator_impl&amp; operator=(iterator_impl&lt;U&gt; other) noexcept
    { node = other.node;  before_begin = other.before_begin; return *this; }

    iterator_impl&amp; operator++();
    iterator_impl operator++(int);

    reference operator*() const;
    pointer operator-&gt;() const;

    bool operator==(iterator_impl other) const noexcept;
    bool operator!=(iterator_impl other) const noexcept;
};
</code></pre>



<pre><code>template&lt;typename T&gt;
template&lt;typename S&gt;
forward_list&lt;T&gt;::iterator_impl&lt;S&gt;::iterator_impl(node_type* node, bool before_begin) noexcept : node{ node }, before_begin{ before_begin } {}

template&lt;typename T&gt;
template&lt;typename S&gt;
auto forward_list&lt;T&gt;::iterator_impl&lt;S&gt;::operator++() -&gt; iterator_impl&amp;
{
    if (before_begin) before_begin = false;
    else node = node-&gt;next.get();

    return *this;
}

template&lt;typename T&gt;
template&lt;typename S&gt;
auto forward_list&lt;T&gt;::iterator_impl&lt;S&gt;::operator++(int) -&gt; iterator_impl
{
    auto copy = *this;
    ++*this;
    return copy;
}

template&lt;typename T&gt;
template&lt;typename S&gt;
auto forward_list&lt;T&gt;::iterator_impl&lt;S&gt;::operator*() const -&gt; reference
{
    return node-&gt;data;
}

template&lt;typename T&gt;
template&lt;typename S&gt;
auto forward_list&lt;T&gt;::iterator_impl&lt;S&gt;::operator-&gt;() const -&gt; pointer
{
    return &amp;node-&gt;data;
}

template&lt;typename T&gt;
template&lt;typename S&gt;
bool forward_list&lt;T&gt;::iterator_impl&lt;S&gt;::operator==(iterator_impl other) const noexcept
{
    return node == other.node &amp;&amp; before_begin == other.before_begin;
}

template&lt;typename T&gt;
template&lt;typename S&gt;
bool forward_list&lt;T&gt;::iterator_impl&lt;S&gt;::operator!=(iterator_impl other) const noexcept
{
    return !(*this == other);
}
</code></pre>
    </div>