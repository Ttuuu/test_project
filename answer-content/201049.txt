<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Move <code>public</code> section of the class to the top</h3>
<p>I prefer, and suggest others, to put the <code>public</code> section of a class before the <code>protected</code> and <code>private</code> sections.</p>
<p>The rationale for it is that users of the class want to see the <code>public</code> section of the class. It is less important to them to see what's in the <code>protected</code> and <code>private</code> sections. It does not make sense that they will have to wade through less important sections of the class before they get to the most important section.</p>
<pre><code>template &lt;class T&gt;
class SingleLinkedList {

  public:

    // Constructors
    SingleLinkedList() = default;   // empty constructor 

    ...

  protected:

  private:

    struct Node {
       ...
    };

    ...
};    
</code></pre>
<h3>Remove <code>display(std::ostream &amp;str)</code></h3>
<p>I understand that you need the function at the moment to display the contents of an object. However, it's too tightly coupled with the class. Different users may want to display an object of the class differently. You can't support that easily if <code>display</code> is the only function the user has access to.</p>
<p>This should be motivation for you to implement the iterator class. When you have the iterator class ready, the <code>operator&lt;&lt;(std::ostream&amp;, SingleLinkedList const&amp;)</code> function can be moved out of the class and the <code>friend</code>-ship won't be necessary. The current functionality can be moved to a non-member function.</p>
<p>Also note that the list object should be a <code>const&amp;</code>.</p>
<pre><code>template &lt;typename T&gt;
std::ostream&amp; operator&lt;&lt;(std::ostream &amp;str, SingleLinkedList&lt;T&gt; const&amp; list)
{
   // This will work as soon as you have begin() and end() member functions
   for ( auto const&amp; item : list )
   {   
       str &lt;&lt; item &lt;&lt; "\t";
   }
   return str;
}
</code></pre>
<h3><code>insertPosition</code> needs a better name</h3>
<p>You are not inserting a position. You are inserting an item at a position. For that reason, I think <code>insert_at_position</code> is more appropriate and follows the naming convention of other functions.</p>
<p>If <code>insert_at_position</code> is too verbose, the simpler name, <code>insert</code> will be better than <code>insertPosition</code>, IMO.</p>
<h3><code>deleteSpecific</code> needs a better name</h3>
<p>I think the simpler name <code>remove()</code> will be better.</p>
<p>If you decide to keep <code>deleteSpecific</code>, I would suggest changing it to <code>delete_specific</code> to keep the function names consistent.</p>
    </div>