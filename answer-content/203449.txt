<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>template&lt;typename, typename = void&gt;
struct supports_less_than : std::false_type { };

template&lt;typename T&gt;
struct supports_less_than&lt;T, std::void_t&lt;decltype(std::declval&lt;T&amp;&gt;() &lt;= std::declval&lt;T&amp;&gt;())&gt;&gt; : std::true_type { };
</code></pre>

<p>First, you're being a little bit more verbose than you need to. (Particularly <code>std::void_t&lt;decltype(...)&gt;</code> is a code smell IMO.)
Second, <code>has_less_than</code> is a <em>terrible</em> name for a trait that detects whether the type supports the <code>&lt;=</code> operator! Was this a typo? I'm going to assume it was.</p>

<pre><code>template&lt;class, class=void&gt; struct has_less_than : std::false_type {};

template&lt;class T&gt; struct has_less_than&lt;T, decltype(void(
    std::declval&lt;T&gt;() &lt; std::declval&lt;T&gt;()
))&gt; : std::true_type {};
</code></pre>

<hr>

<pre><code>template&lt;typename LinkageType, typename ValueType&gt;
class LinkedList {
protected:
    template&lt;typename ShadowedLinkageType, typename = void&gt; struct ListNode;
</code></pre>

<p>You probably knew, as you were writing "<code>ShadowedLinkageType</code>", that it felt wrong. Follow that feeling. Since <code>ShadowedLinkageType</code> is always equal to <code>LinkageType</code>, why does it need to be a parameter at all? Here's how I'd write it:</p>

<pre><code>template&lt;class LinkageType, class T&gt;
class LinkedList {
protected:
    struct ListNode;
    // ...
};

template&lt;class T&gt;
struct LinkedList&lt;SingleLinkage, T&gt;::ListNode {
    T data;
    std::unique_ptr&lt;ListNode&gt; next = nullptr;

    // ...
};

template&lt;class T&gt;
struct LinkedList&lt;DoubleLinkage, T&gt;::ListNode {
    T data;
    std::unique_ptr&lt;ListNode&gt; next = nullptr;
    ListNode *prev = nullptr;

    // ...
};
</code></pre>

<p>EDITED TO ADD: If the above doesn't work (as indicated in the comments), then I'd try</p>

<pre><code>template&lt;class LinkageType, class T&gt;
struct LinkedListNode;

template&lt;class LinkageType, class T&gt;
class LinkedList {
protected:
    using ListNode = LinkedListNode&lt;LinkageType, T&gt;;
    // ...
};

template&lt;class T&gt;
struct LinkedListNode&lt;SingleLinkage, T&gt; {
    T data;
    std::unique_ptr&lt;LinkedListNode&gt; next = nullptr;

    // ...
};

template&lt;class T&gt;
struct LinkedListNode&lt;DoubleLinkage, T&gt; {
    T data;
    std::unique_ptr&lt;LinkedListNode&gt; next = nullptr;
    LinkedListNode *prev = nullptr;

    // ...
};
</code></pre>

<p>which would certainly work (and be simpler, into the bargain).</p>

<hr>

<p>Here is a <em>super duper common</em> newbie mistake (i.e. you are in good company):</p>

<pre><code>explicit ListNode(const ValueType&amp; data) : data{data} { }
explicit ListNode(ValueType&amp;&amp; data) : data{std::forward&lt;ValueType&gt;(data)} { }
</code></pre>

<p>Use <code>std::forward</code> for forwarding references; use <code>std::move</code> for rvalue references. You can tell the difference between a forwarding reference <code>T&amp;&amp;</code> and an rvalue reference <code>T&amp;&amp;</code> by looking to see whether the <code>T</code> is <em>deduced</em> or not. In this case, it's not deduced — it's pinned to be exactly <code>ValueType</code> — and therefore what we have is a plain old rvalue reference, and therefore you should be using <code>std::move</code>.</p>

<p>(Now, to be fair, the difference in this case is noticeable only when <code>ValueType</code> itself is a reference type, in which case I'm sure you have bigger problems. But it's important to build your muscle memory for good habits like "forward forwarding references and move rvalues," so that you can spend your actual brain cells on less trivial stuff.)</p>

<hr>

<pre><code>template&lt;typename ValueType&gt;
class ListIterator : public NodeIterator&lt;typename LinkedList&lt;DoubleLinkage, ValueType&gt;::node_type, ValueType&gt;
{
    bool is_reverse() override { return false; }
</code></pre>

<p>I believe Frank's answer touched on this point already: mixing OOP polymorphism with value semantics is generally a bad idea. And in this case, you've not only got inheritance, you've got <em>public</em> inheritance! Which means I can take a <code>ListIterator</code> and slice it:</p>

<pre><code>auto it = foo.rbegin();
assert(it-&gt;is_reverse());

NodeIterator&amp; it2 = it;
assert(it2-&gt;is_reverse());

NodeIterator it3 = it;
assert(not it3-&gt;is_reverse());
</code></pre>

<p><a href="https://en.cppreference.com/w/cpp/language/class_template_argument_deduction" rel="nofollow noreferrer">Class template argument deduction (CTAD)</a> makes this particularly easy in C++17; but in C++14 just imagine that I wasn't so lazy and figured out what template parameters to use on <code>NodeIterator</code>, there.</p>

<p>You should eliminate the <code>virtual bool is_reverse</code>; it's not serving any purpose here. Make <code>IsReverse</code> a template parameter of the iterator type.</p>
    </div>