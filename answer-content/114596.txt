<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>On top of @BenC answer which provide an efficient writting for a straitforward algorithm, I'll provide a version where you build the resulting list already sorted, saving you some computation.</p>

<p>The main thing is that @BenC answer can easily be extended to provide more than 2 rolls of the dice, but by further examinating the structure of the desired output we can craft the required list specificaly for 2 rolls:</p>

<ul>
<li>Each number between <code>2</code> and <code>2 * num_sides</code> appears in the output sequence;</li>
<li>The first number appear 1 time, the second number appear 2 times, â€¦, the nth number appear n time until a number appears <code>num_sides</code> times;</li>
<li>After that, the next number appears one time less than the previous one, with the number <code>2 * num_sides</code> appearing once.</li>
</ul>

<p>Given that, we can iterate through <code>range(1, num_sides)</code> to get the number of ascending items, and then through <code>range(num_sides, 0, -1)</code> to get the number of descending items. The value of the items starts at 2 and end when we finish iterating.</p>

<h2>First implementation</h2>

<pre><code>def sum_of_two_rolls(num_sides):
    result = []
    value = 2

    for num_repeat in range(1, num_sides):
        for _ in range(num_repeat):
            result.append(value)
        value += 1

    for num_repeat in range(num_sides, 0, -1):
        for _ in range(num_repeat):
            result.append(value)
        value += 1

    return result
</code></pre>

<p>Note the use of <code>_</code> when we do not care about the variable used to iterate and just want to loop a certain amount of times.</p>

<p>But this solution is not very elegant since it contains two loops that are very similar.</p>

<h2>Second implementation</h2>

<p>We now want to merge both <code>for</code> loops since they perform the same operation. But we cannot use <code>+</code> to concatenate two <code>range</code> objects (assuming Python 3, since in Python 2 range returns lists and you can concatenate lists using <code>+</code>). However, since <code>range</code> objects are iterators, we can make good use of <a href="https://docs.python.org/3.5/library/itertools.html#itertools.chain"><code>itertools.chain</code></a> which concatenates any number of iterators:</p>

<pre><code>from itertools import chain

def sum_of_two_rolls(num_sides):
    result = []
    value = 2

    for num_repeat in chain(range(1, num_sides), range(num_sides, 0, -1)):
        for _ in range(num_repeat):
            result.append(value)
        value += 1

    return result
</code></pre>

<p>But we can make this code even more pythonic.</p>

<h2>Third implementation</h2>

<p>The first thing to note is that using some sort of counter value being incremented inside a for loop is a common anti-pattern and is best served with <code>enumerate</code>. In our case, we need to start at <code>2</code> instead of the default <code>0</code> usualy used with <code>enumerate</code>. Luckily, <code>enumerate</code>'s optional second argument let us do that:</p>

<pre><code>from itertools import chain

def sum_of_two_rolls(num_sides):
    result = []

    for value, repeats in enumerate(chain(range(1, num_sides), range(num_sides, 0, -1)), 2):
        for _ in range(repeats):
            result.append(value)

     return result
</code></pre>

<h2>Last improvement: the one-liner</h2>

<p>Lastly, creating an empty list and appending to it in a loop is also an anti-pattern since a list-comprehension is most likely possible to use and has better performances.</p>

<p>Since this is the only computation that the function is doing, you can directly return the list comprehension:</p>

<pre><code>from itertools import chain

def sum_of_two_rolls(num_sides):
    return [v for v, r in enumerate(chain(range(1, num_sides), range(num_sides, 0, -1)), 2) for _ in range(r)]
</code></pre>

<p>Or splitted over several lines for better readability:</p>

<pre><code>from itertools import chain

def sum_of_two_rolls(num_sides):
    return [v
            for v, r in enumerate(
                chain(range(1, num_sides), range(num_sides, 0, -1)),
                2)
            for _ in range(r)]
</code></pre>
    </div>