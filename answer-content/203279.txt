<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A handful of small issues missed by other reviewers:</p>

<hr>

<pre><code>int int_A = (int) 'A';
</code></pre>

<p><code>'A'</code> is already of type <code>int</code>, so the cast is pointless.  Even if this were C++, <code>char</code> â†’ <code>int</code> is a promotion, so wouldn't need a cast.  We could (and should) show that we don't modify it:</p>

<pre><code>const int int_A = 'A';
</code></pre>

<p>But really, <code>int_A</code> is no easier to read, and no more informative, than plain <code>'A'</code> where you need it.</p>

<hr>

<pre><code>if (argc != 2)
{
    // (error message)
    return 1;
}
else if (argc == 2)
{
    // (more code)
</code></pre>

<p>The <code>else if</code> test is redundant.  If we're still in the function, then we passed the first test:</p>

<pre><code>if (argc != 2)
{
    // (error message)
    return 1;
}

// (more code)
</code></pre>

<p>Reducing the amount of nesting is a Good Thing, as it means less state for anyone reading the code to keep track of.</p>

<hr>

<p>Another redundancy:</p>

<pre><code>    if (isalpha(plaintext[j]))
    {
        // ...
    }
    else
    {
        printf("%c", plaintext[j]);
    }

    if (isalpha(plaintext[j]))
    {
        i += 1;
    }
</code></pre>

<p>Here, the <code>i += 1</code> (or more idiomatically, <code>++i</code>) could be moved into the first <code>if</code>:</p>

<pre><code>    if (isalpha(plaintext[j]))
    {
        // ...
        ++i;
    }
    else
    {
        printf("%c", plaintext[j]);
    }
</code></pre>

<hr>

<p>Alphabetic arithmetic isn't portable the way it's done here.  You're probably using a system that encodes characters using (a superset of) ASCII, but C supports other encodings, notably EBCDIC, where letters are not all consecutive.  If you don't want to deal with these codings, it's reasonable to require that letters are consecutive, but in that case, we ought to be explicit about the requirement.</p>

<p>Here's a test that may be some help:</p>

<pre><code>#if  'Z' - 'A' != 25  ||  'z' - 'a' != 25
#error Unsuitable character encoding
#endif
</code></pre>

<p>But do note that the runtime character coding can be changed using <code>setlocale()</code>, so this isn't a guarantee that can be used for every program.</p>

<p>Also be aware that the results of <code>isupper()</code>, <code>islower()</code> and <code>isalpha()</code> depend on the selected locale, too.  In particular, there's no guarantee that <code>isalpha()</code> necessarily implies <code>isupper() || islower()</code>, which this program depends on (though that is true for the default (<code>"C"</code>) locale, so we're okay as long as we don't use <code>setlocale()</code>).</p>

<p>Sorry if this all sounds complicated; character coding is unfortunately a big and messy subject!</p>

<hr>

<p>Finally, we don't need to read the whole input into memory before we start encoding.  Since output only depends on the current character and the program state (key and number of characters read so far), we can read character by character like this:</p>

<pre><code>int c;
while ((c = getchar()) != EOF) {
    if (isalpha(c)) {
        // c = encoded(c)
    }
    if (putchar(c) == EOF) {
        perror("putchar");
        return EXIT_FAILURE;
    }
}
</code></pre>
    </div>