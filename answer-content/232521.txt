<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>From a pure Python standpoint, a list is already a stack if you narrow its methods down to only <code>pop</code> and <code>append</code>.
<code>l.append(x)</code> will put <code>x</code> at the end of the list, and <code>l.pop()</code> will remove the last element of the list and return it.</p>

<p>So generally speaking, when you need a stack in Python, you'll just make a list and use <code>append</code> and <code>pop</code>.
The same goes for queues, but you'd use <code>l.pop(0)</code> instead of <code>l.pop()</code>.</p>

<p>Considering this, I would say it's just plain unpythonic to implement a stack structure; instead, just use a <code>list</code>, that really is a dequeue and thus can be used as both a stack and a queue.</p>

<hr>

<p>That said, I understand that <code>append</code> is not the common naming for the stack structure, and that <code>push</code> makes the intent of the method more clear.
Therefore, I would implement a stack as a direct subclass of <code>list</code>, and just "rename" the <code>append</code> method:</p>

<pre><code>class Stack(list):
    def push(self, x):
        super().append(x)
</code></pre>

<p>If I wanted to make it more fool-proof, I'd also override <code>pop</code> so that it cannot take a parameter, unlike <code>list.pop</code></p>

<pre><code>class Stack(list):
    ...
    def pop(self):
        return super().pop()
</code></pre>

<p>Now the operation performed by the <code>peek</code> method can usually be done by <code>stack[-1]</code> (where <code>stack</code> is an instance of <code>Stack</code>), but it could be implemented just as follows:</p>

<pre><code>class Stack(list):
    ...
    def peek(self):
        return self[-1]
</code></pre>

<hr>

<p><em>Addendum</em></p>

<p>Some comments advising against subclassing <code>list</code> came out, notably mentioning the "composition over inheritance" principle.
That was an enriching discussion, and I'd like to amend my answer accordingly.</p>

<p>I'm no expert in design patterns, but as I understand it, this principle advocates the use of composition instead of inheritance to provide more flexibility.
One benefit of composition here is clearly to provide a cleaner API, with only the common stack methods and not <code>insert</code>, <code>remove</code> and so on that come from <code>list</code> and have no sense for stacks.</p>

<p>On the other hand, the inheritance I suggested happens to violate Liskov's substitution principle.
Although there's no problem with adding <code>push</code> and <code>peek</code> methods with respect to this principle, my implementation changes the signature of the <code>pop</code> method, which is not allowed by this principle.</p>

<p>From this perspective, I think that not only composition is valid here and adds in the benefit of a clean API, but also that inheritance is plain incorrect here.
Therefore, if I were forced to implement a stack class in Python, I'd go with composition and do as follows:</p>

<pre><code>class Stack:
    def __init__(self):
        self._data = []

    def push(self, x):
        self._data.append(x)

    def pop(self):
        return self._data.pop()

    def peek(self)
        return self._data[-1]

    def __len__(self):
        return len(self._data)
</code></pre>

<p>But again, as I said, I would never do that in real life because a list can already serve as a stack, and <code>stack = []</code> would perfectly convey how <code>stack</code> would be intended to be used.</p>

<hr>

<p><strong>References:</strong></p>

<p>On the Liskov substitution principle:</p>

<ul>
<li><a href="https://en.wikipedia.org/wiki/Liskov_substitution_principle" rel="nofollow noreferrer">https://en.wikipedia.org/wiki/Liskov_substitution_principle</a></li>
<li><a href="https://stackoverflow.com/q/56860/7051394">https://stackoverflow.com/q/56860/7051394</a></li>
</ul>

<p>On composition over inheritance:</p>

<ul>
<li><a href="https://en.wikipedia.org/wiki/Composition_over_inheritance" rel="nofollow noreferrer">https://en.wikipedia.org/wiki/Composition_over_inheritance</a></li>
<li><a href="https://stackoverflow.com/a/53354/7051394">https://stackoverflow.com/a/53354/7051394</a> (also happens to mention Liskov principle)</li>
</ul>
    </div>