<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>Don't use leading or double underscores.</p>

<p>"<em>Each identifier that contains a double underscore __ or begins with an underscore followed by an uppercase letter is reserved to the implementation for any use.</em>" (<a href="https://www.ida.liu.se/~TDDD38/ISOCPP/lex.name.html#3.1" rel="nofollow noreferrer">5.10.3.1</a>)<br>
"<em>Each identifier that begins with an underscore is reserved to the implementation for use as a name in the global namespace.</em>" (<a href="https://www.ida.liu.se/~TDDD38/ISOCPP/lex.name.html#3.2" rel="nofollow noreferrer">5.10.3.2</a>)</p></li>
<li><p>Only include what you need.</p>

<p>Don't include "stdafx.h" if you don't use it.</p></li>
<li><p>Avoid raw pointers</p>

<p><code>buffer = new char[bufferSize];</code> creates an array of dynamic storage duration and default-initializes it to indeterminate values.
The destructor must destroy it with <code>delete[] buffer;</code>.</p>

<p>Now that you have a raw pointer as a data member you need to worry about copy construction, copy assignment, move construction and move assignment.</p>

<p>Without a user-defined copy constructor the compiler will create one for you, which copies all data member. Now after <code>CyclicBuffer a(10); CyclicBuffer b(a);</code> both <code>a.buffer</code> and <code>b.buffer</code> point to the same array. As soon as the second destructor tries to <code>delete[]</code> the array you are in UB-Land. (The same is true for the copy assignment operator.)<br>
The compiler will NOT create a move constructor or move assignment operator for you because there is a user-defined destructor.</p>

<p>But there's an alternative: Instead of creating and destroying the array manually you can just use a <code>std::vector&lt;char&gt;</code>. Now you don't need a destructor and the compiler-generated special member functions do everything you need.</p></li>
<li><p>Prefer classes without destructors.</p>

<p>If a class implements a destructor it should probably also implement a copy constructor, a copy assignment operator, a move constructor and a move assignment operator. That's commonly known as the <a href="https://en.cppreference.com/w/cpp/language/rule_of_three#Rule_of_five" rel="nofollow noreferrer">Rule of Five</a>.</p>

<p>IMHO an even better approach is the <a href="https://en.cppreference.com/w/cpp/language/rule_of_three#Rule_of_zero" rel="nofollow noreferrer">Rule of Zero</a>. "<em>Classes that have custom destructors, copy/move constructors or copy/move assignment operators should deal exclusively with ownership (which follows from the Single Responsibility Principle). Other classes should not have custom destructors, copy/move constructors or copy/move assignment operators.</em>"</p>

<p>You can follow that rule by using a <code>std::vector&lt;char&gt;</code> for your <code>buffer</code>.</p></li>
<li><p><code>clearCycBuffer(int buffSize)</code></p>

<p>What happens if you pass a <code>buffSize</code> different from <code>this-&gt;bufferSize</code>?
This function should not take a parameter and use <code>bufferSize</code> instead.</p>

<p>You use a traditional <code>for</code>-loop. Consider using <code>std::fill</code> or <code>std::fill_n</code>.
It's easier to write and read: <code>std::fill_n(buffer, bufferSize, '0');</code> or <code>std::fill(begin(buffer), end(buffer), '0');</code> if you use a <code>std::vector</code>.</p></li>
<li><p>Avoid the preprocessor if you can.</p>

<p>Before <code>main()</code> you use the preprocessor to define a constant <code>SIZE</code>. There is no reason not to use a constant variable for that: <code>const int SIZE = 32;</code></p></li>
<li><p>Naming</p>

<p>The name <code>clearCycBuff</code> is redundant and should be renamed to <code>clear</code>.</p>

<p>If I'd read a method name <code>getChar()</code> or <code>setChar()</code> I would not instantly assume that it advances the buffer. Personally, instead of "get"/"set" I would prefer verbs like "read"/"write" or "shift"/"push" or something similar.</p></li>
<li><p>Additional methods</p>

<p>As a user of your class I would want some methods to access the capacity and the number of elements available to <code>getChar()</code> and I'd want to have a way to see if the buffer is empty or full.</p>

<p>I suggest:</p>

<ul>
<li><code>int capacity() const</code>;</li>
<li><code>int size() const;</code></li>
<li><code>bool empty() const;</code></li>
<li><code>bool full() const;</code></li>
</ul>

<p>More advance would be iterators and <code>begin()</code>/<code>end()</code> functions, so that CyclicBuffer works with the algorithms from the standard library.</p></li>
<li><p>Be clear about what you provide</p>

<p>With the current code it's valid to read more items from the buffer than were put into it. That may be a char of indeterminate value (for a newly constructed buffer), an item from a previous iteration or a <code>'0'</code> (after a <code>clearCycBuffer</code>).<br>
It's not clear why you set all your items to <code>'0'</code> in <code>clearCycBuffer</code> but don't set them to a meaningful value in the constructor. Also, without context <code>'0'</code> is a strange choice, maybe you wanted to write <code>'\0'</code>.</p>

<p>Add a comment or some documentation that describes if the user may read beyond what was written and what value will be returned.</p></li>
<li><p>Look at your competitors</p>

<p><a href="https://www.boost.org/doc/libs/1_65_1/doc/html/circular_buffer.html" rel="nofollow noreferrer">boost::circular_buffer</a> is a high quality implementation of a circular buffer and has an excellent documentation.</p>

<p>There is a <a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0059r3.pdf" rel="nofollow noreferrer">proposal to add a ring span to the standard library</a>. John Kalb, Matt Bentley and Odin Holms talk about it in on <a href="https://youtu.be/SFAJ238rBNw?t=19m57s" rel="nofollow noreferrer">CppChat</a>.</p>

<p>You can also find several discussions about the API and the implementation of circular buffers, e.g.</p>

<ul>
<li><a href="https://codereview.stackexchange.com/q/134911/186497">Circular Buffer C++11 Implementation</a> here on Code Review</li>
<li><a href="https://accu.org/index.php/journals/389" rel="nofollow noreferrer">STL-style Circular Buffers By Example</a> from ACCU's Overload Journal.</li>
<li><a href="https://embeddedartistry.com/blog/2017/4/6/circular-buffers-in-cc" rel="nofollow noreferrer">Creating a Circular Buffer in C and C++</a> on the Embedded Artistry blog.</li>
</ul></li>
</ul>
    </div>