<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>std::random_device seeder;
std::mt19937 engine(seeder());
</code></pre>

<p>While this is fine for small hobby projects or testing, you'll likely want to properly seed <code>std::mt19937</code>.  Let's break this down into explicit steps to understand what is going on.</p>

<pre><code>std::random_device rdev;     
</code></pre>

<p><code>std::random_device</code> asks the OS for system-provided randomness.  It can be, and sometimes is, implemented as a simple PRNG with a fixed seed, meaning you could produce the same sequence on every run.  Arguably worse than using <code>time(NULL)</code> as a source for entropy.</p>

<pre><code>auto random_seed{rdev()};
</code></pre>

<p>Invoking the random device object returns an <code>unsigned int</code>.  This is normally 4 bytes, but it could be 2.</p>

<pre><code>std::seed_seq seeder{random_seed};
</code></pre>

<p>A seed sequence is created using that one 2/4-byte value.</p>

<pre><code>std::mt19937 engine(seeder);
</code></pre>

<p>You are now attempting to initialize the internal 624 32-bit integer state of the Mersenne Twister with that one value.  This leads to issues related to </p>

<ul>
<li>predictability - searching for the seed is simple as there are only 2^32 possibilities.</li>
<li>bias - values like 7 and 13 will never be generated. Two different seeds produce 0, 12 different seeds produce 1226181350.</li>
</ul>

<p>If you are interested the perils/pitfalls of random bit generation and <code>std::seed_seq</code>, read through the comments <a href="https://gist.github.com/imneme/540829265469e673d045" rel="noreferrer">here</a>.</p>

<hr>

<pre><code> typedef std::vector&lt;int&gt; list_type;
</code></pre>

<p>If you are expecting a fixed length container, consider using <code>std::array</code> over <code>std::vector</code>.</p>

<hr>

<pre><code>    std::map&lt;int, int&gt; cnt;
</code></pre>

<p><code>std::map</code> is overkill for counting a contiguous range of values.  <code>std::unordered_map</code> is better. An array-based counting sort would be best.</p>

<pre><code>    for (int i = 1; i &lt;= 6; ++i)
    {
        cnt[i] = 0;
    }

    for (auto &amp;d : die_rolls)
    {
        ++cnt[d];
    }
</code></pre>

<p><code>std::map</code> and <code>std::unordered_map</code> will default construct a value into the container if the key doesn't exist.  You can skip the value initialization for these containers.</p>

<hr>

<pre><code>    if (cnt[1] == 3) { ret += 1000; }
    /* ... */
</code></pre>

<p>You can do some strength reduction here by reorganizing the related comparisons and converting some of the branches into integer multiplications.  Since you limit the number of dice to five, you can immediately stop checking the remaining triples once the first triple has been found.  </p>

<pre><code>    if (cnt[1] &gt;= 3) { score += 1000; cnt[1] -= 3; }
    else if (cnt[2] &gt;= 3) { score += 200; }
    else if (cnt[3] &gt;= 3) { score += 300; }
    else if (cnt[4] &gt;= 3) { score += 400; }
    else if (cnt[5] &gt;= 3) { score += 500; cnt[5] -= 3; }
    else if (cnt[6] &gt;= 3) { score += 600; }

    score += cnt[1] * 100 + cnt[5] * 50;
</code></pre>
    </div>