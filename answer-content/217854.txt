<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>When scanning through your code, the first thing I noticed was:</p>

<p>Your code is inconsistent regarding its formatting. </p>

<p>To fix this in Eclipse, select Window &gt; Preferences from the main menu, search for "Save actions" and activate the "Format Code" and "Organize Imports" items. Then right-click on your complete project and select "Format Source" (or similar).</p>

<hr>

<p>You do use a version control system like Git or Mercurial, so that you could undo every change quickly and without risk, do you? If not, start using it. It's worth it. Just learn the basics:</p>

<ul>
<li>initialize a repository</li>
<li>commit changes</li>
</ul>

<p>If you only learn these 2 things, you have a fully working backup and can ask knowledgeable people to help you out, whatever happens.</p>

<hr>

<p>There's a lot of boilerplate code in the <code>Appliance</code> class. You should either use Lombok or Kotlin to reduce the amount of code you have to write yourself.</p>

<p>When using Lombok, the code becomes:</p>

<pre><code>@lombok.Data
public class Appliance {
    private final String applianceCategory; //e.g Electricity
    private final ApplianceType applianceType; //e.g StrictAppliance like Refrigerator
    private final String applianceName; //e.g WashingMachine
    private final int usageTime;
    private final Time scheduledTime;
}
</code></pre>

<p>When using Kotlin, the code becomes:</p>

<pre><code>data class Appliance(
    val category: String, //e.g Electricity
    val type: ApplianceType, //e.g StrictAppliance like Refrigerator
    val name: String, //e.g WashingMachine
    val usageTime: int,
    val scheduledTime: Time)
</code></pre>

<p>In both styles you don't need to write down the redundant code for the constructor.</p>

<p>It is even more useful for the <code>Attribute</code> type since both of these styles generate the equals and hashCode methods for you, so you don't have to think about them anymore.</p>

<p>When you program the code that creates the <code>Attribute</code> objects in Kotlin, you don't need the builder anymore since in Kotlin you have named parameters. Instead of</p>

<pre><code>new Attribute("WindPower", 3.4, 13, 500)
</code></pre>

<p>you would write:</p>

<pre><code>Appliance(
        category = "Electricity",
        type = ApplianceType.StrictAppliance,
        name = "WashingMachine",
        usageTime = 13,
        scheduledTime = Time(1234L))
</code></pre>

<p>Now there is no chance anymore to mix up the order of the arguments. No builder needed.</p>

<hr>

<p>The method <code>addAppliance</code> returns <code>false</code> if it fails to do anything, but you never check that. The established way of signalling programming errors in Java is to <code>throw new IllegalArgumentException("reason")</code>. When you use that style, you cannot accidentally forget to check for errors.</p>

<hr>

<p>Indeed, you need to write unit tests. Especially for the more tricky algorithms like <code>min_cost</code>. That may seem still simple, but even after 25 years of experience my code contains awfully many bugs when I initially write it, and unit tests help a lot.</p>

<p>You should even extract the interesting algorithms into separate files, to make them easily testable. Currently <code>min_cost</code> is part of <code>DesignHECA</code>, but I doubt that this coupling is necessary. If you place the <code>min_cost</code> in a utility class called <code>Algorithms</code> instead, this makes it immediately clear that the algorithm is independent from your home energy management system.</p>
    </div>