<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>An API key only have to be unique enough to avoid collison nothing more and here you are doing to much to achieve this. For example the rehashing will incrase the chance for a collison.</p>

<p>I have created a class for generating unique keys for example an API key usage or simply for primary key in a database table.</p>

<pre><code>&lt;?php

final class Guid {

    private static $_empty = array("00000000", "0000", "0000", "0000", "000000000000");

    private static $_parseFormats = array(
        "D" =&gt; "/^[a-f\d]{8}(-[a-f\d]{4}){4}[a-f\d]{8}$/i",
        "N" =&gt; "/^[a-f\d]{8}([a-f\d]{4}){4}[a-f\d]{8}$/i",
        "B" =&gt; "/^(\{)?[a-f\d]{8}(-[a-f\d]{4}){4}[a-f\d]{8}(?(1)\})$/i",
        "P" =&gt; "/^(\()?[a-f\d]{8}(-[a-f\d]{4}){4}[a-f\d]{8}(?(1)\))$/i",
        "X" =&gt; "/^(\{0x)[a-f\d]{8}((,0x)[a-f\d]{4}){2}(,\{0x)[a-f\d]{2}((,0x)[a-f\d]{2}){7}(\}\})$/i"
    );

    public static function NewGuid() {
        $data = openssl_random_pseudo_bytes(16);

        $data[6] = chr(ord($data[6]) &amp; 0x0f | 0x40); // set version to 0010
        $data[8] = chr(ord($data[8]) &amp; 0x3f | 0x80); // set bits 6-7 to 10

        $parts = str_split(bin2hex($data), 4);
        $guid = new Guid();
        $guid-&gt;_parts = array(
            $parts[0] . $parts[1],
            $parts[2],
            $parts[3],
            $parts[4],
            $parts[5] . $parts[6] . $parts[7]
        );

        return $guid;
    }

    public static function TryParse($asString, &amp;$out_guid) {
        $out_guid = NULL;

        foreach (self::$_parseFormats as $format) {
            if (1 == preg_match($format, $asString)) {
                $clean = strtolower(str_replace(array("-", "{", "}", "(", ")", "0x", ","), "", $asString));
                $out_guid = new Guid();
                $out_guid-&gt;_parts = array(
                    substr($clean, 0, 8),
                    substr($clean, 8, 4),
                    substr($clean, 12, 4),
                    substr($clean, 16, 4),
                    substr($clean, 20, 12),
                );

                return true;
            }
        }

        return false;
    }

    public static function Parse($asString) {
        if (self::TryParse($asString, $out_guid)) {
            return $out_guid;
        }

        throw new Exception("Invalid Guid: " . $asString);
    }

    private $_parts;

    public function __construct() {
        $this-&gt;_parts = self::$_empty;
    }

    private static function _comparer(Guid $guid1, Guid $guid2) {
        return $guid1-&gt;_parts == $guid2-&gt;_parts;
    }

    public function Equals(ObjectBase $obj) {
        return self::_comparer($this, $obj);
    }

    public function ToString($format = NULL) {
        switch ($format) {
            case "";
            case "D";
                return implode("-", $this-&gt;_parts);
            case "N";
                return implode("", $this-&gt;_parts);
            case "B";
                return "{" . implode("-", $this-&gt;_parts) . "}";
            case "P";
                return "(" . implode("-", $this-&gt;_parts) . ")";
            case "X";
                $tmp = array(
                    "0x" . $this-&gt;_parts[0],
                    "0x" . $this-&gt;_parts[1],
                    "0x" . $this-&gt;_parts[2],
                    "{0x" . implode(",0x", str_split($this-&gt;_parts[3] . $this-&gt;_parts[4], 2)) . "}"
                );

                return "{" . implode(",", $tmp) . "}";
            default:
                throw new \Exception("Invalid Guid format" . $format);
        }
    }

    public function __toString() {
        return $this-&gt;ToString("D");
    }

}
</code></pre>

<p>The usage is easy:</p>

<pre><code>$apiKey = Guid::NewGuid();
</code></pre>

<p>Yes you can have different formats if you like, the default __toString() call will result in something like:</p>

<pre><code>f9168c5e-ceb2-4faa-b6bf-329bf39fa1e4
</code></pre>

<p>And you don't have to check for collisons becouse it has a really small chance to have two identical Guid generated with openssl_random_pseudo_bytes(). The only thing you have to have is a PHP installation with version 5.3.0 or higher but it's recommended anyway to have the most recent PHP version (now 5.5.7).</p>
    </div>