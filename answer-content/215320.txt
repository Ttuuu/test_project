<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>First</strong>: the runtime is O(wn), as it should be for this algorithm.</p>

<p>Consider a single run of <code>_LSBSort</code>. Let n be the length of <code>arr</code>. Clearly the first loop is time O(n). Let si be the length of <code>deques[i]</code>. Then the second loop is time
<span class="math-container">$$ O(s_1) + O(s_2) + \dots + O(s_{10}) = O(s_1 + s_2 + \dots + s_{10}).$$</span>
Noting that each element is present in exactly one of the deques, we conclude
<span class="math-container">$$s_1 + s_2 + \dots + s_{10} = n.$$</span>
Thus the entire method runs in time O(n). As it is called w times, we conclude the entire algorithm is O(wn) time.</p>

<p><strong>Second</strong>: some comments on the code.</p>

<ol>
<li>These methods should be static.</li>
<li>Use an <code>ArrayList</code> for <code>deque</code>. Arrays of generics are just too ugly.</li>
<li>Call the list <code>deques</code> because it is plural. </li>
<li>Initialize all the deques up front. Clear and reuse between iterations.</li>
<li>Use extended for loops throughout.</li>
<li>Use loop instead of recursion.</li>
</ol>

<pre><code>private static void LSBSort(int[] arr) {
    List&lt;ArrayDeque&lt;Integer&gt;&gt; deques = new ArrayList&lt;&gt;(10);
    for (int i = 0; i &lt; 10; i++) {
        deques.add(new ArrayDeque&lt;Integer&gt;());
    }

    for (int d = 1; d &lt;= 1000; d *= 10) {
        for(int i : arr) {
            deques.get((i / d) % 10).add(i);
        }

        int cursor = 0;
        for (Deque&lt;Integer&gt; D : deques) {
            for (Integer j : D) {
                arr[cursor++] = j;
            }

            D.clear();
        }
    }
}
</code></pre>
    </div>