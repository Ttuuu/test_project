<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>import java.sql.Date;
</code></pre>
</blockquote>

<p>You shouldn't need anything from <code>java.sql</code> unless you're using a relational database. <code>java.util.Date</code> would be more appropriate here (or nothing at all).</p>

<hr>

<blockquote>
<pre><code>public class FirstChallange {
</code></pre>
</blockquote>

<p><em>Challenge</em> has one <em>a</em> and two <em>e</em>s.</p>

<p>The name is not going to be very helpful in identifying the purpose of the class in six months' time, and there's no comment to say what the source of the challenge was either.</p>

<hr>

<blockquote>
<pre><code>    private static int removedNumbers;
    private static int numberQuantity;
    private static int lastNumberFound; 
    private static int cont;
    private static int pos3;
    private static int pos4;
    private static int pos7;    
</code></pre>
</blockquote>

<p>Variables should usually be in the narrowest scope possible. This means that static fields should be extremely rare.</p>

<hr>

<blockquote>
<pre><code>        long inicio = System.currentTimeMillis();  
</code></pre>
</blockquote>

<p>It's best to be consistent in the use of language: either name all the variables in Portuguese or name them all in English.</p>

<p>This line has trailing whitespace. If you can configure your IDE to automatically remove this, you will reduce the number of spurious changes which muddle revision control diffs.</p>

<hr>

<blockquote>
<pre><code>        DecimalFormat dfmt = new DecimalFormat("0");

        System.out.println(dfmt.format(lastNumberFound)); 
</code></pre>
</blockquote>

<p>That is heavily overkill for <code>System.out.println(lastNumberFound);</code></p>

<hr>

<blockquote>
<pre><code>        removedNumbers = 0;
        numberQuantity = 10000000;


        for (cont = 1; removedNumbers &lt;= numberQuantity; cont++) {      
            String str = new String(); 
            str = String.valueOf(cont);     

            pos3 = str.indexOf("3");
            pos4 = str.indexOf("4");
            pos7 = str.indexOf("7");
</code></pre>
</blockquote>

<p>Actually iterating over objects is rarely the best way to count them. Iteration with filtering even less so. If you spend some time thinking through the mathematics before you start writing code, there's an easy way to tackle this problem by base conversion which takes about 20 milliseconds.</p>
    </div>