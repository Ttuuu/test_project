<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You should read <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP 8</a> and get a linter; <a href="https://pypi.org/project/pycodestyle/" rel="nofollow noreferrer">pycodestyle</a>, <a href="https://pypi.org/project/pylint/" rel="nofollow noreferrer">pylint</a>, <a href="https://pypi.org/project/flake8/" rel="nofollow noreferrer">flake8</a>, <a href="https://pypi.org/project/prospector/" rel="nofollow noreferrer">prospector</a>, <a href="https://pypi.org/project/coala/" rel="nofollow noreferrer">coala</a>. It doesn't matter which one, just get one and use it.</p>

<ul>
<li>Indenting with 3 spaces is awful, no-one can easily interact with your code.<br>
I've never in my life seen 3 spaces for indentation, it makes me think your post is a joke.</li>
<li>Variables like <code>s</code>, <code>l</code> and  <code>ii</code> are useless.</li>
<li><p>It's really bad to put statements on the same line as other statements.</p>

<blockquote>
  <pre class="lang-py prettyprint-override"><code>if l == 0: return None
</code></pre>
</blockquote>

<p>The amount of times I've just not seen the <code>return None</code> with lines like this isn't funny. It's nearly 100%.</p></li>
</ul>

<hr>

<ul>
<li>Change your <code>if</code>, <code>elif</code>, <code>else</code> to guard statements and you can dedent your code.</li>
<li>There's no need for <code>while</code> <code>else</code>, you've not broken from the loop.</li>
<li>Returning <code>None</code> is just odd at best, change it to an empty string.</li>
<li>Taking a set as input is really strange, it causes you to have to do <code>next(iter(s))</code>. And you're not even exploiting the benefits of it.</li>
<li><p>Using iterators is clever, but not smart. You can just make a new list to contain all but the first value.</p>

<p>Additionally it doesn't really matter if you check against the first value because it's always going to be a subset of itself. Just seems like adding complexity for the sake of complexity.</p></li>
<li><p>You can remove the <code>if l == 1</code> check.</p></li>
</ul>

<pre class="lang-py prettyprint-override"><code>def common_start(values):
    if len(values) != 0:
        start = values[0]
        while start:
            if all(value.startswith(start) for value in values):
                return start
            start = start[:-1]
    return ""
</code></pre>

<hr>

<p>However this isn't the best. If there are <span class="math-container">\$s\$</span> values, and each have a length <span class="math-container">\$l\$</span> then your code runs in <span class="math-container">\$O(sl^2)\$</span> time.</p>

<p>Instead I'd suggest checking the first value against everything once - running in <span class="math-container">\$s\$</span> time. Since you do this <span class="math-container">\$l\$</span> times it runs in <span class="math-container">\$O(sl)\$</span> time.</p>

<p>To do so you can use <code>zip</code> to iterate through all the first characters, then second characters at the same time. From this you can check if they are the same and append them to a temporary list. Finally you return the contents of the list converted to one single string. In the end you would end up with something like <a href="https://codereview.stackexchange.com/users/43117/salparadise">salparadise</a> <a href="https://codereview.stackexchange.com/a/237341">created</a>.</p>

<p>Again I would still make an empty list or set as input return an empty string.</p>

<pre class="lang-py prettyprint-override"><code>def common(values):
    start = []
    for characters in zip(*values):
        if len(set(characters)) != 1:
            break
        start.append(characters[0])
    return ''.join(start)
</code></pre>
    </div>