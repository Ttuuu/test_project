<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Good job! I don't have a lot to comment on in this code. You have written straightforward clear code whose only complexity stems directly from the complexity of the operation it is performing. It would be good to include some of your external commentary (such as the renames of <code>R</code> and <code>n</code>) in the code itself to make it easier for someone to follow the documentation on wikipedia. You may want to include some of that documentation as well.</p>

<p>For reference, the rest of this review assumes that the code functions correctly; I don't have my math head on tonight.</p>

<p>There appears to be one case of redundant code, unless <code>m</code> can ever be <code>1</code>, resulting in an empty range and thus no reassignment of <code>i</code>. Otherwise you can skip the assignment to <code>i</code> in the following:</p>

<pre><code>i, e = 0, 2
for i in xrange(1, m):
    ...
</code></pre>

<p>There are a number of small <a href="http://en.wikipedia.org/wiki/Strength_reduction">strength-reduction</a> optimizations you might consider, but in Python their impact is likely to be minimized - definitely profile before heading too deeply down the optimization path. For example in the following while loop:</p>

<pre><code># Factor p-1 on the form q * 2^s (with Q odd)
q, s = p - 1, 0
while q % 2 == 0:
    s += 1
    q //= 2
</code></pre>

<p>Both operations on <code>q</code> can be reduced. The modulus can be rewritten as a binary and <code>q &amp; 1</code>, and the division as a binary shift <code>q &gt;&gt;= 1</code>. Alternately, you can use <a href="http://docs.python.org/2/library/functions.html#divmod">divmod</a> to perform both operations at once.</p>

<p>Similarly, <code>2**(m - i - 1)</code> is identical to <code>1 &lt;&lt; (m - i - 1)</code> for non-negative exponents.</p>
    </div>