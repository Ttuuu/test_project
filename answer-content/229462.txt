<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>NO: C++ is not magically slower than C. Bad C++ code is slower than good C code and vice versa.</p></li>
<li><p>NO: For the compiler it is completely irrelevant whether you use a <code>for</code> or a <code>while</code> loop as they will all be normalized into a consistent representation anyway.</p></li>
</ol>

<p>Now to the actual review. Your code will not improve from porting to C as you are already not using any C++ features.</p>

<p>In C++ you should generally use streams. They have a bad reputation but generally they greatly improve your code:</p>

<pre><code>int numTests;
std::cin &gt;&gt; numTests;
</code></pre>

<p>This also works for ranges</p>

<pre><code>std::vector&lt;int&gt; array(size);

std::istream_iterator&lt;int&gt; eos;              // end-of-stream iterator
std::istream_iterator&lt;int&gt; iit (std::cin);   // stdin iterator
std::copy(iit, eos, array.begin());          // copy from std::cin
</code></pre>

<p>For sorting you should refer to the standard library aka <code>std::sort</code>. However, you should not even sort but determine the 5 largest elements. This is achieved by the algorithm <code>nth_element</code></p>

<pre><code>std::nth_element(array.begin(), std::next(array.begin(), 5), array.end(), std::greater&lt;int&gt;());
</code></pre>

<p>Now you can simply sum them up</p>

<pre><code>const int result = std::accumulate(array.begin(), std::next(array.begin(), 5), 0);
</code></pre>

<p>So the whole algorithm would be</p>

<pre><code>const int sum_largest(const std::size_t numElements, std::vector&lt;int&gt;&amp; data) {
    if (numElements &gt; data.size()) {
        // Error handling
    }
    std::nth_element(data.begin(), std::next(data.begin(), numElements), data.end(), std::greater&lt;int&gt;());
    return std::accumulate(data.begin(), std::next(data.begin(), numElements), 0);
}
</code></pre>
    </div>