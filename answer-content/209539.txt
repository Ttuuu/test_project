<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First of all, please don't take what I am writting personnaly. Also, I am sure there would be something to argue with my proposals so feel free to tell me!</p>

<p>Let's begin with:</p>

<pre><code>@RequestMapping(value = "/export_data")
public void downloadDataInCsv(
        @RequestParam("type") String type,
        @RequestParam("tID") String tableId,
        HttpServletRequest request,
        HttpServletResponse response) throws IOException {
    if (type.equals("csv")) {
        List&lt;UserInfo&gt; list = userInfoDao.findById(tableId);
        ExportCsvUtil.downloadCsv(request, response, list);
    }
}
</code></pre>

<p>I hate using plain strings when doing some comparison especially when it looks like a real constant like <code>csv</code></p>

<p>In order to remove the plain String, I usually use <code>enum</code> to do that.</p>

<p>Why not replace <code>type.equals("csv")</code> by something like <code>type.equals(FileType.CSV.name())</code></p>

<p>Next, if we are looking here at this chunk:</p>

<pre><code>List&lt;UserInfo&gt; list = userInfoDao.findById(tableId);
ExportCsvUtil.downloadCsv(request, response, list);
</code></pre>

<p>we see that your are proceding with <code>ExportCsvUtil.downloadCsv()</code> even if the list is empty. Should this be a normal behaviour of your application ? Maybe you should send a message telling the user that they were no data to retrieve ?</p>

<p>Last thing for <code>downloadDataInCsv()</code> method is that if your <code>type</code> isn't a <code>csv</code> file, it will return a HTTP code 200 with nothing. I think the client would be kind of confused with that. Maybe try to send a different message like I said before. (e.g: only CSV export is available at the moment)</p>

<p>Next chunk! :)</p>

<pre><code>private void downloadCsv(HttpServletRequest request, HttpServletResponse response, List&lt;UserInfo&gt; list) throws IOException {
    String headerKey = "Content-Disposition";
    String headerValue = String.format("attachment; filename=Table_Data.csv");
    response.setContentType("text/csv");
    response.setHeader(headerKey, headerValue);

    try (final CSVWriter writer = new CSVWriter(response.getWriter(), ",")) {

        writer.writeNext(new String[]{"User Id", "First Name", "Last Name", "Roll No", "Email ID", "Gender"});

        for (UserInfo entry: list) {
            // cast/convert to String where needed
            writer.writeNext(new String[]{entry.getUserId()+"", entry.getFirstName(), entry.getLastName(),entry.getRollNo(),entry.getEmail(),entry.getGender()});
        }
        writer.close();
    }
}
</code></pre>

<p>If you look at <code>String headerValue = String.format("attachment; filename=Table_Data.csv");</code>, you don't use <code>String.format()</code> capabilities at all! (if I am not mistaken)</p>

<p><code>String.format()</code> allows you to do things like <code>String.format("Hello %s", name)</code></p>

<p>You can replace this with an old plain <code>String</code> then.</p>

<p><code>response.setContentType("text/csv");</code>, if you are using the <code>enum</code> like I said before, you could add a property <code>contentType</code> that allows you to do <code>FileType.CSV.getContentType()</code> in order to remove the hardcoded string.</p>

<p><code>writer.writeNext(new String[]{"User Id", "First Name", "Last Name", "Roll No", "Email ID", "Gender"});</code>, since you know the header of the file, why not store is as a constant so it is not recreated every time you call the endpoint ?</p>

<p>Like so:</p>

<p><code>private static final String[] CSV_HEADER = new String[]{"User Id", "First Name", "Last Name", "Roll No", "Email ID", "Gender"});</code></p>

<p>I think you could do something about the <code>for</code> loop with some of Java 8 fanciness but I am not confident enough to write this without tools for testing.</p>

<p>Lastly, you don't have to do <code>writer.close()</code> since you are opening your file with a <code>try with resource</code></p>

<p>Basically, <code>CSVWriter</code> class should implement <code>AutoCloseable</code> wich call <code>close()</code> method for you at the end of the <code>try</code> statement so you do not have to worry about this.</p>

<p>Documentation about this is <a href="https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html" rel="nofollow noreferrer">here</a> </p>

<p>Hope my answer helps !</p>
    </div>