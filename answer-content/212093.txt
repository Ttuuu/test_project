<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This could be a good idea if you have 2 or more instances of <code>UITableView</code> with the same appearance in your app. Anyway it is better than to copy nearly the same code for each class that conforms to <code>UITableViewDataSource</code> and <code>UITableViewDelegate</code>.
I just want to advice you to add the following computed properties to <code>PostTableView</code>:</p>

<pre><code>class PostTableView: UITableView {

    // Other properties

    var cellIdentifier: String {
        return StoryBoard.Cells.ArrayInspireListCell
    }

    var defaultRowHeight: CGFloat {
        return 470.0
    }

    var additionalItemHeight: CGFloat {
        return 30.0
    }
}
</code></pre>

<p>They are overridable because <code>PostTableView</code> was not declared as <code>final</code>. </p>

<p>As you can see there are less magic numbers:</p>

<pre><code>private func setupTableView() {
    self.register(UINib(nibName: cellIdentifier, bundle: nil), forCellReuseIdentifier: cellIdentifier)
    self.estimatedRowHeight = defaultRowHeight
    // Initialisation
}
</code></pre>

<p>You can also use these properties in the implementation of other functions:</p>

<pre><code>func tableView(_ tableView: UITableView, estimatedHeightForRowAt indexPath: IndexPath) -&gt; CGFloat {
    if let height = self.heightOfRows[indexPath] {
        return height
    }
    return defaultRowHeight
}

func tableView(_ tableView: UITableView, willDisplay cell: UITableViewCell, forRowAt indexPath: IndexPath) {
    let height = cell.frame.size.height
    self.heightOfRows[indexPath] = height + additionalItemHeight
}
</code></pre>

<p>I don't know how do you set the value of <code>PostTableView.arrayPosts</code>, but maybe it will be better to ensure that <code>UITableView.reloadData</code> will be called in the main thread:</p>

<pre><code>var arrayPosts: [PostTableViewCompitible] = [] {
    didSet {
        DispatchQueue.main.async { [unowned self] in
            self.reloadData()
        }
    }
}
</code></pre>
    </div>