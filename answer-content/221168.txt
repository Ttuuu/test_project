<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your first version of <code>build_expiry_date_string()</code> will be able to build an shorter notation date from any date array. I would therefore rename it to <code>build_short_date_string()</code>. </p>

<p>The second version actually is named correctly, but can <em>only</em> convert an expiry date to the shorter notation. </p>

<p>Which is the better version?</p>

<p>Well, clearly, if you need to create a short date string from more than one date array then the first one wins. The second one is more specialized. It will only work for the <code>card_exp</code> date.</p>

<p>In general I don't see the point of overspecializing functions. The more general purpose version does a good job, so I would prefer that one, even if it is, for now, only used for one date array.</p>

<p><strong>Functions should be used to encapsulate functionality that can be reused and therefore make your code easier to maintain.</strong> (<a href="https://www.guru99.com/functions-in-php.html" rel="nofollow noreferrer">reference</a>)</p>

<p>It is the <em>reusability</em> that wins for me here, over any other considerations.</p>

<p>Note that we're talking about simple functions here, not methods that are part of classes. OOP is a whole other can of worms.</p>

<p>Some other remarks about your code (this is code review afterall):</p>

<ul>
<li>You <code>extract()</code> data at the beginning of <code>populate_transaction_info()</code>. This seems like a nice trick, but it makes your code harder to read and debug. For instance, I have to assume that <code>$person</code> is one of these extracted variables, but for me it appears out of thin air. You could help your code reader by using a prefix whenever your extract something: <code>extract(...., EXTR_PREFIX_ALL, 'model');</code> and then use <code>$model_person</code>, but preferably just explicitly define the person variable in the function.</li>
<li>Your comment: <em>"set to empty array to ensure run-able code"</em> and the subsequent <code>array_merge()</code> make no sense to me. Why not just define the array?</li>
</ul>
    </div>