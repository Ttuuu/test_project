<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>Your detector fails in the face of overloading and templating. Also, it will only detect (static) member-variables and (static) member-functions. While you can extend it to types (and type-aliases), accepting templates and overloading would need better language-provided reflection-facilities.</p>

<p>Anyway, pure existence is generally uninteresting, supported operations count.</p></li>
<li><p><code>funcs()</code> and <code>funcs_t</code> are nearly a generally useful abstraction.</p>

<p>Just use perfect forwarding instead of by-value and <code>std::move()</code>. Allowing for all callables, including <code>final</code> classes, function-pointers, member-function-pointers, and the same wrapped in a <code>std::reference_wrapper</code> would admittedly add significant amounts of code.</p>

<p>A good name would be <code>overloaded</code>.</p></li>
<li><p><code>HAS_MEMBER</code> needlessly depends on default-constructing the passed class. Fix that by using <code>decltype</code>, <code>std::declval()</code> and unevaluated contexts.</p></li>
<li><p>If you don't use an argument, don't name it. Specifically for <code>main()</code>, just don't ask for it.</p></li>
<li><p>Don't use <code>std::endl</code>. In the rare cases you actually need to flush manually, be explicit and use <code>std::flush</code>. Nearly always you are just crippling performance.</p></li>
<li><p><code>return 0;</code> is implicit for <code>main()</code>. Make of that what you will.</p></li>
</ol>
    </div>