<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Overall the code is quite well written, and it's an interesting program.</p>
<ol>
<li>The biggest improvement that I think can be made is avoiding all the raw loops. From c++20, many of the algorithms are <code>constexpr</code>, which means the following member functions could be one liners:</li>
</ol>
<pre><code>constexpr FixedString(char const* s)
{
    std::copy(s, s + N, buf);
}

template &lt;std::size_t S&gt;
constexpr FixedString(FixedString&lt;S&gt; const&amp; other)
{
    std::copy(other.buf, other.buf + std::min(S, N), buf);
}

auto constexpr operator==(FixedString const&amp; other) const
{
    return std::equal(buf, buf + N, other.buf);
}
</code></pre>
<p>There is a similar example in the <code>decode</code> function, where the <code>find_padding</code> lambda could be:</p>
<pre><code>auto constexpr find_padding = [string_size]() {
    return std::distance(string.buf, 
               std::find(string.buf, string.buf + string_size, '='));
};
</code></pre>
<p>and in the <code>encode</code> function, this code:</p>
<pre><code>result[j] = convert_num(bytes[0]);
result[j + 1] = convert_num(bytes[1]);
result[j + 2] = convert_num(bytes[2]);
result[j + 3] = convert_num(bytes[3]);
</code></pre>
<p>could be replaced by the shorter:</p>
<pre><code>std::transform(bytes, bytes + 4, result.buf + j, convert_num);
</code></pre>
<p>and this loop:</p>
<pre><code>for (std::size_t i = 0; i &lt; padding_size; ++i)
    result[result_size_no_padding + i] = '=';
</code></pre>
<p>could be replaced by:</p>
<pre><code>std::fill_n(result.buf + result_size_no_padding, padding_size, '=');
</code></pre>
<ol start="2">
<li>You have used clear names for all your variables, and functions, but snippets like the following:</li>
</ol>
<pre><code>if (ch &gt;= 'A' &amp;&amp; ch &lt;= 'Z')
</code></pre>
<p>should be named as well (even if it's used in only one place). Ideally, you would use <code>std::isupper</code>, but it's not <code>constexpr</code>, so that's not possible. However, it's trivial to write your own named function that is <code>constexpr</code>. In particular, it would be much more readable to have names for snippets like:</p>
<pre><code>if (num &gt; 25 &amp;&amp; num &lt; 52)
</code></pre>
<p>for example, something like <code>reverse_is_upper</code> would make sense?</p>
<ol start="3">
<li><p>As it stands, I find the <code>encode</code> and <code>decode</code> functions a little long (though this is reduced by removing the raw loops). Still, the lambda expressions could be moved out of the <code>*code</code> functions and used as needed.</p>
</li>
<li><p>This is a relatively minor point, but I'm not a fan of the implicit conversions to <code>char*</code> from <code>FixedString</code>. The primary advantage seems to be that you avoid having to write <code>.buf</code> everywhere, but the negative impacts of implicit conversions outweigh this benefit (as the code increases, it becomes increasingly easy to make a subtle mistake because of this). Also, it's being used in <code>main</code> to allow streaming like this:</p>
</li>
</ol>
<pre><code>std::cout &lt;&lt; encoded &lt;&lt; '\n';
</code></pre>
<p>but this is better solved by overloading <code>operator&lt;&lt;</code> for <code>FixedString</code> instead.</p>
    </div>