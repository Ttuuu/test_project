<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>While your code do everything as intended, there are quite a few things that are wrong or non-standard.</p>

<p>In no particular order :</p>

<ul>
<li>the package name should usually start with an internet domain name extension, such as fr or com</li>
<li>variable should not contains underscore, they are usually reserved to constants name so it should not be <code>user_input</code> but rather <code>userInput</code><br>
Here is the convention from the oracle website : <a href="https://docs.oracle.com/javase/tutorial/java/nutsandbolts/variables.html" rel="nofollow noreferrer">https://docs.oracle.com/javase/tutorial/java/nutsandbolts/variables.html</a></li>
<li>same goes for method name</li>
<li>there are some "magic numbers"... but more on that later</li>
<li>it's more readable to have operator for comparisons separated from their operands by space such as <code>user_input.length() &gt;= 9</code></li>
<li>for readability as well, avoid line that are too long and put one space behind comma</li>
<li>your methods are really hard to reuse : if you wanted to use your caesar cipher in some other place, you wouldn't manage because your cipher method mix a lot of differents things :
it ciphers (as expected), it reads from standard input, it prints, it sleeps (why would it do that ?) and it knows that the user will write "encrypt" or "decrypt"
You should have made a method like this 'String cipher(String input)' that'll only do one thing : return the ciphered string
It is thus much easier to test and to reuse. If you are not convinced, I'd recommend trying to unit test your translate method... you'll see it's a real pain :)</li>
<li>what's the point of separating <code>choose_action_to_do</code> and <code>translate</code> ? on paper they may sound like two differents features, but the fact that they are linked
by a global variable demonstrates they are in fact tighly coupled in your code</li>
<li>most static variables don't make much sense, and if you apply the two previous points it'll become highly apparent</li>
<li>let's say you want to have another cipher method (like a "One-time pad" for example), making an interface to implement various Cipher method make sense IMO</li>
</ul>

<p>Here is a part of the solution using everything I recommended :
(Please bear with the minimal javadoc :))</p>

<pre><code>package fr.cipher;

import java.text.Normalizer;
import java.util.Scanner;

public class Launch {

    private static final String ENCRYPT = "encrypt(";
    private static final String DECRYPT = "decrypt(";
    private static final int HEAD_SIZE = 8;

    private static Scanner sc = new Scanner(System.in);

    private static boolean stop = false;

    public static void main(final String[] args) {
        while (!stop) {
            askActionAndApply();
        }
    }

    public static void askActionAndApply() {
        Cipher c = new CaesarCipher();
        System.out.println("\n\nType \"encrypt(message_to_encrypt)\" or "
                + "\"decrypt(message_to_decrypt)\" please (or \"stop\" to stop).");

        String userInput = sc.nextLine();
        userInput = Normalizer.normalize(userInput, Normalizer.Form.NFD).replaceAll("[^\\p{ASCII}]", "").toLowerCase();

        if(userInput.equals("stop")) {
            stop = true;
        } else if (userInput.length() &gt; HEAD_SIZE &amp;&amp; userInput.endsWith(")")) {
            translate(c, userInput);
        }
    }

    private static void translate(final Cipher cipher, final String userInput) {
        String messageHead = userInput.substring(0, HEAD_SIZE);

        String content = userInput.substring(HEAD_SIZE, userInput.length() - 1);

        if (messageHead.equals(ENCRYPT)) {
            System.out.println(cipher.cipher(content));
        } else if (messageHead.equals(DECRYPT)) {
            System.out.println(cipher.decipher(content));
        }
        // if you want you can put your Thread.sleep here :)
    }
}
</code></pre>

<p>You could (and should) also remove the "stop" field but I let it in place so it's easier to compare your code and mine.
The Cipher interface looks like this :</p>

<pre><code>/**
 * This class represents a cryptography algorithm.
 * &lt;p&gt;
 * It is not suited for &lt;i&gt;Hash&lt;/i&gt; algorithm.
 * 
 * @author R Dhellemmes
 *
 */
public interface Cipher {
    String cipher(String input);

    String decipher(String input);
}
</code></pre>

<p>And you'll have a <code>CaesarCipher</code> class implementing this <code>Cipher</code> interface.</p>

<p>Hope it helps :)</p>
    </div>