<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>At least on the <code>.com</code> version of the site (I can't access the <code>.com.sg</code>) the content your looking for is:</p>

<pre><code>&lt;div class="hotels-hotel-review-about-addendum-AddendumItem__title--2QuyD"&gt;NUMBER OF ROOMS&lt;/div&gt;
&lt;div class="hotels-hotel-review-about-addendum-AddendumItem__content--iVts5"&gt;180&lt;/div&gt;
</code></pre>

<p>This appears to be consistent across pages. So, you could look for a <code>.hotels-hotel-review-about-addendum-AddendumItem__title--2QuyD</code> followed by a <code>.hotels-hotel-review-about-addendum-AddendumItem__content--iVts5</code>. You probably want to check that the text in the first div is <code>NUMBER OF ROOMS</code> in case some pages have more "addendum items" with purely numeric content:</p>

<p>When scraping, I like pulling things out into functions to make my intent more clear, to make testing easier, and to make it easier to refactor if (more likely, when the page changes):</p>

<pre><code>def get_addendum_item_titles(page):
    return page.find_all('div', class_='.hotels-hotel-review-about-addendum-AddendumItem__title--2QuyD')

def get_number_of_rooms_addendum_title(page):
    for title in get_addendum_item_titles(page):
        if title.text.strip().upper() == 'NUMBER OF ROOMS':
            return title

    raise ValueError('Number of rooms addendum title not found')

def get_number_of_rooms(page):
    title = get_number_of_rooms_addendum_title(page)
    content = title.parent.find('div', class_='.hotels-hotel-review-about-addendum-AddendumItem__content--iVts5')
    return int(content.text.strip())
</code></pre>

<p>You may want to throw those class names in constants.</p>

<p>A prime justification for this approach is immediately obvious. The <code>--2QuyD</code>-like suffixes are almost certainly automatically generated. I suspect the next time tripadvisor modifies any of their CSS these suffixes will change and break your code. But I imagine that the <code>hotels-hotel-review-about-addendum-AddendumItem__title</code> part will rarely change. So you need a way of finding the proper classname with only that prefix. Ideally you create a function like:</p>

<pre><code>def find_class_with_prefix(page, prefix):
    pass
</code></pre>

<p>I'll leave that as an exercise to you, but once you create it, it will be really cleanly integratable into the above code.</p>

<p>Note there is a <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors#Syntax" rel="nofollow noreferrer">CSS attribute selector</a> that you can use instead for this: <code>div[class^=hotels-hotel-review-about-addendum-AddendumItem__title]</code>, but I suspect it will have poor performance characteristics because it probably uses a linear scan. You'll want to tap into whatever datastructures beautifulsoup already has built for quickly looking up elements by class (to find the list of class names).</p>
    </div>