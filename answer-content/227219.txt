<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>Is there a better way to express such info through naming?</p>
</blockquote>

<p>Make it grammatically correct, so just say <code>third_party_images</code>. Maintaining "ies" would require an apostrophe, which isn't possible in variable names. Making the conjugation goofy as an internal convention is not helpful. Any additional information can be added in your documentation - docstrings or otherwise.</p>

<blockquote>
  <p>Is there any downside to using such a naming convention?</p>
</blockquote>

<p>Yes. The convention isn't obvious to someone new to your project, so doesn't convey any additional information, and it's grammatically incorrect, which makes people sad.</p>

<p>Other than that,</p>

<h2>Type hints</h2>

<p>Your convention to add <code>(str)</code> in the docstring instead of <code>:str</code> on the parameter is good if you're trapped in Python 2. But if you're at all able to use Python 3 (the tags don't specify), just use type hints.</p>

<p>Past that, your docstrings are missing descriptions for some parameters. </p>

<h2>Concatenation or formatting?</h2>

<p>Your approach in <code>full_text</code> is fine. You may also choose to avoid concatenation by setting up snippet variables that are unconditionally added to the format string, so that there only needs to be one <code>format</code> call; something like</p>

<pre><code>adaptation = 'My adaptation of ' if self.adaptation else ''
extra_text = f'\n{self.extra_text}' if self.extra_text else ''

final_text = (
    '[size=12]'
    f'{adaptation}[b]{self.work_name}[/b] '
    f'image by {self._creator} '
    f'({self.creation_date}). \n'
    f'[size=10]{self.url}[/size]'
    f'{extra_text}[/size]'
)
</code></pre>

<h2>Mandatory args</h2>

<blockquote>
  <p>To be used for copy-pasting when creating new ImageCitation
  in order to avoid accidentally forgetting to change an arg value.</p>
</blockquote>

<p>I can see where you're coming from, but if this is actually a problem, consider making more (or all) arguments mandatory. It's fairly unusual to leave around boilerplate code for the express purpose of copy-and-paste, and the requirement for such a thing means that perhaps</p>

<ul>
<li>you're not using a Python editor/IDE with good static analysis and autocomplete, and/or</li>
<li>your method's parameters are not strict enough in requiring that values be passed.</li>
</ul>

<p>All of that said, you shouldn't have to be passing <code>creator_name=None</code> so many times; that's the default. Just leave it out. The same goes for <code>extra_text</code>. That's the whole point of default arguments.</p>
    </div>