<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;sstream&gt;
#include &lt;iostream&gt;
#include &lt;exception&gt;
#include &lt;type_traits&gt;
#include &lt;initializer_list&gt;
#include &lt;utility&gt;
</code></pre>

<p>Do the following:</p>

<ol>
<li>Split your test code from your library code.</li>
<li>Organize your headers so it's easier to find if a header has been included.</li>
<li>Remove headers that are not used. (<code>&lt;sstream&gt;</code>, <code>&lt;exception&gt;</code>)</li>
</ol>

<hr>

<pre><code>template&lt;typename T&gt;
class ParamPack {
protected:
    std::vector&lt;T&gt; values_;
    size_t size_;
</code></pre>

<p>Using <code>std::vector</code> introduces two problems:</p>

<ol>
<li>Allocation

<ul>
<li>Data is on the heap instead of the stack.</li>
<li>You discarded the size, which is known at compile time, just to be able to derive the size later.</li>
</ul></li>
<li>Object Size

<ul>
<li>You are storing

<ul>
<li>the data on the heap,</li>
<li>a pointer in <code>Array</code> to the data,</li>
<li>three pointers in <code>std::vector&lt;&gt;</code> to the data, and </li>
<li>the size of the <code>std::vector&lt;&gt;</code>.</li>
</ul></li>
<li>A <code>std::array&lt;&gt;</code> would simply store the data on the stack.</li>
</ul></li>
</ol>

<hr>

<pre><code>public:
    template&lt;typename... U&gt;
    ParamPack( U... u ) : values_{ static_cast&lt;T&gt;(u)... } {
        size_ = values_.size();
    }

    template&lt;typename ... U&gt;
    ParamPack( std::initializer_list&lt;std::is_same&lt;T, U...&gt;( U...)&gt; il ) : values_( il ) {
        size_ = values_.size();
   }

    const size_t size() const { return size_; }
</code></pre>

<p>The constructor that takes the initializer list is never taken as substitution failure simply causes it to <strong><em>always</em></strong> be removed from the overload set.  In your test code, the implicitly constructed lists are not <code>std::initializer_list&lt;int&gt;</code> types and won't take that overload.</p>

<p>Your arguments in the variadic are passed by value. You end up copying <code>u</code> in <code>Array::Array(...)</code>, <code>ParamPack::ParamPack(...)</code>, and <code>std::vector&lt;int&gt;::std::vector&lt;int&gt;(std::initializer_list&lt;int&gt;)</code>.  Read up on perfect forwarding.</p>

<p>Don't store <code>size_</code>. Just call <code>values_.size()</code> whenever you need the size.</p>

<p>Qualify <code>size()</code> with the <a href="https://en.cppreference.com/w/cpp/language/attributes/nodiscard" rel="nofollow noreferrer"><code>[[nodiscard]]</code></a> attribute.</p>

<pre><code>    std::vector&lt;T&gt; operator()() {
        return values_;
    }
</code></pre>

<p>Did you intend to return by value?</p>

<hr>

<pre><code>    T operator[]( int idx ) const {
        return items_[idx];
    }
</code></pre>

<p>Did you intend to return by value?</p>

<p>You have an implicit conversion on access <code>std::vector</code> that changes the signedness of the index.  <a href="https://en.cppreference.com/w/cpp/container/vector/operator_at" rel="nofollow noreferrer"><code>std::vector&lt;&gt;::operator[]</code></a> expects the index type to be <code>std::vector::size_type</code>, which is often <code>std::size_t</code>.</p>

<hr>

<pre><code>    int main() { ... }
</code></pre>

<p>It is great everything prints out, but are the observed results the expected results?  Use a testing framework.</p>

<hr>

<blockquote>
  <p>Does this follow modern best practices? Note: I know I can encapsulate it in an namespace but for simplicity I just posted the classes themselves</p>
</blockquote>

<p>Namespace wrapping is definitely a starter.  You should minimize the number of symbols you introduce into the global namespace.</p>

<p>Prefer the qualified standard types (<code>::std::size_t</code>) instead of the unqualified types (<code>::size_t</code>). The C++ Standard makes no guarantee that the unqualified symbols exist.  See <a href="https://timsong-cpp.github.io/cppwp/n4659/extern.types#1" rel="nofollow noreferrer">C++17 draft n4659 ยง 15.5.4.3.4/1</a>.</p>

<p>Use <code>std::array&lt;&gt;</code> when the container has a fixed size known at compile-time.</p>

<p>If you want your container to be used as if it were a C++ container, you must fulfill the standard <a href="https://timsong-cpp.github.io/cppwp/n4659/container.requirements#general" rel="nofollow noreferrer">general container requirements</a>.</p>

<p>Don't use a raw pointer (<code>T*</code>).  Use alternative solutions.  <code>std::observer_ptr</code> in C++20 doesn't require any special feature that would prevent it from being implemented in earlier C++ revisions.  The reason for the existence of the world's dumbest smart pointer is to:</p>

<ol>
<li>Self-document that the pointer is a <em>non-owning reference</em> to an object (not an <em>owning-reference</em>, <em>built-in array</em>, <em>built-in string</em> or <em>iterator</em>),</li>
<li>Default construct to a sane initial state (<code>nullptr</code>),</li>
<li>Only support reference operations (no <code>operator[]</code> meant for arrays/strings, no pointer arithmetic meant for pointers),</li>
<li>Strict-weak ordering guarantee, and</li>
<li>Discourages using unsafe <code>void*</code>.</li>
</ol>

<blockquote>
  <p>Are there any unforeseen bugs or gotchas that I overlooked?</p>
</blockquote>

<p>You should be aware of <a href="https://en.cppreference.com/w/cpp/language/class_template_argument_deduction" rel="nofollow noreferrer">class template argument deduction</a> guides introduced in C++17.  The compiler can deduce both the size and the type from the arguments provided.  <a href="https://en.cppreference.com/w/cpp/container/array/deduction_guides" rel="nofollow noreferrer">Here is the deduction guide for <code>std::array</code></a>.</p>

<pre><code>std::array a1{1, 2, 42};  // deduced as std::array&lt;int, 3&gt;
std::array a2{1, 2, 42u}; // ill-formed as types are not the same.
</code></pre>

<p>You can also write your own guide to derive the type while allowing the user to provide a type.</p>
    </div>