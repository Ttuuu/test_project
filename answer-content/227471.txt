<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>KISS</h2>

<p>I find this class too complex. It stores 2 dictionaries, but only allows manipulations from the perspective of one the types. And it requires a second instance with the dictionaries swapped to manipulate data from the other perspective.</p>

<p>Furthermore, a bijection should be seen as a function amongst two sets, rather than a dictionary from either perspective.</p>

<p>How about picking no perspective at all. From the public view, it's just a collection (actually a set) of tuples of an element of set x and one of set y. Ideal usage of a bijection, in my opinion, is as follows:</p>

<pre><code>var bijection = new Bijection&lt;int, string&gt;();

bijection.Add((1, "USA"));
bijection.Add((2, "UK"));

// X and Y chosen from set theory: https://en.wikipedia.org/wiki/Bijection
var country = bijection.X[1];
var id = bijection.Y["UK"];
</code></pre>

<p>You no longer have a perspective on the bijection from either the <em>proto</em> or <em>inv</em> types. Instead, you work with an atomic type <code>(X, Y)</code>. Readonly dictionaries <code>X</code> and <code>Y</code> are provided to give you the perspective of either of the types.</p>

<pre><code>public class Bijection&lt;TX, TY&gt; : ICollection&lt;(TX, TY)&gt;
{
    private readonly IDictionary&lt;TX, TY&gt; _x = new Dictionary&lt;TX, TY&gt;();
    private readonly IDictionary&lt;TY, TX&gt; _y = new Dictionary&lt;TY, TX&gt;();

    public IReadOnlyDictionary&lt;TX, TY&gt; X =&gt; new ReadOnlyDictionary&lt;TX, TY&gt;(_x);
    public IReadOnlyDictionary&lt;TY, TX&gt; Y =&gt; new ReadOnlyDictionary&lt;TY, TX&gt;(_y);

    // ICollection members ..
}
</code></pre>
    </div>