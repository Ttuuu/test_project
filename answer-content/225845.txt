<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Feedback</h2>
<p>The code uses <code>const</code> for variables that don't need to be re-assigned. This is good because it prevents accidental re-assignment. It also uses <code>===</code> when comparing the status codes, avoiding type coercion. That is a good habit.</p>
<p>There are at least four indentation levels because the <code>onload</code> callbacks are anonymous functions. Some readers of the code would refer to this as "<em>callback hell</em>", because really there is just one large function here with functions defined inside of it, making it challenging to read. See the first section of the <strong>Suggestions</strong> below for tips on avoiding this.</p>
<p>The <code>const</code> keyword was added to the Ecmascript Latest Draft in Draft status and standard in the Ecmascript 2015 specification<sup><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const#Specifications" rel="nofollow noreferrer">1</a></sup> so other ecmascript-2015 (AKA ES-6) features could be used to simplify the code.</p>
<h2>Suggestions</h2>
<h3>Callbacks and Nesting/Indentation levels</h3>
<p>While most of the examples on <a href="http://callbackhell.com" rel="nofollow noreferrer">callbackhell.com</a> focus on promise callbacks and asynchronous code, the concepts apply here as well.  Name the functions and then move the definitions out to different lines. If you need to access variables from outside then you may need to pass them as arguments.</p>
<h3>Data Object and repeated DOM lookups</h3>
<p>I will be honest - I haven't encountered the <a href="https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams" rel="nofollow noreferrer"><code>URLSearchParams</code></a> before. I typically see code that uses <a href="https://developer.mozilla.org/en-US/docs/Web/API/FormData" rel="nofollow noreferrer"><code>FormData</code></a>. Are all of the input elements inside of a <code>&lt;form&gt;</code> tag? if they are then a reference to that element could be passed to the FormData constructor. Otherwise, do the <code>name</code> attributes match the keys added to <code>params</code> - i.e. the <em>id</em> attributes without the <em>sup</em> prefix? You could iterate over the input elements and add the parameters to <code>params</code>.</p>
<h3>Avoid global variables</h3>
<p>In the review by dfhwze, The following line is referenced:</p>
<blockquote>
<pre><code>for (index in  data) {
</code></pre>
</blockquote>
<p>Without any keyword before <code>index</code>, like <code>var</code>, <code>let</code> or <code>const</code> that variable becomes a global (on <code>window</code>).</p>
    </div>