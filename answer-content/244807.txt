<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Without the profile numbers you have, I can't suggest changes that make assumptions about the input to the function. For instance, if you knew that most times the 'check if the game is over' fails, you could only run the check once the player has a piece in every row and a piece in every column. I will also be picking off small things, as I don't know what specific parts of the function are too slow. The changes below are a little agnostic to your code in a sense, and might not help all that much.</p>
<hr>
<p>As a personal preference, I don't like code that makes liberal use of indexing. I find it is often harder to read than it needs to be.</p>
<pre><code>current_position = (position[0] + 1, position[1] + 1)
low_x = current_position[1] - 1
high_x = current_position[1] + 2
low_y = current_position[0] - 1
high_y = current_position[0] + 2
</code></pre>
<p>There is a little bit of unnecessary adding and subtracting here. You can simplify it a little.</p>
<pre><code>low_x = current_position[1] - 1
low_x = position[1] + 1 - 1  # Replace current_position[1] with its definition: position[1] + 1
low_x = position[1]
</code></pre>
<p>and the same holds for the other variables here</p>
<pre><code>current_position = (position[0] + 1, position[1] + 1)
low_x = position[1]
high_x = position[1] + 3
low_y = position[0]
high_y = position[0] + 3
</code></pre>
<p>Since position is indexed into a few times, it makes sense to unpack it. I would also remove low_x and low_y since they already have (sensible) names; x and y.</p>
<pre><code>x, y = position
current_position = x + 1, y + 1
low_x = x
high_x = x + 3
low_y = y
high_y = y + 3
neighbourhood = regions[low_y:high_y, low_x:high_x].copy()
</code></pre>
<p>Then there is no point in keeping the variables low_x, low_y, high_x, or high_y. They don't add any clarity and are not used anywhere else.</p>
<pre><code>x, y = position
current_position = x + 1, y + 1
neighbourhood = regions[y:y+3, x:x+3].copy()
</code></pre>
<p>This code now has magic constants x+3 and y+3. I don't know where they come from, a comment explaining it would be nice.</p>
<hr>
<pre><code>adjacent_regions = sorted(...)
adjacent_regions.pop(0)

if len(adjacent_regions) == 0:
    ...
    ...
else:
    new_region_label = adjacent_regions.pop(0)
    regions[tuple(current_position)] = new_region_label
    for label in adjacent_regions:
        regions[regions == label] = new_region_label
</code></pre>
<p>I've removed anything that doesn't pertain to adjacent_regions. From this I noticed two things.</p>
<p>The list structure is popped from the front once or twice. Usually lists have O(n) complexity when popped from the front, <a href="https://wiki.python.org/moin/TimeComplexity#list" rel="nofollow noreferrer">as it needs to make changes to everything in the list</a>. Even though it might not be a long list, it is still a complexity smell that we should try to avoid.</p>
<p>A quick fix would be to sort the list in reverse, and pop from the end rather than the start. In this case, as I don't seen adjacent_region exposed outside of the function, we can avoid modifying the list instead. Not popping from the front, and accounting for the extra element, the code might look something like this:</p>
<pre><code>adjacent_regions = sorted(...)
# adjacent_regions.pop(0)  # REMOVED

if len(adjacent_regions) == 1:  # Empty other than the '0' label
    ...
    ...
else:
    # Ignoring the first element, this becomes .pop(1)
    # Then changed .pop to a simple __getitem__
    new_region_label = adjacent_regions[1]
    regions[tuple(current_position)] = new_region_label
    for label in adjacent_regions:
        regions[regions == label] = new_region_label
</code></pre>
    </div>