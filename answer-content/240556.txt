<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>Aren't there Javascript functions and Java methods for creating and reading tree-like or graph-like data structures, which can be written/read as XML under the hood, without the programmer needing to process the message content directly?</p>
</blockquote>

<p>When communicating between the client and server, the de-facto standard format to use for data structures is <a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/JSON" rel="nofollow noreferrer">JSON</a>. It's much more concise than XML, is easily parseable (on both ends), and is easily created from an object (on both ends). That is, on the client-side, rather than</p>

<pre><code>game_arr = toAssocArr(this.responseText)
</code></pre>

<p>You'd like to be able to do</p>

<pre><code>game_arr = JSON.parse(this.responseText);
</code></pre>

<p>You'd also like the sent response to contain the data <em>as you want it</em>, without requiring further Javascript processing. For example, you wouldn't want to have to do</p>

<pre><code>var nameListString = game_arr["nameList"]
if ( nameListString != null ) {
  nameList = nameListString.split(",")
}
</code></pre>

<p>Preferably, the <code>nameList</code> property would <em>already</em> be an array of strings after you <code>JSON.parse</code> it, rather than a string you have to split later. On the Java side of things, there are <a href="https://stackoverflow.com/questions/8876089/how-to-fluently-build-json-in-java">various ways</a> to build the JSON that is required. Once it's built, just call <code>sendResponse</code> with the JSON string, and the <code>JSON.parse</code> on the client-side will transform it into a Javascript object.</p>

<p>If you want your script to use modern web standards, consider using the <a href="https://developer.mozilla.org/en/docs/Web/API/Fetch_API" rel="nofollow noreferrer">Fetch API</a> instead of XMLHttpRequest. <code>fetch</code> is a lot more concise, and uses Promises, which are usually a lot easier to work with than callbacks, especially when you have multiple asynchronous actions. For example, rather than</p>

<pre><code>function updateGameState(gameID) {
  var xhttp = new XMLHttpRequest();
  xhttp.onreadystatechange = function() {
    if (this.readyState == 4 &amp;&amp; this.status == 200) {
      game_arr = toAssocArr(this.responseText)
      // 150 more lines of code
    }
  }

  xhttp.open("POST", "requestGameState", true);
  xhttp.send("gameID=" + gameID);
}
</code></pre>

<p>you could use</p>

<pre><code>function updateGameState(gameID) {
  fetch('requestGameState', { method: 'POST', body: 'gameID=' + gameID });
    .then(res =&gt; res.json()) // this will automatically call JSON.parse
    .then((result) =&gt; {
      gameArr = result;
      // more code here
    })
    .catch((err) =&gt; {
      // don't forget to handle network/server errors here!
      // better to gracefully degrade than to fail silently
    });
</code></pre>

<p>The <code>// 150 more lines of code</code> is a bit smelly - consider splitting it up into separate functions. Consider implementing the <a href="https://stackify.com/solid-design-principles/" rel="nofollow noreferrer">Single Responsibility Principle</a>. For a reasonably-sized script (more than 200 lines of code or so), I highly recommend using modules instead - this allows you to split up hundreds of lines of code into smaller self-contained script files, which make things a <em>lot</em> easier to understand once you're past the initial hurdle of figuring out how they work.</p>

<p>(like always, if you want ancient obsolete browsers to be able to run your code as well, use a <a href="https://github.com/github/fetch" rel="nofollow noreferrer">polyfill</a>)</p>

<blockquote>
  <p>What's a better way for the server to send data to the client without any request from the client?</p>
</blockquote>

<p>You could use <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API" rel="nofollow noreferrer">websockets</a> instead, which allow for the server to communicate to the client whenever the server wishes, after the client has made an initial request. On the client-side, this could look like:</p>

<pre><code>const socket = new WebSocket('gamestate');
socket.addEventListener('message', (event) =&gt; {
  // process event.data, assign to gameArr
});
</code></pre>

<p>Note that your <code>gameArr</code> (or <code>game_arr</code>) <em>isn't actually an array</em> - it's a plain object. An array is an ordered collection of values. An object is a collection of <em>key-value</em> pairs, which is what you're working with. A less misleading variable name might be <code>gameState</code>.</p>

<p>By far, the most common variable naming convention used in Javascript is camelCase for nearly everything (except <code>class</code>es). You're using both camelCase and snake_case in your script; you might consider deciding on <em>one</em> convention, and then sticking to it. Once you have a standard, that's one less thing to have to keep in mind while writing or debugging. You may also consider using a <a href="http://eslint.org/" rel="nofollow noreferrer">linter</a> to enforce code styles - not only for variable names, but for other problems which are likely to lead to bugs and harder-to-read code (such as missing semicolons, using bracket notation <code>obj["prop"]</code> instead of dot notation <code>obj.prop</code>, using loose equality comparison <code>==</code> instead of strict equality comparison <code>===</code>, etc. There are a <em>large amount</em> of potential improvements that could be made on these fronts.)</p>

<p>Regarding control-F programming:</p>

<p>I wouldn't worry too much about having to make sure the <code>nameList</code> property being parsed in JS matches the property sent in Java. You need <em>some</em> sort of API standard regardless; it's not a code smell, there's no other choice, given that the client and server are completely separate mediums.</p>

<blockquote>
  <p>The button ID "passButton"</p>
</blockquote>

<p>In order to not repeat it more than necessary, save it in a variable, then reference that variable instead of selecting the element again. You could also consider not using IDs at all - they create global variables, which can result in bugs. Consider using classes instead. For example, if the button has a <code>passButton</code> class:</p>

<pre><code>const passButton = document.querySelector('.passButton');
passButton.style.display = 'none';
// later, reference passButton instead of calling document.querySelector again
</code></pre>

<blockquote>
  <p>The Javascript function name "pass"</p>
</blockquote>

<p>This <em>is</em> a problem, and only partially for the reason you said. Inline handlers <a href="https://stackoverflow.com/a/59539045">have too many problems</a> to be worth using; they have a demented scope chain, require global pollution, and have quote escaping issues. Use <code>addEventListener</code> instead. Once you have a reference to the button with <code>querySelector</code>, you can do:</p>

<pre><code>passButton.addEventListener('click', () =&gt; {
  // put all the code that used to be inside the "pass" function here
});
</code></pre>

<p>(and, of course, remove the <code>onclick="pass()"</code> from the HTML. Best to do the same for all your other inline handlers, you have many of them.)</p>

<blockquote>
  <p>The parameter "passNameIndex" used in the POST request</p>
</blockquote>

<p>Since the name of the endpoint already indicates what the value being sent is, why not just send the plain value?</p>

<pre><code>xhttp.send(current_name_index);
</code></pre>

<p>(or the equivalent with <code>fetch</code>)</p>

<p>Then, on the Java side, rather than <code>getRequestBodyAsMap</code>, just extract the <em>plain request body</em> as a string, and you have the <code>passNameIndexString</code> variable that you need.</p>

<blockquote>
  <p>what security issues do I need to consider?</p>
</blockquote>

<p>The biggest issue I saw was this pattern, present in a few places:</p>

<pre><code>htmlTeamList += "&lt;h3&gt;" + teamName + "&lt;/h3&gt;\n" + "&lt;ul&gt;\n";
for ( var j=1; j&lt;teamNameArr.length; j++) {
  htmlTeamList += "&lt;li&gt;" + teamNameArr[j] + "&lt;/li&gt;\n"
}
</code></pre>

<p>Directly writing an HTML string by concatenating variables is a potential security hazard, unless you're absolutely certain that the input is trustworthy. Otherwise, it'll allow for arbitrary code execution, and user cookie information could be sent to a malicious actor. For example:</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const teamName = `&lt;img src onerror="alert('evil')"&gt;`;
const teamNameArr = [];

let htmlTeamList = '';
htmlTeamList += "&lt;h3&gt;" + teamName + "&lt;/h3&gt;\n" + "&lt;ul&gt;\n";
for ( var j=1; j&lt;teamNameArr.length; j++) {
  htmlTeamList += "&lt;li&gt;" + teamNameArr[j] + "&lt;/li&gt;\n"
}

document.querySelector('div').innerHTML = htmlTeamList;</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;div&gt;&lt;/div&gt;</code></pre>
</div>
</div>


<p>I think it would be good to get into the habit of either never concatenating an HTML string with variables, or of always escaping strings first (though this can easily bite you if you happen to forget to do it). (To sanitize, remove the <code>&lt;</code> <code>&gt;</code> brackets from strings before inserting them)</p>
    </div>