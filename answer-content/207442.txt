<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The biggest problem with your PDO code is error reporting. <code>die($e-&gt;getMessage());</code> is the <strong>worst method possible</strong>. Citing from my article on <a href="https://phpdelusions.net/articles/error_reporting" rel="nofollow noreferrer">error reporting</a> (which I highly recommend to read): </p>

<ul>
<li>for the casual user the error message is pretty cryptic and confusing</li>
<li>it it essentially useless for the site programmer/admin as they likely won't be browsing the site at the moment and will have no idea that error has been occurred</li>
<li>the information provided in the error message is extremely useful for a potential hacker, as it provides them with the feedback for their actions and may leak some sensitive information about your site</li>
</ul>

<p>So never write a <code>try..catch</code> operator unless you have a certain scenario to be executed in the catch block as it will be useless and harmful. </p>

<p>Another suggestion is just a matter of taste. Given you have only one variable in the query, you can use a positional placeholder instead of a named one, sparing yourself writing some extra code:</p>

<pre><code>if(Input::exists()){
  $sql = "UPDATE `content` SET `edit_about` = ? WHERE `id` = 1";
  $query = $handler-&gt;prepare($sql);
  $query-&gt;execute([$_POST['message']]);
  Redirect::to(BASE_URL.'index');
}
</code></pre>

<p>As you may notice, the PDO code looks a bit different from the other code you are using. With a simple PDO wrapper could make this code even simpler and uniform:</p>

<pre><code>if(Input::exists()) {
    $sql = "UPDATE `content` SET `edit_about` = ? WHERE `id` = 1";
    DB::run($sql, [$_POST['message']]);
    Redirect::to(BASE_URL.'index');
}
</code></pre>

<p>The example is taken from my <a href="https://phpdelusions.net/pdo/pdo_wrapper" rel="nofollow noreferrer">PDO wrapper</a> usage examples but you can use any wrapper you like.</p>

<p>Also, I don't know which framework you are using, but $_POST['message'] seems a bit alien to me. I would expect something like <code>Input::get('message')</code> instead.</p>
    </div>