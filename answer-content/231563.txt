<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Ways to optimize:</p>

<p><strong><em>Nested loops</em></strong></p>

<p>You got nested <code>while</code> loops in <code>convert.js</code> script and that requires a particular attention.<br>The outer <code>while</code> loop contains the construction:</p>

<pre><code>...
if (getPageAmount(buffer) === originalPages) {
    while (getPageAmount(buffer) === originalPages) {
...
</code></pre>

<p>where <code>if</code> conditional redundantly checks the condition <code>getPageAmount(buffer) === originalPages</code> whereas the underling <code>while</code> loop would check the same condition by itself. Therefore, remove the redundant <code>if</code> "wrapper".</p>

<hr>

<p><strong><code>getPageAmount</code></strong> <strong><em>function</em></strong></p>

<p>Deserves a separate attention (frequently invoked function).</p>

<ul>
<li><p><code>'/Count '</code>. Many-times hardcoded search string <code>'/Count '</code> begs for extracting into a variable</p>

<pre><code>let searchStr = '/Count ';
</code></pre></li>
<li><p><code>index + '/Count '.length</code>. Duplicated expression points to a starting offset for input buffer slicing. <br>Worth to be a variable:</p>

<pre><code>let pos = buffer.indexOf(searchStr);
let startOffset = pos + searchStr.length;
let str = buffer.slice(startOffset, startOffset + 32).toString();
</code></pre></li>
<li><p><em>splitting a string by pattern and get the 1st chunk</em> (<code>~~string.trim().split(/\n|\/|\[|\&gt;/)[0]</code>). <br>What it does is splitting the input string by regex pattern <code>/\n|\/|\[|\&gt;/</code> into array of substrings. <br>Though it creates a new array of strings/chunks in memory - whereas we only need the <strong><em>1st leftmost</em></strong> chunk <code>.[0]</code>.<br>Instead, a much more efficient way is to just find the position of the 1st occurrence of the pattern and slice the input string to that point.<br>That's achievable with <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/search" rel="nofollow noreferrer"><code>String.search</code></a> + <code>String.slice</code> combination and will go <strong><em>smashingly</em></strong> faster compared to the initial approach.<br>
Eventually the optimized function would look as:</p>

<pre><code>function getPageAmount(buffer) {
    let searchStr = '/Count ',
        pos = buffer.indexOf(searchStr),
        startOffset = pos + searchStr.length;
    let str = buffer.slice(startOffset, startOffset + 32).toString();
    return ~~str.trim().slice(0, str.search(/[\n\/\[\&gt;]/))
}
</code></pre></li>
</ul>

<p><strong><em>DOM</em></strong> tree scanning</p>

<p>The "hero" of this section is <code>document.querySelector('#padding-container')</code> which appears in many places within <code>while</code> loops and queries the current <code>document</code> for a specific tag/element.<br>
Such DOM queries become an expensive operations if used frequently, moreover - in massive traversals. Depending on markup complexity and "amount" of traversal such repetative queries may make the processing +50% slower.<br>The solution here is to extract the reference to an element into a top-level variable and reference it in all needed places. </p>

<pre><code># top-level variables
...
let passes = 0;
let paddingContainer = document.querySelector('#padding-container');
</code></pre>

<p><strong><em>Extracting</em></strong> "padding container" height</p>

<p>Expression <code>~~paddingContainer.style.height.replace('px', '')</code> is duplicated in many places and is candidate for <em>Extract function</em> technique.<br>Could be even defined as unified function for getting <code>height</code> for the element passed as parameter:</p>

<pre><code>function getElHeight(el):
    return ~~el.style.height.replace('px', '')

...

    ...
    _ =&gt; {
        let padding_height = getElHeight(paddingContainer);
        paddingContainer.style.height = `${padding_height * 1.5}px`
    }
</code></pre>
    </div>