<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I get quite a lot of warnings when compiling with a reasonably picky compiler¹.  Many are due to assigning string literals (<code>const char*</code>) to <code>char*</code> variables, which risks attempting invalid writes.  For example:</p>

<pre class="lang-none prettyprint-override"><code>236002.c: In function ‘main’:
236002.c:172:30: warning: passing argument 3 of ‘insertHead’ discards ‘const’ qualifier from pointer target type [-Wdiscarded-qualifiers]
  172 |     insertHead(listNode, 10, "abc def");
      |                              ^~~~~~~~~
236002.c:163:49: note: expected ‘char *’ but argument is of type ‘const char *’
  163 | void insertHead(list *listNode, int point, char name[30]);
      |                                            ~~~~~^~~~~~~~
</code></pre>

<p><code>main()</code> and <code>createList()</code> are declared as accepting <em>unspecified</em> arguments; it's good practice to declare them taking <em>no</em> arguments:</p>

<pre><code>list *createList(void);
int main(void);
</code></pre>

<p>We call <code>allocateNewNode()</code> which doesn't exist - perhaps that should be <code>createNewNode()</code>?</p>

<p>There are <code>return</code> statements with a value, in a function declared to return <code>void</code>.  That needs to be fixed.</p>

<p>Once the code compiles, we can run it under Valgrind and see what it says:</p>

<pre class="lang-none prettyprint-override"><code>==2746238== HEAP SUMMARY:
==2746238==     in use at exit: 304 bytes in 6 blocks
==2746238==   total heap usage: 7 allocs, 1 frees, 1,328 bytes allocated
==2746238== 
==2746238== 304 (24 direct, 280 indirect) bytes in 1 blocks are definitely lost in loss record 6 of 6
==2746238==    at 0x483677F: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==2746238==    by 0x1092B7: createList (236002.c:68)
==2746238==    by 0x109161: main (236002.c:36)
==2746238== 
==2746238== LEAK SUMMARY:
==2746238==    definitely lost: 24 bytes in 1 blocks
==2746238==    indirectly lost: 280 bytes in 5 blocks
==2746238==      possibly lost: 0 bytes in 0 blocks
==2746238==    still reachable: 0 bytes in 0 blocks
==2746238==         suppressed: 0 bytes in 0 blocks
</code></pre>

<p>That's disappointing: we have failed to clean up the memory we allocated - some <code>malloc()</code> or similar is not matched with a corresponding <code>free()</code>.</p>

<p>Looking in detail at the code, I see a function <code>compareName()</code> that seems to be mostly a reimplementation of <code>strncmp()</code> - do familiarise yourself with the Standard C Library, and use it to avoid reimplementing functions that have been written for you (generally more robustly and efficiently).</p>

<p>The creation functions allocate memory, but always assume that <code>malloc()</code> was successful.  That's a latent bug - it can return a null pointer if it fails.  A minimal check could just bail out in that case:</p>

<pre><code>node *newNode = malloc(sizeof *newNode);
if (!newNode) {
    fputs("Memory allocation failure.\n", stderr);
    exit(EXIT_FAILURE);
}
</code></pre>

<p>Note: <code>malloc()</code> returns a <code>void*</code>, which needs no cast to be assigned to any pointer variable.  And we take the sizeof the pointed-to object, which is easier to check than having to look up its type.</p>

<p>More library-orientated code will just return <code>NULL</code> early, to pass the error on to the caller to handle.</p>

<p>The list structure is unusual - we don't normally use a count, but just let a sentinel pointer in <code>next</code> (either a null pointer, or a pointer back to a dummy head) indicate the end of the list.  The code seems to use a mix of both, sometimes counting (e.g. in <code>swapNode()</code>) and sometimes chasing pointers (e.g. in <code>main()</code>).</p>

<hr>

<p>¹ <code>gcc -std=c17 -Wall -Wextra -Wwrite-strings -Wno-parentheses -Wpedantic -Warray-bounds -Wstrict-prototypes -Wconversion</code></p>
    </div>