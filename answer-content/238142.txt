<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Compact Comparisons</h1>

<p>Instead of</p>

<blockquote>
<pre><code>if ability &lt; -5 or ability &gt; 5:
</code></pre>
</blockquote>

<p>try</p>

<pre class="lang-py prettyprint-override"><code>if not -5 &lt;= ability &lt;= 5:
</code></pre>

<p>I prefer these kinds of comparisons when defining acceptable bounds of inputs because you get a firm definition of the upper and lower bound without having to jump around to see where the variable is relative to the number and where the sign is pointing.</p>

<h1>Cool Counter</h1>

<blockquote>
<pre><code>last = -1
critical = False
fail = True
for d in outcome:
    if d != 1:
        fail = False
    if d == last and d != 1:
        critical = True
    last = d
</code></pre>
</blockquote>

<p>There's a lot of code here, and it's not particularly readable. In the built in collections module, there's a class called <a href="https://docs.python.org/3.1/library/collections.html" rel="nofollow noreferrer">Counter</a>, you can use it to replace this code like this:</p>

<pre class="lang-py prettyprint-override"><code>from collections import Counter
# ... 

counts = Counter(outcome)
# check for critical success (a pair) or failure (all 1s)
fail = counts[1] == keep_dice
critical = not fail and any([ count &gt;= 2 for _, count in counts.items() ])
</code></pre>

<p>If you use this <code>Counter</code> cleverly, you can avoid having to keep making sure that <code>outcomes</code> is sorted and reversed properly.</p>

<h1>Cromulent Class</h1>

<p>I'm not so overzealous as to apply OOP where it isn't needed, but the fact that you forgot to reverse <code>outcome</code> here makes me wonder if there's a legitimate need for a class that wraps your dice rolls.</p>

<blockquote>
<pre><code> if critical:
    # critical success - add the next highest/lowest die as well
    if keep_dice == dice:
        # roll an additional die
        outcome.append(roll_die())
        outcome.sort()
</code></pre>
</blockquote>

<pre class="lang-py prettyprint-override"><code>from random import randint
from collections import Counter

def roll_die(sides=10):
    return randint(1, sides)

class DiceRoll:
    """Keeps track of which numbers have been rolled and which will be kept"""

    def __init__(self, total: int):
        self.dice = [ roll_die() for i in range(total) ]
        self.keep(0)

    """Change the number of dice that are being kept in this roll

    count: how many dice to keep
    highs: whether or not to keep the highest dice."""
    def keep(self, count: int, highs: bool = True):
        # roll any extra die if necessary
        self.dice += [ roll_die() for i in range(count - len(self.dice)) ]
        self.kept = Counter(sorted(self.dice, reverse = highs)[:count])

    """Returns a Boolean indicating if all rolls kept herein are of the same digit.

    The digit can be supplied as the parameter, otherwise True is returned if
    the kept rolls consist of only one digit regardless of what that digit is.

    If no dice have been rolled or kept, False is returned.
    """
    def keeps_only(self, d: int = None):
        least_one = [ k for k, count in self.kept.items() if count != 0 ]
        return len(least_one) == 1 and (least_one[0] is d or d is None)

    """Returns a Boolean indicating if at least two rolls of the same digit are kept herein.

    The digit can be supplied as the parameter, otherwise the Boolean returned indicates if
    *any* digit is repeated at least once.
    """
    def keeps_pair(self, d: int = None):
        return any(count &gt;= 2 and (n is d or d is None) for n, count in self.kept.items())

    """Returns the number of dice that aren't being discarded in this DiceRoll"""
    def kept_count(self):
        return len(self.kept_list())

    """Returns a list of all of the dice as currently kept in the DiceRoll"""
    def kept_list(self):
        return list(self.kept.elements())

    """Sets the results of all of the rolls (kept or not) to the provided digit."""
    def set_all(self, digit: int):
        self.dice = [digit] * len(self.dice)
        self.keep(self.kept_count())

# input
ability, heroic = [ int(input(a + ': ')) for a in ['ability', 'heroic'] ]
if not -5 &lt;= ability &lt;= 5:
    print(f'Invalid ability value "{ability}". Must be between -5 and +5')
if not 0 &lt;= heroic &lt;= 5:
    print(f'Invalid heroic dice amount "{heroic}". Must be between 0 and 5 (3 + 2 ritual dice)')

# basic roll config
total = 2 + abs(ability) + heroic
keep_count = 2 + heroic
keep_highs = ability &gt;= 0

# make the roll
roll = DiceRoll(total)
roll.keep(keep_count, keep_highs)

# info now for printing later
raw = roll.dice.copy();
info = ''

# special effects
if roll.keeps_only(1):
    roll.set_all(0)
    info = "Failure"
elif roll.keeps_pair():
    roll.keep(keep_count + 1, keep_highs)
    info = "Success"

print(f"""
Rolling {total}d10, keep {'highest' if keep_highs else 'lowest'} {keep_count}
Roll: {format(raw)}
Outcome: {format(roll.kept_list())}
Total: {sum(roll.kept_list())}
{f'Additional Info: **Critical {info}**' if info else ''}
""")
</code></pre>
    </div>