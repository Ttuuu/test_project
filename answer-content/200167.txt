<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Avoid the sort</h1>
<p>You are almost there. But there is room for some improvements</p>
<h2>Sparse array</h2>
<p>Using an array to store number frequency works. Javascript will know to create a sparse array, and will sort such arrays using only the elements in it.</p>
<p>A spare array is an array that is not continuous. This is done to reduce the memory use. However there is a penalty for the memory saved, and that is it takes longer to access each item, as the index is used to find the real index, which then can get the item.</p>
<p>For a standard array, the index is used directly to get the item.</p>
<h2>Sort is complex</h2>
<p>The sort is an expensive operation and as you are only needing the top two you can store the top two results as you count the frequency of numbers.</p>
<p>This also means you don't need to store the number you are counting with each count, just how many there are.</p>
<p>The logic goes like this, see rewrite for implmentation</p>
<pre><code>if frequency greater than second place
   if frequency greater than first place
      if first place the same value
          set the new first place frequency
      else
          move first place to second
          set first place to the new first 
   else
       set the new second place 
</code></pre>
<p>When done just return the first and second values.</p>
<p>It could also be done using a Map, but you would do that if the items to count were not able to be indexes (eg words).</p>
<h2>More than one correct answer</h2>
<p>The is a possibility that all values have the same frequency. That means that any two will be correct. Or as your second test <code>[2, 2, 3, 2, 4, 3, 4]</code> there are two correct answers <code>[2,3]</code> or <code>[2,4]</code>. As there are no rules for this any of the correct answers will do.</p>
<h2><code>for</code> loops are better than <code>Array.forEach</code></h2>
<p>Using a <code>for</code> loop to iterate over the array is more performant than using the <code>array.forEach</code> function.</p>
<h2>A rewrite.</h2>
<p>The rewrite avoids the sort</p>
<pre><code>const topTwoElement = nums =&gt; {
    const arr = [];

    const first = {count : 0, value : null};
    const second = {count : 0, value : null};
    for (const num of nums) {

        if (arr[num]) { arr[num] += 1 }
        else { arr[num] = 1 }
        
        // to avoid having to index into the sparse array in the 
        // code to test for top two
        const count = arr[num];

        if (count &gt; second.count) {
            if (count &gt; first.count) {
                if (first.value === num) {
                    first.count = count
                } else {
                    second.count = first.count;
                    second.value = first.value;
                    first.count = count;
                    first.value = num;
                }
            } else {
                second.count = count;
                second.value = num;
            }
        }
    }
    return [first.value, second.value];
}
</code></pre>
    </div>