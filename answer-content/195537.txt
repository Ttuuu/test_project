<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First of all do not use Laravel 5.4 even if you've written <em>some</em><sup>*</sup> code already, use latest 5.7, and try to always update.</p>

<p><sub>*: You really need to rewrite the application if you have code like you presented everywhere, so just take your time and use L5.7. Idea is already there you just need to improve it - pure coding, no thinking.</sub></p>

<h2>Model(s)</h2>

<h3>Standards</h3>

<p>You are sticking to the standard (I guess because User model is the stock one) and using class name <code>User</code> for a model means that table is plural which renders <code>$table</code> property useless and you save one line.</p>

<p>Each table shall have its own <em>Model</em>.</p>

<blockquote>
  <p>Note that we did not tell Eloquent which table to use for our Flight model. By convention, the "snake case", plural name of the class will be used as the table name unless another name is explicitly specified.</p>
</blockquote>

<hr>

<h3>Relationships</h3>

<p>Main reason you have read about Laravel when you were googling around which framework to use is because its ORM <em>Eloquent</em><sup>*</sup>. Eloquent is a abstraction so you do not even need to know how each relationship work under the hood, it does all the magic for you. Firstly you'll need to understand what relationships are so <a href="https://www.quora.com/What-are-the-different-type-of-relation-in-RDBMS" rel="nofollow noreferrer">google around</a>, and when you are done use <a href="https://laravel.com/docs/5.6/eloquent-relationships" rel="nofollow noreferrer">superb documentation of Laravel<sup>**</sup></a> and get all the info from there.</p>

<p><sub>*,**: In early days of Laravel it was the selling point for many developers.</sub></p>

<p>Defining the relationships is hard part of RDBMS design, so take your time, do it right, use pen and paper and then code it - easy part if design is right.</p>

<blockquote>
  <p><strong>Note</strong>: For <code>user_reactions</code> use <a href="https://laravel.com/docs/5.7/eloquent-relationships#polymorphic-relations" rel="nofollow noreferrer">polymorphic relations</a>.</p>
</blockquote>

<p>Invest time to learning relationships it will pay off soon :)</p>

<blockquote>
  <p><strong>Note</strong>: I am not writing about how I would define relations you have in code because of lack of context and mainly because of helping too much and I consider it as giving a fish instead of teaching how to fish.</p>
</blockquote>

<h2>Controller</h2>

<h3>Routing / Middleware / Route-Model-Binding</h3>

<p>Forget about defining middlewares in controller itself, use routes file for that, so delete the <code>__construct()</code> and just add it back to the routes file. You may ask why, well because of DRY, you will end up with 5-x controllers and each of them will contain <code>$this-&gt;middleware('auth');</code> in constructor, repeating...<sup>*</sup> </p>

<p><sub>*: Unless you make a "master" class like AuthController and extend from there - IMO that just adds more complications than good if you want to define middleware only.</sub></p>

<p>Use <a href="https://laravel.com/docs/5.7/routing#route-groups" rel="nofollow noreferrer">groups</a> in route file, and define middleware on the groups part, see below for route example.</p>

<hr>

<p><a href="https://laravel.com/docs/5.7/routing#route-model-binding" rel="nofollow noreferrer"><strong>Route Model Binding</strong></a> another super useful feature of Laravel. Example vs bunch of words:</p>

<p>Route:</p>

<pre><code>Route::middleware(['auth'])-&gt;group(function () {
    Route::get('profile/{user}', 'ProfileController@index'); &lt;-- Route Model Binding
    Route::get('profile/edit', 'ProfileController@edit');
});
</code></pre>

<p>Signature of <code>ProfileController@index</code> method should be <code>index(App\User $user)</code>, you see behind the scenes Laravel does query to the database and fetches <code>User</code> instance for you.</p>

<hr>

<p>After defining all the relationships on User model you will most likely end up with using a oneliner to get the <code>$user</code>:</p>

<pre><code>$user = User::with(['photos', 'interests', 'gifts', 'visits', 'likes'])-&gt;whereId($id)-&gt;get(); // if you stick with not using Route Model Binding
$user-&gt;load(['photos', 'interests', 'gifts', 'visits', 'likes']); // if you use Route Model Binding

// in view you will access interests for example $user-&gt;interests
</code></pre>

<p>Now what about edge case if user is looking at their own profile, as I understand the only difference is to change variable <code>$page_name</code>, do it right in the view (I would do it that way):</p>

<pre><code>@if($user-&gt;id == Auth::user()-&gt;id)
My Profile
@else
{{ $user-&gt;name }}
@endif
</code></pre>

<p>So proper controller after suggestions would look like:</p>

<pre><code>&lt;?php
namespace App\Http\Controllers;

use App\User;
use Auth;

class ProfileController extends Controller
{

    public function index(User $user)
    {
        $user-&gt;load(['photos', 'interests', 'gifts', 'visits', 'likes']);

        return view('profile.my_profile', compact('user'));
    }

}
</code></pre>

<h2>Packages</h2>

<p>Do not reinvent the wheel, for example for handling attachments / images use solution that is tested <a href="https://github.com/spatie/laravel-medialibrary" rel="nofollow noreferrer">https://github.com/spatie/laravel-medialibrary</a> and used by many!</p>

<p>During development <a href="https://github.com/barryvdh/laravel-debugbar" rel="nofollow noreferrer">debugbar</a> is a must.</p>
    </div>