<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p><strong><a href="https://en.wikipedia.org/wiki/Cat_(Unix)#Useless_use_of_cat" rel="nofollow noreferrer">UUOC</a></strong>. <code>pandoc</code> takes the input file name as an argument. <code>echo $file | pandoc -o outfile</code> is equivalent to <code>pandoc -o outfile $file</code>. One process invocation down.</p></li>
<li><p><strong>UUOS</strong> (<code>sed</code> in this case). <code>bash</code> has very rich string transformation features built in. For example, <code>${file%md}</code> (see <strong><code>Parameter expansion</code></strong> section of <code>man bash</code>) will strip the <code>md</code> suffix form the filename. So consider</p>

<pre><code>for file in *.md; do
    pandoc -o ../html/${file%md}html
done
</code></pre>

<p>Two more process invocations down.</p></li>
<li><p>If by any chance an <code>.md</code> filename contains funny characters (like whitespace), the substitution will produce unexpected results. It is safer to use double quotes, as in `"${....}".</p></li>
</ul>

<p>PS: It might be beneficial to abandon the shell script altogether in favor of <code>make</code>, with a <code>Makefile</code> having a single stem rule</p>

<pre><code>../html/%.html: %.md
    pandoc -o $@ $&lt;
</code></pre>
    </div>