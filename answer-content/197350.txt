<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As always I suggest to use functional approach, which makes code more readable and concise. I wrote my version, which uses recursion to search through all properties. Each of present functions has single responsibility, which simplifies maintaining of the code. The code is written using ES6.</p>

<pre><code>const objectArray = [{...},{...},{...},...]

console.log(findFromList(objectArray, 'ruckus'));

function findFromList(list, keyword) {
    return list.filter((el) =&gt; search(el, keyword));
}

function search(el, keyword) {
    const type = Array.isArray(el) ? 'array' : typeof el;
    const searchFunc = getFuncByType(type);

    return searchFunc(el, keyword);
}

function getFuncByType(type) {
    const match = {
        'string': searchInText,
        'number': searchInText,
        'boolean': searchInText,
        'array': searchInArray,
        'object': searchInObject,
    };

    if (typeof match[type] !== 'undefined') {
        return match[type];
    } else {
        throw new Error(`Unknown element type "${type}"`);
    }
}

function searchInText(text, keyword) {
    return (text.toString().indexOf(keyword) !== -1);
}

function searchInObject(obj, keyword) {
    return searchInArray(Object.values(obj), keyword);
}

function searchInArray(arr, keyword) {
    return arr.find((el) =&gt; search(el, keyword)) !== undefined;
}
</code></pre>
    </div>