<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Think Objects</strong></p>

<p>This problem has 2, readily apparent, main parts, the message to be encrypted and the "cipher machine" that encrypts it. <strong>Thinking through the problem identifying its parts</strong> is the way to start out on the Yellow Brick Road of OO goodness. So we already have enough start writing code!</p>

<pre><code>public string message;

public class CaesarCipher {
    public string encrypt (string clearText) { ... }
}
</code></pre>

<p>Now it's suddenly obvious we need to decrypt too!</p>

<pre><code>public class CaesarCipher {
    public string encrypt (string clearText) { ... }
    public string decrypt (string secretText) { ... }
} 
</code></pre>

<hr>

<p>Your code is suggestive of <a href="https://docs.microsoft.com/en-us/dotnet/api/system.collections.ienumerator?view=netframework-4.8" rel="nofollow noreferrer">the <code>IEnumerator</code> interface</a>, which has a <code>MoveNext()</code> method and <code>Current</code> (position) property.  This allows <code>foreach</code> statements on a <code>CaesarCipher</code> object:</p>

<pre><code>public class CaesarCipher : IEnumerator { ... }

CaesarCipher littleOrphanAnnieDecoderRing = new CaesarCipher();

foreach ( var alphaBit in littleOrphanAnnieDecoderRing ) { ... }
</code></pre>

<p>FORGET THIS FOR NOW. It's advanced and confusing. <a href="https://en.wikipedia.org/wiki/Caesar_cipher" rel="nofollow noreferrer">The Wikipedia article</a> shows a simple modulus arithmetic formula</p>

<hr>

<p><strong>Learn to count from zero and be a hero</strong></p>

<p>If you can read a clock you know modulus arithmetic. The clock starts at 12 counts 1,2,3... and automatically resets at 12 and keeps going.</p>

<p>But ask any military person (me!) - the clock is 24 hours and starts at zero. So 12:35 am is "zero thirty-five hours". 00:00 is exactly midnight.</p>

<p>Like the military, the programming world counts from zero. Modulus arithmetic works because we start with zero. For programming generally we avoid oodles of "off by 1" errors by starting with zero.</p>

<hr>

<p><strong>CaesarCipher details</strong></p>

<p>.</p>

<pre><code>    public class CaesarCipher {
       public CaesarCipher( int encryptionKey );
       public string encrypt ( string clearText ) { ... }
       public string decrypt ( string secretText ) { ... }
    } 
</code></pre>

<p>I leave implementation to you but here's the basics. </p>

<p>A is zero, Z is 25, etc. This is a fixed reference. I think a single <a href="https://docs.microsoft.com/en-us/dotnet/api/system.array?view=netframework-4.8" rel="nofollow noreferrer"><code>Array</code></a> would work. Read the documentation! Learn how to reference array elements and/or array element indexes.</p>

<p>Pass an offset value to the constructor. Add the offset to encrypt, subtract the offset to decrypt. Or vice versa!  See <a href="https://en.wikipedia.org/wiki/Caesar_cipher" rel="nofollow noreferrer">the Wikipedia article</a></p>

<pre><code>littleOrphanAnnieDecoderRing = new CaesarCipher(3);
string scrambled = littleOrphanAnnieDecoderRing.encrypt("X"); 
scrambled == "A";  // true
</code></pre>

<hr>

<p><strong><em>Feel The Force</em></strong></p>

<ul>
<li><p>Viewing the real-world problem as interacting objects is very important. We want to identify functionality. Delay specific algorithm implementation details as much as practical.</p></li>
<li><p>Note how OO is kinda "outside - in" approach while your code is definitely "inside - out"</p></li>
<li><p>Outside-in seems to result in compilable code from the beginning. Inside-out seems to require lots of complex code up front. </p></li>
<li><p>Designing data structures - the <code>CaesarCipher</code> class w/ an encapsulated Array lookup - simplifies the hell out of subsequent code. This is HUGE.</p>

<ul>
<li>The revelation that the clock is actually 24 hours with modulus behavior. This "24 data structure" removes 12 o'clock ambiguity, removes the need for am/pm qualifiers, and will greatly simplify the calculation code itself. If we want a 12 hour clock we can start with (inherit) the 24HourClock class because it is a more fundamental structure in the <a href="https://www.apple.com/shop/buy-watch/apple-watch" rel="nofollow noreferrer">Apple Store</a> quadrant of the time telling universe.</li>
</ul></li>
</ul>
    </div>