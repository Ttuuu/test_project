<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>(Re)use libraries</h2>

<p>My main feedback would be that you should not create CSV yourself, but rather use OpenCSV or SuperCSV or another well supported CSV library. 
If you really want to implement it yourself, make sure it follow the standard: <a href="https://tools.ietf.org/html/rfc4180" rel="nofollow noreferrer">RFC-4180</a>, so you have proper quoting and escaping. </p>

<h2>When writing files, check the encoding</h2>

<p>You currently use the default character encoding. While this can be correct, oft-times it is better to explicitly choose your own character encoding, for example UTF-8.</p>

<h2>Prefer a logging framework for logging instead of <code>System.out</code></h2>

<p>I saw:</p>

<pre><code> System.out.println("Done");
</code></pre>

<p>See here: <a href="https://stackoverflow.com/a/8601972/461499">https://stackoverflow.com/a/8601972/461499</a></p>

<blockquote>
  <p>System.out.println is an IO-operation and therefor is time consuming.
  The Problem with using it in your code is, that your program will wait
  until the println has finished. This may not be a problem with small
  sites but as soon as you get load or many iterations, you'll feel the
  pain.</p>
  
  <p>The better approach is to use a logging framework. They use a message
  queue and write only if no other output is going on.</p>
</blockquote>

<h2>Readability of streams</h2>

<p>This is a taste-thing, but I prefer to write streams formatted like this:</p>

<pre><code>servers = servers.stream()
                 .filter(i -&gt; i.getAttributes().get("Pool").isPresent() != false)
                 .collect(Collectors.toList());
</code></pre>

<p>Also, you can simplify the filter (true != false -&gt; true):</p>

<pre><code>servers = servers.stream()
                 .filter(i -&gt; i.getAttributes().get("Pool").isPresent())
                 .collect(Collectors.toList());
</code></pre>

<p>The other thing in streams is something I try to stick to: don't let the stream modify it's outside state. 
You use some <code>forEach()</code> that do modify the <code>builder</code>. I'd use a plain enhanced for-loop, I find it easier to read and easier to understand.</p>

<h2>Don't close when you did not open</h2>

<p><code>writeDataToFile</code> closes a stream that it did not open. This makes it harder to understand, and increases the probability that something goes wrong.</p>

<p>I think the <code>exportData()</code> that creates the <code>PrintWriter</code> should also close it, and catch the appropriate exceptions. Maybe rethow them as needed as different exception. If you use try-with-resources it automatically closes the <code>AutoClosable</code>.</p>

<pre><code>...
         try(PrintWriter pw = new PrintWriter(new File(getBaseTempDir() + "/filteredExport.csv")))
         {
            ...
         } catch (...) { }
</code></pre>
    </div>