<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It's good you're taking advices and improving your script.
There's still much work to do, so keep it up!</p>

<h3>Never do <code>chmod 777</code></h3>

<p>I haven't seen a single valid use case of permission 777 in recent memory.
And there's no valid use case of it in this script.
Don't take permission values lightly.
Use precisely the permission bits you really need.</p>

<h3>Don't specify absolute path of common commands</h3>

<p>Unless you have a good specific reason to do otherwise,
don't specify the absolute path of commands such as <code>/usr/bin/awk</code> and <code>/bin/chmod</code>.
Let the shell find <code>awk</code> and <code>chmod</code> in <code>PATH</code>.</p>

<p>Using absolute paths reduces the portability and usability of scripts.
This script will only work if I have those binaries at those exact locations.</p>

<h3>Don't litter the filesystem with log files</h3>

<p>Because of this:</p>

<blockquote>
<pre><code># redirect all errors to a file
exec 2&gt;debianConfigVersion3.1ERRORS.txt
</code></pre>
</blockquote>

<p>A log file will be created in the current working directory of the user calling the script.
If you call this script from many different working directories,
all of those directories will have such file.
This is not good behavior from scripts.</p>

<p>If you want to collect logs from the script,
it would be better to use a dedicated directory that is independent from the current working directory of the calling user.</p>

<p>Also, the comment is a bit misleading.
It redirects <code>stderr</code>, which is not necessary errors.
In this example, the output due to the <code>-x</code> flag goes there,
but I wouldn't call that "errors".</p>

<h3>Avoid unnecessary <code>sleep</code></h3>

<blockquote>
<pre><code>echo "Setting up server..........please wait!!!!!"
sleep 3
</code></pre>
</blockquote>

<p>After the <code>echo</code> here, a user may assume that the script is busy working.
But it's not, it's just sleeping!
I don't see the point of this <code>sleep</code>.</p>

<p>In fact all <code>sleep</code> commands in this script look unnecessary and rather annoying,
from a user's point of view.</p>

<h3>Unclear logic</h3>

<p>The motivation of this code is not clear to me:</p>

<blockquote>
<pre><code>if grep "Port 22" /etc/ssh/sshd_config
then
    echo -n "Please select/provide the port-number for ssh in iptables and sshd_config:"
    read port ### when using the "-p" option then the value is stored in $REPLY
    PORT=$port
fi
</code></pre>
</blockquote>

<p>Why ask the user for a port number if <code>/etc/ssh/sshd_config</code> contains "Port 22"?</p>

<p>What is even the importance of <code>/etc/ssh/sshd_config</code> containing "Port 22"?
A line such as <code># Port 2222</code> would match, and then what?
Why should that affect the decisions made by the script?</p>

<p>The global <code>PORT</code> variable is used and modified in multiple places in the program,
and it's hard to follow what happens to it.</p>

<p>I have a couple of tips to clean this up:</p>

<ul>
<li>Since we're talking specifically about SSHD port, call the variable <code>sshd_port</code>, not just <code>PORT</code>. (And avoid uppercase variable names, which are intended for system variables only, such as <code>PATH</code>.)</li>
<li>Do you really need to support non-default SSHD port? Probably not. In that case, just set <code>sshd_port=22</code> at the top of the script, and do not ask the user to enter it. Nice and simple.</li>
</ul>

<p>Just for the record, the original code would have been better written like this:</p>

<pre><code>if grep -q "Port 22" /etc/ssh/sshd_config
then
    read -p "Please select/provide the port-number for ssh in iptables and sshd_config:" PORT
fi
</code></pre>

<p>The improvements:</p>

<ul>
<li>Adding the <code>-q</code> flag for <code>grep</code> make the search terminate immediately when a match is found, and it also suppresses unnecessary output</li>
<li>It's possible to read directly into the variable <code>PORT</code></li>
</ul>

<p>But as I said earlier, this is not the most important problem here.
If you simplify your logic, I think this piece of code can completely disappear.</p>

<h3>Overengineering</h3>

<p>I jumped into reviewing the script from top to bottom.
Now I see that was a mistake,
it would have been better to get an overall view first.
Because the biggest problem is not all the above stuff,
but that the script is overengineered:
it contains a lot of stuff that's probably unnecessary.</p>

<p>So my first and foremost suggestion is to start by trimming it down:</p>

<ul>
<li><p>Drop features you don't really need</p></li>
<li><p>Simplify as much as possible</p>

<ul>
<li>Is there a good reason to support non-default SSHD port?</li>
<li>In <code>setUPsshd</code>, why append <code>AllowUsers</code> after line 6? Why not simply the end of the file?</li>
<li>Why use absolute paths instead of simple command names?</li>
<li>Why do <code>if [[ `/sbin/iptables-save | grep '^\-' | wc -l` &gt; 0 ]]</code> when you already know better techniques exist: <code>if grep -q '^-' /sbin/iptables-save</code></li>
<li>... The above are just examples. Question everything that looks complicated.</li>
</ul></li>
</ul>

<p>Next, review the function and variable names. For example:</p>

<ul>
<li>the name <code>checkIfUser</code> doesn't describe well what it does. (The comment "Creating new users" does -&gt; that should have been the function name.)</li>
<li>the name <code>CURRENTDIR</code> is really poor. You probably meant <code>workdir</code>.</li>
<li>the name <code>i</code> is very poor to represent usernames</li>
<li>... and so on, I suggest to review all</li>
</ul>

<p>Next:</p>

<ul>
<li>Avoid code duplication. Extract common logic to functions. Each function with a single purpose, and with a good name that describes that purpose.</li>
<li>Use consistent techniques: for example you used <code>if grep ...</code> in most places, but sometimes you used a different, far worse technique. Use the better technique, consistently everywhere.</li>
</ul>

<p>Finally, there are some obvious quality issues such as sometimes using <code>"$CURRENTDIR"/USERS.txt</code> and other times using <code>/tmp/svaka/USERS.txt</code>.</p>

<h3>Bugs</h3>

<p>In <code>setUPsshd</code> this copies from <code>"$CURRENTDIR"/sshd_config</code>:</p>

<blockquote>
<pre><code>/bin/cp -f "$CURRENTDIR"/sshd_config /etc/ssh/sshd_config
</code></pre>
</blockquote>

<p>But I don't see evidence that such file exists. <code>CURRENTDIR</code> is set to <code>/tmp/svaka</code> at the beginning of the script, and this directory is deleted at the end after every run,
so in all likelihood, the referenced source file probably doesn't exist.</p>

<hr>

<p>In <code>prepare_USERS</code>, you extract usernames into the <code>"$CURRENTDIR"/USERS.txt</code>,
and then append some more usernames to it.
This appending step will probably append usernames that are already there,
resulting in duplicates.</p>
    </div>