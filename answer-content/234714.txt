<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Naming</h2>

<p>Prefer to use conventional names. That is, the same names used by the
<a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Arrays.html" rel="nofollow noreferrer"><code>Arrays</code></a>
class in the Java standard library:</p>

<ul>
<li><code>data =&gt; a</code></li>
<li><code>comparator =&gt; c</code></li>
<li><code>start =&gt; fromIndex</code></li>
<li><code>stop =&gt; toIndex</code></li>
</ul>

<p>I've never seen the center element in merge sort being referred to as
the <code>pivot</code>. I think a more fitting name is <code>mid</code>.</p>

<h2>Inclusive start, exclusive end</h2>

<p>It is better to use inclusive start indices and exclusive stop
indices, matching the convention established by
<a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Arrays.html#sort(T%5B%5D,int,int,java.util.Comparator)" rel="nofollow noreferrer"><code>Arrays.sort</code></a>
and many other array functions in the Java standard library.</p>

<p>This way, if you make your other <code>mergeSort</code> overload public:</p>

<pre><code>public static &lt;T&gt; void mergeSort(T[] a,
                                 int fromIndex, int toIndex,
                                 Comparator&lt;T&gt; c) {
</code></pre>

<p>It becomes very easy for people to use it because the signature
matches the <code>Arrays.sort(T[], int, int, Comparator)</code> function.</p>

<h2>Garbage generation</h2>

<p>The two calls to <code>Arrays.copyOfRange</code> in <code>merge</code> creates temporary
arrays which causes unnecessary garbage collection pressure. It is
more efficient to preallocate a temporary buffer and then pass that
one around.</p>

<p>I've rewritten your <code>merge</code> function to use such a temporary
buffer. It makes the code a little more complex, but I think it is
worth it.</p>

<p>Modified code with comments removed:</p>

<pre><code>import java.util.Arrays;
import java.util.Comparator;
import java.util.Objects;

public class Sorting {
    public static &lt;T&gt; void mergeSort(T[] a,
                                     Comparator&lt;? super T&gt; c,
                                     boolean ascending) {
        Comparator&lt;? super T&gt; actualComparator = ascending ? c : c.reversed();
        mergeSort(a, 0, a.length, actualComparator);
    }
    public static &lt;T&gt; void mergeSort(T[] a,
                                     int fromIndex, int toIndex,
                                     Comparator&lt;? super T&gt; c) {
        Objects.requireNonNull(a);
        Objects.requireNonNull(c);
        if (fromIndex &gt; toIndex) {
            throw new IllegalArgumentException(
                "fromIndex(" + fromIndex + ") &gt; toIndex(" + toIndex + ")");
        }
        if (fromIndex &lt; 0) {
            throw new ArrayIndexOutOfBoundsException(fromIndex);
        }
        if (toIndex &gt; a.length) {
            throw new ArrayIndexOutOfBoundsException(toIndex);
        }
        T[] buf = Arrays.copyOf(a, a.length);
        mergeSortInternal(a, fromIndex, toIndex, c, buf);
    }
    private static &lt;T&gt; void mergeSortInternal(T[] a,
                                              int fromIndex, int toIndex,
                                              Comparator&lt;? super T&gt; c,
                                              T[] buf) {
        if (toIndex - fromIndex &lt;= 1)
            return;
        int mid = fromIndex + (toIndex - fromIndex) / 2;
        mergeSortInternal(a, fromIndex, mid, c, buf);
        mergeSortInternal(a, mid, toIndex, c, buf);
        merge(a, fromIndex, mid, toIndex, c, buf);
    }
    private static &lt;T&gt; void merge(T[] a,
                                  int fromIndex, int mid, int toIndex,
                                  Comparator&lt;? super T&gt; c,
                                  T[] buf) {
        System.arraycopy(a, fromIndex, buf, fromIndex, toIndex - fromIndex);
        int lPos = fromIndex;
        int rPos = mid;
        int lEnd = mid;
        int rEnd = toIndex;
        int pos = fromIndex;
        while (lPos &lt; lEnd &amp;&amp; rPos &lt; rEnd) {
            if (c.compare(buf[lPos], buf[rPos]) &lt;= 0) {
                a[pos++] = buf[lPos++];
            } else {
                a[pos++] = buf[rPos++];
            }
        }
        while (lPos &lt; lEnd) {
            a[pos++] = buf[lPos++];
        }
        while (rPos &lt; rEnd) {
            a[pos++] = buf[rPos++];
        }
    }
}
</code></pre>
    </div>