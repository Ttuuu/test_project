<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>General feedback</h2>

<p>The use of the <code>&lt;script&gt;</code> tag as a template is nice and I have aimed to use that more frequently in my own projects when not using a larger template library. </p>

<p>Doesn't it seem a bit redundant to have a component called <code>applicant</code>, which has a property called <code>applicant</code>? Perhaps a more generic name for those properties would be more appropriate - e.g. <code>attributes</code>. However, the advice below, which responds to your question, suggests binding the applicant to the <code>model</code> attribute instead of a property. </p>

<h2>Main question</h2>

<blockquote>
  <p>Since I'm passing the parent applicant object to the component and am modifying it directly through that passed in reference using the v-model directive am I not directly modifying the parent object so therefore keeping the data coupled as the docs recommended against.</p>
</blockquote>

<p>Your question appears nearly identical to <a href="https://stackoverflow.com/q/40915436/1575353">this SO question</a>, though in your case you have working code and are passing an object instead of a single value. To follow the guidelines in the documentation, perhaps altering the code as described in <a href="https://stackoverflow.com/a/40915857/1575353">the answer by asemahle</a> would be an optimal route.</p>

<ol>
<li><p>Change the property from <code>applicant</code> to <code>value</code>. </p>

<pre><code>props: ['value'],
</code></pre>

<p>And in the markup, use <code>v-model</code> instead of the property for applicant:</p>

<pre><code>&lt;applicant v-model="form.borrower"&gt;&lt;/applicant&gt;
&lt;applicant v-model="form.coborrower"&gt;&lt;/applicant&gt;
</code></pre></li>
<li><p>Add <code>applicant</code> via the the local data properties:</p>

<pre><code>data: function() {
    return {
        applicant: {}
    }
},
</code></pre></li>
<li><p>When the component is created, set the <code>applicant</code> to the <code>value</code> property:</p>

<pre><code>created: function() {
    this.applicant = this.value;
}
</code></pre></li>
<li><p>Watch for changes on the local data property <code>applicant</code> and <a href="https://vuejs.org/v2/api/#vm-emit" rel="nofollow noreferrer">emit</a> an event in response to that change</p>

<pre><code>watch: {
    'applicant': function() {
        // When the internal value changes, we $emit an event. Because this event is 
        // named 'input', v-model will automatically update the parent value
        this.$emit('applicant', this.applicant);
    }
}
</code></pre></li>
</ol>

<p>Below is a demonstration:</p>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="false" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>Vue.component('applicant', {
  template: '#applicant-container',
  props: ['value'],
  watch: {
    'applicant': function(valueChanged) {
      // When the internal value changes, we $emit an event. Because this event is 
      // named 'input', v-model will automatically update the parent value
      this.$emit('applicant', this.applicant);
    }
  },
  data: function() {
    return {
      applicant: {}
    }
  },
  created: function() {
    this.applicant = this.value;
  }
})

// Root Vue instance
const app = new Vue({
  el: '#app',
  data: {
    form: {
      borrower: {
        firstname: 'John',
        middlenames: '',
        surname: 'Rambo'
      },
      coborrower: {
        firstname: 'Homer',
        middlenames: '',
        surname: 'Simpson'
      }
    }
  }
});</code></pre>
<pre class="snippet-code-css lang-css prettyprint-override"><code>.row {
  border: 2px solid #5CD7FF;
  margin: 2px;
  padding: 4px;
}
.label {
  font-style: italic;
}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/vue/2.1.3/vue.js"&gt;&lt;/script&gt;

&lt;div id="app"&gt;
  &lt;h3&gt;Borrower:&lt;/h3&gt; in parent:{{ form.borrower }} 
  &lt;applicant v-model="form.borrower"&gt;&lt;/applicant&gt;
  &lt;h3&gt;Co-borrower:&lt;/h3&gt; in parent:{{ form.coborrower }}
  &lt;applicant v-model="form.coborrower"&gt;&lt;/applicant&gt;
&lt;/div&gt;
&lt;script type="x-template" id="applicant-container"&gt;
  &lt;div class="row"&gt;&lt;span class="label"&gt;Applicant Template:&lt;/span&gt;
    &lt;div class="form-group col-md-4"&gt;
      &lt;label&gt;Firstname&lt;/label&gt;
      &lt;input type="text" class="form-control" v-model="applicant.firstname" /&gt;
    &lt;/div&gt;
    &lt;div class="form-group col-md-4"&gt;
      &lt;label&gt;Middlename/s&lt;/label&gt;
      &lt;input type="text" class="form-control" v-model="applicant.middlenames" /&gt;
    &lt;/div&gt;
    &lt;div class="form-group col-md-4"&gt;
      &lt;label&gt;Surname&lt;/label&gt;
      &lt;input type="text" class="form-control" v-model="applicant.surname" /&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/script&gt;</code></pre>
</div>
</div>

    </div>