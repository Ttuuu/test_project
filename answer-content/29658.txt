<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Lets start here:</p>

<pre><code>static void release(T *p) 
{
  if (p) {       // No need to check for NULL
                 // delete has no action when applied to a NULL pointer
    delete p;

    p = 0;       // This is very dangerous.
                 // It has no actual affect (as it is local)
                 // but provides an illusionary sense of security.
  }
}
</code></pre>

<p>Here you are forcing an unnecessary copy:</p>

<pre><code>template &lt;class T, class D&gt;
unique_ptr&lt;T, D&gt; &amp;unique_ptr&lt;T, D&gt;::operator=(unique_ptr&lt;T, D&gt; u)
                                         //   ^^^^^^^^^^^^^^^^^^
                                         //   Pass by value forcing a copy
                                         //   Why are you doing that.
                                         //   If you have a reason it should be
                                         //   documented.
{
  reset(u.release());
  return *this;
}
</code></pre>

<p>Destructors should be written so they do not throw exceptions:</p>

<pre><code>template &lt;class T, class D&gt;
unique_ptr&lt;T, D&gt;::~unique_ptr()
{  
  reset();  // This calls delete which calls the destructor of T
            // Since you have no control over the type T you should take
            // precautions over what happens next.
}
</code></pre>

<p>This can generate undefined behavior</p>

<pre><code>template &lt;class T, class D&gt;
T unique_ptr&lt;T, D&gt;::operator*() const
{
  return *_ptr;  // _ptr is NULL then this is UB
                 // Is this really what you want. If so then it should
                 // be explicitly documented.
}
</code></pre>

<p>This is broken and does not work as expected if _ptr is NULL</p>

<pre><code>  template &lt;class T, class D&gt;
  void unique_ptr&lt;T, D&gt;::reset(T *p = 0)
  {
    if (_ptr != p) {
      if (_ptr) {
        unique_ptr&lt;T, D&gt;::deleter_type::release(_ptr);

        _ptr = p;   // You are only assigning to _ptr if it is NOT NULL
                    // Thus if _ptr is NULL you are leaking the `p`

                    // Also most smart pointers gurantee that once you have
                    // passed a pointer you take ownership and delete it.
                    // If the above call to release() throws an exception you
                    // are again leaking `p`. You must put in extra code to 
                    // make sure `p` is either deleted or assigned to `_ptr`
                    // not matter what happens (even an exception).
      }
    }
  }
</code></pre>

<p>This should <strong>NEVER</strong> happen</p>

<pre><code>bool operator==(const unique_ptr&lt;T1, D1&gt; &amp;x, const unique_ptr&lt;T2, D2&gt; &amp;y)
{
    return x.get() == y.get();
}
</code></pre>

<p>If two unique ptrs point at the same object then you are well and truly going to get screwed. The whole point of <code>unique ptr</code> is that they are <strong>unique</strong>.</p>

<p>Comparing ptr via <code>operator &lt;</code> is a fool's errand. Unless both pointers are in the same block of memory (ie they were allocated via the same new) they are not comparable the results are otherwise undefined.</p>

<p>When doing comparisons via <code>unique ptr</code> you should be using the underlying object (<strong>NOT</strong> the pointers).</p>
    </div>