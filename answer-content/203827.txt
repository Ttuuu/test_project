<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>Exception( const char *cmessage ) :
</code></pre>

<p>I strongly recommend making this constructor <code>explicit</code>, so that you don't permit the user to accidentally write</p>

<pre><code>void some_function(const Exception&amp;);
...
some_function("hello world");
</code></pre>

<p>My impression is that <em>most</em> C++ experts recommend <code>explicit</code> on one-argument constructors; I personally hold the minority opinion that <code>explicit</code> should be present on <em>all</em> constructors by default (i.e., if you don't have a <em>specific immediate</em> need for implicit conversion, you should just put <code>explicit</code> automatically, and sort out the consequences later if necessary).</p>

<hr>

<pre><code>catch ( std::exception &amp;ex )
</code></pre>

<p>My current employer's codebase actually does catch by non-const reference, but if you're starting from scratch, I strongly recommend catching by <em>const reference</em> by default. Accidentally mutating the current exception object <a href="https://quuxplusone.github.io/blog/2018/09/16/data-race-when-catch-by-nonconst-reference/" rel="nofollow noreferrer">can cause race conditions.</a></p>

<hr>

<p>Also, in the <code>Exception</code> constructor, your <code>catch (std::exception&amp;)</code> should almost certainly be <code>catch (...)</code>, right?</p>

<hr>

<p>As for the high-level point of what you're doing, I believe I have an outline of this sort of thing under "Mix-Ins" somewhere near the end of <a href="https://www.youtube.com/watch?v=VIz6xBvwYd8" rel="nofollow noreferrer">Template Normal Programming</a>. (Sorry, I'm rushed right now, but I can come back and give you a real link later.) (LATER: I elided that part of the talk, but the two slides on mixins are visible very briefly <a href="https://www.youtube.com/watch?v=VIz6xBvwYd8&amp;t=49m50s" rel="nofollow noreferrer">here</a>.)</p>

<p>The first improvement is to make your thing a template inheriting from <code>T</code> instead of from <code>std::runtime_error</code> specifically. Second, I'd make a function <code>my::throw_with_stacktrace(T&amp;&amp; ex)</code> that simply does <code>throw Exception&lt;std::remove_reference_t&lt;T&gt;&gt;(std::forward&lt;T&gt;(ex));</code>.</p>

<p>Gotta run, but I hope this helps a bit.</p>
    </div>