<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Personally, I would remove the <strong>invalid_pos</strong> slice.
Alternatively, you can call your recursive function using a copy of the original slice with the used element removed. The following function can remove that element and return a copy:</p>

<pre><code>func cutSlice(nums []int, i int) []int {
    res := append(append([]int{}, nums[:i]...), nums[i+1:]...)
    return res
}
</code></pre>

<p>Additionally, your function does not need to return anything. You can change the header of the slice <strong>res</strong> (which keeps some metadata and a pointer to the slice). To change that header you need to pass a pointer to your function.</p>

<pre><code>func permute(nums []int) [][]int {
    var res [][]int
    permuteHelper(nums, []int{}, &amp;res)
    return res
}
</code></pre>

<p>This way the code is simplified, and you can have a more concise and readable code.</p>

<pre><code>func permuteHelper(nums []int, list []int, res *[][]int) {
    if len(nums) == 0 {
        *res = append(*res, list)
        return
    }
    for j, el := range nums {
        tmp := append(append([]int{}, list...), el)
        permuteHelper(cutSlice(nums, j), tmp, res)
    }
}
</code></pre>

<p>Regarding the <strong>copy</strong> function in that case, it is not needed. A copy of the list under construction is passed in the recursive call in the first place.</p>
    </div>