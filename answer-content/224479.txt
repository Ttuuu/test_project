<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Solving without Recursion</h1>

<p>Here is a very simple way to solve this specific problem without recursion and with only a single function. It might not extend to all the similar problems you want to, but it could extend to some of them:</p>

<pre><code>def letterCasePermutation(S):
    results = [S]
    for i, char in enumerate(S):
        if char.isalpha():
            new_char = char.upper() if char.islower() else char.lower()
            results += [''.join([result[:i], new_char, result[i+1:]]) for result in results]
    return results
</code></pre>

<p>The idea is that each time we change a character, we can construct a new result for each old result, by simply slicing in the changed character on all those new results.</p>

<h1>Recursion with Decorator</h1>

<p>If the structure of the outer function is simple (or you are through enough in how you write your decorator) then we can write a simple decorator for such functions to use. The one to use here will be one lazily constructing parameters.</p>

<h3>Decorator based on reference</h3>

<p>If want to keep the format of your solution (the recursive function is side effect only), then we need to have the decorator specifically know that parameter and return it as a result. Your solution (taken as a function instead of as a method) with this method applied to it:</p>

<pre><code>def lazy_curry_by_ref(results=list,**other_params):
    def dec(f):
        def wrapped(*args,**kwargs):
            result_item = results()
            other_params_items = {param:other_params[param]() for param in other_params}
            f(*args, **kwargs, result=result_item, **other_params_items, call_self=f)
            return result_item
        return wrapped
    return dec

@lazy_curry_by_ref(results=list,i=int)
def letterCasePermutation(self, S, i=0, results=None, call_self=None):

    if i &gt;= len(S):
        results.append(S)
        return

    if S[i].isalpha():
        temp = list(S)
        temp[i] = S[i].upper() if S[i].islower() else S[i].lower()
        call_self("".join(temp), i+1, results)

    call_self(S, i+1, results)
</code></pre>

<p>Note that I have specifically not included the typical <code>functools.wrap(f)</code> decorator on the inner decorator, since the the signature have changed and cannot be used anymore, so one would need to write a different type of decorator or special code to handle this.</p>

<h3>Decoratur based on return</h3>

<p>The above solution would be even simpler if we rewrote the program to return results, then we could just use a classic lazy_curry decorator:</p>

<pre><code>def lazy_curry(**params):
    def dec(f):
        def wrapped(*args,**kwargs):
            params_items = {param:params[param]() for param in params}
            return f(*args,**kwargs, **params_items, call_self=f)
        return wrapped
    return dec

@lazy_curry(results=list,i=int)
def letterCasePermutation(self, S, i=0, results=None, call_self=None):

    if i &gt;= len(S):
        results.append(S)
        return results

    if S[i].isalpha():
        temp = list(S)
        temp[i] = S[i].upper() if S[i].islower() else S[i].lower()
        call_self("".join(temp), i+1, results)

    return call_self(S, i+1, results)
</code></pre>
    </div>