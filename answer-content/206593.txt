<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You are using a list to store the association between names and the previous maximum value. This makes your algorithm O(N^2) because for each element, you might have to go through a list of all previous elements.</p>

<p>You can use a hash table (which has O(1) lookup) to make your algorithm O(N).</p>

<p>You can also add keys when they are not found rather than doing it all at the start for simpler code.</p>

<p>Try to avoid using indices when you can iterate by elements.</p>

<p>quick example solution:</p>

<pre><code>(defun launchSequenceChecker (systemNames stepNumbers)
  (let ((ht (make-hash-table :test 'equal)))
    (loop named l
      for name in systemNames
      for num  in stepNumbers
      do (let ((prev (gethash name ht)))
           (if prev
             (progn
               (when (&gt; prev num)
                 (return-from l nil))
               (setf (gethash name ht)
                     (max prev num)))
             (setf (gethash name ht) num)))
      finally  (return-from l t))))
</code></pre>
    </div>