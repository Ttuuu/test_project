<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Since you already have a <code>std::vector&lt;std::string&gt;</code>, it's much simpler to let that own the memory, and build a parallel <code>std::vector&lt;char*&gt;</code> which just keeps pointers into the original strings. The only difficulty is ensuring this isn't used after the owning vector goes out of scope.</p>

<p>The simplest implementation is something like:</p>

<pre><code>std::vector&lt;char*&gt; strlist(std::vector&lt;std::string&gt; &amp;input) {
    std::vector&lt;char*&gt; result;

    // remember the nullptr terminator
    result.reserve(input.size()+1);

    std::transform(begin(input), end(input),
                   std::back_inserter(result),
                   [](std::string &amp;s) { return s.data(); }
                  );
    result.push_back(nullptr);
    return result;
}
</code></pre>

<p>where the caller is responsible for managing the lifetimes of the two vectors. You get the required <code>char **</code> by calling <code>result.data()</code>.</p>

<p>If you want to avoid the potential lifetime problems, you can write a class to own both vectors for you so their lifetimes are synchronized.</p>

<p>Note that I deliberately haven't taken the vector by const ref, because <code>execve</code> takes an array of pointers to non-const char, but it doesn't mutate the contents so there's no need to make a copy. This lack of const-safety is common in old C interfaces.</p>

<hr>

<p>PS. I didn't <em>force myself to use <code>transform</code> when a simple loop would do</em> hoping for some magic optimization. I used <code>transform</code> instead of a simple loop because it <em>more clearly expressed the semantics of my code</em>.</p>

<p>A "simple" loop is a powerful multipurpose language construct which <em>could</em> do anything. By comparison <code>transform</code> is a simple, special-purpose algorithm, and much easier to reason about as a consequence.</p>

<p>Not least, since I had to take a non-const reference to the argument despite having no intention of mutating it, anything that makes it easier to see at a glance that no mutation is possible, is helpful.</p>
    </div>