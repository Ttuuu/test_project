<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>That looks already quite good and clean. Here are my remarks:</p>

<blockquote>
<pre><code>private var first: StackNode? = nil // The topmost node in the stack
</code></pre>
</blockquote>

<p>An optional value is initalized to <code>nil</code> by default, so</p>

<pre><code>private var first: StackNode? // The topmost node in the stack
</code></pre>

<p>is sufficient. And with a different variable name it becomes self-explaining:</p>

<pre><code>private var top: StackNode?
</code></pre>

<p>There are trailing semi-colons at some places, these are not needed in Swift.</p>

<p>Here</p>

<blockquote>
<pre><code>    let newElement = StackNode(newElement)
    newElement.next = first
    first = newElement
</code></pre>
</blockquote>

<p>you pass one property of the new node as parameter of the init method, and
set the other via accessor, which looks asymmetric to me. With</p>

<pre><code>private class StackNode {
    var next: StackNode?
    let element: T

    init(_ element: T, next: StackNode?) {
        self.element = element
        self.next = next
    }
}
</code></pre>

<p>this simplifies to</p>

<pre><code>    let newElement = StackNode(newElement, next: first)
    first = newElement
</code></pre>

<p>or even</p>

<pre><code>    first = StackNode(newElement, next: first)
</code></pre>

<p>Note also that the <code>element</code> property in <code>StackNode</code> can be a <em>constant.</em></p>

<p>A better property name for</p>

<blockquote>
<pre><code>/// The number of elements in the stack
var size: Int 
</code></pre>
</blockquote>

<p>might be <code>count</code> – that is what all Swift collection types use. The forced
unwrap in</p>

<blockquote>
<pre><code>    // Traverse the list
    while current != nil {
        count += 1
        current = current!.next
    }
</code></pre>
</blockquote>

<p>is safe, but can even be avoided with</p>

<pre><code>    // Traverse the list
    while let node = current {
        count += 1
        current = node.next
    }
</code></pre>

<p>A common practice is to put the implementation of protocols into separate
extensions:</p>

<pre><code>extension StackList: CustomStringConvertible {
    var description: String { ... }
}
</code></pre>

<p><em>Naming:</em> <code>class StackNode</code> is defined within the <code>StackList</code> “namespace,”
so you can simply name it <code>Node</code>. And I would name <code>StackList</code> just
<code>Stack</code> – it is an implementation detail that it uses a linked list.</p>

<h3>Further suggestions</h3>

<p>Make <code>StackList</code> conform to <code>Sequence</code>. A simple implementation would be</p>

<pre><code>extension StackList: Sequence {
    func makeIterator() -&gt; AnyIterator&lt;T&gt; {
        var current = first
        return AnyIterator {
            guard let node = current else { return nil }
            defer { current = node.next }
            return node.element
        }
    }
}
</code></pre>

<p>That allows to enumerate all elements easily:</p>

<pre><code>for item in stack { print(item) }
</code></pre>

<p>In addition, you can use it in the <code>description</code> method which then simplifies
to</p>

<pre><code>extension StackList: CustomStringConvertible {
    var description: String {
        return "[" + self.map { "\($0)" }.joined(separator: ", ") + "]"
    }
}
</code></pre>

<p>Implement a <code>peek()</code> method to get the top element without removing it,
and an <code>isEmpty</code> property.</p>
    </div>