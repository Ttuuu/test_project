<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There's no better way than creating a temporary dictionary to quickly update the contents of the entire file the way you want. However you can speed things by not using <code>csv.DictReader</code> and <code>csv.DictWriter</code> because they require building a separate temporary dictionary for each row processed.</p>

<p>Here's a more efficient version based on that supposition that also effectively updates the file "in-place". Note that the order of the rows in the file will be changed as a result of storing them temporarily in the dictionary. If that's important, use a <a href="https://docs.python.org/2/library/collections.html#collections.OrderedDict" rel="nofollow"><code>collections.OrderedDict</code></a> instead.</p>

<p>Also noteworthy is that it would be even more efficient to use @user3757614's suggestion, and instead do a less complicated <code>mydict.update(temp_dict)</code> (and then write <code>mydict.items()</code> out as the updated version of the file). If you want to preserve <code>mydict</code>, just make a copy of it first and then update that with <code>temp_dict</code>'s contents.</p>

<pre><code>import csv
import os

mydict = {
    "name2" : "pass2",
    "name3" : "pass3"
#     ...
}

csv_file = 'users.csv'  # file to be updated
tempfilename = os.path.splitext(csv_file)[0] + '.bak'
try:
    os.remove(tempfilename)  # delete any existing temp file
except OSError:
    pass
os.rename(csv_file, tempfilename)

# create a temporary dictionary from the input file
with open(tempfilename, mode='rb') as infile:
    reader = csv.reader(infile, skipinitialspace=True)
    header = next(reader)  # skip and save header
    temp_dict = {row[0]: row[1] for row in reader}

# only add items from my_dict that weren't already present
temp_dict.update({key: value for (key, value) in mydict.items()
                      if key not in temp_dict})

# create updated version of file
with open(csv_file, mode='wb') as outfile:
    writer = csv.writer(outfile)
    writer.writerow(header)
    writer.writerows(temp_dict.items())

os.remove(tempfilename)  # delete backed-up original
</code></pre>
    </div>