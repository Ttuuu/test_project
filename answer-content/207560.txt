<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Prefer C++ headers</h1>

<p>Instead of <code>&lt;math.h&gt;</code>, it's better to include <code>&lt;cmath&gt;</code> and qualify names such as <code>std::log</code>.</p>

<h1>Prefer constants to macros</h1>

<p>Re-write <code>pi</code> as a strongly-typed, scoped variable rather than a preprocessor macro.  Same for <code>2*pi</code> if you really feel the need.</p>

<h1>Manage line lengths</h1>

<p>Some lines are very long.  In many cases, they just need newlines adding (e.g. bodies of inline functions can have their own lines).</p>

<p>In the case of the <code>std::clamp()</code> call, it's probably worth using variables to give a name to the candidate value before clamping. </p>

<h1>Easier sizeof</h1>

<p>Instead of recomputing the size of <code>bufferLeft</code> and <code>bufferRight</code> like this:</p>

<blockquote>
<pre><code>    memset(&amp;bufferLeft, 0, blockSize * sizeof(double));
    memset(&amp;bufferRight, 0, blockSize * sizeof(double));
</code></pre>
</blockquote>

<p>It's easier and clearer to just use the whole array size:</p>

<pre><code>    memset(&amp;bufferLeft, 0, sizeof bufferLeft);
    memset(&amp;bufferRight, 0, sizeof bufferRight);
</code></pre>

<p>Personally, I'd generally prefer <code>std::fill</code> to match types and ensure the intention is clear:</p>

<pre><code>    std::fill(std::begin(bufferLeft), std::end(bufferLeft), 0.0);
    std::fill(std::begin(bufferRight), std::end(bufferRight), 0.0);
</code></pre>

<p>Then I don't need to think about whether all-bits zero is the same as 0.0 or not.</p>
    </div>