<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Let's start by updating this line to Swift 4.2 :</p>

<pre><code>let pivotElement = a[Int.random(in: low..&lt;high)]
</code></pre>

<p>In my tests, <code>Int.random(in:)</code> is way faster than <code>Int(arc4random_uniform)</code>, and the comparisons won't take that into consideration.</p>

<hr>

<blockquote>
  <h2>Efficiency</h2>
</blockquote>

<h2>1st improvement</h2>

<p>There is a small improvement to this algorithm, but it still gives a performance gain by rearranging the conditions from the most probable to the least, in order to take advantage of shortcut execution:</p>

<pre><code>if k &lt;= pivotIndex {
    // k-smallest element is in the first partition:
    high = pivotIndex
} else if k &gt; pivotIndex + 1 {
    // k-smallest element is in the second partition
    low = pivotIndex
    if a[low] == pivotElement {
        low += 1
    }
} else {
    // Pivot element is the k-smallest:
    return pivotElement
}
</code></pre>

<p>The first two conditions are equiprobable. The least probable case is left for last.</p>

<p><strong>Benchmarks</strong></p>

<p>The benchmarking code is the following:</p>

<pre><code>let a = Array(1...10_000).shuffled()

var timings: [Double] = []
for k in 1 ... a.count {
    let start = mach_absolute_time()
    _ = a.kSmallest(k)
    let end = mach_absolute_time()
    timings.append(Double(end - start)/Double(1e3))
}
let average: Double = timings.reduce(0, +) / Double(timings.count)
print(average, "us")

var timings2: [Double] = []
for k in 1 ... a.count {
    let start = mach_absolute_time()
    _ = a.kSmallest2(k)
    let end = mach_absolute_time()
    timings2.append(Double(end - start)/Double(1e3))
}
let average2: Double = timings2.reduce(0, +) / Double(timings2.count)
print(average2, "us")
</code></pre>

<p>It prints the average time for looking up one k<em>th</em> smallest element.</p>

<p><code>kSmallest</code> is the original, <code>kSmallest2</code> is the new one. They both operate on the same array <code>a</code> to ensure fairness. </p>

<p><code>kSmallest2</code> is up to <code>7Œºs</code> faster per lookup. The fluctuation is due to the randomness of the arrangement of the elements of the array. Which translates into up to ~<code>70ms</code> execution time gain for a 10.000-element array:</p>

<pre><code>kSmallest    1.215636265 s (total time)
kSmallest2   1.138085315 s (total time)
</code></pre>

<p>In the worst case, in my tests, <code>kSmallest2</code> may rarely be <code>2Œºs</code> slower per lookup, and it is to be blamed on the randomness of choosing a pivot. Comparisons should probabilistically favor the second version.</p>

<hr>

<h2>2nd improvement</h2>

<p>The following improvement concerns arrays with duplicates, and avoids unnecessary loops:</p>

<pre><code>while a[low] == pivotElement, k - low &gt; 1 {
    low += 1
}
</code></pre>

<p>Instead of hopping by one index alone:</p>

<pre><code>if a[low] == pivotElement {
    low += 1
}
</code></pre>

<p><strong>Benchmarks</strong></p>

<p>The following code was used:</p>

<pre><code>//As suggested by Tim Vermeulen
let a = (0..&lt;100).flatMap { Array(repeating: $0, count: Int.random(in: 10..&lt;30)) }
    .shuffled()

var timings1: [Double] = []
for k in 1 ... a.count {
    let start = mach_absolute_time()
    _ = a.kSmallest(k)
    let end = mach_absolute_time()
    timings1.append(Double(end - start)/Double(1e6))
}
let average1: Double = timings1.reduce(0, +) / Double(timings1.count)
print("kSmallest", average1, "ms")

var timings2: [Double] = []
for k in 1 ... a.count {
    let start = mach_absolute_time()
    _ = a.kSmallest2(k)
    let end = mach_absolute_time()
    timings2.append(Double(end - start)/Double(1e6))
}
let average2: Double = timings2.reduce(0, +) / Double(timings2.count)
print("kSmallest2", average2, "ms")


var timings3: [Double] = []
for k in 1 ... a.count {
    let start = mach_absolute_time()
    _ = a.kSmallest3(k)
    let end = mach_absolute_time()
    timings3.append(Double(end - start)/Double(1e6))
}
let average3: Double = timings3.reduce(0, +) / Double(timings3.count)
print("kSmallest3", average3, "ms")
</code></pre>

<p><code>kSmallest3</code> has both the <strong>1st</strong> and <strong>2nd</strong> improvements.</p>

<p>Here are the results:</p>

<pre><code>kSmallest  0.0272 ms
kSmallest2 0.0267 ms
kSmallest3 0.0236 ms
</code></pre>

<p>In an array with a high number of duplicates, the original code is now ~<strong><code>13%</code></strong> faster by implementing both improvements. That percentage will grow with the richness in duplicates, and a higher array count. If the array has unique elements, <code>kSmallest2</code> is naturally the fastest since it'll be avoiding unnecessary checks.</p>

<hr>

<h2>3rd improvement (a üêû fix?)</h2>

<p>There are unnecessary loops where the the random index is that of a pivot element which is already in <em>its rightful</em> place/order. These elements aren't swapped by the code, since they are already well-placed. These elements are the ones that fall in the case of <code>k &gt; pivotIndex + 1</code> and the <code>low</code> index is equal to <code>pivotIndex</code>. An endless loop may occur if <code>Int.random(in: low..&lt;high)</code> always returns <code>low + 1</code>.</p>

<p>The following code prevents such an (<em>admittedly unlikely</em>) endless loop:</p>

<pre><code>var orderedLows: Set&lt;Int&gt; = []  //This will contain the indexes of elements that are already well ordered
while high - low &gt; 1 {
    // Choose random pivot element:
    var randomIndex: Int
    repeat {
        randomIndex = Int.random(in: low..&lt;high)
    } while orderedLows.contains(randomIndex) &amp;&amp;
    !orderedLows.isSuperset(of: Array&lt;Int&gt;(low..&lt;high))

    let pivotElement = a[randomIndex]

    ...

    } else if k &gt; pivotIndex + 1 {
        // k-smallest element is in the second partition
        if low == pivotIndex
        {
            orderedLows.insert(randomIndex)
        }
        low = pivotIndex
        while a[low] == pivotElement, k - low &gt; 1 {
            low += 1
        }
    }
</code></pre>

<p><strong>Benchmarks</strong></p>

<p>The following array was operated on with the same benchmarking code as in the second improvment:</p>

<pre><code>let a = (0..&lt;100).flatMap { Array(repeating: $0, count: Int.random(in: 10..&lt;30)) }
    .shuffled()
</code></pre>

<p>And here are the results:</p>

<pre><code>kSmallest  0.0662 ms
kSmallest2 0.0639 ms
kSmallest4 0.0575 ms
</code></pre>

<p><code>kSmallest4</code> being the version with all three improvements, and it is faster than all previous versions. The <code>a</code> array was purposefully chosen to be rich in duplicates to heighten the possibilty of elements that are already in the correct order. If not, <code>kSmallest4</code> doesn't show any flagrant improvement.</p>

<hr>

<blockquote>
  <h2>Naming</h2>
</blockquote>

<p>1) <code>pivotIndex</code> is confusing, one would expect it t be the index of <code>pivotElement</code>, but it's not. </p>

<p>2) <code>a</code> isn't very descriptive. Its name neither conveys its mutability nor that it is a copy of the initial array.</p>

<p>3) Such an algorithm, n√©e <a href="https://www.sciencedirect.com/science/article/pii/S0304397505004081" rel="nofollow noreferrer"><code>FIND</code></a>, is commonly known as <code>quickSelect</code> (more names could be found <a href="https://rosettacode.org/wiki/Quickselect_algorithm#C.2B.2B" rel="nofollow noreferrer">here</a>). Personally,  I would prefer <code>nthSmallest(_ n: Int)</code>, for the following reasons: </p>

<ul>
<li><code>n</code> instead of <code>k</code> since the latter is usually used in constant naming</li>
<li><code>nth</code> instead of <code>n</code> denotes ordinality</li>
<li>Since the comparison predicate isn't provided, <code>nthSmallest(_ n: Int)</code> would be preferable to <code>nthElement(_ n: Int)</code> since it means that we'll be comparing elements in an ascending order.</li>
</ul>

<hr>

<blockquote>
  <h2>Readability/Alternative approach</h2>
</blockquote>

<p>If readability and conciseness are paramount, here is an alternative that uses the <code>partition(by:)</code> method applied to the array slice <code>mutableArrayCopy[low..&lt;high]</code> :</p>

<pre><code>public func nthSmallest(_ n: Int) -&gt; Element {
    precondition(count &gt; 0, "No elements to choose from")
    precondition(1 &lt;= n &amp;&amp; n &lt;= count, "n must be in the range 1...count")

    var low = startIndex
    var high = endIndex
    var mutableArrayCopy = self

    while high - low &gt; 1 {
        let randomIndex = Int.random(in: low..&lt;high)
        let randomElement = mutableArrayCopy[randomIndex]
        //pivot will be the index returned by partition
        let pivot = mutableArrayCopy[low..&lt;high].partition { $0 &gt;= randomElement }
        if n &lt; pivot + 1 {
            high = pivot
        } else if n &gt; pivot + 1 {
            low = pivot
            //Avoids infinite loops when an array has duplicates
            while mutableArrayCopy[low] == randomElement, n - low &gt; 1 {
                low += 1
            }
        } else {
            return randomElement
        }
    }
    // Only single candidate left:
    return mutableArrayCopy[low]
}
</code></pre>

<p>In my tests, the more duplicates in the array, the more this version gets on a par (if not better) with the original code, but a bit slower when the array has unique elements.</p>

<p>Here are some tests:</p>

<pre><code>[1, 3, 2, 4, 7, 8, 5, 6, 9, 10].nthSmallest(6)          //6

[10, 20, 30, 40, 50, 60, 20, 30, 20, 10].nthSmallest(4) //20

["a", "a", "a", "a", "a"].nthSmallest(3)                //"a"
</code></pre>

<p>A recursive rewrite of the original code seems more readable. But at the cost of execution time, since each time the function is called, a mutable copy of the array will be created.</p>
    </div>