<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Things that I liked</h1>

<ul>
<li>Separation of Code and UI.</li>
<li>Clear naming of methods and variables. I didn't need any documentation with it, the names were enough.</li>
</ul>

<h1>Things that I didn't like</h1>

<ul>
<li>Why? Why would you use <code>this</code> everywhere? It is not required and reduces readibility.</li>
<li>No need to label things like <code>// VARIABLES</code>, <code>// CONSTRUCTOR</code>. If you are using an IDE like Eclipse use <code>Ctrl + O</code>, you can see all the methods, constructors and what not.</li>
</ul>

<h1>Things that you should include in your project</h1>

<ul>
<li>More description about the game in <code>README.md</code>.</li>
<li>LICENSE, the code over here is <code>CC-3.0</code> licensed, but you haven't mentioned any in your GitHub project.</li>
</ul>

<h1>Some Suggestions</h1>

<ol>
<li><strong>Use of Negation</strong></li>
</ol>

<blockquote>
  <p>Use negation to reduce the indentation and increase readibility. (Though it might be a little confusing at first) <br> <br>
  Old <code>onKeyPressed()</code></p>

<pre><code>if (!board.getGameFinished()) { // keep moving only is game not finished
    ...
    if (direction!="") {
        destination = board.computeDestination(direction);
        ...
    }
}
</code></pre>
  
  <p>Changed <code>onKeyPressed()</code></p>

<pre><code>if (board.getGameFinished())
    return;
...
if (direction == "")
    return;
...
destination = board.computeDestination(direction);
board.makeMove(destination);
</code></pre>
</blockquote>

<hr>

<ol start="2">
<li><strong>Use of Switch-Case statement</strong></li>
</ol>

<blockquote>
  <p><strong>Avoid using <em>MAGIC NUMBERS</em>.</strong><br> <br>
  Usage of numbers like -1, 0, 1. What do these numbers mean? Maybe you can write comment and would be able to understand. But after 2-3 months you wouldn't be able to figure out their meaning.</p>

<pre><code>switch (box.getChoice()) { // take action depending on user's answer to 
    case -1: //close
        break;
    case 0: //new game
        board.initBoard(); 
        break;
    case 1: //high scores
        String highScore = board.getHighScoreManager().getHighScore();
        gui.showHighScore(highScore);
        break;
    case 2: //close
        gui.askExitConfirmation();
        break;
    default:
        ;
}
</code></pre>
  
  <p>Instead, make them <code>private static final</code> variables and use. Or better yet make an <code>enum</code> out of them.</p>

<pre><code>public enum EndOfGame {
    CLOSE_1(-1), NEW_GAME(0), HIGH_SCORES(1), CLOSE_2(2);
    private int value;
    private EndOfGame(int value) {
        this.value = value;
    }
    public int getValue() {
        return value;
    }
    public static EndOfGame fromValue(int value) {
        for (EndOfGame endOfGame : EndOfGame.values()) {
            if (endOfGame.getValue() == value)
                return endOfGame;
        }
        return null;
    }
}
</code></pre>
  
  <p>and use it for switch-case as -</p>

<pre><code>switch (EndOfGame.fromValue(box.getChoice())) {
case CLOSE_1:
    break;
case NEW_GAME:
    board.initBoard();
    break;
case HIGH_SCORES:
    String highScore = board.getHighScoreManager().getHighScore();
    gui.showHighScore(highScore);
    break;
case CLOSE_2:
    gui.askExitConfirmation();
    break;
default:
    break;
}
</code></pre>
</blockquote>

<hr>

<ol start="3">
<li><strong>Comments and Indentation</strong></li>
</ol>

<blockquote>
  <p><code>Ctrl + Shitf + F</code> is your friend. Use it often, it will format your code for you.</p>
  
  <p>Don't write code like this with comments describing every variable</p>

<pre><code>public EndOfGameDialogBox(JPanel parentPane) {
    choice = JOptionPane.showOptionDialog(  parentPane, //parent pane
        message,
        title,
        JOptionPane.YES_NO_CANCEL_OPTION, //type of options
        JOptionPane.QUESTION_MESSAGE, //type of message
        null, //icon
        options, //list of buttons
        options[0]); //default focus on first button
}
</code></pre>
  
  <p>Instead, attach <code>javadoc</code> to your project, and you will be able to see the description of all the method arguments.</p>
</blockquote>

<hr>

<ol start="4">
<li><strong>UI code on UI Thread</strong></li>
</ol>

<blockquote>
  <p>Go through the description about running the code on EDT as described <a href="https://codereview.stackexchange.com/a/75349/56383">here</a>.</p>
</blockquote>
    </div>