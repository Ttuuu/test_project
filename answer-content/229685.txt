<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I would limit my review to db.php file only.</p>
<p>First of all, I see you made use of some of my advises already, probably visited some of my articles. Sadly, not all recommendations are followed, but that's OK, we'll review them.</p>
<h3>Connection</h3>
<p>The connection part is simply OK, nothing to review</p>
<h3>Structure</h3>
<p>Regarding the structure, I would say this file is a bit bloated. And contain a code belongs to different, so to say, <em>layers of responsibility</em>.  Such parts  as the connection and a pdo() function have a global responsibility. they could be used in any project and even in any part of every project.</p>
<p>Whereas other functions are quite specific and totally useless in any other project part. Also, the connection credentials are project-specific.</p>
<p>It order to make your design modular and reusable, I would</p>
<ul>
<li>leave in db.php only the connection code and general purpose functions such as pdo()</li>
<li>move the credentials into a separate file and include it in db.php</li>
<li>all specific functions I would move into respective files. Honestly, I don't see a point in having a file consists of a single line that calls a function. Why not to put the function code directly into specific files? At least it will make your code better organized and editing each particular code block would be easier. Honestly, finding a particular function in the current db.php is a challenge.</li>
</ul>
<h3>Global</h3>
<p>is frowned upon. it adds magic. You see a function call but have no idea where does it take the database connection from. It is always good to have all resources used by a function to be explicitly set.</p>
<h3>Error reporting</h3>
<p>Your current approach is simply redundant. In reality, you will never see an error message like "Error creating users table" - PDO will throw an exception and and halt the script execution prior that. So, all such code snippets</p>
<pre><code>if( ! $stmt ){ die("Error creating users table"); }
</code></pre>
<p>are rather useless and need to be removed.</p>
<h3>Inconsistent use of the helper function.</h3>
<p>Somewhere you are using it and somewhere not. It would be a good idea to make it consistent.</p>
<p>Let's rewrite save_doodle() function based on the tree recent recommendations:</p>
<pre><code>function save_doodle($pdo, $user, $pass, $name, $drawing )
{
    $uid = get_uid( $user, $pass );
    $sql = 'INSERT INTO doodles (uid, name, drawing) VALUES (?, ?, ?)');
    pdo($pdo, $sql, [$uid, $name, $drawing]);
}
</code></pre>
<p>Much more clean, isn't it?</p>
<h3>Sanitization</h3>
<p>This is a complex one. There are many things that are get confused in a single word "santitization", so it's better to avoid it at all.</p>
<p>Regarding the process, you need to differentiate two things,</p>
<ul>
<li>data validation</li>
<li>data formatting</li>
</ul>
<p>Sadly, both are misplaced in your sanitize() function.</p>
<p><strong>Data validation</strong> is testing the user input according to some rules and <strong>telling the user back</strong> if some tests failed. Checking email format for example. Just calling "sanitize" on the wrong email will save an empty string in the database which is not what you want. You need to decide, whether you want to validate the user input. If you do, make it vocal: notify a user about a failed validation.</p>
<p>However, for such a simple script you may put it aside for the moment.</p>
<p><strong>Data formatting</strong> is make the data usable in the <strong>certain medium</strong> it is going to be used. Some examples</p>
<ul>
<li>when used inside HTML, the data must be HTML-formatted</li>
<li>when used inside SQL, the data must be SQL-formatted (by using prepared statements)</li>
<li>when used inside JS, the data must be JS-formatted</li>
<li>and so on, you get the idea</li>
</ul>
<p>But <strong>neither is done by the <code>sanitize()</code> function</strong>. So you have to get rid of it and make your data formatting <strong>destination-specific</strong>. In other words you have to format your data right before use and limit such a formatting only to a certain medium. For example, for the DSQL query, all formatting you need is a prepared statement.</p>
<h3>Storing user passwords</h3>
<p>Is a notorious story. Never ever store passwords in plain text but only in the form of a cryptographic hash. There are <a href="https://stackoverflow.com/questions/30279321/how-to-use-password-hash">specific functions</a> for that. In order to help you with the user login part, I've got a ready made <a href="https://phpdelusions.net/pdo_examples/password_hash" rel="nofollow noreferrer">code for the user authorization</a> whose password is properly hashed</p>
<h3>Authorization</h3>
<p>I see you are asking a user to enter the username and the password every time they perform an action. Although you could leave it as is for the time being, consider using a simple authentication. it is as simple as calling <code>session_start()</code> on every request and storing the authenticated user's id in the $_SESSION array element. Then you could get the user id any time from that variable back.</p>
<h3>Separation of concerns</h3>
<p>This is a rather important one. but it can be simplified as a rule of thumb: <strong>no function should output anything on its own</strong> (unless the only purpose of the function is output).</p>
<p>There is a business logic and there is a display logic. They should never interfere. <code>delete_doodle()</code> is a <strong>business logic</strong>. You'd never know how you would call this function and how you would notify a user of its success. Make this function return only a boolean value whereas output should be done elsewhere.</p>
<p>In practice this one rather contradicts with the earlier suggestion to move the code from function to files, so it's just a generalized advise on using functions in general. A function just calculates some result and returns it, while any output is only done in a designated placeor by a designated agent.</p>
    </div>