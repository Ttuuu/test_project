<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Okay, first up, I'm a bit rusty with C++, so I apologize if this isn't formatted correctly.</p>

<p>But, the first thing that leaps out is "Single Responsibility Principle".  Aka - each function should be responsible for one thing and have one reason to change.</p>

<p>Or in short: don't write everything in your Main().</p>

<p>What is your Main() doing, at a high level?  It's:</p>

<ul>
<li>Grabbing inputs for how many people and what bills they have</li>
<li>It's setting up the register (with no bills in it)</li>
<li>It's looping through each person</li>
<li>It's checking how that person impacts the current register</li>
<li>It's outputting the success/failure of the venture.</li>
</ul>

<p>Awesome!  So... what should your main look like in an abstract sense?</p>

<pre><code>main()
{
    int patronCount = GetPatronCount();
    int[] billAmounts = GetBillAmounts();
    int[] register = SetUpRegister();
    for (i = 0; i &lt; patronCount; i++)
    {
        bool wasAbleToMakeChange = MakeChangeForPatron(register, billAmounts[i]);
        if (!wasAbleToMakeChange)
        {
            // code to return out with failure
        }
    }
    // code to return success
}
</code></pre>

<p>So... why would we do this?  Well, because right now, if you need to tweak a line of code in your code?  That could have ramifications all throughout your function.  You can't exactly digest it in small bits, because everything has 'scope' with everything else.  And if you needed to <em>change</em> something, you'd have to consider how that change affects everything else in that function.</p>

<p>This is incredibly important as you grow as a programmer - you're going to be <em>changing</em> code a lot more than you're going to be <em>composing</em> it - and the simpler you can make changing it, the better off you'll be.</p>

<p>Also, it becomes much easier to see what the program does.  Because the function names and variable names document exactly what it's doing at a high level.  It's getting a patron count.  Imagine someone reading your code (and only your code - no explanations)... how quickly would they figure out what it's doing?  Contrast that to my version's main().  So if someone <em>else</em> needs to work with your code (or if <em>you</em> need to work with it, but don't remember it very well) it'll be able to be grok'ed a lot quicker.</p>
    </div>