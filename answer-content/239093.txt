<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Style</h2>

<ul>
<li>Use CamalCase for class names, like <code>class Amplifier</code>.</li>
<li>No need to explicitly extends <code>object</code>.</li>
<li>When encountering unsupported opcode, raise an exception to kill the program immediately instead of printing an error message. It helps you discover bugs earlier. This is known as <a href="https://en.wikipedia.org/wiki/Fail-fast" rel="nofollow noreferrer">"fail fast"</a>.</li>
<li><code>get_signal()</code> should accept an <code>Iterable</code> instead of an <code>Iterator</code>. You can do a lot of magic with <code>Iterable</code>s, like this:</li>
</ul>

<pre><code>def get_signal(permutation_iter):
    # Transform list of integer into list of amplifiers and unpack them.
    a, b, c, d, e = map(amplifier, permutation_iter)
    a.add_input(0)

    a.set_other_amplifier(b)
    b.set_other_amplifier(c)
    c.set_other_amplifier(d)
    d.set_other_amplifier(e)
    e.set_other_amplifier(a)

    a.run_program()

    return e.outputs
</code></pre>

<p>It also makes the <code>iter()</code> call in <code>solve()</code> unnecessary.</p>

<ul>
<li>The main job of <code>solve()</code> is getting the maximum from a list of permutations, using <code>get_signal()</code> as key. Python already has <code>max()</code> function for this, but we need to extract the permutation itself as well. So we can write our own <code>argmax()</code> function to simplify this. Note that the code is a lot cleaner without <code>for</code> loop.</li>
</ul>

<pre><code>def argmax(iterable, key=None):
    arg = max((item for item in iterable), key=key)
    value = key(arg) if key else arg
    return arg, value

def solve(permutation_base):
    permutations = itertools.permutations(permutation_base)
    max_signal_phase_seq, max_signal = argmax(permutations, key=get_signal)
    print(max_signal_phase_seq, "-&gt;", max_signal)
</code></pre>

<h2>Structure</h2>

<ul>
<li>Pull out the intcode computer into its own function or class, which will ease code reuse(You'll need the intcode computer in multiple challenges of AoC later).</li>
<li>Don't "hard wire" parameter modes into opcode. Parse parameter modes independently of actual operations. For example, opcode <code>102</code>, <code>1002</code>, and <code>1102</code> should trigger the same function(multiplication), only passing different parameters.(Spoiler: You'll need to add another parameter mode later)</li>
</ul>
    </div>