<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Portability</strong></p>

<p>To be clear, <code>strtoi()</code> and <code>strtou()</code> that OP's code relies on is not in the standard C library.  OP's code is limited to the requisites.</p>

<p><code>strtol()</code> may be more complex, yet it is portable throughout all compliant C implementations.</p>

<p><strong>Bug - failure to clear <code>errno</code></strong></p>

<p>When <code>strtod()</code> succeeds, it does not change <code>errno</code>, so the tests on <code>errno</code> are testing the prior state.  Add <code>errno = 0;</code> before calling <code>strtod()</code>, <code>strtof()</code>, <code>strtold()</code>.</p>

<pre><code>    errno = 0; // add
    *num    = strtod(str, &amp;endptr);
    if (*endptr != '\0') return  ENOTSUP;
    if (errno == ERANGE) return  ERANGE;
    ...
</code></pre>

<p><strong>Questionable error</strong></p>

<p>With floating point conversions, input like <code>"z"</code>, the functions indicate <code>ENOTSUP</code>.  I'd expect <code>ECANCELED</code></p>

<p>Rather than</p>

<pre><code>    if (*endptr != '\0') return  ENOTSUP;
    if (errno == ERANGE) return  ERANGE;
    if (str == endptr)   return  -ECANCELED;
</code></pre>

<p>Consider </p>

<pre><code>    if (str == endptr)   return  -ECANCELED;
    if (*endptr != '\0') return  ENOTSUP;
    if (errno == ERANGE) return  ERANGE;
</code></pre>

<p><strong>Questionable cases</strong></p>

<p>With <code>"1.0e100000"</code>?  A floating point value with infinity with an <code>ERANGE</code> error?</p>

<p>With <code>"INF"</code>?  A floating point value with infinity with an no error?</p>

<p><strong>Careful about <code>ERANGE</code> on the small side</strong></p>

<p>When the string indicates a small value like <code>1e-100000</code>, this may or may not set <code>errno = ERANGE</code>.</p>

<p>C allows that.  C also allows <code>errno</code> to not be set on <em>underflow</em>.</p>

<p><a href="https://linux.die.net/man/3/strtod" rel="nofollow noreferrer">Linux man</a> has "If the correct value would cause underflow, zero is returned and ERANGE is stored in errno."</p>

<p>It is unclear to me what <code>libbsd</code> or OP wants in this case.</p>

<hr>

<p>There are additional issues anytime the string would convert to a value smaller in magnitude than <code>DBL_MIN</code>.  This lack of crispness in <code>strtod()</code> specification renders <em>string</em> in the converted range of <code>DBL_MIN</code> and <code>DBL_TRUE_MIN</code> troublesome.</p>

<p><strong>String to number design</strong></p>

<p>Most string to number functions tolerate leading spaces.  I find it curious that most such functions do not well tolerate trailing white-space.</p>

<p>IMO, such functions should  - very convenient for reading and converting a <em>line</em> of input like <code>"123\n"</code>.  Perhaps as:</p>

<pre><code>number = strto*(string, &amp;endptr);

if (string == endptr) return fail_no_conversion;
while (isspace((unsigned char) *endptr)) {
  endptr++;
}
// Now test for null character
if (*endptr) return fail_junk_at_the_end;
...
</code></pre>
    </div>