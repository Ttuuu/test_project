<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Headers and namespaces</h1>

<pre><code>#include &lt;cmath&gt;
</code></pre>

<p>Not used - it can be omitted</p>

<pre><code>using namespace std;
</code></pre>

<p>Don't bring in names from big and expanding namespaces such as <code>std</code>.  Instead, import just the names you need, into the smallest reasonable scope, or explicitly qualify them - the name <code>std</code> is so short for a reason!</p>

<h1>Program structure</h1>

<p>You will probably find it helpful to separate the reading of the problem set and the writing of the output from the actual calculation of the number of right-angled triangles.  Putting the computation into its own function will then allow you to test it with known input sets, as a form of unit test.</p>

<h1>Data structure</h1>

<p>Currently, we're using two parallel arrays of <em>x</em> and <em>y</em> coordinates.  It's likely to be easier to follow, and we'll get better locality of reference, if we hold <em>x</em>,<em>y</em> pairs together:</p>

<pre><code>struct Point
{
    int x;
    int y;
}
</code></pre>

<p>(I'll work with <code>int</code> here; I'll leave it as an exercise to select arithmetic types that are portably large enough to represent all values).</p>

<h1>Algorithm</h1>

<p>At present, we seem to be only finding triangles that are oriented parallel to the <em>x</em> and <em>y</em> axes.  This will miss triangles at other angles, such as {(0,0), (1,1), (1,-1)} for example.</p>

<p>A more reliable way to detect triangles is to use Pythagoras' Theorem - a triangle is right-angled if the square of one of the sides is equal to the square of the other two:</p>

<pre><code>#include&lt;iostream&gt;
#include&lt;vector&gt;


struct Point
{
    int x;
    int y;
};

int square_distance(const Point p, const Point q)
{
    const auto dx = p.x - q.x;
    const auto dy = p.y - q.y;
    return dx * dx + dy * dy;
}

bool is_right_triangle(const Point p, const Point q, const Point r)
{
    const auto a = square_distance(p, q);
    const auto b = square_distance(q, r);
    const auto c = square_distance(r, p);
    return a == b + c
        || b == c + a
        || c == a + b;
}

int count_right_triangles(const std::vector&lt;Point&gt;&amp; points)
{
    int count = 0;
    for (auto i = points.begin();  i != points.end();  ++i) {
        for (auto j = points.begin();  j != i;  ++j) {
            for (auto k = points.begin();  k != j;  ++k) {
                count += is_right_triangle(*i, *j, *k);
            }
        }
    }
    return count;
}

int main() {
    int n_points;
    std::cin &gt;&gt; n_points;
    if (!std::cin)
        return 1;

    std::vector&lt;Point&gt; points;
    points.reserve(n_points);

    for (int i = 0; i &lt; n_points; i++) {
        Point p;
        if (std::cin &gt;&gt; p.x &gt;&gt; p.y) {
            points.push_back(p);
        } else {
            return 1;
        }
    }

    std::cout &lt;&lt; count_right_triangles(points);
}
</code></pre>

<h1>Alternative algorithm</h1>

<p>Another approach we could consider is to record the angles of all connecting pairs of points, as a multimap from each angle to the points it contains.  Then inspect the keys for angles separated by 90Â°, and for each of those angles count the points common to both sets, and use those numbers to compute the triangles.  You'll probably want a rational-number class to represent the angles as their tangents (floating-point may introduce rounding errors that could affect the result).</p>
    </div>