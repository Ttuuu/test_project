<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Design considerations</h3>

<p>In the comments you mentioned that you're going to analyze and manipulate this string? If so, that could be a problem, because replacing, inserting and removing text requires moving all subsequent characters to make room or to fill the gap. With this much data, you can expect that to have a major impact on performance. That is why I mentioned data structures like ropes, gap buffers and piece tables: those are often used in text editors to efficiently support these kind of operations.</p>

<p>But I think that would be solving the wrong problem. From what I understand so far, the rest of your code is built around a 2D array of strings - a table, essentially - that can be converted to a variety of formats. Because it's an array, you need to know the number of columns and rows up-front, so you need to parse the input before you can allocate the array, and then parse it again to fill the array. This <code>BigStringBuilder</code> class allows you to read the whole file into memory, so you don't have to read it from disk twice.</p>

<p>Why not use dynamically resizable arrays (<code>List&lt;T&gt;</code>) instead? That would allow you to read the data directly into your final data structure with only a single parsing pass. If that requires a lot of work, then you're probably suffering from a lack of abstraction. Instead of passing a raw <code>string[,]</code> around, wrap it in a class. That allows you to swap the internal 2D array for a more suitable data structure without having to modify all the code that uses this table.</p>

<p>For example, a <code>List&lt;List&lt;string&gt;&gt;</code> as internal data structure lets you add variable-length rows on-the-fly, so you only need a single parsing pass. That also allows you to read the input file in a streaming fashion instead of having to read it fully into memory first.</p>

<p>If modifying existing code that relies in a 2D string array sounds like a lot of work, consider emulating the 'interface' of a 2D array. With a class that provides a <code>string this[int row, int column]</code> indexer and a <code>GetLength(int dimension)</code> method, chances are that you only need to change the type of a bunch of parameters and variables.</p>

<hr>

<h3>Other notes</h3>

<ul>
<li>Putting <code>if</code> and <code>for</code> bodies on the same line makes control flow difficult to follow.</li>
<li><code>fileSave</code> and <code>fileOpen</code> are not very flexible. Letting the caller pass in a <code>Stream</code> or <code>TextReader</code>/<code>TextWriter</code> would make them more reusable. That also gives callers control over things like encoding and buffer size. Additionally, overloads like <code>CopyToStream(Stream toStream, long offset, long count)</code> and <code>CopyFromStream(Stream fromStream, long count)</code> are probably also a good idea.</li>
<li><code>c[(int)(n &gt;&gt; pagedepth)][n &amp; mpagesize]</code> is duplicated several times in the code. Use <code>this[n]</code> instead.</li>
<li>There's very little documentation, especially for infrastructure-level code like this. I don't know about you, but I tend to forget things about code I wrote a while ago, so documentation that explains why something works the way it does, or how something is intended to be used, is quite useful.</li>
<li>I'd recommend using more self-descriptive names, and aiming for consistency with the standard types you're 'emulating':

<ul>
<li><code>this[n]</code> -&gt; <code>this[index]</code></li>
<li><code>substring(x, y)</code> -&gt; <code>Substring(startIndex, length)</code></li>
<li><code>replace(s, pos)</code> -&gt; <code>Overwrite(value, startIndex)</code> (I find <code>replace</code> confusing because it's so different from what <code>string.Replace</code> does)</li>
</ul></li>
<li>Regarding camelCase vs PascalCase, I don't see why it's important to distinguish between standard library code and your own, but to each their own I guess. But why the inconsistency in <code>ToString</code> and <code>Append</code>?</li>
<li>I'd argue that correctness is more important than performance. Leaving out bounds checks should be a last resort, and only when profiling shows that they're actually a bottleneck. Chances are that it's possible to improve the API so you don't need to access individual characters so often.</li>
<li>I agree with Peter that <code>fileOpen</code> clearing the string-builder is unexpected behavior, in a negative way.
Certainly the caller can call <code>clear</code> before <code>fileOpen</code> if that's the behavior they want? Otherwise, I would clearly document this.</li>
<li><code>length</code> being a method is inconsistent with <code>StringBuilder</code> and other collection types. A little bit of calculation in a property should be fine.</li>
<li>If you're using <code>returnPagesForTestingPurposes</code> for automated testing then you're testing implementation details, which is a bad idea. If you're using it for debugging, then why not inspect the data with a debugger instead, or use tracepoints?</li>
</ul>
    </div>