<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your solution stores the base-2 representation of the given number in 
an array, and then uses two nested loops to determine the period.</p>

<p>This can be done more efficiently by taking advantage of <em>bitwise
operations.</em> </p>

<p>Let's take \$ n = 955_{10} = 1110111011_{2} \$ as an example.
To determine the period, we shift \$ n \$ to the right until
all “significant” bits of the shifted number coincide with the 
corresponding bits of  \$ n \$. In our example, this happens after
shifting by 4 positions:</p>

<pre><code>1110111011  (n)
 111011101  (n &gt;&gt; 1)
  11101110  (n &gt;&gt; 2)
   1110111  (n &gt;&gt; 3)
    111011  (n &gt;&gt; 4)
</code></pre>

<p>This condition can be checked with a <em>single expression</em></p>

<pre><code>((n ^ (n &gt;&gt; p)) &amp; mask) == 0 
</code></pre>

<p>using bitwise XOR, AND, and a suitable <code>mask</code> consisting of 1's at all significant bit positions of <code>n &gt;&gt; p</code>. </p>

<p>This makes the array obsolete, and only a simple loop is needed instead of
a nested loop. An implementation could look like this:</p>

<pre><code>int solution(int n) {

    // Compute the length of the binary number.
    int len = 0;
    for (int i = n; i &gt; 0; i &gt;&gt;= 1) {
        len++;
    }

    int shifted = n; // `n` shifted by `period` bit positions to the right
    int mask = (1 &lt;&lt; len) - 1; // Corresponding bit mask

    for (int period = 1; period &lt;= len/2; period++) {
        shifted &gt;&gt;= 1;
        mask &gt;&gt;= 1;
        if (((n ^ shifted) &amp; mask) == 0) {
            return period;
        }
    }
    return -1;
}
</code></pre>
    </div>