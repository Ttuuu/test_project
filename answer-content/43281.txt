<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The key difference between the two approaches is essentially these lines,
counting the words in <code>text</code>:</p>

<pre><code>text ? text.match(/\b\S+\b/g).length : "0"
// ... versus ...
text.split(/\b\S+\b/).length - 1
</code></pre>

<p>First of all, the first expression will crash for a non-empty text without words, for example <code>:!@#$</code>. Because a non-empty text is "true", but the <code>.match</code> will return null, so you'll get a null pointer exception in <code>.length</code>.</p>

<p>Secondly, I suggest a simpler and more intuitive regular expression to match words:</p>

<pre><code>/\w+/g
</code></pre>

<p>That is, match a non-empty sequence of <em>word characters</em>.</p>

<p>You could use this as <code>text.match(/\w+/g)</code> (notice the "g" flag) or as <code>text.split(/\w+/)</code>. When using <code>match</code>, you need to check if the result is <code>null</code> or not, as you already did.</p>

<p>As for which way is better, using <code>match</code> or <code>split</code>,
I would argue for <code>match</code>:</p>

<ul>
<li>It's more intuitive: it matches the character sequences you're interested in, and then count the occurrences.</li>
<li>It's probably more efficient: splitting implies creating an array of the results, but if you only need the size of the array (the count of elements), then it sounds like a waste.</li>
</ul>
    </div>