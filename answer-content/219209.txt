<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As a pre-note, I had to translate everything to camelCase and PascalCase because I was having a very difficult time reading your code. No judgments, just understand I was running short on time and didn't translate it back on the conclusion.</p>

<p><strong>Readability</strong></p>

<p>Use meaningful names.</p>

<ul>
<li><code>fids</code> I changed to <code>integers</code> as from your description I gather it's the list of integers used to create the ranges.</li>
<li><code>fids_index</code> seems very noisy. Standard convention is <code>i</code>, <code>j</code>, etc. When you reduce the iterator variable down to a single character it's much easier to focus on what actually matters.</li>
<li>Booleans should be prefixed with <code>Is</code> or <code>Has</code> or <code>Was</code> etc. So in this case <code>IsFirst</code> and <code>IsLast</code> instead of <code>first</code> and <code>last</code> makes it easier to read as english. You could even consider using <code>var isNotFirst = i != 0;</code> as you only use <code>!first</code> in the algorithm.</li>
<li>Last vs Previous. <code>is_conseq_with_last</code> is refering to previous, so I switched it to previous to avoid confusion with <code>last</code>.</li>
<li><code>start_index</code> and <code>end_index</code> sound like they would be <code>0</code> and <code>integers.Count</code>. They're the start and end of the range you're tracking, let's name them accordingly: <code>rangeStart</code> and <code>rangeEnd</code>.</li>
</ul>

<p><strong>If-Statement Ordering &amp; Flow</strong></p>

<p>We've all been there, written an algorithm, tested it, and it works, all done right? Well, sometimes that algorithm can be restructured to express what we're actually doing much clearer.</p>

<pre><code>    if (!first &amp;&amp; fids[fids_index - 1] == fids[fids_index] - 1)
    {
        is_conseq_with_last = true;
    }
    else if (!first)
    {
        is_conseq_with_last = false;
    }
</code></pre>

<p>There's a common denominator here, <code>!first</code> let's work with that, clearly neither of these happen if it's true.</p>

<pre><code>if (!first)
{
    if (fids[fids_index - 1] == fids[fids_index] - 1)
    {
        is_conseq_with_last = true;
    }
    else
    {
     is_conseq_with_last = false;
    }
}
</code></pre>

<p>Well, now it's obvious that inner if-statement can be reduced.</p>

<pre><code>if (!first)
{
    is_conseq_with_last = fids[fids_index - 1] == fids[fids_index] - 1;
}
</code></pre>

<p>And if you wanted, a ternary operator.</p>

<pre><code>is_conseq_with_last = !first &amp;&amp; fids[fids_index - 1] == fids[fids_index] - 1;
</code></pre>

<p>And it's now also obvious that you're setting the variable with each iteration, so there's no need to declare it outside the loop.</p>

<p>Similar can be done with the bottom if-statement. Here's what I ended up with altogether.</p>

<p><strong>My Version</strong></p>

<p>I am running short on time so there might be a mistake or two and it's still in my coding style so don't take it for face value and try to apply the concepts I'm showing above yourself.</p>

<pre><code>public static List&lt;(int from, int to)&gt; GetConsecutiveRanges(List&lt;int&gt; integers)
{
    if (integers == null || integers.Count == 0) { return null; }

    integers = integers.OrderBy(a =&gt; a).Distinct().ToList();
    var ranges = new List&lt;(int from, int to)&gt;();

    var rangeStart = 0;
    var rangeEnd = 0;

    for (var i = 0; i &lt; integers.Count; i++)
    {
        var isFirst = i == 0;
        var isLast = i == integers.Count - 1;
        var isConsecutiveFromPrevious = isFirst == false &amp;&amp; integers[i-1] == integers[i] - 1;

        if (last)
        {
            if (isConsecutiveFromPrevious == false)
            {
                rangeEnd = isFirst == false ? i - 1 : rangeEnd;
                ranges.Add((integers[rangeStart], integers[rangeEnd]));
                rangeStart = i;
            }

            rangeEnd = i;
            ranges.Add((integers[rangeStart], integers[rangeEnd]));
        }
        else if (isConsecutiveFromPrevious == false &amp;&amp; isFirst == false)
        {
            rangeEnd = isFirst == false &amp;&amp; isLast == false ? i - 1 : i;
            ranges.Add((integers[rangeStart], integers[rangeEnd]));
            rangeStart = i;
        }

    }

    ranges.ForEach(a =&gt; Console.WriteLine($"(x &gt;= {a.@from} &amp;&amp; x &lt;= {a.to})"));

    return ranges;
}
</code></pre>
    </div>