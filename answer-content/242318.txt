<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I cannot yet comment due to my reputation, so I'll write this as an answer to your comment on Andrew's answer, and delete if someone comments this information or Andrew updates his answer.</p>

<p>Saying that numpy's random is not a good random number generator does not seem right to me.
From <a href="https://numpy.org/devdocs/reference/random/index.html" rel="nofollow noreferrer">numpy's reference</a> : </p>

<blockquote>
  <p>By default, Generator uses bits provided by PCG64 which has better statistical properties than the legacy MT19937 used in RandomState.</p>
</blockquote>

<p>So to me it seems that :</p>

<ol>
<li>numpy uses the PCG64 random generator which, according to numpy, has better statistical properties than <em>legacy</em> MT19937</li>
<li>numpy used to use MT19937</li>
<li>you can still chose to use the MT19937 random number generator </li>
</ol>

<pre class="lang-py prettyprint-override"><code>from numpy.random import Generator, MT19937
rg = Generator(MT19937(12345))
rg.random()
</code></pre>

<p>Maybe there is something I'm missing, and maybe it is in this part of your comment </p>

<blockquote>
  <p>It produces 53-bit precision floats and has a period of 2**19937-1</p>
</blockquote>

<p>If so, I'd be interested to know how numpy's random would still be flawed for a Monte-Carlo analysis.</p>
    </div>