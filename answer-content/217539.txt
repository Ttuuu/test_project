<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Let's ignore efficiency. It took me five minutes to figure out what you were trying to do. In the kindest way possible, this is a mess. But let's fix that!</p>

<p>Your variable names are terrible. I have no idea what an <code>ass</code> is. What about an <code>asss</code>? Surely that's a bad idea, because it's very easy to mistake one for the other. Even if it wasn't, what are they? A variable name should describe what it holds. A bunch of random characters aren't helpful. Same goes for <code>gpu_ouy</code>. Is that a typo? What are <code>gpu_a</code> and <code>gpu_b</code>? What is <code>aq</code>? What is <code>c</code>?  What is <code>saa</code>? None of these variables names help someone reading your code understand their function.</p>

<p>Don't use <code>len</code> in a <code>for</code> loop. The idiomatic python approach is to just iterate over the collection (and let it deal with lengths and indices). So instead of:</p>

<pre class="lang-py prettyprint-override"><code>for x in range(len(c.Win32_VideoController())):
    ass = str(c.Win32_VideoController()[x])
</code></pre>

<p>Use this:</p>

<pre class="lang-py prettyprint-override"><code>for controller in c.Win32_VideoController():
   # do something with controller...
   pass
</code></pre>

<p>Some random points before we get to the big issue:</p>

<ul>
<li>In <code>sqa =int(((int(str(saa[1]).replace(";",""))/1024)/1024)/1000)</code>, use <code>//</code> instead of calling <code>int</code> so much. This does floor division. So <code>int(int(x / 1024) / 1024)</code> is the same as <code>x // 1024 // 1024</code>. But then you could just merge them: <code>x // (1024 * 1024)</code>. But what are those numbers? I suspect you're converting from bytes to GB (expect 1000 MB = 1 GB isn't correct unless you're dealing with harddrives, which sometimes define the measurements like so). So instead use a constant: <code>BYTES_PER_GB = 1024 * 1024 * 1000</code>. Then do: <code>int(vram_size_bytes) // BYTES_PER_GB</code>.</li>
<li>As @IsmaelMiguel points out, not all cards support more than 1GB of RAM. This math will report 0 for them, which you may not want. One solution is to not use floored division (<code>int(vram_size_bytes) / BTYES_PER_GB</code>). When printing using the format specifier <code>.02f</code> so you don't get numbers with tons of decimal places (ex. <code>"Video RAM: {:.02f}".format(vram_size_bytes / BYTES_PER_GB)</code>).</li>
<li>Fix your spacing and formatting. <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP8</a> your code!</li>
<li>What is <code>saa[1]</code> above? You have some many magic indices that no one can discern without understanding the value of <code>str(controller)</code>. Prefer giving things descriptive names (use variables, heck overuse variables to make things clear) to magic indices.</li>
<li><code>remove</code> can fail (it <code>raise</code>s a <code>ValueError</code> if the element isn't found in the list).</li>
<li>You don't need to initialize <code>gpu_a</code> and <code>gpu_b</code> (ex. <code>gpu_a = ""</code> is unnecessary), because later you assign stuff to them. They will be initialized on first assignment.</li>
<li>Given code this fragile, you definitely want to include tests. I'd imagine some integration tests would help. You can amass a list of outputs of <code>str(c.Win32_VideoController()[0])</code>s and manually do this string parsing. Then assert in some tests that your code outputs the thing that you expect for each. <a href="https://docs.python.org/3/library/unittest.html#module-unittest" rel="nofollow noreferrer"><code>unittest</code></a> will help you with this.</li>
</ul>

<p>But now the largest issue: you're doing a ton of extra work that you almost certainly don't have to do! I can't seem to find good docs for <code>wmi</code>'s wrapping around this, but according to the <a href="https://docs.microsoft.com/en-us/windows/desktop/CIMWin32Prov/win32-videocontroller" rel="nofollow noreferrer">microsoft docs</a>, this probably returns an object of some type. That means instead of all of this convoluted and fragile string parsing you're attempting, you can probably get at the information you want by just doing <code>controller.AdapterRAM // BYTES_PER_GB</code> or <code>controller.Description</code> (where <code>controller</code> comes from <code>for controller in wmi.WMI().Win32_VideoController()</code>). Open up a Python REPL by running <code>python3</code> and then run the following:</p>

<pre><code>&gt;&gt;&gt; import wmi
&gt;&gt;&gt; controller = wmi.WMI().Win32_VideoController()[0]
&gt;&gt;&gt; help(controller)
&gt;&gt;&gt; dir(controller)
</code></pre>

<p>That should give you an idea of all of the information you can get from it. You don't need to be doing all that string parsing! The information is already available on properties of the object!</p>
    </div>