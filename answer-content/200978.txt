<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Efficiency</h2>

<p>Your algorithm is actually quite simple and efficient.  Keeping track of the scheduled finish times for each packet in the buffer (using <code>ts_te</code>) is a great idea.  The main problem is your poor choice of data structure for <code>ts_te</code>.</p>

<p>Actually, even though <code>ts_te</code> stores the scheduled start and end times for each buffered packet, you never care about the start times.  So, you can just store the end times.  (Incidentally, if you had to store a pair of immutable elements, you should use a tuple rather than a list.  A list implies that the length may vary or that the contents may change.)</p>

<p>You have a performance problem in <code>ts_te.pop(0)</code>.  Removing the first item in a list requires all the subsequent elements to be copied over to fill in the hole.  What you want is a data structure that lets you efficiently remove items from the head and append items at the tail.  Such a structure is called a <strong>deque</strong> (a double-ended queue), and <a href="https://docs.python.org/3/library/collections.html#collections.deque" rel="nofollow noreferrer">it's in Python's standard library</a>:</p>

<blockquote>
  <p>Deques are a generalization of stacks and queues (the name is pronounced “deck” and is short for “double-ended queue”). Deques support thread-safe, memory efficient appends and pops from either side of the deque with approximately the same O(1) performance in either direction.</p>
  
  <p>Though <a href="https://docs.python.org/3/library/stdtypes.html#list" rel="nofollow noreferrer"><code>list</code></a> objects support similar operations, they are optimized for fast fixed-length operations and incur O(n) memory movement costs for <code>pop(0)</code> and <code>insert(0, v)</code> operations which change both the size and position of the underlying data representation.</p>
</blockquote>

<p>Futhermore, if you specify a <code>maxlen</code> when creating the <code>collections.deque</code>, then it acts as a <a href="https://en.wikipedia.org/wiki/Circular_buffer" rel="nofollow noreferrer">ring buffer</a>, which is often how fixed-size buffers are implemented in real-life systems.</p>

<p>On a related note, I recommend creating <code>results</code> to be the same size as <code>packets</code>, since you know exactly how long it is supposed to be.  That would be more efficient than repeatedly calling <code>.append()</code> and letting Python resize the list as necessary.  (Each resizing operation can be expensive, possibly involving the copying of the entire existing contents.)  Alternatively, if you don't need the results to be a list, simply <code>yield</code> the results instead of building a list.</p>

<h2>Style</h2>

<p>Follow <a href="https://www.python.org/dev/peps/pep-0008/#naming-conventions" rel="nofollow noreferrer">PEP 8 naming conventions</a>.  <code>buffSize</code> and <code>startTime</code> don't comply.</p>

<p>Avoid introducing special cases.  I don't think that <code>buffSize == 0</code> should result in an empty list; rather, the results should all be -1, since every packet would have to be dropped.  Furthermore, your algorithm should be designed so that it does not rely on the buffer always being non-empty.</p>

<p>To avoid writing this:</p>

<blockquote>
<pre><code>for packet in packets:
    packetArr = packet[0]
    packetDur = packet[1]
</code></pre>
</blockquote>

<p>… use destructuring assignments:</p>

<pre><code>for packetArr, packetDur in packets:
</code></pre>

<p>As a rule, it's more elegant to write <code>if <i>failure_condition</i>:</code> (e.g detecting a dropped packet) rather than <code>if <i>success_condition</i>:</code>.  Usually, failure cases have short code to handle them, and there may be multiple failure cases to handle.</p>

<h2>Suggested solution</h2>

<pre><code>from collections import deque

def process_packets(packets, bufsize):
    # Stores the scheduled finish times for packets
    buffer = deque(maxlen=bufsize)

    start_times = [None] * len(packets)
    for i, (arrival, duration) in enumerate(packets):
        # Remove packets from the buffer that have been processed by the
        # arrival time.
        while buffer and buffer[0] &lt;= arrival:
            buffer.popleft()

        if len(buffer) &gt;= bufsize:
            # Buffer overrun
            start_times[i] = -1
        else:
            # This packet will start being processed after the finish time of
            # the last buffered packet (if there is anything in the buffer).
            start_times[i] = max(arrival, buffer[-1] if buffer else 0)

            # Store the scheduled finish time for this packet.
            buffer.append(start_times[i] + duration)
    return start_times
</code></pre>
    </div>