<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Sorry to hear that; at a first glance the code looks okay, naming and splitting into functionality looks good, as well as the use of appropriate libraries, but there's a
number of things that could be improved too.</p>

<p>For starters, on the GitHub <code>README.md</code> you're listing a couple of
libraries that have to be installed - so it would be easy enough to add
a <code>requirements.txt</code> for <code>pip</code> to install them (or an equivalent setup
via <code>virtualenv</code> etc.).  As an interviewer the smoother the whole thing
goes, from downloading to seeing the expected result, the better!
Consider next time how someone else runs your project, make it as easy
as possible for them, while not going overboard (like, unless you're
going to provide a Docker image for them (which is obviously an option
...) for a Python project: Requiring them to have Python 3.X installed
is okay, same for <code>pip</code>, but the specific libraries not; give them a
<code>Makefile</code> perhaps such that <code>make dependencies</code> runs
<code>pip install -r requirements.txt</code> or so).</p>

<p>Next, the <code>README.md</code> says <code>Run a main.py file...</code>, but instead you're
using <code>__main__.py</code>, so the documentation should be updated; like I'd
rather have it say "Run <code>PYTHONPATH=. python3 -m pyapi</code>." since I might
not be familiar with all variants of how Python programs can be invoked
(e.g. I had to play with a few different variants till I figured out <a href="https://stackoverflow.com/questions/4042905/what-is-main-py">how
to run it</a> ... an interviewer likely has less patience and time than me.)</p>

<hr>

<p>Okay, so I run <code>pyapi</code>, then curl the examples from the description page
(not yours mind you, it'd be a good idea to have it all on your
repository too so it doesn't depend on someone else's files!), the first
example fails, the second one looks okayish:</p>

<pre><code>0 ~ % curl "http://localhost:5000/currency_converter?amount=0.9&amp;input_currency=¥&amp;output_currency=AUD"
Currency not recognized%
0 ~ % curl "http://localhost:5000/currency_converter?amount=10.92&amp;input_currency=£"
{
    "input": {
        "amount": 10.92,
        "currency": "\u00c2\u00a3"
    },
    "output": {
        "ALL": null
    }
}%
</code></pre>

<p>Though, well, the output is empty.  Can't really tell why except it
looks like I'm inputting the wrong currencies?  Using <code>EUR</code> actually
works and gives me output:</p>

<pre><code>0 ~ % curl "http://localhost:5000/currency_converter?amount=10.92&amp;input_currency=EUR"
{
    "input": {
        "amount": 10.92,
        "currency": "EUR"
    },
    "output": {
        "ALL": 1380.78
    }
}%
</code></pre>

<p>Now CLI, much better, first example works out of the box, second and
third don't, same problem, the currency unit isn't converted somehow.
Though if I do it myself it works (<code>JPY</code>/<code>GBP</code>).  Ah, right, there's
some where the currency unit isn't unique, that's fine I guess.</p>

<p>However, if the output currency isn't specified I read the problem
statement such that it should then return the conversion to <em>all other</em>
currencies ("if <code>output_currency</code> param is missing, convert to all known
currencies"), but that's not what's happening:</p>

<pre><code>0 kiwi-currencies % PYTHONPATH=. python3 -m pycli --amount 10.92 --input_currency EUR
INFO: FUNC: create_currencies_dict
INFO: FUNC: sign_to_abbreviation parameters: curr:EUR
INFO: FUNC: sign_to_abbreviation parameters: curr:None
INFO: FUNC: create_json parameters: inp:EUR out:None am=10.92
INFO: FUNC: convert parameters: inp:EUR out:ALL am=10.92
INFO: FUNC: contact_api parameters: inp:EUR out:ALL
INFO: FUNC: contact_api Loading from CACHE: True
INFO: FUNC: convert rate: {'EUR_ALL': 126.445488}
{
    "input": {
        "amount": 10.92,
        "currency": "EUR"
    },
    "output": {
        "ALL": 1380.78
    }
}
</code></pre>

<p>What does <code>ALL</code> mean, "Albanian Leak"?  </p>

<hr>

<p>Now to the actual code, both of the <code>__main__.py</code> look mostly okay to
me, but, this isn't production quality code:  There are no error checks
or fallbacks.  If an expected argument is missing e.g. the HTTP API
crashes (the CLI is better since the command line argument parser checks
for it).</p>

<p><code>test.py</code> looks pretty good!  Though I'd suggest <a href="https://stackoverflow.com/questions/5142418/what-is-the-use-of-assert-in-python">not to use <code>assert</code></a> like this.  It could trivially be disabled when optimisations are turned
on:</p>

<pre><code>0 kiwi-currencies % python3 test.py
INFO: FUNC: create_currencies_dict
INFO: TEST: test_contact_api &lt;MagicMock name='contact_api' id='140590866107192'&gt;
INFO: TEST: simple_contact_api
.INFO: TEST: test_sign_to_abbreviation
INFO: FUNC: sign_to_abbreviation parameters: curr:€
INFO: FUNC: sign_to_abbreviation parameters: curr:£
.INFO: TEST: test_unknown_input
INFO: FUNC: convert parameters: inp:USD out:EgUR am=45.2
test.py:54: DeprecationWarning: Please use assertEqual instead.
  "Currency not recognized")
.
----------------------------------------------------------------------
Ran 3 tests in 0.007s

OK

0 kiwi-currencies % python3 -O test.py
INFO: FUNC: create_currencies_dict
INFO: TEST: test_contact_api &lt;MagicMock name='contact_api' id='139676823006232'&gt;
.INFO: TEST: test_sign_to_abbreviation
.INFO: TEST: test_unknown_input
INFO: FUNC: convert parameters: inp:USD out:EgUR am=45.2
test.py:54: DeprecationWarning: Please use assertEqual instead.
  "Currency not recognized")
.
----------------------------------------------------------------------
Ran 3 tests in 0.018s

OK
</code></pre>

<p>Notice how the second run doesn't exercise some of the tests!</p>

<hr>

<p>Now for <code>service.py</code>.</p>

<ul>
<li>You have comments, good, though I also imagine having some of those as
docstrings (<code>contact_api</code>) might be nicer.</li>
<li>Logging is on, great, that's helpful once you've read the code.</li>
<li><code>sign_to_abbreviation</code>, the <code>for</code> loop should be a dictionary lookup?
Also the assignment to <code>curr</code> can be removed and directly <code>return</code>ed.</li>
<li><code>create_json</code>, <code>dict = {}</code> is overwritten immediately after.  Same
with <code>dict["output"] = {}</code>.  Also <code>not x == y</code> should be <code>x != y</code>.</li>
<li><code>create_currencies_dict</code>, it might make sense to check for the inverse
and return early to keep the indendation shorter, e.g.
<code>if currencies_symbols: return</code> and
<code>if response.status_code != 200: return None</code>.  <code>else: pass</code> at the
end of the loop can also be omitted.</li>
<li><code>return None</code> can also be omitted in general, or even just <code>return</code>.
If you want to be explicit that's fine though.</li>
</ul>

<hr>

<p>So overall there are priorities: make it work, show the user how (not
just by test cases, by writing down the exact invocation for them to
use), then make it nicer.  You're on the right way though!</p>
    </div>