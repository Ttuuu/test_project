<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I guess you'll find a lot of redundancy in the code since its been held by the controllers. </p>

<p>Your idea of making a service is a good idea, you may need to add different services, but at the end you'll have services that can be reused, avoiding code redundancy. This would help ease things more and more. So, continue in this approach. Interface or abstract, that depends on your implementation. Go with what you see best fits your needs. You can also define both if needed. And yes, defining them under a new namespace, would be better. </p>

<p>Do you need to do all that ? it depends. If the application will be continued and there is no new migrations. Then, I don't think it needs that, you might make changes whenever needed (like do one controller on each time you're requested to make changes on any of them). little by little, you'll have a full updated project. </p>

<p>However, if there is another migration process, then you need to reconsider your choices, see what needs your efforts and what's not. </p>

<p>For the magic strings, use <code>Enum</code>. </p>

<p>I forgot the first issue, for which language you should favor over the other, mostly English is your choice, but from a back experience, If there is some work guidelines for developers, then it should be mentioned in that guidelines, if not, then see what is the official communication language in your work (emails ..etc) and enforce it in the code as well. You can do your comments in both languages (each comment would hold English and translation to  German). I usually use English even if the application comments are written in a different language, because : </p>

<ol>
<li>English is an official language in most companies in my country. </li>
<li>I'm coding in English, why should I write comments in different language ? it would be an awkward code style ;).</li>
<li>It's a good way to practice your language and keep it rolling, specially if you're in a place where it's rarely used. </li>
</ol>
    </div>