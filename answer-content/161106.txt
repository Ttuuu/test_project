<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>I have 10 teams to match up. Each team will play 9 matches in a fixture such that all teams play with a separate competition at every round.</p>
</blockquote>

<p>Let's build a schedule for 10 teams. I intuitively came up with the following <a href="https://en.wikipedia.org/wiki/Circulant_matrix" rel="nofollow noreferrer">circulant 10x10 matrix</a> <code>A</code> with entry <code>A[i, j]</code> denoting the opponent of team <code>i</code> in round <code>j</code>:</p>

<p><a href="https://i.stack.imgur.com/oymhq.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/oymhq.png" alt="enter image description here"></a></p>

<p>Each row represents the schedule for a single team. We note that for each round <code>j</code> teams are partitioned into pairs playing against each other - i.e. <code>A[A[i, j], j] = i</code>.</p>

<p>However, there is a flaw: According to above schedule, there is a round <code>j</code> for each team where it has to play against itself (the red squares) - i.e. <code>A[i, j] = i</code>.</p>

<p>That's because a correct schedule for 10 teams can only have 9 rounds, not 10. To fix this, we first slice the main diagonal of <code>A</code> - all matches against team <code>9</code> - and end up with:</p>

<p><a href="https://i.stack.imgur.com/tI5Sf.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/tI5Sf.png" alt="enter image description here"></a></p>

<p>Now, we re-introduce the matches against team <code>9</code> wherever a team would have to play against itself (the red squares). We also have to fix the opponents of team <code>9</code> to reflect these changes. This practically means that for each round <code>j</code> we swap <code>A[9, j]</code> with <code>A[i, j]</code> where <code>i</code> denotes the self-matched team (the red square):</p>

<p><a href="https://i.stack.imgur.com/OBmCM.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/OBmCM.png" alt="enter image description here"></a></p>

<p>This is the resulting correct schedule with all swapped matches highlighted in red. This schedule is identical to the one you compute and pretty simple to generate:</p>

<ol>
<li>Create a circulant 10 x 9 matrix where each row is a circular shift of <code>[0,1,2,3,4,5,6,7,8]</code>.</li>
<li>For each round or column, replace the self-match with a match against team <code>9</code> and let team <code>9</code> play against the self-matched team.</li>
</ol>

<p>While there are exactly 945 different ways to partition 10 teams into pairs and thus many more ways to generate a correct schedule, I could not come up with a simpler or more intuitive schedule.</p>

<blockquote>
  <p>While it works fine i would like to know if my calculations could be
  simplified any further.</p>
</blockquote>

<p>I think that by closely following the above recipe, you can avoid the more obscure arithmetic and come up with a simpler and more intuitive 'generative' algorithm. The scheduling is encapsulated in the <code>round(n, j)</code> function:</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>// Schedule single round `j` for 'n' teams:
function round(n, j) {
  let m = n - 1;
  let round = Array.from({length: n}, (_, i) =&gt; (m + j - i) % m); // circular shift
  round[round[m] = j * (n &gt;&gt; 1) % m] = m; // swapping self-match
  return round;
}

// Schedule matches of 'n' teams:
function fixture(n) {
  let rounds = Array.from({length: n - 1}, (_, j) =&gt; round(n, j));
  return Array.from({length: n}, (_, i) =&gt; ({
    id: "Team_" + i,
    matches: rounds.map(round =&gt; "Team_" + round[i])
  }));
}

// Example:
console.log(fixture(10));</code></pre>
</div>
</div>

    </div>