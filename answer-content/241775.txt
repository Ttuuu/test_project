<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Exception handling</strong>: you handle some exceptions but you print them to the console, where they can get lost/unnoticed. It would be better to use the <code>logger</code> module to record them to a file. What I like to do when writing classes is to attach to the logger routine of the <strong>main module</strong>. This way, all messages go to the console AND get written to the same log file<br>
The code would be along these lines:</p>

<pre><code>import logging

def __init__(self, file, logger=None):
    self.dbfile = file

    # acquire existing logger - https://fangpenlin.com/posts/2012/08/26/good-logging-practice-in-python/
    self.logger = logger or logging.getLogger(__name__)
    self.logger.debug('Running __init__')
</code></pre>

<p>See the section 'Use <strong>name</strong> as the logger name' in the link above.</p>

<hr>

<p>Redundant code:</p>

<pre><code>assert os.path.exists(self.dbfile)
assert os.path.isfile(self.dbfile)
</code></pre>

<p><code>isfile</code> is sufficient. </p>

<blockquote>
  <p><code>os.path.isfile(path)</code></p>
  
  <p>Return True if path is an existing regular file. This follows symbolic links, so both islink() and isfile() can be true for the same
  path.</p>
</blockquote>

<p>Source: <a href="https://docs.python.org/3/library/os.path.html#os.path.isfile" rel="nofollow noreferrer">os.path.isfile(path)</a></p>

<p>But your code will fail if the DB file does not exist. By default SQLite <code>connect</code> will create the file if it doesn't already exist. So I think you should preferably make that check <em>after</em> the call to <code>connect</code> to determine that the file is indeed present.</p>

<hr>

<p>Return codes: your procedures return either 0 or -1, I wonder why you made that arbitrary choice. You could simply return a <strong>boolean</strong> value, also in your <code>except</code> blocks if you want, so that there is a return value on all paths.</p>

<p>Your <code>read</code> procedure returns a tuple (note that <code>fetchall</code> <a href="https://docs.python.org/2/library/sqlite3.html#sqlite3.Cursor.fetchall" rel="nofollow noreferrer">returns a list</a>):</p>

<pre><code>return 0, rows;
</code></pre>

<p>Personally I would only return the rows, but in case of error I would return <strong>None</strong> instead, so I know that the operation failed. If you don't look at the error code, the (empty) returned list is still iterable.<br>
The return code doesn't matter here because it doesn't give any additional information. If I need details, I will look at the error log. </p>

<hr>

<p>I would make the call to <code>close</code> <strong>optional</strong> (it's going to be forgotten sometimes anyway). Simply register a cleanup routine for your class:</p>

<pre><code>import atexit

def __init__(self, iface, logger=None):
    ...
    # run cleanup routine when class terminates
    atexit.register(self.cleanup)

def cleanup(self):
    """To perform cleanup tasks when class instance is shutting down
    """
    self.logger.debug('Closing DB')
    if hasattr(self, '_dbconn'):
        self._dbconn.close()
</code></pre>

<p>And in fact the <code>open</code> method is not required either:</p>

<pre><code>res = db.open()
</code></pre>

<p>Just move the code to the <code>__init__</code> function. No need to do open &amp; close.</p>

<hr>

<p>Your write routine only allows certain operations:</p>

<pre><code>assert any(map(lambda s: query.upper().strip().startswith(s), ('CREATE TABLE', 'ALTER TABLE', 'INSERT', 'UPDATE', 'DELETE')))
</code></pre>

<p>Therefore no <strong>PRAGMA</strong>s allowed but this is your choice.</p>

<p>One possible enhancement would be to take an existing connection as a class argument, in case you want to do something special on an open DB (like a PRAGMA), that your class does not easily allow. Although I can imagine this code is sufficient for your needs.</p>
    </div>