<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This can actually be solved with a super efficient 1 line of code, but the explanation is long :)<br>
(and there are a few other things I should point out first)</p>

<hr>

<p>Your code will fail with any input bigger than <span class="math-container">\$2^{62}\$</span> because you never overshoot this number by multiplying by 2 a power of 2 (in your code: <code>current</code>). This is because a signed <code>long</code> has only enough bits to represent powers of 2 up to <span class="math-container">\$2^{62}\$</span> (you could have used it as an unsigned variable to have one extra bit, but it still wouldn't be enough to avoid this problem with the biggest numbers that the challenge says are expected input), multiplying it by 2 will cause the left most bit to become 1, which turns it into a big negative number, and multiplying it by 2 again will make it 0 which will then stay 0 no matter how much you multiply it, so your code will enter an infinite loop.</p>

<hr>

<p>Once you detect that a number is a power of 2 you shouldn't reset <code>previous</code> and <code>current</code> to 2 because a power of 2 divided by 2 is still a power of 2, so you know you can divide <code>current</code> by 2 together with <code>n</code>.</p>

<hr>

<p>A thing you could use to your advantage is the way powers of 2 look in binary code:</p>

<pre><code>power | number | binary | even/odd power
2^0   = 1      = 00001  | even
2^1   = 2      = 00010  | odd
2^2   = 4      = 00100  | even
2^3   = 8      = 01000  | odd
2^4   = 16     = 10000  | even
</code></pre>

<p>Notice how all bits are 0 except one, the position of this 1 bit tells you if you need an odd or even number of divisions (turns in the game) to reach 1.</p>

<pre><code>long filter = 0b101010101010101010101010101010101010101010101010101010101010101L;
boolean oddPower = (n &amp; filter) == 0;
</code></pre>

<p>As soon as you reach a power of 2, this check is enough to tell you who's gonna win. An odd number of turns left means that the player whose turn it is now will win, otherwise the other player will win.</p>

<hr>

<p>We can go further with looking at the bits and bypass the need to find the next lower power of 2 to divide <code>n</code> by it if <code>n</code> is not a power of 2. As you already know, any power of 2 is represented by a single 1 bit and lots of 0 bits. Now let's take a look at a few numbers represented in binary code:</p>

<pre><code>3 = 0011
4 = 0100
5 = 0101
6 = 0110
7 = 0111
8 = 1000
</code></pre>

<p>When the number isn't a power of 2, according to the game you need to remove the next lower power of 2. In binary it's gonna look like removing the left most bit (you can look at the numbers above to confirm this). Given our knowledge and solutions so far, we can rewrite the rules of the game to simple binary operations:</p>

<pre><code>if ( number is a power of 2 ) then:
    use the check from the previous part of my answer to figure out the winner.
else:
    turn the most left 1 bit to 0.
</code></pre>

<p>This means the number of turns until we reach a power of 2 and find the answer depends on how many 1-bits are in the number, and knowing if this number is odd or even - combined with the answer to whether the power you reach is odd or even - is all you really need to know to predict the outcome of the game!</p>

<p>Let's test this solution: here's what you see when you track the changes in a number as the game is played, in binary:</p>

<pre><code>1000000110100
0000000110100
0000000010100
0000000000100
0000000000010
0000000000001
</code></pre>

<p>There are 4 <code>1</code>s (even number) but you don't remove the last <code>1</code> bit so ignore it and say there are 3 <code>1</code>s to be removed (odd number) and the first power of 2 you reach is 4 (even) so overall there will be an odd number of turns taken in the whole game, which you can see is true.</p>

<p>Here is the most optimized code I could possibly write to solve this:</p>

<pre><code>static String counterGame(long n){
    boolean richardWins = true;

    while((n &amp; 1) == 0){
        richardWins = !richardWins;
        n &gt;&gt;&gt;= 1;
    }
    while(n != 1){
        if((n &amp; 1) == 1)
            richardWins = !richardWins;
        n &gt;&gt;&gt;= 1;
    }

    return richardWins ? "Richard" : "Louise";
}
</code></pre>

<p>This code looks at each bit once, so the time complexity of this code is <code>O(log(N))</code> where <code>N</code> is the input number, and <code>log(N)</code> is the worst case scenario for the number of bits needed to represent the input number in binary.</p>

<p>Judging by the fact that the exception to the rules (where Richard wins when Louise gets the 1 at the start of the game) emerges naturally with this solution if you don't add an if statement at the start to take care of it, I'd say this is what the author of this challenge expected to be the best possible answer.</p>

<p></p><hr>

<h2>Bonus</h2>

<p>There are processor instructions for counting <code>1</code> bits and trailing zeros, so you could actually do the whole thing in one line instead of manually looping through the bits, and using these processor instructions is faster:</p>

<pre><code>static String counterGame(long n){
    return ((Long.numberOfTrailingZeros(n) &amp; 1) == 1) ^ ((Long.bitCount(n) &amp; 1) == 1) ? "Richard" : "Louise";
}
</code></pre>

<p><strong>EDIT:</strong> a shorter code suggested by @JS1:</p>

<blockquote>
  <p>By subtracting one, it turns all the trailing zeroes into trailing ones, so that they can be counted by bitCount.</p>
</blockquote>

<pre><code>static String counterGame(long n){
    return ((Long.bitCount(n-1) &amp; 1) == 0) ? "Richard" : "Louise";
}
</code></pre>
    </div>