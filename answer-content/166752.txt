<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Thanks for sharing the code!</p>

<blockquote>
  <p>I have my concerns with the current way I have coded things for example, I am unsure if using <code>faceUp</code> is the best way I can represent an unopened tile [...]. </p>
</blockquote>

<p>No, it isn't.</p>

<p>You already modeled the fields as objects of a class <code>Tile</code>. You should go one step further:</p>

<p>There are three types of "Tiles" with different behavior:</p>

<ol>
<li><em>bombs</em> which explode when clicked,</li>
<li><em>neighbors</em> of bombs which show how many bombs are around them.</li>
<li><em>safe</em> fields without neighboring bombs</li>
</ol>

<p>In OOP we create new classes when we have differing behavior. So you need to create 3 more classes extending the <code>Tile</code> class (which should rather be an interface though...)</p>

<p>Having this you can move some of the logic to the different subclasses of <code>Tile</code>.
E.g.: a <em>safe</em> field could uncover its neighbors  automatically:</p>

<pre><code>class SafeTile{
   private final Collection&lt;Tile&gt; neighbors = new  HashSet&lt;&gt;();
   @Override
   public void addNeighbor(Tile neighbor){ neighbors.add(neighbor);}
   @Override
   public void coverUp(){
     for(Tile neighbor : neighbors)
        neighbors.coverUp();
   }
}
</code></pre>

<blockquote>
  <p>I implemented nearly every possible edge case I could think of for the board. </p>
</blockquote>

<p>There is a natural way to deal with that: when the <em>tiles</em> know their neighbors you don't need a sophisticated logic to deal with edges and corners. These tiles just have less neighbors...</p>

<p>All you need is a smart way to fill the game board initially. YOu could do like this:</p>

<pre><code>class GameBoard{
  private final Tile[][] fields;
  GameBoard(int width, int height, int bombCount){
    fields = new Tile[width][height];
    // deploy bombs
    List&lt;Pair&gt; fieldPositions = new ArrayList&lt;&gt;();
    for(int i =0;i&lt;width;i++)
     for(int j=0; j&lt;height;j++)
       fieldPositions.add(new Pair(i,j));
    List&lt;Pair&gt; bombPositions = new ArrayList&lt;&gt;();
    for(int i =0;i&lt; bombCount;i++)
      bombPositions.add(fieldPositions.remove(new Random().nextInt(fieldPositions.size()));
    for(Pair bombPos : bombPositions){
       fields[bombPos.x][bombPos.y]= new TileBomb();
         // set bomb neigbors, corners and edges not yet handled...
         for(int i =-1; i&lt; 2; i++)
           for(int j =-1; j&lt; 2; j++)
             if(null==fields[bombPos.x+i][bombPos.y+j])
               fields[bombPos.x+i][bombPos.y+j]= new NeighborTile();
    }
    // set safe fields    
    for(int i =0;i&lt;width;i++)
     for(int j=0; j&lt;height;j++)
       if(null==fields[i][j])
         fields[i][j]= new SafeTile();
    // set neigbours   
    for(int i =0;i&lt;width-1;i++)
      for(int j=0; j&lt;height-1;j++){                 
          fields[i][j].addNeigbor(fields[i][j+1]);                 
          fields[i][j].addNeigbor(fields[i+1][j+1]);                 
          fields[i][j].addNeigbor(fields[i+1][j]);  
          fields[i][j+1].addNeigbor(fields[i][j]);                 
          fields[i+1][j+1].addNeigbor(fields[i][j]);                 
          fields[i+1][j].addNeigbor(fields[i][j]);       
       }
  }
}
</code></pre>

<p>The advantage is that you do not need handle field positions during runtime anymore. Just select a field and tell it that it has been uncovered. </p>

<hr>

<blockquote>
  <p>Why in the if statement for setting neighbor bombs is there <code>if(null == field...)</code>.</p>
</blockquote>

<p>Initially there are no objects in the <code>field</code> array, any field refers to <code>null</code>.</p>

<p>After placing a new bomb (b) we want to place all neighbor fields with new objects:</p>

<pre><code> - - -      n n n
 - b -  -&gt;  n b n
 - - -      n n n
</code></pre>

<p>The two inner loops iterate the sequence <code>-1</code>, <code>0</code>, <code>1</code>. This means we get all 9 possible combinations. But at <code>x+0 - y+0</code> is the bomb object we don't want to overwrite. 
We could have checked for <code>k</code> and <code>l</code> not being both <code>0</code> which would have worked for the current bomb position. But what if we have  placed another bomb (B) in a  field nearby in some previous iteration?</p>

<pre><code> N N N -
 N B N -
 N N b -
 - - - -
</code></pre>

<p>By checking the possible neighbor field for being empty (referencing to <code>null</code>) we do not need a sophisticated logic to avoid replacing the actual or any previously placed bomb with a <em>neighbor</em> object by accident.  We also don't replace any already placed <em>neighbor</em> field (except with a <em>bomb</em>) but that is less important.</p>

<p>On the other hand a new bomb can (and should) replace a previously placed <em>neighbor</em>. Therefore we do not check when placing a <em>bomb</em>.  </p>

<hr>

<blockquote>
  <p>why does a safe tile need to know tis neighbors </p>
</blockquote>

<p>A <code>SafeTile</code> is a field without a bomb in any of its neighbor fields. By the rules of "mine sweeper" all connected <em>safe</em> and <em>neighbor</em> fields are uncovered when a <em>safe</em> field is hit.</p>

<p>By having the <code>SafeTile</code> knowing its neighbors <sub>(which are either of class <code>SafeTile</code> too or of class <code>NeighborTile</code>, but never <em>bombs</em>)</sub> the current <code>SafeTile</code> can call the <code>coverUp()</code> method on its neigbors. Any neighbor which is a <code>SafeTile</code> itself will also propagate the call to its neighbors recursively, causing a <em>chain reaction</em>. 
<sup>keep in mind that my quick shot  causes an <em>infinite loop</em>...</sup></p>

<blockquote>
  <p>and what would be the meaning of cover up?</p>
</blockquote>

<p>The method <code>coverUp()</code> is meant to be called by the <em>User Interface</em> (UI) to trigger the state change from "unknown" to "visited". Obviously the subclasses of <code>Tile</code> will behave differently when this method is called on them. </p>
    </div>