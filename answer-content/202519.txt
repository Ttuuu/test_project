<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Try to keep your solution as general as possible. If I'm reading your code snippet right, you're trying to solve the problem for two patterns simultaneously. Instead, write a simple function that takes a list and a pattern, and just loops through the list counting occurrences of the pattern. This is a nice use case for list slices: given a list <code>a</code>, <code>a[i:j]</code> is a list consisting of elements <code>i</code> through <code>j-1</code> of <code>a</code>. </p>

<pre><code>def count_sequence(lst, seq):
     count = 0
     len_seq = len(seq)
     upper_bound = len(lst)-len_seq+1
     for i in range(upper_bound):
         if lst[i:i+len_seq] == seq:
             count += 1
     return count
</code></pre>

<p>Try to avoid exceptions if possible*. A rule of thumb is that exceptions are for <em>exceptional</em> situations. In your case, you're designing your code around the fact that you're going to get <code>IndexError</code>s, whereas the function I wrote keeps the array bounds in mind and thus won't raise <code>IndexError</code>s. Additionally, never write <code>except: pass</code>. The point of the <code>except</code> block is to catch errors and do something with them, so don't pass over them. </p>

<hr>

<p>* Python itself doens't always follow this advice; for example, loops in Python are ended by raising the <code>StopIteration</code> exception. Nevertheless, for user-level code it's usually a good idea to only use exceptions if absolutely necessary.</p>
    </div>