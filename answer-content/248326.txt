<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First, you should follow the <a href="https://www.oracle.com/java/technologies/javase/codeconventions-namingconventions.html" rel="nofollow noreferrer">Java naming conventions</a>.</p>
<hr>
<p>Second, don't shorten names just because you can. Example, what does "Proc" stand for? Procedure? Processor? Even if names become longer, the readability is worth it!</p>
<hr>
<pre class="lang-java prettyprint-override"><code>static String db_host = null;
</code></pre>
<p>Your members should not be <code>static</code>, and should ideally be qualified with something else than <code>package-private</code>, like <code>protected</code> or <code>private</code> to show the intent clearly.</p>
<hr>
<blockquote>
<p>In order to read the required arguments I need some kind of state machine.</p>
</blockquote>
<p>Is that a requirement you've been given or is that an assumption you had? Because that's not true at all. Overall, your system is completely unnecessarily complex without an obvious reason or benefit. Neither does it seem like a state-machine at all, it's just an overly complex chain of function calls.</p>
<p>A state-machine for your command-argument parsing would be something like this:</p>
<pre class="lang-java prettyprint-override"><code>for (int index = 0; index &lt; args.length; index++) {
    String arg = args[index];
    
    if (arg.equals("-p") &amp;&amp; databaseHost == null) {
        arg = args[++index];
        
        databasePort = arg;
    } else if (databaseHost == null) {
        databaseHost = arg;
    } else if (databaseUsername == null) {
        databaseUsername = arg;
    } else if (databasePassword == null) {
        databasePassword = arg;
    } else if (inputFile == null) {
        inputFile = arg;
    }
}
</code></pre>
<p>And even that is oddly complex.</p>
<p>What you want is the most simplest solution that works, and that would be a hardcoded extracting of arguments:</p>
<pre class="lang-java prettyprint-override"><code>if (args[0].equals("-h")) {
    printHelp();
    return;
}

int portProvidedOffset = 0;

if (args[0].equals("-p")) {
    databasePort = args[1];
    
    portProvidedOffset = 2;
}

databaseHost = args[portProvidedOffset + 0];
databaseUsername = args[portProvidedOffset + 1];
databasePassword = args[portProvidedOffset + 2];
inputFile = args[portProvidedOffset + 3];
</code></pre>
<p>Which is, of course, not pretty, but the most simplest solution you can get away with. Of course, the length of the array should be checked beforehand, whether it is 4 elements or more. Afterwards you'd check whether all parameters are set, if not, exit with an error.</p>
<p>If you want a more sophisticated solution, you'd need to write yourself a complete argument parser, a not-so-trivial exercise.</p>
    </div>