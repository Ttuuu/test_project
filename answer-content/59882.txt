<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>For my future self:</p>

<p>A singleton instance of @Guffa's implementation to avoid recreating <code>StringBuilder</code> and <code>Random</code> objects; less GC and a bit faster. Also @Gilles' implementation of GenerateUId beneath in case a crypto version is necessary.</p>

<pre><code>public class UIdGenerator
{
    private static readonly Lazy&lt;UIdGenerator&gt; _lazy = new Lazy&lt;UIdGenerator&gt;(
        () =&gt; new UIdGenerator(), LazyThreadSafetyMode.ExecutionAndPublication);

    public static UIdGenerator Instance
    {
        get { return UIdGenerator._lazy.Value; }
    }

    private readonly Random _random = new Random();
    private readonly Dictionary&lt;int, StringBuilder&gt; _stringBuilders = new Dictionary&lt;int, StringBuilder&gt;();
    private const string CHARACTERS = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";

    private UIdGenerator()
    {
    }

    public string GenerateUId(int length)
    {
        StringBuilder result;
        if (!_stringBuilders.TryGetValue(length, out result))
        {
            result = new StringBuilder();
            _stringBuilders[length] = result;
        }

        result.Clear();

        for (int i = 0; i &lt; length; i++)
        {
            result.Append(CHARACTERS[_random.Next(CHARACTERS.Length)]);
        }

        return result.ToString();
    }
}
</code></pre>

<p>@Gilles' version:</p>

<pre><code>// use me if you want a crypto version
public string GenerateUId(int length)
    // +6 to handle chances when value &gt;= 62 (increase with fewer CHARACTERS to offset the probability of it occurring)
    int iterations = length + 6;

    StringBuilder result;
    if (!_stringBuilders.TryGetValue(length, out result))
    {
        result = new StringBuilder();
        _stringBuilders[length] = result;
    }
    result.Clear();

    // todo re-use like we're doing with the StringBuilder
    byte[] rnd = new byte[iterations];
    _crypto.GetBytes(rnd);
    int n = 0;
    for (int j = 0; j &lt; iterations; ++j)
    {
        rnd[j] %= 64; 
        if (rnd[j] &lt; 62)
        {
            coupon.Append(CHARACTERS[rnd[j]]);
            ++n;
            if (n == length)
            {
                break;
            }
        }
    }

    return result.ToString();
}
</code></pre>

<p>Usage:</p>

<pre><code>UIdGenerator.Instance.GenerateUId(10);
</code></pre>
    </div>