<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p><code>if lst[n]</code> is not sufficient to determine if the value at index <code>n</code> is <code>None</code>, <code>0</code> will also not pass the test. Use <code>if lst[n] is not None</code> or <code>if lst[n] is None</code>, depending on which one you want.</p></li>
<li><p>The whole first loop is just trying to determine if you need to extend the list, but you could just do that:</p>

<pre><code>lst.extend([fill_value] * (index - len(lst) + 1))
</code></pre>

<p>If the list is already long enough this does nothing, as a list multiplied by an integer smaller than one is the empty list, and extending with an empty list does nothing. It even works when you use negative indices.</p></li>
<li><p>This also guarantees that the index exists, so you don't need the <code>try..except</code> anymore. But if you use <code>try</code> and <code>except</code>, always try to catch the narrowest exception possible. This way you make sure you don't catch an unexpected exception. In this case it would be an <code>IndexError</code> instead of the more generic <code>Exception</code>.</p></li>
<li><p>The convention in Python is for functions to only do one of two things: either do not mutate the inputs and return a new output or mutate (some of) the input and return <code>None</code> (potentially implicitly). Your function falls into the second category.</p></li>
</ul>

<p>With these changes your function could be a lot shorter:</p>

<pre><code>def fill(lst, index, value, fill_value=None):
    """Place the `value` at index `index`,
    but only if the value already there is `None`.
    Extends the list with `fill_value`, if necessary.
    """
    # No-op if list long enough or index negative
    lst.extend([fill_value] * (index - len(lst) + 1))
    if lst[index] is None:
        lst[index] = value

my_list = [1, 7, 14]
# my_list = [1, 7, 14]
fill(my_list, 5, 6)
# my_list = [1, 7, 14, None, None, 6]
fill(my_list, 6, 12)
# my_list = [1, 7, 14, None, None, 6, 12]
fill(my_list, 3, 25)
# my_list = [1, 7, 14, 25, None, 6, 12]
fill(my_list, 4, 18)
# my_list = [1, 7, 14, 25, 18, 6, 12]
</code></pre>

<p>Note that you will not directly see the result anymore in an interactive session, since the list is no longer returned. But that's a feature, not a bug, as mentioned above.</p>

<p>Of course, if you need to do this multiple times directly after each other, you might want to define a function that needs to extend only once:</p>

<pre><code>def fill_multiple(lst, indices, values, fill_value=None):
    lst.extend([fill_value] * (max(indices) - len(lst) + 1))
    for index, value in zip(indices, values):
        if lst[index] is None:
            lst[index] = value
</code></pre>

<p>Then you can use e.g a dictionary:</p>

<pre><code>my_list = [1, 7, 14]
updates = {5: 6, 6: 12, 3: 25, 4: 18}
fill_multiple(my_list, updates.keys(), updates.values())
# my_list = [1, 7, 14, 25, 18, 6, 12]
</code></pre>

<p>I kept the indices and values separate so you can also just pass lists or anything else, not just a mapping. Depending on your usecase you might want to pass the dictionary to the function instead.</p>
    </div>