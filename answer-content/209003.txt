<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>One way to deal with long URLs that are long because of lots of parameters is to let <code>requests</code> deal with those parameters by passing a dictionary:</p>

<pre><code>URL = "http://www.nhl.com/stats/rest/{}"

def basic_bio():
    params = {"isAggregate": "false",
              "reportType": "basic",
              "isGame": "false",
              "reportName": "skaterpercentages",
              "cayenneExp": "gameTypeId=2 and seasonId=20182019"}
    return requests.get(URL.format("skaters"), params=params).json()["data"]
</code></pre>

<p>It even performs the urlencoding for you (by escaping the spaces in the last parameter, in this case).</p></li>
<li><p><a href="https://de.wikipedia.org/wiki/Don%E2%80%99t_repeat_yourself" rel="nofollow noreferrer">Don't Repeat Yourself (DRY)</a>. In addition, always try to <a href="https://nedbatchelder.com/text/iter.html" rel="nofollow noreferrer">iterate over the elements of an iterable, instead of indices</a>. This allows you to use iterable but not indexable things (like generators). For <code>lastnames</code>, you can use a list comprehension, though:</p>

<pre><code>def lastnames():
    return [player["playerLastName"].lower() for player in basic_bio()]
</code></pre></li>
<li><p>Python has multiline strings:</p>

<pre><code>PLAYER_STATS = """Name: {fullName}

Birth Date: {birthDate}
Height: {height}
...
SH TOI per Game: {shortHandedTimeOnIcePerGame}

"""

def show_stats(data):
    path_stats = data[0]['stats'][0]['splits'][0]['stat']
    path_bio = data[0]
    print(PLAYER_STATS.format(**path_bio, **path_stats))
</code></pre>

<p>This uses the fact that in Python 3 you can keyword expand multiple mappings. It is OK if not all keys of the dictionary/ies are used.</p></li>
<li><p>Instead of comparing something directly with <code>False</code> or <code>True</code>, like in </p>

<pre><code>if os.path.isfile('nhl_skaters_id.json') == False or data_old('nhl_skaters_id.json') == True:
    # get info
</code></pre>

<p>just do</p>

<pre><code>skaters_json = 'nhl_skaters_id.json'
if not os.path.isfile(skaters_json) or data_old(skaters_json):
    # get info
</code></pre></li>
<li><p>Don't explicitly return <code>True</code> or <code>False</code> unless you really have to. Instead of</p>

<pre><code>if filetime &lt; one_day_ago:
    return True
else:
    return False
</code></pre>

<p>Just do</p>

<pre><code>return filetime &lt; one_day_ago
</code></pre></li>
<li>You should wrap your calling code in a <a href="http://stackoverflow.com/questions/419163/what-does-if-name-main-do"><code>if __name__ == "__main__":</code> guard</a> to allow importing from this script without executing those functions.</li>
<li>When catching exceptions, try to be as specific as possible. <code>except Exception</code> is already better than a bare except (because at least it does not prevent the user from exiting using Ctrl+C), but if you know the specific exception (or exceptions) you want to guard against, then use that knowledge. Here it is probably a <code>IndexError</code> or <code>KeyError</code>?</li>
</ul>
    </div>