<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Put space around control structures &amp; label some closing braces, IMO if &gt; 2 consecutive closing braces then start labeling - about every 3rd one.</p>

<pre><code>for (var i = 0; i &lt; reviews.length; i++) {

  if (reviews[i].classList.contains("show")) {
    currentReview = reviews[i];

    if (direction == 'forward') {

      if (i + 1 &gt; reviews.length - 1) {
        nextReview = reviews[0];
      } else {
        nextReview = reviews[i + 1];
      }

    } else {

    if (i - 1 &lt; 0) {
      nextReview = reviews[reviews.length - 1];
    } else {
      nextReview = reviews[i - 1];
    }

  } // if direction

}
</code></pre>

<hr>

<p>Logic nesting is too much. When I read that final <code>else</code> Im saying "else what? Where am I?" Too many <code>if</code>s is bad enough, with <code>if/else</code> code clarity is out the window and bug potential explodes.</p>

<pre><code>for (var i = 0; i &lt; reviews.length; i++) {

   switch(direction) {
     case 'forward':
       // your code here
       break;

     case 'backward' :
       // your code here
       break;

     default :
        alert(`direction "${direction}" is invalid`);
   } // switch
} 
</code></pre>

<p>switch goodness:</p>

<ul>
<li>encourages use of a default. Get in the habit of writing error trapping.</li>
<li>Your code is "forward, or anything not forward" -&gt; in contrast this is "forward", "backward", "anything else is a mistake".</li>
<li>Explicitly coding for all conditions unambiguously tells the reader what's what. </li>
<li>Extensible. Adding another condition is easy. In contract the nested if/else is very highly error prone. And you can imagine that switch complexity does not compound like if/else.</li>
<li>All the above makes it an ideal place for your general <em>dispatching</em>.</li>
</ul>

<hr>

<p>Given separate event handlers code can be simpler because a parameter is not required and code is greatly simplified. The <code>for</code> loop is unnecessary. Note that <code>currentReview</code>, <code>nextReview</code> are now indexes, not the objects themselves - which actually means only one of these is needed. There may be some redundant code for showing &amp; hiding but the simplicity is very compelling. </p>

<pre><code>function forward() {
   nextReview = currentReview &gt;= classList.length - 1? 0 : ++currentReview;
   // reviews[nextReview] ....
}

function backward() {
   nextReview = currentReview &lt;= 0 ? classList.length - 1 : --currentReview;
   // you know what to do here
}
</code></pre>
    </div>