<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Use 'shellcheck' to spot common problems</h1>

<pre class="lang-none prettyprint-override"><code>200236.sh:2:12: warning: Don't use ls | grep. Use a glob or a for loop with a condition to allow non-alphanumeric filenames. [SC2010]
200236.sh:2:18: note: Use ./*glob* or -- *glob* so names with dashes won't become options. [SC2035]
200236.sh:4:8: note: Don't use variables in the printf format string. Use printf "..%s.." "$foo". [SC2059]
200236.sh:4:53: note: Backslash is literal in "\n". Prefer explicit escaping: "\\n". [SC1117]
200236.sh:6:21: note: Double quote to prevent globbing and word splitting. [SC2086]
</code></pre>

<h1>Don't parse the output of <code>ls</code></h1>

<p>The <code>ls</code> program works well for interactive use, but isn't designed to be parsed by scripts.  The main problem is that whitespace and other shell-significant characters are shown as-is, with no quoting.  You could try to work around this using <code>ls -b</code>, but it's more robust to avoid the problem altogether:</p>

<pre><code>for i in */
do
  if [[ i =~ proc ]]; then continue; fi
  # ...
done
</code></pre>

<h1>The test for virtual filesystems is too broad</h1>

<p><code>grep proc</code> will pick up names such as <code>processor</code> - do you really want to exclude them?  If you want to avoid inspecting filesystems not backed by disks, there are more reliable means:</p>

<pre><code>case $(stat --file-system --format '%T' "$i") in
  proc|tmpfs|sysfs) continue ;;
esac
</code></pre>

<h1>Always quote parameter expansions</h1>

<pre><code>du -h --max-depth=1 "$i"
#                   ^^^^
</code></pre>

<h1>Don't expand parameters into a format string</h1>

<p>Use <code>echo</code> or <code>printf</code>, but don't confuse the two (<code>$i</code> may contain <code>%</code>):</p>

<pre><code>echo "**** $i has the following breakdown ********"
</code></pre>



<pre><code>printf '**** %s has the following breakdown ********\n' "$i"
</code></pre>

<h1>Constrain <code>du</code> to a single filesystem</h1>

<p>I'm not sure whether or not you want <code>du</code> to cross mountpoints.  If not, then add <code>-x</code> / <code>--one-file-system</code> to its options.</p>

<hr>

<h1>Modified code</h1>

<pre><code>#!/bin/bash
for i in */
do
    case $(stat --file-system --format '%T' "$i") in
        proc|tmpfs|sysfs) continue ;;
    esac

    echo "**** $i has the following breakdown ********"
    du -h --one-file-system --max-depth=1 "$i"
done
</code></pre>
    </div>