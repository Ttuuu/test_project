<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>General</h1>

<ul>
<li>In Java, don’t prefix variable names. </li>
<li><code>lineValue</code> should be a <code>StringBuilder</code>, not a <code>String</code>. Similarly, use <code>Arrays.copyOfRange()</code> rather than making new <code>String</code> instances.</li>
<li>Never, ever lock on yourself. Make a new object or use a <code>Lock</code>. Otherwise if some external class synchronizes on one of your instances, it stops working until they release it.</li>
<li>You can use <code>Reader</code> instead of <code>InputStreamReader</code>.</li>
<li><code>getCurrent()</code> should be defined below the constructors, and method bodies should almost never be forced onto one line.</li>
<li>adding local variables pointing to instance variables with slightly different names is confusing, and serves no purpose. Just refer to the instance variables.</li>
<li>There should be one line of whitespace between the end of each method and the beginning of the next.</li>
<li>I agree with @Malachi that you should simplify your uses of the ternary operator where possible.</li>
<li>You need to document your methods, and probably your instance variables. The names could also be more clear.</li>
</ul>

<h1>read()</h1>

<ul>
<li>Should this method be private? Should it just throw an <code>UncheckedIOException</code>?</li>
<li>it’s easier to read positive checks than negative checks - switch the if and else when checking <code>nextCharEquals</code>.</li>
<li>declare variables in as low a scope as possible. <code>isEscaping</code> belongs inside the <code>synchronized</code> block.</li>
<li>you can get rid of the outer loop by using <code>while ((this.bufferPosition &lt; this.numCharsRead) || this.fillBuffer()) {</code>
<code>read</code> - you don’t need the special case for the next character. It’s just additional complexity.</li>
<li>the process you’re describing isn’t "escaping". Escaping indicates that the next character contains an instruction or some other special character. What you want is to ignore CR-LF bounded by quotes, or some other special quoting character.</li>
</ul>

<p>If you applied all these changes, your code might look something like:</p>

<pre><code>import java.io.Closeable;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.Reader;
import java.io.UncheckedIOException;
import java.io.UnsupportedEncodingException;
import java.util.Arrays;
import java.util.Iterator;
import java.util.Spliterator;
import java.util.Spliterators;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;

public final class LineReader implements AutoCloseable, Closeable, Iterable&lt;String&gt; {

    private final char[] buffer;
    private final char escapeChar;
    private final Object lock = new Object();
    private final Reader reader;

    private int bufferOffset;
    private int bufferPosition;
    private final StringBuilder currentLine = new StringBuilder();
    private int numCharsRead;

    public LineReader(final InputStreamReader reader) {
        this(reader, '"', 1024);
    }

    public LineReader(final InputStreamReader reader, final char escapeChar, final int bufferLength) {
        this.buffer = new char[bufferLength];
        this.escapeChar = escapeChar;
        this.reader = reader;
    }

    public LineReader(final String filePath, final String encodingName)
            throws FileNotFoundException, UnsupportedEncodingException {
        this(new InputStreamReader(new FileInputStream(filePath), encodingName));
    }

    @Override
    public void close()
            throws IOException {
        this.reader.close();
    }

    @Override
    public Iterator&lt;String&gt; iterator() {
        return new Iterator&lt;String&gt;() {
            @Override
            public boolean hasNext() {
                try {
                    return LineReader.this.read();
                } catch (final IOException e) {
                    throw new UncheckedIOException(e);
                }
            }
            @Override
            public String next() {
                return LineReader.this.getCurrent();
            }
        };
    }

    public String getCurrent() {
        return this.currentLine.toString();
    }

    public boolean read() throws IOException {

        synchronized (this.lock) {
            this.currentLine.setLength(0);

            boolean inQuoteBlock = false;
            while ((this.bufferPosition &lt; this.numCharsRead) || this.fillBuffer()) {
                final char currentChar = this.buffer[this.bufferPosition++];

                if (currentChar == this.escapeChar) {
                    inQuoteBlock = !inQuoteBlock;
                }

                if (inQuoteBlock) {
                    continue;
                }

                if ((currentChar == '\r') || (currentChar == '\n')) {
                    this.appendBufferToCurrentLine();

                    if ((currentChar == '\r') &amp;&amp; this.nextCharEquals('\n')) {
                        this.bufferPosition++;
                    }

                    this.bufferOffset = this.bufferPosition;

                    return true;
                }
            }

            return this.currentLine.length() &gt; 0;
        }
    }

    public Stream&lt;String&gt; stream() {
        return StreamSupport.stream(
                Spliterators.spliteratorUnknownSize(this.iterator(), (Spliterator.NONNULL | Spliterator.ORDERED)),
                false);
    }

    private boolean fillBuffer() throws IOException {
        this.appendBufferToCurrentLine();

        this.bufferOffset = 0;
        this.bufferPosition = 0;
        this.numCharsRead = this.reader.read(this.buffer);

        return (0 &lt; this.numCharsRead);
    }

    private void appendBufferToCurrentLine() {
        if (this.bufferOffset &lt; this.bufferPosition) {
            this.currentLine.append(
                    Arrays.copyOfRange(this.buffer, this.bufferOffset, (this.bufferPosition - this.bufferOffset)));
        }
    }

    private boolean nextCharEquals(final char value) throws IOException {
        return (((this.bufferPosition &lt; this.numCharsRead) || this.fillBuffer())
                &amp;&amp; (this.buffer[this.bufferPosition] == value));
    }
}
</code></pre>
    </div>