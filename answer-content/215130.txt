<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>using namespace std;
</code></pre>
</blockquote>

<p><a href="https://www.quora.com/How-is-it-true-that-if-I-used-code-using-namespace-std-code-in-an-interview-Ill-be-rejected-immediately" rel="nofollow noreferrer">Possibly already failed the interview</a></p>

<hr>

<p><strong>Note:</strong> I added an underscore here to avoid another warning that your code generates, namely <a href="https://en.wikipedia.org/wiki/Variable_shadowing" rel="nofollow noreferrer">variable shadowing</a></p>

<blockquote>
<pre><code>struct Node
{
    int data; // 4 bytes for primatives
    Node* previous; // 8 bytes for pointers

    Node(int data_) : data(data_), previous(nullptr) { }
};
</code></pre>
</blockquote>

<p>Those size assumptions are not necessarily true (also note the typo).<br>
Depending on the compiler and warning levels you might get padding warnings for the <code>Node</code> struct as well as for this part:</p>

<blockquote>
<pre><code>struct Queue
{
    Node* queue;
    int size;
    bool is_empty;
    Node* front;
    Node* back;
    ...
</code></pre>
</blockquote>

<p>e.g.:</p>

<pre><code>warning: padding struct 'Node' with 4 bytes to align 'previous' [-Wpadded]
warning: padding struct 'Queue' with 3 bytes to align 'front' [-Wpadded]
</code></pre>

<p>Which is the compiler telling you that it will align things in a way that results in wasted space in the middle of your structs.</p>

<hr>

<blockquote>
<pre><code>Queue() : queue(nullptr), size(0), is_empty(true), front(nullptr), back(nullptr) { }
</code></pre>
</blockquote>

<p>If you don't intend to parameterize your <code>Queue</code> then you don't need to initialize in the ctor.<br>
Instead you can initalize directly like so:</p>

<pre><code>struct Queue
{
    Node* queue{nullptr};
    int size{0};
    bool is_empty{true};
    Node* front{nullptr};
    Node* back{nullptr};
    ...
</code></pre>

<hr>

<blockquote>
<pre><code>if (front == nullptr) {
</code></pre>
</blockquote>

<p>You compare to <code>nullptr</code> in various places. Don't. Instead do e.g. <code>!front</code>.</p>

<hr>

<p>At a glance this seems to leak memory as there is no cleanup code and you don't use smart pointers.</p>

<hr>

<p>Apply <code>const</code> where appropriate, at least for the print functions.</p>
    </div>