<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>To start, I must say that I wish I was writing JS like this in 2016. I have only recently been becoming acquainted with the newer features <a href="/questions/tagged/ecmascript-6" class="post-tag" title="show questions tagged 'ecmascript-6'" rel="tag">ecmascript-6</a> has to offer. After looking at the other answers to the post you mentioned I would have suggested they consider using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment" rel="nofollow noreferrer">destructuring assignment</a>, but I doubt it would help for your code.</p>
<p>For readability it can be a great idea to use functional code, but yes performance can suffer because each iteration calls a function, which adds to the call stack.</p>
<p>This code makes great use of template literals and arrow functions. It also has consistent indentation.</p>
<p>The template literal may be considered excessive, since it only contains interpolated values. The string concatenation could be achieved with the <code>+</code> operator - instead of:</p>
<pre><code> part.map((str, index) =&gt; 
       `${result[index]}${mainSep}${str}`
</code></pre>
<p>It could merely be:</p>
<pre><code> part.map((str, index) =&gt; 
       result[index] + mainSep + str
</code></pre>
<p>Which would save a few characters but also should be faster. See <a href="https://jsbin.com/cesuqum/2/edit?js,output" rel="nofollow noreferrer">this jsBin</a> for a comparison, as well as <a href="https://stackoverflow.com/a/53678213/1575353">this answer</a> to <a href="https://stackoverflow.com/q/16696632/1575353">Most efficient way to concatenate strings in JavaScript? </a> which has a link to an updated JSPerf. The graphs don't appear to be loading in my browser but in MacOS FF 77 the concat appears to be fastest with the template literal 4% slower. In Chrome 83.04 the results were similar - template literals appeared to be 22% slower than appending.</p>
<p>I forgot that <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce" rel="nofollow noreferrer"><code>reduce()</code></a> started with the 2nd element when no <code>initialValue</code> is supplied. While it may not be a huge improvement it does mean one less iteration...</p>
    </div>