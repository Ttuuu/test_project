<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Questionable use of <code>assert()</code></strong></p>

<p>Code below allows user input to kill the program abnormally - but only in a debug build.  <code>assert()</code> is better to detect problems that should not be expected to occur - but might.  Here the assert rapidly fails based on user input.</p>

<pre><code>    const size_t n = atoi(argv[1]);
    assert(n &gt; 0); // Length of the array must be &gt; 0.
    int64 sequence[n];
</code></pre>

<p>Instead:</p>

<pre><code>    size_t n = atoi(argv[1]); // recommend strtoll
    if (n &lt;= 0) {
      fprintf(stderr, "Invalid positive number &lt;%s&gt;\n", argv[1]);
      return EXIT_FAILURE;
    } 
</code></pre>

<p><strong>Help</strong></p>

<p>When user input is invalid as in <code>if(argc &gt; ...</code>, consider say how it is invalid and then post how to get "help".  Of course, also detect a request for help in <code>argv</code> processing.</p>

<pre><code>// Review this odd error message,  Did you want `__LINE__,4`
// fprintf(stderr,"Line number: %u: More than %u arguments are passed\n", __LINE__,argc);

#define HELP "Call with -h for help\n"
fprintf(stderr,"Line number: %u: More than %u arguments are passed\n" HELP, __LINE__, 4);
</code></pre>

<p><strong>Think big</strong></p>

<p>The VLA <code>int64 sequence[n];</code> with a large enough <code>n</code> will certainly cause a <em>stack overflow</em>.  Consider memory allocation instead.</p>

<p><strong>Good use of <code>const</code> - sometimes</strong></p>

<p><code>const int64 *</code> is <em>good</em> to show code does not modify what data points to.   This self-documents, allows for more usages and optimizations.  <code>const</code> in <code>const data</code> and <code>const size_t n</code> is less valuable.  Even though I find it unnecessary verbose and distracting, code to your group's coding stand concerning this. </p>

<pre><code>// Example, many similar places in code.
static void display_sequence(const int64 *const data,const size_t n) {
</code></pre>

<p><strong>Maintainable</strong></p>

<p>C does not specify <code>long long</code> to be 64-bits.  It is at <em>least</em> 64 bits.  </p>

<pre><code>typedef unsigned long long int64; 
typedef long long uint64;           // Why is uint64 a signed type? 
</code></pre>

<p>For maximum potential use, consider <code>(u)intmax_t</code>.</p>

<p><strong>Minor nit: trailing space</strong></p>

<p><code>display_sequence()</code> ends output with a <code>" \n"</code>.  From time-to-time, output with unexpected spaces leads to issues.  Consider removing trailing spaces.  Example:</p>

<pre><code>static void display_sequence(const int64 *data, size_t n) {
    const char *delimiter = "";
    for(size_t i = 0; i &lt; n; ++i) {
        printf("%s%lld", delimiter, data[i]);
        delimiter = " ";  //  Maybe a command option would steer ", " here for a CSV
    }
    printf("\n");
}
</code></pre>
    </div>