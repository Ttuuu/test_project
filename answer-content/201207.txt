<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><code>ViewConnection</code> class looks cool, I think that's a clever use of tasks. But frankly I don't see why you can't have a </p>

<pre><code>public string State { get {...} set {...}}
</code></pre>

<p>property on both view and viewmodel and solve your problem with two-way databinding. You can set this property on your viewmodel when you load your layout. If view is there - fine, it will be notified that the property has changed and you can handle this change on the view side (i.e. update datagrid with new state). If the view is not there - also fine, it will fetch the property from viewmodel as soon as you set its <code>DataContext</code>. In similar fashion you can save datagrid state on view side, set <code>View.State</code> and handle the new state in <code>ViewModel.State</code> property (i.e save it to file). You do not show your view class, but I don't see any problems with this approach off the bat, and I think that's how those things should be done normally.</p>
    </div>