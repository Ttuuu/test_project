<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>To expand on @Caridorc's answer:</p>

<p>The method suggested is indeed the fastest way to do this type of question. First, you create a method with a two-dimensional <code>char</code> array and a <code>String</code> to look for:</p>

<pre><code>public static boolean contains(char[][] grid, String word) {

}
</code></pre>

<p>Then, you implement the pseudocode:</p>

<pre><code>public static boolean contains(char[][] grid, String word) {
    return verticalContains(grid, word)
            || horizontalContains(grid, word)
            || diagonalContains(grid, word);
}
</code></pre>

<p>And the methods:</p>

<pre><code>private static boolean verticalContains(char[][] grid, String word) {
    for (char[] row : grid) {
        if (new String(row).contains(word)) {
            return true;
        }
    }
    return false;
}

private static boolean horizontalContains(char[][] grid, String word) {
    int wordLength = word.length();
    int max = grid.length - wordLength;
    char[] wordArray = word.toCharArray();
    for (int i = 0, length = grid[0].length; i &lt; length; i++) {
        loop: for (int j = 0; j &lt; max; j++) {
            for (int k = j; k &lt; wordArray.length; k++) {
                if (wordArray[k - j] != grid[k][i]) {
                    continue loop;
                }
            }
            return true;
        }
    }
}
</code></pre>

<p>Diagonal is a bit trickier:</p>

<pre><code>private static boolean diagonalContains(char[][] grid, String word) {
    int wordLength = word.length();
    char[] wordArray = word.toCharArray();
    for (int i = 0, length = grid.length; i &lt; length; i++) {
        loop: for (int j = 0, k = i, subLength = grid[i].length;
                j &lt; subLength &amp;&amp; k &gt;= wordLength; j++, k--) {
            for (int l = 0; l &lt; wordLength; l++) {
                if (grid[j + l][k - l] != wordArray[l]) {
                    continue loop;
                }
                return true;
            }
        }
    }
}
</code></pre>

<p>Notice that vertical checks are easier, due to the easy creation of a <code>String</code> with a <code>char</code> array. Horizontal and diagonal is similar in structure.</p>

<hr>

<p>You can even make it OOP:</p>

<pre><code>import java.util.Arrays;

public class CharGrid {

    private final char[][] grid;

    public CharGrid(char[][] grid) {
        int length = grid.length;
        this.grid = copyArray(grid);
    }

    public char[][] getGrid() {
        return copyArray(grid)
    }

    private char[][] copyArray(char[][] array) {
        char[][] result = Arrays.copy(array, length);
        for (int i = 0; i &lt; length; i++) {
            result[i] = Arrays.copy(array[i], array[i].length);
        }
        return result;
    }

    public boolean contains(String word) {
        return verticalContains(grid, word)
                || horizontalContains(grid, word)
                || diagonalContains(grid, word);
    }

    private boolean verticalContains(String word) {
        for (char[] row : grid) {
            if (new String(row).contains(word)) {
                return true;
            }
        }
        return false;
    }

    private boolean horizontalContains(String word) {
        int wordLength = word.length();
        int max = grid.length - wordLength;
        char[] wordArray = word.toCharArray();
        for (int i = 0, length = grid[0].length; i &lt; length; i++) {
            loop: for (int j = 0; j &lt; max; j++) {
                for (int k = j; k &lt; wordArray.length; k++) {
                    if (wordArray[k - j] != grid[k][i]) {
                        continue loop;
                    }
                }
                return true;
            }
        }
    }

    private boolean diagonalContains(String word) {
        int wordLength = word.length();
        char[] wordArray = word.toCharArray();
        for (int i = 0, length = grid.length; i &lt; length; i++) {
            loop: for (int j = 0, k = i, subLength = grid[i].length;
                    j &lt; subLength &amp;&amp; k &gt;= wordLength; j++, k--) {
                for (int l = 0; l &lt; wordLength; l++) {
                    if (grid[j + l][k - l] != wordArray[l]) {
                        continue loop;
                    }
                    return true;
                }
            }
        }
    }

}
</code></pre>
    </div>