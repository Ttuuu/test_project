<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Complexity</h2>
<p>The code does a pretty good job of following the <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" rel="nofollow noreferrer">Single Responsibility Principle</a> states:</p>
<blockquote>
<p>that every module, class, or function should have responsibility over a single part of the functionality provided by the software, and that responsibility should be entirely encapsulated by that module, class or function.</p>
</blockquote>
<p>The exception to this is the function <code>DisplayResults()</code> which is too complex (does too much in one function). Based on the name of the function it should do exactly one thing, which is display the results.</p>
<p>The <code>Addusers()</code> function function should be responsible for calling all the functions to add user information, there should be a new function call <code>AddUserName()</code>.</p>
<p>Many of the functions would require less parameters if user was a class and that would greatly simplify the implementation.</p>
<p>In the <code>calculate</code> functions the code can simply return the calculation rather than assigning it to a variable and then returning the variable. It might be possible to write these functions as <a href="https://en.cppreference.com/w/cpp/language/lambda" rel="nofollow noreferrer">lambda expressions</a> rather than functions.</p>
<h2>Avoid <code>using namespace std</code></h2>
<p>If you are coding professionally you probably should get out of the habit of using the <code>using namespace std;</code> statement. The code will more clearly define where <code>cout</code> and other identifiers are coming from (<code>std::cin</code>, <code>std::cout</code>). As you start using namespaces in your code it is better to identify where each function comes from because there may be function name collisions from different namespaces. The identifier<code>cout</code> you may override within your own classes, and you may override the operator <code>&lt;&lt;</code> in your own classes as well. This <a href="https://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice">stack overflow question</a> discusses this in more detail.</p>
<h2>Useless Comments</h2>
<p>The comments in <code>main()</code> of the form <code>//Procedure N</code> really don't help explain anything. Comments should be used to explain why the code may be doing something that a programmer can't infer by reading self documenting code. Given the function and variable names in the program this code is self documenting code.</p>
    </div>