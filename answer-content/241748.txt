<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Performance (Language independent)</h1>

<p>The permutations scale factorially with the word length and your loop code squares quadratically with the number of words. 
Both are really bad scaling factors.
The nice thing to realize, that all equivalent anagrams map to the same multiset.
There are python libraries for multisets, but already with the built-in tools you can go a long way.
Two strings are equivalent, under "Anagram-relation", if they are the same after sorting. We will treat the sorted string as representation of our Anagram equivalence class. Since strings are immutable you can even use these represantions directly as dictionary keys.</p>

<p>Your code becomes then quite short</p>

<pre><code>from collections import defaultdict

def count_anagrams(words):
    result = defaultdict(list)
    for word in words:
        result[''.join(sorted(word))].append(word)
    return dict(result)
</code></pre>

<p>This scales linearly with word number and (n * log(n)) with word length. (Under the assumption that dictionary insertion is O(1) and <code>sorted</code> uses a reasonable sorting algorithm.).</p>

<p>The output of</p>

<pre><code>count_anagrams(['stop', 'test', 'post'])
</code></pre>

<p>is then </p>

<pre><code>{'opst': ['stop', 'post'], 'estt': ['test']}
</code></pre>

<p>You can change it to your needs by transforming it to your desired output with <code>len</code> etc.</p>

<p>If you want to convert it to the exact same form as you have it, one example function would be:</p>

<pre><code>def convert_output(words_in_anagram_class):
    return {word: len(words)
            for words in words_in_anagram_class.values() 
            for word in words}
</code></pre>

<p>Then you can call <code>convert_output(count_anagrams(words))</code>. If you want to, you can combine these two functions into one.
(Although this is IMHO a far less useful representation of your data.)</p>

<h1>Small stuff (Python nitpicks)</h1>

<p><code>map</code> can and should be replaced with comprehensions. Especially if you cast the result into a list.
<code>[f(x) for x in iterable]</code> is far nicer to read than <code>list(map(f, iterable))</code>.
If you really want a generator, there are also generator expressions
<code>(f(x) for x in iterable)</code>.</p>
    </div>