<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I see some things that could be improved with this code.</p>

<h2>Fix <code>exetime</code></h2>

<p>The <code>exetime</code> word is defined like this:</p>

<pre><code>: exetime  utime 2&gt;r quicksort execute  utime 2r&gt; d- ." dtime " . cr ;
</code></pre>

<p>There are a number of problems with that.  First, the formatting is not very good.  I'd prefer to see a stack comment, for example.  Second, this should probably take a parameter so that any word can be timed (this appears to be the intent from <code>run</code>).  Third, that last <code>.</code> should be <code>d.</code> to display the entire delta time rather than just half of it.</p>

<pre><code>: exetime  ( fp -- ) 
   utime 2&gt;r  execute  utime 2r&gt; d- ." dtime " d. cr 
;
</code></pre>

<h2>Use smaller words</h2>

<p>Again using <code>exetime</code> as an example, there are actually two things done by the word as defined.  The first is that it calculates a delta time, and the second is that it prints that time.  I'd make those separate words.</p>

<h2>Follow Forth convention</h2>

<p>It's common to use prefixes to simplify code.  For example, everywhere <code>ssrt</code> is used, it's followed by <code>@</code>.  For that reason, I'd define and use word like these:</p>

<pre><code>: @ssrt ssrt @ ;
: @size size @ ;
: !size size ! ;
</code></pre>

<h2>Define and use common idioms</h2>

<p>A number of cases in the code there is a sequence like this: <code>size @ .</code> but there is a common idiom for that and it's built in to many Forth implementations.  If it's not, it's easy to define:</p>

<pre><code>: ?  ( a -- )   @ . ;
</code></pre>

<p>It would be used like this:  <code>size ?</code>.  Alternatively, one could use the prefix idiom which is associated with a particular value:</p>

<pre><code>: ?size  ( -- )   size @ . ;
</code></pre>

<h2>Eliminate unused variables</h2>

<p>The <code>logs</code> variable is defined but never used.  This needlessly clutters the code.</p>

<h2>Simplify control structure</h2>

<p>Instead of using <code>begin .. while .. repeat</code>, it's often the case that one can use <code>begin .. until</code> instead and simplify the code.  Using the refactored smaller words as suggested above, here's what <code>run</code> looks like now:  </p>

<pre><code>: run ( fp )
    &gt;r
    begin 
        copy-array
        array-limits r@ exetime
        ." size " ?size ." dtime " d. cr
    size2x total-size &gt; until
    rdrop
;
</code></pre>

<p>These are the refactored words:</p>

<pre><code>: exetime  ( fp -- ) utime 2&gt;r execute utime 2r&gt; d- ;
: copy-array ( -- ) data @ ssrt @ size @ cells move ;
: array-limits ( -- alo ahi ) ssrt @ dup size @ cells + swap ;
: @size ( -- n ) size @ ;
: ?size ( -- ) @size . ;
: size2x ( -- n ) size @ 2 * dup size ! ;
</code></pre>

<h2>Make sure comments don't lie</h2>

<p>The <code>shuffle</code> word starts like this:</p>

<pre><code>: shuffle ( n a -- )
</code></pre>

<p>However, that's not correct.  It should instead be:</p>

<pre><code>: shuffle ( n1 n2 a -- )
</code></pre>

<h2>Use refactoring to improve speed</h2>

<p>The code currently contains this:</p>

<pre><code>: median_of_3 ( n0 n1 n2 -- n )
    &gt;r 2dup &gt; if swap then
    r&gt; 2dup &gt; if swap then drop
       2dup &lt; if swap then drop
;
</code></pre>

<p>However, in addition to being somewhat opaque, it's not as fast as it could be.  Refactoring into smaller chunks improves both readability and speed:</p>

<pre><code>\ arrange top two stack values to assure n0 &lt;= n1
: lohi ( n0 n1 -- n0 n1 ) 2dup &gt; if swap then ;
\ arrange top three stack values to assure n0 &lt;= n1 &lt;= n2
: 3sort ( n0 n1 n2 -- n0 n1 n2 ) lohi &gt;r lohi r&gt; lohi ;
\ extract median value from top 3 items on stack
: median_of_3 ( n0 n1 n2 -- n1 ) 3sort drop nip ; 
</code></pre>

<h2>Be aware of non-standard extensions</h2>

<p>The code uses the non-standard extensions: </p>

<pre><code> rdrop -rot utime 
</code></pre>

<p>It is not hard to write replacements for the first two if needed:</p>

<pre><code>: rdrop r&gt; drop ;
: -rot rot rot ;
</code></pre>

<p>Since <code>utime</code> is only used in the test code, perhaps it's not as critical.  There is no standard replacement.</p>
    </div>