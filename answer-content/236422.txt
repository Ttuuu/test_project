<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Code Review</h2>
<pre><code>/*
 *  Copyright Â© 2020 James Larrowe
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */
</code></pre>
<p>You should probably note that this code is now also available under the Creative Commons license which you agreed to by posting it on this page. See the base of the page for details.</p>
<blockquote>
<p>user contributions licensed under cc <a href="https://creativecommons.org/licenses/by-sa/4.0/" rel="noreferrer">by-sa 4.0</a> with <a href="https://stackoverflow.blog/2009/06/25/attribution-required/">attribution required</a>. rev 2020.1.30.35920</p>
</blockquote>
<hr>
<p>In the old days this was not legal (the space after the hash). But I am not sure if this has been updated.</p>
<pre><code># define SAFE_INTEGER_HPP 1
</code></pre>
<p>Anyway it looks untidy :-)</p>
<hr>
<p>Here you have undefined behavior.</p>
<pre><code>    I &amp;operator=(I v) { val = v; }
</code></pre>
<p>You are supposed to return a reference yet don't return anything.</p>
<p>Also I am concerned about the return type. Why are you returning a reference to the internal integer? Should that not be a reference to the <code>safe_int</code>? Is this some kind of pre-mature optimization?</p>
<p>It has to be an <code>int</code> so passing by value seems OK until you come along and adapt the class for some other type (might be useful for <code>std::complex&lt;int&gt;</code>?). Then passing by value is no longer a good solution.</p>
<p>Assume somebody will use your class in a way you have not anticipated and thus program defensively. Pass parameters by const reference unless you know that forever it is only going to be an int and you can't know that because its an <code>I</code>.</p>
<hr>
<p>Are you sure that's a a safe test?</p>
<pre><code>    safe_int operator-()
    {
        if(val &lt; -max)
            throw std::overflow_error("");

        return safe_int(-val);
    }
</code></pre>
<p>What about signed integer?<br>
Do all systems use integers where the <code>std::abs(min) &gt; max</code>? Not sure I know that answer.</p>
<hr>
<p>Hard to spot that <code>&amp;</code>.</p>
<pre><code>    safe_int &amp;operator++()
</code></pre>
<p>In C++ (unlike C) the <code>&amp;</code> and the <code>*</code> are usually placed with the type information. So it would normally be written as:</p>
<pre><code>    safe_int&amp; operator++()
</code></pre>
<hr>
<p>You could think of no other way of writing that without the <code>goto</code>?</p>
<pre><code>    safe_int &amp;operator*=(I rhs)
    {
                goto no_overflow;
no_overflow:
        val *= rhs;
        return *this;
    }
</code></pre>
    </div>