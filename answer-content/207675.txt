<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In for instance <code>EmbeddedFileInfo</code> I wonder if you can sharpen the first condition in:</p>

<blockquote>
<pre><code>public override bool Equals(object obj) =&gt; obj is IFileInfo file &amp;&amp; Equals(file);
</code></pre>
</blockquote>

<p>to:</p>

<pre><code>public override bool Equals(object obj) =&gt; obj is EmbeddedFileInfo file &amp;&amp; Equals(file);
</code></pre>

<p>But you only compare on path so maybe not, because?</p>

<hr>

<p>I think I would implement <code>PhysicalFileInfo</code> in this way:</p>

<pre><code>  internal class PhysicalFileInfo : IFileInfo
  {
    FileSystemInfo m_info;

    public PhysicalFileInfo([NotNull] string path)
    {
      m_info = File.Exists(path) ? 
        new FileInfo(path) as FileSystemInfo : 
        (Directory.Exists(path) ? new DirectoryInfo(path) : 
          throw new ArgumentException("Invalid Path", nameof(path)));
    }

    #region IFileInfo

    public string Path =&gt; m_info.FullName;

    public string Name =&gt; m_info.Name;

    public bool Exists =&gt; m_info.Exists;

    public long Length =&gt; Exists &amp;&amp; !IsDirectory ? (m_info as FileInfo).Length : -1;

    public DateTime ModifiedOn =&gt; m_info.LastWriteTime;

    public bool IsDirectory =&gt; m_info is DirectoryInfo;

    public Stream CreateReadStream()
    {
      return
          IsDirectory
              ? throw new InvalidOperationException($"Cannot open '{Path}' for reading because it's a directory.")
              : Exists
                  ? (m_info as FileInfo).OpenRead()
                  : throw new InvalidOperationException("Cannot open '{Path}' for reading because the file does not exist.");
    }

    #endregion

    #region IEquatable&lt;IFileInfo&gt;

    public override bool Equals(object obj) =&gt; obj is IFileInfo file &amp;&amp; Equals(file);

    public bool Equals(IFileInfo other) =&gt; FileInfoEqualityComparer.Default.Equals(other, this);

    public bool Equals(string other) =&gt; FileInfoEqualityComparer.Default.Equals(other, Path);

    public override int GetHashCode() =&gt; FileInfoEqualityComparer.Default.GetHashCode(this);

    #endregion
  }
</code></pre>

<hr>

<p>In this:</p>

<blockquote>
<pre><code>public Stream CreateReadStream()
{
    return
        IsDirectory
            ? throw new InvalidOperationException($"Cannot open '{Path}' for reading because it's a directory.")
            : Exists
                ? File.OpenRead(Path)
                : throw new InvalidOperationException("Cannot open '{Path}' for reading because the file does not exist.");
}
</code></pre>
</blockquote>

<p>you throw <code>InvalidOperationException</code> if <code>Exists</code> returns <code>false</code>. But if the file is deleted by another process between the call to <code>Exists</code> and <code>File.OpenRead(Path)</code> a <code>FileNotFoundException</code> will be thrown by the system. So there is a minor risk for two different error message for the same exception/error for the same operation. In general I would avoid checking if the file/directory exists before any operation on them and let the system respond with the standard exceptions. And if you find it necessary to provide your own exceptions then catch the standard exceptions in the method in question and the throw your own to the caller.</p>
    </div>