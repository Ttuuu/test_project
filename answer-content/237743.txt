<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I tried to improve upon your second version, incorporating some changes of @JoopEggen and some of my own:</p>

<h1>Word out ideas</h1>

<p>As already pointed out, it can help much to simply define variables holding the values you will use later, eg. <code>word_shift</code>, etc.  This does not cost any computation (or storage) time with any barely decent compiler but helps tremendously when thinking about the problem.</p>

<h1>Use braces</h1>

<p>I know, you didn't ask for code style improvements, but braces don't hurt either and having a multiline if-else within a for-loop without delimiting it with braces is not nicely readable and also often a source for future bugs.</p>

<h1>Be explicit, write obvious code</h1>

<p>Using <code>n &amp;&amp; i &gt;= 0</code> in the for loop just gives extra reading burden to the programmer.  If I see a condition within the loop head I think about why it's checked every iteration.  I wrote instead:</p>

<pre><code>if (n == 0) { return; }

for ( /* ... */ )
</code></pre>

<p>And I removed the comment as now the code is, indeed, self-documenting and obvious and the comment basically redundant.</p>

<h1>Split the loop, move the if-statement outside</h1>

<p>The <code>if</code> within the loop basically checks, whether we're already done shifting words and can begin filling up with zero.  There's a neat way to do that (IMHO):</p>

<p></p>

<pre><code>// Shift values into next word
int i;
for (i = num_words-1; i &gt;= word_shift; i--) {
    // move word
    b[i] = b[i - word_shift] &lt;&lt; bit_shift;
    // move leftover carried bits
    if (i != word_shift) {
        b[i] |= b[i-word_shift - 1] &gt;&gt; (word_bits - bit_shift);
    }
}
// Fill in zeroes
for (; i &gt;= 0; i--) {
    b[i] = 0;
}
</code></pre>

<p>I move the iterator declaration outside of the loop and instead of counting til zero, I count to <code>word_shift</code> for moving the values and then have a separate loop filling up the remaining bits.  Now the loop body doesn't have different meanings in different iterations, making it easier to model in your head.</p>

<p>I also removed the special case where <code>n</code> is a multiple of 64 since it doesn't matter for the semantics of the code and I doubt there's any gain performance-wise for that.  If you want to keep it in, I'd rephrase it to <code>n % 64 == 0</code> because here, as well, being more explicit doesn't hurt.  Usually good choice of style is to emit the <code>x == 0</code> check in cases where you want to check a Boolean, such as:</p>

<pre><code>int flag = 0;
/* ... */
if (flag) { }
</code></pre>

<p>or the "existence" of a pointer:</p>

<pre><code>int *p;
/* ... */
if (!p) { /* read: if p "doesn't exist" */
    /* ... */
}
</code></pre>

<p>If you want to check whether an integer holds zero, use <code>x == 0</code>, just as you would compare to 42 using <code>x == 42</code>.  While, to the compiler, it's equivalent, to the reader it eases understanding.</p>

<h1>Don't hardcode values</h1>

<p>Now it's easy to "generalize" your function, if you want to.  Using <code>sizeof</code>, <code>CHAR_BIT</code> and an additional argument to your function, it can process any bitset that is a multiple of 64 Bits (one could now implement the same function using <code>uint8_t</code> instead to allow almost any-sized bitsets and use it instead or as a fallback function called from this, if `bits % word_bits !=</p>

<pre><code>void shl(uint64_t *const b, const uint16_t bits, const uint_fast8_t n)
{
    const uint8_t word_bits = sizeof (b[0]) * CHAR_BIT;
    const uint8_t word_shift = n / word_bits;
    const uint8_t bit_shift = n % word_bits;

    const uint8_t num_words = bits/word_bits;
    assert(bits % word_bits == 0);
}
</code></pre>

<h1>Putting it together</h1>

<pre><code>void shl(uint64_t *const b, const uint16_t bits, const uint_fast8_t n)
{
    const uint8_t word_bits = sizeof (b[0]) * CHAR_BIT;
    const uint8_t word_shift = n / word_bits;
    const uint8_t bit_shift = n % word_bits;

    const uint8_t num_words = bits/word_bits;
    assert(bits % word_bits == 0);

    if (n == 0) { return; }

    // Shift values into next word
    int i;
    for (i = num_words-1; i &gt;= word_shift; i--) {
        // move word
        b[i] = b[i - word_shift] &lt;&lt; bit_shift;

        // move leftover carried bits
        if (i != word_shift) {
            b[i] |= b[i-word_shift - 1] &gt;&gt; (word_bits - bit_shift);
        }
    }
    // Fill in zeroes
    for (; i &gt;= 0; i--) {
        b[i] = 0;
    }

}
</code></pre>

<h1>Final notes</h1>

<p>Currently, your layout to represent eg. <code>0x01020408</code> is an array
<code>{ 0x08, 0x04, 0x02, 0x01 }</code>.  This, to me, feels a bit counter-intuitive and also makes it a bit more difficult to eventually "upcast" to an even higher bitset, if you'd order the bytes reversed, you'd simply copy them and append zeroes.  But that decision personal preference and/or application dependent.</p>

<p>While my solution definitely uses more vertical space, we thankfully do not write on teletype writers anymore, making that a rather irrelevant restriction :)</p>
    </div>