<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Welcome to CodeReview! First, congratulations on writing a working Python program that is clean, straightforward, and easy to understand.</p>

<p>Now let's see if we can make it better!</p>

<h1>Style</h1>

<p>There are two things I think you could improve stylistically. First, your comments are a little too much. I know people encourage you to write comments. But you need to be careful of the kind of comments you write.</p>

<p>Comments should be used to provide <em>extra</em> information. When you have code like this:</p>

<pre><code># open word files
wordlist = open("wordlist.txt", "r").read().split()
words = open("words.txt", "r").read().split() 
</code></pre>

<p>Is the comment really adding value? A comment that states in English what your code states in Python is a wasted comment. You want to explain <em>what you are doing</em> rather than focus on <em>how you do it.</em> And you should only explain things that don't already have a set of names explaining it. If you're calling an <code>open</code> function, you don't need to explain that you are opening something. If you're storing data into a variable called <code>wordlist</code>, you probably don't need to explain that you are reading a word list. Use a light touch with your commentary.</p>

<p>Second, it's very much preferred in Python 3 to use the context manager features of file objects. If you are going to read in the entire contents of a file, use a <code>with</code> block to open, read, and close the file safely.</p>

<pre><code>with open("wordlist.txt", 'r') as wlist:
    wordlist = wlist.read().split()
</code></pre>

<p>Since you do this twice, you might write a function to do it for you. (You say you're a beginner, so I'm not sure if you've learned functions yet.)</p>

<h1>Performance</h1>

<p>Looking at the "skeleton" of your code:</p>

<pre><code>for word in words:
    for compare in wordlist:
        for char in word:
</code></pre>

<p>Your performance is going to be <span class="math-container">\$O(m \times n \times o)\$</span> where <code>m</code> is the number of scrambled words, <code>n</code> is the number of words in the master wordlist, and <code>o</code> is the average word length.</p>

<p>The phrasing of the problem statements suggests that the scrambled words are a small subset of the inputs. But the worst case is that the scrambled words are the entire wordlist, making your worst-case performance <span class="math-container">\$O(n^2)\$</span> which will really hurt for large values of <code>n</code>.</p>

<p>You can improve this performance by converting <span class="math-container">\$m \times n\$</span> into <span class="math-container">\$m + n\$</span>. Make a pass through one list computing a "signature" for each word. Store the signatures in a Python <a href="https://docs.python.org/3/library/stdtypes.html?highlight=dict#mapping-types-dict" rel="nofollow noreferrer"><code>dict</code></a> (dictionary) object mapping the signature to the original word(s) with that signature. Then make a pass through the second list, computing a "signature" for those words that can compare with the first signature. Check each word in the second list to see if its signature is in the dictionary, and store the results if so.</p>

<p>This process, <strong>if you can find the right signature,</strong> will work for a large number of problems.</p>

<p>You want a signature that does not depend on the ordering of the letters, since by definition one set of letters is scrambled. One easy mechanism would be to sort the letters into ASCII order, so that "banana" -&gt; "aaabnn" for example. </p>

<p>Your code would then look like this:</p>

<pre><code>signatures = dict()

for word in wordlist:
    sig = ''.join(sorted(word))
    signatures[sig] = word

found_words = []

for dwro in scrambled_words:
    sig = ''.join(sorted(dwro))
    if sig in signatures:
        found_words.append(signatures[sig])
</code></pre>

<p><strong>Note:</strong> There's a potential issue, in that words like "keep" and "peek" are going to have the same signature, since they have all the same letters. You will have to decide how to handle that, but if you decide to maintain a list of all possible words for a signature, you should look at <a href="https://docs.python.org/3/library/collections.html#defaultdict-objects" rel="nofollow noreferrer"><code>collections.defaultdict</code></a>.</p>
    </div>