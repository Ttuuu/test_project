<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Style</h2>

<ul>
<li><p>Don't add an <code>else</code> after condition blocks that terminate (returns or throws) current context execution:</p>

<pre><code>if (foo) {
    return;
} else {  // else and block are superfluous
    blah = 0;
}

// the same as above but with less noise
if (foo) {
    return;
}
blah = 0;

// or
if (foo) { return }
blah = 0;
</code></pre></li>
<li><p>Don't use <code>==</code> or <code>!=</code>; use <code>===</code> or <code>!==</code> instead</p></li>
<li><p>Don't test for known states. For instance, if iteration variable <code>i</code> starts at <code>0</code> you know <code>i &gt; 0</code> if <code>i !== 0</code>.</p>

<blockquote>
<pre><code>  if (i == 0) {
    //... code
  }  /* There should be an else here */

  // for 2nd - n-1th elements
  if (i &gt; 0 &amp;&amp; i &lt; a.length - 1) {
</code></pre>
</blockquote>

<p>Can be</p>

<pre><code>if (i === 0) {
    //... code
} else if (i &lt; a.length - 1) {  // already know i &gt; 0
</code></pre></li>
<li><p>Don't add comments that state the obvious (such as <code>// for 2nd - n-1th elements</code>)</p></li>
<li><p>Don't add unnecessary adverbs to names. For instance, <code>isAlreadyIncreasing</code> can be <code>isIncreasing</code>.</p></li>
</ul>

<h2>Logic and efficiency</h2>

<ul>
<li>Avoid repetitive indexing into arrays. Use local scoped variables to reduce the amount of indexing. Reduce the chance of typo errors and increase readability.</li>
</ul>

<p>Without changing the logic (it is flawed) the inner loop can be written as:</p>

<pre><code>for (i = 0; i &lt; a.length; i++) {
  const a0 = a[i], a1 = a[i + 1];
  const b0 = a[i], b1 = a[i + 1];
  if (i == 0) {
    if ((a0 &gt;= a1 &amp;&amp; b0 &lt; a1 &amp;&amp; a0 &lt; b1) || (b0 &gt;= b1 &amp;&amp; a0 &lt; b1 &amp;&amp; b0 &lt; a1)) {
      finalA.push(b0);
      finalB.push(a0);
      counter++;
    } else {
      finalA.push(a0);
      finalB.push(b0);
    }
  } else {
    const fa = finalA[i - 1]
    const fb = finalB[i - 1];
    if (i &lt; a.length - 1) {
      if (((b0 &gt;= b1 || b0 &lt;= fb) &amp;&amp; (a0 &lt; b1 &amp;&amp; a0 &gt; fb) &amp;&amp; 
      (b0 &lt; a1) &amp;&amp; b0 &gt; fa) &amp;&amp; ((a0 &gt;= a1 || a0 &lt;= fa) &amp;&amp; (b0 &lt; a1 &amp;&amp; b0 &gt; fa))) {
        finalA.push(b0);
        finalB.push(a0);
        counter++;
      } else {
        finalA.push(a0);
        finalB.push(b0);
      }
    } else {
      if ((a0 &lt;= fa &amp;&amp; b0 &gt; fa &amp;&amp; a0 &gt; fb) || (b0 &lt;= fb &amp;&amp; a0 &gt; fb &amp;&amp; b0 &gt; fa)) {
        finalA.push(b0);
        finalB.push(a0);
        counter++;
      } else {
        finalA.push(a0);
        finalB.push(b0);
      }
    }
  }
}
</code></pre>

<ul>
<li><p>Don't continue processing when a definite solution has been determined (<code>increaser([5,-3,6,4,8],[2,6,-5,1,0])</code>) at the second element. It can be deduced that both arrays cannot increase. Thus, the code should exit with a result. You can use <code>break</code> to exit from a loop.</p></li>
<li><p>Be aware of edge cases. Your code assumes that both arrays have content, but what happens if the arrays are empty or have only one item? Does your code still give the correct answer?</p></li>
<li><p>Try reduce the number of times you you touch each item of data. In the worst case you iterate over both arrays twice, but in many cases you need only iterate part of both arrays. For instance, <code>increaser([5,-3,6,4,8],[2,6,-5,1,0])</code> need only touch the first and second item of both arrays to know the result. You do 15 iterations, while only 2 are required.</p></li>
</ul>

<h2>Rewrite</h2>

<p>My brain is a little tender so there may be a much better solution.</p>

<p>The rewrite tries to reduce the amount of work by avoiding the initial test that determines if the arrays are increasing. A single <code>while</code> loop will do the same while testing for swaps.</p>

<p>As soon as it finds a condition that does not let both arrays increase (and there is no rollback option) then it terminates with the result -1.</p>

<p>There does not seem to be any reason to look ahead, but there does seem to be a need to rollback if swapping or keeping values both increase the arrays and later there is no solution. Hence, <code>rollback</code> keeps the first point that the iteration can roll back to if a solution does not work. (NOTE that <code>rollback</code> is always set to the first item). Also, <code>rollbackResult</code> keeps the number of swaps up until that points.</p>

<p>I have only tested on the inputs given and can't be bothered with more at the moment.</p>

<p>For arrays that differ in size or are empty this throws a range error, and if the length of the arrays are 1 then returns an undefined result as the question does not state what should happen in this case.</p>

<p>Your test for <code>increaser([5,3,7,7,10],[1,6,6,9,9])</code>. You have a result of 3, yet it can be done in 2 (No need to swap the first item):</p>

<pre><code>function increaser(arr1, arr2){
    var rollback, rollbackResult, result, i;
    if (arr1.length !== arr2.length || arr1.length === 0) { throw new RangeError("Bad input") }
    if (arr1.length === 1) {
        console.log("Question is ambiguous, the answer is undefined.")
        return;  // undefined result
    }

    const res1 = [], res2 = [];
    i = result = 0;

    while (i &lt; arr1.length) {
        const p1 = res1[i - 1], p2 = res2[i - 1];
        let a1 = arr1[i], a2 = arr2[i];
        const canSwap = i === 0 || (p1 &lt; a2 &amp;&amp; p2 &lt; a1);
        if (i === 0 || (p1 &lt; a1 &amp;&amp; p2 &lt; a2)) {
            if (rollback === undefined &amp;&amp; canSwap) { 
                rollback = i;
                rollbackResult = result;
            }
        } else if(canSwap) { 
            [a2, a1] = [a1, a2];
            result += 1;
        } else {
            if (rollback !== undefined) {
                res2.length = res1.length = i = rollback;
                a1 = arr2[i];
                a2 = arr1[i];
                rollback = undefined;
                result = rollbackResult + 1;
            } else {
                result = -1;
                break;
            }
        }
        res1.push(a1);
        res2.push(a2)
        i += 1;
    }
    return result;
}
</code></pre>
    </div>