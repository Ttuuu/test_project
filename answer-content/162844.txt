<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Let's take that step by step:</p>

<pre><code>def join(l, sep):
    out_str = ''
    for i, el in enumerate(l):
</code></pre>

<p>Here, why do you need the <code>enumerate</code>? You could write <code>for el in l:</code></p>

<pre><code>        out_str += '{}{}'.format(el, sep)
</code></pre>

<p><code>.format</code> is not super efficient, there are other methods. You can have a look at <a href="https://stackoverflow.com/questions/19926089/python-equivalent-of-java-stringbuffer">This question</a> for some researches and benchmarks on performances.</p>

<pre><code>    return out_str[:-len(sep)]
</code></pre>

<p>This makes little sense for <code>l = []</code> if <code>len(sep) &gt; 1</code>. <code>''[:-1]</code> is valid, and returns <code>''</code>, because python is nice, but it is not a very good way of getting around that limit case.</p>

<p>In general, adding something just to remove it at the end is not great.</p>

<p>Creating an <code>iter</code>, looking at the first value, then adding the rest, as it has been suggested in other answers, is much better.</p>

<p>I would also recommend writing some unit tests, so that you can then play around with the implementation, and stay confident that what you write still works.</p>

<p>Typically, you could write:</p>

<pre><code># Empty list
join([], '') == ''
# Only one element, -&gt; no separator in output
join(['a'], '-') == 'a'
# Empty separator
join(['a', 'b'], '') == 'ab'
# "Normal" case
join(['a', 'b'], '--') == 'a--b'
# ints
join([1, 2], 0) == '102'
</code></pre>
    </div>