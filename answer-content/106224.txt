<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This line is the source of your woes:</p>

<blockquote>
<pre><code>private static Stack&lt;Boolean&gt; st=new Stack&lt;Boolean&gt;();
</code></pre>
</blockquote>

<p>In particular, making the stack <code>static</code> is wrong.  The stack, and whatever is in it, persists across calls to <code>check()</code>.  So, <code>check(")))")</code> and <code>check("(((")</code> will each return <code>false</code> as expected, but if you then call <code>check(")))")</code>, it would return <code>true</code>!</p>

<p><code>java.util.Stack</code> is to be avoided.  It was the result of some poor design decisions back in JDK 1.0.  It extends <code>Vector</code>, which exposes methods that violate the stack abstraction.  Also, <code>Vector</code> methods are synchronized, which causes unnecessary overhead when thread safety is not needed.  <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Stack.html">As recommended in the JavaDoc</a>, use a <code>Deque</code> wherever you need a stack.</p>

<p>Furthermore, the items that you stuff into this stack (namely <code>Boolean.TRUE</code> objects) are completely ignored.  The only thing that matters is the size of the stack.  For that, you don't need a stack at all; a simple <code>int</code> counter will do.</p>
    </div>