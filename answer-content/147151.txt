<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You sort the cows, but you don't take advantage of the fact that they're sorted.  Instead of iterating over the cows multiple times (which leads to \$\mathcal{O}(n^2)\$ time w.r.t. the number of cows), iterate over the sorted list once.</p>

<p>Unfortunately, I can't think of an easy way to do this using Python's built-in data structures.  However, if we assume that <code>CowTupleList</code> is some list-like datastructure that has \$\mathcal{O}(\log{n})\$ or better performance for all operations (including <code>del</code>), then we can use binary search to find the largest cow that will fit in a cart's remaining capacity:</p>

<pre><code>def greedy_cow_transport(cows,limit=10):
  # Sort cows from largest to smallest
  CowTupleList = sorted(cows.items(), key=lambda x: x[1], reverse = True)

  while CowTupleList:
    # Add first (largest) cow to a new cart
    name,weight = CowTupleList[0]
    cart = [name]
    remaining_capacity = limit - weight

    # Remove first cow from list
    del CowTupleList[0]

    # Find largest remaining cow that fits in remaining capacity (if any)
    idx = find_largest_fitting(CowTupleList, remaining_capacity)
    while idx is not None:
      # Add the cow at idx to the cart
      name,weight = CowTupleList[idx]
      cart.append(name)
      remaining_capacity -= weight

      # Remove cow at idx from list
      del CowTupleList[idx]

      # Find largest remaining cow that fits (if any)
      idx = find_largest_fitting(CowTupleList, remaining_capacity)

    # No more cows fit =&gt; yield the cart
    yield cart
</code></pre>

<p>Assuming <code>find_largest_fitting</code> is implemented as a binary search over <code>CowTupleList</code> (and an appropriate data structure is chosen for <code>CowTupleList</code>), this should take \$\mathcal{O}(n\log{n})\$ time.  If linear search is used for <code>find_largest_fitting</code> and/or Python's build-in list type is used for <code>CowTupleList</code> (so that <code>del</code> operates in \$\mathcal{O}(n)\$), then this algorithm will operate in \$\mathcal{O}(n^2)\$ time.</p>
    </div>