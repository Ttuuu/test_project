<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2><code>void main()</code> is not portable</h2>

<p>Although it "works" in a lot of cases, the only two portable definitions of <code>main</code> are:</p>

<pre><code>int main(void)
</code></pre>

<p>and</p>

<pre><code>int main(int argc, char **argv)
</code></pre>

<h2>Error checking</h2>

<p>You don't check the return value of <code>scanf</code>.</p>

<p>This would be better:</p>

<pre><code>if(scanf("%d", &amp;n) != 1)
{
    fputs("Error; enter a number.", stderr);
    return EXIT_FAILURE; /* entering a letter will cause infinite loop so error out here */
}
</code></pre>

<p>Note that <code>EXIT_FAILURE</code> requires <code>stdlib.h</code> to be included.</p>

<h2>Out-of-bounds write</h2>

<p>If a user enters a <code>0</code> or a number greater than <code>9</code> in the <code>scanf</code> mentioned above, this line will write outside of the array bounds:</p>

<pre><code>    TOT[n-1]=a;
</code></pre>

<p>This can cause a segmentation fault.</p>

<h2>Spelling</h2>

<p>There are a couple spelling errors in this code:</p>

<blockquote>
  <p>cheak -&gt; check<br>
  tern -&gt; turn</p>
</blockquote>

<h2>Formatting</h2>

<p>There are a few issues with formatting here; first of all, each line in a function should be indented by at least 4 spaces. In addition, you should put spaces after commas  in function calls, and around most (if not all) operators.</p>

<h2>Portability</h2>

<p>Although <code>clrscr</code> and <code>getch</code> work with Windows and DOS, I would suggest simply removing <code>clrscr</code> and replacing <code>getch</code> with <code>getchar</code>. This makes your code portable to the point where it can run on most other systems.</p>

<h2>Non-descriptive variable names</h2>

<p>At first glance, I don't know what <code>t</code>, <code>T</code>, <code>TOT</code>, <code>a</code>, <code>i</code>, <code>n</code>, <code>r</code>, or <code>p</code> are for. The variable names should describe what they contain.</p>

<h2>Spacing</h2>

<p>Although the board is nice, the prompt to the user isn't. I would suggest something like this:</p>

<pre><code>    printf("\n\n\nPlayer 1 = X\nPlayer 2 = O");
    printf("\nPlayer %d's turn.",p);
    printf("\n\nEnter a number: ");
</code></pre>

<p>...</p>

<pre><code>    if(r == 1 || r == 2)
    {
        board(TOT);
        printf("\nPlayer %d wins!", r);
        break;
    }
</code></pre>

<h2>Misc.</h2>

<p><code>p</code> is already 1 here. You don't need to set it again:</p>

<pre><code>    else
        {
        p=1;
        }
</code></pre>
    </div>