<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is pretty nice looking code. Just some small suggestions:</p>

<p>You use <code>map</code> quite a bit here. While it certainly has its place, I've found that it's often better to use <a href="https://clojuredocs.org/clojure.core/mapv" rel="nofollow noreferrer"><code>mapv</code></a> instead. <code>map</code> is lazy and returns a <code>LazyList</code>, while <code>mapv</code> is strict and returns a vector.</p>

<p>It's like the difference between a generator expression and a list comprehension in Python. If you need laziness, then good, use the lazy version. Often though, the production of a lazy list has so much overhead that the strict version performs better. Play around with it and see.</p>

<hr>

<pre><code>(reduce + num-files)
</code></pre>

<p>can also be written as</p>

<pre><code>(apply + num-files)
</code></pre>

<p><code>+</code> has a var-arg overload that is essentially a reduction. I seem to recall though that the latter has the potential to perform slightly better. Just a heads up.</p>

<hr>

<p>In <code>priors</code>, I'd maybe do a empty check on <code>classes</code> at the beginning. If <code>classes</code> is empty, <code>(/ %1 (reduce + num-files)</code> will cause an exception.</p>

<hr>

<pre><code>((fnil inc 0) (get bow w))
</code></pre>

<p>This can make use of <code>get</code>'s third argument to default to 0, which gets rid of the need for <code>fnil</code>:</p>

<pre><code>(inc (get bow w 0))
</code></pre>

<p>I think that reads better.</p>

<hr>

<p>In <code>tokenize</code>, you're using <code>as-&gt;</code> because of a single call at the bottom that needs the threaded argument in the first position instead of the last. Honestly, I think I'd just adjust that one call instead of using <code>as-&gt;</code> instead of <code>-&gt;&gt;</code>:</p>

<pre><code>(defn tokenize [text]
  (-&gt;&gt; text
       (s/trim)
       (filter #(or (Character/isSpace %) (Character/isLetterOrDigit ^Character %)))
       (apply str)
       (s/lower-case)
       (#(s/split % #"\s+"))  ; Wrapped in in another function
       (into [])))
</code></pre>

<p>That's just a personal suggestion. I find that <code>as-&gt;</code> rarely helps readability, and most times that it's needed, it's the wrong solution anyways.</p>
    </div>