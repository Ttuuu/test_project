<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>        var frameStartSequenceBuffer = new byte[] { 0xCA, 0xCB, 0xCC, 0xCD };
</code></pre>
</blockquote>



<blockquote>
<pre><code>        var frameEndSequenceBuffer = new byte[] { 0xEA, 0xEB, 0xEC, 0xED };
</code></pre>
</blockquote>

<p>I would consider pulling these out of the method as <code>private static readonly IReadOnlyList&lt;byte&gt;</code>. That guarantees that you (or the maintainer after you) can't mix up <code>frameStartSequenceBuffer</code> and <code>startSequenceBuffer</code> and write to the wrong one.</p>

<hr>

<blockquote>
<pre><code>        while (read &lt; startSequenceBuffer.Length)
        {
            read += memoryStream.Read(startSequenceBuffer, 0, startSequenceBuffer.Length);

            if (Helpers.ByteArrayCompare(startSequenceBuffer, frameStartSequenceBuffer))
                break;
        }
</code></pre>
</blockquote>

<p>Should the loop guard be <code>read &lt; memoryStream.Length</code>?</p>

<p>Are the sequences guaranteed to be offset by a multiple of 4 bytes?</p>

<p>What if the stream is only 3 bytes long?</p>

<p>As a side note, <code>MemoryStream</code> guarantees to read as many bytes as requested unless there aren't enough. Other <code>Stream</code> implementations might read less than requested even though they're not exhausted. It's handy to have an extension method which uses a loop to read the number of bytes requested or throw an exception if the end of the stream is reached first.</p>

<hr>

<blockquote>
<pre><code>        while (memoryStream.Capacity &gt; read)
        {
            read += memoryStream.Read(frameChecksumBuffer, 0, frameChecksumBuffer.Length);
            read += memoryStream.Read(endSequenceBuffer, 0, endSequenceBuffer.Length);

            if (Helpers.ByteArrayCompare(endSequenceBuffer, frameEndSequenceBuffer))
                break;
</code></pre>
</blockquote>

<p>The scope of <code>endSequenceBuffer</code> is this loop, so you could declare it inside the loop.</p>

<hr>

<blockquote>
<pre><code>            var readPayload = frameChecksumBuffer.Concat(endSequenceBuffer).ToArray();
            var messageBuffer = new byte[3 + endSequenceBuffer[1]];

            readPayload.CopyTo(messageBuffer, 0);
</code></pre>
</blockquote>

<p>Would it not be simpler to declare <code>messageBuffer</code> and then copy <code>frameChecksumBuffer</code> and <code>endSequenceBuffer</code> into the appropriate offsets rather than using Linq?</p>

<hr>

<blockquote>
<pre><code>        var calculatedChecksum = Helpers.CalculateChecksumBitwise(messages.SelectMany(o =&gt; o).Concat(frameChecksumBuffer).ToArray());
</code></pre>
</blockquote>

<p><code>ToArray()</code> does a lot of copying. Maybe make <code>CalculateChecksumBitwise</code> take <code>IEnumerable&lt;byte&gt;</code> rather than <code>byte[]</code> so that you can pass the lazy enumerable.</p>

<p>Alternatively, maybe instead of using <code>MemoryStream</code> and copying chunks of it into <code>byte[]</code> you could refactor the whole method to take a <code>byte[]</code> and select chunks of it as <code>ArraySegment&lt;byte&gt;</code>. Then <code>CalculateChecksumBitwise</code> could also take <code>ArraySegment&lt;byte&gt;</code> and all the copying can be eliminated.</p>

<hr>

<blockquote>
<pre><code>        if (calculatedChecksum != frameChecksumBuffer[0])
        {
            Console.WriteLine("Messages: {0} - Corrupt", messages.Count);
            return;
        }
</code></pre>
</blockquote>

<p>Hang on. The checksum calculation includes <code>frameChecksumBuffer</code>, so the only way it could pass this check is if the messages themselves sum to <code>0</code>.</p>

<hr>

<blockquote>
  <p>Each TCP packet from the sensor encapsulates an array of (n) messages delimited with a 3 bytes headers.</p>
</blockquote>

<p>Two things. I assume that's a typo for 4 byte headers. And does the layer above this one handle packet fragmentation?</p>
    </div>