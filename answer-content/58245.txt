<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Sometimes math can be confusing, sometimes it can help, but, using some math, the solution to this problem is:</p>

<pre><code>public static final int getSurvivingGunman(int startCount) {
    return 1 + (startCount - Integer.highestOneBit(startCount)) * 2;
}
</code></pre>

<p>Your main method would look like:</p>

<pre><code>public static void main (String[] args) {
    System.out.println(getSurvivingGunman(100));
}
</code></pre>

<p>Which produces:</p>

<pre><code>73
</code></pre>

<p>Now, as to why it works, consider the problem:</p>

<ul>
<li>If there are exactly 2 gunman, then 1 is the survivor.</li>
<li>If there are exactly 4 gunman, then after the first round, there are two gunman, and again 1 survives.</li>
<li>if the number of gunman is an exact power of 2, then the survivor is gunman 1.</li>
</ul>

<p>That's easy, but, what about other sizes.... </p>

<p>All powers of 2 are even (after 2<sup>0</sup>), so, if you add a single gunman, the first 'round' will be odd, and the last gunman will shoot the first gunman, which means the <em>next</em> round will start from gunman 2, which, in effect, skips ahead two.</p>

<p>Essentially, for each gunman after the previous power of 2, the surviving gunman is 2 ahead.</p>

<p>Java makes finding the previous power of 2 easy with the <code>Integer.highestOneBit(int)</code> function, and the rest is easy.</p>

<p>If you run it with the main method:</p>

<pre><code>public static void main(String[] args) {
    for (int start = 0; start &lt;= 100; start++) {
        System.out.printf("%3d gunmen has %3d survivor%n", start, getSurvivingGunman(start));
    }
}    
</code></pre>

<p>the pattern is more obvious.</p>

<p>Also, since the algorithm is \$O(1)\$ time complexity, you can do things like:</p>

<pre><code>    for (int start = 10; start &lt;= 1000000000; start *= 10) {
        System.out.printf("%3d gunmen has %3d survivor%n", start, getSurvivingGunman(start));
    }
</code></pre>

<p>and get the results (fast):</p>

<pre><code> 10 gunmen has   5 survivor
100 gunmen has  73 survivor
1000 gunmen has 977 survivor
10000 gunmen has 3617 survivor
100000 gunmen has 68929 survivor
1000000 gunmen has 951425 survivor
10000000 gunmen has 3222785 survivor
100000000 gunmen has 65782273 survivor
1000000000 gunmen has 926258177 survivor
</code></pre>
    </div>