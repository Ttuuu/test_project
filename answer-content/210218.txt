<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Editor Options</h2>

<p>The first thing that I would recommend is adjusting your VBEditor options.</p>

<p>Checking <code>Require Variable Declaration</code> will automatically put <code>Option Explicit</code> at the top of newly created code modules.  This makes it easier to clean up code as you modify it and catch undeclared variables, such as, <code>PropRow</code>.</p>

<p>Unchecking <code>Auto Syntax Check</code> will prevent the <code>Syntax Error</code> MsgBox from appearing will you are writing your code.  You will still know that there is a syntax error because the text is red but you will not have to stop to click the message.</p>

<p><a href="https://i.stack.imgur.com/D25Kl.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/D25Kl.png" alt="VBE Options"></a></p>

<p>Download <a href="https://rubberduckvba.wordpress.com/2017/10/25/userform1-show/" rel="nofollow noreferrer">Rubberduck VBA: UserForm1.Show</a> and use it's code formatting tool.  This tool will not only save a ton of time in formatting but will help catch unclosed blocks of code.</p>

<h2>Data Typing</h2>

<p>Using the correct data type is crucial to writing solid code.  It will prevent unintended  bugs from creeping in and improve the overall performance of the code.  <code>TheDay</code> should be typed as Long because it will always be an Integer.  Note: There is no advantage to using a smaller data type, such as: Byte or Integer.  It looks like <code>TheUnit</code> should probably be long also bit that might because of the dummy data.</p>

<h2>Dynamic Ranges</h2>

<p>Using Dynamic Ranges <code>Range("E2", Range("E" &amp; Rows.Count).End(xlUp))</code> over staatic ranges <code>Set StartDate = Range("E2:E1000")</code> will prevent you from having to update the code as rows are added and optimize the code as the rows are deleted.</p>

<h2>Loops</h2>

<p>If you are going to iterate over each cells in the range then you should use the <code>Cell</code> object.  Resolving the <code>Cell</code> is not free.  It is causing the CPU to do extra work.</p>

<blockquote>
<pre><code>For Each Cell In startDate
</code></pre>
</blockquote>

<p>Here is how you should use this loop:</p>

<blockquote>
<pre><code>    Set dateStartCell = Cell.Offset(0, 4).Value
    Set dateEndCell = Cell.Offset(0, 6).Value
</code></pre>
</blockquote>

<p>Otherwise just use a standard <code>For Loop</code>.</p>

<blockquote>
<pre><code>For r  = 2 to Range("E" &amp; Rows.Count).End(xlUp).Row
</code></pre>
</blockquote>

<p>In many cases it makes sense to have another function return a collection and iterate over it.  After all, the fewer tasks that a subroutine performs the easier it is to test.  This is not one of those cases.</p>

<blockquote>
<pre><code>For Each currentDateSter In allDates
</code></pre>
</blockquote>

<p>Basically, all the collection is used for is to start an iteration at the start date and add 1 to until you reach the end date.  Not only can this be accomplished a lot cheaper by using a standard <code>For Loop</code> but it makes the more condense and easier to read.</p>

<blockquote>
<pre><code>For dateOf = dateStartCell.Value to dateEndCell.Value
</code></pre>
</blockquote>

<h2>Selecting and Activating</h2>

<p>It is rarely necessary to <code>Select</code> or <code>Activate</code> an Object.  It is much better to fully qualify your Objects and refer to them directly.  This is the biggest slow down in your code. </p>

<p>Watch: <a href="https://www.youtube.com//watch?v=c8reU-H1PKQ&amp;index=5&amp;list=PLNIs-AWhQzckr8Dgmgb3akx_gFMnpxTN5" rel="nofollow noreferrer">Excel VBA Introduction Part 5 - Selecting Cells (Range, Cells, Activecell, End, Offset)</a></p>

<h2>If Statements</h2>

<p>I prefer to make direct boolean assignments over the bulkier <code>If</code> blocks.</p>

<blockquote>
<pre><code>Test1 = TheDay = Day(currentDate) And TheUnit = Unit
Test2 = TheDay = TheUnit
</code></pre>
</blockquote>

<p><code>Test2</code> is misleading.  Its true function is to test whether or not <code>Cells(AdvRow, 2)</code> is empty.</p>

<p><code>Test1</code> and <code>Test2</code> are not very descriptive names.  I would prefer <code>dataMatched</code> and <code>emtpyRow</code> but would have eliminated both variables by using the code below.</p>

<blockquote>
<pre><code>Loop Until (TheDay = Day(currentDate) And TheUnit = Unit) Or Cells(AdvRow, 2) = ""
</code></pre>
</blockquote>

<h2>Raw Data: Deleted Rows</h2>

<p>Deleted  rows in the Raw Data will not reflect in the monthly reports.  This could lead to big problems and should be addressed.</p>

<h2>Refactored Code</h2>

<p>This code ran 95% faster the the original.  The code could further be improved by using arrays for each month's data but that is way outside the scope of this website.</p>

<pre><code>Sub Program2()
    Dim t As Double: t = Timer
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual

    Dim data As Variant
    With Worksheets("Raw")                            'Load the data into an Array
        data = .Range("A2:N2", .Cells(.Rows.Count, "E").End(xlUp)).Value
    End With

    Dim dateOf As Date
    Dim r1 As Long

    For r1 = 1 To UBound(data)
        For dateOf = data(r1, 5) To data(r1, 7)
            Dim wsMonth As Worksheet, wsName As String

            If wsName &lt;&gt; Format(dateOf, "mmmyyyy") Then
                wsName = Format(dateOf, "mmmyyyy")
                Set wsMonth = Worksheets(wsName)
            End If

            With wsMonth
                Dim r2 As Long
                For r2 = 4 To .Cells(.Rows.Count, "A").End(xlUp).Row + 1
                    Dim TheDay As Long
                    Dim TheUnit As Long
                    Dim Pax As String
                    TheDay = Day(dateOf)
                    TheUnit = data(r1, 2)
                    Pax = data(r1, 12)
                    If (.Cells(r2, 1).Value = TheDay And .Cells(r2, 2).Value = TheUnit) Then
                        .Cells(r2, 3).Value = Pax
                        Exit For
                    ElseIf .Cells(r2, "A").Value = "" Then
                        .Cells(r2, 1).Value = TheDay
                        .Cells(r2, 2).Value = TheUnit
                        .Cells(r2, 3).Value = Pax
                        Exit For
                    End If
                Next
            End With
        Next
    Next
    Application.Calculation = xlCalculationAutomatic
    Application.ScreenUpdating = True
    Debug.Print Round(Timer - t, 2)
End Sub
</code></pre>

<h2>Addendum</h2>

<p>In order to speed up the code I would use arrays to write the data to each month in one operation and dictionaries because of their lightning fast look-up speed.  These references will help:</p>

<ul>
<li><a href="https://www.youtube.com//watch?v=dND4coLI_B8&amp;index=43&amp;list=PLNIs-AWhQzckr8Dgmgb3akx_gFMnpxTN5" rel="nofollow noreferrer">Excel VBA Introduction Part 39 - Dictionaries</a></li>
<li><a href="https://www.youtube.com//watch?v=h9FTX7TgkpM&amp;index=28&amp;list=PLNIs-AWhQzckr8Dgmgb3akx_gFMnpxTN5" rel="nofollow noreferrer">Excel VBA Introduction Part 25 - Arrays</a></li>
</ul>
    </div>