<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Bug</h3>

<p>There's a bug in <code>delMax</code>:</p>

<blockquote>
<pre><code>const mx = this.queue[1];
this.queue[1] = this.queue.pop();
if (!this.isEmpty()) {   
    this.sink(1);
}
return mx;
</code></pre>
</blockquote>

<p>What will happen when the heap has 1 element? The code will:</p>

<ul>
<li>Replace the first element with itself (the last element)</li>
<li>It doesn't become empty</li>
</ul>

<p>In other words, the last element cannot be deleted.</p>

<h3>Avoid hacky solutions</h3>

<p>This code happens to work, but it's hacky:</p>

<blockquote>
<pre><code>while ( 2*k &lt;= this.n() ) {
    const c1 = 2*k; 
    const c2 = 2*k + 1;
    const j = this.more(c1,c2)?c2:c1;
</code></pre>
</blockquote>

<p>What's wrong with it? When <code>2*k == this.n()</code>, then <code>c2</code> will point past the end of the queue, and <code>more</code> will compare <code>queue[c1]</code> with <code>undefined</code>, and always return <code>false</code>. The code works, but it would be better to not rely on numeric comparisons with <code>undefined</code>.</p>

<h3>Look for generalization opportunities</h3>

<p>It's a good idea to use a function to decide the ordering of elements, similar to what you did with <code>less</code> and <code>more</code>. This could open the opportunity to make the implementation work with arbitrary ordering.</p>

<p>The current implementation doesn't make it easy to pass in these functions to customize the behavior. It would be good to make that possible. And it would be even better to make it work with a single function, let's say <code>less</code>.</p>

<p>If you do that, then you should rename some methods, since <code>max</code> and <code>delMax</code> won't make sense for a min-heap ordering. You could rename these to <code>peek</code> and <code>pop</code>.</p>

<h3>Hide implementation details</h3>

<p>The class exposes many methods that are unnecessary for users:
<code>swim</code>, <code>sink</code>, <code>less</code>, <code>more</code>, <code>exch</code>, <code>flr</code>.
These are implementation details, and it would be best to hide them.</p>

<h3>Drop the unnecessary trick</h3>

<p>This trick:</p>

<blockquote>
<pre><code>/**
 * We initialize index 0 because, calculations for finding 
 * children of a node and the parent of a node is easier 
 * parent = [ k/2 ], children: [ k*2, k*2+1 ]
 */
</code></pre>
</blockquote>

<p>Looks completely unnecessary... I don't see a reason whatsoever why the dummy first element helps. You can eliminate it, and the implementation will be simpler and clearer.</p>

<h3>Dividing by 2</h3>

<p>I'm not sure if this is recommended in JavaScript world,
but instead of <code>Math.floor(x / 2)</code>,
<code>x &gt;&gt; 1</code> feels cleaner.</p>

<h3>Naming</h3>

<p>Some method names could be improved:</p>

<ul>
<li><code>exch</code> -&gt; <code>swap</code></li>
<li><code>n</code> -&gt; <code>size</code></li>
<li><code>insert</code> -&gt; <code>add</code></li>
<li><code>flr</code> -&gt; <code>floor</code>, or instead of always calling it with <code>flr(k / 2)</code> you could name it <code>childIndex</code> and call it with <code>k</code>, letting it do the necessary math</li>
<li><code>flr</code> uses parameter <code>i</code>. The name <code>i</code> is best in simple counting loops.</li>
</ul>
    </div>