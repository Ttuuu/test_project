<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Legacy C-style headers</h1>

<p>These:</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;time.h&gt;
</code></pre>

<p>are deprecated. Instead, use the C++-style headers:</p>

<pre><code>#include &lt;cstdio&gt;
#include &lt;cstdlib&gt;
#include &lt;ctime&gt;
</code></pre>

<p>And prefix all the calls to the C functions with <code>std::</code>.</p>

<h1>Possibility for scoped <code>enum</code> usage</h1>

<p>You can use <code>enum class Occupant</code> to scope your <code>enum</code>. This way you can possibly reuse the names of the <code>enum</code>'s members elsewhere (not that you would want to do that). You will be able to access the <code>enum</code> using <code>Room::Occupant::&lt;member&gt;</code>, like you already do in a lot of cases.</p>

<h1>Inlining</h1>

<p>You have made a lot of the relatively simple functions that aren't one-liners external. For performance reasons, you may consider defining these inside the <code>class</code>, where they will be inlined into the code.</p>

<h1>Use range-<code>for</code> loops consistently, and with <code>auto</code></h1>

<p>In some places I see you not using range-<code>for</code> loops at all:</p>

<pre><code>for (int i = 0; i &lt; rooms.size(); ++i)
    if (rooms[i].connections.size() &lt; 3) return false;
</code></pre>

<p>while in others you're not using <code>auto</code> and instead being explicit:</p>

<pre><code>for (Room* connection : connections)
    if (connection-&gt;rn == i) return true;
</code></pre>

<p>Both of these should work great with range-<code>for</code> loops and <code>auto &amp;</code>:</p>

<pre><code>for (auto&amp; r : rooms)
   if (r.connections.size() &lt; 3) return false;
</code></pre>

<p>and:</p>

<pre><code>for (auto &amp;connection : connections)
    if (connection-&gt;rn == i) return true;
</code></pre>

<h1>Don't use <code>std::endl</code> when you don't need to</h1>

<p>There's no reason for you to explicitly flush the streams. A simple newline (<code>\n</code>) would do.</p>

<h1>Portability</h1>

<p>These:</p>

<pre><code>system("PAUSE");
system("CLS");
</code></pre>

<p>are not portable. Instead, you can use this for <code>system("PAUSE")</code>:</p>

<pre><code>std::cout &lt;&lt; "Press any key to continue . . .\n";
std::cin.get();
</code></pre>

<p>and just remove <code>system("CLS");</code> altogether. I'd rather not have my screen cleared when playing a game.</p>
    </div>