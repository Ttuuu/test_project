<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Project Structure</h1>

<ul>
<li><blockquote>
  <p>I need to use the structures I created in sibstructures in multiple, disparate places in the repository I'm working on, and so I concluded that the best solution would be to make sibstructures into a custom package by copying it into ~/.local/lib/python3.6 - that path being specific to Linux. (If you know of a better solution, I'd very much like to learn about it.)</p>
</blockquote>

<p>This is good, you've correctly setup a Python package so that it runs correctly. You however have manually deployed the package. Now there's the motto "if it ain't broke, don't fix it", and I feel that can come into play here. If you're happy with this as a solution, you do you.</p>

<p>However if you may want to create <a href="https://packaging.python.org/tutorials/packaging-projects/" rel="nofollow noreferrer">a setuptools package</a> to be able to deploy your script easier.</p>

<ul>
<li><p><strong>Solo</strong>: If you're a solo developer, then you won't see too many benefits from utilizing setuptools packages in their intended way. It does however allow you to use the following commands to install your package.</p>

<pre><code>$ python -m pip install /path/to/sibstructures
</code></pre></li>
<li><p><strong>Team</strong>: Given how basic Python's packaging hosting infrastructure is, you can <a href="https://packaging.python.org/guides/hosting-your-own-index/" rel="nofollow noreferrer">host your own private PyPI repository</a>. And with a small change to <a href="https://pip.pypa.io/en/stable/user_guide/#config-file" rel="nofollow noreferrer">your pip config</a> changing <code>index-url</code> to your host. Then you can install using pip easily.</p>

<pre><code>$ python -m pip install sibstructures
</code></pre></li>
</ul>

<p>So again, if you're happy with what you have, you do you. But you may find changing to how the Python eco-system works easier. After the initial setup.</p></li>
<li><p>You're method of testing isn't really standard. There's nothing wrong with this, but using tools like pytest or <code>unittest</code> give nicer output, and allow greater separation of your project.</p>

<p>Since all of your tests start with <code>test_</code> and you're using <code>assert</code> to test your code, migrating to <a href="https://docs.pytest.org/en/latest/" rel="nofollow noreferrer">pytest</a> would be a doddle.</p>

<p>I have previously written two answers highlighting how to utilize pytest. <a href="https://codereview.stackexchange.com/a/234109">The first is a very basic method</a>, where <a href="https://codereview.stackexchange.com/a/229644">the second utilizes tox</a>. I would highly recommend reading both, and utilizing tox where possible.</p></li>
</ul>

<p>I'm not bashing on you rolling your own package management or testing. The way you've done it is pretty decent. However I know I benefit from the above tools, and so I'm sure they will help you too.</p>

<h1>Code Review</h1>

<ul>
<li><p>I suggest installing a linter, like <a href="http://flake8.pycqa.org/en/latest/" rel="nofollow noreferrer">flake8</a> or <a href="https://prospector.readthedocs.io/en/master/" rel="nofollow noreferrer">Prospector</a>. Your code is almost very Pythonic, but there are some minor aspects that are preventing you from being there.</p>

<p>You may like a hinter, like <a href="https://black.readthedocs.io/en/latest/" rel="nofollow noreferrer">black</a>, to automatically change your code to be more compliant. However I would recommend installing a linter even if you have a hinter as a hinter can't fix everything.</p></li>
<li>With Python it's an industry standard to indent to 4 spaces. In all my time here it has been very rare for me to not see 4 spaces being used.</li>
<li><p>Your comments before the classes or functions would be better as <a href="https://en.wikipedia.org/wiki/Docstring#Python" rel="nofollow noreferrer">docstrings</a>. This is because tools like <a href="https://www.sphinx-doc.org/en/master/" rel="nofollow noreferrer">Sphinx</a> can read them and convert them into documentation.</p>

<p>Most programs in the Python ecosystem use Sphinx. Most of the above links to the different packages are websites that Sphinx created.</p></li>
<li><p>For <code>load_floorplan_from_plain_text</code>:</p>

<ul>
<li>The function is fairly cluttered. you don't need <code>max_layers_tuple</code> when you could just use <code>sheet_columns.append(tuple(max_layers))</code> which is one character longer. This is a hindrance to the readability of your code.</li>
<li>I have a personal distaste for <code>var_list</code> and <code>var_tuple</code>. If you have to specify the type then you're doing something wrong.</li>
<li>After <code>i = 0</code>, <code>i</code> never changes. This means all your <code>Column</code>s have the same letter.</li>
<li>You can better describe the function as three comprehensions.</li>
</ul>

<p></p>

<pre><code>def load_floorplan_from_plain_text(self, plain_text):
    """Load a map of this coldstore (when empty) from plain text."""
    lines = plain_text.split("\n")
    no_of_columns = len(lines[0].split(" "))
    sheet_columns = [
        [
            int(line.split(" ")[i])
            for line in lines
        ]
        for i in range(no_of_columns)
    ]
    self.columns = [
        Column('a', item)
        for item in sheet_columns
    ]
</code></pre>

<ul>
<li>If you split <code>plain_text</code> so that it is a 2d array by default then you can simplify the creation of the columns.</li>
<li>You can also merge the comprehensions for <code>sheet_columns</code> and <code>self.columns</code> as the content is the same.</li>
</ul></li>
<li><p>Since the function names in <code>load_floorplan_from_db</code> are rather long I would just enter the arguments on the next lines, rather than having people read the text on the other side of the monitor.</p></li>
<li>In <code>execute_drop</code> I would use a guard to error so the happy path is always the outermost level it can be.</li>
<li><code>remove_box_by_epc</code> could be better described as a comprehension and <code>any</code>.</li>
<li>Always use <code>is</code> when comparing to <code>None</code>.</li>
<li>You can use <code>enumerate</code> to get the current index and the item.</li>
<li><p>You can use f-strings or <code>str.format</code> to format strings. Rather than using <code>+</code> and <code>str</code> manually.</p>

<pre class="lang-py prettyprint-override"><code>&gt;&gt;&gt; foo = 'foo'
&gt;&gt;&gt; f'{foo} bar'
'foo bar'
&gt;&gt;&gt; f'{} bar'.format(foo)
'foo bar'
</code></pre></li>
<li><p>Your class <code>Coldstore_Printer</code> should be a static class where you only have one public method <code>print</code>.</p>

<pre class="lang-py prettyprint-override"><code>&gt;&gt;&gt; Coldstore_Printer.print(coldstore)
...
</code></pre></li>
<li><p>You should merge <code>Printed_Spot</code> into <code>Coldstore_Printer</code> as it can be defined in less than ten lines in a function.</p></li>
<li>The <code>spots</code> value of the <code>Column</code> class can just be a dictionary. Since you only want to look up by the spot id.</li>
<li>You could make a class or function to more easily build spots.</li>
<li><p>You should only instantiate <code>Coldstore</code> with all the data it needs. Delayed initialization is janky and can lead to some really crippling errors. To ensure your function is correctly setup you can utilize <code>classmethods</code> to run before <code>__init__</code>. Now to create the class you use:</p>

<pre class="lang-py prettyprint-override"><code>coldstore = Coldstore.from_db(code, data_storage.fetch_local_specifics())
</code></pre></li>
<li><p>I think your code has some more problems, as I don't think you're using datatypes or classes in the best way. But I can't check and I've changed enough of your code.</p></li>
</ul>

<p><sub><strong>Note</strong>: Not tested, and only provided as an example.</sub></p>

<pre class="lang-py prettyprint-override"><code>### This code defines a class, which models a potato coldstore.

# Imports.
import time

# Custom imports.
from sibstructures import sibconstants
from sibstructures import data_storage
from sibstructures import layer_colours
from sibstructures.box import Box
from sibstructures.spot import Spot
from sibstructures.numerals import to_roman, to_arabic

# Local constants.
max_tickets = 100


class Coldstore:
    def __init__(self, code, columns, headlands):
        self.code = code
        self.columns = {column.letter: column for column in columns}
        self.headlands = headlands
        self.ticket_machine = Ticket_Machine()
        self.outstanding = {}
        self.outstanding_recommendations

    @classmethod
    def _load_floorplan(cls, plain_text):
        """Load a map of this coldstore (when empty) from plain text."""
        data = [
            row.split(" ")
            for row in plain_text.split("\n")
        ]
        return [
            Column(
                'a',
                [int(row[i]) for row in data]
            )
            for i in range(len(data[0]))
        ]

    @classmethod
    def _load_headlands(cls, no_of_spots, max_layers):
        """Load the headlands of this coldstore from two integers."""
        return spots_from_layers([max_layers] * no_of_spots)

    @classmethod
    def from_db(cls, code, data):
        """Load a coldstore's floorplan from the database."""
        if data is None:
            raise Exception("No local specifics to load.")

        return cls(
            code,
            columns=cls._load_floorplan(
                data["floorplan"],
            ),
            headlands=cls.load_headlands_from_arguments(
                data["headlands_spots"],
                data["headlands_maxlayers"],
            ),
        )

    def execute_drop(self, epc, column_letter, row_numeral):
        """Executes the delivery of a box to a given column, and logs the same."""
        box = Box(epc, None)
        column = self.columns[column_letter]
        spot = column.spots[row_numeral]
        if not spot.add_one(box):
            raise Exception(
                f"It should be impossible to add a box at "
                f"column={column_letter}"
                f", row={row_numeral}."
            )
        data_storage.commit_drop(
            epc,
            column_letter,
            spot.row_id,
            int(time.time()),
        )

    def execute_entry(self, epc, timestamp):
        """Take action upon detecting a given EPC entering this coldstore."""
        data_storage.add_entry_log(epc, timestamp)
        self.issue_recommendation(epc)

    def execute_exit(self, epc, timestamp):
        """Take action upon detecting a given EPC leaving this coldstore."""
        data_storage.add_exit_log(epc, timestamp)
        return self.remove_box_by_epc(epc)

    def issue_recommendation(self, epc):
        """
        Add a recommendation to the list, given that a specific EPC was detected
        entering this coldstore.
        """
        rec = self._issue_recommendation(epc)
        self.outstanding[rec.ticket] = rec

    def _issue_recommendation(self, epc):
        ticket = self.ticket_machine.issue_ticket()
        for letter in data_storage.fetch_permitted_columns(epc):
            column = self.columns[letter]
            for spot in column.spots.values():
                if spot.has_room():
                    return Recommendation(
                        ticket,
                        epc,
                        letter,
                        spot.row_id,
                    )
        return Recommendation(
            ticket,
            epc,
            None,
            None,
        )

    def remove_box_by_epc(self, epc):
        """Remove a box with a given EPC from this coldstore, if possible."""
        return any(
            spot.remove_one(epc)
            for column in self.columns.values()
            for spot in column.spots.values()
        )

    def follow_recommendation(self, ticket):
        """Follow up on an outstanding recommendation."""
        rec = self.outstanding[ticket]
        if rec.column_letter is None:
            raise Exception("Cannot follow a void recommendation.")

        self.execute_drop(rec.epc, rec.column_letter, rec.row_numeral)
        self.cancel_recommendation(ticket)

    def cancel_recommendation(self, ticket):
        """Cancel a given outstanding recommendation."""
        self.outstanding.pop(ticket)
        self.ticket_machine.return_ticket(ticket)

    def override_recommendation(self, ticket, column_letter, row_numeral):
        """
        Cancel a given outstanding recommendation, and do something else with
        that box.
        """
        rec = self.outstanding[ticket]
        epc = rec.epc
        self.execute_drop(epc, column_letter, row_numeral)
        self.cancel_recommendation(ticket)
        self.ticket_machine.return_ticket(ticket)

    def print_me(self):
        """Ronseal."""
        Printer.print(self)


################################
# HELPER CLASSES AND FUNCTIONS #
################################


def spots_from_layers(layers):
    spots = (
        Spot(to_roman(i), layer)
        for i, layer in enumerate(layers, 1)
    )
    return {
        spot.row_id: spot
        for spot in spots
    }


class Column:
    """A class which models a single column of a coldstore."""
    def __init__(self, letter, layers):
        self.letter = letter
        self.spots = spots_from_layers(layers)


class Ticket_Machine:
    """
    A class which issues and recycles tickets, used to keep track of any
    recommendations issued.
    """
    def __init__(self):
        self.tickets = set(range(1, max_tickets+1))

    def issue_ticket(self):
        """Ronseal."""
        return self.tickets.pop()

    def return_ticket(self, ticket):
        """Ronseal."""
        self.tickets.add(ticket)


class Recommendation:
    """A bare-bones class to hold the properties of a recommmendation."""
    def __init__(self, ticket, epc, column_letter, row_numeral):
        self.ticket = ticket
        self.epc = epc
        self.column_letter = column_letter
        self.row_numeral = row_numeral


class Printer:
    """Static class to print a ColdStore."""
    LAYER_COLOURS = (
        None,
        layer_colours.RED,
        layer_colours.ORANGE,
        layer_colours.YELLOW,
        layer_colours.GREEN,
        layer_colours.BLUE,
        layer_colours.INDIGO,
        layer_colours.VIOLET,
    )
    MAXED_OUT_LAYER_COLOUR = layer_colours.VIOLET
    RESET = layer_colours.RESET

    @classmethod
    def print(cls, coldstore):
        print("\n".join(cls._print(coldstore)))

    @classmethod
    def _print(cls, coldstore):
        rows = self._make_rows(coldstore)
        yield self._get_top_row()
        TWEEN_ROW = self._get_tween_row()
        yield TWEEN_ROW
        for i, row in enumerate(rows):
            yield (
                "|"
                + "".join(
                    f" {cls._print_spot(spot)} |"
                    for spot in row
                )
                + " "
                + to_roman(i)
            )
            yield TWEEN_ROW

    @classmethod
    def _make_rows(cls, coldstore):
        """
        Rearrange the coldstore's columns into rows, which can be printed more
        easily, and extract the useful data from each spot.
        """
        return [
            [
              column.spots[i]
              for column in coldstore.columns
            ]
            for i in range(len(coldstore.columns[0].spots))
        ]

    @classmethod
    def _get_top_row(self, rows):
        """Makes the top row of the printout."""
        return ''.join(
            f"  {chr(ord('a')+i)}   "
            for i in range(len(rows[0]))
        )

    @classmethod
    def _get_tween_row(self, rows):
        """Makes the tween rows of the printout."""
        return "+" + ''.join(
            "-----+"
            for _ in range(len(rows[0]))
        )

    @classmethod
    def _print_spot(self, spot):
        if spot.max_layers == 0:
            return "XXX"
        if spot.layers == 0:
            return "   "
        return (
            cls.LAYER_COLOURS[spot.layers]
            + spot.boxes[-1].display_code
            + cls.RESET
        )
</code></pre>
    </div>