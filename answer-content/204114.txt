<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You may start to make your code slightly less verbose (and with all the required semicolons):</p>

<pre><code>const result = {
    currentlyReading: [],
    read: [],
    wantToRead: []
};

this.state.books.forEach(item =&gt; {
    if (...) {
        item.setShelf = "Currently Reading";
        result.currentlyReading.push(item);
    }
});

return result;
</code></pre>

<p></p><hr>
Then you might simplify comparison using regular expressions:

<pre><code>if (item.shelf.match(/^currently\s?reading$/i)) { ... }
</code></pre>

<p></p><hr>
Now you can see that you are MUTATING THE STATE without using <code>setState()</code>. That's an Incredibly Bad Thingâ„¢. You do not give enough context to provide a specific suggestion then I'll mention few:

<p>1) Do not mutate existing objects, create new ones:</p>

<pre><code>if (item.shelf.match(/^currently\s?reading$/i) {
    result.currentlyReading.push({ ...item, setShelf: "Currently Reading" });
}
</code></pre>

<p>2) Perform this <em>translation</em> in <code>componentDidUpdate()</code> when you populate the <code>books</code> state property.</p>

<p>3) If you're using Redux then perform this translation in your Reducer (or Selector, if you're using them).</p>

<p></p><hr>
Re-think your design. Why do you need to <strong>duplicate</strong> an information you already have? What do you need these lists (with slightly changed values) for if they're already there in <code>state.books</code>? Let's imagine an hypothetical <code>render()</code> method:

<pre><code>render() {
    const { books } = this.state;

    return (
        &lt;React.Fragment&gt;
            &lt;Shelf title="Currently reading" books={books} filter="^currently\\s?reading$" /&gt;
            &lt;Shelf title="Read" books={books} filter="^read$" /&gt;
            &lt;Shelf title="Want to read" books={books} filter="^want\\s?to\\s?read$" /&gt;
        &lt;/React.Fragment&gt;
    );
}
</code></pre>

<p>Your separate lists are now <em>obsolete</em>. If you do not care about localization then regex for <code>filter</code> attribute might even be calculated directly (inside <code>Shelf</code> component!) with something like:</p>

<pre><code>const filter = new RegExp(`^${this.props.title.replace(" ", "\\s?")}$`, "i");
</code></pre>

<p>Even if I am not doing this in my example please note that regular expression text MUST be escaped (before calling <code>.replace()</code>): <a href="https://stackoverflow.com/q/3446170/1207195">Escape string for use in Javascript regex</a>.</p>

<p></p><hr>
Now that you have a separate component...you may consider to move selection again outside and use memoization, simplified example (pseudo-code for memoization, pick the package you prefer):

<pre><code>render() {
    const { books } = this.state;

    const read = memoize((list, filter) =&gt; list.filter(book =&gt; book.shelf.match(filter)));

    return (
        &lt;React.Fragment&gt;
            &lt;Shelf title="Currently reading" books={read(books, /^read$/i)} /&gt;
        &lt;/React.Fragment&gt;
    );
}
</code></pre>

<p>Note that I'm NOT using the <code>setShelf</code> property any more in favor of <code>Shelf.title</code> property.</p>
    </div>