<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><code>try...catch</code> will only handle one error, the remainder, if any, will be uncaught errors.</p>

<p>One approach would be to use <code>Promise.all()</code> and <code>Array.prototype.map()</code> within the <code>async</code> function, <code>throw</code> errors from within <code>.then()</code> chained to <code>create()</code> to <code>.catch()</code> if necessary.</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>async function create() {
  let results = {resolved:[],rejected:[]};
  let a = new Promise(resolve=&gt;setTimeout(resolve,2000,1));
  let b = Promise.reject(2);
  let c = Promise.reject(3);
  await Promise.all(
    Object.entries({a,b,c})
   .map(([k,p])=&gt;
    // `resolve` or `reject` an object having key
    // set to variable declaration; e.g., `a`, `b`, `c`
    // so we know which `Promise` is resolved or rejected
    p.then(d=&gt;results.resolved.push({[k]:d}))
    .catch(e=&gt;results.rejected.push({[k]:e}))
   )
  );
  return results;
}

create()
.then(({resolved,rejected})=&gt;{
  console.log({resolved}); 
  // `throw` errors to `.catch()` if necessary, here
  if (rejected.length) {
    throw new Error(
    JSON.stringify(rejected))
  }
})
.catch(e=&gt;console.error({caught:e}));</code></pre>
</div>
</div>

    </div>