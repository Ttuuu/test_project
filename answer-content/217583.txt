<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The code is clean, but there are some problems: 1. your binary search tree is not a standard binary search tree; 2. your implementation is not consistent; 3. various issues.</p>

<h1>Problems</h1>

<h2>What is a binary search tree?</h2>

<p>There is one bug that was pointed in a comment: what happens if you insert a value that is already present in the tree? In the current code, you fall in an infinite loop since the case is simply ignored:</p>

<pre><code># insert
while cur is not None:
    if key &lt; cur.val:
        ...
    elif key &gt; cur.val:
        ...
    # What if key == cur.val???
    # Nothing: just loop, and loop, and loop...
</code></pre>

<p>But the question is: what would you like to do if the value to insert is already present? Just let the tree as it is, or insert the value and get it twice in the tree? In the standard binary tree, nodes have a <code>key</code> and a <code>value</code>, and you insert a pair <code>key/value</code>: if the <code>key</code> is already present, the previous <code>value</code> is replaced by the new <code>value</code>. You can create a simplified version where the <code>key</code> is the value <code>value</code> itself, and thus just ignore the duplicate <code>value</code>s, or allow duplicate <code>value</code>s, but I think the best is to create a regular BST with <code>key</code>s and <code>value</code>s since it's as easy as create one with only <code>value</code>s.</p>

<h2>Implementation consistency</h2>

<p>You do not choose between a recursive implementation and an iterative one: <code>insert</code>, <code>search</code>, <code>get_min/max</code> are iterative while <code>get_height</code> and <code>delete</code> are recursive. For a first implementation, I would use only recursion because it's easier to understand. Once the code works, you can improve the speed by removing recursion <strong>if and only if</strong> it is mandatory.</p>

<h2>Misc</h2>

<h3>Double underscores</h3>

<p>Do not use them as a synonym for <code>private</code> in other OOP languages:</p>

<blockquote>
  <p>Generally, double leading underscores should be used only to avoid name conflicts with attributes in classes designed to be subclassed
  <em>~ <a href="https://www.python.org/dev/peps/pep-0008/#method-names-and-instance-variables" rel="noreferrer">PEP8</a></em></p>
</blockquote>

<h3><code>__repr__</code></h3>

<blockquote>
  <p>For many types, this function makes an attempt to return a string that would yield an object with the same value when passed to eval(), otherwise the representation is a string enclosed in angle brackets that contains the name of the type of the object together with additional information often including the name and address of the object.
  <em>~ <a href="https://docs.python.org/3/library/functions.html#repr" rel="noreferrer"><code>repr</code></a></em></p>
</blockquote>

<p>Your implementation matches more <code>__str__</code> than <code>__repr__</code>.</p>

<h3><code>__iter</code></h3>

<p>This method might be confused with <code>__iter__</code>. You should etiehr implement <code>__iter__</code> or choose another name.</p>

<h1>Tests</h1>

<h2>Testing framework</h2>

<p>You gave us some tests: that's a very good point. But they are non standard. You should use a testing framework. There are two testing tools shipped with Python: <a href="https://docs.python.org/3/library/unittest.html" rel="noreferrer"><code>unittest</code></a> and <a href="https://docs.python.org/3/library/doctest.html#module-doctest" rel="noreferrer"><code>doctest</code></a>. I'm really in love with <code>doctest</code>, because can test your module without writing boilerplate  code. But this method has some limits: if you want to thoroughly test a module, you'll have to write separate unit tests.</p>

<h2>Code refactoring</h2>

<p>When you refactor any code, I think <strong>it's very important to</strong> make sure the exisiting tests still pass. Hence, I insert a docstring at the top the file with your tests:</p>

<pre><code>"""
    &gt;&gt;&gt; bst = BinarySearchTree()
    &gt;&gt;&gt; for v in [6,2,8,0,4,7,9,3,5]:
    ...     bst.insert(v)
    &gt;&gt;&gt; [bst.search(v).value for v in [5,0,9,6]]
    [5, 0, 9, 6]
    &gt;&gt;&gt; bst.search(13)
    Traceback (most recent call last):
    ...
    KeyError: '13 is not found'
    &gt;&gt;&gt; bst.get_height()
    4
    &gt;&gt;&gt; bst.delete(5)
    &gt;&gt;&gt; bst.get_height()
    4
    &gt;&gt;&gt; bst.get_max_value()
    9
    &gt;&gt;&gt; bst.get_min_value()
    0
    &gt;&gt;&gt; for v in [3,7,9]:
    ...     bst.delete(v)
    &gt;&gt;&gt; bst.get_height()
    3
    &gt;&gt;&gt; bst
    02468
"""

# BODY OF THE MODULE

if __name__ == '__main__':
    import doctest
    doctest.testmod()
</code></pre>

<p>Now we can confidently refactor the code: it will perform at least as good as before.</p>

<p>As you see, the tests mimic a REPL, which is very intuitive and well known by every Python user. Usually, you put comments around the tests to explain whats going on.</p>

<p>I made some little improvements to the tests:
* bunch insert of values with a <code>for</code> loop
* a list comprehension to test the <code>search</code> method</p>

<p>We'll use <code>doctest</code> in the docstrings of functions too.</p>

<h1>A recursive implementation</h1>

<p>As I wrote above, a recursive implementation seems a good start, since the trees are inherently recursive structures.</p>

<h2>The <code>TreeNode</code> class</h2>

<p>Your <code>__init__</code> method allows the value to be <code>None</code>.</p>

<pre><code>def __init__(self, value=None, left=None, right=None):
</code></pre>

<p>But there is no reason to accept nodes with a <code>None</code> value. Sooner or later, you'll get something like:</p>

<pre><code>key &gt; cur.value
</code></pre>

<p>where <code>cur.value</code>  is None! Result:</p>

<pre><code>TypeError: '&gt;' not supported between instances of 'xxx' and 'NoneType'
</code></pre>

<p>I like the idea that the user of the class is not a child, and won't use <code>None</code> as a value (we should warn him/her). That's the responsibity of the user not to use <code>None</code> -- the user means also: You, when you use your own classes. But <strong>your</strong> responsibility is to ensure that the object state is correct with the default parameters. That's not the case.</p>

<p>As written, to get a regular BST, we need to add a <code>key</code> field. Since the <code>TreeNode</code> has no method and is just a convenient way to store the attributes of a node, we can use the new 3.7 <code>dataclass</code>:</p>

<pre><code>from dataclasses import dataclass
from typing import Any

@dataclass
class TreeNode:
    key: Any
    value: Any
    left: 'TreeNode' = None
    right: 'TreeNode' = None
</code></pre>

<p>Note on <code>Any</code> type: we could enforce the presence of <code>__eq__</code> and <code>__lt__</code> in the <code>key</code>, but that would be overkill I think. It's Python, not Java!</p>

<h2><code>search</code></h2>

<p>This is, in my mind, the best entry point: we want a tree to search key/values pairs. Note that, in your code:</p>

<pre><code>if cur is None:
    raise KeyError(f'{key} is not found')
while cur is not None:
    ...

raise KeyError(f'{key} is not found')
</code></pre>

<p>you don't need to test if <code>cur is None</code> before the loop since the loop will be skipped immediately and the error raised. But we need this test in the recursive version:</p>

<pre><code>class BinarySearchTree:
    ...

    def search(self, key):
        """Return the value assiociated with key, or raise a KeyError exception"""
        return _search(self.root, key).value

# standalone function, out of the BinarySearchTree class
def _search(node, key):
    """Search a node by key. Raise a KeyError exception if the key is not in the tree"""
    if node is None: # end of recursion
        raise KeyError(f'{key} is not found')
    if key &lt; node.key:
        return _search(node.left, key)
    elif key &gt; node.key:
        return _search(node.right, key)
    else: # key == node.key
        return node
</code></pre>

<p>I think we can solve a little puzzle here. It's not an accident you had to create helper methods (<code>__get_height</code> and <code>__delete</code>) for the recursive methods. Actually, the methods <code>get_height</code> and <code>delete</code> are only bootstraps for those methods. Here, <code>BinarySearchTree.search</code> is a bootstrap for the standalone <code>_search</code> function.</p>

<p>That's because, conceptually, <em>every node is also a tree, and a complete tree</em>. That means that, in your code, the tree is represented by the <code>TreeNode</code> class, not the <code>BinarySearchTree</code> class. The <code>BinarySearchTree</code> class is just a wrapper around the root and a method supplier.</p>

<p>It would be possible to attach the <code>_search</code> method to the <code>TreeNode</code> class, but we would have to test for <code>None</code> value at the children level:</p>

<pre><code>class TreeNode:
    ...

    def search(self, key):
        """Search a node by key. Raise a KeyError exception if the key is not in the tree"""
        if key &lt; self.key and self.left is not None:
            return node.left.search(key)
        elif key &gt; node.key and self.right is not None:
            return node.right.search(key)
        elif key == node.key:
            return node
        raise KeyError(f'{key} is not found')
</code></pre>

<p>I would probably write it like that in Java, but its easier to use standalone functions in Python.</p>

<p>Now we have the <code>_search</code> function, we can test it. Just add to the docstring a few lines:</p>

<pre><code>"""Search a node by key. Raise a KeyError exception if the key is not in the tree

&gt;&gt;&gt; _search(None, 1)
Traceback (most recent call last):
...
KeyError: '1 is not found'
&gt;&gt;&gt; _search(TreeNode(0, 0), 1)
Traceback (most recent call last):
...
KeyError: '1 is not found'
&gt;&gt;&gt; _search(TreeNode(1, 0), 1)
TreeNode(key=1, value=0, left=None, right=None)
&gt;&gt;&gt; _search(TreeNode(0, 0, None, TreeNode(1, 1)), 1)
TreeNode(key=1, value=1, left=None, right=None)
"""
</code></pre>

<p>We have to fix the tests in the module docstring too, but I keep it for later.</p>

<h2><code>insert</code></h2>

<p>We know how to search a node by <code>key</code>. Now, we need to <code>insert</code> <code>key/value</code> pairs in the tree:</p>

<pre><code>class BinarySearchTree:
    ...

    def insert(self, key, value):
        """insert node into binary tree based on node's key"""
        self.root = _insert(self.root, key, value)

def _insert(node, key, value):
    """Return node extended with a new key/value pair"""
    if node is None:
        return TreeNode(key, value)

    if key &lt; node.key:
        return TreeNode(node.key, node.value, _insert(node.left, key, value), node.right)
    elif key &gt; node.key:
        return TreeNode(node.key, node.value, node.left, _insert(node.right, key, value))
    else: # key == node.key
        return TreeNode(node.key, value, node.left, node.right)
</code></pre>

<p>There is an interesting pattern here:</p>

<pre><code>return TreeNode(node.key, node.value, _insert(node.left, key, value), node.right)
</code></pre>

<p>Seems equivalent to:</p>

<pre><code>node.right = _insert(node.left, key, value)
return node
</code></pre>

<p>But there is a big difference: the former is side effect free, while the latter is not. I prefer to avoid side effects because the code is easier to understand, <em>but there is a performance cost</em>. Again, we add some tests:</p>

<pre><code>"""Return node extended with a new key/value pair

&gt;&gt;&gt; node = TreeNode(0,0)
&gt;&gt;&gt; for i in range(2):
...     node = _insert(node, i, 2*i+1)
&gt;&gt;&gt; node
TreeNode(key=0, value=1, left=None, right=TreeNode(key=1, value=3, left=None, right=None))
&gt;&gt;&gt; _insert(node, -1, -2)
TreeNode(key=0, value=1, left=TreeNode(key=-1, value=-2, left=None, right=None), right=TreeNode(key=1, value=3, left=None, right=None))
"""
</code></pre>

<h2><code>get_min</code>, <code>get_max</code> and <code>get_height</code></h2>

<p>You should known how to proceed: <code>get_min</code> and <code>get_max</code> are easy to write recursively.</p>

<p>Your implementation of <code>get_height</code>, is recursive, but uses a tail call optimization (a mechanism that prevents the stack from growing insanely). I don't know if you did it on purpose, but I will remove this optimization for the sake of clarity:</p>

<pre><code>def _get_height(node):
    """return tree height of binary search tree"""
    if node is None:
        return 0
    return 1 + max(_get_height(node.left), _get_height(node.right))
</code></pre>

<h2><code>delete</code></h2>

<p>The <code>delete</code> operation needs the two following steps: 1. find the node having the given <code>key</code>; 2. remove the <code>key</code>. The first step is easy, now but the second one is not. Let's look at your code to understand what happens:</p>

<pre><code>    else: # key == cur.key
        if cur.left is None:
            return cur.right
        elif cur.right is None:
            return cur.left
        else:
            def __get_successor(n):
                while n is not None and n.left is not None:
                    n = n.left
                return n

            successor = __get_successor(cur)
            cur.key = successor.key
            cur.right = self.__delete(cur.right, successor.key)
</code></pre>

<p>If the node lacks one of its chidren, you just return the other child. That's ok.</p>

<p>But if the node has both left and right children, you take the leftmost element of the right child (you could take the rightmost element of the left child) and replace the current node with that node. That's ok because the leftmost element has a value that is: greater than any value in the left child; lower than any <em>other</em> value of the right child (definition of a BST). Hence, you find the successor and delete it from the right child.</p>

<p>Now in recursive idiom:</p>

<pre><code>else: # key == node.key
    if node.left is None:
        return node.right
    else:
        successor, right = _detach_min(node.right)
        return TreeNode(successor.key, successor.value, node.left, right)
</code></pre>

<p>Wait! what is this <code>_detach_min</code> function? When I write my code, I try to keep the momentum. If I don't know how to write something, I just use a function that does not exist yet. Later, I try to write this function:</p>

<pre><code>def _detach_min(node):
    """Return the min value from the tree and the
    rest of the tree"""
    if node.left is None:
        return node, None

    m, r = _detach_min(node.left)
    return m, TreeNode(node.key, node.value, r, node.right)
</code></pre>

<p>First, we detach the min from the left child, then we return this min and the tree without the min.</p>

<h2><code>__repr__</code> and <code>__str__</code></h2>

<p>With the <code>dataclass</code>, <code>__repr__</code> is almost free:</p>

<pre><code>def __repr__(self):
    return f"BinarySearchTree(root={self.root})"
</code></pre>

<p>We'll see <code>__str__</code> and the iteration on <code>key/value</code>s later.</p>

<h1>Full code</h1>

<p>The code is now complete. I will just adapt the initial tests:</p>

<pre><code>"""
    &gt;&gt;&gt; bst = BinarySearchTree()
    &gt;&gt;&gt; for v in [6,2,8,0,4,7,9,3,5]:
    ...     bst.insert(v, v)
    &gt;&gt;&gt; [bst.search(v) for v in [5,0,9,6]]
    [5, 0, 9, 6]
    &gt;&gt;&gt; bst.search(13)
    Traceback (most recent call last):
    ...
    KeyError: '13 is not found'
    &gt;&gt;&gt; bst.get_height()
    4
    &gt;&gt;&gt; bst.delete(5)
    &gt;&gt;&gt; bst.get_height()
    4
    &gt;&gt;&gt; bst.get_max_value()
    9
    &gt;&gt;&gt; bst.get_min_value()
    0
    &gt;&gt;&gt; bst.delete(3)
    &gt;&gt;&gt; bst.delete(7)
    &gt;&gt;&gt; bst.delete(9)
    &gt;&gt;&gt; bst.get_height()
    3
    &gt;&gt;&gt; bst
    BinarySearchTree(root=TreeNode(key=6, value=6, left=TreeNode(key=2, value=2, left=TreeNode(key=0, value=0, left=None, right=None), right=TreeNode(key=4, value=4, left=None, right=None)), right=TreeNode(key=8, value=8, left=None, right=None)))
"""

from dataclasses import dataclass
from typing import Any

@dataclass
class TreeNode:
    key: Any
    value: Any
    left: 'TreeNode' = None
    right: 'TreeNode' = None

class BinarySearchTree:
    def __init__(self):
        self.root = None

    def search(self, key):
        """Return the value assiociated with key, or raise a KeyError exception"""
        return _search(self.root, key).value

    def insert(self, key, value):
        """insert node into binary tree based on node's key"""
        self.root = _insert(self.root, key, value)

    def get_min_value(self):
        """return the min value from tree"""
        return _get_min(self.root).value

    def get_max_value(self):
        """return the min value from tree"""
        return _get_max(self.root).value

    def get_max_value(self):
        """return the min value from tree"""
        return _get_max(self.root).value

    def get_height(self):
        """return the height from tree"""
        return _get_height(self.root)

    def delete(self, key):
        """Delete the node having the given key"""
        self.root = _delete(self.root, key)

    def __repr__(self):
        return f"BinarySearchTree(root={self.root})"

# standalone function, out of the BinarySearchTree class
def _search(node, key):
    """Search a node by key. Raise a KeyError exception if the key is not in the tree

    &gt;&gt;&gt; _search(None, 1)
    Traceback (most recent call last):
    ...
    KeyError: '1 is not found'
    &gt;&gt;&gt; _search(TreeNode(0, 0), 1)
    Traceback (most recent call last):
    ...
    KeyError: '1 is not found'
    &gt;&gt;&gt; _search(TreeNode(1, 0), 1)
    TreeNode(key=1, value=0, left=None, right=None)
    &gt;&gt;&gt; _search(TreeNode(0, 0, None, TreeNode(1, 1)), 1)
    TreeNode(key=1, value=1, left=None, right=None)
    """
    if node is None: # end of recursion
        raise KeyError(f'{key} is not found')

    if key &lt; node.key:
        return _search(node.left, key)
    elif key &gt; node.key:
        return _search(node.right, key)
    else:
        return node


def _insert(node, key, value):
    """Return node extended with a new key/value pair

    &gt;&gt;&gt; node = TreeNode(0,0)
    &gt;&gt;&gt; for i in range(2):
    ...     node = _insert(node, i, 2*i+1)
    &gt;&gt;&gt; node
    TreeNode(key=0, value=1, left=None, right=TreeNode(key=1, value=3, left=None, right=None))
    &gt;&gt;&gt; _insert(node, -1, -2)
    TreeNode(key=0, value=1, left=TreeNode(key=-1, value=-2, left=None, right=None), right=TreeNode(key=1, value=3, left=None, right=None))
    """
    if node is None:
        return TreeNode(key, value)

    if key &lt; node.key:
        return TreeNode(node.key, node.value, _insert(node.left, key, value), node.right)
    elif key &gt; node.key:
        return TreeNode(node.key, node.value, node.left, _insert(node.right, key, value))
    else: # key == node.key
        return TreeNode(node.key, value, node.left, node.right)

def _get_min(node):
    """return the min value from tree
    &gt;&gt;&gt; node = TreeNode(0,0)
    &gt;&gt;&gt; for i in range(3):
    ...     node = _insert(node, i, 2*i+1)
    &gt;&gt;&gt; _get_min(node).value
    1
    """
    if node.left is None:
        return node

    return _get_min(node.left)

def _get_max(node):
    """return the max value from tree
    &gt;&gt;&gt; node = TreeNode(0,0)
    &gt;&gt;&gt; for i in range(3):
    ...     node = _insert(node, i, 2*i+1)
    &gt;&gt;&gt; _get_max(node).value
    5
    """
    if node.right is None:
        return node

    return _get_max(node.right)

def _get_height(node):
    """return tree height of binary search tree
    &gt;&gt;&gt; node = TreeNode(0,0)
    &gt;&gt;&gt; for i in range(3):
    ...     node = _insert(node, i, 2*i+1)
    &gt;&gt;&gt; _get_height(node)
    3
    """
    if node is None: # end of the recursion
        return 0
    return 1 + max(_get_height(node.left), _get_height(node.right))

def _delete(node, key):
    """Return the tree without the node having the given key
    &gt;&gt;&gt; node = TreeNode(0,0)
    &gt;&gt;&gt; node = _insert(node, 1, 1)
    &gt;&gt;&gt; node = _insert(node, -1, 2)
    &gt;&gt;&gt; _delete(node, 0)
    TreeNode(key=1, value=1, left=TreeNode(key=-1, value=2, left=None, right=None), right=None)
    """
    if node is None:
        return None
    if key &lt; node.key:
        return TreeNode(node.key, node.value, _delete(node.left, key), node.right)
    elif key &gt; node.key:
        return TreeNode(node.key, node.value, node.left, _delete(node.right, key))
    else: # key == node.key, end of recursion
        if node.left is None:
            return node.right
        else:
            successor, right = _detach_min(node.right)
            return TreeNode(successor.key, successor.value, node.left, right)

def _detach_min(node):
    """return the min value from tree
    &gt;&gt;&gt; node = TreeNode(0,0)
    &gt;&gt;&gt; node = _insert(node, 1, 1)
    &gt;&gt;&gt; node = _insert(node, -1, 2)
    &gt;&gt;&gt; node = _insert(node, -2, 4)
    &gt;&gt;&gt; node = _insert(node, -0.5, 2.5)
    &gt;&gt;&gt; _detach_min(node)
    (TreeNode(key=-2, value=4, left=None, right=None), TreeNode(key=0, value=0, left=TreeNode(key=-1, value=2, left=None, right=TreeNode(key=-0.5, value=2.5, left=None, right=None)), right=TreeNode(key=1, value=1, left=None, right=None)))
    """
    if node.left is None:
        return node, None

    m, r = _detach_min(node.left)
    return m, TreeNode(node.key, node.value, r, node.right)

if __name__ == '__main__':
    import doctest
    doctest.testmod()
</code></pre>

<p>As you can see, the code is not only recursive: it's functional, that means that you don't have any side effect in the functions. Usually, functional code is more readable while imperative code is more efficient. Hence there is no good version: it depends on your needs. What matters is to be consistent.. or not, depending on your needs.</p>

<h1>Conclusion</h1>

<p>Here are the more important points to notice:</p>

<ul>
<li>A node is a complete tree (all standalone functions deal with nodes as trees).</li>
<li>The code now decouples the operations on the tree (standalone function) and the operations on the mapping (methods).</li>
<li><code>doctest</code> was perhaps used where <code>unitest</code> should have been preferred.</li>
</ul>

<h1>A step further</h1>

<p>I will prove that the second point is important. A binary tree is a mapping. Python provides a frame for mappings: <a href="https://docs.python.org/3/library/collections.abc.html#collections.abc.Mapping" rel="noreferrer">https://docs.python.org/3/library/collections.abc.html#collections.abc.Mapping</a>. Why not try to fit this frame?</p>

<p>We just make <code>BinarySearchTree</code> inherit from <code>Mapping</code>:</p>

<pre><code>from collections.abc import MutableMapping

class BinarySearchTree(MutableMapping):
    ...
</code></pre>

<p>Now, Python requires some methods to be implemented:</p>

<pre><code>TypeError: Can't instantiate abstract class BinarySearchTree with abstract methods __delitem__, __getitem__, __iter__, __len__, __setitem__
</code></pre>

<ul>
<li><code>__delitem__</code> is simply our <code>delete</code> method;</li>
<li><code>__getitem__</code> is our <code>search</code> method;</li>
<li><code>__setitem__</code> is our <code>insert</code> method;</li>
<li><code>__iter__</code> must return an iterator over items;</li>
<li><code>__len__</code> must return the number of nodes of the binary tree;</li>
</ul>

<h2><code>__iter__</code></h2>

<p>We'll use a generator to implement the iterator:</p>

<pre><code>    def __iter__(self):
        return _iter(self.root)

def _iter(node):
    if node is None:
        return

    yield from _iter(node.left)
    yield node.key
    yield from _iter(node.right)
</code></pre>

<h2><code>__len__</code></h2>

<p>The method is similar to <code>get_height</code>:</p>

<pre><code>def _len(node):
    if node is None:
        return 0

    return 1 + _len(node.left) + _len(node.right)
</code></pre>

<h2><code>__str__</code></h2>

<p>The <code>__str__</code> may be implemented to show the sorted dictionary:</p>

<pre><code>def __str__(self):
    return "{"+", ".join(f"{k}: {v}" for k, v in self.items())+"}"
</code></pre>

<h2>A mapping initializer</h2>

<p>We need a convenient way to initialize the binary tree:</p>

<pre><code>def __init__(self, mapping={}):
    self.root = None
    self.update(mapping)
</code></pre>

<p>We could update the <code>__repr__</code> method to use this initializer.</p>

<h1>Code v2</h1>

<p>I omit the parts that where not modified:</p>

<pre><code>"""
    &gt;&gt;&gt; bst = BinarySearchTree({v: v for v in [6,2,8,0,4,7,9,3,5]})
    &gt;&gt;&gt; [bst[v] for v in [5,0,9,6]]
    [5, 0, 9, 6]
    &gt;&gt;&gt; bst[13]
    Traceback (most recent call last):
    ...
    KeyError: '13 is not found'
    &gt;&gt;&gt; bst.get_height()
    4
    &gt;&gt;&gt; del bst[5]
    &gt;&gt;&gt; bst.get_height()
    4
    &gt;&gt;&gt; bst.get_max_value()
    9
    &gt;&gt;&gt; bst.get_min_value()
    0
    &gt;&gt;&gt; del bst[3]
    &gt;&gt;&gt; del bst[7]
    &gt;&gt;&gt; del bst[9]
    &gt;&gt;&gt; bst.get_height()
    3
    &gt;&gt;&gt; str(bst)
    '{0: 0, 2: 2, 4: 4, 6: 6, 8: 8}'
"""

...

class BinarySearchTree(MutableMapping):
    def __init__(self, mapping={}):
        self.root = None
        self.update(mapping)

    def __getitem__(self, key):
        return _search(self.root, key).value

    def __iter__(self):
        return _iter(self.root)

    def __setitem__(self, key, value):
        self.root = _insert(self.root, key, value)

    ...

    def __delitem__(self, key):
        self.root = _delete(self.root, key)

    def __repr__(self):
        return f"BinarySearchTree(root={self.root})"

    def __str__(self):
        return "{"+", ".join(f"{k}: {v}" for k, v in self.items())+"}"

    def __len__(self):
        return _len(self.root)


def _iter(node):
    if node is None:
        return

    yield from _iter(node.left)
    yield node.key
    yield from _iter(node.right)

def _len(node):
    if node is None:
        return 0

    return 1 + _len(node.left) + _len(node.right)

...
</code></pre>

<p>Have a look at the tests: the class may be used as any standard Python mapping! The important point is that the interface of the binary tree was adapted to fit with the <code>Mapping</code> interface, but we didn't need to modify the standalone functions. That's a sign that the code was, I hope, correctly decoupled.</p>
    </div>