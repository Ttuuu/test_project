<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I agree with G. Sliepen that this seems way too over-engineered. I just wanted to add a few more things.</p>

<p>Is there a reason you're inheriting <code>NonCopyable</code> and <code>NonMovable</code>? This doesn't seem like a good use of inheritance.</p>

<pre><code>Object(const Object&amp;) = delete;
Object(Object&amp;&amp;) = delete;
</code></pre>

<p>This is much clearer. </p>

<p>Secondly, <code>x += x += 1;</code> just looks terrible. Focus on readability. The compiler will optimize it anyway, and it does. See here (<a href="https://godbolt.org/z/iQOwPg" rel="nofollow noreferrer">https://godbolt.org/z/iQOwPg</a>).</p>

<p>Finally, your pool is default-constructing objects at initialization. This is may be fine for small objects, but can lead to performance loss for large objects, especially if you don't use a lot of the objects. </p>

<p>More typically, pool allocators allocate a single block of memory during the start, and internally represent them as linked list of objects. Then, when a user requests an object, it picks the first node from the linked list, constructs the object, and returns it to the user. This method has the added benefit that the user can pass in arguments for the constructor. </p>

<p>Obviously, there are more features you can add, like dynamically resizing the pool if the memory is low.</p>
    </div>