<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This looks like its complexity will scale linearly with <code>n</code>, so I'm surprised it's a performance bottleneck. Consider just leaving it as-is.</p>

<p>Discussion about <a href="https://stackoverflow.com/questions/3389264/how-to-get-the-separate-digits-of-an-int-number">counting the digits</a> <a href="https://www.baeldung.com/java-number-of-digits-in-int" rel="nofollow noreferrer">of an int</a> suggests that the overhead of <code>String</code> allocation may be worth the bother of avoiding.<br>
(I'm a little surprised; I wonder if we'd see the same difference in C or not.)<br>
On the other hand, your situation is a little more complicated than theirs; you may not see the same efficiency if you take the (larger) pains of implementing the int-only solution.</p>

<p>Within the space of string-based solutions, you may be better off without an explicit loop. A <a href="https://docs.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html" rel="nofollow noreferrer">compiled regex</a> would look good on paper, but I bet its heavy under the hood.</p>

<pre class="lang-java prettyprint-override"><code>private static Pattern not_1 = Pattern.compile("[^1]+");

...

    int counter = not_1.matcher(String.valueOf(answer)).replaceAll("").length();
</code></pre>

<p>If it's clear enough to you and your peers what that says, then I'd advocate using it because it's clear and concise. If you've specifically identified this function as a performance bottleneck though, then you'll need to write up a couple implementations and do some bench-marking to know which one's best. </p>
    </div>