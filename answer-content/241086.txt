<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is all subjective:</p>
<p>But I would prefer if the constructor set up the NeuralNet and was ready to go. Once the object there is no need to call extra functions like  <code>initializeLayers()</code> or <code>setHyperParameters()</code> or <code>setLearningReductionParameters()</code> these should all be things that are done as part of construction.</p>
<p>This implies that you need some form of config object (as these parameters seem complex) that you crete first that can be passed to the constructor of the <code>NeuralNet</code>. This config object could potentially be able to read and load its own state from a config file.</p>
<pre><code> NeuralNetConfig     config;
 // 1. Read default config from default config file.
 // 2. Add extra values to config from command line arguments.

 // When you are ready to go:
 NeuralNet           net(config);
</code></pre>
<p>This also covers one of your concenrs:</p>
<blockquote>
<p>yet it is not responsible for reading the parameter file stating the network size to load</p>
</blockquote>
<hr>
<blockquote>
<p>an object should be responsible for all of its affairs, including the in/output.</p>
</blockquote>
<p>There are two types of objects.</p>
<ul>
<li>One that handles business logic.<br>
In your case the logic of the NeuralNet.</li>
<li>Another type of object handlers resource management.<br>
In most cases this is memory management (this is things like std::vector).</li>
</ul>
<p>Your object should fall into one of these two broad categories. If your object is mixing business logic and resource management then you need to consider why and can we easily split these apart.</p>
<p>In terms of Input/Output you can consider this part of the "business" logic or you can potentially delegate this to another class that understands this (its one of those grey areas).</p>
<hr>
<blockquote>
<p>However, where do I draw the line? For instance, the network is responsible for storing and loading of results</p>
</blockquote>
<p>Yes (or maybe with the help of a delegate). But it should not be responsible for where it stores the results (this should be passed to the class). i.e. if you save the data to a file your class is not responsible for selecting or opening the file it will be passed an open file stream object onto which it can save the state.</p>
<hr>
<h3>Code Review:</h3>
<pre><code>//Smart pointers are used to ensure freeing of memory. The pointers are not always used and can therefore not be freed in a destructor
std::unique_ptr&lt;int[]&gt; sizeLayer;
std::unique_ptr&lt;CLayer[]&gt; pLayer;
</code></pre>
<p>Getting dangerously close to resource management. Also why are these not <code>std::vector&lt;&gt;</code> objects? Looking through the code these should definitely be <code>std::vector&lt;&gt;</code> objects.</p>
<hr>
<p>Nice to put the parameters "names" in here. It helps in that little thing of "Self Documenting Code".</p>
<pre><code>void initializeLayers(int, int *, std::string);
void setHyperParameters(double, double, double);
void layerInfo();
void training(const arma::dmat &amp;, const arma::uvec &amp;);
arma::uvec yVectorGenerator(const arma::uword &amp;);
arma::dvec sigmoid(arma::dvec &amp;);
arma::dvec Dsigmoid(arma::dvec &amp;);
int computePerformance(const arma::dmat &amp;, const arma::uvec &amp;);
int feedForward(const arma::dvec &amp;);
void setLearningReductionParameters(double, int);
void reduceLearnRate(double);
void storeResults();
void loadResults(const std::string &amp;, int, int *);
</code></pre>
<hr>
<p>Why are you passing a string by value here?</p>
<pre><code>void initializeLayers(int, int *, std::string);
</code></pre>
<hr>
<p>Why are you passing a pointer here?</p>
<pre><code>void initializeLayers(int, int *, std::string);
</code></pre>
<p>Pointers are exceedingly rare in modern C++ (unless you are building some low level resource management object like a vector). The problem with pointers is that they do not convey ownership semantics and thus it is easy to leak or accidentally destroy something (ie. they are buggy to use).</p>
<p>When I look at the code that uses this I see it is very inefficient and dangerously written:</p>
<pre><code>            int *pLayers = new int[atoi(argv[iArgc + 1])];

            // FILL IN pLayers
            network.initializeLayers(atoi(argv[iArgc + 1]), pLayers, setSavePath);
            delete[] pLayers;
</code></pre>
<p>The trouble is that you will leak that array if <code>initializeLayers()</code> throws an exception (and thus skips the delete). Inside the function you do the same thing (but at least assign it to smart pointer to prevent leaking).</p>
<pre><code>// Allocate 
sizeLayer = std::unique_ptr&lt;int[]&gt;(new int[numOfLayers_]);
// And now copy.
for (int iLayer = 0; iLayer &lt; numOfLayers_; iLayer++)
{
    sizeLayer[iLayer] = pLayerSize[iLayer];
}
</code></pre>
<p>By using vectors to do the resource management you can make your code a lot simpler and efficient.</p>
<pre><code>            int countOfPlaters = atoi(argv[iArgc + 1]);
            std::vector&lt;int&gt; pLayers(countOfPlaters);
            // FILL IN pLayers
            
            network.initializeLayers(countOfPlaters, std::move(pLayers), setSavePath);
</code></pre>
<p>Now define the interface like this:</p>
<pre><code>void initializeLayers(int, std::vector&lt;int&gt;&amp;&amp; players, std::string);
</code></pre>
<p>Inside the function to get a copy of the vector you simply do this:</p>
<pre><code> sizeLayer = std::move(players); // Note: sizeLayer is now declared std::vector&lt;int&gt;
</code></pre>
<p>This will effeciently move the data inside the vector without having to copy the whole vector. Memory is handeled even in exceptional cases and you have written less code.</p>
<hr>
<p>If your method does not change the state of the object then it should be marked <code>const</code>. I am betting that this function does not change the state of the object.</p>
<pre><code>void layerInfo();
</code></pre>
<hr>
<p>Again using a pointer parameter.</p>
<pre><code>void loadResults(const std::string &amp;, int, int *);
</code></pre>
<p>Looking at the code this should be replaced by a <code>std::vector</code>.</p>
<hr>
<p>Why are you doing this here?</p>
<pre><code>    // Initialize: matrix and vector sizes
    pLayer[iLayer].a.set_size(sizeLayer[iLayer]);
    pLayer[iLayer].z.set_size(sizeLayer[iLayer]);
    pLayer[iLayer].b = arma::randn(sizeLayer[iLayer]);
    pLayer[iLayer].w.set_size(sizeLayer[iLayer], sizeLayer[iLayer - 1]);
    pLayer[iLayer].kD.set_size(sizeLayer[iLayer]);
    pLayer[iLayer].db = pLayer[iLayer].b;
    pLayer[iLayer].dw = pLayer[iLayer].w;
</code></pre>
<p>This should be in the constructor of <code>CLayer</code>.</p>
<hr>
<p>This is a bad place to <code>default_random_engine</code>.</p>
<pre><code>for (int iLayer = 1; iLayer &lt; numOfLayers_; iLayer++)
{

    // STUFF

    std::default_random_engine generator{static_cast&lt;long unsigned int&gt;(std::chrono::high_resolution_clock::now().time_since_epoch().count())}; // Use high precision time to determine random seed

    std::normal_distribution&lt;double&gt; distribution(0.0, sqrt((double)sizeLayer[iLayer - 1]));            
}
</code></pre>
<p>The random number generators can be very expensive to initialize (as they can potentially hold a lot of state). You are supposed to initialize this once and re-use it as much as possible (then you would not need to use a high resolution timer to make it work). Just move this outside the loop and re-use for all your random numbers.</p>
<p>I would even move this into main and pass the random number generator as a parameter into the constructor to be re-used.</p>
<p>Note: During debugging it is useful to <strong>not</strong> have random numbers. To find a bug you may want to seed the generator with a known value so that you can set up the state as it was when you discovered a bug.</p>
<p>I always dump the seed into a log file. Also I allow the user to specify the seed at the command line so that I can reproduce an earlier run with the exact same input. Also for debugging this means having a single random number generator for the whole application makes things like debugging easier.</p>
<hr>
<p>Also worth noting you can add a code review badge to your github readme.md file:</p>
<pre><code>[![Code Review](http://www.zomis.net/codereview/shield/?qid=241074)](http://codereview.stackexchange.com/q/241074)

                           
</code></pre>
    </div>