<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Superficial remarks</h2>

<p>Whats a "bacelet", in <code>isBaceletFind()</code>?  Did you mean "bracelet"?  Even that is questionable English terminology, as I would take it to mean a piece of jewelry worn at the wrist.  Or maybe you meant "bracket"?</p>

<p><code>isPopable()</code> should be <code>isPoppable()</code>.</p>

<p>I normally don't like to be pedantic about brace styles, but the one you use for your <code>if</code> statements is really very unconventional, and certainly not easy to read.  <a href="https://en.wikipedia.org/wiki/Indentation_style" rel="nofollow noreferrer">Wikipedia lists 8 common brace styles</a>, and yours is not any of them.  In fact, I'd say that it's the first time I've ever seen it in use.</p>

<h2>Data structure</h2>

<p><a href="https://stackoverflow.com/q/1386275/1157100"><code>java.util.Stack</code> is deprecated</a>, because it has bad object-oriented design (it allows random access because it extends <code>java.util.Vector</code>), and because its methods are <code>synchronized</code> (which incurs unnecessary performance overhead).  Normally, the recommended replacement for <code>Stack</code> is <a href="https://docs.oracle.com/javase/10/docs/api/java/util/ArrayDeque.html" rel="nofollow noreferrer"><code>ArrayDeque</code></a>.  However, in this case, since each element is a <code>char</code>, I'd use a <code>StringBuilder</code> instead, so that you don't have to incur the <code>char</code> ↔︎ <code>Character</code> boxing/unboxing overhead.</p>

<p>Even if your code works, it's a bad practice to write:</p>

<blockquote>
<pre><code>private static final Stack&lt;Character&gt; STACK = new Stack&lt;&gt;();
</code></pre>
</blockquote>

<ul>
<li><code>static</code> means that there is only one instance shared throughout the Java interpreter.  Having to write <code>STACK.clear()</code> at the beginning of <code>isBalanced()</code> is ugly.  It also unnecessarily introduces the possibility of multithreading problems, when <code>isBalanced()</code> should be a simple deterministic function with no threading issues.</li>
<li>The <code>ALL_CAPS</code> name suggests that it's a constant, which it isn't in nature, even if it's technically a <code>final</code> variable.</li>
</ul>

<p>Instead, <strong><code>isBalanced()</code> should instantiate the stack as a local variable</strong>, and explicitly pass it to any helper function that needs it.</p>

<h2>Algorithm</h2>

<p>I'm not a big fan of the <code>BRACELETS</code> constants, with the first half being the opening delimiters, with their counterparts in the second half.  I think it's more cryptic than it needs to be.  I'd just write a <code>switch</code> containing all of the characters of interest: it compiles to very clean and efficient bytecode, even simpler than <code>String.indexOf()</code>.</p>

<p>When you encounter an opening delimiter, it would be smarter to push its counterpart onto the stack instead.  That way, you don't have to repeatedly ask "is this the right closing delimiter?" when looking at every subsequent character.</p>

<pre><code>public class BalancedParenthesis {
    private static class CharStack {
        private StringBuilder sb = new StringBuilder();
        public boolean isEmpty() { return this.sb.length() == 0; }
        public void push(char c) { this.sb.append(c); }
        public char pop() {
            char last = this.sb.charAt(this.sb.length() - 1);
            this.sb.setLength(this.sb.length() - 1);
            return last;
        }
    }

    public static boolean isBalanced(String str) {
        CharStack stack = new CharStack();
        for (int pos = 0; pos &lt; str.length(); pos++) {
            char ch = str.charAt(pos);
            switch (ch) {
              // Backslash: ignore the next character
              case '\\': pos++; continue;

              // Opening delimiters
              case '(':  stack.push(')'); break;
              case '{':  stack.push('}'); break;
              case '[':  stack.push(']'); break;
              case '&lt;':  stack.push('&gt;'); break;

              // Closing delimiters
              case ')':
              case '}':
              case ']':
              case '&gt;':
                if (stack.isEmpty() || stack.pop() != ch) {
                    return false;
                }
            }
        }
        return stack.isEmpty();
    }
}
</code></pre>
    </div>