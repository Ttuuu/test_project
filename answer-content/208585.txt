<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>My question is that what can I do to improve the program, specifically around the areas of code logic and style ... ?</p>
</blockquote>

<p><strong>Use <code>stdbool.h</code></strong></p>

<p>Since C99 <a href="https://codereview.stackexchange.com/questions/208389/duel-type-card-game-in-c/208585#comment402560_208405">@Lundin</a>, C has the <code>_Bool</code> type which has 2 values: 0 and 1.  Use that rather than </p>

<pre><code>// #define FALSE 0
// #define TRUE 1
// int cardFound = FALSE;
// cardFound = TRUE;  
// if (cardFound == FALSE)
</code></pre>

<p>use</p>

<pre><code>#include &lt;stdbool.h&gt;
bool cardFound = false;
cardFound = true;  
if (!cardFound)
</code></pre>

<p><strong>Flush output</strong></p>

<p><code>stdout</code> is commonly line buffered, but may be unbuffered or fully buffered.  To insure out is seen before requesting input,  (especially when that output does not end in a <code>'\n'</code>) us <code>fflush()</code>.</p>

<pre><code> printf("\n\nWould you like to play again? Enter Y for yes, anything else for no: ");
 fflush(stdout);
 scanf(" %c", &amp;playAgain);
</code></pre>

<p><strong>Format to presentation width</strong></p>

<p>Code should be auto-formated so re-formating to a different preferred max width should be easy.  Reviewing code that rolls <em>far</em> off the right of the screen reduced code review efficiency.  OP's width is 143+.  Suggest something in the 75-100 range.</p>

<pre><code>char * RankNames[] = {"Ace", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "Ten", "Jack", "Queen", "King"};

printf("\n\nWould you like to play again? Enter Y for yes, anything else for no: ");  // Prompt to restart game
scanf(" %c", &amp;playAgain);

           "----------------------------------------------\n", playerLen, compLen);     // Output current size of player's and computer's deck 
</code></pre>

<p>vs.</p>

<pre><code>char * RankNames[] = {"Ace", "Two", "Three", "Four", "Five", "Six", "Seven", 
    "Eight", "Nine", "Ten", "Jack", "Queen", "King"};

// Prompt to restart game
printf("\n\n" // 
   "Would you like to play again? Enter Y for yes, anything else for no: ");
scanf(" %c", &amp;playAgain);

    // Output current size of player's and computer's deck
    "----------------------------------------------\n", playerLen, compLen);
</code></pre>

<p><strong>Allocate to the object and drop cast</strong></p>

<p>Consider the below.  The first obliges a check: Was the correct type used? The 2nd does not need that check.  The unnecessary cast is <a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself" rel="nofollow noreferrer">WET</a>.  The 2nd is DRY, easier to code right, review and maintain.</p>

<pre><code>// playerHand[cardsCreated/2] = ( Card *) malloc ( sizeof(Card));
playerHand[cardsCreated/2] = malloc (sizeof *playerHand);
</code></pre>

<p>Robust code would also detect allocation failures.</p>

<pre><code>if (playerHand[cardsCreated/2] == NULL) {
  // call out of memory handler
}
</code></pre>

<p><strong>Reduce <code>rand()</code> calls</strong></p>

<p>2 calls to <code>rand()</code> is twice the time when one would do.</p>

<pre><code>// card.rank = rand() % 13;
// card.suit = rand() % 4;
int r = rand();
card.rank = (r/4) % 13;
card.suit = r%4;
</code></pre>

<p><strong>Remove <code>else</code></strong></p>

<p>Minor style issue: <code>compareCards()</code> looks like it is missing a <code>return</code> at the function end. (it is not though)</p>

<p>Alternate layout:</p>

<pre><code>int compareCards(Card * playerCard, Card * compCard) {
  if (playerCard-&gt;rank &gt; compCard-&gt;rank) { // Compares ranks
    return 0;
  }
  if (playerCard-&gt;rank &lt; compCard-&gt;rank) {
    return 1;
  } 
  if (playerCard-&gt;suit &gt; compCard-&gt;suit) { // As ranks match, compare suits
    return 0;
  }
  return 1;
}
</code></pre>

<p>Other simplification possible.</p>

<p><strong>Employ <code>const</code></strong></p>

<p>When a function parameter points to unchanged data, make it <code>const</code>.  This allows for wider code use, some optimizations and conveys better codes intent.</p>

<pre><code>// int checkWin(Card * playerHand[], Card * compHand[]);
int checkWin(const Card * playerHand[], const Card * compHand[]);
</code></pre>

<p><strong>Unused non-standard include</strong></p>

<p>The only reason for the non-standard C <code>&lt;unistd.h&gt;</code> seems to be <code>sleep()</code>.  Consider removal for greater portability.</p>

<p><strong>Technical undefined behavior (UB)</strong></p>

<p><code>toupper(ch)</code> is valid for <code>int</code> values in the <code>unsigned char</code>range and <code>EOF</code>.  Else UB when <code>ch &lt; 0</code>.</p>

<pre><code>    scanf(" %c", &amp;playAgain);
    // if (toupper(playAgain) != 'Y')
    if (toupper((unsigned char) playAgain) != 'Y')
</code></pre>

<p><strong>Design - missing <code>dealCards()</code> companion</strong></p>

<p>Rather than code in <code>main()</code> the free-ing <code>for (int index = 0; index &lt; 52; index++) free(deck[index]);</code>, Consider a companion function to <em>un-deal</em>. </p>
    </div>