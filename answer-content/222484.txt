<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Foreword</h3>

<p>I appreciate you taking the effort to edit your question time and again to clarify your goal. At first, I thought you were making a <em>synchronous task scheduler</em> using whatever thread is available at any given time, which would have been really cool as well! In fact, your smartly designed API could be augmented to become one if you allow:</p>

<ul>
<li>chaining pending executions</li>
<li>a specific <code>Func&lt;T&gt;</code> instance for each <code>Run</code></li>
</ul>

<h3>Review</h3>

<p>I haven't found any scheduling-related or other major issues. I only have a couple of small remarks.</p>

<p>Designing private classes allows you to have more leverage in defining access modifiers and validating arguments of internal state and methods. However, I would include some sort of debug-only checks on validating arguments to detect bad design early in unit tests.</p>

<pre><code>private class State
{
     public Task&lt;T&gt; Acquired; // &lt;- OK, since your API does not allow public access to it
     public State(Func&lt;T&gt; func)
     {
          Debug.Assert(func != null); // or use Contracts API in Debug Mode
          this.func = func;
     }
}
</code></pre>

<p>A public API should use argument checks.</p>

<pre><code>public ExclusiveFunc(Func&lt;T&gt; func)
{
    func = func ?? throw new ArgumentNullException(nameof(func)); // &lt;- a MUST in public API
    queue = new Queue(() =&gt; {
        try {
            return func();
        }
        finally {
            queue = queue.Next();
        }
    });
}
</code></pre>
    </div>