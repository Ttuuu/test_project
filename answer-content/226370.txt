<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As suggested by others, the string approach with dot-separated properties can be ambigious. I present an alternative using lambda functions. It chains property extraction from inner objects, until a property can no longer be retrieved, in which case the default value is returned. It also performs an early exit earlier than the initial code.</p>

<pre><code>function extract (source, selectors, defaultValue) {
  if (source == undefined || selectors == undefined) {
    return defaultValue;
  }
  if (!Array.isArray(selectors)) {
    selectors = [ selectors ];
  }
  let value = source;
  for (const i in selectors) {
    try {
      value = selectors[i](value);
    } catch {
      value = defaultValue;
      break;
    }
  }
  return value;
}
</code></pre>

<p>Usage:</p>

<pre><code>const data = {
  inner: {
    message: 'Hello world',
  }
}

// 'Hello world'
var prop1 = extract(data, [
      obj =&gt; obj.inner
    , obj =&gt; obj.message
  ], 'not found');

// 'not found'
var prop2 = extract(data, [
      obj =&gt; obj.unknownpropname
    , obj =&gt; obj.message
  ], 'not found');
</code></pre>

<p>Your example reworked:</p>

<pre><code>var noob = {k1 : {k11 : {k111 : "v1"}}, k2 : { k21 : "v2"}};

// 'v1'
var prop = extract(noob, [obj =&gt; obj.k1, obj =&gt; obj.k11, obj =&gt; obj.k111 ], 'not found');
</code></pre>
    </div>