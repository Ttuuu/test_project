<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Honestly, I can not consider neither of proposed approaches (except for applying <em>generators</em>) as efficient enough.<br></p>

<p>Here are my arguments:</p>

<ul>
<li><p><strong><code>stopwords.words('english')</code></strong> sequence. <br>As <code>clean_text(x)</code> will be applied for <strong>each</strong> column cell it's better to move a common sequence of stopwords to the <em>top level</em> at once. But that's easy. <code>stopwords.words('english')</code> is actually a <strong>list</strong> of stopwords and a much more efficient would be to convert it into <strong><code>set</code></strong> object for fast containment check (in <code>if word.lower() in stopwords_english</code>):</p>

<pre><code>stopwords_english = set(stopwords.words('english'))
</code></pre></li>
<li><p>instead of <em>yielding</em> a words that aren't contained in <code>stopwords_english</code> set for further replacements - in opposite, words that are <em>stopwords</em> can be just skipped at once:</p>

<pre><code>if word.lower() in stopwords_english:
    continue
</code></pre></li>
<li><p>subtle nuance: the pattern <code>"/-'"</code> at 1st replacement attempt (<code>for punct in "/-'"</code>) is actually <strong>contained</strong> in a longer pattern of punctuation chars <code>?!.,"#$%\'()*+-/:;&lt;=&gt;@[\\]^_`{|}~' + '“”’'</code>.<br>Thus, it's unified into a single pattern and considering that there could be multiple consequent occurrences of punctuation/special char within a word - I suggest to apply a compiled regex pattern with <code>+</code> quantifier (to replace multiple occurrences at once) defined at top level.</p></li>
</ul>

<hr>

<p>Finally, the optimized approach would look as follows:</p>

<pre><code>import re

...
stopwords_english = set(stopwords.words('english'))
punct_pat = re.compile(r'[?!.,"#$%\'()*+-/:;&lt;=&gt;@\[\\\]^_`{|}~“”’]+')


def clean_text(x):
    for word in x:
        if word.lower() in stopwords_english:
            continue
        if '&amp;' in word:
            word = word.replace('&amp;', ' &amp; ')
        yield punct_pat.sub('', word)
</code></pre>

<p>Applied as:</p>

<pre><code>train['question_text'].progress_apply(lambda x: list(clean_text(x)))
</code></pre>
    </div>