<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>So in general the code is already quite good. It is well formated and easily readable. </p>

<p>From what I can see the most important task ahead is to familiarize yourself better with the stl and all the things it brings to the table:</p>

<ol>
<li><p>Use qualified calls</p>

<p>The habit of <code>using namespace std</code> is a vary bad one you should try to avoid as soon as possible. It doesnt really save you a lot and can get you in trouble quickly.</p></li>
<li><p>Use the appropriate member functions</p>

<pre><code>if (workers.size() == 0)
{
    return 0;
}
</code></pre>

<p>This is technically correct and not even too bad performance wise for <code>std::vector</code>. However this is terrible for every other container. All containers feature a <code>empty()</code> method that should be used </p>

<pre><code>if (workers.empty())
{
    return 0;
}
</code></pre>

<p>The advantages are numerous. First you can never be too sure if <code>workers.size() == 0</code> is really correct. Did he mean <code>!= 0</code> or maybe <code>== 1</code> or whatever. With <code>empty</code> the intend is clear and there are only two possible cases which are often quite obvious to check. Also for any non-continuous container e.g <code>std::unorderd_set</code>, <code>std::set</code>, <code>std::forward_list</code> and <code>std::list</code> the determination of <code>size</code> requires a full traversal of the container. In contrast <code>empty</code> only checks a single pointer. So it is considerable cheaper.</p></li>
<li><p>Know the constructors</p>

<p>The elements in the standard containers are value constructed</p>

<pre><code>vector&lt;int&gt; potential;
potential.resize(m + n);
for (int i = 0; i &lt; m + n; i++)
{
    potential[i] = 0;
}
</code></pre>

<p>Is equivalent to this</p>

<pre><code>vector&lt;int&gt; potential(m + n);
</code></pre>

<p>If you have a certain value in mind you can also write it more explicitely as</p>

<pre><code>vector&lt;int&gt; potential(m + n, 0);
</code></pre>

<p>This also works for nested containers so instead of</p>

<pre><code>vector&lt;vector&lt;bool&gt;&gt; direction;
direction.resize(n);
for (int i = 0; i &lt; n; i++)
{
    direction[i].resize(m);
    for (int j = 0; j &lt; m; j++)
    {
        direction[i][j] = true;
    }
}
</code></pre>

<p>We can write</p>

<pre><code>vector&lt;vector&lt;bool&gt;&gt; direction(n, std::vector&lt;bool&gt;(m, true));
</code></pre></li>
<li><p>Try to enforce const correctness</p>

<p>I know this can seem like a lot of clutter but always mark constants as const so code like</p>

<pre><code>bool tight = costs[visiting][neighbor - n] - potential[visiting] - potential[neighbor] == 0;
if (direction[visiting][neighbor - n] &amp;&amp; tight)
    ...
</code></pre>

<p>Should be written as</p>

<pre><code>const bool tight = costs[visiting][neighbor - n] - potential[visiting] - potential[neighbor] == 0;
if (direction[visiting][neighbor - n] &amp;&amp; tight)
    ...
</code></pre>

<p>There is a great talk by <a href="https://www.youtube.com/watch?v=-Hb-9TUyjoo" rel="nofollow noreferrer">Kate Gregory</a> about it. In a nutshell you want to convey as much information as possible, so that any variable that is <em>not</em> <code>const</code> sticks out</p></li>
<li><p>Do not build mountains</p>

<p>There is only one occurence of it but try to avoid writing canyons like</p>

<pre><code>for (...) {
    if (condition) {
        ...
    }
}
</code></pre>

<p>In this example there is only one level of identation but from personal expirience I can tell you that these mountains grow. Instead use early returns/continues</p>

<pre><code>for (...) {
    if (!condition) {
        continue;
    }
    ...
}
</code></pre>

<p>This greatly improves readability if there are multiple nested conditions and also makes is much clearer what is a precondition and what not.</p></li>
<li><p>Know you algorithms</p>

<p>The stl offers a great variety of algorithms. There are numerous cases where you could use <code>std::accumulate</code> or <code>std::copy_if</code>. Try to learn those algorithms by heart. In general you can assume that the algorithms of the standard library are better tested and more performant that what you or I could cook up</p></li>
</ol>
    </div>