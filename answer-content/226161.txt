<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Nice little bit of fun code, and almost working. This is a long review as I got carried away.</p>
<p>First</p>
<h2>A Bug</h2>
<p>The variable i is undeclared and thus using the global (higher level) scope. This can create very hard to find bugs in code that uses your code. Always declare all the unique variables you use in a function.</p>
<p>You should be using</p>
<ol>
<li><a href="https://developer.mozilla.org/en-US/docs/Glossary/strict_mode" rel="nofollow noreferrer">strict mode</a> via the directive <code>"use strict"</code> at the top of your code</li>
<li>Use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules" rel="nofollow noreferrer">JavaScript modules</a> as they live in there own isolated local scope (still access global scope) and automatically execute in strict mode</li>
</ol>
<p>Some will argue that undeclared variable is not a bug, all will agree it is dangerous, and I prefer to call it at its worst, a BUG.</p>
<p>with that out the way there are some problems.</p>
<h2>Why obfuscate?</h2>
<h3>Protect IP</h3>
<p>Generally we obfuscate code to make the legal department relax, rather than think that the very expensive intellectual property (IP) is an open book for anyone visiting the site to read (thus steal). However any coder can read obfuscated code, it just needs a little more effort, with a good IDE it is near effortless compared to poorly written code.</p>
<p>Does your function help protect the IP? No! if it can run it can be understood.</p>
<h3>Performance</h3>
<p>Code obfuscation comes with a secondary benefit, and the main reason it is still widely used. Namely as a code minifier reducing load time and reducing JIT (compile time) a little (no long string searching during tokenization)</p>
<p>Your code does not minify the source. So we are left with no benefit.</p>
<p>As an exercise just for the hell of it I will continue</p>
<h2>Reliability</h2>
<p>Good obfuscation means that the obscured code will run exactly the same as the original. Even the slightest change in behavior means that the obfuscated code is useless.</p>
<p>Your code fails the reliability test as it changes the type of the value you are obscuring.</p>
<p>Behavior problems</p>
<pre><code>// single digit 6 obscured becomes [+!+[] + [+[]] - !+[]]

[+!+[] + [+[]] - !+[]] == [+!+[] + [+[]] - !+[]]; // false
[+!+[] + [+[]] - !+[]] === [+!+[] + [+[]] - !+[]]; // false
[+!+[] + [+[]] - !+[]] == 6; // false
[+!+[] + [+[]] - !+[]] === 6; // false

// double digit 42 obscured [!+[]+!+[]+!+[]+!+[]]+[!+[]+!+[]] removed white spaces

[!+[]+!+[]+!+[]+!+[]]+[!+[]+!+[]] == [!+[]+!+[]+!+[]+!+[]]+[!+[]+!+[]]; // true
[!+[]+!+[]+!+[]+!+[]]+[!+[]+!+[]] === [!+[]+!+[]+!+[]+!+[]]+[!+[]+!+[]]; // true
[!+[]+!+[]+!+[]+!+[]]+[!+[]+!+[]] == 42; // true
[!+[]+!+[]+!+[]+!+[]]+[!+[]+!+[]] === 42; // false
</code></pre>
<p>The difference between the two is due to what they evaluate to.</p>
<ul>
<li>The single digit returns an array containing the number it represents as the first item.</li>
<li>The double digit something more complex, an expression (which rightly it should) that evaluates to a string representation of the number</li>
</ul>
<p>:</p>
<pre><code>// using 42

console.log(typeof [!+[]+!+[]+!+[]+!+[]]+[!+[]+!+[]]); // &gt;&gt; "object2"
console.log(typeof ([!+[]+!+[]+!+[]+!+[]]+[!+[]+!+[]])); // &gt;&gt; "string"
</code></pre>
<p>Expressions are evaluated using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence" rel="nofollow noreferrer">operator precedence</a> meaning that if I use your function to obscure an expression I get different results for the very same expression, just its form has changed.</p>
<p>EG...</p>
<pre><code>// evaluating obfuscated left size only makes the following statements true
// See hidden snippet below
6 + 3 * 12 == 632 
(3 * 12) + 6 == 326
6 + 3 * (12) == 636
(12 * 3) + 6 = 76
</code></pre>
<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>function obfuscateNumber(num) {
  var i, outputStr = "", tokens = 0;
  [...num.toString()].forEach(char =&gt; {
    let digit = Number(char);

    outputStr += (tokens &gt; 0 ? " + " : "")
    if (digit === 0) {
      outputStr += (tokens &gt; 0 ? "[" : "") + "+[]" +
        (tokens &gt; 0 ? "]" : "");
    } else if (digit === 1) {
      outputStr += (tokens &gt; 0 ? "[" : "") + "+!+[]" +
        (tokens &gt; 0 ? "]" : "");
    } else if (digit &lt;= 5) {
      outputStr += "[";
      for (i = 0; i &lt; digit; i++) { outputStr += (i == 0 ? "" : " + ") + "!+[]" }
      outputStr += "]";
    } else {
      outputStr += "[+!+[] + [+[]]";
      for (i = 0; i &lt; 10 - digit; i++) { outputStr += " - !+[]" }
      outputStr += "]";
    }
    tokens++;
  });

  return outputStr;
}

function obfuscateSource(func, method) {
  return func.toString().replace(/[0-9]+/g, method);
}

function obfuscateFunction(func, method) {
  return Function("return " + obfuscateSource(func, method) + ";")();
}

function testObf(func, method) {
  const asFunc = Function("return " + func);
  const A = asFunc();
  const ASrc = func.toString();
  const B = obfuscateFunction(asFunc, obfuscateNumber)();
  const BSrc = obfuscateSource(asFunc, obfuscateNumber).split(/\{|\}/g)[1].split("return")[1];
  if (A == B) { // ignore 
  } else {
    log(ASrc + " != " + BSrc);
    log("Failed " + A + " !== " + B);
  }
}
testObf("(6)", obfuscateNumber)
testObf("(12)", obfuscateNumber)
testObf("(3)", obfuscateNumber)
testObf("6 + 3 * 12", obfuscateNumber)
testObf("(3 * 12) + 6", obfuscateNumber)
testObf("6 + 3 * (12)", obfuscateNumber)
testObf("(12 * 3) + 6", obfuscateNumber)


function log(textContent) {
  document.body.appendChild(Object.assign(document.createElement("div"), {
    textContent
  }));
}</code></pre>
<pre class="snippet-code-css lang-css prettyprint-override"><code>body {
  font-family: monospace;
  font-size: 10px;
  
}</code></pre>
</div>
</div>

<h2>Can be fixed</h2>
<p>You function can be fixed by adding some addition syntax around the obfication. eg if single digit <code>return outputStr + "[0]"</code> and if more than one digit <code>return "Number(" + outputStr + ".join(''))"</code> but really why bother.</p>
<h2>Numbers are obfuscated</h2>
<p>I would argue that numbers are already obfuscated as numbers do not carry inherent meaning.</p>
<p>42 has no meaning (WHAT!!!), it requires context <code>life: {universe: {everything: {meaningOf: 42}}}</code>. Even then contemporary pop cult gives it meaning, that the vast majority of the world population will not understand.</p>
<p>The meaning is more than just context it must be used to give it full meaning.</p>
<p>Consider <code>const name = "At the end of the universe the restaurant Milliways".slice(42);</code> What does 42 mean? "Milliways", yes easy guess, or a bad case of gastric and I might have meant "illiways". To be sure most people will need to count the characters to find where the 43 character is (Don't bother the food is always 5 star.)</p>
<p>I think you get the point.</p>
<h2>Magic dem numerals are...</h2>
<p>A number is meaningless without context and usage. Using numbers in code is generally frowned upon, we call them magic numbers and consider unnamed numbers as bad practice.</p>
<p>Example of magic numbers and meaning</p>
<pre><code> //almost meaningless unless you do math in your head very well
 const vect = {
    x: Math.cos(7.853981633974483),
    y: Math.sin(7.853981633974483)
 }
 
 // give it some meaning but still kind of ambiguous
 const deg90CW = 7.853981633974483; 

 // till we use it 
 const down = {
    x: Math.cos(deg90CW),
    y: Math.sin(deg90CW)
 }
</code></pre>
<p>So we obfuscate the number <code>7.853981633974483</code> but have we really lost the meaning when the code now looks like</p>
<pre><code> // hide da num form peiring eyeses
 const deg90CW = ([+!+[] + [+[]] - !+[] - !+[] - !+[]] + [+!+[] + [+[]] - !+[] - !+[]] + [!+[] + !+[] + !+[] + !+[] + !+[]] + [!+[] + !+[] + !+[]] + [+!+[] + [+[]] - !+[]] + [+!+[] + [+[]] - !+[] - !+[]] + [+!+[]] + [+!+[] + [+[]] - !+[] - !+[] - !+[] - !+[]] + [!+[] + !+[] + !+[]] + [!+[] + !+[] + !+[]] + [+!+[] + [+[]] - !+[]] + [+!+[] + [+[]] - !+[] - !+[] - !+[]] + [!+[] + !+[] + !+[] + !+[]] + [!+[] + !+[] + !+[] + !+[]] + [+!+[] + [+[]] - !+[] - !+[]] + [!+[] + !+[] + !+[]]) / 10; 

 const down = {
    x: Math.cos(deg90CW),
    y: Math.sin(deg90CW)
 };
</code></pre>
<p>The value is really irrelevant to the reader of the code, the meaning is in the name and use.</p>
<h2>Meaning of life <code>0b101010</code>, <code>052</code>, <code>42</code>, or <code>0x2A</code></h2>
<p>In JavaScript you can obscure numbers using any of the native number bases, base (Hex) 16 will also give you a slight minification in some situations. Only the very best (practiced) can use hex as numbers in their heads without the need to convert to base 10. Yet obscured code needs only an IDE and some time to understand.</p>
    </div>