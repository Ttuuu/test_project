<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Main</h1>

<p>You have your <code>Main</code> class extend <code>JFrame</code>.  This is unnecessary.  You are not adding any functionality to the <code>JFrame</code>; you are merely using one.</p>

<p>You are inconsistent in your use of <code>this.</code>.  You have it explicitly only for <code>this.addKeyListener(...)</code>, and implicitly reference it in <code>add(...)</code>, <code>setTitle(...)</code>, <code>setResizable(...)</code>, and so on.  Why the distinction?</p>

<p>Why doesn't <code>initUI()</code> show the frame?  Not showing it makes your code more complex, since you have to return the <code>Main</code> object, and then call <code>.setVisible(...)</code>.</p>

<p>Simplified code:</p>

<pre><code>public class Main {

    private static void initUI() {
        JFrame frame = new JFrame();

        frame.add(new PaintSurface());
        frame.addKeyListener(new KeyEvents());

        frame.setTitle("Pong");

        frame.setResizable(false);
        frame.pack();

        frame.setLocationRelativeTo(null);
        frame.setDefaultCloseOperation(EXIT_ON_CLOSE);

        frame.setVisible(true);
    }

    public static void main(String[] args) {
        EventQueue.invokeLater(Main::initUI);
    }
}
</code></pre>

<h1>PaintSurface</h1>

<h2>Extending JPanel</h2>

<p><code>PaintSurface</code> does need to extend <code>JPanel</code> because it is overriding <code>paintComponent(...)</code>.  However you should actually use the <code>@Override</code> annotation so you can be sure you're overriding an existing method, instead of accidentally creating a new one.  Also, the method should be <code>protected</code>, not <code>public</code>:</p>

<pre><code>public class PaintSurface extends JPanel {
   ...

   @Override
   protected void paintComponent(Graphics g) {
       ...
   }

   ...
}
</code></pre>

<h2>java.util.Timer &amp; java.util.TimerTask</h2>

<p><strong>NO!  Absolutely not! Full Stop.</strong></p>

<p>Swing is not a thread-safe GUI.  All interactions with Swing components must be on the Event Dispatching Thread (EDT).  <code>java.util.Timer</code> and <code>java.util.TimerTask</code> objects do not execute on the EDT, so you'd need to wrap the code in your <code>ScheduleTask::run()</code> method inside an <code>EventQueue.invokeLater()</code> runnable.</p>

<p>Instead, just use <a href="https://docs.oracle.com/javase/9/docs/api/javax/swing/Timer.html" rel="noreferrer"><code>javax.swing.Timer</code></a> which executes on the EDT.</p>

<p>In the <code>ActionListener</code>, update your game state (move ball, paddle, update score) and call <code>paint_surface.repaint()</code>.</p>

<h2>Graphics2D</h2>

<p>Don't store graphics contexts.  Just pass them to the paint routines.  So instead of:</p>

<pre><code>    ball.setGraphics(graphics);
    paddle.setGraphics(graphics);

    ball.drawBall();
    paddle.drawPaddle();
</code></pre>

<p>use:</p>

<pre><code>    ball.drawBall(graphics);
    paddle.drawPaddle(graphics);
</code></pre>

<p>And don't dispose of the <code>graphics</code> context yourself, as the code which called you <code>paintComponent(g)</code> method may still be using it.</p>

<p>Do not create objects inside of paint routines.  The <code>Font</code> should be created once, during construction of the <code>PaintSurface</code>, and stored in a member variable.</p>

<h2>Static Members</h2>

<p>Why is <code>ball</code> a static member of <code>PaintSurface</code>?  <code>PaintSurface.ball</code> isn't used anywhere.</p>

<p>Why is <code>paddle</code> a static member of <code>PaintSurface</code>?  It would be better to pass the <code>PaintSurface</code> object to the <code>Ball</code> constructor, and store a copy of it there, so the ball could access the paint surface size, and paddle object without the need for a <code>static</code>.  You could also pass the <code>PaintSurface</code> object to the <code>KeyEvents</code> constructor.</p>

<h1>Score</h1>

<p>Again, no.  A class for a global variable is wrong.  The score should simply be a member variable of the <code>PaintSurface</code>.</p>

<h1>WTF</h1>

<p>I've never used <code>Toolkit.getDefaultToolkit().sync();</code>.  It is not necessary.  Do your drawing only from the EDT, and only use Swing timers.  If background processing is needed (it isn't here), use <code>SwingWorker</code> threads.</p>

<h1>Bugs</h1>

<blockquote>
  <p>In addition, I've noticed some bugs in the program, but I cannot seem to find them.</p>
  
  <ul>
  <li>The game has a short but noticeable lag spike.</li>
  <li>The ball gets stuck in the paddle, and that causes the score to rapidly increase.</li>
  </ul>
</blockquote>

<p>Code Review is not for debugging help on known bugs, so you're on your own for the ball getting stuck in the paddle.</p>

<p>Using the <code>javax.swing.Timer</code> will help fix your lag issue, but may not entirely remove it.  To achieve smooth animation, games typically measure the time from one update to the next, and use the duration and the objects' velocities to determine how far objects should move from their locations at the last update period.</p>
    </div>