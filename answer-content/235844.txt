<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A few subjective points...</p>

<p><strong>Isolation</strong></p>

<p>Going forward, you're going to want to isolate the UI from the algorithm as much as possible.  So, using methods to break up the algorithm as suggested by @Doi9t is definitely worth considering.  I think it's also worth considering making the output stream a class field for the moment.  This is going to be closer to the <code>log</code> approach that can be more prevalent in larger programs, so it's good to get into the habit early.</p>

<p>Something like:</p>

<pre><code>private static final PrintStream CONSOLE = System.out;
</code></pre>

<p>and used:</p>

<pre><code>CONSOLE.print("Money in Euro: ");
</code></pre>

<p><strong>Redundancy</strong></p>

<p>Generally you want to minimise the amount of work that's done within a loop (it has to be done every time).  So if you can do a bit of work beforehand then it can make the loop more efficient as well as making it clearer what's happening.  With that in mind, a small change to calculate the yearly increase rate would change your calculation to:</p>

<pre><code>double yearlyIncreaseRate = 1.0 + (rate/100);

for (int i = 1; i &lt;= years; i++) {
    money *= yearlyIncreaseRate;
    CONSOLE.println("Money after " + i + ". years: " + money);
}
</code></pre>

<p><strong>final</strong></p>

<p>I like to use final whenever I can, to indicate that I'm not expecting a variable to change.  As it stands, you're not expecting most of your inputs to change.  So I'd consider declaring them as final, which ties in nicely with declaring the variables at the same point as their first usage:</p>

<pre><code>final double rate = scanner.nextDouble();
</code></pre>

<p><strong>naming</strong></p>

<p>Your variable names are quite concise.  For a small program that's probably fine, however the cost of having more descriptive names is small and it can make algorithms easier to follow.  <code>annualInterestRate</code> vs <code>rate</code>, <code>termYears</code> vs <code>years</code>.  </p>
    </div>