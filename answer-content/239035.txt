<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Datatype</h2>

<p>The <code>size_t size</code> is appropriate, but <code>int top</code> is less. This effectively limits an entire <code>size_t</code> to just storing <code>INT_MAX</code>, and the only value that is negative is -1, the rest are wasted. <code>gcc</code> gave me a warning about comparing integers of different signs, but they should moreover be the same type because they are both storing indices; instead of <code>size</code> and <code>top</code>, it's more effective to store <code>capacity</code> and <code>size</code>, which is <code>top + 1</code>.</p>

<h2>Code Coverage</h2>

<p>You don't account for all return values from <a href="https://pubs.opengroup.org/onlinepubs/009695399/functions/malloc.html" rel="nofollow noreferrer"><code>malloc</code></a>; specifically, if null is returned, you program will write to it and crash.</p>

<p>Error messages are printed on <code>stderr</code>, which is a good habit, especially if one  is doing a unix command-driven application. However, in a general library, I would not expect output from the code at all, (except when I ask.) This probably necessitates having a way to return an error condition, such as a return,</p>

<pre><code>if(c &lt; 0) return errno = EDOM, 0;
</code></pre>

<p>or just silently ignoring mis-formed input like the <code>stack_push</code> is already doing for the size,</p>

<pre><code>if(stack-&gt;size &gt;= stack-&gt;capacity || c &lt; 0) return;
</code></pre>

<h2>Naming</h2>

<p>You've come up with a naming system that reduces potential namespace conflicts when defining non-static functions carefully. This is excellent for the reuseabity of your code.</p>

<p><code>_stack</code> is a dangerous name, as explained in the <a href="http://c-faq.com/decl/namespace.html" rel="nofollow noreferrer">C faq</a>, "all identifiers beginning with an underscore are reserved for ordinary identifiers (functions, variables, typedefs, enumeration constants) with file scope." Also, <code>typedef</code> and tags have different namespace, <em>and</em> your names are distinct anyway, so you aren't really gaining much. You aren't self-referencing, so you might as well make it an anonymous <code>struct</code>. However, even if you don't agree, it's worth checking out the <a href="https://www.kernel.org/doc/html/v4.10/process/coding-style.html#typedefs" rel="nofollow noreferrer">Linux kernel style typedef</a>, (which says it's a mistake to <code>typedef</code> in this case.)</p>

<p>I would say that capitalized <code>typedef</code> names have a <a href="https://en.wikipedia.org/wiki/Naming_convention_(programming)" rel="nofollow noreferrer">connotation of being constant</a>. However, has some precedent in <code>C</code>, (<em>eg</em>, <code>FILE</code>.)</p>

<h2>Design</h2>

<p>Writing a test case is a great software engineering design practice.</p>

<p>Your usage of <code>assert</code> is effective at specifying the contract must be followed when calling a function.</p>

<p>In 3 places you mix declarations and code that could easily be swapped to make it C90-compatible, should you so desire.</p>

<p>Your design choice of specifying the stack size and <code>STACK_SIZE</code> is confusing. While it finds use in existing <code>char</code> arrays that one wants to put a stack on top of temporarily, or perhaps stacks on the stack (<em>sic</em>,) it's generally better to contain the implementation's external dependencies as much as possible. Instead of passing <code>mem</code>, consider,</p>

<pre><code>struct Stack *stack_create(const size_t capacity) {
    struct Stack *output;

    assert(capacity);

    if(!(output = malloc(sizeof *output + capacity))) return 0;

    output-&gt;mem = (char *)(output + 1);
    output-&gt;capacity = capacity;
    output-&gt;size = 0;
    return output;
}
</code></pre>
    </div>