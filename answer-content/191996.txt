<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>We'll have a look at your code from the top to the bottom. The proper indentation makes that easy.</p>

<h1>Magic numbers and defines</h1>

<p>First of all, it's great that you've used <code>BUF_SIZE</code> instead of magic numbers, e.g.</p>

<pre><code>char buf[1024 * 4]; // bad!
</code></pre>

<p>However, <code>#define</code>s can be error prone. You've used parentheses, which are often necessary. Furthermore, <code>BUF_SIZE</code> doesn't exist in your compiled program anymore, which can lead to some confusion if you want to debug. So consider <a href="https://stackoverflow.com/questions/1674032/static-const-vs-define-vs-enum">the possible alternatives</a>. In this case, a <code>#define</code> is fine. But there is no need for abbreviation:</p>

<pre><code>//! Buffer size for reading from stdin.
#define BUFFER_SIZE (1024 * 4)
</code></pre>

<p>While we're at it, add some documentation. <code>BUFFER_SIZE</code> and <code>buf[BUFFER_SIZE]</code> are only some lines away from each other, but that might change later. The <code>!</code> after <code>//</code> is <a href="http://www.doxygen.nl/" rel="nofollow noreferrer">Doxygen specific</a>, you can ignore it if you don't use Doxygen.</p>

<h1>Declarations and initializations</h1>

<p>You use C99 and therefore can declare variables as late as you want. Whenever you declare a variable but set it a lot later, try to rewrite it as initialization at the right point. For example, <code>ch</code> isn't used until <code>ch = buf[k]</code>. We should <strong>keep</strong> it's <strong>scope limited</strong>. That way we cannot accidentally reuse variables.</p>

<p>If we follow this suggestion then <code>i</code>, <code>k</code> and <code>ch</code> get limited in their scope. We will have a look at that later, though. And since we already renamed <code>BUF_SIZE</code> to <code>BUFFER_SIZE</code>, we could also rename <code>buf</code> to <code>buffer</code>. You can of course choose other names, but again: there is no need to abbreviate. Disk space isn't expensive anymore, so choose names that you still understand after several months or years when someone calls you in the middle of the night.</p>

<h1>Input and <code>sizeof</code> usage</h1>

<p><a href="http://en.cppreference.com/w/c/io/fread" rel="nofollow noreferrer"><code>fread(...,..., SIZE ,...)</code></a> may not return <code>SIZE</code>. That can either happen if you're at the end of the file or if an error happens. You should check the <code>FILE*</code> with <code>feof</code> or <code>ferror</code> if that happens.</p>

<p>We stay at <code>fread</code>. While it's unlikely that you change <code>buffer</code>'s type, it's usually good practice to use <code>sizeof(*buf)</code> or <code>sizeof(buf[0])</code>. If you ever change <code>char buffer[BUFFER_SIZE]</code> to <code>mychar buffer[BUFFER_SIZE]</code>, you don't have to remember to change <code>sizeof(char)</code> to <code>sizeof(mychar)</code>.</p>

<h1>State machines and repetition</h1>

<p>Your loop is essentially a state machine. The state machine itself looks fine. However, there is a lot of repetition. We have</p>

<pre><code>while (i-- &gt; 0) fputs(placeholder, stdout);
</code></pre>

<p>four times. That <em>really</em> asks for a function:</p>

<pre><code>/**
 * \brief Puts the given \c str \c count times on \c stream.
 * \param str null-terminated character string to be written
 * \param count number of times \c str shall be written
 * \param stream output stream
 * \returns a non-negative value on success
 * \returns EOF on error and sets the error indicator
*/
inline void fputs_repeat(const char * str, size_t count, FILE * stream) {
    int value = 0;
    while (count-- &gt; 0) {
        value = fputs(str, stream);
        if (value == EOF) {
            return EOF;
        }
    }
    return value;
}
</code></pre>

<p>Now we can just use <code>fputs_repeat(placeholder, indentation, stdout)</code> wherever you've used <code>while (i-- &gt; 0) ...</code>. We would now end up with the following variant:</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt; /* EXIT_SUCCESS */

#define BUFFER_SIZE (1024 * 4)

inline void fputs_repeat(const char * str, size_t count, FILE * stream) {
    int value = 0;
    while (count-- &gt; 0) {
        value = fputs(str, stream);
        if (value == EOF) {
            return EOF;
        }
    }
    return value;
}

int main(int argc, char **argv) {

    char buffer[BUF_SIZE] = {0};
    const char placeholder[] = "  ";
    unsigned int indent = 0;
    char is_string = 0;
    char escaped = 0;
    size_t n;

    while (0 &lt; (n = fread(&amp;buffer, sizeof(buffer[0]), BUFFER_SIZE, stdin))) {
        // exercise: add error handling
        for (unsigned int k = 0; k &lt; n; k++) {
            char ch = buffer[k];

            if (is_string) {
                /* Inside quoted string */
                putchar(ch);
                if (! escaped) {
                    if (ch == '"') {
                        /* Unescaped quote, string just ended */
                        is_string = 0;
                    } else if (ch == '\\') {
                        escaped = 1;
                    }
                } else {
                    escaped = 0;
                }
                continue;
            }

            switch (ch) {

            case ' ':
            case '\t':
            case '\n':
            case '\r':
                /* Ignoring original formatting */
                break;

            case '{':
            case '[':
                putchar(ch);
                putchar('\n');
                fputs_repeat(placeholder, ++indent, stdout);
                break;

            case '}':
            case ']':
                putchar('\n');
                fputs_repeat(placeholder, --indent, stdout);
                putchar(ch);
                if (indent == 0) putchar('\n');
                break;

            case ',':
                putchar(',');
                putchar('\n');
                fputs_repeat(placeholder, indent, stdout);
                break;

            case ':':
                putchar(':');
                putchar(' ');
                break;

            case '"':
                /* String/property key start, see if clause on top */
                putchar('"');
                is_string = 1;
                break;

            default:
                /* Numbers, true, false, null */
                putchar(ch);
                break;
            }
        }
    }

    return EXIT_SUCCESS;
}
</code></pre>

<h1>Output</h1>

<p>You use <code>putchar</code> quite often. In some instances multiple calls can get replaced by <code>puts</code> or <code>fputs</code>. For example, instead of</p>

<pre><code>putchar(',');
putchar('\n');
</code></pre>

<p>you could just use</p>

<pre><code>puts(",");
</code></pre>

<p>and instead of </p>

<pre><code>putchar(':');
putchar(' ');
</code></pre>

<p>you could use</p>

<pre><code>fputs(": ", stdout);
</code></pre>

<p>Either way, if you're striving for performance, you want to keep the number of function calls low, so consider an output buffer if your current variant isn't fast enough for your liking. But first measure your program before you change it.</p>

<h1>Goals</h1>

<p>Let's revisit your goals and check them now.</p>

<blockquote>
  <ul>
  <li>given valid input produce valid formatted JSON output</li>
  </ul>
</blockquote>

<p>Since you don't introduce additional characters in strings and never remove characters from the original JSON except whitespace (outside of strings), you've reached that goal.</p>

<blockquote>
  <ul>
  <li>constant memory usage</li>
  </ul>
</blockquote>

<p>As there is only a single buffer, you've reached that goal too, although <code>fputs</code> might buffer.</p>

<blockquote>
  <ul>
  <li>minimal viable program (smallest program that solves a particular problem)</li>
  </ul>
</blockquote>

<p>Ah, that's a definition problem. What's minimal? What's "smallest"? Your program is short, but a single additional function removed some repetition which can lead to a technical debt. That function won't increase the size of your program, though.</p>

<blockquote>
  <ul>
  <li>feature free</li>
  </ul>
</blockquote>

<p>Check.</p>

<blockquote>
  <ul>
  <li>easy to read and understand</li>
  </ul>
</blockquote>

<p>The <code>! escaped</code> logic took a little bit, but apart from that, goal reached.</p>

<blockquote>
  <ul>
  <li>be C99 compatible</li>
  </ul>
</blockquote>

<p>Yes, but use those features I've mentioned above (inline functions, late declarations).</p>

<blockquote>
  <p>Also program doesn't handle <code>SIGPIPE</code>, therefore it may be killed. Just tested it. I don't see a clear solution, should I set <code>SIG_IGN</code>?</p>
</blockquote>

<p>If the input pipe is broken, the JSON input will suddenly end and you have invalid JSON. Do you need to handle invalid JSON at that point? It's a non-goal, as you said.</p>
    </div>