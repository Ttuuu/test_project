<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Very interesting post.</p>
<h2>Naming Conventions</h2>
<p>The success of your code is dependent on how the controls on the userform are named.  Is <code>miche</code> the most similar?  In my opinion no.  Controls will generally, have a prefix of suffix to identify the control type.  For this reason, when comparing a word to a list control control names, the control name that contains a complete match should be taken over a partial match.  Along the same lines, Camel and Pascal case naming conventions dictate that a the control name capitalization may need to be altered.  Why would you give precedence to <code>miche</code> over <code>Michele</code>?</p>
<h2>Using Arrays for String Comparisons</h2>
<p>Creating an array for comparison as you shorten the match is very inefficient.  Using a variant array to store characters is itself inefficient. (<a href="https://docs.microsoft.com/en-us/office/vba/language/reference/user-interface-help/data-type-summary" rel="nofollow noreferrer">See MSDN: Data type summary</a>) Consider that it takes 10 bytes + the string length to store a string and 16-22 bytes need to be reserved for each element on an array.   So it takes 16 bytes of memory to store <code>michele</code> as a string and a minimum of 96 bytes as a variant array of characters.<br>
With all things being equal, you can not write a VBA function that will outperform a native VBA function that is written in C++.  <code>Instr()</code>, <code>Instr$()</code>, <code>InstrB()</code>, <code>Mid()</code>, <code>Mid$()</code> and <code>MidB()</code> are insanely fast and will outperform anything you try to replace them with.  The <code>Instr()</code> functions can also make text comparisons which will ignore the text case.</p>
<p>There is a small performance benefit to using byte arrays but IMO it is not significant enough to merit extra work.</p>
<h2>Use the Right Name for the Job</h2>
<p>• toString As String:  It is usually obvious how <code>Object.toString</code> is to be used. toString does not indicate its context.   Consider <code>Match</code>
• between As Variant:  This is very confusing considering that you are considering characters between the start and end of a string.  Consider <code>MatchList</code></p>
<h2>Miscellaneous</h2>
<blockquote>
<pre><code>' range to array
between = between.value
</code></pre>
</blockquote>
<p>This throw an error in my test.  I assume that it was added when the OP was preparing the code to post.</p>
<h2>GetCloseCharactersScore()</h2>
<p>Always handle obvious errors don't escape them.  <code>Mid()</code> will throw an "Invalid procedure call or argument" if the <code>Index &lt; 1</code>. <code>Mid()</code> will also return a vbNullString if the <code>Index &gt; Length</code> which might cause a false positive (although I doubt it).  You should handle</p>
<pre><code>Private Function GetCloseCharactersScore(comparison As String, index As Long, toString As String, i As Long) As Double
    If index &gt; 1 And i &gt; 1 And index &lt; Len(comparison) And index &lt; Len(toString) Then
        Dim leftOriginal        As String
        Dim rightOriginal       As String
        Dim leftComparison      As String
        Dim rightComparison     As String
    
        leftOriginal = Mid(toString, i - 1, 1)
        rightOriginal = Mid(toString, i + 1, 1)
        leftComparison = Mid(comparison, index - 1, 1)
        rightComparison = Mid(comparison, index + 1, 1)
    
        GetCloseCharactersScore = IIf(leftOriginal = leftComparison, 0.5, -0.5) + IIf(rightOriginal = rightComparison, 0.5, -0.5)
    Else
        GetCloseCharactersScore = -0.5
    End If
End Function
</code></pre>
<h2>Is There a Better Way?</h2>
<p>Again, this will depend on your naming conventions.  My version takes the number of letters in the match value (from right to left) found in the comparison / length of the match value * weighted value and minuses the number of unmatched letters * a different weighted value to determine the overall score. The comparison is done right to left because you will seldom see a match where the first characters were truncated, it will almost always be the last.  The weighted values will probably need to be adjusted but I think the theory is sound.</p>
<pre><code>Public Function ClosestMatch(Match As String, MatchList As Variant) As String
    Dim n As Long
    Dim Item As Variant
    Dim BestMatch As String
    Dim BestScore As Double
    Dim CurrentScore As Double
    
    For Each Item In MatchList
        CurrentScore = MatchScore(Match, Item)
        If CurrentScore &gt; BestScore Or BestScore = 0 Then
            BestMatch = CurrentScore
            BestMatch = Item
        End If
    Next
    
    ClosestMatch = BestMatch
End Function

Public Function MatchScore(ByVal Match As String, ByVal MatchItem As Variant) As Double
    Const FullMatchWeight As Long = 10
    Const UnmatchedCharacterWeight As Long = -1
    
    Dim n As Long
    Dim Score As Double
    
    For n = Len(Match) To 1 Step -1
        If InStr(1, MatchItem, Left(Match, n) &gt; 0, vbTextCompare) Then
            Score = Len(Match) / n * FullMatchWeight
            Exit For
        End If
    Next
    
    Dim UnmatchedCharacterScore As Double
    UnmatchedCharacterScore = Abs(n - Len(MatchItem)) * UnmatchedCharacterWeight
    MatchScore = Score + UnmatchedCharacterScore
    
End Function
    
</code></pre>
    </div>