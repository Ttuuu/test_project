<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Generally speaking, it is really well done, for several reasons: <code>std::tuple</code> often takes advantage of the empty base class optimization, which means that since you feed it lambdas, your class will often weigh almost nothing, and everything is correctly forwarded. The only things I see that could be improved are the following ones:</p>

<ul>
<li><p>You could <code>const</code>-qualify <code>apply</code> and <code>operator()</code>.</p></li>
<li><p><code>size</code> should be <code>static constexpr</code> instead of <code>static const</code> to make it even clearer that it is a compile-time constant.</p></li>
<li><p>You should be consistent when qualifying <code>std::size_t</code>: either use the prefix <code>std::</code> or leave it, but stay consistent.</p></li>
</ul>

<p>As you can see, these are really minor improvements. I also have some other remarks, but those will be opinions more than actual advice:</p>

<ul>
<li><p><code>int2type</code> kind of already exists in the standard and is named <a href="http://en.cppreference.com/w/cpp/types/integral_constant" rel="nofollow noreferrer"><code>std::integral_constant</code></a>. However, I will concede that it takes another template parameter for the type and that it might be too verbose for your needs.</p></li>
<li><p>I had some trouble understanding how your recursion worked because it was in ascending order. For some reason, I am more used to descending order. I would have overloaded <code>apply</code> for <code>int2type&lt;0&gt;</code> and not for <code>int2type&lt;size-1&gt;</code> and performed a descending recursion. That would have allowed me to write:</p>

<pre><code>template&lt;typename ... Ts&gt;
auto operator()(Ts&amp;&amp; ... ts)
{
    return apply(int2type&lt;sizeof ... (Fs) - 1&gt;(), std::forward&lt;Ts&gt;(ts)...);
}
</code></pre>

<p>And then, <code>size</code> wouldn't have had to be a member of the class anymore. But I have to admit that this is an opinion and not a guideline. Your code is good enough that I see almost nothing that could be improved :)</p></li>
</ul>
    </div>