<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This looks like a good (i.e. not stupid) implementation if your main requirements is efficient sequential access to the data. Addition and removal will necessarily be slower than for a Dictionary because you are wrapping a dictionary, but the time complexity is of the other work is constant, so it isn't something I would worry about too much if your goal is fast read/modification.</p>

<h2>Encapsulation</h2>

<p>Generally the encapsulation is fine, but there is one exception: <code>m_array</code> should not be publically settable. It should be <code>readonly</code> or a getter-only <code>{get; }</code> property. Being a reference type, I can't think of any downside to making it a property. Being publically settable means that anyone can change it to <code>null</code> or an array of the wrong size and break the data-structure, which is obviously bad. The other array and dictionary should also be <code>readonly</code>.</p>

<p>I do wonder why you provide an indexer as well as the array, but do not provide a setter for the indexer. The indexer will also create confusion by copying structs you want to mutate. You should probably look at whether you can hide <code>m_array</code> altogether, and do all the work via the indexer: this would produce a much tighter API if you can 'get away' with it. You may be interested to look into <a href="https://docs.microsoft.com/en-us/dotnet/api/system.arraysegment-1?view=netframework-4.8" rel="nofollow noreferrer"><code>ArraySegment</code></a> as a possible means of facilitating a somewhat tighter API if that indexer is deficient.</p>

<h2>Exception Handling</h2>

<p>I don't know you use-case, but I'd reconsier using <code>Debug.Assert</code> for input sanitisation. It would seem much better would be to exploit the <a href="https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.dictionary-2.trygetvalue?view=netframework-4.8" rel="nofollow noreferrer"><code>TryGetValue</code></a> method of <code>Dictionary'2</code> in <code>Remove</code> and <code>TryAdd</code> in <code>Add</code> to efficiency perform the check and throw under any runtime conditions.</p>

<p>Your exception messages could also be clearer. <code>"NotFound"</code>: what is not found? If you throw an exception instead of asserting, you can throw an <a href="https://docs.microsoft.com/en-us/dotnet/api/system.argumentexception?view=netframework-4.8" rel="nofollow noreferrer"><code>ArgumentException</code></a> and make it completely clear what was not found and where the caller went wrong. "IllegalRead" means nothing at all. "Double Insertion" is pretty cryptic.</p>

<p>You could also do with checking that <code>Size</code> is less than <code>Capacity</code> when adding, as this should also throw an exception, rather than relying on the order of operations to throw with an <code>IndexOutOfRange</code> exception before doing any damanger (if <code>m_guidToIDs[guid]</code> was set first, this would linger despite the operation failing, so the code is extremely brittle).</p>

<p>A check in the constructor that <code>capacity</code> is non-negative would also be nice, just to cover as much of the API surface as possible with clear and useful exceptions (it will still fail if it tries to allocate a negative length array, but an <code>ArgumentOutOfRangeException</code> would be so much nicer.</p>

<h2>Typical Câ™¯</h2>

<p>The code is mostly nice-to-read C#, though there are some bits that could be nicer:</p>

<ul>
<li><p>The <code>m_</code> member prefix is typical in C++, but much less so in C#. <code>m_array</code> should have a name consistent with being a <code>public</code> member: it should be in <code>ProperCamelCase</code>.</p></li>
<li><p>Generally it is advised that the accessibility of any member of type is made explicit e.g. <code>public class FixedCapCollectionIntGuids&lt;T&gt;</code>, <code>private int m_capactiy</code>). This avoids any confusion (particularly when people are used to using different languagse with different defaults), and makes it completely clear that <em>this is the intention</em> and you didn't just forget to qualify the accessibility.</p></li>
<li><p>The BCL uses <code>Count</code> rather than <code>Size</code> for everything: it's what people using C# will expect. I'd also argue it is clearer, because <code>Size</code> has can relate to size in memory. Conformity with the BCL also be sensible if you wanted to implement <a href="https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.ireadonlylist-1?view=netframework-4.8" rel="nofollow noreferrer"><code>IReadOnlyList&lt;T&gt;</code></a> (for which you would need to provide in addition an enumerator but nothing more), which could be useful.</p></li>
<li><p>It's also typical to have <code>key, value</code> in the BCL add methods, so you might want to consider having the same in <code>Add</code>.</p></li>
<li><p>Usually we use 4 spaces for indentation.</p></li>
</ul>

<h2>Other Comments</h2>

<ul>
<li><p>While I think I see why you would except this to only be used with <code>struct</code>s, I don't see why you need limit this general purpose data structor to only <code>struct</code>s. If you don't have a reason, I would remove the generic constraint (it has no semantic/performance impact for when <code>struct</code>s are used). The only change this would warrant would be clearing removed values (so that you don't hold references to objects that are not in the structure). This is just a suggestion, and 'that would increase the API surface and costs of maintance/testing' would be a good reason to not do this.</p></li>
<li><p><code>public T this[int key]</code> should have parameter <code>guid</code> for consistency.</p></li>
<li><p><code>FixedCapCollectionIntGuids</code> is an odd name; I will only say that shorting <code>Cap</code> to <code>Capacity</code> is not a good idea: it only obfuscates the meaning.</p></li>
<li><p>For a 'tricky' API like this one (where it's very easy to mis-use <code>m_array</code>), you need to provide inline documentation (<code>///</code>) for all <code>public</code> parts of the API. This should detail the usage and assumptions, and explain things like "this is not thread safe at all", and that <code>m_array</code> may be larger than <code>Size</code> and you should not access anything beyond index <code>Size - 1</code>. I find that the act of writing documentation makes me aware of the edge cases I need to handle, makes it possible to maintain code without having to guess at the exact intention of a method/class, and gives consumers the information and confidence they need to use your APIs as intended.</p></li>
<li><p><code>Remove</code> is a bit untidy looking: I would try to break it up a bit with empty lines, to separate the bit where you remove the old values, move the 'last' value into the inner position, and finally resize the structure. There is also a bug in <code>Remove</code>: it will go wrong if you try to remove the last element: writing the code to detect this should automatically force you to organise it so that my previous comment is addressed.</p></li>
</ul>
    </div>