<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This code is quite good for someone learning the language. You haven't made any of the common errors such as using <code>def</code> inside of function instead of <code>let</code>. I don't see anything really outright wrong with the code, so I'll just be commenting on style and things that I think can be improved. I'll just go top to bottom after addressing some things you mentioned.</p>

<hr>

<blockquote>
  <p>. . . we're not quite sure if our code complies with functional programming paradigms.</p>
</blockquote>

<p>Yes, this code is functional. You aren't needlessly mutating anything by abusing <code>atom</code>s or relying on side-effects. Really, those are major deciding factors.</p>

<hr>

<pre><code>(:use [rss-feeds-webapp.helper :refer :all])
</code></pre>

<p>Shouldn't be there. That should be tucked inside the <code>:require</code> with everything else. Use of <code>:use</code> is discouraged, as is <code>:refer :all</code> in many cases. Blanket unqualified imports of namespaces aren't ideal. Say you come back to this project a year from now. Are you going to remember what functions come from what modules? Unless the names provide enough context, you may have trouble. Bulk unqualified imports also increase the chance of having a name conflict. Always try to use <code>:as</code>, or <code>:refer [...]</code> when importing. That way you can easily see what code is coming from where, and avoid polluting your namespace.</p>

<hr>

<pre><code>(.getBytes (:body (client/get link)) "UTF-8")
</code></pre>

<p>That would benefit from using a type hint.</p>

<pre><code>; I'm assuming :body is returning a String
(ByteArrayInputStream. ^String (.getBytes (:body (client/get link)) "UTF-8"))
</code></pre>

<p>Not only does that help a smart IDE like IntelliJ give you better autocomplete suggestions, it also makes your code faster by avoiding reflection. If you run <code>lein check</code>, your call to <code>.getBytes</code> will cause the following warning:</p>

<pre><code>Reflection warning, your-file-here.clj - reference to field getBytes can't be resolved.
</code></pre>

<p>Avoiding reflection isn't a big deal in this case, but it's a good thing to keep in mind.</p>

<hr>

<p><code>get-content</code> and similar functions make good use of <code>for</code>. I'll just point out though that they can also be written in terms of <code>map</code> and <code>filter</code> as well:</p>

<pre><code>(defn get-content [item tag]
  (-&gt;&gt; item
       (filter #(= tag (:tag %)))
       (map #(first (:content %)))))

; Or

(defn get-content [item tag]
  (-&gt;&gt; item
       (filter #(= tag (:tag %)))
       (map (comp first :content))))
</code></pre>

<p>If you already have a <code>-&gt;&gt;</code> "pipe" going, it may prove to be cleaner to use <code>map</code>/<code>filter</code> here instead of <code>for</code>. This is purely a matter of taste though.</p>

<hr>

<pre><code>(defn filter-items-by-term [term author]
  (let [term (or term "")]
    (let [author (or author "")]
</code></pre>

<p>contains needless nesting. It can simply be</p>

<pre><code>(defn filter-items-by-term [term author]
  (let [term (or term "")
        author (or author "")]
</code></pre>

<hr>

<p>A lot of your code (like in the example immediately above), you're doing something like</p>

<pre><code>(or some-parameter a-default-value)
</code></pre>

<p>Now, this <em>is</em> a good way of dealing with possibly-<code>nil</code> values. The placement of the check is weird though. Take a look at <code>filter-items-by-term</code>. Why are <code>term</code> and <code>author</code> possibly <code>nil</code>? Because <code>get-feed-data</code> takes optional parameters, and passes the data, unchecked, to <code>filter-items-by-term</code>. This means that part of the implementation of <code>filter-items-by-term</code> (checking for <code>nil</code> values) is needed due to the implementation of <code>get-feed-data</code> (passing potentially <code>nil</code> values). What if you change how one of the functions work and forget to change the other? It also seems needlessly complicated that many of your functions are trying to "protect themselves" by assuming that bad data may be handed in. It would be <em>much</em> cleaner to expect that the caller, when possible, checks the data prior to calling. All your functions should expect valid data. If the caller has bad data, it's up to them to fix it. I'd make the following changes:</p>

<pre><code>(defn filter-items-by-term [term author]
  ; Assumes valid data is being passed!
  (fn [[item]]

(defn get-feed-data [link &amp; [filterTerm authorTerm]]
  ; It's now this function's duty to verify its own data
  (filter (filter-items-by-term (or filterTerm "")
                                (or authorTerm ""))
          (get-items [] link)))
</code></pre>

<p>And similarly for the other cases like this.</p>

<p>I also cleaned up <code>get-feed-data</code>. It had two things that I didn't like:</p>

<ul>
<li><p>Trailing <code>)</code> on a new line, like you would have a <code>}</code> in Java. This isn't necessary if you're using a good IDE and consistent indentation. It seems like one of you is using this style while the other isn't, since it's inconsistent. Even worse than using an unidiomatic style is applying the style inconsistently. Your teacher will mark you down for inconsistency alone if they're paying attention.</p></li>
<li><p>Trying to shove a bunch on one line. It's much better to break up long lines for readability. </p></li>
</ul>

<hr>

<p>Also in that same function, you have the long anonymous function being returned. In it, you repeatedly access <code>item</code> using keys. It might be cleaner to deconstruct <code>item</code> in the parameter list:</p>

<pre><code>(fn [[{:keys [title description creator]}]]
  (and (or
         (string/includes?
           (simplify-string (apply str title))
           (simplify-string term))
         (string/includes?
           (simplify-string (apply str description))
           (simplify-string term)))

       (string/includes?
         (simplify-string (apply str creator))
         (simplify-string author))))
</code></pre>

<p>Also note, <code>(get item :title)</code> can be written simply as <code>(:title item)</code>. Keywords implement <code>IFn</code>:</p>

<pre><code>(ifn? :hello)
=&gt; true
</code></pre>

<p>They are usable as functions that return the corresponding element when applied to a map.</p>

<hr>

<p><code>get-feed-data</code> could also make use of <code>partial</code>. You're having the function return another function so you can supply some data ahead of time, then have <code>filter</code> call it with the last bit of data. This is very common, and is the situation that <code>partial</code> was made for. Id make the following changes:</p>

<pre><code>; Note how "item" was simply added as a third parameter
(defn filter-items-by-term [term author {:keys [title description creator]}]
   ; And now a function isn't returned
  (and (or
         (string/includes?
           (simplify-string (apply str title))
           (simplify-string term))
         (string/includes?
           (simplify-string (apply str description))
           (simplify-string term)))

       (string/includes?
         (simplify-string (apply str creator))
         (simplify-string author))))
</code></pre>

<p>And now:</p>

<pre><code>(defn get-feed-data [link &amp; [filterTerm authorTerm]]
  ; Partially apply "filterTerm" and "autherTerm" to "filter-items-by-term"
  (filter (partial filter-items-by-term filterTerm authorTerm) 
          (get-items [] link)))
</code></pre>

<p>or, just manually wrap it in another function (<code>#()</code> here):</p>

<pre><code>(defn get-feed-data [link &amp; [filterTerm authorTerm]]
  (filter #(filter-items-by-term filterTerm authorTerm %)
          (get-items [] link)))
</code></pre>

<p><code>partial</code> may seem complicated at first, but this example should make it clearer:</p>

<pre><code>(let [add-five (partial + 5)]
  (println (add-five 5) (add-five 20)))

10 25
</code></pre>

<p>It returns a function that expects the rest of the arguments. This is useful when you have some data right now, and want to call the function with some other data later.</p>

<p>Why would I make this change? Why should <code>filter-items-by-term</code> care about how it's being used? Why should it need to know that the caller needs to supply some of the data later? It shouldn't.</p>

<hr>

<p>Speaking of long lines, I'd break up the <code>get-time</code> body:</p>

<pre><code>(defn get-time [date-string]
  (.format (java.text.SimpleDateFormat. "dd/MM/yyyy - HH:mm") 
           (new java.util.Date date-string)))
</code></pre>

<p>Align everything properly based on indentation (like you would in Python), and <a href="https://shaunlebron.github.io/parinfer/" rel="nofollow noreferrer">Par-infer</a> (Parenthesis Inference) can automatically handle closing braces for you. I <em>never</em> manually add <code>)</code>s when writing Clojure. IntelliJ's <a href="https://cursive-ide.com/" rel="nofollow noreferrer">Cursive</a> plugin (both free) includes Par-Infer which infers where they should be and adds them for me. I highly recommend this set-up if you plan on writing Clojure.</p>

<hr>

<p><code>get-selected-option</code> is redundant and has a confusing name. It isn't actually "getting" anything, it's a predicate. It also doesn't make sense to write <code>(if pred? true false)</code>. The predicate already returns <code>true</code> or <code>false</code> (or at least a truthy/falsey value), so the <code>if</code> here isn't needed. I'd change it to:</p>

<pre><code>(defn is-filter-term? [value filterTerm]
  (= value filterTerm))
</code></pre>

<p>Although it could be argued that this function is so simple that it should just be inlined. It's pretty clear what a simple call to <code>=</code> is checking.</p>

<hr>

<p>For <code>render-authors</code> and the function below it, I'd just use <code>map</code> here. Especially since you don't need any filtering or use of <code>:let</code>, <code>map</code> would likely be cleaner:</p>

<pre><code>(defn render-authors [content filterTerm]
  (map #(render-author-options (first %) filterTerm) 
       content))
</code></pre>

<p>But again, this a matter of taste. I will say though, if you have a iterable collection like <code>content</code>, it's a good idea to match Clojure convention and have it as the last parameter of the function. That way, you can do something like:</p>

<pre><code>(-&gt;&gt; content
     (map some-transformation)
     (render-authors some-filter-term) ; Wouldn't be possible with your current order
     (filter some-predicate))
</code></pre>

<p>Threading macros (<code>-&gt;</code> and <code>-&gt;&gt;</code> mainly) are pretty common, and writing functions that work well with them will make your life easier. You didn't use and threading macros in your code, but I also don't see any good opportunities to use them either. I'd practice using them if you intend to keep writing Clojure, as they're exceedingly helpful.</p>

<hr>

<p>In <code>get-highlighted-text-by-key</code>, there's a few notable things.</p>

<p>One, I'm not sure <code>title</code> is necessary here. It's needed in two places, and neither of those places seem to even need it. Unless my brain is just fried, <code>(conj title (apply list nested-title))</code> is just conjoining <code>(apply list nested-title)</code> to an empty vector, which will just result in a single element vector. It would make more sense to just write:</p>

<pre><code>(vector (apply list nested-title))
</code></pre>

<p>I also don't understand why you then wrap that in a <code>(apply list</code>, which just converts it to a list. You convert <code>nested-title</code> to a list with the first <code>(apply list</code>, then wrap it in a vector with <code>(conj []</code>, then convert the vector to a list with a second <code>(apply list</code> I'm not sure what you're trying to do here. It looks like that entire line could be reduced to just:</p>

<pre><code>(list (apply list nested-title))
</code></pre>

<p>Although, I'll note that that plain lists aren't used very often unless you're writing macros. Lists are simple linked lists, so they can't do <code>O(1)</code> lookups by index. Use vectors in the vast majority of cases unless you have good reason to use something else (like you're writing a macro). Simply returning the lazy list that <code>for</code> evaluates to would likely be fine here. The caller can force the result if they want to.</p>

<p>Second,</p>

<pre><code>(let [match (re-matches (re-pattern (str "(?i)(.*)(" filterTerm ")(.*)"))(apply str (get item key)))]
  (if match
</code></pre>

<p>(Besides being <em>way</em> too long of a line) is a perfect case to make use of <code>if-let</code>:</p>

<pre><code>(if-let [match (re-matches (re-pattern (str "(?i)(.*)(" filterTerm ")(.*)"))(apply str (get item key)))]
  (... If truthy, do this, using "match" ...)
  (... If falsey, do this, without having access to "match")
</code></pre>

<p><code>if-let</code> checks if the bound variable is truthy. If it is, it executes the first body <em>with the truthy binding in scope</em>. If it's falsey, it executes the second body, <em>without the binding in scope</em>.</p>

<hr>

<hr>

<p>I think that's all the major things I can find. Good luck. Hopefully this was helpful.</p>
    </div>