<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In general, placing constraints on your passwords, such as that they have x-many numerals and y-many letters, makes your password generation scheme slightly <em>worse</em>; there's no advantage.<br>
But sometimes we're required to do silly things. </p>

<p>In this situation, it looks like the requirement is to have at least four of each, but that could change, as could the desired length of the password. So if this is going to be a reusable tool, it sounds like it should take at least 4 parameters, three of them optional:</p>

<ul>
<li>password_length</li>
<li>max_alpha - default password_length</li>
<li>max_num - default password_length</li>
<li>quantity - default 1</li>
</ul>

<p>This will give you useful and appropriate behavior by default. The other convenient thing is that you can exclude a character class altogether by setting the max_x to 0.<br>
Do remember to check that the input values are reasonable (non-negative or whatever).</p>

<p>I think the problem <a href="https://codereview.stackexchange.com/users/85680/1201programalarm">1201ProgramAlarm</a> points out is real, but his proposed solution is a little vague (and sounds hard to maintain), and the edit you made to solve the problem doesn't look like it addresses it at all.  </p>

<p><strong>Here's what I would do</strong>, both for the above reason and for maintainability:</p>

<ul>
<li>Define each character class as a separate vector. (Should upper-case and lower-case be their own classes? this could get complicated fast. Let's assume for now that there are just the <strong>2</strong> classes)</li>
<li>Calculate the <strong>minimum</strong> number of characters we need from each class.</li>
<li>Define a vector containing the union of the character classes. We'll use this to select <strong>only</strong> the characters who's class we don't care about. </li>
<li>Calculate how many don't-care characters there will be, such that<br>
<code>min_alpha + min_num + dont_care == password_length</code>.<br>
Counting the don't-care's, we have <strong>3</strong> "classes", and an exact number of characters we want from each class.</li>
<li>For each of the target character quantities, select that many characters (uniformly at random with replacement) from the respective class (vector). You could probably be pushing all of these to a single string/buffer as you go.</li>
<li>Shuffle the string.</li>
</ul>

<p>Also, because this is Code Review:</p>

<ul>
<li>You're building a list <code>passwds</code>, but you're not using it.</li>
<li>Taking arguments from stdin isn't as user-friendly as taking them as arguments to main(), <em>in my opinion</em>.</li>
<li>The whole business of removing duplicates from the list seems fishy to me, but I guess it's better to do it in a separate step than to bake it into your password generator.</li>
<li>Is the business with the clock purely diagnostic? </li>
<li>Similarly, the part at the end where you hold for the user to hit enter seems un-friendly to me, but I guess I don't know your use-case.</li>
<li>If you do implement my advice above, then you're almost certainly going to want to break this up into a couple different functions.</li>
</ul>
    </div>