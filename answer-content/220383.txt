<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Performance and efficiency are not the main points that you should care about at this stage, especially for this simple task. Since your code will be scored by other persons, you should aim for readability and clarity. There is an official <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">Style Guide for Python Code</a> that especially Python novices should try to adapt in order to write good-looking Python code. I will try to link to relevant parts of the style guide where appropriate. With this in mind, let's have a look at your code.</p>

<h2>Data structures</h2>

<p>Keeping data consistent that is spread out over several list can be tedious, as you may have experienced yourself while writing the code. In your case, you will have to work with 6 (! - if I did not misscount) parallel lists, e.g. when placing a bid. A far more convenient approach would be to have a single collection of auction items, where each item has all the fields you have spread out over those lists at the moment. Depending on your level of Python experience, you may write a class for that, or use some of Python's builtin data structures. For the moment, I will stick with the second alternative.</p>

<p>So, what do we need? Each item has the following properties:</p>

<ul>
<li>item description </li>
<li>reserve price </li>
<li>current highest bid </li>
<li>number of bids</li>
<li>buyer with highest bid</li>
</ul>

<p>as well as an item number (why this is separate will hopefully become clearer in a few moments).</p>

<p>Python offers several possible solutions for that:</p>

<ol>
<li>have a tuple/list where each element can be accessed by an index, and you have to know which index represents which part of the information</li>
<li>use a dictionary where the name of the properties above is used as keys</li>
</ol>

<p>I'ld tend to use the second approach in your case, just because it's more explicit to use and it's harder to make misstakes. With this in our mind, lets look at how such an "item" might look like as a Python dict:</p>

<pre class="lang-py prettyprint-override"><code>item = {"description": "", "reserve price": 0.0, 
        "current highest bid": 0.0, "buyer with highest bid": None,
        "number of bids": 0}
</code></pre>

<p>As you can see, the properties can be used verbatim as keys in the dicitionary which makes it as straightforward as <code>item["number of bids"] += 1</code> to update the number of bids placed on an item. All the other properties may be used in the same fashion.</p>

<p>So 5 of 6 down, one to go: item number. I chose to exclude the item number from the list above, since it's role is a little bit special here. Why? Because the item number is used to identify the item. If you'ld like to stick to simple, consecutive item numbers, the easiest way is to put a bunch of these dictionaries in a list and use the position in the list as implicit item number.</p>

<pre class="lang-py prettyprint-override"><code>items = []
for i in range(n):
    items.append({
        "description": "",
        "reserve price": 0.0,
        "current highest bid": 0.0,
        "buyer with highest bid": None,
        "number of bids": 0
    })
</code></pre>

<p>You could also use a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a> for this<sup>1</sup>. Since we're now in a situtation where the position in the list matters and identifies the element, it might be wise to convert the list into a tuple after its creation: <code>items = tuple(items)</code>. Python tuples are not mutable, which means for your purpose you are not allowed to add and remove items. The dictionaries, which are elements of the tuple, can still be modified. </p>

<p>You basically can go full berserk from here on. You want non-consecutive item numbers? Use a dict with the item numbers as keys and the corresponding item dicts as values. Include the bid validation into the items themselves? Write a class with methods.</p>

<hr>

<blockquote>
  <p>All the feedback below refers to your original code, but can easily
  adapted to the new data structure above. Some of it will even become
  obsolete.</p>
</blockquote>

<hr>

<h2>Handling user input</h2>

<p>There a various part where you have to handle user input. Although you have tagged your question with Python 2 and Python 3, I sincerly hope you are actually using Python 3. Otherwise you are setting yourself up for some trouble because <a href="https://stackoverflow.com/a/4915366/5682996">using <code>input(...)</code> in Python 2 is "risky"</a>, to put it mildly. So let's assume Python 3 from here on.</p>

<p>The part where you're asking for the number of items is relatively robust, and even includes some input validation, which is good. However, it would be best to wrap it into a function and separate it from the list initialization. That would lead to something like:</p>

<pre class="lang-py prettyprint-override"><code>def get_number_of_items(min_items):
    """Get the number of items offered during the auction"""
    while True:
        try:
            n = int(input("Enter the number of items in the auction: "))
            if n &lt; min_items:
                raise ValueError
        except ValueError:
            print (f"Number of items have to be at least {min_items}!")
        else:
            return n
</code></pre>

<p>Apart from wrapping the code into a function, two other things have happened here. First, the function got a short <a href="https://www.python.org/dev/peps/pep-0008/#documentation-strings" rel="nofollow noreferrer">docstring</a>. Second, the error message now includes the actual value of <code>min_items</code> and not just a fixed value of 10. To read more about the type of string formatting that's happening here, go and look for "Python 3 f-strings", e.g. at the <a href="https://docs.python.org/3/tutorial/inputoutput.html#fancier-output-formatting" rel="nofollow noreferrer">Python doc</a> or <a href="https://realpython.com/python-f-strings/" rel="nofollow noreferrer">this</a> blog post.</p>

<p>On the second instance of user input, you took way less care to validate the input. There are no checks in place to actually make sure that a description is given, or that the reserve price is actually a non-negative number. To be fair, the task does not explicitely state that, but I think it's fair to assume that the reserve price is at least <code>0</code>. You can also take advantage of string formatting when creating the prompts, so use <code>description = input(f"Enter description for item no. {item_no}")</code> instead of <code>description = input("Enter description for item no. " + str(item_no))</code>. Since this is for you to learn something and you already have an example for a function that performs a similar task, I leave the implementation as an exercise to you.</p>

<h2>String formatting</h2>

<p>String formatting was alread mentioned above, but I just want to point out, that basically all of your calls to <code>print(...)</code> with dynamic output should be refactored to use it. Example:</p>

<pre class="lang-py prettyprint-override"><code>print(f"Item number: {item_numbers[i]} "
      f"Description: {item_description[i]} "
      f"Reserve price: {reserve_price[i]} "
      f"Current highest bid: {current_highest_bid[i]} "
      f"No. of bids: {item_bids[i]} "
      f"Buyer with highest bid: {buyer_numbers[i]}")
</code></pre>

<p>The example also makes use of Python's <a href="https://docs.python.org/3/reference/lexical_analysis.html#implicit-line-joining" rel="nofollow noreferrer">implicit line joining</a> within function parenthesis. It would also be possible to put <code>+</code> in front of all the strings apart from the first one to make it clearer that these strings are supposed to be joined.</p>

<h2>Avoid globals</h2>

<p>After you have packed everything into nice, single purpose functions, reduced the variable clutter, and the myriad of lists, it's now time to cut down the amout of global variables in your script. Global variables are all variables outside of functions at the script's top-level. You should try to avoid them whenever possible since they leak into functions and more unexpected things. A best-practice often found in Python code is to define a final <code>main()</code> function that uses the other functions and implements the scripts actual functionality. So the high-level code structure could now look something like:</p>

<pre class="lang-py prettyprint-override"><code>def get_number_of_items(min_items):
    """Get the number of items offered during the auction"""
    ...


# other functions
...


def main():
    """Hold the auction"""
    min_items = 10
    ...
    n = get_number_of_items(min_items)
    items = []
    for i in range(n):
        ...

    # Task 1
    ...

    # Task 2
    ...

    # Task 3
    ...


if __name__ == "__main__":
    main()
</code></pre>

<p>The only thing that's new here is <code>if __name___ == "__main__":</code>, which is <a href="https://docs.python.org/3/library/__main__.html" rel="nofollow noreferrer">Python's way</a> of telling "this part (<code>main()</code>) is only run if the file is used as a script".</p>

<h2>Miscellaneous</h2>

<p>What follows is a loose collection of minor bits and pieces, that are not as severe as the aspects I have already talked about. You might consider them as "good to know".</p>

<p>There are some parts of the code which seem to be overly complicated and/or "non-Pythonic", like</p>

<pre class="lang-py prettyprint-override"><code>number_of_bids = int(item_bids[index]) + 1
item_bids[index] = number_of_bids
</code></pre>

<p>which could be expressed as simple as</p>

<pre class="lang-py prettyprint-override"><code>item_bids[index] += 1
</code></pre>

<p>Another instance of "overcomplicated" code is</p>

<pre class="lang-py prettyprint-override"><code>for i in range(n):
    item_no = item_no + 1
    ...
</code></pre>

<p>I would consider</p>

<pre class="lang-py prettyprint-override"><code>for i in range(n):
    item_no = i + 1
    ...
</code></pre>

<p>as a clearer alternative, since this is a more direct way to see that you are actually asigning consecutive item IDs in a loop.</p>

<p>As others have already told you</p>

<pre class="lang-py prettyprint-override"><code>item_description = []*n
reserve_price = []*n
item_numbers = []*n
</code></pre>

<p>does not create empty lists of length <code>n</code>. In your code this is no problem since you simply append to these lists until they have length <code>n</code>, so you should just work with</p>

<pre class="lang-py prettyprint-override"><code>item_description = []
reserve_price = []
item_numbers = []
</code></pre>

<p>When performing the final evaluation described in Task 3, I would strongly recommend to define those "summary" variables like <code>sold_items</code>, <code>auction_fee</code>, and so on, just there where they are actually used and not at the start of the script. Especially if you have followed the initial advice on the data structure and the final evaluation might also easily be put into its own function.</p>

<hr>

<p><sup>1</sup> <strong>A word of warning:</strong> Although it might be tempting to use <code>items = [item for i in range(n)]</code>, be aware that this would <strong>not</strong> lead to the same result! In that case, all elements of <code>items</code> whould point to <strong>a single object in memory</strong> and altering any element, e.g. <code>items[0]</code> whould also alter <code>items[1]</code> and so forth.</p>
    </div>