<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This looks for a palindrome, similar to the other answers.  I prefer to work from the ends inwards rather than from the centre outwards.  That way there is no danger of falling off the end of a non-hollow array.</p>

<p>I check for short arrays to avoid problems with indexes falling off the ends of arrays length 0 or 1.  Since I'm checking anyway, I throw out length 2 as well.</p>

<p>I have written and commented the code for clarity, since the other answers appear to concentrate more on speed.</p>

<p>I changed the name of the array variable from <code>array</code> to <code>ary</code>.  The first is too close to the class name <code>Array</code>.</p>

<pre><code>private static int isHollow(int[] ary) {

    // Return values.
    final int hollow = 1;
    final int notHollow = 0;

    // Shortest possible hollow array is length 3: [0, 0, 0].
    int length = ary.length;
    if (length &lt; 3) {
        return notHollow;
    }

    // Scan outer non-zero numbers.
    // Also check for indexes crossing: [1, 2, 3, 4, 5, 6].
    int lo = 0;           // Low index.
    int hi = length - 1;  // High index.
    while (ary[lo] != 0 &amp;&amp; ary[hi] != 0 &amp;&amp; hi &gt; lo) {
        lo++;
        hi--;
    }

    // Check for non-zero at either index: not palindrome: [1, 2, 3, 0, 0, 1, 2].
    if (ary[lo] != 0 || ary[hi] != 0) {
        return notHollow;
    }

    // Check for enough space for zeros: [1, 2, 0, 0, 1, 2].
    if (hi - lo &lt; 2) {
        return notHollow;
    }

    // Scan for all zeros between lo and hi: [1, 2, 0, 3, 0, 1, 2].
    // Values at lo and hi already checked.
    for (lo++ ; lo &lt; hi; lo++) {
        if (ary[lo] != 0) {
            return notHollow;
        }
    }

    // If we get here the array is hollow.
    return hollow;

} // end isHollow()
</code></pre>
    </div>