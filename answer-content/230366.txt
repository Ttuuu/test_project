<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Exception</h1>

<p>If your algorithm cannot find a date, it is easier to raise an Exception than to return <code>''</code>. Returning sentinel values instead of exceptions can lead to unexpected behaviour if the user of this function does not test for this sentinel value.</p>

<h1>comments</h1>

<p>Comments should explain why you did something, not how. <code># Take the last four digits</code> tells you nothing more than the code itself. I would rather comment at <code>field[-4 - i:n - i]</code> why you did <code>n - i</code> instead of just <code>-i</code>.</p>

<h1>nesting</h1>

<p>Instead of nesting a number of if-clauses, it can be better to test the negative of the condition, and <code>continue</code>, so the rest of the code is less nested.</p>

<h1>match</h1>

<p>Don't test <code>condition is True</code>. Just do <code>condition</code>. In Python a lot of values can act as <code>True</code> or <code>False</code> in tests.</p>

<p>Your <code>match</code> is never used anyway; the moment you set it to <code>True</code>, you also return the result, so a <code>while True:</code> would have sufficed here.</p>

<h1><code>field</code></h1>

<p>This is a very unclear variable name. This method excepts a date in string format, so why not call the argument like that?</p>

<h1>Return type</h1>

<p>Your code does 2 things now. It looks for a date in the string, and converts that date to another format. It would be better to separate those 2 things, and return a <code>datetime.datetime</code> instead, and let the caller of this method worry about formatting that correctly. </p>

<h1><code>while True</code></h1>

<p>You use a <code>while True</code>-loop, with an incrementing counter. A better way to do this would be to either use <code>for i in range(...)</code> or using <code>itertools.count</code>: <code>for i in itertools.count()</code>. In this case you know there will be no more than <code>len(field) - 7</code> iterations, so you might as well use that.</p>

<h1>Revert the algorithm</h1>

<p>You explicitly test whether the substring is 8 characters long, and then if it is in the right format. By changing the <code>while True</code> to the <code>for</code>-loop, you know the substring will be 8 characters long. Then it makes sense to first try to convert it to a <code>datetime</code>, and then check whether the year is correct:</p>

<pre><code>def format_dates2(date_string):
    n = len(date_string)
    for i in range(n - 7):
        sub_string = date_string[-(8 + i) : n - i]
        # not just -i because that fails at i==0
        try:
            date = dt.strptime(sub_string, "%d%m%Y")
        except ValueError:
            continue
        if not (1919 &lt;= date.year &lt;= 2019):
            continue
        return date
    raise ValueError("Date not in the correct format")
</code></pre>
    </div>