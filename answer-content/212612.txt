<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Getting the base name from a file is best done using either the <code>os</code> package or the <code>pathlib</code> package:</p>

<pre><code>import os
from pathlib import Path

path = "some/directory/file_name.csv"
print(os.path.splitext(os.path.basename(path))[0])
# file_name
print(Path(path).stem)
# file_name
</code></pre>

<hr>

<p>As for your inner loop, you can simplify getting the number of different companies visited by writing:</p>

<pre><code>visits_distribution = master_df.groupby("ip").cik.unique().apply(len)
</code></pre>

<p>Which will give you the distribution per user for that day:</p>

<pre><code>ip
151.196.250.ahd    1
199.43.32.edd      1
207.168.174.jdd    1
208.61.82.abc      1
66.108.151.fgg     1
67.82.239.bhe      5
Name: cik, dtype: int64
</code></pre>

<p>On this you can just call <code>np.bincount</code>, which can take as an optional argument what the maximum number is supposed to be:</p>

<pre><code>n = len(final_df.index)
hist_on_day = np.bincount(visits_distribution, minlength=n)
</code></pre>

<p>Then you just need to sum all these arrays for every day, which eliminates the inner loop completely (by being done by <code>numpy</code>):</p>

<pre><code>...
n = len(final_df.index)
final_hist = np.zeros(n)

for zip_file in tqdm(logFilesToProcess):
    name_csv = Path(zip_file).stem
    df = _load_log_file(each_zip_file)
    visits_distribution = df.groupby("ip").cik.unique().apply(len)
    hist_on_day = np.bincount(visits_distribution, minlength=n)
    final_hist += hist_on_day

final_df["n_users"] = final_hist
final_df.to_csv("D:/2004.csv", index=False)
</code></pre>

<p>Instead of <code>minlength</code> you could also use <a href="https://stackoverflow.com/a/45422028/4042267"><code>numpy.pad</code></a> (test which one is faster):</p>

<pre><code>hist_on_day = np.bincount(visits_distribution)
final_hist += np.pad(hist_on_day, (0, len(final_hist)), 'constant')
</code></pre>

<hr>

<p>You should also separate this into multiple functions, the inner part of the <code>for</code> loop (without the last line) would be perfect for one:</p>

<pre><code>def parse_file(file_name):
    df = _load_log_file(file_name)
    visits_distribution = df.groupby("ip").cik.unique().apply(len)
    return np.bincount(visits_distribution, minlength=n)
</code></pre>

<hr>

<p>And one way to make it a bit faster is to not generate all dates at the beginning with a list comprehension, but instead use a generator comprehension which will produce them as needed:</p>

<pre><code>dates = ((date.year, date.quarter, date.month, date.day)
         for date in pd.date_range(start_date, end_date))
log_files = (path_to_zips.format(year=y, qtr=q, mnth=m, day=d)
             for y, q, m, d in dates)
</code></pre>

<p>However, that does preclude you from using <code>tqdm</code> for the progress (since generators don't have a length), but <a href="https://stackoverflow.com/questions/41985993/tqdm-show-progress-for-a-generator-i-know-the-length-of">there are ways around that</a>:</p>

<pre><code>n_days = (pd.to_datetime(end_date) - pd.to_datetime(start_date)).days
for zip_file in tqdm(log_files, total=n_days):
    ...
</code></pre>

<p>Note that I renamed some of your variables to conform to Python's official style-guide, <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP8</a>.</p>
    </div>