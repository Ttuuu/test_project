<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As others have pointed out, your comparison operations are skewed between the <code>Frauds</code> fields and all other fields. Given that the data type appears to be different, I'm going to assume that you're doing the comparison correctly, and it's working as intended.</p>

<p>That said, the numbers you are using to subtract (<code>0.1</code>) appear surprisingly large in relation to the values you are comparing them with. In one case, your initial value is 0.1, so subtracting 0.1 would result in comparing the new value &gt; 0, which might not be what you intended.</p>

<h3>Iterating the keys</h3>

<p>You can use the <a href="https://docs.python.org/3/library/stdtypes.html?highlight=dict%20keys#dict.keys" rel="nofollow noreferrer"><code>dict.keys()</code></a> iterable to get all the keys for one of the dictionaries, and you can use Python's <a href="https://docs.python.org/3/reference/expressions.html?highlight=ternary#conditional-expressions" rel="nofollow noreferrer"><em>conditional expressions</em></a> to evaluate your score.</p>

<p>Combine those together and you get:</p>

<pre><code>def score_results(old, new):
    """ Return a score based on the number of 
        'improved' fields of the new results over 
        the old.
    """
    score = 0

    for k in new.keys():
        if k == 'Frauds':
            score += 1 if new[k] &gt; int(old[k] * 1.2) else 0

        else:
            score += 1 if new[k] &gt; old[k] - 0.1 else 0
            # NOTE: did you mean &gt; old[k] * 0.9 ???

    return score
</code></pre>

<h3>Lambdas and defaults and iterables, oh my!</h3>

<p>You can shorten this by putting your brain in Python-mode and <em>treating code as data</em> using Python's <a href="https://stackoverflow.com/a/245208/4029014">first-class functions</a>. In this case, we'll make use of the <a href="https://docs.python.org/3/tutorial/controlflow.html?highlight=lambda#lambda-expressions" rel="nofollow noreferrer"><em>lambda expression</em></a> syntax, since the things we're doing are so short:</p>

<pre><code>def score_results(old, new):
    """ Idem. """

    minor_change = lambda o: o - 0.1  # could be o * 0.9??
    change_funcs = { 'Frauds': lambda o: int(o * 1.2) }

    return sum((1 if new[k] &gt; change_funcs.get(k, minor_change)(old[k]) else 0) 
               for k in new.keys())
</code></pre>

<p>In this version, I used the <em>conditional-expression</em> syntax from above to evaluate either 0 or 1 for each key <code>k</code>. I used the <a href="https://docs.python.org/3/library/functions.html?highlight=sum#sum" rel="nofollow noreferrer"><code>sum()</code> built-in</a> to add up the scores. This replaces the <code>for k in new.keys()</code> loop with an iterable. The iterable I chose was the <a href="https://www.python.org/dev/peps/pep-0289/#rationale" rel="nofollow noreferrer"><em>generator expression</em></a> that looped over the <code>k in new.keys()</code>. </p>

<p>I could have used an <code>if</code> clause in the generator expression to skip over the <code>Frauds</code> key. But we don't want to skip it, we want to compute it differently. So instead I built a dictionary where I could look up the keys. Every key would have a default behavior, except for special keys, by using the <a href="https://docs.python.org/3/library/stdtypes.html?highlight=dict%20get#dict.get" rel="nofollow noreferrer"><code>dict.get(key, default)</code></a> method. The special keys in this case are <code>Frauds</code>:</p>

<pre><code>change_funcs.get(k, minor_change)
</code></pre>

<p>Once I had the special function (for Frauds) or the default function (<code>minor_change</code> for everything except Frauds) I could call it:</p>

<pre><code>change_funcs.get(...)(old[k])
</code></pre>

<p>And then put it into the comparison with the new key as part of the conditional-expression.</p>

<h3>int(bool) -&gt; {0, 1}</h3>

<p>Another "shortening" that could be made is to note that Python converts Boolean values to integers by mapping <code>False</code> to <code>0</code> and <code>True</code> to <code>1</code>. So instead of the conditional expression:</p>

<pre><code>1 if cond else 0
</code></pre>

<p>we could simply use:</p>

<pre><code>int(cond)
</code></pre>

<p>This converts our sum expression to:</p>

<pre><code>    return sum(int(new[k] &gt; change_funcs.get(k, minor_change)(old[k])) for k in new.keys())
</code></pre>
    </div>