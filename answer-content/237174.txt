<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Echoing all of VincentRG's points, with a little clarification and demonstration:</p>

<ol>
<li><p>The only reason to wrap code in a <code>if __name__ == '__main__'</code> block is to keep it from being executed when your module is imported by another module.  By that token, the fact that you initialize <code>bot_choices</code> outside of that block means that those random choices will be determined only <em>once</em> at the time of import, so the importing module will get the same result every time it calls <code>RPS()</code>.  This is probably not what you want.  It doesn't affect the way your program runs since you don't actually have any other modules, but if you're going to check for <code>__main__</code> you should understand <em>why</em> you're doing that and apply the same logic to other parts of your code.</p></li>
<li><p>This does not need to be a class and therefore should not be.  Here's how to write it as a single simple function (this is mostly just taking your existing code and moving it around):</p></li>
</ol>

<pre><code>import random

def rock_paper_scissors() -&gt; None:
    bot_choice = random.SystemRandom().choice(['Rock', 'Paper', 'Scissors'])

    user_choice = str(input('(R)ock, (P)aper, (S)cissors: ')).upper()
    if user_choice not in ['R', 'P', 'S']:
        print('Invalid Input!')
        return

    if (user_choice == 'R' and bot_choice == 'Paper' 
            or user_choice == 'P' and bot_choice == 'Scissors' 
            or user_choice == 'S' and bot_choice == 'Rock'):
        print('Result: Computer Won!')
    elif user_choice == bot_choice[0]:
        print('Result: Tie!')
    else:
        print('Result: You Won!')

    print(f'\nComputer Choice: {bot_choice}\nYour Choice: {user_choice}')

if __name__ == '__main__':
    rock_paper_scissors()
</code></pre>

<p>More notes:</p>

<ul>
<li>Not necessary to check <code>user_choice</code> for truthiness if you're already checking it for membership in a collection of truthy values.</li>
<li>The name <code>bot_choices</code> is confusing if it's a single choice.  Changed it to <code>bot_choice</code>.</li>
<li>There's no reason to name the <code>choices</code> variable since you never use it again after picking <code>bot_choice</code>.</li>
<li>You can simplify the tie check way down by just checking the user choice against the first letter of the bot choice.  </li>
<li>This would be simpler yet if you defined the choices as an <code>Enum</code> and had the player and bot use the same enum instead of their own hardcoded strings.</li>
</ul>

<p>If you have no need to reuse this function or this module, this script doesn't even need to define a function.  You could have a file that just looks like:</p>

<pre><code>import random

bot_choice = random.SystemRandom().choice(['Rock', 'Paper', 'Scissors'])

user_choice = str(input('(R)ock, (P)aper, (S)cissors: ')).upper()
if user_choice not in ['R', 'P', 'S']:
    print('Invalid Input!')
    exit()

if (user_choice == 'R' and bot_choice == 'Paper' 
        or user_choice == 'P' and bot_choice == 'Scissors' 
        or user_choice == 'S' and bot_choice == 'Rock'):
    print('Result: Computer Won!')
elif user_choice == bot_choice[0]:
    print('Result: Tie!')
else:
    print('Result: You Won!')

print(f'\nComputer Choice: {bot_choice}\nYour Choice: {user_choice}')
</code></pre>

<p>and it would behave exactly the same.</p>

<p>Here's how you might use an <code>Enum</code> to specify the choices:</p>

<pre><code>import enum
import random

class Choice(enum.Enum):
    ROCK = "R"
    PAPER = "P"
    SCISSORS = "S"

what_beats = {
    Choice.SCISSORS: Choice.ROCK,
    Choice.ROCK: Choice.PAPER,
    Choice.PAPER: Choice.SCISSORS,
}

bot_choice = random.choice([c for c in Choice])

try:
    user_choice = Choice(input('(R)ock, (P)aper, (S)cissors: ').upper())
except ValueError:
    print('Invalid input!')
    exit()

if what_beats[user_choice] == bot_choice:
    print('Result: Computer Won!')
elif user_choice == bot_choice:
    print('Result: Tie!')
else:
    print('Result: You Won!')

print(f'\nComputer Choice: {bot_choice.name.title()}'
      f'\nYour Choice: {user_choice.name.title()}')
</code></pre>
    </div>