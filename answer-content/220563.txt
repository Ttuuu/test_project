<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Review</h1>
<p>From a first look your code is bloated with debug noise and due to poor language feature utilization.</p>
<p>Looking deeper I see that poor encapsulation makes using the class <code>DataBase</code> ambiguous and non-intuitive.</p>
<h2>General points</h2>
<ul>
<li><p>Learn to use DevTools and don't fill your code with debugging code as it is a source of bugs and as you are not enforcing the truth of the debug calls can result in misleading debug information.</p>
</li>
<li><p>Functions return automatically you don't need empty returns at the end of functions</p>
</li>
<li><p>Don't add code not used.     <code>this._this = this</code> is not used, and if you did need to use it (ie no access to <code>this</code>) how would you get <code>this._this</code> ?</p>
</li>
<li><p>Use default parameters when you can. eg <code>X64</code> (why would anyone want to run 32bit when on a 64bit OS) The parameter is an annoyance and should default to <code>true</code></p>
</li>
<li><p>Avoid single use variables. eg <code>const data = await this.connection[sql.match('SELECT') ? 'query' : 'execute'](sql); return data</code> can be <code>return this.connection[sql.match('SELECT') ? 'query' : 'execute'](sql)</code></p>
</li>
<li><p>In functions use arrow functions for utility functions. eg  <code>function makeArray(str) {  return typeof str === 'string' &amp;&amp; str !== '*' ? [str] : str}</code> becomes <code> const makeArray = str =&gt; typeof str === 'string' &amp;&amp; str !== '*' ? [str] : str;</code></p>
</li>
<li><p>Don't repeat expensive operations. This is particularly important for node.js services. Node is great for IO but JS is slow and you should always keep in mind that CPU cycles cost money. Eg <code>for(const i of Object.keys(columns)) { i !== Object.keys(columns)[Object.keys(columns).length - 1] ?</code> becomes <code>const keys = Object.keys(values); for(const i of keys) { i !== keys[keys.length - 1] ? </code> without the CPU and Memory overhead needed to create the keys array 2 times for each key`</p>
</li>
<li><p>Become familiar with the language by studying the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript" rel="nofollow noreferrer">reference material</a>. This is an ongoing task that will need to be maintained for the length of you career. The vast majority of your code is performing <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join" rel="nofollow noreferrer"><code>Array.join</code></a> (all the <code>process...</code> calls). Code length is a source of bugs, always keep the code length down</p>
</li>
<li><p>Watch the naming. <code>SQLrows</code> and <code>SQLoptions</code> should be <code>SQLRows</code> and <code>SQLOptions</code></p>
</li>
<li><p>JavaScript uses ";" if you do not include them they are added automatically. There are some edge cases that make the human readable source  difficult to determine where or if the semicolon is inserted. Add it manually so you never need to deal with the ambiguity</p>
</li>
<li><p>Code should be understandable without comments. It is bad practice to rely on comments to understand the code. Comments are not vetted, verifiable, and can easily modified, removed, become defunct and are thus dangerous to the understanding of the code.</p>
</li>
</ul>
<h2>The interface</h2>
<ul>
<li>Your interface does not check state when performing behaviors</li>
</ul>
<p>E.G.</p>
<pre><code>const db = new DataBase(SQLConnect);
db.close();
const result = db.runSQL(query);  // what is expected if the db is closed.
</code></pre>
<p>All the calls should check if the state is valid to perform any operation. Use setting to define behaviors. eg <code>db.autoConnect = true</code> will have the DB connect if disconnected</p>
<ul>
<li>Using the class syntax has forced you into a poor encapsulation pattern</li>
</ul>
<p>E.G.</p>
<pre><code>const db = new DataBase(SQLConnect);
db.connectString = SQLConnect2;  // What now??
</code></pre>
<p>The <code>connectString</code> should be set via a setter. If the connection differs then the current connection should be closed (depending on behavioral settings)</p>
<ul>
<li>No error checking</li>
</ul>
<p>Every call has a possibility of error yet none of the code vets for errors, or handles any errors gracefully</p>
<h2>Rewrite</h2>
<p>The rewrite does not change the behavior (apart from defaults <code>X64</code> to true and added <code>open</code> function), removes redundant and debug code, and uses a more compact style.</p>
<p>This is meant as an example only and may contain many typos as I am unable to test run it.</p>
<p>The first thing I do when reviewing code is automatically remove comments (code should be understandable without them). Poor naming means I have had to guess as to what is contained in the many arguments passed.</p>
<p>It is valid to argue that "I should have read the comments.", to which I can but reply "This is only a review the code below is not meant to be accurate.".</p>
<pre><code>"use strict";
const adodb = require("node-adodb");
exports.dataBase = class DataBase {
    constructor(connection, X64 = true) {
        this.connectString = connection;
        this.X64 = X64;
        this.open();
    }
    async close() {
        await this.connection.close();
    }
    open() {
        this.connection = adodb.open(this.connectString, this.X64);
    }
    async reopen() {
        this.open();
    }
    async runSQL(sql) {
        return this.connection[sql.match("SELECT") ? "query" : "execute"](sql);
    }
    async query(table, columns = "*" || [], rows = "*" || [], options = "*" || []) {
        const makeArray = str =&gt; typeof str === "string" &amp;&amp; str !== "*" ? [str] : str;
        rows = makeArray(rows);
        options = makeArray(options);
        const SQLRows = rows === "*" ? "" : "ID=" + rows.join(" OR ");
        const SQLoptions = options === "*" ? "" : " AND " + options.join(" AND ");
        return this.runSQL(`SELECT ${makeArray(columns).join(",")} FROM [${table}] ${rows === "*" &amp;&amp; options === "*"? "" : "WHERE"} ${SQLRows}${SQLOptions};`);
    }
    async createTable(name, columns, rows = null) {
        const data = await this.runSQL(`CREATE TABLE ${name} (\n${columns.map(col =&gt; "${i} ${columns[i]}").join(",\n")}\n);`);
        if (rows !== null) {
            await this.addRecords(name, rows);
        }
        return data;
    }
    async addRecords(table, values) {
        const data = [];
        for (const i of values) {
            await this.runSQL(`INSERT INTO [${table}] VALUES (${Object.keys(i).join(", ")});`).then(result =&gt; {
                data.push(result);
            });
        }
        return data;
    }
};
</code></pre>
<p>Or</p>
<pre><code>"use strict";
const adodb = require("node-adodb");
exports.dataBase = class DataBase {
    constructor(connection, X64 = true) {
        this.connectString = connection;
        this.X64 = X64;
        this.open();
    }
    async close() { await this.connection.close() }
    open() { this.connection = adodb.open(this.connectString, this.X64) }
    async reopen() { this.open() }
    async runSQL(sql) { return this.connection[sql.match("SELECT") ? "query" : "execute"](sql) }
    async query(table, columns = "*" || [], rows = "*" || [], options = "*" || []) {
        const makeArray = str =&gt; typeof str === "string" &amp;&amp; str !== "*" ? [str] : str;
        rows = makeArray(rows);
        options = makeArray(options);
        const SQLRows = rows === "*" ? "" : "ID=" + rows.join(" OR ");
        const SQLoptions = options === "*" ? "" : " AND " + options.join(" AND ");
        return this.runSQL(`SELECT ${makeArray(columns).join(",")} FROM [${table}] ${rows === "*" &amp;&amp; options === "*"? "" : "WHERE"} ${SQLRows}${SQLOptions};`);
    }
    async createTable(name, columns, rows = null) {
        const data = await this.runSQL(`CREATE TABLE ${name} (\n${columns.map(col =&gt; "${i} ${columns[i]}").join(",\n")}\n);`);
        if (rows !== null) { await this.addRecords(name, rows) }
        return data;
    }
    async addRecords(table, values) {
        const data = [];
        for (const i of values) {
            await this.runSQL(`INSERT INTO [${table}] VALUES (${Object.keys(i).join(", ")});`).then(result =&gt; {data.push(result)});
        }
        return data;
    }
};
</code></pre>
    </div>