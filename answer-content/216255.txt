<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If you want to write concise, idiomatic C++, the best way is to rely on the STL as much as possible, as a tool as well as an inspiration. </p>

<p>So how would this algorithm be implemented in the STL? </p>

<ul>
<li><p>It probably wouldn't implemented so specifically. It would be more abstract: for instance, being under a threshold is a particular case of a satisfying a predicate; iterating over a vector is a particular case of iterating over a sequence (i.e a pair of iterators). </p></li>
<li><p>It would also be separated into orthogonal components: finding ranges whose elements satisfy a predicate is a thing, filtering those ranges which aren't long enough another. </p></li>
<li><p>Finally, complex algorithms are broken into simpler parts when possible (some say that the whole <code>&lt;algorithm&gt;</code> header is a patient construction of <code>std::sort</code> from its parts).</p></li>
</ul>

<p>In the light of all this, I suggest:</p>

<ul>
<li><p>function signatures based on iterators</p></li>
<li><p>an intermediate algorithm to find consecutive elements satisfying a predicate</p></li>
<li><p>an algorithm to find all sequences of consecutive elements satisfying a predicate</p></li>
<li><p>composing the latter algorithm with known STL algorithm to customize its behavior.</p></li>
</ul>

<p>For instance:</p>

<pre><code>#include &lt;algorithm&gt;
#include &lt;functional&gt;
#include &lt;vector&gt;
#include &lt;iostream&gt;

// the intermediate algorithm
template &lt;typename Iterator, typename Pred&gt;
std::pair&lt;Iterator, Iterator&gt; find_range_satisfying(Iterator first, Iterator last, Pred pred) {
    auto f = std::find_if(first, last, pred);
    if (f == last) return {last, last}; // representation of failure. std::optional would have been a good choice also
    return {f, std::find_if(std::next(f), last, std::not_fn(pred))};
}

template &lt;typename Iterator, typename Pred&gt;
auto find_all_ranges_satisfying(Iterator first, Iterator last, Pred pred) {
    std::vector&lt;std::pair&lt;Iterator, Iterator&gt;&gt; result;
    while (first != last) {
        auto [b, e] = find_range_satisfying(first, last, pred);
        if (b == last) break;
        result.push_back({b, e});
        first = e;
    }
    return result;
}

int main() {
    const std::vector&lt;int&gt; v { 4, 2, 1, 1, 4, 1, 2, 4 };
    const auto threshold = 3;
    auto test = find_all_ranges_satisfying(v.begin(), v.end(), [](auto elem) { return elem &lt; 3; });
    // composing with remove_if to obtain the desired behavior
    test.erase(std::remove_if(test.begin(), test.end(), [threshold](auto rng) {
        return std::distance(rng.first, rng.second) &lt; threshold;
    }));
    for (auto [b, e] : test) {
        std::for_each(b, e, [](auto elem) { std::cout &lt;&lt; elem &lt;&lt; ' '; });
        std::cout &lt;&lt; std::endl;
    }
}
</code></pre>
    </div>