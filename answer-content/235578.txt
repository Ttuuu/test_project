<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The utility of writing your own vector/quaternion code for the purposes of writing a game seems very minimal, considering its been done many times before. Glm/eigen are notable examples, but there's plenty of others. They also support portable vector instruction implementations that have gone through rigorous testing, an extremely time consuming and arguably boring task. This isn't to say there's no value in writing your own math library, but is the product you're trying to make/learn about a math library or a game engine? If you were hired by someone to write a game engine, would they really appreciate you working on a math library?</p>

<p>If you're truly interested in exploring the development of a math library, I would look at the source of existing ones and try to understand the rationale behind them. For example, they might often declare a byte alignment of their types -- why would that be important? What does their code look like when compiled to assembly compared to yours? </p>

<hr>

<p>Do not label the w component of quaternions as <code>degrees</code>, it is very incorrect and will surely cause confusion.</p>

<hr>

<p>An integer quaternion is bizarre and I don't know how that would be used.</p>

<hr>

<p>The template specializations seem unnecessary and confusing.</p>

<hr>

<p>There's no 3D vector rotation implementation on the quaternions. There's also no quaternion-quaternion multiplication, so they cannot be composed easily.</p>

<hr>

<p>It seems like it would be fine to expose the array data since the xyzw data is exposed already.</p>

<hr>

<p>Constructing a <code>std::vector</code> to initialize a matrix does not seem ideal.</p>

<hr>

<p><code>sqrt(pow(x, 2) + pow(y, 2) + pow(z, 2) + pow(w, 2))</code> This optimizes correctly on gcc but will be unnecessarily slow in unoptimized builds.</p>

<hr>

<p>Nitpicky, but using a union like this feels wrong. I understand that it's working as intended, but it doesn't seem typical. If you forgot that the data structure is a union, it might be possible to forget that data and xyzw have the same storage, rather than putting them in a union within a class or struct. </p>
    </div>