<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>My main concern is the use of cw as a "persistent pointer". Specifically, might people be confused when they see for code in cw?</p>
</blockquote>

<p>No. Instead, you can just remove the line <code>cw = iter(code_words)</code> as long as it's a native iterable. "Persistent Pointer" isn't a thing in python, because all python knows are Names. </p>

<blockquote>
  <p>What should be the typical best practices in this case?</p>
</blockquote>

<p>That would be building a dictionary and using it for the actual translation. You're basically already doing this with your <code>code_by_raw</code>, if a bit more verbose than others might. The only real difference would be that, in my opinion, it would be better to first establish the translation, and then create the result. </p>

<p>Except for your premature result generation, I would say your current function isn't bad. It does what it needs to do, it does it well without stupid actions, but it's not very readable. It's said often, I think you need to factor out a bit of code. Specifically, the bit that handles the fact that your inputs don't have to yield unique values, and how you need to handle duplicates. </p>

<p>I would suggest a  <a href="https://docs.python.org/3/tutorial/classes.html#generators" rel="nofollow noreferrer">generator</a> to handle that. This simplifies the main function a ton. (A comment pointed me towards the <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow noreferrer">unique_everseen</a> recipe, which is a slightly broader function. We don't quite need all it's functionality, but it might be worth the effort if you need some more flexibility.)</p>

<pre class="lang-py prettyprint-override"><code>def unique(iterable):
    """ Generator that "uniquefies" an iterator. Subsequent values equal to values already yielded will be ignored. """
    past = set()
    for entry in iterable:
        if entry in past:
            continue
        past.add(entry)
        yield entry

def encoder(raw_words, code_words):
    # Create mapping dictionary:
    code_by_raw = dict(zip(unique(raw_words), unique(code_words))
    # Check if we had sufficient code_words:
    if len(code_by_raw) &lt; len(raw_words):
        raise ValueError("not enough code_words")
    # Do translation and return the result
    return [code_by_raw[raw] for raw in raw_words]
</code></pre>

<p>I can't completely tell your experience level with python. For result creation, I'm using <a href="https://docs.python.org/3/tutorial/datastructures.html?highlight=list%20comprehension#list-comprehensions" rel="nofollow noreferrer">comprehensions</a> here.</p>

<blockquote>
  <p>Might it be better if I used the following instead?</p>
</blockquote>

<p>It would not be bad functionally to use a structure like that, but it's still ugly (but opinions may differ). It basically does the same as my unique() generator up there.</p>
    </div>