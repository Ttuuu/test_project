<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>An alternative, <strong>if you don't need the filtered list later on</strong>, is to iterate over and sum only the numbers you want:</p>

<pre><code>def myfunc(l): 
     it = iter(l) 
     total = 0 
     try: 
         for i in it: 
             if i == 13: 
                 next(it)  # skip the number following a '13'
             else: 
                 total += i 
         return total 
     except StopIteration: 
         return total 
</code></pre>

<p>The trick here is to transform the list into an iterator to make use of the <code>next()</code> function to easily skip the value following a <code>13</code>.</p>

<p>Using the list <code>[13,99,3]</code>:</p>

<p>When using the iterator in the for-loop what it does is, at the beginning of each loop it will take the next value in the iterator and place it into the variable <code>i</code>. When we use the <code>next(i)</code> we say to the iterator "give me the next value please" but we don't do anything with it, so at the next loop the iterator will give us again the next value.</p>

<p>It may not be clear so here's an example with the list<code>[13,99,3]</code>:</p>

<ul>
<li><code>it</code> is an iterator which state is "13 then 99 then 3" at the beginning</li>
<li>1st loop: we ask for the next value in <code>it</code>: we get <code>13</code>. The iterator state is now "99 then 3"

<ul>
<li>since <code>i == 13</code> we ask for the next value (<code>next(it)</code>), it gives us <code>99</code> (but we don't do anything with it as you can see) the state of the iterator is now "3"</li>
</ul></li>
<li>2nd loop: we ask for the next value in <code>it</code> (which state is "3" according to the previous point): so we get <code>3</code>. The state of the iterator is now empty.

<ul>
<li>since <code>3 !== 13</code> we add it to the <code>total</code>.</li>
</ul></li>
<li>The iterator is empty so we quit the loop and return the total</li>
</ul>

<p>But, as you can see, if 13 is the last element in the iterator when we'll ask for the <code>next(it)</code> it will raise an error, this is why we use the <code>try/except</code> block, because we now that the end of an iteration is indicated by an exception (<a href="https://docs.python.org/3/library/stdtypes.html#iterator-types" rel="nofollow noreferrer">doc here</a>).</p>
    </div>