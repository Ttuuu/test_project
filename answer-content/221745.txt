<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><code>collections.abc.Mapping</code> is meant to be <em>immutable</em>. You want <code>MutableMapping</code>.</li>
<li>The result from <code>list(d)</code> is <em>unpythonic</em>, it's standard to return the same as <code>Mapping.keys</code>.</li>
<li>You default all values to <code>None</code>, this smells really fishy to me. This means on an empty dictionary it says it's full, it also means <code>d[key]</code> magically returns <code>None</code>. And <code>key in d</code> is always <code>True</code>.</li>
<li>Personally I'd create two dictionaries, the first would translate from known keys to the <code>frozenset</code>. The second would be the the actual dictionary with the keys as the <code>frozenset</code>.</li>
<li><p>It's a bit strange to me that you'd pass poorly constructed sets to <code>MultiKeysDict</code>, but it's possible to have it merge the keys provided. However this runs in <span class="math-container">\$O(n^2)\$</span> time. I provided this as a <code>classmethod</code>.</p>

<p>If you prefer it to run on all creations then you can just change the call slightly and call it from <code>__init__</code>.</p></li>
</ol>

<pre><code>import collections


class MultiKeysDict(collections.abc.MutableMapping):
    def __init__(self, translations):
        self._data = {}
        self._translations = {
            k: set_
            for set_ in translations
            for k in set_
        }

    @classmethod
    def from_overlapping(cls, sets):
        handled = set()
        for set_ in sets:
            to_merge = {s for s in handled if s &amp; set_}
            for s in to_merge:
                handled.remove(s)
                set_ |= s
            handled.add(set_)
        return cls(handled)

    def _translate(self, key):
        if key not in self._data:
            key = self._translations[key]
        return key

    def __getitem__(self, key):
        return self._data[self._translate(key)]

    def __setitem__(self, key, value):
        self._data[self._translate(key)] = value

    def __delitem__(self, key):
        del self._data[self._translate(key)]

    def __iter__(self):
        return iter(self._data)

    def __len__(self):
        return len(self._data)
</code></pre>
    </div>