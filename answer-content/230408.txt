<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>"magic" method</h1>

<p>If you're  learning the data structures in Python, I would read about the <a href="https://docs.python.org/3/reference/datamodel.html#emulating-container-types" rel="nofollow noreferrer">python data model</a> and <a href="https://docs.python.org/3/library/collections.abc.html#collections-abstract-base-classes" rel="nofollow noreferrer">Collections abstract base classes</a> to see what magic methods you can/should implement. A Hashmap is a mapping, so it should implement <code>__getitem__</code>, <code>__iter__</code>, <code>__len__</code>, <code>__contains__</code>, <code>keys</code>, <code>items</code>, <code>values</code>, <code>get</code>, <code>__eq__</code>, and <code>__ne__</code></p>

<h1>return vs exception</h1>

<p>In case your mapping does not find a key, it returns <code>"This key cannot be found."</code>. This means users of your code should check against this sentinel value when retrieving something. What if that is the value they want to store in this mapping? The correct way to handle a missing key, is to raise an Exception. More specifically a <code>KeyError</code></p>

<h1><code>range</code></h1>

<p><code>for i in range(0,1)</code> is equivalent to <code>range(1)</code>, so it only yields 0, which means that in this list comprehension it does nothing.</p>

<pre><code>[[] for j in range(self.size)] 
</code></pre>

<p>Would hav achieved the same. <code>[[]] * self.size</code> would not have worked, since the reference to the same inner list would have been copied.</p>

<h1>variable names</h1>

<p><code>size</code> is not the size of the mapping, but the size of the hash table, so this name might be confusing. Moreover, this should not be a public variable of the, so <code>_hashtable_size</code> would be more appropriate. </p>

<p>According to PEP-8, variable names should be <code>snake_case</code>, so <code>mainList</code> would be <code>_main_list</code></p>

<h1><code>get</code></h1>

<p>For a dict and a mapping, <a href="https://docs.python.org/3/library/stdtypes.html#dict.get" rel="nofollow noreferrer"><code>get</code></a> has another argument <code>default</code>, which gets returned if the key is missing</p>

<h1>iteration</h1>

<p>In python, it is seldomly necessary to iterate over the index , like you do in <code>for i in range(0,len(self.mainList[index])):</code></p>

<pre><code>for dict_key, value in self.mainList[index]:
    if dict_key == key:
        return value
</code></pre>

<p>achieves the same, but is a lot more clearer and concise</p>

<h1>docstrings</h1>

<p>Python has a convention on how to document a method. It's called <a href="https://www.python.org/dev/peps/pep-0257/" rel="nofollow noreferrer">docstrings</a>. Instead of a <code>#</code>, you use a <code>"""</code></p>

<pre><code>def put(self, key, value):
    """To add value to the list."""
</code></pre>

<hr>

<pre><code>class Hashtable:
    def __init__(self, size):
        """explanation what this class does, and what the argument means"""
        self._hastable_size = size
        self._main_list = [[] for j in range(size)]

    def _index(self, key):
        # To get the index number.
        return sum(ord(i) for i in key) % self._hastable_size

    def __contains__(self, key):
        index = self._index(key)
        return any(dict_key == key for dict_key in self._main_list[index])

    def put(self, key, value):
        """To add value to the list."""
        if key in self:  # calls self.__contains__(key)
            raise ValueError(f"&lt;{key}&gt; already present")
            # you can also choose to overwrite the already present value
        index = self._index(key)
        self._main_list[index].append((key, value))

    __setitem__ = put

    def __getitem__(self, key):
        if key not in self:
            raise KeyError(f"&lt;{key}&gt; not present")
        index = self._index
        for dict_key, value in self._main_list[index]:
            if dict_key == key:
                return value

    def get(self, key, default=None):
        # To get value from the list
        try:
            return self[key]
        except KeyError:
            return default

    def __len__(self):
        return sum(len(sublist) for sublist in self._main_list)

    ...
</code></pre>
    </div>