<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is an interesting problem. You hacked Dijsktra's algorithm to make it solve the problem, but this hack has a cost. In Dijkstra's classical algorithm:</p>

<ul>
<li>you stop once all nodes have been visited;</li>
<li>you start an iteration with the best (shortest) candidate path.</li>
</ul>

<p>In your version:</p>

<ul>
<li>you stop once you reach your destination <strong>and</strong> you have a full basket of fishes;</li>
<li>same start for iterations.</li>
</ul>

<p>Basically, you walk until your basket is full and then you rush to the end store. The BFS selection ensure you that you get the effective shortest path (good point: your algorithm is correct).</p>

<p>Of course, without the Dijkstra's stop condition, your algorithm is not O(n lg n) anymore. </p>

<p>Consider the following graph for instance:</p>

<pre><code>A -- B --...-- C
</code></pre>

<p>The <code>cost_matrix</code> is:</p>

<pre><code>cost_matrix =  [[0, 1, 0],
                [1, 0, 999],
                [0, 999, 0]]
</code></pre>

<p>If you look for a path from <code>1</code> to <code>3</code>, your function will play ping-pong between <code>1</code> and <code>2</code> until the distance reaches <code>999</code> and then consider <code>3</code>.</p>

<p>A bit of theory now. Take the following instance of your problem: every store (node) has only one type of fish, and two stores do not have the same type of fish. You want a basket filled with all existing types of fish. That means: you have to visit each store at least once. This is a variation of the Travelling Salesman problem because you are allowed to visit every store mutliple times, but the complexity is the same (see <a href="https://math.stackexchange.com/questions/1269983/traveling-salesman-problem-why-visit-each-city-only-once">https://math.stackexchange.com/questions/1269983/traveling-salesman-problem-why-visit-each-city-only-once</a> and <a href="https://en.wikipedia.org/wiki/Travelling_salesman_problem#Computational_complexity" rel="nofollow noreferrer">https://en.wikipedia.org/wiki/Travelling_salesman_problem#Computational_complexity</a>).</p>

<p>Hence, I think you won't find any easy answer. It seems to me that your best choice, if you want to improve efficiency, is to "branch and bound".</p>
    </div>