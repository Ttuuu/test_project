<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It looks like much of the logic is hardcoded -- until that changes, you don't necessarily need to use a prepared statement and bind parameters.</p>

<p>I do recommend that you minimize trips to the database by writing a single query which groups on <code>lender</code> and/or <code>pipeid</code> (assuming pipieid and lender are directly related to each other).</p>

<p>In simplest terms, you can start with a basic query like this:</p>

<pre><code>SELECT
    lender,
    SUM(loanamount) AS loansum
FROM user
WHERE lender IN ('Rob', 'Amy', 'Cassie' 'Liz', 'Nancy')
GROUP BY lender;
</code></pre>

<p>The <code>user</code> table (probably better-named as <code>lender</code>) seems like an inappropriate place to store multiple rows of loan details.  I get the impression that the user table has become the catch-all for lots of data that should be stored separately in a <code>loan</code> table -- this way an individual <code>lender</code> is never represented more than once in the <code>lender</code> table and can be freely represented a multitude of times in the <code>loan</code> table -- this would be where SUMming should take place.</p>

<p>Then leveraging the result set makes producing your content much more elegant (D.R.Y.), not to mention completely controlled by the query at a single point in your script.</p>

<pre><code>$result = mysqli_query($conn, $query);
foreach ($result as $row) { ?&gt;
    &lt;h5 class="text-primary"&gt;
        &lt;?php echo $row['lender'] , ": $" , number_format($row['loansum'], 2); ?&gt;
    &lt;/h5&gt;
&lt;?php }
</code></pre>
    </div>