<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Peilonrayz said:</p>

<blockquote>
  <p>Personally I would just use two list comprehensions, if I were to not
  use list.sort, as the logic would be much clearer.</p>
</blockquote>

<p>I agree with this, this is the Pythonic way, short and straight to the point. And if you don't need a fancy function for evaluating what qualifies as non-empty then you could even strip down the code proposed by Peilonrayz and summarize it to a one-liner:</p>

<pre><code>[i for i in list_ if i == " "] + [i for i in list_ if i != " "]
</code></pre>

<p>returns:</p>

<pre><code>[' ', ' ', ' ', ' ', ' ', ' ', 'X', 'Z', 'Y']
</code></pre>

<p>which could be just enough for your purpose, based on your example containing strings. Although I feel his answer should be the accepted answer as it is more elegant and provides more flexibility, since your criteria can change. A good function should be flexible and reusable.</p>

<hr>

<p>Additional notes:</p>

<p>Since the OP seems to be concerned with possible <strong>performance</strong> issues with <strong>large lists</strong> it may be worth mentioning that a list comprehension will load the whole output list to memory. There is an alternative and that is using a <strong>generator expression</strong>.  <em>A generator expression can be iterated over but yields one item at a time on demand.</em> </p>

<blockquote>
  <p>Generator Expressions are somewhat similar to list comprehensions, but
  the former doesnâ€™t construct list object. Instead of creating a list
  and keeping the whole sequence in the memory, the generator generates
  the next element in demand.</p>
</blockquote>

<p>Source: <a href="https://www.geeksforgeeks.org/python-list-comprehensions-vs-generator-expressions/" rel="nofollow noreferrer">Python List Comprehensions vs Generator Expressions</a></p>

<blockquote>
  <p>The performance improvement from the use of generators is the result
  of the lazy (on demand) generation of values, which translates to
  lower memory usage. Furthermore, we do not need to wait until all the
  elements have been generated before we start to use them. This is
  similar to the benefits provided by iterators, but the generator makes
  building iterators easy.</p>
</blockquote>

<p>Source: <a href="https://wiki.python.org/moin/Generators" rel="nofollow noreferrer">wiki.python.org - Generators</a></p>

<p>They are slightly different than lists, for instance you cannot merge them like lists using <code>+</code> as shown above. One way of doing it could be:</p>

<pre><code>from itertools import chain
list_empty=(i for i in list_ if i == " " )
list_not_empty=(i for i in list_ if i != " " )
list_full = chain(list_empty, list_not_empty) 

&gt;&gt;&gt; type(list_full)
&lt;class 'itertools.chain'&gt;
</code></pre>

<p>There may be a better way. Note that the result is an object of type <code>itertools.chain</code>.
<br>
Disclaimer: I still lack familiarity with some of the aspects but I nonetheless want to share my findings for the benefit of others and of course the OP can further research the idea.</p>
    </div>