<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As a beginner you do need to practice the loop-based method, but I'd like to add that when you want to optimize code to the maximum, it's worth looking for mathematical rules that will help you predict things - if something is predictable then there's no need to simulate all the intermediate steps.</p>

<p>For <code>k = 1</code> the result is always <code>n</code>.</p>

<p>I found a great explanation about the math of this problem for <code>k = 2</code> (<a href="https://www.exploringbinary.com/powers-of-two-in-the-josephus-problem/" rel="nofollow noreferrer">link</a>):</p>

<p><span class="math-container">$$(2(n-2^{\lfloor\log_2n\rfloor})+1) \mod n$$</span></p>

<p>In binary, powers of 2 have only one 1-bit, so the part of the formula that finds the greatest power of 2 that is less than or equal to <code>n</code> can be replaced with code that finds the left most 1-bit of <code>n</code>. It's a micro-optimization but it's related to the point I want to make.</p>

<p>I failed generalizing it to work with any <code>k</code>, but it was still worth a shot, my goal is to illustrate that you can use math can optimize some of your code.</p>
    </div>