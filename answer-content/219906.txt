<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>One array solution</h1>
<p>The following algorithm is an improvement on the two array system stated bellow it.  Basically, we only need the context of the old previous value (as well as the next value, which goes unmodified), so we copy this value.  From there we can set the new end to <code>1</code> then start over.  This cuts down on the memory overhead.  I think you'll see minimal computational improvements as yours was already pretty efficient, but this one takes less memory.  I suspect there will be a performance increase where you are dealing with pretty large arrays.</p>
<pre><code>import java.util.Arrays;

class Pascal{

     public static void main(String []args) {
        int toNthLine = 1000;
        int[] row = new int[toNthLine+1];
        int counter = 0;
        int previous;
        row[0] = 1;
        for (int i = 0; i &lt; toNthLine; i++) {
            previous = 1;
            for (int j = 0; row[j+1] != 0; j++) {
                int temp = row[j+1];
                row[j+1] = previous + row[j+1];
                previous = temp;
                if (row[j+1] % 2 == 0)counter++;
            }
            row[i] = 1;
        }
        System.out.println(counter);
     }
}
</code></pre>
    </div>