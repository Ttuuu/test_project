<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>For generating one Sudoku, you should only create a single random number generator. It should be configurable so that you can pass a predictable random number generator during tests. Like this:</p>

<pre><code>public class SudokuGenerator {

    private final Random rnd;

    public SudokuGenerator(Random rnd) {
        this.rnd = rnd;
    }

    public Sudoku generate() {
        â€¦
    }
}
</code></pre>

<p>The current <code>genSolve</code> code looks frightening and inefficient. Having a 3-times nested <code>for</code> loops combined with 3 intermingled <code>if</code> statements and calling this method recursively sounds like a bad design. There must be something simpler. I don't know what, but it must exist.</p>

<p>A fairly advanced Sudoku generator is available <a href="https://git.tartarus.org/?p=simon/puzzles.git;a=blob;f=solo.c" rel="nofollow noreferrer">as part of Simon Tatham's Puzzle Collection</a>. The code is written in C but has lots of explaining comments, so you should be able to get some ideas.</p>
    </div>