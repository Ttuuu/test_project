<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>My main point of criticism is that the code uses a <em>global variable</em> to share data between the main function and the auxiliary function. That is problematic for various reasons:</p>

<ul>
<li>The variable must be reset before the function can be called again.</li>
<li>The variable can be modified from outside of your function, causing
wrong results.</li>
<li>The function is not thread-safe.</li>
</ul>

<p>Example:</p>

<pre><code>print(permsOfInteger(12)) // [[12], [21]]
print(permsOfInteger(12)) // [[12], [21], [12], [21]]
</code></pre>

<p>So</p>

<pre><code>var outputArray = [[Int]]()
</code></pre>

<p>should be a local variable of <code>func permsOfInteger()</code>. You can then pass it as an “inout argument” to the helper function <code>func perms()</code>, or make that helper function a nested function of the main function:</p>

<pre><code>func permsOfInteger(_ input: Int) -&gt; [[Int]] {

    var outputArray = [[Int]]()

    func perms (_ input: [Int], _ output: [Int]) {
        // ... adds something to `outputArray` ...
    }

    // ...
    perms(inpArray, [])
    return (outputArray)
}
</code></pre>

<p>Why is the return type a <em>nested</em> array where each “integer permutation” is wrapped into a single-element array? Returning a simple array of integers seems more natural to me, and would be more efficient:</p>

<pre><code>func permsOfInteger(_ input: Int) -&gt; [Int] {
    // ...
}

print(permsOfInteger(12)) // [12, 21]
</code></pre>

<p>As @janos already said, combining the digits to an integer should be done in “pure maths” instead of using string operations. This can be done with <code>reduce()</code>, for example:</p>

<pre><code>let digits = [1, 2, 3]
let number = digits.reduce(0, { $0 * 10 + $1 })
print(number) // 123
</code></pre>

<p>An <code>[UInt8]</code> array would be sufficient to store the decimal digits and save some memory. Here is a possible implementation as a computed property and custom initializer of the <code>Int</code> type:</p>

<pre><code>extension Int {
    var decimalDigits: [UInt8] {
        precondition(self &gt;= 0, "Value must not be negative")
        var digits = [UInt8]()
        var n = self
        while n &gt; 0 {
            digits.append(UInt8(n % 10))
            n /= 10
        }
        return digits
    }

    init(decimalDigits: [UInt8]) {
        self = decimalDigits.reduce(0, { $0 * 10 + Int($1) })
    }
}
</code></pre>

<p>The slicing</p>

<blockquote>
<pre><code>let before = Array(input[0..&lt;i])
let after = Array(input[(i + 1) ..&lt; input.count])
</code></pre>
</blockquote>

<p>can be slightly shorted with <em>partial ranges:</em></p>

<pre><code>let before = Array(input[..&lt;i])
let after = Array(input[(i + 1)...])
</code></pre>

<p>An alternative would be to remove the current element from the input array:</p>

<pre><code>var remaining = input
let current = [remaining.remove(at: i)]
perms(remaining, current + output)
</code></pre>

<p>Instead of <code>if input.count == 0</code> you can test <code>if input.isEmpty</code> – it does not make a difference for arrays, but can be more efficient for arbitrary collections, where determining the <code>count</code> requires a traversal of the entire collection.</p>

<p>For the same reason you might want to replace</p>

<blockquote>
<pre><code>for i in 0..&lt;input.count { ... }
</code></pre>
</blockquote>

<p>by </p>

<pre><code>for i in input.indices { ... }
</code></pre>

<p>since collection indices are not always zero based.</p>

<p>Finally, I would suggest some more descriptive variable names and argument names. Putting it all together, the function could look like this:</p>

<pre><code>func permutations(of number: Int) -&gt; [Int] {

    var permutations = [Int]()

    func addPermutations(of digits: [UInt8], withSuffix suffix: [UInt8]) {
        if digits.isEmpty {
            permutations.append( Int(decimalDigits: suffix) )
        } else {
            for i in digits.indices {
                var remainingDigits = digits
                let currentDigit = [remainingDigits.remove(at: i)]
                addPermutations(of: remainingDigits, withSuffix: currentDigit + suffix)
            }
        }
    }

    addPermutations(of: number.decimalDigits, withSuffix: [])
    return (permutations)
}

print(permutations(of: 123))
// [123, 213, 132, 312, 231, 321]
</code></pre>
    </div>