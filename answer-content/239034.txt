<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>I'm interested in constructive feedback on how I could improve the algorithm to make it faster and do less checks.</p>
</blockquote>

<p><code>processQuery()</code> is O(n) with</p>

<pre><code>for(size_t i = 0; i &lt; npoints; i++) {
</code></pre>

<p>An alternative would create a binary like tree in 2 dimensions.  Not a <a href="https://en.wikipedia.org/wiki/Binary_search_tree" rel="nofollow noreferrer">BST</a>, bit a <a href="https://en.wikipedia.org/wiki/Quadtree" rel="nofollow noreferrer">quadtree</a>.  Then the searching within a rectangle could take advantage of <em>potentially</em> O log(n).</p>

<p>As with any advanced search techniques, the real advantage occurs with large <code>n</code>, not so much with <code>n</code> of OP's test code.</p>
    </div>