<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I would use <code>std::vector</code> as internal container. It will simplify your code a lot.</p>
<p>I also would store the array sorted. This will slow down adding the keys, but search will be O(log(N)). Removing the data will be faster too.</p>
<p>I also would use "new" C++11 for:</p>
<pre><code>bool has_key(const key_type &amp;key) const
{
    for (auto const &amp;x : *this )
        if (x.first == key)
            return true;

    return false;
}
</code></pre>
<p>Or if you can use C++17:</p>
<pre><code>bool has_key(const key_type &amp;key) const
{
    for (auto const [k, v] : *this )
        if (k == key)
            return true;

    return false;
}
</code></pre>
<p>You can also use <code>std::find</code> standard algorithm for this, but I personally would do it in C++11 way:</p>
<pre><code>bool has_key(const key_type &amp;key) const
{
    return std::find(cbegin(), cend(), key) != cend();
}
</code></pre>
    </div>