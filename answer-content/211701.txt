<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>if (len(f) != 2): 
  while (len(f) != 2): 
    num += 1
    f = factors(num)
  print (num)
else: 
  print (num)
</code></pre>

<p>In places where you use both <code>if</code> and <code>while</code>, they can usually be collapsed into a single <code>while</code>. You can think of an <code>if</code> as a single use <code>while</code>. In your first <code>if</code> block, the final <code>print(num)</code> would only get executed once <code>len(f)</code> becomes 2, so it can just be left outside of the while loop. Which will make something like this:</p>

<pre><code>while (len(f) != 2): 
  num += 1
  f = factors(num)
print (num)
</code></pre>

<hr>

<p>As for ways of speeding up, you could consider keeping a list of previous primes and only dividing by those. That will cut down on the comparisons in the factor search. It might require some prior calculation, but the next calculations will be faster.</p>

<p>Another thing that could help is taking steps bigger than +1 while looking for the next prime. We know that all even numbers bigger than 2 are not prime, for example, and also that all numbers divisible by 3 that are bigger than 3 are not prime. So out of every 6 numbers, only two are possibly prime. If we use a counter variable <code>n</code>, then <code>6n</code>, <code>6n+2</code>, <code>6n+3</code>, and <code>6n+4</code> are definitely not prime, so you could just check <code>6n+1</code> and <code>6n+5</code>. Although that would require rearranging some of your program.</p>
    </div>