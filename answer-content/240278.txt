<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Usability</h2>

<p>I ran the script on <a href="https://stackoverflow.com/review">the SO review dashboard</a> to see how it would perform with various numbers. The biggest thing I noticed was that it didn't properly handle numbers greater than 999 since those are formatted in <em><code>x.y</code></em><code>k</code>  format. To properly handle those you may have to look for such a format and strip off any multipliers.</p>

<p><a href="https://i.stack.imgur.com/QuYpI.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/QuYpI.png" alt="SO screenshot with NaN"></a>  </p>

<h2>Review</h2>

<p>In addition to the points already addressed by CertainPerformance, I noticed a couple other things that could be simplfied:</p>

<blockquote>
<pre><code>setTimeout(function(){ window.location.reload(); }, 60 * 1000);
</code></pre>
</blockquote>

<p>There isn't any need to wrap the reload call in an anonymous/lambda function/closure, since it is a function:</p>

<pre><code>setTimeout(window.location.reload, 60 * 1000);
</code></pre>

<p>If you had a need to set the <code>this</code> context for such a call, then use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Function/bind" rel="nofollow noreferrer"><code>Function.bind()</code></a></p>

<hr>

<p>When using an arrow function expression with a single parameter - e.g. </p>

<blockquote>
<pre><code>(status) =&gt; console.log("Can't notify status code", status),
</code></pre>
</blockquote>

<p>The parameters don't need to be wrapped in parentheses:</p>

<pre><code>status =&gt; console.log("Can't notify status code", status),
</code></pre>

<hr>

<p>It is wise to use <code>const</code> for all variables until you determine that re-assignment is necessary- then use <code>let</code>. This helps avoid accidental re-assignment. </p>

<p>For example, in <code>split_once()</code> there is an assignment for <code>index</code>:</p>

<blockquote>
<pre><code>let index = value.indexOf(sep);
</code></pre>
</blockquote>

<p>But that value never gets re-assigned within the function.</p>

<p>There are also three variables in <code>findReviews()</code> that don't appear to be re-assigned that can be declared with <code>const</code> - i.e. <code>cookies</code>, <code>prev</code> and <code>prevAmount</code>.</p>
    </div>