<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It has been a while since I worked with <code>jQuery</code> so I may not get specific API's correct.</p>

<ol>
<li>You are repeating <code>("slide", { direction: "left"}, 250)</code>, if you ever changed one of the properties I would assume you'd want them to be consistent with each other. You can set an array then destructure that when calling <code>show</code> or <code>hide</code>. You can also apply this theory to your strings such as <code>slide-out-overlay</code> and <code>slideout-active</code> for example, if you find yourself typing the same strings out, generally you want to put them in a variable (ideally a <code>const</code>)</li>
</ol>

<pre><code>// OLD
$('.slide-out').on('click', function() {
    ...
    item.hide("slide", { direction: "left" }, 250);
    ...
});

$('.slide-out-overlay').on('click', function () {
    ...
    item.hide("slide", { direction: "left" }, 250);
});

// NEW
const toggleArguments ["slide", { direction: "left" }, 250]
$('.slide-out').on('click', function() {
    ...
    item.hide(...toggleArguments);
    ...
});

$('.slide-out-overlay').on('click', function () {
    ...
    item.hide(...toggleArguments);
});
</code></pre>

<ol start="2">
<li>It's common practice to use guard clauses, to reduce nesting. Closely related is early return's too, you should never really need the <code>else</code> statement.</li>
</ol>

<pre><code>// OLD
$('.slide-out').on('click', function() {
    let data = 'slideout-item';
    if($(this).data(data)) {
        let item = $('.slide-out-' + $(this).data(data));
        if (something) {
            ...
        } else {
            ...
        }
    }
});

// NEW
$('.slide-out').on('click', function() {
    let data = 'slideout-item';
    if (!$(this).data(data)) {
        return;
    }

    if (item.hasClass('slideout-active') {
        ...
        return;
    }

    // do code for !item.hasClass('slideout-active')
});
</code></pre>

<ol start="3">
<li>It is sometimes clearer to put a <code>$</code> in front of variables that are <code>jQuery</code> objects</li>
</ol>

<pre><code>// OLD
let item = $('.slide-out-' + $(this).data(data));

// NEW
let $item = $('.slide-out-' + $(this).data(data));
</code></pre>

<ol start="4">
<li>In your <code>.slide-out-overlay</code> click function, you are finding <code>.slide-out-overlay</code> again within the function block, when you already have the element in <code>this</code></li>
</ol>

<pre><code>// OLD
$('.slide-out-overlay').on('click', function () {
    ...
    $('.slide-out-overlay')...
});

// NEW
$('.slide-out-overlay').on('click', function() {
    $(this)...
});
</code></pre>

<ol start="5">
<li>In your <code>.slide-out-overlay</code> click function you are looping over any array of strings and then checking if the relevant element has class <code>slideout-active</code>. Could you not just look for elements that have <code>slideout-active</code>?</li>
</ol>

<pre><code>// OLD
$('.slide-out-overlay').on('click', function () {
    let items = ['content', 'system', 'account', 'other'];
    let item = '.slide-out-';
    for (i = 0; i &lt; items.length; i++) {
        if($(item + items[i]).hasClass('slideout-active')) {
            ...
});

// NEW
$('.slide-out-overlay').on('click', function () {
    const $items = $('.slideout-active');
    $items.hide("slide", { direction: "left"}, 250); // .hide works on an array of elements, as do most jQuery methods
    ...
});
</code></pre>

<ol start="6">
<li><p>You seem to be using <code>let</code> where you can use <code>const</code>. Only ever use <code>let</code> if you are modifying the value later on. Otherwise use <code>const</code></p></li>
<li><p>String interpolation is also an option to concatante your strings. Although with jQuery may look a little confusing</p></li>
</ol>

<pre><code>// OLD
let item = $('.slide-out-' + $(this).data(data));

// NEW
let item = $(`.slide-out-${$(this).data(data)}`);
</code></pre>

<p>I would also challenge you to write this without jQuery and use vanilla javascript and CSS transitions on the classes.</p>

<p>Hopefully that helps!</p>
    </div>