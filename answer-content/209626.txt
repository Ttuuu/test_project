<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Review</h1>

<ul>
<li><p>Add docstrings and tests... or both in the form of doctests!</p>

<pre><code>def find_word(s, index):
    """
    Finds the CamalCased word surrounding the givin index in the string

    &gt;&gt;&gt; find_word('CamelCaseString', 6)
    'Case'
    &gt;&gt;&gt; find_word('ACamelCaseString', 0)
    'A'
    """

    ...
</code></pre></li>
<li><p>Loop like a native.</p>

<p>Instead of going over the indexes we can loop over the item directly</p>

<blockquote>
<pre><code>range(index, 0, -1)
</code></pre>
</blockquote>

<p>We can loop over the item and index at the same time using enumerate</p>

<pre><code>for i, s in enumerate(string[index:0:-1])
</code></pre>

<p>However this would be slower since it will create a new string object with every slice.</p></li>
<li><p>If we can be sure that the givin string is a CamalCase string</p>

<p>Then we can drop some of your second if statement</p>

<blockquote>
<pre><code>if s[i].islower() and s[i+1].isupper() or s[i:i+2].isupper():
</code></pre>
</blockquote>

<p>Would be </p>

<pre><code> if s[i+1].isupper():
</code></pre></li>
<li><p>Actually your code (from a performance aspect) is quite good</p>

<p>We could however use a while loop to increment both side at once, for a little performance gain.</p></li>
</ul>

<h1>(slower, yet more readable) Alternative</h1>

<p>A different approach to finding CamalCase words can be done with regex,</p>

<p>We can find all CamalCase words with the following regex: <code>r"([A-Z][a-z]*)"</code></p>

<p>And we can use <code>re.finditer</code> to create a generator for our matches and loop over them, and return when our index is in between the end and the start.</p>

<pre><code>import re

def find_word_2(string, index):
    for match in re.finditer(r"([A-Z][a-z]*)", string):
        if match.start() &lt;= index &lt; match.end():
            return match.group()
</code></pre>

<p><em>NOTE This yields more readable code, but it should be alot slower for large inputs.</em></p>
    </div>