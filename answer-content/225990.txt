<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Nothing looks too bad, but there's some things you can improve when it comes to readability and other Java-specific stuff.</p>

<h3>BullsAndCowsServer</h3>

<pre class="lang-java prettyprint-override"><code>//-------------------------
//  Multithreaded server program
//-------------------------

import java.net.*;
import java.io.*;

public class BullsAndCowsServer
{
    public static void main(String[] args) throws IOException
    {
        final int PORT = args.length &gt; 0 ? Integer.parseInt(args[0]) : 1337;

        try (ServerSocket s = new ServerSocket())
        {
            System.out.println("Started: " + s);
            while (true)
            {
                try (Socket socket = s.accept())
                {
                    System.out.println("New client connected: " + socket.getRemoteSocketAddress());
                    new ThreadWorker(socket);
                }
                catch (IOException ignored)
                {
                }
            }
        }
        catch (SocketException e)
        {
            System.out.println("Server not available! Is it running?");
            System.out.println("Correct syntax is: java BullsAndCowsClient &lt;hostname&gt; &lt;port&gt;");
        }
    }

}
</code></pre>

<p>Changelog:</p>

<ul>
<li>If you're going to go with Allman style braces (which is totally fine), things like <code>catch</code>, <code>finally</code>, and <code>else</code> should all be on their own line.</li>
<li>Typically when going with Allman, avoid having an extra new-line after the start of a code block. The point of Allman is to make things more readable, but adding the extra new-line just takes up space.</li>
<li>Removed unnecessary parentheses around the ternary statement. You can see them both ways, but if it's a single conditional statement there's not really much need to have them. </li>
<li>Use try-with-resources whenever possible. It will close your resources for you so you don't need to worry about it. This will greatly reduces the amount of code you use and makes it so much more readable.</li>
</ul>

<h3>ThreadWorker</h3>

<pre class="lang-java prettyprint-override"><code>//-------------------------
//  Thread class for server use
//-------------------------

import java.io.*;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Random;

//this handles each game connection
public class ThreadWorker extends Thread
{
    private Socket socket;
    private BufferedReader in;
    private PrintWriter out;

    public ThreadWorker(Socket s) throws IOException
    {
        socket = s;
        in = new BufferedReader(new InputStreamReader(s.getInputStream()));
        out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(s.getOutputStream())), true);
        start();
    }

    @Override
    public void run()
    {
        try
        {
            out.println("--------------------------------\n" +
                    "Welcome to the Bulls and Cows guessing game!\n" +
                    "Type any of the following options:\n" +
                    "HELP\n" +
                    "NEWGAME\n" +
                    "RESUME &lt;passcode&gt;\n" +
                    "--------------------------------");

            String str;
            while (!(str = in.readLine().toUpperCase()).equals("END"))
            {
                switch (str.split(" ", 10)[0])
                {
                    case "HELP":
                        help();
                        break;
                    case "NEWGAME":
                        newgame();
                        break;
                    case "RESUME":
                        resume(str);
                        break;
                    default:
                        out.println("Sorry, that's not a valid option; please try again!");
                        break;
                }

                out.println(
                        "--------------------------------\n" +
                        "Type any of the following options:\n" +
                        "HELP\n" +
                        "NEWGAME\n" +
                        "RESUME &lt;passcode&gt;\n" +
                        "--------------------------------");
            }
        }
        catch (IOException | NullPointerException ignored) { }
        finally
        {
            try
            {
                System.out.println(socket.getRemoteSocketAddress() + " disconnected.");
                socket.close();
            }
            catch (IOException ignored)
            {
            }
        }
    }

    private void newgame() throws IOException
    {
        BCGame game = new BCGame();

        out.println("\n---------------------\n" +
                "Greetings challenger.\n" +
                "What is your name?");
        game.name = in.readLine().replace(" ", "_");
        out.println("\n\n\n\n\n\n\n" +
                "Greetings " + game.name + ". Play by typing 4 digit numbers where each digit is unique.\n" +
                "You can type PAUSE at any time to receive a passcode allowing you to return later.\n" +
                "Goodluck!\n" +
                "---------------------------");
        playGame(game);
    }

    private void playGame(BCGame game) throws IOException
    {
        String str;
        while (game.guesses &lt; 6)
        {
            int bulls = 0;
            out.println("\nYou have " + (6 - game.guesses) + " guesses remaining.\nPlease guess a number!");
            str = in.readLine();

            //pausing code
            if (str.equals("PAUSE"))
            {
                pause(game);
                return;
            }

            //check input is valid
            if (!validate(str))
            {
                out.println("\nInvalid input; please enter a 4 digit number with no duplicate digits");
                continue;
            }
            game.guesses++;

            //calculate score
            int cows = 0;
            for (int i = 0; i &lt; 4; i++)
            {
                if (str.charAt(i) == game.num.charAt(i))
                    bulls++;
                else if (game.num.contains(str.charAt(i) + ""))
                    cows++;
            }

            //check win condition
            if (bulls == 4)
            {
                out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
                out.println("Congratulations, you are correct!\n" +
                        "You won after " + game.guesses + " guess" + ((game.guesses &gt; 1) ? "es" : "") + "!");
                out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");
                out.println("Press enter to return to the menu..");
                return;
            }
            else
            {
                out.println("Bulls: " + bulls + "\nCows: " + cows);
            }
        }
        out.println("\nSorry, you are out of guesses! The number was " + game.num + " \n" +
                "Better luck next time\n");
    }

    private synchronized void pause(BCGame game) throws IOException
    {
        out.println("\nPausing game...");
        String dir = System.getProperty("user.dir");
        File file = new File(dir + "/savedgames.txt");
        file.createNewFile();
        int key;
        try (FileWriter writer = new FileWriter(file, true)) {
            key = new Random().nextInt(99999);
            writer.append(String.valueOf(key))
                    .append(" ")
                    .append(game.name)
                    .append(" ")
                    .append(game.num)
                    .append(" ")
                    .append(String.valueOf(game.guesses))
                    .append(" ");
        }
        out.println("\nYour game has been saved.\nYou can resume at any time with the code " + key);
        in.readLine();
    }

    private void resume(String str) throws IOException
    {

        String gamekey = str.split(" ")[1];
        out.println("\nReloading game &lt;" + gamekey + "&gt;");

        String dir = System.getProperty("user.dir");
        File file = new File(dir + "/savedgames.txt");
        if (!file.exists())
        {
            out.println("Saved game not found, press enter to return to menu");
            in.readLine();
            return;
        }

        FileReader reader = new FileReader(file);
        char[] a = new char[5000];
        reader.read(a);
        String s = new String(a);
        String[] saved = s.split(" ");
        for (int i = 0; i &lt; saved.length; i += 4)
        {
            if (saved[i].equals(gamekey))
            {
                try
                {
                    BCGame resumed = new BCGame(saved[i + 1], saved[i + 2], Integer.parseInt(saved[i + 3]));
                    out.println("Game found! Welcome back " + resumed.name);
                    playGame(resumed);
                    return;
                } catch(NumberFormatException e)
                {
                    System.out.println("Saved game is corrupt!");
                    break;
                }
            }
        }
        out.println("Saved game not found, press enter to return to menu");
        in.readLine();
    }

    private boolean validate(String str)
    {
        try
        {
            if (str.length() != 4) return false;

            int num = Integer.parseInt(str);
            boolean[] digs = new boolean[10];
            for(int i = 0; i &lt; 4; i++)
            {
                if (digs[num % 10]) return false;
                digs[num % 10] = true;
                num /= 10;
            }
            return true;
        }
        catch(NumberFormatException e) { return false;}
    }

    private void help() throws IOException
    {

        out.println("\nIn this game you must guess the secret 4 digit number.\nEach digit is unique; ie. no digit " +
                "appears more than once." +
                "\nAfter each guess you will be told a number of bulls and cows.\nYou get a bull if" +
                " you guessed a digit in the correct place.\nYou get a cow if you guessed the digit correctly, but it " +
                "was in the wrong place.\n" +
                "Guess the number correctly in 6 attempts to win.\n Best of luck, challenger.");
        out.println("\nPress enter to return to the menu");
        in.readLine();
    }

    class BCGame
    {
        String num, name;
        int guesses;

        public BCGame()
        {
            guesses = 0;
            num = generateNum();
            name = "";
        }

        public BCGame(String namer, String numr, int guessesr)
        {
            guesses = guessesr;
            num = numr;
            name = namer;
        }

        //generates a 4 digit number in string form where all the digits are unique
        String generateNum()
        {
            ArrayList arr = new ArrayList();// = {"0", "1", "2", "3", "4", "5", "6", "7", "8", "9"};
            for (int i = 0; i &lt; 10; i++) arr.add(i);

            String ret = "";

            Random rand = new Random();
            for (int i = 0; i &lt; 4; i++)
            {
                int num = rand.nextInt(arr.size());
                ret += arr.remove(num);
                arr.trimToSize();
            }
            return ret;
        }
    }
}

</code></pre>

<p>Changelog:</p>

<ul>
<li>Have classes be public if they are the same as the file name.</li>
<li>Typically in Java you use private or protected variables and then have getters/setters unless they are constants, which <code>socket</code>, <code>in</code>, and <code>out</code> are not.</li>
<li>If a method overrides a parent method (which <code>run()</code> does), make sure you have @Override</li>
<li>If you have an empty <code>catch</code> block, name the exception in it <code>ignored</code></li>
<li>If you add a line break after each \n, it makes the actual output much easier to understand.</li>
<li>Do you want to handle lowercase options? If so, call <code>str.toUpperCase()</code>.</li>
<li>You can read in the line from within the <code>while</code> condition;</li>
<li>try-with-resources is your friend!</li>
<li>Every time you do + on a String, it will create a new StringBuilder behind the scenes. Avoid it whenever you can (especially when you have convenient access to an appender)</li>
<li>No need to have <code>return</code> as the last statement in a method</li>
<li>You can chain String calls all you want</li>
<li>Always name classes starting with a capital letter</li>
<li>If you have multiple classes in one file, have them be an inner class. Don't have them outside of one another.</li>
</ul>

<h3>BullsAndCowsClient</h3>

<p>I don't have time to go through this one, but the feedback from the previous two should help you out getting that one cleaned up. Enjoy the OOP life!</p>
    </div>