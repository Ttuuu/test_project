<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here is an implementation of the current algorithm with appropriate error checking.</p>

<p>However, this algorithm seems to not match the content of the question as it increments the char value when the question indicates a need to decrement the value.</p>

<pre><code>#include&lt;stdio.h&gt; // scanf(), perror(), fprintf() sprintf()
// need following header for error handling
#include &lt;stdlib.h&gt;  // exit(), EXIT_FAILRUE
#include &lt;string.h&gt;  // strlen()
#include &lt;ctype.h&gt;   // toupper(), isalpha()

// not a valid function signature: main()
int main( void )
{
//poor choice for a number that will never be &lt;0    int size;
    size_t size;
//always check the returned value to assure the operation was successful    scanf("%d", &amp;size);
    if( 1 != scanf( "%lu", &amp;size ) )
    {
        perror( "scanf for string length failed" );
        exit( EXIT_FAILURE );
    }

    // implied else, scanf successful

// need to allow for NUL termination character    char str[size];
    char str[ size+1];
// always include a MAX CHARACTERS modifier to avoid buffer overflow    scanf("%s", str);
// note: this input will stop early if a space or newline is encountered
    char format[20] = {'\0'};
    sprintf( format, "%c%lu%c", '%', size, 's' );
    if( 1 != scanf( format, str ) )
    {
        perror( "scanf for string failed" );
        exit( EXIT_FAILURE );
    }

    // implied else, scanf successful

// never trust the user
    if( strlen( str ) != size )
    { // then wrong number of chars entered
        fprintf( stderr, "Num chars entered %lu does not match expected %lu chars\n",
                strlen(str),
                size );
        exit( EXIT_FAILURE );
    }

    // implied else, expected number of characters entered

//    for (int i=0; i&lt;size; i++)
    for( size_t i=0; i&lt;size; i++ )
    {
        // validate the input from the user
        if( !(isalpha(str[i])) || (toupper(str[i]) != str[i]) )
        { // invalid char entered
            fprintf( stderr, "invalid char %c entered, must all be upper case alpha\n", str[i] );
            exit(EXIT_FAILURE );
        }

        // implied else, valid character

        if (str[i]!='Z')
        { // any upper case char except 'Z'
// avoid implicit conversions str[i] -= 1;
            str[i]--;
        }

        else
        { // wrap around any 'Z'
            //str[i] -= 25;
            str[i] = 'A';
        }

        printf("%c", str[i]);
    } // end for

    return 0;
} // end function: main
</code></pre>

<p>However, calls to <code>scanf()</code> and <code>printf()</code> are expensive.  Calling <code>getchar()</code> in a loop would be much faster for the line of data to be 'encoded' and calls to <code>putc()</code> inside that loop would be much faster.</p>
    </div>