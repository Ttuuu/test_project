<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>Regarding all the implementation-defined behavior present:</p>

<ul>
<li>In the general case, it is implementation-defined if right-shifting a negative number results in arithmetic shift or logical shift. It is up to the compiler to pick.</li>
<li>In your specific case, you go from <code>unsigned</code>x type to signed type <code>(int)x</code>. You have implicit, implementation-defined conversions from signed type to unsigned type and back. The program is allowed to raise a signal when going from a large <code>unsigned int</code> to <code>int</code>. So it is not a good idea, but no way around it as your program is written.  </li>
<li>Meaning, at the point when we have executed the first line of your function, we have no idea of the state of the variable or the program as whole. On a specific system, it's another story, but your question is about generic C.</li>
</ul></li>
<li><p><code>sizeof(int) &lt;&lt; 3</code>. Replacing multiplication by 8 with shifts manually is bad practice, known as "pre-mature optimization". Never do this, let the compiler handle it. Correct code should be <code>8 * sizeof(int)</code> or <code>CHAR_BIT * sizeof(int)</code>.</p></li>
<li><p>Regarding <code>~0 + !k</code>. If k is 0, the result is <code>-1 + 1</code> = 0, assuming two's complement. Otherwise, if k is not 0, the result is <code>-1</code>, which you then implicitly convert to unsigned type. What's the reason for writing such obfuscated code, are you trying to make the code more branch-friendly or something? Don't do that before you have found a bottleneck during benchmarking. Instead write:</p>

<pre><code>if(k==0)
{
  zero_or_all_bits = 0;
}
else
{
  zero_or_all_bits = ~0u;
}
</code></pre></li>
</ul>

<p>or if you prefer, <code>unsigned int zero_or_all_bits = (k==0) ? 0u : ~0u</code>.</p>

<hr>

<p>As for how to convert the result of an arithmetic shift to a logical, without any questionable conversions or UB hiccups, simply do:</p>

<pre><code>int val = x &gt;&gt; y;                // some manner of arithmetic shift
...
const size_t int_bits = sizeof(int) * 8;
unsigned int mask = (1u &lt;&lt; y)-1; // create a mask corresponding to the number of shifts
mask = mask &lt;&lt; (int_bits-y);     // shift the mask in place from MSB and down
mask = ~mask;                    // then invert the whole integer, making mask bits zero, rest ones
val = val &amp; mask;                // set the bits to zero
</code></pre>

<p>That is, simply clear the bits which were set by arithmetic shift. This code was intentionally written in several steps to make it easier to understand.</p>

<p>For example, given <code>x = -8</code> and <code>y = 2</code>:</p>

<ul>
<li><code>x = -8</code> is <code>0xFFFFFFF8</code> hex (2's complement).</li>
<li><code>-8 &gt;&gt; 2</code> arithmetic shift gives <code>0xFFFFFFFE</code>. Two zeroes getting shifted out, two ones shifted in.</li>
<li>The corresponding logical shift would be <code>0x3FFFFFFE</code>. Two zeroes getting shifted out, two zeroes shifted in.</li>
<li><code>(1u &lt;&lt; 2)</code> gives 0x4. <code>(1u &lt;&lt; 2)-1</code> gives 0x3, a mask of ones 2 bits wide.</li>
<li>Shift the mask 0x3 in place, 32-2=30 bits to the left. Temporary value <code>0xC0000000</code>.</li>
<li>Invert this, we get <code>0x3FFFFFFF</code> which is the desired mask.</li>
<li>Data AND mask gives: <code>0xFFFFFFFE</code> AND <code>0x3FFFFFFF</code> = <code>0x3FFFFFFE</code>.</li>
</ul>
    </div>