<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The input, 1) which doesn't contain duplicates, has been 2) sorted, 3) rotated:</p>

<pre><code>int a[] = {5,3,2,5,6,7};
// removing duplicates gives
int a[] = {5,3,2,6,7};
// sorting gives
int a[] = {2,3,5,6,7};
// rotating gives (for instance):
int a[] = {5,6,7,2,3};
</code></pre>

<p><code>log(n)</code> suggests a divide-and-conquer strategy like binary-search, as you found out by yourself. But what are you looking for in this case? Not a value, but the position where <code>a[n] &gt; a[n+1]</code>. Notice that if <code>a[n] &gt; a[n+1]</code>, then also <code>a[0] &gt; a[n+1]</code>: the "direction change" occurred in that range. If not, it occurred in the range <code>[a[n+1], a[len(a)])</code>.</p>

<p>Divide-and-conquer is trickier than it may seem because it's really easy to access the array out-of-bounds. Iterator interfaces likes those of the C++ standard library make it easier and clearer:</p>

<pre><code>template &lt;typename Iterator&gt;
Iterator find_partition_point(Iterator first, Iterator last) {
    if (first == last) return last; // empty array
    if (std::next(first) == last) return first; // one-value array
    if (*first &lt; *std::prev(last)) return first; // null/full rotation
    // so we have at least two elements and a change of direction
    auto pivot = first + std::distance(first, last) / 2;
    if (*pivot &lt; *first) { // direction change in [first, pivot]
        if (*std::prev(pivot) &gt; *pivot) return pivot;
        return find_partition_point(first, pivot);
    }
    return find_partition_point(std::next(pivot), last); // direction change in (pivot, last)
}
</code></pre>
    </div>