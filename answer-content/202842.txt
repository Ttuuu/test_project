<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Instead of passing an iterable to the constructor, you could use <code>*values</code> as the argument:</p>

<pre><code>    def __init__(self, *values):
        # ... 
        self.extend(values)
</code></pre>

<p>This will allow you to use:</p>

<pre><code>dll = DoublyLinkedList(2, 4, 1, 8, 5, 3)
</code></pre>

<p>instead of </p>

<pre><code>dll = DoublyLinkedList([2, 4, 1, 8, 5, 3])
</code></pre>

<hr>

<p>You are relying on <code>__iter__(self)</code> (which creates a generator) for the implementation of <code>__contains__</code>, <code>__eq__</code>, <code>__getitem__</code>, <code>index</code>, and <code>count</code>.  It would be more efficient to simply loop through your linked list manually, rather than creating a generator, and context switching back and forth between the method code and the generator code.</p>

<hr>

<p><strong>BUG</strong>: <code>remove(self, item)</code> will fail if you remove the only item from list of 1 item.</p>

<pre><code>    # ...
        self._head = self._head._next   # self._head = None
        self._head._prev = None         # None has no attribute ._prev
    # ...
</code></pre>

<hr>

<p><strong>BUG</strong>: Neither <code>reverse(self):</code> nor <code>sort(self):</code> changes <code>self._tail</code>!</p>

<hr>

<p><code>__getitem__(self, index):</code>, <code>__setitem__(self, index, item):</code> and <code>insert(self, index, item):</code> do not take advantage of the double-linking.  If <code>index</code> is in the last half of the list, iterating from <code>self._tail</code> should be faster.</p>
    </div>