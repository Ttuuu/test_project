<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In addition to the excellent points AlexV said above, her are a few more observations:</p>

<p>There is quite a bit of repetition in the bulletin parsing code code.  For example, a check is made to see if "Accept citizens of" if in a line in four (4) different places. Each of the <code>update_xxx</code> functions loops over all the lines in the bulletin and checks to see if the line contains a certain word or phrase (e.g. 'Accept' or 'Wanted').  If it does match, then some action is taken. Because there are only a few different kinds of bulleting lines, this can be simplified to only loop over the lines once, like so:</p>

<pre><code>def receiveBulletin(bulletin):
    for line in bulletin.splitlines():
        if 'Accept' in line:
            update_accepted_countries(line)

        elif 'Deny' in line:
            update_denied_countries(line)

        ... etc ...
</code></pre>

<p>Instead of iterating over the words in a line to see if they match a country name, it might be easier to iterate over the country names and see if they are in the line.  That way you don't have to handle 'United Federation' specially.</p>

<p>Choosing the right data structure can make a big difference in how simple or complex the code is.  For example, because <code>self.actual_bulletin["allowed_nations"]</code> is a list, you need to check to see if a nation is in the list before you add and delete it.  If you used a <code>set()</code> instead, that check would not be necessary, because <code>set.add()</code> and <code>set.discard()</code> will take care of that.  Similarly, if  <code>vaccines_required_for_nation</code> and <code>entrant_has_vaccines</code> are both sets, then <code>vaccines_required_for_nation &lt;= entrant_has_vaccines</code> is False unless the entrant has the required vaccines.</p>
    </div>