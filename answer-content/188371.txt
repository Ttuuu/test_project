<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is a perfect task to solve with dynamic programming. Using a C++-script found <a href="https://www.programminglogic.com/integer-partition-algorithm/" rel="nofollow noreferrer">here</a> and some additional optimization, I created this script:</p>

<pre><code>num = 100
scores = [[int(j==0 and i&gt;0) for i in range(num)] for j in range(num)]
max_part = num-1
calculated = [1]

def get_combinations(n, x = max_part):
    for i in range(calculated[0], n+1):
        for j in range(1, x+1):
            if (i-j&lt;0):
                scores[i][j] = scores[i][j-1]
                continue
            scores[i][j] = scores[i][j-1] + scores[i-j][j];
    calculated[0] = n
    return scores[n][x]

print(get_combinations(50))
</code></pre>

<p>This script outputs 204226, and additionally its output is identical for any input value (I only tested up to 65, because the function in your question ran slowly after that). </p>

<p>The major drawback of the dynamic solution is that it is space inefficient. To calculate <code>get_combinations(n)</code>, one must use <code>O(n^2)</code> memory to store the <code>scores</code>-array. However, it performs much better for large values of <code>n</code>. And an additional feature (my addition to the C++-script) is that if you run the function multiple times, it doesn't recalculate any numbers. </p>

<p>Thus, if <code>get_combinations(5)</code> has been calculated, then a subsequent call to <code>get_combinations(2)</code> only requires an array lookup, and a subsequent call to <code>get_combinations(10)</code> is faster. </p>

<p>This function should work without issues for any <code>n</code> under 1000 (for input larger than 100 the variable <code>num</code> needs to be adjusted), and is 400 times faster for <code>n = 65</code> on my machine in the worst case. Sequentially calculating all values between 1 and 1000 runs in &lt;0.5s.</p>
    </div>