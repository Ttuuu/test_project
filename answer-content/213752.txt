<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>Prefer RAII-style opening the file in the constructor. You already done that with</p>

<pre><code>    std::fstream fileIn( originalFilename, std::ios::in );
</code></pre>

<p>so why not follow the suit with</p>

<pre><code>    std::fstream nextFile(nextFilename, std::ios::out);
</code></pre></li>
<li><p>There is no need to explicitly <code>nextFile.close();</code>. The destructor will take care of it at the end of each iteration.</p></li>
<li><p>There is nothing wrong with the early return. Instead of setting <code>originalFileFound = true;</code>, and testing it later on, quit immediately if opening fails. That would spare a boolean flag and a level of indentation.</p></li>
<li><p>Consolidate handling of <code>nextFilename</code> in one place. Consider</p>

<pre><code>    if (!fileIn.is_open()) {
        print_error_message();
        return 1;
    }

    std::string prefix = originalFilename.substr(0, originalFilename.size() - extension.size());

    for (int i = 0, counter = 0; counter &lt; 5; i++) {
        nextFilename = prefix + "_" + std::to_string(i) + extension;
        ....
    }
</code></pre></li>
<li><p>I would be very cautious to use this program, because it may overwrite existing files.</p></li>
</ul>
    </div>