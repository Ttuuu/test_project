<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Unfortunately, there is at least one blatant issue with the program in its current state: unused arguments. Let's have a look at it and find out why that's important.</p>

<p>Before that, a short disclaimer, though: I'm not a F# developer. However, I know functional programming (e.g. Haskell). I <strong>don't</strong> know the .NET lands by heart. Take this review with a grain of salt on the arguments that concern F#.</p>

<h1>Functions and the world</h1>

<p>When we write a function in a context, it gains knowledge of that context. For example, we bound <code>five</code> to <code>addFive</code> in the following example:</p>

<pre class="lang-ml prettyprint-override"><code>let y = 5
let addFive x = x + y
</code></pre>

<p>However, there is a possible issue with the code above: we might accidentally use <code>y</code> at a place we didn't intend, for example:</p>

<pre class="lang-ml prettyprint-override"><code>let add x z = x + y
</code></pre>

<p>This is exactly what happened in your functions:</p>

<pre class="lang-ml prettyprint-override"><code>        let stringInArray = fun (elem: string) -&gt; 
            query.IndexOf(elem) &gt; -1

        let getBrands (query: string): string[] =
            Array.filter(stringInArray) brands
</code></pre>

<p>Note how <code>stringInArray</code> just uses <code>query</code>? And how <code>getBrands</code> completely ignores the given <code>query</code>? This means that we could use <code>let result = getBrands ""</code> and still end up with <code>[|"Miso"|]</code>. That's not what we intended!</p>

<p>Instead, let's go back to back to the drawing board. We need to make sure that the <code>query</code> gets used. So we need to add at least one argument to <code>stringInArray</code>:</p>

<pre class="lang-ml prettyprint-override"><code>        let stringInArray (query: string) (elem: string) = 
            query.IndexOf(elem) &gt; -1
</code></pre>

<p>Now we can use <code>query</code> in <code>getBrands</code>:</p>

<pre class="lang-ml prettyprint-override"><code>        let getBrands query =
            Array.filter(stringInArray query) brands
</code></pre>

<p>Great! Now <code>let result = getBrands ""</code> leads to an empty array. Success!</p>

<h1>Names and tales</h1>

<p>However, now that we changed <code>stringInArray</code>, we note that the name isn't quite fitting: if we add type signatures, we and up with:</p>

<pre class="lang-ml prettyprint-override"><code>        let stringInArray (query: string) (elem: string) = 
            query.IndexOf(elem) &gt; -1
</code></pre>

<p>Neither of the arguments is an array. We should call this function <code>contains</code> or similar. However, we could introduce another function that gets matching elements from an array:</p>

<pre class="lang-ml prettyprint-override"><code>        let isSubstringOf (haystack: string) (needle: string) =
            haystack.IndexOf(needle) &gt; -1

        let matchingElements arr haystack =
            Array.filter(isSubstringOf haystack) arr

        let getBrands query = matchingElements brands query
        // or even
        //  getBrands = matchingElements brands
</code></pre>

<p>Note that with this approach we can keep the definition of <code>getBrands</code> to a minimum:</p>

<pre class="lang-ml prettyprint-override"><code>        let getBrands = matchingElements brands
</code></pre>

<h1>General purpose functions and the world</h1>

<p>Now that we used proper naming and split the functionality of our functions, it's time to re-evaluate whether they really belong in <code>main</code>. Remember how functions have their context saved? They provide a closure. It's therefore a good idea to keep the context small.</p>

<p>What functions should we therefore move out of <code>main</code>? We have the following at hand:</p>

<ul>
<li><code>isSubstringOf</code>, which searches in a string for another string</li>
<li><code>matchingElements</code>, which filters an array of strings whether they are contained in the second argument</li>
<li><code>getBrands</code>, which filters brands given a query</li>
</ul>

<p>The first two functions sound very generic, so let's move them out of <code>main</code>: </p>

<pre class="lang-ml prettyprint-override"><code>module Program =

    let isSubstringOf (haystack: string) (needle: string) =
        haystack.IndexOf(needle) &gt; -1

    let matchingElements arr haystack =
        Array.filter(isSubstringOf haystack) arr

    [&lt;EntryPoint&gt;]
    let main argv =
        let query = "Miso Power Washer X1000"

        let brands = [|
            "Hayo"
            "Miso"
            "The Master"
            "Vector"
        |]

        let getBrands = matchingElements brands

        let result = getBrands query
        printfn "%A" result

        0
</code></pre>

<p>Note how short our <code>main</code> got. It only contains the essential elements: <code>query</code>, <code>brands</code>, <code>getBrands</code> and <code>result</code>. One could argue that we can just replace <code>getBrands</code> by its definition, but premature brevity in source code is the source of future confusion, so let's keep it a little bit more verbose but self-explanatory.</p>

<p>Moving the functions might seem like an overkill, but note that this approach immediately had shown an error if we followed it right from the beginning. If we now use we now use <code>query</code> accidentally in <code>isSubstringOf</code>, we immediately get a compiler error (and probably an IntelliJ warning/note/error). That can be a huge boon in finding errors!</p>

<p>Furthermore, this approach makes it easy to unit test the functions later. Maybe we want to improve the <code>isSubstringOf</code> to use fuzzy logic so that it also works for <code>"Mizo Power Washer"</code>. (Unit) tests can make sure that we don't accidentally break old functionality on the way.</p>
    </div>