<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First, the small stuff.</p>

<ul>
<li><p><code>getBallDiamiter</code> has a misspelling.</p></li>
<li><p><code>movement</code> kinda sucks as a method name. <code>move</code> would be better, but makes <code>ball.move(30, 100)</code> a bit ambiguous. </p></li>
<li><p>It's better if classes that don't have to be public, aren't. Here, the only thing that needs to be public is <code>Game</code>, as it's your entry point.</p></li>
<li><p>If you have to ask another object for all the info you need to do your job, it shouldn't be your job.</p>

<p>To that end, the <code>drawPad</code> and <code>drawBall</code> methods in <code>Field</code> shouldn't be there. They should be in <code>Pad</code> and <code>Ball</code>, respectively.</p>

<p>Once you move them, there's nothing outside of the <code>Ball</code> class that needs to know the ball's position or diameter, and therefore no reason for any of those getters to exist.</p></li>
<li><p>While we're messing around with <code>paintComponent</code>, a more appropriate place to set opacity, background, etc is in the constructor. It won't change unless something else changes it.</p></li>
<li><p>The magic number 15 is everywhere. Looks like it's being used as the game area's margin. Put that number in a constant or something.</p></li>
<li><p>You don't seem to use any functionality specific to <code>JLabel</code>. Pick a more appropriate base class. <code>JPanel</code> works, as by definition it's a generic component.</p></li>
<li><p>Components have a <code>processComponentKeyEvent</code> method, so you don't need to attach a separate key event listener. (On the minus side, the same function processes key-pressed and key-released events as well as key-typed events, so you have to distinguish between them.)  Or, if you wanted, you could have <code>Pad</code> implement <code>KeyListener</code>, and add an empty <code>keyReleased</code> method, then the helper class again goes away.</p></li>
<li><p>If you use a <code>javax.swing.Timer</code> or <code>java.util.concurrent.ScheduledExecutorService</code>  rather than a <code>java.util.Timer</code>, you get the ability to use a method reference. So you don't need to write a class just to respond to timer ticks.</p></li>
<li><p>Your field and method names shouldn't repeat the class name.</p>

<p>If you're doing things right, your field and method names don't need to mention the class name. If i'm looking in the <code>Ball</code> class, a field named <code>x</code> should be the ball's X coordinate, and if you insist on a getter for it, it should be named <code>getX</code>.</p></li>
</ul>

<p>With that, we get into the elephant in the room here.  Yeah, i know why you have <code>getPadX</code>, <code>getBallX</code>, etc, rather than just calling them <code>getX</code>. And that's because</p>

<ul>
<li><p><strong>You're abusing the hell out of inheritance.</strong> :P</p>

<p>Question: Is a <code>Ball</code> a special kind of <code>Pad</code>? Is a <code>Pad</code> a special kind of <code>Field</code>?</p>

<p>Answer: No, and no. <code>Pad</code> and <code>Ball</code>, you don't even treat as Swing components, let alone labels, let alone game UI areas...and you never treat a <code>Ball</code> like a <code>Pad</code>.  If you were to even try, it would look <em>very</em> strange.</p>

<p>I see why you're inheriting; you want access to <code>FIELD_WIDTH</code>, <code>getPadWidth()</code>, etc. But there are cleaner ways to get access to that info. Ideally, there are ways to remove the need to even know it, and/or move that need to somewhere that can fulfill it better.</p>

<p>For now, though, the simplest change that would work would be to pass the field to <code>Pad</code>'s constructor, and pass the field and pad both to <code>Ball()</code>. It's an ugly band-aid, but eliminates inheritance for <code>Pad</code> and <code>Ball</code> altogether, and opens up a number of other possibilities.</p></li>
</ul>

<p>With that fixed, a couple of other things become fixable:</p>

<ul>
<li><p>Static mutable state is the devil.  And you only have to do it at all because inheritance breaks otherwise.  Once you have everything holding proper  references to its dependencies, you can make <code>pad</code> and <code>ball</code> private instance fields.</p></li>
<li><p>You've hard-coded a bunch of things that don't make sense being hard-coded. Again, much of that was entirely to keep inheritance working. But the field, being a Swing component, provides a way to get its actual size...and the pad already provides its own API to do so. While it wasn't as feasible back when everything was shackled together by inheritance, it's downright trivial now. A couple of helper methods, like <code>getLeft()</code> and <code>getRight()</code>, can even take margins into account so that the ball needn't know that margins even exist.</p></li>
</ul>
    </div>