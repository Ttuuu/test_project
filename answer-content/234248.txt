<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>First impression</strong></p>

<p>Wow, there's a lot of code for a task that seems quite simple at the first glance. That's not necessarily a bad thing as I do not know what the interviewers are looking for.</p>

<p><strong>Main class</strong></p>

<p>You have seven different classes but still there is logic in the main method. I would have wanted to see the main method just contain a single setup call with the data input source as a parameter. That way all your logic would be contained in a single reusable component that can be called form any context, not just from command line. Something like this:</p>

<pre><code>public static void main(String[] args) {
    WebServiceChecker checker = new WebServiceChecker(System.in);
    checker.start();
}
</code></pre>

<p>There are a couple of places where you fail to log the exception stack trace. This is close to non-hireable offense. We have literally lost money because of programmers doing this. Imagine having a problem in production and error logs just containing a basic message instead of exact error location. It's christmas shopping period so production is in freeze mode and no updates can be deployed to add more logging, so now we have to go through all kinds of bureucracy to get stuff done.</p>

<pre><code>} catch (IOException exception) {
    System.out.println("It was not possible to start the program.");
}
</code></pre>

<p>Since you are already depending on non-standard libraries, you should have used a logging framework (e.g. Log4j) and added the exception object as the last parameter:</p>

<pre><code>LOG.error("It was not possible to start the program.", exception);
</code></pre>

<p>Also, if errors are not logged with a framework, they should be written to System.err.</p>

<p><strong>InputReader</strong></p>

<p>By using the Terminal here you have hard coded the program into a single input source and added a dependency to a quite specialized library. While you are still within the spec, I feel that you have made the functionality more restricted than it should be.</p>

<p>The InputReader has a very generic name but it peforms two very specific functions: read a line from from terminal and meke sure it is an URL. Should you keep the dependency to Terminal instead of just using BufferedReader, it should be split into two classes and renamed to have nmes that describe their function.</p>

<p>A few minor issues are mixing german and english in the messages (I'm hoping you just forgot it when translating it to english) and returning null as an error in the validateURL method. The validator method is now responsible for messaging the user. Instead it should throw an exception on an error and the readURL should catch and process it. Or if you refactor the main class as mentioned above, the readURL should not contain a loop. The readURL should just throw the errors to the caller and the caller shoul be responsible for looping and error handling. This way the readURL would become more generic and reusable.</p>

<p><strong>WebserviceStatus</strong></p>

<p>It is pretty common to mix human readable messages into enumerations. I dislike this practise as it adds responsibilities to the enum, breaking the single responsibility principle. It makes the enums heavy and hard to maintain. This practise locks the implementation into single language. It is better just have the enums as plain as possible and mnage the user messages in a class that is responsible for the user interfacel.</p>

<p><strong>WebserviceStatusChecker</strong></p>

<p>You're not following Java naming standards here. Constants are supposed to be named with UPPER_SNAKE_CASE. Unlike other constants, the default duration is a magic value in the constructor. The IOException should not be inored. It should be logged on info or warn level. It would important to know if a website is unreachable because of network issues.</p>

<p><strong>WebserviceStatusLogger</strong></p>

<p>The fields should be private. The output file name is something that in my opinion should not have a default value as it has permanent effect on the running environment.</p>

<p>The write method shows you're only ever used Windows systems. Opening a file does not lock it in Unix-based systems. You've gone out of your way to implement a feature that was not requested and not written it correctly.</p>

<p><strong>PeriodicRunner</strong></p>

<p>You've documented that you tried the builtin executors, failed to get them working and decided to reinvent them. The only thing worse you could have done was to explicitly claim that there was a bug in the most used parts of the standard library instead of looking at your own code. And after writing your own implmentation you have added a comment that it does not fix wht you were set to fix: the unreliable timing interval.</p>

<p><strong>WebserviceObserver</strong></p>

<p>I had to stop for a while to figure out the purpose of this class. An observer would be a component that receives information, but this one has control over the whole application. The class needs to be renamed so that the name implies it is a controller.</p>

<p><strong>General</strong></p>

<p>Programming lanuages may be "just tools" but they are complicated tools that require specific knowledge to be used correctly. Your code shows that you understand that code should be modular but there's a bit of a gap into how it should be done. The responsibilities placed on classes and methods is not very clear. E.g. interfacing with the user is spread throughout the code. Studying the <a href="https://en.wikipedia.org/wiki/SOLID" rel="noreferrer">SOLID</a> principles would help in this. Your classes are often responsible for acquiring their dependencies themselves making them hard to reuse. Instead they should receive dependencies in the constructor. The D in SOLID explains this in more depth.</p>

<p>Your documenting is pretty good. You've commented the actual reason and source material for the special user agent header. That was something I don't see every day. Class and method naming could use improvement as they are often quite generic. Names should describe the function and purpose of the item.</p>
    </div>