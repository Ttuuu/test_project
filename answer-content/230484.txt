<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I will focus on <a href="/questions/tagged/object-oriented" class="post-tag" title="show questions tagged 'object-oriented'" rel="tag">object-oriented</a> programming in this review.</p>

<hr>

<h1>Encapsulation</h1>

<p>From <a href="https://en.wikipedia.org/wiki/Encapsulation_(computer_programming)" rel="nofollow noreferrer">Wikipedia</a></p>

<blockquote>
  <p>Encapsulation, in object-oriented programming, is the bundling of data with the methods that operate on that data, or the restricting of direct access to some of an objects components. Encapsulation is used to <strong>hide the values or state</strong> of a structured data object inside a class, preventing unauthorized parties' direct access to them.</p>
</blockquote>

<p>All class fields are declared as <code>public</code>, which is reason they do not protect their data/state.</p>

<p>Two reasons why we should avoid <code>public</code> fields are:</p>

<ul>
<li>unauthorized classes can change the data and break the code</li>
<li>we can't abstract multiple classes, when every one knows the internals.</li>
</ul>

<h1>Abstraction</h1>

<p>From <a href="https://en.wikipedia.org/wiki/Abstraction_(computer_science)" rel="nofollow noreferrer">Wikipedia</a></p>

<blockquote>
  <p>In object-oriented programming theory, abstraction involves the facility to define objects that represent abstract "actors" that can perform work, report on and change their state, and "communicate" with other objects in the system. </p>
</blockquote>

<p>In the current form, the code is bloated with concrete things like <code>IPv4</code>, <code>IPv6</code>, <code>TCP</code>, ... but actually these things are just different types of a <code>Protocol</code>.</p>

<h1>Class Design of <code>Frame</code></h1>

<h2>Variables</h2>

<blockquote>
  <pre class="lang-java prettyprint-override"><code>public IEEE_802_3_ethernet_header ieee_802_3_ethernet_header = null;
public IEEE_802_11_radiotap_header ieee_802_11_radiotap_header = null;
public IEEE_802_11_mgmt_beacon ieee_802_11_mgmt_beacon = null;
public IPv4 ipv4 = null;
public UDP udp = null;
public TCP tcp = null;
public ICMP icmp = null;
public ICMPv6 icmpv6 = null;
public IPv6 ipv6 = null;
</code></pre>
</blockquote>

<p>If I' wrong please ignore this, but I thing a <code>Frame</code> can only include:</p>

<ul>
<li><code>ieee_802_3</code> or <code>ieee_802_11</code> on the Link Layer</li>
<li><code>ipv4</code> or <code>ipv6</code> or <code>icmp</code> on the Internet Layer</li>
<li><code>tcp</code> or <code>udp</code> on the Transport Layer</li>
</ul>

<p>After we add an abstract <code>Protocol</code> to the system, we can achieve something like</p>

<pre class="lang-java prettyprint-override"><code>private Protocol link;
private Protocol internet;
private Protocol transport;
</code></pre>

<p>We would reduce the complexity a lot by decreasing the number of variables.</p>

<h2>"switch methods"</h2>

<p>With the introduction of the abstraction <code>Protocol</code> we can use the <a href="https://en.wikipedia.org/wiki/Factory_method_pattern" rel="nofollow noreferrer">Factory Method Pattern</a> for each TCP/IP layer to remove the logic from the <code>Frame</code> into its own class. When we encapsulate logic that belongs together we can achieve <a href="https://en.wikipedia.org/wiki/Separation_of_concerns" rel="nofollow noreferrer">Separation Of Concerns</a>.</p>
    </div>