<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A couple of points:</p>

<ol>
<li><p>You determine the date outside your loop, then loop forever. Every note you make after the first one is going to have the same date stamp.</p>

<p>A better approach would be to collect the date stamp just as you are writing to the file:</p>

<pre><code>datestamp=$(...)
echo "$datestamp: $note" &gt;&gt; ...
</code></pre></li>
<li><p>When shells were originally written, almost <em>everything</em> was a program. The <code>if</code> statement takes an executable as its conditional element. (If you look, you will find a program named <code>[</code> in <code>/bin</code> so that <code>if [ ...</code> will work.)</p>

<p>There is a program named <code>true</code> and a program named <code>false</code>. You can run them, and they don't do anything except set their exit codes to appropriate values.</p>

<p>You don't need to write <code>while [ true ]</code>. Instead, just write <code>while true</code>. This is important because <code>while false</code> will do something different from <code>while [ false ]</code>. You may be surprised ...</p></li>
<li><p>As @Vogel612 points out, you have duplicated code. I think you should keep the user feedback close to the user entry, so your checking should happen before typing the note. You can use another variable to hold the destination file path:</p>

<pre><code>read -p "What is this note for?
Work
School
Shopping 
&gt; " topic
destfile=''
case $topic in
    "Work"     ) destfile="$wsave" ;;
    "School"   ) destfile="$scsave" ;;
    "Shopping" ) destfile="$shsave" ;;
    * ) echo "Error: Selection was not on list, try again.\n" ;;
esac

if [ "$destfile" ]; then 
    read -p "\nNote\n&gt; " note
    echo "$date: $note" &gt;&gt; "$destfile"
    echo "Note saved to $destfile"
fi
</code></pre></li>
</ol>
    </div>