<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>What I think is wrong with the code - it's hard to understand</h3>

<p>Here's what I think all good code should do:</p>

<ol>
<li>First and foremost it must be understandable. Most of the code you write will be read many more times than edited. There are no comments - which is not necessarily bad if the code is self-explanatory. that's what we should aim for.</li>
<li>It must be easy to maintain</li>
<li>and if required must be easy to make changes</li>
<li>It must actually work: where are your tests!?!</li>
</ol>

<h3>Is it worth writing OOP code or should we go quick and dirty?</h3>

<p>Writing pure OOP code might take a little bit longer (but it will probably be more robust). Is it worth it? It might not be. but since this is a hypothetical, let's go down the OOP way:</p>

<p>Your code does not make use of "objects" which send "messages" to each other. (Please google that if you don't know what it means). You've got conditionals in your code which also supply behaviour. OOP is meant to get you to have objects supply the behaviour and to separate conditionals from behaviour as much as possible. </p>

<h3>Here is the Summary Code:</h3>

<pre><code>public class Pie
{
    /// &lt;summary&gt;
    /// Estimates pi based on the number of fractions we desire it to estimate by.
    /// The way I view it: you basically have 4 * (element0 + element1 + element2 etc.)
    /// where element0, element1 etc are instances of the Element class.        
    /// &lt;/summary&gt;
    /// &lt;param name="elementCount"&gt;&lt;/param&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    public double Estimate(int elementCount)
    {
        ElementCollection ec = new ElementCollection(elementCount);
        return 4 * ec.AddAllElements();
    }
}
</code></pre>

<h3>Here is the Full Code:</h3>

<pre><code>namespace BKTest
{
    public class Pie
    {
        /// &lt;summary&gt;
        /// Estimates pi based on the number of fractions we desire it to estimate by.
        /// The way I view it: you basically have 4 * (element0 + element1 + element2 etc.)
        /// where element0, element1 etc are instances of the Element class.
        /// I use a factory method to instantiate the element types and use polymorphism to differentiate
        /// between the two different types of elements that are currently out there: Element0 and the others: Element1, Element2 etc .
        /// Element zero is different because you can't divide by zero! (This probably won't make any sense)
        /// Till you attempt the problem yourself.
        ///
        /// &lt;/summary&gt;
        /// &lt;param name="elementCount"&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public double Estimate(int elementCount)
        {
            ElementCollection ec = new ElementCollection(elementCount);
            return 4 * ec.AddAllElements();
        }
    }

    public class ElementCollection
    {
        private int elementCount;

        public ElementCollection(int elementCount)
        {
            this.elementCount = elementCount;
        }

        public double AddAllElements()
        {
            double result = 0.0;
            for (int i = 0; i &lt; elementCount + 1; i++)
            {
                ElementN element = ElementFactory(i);
                result += element.Value();
            }

            return result;
        }

        public ElementN ElementFactory(int i)
        {
            if (i == 0)
            {
                return new Element0(i);
            }
            else
            {
                bool even = (i % 2 == 0);

                if (even)
                {
                    return new ElementEven(i);
                }
                else
                {
                    return new ElementOdd(i);
                }
            }
        }

        public class Element0 : ElementN
        {
            public Element0(int elementCount)
                : base(elementCount)
            {
            }

            public override int Sign()
            {
                return 1;
            }

            public override double PosivitveValue()
            {
                return 1.0;
            }
        }

        public class ElementEven : ElementN
        {
            public ElementEven(int elementCount)
                : base(elementCount)
            {
            }

            public override int Sign()
            {
                return 1;
            }
        }

        public class ElementOdd : ElementN
        {
            public ElementOdd(int elementCount)
                : base(elementCount)
            {
            }

            public override int Sign()
            {
                return -1;
            }
        }

        public abstract class ElementN
        {
            private int elementCount;

            public ElementN(int elementCount)
            {
                this.elementCount = elementCount;
            }

            virtual public double Value()
            {
                return Sign() * PosivitveValue();
            }

            virtual public double PosivitveValue()
            {
                return ((1.0) / (2.0 * elementCount + 1));
            }

            /// &lt;summary&gt;
            /// Either the sign is positive or negative
            /// We could probably put this into its own class
            /// and have a factory method but we'll keep it like this for the moment
            /// till one day change requires us to change it. After all, a sign can only
            /// either be positive or negative. (apparently you can also multiple by the
            /// square root of (-1) but that's another matter.
            /// &lt;/summary&gt;
            /// &lt;returns&gt;&lt;/returns&gt;
            abstract public int Sign();
        }
    }
}
</code></pre>

<h3>Here are the Tests:</h3>

<pre><code>using NUnit.Framework;

namespace BKTest
{
    [TestFixture]
    internal class PieTest
    {
        [Test]
        [TestCase(0, 4)]
        [TestCase(1, 4 * (1 - 1.00 / 3.0))]
        [TestCase(2, 4 * (1 - 1.00 / 3.0 + 1 / 5.0))]
        [TestCase(3, 4 * (1 - 1.00 / 3.0 + 1 / 5.0 - 1 / 7.0))]
        [TestCase(4, 4 * (1 - 1.00 / 3.0 + 1 / 5.0 - 1 / 7.0 + 1 / 9.0))]
        public void Estimate_1Parameter_expect_fourMinusOneThird(int input, double output)
        {
            // set up
            double result = new Pie().Estimate(input);
            Assert.AreEqual(output, result);
        }
    }
}
</code></pre>

<p>(Note - originally the code was put on <a href="https://gist.github.com/BKSpurgeon/e84ec3448cb33515dc4851ad57f1363c" rel="nofollow noreferrer">Gist</a>)</p>

<h3>Points about the code:</h3>

<ul>
<li>API is simpler to read and understand. The main logic is hidden away.</li>
<li>Easily amenable to change. What if the boss walks in and says he/she wants every 4th fraction to be: 1/e - will your code easily be able to handle that? I'd simply add a new ElementN sub-class called ElementE and add a conditional to my factory method and the changes would be made instantly.</li>
<li>Compare my code with yours: I've put the conditionals in a factory - which is where they should be. everything is very neatly separated. I make use of an abstract class and then supply the various implementations of that abstract class. this is what good OOP code should do. And OOP is good because it is easily amenable to change, mainly because classes and methods are not tightly coupled together (please google it if you don't know what that means). As I see it, there are only three different types of fractions: the first one (which is one) then the second which is a positive fraction and the third, which is negative. and that's it! so I subclass everything into three class which supply the relevant behaviour. and I only need 1-2 conditionals to make the whole thing work. This is an OOP way of handling it. ask a functional programmer and he or she might do it a different way but then again, it's harder to change.</li>
</ul>
    </div>