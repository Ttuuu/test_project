<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You require the interface to be <code>IDisposable</code> which is a bit of a shame. You're only doing this so that you can dispose of the HttpClient, but as it says in the Microsoft docs:</p>

<p><a href="https://docs.microsoft.com/en-us/dotnet/api/system.net.http.httpclient?view=netframework-4.8" rel="noreferrer">HttpClient is intended to be instantiated once and re-used throughout the life of an application. Instantiating an HttpClient class for every request will exhaust the number of sockets available under heavy loads.</a></p>

<p>Unfortunately it's a difficult class to use correctly so I recomend swapping it out for something that's already got many of the common mistakes taken care of, like the <a href="https://github.com/NimaAra/Easy.Common/blob/master/Easy.Common/RestClient.cs" rel="noreferrer">Easy.Common RestClient</a>. This will make sure the clients are cached and as a bonus will not require the interface to be <code>IDisposable</code>.</p>

<p>It will bring a dependency but since you're already depending on some dependency injection package this may not be an issue.</p>

<hr>

<p>In the <code>RestProxy</code> you have many <code>await</code>s but you do not <code>ConfigureAwait(false)</code>. You should really use that in library code unless you're only targeting .NET Core, it will perform slightly better and may prevent deadlocks for callers who use the async methods incorrectly.</p>

<p>When you send messages and recieve responses you turn the objects into strings but throw the strings away, this is wasteful and creates work for the Garbage Collector. Netwonsoft supports serializing and deserialzing to and from streams. You should stream the data out in. Follow <a href="https://johnthiriet.com/efficient-api-calls/" rel="noreferrer">this guide</a> or ask if you are unsure how.</p>

<p>You do not dispose of your <code>HttpRequestMessages</code> and <code>HttpResponseMessages</code> or your <code>StringContent</code>s. <code>StringContent</code> would be disposed of by the <code>HttpRequestMessages</code> but you should really be disposing of every <code>IDisposable</code> you create (except the <code>HttpClient</code>, as mentioned above!).</p>

<p>You do not support cancellation tokens it looks like. You should consider the case when an interface looks like:</p>

<pre><code>public interface ITypicode : IDisposable
{
    [Description("GET posts")]
    Task&lt;BlogPost[]&gt; GetAsync(CancellationToken cancellationToken);

    [Description("GET posts/{0}")]
    Task&lt;BlogPost&gt; GetAsync(int id, CancellationToken cancellationToken);

    [Description("PUT posts/{0} {1}")]
    Task&lt;BlogPost&gt; PutAsync(int id, BlogPost data, CancellationToken cancellationToken);
}
</code></pre>

<p>as most async interfaces <em>should</em> look (It's a common use case to want to cancel an async request after you've already sent it).</p>

<p>That's all the improvements I can think of so far, but I don't want you think I'm being negative - it's actually a really nice package and a great idea well executed, very impressive.</p>
    </div>