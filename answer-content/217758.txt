<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Alternate Header Files</strong><br>
In C++ if you want to include stdlib.h or string.h the proper include statements are</p>

<pre><code>#include &lt;cstdlib&gt;
#include &lt;cstring&gt;
</code></pre>

<p><strong>C++ Container Classes</strong><br>
In C++ there is <a href="https://en.cppreference.com/w/cpp/container/array" rel="nofollow noreferrer">std::array</a> that provides a built in array with iterators that might prove helpful. <a href="https://en.cppreference.com/w/cpp/container/vector" rel="nofollow noreferrer">std::vector</a> might be even more helpful since it is basically a variable sized array of any type. </p>

<p><a href="https://en.cppreference.com/w/cpp/iterator/iterator" rel="nofollow noreferrer">Iterators</a> have taken the place of pointers when using container classes. Iterators make for loops over containers safer because the container classes have 2 defined iterators as member, <code>begin</code> and <code>end</code>.</p>

<p><strong>Old Style C Casts Versus new C++ Casts</strong><br>
C++ has 2 new forms of casting variables, <a href="https://en.cppreference.com/w/cpp/language/static_cast" rel="nofollow noreferrer">static_cast</a> and <a href="https://en.cppreference.com/w/cpp/language/dynamic_cast" rel="nofollow noreferrer">dynamic_cast</a>. These casts perform error checking on the cast and make casting type safe. The cast in <code>int is_system_le()</code> is not type safe if it is changed to a static_cast. See the second answer of this <a href="https://stackoverflow.com/questions/1001307/detecting-endianness-programmatically-in-a-c-program">stack overflow question</a> for a workaround to the cast.</p>

<p>The third answer to the stack overflow question suggests using <code>htonl()</code> as a library function that performs the same test and is portable.</p>
    </div>