<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The log file looks like it is made up of bunch of sections separated by blank lines.  So, an approach is to code functions to parse each section. The main driver can scan the log file to find the sections and then pass the parsing off to the parsing functions.  The parsing functions have a common interface, to make it easy to add new parsing functions.</p>

<p>The code below is mostly comments and doc strings.</p>

<p>This is the driver.  It iterates over the lines in the log file, trying to identify what kind of section it's reading.  For example, if a line starts with '.step' it is in the 'step' section, etc.</p>

<pre><code>def parse_log(lines):
    """
    Parses a log file in which sections are delimited by blank lines.

    Input 'lines' is an iterable over the lines of the log file.
    Output is a defaultdict of dictionaries.  The defaultdict is keyed by
    step number. The dict for each step is a dict of the parameters and 
    measurements associated with that step:

        defaultdict(dict,
                    {1: {'step': 1, 'iload': '10', 'vdc': '36', 'rg': '1',
                         'eon': '1.82588e-006', 'eoff': '4.23893e-006'},
                     2: {'step': 2, 'iload': '20', 'vdc': '36', 'rg': '1',
                         'eon': '4.17134e-006', 'eoff': '6.95585e-006'},
                     3: {'step': 3, 'iload': '30', 'vdc': '36', 'rg': '1',
                         'eon': '7.00321e-006', 'eoff': '1.0193e-005'},
                      ...
                      })
    """

    # Lines in the input are checked to see if the section can be identified.  If a section is
    # identified a section specific parsing function is called. If a section cannot be identified
    # from a line, the line is appended to 'leadin'.
    #
    # Some sections are easier to identify after reading a few lines.  For example, the
    # 'step' section contains lines that start with '.step'.  
    #
    #    m1:1:v_sm: Missing value, assumed 0V @ DC
    #    Per .tran options, skipping operating point for transient analysis.
    #    .step iload=10 vdc=36 rg=1
    #    .step iload=20 vdc=36 rg=1
    #    ...
    #    
    # The list of the 'leadin' lines are passed to 'section()' so that the section specific 
    # parsing function gets all of the lines in the section (e.g., the m1:1 ..., and Per ... lines
    # in the example above).    
    #
    # Section specific parsing functions are expected to return a dictionary, keyed by step number,
    # of dictionaries containing parameter or measurement names and their values. The section
    # specific dictionaries are merged and returned.

    data = defaultdict(dict)

    leadin = []
    section_data = None

    for line in lines:

        line = line.lstrip()

        if not line:
            if leadin:
                leadin = []

                # If 'leadin' is is not empty, there was an unknown or unrecognized section.
                # For debuging, it might be useful to print (or log) the first few lines.
                #print(f"unknown section: {leadin[:5]}")

            continue

        leadin.append(line)

        if line.startswith('.step'):
            section_data = parse_step_section(section(lines, leadin))

        elif line.startswith('Measurement: '):
            section_data = parse_measurement_section(section(lines, leadin))

        if section_data:
            for step,fields in section_data.items():
                data[step].update(fields)

            leadin = []
            section_data = None

    return data
</code></pre>

<p>These are the section specific parsing routines:</p>

<pre><code>def parse_step_section(lines):
    """
    Section specific parse function for the 'step' section of a log file.

    Input 'lines' is an iterable (e.g., a file, list, etc.) over lines of the section. 

    The section looks like:

        m1:1:v_sm: Missing value, assumed 0V @ DC
        Per .tran options, skipping operating point for transient analysis.
        .step iload=10 vdc=36 rg=1
        .step iload=20 vdc=36 rg=1
        .step iload=30 vdc=36 rg=1
        .step iload=40 vdc=36 rg=1
        ...

    The '.step' lines are implicitly numbered, starting at 1.

    Output is a dict of dicts.  The outer dict is keyed by step.  The inner dicts are 
    keyed by parameter name.  Like this:

        {1: {'step': 1, 'iload': '10', 'vdc': '36', 'rg': '1'},
         2: {'step': 2, 'iload': '20', 'vdc': '36', 'rg': '1'},
         3: {'step': 3, 'iload': '30', 'vdc': '36', 'rg': '1'},
         4: {'step': 4, 'iload': '40', 'vdc': '36', 'rg': '1'},
         ...
         }

    """

    # The first two lines are skipped, because they aren't being used.
    next(lines)
    next(lines)

    pattern = re.compile(r"(\S+)=(\S+)")

    data = {}

    for step,line in enumerate(lines, 1):
        d = dict([('step',step)] + pattern.findall(line))
        data[step] = d

    return data


def parse_measurement_section(lines):
    """
    Section specific parse function for a measurement section.

    Input 'lines' is an iterable (e.g., a file, list, etc.) over lines of the section. 

    The section looks like:

        Measurement: eon
          step  INTEG(v(drain)*ix(m1:d))    FROM    TO
             1  1.82588e-006    1e-005  1.02e-005
             2  4.17134e-006    1e-005  1.02e-005
             3  7.00321e-006    1e-005  1.02e-005
             4  1.03301e-005    1e-005  1.02e-005
             ...

    The first line contains the name of the measurement (e.g., 'eon').
    The second line contains the header for the following table.
    The table is terminated with a blank line.

    This function only parses the first two columns and returns a dictionary like:

            {1: {'eon': '1.82588e-006'},
             2: {'eon': '4.17134e-006'},
             3: {'eon': '7.00321e-006'},
             4: {'eon': '1.03301e-005'},
             ....
             }
    """

    _, name = next(lines).strip().split()

    # skip header line
    next(lines)  

    step_meas_rest = (line.split(maxsplit=2) for line in lines)

    data = {int(step):{name:measurement} for step,measurement,_ in step_meas_rest}

    return data
</code></pre>

<p>This is a helper function.</p>

<pre><code>def section(lines, leadin=None):
    """
    Generator that yields lines from 'leadin' then from 'lines'.  Leading blank lines are skipped.
    It terminates when a trailing blank line is read.
    """
    if leadin:
        lines = it.chain(leadin, lines)

    line = next(lines).lstrip()

    while not line:
        line = next(lines).lstrip()

    while line:
        yield line
        line = next(lines).lstrip()
</code></pre>

<p>The main program:</p>

<pre><code>def main(log, output):
    logdata = parse_log(log)

    fieldnames = logdata[1].keys()

    writer = csv.DictWriter(output, fieldnames)
    writer.writeheader()

    for step, stepdata in logdata.items():
        writer.writerow(stepdata)
</code></pre>
    </div>