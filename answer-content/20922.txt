<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As @JeffMercado pointed out, this removes spaces instead of trimming leading and trailing spaces.  Assuming you want to keep the current functionality, let's call it <code>remove_spaces</code>.</p>

<p>There's a really subtle bug here:</p>

<pre><code>... isspace(input[i]) ...
</code></pre>

<p><code>isspace</code> takes the value of an <strong>unsigned char</strong> or <code>EOF</code>.  Passing it a <code>char</code>, which is usually signed, will produce undefined behavior.  Instead, say:</p>

<pre><code>... isspace((unsigned char) input[i]) ...
</code></pre>

<p>Another bug: you don't emit a NUL terminator, meaning the caller would have no way of knowing how long the string is (unless it zeroed out the buffer before calling your function).</p>

<p>Fixing these bugs gives us:</p>

<pre><code>void remove_spaces(const char *input, char *result)
{
  int i, j = 0;
  for (i = 0; input[i] != '\0'; i++) {
    if (!isspace((unsigned char) input[i])) {
      result[j++] = input[i];
    }
  }
  result[j] = '\0';
}
</code></pre>

<p>@JeffMercado also said this function is vulnerable to buffer overflow.  In a sense, this is not true, provided the caller knows to allocate a buffer of at least <code>strlen(input) + 1</code>.  But the caller might be lazy and just say <code>char result[100]</code>.  Adding an output buffer size parameter will likely guard against such a mistake:</p>

<pre><code>void remove_spaces(const char *input, char *output, size_t output_size);
</code></pre>

<p>See if you can implement this.  Some things to bear in mind:</p>

<ul>
<li><p>Don't forget about the NUL terminator when checking the output buffer size.</p></li>
<li><p>Don't be like <a href="http://linux.die.net/man/3/strncpy" rel="nofollow">strncpy</a> and omit the NUL terminator when you have to truncate the string, as it can lead to subtle bugs.</p></li>
<li><p>If you use <code>int</code> for <code>i</code> and <code>j</code> and <code>size_t</code> for <code>output_size</code>, you should get compiler warnings about comparison between signed and unsigned.  If you don't, turn up your compiler warnings.  If you're using GCC from the command line, get in the habit of typing <code>gcc -Wall -W</code>.</p></li>
</ul>
    </div>