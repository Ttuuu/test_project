<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I don't have the time to test this, so I hope you can do that for me. I decided not to use HashMap straight away because type conversion makes things a bit more complicated than they should, but let me know if this is important for you and causes you trouble.</p>

<p>Here's option 1:</p>

<pre><code>def realize(queryResult: ResultSet): Vector[Map[String, Object]] = {
    val md = queryResult.getMetaData
    val colNames = for (i &lt;- 1 to md.getColumnCount) yield md.getColumnName(i)
    val buildMap = () =&gt; (for (n &lt;- colNames) yield n -&gt; queryResult.getObject(n)).toMap
    Iterator.continually(queryResult.next()).takeWhile(identity).map(_ =&gt; buildMap()).toVector
}
</code></pre>

<p>I don't like it much because some parts of the code rely on side effects of other parts of the code, so even if it works, it's still ugly.</p>

<p>Here's option 2, which I like more:</p>

<pre><code>def buildMap(queryResult: ResultSet, colNames: Seq[String]): Option[Map[String, Object]] =
    if (queryResult.next())
        Some(colNames.map(n =&gt; n -&gt; queryResult.getObject(n)).toMap)
    else
        None

def realize(queryResult: ResultSet): Vector[Map[String, Object]] = {
    val md = queryResult.getMetaData
    val colNames = (1 to md.getColumnCount) map md.getColumnName
    Iterator.continually(buildMap(queryResult, colNames)).takeWhile(!_.isEmpty).map(_.get).toVector
}
</code></pre>

<p>Nicer, IMHO, you can save some dots over there but I decided to keep them. Maybe something like this:</p>

<pre><code> (Iterator continually (buildMap(queryResult, colNames)) takeWhile (!_.isEmpty) map (_.get)).toVector
</code></pre>

<p>Again, I didn't test it, I don't know how to do it without a DB and I don't feel like setting one up now, sorry for that.</p>

<p>Finally, I'm not sure if you realized this, but "realize" is probably not the best name for this method (or for any method, unless you are programming some epistemic system, IMHO).</p>
    </div>