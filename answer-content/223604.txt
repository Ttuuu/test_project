<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3><code>List&lt;T&gt;</code></h3>

<p>You have just learned about <code>List&lt;T&gt;</code> and are eager to use it. Perfectly understandable, but think about what it is designed for and what alternatives are available for this use case. <a href="https://www.go4expert.com/articles/lists-queues-stacks-sets-c-sharp-t30028/#queue" rel="noreferrer">Here is an overview of common Collections in C#</a></p>

<p>To be fair, there is no common collection available designed for a deck of cards. What you need, is functionality from:</p>

<ul>
<li><code>HashSet&lt;T&gt;</code> - unique items in the deck</li>
<li><code>Queue&lt;T&gt;</code> - add card on one end, take card from the other end</li>
<li><code>Stack&lt;T&gt;</code> - add card on one end, take card from that end</li>
</ul>

<p>You have opted to use <code>List&lt;T&gt;</code> and added the above functionality yourself. This is not a bad solution, but you should realise it is not optimized for a deck of unique cards.</p>

<h3><code>Card</code></h3>

<p>You can compare enum values the same way you are comparing instances of <code>Card</code>.</p>

<blockquote>
<pre><code>public int CompareTo(Card other)
{ 
    if (Suit &gt; other.Suit)
    {
        return 1;
    }
    if (Suit &lt; other.Suit)
    {
        return -1;
    }
    return Kind &gt; other.Kind ? 1 : -1;
}
</code></pre>
</blockquote>

<p>The above can be written as:</p>

<pre><code>public int CompareTo(Card other)
{ 
    if (other == null) return -1;
    var index = Suit.CompareTo(other.Suit);
    if (index == 0) index = Kind .CompareTo(other.Kind);
    return index;
}
</code></pre>

<p>Since <code>Card</code> is used by <code>CardDeck</code> and the latter uses a <code>List&lt;Card&gt;</code> with unique card items, you should do at least one of either and preferrably both:</p>

<ul>
<li>override <code>Equals()</code> and <code>GetHashCode()</code></li>
<li>implement <code>IEquatable&lt;Card&gt;</code></li>
</ul>

<p>This is because <code>List&lt;T&gt;</code> uses <code>EqualityComparer&lt;T&gt;</code> to check for unique instances (<a href="https://referencesource.microsoft.com/#mscorlib/system/collections/generic/equalitycomparer.cs,ac282b3e1817bb9b" rel="noreferrer">Reference Source</a>).</p>

<p><em>code snippet (only equality snippets)</em>:</p>

<pre><code>class Card : IEquatable&lt;Card&gt;
{
    public void Equals(Card card)
    {
        if (card == null) return false;
        return card.Suit == Suit &amp;&amp; card.Kind == kind;
    }

    public override void Equals(object obj)
    {
        if (!(obj is Card card)) return false;
        return card.Suit == Suit &amp;&amp; card.Kind == kind;
    }

    public override int GetHashCode()
    {
        // prefer picking two numbers that are co-prime
        var hash = 23;
        hash = hash * 31 + Suit.GetHashCode();
        hash = hash * 31 + Kind.GetHashCode();
    }
}
</code></pre>

<h3><code>CardDeck</code></h3>

<p>In your next lesson you will learn about LINQ. You will be able to write the card generator function as follows:</p>

<pre><code>foreach (var card in (from suit in Enum.GetValues(typeof(Suit)).Cast&lt;Suit&gt;()
                      from kind in Enum.GetValues(typeof(Kind)).Cast&lt;Kind&gt;()
                      select new { suit, kind }))
{
    Cards.Add(new Card(card.kind, card.suit));
}
</code></pre>

<p>as compared to:</p>

<blockquote>
<pre><code>int numSuits = Enum.GetNames(typeof(Suit)).Length;
int numKinds = Enum.GetNames(typeof(Kind)).Length;

for (int suit = 0; suit &lt; numSuits; suit++)
{
    for (int kind = 0; kind &lt; numKinds; kind++)
    {
        Cards.Add(new Card((Kind)kind, (Suit)suit));
    }
}
</code></pre>
</blockquote>

<p>For shuffling and drawing random cards, consider declaring the <code>Random</code> as a private variable of the deck rather than inside the methods. This avoids <a href="https://stackoverflow.com/questions/1654887/random-next-returns-always-the-same-values">the not so random Random behavior</a>.</p>

<pre><code>private readonly Random random = new Random();
</code></pre>

<p>Consider inverting code like this:</p>

<blockquote>
<pre><code>if (!Cards.Contains(card))
{
    Cards[0] = card;
    return;
}
throw new InvalidOperationException($"Deck already contains card {card}.");
</code></pre>
</blockquote>

<p>to this:</p>

<pre><code>  if (Cards.Contains(card))
  {
     throw new InvalidOperationException($"Deck already contains card {card}.");
  }
  Cards[0] = card;
</code></pre>

<p>Don't pollute your classes with specific utility methods. Write this as a static method or extension method in your test code.</p>

<blockquote>
<pre><code>public void WriteToConsole()
{
    foreach (Card card in Cards)
    {
        Console.WriteLine(card);
    }
}
</code></pre>
</blockquote>

<h3><code>CardSorter</code></h3>

<p>You should prefer <code>CompareTo</code> over comparasion operators.</p>

<blockquote>
<pre><code>if (x.Suit &gt; y.Suit)
{
    return 1;
}
if (x.Suit &lt; y.Suit)
{
    return -1;
}
return x.Kind &gt; y.Kind ? 1 : -1;
</code></pre>
</blockquote>

<pre><code>var index = x.Suit.CompareTo(y.Suit);
if (index == 0) index = x.Kind.CompareTo(y.Kind);
return index;
</code></pre>

<p>Also include null comparisons.</p>

<pre><code>if (x == null) return (y == null) ? 0 : 1;
if (y == null) return -1;
</code></pre>

<h3>General guidelines</h3>

<ul>
<li>use <code>var</code> as much as you can, specially when the declared type can be inferred from reading the code. <code>var card = new Card();</code> reads better as <code>Card card = new Card();</code> or <code>Dictionary&lt;string, List&lt;int&gt;&gt; collection = new Dictionary&lt;string, List&lt;int&gt;&gt;();</code> vs <code>var collection = new Dictionary&lt;string, List&lt;int&gt;&gt;();</code></li>
<li>check arguments against <code>null</code> in public methods</li>
</ul>
    </div>