<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code looks good, but can be improved.  </p>

<blockquote>
<pre><code>/**
 * Resizes the array when capacity reaches 100% or 25%
 *
 * @param capacity New capacity for the array
 */
private void resize(int capacity) {
    Item[] copy = (Item[]) new Object[capacity];
    for (int i = 0; i &lt; size; i++) {
        copy[i] = queue[i + index];
    }
    queue = copy;
}  
</code></pre>
</blockquote>

<p>The javadoc states that this method would resize the array when the capacity reaches a specific value <strong>which isn't correct</strong>. This method resizes the underlaying buffer no matter what capacity it has.  </p>

<p>This javadoc is lying. After removing the lying part only <code>Resizes the array</code> is left as description which basically doesn't add any value because it is obvious.  </p>

<p>I would remove that javadoc completely and rename the method to <code>resizeInternalBuffer</code>.  </p>

<hr>

<h3>enqueue()</h3>

<blockquote>
<pre><code>/**
 * Adds an item onto the end of the queue. If the size of the queue reaches
 * the length of the array, the length of the array is doubled.
 *
 * @param item Item to be added. Must not be null
 * @throws NullPointerException if the parameter item is null
 */
</code></pre>
</blockquote>

<p>Without reading the code I see that this method (and the <code>dequeue()</code> method as well) is doing too much. I would extract the checking for the size to separate methods like so  </p>

<pre><code>private void ensureCapacityMax() {
    if (size == queue.length) {
        resize(2 * queue.length);
    }
}

private void ensureCapacityMin() {
    if (size &lt; queue.length / 4) {
        resize(queue.length / 2);
    }
}  
</code></pre>

<p>which are then called like  </p>

<pre><code>public void enqueue(Item item) {
    if (item == null) {
        throw new NullPointerException("Item must not be null");
    }

    ensureCapacityMax();

    queue[size + index] = item;
    size++;
}
</code></pre>

<p>By using <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html" rel="nofollow">lambda expressions</a> you could simplify this to one method.  </p>

<hr>

<p>I don't really like the usage of <code>index</code> for <code>enqueue()</code> and <code>dequeue()</code>. A much cleaner way would be to use <code>head</code> and <code>tail</code> like so  </p>

<pre><code>private int head = 0;
private int tail = 0;  

public void enqueue(Item item) {
    if (item == null) {
        throw new NullPointerException("Item must not be null");
    }

    ensureCapacityMax()

    queue[tail] = item;
    tail = (tail + 1) % queue.length;
    size++;
}


public Item dequeue() {
    if (isEmpty()) {
        throw new NoSuchElementException("There is nothing in the queue");
    }

    ensureCapacityMin()

    Item item = queue[head];
    queue[head] = null;
    head = (head + 1) % queue.length;
    size--;
    return item;
}   
</code></pre>

<p>now we need to adjust the <code>resize()</code> method like so by the usage of <a href="http://docs.oracle.com/javase/7/docs/api/java/lang/System.html#arraycopy%28java.lang.Object,%20int,%20java.lang.Object,%20int,%20int%29" rel="nofollow"><code>System.arraycopy()</code></a>  </p>

<pre><code>private void resize(int capacity) {
    Item[] copy = (Item[]) new Object[capacity];

    if (size &gt; 0) {
        if (head &lt; tail) {
            System.arraycopy(queue, head, copy, 0, size);
        } else {
            System.arraycopy(queue, head, copy, 0, queue.length - head);
            System.arraycopy(queue, 0, copy, queue.length - head, tail);
        }
    }

    queue = copy;
    head = 0;
    tail = (size == capacity) ? 0 : size; 
}
</code></pre>

<p>I didn't test this implementation but it should work well.  </p>
    </div>