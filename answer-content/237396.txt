<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Disclaimer... I have very little experience with Kotlin.</p>

<p>Not really the focus of your question, but <code>synchronized</code> blocks should be only as big as they need to be.  Looking at your statistics code, you put the whole thing in the block.:</p>

<blockquote>
<pre><code>synchronized(transactions) {
        val threshold = getCurrentThreshold()
        val liveTransactions = transactions.filter { it.timestamp &gt; threshold }
</code></pre>
</blockquote>

<p>I'm not sure if the threshold needs to be in the block or not, it depends what your goal with it is...  however I think it's probably arbitrary so could be outside the block.  Putting that to the side, <code>filter</code> returns a copy of the collection.  Everything in your transactions collections is immutable, which means that <code>liveTransactions</code> is its own copy of data that won't change.  I don't see any reason for anything after this line to still be in the synchronised block.  Another call to <code>statistics</code> seems perfectly reasonable in this situation.</p>

<p>The way you initialise <code>max</code> and <code>min</code> seems unnecessarily complicated</p>

<blockquote>
<pre><code>var max = if (count &gt; 0) liveTransactions.first().amount else BigDecimal(0)
</code></pre>
</blockquote>

<p>You might as well be always setting it to <code>0</code>, since you don't then skip the first item in the list.</p>

<p>I think there's a bit more to separation of concerns than cognitive overload.  Part of the benefit is that it becomes easier to test the code that you've written.  To test your statistics code at the moment, you need to create the array list, via the <code>add</code> method on your TransactionService, making sure your timestamps are all correct for the current time.  If instead of your statistics method, you separate the calculation portion out, something like this:</p>

<pre><code>public inline fun &lt;T&gt; Iterable&lt;T&gt;.buildStatistics(selector: (T) -&gt; BigDecimal): Statistics {
    var sum: BigDecimal = BigDecimal(0)
    var count = 0
    var max = BigDecimal(0)
    var min = BigDecimal(0)
    var avg = BigDecimal(0)

    for (element in this) {
        sum += selector(element)
        max = max.max(selector(element))
        min = min.min(selector(element))
        count++
    }
    if (count &gt; 0)
        avg = sum.setScale(AMOUNT_SCALE, BigDecimal.ROUND_HALF_UP).divide(BigDecimal(count), BigDecimal.ROUND_HALF_UP)
    return Statistics(sum, min, max, avg, count)
}
</code></pre>

<p>Which can then be called...</p>

<pre><code>val stats = filteredTransactions.buildStatistics { t -&gt; t.amount}
</code></pre>

<p>The calculation code then becomes pretty trivial to test, construct an array list of transactions, then call call the <code>buildStatistics</code> method on it, then see if the calculated statistics are correct.</p>
    </div>