<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Mutating built-in prototypes is not a good idea. It's not only inelegant, it can also lead to conflicts when other scripts on the page expect the prototypes to be unmutated. (It can even <a href="https://stackoverflow.com/a/55934491">damage</a> future attempts to integrate functionality officially, if enough sites use the bad code.)</p>

<p>Instead of using <code>Element.prototype</code>, create your own class, and put methods onto <em>its</em> prototype.</p>

<p>If you want to emulate jQuery, you should probably select <em>all</em> elements that match the selector, not just the first one. (Using a collection of elements will also avoid errors if the collection is empty - jQuery doesn't error when methods are called on an empty collection)</p>

<p>The <code>active</code> flag would be more informative if it was named more precisely, perhaps call it <code>methodInProgress</code>.</p>

<p><code>that = this</code> <a href="https://github.com/airbnb/javascript#naming--self-this" rel="nofollow noreferrer">is an antipattern</a> in modern Javascript. If you need to use the calling context from the outer scope, use arrow functions instead. (You're already using ES2015 in multiple places)</p>

<p><code>callback</code> is a single word, not two, so the proper way to camelCase it would be to keep it as-is. Calling the arguments <code>callBack</code> instead could result in bugs later when other readers/writers of the code expect it to be formatted conventionally.</p>

<p>Promises should be reserved for <em>asynchronous</em> actions. If you're going to run something that's completely synchronous, using a Promise adds unnecessary and confusing noise. Consider having your functions return Promises <em>only if they're asynchronous</em>, and while processing the queue, if a callback returns a Promise, wait for the Promise to resolve before moving onto the next callback. If the callback <em>doesn't</em> return a Promise, you can still <code>await</code> it without errors, and the next queue callback will run immediately.</p>

<p>Since you have multiple methods which add callback to the queue and <code>return this</code>, consider passing those methods through a helper function to make the code a bit more DRY.</p>

<p>Refactored:</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const $ = selector =&gt; new PsuedoJquery(selector);
class PsuedoJquery {
  constructor(selector) {
    this.elements = [...document.querySelectorAll(selector)];
    this.queue = [];
  }
  async runNext() {
    await this.queue.shift()();
    if (this.queue.length) {
      await this.runNext();
    } else {
      this.methodInProgress = false;
    }
  }
  register(callback) {
    this.queue.push(callback);
    // If errors are a possibility, catch them here
    if (!this.methodInProgress) {
      this.methodInProgress = true;
      this.runNext();
    }
  }
  makeChainable(callback) {
    this.register(callback);
    return this;
  }
  addClass(className) {
    return this.makeChainable(() =&gt; {
      for (const elm of this.elements) {
        elm.classList.add(className);
      }
    });
  }
  removeClass(className) {
    return this.makeChainable(() =&gt; {
      for (const elm of this.elements) {
        elm.classList.remove(className);
      }
    });
  }
  delay(ms) {
    return this.makeChainable(() =&gt; new Promise((resolve) =&gt; {
      setTimeout(resolve, ms);
    }));
  }
}

$('#test')
  .removeClass("red").delay(500)
  .addClass("blue").delay(500).delay(500).removeClass("blue")
  .delay(500).addClass("red").delay(500).removeClass("red")
  .delay(500).addClass("blue").delay(500).removeClass("blue")
  .delay(500).addClass("red").delay(500).removeClass("red")</code></pre>
<pre class="snippet-code-css lang-css prettyprint-override"><code>.blue {
  background-color: blue;
}

.red {
  background-color: red;
}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;div id="test" style="width: 150px; height: 150px; margin:10px;" class="red"&gt;&lt;/div&gt;</code></pre>
</div>
</div>

    </div>