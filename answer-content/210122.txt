<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Idiomatic is relative. I guess it's a coding style you could find in older code-bases (and many winapi based applications are rather old), but you wouldn't write C++ like this today. Consider for instance:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;iomanip&gt;
#include &lt;iterator&gt;
#include &lt;algorithm&gt;
#include &lt;numeric&gt;
#include &lt;array&gt;

constexpr std::size_t MBR_SIZE = 255;
constexpr std::size_t BYTES_PER_COLUMN = 4;
constexpr char LINE_DELIMITER = '\n';
constexpr const char* COL_DELIMITER = " ";

int main() {
    std::array&lt;unsigned char, MBR_SIZE&gt; mbr;
    std::iota(std::begin(mbr), std::end(mbr), 0); // filling it for testing purposes

    std::cout &lt;&lt; std::hex &lt;&lt; std::setfill('0');
    std::size_t index = 0;
    std::transform(std::begin(mbr), std::end(mbr), std::ostream_iterator&lt;int&gt;(std::cout, COL_DELIMITER), [index](auto c) mutable {
        if (index++ % BYTES_PER_COLUMN == 0) std::cout &lt;&lt; LINE_DELIMITER;
        std::cout &lt;&lt; std::setw(2); // setw must be applied for each output
        return c;
    });
    std::cout &lt;&lt; std::endl;
}
</code></pre>

<p>In a dozen of lines you get the same result as <code>printMBR</code> and its two auxiliary functions (at least I believe so, I haven't had the chance to run your code), which are longer and more complicated.</p>

<p>To be more specific about your code:</p>

<ul>
<li><p>don't declare a variable before you're ready to define it, and don't define it before you're ready to use it.</p></li>
<li><p>don't <code>std::move</code> your return value, it prevents copy elision</p></li>
<li><p>don't declare free functions <code>static</code>, it's a java thing</p></li>
<li><p>inside <code>ReadMBR</code> there's a <code>char* buffer = new char[MBR_SIZE];</code> you don't use afterwards</p></li>
<li><p>I'm not a fan of that many <code>using</code> directives; prefix the names with <code>std::</code> and be done with it, unless you prefer to set up aliases: then <code>using string = std::string</code> is clearer</p></li>
<li><p>use standard algorithms, such as <code>std::copy</code>, <code>std::accumulate</code>, etc (in headers <code>&lt;algorithm&gt;</code> and <code>&lt;numeric&gt;</code>) or range-base for loops <code>(for auto item : sequence)</code> instead of "raw" loops. For instance, <code>charToHex</code> could be written</p></li>
</ul>

<p>like this:</p>

<pre><code>std::string s;
for (auto nibble : { (c &gt;&gt; 4) &amp; 0xf, c &amp; 0xf }) 
    s += fourBitsToString(nibble);
return s;
</code></pre>

<p>or:</p>

<pre><code>char lo = c &amp; 0xf;
char hi = (c &gt;&gt; 4) &amp; 0xf;
char chars[] = {hi, lo};

return std::accumulate(std::begin(chars), std::end(chars), std::string(), [](auto init, auto elem) {
    return init += (fourBitsToString(elem));
});
</code></pre>

<p>And, on a more aesthetic note, a four-bits aggregate can be called a half-byte or a nibble.</p>
    </div>