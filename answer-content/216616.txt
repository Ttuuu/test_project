<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are many, <em>many</em> things wrong with your code; I'll list some, and then I advise you to fix as many of them as you can (and more) and then repost a new question with the revised code.</p>

<p>First of all, you should compile your code with <code>-W -Wall -Wextra</code> (or <code>-W4</code> if you use MSVC). Read the first warning diagnostic. Fix it. Recompile. Read the first diagnostic. Fix it. ...until all the warnings are completely gone.</p>

<p>Procedural nit: When you post code to CodeReview, please post it in one big cut-and-pasteable chunk, or at least just a couple of chunks. Your current post mixes code and commentary in a way that makes it hard for the reviewer to cut-and-paste the whole piece of code into a file for testing.</p>

<hr>

<p>Speaking of commentary:</p>

<pre><code>    float T, beta;
    //beta=1.0/T; // boltzman constant is assumed to be 1.
    //creating a 2d lattice and populating it
    std::vector&lt; std::vector &lt; int &gt; &gt;lattice;
</code></pre>

<p>Is <code>beta</code> supposed to be <code>1.0 / T</code>, or not? By commenting out that line of code, you make it invisible to the compiler. Better make it invisible to the <em>reader</em>, too, and just delete it! (If you're commenting things out to preserve the "history" of the code, read up on version control systems like <code>git</code>, and then use one. It's easy!)</p>

<p>Furthermore, since you don't initialize <code>beta</code>, you can probably just get rid of the variable entirely.</p>

<p>Finally, the idiomatic way to place the whitespace when you're defining a variable of type <code>std::vector&lt;std::vector&lt;int&gt;&gt;</code> is simply thus:</p>

<pre><code>std::vector&lt;std::vector&lt;int&gt;&gt; lattice;
</code></pre>

<p>Notice the space between the variable's type and its name; and the lack of space anywhere else.</p>

<hr>

<p>Populating that lattice can be done quickly and easily using <a href="https://en.cppreference.com/w/cpp/container/vector/vector" rel="noreferrer"><code>vector</code>'s "filling" constructor</a>:</p>

<pre><code>std::vector&lt;std::vector&lt;int&gt;&gt; lattice(N, std::vector&lt;int&gt;(N, -1));
</code></pre>

<p>Now you don't need those nested <code>for</code> loops anymore!</p>

<hr>

<p>Going back up to the top of your code:</p>

<pre><code>int spin(int r) 
{
    int s;
    if(r&gt;5)
    {
        s=+1;
    }
    else
    {
        s=-1;
    }

    return s;
}
</code></pre>

<p>Replace this 14-line function with a 4-line function that does the same thing more clearly and simply:</p>

<pre><code>int spin(int r)
{
    return (r &gt; 5) ? 1 : -1;
}
</code></pre>

<p>No local variables, no mutation, no startling use of the <code>=+</code> "operator"; and perhaps most importantly for the reader, there's now 10 more lines available on my screen so I can look at <em>other</em> code at the same time! Vertical real estate can be important for reading comprehension.</p>

<hr>

<pre><code>float prandom(int i,int N)
{
    std::random_device rd;  //Will be used to obtain a seed for the random number engine
    std::mt19937 gen(rd()); //Standard mersenne_twister_engine seeded with rd()
    std::uniform_real_distribution&lt;&gt; dis(i,N);
        // Use dis to transform the random unsigned int generated by gen into a 
        // double in [1, 2). Each call to dis(gen) generates a new random double
    int t = dis(gen);
    return t;
}
</code></pre>

<p>This is wrong in at least two ways. First, most importantly: you're constructing a <code>std::random_device</code> on <em>each call to this function.</em> That is extremely expensive. Think of <code>std::random_device</code> as an open file handle to <code>/dev/urandom</code>, because that's what it is, under the hood. That means every time you call <code>prandom</code>, you're opening a file, reading some bytes, and closing it again!</p>

<p>You should keep a <em>global</em> random number generator, initialized just once at the start of the program. One way to do this (not cheap, but not as expensive as opening a file on every call to <code>prandom</code>) would be</p>

<pre><code>float prandom(int i,int N)
{
    static std::mt19937 gen = []() {
        std::random_device rd;
        return std::mt19937(rd());
    }();
    std::uniform_real_distribution&lt;float&gt; dis(i, N);
    // ...
</code></pre>

<p>Notice that <code>uniform_real_distribution&lt;&gt;</code> is secretly an alias for <code>uniform_real_distribution&lt;double&gt;</code>. Your code doesn't use <code>double</code>s; it uses <code>float</code>s. So it's (always) better to be explicit and say what type you mean â€” you have less chance of getting it wrong by accident!</p>

<pre><code>    int t = dis(gen);
    return t;
</code></pre>

<p>...And then you go ahead and stuff the return value into an <code>int</code> anyway! So what was the point of using a <code>uniform_real_distribution</code> in the first place? And what's the point of returning a <code>float</code> from <code>prandom</code>? Did you mean to simply</p>

<pre><code>return dis(gen);
</code></pre>

<p>instead?</p>

<p>You're also <a href="http://www.pcg-random.org/posts/cpp-seeding-surprises.html" rel="noreferrer">seeding your PRNG wrong</a>, but seeding it correctly is a huge headache in C++17, so never mind that.</p>

<hr>

<pre><code>        if(temp&gt;15)
        {
        H=H-0.015;
        }
</code></pre>

<p>Please indent your code correctly. You can use the <code>clang-format</code> command-line tool to automatically indent everything, or if you use a graphical IDE it almost certainly has an "Indent" option somewhere in the menus.</p>

<hr>

<p>That's enough for one day. As I said above, I advise you to fix as much as possible (that is, fix <em>everything</em> I talked about here, and then fix everything else you can think of, too) and then repost.</p>

<p>After you fix everything, but before you repost, <em>read your code from top to bottom one more time!</em> Find two more things that need fixing, and fix them. <em>Then</em> repost.</p>
    </div>