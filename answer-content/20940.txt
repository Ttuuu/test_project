<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A few random comments on pieces of the code:</p>

<pre><code>class Subject:
    __metaclass__ = ABCMeta

    @abstractmethod
    def register_observer(observer):
        """Registers an observer with Subject."""
        pass

    @abstractmethod
    def remove_observer(observer):
        """Removes an observer from Subject."""
        pass

    @abstractmethod
    def notify_observers():
        """Notifies observers that Subject data has changed."""
        pass
</code></pre>

<p>Why aren't you defining these methods? It seems to me they'll be the same for all subclasses so you don't need to make them abstract and implement them there.</p>

<pre><code>    def register_observer(self, observer):
        """Registers an observer with WeatherData if the observer is not
        already registered."""
        try:
            if observer not in self._observer_list:
                self._observer_list.append(observer)
                observer.register_subject(self)
            else:
                raise ValueError
</code></pre>

<p>Don't throw generic exceptions that might get mistaken for something else. I'd <code>raise Exception("Observer already subscribed to Subject!")</code> or a custom exception class.</p>

<pre><code>        except ValueError:
            print "ERROR: Observer already subscribed to Subject!"
</code></pre>

<p>Don't print error messages, just throw exceptions.</p>

<pre><code>            raise ValueError
</code></pre>

<p>Certainly don't catch an exception right after throwing it and then throw it again.</p>

<blockquote>
  <p>The Observer abstract class has an abstract method update(), but two
  other non-abstract methods register_subject(self, subject) and
  remove_subject(self). So when I implement the concrete observers, it
  inherits these two methods. Is this a wrong way of using the Abstract
  Base Class?</p>
</blockquote>

<p>That is a perfectly valid and common way of abstract base classes.</p>

<blockquote>
  <p>I've recently started to unit test and have had some trouble
  formulating my tests (for this particular example I wrote the tests
  after the code, although I know it's better to write the tests first).
  A particular example: I test that the Observers are in fact registered
  with the Subject by looking to see that the observer instance is in
  the Subject._observer_list, but this list is hidden. Is it ok for the
  test to be looking there?</p>
</blockquote>

<p>No, you shouldn't test the internal state of the object. You should test the external actions of the object. Here is a sample of how you should test it:</p>

<pre><code>class MyObserver(Observer):
    def __init__(self):
        self.updated = False

    def update(self):
        self.updated = True

def test_it():
    temperature_data = TemperatureData()
    observer = MyObserver()
    temperature_data.register_observer(observer)
    assert not observer.updated()
    temperature_data.set_measurements(2,4,4)
    assert observer.updated()
</code></pre>

<p>But the observer pattern is really not a great fit for python. It is not flexible and doesn't take advantage of python's features. The pattern I use is something like this:</p>

<pre><code>class Signal(object):
    def __init__(self):
        self._handlers = []

    def connect(self, handler):
        self._handlers.append(handler)

    def fire(self, *args):
        for handler in self._handlers:
            handler(*args)
</code></pre>

<p>On the <code>Subject</code> I'd do this:</p>

<pre><code>class TemperatureData:
    def __init__(self):
        self.changed = Signal()

    def set_temperaturedata(self, foo, bar):
        ...
        self.changed.fire(self)
</code></pre>

<p>Then to hook things up I'd say</p>

<pre><code>display = TemperatureDisplay()
temperature_data.changed.connect(display.update_temperaturedata)
</code></pre>

<p>I think this model is simpler. It lets objects emit multiple signals that could be observed, a given object can observer multiple other objects. The <code>TemperatureDisplay</code> object doesn't even know where the data is coming from, it just magically shows up on <code>update_temperaturedata</code> making it easier to test that object in isolation.</p>
    </div>