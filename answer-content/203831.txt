<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li>The methods can be <code>static</code> since they do not access any class instance data.</li>
<li>The <code>ph</code> and <code>phone</code> arrays are used for the same purpose and are created on every call to the method. They should be a single <code>static readonly</code> field.
2a. Remove some boilerplate by using array initializer syntax.</li>
<li>This feels like the perfect place for an iterator function (<code>yield return</code> syntax).
3a. This means eliminating the <code>ref</code> parameter and converting the return types to <code>IEnumerable&lt;string&gt;</code>.</li>
<li>Use <code>string.IsNullOrEmpty()</code> (or <code>string.IsNullOrWhiteSpace()</code>) instead of checking explicitly for <code>null</code> or length zero.</li>
<li>Always wrap <code>if</code> blocks in curly braces, even if it is one statement. Future you will thank yourself if you have to maintain that code.</li>
<li>Give your code a bit of vertical breathing room. It's for programmers to read :)</li>
<li>Very minor nit, but it comes from me being old and living through the bad old days of early .NET frameworks: use <code>string.Empty</code> when you have a "" constant.</li>
</ol>

<p>Here's what I wind up with as an initial cut:</p>

<pre><code>private static readonly string[] phone = { "0", "1", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz" };

public static IEnumerable&lt;string&gt; LetterCombinations(string digits)
{
    if (string.IsNullOrWhiteSpace(digits))
    {
        yield break;
    }

    int len = phone[digits[0] - '0'].Length;

    for (int i = 0; i &lt; len; i++)
    {
        foreach (string result in GetCombos(digits, string.Empty, i, digits.Length))
        {
            yield return result;
        }
    }
}

public static IEnumerable&lt;string&gt; GetCombos(string inputDigits, string curVariation, int charIndex, int length)
{
    if (curVariation.Length != length)
    {
        char ch = phone[inputDigits[0] - '0'][charIndex];

        curVariation += ch;
    }

    if (curVariation.Length == length)
    {
        yield return curVariation;
    }

    string newInput = inputDigits.Substring(1, inputDigits.Length - 1);

    if (string.IsNullOrWhiteSpace(newInput))
    {
        yield break;
    }

    int numChars = phone[newInput[0] - '0'].Length;

    for (int i = 0; i &lt; numChars; i++)
    {
        foreach (string result in GetCombos(newInput, curVariation, i, length))
        {
            yield return result;
        }
    }
}
</code></pre>
    </div>