<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>All answers provided are great and offer suggestions with a complexity in <code>O(sqrt(n))</code> instead of the original <code>O(n)</code> by using the trick to stop at <code>sqrt(n)</code>.</p>

<p>On big inputs, we can go for an even faster solution by using the decomposition in prime numbers:</p>

<ul>
<li><p>the decomposition in prime numbers can be computed in a time proportional to the square root of the biggest prime divisor if its multiplicity is one (the actually complexity is actually a bit more tricky than this)</p></li>
<li><p>the decomposition can be reused to generate all possible divisors (for each prime <code>p</code> with multiplicity <code>n</code>, you take <code>p ^ m</code> with <code>0 &lt;= m &lt;= n</code>.</p></li>
</ul>

<p>I can provide the following piece of code for the first task but I do not have a snippet for the second task (yet?)</p>

<pre><code>def prime_factors(n):
    """Yields prime factors of a positive number."""
    assert n &gt; 0
    d = 2
    while d * d &lt;= n:
        while n % d == 0:
            n //= d
            yield d
        d += 1
    if n &gt; 1:  # to avoid 1 as a factor
        assert d &lt;= n
yield n
</code></pre>

<p>Edit: I tried to implement the second step and got something which is not highly tested but seems to work:</p>

<pre><code>def mult(iterable, start=1):
    """Returns the product of an iterable - like the sum builtin."""
    return functools.reduce(operator.mul, iterable, start)


def yield_divisors(n):
    """Yields distinct divisors of n."""
    elements = [[p**power for power in range(c + 1)] for p, c in collections.Counter(prime_factors(n)).items()]
    return [mult(it) for it in itertools.product(*elements)]
<span class="math-container">```</span>
</code></pre>
    </div>