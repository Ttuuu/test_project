<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'll just do a code review and show you things that a beginning programmer should be aware of.</p>

<p>I won't go into the solution <em>at all</em> as the website already will show other attempts &amp; solutions.</p>

<h2>Generic remarks:</h2>

<p>Don't use end of line comments, as they may become hard to read fast, especially if the line is expanded (for instance by a rename of a variable throughout the scope of the variable).</p>

<p>You are operating on digits. Then you need a sensible representation of a digit. You have chosen <code>int</code> (a character could also be a choice), but you're still doing integer arithmetic in your methods. That's just not necessary and will slow your solution down. What if <code>tempnum</code> - which really should be named <code>guess</code> - would be an <code>int[]</code>, for instance? Would you have to perform all these calculations in the main loop?</p>

<p>What about a <code>getDigit(int v, int off)</code> if you want to convert between numbers and digits?</p>

<h2>Walk-through</h2>

<pre><code> bool isgoodguess (bool flag[], int tempnum, std::set&lt;int&gt; &amp;one, std::set&lt;int&gt; &amp;two,   // good guesses are guesses that can show an answer, given the prior information.
             std::set&lt;int&gt; &amp;three, std::set&lt;int&gt; &amp;four, int howmany) {
</code></pre>

<p>For this kind of method, you really need to write a method comment. It is unclear to the reader what <code>flag</code> means, and certainly what <code>tempnum</code> means.</p>

<p>The other thing here is that there are sets named one, two etc. A good application allows to test for 3 and 4 digits or even five. You you'd use a list or array of sets as input.</p>

<pre><code>int passnum;           // for ease of understanding. "howmany" is the number of correct digits.
</code></pre>

<p>If you've already explained "howmany" in the method parameter description, this would be a good time to explain <code>passnum</code> instead.</p>

<pre><code>switch(howmany) {
    cases...
</code></pre>

<p>A switch should be used sparingly, and if it is used on e.g. a number it should have a default (possibly throwing an exception).</p>

<pre><code>int counter = 0;                                     // counter tracks how many digits can be proven to be wrong.
</code></pre>

<p>You mean a <code>wrongDigitCounter</code>? Prefer longer var names over comments. If that's hard during writing, simply rename after.</p>

<pre><code>if (one.find(tempnum/1000) == one.end()) {           // if this digit can not be found in the current set of possible values (i.e this digit is not correct)
    counter++;                                       // increase counter
    flag[0] = false;                                 // mark this particular digit as a false one.
}
else {
    flag[0] = true;                                  // else if this digit cannot be proven to be wrong yet, mark it as true.
}
if (two.find(tempnum%1000 / 100) == two.end()) {     // and so on.
    counter++;
    flag[1] = false;
}
else {
    flag[1] = true;
}
if (three.find(tempnum%100 / 10) == three.end()) {
    counter++;
    flag[2] = false;
}
else {
    flag[2] = true;
}
if (four.find(tempnum%10) == four.end()) {
    counter++;
    flag[3] = false;
}
else {
    flag[3] = true;
}
</code></pre>

<p>Here the repetitiveness really jumps out. If you had an input array, I'm sure you could very easily do this in a loop, with just one piece of code in the middle. You can see this from the <code>flag[1]</code>, <code>flag[2]</code> etc. If <strong>you are doing the counting</strong> then something is going wrong, basically.</p>

<pre><code>std::set&lt;int&gt; digit1 = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};              // create a set of possible values for first digit.
</code></pre>

<p>A set of digit is called <code>digits</code> maybe. Again, repetition over 4. Where is the array?</p>

<pre><code>std::set&lt;int&gt; digit2 = digit1, digit3 = digit1, digit4 = digit1;
</code></pre>

<p>Well, a C++ programmer probably would be sure that these are copied instead of referenced, as they are by-value, but don't do that in other languages.</p>

<h2>Conclusion</h2>

<p>In the end, it's a good attempt. But you would be surprised how few numbers would be in an attempt written by an experienced programmer. We may well have no number literals in there <strong>at all</strong> except maybe a zero <code>0</code> value now and then. There would not be any <code>one</code> named variables, or variables names ending with a number behind it either.</p>
    </div>