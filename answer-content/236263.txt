<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There really isn't all that much to see here when it comes to cryptography. Basically this is a <em>wrapper class</em> that tries to wrap the knowledge of the person that wrote it (that's you I suppose) rather than to implement security for a specific use case. In such a sense, it is only useful for practice purposes.</p>

<p><em>Never ever</em> create such a class and make it the center of your security strategy (I've been there, steered there by "professionals", took me weeks to recover from it a couple of years later).</p>

<p>I'll just focus on the security parts:</p>

<ol>
<li>a string is not a key, if you want to use a password, use a Password Based Key Derivation Mechanism such as PBKDF2 (and keep in mind that most passwords are insecure even if you do take that measure - a number is certainly not a great password);</li>
<li>just <code>"AES"</code> will default to the insecure ECB mode for most if not all Java / provider implementations - it is OK for the key creation, but not for the "transformation" parameter in <code>Cipher.getInstance(String transformation): Cipher</code>;</li>
<li>all other modes require an IV for generic messages, as otherwise identical messages (or <em>parts</em> of messages) may leak data - and even <em>all</em> data in the case of counter mode encryption;</li>
<li>nowadays authenticated ciphers such as GCM should be used; this makes sure that an adversary cannot alter the ciphertext undetected by the receiver - such alterations may even threaten the confidentiality of the message (see plaintext / padding oracle attacks);</li>
<li>using <code>pValue.getBytes()</code> is dangerous as <code>getBytes</code> will default to platform encoding, and the platform encoding may differ per platform (Windows uses Windows-1252 and Linux / Android uses UTF-8, to name just one such difference) - try e.g. <code>pValue.getBytes(StandardCharsets.UTF_8)</code> instead;</li>
<li>just throwing security exceptions doesn't make sense, as it doesn't distinguish between runtime issues (algorithm not available) and input / output issues - see <a href="https://stackoverflow.com/a/15712409/589259">here</a> how to handle security exceptions;</li>
</ol>

<hr>

<p>The first thing I do in my IDE is to change <code>e.printStackTrace()</code> to <code>new IllegalStateException("No exception yet specified", e);</code>, usually with a <code>// TODO change exception</code> comment in front of it (picked up by the task system in Eclipse).</p>

<p>The problems with just printing the stack trace is that it is easily forgotten, it keeps running the code even after an exception is turned up and finally, it messes up the compilers detection of dead code.</p>

<hr>

<p><code>CRY_ALGO</code> of course is a cry-out for a better name.</p>
    </div>