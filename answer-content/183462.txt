<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Imports</strong></p>

<p>First, let me suggest you look at the <a href="https://www.python.org/dev/peps/pep-0008/#imports" rel="noreferrer">PEP 8 style guide.</a> I don't follow all of the suggestions myself, but some of them make good sense, including the suggestions on the arrangement and ordering of imports:</p>

<ol>
<li>Internal then third-party then local.</li>
<li>Simple imports, then named imports.</li>
<li>Avoid wildcard imports.</li>
</ol>

<p>Which gives us:</p>

<pre><code>import json
import requests
import socket
import urllib.request

import xml.etree.ElementTree as ET

import musicbrainzngs
</code></pre>

<p>While we're on the subject, I notice that your web requests are going to a site called <strong>audioscrobbler.</strong> I'll suggest that if they don't provide an API module in Python, you should go ahead and write one that fits your needs:</p>

<pre><code>import audioscrobbler
</code></pre>

<p>(<strong>NOTE:</strong> A little searching provides this module: <a href="https://pypi.python.org/pypi/audioscrobblerws/0.1.1" rel="noreferrer">https://pypi.python.org/pypi/audioscrobblerws/0.1.1</a> - I don't know if it's right for your needs.)</p>

<p>I'll further recommend that your audioscrobbler module should accept the API key as an external setting. Which means you need one more local module:</p>

<pre><code>import private_data
</code></pre>

<p>It's a good idea to separate your private data from your source code, especially since you might be tempted to put your source up on a code-sharing site like bitbucket or github. This way you won't "forget" to scrub out the secrets when you post an update at 3am one night...</p>

<p>You can set your api key during your initial startup:</p>

<pre><code>audioscrobbler.set_api_key(private_data.audioscrobbler_api_key)
musicbrainzngs.set_useragent("app", "version", contact=None)
</code></pre>

<p>Your <code>audioscrobbler</code> module can define very simple functions, extracting just the <code>get()</code> lines from your current code. This code:</p>

<pre><code>album = requests.get('http://ws.audioscrobbler.com/2.0/?method=album.getinfo&amp;api_key='+api_key+'&amp;artist='+artist+'&amp;album='+title)
</code></pre>

<p>becomes this code:</p>

<pre><code>album = audioscrobbler.get_album_info(album=title, artist=artist)
</code></pre>

<p>Right now it's just a wrapper. That's probably all it needs to be. But if you parse the result, you might be able to move the import of the HTTP and XML libraries into the audioscrobbler module entirely, which simplifies the rest of your program.</p>

<p><strong>Get top artists from a specific country</strong></p>

<p>I would suggest that this becomes another call to your <code>audioscrobbler</code> package:</p>

<pre><code>artists = audioscrobbler.get_top_artists_by_country(country='spain', limit=30, fields='name mbid')
</code></pre>

<p>You can make the web API calls smart about what fields they return, and let them handle knowing how to implement a limit of three pages (is that 10 per, or 5 per or ...?).</p>

<p><strong>Get some info about returned artists</strong></p>

<p>Now here you add in a new service - musicbrainzngs. So it's not all calls to the audioscrobbler! But there's a mistake I think you're making (I could be wrong - check this): you're using dictionaries when you should just use lists.</p>

<pre><code>for i,v in artists.items():
    if artists[i]['mbid'] != "None":
</code></pre>

<p>If we look at this code, what's in the <code>i</code> value? It's the key from the <code>artists</code> dictionary. But the artists dictionary was built like this:</p>

<pre><code>artists[ID] = {}
...
ID+=1
</code></pre>

<p>You built it, using a totally artificial ID that you made up. You might just as well say <code>artists[ID] = {}; ID += 1</code> and use a list. Except that function is built-in: <code>artists.append(...stuff...)</code></p>

<p>If you do that, you can iterate over the artists just using:</p>

<pre><code>for artist in artists:
</code></pre>

<p>The second part of this code looks like it should be another function in your <code>audioscrobbler</code> module.</p>

<p><strong>Get Top Albums from that returned artists</strong></p>

<p>In this section, you are making the same error you made in the artists section. You don't need a dictionary keyed by an arbitrary ID. Just create and append to a list. </p>

<p><strong>Get Tracks from albums</strong></p>

<p>Likewise here. There's a some added code for your audioscrobbler module, and a list where you're using a dictionary.</p>
    </div>