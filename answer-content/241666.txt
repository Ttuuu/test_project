<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This got too long to be a comment, so posting an answer.</p>

<p>We don't know your use case, so it's hard to know whether you are the 1 in 1,000,000 who actually needs something like this.  But most likely this is a bad idea.</p>

<ol>
<li><p>You could get the name wrong.  Using string for variable identifiers is error prone.  Probably most programmers run into this at some point.  A better thing to do is to (either redesign completely or) use strings with compile-time constant identifiers.</p></li>
<li><p>You could get the type wrong.  That is, you could set type A and try to get type B.  <code>std::any</code> will catch most of (all of?) these mistakes at runtime (altho your callers cannot tell if they tried the wrong type or the wrong name), but you won't be able to sleep at night because you'll worry that there is some code path you haven't tested that gets this wrong.  When the compiler type checks your program, it checks every code path!  That lets you rest easy... Can you redesign this to check at compile time?  That's non trivial; it would be much easier to use the normal variables we all know and love.</p></li>
<li><p>You said these parameters are global.  Does that mean you are putting your existing globals into a struct of globals? A lot of code bases have something like this, but a real fix would be get rid of all the globals altogether.  Or get rid of some of the uses to make progress.</p></li>
<li><p>This seems pretty slow if the alternative is to use variables that are "looked up" at compile time.</p></li>
<li><p>This is relatively easy to make thread safe (add locks as necessary), but imo difficult to make "thread useful" because you cannot distinguish between (a key that will never be in the map) and (a key that is about to be in the map).  If all the sets happen before all the gets, then maybe this doesn't matter to you.</p></li>
</ol>

<p>Again, I don't know your use case, but could you use a strongly typed struct of parameters instead?  I.e. no <code>std::map</code> and no <code>std::any</code>, but instead members (that may be optionals or sets) for each parameter/key?</p>
    </div>