<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>My general observations:</p>

<ul>
<li><p>I can understand your code and it's apparent intent.  I'd normally ask for a few more comments around the if statements to make sure a future maintainer doesn't get confused</p></li>
<li><p>Because you are using pointers, you have the 'destroy' function to be able to delete entries from your list.  But also, because you are using pointers, you are requiring the using code to ensure that it has not taken a copy of a pointer that might ever be 'destroyed'.  Unless you are assuming some kind of reference counting system within the 'destroy' function or require that a copy of an object pointer is never made then you are likely to get 'undefined behaviour'</p></li>
<li><p>A possible alternative is for you to return a filtered list of elements that have been removed as a result of an API call. e.g.</p>

<p>resultThing OperationThatRemovesFromList( list_t* myList, list_t* appendWithDiscards);</p></li>
<li><p>The calling code would then be responsible for destroying it's own objects when it knows it is safe to do so. (This is akin to manual garbage collection)</p></li>
<li><p>mallocing and freeing your list_t objects is fine since your library always has ownership of them anyway</p></li>
<li><p>To prevent code from assuming and using/manipulating your internal structure, you could hide the details of your list_t by having a public and private variant of them.  The public header file declares no meaningful internal details and is just a byte array of the same size as the real private list_t.  e.g. </p>

<p>struct public_list_t { 
    char[LIST_ELEMENT_SIZE] private; 
}</p></li>
</ul>

<p>where LIST_ELEMENT_SIZE is a macro that evaluates to the correct size depending on the size of pointers and size_t types on your system</p>

<ul>
<li>Unit testing: Your main function example is almost the outlines of a unit test; I would suggest that you expand it to act as a unit test of your library. After each operation, do an assert about the properties of your counted list.  (I am hoping that an assert will yield a non zero exit code that can be used to perform automated unit testing on every build).</li>
</ul>
    </div>