<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>When you have a C callback you usually pass two things</p>
<ul>
<li>A pointer to a C function</li>
<li>A <code>void*</code> pointer that is passed to your C function.</li>
</ul>
<p>The C function must know the type of the original object so it can cast the pointer back to its original type. only after it has been cast back can it be used. And you must cast it back to the exact type it was before you converted to <code>void*</code> or you are in undefined behavior.</p>
<p>So this means the C function must understand the original type.</p>
<p>Since your original type is a templated type (i.e. you don't know the type in general) you can't cast it back (unless you templitize the function so that the function you pass to C has a understanding of the templitized types).</p>
<p>The easy way to do this is to implement a virtual interface. Then you can get a pointer to the base class convert this to a <code>void*</code> then in the C function you can convert back to the base class pointer and call the appropriate virtual interface on this base pointer. Virtual dispatch will then take care of calling the correct implementation.</p>
    </div>