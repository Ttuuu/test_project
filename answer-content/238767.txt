<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p><code>RebaseIsException()</code></p>
</blockquote>

<p>This is a little strange name for a method. It doesn't tell anything about what happens inside it. A better name would be <code>VerifyInput()</code> or <code>ValidateInput()</code></p>

<hr>

<blockquote>
<pre><code>  if (inputBase &lt;= 0 &amp;&amp; outputBase &lt;= 0)
    throw new ArgumentException(nameof(inputBase), nameof(outputBase));
</code></pre>
</blockquote>

<p>This will never happen, because <code>&lt;= 0</code> is caught by the previous <code>&lt;= 1</code></p>

<hr>

<blockquote>
  <p><code>public static bool RebaseIsDigitsEmptyOrZero(int[] digits) =&gt; digits.Sum() == 0;</code></p>
</blockquote>

<p>Again a little strange name.</p>

<p>Besides that I think your general algorithm should be able to handle the zero-value of any base.</p>

<p>Further: You test against each digit not being negative. Therefore the only way this can return <code>true</code> is if <code>digits</code> only contains zeros or is empty and that is handled by <code>RebaseSolution()</code>.</p>

<p><code>RebaseIsDigitsEmptyOrZero(int[] digits)</code> is all in all an optimization for zero-values, but in fact a bottleneck for all other values, because it iterate through the list one extra time.</p>

<hr>

<p>This:</p>

<blockquote>
<pre><code>  if (digits.Any(e =&gt; e &lt; 0))
    throw new ArgumentException(nameof(digits));

  if (digits.Any(e =&gt; e &gt;= inputBase))
    throw new ArgumentException(nameof(inputBase), nameof(digits));
</code></pre>
</blockquote>

<p>can be combinded to:</p>

<pre><code>  if (digits.Any(e =&gt; e &lt; 0 || e &gt;= inputBase))
    throw new ArgumentOutOfRangeException(nameof(digits));
</code></pre>

<p>saving one iteration of the data set (in worst case).</p>
    </div>