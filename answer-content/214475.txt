<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Use a <code>Map</code></h1>

<p>Since Java 8 it is possible to treat methods as <a href="https://en.wikipedia.org/wiki/Higher-order_function" rel="nofollow noreferrer">higher order functions</a>, what makes it possible to store them as a <em>value</em> inside a <code>Map</code></p>

<pre class="lang-java prettyprint-override"><code>Map&lt;Integer, Consume&lt;OutputStream&gt; countByConsumer = new HashMap&lt;&gt;();
countByConsumer.put(1, BaseTest::showOne);
countByConsumer.put(2, BaseTest::showTwo);
</code></pre>

<p>Than you can simply use <code>get</code> inside <code>show</code></p>

<pre class="lang-java prettyprint-override"><code>static void show(int count, PrintStream out) {
    Consumer&lt;PrintStream&gt; printStreamConsumer = countByConsumer.get(count);
    printStreamConsumer.accept(out);
}
</code></pre>

<p>The advantage of this method is that you get ride of the huge <code>switch</code></p>

<h1>Use OOP</h1>

<h2>Use the <a href="https://en.wikipedia.org/wiki/State_pattern" rel="nofollow noreferrer">State-Pattern</a></h2>

<p>If you want a oop solution, i think the state-pattern would be the way to go. There for you would have the class <code>Hangman</code> which have multiple <code>HealthState</code>s</p>

<pre class="lang-java prettyprint-override"><code>class Hangman {
    private HealthState healthState;

    // constructor

    void setHealthState(HealthState healthState) {
        this.healthState = healthState;
    }

    void display(HealthState healthState, PrintStream out) {
        healthState.display(out)
    }
}
</code></pre>

<pre><code>class OneHealth implements HealthState {

    private Hangman hangman;

    // constructor

    @Override
    public void display(PrintStream out) {
        out.println("             ");
        out.println("            |");
        out.println("            |");
        out.println("            |");
        out.println("            |");
        out.println("            |");
        out.println(" ___________|___");
        out.println(" |    1/10      |");
        out.println(" |              |");
        hangman.setHealthState(new TwoHealth());
    }
}

class TwoHealth implements HealthState {

     private Hangman hangman;

    // constructor

    @Override
    public void display(PrintStream out) {
        /*...*/
        hangman.setHealthState(new ThreeHealth());
    }
}
</code></pre>
    </div>