<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Avoid forward declarations</h1>

<p>Why is there a forward declaration of <code>class Camera</code> near the top? If <code>class Camera</code> is declared elsewhere, just add <code>#include &lt;Camera.h&gt;</code> instead. The problem with forward declarations is that you are unnecessarily repeating things, and make it easier to introduce errors.</p>

<p>If you really need forward declarations to avoid <code>#include</code> loops, then put those forward declarations in a separate header file, and then <code>#include</code> that header file both in the place where you originally needed the forward declarations, <em>and</em> in the header files that have the full class definitions. This way, if you make a mistake with the forward declarations, the compiler will catch it when compiling the classes.</p>

<h1>Make the constructor useful</h1>

<p>I see you have a member function names <code>Create()</code>, and a constructor which takes no parameters. This leads me to believe your constructor doesn't fully construct <code>Chunk</code>s, and that you need to call <code>Create()</code> to fully create a <code>Chunk</code>. If so, why not let the constructor do everything <code>Create()</code> does?</p>

<h1>Why does updating and rendering depend on the camera?</h1>

<p>When rendering using OpenGL, the geometry you build from your objects is normally independent of the camera position. The latter only influences the model-view-projection matrix. I would expect these functions to not depend on the camera. If there is some functionality in them that does, could that perhaps be split out into a separate function, or avoided altogether?</p>

<h1>Getters should be <code>const</code></h1>

<p>Functions with names that start with <code>Get</code> probably don't change any of the member variables, only read them. Therefore these should be marked <code>const</code>, like so:</p>

<pre><code>glm::vec3 GetPosition() const;
</code></pre>

<p>This helps the compiler optimize your code, and will also create helpful error messages if you do accidentily change some member variables within a getter function.</p>

<h1>Make as much <code>private</code> as possible</h1>

<p>You generally should hide as many member variables as possible. Does other code really need to write or read to <code>ShouldBeDeleted</code> or <code>GlobalChunkVertexCount</code>? If they only need to either read or write, writing a get- or set-function would ensure no accidents happen.</p>

<p>Similarly, <code>Data[][][]</code> should be private, and some functions should be added to read and write to individual voxels. The reason is that in the future, you might want to change how this data is stored, and it is much easier to just update the getter and setter functions than to change all the places that directly manipulate <code>Data</code>.</p>

<h1>Avoid repetition</h1>

<p>You have a lot of functions that are specialized for top/bottom/left/right/front/back. This adds a lot of repetition, which might be avoidable. How about defining an <code>enum</code> to denote neighbor direction?</p>

<pre><code>enum class Neighbour {
    TOP,
    BOTTOM,
    LEFT,
    RIGHT,
    FRONT,
    BACK,
    COUNT
};
</code></pre>

<p>And then use this to make an array out of the pointers to neighboring chunks:</p>

<pre><code>std::weak_ptr&lt;Chunk&gt; Neighbors[std::static_cast&lt;size_t&gt;(Neighbor::COUNT)];
</code></pre>

<p>And of some of the member functions:</p>

<pre><code>bool ShouldAddFace(int x, int y, int z, Neighbor neighbor);
void AddFace(int x, int y, int z, int &amp;idx, Neighbor neighbor);
</code></pre>

<h1>Avoid too many flags</h1>

<p>You have lots of flag variables. Some of them, like <code>IsChunkEmpty</code>, I can imagine are a form of optimization. That's fine. But there's a lot of <code>DidThreadFinish</code>, <code>WasThreadTerminated</code> and so on, that sound like they are there to work around issues that might be solved in other ways.</p>

<p>Flags like these sound like they might be checked repeatedly, which is inefficient. Maybe there is something else that can be checked than the flag itself, or maybe you can guarantee some order so that the flag is unnecessary. For example, if you always ensure <code>CreateMesh()</code> is called before <code>Render()</code>, I'm sure you don't need <code>WasMeshCreated</code>.</p>

<p>Similarly, if you always ensure to call <code>ChunkThread.join()</code> before doing things that currently check <code>WasThreadTerminated</code>, then you could get rid of that flag as well.</p>

<h1>Using atomics</h1>

<p>Atomics are good to have for multi-threaded code. They are no substitute for locks though. Also, changing multiple atomics doesn't mean they all are changed together in an atomic way. Having so many flags raises questions. What if the thread terminates before <code>ShouldTerminateThread</code> is called? Why are there both <code>DidThreadFinish</code> and <code>WasThreadTerminated</code>, and why is the former not an atomic variable?</p>

<h1>Don't include unnecessary headers</h1>

<p>Why is there an <code>#include &lt;future&gt;</code>, if no futures are used in <code>Chunk.h</code>? Remove unneeded <code>#include</code>s.</p>

<h1>Remove commented-out code</h1>

<p>You already mentioned you have your code in a git repository. That means git will take care of remembering the history for you. So you shouldn't merely comment out code you no longer use, but remove it entirely. So this line should go:</p>

<pre><code>//void RebuildMesh();
</code></pre>

<p>This keeps the code clean. If you ever need it back, git will be able to find it for you.</p>

<h1>Use <code>{}</code> for value initialization</h1>

<p>For member variables with a more complex type that you want to ensure are initialized to their default value, use <code>{}</code>. This can sometimes avoid repeating their type. For example:</p>

<pre><code>glm::vec3 Position = {};
</code></pre>

<h1>Don't write <code>this-&gt;</code> unnecessarily</h1>

<p>Member functions and variables can be accessed directly from other class members, you almost never need to add <code>this-&gt;</code>.</p>

<p>Similarly, in member functions of <code>class Chunk</code>, you don't need to write <code>Chunk::</code> in front of static member constants.</p>

<h1>Don't detach threads</h1>

<p>You almost never have to detach a thread. If you detach a thread, you no longer have full control over it. Just keep it attached to your program, and don't forget to call <code>join()</code> to clean it up.</p>

<h1>Building meshes asynchronously</h1>

<p>You want to build meshes in the background, and have them pop onto the screen when they are finished. You don't want to potentially have one thread per chunk, as there might be a lot of chunks suddenly coming in to view, which would all spawn threads. Instead, you probably want only a few threads dedicated to chunk building, so they don't take all the CPU time necessary for rendering the already built chunks.</p>

<p>The way to do this is to create a work queue: if a chunk becomes visible, but it hasn't been built yet, add a pointer to this chunk to the queue. One or more threads are waiting for items to be added to this queue, and once there is something in it they can dequeue it and start building the chunks refered to. When a thread is finished with a chunk, it can somehow signal that it is done building, and can then check the queue if there is more work.</p>

<p>For this to work, you need to have an atomic queue, so multiple threads can add and remove from it. A simple solution is to use a <code>std::queue</code> guarded by a <code>std::mutex</code>, and a <a href="https://en.cppreference.com/w/cpp/thread/condition_variable" rel="noreferrer"><code>std::condition_variable</code></a> (that link contains an example of a very simple worker thread) so the worker threads can go to sleep if there is nothing to be done, but can be woken up once another threads adds something to the queue. </p>

<h1>Make better use of GLM</h1>

<p>In <code>Chunk::update()</code>, you calculate the difference vector between the chunk's position and the camera position, and then look at the <code>x</code>, <code>y</code> and <code>z</code> components separately to determine whether it should be deleted. This can be greatly simplified by writing:</p>

<pre><code>bool shouldDelete = glm::distance(Position, cam-&gt;GetPosition()) &gt; ChunkManager::ChunkGenRadius * ChunkSize;
</code></pre>

<p>There's a slight difference; the above code will actually delete chunks outside of a sphere instead of a box, but that's probably fine.</p>

<p>In <code>ChunkManager::Update()</code>, you can get the integer chunk position simply using:</p>

<pre><code>glm::vec3 camChunkPos = glm::floor(camera-&gt;GetPosition() / ChunkSize);
</code></pre>

<p>Make better use of GLM, this results in shorter, more readable code with less errors. Every time you are doing something component-wise, check if there might not already be a function that does what you want for all components of a vector in one go.</p>

<h1>Avoid duplicating data unnecessarily</h1>

<p>It looks like <code>ChunkManager</code> has a <code>ChunkShader</code>, which is passed to all <code>Chunk</code>s created by it, and each <code>Chunk</code> also stores a copy. This seems unnecessary. Why not pass the <code>ChunkShader</code> as a parameter to the <code>Render()</code> functions?</p>

<h1>Avoid bare pointers</h1>

<p>Whenever possible use a proper container to manage object storage, instead of calling <code>new</code> and storing a bare pointer. STL containers ensure the storage gets deleted properly.</p>

<p>In <code>ChunkManager</code>, use <code>std::vector&lt;Chunk&gt; Chunks</code> to store chunks. In <code>CreateFixedworld()</code>, simply allocate the right amount of space with:</p>

<pre><code>Chunks.resize(width * height * depth);
</code></pre>

<p>You never called <code>delete</code>, so this change will fix a memory leak.</p>

<h1>Use C++17's <code>if</code>-statements with initializers</h1>

<p>Especially when trying to find something in a container, <code>C++17</code> allows you to simplify getting an interator and doing something only when it didn't point to the end. For example, in <code>ChunkManager::Update()</code>, you can write:</p>

<pre><code>if (auto result = ChunkMap.find(posToCheck); result == ChunkMap.end) {
    ...
}
</code></pre>

<h1>Use <code>std::make_shared()</code> and <code>std::make_unique()</code></h1>

<p>Instead of writing <code>std::shared_ptr&lt;Chunk&gt;(new Chunk)</code>, write <code>std::make_shared&lt;Chunk&gt;()</code>. This avoids some repetition. Also, when assigning to a <code>std::shared_ptr&lt;&gt;</code> variable, there is no need to first cast a new object to a <code>std::shared_ptr&lt;&gt;</code>. So instead of:</p>

<pre><code>std::shared_ptr&lt;Chunk&gt; newChunk = std::shared_ptr&lt;Chunk&gt;(new Chunk());
</code></pre>

<p>You could write:</p>

<pre><code>std::shared_ptr&lt;Chunk&gt; newChunk = new Chunk();
</code></pre>

<p>However, it's generally best to avoid <code>new</code> and thus to use <code>std::make_shared&lt;&gt;</code>. Note that you can use <code>auto</code> to avoid more repetition:</p>

<pre><code>auto newChunk = std::make_shared&lt;Chunk&gt;();
</code></pre>

<p>The same goes for <code>std::make_unique&lt;&gt;</code>.</p>

<p>Note that in <code>ChunkManager::Update()</code>, it's better to make <code>newChunk</code> a <code>std::unique_ptr&lt;&gt;</code>, since it's not being shared at that moment, and then hand over ownership to <code>ChunkMap</code> simply by writing:</p>

<pre><code>ChunkMap[posToCheck] = newChunk;
</code></pre>
    </div>