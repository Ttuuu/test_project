<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>No and no. This is a very inefficient way to reverse, for example, a dynamic array based list (it's a different story with a linked list). With a dynamic array based (e.g. <code>ArrayList</code>) The <code>remove(0)</code> operation will require moving every other element in the list (linear in the length), so the whole method is quadratic in the total length of the list. It also requires a linear number of stack frames, which are actually pretty expensive and if you ask for too many the program will crash, which means this method will not work for long lists.</p>

<p>An efficient solution would work in linear time with a constant space requirement.</p>

<hr>

<p>When thinking about inputs, it's important to also consider <code>null</code> as a possible input. The deficient spec does not indicate what should be done with a <code>null</code> input, which means you have had to make a decision, and that decision should be documented. The 'easy' (and often best) option is to explicitly test for a <code>null</code> input and throw an <code>IllegalArgumentException</code> exception, so that anyone using your method receives a useful error message. You could argue that your code should do nothing with a <code>null</code>, but that's a bit iffy, because the spec doesn't qualify the behaviour, and that would 'silently' fail if someone passed it a <code>null</code> incorrectly: throwing an exception forces any unexpected usage to be address directly, which may or may not prompt a decision change, which makes it a good 'default' choice.</p>

<hr>

<p>There is no need here to pre-declare <code>t</code>: just declare and assign it in one go:</p>

<pre><code>T t = list.get(0);
</code></pre>

<p>This makes it easier to find out what it means. You could also make it <code>final</code> in this case, so that it is entirely clear that it is only assigned once, which makes it that little bit easier to reason about the code.</p>

<hr>

<p>When writing recursive code like this, it can pay select the 'most ideal' base case. In this instance, any list of length no more than 1 is already reversed, so you could change the <code>if</code> condition to <code>list.size() &gt; 1</code>. This doesn't change the complexity, but is something of which to be aware.</p>
    </div>