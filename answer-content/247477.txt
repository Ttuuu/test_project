<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The unit tests look good. Good job!</p>
<hr>
<pre><code>def __init__(self, session):
    """
    Initialize shopping cart.
    """
    self.session = session
    cart = self.session.get(settings.CART_SESSION_ID)
    if not cart:
        cart = self.session[settings.CART_SESSION_ID] = {}
    self.cart = cart
</code></pre>
<p>N.B. You are missing the class signature</p>
<pre><code>class Cart:
</code></pre>
<p>Assuming the session is a dict like object, <code>.get</code> will implement a <code>default</code> keyword argument, which will simplify this code.</p>
<pre><code>def __init__(self, session):
    """
    Initialize shopping cart.
    """
    self.session = session
    self.cart = self.session.get(settings.CART_SESSION_ID, {})
</code></pre>
<hr>
<pre><code>def add(self, product, quantity=1, update_quantity=False):
    """
    Add new product to cart, or update quantity of item already in cart.
    """
    product_id = str(product.id)
    if product_id not in self.cart:
        self.cart[product_id] = {'quantity': 0,
                                 'price': str(product.price),
                                 'name': product.name,
                                 }
    if update_quantity:
        self.cart[product_id]['quantity'] = quantity
    else:
        self.cart[product_id]['quantity'] += quantity
    self.save()
</code></pre>
<p>Storing the product price as a string (<code>'price': str(product.price)</code>) can behave weirdly you are converting from floating point numbers. Using decimal does make sense here, but may be overkill if you will only ever need 2 places of precision. It might be easier to work in cents/pennies.</p>
<p>I would move creating a new dictionary representation of a product. It may have non-trivial business logic in the future, and you may want to move it somewhere else. Both of these tasks will be easier when all the logic is encapsulated into a small function.</p>
<p>I think <code>update_quantity</code> would be better named as <code>set_quantity</code>. Update implies the new value depends on the previous value, whereas that is not the case here. If anything, I would have expected the statements inside <code>if update_quantity: else:</code> to be the other way around.</p>
<pre><code>def product_dict(product):
    """"""
    return {
        'quantity': 0,
        'price': str(product.price),
        'name': product.name,
    }

def add(self, product, quantity=1, set_quantity=False):
    """
    Add a new product to cart, or set the quantity of item already in cart.
    """
    product_id = str(product.id)
    if product_id not in self.cart:
        self.cart[product_id] = product_dict(product)
    if set_quantity:
        self.cart[product_id]['quantity'] = quantity
    else:
        self.cart[product_id]['quantity'] += quantity
    self.save()
</code></pre>
    </div>