<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are two issues I personally dislike very much.</p>

<h1>Messing with date/time using homebrew algorithm and math</h1>

<p>While looking easy to handle time/date are by far more complcated to handle than you ever can think of. Timezones, locals, leap years and so on. When doing time/date math and/or serialisation/deserialisation always(!) go for a library. For python this is <a href="https://docs.python.org/3/library/datetime.html" rel="nofollow noreferrer">datetime</a></p>

<h1>When the code is lying to me when I'm reading it as natural language</h1>

<p>With lying I mean your line</p>

<pre><code>people_sorted_time[j].prio1 = people_sorted_time[j].prio2
</code></pre>

<p>This is not true. The person clearly stated a first priority project. When you change that value as an algorithmic side effect you immediatly break data integrity. Your person suddenly has both priorities on the same project. You even got yourself tricked. What happens, when a person got the first prio project taken away and later the second one as well?</p>

<h1>Other issues</h1>

<p>There is no need to have <code>people_sorted_time</code>, as you never refer to the read order again. Just do </p>

<pre><code>people = sorted(people, key=lambda x: x.time) 
</code></pre>

<p>Never loop over <code>range(len(something)</code>, always try to loop over the elements directly. Your output loop rewrites (still lying about prio1) to</p>

<pre><code>for p in people:
    res.write(p.name + "\t" + p.prio1 + "\n")
</code></pre>

<p>You use numpy only for reading a file, then convert back to standard python. This is a fail. Read with python directly.</p>

<pre><code>with open("data.txt") as infile:
    lines = infile.readlines()
people = [Person(*line.split()) for line in lines]
</code></pre>

<p>You need time for comparison only. There is no need to mess with it, string comparison will do.</p>

<pre><code>self.time = time
</code></pre>

<p>Do not modify the people data but maintain a set of available projects</p>

<pre><code>prio1_projects = set(p.prio1 for p in people)
prio2_projects = set(p.prio2 for p in people)
projects_available = prio1_projects | prio2_projects
</code></pre>

<p>When assigning projects we do it like </p>

<pre><code>people = sorted(people, key = lambda p: p.time)
assignments = []
for p in people:
    if p.prio1 in projects_available:
        proj = p.prio1
    elif p.prio2 in projects_available:
        proj = p.prio2
    else:
        proj =  None
    assignments.append(proj)
    if proj is not None:
        projects_available.remove(proj)
</code></pre>

<p>Note the new <code>None</code> case.</p>

<p>The output code</p>

<pre><code>with open("results","w") as res:
    res.write("Name"+"\t"+"Assigned Project"+"\n")
    for p, a in zip(people, assignments):
        res.write(p.name + "\t" + str(a) + "\n")
</code></pre>
    </div>