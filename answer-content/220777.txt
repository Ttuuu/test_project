<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Limit execution to main module</h1>

<p>It <a href="https://stackoverflow.com/a/419189/1394393">is customary</a> for code that starts executing a series of commands to be surrounded in a special <code>if</code>-block:</p>

<pre><code>if __name__ == '__main__':
    ...
</code></pre>

<p>This prevents the code from being executed when it is imported into another module.</p>

<h1>It's probably a good idea to put most of your code into a method or two</h1>

<p>Particularly once you've put your code inside a main block, the multiple levels of indentation can get a little messy quickly. It helps to put some of the code into a method and then call it, rather than just have it all in sequence:</p>

<pre><code>def print_longer_string(s1, s2):
    ...

string1 = input("Enter first string: ")
string2 = input("Enter second string: ")
print_longer_string(string1, string2)
</code></pre>

<h1>Use <code>len</code></h1>

<p><code>len</code> <a href="https://stackoverflow.com/a/37262373/1394393">is the standard mechanism</a> for obtaining the length of a <code>str</code>, as well as any other sequence type.</p>

<h1>Reduce repetition</h1>

<p>You can reduce your <code>if</code> block to just two conditions by testing for equal lengths first and using a ternary:</p>

<pre><code>if len(string1) == len(string2):
      print("Both strings are equal.")
else:
      print("Larger string is:")
      print(string1 if len(string1) &gt; len(string2) else string2)
</code></pre>

<p>This allows you to avoid repeating the <code>print("Larger string is:")</code> line without having to move that message to a variable.</p>

<h1>Use more descriptive messages</h1>

<p>"Both strings are equal" doesn't really describe what the program is telling you. "Larger" can also have different meanings, as well. (It could refer to lexical sorting, for example.) "The strings have equal length" and "The longer string is:" would be more explicit and less likely to cause confusion. We could differentiate between character and byte length, if that won't be clear from context, but character length is the usual assumption and is what you get from Python 3 by default.</p>

<h1>Formatting</h1>

<p>Read PEP8 for Python's standards on the use of spaces around parentheses, indentation length, and blank lines. Your team might define their own standards, but PEP8 is the industry default.</p>

<h1>Final code</h1>

<p>Putting all these together, you will get something like</p>

<pre><code>def print_longer_string(s1, s2):
    if len(s1) == len(s2):
        print("The strings have equal length")
    else:
        print("The longer string is:")
        print(s1 if len(s1) &gt; len(s2) else s2)

if __name__ == '__main__':
    s1 = input("Enter the first string: ")
    s2 = input("Enter the second string: ")
    print_longer_string(s1, s2)
</code></pre>

<p>You'll note I also shortened the variables down to <code>s1</code> and <code>s2</code>. <code>string1</code> is actually fine as a variable name if you prefer; I just find <code>s1</code> a bit quicker to read through. You usually want meaningful variable names, but there's no semantic meaning to these variables to capture in the name since it's just two arbitrary strings, so <code>s1</code> doesn't really lose anything over <code>string1</code>.</p>

<p>I also want to note that I considered separating out the <code>print</code>ing from actually picking which string to print. I decided <em>not</em> to separate them because the case of equal lengths was handled differently. This fact greatly reduced any benefit we would get from separating the determination from the actual IO call. Separating them would require either having a function that returns the full string to print (which has little value since the exact message is probably dependent on the IO mechanism anyway) or introducing an extra indicator in the return value to detect the equal length case (which is a level of complexity the program does not need yet under its current requirements).</p>
    </div>