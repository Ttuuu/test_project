<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This code is much easier to read and understand than the last version. This is a massive leap in attaining clean code in a short amount of time. </p>

<h2>On Errors</h2>

<p>You have the following code:</p>

<pre><code>    On Error Resume Next
    Set companySheet = Sheets(companyName)
    On Error Resume Next
    firstColumnContainsNoVisibleCells = sourceTable.AutoFilter.Range.Columns(1).SpecialCells(xlCellTypeVisible).count &lt;= 1

    On Error GoTo 0
</code></pre>

<p>Well done on removing the error trap as early as possible. You don't need the second <code>On Error Resume Next</code> because the first has already set the relevant conditions. </p>

<p>However, later in the code you set the error trap again, but do not turn it off.</p>

<pre><code>        On Error Resume Next
        firstTargetColumnContainsVisibleCells = targetTable.AutoFilter.Range.Columns(1).SpecialCells(xlCellTypeVisible).count &gt; 1
</code></pre>

<p>Add an <code>On Error Goto 0</code> statement in there somewhere otherwise you might hide some coding error that is relatively easy to fix <strong>and</strong> you could be hiding an error that gives you false data. </p>

<h2>X</h2>

<p>What is <code>X</code>? You have used descriptive variable names throughout the code, but one mystery remains!</p>

<h2><code>If</code> conditions</h2>

<p>You have two lines of code which have a redundant pattern:</p>

<pre><code>If Not companySheet Is Nothing = True Then
If Not companySheet Is Nothing = False Then
</code></pre>

<p>Later on you use a form that is cleaner:</p>

<pre><code>If rangeOverviewFound Is Nothing Then
</code></pre>

<p>The earlier statements can be recast into a more natural form:</p>

<pre><code>If Not companySheet Is Nothing Then
If companySheet Is Nothing Then
</code></pre>

<h2>Use of Parenthesis (implicit versus explicit values)</h2>

<p>Mathieu Guindon (@MathieuGuindon) can explain this much better than I. Using the following code line as an example:</p>

<pre><code>    MsgBox "Worksheet for " &amp; (companyName) &amp; " created"
</code></pre>

<p>The '()' forces an evaluation with some side effects. It creates a value item that is passed by value (<code>ByVal</code>) to the routine/function. This could also bypass the intended passing by reference.</p>

<p>If the object in '()' is an object, then the evaluation will try to get the default value (e.g. for a Range object, it would pass the Range.Value because it is the <strong>implicit</strong> default). This, of course means that the function could get something it is not expecting thus causing errors!</p>

<p>In this case, <code>companyName</code> is a String, and the string evaluates to a string without any real issues. But develop good habits from the start.</p>

<p>Some additional reading:</p>

<ul>
<li><a href="https://stackoverflow.com/questions/46959921/byval-vs-byref-vba">https://stackoverflow.com/questions/46959921/byval-vs-byref-vba</a></li>
<li><a href="https://stackoverflow.com/questions/22186853/unexpected-results-from-typename">https://stackoverflow.com/questions/22186853/unexpected-results-from-typename</a></li>
<li><a href="https://stackoverflow.com/questions/5413765/what-are-the-rules-governing-usage-of-brackets-in-vba-function-calls">https://stackoverflow.com/questions/5413765/what-are-the-rules-governing-usage-of-brackets-in-vba-function-calls</a></li>
</ul>

<p>Related - At one stage, Microsoft deprecated the <code>Call</code> keyword as it is a hangover from very early days of BASIC. But this is currently a matter of hot debate: <a href="https://stackoverflow.com/questions/56504639/call-statement-deprecated-or-not">https://stackoverflow.com/questions/56504639/call-statement-deprecated-or-not</a></p>

<h2>Incomplete logic paths</h2>

<p>You have <code>If firstColumnContainsNoVisibleCells Then</code> and then do a block of code. IF this is not true, you then do a different block of code. Which is good.</p>

<p>However, within the blocks of code, you check the status of <code>companySheet</code>. In one block you check to see if it is <code>Nothing</code> and in the other you check to see if is <code>Not</code> <code>Nothing</code>.</p>

<p>The potential issue comes if that conditional fails - what does it mean? From a coding sense, you just do nothing and that could be fine. But from a business sense, does it meant that your input is malformed. Could these blocks of code benefit from having an <code>Else</code> statement?</p>

<p>Whenever setting up a range of conditions, have a thought towards all the possibilities of the conditions. That may allow you to find inconsistent data, potential new uses for your code, or possible errors or exceptions that you can trap and fix early. </p>

<p>For me, an <code>If</code> without and <code>Else</code> is a sign that I must carefully review what I have done. A simple variable assignment (<code>If X then Y=Z</code>) is easily explained, but checking conditions for larger blocks of code means something more complex is happening.</p>
    </div>