<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Restructuring and consolidation</h3>

<p><em>Dealing with API client instance</em><br>Instead of generating a new <code>client.AppsV1Api</code> instance in each separate thread - create the instance in the main thread and pass <em>shared</em> API client to your threads constructors:</p>

<pre><code>if __name__ == '__main__':
    ...
    v1 = client.AppsV1Api()
    thread.start_new_thread(watch_deployments, (v1,))
    thread.start_new_thread(watch_daemonsets, (v1))
    ...
</code></pre>

<hr>

<p>Both target functions <code>watch_deployments</code> and <code>watch_daemonsets</code> perform essentially the same set of actions and differ only in specific <strong><code>v1.list_...</code></strong> routine.<br>To eliminate duplication the common behavior is extracted into a separate function say <strong><code>_gather_watched_metadata</code></strong> that will accept a particular <code>v1.list_...</code> function object as <em>callable</em>:</p>

<pre><code>def _gather_watched_metadata(list_func):
    w = watch.Watch()
    last_seen_version = list_func().metadata.resource_version
    while True:
        for item in w.stream(list_func, pretty="pretty", resource_version=last_seen_version):
            metadata = item["object"].metadata
            _ = {metadata.name: [item["object"].kind, metadata.namespace,
                                 metadata.resource_version,
                                 metadata.annotations]}
            depl_lst.put(_)
</code></pre>

<p>As can be seen in the above function, to avoid repetitive indexing of nested attributes like <code>item["object"].metadata</code> it is worth to extract it into a variable at once.</p>

<p>Now, both target functions become just as below:</p>

<pre><code>def watch_deployments(v1):
    _gather_watched_metadata(v1.list_deployment_for_all_namespaces)


def watch_daemonsets(v1):
    _gather_watched_metadata(v1.list_daemon_set_for_all_namespaces)
</code></pre>

<p>That can be shortened even further: both <code>watch_...</code> functions can be eliminated and you may run just with <code>_gather_watched_metadata</code> function and specific API routines passed as an argument :</p>

<pre><code>...
v1 = client.AppsV1Api()
thread.start_new_thread(_gather_watched_metadata, (v1.list_deployment_for_all_namespaces,))
thread.start_new_thread(_gather_watched_metadata, (v1.list_daemon_set_for_all_namespaces,))
</code></pre>

<p>But to apply the last <em>"shortening"</em> - is up to you ...</p>

<hr>

<p><em>Consuming <code>depl_lst</code> queue</em><br>Initiating <code>for</code> loop with <code>range</code> in this context:</p>

<pre><code>while True:
    for i in range(depl_lst.qsize()):
        ...
</code></pre>

<p>is redundant as it's enough to check if queue is <strong>not</strong> <a href="https://docs.python.org/3/library/queue.html#queue.Queue.empty" rel="nofollow noreferrer">empty</a>:</p>

<pre><code>while True:
    if not depl_lst.empty():
        current_obj = depl_lst.get()
</code></pre>
    </div>