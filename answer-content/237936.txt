<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In addition of @slepic answer, you might need to do something about the files themselves. So, instead of trying to fix everything from the code, you would be better if you secure the files or move the data to a database engine instead of using CVS. </p>

<p>For securing the CSVs files, you could move them into a directory and give read-only permission to everyone, and full permission to you and the application only. This way, they can view the files, but they can't make any modifications.</p>

<p>If they need to add some new rows to the CSVs, you could ask them to send the new data to you or someone else to add them to the files. At the end, you only need one person who can modify these files not everyone. You can also make <code>Excel</code> templates with <code>locked</code> cells that can be used to add new rows for everyone, so they would just send it to you to update current CSVs. </p>

<p>Best approach would be using a database and a solution to save the data and have a better control on it. This would be much easier to handle. Then, export the data to CSV whenever needed. </p>

<p>if you can't switch the data to a database, I would suggest using some CSV parser library such as <code>FileHelper</code> and <code>CsvHelper</code>. However, if external libraries are off-limits (for work requirements), you can add more handling in your code (along with above suggestions). </p>

<p>To validate the columns you can do this : </p>

<pre><code>public static bool ValidateCatalogueLinesHeader(string line)
{
    var columnNames = new string[] { "catcode", "prodcode" };

    // Validate the column headers
    var header = line.Split(',');

    if (header.Length != columnNames.Length)
    {
        //throw new InvalidDataException($"the parsed csv has {header.Length} which is different than the provided number of columns"); 
        return false;
    }

    // non-null columns counter
    int countColumns = 0;

    foreach (var column in columnNames)
    {
        foreach (var headerName in header)
        {
            if (string.IsNullOrEmpty(headerName))
            {
                //throw new ArgumentNullException(nameof(headerName)); 
                return false;
            }

            if (column.Equals(headerName, StringComparison.InvariantCultureIgnoreCase))
            {
                countColumns++;
                break;
            }
        }
    }

    // double ensurance;
    if (countColumns != columnNames.Length)
    {
        //throw new InvalidDataException("Unable to validate the column headers"); 
        return false;
    }

    return true;
}
</code></pre>

<p>then your code can be something like this : </p>

<pre><code>private static List&lt;CatalogueLine&gt; ImportCatalogueLines()
{
    var filePath = ConfigurationManager.AppSettings["catalogue-lines-import-file"];

    // will cover null, empty string, and also the existing's of the file 
    if (!File.Exists(filePath)) { throw new FileNotFoundException(filePath); }

    List&lt;CatalogueLine&gt; tempCatalogueLines = new List&lt;CatalogueLine&gt;();

    using (var reader = new StreamReader(filePath))
    {
        var validateHeader = ValidateCatalogueLinesHeader(reader.ReadLine());

        if(!validateHeader) { throw new InvalidDataException("Unable to validate the column headers"); }

        while (!reader.EndOfStream)
        {
            var streamedLine = reader.ReadLine();

            // check this line first
            if (string.IsNullOrEmpty(streamedLine)) { throw new ArgumentNullException(nameof(streamedLine)); }

            // notice, you're parsing integers, some integers could have commas separators 
            // in case you have more than one comma, you should handle it 
            // for time being, just throw an error

            // count number of commas 
            var countComma = streamedLine.Count(x =&gt; x == ',');

            if (countComma &gt; 1)
            {
                throw new InvalidDataException("the streamed line has more than one comma.");
            }

            // only parse if there is one comma
            if (countComma == 1)
            {
                var line = streamedLine.Split(',');

                // ensure that this line has the same columns count
                if (line.Length == 2)
                {
                    // since it is two elements, we can specify them manually to avoid extra loops
                    // try parse them first to validate they are valid integers

                    var isValidCat = int.TryParse(line[0], out int catCode); 

                    var isValidProd = int.TryParse(line[1], out int prodCode);

                    // if both values are valid, add them to the list.
                    if (isValidCat &amp;&amp; isValidProd)
                    {
                        tempCatalogueLines.Add(new CatalogueLine { CatCode = catCode, ProdCode = prodCode });
                    }
                }
            }
        }

        return tempCatalogueLines;
    }
}   
</code></pre>

<p>I have moved the header validation to a separated method because of readability, and also for code-reuse (in case you want to validate the header somewhere else). A better place for <code>ValidateCatalogueLinesHeader</code> would be inside the <code>CatalogueLine</code> class. And if there is mutliple CSVs models, then you can make an interface with <code>bool IsValid(string line);</code> or you can add <code>TryParse</code> method. this can improve your code. </p>

<p>Also, I have comment out thrown exceptions <code>throw new ...</code> which would give you some idea on what's happening in the code. </p>
    </div>