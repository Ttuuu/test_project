<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Style</h1>

<p>As far as style goes, your code looks clean and readable, and follows the conventions, so good job for that.</p>

<p>You may want to include documentation comments with <code>\\\</code> four your class and methods. Although the method names are descriptive enough in this rather simple case, it is a good habit to take on.</p>

<h1>Tests</h1>

<p>It's nice you use a test framework to test your class. However, the methods name don't match (<code>Divisors</code> vs <code>GetDivisors</code>) and comparing arrays doesn't work that way.</p>

<p>You could also benefit from including more tests for edge cases . What if the given argument is prime (since you make it a special case)? What if it is <code>int.MaxValue</code>? What if it is <code>0</code>? What if it is negative?</p>

<h1>Make your class <code>static</code></h1>

<p>Your <code>Divisors</code> class only has static methods. As such, it should be a <code>static</code> class. I might help the compiler with optimizations and can improve performance a little.</p>

<h1>Unexpected behavior</h1>

<p>As far as I know, 1 and <code>n</code> are always divisors of <code>n</code>, yet they are omitted from the returned array. You should probably include them, or at least document that they are omitted.</p>

<p>If the number is negative, you return <code>null</code>. While in theory negative numbers have divisors (and positive numbers have negative divisors), I understand why this you chose this approach, as well as why you only return positive divisors. I would suggest you either document this behavior, or enforce it by using the <code>uint</code> datatype. I would chose the former approach, as <code>int</code>is much more prevalent, and using <code>uint</code> would most likely imply a lot of casting down the line.</p>

<h1>Optimizing the algorithm</h1>

<p>You check if the number is prime before looking for divisors. First of all, your algorithm for primality checking is rather naive and can be optimized in various ways. More importantly, this is an optimization only if the argument is prime, but is counterproductive in the vast majority of cases when it isn't prime. I suggest to simply get rid of that check.</p>

<p>Furthermore, you check if every number between <code>2</code> and <code>n</code> is a divisor of <code>n</code>; however, you know that if <code>i</code> is a divisor, so is <code>n / i</code>. Therefore, you can loop only on values between <code>1</code> and <code>sqrt(n)</code> and add two divisors for every match.</p>

<h1>My attempt</h1>

<pre><code>    public static class Divisors
    {
        /// &lt;summary&gt;
        /// Finds all the divisors of any positive integer passed as argument. 
        /// Returns an array of int with all the divisors of the argument.
        /// Returns null if the argument is zero or negative.
        /// &lt;/summary&gt;
        public static int[] GetDivisorsMe(int n)
        {
            if (n &lt;= 0)
            {
                return null;
            }
            List&lt;int&gt; divisors = new List&lt;int&gt;();
            for (int i = 1; i &lt;= Math.Sqrt(n); i++)
            {
                if (n % i == 0)
                {
                    divisors.Add(i);
                    if (i != n / i)
                    {
                        divisors.Add(n / i);
                    }
                }
            }
            divisors.Sort();
            return divisors.ToArray();
        }
    }
</code></pre>

<p>As for performance, finding all divisors for every integer between 0 and 10,000 takes around 130ms with your solution on my machine vs 12ms with mine, so a performance gain of around 10x.<br>
Finding divisors for <code>int.MaxValue</code> takes around 9s your solution vs 5ms with mine, a performance gain greater than 1000x!<br>
Finally, finding divisors for <code>2095133040</code> – the largest highly composite number that fits in the <code>int</code> datatype, with a total of 1600 divisors – takes around 5s with your solution, vs 13ms with my solution, again a performance gain of around 400x.</p>

<p>Performance can probably be improved further by estimating how many divisors has a given input and passing that estimate to the <code>List&lt;int&gt;</code> constructor, and thus limiting how much memory reallocating is done as the list grows. In fact, the upper bound of the number divisors is known: 1600. You could simply allocate the list as:</p>

<pre><code>List&lt;int&gt; divisors = new List&lt;int&gt;(1600);
</code></pre>

<p>This brings the execution time down to 5ms for the highest composite number, but feels like a waste of memory in most cases.</p>
    </div>