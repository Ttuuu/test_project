<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If the prime number to be found is always going to be the 10001st prime number, then you can greatly improve the performance by hard-coding the result:</p>

<pre><code>#include &lt;iostream&gt;
#define PRIME_10001 104743

int main(void)
{
    std::cout &lt;&lt; PRIME_10001 &lt;&lt; '\n';
    return 0;
}
</code></pre>

<p>If <code>104743</code> is banned for some reason, here are some alternatives:</p>

<ul>
<li><code>0x19927</code> in base 16,</li>
<li><code>0314447</code> in octal,</li>
<li><code>0b11001100100100111</code> in binary with C++14 (or GNU C),</li>
<li><code>104'743</code> with a C++14 digit separator</li>
</ul>

<p>If you do use the <code>for</code>-loop approach mentioned in <a href="https://codereview.stackexchange.com/a/136344">the previous answer</a>, you should note that the condition of this loop may overflow:</p>

<pre><code>for (int i = 2; i*i &lt;= num /* for i as little as 256: kaboom! */; ++i) {
</code></pre>

<p>Instead, using division eliminates several possibilities:</p>

<pre><code>for (int i = 2; i &lt;= num/i; ++i) {
</code></pre>

<p>You should probably use an <code>unsigned</code> integer to remove the rest of the possibilities for overflow. Alternatively, check if <code>num</code> is negative and return <code>false</code> if it is.</p>
    </div>