<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As you suspected, you don't need <code>append</code> for this problem. The trick is to notice that if, for example, your goal is to create the list <code>'(1 2 3)</code>, then writing <code>(list 1 2 3)</code> is more straight-forward and more efficient than writing <code>(append '(1) '(2) '(3))</code>.</p>

<p>With that in mind, consider the following insertion function:</p>

<pre><code>(define (insert BST n)
  (cond
    ((null? BST)
     (list empty n empty))
    ((&lt; n (cadr BST))
     (list (insert (car BST) n) (cadr BST) (caddr BST)))
    ((&gt; n (cadr BST))
     (list (car BST) (cadr BST) (insert (caddr BST) n)))
    (else BST)))
</code></pre>

<p>To run a small test, suppose you have the list <code>'((() 3 ()) 5 (() 8 (() 10 ())))</code>, which looks as follows:
<a href="https://i.stack.imgur.com/mFYcV.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/mFYcV.png" alt="enter image description here"></a></p>

<p>then inserting <code>7</code> to it, ie. <code>(insert '((() 3 ()) 5 (() 8 (() 10 ()))) 7)</code> will produce <code>'((() 3 ()) 5 ((() 7 ()) 8 (() 10 ())))</code>, which looks as follows:
<a href="https://i.stack.imgur.com/AZNl3.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/AZNl3.png" alt="enter image description here"></a></p>
    </div>