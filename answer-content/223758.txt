<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>My answer is pretty heavily based on <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt" rel="nofollow noreferrer">this resource on BigInt</a>, so feel free to explore that a bit first.</p>

<p>With that said, here are some of the key points I saw:</p>

<ol>
<li><code>BigInt</code> can use all the same types of simple arithmetic as <code>Number</code>, along with 0 being considered <code>falsy</code> as usual</li>
</ol>

<pre class="lang-javascript prettyprint-override"><code>1n + 3n === 4n // true!
</code></pre>

<ol start="2">
<li><code>BigInt</code> is also usable as a JS primitive. Neat!</li>
</ol>

<pre class="lang-javascript prettyprint-override"><code>typeof 1n === "bigint" // true!
</code></pre>

<ol start="3">
<li><code>BigInt</code> and <code>Number</code> <em>should not</em> be mixed and matched. The coercion between the two is ambiguous, and as such JavaScript would throw an exception in that circumstance, so you should only either use one or the other.</li>
</ol>

<pre class="lang-javascript prettyprint-override"><code>1 + 1n // whoops
</code></pre>

<ol start="4">
<li><p>If the article still holds true, <code>BigInt</code> doesn't have the luxury of using operations in the built-in <code>Math</code> object. So you would either need to stick to simple arithmetic, or build (or otherwise find) those implementations yourself.</p></li>
<li><p>Since the supported operations on <code>BigInt</code> are not constant time (according to the article), it is recommended to use <code>BigInt</code> <em>strictly</em> when a use case will frequently involve numbers higher than the largest representable int in <code>Number</code> (2<sup>53</sup>). Your question is one such case, since factorials grow <em>extremely</em> fast, so I think it's fine as is.</p></li>
</ol>
    </div>