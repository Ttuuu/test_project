<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Test coverage</h1>

<p>We don't have any test inputs that begin or end with a space, or that contain spaces but no letters.  Also, in each test, all spaces are the same length; there are no tests with single and double spaces in the same input.</p>

<p>These should be tested, as they are all candidates for making an error in the algorithm.</p>

<h1>A different approach</h1>

<p>The code makes several copies of strings, and creates and copies a temporary vector. With judicious use of standard algorithms, we can work completely <em>in-place</em>, without any extra allocations.</p>

<p>We can use <code>std::find_if()</code> and <code>std::find_if_not()</code> with a suitable predicate to find start and end of each word as iterators:</p>

<pre class="lang-none prettyprint-override"><code>  --+---+---+---+---+---+---+--
  . |   | w | o | r | d |   | .
  --+---+---+---+---+---+---+--
          ▲               ▲ 
          start           end
</code></pre>

<p>Then we can simply pass those iterators to <code>std::reverse()</code>, which will reverse that substring.</p>

<p>In C++, that looks like this:</p>

<pre><code>#include &lt;algorithm&gt;
#include &lt;cctype&gt;
#include &lt;string&gt;

std::string reverse_words(std::string s)
{
    auto is_space = [](unsigned char c) { return std::isspace(c); };

    auto word_start = s.begin();
    while ((word_start = std::find_if_not(word_start, s.end(), is_space)) != s.end()) {
        auto word_end = std::find_if(word_start, s.end(), is_space);
        std::reverse(word_start, word_end);
        word_start = word_end;
    }

    return s;
}
</code></pre>

<p>This way, there's no copying if the caller doesn't want to re-use the passed string (e.g. if it's passed using <code>std::move()</code>), and only the single copy into the argument otherwise.</p>

<p>I provided the <code>is_space()</code> adapter for two reasons:</p>

<ol>
<li>If we want to change it to recognise only spaces, or perhaps also count punctuation as word separators, then we need to change only one place in the code, rather than two.</li>
<li><code>std::isspace()</code> accepts a non-negative integer as its argument, so we need to convert <code>char</code> to <code>unsigned char</code> before it's widened to <code>int</code>.</li>
</ol>

<hr>

<p>For completeness, here's a slightly different <code>main()</code> that I used when testing:</p>

<pre><code>#include &lt;cassert&gt;
#include &lt;iostream&gt;
int main(int argc, char **argv)
{
    if (argc &lt;= 1) {
        // no arguments: self test
        assert(reverse_words("The quick brown fox jumps over the lazy dog.") == "ehT kciuq nworb xof spmuj revo eht yzal .god");
        assert(reverse_words("apple") == "elppa");
        assert(reverse_words("a b c d") == "a b c d");
        assert(reverse_words("double  spaced  words") == "elbuod  decaps  sdrow");
        assert(reverse_words("") == "");
        assert(reverse_words("ab   ba   cd") == "ba   ab   dc");
        assert(reverse_words(" ab  ba   ") == " ba  ab   ");
    } else {
        // transform and print each argument
        for (int i = 1;  i &lt; argc;  ++i) {
            std::cout &lt;&lt; '\'' &lt;&lt; reverse_words(argv[i]) &lt;&lt; "'\n";
        }
    }
}
</code></pre>
    </div>