<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>mov dl, byte [ecx]
cmp dl, 0; read byte and comp to 0 
je _exit
</code></pre>
</blockquote>

<p>There are various alternatives, for example:</p>

<pre><code>cmp byte [ecx], 0
je _exit
</code></pre>

<p>And:</p>

<pre><code>mov dl, [ecx] ; note: BYTE would be redundant, but you can put it if you like
test dl, dl
jz _exit
</code></pre>

<p>For that loop overall,</p>

<blockquote>
<pre><code>_label:
    mov dl, byte [ecx]
    cmp dl, 0; read byte and comp to 0 
    je _exit
    add ecx, 1 
    jmp _label
</code></pre>
</blockquote>

<p>This is a "2 jump loop", but it can be a "1 jump loop", for example:</p>

<pre><code>_label:
    mov dl, [ecx]
    inc ecx
    test dl, dl
    jnz _label
</code></pre>

<p>Or:</p>

<pre><code>    dec ecx
_label:
    inc ecx
    cmp byte [ecx], 0
    jne _label
</code></pre>

<p>(<a href="https://stackoverflow.com/q/36510095/555045">here</a> are some details about <code>inc</code> vs <code>add</code>)</p>

<p>For fast loops like this, having two jumps in the loop can easily slow them down to half the speed.</p>

<p><code>repnz scasb</code> is an option, but it's not that great. Small loops like this can run in 1 cycle per iteration on most CPUs anyway, and <code>repnz scasb</code> is not better than that (often worse, such as 2 cycles per byte on Ryzen and Haswel). The special optimizations for <code>rep movs</code> and <code>rep stos</code> don't apply to <code>rep scas</code>.</p>

<p>There are faster ways to implement <code>strlen</code>, that are not based on byte-by-byte loops but detect the presence of a zero inside a bigger block, using SIMD (<a href="https://www.strchr.com/sse2_optimised_strlen" rel="nofollow noreferrer">example</a>) or SWAR (<a href="https://stackoverflow.com/q/11787810/555045">example</a>). That way speeds much higher than 1 byte per cycle can be reached. Perhaps some future processor would implement a "fast rep scas" feature in a similar way..</p>

<blockquote>
<pre><code>mov ecx, arg_err
mov edx, len_arg_err
call _print
int 0x80
</code></pre>
</blockquote>

<p>This is mysterious, there is no <code>_print</code> function and there is a stray system call without selecting any particular entry point, or perhaps <code>_print</code> was meant to put a suitable value in <code>eax</code>? </p>
    </div>