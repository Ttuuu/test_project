<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code looks frighteningly slow because of the 5 nested <code>for</code> loops, and indeed it is.</p>

<p>To find an efficient algorithm, you should switch off the computer, take out a sheet of paper and solve the following task on paper:</p>

<blockquote>
  <p>Given an infinite amount of coins labelled 5, 7, 16, which amounts between 1 and 100 can be composed?</p>
</blockquote>

<p>While you solve that task, ask yourself in every step:</p>

<ul>
<li><em>what</em> am I doing?</li>
<li><em>why</em> do I do this?</li>
<li>what do I want to <em>achieve</em>?</li>
<li>can I formulate a <em>general rule</em> for this that sounds reasonable, appropriate for the task?</li>
</ul>

<p>Your current code counts up to 2000 several times. In this manual task there is no point counting up to 2000. This alone makes your algorithm more specialized than it needs to.</p>

<p>Essentially your code should be defined in a function like this:</p>

<pre><code>/**
 * @return the amounts between min and max that are &lt;i&gt;not&lt;/i&gt; composable
 * from an infinite supply of coins of the given values.
 */
public static BitSet uncomposable(int min, int max, List&lt;Integer&gt; coinValues) {
    …
}
</code></pre>

<p>In that code, neither the number 100 nor 10000 nor 2000 must appear.
There should be at most 2 nested loops.
How exactly the code looks like depends on how you solved the task on paper.
I'm sure you won't choose a time-consuming algorithm when having to do this task manually.</p>

<p>Bonus question: is there a limit beyond which <em>all</em> amounts are composable? That could be used to stop the computation early, which is a nice optimization. Try with these test cases:</p>

<ul>
<li>{1}: the limit is 0, obviously</li>
<li>{2}: there's no limit since only even numbers are covered</li>
<li>{2, 4, 6}: …</li>
<li>{3, 5}: …</li>
<li>{1, 7, 14}: …</li>
</ul>
    </div>