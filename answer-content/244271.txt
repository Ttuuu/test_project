<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Wrap <code>ISet&lt;T&gt;</code> in a namespace to avoid conflicts</h2>
<p>I presume you're already doing this, but there already exists an incompatible <a href="https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.iset-1" rel="nofollow noreferrer"><code>ISet&lt;T&gt;</code></a>; you should wrap your interface with a namespace to avoid a collision.</p>
<h2>Replace your internal <code>List&lt;T&gt;</code> with a <code>HashSet&lt;T&gt;</code></h2>
<p>You noted in the comments that elements should be unique; a trivial way to do this would be for your internal container to be a <code>HashSet&lt;T&gt;</code> instead of <code>List&lt;T&gt;</code>, which would enforce uniqueness.</p>
<p>But this causes another issue.</p>
<h2>Using a <code>HashSet&lt;T&gt;</code> renders the indexers meaningless</h2>
<p>With a <code>HashSet&lt;T&gt;</code>, there is no guaranteed order, and you cannot set an item at a particular index; I believe this is intentional, as the order of elements within the <code>HashSet&lt;T&gt;</code> is arbitrary. In that case, the getter index is also meaningless.</p>
<p>A <code>SortedIndex&lt;T&gt;</code> maintains the sort order even while elements are added and removed, but it still doesn't make sense to place an item at a particular index, because the <code>SortedSet&lt;T&gt;</code> will in any case reorder as needed; and thus also not to read an element from a particular index.</p>
<h2>Consider removing overloads that take <code>object</code> only to cast to <code>T</code> and pass to other overloads</h2>
<p>If the object is of <code>T</code>, the <code>T</code>-accepting overload will be called and succeed.</p>
<p>If the object is not of <code>T</code>, an exception will be thrown on the cast. I feel this is out of the responsibility of the collection class.</p>
<p>And if the only point of these overloads is to implement the non-generic <code>IList</code> and <code>ICollection</code>, perhaps you don't need to implement these interfaces. I don't think <code>IList</code> and <code>ICollection</code> add much over <code>IList&lt;object&gt;</code> and <code>ICollection&lt;object&gt;</code>.</p>
<h2>Implement <code>Show</code> as an extension method on <code>IEnumerable</code></h2>
<p>Better yet, implement a <code>Joined</code> extension method <a href="https://github.com/zspitz/ZSpitz.Util/blob/master/ZSpitz.Util/Extensions/IEnumerableT.cs#L31" rel="nofollow noreferrer">like this</a>. That way you have an extension method that you could use for any <code>IEnumerable&lt;T&gt;</code>, and use the resultant produced <code>string</code> in other contexts as well.</p>
<h2><code>IClonable</code> is deprecated</h2>
<p>There are a number of issues with implementing <code>IClonable&lt;T&gt;</code>:</p>
<ol>
<li>It's not clear <a href="https://stackoverflow.com/a/536357/111794">whether a deep or shallow copy is being made</a></li>
<li>What is supposed to happen if the base class implements <code>IClonable&lt;T&gt;</code>? How does that relate to the derived class?  <a href="https://stackoverflow.com/a/536362/111794">link</a></li>
</ol>
<p>From the <a href="https://docs.microsoft.com/en-us/dotnet/api/system.icloneable?view=netcore-3.1#notes-to-implementers" rel="nofollow noreferrer">docs</a>:</p>
<blockquote>
<p>The ICloneable interface simply requires that your implementation of the Clone() method return a copy of the current object instance. It does not specify whether the cloning operation performs a deep copy, a shallow copy, or something in between. Nor does it require all property values of the original instance to be copied to the new instance. For example, the Clone() method performs a shallow copy of all properties except the IsReadOnly property; it always sets this property value to false in the cloned object. Because callers of Clone() cannot depend on the method performing a predictable cloning operation, we recommend that ICloneable not be implemented in public APIs.</p>
</blockquote>
<h2>Use method-bodied members</h2>
<p>This will make your class definition much easier to read and parse. Readonly properties can be written like this:</p>
<pre><code> public int Count =&gt; m_ListContainer.Count;
</code></pre>
<p>while your indexers (and read/write properties) can be written like this:</p>
<pre><code>public T this[int index] {
    get =&gt; m_ListContainer[index];
    set =&gt; m_ListContainer[index] = value;
}
</code></pre>
    </div>