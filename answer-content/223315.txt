<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>While your code is thread-safe, it does not scale.<br>
Consider adding a fast-path in case there is an object.</p></li>
<li><p>There is no need for a class, a free function is enough.</p></li>
<li><p><code>std::make_shared()</code> generally coalesces the two allocations (control-block and payload), making it significantly more efficient.<br>
If you want to ensure only <code>get_shared_singleton()</code> can ever construct a <code>T</code>, <a href="https://stackoverflow.com/questions/56356914/how-to-disable-creating-copying-obj-outside-a-factory-method/56363209#56363209">use a key</a>.</p></li>
</ol>

<pre><code>class Key {
    Key() {}
    friend std::shared_ptr&lt;T&gt; get_shared_singleton();
};

template &lt;class T&gt;
std::shared_ptr&lt;T&gt; get_shared_singleton() {
    static std::atomic&lt;std::weak_ptr&lt;T&gt;&gt; p;
    auto r = p.load(std::memory_order_consume).lock();
    if (r) return r;
    static std::mutex m;
    std::lock_guard _(m);
    r = p.load(std::memory_order_consume).lock();
    if (r) return r;
    if constexpr (std::is_constructible_v&lt;T, Key&gt;)
        r = std::make_shared&lt;T&gt;(Key());
    else
        r = std::make_shared&lt;T&gt;();
    p.store(r, std::std::memory_order_release);
    return r;
}
</code></pre>

<p><sub>Be aware it needs C++2a for <code>std::atomic&lt;std::weak_ptr&lt;T&gt;&gt;</code>.</sub></p>

<p>Use it like:</p>

<pre><code>struct X {
    X(X const&amp;) = delete;
    X&amp; operator=(X const&amp;) = delete;
    X(Key /* optionally required for lockdown */) …
    …
};

…

get_shared_singleton&lt;X&gt;()
</code></pre>
    </div>