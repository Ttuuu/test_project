<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Disclaimer: I'm not an expert in VB.NET / C#, so I can't and won't comment on things like code-style. I will however address the security of this code. My points are in order of decreasing severity.</p>

<h2>Hard-Coded Password</h2>

<p>The password is currently hard-coded into the source. I <em>really hope</em> this is just for demonstration purposes to produce a minimal working example. This is very bad practice that I would strongly recommend against, as it usually leads to the password ending up in some (public) code repository and not exclusively in the hands of your sysadmin or end-user where it belongs. Also putting the password into the source means that you need to re-compile and re-distribute the binary whenever you change the password, which will probably be a hassle...</p>

<p>The usual approach for handling passwords is to either put them into an environment variable or to query the user for them at runtime. If you have tight control over the file system a plain file or a file encrypted using a cloud key management service are also options.</p>

<h2>Use of (plain) CBC-Mode</h2>

<p>Currently this code uses the <em>infamous</em> CBC-mode which time and again has lead to attacks in when it was used in TLS. The problem here is that an attacker may modify the message in a malicious way, e.g. to exploit a parser bug or trigger some other reaction without the receiver having a high chance of noticing it before it's too late. The better solution is to use <a href="https://blogs.msdn.microsoft.com/shawnfa/2009/03/17/authenticated-symmetric-encryption-in-net/" rel="nofollow noreferrer"><em>authenticated encryption</em> (like AES-GCM)</a> which will make sure the message is unmodified before handing out the plaintext.</p>

<h2>Use of PBKDF2</h2>

<p>Right now PKCS#5 PBKDF2 (<a href="https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.rfc2898derivebytes?view=netframework-4.7.2" rel="nofollow noreferrer"><code>Rfc2898DeriveBytes</code></a>) is used to derive the key and IV from the password and the salt. This is an outdated standard, because it allows for easy parallelization of the password-guessing attacks using GPUs and similar specialized hardware. It is recommended to use <a href="https://github.com/kmaragon/Konscious.Security.Cryptography" rel="nofollow noreferrer">Argon2</a> these days.</p>

<p>On a side note, .NET by default uses HMAC-SHA1 for PBKDF2  which has a 20 byte output width. The code at hand however is asking for 48 bytes of output. This means that (due to the bad design of PBKDF2) the complete 1000 iterations are actually run <em>three times</em> in a parallelizable fashion. An attacker can just run these three instances in parallel to speed up their attack and attackers of password hashing scheme usually have <em>a lot</em> of parallel hardware available, so that is not good. </p>

<h2>The IV / Salt</h2>

<p>The current generation strategy for the salt is fine even though <em>31</em> bytes is a bit of an odd choice for the size. As for the <em>actual</em> IV, as you are altering the key with each encrypted message due to always altering the salt, it can actually be constant. The contract of modern encryption schemes is that you must not use any (key,IV) pair after all and if you always change the key you are not violating that contract.</p>

<p>As for the salt, don't worry about it being public and recognizable. After all a determined attacker will only take a short amount of time to extract the salt from your format and you have no good method available to change that.</p>

<h2>Pre-Hashing the Password</h2>

<p>Currently the provided password is run through SHA256 before being feeded into the password hashing scheme. While this is unusual, this is actually fine, as long as the password hashing step <em>always</em> comes afterwards and this hash is treated with the same care as the actual password. This is because it is just one motivated GPU-cracking-cluster user away from being the case.</p>
    </div>