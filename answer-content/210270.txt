<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are a few terms one can use to grade code. <strong>Correctness</strong>, <strong>efficiency</strong>, <strong>readabilty</strong>, <strong>reuse</strong> <strong>testability</strong> and few other <em>objectively</em> measurable metrics come to mind.</p>

<p>Efficiency isn't really a concern here, and due to the simplicity of the algorithm, neither is correctness. However, it was hard to check whether the code is correct because it's nearly not readable. Also, it's not reusable, at all, as the sorting method is embedded inline and therefore not testable.</p>

<p>With this small overview in mind, let's review the code in detail.</p>

<h1>Correctness</h1>

<p>The outer <code>while</code> loop will only exit when <code>srcPos == arrLen - 1</code>. This may only happen if <code>srcPos</code> does not get set to <code>0</code>, which again only happens if two elements weren't in order. Therefore when we have <code>srcPos == arrLen - 1</code>, all elements where lesser or equal to their predecessors and the array is sorted.</p>

<h1>Efficiency</h1>

<p>This was an inverse goal. While it's already slow, I accidentally misread the code (see the next section) and read:</p>

<pre><code>...
   var srcPos=0,dstPos,tmp; // declare variables
   while (srcPos&lt;arrLen-1) {
        dstPos=srcPos+1;
        while (dstPos&lt;arrLen) { // three swap routines
             if (arr[srcPos]&gt;arr[dstPos]) {tmp=arr[srcPos];arr[srcPos]=arr[dstPos];arr[dstPos]=tmp;srcPos=0;break}
             //if (arr[srcPos]&gt;arr[dstPos]) {arr[srcPos]^=arr[dstPos];arr[dstPos]^=arr[srcPos];arr[srcPos]^=arr[dstPos];srcPos=0;break}
             //if (arr[srcPos]&gt;arr[dstPos]) {arr[srcPos]+=arr[dstPos];arr[dstPos]=arr[srcPos]-arr[srcPos];arr[srcPos]+=arr[dstPos];srcPos=0;break}

             dstPos++;
             }
             srcPos++; // whoops!
       }
 ...
</code></pre>

<p>That's even worse, since we end up with a lot of unnecessary comparisons. See "But this can be made worse" below.</p>

<h2>It's already slow...</h2>

<p>Your code restarts for every inversion and end up with <span class="math-container">\$\mathcal O(n^3)\$</span>. That's already bad, but you can do worse.</p>

<h2>But this can be made worse</h2>

<p>Just increase <code>src</code> <strong>only</strong> in the outer <code>while</code>. Here's the analysis for the case:
The worst runtime we can get is for an inverse array, e.g. <code>[5,4,3,2,1]</code>:</p>

<pre><code>[5,4,3,2,1]
[4,5,3,2,1]
[3,5,4,2,1]
[2,5,4,3,1]
[1,5,4,3,2]
...
</code></pre>

<p>For <span class="math-container">\$n\$</span> elements, we need <span class="math-container">\$1\$</span> comparison to move the largest element to the second position, <span class="math-container">\$2\$</span> elements to move the second largest to the third, and so on. In summary, we have <span class="math-container">$$1 + 2 + \ldots + (n-2) + (n - 1) = \frac{n(n-1)}{2}$$</span> comparisons to get the smallest value to the front. However, contrary to bubble sort, we always reset <code>srcPos</code> to zero. Therefore, the second smallest value won't take less time to get to the front:</p>

<pre><code>[1,4,5,3,2] -- 4 comparisons for 1, 1 comparison for 5-4
[1,3,5,4,2] -- 4 comparisons for 1, 2 comparisons for 4-5, 4-3
[1,2,5,4,3] -- 4 comparisons for 1, 3 comparisons for 3-5, 3-4, 3-2
</code></pre>

<p>Although we should be able to only look at the subarray starting at index one, we <em>always</em> have the initial 4 comparisons. So for the second element, we have</p>

<p><span class="math-container">$$((n-1)+1) + ((n-1)+2) + \ldots + ((n-1)+(n-3)) + ((n - 1)+(n-2))
 = (n-1)(n-2) + \frac{(n-1)(n-2)}{2}$$</span>
comparisons. It's similar for the rest:</p>

<pre><code>[1,2,5,4,3]
[1,2,4,5,3] -- 4 comparisons for 1, 3 comparisons 2, 1 comparison for 5-4
[1,2,3,5,4] -- 4 comparisons for 1, 3 comparisons 2, 2 comparison for 4-5, 4-3
</code></pre>

<p>If we complete the induction, we get</p>

<p><span class="math-container">$$ \sum_{i=0}^n \frac{(n-i)(n-i-1)}{2} + (n-i-1)\sum_{j=1}^i (n-j) $$</span>
which is inefficient enough. Good job there :).
</p>

<h1>Readability, reuse and testability</h1>

<p>Readability <em>really</em> suffers since the swap logic is put into a single line. Also, there are several values with short names that are not related to your algorithm at all.</p>

<p>Furthermore, we cannot use the sort outside of that snippet. That prevents</p>

<ul>
<li>sorting more than one array</li>
<li>custom sort (for example reverse, lexicographic, etc.)</li>
<li>testing</li>
</ul>

<p>So first of all let's make a function:</p>

<pre><code>function slowSort(arr) {
    var src = 0;
    var dest;
    var tmp;

    while(src &lt; arr.length - 1) {
        dest = src + 1;
        while(dest &lt; arr.length) {
            if(arr[src] &gt; arr[dest]) {
                temp = arr[dest];
                arr[dest] = arr[src];
                arr[src] = temp;
                src = 0;
                break;
            }
            dest++;
            src++; // place this one in the outer to make it worse, but
                   // keep in mind to set `src = -1` instead.
        }
    }
}
</code></pre>

<p>That's a lot easier to read. Also, we can now</p>

<ul>
<li>sort multiple times</li>
<li>get improvements/speed regressions for every call site</li>
<li><p>add additional comparison methods, e.g.</p>

<pre><code>function slowSort(arr, comp) { ... }
</code></pre></li>
<li><strong>test</strong> the function</li>
</ul>

<h1>Bottom line</h1>

<p>Always try to make your code reusable, testable and readable.</p>
    </div>