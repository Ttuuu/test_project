<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Ooooh...  MS-DOS Assembly programming!  That was a long time ago for me, but here goes.</p>

<p>There's a lack of error handling with the number entered, since a user can enter <code>99999</code> for Z and your program does not complain.  The <code>SUB</code>, <code>CMP</code>, <code>JB</code> sequence can lose the <code>CMP</code> instruction since the flags will already be set by the subtraction.  You can also get rid of the <code>JB</code> in this case, since the next check (<code>CMP AL,9</code>/<code>JA</code>) will detect all the wrong inputs.</p>

<p>There are many places where you zero out a register with <code>XOR</code> when you don't need to zero it out at all.  The sequence</p>

<pre><code>XOR EAX,EAX
MOV EAX,Z
</code></pre>

<p>The <code>XOR</code> is unnecessary since you immediately replace the register content with a new value.</p>

<p>You need to zero out the <code>EDX</code> register before the <code>DIV Ten</code> instruction after the <code>EnterKey</code> label (or any of the other places you use <code>DIV</code>).  You can also rewrite the code so that this isn't required:  Multiply by ten before adding in the new digit, rather than before getting the next digit from input.</p>

<p>In the <code>Initialize</code> section, you can zero out a register then store that value (which uses shorter instructions than storing a constant to memory).</p>

<p>In <code>IncX</code>, the first <code>MOV X,EAX</code> is unnecessary since you replace it two instructions later.  The same applies for <code>MOV Y,EAX</code> under <code>CheckAnswerY</code>.</p>

<p>The <code>JNE ContinueCheck</code>/<code>JMP Answer</code>/<code>ContinueCheck:</code> sequence can be replaced with a simple <code>JE Answer</code>.</p>

<p>You've hardcoded the offset to store the answer in (<code>MOV SI,31</code>).  Your data declaration can be updated to include a label for this spot so you can store the address directly into <code>SI</code>.  Similarly, you can get rid of the constant used in <code>ReplaceAnswerX</code>, and where the sign is stored in <code>ChangeSignString</code>, and the offset used in <code>NoAnswer</code>.</p>
    </div>