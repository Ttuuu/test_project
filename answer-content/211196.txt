<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Include what you use</h1>

<p>We use <code>std::abs</code> and <code>std::vector</code> but the code lacks the necessary includes:</p>

<pre><code>#include &lt;cmath&gt;
#include &lt;vector&gt;
</code></pre>

<h1>Perform a single task well</h1>

<p>Why do we perform the Gaussian blur?  What if the input is already sufficiently blurred, or if it needs a bigger kernel?</p>

<p>If we make the caller responsible for this preparation step, we give it more control, and we can focus on a single responsibility in this function.</p>

<h1>Fix the memory leak</h1>

<p>This allocation is never released:</p>

<pre><code>dirImg = new unsigned char[grey.cols*grey.rows];
</code></pre>

<p>In fact, this entire (global) array seems only to be assigned to, and never used, so we could remove it entirely.</p>

<h1>Simplified indexing</h1>

<p>It might be easier to use <code>index</code> throughout, and add rows or columns directly with ±<code>grey.cols</code> and ±<code>1</code>:</p>

<pre><code>      const int index = i*grey.cols + j;
      int com1 = smoothImg[index + grey.cols + 1] - smoothImg[index - grey.cols - 1];
      int com2 = smoothImg[index - grey.cols + 1] - smoothImg[index + grey.cols - 1];
      int gx = std::abs(com1 + com2
                        + smoothImg[index + 1] - smoothImg[index + 1]);
      int gy = std::abs(com1 - com2
                        + smoothImg[index + grey.cols] - smoothImg[index - grey.cols]);
</code></pre>

<h1>Use the standard library</h1>

<p>There's no need to (badly) re-write <code>std::hypot()</code> for the computation of <code>sum</code> (also, drop the <code>if (0)</code> - that's always false).</p>

<pre><code>      const int sum = std::hypot(gx, gy);
</code></pre>

<h1>Saturate, don't overflow</h1>

<p>The <code>std::hypot()</code> value could conceivably be larger than the range of <code>int</code>, or of <code>gradImg[]</code> (depending on the relative sizes of the target's integer types) - in such cases, we should <code>std::clamp</code> the value to the possible range, rather than suffering Undefined Behaviour.</p>

<h1>Spelling</h1>

<p>Prefer standard spelling: <strong>gradient</strong>, not <s>gradiant</s>.</p>
    </div>