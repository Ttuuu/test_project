<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Don't cast the return value from <code>malloc</code> and family - provided there's a prototype in scope (which there is here, due to our <code>#include &lt;stdlib.h&gt;</code>), the <code>void*</code> result will convert to any pointer type.</p>

<p>Always check whether the returned pointer is a null pointer before using it:</p>

<pre><code>wsbuffer = malloc(buffer_size * sizeof *wsbuffer);
if (!buffer) {
    fputs("Memory allocation failure\n", stderr);
    return EXIT_FAILURE;
}
</code></pre>

<p>Robust code needs to take extra care when using <code>realloc()</code>.  If we write something like <code>p = realloc(p, new_size);</code> then we have a problem when it fails - <code>p</code> is assigned null, and we have nothing pointing to the memory any more (i.e. a memory leak).  The usual pattern looks something like:</p>

<pre><code>void *new_buf = realloc(wsbuffer, buffer_size * sizeof *wsbuffer);
if (!new_buf) {
    free(wsbuffer);
    fputs("Memory allocation failure\n", stderr);
    return EXIT_FAILURE;
}
wsbuffer = new_buf;
</code></pre>

<hr>

<p>Minor things:</p>

<ul>
<li>Instead of <code>c==' ' || c=='\t'</code>, we might consider <code>isspace(c)</code>, remembering that this test includes newlines and other whitespace.</li>
<li>We can store whitespace in an array of <code>char</code> rather than <code>int</code>, since we never need to store <code>EOF</code> into that buffer.</li>
<li>The logic might be simpler if use a larger buffer and read a whole line at a time.  Then we just overwrite the start of the last whitespace found in the line, and print it.  That's likely a bit more efficient than our character-at-a-time operation, too.</li>
</ul>
    </div>