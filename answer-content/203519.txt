<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Since you are already using lodash, don't reinvent the wheel! Nearly all of your code can be replaced by a single <code>_.set</code> call.</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const Issues = {
  verified_documents: {
    drivers_licence: {
      front_image: ['Image is too blurry', 'Image is too dark']
    }
  }
}

console.log(Issues)
_.set(Issues, 'verified_documents.drivers_licence.front_image', [])
console.log(Issues)</code></pre>
<pre class="snippet-code-css lang-css prettyprint-override"><code>.as-console-wrapper { max-height: 100% !important; }</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.10/lodash.min.js"&gt;&lt;/script&gt;</code></pre>
</div>
</div>


<p>With that said, I believe there is merit to reviewing your approach.</p>

<ol>
<li><p>Not mutating an object doesn't mean a function is pure. Sure, <code>updateIssue</code> doesn't mutate the <code>Issues</code> object, but it does overwrite it, making this function inherently impure.</p></li>
<li><p>Don't use <code>merge</code> to clone an object. Use <a href="https://lodash.com/docs/4.17.10#clone" rel="nofollow noreferrer"><code>clone</code></a> or <a href="https://lodash.com/docs/4.17.10#cloneDeep" rel="nofollow noreferrer"><code>cloneDeep</code></a>.</p></li>
<li><p>A class with nothing but static functions shouldn't be a class. Just use a plain object, or if you are using a proper module system, don't even bother wrapping functions in an object!</p></li>
<li><p><code>setIssues</code> worries me. When I call a method called <code>setSomething</code>, I expect it to either set, or throw an error. Silently ignoring the call if <code>Issues</code> is already instantiated will probably lead to painful debugging later.</p></li>
<li><p><code>getNestedValue</code> can be replaced with <a href="https://lodash.com/docs/4.17.10#at" rel="nofollow noreferrer"><code>at</code></a>.</p></li>
<li><p>Multiple returns is not necessarily a bad thing. The "single exit" rule is far more important when writing assembly than JavaScript. There's plenty of discussion on this. See <a href="http://blog.timoxley.com/post/47041269194/avoid-else-return-early" rel="nofollow noreferrer">this blog</a>, <a href="https://www.leepoint.net/JavaBasics/methods/method-commentary/methcom-30-multiple-return.html" rel="nofollow noreferrer">another post</a>, <a href="https://softwareengineering.stackexchange.com/questions/118703/where-did-the-notion-of-one-return-only-come-from">this software engineering question</a>... plenty more to be found with a simple search.</p></li>
<li><p><code>getNestedValue</code> looks like it has a bug, <code>obj[key] !== "undefined"</code> should probably have a <code>typeof</code> in front of it. </p></li>
<li><p>Your rewritten function, while cleaner, does not exactly replicate the behavior of your original implementation. If a key that does not exist in the object is specified, the original implementation will set it. The refactored function will throw.</p></li>
</ol>
    </div>