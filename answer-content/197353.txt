<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Review</h2>

<p><em>All pieces of code in this answer are untested.</em></p>

<ol>
<li><p>Follow the PEP-8 guidelines. You did this almost flawlessly, but:</p>

<ul>
<li><p>You missed a couple of variables. Variable names should follow the same naming convention as functions.<sup>1</sup></p></li>
<li><p>One line is 160 characters long. The official line length limit is 79 characters<sup>2</sup>, but most people enforce a hard limit of 100 characters. 160 columns is too long, though.</p></li>
</ul></li>
<li><p>The C-era <code>getopt</code> is often more complex to use than <a href="https://docs.python.org/2/library/argparse.html" rel="nofollow noreferrer"><code>argparse</code></a>, the de facto  Python argument parsing library.</p></li>
<li><p>When printing error messages to the screen, it's a good idea to write to stderr instead of stdout. In <code>load_services()</code>, for example:</p>

<pre><code>import sys

...

print &gt;&gt;sys.stderr, "The file {} most probably does not exist ".format(cfg)
</code></pre></li>
<li><p>Comments describing functions should be docstrings. Docstrings are triple-quoted string literals (multiline string literals) that describe an object. They are placed directly below the object signature, e.g.:</p>

<pre><code>def foo():
    """I'm a foo() function. Cool, right?"""


class Foo:
    """I'm a Foo class. Cool, right?"""
</code></pre>

<p>These docstrings don't make any sense, but you get the idea.</p></li>
<li><p>If you find yourself explaining the meaning of literals in a comment, they should be constants. Take the exit codes (6 and 7):</p>

<pre><code>GETOPT_ERROR = 6
GLOBAL_EXCEPTION_CAUGHT = 7
</code></pre>

<p>That's much cleaner. If <code>GETOPT_ERROR</code> is mentioned later in the code, the reader doesn't have to scroll up to understand what it represents. The same goes for the stat file indices:</p>

<pre><code>PROC_COMM = 1
PROC_UTIME = 14
PROC_STIME = 15
</code></pre>

<p>If you're not convinced yet, notice how the code does not match the comment:</p>

<pre><code>utime = int(pidtimes[13]) # utime is the 14th ...
</code></pre>

<p>So which of the two is it? Using constants leads to less maintenance errors!</p></li>
<li><p>Comments like:</p>

<pre><code># Import default system libraries.
</code></pre>

<p>... state the obvious. Simply remove them.</p></li>
<li><p>At the very bottom of the file:</p>

<pre><code>main() # No need for main module check.
</code></pre>

<p>That's quite a bold claim. I'd argue name guards are important for every file intended to be used as a script, and there's little reason not to use them.</p></li>
<li><p>You only ever use <code>pathlib.Path</code> for <code>pathlib.Path.exists()</code>. You could use <a href="https://docs.python.org/2/library/os.path.html#os.path.exists" rel="nofollow noreferrer"><code>os.path.exists()</code></a> instead.</p></li>
<li><p>Avoid catching bare exceptions. Catching <code>Exception</code> will also catch completely unrelated exceptions (<code>KeyboardInterrupt</code>), and exceptions occurring in other parts of the code.</p>

<p>That being said, the real issue with catching <code>Exception</code> in this case is a lack of separation of concerns. The many layers of <code>if</code>-statements (or function call, see below) already check if the path exists, so why does this:</p>

<pre><code>except Exception as e: # If such a PID file does not exist, get Main PID from parsing systemctl.
</code></pre>

<p>... suggest that may not be the case? The <code>Exception</code> type encompasses so many other things, heck this doesn't even need to be an <code>OSError</code> instance. That's why it's crucial to factor in the different exceptions a line of code could raise, and write the <code>except</code> block around handling those cases.</p></li>
<li><p>If you wish to run a benchmark, time only the relevant code. Taking the initial time at the top of <code>main()</code> works well.</p></li>
<li><p>I see no point in making <code>load_services()</code> take a <code>handlerlist</code> parameter. The list will be empty, and if it isn't, a developer can simply call <code>list.extend()</code>:</p>

<pre><code>my_handler_list = ["foo", "bar"]
my_handler_list.extend(load_services("my_config_file"))
</code></pre></li>
<li><p>Abrvnts ar hrd to rd, y knw? <code>svc</code> → <code>service</code>, <code>usg</code> → <code>usage</code>, etc.</p></li>
<li><p>These lines:</p>

<pre><code>cpudic = {} # Predefine the dictionary for CPU usage.
memdic = {} # Predefine the dictionary for RAM usage.
cpudic, memdic = read_stats(pidlist) # Get stats into the dictionary.
</code></pre>

<p>... strike me as odd. 'Predefining' doesn't make any sense <del>in Python</del> here, because Python is weakly typed.</p></li>
<li><p>In <code>get_pid()</code>, <code>cpuusage</code> is never used beyond assignment.</p></li>
<li><p>Good job on using <code>os.path.join()</code>, but you missed a case in <code>get_pid()</code>:</p>

<pre><code>pidfpath = pidfolder + '/' + f # ...
</code></pre>

<p>... should be:</p>

<pre><code>pidfpath = os.path.join(pidfolder, f) # ...
</code></pre></li>
<li><p>You can easily inline certain sections so you don't have as many variables floating around:</p>

<pre><code>mchildren = mainproc.children(recursive=True)
pidchecks.append(mainpid)
for child in mchildren:
    pidchecks.append(child.pid)
</code></pre>

<p>... could be:</p>

<pre><code>pidchecks.append(mainpid)
for child in mainproc.children(recursive=True):
    pidchecks.append(child.pid)
</code></pre>

<p>Similarly:</p>

<pre><code>tmpc = os.listdir(pidfolder)
for f in tmpc: # ...
</code></pre>

<p>... could be:</p>

<pre><code>for f in os.listdir(pidfolder): # ...
</code></pre></li>
</ol>

<h2>Questions</h2>

<ol>
<li><blockquote>
  <p>Is it a good idea to make all those checks for a pidfile in /var/run just to save time from external grepping?</p>
</blockquote>

<p>It depends. Arguments in favor:</p>

<ul>
<li>Other developers don't need to be familiar with the shell commands to understand the code;</li>
<li>Implementing something in Python allows you to tune the behavior exactly to your liking;</li>
<li>Running pure Python code is normally more secure than issuing shell commands.</li>
</ul>

<p><br>
On the other hand:</p>

<ul>
<li>If you don't fully understand what the commands do under the hood, you may make mistakes;</li>
<li>It's more work to write and maintain, as you're basically reinventing the wheel;</li>
<li>Code you implement yourself is likely less portable than system utilities designed for individual systems.</li>
</ul>

<p>I don't have a conclusive answer.</p></li>
<li><blockquote>
  <p>Are all those nested ifs there along with the try / except on top of them a good style, and if not, how would I be able to replace them?</p>
</blockquote>

<p>I'll be frank: they're not good style. How to replace them? Let's take a closer look:</p>

<pre><code>pidfpath = '/var/run/{}/{}.pid'.format(svc, svc)
if not Path(pidfpath).exists(): # Most services have a /var/run/service/service.pid file.
    pidfpath = '/var/run/{}.pid'.format(svc)
    if not Path(pidfpath).exists(): # Some services use 'd' after their names for daemon.
        pidfpath = '/var/run/{}.pid'.format(svc + 'd')
        if not Path(pidfpath).exists(): # Others have a /var/run/service.pid file.
            pidfolder = '/var/run/{}'.format(svc)
            tmpc = os.listdir(pidfolder)
            for f in tmpc: # And others have various pidfiles like /var/run/service/pid.
                f = str(f)
                if 'pid' in f:
                    pidfpath = pidfolder + '/' + f # Add the file to the dir path. 
</code></pre>

<p>My solution would be to extract this snippet into a function, so we can do early returns. Note that this is not the only solution, and there's a heated debate about whether early returns are bad style, but at least this works.</p>

<pre><code>def get_pidf_path(svc):
    pidfpath = '/var/run/{}/{}.pid'.format(svc, svc)
    if Path(pidfpath).exists():
        return pidfpath

    # Most services have a /var/run/service/service.pid file.
    pidfpath = '/var/run/{}.pid'.format(svc)
    if Path(pidfpath).exists():
        return pidfpath

    # Some services use 'd' after their names for daemon.
    pidfpath = '/var/run/{}.pid'.format(svc + 'd')
    if Path(pidfpath).exists():
        return pidfpath

    # Others have a /var/run/service.pid file.
    pidfolder = '/var/run/{}'.format(svc)
    tmpc = os.listdir(pidfolder)
    for f in tmpc:
        f = str(f)
        # And others have various pidfiles like /var/run/service/pid.
        if 'pid' in f:
            pidfpath = pidfolder + '/' + f
            # Add the file to the dir path.
    return pidfpath
</code></pre>

<p>Now capture the function call in a <code>try</code> / <code>except</code> construct:</p>

<pre><code>try:
    pidfpath = get_pidf_path(svc=svc)
    with open(pidfpath, 'r') as pidf:
        mainpid = int(pidf.readline().strip())
except Exception as e:
    try:
        mainpid = int(subprocess.check_output("systemctl status {} | grep 'Main PID: ' | grep -Eo '[[:digit:]]*' | head -n 1".format(svc), shell=True))
    except ValueError as e:
        pass
</code></pre></li>
<li><blockquote>
  <p>Is it a bad practice to manually implement the gathering of information about CPU usage, while still using an external library for memory usage?</p>
</blockquote>

<p>No, that's fine. The points I made as a response to your first question still apply here. If getting CPU data manually becomes a burden, just use a library! They're there to make your life easier.</p></li>
</ol>

<h2>References</h2>

<p>1 <a href="https://www.python.org/dev/peps/pep-0008/#function-and-variable-names" rel="nofollow noreferrer">PEP-8: Naming Conventions: Prescriptive: Naming Conventions: Function and Variable Names</a></p>

<p>2 <a href="https://www.python.org/dev/peps/pep-0008/#maximum-line-length" rel="nofollow noreferrer">PEP-8: Code lay-out: Maximum Line Length</a></p>
    </div>