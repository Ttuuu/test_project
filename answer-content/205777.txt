<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You're writing out all the possible lookup results as code, using if-else statements.  What you should be doing is putting the information into a data structure (namely a <a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries" rel="nofollow noreferrer">dictionary</a>), and writing code to present the results of searching the dictionary.</p>

<p>As a result of your manual coding, you've made a few mistakes:</p>

<ul>
<li>Some entries are missing.  For example, your code says that 6 elements start with "A", but you omitted antimony.  Similarly, you omitted palladium under "P".</li>
<li>Beryllium and uranium are misspelled.</li>
<li>In a couple of places (e.g. bohrium), you neglected to close the parenthesis.</li>
</ul>

<h2>Suggested solution</h2>

<p>As mentioned above, you should put all of the data into a data structure.  I suggest using a dictionary, where each value is a <a href="https://docs.python.org/3/library/collections.html#collections.namedtuple" rel="nofollow noreferrer"><code>collections.namedtuple</code></a> that contains the symbol, atomic number, atomic mass, and group.  For the elements where we don't have the data, we can use <code>None</code> as a placeholder value.</p>

<p>After that, it's mainly an issue of how to display the results.  There are four possible outcomes:</p>

<ul>
<li>The user-specified lookup is a key in the dictionary, and the value is not <code>None</code>.  Then we print the data.  I suggest using <a href="https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str" rel="nofollow noreferrer"><code><em>str</em>.format()</code></a>.</li>
<li>The user-specified lookup is a key in the dictionary, but the value is <code>None</code>.  You currently print an empty line, but it should be more informative.</li>
<li>No element has a name that starts with the lookup value.</li>
<li>Some element(s) have a name that starts with the lookup value.  Reporting the list of elements is a bit tricky: I've used <code>'  '.join(â€¦)</code> with a <a href="https://docs.python.org/3/tutorial/classes.html#generator-expressions" rel="nofollow noreferrer">generator expression</a>.</li>
</ul>

<p>Of course, the program would actually be simpler if you simply filled in all of the missing data, so that you don't have to handle the N/A cases.</p>

<pre><code>from collections import namedtuple

Element = namedtuple('Element', 'symbol atomic_number atomic_mass group')

ELEMENTS = {
    'Hydrogen': Element('H', 1, 1, 'Non Metals'),
    'Helium': Element('He', 2, 4, 'Noble Gases'),
    'Lithium': Element('Li', 3, 7, 'Alkali Metals'),
    'Berylium': Element('Be', 4, 9, 'Alkaline Earth Metals'),
    'Boron': Element('B', 5, 11, 'Non Metals'),
    'Carbon': Element('C', 6, 12, 'Non Metals'),
    'Nitrogen': Element('N', 7, 14, 'Non Metals'),
    'Oxygen': Element('O', 8, 16, 'Non Metals'),
    'Fluorine': Element('F', 9, 19, 'Halogens'),
    'Neon': Element('Ne', 10, 20, 'Noble Gasses'),
    'Sodium': Element('Na', 11, 23, 'Alkali Metals'),
    'Magnesium': Element('Mg', 12, 24, 'Alkaline Earth Metal'),
    'Aluminium': Element('Al', 13, 27, 'Other Metals'),
    'Silicon': Element('Si', 14, 28, 'Non Metals'),
    'Phosphorus': Element('P', 15, 31, 'Non Metals'),
    'Sulphur': Element('S', 16, 32, 'Non Metals'),
    'Chlorine': Element('Cl', 17, 35.5, 'Halogens'),
    'Argon': Element('Ar', 18, 40, 'Noble Gasses'),
    'Potassium': Element('K', 19, 39, 'Alkali Metals'),
    'Calcium': Element('Ca', 20, 40, 'Alkaline Earth Metals'),
    'Scandium': Element('Sc', 21, 45, 'Transition Metals'),
    'Titanium': Element('Ti', 22, 48, 'Transition Metals'),
    'Vanadium': Element('V', 23, 51, 'Transition Metals'),
    'Chromium': Element('Cr', 24, 52, 'Transition Metals'),
    'Manganese': Element('Mn', 25, 55, 'Transition Metals'),
    'Iron': Element('Fe', 26, 56, 'Transition Metals'),
    'Cobalt': Element('Co', 27, 59, 'Transition Metals'),
    'Nickel': Element('Ni', 28, 59, 'Transition Metals'),
    'Copper': Element('Cu', 29, 63.5, 'Transition Metals'),
    'Zinc': Element('Zn', 30, 65, 'Transition Metals'),
    'Gallium': Element('Ga', 31, 70, 'Other Metals'),
    'Germanium': Element('Ge', 32, 73, 'Other Metals'),
    'Arsenic': Element('As', 33, 75, 'Non Metals'),
    'Selenium': Element('Se', 34, 79, 'Non Metals'),
    'Bromine': Element('Br', 35, 80, 'Halogens'),
    'Krypton': Element('Kr', 36, 84, 'Noble Gasses'),
    'Rubidium': Element('Rb', 37, 85, 'Alkali Metals'),
    'Strontium': Element('Sr', 38, 88, 'Alkaline Earth Metals'),
    'Yttrium': Element('Y', 39, 89, 'Transition Metals'),
    'Zirconium': Element('Zr', 40, 91, 'Transition Metals'),
    'Niobium': Element('Nb', 41, 93, 'Transition Metals'),
    'Molybdenum': Element('Mo', 42, 96, 'Transition Metals'),
    'Technetium': Element('Tc', 43, 98, 'Transition Metals'),
    'Ruthenium': Element('Ru', 44, 101, 'Transition Metals'),
    'Rhodium': Element('Rh', 45, 103, 'Transition Metals'),
    'Palladium': Element('Pd', 46, 106, 'Transition Metals'),
    'Silver': Element('Ag', 47, 108, 'Transition Metals'),
    'Cadmium': Element('Cd', 48, 112, 'Transition Metals'),
    'Indium': Element('In', 49, 115, 'Other Metals'),
    'Tin': Element('Sn', 50, 119, 'Other Metals'),
    'Antimony': Element('Sb', 51, 122, 'Other Metals'),
    'Tellurium': Element('Te', 52, 128, 'Non Metals'),
    'Iodine': Element('I', 53, 127, 'Halogens'),
    'Xenon': Element('Xe', 54, 131, 'Noble Gasses'),
    'Caesium': Element('Cs', 55, 133, 'Alkali Metals'),
    'Barium': Element('Ba', 56, 137, 'Alkaline Earth Metals'),
    'Lanthanum': Element('La', 57, 139, 'Rare Earth Metals'),

    # Elements for which we currently lack data:
    'Astatine': None,
    'Americium': None,
    'Actinium': None,
    'Bismuth': None,
    'Bohrium': None,
    'Caesium': None,
    'Copernicium': None,
    'Cerium': None,
    'Curium': None,
    'Californium': None,
    'Dubnium': None,
    'Darmstadtium': None,
    'Dysprosium': None,
    'Europium': None,
    'Einsteinium': None,
    'Francium': None,
    'Fermium': None,
    'Gold': None,
    'Gadolinium': None,
    'Hafnium': None,
    'Hassium': None,
    'Holmium': None,
    'Iridium': None,
    'Lead': None,
    'Lanthanum': None,
    'Lutetium': None,
    'Lawrencium': None,
    'Meitnerium': None,
    'Mendelevium': None,
    'Neodymium': None,
    'Nobelium': None,
    'Neptunium': None,
    'Osmium': None,
    'Platinum': None,
    'Plutonium': None,
    'Promethium': None,
    'Protactinium': None,
    'Praseodymium': None,
    'Ruthenium': None,
    'Rhodium': None,
    'Radon': None,
    'Rhenium': None,
    'Radium': None,
    'Rutherfordium': None,
    'Roentgenium': None,
    'Seaborgium': None,
    'Samarium': None,
    'Tellurium': None,
    'Tantalum': None,
    'Tungsten': None,
    'Thallium': None,
    'Terbium': None,
    'Thulium': None,
    'Thorium': None,
    'Uranium': None,
    'Xenon': None,
    'Ytterbium': None,
}

print("""Welcome to my element index! You must enter the name of an element with
a capital letter. Also you are able to type a capital letter to see lists of
elements beginning with that letter. Any element with N/A next to it is not in
the index at the moment. To see all of the letter lists you have to type the
letters in alphabetical order. For example if you want to see F and after you
want to see A, you have to restart the program to see A. And if you want to see
Fluorine and then after Hydrogen, you have to restart the program to see
Hydrogen.""")

lookup = input("Please enter the name or first capital letter of an element: ")
found = [name for name in ELEMENTS if name.startswith(lookup)]

if ELEMENTS.get(lookup):
    print("Element: {name}  Symbol: {e.symbol}  Atomic Number: {e.atomic_number}  Atomic Mass: {e.atomic_mass}  Group: {e.group}".format(name=lookup, e=ELEMENTS[lookup]))
elif lookup in ELEMENTS:
    print("{name} exists, but we lack the data for it.".format(name=lookup))
elif not found:
    print("There are no elements beginning with {init}".format(init=lookup))
else:
    print(
        "Elements beginning with {init}: {list}".format(
            init=lookup,
            list='  '.join(
                '{name}{na}'.format(
                    name=name,
                    na='' if ELEMENTS[name] else '(N/A)'
                )
                for name in found
            )
        )
    )
</code></pre>
    </div>