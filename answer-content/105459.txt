<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here is another approach using reduce (n stands for negative, z for zero, p for positive):</p>

<pre><code>def counter((n, z, p), raw_value):
    x = int(raw_value)
    return n + (x&lt;0), z + (x==0), p + (x&gt;0)

n, z, p = reduce(counter, raw_input().split(), (0,0,0))
</code></pre>

<p>We consider the tuple <code>(n, z, p)</code> (negative, zero, positive) which will count the number of positive, "zero" and negative numbers in the string. It starts with the value <code>0,0,0</code> (3rd argument of <code>reduce</code>).</p>

<p>The work is mainly done by the <a href="https://docs.python.org/2/library/functions.html#reduce" rel="nofollow noreferrer"><code>reduce</code></a> function: it calls the function <code>counter</code> with the <code>n, z, p</code> tuple and every value of the input string (thanks to <code>raw_input().split()</code>).</p>

<p>It uses a boolean-&gt;integer implicit conversion (True -&gt; 1, False -&gt; 0) to increment the correct element of the tuple, depending on the value of the current item.</p>

<p>One of the main advantage, is that every element of the array is read only once.</p>

<p>Regarding memory consumption, it could be further improved by using a <a href="https://stackoverflow.com/q/3862010/3207406">generator instead of <code>raw_input.split()</code></a></p>
    </div>