<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If your real data has indeed the same pattern as the test data, I think using a vector&lt;&gt; is a reasonable solution. You can probably try micro-optimizing it.
I quickly tried some loop-unrolling and shortcuts, which allowed me to improve 3x over the original vector version. Sorry for the code quality, this is just to illustrate the concept (<a href="http://quick-bench.com/c3tnWIXA_CDEcKWzOepIR91XoV0" rel="nofollow noreferrer">http://quick-bench.com/c3tnWIXA_CDEcKWzOepIR91XoV0</a>):</p>

<pre><code>template &lt;class C&gt; static void add(C &amp;result, uint64_t val, uint64_t offs, int i){
  const auto v = val &amp; (0xFFull &lt;&lt; (offs*8));
  if(v!=0) result.push_back(i*8 + offs);
}

static  void merge_with_vector_of_int2(benchmark::State&amp; state) {
    const auto&amp; test_data = get_test_data();

    std::vector&lt;char&gt; sorted_distinct_numbers;
    sorted_distinct_numbers.resize(test_data.max_possible_size);

    for (auto _ : state) {
        std::fill(sorted_distinct_numbers.begin(), sorted_distinct_numbers.end(), false);
        for (const auto&amp; r : test_data.ranges) {
            for (const auto value : r) {
                sorted_distinct_numbers[value] = 1;
            }
        }

        std::vector&lt;int&gt; result;
        result.reserve(test_data.max_possible_size);
        int i = 0;
        char* pSrc = &amp;sorted_distinct_numbers[0];
        for (; i &lt; sorted_distinct_numbers.size() / 8; ++i) {
            uint64_t val = *((uint64_t*)(pSrc + i * 8));
            if(val == 0){
              continue;
            }
            int64_t lo = val &amp; 0xFFFFFFFFull;
            int64_t hi = val &amp; (0xFFFFFFFFull &lt;&lt; 32ull);
            if(lo!=0){
              add(result, val, 0, i);
              add(result, val, 1, i);
              add(result, val, 2, i);
              add(result, val, 3, i);
            }
            if(hi!=0){
              add(result, val, 4, i);
              add(result, val, 5, i);
              add(result, val, 6, i);
              add(result, val, 7, i);
            }
        }

        for (int j = i*8+1; j &lt; sorted_distinct_numbers.size(); ++j) {
            if (sorted_distinct_numbers[j] == 1) {
                result.push_back(j);
            }
        }

        //return dump_results(result);
        //return result;
        benchmark::DoNotOptimize(result);
    }
}
</code></pre>
    </div>