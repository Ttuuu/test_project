<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Prefer the C++ standard library headers <code>&lt;cmath&gt;</code>, <code>&lt;cstdlib&gt;</code> and <code>&lt;cstdio&gt;</code> (though prefer <code>&lt;iostream&gt;</code> to the latter; it will help avoid some common errors).  These place the C names into the <code>std</code> namespace where they belong.</p>

<p>In C++, we normally write <code>()</code> to indicate that a function takes no arguments.  <code>(void)</code> is a C style of code.</p>

<p>Prefer <code>double</code> to <code>float</code> for floating-point calculations.  <code>double</code> is the "natural" type in C and C++; use <code>float</code> only where space is the main concern.</p>

<p>Avoid global variables.  In larger programs, global variables make it much harder to reason about parts of the code in isolation, so don't get into bad habits like this in your small programs.</p>

<p>I/O operations can fail.  There's no excuse for unchecked <code>scanf()</code>, which can lead to undefined behaviour.</p>

<p>There's no need to take the address of <code>interestRate</code> here, nor to divide separately by 100 and then by 12:</p>

<blockquote>
<pre><code>float *ann;
ann = &amp;interestRate;
i = ((*ann)/(100))/12;
</code></pre>
</blockquote>

<p>We can just use it:</p>

<pre><code>// convert annual percentage rate to monthly rate as a fraction
double i = interestRate / 1200;
</code></pre>

<p>Similarly,</p>

<blockquote>
<pre><code>float *x,y;
x = &amp;i;
y = 1 + *x;
</code></pre>
</blockquote>

<p>can be simply</p>

<pre><code>double y = 1 + i;
</code></pre>

<p>When printing output, lines normally <em>end</em> with a newline, rather than beginning with one.  Many terminals and/or stdio implementations flush output when they receive a newline (that's certainly true if stdout is a line printer, for example), and we certainly don't want to exit without a final newline (the next shell prompt then appears in an unexpected position).</p>

<p>There's far more parentheses than useful here:</p>

<blockquote>
<pre><code>float topD = (pow((y),n)-1);
float botD = (y-1)*pow((y),n);
</code></pre>
</blockquote>

<p>It's probably worth pulling out the common subexpression <code>std::pow(y,n)</code>, too (and <code>months</code> might be a better name than <code>n</code>).</p>

<p>Why is <code>Discount</code> named with a capital <code>D</code>?</p>

<p>Many of the comments aren't very helpful:</p>

<blockquote>
<pre><code>int main() //main
{

    loanDetails(); //called three function
</code></pre>
</blockquote>

<p>We can see that it's the <code>main()</code> function, and we can see that three functions are called.  What we can't see is that the functions interact invisibly (via the global variables), and so must be called exactly in that order.  That's the sort of information that comments are useful for.</p>
    </div>