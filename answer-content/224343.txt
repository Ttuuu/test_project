<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Personally I'm a fan of using Regex when it comes to parsing strings for the simplicity it provides. This way we can check for the next available file name without relying on loops. Only problem I see with this method is if the directory contains an absurd amount of files.</p>

<pre><code>//the following regex pattern divides the filename into 3 groups:
// [1] directory + filename before the last underscore
// [2] the index or numeric part before the last dot
// [3] the extension of the file

private static Regex fileNamePattern = new Regex("(.*)_([0-9]*).(.*)"); 

//this of course takes for granted that the initial file name is correctly generated

private static void GetNextFileName(string fileName)
{
    string newFileName = fileName;

    if (File.Exists(newFileName))
    {
        var existingFileNames = Directory.GetFiles(Path.GetDirectoryName(fileName)).Where(x =&gt; fileNamePattern.IsMatch(x));
        string existingMaxIndex = existingFileNames.Max(x =&gt; fileNamePattern.Match(x).Groups[2].Value);
        int newMaxIndex = int.Parse(existingMaxIndex) + 1;
        newFileName = fileNamePattern.Replace(newFileName, m =&gt; $"{m.Groups[1].Value}_{newMaxIndex}.{m.Groups[3].Value}");
    }

    //here you should proceed to create the file instead of returning it, as @200_success explained
}
</code></pre>
    </div>