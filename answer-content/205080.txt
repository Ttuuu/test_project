<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>Rust is a statically compiled language, which means that the compiler tells you things that you should pay attention to. Your code should <em>not have warnings</em>:</p>

<pre class="lang-none prettyprint-override"><code>warning: variable does not need to be mutable
  --&gt; src/main.rs:91:9
   |
91 |     let mut rooms = vec![
   |         ----^^^^^
   |         |
   |         help: remove this `mut`
   |
   = note: #[warn(unused_mut)] on by default

warning: field is never used: `description`
  --&gt; src/main.rs:60:5
   |
60 |     description: String
   |     ^^^^^^^^^^^^^^^^^^^
   |
   = note: #[warn(dead_code)] on by default
</code></pre></li>
<li><p>Use tools like <a href="https://github.com/rust-lang-nursery/rustfmt" rel="nofollow noreferrer">rustfmt</a> to use the idiomatic Rust style. For example, trailing commas are expected on multiline blocks and <code>Ok(a) =&gt; {a},</code> should just be <code>Ok(a) =&gt; a,</code></p></li>
<li><p>Use tools like <a href="https://github.com/rust-lang-nursery/rust-clippy" rel="nofollow noreferrer">clippy</a> to get additional static analysis beyond what the compiler performs. For example:</p>

<pre class="lang-none prettyprint-override"><code>warning: redundant field names in struct initialization
   --&gt; src/main.rs:117:9
    |
117 |         rooms: rooms,
    |         ^^^^^^^^^^^^ help: replace it with: `rooms`
    |
    = note: #[warn(clippy::redundant_field_names)] on by default
    = help: for further information visit https://rust-lang-nursery.github.io/rust-clippy/v0.0.212/index.html#redundant_field_names

warning: identical conversion
  --&gt; src/main.rs:20:21
   |
20 |           let mut s = String::from(format!(
   |  _____________________^
21 | |             "{} has {} exits:",
22 | |             &amp;self.room().name,
23 | |             &amp;self.room().exits.len()
24 | |         ));
   | |__________^
   |
   = note: #[warn(clippy::identity_conversion)] on by default
   = help: for further information visit https://rust-lang-nursery.github.io/rust-clippy/v0.0.212/index.html#identity_conversion
help: consider removing `String::from()`
   |
20 |         let mut s = format!(
21 |             "{} has {} exits:",
22 |             &amp;self.room().name,
23 |             &amp;self.room().exits.len()
24 |         );
   |

warning: the variable `index` is used as a loop counter. Consider using `for (index, item) in &amp;self.room().exits.enumerate()` or similar iterators
  --&gt; src/main.rs:26:21
   |
26 |         for exit in &amp;self.room().exits {
   |                     ^^^^^^^^^^^^^^^^^^
   |
   = note: #[warn(clippy::explicit_counter_loop)] on by default
   = help: for further information visit https://rust-lang-nursery.github.io/rust-clippy/v0.0.212/index.html#explicit_counter_loop

warning: identical conversion
  --&gt; src/main.rs:36:21
   |
36 |         let mut s = String::from(format!("You have {} items:", self.inventory.len()));
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `String::from()`: `format!("You have {} items:", self.inventory.len())`
   |
   = help: for further information visit https://rust-lang-nursery.github.io/rust-clippy/v0.0.212/index.html#identity_conversion

warning: the variable `index` is used as a loop counter. Consider using `for (index, item) in &amp;self.inventory.enumerate()` or similar iterators
  --&gt; src/main.rs:38:21
   |
38 |         for item in &amp;self.inventory {
   |                     ^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang-nursery.github.io/rust-clippy/v0.0.212/index.html#explicit_counter_loop

warning: identical conversion
  --&gt; src/main.rs:77:21
   |
77 |         let mut s = String::from(format!("{} has {} items:", &amp;self.name, &amp;self.items.len()));
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `String::from()`: `format!("{} has {} items:", &amp;self.name, &amp;self.items.len())`
   |
   = help: for further information visit https://rust-lang-nursery.github.io/rust-clippy/v0.0.212/index.html#identity_conversion

warning: the variable `index` is used as a loop counter. Consider using `for (index, item) in &amp;self.items.enumerate()` or similar iterators
  --&gt; src/main.rs:79:21
   |
79 |         for item in &amp;self.items {
   |                     ^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang-nursery.github.io/rust-clippy/v0.0.212/index.html#explicit_counter_loop
</code></pre></li>
<li><p>Building up large <code>Strings</code> just to print them is inefficient. Just print them directly.</p></li>
<li><p>Removing an <code>Item</code> from a <code>Vec</code> can be more expensive than needed. Consider using a <code>HashSet</code> instead.</p></li>
<li><p><code>v[v.len() - 1]</code> can be <code>v.last().unwrap()</code></p></li>
<li><p>You are creating a new <code>String</code> for every iteration of your loop. If you want that, use <code>BufRead::lines</code></p></li>
<li><p><code>match { ... Err(x) =&gt; panic! }</code> is <code>Result::unwrap</code> or <code>Result::unwrap_or_else</code>.</p></li>
<li><p>Collecting an entire vector of strings is wasteful if you only care about the next value. Either call <code>Iterator::next</code> twice or at the very least only take 2 values from the iterator, reducing wasted memory when a user accidentally pastes hundreds of words.</p></li>
<li><p>Don't specify the type of a collection's items' when collecting, it's redundant. Use <code>_</code> instead.</p></li>
<li><p>Consider writing a macro to avoid repeating the "<code>Ok</code> or <code>continue</code>" code. You could also extract this to a function and make use of the normal <code>?</code> logic.</p></li>
<li><p>Consider writing some code to parse the users argument so that it's out of the main loop and the bodies of each command's branch are at the same level of abstraction.</p></li>
<li><p>Avoid duplicating match arms — there's no reason to have both <code>None =&gt; {}</code> and <code>_ =&gt; {}</code>. </p></li>
</ol>



<pre><code>use std::io::{stdin, BufRead};

struct Game {
    room: usize,
    inventory: Vec&lt;Item&gt;,
    rooms: Vec&lt;Room&gt;,
}

impl Game {
    fn room(&amp;self) -&gt; &amp;Room {
        &amp;self.rooms[self.room]
    }

    fn room_mut(&amp;mut self) -&gt; &amp;mut Room {
        &amp;mut self.rooms[self.room]
    }

    fn exits(&amp;self) {
        println!(
            "{} has {} exits:",
            &amp;self.room().name,
            &amp;self.room().exits.len()
        );

        for (index, exit) in self.room().exits.iter().enumerate() {
            println!("({}) {}", index, self.rooms[*exit].name);
        }
    }

    fn view_inventory(&amp;self) {
        println!("You have {} items:", self.inventory.len());

        for (index, item) in self.inventory.iter().enumerate() {
            println!("\n({}) {}", index, item.name);
        }
    }

    fn move_room(&amp;mut self, room: usize) {
        self.room = self.room().exits[room];
    }

    fn take(&amp;mut self, item: usize) -&gt; &amp;Item {
        let item = self.room_mut().items.remove(item);
        self.inventory.push(item);
        self.inventory.last().unwrap()
    }
}

struct Item {
    name: String,
}

struct Room {
    name: String,
    description: String,
    exits: Vec&lt;usize&gt;,
    items: Vec&lt;Item&gt;,
}

impl Room {
    fn look(&amp;self) {
        println!("{}", self.description)
    }

    fn inspect(&amp;self) {
        println!("{} has {} items:", &amp;self.name, &amp;self.items.len());

        for (index, item) in self.items.iter().enumerate() {
            println!("\n({}) {}", index, item.name);
        }
    }
}

fn main() {
    let rooms = vec![
        Room {
            name: String::from("Bedroom"),
            description: String::from("A tidy, clean bedroom with 1 door and a balcony"),
            exits: vec![1, 2],
            items: vec![ Item {
                name: String::from("Key"),
            }]
        },

        Room {
            name: String::from("Balcony"),
            description: String::from("An outdoor balcony that overlooks a gray garden"),
            exits: vec![0],
            items: vec![]
        },

        Room {
            name: String::from("Landing"),
            description: String::from("A carpetted landing with doors leading off it. It overlooks a large living space. A set of stairs leads down"),
            exits: vec![0],
            items: vec![]
        },
    ];

    let mut player = Game {
        room: 0,
        rooms,
        inventory: vec![],
    };

    println!("Type `look' to look around. Type `move &lt;room no&gt;' to switch room");

    let stdin = stdin();
    for line in stdin.lock().lines() {
        let input = line.unwrap_or_else(|e| panic!("Error occured reading stdin: {}", e));
        let mut commands = input.trim().split_whitespace();

        match commands.next() {
            Some("look") =&gt; {
                player.room().look();
                player.exits();
            }

            Some("move") =&gt; {
                let args: Vec&lt;_&gt; = commands.take(2).collect();

                if args.len() != 1 {
                    println!("Incorrect args.");
                    continue;
                }

                let room_no: usize = match args[0].parse() {
                    Ok(a) =&gt; a,

                    Err(e) =&gt; {
                        println!("{}", e);
                        continue;
                    }
                };

                player.move_room(room_no);

                println!("You moved to {}", player.room().name);
            }

            Some("inventory") =&gt; {
                player.view_inventory();
            }

            Some("inspect") =&gt; {
                player.room().inspect();
            }

            Some("take") =&gt; {
                let args: Vec&lt;_&gt; = commands.take(2).collect();

                if args.len() != 1 {
                    println!("Incorrect args.");
                    continue;
                }

                let item_no: usize = match args[0].parse() {
                    Ok(a) =&gt; a,

                    Err(e) =&gt; {
                        println!("{}", e);
                        continue;
                    }
                };

                let item = player.take(item_no);

                println!("You collected {}", item.name);
            }

            _ =&gt; {}
        }
    }
}
</code></pre>
    </div>