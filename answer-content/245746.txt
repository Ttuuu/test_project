<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm not that great with threads, parallel programming so I won't comment about them... However, as for design decisions; I've taken your code and wrote my own version. I wouldn't say that the code that I'm about to present to you as an example is 100% bug proof. It does currently run and compile producing some interesting results! This has more to do with class hierarchies, the relationships between them, and their differences. I used a CRTP structure. I gave the Character classes the ability to assign function pointers for <code>attack</code> and <code>defending</code> which can be created by the user to be able to customize how they want a specific character or enemy type to perform an attack or to defend. I did not program any "game logic" but I have randomly generated a player where the user can choose between 3 types (no need to inherit here from the player class), and to randomly generate 3 different kinds of enemies (which are inherited)... Here's my version of the code that you can use for a reference and build off of. As for writing the game logic (that's for you to build and design), as for threading and parallel programming, it's beyond what I can explain. I can write some code that does it, but explaining it is not my strong suit! The code is quite long so I split it into 2 files due to some of the overloaded operators that I had to write for easier printing. Make sure to read the comments in the code too... it shows where I had made some design decisions, and where I modified the input values.</p>
<p><strong>main.cpp</strong></p>
<pre><code>#include "Game.h"

int main() {
    try {
        Game game;          
        game.run();           
    }
    catch (const std::exception&amp; e) {
        std::cerr &lt;&lt; e.what() &lt;&lt; std::endl;
        return EXIT_FAILURE;
    }
    return EXIT_SUCCESS;
}
</code></pre>
<p>Here's a potential output since the number of enemies is randomly generated...
<strong>Output</strong></p>
<pre><code>Welcome to Dungeon Raid!
Choose your character type
1 - Human:
2 - Dwarven:
3 - Elven:
3

Main Player Info:
Elven
level:45
health: 5493.489746
attack: 919.298096
defense: 970.807129
response: 91.92981
delay: 97.08071
recover: 746.64215

Orc_000
level:71
health: 9015.84277
attack: 2291.32764
defense: 2364.90454
response: 229.13277
delay: 236.49046
recover: 1225.37927

Orc_001
level:58
health: 7145.38623
attack: 1581.78455
defense: 1630.08899
response: 158.17845
delay: 163.00890
recover: 971.15802

Orc_002
level:36
health: 5356.60059
attack: 723.04858
defense: 653.49048
response: 72.30486
delay: 65.34905
recover: 728.03699

Troll_000
level:29
health: 4248.76318
attack: 458.06143
defense: 453.84021
response: 45.80614
delay: 45.38402
recover: 577.46637

Troll_001
level:92
health: 13566.97852
attack: 4404.49219
defense: 4765.45508
response: 440.44922
delay: 476.54550
recover: 1843.94226

Orc_003
level:74
health: 9432.72852
attack: 2752.44165
defense: 2504.81201
response: 275.24417
delay: 250.48120
recover: 1282.03979

Orc_004
level:29
health: 4301.33301
attack: 426.52374
defense: 492.74667
response: 42.65237
delay: 49.27467
recover: 584.61139

Troll_002
level:100
health: 14677.85352
attack: 5369.20947
defense: 5856.85938
response: 536.92096
delay: 585.68597
recover: 1994.92578

Troll_003
level:47
health: 6805.82422
attack: 1253.68689
defense: 1255.42249
response: 125.36869
delay: 125.54225
recover: 925.00677
</code></pre>
<p>...and now for the actual classes to make it all work.</p>
<p><strong>Game.h</strong></p>
<pre><code>#pragma once

// error handling
#include &lt;exception&gt;

// numerics, algorithms, properties, limits
#include &lt;algorithm&gt;
#include &lt;cstdint&gt;
#include &lt;limits&gt;
#include &lt;numeric&gt;
#include &lt;random&gt;
#include &lt;type_traits&gt;

// string and stream libraries
#include &lt;fstream&gt;
#include &lt;iostream&gt;
#include &lt;iomanip&gt;
#include &lt;sstream&gt;
#include &lt;string&gt;

// containers
#include &lt;array&gt;
//#include &lt;vector&gt;
#include &lt;concurrent_vector.h&gt;
#include &lt;concurrent_priority_queue.h&gt;


// memory, threads, etc.
#include &lt;memory&gt;
#include &lt;mutex&gt;
#include &lt;thread&gt;

// When adding a new type: must update operators
enum class PlayerType {
    HUMAN = 1,
    DWARVEN,
    ELVEN
};
std::istream&amp; operator&gt;&gt;(std::istream&amp; in, PlayerType&amp; type);
std::ostream&amp; operator&lt;&lt;(std::ostream&amp; in, const PlayerType&amp; type);

// When adding a new type: must update operators
enum class EnemyType {
    GOBLIN = 1,
    ORC,
    TROLL
};
std::istream&amp; operator&gt;&gt;(std::istream&amp; in, EnemyType&amp; type);
std::ostream&amp; operator&lt;&lt;(std::ostream&amp; out, const EnemyType&amp; type);

struct CharacterInfo {
    std::uint32_t level_;          
    float health_;          
    float attack_power_;   
    float defense_;        

    float time_response_;          // range [0,1]  // same as speed or how fast they can attack
    float time_delay_;             // range [0,1]  // time delay before next attack
    float recovery_rate_;          // range [0,1]  // how fast they can recover, regain health, etc...

    CharacterInfo();
    CharacterInfo(std::uint32_t level, float health, float attackPower, float defense,
        float timeResponse, float timeDelay, float recoverRate);
   
    CharacterInfo(const CharacterInfo&amp; other);
    CharacterInfo&amp; operator=(const CharacterInfo&amp; other);

};
std::istream&amp; operator&gt;&gt;(std::istream&amp; in, CharacterInfo&amp; info);
std::ostream&amp; operator&lt;&lt;(std::ostream&amp; out, const CharacterInfo&amp; info);

class Character;
typedef float(*AttackFunc)(Character* attacker, Character* defender, float time_response);
typedef void(*DefendOrBlockFunc)(Character* defender, Character* attacker, float time_response);

template&lt;class T&gt;
class EntityID {
protected:
    explicit EntityID(std::string&amp; id) {
        static int i = 0;
        std::stringstream strValue;
        strValue &lt;&lt; std::setw(3) &lt;&lt; std::setfill('0') &lt;&lt; std::to_string(i++);
        id.append("_" + strValue.str());
    }
    virtual ~EntityID() = default;
};

class Character {
protected:
    std::string id_ = "";
    AttackFunc attack_;
    CharacterInfo info_;
    DefendOrBlockFunc defend_;

    explicit Character(CharacterInfo&amp; info, const std::string&amp; id = "")
        : info_{ info }, id_{std::move(id)} {}

public:
    virtual ~Character() = default;
    Character* operator()() { return this; }
    CharacterInfo* info() { return &amp;info_; }

    std::string&amp; id() { return id_; }
    float health() const { return info_.health_; }
    float attackPower() const { return info_.attack_power_; }
    float defense() const { return info_.defense_; }
    float response() const { return info_.time_response_; }
    float delay() const { return info_.time_delay_; }
    float recovery() const { return info_.recovery_rate_; }

    void assignAttack(AttackFunc func) { attack_ = func; }
    void assignBlock(DefendOrBlockFunc func) { defend_ = func; }

    inline virtual void healthModifier(const Character&amp; other) {
        auto power = other.attackPower();
        this-&gt;info_.health_ -= (power - this-&gt;info_.defense_);
    }

    float attack(Character* defender, float time_response) { return attack_(this, defender, time_response); }
    void defend(Character* attacker, float time_response) { return defend_(this, attacker, time_response); }
 };

template&lt;typename Ty&gt;
const std::string nameOfCharacterType(Ty type) {
    std::stringstream name;
    name &lt;&lt; type;
    return name.str();
}

class Player final : public Character, EntityID&lt;Player&gt; {
    PlayerType player_type_;
public:
    Player(CharacterInfo&amp; info, PlayerType type, const std::string&amp; name = "Player" )
        : Character(info, std::move(name)), EntityID(id()), player_type_{ type } 
    {}
    virtual ~Player() = default;
    
    Player* operator()() { return this; }
    
    inline virtual void healthModifier(const Character&amp; other) override {
        // modify as desired... leave blank for default
    }
    
    PlayerType type() const { return player_type_; }
};

class Enemy : public Character {
    EnemyType enemy_type_;
protected:
    Enemy(CharacterInfo&amp; info,EnemyType type, const std::string&amp; name = "Enemy")
        : Character(info, std::move(name)), enemy_type_{ type } {}
  
public:
    virtual ~Enemy() = default;
    inline virtual void healthModifier(const Character&amp; other) override {
        // modify as desired... leave blank for default
    }  
    Enemy* operator()() { return this; }
    EnemyType type() const { return enemy_type_; }
};

class Goblin final : public Enemy, EntityID&lt;Goblin&gt; { // remove final if you want to derive from Goblin
public:
    Goblin(CharacterInfo&amp; info, EnemyType type, const std::string&amp; name = "Goblin")
        : Enemy(info, type, std::move(name)), EntityID(id()) {}
    virtual ~Goblin() = default;
    Goblin* operator()() { return this; }
    virtual void healthModifier(const Character&amp; other) override {
        // modify as desired... leave blank for default
    }
};

class Orc final : public Enemy, EntityID&lt;Orc&gt; { // remove final if you want to derive from Orc
public:
    Orc(CharacterInfo&amp; info, EnemyType type, const std::string&amp; name = "Orc")
        : Enemy(info, type, std::move(name)), EntityID(id()) {}
    virtual ~Orc() = default;
    Orc* operator()() { return this; }
    virtual void healthModifier(const Character&amp; other) override {
        // modify as desired... leave blank for default
    }
};

class Troll final : public Enemy, EntityID&lt;Troll&gt; { // remove final if you want to derive from Troll
public:
    Troll(CharacterInfo&amp; info, EnemyType type, const std::string&amp; name = "Troll")
        : Enemy(info, type, std::move(name)), EntityID(id()) {}
    virtual ~Troll() = default;
    Troll* operator()() { return this; }
    virtual void healthModifier(const Character&amp; other) override {
        // modify as desired... leave blank for default
    }
};

std::ostream&amp; operator&lt;&lt;(std::ostream&amp; out, Player&amp; player);
std::ostream&amp; operator&lt;&lt;(std::ostream&amp; out, Orc&amp; orc);
std::ostream&amp; operator&lt;&lt;(std::ostream&amp; out, Troll&amp; troll);

// define your attack and defense functions for the function pointers here! Or create a lambda within the initialize function.

class Game {
    std::unique_ptr&lt;Player&gt; player_;
    std::vector&lt;std::unique_ptr&lt;Enemy&gt;&gt; enemies_;

    std::random_device rd;
    std::mt19937 gen{ rd() };

public:
    Game() {
        initialize();
    }

    void initialize() {
        std::cout &lt;&lt; "Welcome to Dungeon Raid!\n";
        createPlayer();
        generateRandomEnemies();

        // here is where you would assign the attack and defence function pointers:
        // player_-&gt;assignAttack();
        // player_-&gt;assignBlock();

        /*for (auto&amp; e : enemies_) {
            e-&gt;assignAttack();
            e-&gt;assignBlock();
        }*/

    }

    void run() {
        // main loop, user input, game logic here
        
        // for testing purposes, let's just print out our player and enemy info as lists:
        std::cout &lt;&lt; "\nMain Player Info:\n" &lt;&lt; player_-&gt;type() &lt;&lt; '\n' &lt;&lt; *player_-&gt;info() &lt;&lt; '\n';

        for (auto&amp; e : enemies_) {
            std::cout &lt;&lt; e-&gt;id() &lt;&lt; '\n' &lt;&lt; *e-&gt;info() &lt;&lt; std::endl;
        }

    }

private:
    void createPlayer() {
        PlayerType type;
        CharacterInfo playerInfo;
  
        retrievePlayerInfo(type, playerInfo);
        this-&gt;player_.reset(new Player{ playerInfo, type, nameOfCharacterType(type) });
    }

    void showPlayerChoice(PlayerType&amp; type) {
        std::cout &lt;&lt; "Choose your character type\n";
        std::cout &lt;&lt; "1 - Human:\n"
            &lt;&lt; "2 - Dwarven:\n"
            &lt;&lt; "3 - Elven:\n";
        std::string str;
        std::getline(std::con, str);
        std::uint32_t val = std::stoi(str); // can improve this to fix invalid input types...
        type = static_cast&lt;PlayerType&gt;(val);
    }

    void retrievePlayerInfo(PlayerType&amp; type, CharacterInfo&amp; playerInfo) {
        bool properType = false;

        do {
            if (!properType)
                showPlayerChoice(type);

            switch (type) {
                case PlayerType::HUMAN: {
                    playerInfo = generateRandomStats(); // CharacterInfo{ 1, 10, 4, 3, 0.7f, 0.5f, 0.4f };
                    properType = true; break;
                }
                case PlayerType::DWARVEN: {
                    playerInfo = generateRandomStats(); // CharacterInfo{ 1, 12, 4, 4, 0.5f, 0.3f, 0.6f };
                    properType = true; break;
                }
                case PlayerType::ELVEN: {
                    playerInfo = generateRandomStats(); // CharacterInfo{ 1, 9, 3, 3, 0.8f, 0.2f, 0.7f };
                    properType = false; break;
                }
                default: {
                    properType = false; break;
                }
            }
        } while (!properType);
    }

    void generateRandomEnemies() {
        std::uniform_int_distribution&lt;std::uint32_t&gt; enemyCountDist{ 5, 20 }; // 5 to 20 enemies
        std::uint32_t enemyCount = enemyCountDist(gen);
        enemies_.resize(enemyCount);

        std::uniform_int_distribution&lt;std::uint32_t&gt; enemyTypeDist{ 1, 3 }; // 1 = Goblin, 2 = Orc, 3 = Troll
        
        EnemyType type;
        CharacterInfo enemyInfo;
        for (unsigned i = 0; i &lt; enemyCount; i++) {
            type = static_cast&lt;EnemyType&gt;( enemyTypeDist(gen) );

            switch (type) {
                case EnemyType::GOBLIN: {
                    enemyInfo = generateRandomStats(); // CharacterInfo{ 1, 5, 2, 3, 0.9f, 0.2f, 0.9f };
                    this-&gt;enemies_[i].reset(new Goblin{ enemyInfo, type });
                }
                case EnemyType::ORC: {
                    enemyInfo = generateRandomStats(); // CharacterInfo{ 1, 7, 5, 8, 0.3f, 0.4f, 0.6f };
                    this-&gt;enemies_[i].reset(new Orc{ enemyInfo, type });
                    break;
                }
                case EnemyType::TROLL: {
                    enemyInfo = generateRandomStats(); // CharacterInfo{ 1, 14, 5, 8, 0.3f, 0.4f, 0.6f };
                    this-&gt;enemies_[i].reset(new Troll{ enemyInfo, type });
                    break;
                }
            }            
        }
    }

    CharacterInfo generateRandomStats() {
        // Generate a Random level in the range of [1,20] for the player
        std::uniform_int_distribution&lt;std::uint32_t&gt; randomLevelDist(1, 100);
        std::uint32_t randomLevel = randomLevelDist(gen);

        // Character states will be based on the curve of the level
        // Generate Random Stats: Level 1 base health = 100
        // Health Range = ((Base Health * Multiplyer) + (Base Health * Level)) / BaseHealth         
        const float baseHealth = 10.0f;        
        auto baseMinMultiplyer = 1.2f;
        auto baseMaxMultiplyer = 1.5f;
        auto baseLevelHealth = (baseHealth * randomLevel);   

        auto lowerRange = baseHealth * baseMinMultiplyer * baseLevelHealth;
        auto upperRange = baseHealth * baseMaxMultiplyer * baseLevelHealth;
        std::uniform_real_distribution&lt;float&gt; dist(lowerRange, upperRange);
        auto randomHealth = dist(gen);

        // Attack &amp; Defense Range = 50% of health    
        auto healthPercentage = randomHealth * 0.5f;
        lowerRange /= randomLevel;
        upperRange /= randomLevel;
      
        std::uniform_real_distribution&lt;float&gt; randomAttackDefenceDist(healthPercentage / upperRange, healthPercentage / lowerRange);  
        auto randomAttack = randomAttackDefenceDist(gen) * randomLevel;
        auto randomDefense = randomAttackDefenceDist(gen) * randomLevel;

        // Time Response and Delay is based off of attack and defense where recovery is based off of health
        auto randomResponse = randomAttack * 0.1f;
        auto randomDelay = randomDefense * 0.1f;
        auto randomRecovery = randomHealth * 0.271828f * 0.5f;  // 0.271828 approximate e/10

        // Create our Info
        return CharacterInfo{ randomLevel, randomHealth, randomAttack, randomDefense, randomResponse, randomDelay, randomRecovery };
    }
};
</code></pre>
<p><strong>Game.cpp</strong></p>
<pre><code>#include "Game.h"

std::istream&amp; operator&gt;&gt;(std::istream&amp; in, PlayerType&amp; type) {
    std::uint32_t val{ 0 };
    in &gt;&gt; val;
    type = static_cast&lt;PlayerType&gt;(val);
    return in;
}

std::ostream&amp; operator&lt;&lt;(std::ostream&amp; out, const PlayerType&amp; type) {
    std::string str;
    switch (type) {
        case PlayerType::HUMAN:
            str = "Human";
            break;
        case PlayerType::DWARVEN:
            str = "Dwarven";
            break;
        case PlayerType::ELVEN:
            str = "Elven";
            break;
        default:
            str = "Unknown";
            break;
        }
    return out &lt;&lt; str;
}

std::istream&amp; operator&gt;&gt;(std::istream&amp; in, EnemyType&amp; type) {
    std::uint32_t val{ 0 };
    in &gt;&gt; val;
    type = static_cast&lt;EnemyType&gt;(type);
    return in;
}

std::ostream&amp; operator&lt;&lt;(std::ostream&amp; out, const EnemyType&amp; type) {
    std::string str;
    switch (type) {
        case EnemyType::GOBLIN:
            str = "Goblin";
            break;
        case EnemyType::ORC:
            str = "Orc";
            break;
        case EnemyType::TROLL:
            str = "Troll";
            break;
        default:
            str = "Unknown";
            break;
        }
    return out;
}

CharacterInfo::CharacterInfo() :    
    level_{ 0 },
    health_{ 0 },
    attack_power_{ 0 },
    defense_{ 0 },
    time_response_{ 0.0f },
    time_delay_{ 0.0f },
    recovery_rate_{ 0.0f }
{}

CharacterInfo::CharacterInfo( std::uint32_t level, float health, 
                              float attackPower, float defense, 
                              float timeResponse, float timeDelay, float recoveryRate) :
    level_{level},
    health_{health},
    attack_power_{attackPower},
    defense_{defense},
    time_response_{timeResponse},
    time_delay_{timeDelay},
    recovery_rate_{recoveryRate}
{}

CharacterInfo::CharacterInfo(const CharacterInfo&amp; other) {
    this-&gt;level_ = other.level_;
    this-&gt;health_ = other.health_;
    this-&gt;attack_power_ = other.attack_power_;
    this-&gt;defense_ = other.defense_;
    this-&gt;time_response_ = other.time_response_;
    this-&gt;time_delay_ = other.time_delay_;
    this-&gt;recovery_rate_ = other.recovery_rate_;
}

CharacterInfo&amp; CharacterInfo::operator=(const CharacterInfo&amp; other) {
    this-&gt;level_ = other.level_;
    this-&gt;health_ = other.health_;
    this-&gt;attack_power_ = other.attack_power_;
    this-&gt;defense_ = other.defense_;
    this-&gt;time_response_ = other.time_response_;
    this-&gt;time_delay_ = other.time_delay_;
    this-&gt;recovery_rate_ = other.recovery_rate_;
    return *this;
}

std::istream&amp; operator&gt;&gt;(std::istream&amp; in, CharacterInfo&amp; info) {
    in &gt;&gt; info.level_;
    in &gt;&gt; info.health_;
    in &gt;&gt; info.attack_power_;
    in &gt;&gt; info.defense_;
    in &gt;&gt; info.time_response_;
    in &gt;&gt; info.time_delay_;
    in &gt;&gt; info.recovery_rate_;
    return in;
}

std::ostream&amp; operator&lt;&lt;(std::ostream&amp; out, const CharacterInfo&amp; info) {        
    out &lt;&lt; "level:" &lt;&lt; info.level_ &lt;&lt; '\n';
    out.setf(std::ios::floatfield, std::ios::fixed);
    out &lt;&lt; "health: " &lt;&lt; std::setw(3) &lt;&lt; std::setfill('0') &lt;&lt; info.health_ &lt;&lt; '\n'
        &lt;&lt; "attack: " &lt;&lt; std::setw(3) &lt;&lt; std::setfill('0') &lt;&lt; info.attack_power_ &lt;&lt; '\n'
        &lt;&lt; "defense: " &lt;&lt; std::setw(3) &lt;&lt; std::setfill('0') &lt;&lt; info.defense_ &lt;&lt; '\n'
        &lt;&lt; "response: " &lt;&lt; std::setprecision(5) &lt;&lt; std::setfill('0') &lt;&lt; info.time_response_ &lt;&lt; '\n'
        &lt;&lt; "delay: " &lt;&lt; std::setprecision(5) &lt;&lt; std::setfill('0') &lt;&lt; info.time_delay_ &lt;&lt; '\n'
        &lt;&lt; "recover: " &lt;&lt; std::setprecision(5) &lt;&lt; std::setfill('0') &lt;&lt; info.recovery_rate_ &lt;&lt; std::endl;
    return out;
}

std::ostream&amp; operator&lt;&lt;(std::ostream&amp; out, Player&amp; player) {
    out &lt;&lt; "ID: " &lt;&lt; player.id() &lt;&lt; '\n'
        &lt;&lt; player.info() &lt;&lt; std::endl;
    return out;
}

std::ostream&amp; operator&lt;&lt;(std::ostream&amp; out, Orc&amp; orc) {
    out &lt;&lt; "ID: " &lt;&lt; orc.id() &lt;&lt; '\n'
        &lt;&lt; orc.info() &lt;&lt; std::endl;
    return out;
}

std::ostream&amp; operator&lt;&lt;(std::ostream&amp; out, Troll&amp; troll) {
    out &lt;&lt; "ID: " &lt;&lt; troll.id() &lt;&lt; '\n'
        &lt;&lt; troll.info() &lt;&lt; std::endl;
    return out;
}
</code></pre>
<p>If you look at the generated output, you can see that <code>Goblin</code>, <code>Orc</code>, <code>Troll</code> are their own class, but through inheritance, they are all enemy objects and enemy objects are a form of a Character. Even the Player is a Character. However, <code>Character</code> and <code>Enemy</code> themselves are abstract types. The <code>CRTP</code> that is used helps in the aide of generating unique IDs for them in the form of an <code>std::string</code>. Every time a new <code>Orc</code> is generated the id value is incremented based on the number of orcs, but this doesn't affect the number id for the Trolls or Goblins, however, we can easily store all of these into a single vector. Using <code>unique_ptr</code>'s helps with cleaning up memory. Now it's just a matter of making sure that your threads and access to read/write within your containers are synchronized and concurrent. Intel has a nice threading library, you can just search for <code>tbb</code> as it's a part of their IDEs, but they do have an open-source - free version of the <code>tbb</code> library via <code>apache's</code> licenses for download. At the time of this post, here is their active link: <a href="https://software.intel.com/content/www/us/en/develop/tools/threading-building-blocks.html" rel="nofollow noreferrer">Intel:TBB</a>. This should be able to help you with your threading and parallel programming concerns.</p>
    </div>