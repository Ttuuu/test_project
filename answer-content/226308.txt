<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2><code>__func__</code></h2>

<p>Unlike <code>__FUNCTION__</code>, <code>__func__</code> is standard C since C99.  Some compilers might not support C99 and therefore in those compilers you have to use whatever they provide, but if your compiler supports C99, you should use <code>__func__</code>.  If you have a crappy compiler, think about using a better one.</p>

<hr>

<h2>magic numbers</h2>

<p><a href="https://stackoverflow.com/q/47882/6872717">What is a magic number, and why is it bad?</a></p>

<p>Don't use any numbers different than 0, 1, or 2 in your code.  The only place where numbers deserve to go is in constant macros like this:</p>

<pre><code>#define MAX_STRLEN   (127)
</code></pre>

<p>Note:  As Roland Illig pointed out in his comment, this is still a magic number, but it is already much better than the alternative.  To improve it, a comment about why 127 and not another number, would be very appropriate just above the definition.</p>

<hr>

<h2><code>BUFSIZ</code></h2>

<p>When you create a buffer, and you don't need a strict size (when you need a very large buffer, or you are short of memory), you can use <code>BUFSIZ</code> which is defined in <code>&lt;stdio.h&gt;</code>, which is around 1KiB~4KiB.</p>

<pre><code>#include &lt;stdio.h&gt;

...

char fbuf[BUFSIZ];
</code></pre>

<hr>

<h2><code>ARRAY_SIZE()</code></h2>

<p>Use this macro wherever possible.</p>

<p>Typically defined as: <code>#define ARRAY_SIZE(arr)  (sizeof(arr) / sizeof((arr)[0]))</code></p>

<p>It makes your code safer:</p>

<p>If you ever change the size of an array, it will be updated, while if you hardcoded the size as a magic number, you will have to update every number, and if you hardcoded it as a macro (sometimes, ARRAY_SIZE can't be used, and this is the only possibility), if you change the name of the macro, you will have to update it.</p>

<pre><code>#include &lt;stdio.h&gt;

#define ARRAY_SIZE(arr)     (sizeof(arr) / sizeof((arr)[0]))

...

char fbuf[BUFSIZ];
while (fgets(fbuf, ARRAY_SIZE(fbuf), f)) {
</code></pre>

<p>Note: Never use <code>sizeof</code> where <code>ARRAY_SIZE</code> should be used. It's very unsafe, because if an array ever changes to be a pointer (for example if it is a function parameter), ARRAY_SIZE will raise a warning on recent compilers, while sizeof will give wrong results, and produce hard to find bugs.</p>
    </div>