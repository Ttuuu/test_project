<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A couple of things:</p>

<ol>
<li><p>Although you are using a StringBuilder (which is good in this case), you're generating a string for each row of data.  If you're intending to use this to create multiple rows of data, then it will not quite as efficient as it could be.  Maybe this is no big deal, although that might depend on how much data you're processing.</p></li>
<li><p>Although I don't feel it's a major concern, I don't like stripping off the trailing comma.  I always like to avoid messing up my output in the first place, rather than having additional code at the end that fixes the problem.  One thing to realize, though, is that your StringBuilder generates an entire string in memory to contain the row of data, but when you call TrimEnd, I believe that this will create <em>yet another</em> string containing the entire row of data.  Not very efficient.</p></li>
</ol>

<p>I imagine that in most cases, this might be used to output to a file, or perhaps some other kind of stream. Therefore, it would make more sense to me to rewrite this functionality to write to a stream.</p>

<p>I've provided an alternate implementation below. The core functionality is in the WriteAsCsv method for the TextWriter.  There are a few overloads to make this functionality easy to use for someone who has access to a FileStream object, a StringBuilder object, or just the original IEnumerable object.</p>

<p>This approach uses an enumerator in order to avoid the issue with the trailing comma.</p>

<pre><code>    static void WriteCsvValue(System.IO.TextWriter writer, string str)
    {
        if (str.IndexOfAny(csvChars) &gt; 0)
        {
            writer.Write("\"");
            writer.Write(str); // TODO: perform any necessary escaping
            writer.Write("\"");
        }
        else
        {
            writer.Write(str);
        }
    }

    public static void WriteAsCsv&lt;T&gt;(this System.IO.TextWriter writer, IEnumerable&lt;T&gt; source, Func&lt;T, object&gt; getItem)
    {
        if ((source == null) || (getItem == null))
        {
            return;
        }

        var items = from item in source.Select(getItem)
                    where item != null
                    select item.ToString();

        using (var enumerator = items.GetEnumerator())
        {
            if (enumerator.MoveNext())
            {
                WriteCsvValue(writer, enumerator.Current);

                while (enumerator.MoveNext())
                {
                    writer.Write(", ");
                    WriteCsvValue(writer, enumerator.Current);
                }
            }
        }
    }

    public static void WriteAsCsv&lt;T&gt;(this System.IO.Stream stream, IEnumerable&lt;T&gt; source, Func&lt;T, object&gt; getItem)
    {
        if ((source == null) || (getItem == null))
        {
            return;
        }

        using (var writer = new System.IO.StreamWriter(stream))
        {
            writer.WriteAsCsv(source, getItem);
        }
    }

    public static void AppendAsCsv&lt;T&gt;(this StringBuilder builder, IEnumerable&lt;T&gt; source, Func&lt;T, object&gt; getItem)
    {
        if ((source == null) || (getItem == null))
        {
            return;
        }

        using (var writer = new System.IO.StringWriter(builder))
        {
            writer.WriteAsCsv(source, getItem);
        }
    }

    public static string ToCsv&lt;T&gt;(this IEnumerable&lt;T&gt; source, Func&lt;T, object&gt; getItem)
    {
        StringBuilder builder = new StringBuilder();
        builder.AppendAsCsv(source, getItem);
        return builder.ToString();
    }
</code></pre>

<ul>
<li>A StreamWriter is a TextWriter that wraps a Stream object.</li>
<li>A StringWriter is a TextWriter that wraps a StringBuilder object.</li>
</ul>

<p>The gist of what I've done here is to decompose your original approach into separate pieces, making it easier to consume in multiple different ways.</p>
    </div>