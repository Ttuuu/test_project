<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code is not Pythonic as it does not adhere to the standard Python style guide.</p>

<ol>
<li><code>divisibleSumPairs</code> should be snake case <code>divisible_sum_pairs</code>.</li>
<li>You should have one space both sides of most operators. <code>i=0</code> <code>i+=1</code>, <code>ar[i]+ar[j]</code> are all harder to read than they need to be.</li>
<li>Most of your variable names don't describe what they contain.</li>
<li>You <code>print</code> inside a function that should <code>return</code>.</li>
</ol>

<pre class="lang-py prettyprint-override"><code>def divisible_sum_pairs(length, divisor, items):
    i = 0       #pointer 1
    j = 1       #pointer 2 is faster than p1
    count = 0   #pointer 3 will only increment 1 once j = n-1 (second last element)
    pairs = 0
    while count &lt; length - 1:
        if (items[i] + items[j]) % divisor == 0: 
            pairs += 1
        j += 1
        count += 1
        if count == length - 1:
            i += 1
            j = i + 1
            count = i
    return pairs
</code></pre>

<ol start="5">
<li><p>You don't need pointer 3 as <code>count = j + 1</code>:</p>

<pre class="lang-py prettyprint-override"><code>j += 1
count += 1
</code></pre>

<pre class="lang-py prettyprint-override"><code>j = i + 1
count = i
</code></pre>

<p>We can just replace <code>count</code> with <code>j - 1</code>.</p></li>
<li><p>We can simplify all of the places where <code>count</code> was being used.
This is as you have <code>- 1</code>s  on both sides of the operators.</p></li>
<li><p>Rather than <code>while j &lt; length</code> it would be clearer if you instead used <code>while i &lt; length - 1</code>.
This comes in two parts:</p>

<ul>
<li>It is confusing to see <code>while j &lt; length</code> with <code>if j == length</code> in the body.</li>
<li>You're not actually bound by <code>j</code> you're bound by <code>i</code>.</li>
</ul></li>
<li><p>Rather than using a <code>while</code> loop we can see that there's an opportunity to use two for loops to make things easier to read.</p>

<p><strong>Note</strong>: These for loops have the exact same time complexity as your <code>while</code>.</p></li>
</ol>

<pre class="lang-py prettyprint-override"><code>def divisible_sum_pairs(length, divisor, items):
    pairs = 0
    for i in range(length - 1):
        for j in range(i + 1, length):
            if (items[i] + items[j]) % divisor == 0: 
                pairs += 1
    return pairs
</code></pre>

<ol start="9">
<li><p>We can simplify the code by using using a comprehension.</p>

<p>For example we can extract getting the combinations of items.</p>

<pre class="lang-py prettyprint-override"><code>combinations = (
    (items[i], items[j])
    for i in range(length - 1)
    for j in range(i + 1, length)
)
for a, b in combinations:
    if (a + b) % divisor == 0:
</code></pre></li>
<li><p>We can instead <code>sum</code> with a comprehension that generates numbers.</p>

<pre class="lang-py prettyprint-override"><code>pairs = sum(
    1
    for a, b in combinations
    if (a + b) % divisor == 0
)
</code></pre></li>
<li><p>We can exploit the fact that bools are integers and move the if's expression as the comprehension's expression.</p></li>
<li>We can use <a href="https://docs.python.org/3/library/itertools.html#itertools.combinations" rel="nofollow noreferrer"><code>itertools.combinations</code></a> to remove the need to manually get the combinations.</li>
</ol>

<pre class="lang-py prettyprint-override"><code>import itertools


def divisible_sum_pairs(_, divisor, items):
    return sum(
        (a + b) % divisor == 0
        for a, b in itertools.combinations(items, 2)
    )
</code></pre>

<p>Every change has been a 1 to 1 replacement. The time complexity is still <span class="math-container">\$O(\binom{n}{2})\$</span> (<span class="math-container">\$O(n^2)\$</span>) and memory complexity is still <span class="math-container">\$O(1)\$</span>.</p>

<p>However now readability is much better.</p>
    </div>