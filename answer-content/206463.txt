<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Partition - Pivot selection</h1>
<p>There are 2 bugs in the pivot selection code, in combination allowing for <span class="math-container">\$\mathcal{O}(n^2)\$</span> worst case runtime.</p>
<h3>Bug #1: Wrong average calculation</h3>
<p>I guess this is just a typo:</p>
<pre><code>auto middle = data[(p + 2) / 2];
</code></pre>
<p>Most likely, <code>(p + r) / 2</code> was intended instead, and that would fix this problem (disregarding overflow).</p>
<h3>Bug #2: Missing a case</h3>
<pre><code>if (first &gt; middle) {
    if (middle &gt; last) {
        pivot = middle;
    } else {
        pivot = last;
    }
}
</code></pre>
<p>This snippet doesn't handle the case correctly if <span class="math-container">\$middle &lt; first &lt; last\$</span>. Even though <code>first</code> should be assigned as pivot, <code>last</code> will be.</p>
<p>The fix is simple: Change <code>pivot = last;</code> to <code>pivot = std::min(first, last);</code>.</p>
<h3>Consequences</h3>
<p>These two bugs allow for runtime complexity to degrade to <span class="math-container">\$\mathcal{O}(n^2)\$</span>, because they introduce a huge bias towards <code>last</code> as pivot value:</p>
<p>For any call with <code>p &gt;= 4</code>, <code>middle</code> will have the value of an element to the left of <code>data[p]</code>, thus being guaranteed to be smaller than <code>first</code> or <code>last</code> due to previous runs of <code>_partition</code>. So `last will be chosen as pivot, due to bug #2.</p>
<p>For any call with <code>p == 2</code> or <code>p == 3</code>, <code>middle</code> will be assigned the value of <code>data[1]</code>, which is equal to <code>first</code>. In that case, <code>pivot</code> will always be assigned the value of <code>middle</code>/<code>first</code>.</p>
<p>For any call with <code>p == 0</code> or <code>p == 1</code>, the median calculation will work with a slight bias towards <code>last</code> (due to bug #2).</p>
<h1>Partition - Moving values</h1>
<p>There seems to be an assumption that <code>data[r] == pivot</code>. This might have been a good assumption before due to bug #2, but that isn't necessarily the case once that bug is fixed. There a multiple ways to fix that.</p>
<p>Also, technically it isn't necessary to move values around that are equal to the pivot value: It doesn't actually matter whether they are left or right of the final pivot position.</p>
<h1>Multithreading</h1>
<p>The current multithreading solution isn't actually that efficient at using threads: Nearly half the threads at a time are waiting for the others to finish. (The first thread is waiting on threads #2 and #3 it spawned, they then are waiting on threads #4-7, ...)</p>
<p>As mentioned in the comments, this could be fixed by letting the original thread keep working on one of the subsections before waiting, i.e. changing this:</p>
<pre><code>        std::thread lower(&amp;quicksort::_sort&lt;T&gt;, this, data, p, q - 1);
        std::thread upper(&amp;quicksort::_sort&lt;T&gt;, this, data, q + 1, r);
        lower.join();
        upper.join();
</code></pre>
<p>to:</p>
<pre><code>        std::thread lower(&amp;quicksort::_sort&lt;T&gt;, this, data, p, q - 1);
        _sort(data, q + 1, r);
        lower.join();
</code></pre>
<p>Another point to make is that it rarely benefits performance to have a number of threads much larger than the number of available (logical) cores. The final number is likely between #cores and 2 * #cores, but to find the best amount you'll likely need to measure.</p>
<h3>Bug #3: No protection for concurrent calls</h3>
<p>Since we're already in the multithreaded environment, what happens if a second thread calls <code>quicksort::sort</code> after the first thread, but before that call finished?</p>
<p>It resets <code>thread_count</code>, thus allowing for the creation of more threads than intended. Once they are finished, <code>thread_count</code> will be negative! This might cause problems if that case isn't expected.</p>
<p>Solution: Either don't reset <code>thread_count</code>, or wait until it reaches zero before starting to work on the next dataset.</p>
    </div>