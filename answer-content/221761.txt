<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are some basic considerations to make in your design.</p>

<h3>Guard arguments</h3>

<p>Perform at least <em>NotNull</em> checks on arguments on public entrypoints of your API.</p>

<blockquote>
<pre><code>public OrderDeliverer(Warehouse warehouse, IOrderStreamer orderStreamer)
    {
        this.warehouse = warehouse;
        this.orderStreamer = orderStreamer;
    }
</code></pre>
</blockquote>

<pre><code>public OrderDeliverer(Warehouse warehouse, IOrderStreamer orderStreamer)
    {
        if (warehouse == null)
            throw new ArgumentNullException(nameof(warehouse));
        if (orderStreamer== null)
            throw new ArgumentNullException(nameof(orderStreamer));
        this.warehouse = warehouse;
        this.orderStreamer = orderStreamer;
    }
</code></pre>

<h3>Avoid nesting statements if you can</h3>

<p>Code reads easier with the amount of nested statements kept to a minimum.</p>

<blockquote>
<pre><code>if (!warehouse.HasOrders)
{
    orderStreamer.AdvanceTime();
}

// Keep processing orders while there are orders
if (warehouse.HasOrders)
{
    // code when HasOrders ..
}
</code></pre>
</blockquote>

<pre><code>if (!warehouse.HasOrders)
{
    orderStreamer.AdvanceTime();
    return;
}

// Keep processing orders while there are orders
// code when HasOrders ..
</code></pre>

<h3>Avoid redundant comments</h3>

<p>Comments should be added only if they add substantial new information to the code.
In the above snippet, you could do without</p>

<blockquote>
  <p><code>// Keep processing orders while there are orders</code></p>
</blockquote>

<h3>Inline variable declaration</h3>

<p>This can be written in a more concise fashion.</p>

<blockquote>
<pre><code> Order order;
 else if (warehouse.TrySendNextOrder(out order))
</code></pre>
</blockquote>

<pre><code>else if (warehouse.TrySendNextOrder(out Order order))
</code></pre>

<h3>Redundant variable type</h3>

<p>The declared type does not need to be printed out when it can be derived logically from the instantiated type.</p>

<blockquote>
  <p><code>DeliveredOrder outboundOrder = new DeliveredOrder(order.Id);</code></p>
</blockquote>

<pre><code>  var outboundOrder = new DeliveredOrder(order.Id);
</code></pre>

<h3>Event lifetime management</h3>

<p>Do you have a way to unsubscribe from the event? <strong>This is the cause of many memory leaks.</strong></p>

<blockquote>
  <p><code>travelMinutes += warehouse.GetOrderReturnMinutes(order);</code></p>
</blockquote>

<h3>Property vs Method</h3>

<p><a href="http://firebreaksice.com/csharp-property-vs-method-guidelines/" rel="nofollow noreferrer">How to decide?</a> Consider using a property for a simple getter <code>GetNumberOfCompleted</code>. </p>

<h3>Virtual methods</h3>

<p>Declare virtual methods when there is a use case for it. What is the reason you declare your method virtual?</p>

<blockquote>
  <p><code>public virtual void ProcessOrder(</code></p>
</blockquote>
    </div>