<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is a general C code review, not addressing functionality. Overall the code is fairly well-written so most of my remarks are minor nit-picks. Could do with more comments. Your coding style is a bit exotic but as long as you keep it consistent, that's ok.</p>

<p><strong>Program design</strong></p>

<ul>
<li><p>You don't seem to have an actual API for the functions. Even if they are supposed to replace the standard library ones, you still need some user entry point header where the function declarations and use are found. I suppose this is "malloc.h" but you didn't post that one.</p></li>
<li><p>You need to drop inlining. Both the gcc one and the standard C <code>inline</code>. When writing library/system code, it is frowned upon to use inlining all over, because it leads to big executables. Several of your functions are not great candidates for inlining. The decision when to inline should be made by the compiler, not the programmer. </p>

<p><code>inline</code> is mostly to be regarded as an obsolete keyword, much like <code>register</code>.</p></li>
</ul>

<p><strong>Standard compliance</strong></p>

<ul>
<li><p>There's a potential for namespace clashes with stdlib.h. Apart from the obvious names <code>malloc</code> etc: if your code isn't actually part of Glibc or equivalent, then you shouldn't use <code>__</code> prefixes.</p></li>
<li><p><code>void *user_area[0];</code> etc is not valid C. This is obsolete non-standard gnu since 20 years back and shouldn't be used. Use standard C flexible array members instead, they work the same. </p></li>
<li><p>Whenever possible, drop non-standard <code>__typeof__</code> in favour of standard C <code>_Generic</code>.</p></li>
</ul>

<p><strong>Potential bugs</strong></p>

<ul>
<li><p><code>g_arena_data</code> is occasionally accessed outside mutex locks. Could be problematic and perhaps solved with <code>_Atomic</code>.</p></li>
<li><p><code>return (void *)chunk-&gt;user_area;</code> is fishy, why the cast? Looks like a cast from <code>void**</code> to <code>void*</code> and thereby a bug?</p></li>
</ul>

<p><strong>Performance</strong></p>

<ul>
<li>I'd thread carefully around <code>__attribute__((packed))</code>. While you might want to keep heap memory small, this might lead to various misaligned access and slower code. Would have to be benchmarked in detail.</li>
</ul>

<p><strong>Coding style</strong></p>

<ul>
<li><p>Avoid "secret macro language" macros. Hiding trivial operations behind macros is bad practice, it makes the code harder to read, not easier. Readability is more important than concerns about potential code repetition. For example instead of this:</p>

<pre><code># define __mchunk_is_used(chunk) (chunk-&gt;size &amp; (1UL &lt;&lt; CHUNK_USED))
</code></pre>

<p>You should simply write:</p>

<pre><code>bool chunk is_chunk_used = (chunk-&gt;size &amp; (1UL &lt;&lt; CHUNK_USED));
</code></pre>

<p>There's no need to "protect" the programmer against reading code containing bit-wise operators etc. You can assume that the reader knows C, but not the "secret macro language".</p></li>
<li><p>Similarly, there is no reason to implement <code>__marena_update_max_chunks</code> as a function-like macro. Write a function instead, for readability. But also so you can make it <code>static</code> to the specific translation unit instead of the global namespace.</p></li>
<li><p>if statements such as this one are hard to read and should be avoided:</p>

<pre><code> if (chunk_type != CHUNK_LARGE) mmap_size = sizeof(t_bin) + (size + sizeof(t_chunk)) * CHUNKS_PER_POOL;
 else mmap_size = size + headers_size;
</code></pre>

<p>Keep the contents indented, at a line of their own. Also, it is good practice to always use braces even when there is just a single expression following if/else.</p></li>
<li><p>Consistently use <code>size_t</code> for storing the size of an array. Not <code>int</code> or <code>unsigned long</code>.</p></li>
<li><p>Avoid using the lvalue result of <code>=</code> inside expressions. Something like <code>arena = &amp;arena_data.arenas[(arena_index = 0)];</code> should be rewritten as <code>arena_index = 0; arena = &amp;arena_data.arenas[arena_index];</code></p></li>
<li><p>The presence of <code>continue</code> in C code almost exclusively means that a loop should be rewritten in more readable ways. For example the <code>while (pthread_mutex_trylock(&amp;arena-&gt;mutex) != 0)</code> loop could likely be rewritten along the lines of <code>for(arena_index = 0; arena_index &lt; N; arena_index++)</code>.</p>

<p>Keep in mind that even if you have a loop condition or loop iterator that needs to be accessed inside mutex locks, that necessarily doesn't mean that you have to write that part in the loop body. Something like <code>for(mystruct* ms=...; access(ms) &lt; count; ...</code> is possible, where <code>access</code> is a wrapper function containing the mutex lock/unlock around the variable.</p></li>
<li><p><code>t_chunk *chunk = (t_chunk *)((unsigned long)ptr - sizeof(t_chunk));</code> could be rewritten as <code>t_chunk *chunk = (t_chunk*)ptr - 1;</code></p></li>
</ul>
    </div>