<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Branch Complexity</h2>

<blockquote>
  <p><em>While my code works, I feel like it could be improved. Specifically, I
  don't care for all of the if checks, but I haven't been able to find
  another way to work it.</em></p>
</blockquote>

<p>If you could come up with a smart pattern to reduce the number of if-statements, be my guest. I think some sub patterns can be found, but there would be too many exceptions to the rule. The complexity of mapping the <code>LatLongEntry</code> items has to be stored somewhere.   </p>

<h3>Command Pattern</h3>

<p>Wouldn't you rather call..</p>

<pre><code>foreach (List&lt;LatLongEntry&gt; list in splitList)
{
    SetupCaseFileUpdateTransaction(transactionCode, fileType, fileNumber,
        commentText1, commentText2, transactionDate, username, password);

    for (int i = 0; i &lt; list.Count; i++)
    {
        commands[i].Execute(this, list[i]);
    }

    CallWebService();
}
</code></pre>

<p>than..</p>

<blockquote>
<pre><code>foreach (List&lt;LatLongEntry&gt; list in splitList)
{
    SetupCaseFileUpdateTransaction(transactionCode, fileType, fileNumber, 
        commentText1, commentText2, transactionDate, username, password);
    SetCode(1, list[0].Latitude);
    SetCode(2, list[0].Longitude);
    if (list.Count &gt; 1)
    {
        SetCode(4, list[1].Latitude);
        SetCode(5, list[1].Longitude);
    }
    if (list.Count &gt; 2)
    {
        SetCode(6, list[2].Latitude);
        SetCode(7, list[2].Longitude);
    }
    if (list.Count &gt; 3)
    {
        SetMisc(1, list[3].Latitude);
        SetMisc(2, list[3].Longitude);
    }
    if (list.Count &gt; 4)
    {
        SetMisc(3, list[4].Latitude);
        SetMisc(4, list[4].Longitude);
    }
    CallWebService();
}
</code></pre>
</blockquote>

<p>Let's assert your class provides public methods <code>SetCode</code> and <code>SetMisc</code>.</p>

<pre><code>// I don't know the class/interface of your container, but it doesn't really matter
interface IContainer
{
    void SetMisc(int index, double coordinate);
    void SetCode(int index, double coordinate);
}
</code></pre>

<p>We should provide a command pattern. A <code>LatLongEntryCommand</code> contains the indices for both the Latitude and Longitude and operations for posting updates.</p>

<pre><code>class LatLongEntryCommand
{
    public int LatitudeIndex { get; }
    public int LongitudeIndex { get; }
    public Action&lt;IContainer, int, double&gt; LatitudeOperation { get; }
    public Action&lt;IContainer, int, double&gt; LongitudeOperation { get; }

    public LatLongEntryCommand(
        int latitudeIndex, 
        int longitudeIndex,
        Action&lt;IContainer, int, double&gt; latitudeOperation,
        Action&lt;IContainer, int, double&gt; longitudeOperation)
    {
        LatitudeIndex = latitudeIndex;
        LongitudeIndex = longitudeIndex;
        LatitudeOperation = latitudeOperation;
        LongitudeOperation = longitudeOperation;
    }

    public void Execute(IContainer container, LatLongEntry entry)
    {
        LatitudeOperation(container, LatitudeIndex, entry.Latitude);
        LongitudeOperation(container, LongitudeIndex, entry.Longitude);
    }
}
</code></pre>

<p>Your container class should implement a lookup map of commands once at initialisation. The complexity of the original if-statements is moved to this place. I do feel this is a somewhat cleaner implementation than the original code. But is it really worth it?.. up to you to decide.</p>

<pre><code>// instantiate some local instance variable 'commands' at init

var setCode = new Action&lt;IContainer, int, double&gt;((c, i, l) =&gt; c.SetCode(i, l));
var setMisc = new Action&lt;IContainer, int, double&gt;((c, i, l) =&gt; c.SetMisc(i, l));

commands = new Dictionary&lt;int, LatLongEntryCommand&gt;
{
    { 0,  new LatLongEntryCommand(1, 2, setCode, setCode)},
    { 1,  new LatLongEntryCommand(4, 5, setCode, setCode)},
    { 2,  new LatLongEntryCommand(6, 7, setCode, setCode)},
    { 3,  new LatLongEntryCommand(1, 2, setMisc, setMisc)},
    { 4,  new LatLongEntryCommand(3, 4, setMisc, setMisc)}
};
</code></pre>
    </div>