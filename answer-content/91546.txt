<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Good job! Just some points:</p>

<h2>Bugs</h2>

<ol>
<li>Royal Flush Checking - <code>10 S</code>, <code>J S</code>, <code>Q S</code>, <code>K S</code>, <code>2 H</code> as flop and <code>8 S</code>, <code>A S</code> in the hand will return <code>false</code> if passed through <code>isARoyalFlush()</code>. What??? You seem to only be checking for Straights and Flushes with the flop.</li>
<li>Flush checking - If there is 6 Spades, or 6 Hearts or 6/7 whatever, then the <code>isAFlush()</code> method returns <code>false</code>. Change:</li>
</ol>

<blockquote>
<pre><code>return (noOfClubs == 5 || noOfSpades == 5 || noOfHearts == 5 || noOfDiamonds == 5);
</code></pre>
</blockquote>

<p>To:</p>

<pre><code>return (noOfClubs &gt;= 5 || noOfSpades &gt;= 5 || noOfHearts &gt;= 5 || noOfDiamonds &gt;= 5);
</code></pre>

<ol start="3">
<li><p>Straight Flush Checking - Two things gone wrong here.</p>

<p>a) You're only checking for a Straight Flush in the flop. What if the Hand contributes to a Straight Flush?</p>

<p>b) Don't feel bad about this one too much; this is a common mistake that even I made when writing a Hand Evaluator (I figured it out and decided it was way too hard; so I gave up). <code>3 S</code>, <code>4 S</code>, <code>5 S</code>, <code>6 S</code>, <code>10 S</code> as flop and <code>8 H</code>, <code>7 H</code> in the hand will return <code>true</code> (after you edit it so that it checks both the hand and the flop), even though you see that there is no Straight Flush.</p></li>
</ol>

<h2>Naming</h2>

<pre><code> public boolean isARoyalFlush(Card[] flop)
</code></pre>

<p>Why the "A" in the middle? I would remove it completely, as it both reduces readability and is doesn't add anything to the meaning.</p>

<p>Same with all the other ones.</p>

<h3>In <code>isARoyalFlush(Card[] flop)</code></h3>

<pre><code>switch (c.getRank().getRank())
</code></pre>

<p>What??? <code>.getRank().getRank()</code> confuses me. Might want to do some naming changes. I would simply remove <code>getRank()</code> in <code>Rank</code> and use <code>toString()</code> instead:</p>

<pre><code>@Override
public String toString() {
    return rank;
}
</code></pre>

<p>And maybe even change the naming for <code>rank</code>.</p>

<p>Also, checking for Straight beforehand is not necessary, as your code checks if it is a flush and later checks if it contains <code>10</code>, <code>J</code>, <code>Q</code>, <code>K</code>, and <code>A</code> anyways. <code>isStraight()</code> will take about the same time to run as <code>isRoyalFlush()</code>, making the possible performance gain from a <code>false</code> evaluation not worth it.</p>

<h2>Others</h2>

<h3>In <code>isAStraightFlush(Card[] flop)</code></h3>

<blockquote>
<pre><code>private boolean isAStraightFlush(Card[] flop) {
    if (isAFlush(flop) &amp;&amp; isAStraight(flop)) {
        return true;
    } else {
        return false;
    }
}
</code></pre>
</blockquote>

<p>That could easily be:</p>

<pre><code>private boolean isAStraightFlush(Card[] flop) {
    return isAFlush(flop) &amp;&amp; isAStraight(flop);
}
</code></pre>

<p>Though, as mentioned in the Bugs section, it doesn't really work.</p>

<h3>In <code>isThreeOfAKind(Card[] flop)</code></h3>

<p>Hmm... Here you don't do <code>isAThreeOfAKind(Card[] flop)</code>...</p>

<p>Also, here:</p>

<blockquote>
<pre><code>while (i &lt; allCards.length &amp;&amp; !isThreeOfAKind) {
    cardRepeats = 1;
    while (k &lt; allCards.length &amp;&amp; !isThreeOfAKind) {
        if (allCards[i].getRank().getValue() == allCards[k].getRank().getValue()) {
            cardRepeats++;
            if (cardRepeats == 3) {
                isThreeOfAKind = true;
            }
        }
        k++;
    }
    i++;
}
return isThreeOfAKind;
</code></pre>
</blockquote>

<p>You can just as easily return in the inner <code>if</code> statement immediately, without going through the checks in the loop:</p>

<pre><code>while (i &lt; allCards.length) {
    cardRepeats = 1;
    while (k &lt; allCards.length) {
        if (allCards[i].getRank().getValue() == allCards[k].getRank().getValue()) {
            cardRepeats++;
            if (cardRepeats == 3) {
                return true;
            }
        }
        k++;
    }
    i++;
}
return false;
</code></pre>

<h3>In <code>isTwoPair(Card[] flop)</code></h3>

<p>See all advice in <code>isThreeOfAKind(Card[] flop)</code>.</p>

<h3>In <code>isPair(Card[] flop)</code></h3>

<p>Again, see all advice in <code>isThreeOfAKind(Card[] flop)</code>.</p>

<h3>In <code>isAFourOfAKind(Card[] flop)</code></h3>

<p>Not the <strong><em>A</em></strong> again...</p>

<p>See second piece of advice in <code>isThreeOfAKind(Card[] flop)</code>.</p>

<h2>Good Job!</h2>

<p>Hand Evaluators are very hard to implement. It's very courageous of you to tackle such a challenging task (as you can see, there are quite a few bugs). Good luck improving your code, and I hope to see a follow-up after the bugs are fixed!</p>
    </div>