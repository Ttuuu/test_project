<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Please note that on Code Review we actually <em>review all</em> of your code. So, even though you concentrated on one aspect; The most efficient query, I have to discuss more than that. I'll have to accept that you left out the PHP code, which seems to be an integral part of this query. I have work with what you have given.</p>

<h1>The query</h1>

<p>Let me first answer your question about the query. Yes, it can be more efficient if you loose the sub-queries. I will make this a two step process, which is easy when you're using PHP. In the first step you get the the id's of the persons that match the search: </p>

<pre><code>SELECT
  id
FROM people
JOIN phones
  ON phones.person_id = id AND
     phones.number LIKE ? 
JOIN emails
  ON emails.person_id = id AND
     emails.email LIKE ?
JOIN addresses
  ON addresses.person_id = id AND
     addresses.address LIKE ?
WHERE name LIKE ?
GROUP BY id
ORDER BY id DESC;
</code></pre>

<p>Then when you go through the results of this query you ask for the details of each person:</p>

<pre><code>SELECT
  name,
  group_concat(
    DISTINCT concat(number, ' (', phones.description, ')')
    ORDER BY phones.description
    SEPARATOR '&lt;br&gt;'
  ) AS phones,
  group_concat(
    DISTINCT concat(email, ' (', emails.description, ')')
    ORDER BY emails.description
    SEPARATOR '&lt;br&gt;'
  ) AS emails,
  group_concat(
    DISTINCT concat(address, ' (', addresses.description, ')')
    ORDER BY addresses.description
    SEPARATOR '&lt;br&gt;'
  ) AS addresses
FROM people
JOIN phones ON phones.person_id = id 
JOIN emails ON emails.person_id = id 
JOIN addresses ON addresses.person_id = id 
WHERE id = ?;
</code></pre>

<p>Now you might think this is much worse than what you had. You had one query, and I have two of which one is repeated. This cannot possibly be better? Well, you're partially right. It is only better because it is simpler. It might even be faster. Why? Well, looking for single rows, with an indexed column, can be very fast. So the slower query is the first one, not the second one that is repeated. And my slow query is faster than yours because it doesn't have all the sub-queries. It is simpler. More over, the second query shouldn't be repeated that often. You don't want to present an user with hunderds of results, one page, with a maximum of about 10 to 20 results will do. If you really want to you could get these in one query with:</p>

<pre><code>SELECT
  name,
  group_concat(
    DISTINCT concat(number, ' (', phones.description, ')')
    ORDER BY phones.description
    SEPARATOR '&lt;br&gt;'
  ) AS phones,
  group_concat(
    DISTINCT concat(email, ' (', emails.description, ')')
    ORDER BY emails.description
    SEPARATOR '&lt;br&gt;'
  ) AS emails,
  group_concat(
    DISTINCT concat(address, ' (', addresses.description, ')')
    ORDER BY addresses.description
    SEPARATOR '&lt;br&gt;'
  ) AS addresses
FROM people
JOIN phones ON phones.person_id = id 
JOIN emails ON emails.person_id = id 
JOIN addresses ON addresses.person_id = id 
WHERE FIND_IN_SET(id, ?);
</code></pre>

<p>Where <code>FIND_IN_SET()</code> contains the comma seperated id's of the persons you want to show on a page.</p>

<h1>Search method</h1>

<p>You seem to use separate search fields for the name, phone number, email and address tables. This might be useful, but I think most users would like a <em>single</em> search field to search through all the data in the database tables. This will become more obvious, the more fields you want to make searchable. Yes, it is nice to be able to search for a combination of a name and an email address, but often users don't need this. A single search field is easy to understand, and often what users expect. Check how <a href="https://support.google.com/websearch/answer/2466433" rel="nofollow noreferrer">Google let's you refine web searches</a>.</p>

<h1>Efficiency</h1>

<p>The query above is looking through four tables. This is fine, unless those tables get very large, or you want to search through many more tables. One method of gaining more efficiency is by making a 'search summary' column in the <code>people</code> table. Whenever a detail of a person changes, the summary for that person should be updated, but that can be done quickly since it only involves one person. With such a summary you will only have to look in one column, in one table, to perform a search through the whole database. More advanced search algorithms exist, but I'll leave it at this. My point is, you have to think about the future of your database <em>now</em>. If there is even a slight possibility it will grow a lot, then you need to take that into account at the design stage. </p>

<h1>Primary keys</h1>

<p>The tables <code>phones</code>, <code>emails</code> and <code>addresses</code> are missing unique primary keys. You often need one, for instance to join tables, or for something as simple as being able to edit rows in <a href="https://www.phpmyadmin.net" rel="nofollow noreferrer">PHPMyAdmin</a>. I'm not saying you should have them, but in practice they are often handy.</p>

<h1>Naming consistency</h1>

<p>I notice that you use plurals for database table names. Most people will argue to use <a href="https://stackoverflow.com/questions/338156/table-naming-dilemma-singular-vs-plural-names">singulars</a>. What I really have a problem with is a table called <code>people</code> and then a foreign key called <code>person_id</code>. Either call the table <code>person</code> or the key <code>people_id</code>. No matter what you prefer, you have to be consistent about it.</p>

<p>When I work with databases I find it often confusing when there are many tables with the same column names in it. I always try to choose very descriptive and unique names. So instead of <code>number</code> I would choose <code>phoneNo</code>, and instead of <code>description</code> I would use <code>connectionType</code> and <code>phoneLocation</code>. That way you would always know which column it is, and you would also not mix the connection type and phone location in one column. And if similary named columns, in different tables, really contain the same information then it is probably time to <a href="https://www.guru99.com/database-normalization.html" rel="nofollow noreferrer">normalize the database</a>.</p>

<h1>Addresses</h1>

<p>Hardly anybody stores a whole address in a single column. It is almost always useful to separate them into meaningful items. Before you know it, you will want to use an API that requires you to supply a ZIP code of a person. I got caught out once by an shipping API that insisted on a separate house number. I had to split the addresses of thousands of records, and believe me, that was no fun.</p>

<p></p><h1>HTML in queries</h1>
I noticed that you have some HTML in your query. That is highly unusual. Such a  query is part of the data management in your <em>model</em>, not part of the final output <em>view</em> to the user. See the <a href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller" rel="nofollow noreferrer">MVC pattern</a>. <a href="https://i.stack.imgur.com/uZoZc.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/uZoZc.png" alt="MVC pattern"></a> 
 I know that patterns are no fun, but believe me, it is useful, in the long run, to separate your search query from the HTML output to the user. For instance, if you want to output the result of the search in anything else than HTML. 
    </div>