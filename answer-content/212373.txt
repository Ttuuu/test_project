<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Optimisation</h2>

<blockquote>
  <p>I use a <code>Stack</code> where I push my <code>Squares</code>.</p>
</blockquote>

<p>A stack is the correct data structure when you want last-in-first-out behaviour. Is that the behaviour you need here?</p>

<blockquote>
  <p>It works great until 10<sup>6</sup> (takes 5 minutes to run).</p>
</blockquote>

<p>That is a long way from "<em>great</em>". 10<sup>6</sup> shouldn't take 10 seconds. Use the right data structure for the task, which here is something with amortised constant time insertion and lookup.</p>

<h2>Other notes</h2>

<blockquote>
<pre><code>public class Square { 
        public int x, y;
        // White = 0, Black = 1
        public int color = 0;
}
</code></pre>
</blockquote>

<p>Why are all of the fields mutable? Why is there no explicit constructor? Rather than using a 32-bit type to store a single bit and needing to document the legal values, why not use a 1-bit type (i.e. <code>bool isBlack</code>)?</p>

<hr>

<blockquote>
<pre><code>int color = 0;
</code></pre>
</blockquote>

<p>Does this need such a wide scope?</p>

<hr>

<blockquote>
<pre><code>for (int i = 0, counter = 0; i &lt; 10000000; ++i, ++counter)
</code></pre>
</blockquote>

<p>What is the purpose of <code>counter</code>? As far as I can tell, it isn't used anywhere.</p>

<hr>

<blockquote>
<pre><code>        squares.Push(new Square() { x = 0, y = 1, color = 1 });
</code></pre>
</blockquote>

<p>...</p>

<blockquote>
<pre><code>        squares.Push(CreateSquare(x, y, 1));
</code></pre>
</blockquote>

<p>Why the discrepancy?</p>

<hr>

<blockquote>
<pre><code>        orientation = Rotate(orientation, color == 0 ? true : false);
</code></pre>
</blockquote>

<p><code>condition ? true : false</code> is an unnecessarily long way of writing <code>condition</code>.</p>

<hr>

<blockquote>
<pre><code>    if (orientation == Orientation.NORTH) y += 1;
    if (orientation == Orientation.EAST) x -= 1;
    if (orientation == Orientation.WEST) x += 1;
    if (orientation == Orientation.SOUTH) y -= 1;
</code></pre>
</blockquote>

<p>This is precisely the kind of thing that <code>switch</code> statements were invented to handle.</p>

<hr>

<blockquote>
<pre><code>    // if null create one and rotate
    if (s == null)
    {
        squares.Push(CreateSquare(x, y, 1));
        orientation = Rotate(orientation, true);
        steps.Add(orientation);
    }else if(s.color == 1)
    {
        s.color = 0;
        orientation = Rotate(orientation, false);
        steps.Add(orientation);
    }else
    {
        s.color = 1;
        orientation = Rotate(orientation, true);
        steps.Add(orientation);
    }
</code></pre>
</blockquote>

<p>Don't repeat yourself. This could be refactored as</p>

<pre><code>    if (s == null)
    {
        s = new Square { x = x, y = y, color = 0 };
        squares.Push(s);
    }

    orientation = Rotate(orientation, s.color == 0);
    steps.Add(orientation);
    s.color = 1 - s.color;
</code></pre>

<hr>

<blockquote>
<pre><code>            blackSquaresAt100k = squares.Where(sqa =&gt; sqa.color == 1).Count();
</code></pre>
</blockquote>

<p><code>Count</code> has an overload which takes a condition, so <code>enumerable.Where(foo).Count()</code> can be refactored to <code>enumerable.Count(foo)</code>.</p>
    </div>