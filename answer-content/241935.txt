<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Welcome to Code Review, the first thing I noticed in your code is this:</p>

<blockquote>
<pre><code>public static void main (String[] args) throws java.lang.Exception {
    Scanner obj = new Scanner(System.in);
    //later in your code in a for cycle
    Scanner obj1 = new Scanner(obj.nextLine());
}
</code></pre>
</blockquote>

<p>You don't need to declare <code>main</code> method throws <code>Exception</code> and you have to avoid the resource leak created by not closing the scanner <code>obj</code> and creation of a new scanner for every iteration of the loop. You can rewrite your code in this way using <a href="https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html" rel="nofollow noreferrer">try with resources</a>:</p>

<pre><code>public static void main (String[] args) {
    try (Scanner sc = new Scanner(System.in)) {
        int t = sc.nextInt();
        for(int i = 0;i &lt; t;++i) {
            //here the core code
        }
    }
}
</code></pre>

<p>You are using <code>StringBuffer reverse</code> to reverse a <code>BigInteger</code> converted to a <code>String</code>; to reverse an <code>int</code> or a <code>BigInteger</code> you can rely on mod and division by 10 knowing that division by 10 always returns the last digit of the number:</p>

<pre><code>val = 24  //I want to reverse it to number  42
variables val = 24 reverse = 0;

remainder = 24 % 10 , reverse = reverse * 10 + remainder equal to 0 * 10 + 4 = 4,
val = val / 10 equal to 2

remainder = 2 % 10 , reverse = reverse * 10 + remainder equal to 4 * 10 + 2 = 42,
val = val / 10 equal to 0
</code></pre>

<p>This can be converted in code with the method <code>reverseBigInteger(BigInteger val)</code>:</p>

<pre><code>private static BigInteger reverseBigInteger(BigInteger val) {
    BigInteger reverse = BigInteger.ZERO;
    while (val.compareTo(BigInteger.ZERO) == 1) {
        BigInteger remainder = val.mod(BigInteger.TEN);
        reverse = reverse.multiply(BigInteger.TEN);
        reverse = reverse.add(remainder);
        val = val.divide(BigInteger.TEN);
    }
    return reverse;
}
</code></pre>

<p>Then you can rewrite the code of your class in the following way:</p>

<pre><code>public class Main {

    public static void main (String[] args) {
        try (Scanner sc = new Scanner(System.in)) {
            int t = sc.nextInt();
            for(int i = 0; i &lt; t; ++i) {
                BigInteger i1 = sc.nextBigInteger();
                BigInteger i2 = sc.nextBigInteger();
                BigInteger reverse1 = reverseBigInteger(i1);
                BigInteger reverse2 = reverseBigInteger(i2);
                BigInteger sum = reverse1.add(reverse2);
                BigInteger reverseSum = reverseBigInteger(sum);
                System.out.println(reverseSum);
            }
        }
    }

    private static BigInteger reverseBigInteger(BigInteger val) {
        BigInteger reverse = BigInteger.ZERO;
        while (val.compareTo(BigInteger.ZERO) == 1) {
            BigInteger remainder = val.mod(BigInteger.TEN);
            reverse = reverse.multiply(BigInteger.TEN);
            reverse = reverse.add(remainder);
            val = val.divide(BigInteger.TEN);
        }
        return reverse;
    }
}
</code></pre>
    </div>