<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>General naming guidelines suggest that an async method should end its name with "Async", so the method name should be <code>RevalidateAccountAsync</code>.</p>

<p>Some would argue that a underscore prefix should never be used for naming of any variables.  For those that do allow underscore prefixes, it should only be for class-level variables and never used for variables local to a given method.</p>

<p>When comparing or manipulating 2 <code>DateTime</code> objects, the proper way to do that is to be sure that both have the same <code>Kind</code>.  Oddly enough, your code does that since you jump through so many hoops to create new <code>DateTime</code> objects with <code>Kind</code> of <code>Unspecified</code>.</p>

<p><code>expirationDate</code> is a misleading name since it is not a date.  It is a <code>TimeSpan</code>.</p>

<p>After checking <code>expirationDate.Days &lt;= 7</code>, there is no need to check <code>IsVisibleValidateText</code> since it will always be true at that point.</p>

<p>Your code looks to be twice as long as it needs to be because of all the manipulation of <code>DateTime</code> and <code>string</code>.  For example, to get today's date should only be 1 line:</p>

<p><code>DateTime todayDate = DateTime.Today; \\Kind is Local</code></p>

<p><code>expDate</code> could use <code>DateTime.Parse</code> or <code>Convert.ToDateTime</code>.  However, you should also set it's Kind because as it is it will be <code>Unspecified</code> unless the string contains any time zone offset.  Example setting it to Local:</p>

<p><code>DateTime expDate = DateTime.SpecifyKind(Convert.ToDateTime(_expDateFromPersistent), DateTimeKind.Local);</code></p>

<p>The alternative would be to keep <code>expDate</code> as <code>Unspecified</code> but then make <code>todayDate</code> also <code>Unspecified</code>.</p>

<p><code>DateTime todayDate = DateTime.SpecifyKind(DateTime.Today, DateTimeKind.Unspecified);</code></p>

<p>Since it looks like you are interested in dates starting a midnight, skip the slower string manipulation and instead use the <code>DateTime.Date</code> property.  See help at <a href="https://docs.microsoft.com/en-us/dotnet/api/system.datetime.date?view=netframework-4.8" rel="nofollow noreferrer">this link</a>.  Example:</p>

<p><code>TimeSpan expirationDate = expDate.Date - todayDate;</code></p>

<p>Which gets rid of all the slower and unneeded string variables, both dates above have the same <code>Kind</code>, and both are set to midnight.</p>
    </div>