<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Looks like a lot of extra code for very little gain, considering you can simply call <code>iter()</code> on an iterable object to return an iterator:</p>

<pre><code>&gt;&gt;&gt; c = C()
&gt;&gt;&gt; i = iter(c)
&gt;&gt;&gt; next(i)
0
&gt;&gt;&gt; next(i)
1
&gt;&gt;&gt; next(i)
2
&gt;&gt;&gt; c.state
1
</code></pre>

<p>Also, note your new <code>class C</code> can have more than one iterator, with only 1 "state".  The first iterator is created automatically by the constructor, for use with the <code>next(c)</code> call.  Additional iterators are created each time you start looping over <code>c</code>, since <code>iter(c)</code> gets called and returns a new generator!</p>

<pre><code>&gt;&gt;&gt; c = C()
&gt;&gt;&gt; next(c)
0
&gt;&gt;&gt; print(next(c), c.state)
1 0
&gt;&gt;&gt; print(next(c), c.state)
2 1
&gt;&gt;&gt; for x in c: print(x, c.state)       # Start a new iteration
...
0 1
1 0
2 1
3 2
&gt;&gt;&gt; print(next(c), c.state)             # Continue original iteration
3 2
&gt;&gt;&gt; next(c)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 9, in __next__
StopIteration
</code></pre>
    </div>