<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>create Subclasses / interfaces</h2>
<p>if you think there is a difference <strong>in Behaviour</strong> then there is a need for a seperate class - if you think some classes have something in common, extract an interface!</p>
<p>so create a class <code>Directory</code> and a class <code>File</code>. Let both classes implement the <code>Node</code> Interface. (Note - in Java we don't use the <a href="https://en.wikipedia.org/wiki/Hungarian_notation" rel="nofollow noreferrer">hungarian notation</a> )</p>
<h2>inconsistency // oo-abuse</h2>
<p>what's the purpose of <code>Node</code> if you don't use it? compare these two approaches</p>
<ol>
<li><code>public List&lt;String&gt; ls(String path)</code> vs.</li>
<li><code>public List&lt;Node&gt; ls(Node path)</code></li>
</ol>
<p>in <strong>case 1</strong> it is absolutly not clear how the <code>String path</code> should look like, especially since it is OS-dependant. (what would <code>String[] subdirs = filePath.substring(1).split("/");</code> on other OS do?) It is also not clear what kind of output this Method delivers</p>
<p>in <strong>case 2</strong> we have cleary declared what kind of input we expect, (even though i'm missing a <code>parent</code> attribut - that would ease up the searching) - we reduce the problem with different OSes to the single place where it belongs: at the constructor of the Node (<a href="https://clean-code-developer.com/grades/grade-2-orange/#Single_Responsibility_Principle_SRP" rel="nofollow noreferrer">Single responsibility</a>). And we have a very accurate output (compared to the <code>List&lt;String&gt;</code> from case 1 - how would we know if a <code>String</code> is a <code>Directory</code> or a <code>File</code>? <code>Node</code> already provides all these information!)</p>
<h2>File System vs. Editor</h2>
<p>i'm not sure how <code>addContentToFile()</code> and <code>readContentFromFile</code> match for a <code>FileSystem</code> - in my opinion these two methods belong to an <code>Editor</code>/<code>Viewer</code> and not the the File System - create an Editor (an <code>Editor</code> class)!
think of the possibilities: you can then provide different Editors for different file Types?</p>
<h2>Error Handling</h2>
<p>i would expect a file system to be a bit more chatty about <code>IllegalArgumentException</code> (why are none thrown? how is such case treated?)</p>
    </div>