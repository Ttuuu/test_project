<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Do not use recursion for simple use cases like this one (OP has asked about this in the original, unedited question)!
It can be done simply, as shown below.
First, a walkthrough:</p>

<p>A construct like</p>

<pre class="lang-py prettyprint-override"><code>    if n % 2 != 0:
        return False
    if n % 2 == 0:
</code></pre>

<p>can be simplified by omitting the second <code>if</code> statement, since you return early anyway.
This saves a whole level of indentation:</p>

<pre class="lang-py prettyprint-override"><code>    if n % 2 != 0:
        return False
    count_1 = 0
    ...
</code></pre>

<p>If you did not return and thus exit but instead did something else, use an <code>else</code> clause to avoid repeating yourself, which might introduce subtle errors and bugs.
Instead do:</p>

<pre class="lang-py prettyprint-override"><code>   if n % 2 != 0:
       &lt;something other than return&gt;
   else:
       count_1 = 0
</code></pre>

<hr>

<p>Further, this</p>

<pre class="lang-py prettyprint-override"><code>    if count_1 == count_2:
        return True
    else:
        return False
</code></pre>

<p>can just be</p>

<pre class="lang-py prettyprint-override"><code>return count_1 == count_2
</code></pre>

<hr>

<p>In your code, you loop over the list manually.
This can be replaced by (faster) list comprehension.
In fact, it can be a one-liner altogether, while still being readable:</p>

<pre class="lang-py prettyprint-override"><code>def balanced(lst):
    return len([number for number in lst if number % 2 == 0]) == len(lst) / 2
</code></pre>

<p>This works without your <code>if n % 2 != 0</code> guard clause, because an uneven list length divided by <code>2</code> (<code>len(lst) / 2</code>) will never return an integer (gives <code>float</code> with non-zero decimal part), and therefore always compare unequal to the left side.</p>

<p>The left side is a list comprehesion that simply gets all even numbers in the sequence.
It could also grab all uneven ones.
This will always be an integer.</p>

<p>This solution is faster and reasonably Pythonic.
It does not treat the special case of a list of odd length.</p>

<p>Keeping it speeds up the code however.
The following is roughly 20% faster than the above one-liner:</p>

<pre class="lang-py prettyprint-override"><code>from timeit import timeit

def balanced(lst):
    n = len(lst)
    if n % 2 != 0:
        return False
    return len([number for number in lst if number % 2 == 0]) == n / 2

def main():
    test_lists = [
        [5, 1, 0, 2],
        [5, 1, 0, 2, 11],
        [],
        [1, 2, 3, 5, 6, 8, 5, 9],
        [2, 4, 5, 7],
        [1, 2, 4, 4],
        [1, 2, 3],
        [1, 2],
        [1],
        [0],
        [1, 1, 1, 1],
        [1, 1, 2, 2],
        [1, 2, 3, 4, 5],
        # ["hello"], # error
    ]
    for test_list in test_lists:
        # print(balanced(test_list), test_list, sep=":\t")
        balanced(test_list)

print(timeit("main()", globals=globals()))
</code></pre>

<p>Uncommenting <code>print(balanced(test_list), test_list, sep=":\t")</code> and just running <code>main()</code> without timing, it prints:</p>

<pre class="lang-py prettyprint-override"><code>True:   [5, 1, 0, 2]
False:  [5, 1, 0, 2, 11]
True:   []
False:  [1, 2, 3, 5, 6, 8, 5, 9]
True:   [2, 4, 5, 7]
False:  [1, 2, 4, 4]
False:  [1, 2, 3]
True:   [1, 2]
False:  [1]
False:  [0]
False:  [1, 1, 1, 1]
True:   [1, 1, 2, 2]
False:  [1, 2, 3, 4, 5]
</code></pre>
    </div>