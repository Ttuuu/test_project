<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Threshold</h2>

<p>Having static variables can cause issues with reusability and threading.  I think having a default minimum threshold is reasonable.  However, I'd consider removing the ability to change this default and make it possible to set a threshold when constructing the builder.  This gives more control to the point that a sample is being constructed.  It also makes it easier to use the class from different locations within the same application that may have different requirements around the number of observations needed.</p>

<h2>Streams</h2>

<p>Your buildSample creates a copy of observations as an array of <code>Double</code>, then copies it into an array of <code>double</code> in order to pass it to your sample class.  Rather than doing that, you might want to consider using the stream api to simplify the code.  Instead of:</p>

<blockquote>
<pre><code>Double[] rawOutput = observationList.toArray(new Double[count]);
double[] observations = new double[count];

for (int i = 0; i &lt; count; i++) {
    observations[i] = rawOutput[i];
}
</code></pre>
</blockquote>

<p>You end up with:</p>

<pre><code>double[] observations = observationList.stream().mapToDouble(d-&gt;d).toArray();
</code></pre>

<h2>Boxing</h2>

<p>Your builder is based around a reference type <code>Double</code>, however the way that you add to the list is based around a native type <code>double</code>.  Combine this with an <code>addObservations</code> that allows a collection of reference types and you're iterating through a list of <code>Double</code> converting it to <code>double</code> to process it for adding then back to <code>Double</code> again to put it in the list.  This feels wrong to me, I'd code the addObservation around the type it needs for storage, or provide an overload so that you can call to reduce the amount of boxing/unboxing, particularly from within a loop.</p>

<h2>Builder responsibility / Constructor responsibility</h2>

<p>Your <code>Sample</code> class has a package private constructor, so my assumption is that your intention is to always use the <code>SampleBuilder</code> for construction.  If this is the case then it's unclear which class is responsible for the sample size.  The <code>buildSample</code> method throws an exception:</p>

<blockquote>
<pre><code>if (count &lt; Sample.getThreshold()) {
    throw new IllegalStateException("The sample does not contain enough observations.");
}
</code></pre>
</blockquote>

<p>In the <code>Sample</code> constructor throws a different exception: </p>

<blockquote>
<pre><code>if (observations.length &lt; threshold) {
    throw new IllegalArgumentException(
        "The sample size is the less than the threshold: "
        + observations.length + " &lt; " + threshold
    );
}
</code></pre>
</blockquote>

<p>This seems like unnecessary confusion.  Personally, I'd consider moving the constructor validation out of the <code>Sample</code> class, so that the complexity of validating the number of samples / creating a valid unit / name sits within the builder class and the <code>Sample</code> can assume it's being used correctly, since it's internal.  If your intention is to reuse the <code>Sample</code> class with other things in the same package, then I'd remove all of the validation from the builder and just let the <code>Sample</code> constructor handle it.  I would however try to avoid doing the same validation twice in different places, particularly with different outcomes.</p>

<h2>Unit Tests</h2>

<p>Generally you want to unit tests to be fast, isolated and repeatable.  Your manipulation of the shared static threshold can break the isolation.  </p>

<p>Your use of random to generate your samples can break the repeatability of your tests.  Whilst sending in a random sample and getting out the right answer can be comforting, if you do find an issue, you're going to want to investigate and fix it.  At the moment, you'll get an assertion error, telling you for example that two means don't match.  Without information about the sample, it's going to be very difficult for you to repeat the test, you'll just know there's <em>something</em> wrong in an unknown scenario.  So, if you do want to use random samples, make sure that if an error occurs you feedback what sample you were using.</p>

<p>A lot of your tests run 100 times, with different sample sizes.  This is obviously going to be slower than running each test case a lower number of times.  If I run an operation against sample sizes of 101 and 102, I'd expect them both to work, however I wouldn't usually write a unit test for both values, I'd focus on areas that I think might be relevant (for example, empty sample, below threshold, at threshold, just over threshold, well over threshold, possibly a really large sample).  This means less wasted cycles and again, improved repeatability.</p>

<p><strong>assertEquals(expected, actual)</strong></p>

<p>You're using assert the wrong way round, which will be misleading if you encounter any errors, it should be the expected argument first.</p>

<p><strong>Builder / no builder</strong></p>

<p>Some of your tests use builders, some directly create a sample.  If the intention is for the builder to always be used from client code, then it should be used for all of your unit tests, you shouldn't short-cut it and create a <code>Sample</code> class without the builder because the test becomes unrealistic, it's on a par with calling private methods.  There's little point testing a class in a state that clients can't get it into.</p>
    </div>