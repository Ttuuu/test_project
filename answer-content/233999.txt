<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<p>I don't like how I have to invoke this with an empty list i.e.</p>
<pre><code>let assignedJobs = AssignJobs crewMembers jobs []
</code></pre>
<p>Is there another way? Is recursion the best solution at all (presuming I'm not allowed to loop)?</p>
</blockquote>
<p>The 'empty list' initiation is pretty standard in F#. The nice thing about it is if you load a list of currently assigned jobs from a data-source (database, API, etc.) you can seed the function with the current assignments.</p>
<p>Recursion is perfectly fine here, and in fact it's the route I would go to solve this issue. That said, I would actually consider an <code>unfold</code> as well, which would remove the empty-list requirement.</p>
<p>Basically, <code>unfold</code> takes some seed data (here it would be the <code>crewMembers</code> and <code>jobs</code> lists) and it creates a sequence/list/array from that seed data. (It's the opposite of <code>fold</code>: whereas <code>fold</code> creates a single result from a list, even if that's another list, <code>unfold</code> takes a single result and creates the original list.)</p>
<p>With regard to your current method, I have minimal comments. This is quite idiomatic F#, and follows most of the standard themes we use.</p>
<blockquote>
<pre><code>let AssignJob job crewMembers = 
    let bestCrewMember = crewMembers |&gt; Seq.sortWith crewMemberComparison
                                     |&gt; Seq.head
    {CrewMember = bestCrewMember; Job = job}
</code></pre>
</blockquote>
<p>I'm not a big fan of your formatting, but beyond that I see no issues here. Personally, I would break it down as follows:</p>
<pre><code>let AssignJob job crewMembers = 
    let bestCrewMember = 
        crewMembers
        |&gt; Seq.sortWith crewMemberComparison
        |&gt; Seq.head
    { CrewMember = bestCrewMember; Job = job }
</code></pre>
<p>(I don't like leaving unnecessary whitespace on the left â€” makes it harder to find the code you need to see.)</p>
<p>Also, I would name that <code>assignJob</code> as is normal F# parlance for function names.</p>
<p>Lastly, you <em>could</em> take advantage of <code>Seq.exept</code> instead of <code>Seq.filter ((&lt;&gt;) ...)</code>, but you need to instantiate an extra list or array to do that, so I'm not sure if it's worth it.</p>
    </div>