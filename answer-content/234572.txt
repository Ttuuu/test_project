<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First a few suggestions to your design.
You are effectively trying to represent list of small numbers as <code>String</code>, with no actual meaning (at least that's how I understood it).
I'd consider:</p>

<ul>
<li>Represent it for what it is - list of small numbers could be represented as byte array. That seems a lot more natural and convenient.</li>
<li>Use some simpler mapping, if it doesn't matter what kind of character is the result. If numbers really are in range between 0 and 32 and not much higher, I'd go for mapping function, that for example adds 65 (and substracts 65 in reverse). That mapping function is really simple and you don't need any kind of map. Your code would be reduced only to initial tokenization basically. <code>00</code> becomes <code>A</code>, <code>30</code> becomes <code>_</code> according to their ASCII codes (+65).</li>
</ul>

<p>In case you wanna keep your String representation, here are my points to your code:</p>

<p><code>getValueMap</code></p>

<ul>
<li>Names <code>getValueMap</code> name and <code>lettersFirst</code> don't really say what much about what do they do. </li>
<li>There's no point to recalculate reverse map everytime. Flag parameters with this kind of <code>if</code> are typical code smell and bad practice. </li>
<li>I suggest creating 2 module variables <code>codesToCharacters</code> (original map) and <code>charactersToCodes</code> (once pre-calculated) instead. </li>
</ul>

<p><code>decode</code></p>

<ul>
<li>I'd love if this function was just mapping encoded data to decoded data based on mapping function. </li>
<li>Not sure, why is there that <code>if</code>. I think you are trying to check, if current character is letter or not and if so, map it, otherwise use the character. That took me a while to understand. If there was really need, I would extract that to function with propper name (like <code>isLetter</code>) to increase readability.</li>
<li>Anyway, why even doing that? Why not instead look into the map and if map contains key, use map value, otherwise use original character.</li>
</ul>

<p>Function would look something like (pseudocode, not tested):</p>

<pre><code>function decode(encoded) {

    return encoded.split("").map(
        c =&gt; {
            charactersToCodes.hasKey(c) ? charactersToCodes[c] : c
        }).join()

}
</code></pre>

<p><code>encode</code> would be on same principle, only difference is, that you need to tokenize it correctly first and then map :)</p>
    </div>