<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Sorry for poking and old dog but here is an idea, serialization.</p>

<p>This is not about right or wrong but my preferred solution is to, as far as possible, separate data from logic. The complex solution would be to create a class library for a HTML Document Object Model.</p>

<p>But on the other end of the spectrum is the simple solution with regular arrays and a (slightly evil) recursive function.
Let's define keys as tags and values as content. An example of some data:</p>

<pre><code>$data = array(
    'doctype',
    'html' =&gt; array(
        'head' =&gt; array(
            'meta charset="utf8"' =&gt; NULL,
            'title' =&gt; 'The page title',
        ),
        'body' =&gt; array(
            'div#header' =&gt; array('h1' =&gt; 'Page title'),
            'div#content' =&gt; 'Some content'
        )
    )
);
</code></pre>

<p>The generalized (but evil) recursive function where most of the magic happends:</p>

<pre><code>function atrans($key, $value, &amp;$output, $keyfilter=NULL, $valfilter=NULL, $keyendfilter=NULL, $pretty=FALSE){
    static $nest = 0;
    $nest++;
    $ind = $pretty ? str_repeat(" ", $nest) : '';
    if($key == NULL){
        if(is_array($value)){
            foreach($value as $key =&gt; $val){
                atrans($key, $val, $output, $keyfilter, $valfilter, $keyendfilter, $pretty);
            }
        }else{
            $output[] = $ind . (is_callable($valfilter) ? $valfilter((string)$value) : $value);
        }
    }elseif(is_integer($key)){
        if(is_array($value)){
            atrans(NULL, $value, $output, $keyfilter, $valfilter, $keyendfilter, $pretty);
        }else{
            $output[] = $ind . (is_callable($valfilter) ? $valfilter((string)$value) : $value);
        }
    }else{
        $keystart = is_callable($keyfilter) ? $keyfilter( $key ) : $key;
        $keyend = is_callable($keyendfilter) ? $keyendfilter( $key ) : '';

        if(is_array($value)){
            $output[] = $ind . $keystart;
            atrans(NULL, $value, $output, $keyfilter, $valfilter, $keyendfilter, $pretty);
            if(!empty($keyend)) $output[] = $ind . $keyend;

        }elseif($value !== NULL){
            $valstr = is_callable($valfilter) ? ($valfilter)((string)$value) : $value;
            $output[] = $ind . $keystart . $valstr . $keyend;
        }else{
            $output[] = $ind . $keystart;
            // $value is NULL, $endfilter will not run
        }
    }
    $nest--;
}
</code></pre>

<p>And then a specialization for HTML output:</p>

<pre><code>// HTML specialization of the above
function array_to_html($arr, $pretty=FALSE){
    $openTag = function($key){
        $key = preg_replace('/#([a-z][a-z0-9\\-]*)$/i', ' id="$1"', $key);
        $key = preg_replace('/\\.([a-z][a-z0-9\\-]*)$/i', ' class="$1"', $key);
        // basic validation of attribute syntax
        if(preg_match('/^(\!?[a-z][a-z0-9\\-]*)(\\s[a-z][a-z0-9\\-\\.@]*(=[a-z0-9\\-\\.]+|=\'[^\']*?\'|="[^"]*?"))*$/i', $key) !== 1)
            echo 'TAG ERROR: ' . $key . '&lt;br&gt;';
        return "&lt;$key&gt;";
    };
    $valueFilter = function($value){
        $expand = array('doctype' =&gt; '&lt;!DOCTYPE html&gt;');
        $value = isset($expand[$value]) ? $expand[$value] : $value;
        if(mb_substr($value, 0, 1) == '&lt;'){ // assume HTML, just print
            return (string)$value;
        }else{ // escape all other content
            return htmlspecialchars((string)$value, ENT_QUOTES, 'UTF-8', FALSE);
        }
    };
    $closeTag = function($key){
        $matches = NULL; preg_match('/^[^\\s\\.#]+/', $key, $matches);
        $close = $matches[0];
        return "&lt;/$close&gt;";
    };

    $output = array();
    atrans(NULL, $arr, $output, $openTag, $valueFilter, $closeTag, $pretty);

    return join(($pretty ? "\n":""), $output);
}

// get output "pretty-printed"
$output = array_to_html($data, TRUE);
</code></pre>

<p>Disclaimer for the copy-pasters out there. The regular expressions in this code are incorrect and/or incomplete. They only serve to illustrate what you can do in a few lines.</p>

<p><strong>Cons:</strong>
Very general construct with no simple way to define what is what.
Recursive functions are evil!</p>

<p><strong>Pros:</strong>
Easy to serialize, compare, process etc.
Easy to add validation to suit your needs.</p>

<p>Expected output:</p>

<pre><code>&lt;!DOCTYPE html&gt;
  &lt;html&gt;
    &lt;head&gt;
      &lt;meta charset="utf8"&gt;
      &lt;title&gt;The page title&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
      &lt;div id="header"&gt;
        &lt;h1&gt;Page title&lt;/h1&gt;
      &lt;/div&gt;
      &lt;div id="content"&gt;Some content&lt;/div&gt;
    &lt;/body&gt;
  &lt;/html&gt;
</code></pre>
    </div>