<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is a useful question because it illustrates how a seemingly working program using pthreads can be loaded with pitfalls.  I hope that you take this answer in the spirit in which it is intended, which is to help you improve your programming.  I didn't see any major problems with the way you're using signals.</p>

<h2>Consider using standard threads</h2>

<p>You may already know this, but since C11, threads are now <a href="https://en.cppreference.com/w/c/thread" rel="nofollow noreferrer">part of the standard</a>.  Using them instead of POSIX threads (pthreads) could make the program, in theory anyway, somewhat more portable.  I'll make no further mention of that, however, and the rest will deal with pthreads, although most of the suggestions still apply.</p>

<h2>Think carefully about using non-standard calls</h2>

<p><strike>The <code>sigemptyset()</code> call is neither a C nor a POSIX standard.  While it's widely supported, it isn't really portable, strictly speaking.  That may be fine for your purposes, but it's important to know which calls are standard and which are not to improve the portability of your program.</strike> (I was actually thinking of <code>sigisemptyset</code> here â€” my mistake!)</p>

<h2>Use a mutex to access shared resources</h2>

<p>Both threads are attempting to use <code>printf</code> but that's a problem because that requires access to a <em>shared resource</em>, namely <code>stdout</code>.  Access <code>printf</code> within POSIX threads are <a href="https://stackoverflow.com/questions/467938/stdout-thread-safe-in-c-on-linux">guaranteed to be thread safe</a>, but the output could be scrambled (that is, the letters from two different threads could be intermixed).  One could use a <code>mutex</code> to assure that only one thread at a time is using that resource.  Here's one way to do that:</p>

<pre><code>#include &lt;stdarg.h&gt;

static pthread_mutex_t stdout_mutex = PTHREAD_MUTEX_INITIALIZER;

static int locking_printf(const char *format, ...) {
    va_list args;
    va_start(args, format);
    pthread_mutex_lock(&amp;stdout_mutex);
    int retval = vprintf(format, args);
    pthread_mutex_unlock(&amp;stdout_mutex);
    va_end(args);
    return retval;
}
</code></pre>

<p>Then replace every instance of <code>printf</code> with <code>locking_printf</code>, including the ones in <code>main</code> since that's a thread, too.</p>

<h2>Match return types with function</h2>

<p>There's no need to write <code>return NULL;</code> at the end of <code>thread_job</code> because it's a <code>void</code> function.  Also, it's my view that one should omit <code>return 0;</code> from the end of main.  It's always contentious because others disagree (often very passionately!), but <a href="https://stackoverflow.com/a/43558724/3191481">here's the rationale.</a></p>

<h2>Use <code>bool</code> types where appropriate</h2>

<p>The <code>is_th1_ready</code> and <code>is_th2_ready</code> variables are more appropriately described as <code>bool</code> rather than <code>int</code> variables.  For that reason, I'd recommend using <code>&lt;stdbool.h&gt;</code> and writing their declaration and initialization like this:</p>

<pre><code>static bool is_th1_ready = false;
static bool is_th2_ready = false;
</code></pre>

<h2>Think about casting</h2>

<p>Creating the threads uses this kind of call:</p>

<pre><code>pthread_create(&amp;thread2, NULL, thread_job, (void *)2);
</code></pre>

<p>That's fine and appropriate.  However, the later use of that data within the thread is a bit unusual:</p>

<pre><code>if (t_id == (void *)1)
    is_th1_ready = 1;
</code></pre>

<p>It's perfectly technically valid, but the more conventional approach is to cast the passed <code>void *</code> into something intelligible to the local thread -- often this is a pointer to a <code>struct</code> containing multiple values.  In this case, I'd probably write it like this instead:</p>

<pre><code>if ((int)t_id == 1)
    is_th1_ready = true;
</code></pre>

<p>On my machine this causes a compiler warning because <code>int</code> and <code>void *</code> are not the same size (on this machine, with this compiler), but that's not a problem because we know with certainty that this is, in fact, an <code>int</code>.  Another approach would be to do the cast once in the creation of a local <code>int</code> variable.</p>

<h2>Rethink the use of <code>scanf</code></h2>

<p>If the user enters a letter or some other non-numeric input, the <code>scanf</code> input fails and the user loses control of the application.  It's well known that <code>scanf</code> <a href="https://stackoverflow.com/questions/32393392/when-do-we-need-to-clear-the-scanf-buffer">has problems</a>.  For that reason, I'd recommend instead using <code>fgets</code> and then <code>strtod</code>.</p>

<pre><code>char buf[5];  // we don't need a big buffer
fgets(buf, sizeof buf, stdin);
switch(strtol(buf, NULL, 10)) {
</code></pre>

<p>This will interpret any "garbage" input as 0, but that's probably OK for this program.  Note also that for POSIX systems, non-numeric input can be detected by looking at the <code>errno</code> value.</p>

<h2>Prefer <code>for</code> to <code>while</code> where appropriate</h2>

<p>The only use of <code>terminate</code> is within the loop, so I'd suggest changing from <code>while</code> to <code>for</code> like this:</p>

<pre><code>for (bool running = true; running; ) {
</code></pre>

<p>Note that I've inverted the sense to eliminate the need to negate.  The compiler would probably have done something like that anyway, but I think it's more clear for human readers this way.</p>

<h2>Don't bother killing threads at exit</h2>

<p>The return from <code>main</code> or a call to <code>exit()</code> will both cause the threads to be cleaned up and resources returned, so I would probably omit the two <code>pthread_kill</code> calls at the end of <code>main</code>.</p>

<h2>Consider more robust error handling</h2>

<p>It's nice that the code is checking the return value of <code>sigaction</code>, but should the thread even launch if we can't handle the signals?  It's a design choice, but one worth considering, in my opinion.</p>
    </div>