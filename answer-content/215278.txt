<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You've covered the performance and correctness of your code, so all I can comment on is style.</p>

<p><strong>Linq:</strong> When possible, I prefer a declarative style of programming over an imperative style. That is, saying <em>what</em> you want instead of <em>how</em> to calculate it. Linq makes this easy in the case of totalWeight, which could be declared like this:</p>



<pre class="lang-csharp prettyprint-override"><code>var totalWeight = _deck._cards.Sum(cardNumber =&gt; cardNumber.Value);
</code></pre>

<p>Technically the second <code>foreach</code> could also be transformed into a Linq statement, using <code>.Aggregate()</code> and <code>.First()</code>... But I don't recommend it, as in that case I believe it would actually be <em>less</em> readable.</p>

<hr>

<p><strong>Immediate returns:</strong> Between the following two functions, I prefer the latter:</p>



<pre class="lang-csharp prettyprint-override"><code>int Foo1(Bar bar)
{
    var answer = 0;

    if (bar != null)
    {
        answer = bar.Baz;
    }

    return answer;
}
</code></pre>



<pre class="lang-csharp prettyprint-override"><code>int Foo2(Bar bar)
{
    if (bar == null)
    {
        return 0;
    }

    return bar.Baz;
}
</code></pre>

<p>In <code>Foo2</code>, I don't have to mentally track the state of the <code>answer</code> variable as I read. Another benefit is that <code>Foo2</code> scratches that itch I get when I see a bad variable name... "answer" is only a tiny bit more informative than "x", as variable names go.</p>

<p>So I would refactor your code to remove the <code>result</code> variable completely. On the line where you set it, just <code>return cardNumber.Key</code>.</p>

<hr>

<p><strong>Defaults vs Exceptions:</strong> I would also change the line where you <code>return result</code>. Instead, just throw an Exception. You seem to have tested your code pretty well, so you can be confident that the exception will never be thrown... Until the code is refactored, or the card weights are changed to Floats, or who-knows-what.</p>

<p>If that ever happens, an exception saying "The weighted card drawing function failed to select a card" will be easier to debug than an exception saying "Player cannot summon '': invalid unit type."</p>

<p>As a side note, yes I <em>would</em> prefer a third version of my function above. If you're going to fail, fail fast!</p>



<pre class="lang-csharp prettyprint-override"><code>int Foo3(Bar bar)
{
    if (bar == null) throw new ArgumentNullException(nameof(bar));

    return bar.Baz;
}
</code></pre>
    </div>