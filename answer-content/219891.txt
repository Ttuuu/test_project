<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Yay exceptions!</h2>

<p>Though it isn't reservered for execution-ending errors, I would avoid throwing an <code>OutOfMemoryException</code>, because usually it signals something very inconvient indeed. <code>IndexOutOfRangeException</code> also seems inappropriate: I would probably use <a href="https://docs.microsoft.com/en-us/dotnet/api/system.invalidoperationexception?view=netframework-4.8" rel="noreferrer"><code>InvalidOperationException</code></a> in both <code>Enqueue</code> and <code>Dequeue</code>.</p>

<p>The constructor could do with a check to ensure <code>maxSize</code> is positive, so that it doesn't throw with a cryptic error.</p>

<p><code>Front</code> and <code>End</code> don't throw on an empty buffer, and probably should.</p>

<h2>API and Encapsulation</h2>

<p>There is no reason this class couldn't be generic: I would make it so. Indeed, because it stores <code>int</code>s at the moment, it would not be clear to a consumer looking at the members that <code>Front</code> and <code>Rear</code> return elements rather than indexes.</p>

<p>I'd expect a <code>Count =&gt; _size</code> property, so that the Queue can be used for the sort of things Queues tend to be used (e.g. in your previous questions).</p>

<p>Do you have a particular use-case in mind for exposing <code>_buffer</code>? What good can come of this? There is no information made available as to the content of the buffer, so it can't be used for anything because nothing except the <code>CyclicQueue</code> knows how to use it. I would strongly suggest making this private (also, if it is public, it should ideally following the <code>ProperCamelCase</code> naming conventions like your other public members).</p>

<p>Since this is a non-resizing queue, the <code>MaxSize</code> probably ought to be public information. I'd also consider making it <code>MaxSize =&gt; _buffer.Length</code> to reduce redundancy. You could also make <code>_buffer</code> readonly to signal it's not meant to be changed to the maintainers.</p>

<h2>Correctness</h2>

<p>I'm not sure the <code>_size &gt; 0</code> check in <code>Enqueue</code> works. Consider a sequence of <code>Enqueue</code>, (<code>Dequeue</code>, <code>Enqueue</code>)<code>*n</code> on a newly created <code>CyclicQueue</code>: this will leave <code>_end = 0</code> while <code>_start</code> is incremented. I think this can be resolved by setting <code>_end = _maxSize - 1</code> in the constructor and removing the check.</p>

<h2>Misc/Boring Stuff</h2>

<ul>
<li><p>You could do with a little more white-space between things... at the very least, be consistent with your between-member spacing.</p></li>
<li><p>You could do with tests which test the exceptions (i.e. checking it throws if you try to enqueue/dequeue too many things.</p></li>
<li><p>As always, inline-documentation would be appreciated. This should describe the non-resizing nature of the queue, when it throws exceptions, and resolve the confusion concerning whether <code>Front</code> is an index or element.</p></li>
</ul>
    </div>