<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I like the exceptions you're throwing in your guard clauses, you're throwing exception types the client code would rightfully expect in these circumstances.</p>

<p>Vertical whitespace isn't consistent though. I like this:</p>

<pre><code>    if (collection == null)
        throw new ArgumentNullException("Cannot create from a null collection.");

    // borrowed from .NET Reference code for System.Collections.Generic.Stack&lt;T&gt;
    ICollection&lt;T&gt; c = collection as ICollection&lt;T&gt;;
</code></pre>

<p>But for consistency this one should also have an empty line after the guard clause:</p>

<pre><code>    if (capacity &lt; 1)
        throw new ArgumentOutOfRangeException("Capacity must be at least one.");
    _items = new T[capacity + 1];
</code></pre>

<p>You're not very consistent either with one-liner scope braces - you omit them in guard clauses (which is fine IMO), but then there's this:</p>

<pre><code>        if (_size &lt; 0)
            _size += _items.Length;
</code></pre>

<p>And then that:</p>

<pre><code>        if (_syncRoot == null)
        {
            System.Threading.Interlocked.CompareExchange&lt;Object&gt;(ref _syncRoot, new Object(), null);
        }
</code></pre>

<p>As a maintainer I would much rather like to see all scopes properly enclosed in curly braces.</p>

<hr>

<pre><code>    // borrowed from .NET reference
    int count = _size;
</code></pre>

<p>That's not really a useful comment. This would be more useful:</p>

<pre><code>    // thread-local copy:
    int count = _size;
</code></pre>

<hr>

<p>In the event that <code>item</code> is a value type, this would be boxing it:</p>

<pre><code>    if (((Object)item) == null)
</code></pre>

<p>One of the advantages of generics, is that boxing becomes avoidable, since you have a way of knowing whether <code>T</code> is a value or a reference type. Why not leverage this knowledge?</p>

<p>In fact, the whole <code>Contains</code> implementation smells:</p>

<pre><code>        if (((Object)item) == null)
        {
            if (((Object)_items[count]) == null)
                return true;
        }
        else if (_items[count] != null &amp;&amp; c.Equals(_items[count], item))
        {
            return true;
        }
</code></pre>

<p>Can be simplified to:</p>

<pre><code>        if ((object)item == null &amp;&amp; (object)_items[count] == null)
        {
            return true;
        }
        else if (_items[count] != null &amp;&amp; c.Equals(_items[count], item))
        {
            return true;
        }
</code></pre>

<p>And that still smells... but contracting the conditions any further would definitely hinder readability.</p>

<p>Notice I replaced <code>Object</code> with <code>object</code> - <code>object</code> is a language alias for <code>System.Object</code> (which you are using). For consistency's sake, if you're going to be using C# aliases for CLR types (<code>object</code>, <code>int</code>, <code>string</code>, ...), then use aliases throughout the code. Or don't, and use the CLR types everywhere (<code>Object</code>, <code>Int32</code>, <code>String</code>, ...).</p>

<hr>

<p>This is <strong>MASSIVE</strong> overkill:</p>

<pre><code>        using (IEnumerator&lt;T&gt; en = collection.GetEnumerator())
        {
            while (en.MoveNext())
            {
                Push(en.Current);
            }
        }
</code></pre>

<p>You know that <code>collection</code> is an <code>IEnumerable&lt;T&gt;</code> - why not just iterate it with a more casual-looking <code>foreach</code> loop?</p>

<pre><code>        foreach(var item in collection)
        {
            Push(item);
        }
</code></pre>
    </div>