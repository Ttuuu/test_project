<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The <code>Swap</code> method can be much cooler with the tuple syntax to do the operation in only one line. At the same time make it an extension method and pass the two indexes with the new <code>in</code> keyword to pass the values as a reference (value type and reference type both) which has a great potential to improve performance because no copying is involved.</p>

<pre><code>public static void Swap&lt;T&gt;(this IList&lt;T&gt; source, in int x, in int y)
{
    (source[x], source[y]) = (source[y], source[x]);
}
</code></pre>

<p>and use it with</p>

<pre><code>m_values.Swap(in offset, in parent);
</code></pre>

<hr>

<h3><code>values</code> parameter bug</h3>

<p>There is a bug in the constructor.</p>

<blockquote>
<pre><code>public BinaryHeap(IList&lt;T&gt; values, Func&lt;T, T, bool&gt; comparer)
{
  ...
  _values = values;
  ...
}
</code></pre>
</blockquote>

<p>It assigns the <code>values</code> to the prviate <code>_values</code> field but an array also implements this interface. This means that if you try to create it with</p>

<pre><code>var bh = new BinaryHeap&lt;int&gt;(new[] { 1, 2, 5, 8 }, (x, y) =&gt; x == y);
</code></pre>

<p>it'll crash because an array has a fixed size and <code>Grow</code> will fail at <code>_values.Add(default);</code></p>

<p>You should let the use pass an <code>IEnumerable&lt;T&gt;</code> and call <code>.ToList()</code> yourself to not only be sure it's modifiable but also to make sure nobody modifies it for you out side of the class. Currently I could <code>.Clear()</code> the <code>values</code> and it would crash again.</p>

<hr>

<p>Oh, one more thing. Since <code>BinaryHeap&lt;T&gt;</code> is a collection it should also implement the <code>IEnumerable&lt;T&gt;</code> interface.</p>
    </div>