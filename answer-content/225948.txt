<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Use the OOP</h3>

<p>If you are going to use objects, then use them to simplify your code.  As an example, there are several places in your code where you check to see if two coordinates are equal using code like this:</p>

<pre><code>if (currentPoint.position.coordX == target.coordX &amp;&amp; currentPoint.position.coordY == target.coordY) {
    ...
}
</code></pre>

<p>Add an <code>equal()</code> method to <code>Coord</code> so you can use something like:</p>

<pre><code>if (currentPoint.position.equals(target)) {
    ...
}
</code></pre>

<p>Easier to read and less typing.</p>

<h3>Check easy things first</h3>

<p>In <code>isValid()</code> it takes a lot of processing to determine <code>isVisited</code>.  But takes neglible processing to make sure the X and Y values are in the maze.  So it would be more efficient to check them first and then check <code>isVisited</code> only if needed.</p>

<pre><code>function isValid(visited: Array&lt;Coord&gt;, position: Coord)
{
    let checkPosition = mapPositions.find(_p =&gt; _p.coordX == position.coordX &amp;&amp;
                                                _p.coordY == position.coordY);

    if ((position.coordY &gt;= 0) &amp;&amp; 
        (position.coordY &lt; lines.length) &amp;&amp; 
        (position.coordX &gt;= 0) &amp;&amp; 
        (position.coordX &lt; lines[0].length) &amp;&amp; 
        checkPosition != undefined &amp;&amp; 
        checkPosition.element.elementType == ElementType.FIELD)) {

        let isVisited = false;

        for (var j = 0; j &lt; visited.length; j ++) {
            if ((visited[j].coordX == position.coordX &amp;&amp; visited[j].coordY == position.coordY)) {
                return False;
        }
        return True;
    }
    return  False;
}
</code></pre>

<h3>Path</h3>

<p>You don't need to keep the whole path with each point in the maze.  You only need to keep the previous point, and maybe the path length.  When you get to the finish, you can trace the path backwards using the previous points.</p>

<h3>Visited</h3>

<p>I believe typescript has a <code>set</code> type.  Use that to store visited nodes.  Then checking to see if a node was visited is much easier and faster:</p>

<pre><code>visited.has(position)
</code></pre>

<p><code>visited</code> could be preloaded with the nodes that are just outside the maze (e.g. a coord of -1 or line.length).  Then you could skip the position.X &gt;= 0 type tests too.</p>
    </div>