<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm just going to do a detailed review of the more general class. With respect to Connect Four, have you read the paper by the person who solved it? They took a strategy-based approach, but there may be some tips for the evaluation function.</p>

<hr>

<blockquote>
<pre><code>    /**
     * Maps each visited state to its parent state.
     */
    private final Map&lt;S, S&gt; parents = new HashMap&lt;&gt;();
</code></pre>
</blockquote>

<p>Game trees aren't actually trees but digraphs. In the case of Connect Four there's an obvious parameter to show that they're layered digraphs. But a position at depth 4 might have various parents, and they might not be equally good choices. (Compare noughts and crosses / tic-tac-toe: it's a draw, but some moves give your opponent more chances to make mistakes).</p>

<p>I suspect that this is more an optimisation opportunity than a bug, but it would depend on the equality implementation of the state.</p>

<hr>

<blockquote>
<pre><code>        // Do the game tree search:
        makePlyImpl(state,
                    depth,
                    Double.NEGATIVE_INFINITY, // intial alpha
                    Double.POSITIVE_INFINITY, // intial beta
                    minimizingPlayer,
                    maximizingPlayer,
                    initialPlayer);
</code></pre>
</blockquote>

<p>Shouldn't <code>depth</code> be <code>getDepth()</code> in case a subclass overrides <code>getDepth</code> and <code>setDepth</code>?</p>

<hr>

<blockquote>
<pre><code>        if (currentPlayer == maximizingPlayer) {
            double value = Double.NEGATIVE_INFINITY;

            for (S child : state.children()) {
                value = Math.max(
                        value, 
                        makePlyImpl(child, 
                                    depth - 1, 
                                    alpha,
                                    beta,
                                    minimizingPlayer, 
                                    maximizingPlayer, 
                                    minimizingPlayer));

                parents.put(child, state);
                alpha = Math.max(alpha, value);

                if (alpha &gt;= beta) {
                    break;
                }
            }

            return value;
</code></pre>
</blockquote>

<p>I don't see the value to having a variable for <code>value</code> rather than just reusing <code>alpha</code>. As I see it, <code>makePlyImpl</code> is called in two places: once with <code>alpha = Double.NEGATIVE_INFINITY</code> and the recursive call here. Eliminating <code>value</code> in favour of <code>alpha</code> would change the behaviour of the recursive calls slightly, equivalently to changing <code>return value;</code> to <code>return Math.max(alpha, value);</code>. But at the level up, this wouldn't cause <code>alpha</code> to increase where it wouldn't already have increased.</p>

<p>I also think it would be better to reduce duplication by merging both sides of the <code>if</code>. Reusing <code>alpha</code> and <code>beta</code> would reduce the differences between the two sides, giving:</p>

<pre><code>        P otherPlayer = currentPlayer == maximizingPlayer
                            ? minimizingPlayer
                            : maximisingPlayer;

        for (S child : state.children()) {
            double value =
                    makePlyImpl(child, 
                                depth - 1, 
                                alpha,
                                beta,
                                minimizingPlayer, 
                                maximizingPlayer, 
                                otherPlayer);

            parents.put(child, state); // See earlier comments

            if (currentPlayer == maximizingPlayer) {
                alpha = Math.max(alpha, value);
            } else {
                beta = Math.min(beta, value);
            }

            if (alpha &gt;= beta) {
                break;
            }
        }

        return currentPlayer == maximizingPlayer ? alpha : beta;
</code></pre>
    </div>