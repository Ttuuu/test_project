<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The code looks a bit incomplete, e.g. shouldn't there be a main method
somewhere?</p>

<p>I added the following to get it to run for now:</p>

<pre><code>if __name__ == "__main__":
    run()
</code></pre>

<p>It's good practice to have the <code>__name__</code> check in there instead of just
executing, because then you're still able to import the file elsewhere
without it automatically executing code.</p>

<hr>

<p>Okay, so with that out of the way, there's commented out code that
should be there:  Either it's correct, then it should replace the
uncommented code, or it's not, then it should be deleted.  To me,
reading that just confuses me what the purpose is, or was.</p>

<p>And then there's two functions, which are identical ... why is that?  I
suppose that's a feature of the framework that allows you to have both
functions because of the annotations, but generally <em>do not do that</em> and
give them separate names, at least something like
<code>data_get</code>/<code>data_post</code>.</p>

<p>The specification is pretty vague, <em>what</em> are you supposed to echo, the
POST body, or the URL parameters?  Because then I don't get what the
<code>GET</code> one is supposed to be doing.  With that in mind I'd delete it.</p>

<p>So, then, trying it out:</p>

<pre><code>&gt; curl -d '{"data": 1}' -H "Content-Type: application/json" -v http://localhost:8080/data
{"method": "POST", "data": {"data": 1}}%
</code></pre>

<p>Seems to work.</p>

<p>(Also, since there's a single endpoint that echoes data ... there's
little REST here.  I'm not sure what other best practices are meant to
be followed for this exercise.)</p>

<p>I've no idea how you'd get an exception in there, but in any case,
<code>raise ValueError</code> isn't super helpful, it says exactly nothing about
what went wrong.  Consider adding some information like <code>raise
ValueError("Couldn't format data.")</code>.  Note that in this particular
situation there's little that adds information, maybe don't catch the
exception then.</p>

<p>At that point it might look like this:</p>

<pre><code>@post("/data")
def data():
    response.content_type = "application/json"
    return dumps({"method": request.method, "data": request.json})
</code></pre>

<hr>

<p>However, then I was thinking, maybe this framework does the JSON
formatting for us.  And it does:</p>

<pre><code>@post("/data")
def data():
    return {"method": request.method, "data": request.json}
</code></pre>

<p>Probably can't get it much smaller than that actually.  And then you can
delete a lot of imports too:</p>

<pre><code>from bottle import run, request, post
from json import dumps
</code></pre>

<hr>

<p>Hope that helps.  In general it's good to let readers know all you can,
like "which dependencies do I need" and "how do I run this", including
example invocations.</p>
    </div>