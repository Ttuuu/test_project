<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><code>object</code> is easier to read than <code>obj</code>. <code>values</code> is easier to read than <code>vals</code>. Avoid unnecessary abbreviations.</p>

<p>Don’t give things misleading names. You’re calling something a <code>field</code> when it’s really a <code>fieldName</code>.</p>

<p>Using a <code>Map</code> in <code>groupByFields</code> is a good idea, but you’re making it a lot harder than it needs to be by sticking everything in a list right away. Just keep the hash as the key and a set of objects as the value. </p>

<p>There’s a good chance this is a big performance sink because of how much reflection you’re doing. Rather than reflect on every instance of every object, just do the reflection work once.</p>

<p>Your <code>getObjectsFieldHash</code> method is finding the has of a List of values, rather than on the actual values. Is that intentional?</p>

<p>To answer your questions,</p>

<blockquote>
  <p>Is it possible to create same type of original List instead of always ArrayList?</p>
</blockquote>

<p>Yes, but why? This method should be a lot more generic - it can handle arbitrary collections unless you need your grouping function to be stable. You should be doing most of your work behind the Collections API interfaces. If you really need a specific concrete type yourself, it's preferable to make that type and dump the existing collection into it via a constructor. That will copy all the members over.</p>

<blockquote>
  <p>How can I remove _unused variable?</p>
</blockquote>

<p>You can’t. <code>computeIfAbsent</code> requires a function that takes in a key.</p>

<blockquote>
  <p>Maybe I could use ==. Does it improve anything? </p>
</blockquote>

<p>It might affect performance in some trivial way, but you’re better off refactoring the code to be easier to read.</p>

<blockquote>
  <p>Is it possible to create same type of original List instead of always ArrayList?</p>
</blockquote>

<p>See above</p>

<p>So, if you're OK with using what I think are more appropriate collections than lists, you can try:</p>

<pre><code>public static &lt;T&gt; Collection&lt;Set&lt;T&gt;&gt; groupByFields(
        final Class&lt;T&gt; objectClazz,
        final Collection&lt;T&gt; objects,
        final String... fieldNames)
                throws NoSuchFieldException, IllegalAccessException {

    final Field[] fields = fieldsFor(objectClazz, fieldNames);
    final Map&lt;Integer, Set&lt;T&gt;&gt; groupings = new HashMap&lt;&gt;();
    for (final T object : objects) {
        final int hash = hashOf(object, fields);
        groupings.computeIfAbsent(hash, k -&gt; new HashSet&lt;T&gt;()).add(object);
    }

    return groupings.values();
}
</code></pre>

<p>If you feel strongly about lists, but don't have a really good reason to require specific list types, try:</p>

<pre><code>public static &lt;T&gt; List&lt;List&lt;T&gt;&gt; groupByFields(
        final List&lt;T&gt; objects,
        final String... fieldNames)
                throws NoSuchFieldException, IllegalAccessException {

    final Field[] fields = fieldsFor(objects.get(0).getClass(), fieldNames);
    final Map&lt;Integer, List&lt;T&gt;&gt; groupings = new HashMap&lt;&gt;();
    for (final T object : objects) {
        final int hash = hashOf(object, fields);
        groupings.computeIfAbsent(hash, k -&gt; new ArrayList&lt;T&gt;()).add(object);
    }

    return new ArrayList&lt;&gt;(groupings.values());
}
</code></pre>

<p>And if you feel really strongly about controlling the types of lists being used, you can use:</p>

<pre><code>public static &lt;T&gt; List&lt;List&lt;T&gt;&gt; groupByFields(
        final Class&lt;? extends List&lt;T&gt;&gt; listClazz,
        final Class&lt;? extends List&lt;List&lt;T&gt;&gt;&gt; listOfListsClazz,
        final List&lt;T&gt; objects,
        final String... fieldNames)
                throws NoSuchFieldException, IllegalAccessException, InstantiationException {

    final Field[] fields = fieldsFor(objects.get(0).getClass(), fieldNames);
    final Map&lt;Integer, List&lt;T&gt;&gt; groupings = new HashMap&lt;&gt;();
    for (final T object : objects) {
        final int hash = hashOf(object, fields);
        groupings.computeIfAbsent(hash, k -&gt; {
            try {
                return listClazz.newInstance();
            } catch (IllegalAccessException | InstantiationException e) {
                throw new IllegalStateException("Cannot instantiate a new instance of " + listClazz.getCanonicalName());
            }
        })
        .add(object);

    }

    final List&lt;List&lt;T&gt;&gt; result = listOfListsClazz.newInstance();
    result.addAll(groupings.values());
    return result;
}
</code></pre>

<p>All three top-level methods use the same two helpers:</p>

<pre><code>private static final &lt;T&gt; Field[] fieldsFor(final Class&lt;T&gt; clazz, final String[] fieldNames)
        throws NoSuchFieldException {

    final Field[] fields = new Field[fieldNames.length];
    for (int i = 0; i &lt; fieldNames.length; i++) {
        final Field field = clazz.getDeclaredField(fieldNames[i]);
        field.setAccessible(true);
        fields[i] = field;
    }

    return fields;
}

private static final &lt;T&gt; Integer hashOf(final T object, final Field... fields)
        throws IllegalAccessException {

    final Object[] values = new Object[fields.length];
    for (int i = 0; i &lt; values.length; i++) {
        values[i] = fields[i].get(object);
    }
    return Objects.hash(values);
}
</code></pre>

<p>Finally, note that I do agree with <code>RobAu</code> that avoiding reflection would be better, but we don't have enough context to consider alternatives.</p>
    </div>