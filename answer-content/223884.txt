<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Review</h3>

<ul>
<li>property <code>Interval</code> and methods <code>ExternalStart</code>, <code>ExternalStart</code> should throw <code>ObjectDisposedException</code> if <code>_isDisposing</code> is <code>true</code></li>
<li>property <code>Interval</code> and methods <code>ExternalStart</code>, <code>ExternalStart</code> should also acquire a lock on <code>_syncObject</code></li>
<li>when implementing the <a href="https://stackoverflow.com/questions/898828/finalize-dispose-pattern-in-c-sharp"><code>dispose pattern</code></a> make sure to include a destructor <code>~DisposableSafeTimer</code> or seal your class</li>
<li><code>_isDisposing</code> should be renamed to <code>_disposed</code></li>
<li>when disposing, you should also clean your event listeners <code>Elapsed = null</code> <a href="https://stackoverflow.com/questions/4526829/why-and-how-to-avoid-event-handler-memory-leaks">to avoid a memory leak</a></li>
<li>do you really want to put <code>Elapsed?.Invoke(sender, e);</code> inside the lock? Think about possible race conditions or other side effects. What if a registered listener calls <code>Dispose</code> in the listener?</li>
<li>check out <a href="https://stackoverflow.com/questions/1042312/how-to-reset-a-timer-in-c">different suggestions</a> to reset the timer. Yours is fine though.</li>
<li>a tiny enhancement might be to create the lock only when it is <code>null</code> using <code>Interlocked.CompareExchange</code>, instead of immediately creating an instance.</li>
</ul>
    </div>