<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Tracing the code starting from <code>main()</code>, I didn't get very far until I noticed concerns.</p>

<p>Looking at your <code>Expression</code> constructor…</p>

<pre><code>Expression::Expression(std::string expression, bool sub) //NOTE: being a sub means that it was surrounded
//by brackets '(' ')'
{


    hasBrackets = false;
    expressionString = expression;
    containsBrackets();
    // //std::cout &lt;&lt; "Successfully complete 'containsBrackets' function" &lt;&lt; std::endl;
    if (hasBrackets == true)
    {
     getParentheses();
     // //std::cout &lt;&lt; "Successfully complete 'getParentheses()' function" &lt;&lt; std::endl;
    getSubExpressions();
    // //std::cout &lt;&lt; "Successfully complete 'getSubExpressions()' function" &lt;&lt; std::endl;
    }
    evaluate();
    // //std::cout &lt;&lt; "Successfully complete 'evaluate()' function" &lt;&lt; std::endl;


}
</code></pre>

<ul>
<li>Use <a href="https://stackoverflow.com/q/4589237/1157100">initialization lists</a>.</li>
<li>Your comment says, "being a sub means that it was surrounded by brackets '(' ')'".  Why should that matter though?  Indeed, you never even use the <code>sub</code> parameter.</li>
<li><code>hasBrackets = false; containsBrackets(); if (hasBrackets == true) { … }</code> is cumbersome.  Why not write <code>if (hasBrackets = containsBrackets()) { … }</code>?  But even that is unsatisfactory…</li>
</ul>

<p>Looking a <code>containsBrackets()</code> and <code>getParentheses()</code>…</p>

<pre><code>void Expression::containsBrackets()
{
    for(unsigned int index = 0; index &lt; expressionString.size(); index++)
    {
        if (expressionString[index]=='(' ||expressionString[index]==')' )
        {
            hasBrackets = true;
        }
    }
}
void Expression::getParentheses() //Finds the parentheses and their positions in the expression
//so that their contents can be converted to sub expressions.
{
    for (unsigned int index = 0; index &lt; expressionString.size(); index++)
    {
        if (expressionString[index] == '(' || expressionString[index] == ')')
        {
            Parenthesis temporary(index, expressionString[index]); //Stores the position and type of the parenthesis
            vector_parentheses.push_back(temporary);
        }
    }

    /* … */
}
</code></pre>

<ul>
<li>The essentially do the same work.  <code>hasBrackets</code> is essentially the same as <code>!vector_parenthesis.empty()</code>.</li>
<li>In the <code>Expression</code> constructor, there is no need to treat the no-parentheses case specially.  Iterating through an empty vector achieves the same effect.</li>
<li>Do you want to call them "brackets" or "parentheses"?  Make up your mind!</li>
</ul>
    </div>