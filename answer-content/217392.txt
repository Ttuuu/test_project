<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Object literals</h2>
<p>By the looks this is client side UI only and the actual results are stored in the database.</p>
<p>Your concern is not that of the data structure, but rather one of representation.</p>
<p>The task is defined by what you have in <code>createAnswerSelect(validAnswers) {</code></p>
<p>Your code is attempting to imitate a higher level abstraction unrelated to the task you need to complete. This has forced you to presented 4 additional interfaces to the scope you are working in  <code>Answer</code>, <code>UnansweredState</code>, <code>ValidAnswerState</code>, <code>InvalidAnswerState</code> that you are unsure of.</p>
<p>Javascript lets you define objects as literals, you can side step the noise related to defining named Objects, Prototypes, functions, calls to super etc, yet still keep the same underlying relationship of shared and unique state.</p>
<h2>Example</h2>
<p>The best code is that which does it quickly and as simply as possible. Creating an inherited structure just to hold some shared and unique states is too complex.</p>
<p>This example is an alternative (based on the information you have provided)</p>
<p>It defines the 3 states as named constants that access state information via a Map of named states, rather than the 3 objects you defined <code>UnansweredState</code>, <code>ValidAnswerState</code>, <code>InvalidAnswerState</code></p>
<pre><code>const UNANSWERED = 1;
const INVALID = 2;
const VALID = 3;

const createElement = (type, opts = {}) =&gt; Object.assign(document.createElement(type), opts);
const common = (icon, color) =&gt; ({icon, color});
const states = new Map([
  [UNANSWERED, {...common("remove", "grey"), data: {unanswered: ""}}],
  [INVALID, {...common("clear", "red"), data: {valid: "", icon: "icons/round-done-24px.svg"}}],
  [VALID, {...common("done", "green"), data: {invalid: "", icon: "icons/round-clear-24px.svg"}}],
]);
const option = (answer, stateId) =&gt; {
  const state = states.get(stateId);
  const option = createElement("option", {value: answer, textContent: answer });
  Object.assign(option.dataset, state.data);
  option.dataset.validationIcon = state.icon;
  option.dataset.validationColor = state.color;   
  return option;
}        

function createAnswerSelect(answers) {
  const select = createElement('select');
  select.add(option("Unanswered", UNANSWERED));
  answers.forEach(answer =&gt; select.add(option(answer.answer, VALID)) );
  select.add(option("Incorrect response", INVALID));
  return select;           
}          
export { createAnswerSelect };
</code></pre>
    </div>