<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I don't always follow this advice myself, but it's a good idea to write
a specification for the function/algorithm you're implementing. (See
<a href="https://blogs.msdn.microsoft.com/ericlippert/2009/11/19/always-write-a-spec-part-one/" rel="nofollow noreferrer">this</a>
post by Eric Lippert for more information). That'll also make it easier
to come up with test cases and reason about various corner cases (like
what's the behavior if I try do <code>split("aaba", "a", "ab")</code> for
instance?).</p>

<p>In this case we might go for something like: Given a <code>string_view</code> and a
list (argument list) of "string like" delimiters return a <code>std::vector</code>
of string_views representing the text between delimiters (using the
first matching delimiter). If no delimiters are found return a vector
with one element consisting of the input string.</p>

<p>I mention this because at the moment it's a bit hard to see the overall
idea behind your code. It's not totally clear to me what it's doing, I
can see it's removing suffixes and prefixes, but it's hard to verify
that the main loop always terminates for instance. I think if you'd
written an informal specification beforehand you'd probably have ended
up with a more structured and easier to understand main loop.</p>

<p>Here's a list of some other things I noticed while reading the code
(some are from my comment):</p>

<ul>
<li><code>make_string_view( CharT X )</code> returns a pointer to a temporary.
You can make a <code>string_view</code> that way from the arguments, but you
need pass the argument by reference all the way.</li>
<li><code>removed = removed or true</code> should just be <code>removed = true</code></li>
<li><code>nl</code> doesn't belong in that header</li>
<li>I'd put all internal functions into some kind of
<code>private</code>/<code>internal</code>/<code>detail</code> namespace</li>
<li>I personally only use <code>[[nodiscard]]</code> on functions where it's a
big mistake to not use the return value (I don't think
<code>make_string_view</code> qualifies)</li>
<li>You're missing <code>&amp;&amp;</code> on the delimiters for <code>std::forward</code> to do its
magic</li>
<li>You probably only want to create <code>string_view</code>s from the delimiter
arguments once</li>
</ul>

<p>Given all of the above I image you could implement the function
something like this (in pseudo-code):</p>

<pre><code>vector&lt;string_view&lt;CharT&gt;&gt; split(string_view&lt;CharT&gt; str, Delimiters&amp;&amp; delims...) {
    if (str.empty()) return { str }; // Get special case out of the way
    vector&lt;string_view&lt;CharT&gt;&gt; res;
    size_t last_index = 0;
    const auto delim_array = make_delim_array(std::forward&lt;Delimiters&gt;(delims)...);
    for (size_t i = 0; i &lt; str.length();) {
        if (auto match_length = any_matches(str, i, delim_array)) {
            res.push_back(str.substr(last_index, i - last_index));
            i += match_length;
            last_index = i;
        } else {
            ++i;
        }
    }
    res.push_back(str.substr(last_index));
    return res;
}
</code></pre>
    </div>