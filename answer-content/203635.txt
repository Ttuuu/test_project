<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>For feedback on your file handling, see the bottom of this post. First, I want to tackle a much larger issue:</p>

<h2>None of your classes actually represent objects.</h2>

<p>The purpose of object-oriented programming is to model real-world objects and their relationships in code, as closely as possible. Objects have a <strong>state</strong> and a set of <strong>actions</strong> that can be taken to modify that state.</p>

<p>Your classes contain sets of related functionality, but none of them actually maintain any sort of state. You could easily remove all member variables of <code>Library</code>, <code>Student</code> and <code>Book</code> and use local variables instead, and nothing would change about your functionality. I'll show you a rewritten <code>Book</code> module as an example of this:</p>

<p>Book.h</p>

<pre><code>#ifndef BOOK_H_
#define BOOK_H_

#include &lt;string&gt;

// Book is no longer a class - just a namespace, a collection of related functions.
namespace Book
{
    void new_entry();
    void show_book(std::string&amp;, std::string&amp;, std::string&amp;);
    // get_book_num can be removed, as it is not actually called anywhere.
    // std::string get_book_num() const;
    void show_record();
}

#endif
</code></pre>

<p>Book.cpp</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;iomanip&gt;
#include &lt;fstream&gt;
#include "Book.h"

namespace Book
{
    void new_entry() {
        // These variables are initialized and consumed entirely within this function,
        // so there is no reason to keep track of their values outside of this function.
        std::string book_num, book_name, author_name;

        std::cin.ignore();
        std::cout &lt;&lt; "Enter Book Number : ";
        std::getline(std::cin, book_num);
        std::cout &lt;&lt; "\nEnter Book Name : ";
        std::getline(std::cin, book_name);
        std::cout &lt;&lt; "\nEnter Author Name : ";
        std::getline(std::cin, author_name);

        std::fstream fp;
        fp.open("Books.dat", std::ios::out | std::ios::app);
        if (fp)
        {
            fp &lt;&lt; book_num &lt;&lt; " " &lt;&lt; book_name &lt;&lt; " " &lt;&lt; author_name &lt;&lt; '\n';
        }
        fp.close();
        std::cout &lt;&lt; "Entry Successfull!!\n";
    }

    void show_book(std::string&amp; b_num, std::string&amp; b_name, std::string&amp; a_name)
    {
        std::cout &lt;&lt; "Book Number :" &lt;&lt; std::setw(10) &lt;&lt; b_num &lt;&lt; '\n';
        std::cout &lt;&lt; "Book Name :  " &lt;&lt; std::setw(10) &lt;&lt; b_name &lt;&lt; '\n';
        std::cout &lt;&lt; "Author Name :" &lt;&lt; std::setw(10) &lt;&lt; a_name &lt;&lt; '\n';
    }

    void show_record()
    {
        std::fstream fp;
        std::string record;
        fp.open("Books.dat", std::ios::in);
        if (!fp)
        {
            std::cerr &lt;&lt; "File could not be opened\n";
            return;
        }
        else
        {
            std::string book_num, book_name, author_name;
            while (fp &gt;&gt; book_num &gt;&gt; book_name &gt;&gt; author_name)
            {
                if (fp.eof())
                {
                    break;
                }
                else
                {
                    std::cout &lt;&lt; book_num &lt;&lt; std::setw(50) &lt;&lt; book_name &lt;&lt; std::setw(50) &lt;&lt; author_name &lt;&lt; '\n';
                }
            }
        }
        fp.close();
    }
}
</code></pre>

<p>The only other thing to change now is, everywhere you were previously calling <code>book.new_entry()</code> or similar functions, change to <code>Book::new_entry()</code>. This works because our <code>Book</code> class <strong>did not actually represent a book</strong> - it simply contained functions that knew how to read and write information <em>about</em> a book to/from a file.</p>

<p>Your program as-is is simply a wrapper around a file. Everything is read-from or written-to the file directly. Since your program does not keep any information in memory from one function call to the next, it <em>has no state to manage</em>, so an object-oriented solution makes no sense.</p>

<p>If you want to practice with object-oriented programming, I would recommend a slightly different exercise. Write a program that <em>begins</em> by reading in a list of Books and Students from their respective files, and keeps this information in memory. Allow the user to view, add, and remove records as they wish, and then write this data back to the files when the user exits the program. Apart from the very beginning and very end of the program, you are <em>not allowed to touch the file</em>.</p>

<p>This exercise should give you much more practice with designing objects and maintaining their state. You will need to keep track of all the Books and Students you have read from the file, as well as the ones the user has entered. You will need to design a way for the user to look up a Book or Student from those that are currently in memory. You will need to decide which objects have what responsibility, and how to store their data.</p>

<p>I predict that, if you attempt the above exercise and post a solution to <em>that</em>, you will get much more helpful feedback about object-oriented techniques.</p>

<h2>File handling</h2>

<p>Ignoring the issues discussed above, your file handling code is mostly fine. You can improve it in the following ways:</p>

<ul>
<li><strong>Either use a different filestream object for each function, or don't call <code>fp.close()</code>.</strong> Looking at your <code>Library</code> class, the <code>fstream</code> object is a member variable, which implies it maintains its state (i.e the file it represents) across many function calls. However, in your implementation, you call <code>fp.open()</code> and <code>fp.close()</code> manually every time you want to use the file. You should either open the <code>fstream</code> in the <code>Library</code> constructor and leave it that way, or create a new <code>fstream</code> local variable for each function.</li>
<li><p><strong>Use RAII techniques.</strong> Your file stream objects should be initialized and ready-to-use the moment they are created. You can accomplish this by specifying the file to open in the <code>fstream</code> constructor, rather than calling <code>fstream::open</code> manually. Example in <code>Book::new_entry</code>:</p>

<pre><code>std::fstream fp( "Books.dat", std::ios::out | std::ios::app );  // Now fp is ready to be used - no need to call 'open()' manually.
if (fp)
    ...
</code></pre>

<p>Additionally, the <code>fstream</code> destructor will automatically close a file stream if it is currently open. Therefore, there is no reason to call <code>fp.close()</code> manually unless you are trying to reuse the <code>fstream</code> object by opening a different file. If you remove the member variable <code>fp</code> in <code>Library</code> and only use local <code>fstreams</code>, then you can safely remove all calls to <code>fp.close()</code>.</p></li>
<li><p><strong>Don't check <code>fstream::eof()</code> manually.</strong> Looking at <code>Book::show_record</code>, you have the following code:</p>

<pre><code>while (fp &gt;&gt; book_num &gt;&gt; book_name &gt;&gt; author_name)
{
    if (fp.eof())
    {
        break;
    }

    // Process data
}
</code></pre>

<p>The <code>eofbit</code> for an <code>fstream</code> is set when end-of-file is reached for that stream, i.e once you have read the last piece of data in the stream. When you read the last line in this <code>while</code>-loop, the <code>eofbit</code> is set. By checking <code>fp.eof()</code> and breaking out of the loop if it is set, you have actually introduced a bug where your program will never process the last line of this file (you read it in, <code>eofbit</code> gets set, and you check for <code>eof</code> before processing the line).</p>

<p><code>fstream::operator&gt;&gt;</code> will return an <code>fstream</code> that evaluates to <code>false</code> if its <code>eofbit</code> is set, so you can remove this entire <code>if (fp.eof())</code> check. Instead, let the <code>while</code>-loop condition evaluate to <code>false</code> naturally if <code>eofbit</code> gets set. This way, you process every single line of the file, and then the <code>while</code>-loop stops running when you try to read in data past the end of the file.</p>

<pre><code>while (fp &gt;&gt; book_num &gt;&gt; book_name &gt;&gt; author_name)
{
    // Process data normally, no need to check for eof.
    // If any of the above data fails to read in, we will just skip to the end of the while-loop.
}
</code></pre></li>
</ul>

<h2>Misc</h2>

<ul>
<li><p><strong>Explain your rationale for using <code>setw</code>.</strong> Looking at <code>Book::show_book</code>, it is odd to me that you choose to use <code>setw(10)</code>. If the book name and author name are ten characters or shorter, this will ensure they line up with the book number. However, if they are longer than ten characters, then they will wrap to the right and throw off your carefully chosen alignment of 10.</p>

<p>Should all book information line up at the ten character mark? Is this incorrect behavior, and you actually wanted to truncate book titles that are longer than ten characters? A comment or two about why you chose a value of 10 would be nice to see here.</p></li>
</ul>
    </div>