<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are my notes:</p>

<ul>
<li><p>I think it's good to have consistency in the way things are named: I noticed that you've named one variable <code>HOL</code> and one <code>deck</code>. Even if something is an acronym, I would opt to keep consistency and start the name with lowercase if you do that for other variables. In this instance, I'd actually opt to rename <code>HOL</code> to something that is more descriptive independent of looking at its type, such as <code>higherOrLowerGame</code>. It's a bit longer, but it reads better and you could complement it by changing <code>playGame</code> to <code>play</code>, thus allowing you to write <code>higherOrLowerGame.play()</code>, which reads nicely.</p></li>
<li><p>Additionally, I personally like to use Pascal Case for classes and Lower Camel Case for variables: it can help clarify situations like <code>deck deck = new deck()</code> by making a clear distinction between the <code>deck</code>s: <code>Deck deck = new Deck()</code> looks better and clearer in my opinion.</p></li>
<li><p>I'd opt to de-hardcode this as much as possible, starting with the higherOrLower constructor. It has a for loop iterate from 0 to 7, but the boundary of <code>i &lt; 8</code> would be better if it was <code>i &lt; set.length</code>.</p></li>
<li><p>For dealing with all the variations of input, I would have an <code>ArrayList</code> for each input which have acceptable input values inserted into them at instantiation. Then, you can have <code>if (acceptableHigherInputs.contains(an)) {</code> (and similar for each of the possible inputs: higher, lower, yes, no) instead of the large switch block. It also makes it easy if you ever want to add other possible inputs for each function.</p></li>
<li><p>At first glance, I'd recommend changing the name of <code>playAgain</code>, as it is static, so <code>playAgain</code> doesn't make sense as it can still be called if there was no game in the first place. Looking at the contents of the function, I'd actually recommend removing it altogether. Instead, create a method called <code>setup</code> which generates a deck and resets flips, then replace the content of the constructor with a call to that method. Then, if the player wants to play again, you just need to call "setup" and then <code>playGame</code> instead of having the <code>playAgain</code> method create a new object.</p></li>
<li><p>Remove the <code>flip</code> method: it doesn't add any value, as it just increments a variable which can be done just as easily without the function, and it doesn't look like you have even called the function once in your code.</p></li>
<li><p>Use a <code>LinkedList&lt;Integer&gt;</code> (from <code>java.util.LinkedList</code>) in place of an integer array for your deck class. Firstly, from your <code>draw</code> method it looks like you're trying to return the first non-zero value in the array and then set it to zero. The <code>LinkedList</code>'s <code>pop</code> method will work better for you: it removes and returns the first value in the list. Thus, you can replace the content of your <code>draw</code> method with <code>return list.pop();</code>. Additionally, it has a <code>toString</code> method that provides formatting exactly how you have implemented your <code>toString</code> method, so you can replace the <code>toString</code>'s content with <code>return list.toString();</code>. Another benefit of using a <code>LinkedList</code> is that it allows you to use the <code>Collections.shuffle</code> method (from <code>java.util.Collections</code>), so you can remove your shuffle implementation.</p></li>
<li><p>If you end up using a <code>LinkedList</code>, you'll need to add values to it in either your constructor or a setup method: you can use a for loop to do this very easily, given the set of values that your array contains. <s>Additionally, I can't see a point of having 52 values in it, since they are repeated values and I don't believe the size of the array impacts the program at all: it shouldn't affect the odds of the number generation if you leave it at 13 values.</s></p></li>
</ul>

<p>EDIT:</p>

<p>Just some additional notes:</p>

<ul>
<li><p>Try to make your code as self-descriptive as possible: part of this is through variable naming. Names like <code>an</code> and <code>sc</code> are unclear on their own, however <code>userInput</code> and <code>inputScanner</code> are much clearer.</p></li>
<li><p>Only have one exit point for the program if you can help it. Don't call <code>System.exit</code> without reason: just let the program reach its end naturally. In this instance, if you don't call <code>System.exit</code>, the program will reach the end of <code>main</code> and terminate regardless.</p></li>
</ul>
    </div>