<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Magic Numbers</h2>

<p>Your biggest issue is too many magic numbers and hard-coded information.</p>

<p>If you added at the top of your script:</p>

<pre><code>ROWS = 5
COLUMNS = 5
</code></pre>

<p>then you could have:</p>

<pre><code>def create_random_ship():
    return random.randrange(ROWS), random.randrange(COLUMNS)
</code></pre>

<p>Game board can be created with:</p>

<pre><code>game_board = [["O"] * COLUMNS for _ in range(ROWS)]
</code></pre>

<p>And you can ask for input from the user with:</p>

<pre><code>row = int(input(f"Enter a row number between 1-{ROWS} &gt;: "))
</code></pre>

<p>Along the same vein, you could have:</p>

<pre><code>print(f"""\nIntroductions:
\nYou have {INIT_AMMO} ammo and there are {INIT_ENEMY} hidden ships on map.
...""")
</code></pre>

<p>so your welcome instructions can keep up-to-date with any changes to your game initial conditions.</p>

<h2>Instructions</h2>

<p>You have a <code>if __name__ == "__main__":</code> guard to prevent the code from running if imported into another script, but your instruction are unconditionally printed.  You should move the instruction printing into an <code>instructions()</code> function, and call that only if appropriate.</p>

<h2>Infinite Recursion</h2>

<p><code>play_game()</code> calls <code>play_again()</code>, which can call <code>play_game()</code>, which calls <code>play_again()</code>, which can call <code>play_game()</code>, which calls <code>play_again()</code>, which can call <code>play_game()</code>, which calls <code>play_again()</code>, which can call <code>play_game()</code>, which calls <code>play_again()</code>, which can call <code>play_game()</code>, which calls <code>play_again()</code>, which can call <code>play_game()</code>, which calls <code>play_again()</code>, which can call <code>play_game()</code>, which calls <code>play_again()</code>, which can call <code>play_game()</code>, which calls <code>play_again()</code>, which can call <code>play_game()</code>, which calls <code>play_again()</code>, which can call <code>play_game()</code>, which calls <code>play_again()</code>, which can call <code>play_game()</code>, which calls <code>play_again()</code>, which can call <code>play_game()</code>, which calls <code>play_again()</code>, which can call <code>play_game()</code>, which calls <code>play_again()</code>, which can call <code>play_game()</code>, which calls <code>play_again()</code>, which can call <code>play_game()</code>, which calls <code>play_again()</code>, which can call <code>play_game()</code>, which calls <code>play_again()</code>, which can call <code>play_game()</code>, which calls <code>play_again()</code>, which can call <code>play_game()</code>, which calls <code>play_again()</code>, which can call <code>play_game()</code>, which calls <code>play_again()</code>, which can call <code>play_game()</code>, which calls <code>play_again()</code>, which can call <code>play_game()</code>, which calls <code>play_again()</code>, which can call <code>play_game()</code>, which calls <code>play_again()</code>, which can call <code>play_game()</code>, which calls <code>play_again()</code>, which can call <code>play_game()</code>, which calls <code>play_again()</code>, which can call <code>play_game()</code>, which calls <code>play_again()</code>, which can call <code>play_game()</code>, ...</p>

<pre><code>Traceback (most recent call last):
  [...omitted...]
RecursionError: maximum recursion depth exceeded
</code></pre>

<p>Don't do that.  Much simpler is to have <code>play_again()</code> return a <code>True</code>/<code>False</code> result, and loop based on the return value:</p>

<pre><code>def play_many_games():

    instructions()

    play_game()

    while play_again():
        play_game()

    print("Goodbye!")

if __name__ == "__main__":
    play_many_games()
</code></pre>

<p>No more recursion.</p>

<p>In the comments, @Graipher suggests an alternate method to avoid the recursion:</p>

<pre><code>while True:
    play_game()
    if not play_again():
        break
</code></pre>

<p>Yet another alternative introduces a loop condition variable, which is pre-set before the loop:</p>

<pre><code> playing = True
 while playing:
     play_game()
     playing = play_again()
</code></pre>

<p>All three approaches avoid the infinite recursion.</p>

<h2>I Saw Three Ships...</h2>

<pre><code>ship1 = create_random_ship()
ship2 = create_random_ship()
ship3 = create_random_ship()

# ...

    elif (row, column) == ship1 or (row, column) == ship2 or (row, column) == ship3:
</code></pre>

<p>What are you going to do if you change this to four ships, or even 5 ships?</p>

<p>With computers, there are 3 important numbers: zero, one and many.  If you have more than one ship, you have "many" ships, and should put them in a container, such as a <code>list()</code>:</p>

<pre><code>ship_coordinates = []
for _ in range(ships_left):
    ship_coordinates.append(create_random_ship())
</code></pre>

<p>And when you want to see if a particular row/column matches any one of the ship coordinates in the container, you use the <code>in</code> function:</p>

<pre><code>    elif (row, column) in ship_coordinates:
</code></pre>

<p>There are other container types you can use, such as a <code>set()</code> which has faster <code>in</code> performance.  However, it cannot add the same value more than once, and using it would result in slightly different behaviour to what you currently have.  You've mentioned that you have a bug where ships can have the same coordinates, and I am trying very hard not to accidentally fix that.  (Code Review is for reviewing working code only, not help debugging, so I am tiptoeing around the bug, so that you can fix it yourself.)</p>
    </div>