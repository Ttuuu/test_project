<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You said to ignore <code>getWeekStart()</code>, but I'm afraid I can't do that.  It appears that the intention of <code>getWeekStart()</code> is to take a date string (in YYYY-MM-DD form) and find the Sunday that starts the week (in YYYY-MM-DD form).  However, depending on the time zone in which the code is executed, it may actually find the Monday, or possibly a Saturday instead.</p>

<p>The problem is that</p>

<ul>
<li><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#Parameters" rel="nofollow noreferrer"><code>new Date("<em>YYYY</em>-<em>MM</em>-<em>DD</em>")</code></a> interprets the date as a UTC timestamp:</p>

<blockquote>
  <p><strong>Note:</strong> parsing of date strings with the <code>Date</code> constructor (and <code>Date.parse</code>, they are equivalent) is strongly discouraged due to browser differences and inconsistencies. Support for RFC 2822 format strings is by convention only. Support for ISO 8601 formats differs in that <strong>date-only strings (e.g. "1970-01-01") are treated as UTC, not local</strong>.</p>
</blockquote></li>
<li><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getDay" rel="nofollow noreferrer"><code><em>date</em>.getDay()</code></a> returns the day of the week for the specified date <strong>according to local time</strong>, where 0 represents Sunday.</p></li>
<li><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString" rel="nofollow noreferrer"><code><em>date</em>.toISOString()</code></a> works in UTC:</p>

<blockquote>
  <p>The <code>toISOString()</code> method returns a string in simplified extended ISO format (<a href="http://en.wikipedia.org/wiki/ISO_8601" rel="nofollow noreferrer">ISO 8601</a>), which is always 24 or 27 characters long (<code>YYYY-MM-DDTHH:mm:ss.sssZ</code> or <code>±YYYYYY-MM-DDTHH:mm:ss.sssZ</code>, respectively). <strong>The timezone is always zero UTC offset</strong>, as denoted by the suffix "Z".</p>
</blockquote></li>
</ul>

<p>For the code to be reliably correct, you must work consistently in UTC — in other words, call <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCDay" rel="nofollow noreferrer"><code><em>date</em>.getUTCDay()</code></a> instead.</p>

<p>Furthermore, I'd rename <code>getWeekStart()</code> to <code>weekStart()</code>.  The "get" prefix implies that you are fetching something that already exists.  However, you are actually computing something, so the prefix is superfluous, perhaps even misleading.</p>
    </div>