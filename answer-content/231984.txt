<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First, note how you're doing a <code>if len(original) &gt; 0 and original.isalpha():</code> check, then printing <code>"empty"</code> if it fails. This means though that <code>"empty"</code> will be printed out if you input a non-alphabetical word, which is confusing. I'd either handle those two checks separately, or print out a generic error message instead like <code>"Invalid Input"</code>.</p>

<hr>

<p>You have</p>

<pre><code>new_word[1:len(new_word)]
</code></pre>

<p>To discard the first letter. There's actually a short-cut for this though:</p>

<pre><code>new_word[1:]
</code></pre>

<p>If you omit the second argument to the slice operator, it defaults to the length of the collection. If you omit the first, it defaults to the beginning of the collection. Combined, that's why <code>my_list[:]</code> makes a shallow copy of <code>my_list</code>.</p>

<hr>

<pre><code>first = word[0]
new_word = word + first + pyg
new_word = new_word[1:]
</code></pre>

<p>This chunk breaks off the first letter, does some concatenation, then chops off the first character of the new string. Note though that <code>word</code> will be on the front of <code>new_word</code>, so you can just chop off the first character of <code>word</code> at the same time you do <code>word[0]</code>. </p>

<p>If you were using Python 3, you could simply write:</p>

<pre><code>first, *rest_word = word
new_word = ''.join(rest_word) + first + pyg
</code></pre>

<p>It's just deconstructing the string, except that instead of the second character being stored in <code>rest_word</code>, everything that's left is stored in it. This essentially just separates the "head" of the string from the "tail".</p>

<p>Unfortunately, I came back a few hours later and realized that my original code that I had posted was wrong. <code>rest_word</code> is a <em>list of strings</em>, not a string itself. This necessitated the <code>''.join(rest_word)</code> bit. This method isn't quite as efficient in this case, but you may find that it's useful if you don't care what exact type the rest <code>*</code> variable is. If you just want to iterate it, it wouldn't matter.</p>

<hr>

<p>You overwrite <code>new_word</code> instead of creating a new variable. I would have created a new one to preserve the old <code>new_word</code>. That can be helpful when debugging.</p>

<hr>

<p>On success, you print out <code>new_word</code> <em>outside</em> of the <code>if</code>. That makes less sense than printing inside of it, <em>and</em> it causes an error to be raised if the <code>if</code> was <code>False</code> since <code>new_word</code> isn't defined.</p>

<hr>

<p>At the top you have <code>pyg</code>. It's a constant though, and according to Python's style guide, constants should be <a href="https://www.python.org/dev/peps/pep-0008/#constants" rel="nofollow noreferrer">uppercase, and separated by underscores</a>. I'd also make it more descriptive:</p>

<pre><code>PIG_LATIN_SUFFIX = 'ay'
</code></pre>

<hr>

<hr>

<p>You stated that the goal was to be short, so I won't go too into this, but you should make use of functions here. You have a couple discreet things going on here:</p>

<ul>
<li>Handling input from the user</li>
<li>Doing the conversion on the input</li>
</ul>

<p>And you have both of those things mixed up together.</p>

<p>I'd separate things out properly, and do some basic input checking:</p>

<pre><code>PIG_LATIN_SUFFIX = 'ay'


def convert_to_pig_latin(original_word):
    word = original_word.lower()
    first = word[0]
    rest_word = word[1:]

    return rest_word + first + PIG_LATIN_SUFFIX


def ask_for_input():
    while True:
        word = raw_input('Enter a word:')

        if len(word) &gt; 0 and word.isalpha():
            return word

        else:
            print("Invalid Input. Please try again.")


def main():
    original_word = ask_for_input()
    pig_word = convert_to_pig_latin(original_word)
    print pig_word
</code></pre>

<p><code>ask_for_input</code> will ask until it gets valid input now instead of just ending the program.</p>

<hr>

<hr>

<p>Oh ya, and <strong>switch to Python 3</strong>! Python 2 is about to have support for it discontinued.</p>
    </div>