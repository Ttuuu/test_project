<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2><code>for</code> with <code>range</code> and <code>len</code></h2>

<p>This is one of the most common things to be seen in python code to someone that isn't very familiar to python, however it's not Pythonic and almost always the wrong way to do it.</p>

<p>Firstly if you are not using the index, so there is no need to iterate base on the index. Consequently this can be replaced with a normal <code>for</code> over a collection, in your case, a <code>string</code>. </p>

<p>So this:</p>

<pre><code>for i in range(len(word)):
    if not curr.contains_key(word[i]):
        curr.put(word[i])
    curr = curr.get(word[i])
</code></pre>

<p>Should become this:</p>

<pre><code>for letter in word:
    if not curr.contains_key(letter):
        curr.put(letter)
    curr = curr.get(letter)
</code></pre>

<p>Note that the index was not necessary at all, and the code actually becomes clearer.</p>

<p>Even in cases where the index of the element is needed for something, you can use <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow noreferrer"><code>enumerate</code></a> which gives you a <code>tuple</code> for each element, holding both the index and the element:</p>

<pre><code>for index, letter in enumerate(word):
</code></pre>

<p>Which is still more readable and remains Pythonic</p>

<h2>Keys stored in array</h2>

<p>Even though it is reasonable to store keys in a array it is actually simpler to use a dictionary. Doing so avoids having to convert a character to value in the range 0-26 and still makes it simple to check whether it exists.</p>

<p>So instead of doing <code>self.children = [0]*26</code> you would do <code>self.children = {}</code>. Most of the <code>TrieNode</code> methods would have to be rewritten accordingly:</p>

<pre><code>def put(self, ch):
    self.children[ch] = TrieNode()

def get(self, ch):
    return self.children[ch]

def contains_key(self, ch):
    return ch in self.children
</code></pre>

<p>Note that they are all so small and simple that i would go as far as removing them and using <code>curr.children</code> directly in both in <code>insert</code>, <code>search</code> and <code>startsWith</code>.</p>

<p>i.e (<code>insert</code>):</p>

<pre><code>curr = self.root
for letter in word:
    if letter not in curr.children:
        curr.children[letter] = TrieNode()
    curr = curr.children[letter]
</code></pre>

<p>While using <code>curr.children</code> makes sense in this simple example, it may not be the case if there is a lot more logic in <code>TrieNode</code>. Each case is unique in a way, and what may be fine in one scenario may be bad in another.</p>

<p>The same can be said about the <code>is_end</code> method that merely returns <code>end</code>. Following this last step, you could go a step further and also use <code>end</code> directly as there isn't much to encapsulate. On top of that only <code>Trie</code> uses <code>TrieNode</code>. </p>

<p>On a side note, in cases where you need a getter, you should use the @property decorator which would be far more appropriate and Pythonic.</p>

<h2>camelCase</h2>

<p>I know the methods stubs were provided in the problem description, however, <em>camelCase</em> is not the typical naming convention for python  methods. The preferred style for this is <em>snake_case</em>, and as such, <code>startsWith</code> should be renamed to <code>starts_with</code>.</p>

<p>Feel free to take a look at the related PEP, <a href="https://www.python.org/dev/peps/pep-0008/#function-and-variable-names" rel="nofollow noreferrer">PEP 8 -- Style Guide for Python Code</a></p>
    </div>