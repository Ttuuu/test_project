<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><code>std::uint64_t</code> is consistently misspelt throughout the code, and may be a poor choice anyway (since an exact 64-bit type need not be provided).  It's better to use one of <code>std::uint_fast64_t</code> or <code>std::uint_least64_t</code> instead, for better portability.  (<strong>Edit</strong>: as suggested by supercat in a comment, only the exact-width type will work correctly here, given the implicit masking we rely on for detecting carry and elsewhere, so disregard this recommendation: we want to fail to compile where this won't hold.)</p>

<p>I'd expect constructors from other <code>intx::uint&lt;&gt;</code> instantiations (obviously, the narrowing conversions should be <code>explicit</code>).</p>

<p>The <code>++</code> and <code>--</code> operators could be implemented much more efficiently by using the members rather than converting and adding/subtracting.  Unary <code>-</code> might also be better implemented element-wise.</p>

<p>It's good to see that you've included a specialization of <code>std::numeric_limits</code> for this type.  A minor nitpick: I think that <code>digits10</code> needs to round up rather than down.  It's unfortunate that we're not allowed to specialize <code>std::is_integral</code> too.</p>

<p>A few problems in <code>from_string()</code>:</p>

<ul>
<li>Style (minor): writing <code>sizeof(x)</code> instead of simply <code>sizeof x</code> makes it look like <code>x</code> is a type name.</li>
<li>Actually, there's a more serious error in that line, in assuming that <code>char</code> is 8 bits (2 hex digits), rather than using <code>CHAR_BIT</code> - I'd write <code>sizeof x * CHAR_BIT / 4</code> there for full portability.</li>
<li>Alternatively, allow redundant leading zeros by simply checking <code>clz(x) &gt;= 4</code> before shifting.</li>
<li>Also, why are octal inputs to <code>from_string()</code> treated as decimal?  That's surprising to me.</li>
<li>It might be useful to have (private) multiply/divide routines for the small multiplicands in <code>from_string()</code> and <code>to_string()</code>.</li>
<li>Perhaps we could skip over any leading whitespace and/or <code>+</code>, like the standard conversion functions (<code>std::stoi()</code>, <code>std::from_chars()</code>, etc) do?</li>
</ul>

<p>These string conversions look like they could easily be adapted to become streaming operators <code>&lt;&lt;</code> and <code>&gt;&gt;</code>.</p>

<p>Finally, it's a great shame that you didn't include the unit tests in the review; that would have greatly aided reviewers (especially when making suggestions for improvement).</p>
    </div>