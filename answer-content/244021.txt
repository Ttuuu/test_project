<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your function seems to work fine, but you can condense it a bit by search for all bracket types in one regex replace with the following pattern:</p>
<pre><code>/[\(\)\[\]\{\}]/g
</code></pre>
<p>and then use the <code>replace</code> function that takes a replace function as argument:</p>
<pre><code>const brs = "()({}{[][";
function flipBracketsDirection(str) {
  return str.replace(/[\(\)\[\]\{\}]/g, br =&gt; brs[brs.indexOf(br) + 1]);
}
</code></pre>
<p><code>brs</code> holds all the replaceable brackets with the opening brackets twice, so <code>brs[brs.indexOf(')') + 1]</code> finds <code>'('</code> as the next char in <code>brs</code>;</p>
<p>You could also let <code>brs</code> be an object like:</p>
<pre><code>const brs =
{
  "(": ')',
  ")": '(',
  "{": '}',
  "}": '{',
  "[": ']',
  "]": '[',
};
</code></pre>
<p>and then cquery it as:</p>
<pre><code>function flipBracketsDirection(str) {
  return str.replace(/[\(\)\[\]\{\}]/g, br =&gt; brs[br]);
}
</code></pre>
<p>Your version actually query the string nine times, where the above only iterates it once.</p>
<p>As an alternative to the 'sophisticated' <code>brs</code> dictionary-solution, you could just create a function with a switch statement:</p>
<pre><code>function swapBracket(br) {
  switch (br) {
    case '(': return ')';
    case ')': return '(';
    case '{': return '}';
    case '}': return '{';
    case '[': return ']';
    case ']': return '[';
  }
}
</code></pre>
<p>And call that instead, this way:</p>
<pre><code>function flipBracketsDirection(str: string) {
  return str.replace(/[\(\)\[\]\{\}]/g, swapBracket);
}

flipBracketsDirection('}hello{');
// will return {hello}
</code></pre>
<hr>
<p>Your tests cases could also be simplified, so it is easier to maintain - for instance like:</p>
<pre><code>  let strs = [
    ')hello(',
    'this has ]some text[',
    'flip }any{ brackets',
    'even with )))]multiple[((( brackets'
  ];

  for (let s of strs) {
    let t = flipBracketsDirection(s);
    console.log(t);
    console.log(flipBracketsDirection(t));
    console.log("");
  }
</code></pre>
<hr>
<p>Both the above suggestions should conform to the DRY principle.</p>
    </div>