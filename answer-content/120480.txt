<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your <code>seconds_since_epoch</code> function has a built-in Python equivalent, <a href="https://docs.python.org/3/library/datetime.html#datetime.datetime.timestamp"><strong><code>datetime.timestamp</code></strong></a>.</p>

<p>Your namespaces would be cleaner if you did <code>from datetime import datetime, timezone</code>.</p>

<p>You use a <code>base_url</code> variable, but do not use <a href="https://docs.python.org/3.0/library/urllib.parse.html#urllib.parse.urljoin"><strong><code>urllib.parse.urljoin</code></strong></a>. Either use a hardcoded URL, or properly join the base URL with the fragment.</p>

<p><code>results</code> is better named as <code>questions</code>.</p>

<p>In <code>sum([q["answer_count"] for q in results])</code> the <code>[]</code> is superfluous and inefficient.</p>

<p>Instead of <code>print</code>ing 3 times in a row create a multiline format string and print once.</p>

<p>You never create a function that returns the questions, and do not define a main function. I suggest printing in the main function, that calls a function that gets and returns the question information.</p>

<hr>

<p>This is how I would program it:</p>

<pre><code>import requests
import time
from datetime import datetime, timezone, timedelta


def get_question_info(site, start, stop):
    API_URL = "https://api.stackexchange.com/2.2/questions"
    req_params = {
        "site": site,
        "fromdate": int(start.timestamp()),
        "todate": int(stop.timestamp()),
        "pagesize": 100,
        "page": 1
    }

    questions = []
    while True:
        req = requests.get(API_URL, params=req_params)
        contents = req.json()
        questions.extend(contents["items"])

        if not contents["has_more"]:
            break
        req_params["page"] += 1

        if "backoff" in contents:
            time.sleep(contents["backoff"])

    return questions


def get_area51_estimate(site):
    now = datetime.now(timezone.utc)
    fortnight_ago = now - timedelta(days=14)
    questions = get_question_info(site, fortnight_ago, now)
    avg_questions = len(questions) / 14
    avg_answers = sum(q["answer_count"] for q in questions) / len(questions)
    return avg_questions, avg_answers


if __name__ == "__main__":
    msg = """Over the past 2 weeks, PPCG has had...
{:.1f} questions per day
{:.1f} answers per question"""
    print(msg.format(*get_area51_estimate("codegolf")))
</code></pre>
    </div>