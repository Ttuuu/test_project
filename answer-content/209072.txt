<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>naming</h1>

<p>The naming convention is wrong. PEP-008 standardizes on <code>snake_case</code> for variables and functions, as the naming itself is unclear. What is <code>rx</code>? It is a <code>re</code>pattern. Then call it so. <code>adict</code> is indeed a dict, but it contains the hashes, so also call it like that.</p>

<h1><code>map</code></h1>

<p><code>map</code> is a useful tool, but not a lot of people use it or know it. Especially since the advent of generator expressions, it is also hardly ever needed to use. I find a generator expression a lot simpler to read:</p>

<pre><code>def make_xlat(hashes: dict) -&gt; typing.Callable[[str], str]:
    pattern = re.compile("|".join(re.escape(key) for key in hashes))
    def one_xlat(match):
        return hashes[match.group(0)]

    def xlat(text: str):
        return pattern.sub(one_xlat, text)

    return xlat
</code></pre>

<h1>the hashes</h1>

<p>You use a convoluted way <code>str(choice(range(1111, 9999, 1)))</code> to generate a random number. This will lead to collisions. The easiest way to tackle this, is to use a generator, which keeps what numbers are given out already.</p>

<pre><code>def get_random_ids(begin=0, end=9999):
    yield from random.sample(range(begin, end + 1), end - begin + 1)
</code></pre>

<p>The downside is this materializes a <code>list</code> with all the elements. For the 10000 numbers, this is still okay, but if you need a number with 10 digits, this starts to count. An alternative here would be something like this:</p>

<pre><code>def get_random_ids(begin=0, end=9999):
    seen = set()
    while True:
        number = random.randint(begin, end)
        if number in seen:
            continue
        seen.add(number)
        yield number
</code></pre>

<p>But this only helps if you need a limited number of id's with a long length</p>

<p>To help you with testing, it helps if you can supply a seed to put the pseudo-random generator in the same state every time you test a particular piece</p>

<pre><code>def get_random_ids(begin=0, end=9999, seed=None, ):
    """
    generates unique random integers between `begin` and `end`

    The random generator can be seeded with `seed`
    """
    if seed is not None:
        random.seed(seed)
    yield from random.sample(range(begin, end + 1), end - begin + 1)
</code></pre>

<h1><code>pathlib.Path</code></h1>

<p>If instead of with the bare filenames, you convert them into a <code>Path</code>, reading and writing becomes a lot easier:</p>

<pre><code>input_file = Path("latex_sample.tex")
input_text = input_file.read_text()
</code></pre>

<p>then to output to the hashed text, you can use <code>with_suffix</code> or <code>with_name</code></p>

<pre><code>hashed_file = input_file.with_suffix(".hash.tex")
hashed_file.write_text(hashed_text)
</code></pre>

<h1>regex pattern</h1>

<p>you have a very long regex pattern. In your <code>make_xlat</code> function you assemble one on the fly with <code>'|'.join</code>. You can do that here as well</p>

<pre><code>commands = (
    r"\\begin\{\w+\}",
    r"\t",
    "    ",
    "\r",
    r"\\end\{\w+\}",
    r"\\usepackage\{\w+\}",
    r"\\newcommand\{\w+\}",
    r"\\include\{.*\}",
    r"\\input\{\w+\}",
    r"\\\w+\[.*\}",
    r"\%.*",
    r"\\\w+",
)
search_pattern = re.compile("|".join(commands))
</code></pre>

<p>This way you can easily add commands or add comments for the more obscure commands</p>

<h1>the translation</h1>

<p>You go over the hashed text line per line, depending on some condition translate, and then do a lot of sting concatenation</p>

<p>This can be done a lot simpler with a generator:</p>

<pre><code>def translate(text: str, lang_in="DE", lang_out="EN"):
    hash_pattern = re.compile(r"^X#X\d{4}$")
    for line in text.splitlines():
        if line in {"", "\n"} or hash_pattern.match(line):
            yield line
        else:
            yield pydeepl.translate(line, lang_in, lang_out)
translation = "\n".join(translate(hashed_text, lang_in="DE", lang_out="EN"))
</code></pre>

<p>Instead of checking <code>startswith</code> and <code>len</code>, I used a regular expression</p>

<h1>split the work</h1>

<p>This code:</p>

<ul>
<li>reads a texts</li>
<li>hashes the commands</li>
<li>translates the text</li>
<li>dehashes the commands</li>
<li>writes to an output file</li>
<li>save the hashes to a file</li>
</ul>

<p>You only split of a part of the hashing of the commands. It is simpler, clearer and easier to test if you also split of the rest</p>

<pre><code>def hash_commands(
    input_text: str, random_seed=None
) -&gt; typing.Tuple[str, typing.Mapping]:
    commands = (
        r"\\begin\{\w+\}",
        r"\t",
        "    ",
        "\r",
        r"\\end\{\w+\}",
        r"\\usepackage\{\w+\}",
        r"\\newcommand\{\w+\}",
        r"\\include\{.*\}",
        r"\\input\{\w+\}",
        r"\\\w+\[.*\}",
        r"\%.*",
        r"\\\w+",
    )
    search_pattern = re.compile("|".join(commands))
    ids = get_random_ids(seed=random_seed)

    matches = search_pattern.findall(input_text)
    hashes = {
        command: f"X#X{id:04}"
        for command, id in zip(matches, ids)
    }
    translate = make_xlat(hashes)
    hashed_text = translate(input_text)
    return hashed_text, hashes
</code></pre>

<p>takes a text, and hashes the commands. A way to generalize this would be to make the <code>commands</code> tuple an argument, or split of the generation of the <code>hashes</code>dict to a separate function, and use <code>hashes</code> as an argument to the <code>hash_commands</code> function.</p>

<pre><code>def dehash_text(hashed_text: str, hashes: typing.Mapping):
    hashes_inverse = {hash: command for command, hash in hashes.items()}
    translate = make_xlat(hashes_inverse)
    return translate(hashed_text)
</code></pre>

<p>does the inverse.</p>

<pre><code>def save_hashes(hashes, out_file):
    hashes_inverse = {hash: command for command, hash in hashes.items()}
    json.dump(
        {"hashes": hashes, "inverse": hashes_inverse}, out_file, indent=4
    )
</code></pre>

<p>and then the main logic become very simple and easy to understand</p>

<pre><code>if __name__ == "__main__":
    input_file = Path("latex_sample.tex")
    input_text = input_file.read_text()
    hashed_text, hashes = hash_commands(input_text=input_text, random_seed=42)

    hash_file = Path("hash_dict.json")
    with hash_file.open("w") as hash_filehandle:
        save_hashes(hashes, hash_filehandle)

    hashed_file = input_file.with_suffix(".hash.tex")
    hashed_file.write_text(hashed_text)

    translation = "\n".join(translate(hashed_text, lang_in="DE", lang_out="EN"))
    translation_dehashed = dehash_text(translation, hashes)
    # print(translation_dehashed)
    output_file = input_file.with_suffix(".trans.tex")
    output_file.write_text(translation_dehashed)
</code></pre>

<p>I included an output of the hashed text, so you can see whether the function correctly recognises the commands. That way you see it doesn't recognise the <code>\usepackage{tree-dvips}</code></p>
    </div>