<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your project is looking great! But I have a few thoughts on how to improve the clarity of your javascript code:</p>

<hr>

<p><strong>Unused code</strong></p>

<p>Your <code>window.resize</code> handler doesn't end up doing anything. Functions create a new scope for variables, so since you're redeclaring <code>docWidth</code> and <code>slidesWidth</code> with <code>var</code>, you don't actually affect the initially declared variables. The reason why all your code still works is that the body's width and the slide's width don't actually change when the window is resized. I'm not sure if this is different on mobile or even why the widths aren't changing (maybe it has something to do with your css) but you ought to either change the handler to something like:</p>

<pre><code>$(window).on('resize', function() {
  docWidth = $('body').width();
  slidesWidth = $images.width(); // stay consistent with this variable
  rangeX = slidesWidth - docWidth;
})
</code></pre>

<p>Or just remove it to prevent confusion if the widths aren't affected by resizing.</p>

<p>You also don't end up using <code>rangeX</code> in your code. Consider removing it.</p>

<hr>

<p><strong>More straightforward calculation</strong></p>

<p>I think you could simplify the way you calculate the offset in your <code>document.mousemove</code> handler by eliminating the <code>mousePercent</code> variable:</p>

<pre><code>$(document).on('mousemove', function(e) {
  var mouseX = e.pageX,
    offset = mouseX / docWidth * slidesWidth - mouseX / 2;

  $images.css({
    '-webkit-transform': 'translate3d(' + -offset + 'px,0,0)',
    'transform': 'translate3d(' + -offset + 'px,0,0)'
  });
});
</code></pre>

<p>This way you don't multiply by 100 and then divide by it right after, and you also have fewer variables to worry about.</p>

<hr>

<p><strong>Unnecessary functionality</strong></p>

<p>You don't use the 3d aspect of translate so why not just use the 2d version:</p>

<pre><code>$images.css({
  '-o-transform': 'translate(' + -offset + 'px, 0)', // opera 11.5
  '-ms-transform': 'translate(' + -offset + 'px, 0)', // IE9
  '-moz-transform': 'translate(' + -offset + 'px, 0)', // firefox 3.5-15
  '-webkit-transform': 'translate(' + -offset + 'px, 0)',
  'transform': 'translate(' + -offset + 'px,0)'
});
</code></pre>

<hr>

<p><strong>More concise and direct jquery syntax</strong></p>

<p>Another option would be to use jquery's built in methods for creating events instead of using <code>on</code>:</p>

<pre><code>$(document).ready(function() {
  var docWidth = $('body').width(),
    slidesWidth = $('#imgs').width(),
    rangeX = slidesWidth - docWidth,
    $images = $('#imgs');

  $(window).resize(function() {
    var docWidth = $('body').width(),
      slidesWidth = $('#imgs').width(),
      rangeX = slidesWidth - docWidth;
  })

  $(document).mousemove(function(e) {
    var mouseX = e.pageX,
      percentMouse = mouseX * 100 / docWidth,
      offset = percentMouse / 100 * slidesWidth - percentMouse / 200 * docWidth;

    $images.css({
      '-webkit-transform': 'translate3d(' + -offset + 'px,0,0)',
      'transform': 'translate3d(' + -offset + 'px,0,0)'
    });
  });
});
</code></pre>

<hr>

<p>Once again, great work so far! I wish I could have helped more with the snapping issue. I have a few ideas--<code>mouseenter</code>, <code>jquery.stop().animate()</code>--but none that are fully developed. Good luck figuring it out!</p>
    </div>