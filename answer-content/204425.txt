<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Thanks Toby for the advice, I've updated my code to reflect most of your comments to the best of my ability:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;iterator&gt;

#ifndef __PBAR_H
#define __PBAR_H

namespace pbar {

template&lt;class It&gt;
class ProgressBar {
public:
  ProgressBar(It it, It it_end, size_t width, const char symbol='=')
      : count_(0),
        width_(width), 
        symbol_(symbol), 
        iter_(std::move(it)),
        iter_begin_(iter_),
        iter_end_(std::move(it_end))
  {
    size_ = std::distance(iter_begin_, iter_end_); 
  }

  struct iterator {

    using iterator_category = typename It::iterator_category;
    using value_type = typename It::value_type;
    using difference_type = typename It::difference_type;
    using pointer = typename It::pointer;
    using reference = typename It::reference;

  public:
    iterator(ProgressBar&lt;It&gt;&amp; parent, It&amp; iter) 
      : parent_(parent), iter_(iter) {}

    iterator&amp; operator++();
    iterator operator++(int);

    bool operator==(const iterator&amp; other) const;
    bool operator!=(const iterator&amp; other) const;

    reference operator*() const;

  private:
    ProgressBar&lt;It&gt;&amp; parent_;
    It&amp; iter_;

  };

  iterator begin();
  iterator end();

  template&lt;class I&gt;
  friend std::ostream&amp; operator&lt;&lt;(std::ostream&amp;, const ProgressBar&lt;I&gt;&amp;);

private:
  size_t count_;
  size_t width_;
  size_t size_;

  char symbol_;
  char left_delim_{'['};
  char right_delim_{']'};
  char pointer_{'&gt;'};

  It iter_;
  It iter_begin_;
  It iter_end_;

}; // class ProgressBar

template&lt;class It&gt;
inline bool ProgressBar&lt;It&gt;::iterator::operator==(
    const ProgressBar&lt;It&gt;::iterator&amp; other) const {
  return iter_ == other.iter_;
}

template&lt;class It&gt;
inline bool ProgressBar&lt;It&gt;::iterator::operator!=(
    const ProgressBar&lt;It&gt;::iterator&amp; other) const {
  return !(*this == other);
}

template&lt;class It&gt;
inline typename It::reference ProgressBar&lt;It&gt;::iterator::operator*() const {
  return *iter_;
}

template&lt;class It&gt;
inline typename ProgressBar&lt;It&gt;::iterator&amp; ProgressBar&lt;It&gt;::iterator::operator++() {
  ++(iter_); 
  ++parent_.count_;
  std::clog &lt;&lt; parent_;
  return *this; 
}

template&lt;class It&gt;
inline typename ProgressBar&lt;It&gt;::iterator ProgressBar&lt;It&gt;::iterator::operator++(int) {
  auto retval = *this;
  ++(*this);
  return retval;
}

template&lt;class It&gt;
inline typename ProgressBar&lt;It&gt;::iterator ProgressBar&lt;It&gt;::begin() {
  return ProgressBar&lt;It&gt;::iterator(*this, iter_begin_);
}

template&lt;class It&gt;
inline typename ProgressBar&lt;It&gt;::iterator ProgressBar&lt;It&gt;::end() {
  return ProgressBar&lt;It&gt;::iterator(*this, iter_end_);
}

template&lt;class It&gt;
inline std::ostream&amp; operator&lt;&lt;(std::ostream &amp;stream, const ProgressBar&lt;It&gt; &amp;pbar) {
  size_t pos = pbar.width_*pbar.count_/pbar.size_;
  stream &lt;&lt; pbar.left_delim_;
  for (int i=0; i&lt;pbar.width_; i++) {
    if (i &lt; pos)
      stream &lt;&lt; pbar.symbol_;
    else if (i == pos)
      stream &lt;&lt; pbar.pointer_;
    else
      stream &lt;&lt; " ";
  }
  stream &lt;&lt; pbar.right_delim_ &lt;&lt; pbar.count_*100/pbar.size_ &lt;&lt; "%\r";
  stream.flush();
  return stream;
}

}; // namespace pbar

#endif // __PBAR_H
</code></pre>

<p>One thing I'm puzzled about is how to get <code>begin()</code> and <code>end()</code> to be const. Currently, they return an iterator whose constructor takes the parent class by reference, which drops the const. One way I can imagine fixing it is by moving most of the logic into the iterator subclass, which would essentially turn <code>ProgressBar</code> into a front for the encapsulated iterator, but I'm wondering if there isn't a better way to do it.</p>
    </div>