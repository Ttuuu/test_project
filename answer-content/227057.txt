<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Usability (WPF Only)</h2>

<p>I've read in comments on a different answer that you were going to wrap <code>private readonly System.Windows.Threading.Dispatcher _context;</code> in some kind of custom dispatcher. Don't do this! Your class depends on a WPF dispatcher, hence it's use cases are limited to WPF. You should use a <a href="https://docs.microsoft.com/en-us/dotnet/api/system.threading.tasks.taskscheduler.fromcurrentsynchronizationcontext?view=netframework-4.8" rel="nofollow noreferrer">TaskScheduler</a> instead. If you create your list in the main UI thread of WPF, you could give it an instance like this:</p>

<pre><code>var uiCallbackScheduler = TaskScheduler.FromCurrentSynchronizationContext();
</code></pre>

<p>You are using some nasty tricks to make the collection work for unit tests I suppose. The problem is you have a hard dependency on <code>Application.Current</code>. Whether you keep the dispatcher or use a task scheduler, you should always try to avoid dependencies like this. You won't even be able to test the production pattern (using a dispatcher) in unit tests.</p>

<blockquote>
<pre><code> // so you won't always have a dispatcher, why allow this?
_context = Application.Current?.Dispatcher; 

private void notify(NotifyCollectionChangedEventArgs args)
{
    if (_context == null)
    {
        invokeCollectionChanged(args);
    }
    else
    {
        _context.InvokeAsync(() =&gt; invokeCollectionChanged(args));
    }
}
</code></pre>
</blockquote>
    </div>