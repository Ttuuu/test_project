<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Style</h2>
<ul>
<li>Javascript uses camelCase for naming. Don't use snake_case.</li>
<li>Use functions to reduce repetition.</li>
<li>Use the shortest or simplest form. Eg you define RegExp as strings and then create them when needed. It is simpler to define the RegExp directly, saving the need to add the extra control character delimiter <code>\\</code>.</li>
<li>Don't duplicate code. You test for <code>mode</code> not equal to <code>"file"</code> and <code>"folder"</code> then you test for mode equal to <code>"file"</code> then <code>"folder"</code> where a final else clause will do the first test without extra overhead. However I would wonder why the function is called with an unknown mode?</li>
<li>Use arrow functions when you can to reduce code size and thus increasing readability.</li>
<li>Don't assign variables with unused content that will be replaced further in the code. Eg <code>let suffix = "";</code> should be <code>let suffix;</code>.</li>
<li>Learn to use the correct scope variable. In function scope you should use <code>var</code> not <code>let</code> and should be defined at the top of the function</li>
<li>In JavaScript for the browser an element is a very specific type of object, generally when iterating a nondescript array of items we call the item <code>item</code>, using <code>element</code> is misrepresenting what it is.</li>
</ul>
<h2>Code</h2>
<ul>
<li>You say legacy, but there is no clue as to which system you are converting to.</li>
<li>Your code comments indicate that <code>mode</code> is  <code>* @param {string} mode     "file" / "folder"</code> as a string yet no indication that it can be another value and such value would modify the return type.</li>
<li>The documentation comments give no return value and type. This is a particularly glaring omission as the return type can be two different types, a <code>string</code> or a <code>boolean</code>. Parcial, or incorrect documentation is worse than no documentation.</li>
<li>The differing return types based on <code>mode</code> is very problematic, and means that you need to add code to the calling function to test the return. This means that there is an indirect duplication of the test, in the function and the calling function. You may as well have the calling function determine if it should call the function in the first place and hive the function only return a fixed type.</li>
<li>Convert to the file/dir name to lowercase as first step.</li>
<li>Is the extension to keep its case?? I would think not (though this is a guess on my part)</li>
<li>There is no need to add the grouping to the regExp's <code>\()\</code> as you don't use them.</li>
<li>There is no need to create a new variable to hold <code>object_name</code>, you can use it (the argument) rather than create a new one.</li>
<li>When you strip the extension (suffix) from the filename, you use a global regExp. It is possible for filenames to include many <code>"."</code> eg the filename <code>"myfile.common.com"</code> would be replaced with <code>"myfilemon"</code> rather than <code>"myfile.common"</code>. You could store the split name and join it after popping the extension, or just trim the string.</li>
<li>Names.
<ul>
<li><code>object_name</code> is a bit vague, its a filename or directory name, <code>name</code> is ma ybe a better name?</li>
<li><code>mode</code> a little odd, maybe <code>type</code> is a better description?</li>
<li><code>suffix</code> though not incorrect the more common name is <code>fileExtension</code>, <code>fileExt</code>, <code>extension</code> or <code>ext</code>.</li>
<li><code>retvar</code> Should be <code>retVar</code> (camelCase) but that said it is a bad name. It is a <code>var</code> (well technically a <code>let</code>) so you have included a obvious implied attribute of the variable. Generally for non specific return variable we use <code>result</code> or in this case may be <code>sanitizedName</code> would be better? (or see example where <code>name</code> is used to hold the result)</li>
<li><code>element</code> is a DOM object, can be confusing so maybe a better name is <code>item</code>?</li>
</ul>
</li>
</ul>
<h2>The rewrite</h2>
<p>Addressing most of the points above the rewrite only returns a string (<code>mode</code> now called <code>type</code> is <code>"file"</code> or it defaults as <code>"folder"</code>). Converts the extension to lowercase. Use RegExp literals rather than create them via instantiation. Use arrays to hold replacement arguments so that the spread operator can be used to call replace.</p>
<p>Please Note that I had to remove many <code>/</code> from the reg expressions, I did not test the edited regExps so the last one may have errors regarding what it replaces.</p>
<pre><code>/**
 * @description Sanitizes a folder or file name to work with #name of legacy system
 *              Legacy system unknown
 * @author BM67
 * @param {String} name The string to sanitize
 * @param {String} type  Optional "file" or default is assumed "folder"
 * @return {String} The sanitized name
 */ 

function sanitizeFolderOrFile(name, type) { // type is "file" all else is "folder"
    var ext = "";  // adds the default at return if type is folder
    name = name.toLowerCase(); // move below following statement if case must be maintained
    if (type === "file") {
        const parts = name.split(".");
        ext = "." + parts.pop();
        name = parts.join(".");  // Could join with "_" as you replace it later
    }    
    [[/[+\&amp;]/g, "u"], [/ä/g, "ae"], [/ö/g, "oe"], [/ü/g, "ue"], [/ß/g, "ss"],
        [/[ \`\´\?\(\)\[\]\{\}\/\\$\§\"\'\!\=\-\.\,\;\:&lt;&gt;\|\^\°\*\+\~\%]/g, "_"]
    ].forEach(item =&gt; name = name.replace(...item));
    return name + ext;
}
</code></pre>
<p>Or for those that like it spaced out (Note also keep extension case)</p>
<pre><code>function sanitizeFolderOrFile(name, type) {
    var ext = "";
    if (type === "file") {
        const parts = name.split(".");
        ext = "." + parts.pop();
        name = parts.join("_"); 
    }
    name = name.toLowerCase();
    [
        [/[+\&amp;]/g, "u"], 
        [/ä/g, "ae"], 
        [/ö/g, "oe"], 
        [/ü/g, "ue"], 
        [/ß/g, "ss"],
        [/[ \`\´\?\(\)\[\]\{\}\/\\$\§\"\'\!\=\-\.\,\;\:&lt;&gt;\|\^\°\*\+\~\%]/g, "_"]
    ].forEach(item =&gt; name = name.replace(...item));
    return name + ext;
}
</code></pre>
<p>And the ES5 version</p>
<pre><code>function sanitizeFolderOrFile(name, type) {
    var parts, ext = "";
    if (type === "file") {
        parts = name.split(".");
        ext = "." + parts.pop();
        name = parts.join("_"); 
    }
    name = name.toLowerCase();
    [
        [/[+\&amp;]/g, "u"], 
        [/ä/g, "ae"], 
        [/ö/g, "oe"], 
        [/ü/g, "ue"], 
        [/ß/g, "ss"],
        [/[ \`\´\?\(\)\[\]\{\}\/\\$\§\"\'\!\=\-\.\,\;\:&lt;&gt;\|\^\°\*\+\~\%]/g, "_"]
    ].forEach(item =&gt; name = name.replace(item[0], item[1]));
    return name + ext;
}
</code></pre>
    </div>