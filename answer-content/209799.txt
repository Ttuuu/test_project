<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Because you’re allowing path traversal, your function doesn’t restrict even system paths. To exemplify the danger of your function, check examples below, where <code>realpath('.')</code> points to <code>/web/users/alice</code>:</p>

<pre><code>DesiredRealPath('files/photos'); # It returns `/web/users/alice/files/photos` and this is OK
DesiredRealPath('/etc/passwd'); # It returns `/etc/passwd` and it’s very BAD
DesiredRealPath('../bob/photos'); # It returns `/web/users/bob/photos` and this is also BAD
</code></pre>

<p>To protect against <a href="https://www.owasp.org/index.php/Path_Traversal" rel="nofollow noreferrer">Path Traversal Attack</a>, you should ignore “dot” directories. For example, consider this function:</p>

<pre><code>function basepath($rel_path)
{
    $base = str_replace('\\', '/', realpath('.'));
    $parts = explode('/', str_replace('\\', '/', $rel_path));

    foreach ($parts as $part) {
        if ($part &amp;&amp; $part != '.' &amp;&amp; $part != '..') {
            $base .= "/{$part}";
        }
    }
    return $base;
}
</code></pre>

<p>Testing the same paths as in the example above, no one escapes the <code>/web/users/alice</code> directory:</p>

<pre><code>basepath('files/photos'); # /web/users/alice/files/photos
basepath('/etc/passwd'); # /web/users/alice/etc/passwd
basepath('../bob/photos'); # /web/users/alice/bob/photos
</code></pre>

<p>For better security, make sure to configure the <a href="https://secure.php.net/manual/en/ini.core.php#ini.open-basedir" rel="nofollow noreferrer">open_basedir</a> directive correctly.</p>

<p>By the way, if you have a script for which you want prevent path traversal, add the following at the top of your script:</p>

<pre><code>ini_set('open_basedir', __DIR__);
</code></pre>
    </div>