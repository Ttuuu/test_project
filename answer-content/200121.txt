<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Kraskevich's solution has one problem which is get the prime factors in set of 2,3,4,... In fact , we can get the primes in the set of 2,3,5,7,9...(2 and odd numbers), the bellow code avoids unnecessary operations on even numbers(greater than 2).</p>

<pre><code>factors' :: Integral t =&gt; t -&gt; [t]
factors' n
  | n &lt; 0 = factors' (-n)
  | n &gt; 0 = if 1 == n
               then []
               else let fac = mfac n 2 in fac : factors' (n `div` fac)
  where mfac m x
          | rem m x == 0 = x
          | x * x &gt; m    = m -- if this line code can be matched, this is to say m can not be divided by 2,3,5,7,...n, n is the largest odd number less than sqrt(m). In other words, it is consistent with the definition of prime numbers.
          | otherwise    = mfac m (if odd x then x + 2 else x + 1) -- get factor in (2,3,5,7,9...)
</code></pre>

<p>In this problem, we should pay attention to</p>

<ol>
<li>give a number n, x bellow to the set of 2,3,4,...,n-1(in above code, we use its subset(2 and even number)). if n is the smallest number that can be divisible by xï¼Œthen n is always a prime number.</li>
<li>give a number n, we can define <code>n = p1 * p2 * p3 *...* pi * pj * ...  pi is prime, pi &lt;= pj</code> so we can get <code>n/p1 = p2 * p3 * ...pi * pj...</code>, what is p1? p1 is the number which gets in <code>1.</code></li>
</ol>
    </div>