<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I had a bit too much fun playing with this and came up with a circular list implementation with a running total that's not much of a win (or sometimes even slower) for smaller sizes but gets a lot faster as you scale up.  The fun part was coming up with a nice framework for testing different implementations with different sizes (I used both your original implementation and Ignacio's deque as references) -- even if my implementation isn't useful for your case I hope it serves as a good example of test-driven development.  :)</p>

<pre><code>from abc import abstractmethod
from collections import deque
from time import time
from typing import Deque, Iterable, List, Tuple, Type

class NumberStorage:

    def __init__(self, storage_size: int) -&gt; None:
        self._capacity = storage_size

    @abstractmethod
    def store(self, new_number: int) -&gt; Tuple[Iterable[int], int]:
        """
        Stores the new number, dropping the oldest number if capacity is exceeded.
        Returns an iterable of all the stored numbers, and their sum.
        """
        pass

class NaiveStorage(NumberStorage):

    def __init__(self, storage_size: int) -&gt; None:
        super().__init__(storage_size)
        self._storage: List[int] = []

    def store(self, new_number: int) -&gt; Tuple[List[int], int]:
        self._storage.append(new_number)
        if len(self._storage) &gt; self._capacity:
            del self._storage[0]
        return self._storage, sum(self._storage)

class DequeStorage(NumberStorage):

    def __init__(self, storage_size: int) -&gt; None:
        super().__init__(storage_size)
        self._storage: Deque[int] = deque(maxlen=storage_size)

    def store(self, new_number: int) -&gt; Tuple[Deque[int], int]:
        self._storage.append(new_number)
        return self._storage, sum(self._storage)

class CircularStorage(NumberStorage):

    def __init__(self, storage_size: int) -&gt; None:
        super().__init__(storage_size)
        self._oldest = 0
        self._total = 0
        self._storage: List[int] = []

    def store(self, new_number: int) -&gt; Tuple[List[int], int]:
        self._total += new_number
        if len(self._storage) &lt; self._capacity:
            self._storage.append(new_number)
        else:
            self._total -= self._storage[self._oldest]
            self._storage[self._oldest] = new_number
            self._oldest += 1
            if self._oldest == self._capacity:
                self._oldest = 0
        return self._storage, self._total

def test_storage(
    storage_type: Type[NumberStorage], 
    capacity: int, 
    iterations: int, 
) -&gt; None:
    start_time = time()
    storage = storage_type(capacity)
    for x in range(iterations):
        _, total = storage.store(x)
    print("{}\t(max={}, n={}) \tsum: {}\ttime : {}".format(
        storage_type.__name__,
        capacity,
        iterations,
        total,
        time() - start_time),
    )

for capacity, iterations in [(10**1, 10**2), (10**2, 10**4), (10**3, 10**6)]:
    for storage in (NaiveStorage, DequeStorage, CircularStorage):
        test_storage(storage, capacity, iterations)
</code></pre>

<p>My output is:</p>

<pre><code>NaiveStorage    (max=10, n=100)         sum: 945        time : 0.0
DequeStorage    (max=10, n=100)         sum: 945        time : 0.0
CircularStorage (max=10, n=100)         sum: 945        time : 0.0
NaiveStorage    (max=100, n=10000)      sum: 994950     time : 0.014982223510742188
DequeStorage    (max=100, n=10000)      sum: 994950     time : 0.0159609317779541
CircularStorage (max=100, n=10000)      sum: 994950     time : 0.009946107864379883
NaiveStorage    (max=1000, n=1000000)   sum: 999499500  time : 12.579213619232178
DequeStorage    (max=1000, n=1000000)   sum: 999499500  time : 13.003407716751099
CircularStorage (max=1000, n=1000000)   sum: 999499500  time : 1.1614789962768555
</code></pre>
    </div>