<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Please update your questions with the relevant <strong>tags</strong>, although it is obvious you are using SQL Server here.</p>

<p>If you run an <strong>execution plan</strong> in your query window, you will be able to see which specific bits are taking a lot time and whether SQL Server is using any indexes etc.</p>

<p>It would be good if you gave a data sample and the table structure. Here are some ideas though.</p>

<p>Is there a reason why you are using a WHILE loop instead of a cursor ? The idea here is that you start with ID 1 and increment until you reach the max ID but there must probably be gaps in your table... the approach is possibly wasteful if you are trying to update rows that don't even exist.</p>

<p>Rather than work on the table <code>Account</code> directly (which may be in use or subject to locks), I would rather work on a partial copy using a <strong>temporary table</strong>.</p>

<p>Step 1: create a temporary table with all the records from <code>Account</code> you want to fix, matching some criteria eg country empty</p>

<pre><code>SELECT *
INTO #Account
FROM Account
WHERE &lt;add your criteria here&gt;
</code></pre>

<p>Step 2: perform all your operations on that temporary table <code>#Account</code></p>

<p>Step 3: update the original table based on the temporary table (UPDATE FROM):</p>

<pre><code>UPDATE Account
SET
    Account.ShippingCountry = #Account.ShippingCountry,
    Account.BillingCountry = #Account.BillingCountry,
    ...
FROM #Account
WHERE
  #Account.id2 = Account.id2
</code></pre>

<p>Here I am assuming that id2 is indeed an identity column that uniquely identifies each record. If it isn't, but instead is some kind of unindexed integer value, then each UPDATE requires a full table scan and there is a performance hit here. Again, can't tell without knowing the table structure for sure.</p>

<p>If all this takes too much time, you can process the jobs in small chunks, for example pull 1000 records at a time using <code>SELECT TOP 1000</code>, and repeat until the table is cleaned.</p>

<p>In short, updating a large table can be very slow if you cannot rely on some index, using an appropriate <code>WHERE</code> clause.</p>

<p>Important remark regarding the temporary table approach: doing <code>SELECT INTO</code> creates a copy of the data but does not include the complete table structure, that is indexes, constraints. That mean the id column will be an ordinary integer and not a unique, indexed field. So I would add the index manually on that field to speed the <code>UPDATE FROM</code>.</p>
    </div>