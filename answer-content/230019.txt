<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You could use reverse order and multiply by array index +1 (except last element):</p>

<pre><code>2 + 4
2 + 4 + 5
2 + 4 + 5 + 8
</code></pre>

<p>Could be transformed to:</p>

<pre><code>element    index  result
    8   *   1      8
    5   *   2      10  
    4   *   3      12
    2   *   3      6  
                   36
</code></pre>

<p>It allows you to remove reverse counter.
Also you can use Array it consume less memory.</p>

<p>Here is my implementation:</p>

<pre><code>class AssemblyTime {

    int shortestAssemblyTime(Integer... lego) {
      Arrays.sort(lego, Collections.reverseOrder());
      int sumOfLastElement = lego[lego.length - 1] * (lego.length - 1);
      return IntStream.range(1, lego.length)
              .map(i -&gt; lego[i] * (i + 1))
              .sum() + sumOfLastElement;
    }

    public static void main(String[] args) {
        int i = new AssemblyTime().shortestAssemblyTime(5, 2, 8, 4);
        assert i == 36;
    }
}
</code></pre>
    </div>