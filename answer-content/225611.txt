<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Naming, the first</h1>

<p>Normally haskell is written in <code>camelCase</code>, not <code>under_scores</code>. Up to now, I thought this an arbitrary convention, but I misread</p>

<pre><code>process n = process_row n : (if n == last_i then [] else process (n + 1))
process_row i = process_rows prev_row this_row next_row
</code></pre>

<p>as</p>

<pre><code>process n = process_row n : (if n == last_i then [] else process (n + 1))
process row i = process_rows prev_row this_row next_row
</code></pre>

<p>in this context. Do you spot the difference? Just a little underscore vs a space.</p>

<h1>(Outer) Core loop</h1>

<p>But let's get to the point:</p>

<pre><code>process n = process_row n : (if n == last_i then [] else process (n + 1))
</code></pre>

<p>This uses manual recursion and transmits indices. Both are not very haskellish. I cannot eliminate them step by step, but both can be avoided with</p>

<pre><code>*Main&gt; :t zipWith3
 zipWith3 :: (a -&gt; b -&gt; c -&gt; d) -&gt; [a] -&gt; [b] -&gt; [c] -&gt; [d]
</code></pre>

<p>Try to rewrite the first part of your main loop, i.e. where you iterate over the rows in your <code>transition</code> function. Do it now! Game of life is a very good way to learn and improve your haskell, but the best way to learn is to do it yourself, not read up somebody else's solution. Must of the following points a make are just fillers of lesser importance between progressively added spoilers to a <code>zipWith3</code> solution.</p>

<p>ZipWith example:</p>

<pre><code>zipWith3 (\a b c -&gt; a ++ b ++ c)
   ["Hello, ", "Good "]
   ["World"  , "night "]
   ["!"      , "John boy"]

["Hello, World!","Good night John boy"]
</code></pre>

<p>Why are indexing and manual recursion not "haskellish"? This does not sound like an argument, right?</p>

<ul>
<li>both are error-prone</li>
<li>both are too verbose</li>
<li>indexing is slow</li>
</ul>

<h1>zipWith3 spoiler 1</h1>

<p>re-use your function <code>process_row</code> like <code>zipWith3 process_row ...</code>.</p>

<h1>Naming, the second</h1>

<p>You are indexing with<code>this_row = state !! i</code> into a variable (or binding, as haskell programmer might prefer) named <code>state</code>. This is a list (of lists). Lists names have often plural form, I recommend</p>

<ul>
<li><code>world</code></li>
<li><code>board</code></li>
<li><code>lines</code> (shadows a Prelude function)</li>
<li><code>rows</code></li>
</ul>

<p>or whatever term pops up in your specification.</p>

<p>Another squabble about naming: You have <code>process</code>, <code>process_rows</code>, <code>process_row</code>, <code>proc</code> and <code>proc_col</code>. You are not seriously happy with this, are you? I expect the solution to be broken down in smaller and smaller parts, but this: <code>process_row i = process_rows</code> sounds like you are processing a row by processing (all) rows. I'd call <code>process_rows</code> instead <code>combineAdjacentRows</code> or something like it. </p>

<p>Yes, this is a filler. Stop now and rewrite <code>process</code> now.</p>

<h1>zipWith3 spoiler 2</h1>

<p>This omits the first and last line <code>zipWith3 process_row state (tail state) (tail (tail state))</code>, and consequently shrinks the world/board of game of life vertically, but can be extended into a solution.</p>

<h1>Do, do, do</h1>

<p>Why didn't you write <code>sleep = threadDelay 100000</code> as</p>

<pre><code>sleep = do
    threadDelay 100000
</code></pre>

<p>Just kidding! You don't need it. There are a lot of <code>do</code>s in your case that you don't need either. Especially those in <code>transition</code> are unnecessary. I do not want to dive too deep, but until you understand monads use <code>do</code> only in context of <code>IO ()</code> respectively <code>IO a</code>.</p>

<h1>zipWith3 solution</h1>

<p>Add the last row of <code>state</code> in front the <code>state</code>. (See how much better with would read with <code>board</code>?), then the plain <code>state</code> lines, finally all lines except this first plus the first line like this:</p>

<pre><code>transition state = zipWith3 process_rows (last state:state) state (tail state ++ state)
  where
     process_rows prev row next = -- (unchanged)
</code></pre>

<p>There is more to do, but no complete rewrite by me today.</p>
    </div>