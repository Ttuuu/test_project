<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This code is a decent start, as it uses ES6 features like arrow functions. However it could take advantage of many Javascript features - e.g. <code>IsExpenseItemAcceptable</code> could be reduced to a single line using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes" rel="nofollow noreferrer"><code>Array.includes()</code></a>. Additionally, the index variables can be eliminated using the ES6 feature <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment" rel="nofollow noreferrer">Destructuring assignment</a> - specifically <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#Array_destructuring" rel="nofollow noreferrer">array destructuring</a>.</p>
<p>Instead of lines like</p>
<blockquote>
<pre><code>var expenseItemized = expense.split(',')

if ((categoryIndex &lt; expenseItemized.length) &amp;&amp; IsExpenseItemAcceptable(AcceptableCategories, expenseItemized[categoryIndex])){
</code></pre>
</blockquote>
<p>Destructuring assignment can greatly simplify this to something like:</p>
<pre><code>const [vendor, date, item, price, category] = expense.split(',');   
if (category &amp;&amp; IsExpenseItemAcceptable(AcceptableCategories, category)){
</code></pre>
<p>Not only is that condition shorter, it doesn't require the use of the index and is more readable (and a typo on the word "<em>vendor</em>" was fixed).</p>
<p>In the example above <code>const</code> was used instead of <code>var</code>. It is recommended that <code>const</code> be the default keyword for initializing variables. If assignment is required, then use <code>let</code>.</p>
<p>The function <code>GetAcceptableCategories</code> could be simplified using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce" rel="nofollow noreferrer"><code>Array.reduce()</code></a>, similar to <code>Array.forEach()</code>.</p>
<p>The data structure could be changed from an array to a plain object - i.e. <code>{}</code> to provide a mapping of vendor and date combinations to prices. This would allow the elimination of the functions <code>updatePrice</code> and <code>IsVenderDateIncluded</code> because the loop could be simplified to:</p>
<pre><code>if (category &amp;&amp; IsExpenseItemAcceptable(AcceptableCategories, category)){
    const vendorDate = [date, ": ", vendor, " - $"].join('')
    if (vendorDate in AcceptableExpenseTotals) {
        AcceptableExpenseTotals[vendorDate] += parseFloat(price);
    }
    else{
        AcceptableExpenseTotals[vendorDate] = parseFloat(price);
    }
}
</code></pre>
<p>This would require reformatting the output - e.g.</p>
<pre><code>for (const [vendorDate, price] of Object.entries(AcceptableExpenses)) {
    console.log(vendorDate, price);
}
</code></pre>
    </div>