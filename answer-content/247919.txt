<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are some things that may help you improve your code.</p>
<h2>Use include guards</h2>
<p>There should be an include guard in each <code>.h</code> file.  That is, start the file with:</p>
<pre><code>#ifndef MATRIX_H
#define MATRIX_H
// file contents go here
#endif // MATRIX_H
</code></pre>
<p>The use of <code>#pragma once</code> is a common extension, but it's not in the standard and thus represents at least a potential portability problem.  See <a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#sf8-use-include-guards-for-all-h-files" rel="nofollow noreferrer">SF.8</a></p>
<h2>Use <code>throw</code> rather than <code>assert</code></h2>
<p>The bounds checking your program does is good, but it should <code>throw</code> an exception rather than using <code>assert</code> to be compatible with STL containers.</p>
<h2>Implement mathematical operations with templates</h2>
<p>Consider the following code:</p>
<pre><code>MyMatrix&lt;float&gt; fm;
MyMatrix&lt;int&gt; im;
fm += im;
</code></pre>
<p>This ought to work but does not because the current code requires both matrices to be of the same type.  Better would be to write the function like this:</p>
<pre><code>template&lt;class U&gt;
MyMatrix&amp; operator+=(MyMatrix&lt;U&gt; const&amp; mtx)
{
    if (m_rows != mtx.rows() || m_cols != mtx.cols()) 
        throw std::invalid_argument("Matrix dimension must be the same.");
    std::transform(m_buffer.begin(), m_buffer.end(), mtx.begin(), m_buffer.begin(), std::plus&lt;&gt;{});
    return *this;
}
</code></pre>
<p>Now it works with any pair of types for which <code>std::plus&lt;&gt;</code> is defined.</p>
<h2>Implement mathematical operations as freestanding functions</h2>
<p>Consider this code:</p>
<pre><code>MyMatrix&lt;float&gt; fm;
auto doppel = fm + fm;
</code></pre>
<p>It should work but does not.  Fix that by defining <code>operator+</code> as a freestanding templated function:</p>
<pre><code>template &lt;typename T, typename U&gt;
MyMatrix&lt;T&gt;  operator+(MyMatrix&lt;T&gt; one, MyMatrix&lt;U&gt; const&amp; two) {
    return one += two;
}
</code></pre>
<h2>Don't shadow parameters</h2>
<p>The inserter function is currently defined like this:</p>
<pre><code>template&lt;class T&gt; // linkage error without this!
friend std::ostream&amp; operator&lt;&lt;(std::ostream&amp; out, MyMatrix&lt;T&gt; const&amp; mtx);
</code></pre>
<p>The problem with that is it's inside a template that also takes a <code>class T</code> and the compiler has no way to distinguish between them.  Fortunately, it's a simple fix here, just use a different letter, such as <code>U</code> for this declaration.</p>
<h2>Implement unary operators</h2>
<p>The unary <code>-</code> and unary <code>+</code> operators are missing.  The result is that this fails:</p>
<pre><code>std::cout &lt;&lt; -foo &lt;&lt; "\n";
</code></pre>
<p>You could implement unary - like this:</p>
<pre><code>MyMatrix operator-() const {
    MyMatrix result(*this);
    std::transform(result.begin(), result.end(), result.begin(), std::negate&lt;&gt;{});
    return result;
}
</code></pre>
<h2>Fix the spelling errors</h2>
<p>In some place the word "dimension" is spelled incorrectly.  Since your code is mostly pretty nice, it's worth the extra step to eliminate spelling errors.</p>
<h2>Implement operators with constant arguments</h2>
<p>The <code>operator+=</code> is defined, but only for two objects of type <code>MyMatrix</code>.  I would suggest implementing each of the operators so that the right side can be a constant.  For example, this won't compile:</p>
<pre><code>MyMatrix fm;
fm += 2;
</code></pre>
<p>A simple way to address that is by defining those versions:</p>
<pre><code>template&lt;class U&gt;
MyMatrix&amp; operator+=(U const&amp; val)
{
    std::for_each(m_buffer.begin(), m_buffer.end(), [val](T&amp; item){ item += val; });
    return *this;
}
</code></pre>
<h2>Eliminate work</h2>
<p>The <code>operator==</code> is much more complex than it needs to be.  Since the code is using a <code>std::vector</code> as the underlying storage, we can use the overloaded <code>operator==</code> for that and simplify the code:</p>
<pre><code>bool operator==(MyMatrix const&amp; mtx) const noexcept
{
    return m_rows == mtx.m_rows &amp;&amp; m_cols == mtx.m_cols &amp;&amp; m_buffer == mtx.m_buffer;
}
</code></pre>
<h2>Implement a <code>size()</code> operator</h2>
<p>I'd write one like this:</p>
<pre><code>size_type size() const 
{ return m_buffer.size(); }
</code></pre>
<h2>Avoid making assumptions about templated types</h2>
<p>The <code>fillRand()</code> function appears to assume that the underlying type is numeric, but there is no guarentee of that.  We could write this:</p>
<pre><code>MyMatrix&lt;std::string&gt; sm{3, 2};
sm.fillRand();
</code></pre>
<p>But it's unlikely to provide a satisfactory result because what happens is that it creates six strings, each one character long with the numeric value of the generated random value.  For that reason, I'd suggest simply omitting that function.  If you wish to only accomodate numeric values, then the code could include <code>std::enable_if</code> with the <a href="https://en.cppreference.com/w/cpp/types/is_arithmetic" rel="nofollow noreferrer"><code>is_arithmetic</code></a> type trait.</p>
<h2>Consider implementing initializer list constructors</h2>
<p>It would be nice to be able to do this:</p>
<pre><code>MyMatrix&lt;std::string&gt; sm{3, 2, { "one", "two", "three", "four", "five", "six" }};
</code></pre>
<p>It's quite simple to accomodate this:</p>
<pre><code>MyMatrix(size_type dimx, size_type dimy, std::initializer_list&lt;T&gt; init)
        : m_rows(dimx)
        , m_cols(dimy)
        , m_buffer(dimx * dimy)
{
    const size_type minlen{std::min(m_buffer.size(), init.size())};
    std::copy_n(init.begin(), minlen, m_buffer.begin());
}
</code></pre>
<h2>Don't overspecify functions</h2>
<p>The <code>fill</code> function should not be a member function since a user of the class can just as easily use the existing <code>std::fill</code>.  I would same suggestion about the inserter function (<code>std::ostream&amp; operator&lt;&lt;</code>).  It's OK to have one as a convenience function for testing (which I would suggest would also need a <code>wstream</code> version), but I would recommend against having it in a library.</p>
<h2>Write test cases</h2>
<p>I would strongly recommend writing a large number of test cases to make sure this code does what you intend.  It's easy to miss small details.  Here's your first test case:</p>
<pre><code>    MyMatrix&lt;bool&gt; b{5, 5};
    std::cout &lt;&lt; b &lt;&lt; "\n";
</code></pre>
<p>On my machine, this segfaults and dies.  See if you can figure out why and fix it.</p>
    </div>