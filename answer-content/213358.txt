<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>One thing that makes your code slow is your repeated calls to <code>primes.index</code>. Each of these calls needs to linearly scan <code>primes</code> until it finds the value you are looking for, making this <span class="math-container">\$\mathcal{O}(n)\$</span>. This is especially bad in the first <code>if</code> case since you do this twice with exactly the same argument. Instead just keep the index around in addition to the number:</p>

<pre><code>def goldbach_keep_index(number):
    if number % 2 == 1: #Only even numbers
        raise ValueError("Goldbach conjecture is only defined for even numbers")
    primes = primenums(number) #returns all prime numbers &lt;= input number
    i, j = 0, 0
    addend1 = primes[i]
    addend2 = primes[j]

    while addend1 + addend2 != number:
        if addend2 == primes[-1]:
            i = j = i + 1
            addend2 = primes[i]
            addend1 = primes[i]
        else:
            j += 1
            addend2 = primes[j]
    return addend1, addend2
</code></pre>

<p>Note that I made this a function, so you can reuse it.</p>

<p>Your main calling code could look like this:</p>

<pre><code>if __name__ == "__main__":
    number = int(input("Enter your number &gt;&gt; "))
    p1, p2 = goldbach_keep_index(number)
    print(f"{p1} + {p2} = {number}")
</code></pre>

<hr>

<p>However, what you are really doing is taking all combinations of prime numbers, without repeating yourself. So just use <a href="https://docs.python.org/3/library/itertools.html#itertools.combinations_with_replacement" rel="noreferrer"><code>itertools.combinations_with_replacement</code></a>:</p>

<pre><code>from itertools import combinations_with_replacement

def goldbach_combinations(number):
    if number % 2 == 0:
        raise ValueError("Goldbach conjecture is only defined for even numbers")
    primes = primenums(number)
    for addend1, addend2 in combinations_with_replacement(primes, 2):
        if addend1 + addend2 == number:
            return addend1, addend2
    raise Exception(f"Found a counter-example to the Goldbach conjecture: {number}")
</code></pre>

<p>In this case <code>primes</code> does not even need to be a <code>list</code>, it can just be a generator.</p>

<hr>

<p>If you instead make <code>primes</code> a <code>set</code>, you can easily implement the idea suggested by <a href="https://codereview.stackexchange.com/users/167190/josiah">@Josiah</a> in <a href="https://codereview.stackexchange.com/a/213359/98493">their answer</a> by just checking if <code>number - p</code> is in <code>primes</code>:</p>

<pre><code>def goldbach_set(number):
    if number % 2 == 0: #Only even numbers
        raise ValueError("Goldbach conjecture is only defined for even numbers")
    primes = set(primenums(number)) #returns all prime numbers &lt;= input number
    for p in primes:
        k = number - p
        if k in primes:
            return p, k
    raise Exception(f"Found a counter-example to the Goldbach conjecture: {number}")
</code></pre>

<hr>

<p>And now some timing comparisons, where <code>goldbach</code> is your code put into a function:</p>

<pre><code>def goldbach(number):
    if number % 2 == 0: #Only even numbers
        raise ValueError("Goldbach conjecture is only defined for even numbers")
    primes = primenums(number) #returns all prime numbers &lt;= input number
    addend1 = primes[0]
    addend2 = primes[0]

    while addend1 + addend2 != number:
        if primes[-1] == addend2:
            addend2 = primes[primes.index(addend1) + 1]
            addend1 = primes[primes.index(addend1) + 1]
        else:
            addend2 = primes[primes.index(addend2) + 1]
    return addend1, addend2
</code></pre>

<p>And <code>primenums</code> is a simple sieve:</p>

<pre><code>def prime_sieve(limit):
    prime = [True] * limit
    prime[0] = prime[1] = False

    for i, is_prime in enumerate(prime):
        if is_prime:
            yield i
            for n in range(i * i, limit, i):
                prime[n] = False

def primenums(limit):
    return list(prime_sieve(limit))
</code></pre>

<p><a href="https://i.stack.imgur.com/vYS27.png" rel="noreferrer"><img src="https://i.stack.imgur.com/vYS27.png" alt="enter image description here"></a></p>

<p>And when pulling the generation of the primes outside of the function (and calculating them up to the largest number in the plot):</p>

<p><a href="https://i.stack.imgur.com/OHGFk.png" rel="noreferrer"><img src="https://i.stack.imgur.com/OHGFk.png" alt="enter image description here"></a></p>

<p>Of course the first three functions are vastly slower than the <code>set</code> because they need to go through more combinations now. However, all functions are then constant time, so the increase in time comes solely from the fact that you have to consider more primes.</p>
    </div>