<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>public bool IsValid(string stringToValidate)
{
    var charString = stringToValidate.ToCharArray();
    if (Regex.IsMatch(charString[0].ToString(), "[0-9]") || Regex.IsMatch(charString[1].ToString(), "[0-9]"))
    {
        return false;
    }
    return true;
}
</code></pre>
</blockquote>
<p>Be aware that each char in a string can be reached by index as <code>stringToValidate[0]</code>, so you don't need to call <code>ToCharArray()</code>:</p>
<pre><code>public bool IsValid(string stringToValidate)
{        
    if (Regex.IsMatch(stringToValidate[0].ToString(), "[0-9]") || Regex.IsMatch(stringToValidate[1].ToString(), "[0-9]"))
    {
        return false;
    }
    return true;
}
</code></pre>
<p>But <code>Char</code> has a static method <code>Char.IsLetter()</code> that can be used instead of the <code>Regex</code> expression:</p>
<pre><code>public bool IsValid(string stringToValidate)
{
     return stringToValidate.Length &gt; 1 &amp;&amp; Char.IsLetter(stringToValidate[0]) &amp;&amp; Char.IsLetter(stringToValidate[1]);
}
</code></pre>
<p>This is more consistent with modern unicode character sets, and it will also catch if the two first characters are special chars like <code>'&amp;'</code> or <code>'!'</code> etc. If you just want to ensure they are not numeric, you can use <code>Char.IsDigit()</code> instead.</p>
    </div>