<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Headers</h1>

<p>I needed to add</p>

<pre><code>#include &lt;vector&gt;
using std::vector;
</code></pre>

<p>to make this code compile</p>

<h1>Algorithm</h1>

<p>Recursion is usually a poor choice in C++ when a simple loop would work instead.  Since you're exhaustively enumerating the possibilities, note that your selection of <code>+</code> or <code>-</code> <em>n</em> times is equivalent to iterating over the binary numbers from 0 to 2^n - 1.  So you could break the list into chunks matching the bit-width of your largest available unsigned type and reduce the recursion depth that way.</p>

<p>We might be able to reduce the size of the problem with some mathematical insight: if we can find subsets that sum to zero, you might be able to use them to reduce the search space (as the complement of that subset also sums to zero).</p>

<h1>Style</h1>

<p>Don't pass containers by value if you don't intend to modify the contents; pass a const reference instead, or (better) a pair of <code>const_iterator</code>.</p>

<p>Match the type of <code>i</code> to the result type of <code>nums.size()</code> - in this case <code>std::size_t</code> (from <code>&lt;cstddef&gt;</code>).</p>

<p>If we break the last <code>return</code> over two lines, the symmetry of the algorithm becomes more apparent:</p>

<pre><code>    return findTargetSum(nums, i + 1, S, sumSoFar + nums[i])
        +  findTargetSum(nums, i + 1, S, sumSoFar - nums[i]);
</code></pre>

<p>Also, if we re-order the arguments, we can default <code>i</code> and <code>sumSoFar</code>, thus needing only a single function:</p>

<pre><code>int findTargetSumWays(const std::vector&lt;int&gt;&amp; nums, int S,
                      std::size_t i = 0, int sumSoFar = 0)
{
    if (i == nums.size()) {
        return sumSoFar == S;
    }

    return findTargetSumWays(nums, S, i + 1, sumSoFar + nums[i])
        +  findTargetSumWays(nums, S, i + 1, sumSoFar - nums[i]);
}
</code></pre>
    </div>