<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I haven't found any input which isn't handled well by your code. Here are some tests:</p>

<pre><code>assertTrue(CanAdd(0, Integer.MAX_VALUE));
assertTrue(CanAdd(0, Integer.MIN_VALUE));
assertTrue(CanAdd(Integer.MIN_VALUE, 0));
assertTrue(CanAdd(-1, Integer.MAX_VALUE));
assertFalse(CanAdd(1, Integer.MAX_VALUE));
assertFalse(CanAdd(-1, Integer.MIN_VALUE));
</code></pre>

<p>So, it works but it isn't an easy task to read it. If this isn't a bottleneck in an application I would use a <code>long</code>:</p>

<pre><code>public static boolean canAdd(int... values) {
    long sum = 0;
    for (final int value: values) {
        sum += value;
        if (sum &gt; Integer.MAX_VALUE) {
            return false;
        }
        if (sum &lt; Integer.MIN_VALUE) {
            return false;
        }
    }
    return true;
}
</code></pre>

<p>I think it's easier to read and maintain.</p>

<p>Finally, a note: according to <a href="http://www.oracle.com/technetwork/java/codeconventions-135099.html#367" rel="noreferrer">Code Conventions for the Java Programming Language</a> the name of your method should be <code>canAdd</code> (with lowercase first letter).</p>

<blockquote>
  <p>Methods should be verbs, in mixed case with the first letter
  lowercase, with the first letter of each internal word capitalized.</p>
</blockquote>

<p><strong>Edit:</strong></p>

<p><a href="http://commons.apache.org/proper/commons-math/" rel="noreferrer">Apache Commons Math</a> also uses <a href="http://svn.apache.org/viewvc/commons/proper/math/trunk/src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java?view=markup#l40" rel="noreferrer">long conversion</a>:</p>

<pre><code>public static int addAndCheck(int x, int y)
        throws MathArithmeticException {
    long s = (long)x + (long)y;
    if (s &lt; Integer.MIN_VALUE || s &gt; Integer.MAX_VALUE) {
        throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_ADDITION, x, y);
    }
    return (int)s;
} 
</code></pre>

<p>As well as <a href="https://code.google.com/p/guava-libraries/source/browse/guava/src/com/google/common/math/IntMath.java#409" rel="noreferrer">Guava</a>:</p>

<pre><code>public static int checkedAdd(int a, int b) {
    long result = (long) a + b;
    checkNoOverflow(result == (int) result);
    return (int) result;
}
</code></pre>
    </div>