<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li>Are you using an IDE? These provide code formatting and refactoring tools, use them to make continuous small improvements as you go alone.</li>
<li>Your naming convention is quite clear, it reflects the problem domain but doesn't follow the Java style. Classes definitions should have a capitalised first letter and <code>CamelCase</code>. Use <code>camelCase</code> with lower case first letter for method names. This convention makes them easier to read; so <code>Story</code> not <em>story</em>, <code>FirstMission</code> for your classes and <code>firstLine</code> for the method.</li>
<li>Use TDD and JUnit to drive the development, Java IDEs support these natively and this will help you to develop a clean interface for your code and follow the <a href="https://martinfowler.com/bliki/TellDontAsk.html" rel="nofollow noreferrer">tell don't ask idiom</a>.</li>
<li>Your main method does too much work, remove it and replace with an initialisation method and normal entry point that are not static. Create an instance of the class and use those methods.  You can use the constructor as initialisation method or seperate that.</li>
<li>Avoid using <code>System.out</code> create a show method that displays the text and is is easy to refactor (again following the Tell don't ask idiom).  During development use something like <code>[slf4j][1]</code> longer term this allow you to more easily replace this with whatever UI system you choose.</li>
<li>Follow the <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" rel="nofollow noreferrer">single responsibility principle</a> break down your classes into more methods, put everything under each switch into a seperate method.</li>
<li>Follow the <a href="https://en.wikipedia.org/wiki/Interface_segregation_principle" rel="nofollow noreferrer">interface segregation principle</a> for <code>Mission</code> classes, give them a uniform entry point to make them polymorphic which will make this easier to expand and gain some reuse as you do so.  Consider the same for Gates.</li>
<li>In your <code>Story</code> class use a switch statement for your <code>option</code> instead of <code>if(option == 1)</code> like you have done in your firstmission class.</li>
<li>Once you start getting fed up constantly editing the switch statement, refactor it to use polymorphism, for example using the <a href="https://en.wikipedia.org/wiki/Command_pattern" rel="nofollow noreferrer">Command Pattern</a>.</li>
</ul>
    </div>