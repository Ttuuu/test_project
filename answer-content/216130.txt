<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First, yes, this is functional, and yes, this is how to use <code>loop</code> properly.</p>

<blockquote>
  <p>. . . using recur on every loop iteration instead of mutating variables.</p>
</blockquote>

<p>This is the intent of <code>loop</code>. Instead of mutating a variable, you just pass the "altered data" to the next iteration via <code>recur</code>.</p>

<p>You also aren't abusing side effects by misusing <code>def</code> or <code>atom</code>s, so that's good.</p>

<hr>

<p>My main concern with this code is how it's really just one giant function. There's no function names indicating what certain code is doing, and no comments noting the significance of any lines. Now, I'm personally a stickler for breaking code down into functions, but it's generally regard as best practice as well. As <a href="https://softwareengineering.stackexchange.com/a/210374/139925">this</a> answer notes (ignoring the mention of "imperative"):</p>

<blockquote>
  <p>Having a large imperative function that conveys many ideas is hard to digest and reuse.</p>
</blockquote>

<p>I think the size of this function <em>does</em> make it hard to digest.</p>

<p>Just as an extreme counter example, <a href="https://codereview.stackexchange.com/questions/181183/infix-to-rpn-converter-using-the-shunting-yard-algorithm">here's the same algorithm that I wrote a year ago</a><code>*</code>. It's almost 4x longer as yours, but it's also much clearer what each bit of code is doing (and has ~10 lines dedicated to documentation). Code like</p>

<pre><code>(-&gt; equation
    (tokenize-equation)
    (infix-&gt;RPN-tokens op-attr-map)
    (tokens-to-string)) ; Should arguably be called token-&gt;string
</code></pre>

<p>makes it fairly clear what it's responsible for, even without taking into consideration the function name that it's in.</p>

<p>I'm won't try to break your code down (mostly because I burned my hand pretty bad, and typing this is hard enough), but if you take a look at my example, you may be able to find some inspiration and strike a middle ground for granularity.</p>

<p>Good luck</p>

<hr>

<p><code>*</code>  Although my version doesn't evaluate the expression since I'm translating it into a String and in my example, the data isn't available at compile-time.</p>
    </div>