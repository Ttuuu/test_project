<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Let's start with some convention things, in JS we (everyone) write function and variable names as camel case.</p>

<p>I see you have a comment that you tried to use a setter, the issue is that you would then want to use it in two ways. You would want to write this.board = import_string to call the setter, but in the constructor you do </p>

<p><code>this.board = this.blank_board_array();</code></p>

<p>You could use a setter with some rewriting, but I think it's fine as is.</p>

<p>The double equals in JS <code>==</code> coerces the types, so that for example <code>0==[]</code> is true, while this can be useful, in my experience it fits squarely in the realm of being too clever, or of things working coincidentally. I would advise you always use <code>===</code> which does not coerce types (but controversially to my colleagues I write lines like <code>if (x === false)</code>, some say this is a step too far).</p>

<p>I would suggest that it would be nicer to have functions which create an html Sudoku board, i.e. rather than target elements that happen to be there, you can make the elements with JS and then add a single element (with many children) at the end, if you do this you can also tidy up the logic of setting up the event listeners a lot too.</p>

<p>In general there's been a trend (at least in my experience working) towards writing quite functional code in JS. Your stuff is far removed from that, not really a problem, just something to be aware of. </p>

<p>It's a bit hard to give an example without just rewriting everything, but for instance (though the example I will give is still not very functional) several times you loop over a 2D array, you could write a function loopOverMatrix(matrix, f) which  takes a 2D array and a function f (i, j) =&gt; {...}, and loops over all the elements [i][j] and calls f(i)(j). </p>
    </div>