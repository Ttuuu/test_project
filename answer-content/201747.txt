<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Well, lets start from the <strong>CodeReview</strong>:</p>
<hr>
<p>Since this is not really a library, I will omit my typical <em>"Make it easy to use correctly, hard to use incorrectly"</em>, but it is still important thing to keep in mind.</p>
<ul>
<li>Using classes instead of structs</li>
</ul>
<p>In this case, it seems like <code>struct</code> should be used:</p>
<pre><code>struct point {
    int x;
    int y;
    double z;
};
</code></pre>
<p>Better name, like <code>Point3D</code> might be applied. <code>XYZCoordinate</code>, although explicit, is a bit verbose. Matemathicians might argue that names miss coordinate system names, but I guess it is out of problem domain at the moment.</p>
<ul>
<li>Passing by value</li>
</ul>
<p>Although it is fine to accept by value and move at the call site, passing such big objects by value is rarely used, especially since read only view is needed. Prefer to use <code>const T&amp;</code> for read only view, where <code>T</code> is the type of passed in object.</p>
<ul>
<li><p>Do not call default constructor unless required</p>
<pre><code> vector&lt;XYZCoordinate&gt; file = vector&lt;XYZCoordinate&gt;();
</code></pre>
</li>
</ul>
<p>should be just</p>
<pre><code>vector&lt;XYZCoordinate&gt; file;
</code></pre>
<p>Calling default constructor explicitly increases chances of running into vexing parse. To call default constructor, just use <code>{}</code>:</p>
<pre><code>std::vector&lt;int&gt;{};
</code></pre>
<ul>
<li><p>Try to find better names</p>
<pre><code> class Loadfileoutput;
</code></pre>
</li>
</ul>
<p>Is somewhat confusing. One would think that there should a file in it somewhere, but there is no file. Something like <code>Dataset</code>, or <code>CollectedData</code> might be better.</p>
<hr>
<ul>
<li>Knowledge of standard library</li>
</ul>
<p><a href="https://codereview.stackexchange.com/users/37893/r-sahu">@R.Sahu</a> showed you some suggestions on improving the performance of the reading part in <code>.txt</code> files. Here is an implementation which somewhat incorporates the first suggestion (misses the part about dealing with errors):</p>
<pre><code>#include &lt;iostream&gt;
#include &lt;cctype&gt;
#include &lt;vector&gt;
#include &lt;limits&gt;

struct point {
    int x;
    int y;
    double z; 
};

std::istream&amp; operator&gt;&gt;(std::istream&amp; is, point&amp; p) {
    double x, y, z;
    is &gt;&gt; x &gt;&gt; y &gt;&gt; z;
    p = {static_cast&lt;int&gt;(x), 
         static_cast&lt;int&gt;(y), 
         z}; //explicit conversion, as implicit is not allowed
    return is;
}

std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, const point&amp; p) {
    return os &lt;&lt; p.x &lt;&lt; ' ' &lt;&lt; p.y &lt;&lt; ' ' &lt;&lt; p.z;
}

struct custom_classification : std::ctype&lt;char&gt; {
    custom_classification() : ctype(make_table()) { }
private:
    static mask* make_table() {
        const mask* classic = classic_table();
        static std::vector&lt;mask&gt; v(classic, classic + table_size);
        v[','] |= space;
        return &amp;v[0];
    }
};

std::vector&lt;point&gt; read_points(std::istream&amp; is) {
    auto old_locale = is.imbue(std::locale(is.getloc(), new custom_classification));
    is.ignore(std::numeric_limits&lt;std::streamsize&gt;::max(), '\n');
    
    auto points = std::vector(std::istream_iterator&lt;point&gt;(is), {});
    is.imbue(old_locale);
    return points;
}

int main() {
    auto points = read_points(std::cin);
    for (auto&amp;&amp; a_point: points) {
        std::cout &lt;&lt; a_point &lt;&lt; '\n';
    }
}
</code></pre>
<p><a href="https://wandbox.org/permlink/fy4WeGXSuZ4KRiwF" rel="noreferrer">Demo on Wandbox</a>.</p>
<p>There are several things going on here:</p>
<ol>
<li><p><code>point</code> is standalone.</p>
<p>It knows how to read itself from a stream, how to print itself into stream, and it handles that narrowing conversion on its own. Do note the use of aggregate initializer.</p>
</li>
<li><p>Ignoring commas and other formatting issues are delegated to stream. The old locale is restored, to behave as a good citizen and avoid surprising behaior when code gets modified.</p>
</li>
<li><p>Iterators are used extensively to reduce boilerplate and naked loops, although at some cost of being beginner friendly</p>
</li>
</ol>
<p>To search for min-max while reading, one could use idiomatic <code>while (first != last)</code> loop:</p>
<pre><code>dataset dset; //contains vector, min and max
auto first = std::istream_iterator&lt;point&gt;(is);
auto last = std::istream_iteratior&lt;point&gt;{};
//initialize dset to reasonable defaults, for min-max search

while (first != last) {
    auto next_point = *first++;
    if (next_point.x &gt; dset.xmax) {
       dset.xmax = next_point.x;
    } else if (next_point.x &lt; dset.xmin) {
        dset.xmin = next_point.x;
    }
    //ditto for y
    dset.values.push_back(next_point);
}
</code></pre>
    </div>