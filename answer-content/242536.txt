<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Not an exhaustive review but a few remarks about</p>

<h2>struct TrieNode</h2>

<p>You are using an <code>std::vector&lt;T&gt;</code>, although its size is fixed at 26. Consider using an <code>std::array&lt;T, 26&gt;</code> instead. This reduces calls to allocate dynamic memory. Also, your loops like</p>

<pre><code>for (int i = 0; i &lt; 26; ++i) {
    if (root-&gt;children[i]) {
        //do something
    }
}
</code></pre>

<p>are then guaranteed to not cause undefined behaviour due to illegal access. Additionally, since every node has at most one parent, there is no reason to use <code>std::shared_ptr</code>, go for <code>std::unique_ptr</code> instead.</p>

<p>26 as the size of your alphabet is a magic number (explanation on <a href="https://en.wikipedia.org/wiki/Magic_number_(programming)" rel="nofollow noreferrer">wikipedia</a>, <a href="https://stackoverflow.com/questions/47882/what-is-a-magic-number-and-why-is-it-bad">stackoverflow</a>), although a rather obvious one. Nonetheless, you could name it, e.g. declare a</p>

<pre><code>static constexpr size_t alphabet_size = 26;
</code></pre>

<p>One could consider a handy <code>using</code> for later on (<code>std::shared_ptr&lt;TrieNode&gt;</code> is repeated quite often in your code) as well as default values, which altogether results in something along the lines of</p>

<pre><code>class Trie {
private:
    static constexpr size_t alphabet_size = 26;
    struct TrieNode {
        bool isEndOfWord = false;
        std::array&lt;std::unique_ptr&lt;TrieNode&gt;, alphabet_size&gt; children = {};
    };

    using TrieNodePtr = std::unique_ptr&lt;TrieNode&gt;;
};
</code></pre>
    </div>