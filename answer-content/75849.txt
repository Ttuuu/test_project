<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Warning</strong></p>

<p>Do not do either of these two things:</p>

<pre><code>$array['index'] = $array['index'] ?: $default;

function default_value(&amp;$var, $default) {
    if (empty($var)) {
        $var = $default;
    }
}

default_value($array['index'], $default);
</code></pre>

<p>Both will raise errors due to an undefined index (both first attempt getting the value at the index first) if the index is not set.  This is a small thing, but even if you have error reporting AND logging turned off, the error is raised, is built, and propagates through the stack before it is checked if there is anywhere to report the error.  And thus, simply doing something that CAN raise an error, incurs a performance hit.</p>

<p>Keep this in mind, because this goes for all Error Types (Notices, Warnings, etc), and in large apps can be a big deal.  To avoid this you must use a function that does not raise an error on a missing index, like <code>isset($array['index'])</code> or <code>empty($array['index'])</code>, and not use the shortened ternary form.</p>

<p><strong>Try a function like:</strong></p>

<pre><code>function apply_default(Array &amp;$array, $path, $default) {
    // may need to be modified for your use-case
    preg_match_all("/\[['\"]*([^'\"]+)['\"]*\]/im",$path,$matches);
    if(count($matches[1]) &gt; 0) {
        $destinaion =&amp; $array;
        foreach ($matches[1] as $key) {
            if (empty($destinaion[$key]) ) {
                $destinaion[$key] = array();
            }
            $destinaion =&amp; $destinaion[$key];
        }
        if(empty($destinaion)) {
            $destinaion = $default;
            return TRUE;
        }
    }
    return FALSE;
}

$was_applied = apply_default($array,
    "['with a really long name']['and multiple']['indexes']",
    $default_value);
</code></pre>

<p>This doesn't raise errors, and will create the path if it does not exist.  It also benefits from consolidating the logic to set defaults in one place, rather than <code>if</code>s everywhere.</p>

<p>As mentioned elsewhere, the other option is to:</p>

<pre><code>if(empty($array['key'])) {
    $array['key'] = $default;
}
</code></pre>

<p>Which is just as good, and probably more performant.</p>

<p><em>However</em>, all that said, ideally this should only be handled in the consuming service.  If the value is empty, the consumer (whether a view or another client [like javascript]) should be allowed to make this choice on it's own.  As, in actuality, the semantic data is empty for the model.  How this is handled should be up to the consumer it's self, ie, if this is going to a template/view, the conditional should be handled during display.  If it is sent as JSON, the client should be able to make the choice.</p>

<p><strong>You are asking about styles</strong>, that is probably the most important.  The best style is, if you are providing data to a client, don't fake it (but document the possible empty response).</p>
    </div>