<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It might be just me but it took me a minute, until I realized you're not using expression trees but your own class with the same name (<code>Expression</code>).. That's confusing, don't use names that are already in the .NET framework.</p>

<p>Here is a summary of some of the problems I noticed in your code:</p>

<ul>
<li>Using mutable objects in <code>GetHashCode()</code>.</li>
<li>Virtual calls in the constructor.</li>
<li>Throwing generic <code>Exception</code> rather than more concrete one.</li>
<li>You've violated the <em>Open/closed principle</em>.</li>
<li>You might want to use more <em>LINQ</em> to make the code more readable.</li>
</ul>

<hr>

<p>Here is what you can do to fix those problems:</p>

<h2>Using mutable objects in <code>GetHashCode()</code></h2>

<p><em>Guideline: the integer returned by GetHashCode should never change</em>.</p>

<p><em>Rule: the integer returned by GetHashCode must never change while the object is contained in a data structure that depends on the hash code remaining stable</em></p>

<p>Quoted from <a href="https://ericlippert.com/2011/02/28/guidelines-and-rules-for-gethashcode/" rel="noreferrer">Eric Lippert's</a> blog.</p>

<p>The way to fix it is to simply make your properties <code>readonly</code> or in C#6 + <code>get</code> only.</p>

<h2>Virtual calls in the constructor</h2>

<p>In your case that wont cause any problems as far as I can tell, but in general it's tricky and it can cause some weird behavior.</p>

<p>This is because if you were to give value to <code>ArgumentNumber</code> in your <strong>derived</strong> class constructor and you're also operating on that property in your <strong>base</strong> class constructor (as you're), you would always get a value of 0 because your <strong>base</strong> constructor will be invoked before your <strong>derived</strong> one.</p>

<p>Of course if you know what you're doing and you're sure it wont cause any trouble, you can just leave it there.</p>

<h2>Throwing generic <code>Exception</code></h2>

<p>You should never throw <code>Exception</code>, you should use that type to implement your own exception for example. If you need to throw an exception, use a more concrete type e.g:</p>

<blockquote>
<pre><code>if (ArgumentNumber != 0)
{
    throw new Exception("Wrong number of arguments");
}
</code></pre>
</blockquote>

<pre><code>if (ArgumentNumber != 0)
{
    throw new ArgumentOutOfRangeException("Wrong number of arguments");
}
</code></pre>

<h2><em>Open/closed principle</em></h2>

<p>Quote from Wikipedia : </p>

<p><em>In object-oriented programming, the open/closed principle states "software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification".</em></p>

<p>You're violating this principle with your <code>switch</code> case, if you add new type, you must go there and everywhere else where you're checking all the types manually, and update it if needed.</p>

<p>A simple solution would be to introduce a common <em>interface</em>, which would have a method that all the derived class would have to implement, for example the <code>Add</code> class would have the <code>AddDerivative</code> method inside of it, once you've done this for all of the classes, you can easily return the method that the <code>Root</code> is holding.</p>

<p>Now if you decide to add new type, you would implement the method in the class and it will still work, where your switch case would've required some modification.</p>

<h2><em>LINQ</em></h2>

<p>There are only few loops in your code, which luckily you can replace with more readable <em>LINQ</em> expression:</p>

<p>You can convert this whole chunk of code to a single line:</p>

<blockquote>
<pre><code>Expression[] arguments;
if (root.Children != null)
{
    arguments = new Expression[root.Children.Length];
    for (var i = 0; i &lt; root.Children.Length; i++)
    {
        arguments[i] = new Expression(root.Children[i]);
    }
}
else
{
    arguments = null;
}
</code></pre>
</blockquote>

<p>Like this:</p>

<pre><code>var arguments = root.Children?.Select(t =&gt; new NodeExpression(t)).ToArray();
</code></pre>

<p>Also your <code>Equals</code> method:</p>

<blockquote>
<pre><code>var equals = true;
for (int i = 0; i &lt; Children.Length; i++)
{
    if (!Children[i].Equals(((Node)obj).Children[i]))
    {
        equals = false;
    }
}
return equals;
</code></pre>
</blockquote>

<p>Can become:</p>

<pre><code>return !Children.Where((t, i) =&gt; !t.Equals(((Node) obj).Children[i])).Any();
</code></pre>

<p>I think the main problem in your code is that it has a <em>God</em> class - <code>Derivative</code>. If you separate all the methods into they're respective classes and add a common interface to replace the switch case, it should look a lot better.</p>
    </div>