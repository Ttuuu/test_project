<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In <code>isAnagram</code> one should start local variables with a small letter (just a convention).
Do not use if-else to return a boolean.</p>

<pre><code>public static boolean isAnagram(String str1, String str2) {
    String s1 = str1.replaceAll("\\s", "");
    String s2 = str2.replaceAll("\\s", "");
    boolean status = true;
    if (s1.length() != s2.length()) {
        status = false;
    } else {
        char[] arrayS1 = s1.toLowerCase().toCharArray();
        char[] arrayS2 = s2.toLowerCase().toCharArray();
        Arrays.sort(arrayS1);
        Arrays.sort(arrayS2);
        status = Arrays.equals(arrayS1, arrayS2);
    }
    return status;
}
</code></pre>

<p>However if you think of an anagram as a form of sorted string, one could introduce either a type Anagram, or - here - a function deriving such a sorted string: here <code>canonicalForm</code>.</p>

<pre><code>public static boolean isAnagram2(String str1, String str2) {
    return canonicalForm(str1).equals(canonicalForm(str2));
}

public static String canonicalForm(String s) {
    String cleaned = s.replaceAll("\\s", "");
    char[] chars = cleaned.toLowerCase().toCharArray();
    Arrays.sort(chars);
    return new String(chars);
}
</code></pre>

<p>Most important searching for anagrams can use a map from canonical value to string(s).
For ease of mapping to the original algorithm. the mapped-to value is a concatenation of anagrams:</p>

<pre><code>public static String searchAnagram(String[] strings) {
    Map&lt;String, String&gt; canonicalToValue = new HashMap&lt;&gt;();
    for (String s : strings) {
        s = s.replace('\t', ' '); // Omit tabs, reserve them for our usage.
        String canonical = canonicalForm(s);
        canonicalToValue.merge(canonical, s, (oldS, s) -&gt; oldS + "\t" + s);
    }
    return canonicalToValue.values().stream()
            .filter(s -&gt; s.contains('\t'))                
            .collect(Collectors.joining(", "));
}
</code></pre>

<p>I use a tab (<code>\t</code>) as it seems that spaces might occur in strings.
One could also use a slash (<code>" / "</code>).</p>

<p>Better yet would be to return a <code>List&lt;String&gt;</code> of anagrams, and keep a <code>List&lt;String&gt;</code> or <code>Set&lt;String&gt;</code> as map value. A <code>TreeSet&lt;String&gt;</code> would remove duplicates and is sorted.</p>

<p>Instead of <code>isAnagram</code> one only needs <code>canonicalForm</code> (better <code>anagramForm</code>?).</p>

<p>The complexity is reduced in code complexity, faster.
Your attempt to optimize sorting on length is just a partial optimizing, needing extra checks / not fitting entirely. By using a HashMap on the canonical form of a string,
one has exactly an immediate search result.</p>

<p>The solution could give <code>"malmodera malordema marmelado melodrama, gasometro gasometro somertago"</code>.</p>

<p>No result <em>as String</em> would better be an empty String. Again a <code>List</code> seems more usable.</p>
    </div>