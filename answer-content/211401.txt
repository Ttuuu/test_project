<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I don't program in C and I don't know the exact input strings that you're expecting, but I can offer a couple of regex suggestions based on reasonable assumptions.</p>

<p>Your regex:</p>

<pre><code>@"Host: (((?&lt;hostName&gt;.+?):(?&lt;port&gt;\d+?))|(?&lt;hostName&gt;.+?))\s+"
</code></pre>

<p>Your pattern looks for a hostname followed by a colon then a port number then whitespace characters OR a hostname followed by whitespace characters.</p>

<ul>
<li>Since you are not capturing the whitespace and merely using the whitespace as an end point, the pattern can be reconfigured.</li>
<li>Since the colon-port substring is optional, the zero or one quantifier <code>?</code> can be used to eliminate the redundant named capture group (which was causing trouble at regex101.com).</li>
<li><code>+?</code> calls for "lazy" matching.  If you want your pattern to execute quickly, rewrite your pattern to use greedy quantifiers.</li>
</ul>

<p>New pattern:</p>

<pre><code>@"Host: (?&lt;hostName&gt;[^:\s]+)(:(?&lt;port&gt;\d+))?"
</code></pre>

<p>Here is a cheap and cheerful demo: <a href="https://regex101.com/r/NqSJ8L/1/" rel="nofollow noreferrer">https://regex101.com/r/NqSJ8L/1/</a></p>

<p>Note, my above pattern could be massaged a few different ways.  For instance, you might use <code>^</code> and an <code>m</code> pattern modifier to anchor the pattern to the start of the line of text.  Again, I don't program in C, so I don't know if there are incapatabilities with certain pattern entities.</p>

<p>Or instead of a negated character class, you can list the valid character for a hostname:</p>

<pre><code>@"Host: (?&lt;hostName&gt;[\w.-]+)(:(?&lt;port&gt;\d+))?"
</code></pre>

<p>P.s. It just occurred to me that my optional pattern will not always deliver a named capture group for the port, so if you don't want to write code to check that the port capture group is generated, here is OhMyGoodness's commented pattern without the trailing whitespace matching.  <code>(?&lt;= )</code> is a lookbehind. <code>(?: )</code> is a non-capturing group.</p>

<pre><code>Host: (?&lt;hostName&gt;[\w.-]+):?(?&lt;port&gt;(?:(?&lt;=:)\d+)?)
</code></pre>
    </div>