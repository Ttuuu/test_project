<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm going to depart from the other answers and focus on this bit:</p>

<blockquote>
  <p>Am I missing some elegant method?</p>
</blockquote>

<p>Do you consider Regex to be elegant? You could reduce the amount of code required at the cost of performance. Take the following Regex expression:</p>

<pre><code>(?&lt;=\G..)(?!$)
</code></pre>

<p>Broken down:</p>

<pre><code>(?&lt;=            # Look-behind that won't actually be captured
    \G          # Zero-width assertion
      ..        # Match exactly two characters
        )(?!$)  # Do not match an empty group at the end of the string
</code></pre>

<p>Then it's just a matter of transforming the string array into a collection of characters and joining them all back together. Using Linq's <code>Select</code> and the <code>string.Join</code> method, this can be done quickly.</p>

<p>A short implementation may look like:</p>

<pre><code>string HexStringToString(string hexString)
{
    string[] hexValues = Regex.Split(hexString, "(?&lt;=\\G..)(?!$)");
    var characters = hexValues.Select(hex =&gt; (char)Convert.ToByte(hex, 16));
    return string.Join(string.Empty, characters);
}
</code></pre>

<p>Elegant? Sure. You could even do it all on a single line:</p>

<pre><code>string HexStringToString(string hexString)
{
    return string.Join("", Regex.Split(hexString, "(?&lt;=\\G..)(?!$)").Select(x =&gt; (char)Convert.ToByte(x, 16)));
}
</code></pre>

<p>But elegance is never more valuable than readability and maintainability.</p>

<hr>

<p>As <a href="https://codereview.stackexchange.com/users/1482/codesinchaos">@CodesInChaos</a> said, your method is doing multiple things and should be split apart. I would even break out the functionality of separating a string into its own method, perhaps as an extension method off of the <code>String</code> class.</p>
    </div>