<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I would generally solve this by using logic that returns undefined for edge cases (for exame <code>grid[-1]</code> and <code>grid[999]</code> return <code>undefined</code>) and then filtering them out. Something like</p>

<pre><code>static _getAdjacentMean(row, col, kernelSize, grid) {
  let values = [];
  for (let iRow = -kernelSize; iRow &lt;= kernelSize; iRow++) {
    const gridRow   = grid[row + iRow] || []; 
    for (let iCol = -kernelSize; iCol &lt;= kernelSize; iCol++) {
      if (iRow !== 0 &amp;&amp; iCol !== 0) 
        values.push( gridRow[ col + iCol ];
    }
  }  
  values = values.filter( v =&gt; v !== undefined);

  const sum   = values.reduce((a, b) =&gt; a + b, 0));
  const count = values.length;
  return sum / count;
}
</code></pre>

<p>or it might be more efficient just to skip the intermediate <code>values</code> array entirely.</p>

<pre><code>static _getAdjacentMean(row, col, kernelSize, grid) {
  let sum = 0, count = 0;
  for (let iRow = -kernelSize; iRow &lt;= kernelSize; iRow++) {
    const gridRow   = grid[row + iRow] || []; 
    for (let iCol = -kernelSize; iCol &lt;= kernelSize; iCol++) {
      vonst cellValue = gridRow[ col + iCol];           
      if (iRow !== 0 &amp;&amp; iCol !== 0 &amp;&amp; cellValue !== undefined) {
        sum   += cellValue;
        count += 1;
      }
    }
  }  

  return sum / count;
}
</code></pre>
    </div>