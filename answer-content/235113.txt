<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Handling <code>input</code> can be done with <code>try</code> to handle <code>exceptions</code>. For instance:</p>

<pre><code>try:
    user_in = int(input('Enter number: ')
    ...
except ValueError:
    print('Integers only!')
</code></pre>

<p>Using quotations are your choice really but it is better to be consistent. If you use <code>'</code> or <code>"</code> throughout your code make it one or the other. The benefits of using something like triple quote allow for simple data placement and calculations. In example:</p>

<pre><code>print('''
data_1 &gt; {}
data_2 &gt; {}
data_3 &gt; {}
'''.format(data_1, sum(data_1), len(data_1))
</code></pre>

<p>In regards to the secret word and what is left. Python is good for comprehension although it can be heavy on process time with more complex functions. </p>

<p>I saw a similar post not too long ago and it used classes to keep closely related functions together, which is what classes ideally are used for. I don't see the point in using them for a simple game, which would be something along the lines of:</p>

<pre><code>import random

words = ['cheese', 'biscuits', 'hammer', 'evidence'] 
word_choice = [i.lower() for i in random.choice(words)] # List comprehension
lives = 3
cor_guess = []
while True:
  print('Letters found: {}\nWord length: {}'.format(cor_guess, len(word_choice)))
  if lives == 0:
      print('Your dead homie!\nThe word was: ', word_choice)
      break
  guess = str(input('Guess a letter: '))
  if guess in word_choice:
      print(guess, 'is in the word!\n')
      cor_guess.append(guess)
  else:
      print('Your dying slowly!\n')
      lives -= 1
  ...
  ...
</code></pre>

<p>Using list comprehension I have selected a object from a variable and converted it all to lowercase for simplicity if I need to open a file with capital letters in etc and then got every object of that object. This populates the list with one word separated in to separate letters. The data can then be compared to the user input. This way the data to begin with is very flexible and can be manipulated easily and it is much easier to follow the code. </p>
    </div>