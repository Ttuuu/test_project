<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Tool support suggestions:</p>

<ol>
<li><a href="https://github.com/ambv/black" rel="noreferrer"><code>black</code></a> can automatically format your code to be more idiomatic. </li>
<li><a href="https://pypi.org/project/isort/" rel="noreferrer"><code>isort</code></a> can group and sort your imports.</li>
<li><p><a href="https://gitlab.com/pycqa/flake8" rel="noreferrer"><code>flake8</code></a> with a strict complexity limit can give you more hints to write idiomatic Python:</p>

<pre><code>[flake8]
max-complexity = 4
ignore = W503,E203
</code></pre></li>
<li><p>I would then recommend validating your <a href="https://docs.python.org/3/library/typing.html" rel="noreferrer">type hints</a> using a strict <a href="https://github.com/python/mypy" rel="noreferrer"><code>mypy</code></a> configuration:</p>

<pre><code>[mypy]
check_untyped_defs = true
disallow_any_generics = true
disallow_untyped_defs = true
ignore_missing_imports = true
no_implicit_optional = true
warn_redundant_casts = true
warn_return_any = true
warn_unused_ignores = true
</code></pre>

<p>This ensures that anyone reading the code (including yourself) understand how it's meant to be called, which is very powerful in terms of modifying and reusing it.</p></li>
</ol>

<p>Basically the above gives some basic quality assurances which come with several advantages:</p>

<ul>
<li>Makes the code easier to read for anyone familiar with idiomatic Python.</li>
<li>Smaller diffs which are easier to review and understand.</li>
<li>Less risk of misunderstanding semantics.</li>
</ul>

<p>Specific suggestions, assuming the above are taken care of:</p>

<ol>
<li>The variable names need some work. <code>on</code>, <code>oink</code> and <code>spoink</code> give a reader absolutely no idea what the variables are used for. <code>spoink</code>, for example, could be <code>shape</code> or even <code>shape_name</code>.</li>
<li>The various calculations belong in separate functions. The 2D and 3D functions could also be split into two separate files, for clarity.</li>
<li>A common expectation for shell tools is that they are <em>not</em> interactive unless they absolutely have to be. So shell users would expect your script to take all the parameters it needs (using for example <a href="https://docs.python.org/3/library/argparse.html" rel="noreferrer"><code>argparse</code></a>) to produce an answer <em>non-interactively.</em> I might for example write a script like this to run like <code>./area.py circle 5</code> to calculate the area of a circle of radius 5.</li>
</ol>
    </div>