<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The biggest problem with this code is the way methods are used, in fact this causes a bug when you try to play more than 250 games.</p>
<p>Other than <em>goto</em>-statements that can be found in Basic and other languages, methods are usually doing a thing and then returning the control flow back to where they were called from.</p>
<pre><code>def do_three_things()
    do_first_thing()
    do_second_thing()
    do_third_thing()

def do_first_thing()
    print("I")

def do_second_thing()
    print("II")

def do_third_thing()
    print("III")
</code></pre>
<p>In your code every methods ends either with calling <em>exit</em> or another method.</p>
<pre><code>def do_three_things()
    do_first_thing()

def do_first_thing()
    print("I")
    do_second_thing()

def do_second_thing()
    print("II")
    do_third_thing()

def do_third_thing()
    print("III")
</code></pre>
<p>Readability is one problem with this:</p>
<p>If you look at the method <code>do_three_things</code> in the first example, you see that is very clear what "doing three things" means from the method, in the second case it only looks like is doing the first thing.</p>
<p>The bigger problem is when you use infinite recursion. That is after the game is over you call method <em>starting</em> all over again, while it actually is still being executed. This way the interpreter has to keep the context of the first method call in memory while the second one is executed, by the moment you play 250 games, it becomes too much for the interpreter and it while throw an exception.</p>
<p>The way to fix this is to not call <em>play_again</em> from <em>main_func</em> instead return to the main function:</p>
<pre><code>def main_func(word_lst, guesses_given):
    secret_word = random.choice(word_lst)
    output = []
    guessed_letters = []
    alphabet = string.ascii_letters
    length = len(secret_word)
    print(f'Your word has {len(secret_word)} characters ')

    for i in range(len(secret_word)):
        output.append('_')

    while '_' in output:

        letter = input('Enter a letter: ')

        if letter not in alphabet:
            print('You should enter only one letter!\n ')
        elif len(letter) != 1:
            print('You can only display 1 letter at a time\n')
        else:
            if letter not in guessed_letters:
                guessed_letters.append(letter)

                if letter in secret_word:
                    for n in range(length):
                        if secret_word[n] == letter:
                            output[n] = letter.upper()
                    print(*output, sep=' ')
                    if '_' not in output:
                        print('You won!')

                if letter not in secret_word:
                    guesses_given -= 1
                    print(f"This letter is not in the secret word. REMAINING TRIES: {guesses_given}\n")
                    if guesses_given == 0:
                        print(f"You lost. The secret word was '{secret_word.upper()}'")
                        break

            else:
                print('You have already guessed this letter!\n\n')



    print('GAMEOVER')
</code></pre>
<p>Then you make <em>play_again</em> return a True or a False value depending on the choice made.</p>
<pre><code>def play_again():
    again = input('Play again? (y/n)\n')
    if again.lower() == 'yes' or again.lower() == 'y':
        return True 
    else:
        return False
</code></pre>
<p>Now you can now have a loop in main that plays until the player has enough:</p>
<pre><code>if __name__ == '__main__':
    starting()
    while play_again():
        starting()
</code></pre>
    </div>