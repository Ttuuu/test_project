<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Implementation issues</h1>

<ul>
<li><p><code>using namespace std;</code> is discouraged.</p></li>
<li><p>Placing such big arrays as <code>xs</code> and <code>ys</code> on the stack can cause stack overflows. For example, on 64-bit Windows their combined size would be \$2 * 8 * 100000 = 1600000\$ Bytes (= 1.6 MB), which is above the default Windows stack size of 1 MiB. (YMMV for other platforms.)</p></li>
<li><p>All those comments are distracting and don't provide any value to the reader.</p></li>
<li><p>Some parts of the code could be refactored out into functions and reused, which would increase readability by reducing nesting.</p></li>
<li><p>Arrays by themselves aren't the right data structure for this problem.</p></li>
</ul>

<h1>Choosing the right data structure/algorithm</h1>

<p>The implementation tries to find 3 matching points by combining every point with every possible other point, and if a match was found, again with every other possible point, resulting in a runtime of \$\mathcal{O}(n^3)\$.</p>

<p><strong>This is bad</strong>. But we can improve!</p>

<h3>Algorithm</h3>

<p>A better algorithm looks like this:</p>

<ol>
<li><p>Create sets of points which have the same x-coordinate.</p></li>
<li><p>Create a histogram over the y-coordinates.</p></li>
<li><p>For each set \$p\$ created in step 1:</p>

<ul>
<li><p>If there are less than 2 points in \$p\$, then there cannot be any triangle with a leg along that x-coordinate.</p></li>
<li><p>Foreach y-coordinate of the points in \$p\$ check if there is at least another point on the same y-coordinate (by retrieving the count \$q\$ using the histogram created in step 2).</p>

<p>If that's the case, then there can be \$(\lvert p\rvert - 1) * (q - 1)\$ right triangles at this point.</p></li>
</ul></li>
</ol>

<h3>Data structures</h3>

<p>Instead of treating each point as a whole, we split it up into its coordinates in order to create a <code>std::unordered_map&lt;int, std::unordered_set&lt;int&gt;&gt;</code>, (<code>x-coordinate -&gt; set of y-coordinates</code>) to store the results of step 1.</p>

<p>For the histogram (step 2), a <code>std::unordered_map&lt;int, int&gt;</code> (<code>y-coordinate -&gt; counter</code>) would be the obvious choice.</p>

<p>Both datastructures chosen (<code>std::unordered_map</code> and <code>std::unordered_set</code>) have \$\mathcal{O}(1)\$ lookup cost and amortized \$\mathcal{O}(1)\$ insertion.</p>

<h1>Complexity</h1>

<p>Since step 1 and step 2 can be done during the same pass over the input data, we effectivly only need 2 passes over the whole set of points.</p>

<p>The first pass inserts all points into <code>points</code> (1 lookup/insertion, plus 1 insertion into the returned set) and adds a count to the <code>histogram</code> (1 insertion/lookup).</p>

<ul>
<li><p><code>std::unordered_map</code> lookup/insertion: \$\mathcal{O}(1)\$ (amortized for insertion)</p></li>
<li><p><code>std::unordered_set</code> insertion: \$\mathcal{O}(1)\$ amortized.</p></li>
</ul>

<blockquote>
  <p>Total complexity of pass 1: \$\mathcal{O}(n)\$</p>
</blockquote>

<p>In the second pass, we iterate over the x-coordinates in <code>points</code> (\$\mathcal{O}(1)\$ per outer iteration step) and then the corresponding y-coordinates (\$\mathcal{O}(1)\$ per inner iteration step).</p>

<p>Since these iteration steps are basically recreating all the points from the input, there are \$\mathcal{O}(n)\$ inner iteration in total, each with a complexity of \$\mathcal{O}(1)\$, with a combined complexity of \$\mathcal{O}(n)\$.</p>

<p>For each outer iteration step we performa a call to <code>std::unordered_set::size</code> (\$\mathcal{O}(1)\$).</p>

<p>For each inner iteration step we perform 1 lookup in the histogram (\$\mathcal{O}(1)\$) plus some minimal arithmetic (\$\mathcal{O}(1)\$).</p>

<blockquote>
  <p>Total complexity of pass 2: \$\mathcal{O}(n)\$</p>
</blockquote>

<h1>Example implementation of the algorithm</h1>

<pre><code>#include &lt;unordered_map&gt;
#include &lt;unordered_set&gt;
#include &lt;iostream&gt;
#include &lt;numeric&gt;
#include &lt;stdexcept&gt;

class triangle_finder {
    std::unordered_map&lt;int, std::unordered_set&lt;int&gt;&gt; points;
    std::unordered_map&lt;int, int&gt; histogram;

public:
    int count_axis_aligned_triangles() noexcept {
        auto count = 0;

        for(const auto&amp; [x, y_coords] : points) {
            count = std::accumulate(
                std::begin(y_coords),
                std::end(y_coords),
                count,
                [&amp;, num_points_x = y_coords.size()](auto count, auto y) {
                    return count + (num_points_x - 1) * (histogram[y] - 1);
                });
        }

        return count;
    }

    friend std::istream&amp; operator&gt;&gt;(std::istream&amp;, triangle_finder&amp;) noexcept;
};

std::istream&amp; operator&gt;&gt;(std::istream&amp; stream, triangle_finder&amp; p) noexcept {
    auto num_points = 0;
    stream &gt;&gt; num_points;

    for(auto i = 0; i &lt; num_points; ++i) {
        int x, y;
        if(!stream &gt;&gt; x &gt;&gt; y) return stream;

        p.points[x].insert(y);
        ++p.histogram[y];
    }

    return stream;
}

int main() {
    triangle_finder p{};

    if(std::cin &gt;&gt; p) {
        std::cout &lt;&lt; p.count_axis_aligned_triangles();
    } else {
        std::cerr &lt;&lt; "Error: Couldn't parse input\n";
        return 1;
    }
}
</code></pre>
    </div>