<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You are suffering from repetition. Repeatedly, and it's mindmeltingly repetitive.</p>

<p>What you have is a list of types, which you repeat all over, and the corresponding enum-values.<br>
For the sake of simplicity and efficiency, let's assume the enum-values start at <code>0</code> and follow consecutively. It's easy to generalize, if you need it.</p>

<p>What you need is a way to apply some code (a generic lambda, or its moral equivalent in pre-C++14 code) to all those enum+type pairs.</p>

<p>A bit of generic machinery:</p>

<pre><code>template &lt;std::size_t Is, class F&gt;
static inline void static_for_impl(F&amp;&amp; f, std::index_sequence&lt;Is...&gt;) {
    (f(std::integral_constant&lt;std::size_t, Is&gt;()), ...);
}
template &lt;std::size_t N, class F&gt;
void static_for(F f) {
    static_for_impl(f, std::make_index_sequence&lt;N&gt;());
}

template &lt;class tuple, class F&gt;
void for_all_types(F f) {
    static_for&lt;std::tuple_size_v&lt;tuple&gt;&gt;([&amp;](auto N){
        using T = std::tuple_element_t&lt;N, tuple&gt;;
        if constexpr (!std::is_same_v&lt;void, T&gt;)
            f((T*)0, N);
    });
}

template &lt;class R, class tuple, class F&gt;
R select_type(F f, std::size_t i) {
    R r;
    bool found = false;
    for_all_types&lt;tuple&gt;([&amp;](auto p, auto N){
        if (i == N) {
            r = f(p);
            found = true;
        }
    });
    if (!found)
        throw std::invalid_argument();
    return r;
}
</code></pre>

<p>Some place to store all the types, and only once:</p>

<pre><code>using my_type_list = std::tuple&lt;type0, type1, type2, type3, type4, ...&gt;;
</code></pre>

<p>An example use:</p>

<pre><code>template&lt;class... X, class ET&gt;
auto Event::createInstance(const ET eventType, X&amp;&amp;... x) {
    return select_type&lt;std::shared_ptr&lt;Event&gt;, my_type_list&gt;([&amp;](auto p){
        return std::make_shared&lt;std::decay_t&lt;decltype(*p)&gt;&gt;(std::forward&lt;X&gt;(x)...);
    }, (std::size_t)eventType);
}
</code></pre>

<p>The call to functions like <code>classname::preCheck</code> is probably normally best solved with a virtual function, unless you need a normal pointer, or you don't actually have an instance to play with like in your case:</p>

<pre><code>template&lt;class F, class ET&gt;
auto eventType_to_preCheck(const ET eventType) {
    return select_type&lt;F*, my_type_list&gt;([](auto p){
        F* f = std::decay_t&lt;decltype(*p)&gt;::preCheck;
        return f;
    }, (std::size_t)eventType);
}

// You'll have to supply the exact signature when calling
</code></pre>
    </div>