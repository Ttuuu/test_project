<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First, a few general comments about the 'main function' in Python. The <code>__name__ == '__main__'</code> idiom is a way to distinguish between simply importing a module and launching one. You may want to simply import the module you just wrote to reuse the <code>checkZips</code> function elsewhere, but you don't want the main function to run when doing that.</p>

<p>Some people simply write:</p>

<pre><code>if __name__ == '__main__':
    main()
</code></pre>

<p>to run a function called <code>main()</code> when running this module (eg. with <code>python mymodule.py</code>). This is only a convention, the function could be called whatever you want it to be, or you could simply put all the code in the conditional, as you've done here. TextMate provided you with a <code>main()</code> function with a <code>pass</code> statement to specify that it does nothing and avoid a syntax error. Long story short: <strong>remove that main function</strong>!</p>

<pre><code>import sys
import os
import csv
from bs4 import BeautifulSoup
import requests
</code></pre>

<p>Your module lacks a docstring. It could contain the explanation you gave us. Read more about Python code conventions in <a href="http://www.python.org/dev/peps/pep-0008/" rel="noreferrer">PEP 8</a> and docstring conventions <a href="http://www.python.org/dev/peps/pep-0257/" rel="noreferrer">PEP 257</a>.</p>

<pre><code>def main():
    pass
</code></pre>

<p>Remove that, as said earlier.</p>

<pre><code>def getCityState(zipCode):
# given zip code, return city and state if available
</code></pre>

<p>This should be a docstring.</p>

<pre><code>    zipCode = str(zipCode)
</code></pre>

<p>Your zip code is already a string, you don't need to convert it first.</p>

<pre><code>    url = "http://www.city-data.com/zips/" + zipCode + ".html"
    r = requests.get(url)
    data = r.text
    soup = BeautifulSoup(data)
</code></pre>

<p>You may not need all those variables, but that's up to you (eg. you could simply write <code>BeautifulSoup(r.text)</code>).</p>

<pre><code>    if soup.findAll(text="City:") ==[]:
</code></pre>

<p>Be careful about indentation and follow PEP8 closely (eg. using a PEP 8 checker). Here you need a space after the <code>==</code>, it makes the whole code easier to read and allows everyone to focus on the important matters.</p>

<pre><code>        cityNeeded = soup.findAll(text="Cities:")
        for t in cityNeeded:
            return t.find_next('a').string

    else:
        cityNeeded = soup.findAll(text="City:")
        for t in cityNeeded:
            return t.find_next('a').string
</code></pre>

<p>First, you might want to know about list comprehensions, this can be written as <code>return [t.find_next('a').string for t in cityNeeded]</code>. Second, <a href="http://en.wikipedia.org/wiki/Don%27t_repeat_yourself" rel="noreferrer">Don't repeat yourself!</a> Having duplicated code increases the likelihood of errors, eg. when you only fix one part. It is easy here, you can simply move the loop out of the conditional. You can also use a regular expression to remove the conditional entirely (untested):</p>

<pre><code>cityNeeded = soup.findAll(text=re.compile("City:|Cities:"))
</code></pre>

<p>Make sure to <code>import re</code>.</p>

<pre><code>def getTableFromCSV(fileName, settings):
    with open(fileName, settings) as fp:
        reader = csv.DictReader(fp, skipinitialspace=True)
        table = [row for row in reader]
        header = reader.fieldnames
    return header,table # header and table are lists of dicts
</code></pre>

<p>Nothing much to say here, so I will talk about coding style. :) PEP 8 says that you should write <code>get_table_from_csv</code>. If you don't like it, you don't have to, it's just how most Python coders write code. Second, <code>header,table</code> should be <code>header, table</code>. Third, PEP 8 says you need a double space before inline comments (<code>return header, table  # ...</code>). Fourth, this isn't really a comment, and would be a better fit in the docstring. Fifth, about indentation: don't mix tabs and spaces, and no trailing spaces after your lines. (You didn't have any trailing spaces in this function though).</p>

<pre><code>def printTable(header, table):
# print table in console
    print"begin printTable"
    for row in table:
        print row
    print"end printTable"
</code></pre>

<p><code>print</code> is statement in Python 2, but a function in Python 3. I'd advise you to switch to Python 3 since Python 2 will soon be the past of Python, and at least write things such as <code>print("end printTable")</code> to prepare yourself to write Python 3. There are a few major differences and many small differences between the two version, so the earlier you switch, the easier it will be to get acustomed to Python 3.</p>

<p>Also, remove debug prints when you don't need them anymore.</p>

<pre><code>def addToList(theList, position, newItem):
    theList.insert(position, newItem)
    return theList

def addToDict(theDict, newKey, newItem):
    theDict[newKey] = newItem
    return theDict
</code></pre>

<p>Come on, you don't need a function for those!</p>

<p>Overall, don't be overwhelmed by my comments. The code is nice, but there a lots of little things to improve. :)</p>
    </div>