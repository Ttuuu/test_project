<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Well, the first thing I can see is it's good you have been exposed to the concept of OOP, but you're needing a bit more understanding, which will come with experience.
Primarily, OOP is really around objects and their data or the actions which they do - for instance <code>Dog("Spot").bark()</code> as an action or <code>Dog("Spot").name</code> as a property/value. </p>

<p>I mention that because for Rock, Paper, Scissors - you're folding everything into one class, which is not what you should do. That would be like all the dogs in the world being inside one big 'dog' blob which barks - doesn't make sense, right? Don't worry - you'll improve with learning and experience.</p>

<p>Now, your code has a lot of functionality in it, and this is going to be difficult to change and verify, so we're going to go down the Test Driven Development (TDD) road. This is going to be new for you, so hold on.</p>

<p>We'll save your code as <code>rockpaper.py</code>, and create our testing file <code>test_rockpaper.py</code>.
The first thing is to disable your class from executing straight away. So <code>.getname()</code> <code>.getchoices()</code> <code>.getoptions()</code>  <code>.main()</code> and the <code>Rock_Paper_Scissors()</code> call will be commented out from <code>rockpaper.py</code> - and we'll write our first test:</p>

<pre><code>import pytest
from .rockpaper import RockPaperScissors

def test_class_create():
    game = RockPaperScissors()
    assert game
</code></pre>

<p>Let's run the test:</p>

<pre><code>C:\Users\user\Documents\dev\tests&gt;pytest tests_rockpaper.py
========== test session starts ==========
platform win32 -- Python 3.6.9[pypy-7.3.0-final], pytest-5.4.1, py-1.8.1, pluggy-0.13.1
rootdir: C:\Users\user\Documents\dev\tests
plugins: dash-1.9.1
collected 1 item

tests_rockpaper.py .     [100%]

========== 1 passed in 0.05s ==========
</code></pre>

<p>Great. Now, you might be thinking "why test creating the class? it's pointless" - and it's a good question. You're not actually testing the class itself (well, obviously you are), but what you <strong>are</strong> testing is that your testing harness/setup works properly.</p>

<p>Let's test the Player's name - from the <code>.getname()</code> function we disabled before. Now, as we're doing input, we need to fake the input. Here is the test function for that -</p>

<pre><code>import io

def test_get_name(monkeypatch):
    game = RockPaperScissors()
    monkeypatch.setattr('sys.stdin', io.StringIO('myname'))
    game.getname()
    assert game.name == "myname"
</code></pre>

<p>and we run the test again:</p>

<pre><code>C:\Users\user\Documents\dev\tests&gt;pytest tests_rockpaper.py
========== test session starts ==========
platform win32 -- Python 3.6.9[pypy-7.3.0-final], pytest-5.4.1, py-1.8.1, pluggy-0.13.1
rootdir: C:\Users\user\Documents\dev\tests
plugins: dash-1.9.1
collected 2 items

tests_rockpaper.py .F       [100%]

========== FAILURES ==========
_____ test_get_name _____

monkeypatch = &lt;_pytest.monkeypatch.MonkeyPatch object at 0x06a27c30&gt;

    def test_get_name(monkeypatch):
        game = RockPaperScissors()
        monkeypatch.setattr('sys.stdin', io.StringIO('myname'))
        game.getname()
&gt;       assert game.name == "myname"
E       AttributeError: 'RockPaperScissors' object has no attribute 'name'

tests_rockpaper.py:13: AttributeError
----- Captured stdout call -----
Enter your name: Hello, myname
========== short test summary info ==========
FAILED tests_rockpaper.py::test_get_name - AttributeError: 'RockPaperScissors' object has no attribute 'name'
========== 1 failed, 1 passed in 0.27s ==========
</code></pre>

<p>Here we can see that it recognises <code>myname</code> as the player's name - but we can see that the class doesn't have an attribute "name". Remember <code>Dog("Spot").name</code>? Each class should have properties/attributes that you can query externally, if you need to. For instance, <code>name</code> is a public attribute/property, but perhaps "magical_name" is only known to the player themselves and not exposed - this is called a private property/attribute.
Maybe that makes sense? If not, read up on public verses private attributes.</p>

<p>Inside <code>RockPaperScissors</code>, we need to add the getter and setter for the public attribute name, as well as fix up <code>getname(self)</code> to make it cleaner:</p>

<pre><code>class RockPaperScissors:
    def __init__(self):
        self._name = ""

    @property
    def name(self):
        return self._name

    @name.setter
    def name(self, value):
        print(f'Hello, {value}')
        self._name = value

    def getname(self):
        self.name = input('Enter your name: ')
</code></pre>

<p>What we have done is introduce a private variable, <code>_name</code>, initialise it inside the class, and set it initially to an empty string (this is important to define variables in your classes before using them). Now  <code>RockPaperScissors</code> has a public  <code>.name</code>  property (get, and set) and the <code>getname</code> function/method refers to that public property.</p>

<p>The reason why you use the public property in your class methods/functions is that you can add validation (or other modifiers) inside the setter, before the value is placed in the private variable. This is something you can read about further. The point is not to cheat by changing the private variable <code>self._name</code> anywhere else in your program - <em>except in the setter</em> - this is because many bugs in coding come from changing values of the variables at different points in the code. 
If you only ever change variable data in <strong>one place</strong>, then bugs are very easy to track down.</p>

<p>Now, if we re-run the pytest, we see:   </p>

<pre><code>C:\Users\user\Documents\dev\tests&gt;pytest tests_rockpaper.py
========= test session starts =========
platform win32 -- Python 3.6.9[pypy-7.3.0-final], pytest-5.4.1, py-1.8.1, pluggy-0.13.1
rootdir: C:\Users\user\Documents\dev\tests
plugins: dash-1.9.1
collected 2 items

tests_rockpaper.py ..            [100%]

========== 2 passed in 0.07s ==========
</code></pre>

<p>Great! 2 passing tests. Now, before we can look at <code>getchoices()</code>, we can see there is a dependency between it and <code>getoptions()</code>.
The <code>default_options</code> should be moved to the <code>__init__</code> - and really for <code>getoptions()</code> - what we're looking at is a validation function - not a "<strong>get</strong>" at all. Let's integrate both functions into one. Firstly, let's create our test and see it fail.</p>

<pre><code>def test_get_choices(monkeypatch):
    game = RockPaperScissors()
    monkeypatch.setattr('sys.stdin', io.StringIO('rock,paper,scissors'))
    game.getchoices()
    assert game.choices == ["rock","paper","scissors"]
</code></pre>

<p>and the failure (chopped to save space):</p>

<pre><code>        monkeypatch.setattr('sys.stdin', io.StringIO('rock,paper,scissors'))
        game.getchoices()
&gt;       assert game.choices == ["rock","paper","scissors"]
E       AttributeError: 'RockPaperScissors' object has no attribute 'choices'

tests_rockpaper.py:19: AttributeError
---------- Captured stdout call ---------
Enter an Odd Number of Options: Okay, let's start
======= short test summary info =======
FAILED tests_rockpaper.py::test_get_choices - AttributeError: 'RockPaperScissors' object has no attribute 'choices'
===== 1 failed, 2 passed in 0.29s =====
</code></pre>

<p>This is the same as what we had for the <code>.name</code> property - again with OOP, we need properties (expose public properties, and hide the private properties). The details we can see below in the final code, but you can  see that we have incorporated the validation into the getter for the game choices.</p>

<p>So - that takes care of fixing the class <code>__init__</code> issues and making those properties proper for Python.
Let's move onto the operation you have for <code>main()</code>. Talking further about OOP, objects aren't a program. 
Another analogy - you could have a class <code>Key</code> - and create a <code>key = Key()</code>. Does that key automatically insert and turn? No. A person puts the key into a lock and turns. The program is the one to create the key, and the program should insert the key (<em>or fails inserting the key</em>) and if successful, turns the key.</p>

<p>It is the program which will create your <code>RockPaperScissors</code> object, which contains data, and contains functions which act on that internal data.</p>

<p>What this means for your class, is that the code in <code>main()</code> must be removed from the class and placed into the program.</p>

<p>The program, for Python, starts with a statement at the bottom (I call it the entry point). It is necessary we have this, first because it tells your readers where your code starts "here", and second - if your code employs automated documentors, like Sphinx, it instantiates all the objects in your code before performing reflection to document your code. If you are missing the entry point, your code would be executed immediately, which would break things like Sphinx. So, we have your entry point like this so far:</p>

<pre><code>if __name__ == "__main__":
    game = RockPaperScissors()
    game.getname()
    game.getchoices()
</code></pre>

<p>and if I re-run the tests again - the tests work perfectly - because they don't interact (like Sphinx) with the entry point - because the tests only want the class <code>RockPaperScissors()</code> - and not the program. I hope it's starting to make a little more sense now? If not, keep at it, it should become clear in time.</p>

<p>So, the first few lines of your <code>main()</code> are:</p>

<pre><code>def main(self):
    self.search_for_player()
    if self.user_found is False:
        self.create_new_user()
</code></pre>

<p>So we will create a test for <code>search_for_player()</code>. As you can see, I have "pythonised" the function and property names - we use <strong>snake_case</strong> for everything except classes. This is part of the <strong>PEP8</strong> naming standard which Python uses. I recommend spending a little time reading about PEP8 - it will help make your Python code better. Okay, so first, as is the method in TDD, we create a failing test.</p>

<pre><code>def test_search_for_player():
    game = RockPaperScissors()
    game.search_for_player()
    assert game.user_found is False
</code></pre>

<p>That looks very similar to your code above, right? I'm rushing a bit, but if the code is valid, it should pass easily - but it fails -</p>

<pre><code>    def test_search_for_player():
        game = RockPaperScissors()
&gt;       game.search_for_player()

tests_rockpaper.py:23:
 _ _ _

self = &lt;tests.rockpaper.RockPaperScissors object at 0x0649dfd0&gt;

    def search_for_player(self):
&gt;       scores = open('rating.txt', 'r')
E       FileNotFoundError: [Errno 2] No such file or directory: 'rating.txt'

rockpaper.py:42: FileNotFoundError
======= short test summary info =======
FAILED tests_rockpaper.py::test_search_for_player - FileNotFoundError: [Errno 2] No such file or directory: 'rating.txt'
===== 1 failed, 3 passed in 0.31s =====
</code></pre>

<p>It looks like we've encountered a hidden bug in your code. I'm guessing you created the <code>rating.txt</code> file when you were first creating your program? 
However, as I'm running it on my system, and as the file doesn't exist, the program should naturally crash (or perhaps continue on silently?). This TDD processes allows us to test parts of the code independently without "prior states" affecting the outcome. Let's look at the function -</p>

<pre><code>def search_for_player(self):
    scores = open('rating.txt', 'r')
    for line in scores:
        score = line.split()
        if score[0] == self.name:
            self.current_score = int(score[1])
            self.user_found = True
            scores.close()
            return
    self.user_found = False
</code></pre>

<p>There are some issues with this function that jump out at me. Firstly, you don't check for the file existing (as we just found out) on the first line of code, and the last line is creating <code>self.user_found</code> - we should put that variable inside the class <code>__init__</code> (and you were creating a class variable inside the class instead of initialising it at the start). 
I can also see there will be other issues, like not validating each line of data found in the file, and the forced function exit with return, but we can leave that for an exercise for you to handle at your leisure.</p>

<p>So a minor change, the user_found is placed in the <code>__init__</code>, and we come out with:</p>

<pre><code>def search_for_player(self):
    try:
        scores = open('rating.txt', 'r')
        for line in scores:
            score = line.split()
            if score[0] == self.name:
                self.current_score = int(score[1])
                self.user_found = True
                scores.close()
    except FileNotFoundError:
        pass
</code></pre>

<p>The test now passes, but as the code from <code>main()</code> says:</p>

<pre><code>game.search_for_player()
if game.user_found is False:
    game.create_new_user()
</code></pre>

<p>Let's extend the test to:</p>

<pre><code>def test_search_for_player():
    game = RockPaperScissors()
    game.search_for_player()
    assert game.user_found is False
    game.name = "myname"
    game.create_new_user()
    assert game.user_found is True
</code></pre>

<p>And re-run the test:</p>

<pre><code>        assert game.user_found is False
        game.create_new_user()
&gt;       assert game.user_found is True
E       assert False is True
E        +  where False = &lt;tests.rockpaper.RockPaperScissors object at 0x06d51e10&gt;.user_found

tests_rockpaper.py:27: AssertionError
======= short test summary info =======
FAILED tests_rockpaper.py::test_search_for_player - assert False is True
</code></pre>

<p>We can see the error appears that the <code>user_found</code> flag isn't being set correctly. Of course! Let's fix that:</p>

<pre><code>def create_new_user(self):
    scores = open('rating.txt', 'a')
    print(f'\n{self.name} 0', file=scores, flush=True)
    scores.close()
    self.user_found = True
</code></pre>

<p>and let's delete the file <code>rating.txt</code> just to make sure this particular test runs properly -</p>

<pre><code>C:\Users\user\Documents\dev\tests&gt;pytest tests_rockpaper.py
========= test session starts =========
platform win32 -- Python 3.6.9[pypy-7.3.0-final], pytest-5.4.1, py-1.8.1, pluggy-0.13.1
rootdir: C:\Users\user\Documents\dev\tests
plugins: dash-1.9.1
collected 4 items

tests_rockpaper.py ....      [100%]

========== 4 passed in 0.07s ==========
</code></pre>

<p>Perfect. However, I think there might be a problem in the code, let's run the test again:</p>

<pre><code>_____ test_search_for_player ______

    def test_search_for_player():
        game = RockPaperScissors()
&gt;       game.search_for_player()

tests_rockpaper.py:24:
 _ _ _ _

self = &lt;tests.rockpaper.RockPaperScissors object at 0x07089030&gt;

    def search_for_player(self):
        try:
            scores = open('rating.txt', 'r')
            for line in scores:
                score = line.split()
&gt;               if score[0] == self.name:
E               IndexError: list index out of range

rockpaper.py:46: IndexError
======= short test summary info =======
FAILED tests_rockpaper.py::test_search_for_player - IndexError: list index out of range
===== 1 failed, 3 passed in 0.31s =====
</code></pre>

<p>Let's look at the contents of rating.txt? It is:</p>

<pre><code>C:\Users\user\Documents\dev\tests&gt;type rating.txt

myname 0
</code></pre>

<p>that looks fine? If we delete the <code>rating.txt</code> and run the tests again - they pass - but running the tests another time (a "post-file creation" scenario) - the tests fail.</p>

<p>I think I can see the bug - the line:</p>

<pre><code>print(f'\n{self.name} 0', file=scores, flush=True)
</code></pre>

<p>with the "<strong>\n</strong>" line-feed is not being taken into consideration. Removing that, and deleting the <code>rating.txt</code> - the tests all run fine first time, a second time, and a third time. Let's look at the <code>rating.txt</code> file:</p>

<pre><code>C:\Users\user\Documents\dev\tests&gt;type rating.txt
myname 0
myname 0
myname 0
</code></pre>

<p>Ah, that's no good. It's continually appending the data file.</p>

<p>So, let's change:</p>

<pre><code>scores = open('rating.txt', 'a')
</code></pre>

<p>into:</p>

<pre><code>scores = open('rating.txt', 'w')
</code></pre>

<p>and run the tests again a few times - yes, that fixes it - we're only seeing a single line of data in the file, and all the tests still pass successfully.</p>

<p>Let's complete the rest of the program into the entry point, remove <code>self.main()</code> and fix <code>game.options</code> into <code>game.choices</code>, as we merged those two earlier:</p>

<pre><code>if __name__ == "__main__":
    game = RockPaperScissors()
    game.getname()
    game.getchoices()
    game.search_for_player()
    if game.user_found is False:
        game.create_new_user()
    while game.running:
        response = False
        while response is False:
            computer = choice(game.choices)
            human = input()
            response = game.check_choice(human)

        if game.running and response:
            _round = game.check_result(human, computer)
            game.update_score(_round)
</code></pre>

<p>My IDE, PyCharm, highlights <code>_round = game.check_result(human, computer)</code> - it says human and computer are being referenced before being used. 
This is true because of "variable scope" - <code>human</code> and <code>computer</code> are defined and used inside the while loop - but once we leave the while loop - they are "lost". Python is a bit more forgiving than other languages. This code would crash in most other languages.</p>

<p>Let's address that later, and test the while loop with (and later, to monkeypatch the input):</p>

<pre><code>def test_input_loop():
    game = RockPaperScissors()
    game.name = "myname"
    game.search_for_player()
    response = False
    while response is False:
        computer = choice(game.choices)
        human = input()
        response = game.check_choice(human)
</code></pre>

<p>Do the tests run successfully? No, we get a failure -</p>

<pre><code>_________ test_input_loop _________

    def test_input_loop():
        game = RockPaperScissors()
        game.name = "myname"
&gt;       game.search_for_player()

tests_rockpaper.py:35:
_ _ _ _ _ _ _ _ _ _ _ _

self = &lt;tests.rockpaper.RockPaperScissors object at 0x06dd03b0&gt;

    def search_for_player(self):
        try:
            scores = open('rating.txt', 'r')
&gt;           for line in scores:
E           ValueError: I/O operation on closed file

rockpaper.py:44: ValueError
----- Captured stdout call --------
Hello, myname
======= short test summary info =======
FAILED tests_rockpaper.py::test_input_loop - ValueError: I/O operation on closed file
===== 1 failed, 4 passed in 0.35s =====
</code></pre>

<p>This is an interesting bug we have discovered. Usually people use a concept called a Context Manager to manage the scope of a resource. It automatically manages closing of the file, we don't need to specifically close that resource. Let's update the code to that standard pattern:</p>

<pre><code>def search_for_player(self):
    try:
        scores = []
        with open('rating.txt', 'r') as score_file:
            scores = score_file.readlines()
        for line in scores:
            score = line.split()
            if score[0] == self.name:
                self.current_score = int(score[1])
                self.user_found = True
                # scores.close()
    except FileNotFoundError:
        pass

def create_new_user(self):
    with open('rating.txt', 'w') as score_file:
        score_file.write(f'{self.name} 0')
        self.user_found = True
</code></pre>

<p>And run the tests:</p>

<pre><code>tests_rockpaper.py ....F        [100%]

============== FAILURES ===============
_________________ test_input_loop __________________

    def test_input_loop():
        game = RockPaperScissors()
        game.name = "myname"
        game.search_for_player()
        response = False
        while response is False:
&gt;           computer = choice(game.choices)

tests_rockpaper.py:38:
_ _ _  _ _ _ _ _ _ _ _ _ _ _

self = &lt;random.Random object at 0x03a14510&gt;, seq = []

    def choice(self, seq):
        """Choose a random element from a non-empty sequence."""
        try:
            i = self._randbelow(len(seq))
        except ValueError:
&gt;           raise IndexError('Cannot choose from an empty sequence') from None
E           IndexError: Cannot choose from an empty sequence

c:\pypy3.6\lib-python\3\random.py:267: IndexError
------------ Captured stdout call --------------------
Hello, myname
======= short test summary info =======
FAILED tests_rockpaper.py::test_input_loop - IndexError: Cannot choose from an empty sequence
===== 1 failed, 4 passed in 0.39s =====
</code></pre>

<p>An empty set of choices? We're not calling <code>game.getchoices()</code>, so the default set isn't being set correctly. As we're defining the default set of choices, let's force that during <code>RockPaperScissors()</code> instantiation.</p>

<pre><code>    self.default_options = ["rock", "paper", "scissors"]
    self.choices = ""
</code></pre>

<p>Having an empty string will ensure the default choices are set because of the validation in the game.choices setter.</p>

<p>Running the tests again, we see that I forgot to add the default input - so let's do that - we'll make it the choice of "<strong>rock</strong>" -</p>

<pre><code>def test_input_loop(monkeypatch):
    game = RockPaperScissors()
    game.name = "myname"
    game.search_for_player()
    response = False
    while response is False:
        computer = choice(game.choices)
        monkeypatch.setattr('sys.stdin', io.StringIO('rock'))
        human = input()
        response = game.check_choice(human)


========= test session starts =========
platform win32 -- Python 3.6.9[pypy-7.3.0-final], pytest-5.4.1, py-1.8.1, pluggy-0.13.1
rootdir: C:\Users\user\Documents\dev\tests
plugins: dash-1.9.1
collected 5 items

tests_rockpaper.py ....F                                                                                                  [100%]

============== FAILURES ===============
______________ test_input_loop ______________

monkeypatch = &lt;_pytest.monkeypatch.MonkeyPatch object at 0x06d19d70&gt;

    def test_input_loop(monkeypatch):
        game = RockPaperScissors()
        game.name = "myname"
        game.search_for_player()
        response = False
        while response is False:
            computer = choice(game.choices)
            monkeypatch.setattr('sys.stdin', io.StringIO('rock'))
            human = input()
&gt;           response = game.check_choice(human)

tests_rockpaper.py:41:
_ _ _ _ _ _ _ _ _ _ _

self = &lt;tests.rockpaper.RockPaperScissors object at 0x06d19d90&gt;, human = 'rock'

    def check_choice(self, human):
        if human == '!exit':
            print('Bye!')
            self.running = False
            return True
        elif human == '!rating':
            print(f'Your rating: {self.current_score}')
            return False
&gt;       elif human in self.options:
E       AttributeError: 'RockPaperScissors' object has no attribute 'options'

rockpaper.py:68: AttributeError
------------------------------- Captured stdout call -----------------------
Okay, let's start
Hello, myname
======= short test summary info =======
FAILED tests_rockpaper.py::test_input_loop - AttributeError: 'RockPaperScissors' object has no attribute 'options'
===== 1 failed, 4 passed in 0.42s =====
</code></pre>

<p>Of course, we changed that code to only look at <code>game.choices</code> - let's do a find all refactoring for <code>game.options</code> and make it <code>game.choices</code>, and re-run the tests. Result?  <code>5 passed in 0.07s Great</code>.</p>

<p>Being cheeky, let's fix the same test with proper-scoped values (<code>human</code> and <code>computer</code>), and see if it works:</p>

<pre><code>def test_input_loop(monkeypatch):
    game = RockPaperScissors()
    game.name = "myname"
    game.search_for_player()
    response = False
    human = ""
    computer = ""
    while response is False:
        computer = choice(game.choices)
        monkeypatch.setattr('sys.stdin', io.StringIO('rock'))
        human = input()
        response = game.check_choice(human)

    if game.running and response:
        _round = game.check_result(human, computer)
        game.update_score(_round)
</code></pre>

<p>And run the tests:</p>

<pre><code>C:\Users\user\Documents\dev\tests&gt;pytest tests_rockpaper.py
========= test session starts =========
platform win32 -- Python 3.6.9[pypy-7.3.0-final], pytest-5.4.1, py-1.8.1, pluggy-0.13.1
rootdir: C:\Users\user\Documents\dev\tests
plugins: dash-1.9.1
collected 5 items

tests_rockpaper.py .....     [100%]

========== 5 passed in 0.09s ==========

C:\Users\user\Documents\dev\tests&gt;type rating.txt
myname 50
</code></pre>

<p>Let's try running the program!</p>

<pre><code>C:\Users\user\Documents\dev\tests&gt;pypy3 rockpaper.py
Okay, let's start
Enter your name: user
Hello, user
Enter an Odd Number of Options: rock,gun,lightning,devil,dragon,water,air,paper
Okay, let's start
rock
Sorry, but computer chose gun
devil
There is a draw (devil)
dragon
Well done. Computer chose lightning and failed
!rating
Your rating: 150
!exit
Bye!

C:\Users\user\Documents\dev\tests&gt;type rating.txt
user 150
</code></pre>

<p>Great! Looks good. Here is the final testing file, and your program file.</p>

<p>There are still some minor fixes to make, such as - lines 105-107 could be rewritten to use a Context Manager - line 97 uses i which hasn't been initialised outside of the loop, the variable _round could be returned 3 times rather than set and returned at the end of the function (lines 79, 82, 85). Please try those fixes.</p>

<p>Otherwise, good effort. Keep it up!</p>

<p>Listing rockpaper.py:</p>

<pre><code>from random import choice


class RockPaperScissors:
    def __init__(self):
        self.user_found = False
        self._name = ""
        self._choices = []
        self.default_options = ["rock", "paper", "scissors"]
        self.choices = ""
        self.current_score = 0
        self.running = True

    @property
    def name(self):
        return self._name

    @name.setter
    def name(self, value):
        print(f'Hello, {value}')
        self._name = value

    def getname(self):
        self.name = input('Enter your name: ')

    @property
    def choices(self):
        return self._choices

    @choices.setter
    def choices(self, value):
        print("Okay, let's start")
        self._choices = value.split(',') if value != "" else self.default_options

    def getchoices(self):
        self.choices = input('Enter an Odd Number of Options: ')

    def search_for_player(self):
        try:
            scores = []
            with open('rating.txt', 'r') as score_file:
                scores = score_file.readlines()
            for line in scores:
                score = line.split()
                if score[0] == self.name:
                    self.current_score = int(score[1])
                    self.user_found = True
        except FileNotFoundError:
            pass

    def create_new_user(self):
        with open('rating.txt', 'w') as score_file:
            score_file.write(f'{self.name} 0')
            self.user_found = True

    def check_choice(self, human):
        if human == '!exit':
            print('Bye!')
            self.running = False
            return True
        elif human == '!rating':
            print(f'Your rating: {self.current_score}')
            return False
        elif human in self.choices:
            return True
        print('Invalid input')
        return False

    def check_result(self, human, computer):
        human_winning = []
        board = self.choices * 2
        each_side = int((len(board) / 2) // 2)
        start = int(board.index(human) + 1)
        for i in range(start, start + each_side):
            human_winning.append(board[i])

        if human == computer:  # Draw
            print(f'There is a draw ({computer})')
            _round = 'Draw'
        elif computer not in human_winning:  # Win
            print(f'Well done. Computer chose {computer} and failed')
            _round = 'Win'
        else:  # Lose
            print(f'Sorry, but computer chose {computer}')
            _round = 'Lose'

        return _round

    def update_score(self, match_result):
        match_results = ['Win', 'Lose', 'Draw']
        points = [100, 0, 50]
        for i in range(len(match_results)):
            if match_result == match_results[i]:
                self.current_score += points[i]
                break

        if points[i] != 0:
            scores = open('rating.txt', 'r')
            list_of_scores = scores.readlines()
            for index, line in enumerate(list_of_scores):
                if line.split()[0] == self.name:
                    list_of_scores[index] = f'{self.name} {self.current_score}'
                    break

            scores = open('rating.txt', 'w')
            scores.writelines(list_of_scores)
            scores.close()


if __name__ == "__main__":
    game = RockPaperScissors()
    game.getname()
    game.getchoices()
    game.search_for_player()
    if game.user_found is False:
        game.create_new_user()
    while game.running:
        response = False
        human = ""
        computer = ""
        while response is False:
            computer = choice(game.choices)
            human = input()
            assert human
            response = game.check_choice(human)
        if game.running and response:
            _round = game.check_result(human, computer)
            game.update_score(_round)
</code></pre>

<p>Testing file <code>tests_rockpaper.py</code>:</p>

<pre><code>import pytest
import io
from .rockpaper import RockPaperScissors
from random import choice

def test_class_create():
    game = RockPaperScissors()
    assert game

def test_get_name(monkeypatch):
    game = RockPaperScissors()
    monkeypatch.setattr('sys.stdin', io.StringIO('myname'))
    game.getname()
    assert game.name == "myname"

def test_get_choices(monkeypatch):
    game = RockPaperScissors()
    monkeypatch.setattr('sys.stdin', io.StringIO('rock,paper,scissors'))
    game.getchoices()
    assert game.choices == ["rock","paper","scissors"]


def test_search_for_player():
    game = RockPaperScissors()
    game.search_for_player()
    assert game.user_found is False
    game.name = "myname"
    game.create_new_user()
    assert game.user_found is True

# @pytest.mark.skip
def test_input_loop(monkeypatch):
    game = RockPaperScissors()
    game.name = "myname"
    game.search_for_player()
    response = False
    human = ""
    computer = ""
    while response is False:
        computer = choice(game.choices)
        monkeypatch.setattr('sys.stdin', io.StringIO('rock'))
        human = input()
        response = game.check_choice(human)

    if game.running and response:
        _round = game.check_result(human, computer)
        game.update_score(_round)
</code></pre>
    </div>