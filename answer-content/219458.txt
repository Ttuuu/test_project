<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is sort of an extended comment on Martin York's reply.</p>

<p>When you're doing any sort of parallel processing, I advise against re-designing <code>pop</code> so it requires two operations to actually remove an item from the queue, like:</p>

<pre><code>T val = queue.top();
queue.pop();
</code></pre>

<p>With sufficient care, this <em>can</em> work for a single-producer/single-consumer situation, but has the potential to lead to problems even in that limited case.</p>

<p>The minute you get multiple consumers involved, it's completely and irrevocably broken.</p>

<p>My personal advice is that even if you're only currently planning for a single consumer, it's better to design the interface so you could support multiple consumers anyway. Then when/if you use more than one consumer, you don't have to rewrite all the existing code to do it.</p>

<p>After several iterations through it, an interface I've found to work well is:</p>

<pre><code>bool pop(T &amp;);
</code></pre>

<p>The typical implementation is something like this:</p>

<pre><code>bool pop(T &amp;dest) { 
    try { 
        dest = data.top();
        data.pop();
        return true;
    }
    catch(...) { 
        return false; 
    }
}
</code></pre>

<p>With this design, we retain exception safety: if <code>dest = data.top();</code> throws an exception, then we just return false, and the content of the queue remains exactly as it was before <code>pop</code> was called. If it succeeds, we call <code>data.pop();</code>.</p>

<p>It's also (with appropriate use of a mutex or similar) safe for multiple consumers to use in parallel. In particular, we would normally plan on executing the <code>dest = data.top(); data.pop();</code> as an atomic operation, so if we get an item from the queue, we know we'll remove that item. We can't get two threads in parallel that read the same top of queue item, then each remove an item from the queue (one of which hasn't been read and can never be processed).</p>

<p>Depending on the situation, it's often useful to add a timeout to reading, so if you attempt to read but there's nothing in the queue, you don't get stuck there forever.</p>
    </div>