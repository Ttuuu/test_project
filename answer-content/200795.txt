<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Okay, thanks for fixing up the code. Now, to make it more pythonic, we need to move all the statements (not functions) into the entry point, which is a </p>

<pre><code>if __name__ == "__main__":
    # set up screen
    screen = turtle.Screen()
    screen.bgcolor("green")
    screen.title("Pong")
</code></pre>

<p>etc. The code still runs as expected, and now we can look at what needs improving with the code. My IDE says you have 3 imports which are unused. I've ripped those out.<br>
I also see a lot of comments which state the obvious, for example, above "set up screen", and below: </p>

<pre><code> # main game loop
 while True:
</code></pre>

<p>You don't need comments in your code if you've written code which expresses what you're doing. The comment <code># check for bounce and redirect it</code> is useful, as the code doesn't explain in clear english what it does (so :thumbsup: there).</p>

<p>Now we get a little deeper, and see all the <code>if</code> statements. A famous programmer said (in many ways) "every if statement is a function waiting to happen". Let's look at one chunk of your code:</p>

<pre><code>    # collision pong and player
    if isCollision(pong, player):
        pong.dy *= -1
        pong.dx *= -1
        # Update the score
        score += 10
        scorestring = "Score: %s" % score
        score_pen.clear()
        score_pen.write(scorestring, False, align="left", font=("Arial", 14, "normal"))
</code></pre>

<p>Here we see four things - first is the check for collision, next is a modification to the x and y, then we update the score, and write something to the display.</p>

<pre><code>def isCollision(t1, t2):
    distance = math.sqrt(math.pow(t1.xcor() - t2.xcor(), 2) + math.pow(t1.ycor() - t2.ycor(), 2))
    if distance &lt; 20:
        return True
    else:
        return False
</code></pre>

<p>This looks pretty straight forward, if the distance is less than 20, return a bool. However, if we follow the Single Responsibility Principal, this function is actually doing 3 thing. Calculation, determination and returning a result. Let's split it up:</p>

<pre><code>def collision_calculation(t1, t2):
    return math.sqrt(math.pow(t1.xcor() - t2.xcor(), 2) + math.pow(t1.ycor() - t2.ycor(), 2))

def is_collision(t1, t2):
    return collision_calculation(t1, t2) &lt; 20
</code></pre>

<p>Now we have a calculation function that only performs a calculation, and the isCollision function returning True or False. I also renamed your function into snake_case, this is preferred when using Python.</p>

<p>As we've updated that, we can now go back to the large <code>if</code> statement. Given a collision, we update the pong, so let's extract that into a separate function:</p>

<pre><code>def change_pong_direction(pong):
    pong.dy *= -1
    pong.dx *= -1
    return pong
</code></pre>

<p>As we're trying to keep the variables in the main loop the same, we need to pass them into the function and get them out again after the state has been modified. I don't like the name "change_pong_direction", but for the moment it will do.</p>

<pre><code>    if is_collision(pong, player):
        pong = change_pong_direction(pong)
</code></pre>

<p>Let's look at the scoring function now. As mentioned above, we are actually doing several things. Incrementing the score, and changing the display. Let's separate those commands into functions.</p>

<pre><code>def increment_score(score):
    new_score = score + 10
    return new_score
</code></pre>

<p>I've actually added another variable as part of this function, just to make it a little clearer. Of course you can improve it, but it looks like there might be an opportunity to adjust the 10 at a later stage. Such as for games that last longer than a minute, to increase the per-score points. Anyway, continuing on... we need to now write the score to the display:</p>

<pre><code>def write_score(message):
    score_pen.clear()
    score_pen.write("Score: {}".format(message), False, align="left", font=("Arial", 14, "normal"))
</code></pre>

<p>See how the string has been embedded into the function? This (might) make it easier to introduce a "display" interface later on, if the score_pen changes to something else, you can easily inject the message into a different function.<br>
Alright! Here is the if statement in its final form:</p>

<pre><code>if is_collision(pong, player):
    pong = change_pong_direction(pong)
    score = increment_score(score)
    write_score(score)
</code></pre>

<p>See how easy this code is to read? This is the sort of thing you can do with Python (or all code). Obviously this is only a small part of your code and you have a lot more to change, but I can already see some code duplication right below the if statement we just improved:</p>

<pre><code>    # collision pong and AIplayer
    if is_collision(pong, AIplayer):
        pong.dy *= -1
        pong.dx *= -1
</code></pre>

<p>What would you change the last 2 lines into? (only a single line now, yes?)</p>

<p>Hope this helps you to improve your code. </p>
    </div>