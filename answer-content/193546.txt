<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">


<p>You could speed up the first version by switching the loops, so that the loop over <code>J</code> becomes the inner loop, and short-circuiting the loop over <code>J</code>, because once you have found a character in <code>J</code> that matches the current character in <code>S</code>, you don't have to loop over the remaining characters of <code>J</code> (mtj's suggestion to use <code>String.indexOf(char)</code> would amount to this).</p>

<p>As for the second approach: Why do you first convert the strings to a <code>char[]</code> before iterating over their characters? You did not do this in the first version, so what do you gain from it by doing it in the second version?</p>

<p>About your question which approach is better: Depends on what you mean by better. I think both versions are quite straighforward and to the point. For large strings, the second version might be preferable because it has a lower time complexity. However, you write that the strings will contain at most 50 characters, so the benefit of constant-time lookup might not outweigh the cost of creating a <code>Set</code> and implicitly converting each primitive <code>char</code> to a <code>Character</code> object. But this is just a guess, I did not measure it.</p>
    </div>