<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As @Graipher says: Use <a href="https://docs.python.org/3/library/multiprocessing.html" rel="nofollow noreferrer">multiprocessing</a>.</p>

<p>You say </p>

<blockquote>
  <p>Each call of dofoo takes ~10 ms, which is pretty fast and cannot be further optimized</p>
</blockquote>

<p>which implies that your function is CPU bound, or at least that you're not spending the entire time waiting on disk or network I/O... if so, use asyncronous programming like <a href="http://www.gevent.org/" rel="nofollow noreferrer">gevent</a> or just regular old threads (the overhead would be small compared to your 10ms function). <a href="https://wiki.python.org/moin/GlobalInterpreterLock" rel="nofollow noreferrer">If you read up on the GIL</a>, you'll find that the Python interpreter is itself not thread-safe (and for good reasons, there are several great talks, articles, and projects that explore the costs of removing this global lock), hence why you need multiple processes to get proper parallelism.</p>

<p>That said, this is a really common problem and easily handled. The most obvious solution is <a href="https://docs.python.org/3.8/library/multiprocessing.html" rel="nofollow noreferrer"><code>multiprocessing.Pool.map</code></a>, which would make your code look like:</p>

<pre><code>import multiprocessing as mp

def run_strip(strip, *args):
    return strip.cool(args)

def all_the_strips(x, y):
    with mp.Pool() as pool:
        z = pool.starmap(run_strip, [(strip, x, y, a, b) for strip in strips])
    return [x for lst in z for x in lst]
</code></pre>

<p>There are more complicated ways of accomplishing the same task (e.g. setting up a <code>mp.Queue</code> and launching your own processes to consume it) if this solution doesn't fit your need.</p>
    </div>