<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Algorithm</h2>

<p>As the answer by eaeaoo implies, the runtime complexity can be reduced to <span class="math-container">\$O(N+M)\$</span> by keeping track of the minimum baseline (max counter to set all to). This aligns with other solutions (e.g. <a href="https://codereview.stackexchange.com/q/151574/120114">this python comparison</a>).</p>

<p>To minimize the space complexity even more, the data structure for the tallies can remain in an array instead of an object/map, and a second variable for the "last" max  -e.g. <code>lastMax</code> can be used to track the most recent maximum value to use in the second loop.</p>

<pre><code>let currentMax = 0;
let lastMax = 0;
const M = A.length;
const counters = Array(N).fill(0);
for (const currentValue of A) {
    if (currentValue &gt; N) {
        lastMax = currentMax             
    } 
    else {
         const position = currentValue - 1;
         if (counters[position] &lt; lastMax) {
             counters[position] = lastMax;
         }
         counters[position]++;
         if (counters[position] &gt; currentMax) {
             currentMax = counters[position];
        }
    }
}
for (let i = 0; i &lt; N; i++) {
    if (counters[i] &lt; lastMax) {
        counters[i] = lastMax;
    }
}
return counters;
</code></pre>

<h2>Review of current code</h2>

<p>One of the first blocks is this:</p>

<blockquote>
<pre><code>if (M &lt;= 0) {
    return -1;
}
</code></pre>
</blockquote>

<p>That is good to do, though the description reads: </p>

<blockquote>
  <p>A non-empty array A of M integers is given. </p>
</blockquote>

<p>It doesn't hurt to check for that condition but know that it shouldn't happen. If you are going to have it then have it return as early as possible so as to minimize memory allocation and processing - e.g. before declaring other variables like <code>max</code> and <code>counters</code>.</p>

<p>This block initializes values to <code>0</code>:</p>

<blockquote>
<pre><code>// set counters to 0
for (let i = 0; i &lt; N; i++) {
    counters[i] = 0;
}
</code></pre>
</blockquote>

<p>Instead consider using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill" rel="nofollow noreferrer"><code>Array.fill(0)</code></a> like the code in the sample code above uses. This allows <code>counters</code> to be declared with <code>const</code> since the array itself wouldn't need to be re-assigned. This helps avoid accidental re-assignment later when modifying your code.</p>

<pre><code>const counters = Array(N).fill(0);
</code></pre>

<p>And the <code>for</code> loop:</p>

<blockquote>
<pre><code>for (let K = 0; K &lt; M; K += 1) {
</code></pre>
</blockquote>

<p>Can be replaced with a <code>for...of</code> loop (as used in the sample code above) since <code>K</code> is only used to dereference indexes in <code>A</code>.</p>
    </div>