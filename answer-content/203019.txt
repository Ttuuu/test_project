<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Format string mismatch</h1>

<p>GCC warns me:</p>

<pre class="lang-none prettyprint-override"><code>104278.c:23:29: warning: format ‘%p’ expects argument of type ‘void *’, but argument 3 has type ‘node *’ {aka ‘struct Node *’} [-Wformat=]
         printf("Node: %d @ %p\n", cur-&gt;val, cur);
                            ~^               ~~~
</code></pre>

<p>You need to cast <code>cur</code> to the correct type when using it in <code>printf()</code>, because it's a varargs function.</p>

<h1>Memory leak</h1>

<p>Valgrind reports:</p>

<pre class="lang-none prettyprint-override"><code>==1612== 48 (16 direct, 32 indirect) bytes in 1 blocks are definitely lost in loss record 2 of 2
==1612==    at 0x48357BF: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==1612==    by 0x10919C: make_ll (104278.c:14)
==1612==    by 0x109227: main (104278.c:29)
</code></pre>

<p>That's because we only release the head node of the list; the other nodes are still allocated, but no longer reachable.  We need to go through the list and delete <em>all</em> the nodes:</p>

<pre><code>void free_ll(node *head)
{
    while (head) {
        node *n = head;
        head = head-&gt;next;
        free(n);
    }
}
</code></pre>

<p>Use that in place of <code>free(ll)</code>.</p>

<h1>Const-correctness</h1>

<p>The "print" function should be clear that it won't modify the list:</p>

<pre><code>void print_ll(const node *head)
{
    const node *cur = head;
    while (cur) {
        printf("Node: %d @ %p\n", cur-&gt;val, (const void*)cur);
        cur = cur-&gt;next;
    }
}
</code></pre>

<h1>Don't assume that allocation will succeed</h1>

<p><em>Always</em> test the pointer returned from <code>malloc()</code>/<code>calloc()</code>/<code>realloc()</code> before using it.</p>
    </div>