<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is some nice-looking Python code. Good work. Though, if you were to run <a href="https://www.pylint.org/" rel="nofollow noreferrer"><code>pylint</code></a> over this, you'd still find:</p>

<blockquote>
<pre><code>************* Module cr
cr.py:1:0: C0114: Missing module docstring (missing-module-docstring)
cr.py:44:12: W0612: Unused variable 'i' (unused-variable)

------------------------------------------------------------------
Your code has been rated at 9.20/10
</code></pre>
</blockquote>

<p>So, it's usually good practice to add a module docstring at the beginning of the module. I've seen many people adding the same docstring as the one for the class within that module (if it's just one).</p>

<p>From <a href="https://www.python.org/dev/peps/pep-0257/#id15" rel="nofollow noreferrer">PEP8</a>:</p>

<blockquote>
  <p>All modules should normally have docstrings, and all functions and
  classes exported by a module should also have docstrings. Public
  methods (including the <code>__init__</code> constructor) should also have
  docstrings. A package may be documented in the module docstring of the
  <code>__init__.py</code> file in the package directory.</p>
</blockquote>

<p>So, in the end, it is just a matter of preference.</p>

<p>You also have a magic number: <code>1000000</code>. I'd just take it out of your <code>__init__</code> and define it as a constant. Something like:</p>

<pre class="lang-py prettyprint-override"><code>MAX_RANGE = 1000000
</code></pre>

<p>Now, the second pylint warning tells you that here:</p>

<pre class="lang-py prettyprint-override"><code>for i in range(0, n_ids):  # you're not using i at all
    random_ids.append(self.random())
return random_id
</code></pre>

<p>So you could just replace it with <code>_</code>:</p>

<pre class="lang-py prettyprint-override"><code>for _ in range(0, n_ids):
    random_ids.append(self.random())
return random_id
</code></pre>

<p>Even better, you could entirely rewrite the above and use a list comprehension instead:</p>

<pre class="lang-py prettyprint-override"><code>def randoms(self, n_ids: int):
    """
    Generate list of random ids
    :param n_ids: number of id you need to generate
    :return: list of random ids it might contains duplications
    """

    return [self.random() for _ in range(0, n_ids)]
</code></pre>

<p>The same applies for <code>get_unique_ids()</code> method (although some might argue that there's a small benefit in favour of readability):</p>

<pre class="lang-py prettyprint-override"><code>def get_unique_ids(self):
    """
    :return: list of unique ids it randomize from
    """

    return [
        hashlib.md5(str(i).encode()).hexdigest()
        for i in range(self.__start_num, self.__end_num + 1)
    ]
</code></pre>

<p>From <a href="https://stackoverflow.com/a/30245465/8605514">this SO answer</a>:</p>

<blockquote>
  <p>List comprehension is basically just a "syntactic sugar" for the
  regular for loop. In this case the reason that it performs better is
  because it doesn't need to load the append attribute of the list and
  call it as a function at each iteration. In other words and in
  general, list comprehensions perform faster because suspending and
  resuming a function's frame, or multiple functions in other cases, is
  slower than creating a list on demand.</p>
</blockquote>

<p>This won't have such a big impact on the actual speed, but it's definitely giving you a nice start :)</p>

<p>Another advice would be to use Numpy if you want to generate <strong>large numbers</strong> of random ints; if you're just generating one-at-a-time, it may not be as useful (but then how much do you care about performance, really?). </p>

<p>Libraries like Numpy carefully move as much compute as possible to underlying C code.</p>
    </div>