<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First, it's really not too bad for a beginner, there are functions with local variables and the function names are descriptive. I'm impressed with the fact that all <code>if</code> statements and loops use the braces (<code>{</code> and <code>}</code>) to create compound statements even though it isn't strictly necessary, it does make maintenance much easier.</p>

<p><strong>Initialize Local Variables</strong><br>
In the function <code>collectnames()</code> the variable <code>continuenameloop</code> is uninitialized. In some program languages this isn't a problem local variables are initialized with a null value which might make <code>continuenameloop</code> false (not what is desired in this case). In C++ all local variable are unitialized which means they are in an unknown state. This may have been a typo since the other local variables are initialized.</p>

<p><strong>Prefer std::NAME over using namespace std;</strong><br>
If you are coding professionally you probably should get out of the habit of using the "using namespace std;" statement. The code will more clearly define where cout and other functions are coming from (std::cin, std::cout). As you start using namespaces in your code it is better to identify where each function comes from because there may be function name collisions from different namespaces. The function cout you may override within your own classes. This <a href="https://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice">stack overflow question</a> discusses this in more detail.</p>

<p><strong>Global Variables</strong><br>
Generally global variables are considered a bad practice (2 references from stackexchange sites, <a href="https://stackoverflow.com/questions/484635/are-global-variables-bad">stackoverflow</a> and <a href="https://softwareengineering.stackexchange.com/questions/148108/why-is-global-state-so%20evil">software engineering</a>). In larger programs with multiple source files it is very difficult to write correct code, debug and maintain code using global variables. Finding where a variable value is altered becomes a huge task. A second problem with global variables in a multi-file program is that global variables are global in scope and can lead to duplicate definitions at link time. In an object oriented program all of these variables could have been global within the object but the scope would still be limited to the object itself.</p>

<p>In non-object oriented programming it might be better to declare the variables in functions or procedures and pass the values into sub functions.</p>

<p><strong>Error Checking</strong><br>
There doesn't seem to be any error checking, users have been known to enter the wrong information. What happens if a negative value for <code>roundtime</code> is entered?</p>

<p><strong>Use Objects</strong><br>
As the game gets more complex it might be a good idea to create classes to implement it. Most of the this current program might fit into a class called game. It might be beneficial if users were a separate class with scores, and possibly  elapsed times. Using objects will allow the code to be independent from other portions of the code, and details of the implementation can be hidden.</p>
    </div>