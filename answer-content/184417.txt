<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li>If your actual program has the <code>products</code> list is a constant global variable, declare it as <code>PRODUCTS</code> (uppercase global constants)</li>
<li>Using <code>list(filter(lambda</code> can be removed by a simple comprehension. A list comprehension is the preferred method of iterating over lists <a href="https://www.python.org/dev/peps/pep-0202/#id5" rel="nofollow noreferrer">as per PEP-0202</a></li>
<li>Instead of returning <code>False</code> in <code>get_by_id</code>, return a <code>None</code>, as that is more user intuitive.</li>
</ol>

<p>Check the following:</p>

<pre><code>def get_by_id(product_id):
    """Return a product from the list with given id, or None if not found"""
    return next((p for p in PRODUCTS if p["id"] == product_id), None)
</code></pre>

<p>There is no extra list being created in-memory. The generator expression returns the first value (if any) or defaults to the <code>None</code>. Check docs for <a href="https://docs.python.org/3/library/functions.html#next" rel="nofollow noreferrer">the <code>next</code> function</a>.</p>

<p>For the <code>get_by_product</code>, you can have 2 snippets. One will remove the given product from list if <code>product.parent_id</code> exists, and another will search for child products.</p>

<pre><code>def get_by_product(product):
    if product["parent_id"] is not None:
        return [p for p in PRODUCTS if p != product]
    return [p for p in PRODUCTS if p['parent_id'] == product['id']]
</code></pre>
    </div>