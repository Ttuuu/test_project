<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You're doing a lot of indexing, which is efficient in an <code>Array</code>, but indicates that you're thinking in small steps. As you get to know the Scala Standard Library you start thinking in larger chunks because it offers many ways to process data collections all at once.</p>

<p>I'll start at the bottom and work my way up.</p>

<p><strong>*<code>prettyPrint()</code></strong> - Testing for value <code>0</code> means that the <code>prettyPrint()</code> method knows about the underlying representation. If you test for <code>CELL_DEAD</code> and/or <code>CELL_ALIVE</code> then <code>prettyPrint()</code> should still work even if the grid implementation changes.</p>

<p>Here I chose to turn each row into a <code>String</code> and then <code>println()</code> it.</p>

<pre><code>def prettyPrint(board: Board): Unit =
  board.grid
       .map(_.map(c =&gt; if (c == CELL_DEAD) " - " else " * ").mkString)
       .foreach(println)
</code></pre>

<p><strong>*<code>random()</code></strong> - Most Scala collections offer many different "builder" methods on the companion object. Here I use <code>fill()</code> to populate a 2-dimensional <code>Array</code>.</p>

<pre><code>def random(rows:Int = DEFAULT_ROWS, columns:Int = DEFAULT_COLUMNS): Board =
  Board(Array.fill(rows,columns)(Random.nextInt(2)))
</code></pre>

<p><strong>*<code>isValid()</code></strong> - The Standard Library doesn't offer many collection methods with early termination, but <code>forall()</code> is one of them. It stops after the first <code>false</code> encountered.</p>

<p>Here I use <code>-2</code> as a bit-mask to test the value of all bits except for the lowest.</p>

<pre><code>private def isValid(grid: Array[Array[Int]]): Boolean =
  grid.forall(_.forall(n =&gt; (n &amp; -2)==0))
</code></pre>

<p><strong>*<code>isJagged()</code></strong> - The <code>exists()</code> method is the compliment of <code>forall()</code>. It stops after the first <code>true</code> encountered.</p>

<pre><code>private def isJagged(grid: Array[Array[Int]]): Boolean =
  grid.exists(_.length != grid.head.length)
</code></pre>

<p><strong>*<code>liveCount</code></strong> - Idiomatic Scala avoids mutable variables. In order to calculate the value of <code>liveCount</code> once, without any post-evaluation adjustments, we'll want a way to get all valid neighbor-cell indexes, also without any post-evaluation adjustments.</p>

<pre><code>val liveCount = (for {
  x &lt;- (0 max i-1) to (i+1 min rows-1)
  y &lt;- (0 max j-1) to (j+1 min columns-1)
} yield grid(x)(y)).sum - cellValue
</code></pre>

<p><strong>*<code>evolve()</code></strong> - <code>tabulate()</code> is another one of those "builder" methods that appears to do everything you need, in this situation, all at once. In this case, because we're building a 2-D <code>Array</code>, <code>tabulate()</code> passes two arguments, the row index and the column index, to its lambda argument. And because the <code>getNextCellState()</code> method takes those same two arguments in the same order, they don't need to be explicitly specified.</p>

<pre><code>def evolve(): Board = Board(Array.tabulate(rows,columns)(getNextCellState))
</code></pre>

<p>It's worth noting that you test if <code>grid</code> is <code>null</code> but you don't test to see if it's empty. <code>Board.random(0,0)</code> will throw a run-time error.</p>
    </div>