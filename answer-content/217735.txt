<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>coding style</h1>

<p>Your code is almost pep-8 compliant. There are a few spaces missing after comma's, but all in all this is not too bad. I myself use <a href="https://github.com/ambv/black" rel="noreferrer">black</a> to take care of this formatting for me.</p>

<p>some of the variables names can be clearer. What does <code>nc1</code> mean for example</p>

<h1>magic numbers</h1>

<p>The number 3, 2 and 6 are the number of rows and columns on the grid. Better would be to make them real variables, and replace 6 with <code>rows * columns</code>. If you ever decide you want 4 columns, you don't have to chase down all those magic numbers</p>

<h1>looping</h1>

<p>You are looping over the indexes of <code>var</code> and <code>df</code>. Better here would be to use <code>zip</code> to iterate over both tables together. If you want to group them per 6, you can use the <code>grouper</code> <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="noreferrer">itertools recipe</a>. and <code>enumerate</code> to get the index of the different subplots.</p>

<pre><code>rows, columns = 3, 2

for group in grouper(zip(var1[1:], df1[1:]), rows * columns):
    fig = plt.figure(figsize=(11, 7))
    for i, (label, row) in enumerate(filter(None, group)):
        ax = fig.add_subplot(rows, columns, i + 1)
        ax.plot(df1[0], row, linestyle="-", color="black")
        ax.set(title=label, xlabel="seconds", ylabel="")
</code></pre>

<p>The <code>filter(None,...)</code> is to eliminate the items that get the <code>fillvalue</code> in the <code>grouper</code></p>

<p>Is a lot clearer than the juggling with <code>nc1</code> and <code>j</code></p>

<h1>functions</h1>

<p>This would be a lot easier to test an handle if you would separate the different parts of the script into functions</p>

<ul>
<li>reading the file</li>
<li>making 1 page plot</li>
<li>appending the different pages</li>
</ul>

<p>This will also allow each of those parts to be tested separately</p>

<h1>reading the file</h1>

<p>Instead of loading the file twice  and using <code>numpy</code>, using <code>pandas</code>, which supports data with names and indices will simplify this part a lot</p>

<pre><code>df = pd.read_csv(&lt;filename&gt;, sep="\s+", index_col=0)
</code></pre>

<p>this is a labelled DataFrame, so no more need to use <code>var1</code>  for the column names</p>

<h1>making the individual plot:</h1>

<h2>group the columns per 6</h2>

<pre><code>def column_grouper(df, n):
    for i in range(0, df.shape[1], n):
        yield df.iloc[:, i:i+n]
</code></pre>

<p>this simple helper generator can group the data per 6 columns</p>

<h2>make the plot</h2>

<pre><code>def generate_plots(df, rows=3, columns=2):
    for group in column_grouper(df, rows * columns):
        fig = plt.figure(figsize=(11, 7))
        for i, (label, column) in enumerate(group.items()):
            ax = fig.add_subplot(rows, columns,i + 1)
            ax.plot(column, linestyle='-', color='black')
            ax.set(title=label, xlabel='seconds', ylabel='')
        yield fig
</code></pre>

<h1>saving the pdf</h1>

<p>Here a simple method that accepts an iterable of figures and a filename will do the trick</p>

<pre><code>def save_plots(figures, output_file):
    with PdfPages(output_file) as pdf:
        for fig in figures:
            pdf.savefig(fig)
</code></pre>

<h1>pulling it together</h1>

<pre><code>def parse_file(input_file, output_file, rows=3, columns=2):
    df = pd.read_csv(input_file, sep="\s+", index_col=0)
    figures = generate_plots(df, rows, columns)
    save_plots(figures, output_file)
</code></pre>

<p>and then calling this behind a <a href="https://stackoverflow.com/a/419185/1562285"><code>main</code> guard</a></p>

<pre><code>if __name__ == "__main__":
    input_files = ['file1.out', 'file2.out']
    output_file = 'file_output.pdf'

    for input_file in input_files:
        parse_file(input_file, output_file)
</code></pre>

<p>If this still is too slow, at least now the different parts of the program are split, and you can start looking what part of the program is slowing everything down</p>
    </div>