<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><a href="https://codereview.stackexchange.com/a/237527/192133">Doi9t's answer</a> is very good, but even with their improvements, there is still a problem: your code does not produce the correct answer in all cases.</p>

<p>Java strings use <a href="https://en.wikipedia.org/wiki/UTF-16" rel="nofollow noreferrer">UTF-16</a> encoding. This means that a Java <code>char</code> is not large enough to store all Unicode characters. Instead some characters (for example, ðŸ˜‚) are stored as a <em>pair</em> of <code>char</code>s, and reversing the pair (as your code does) will result in nonsense data. See <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#unicode" rel="nofollow noreferrer">this documentation</a> for more details.</p>

<p>Fortunately, the way UTF-16 is defined, <code>char</code>s that are <em>surrogates</em> (half-characters) have a completely separate range of values from <code>char</code>s that are Unicode characters by themselves. This means it is possible to test each <code>char</code> individually to see if it is a surrogate, and then have special handling to preserve the pairs.</p>

<pre><code>import java.lang.Character;
import java.lang.StringBuilder;
import java.util.Scanner;

&lt;...&gt;

    private static String reverseString(String myString) {
       StringBuilder reversedString = new StringBuilder();

       for (int j = myString.length() - 1; j &gt;= 0; j--) {
          char c = myString.charAt(j);
          if (Character.isLowSurrogate(c)) {
              j--;
              reversedString.append(myString.charAt(j));
          }
          reversedString.append(c);
       }

       return reversedString.toString();
    }
</code></pre>

<p>If you <em>really</em> wanted to re-invent the wheel, I think <code>Character.isLowSurrogate(c)</code> could be replaced with <code>c &gt;= '\uDC00' &amp;&amp; c &lt;= '\uDFFF'</code>, though I have not personally tested this.</p>

<hr>

<p>As <a href="https://codereview.stackexchange.com/users/50567/peter-cordes">Peter Cordes</a> pointed out in a comment, we do not even <em>need</em> to reverse the string in order to detect a palindrome. Instead we can examine the input string in place, comparing the first character to the last, the second to the next-to-last, etc., until we reach the middle. This may be more performant.</p>

<p>We need special handling for 2-<code>char</code> characters in this case as well; fortunately, the String class has methods for pulling <em>code point</em> values instead of pulling <code>char</code> values directly.</p>

<ul>
<li><code>codePointAt(int index)</code> behaves similarly to <code>charAt(int index)</code> in most cases, but if the <code>char</code> at the given index is the first half of a surrogate pair, it will return the full value of the pair.</li>
<li><code>codePointBefore(int index)</code> approaches the problem from the other end; if the <code>char</code> <em>before</em> the given index is the <em>last</em> half of a surrogate pair, it will return the full value of the pair.</li>
</ul>

<pre><code>    private static boolean isPalindrome(String myString) {
        int len = myString.length();
        for (int i = 0; i &lt; len / 2; ++i) {
            int frontHalfCharacter = myString.codePointAt(i);
            int backHalfCharacter = myString.codePointBefore(len - i)
            if (frontHalfCharacter != backHalfCharacter) {
                return false;
            }
            if (Character.isSupplementaryCodePointâ€‹(frontHalfCharacter)) {  // i.e. if this is a 2-char character
                i++;
            }
        }
        return true;    
    }
</code></pre>

<hr>

<p>And while we're on the topic of Unicode, you should of course read <a href="https://www.joelonsoftware.com/2003/10/08/the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses/" rel="nofollow noreferrer">The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets (No Excuses!)</a>, if you haven't already.</p>
    </div>