<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I see you've removed the bugs.  Good job.  Let's clean it up some more.</p>

<h2>Zero -vs- Naught</h2>

<p>It is a little disconcerting to read the code and see <code>'0' not in board</code> or <code>if board[idx] == '0'</code>.  It looks like it is hard-coded checks for the "Naughts" player, when it is in fact, a check for an empty square.  <code>'0'</code> and <code>'O'</code> are not all that different in certain fonts.</p>

<p>It could be an improvement to change identifier of the empty squares.  But what to change it to?</p>

<p>A space comes to mind.  It looks empty, just like the square.  More over,</p>

<pre><code>print("""
    ... omitted ...
""".format(*list(x if x != '0' else ' ' for x in board)))
</code></pre>

<p>could be reduced to:</p>

<pre><code>print("""
    ... omitted ...
""".format(*list(x for x in board)))
</code></pre>

<p>since the empty indicator would already be a space.  And since <code>board</code> is already a <code>list</code>, this could further reduce to:</p>

<pre><code>print("""
    ... omitted ...
""".format(*board))
</code></pre>

<p>which is a definite win.</p>

<h2>Deconstructing Assignment</h2>

<p>What does this statement do, in 7 words or less?</p>

<pre><code>turn, user = 1, 'X' if bool(randint(0, 1)) else 'O'
</code></pre>

<p>I can't come up with one 7 word sentence, but perhaps you can.  If so, same question for this statement:</p>

<pre><code>board, codes, turn, user = ['0'] * 9, ('c1', 'c2', 'c3', 'b1', 'b2', 'b3',
    'a1', 'a2', 'a3'), turn, user = 1, 'X' if bool(randint(0, 1)) else 'O'
</code></pre>

<p>It is similar to the previous statement, in that a couple of variables on the left are being assigned values from the right.  The problem is none of these variables are related to each other.  If you have an XYZ coordinate, using <code>x, y, z = 0, 1, 2</code> can be reasonable, but for unrelated concepts, use separate statements:</p>

<pre><code>turn = 1
user = 'X' if bool(randint(0, 1)) else 'O'
</code></pre>

<h2>Cohesive Code</h2>

<p>There are 21 lines between <code>code = input().strip().lower()</code> and <code>print("Hmm, that's not a valid input.")</code>.  Between those lines, we have a check for a win by either player, a check for a draw game, code to switch players, and code to increment the turn number.  Because the code for these things is only valid when the move is valid, 4 levels of indenting are needed.</p>

<p>The <code>while True</code> loop is doing double duty.  It is looping once for each turn of the game, where the state of the game changes, and once for each invalid input, where the state of the game doesn't change.</p>

<p>Code is more cohesive when related lines of code near one another.  So the code should be organized more like:</p>

<pre><code>while True:
    # get and validate move
    # update board
    # display new board
    # check for win or draw game
    # switch players
    # increment turn number
</code></pre>

<p>This also reduces the amount of indentation you need in the code, which is sometimes called "left-leaning" code.</p>

<p>The "get and validate move" will have its own loop.  It could be written in place, but it might be better moved to its own function:</p>

<pre><code>def get_player_move(board, user):

    print(f'Player {user}: ')

    while True:
        code = input().strip().lower()

        if code in CODES:
            idx = CODES.index(code)

            if board[idx] == ' ':
                return idx

            print('Whoops! You need to pick an empty space.')

        else:
            print("Hmm, that's not a valid input.")  
</code></pre>

<h2><code>if turn &gt;= 5:</code></h2>

<p>What is this <code>5</code>, and where did it come from?</p>

<p>Ok, in playing Naughts and Crosses, you win by getting 3 of your symbol in a row.  Since you can only place one symbol per turn, and you take turns with another player, you can't possibly win before turn 5.</p>

<p>But do you really need to check that?  The code would work perfectly without that check.  The amount of work the check saves is minimal.  More over, if you wanted to change this to a 3 player game, or play on a larger grid and get more than 3 in row, etc., the check would need to be changed.</p>

<p>Perhaps better is to remove the check altogether.  It doesn't save enough work to call out as a special case.</p>

<h2>Draw Game</h2>

<p>Again, Naughts and Crosses is a game is played until someone wins, or until no moves are left.  With 9 spaces to play in, there can be at most 9 turns.  This leads to a different formulation of the "draw game" detection.</p>

<p>Instead of:</p>

<pre><code>while True:
    ... omitted ...
    if check_for_win(board):
        print(f'{user} won in {turn} turns! Congratulations!')
        break
    elif '0' not in board:
        print("Aw, it's a draw!")
        break
</code></pre>

<p>you could use a <code>for ... else</code> loop:</p>

<pre><code>for _ in range(9):
    ... omitted ...
    if check_for_win(board):
        print(f'{user} won in {turn} turns! Congratulations!')
        break
else:
    print("Aw, it's a draw!")
</code></pre>

<p>What is happening here?</p>

<p>If the <code>for</code> loop execution runs to completion, the <code>else:</code> clause at the end of the loop is executed.  If the <code>for</code> loop execution is interrupt by a <code>break</code>, the loop terminates and the <code>else:</code> clause is not executed.  This is pattern is usually used in a search, where you loop over something until you find the desired item, and if you don't find it you do something "else", but it works just as well here, where you play until a win, or there are no more moves.</p>

<p>The <code>9</code> isn't quite as magic as the <code>5</code> was, but we can still get rid of it.  It is the number of moves which can be made, which is the size of the board.  At the same time, we can absorb the <code>turn</code> variable into the for-loop.</p>

<pre><code>for turn in range(1, len(board) + 1):
    ... omitted ...
    if check_for_win(board):
        print(f'{user} won in {turn} turns! Congratulations!')
        break
else:
    print("Aw, it's a draw!")
</code></pre>

<h2><code>numpy</code>, <code>scipy</code>, and bitwise operators</h2>

<p>While you are hoping for optimizations utilizing <code>numpy</code>, <code>scipy</code> or bitwise operators, these are the wrong tools for the job.</p>

<p>I held my tongue in my previous review, but your code could be made much simpler without <code>numpy</code>.</p>

<p>First, consider what does the following condition do?</p>

<pre><code>' ' not in row and len(set(row)) == 1
</code></pre>

<blockquote>
  <p>First, it ensures that the row doesn't contain any empty cells, and then it forms a <code>set</code> of the contents of the cells, removing duplicates, and if the <code>row</code> contained only 1 symbol (which is not the empty symbol), we have found a winning row.</p>
</blockquote>

<p>That is a mouthful to describe.  What is the winning condition for the game?</p>

<blockquote>
  <p>A row (or column or diagonal) with 3 of the same symbols.</p>
</blockquote>

<p>That sounds way simpler.  If you pass <code>user</code> to the <code>check_for_win</code> function, then the winning condition would be <code>[user, user, user]</code> found in a row (or column, or diagonal).</p>

<pre><code>winning_pattern = [user] * 3
...
   if row == winning_pattern:
       return True
...
</code></pre>

<p>No expensive <code>set()</code> construction.  No weird testing the length of the set.</p>

<p>And now to get rid of <code>numpy</code>.  With 3 rows, 3 columns, and 2 diagonals, all we need are 8 slices of the board.  And a <code>slice</code> is a first class object in Python:</p>

<pre><code>ROWS = (slice(0, 3, 1), slice(3, 6, 1), slice(6, 9, 1),
        slice(0, 9, 3), slice(1, 10, 3), slice(2, 11, 3),
        slice(0, 12, 4), slice(3, 9, 2))

def check_for_win(board, user):

    winning_pattern = [user] * 3

    return any(board[row] == winning_pattern for row in ROWS)
</code></pre>

<h2>Refactored Code</h2>

<pre><code>from random import randint


CODES = ('c1', 'c2', 'c3', 'b1', 'b2', 'b3', 'a1', 'a2', 'a3')

ROWS = (slice(0, 3, 1), slice(3, 6, 1), slice(6, 9, 1),
        slice(0, 9, 3), slice(1, 10, 3), slice(2, 11, 3),
        slice(0, 12, 4), slice(3, 9, 2))


def print_board(board):
    print("""
  +---+---+---+
c | {}   {}   {} |
  +   +   +   +
b | {}   {}   {} |
  +   +   +   +
a | {}   {}   {} |
  +---+---+---+
    1   2   3
""".format(*board))


def check_for_win(board, user):

    winning_pattern = [user] * 3

    return any(board[row] == winning_pattern for row in ROWS)


def get_player_move(board, user):

    print(f'Player {user}: ')

    while True:
        code = input().strip().lower()

        if code in CODES:
            idx = CODES.index(code)

            if board[idx] == ' ':
                return idx

            print('Whoops! You need to pick an empty space.')

        else:
            print("Hmm, that's not a valid input.")  


def tic_tac_toe():

    board = [' '] * 9
    user = 'X' if bool(randint(0, 1)) else 'O'

    print(f'Welcome! First to play is {user}!')
    print_board(board)

    for turn in range(1, len(board) + 1):
        idx = get_player_move(board, user)

        board[idx] = user
        print_board(board)

        if check_for_win(board, user):
            print(f'{user} won in {turn} turns! Congratulations!')
            break

        user = 'X' if user == 'O' else 'O'

    else:
        print("Aw, it's a draw!")


if __name__ == '__main__':
    tic_tac_toe()
</code></pre>

<p>Despite adding 2 more functions, the code is 9 lines shorter (ignoring blank lines).</p>
    </div>