<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><a href="https://codereview.stackexchange.com/users/153917">@Linny</a> already told you about list comprehensions. His suggestion would currently lead to the following code:</p>

<pre><code>roll = [roll_die() for _ in range(0, dice)]

result = sorted(roll)
if keep == 'highest':
    result.reverse()
</code></pre>

<p>Looking at the <a href="https://docs.python.org/3/library/functions.html#sorted" rel="nofollow noreferrer">documentation of <code>sorted(...)</code></a>, reveals that is also accepts an argument called <code>reversed</code>. Using that extra parameter allows the code piece above to be rewritten as</p>

<pre><code>result = sorted(roll, reverse=(keep == 'highest'))
</code></pre>

<hr>

<p>Another neat list-trick is that you can use <code>outcome = [0, ] * keep_dice</code> to generate a list of a given size with the same elements at all spots. However, <a href="https://stackoverflow.com/a/33513257">be warned of the caveats</a>.</p>

<hr>

<p>Depending on which Python versions the code should run on, maybe also have a look at the new <a href="https://docs.python.org/3/whatsnew/3.6.html#whatsnew36-pep498" rel="nofollow noreferrer">f-string formatting</a>. Using them allows code like</p>

<blockquote>
<pre><code>embed = discord.Embed(title='**Dragon Eye** Ability Test for {}'.format(ctx.author.name),
                      description='Rolling {}d10, keep {} {}'.format(dice, keep, keep_dice),
                      color=0x22a7f0)
</code></pre>
</blockquote>

<p>to be rewritten as</p>

<pre><code>embed = discord.Embed(title=f'**Dragon Eye** Ability Test for {ctx.author.name}',
                      description=f'Rolling {dice}d10, keep {keep} {keep_dice}',
                      color=0x22a7f0)
</code></pre>

<p>f-strings are very powerful and also allow more complex expressions to be used:</p>

<pre><code>embed.add_field(
    name='Additional Info',
    value=f'**Critical {"Success" if critical else "Fail"}**',
    inline=True
)
</code></pre>

<hr>

<p>The string flags <code>'highest'/'lowest'</code> could be replaced with an <a href="https://docs.python.org/3/library/enum.html" rel="nofollow noreferrer">Enum</a>. IDEs with autocompletion can help with them and therefore it's easier to avoid typos. However, this will slightly increase the effort needed to print them nicely for the user. In this special case a simple bool variable would also work, since you only have two possible values. The enum as well as the bool version could then use a ternary expression for printing if you want to follow this route.</p>
    </div>