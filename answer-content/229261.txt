<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You are inconsistent with your use of the <code>this.</code> 'suffix'. Nobody can agree on this, but you should try to be consistent without projects.</p>

<hr>

<p>I would remove the return values from every method which modifies <code>Vector3</code>: you have 2 copies of <code>Min</code>, and one is very confusing. All of the methods which happen to produce a vector (e.g. <code>Abs</code>, <code>Min</code>, Max<code>) happen to modify</code>this<code>and then return</code>this<code>. This is, in my opinion, a terrible API, and inconsistent with operations (like</code>Length<code>) which just happen to _not_ produce a vector. Anyone looking at the signature will assume it does not modify the vector, and you just open yourself to all the nightmares associated with mutable</code>struct`s. Do not mix an immutable/mutable API like you are now, because it will only infuriate your consumers.</p>

<p>Methods like <code>UpdateFromArray</code> are for some reason returning <code>this</code> as well.</p>

<hr>

<p>You seem to be trying to provide a consistent API between <code>VectorX</code> (which I would just call <code>Vector</code>) and <code>Vector3</code>, so you might consider an <code>IVector</code> interface.</p>

<p><code>VectorCount</code> is a mildly confusing name. It's the element count, or the length of the vector.</p>

<hr>

<p>I would suggest not using <code>Math.Pow(, 2)</code> just to square something: even if it is optimised to detect this exact case (I don't know), it is just harder to read than <code>X * X</code>. I would rewrite <code>Dist</code> as <code>(this - other).length</code> for the sake of simplicity.</p>

<p>It's also common to provide a <code>LengthSquared</code> member which returns the sum before the squareroot, since often this is all that is needed and saves an expensive operation.</p>

<hr>

<p>The parameter names for <code>Min</code> and <code>Max</code> are odd: <code>other</code> would be fine, but again I don't like the API.</p>

<hr>

<p>I would expect <code>public Vector3(float[] arr)</code> to throw a nice exception if <code>arr</code> is null, or had a length other than 3.</p>

<p>It's good that most of your methods in <code>VectorX</code> are performing range checks (I didn't notice any that didn't). You don't need to put the 'non-exceptional' code in an else for these.</p>

<hr>

<p><code>VectorX</code> has many constructors which just provide 'defaults' for others. I would make these call directly the more general versions. E.g.</p>

<pre><code>public VectorX(int vectorCount) : this(vectorCount, default(float))
{ }

public VectorX(params float[] values) : this(values, 0, values.Length)
{ }
</code></pre>

<p>This will significantly reduce redundancy and so improve maintainability.</p>

<hr>

<p>Your <code>ToString</code> methods could be nicer: I would use string interpolation for <code>Vector3</code> (i.e. <code>$"&lt;{X}, {Y}, {Z}&gt;"</code>) and you should use a <code>StringBuilder</code> for <code>VectorX</code> (currently <code>VectorX.ToString()</code> is a quadratic memory operation when it should be linear).</p>

<hr>

<blockquote>
  <p>// do these size comparisions make sense?</p>
</blockquote>

<p>No, I would say no; though, it does atleast provide an ordering, so it could be much worse.</p>

<p>The comparisons are also performing 2 unnecessary square-roots (you could compare the <code>LengthSquared</code>).</p>

<p>All your <code>Vector3</code> comparisions also include a completely redundant ternay clause, which will just get in the way of maintaince efforts and provide a greater surface overwhich bugs can will appear.</p>

<p>I would consider describing negatives in terms of the positives, e.g.</p>

<pre><code>public static bool operator !=(Vector3 left, Vector3 right)
{
    return !(left == right);
}
</code></pre>

<hr>

<p>Why isn't <code>VectorX.Equals(VectorX other)</code> implemented? What is the point of declaring you implement <code>IEquatable&lt;VectorX&gt;</code> if you do not?</p>

<hr>

<p>I don't like all your single-line <code>if</code>s and <code>else</code>s. Even if you don't want to add braces, a line at the end of the condition or <code>else</code> helps significantly with readbility, and reduces the amount of code which is 'off side'.</p>

<hr>

<p>All of your types and methods would benefit from inline documention (<code>///</code>). This would help to explain the confusing bits of the API, and clarify what methods like <code>Length</code> and <code>Normalise</code> mean.</p>

<hr>

<blockquote>
<pre><code>VectorValues[i] = (VectorValues[i] &lt; 0) ? VectorValues[i] *= -1 :
VectorValues[i];
</code></pre>
</blockquote>

<p>What is wrong with <code>Math.Abs(VectorValues[i])</code>.</p>

<hr>

<blockquote>
  <p><code>public int VectorCount { get { return 3; } }</code></p>
</blockquote>

<p>This can be made a little more concise:</p>

<pre><code>public int VectorCount =&gt; 3;
</code></pre>

<p>You could do the same with the <code>static</code> <code>Unit</code> and <code>Zero</code> members.</p>

<hr>

<p>You have some odd line-spacing in places (e.g. around <code>VectorX.NewUnit</code>). I can see no reason for this, so it just looks untidy and makes the code harder to scan.</p>

<hr>

<p>Consider using an indexer instead of the <code>SetAt</code> and <code>GetAt</code> methods. These could be part of the <code>IVector</code> interface also.</p>

<hr>

<p><code>VectorX.VectorValues</code> should not be mutable, and probably shouldn't  be public. At the moment it is possible for someone to change <code>VectorValues</code> such that <code>VectorCount</code> will be wrong, or even to change it <code>null</code> and wreck everything. Hide it away so that people can't shoot themselves in the foot with your API.</p>

<p>You could re-write <code>VectorX.VectorCount</code> in terms of <code>VectorValues</code> to reduce redunancy and simplify the constructors.</p>

<pre><code>public int VectorCount =&gt; VectorValues.Length;
</code></pre>

<p>Less redundancy again means there is less to go wrong, which makes the code easier to maintain.</p>

<hr>

<p>The <code>VectorX(VectorX)</code> constructor is not good: all the other constructors duplicate the array they are given, but this just copies the reference. There is no point in this constructor (it's the same as a value-copy) and it will only create confusion. If instead it copied the array, then it would be fine.</p>

<pre><code>public VectorX(VectorX vector) : this(vector.VectorValues)
{ }
</code></pre>

<p><code>ToArray</code> would also imply a copy, and with <code>VectorValues</code> public does nothing useful. It should take a copy. This is as easy as <code>VectorValues.ToArray()</code> if you have <code>using System.Linq</code> at the top of your file. The fact that it does/doesn't copy should be in the documention.</p>

<hr>

<p>I'm going to stop for now, but I may add to this answer when I have time, though I'm sure someone else will take up the slack long before then if there is more to be said.</p>
    </div>