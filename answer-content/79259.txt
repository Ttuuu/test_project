<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Code Review</h3>

<p>I see little point in using getters/setters.<br>
The interface for complex numbers is pretty well defined and is not likely to change (as it is already a couple of hundred years old).</p>

<p>I would make all the external functions here friends of the complex class. Even if you get rid of the getters/setters. This documents the fact that these functions are tightly coupled to the implementation of the class.</p>

<p>You are passing all you parameters by value. Personally I would pass them be reference (with the exception of the times when you want to make a copy). It will probably save you a register.</p>

<p>I hate the look of your identifiers with the trailing underscore.</p>

<h3>operator&lt;&lt;</h3>

<p>I probably would not have put braces around the expression. If I remember my maths books complex numbers looked like this:</p>

<pre><code>5+6i
</code></pre>

<p>Personally That's the format I would have used. Also if there is no real part  I would not have expect the initial 5 I would also expect it to read normal number (without the imaginary part).</p>

<p>I would expect all the following to work:</p>

<pre><code>5
6i
5+6i
</code></pre>

<h3>operator&gt;&gt;</h3>

<p>There is no validation on the input operator. That's a bit clumsy. I would make sure that the stream is in a good state andd that each of the characters is what is expected and set the error bit if there was a mistake.</p>

<pre><code>std::istream&amp; operator&gt;&gt;(std::istream&amp; is_, Complex&amp; comp_) // assumes (a,bi) format
{
    char   open = 0;
    double r    = 0;
    char   coma = 0;
    double i    = 0;
    char   theI = 0;
    char   close= 0;

    is_ &gt;&gt; open &gt;&gt; r &gt;&gt; comma &gt;&gt; i &gt;&gt; theI &gt;&gt; close;

    if (is &amp;&amp; open == '(' &amp;&amp; comma == ',' &amp;&amp; theI == 'i' &amp;&amp; close == ')')
    {
        comp_.SetR(r);
        comp_.SetI(i);
    }
    else
    {
        is_.setstate(std::ios::failbit);
    }

    return is_;
}
</code></pre>
    </div>