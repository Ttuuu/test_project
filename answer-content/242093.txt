<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Ok, let's start with basics.</p>

<p><code>class HighCard</code> doesn't make much sense. Make it a namespace.</p>

<p>The method 
 <code>bool HighCard::Play( int (*f) (void) = rand, std::ostream&amp; os = std::cout );</code> isn't convenient by any means. Supplementing a function pointer is very old fashioned (C style not a C++ way) and a poor practice in general.</p>

<p>You'd better use <code>std::function&lt;int(void)&gt;</code> make <code>HighCard::Play</code> into a template that accepts a callable as the first parameter.</p>

<p>The reason why function pointer is not good is because it isn't general enough - <code>rand</code> is a very poor random function and it is preferable to use <code>std::default_random_device</code> which is a class with data and one cannot use it via function pointers. <code>std::function&lt;int(void)&gt;</code> can wrap it but calling it is generally slow, so for the code to be efficient it is best to use template callable and wrap whatever needed into a lambda/closure.</p>

<p>This would also solve the problem with the ridiculous template <code>template&lt;...&gt; int drawNums()</code>. Once your method accepts a callable just make a simple structure that holds a vector of prefixed results and passes them.</p>

<pre><code>rank1 = f() % NUM_OF_CARDS + 1;
rank2 = f() % NUM_OF_CARDS + 1;
suit1 = f() % 4 + 1;
suit2 = f() % 4 + 1;
</code></pre>

<p>This is not a good way to generate random numbers. Use <code>std::uniform_int_distribution</code> to properly randomize values instead of <code>%</code> operation. It requires a random engine to work, so it best be used inside the function. So make the function/callable in format <code>std::function&lt;int(int)&gt;</code> and use it as</p>

<pre><code>rank1 = f(NUM_OF_CARDS);
rank2 = f(NUM_OF_CARDS);
suit1 = f(4);
suit2 = f(4);
</code></pre>

<p>so <code>f(val)</code> generates number between 1 and <code>val</code> including.</p>

<p>Do not use MACROS. Use <code>constexpr</code> or <code>enum</code> instead for <code>NUM_OF_CARDS</code> and <code>NUM_OF_RETRIES</code>.</p>

<p>I think you can potentially make <code>HighCard::Play</code> into a constexpr conditionally on the input (by also removing the logs...). In which case you can perform <code>static_assert</code> for the tests instead of <code>assert</code>. This means that you can compile-time run the test instead of relying on run-time verification.</p>

<p>Also, about logs, <code>HighCard::Play</code> shouldn't quite print anything. Instead it should send results (an enum of current state) to some other class which should perform printing or whatever. This way <code>HighCard::Play</code> will be cleaner and printing is delegated to some other code.</p>
    </div>