<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>To continue on from <a href="https://codereview.stackexchange.com/users/131732/oh-my-goodness">@OhMyGoodness</a>'s <a href="https://codereview.stackexchange.com/a/214643/98493">excellent answer</a>, one way you can take this is in the direction of Object Oriented Programming. You have objects, shapes, which have properties like an area and a circumference or volume. So make them into classes:</p>

<pre><code>PI = 3.1415926

class Shape:
    def __init__(self, name):
        self.name = name

    def __repr__(self):
        return self.name
</code></pre>

<p>All other shapes can inherit from this:</p>

<pre><code>class Circle(Shape):
    def __init__(self, radius):
        super().__init__("Circle")
        self.radius = radius

    @property
    def area(self):
        return PI * self.radius **2

    @property
    def circumference(self):
        return 2* PI * self.radius
</code></pre>

<p>This has the advantage that for shapes that are special shapes of some other shape you can save a lot of repetition:</p>

<pre><code>class Rectangle(Shape):
    def __init__(self, height, width):
        super().__init__("Rectangle")
        self.height, self.width = height, width

    @property
    def area(self):
        return self.height * self.width

    @property
    def circumference(self):
        return 2*self.height + 2*self.width

class Square(Rectangle):
    def __init__(self, width):
        super().__init__(width, width)
        self.name = "Square"
</code></pre>

<p>You can even use elements of a lower dimension for shapes in a higher dimension, where applicable:</p>

<pre><code>class Cone(Shape):
    def __init__(self, radius, height):
        super().__init__("Cone")
        self.radius, self.height = radius, height
        self.base = Circle(radius)

    @property
    def area(self):
        return self.base.area + PI * self.radius * sqrt(self.radius**2 + self.height**2)

    @property
    def volume(self):
        return self.base.area * self.height / 3
</code></pre>

<p>And for the menu you can use introspection:</p>

<pre><code># initialize some shape:
shape = Square(2)

# You could setup buttons with this information instead of printing it:
print("Available methods:")
available = set(filter(lambda m: not m.startswith("__"), dir(shape)))
for x in available:
    print(x)

# Let the user choose (or for you click on the button):
choice = None
while choice not in available:
    choice = input()

# print result:
print(choice, "=", getattr(shape, choice))
</code></pre>
    </div>