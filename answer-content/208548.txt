<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In addition to Henrik Hansen's excellent answer, I'll add a note about encapsulation.</p>

<p>Your class is currently acting as a wrapper around a List, hiding that list from public view. The only way for other actors to access that list is through your <code>Add</code>, <code>Count</code>, and indexer methods. This is a good thing, because it allows you to enforce the guarantee that the order of the elements in the list will be meaningful.</p>

<p>The danger that I see is this: Perhaps in the future someone will want to iterate through this List and, having no way to do that, will simply pop in and make your private List into a protected, internal, or even public List. This will break the encapsulation, and you will no longer be able to guarantee that the order of elements is meaningful: an external class with a reference to the list itself will be able to add and remove elements at will.</p>

<p>For that reason, I would <em>consider</em> implementing <code>IEnumerable&lt;string&gt;</code> on your class. It can be as simple as adding these two lines:</p>



<pre class="lang-csharp prettyprint-override"><code>public IEnumerator&lt;string&gt; GetEnumerator() =&gt; items.GetEnumerator();
public IEnumerator GetEnumerator() =&gt; this.GetEnumerator();
</code></pre>

<p>Now, adding this behavior before it's actually required is toying with <a href="https://martinfowler.com/bliki/Yagni.html" rel="noreferrer">YAGNI</a>, so you should consider carefully before you do so. But, you may find that it's a good idea and a good fit for your class.</p>
    </div>