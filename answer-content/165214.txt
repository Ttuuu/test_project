<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>My code works, but the if/else if statements I used feel clunky. This
  is a common feeling I have when I'm writing code.</p>
</blockquote>

<p>To improve code readability and reduce the perceived complexity, you need to reduce nesting, remove conditional branches, simplify if-conditions and switch to a more descriptive style. The following 'techniques' help to simplify your code sample:</p>

<ol>
<li><p><strong>Exploit the nested loop structure:</strong> The first <code>if</code> condition checking for line-breaks becomes <code>true</code> whenever the inner loop terminates. Get rid of the condition and move the statement below the inner loop body:</p>

<pre><code>var size = 8;
var result = '';
for (var i = 0; i &lt; size; i++) {
  for (var j = 0; j &lt; size; j++) {
    if ((j % 2 === 0 &amp;&amp; i % 2 === 0) || (j % 2 === 1 &amp;&amp; i % 2 === 1)) {
      result += ' ';
    } else if ((j % 2 === 0 &amp;&amp; i % 2 === 1) || (j % 2 === 1 &amp;&amp; i % 2 === 0)) {
      result += '#'; 
    }
  }
  result += '\n';
}
</code></pre></li>
<li><p><strong>Remove the redundant <code>else if</code> condition:</strong> The final <code>else if</code> condition is redundant as it is always <code>true</code> when the first if-condition is <code>false</code>. Remove it:</p>

<pre><code>var size = 8;
var result = '';
for (var i = 0; i &lt; size; i++) {
  for (var j = 0; j &lt; size; j++) {
    if ((j % 2 === 0 &amp;&amp; i % 2 === 0) || (j % 2 === 1 &amp;&amp; i % 2 === 1)) {
      result += ' ';
    } else {
      result += '#'; 
    }
  }
  result += '\n';
}
</code></pre></li>
<li><p><strong>Simplify the <code>if</code> condition:</strong> Your <code>if</code> condition can be expressed in terms of both loop iterators and thereby simplified to <code>(j + i) % 2 === 0</code>:</p>

<pre><code>var size = 8;
var result = '';
for (var i = 0; i &lt; size; i++) {
  for (var j = 0; j &lt; size; j++) {
    if ((j + i) % 2 === 0) {
      result += ' ';
    } else {
      result += '#'; 
    }
  }
  result += '\n';
}
</code></pre></li>
<li><p><strong>Invert the negative <code>if</code> condition:</strong> You can get rid of the explicit comparison to zero by switching your <code>if</code> and <code>else</code> statements:</p>

<pre><code>var size = 8;
var result = '';
for (var i = 0; i &lt; size; i++) {
  for (var j = 0; j &lt; size; j++) {
    if ((j + i) % 2) {
      result += '#';
    } else {
      result += ' '; 
    }
  }
  result += '\n';
}
</code></pre></li>
<li><p><strong>Use the conditional ternary operator for terse conditional assignments:</strong> You can replace the somewhat verbose <code>if else</code> statements with a single conditional assignment using the conditional ternary operator:</p>

<pre><code>var size = 8;
var result = "";
for (var i = 0; i &lt; size; i++) {
  for (var j = 0; j &lt; size; j++) {
    result += (j + i) % 2 ? '#' : ' ';
  }
  result += '\n';
}
</code></pre></li>
<li><p><strong>Replace the declarative loop with a more descriptive approach:</strong>
Exploit built-in methods and introduce new named identifiers for self-documenting code:</p>

<pre><code>function createBoard(size, black = '#', white = ' ') {
  let even = (white + black).repeat(size / 2) + (size % 2 ? white : '') + '\n';
  let odd  = (black + white).repeat(size / 2) + (size % 2 ? black : '') + '\n';
  return     (even  + odd  ).repeat(size / 2) + (size % 2 ? even  : '');
}

console.log(createBoard(8));
</code></pre></li>
</ol>

<p>Especially the last two changes are subject to personal preferences - some prefer the declarative style, some stick to <code>if { ... } else { ... }</code> everywhere - it's your (team's) choice.</p>
    </div>