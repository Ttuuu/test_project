<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think your code in general is easy to read and understand, so no problem with that. I would maybe change the name <code>SAPCustomerID</code> to just <code>SapId</code> as we know we're dealing with customers from the name of the owner type.</p>

<hr>

<blockquote>
<pre><code>public override int GetHashCode()
{
    return ID.GetHashCode() ^ SAPCustomerID.GetHashCode();
}
</code></pre>
</blockquote>

<p>If the <code>ID</code> and/or <code>SAPCustomerID</code> each uniquely defining a Customer then I don't see the necessity for the combination here. Returning one of the hash codes should be sufficient. I assume that a <code>CustomerIdentity</code> is only valid if it contains both ids?</p>

<hr>

<p>Trying this:</p>

<blockquote>
<pre><code>  CustomerIdentity identity1 = (CustomerIdentity)"12345";
  CustomerIdentity identity2 = (CustomerIdentity)"12345";
  Console.WriteLine(identity1.Equals(identity2)); // true
  Console.WriteLine(identity1 == identity2); // false
</code></pre>
</blockquote>

<p><code>Equals()</code> returns <code>true</code> because you carefully implement it to check for equality for each property, and <code>==</code> returns <code>false</code> because it just performs a <code>ReferenceEquals(a, b)</code> by default and because <code>identity1</code> is another instance than <code>identity2</code> (class/reference type).</p>

<p>I would expect both the above statements to return true.</p>

<p>You should implement the <code>==/!=</code> operators using <code>Equals()</code> so they behave equally or find a way to return the same instance of <code>CustomerIdentity</code> when casting from a string or a number.</p>

<hr>

<p>I think, I would define the cache interface as holding and returning objects of type <code>CutstomerIdentity</code> instead of exchanging strings for numbers and vice versa:</p>

<pre><code>  public interface ICustomerCache
  {
    CustomerIdentity GetIdentity(string sapId);
    CustomerIdentity GetIdentity(int id);
  }
</code></pre>

<hr>

<blockquote>
  <p><code>public void GetCustomerDeliveries(CustomerIdentity customer, DateTime deliveryDate);</code></p>
</blockquote>

<p>Having a <code>Get...()</code> method returning void seems a little odd :-)</p>
    </div>