<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Sticking to what you state as your goal in the comment</p>

<blockquote>
  <p>my goal is to remove particular needle from string fron beginning or
  from the end</p>
</blockquote>

<p>rather than use any assumptions about manipulating html tags (which should be done in DOMDocument or a similar DOM parser), then I will stick to this.</p>

<p>The problem in your case is that any of the <code>trim()</code> functions take a list of characters to trim, so they are considered individually rather than as a string in itself (which is what the search functions use).</p>

<p>This code just considers the first (or last) set of characters equivalent to the length of the needle and compares this with the needle itself.  If it matches, then just <code>substr()</code> the haystack to remove this many characters off the string...</p>

<pre><code>function ltrimString( string $haystack, string $needle )   {
    if ( substr($haystack, 0, strlen($needle)) === $needle )   {
        $haystack = substr($haystack, strlen($needle));
    }
    return $haystack;
}

function rtrimString( string $haystack, string $needle )   {
    if ( substr($haystack, -strlen($needle)) === $needle )   {
        $haystack = substr($haystack, 0, -strlen($needle));
    }
    return $haystack;
}
</code></pre>

<p>some examples...</p>

<pre><code>echo '&lt;ul&gt;&lt;li&gt;This&lt;/li&gt;&lt;/ul&gt;=' .
    ltrimString('&lt;ul&gt;&lt;li&gt;This&lt;/li&gt;&lt;/ul&gt;', '&lt;br&gt;') . PHP_EOL;

// &lt;ul&gt;&lt;li&gt;This&lt;/li&gt;&lt;/ul&gt;=&lt;ul&gt;&lt;li&gt;This&lt;/li&gt;&lt;/ul&gt;

echo '&lt;br&gt;&lt;ul&gt;&lt;li&gt;This&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;=' .
    ltrimString('&lt;br&gt;&lt;ul&gt;&lt;li&gt;This&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;', '&lt;br&gt;') . PHP_EOL;

// &lt;br&gt;&lt;ul&gt;&lt;li&gt;This&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;=&lt;ul&gt;&lt;li&gt;This&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;

echo '&lt;ul&gt;&lt;li&gt;This&lt;/li&gt;&lt;/ul&gt;=' .
    rtrimString('&lt;ul&gt;&lt;li&gt;This&lt;/li&gt;&lt;/ul&gt;', '&lt;br&gt;') . PHP_EOL;

// &lt;ul&gt;&lt;li&gt;This&lt;/li&gt;&lt;/ul&gt;=&lt;ul&gt;&lt;li&gt;This&lt;/li&gt;&lt;/ul&gt;

echo '&lt;br&gt;&lt;ul&gt;&lt;li&gt;This&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;=' .
    rtrimString('&lt;br&gt;&lt;ul&gt;&lt;li&gt;This&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;', '&lt;br&gt;') . PHP_EOL;

// &lt;br&gt;&lt;ul&gt;&lt;li&gt;This&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;=&lt;br&gt;&lt;ul&gt;&lt;li&gt;This&lt;/li&gt;&lt;/ul&gt;
</code></pre>

<p>The one thing I have not coded for is repeating chunks, this could be achieved by changing the <code>if()</code> to a <code>while()</code>. For example</p>

<pre><code>function ltrimString( string $haystack, string $needle )   {
    while ( substr($haystack, 0, strlen($needle)) === $needle )   {
        $haystack = substr($haystack, strlen($needle));
    }
    return $haystack;
}
</code></pre>

<p>would produce...</p>

<pre><code>&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;ul&gt;&lt;li&gt;This&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;=&lt;ul&gt;&lt;li&gt;This&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;
</code></pre>
    </div>