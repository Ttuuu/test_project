<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Before making some general remarks about the C# code, I would like to explain why the complexity of this algorithm is already optimal, even though it is not the standard approach to tackle this problem. </p>

<h2>Complexity Analysis</h2>

<p>As already stated in a comment, your complexity analysis is way off. The problem is your assumption that the loop over <code>list</code> only multiplies the runtime by the length <span class="math-container">\$n\$</span> of the source. However, the list grows each iteration of the outer loop.</p>

<h3>How complex is it really?</h3>

<p>To determine the real complexity, we have to have a closer look at what happens inside the outer loop. By design, the <code>list</code> will contain all permutations of the first <span class="math-container">\$(k-1)\$</span> elements when the <span class="math-container">\$k^{th}\$</span> iteration starts. Each element of <code>list</code> has length <span class="math-container">\$(k-1)\$</span>, accordingly, and there are <span class="math-container">\$(k-1)!\$</span> of them. So, in the <span class="math-container">\$k^{th}\$</span> iteration, we generate <span class="math-container">\$((k-1)+1)\cdot(k-1)! = k!\$</span> new permutations. Since we have to save a new string of length <span class="math-container">\$k\$</span> each time, which takes time <span class="math-container">\$k\$</span>, up to a constant offset and multiplication with a constant, for each iteration we need <span class="math-container">\$k\cdot k!\$</span> character operations. This leaves us with a total runtime of <span class="math-container">\$\sum_{k=1}^nk\cdot k!\$</span>.</p>

<p>It is not really straight forward that this is smaller than a multiple of <span class="math-container">\$n\cdot n!\$</span>, i.e. that the complexity of the algorithm is <span class="math-container">\$O(n\cdot n!)\$</span>. As a first step, we can reduce the problem a bit using the fact that <span class="math-container">\$k\leq n\$</span>.</p>

<p><span class="math-container">\$\sum_{k=1}^nk\cdot k! \leq n \cdot \sum_{k=1}^nk! = n \cdot n! \cdot \sum_{k=1}^n\frac{k!}{n!}\$</span></p>

<p>Now, let us make a convenient approximation for the items in the sum on the rhs, using that <span class="math-container">\$ \frac{1}{m} \leq \frac{1}{l} \$</span> for <span class="math-container">\$ m \geq l \$</span>.</p>

<p><span class="math-container">\$ \frac{k!}{n!} = \frac{1}{\prod_{m=k+1}^n m} \leq \frac{1}{\prod_{m=k+1}^n (m-k)} = \frac{1}{\prod_{l=1}^{n-k}l} = \frac{1}{(n-k)!} \$</span></p>

<p>This approximation allows us to get on the track of the argument used in the complexity analysis of the approach to generate permutations more often used in literature, namely generating all prefixes of permutations of the string of increasing length via recursion.</p>

<p><span class="math-container">\$ \sum_{k=1}^n\frac{k!}{n!} \leq \sum_{k=1}^n\frac{1}{(n-k)!} = \sum_{m=0}^{n-1}\frac{1}{m!} \leq \sum_{m=0}^{\infty}\frac{1}{m!} = e\$</span></p>

<p>In the second equation, we used the the substitution <span class="math-container">\$m=n-k\$</span>, which turns the summation order around. Moreover, for the last argument, one has to know that the exponential function is defined as function <span class="math-container">\$e^x = \sum_{n=0}^\infty \frac{x^n}{n!}\$</span>.</p>

<p>The argument about convergence to a constant is similar in nature to that in the analysis of the average insert time into a dynamic array, which is often presented in CS classes. That argument uses a different series, though.</p>

<h3>Why is this optimal?</h3>

<p>To see that a <span class="math-container">\$O(n\cdot n!)\$</span> is optimal is not too hard. We know that there are <span class="math-container">\$n!\$</span> many permutations and that we have to generate a string of length <span class="math-container">\$n\$</span> for each, which each takes a number of character operations proportional to the length. So, we end up with at least <span class="math-container">\$n\cdot n!\$</span> character operations.</p>

<h2>General Remarks</h2>

<p>To be honest, I cannot find a lot to improve here regarding the coding style. One could separate the contents of the outer loop into a separate private function <code>Permutations(List&lt;string&gt; permutationsOfPrefix, char nextCharacter)</code>, but I think it is equally as valid to keep the algorithm contained in one single method, especially since it is not very long. I also do not think that using LINQ here would improve the readability.</p>

<p>One point I think could be improved is there, though, the naming of variables. 'list' is a very generic name. I think <code>permutationsOfPrefix</code> would be more fitting. Accordingly, <code>tempString</code> could be <code>permutation</code> or <code>permutationOfPrefix</code> and <code>beingBuilt</code> could be <code>permutationsWithNextCharacter</code>. That would describe a bit better what is going on. Similarly, the <code>i</code> in the for loop could be named <code>insertionIndex</code>.    </p>

<p>Another possible improvement is to explicitly check whether the input string is <code>null</code> or empty at the start, to return an empty list in this case and, otherwise, to initialize <code>list</code> with the first character contained. This would allow to remove the if-else-statement inside the outer loop. However, it would require to iterate over <code>source.Drop(1)</code> in the outer loop.</p>
    </div>