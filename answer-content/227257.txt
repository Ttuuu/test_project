<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here's my suggestions:</p>

<ol>
<li><p>This is strange:</p>

<pre><code>namespace Ui {
class MainWindow;
}
</code></pre>

<p>it should be like this:</p>

<pre><code>namespace Ui {
    class MainWindow;
}
</code></pre></li>
<li><p>In C++, the type is very important, so C++ programmers tend to emphasize the type in declarations.  Therefore, the base type of the pointer type is put together with the asterisk — instead of:</p>

<pre><code>explicit MainWindow(QWidget *parent = nullptr);
</code></pre>

<p>it is more common to do:</p>

<pre><code>explicit MainWindow(QWidget* parent = nullptr);
</code></pre></li>
<li><p>You are holding a raw pointer to <code>Ui::MainWindow</code>:</p>

<pre><code>Ui::MainWindow *ui;
</code></pre>

<p>initializing it with <code>new</code>:</p>

<pre><code>ui(new Ui::MainWindow)
</code></pre>

<p>and then call <code>delete</code> in the destructor:</p>

<pre><code>delete ui;
</code></pre>

<p>This is error prone, and makes your class have undefined behavior when copied.  And the memory is leaked if the destructor doesn't get called (i.e., the constructor failed later).  The preferred way is to use a <code>unique_ptr</code>: (given that <code>Ui::MainWindow</code> is an incomplete type)</p>

<pre><code>std::unique_ptr&lt;Ui::MainWindow&gt; ui;
</code></pre>

<p>This avoids all problems — your class automatically releases the object on destruction, and the class is not copyable.</p>

<p>Same for the string list models.</p></li>
<li><p>The constructor is exception unsafe — memory is leaked if the <code>new</code>s throw.  Use <code>std::unique_ptr</code> for all the pointers.  However, there's a subtlety here — it seems that you are transferring the ownership of the string list models to the Qt controller.  You need to use <code>release</code> here.  Like this: (assumes that the pointers are changed to <code>std::unique_ptr</code>)</p>

<pre><code>MainWindow::MainWindow(QWidget* parent) :
    // same
{
    // same

    // the relevant constructor of std::unique_ptr is explicit
    m_IncomeModel = std::make_unique&lt;QStringListModel&gt;();
    m_ExpensesModel = std::make_unique&lt;QStringListModel&gt;();
    m_CashFlowModel = std::make_unique&lt;QStringListModel&gt;();
    m_CashOnCashModel = std::make_unique&lt;QStringListModel&gt;();

    ui-&gt;IncomeView-&gt;setEditTriggers(QAbstractItemView::NoEditTriggers);
    ui-&gt;IncomeView-&gt;setModel(m_IncomeModel.release());     // use release

    ui-&gt;ExpensesView-&gt;setEditTriggers(QAbstractItemView::NoEditTriggers);
    ui-&gt;ExpensesView-&gt;setModel(m_ExpensesModel.release()); // use release

    // same
}
</code></pre></li>
<li><p>Does <code>auto</code> help here?</p>

<pre><code>QModelIndex index = ui-&gt;IncomeView-&gt;currentIndex();
</code></pre></li>
</ol>
    </div>