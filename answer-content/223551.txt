<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Managing memory requirements</h2>

<p>Did you get the method signature from the interviewer? If not, it could use some improvement. Consider Joop Eggen's answer and the worst case scenario, where there are 2^63 different combinations. While his approach is likely the most efficient computationally, the method signature limits the operation to calculating everything before the results can be examined. It requires storage of  5.81e+20 characters in memory (what's that... 581 exabytes?)</p>

<p>Instead of passing a collection to which the results are collected, pass a consumer so that the caller has a control over how the results are stored and processed. Taking AJNeufeld's solution, as it has already a bit improved method signatures:</p>

<pre><code>public static void combinations(String input, Consumer&lt;String&gt; consumer) {
    StringBuilder workspace = new StringBuilder(input);
    addCombinations(workspace, consumer);
}

private static void addCombination(StringBuilder workspace,
    Consumer&lt;String&gt; consumer) {

    ...
    } else {
        consumer.accept(workspace.toString());
    }
}
</code></pre>

<p>This way, if the caller is only intersted in one specific result, it can, for example, throw an unchecked exception from the consumer as soon as the correct one has been found to make the algorithm stop.</p>
    </div>