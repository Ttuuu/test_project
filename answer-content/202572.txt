<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Node</h2>

<ul>
<li>Each node in a trie owns its child nodes, and nodes elsewhere in the trie don't ever point to nodes in a completely different branch. As such, a node can store its children by value in a container. There's no need to use pointers here which means we don't have to worry about manual memory management and we effectively get move / copy / assignment for free. :)</li>
<li>Is <code>val</code> actually necessary? It seems to just be a marker for the end of a word, in which case a <code>bool last_letter;</code> would be clearer. Unless the word indexing is a feature you really need, it might be better to stick with a boolean, remove the template argument, and remove the value argument from the Trie interface.</li>
<li>There's no need to create all the (empty) child nodes in the vector on initialization. This will make the trie much larger in memory than necessary. It would be better to use a <code>map</code> data structure.</li>
<li>Using a <code>map</code> data structure also means there's no need to adjust characters to indices. We can use the character as a key directly.</li>
<li>Using a dynamic data structure instead of a fixed size vector actually removes the need for the <code>std::size_t N</code> template argument!</li>
<li>Why use <code>this-&gt;</code> for the paths member, but not for val?</li>
</ul>

<hr>

<h2>Trie</h2>

<ul>
<li>With the above change (storing nodes by value), we can get rid of the destructor, and the <code>delete_all</code> function. Copy / assignment also becomes trivial.</li>
<li>The default constructor is listed, but not implemented!</li>
<li>The list constructor might be a good place to use a <code>std::initializer_list</code>. </li>
<li>The list constructor only allows one "value" argument for all the words in the list, whereas the <code>insert</code> function allows different values for each word.</li>
<li>Nice job on the iterative algorithms. :)</li>
<li>The <code>if (i == key_size() - 1) { ... }</code> part doesn't actually need to be inside the for loop in <code>insert</code>, <code>search</code>, and <code>delete</code>. It can be placed after the loop, and without the index check (since we keep track of the last node anyway). This does mean we need to check for empty keys at the start of the functions, but we should probably be doing that anyway (and assert / throw / return false). We can then use range-based for loops, since we no longer need the index.</li>
<li>Take <code>key</code> arguments (which are <code>std::strings</code>) by <code>const&amp;</code> to avoid unnecessary copying.</li>
<li><code>int(key[i]) - 97</code>:

<ul>
<li>Not needed when using a map. (Otherwise it should probably be a static function of the <code>Trie</code> class (<code>char_to_index()</code> or something), and 97 should be a named constant variable.)</li>
<li>What if someone passed in a string that contains non-alphabetic chars?</li>
<li>What if someone passed in a value of 0?</li>
</ul></li>
<li><code>insert()</code> - What if the same word is already in the trie with a different value? (Maybe return a boolean for success / failure of insertion).</li>
<li><code>deletion()</code> should probably be called <code>erase</code> (more consistent with <code>std::</code> data structures).</li>
<li><code>deletion()</code> - Maybe return a boolean for success / failure (if the key isn't there).</li>
<li><code>deletion()</code> - By using a <code>map</code> data structure in the node, we no longer need to iterate all of a node's children. We can simply remove the relevant entry. (This requires a couple more member functions on the Node class).</li>
<li>The logic inside the loops in <code>insert</code>, <code>search</code> and <code>delete()</code> calls <code>get_path(index)</code> more than strictly necessary.</li>
</ul>

<hr>

<h2>Modified Code</h2>

<p>I've renamed a few things and used <code>auto</code> a bit more, but these are just stylistic changes; the important things are mentioned above.</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;map&gt;
#include &lt;initializer_list&gt;
#include &lt;string&gt;
#include &lt;stack&gt;
#include &lt;cassert&gt;

class Node
{
    bool last_letter;
    std::map&lt;char, Node&gt; paths;

public:
    Node(): last_letter{ false }
    {
    }

    void set_last_letter(bool value)
    {
        last_letter = value;
    }
    bool is_last_letter() const
    {
        return last_letter;
    }

    void add_child(Node new_node, char index) // renamed set_path
    {
        auto inserted = paths.insert({ index, std::move(new_node) });
        assert(inserted.second); // make sure it doesn't already exist
    }
    Node* get_child(char index) // need const and non-const versions now
    {
        auto path = paths.find(index);

        if (path == paths.end())
            return nullptr;

        return &amp;path-&gt;second;
    }
    Node const* get_child(char index) const // need const and non-const versions now
    {
        auto path = paths.find(index);

        if (path == paths.end())
            return nullptr;

        return &amp;path-&gt;second;
    }
    void remove_child(char index)
    {
        paths.erase(index);
    }
    bool has_multiple_children() const
    {
        return paths.size() &gt; 1u;
    }

};

class Trie
{
    Node root;

public:
    Trie() {}
    Trie(std::initializer_list&lt;std::string&gt;);

    void insert(std::string const&amp;);
    bool contains(std::string const&amp;) const;
    bool erase(std::string const&amp;);
};

Trie::Trie(std::initializer_list&lt;std::string&gt; init_ls)
{
    for (auto const&amp; key : init_ls)
        insert(key);
}

void Trie::insert(std::string const&amp; key)
{
    assert(!key.empty());

    auto node = &amp;root;
    for (auto ch : key)
    {
        auto next_node = node-&gt;get_child(ch);

        if (next_node == nullptr)
        {
            node-&gt;add_child({}, ch);
            next_node = node-&gt;get_child(ch);

            assert(next_node != nullptr);
        }

        node = next_node;
    }

    node-&gt;set_last_letter(true);
}

bool Trie::contains(std::string const&amp; key) const
{
    assert(!key.empty());

    auto node = &amp;root;
    for (auto ch : key)
    {
        node = node-&gt;get_child(ch);

        if (node == nullptr)
            return false;
    }

    return node-&gt;is_last_letter();
}

bool Trie::erase(std::string const&amp; key)
{
    assert(!key.empty());

    auto node = &amp;root;
    auto node_stack = std::stack&lt;Node*&gt;{ };

    for (auto ch : key)
    {
        node = node-&gt;get_child(ch);

        if (!node) // key not in trie
            return false;

        node_stack.push(node);
    }

    if (!node-&gt;is_last_letter()) // not at end of word!
        return false;

    node-&gt;set_last_letter(false);

    assert(node_stack.size() == key.size());

    while (!node_stack.empty())
    {
        auto curr_node = node_stack.top();
        node_stack.pop();

        auto index = node_stack.size();

        if (curr_node-&gt;has_multiple_children() || node_stack.empty())
            curr_node-&gt;remove_child(key[index]);
    }

    return true;
}
</code></pre>

<hr>

<h2>Unit Tests</h2>

<p>You've added a few tests, but it's best to split things up and test individual features / functionality - proper unit testing!</p>

<p>In the simplest case, you can just use a function that takes a boolean and outputs whether it's true or false. But it's worth getting to know GoogleTest or another unit testing framework.</p>

<pre><code>void test(bool condition, std::string const&amp; message)
{
    if (condition)
        std::cout &lt;&lt; "pass\n";
    else
        std::cout &lt;&lt; "FAIL: " &lt;&lt; message &lt;&lt; "\n";
}

...

{
    Trie t;
    test(t.is_empty(), "default construction produces empty trie");
}
{
    Trie t;
    t.insert("moo");
    Trie copy(t);
    test(copy.contains("moo"), "copy construction copies other trie");
}
{
    Trie t;
    t.insert("moo");
    Trie copy(std::move(t));
    test(copy.contains("moo"), "move construction copies other trie");
    test(t.is_empty(), "move construction empties moved from trie");
}
// todo: test assignment too...
{
    Trie t;
    t.insert("cats");
    test(!t.contains("cat"), "partial prefix of word in trie does not count when searching");
}
{
    Trie t;
    t.insert("cat");
    t.insert("cats");
    t.erase("cat");
    test(t.contains("cats"), "erasing partial prefix of word in trie does not affect longer word");
}
//{
//  Trie t;
//  t.insert(""); // hits assertion in the modified code above! if we had a proper testing framework we could EXPECT_DEATH() or EXPECT_THROW() here...
//}
</code></pre>

<p>As well as helping to make your code bug-free and maintainable, it also helps with thinking about the interface and desired functionality. Unit testing is where you decide "when a user attempts to add a string that already exists in the trie, should I silently allow it, return false, assert, or throw?". Once you have decided, you can write a unit test to prove and document that behavior.</p>

<hr>

<h2>Misc Advice</h2>

<ul>
<li>Rather then writing a generic template data structure right away, it's often better to write the specific version first. Start off with no templates and hard-code in <code>char</code> and <code>std::string</code>. Once that version works and is tested thoroughly, it should be relatively easy to make it generic.</li>
<li>Don't add comments for obvious things (like <code>// Class node</code> or <code>// Main</code>).</li>
</ul>

<hr>

<h2>Q&amp;A</h2>

<ol>
<li>Yep. The algorithms look correct to me.</li>
<li>I don't think I've ever seen a Trie that wasn't used for strings. I'm not sure <code>template specialization</code> means what you think it means here. <code>Template specialization</code> is  used for particular types that need to be treated differently, and effectively overrides the generic template behaviour. I don't think it would be useful here. Using templates to allow different key / value types as in your original code is reasonable if you need that feature.</li>
<li>No! Since we can store nodes by value, the memory management is not needed at all. If it were necessary, you should still use <code>std::unique_ptr</code> instead of manually <code>new</code>ing and <code>delete</code>ing things.</li>
<li>Probably, but this is already getting too long...</li>
<li>See above!</li>
</ol>
    </div>