<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I can't say the code is very readable in general, although it is probably better than average.  This function is way too long and should be separated into several functions according to logic.  And the way you use the standard library facilities doesn't seem optimal.</p>

<p>Here are some suggestions on the code:</p>

<hr>

<pre><code>IOperation* pFileReader = new McFileReader();
</code></pre>

<p><strong>No, No, No.</strong>  C++ is not Java.  There is no garbage collector in C++.  This line makes your code inherently exception-unsafely and error-prone.  See <a href="https://stackoverflow.com/q/6500313">Why should C++ programmers minimize use of 'new'?</a>.  The correct way is to declare a normal variable:</p>

<pre><code>McFileReader fileReader{};
</code></pre>

<p>This avoids all sorts of problems.</p>

<hr>

<pre><code>if(pFileReader)
</code></pre>

<p>This is redundant because <code>new</code> never returns a null pointer.  Instead, it throws an exception that is caught by an exception handler of type <code>std::bad_alloc</code>.  Simply remove this check.</p>

<hr>

<pre><code>std::wstring strVendor, wstrFileLocation, wstrRegLocation;
std::wstring FileType, regType;
</code></pre>

<p>Declaring a bunch of variables at the start of a block is not advised in C++.  A reader feels puzzled when seeing these two lines.  Move these declarations to where these variables are actually used.</p>

<hr>

<pre><code>transform(
    strVendor.begin(), strVendor.end(),
    strVendor.begin(),
    towlower);
</code></pre>

<p>None of the arguments are guaranteed to nominate <code>std</code> in ADL, so use <code>std::transform</code> not <code>transform</code>.  Also, <code>towlower</code> can't be used like this.  Wrap it in a lambda.</p>

<hr>

<pre><code>strVendor.assign(manufacSearchValue-&gt;second);
</code></pre>

<p>Don't use <code>assign</code> when a simple assignment will do.  <code>strVender = manufacSearchValue-&gt;second</code> is much better.  This problem also recurs later in the code.</p>

<p>Similarly, use <code>+=</code> instead of <code>append</code>.</p>

<hr>

<pre><code>pFileReader-&gt;SetParams((wchar_t*)oemPathPublicKey.c_str(), L"File");
</code></pre>

<p>The explicit cast to <code>wchar_t*</code> indicates a <em>serious</em> design problem.  If you want to modify the string, use <code>&amp;oemPathPublicKey[0]</code> in C++11.  If you don't want to modify the string, remove the cast.  If <code>SetParams</code> is not const-correct, correct it.</p>

<hr>

<pre><code>wchar_t* ptrWStr;
wchar_t* buffer;
ptrWStr = wcstok_s((wchar_t*)wstrFileLocation.c_str(), L" ", &amp;buffer);
</code></pre>

<p>Now you are playing with pointers and <code>wcstok_s</code>.  The first thing I notice is that <code>wcstok_s</code> doesn't exist in C++ at all.  Even if it were to exist, you should be using the <code>string</code> operations.  They are usually faster than the C functions if you use them properly.</p>

<hr>

<pre><code>m_fileParams.insert({ it-&gt;first, it-&gt;second });
</code></pre>

<p>Shouldn't it be <code>insert(*it)</code>?  Or, if that doesn't work, <code>emplace(it-&gt;first, it-&gt;second)</code>?</p>

<hr>

<pre><code>auto emailSearchType = m_fileParams.find(L"email");
std::wstring emailValue = emailSearchType-&gt;second;
</code></pre>

<p>Why not <code>auto emailValue = emailSearchType.at(L"email");</code>?</p>

<hr>

<pre><code>else
{
}
</code></pre>

<p>This <code>else</code> clause is useless and can be removed.</p>
    </div>