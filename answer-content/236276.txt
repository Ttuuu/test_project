<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Someone else already discussed this, but I would get rid of the boolean members <code>hasAge</code> and <code>hasAddress</code>. They don't really provide any information that the fields themselves don't provide.</p>

<p>An issue regarding the boolean flags is that you never update them, so they will be invalid once you use the setters. This is just a good demonstration of why you would be better off without them: they will eventually become inconsistent from the actual field state. </p>

<p>Instead of setting the address to a string saying no address available, just set it to an empty string or null and let the caller decide how to handle it. You could also add a <code>hasAddress</code> method that checks if the string is empty/null. An empty age could be signified as -1, assigned to a constant.</p>

<p>Also, instead of several different constructors, you could use the fluent builder pattern:</p>

<pre><code>public class Person {

    private static final int EMPTY_AGE = -1;
    private static final String EMPTY_ADDRESS = "";

    private String firstName, lastName, address;
    private int age;

    public static class PersonBuilder {
        private String firstName = null, lastName = null, address = EMPTY_ADDRESS;
        private int age = EMPTY_AGE;
        public PersonBuilder firstName(String firstName) {
            this.firstName = firstName;
            return this;
        }
        public PersonBuilder lastName(String lastName) {
            this.lastName = lastName;
            return this;
        }
        public PersonBuilder address(String address) {
            this.address = address;
            return this;
        }
        public PersonBuilder age(int age) {
            this.age = age;
            return this;
        }
        public Person build() {
            Objects.requireNonNull(firstName);
            Objects.requireNonNull(lastName);
            return new Person(firstName, lastName, address, age);
        }
    }

    public static PersonBuilder builder() {
        return new PersonBuilder();
    }

    private Person(String firstName, String lastName, String address, int age) {
        this.firstName = firstName;
        this.lastName = lastName;
        this.age = age;
        this.address = address;
    }

    public String getName() {
        return firstName + lastName;
    }

    public String getFirstName() {
        return firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public int getAge() {
        return age;
    }

    public String getAddress() {
        return address;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    public void setAge(int age) {
        this.age = age;
    }

    public void setAddress(String address) {
        this.address = address;
    }

}
</code></pre>

<p>Now, you can build a Person like this:</p>

<pre><code>Person.builder().firstName("John").lastName("Doe").age(25).address("1234 Some Road").build();
</code></pre>

<p>This is especially helpful when the class has more fields.</p>

<p>Besides being easier to read when constructing it, the builder pattern</p>

<ul>
<li>Removes the possibility of mixing up constructor fields</li>
<li>Allows specifying the fields in any order </li>
<li>Guarantees the Person object returned will be valid. The <code>build</code> method will refuse to construct the object when required fields are missing. (This checking could alternatively be done in Person's constructor.)</li>
</ul>
    </div>