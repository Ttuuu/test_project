<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Whenever you find yourself trying to replace a standard language feature, the first thing you should think is,</p>

<blockquote>
  <p>There's probably something I'm missing. What's the standard approach to this kind of problem?</p>
</blockquote>

<p>Your code feels inelegant because you're not using a standard approach. When your code starts to feel weird like that, it's time to take a step back and look for the standard approaches and tools for the kind of problem you're facing. Code becomes elegant when it's something you would expect to see, and you can create that expectation by adhering to the norms and paradigm of the language and tools you're using.</p>

<hr>

<p>In this case, the standard approach is not to import something until you're actually going to use it. In this context, that means that instead of importing all these classes into your package (<code>__init__.py</code>), let callers decide what engines they require and import them. I've run into situations where my code fails late into its execution because of a dependency that isn't properly installed; it is frustrating and wasted my time. You want your design to encourage fail fast. Having your callers explicitly import the engines from your package that they need will save them trouble.</p>

<p>Example calling code:</p>

<pre><code>from Program.engines.psi4 import PSI4

PSI4('example_molecule').generate_input()
</code></pre>

<p>If other parts of <em>your</em> code use the engines, then let the caller inject the engine as a dependency:</p>

<pre><code>class ProgramWorker(object):
    def __init__(self, engine):
        if engine is None:
            raise ValueError('engine must have a value')
        self.engine = engine

    def do_something(self, x, y):
        intermediate = self.engine.calculate_something(x, y)
        # do more with intermediate
        return result
</code></pre>

<p>Parameterizing the engine at initialization time like this is an example of dependency inversion, and needing to select one of several implementations is one of the few situations in Python where a more OO approach makes a lot of sense. Instead of having the class find its dependencies, you let callers inject the dependency as an argument. This gives callers greater flexibility, more control, and more transparency into the prerequisites of your code. In particular, they retain all the fail fast properties of normal imports and are given full control over what to load and what not to. Callers would use it like this:</p>

<pre><code>from Program.engines.psi4 import PSI4
from Program.somewhere import ProgramWorker

eng = PSI4('example_molecule')
w = ProgramWorker(eng)
w.do_something()
</code></pre>

<p>This wouldn't work if your engines don't have a common interface, but in that case, you shouldn't be using an inheritance structure. If different engines are required for different functionality, then it would be better just to split up the functionality into separate modules based on dependencies.</p>

<h3><code>run.py</code> Command line</h3>

<p>Assuming your <code>run.py</code> is a command line application, then you can control the engine with a command line option. Combined with the above, it would then look something like this:</p>

<pre><code>import click

@click.command()
@click.options('--engine', type=click.Choice(['psi4', 'rdkit', ...])), default='psi4', help='The engine to use for computations')
def main(engine):
    if engine_name == 'psi4':
        from .engine.psi4 import PSI4
        eng = PSI4('example_molecule')
    elif engine_name == 'rdkit'
        from .engine.rdkit import RDKit
        eng = RDKit('example_molecule')
    elif engine_name == ...:
        ...
    else:
        raise ValueError('Unknown engine: ' + engine)

    eng.generate_input()

if __name__ == '__main__'
    main()
</code></pre>

<p>(You don't have to use <a href="https://click.palletsprojects.com/en/7.x/" rel="nofollow noreferrer"><code>click</code></a>; it's just the easiest command line parser I know of.)</p>

<p>Here, you can just import the engine inline because you need to delay the import until the option has been parsed. This is okay since this block of code, being the command line implementation, will necessarily execute almost immediately after being invoked.</p>

<p>If you need this "select an engine" functionality in multiple places, you <em>could</em> encode that in your <code>engines</code> package (the <code>__init__.py</code>) as a function, but it's unlikely that you have several different scripts that need this as its main purpose is to support the command line. If you have multiple commands that use an engine, you can use a <code>click.group</code> to enable them to share these parameters and this code.</p>

<hr>

<h3>Naming</h3>

<p>You should probably rename your modules to avoid conflicts with the names of packages you're depending on: <code>psi4engine</code> or <code>psi4_engine</code>, <code>rdkitengine</code> or <code>rdkit_engine</code></p>

<p>I would also suffix your engine classes with <code>Engine</code> to avoid possible name conflicts and to increase the clarity of your code: <code>PSI4Engine</code>, <code>RDKitEngine</code>.</p>

<h3>Optional dependencies</h3>

<p>You might already be doing this if you're creating a package from your code, but in case you're not, you should be declaring packages like PSI4 and RDKit as <a href="https://setuptools.readthedocs.io/en/latest/setuptools.html#declaring-extras-optional-features-with-their-own-dependencies" rel="nofollow noreferrer">optional dependencies</a>.</p>
    </div>