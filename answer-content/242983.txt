<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>1) The Fibonacci series shall never yield non whole numbers; <code>double</code>s are unnecessary and possibly computationally expensive. Try a <code>uintmax_t</code>. It will probably give you values of up to 2^64 - 1 (18,446,744,073,709,551,615). That should certainly be sufficient. Additionally, I would put in code to terminate the program as it reaches the upper limit of <code>uintmax_t</code>.</p>

<p>2) Your could have a classic I/O problem: output buffering. Try to put a <code>\n</code> in every print statement to encourage proper flushing. So rather than having the  come at the beginning of each print statement, try putting it at the end. If you like it the way it is, you can call <code>fflush(stdout)</code> after every <code>printf()</code>. While we're on the topic, your first two <code>printf()</code> statements can be combined. More info at <a href="https://stackoverflow.com/q/1716296/12786236">this</a> SO question.  </p>

<p>3) Obviously the <code>Sleep()</code> functions are unnecessary to your code. I presume that they are there for the aesthetic value of the output, but I would take them out. Doing so would make your code OS-independent as well as neater. But obviously, depending on the assignment, appearance may be above all.  </p>

<p>4) Finally, despite the mathematical purpose of the program, <code>math.h</code> is not needed.  </p>

<p>Addendum: You asked how to make it more professional. You could make a Fibonacci function encapsulating the algorithmic properties of your code, while leaving the aesthetic properties (sleep, welcome message) in <code>main()</code>. Example: </p>

<pre><code>uintmax_t num = get_next_fibbonaci(/*reference to struct storing state || values necessary for calculation*/);
</code></pre>
    </div>