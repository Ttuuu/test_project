<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>lsblk</h2>

<p>The <code>-s</code> option to <code>lsblk</code> was introduced to util-linux rather recently, <a href="https://www.kernel.org/pub/linux/utils/util-linux/v2.22/v2.22-ReleaseNotes">in release 2.22</a>.  You may experience compatibility issues on slightly older GNU/Linux installations.</p>

<p>But I don't see why you would want the <code>-s</code> option at all — it just gives you an inverted device tree.  For example, on my machine:</p>

<blockquote>
<pre><code>$ lsblk -o name -n -s -l
sda1
sda
sda2
sda
sr0
vg-root
sda3
sda
vg-var
sda3
sda
vg-data
sda3
sda
</code></pre>
</blockquote>

<p>In the output, <code>sda</code> appears multiple times.  To understand the output, you need to drop the <code>-l</code> flag so that the list appears in tree form:</p>

<blockquote>
<pre><code>$ lsblk -o name -n -s
sda1
└─sda
sda2
└─sda
sr0
vg-root
└─sda3
  └─sda
vg-var
└─sda3
  └─sda
vg-data
└─sda3
  └─sda
</code></pre>
</blockquote>

<p>Now, it's more apparent that the <code>-s</code> option isn't helpful.  If you drop it, then the output makes more sense:</p>

<blockquote>
<pre><code>$ lsblk -o name -n
sda
├─sda1
├─sda2
└─sda3
  ├─vg-root
  ├─vg-var
  └─vg-data
sr0
$ lsblk -o name -n -l
sda
sda1
sda2
sda3
vg-root
vg-var
vg-data
sr0
</code></pre>
</blockquote>

<p>To list the devices on <code>sda</code>, it would be better to run <code>lsblk -o name -n -l <strong>/dev/sda</strong></code> — that would immediately drop <code>sr0</code> from consideration, for example.  Note that LVM volumes (such as <code>vg-root</code> above) would still appear in the output.  I don't think that doing a substring search (<code>if x != disk and disk in x</code> in your code) is a reliable filter.  It could be fooled if there are <a href="https://www.reddit.com/r/linux/comments/o9b3e/for_those_of_you_who_were_curious_this_is_what/c3ff7n5/">more than 26 physical disks</a>: the 27th disk would be named <code>sdaa</code>.  It might also be fooled by exceptionally tricky naming of LVM volumes.</p>

<h2>Subprocess execution</h2>

<p>Whenever practical, I recommend avoiding the shell when executing subprocesses.  The shell introduces a set of potential security vulnerabilities — for example, shenanigans with the <code>PATH</code> environment variable.  Best practice would be to run the command with a specific executable and pre-parsed command-line options:</p>

<pre><code>run('/bin/lsblk -o name -n -s -l'.split(), stdout=PIPE)
</code></pre>

<h2>Alternative solution</h2>

<p>I actually wouldn't bother with parsing the output of <code>lsblk</code> at all.  After all, <code>lsblk</code> is just a way to report the contents of the sysfs filesystem.  You would be better off inspecting <code>/sys</code> directly.</p>

<pre><code>from glob import glob
from os.path import basename, dirname

def physical_drives():
    drive_glob = '/sys/block/*/device'
    return [basename(dirname(d)) for d in glob(drive_glob)]

def partitions(disk):
    if disk.startswith('.') or '/' in disk:
        raise ValueError('Invalid disk name {0}'.format(disk))
    partition_glob = '/sys/block/{0}/*/start'.format(disk)
    return [basename(dirname(p)) for p in glob(partition_glob)]
</code></pre>
    </div>