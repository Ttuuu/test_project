<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The code is relatively concise and easy to read. Here are some points that could be improved:</p>

<ul>
<li>A general thing is the amount of commenting, you should generally resort to comments only when it's hard to make the code self-explanatory. You don't really need to comment each line of the code.</li>
<li><p><code>stringCopy = (stringOrig+'.')[:-1] # copy string contents</code><br>
You can make a copy this way instead <code>stringCopy = stringOrig[:]</code>.</p></li>
<li><p>To make the code more readable, you can create a function that shifts a string n characters. This will really help make the code more readable.</p></li>
<li><p>The <code>else</code> keyword after the <code>for</code> loop is not needed since you return anyway if you didn't finish the loop. <code>else</code> is usually used with <code>break</code> in the <code>for</code> loop.</p></li>
<li><p>The name of the function could be slightly improved, maybe <code>consists_of_repeated_substrings</code>. This is longer but is very easy to understand.</p></li>
<li><p>A note on performance: your algorithm creates a copy of the original string in each iteration. This works fine for shorter strings, but if you wanna make it more efficient you can consider matching the string without making a shifted copy of it.</p></li>
</ul>

<p>Incorporating these comments you could rewrite the code as follows:</p>

<pre><code>def shifted_string(str, n):
  return str[n:] + str[:n]

def consists_of_repeated_substrings(str):
    '''
    Checks whether a string consists of a substring repeated multiple times.
    Ex. 'testtesttest' is the string 'test' repeated 3 times.
    '''

    # The string can only contain equal substrings if you can shift it n 
    # times (0 &lt; n &lt; len) and get the same original string.
    for i in range(1, len(str)):
        if shifted_string(str, i) == str:
            return True
    return False
</code></pre>

<hr>

<p>A clever algorithm for doing the same thing is as follows:</p>

<pre><code>double_str = (str + str)[1:-1]
return double_str.find(str) != -1
</code></pre>

<p>The idea is similar to yours, so I will leave understanding it as an exercise.</p>
    </div>