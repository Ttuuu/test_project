<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Since there is an <code>e</code> missing in the input dataframe in col <code>A</code> provided by you, I have added it:</p>

<pre><code>#input
A_list = ['a', 'b', 'c', 'd', 'f']
df = pd.DataFrame({'A': ['a', 'b', 'c', 'd','e','f'], 'B': [1,2,3,3,2,1]})
</code></pre>

<hr>

<p>You can start by joining the list you have:</p>

<pre><code>pat='({})'.format('|'.join(A_list))
#pat --&gt; '(a|b|c|d|f)'
</code></pre>

<p>Then using <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.str.extract.html" rel="nofollow noreferrer"><code>series.str.extract()</code></a> I am extracting the matching keys from the series based on the pattern we created.</p>

<pre><code>s=df.A.str.extract(pat,expand=False) #expand=False returns a series for further assignment
print(s)
</code></pre>

<hr>

<pre><code>0      a
1      b
2      c
3      d
4    NaN
5      f
</code></pre>

<p>Once you have this series, you can decide what you want to do with it. For,example if I take your function:</p>

<pre><code>def gen_data(key):
    #THIS FUNCTION IS JUST AN EXAMPLE THE COLUMNS ARE NOT NECESSARILY RELATED OR USE THE KEY 
    data_dict = {'C':key*2, 'D':key, 'E':key*3}
    return data_dict
</code></pre>

<p>And do the below:</p>

<pre><code>df.join(pd.DataFrame(s.apply(gen_data).values.tolist()))
</code></pre>

<p>We get the desired output:</p>

<pre><code>   A  B    C    D    E
0  a  1   aa    a  aaa
1  b  2   bb    b  bbb
2  c  3   cc    c  ccc
3  d  3   dd    d  ddd
4  e  2  NaN  NaN  NaN
5  f  1   ff    f  fff
</code></pre>

<p>However I personally <a href="https://stackoverflow.com/questions/54432583/when-should-i-ever-want-to-use-pandas-apply-in-my-code">wouldn't</a> use apply unless mandatory, so here is another way using <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.assign.html" rel="nofollow noreferrer"><code>df.assign()</code></a> where you can pass a dictionary of the extracted series and assign it to the dataframe:</p>

<pre><code>df=df.assign(**{'C':s*2,'D':s,'E':s*3})
</code></pre>

<hr>

<pre><code>   A  B    C    D    E
0  a  1   aa    a  aaa
1  b  2   bb    b  bbb
2  c  3   cc    c  ccc
3  d  3   dd    d  ddd
4  e  2  NaN  NaN  NaN
5  f  1   ff    f  fff
</code></pre>
    </div>