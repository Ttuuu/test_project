<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The most important points have already been mentioned:</p>

<ul>
<li>Use <code>double</code> instead of <code>int</code> for the coordinates</li>
<li>Make the fields <code>private</code> </li>
</ul>

<p>Concerning the recommendation to make the class immutable, I have to say that one has to really consider the possible application cases here. The <a href="http://en.wikipedia.org/wiki/Escape_analysis#Example_.28Java.29" rel="nofollow noreferrer">Escape Analysis</a> has significantly been improved in the recent Java versions. But for performance-critical applications, having to create possibly millions of objects may still have an impact on performance due to garbage collection (as long as there are no real <a href="http://cr.openjdk.java.net/~jrose/values/values-0.html" rel="nofollow noreferrer">value types</a> in Java). </p>

<p>Apart from this possible performance impact, one should consider the intended <em>semantics</em> of such a class. Should such a vector really be used <em>like a value</em>, or should it be possible to pass a reference to another class, and let this class change the vector via this reference?</p>

<hr>

<p>The <code>div</code> method is rather unusual: I can not imagine an application case where you want to do a <em>component-wise</em> division of the coordinates. Instead, you should consider adding operators with scalars:</p>

<pre><code>public void mul(double factor) {
    this.x *= factor;
    this.y *= factor;
}
</code></pre>

<p>(note that you don't need a <code>div</code> method with a scalar, because you can simply call <code>vector.mul(1.0/factor)</code> to achieve the same result).</p>

<hr>

<p>Concerning the intention to use this in a particle system / physics engine, you should consider introducing additional methods that are required frequently in such a context. For example,</p>

<pre><code>public double lengthSquared() {
    return this.x*this.x+this.y*this.y;
}
public double length() {
    return Math.sqrt(lengthSquared());
}
public void normalize() {
    mul(1.0/length());
}

// When the vectors are interpreted as points, 
// you'll often need these:
// (Updated based on the comments: This is 
// basically the length of the difference of
// the two vectors)
public double distanceSquared(Vector other) {
    double dx = this.x - other.x;
    double dy = this.y - other.y;
    return dx*dx+dy*dy;
}
public double distance(Vector other) {
    return Math.sqrt(distanceSquared(other));
}
</code></pre>

<p>The actual set of operations (and their implementation, also in view of the question about immutability) will depend on how you intend to use this class.</p>

<hr>

<p>But regardless of these usage-based methods: You should consider to implement the <code>hashCode</code> and <code>equals</code> methods. Otherwise, the following code would print <code>false</code>...</p>

<pre><code>Vector v0 = new Vector(1,2);
Vector v1 = new Vector(1,2);
System.out.println(v0.equals(v1));
</code></pre>

<p>...although it would be reasonable to yield <code>true</code> here. An implementation of these methods could look like this:</p>

<pre><code>@Override
public int hashCode() {
    long bits = 1L;
    bits = 31L * bits + Double.doubleToLongBits(x);
    bits = 31L * bits + Double.doubleToLongBits(y);
    return (int) (bits ^ (bits &gt;&gt; 32));
}

@Override
public boolean equals(Object object)
{
    if (object == null) return false;
    if (this == object) return true;
    if (!(object instanceof Vector)) return false;
    Vector other = (Vector)object;
    return this.x == other.x &amp;&amp; this.y == other.y;
}
</code></pre>
    </div>