<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Yes, recursion would certainly be a better solution. That would look something like:</p>

<pre><code>function checkForWords(input) {
  let words = [];

  function recurseLetters(letters, currentString) {
    if (currentString.length &gt;= 3 &amp;&amp; isWord(currentString)
      wors.push(currentString);
    letters.forEach( (letter, i) =&gt; {
      recurseLetters(letters.slice().splice(i,1),, currentString + letter;
    });
  }

  recurseLetters(input.split(''), '');        
}
</code></pre>

<p>However this doesn't check for duplicate words (say your input is <code>aelpp</code>) and probably won't perform much better.</p>

<p>To speed up <code>isWord</code> there are two options. Either use the <code>includes</code> built in:</p>

<pre><code>function isWord(word){
    return wordList.includes(word);
}
</code></pre>

<p>another option is to build a hash and use that. This would work well if you are making multiple calls to offset the once off expense of building the hash.</p>

<pre><code>let wordHash = {};
wordList.forEach( (word) =&gt; { wordHash[word]=true } );
function isWord(word){
    return wordHash[word];
}
</code></pre>

<p>in general you would need to measure the performance of each alternative.</p>

<p>Another way of solving this problem usually involves sorting the letters in each dictionary word and in the input. This requires a bit more planning but usually means testing fewer permutations.  </p>
    </div>