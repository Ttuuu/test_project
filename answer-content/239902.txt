<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If you want to check whether every item in an array passes a test, you should use <code>.every</code> for that, not <code>.reduce</code>. Eg</p>

<pre><code>data.reduce((acc, el) =&gt; acc &amp;&amp; el.length &gt; 0, true)
</code></pre>

<p>can be switched with</p>

<pre><code>data.every(arr =&gt; arr.length)
</code></pre>

<p>and</p>

<pre><code>data.reduce((acc, el) =&gt; acc &amp;&amp; el[0] === null, true)
</code></pre>

<p>can be switched with</p>

<pre><code>data.every(arr =&gt; arr[0] === null)
</code></pre>

<p>Also, when you want to transform one array into another, <code>.map</code> is the right method, not <code>.reduce</code>. Or, when you just want to copy an array exactly, use <code>.slice()</code> or spread it. Change</p>

<pre><code>data.reduce((acc, el) =&gt; {
  acc.push(el.shift());
  return acc;
}, [])
</code></pre>

<p>to</p>

<p><code>[...data]</code></p>

<hr>

<p>On a broader note, I would consider the logic to be a lot easier to follow if it was separated into two parts: one part to read the files and deal with the asynchronicity, and another part to (synchronously) combine into a single array. I think mixing the two and using <code>eventEmitter</code> makes things more difficult to understand than they need to be.</p>

<p>A somewhat minor issue is that you're requiring all rows of a particular index to be kept in memory until they've all been parsed. In the case that you're dealing with a large number of files, or the rows are large, it would be better to combine them as soon as possible, as they come in, so that the only persistent data structure is the output array of arrays (rather than an array of arrays for each separate <code>.csv</code>).</p>

<p>When any row is parsed, you can call a function that combines it with the results array. You can also map each <code>parseStream</code> to a Promise that resolves once its <code>end</code> event fires, and use <code>Promise.all</code> to log the final results array once all parsers are completed:</p>

<pre><code>const result = [];
const combineRow = (row, rowIndex) =&gt; {
  const targetRow = result[rowIndex];
  if (!targetRow) {
    result[rowIndex] = row;
    return;
  }
  row.forEach((cell, cellIndex) =&gt; {
    targetRow[cellIndex] = (targetRow[cellIndex] || 0) + cell;
  });
}
const getRows = parser =&gt; new Promise((resolve, reject) =&gt; {
  let rowIndex = 0;
  parser.on('readable', () =&gt; {
    const row = parser.read();
    if (row) {
      combineRow(row.map(Number), rowIndex);
      rowIndex++;
    }
  });
  parser.on('end', resolve);
});

Promise.all(parsers.map(getRows))
  .then(() =&gt; {
    console.log(result);
  });
</code></pre>

<p><a href="https://repl.it/repls/EnchantedElaborateFiber" rel="nofollow noreferrer">https://repl.it/repls/EnchantedElaborateFiber</a></p>
    </div>