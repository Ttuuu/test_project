<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>def check_row_containing_move_for_win(self):
    total = 0
    for column in range(3):
        total = total + int(self.letter_dict[self.state_of_game.board[self.row_index_of_move][column]])
        if abs(total) == 3:
            winning_letter = self.state_of_game.board[self.row_index_of_move][self.column_index_of_move]
            self.game_outcome = winning_letter
            return True
    return False
</code></pre>

<p>There are a few things wrong with the above code, and a few things which can be greatly improved.</p>

<ul>
<li><code>self.letter_dict[ ]</code> is a dictionary containing the values <code>1</code>, <code>-1</code>, and <code>0</code>.  Since these are already integer values, you donâ€™t need the <code>int( ... )</code> call to convert the values to integers.</li>
<li><code>total = total + ...</code> is almost always written <code>total += ...</code></li>
<li>Since <code>total</code> is initialized to <code>0</code>, and can only be incremented or decremented by <code>1</code> each time through the loop, you can only get to <code>+3</code> or <code>-3</code> after all 3 passes through the loop.  Having the <code>if abs(total) == 3:</code> test inside the loop is inefficient; it should be moved outside of, just after the loop.</li>
<li>Since you are summing up values in a loop, you can use the Python <code>sum( )</code> function, with list comprehension instead of a loop.</li>
</ul>

<p>With the above changes, this function could become:</p>

<pre><code>def check_row_containing_move_for_win(self):
    total = 0
    for column in range(3):
        total += self.letter_dict[self.state_of_game.board[self.row_index_of_move][column]]
    if abs(total) == 3:
        winning_letter = self.state_of_game.board[self.row_index_of_move][self.column_index_of_move]
        self.game_outcome = winning_letter
        return True
    return False
</code></pre>

<p>Or simply:</p>

<pre><code>def check_row_containing_move_for_win(self):
    total = sum(self.letter_dict[self.state_of_game.board[self.row_index_of_move][column]]
                for column in range(3))
    if abs(total) == 3:
        winning_letter = self.state_of_game.board[self.row_index_of_move][self.column_index_of_move]
        self.game_outcome = winning_letter
        return True
    return False
</code></pre>

<p>Similar comments for your column and diagonal win tests.</p>

<hr>

<p>Your 5 <code>if</code> statements ...</p>

<pre><code>    if self.check_row_containing_move_for_win():
        return self.game_outcome
    if self.check_column_containing_move_for_win():
        return self.game_outcome
    if self.check_main_diagonal_for_win_iff_it_contains_move():
        return self.game_outcome
    if self.check_off_diagonal_for_win_iff_it_contains_move():
        return self.game_outcome
    if self.check_for_tie():
        return self.game_outcome
</code></pre>

<p>can be simplified by combining into a single <code>if</code> statement:</p>

<pre><code>    if (  self.check_row_containing_move_for_win() or
          self.check_column_containing_move_for_win() or
          self.check_main_diagonal_for_win_iff_it_contains_move() or
          self.check_off_diagonal_for_win_iff_it_contains_move() or           
          self.check_for_tie()):
        return self.game_outcome
</code></pre>
    </div>