<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The approach outlined in the question is brute-force: for each vertex, we do a DFS on all its subtrees, checking if they're all monochromatic. <code>O(N^2)</code></p>

<p>Instead of running dfs on <em>every</em> vertex, we can selectively <em>choose</em> vertices that would conclusively tell us if it was possible to split up the graph as desired. </p>

<p>Consider a path: <code>111112111111</code>. It doesn't feel right to run dfs on each of the vertices. It makes more sense to run it on JUST 2, as it it colored differently than than the vertex it is connected to. </p>

<p>Concretely: If we see a an edge that connects two vertices of different color, run a dfs on both of the them. </p>

<ul>
<li><p>If either of them can split up the graph the way we want, all good - just return any of them.</p></li>
<li><p>If none of them can, we're screwed: if we try to root the graph on any other vertex, one of its subtrees WILL have this pair of different colored vertices. Why is this guaranteed? Because it's a tree.</p></li>
</ul>

<p>Thus, at most, you'll have to make 2  <code>dfs()</code> calls, while scanning through all edges. </p>

<p><code>O(N)</code></p>
    </div>