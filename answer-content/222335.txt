<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>Your code looks great!</p>
</blockquote>

<p>Here, maybe another option that we might exercise would be to possibly do the entire task with an expression, maybe something similar to these:</p>

<pre><code>^(.+?\/).+\/(.+)$
(.+?\/).+\/(.+)
</code></pre>

<p>Our first capturing group is non-greedy, collects our desired <code>path1</code> for both inputs, followed by a greedy <code>.+</code> that'd continue upto the last slash, and our <code>path2</code> and <code>path3</code> are in this group: <code>(.+)</code>, and our desired output can be called using <code>\1\2</code>.</p>

<em>Escaping might be unnecessary, just following based on the <a href="https://regex101.com/r/yZfVoB/1/" rel="nofollow noreferrer">demo</a></em>.

<hr>

<h3>Test</h3>

<pre><code>import java.util.regex.Matcher;
import java.util.regex.Pattern;

final String regex = "^(.+?\\/).+\\/(.+)$";
final String string = "path1/path2/../path3\n"
     + "path1/./path2";
final String subst = "$1$2";

final Pattern pattern = Pattern.compile(regex, Pattern.MULTILINE);
final Matcher matcher = pattern.matcher(string);

final String result = matcher.replaceAll(subst);

System.out.println(result);
</code></pre>

<h3>Demo</h3>

<pre><code>console.log(`path1/path2/../path3
path1/./path2`.replace(/^(.+?\/).+\/(.+)$/gm, `$1$2`));
</code></pre>

<h3>Performance</h3>

<pre><code>const repeat = 1000000;
const start = Date.now();

for (var i = repeat; i &gt;= 0; i--) {
    const regex = '/^(.+?/).+/(.+)$/gm';
    const str = `path1/path2/../path3`;
    const subst = `$1$2`;

    var match = str.replace(regex, subst);
}

const end = Date.now() - start;
console.log("YAAAY! \"" + match + "\" is a match ðŸ’šðŸ’šðŸ’š ");
console.log(end / 1000 + " is the runtime of " + repeat + " times benchmark test. ðŸ˜³ ");
</code></pre>



<h3>RegEx Circuit</h3>

<p><a href="https://jex.im/regulex/#!flags=&amp;re=%5E(a%7Cb)*%3F%24" rel="nofollow noreferrer">jex.im</a> visualizes regular expressions:</p>

<p><a href="https://i.stack.imgur.com/FB7Xx.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/FB7Xx.png" alt="enter image description here"></a></p>
    </div>