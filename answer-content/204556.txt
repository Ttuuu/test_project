<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You claim you've implemented a dynamic programming solution, but I'm afraid your attempt has actually made your code slower.</p>

<p>Your code:</p>

<pre><code>    T = ['inf' for _ in range(len(nums))]
    count = 0
    for i in range(len(nums)):
        for j in range(i,len(nums)):
            if j == i:
                T[i] = nums[i]
                if T[i] == k:
                    count +=1
            else:
                currSum = T[j-1] + nums[j]
                T[j] = currSum
                if currSum == k:
                    count +=1
</code></pre>

<p>For the first change, let's replace the <code>T[i]</code> and <code>nums[i]</code> indices in the <code>j == i</code> case with <code>[j]</code>.  Obviously, the code should be equivalent.</p>

<pre><code>    T = ['inf' for _ in range(len(nums))]
    count = 0
    for i in range(len(nums)):
        for j in range(i,len(nums)):
            if j == i:
                T[j] = nums[j]
                if T[j] == k:
                    count +=1
            else:
                currSum = T[j-1] + nums[j]
                T[j] = currSum
                if currSum == k:
                    count +=1
</code></pre>

<p>Let's add <code>currSum</code> to the <code>if</code> clause as well, and rearrange things to look a
little more like the <code>else:</code> clause.</p>

<pre><code>    T = ['inf' for _ in range(len(nums))]
    count = 0
    for i in range(len(nums)):
        for j in range(i,len(nums)):
            if j == i:
                currSum = nums[j]
                T[j] = currSum 
                if currSum == k:
                    count +=1
            else:
                currSum = T[j-1] + nums[j]
                T[j] = currSum
                if currSum == k:
                    count +=1
</code></pre>

<p>Now we can see we can pull the <code>if currSum == k:</code> test out of the <code>if...else</code> clause.</p>

<pre><code>    T = ['inf' for _ in range(len(nums))]
    count = 0
    for i in range(len(nums)):
        for j in range(i,len(nums)):
            if j == i:
                currSum = nums[j]
                T[j] = currSum 
            else:
                currSum = T[j-1] + nums[j]
                T[j] = currSum
            if currSum == k:
                count += 1
</code></pre>

<p>On the second and subsequent iterations of the inner loop, we add a number to
<code>T[j-1]</code>.  On the previous iteration, you stored <code>currSum</code> into that location.
So, we can replace <code>T[j-1]</code> with <code>currSum</code> from the previous iteration.</p>

<pre><code>    T = ['inf' for _ in range(len(nums))]
    count = 0
    for i in range(len(nums)):
        for j in range(i,len(nums)):
            if j == i:
                currSum = nums[j]
                T[j] = currSum 
            else:
                currSum = currSum + nums[j]
                T[j] = currSum
            if currSum == k:
                count += 1
</code></pre>

<p>At this point, you are storing into <code>T[j]</code> but never loading values from <code>T[]</code>,
so the entire <code>T</code> array can be deleted.</p>

<pre><code>    count = 0
    for i in range(len(nums)):
        for j in range(i,len(nums)):
            if j == i:
                currSum = nums[j]
            else:
                currSum = currSum + nums[j]
            if currSum == k:
                count += 1
</code></pre>

<p>Finally, we can remove the first <code>if</code> statement by realizing it is just priming the accumulator <code>currSum</code> with <code>0 + nums[j]</code> on the first iteration:</p>

<pre><code>    count = 0
    for i in range(len(nums)):
        currSum = 0
        for j in range(i, len(nums)):
            currSum += nums[j]
            if currSum == k:
                count += 1
</code></pre>

<p>At this point, you can see your "dynamic programming" attempt was just busy work,
and didn't actually improve your algorithm at all.  In fact, it actually slowed it
down and increased memory usage for no gain.</p>

<p>I have not changed your <em>algorithm</em>, just improved your <em>implementation</em> of the
algorithm by removing the busy work.  It is was and still is sequentially
adding the numbers in range defined by a double for loop, so it still <span class="math-container">\$O(n^2)\$</span>.</p>

<p>There is an improved <em>algorithm</em> which would use something like your <code>T[]</code> array.
But this is a code-review, not an algorithm review, so I shan't spoil your fun of
trying to find it.</p>
    </div>