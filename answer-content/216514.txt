<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I decided to post a self-answer as suggested by t3chbot because the following code example is just an attempt at following Simon's suggestion;  I haven't fully incorporated the code as I have not managed to resolve my original question. I hope this is okay. </p>

<pre><code>public class OnePairTestDataSource : IEnumerable
    {
        public IEnumerator GetEnumerator()
        {
            yield return new SuperCard[]
            {
                new CardClub(Rank.Ace),
                new CardSpade(Rank.Ace),
                new CardDiamond(Rank.Five),
                new CardHeart(Rank.Jack),
                new CardClub(Rank.Three)
            };

            ...
        }

    [TestCaseSource(typeof(OnePairTestDataSource))]
        public void OnePair_IsOnePair_ReturnsTrue(SuperCard[] pTestHand)
        {
            bool result = PokerHandEvaluator.OnePair(pTestHand);
            Assert.That(result == true);
        }
</code></pre>

<p>Even though I like Simon's suggestion of using parameterized tests, I noticed that I still have to do some repetition in order to initialize an array that I want to test. Is this what you had in mind Simon? If not could you clarify with a code example perhaps?</p>

<hr>

<p>I tried using a parameterized test source as well. Here is another implementation which I like better than the one above and my original one, but still leaves me with the same problem:</p>

<pre><code>static IEnumerable&lt;SuperCard[]&gt; GetTestHand(PokerHand pPokerHand)
{
   if (pPokerHand == PokerHand.OnePair)
   {
     yield return new SuperCard[]
     {
       new CardClub(Rank.Ace),
       new CardSpade(Rank.Ace),
       new CardDiamond(Rank.Five),
       new CardHeart(Rank.Jack),
       new CardClub(Rank.Three)
     };

     ...
   }
}

[TestCaseSource(nameof(GetTestHand), new object[] { PokerHand.OnePair })]
public void OnePair_IsOnePair_ReturnsTrue(SuperCard[] pTestHand)
{
   bool result = PokerHandEvaluator.OnePair(pTestHand);
   Assert.That(result == true);
}
</code></pre>
    </div>