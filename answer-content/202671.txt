<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Not bad overall, but there are a few problems:</p>

<ul>
<li><code>Clear</code> throws an <code>ArgumentException</code>, because <code>Reset</code> events cannot reference old items.</li>
<li><code>this[TKey key].set</code> checks if <code>oldItem</code> isn't <code>null</code>. That only works for reference types. For value types this will only raise <code>Replace</code> events instead of <code>Add</code> events.</li>
<li>I wouldn't expect replacing a value to trigger property change events for <code>Count</code> and <code>Keys</code>.</li>
</ul>

<p>A few more notes:</p>

<ul>
<li>I would use <code>nameof</code> instead of constants where possible. Also, I find that creating constants for things that are only used in one place makes code a little harder to understand without providing any maintenance benefits.</li>
<li>Why does <code>OnPropertyChanged(string propertyName)</code> call <code>OnPropertyChanged()</code> if the given property name is empty or null? It's not used in practice (so it should just be removed) but it does introduce a risk for infinite recursion (during later code modifications).</li>
<li>C# 7.0 added support for 'discards', using the special variable name <code>_</code>, so you can use that instead of <code>trash</code>.</li>
<li>There are a few unused overloads of <code>OnCollectionChanged</code> that can be removed.</li>
<li>The various <code>OnCollectionChanged</code> methods could be given more descriptive names, such as <code>OnCollectionReset</code>, <code>OnValueReplaced</code>, and so on.</li>
</ul>
    </div>