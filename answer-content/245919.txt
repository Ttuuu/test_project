<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I have spent a long time grappling with this problem. I have finally come to the conclusion that it actually is a non-problem!</p>
<p>The thing is that once you have pushed the object into a collection you have lost the compile time binding. Type safety is really a compile time issue rather than a runtime issue.</p>
<p>My understanding is that when you create a generic the compiler creates new methods to call depending on the generic type passed. So if you have a method</p>
<pre><code>public void Foo&lt;T&gt;(){}
</code></pre>
<p>and call it using</p>
<pre><code>Foo&lt;int&gt;();
</code></pre>
<p>then</p>
<pre><code>Foo&lt;string&gt;();
</code></pre>
<p>the compiler creates 2 methods (I have used pseudo code signatures for the sake of accessibility.)</p>
<pre><code>public Foo&lt;int&gt;(){}
public Foo&lt;string&gt;(){}
</code></pre>
<p>If you assign methods to aggregate these to a collection for retrieval you the compiler cannot know what the type of the object that is retrieved from the collection is. So you can no longer have type safety.</p>
<p>The upshot of this is no matter how many hoops you try to jump through to make the generic store undefined types, it cannot be done. I have come to the conclusion it is better to store the type that was saved explicitly, rather than creating an overload that is actually being used as a type member and explicitly store the types separately in a collection for validation at runtime. The resulting code is leaner and can be understood without knowledge of any 'patterns'.</p>
<p>I do not think it is impossible to do, but it would require a significant language change to c# and one or more new object types to facilitate it. I am more than open to correction on any of this.</p>
    </div>