<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1><code>josephus</code> implementation with <code>std::list</code></h1>

<ul>
<li><p>The list initialization can be simplified to</p>

<pre><code>std::list&lt;int&gt; students(num_students); // No braces here! (Would use the constructor taking a std::initializer_list)
std::iota(std::begin(students), std::end(students), 1);
</code></pre></li>
<li><p>Similarly, finding the starting iterator can be simplified to:</p>

<pre><code>const auto start_offset = (start_index - 1) % num_students;
auto it = std::next(std::begin(students), start_offset);
</code></pre></li>
<li><p><code>while(countdown--)</code> is conceptually the same as <code>while(students.size() &gt; 1)</code>, which I personally would prefer because it highlights the intention behind the loop ("run until one element is left").</p>

<blockquote>
  <p>There is no real performance loss: Since C++11, <code>std::list::size</code> is required to run in constant time.</p>
</blockquote></li>
<li><p>The loop body of the <code>while</code> loop first finds the element to be removed, removes it and then backtracks to the element before it.</p>

<p>This could be simplified to</p>

<ol>
<li>Find the element before the one to be removed.</li>
<li>Remove the next element.</li>
</ol></li>
</ul>

<blockquote>
  <p>So a cleaned up version could look like this:</p>

<pre><code>int josephus(int num_students, int start_index, int steps) {
    std::list&lt;int&gt; students(num_students);
    std::iota(std::begin(students), std::end(students), 1);

    const auto start_offset = (start_index - 1) % num_students;
    auto it = std::next(std::begin(students), start_offset);

    while (students.size() &gt; 1u)
    {
        for(auto i = 1; i &lt; steps; ++i)
        {
            ++it;
            if (it == std::end(students)) it = std::begin(students);
        }

        const auto it_next = std::next(it) == std::end(students) ? std::begin(students) : std::next(it);
        students.erase(it_next);
    }

    return *it;
}
</code></pre>
</blockquote>

<h1>recursive <code>josephus</code> implementation</h1>

<p>Seems fine. Just a general note:</p>

<ul>
<li>Beware of callstack overflows! It's unlikely to happen for the given input constraints, but it might for larger values, as there doesn't seem to be a way for the compiler to use Tail Call Optimization.</li>
</ul>

<h1>Questions</h1>

<p>Note: In the following segments, \$n\$ refers to the number of students and \$k\$ to the stride between selected students.</p>

<blockquote>
  <p>I chose to use a linked list for several reasons. First I wanted the fast random deletion times. I considered a vector because calculating the index may be faster than traversal but I also got TLE with that.</p>
</blockquote>

<p>A good (non-naive) implementation using <code>std::vector</code> should have the same runtime complexity as the <code>std::list</code> one, which is \$\mathcal{O}(k * n)\$. Yes, removal of a single random value is \$\mathcal{O}(n)\$ - but you might be able to remove up to \$\lfloor n / k\rfloor\$ values in one operation at no extra cost.</p>

<blockquote>
  <p>The biggest issues I can think of are the insertion and the iteration.</p>
</blockquote>

<p>Insertion is just \$\mathcal{O}(n)\$, whereas all iteration steps in the <code>while</code> loop have runtime complexity \$\mathcal{O}(k * n)\$ - so iteration is more of a culprit here.</p>

<blockquote>
  <p>Also, am I getting cache misses with the use of Lists?</p>
</blockquote>

<p>Yes, you are, and likely for every iteration step.</p>

<blockquote>
  <p>Inserting continuously doesn't guarantee contiguous memory if I understand correctly. Is there any way around that?</p>
</blockquote>

<p>Using a custom allocator can provide contiguous memory for the nodes. However, iteration is still data dependent (the processor basically has to read the <code>next</code> address before it can continue), so there will be some cost for that. Some prediction or speculative execution might speed this up at the beginning, but after a while those won't work at the same level since the list gets more and more fragmented due to all the deletions.</p>

<blockquote>
  <p>I tried to find a mathematical solution</p>
</blockquote>

<p>This seems to be the way to go. But: The presented recursive version still has runtime complexity \$\mathcal{O}(n)\$. But it's a good start!</p>

<p>The next step to get better runtime complexity is to remove multiple values in one operation: When removing the value at position \$i\$, we can remove values \$i + \text{step}\$, \$i + 2 * \text{step}\$, etc. in the same operation.</p>

<p>However, this only works if \$k &lt; n\$ (obviously). This means we have to cover 3 cases:</p>

<ol>
<li>\$n = 1\$: Just return the end of recursion value.</li>
<li>\$n \leq k\$: Similar to the current implementation</li>
<li>\$n &gt; k\$: Some special handling to remove up to \$\lfloor n / k\rfloor\$ values at once.</li>
</ol>

<p>This is basically what the \$\mathcal{O}(k \log n)\$ solution on wikipedia does.</p>
    </div>