<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Code organisation</strong></p>

<p>At this moment, the code is there with no context. In order to make it easier to unerstand, reuse and test, you could try to define in a a function on its own.</p>

<p>It could for instance:</p>

<ul>
<li>take <code>data</code> as a parameter</li>
<li>take <code>fixed_value</code> as a parameter (with a default of 255 ?)</li>
</ul>

<p><strong>In-place changes</strong></p>

<p>When trying to explain or test the function, things are make slighly harder by the fact that the input is modified. In your case, it may be just as easy to return a new list of values.</p>

<p>Here is a <a href="https://twitter.com/raymondh/status/1055508781994594305" rel="nofollow noreferrer">tweet from Raymond Hettinger</a> (Python core developer and trainer):</p>

<blockquote>
  <p>Today's super-easy #python student question.</p>
  
  <p>Q. What are the best practices for modifying a list while looping over it?</p>
  
  <p>A. Don't. Seriously, just make a new list and avoid hard-to-read code with hard-to-find bugs.</p>
</blockquote>

<p>At this stage, we have something like:</p>

<pre><code>new_data = []
for i, base_tuple in enumerate(data):
    index_max = base_tuple.index(max(base_tuple))
    new_tuple = tuple(fixed_value*(i==index_max) for i in range(3))
    new_data.append(new_tuple)
return new_data
</code></pre>

<p>But the call to <code>enumerate</code> is not required anymore and we can write:</p>

<pre><code>new_data = []
for base_tuple in data:
    index_max = base_tuple.index(max(base_tuple))
    new_tuple = tuple(fixed_value*(i==index_max) for i in range(3))
    new_data.append(new_tuple)
return new_data
</code></pre>

<p><strong>More functions</strong></p>

<p>We could extract out the tuple computation in a function on its own.
We would have something like:</p>

<pre><code>def get_new_tuple(base_tuple, fixed_value):
    index_max = base_tuple.index(max(base_tuple))
    return tuple(fixed_value*(i==index_max) for i in range(3))

def get_new_val(data, fixed_value = 255):
    # data is the list of tuples
    new_data = []
    for base_tuple in data:
        new_data.append(get_new_tuple(base_tuple, fixed_value))
    return new_data
</code></pre>

<p>(Documentation and function names should be improved).</p>

<p>Now, this is a good occasion to use list comprehension in <code>get_new_val</code>.</p>

<p>At this stage, renaming the function, the parameter and adding a simple test, we have:</p>

<pre><code>def get_new_tuple(base_tuple, fixed_value):
    index_max = base_tuple.index(max(base_tuple))
    return tuple(fixed_value*(i==index_max) for i in range(3))

def get_new_tuples(tuples, fixed_value = 255):
    return [get_new_tuple(tup, fixed_value) for tup in tuples]

def test_get_new_tuples():
    # This could/should be written with a proper unit-test framework
    data = [(12, 55, 27), (260, 55, 27), (12, 55, 255)]
    output = get_new_tuples(data)
    assert output == [(0, 255, 0), (255, 0, 0), (0, 0, 255)]
</code></pre>

<p><strong>Improving <code>get_new_tuple</code></strong></p>

<p>There is the <a href="https://en.wikipedia.org/wiki/Magic_number_(programming)" rel="nofollow noreferrer">magic number</a> 3. It would make sense to be more generic and accept tuples of any length.</p>

<p>For instance:</p>

<pre><code>def get_new_tuple(base_tuple, fixed_value):
    index_max = base_tuple.index(max(base_tuple))
    return tuple(fixed_value*(i==index_max) for i in range(len(base_tuple)))
</code></pre>

<p>And we can test it with more unit tests:</p>

<pre><code>def test_get_new_tuple():
    tup = (12, 55, 27)
    output = get_new_tuple(tup, 255)
    assert output == (0, 255, 0)
    tup = (12, 55, 27, 42)
    output = get_new_tuple(tup, 255)
    assert output == (0, 255, 0, 0)
</code></pre>

<p>Also, the pattern <code>range(len(foo))</code> usually suggests we could do things in a better way. For instance, we could use <code>enumerate</code>:</p>

<pre><code>return tuple(fixed_value*(i==index_max) for i, _ in enumerate(base_tuple))
</code></pre>

<p><strong>Edge case</strong></p>

<p>Another question we could ask ourselves is about the behavior of the function where the max value appears more than once. It probably deserves to be documented and properly tested. Based on what we want, we may have to change the implementation.</p>

<p>Another edge case that could be tested/documented is how the empty tuple is handled.</p>
    </div>