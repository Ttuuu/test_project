<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>WTF</strong></p>

<p>I'm imagining someone must have read about potential quirks coming from the Delta Quadrant of the C# universe and decided a top to bottom rewrite of equality behavior is needed, just to be safe. Yeah, those guys on the C# design and compiler team got nuttin' on me!</p>

<p>Re-implementing inherited behavior in an override is what is going on here. This is antithetical, contrary, to the fundamental point of OO inheritance.</p>

<p>Overriding <code>==</code> does give nice, concise expression but essentially everything else I see is WTF.</p>

<p>All that is required is a straight-forward <code>Equals</code> implementation so your custom class, collections, and comparisons in general, work as intended. The only gotcha I've ever covered (consciously on purpose) was when I had an <code>IEqualityComparer</code> and made sure to override <code>Equals</code> to also call it. </p>

<p><strong>The question makes no sense</strong></p>

<p>All c# objects have a base and inherit <code>Equals</code>, and always, ultimately, from <code>Object</code>. Bottom line, the <code>Equals</code> implementation must differentiate objects such that your collections, hash sets, etc. work as expected.</p>

<p><strong>The implementation makes no sense</strong></p>

<p>The default, inherited, <code>Object.Equals</code> implementation is <code>ReferenceEquals</code>.</p>

<p>A key point of inheritance is that base behavior does not need to be, should not be, duplicated in an override.</p>

<p><code>ReferenceEquals(.., null)</code> - I'm sure there's some obscure point to this but in all the thousands of <code>Equals</code> overrides I've seen and written, this was not there.  Just check for <code>if (other == null) return false;</code>.  And the fact that <code>null</code> is not an object per-se makes <code>ReferenceEquals</code> look odd and quirky. NOTE: I've seen buggy <code>IComparer</code> / <code>CompareTo</code> where <code>null</code> caused an infinite loop but the problem there was coder incompetence and poor testing, not lack of <code>ReferenceEquals</code> in that class' <code>Equals</code> override implementation.</p>
    </div>