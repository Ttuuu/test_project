<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Accuracy of floating point calculations</h1>

<p>Indeed, when doing a large number of mathematical operations, you have to be careful to ensure proper accuracy of the results. Luckily, a lot of operations are mostly fine. The main thing that causes loss of precision is when adding together numbers that differ greatly in size. For example, adding <code>1</code> and <code>1e-100</code> will just result in <code>1</code>. However, multiplying them is perfectly fine, and will result in the expected <code>1e-100</code>.</p>

<p>The most accurate way to do repeated summing (which is what numerical integration is all about) is to calculate the values of all the individual points, put them into an array, sort that array, and then sum adjacent pairs of array elements into another array that is half the size, and repeat that until you have one value left. The only issue with this of course is that it can use a lot of memory. However, since you already have arrays for nodes and weights, I think it could be an option here.</p>

<p>Using a higher precision and converting it back may work in some cases. However, if the difference in magnitude between the smallest and the largest value that you are summing together is still bigger than what the higher precision variables can represent, you are out of luck.</p>

<p>I would try to implement the sorting + repeated summing approach, and check the results you get with that against naive integration, and against integration with higher precision variables, and see whether any of this matters. It also wouldn't hurt to do some performance benchmarks to see the cost of each of these approaches.</p>

<h1>Avoiding code duplication</h1>

<p>Indeed there is a lot of code duplication between <code>oora_fourier_sin_detail</code> and <code>oora_fourier_cos_detail</code>. You could try to create a generic class that takes a (template) parameter that chooses between the sine and cosine variant, and then check that parameter to specialize some parts of the code, similar to how you used <code>if (std::is_same&lt;Real, ...&gt;::value)</code>.</p>

<h1>Comments</h1>

<p>The references to papers and equations are very good to have. However, most of the other comments are unfortunately bad in my opinion.</p>

<p>First of all, it would help to understand what the code is doing without having to find the equations myself. Especially for someone not having a university level maths education, it can be hard to track down references when they are not used to how math papers are published. So instead of just saying "Ooura and Mori, equation 3.3", describe what it actually is that <code>oora_eta()</code> is calculating.</p>

<p>In <code>oora_sin_node_and_weight()</code>, why is <code>n == 0</code> a special case?</p>

<p>A comment like "I have verified that this is not a signifant source of inaccuracy" is a bit weird to see in code. Who is "I"? And how insignificant is it? And why would this line of code not be significant to begin with? It just adds more questions. If the way you calculate <code>rhi_prime</code> is an approximation instead of a more exact formula, then mention that this is an approximation and why it is valid to use here. If it is the exact formula, then I would not add any comment at all here. The fact that floating point operations are not perfect should be understood by all programmers, and the formula in that line doesn't look like there is any reason to worry about its accuracy.</p>

<p>The comments in <code>oora_sin_node_and_weight()</code> and <code>oora_cos_node_and_weight()</code> are quite different, even though the functions are almost the same.</p>

<p>A lot of comments say things like "we could", "it's not clear", "this is a huge overestimate". That doesn't inspire a lot of confidence in this code. Why are these comments there? If it's to remind you of something you have to fix later, mark it with "TODO", so it's clear that this is something for the future. It also makes it easy to grep for. An example:</p>

<pre><code>// TODO: the size of the vectors is bigger than necessary, use a better heuristic
</code></pre>

<p>It's hard to write comments, especially for code you've just written. I would wait a week or two and then reread the code. Try to imagine a colleague or a student having to read your code.</p>

<h1>Use <code>unique_ptr&lt;&gt;</code> instead of <code>shared_ptr&lt;&gt;</code></h1>

<p>Your <code>impl_</code> variable is never shared with anything else, so there is no reason for it to be a shared pointer. Declare it as <code>std::unique&lt;...&gt; impl_</code> instead, and use <code>std::make_unique&lt;&gt;()</code> in the constructor.</p>

<h1>Use a proper two-dimensional array class</h1>

<p>Nesting vectors is not an efficient way of storing multi-dimensional arrays. Why not use <code>boost::multi_array</code> instead?</p>

<h1>Why use mutexes and atomics if there are no threads?</h1>

<p>You have a mutex to guard node weight vectors, and an atomic variable for the starting level. However, I see no mention of threads or asynchronous execution in your code, unless I am missing something. So it seems to me these things are useless, and should be removed from the code.</p>

<h1>Avoid useless <code>using</code> statements</h1>

<p>I see a lot of <code>using</code> statements in the code in functions that don't even use the functions or constants mentioned in these statement. For example, <code>using std::abs</code> in <code>oora_sin_node_and_weight()</code> is not used at all.</p>

<p>In many cases, you only use these things once anyway, so it just increases the number of lines of code, for little gain in readability. I recommend that you just avoid using <code>using</code> altogether, and just write out all namespaces explicitly.</p>

<h1>Use consistent whitespace</h1>

<p>Sometimes you use spaces around operators, sometimes not. Be consistent in how you format your code. I suggest you use spaces around all binary operator. Conversely, don't use a space after a '(' and before a ')'.</p>

<p>You don't have to fix all this by hand, I recommend you use a code formatting tool to do this for you. Check the Boost style guide for the recommended coding style.</p>

<h1>Use <code>std::function&lt;&gt;</code> to pass function pointers</h1>

<p>I see you are using <code>template&lt;class F&gt;</code> to allow passing function pointers as arguments. The problem is that <code>F</code> is allowed to be anything, even things that are not functions, and this will cause hard to read compiler errors. Instead, you can use <code>std::function&lt;&gt;</code> to specify that a function takes another function as an argument. For example:</p>

<pre><code>Real estimate_integral(std::function&lt;Real(Real)&gt; f, Real omega, size_t i) {
    ...
    I0 += f(b_nodes[j] * inv_omega) * b_weights[j];
    ...
}
</code></pre>
    </div>