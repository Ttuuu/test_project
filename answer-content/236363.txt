<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I don't know anything about Factorio which your question also seems to be about, so I can't say anything about "missing important IdeaTypes", for instance.</p>

<ol>
<li><p>Since <code>MAX_IDEAS</code> is a compile-time constant, you might as well mark it as such by <code>constexpr</code> instead.</p></li>
<li><p>Perhaps only nitpicking, but it seems clear that any type is... a type. So I think <code>Idea</code> is a better type name than <code>IdeaType</code>. I mean, it's <code>std::vector&lt;T&gt;</code> and not <code>std::vector_type&lt;T&gt;</code> for comparison.</p></li>
<li><p>For <code>Thinker</code>: avoid C-style arrays. If you really do know 255 characters are sufficient, consider using e.g., <code>std::array</code> instead. You'll be able to enforce range checking much more easily, to name just one benefit. If you chose 255 just because it feels large enough, then use a dynamic data structure like a string or a vector.</p></li>
<li><p>I don't see the reason <code>ideas</code> has to be a public array. Just rather make it a constant static array which is "suitably global", as per your needs.</p></li>
<li><p>When you want to minimize the risk of leaking memory or doing something unintended, don't use pointers. You don't seem to need any dynamic memory management (for e.g., polymorphism), so just don't. It's <em>much</em> easier to reason about non-pointer types and references.</p></li>
<li><p>In particular, <code>mutate</code> does not need to return a dynamically allocated object. Just return by value, modern C++ does guarantee copy elision and you don't take any hit by doing so. Also, the caller don't have to worry about managing the object lifetime (which you possibly might have neglected to do in your full code).</p></li>
<li><p>The variable name <code>i</code> is quite surprising. Your instinct tells you it's probably a loop variable, but it's actually of type <code>IdeaType</code>. So I'd rename this to e.g., <code>idea</code>.</p></li>
<li><p>The switch-case is quite a beast to parse and to understand. Here's a few pointers (no pun intended) for how you can make it more readable: note that <code>FLIP_MEM1_MEM2</code> is <code>std::(iter_)swap</code>; rely on standard implementations. All of <code>SET_MEM1_ZERO</code>, ..., <code>DEC_MEM1_BY_10</code> increment a location by a constant. So we could use an (unordered) map to store these values, where the key is <code>IdeaType</code>s. So if you are in one of these cases, reach into the map and increment by the corresponding value.</p></li>
<li><p>Further, for the latter parts (dealing with movement it seems), you could consider delegating this work to helper functions to aid readability.</p></li>
<li><p>Another example of a pointer you likely don't need is <code>Cell* c</code>. You don't show what this type is, but make <code>const Cell&amp; c = p.getCell(posX, posY);</code> if you can, and just make is <code>Cell&amp; c</code> if you can't. I'm also assuming here you pass by (constant) reference, and <em>not</em> by pointer (don't do that, unless you really know you want to).</p></li>
<li><p>I think the <code>default</code> branch of your switch case shouldn't just print "PROBLEM!!!!", but rather fail hard. So you probably want to use an <code>assert</code> as this case (I assume) means the internal program logic is broken, i.e., we should never get here no matter what.</p></li>
<li><p>Try to think about what constructors <code>Thinker</code> should have. Should it be the case that you pass it a <code>Playground</code>, <code>maxExecs</code>, and an <code>Objective</code> and it initializes suitably? Or should you be able to give the constructor a seed so that the candidate solution is built randomly? Think about the semantics here, the constructor helps you make your code more efficient and more readable; it also self-documents what a <code>Thinker</code> is.</p></li>
<li><p>For <code>randomize</code>, read about how to use randomness more appropriately with the use of <code>&lt;random&gt;</code>. These facilities exist because of shortcomings of just using <code>rand()</code> and such. So you could do (untested!) something like:</p></li>
</ol>

<pre><code>void Thinker::randomize(int globalSeed) {
    std::random_device rnd_device;
    std::mt19937 engine {rnd_device()};
    std::uniform_int_distribution&lt;int&gt; dist{0, MAX_IDEAS};
    // It's so nice that ideas is an std::array so that we can use begin() and end()
    std::generate(ideas.begin(), ideas.end(), [&amp;]() { return static_cast&lt;IdeaType&gt;(dist(engine)); });
    // Otherwise, we'd have to something more error prone like std::generate(ideas, ideas + 255, ...)
</code></pre>

<ol start="14">
<li><p>You can apply the same ideas for <code>mutate</code>. In short, don't return a pointer &amp; use the modern random facilities. This also gives you the added benefit of <em>more control in an easy way</em>: what if you don't want a uniform distribution? You want to weight it in some exotic way? Much easier with <code>&lt;random&gt;</code> than doing it by hand!</p></li>
<li><p>In general, it would help if you explained how the relevant concepts relate to the expected components of a genetic algorithm. For example, it seems that <code>Thinker</code> is a chromosome (i.e., a candidate solution), but it would be nice to see your fitness function as well, and so on. This helps in communicating ideas and in the (self-)documentation of your code.</p></li>
<li><p>If you don't have a fitness function, your search essentially only progresses by mutation likely making it very inefficient as it explores the search space in random manner without any guidance.</p></li>
</ol>
    </div>