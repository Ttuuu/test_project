<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I tried writing <code>divisorSum</code> in terms of <code>ZipList</code>, but it kept shrinking until that wasn't needed anymore. Which is half the point of such rewrites!</p>

<pre><code>divisorSum :: Integer -&gt; Integer
divisorSum n
  | n &lt;= 0 = 0
  | otherwise = sum $ takeWhile (/= 0) $ zipWith (*) additiveStream $
      map (\x -&gt; divisorSum (n - x) + if x == n then 1 else 0) pentagonals
</code></pre>

<p>The call tree of with what arguments <code>divisorSum</code> calls itself is going to overlap with itself. In such situations, you can trade off space for time by keeping around a data structure that remembers the result for each possible argument after it's been calculated once. The <code>memoize</code> library captures this pattern:</p>

<pre><code>divisorSum :: Integer -&gt; Integer
divisorSum = memoFix $ \recurse n -&gt; if n &lt;= 0 then 0 else
  sum $ takeWhile (/= 0) $ zipWith (*) (cycle [1, 1, -1, -1]) $
    map (\x -&gt; recurse (n - x) + if x == n then 1 else 0) pentagonals
</code></pre>
    </div>