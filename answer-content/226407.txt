<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Interfaces, Contracts, APIs</h2>

<p>Your code do not follow the interface specified. 
Contracts/APIs may not be well-designed, and indeed usually are not; however they also usually are not modifiable. Therefore it is good practice put them in separate files such that you need not consult docs to see what you can change and what you cannot:</p>

<pre><code>public interface Accout {
    void deposit(BigDecimal amount);
    void withdraw(BigDecimal amount);
    void transfer(Account destination, amount);
    String showInfo();
}
</code></pre>

<p>If you want to share behaviors between subtypes then you may put those in a <code>BaseAccount</code> abstract class.</p>

<h2>Data representation</h2>

<p>Primitive types can be grouped in three: numbers, strings, and time.</p>

<p>If you are not going to do arithmetic on it, it is not a number. Even if it is called a number. You may need to use numbers as keys IRL for efficiency reasons, this is not it.:</p>

<pre><code>protected int ssn;
protected long accountNum;
protected int accountPin;
</code></pre>

<p>How you coud you have known this, without experience? Requirements like "should start with ... , must be ... long" these are operations on strings so they should be represented as string.</p>

<p>Never use floating points for money or rates(tax, interest), floating point arithmetic is inexact, order-dependent, not reproducible :</p>

<pre><code>protected double balance;
protected double rate;
</code></pre>

<p>Money and rates can be represented as <code>BigDecimal</code>s.</p>

<p>Standard representation of date is <code>java.time.LocalDate</code>. Because no requirements exist for this field, it is best to delete it. If you had requirements like "3 months after account creation ...", a string representation is a ton of misery to deal with:</p>

<pre><code>protected String dateOfCreation;
</code></pre>
    </div>