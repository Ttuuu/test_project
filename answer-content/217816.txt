<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>Overall, LGTM.</p></li>
<li><p>A protection against negative indices being passed to <code>parent</code> doesn't worth the effort. <code>parent</code> is a private method, so you are in control of the indices at all times. A strong indication that the protection is not needed is the fact that <code>insert</code> doesn't bother to test the return value for validity.</p></li>
<li><p>Along the same line, <code>left()</code> and <code>right()</code> returning <code>-1</code> doesn't look like a good idea. Effectively, you test the same condition twice: <code>((2 * i) + 1) &lt; heap.size() - 1</code> in <code>left</code>, and <code>l != -1</code> in <code>heapify</code>. </p></li>
<li><p>Notice that anytime <code>right</code> is valid, <code>left</code> is also valid. That allows a certain optimization (see below).</p></li>
<li><p>C++ is very good in recognizing tail recursion and optimizing it out. I strongly recommend to do it explicitly anyway.</p></li>
<li><p>Combining the three bullets above, consider</p>

<pre><code>void heapify(int i)
{
    while ((r = right(i)) &lt; heap.size()) {
        follow your swapping logic
    }

    if ((l = left(i)) &lt; heap_size()) { // No need to loop - it may only happen once!
        if (heap[l] &lt; heap[i]) {
            std::swap(heap[i], heap[l]);
        }
    }
}
</code></pre></li>
<li><p><code>MinHeap::heapify</code> is a misnomer, and somewhat confusing. Usually <code>heapify</code> refers to the process of turning an array into a heap. Your method is normally called <code>sift_down</code>.</p></li>
<li><p>Too many comments to my taste.</p></li>
</ul>
    </div>