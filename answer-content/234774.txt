<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>the namespace Models is fine, but methods and exceptions should not be in the namespaces. 
Exceptions, should be handled for each class. So, if you moved all exceptions under one namespace <code>Exceptions</code>, this means <code>Exceptions</code> namespace will be referenced in all classes (entire project). So, it'll be better to avoid doing that. For the methods namespace, not sure what do you intent to use it for, but surely, rename it to something more specific will be better, for instance, if you meant <code>Methods</code> as extensions or helper methods, you could rename it to <code>Util</code> or <code>Utility</code> or anything meaningful.
For the beginning on the project, don't think too much about it as you'll have a better idea on what namespace should be there. </p>

<p>For the abstract class, i don't have a full understand on the actual usage of it other than the provided logic, but converting it to <code>List&lt;IEnumerable&lt;decimal&gt;&gt;</code> seems the right one for you. It will give you more advantages than the current 2D array. Firstly, it'll eliminate the need of the maintaining the capacity. Secondly, it will short things up and let's you focus on your actual logic on managing the data. So, if you convert it to list, and add the basic functionality to your abstract it should give you something like this : </p>

<pre><code>public abstract class Triangle : IEnumerable&lt;IEnumerable&lt;decimal&gt;&gt;
{
    private readonly List&lt;IEnumerable&lt;decimal&gt;&gt; claims = new List&lt;IEnumerable&lt;decimal&gt;&gt;();

    protected Triangle()
    {
        // since you're using List&lt;IEnumerable&lt;decimal&gt;&gt;, there is no need to maintain the capacity, unless if you need a fixed capacity
    }

    public IEnumerable&lt;decimal&gt; this[int index]
    {
        get =&gt; claims[index];
        set =&gt; claims[index] = value;
    }

    public int Count =&gt; claims.Count;


    public void Add(IEnumerable&lt;decimal&gt; values)
    {
        claims.Add(values);
    }

    public void Clear()
    {
        claims.Clear();
    }

    public bool Contains(IEnumerable&lt;decimal&gt; values)
    {
        return claims.Contains(values);
    }

    public void Insert(int index, IEnumerable&lt;decimal&gt; values)
    {
        claims.Insert(index, values);
    }

    public void Remove(int index)
    {
        claims.RemoveAt(index);
    }

    public int RemoveAll(Predicate&lt;IEnumerable&lt;decimal&gt;&gt; match)
    {
        return claims.RemoveAll(match);
    }

    public IEnumerator&lt;IEnumerable&lt;decimal&gt;&gt; GetEnumerator()
    {
        return claims.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return claims.GetEnumerator();
    }
}
</code></pre>

<p>I've chosen to implement <code>IEnumerable&lt;IEnumerable&lt;decimal&gt;&gt;</code> interface, to empower the class with the use of <code>foreach</code> loop and <code>Linq</code> extensions. </p>

<p>However, you shouldn't remove your interface as implementing an interface is never a bad habit, actually, it's recommend to use interfaces on all classes that might be reused with other classes (concrete or abstract). For instance, if other developers wants to implement a class that would inherit <code>Triangle</code>, they either its interface, abstract, or concrete class. Sometime, the class needs to inherit multiple classes, and there is no straight forward way to inherit them all unless we use their interfaces. So, always keep an interface for your classes, and implement it on your classes as well. You should also keep the interface with the minimum required functionality. You can implement other interfaces in your class or implement them on your interface and then implement your interface on your class. Both options are valid options. </p>

<p>For the naming convention, sometimes, you'll need to wrap functions under new naming convention to make it understandable and clearer for other developers as well. So, there is nothing wrong using <code>Get</code> or <code>Set</code> prefixes as naming convention, and it makes things more readable for most of the time, but sometimes the implementation would forces you to use a different naming convention based on the business logic requirement, in this case, you might want to keep the required naming public, and it it  could have a callback to private setter and getter methods .. for instance, you can do something like this : </p>

<pre><code>public abstract class Triangle
{
    public IEnumerable&lt;decimal&gt; this[int index] 
    {
        get =&gt; GetColumn(index);
        set =&gt; SetColumn(value, index);
    }

    public void Add(IEnumerable&lt;decimal&gt; values, int index)
    {
        SetColumn(IEnumerable&lt;decimal&gt; values, int index);
    }

    protected IEnumerable&lt;decimal&gt; GetColumn(int index) { ... }

    protected void SetColumn(IEnumerable&lt;decimal&gt; values, int index) { ... }
}
</code></pre>

<p>then it can be used like : </p>

<pre><code>var test = new Triangle(); 
var column = new List&lt;decimal&gt; { 4.7m, 68.36m, 889.14m };

test[0] = column;
// or 
test.Add(column);
</code></pre>

<p>For the placement of the methods. If you see there is a method is off the class functionality (like CalculateReserves()), you can move it to another class that is linked to the current one (for instance, you can create a calculation class, as an extension class  that would have all the calculations methods, and you can sort them out. (for instance, <code>test.Calculate().Cashflows().Sum()</code>). this API would be applied on all Triangle, Square, ..etc. So, yes it's possible and also doable. </p>

<blockquote>
  <p>So, is it sensible to store the calculated values inside a private
  class array instead of recalculating it?</p>
</blockquote>

<p>Yes, and it's also possible to have a private property where it holds the total sum of the added values, so in your <code>Add()</code> method, you can add every new value in the private property <code>_total += value;</code> and retrieve it where you need it. This method would speed things up for the calculations part. If you have mutliple totals (say cashflow, expenses, ..etc. to sum, you might store them in a List or Array or A Dictionary. If these are few sums (say you have only 5 different types of sums to store) then use 5 variables (one for each) to avoid using extra collections. </p>

<p>just use your good judgement on your code.</p>
    </div>