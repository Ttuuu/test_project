<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Fall through switch cases</h2>
<ul>
<li><p>Identical case blocks. You can have many clauses fall through to the same block.  <code>/* Example A * /</code></p>
</li>
<li><p>Share code in similar cases. You can have two blocks with the first falling through to the next via <code>goto case</code> , thus share some of the code. <code>/* Example B * /</code></p>
</li>
<li><p>The default clause means the code is 0, I dont know if that is in <code>Constants</code> but it feels like it might fall through to the default in the second switch where you show an error.  <code>/* Example C */</code></p>
</li>
</ul>
<p>eg Note the two possible exceptions</p>
<pre><code>int responesCode = 0;
switch (buffer[1]) {
    case Constants.HANDSHAKE_COMMAND_CODE:
        responesCode = buffer[3];         // could be IndexOutOfRangeException
        _counter++;
        break;
    case Constants.ERASE_COMMAND_CODE:     /* Example A */
    case Constants.NO_OF_PACKET_COMMAND_CODE:
    case Constants.WRITE_COMMAND_CODE:
    case Constants.DATA_COMMAND_CODE:
    case Constants.VERIFY_COMMAND_CODE:
    case Constants.CHECKSUM_COMMAND_CODE:
        responesCode = buffer[2];       // could be IndexOutOfRangeException
        _counter++;
        break;
    case Constants.READ_VERSION_COMMAND_CODE: 
        this.DisplayCurrentVersion(buffer);
        _counter++;
        goto case Constants.CONNECTION_ALIVE;  /* Example B */
    case Constants.CONNECTION_ALIVE:  /* Example B */
        responesCode = buffer[1];       
        break;
    default:
        MessageBox.Show("Unknown response!"); /* Example C */
        return;
}
</code></pre>
<hr>
<h2>Code complexity.</h2>
<p>Try to keep complexity down where possible.</p>
<p>Examples</p>
<hr>
<ol>
<li>There is no need to cast to a <code>double</code> then call <code>Math.Round</code> (BTW rounding will show 100% before it is 100%) in the percentage calculation (Assuming <code>pbProcess.value</code> is an <code>int</code>) The value is floored in integer calculations so you only get 100% when it is 100%</li>
</ol>
<p>You have something like</p>
<pre><code>double percentage = Math.Round(((double)_packetCounter / _noOfPackets) * 100);
lblStatus.Content = "Writing data... " + percentage + "%";
pbProcess.value = percentage;
</code></pre>
<p>Can be</p>
<pre><code>pbProcess.value = _packetCounter * 100 / _noOfPackets;  // Could be div by zero????
lblStatus.Content = "Writing data... " + pbProcess.value + "%";
</code></pre>
<hr>
<ol start="2">
<li>In the second switch in the first clause the last <code>else</code> has a redundant <code>if</code> statement. The conditions have already been meet.</li>
</ol>
<p>eg.</p>
<pre><code>} else if (_counter != 1 || _counter != 4) {

// should be just the else
} else {
</code></pre>
<hr>
<h2>Poor error handling</h2>
<p>You have two points that look like errors where you invoke the <code>messageBox</code> for <code>"Unknown response!"</code>, and <code>"Invalid response!"</code> and just continue execution.</p>
<p>You also have generic catch. It looks like a cover all solution and that you are unsure as to the range of possible errors. You are using the catch to cover poor quality code.</p>
    </div>