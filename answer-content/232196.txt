<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I have some suggestions for your code, for me it's a good point you have separated graphic part from logic encapsulating game logic in two classes <code>Cell</code> and <code>Area</code>. Your class <code>Cell</code> at the moment just contains an integer value, so instead of declaring a matrix <code>Area</code> of <code>Cell</code> objects you could use a matrix of ints and redefine class <code>Area</code> like the code below:</p>

<pre><code>public class Area {
    private int[][] area;
    private final int valueOfAreaToWin;
    private final int n;

    public Area(int n, int valueOfCellToWin) {
        this.area = new int[n][n];
        this.valueOfAreaToWin = valueOfCellToWin;
        this.n = n;
    }
}
</code></pre>

<p>If you can try to do just initialization of fields in your class constructor and nothing else.
The use of a matrix of ints simplifies all the methods of your class because you modify a matrix of ints instead of calling methods of <code>Cell</code> class like the code below:</p>

<pre><code>private void fillAreaWithZeros() {
    for (int[] row : area) {
        Arrays.fill(row, 0);
    }
}

public int getAmountOfZeros() {
    int amount = 0;
    for (int i = 0; i &lt; n; ++i) {
        for (int j = 0; j &lt; n; ++j) {
            if (area[i][j] == 0) {
                ++amount;
            }
        }
    }
    return amount;
}

public boolean isWin() {
    for (int i = 0; i &lt; n; ++i) {
        for (int j = 0; j &lt; n; ++j) {
            if (area[i][j] == 0) { return false; }
        }
    }
    return true;
}
</code></pre>

<p>When you iterate over matrix elements, try to use <em>n</em>, <em>m</em> for number of rows and columns, <em>i</em> and <em>j</em> for indexes because they are expected to be usually found when you work with matrices.
In your method <code>addNewCell</code> I found the following code:</p>

<blockquote>
<pre><code>out:
for(int y = 0; y &lt; area.length; y++) {
    for(int x = 0; x &lt; area[0].length; x++) {
         if(area[y][x].isEmpty()) {
            counterOfEmptyCells++;
            if(counterOfEmptyCells == numOfCellToFill) {
                 area[y][x].setBeginNumber();
                 break out;
             }
          }
     }
}
</code></pre>
</blockquote>

<p>It is legitime to use a <em>label</em> but this complicates readibility of your code, to obtain the same behaviour you can create a <code>boolean</code> condition and check it inside your outer loop like below:</p>

<pre><code>boolean cond = true;
for(int i = 0; i &lt; n &amp;&amp; cond; ++i) {
    for(int j = 0; j &lt; n; ++j) {
        if(area[i][j] == 0) {
            counterOfEmptyCells++;
            if(counterOfEmptyCells == numOfCellToFill) {
                int value = Math.abs(random.nextInt() % 10) != 9 ? 1 : 2;
                area[i][j] = value;
                cond = false;
                break;
            }
        }
    }
}
</code></pre>

<p>Inside the inner if <code>cond</code> will be set to <code>false</code> before breaking the inner for, and the next check of the outer for will find cond equal to false and will terminate.</p>

<p>Note: as @drekbour said in his comment below in this case because the composite loop is the last instruction of the method it is better directly return false inside the inner loop.</p>
    </div>