<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Referential immutability</h2>

<p>You don't reassign your lists - <code>targets</code> and <code>bases</code> - so make them <code>final</code>.</p>

<h2>Type weakening</h2>

<p>So far as I can see, you aren't doing anything in your class that requires reference to the <code>ArrayList</code> methods of <code>targets</code> and <code>bases</code>. You should weaken them to <code>Collection</code>, or maybe <code>List</code> depending on some of your index-dependent loops. Also, omit the generic type during construction. So:</p>

<pre><code>private final Collection&lt;Location&gt; targets = new ArrayList&lt;&gt;();
private final Collection&lt;Location&gt; bases = new ArrayList&lt;&gt;();
// ...
Collection&lt;Integer&gt; times = new ArrayList&lt;&gt;();
</code></pre>

<h2>Loop sanitization</h2>

<p>This should go away if possible:</p>

<blockquote>
<pre><code>for(int i = 0; i &lt; data.size() ; i++) {
</code></pre>
</blockquote>

<p>Just use three separate loops, i.e.</p>

<pre><code>int i = 1;
for (; i &lt;= numBases; i++) // ...
for (; i &lt;= numTargets + numBases; i++) // ...
for (; i &lt; data.size(); i++) // ...
</code></pre>

<p>and these:</p>

<blockquote>
<pre><code>    for(int x = 0; x &lt; bases.size(); x++) {
        for(int y = 0; y &lt; targets.size(); y++) {
</code></pre>
</blockquote>

<p>should just be</p>

<pre><code>for (Location base: bases) {
    for (Location target: targets) {
</code></pre>

<p>and</p>

<blockquote>
<pre><code>for(int i = 0; i &lt; times.size(); i++) {
</code></pre>
</blockquote>

<p>should just be</p>

<pre><code>for (Integer time: times) {
</code></pre>

<h2>Class methods</h2>

<p>This:</p>

<blockquote>
<pre><code>private int timeElapsed(Location loc1, Location loc2) {
    int manhattanDistance = Math.abs(loc2.getX() - loc1.getX()) + Math.abs(loc2.getY() - loc1.getY());
    List&lt;Integer&gt; factors = primeFactorization(manhattanDistance);
    factors.sort(Comparator.naturalOrder());
    int factor = -1;
    for(int i = 0; i &lt; factors.size(); i++) {
        if(factors.get(i) &gt; loc1.getId()) {
            factor = i;
        }
    }
    if(factor == -1) factor = loc1.getId();
    return 0;
}
</code></pre>
</blockquote>

<p>definitely belongs as a method on <code>Location</code>, either static accepting two locations, or where <code>loc1</code> is implied as <code>this</code>.</p>

<p>Make <code>primeFactorization</code> a static method.</p>

<h2>Location mutability</h2>

<p>Your habit is to do the "standard Java thing" and make <code>set</code> methods for all of your members - but you should really only do so if you need to mutate your locations, which you absolutely don't. Delete all of your <code>set</code> methods.</p>

<p>You should also make a convenience constructor on <code>Location</code> that accepts a <code>String</code> and does this code for you:</p>

<pre><code>            String[] split = data.split(" ");
            int x = Integer.parseInt(split[0]);
            int y = Integer.parseInt(split[1]);
            int id = Integer.parseInt(split[2]);
</code></pre>
    </div>