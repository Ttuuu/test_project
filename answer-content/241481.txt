<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Welcome to Code Review. Your code seems me well structured, I have two suggestions for you:</p>

<blockquote>
<pre><code>switch (day.name()) {
    case "WEDNESDAY":
         //before 7:30 on a wednesday? Set alarm to this Wednesday morning
         fireTime = (nowEpochSecond &lt; fireTimeEpochSecond) ? fireTime :
                 fireTime.with(TemporalAdjusters.next(DayOfWeek.THURSDAY));
                 break;
    case "THURSDAY":
         //before 7:30 on a Thursday? Set alarm to this Thursday morning
         fireTime = (nowEpochSecond &lt; fireTimeEpochSecond) ? fireTime :
                 fireTime.with(TemporalAdjusters.next(DayOfWeek.FRIDAY));
                 break;
    case "FRIDAY":
         //before 7:30 on a Friday? Set alarm to this Friday morning
         fireTime = (nowEpochSecond &lt; fireTimeEpochSecond) ? fireTime :
                 fireTime.with(TemporalAdjusters.next(DayOfWeek.WEDNESDAY));
                 break;
    default:
         fireTime = fireTime.with(TemporalAdjusters.next(DayOfWeek.WEDNESDAY));
                 break;
}
</code></pre>
</blockquote>

<p>There is code repetition and you have a binary association between one day and another one, so you could create a <code>Map</code> to reduce your code lines like below:</p>

<pre><code>//creation of one map for the days
Map&lt;String, String&gt; map = new HashMap&lt;String, String&gt;();
map.put("WEDNESDAY", "THURSDAY");
map.put("THURSDAY" , "FRIDAY");
map.put("FRIDAY"   , "WEDNESDAY");

//here the code instead of your switch
DayOfWeek day = fireTime.getDayOfWeek();
String name = day.name();
if (map.containsKey(name)) {
    fireTime = (nowEpochSecond &lt; fireTimeEpochSecond) ? fireTime :
               fireTime.with(TemporalAdjusters.next(DayOfWeek.valueOf(map.get(name))));
} else {
    //default value of your switch
    fireTime = fireTime.with(TemporalAdjusters.next(DayOfWeek.WEDNESDAY));
}
</code></pre>

<p>About the following lines in your jsoup code :</p>

<blockquote>
<pre><code>StringBuilder indicesBuilder = new StringBuilder();
indicesBuilder.append("N: ").append(nikkei.text()).append(", ");
indicesBuilder.append(" S: ").append(shanghaiComposite.text()).append(", ");
indicesBuilder.append(" H: ").append(hangSeng.text());
</code></pre>
</blockquote>

<p>You can obtain the same result not going crazy about data format when you add or delete new indices using <code>StringJoiner</code> class:</p>

<pre><code>StringJoiner sj = new StringJoiner(", ");
sj.add("N: " + nikkei.text());
sj.add("S: " + shanghaiComposite.text());
sj.add("H: " + hangSeng.text());

String bigText = sj.toString(); //&lt;-- the string you can use later in your code.
</code></pre>
    </div>