<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Parsing the expression shouldn't a part of the <code>OrderExpression</code>. You should create another class that does nothing else but parsing. You might want to add some options to it later or unit-test it so it's better if the <code>OrderExpression</code> doesn't have to care about things that are not order-expression related (like the potential parser options etc.)</p>

<pre><code>public class OrderExpressionParser
{
    public OrderExpression ParseOrderExpression(string value)
    {
        // parse the order expression....       
        return new OrderExpression(...);
    }
}
</code></pre>

<p>This way you can test the parser independantly and exchange it later without modifying the <code>OrderExpression</code> class that can remain as simple as:</p>

<pre><code>public class OrderExpression
{
    public OrderExpression(List&lt;OrderRule&gt; orderRules) { ... }

    public IReadOnlyList&lt;OrderRule&gt; OrderRules { get; }
}
</code></pre>

<p>Then you would write:</p>

<pre><code>var orderExpressionParser = new OrderExpressionParser();
var orderExpression = orderExpressionParser.ParseOrderExpression("+foo;-baz");

if (orderExpression == null)
{
    return;
}

 // do something...
</code></pre>

<hr>

<p>If you however prefer the <code>TryParse</code> approach I'd add the parser as a static property to the <code>OrderExpression</code>:</p>

<pre><code>public class OrderExpression
{
    public static OrderExpressionParser OrderExpressionParser { get; set; } 
        = new OrderExpressionParser();

    public OrderExpression(List&lt;OrderRule&gt; orderRules) { ... }

    public IReadOnlyList&lt;OrderRule&gt; OrderRules { get; }

    public static bool TryParse(string value, out OrderExpression result) =&gt;
        (result = OrderExpressionParser.ParseOrderExpression(value)) != null;
</code></pre>
    </div>