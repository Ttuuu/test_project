<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Things you did well</h1>

<ul>
<li><p>Nicely formatted, easy to read.</p></li>
<li><p>Use of <code>typedef</code> with structures.</p></li>
</ul>

<h1>Things you could improve</h1>

<h3>Preprocessor:</h3>

<ul>
<li><p>Since <code>SDL.h</code> isn't one of your own pre-defined header files, you should be searching for it in directories pre-designated by the compiler (since that is where it should be stored).</p>

<pre><code>#include &lt;SDL/SDL.h&gt;
</code></pre>

<p>In <a href="http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1124.pdf" rel="nofollow noreferrer">the C standard</a>, §6.10.2, paragraphs 2 to 4 state:</p>

<blockquote>
  <ul>
  <li><p>A preprocessing directive of the form</p>

<pre><code>#include &lt;h-char-sequence&gt; new-line
</code></pre>
  
  <p>searches a sequence of implementation-defined places for a header identified uniquely by the specified sequence between the <code>&lt;</code> and <code>&gt;</code> delimiters, and causes the replacement of that directive by the entire contents of the header. How the places are specified or the header identified is implementation-defined.</p></li>
  <li><p>A preprocessing directive of the form</p>

<pre><code>#include "q-char-sequence" new-line
</code></pre>
  
  <p>causes the replacement of that directive by the entire contents of the source file identified by the specified sequence between the <code>"</code> delimiters. The named source file is searched for in an implementation-defined manner. If this search is not supported, or if the search fails, the directive is reprocessed as if it read</p>

<pre><code>#include &lt;h-char-sequence&gt; new-line
</code></pre>
  
  <p>with the identical contained sequence (including <code>&gt;</code> characters, if any) from the original
  directive.</p></li>
  <li><p>A preprocessing directive of the form</p>

<pre><code>#include pp-tokens new-line
</code></pre>
  
  <p>(that does not match one of the two previous forms) is permitted. The preprocessing tokens after <code>include</code> in the directive are processed just as in normal text. (Each identifier currently defined as a macro name is replaced by its replacement list of preprocessing tokens.) The directive resulting after all replacements shall match one of the two previous forms. The method by which a sequence of preprocessing tokens between a <code>&lt;</code> and a <code>&gt;</code> preprocessing token pair or a pair of <code>"</code> characters is combined into a single header name preprocessing token is implementation-defined.</p></li>
  </ul>
  
  <p><strong>Definitions:</strong></p>
  
  <ul>
  <li><p>h-char: any member of the source character set except the new-line character and <code>&gt;</code></p></li>
  <li><p>q-char: any member of the source character set except the new-line character and <code>"</code></p></li>
  </ul>
</blockquote>

<p>Don't forget to include <code>-lSDL</code> with <code>gcc</code> to link your code to the SDL library.</p></li>
</ul>

<h3>Variables/Initialization:</h3>

<ul>
<li><p>Tao is simple 2π, as you have defined in your code.</p>

<blockquote>
<pre><code>const double Tao = 6.283185307179586476925;
</code></pre>
</blockquote>

<p>However, π is a <a href="https://www.gnu.org/software/libc/manual/html_node/Mathematical-Constants.html" rel="nofollow noreferrer">mathematically defined constant in <code>math.h</code></a>.  Since you are already using that header, you should utilize the predefined constant.</p>

<pre><code>const double TAO = 2 * M_PI;
</code></pre></li>
</ul>

<h3>Memory:</h3>

<ul>
<li><p>You allocate memory to <code>audioBuffer()</code>, but then never <code>free()</code> it,</p>

<blockquote>
<pre><code>audioBuffer = malloc( sizeof(float)*audioBufferLength );
// free(audioBuffer); //not necessary?
</code></pre>
</blockquote>

<p>This would be my guess as to what valgrind is whining about.  You should always have freed all memory that you have allocated before you exit your program; we want to avoid memory leaks.  </p>

<p>Now to adress your comment as to whether or not that line of code is necessary, since you are exiting your program anyways.  It depends on the operating system. The majority of modern (and all major) operating systems will free memory not freed by the program when it ends.</p>

<p>Relying on this is bad practice and it is better to <code>free()</code> it explicitly. The issue isn't just that your code looks bad. You may decide you want to integrate your small program into a larger, long running one. Then a while later you have to spend hours tracking down memory leaks.    </p>

<p>Relying on a feature of an operating system also makes the code less portable.</p></li>
</ul>

<h3>Syntax/Styling:</h3>

<ul>
<li><p>Right now you are using <code>Uint32</code> to represent an unsigned 32 bit integer, but <code>uint32_t</code> is the type that's defined by the C standard.</p>

<pre><code>uint32_t sampleRate = 48000;
</code></pre></li>
<li><p>Define <code>i</code> within your <code>for</code> loops, not outside.<sup>(C99)</sup></p>

<pre><code>for (uint32_t i = 0; (i+1) &lt; samplesPerFrame; i += 2)
</code></pre></li>
<li><p><code>typedef struct</code>s typically have a capitalized name by standard conventions.</p>

<pre><code>typedef struct 
{
  float *waveform;
  Uint32 waveformLength;
  double volume;        // multiplied
  double pan;           // 0 to 1: all the way left to all the way right
  double frequency;     // Hz
  double phase;         // 0 to 1
} Voice;
</code></pre></li>
<li><p>Declare <em>all</em> of your parameters as <code>void</code> when you don't take in any arguments.</p>

<pre><code>int init(void)
</code></pre></li>
<li><p>You aren't using the parameters specified in <code>main()</code>.</p>

<blockquote>
<pre><code>int main(int argc, char *argv[])
</code></pre>
</blockquote>

<p>Declare them as <code>void</code> if you aren't going to use them.</p>

<pre><code>int main(void)
</code></pre></li>
<li><p>Use <a href="http://www.cplusplus.com/reference/cstdio/puts/" rel="nofollow noreferrer"><code>puts()</code></a> instead of <code>printf()</code> when you aren't formatting your output.</p>

<blockquote>
<pre><code>printf("\n\nwaveform data:\n\n");
</code></pre>
</blockquote>

<pre><code>puts("Waveform data: ");
</code></pre></li>
<li><p>Remove <code>!= 0</code> in some of your conditional tests for maximum C-ness.</p></li>
</ul>

<h3>Comments:</h3>

<ul>
<li><p>Your ASCII art comments... hurt my eyes.</p>

<blockquote>
<pre><code>/*                _ _        _____      _ _ _                _    
                 | (_)      / ____|    | | | |              | |   
   __ _ _   _  __| |_  ___ | |     __ _| | | |__   __ _  ___| | __
  / _` | | | |/ _` | |/ _ \| |    / _` | | | '_ \ / _` |/ __| |/ /
 | (_| | |_| | (_| | | (_) | |___| (_| | | | |_) | (_| | (__|   &lt; 
  \__,_|\__,_|\__,_|_|\___/ \_____\__,_|_|_|_.__/ \__,_|\___|_|\_\
*/
</code></pre>
</blockquote>

<p>You said in the comments that: <em>"Those are just to make it easier to navigate until I break it down into multiple files. Then I won't need them."</em>  </p>

<p>Let me suggest another alternative that you can keep around: documenting your code with <a href="http://www.doxygen.nl/index.html" rel="nofollow noreferrer">Doxygen</a>.  Replacing your ASCII art comments with documentation of your methods will make it easier to navigate, and serve the very important purpose of stating why/how you programmed something a certain way.  </p>

<p>I've taken an example from <a href="https://codereview.stackexchange.com/q/43872/27623">one of my previous questions</a> to use here.</p>

<pre><code>/**
 * @fn static void json_fillToken(JsonToken *token, JsonType type, int start, int end)
 * @brief Fills token type and boundaries.
 * @param token
 * @param type
 * @param start
 * @param end
 */
static void json_fillToken(JsonToken *token, JsonType type, int start, int end)
{
    token-&gt;type = type;
    token-&gt;start = start;
    token-&gt;end = end;
    token-&gt;size = 0;
}
</code></pre></li>
<li><p>Remove old commented out code.</p>

<blockquote>
<pre><code>//logVoice(&amp;testVoiceA);
//logWavedata(testVoiceA.waveform, testVoiceA.waveformLength, 10);
</code></pre>
</blockquote>

<p>It serves almost no purpose, and makes your code look cluttered.</p></li>
<li><p>Besides your ASCII art comments and your old commented out code, you have only a few other comments throughout your source code.  See <a href="http://blog.codinghorror.com/coding-without-comments/" rel="nofollow noreferrer">this blog post here</a> as to why and how you should comment throughout your code.</p></li>
</ul>

<h3>Exiting:</h3>

<ul>
<li><p>You have a function dedicated to termination, and you call it right before you close down your program.</p>

<blockquote>
<pre><code>int onExit() {
  SDL_CloseAudioDevice(AudioDevice);
  //free(audioBuffer);//not necessary?
  SDL_Quit();
  return 0;
}
</code></pre>
</blockquote>

<p>I think you could make great use of the <a href="http://www.cplusplus.com/reference/cstdlib/atexit/" rel="nofollow noreferrer"><code>atexit()</code></a> function in your code.  The <code>atexit()</code> function registers a function to be called at normal program termination.  Though if you decide to use this, you may want to rename <code>onExit()</code> to something such as <code>cleanup()</code> or something similar.</p>

<pre><code>int main(void)
{
    ...
    atexit(cleanup);
    return 0;
}
</code></pre></li>
</ul>
    </div>