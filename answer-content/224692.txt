<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Parameterize Logic Type</h3>

<p>I'd start by trying to consolidate the mapping from voltage level to logic level in one place. For example:</p>

<pre><code>class positive_signal { 
    unsigned value : 1;
public:
     bool isSet() const { return value == 1; }
     void set() { value = 1; }
     void clear() { value = 0; }
};

class negative_signal {
    unsigned value : 1;
public:
    bool isSet() const { return value == 0; }
    void set() { value = 0; }
    void clear() { value = 1; }
};
</code></pre>

<p>Note that I'm leaving out a lot of detail here, just giving a sketch of a general direction. Just for example, in practice there's a decent chance that you'd want the <code>set</code> and <code>clear</code> member functions to <code>return *this;</code> to support chaining.</p>

<h3>Generalize Gates</h3>

<p>I'd consider implementing each gate type to take an arbitrary number of inputs:</p>

<pre><code>namespace logic {

    bool OR(std::vector&lt;signal&gt; const &amp;inputs) { 
        return std::any_of(inputs().begin(), inputs.end(),
                           [](signal in) { return in.isSet; });
    }

    bool AND(std::vector&lt;signal&gt; const &amp;inputs) { 
        return std::all_of(inputs.begin(), inputs.end(), 
                           [](signal in) { return in.isSet; });
    }
    // and so on
}
</code></pre>

<p>This avoids duplicating logic for gates with different numbers of inputs, because you use exactly the same code for both.</p>

<h3>Integration</h3>

<p>Putting those two together can be a little tricky though. As I've shown the code above, they don't really fit well. You can go a couple of different routes. One is to use inheritance, so you'd start with <code>signal</code> as an abstract base class, and then positive and negative signals derived from that. If you do that, you'd have to pass vectors of pointers to signals, rather than vectors of signals.</p>

<p>Alternatively, you could pass the signal type as a template parameter to the gate, so the compiler would instantiate one <code>OR</code> for negative logic and a separate <code>OR</code> for positive logic (and so on).</p>

<p>In this case, I think the latter is a better fit. Inheritance would make sense if you expected to create something like a 5-input OR gate, with 2 arbitrary inputs being negative logic, and the other three positive logic (or more generally, inputs could be any arbitrary combination of positive/negative logic). In reality, however, you typically define the logic type at the gate level, so a 5-input <code>OR</code> gate is going to take either all 5 inputs as positive logic, or else all 5 inputs as negative logic, but never some combination of the two.</p>
    </div>