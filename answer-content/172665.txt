<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There's two things that <em>might</em> help performance, and could also make your code easier to understand:</p>

<ol>
<li><p>only extract the length of the arrays once per loop, instead of per iteration</p></li>
<li><p>deference deeply nested structures earlier, and as infrequently as possible</p></li>
</ol>

<p>For #1, I normally use:</p>

<pre><code>for (var i = 0, n = array.length; i &lt; n; ++i) { ... }
</code></pre>

<p>For #2, look at your innermost nested line:</p>

<pre><code>organized[k - 1][arrKeys[j]] = arr3d[k][j + 1].trim();
</code></pre>

<p>Consider reversing the order in which you enumerate over the data.  There's more scope for optimising values from the inner loop to the outer loop if you iterate over the "leftmost" components of your 2D structures first:</p>

<pre><code>for (var k = 1, kn = arr3d.length; k &lt; kn; k++) {
    var o = organized[k - 1] = {};
    var a = arr3d[k];
    for (var j = 0, jn = arrKeys.length; j &lt; jn; j++) {
        var t = a[j + 1];
        if (t) {
            o[arrKeys[j]] = t.trim();
        }
    }
}
</code></pre>

<p>Note also that now that the loops are the other way around there's no need to pre-create the objects that make up the <code>organized</code> array - it's initialised with an empty object in the first line of the outer loop.</p>
    </div>