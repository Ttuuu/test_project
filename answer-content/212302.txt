<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><code>using namespace std;</code> is a bad practice. I'm glad to see you didn't use it in the header. Better still to not to use it at all. Please see <a href="https://stackoverflow.com/a/1453605/5416291">this</a> post for more information.</p>
<hr>
<pre><code>int main(int argc, char * argv[])
</code></pre>
<p>If you are not going to use the command line arguments anyway then use the empty parameter main: <code>int main()</code></p>
<hr>
<p><code>return 0</code> at the end of main is unnecessary and will be supplied by the compiler.</p>
<hr>
<h2>Bug</h2>
<pre><code>int main(int argc, char * argv[])
{
    Game game = Game();
    Game().Run();
    cout &lt;&lt; "Game has terminated successfully, score: " &lt;&lt; game.GetScore()
        &lt;&lt; ", size: " &lt;&lt; game.GetSize() &lt;&lt; endl;
    return 0;
}
</code></pre>
<p><code>Game().Run()</code> calls the <code>Game</code> constructor and creates a second instance of <code>Game</code> and then calls <code>Run()</code> on that instance. Your postgame stats likely aren't working correctly. No?</p>
<hr>
<p>Don't use <code>std::endl</code>. Prefer '\n' instead. <code>std::endl</code> flushes the stream, which if you wanted to do you could do manually <code>&lt;&lt; '\n' &lt;&lt; std::flush</code> and it would be more explicit what you were trying to accomplish.</p>
<p>Read more <a href="https://stackoverflow.com/a/213977/5416291">here</a>.</p>
<hr>
<pre><code>static const int FRAME_RATE     = 1000 / 60;
static const int SCREEN_WIDTH   = 640;
static const int SCREEN_HEIGHT  = 640;
static const int GRID_WIDTH     = 32;
static const int GRID_HEIGHT    = 32;
</code></pre>
<p><code>constexpr</code> is better for global named constants that are known at compile time. They would need moved outside of the class but could still be in the Game header file.</p>
<p>ALL_CAPS names are also typically used for macros. Better use snake_case, camelCase, or PascalCase. (I prefer snake_case for global constants but that's just me.)</p>
<hr>
<pre><code>struct { float x = GRID_WIDTH / 2, y = GRID_HEIGHT / 2; } pos;

SDL_Point head = { static_cast&lt;int&gt;(pos.x), static_cast&lt;int&gt;(pos.y) };
</code></pre>
<p>Here you define a float that is the result of the division of two ints (which won't return a float) and then immediately cast the result to int. It's also mildly worth mentioning that your values divide cleanly (which is why you didn't notice any errors.) I see <code>pos</code> cast to <code>int</code> a few other times. Just make it an <code>int</code></p>
<hr>
<pre><code>srand(static_cast&lt;unsigned int&gt;(time(0)));
</code></pre>
<p>srand is not a very good PRNG. Learn the <a href="https://en.cppreference.com/w/cpp/header/random" rel="nofollow noreferrer"><code>&lt;random&gt;</code></a> header.</p>
<hr>
<pre><code>bool running = false;
bool alive = false;
</code></pre>
<p>You define and initialize these to false only to make them true before they can be used properly. Just initialize them to true to begin with. Also brace initialization is more idiomatic.</p>
<pre><code>bool running{ true };
bool alive{ true };
</code></pre>
<hr>
<p>Use the C++ language supported <code>nullptr</code> over the C macro <code>NULL</code>. <code>NULL</code> will be silently converted to int at unintended times.</p>
<hr>
<p><code>ReplaceFood()</code> Once again avoid <code>rand</code>. But have you considered maintaining an <code>std::vector&lt;Point&gt;</code> of <code>Point</code>s that are empty. Then you can randomly index from the vector to find the location of the next food. You will have to add the previous location of the tail back to the vector and remove the location of the head on each move.</p>
<hr>
<pre><code>Uint32 before, second = SDL_GetTicks(), after;
int frame_time, frames = 0;
</code></pre>
<p>Don't declare multiple variable on single lines. Use 1:1 lines to variables. Especially when some are assigned and some are not. This can get confusing to read. is <code>frame_time</code> assigned 0? I know the answer but its not obvious just by looking at it.</p>
<hr>
<p>Don't take a parameter in your <code>GrowBody()</code> function. You only ever grow your snake by one. Just increment the size internally and move on. Only grow by a size provided by a parameter if there is a possibility of different sizes being passed in as arguments.</p>
<hr>
<p>Your <code>Update()</code> function is a bit on the larger side. I would break it into two or three helper functions. Maybe the move + wrap in one function and the checks for the head in another.</p>
<p>Then you'd have</p>
<pre><code>void Game::Update()
{
    MoveWithWrap();
    CheckHead();
}
</code></pre>
<p>I also see that you did indeed need floats for the position so I will return to that. I'm not sure I would change the way you do the pos struct after all but I would seriously think about it.</p>
<p>The way to get the result as a float requires casting before the division call:</p>
<pre><code>struct { float x = static_cast&lt;float&gt;(GRID_WIDTH) / 2, y = static_cast&lt;float&gt;(GRID_HEIGHT) / 2; } pos;
</code></pre>
<p>The solution could be to have a helper function that abstracts the casts away to one location. Like this:</p>
<pre><code>struct Position
{
    float x;
    float y;
};

struct Point
{
    int x;
    int y;
};

Point PositionToPoint(Position const&amp; position)
{
    Point point{ static_cast&lt;int&gt;(position.x), static_cast&lt;int&gt;(position.y) };
    return point;
}

Position pos{ grid_width / 2, grid_height / 2 };
</code></pre>
    </div>