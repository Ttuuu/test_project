<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Criticisms</h1>

<h2>Datatypes</h2>

<p>Your data types own data they should not own.  A <code>Brewery</code> has an identity, a location, and a set of beer it brews.  It should not have a "distance to home" parameter, or a "visited" flag.  Distance to who's home?  Visited by whom?</p>

<h2>Usability</h2>

<p><code>haversine()</code> is not a very usable function; it requires 4 parameters.  It would make more sense to pass in two <code>Location</code> objects, and get the distance between those locations.  2 parameters is easier to use than 4.</p>

<h2>Configuration</h2>

<p><code>max_distance</code> is hard-coded in the <code>tsp_rec</code> function.  But from the problem description, it sounds like you change this value between 1000 and 2000.  If so, why is it hard-coded and not a parameter?</p>

<p><code>get_breweries_within_1000()</code> is even more brittle.  The function name, and local variables include the distance limit.  If you want to change the limit, what do you change?  Just the hard-coded number, or the variable names and/or the function name too?</p>

<h2>Global Variables</h2>

<p>Global variables are to be eschewed, assiduously.  They increase code coupling, and decrease usability and testability of code.  It becomes harder to reason about the extent of the effects of a function, because global variables may be changed by any function, so one must examine each and every function to determine if it affects or is affected by a change elsewhere.</p>

<pre><code>    tsp_rec(breweries, 0, 0, path, graph)

    for brew in best_path:
        print(brew)
</code></pre>

<p>Is it obvious that <code>tsp_rec(...)</code> has changed the value of <code>best_path</code>?  If the function were instead written to return the results directly, it would improve understandability and minimize side effects.</p>

<h2>Don't pass in unnecessary arguments</h2>

<p>Consider again the <code>tsp_rec(...)</code> function:</p>

<pre><code>    path = []
    tsp_rec(breweries, 0, 0, path, graph)
</code></pre>

<p>At the top level, it must be called with a <code>distance_traveled</code>, a <code>curr_pos</code> and a <code>path</code>.  But is that a "friendly" interface design?  Why require the user of the function to lookup the calling requirements and pass in the appropriate initial conditions when every caller of the top level would have to do exactly the same thing?  It would make more sense to provide a clean top-level function, and use a recursive helper function.  The top-level function would set up the initial top level call environment.  Eg)</p>

<pre><code>def _tsp_rec(...):
    # Verbatim copy of original tsp_rec() function

def tsp_rec(breweries: List[Brewery], graph_of_distances):
    path = []
    return _tsp_rec(breweries, 0, 0, path, graph_of_distances)
</code></pre>

<p>Also note: <code>[Brewery]</code> was not the correct type-hint; <code>List[Brewery]</code> is.</p>

<hr>

<h1>Improvements</h1>

<h2>Locations</h2>

<p>A location is a nice data type to start with.  It should contain immutable data; if you want a different location, you create a different location object.</p>

<pre><code>from dataclasses import dataclass

@dataclass(frozen=True)
class Location:
    latitude: float
    longitude: float
</code></pre>

<p>Pretty straight forward object, but we can make it prettier with some extra class members:</p>

<pre><code>    @staticmethod
    def deg_min_sec(degrees: float, positive: str, negative: str) -&gt; str:
        suffix = positive if degrees &gt;= 0 else negative
        degrees, minutes = divmod(abs(degrees), 1)
        minutes, seconds = divmod(minutes * 60, 1)
        return f"{degrees:.0f}\u00B0{minutes:.0f}\u2032{seconds*60:.3f}\u2033 {suffix}"

    def __str__(self):
        return self.deg_min_sec(self.latitude, "N", "S") + ", " + self.deg_min_sec(self.longitude, "E", "W")
</code></pre>

<p>Example:</p>

<pre><code>&gt;&gt;&gt; print(Location(51.74250300, 19.43295600))
51°44′33.011″ N, 19°25′58.642″ E
</code></pre>

<p>Now that we have <code>Location</code> objects, we can compute the distance between them.  We could write a <code>haversine(loc1, loc2)</code> function, but normally to figure out distances, we take the end point and subtract the start point, so why not define a subtraction operator for <code>Location</code> objects, which returns the distance?</p>

<pre><code>class Location:

    # ... other members ...

    def __sub__(self, other: Location) -&gt; float:
        """
        Return the distance between two locations
        """

        lon1, lat1, lon2, lat2 = map(radians, [self.longitude, self.latitude, other.longitude, other.latitude])

        dlon = lon2 - lon1
        dlat = lat2 - lat1
        a = sin(dlat / 2) ** 2 + cos(lat1) * cos(lat2) * sin(dlon / 2) ** 2
        c = 2 * asin(sqrt(a))
        r = 6371
        return c * r
</code></pre>

<h2>Breweries</h2>

<p>Like a <code>Location</code>, a <code>Brewery</code> should be immutable data, describing the identity, the location, and the types of brews it produces: </p>

<pre><code>from typing import Set

@dataclass(frozen=True)
class Brewery:
    brewery_id: int
    name: str
    location: Location
    brews: Set[str]

    def __str__(self):
        return f"{self.name} ({self.location})"

    def __hash__(self):
        return self.brewery_id
</code></pre>

<p>Note: I'm using a <code>set</code> for the types of brews a brewery produces.  Since you want the most unique beer types from the tour, it is useful to collect the brews on the tour into a <code>set</code>, which naturally and efficiently eliminates duplicates.  Starting with a <code>set</code> in each brewery makes this even easier.</p>

<p>Also note: I'm using the <code>brewery_id</code> as a hash value.  Since the data is immutable (<code>frozen=True</code>), it can be used as key in dictionaries.  But hashing all the data together to generate a hash is overkill, when the <code>brewery_id</code> is already a unique integer.</p>

<p>To create your list of breweries, I used your original data (with a comma added after <code>'Winterfestival'</code> to make it into a tuple like the rest of the data)</p>

<pre><code>breweries = ([15, 'Aktienbrauerei Kaufbeuren', 10.616100311279297000, 47.878101348876950000],
             [26, 'Allguer Brauhaus AG Kempten', 10.569399833679200000, 47.748699188232420000],
             ...)

beers = ([('St. Martin Doppelbock',), ('JubilÃ¤ums German Pils',)],
         [('Cambonator Doppelbock',), ('Winterfestival',), ('BayrischHell',)],
         ...)
</code></pre>

<p>And this code:</p>

<pre><code>breweries = [Brewery(id_, name, Location(latitude, longitude), set(brew for brew, in brews))
             for (id_, name, longitude, latitude), brews in zip(breweries, beers)]
</code></pre>

<p>Example:</p>

<pre><code>&gt;&gt;&gt; breweries[0]
Brewery(brewery_id=15, name='Aktienbrauerei Kaufbeuren', location=Location(latitude=47.87810134887695, longitude=10.616100311279297), brews={'St. Martin Doppelbock', 'JubilÃ¤ums German Pils'})
</code></pre>

<h2>Main</h2>

<p>To drive the program, I used this code:</p>

<pre><code>if __name__ == '__main__':
    breweries = (... omitted ...)
    beers = (... omitted ...)

    breweries = [Brewery(id_, name, Location(latitude, longitude), set(brew for brew, in brews))
                 for (id_, name, longitude, latitude), brews in zip(breweries, beers)]

    path, brews, distance = travelling_brewmaster(breweries, Location(51.74250300, 19.43295600), 1750)

    print("Path:    ", len(path), "breweries")
    for location in path:
        print("         ", location)
    print("Distance:", distance)
    print("# brews: ", brews)
</code></pre>

<p>Notice how I am passing the home location and the maximum travel distance as arguments to <code>travelling_brewmaster()</code>, instead of having these hard-coded in the program.</p>

<h2>Travelling Brew Master</h2>

<p>Let's begin writing our <code>travelling_brewmaster</code> function:</p>

<pre><code>def travelling_brewmaster(breweries: List[Brewery], home: Location,
                          max_distance: float) -&gt; Tuple[List[Brewery], int, float]:

    def track_best(path: List[Brewery], brews: Set[str], distance:float) -&gt; None:
        nonlocal best_path, best_brews, best_distance

        num_brews = len(brews)
        if num_brews &gt; best_brews or num_brews == best_brews and distance &lt; best_distance:
            best_path = path
            best_brews = num_brews
            best_distance = distance

    best_path = []
    best_brews = 0
    best_distance = inf

    # ... more code here ...

    return best_path, best_brews, best_distance
</code></pre>

<p>We can immediately see several of the points raised above taking shape.  First, <code>travelling_brewmaster(...)</code> takes in only the list of breweries, a home location, and a maximum distance to travel.  No extra initial values the caller needs to supply.</p>

<p>Second, it will be returning the <code>best_path</code>, <code>best_distance</code>, and <code>best_brews</code>, so the function should not be affecting any global state.  How does it achieve that?  It declares those as local variables, and then uses a <code>track_best()</code> inner function with <code>nonlocal</code> variable references to update those variables as better paths are found.</p>

<h3>A Bridge Too Far</h3>

<p>Again, your <code>get_breweries_within_1000</code> function was oddly specific; but it was doing the right thing.  Any brewery beyond <code>max_distance/2</code> from the home location cannot be visited and returned from within the distance limitation.  We just need to shorten it, and make it more general.</p>

<p>First, we want the distances from home to every brewery.  We'll need this more than once, so let's store it:</p>

<pre><code>    distance_to_home = { brewery: brewery.location - home for brewery in breweries }
</code></pre>

<p>Since I've added a <code>__hash__</code> method to the immutable <code>Brewery</code> class, the breweries make perfect dictionary keys; we don't have to look up distances by indices.  This allows us to ... </p>

<pre><code>    breweries = [brewery for brewery in breweries if distance_to_home[brewery] * 2 &lt;= max_distance]
</code></pre>

<p>... remove any brewery which is clearly too far away to visit from <code>breweries</code>, which can/will change each brewery's index number.  If we don't find any breweries within that limit, there is no solution.</p>

<pre><code>    if len(breweries) == 0:
        raise ValueError("No solution")
</code></pre>

<p>Once we have our list of candidate breweries, we can compute the distance between any brewery pair, as a dictionary of dictionaries:</p>

<pre><code>    distances = { brewery1: {brewery2: brewery1.location - brewery2.location for brewery2 in breweries}
                  for brewery1 in breweries }
</code></pre>

<h3>Halving Your Work Load</h3>

<p>Your travelling brewmaster exhaustively travels each brewery path combination.  This means your brewmaster will travel both:</p>

<pre><code>home -&gt; brewery #1 -&gt; brewery #7 -&gt; brewery #4 -&gt; brewery #3 -&gt; home
</code></pre>

<p>and</p>

<pre><code>home -&gt; brewery #3 -&gt; brewery #4 -&gt; brewery #7 -&gt; brewery #1 -&gt; home
</code></pre>

<p>but conclude that both routes result in the same number of brews, and the second path is the same length as the first.  Clearly, this is a waste of time.  If you can avoid testing the reverse routes, you can eliminate half of the work and speed the search up be a factor of two.</p>

<p>How can we ensure we don't look at the reverse loops?  One way is to pick pairs of breweries for the first and last brewery to visit, without selecting the reverse pair.   If we choose brewery <code>i</code> (0 &lt; i &lt; n) for the first brewery, then choosing brewery <code>j</code>, where <code>j &gt; i</code>, is sufficient to ensure no reverse pairs are chosen.</p>

<pre><code>    for i, last in enumerate(breweries):

        # ... more code here ...

        for j, first in enumerate(breweries[i+1:], i+1)

            # ... more code here ...
</code></pre>

<p>I said we don't need the index numbers above, but I'm looping over the breweries and keeping track of the index numbers.  Why?  So we can simply determine what the "rest" of the breweries are:</p>

<pre><code>            rest = breweries[:i] + breweries[i+1:j] + breweries[j+1:]
</code></pre>

<p>These are the candidates for visiting between the <code>first</code> and the <code>last</code>.</p>

<h3>Searching</h3>

<p>A simplistic recursive inner search helper might look like this:</p>

<pre><code>    # Recursive helper
    def helper(path, distance, beers, breweries):

        last = path[0]
        prev = path[-1]

        for i, brewery in enumerate(breweries):
            distance2 = distance + distances[prev][brewery]
            loop_distance = distance2 + distances[last][brewery]

            if loop_distance &lt;= max_distance:
                brews = beers | brewery.brews
                path2 = path + [brewery]

                track_best(path2, brews, loop_distance)

                rest = breweries[:i] + breweries[i+1:]
                if rest:
                    helper(path2, distance2, brews, rest)
</code></pre>

<p>Since it is an inner function, like <code>track_best</code>, it has access to the outer function variables, like the <code>distances</code> dictionary and <code>max_distance</code>.</p>

<p>It could be driven by the last/first pair loop, above:</p>

<pre><code>    for i, last in enumerate(breweries):

        path = [last]
        distance = distance_to_home[last]
        track_best(path, last.brews, distance * 2)

        for j, first in enumerate(breweries[i+1:], i+1):
            path2 = path + [first]
            distance2 = distance + distance_to_home[first]
            loop_distance = distance2 + distances[last][first]

            if loop_distance &lt;= max_distance:

                brews = first.brews | last.brews
                track_best(path2, brews, loop_distance)
                rest = breweries[:i] + breweries[i+1:j] + breweries[j+1:]

                helper(path2, distance2, brews, rest)


    best_path.append(best_path.pop(0))
    return best_path, best_brews, best_distance
</code></pre>

<p>For convenience, we've added the <code>last</code> brewery as the first element of the <code>path</code> / <code>best_path</code> list, so when we return our best path, we need to move it back to the end of the list to compensate.</p>

<p>Unfortunately, this is very slow.  We need to add some optimizations</p>

<h3>Optimization</h3>

<p>Every time we add a <code>brewery</code> to the <code>path</code>, the path distance gets longer.  Travel to any remaining brewery from the most recently added brewery and back to the <code>last</code> brewery must not exceed <code>max_distance</code>.  So the <code>rest</code> of the breweries can be filtered to exclude any candidate which cannot be reached within the <code>max_distance</code> constraint.</p>

<pre><code>            rest = [candidate for candidate in rest
                     if distance2 + distances[first][candidate] + distances[last][candidate] &lt;= max_distance]
</code></pre>

<p>We can also filter out any candidate which doesn't add any new brews to our mix:</p>

<pre><code>            rest = [candidate for candidate in rest
                     if not candidate.brews &lt;= brews]
</code></pre>

<p>And we can do both filter steps at once:</p>

<pre><code>            rest = [candidate for candidate in rest
                     if distance2 + distances[first][candidate] + distances[last][candidate] &lt;= max_distance
                     and not candidate.brews &lt;= brews]
</code></pre>

<p>A similar filtering must be performed in the <code>helper()</code> method, using the <code>brewery</code> that was just added.</p>

<pre><code>                rest = [candidate for candidate in rest
                        if distance2 + distances[brewery][candidate] + distances[last][candidate] &lt;= max_distance
                        and not candidate.brews &lt;= brews]
</code></pre>

<h2>Performance Timing</h2>

<p><code>datetime.now()</code> is not the most accurate method to use for timing.  <code>time.perf_counter()</code> is far superior.  A decorator may be used to easily add (and later remove) time-profiling of a specific function:</p>

<pre><code>from time import perf_counter

def timed(func):
    def wrapper(*argv, **kwargs):
        start = perf_counter()
        result = func(*argv, **kwargs)
        end = perf_counter()
        print(f"{func.__name__}: {end-start:.2f}")
        return result
    return wrapper
</code></pre>

<p>Usage:</p>

<pre><code>@timed
def travelling_brewmaster(breweries: List[Brewery], home: Location, max_distance: float) -&gt; Tuple[List[Brewery], int, float]:
    ...
</code></pre>

<h1>Reworked Code</h1>

<p>Here is my completely reworked travelling brewmaster code:</p>

<pre><code>from math import radians, cos, sin, asin, sqrt, inf
from time import perf_counter
from dataclasses import dataclass
from typing import List, Set, Tuple

def timed(func):
    def wrapper(*argv, **kwargs):
        start = perf_counter()
        result = func(*argv, **kwargs)
        end = perf_counter()
        print(f"{func.__name__}: {end-start:.2f}")
        return result
    return wrapper

@dataclass(frozen=True)
class Location:
    latitude: float
    longitude: float

    @staticmethod
    def deg_min_sec(degrees: float, positive: str, negative: str) -&gt; str:
        suffix = positive if degrees &gt;= 0 else negative
        degrees, minutes = divmod(abs(degrees), 1)
        minutes, seconds = divmod(minutes * 60, 1)
        return f"{degrees:.0f}\u00B0{minutes:.0f}\u2032{seconds*60:.3f}\u2033 {suffix}"

    def __str__(self):
        return self.deg_min_sec(self.latitude, "N", "S") + ", " + self.deg_min_sec(self.longitude, "E", "W")

    def __sub__(self, other):
        lon1, lat1, lon2, lat2 = map(radians, [self.longitude, self.latitude, other.longitude, other.latitude])

        dlon = lon2 - lon1
        dlat = lat2 - lat1
        a = sin(dlat / 2) ** 2 + cos(lat1) * cos(lat2) * sin(dlon / 2) ** 2
        c = 2 * asin(sqrt(a))
        r = 6371
        return c * r

@dataclass(frozen=True)
class Brewery:
    brewery_id: int
    name: str
    location: Location
    brews: Set[str]

    def __str__(self):
        return f"{self.name} ({self.location})"

    def __hash__(self):
        return self.brewery_id

@timed
def travelling_brewmaster(breweries: List[Brewery], home: Location, max_distance: float) -&gt; Tuple[List[Brewery], int, float]:

    def track_best(path: List[Brewery], brews: Set[str], distance:float) -&gt; None:
        nonlocal best_path, best_brews, best_distance

        num_brews = len(brews)
        if num_brews &gt; best_brews or num_brews == best_brews and distance &lt; best_distance:
            best_brews = num_brews
            best_distance = distance
            best_path = path # + [last]


    def helper(path, distance, beers, breweries):

        last = path[0]
        prev = path[-1]

        for i, brewery in enumerate(breweries):
            distance2 = distance + distances[prev][brewery]
            loop_distance = distance2 + distances[last][brewery]     
            brews = beers | brewery.brews
            path2 = path + [brewery]

            track_best(path2, brews, loop_distance)

            rest = breweries[:i] + breweries[i+1:]
            rest = [candidate for candidate in rest
                    if distance2 + distances[brewery][candidate] + distances[last][candidate] &lt;= max_distance
                    and not candidate.brews &lt;= brews]
            if rest:
                helper(path2, distance2, brews, rest)

    distance_to_home = { brewery: brewery.location - home for brewery in breweries }
    breweries = [brewery for brewery in breweries if distance_to_home[brewery] * 2 &lt;= max_distance]

    print(f"{len(breweries)} breweries within {max_distance} driving limit.")
    if len(breweries) == 0:
        raise ValueError("No solution")

    distances = { brewery1: {brewery2: brewery1.location - brewery2.location for brewery2 in breweries}
                  for brewery1 in breweries }

    best_path = []
    best_brews = 0
    best_distance = inf

    for i, last in enumerate(breweries):

        path = [last]
        distance = distance_to_home[last]
        track_best(path, last.brews, distance * 2)

        for j, first in enumerate(breweries[i+1:], i+1):
            distance2 = distance + distance_to_home[first]
            loop_distance = distance2 + distances[last][first]
            if loop_distance &gt; max_distance or first.brews &lt;= last.brews:
                continue

            path2 = path + [first]
            brews = first.brews | last.brews
            track_best(path2, brews, loop_distance)
            rest = breweries[:i] + breweries[i+1:j] + breweries[j+1:]
            rest = [candidate for candidate in rest
                     if distance2 + distances[first][candidate] + distances[last][candidate] &lt;= max_distance
                     and not candidate.brews &lt;= brews]
            if rest:
                helper(path2, distance2, brews, rest)

    best_path.append(best_path.pop(0))
    return best_path, best_brews, best_distance


if __name__ == '__main__':

    breweries = ( ... omitted for brevity ...)
    beers = (... omitted for brevity ...)

    breweries = [Brewery(id_, name, Location(latitude, longitude), set(brew for brew, in brews))
                 for (id_, name, longitude, latitude), brews in zip(breweries, beers)]

    path, brews, distance = travelling_brewmaster(breweries, Location(51.74250300, 19.43295600), 1600)

    print("Path:    ", len(path), "breweries")
    for location in path:
        print("         ", location)
    print("Distance:", distance)
    print("# brews: ", brews)
</code></pre>

<p>And here is the output, which takes a half-second with a <code>max_distance</code> of 1600:</p>

<pre class="lang-none prettyprint-override"><code>40 breweries within 1600 driving limit.
travelling_brewmaster: 0.49
Path:     10 breweries
          Brewery Budweiser Budvar (48°58′26.039″ N, 14°28′30.001″ E)
          Brauerei Grieskirchen AG (48°14′6.359″ N, 13°49′45.119″ E)
          Brauerei Aying Franz Inselkammer KG (47°58′14.160″ N, 11°46′50.880″ E)
          Hacker-Pschorr Bru (48°8′20.757″ N, 11°34′48.721″ E)
          Bayerische Staatsbrauerei Weihenstephan (48°23′42.716″ N, 11°43′43.679″ E)
          Heller Bru Trum (49°53′31.194″ N, 10°53′7.079″ E)
          Brauerei Fssla (49°53′39.118″ N, 10°53′7.800″ E)
          Brauerei Spezial (49°53′39.118″ N, 10°53′7.800″ E)
          Bamberger Mahrs-Bru (49°53′24.355″ N, 10°54′24.120″ E)
          Brauerei Gbr. Maisel KG (49°56′51.722″ N, 11°33′57.239″ E)
Distance: 1585.2867749820152
# brews:  36
</code></pre>
    </div>