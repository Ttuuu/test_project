<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Code Review</h2>

<p>Do you really want to use C functions?</p>

<pre><code>#include &lt;stdio.h&gt;
</code></pre>

<p>Sure you can but you may want to use the correct version of this header file for C++ which is <code>&lt;cstdio&gt;</code>.</p>

<hr>

<p>Using port 1 is not recommended for normal socket work.</p>

<pre><code>#define port 0001;
</code></pre>

<p>Ports below 1024 are reserved for the OS (and usually specifically allocated to standard services used by the OS).</p>

<p><a href="https://www.webopedia.com/quick_ref/portnumbers.asp" rel="nofollow noreferrer">https://www.webopedia.com/quick_ref/portnumbers.asp</a></p>

<p>But since you are writing TCP connection <code>1</code> is the correct port.</p>

<hr>

<p>To prevent excessive copying pass complex parameters by const reference rather than value (unless you are going to copy them anyway).   </p>

<pre><code>std::vector&lt;std::string&gt; split(std::string mystring, std::string delimiter)
</code></pre>

<hr>

<p>I think we can improve the split a bit:</p>

<pre><code>std::vector&lt;std::string&gt; split(std::string const&amp; mystring, std::string const&amp; delimiter)
{
    std::vector&lt;std::string&gt; subStringList;

    std::string::size_t start = 0;
    std::string::size_t end   = mystring.find_first_of(delimiter);

    while (end != std::string::npos) {
        subStringList.emplace_back(mystring.substr(start, end - start));
        start = end + delimiter.size();
    }
    // if the delimiter is the last item in the string
    // then the following will add a blank string to subStringList.
    // If that is not what you want just test to see if start ==  mystring.size()
    subStringList.emplace_back(mystring.substr(start));

    return subStringList;
}
</code></pre>

<hr>

<p>Remove commented out code from your source.</p>

<pre><code>    //SOCKET cSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);

        /*
        void prepSocket() {
            SOCKET cSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
            if (cSocket == INVALID_SOCKET) {
                std::cout &lt;&lt; "[+] - Error: " &lt;&lt; WSAGetLastError() &lt;&lt; std::endl;
                WSACleanup();
                exit(1);
            }
        }
        */
</code></pre>

<p>This is what source control systems are for. Check out github.</p>

<hr>

<p>You only ever want to connect to this specific host?</p>

<pre><code>    PCWSTR ip = L"192.168.86.36";
</code></pre>

<p>I would expect that you want to pass a hostname as a parameter to the client.</p>

<hr>

<p>Is this really part of the <code>client</code> class?</p>

<pre><code>        void startWinsock() {
            std::cout &lt;&lt; "[+] - Starting our client.\n";
            int rCode = WSAStartup(MAKEWORD(2, 2), &amp;wsaData);
            if (rCode != NO_ERROR) {
                std::cout &lt;&lt; "[-] - Error while trying to start winsock.\n";
                exit(0);
            }
        }
</code></pre>

<p>I would make the start up/shotdown of the windowing socket code a separate class <code>TCPInit</code> (probably a singelton). Then the constructor of <code>client</code> will simply just make sure that the socket stuff has been initialized by getting an instance of <code>TCPInit</code>.</p>

<hr>

<p>You don't check the result of this call:</p>

<pre><code>            InetPton(AF_INET, ip, &amp;addrServer.sin_addr.s_addr);
</code></pre>

<hr>

<p>Did you not define a port macro above?</p>

<pre><code>            addrServer.sin_port = htons(0001);
</code></pre>

<hr>

<p>Don't assume the size of this object is 8.</p>

<pre><code>            memset(&amp;(addrServer.sin_zero), '\0', 8);
</code></pre>

<p>That is what <code>sizeof</code> is used for.</p>

<hr>

<p>The value returned by <code>send()</code> is not just an error.</p>

<pre><code>            int message = send(cSocket, messageContent, strlen(messageContent), 0);
            if (message == SOCKET_ERROR) {
</code></pre>

<p>You should check the result of <code>send()</code> make sure you have sent the whole message. You may need to call <code>send()</code> multiple times to send the whole message.</p>

<hr>

<p>This looks like a destructor:</p>

<pre><code>        void killSocket(SOCKET cSocket) {
            closesocket(cSocket);
            WSACleanup();
        }
</code></pre>
    </div>