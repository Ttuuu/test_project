<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This may be a good case for generator functions.  And splitting it into two parts might make things more flexible: first, remove the stopwords; and second, handle the punctuation.  </p>

<p>Also, <code>str.maketrans</code> and <code>str.translate</code> can do the punctuation mapping.</p>

<pre><code>def remove_stopwords(text_iterable, stopwords):
    for word in text_iterable:
        if word.lower() not in stopwords:
            yield word


def handle_punctuation(text_iterable, table):
    for word in text_iterable:
        yield word.translate(table)


# format is ("chars", "replacement")          
mappings = (("/-'", ' '),
            ('&amp;', ' &amp; '),
            ('?!.,"#$%\'()*+-/:;&lt;=&gt;@[\\]^_`{|}~' + '“”’', None))

table = str.maketrans({c:v for k,v in mappings for c in k})

stopword_free = remove_stopwords(text, stopwords)
cleaned_text = handle_punctuation(stopword_free, table)
</code></pre>

<p><code>cleaned_text</code> is a generator, use <code>list(handle_punctuation(stopword_free, table))</code> if you need an actual list of words.</p>
    </div>