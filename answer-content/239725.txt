<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Amazing code as always, Mathieu and Comintern; many thanks.</p>

<p>I'm here only two add two cents:</p>

<p>Probably you tested it in a 32 bits setup; to compile in a 64 bits you need to (only differences):</p>

<pre><code>    #If Win64 Then
    Private Declare PtrSafe Sub CopyMemory Lib "kernel32.dll" Alias "RtlMoveMemory" (hpvDest As Any, hpvSource As Any, ByVal cbCopy As LongPtr)
    Private Type TReference
        Address As LongPtr
    End Type
    #Else
    Private Declare Sub CopyMemory Lib "kernel32.dll" Alias "RtlMoveMemory" (hpvDest As Any, hpvSource As Any, ByVal cbCopy As Long)
    Private Type TReference
        Address As Long
    End Type
    #End If
         ...
    #If Win64 Then
    Public Property Get Address() As LongPtr
        Address = this.Address
    End Property
    Public Property Let Address(ByVal value As LongPtr)
        this.Address = value
    End Property
    #Else
    Public Property Get Address() As Long
        Address = this.Address
    End Property
    Public Property Let Address(ByVal value As Long)
        this.Address = value
    End Property
    #End If
</code></pre>

<p>And your test works:</p>

<pre><code>Public Sub Test()
    Dim p As TheParent
    Set p = New TheParent
    Debug.Print ObjPtr(p)
    Set p = Nothing
End Sub
</code></pre>

<p>And now things seems to be OK. But...</p>

<p>Now, try to do something useful with Parent property of Child class, not only assure GC:</p>

<p>Slightly modified Parent Class; Child class the same:</p>

<pre><code> Option Explicit
Private Type tTheParent
    Child As TheChild
    CollectionName As String
End Type
Private this As tTheParent

Private Sub Class_Initialize()
    Set this.Child = New TheChild
    Set this.Child.Parent = Me
    Debug.Print this.Child.Parent.CollectionName
End Sub
Public Property Get GetChild() As TheChild
    Set GetChild = this.Child
End Property
Private Sub Class_Terminate()
    Set this.Child = Nothing
End Sub

Public Property Get CollectionName() As String
    CollectionName = IIf(this.CollectionName = vbNullString, "COLLECTION", this.CollectionName)
End Property
</code></pre>

<p>New Test:</p>

<pre><code> Public Sub TestChildParent()
    Dim p As TheParent
    Set p = New TheParent
    Dim c As TheChild
    Set c = p.GetChild
    Debug.Print c.Parent.CollectionName
    Debug.Print ObjPtr(p)

    Set p = Nothing
 End Sub
</code></pre>

<p>And what we get? I crashed Excel, Word and the Video driver!</p>

<p>And now the @this's comment shines; now I got illuminated by his (this?) words:</p>

<blockquote>
  <p>Please don't hard-code the size... ever. LenB is to VBA what sizeof is
  to C. Use it to size the allocation for the copy memory API. â€“ this</p>
</blockquote>

<p>I was directed here because yesterday I <a href="https://stackoverflow.com/questions/60943510/trying-to-reverse-objptr-to-an-object-im-getting-kernel-not-found-error-53-in-6?noredirect=1#comment107823007_60943510">posted at SO</a> an error 53 getting kernel, and until I crash windows I didn't understood that the correct Bruce McKinney's code for getting an Object from the object pointer is:</p>

<pre><code>Dim objT As Object
CopyMemory objT, this.Address, LenB(this.Address) 'not 4
Set IWeakReference_Object = objT
CopyMemory objT, 0&amp;, LenB(this.Address) 'not 4
</code></pre>

<p>And this answer my question at SO too, because the kernel 53 error gone...</p>

<p>PS: Please, don't be surprised at this enigmatic approach using this as Private Type
someone that I follow teached me ;)</p>

<p>PS2: And this, thanks for that! sorry, couldn't hold myself</p>
    </div>