<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This problem appears to be a <a href="https://en.wikipedia.org/wiki/Poster_child" rel="nofollow noreferrer">poster child</a> for basic object-oriented programming. But please note that I don't know anything about sports betting, so I'll probably get some of the details wrong. </p>

<p>A good rule of thumb is this: If you find yourself switching on internal data, look for a class instead.</p>

<p>In your case, you switch on <code>bet_type</code>, you switch on <code>outcome</code>, you switch on <code>side</code>, and you switch on <code>points_scored_diff</code>. I'm willing to <em></em> ... bet ... that there are some class behaviors to be found in all that.</p>

<p>Since you aren't using classes in your code, I'm going to assume you might not be familiar with them. So I'll keep this as straightforward as possible. (If you are doing this for homework and forbidden to use classes, you should have mentioned that -- some of this could be tuples with lambdas.</p>

<pre><code>class WagerOutcome:
    """ Base class for wager outcomes.
    """
    def __init__(self, name, price):
        self.price = price
        self.name = name

    def __str__(self) -&gt; str:
        return self.name

class TotalWagerWon(WagerOutcome):
    def __init__(self, price):
        super().__init__("Won", price)

    def payout(self, bet_amount: float) -&gt; float:
        return bet_amount * (self.price - 1)

    def __str__(self) -&gt; str:
        """ Stringify this object. Because the price affects the payout for this 
            outcome, I am including price in the display.
        """
        return f"{self.name}({self.price})"
</code></pre>

<p>You can figure out the rest, I suspect.</p>

<p>With outcomes now a class, let's turn to the bet types. You didn't include any examples of handicap bets, which is unfortunate. Other than simple point handicaps, I can't imagine what else there would be. So I'm ignoring handicap types.</p>

<pre><code>class Wager:
    """ Base class for all wager types.
    """
    def __init__(self, *, type: str, side: str, points: SupportsFloat = None, price: SupportsFloat, amount: SupportsFloat):
        self.type = type
        self.side = side
        self.points = float(points)
        self.price = float(price)
        self.amount = float(amount)

class WagerTotalHome(Wager):
    """ Total wager on home team.
    """
    def __init__(self, *, price: SupportsFloat, amount: SupportsFloat, points: int = None):
        super().__init__(type='total', side='home', price=price, amount=amount, points=points)

    def get_outcome(self, home_points, away_points):
        """ Determine outcome by points scored. Return a WagerOutcome.
        """
        if home_points &gt; away_points:
            return TotalWagerWon(self.price)
        else:
            return TotalWagerLost(self.price)
</code></pre>

<p>Now I can write a factory function that maps the strings into types:</p>

<pre><code>def make_wager(type, side, points, price, amount) -&gt; Wager:
    """ Construct and return Wager objects of a type determined by the arguments.
    """
    wager_classes = {
        ('total', 'home'): WagerTotalHome,
        ('total', 'away'): WagerTotalAway,
        ('total', 'over'): WagerTotalOver,
        ('total', 'under'): WagerTotalUnder,
    }

    klass = wager_classes[(type, side)]
    wager = klass(points=points, price=price, amount=amount)
    return wager
</code></pre>

<p>Then I can say:</p>

<pre><code>bet = make_wager('total', 'home', price=2, amount=100)
outcome = bet.get_outcome(3, 0)
payout = outcome.payout(bet.amount)
</code></pre>

<p>That last bit is a little shaky: I really shouldn't have to feed in the <code>bet.amount</code> if the <code>outcome</code> is returned by the <code>bet</code>. But I'm not clear where your trouble with handicap bets lies, so I left things loose.</p>

<p>The point, really, is that using objects/classes, I can move the "wall of if/else" statements into a collection of discrete behaviors. Once we know the bet type is "WagerTotalHome", there is no more need for if/else statements involving the type or the side. All that remains is to determine the outcome of the wager and return that.</p>

<p>Knowing the outcome, there is no need for if/else statements about anything. Simply encode the computation of the payout using the price and bet amount, and return that.</p>

<p>The one remaining bit of complexity is mapping input strings  (or dropdown menu items or whatever) onto wager classes. The factory function uses a dictionary of tuples for that,  so it's not as bad as it might first seem.</p>
    </div>