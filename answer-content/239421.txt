<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>OP: Please leave any feedback you see fit, with special attention to the loops and data types.</p>
</blockquote>

<hr>

<p><strong><code>char</code> type</strong></p>

<p>Although <code>char</code> is <em>signed</em> or <em>unsigned</em>, string functions of the standard library work with the data as if it is was <code>unsigned char</code>.</p>

<blockquote>
  <p>... each character shall be interpreted as if it had the type <code>unsigned char</code> ... C17dr ยง7.24.1 3</p>
</blockquote>

<p>Also: <code>char output = 0; ... output |= 1 &lt;&lt; 7-i;</code> is or-ing bits potentially into the sign place.  This really is not a concern, but in general, logical bit manipulation is best done with unsigned types.</p>

<p><code>int/unsigned</code>, in general, is the preferred type to use for efficient/clean code.  Thus using <code>unsigned/int</code> rather than <code>char output</code> can make for better code.</p>

<p>Putting these ideas together: recommend something more like</p>

<pre><code>char bit_string_decode(char *const str) {
    unsigned output = 0;
    size_t i;
    for(i = 0; i &lt; 8; ++i) {
        switch(str[i]) {
            case '1':
                output |= 1u &lt;&lt; 7-i;  // I prefer unsigned types for bit manipulations
                break;
            case '0':
                break;
        }
    }
    return (char) output;
}
</code></pre>

<p><strong><code>const</code></strong></p>

<p><code>bit_string_decode(char *const str)</code> does not modify the reference data. Use <code>const</code> for greater functional usage, more function clarity and help weak compilers optimize. </p>

<pre><code>// bit_string_decode(char *const str)
bit_string_decode(const char *const str)
//                ^---^

// bool bit_string_is_valid(char *bit_string)
bool bit_string_is_valid(const char *bit_string)
</code></pre>

<p><strong>Simplifications</strong></p>

<p>Some alternative ideas to simplify the loop:</p>

<pre><code>char bit_string_decode(const char *str) {
    const unsigned char *ustr = (const unsigned char *) str;
    unsigned output = 0;
    while (*(const unsigned char*)ustr) { // cast: see note below
        output &lt;&lt;= 1;
        // Given *str is '0' or '1'
        output |= *ustr++ - '0';
    }
    return (char) output;
}
</code></pre>

<p><strong>Allocate to the size of the referenced data, not type</strong></p>

<p>Code is easier to code right, review and maintain.</p>

<pre><code>// char *output_buffer = malloc(sizeof(char)*(count+1));
char *output_buffer = malloc(sizeof *output_buffer *(count+1));
//                                  ^------------^  Referenced data
</code></pre>

<p><strong>Consider decoding without destruction</strong></p>

<p><code>binary_agent(char *bin_str)</code> messes up <code>bin_str</code> due to <code>strtok(bin_str,delim)</code>.  Use of <code>strspn(), strcspn(), strchr()</code> could be used to find the delimiter without changing <code>bin_str</code>.  This functional change I find would make for more useful code and greater applicability.</p>

<p><strong>Missing validation in production</strong></p>

<p>I would say <code>strlen(bit_string) == 8</code> (or equivalent) should always test, not in only in <code>assert</code>.  Perhaps as</p>

<pre><code>bool bit_string_is_valid(const char *bit_string) {
  if (bit_string == NULL) {
    return false;
  }
  const char *s = bit_string;
  while(* (const unsigned char*)s) {  // cast: see note below
    if((*s != '0') &amp;&amp; (*s != '1')) {
      return false;
    }
    s++;
  }
  return (s - bit_string) == 8;
}
</code></pre>

<p>The cast <code>(const unsigned char*)</code> is only useful here for the all but extinct non-2's complement platforms to properly ID the null character.  Drop it, unless code needs that level of portability.</p>

<hr>

<p><strong>Minor</strong></p>

<p><strong>Spacing</strong></p>

<p>Separate function declarations from functions a bit.</p>

<pre><code>bool bit_string_is_valid(char *bit_string);
// add space here
int main(void)
</code></pre>
    </div>