<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>in order to make a smart interpreter <strong>make parser recursive</strong>can handle expressions and statements , generate abstract syntax tree and evaluate semantic errors(data type and casting errors) here you are only dealing with syntax's 
   set your symbols 
  ie</p>

<pre><code>const int L_PAREN = 19;
const int R_PAREN = 20;
const int WHILE = 21;
const int DO = 22;
const int IF = 23;
const int ELSE = 24;
const int THEN = 25;
const int END = 26;
const int PRINT = 27;
const int ERROR = 37; 
</code></pre>

<p>first your token generator must be modified  in general</p>

<pre><code> function geToken ()
          {
      if operant == sometype then
      return token(token_type,current_line,current_column)
         else if another_operant ==some_type
          do the same;
         } 
</code></pre>

<p>after that make a parser</p>

<pre><code>       currentToken = lex.getToken();
       if(currentToken.type() == Id //or int or char or something
            then
            either add to an abstract syntax tree
         evaluvate(token,"expected '='"); 
</code></pre>

<p>you can use a peephole optimizer if you are using complex expressions anyway
i will provide a link pls check it out it is c++ don't worry it is simple you can convert them into c# or java other wise you will get an idea of making a better interpreter.thanks!
<a href="https://github.com/bheinzelman/Mini-Language" rel="nofollow noreferrer">this is mini lang very mini</a></p>
    </div>