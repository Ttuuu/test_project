<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I agree with everything user3629249 posted. Some other possible improvements are:</p>

<h1>Use <code>getopt()</code> or even <code>getopt_long()</code> if possible</h1>

<p>These functions take care of parsing command line arguments for you, which not only makes your life easier (especially if you add more flags), but also gives the user of your application the same command line experience as they get with other programs.</p>

<p>In particular, long options should start with two dashes, so your program should either accept <code>-r</code> or <code>--reverse</code>, but not <code>-reverse</code>.</p>

<h1>Try to avoid having to indent too much</h1>

<p>Indentation is very helpful, but especially when having many nested <code>if</code>/<code>for</code>/<code>while</code> statements, it means you are indenting a lot. At some point this will hurt readability. You can avoid unnecessary indentation by restructuring your code a bit.</p>

<p>For example, as user3629249 has already mentioned, instead of having a lot of code inside of <code>if(argc == 3 || argc == 4)</code>, first check <code>if(argc &lt; 3 || argc &gt; 4)</code>, and exit early if that's the case. That will remove one indentation level from most of the code in <code>main()</code>.</p>

<h1>Use empty lines to make the structure of your code more clear</h1>

<p>Use empty lines to make the different sections of your functions stand out. In particular, add empty lines right above and below (big) <code>if</code>-statements and <code>for</code>-loops.</p>

<h1>Avoid forward declarions</h1>

<p>At the start of your program you have forward declarations for functions you use later. However, these can all be avoided if you restructure the source code to have the ones that don't depend on any other functions go first, and then the ones that depend on those, and so on, and end with <code>main()</code>. The main reason for doing this is that you avoid having to repeat yourself, which prevents errors.</p>

<h1>Don't use macros</h1>

<p>You asked whether you can use macros to make the code more compact. Don't do this. Macros are hard to get right. If you want to make things more compact, it is usually a good idea to put commonly used pieces of code into a separate function, and then use regular function calls.</p>

<h1>Add spaces after commas</h1>

<p>You add spaces after semicolons, braces, and most operators, but for some reason you never put a space after a comma. Please add a space after commas as well, it makes the code more readable. For example, instead of:</p>

<pre><code>merge_sort_integer_sequence(sequence,0,(n - 1));
</code></pre>

<p>Write:</p>

<pre><code>merge_sort_integer_sequence(sequence, 0, n - 1);
</code></pre>

<h1>Don't use <code>assert()</code> for validating user input</h1>

<p>The <code>assert()</code> macro is meant for code quality control, and is typically only used for debug builds. By defining <code>NDEBUG</code> in production builds, <code>assert()</code> will turn into a no-op.</p>

<p>When checking the provided arguments, such as whether <code>atoi(argv[1]) &gt; 0</code>, just use a regular <code>if</code>-statement, print an error message and exit with a non-zero return code. Otherwise, the program will either abort with an unhelpful message if the assert is still working, or it will cause a segmentation fault later on if it's compiled out.</p>

<h1>Use <code>memcpy()</code> instead of <code>memmove()</code> where appropriate</h1>

<p>Use <code>memmove()</code> in situations where the source and destination memory regions might actually overlap, otherwise use <code>memcpy()</code>. The latter might be faster, and sometimes the compiler might actually warn you when it detect you actually do erroneously try to use <code>memcpy()</code> of overlapping memory regions.</p>
    </div>