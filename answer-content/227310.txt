<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There's nothing here that requires Bash rather than standard (POSIX) shell, so we can use</p>

<pre><code>#!/bin/sh
</code></pre>

<p>However, don't do that, because we can use a Bash feature to avoid exposing the plaintext password to other users (see below).</p>

<p>I recommend making the shell exit if we attempt to expand any unset variables, or if any of the programs we run exits with an error status:</p>

<pre><code>set -eu -o pipefail
</code></pre>

<p>Let's look at this line:</p>

<blockquote>
<pre><code>HASHED=$(echo -n $GUAC_PASSWORD | sha256sum | head -c 64)
</code></pre>
</blockquote>

<p>Firstly, use uppercase names only for well-known environment variables to be shared between processes; we should prefer lower-case for our own variables.</p>

<p>Avoid non-standard <code>echo -n</code> and quote variable expansions used as command arguments.</p>

<p>Don't include private information as a command argument.  Any process can see command arguments (e.g. using <code>ps</code> or <code>top</code>), so that is a privacy violation right there.  We can avoid that by using a Bash here-string, using <code>&lt;&lt;&lt;</code> redirection, but we need to be aware that this will add a newline to the stream.  We could use <code>tr</code> to remove that:</p>

<pre><code>hashed=$(tr -d '\n' &lt;&lt;&lt;"$GUAC_PASSWORD" | sha256sum | cut -d' ' -f1)
</code></pre>
    </div>