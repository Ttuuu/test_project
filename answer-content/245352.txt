<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I see this was the second javascript question you posted here and it is unfortunate that there have been no responses in the nearly four years since then. Perhaps you have learned a few things about JavaScript since then.</p>
<p>Looking at the <code>draw</code> method I see that it stores a reference to <code>this</code> in a variable called <code>self</code>. This pattern happens frequently in JavaScript code but it is unnecessary. I see that some of the functions in <code>table</code> utilize <code>self</code> but that could be avoided by binding those functions to <code>this</code> with <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Function/bind" rel="nofollow noreferrer"><code>Function.bind()</code></a>.</p>
<p>It also appears that <code>ctx</code> is passed to each function as a parameter, which is also unnecessary because <code>ctx</code> is hoisted at the top-level and visible within each function as well.</p>
<p>The functions in <code>table</code> associated with keys <code>"["</code> and <code>"]"</code> could be simply set to <code>ctx.save.bind(ctx)</code> and <code>ctx.restore.bind(ctx)</code>, respectively. Furthermore, the functions in <code>table</code> associated with keys <code>"+"</code> and <code>"-"</code> can be set to <code>ctx.rotate.bind(ctx, this.angle)</code> and <code>ctx.rotate.bind(ctx, -this.angle)</code>, respectively.</p>
<p>I'm not sure if those changes will be enough to reduce the CPU load. If not, then consider taking out function calls (i.e. calling <code>table[char]</code>) and using a series of <code>if</code> statements or <code>switch</code> statement in the <code>for</code> loop.</p>
<h2>Demo</h2>
<p>While it may not be much, see the demo below which hopefully provides some proof that the suggestions lead to a slight performance gain (see the <code>drawB()</code> method). I considered using jsPerf but that might be a bit of a stretch to use for this code.</p>
<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="false" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>var rules = [
  //["F", "F[+F]F[-F]F"]

  //["F", "F+F--F+F"]

  //["1", "1F1F"],
  //["0", "1F[+0][-0]"]

  //["F", "F+F-F-F+F"]

  ["F", "FF"],
  ["X", "F-[[X]+X]+F[+FX]-X"]
];
var angle = 10;
const times = [{
  y: [],
  line: {
    color: "blue",
    width: 4,
    shape: "line"
  },
    name: "Original draw()"
}, {
  y: [],
  line: {
    color: "green",
    width: 4,
    shape: "line"
  },
    name: "Simplified draw()"
}];

function LSystem(rules, angle, init, level) {
  this.rules = {};
  this.angle = angle * Math.PI / 180;
  this.parseRules(rules);
  this.path = this.generateLevel(init, level);
}
LSystem.prototype.parseRules = function(rules) {
  var self = this;
  rules.forEach(function(rule) {
    self.rules[rule[0]] = rule[1];
  });
};
LSystem.prototype.applyRule = function(input) {
  var output = "";
  for (var i = 0; i &lt; input.length; i++) {
    var char = input[i];
    if (char in this.rules) {
      output += this.rules[char];
    } else {
      output += char;
    }
  }
  return output;
};
LSystem.prototype.generateLevel = function(input, level) {
  if (level == 0) return input;
  return this.generateLevel(this.applyRule(input), level - 1);
};
LSystem.prototype.draw = function(x, y) {
  var start = +new Date();
  var self = this;
  var path = this.path;
  var table = {
    "F": function(ctx) {
      ctx.moveTo(0, 0);
      ctx.lineTo(5, 0);
      ctx.translate(5, 0);
    },
    "+": function(ctx) {
      ctx.rotate(self.angle);
    },
    "-": function(ctx) {
      ctx.rotate(-self.angle);
    },
    "[": function(ctx) {
      ctx.save();
    },
    "]": function(ctx) {
      //ctx.stroke();
      ctx.restore();
      //ctx.beginPath();
    }
  };
  ctx.save();
  ctx.clearRect(0, 0, 500, 500);
  ctx.beginPath();
  ctx.moveTo(x + 0.5, y + 0.5);
  ctx.translate(x + 0.5, y + 0.5);
  for (var i = 0; i &lt; path.length; i++) {
    var char = path[i];
    var cmd = table[char];
    cmd &amp;&amp; cmd(ctx);
  }
  ctx.stroke();
  ctx.restore();
  const end = +new Date();
  times[0].y.push((end - start));
  if (times[0].y.length &gt; 1) {
    avg.innerText = times[0].y.reduce((a, b) =&gt; a + b) / times[0].y.length;
  }
};
LSystem.prototype.drawB = function(x, y) {
  var start = +new Date();
  var table = {
    "F": function() {
      ctxB.moveTo(0, 0);
      ctxB.lineTo(5, 0);
      ctxB.translate(5, 0);
    },
    "+": ctxB.rotate.bind(ctxB, this.angle),
    "-": ctxB.rotate.bind(ctxB, -this.angle),
    "[": ctxB.save.bind(ctxB),
    "]": ctxB.restore.bind(ctxB)
  };
  ctxB.save();
  ctxB.clearRect(0, 0, 500, 500);
  ctxB.beginPath();
  ctxB.moveTo(x + 0.5, y + 0.5);
  ctxB.translate(x + 0.5, y + 0.5);
  for (var i = 0; i &lt; this.path.length; i++) {
    var char = this.path[i];
    var cmd = table[char];
    cmd &amp;&amp; cmd();
  }
  ctxB.stroke();
  ctxB.restore();
  const end = +new Date();
  times[1].y.push((end - start));
  if (times[1].y.length &gt; 1) {
    avgB.innerText = times[1].y.reduce((a, b) =&gt; a + b) / times[1].y.length;
    avgB.classList.toggle('faster', parseFloat(avgB.innerText) &lt; parseFloat(avg.innerText));
    avgB.classList.toggle('slower', parseFloat(avgB.innerText) &gt; parseFloat(avg.innerText));
    avg.classList.toggle('faster', parseFloat(avg.innerText) &lt; parseFloat(avgB.innerText));
    avg.classList.toggle('slower', parseFloat(avg.innerText) &gt; parseFloat(avgB.innerText));
  }
}


// main
var ctx,
  ctxB,
  s = new LSystem(rules, angle, "X", 5),
  sB = new LSystem(rules, angle, "X", 5),
  output;
window.onload = function() {
  ctx = document.querySelector("canvas").getContext("2d");
  ctxB = document.getElementById("cnvB").getContext("2d");
  output = document.querySelector("pre");

  ctx.translate(50, 500);
  ctx.rotate(Math.PI / 180 * -65);
  ctx.translate(0, -250);

  ctxB.translate(50, 500);
  ctxB.rotate(Math.PI / 180 * -65);
  ctxB.translate(0, -250);

  //ctx.translate(250, 500);
  function d(t) {
    requestAnimationFrame(d);
    ctx.clearRect(0, 0, 500, 500);
    ctxB.clearRect(0, 0, 500, 500);
    s.draw(0, 250);
    sB.drawB(0, 250);

    s.angle = Math.PI / 180 * (25 + Math.sin(t / 1000));
    sB.angle = Math.PI / 180 * (25 + Math.sin(t / 1000));
  }
  output.textContent = s.path.length;
  requestAnimationFrame(d);
};</code></pre>
<pre class="snippet-code-css lang-css prettyprint-override"><code>canvas {
  border: 1px solid black;
}

output.slower {
  background-color: red;
  color: white;
}

output.faster {
  background-color: green;
  color: white;
}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;div id="chart"&gt;
  &lt;div id="comparison"&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;table&gt;
 &lt;tr&gt;&lt;td&gt; Avg time for &lt;code&gt;draw()&lt;/code&gt;&lt;/td&gt;&lt;td&gt; &lt;output id="avg"&gt;&lt;/output&gt; ms
&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;
  Avg time for modified &lt;code&gt;draw()&lt;/code&gt; &lt;/td&gt;&lt;td&gt;&lt;output id="avgB"&gt;&lt;/output&gt; ms
&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;
&lt;canvas width="500" height="500"&gt;&lt;/canvas&gt;
&lt;canvas width="500" height="500" id="cnvB"&gt;&lt;/canvas&gt;
&lt;pre&gt;&lt;/pre&gt;</code></pre>
</div>
</div>

<h3>Result</h3>
<p>Below is a chart comparing the elapsed times of 100 calls to the original <code>draw</code> method and the modified <code>draw</code> method.</p>
<p><a href="https://i.stack.imgur.com/uCNBV.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/uCNBV.png" alt="comparison chart"></a></p>
    </div>