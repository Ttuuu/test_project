<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First some minor issues with naming, then a rewrite:</p>

<p><code>prev</code> could be <code>previous</code>, there is no need to skimp on characters. <code>node_j</code> and <code>node_i</code> are completely different things, yet their names suggest they are both "moving pointers". That is only true for <code>node_j</code>. May I suggest using <code>current</code> and <code>insert</code> instead?</p>

<p>The use of <code>while..else</code> is pretty cool, but confused me at first. Take that with a grain of salt, though, I'm not usually writing a lot of python.</p>

<hr>

<p>Now for the meat of the problem:</p>

<p>This can be simplified by inverting the logic on your traversal. Consider the following code:</p>

<pre class="lang-py prettyprint-override"><code>def sorted_insert(head, data):
    if head is None:
        return Node(data)
    if data &lt; head.data:
        new_head = Node(data)
        new_head.next = head
        return new_head
    # at this point we will always return head
    current_node = head
    # advance if next node is smaller than node to be inserted
    while current_node.next is not None and current_node.next.data &lt; data:
        current_node = current_node.next

    insert = Node(data)
    insert.next = current_node.next
    current_node.next = insert
    return head
</code></pre>

<p>This is an improvement over the code you presented because it separates special cases from traversal.</p>

<ol>
<li>We first handle the special case of an empty list (<code>head is None</code>).</li>
<li>Then we handle the case where we create a new head (<code>data &lt; head.data</code>)</li>
</ol>

<p>With these special cases out of the way we now search for the insertion position, namely what you store in <code>prev</code>. The way this works is by advancing <code>current_node</code> only if the next node also has a smaller <code>data</code> than the insertion.</p>

<p>This simplification allows us to eliminate a variable at the cost of a somewhat more difficult to understand loop condition. Overall this tradeoff is worth it, because we reduce the complexity of the loop body. </p>

<p>After we found the insertion position, the insertion itself becomes a matter of setting the properties in the correct order to avoid dropping the tail of the list.</p>
    </div>