<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Algorithm wise it looks quite good but I feel you could benefit from the single responsibility principle.</p>

<p>First thing that would get on my nerves would be passing the intervals in "non atomic form" e.g.:</p>

<pre><code>double IntervalIntersectionRatio(double i1Start, double i1End, double i2Start, double i2End)
</code></pre>

<p>Instead I would want to have an interval class that has a start and an end member.</p>

<p>Now that you have got that class you could implement a "stupid" <code>Interval intersection(Interval, Interval)</code> function that works on plain intervals (without the circular logic).</p>

<p>Next thing to go about would be the normalization. That code duplication you have there is really a strong smell. Instead have a function to normalize a single number into interval [0, 360) and maybe one that does that for the start and end of an <code>Interval</code> returning the normalized <code>Interval</code>.</p>

<p>Now the only thing you must take care of is the case where one <code>Interval</code> wraps around the 360|0 border which would not be handled correctly by the "stupid" intersection function. So you would have another function that "unwraps" such an <code>Interval</code> by adding 360 to the end of it before passing the <code>Interval</code> to the <code>intersection</code> function.</p>

<p>Giving a <code>length</code> function for <code>Interval</code>s will make the code a bit more readable and most of your problems should be gone.</p>

<p><strong>Disclaimer</strong> I did not think too deeply about this and there might be some edge cases that I missed here but the overall design improvement should make them easier to catch.</p>
    </div>