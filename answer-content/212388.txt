<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It's desirable to try to break one's code into small, more reusable segments. For example, it would be preferable (in my opinion) to create a small function to open the text file, extract its contents, and return the <code>dict</code> of trajectories you desire:</p>

<pre><code>def load_trajectories(file_name):
    traj = {}
    with open(file_name, 'r') as f:
        for line in f.readlines():
            S = line.split(' ')
            num, traj_len = int(S[0]), int(S[1])
            traj[num] = traj_len
    return traj
</code></pre>

<p>Note here that I used the context manager <code>with open(file_name, 'r') as f:</code>, since in Python we need to first open a file, do things with it, and then close it. The context manager handles the opening and closing of the file for us, and within it we can access the file.</p>

<p>From my searching there doesn't seem to be a universally accepted way to find the "inverse" of a value in a dictionary, but I like yours for the most part. As one change, I would iterate over the <code>key:value</code> pairs to simplify things a bit:</p>

<pre><code>def find_key(target_value, dct):
    for key, val in dct.items():
        if val == target_value:
            return key
    raise Exception('Value not found!')
</code></pre>

<p>With this, it really only remains to clean up the <code>conjecture</code> function. Here, we can pass the <code>traj</code> dictionary as an argument, as well as the (un-exponentiated) bound. </p>

<p>In the parlance of your code, note that <code>st</code> is always of the form <code>2**x</code>, so when we compute <code>math.log(st, 2)</code>, it always evaluates to <code>x</code>, so one line of your code reads (equivalently)</p>

<pre><code>slce = list(traj2.items())[(x-1)**2:st]
</code></pre>

<p>which isn't the 'slicing into power of 2' that you desire. Moreover, it's not (necessarily) guaranteed that <code>traj2.items()</code> will be turned into a list in the way you desire, so it'll be better to be more explicit:</p>

<pre><code>slce = [key, val for key, val in traj.items() if key in range(2**(x-1), 2**x)]
</code></pre>

<p>Together, along with splitting our imports onto different lines, <a href="https://stackoverflow.com/questions/419163/what-does-if-name-main-do">adding a <code>if __name__ == '__main__':</code></a> guard, and some other minor reorganization yields the following code:</p>

<pre><code>import math
import pprint

def find_key(target_value, dct):
    for key, val in dct.items():
        if val == target_value:
            return key
    raise Exception('Value not found!')

def load_trajectories(file_name):
    traj = {}
    with open(file_name, 'r') as f:
        for line in f.readlines():
            S = line.split(' ')
            num, traj_len = int(S[0]), int(S[1])
            traj[num] = traj_len
    return traj

def conjecture(traj):
    """Checks the conjecture that the maximum 'Collatz length' among the integers in [2**n, 2**(n+1)) is 2**n - 1.

    The conjecture is false.
    """
    bound = math.floor(math.log(len(traj),2))
    exp_bound = 2**bound

    traj = {key:val for key, val in traj.items() if key &lt; exp_bound} # Only include numbers of interest.
    result = {}

    for n in range(1,bound+1):
        exp_n = 2**n
        slce = [key, val for key, val in traj.items() if key in range(2**(n-1), exp_n)]
        result[exp_n] = find_key(max([val for key, val in slce]), traj)

    return pprint(pformat(result))

if __name__ == "__main__":

    file_name = "CollatzConjecture.txt"
    print(conjecture(file_name))
</code></pre>
    </div>