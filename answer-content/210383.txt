<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I've not looked over all the code, but here are some observations.</p>

<p>Avoid <code>using namespace std;</code>.</p>

<p>You don't document how you handle not finding a company when you try to look it up with your <code>operator[]</code> function.  The expectation (from the standard containers) is that if this method is provided, the existing element will be returned or a new one will be created.  No exceptions will be thrown.  Your code defers to map's <code>at</code>, which will throw an exception if the EntityId is not found.  These should probably be called <code>at</code> instead.</p>

<p>You have inconsistent spacing.  The <code>public:</code> in <code>Entityspace</code> is indented and hard to see, and some of your function calls lack spaces after a comma (see, for example, the call to <code>addEntAsChild</code> in <code>main</code>, and your declaration of <code>EntityContainer</code> in <code>Entityspace</code>).</p>

<p>In <code>addEntity</code>, you use map's <code>insert</code> method.  However, the <code>pair</code> you pass is not correctly typed.  A map has a <code>const</code> first value in the pair, so the correct type is <code>pair&lt;const EntityID, Entity&gt;</code>.  Without that const there will be one pair created, then copied to a 2nd pair to convert it to the correct type.  A simple way to avoid this is to use the <code>value_type</code> of the map if you have a <code>typedef</code> for it.  Better still is to forgo <code>insert</code> and use <code>emplace</code>.</p>

<pre><code>EntityContainer.emplace(ent.getId(), ent);
</code></pre>

<p>How does <code>addEntity</code> behave if an entity already exists?  Since you're ignoring the result from <code>insert</code> (or <code>emplace</code>), you'll return the wrong Id.  It should return the one stored in the map, not the temporary object created for the insertion.</p>

<p><code>totalEntsCount</code> should return a <code>size_t</code>.</p>

<p>Some of your for loops can be simplified using the range-based for loop.  For example, instead of</p>

<pre><code>for (VecEID_It prtIt = prtEnts.begin(); prtIt != prtEnts.end();prtIt++)
{
    VecEID prtCldEnts = findChildrenOf(*prtIt); //all children of each parent
</code></pre>

<p>you can use</p>

<pre><code>for (const auto &amp;prt: prtEnts)
{
    VecEID prtCldEnts = findChildrenOf(prt);
</code></pre>

<p>Your use of <code>1 - rtype</code> to change the relation type makes an assumption about the relative difference of <code>OWNER_OF</code> and <code>OWNER_OF</code>.  If this ever changes (because you add more complicated relations or different relation types) your code will break in possibly hard to detect ways.  A better way to do this is to create a function to call to get the complementary/reverse relation given an existing relationship.</p>
    </div>