<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In addition to <a href="https://codereview.stackexchange.com/a/240776/29485">@FromTheStackAndBack</a> good answer:</p>

<hr>

<blockquote>
  <p>Is there any way I can make this code more efficient?</p>
</blockquote>

<p><strong>Wrong tool for the job, bug</strong></p>

<p><code>pow(16, power)</code> can be a fairly time expensive to call a floating point function for an integer problem.  Weak implementations may not provide the exact value sought, perhaps just under the expected integer and lead to the wrong answer with integer truncation. Best to stay with integer math.</p>

<p><code>currdigit * pow(16, power)</code> will lead to loss of precision when <code>long</code> is 64 bit  and <code>double</code> with only 53. --&gt; Wrong result.</p>

<p>Rather than range tests, research <code>is...()</code> functions.</p>

<p><strong>Simplify</strong></p>

<p>Suggest building the value from <code>s[0]</code> to the end.</p>

<pre><code>// Algorithm
sum = 0;
while (not done) {
  sum = sum*16 + char_to_digit(char)
  next char
}
</code></pre>

<blockquote>
  <p>Is there any way pointers could be used in this program?</p>
</blockquote>

<p>Yes - see below.  Note that <code>s</code> of <code>char s[]</code> is a pointer.</p>

<blockquote>
  <p>Should I make change the parameter <code>char s[]</code> to <code>const char s[]</code> since I am not changing any of its elements' values? Is that common practice?</p>
</blockquote>

<p>Yes, you should - it is common.   It also allows code to call with a <code>const char[]</code>.</p>

<blockquote>
  <p>Should I use <code>short</code> instead of <code>int</code> when I know the number won't surpass great quantities? </p>
</blockquote>

<p>No. <code>int</code> is the size the processor is typically best at both in speed and code footprint.  Use <code>short</code> when you have an array or many instances of that type.</p>

<p>If pressed, could use <code>int16fast_t</code> and perhaps reap some benefit.  Yet this is a micro-optimization for 1 or 2 variables.</p>

<blockquote>
  <p>As an instance, when developing a game, if I know my player's health is from 0 to 100, should I be using a <code>short</code> to store that value? </p>
</blockquote>

<p>Yes, or even <code>unsigned char</code> if you have lots of players.  Else no.  For one player - do not concern about this.  Code for clarity.</p>

<blockquote>
  <p>should it be <code>unsigned</code> as well if I know it won't be negative?</p>
</blockquote>

<p>IMO yes, but you will find various opinions on this one.</p>

<hr>

<p>Other observations</p>

<p><strong>Leading X</strong></p>

<p><code>if(s[i] == 'X' || s[i] == 'x'...)</code> allows for an X anywhere in the <code>char[]</code>.  Usually an X is only allowed as a leading character or as 0x.</p>

<p><strong>No detection of non-hex characters</strong></p>

<p><strong>No detection of overflow</strong></p>

<p><strong>No allowance for a sign character</strong></p>

<p><strong>String</strong></p>

<p><code>unsigned long htoi(char s[], int len)</code> operation on a <code>char</code> array without needing a terminating <em>null character</em> as in a <em>string</em>.  This may be the goal, yet more C-like to expect a final <em>null character</em> and drop the need for <code>len</code>.</p>

<hr>

<p>Sample alternative.  TBD: how to handle errors?</p>

<pre><code>#include &lt;ctype.h&gt;
#include &lt;limits.h&gt;
#include &lt;stdbool.h&gt;

unsigned long htoi(const char *s) {
  unsigned long value = 0;
  bool digit_found = false;

  // Allow leading spaces?  This is common
  while (isspace((unsigned char ) *s)) {
    s++;
  }

  // Perhaps allow for a sign?
  int sign = *s;
  if (*s == '-' || *s == '+') {
    s++;
  }

  // Detect X, 0X prefix - adjust to needs
  if (*s == 'X' || *s == 'x') {
    s++; // consume it
  } else if (*s == '0' &amp;&amp; (s[1] == 'X' || s[1] == 'x') &amp;&amp; 
      isxdigit((unsigned char) *s[2])) {
    s += 2;
  }

  while (isxdigit((unsigned char ) *s)) {
    int digit;
    if (isdigit((unsigned char) *s)) digit = *s - '0';
    else digit = toupper((unsigned char) *s) - 'A' + 10;

    if (value &gt;= ULONG_MAX / 16) {
      // we have overflow - various ways to handle. Here code just limits
      value = ULONG_MAX;
    } else {
      value = value * 16 + (unsigned) digit;
    }
    digit_found = true;
    s++;
  }

  if (!digit_found) {
    // Error, nothing to convert, ignore for now
  }

  // Allow trailing spaces?  This is not common, but I like it.
  while (isspace((unsigned char ) *s)) {
    s++;
  }

  if (*s) {
    // Error, trailing non-numeric text, ignore for now
  }

  if (sign == '-') {
    // TBD is this OK, sure -0 is OK, but should -123 wrap or what?
    // For now, just make 0
    value = 0;
  }

  return value;
}
</code></pre>
    </div>