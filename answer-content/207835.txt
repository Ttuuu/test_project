<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First of all <code>return true if ... else false</code> is not necessary. Just return the original condition. For example:</p>

<pre><code>  def fit?(contents)
    fits_weight?(contents) &amp;&amp; fits_capacity?(contents)
  end
</code></pre>

<hr>

<p>Next, <code>self.</code> is not necessary in most cases, including every case it is used in this program. <code>self.weight</code> should be replaced with <code>@weight</code>.</p>

<hr>

<p><code>knapsack.rb</code> should look more like:</p>

<pre><code>class KnapsackCapacityExceededError &lt; StandardError; end
class KnapsackWeightExceededError &lt; StandardError; end
class KnapsackContentError &lt; StandardError; end

require_relative('./item')

class Knapsack
  attr_reader :capacity
  attr_reader :weight
  attr_reader :contents

  def initialize(capacity:, weight:)
    @capacity = capacity
    @weight   = weight
    @contents = Array.new(@capacity) { nil }
  end

  def contents=(new_contents)
    raise KnapsackCapacityExceededError if exceeds_capacity? new_contents
    raise KnapsackWeightExceededError   if exceeds_weight? new_contents
    raise KnapsackContentError          if new_contents.any? { |e| !e.is_a? Item }

    @contents = new_contents
  end

  def fit?(contents)
    fits_weight?(contents) &amp;&amp; fits_capacity?(contents)
  end
  alias_method :fits?, :fit?

  def fits_weight?(contents)
    new_weight = contents.map { |item| item.weight }.sum
    new_weight &lt;= @weight
  end

  def exceeds_weight?(contents)
    !fits_weight? contents
  end

  def fits_capacity?(contents)
    contents.length &lt;= @capacity
  end

  def exceeds_capacity?(contents)
    !fits_capacity? contents
  end

end
</code></pre>

<hr>

<p>I do not think that three <code>raise</code> conditions are a problem. That code is clear and simple. The three exception classes may be a bit much.</p>
    </div>