<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Java already has <a href="http://docs.oracle.com/javase/7/docs/api/java/math/BigInteger.html#isProbablePrime(int)" rel="nofollow noreferrer"><code>BigInteger.isProbablePrime(int certainty)</code></a> and <a href="http://docs.oracle.com/javase/7/docs/api/java/math/BigInteger.html#nextProbablePrime()" rel="nofollow noreferrer"><code>BigInteger.nextProbablePrime()</code></a>.  (There is no method to get the previous probable prime, though, so you'll need to get creative.)</p>

<p>That said, your Miller-Rabin implementation works remarkably quickly and accurately.  Testing numbers up to 100 million, I found that it is 100% accurate in that range.  To achieve 100% accuracy in that range with <code>BigInteger.isProbablePrime()</code>, you would need a <code>certainty</code> parameter of at least 9.</p>

<p>To obtain a list of primes within a range, you would be better off with the Sieve of Eratosthenes.  For comparison, I tried generating a list of primes up to 100 million with three methods:</p>

<ul>
<li>Sieve of Eratosthenes (using <a href="https://codereview.stackexchange.com/a/45152/9357">@JavaDeveloper's implementation with bugfixes</a>): 3 seconds</li>
<li>Your <code>primes()</code> function: 37 seconds</li>
<li>Testing <code>BigInteger.valueOf(i).isProbablePrime(9)</code> for <code>i</code> up to 100 million: â‰ˆ 4 minutes</li>
</ul>
    </div>