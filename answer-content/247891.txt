<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I feel like you are misunderstanding a few things about working with interfaces. In your <code>op()</code> method you are creating an <code>ArrayList</code>. The type of the List is then "locked in" and cannot be changed. Even if you return only the <code>List</code> interface, the underlying object will still be an <code>ArrayList</code>. As Flame's answer already mentioned, you cannot cast this object to <code>LinkedList</code> because they are not compatible.</p>
<p>So there are two options:</p>
<ol>
<li><p>Be specific about which kind of List implementation you are using. This means changing the return type of <code>op()</code> to <code>ArrayList</code>. The caller can then use all the functionality specified by <code>ArrayList</code>.</p>
</li>
<li><p>Keep your declaration as it is. The caller then has to work with only the <code>List</code> interface and cannot work with any extended functionality that the <code>ArrayList</code> provides. That is because it cannot make any guarantees which implementation is used.</p>
</li>
</ol>
<p>I'd choose option 2 since very rarely does one need functionality which isn't already provided by the <code>List</code> interface. And again, in general, you cannot change the implementation from <code>ArrayList</code> to <code>LinkedList</code> by casting. You'd need to create a new List with the desired implementation and copy all the contents into it. An easy way to do this is: <code>new LinkedList&lt;&gt;(someArrayList);</code></p>
    </div>