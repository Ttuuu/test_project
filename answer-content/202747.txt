<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>tl;dr</strong>: Use numpy's <a href="https://docs.scipy.org/doc/numpy-1.13.0/user/basics.broadcasting.html" rel="nofollow noreferrer">broadcasting</a> features:</p>

<pre><code>coefs = np.array([-2, -1, 0, 1, 2])

#set up the plot and 3 subplots (to show the effect of varying each coefficient)
f, axes = plt.subplots(1, 3, sharey=True, figsize=(18, 6))

#some x values to plot
x = np.linspace(-2, 2, 30)

# calculate the y-values, varying each coefficient separately
y_values = [coefs[:, None] * x[None, :] ** 2,                 # vary a
            x[None, :] ** 2 + coefs[:, None] * x[None, :],    # vary b
            x[None, :] ** 2 + coefs[:, None]]                 # vary c

for ax, ys in zip(axes, y_values):
    for c, y in zip(coefs, ys):
        ax.plot(x, y, label="Coefficient is {}".format(c))
    ax.axhline(y=0, color='k')
    ax.axvline(x=0, color='k')
    ax.grid()
    ax.legend()
plt.show()
</code></pre>

<p>Calculating all necessary y-values would make this a 3D array (one dimension being x, one being the different plots and one being the different values of the coefficients).</p>

<p>To make it slightly easier than that we can handle each plot as a 2D array and make a list of the plots. This way we don't have to deal with the fact that the quadratic term should always appear.</p>

<p>If you really wanted to you could probably make that into a vectorized computation as well, but three dimensions was a bit too much to get straight in my head right now.</p>

<hr>

<p><strong>Explanation of broadcasting:</strong></p>

<p>You can use the fact that <code>numpy</code> has something called <a href="https://docs.scipy.org/doc/numpy-1.13.0/user/basics.broadcasting.html" rel="nofollow noreferrer">broadcasting</a>. It automatically adapts the shapes of vectors you do some operations on, if they are consistent. It can make things look very confusing but allows you to vectorize operations along multiple dimensions (using the fact that doing so loops at C speed, instead of at Python speed).</p>

<p>A small example: You want to multiply two arrays, both of shape <code>(2, 2)</code>. <code>numpy</code> then simply does an element-wise multiplication (so \$c_{ij} = a_{ij} \cdot b_{ij}\$).</p>

<p>But if you multiply two arrays of shape <code>(1, 2)</code> and <code>(2, 2)</code>, this is not directly possible. So instead it repeats the first array along its first dimension (since it is only of lenth one) and <em>then</em> does an element-wise multiplication. In other words \$c_{ij} = a_{0j} \cdot b_{ij}\$.</p>

<p>To make this abstract example concrete:</p>

<pre><code>&gt;&gt;&gt; a = np.arange(2).reshape(1,2)
array([[0, 1]])
&gt;&gt;&gt; b = np.arange(4).reshape(2,2)
array([[0, 1],
       [2, 3]])
&gt;&gt;&gt; a * b
array([[0, 1],
       [0, 3]])
</code></pre>

<p>Now, the final piece is the ability to cast arrays to different shapes (as I already did in the above example using <code>numpy.reshape</code>. Apart from that command you can also use fancy slicing to achieve the same effect:</p>

<pre><code>&gt;&gt;&gt; np.arange(2)[None, :].shape
(1, 2)
&gt;&gt;&gt; np.arange(2)[:, None].shape
(2, 1)
</code></pre>

<p>So it repeats it along the axis where I put <code>None</code> (and puts all values in the axis where I put <code>:</code>).</p>
    </div>