<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think you have chosen really bad way to model the inheritance relation between a rectangle and a shape.</p>

<p>I believe that every shape has an area. Unlike your <code>Shape</code> class, which does not allow this, only the <code>Rectangle</code> class does.</p>

<p>On other hand, I believe that not all shapes have width and height. If anything, they have a smallest outer rectangle which has a width and height. Unlike, your <code>Shape</code> class which always has width and height and allows to set it to any arbitrary value.</p>

<p>You should turn it inside out.</p>

<p>You can still have the shape be able to give you the smallest outer rectangle (with its width and height), but implementing that method for anything except the Rectangle (where it would just return copy of itself) would be a bit more complex and providing such code for you would go far beyond a code review :) But that way you can provide the width/height pair in a read only manner, making sure that it cannot be modified for shapes where it would lead to corruption (like setting width!=height for a circle).</p>

<p>I would also rather use double for the numeric values as you would soon find out that areas of shapes are not always integers even for shapes which themselves are defined with integers (although this is not the case for rectangles).</p>

<pre><code>class Rectangle;

class Shape
{
public:
  virtual ~Shape() {}
  virtual double getArea() const = 0;
  virtual Rectangle getSmallestOuterRectangle() const = 0;
};

class Rectangle : public Shape
{
public:
  double width, height;

  Rectangle(double width, double height) : width(width), height(height) {}
  virtual ~Rectangle() {}
  virtual double getArea() const {return width * height;}
  virtual Rectangle getSmallestOuterRectangle() const {return *this;}
};
</code></pre>

<p>Further obviously, you cannot create all shapes from just height and width.
If I wanted to create a circle, two variables are too much.
If I wanted to create an arbitrary triangle, two variables are not enough.</p>

<p>In any way, having the Shape/Rectangle/Circle/Triangle classes know anything about streams is a mistake. You can always read the values into variables and pass them through constructor or update the respective property (if you made them public, which is ok here I believe, no setters/getters are needed).</p>
    </div>