<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Using <code>yield</code> is often simpler than building up a list to return. Here it would reduce</p>

<blockquote>
<pre><code>    res = []
    last = seq
    while len(last) &gt; 1:
        first, last = split_sequence(last)
        res.append(first)

    if len(last) == 1:
        res.append(last)

    return res
</code></pre>
</blockquote>

<p>to</p>

<pre><code>last = seq
while len(last) &gt; 1:
    first, last = split_sequence(last)
    yield first

if len(last) == 1:
    yield last
</code></pre>

<p>at which point you could inline <code>split_sequence</code>.</p>

<hr>

<p><code>split_sequence</code> seems unnecessarily complicated to me. The entire <code>extract_subsequences</code> could be written with only one special case as</p>

<pre><code>current = []
for val in seq:
    if current != [] and val != current[-1] + 1:
        yield current
        current = []
    current += [val]

# Test is only necessary because seq might be empty
if current != []:
    yield current
</code></pre>
    </div>