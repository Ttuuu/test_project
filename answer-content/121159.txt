<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Lots of good stuff from <code>@glampert</code> and <code>@Deduplicator</code>.</p>

<h2>Destructor</h2>

<p>I missed an obvious one.<br>
The destructor (to be like an array) must destroy the members in reverse order (taking the catch and throw out for now as I am still working on that).</p>

<pre><code>        ~V() noexcept
        {
            for(std::size_t loop = 0; loop &lt; length; ++loop)
            {
                // Change this line.
                buffer[loop].~V();

                // Into
                buffer[length - 1 - loop].~T();
            }
            ::operator delete(buffer);
        }
</code></pre>

<h2>Optimize Copy Constructor/Assignment</h2>

<p>I believe what <code>@Deduplicator</code> is getting at is that the copy/assignment operator can be optimized under certain situations. If the type <code>T</code> has a no-throw copy constructor and no-throw destrcutor then we can optimize the copy of the array.</p>

<p>The Copy/Swap idiom is designed to be great when there is the possibility of failure and if that happens uses RAII to cleanup and destroy any temporary objects created. But if you don't need that cleanup then you can use an optimized version.</p>

<p>This is where the <code>noexcept</code> keywords comes in. Using template meta-programming we can check if these operations are safe and plant the appropriate code.</p>

<p>I can see the basics here. But my template meta programming is not something I can do of the top of my head for something like this. So watch this space.</p>

<h2>Initializer Lists</h2>

<p>Some obvious constructors missed. We are now in the land of C++14 and rapidly approaching the next version is supposed to be out next year in C++17. So we should allow at least <code>std::initializer_list</code></p>

<pre><code>    template&lt;typename I&gt;
    V(I begin, I end);

    V(std::initializer_list&lt;T&gt; const&amp; list);
</code></pre>

<h2>Container Semantics</h2>

<p>Need to add the required types and methods for it to be considered a normal container.</p>

<h2>Comparison Operators.</h2>

<p>Most containers can be contained to other containers. So it may be worth defining those.</p>
    </div>