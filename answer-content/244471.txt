<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Naming is important</h1>
<p>When you're in the flow and writing code you'll typically remember what variables refer to and you'll often be able to hold the whole code context in your head, particularly with relatively small examples like this.  However, as the code gets bigger / after you've stepped away from it for a while having good names really makes the code more approachable.  <code>bpos</code> isn't really a meaningful name.  It looks like some kind of abbreviation / acronym, possibly <code>boardPosition</code>?  From the way you are using it, it looks like it's actually the state of the game.  Perhaps <code>gameBoard</code> might be more descriptive.  <code>r</code> is even less descriptive.  One letter variables, if you want to use them, should really be confined to local variables, in code that fits on a typical screen.  This reduced the impact of lost context.  It's also a lot easier to search your codebase for something like <code>roundNumber</code> than <code>r</code>.</p>
<h1>No, really, naming is important...</h1>
<p>When developers approach your code, they bring expectations from other code that they've previously seen.  You can obviously introduce your own approaches, but consider if they're actually adding anything.  When I see methods that start with 'is' or 'has', I'm expecting them to return booleans.  When you read code that's been written like this, it helps readability because it often comes out closer to natural language.  So you might have something like:</p>
<pre><code>if(isValidMove(position)) {
    makeMove(position);
} else {...}
</code></pre>
<p>Your <code>isValidMove</code> and <code>isWon</code> methods break this expectation.  As has been pointed out by @Tenfour04 your other method <code>isValidStepCheck</code> kind of satisfies this, however it always returns <code>true</code>.</p>
<p>Generally methods in Java should follow camelCase and describe what they do, so instead of <code>Board</code>, consider <code>printBoard</code>.</p>
<h1>Keep an eye out for redundancy</h1>
<p>You <code>isWon</code> method contains:</p>
<pre><code>if (winner.equals("n")) {
  // ...
} else {
    winner = "n";
}
</code></pre>
<p>If the <code>if</code> fails, then it's because <code>winner</code> is already "n", so there's no need to assign it in the <code>else</code>.  In the same area, consider if you need to check if all three positions are 'x', or all three positions are 'y'.  Would it simply be enough to consider if all three positions are the same?</p>
<p>There's a similar issue in <code>isValidMove</code>:</p>
<pre><code>if (turn % 2 == 0) {
    turn++;
    bpos[num - 1] = " x ";
    Board();
    break;
} else if (turn % 2 == 1) {
    turn++;
    bpos[num - 1] = " o ";
    Board();
    break;
}
</code></pre>
<p>There's a couple of issue... the only difference between the two <code>if</code> clauses is that one is assigning " o " and the other " x ".  If who was moving was worked out first, then you could simplify the code.  You also don't need the second <code>if</code> condition.  If <code>turn % 2</code> isn't '0', then it has to be '1', you don't need to check for it.</p>
    </div>