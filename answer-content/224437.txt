<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Review</h3>

<p>You should take advantage of the bi-directional nature of a doubly linked list. It's a pitty to let it use navigation of a normal linked list just for the sake of enabling inheritance. And why should a normal linked list be able to branch between normal and doubly mode? This is a <strong>code smell</strong>.</p>

<p>A practical way to create a doubly linked list, is to create a circular list. You only need to store the <code>head</code>. <code>tail</code> would be <code>head.prev</code>. This also works with a single node <code>head</code> = <code>head.prev</code> = <code>head.next</code>. The advantage is that less <code>if</code> statements are required to perform <code>insert</code> / <code>delete</code> operations. Walking the nodes starts at <code>head</code> and stops until we encounter <code>head</code> again. We could walk both directions if we wish to.</p>

<p>You can initialise a single node:</p>

<pre><code>self.head = ListNode(x, doubly)
self.head.prev = self.head
self.head.next = self.head
</code></pre>

<p>The delete would be significantly simplified:</p>

<p>After walking the nodes until you get the proper node <code>p</code> given <code>x</code>, you can call</p>

<pre><code>if p.next == p:
    self.head = None
else:
    p.next.prev = p.prev
    p.prev.next = p.next
    if self.head == p:
        self.head = p.next
del p
self._length -= 1
</code></pre>

<p>I don't see a value in using inheritance for these lists.</p>

<hr>

<p>I also don't get why you store <code>p = self.head</code> in <code>insert</code>. It's an unused variable.</p>
    </div>