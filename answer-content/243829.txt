<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Methods vs. Functions</h1>
<p>None of your three solutions are object-oriented. Note: there is nothing wrong with that, in fact, the problem domain is really anemic, so there is not much to model with objects anyway.</p>
<p>However, not being object-oriented, there is no need for objects here. In all three versions you use <em>instance methods</em> (or <em>member functions</em> as C++ calls them). The defining characteristics of instance methods are that they are dispatched ad-hoc (often dynamically) and thus allow for (runtime) ad-hoc polymorphism, and that they have privileged access to the internal representation of the object (via their <em>invisible zeroth <code>this</code> argument</em>, or in Python the very much visible first argument). But, you are not using either of those two features, so there is no need for those instance methods to be … well … instance methods. They should just be functions (or in the case of Java <em>static methods</em>), somewhat like this:</p>
<pre><code>vector&lt;int&gt; twoSum(vector&lt;int&gt; &amp;nums, int target) { /* … */ }
</code></pre>
<pre class="lang-java prettyprint-override"><code>class Solution {
    public static int[] twoSum(int[] nums, int target) { /* … */ }
}
</code></pre>
<pre class="lang-py prettyprint-override"><code>def twoSum(nums, target):
    // …
</code></pre>
<h1>Data types</h1>
<p>There is no restriction in the problem description about the size of the numbers, nor the size of the array. In Java, <code>int</code> can only store numbers from -2147483648 to +2147483647. In C++, <code>int</code> is only guaranteed to be able to store numbers from -32767 to +32767, so if your array is longer than ~30000 items or any of the numbers in the array or the target number are outside of that range, it is not guaranteed to work!</p>
<p>Python <code>int</code> can be arbitrarily large, so there is no problem, but for Java, you should use <a href="https://docs.oracle.com/en/java/javase/14/docs/api/java.base/java/math/BigInteger.html" rel="nofollow noreferrer"><code>java.math.BigInteger</code></a>. C++ doesn't have a suitable type, unfortunately, but you can use third-party libraries such as <a href="https://www.boost.org/doc/libs/1_73_0/libs/multiprecision/doc/html/index.html" rel="nofollow noreferrer"><code>Boost.Multiprecision</code></a>.</p>
    </div>