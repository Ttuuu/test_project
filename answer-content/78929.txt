<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I thought of a quick way to solve this without having to use prime factorization or finding prime numbers. The code I am going to paste is in java.</p>

<pre><code>    int[] answers = new int[20];
    for (int i = 0; i &lt; 20; i++) {
        answers[i] = i + 1;
    }
    int answer = 1;
    for (int i = 0; i &lt; answers.length; i++) {
            if (answers[i] != 1) {
                answer *= answers[i];
                j = 2
                while (answers[i] * j &lt; answers[i].length) {
                    answers[answers[i] * j] /= answers[i]
                    j += 1
                }
            }
    }
    return answer;
</code></pre>

<p>What this does is first it creates an array of all numbers: </p>

<pre><code>answers[]=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20];
</code></pre>

<p>Then for each number that isn't one, I multiply that number to the answer and update the array (divide all elements in the array, divisible by that number, by that number) so:</p>

<pre><code>answer = 2; answers[] = [1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10];
answer = 6; answers[] = [1,1,1,2,5,1,7,4,3,5,11,2,13,7,5,8,17,3,19,10];
answer = 12;answers[] = [1,1,1,1,5,1,7,2,3,5,11,1,13,7,5,4,17,3,19,5];
</code></pre>

<p>etc.</p>

<p>Go through the entire array once and you get the answer. This is much much faster and easier than prime factoring.</p>
    </div>