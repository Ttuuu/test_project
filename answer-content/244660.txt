<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Basic Review</h1>
<ol>
<li><p>You should <code>import print_function from __future__</code>. So you can use print like you can in Python 3.</p>
</li>
<li><p>Your variable names are poor.</p>
<ul>
<li><code>j</code> should be <code>_</code>.</li>
<li>What do <code>j</code>, <code>k</code> and <code>d</code> mean?</li>
<li>Why not just type out <code>parts</code> rather than use <code>pts</code>?</li>
</ul>
</li>
<li><p>The way you're generating key value pairs in not amazing. If you make a function to build 20 keys then it would be much easier to understand. This is as things are split into two core aspects.</p>
<ul>
<li>Building key</li>
<li>Building the dictionary</li>
</ul>
</li>
<li><p>You should really use some functions.</p>
</li>
<li><p>You should really follow PEP 8. Your code is really hard to read because it looks like a block of characters, rather than a Python program.</p>
</li>
</ol>
<h1>Functional changes</h1>
<ol start="6">
<li>
<blockquote>
<p>A trajectory is defined as a list of numbers separated by <code>_</code>.</p>
</blockquote>
<p>You should make it a tuple of numbers, <code>(3, 7, 2, 5)</code>.</p>
</li>
<li>
<blockquote>
<p>I also save the trajectories in separated dictionaries if they have different numbers of steps.</p>
</blockquote>
<p>I see no reason to do this.</p>
</li>
<li><p>You may benefit from using <a href="https://en.wikipedia.org/wiki/Trie" rel="nofollow noreferrer">a trie</a> instead.</p>
<p>Since you're just printing the new dictionaries it doesn't make much sense.
However it looks exactly like what you want datatype wise.</p>
<p>I have included a <code>build</code> and an <code>as_dict</code> method to make understanding how it works a little simpler. You can easily remove the need for <code>build</code> by using it to build the trie directly from <code>generate_keys</code>.</p>
</li>
</ol>
<pre class="lang-py prettyprint-override"><code>from __future__ import print_function
import random


def generate_keys(amount, choices):
    for _ in range(amount):
        yield tuple(
            random.choice(choices[i])
            for i in range(random.randint(1, len(choices)))
        )


class Trie(dict):
    value = DEFAULT = object()

    @classmethod
    def build(cls, mapping):
        trie = cls()
        for keys, value in mapping.items():
            node = trie
            for key in keys:
                node = node.setdefault(key, cls())
            node.value = value
        return trie

    def _as_dict(self, path):
        for key, value in self.items():
            keys = path + (key,)
            if value.value is not self.DEFAULT:
                yield keys, value.value
            for item in value._as_dict(keys):
                yield item

    def as_dict(self):
        return dict(self._as_dict(()))


paths = {}
for key in generate_keys(20, [range(3), range(4), range(5)]):
    paths[key] = random.randrange(10)

trie = Trie.build(paths)
paths_new = trie[1].as_dict()

# Sort the output so it's easier to read
print('Initial dictionary =', dict(sorted(paths.items())))
print('Inital Trie =', trie)
print('Updated dictionaries =', dict(sorted(paths_new.items())))
</code></pre>
    </div>