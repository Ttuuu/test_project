<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm not really sure that there is any good argument having these static fields, especially when it comes to unit testing the <code>WebDriver</code> class.</p>

<pre><code>public class WebDriver
{
    private static Dictionary... // this
    private static Dictionary... // this
    private static AppSetting... // this

    static WebDriver() // this
    {
        ...
    }

    ...
}
</code></pre>

<p>I would suggest you change those to <code>private readonly</code> fields instead.</p>

<p>and then we have this <code>Initialize()</code> method hanging out on it's own -- which means your code could not compile as is.</p>

<pre><code>public class Foo // where is the class?
{
    public void Initialize()
    {
        if (WebDriver == null)
        {
            WebDriver = new WebDriver(new AppSettingsConfiguration())
                .GetWebDriver(BaseData.Browser);
        }
    }
}
</code></pre>

<p>I highly would not recommend passing around the <code>AppSettingsConfiguration</code> class, when it seems like the only time you use it is to pull a string value by calling <code>_AppSettingsConfiguration.GetConfiguration("WebDriverFolderPath")</code>.</p>

<p>It would make more sense for you to handle reading your configuration somewhere else and not make the <code>WebDriver</code> responsible for handling that... (This actually breaks your "S" in the SOLID principle).</p>

<p>I would probably advise to consider refactoring it along these lines...</p>

<pre><code>public enum Browsers { Unknown, Ie, Chrome, Edge, FireFox }

public class WebDriverFactory
{
    private readonly string _path;

    public WebDriverFactory(string path)
    {
        if (String.IsNullOrEmpty(path)) throw new ArgumentNullException(nameof(path));
        // also, consider to a check that the path exists

        _path = path;
    }

    public IWebDriver Construct(Browsers browser)
    {
        switch (browser)
        {
            case Browser.Edge:
            {
                var options = new EdgeOptions()
                {
                    PageLoadStrategy = PageLoadStrategy.Eager,
                    UseInPrivateBrowsing = true
                };
                return new EdgeDriver(_path, options, TimeSpan.FromSeconds(60));
            }
            case.Unknown:
                throw new Exception("not a valid browser");
            default:
                throw new NotImplementedException();
        }
    }
}
</code></pre>
    </div>