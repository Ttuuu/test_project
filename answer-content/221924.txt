<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There's an even better way to generate the Pascal's triangle that only requires O(1) memory. It can even calculate a certain row directly without requiring previous rows to be computed.</p>

<p>It works like this:</p>

<ul>
<li>the first number in each row is always 1.</li>
<li>consider the fraction (n / 1) where n in the row index (1-based)</li>
<li>the 2nd number is obtained by multiplying the first number by this fraction</li>
<li>decrement the numerator of the fraction by 1 and increment the denominator by 1</li>
<li>obtain the 3rd number by multiplying the fraction with the 2nd number</li>
<li>and so on, for (n + 1) numbers</li>
</ul>

<p>Worked Example:</p>

<p>suppose n = 4</p>

<ul>
<li>1st number = 1</li>
<li>2nd number = 1 * (4 / 1) = 4</li>
<li>3rd number = 4 * (3 / 2) = 6</li>
<li>4th number = 6 * (2 / 3) = 4</li>
<li>5th number = 4 * (1 / 4) = 1</li>
</ul>

<p>which is exactly the 4th row of triangle</p>

<p>Code:</p>

<pre class="lang-py prettyprint-override"><code>def print_row(n):
    numerator, denominator = n, 1
    cur = 1
    for _ in range(n + 1):
        print(cur, end='\t')
        cur = (cur * numerator) // denominator
        numerator -= 1
        denominator += 1
    print()

for row in range(5):
    print_row(row)
</code></pre>
    </div>