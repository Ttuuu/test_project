<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>I don't think there is actually a need for two channel. Whether the sub-slice is from the left part or the right part does not matter when you merge, you can simply use a single channel.</p>

<pre><code>MS := make(chan []byte)
go mergeSort(arr[:len(arr)/2], MS)
go mergeSort(arr[len(arr)/2:], MS)
left, right := &lt;-MS, &lt;-MS
</code></pre>

<p>This is better because it avoids potential blocking when <code>right</code> is completed before <code>left</code>.</p></li>
<li><p>Repitively calculating <code>lIndex</code>+<code>rIndex</code> is verbose. Use a variable to record index of <code>sortArr</code>. And use <code>var</code> statement to declare variables that does not need initial value. Go's <code>if</code> statement allows a short statement before the condition; use it to simplify variables:</p>

<pre><code>var index, lIndex, rIndex int
//Combindexne both sides
for lIndex &lt; len(left) &amp;&amp; rIndex &lt; len(right) {
    if l, r := left[lIndex], right[rIndex]; l &lt;= r {
        sortArr[index] = l
        lIndex++
    } else {
        sortArr[index] = r
        rIndex++
    }
    index++
}
</code></pre></li>
<li><p>To fill the remaining <code>sortArr</code>, Go has a <code>copy</code> builtin. Since only one slice is not empty, it is safe to copy without advancing <code>index</code>.</p>

<pre><code>copy(sortArr[index:], left[lIndex:])
copy(sortArr[index:], right[rIndex:])
</code></pre></li>
</ol>
    </div>