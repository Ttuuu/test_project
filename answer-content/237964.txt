<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Correctness:</strong></p>

<p>You are dividing by <code>0</code> here</p>

<pre><code>((y &gt;= 0) &amp;&amp; (x &gt;= 0) &amp;&amp; (x &gt; std::numeric_limits&lt;T&gt;::max() / y)
</code></pre>

<p>and here</p>

<pre><code>((y &gt;= 0) &amp;&amp; (x &lt; 0) &amp;&amp; (x &lt; std::numeric_limits&lt;T&gt;::min() / y))
</code></pre>

<p>Note that division can also underflow and overflow.</p>

<hr>

<p><strong>Efficiency:</strong></p>

<p>Your code is about 1000 times slower than MKL for multiplying large <code>float</code> matrices, which is state-of-the-art, but there are other implementations that have similar performance to MKL, such as OpenBLAS.</p>

<p>The reasons your code is hugely inefficient include</p>

<ol>
<li><p>The layout of your data requires extra indirection (one chunk of data is better)</p></li>
<li><p>The loops are cache-unfriendly (The triple loop is inefficient for dot products)</p></li>
<li><p>Division is much more expensive than multiplication, typically, and you are doing it twice to check that multiplying is "OK" (which this fails to do)</p></li>
</ol>

<hr>

<p><strong>Some minor things I noticed:</strong></p>

<p><code>constexpr</code> seems pointless here, since you don't know the arguments at compile time.</p>

<p><code>this-&gt;</code> is unnecessary</p>

<p>Matrix dimensions are <code>uint</code>, but the methods returning them return <code>int</code></p>

<p>There is no need to store <code>rows</code> and <code>cols</code> in the class, since they are known to the compiler (template parameters)</p>

<hr>

<p><strong>Odd choice:</strong></p>

<p>Your class can't handle arbitrary matrix sizes, unless they are known at compile time.</p>

<p>But since you are doing that, you also should avoid throwing a <em>runtime</em> error, if matrix sizes do not match -- you should know this before the program runs.</p>

<hr>

<p><strong>Compilation errors:</strong></p>

<p>Shadowing template parameters:</p>

<pre><code>template&lt;class T, uint m, uint n&gt;
class Matrix {
// ...
template&lt;class T, uint m, uint n&gt; friend std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, const Matrix&lt;T,m,n&gt;&amp; matrix);
// ...
};
</code></pre>
    </div>