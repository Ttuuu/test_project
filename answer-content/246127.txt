<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>From a short review;</p>
<ul>
<li><p>Your code is really hard to read/parse, I would not want to maintain this</p>
</li>
<li><p>You have no useful comments, <code>// &lt;- the quantity</code> is not useful</p>
</li>
<li><p><a href="https://stackoverflow.com/questions/5171651/why-is-a-semicolon-required-at-end-of-line">You should terminate your lines with <code>;</code></a>,</p>
</li>
<li><p>I don't know if you have control over how you get the data, but getting it as an object is not helpful, this would be much easier/readable if you got a list instead</p>
</li>
<li><p>In fact, this code is full of functional programming on objects, if you really want to do this, you should convert your objects to lists first</p>
</li>
<li><p><code>Array(10)</code> &lt;- You hardcoded <code>10</code>, at least go for <code>Object.keys(chunks).length</code></p>
</li>
<li><p><code>koe</code> is an unfortunate variable name, why is it 0.5? (See lack of comments)</p>
</li>
<li><p>In a <code>solution</code> driven approach, you should probably never enumerate over the keys of the payload (<code>Object.keys(percentages[chunkId].payload).forEach</code>), the payload could have more fields than the solution</p>
</li>
<li><p>This should be 1 line</p>
<pre><code>const perc =
  percentages[chunkId].payload[propId] / (requirements[propId] / 100)
</code></pre>
</li>
<li><p>I see this as a <a href="https://en.wikipedia.org/wiki/Knapsack_problem" rel="nofollow noreferrer">Knapsack problem</a>, which is NP-hard, meaning that getting the perfect result will always be slow, in fact I see this as a multi-dimensional knapsack problem which is even harder than the regular knapsack problem.</p>
</li>
</ul>
<p>From the comments, if we think of <code>(a,b,c)</code> as (length, width, height) and <code>requirements</code> as a bag of size (500, 1200, 1500). Then the question is how can we best (best as, least space wasted) fill the bag with different <code>chunks</code> (they all have their <code>size</code> defined in <code>payload</code>).</p>
    </div>