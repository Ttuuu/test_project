<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Please add some space to your code - it can be hard to read when it's all crammed together.  For example, compare these two versions of the same function; first, as written:</p>

<blockquote>
<pre><code>//function to find the number of available available_spots
int available_spots(char (*GRID)[7])
{
  int spots=0;
  for(int i=1;i&lt;6;i=i+2)
  for(int j=1;j&lt;6;j=j+2)
  {
    if (GRID[i][j]==' ')
    spots++;
  }
  return spots;
}
</code></pre>
</blockquote>

<p>Secondly, after reindenting and adding some space for the operators to breathe:</p>

<blockquote>
<pre><code>// Count the number of empty positions
int available_spots(char grid[][7])
{
    int spots = 0;

    for (int i = 1;  i &lt; 6;  i += 2) {
        for (int j = 1;  j &lt; 6;  j += 2) {
            if (grid[i][j] == ' ') {
                ++spots;
            }
        }
    }

    return spots;
}
</code></pre>
</blockquote>

<hr>

<p>Use <code>ALL_CAPS</code> names for preprocessor macros, but not for ordinary variables or functions.  It's important to be able to tell them apart (because macros don't obey the rules of scope, for instance).</p>

<hr>

<p>The game grid is 7✕7 = 49 elements, but only 3✕3 = 9 of those elements are actually storing game state - that's only ⅕.  The rest are filled with <em>presentation</em> constants that never need to be changed, and can be produced when printing (they don't need to be stored).</p>

<hr>

<p>Look at this repetition:</p>

<blockquote>
<pre><code>    case 1:
          if (GRID[1][1]=='x'||GRID[1][1]=='o')
          {
            printf("\nPosition already occupied!!!\n");
            return 0;
          }
          else
            return 1;
    break;
    case 2:
          if (GRID[1][3]=='x'||GRID[1][3]=='o')
          {
            printf("\nPosition already occupied!!!\n");
            return 0;
          }
          else
            return 1;
    break;
</code></pre>
</blockquote>

<p>Here, we're doing two things: mapping the input number to a position, and checking whether it's occupied.  If we separate those computations, we'll find we don't need to repeat the tests.</p>

<p>Something like this:</p>

<pre><code>if (input &lt; 1 || input &gt; 9) {
    /* out of range */
    return 0;
}

--input;   /* now 0-8 */
int x = input % 3;
int y = input / 3;

char occupier = grid[2*y+1][2*x+1];

if (occupier != ' ') {
    printf("\nPosition already occupied!!!\n");
    return 0;
} else {
    return 1;
}
</code></pre>

<p>Similar techniques can reduce duplication elsewhere in the program.</p>

<hr>

<p>Enable more warning messages in your compiler.  It will help you spot errors such as these:</p>

<pre class="lang-none prettyprint-override"><code>gcc -std=c17 -fPIC -g -Wall -Wextra -Wwrite-strings -Wno-parentheses -Wpedantic -Warray-bounds      -Wconversion    214336.c    -o 214336
214336.c: In function ‘minimax’:
214336.c:287:11: warning: unused variable ‘j’ [-Wunused-variable]
     int i,j;
           ^
214336.c:287:9: warning: unused variable ‘i’ [-Wunused-variable]
     int i,j;
         ^
214336.c: In function ‘valid’:
214336.c:114:1: warning: control reaches end of non-void function [-Wreturn-type]
 }
 ^
214336.c: In function ‘terminal_state’:
214336.c:272:1: warning: control reaches end of non-void function [-Wreturn-type]
 }
 ^
214336.c: In function ‘minimax’:
214336.c:325:1: warning: control reaches end of non-void function [-Wreturn-type]
 }
 ^
</code></pre>
    </div>