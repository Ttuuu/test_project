<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>All of your approaches are very brute force.  The answer can be computed with a bit of mathematical reasoning.  For an <em>m</em> × <em>n</em> lattice, all paths will have <em>m</em> + <em>n</em> segments, of which <em>m</em> segments will go down and <em>n</em> segments will go right.  So, out of <em>m</em> + <em>n</em> slots, count the ways to pick <em>m</em> downward moves; the rest of them will be rightward moves.  The number of paths is:</p>

<p>$${m + n \choose m} = {m + n \choose n} = \frac{(m+n)!}{m! \, n!}$$</p>

<p>So, the Python solution is simply:</p>

<pre><code>from math import factorial

def lattice_paths(m, n):
    return factorial(m + n) // factorial(m) // factorial(n)
</code></pre>

<p>Even though the calculation involves large factorials, Python supports big integers seamlessly, and arrives at the answer nearly instantaneously.</p>
    </div>