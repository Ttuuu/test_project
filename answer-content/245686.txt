<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First of all you are doing great. This code is already above the average.</p>
<p>But of course it can be improved. The process is eternal, actually. So don't forget to post the next iteration as well :)</p>
<p>The first thing that catches my eye is inconsistent user level error reporting. Why some
error messages are shown as is and some are lavishly decorated and sent through a session variable? I would stick with the former. There is no point a redirection. Just show all errors in place, then show the form and fill all the entered values in for the better usability.</p>
<p>Besides, PHP code should never contain any HTML. Imagine a designer would create a nifty icon to be shown next to the error message. Are you going to edit every occurrence of the error message in your code? All the decorations must be added at the output time, not at the definition. Whatever way you choose, remove all HTML from the error message. Add it at output</p>
<p>Another matter is redundant input treatment. Why both <code>strip_tags()</code> and <code>htmlspecialchars()</code>? Why <code>empty()</code> for a variable which is deliberately set? For the existing variable you can use just <code>if (!$var)</code>. <code>empty()</code> should be used only if you want to know whether a variable is not set or has a falsey value.</p>
<p>Also, using $_POST when you already assigned the validated values to variables is <strong>flat out inconsistent.</strong></p>
<p><code>htmlspecialchars()</code> should be used on the output, not input.</p>
<p>Besides, for such a specific data as user information, you shouldn't sanitize it, but rather <strong>validate</strong> it instead, checking for the improper input and giving a warning. Hence, instead of sanitization, I would just assign input values to variables and then validate them</p>
<pre><code>$first_name = $_POST['first_name'] ?? '', 
$last_name = $_POST['last_name'] ?? '', 
$email = $_POST['email'] ?? '';

if (!trim($first_name)) {
    $errors[] = "Fill in first name to sign up";
}
if (!ctype_alnum($first_name)) {
    $errors[] = "Invalid first name, it only may contain letters or digits";
}
</code></pre>
<p>For email and password it is going to be a bit different, as for the password we don't want to verify the contents at all and for the email we have a distinct validation function</p>
<pre><code>if (!trim($pw)) {
    $errors[] = "Fill in password to sign up";
}
if (!trim($pw2)) {
    $errors[] = "Confirm password to sign up";
}
if (!trim($email)) {
    $errors[] = "Fill in email to sign up";
}
if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    $errors[] = "Invalid email";
}
</code></pre>
<p>On a side note, consider to get rid of the username. If you think of it, email just duplicates its functionality. And having two entities to serve for the same purpose (to identify a user) adds nothing but a confusion. Only if you are going to show usernames somewhere, it makes sense to keep them. But given there is a name, it makes sense to use it as a display name.</p>
<p>Another point is redundancy again. As you may have noticed, mysqli prepared statements are a little verbose, repeating the same prepare/bind execute over and over again.</p>
<p>Well, for practice, it's indeed a good thing to write some statements manually, just to get the feel, to see how it works. But for the real life application it looks redundant.  Why not to write a simple function to encapsulate all the routine inside?</p>
<p>I wrote a <a href="https://phpdelusions.net/mysqli/simple" rel="nofollow noreferrer">mysqli helper function</a>  exactly for the purpose.</p>
<p>Now let's see how we can greatly reduce the amount of code.</p>
<pre><code>if (!$errors) {
    $sql = "SELECT email FROM users WHERE email=?";
    $row = prepared_query($con, $sql, [$email])-&gt;get_result()-&gt;fetch_row();
    if ($row) {
        $errors[] = 'E-mail exists';
    }
}
</code></pre>
<p>Just like @mick said, the following line is absolutely redundant.</p>
<pre><code>if ($row &amp;&amp; $row['email'] == $_POST['email']) {
</code></pre>
<p>in reality, it could (and should) be shortened to just</p>
<pre><code> if ($row) {
</code></pre>
<p>because <code>$row</code> already serves as a flag. It is empty when no such email is found and not empty otherwise. No need for anything else.</p>
<p>The same function could be used for the insert too,</p>
<pre><code>$sql = "INSERT INTO users (first_name, last_name, email, pw, friend_array)
        VALUES (?, ?, ?, ?, ?, ?)";
prepared_query($con, $sql, [$first_name, $last_name, $email, $pw, $friend_array]);
</code></pre>
<p>Don't you like how meaningful and tidy your code becomes at once?</p>
<p>For the convenience, you can put this function's definition <a href="https://phpdelusions.net/mysqli/mysqli_connect#credentials_file" rel="nofollow noreferrer">in the same file with mysqli connection code</a></p>
    </div>