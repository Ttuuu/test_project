<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>std::vector&lt;Point&gt; closed_list;
</code></pre>
</blockquote>

<p>There are two operations that are applied to <code>closed_list</code>:</p>

<ol>
<li>Add a point.</li>
<li>Check whether a given point is already in the list.</li>
</ol>

<p>A <code>vector</code> can do that job, but there are other data structures that are meant to support that kind of use case, for example <code>std::unordered_set</code> (or an open-addressing variant thereof, which sadly isn't in <code>std</code>).</p>

<blockquote>
<pre><code>// Total cost is the sum of past distance and the heuristic (which assumes just line-of-flight)
child.total_dist = child.dist_to_start + child.position.SqrDistTo(end_node.position);
</code></pre>
</blockquote>

<p>What is <code>SqrDistTo</code>? I didn't see the definition. If it does what it sounds like it would do, namely computing the distance squared (skipping the square root), then it is <a href="http://theory.stanford.edu/~amitp/GameProgramming/Heuristics.html#euclidean-distance-squared" rel="nofollow noreferrer">wrong</a>: the heuristic distance can be larger than the actual distance which is a direct violation of the condition that A* places on the heuristic. Some "tactical overestimation" is sometimes acceptable despite being technically wrong, but squared distance overestimates by an unlimited amount, getting worse and worse for longer distances. If it does something else, or is just "filler" and not representative of the real code, maybe this point of feedback does not apply.</p>
    </div>