<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><code>xTries</code> doesn't need to be a function. All it's doing is returning <code>10</code>. Just make it a variable defining the starting number of tries:</p>

<pre><code>STARTING_TRIES = 10

. . .

tries = STARTING_TRIES
</code></pre>

<p>Just like what you did with <code>START_BALANCE</code>.</p>

<hr>

<p><code>POSITIVES</code>, and similar collections should arguably be sets, not lists. Since you're using them to check for membership in the collection using <code>in</code>, sets will be much faster than lists. In your case here, it doesn't matter. It's a good thing to think about though. Change it to:</p>

<pre><code># Just change to curly braces to make it a set
POSITIVES = {"yes", "yeah", "y", "yep", "roger", "yea", "positive", "play"}
</code></pre>

<p>When using lists, <code>in</code> will have to search potentially the entire list to see if the element is in it. With sets though, <code>in</code> only has to search a small fraction of the list. Once you're dealing with large amounts of data, this can make a significant difference.</p>

<hr>

<p>Your current way with <code>POSITIVES</code> is more complicated than it needs to be anyway. Unless you want input validation to be super strict, it seems like the only requirement for being classified as "positive" or "negative" is that positive inputs begin with <code>'y'</code> or <code>'p'</code>, and that negative inputs start with <code>'n'</code>.</p>

<p>You could just make these quick functions:</p>

<pre><code>def is_positive(s):
    # s is truthy if non-empty
    return s and s[0] in {'y', 'p'} 

def is_negative(s):
    return s and s[0] == 'n'
</code></pre>

<p>This is a little more forgiving.</p>

<p>If you could guarantee that the input is non-negative, the <code>s and</code> check would be unnecessary. It's needed here though so <code>s[0]</code> doesn't throw on an empty input. You could also using slicing to avoid the exception:</p>

<pre><code>def is_positive(s):
    # s[0:1] also gets the first character, but returns "" if s is empty
    return s[0:1] in {'y', 'p'} 

def is_negative(s):
    return s[0:1] == 'n'
</code></pre>

<p>Although I'm not sure if that's clearer.</p>

<hr>

<p><code>menuPlay</code> is very jarring to read. The function is called <code>menuPlay</code>, then you create a local variable called <code>menuPlay</code>. You also try to catch a <code>TypeError</code>, although you appear to be using Python 3. I'm not aware of a case where <code>input</code> would throw a <code>TypeError</code>. And if this is actually Python 2, then a much better solution is just to use <code>raw_input</code> instead.</p>

<p>This is a case where a <code>while True</code> loop (or a do...while if Python had them) is handy. I'd just write this as:</p>

<pre><code>def menu_play():
    while True:
        inp = input("...")

        # Return if the input is non-empty
        if inp:
            return
</code></pre>

<p>If you think about it though, is this even necessary? The prompt is <code>"Press any key to start the game"</code>. The "enter" key is a valid key though, but pressing just that is rejected by your program. It might make more sense to get rid of that function and just write:</p>

<pre><code>menu()

# We don't care about what key was pressed, just that one (+ enter) was
input("Press any key and enter to continue")

tries = STARTING_TRIES
</code></pre>

<hr>

<p>Python uses snake_case, not camelCase (unless you're working with other code that already uses camelCase). You use it in a few places, but are inconsistent. Just remember, <em>Python</em> uses <em>snake_case</em> (<code>a_b</code>).</p>

<hr>

<pre><code>bet &lt;= balance and bet &gt;= 0
</code></pre>

<p>can be more clearly written as</p>

<pre><code>0 &lt;= bet &lt;= balance
</code></pre>

<p>Python, unlike most languages, allows for "chaining" of the comparison operators.</p>

<hr>

<p>Your design of <code>game_state</code> isn't optimal. Say you leave this code for awhile, and come back. Are you going to be able to accurately remember what <code>game_state[1]</code> represents?</p>

<p>I would use a simple dictionary:</p>

<pre><code>game_state = {"continue?":True, "balance":START_BALANCE}

. . .

print("Your balance is: "+str(game_state["balance"])+"$")

. . .

while game_state["continue?"]:
</code></pre>

<p>Which I feel reads better. Using Strings here has the disadvantage though that a typo in the String key when accessing <code>game_state</code> will cause a <code>KeyError</code> to be thrown at runtime. <code>game_state[2]</code> will still cause an exception in your code, but it's arguably easier to typo a String than it is a single digit number.</p>

<p>You could also make this a full class, then your IDE could assist using auto-completion. You're likely only ever going to need a single instance of the class though (with the current design), so I'm not sure it's worth it here.</p>

<p>Your design still has problems though:</p>

<ul>
<li><p>Really, grouping these two bits of data into a state isn't massively advantageous. You have them grouped inside a global variable, so instead of having two smaller global variables, you have one larger one. Grouping them slightly complicates accessing/reading (since you need to index the global using either a numeric or String key). As long as these are global variables, I don't see much point in grouping them together. If you made them locals that are being passed around, it might make a little more sense, but even then...</p></li>
<li><p>Does it make much sense to <em>store</em> in the state whether or not a player wants to continue? You only use the first boolean part of the state in two places: returning it from <code>main</code>, and checking for it at <code>while game_state[0]:</code>. It makes sense as a return value from <code>main</code>*, but why is it part of the state? It's only ever needed at the call-site of <code>main</code>. Note how you don't pass their decisions between recursive calls. There doesn't seem to be any reason to store it. I'd make the entire state just the balance.</p></li>
</ul>

<p><code>main</code> can still return whether or not the player wants to continue though:</p>

<pre><code>if playerChoice in POSITIVES: 
    print(f"New round started!\nYour balance is: {balance}$")
    return True, balance # A tuple instead, although a list would still work

elif playerChoice in NEGATIVES:
    print(f"\nThanks for playing, {userName}!\n")
    return False, balance
</code></pre>

<p>Then, do something like:</p>

<pre><code>keep_playing = True
while keep_playing:
    guess_list = []
    keep_playing, balance = main(0, tries, global_balance, True, guess_list, xBets(global_balance))
</code></pre>

<p><code>*</code> Arguably, <code>main</code> should be responsible for the looping, and everything you currently have in <code>main</code> should go into a function called <code>play_round</code> or something. In most designs, the <code>main</code> is the central function that ties everything together, and in many languages, it's the obligatory entry point to the program that the user never manually calls. In my opinion, in Python, <code>main</code> should really only be called from an "import guard". It's more inline with the conventions of other languages, and just makes more sense.</p>

<hr>

<p>As the other answer notes, you're using far too much recursion here. I like recursion, I think it gets too much flak. You're using it here though for cases where simple iteration would be simpler. The major downside of recursion in a language like Python where recursion isn't optimized away is that it can lead to Stack Overflows. With how your code is now, if your user fails a validation check too many times (in say, <code>xBets</code>), you'll recurse too many times, and get a Stack Overflow. I'd write <code>xBets</code> as:</p>

<pre><code>def ask_for_bet(current_balance):
   while True:
       try:
           print("--------------------------------")
           bet = int(input("Enter your bet:     "))
           if (0 &lt;= bet &lt;= current_balance):
               return bet # Bet is already an int, no need for "int" again here

           else:
               print(f"Your bet of {bet}$ has to be less than your balance of {current_balance}$. Try again.")
               # Let it loop again instead of recursing

       except ValueError:
           print("Please enter a valid number")
</code></pre>

<p>If you like recursion and want to be ""allowed"" or even encouraged to use it, I'd look into functional languages. Recursion is the main (or arguably the only) way to loop in Haskell, and many other functional languages allow for optimization that prevent Stack Overflows. Scala supports optimization and a <code>@tail-call</code> annotation that warns you if it can't be optimized. Clojure has the <code>recur</code> special form that emulates Tail-Call Optimization. Python's a great language, but there may be others out there that are more in-line with how you approach problems.</p>

<hr>

<hr>

<p>Those are the major things I saw. This isn't awful code, but there are a few things that can be improved. Good luck!</p>
    </div>