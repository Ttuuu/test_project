<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code wouldn't compile because you give <code>nextPrime</code> two arguments but it expects only one. Also, I think your parameter names should be a little clearer than <code>n</code>. You say it's in a range, so let's say it in the code :</p>

<pre><code>public int nextPrime(int start, int end)
</code></pre>

<p>I won't concentrate on the sieve itself, but your code could be drastically improved in performance with some caching.</p>

<p>If I call :</p>

<pre><code>nextPrime(20_000, 2_000_000);
nextPrime(50_000, 1_000_000);
</code></pre>

<p>You compute the sieve twice while the result could be cached. Compute the prime numbers at most once, and you'll save some processing time.</p>

<p>You could potentially keep the prime numbers in a binary tree, which would make the search a little faster than a simple list. When you ask for a specific range, check in your tree if this range already exists, if so, pick a random prime number in this range. If there's a part of the range that already exists, compute the rest of the range and add it to your tree. If the range doesn't exist at all, compute it all and add it to the tree.</p>

<p>If you use this generator a lot, you'll realize the performance will be <strong>much</strong> better.</p>

<p>Also, maybe create a <code>class</code> to hold all this information.</p>
    </div>