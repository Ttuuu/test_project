<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Take a look at what translating</p>
<pre><code>1241234113
</code></pre>
<p>results in when aligned slightly differently</p>
<pre><code>                       One       Billion 
Two  Hundred   Forty   One       Million 
Two  Hundred   Thirty  Four      Thousand 
One  Hundred           Thirteen  
</code></pre>
<p>you can see that there are several patterns here.</p>
<ol>
<li><p>Every number can be chunked into groups of 3 digits like this <code>1,241,234,113</code>.</p>
</li>
<li><p>Each chunk has a different value for the last column, which is one of "Billion", "Million", etc.</p>
</li>
<li><p>Within each chunk, there is one digit at the hundreds place.</p>
</li>
<li><p>Within each chunk, the last 2 digits have a special case till 20, otherwise it's a special word for the ten's place, and the one's place.</p>
</li>
</ol>
<p>So the only variables you need are just</p>
<pre><code>std::string const till_twenty[20] = {"", "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "Ten", "Eleven", "Twelve", "Thirteen", "Fourteen", "Fifteen", "Sixteen", "Seventeen", "Eighteen", "Nineteen"};
std::string const tens_place[10] = {"", "Ten", "Twenty", "Thirty", "Forty", "Fifty", "Sixty", "Seventy", "Eighty", "Ninety"};
std::string const thousands[4] = {"", "Thousand", "Million", "Billion"};
</code></pre>
<p>Note that I've renamed the variables slightly, and made them <code>const</code>. Also, there's no need for the word <code>Zero</code>, since that will only be written if the entire number is 0.</p>
<p>Now you can build up the functions for the 3 digit chunks</p>
<pre><code>//for the first digit    
std::string hundreds_place(int n) {
   return n ? till_twenty[n] + " Hundred " : "";
}
  
// for the 2nd and 3rd digit  
std::string ones_and_tens_place(int n) {
    return n &lt;= 20 ? till_twenty[n] : tens_place[n / 10] + 
                                      (n % 10 ? " " + till_twenty[n % 10] : "")
}

// putting all 3 digits together
std::string by_hundreds(int n) {
    return hundreds_place(n / 100) + ones_and_tens_place(n % 100);
}
</code></pre>
<p>Now you can recursively build the 3 digit numbers by keeping track of which power of 1000 is being currently processed</p>
<pre><code>std::string by_thousands(int n, int i) {    // i keeps track of the chunk
    return n ? by_thousands(n / 1000, i + 1) + 
               by_hundreds(n % 1000) + " " 
               + thousands[i] + " "
             : "";
}
</code></pre>
<p>and then finally it can all be put together</p>
<pre><code>std::string numberToWords(int num) {
    std::string res = num ? by_thousands(num, 0) : "Zero  ";
    // with a bit of processing to get rid of trailing spaces
    return res.substr(0, res.length() - 2);        
}
</code></pre>
    </div>