<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Sampling method</h2>

<p><a href="https://docs.python.org/3/library/random.html#random.sample" rel="nofollow noreferrer"><s><code>sample()</code></s></a> is the wrong kind of sampling here since it draws <em>k</em> random samples from the given population/alphabet <em>without repetition</em>. Instead you should should use <a href="https://docs.python.org/3/library/random.html#random.choices" rel="nofollow noreferrer"><code>choices()</code></a> which allows repetition of the same items.</p>

<p>Normally you want as much entropy as possible in the given “space” (here: <em>k</em> = 15 items chosen from <em>N</em> = 66 Arabic digits, basic Latin letters and some punctuation). If you disallow repetitions you reduce the size of the key space (although not significantly<sup>1</sup>) and risk more (frequent) collisions at no benefit and more costly sample computation<sup>2</sup>.</p>

<h2>Source of (pseudo-)randomness</h2>

<p>You should also consider that the <code>random</code> module’s default (pseudo-)random number generator is not normally “safe”. See <a href="/questions/200355/how-can-my-generate-unique-key-method-be-more-pythonic#comment385764_200356">Gaipher’s comment</a> for a possible safe alternative.</p>

<h2>Avoid magic numbers, allow parameters if possible</h2>

<p>Additionally you should avoid unexplained "magic numbers" (like 15) and allow parameters (with sensible defaults) for arbitrarily chosen values (like <code>length</code>).</p>

<h2>Resulting code</h2>

<pre><code>def generate_unique_key(length=15):
    array = # ... construct character set
    return "".join(random.choices(array, k=length))
</code></pre>

<p>For Python versions prior to 3.6 you can provide a simple implementations of <code>choices()</code> yourself:</p>

<pre><code>import random
try:
    random_choices = random.choices
except AttributeError:
    import itertools
    def random_choices(population, *, k=1):
        return map(random.choice, itertools.repeat(population, k))
</code></pre>

<hr>

<p><sup>1</sup> Key space comparison:</p>

<ul>
<li><em>with</em> repetition: \$N^k = 66^{15} \approx 2.0 \cdot 10^{27}\$</li>
<li><em>without</em> repetition: \$\prod^{N}_{i=N-k+1} i = \frac{!N}{!(N - k)} = \frac{!66}{!(66 - 15)} \approx 3.5 \cdot 10^{26}\$</li>
</ul>

<p><sup>2</sup> An optimal algorithm for random samples <em>without</em> repetition is more complex than one <em>with</em> repetition and requires either \$O(k)\$ intermediate storage or \$O(k^2)\$ runtime (with <em>k</em> being the sample size) to keep track of previously drawn items.</p>
    </div>