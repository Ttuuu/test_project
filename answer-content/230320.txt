<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The <code>dictSessionVars</code> is initialized together with the default instance of the class:</p>

<blockquote>
<pre><code>Private Sub Class_Initialize()
    If this.dictSessionVars Is Nothing Then Set this.dictSessionVars = GetPersistentDictionary()
End Sub
</code></pre>
</blockquote>

<p>That's great, because it ensures you always have a valid managed storage.</p>

<blockquote>
  <p>That being said, If you plan to use this class in one of your
  projects, you need to call the <code>RemoveAll</code> method during the
  <code>Workbook_BeforeClose</code> event.</p>
</blockquote>

<p>Ok. Consider this code:</p>

<pre><code>Dim borked As AppSessionVariables
Set borked = New AppSessionVariables '&lt;~ initialize handler runs here, before LHS gets the reference

borked.Add "Leak", "Leak"
Set borked = Nothing '&lt;~ no terminate handler, any instance state is leaked memory

Set borked = AppSessionVariables '&lt;~ default instance ref.
borked.Add "Leak?", "Leak?"
Set borked = Nothing '&lt;~ instance state is destroyed, but managed AppDomain is still up

'initialize handler runs again here, before .Add is invoked:
borked.Add "Leak?", "Leak?" '&lt;~ should fail to add existing key
</code></pre>

<p>How many <code>CorRuntimeHost</code> instances are running at that point?</p>

<p>I think the class should have a <code>Terminate</code> handler, and the <code>CorRuntimeHost</code> object reference should be persisted at instance level, and cleanly stopped in the terminate handler.</p>

<p><strong>The class should throw errors if it is initialized as a non-default instance</strong>. That way <code>Set foo = New AppSessionVariables</code> would throw an error before <code>foo</code> even gets ahold of the object reference, and a new <code>CorRuntimeHost</code> wouldn't be created in that case; invoking this upon entering any <code>Public</code> member should do:</p>

<pre><code>Private Sub ThrowIfNonDefaultInstance()
    If Not Me Is AppSessionVariables Then
        Err.Raise AppSessionVariablesError.Error_NonDefaultInstance, Typename(Me), "Use the default instance, not a new one."
    End If
End Sub
</code></pre>

<blockquote>
  <p>I am looking to make sure that my implementation is not implicitly causing some sort of a memory leak</p>
</blockquote>

<p>The problem is that the memory leak is pretty much a feature here: you <em>want</em> the data to outlive your class instance.</p>

<p>I've personally never encountered a single use case for this behavior in over 20 years of VBA programming. IMO data that outlives the class that creates it, is <em>by definition</em> a memory leak, and thus boils down to being a Bad Ideaâ„¢.</p>

<p>When VBA code does this:</p>

<pre><code>Set thing = Nothing
</code></pre>

<p>The VBA dev has every reason on Earth to believe they have effectively destroyed the object and its encapsulated state.</p>

<p>Even worse - when this instruction is encountered:</p>

<pre><code>End
</code></pre>

<p>VBA devs should <em>expect</em> <strong>all</strong> global state to cleanly reset.</p>

<p>By design, this <code>AppSessionVariables</code> thwarts these fundamental expectations, and this can easily make using this class more error-prone than it needs to be.</p>
    </div>