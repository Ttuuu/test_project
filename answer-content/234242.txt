<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><code>Option Explicit</code> is missing from your code. From the menu at the top under Tools&gt;Options&gt;Editor tab&gt;Code Settings group&gt;Require Variable Declaration &lt;-- toggle that check box on. It will thereafter add the <a href="https://docs.microsoft.com/en-us/office/vba/language/reference/user-interface-help/option-explicit-statement" rel="nofollow noreferrer">Option Explicit statement</a> to all modules. You'll have to add this manually to any currently existing modules. This mandates you have <code>Dim foo as Range</code> to declare your variables before usage. Not having this leads to avoidable errors. Turn it on and leave it on. Future-you will thank you for doing so.</p>

<p>Your <a href="https://docs.microsoft.com/en-us/office/vba/language/reference/user-interface-help/sub-statement" rel="nofollow noreferrer">Sub statement</a> is implicitly <code>Public</code> since it is missing the access modifier. Writing <code>Public Sub FindString()</code> makes in known that you intentionally made it publicly viewable.</p>

<p>Indentation. Indenting your code by a <code>tab</code> helps identify where a Sub begins and ends. Same goes for blocks of code such as <code>If...End IF</code>.</p>

<p>Variable names are typically Camel Case. This means the first word is lower cased and the first letter of subsequent words is upper cased. If you had a variable <code>worksheetContainingWordsToFind</code> that would be an example of came Camel Case. Your Sub name <code>FindString</code> is in Pascal Case where the first letter of every word is upper cased. Subs/Function are Pascal Case while variables are Camel Case.</p>

<p>Your variable <code>MasterSheet</code> is misleading. It's actually a <code>Workbook</code>. Have your variables be what they say they are. <code>Dim MasterSheet As Worksheet</code> is an improvement to match up with what it says it is. Even better for it to be <code>sourceSheet</code>. That way you can have</p>

<pre><code>Dim sourceBook as Workbook
Set sourceBook as Workbooks.Open("\\mypath\text.xlsx")

Dim sourceWorksheet as Worksheet
set sourceWorksheet = sourceBook.Worksheets("sheet1")

Dim foundTransferString as Range
Set foundTransferString = sourceWorksheet.Cells.Find(What:="Transfer &lt;= 30 minutes")

Dim foundEMPString as Range
Set foundEMPString = sourceWorksheet.Cells.Find(What:="End of Month Performance (EMP)"
</code></pre>

<p>which has your code self documenting.</p>

<p>The above code also eliminates a wall of declarations at the start. I'm of the opinion that declaring a variable just before you use it helps aid in refactoring and eliminating unused variables. Rather than needing to right click on the variable to display the context menu&gt;Definition to find where it's declared you have it right above the first use.</p>

<hr>

<p>The code <code>ThisWorkbook.Worksheets("WSLHD")</code> can use the object (Excel Worksheet) directly. In the Project Explorer, found in the menu at the top under View&gt;Project Explorer (Hotkey: Ctrl+R). Double click the sheet under Microsoft Excel Object to display the code behind pane for that Worksheet object. Under View&gt;Properties Window (Hotkey: F4) display the properties window. At the very top where it says <code>(Name)</code> you can rename the worksheet CodeName to a more descriptive name. I kept <code>WSLHD</code> as I don't know what that means, another reason to have self describing names. Thereafter you can use that object directly with <code>WSLHD.Cells.Find</code> instead of in the roundabout way of assigning a worksheet variable with <code>ThisWorkbook.Worksheets("WSLHD")</code>. The latter is prone to breaking if the tab is renamed.</p>

<hr>

<p>Your comment "... there are many more strings" is a sign-post indicating you want a function. This function has 2 input variables that you provide as arguments. It searches the sheet you indicate looking for the string value. If it finds the result it sets the last variable <code>outFoundCell</code> which is passed <code>ByRef</code> so the assignment applies is reflected in the calling procedure. If the string was found the <code>TryFind = Not outFoundCell Is Nothing</code> assigns <code>True</code> to the function, otherwise it assigns <code>False</code>.</p>

<pre><code>Private Function TryFind(ByVal searchForValue As String, ByVal sourceSheet As Worksheet, ByRef outFoundCell As Range) As Boolean
    Set outFoundCell = sourceSheet.Cells.Find(What:=searchForValue)
    TryFind = Not outFoundCell Is Nothing
End Function
</code></pre>

<p>You couple that with a method to populate the cells</p>

<pre><code>Private Sub PopulateCellsWithOffsetResults(ByVal foundCell As Range, ByVal populationSheet As Worksheet, ByVal populationRow As Long)
    populationSheet.Cells(populationRow, "B").Value2 = foundCell.Offset(0, 1).Value2
    populationSheet.Cells(populationRow, "C").Value2 = foundCell.Offset(0, 2).Value2
    populationSheet.Cells(populationRow, "F").Value2 = foundCell.Offset(0, 3).Value2
End Sub
</code></pre>

<p>And you can then invoke the function in the following manner. You first search for the string. If it's found it then enters the true part of the <a href="https://docs.microsoft.com/en-us/office/vba/language/reference/user-interface-help/ifthenelse-statement" rel="nofollow noreferrer">If...Then...Else Statement</a> and populates the information.</p>

<pre><code>If TryFind("Transfer &lt;= 30 minutes", sourceWorksheet, foundCell) Then
    PopulateCellsWithOffsetResults foundCell, WSLHD, 8
End If
</code></pre>

<p>Doing all that you end up with the code below. There is more that can be done because the population rows <code>8</code>, and <code>9</code> are static numbers. You probably want a dynamic row that changes as things are populated.</p>

<pre><code>Option Explicit

Public Sub SearchForStringsAndPopulatedOffsetValuesOnAnotherWorksheet()
    Dim sourceBook As Workbook
    Set sourceBook = Workbooks.Open("\\mypath\test.xlsx") 'Master sheet where data is coming from
    Dim sourceWorksheet As Worksheet
    Set sourceWorksheet = sourceBook.Sheets("sheet1")

    Dim foundTransferCell As Range
    If TryFind("Transfer &lt;= 30 minutes", sourceWorksheet, foundTransferCell) Then
        PopulateCellsWithOffsetResults foundTransferCell, WSLHD, 8
    End If

    Dim foundEndOfMonthPerformanceCell As Range
    If TryFind("End of Month Performance (EMP)", sourceWorksheet, foundEndOfMonthPerformanceCell) Then
        PopulateCellsWithOffsetResults foundEndOfMonthPerformanceCell, WSLHD, 9
    End If

    sourceBook.Close
End Sub

Private Sub PopulateCellsWithOffsetResults(ByVal foundCell As Range, ByVal populationSheet As Worksheet, ByVal populationRow As Long)
    populationSheet.Cells(populationRow, "B").Value2 = foundCell.Offset(0, 1).Value2
    populationSheet.Cells(populationRow, "C").Value2 = foundCell.Offset(0, 2).Value2
    populationSheet.Cells(populationRow, "F").Value2 = foundCell.Offset(0, 3).Value2
End Sub

Private Function TryFind(ByVal searchForValue As String, ByVal sourceSheet As Worksheet, ByRef outFoundCell As Range) As Boolean
    Set outFoundCell = sourceSheet.Cells.Find(What:=searchForValue)
    TryFind = Not outFoundCell Is Nothing
End Function
</code></pre>

<p>The Sub <code>PopulateCellsWithOffsetResults</code> and Function <code>TryFind</code> are Private and thereby not visible outside of the module because they are an implementation detail. You aren't concerned with <em>how</em> they work, rather that they <em>do</em> work as evidenced when you run <code>SearchForStringsAndPopulatedOffsetValuesOnAnotherWorksheet</code> which should have a better more descriptive name. That's just what I came up with since I really don't know everything that you're populating.</p>
    </div>