<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If I were going to carry out this general task, I'd probably use a recursive descent parser. A simple version to handle <code>+</code>, <code>-</code>, <code>*</code> and <code>/</code> with the correct precedence can look something like this:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;cctype&gt;

int expression();

char token() { 
    char ch;
    std::cin &gt;&gt; ch;
    return ch;
}

int factor() { 
    int val = 0;
    char ch = token();
    if (ch == '(') {
        val = expression();
        ch = token();
        if (ch != ')') {
            std::string error = std::string("Expected ')', got: ") + ch;
            throw std::runtime_error(error.c_str());
        }
    }
    else if (isdigit(ch)) {
        std::cin.unget();
        std::cin &gt;&gt; val;
    }
    else throw std::runtime_error("Unexpected character");
    return val;
}

int term() { 
    int ch;
    int val = factor();
    ch = token();
    if (ch == '*' || ch == '/') {
        int b = term();
        if (ch == '*')
            val *= b;
        else
            val /= b;
    }
    else std::cin.unget();
    return val;
}

int expression() {
    int val = term();
    char ch = token();
    if (ch == '-' || ch=='+') {
        int b = expression();
        if (ch == '+')
            val += b;
        else
            val -= b;
    }
    else std::cin.unget();
    return val;
}

int main(int argc, char **argv) {
    try {
        std::cout &lt;&lt; expression();
    }
    catch(std::exception &amp;e) {
        std::cout &lt;&lt; e.what();
    }
    return 0;
}
</code></pre>

<p>Despite being less than one fifth the size, this already checks for balanced parentheses. Right now it's written to take data from <code>std::cin</code>, but getting it to read from an arbitrary stream (including a stringstream) would be trivial. Getting it to parse input from a string would be minutely more work (the obvious way would be to create a stringstream and read from there, but you could just keep track of the current position to read from in a string as well).</p>

<p>The shunting-yard algorithm is also well known for this task. I don't see a huge advantage to it myself, but some (many?) people find it somewhat simpler. Depending on how fast function calls are on your particular CPU, it may execute faster as well (but most modern CPUs make function calls pretty fast so if there's an improvement in speed, it probably won't be very large).</p>
    </div>