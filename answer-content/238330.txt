<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Welcome to CodeReview, your program is advanced for high school. I have some suggestions for you:</p>

<blockquote>
<pre><code>private int delay = GUIComponents.delaySlider.getValue() * 1000;
</code></pre>
</blockquote>

<p>You repetead this line all the classes implementing one different sorting method, you could use a constructor and pass this as a value like the class below:</p>

<pre><code>public class BubbleSort implements SortingAlgorithm {

    private int delay;

    public BubbleSort(int delay) {
        this.delay = delay;
    }

    //other methods
}

//after in your code
int delay = GUIComponents.delaySlider.getValue() * 1000;
SortingAlgorithm bubble = new BubbleSort(delay);
</code></pre>

<p>I don't know if you are aware about the <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Map.html" rel="nofollow noreferrer">Map</a> class, that maps keys to value, you could use in the following way:</p>

<pre><code>int delay = GUIComponents.delaySlider.getValue() * 1000;
Map&lt;String, SortingAlgorithm&gt; map = new TreeMap&lt;String, SortingAlgorithm&gt;();
map.put("Bubble sort", new BubbleSort(delay));
map.put("Quick sort", new QuickSort(delay));
Set&lt;String&gt; set = map.keySet(); //[Bubble sort, Quick sort]
SortingAlgorithm bubble = map.get("Bubble sort");
SortingAlgorithm quick = map.get("Quick sort");
</code></pre>

<p>In this example I created one <code>BubbleSort</code> object and one <code>QuickSort</code> object mapping them with their labels by <code>put</code> method and you can access them using the <code>get</code> method.</p>

<p>One thing you could change is the name of the class <code>NumbersList</code> : <code>List</code> is about a structure that can be modified while your class is an array, perhaps you could rename it as <code>NumbersArray</code>. Below my implementation for your class:</p>

<pre><code>public class NumbersArray {
    private static int[] numbers;

    public static void generateArray(int amount) {
        numbers = new int[amount];

        double spacing = (double) Configs.APPLICATION_HEIGHT / amount;
        for(int i = 0; i &lt; amount; i++) {
            numbers[i] = (int) ((i + 1) * spacing);
        }
    }

    public static void randomizeArray() {
        Collections.shuffle(Arrays.asList(numbers));
    }

    public static int[] getArray() {
        return numbers;
    }
}
</code></pre>

<p>I used <code>Collections.shuffle</code> method to randomize the elements of your array. Anyway again you made a great job.</p>
    </div>