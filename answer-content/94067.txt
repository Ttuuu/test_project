<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Naming conventions:</strong></p>

<p>Please read the <a href="https://msdn.microsoft.com/en-us/library/vstudio/ms229043(v=vs.100).aspx"><strong>Capitalization Conventions</strong></a> by Microsoft. Class names will Always be capitalized, same goes for method names.</p>

<ul>
<li><code>tekst_generator</code> becoms <code>TextGenerator</code></li>
<li><code>getText</code> becomes <code>FetText</code></li>
<li>and so on...</li>
</ul>

<hr>

<p><strong>The <code>var</code> keyword:</strong></p>

<p>From the <a href="https://msdn.microsoft.com/en-us/library/bb384061.aspx"><strong>C# Programming Guide</strong></a>:</p>

<blockquote>
  <p>The var keyword can also be useful when the specific type of the variable is tedious to type on the keyboard, or is obvious, or does not add to the readability of the code.</p>
</blockquote>

<p>So lines like:</p>

<pre><code>int index = getWordIndex(source, value);
</code></pre>

<p>would become:</p>

<pre><code>var index = GetWordIndex(source, value);
</code></pre>

<hr>

<p>You should let your class handle more than you are doing now and inside your class divide all tasks properly. I've rewritten it so you will understand:</p>

<pre><code>public class TextGenerator
{
    public TextGenerator(List&lt;string&gt; source)
    {
        Source = source;
        _random = new Random();
    }

    private readonly Random _random;
    public List&lt;string&gt; Source { get; private set; }

    public int MaxRandom
    {
        get { return Source.Count; }
    }

    private int GetNextIndex()
    {
        return _random.Next(0, MaxRandom);
    }

    public string GetText(List&lt;string&gt; backupSource)
    {
        if (MaxRandom == 0)
        {
            Source.AddRange(backupSource);
        }

        var index = GetNextIndex();
        var result = Source[index];
        Source.RemoveAt(index);
        return result;
    }
}
</code></pre>

<p>Key points here:</p>

<ul>
<li>Constructor with a parameter where you can instantly set the source list</li>
<li>The <code>Random</code> resides inside the class, no more worries for the user of the class</li>
<li><code>MaxRandom</code> property that returns the maximum for the next random value</li>
<li><code>GetNextIndex</code> method to return a next valid index</li>
<li>The <code>GetText</code> method is generally the same, only adapted to the changes</li>
</ul>

<p>Usage of the class:</p>

<pre><code>var generator = new TextGenerator(new List&lt;string&gt; { "Hi", "Howdy", "Hey", "etc" });
Console.WriteLine(generator.GetText(new List&lt;string&gt; { "Some", "backup", "values" }));
</code></pre>
    </div>