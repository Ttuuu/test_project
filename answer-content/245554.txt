<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Array sizes</strong></p>
<p><code>uint32_t</code> may be too small or needlessly large to index arrays.  Use <code>size_t</code> for array indexing and sizing.</p>
<pre><code>//int huffman_encode(uint8_t * input, uint8_t ** output, uint32_t decompressed_length);
int huffman_encode(uint8_t * input, uint8_t ** output, size_t decompressed_length);
</code></pre>
<p><strong>Namespace spattered</strong></p>
<p>Rather than <code>huffman.h</code> include defines/functions with names all over the place, consider using a common prefix like below:</p>
<pre><code>//#define EXIT_SUCCESS 0
#define HUFFMAN_EXIT_SUCCESS 0
//#define INTERNAL_NODE 0
#define HUFFMAN_INTERNAL_NODE 0
// void create_encoding_table(huffman_node_t * node, huffman_coding_table_t huffman_array[256], uint8_t bits_set);
void huffman_create_encoding_table(huffman_node_t * node, huffman_coding_table_t huffman_array[256], uint8_t bits_set);
</code></pre>
<p>Many of the offending name belong in huffman.c and not in huffman.h</p>
<p><strong>Enough <code>#includes &lt;&gt;</code> in <code>huffman.h</code>?</strong></p>
<p><code>huffman.h</code> may be missing some standard includes.  <code>size_t</code> is not certainly defined through <code>stdint.h&gt;</code></p>
<p>A simple test is in <code>huffman.c</code> to include <code>huffman.h</code> <em>first</em>.</p>
<pre><code>#include "../include/huffman.h" // add
#include &lt;ctype.h&gt;
#include &lt;stdbool.h&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;stdint.h&gt;
#include &lt;string.h&gt;
// #include "../include/huffman.h"
</code></pre>
<p><strong>Document in huffman.h</strong></p>
<p>Much of the useful documentation about the overall code would benefit being in huffman.h.</p>
<p>Consider a user may only see huffman.h and binary huffman.o.</p>
<p><strong>Efficient size indexes</strong></p>
<p>Why <code>uint16_t i</code> vs. <code>usigned i</code> vs. <code>uint_fast16_t</code>?  Why force a narrow type?</p>
<pre><code>for(uint16_t i = 0; i &lt; 256; i++)
</code></pre>
<p>Assume the compiler knows best, use <code>unsigned</code>.</p>
<p><strong>Allocate to the size of the referenced object</strong></p>
<p>Easier to code right, review and maintain.  Long lines of code deserve breaking up.</p>
<pre><code>// if(!(*output = calloc(HEADER_BASE_SIZE + header_byte_length + encoded_byte_length + 1, sizeof(uint8_t))))
//    return MEM_ERROR;

size_t n = HEADER_BASE_SIZE + header_byte_length + encoded_byte_length + 1;
output = calloc(n, sizeof *output);
//                 ^^^^^^^^^^^^^^  size of the referenced object
if(output == NULL) {
    return MEM_ERROR;
}
</code></pre>
    </div>