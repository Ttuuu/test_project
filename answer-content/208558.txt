<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is the kind of function that benefits from unit tests.  I wrote a few simple tests in C++ with GoogleTest:</p>

<pre class="lang-c++ prettyprint-override"><code>extern "C" {
    void quick_sort(int arr[],int pivot_, int right_);
}

#include &lt;gtest/gtest.h&gt;

#include &lt;algorithm&gt;
#include &lt;iterator&gt;
#include &lt;numeric&gt;

TEST(quick_sort, empty)
{
    int a[1] = {};
    quick_sort(a, 0, 0-1);
    EXPECT_TRUE(std::is_sorted(std::begin(a), std::end(a)));
}

TEST(quick_sort, one_element)
{
    int a[] = { 0 };
    quick_sort(a, 0, sizeof a / sizeof a[0] - 1);
    EXPECT_TRUE(std::is_sorted(std::begin(a), std::end(a)));
}

TEST(quick_sort, two_same)
{
    int a[] = { 0, 0 };
    quick_sort(a, 0, sizeof a / sizeof a[0] - 1);
    EXPECT_TRUE(std::is_sorted(std::begin(a), std::end(a)));
}

TEST(quick_sort, two_asc)
{
    int a[] = { 0, 1 };
    quick_sort(a, 0, sizeof a / sizeof a[0] - 1);
    EXPECT_TRUE(std::is_sorted(std::begin(a), std::end(a)));
}

TEST(quick_sort, two_desc)
{
    int a[] = { 1, 0 };
    quick_sort(a, 0, sizeof a / sizeof a[0] - 1);
    EXPECT_TRUE(std::is_sorted(std::begin(a), std::end(a)));
}

TEST(quick_sort, three_123)
{
    int a[] = { 1, 2, 3 };
    quick_sort(a, 0, sizeof a / sizeof a[0] - 1);
    EXPECT_TRUE(std::is_sorted(std::begin(a), std::end(a)));
}

TEST(quick_sort, three_231)
{
    int a[] = { 2, 3, 1 };
    quick_sort(a, 0, sizeof a / sizeof a[0] - 1);
    EXPECT_TRUE(std::is_sorted(std::begin(a), std::end(a)));
}

TEST(quick_sort, three_312)
{
    int a[] = { 3, 1, 2 };
    quick_sort(a, 0, sizeof a / sizeof a[0] - 1);
    EXPECT_TRUE(std::is_sorted(std::begin(a), std::end(a)));
}

TEST(quick_sort, four)
{
    int a[] = { 3, 1, 2, 0 };
    quick_sort(a, 0, sizeof a / sizeof a[0] - 1);
    EXPECT_TRUE(std::is_sorted(std::begin(a), std::end(a)));
}

TEST(quick_sort, large)
{
    int a[100];
    std::iota(std::rbegin(a), std::rend(a), -50);
    quick_sort(a, 0, sizeof a / sizeof a[0] - 1);
    EXPECT_TRUE(std::is_sorted(std::begin(a), std::end(a)));
}
</code></pre>

<p>The first thing this highlighted was the unusual calling convention - <code>right_</code> is an inclusive bound, but without any guidance, most C coders would expect an exclusive bound.</p>

<p>(In passing, I'll also point out that <code>pivot_</code> isn't very meaningful to most callers - I think that <code>left</code> would be a better choice of name there.)</p>

<p>The second thing we see (diagnosed by running under Valgrind) is undefined behaviour when we run off the end of the array here:</p>

<pre><code>    while(arr[i] &lt; arr[pivot]) i++;
</code></pre>

<p>That needs to be fixed before this code is ready.</p>
    </div>