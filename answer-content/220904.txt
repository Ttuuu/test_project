<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is just the main method that controls the game. <em>All the interesting code is missing.</em></p>

<p>Instead of reading the names of a fixed number of players and storing the players to two distinct method variables, read a name and create a player into the list in a loop, until the user provides an empty line to denote en of input.</p>

<p>Variable <code>score</code> is unnecessary.</p>

<p>There are 13 rounds in a Yahtzee game (note the spelling), not 15.</p>

<pre><code>p2.firstRollDice(secondPlayerName);
</code></pre>

<p>Passing the player name to this method seems pointless. It was already passed in the constructor and it has nothing to do with dice rolling.</p>

<pre><code>p1.secondAndThirdRollDice();
</code></pre>

<p>Second and third rolls are identical in implementation. They should be implemented as one method named <code>rerollDice</code> and called twice from the main method. On the other hand, if you want to combine the game logic into the player, you should combine the first roll and category selection into the same method too, so it becomes <code>p1.performTurn()</code>.</p>

<pre><code>p1.selectAndSetCategoryScore(p1.getDiceArray());
</code></pre>

<p>This breaks encapsulation. It is pointless to fetch data from inside of p1 just for the sake of passing it back to p1 as a parameter. The player already knows the hand it has rolled. This method needs no parameters.</p>

<pre><code>} catch (NullPointerException e) {
</code></pre>

<p>This is both bad practise and a bug. NPE has a very specific meaning and it should not be used to convey information of invalid input. Catching NPE is always a result of programming error. Also, catching this breaks the loop that was supposed to run 15 times, and then exeutes the last method call from the loop once. In no way can it be intended functionality if the loop exits from first round.</p>

<p>Yahtzee is supposed to be played so that each player plays one round a time. In the code one player plays all 15 rounds immediately before passing turn to next player. Something like this:</p>

<pre><code>for (int turn = 1; turn &lt;= 15; turn++) {
    for (Player: players) {
        // Play one turn.
    }
}
</code></pre>

<p>I don't see the scanner being passed to the Player objects so they can read the input for the category selection. I hope they are not constructing their own scanners that read from System.in...</p>
    </div>