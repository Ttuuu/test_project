<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Comments</h2>

<p>Your code is hard to read through, because of the excessive use of comments. Comments should add something to code, not repeat the code, or tell the reader what the code already strongly implies. </p>

<h2>Use hashes</h2>

<p>Merely hashing is very weak, but this is rather easy to implement. Also note that md5 is prone to hash collision attacks and should not be used anymore. If your platform supports it, use SHA(3)-256.</p>

<p>The problem with this application is that if anybody gets to access the code, they can read the username and password in plaintext. You would be better off first hashing the passwords, then using <a href="https://docs.python.org/3/library/hashlib.html" rel="nofollow noreferrer"><code>hashlib</code></a> to check if the input matches. I've written an improved version of your code below, to show what I mean:</p>

<pre><code>from hashlib import md5
from getpass import getpass
import sys

print("Hello! Welcome to FaceSnap!") 

attempts = 0
check_username = "5945261a168e06a5b763cc5f4908b6b2"
check_password = "48d6215903dff56238e52e8891380c8f"
# These hashes have been generated earlier on.
# This is not how you would go about storing usernames and passwords,
# but for the sake of simplicity, we'll do it like this.

while True: 
    username = input("Username: ")
    password = getpass("Password: ")
    # Getpass will not echo input to the screen, so your password remains 
    # invisible
    print()

    if attempts == 3:
        sys.exit("Too many failed attempts.")

    if md5(username.encode().hexdigest() == check_username:
        if md5(password.encode().hexdigest() == check_password:
            print("Username and password entered correctly.")
            # Username and password match - do something here
        else:
            print("Password entered incorrectly.")
            attempts += 1
    else:
        print("Username entered incorrectly.")
        attempts += 1
</code></pre>

<h2>Use Scrypt</h2>

<p>In reality, you wouldn't hash passwords to store them in a database, but use a dedicated <a href="https://en.wikipedia.org/wiki/Key_derivation_function" rel="nofollow noreferrer">key derivation function</a>, such as <a href="https://en.wikipedia.org/wiki/Scrypt" rel="nofollow noreferrer">Scrypt</a>. The first cryptography library for Python that comes to mind is PyCrypto, but <a href="https://cryptography.io/en/latest/" rel="nofollow noreferrer"><code>cryptography</code></a> makes it significantly harder to shoot yourself in the foot. </p>
    </div>