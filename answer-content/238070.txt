<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>What you are doing here is denoting metadata about the fruit entries through the data structure. If it works for you then it’s certainly an acceptable solution. However, it will make the code much more readable and meaningful if you can get that metadata out of the structure and represent it directly. Someone unfamiliar with it (which might well be you a few months from now :)) is going to be able to figure out what everything means much more quickly. </p>

<p>To do that, you need to answer the question “what make fruit belong in the ‘other fruit’ array”? Making a guess based on the example data, is it a question of the ‘Other Fruit’ being less common? </p>

<p>If so, you could potentially use more meaningful names in your example last array. </p>

<pre><code>$myFruit = [
 'common' =&gt; [
    'apple',
    'banana',
    'cherry',
 ],
'rare' =&gt; [
    'Damson',
    'Elderberry',
    'Fig',
    'Grapefruit',
 ],
];
</code></pre>

<p>A few notes in comparing this with what you have:</p>

<ol>
<li><code>array()</code> and <code>[]</code> do the exact same thing and are interchangeable. There is no reason to use <code>array()</code> at the very top level. </li>
<li>Doing <code>array([‘Fruitbowl’] =&gt; […])</code> make the key an array, which I don’t think you want. Rather, you likely want <code>array(‘Fruitbowl’=&gt;[…])</code>, which is the same as <code>[‘fruitbowl’ =&gt; […]]</code></li>
</ol>

<p>All of this said, any multidimensional array is a good opportunity to think about writing a class to represent the data and incorporate an object. Something to keep in mind if any more complexity creeps into this array. </p>
    </div>