<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>@jonrsharpe has listed a number of presentation, structural, and functional changes, but I'm just going to run through some of the bugs... ;-)</p>
<hr>
<h2>TOP takes a second</h2>
<p>Your basic program structure is:</p>
<pre><code>proctotal = proct(pid)
cputotal = cput()

try:
    while True:

        # for test, to compare results
        proc = subprocess.Popen("top -p %s -b -n 1 | grep -w mysql | awk '{print $9}'" % pid, shell=True, stdout=subprocess.PIPE)
        cpu_percentage = proc.communicate()
        print('With TOP: %s' % (cpu_percentage[0].rstrip('\n')))

        pr_proctotal = proctotal
        pr_cputotal = cputotal

        proctotal = proct(pid)
        cputotal = cput()

        try:
            res = ((proctotal - pr_proctotal) / (cputotal - pr_cputotal) * 100)
            print('With script: %s\n' % round(res, 1))
        except ZeroDivisionError:
            pass

        time.sleep(1)
</code></pre>
<p>So, what does that do? It takes a reading from the stat files, then it runs top, which taks a second, then it re-reads the stat files, and prints the results for that second to match against TOP. Finally it waits a second, then loops.</p>
<p>On the next loop, it has already waited a second, then another second for the top, so the subsequent loops report the top times for only the second second of a 2-second wait time. Your comparison numbers will never match accurately.</p>
<p>Additionally, when you remove the top comparison, your loop will be:</p>
<pre><code>proctotal = proct(pid)
cputotal = cput()

try:
    while True:

        pr_proctotal = proctotal
        pr_cputotal = cputotal

        proctotal = proct(pid)
        cputotal = cput()

        try:
            res = ((proctotal - pr_proctotal) / (cputotal - pr_cputotal) * 100)
            print('With script: %s\n' % round(res, 1))
        except ZeroDivisionError:
            pass

        time.sleep(1)
</code></pre>
<p>and the first time through the loop it will always display 0 because it never waited between readings. You should put the <code>sleep(1)</code> as the first thing inside the loop, or, while you are using top as a test, you should comment out the <code>sleep(1)</code> because the top call essentially <em>is</em> a <code>sleep(1)</code>.</p>
<h2>/proc/stat</h2>
<p>Your processing of the stat files is broken.</p>
<p>The format for the file is (taken from my machine):</p>
<pre><code>abox:~&gt; cat /proc/stat
cpu  19407338 17453351 34946083 2361383858 59819619 2748 2690630 0 0 0
cpu0 8423923 911989 15385729 250602858 21892989 2614 2574046 0 0 0
cpu1 1057945 1098915 1028942 309149453 2009689 2 7469 0 0 0
cpu2 3439928 4831311 5750843 283795300 13861225 74 42971 0 0 0
.....
</code></pre>
<p>You read the first line and process that. That's the right thing to do, but, what you do is:</p>
<pre><code>        cputotal = 0
        # count from /proc/stat: user, nice, system, idle, iowait, irc, softirq, steal, guest
        for i in cputimes.split(' ')[2:]:
            i = int(i)
            cputotal = (cputotal + i)
        return(float(cputotal))
</code></pre>
<p>The best documentation for that file <a href="http://www.mjmwired.net/kernel/Documentation/filesystems/proc.txt#1212" rel="nofollow noreferrer">is here(http://www.mjmwired.net)</a>:</p>
<ul>
<li>user: normal processes executing in user mode</li>
<li>nice: niced processes executing in user mode</li>
<li>system: processes executing in kernel mode</li>
<li>idle: twiddling thumbs</li>
<li>iowait: waiting for I/O to complete</li>
<li>irq: servicing interrupts</li>
<li>softirq: servicing softirqs</li>
<li>steal: involuntary wait</li>
<li>guest: running a normal guest</li>
<li>guest_nice: running a niced guest</li>
</ul>
<p>Now, the first line is</p>
<blockquote>
<pre><code>     cpu  19407338 17453351 34946083 2361383858 59819619 2748 2690630 0 0 0
</code></pre>
</blockquote>
<p>You use the array slice <code>[2:]</code>, which had me confused for a long time. TO me this was just counting the <code>nice</code> times and on, and not counting the <code>user</code> time at all. I never saw tha tyou were splitting on <code>' '</code> instead of just whitespace, so. Making your code depend on the amount of whitespace is a problem, and will become a bug at some future time, and, it appears, is a problem right now. You should split on whitespace, and count fields, instead of counting spaces....</p>
<p>Now, the last two columns are 'guest' time, and these values are double-counted in the user times. Your current code double-counts that time, and will lead to errors in your computations.</p>
<p>Your array slice should be splitting on whitespace, and should only be summing: <code>[1:9]</code></p>
<h2>/proc/{pid}/stat</h2>
<p>Your calculation here is right, but I would do the split just once, and read the two fields in one slice.</p>
    </div>