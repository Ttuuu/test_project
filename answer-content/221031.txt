<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In the <code>if/else</code> statement, I would put the most frequently true conditions at the top to reduce the amount of condition checking. Is it really more common for <code>data[mid]</code> to equal <code>target</code> than for it to be greater than or less than it? I doubt it, so I'd reorder the blocks to something like:</p>

<pre><code>if (data[mid] &gt; target) {
    high = mid - 1;
} else if(data[mid] &lt; target) {
    low = mid + 1;
} else {
    return true;
}
</code></pre>

<p>You could also reduce hard coding by replacing <code>num_elements</code> with <code>std::size(data)</code>.</p>

<p>Returning <code>true</code> or <code>false</code> is more readable than returning <code>1</code> or <code>0</code>. It expresses the function's purpose more clearly and avoids confusion.</p>

<p>Finally, replacing the division by 2 with a bit shift might not help but it's worth testing if this is performance-critical:</p>

<pre><code>mid = low + ((high - low) &gt;&gt; 1); // "&gt;&gt; 1" is "/ 2"
</code></pre>

<p><strong>EDIT</strong>: On Clang, bit shifting actually does help (GCC gives the optimization either way), but you can get the same benefit by appending a <code>u</code> to the <code>2</code>, which is more readable anyway. <code>2u</code> is unsigned, so it causes <code>(high - low)</code> to also be cast to unsigned, which tells Clang that it's never negative (which GCC already deduced from your <code>while</code> condition) and that a bit shift is therefore safe to do on it. You can also simplify the arithmetic a little since you're just calculating an average. These two tweaks reduce the assembly for this line <a href="https://godbolt.org/z/lou9ts" rel="nofollow noreferrer">to just 2 instructions</a> (down from 7 on Clang or 4 on GCC):</p>

<pre><code>mid = (high + low) / 2u;
</code></pre>
    </div>