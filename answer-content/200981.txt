<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In this case performance depends on the number of <code>maxes</code>. The longer the array the more time it takes to check it and the slower it gets.</p>

<p>As an alternative you can group all numbers first and get their counts. Then just sum the counts of the numbers that meet the criteria.</p>

<pre><code>public static int[] counts2(this int[] nums, int[] maxes)
{
    var counts =
        nums
            .GroupBy(
                n =&gt; n,
                (k, items) =&gt; (num: k, count: items.Count()))
            .ToArray();

    return
        maxes
            .Select(m =&gt;
                counts
                    .Where(x =&gt; x.num &lt;= m)
                    .Sum(x =&gt; x.count))
            .ToArray();
}
</code></pre>

<p>On my machine the results are:</p>

<p>Number of runs: 10000</p>

<p>Test-1:</p>

<pre><code>nums:  1000
maxes: 10

              OP vs t3chb0t

00:00:00.2005513 &lt;  00:00:00.5321118
</code></pre>

<p>Test-2:</p>

<pre><code>nums:  1000
maxes: 100

              OP vs t3chb0t

00:00:02.3541534 &gt;  00:00:01.7438213
</code></pre>

<p>Test-3:</p>

<pre><code>nums:  1000
maxes: 1000

              OP vs t3chb0t

00:00:22.9002408 &gt;  00:00:12.8527922
</code></pre>

<p>Test-4: with <code>AsParallel()</code></p>

<pre><code>nums:  1000
maxes: 1000

              OP vs t3chb0t

00:00:22.9081026 &gt;  00:00:03.8906315
</code></pre>

<p>Chaining <code>AsParallel()</code> to <code>maxes</code> makes it run even faster.</p>

<hr>

<p>As always with performance: test different solutions before you judge which version is the fastest one because it often depends on many other factors. Using plain loops unwisely does not have to be better the using clever linq.</p>
    </div>