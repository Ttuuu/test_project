<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>Reviewer will be looking for correct functionality, use of design
  patterns, use of unit testing, use of object oriented programming,
  code re-use, etc. Each stage may be represented with a new project in
  the single solution.</p>
</blockquote>

<p>And </p>

<blockquote>
  <p>Create a C# 7 .net core class library project with model classes for
  the chess pieces and the algorithms for determining the possible
  moves.</p>
</blockquote>

<p><strong>Requirements :</strong></p>

<ul>
<li>Design (how much do you enforce this concept in your work(mainly <a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/object-oriented-programming" rel="nofollow noreferrer">OOP</a>).</li>
<li>Functionality (how many bugs are there ? )</li>
<li>Code Reuse (how much do you apply this concept?)</li>
<li>Unit Test (how much do you use it ? ).</li>
<li>C# 7 .NET Core (Familiarity with <a href="https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-7" rel="nofollow noreferrer">C# 7 updates</a> and <a href="https://docs.microsoft.com/en-us/dotnet/core/whats-new/dotnet-core-3-0" rel="nofollow noreferrer">.NET Core updates</a>)</li>
<li>Model Classes (this is important)</li>
<li>algorithms for determining the possible moves. (this would show how do you handle code complicity).</li>
</ul>

<p><strong>At this stage :</strong></p>

<p>You're missing some of the requirements (some headlines). </p>

<ul>
<li>Naming convention (like <code>Board</code>, <code>Square</code> ..etc).</li>
<li>Models (no models)</li>
<li>Algorithms (more on that is below)</li>
<li>Missing some fundamental game logic (like pieces sets (white, black)).</li>
<li>Missing Code Flexibility (will be not feasible to add more requirements).</li>
<li>Comments (something you want to consider all along). </li>
</ul>

<p>Currently, I believe most of code parts can be improved.</p>

<p><strong>Chess Rules</strong></p>

<p>We need to know the basic requirements : </p>

<ul>
<li>Board is a grid of 8x8 squares (total of 64 square).</li>
<li>It has two groups (black/white) of (one king, queen, and two kights, rooks, bishops, and 8 pawns).</li>
<li>Game starts with 2 moves</li>
<li>Each piece set has its own movements rules

<ul>
<li>King   : One Step on   (Vertical,Horizontal,Diagonal) directions</li>
<li>Queen  : Open-Steps on (Vertical,Horizontal,Diagonal) directions</li>
<li>Rook   : Open-Steps on (Vertical,Horizontal) directions</li>
<li>Bishop : Open-Steps on (Diagonal) directions</li>
<li>Knight : 3 Steps in <code>L</code>Shape directions</li>
<li>Pawn   : One-Step (Vertical) and can go One-Step (Diagonal) to eliminate another piece.</li>
</ul></li>
</ul>

<p>So, based on that we need :</p>

<ul>
<li><code>ChessBoard</code> : To hold the layout, pieces, positions, and the default startup game settings. </li>
<li><code>ChessPiece</code> : Model which will hold each piece information plus the location. </li>
<li><code>ChessPieceMove</code> class to hold the movement logic and used on moving the pieces, you can also name it <code>ChessPieceMovement</code>.</li>
<li><code>IChessPieceType</code> an inteface which would be implemented on each piece type.</li>
<li><code>ChessPieceKing</code>, <code>ChessPieceQueen</code>, <code>ChessPieceRook</code>, <code>ChessPieceKnight</code> ..etc. a class for each piece, which inherits <code>IChessPieceType</code>.</li>
</ul>

<p>All of these are just the base requirements, we still need to implement game rule handler to be easier to add new requirements in the upcoming stages. </p>

<p>For now, we will make <code>ChessBoard</code> the main class to initiate a new game. </p>

<pre><code>public class ChessBoard
{
    // Initiate a private new ChessPiece array
    private ChessPiece[] pieces = new ChessPiece[64];


    public ChessBoard()
    {
        // callback the initiation process
        Initiate();
    }

    // initiation process (To initiate the ChessPiece compenents)
    private void Initiate() { ... }

    // Dummy : To get the on-board pieces (playable peices)
    public IEnumerable&lt;ChessPiece&gt; GetAvailablePieces() { ... }

    // Dummy : To get the open-squares that can accept new ChessPiece 
    public IEnumerable&lt;int&gt; GetAvailablePositions(){ ... }
}

// Model 
public class ChessPiece
{
    // Enum : To define a color for each piece.
    public ChessPieceColor Color { get; set; }

    // stores piece's position
    public int Position { get; set; }

    // stores piece type or kind (Rook, Bishop, Knight, Queen, King, or Pawn) 
    // Note : they're concrete classes sharing the same interface
    public IChessPieceType PieceType { get; set; }

    // a flag to distinguish the playable pieces from the elementated ones
    public bool IsDistroyed { get; set; }

    public ChessPiece() { }

    public ChessPiece(int position, ChessPieceColor color, IChessPieceType pieceType) 
    {
        Color = color;
        Position = position;
        PieceType = pieceType;
    }
}
</code></pre>

<p>When initiate a new board, it should initiate an array of <code>ChessPiece</code> with length of 64 elements. Which is the total number of board squares. While using <code>ChessPiece</code> it would make it easier to just add the model in each element and then loop over them.</p>

<p>This is simple enough. Now, we need to setup the startup pieces, but we need to visualize the grid and see which element index in the array should have a actual piece at startup, and which element should be null. Because we're dealing with a fixed rule here, which would be easy enough to just number the elements on-top of a chess grid. From top-left-corner to the bottom-left-corner it would holds elements from 0 to 63. Using these we can figure out which index should have an item.</p>

<p>So, in your board initiation process you should have something like : </p>

<pre><code>private void Initiate()
{
    IChessPieceType chessPiece = null;
    ChessPieceColor color = ChessPieceColor.Undefined;

    for (int x = 0; x &lt; pieces.Length; x++)
    {
        // colors 
        switch (x)
        {
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
                color = ChessPieceColor.White;
                break;
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 61:
            case 62:
            case 63:
                color = ChessPieceColor.Black;
                break;
        }

        // pieces
        switch (x)
        {
            case 0:
            case 7:
            case 56:
            case 63:
                chessPiece = new ChessPieceRook(x);
                break;
            case 1:
            case 6:
            case 57:
            case 62:
                chessPiece = new ChessPieceKnight(x);
                break;
            case 2:
            case 5:
            case 58:
            case 61:
                chessPiece = new ChessPieceBishop(x);
                break;
            case 3:
            case 59:
                chessPiece = new ChessPieceQueen(x);
                break;
            case 4:
            case 60:
                chessPiece = new ChessPieceKing(x);
                break;
        }

        // Pawns
        if ((x &gt;= 8 &amp;&amp; x &lt;= 15) || (x &gt;= 48 &amp;&amp; x &lt;= 55))
        {
            color = x &gt;= 8 &amp;&amp; x &lt;= 15 ? ChessPieceColor.White : ChessPieceColor.Black;
            chessPiece = new ChessPiecePawn(x);
        }

        pieces[x] = new ChessPiece(x, color, chessPiece);
    }
}
</code></pre>

<p>Doing that, would setup the board and its pieces. We can also get the available positions (empty squares) like this : </p>

<pre><code>public IEnumerable&lt;int&gt; GetAvailablePositions()
{
    for (int x = 0; x &lt; pieces.Length; x++)
    {
        if (pieces[x] == null) { yield return x; }
    }
}
</code></pre>

<p>From there, we can implement <code>ChessPieceMove</code> which will be used internally with the pieces. Since we are using one-dimensional array, it's a matter of simple math to know which and where the next move. </p>

<pre><code>public class ChessPieceMove
{
    private const int MAX_ROW_SIZE = 8;

    private const int MAX_COLUMN_SIZE = 8;

    private int _position;

    private int _row;

    private int _column;

    public ChessPieceMove(int position)
    {
        Move(position, 0);
    }

    private void Move(int steps)
    {
        Move(_position, steps);
    }

    private void Move(int position, int steps)
    {
        _position = position + steps;
        _column = _position % MAX_COLUMN_SIZE;
        _row = (MAX_COLUMN_SIZE - _column + _position) / MAX_ROW_SIZE;
    }

    public ChessPieceMove Forward(int steps)
    {
        Move(steps * 8);
        return this;
    }

    public ChessPieceMove Backward(int steps)
    {
        Move(steps * 8 * -1);
        return this;
    }

    public ChessPieceMove Left(int steps)
    {
        Move(steps * -1);       
        return this;
    }

    public ChessPieceMove Right(int steps)
    {
        Move(steps);
        return this;
    }

    public ChessPieceMove Oppsite()
    {
        _position = ((MAX_ROW_SIZE - _row + 1) * MAX_ROW_SIZE) - (MAX_COLUMN_SIZE - _column);
        return this;
    }

    public int Save()
    {
        return _position;
    }

}
</code></pre>

<p>This class can be used to get the element index for next move like : </p>

<pre><code>// Move a Knight example : 
var index = new ChessPieceMove(12).Forward(2).Right(1).Save();
// returns index 29
</code></pre>

<p>So, this <code>ChessPieceMove</code> simple API would be very helpful to retrieve the element index. You can get the opposite index which is the square index that faces the current from the opponent view. TO get that you can use <code>Oppsite()</code> like : </p>

<pre><code>// Move a Knight example : 
var index = new ChessPieceMove(12).Forward(2).Right(1).Oppsite().Save();
// returns index 37
</code></pre>

<p>So, square number 29 from player 1 view  is equal to square number 37 from player 2 view.</p>

<p>For the pieces, you would use an interface : </p>

<pre><code>public interface IChessPieceType
{
    int Position { get; set; }
}
</code></pre>

<p>and implement the pieces classes like : </p>

<pre><code>public class ChessPiecePawn : IChessPieceType
{

    public int Position { get; set; }

    public ChessPiecePawn(int position)
    {
        Position = position;
    }

    public int MoveForward()
    {   
        return new ChessPieceMove(Position).Forward(1).Save();
    }
    public int MoveDiagonalRightFoward()
    {
        return new ChessPieceMove(Position).Forward(1).Right(1).Save();
    }
    public int MoveDiagonalLeftFoward()
    {
        return new ChessPieceMove(Position).Forward(1).Left(1).Save();
    }
}
</code></pre>

<p>Now, you can use <code>ChessPiecePawn</code> for instance, on the board, and get the move index, validate it, and execute the process you need (e.g. change the current index to the new one, return an error since it's not valid ...etc). </p>

<p>I have intentionally left off the validation process in the above codes for demonstration purpose. So, you have something you can work on and make your own project. </p>

<p>A few notes on the above process : </p>

<ul>
<li>You have fixed 64 elements, so do some validation on that </li>
<li>some elements on the board would be out-of-range movements (for instance index 7 cannot accept <code>Right</code> move as it's on the board's edge. </li>
<li>Make use of generic interfaces like <code>IEnumerable</code> and <code>IDisposable</code> this is a must use.</li>
<li>You can implement another interface or abstract class for the movements class. </li>
<li><p>using <code>const</code> at this stage is just for <code>Readability</code> purpose.</p></li>
<li><p>for validations, start with the standard validations, then go for game validation. </p></li>
<li>Keep in mind that you would need a wrapper class to wrap your project like <code>ChessGame</code> so it would be more appropriate to initiate the game instead of calling <code>ChessBoard</code>. This wrapper can also have new functionalities, like specifying players name or timing ..etc.</li>
<li><p>Keep it simple and open for new requirements. </p></li>
<li><p><strong>MOST IMPORTANTLY TAKE NOTES OF OTHER ANSWERS AS EACH ANSWER COVERS SOME PART OF YOUR QUESTION</strong> . gathering all answers points would give you a full answer.</p></li>
</ul>

<p>I hope this would benefit you, and I wish you a good luck on your upcoming job. </p>
    </div>