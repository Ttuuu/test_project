<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Review</h2>

<p><strong>Whitespace</strong><br>
Use whitespace between the method name and opening parenthesis: <code>Main (string[] args)</code> instead of <code>Main(string[] args)</code>. The same convention applies to statements such as <em>while</em>: <code>while (Continue)</code> instead of <code>while(Continue)</code>. And also to curly braces: <code>new string[4] {</code> instead of <code>new string[4]{</code>.</p>

<hr>

<p><strong>New Line</strong><br>
Prefer using the new line of the system over a fixed format: use <code>Environment.NewLine</code> instead of <code>\n</code>.</p>

<hr>

<p><strong>Comments</strong><br>
Avoid useless comments such as <code>//strings</code>. We all know these are string instances: <code>"Hello!", "Enter a color\n1 = blue\n2 = red\n3 = Magenta", "Render numbers"</code>. Don't comment out code that you don't use, remove it entirely: <code>//string Nums = "";</code>.</p>

<hr>

<p><strong>Naming conventions</strong><br>
Use pascalCase for variable names: <code>string[] arrays</code> instead of <code>string[] Arrays</code>. But what does <em>arrays</em> mean? Use a meaningful instead: <code>string[] promptMessages</code> for instance.</p>

<hr>

<p><strong>Using an array or not</strong><br>
There is no reason to wrap the messages in an array. <code>Console.WriteLine(Arrays[1]);</code> is a disaster for readability. <code>Console.WriteLine("Enter a color ..");</code> is much cleaner. On the other hand, <code>string[] color</code> could have been declared as <code>ConsoleColor[] colors</code>. This way, you could have avoided all that repetitive code. You should try to write DRY code.</p>

<pre><code>var colors = new ConsoleColor[] {
    ConsoleColor.Blue, 
    ConsoleColor.Red, 
    ConsoleColor.Magenta
};

// NOTE: this is a trivial parsing, you should perform some validation..
// 0 for Blue, 1 for Red, 2 for Magenta
char userColor = int.Parse(Console.ReadKey().KeyChar.ToString());

Console.ForegroundColor = colors[userColor];
Console.WriteLine("Do you want to continue? y/n");
var nextTask = Console.ReadKey().KeyChar;
Continue = nextTask == 'y';
</code></pre>

<hr>

<p><strong>Console input</strong><br>
Don't read an entire line when you only need a single character: <code>string NextTask = Console.ReadLine(); if (NextTask == "y") { ..</code>. You can read a single character: <code>string NextTask = Console.ReadKey().KeyChar;</code>. Unlike <code>ReadLine</code>, <code>ReadKey</code> does not wait for <em>Enter</em> key to be pressed, but immediately returns the pressed key.</p>
    </div>