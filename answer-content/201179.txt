<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Taking up patpass' suggestion to use <code>testBit</code> for the check whether a number is even, I suggest to write a simple function <code>isEven</code> to check exactly that. This will make the code much clearer to read than some arbitrary math in an if-expression:</p>

<pre><code>private static boolean isEven(BigInteger numberToTest) {
    return !numberToTest.testBit(0);
}
</code></pre>

<p>Regarding naming and scoping:</p>

<ul>
<li><code>x</code>, <code>y</code>, <code>z</code>, and <code>n</code> should be named more expressively, along the lines of <code>numberOfFuelPellets</code>, whatever, whatever, <code>inputAsString</code>. (The function name <code>answer</code> also is a no-go but that's in the assignment.)</li>
<li><code>y</code> and <code>z</code> should be declared inside the else-part where you need them - keep the scope as small as possible.</li>
<li><code>two</code> and <code>three</code> should be constants, i.e. static final class fields (and named <code>TWO</code> and <code>THREE</code> in that case) (if the challenge permits that)</li>
</ul>

<p>... and I strongly advise <em>against</em> using right-shifts for division by 2. This kind of "clever optimization" mainly makes the code harder to understand. In some special cases there might be a runtime benefit from doing this, but only perform such tricks if you <em>verified</em> that you have a performance problem <em>and</em> introduced some serious benchmarks to prove that the performance promlem goes away by doing that.</p>
    </div>