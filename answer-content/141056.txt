<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3><code>try</code>-with-resources</h3>

<blockquote>
<pre><code>    static BufferedWriter bw = null;
</code></pre>
</blockquote>

<p>You make this a class field.  So it is common to every object of this class.  Why?  </p>

<blockquote>
<pre><code>    public static void appendToFile(String filepath, String s) {
        try {
            // APPEND MODE SET HERE
            bw = new BufferedWriter(new FileWriter(filepath, true));
            bw.write(s);
            bw.newLine();
            bw.flush();
        } catch (IOException e) {
            System.out.println(e);
        } finally { // always close the file
            if (bw != null)
                try {
                    bw.close();
                } catch (IOException ioe2) {
                    // just ignore it
                }
        } // end try/catch/finally
    }
</code></pre>
</blockquote>

<p>One would think that this would check if <code>bw</code> is already instantiated before operating on <code>bw</code>.  But it doesn't.  It writes over it and keeps going.  If it doesn't care about previous values of <code>bw</code>, why save them?  This holds a reference to a closed <code>BufferedWriter</code> until the next time it needs one.  Then it creates a new object and sends the old one for garbage collection.  Why wait?  Why not just send the old object for garbage collection as soon as you are done using it?  </p>

<p>Why not just replace the whole thing with </p>

<pre><code>    public static void appendToFile(String filepath, String s) {
        // APPEND MODE SET on the FileWriter
        try (BufferedWriter bw = new BufferedWriter(new FileWriter(filepath, true))) {
            bw.write(s);
            bw.newLine();
            bw.flush();
        } catch (IOException e) {
            System.out.println(e);
        }
    }
</code></pre>

<p>Now the <a href="http://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html" rel="nofollow noreferrer"><code>try</code>-with-resources</a> handles closing the file.  No manual <code>finally</code> block needed.  That alone cuts almost half the code of the method.  This also limits the scope to just the four places it is used.  </p>

<p>Since we always create a new <code>BufferedWriter</code>, this just makes it a local variable.  No class field needed.  </p>

<p>Also, you may want to change the comment to explain why append mode is set on the <code>FileWriter</code> rather than simply saying that append mode is set.  We can see that the <code>FileWriter</code> object is created in append mode if we read the JavaDoc on calling it with a Boolean second argument.  What I still don't know though is why that matters.  I'd much prefer to see </p>

<pre><code>        // append to FileWriter so that ...
</code></pre>

<p>With the ... replaced with a real explanation.  </p>

<p>As is, I can see that you found this important but I have no idea why.  The current comment tells me nothing that the code doesn't.  I would expect a method called <code>appendToFile</code> to use append mode.  In fact, it leaves me a bit confused, as I don't know which statement is supposed to set append mode until I read the code.  </p>

<h3>Don't Repeat Yourself (DRY)</h3>

<blockquote>
<pre><code>    void checkCollisionUp(GameLevel level) {
        if (getRelativeTile(level, this.x - 14, this.y + 24, 0, -1) != null &amp;&amp;
                getRelativeTile(level, this.x - 14, this.y + 24, 0, -1).getType() == 0 ||
                getRelativeTile(level, this.x + 15, this.y + 24, 0, -1) != null &amp;&amp;
                getRelativeTile(level, this.x + 15, this.y + 24, 0, -1).getType() == 0) {
            this.collidingUp = true;
            return;
        }
        this.collidingUp = false;
    }
</code></pre>
</blockquote>

<p>You have four of these methods.  All of them have the same basic pattern.  You may want to consider <a href="https://codereview.stackexchange.com/a/34056/71574">@SimonForsberg's Direction enum pattern</a> for this.  But even without that, you could make this code considerably simpler.  </p>

<pre><code>    void checkCollisionUp(GameLevel level) {
        collidingUp = hasCollision(level, x - 14, y + 24, x + 15, y + 24, 0, -1);
    }
</code></pre>

<p>I prefer not using the <code>this.</code> unless needed to disambiguate.  That of course is up to you.  It works both ways.  I'm just pointing out that I don't use it.  </p>

<p>Then of course you need </p>

<pre><code>    bool hasCollision(GameLevel level, int x1, int y1, int x2, int y2, int xOff, int yOff) {
        Tile relative1 = getRelativeTile(level, x1, y1, xOff, yOff);
        Tile relative2 = getRelativeTile(level, x2, y2, xOff, yOff);

        return relative1 != null &amp;&amp; relative1.getType() == 0
            || relative2 != null &amp;&amp; relative2.getType() == 0;
    }
</code></pre>

<p>Now there are five simple methods rather than four complex and repetitive methods.  </p>

<p>I prefer to put operators at the beginning of the lines rather than at the end.  This makes it easier to scan down the left side and get all the critical information.  </p>

<p>I don't like the numbered variables, but I don't have better names for them.  Perhaps <code>topLeft</code> and <code>bottomRight</code> or <code>small</code> and <code>big</code> or <code>close</code> and <code>far</code>.  </p>

<p>This only calls each method once instead of calling both twice.  </p>

<p>I'm not crazy about all the -14, +15, and +24 in that code.  I would rather those were defined as constants in some way.  I note that while it is -14 and +15 three out of four times, the other time it is -15 and +15.  Is that deliberate?  Or a mistake?  I haven't tried to investigate it enough to tell.  </p>

<p>If <code>getRelativeTile</code> were a <code>static</code> function, then <code>hasCollision</code> could be one too.  </p>

<h3>Set before the constructor</h3>

<blockquote>
<pre><code>    /** True if the player is colliding with a tile above them. */
    private boolean collidingUp;

    /** True if the player is colliding with a tile below them. */
    private boolean collidingDown;

    /** True if the player is colliding with a tile to their left. */
    private boolean collidingLeft;

    /** True if the player is colliding with a tile to their right. */
    private boolean collidingRight;

    /** The smack sound. */
    Sound smack;

    /** The number of times the player has died. */
    private int deaths;

    /** True if the player has been hit and is not allowed to move. */
    private boolean dead;

    /** The opacity of the player. */
    private double opacity;

    public Player() {
        this.x = 400;
        this.y = 300;
        this.snapX = x/40;
        this.snapY = y/40;
        this.collidingUp = false;
        this.collidingDown = false;
        this.collidingLeft = false;
        this.collidingRight = false;
        this.deaths = 0;
        this.dead = false;
        this.opacity = 255;
    }





    public Player(int x, int y) {
        this.x = x;
        this.y = y;
        this.snapX = x/40;
        this.snapY = y/40;
        this.collidingUp = false;
        this.collidingDown = false;
        this.collidingLeft = false;
        this.collidingRight = false;
        this.deaths = 0;
        this.dead = false;
        this.opacity = 255;
    }
</code></pre>
</blockquote>

<p>You can get this down to </p>

<pre><code>    /** True if the player is colliding with a tile above them. */
    private boolean collidingUp = false;

    /** True if the player is colliding with a tile below them. */
    private boolean collidingDown = false;

    /** True if the player is colliding with a tile to their left. */
    private boolean collidingLeft = false;

    /** True if the player is colliding with a tile to their right. */
    private boolean collidingRight = false;

    /** The number of times the player has died. */
    private int deaths = 0;

    /** True if the player has been hit and is not allowed to move. */
    private boolean dead = false;

    /** The opacity of the player. */
    private double opacity = 255;

    public Player(int x, int y) {
        this.x = x;
        this.y = y;
        this.snapX = x/40;
        this.snapY = y/40;
    }

    public Player() {
        this(400, 300);
    }
</code></pre>

<p>This does three things to get the code down.  First, I get rid of a <code>smack</code> variable that is unused.  Second, for those fields that get set the same regardless of how the constructor is called, I initialize those at declaration time.  So the constructors don't need to do so.  Third, I <a href="https://stackoverflow.com/q/285177/6660678">call one constructor from the other</a>.  This allows me to set default values for the parameters.  And it means that we don't have to repeat the snap logic in both constructors.  </p>

<p>Java doesn't care about method order, so you can do it either way.  I prefer to have called methods before calling methods when possible.  You may prefer a different order.  </p>
    </div>