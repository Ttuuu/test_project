<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You can get rid of the while loops that break after the first iteration, and replace them with <code>if</code>.  </p>

<p>You can also get rid of some if statements, like you say. Consider</p>

<pre><code>    //display the computers input choice
    if (getComputerChoice == 1)
     {
        cout &lt;&lt; "The computer chose Rock." &lt;&lt; endl;
     }

     else if (getComputerChoice == 2)
    {
        cout &lt;&lt; "The computer chose Paper." &lt;&lt; endl;
    }

    else if (getComputerChoice == 3)
    {
        cout &lt;&lt; "The computer chose Scissors." &lt;&lt; endl;
    }
</code></pre>

<p>It would be cleaner to use a switch statement:  </p>

<pre><code>switch (getComputerChoice) {
    case 1:
         cout &lt;&lt; "The computer chose Rock." &lt;&lt; endl;
         break; // breaking is important
    case 2: 
         // Case code here
    case 3: 
         // Case code here
    default:
         // the switch statement reminds you that you should consider what happens if the input is something else
}
</code></pre>

<p>The switch statement is less code for the same thing, and hence easier readable. Alternatively, you could also use a list of the possible strings, and only write the code for printing once. That feels more elegant to me, but makes the code slightly harder to understand if read by novice co-programmers.</p>

<pre><code>string choices[] = {"Rock", "Paper", "Scissors"};
//display the computers input choice
cout &lt;&lt; "The computer chose " &lt;&lt; choices[getComputerChoice-1] &lt;&lt; "." &lt;&lt; endl;
</code></pre>

<p>Note the minus one because you start counting from 1 instead of 0.  </p>

<p>For determining whether the user won, you can use modulo computation instead of typing out all the relations. It is up to you whether you prefer more readable code (like you wrote) or code that is more easily modified for more numbers. It is not neccessarily better, but I thought I'd point out the possibility.  </p>

<p>The switch case in <code>main()</code> for getting the user input as integer can be replaced with  </p>

<pre><code>//assinging the numbers to getUserChoice
getUserChoice = reply - '0';
</code></pre>

<p>I prefer this because of its simplicity and less code means less possibility for errors or issues when later modifying it and forgetting to change something. This line works as described <a href="https://stackoverflow.com/a/5030086/2550406">here</a></p>

<blockquote>
  <p><code>a - '0'</code> is equivalent to <code>((int)a) - ((int)'0')</code>, which means the ascii
  values of the characters are subtracted from each other. Since 0 comes
  directly before 1 in the ascii table (and so on until 9), the
  difference between the two gives the number that the character a
  represents.</p>
</blockquote>

<p>Since we are already storing the choices in an array, we don't really want to have that same information at another place as well - that would make it harder to update the program. That is why I refer to the choices array from the <code>main</code> function as well.</p>

<p>Also note that <code>using namespace std;</code> is fine in such a small program, but can get messy if you get confused about which functions are from which namespace.</p>

<p>The comment to your question about global variables points out that it would be cleaner to instead pass <code>getUserChoice</code> as parameter. And you only access <code>getComputerChoice</code> in one function, so it would be better to not use a global variable for that. That way, it is clear to a reader that there are no evil side effects.</p>

<p>Note that <code>rand()</code> is pseudorandom, and also <a href="https://stackoverflow.com/questions/9459035/why-does-rand-yield-the-same-sequence-of-numbers-on-every-run">it is the same on each run</a>. Please see the link - I have not modified this in my version of your code.</p>

<hr>

<p>Here is the complete program as I modified it:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;cstdlib&gt;
#include &lt;string&gt;

using namespace std;

string choices[] = {"Rock", "Paper", "Scissors"};

void determineWinner(int getUserChoice)
{   

    //random computer choice
    int getComputerChoice = rand() % 3 + 1; // 1, 2, or 3

    //displays the users input choice
    if (getUserChoice == 4)
    {
        cout &lt;&lt; "You have chosen to exit the game. The game will now end." &lt;&lt; endl;
        return;
    }
    else if (getUserChoice &gt; 4)
    {
        cout &lt;&lt; "You have chosen something weird!" &lt;&lt; endl;
        return;
    }
    else
    {
        cout &lt;&lt; "You chose " &lt;&lt; choices[getUserChoice-1] &lt;&lt; "." &lt;&lt; endl;
    }

    //display the computers input choice
    cout &lt;&lt; "The computer chose " &lt;&lt; choices[getComputerChoice-1] &lt;&lt; "." &lt;&lt; endl;

    //determines winner
    if ((getUserChoice + 1) % 3 == getComputerChoice % 3)
    {
        cout &lt;&lt; "I'm sorry, the computer has beat you." &lt;&lt; endl &lt;&lt; endl;
    }
    else if ((getUserChoice + 2) % 3 == getComputerChoice % 3)
    {
        cout &lt;&lt; "Congratulations, you win!" &lt;&lt; endl &lt;&lt; endl;
    }
    else
    {
        cout &lt;&lt; "This game is tied. " &lt;&lt; endl &lt;&lt; endl;
    }   
}

int main()
{
    //displays a description of the game
    cout &lt;&lt; "Rock, Paper, Scisscors Game!"  &lt;&lt; endl &lt;&lt; endl;
    cout &lt;&lt; "You will be playing against the computer." &lt;&lt; endl;
    cout &lt;&lt; "Rock beats Scissors; Paper beats Rock; Scissors beats Paper." &lt;&lt; endl &lt;&lt; endl;
    cout &lt;&lt; "------------------------------------------------------------------" &lt;&lt; endl &lt;&lt; endl;
    cout &lt;&lt; "Please choose from the following" &lt;&lt; endl;
    for (int i=1; i&lt;4; i++)
    {
        cout &lt;&lt; ((char)((int)'0'+i)) &lt;&lt; ". " &lt;&lt; choices[i-1] &lt;&lt; endl;
    }
    cout &lt;&lt; "4. Quit" &lt;&lt; endl &lt;&lt; endl;

    //loop sequence that allows player to play again if their input is not 4
    int getUserChoice;
    while (getUserChoice != 4)
    {
        // play begins
        char reply;
        cin &gt;&gt; reply;
        cout &lt;&lt; endl;

        //assinging the numbers to getUserChoice
        getUserChoice = reply - '0';

        //calls the void function to display the winner
        determineWinner(getUserChoice);

    }

    return 0;
}
</code></pre>
    </div>