<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are some comments on your code and design.</p>

<h2>Don't abuse <code>using namespace std</code></h2>

<p>Putting <code>using namespace std</code> at the top of every program is <a href="http://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice">a bad habit</a>.</p>

<h2>Use the required <code>#include</code>s</h2>

<p>The code uses <code>std::string</code> which means that it should <code>#include &lt;string&gt;</code>.  It also needs <code>#include &lt;iostream&gt;</code>.</p>

<h2>Don't <code>#include</code> headers that aren't needed</h2>

<p>The inverse of the advice above is to not include header files that are not needed.  In this case, <code>"bits/stdc++.h"</code> should be removed.  It's not standard and will only <a href="https://stackoverflow.com/questions/25311011/how-does-include-bits-stdc-h-work-in-c">increase compilation times</a>, so you should probably avoid it in favor of using the standard <code>#include</code>s as actually needed.</p>

<h2>Don't leak memory</h2>

<p>Each time your code in <code>main</code> creates a <code>new</code> pizza, it loses any pointer to the old one, making it a certainty that memory is leaked.  There are two ways to deal with that.  One is to use <code>delete</code> to match each <code>new</code>.  Another alternative is to use <em>smart pointers</em> instead.</p>

<h2>C++ isn't Java</h2>

<p>Code like this looks more like Java than idiomatic C++:</p>

<pre><code>std::string getdescription(){
    return description;
}
int getcost(){
    return cost;
}
</code></pre>

<p>Instead of writing generic getters and setters in the Java style, write idiomatic C++ instead:</p>

<pre><code>std::string desc() const {
    return m_description;
}
int cost() const {
    return m_cost;
}
</code></pre>

<p>Here I've used a relatively common idiom of prefixing class variables with <code>m_</code> and omitting the word <code>get</code>.  Additionally, both functions are declared <code>const</code> because they do not alter the underlying object.</p>

<h2>Reread the decorator pattern description</h2>

<p>I don't think your code actually faithfully implements the decorator pattern. Consider instead a revision to your pizza model in which a new pizza retains a reference to the underlying basic pizza model passed to the constructor.  That would be a better potential illustration for the use of a decorator pattern.  See <a href="https://en.wikipedia.org/wiki/Decorator_pattern" rel="nofollow noreferrer">https://en.wikipedia.org/wiki/Decorator_pattern</a> for more details.</p>
    </div>