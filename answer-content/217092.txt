<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In this case I would probably convert this <code>$this-&gt;Static_model</code> into a Config file that I can use through CI (that is what they are there for). You can even make CI load this file automatically, with hook.  And you can even load different version based on your <code>ENVIORMENT</code> setting (for testing and what not).</p>

<p>For the dynamic data, now depending how dynamic this is:</p>

<pre><code> $data['pages'] = $this-&gt;Pages_model-&gt;get_pages();
</code></pre>

<p>I would probably use the  <a href="https://www.codeigniter.com/userguide3/libraries/caching.html" rel="nofollow noreferrer">Caching Driver</a>.  Chances are this doesn't update that much, and even when it does you can reset the cache.  For example how often will you really add a new category. Certainly not every couple minutes, or even hours.</p>

<p>One other thing not mentioned</p>

<p>Avoid changing data types when returning from a method.  You may not even realize you are doing it. In some cases its perfectly fine to return mixed data types, but as a general rule you should avoid it as it complicates your downstream code by having to check the return data all the time for it's type.</p>

<p>I found this quick example (in your code):</p>

<pre><code>class Categories_model extends CI_Model {

    public function get_category($category_id){
        $query = $this-&gt;db-&gt;get_where('categories', array('id' =&gt; $category_id));
        if ($query-&gt;num_rows() &gt; 0) {
            return $query-&gt;row();
        }

    } //&lt;-- returns null || array

}

class Pages extends CI_Controller {
    public function page($page_id) {

        //...
        $data['categories'] = $this-&gt;Categories_model-&gt;get_categories(); //returns an array || null
        //...
        //requires a check (null is false, so is [])
        if ($data['categories']) {
            foreach ($data['categories'] as &amp;$category) {
                $category-&gt;posts_count = $this-&gt;Posts_model-&gt;count_posts_in_category($category-&gt;id);
            }
        }
        //...
    }
}
</code></pre>

<p>Instead consider this:</p>

<pre><code>class Categories_model extends CI_Model {

    public function get_category($category_id){
        $query = $this-&gt;db-&gt;get_where('categories', array('id' =&gt; $category_id));
        if ($query-&gt;num_rows() &gt; 0) {
            return $query-&gt;row();
        }
        return [];
    } 

}

class Pages extends CI_Controller {
    public function page($page_id) {
        //...
        $data['categories'] = $this-&gt;Categories_model-&gt;get_categories(); //always returns an array
        //...
        //requires no type check, as an empty array simply skips the loop
        foreach ($data['categories'] as &amp;$category) {
            $category-&gt;posts_count = $this-&gt;Posts_model-&gt;count_posts_in_category($category-&gt;id);
        }
        //...
    }
}
</code></pre>

<p>This may seem trivial, but it can add up to a lot of code. In PHP7 you can even set return type hints eg. <code>public function get_category($category_id) : array</code>. To insure the return type is consistent etc.</p>

<p>Really when it comes to programing one of the most important things is consistency.</p>

<p>Hope it helps!</p>
    </div>