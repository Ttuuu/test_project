<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Streamline logic</h2>
<p>There are several cases where some logic is unnecessarily repeated and /or could be simplified. e.g. In the following,</p>
<pre><code>trackItem.setOnAction(e -&gt; {
     if (!scoreDisplayed) {
            setRight(scoreLayout);
            scoreDisplayed = true;
            stage.sizeToScene();
     } else {
            setRight(null);
            scoreDisplayed = false;
            stage.sizeToScene();
     }
});
</code></pre>
<p>In both cases, <code>stage.SsizeToScene()</code> is invoked it should be independent of control flow. Similarly, notice that setting <code>scoreDisplayed</code> to true in one case and false in the other is really just inverting the current value. The only thing actually dependent is the <code>setRight</code> method and that is straightforward enough for the conditional operator.</p>
<pre><code>trackItem.setOnAction(e -&gt; {
    setRight(scoreDisplayed ? null : scoreLayout);
    scoreDisplayed = !scoreDisplayed;
    stage.sizeToScene();
 });
</code></pre>
<p>There are also cases where some objects are closely coupled they may merit clustering into another. For instance, take the proceeding:</p>
<pre><code>private StringProperty xPlayer = new SimpleStringProperty("X player");
private IntegerProperty xScore = new SimpleIntegerProperty(0);

Text xText = new Text();
        xText.textProperty().bind(
            Bindings.concat(xPlayer).concat(" wins: ").concat(xScore.asString())
        );
</code></pre>
<p>This is all to represent the idea of a player, their score, and what text displays. This exact pattern is repeated for <code>oPlayer</code>, <code>oScore</code> and <code>oText</code> While largely a design decision, it would further simplify the code if these were clustered together. Rather than a Player enum a Player class could be created to house this logic, renaming what is now <code>Player</code> to <code>PlayerStyle</code> which could also be included in the new <code>Player</code> class.</p>
    </div>