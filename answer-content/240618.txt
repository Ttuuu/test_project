<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>I really don't think <code>Value</code> is a help here.<br>
Whilst I can see the allure of only assigning <code>x</code> to <code>static.x</code>.
This just looks like a smart, but not exactly good, work around to get default values.</p>

<p>You can just have <code>with_statics</code> take keyword arguments as the defaults.</p>

<pre class="lang-py prettyprint-override"><code>def with_statics(**defaults):
    statics = Statics(defaults)  # Implementation left to imagination
    def inner(f):
        @wraps(f)
        def wrapper(*args, **kwargs):
            return f(statics, *args, **kwargs)
        return wrapper
    return inner
</code></pre></li>
<li><p>Defining <code>Value</code> inside of two other classes is not great.
You can just move it to the global scope and change the <code>isinstance</code> check to not need to use indexing.</p>

<p>If you still want the class on the other classes then you can just assign it as a class attribute.</p>

<pre class="lang-py prettyprint-override"><code>class Current:
    Value = Value

    ...
</code></pre></li>
<li><p>I think I'm fairly well versed in the magical Python arts. However your code is just confusing.</p></li>
<li><p>Your code looks like it's a hack when a hack isn't needed.</p>

<p>To highlight this I will convert your doctests to not use your code.</p></li>
</ul>

<pre class="lang-py prettyprint-override"><code>def counter():
    counter.val += 1
    return counter.val


counter.val = 0
print(counter(), counter(), counter())


def get_string():
    print("Getting string")
    return ""


def record(text):
    if record.recorded is None:
        record.recorded = get_string()
    record.recorded += text
    return record.recorded


record.recorded = None
print(record("Hello"))
print(record(", world!"))
</code></pre>

<p>Yes it works. However, honestly, why would you want this?</p>
    </div>