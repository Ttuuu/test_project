<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As a matter of semantics, I will urge you to familiarize yourself with the terms of OOP.  You might start with <a href="https://stackoverflow.com/q/4246883/2943403">https://stackoverflow.com/q/4246883/2943403</a> , but this is just the first one that I grabbed and not necessarily the best reference -- get a few different perspectives.</p>

<p>As for refactoring your switch block into new/separate methods, yes, I think that is the superior design decision.  This will allow you to break up the large block of processing logic into meaningful chunks.  In doing so, your script's readability/searchability will improve because you can craft meaningful names for each new method.</p>

<p>On the topic of method naming, <code>run</code> is not a great choice.  Perhaps the class name is extremely indicative of what it pertains to, but because classes often increase in size/complexity/etc. over time, it is imperative that you put careful thought into explicit method naming.</p>

<p>I recommended the null coalescing operator in my comment, but if you (and/or your team of devs) are not familiar with this syntax and readabilty is a higher priority then perhaps it would be better to leave your original syntax in place.</p>

<p>I don't recommend blending your printing functionality with your processing functionality.  You should always separate this actions into separate calls so that in the future you have greater flexibility.  Since you are always generating a string, you can reliably <code>echo</code> this method's return value if you wish.</p>

<p>My personal reference is to write early <code>return</code>s for predictable failures in my scripts versus <code>if (true) {</code> ... a large code block ... <code>} else {</code> a 1 or 2 line fault handler <code>}</code>. This can spare indentation, which can result in less horizontal scrolling (which I have a distaste for).</p>
    </div>