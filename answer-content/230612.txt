<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As you already said, it is a good idea separate commands from maths operations with the creation of two classes , I made two classes to give you a rough idea. In your <code>Main</code> class you can use <a href="https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html" rel="nofollow noreferrer">Try with resources</a> construct with your buffer, below the code</p>

<p><strong>Main.java</strong></p>

<pre><code>public class Main {

    public static void main(String[] args) {
        try (BufferedReader reader = new BufferedReader(new InputStreamReader(System.in))) {
            System.out.println("JavaRPN: Input numbers and operands separated by newline or space");
            RpnCli cli = new RpnCli();
            while (true) {
                String input = reader.readLine().toLowerCase();
                cli.parse(input);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
</code></pre>

<p>You can see I created a <code>RpnCli</code> instance to avoid <code>static</code> method (I put static just the set of commands for possible future purposes). I updated the <code>RpnCli</code> class in the followind way:</p>

<p><strong>RpnCli.java</strong></p>

<pre><code>import java.util.ArrayDeque;
import java.util.Arrays;
import java.util.Deque;
import java.util.HashSet;
import java.util.Set;

public class RpnCli {
    private final static Set&lt;String&gt; commands = new HashSet&lt;&gt;(Arrays.asList("p", "e", "c", "pop", "swap"));
    private Deque&lt;Double&gt; stack;
    private Calculator calculator;

    public RpnCli() {
        this.stack = new ArrayDeque&lt;&gt;();
        this.calculator = new Calculator(stack);
    }

    public void parse(String input) {
        String[] parts = input.split(" ");
        for (int i = 0; i &lt; parts.length; i++) {
            try {
                Double num = Double.parseDouble(input);
                stack.push(num);
            } catch (NumberFormatException ex) { 
                operation(parts[i]);
            }
        }
    }

    private void operation(String input) {
        if (calculator.contains(input)) {
            calculator.calculate(input);
        } else {
            if (commands.contains(input)) {
                command(input);
            } else {
                System.out.println("ERROR: Invalid Command");
            }
        }
    }

    private void command(String input) { /*omitted for brevity*/ }
}
</code></pre>

<p>I divided math operations from command operations, so I created a new class <code>Calculator</code> for math operations that in its constructor has as its parameter the stack you use for all operations. You can see I used <code>Deque</code> class for variable <code>stack</code> because <code>Stack</code> java class is less complete compared to it. I also modified your <code>parse</code> method so if the input is not a <code>double</code> value will be parsed by <code>operation</code> method as you already made in your code. 
I added a new class called Calculator, below the code:</p>

<p><strong>Calculator.java</strong></p>

<pre><code>import java.util.Arrays;
import java.util.Deque;
import java.util.HashSet;
import java.util.Set;

public class Calculator {
    private final static Set&lt;String&gt; simples = new HashSet&lt;&gt;(Arrays.asList("+", "-", "*", "/", "^"));
    private final static Set&lt;String&gt; functions = new HashSet&lt;&gt;(Arrays.asList("sin", "cos", "tan", "asin", "acos", "atan", "sq"));
    private Deque&lt;Double&gt; stack;

    public Calculator(Deque&lt;Double&gt; stack) {
        this.stack = stack;
    }

    public boolean contains(String input) {
        return simples.contains(input) || functions.contains(input);
    }

    public void calculate(String input) {
        if (simples.contains(input)) {
            simple(input);
        } else {
            function(input);
        }
    }

    private void function(String input) { /*omitted for brevity*/ }

    private void simple(String input) { /*omitted for brevity*/ }
}
</code></pre>

<p>The most important thing is this class is the field <code>Stack</code> passed by the <code>RpnCli</code> class: it will no more appear as a parameter in the methods like the methods of the containing class <code>RpnCli</code> and so there is no more need of static methods.</p>
    </div>