<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Generally, the code is simple and easy to understand.</p>

<h2>Concurrency</h2>

<p>It's good that you have a dedicated <code>Lock</code> object. You might consider a more expressive name, but in this case I think you can get away with it.</p>

<p>As you have noticed, using the <code>lock</code> means you gain nothing from the <code>ConcurrentDictionary'2</code>. Since this is such a simple interface, I would keep the <code>lock</code> and ditch the <code>ConcurrentDictionary</code> unless you have a serious (and measurable) performance concern.</p>

<p>However, you should be aware that by locking while you call <code>Set</code>, you are blocking access while you wait for an operation to complete, the length of which you cannot know. Addressing this without changing the class' behaviour would be non-trivial, primarily because it would complicate the case where <code>Set</code> fails, but may be necessary if <code>Set</code> is slow or needs access to the cache itself. If you don't care how many times you call <code>Set</code>, you could just use <code>ConcurrentDictionary.GetOrAdd</code> as mentioned by CharlesNRice in a comment, which would simply things somewhat.</p>

<h2>Other</h2>

<ul>
<li><p>It's good that you have provided some level of inline documentation. I would be inclined to add an explanation of the threading behaviour (e.g. blocks while calling <code>Set</code>, will only call <code>Set</code> once). "a thread-safe way" is pretty meaningless: it's much better to explain the guarantees you will make.</p></li>
<li><p>Do you anticipate needing to change <code>Set</code>? If not, you should consider making it readonly and assign it in a constructor. There is a design concern that changing <code>Set</code> means you can't know which version was used by any call to <code>Get</code> from another thread.</p></li>
<li><p>Using a <code>Tuple&lt;int?, string&gt;</code> as a union doesn't seem a great idea. Either implement a sound union as a class of struct, or consider having a separate cache for each. If you do wish to keep this API, you should enforce the assumption that exactly one of them is <code>null</code> by explicitly checking and throwing if this is not the case, since it represents an error on the part of the caller, and telling them them sooner rather than later will save them lots of misery and time spent debugging.</p></li>
</ul>
    </div>