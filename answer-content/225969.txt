<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><code>prime_sieve()</code> isn't your code, so I won't review it (although I will express my opinion that it's in dire need of more commenting).</p>

<p>However, the choice to use it is firmly within the scope of this review, and frankly I can't understand it. The whole point of that particular implementation is to optimise memory use at the cost of considerable code complexity. But given that your goal is a fully cached list (i.e. optimising speed at the cost of memory usage), it would make far more sense to me to use a simpler implementation which directly accesses the cache.</p>

<hr>

<blockquote>
<pre><code>        if vals[-1] &gt;= end:
            hi = self.get_ind(end)
            yield from islice(vals, lo, hi)
            return
        else:
            while vals[-1] &lt; end:
                if len(vals) &gt; lo:
                    bound = len(vals)
                    yield from takewhile(lambda p: p &lt;=end, islice(vals, lo, bound))
                    lo = bound
                vals.append(next(self.prime_gen))
        hi = self.get_ind(end)
        yield from islice(vals, lo, hi)
</code></pre>
</blockquote>

<p>Taking a step back to look at the structure, we have</p>

<pre><code>        if condition():
            foo()
            return
        else:
            while not condition():
                bar()
        foo()
        return # implicit because it's the end of the function
</code></pre>

<p>Firstly,</p>

<pre><code>            return
        else:
</code></pre>

<p>can often be clearer without the <code>else</code>, which is unnecessary: the scope it defines is unreachable if the <code>if</code> block executed. That gives</p>

<pre><code>        if condition():
            foo()
            return

        while not condition():
            bar()
        foo()
        return
</code></pre>

<p>which is semantically identical to</p>

<pre><code>        while not condition():
            bar()
        foo()
        return
</code></pre>

<hr>

<blockquote>
<pre><code>            while vals[-1] &lt; end:
                if len(vals) &gt; lo:
                    bound = len(vals)
                    yield from takewhile(lambda p: p &lt;=end, islice(vals, lo, bound))
                    lo = bound
                vals.append(next(self.prime_gen))
</code></pre>
</blockquote>

<p>The whole <code>if</code> clause in here seems dubious to me. Why can't it be removed entirely? (I figured out the reason, but IMO there should be a comment to save me the effort).</p>

<p>Given that all but the first time round it will <code>yield from</code> a slice containing precisely one value (the one appended the previous time round), it seems rather heavyweight. It would probably make sense to refactor as:</p>

<pre><code>    yield from (something)
    while vals[-1] &lt; end:
        extension = next(self.prime_gen)
        vals.append(extension)
        yield extension
</code></pre>

<hr>

<p>Further modification to the final refactors implemented for the above points may come from the simpler replacement of <code>prime_gen</code>. Do you want a replacement with produces primes one at a time, or something like a paged sieve? The latter should be more efficient, but at the cost of slight complication.</p>

<hr>

<blockquote>
<pre><code>    def get_ind(self, x):
</code></pre>
</blockquote>

<p>If I had to guess without any contextual clues, I would assume that <code>ind</code> is short for <em>independent</em>. If it's necessary to abbreviate <code>index</code> then I consider <code>idx</code> to be the best option. But here there is a clear correct name for the method: <code>index</code>, for consistency with <code>list.index</code>.</p>

<p>(Of course, that's assuming you want it to be public. Given that it returns incorrect values for primes which haven't yet been reached by <code>get</code>, it would probably be better to call it <code>_index</code>).</p>
    </div>