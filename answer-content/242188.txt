<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'll start by listing some notes on the code itself and then I'll suggest a new architecture that I think will help improve the 'maintainability' of the code.</p>

<ol>
<li><p>As <a href="https://codereview.stackexchange.com/questions/242179/php-how-can-i-refactor-this-store-function-which-handles-different-database-o/242188#comment475269_242179">@YourCommonSense said</a>, the AddPreferences methods should be only one method that will take the user_id and preference_id and add it to the database, and this will be it's sole purpose. Also what if you got new roles? What if you got new preferences? You will have to add new functions for each one of these, the best way is to go abstract and generalize the thing, later on when you add new preferences, the method doesn't care, it just takes the user_id and the preference_id.</p></li>
<li><p>Throw Exceptions, and let the controller handle them, and then return exceptions with error codes. Don't return that <code>error</code> flag, <code>message</code>. So for example let's say you wanted to add a a preference to a user that already exists, this should throw an exception from the AddPreferences method, the Controller will handle the exception and then return a response with <code>status_code = 400 // for example, maybe you want another code to represent that</code> and the exception message that was thrown, this way you can handle things better in the front end and debug with ease.</p></li>
<li><p>Why not move the database logic to a separate generic class and use it, maybe you can create a class that you can extend and give it the table_name, and this way it can control all database operations specific to that table, just like ORM models, you can search for ActiveRecord or Eloquent to learn more.</p></li>
<li><p>Don't catch Exceptions in low layers unless you have another option to use of their fail, otherwise just throw them and let them bubble. For example, int the <code>AddAdminUserPreferences</code>, you caught the exception and returned false, okay, but how should I know what has gone wrong? How should the user know? What will happen next?</p></li>
</ol>

<p>So for the Architecture, Please search MVC, there is plenty of resources out there, and after that, there is there repository pattern which will do a really good job in separating the concerns, leaving the database layer away from business logic.</p>

<p>As a side note, I'd suggest you look at 'lumen', it a pretty REST framework, very easy to use and has a wide range of things, including a smart Service Container and Discovery, so you wont need to bind (almost)anything, it also has a really good ORM and Query builder.</p>

<p>EDIT: Example on the 2nd Point.</p>

<p>instead of</p>

<pre><code>// return if the transaction is rollbacked
    if(!$preferenceAdded){
        return $response-&gt;withJSON([
            "error" =&gt; true, 
            "message" =&gt; "cannot add preferences for user"
            "data" =&gt; $user_id
        ]);
    }
</code></pre>

<p>You can do this</p>

<pre><code>// return if the transaction is rollbacked
    if(!$preferenceAdded){
        return $response-&gt;withJSON([
            "message" =&gt; "cannot add preferences for user"
        ])-&gt;statusCode(400);  // BAD_REQUEST, and I'm not sure if this is how to set a statusCode, sorry.
    }
</code></pre>

<p>Now you are in the browser and sent your request, the old way is you will check whether the <code>error</code> flag is true or false, and act based on that, and you will repeat that check in every call to the api, and the method of sending an error flag itself is not a reliable(and i don't like it, not beautiful :) ).</p>

<p>but if you return a <code>status_code = 400 // or anything other than success codes</code>, this will throw exception in the request you made from the browser, say you're using fetch.</p>

<pre><code>fetch('www.example.com').then(response =&gt; response.json()).catch(e =&gt; {
    // Do something with the exception
})
</code></pre>

<p>Instead of</p>

<pre><code>fetch('www.example.com').then(response =&gt; {
    response = response.json()
    if(response.error) {
        // Do something with the error
    } else {
        // Do something with the response
    }
}).catch(e =&gt; {
    // Do something with the exception
})
</code></pre>

<p>See How you separated the response logic from the code logic?.</p>
    </div>