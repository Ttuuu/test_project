<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In order to give an alternative to the <a href="https://codereview.stackexchange.com/a/232711/98493">excellent RegEx answer</a> by <a href="https://codereview.stackexchange.com/users/95789/romanperekhrest">@RomanPerekhrest</a>, here is one using <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>itertools.groupby</code></a>. This way you can eliminate your manual <code>for</code> loops and counting for the <code>run_length_encode</code> function.</p>

<pre><code>from itertools import groupby

def run_length_encode(s):
    """Returns a RLE string like this:
       'ABBCC' -&gt; '1A2B3C'
    """
    if not s.isalpha():
        raise EncodeError('Input string must contain only alphabetic chars')

    return "".join(f"{len(list(g))}{c}" for c, g in groupby(s))
</code></pre>

<p>For the decoding I would also use a RegEx, but maybe using <a href="https://docs.python.org/3/library/re.html#re.findall" rel="nofollow noreferrer"><code>re.findall</code></a>:</p>

<pre><code>def run_length_decode(s):
    """Take a RLE from `run_length_encode` and decompress it:
       '1A2B3C' -&gt; 'ABBCC'
    """
    return "".join(c * int(n) for n, c in re.findall(r'(\d)([a-zA-Z])', s))
</code></pre>

<p>Of course you would have to add all the sanity checks back again to this. Doing that will make it less neat and short. The current code will raise some exceptions (e.g. for the empty string), but skip malformed parts of the string (check out <code>run_length_decode("a2b") -&gt; "bb"</code>).</p>

<p>In addition, you should probably also document your functions, ideally using a <a href="https://www.python.org/dev/peps/pep-0257/" rel="nofollow noreferrer"><code>docstring</code></a>.</p>
    </div>