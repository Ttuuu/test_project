<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A few things I noticed,</p>

<p>First of all this is plain wrong (if it's pure PDO):</p>

<pre><code>$link-&gt;query("SELECT useragent_hash, user_ip FROM users WHERE username = :username");
$link-&gt;bind(':username', $_SESSION['username']);
$link-&gt;execute();
</code></pre>

<blockquote>
  <p><strong>PDO::query</strong> â€” Executes an SQL statement, returning a result set as a PDOStatement object </p>
</blockquote>

<p><a href="http://php.net/manual/en/pdo.query.php" rel="nofollow noreferrer">http://php.net/manual/en/pdo.query.php</a></p>

<p>This should be <code>PDO::prepare</code> like this:</p>

<pre><code>$stmt = $link-&gt;prepare("SELECT useragent_hash, user_ip FROM users WHERE username = :username");
$stmt-&gt;bindParam(':username', $_SESSION['username']);
$stmt-&gt;execute();
</code></pre>

<p>Also note you have to bind and execute against the PDOStatment object and not the PDO object itself.</p>

<p><strong>Function arguments, and code responsibility</strong></p>

<p>Then even your function arguments:</p>

<pre><code>function login($submitted_password, $password, $username) {
</code></pre>

<p>You most likely wont know <code>$password</code> at this point, nor should you know it.  If you redo your function like this:</p>

<pre><code>//note $submitted_password was renamed as $password
function login($password, $username) {
    global $link;

    $stmt = $link-&gt;prepare("SELECT id, password, username, user_level FROM users WHERE username = :username");
    //string arguments can be passed as an array directly to execute
    $stmt-&gt;execute([':username'=&gt;$username]);

    if(false !== ($row = $stmt-&gt;fetch(PDO::FETCH_ASSOC))){
        if(passwordVerify($password, $row['password'])) {
              ///...rest of code here
        } else {
            $error = "Password error"; // password fails
        }
    }else{
        $error = "Username error"; // username fails
    }
}

/*
  you don't have to do separate errors for Username &amp; Password,
  in fact there is a good argument to keep these errors the same 
  from the end users perspective.
*/
</code></pre>

<p>This way you only need the submitted username, and password. Which are both easily available from a login form.  Another thing to mention, is that after the password check you don't verify the row data.  It's probably unnecessary given the larger context.  For example if you had to previously (before calling login) pull the user data to get the encrypted password.  Then you know that the user must be valid.  However, when looking at the code as a single unit, it should be verified right when it's pulled from the DB. Because, if that larger context changes then there is no check being done.</p>

<p>Instead you can consolidate it, by just letting the login function take care of pulling the stored password at the same time it's checking the username (by querying for it).</p>

<p>What I mean by <strong>code responsibility</strong> is some other code must be getting the password from the DB, otherwise how would you know the stored password.  This code whatever it is, really shouldn't be responsible for that. On top of that every time you call login, you will have to pull that password before hand.  So it's better to wrap those operations into login function.  It just makes more sense to do it that way and have the arguments both be end user submitted data, instead of a mix of stored data and user data.</p>

<p>Hope that makes sense.</p>
    </div>