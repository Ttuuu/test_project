<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>    template&lt;class Function, class Iterator, unsigned... IntegerSequence&gt;
    auto apply(Function f, Iterator first, std::integer_sequence&lt;unsigned, IntegerSequence...&gt;)
    {
        return f(*std::next(first, IntegerSequence)...);
    }
</code></pre>

<p>The <code>Iterator</code> has the requirements of a <a href="https://en.cppreference.com/w/cpp/named_req/ForwardIterator" rel="nofollow noreferrer">forward iterator</a> (dereferenceable, forward traversal, multipass).  At the very least, document the iterator type. Also, you should check to make sure the iterator meets the requirements.</p>

<p>The sequence type is too narrow and doesn't support a commonly used sequence like <code>std::index_sequence</code>. </p>

<p>The sequence helpers are defined in <code>&lt;utility&gt;</code>. Don't rely on latent dependencies from other includes, if you reference it, you should include it.</p>

<pre><code>#include &lt;cstddef&gt;       // std::ptrdiff_t
#include &lt;iterator&gt;      // std::iterator_traits, std::next, std::distance
#include &lt;type_traits&gt;   // std::is_base_of
#include &lt;optional&gt;
#include &lt;utility&gt;       // std::make_integer_sequence
/* ... */

    template&lt;class Function, class ForwardIterator, class Index, Index... Indices&gt;
    auto apply(Function f, ForwardIterator first, std::integer_sequence&lt;Index, Indices...&gt;)
    {
        static_assert(
            std::is_base_of&lt;std::forward_iterator_tag,
                typename std::iterator_traits&lt;ForwardIterator&gt;::iterator_category
            &gt;::value, "");
        return f(*std::next(first, Indices)...);
    }
</code></pre>

<hr>

<pre><code>    template&lt;typename F&gt;
    constexpr const unsigned arg_count_v = arg_count&lt;F&gt;::value;
</code></pre>

<p>Programmers typically refer to the number of arguments or operands a function or operation takes as the <a href="https://en.wikipedia.org/wiki/Arity" rel="nofollow noreferrer">Arity</a>.</p>

<p>What is the arity of <code>[](auto...){}</code>? What is the arity of <code>[](){}</code> and how does that interact with any subsequent divisions?</p>

<p>Try to be consistent with your naming.  While <code>F</code> is commonly <code>Function</code>, you kinda bounce between the two.  Pick one and be consistent.</p>

<hr>

<pre><code>//Returns a pointer to the remainder values or the end or nullptr
template&lt;class Iterator,class Function&gt;
auto for_each_adjacent(Iterator begin,Iterator end,Function func)
-&gt; std::optional&lt;typename std::iterator_traits&lt;Iterator&gt;::pointer&gt;
</code></pre>

<p>Adjacents work like a sliding window, where each subsequent window starts at an offset of 1 from the first element in the previous window, e.g. </p>

<p>$$
[1, 2], [2, 3], [3, 4], ...
$$  </p>

<p>The behavior you have implemented is a window over chunk sizes, incrementing from the last element in the previous window instead of the first, e.g.</p>

<p>$$
[1, 2], [3, 4], [5, 6], ...
$$</p>

<p>and some remainder less than the the length.  Consider renaming this function to a name that better represents its action, (<code>for_each_chunked</code>?).</p>

<p>Reading your comment, why not just return <code>std::optional&lt;Iterator&gt;</code> or the <code>Iterator</code> itself? After the calls, <code>begin</code> will always point to the first element in the remaining chunk or <code>end</code>.  The user can check if the returned iterator is at <code>end</code>.</p>

<hr>

<pre><code>    using value_type = typename std::iterator_traits&lt;Iterator&gt;::value_type;
    const value_type length = std::distance(begin,end);
</code></pre>

<p>This doesn't make sense. <code>Iterator::value_type</code> is the type of the values that can be obtained by dereferencing the iterator.  <code>std::list&lt;std::string&gt;::iterator::value_type</code> is <code>std::string</code>.  Just use <code>auto</code> and let <code>std::distance</code> provide the correct type (<code>iterator::difference_type</code>, or <code>std::ptrdiff_t</code>).</p>

<pre><code>    const auto length = std::distance(begin, end);
</code></pre>

<hr>

<pre><code>    const std::ptrdiff_t remainder = length % detail::arg_count_v&lt;Function&gt;;
    for (auto d = length; d &gt;= detail::arg_count_v&lt;Function&gt;; d -= detail::arg_count_v&lt;Function&gt;)
        detail::apply(func,(end - d),std::make_integer_sequence&lt;unsigned,detail::arg_count_v&lt;Function&gt;&gt;());

return (remainder) ? std::make_optional(end - remainder) : std::nullopt;
</code></pre>

<p>Instead of trying to figure out if their are enough elements remaining to call a function by arity, just calculate the number of chunks you are going to call <code>f</code> with.  Integral division has the nice property of truncating the remainder.</p>

<pre><code>    auto chunks = length / detail::arg_count_v&lt;Function&gt;;
</code></pre>

<p>If you really want the remainder</p>

<pre><code>    auto [chunks, remainder] = std::div(length, detail::arg_count_v&lt;Function&gt;);
</code></pre>

<p>Then you just loop on that count.</p>

<pre><code>    constexpr auto indices = std::make_index_sequence&lt;detail::arg_count_v&lt;Function&gt;{};

    while (chunks--) {
        detail::apply(func, begin, indices);
        std::advance(begin, detail::arg_count_v&lt;Function&gt;);
    }

    return begin;
</code></pre>

<p>An added benefit it that you can keep supporting <a href="https://en.cppreference.com/w/cpp/named_req/ForwardIterator" rel="nofollow noreferrer">forward iterators</a> (<code>std::advance</code>) instead of elevating the requirement to <a href="https://en.cppreference.com/w/cpp/named_req/RandomAccessIterator" rel="nofollow noreferrer">random access iterators</a> (<code>end - d</code>, <code>end-remainder</code>).</p>

<hr>

<blockquote>
  <p>I am not sure to pass in a epilogue function for the remaining variables</p>
</blockquote>

<p>Does your use-case require you to have the entire range consumed by functions?  Let the caller decide what to do and just return an iterator.</p>
    </div>