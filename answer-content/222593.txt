<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Headers and namespaces</h1>
<p>The function is missing a definition of <code>map</code>.  This is probably what you want:</p>
<pre><code>#include &lt;map&gt;

using std::map;
</code></pre>
<p>Similarly, the <code>main()</code> needs:</p>
<pre><code>#include &lt;iostream&gt;
using std::cout;
using std::endl;
</code></pre>
<p>That said, there's no good reason for <code>std::endl</code> in this code: an ordinary newline is sufficient, and we don't need the extra flushing behaviour of <code>std::endl</code>.</p>
<h1>Naming</h1>
<p>It's an error to use the typename <code>key</code> as the name of a parameter here:</p>
<blockquote>
<pre><code>template &lt;typename key,typename value&gt;
int floorKey(map&lt;key, value&gt; input, int key)
</code></pre>
</blockquote>
<p>It's pretty idiomatic to use PascalCase for template arguments, to distinguish them from function parameters:</p>
<pre><code>template&lt;typename Key, typename Value&gt;
int floorKey(std::map&lt;Key, Value&gt; input, Key key)
</code></pre>
<p>(I've also corrected the function to accept the correct type for the <code>key</code> argument).</p>
<p>There's a similar problem in <code>main()</code>, where we have a conflict between the type <code>map</code> and our identifier <code>map</code>.  This is one of the reasons I'd argue against bringing the type name into the global namespace.</p>
<h1>Don't pass containers by value</h1>
<p>We have a potentially large map, which we don't need to modify.  That suggests that it's better passed as a reference to a const object.  As we don't know the type of the key, we should probably assume that it's also better passed by reference (it could plausibly be a <code>std::string</code>, for example).  That gives us:</p>
<pre><code>template&lt;typename Key, typename Value&gt;
int floorKey(const std::map&lt;Key, Value&gt;&amp; input, const Key&amp; key)
</code></pre>
<p>It's good that we used <code>auto</code> for the iterators <code>begin</code> and <code>end</code>, as it means that we don't need to change the body of the function to deal with them both now being const iterators.</p>
<h1>Think about edge cases</h1>
<p>What happens in this code when the <code>input</code> argument is an empty map?  We dereference <code>input.first()</code> without checking whether it's equal to <code>input.end()</code>, giving Undefined Behaviour at that point.</p>
<h1>Algorithm</h1>
<p>There's really no need to search for an exactly matching key if we then go on to call <code>lower_bound()</code> - we could just call <code>upper_bound()</code> instead, which will find the first key that's strictly greater than <code>key</code>, then decrement (if doing so is valid) to get the result:</p>
<pre><code>auto it = input.upper_bound(key);

return it == input.begin()
    ? -1
    : (--it)-&gt;first;
</code></pre>
<p>Note that we have a problem here: if <code>Key</code> isn't a signed numeric type, then we can't return <code>-1</code>.  We really need a type-dependent value for this.  Better still, return a <code>std::optional</code>, so a defaulted value can be clearly distinguished from an actual result.</p>
<hr>
<h1>Modified code</h1>
<pre><code>#include &lt;map&gt;
#include &lt;optional&gt;

template&lt;typename Key, typename Value&gt;
std::optional&lt;Key&gt; floorKey(const std::map&lt;Key,Value&gt;&amp; input,
                            const Key&amp; key)
{
    if (auto it = input.upper_bound(key);  it != input.begin()) {
        return (--it)-&gt;first;
    } else {
        return std::nullopt;
    }
}
</code></pre>

<pre><code>#include &lt;iostream&gt;

int main()
{
    std::map&lt;int, int&gt; map =
        {
         { 10, 100 },
         { 20, 200 },
         { 30, 300 },
         { 40, 400 },
         { 50, 500 },
         { 60, 600 },
         { 70, 700 },
         { 80, 800 },
        };


    std::cout &lt;&lt; floorKey(map, 5).value_or(-1) &lt;&lt; '\n'
              &lt;&lt; floorKey(map, 9).value_or(-1) &lt;&lt; '\n'
              &lt;&lt; floorKey(map, 10).value_or(-1) &lt;&lt; '\n'
              &lt;&lt; floorKey(map, 11).value_or(-1) &lt;&lt; '\n'
              &lt;&lt; floorKey(map, 90).value_or(-1) &lt;&lt; '\n';
}
</code></pre>
    </div>