<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It's fine to write this <em>scan</em> macro for educational purposes, but I think that considering its length a subroutine would have been more appropriate. The macro's bytes are inserted everywhere the macro is invoked. That adds up! Having that many duplicated bytes in a program is a waste of space.</p>

<h2>Some observations</h2>

<blockquote>
<pre><code>push    bp
mov     ah, 0Eh    ; print the valid character
int     10h
push    bp
stosb              ; write the character to the string
</code></pre>
</blockquote>

<p>That second <code>push bp</code> was probably meant to be <code>pop bp</code>, wasn't it?<br>
But why would you want to preserve the <code>BP</code> register when the BIOS.Teletype function doesn't even touch it.  </p>

<p>User @ecm commented about the BIOS Teletype function: <a href="https://codereview.stackexchange.com/questions/233953/key-scanning-macro-in-nasm-win16-against-dosbox-intel-8086#comment457562_233982">BUG: If the write causes the screen to scroll, BP is destroyed by BIOSes for which AH=06h destroys BP</a><br>
If this is the bug that made you decide to preserve the <code>BP</code> register, then I would say that preserving <code>BP</code> is still not the right thing to do. Because your code only supports <strong>non wrapped</strong> backspacing, it is reasonable to assume that no scrolling will occur. If scrolling were to happen then the <em>backspacing user</em> could get confused! Furthermore it's easy to make sure that scrolling can't occur simply by setting the cursor at the left edge of the screen at the start.</p>

<p>For maximum safety, I would write the char from <code>AL</code> in the string <strong>before</strong> teletyping it. On some implementations of BIOS/DOS etc. , I've seen the <code>AX</code> register modified even when the official documentation told it was preserved.</p>

<pre><code>stosb              ; write the character to the string
mov     bh, 0      ; DisplayPage
mov     ah, 0Eh    ; print the valid character
int     10h
</code></pre>

<p>I've added the required BIOS parameter for the DisplayPage. In all of your posts you keep ignoring this parameter. I'm wondering if you have any documentation about these BIOS video functions that possitively states that there are no selectable display pages.</p>

<hr>

<blockquote>
<pre><code>%%bspace:
    cmp     cx, 0
    je      %%get      ; ignore starting bspace
</code></pre>
</blockquote>

<p>The <code>cmp cx, 0</code> instruction has a 3-byte encoding, but the <code>test cx, cx</code> instruction (that does the same) has but a 2-byte encoding. In any macro you will want to write the shortest code.</p>

<pre><code>%%bspace:
    test    cx, cx
    jz      %%get      ; ignore starting bspace
</code></pre>

<p>There's also the <code>jcxz</code> instruction that you could use here. Again shorter but some people will say it is slow. It's up to you to decide if that is of real importance here. Don't forget that the user at the keyboard is much, much slower than any of the lesser instructions that you could choose!</p>

<pre><code>%%bspace:
    jcxz    %%get      ; ignore starting bspace
</code></pre>

<hr>

<blockquote>
<pre><code>cmp     cx, 80     ; ensure the buffer isn't exceeded
jae     near %%done
jmp     near %%get ; room for more
</code></pre>
</blockquote>

<p>The code becomes a little more efficient if you write the jump that is more likely first. The buffer will nearly never fill up completely, and so the jump to <em>%%done</em> will almost never happen.</p>

<pre><code>cmp     cx, 80     ; ensure the buffer isn't exceeded
jb      near %%get ; room for more
jmp     near %%done
</code></pre>

<h2>A quick rewrite</h2>

<pre><code>; %1 = string to write into
%macro scan 1
    pushaw
    mov     di, %1     ; prep for stosb
    xor     cx, cx
    mov     bh, 0      ; DisplayPage
%%get:
    getc
    cmp     al, 13
    je      %%done     ; enter pressed
    cmp     al, 8
    je      %%bspace
    cmp     al, ' '
    jb      %%get      ; ignore most non-printing characters
    cmp     al, '~'
    ja      %%get

    stosb              ; write the character to the string
    mov     ah, 0Eh    ; print the valid character
    int     10h
    inc     cx
    cmp     cx, 80     ; ensure the buffer isn't exceeded
    jb      near %%get ; room for more
    jmp     near %%done
%%bspace:
    jcxz    %%get      ; ignore starting bspace
    mov     ax, 0E08h
    int     10h        ; bspace twice, to clear space
    mov     al, 32
    int     10h
    mov     al, 8
    int     10h
    dec     di         ; overwrite character position
    dec     cx         ; step back a character
    jmp     %%get

%%done:
    xor     ax, ax
    stosb              ; append null-terminating character (zero)
    newline
    popaw
%endmacro
</code></pre>
    </div>