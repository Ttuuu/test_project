<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Code that's hard to read, is code that's hard to modify <em>without breaking</em>. Consistent indentation helps with that:</p>

<blockquote>
<pre><code>For i = 5 To endrow
qdate = Cells(i, 1)
qlkp = Application.VLookup(CDbl(qdate), Sheet5.Range("A1:C500"), 3, False)
Cells(i, 26).Value = qlkp
Next i
</code></pre>
</blockquote>



<pre><code>For i = 5 To endrow
    qdate = Cells(i, 1)
    qlkp = Application.VLookup(CDbl(qdate), Sheet5.Range("A1:C500"), 3, False)
    Cells(i, 26).Value = qlkp
Next i
</code></pre>

<p>That's already better!</p>

<p>The first thing I would do would be to indent the entire project in a single click with <a href="http://www.github.com/rubberduck-vba/Rubberduck" rel="nofollow noreferrer">Rubberduck</a>, and then review the inspection results:</p>

<p><img src="https://i.stack.imgur.com/uGrFv.png" alt="Rubberduck inspection results"></p>

<p>Undeclared variables are a huge red flag: <code>Option Explicit</code> isn't specified and VBA will happily compile any typos and carry on running the code in an erroneous logical state, by declaring the new identifier on-the-spot as an implicit <code>Variant</code>. Using disemvoweled, abbreviated, and otherwise unpronounceable names makes it even easier for this to happen, and harder for the bugs it introduces to be found.</p>

<p>Since this code is in the code-behind of a <code>UserForm</code>, there are <em>a lot</em> of implicit <code>ActiveSheet</code> references, and this is making the code extremely frail, prone to blow up with error 1004, or to work off the wrong sheet (although, not <code>Select</code>ing and <code>Activate</code>ing any sheets and toggling <code>ScreenUpdating</code> off <em>does</em> minimize the odds of that happening, albeit indirectly).</p>

<p>There's a <code>Range.Find</code> call at the top of the procedure that assumes there is data on the <code>Sheets("Data")</code> worksheet. In the event where that sheet would be empty, the chained <code>.Row</code> member call would raise error 91.</p>

<blockquote>
<pre><code>Acc = Application.Cells(i, 5)
Cname = Application.Cells(i, 4)
</code></pre>
</blockquote>

<p>These instructions are invoking worksheet members off <code>Application</code>: it's equivalent to <code>ActiveSheet.Cells</code>, or simply <code>Cells</code>. Just reading the code isn't sufficient to understand what sheet that is expected to be active, and thus all these unqualified <code>Cells</code> calls are very ambiguous, at least for a reader that doesn't know what they're looking at.</p>

<p>Barring a few false positives, everything Rubberduck picks up is essentially a low-hanging fruit that should be addressed before deving into the more substantial stuff:</p>

<ul>
<li>Implicit <code>ActiveSheet</code> and <code>ActiveWorkbook</code> references, should be qualified with a specific <code>Worksheet</code> or <code>Workbook</code> object, or explicitly reference <code>ActiveSheet</code>/<code>ActiveWorkbook</code>, to clarify the intent of the code. I believe the intent is not to work off whatever workbook/sheet is currently active though.</li>
<li>Avoid Systems Hungarian Notation prefixing. It's harmful, and brings no value.</li>
<li>Don't make event handler procedures <code>Public</code>, implicitly or not. Event handlers are <code>Private</code> by default, and they should remain that way: they are meant to be invoked by VBA, not user code.</li>
<li>Use string-typed functions where possible, e.g. <code>Left</code> takes and returns a <code>Variant</code>, but <code>Left$</code> takes and returns an actual <code>String</code>: that's a rather insignificant (to an extent) point performance-wise, but using explicit types should be preferred over <code>Variant</code> (and the slight run-time overhead using <code>Variant</code> incurs).</li>
</ul>

<hr>

<p>Since a <code>UserForm</code> is involved, I encourage you to read <a href="https://stackoverflow.com/a/47291028/1188513">this answer</a> and the article it links to (I wrote both). The crux being, the last thing you want is to have a form that manipulates a worksheet directly, inside some button's <code>Click</code> handler. A first step towards a thorough refactoring would to turn the click handler into something like this:</p>

<pre><code>Private Sub RunDataClean_Click()
    Macros.RunDataClean
End Sub
</code></pre>

<p>...and then move the entire body of the procedure into a <code>Public Sub RunDataClean</code> procedure in some <code>Macros</code> module, but that's just a first step.</p>

<hr>

<p>Performance-wise, it's hard to justify all that VBA code to do work that looks very much like it could be done using standard worksheet formulas.</p>

<p>But one thing strikes me:</p>

<blockquote>
<pre><code>For i = 5 To endrow
</code></pre>
</blockquote>

<p>This line appears 6 times in the procedure, so the macro is iterating every single one of these 15K rows, ...6 times. Remove all but the first <code>For i = 5 To endrow</code> and all but the last <code>Next i</code>, and you will likely instantly slash 83% of the work being done.</p>
    </div>