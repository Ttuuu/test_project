<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li>First, you should care about indentation.</li>
<li>Why slitting the <code>numbers</code> string while you can access individual char with <code>numbers.charAt(n)</code> ? It force you to work with <code>String</code> instead of <code>char</code>.</li>
<li>You don't check for validity of the string. Here, it's hard coded, but if you have to get it from a unknown source, a good habit is to validate it before using.</li>
<li>Also, you don't check if there's duplicates or not. If <code>numbers</code> is "1234567890" your program go for a infinite loop.</li>
<li>You compute the "Max" count into the <code>main</code>, and the "Min" in a function; try to be consistent.</li>
<li>For both computations, you make <span class="math-container">\$n*n\$</span> iterations (where <span class="math-container">\$n\$</span> is the <code>numbers</code> length) giving a complexity of <span class="math-container">\$ O(n^2)\$</span> for both.</li>
</ul>

<p>Instead, try to construct a table of occurrences by traversing the table once. 
After, simply search in this table the min and max values in one traversal.</p>

<p>There's a very naive implementation, but i think a lot simpler to understand than your, and surely more efficient.</p>

<pre><code>public class X {
 public static void main(String[] args) {

   String data = "756655874075297346";
   int[] counts = new int[10];

   for (int i = 0; i &lt; data.length(); i++) {
     char n = data.charAt(i);
     if (n &gt;= '0' &amp;&amp; n &lt;= '9') {
        counts[n-'0']++;     
     }
   }

   int min_index = 0;
   int max_index = 0;
   int min_count = Integer.MAX_VALUE;
   int max_count = 0;

   for (int i = 0; i &lt; 10; i++) {
     if (counts[i] &gt;= max_count) {
       max_index = i;
       max_count = counts[i];
     }
     if (counts[i] &gt; 1 &amp;&amp; counts[i] &lt; min_count) {
       min_index = i;
       min_count = counts[i];
     }     
   }
  System.out.println("Frequent number is: " + (char)(max_index + '0') + " It appeared " + max_count + " times");
  if (min_count &lt; Integer.MAX_VALUE) {
    System.out.println("Min Frequent number is: " + (char)(min_index + '0') + " It appeared " + min_count + " times");
  }
  else {
    System.out.println("There's no duplicates!");
  }
 }
}
</code></pre>

<p>Here, the function print the higher number with the higher number of occurrences (in case of multiples char with maximal occurrence count). If instead you want to get the lower, change <code>if (counts[i] &gt;= max_count)</code> for <code>if (counts[i] &gt; max_count)</code>.</p>

<p>Conversely, it print the lower duplicated number with the lower count, to get the higher duplicated with the lower count, change <code>counts[i] &lt; min_count</code> with <code>counts[i] &lt;= min_count</code>.</p>
    </div>