<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>General isues</strong></p>

<p>Your code doesn't follow the single responsibility principle. The class <code>WorldSimulation</code> is responsible for updating the game and creating the graphical representation. If you followed a naming convention where the name of a class describes it's functionality it would have to be <code>WorldSimulationAndPaint</code>.</p>

<p>Instead of passing the canvas and paint to the game engine, you should try to follow the MVC pattern. I have once implemented a Conway's game of life too. I had a timer that was responsible for controlling the updates. The timer sent an event to the game engine telling it "please advance the game state by one frame". When the game engine had done that, the game engine sent an event to the user interface telling it "here's the lates game state, please update the user interface."</p>

<p>Once you have removed the responsibility of drawing from WorldSimulation you can remove the cellWidth and cellHeight fields.</p>

<p>The events can be transmitted by setting up each component as a listener to the relevant source or with an event bus (such as Google Guava).</p>

<p><strong>Field visibility</strong></p>

<p>All the fields in WorldSimulation are visible to other classes in the package. The fields of a class should be as closely guarded as possible so they should be <code>private</code> unless a there is a very good reason to do otherwise. That way you guarantee that the state of the object can only be changed by the object itself. It also forces you to concentrate on the interface your class provides to others.</p>

<p>The <code>livingNeighbours</code> method is not supposed to be accessed from outside the class, so it should be private too.</p>

<p><strong>Magic numbers</strong></p>

<p>What does 255 mean? Instead of using a literal integer every time you should define it as a constant whose name describes the meaning of the value and use the constant instead of the literal 255.</p>

<pre><code>private static final int STATUS_ALIVE = 255;
private static final int STATUS_DEAD = 0;
</code></pre>

<p><strong>Duplicated code</strong></p>

<p>The drawRect call is identical in both branches of the if statement. You can take them both out and replace them with a single call after the if statement.</p>

<pre><code>canvas.drawRect(left-cellWidth,top-cellHeight,right,bottom,paint);
</code></pre>

<p><strong>Misleading naming</strong></p>

<p>In <code>livingNeighbours</code> you count number of cells, but the value is collected in a variable named <code>alive</code>. In spoken language "alive" has only two values (alive or dead). Thus it sugests that the field would be a boolean (as you have done in the setCell method), while it is in fact an integer. It should be named <code>livingNeighbourCount</code>.</p>

<p><strong>Misleading method signature</strong></p>

<p>The <code>alive</code> parameter suggest that one could set a cell to be either living or dead. The implementation however only sets it to a living state. Either fix the code to handle the parameter or remove it and rename the method to <code>setCellAlive</code>.</p>

<pre><code>public void setCell(int i, int j, boolean alive)
{
    next[i][j] =  255;
}
</code></pre>

<p><strong>Rules</strong></p>

<p>You're not really implementing <a href="https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life#Rules" rel="nofollow noreferrer">Conway's Game of Life</a>. :)</p>
    </div>