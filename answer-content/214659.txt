<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Let's say a = 1, b = 1,000,000. Your code is a nested loop, each loop iterating a million times, for a total of one trillion tests. And I tell, out of my head, that the result is 10 and the numbers are 1, 2^6, 3^6, 4^6, 5^6, 6^6, 7^6, 8^6, 9^6 and 10^6. </p>

<p>The numbers that are both 2nd and 3rd powers are exactly the sixth powers of integers. So you can just iterate for i = 0, 1, 2, 3 etc., calculate j = i^6, then if j &gt;= a and j &lt;= b increase the counter, and if j &gt; b then exit the loop. The time needed is proportional to the sixth root of b. </p>

<p>Even faster, if b was <em>extremely</em> large, calculate A = sixth root of a, round up to the nearest integer, and B = sixth root of b, rounded down to the nearest integer. The numbers from a to b that are sixth powers are exactly the sixth powers of the numbers from A to B, and there are B - A + 1 of them. </p>
    </div>