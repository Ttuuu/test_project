<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>It was better not to use JNA in speed-critical loops.</h1>

<p>I built a JNI function that performs the loop in JNI, throwing away JNA. And it <strong>saved 12 minutes.</strong></p>

<pre><code>JNIEXPORT void JNICALL Java_com_kyhsgeekcode_disassembler_DisasmIterator_getAll(JNIEnv * env, jobject thiz,jbyteArray bytes, jlong offset, jlong size,jlong virtaddr, jobject arr)
        {
            int bytelen=env-&gt;GetArrayLength(bytes);
            jbyte *byte_buf;
            byte_buf = env-&gt;GetByteArrayElements(bytes, NULL);
            //__android_log_print(ANDROID_LOG_VERBOSE, "Disassembler", "bytearrayelems");
            jclass arrcls = env-&gt;FindClass("java/util/ArrayList");
                        //__android_log_print(ANDROID_LOG_VERBOSE, "Disassembler", "ArrayListcls");
            jclass darcls = env-&gt;FindClass("com/kyhsgeekcode/disassembler/DisasmResult");
                        //__android_log_print(ANDROID_LOG_VERBOSE, "Disassembler", "Disasmresult");
            jclass lvicls = env-&gt;FindClass("com/kyhsgeekcode/disassembler/ListViewItem");
                        //__android_log_print(ANDROID_LOG_VERBOSE, "Disassembler", "Listviewitem");
            jclass thecls = env-&gt;GetObjectClass(thiz);
                        //__android_log_print(ANDROID_LOG_VERBOSE, "Disassembler", "thizclass");
            jmethodID ctor = env-&gt;GetMethodID(darcls,"&lt;init&gt;","()V");
                        //__android_log_print(ANDROID_LOG_VERBOSE, "Disassembler", "darinit");
            jmethodID ctorLvi = env-&gt;GetMethodID(lvicls,"&lt;init&gt;","(Lcom/kyhsgeekcode/disassembler/DisasmResult;)V");
                        //__android_log_print(ANDROID_LOG_VERBOSE, "Disassembler", "lviinit");
            jmethodID java_util_ArrayList_add  = env-&gt;GetMethodID(arrcls, "add", "(Ljava/lang/Object;)Z");
                        //__android_log_print(ANDROID_LOG_VERBOSE, "Disassembler", "arraylistaddmethod");
            jmethodID notify = env-&gt;GetMethodID(thecls,"showNoti","(I)I");
                        //__android_log_print(ANDROID_LOG_VERBOSE, "Disassembler", "shownotimethod");
            jmethodID additem = env-&gt;GetMethodID(thecls,"AddItem","(Lcom/kyhsgeekcode/disassembler/ListViewItem;)V");
            int done=0;
            // allocate memory cache for 1 instruction, to be used by cs_disasm_iter later.
            cs_insn *insn = cs_malloc(handle);
            const uint8_t *code = (uint8_t *)(byte_buf+offset);
            size_t code_size = size-offset; // size of @code buffer above
            uint64_t addr = virtaddr;   // address of first instruction to be disassembled
             // disassemble one instruction a time &amp; store the result into @insn variable above
            while(cs_disasm_iter(handle, &amp;code, &amp;code_size, &amp;addr, insn)) {
                  // analyze disassembled instruction in @insn variable ...
                  // NOTE: @code, @code_size &amp; @address variables are all updated
                  // to point to the next instruction after each iteration.
                                        __android_log_print(ANDROID_LOG_VERBOSE, "Disassembler", "inloop");
                jobject dar=env-&gt;NewObject(darcls,ctor);
                jfieldID fid = env-&gt;GetFieldID(darcls, "mnemonic","Ljava/lang/String;");
                if (fid == NULL) {
                    return; /* failed to find the field */
                }
                /* Create a new string and overwrite the instance field */
                jstring jstr = env-&gt;NewStringUTF( insn-&gt;mnemonic);
                if (jstr == NULL) {
                    return; /* out of memory */
                }
                env-&gt;SetObjectField(dar, fid, jstr);
                env-&gt;DeleteLocalRef(jstr);
                fid = env-&gt;GetFieldID(darcls, "op_str","Ljava/lang/String;");
                if (fid == NULL) {
                    return; /* failed to find the field */
                }
                /* Create a new string and overwrite the instance field */
                jstr = env-&gt;NewStringUTF(insn-&gt;op_str);
                if (jstr == NULL) {
                    return; /* out of memory */
                }
                env-&gt;SetObjectField(dar, fid, jstr);
                env-&gt;DeleteLocalRef(jstr);
                fid = env-&gt;GetFieldID( darcls, "address","J");
                if (fid == NULL) {
                    return; /* failed to find the field */
                }
                env-&gt;SetLongField(dar, fid, insn-&gt;address);

                fid = env-&gt;GetFieldID( darcls, "id","I");
                if (fid == NULL) {
                    return; /* failed to find the field */
                }
                env-&gt;SetIntField(dar, fid, insn-&gt;id);

                fid = env-&gt;GetFieldID(darcls, "size","I");
                if (fid == NULL) {
                    return; /* failed to find the field */
                }
                env-&gt;SetIntField(dar, fid, insn-&gt;size);

                fid = env-&gt;GetFieldID( darcls, "bytes","[B");
                if (fid == NULL) {
                    return; /* failed to find the field */
                }
                jobject job=env-&gt;GetObjectField(dar,fid);
                jbyteArray *jba = reinterpret_cast&lt;jbyteArray*&gt;(&amp;job);
                int sz=env-&gt;GetArrayLength(*jba);
                // Get the elements (you probably have to fetch the length of the array as well  
                jbyte * data = env-&gt;GetByteArrayElements(*jba, NULL);
                int min=insn-&gt;size &gt; sz ? sz : insn-&gt;size;
                for(int i=0;i&lt;min;++i)
                {
                    data[i]=insn-&gt;bytes[i];
                }
                // Don't forget to release it 
                env-&gt;ReleaseByteArrayElements(*jba, data, 0);
                env-&gt;DeleteLocalRef(job);
                        //__android_log_print(ANDROID_LOG_VERBOSE, "Disassembler", "beforedetail");
                if(insn[0].detail!=NULL)
                {
                    fid = env-&gt;GetFieldID( darcls, "groups","[B");
                    if (fid == NULL) {
                        return; /* failed to find the field */
                    }
                    jobject job2=env-&gt;GetObjectField(dar,fid);
                    jbyteArray *jba2 = reinterpret_cast&lt;jbyteArray*&gt;(&amp;job2);
                    int sz2=env-&gt;GetArrayLength(*jba2);
                    // Get the elements (you probably have to fetch the length of the array as well  
                    jbyte * data2 = env-&gt;GetByteArrayElements(*jba2, NULL);
                    int min=insn-&gt;detail-&gt;groups_count &gt; sz2 ? sz2 : insn-&gt;detail-&gt;groups_count;
                    for(int i=0;i&lt;min;++i)
                    {
                        data2[i]=insn-&gt;detail-&gt;groups[i];
                    }
                    // Don't forget to release it 
                    env-&gt;ReleaseByteArrayElements(*jba2, data2, 0);
                    env-&gt;DeleteLocalRef(job2);
                    fid = env-&gt;GetFieldID(darcls, "groups_count","B");
                    if (fid == NULL) {
                        return; /* failed to find the field */
                    }
                    env-&gt;SetByteField(dar, fid, insn-&gt;detail-&gt;groups_count);    
                }
                                        //__android_log_print(ANDROID_LOG_VERBOSE, "Disassembler", "afterdetail");
                jobject lvi=env-&gt;NewObject(lvicls,ctorLvi,dar);
                                        //__android_log_print(ANDROID_LOG_VERBOSE, "Disassembler", "created lvi");
                //jstring element = env-&gt;NewStringUTF(s.c_str());
                env-&gt;CallBooleanMethod(arr, java_util_ArrayList_add, dar);
                env-&gt;CallVoidMethod(thiz,additem,lvi);
                __android_log_print(ANDROID_LOG_VERBOSE, "Disassembler", "added lvi");

                env-&gt;DeleteLocalRef(lvi);
                env-&gt;DeleteLocalRef(dar);
                //env-&gt;DeleteLocalRef(jstr);
                //env-&gt;DeleteLocalRef(dar);
                if(done%1024==0)
                {
                                            __android_log_print(ANDROID_LOG_VERBOSE, "Disassembler", "calling noti");
                     int ret=env-&gt;CallIntMethod(thiz, notify, done);
                                            __android_log_print(ANDROID_LOG_VERBOSE, "Disassembler", "end call noti");
                    if(ret==-1)
                    {
                        //thread interrupted
                        break;
                    }
                }
                ++done;
             }
             // release the cache memory when done
             cs_free(insn, 1);
            //DisasmOne_sub(env,thiz,(unsigned char*)(byte_buf+shift)/*bytes*/,bytelen-shift,address);
            env-&gt;ReleaseByteArrayElements(bytes, byte_buf, JNI_ABORT);
        }
</code></pre>

<p>Caller:</p>

<pre><code>public void run()
                {
                    long start=elfUtil.getCodeSectionOffset();
                    long index=start;
                    long limit=elfUtil.getCodeSectionLimit();
                    long addr=elfUtil.getCodeSectionVirtAddr();
                    Log.v(TAG, "code section point :" + Long.toHexString(index));
                    //ListViewItem lvi;
                    //  getFunctionNames();
                    long size=limit - start;
                    long leftbytes=size;
                    DisasmIterator dai=new DisasmIterator(MainActivity.this,mNotifyManager,mBuilder,adapter,size);
                    dai.getAll(filecontent,start,size,addr, disasmResults);
</code></pre>

<p>DisasmIterator:</p>

<pre><code>package com.kyhsgeekcode.disassembler;
import android.app.*;
import java.util.*;

public class DisasmIterator
{
    public DisasmIterator(MainActivity activity, NotificationManager mNotifyManager, Notification.Builder mBuilder, ListViewAdapter adapter,  long total)
    {
        this.activity = activity;
        this.mNotifyManager = mNotifyManager;
        this.mBuilder = mBuilder;
        this.total = total;
        this.adapter=adapter;
    }
    public native void getAll(byte[] bytes, long offset, long size,long virtaddr,ArrayList&lt;DisasmResult&gt; arr);
    public void AddItem(final ListViewItem lvi)
    {
        activity.runOnUiThread(new Runnable(){
                @Override
                public void run()
                {
                    adapter.addItem(lvi);
                    adapter.notifyDataSetChanged();
                    return ;
                }
        });
    }

    public int showNoti(int progress)
    {
        mBuilder.setProgress((int)total,progress, false);
        // Displays the progress bar for the first time.
        mNotifyManager.notify(0, mBuilder.build());                 
        activity.runOnUiThread(activity.runnableRequestLayout);
        if(Thread.interrupted())
        {
            return -1;
        }
        return 0;
    }
    public native int CSoption(int type, int vslue);

    MainActivity activity;
    NotificationManager mNotifyManager;
    Notification.Builder mBuilder;
    long total;
    ListViewAdapter adapter;
}
</code></pre>

<p>Anyway, thanks for your comments!</p>
    </div>