<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A <code>string</code> implements <code>IEnumerable&lt;char&gt;</code> and has an <code>indexer</code>, so you can iterate it as an array.</p>

<p>You can therefore simplify this:</p>

<blockquote>
<pre><code>string[][] StringMapping = new string[number.Length][];
            int LengthIndex = 0;

            foreach (char c in number)
            {
                switch (c)
                {
                    case '2':
                        StringMapping[LengthIndex] = new string[] {"a", "b", "c"};
                 ...
</code></pre>
</blockquote>

<p>without any other changes to:</p>

<pre><code>string[] StringMapping = new string[number.Length];
            int LengthIndex = 0;

            foreach (char c in number)
            {
                switch (c)
                {
                    case '2':
                        StringMapping[LengthIndex] = "abc";
</code></pre>

<p>and your code will work fine.</p>

<p>You could though create a separate method for the mapping as:</p>

<pre><code>private static string GetPattern(char number)
{
  switch (number)
  {
    case '2': return "abc";
    case '3': return "def";
    case '4': return "ghi";
    case '5': return "jkl";
    case '6': return "mno";
    case '7': return "pqrs"; 
    case '8': return "tuv"; 
    case '9': return "wxyz";
    default: throw new InvalidOperationException();
  }
}
</code></pre>

<p>So your <code>StringMapping</code> could be initialized as:</p>

<pre><code>string[] stringMapping = number.Select(n =&gt; GetPattern(n)).ToArray();
</code></pre>

<p>Some would claim that a <code>Dictionary&lt;char, string&gt;</code> would be better instead of the <code>switch</code> statement. In a localized scenario for instance, where you would load the mapping dynamically that would be the solution.</p>

<p>Notice the naming: <code>stringMapping</code> (camelCase) for class fields and local variables instead of <code>StringMapping</code> (PascalCase) that is used for properties and method names.</p>

<hr>

<p>I find <code>SizeArray</code> unnecessary and waste of memory:</p>

<blockquote>
<pre><code>  int[] SizeArray = new int[StringMapping.Length];
</code></pre>
</blockquote>

<p>The only place you are using it is here:</p>

<blockquote>
<pre><code>      if (counterArray[incIndex] + 1 &lt; SizeArray[incIndex])
</code></pre>
</blockquote>

<p>which could be replaces with:</p>

<pre><code>if (counterArray[incIndex] + 1 &lt; stringMapping[incIndex].Length)
</code></pre>

<hr>

<blockquote>
  <p><code>for (int countdown = totalCombinationCount; countdown &gt; 0; countdown--)</code></p>
</blockquote>

<p>There is nothing wrong with iterating backward if the situation demands it, but at least I have to look an extra time, when I see a backward loop. Here there is no reason for the above backward iteration as you only use it to count combinations, the <code>countdown</code> index isn't used to anything in the loop, so it could run forward without any damage:</p>

<pre><code>for (int countdown = 0; countdown &lt; totalCombinationCount; countdown++)
</code></pre>

<hr>

<p>Your algorithm works fine, but the overall impression is that it is more complex than it has to be, and due to the double nested loops it is not very efficient.</p>

<p>FYI: below are some other approaches (they all use the <code>GetPattern()</code> method shown above):</p>

<p>1) An iterative version that uses a list to cache all the combinations while creating them:</p>

<pre><code>void LetterCombinationsIter(string numbers)
{
  IEnumerable&lt;string&gt; CreateCombinations()
  {
    List&lt;string&gt; combs = new List&lt;string&gt; { "" };

    for (int i = 0; i &lt; numbers.Length; i++)
    {
      List&lt;string&gt; temp = new List&lt;string&gt;();
      string chars = GetPattern(numbers[i]);

      foreach (string comb in combs)
      {
        foreach (char ch in chars)
        {
          temp.Add(comb + ch);
        }
      }

      combs = temp;
    }

    return combs;
  }

  Console.WriteLine(string.Join(Environment.NewLine, CreateCombinations()));
}
</code></pre>

<p>2) A recursive version which is often the intuitive choice for this kind of problems:</p>

<pre><code>void LetterCombinationsRec(string numbers)
{
  char[] buffer = new char[numbers.Length];

  IEnumerable&lt;string&gt; HandleIndex(int index)
  {
    if (index &gt;= numbers.Length)
    {
      yield return new string(buffer);
    }
    else
    {
      foreach (char ch in GetPattern(numbers[index]))
      {
        buffer[index] = ch;
        foreach (string comb in HandleIndex(index + 1))
        {
          yield return comb;
        }
      }
    }
  }

  Console.WriteLine(string.Join(Environment.NewLine, HandleIndex(0)));
}
</code></pre>

<p>3) Finally a version using Linq that solves the problem in a few lines of code:</p>

<pre><code>void LetterCombinationsLinq(string numbers)
{
  IEnumerable&lt;string&gt; CreateCombinations()
  {
    return numbers.Aggregate(new[] { "" }.AsEnumerable(), (combs, n) =&gt;
    {
      string chars = GetPattern(n);
      return combs.SelectMany(pre =&gt; chars.Select(ch =&gt; pre + ch));
    });
  }

  Console.WriteLine(string.Join(Environment.NewLine, CreateCombinations()));
}
</code></pre>
    </div>