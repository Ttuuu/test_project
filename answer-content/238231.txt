<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I agree with the tips given in the <a href="https://codereview.stackexchange.com/a/238211/98493">answer</a> by <a href="https://codereview.stackexchange.com/users/100359/oscar-smith">@OscarSmith</a> regarding the prime sieve. In addition, here are a few more comments on how to make the rest of your code slightly better.</p>

<ul>
<li><p>You can go one step further and create a <code>primes_in_range</code> function that does the dropping for you. This might actually become a bottleneck at some point, (if a is large and a &gt;&gt; b - a), but at that point you only need to change the implementation of one function.</p></li>
<li><p>Your <code>reference_slice</code> is always the same length, but if you want to add the next element you need to resort to list slicing and list addition, both of which might create a copy. Instead, you can use <a href="https://docs.python.org/3/library/collections.html#collections.deque" rel="nofollow noreferrer"><code>collections.deque</code></a> with the optional argument <code>maxlen</code>. If you append another element, the first one will be automatically pushed out.</p></li>
<li><p>Similarly, you can avoid the slice in the calculation of the differences by just including the first element. You just have to add a <code>0</code> as first element in the correct differences list. Alternatively you could just define a <code>diff</code> function and adjust the correct differences to be relative to the previous elements instead of the first.</p></li>
<li><p>You should limit your <code>try</code> block as much as possible. This increases readability on one hand, and reduces unwanted exceptions being caught on the other (not such a big risk here, but true in general).</p></li>
<li><p>But even better is to not need it at all. A <code>for</code> loop consumes all elements of an iterable, which is exactly what we need here. This way we don't even need to special case the first five elements, because if the list is too short, the pattern cannot match. Alternatively, you could implement a <code>windowed(it, n)</code> function, which is what I have done below.</p></li>
<li><p>You should try to avoid magical values. In your code there are two. The first is the length of the pattern and the second is the pattern itself. Fortunately, the former is already given by the latter. I would make the pattern an argument of the function, which makes it also more general. At this point a less generic name might also be needed (although the name I propose below is maybe not ideal either).</p></li>
<li><p>You should protect the code executing your functions with a <a href="http://stackoverflow.com/questions/419163/what-does-if-name-main-do"><code>if __name__ == "__main__";</code> guard</a> to allow importing from this script without it being run.</p></li>
</ul>



<p>All of these changes make your function doing the actual work a lot shorter and IMO more readable. The functions I defined below are also nice things to have in you toolkit, since they are generally applicable and not only for this specific usecase.</p>

<pre><code>from collections import deque
from itertools import dropwhile, islice


def prime_sieve(n):
    ...

def primes_in_range(a, b):
    yield from dropwhile(lambda x: x &lt; a, prime_sieve(b))

def diff(it):
    it = iter(it)
    previous = next(it)
    for x in it:
        yield x - previous
        previous = x

def windowed(it, n):
    d = deque(islice(it, n), maxlen=n)
    assert len(d) == n
    for x in it:
        yield tuple(d)
        d.append(x)

def find_primes_matching_pattern_below(diff_pattern, n):
    min_value = (n - 48) / 6   # A comment explaining this bound
    primes = primes_in_range(min_value, n)
    for candidate in windowed(primes, len(diff_pattern) + 1):
        if tuple(diff(candidate)) == diff_pattern:
            yield candidate


if __name__ == "__main__":
    n = 2000000
    # from (4, 6, 10, 12, 16) relative to the first element
    diff_pattern = (4, 2, 4, 2, 4)
    print(next(find_primes_matching_pattern_below(diff_pattern, n)))
</code></pre>

<p>For the given testcase, your code takes 741 ms ± 34.3 ms, while this code takes 146 ms ± 3.77 ms (using the <code>numpy</code> prime sieve from the <a href="https://codereview.stackexchange.com/a/238211/98493">answer</a> by <a href="https://codereview.stackexchange.com/users/100359/oscar-smith">@OscarSmith</a>) on my machine.</p>
    </div>