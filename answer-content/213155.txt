<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>First things First</h2>

<p>I cloned it and run it as you wrote in README.md file, As a frontend project it'll be better if you used something like <code>npm</code> to run your project.</p>

<h2>things you can do better:</h2>

<h3>When to use <code>map</code> over <code>forEach</code>?</h3>

<p>If you want to return a new array instead of change the current, you can use <code>map</code> function. in this example you don't have to create a new array then change in it.</p>

<pre><code> buildRows: function() {
    var rows = [];
    var onQtyChanged = this.props.onQtyChanged;
    var x = 0;
    this.props.cartItems.forEach(function(cartItem) {
      rows.push(&lt;CartItem key={cartItem.id} arrayIndex={x} name={cartItem.name} qty={cartItem.qty} price={cartItem.price} onQtyChanged={onQtyChanged} /&gt;);
      x ++;
    });
    return rows;
  },
</code></pre>

<p>You can simply do this</p>

<pre><code>  buildRows: function() {
    return this.props.cartItems.map((cartItem, indx) =&gt;
      &lt;CartItem
        key={cartItem.id}
        arrayIndex={indx}
        name={cartItem.name}
        qty={cartItem.qty}
        price={cartItem.price}
        onQtyChanged={this.props.onQtyChanged} /&gt;
    );
  },
</code></pre>

<h3>You can use Object destruction</h3>

<p>Object destruction is great for using object attributes without repeating the object name. you can use it in the previous example like this.</p>

<pre><code>buildRows: function() {
    const {onQtyChanged, cartItems} = this.props;
    return cartItems.map(({id, name, qty, price}, indx) =&gt;
      &lt;CartItem
        key={id}
        arrayIndex={indx}
        name={name}
        qty={qty}
        price={price}
        onQtyChanged={onQtyChanged}
      /&gt;
    );
  },
</code></pre>

<h3>Use const and let instead of var</h3>

<p>to avoid mutation or scope mistakes.</p>

<h3>Ternary operator instead of if condition</h3>

<p>Use ternary operators when you make just one line change like this</p>

<pre><code>handleQtyChanged: function(cartItemIndex, direction) {

    /* old
    if (direction === '+') {
      cartItems[(cartItemIndex)].qty++;
    } else {
      cartItems[(cartItemIndex)].qty--;
    }
    */

    // new
    direction === '+'
    ? cartItems[(cartItemIndex)].qty++
    : cartItems[(cartItemIndex)].qty--;

    this.setState({cartItems});
  },

</code></pre>
    </div>