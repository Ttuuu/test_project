<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In my oppinion, your code looks quite good. You have a consistent <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">style</a>, appropriate <a href="https://www.python.org/dev/peps/pep-0257/" rel="nofollow noreferrer">documentation</a>, and a well-structured function with clear code.</p>

<p>Nevertheless, I would like to point out a few points that can make your code more <em>Pythonic</em>.</p>

<p>The way you check for the final mark can be improved and made more concise. Instead of checking all the elements of <code>marks</code> by hand, you can use <a href="https://docs.python.org/3/library/stdtypes.html#str.endswith" rel="nofollow noreferrer"><code>str.endswith(...)</code></a> with multiple <em>suffixes</em> like so:</p>

<pre><code>marks = ('!', '?', '.')
if not text.endswith(marks):
    text += '.'
</code></pre>

<p><strong>Note:</strong> <code>marks</code> is now a tuple and not a list anymore.</p>

<p>Handling those <code>,</code>'s kept me thinking longer than I would like to admit. I thought I would be easy to also handle cases like <code>, ,  ,</code> or <code>,,</code>, but as always, nothing is quite as easy as it seems. It's always a bit tricky to index and/or iterate lists that gets modified in the meantime. One approach is to use another list to store the results, another very common approach is to index the list from the back. I chose the later one and came up with the following solution:</p>

<pre><code># avoid whitespace in front of , as well as multiple ,
for i in reversed(range(len(text_l))):
    word = text_l[i]
    if re.fullmatch(r',+', word):
        if not text_l[i-1].endswith(',') and i &gt; 0:
            text_l[i-1] += ','
        del text_l[i]
</code></pre>

<p>I chose to work with Python's <a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer"><code>re</code></a>gex module to take care of repeated <code>,</code> characters. <code>text_l[i-1].endswith(',')</code> was added to make sure that a word does not get more than one <code>,</code> and <code>i &gt; 0</code> was added to handle the edge case of a leading <code>,</code>, which would otherwise wrap around.</p>

<p>The capitalization might also need a slight retouch, since <code>str.title()</code> has some quirks which are listed in the <a href="https://docs.python.org/3/library/stdtypes.html#str.title" rel="nofollow noreferrer">docs</a>. This can be seen in a simple example: <code>print("They're".title())</code> prints <code>They'Re</code>, which is probably not what you are looking for. A quick-and-dirty fix a came up with was to use <code>text_l[0] = text_l[0][0].upper()+text_l[0][1:]</code> to capitalize only the first letter. This even works for single letter words like <code>i</code>:</p>

<pre><code>test = "i"
print(test.upper()+test[1:])
&gt;&gt;&gt; I
</code></pre>

<p>With all these changes the code now looks as follows:</p>

<pre><code>def correct_sentence(text: str) -&gt; str:
    """
    returns a corrected sentence which starts with a capital letter
    and ends with a dot if needed. Also deletes redundant spaces.
    """
    text = text.strip()

    # checking if the last symbol is any of marks
    marks = ('!', '?', '.')
    if not text.endswith(marks):
        text += '.'

    text_l = text.split()
    # avoid whitespace in front of , as well as multiple ,
    for i in reversed(range(len(text_l))):
        word = text_l[i]
        if re.fullmatch(r',+', word):
            if not text_l[i-1].endswith(',') and i &gt; 0:
                text_l[i-1] += ','
            del text_l[i]

    # capitalize first letter only, since .title() has some quirks.
    text_l[0] = text_l[0][0].upper()+text_l[0][1:]

    return ' '.join(text_l)
</code></pre>

<p>I also took the liberty to change the comment to describe what you actually want to do.</p>
    </div>