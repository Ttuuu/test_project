<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>What you are after is yielding to a different thread, which has been covered <a href="https://codereview.stackexchange.com/questions/110066/async-yield-and-continue-on-taskpool">in this question</a>. One difference is that Andrew's code implements <code>ICriticalNotifyCompletion</code> vs you're implementing just <code>INotifyCompletion</code>. I haven't found any good documentation which one to prefer and what <code>Critical</code> exactly means. It may mean that his code works in some weird corner case scenarios where yours might not - hard to say. Most articles state that it's optional to implement the critical interface so it may not matter.</p>

<p>The other difference is that Andrew's code doesn't provide an option to switch back plus he's using a <code>struct</code> while you are using a <code>class</code> (<a href="https://stackoverflow.com/questions/23609110/why-are-awaiters-async-await-structs-and-not-classes-can-classes-be-used">which is just a potential performance optimization</a>)</p>

<p>The main conclusion was that Microsoft didn't provide this out of the box since they felt it was prone to abuse.</p>

<p>In general I prefer Andrew's usage pattern of <code>TaskEx.YieldToThreadPoolThread()</code> over your more direct <code>await GoToThreadPool.Instance</code> since it's slightly more readable.</p>

<p>So combining the two implementations one could end up with something like this:</p>

<pre><code>public static class TaskEx
{
    public static YieldToThreadAwaitable YieldToThreadPool()
    {
        return new YieldToThread(null);
    }

    public static YieldToThreadAwaitable YieldToMainThread()
    {
        return new YieldToThread(Application.Current.Dispatcher.Thread);
    }

    public static YieldToThreadAwaitable YieldToThread(Thread target)
    {
        return new YieldToThread(target);
    }
}

public class YieldToThreadAwaitable : INotifyCompletion
{
    private Thread _Target;

    public YieldToThreadAwaitable(Thread target)
    {
        Target = target;
    }

    public bool IsCompleted
    {
        get { return _Target != null ? Thread.CurrentThread == _Target : Thread.CurrentThread.IsThreadPoolThread; }
    }

    public YieldToThreadAwaitable GetAwaiter()
    {
        return this;
    }

    public void GetResult() { }

    public void OnCompleted(Action continuation)
    {
        if (_Target == null)
        {
            ThreadPool.QueueUserWorkItem(o =&gt; continuation());
        }
        else
        {
            Dispatcher.FromThread(_Target).BeginInvoke(continuation);
        }
    }
}
</code></pre>
    </div>