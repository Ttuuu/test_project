<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3><code>IValidatable&lt;T&gt;</code></h3>

<ul>
<li><code>ModifyInput</code> and <code>PreCheck</code> are problematic: their public setters allow any code to modify or disable sanitizing and validation. Surely that's something that only the initializing code should be able to do? I also don't see why these properties need to be exposed at all: they're implementation details.</li>
<li>Why does <code>IValidatable&lt;T&gt;</code> contain an <code>Equals</code> and <code>GetHashCode</code> method? They're not used anywhere.</li>
<li>Because of the above two issues, <code>IValidatable&lt;T&gt;</code> is rather pointless in its current shape. Why doesn't it contain a <code>T Data { get; set; }</code> property? And if you're only ever going to have one implementation then I don't see much use for an interface. <code>Validatable&lt;T&gt;</code> seems flexible enough.</li>
</ul>

<h3><code>Validatable&lt;T&gt;</code></h3>

<ul>
<li>You don't need to initialize properties with <code>= default</code> - that already happens by default.</li>
<li>I'd expect <code>Validatable&lt;T&gt;</code>'s constructor to accept <code>modifyInput</code> and <code>preCheck</code> as arguments, and to store them in private fields.</li>
<li>Why does <code>ModifyInput</code> take a <code>ref</code> parameter instead of returning the result? This prevents you from using lambda's.</li>
<li><code>SetData</code> is a confusing name: it doesn't actually set <code>Data</code> - it returns a sanitized and validated value.</li>
<li>Most people would expect a setter to store the value given to it. Getting a different value back would be rather surprising - and not in a good way. Consider using a clearly named method instead: <code>v.Value = 105</code> versus <code>v.SanitizeAndStore(105)</code>.</li>
<li>Returning <code>default</code> when validation fails is problematic: is <code>0</code> an intended, valid value, or the result of a validation failure? I'd expect an exception to be thrown instead, or some other failure-handling mechanism. I would also clearly document the chosen behavior.</li>
<li><code>SetData</code> can be simplified to just <code>ModifyInput?.Invoke(ref _value); return (PreCheck?.Invoke(_value) == false) ? default : _value;</code>.</li>
<li>A boolean is already either true or false, so the <code>== true</code> in your code is superfluous. Note that <code>?.</code> returns a nullable bool, which is why the <code>== false</code> part above is necessary.</li>
<li>In <code>Equals</code>, instead of using <code>as</code> and a null-check, you can use pattern matching instead: <code>return other is Validatable&lt;T&gt; column &amp;&amp; ...;</code>.</li>
</ul>

<h3><code>ValidatableBuilder</code></h3>

<ul>
<li>Why do <code>QueryableHeader</code> and <code>GetTypesRow</code> return an <code>IQueryable&lt;&gt;</code>? It's an in-memory list, so <code>IEnumerable&lt;&gt;</code> would make more sense.</li>
<li><code>GetTypedRow</code> always returns the same row, including data that was set previously. I can't imagine that to be the intended behavior.</li>
<li><code>Property { get =&gt; ...; }</code> can be simplified to <code>Property =&gt; ...;</code>.</li>
<li>Why explicitly initialize <code>HeaderContainer</code> to <code>default</code>, only to override that in the constructor? Just initialize it to a new list directly.</li>
<li>The various <code>Add</code> methods are very brittle: they fail silently depending on whether <code>TypesCompleted</code> is true or not. If a method cannot be called when an object is in a certain state, then I'd expect an exception to be thrown, but I'd much rather look for a better design. Perhaps a <code>CreateRowBuilder</code> method that returns a <code>RowBuilder</code> with the current configuration, which can then be used to create rows.</li>
<li>Likewise, silently ignoring reference types is brittle. Use a generic type constraint instead, so you can prevent the use of reference types at compile-time.</li>
<li>Why have separate methods for adding columns, handlers and predicates? Why not add optional arguments for handlers and predicates to <code>AddColumnToHeader</code>?</li>
</ul>

<h3><code>ValidationTests</code></h3>

<ul>
<li>Inside that foreach loop, you're using both <code>is</code> and <code>as</code>, but with different types. An <code>IValidatable&lt;T&gt;</code> is not necessarily a <code>Validatable&lt;T&gt;</code> - it could be any other type that implements <code>IValidatable&lt;T&gt;</code>. Note also that pattern matching can be used here: <code>switch (Value) { case Validatable&lt;ReadOnlyMemory&lt;byte&gt;&gt; vmem: vmem.Data = ...; case Validatable&lt;int&gt; vint: vint.Data = ...; }</code>.</li>
</ul>

<h3>Other notes</h3>

<ul>
<li>Leading underscores are typically used for private fields. Parameter names are written in camelCase, without leading underscore. PascalCase is used for property names, not fields.</li>
<li>I prefer to add a bit of whitespace between methods and properties, especially when they have different visibilities (public/private).</li>
<li>There's a general lack of documentation/comments.</li>
</ul>

<h3>Alternative approach</h3>

<p>A property that silently modifies or rejects data is quite surprising. I'd rather see code that is more obvious about what it does:</p>

<pre><code>var sanitizedValue = column.Sanitize(inputValue);
if (!column.IsValid(sanitizedValue))
{
    // log, throw error, ...
}
else
{
    // store value
}
</code></pre>
    </div>