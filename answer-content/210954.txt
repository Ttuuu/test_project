<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>use std::io;

fn main() {
    println!("Enter Temperature as 56f or 98c");

    let mut usr_inpt = String::new();

    io::stdin()
        .read_line(&amp;mut usr_inpt)
        .expect("can not read user input");
</code></pre>
</blockquote>

<p>I like that you’re using <code>expect</code> here instead of <code>unwrap</code>. 
It allows for a much nicer user experience when things go sideways. 
If I was nitpicking, I’d remind you to use proper capitalization and punctuation. </p>

<blockquote>
<pre><code>    let usr_inpt = usr_inpt.trim_end().to_lowercase();

    if usr_inpt.ends_with("f") || usr_inpt.ends_with("c") {
        // remove the last indication 56f -&gt; 56 or 56c -&gt; 56
        let _temp: String = usr_inpt.chars().take(usr_inpt.len() - 1).collect();
</code></pre>
</blockquote>

<p><code>temp</code> is rarely a good name. 
If you meant <code>temperature</code> instead of <code>temporary</code>, it would be good to spell it out. </p>

<blockquote>
<pre><code>        let num: u32 = match _temp.parse() {
            Ok(num) =&gt; num,
            Err(_) =&gt; 0,
        };
</code></pre>
</blockquote>

<p>Is it really the right thing to return zero in the error case?
I would expect the error case here to be caused by invalid user input (or a bug in your previous parsing logic maybe).
It would probably be best to alert the user to this failure instead of the slightly enigmatic result of <code>0</code>. </p>

<blockquote>
<pre><code>        if usr_inpt.ends_with("f") {
            println!("celcius -&gt; {}", (num - 32) * 5 / 9);
        } else if usr_inpt.ends_with("c") {
            println!("farenheit -&gt; {}", num * 9 / 5 + 32);
        }
</code></pre>
</blockquote>

<p>It smells a little funny that we’re making the same checks again as we did above. If you extracted the parsing logic into a function, you could just call it for each case. I would probably also extract proper <code>fahrenheit_to_celcius</code> and <code>celcius_to_fahrenheit</code> functions. </p>

<blockquote>
<pre><code>    } else {
        println!("invalid input");
    }
}
</code></pre>
</blockquote>

<p>Error messages should be printed to <code>stderr</code>. 
Use the <a href="https://doc.rust-lang.org/std/macro.eprintln.html" rel="nofollow noreferrer"><code>eprintln</code> macro</a> instead. </p>

<p>———————</p>

<p>All in all it’s pretty good for a first go. 
I would take a look at using some types for <code>Fahrenheit</code> and <code>Celsius</code> though. Your parse method could return a <code>Temperature</code> that contains either a <code>Celsius</code> or <code>Fahrenheit</code> measurement. </p>

<p>I’ve not run this through the compiler, but hopefully it illustrates the idea. </p>

<pre><code>struct Celsius { value: u32 }
impl Celsius {
    fn to_farhenheit(&amp;self) -&gt; Farhenheit {
        Fahrenheit { value: self.value * 9 / 5 + 32 }
    }
}

struct Fahrenheit { value: u32 }
impl Fahrenheit {
    fn to_celsius(&amp;self) -&gt; Celsius {
        Celsius { value: ( self.value  - 32) * 5 / 9 }
    }
}

enum Temperature {
    Fahrenheit(Fahrenheit),
    Celsius(Celsius)
    Err(String)
}

fn parse_input(input: &amp;str) -&gt; Temperature {
    if input.ends_with("f") {
        Fahrenheit { value: parse_num(input) }
    } else if input.ends_with(“c”) {
        Celsius { value: parse_num(input) }
    } else {
        Err(“Input invalid. Must end with ‘c’ or ‘f’.”)
    }
}

fn parse_num(input: &amp;str) -&gt; u32 {
    let temperature: String = usr_inpt.chars().take(usr_inpt.len() - 1).collect();

    match temperature.parse() {
        Ok(num) =&gt; num,
        Err(_) =&gt; 0,
    };
}
</code></pre>

<p>Then we tie it all together in main. </p>

<pre><code>fn main() {
    println!("Enter Temperature as 56f or 98c");

    let mut usr_inpt = String::new();

    io::stdin()
        .read_line(&amp;mut usr_inpt)
        .expect("can not read user input");

    let temperature = parse_input(usr_inpt.trim_end().to_lowercase());

    match temperature {
        Temperature::Celsius { celsius } =&gt; println!("celcius -&gt; {}", celcius.to_fahrenheit()),
        Temperature::Fahrenheit { fahrenheit } =&gt; println!(“fahrenheit -&gt; {}”, fahrenheit.to_celsius()),
        Err(reason) =&gt; eprintln!(reason)
    }
}
</code></pre>

<p>While it’s certainly more code, it raises the level of abstraction in your <code>main</code> function quite a bit. </p>

<ul>
<li>Greet user</li>
<li>Get input</li>
<li>Parse input</li>
<li>Write out results </li>
</ul>

<p>This also provides the opportunity (left as an exercise for the reader) to propagate errors from <code>parse_num</code> all the way back up to the user, rather than silently returning an invalid result. </p>
    </div>