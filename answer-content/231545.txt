<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It's reasonable to require GNU Make - it's available on all platforms that have their own Make (as far as I know), and trying to cope with the vagaries of all vendors' Make implementations is an exercise in futility.  So I think you've taken the right approach here.</p>
<hr>
<p>You're working against Make by putting build products into subdirectories.  It's easier to build them into the working directory, and the sources can be found using <code>VPATH</code>, then there's no need to copy all the built-in rules (not so bad when all your source files are C++, but when you need to add a few assembler and C files, then the maintenance starts to grow).</p>
<p>Creating separate debug and release binaries in the same build tree is problematic - it can mean a total rebuild when switching from one kind to another.  It's more usual to have separate build directories for the two, so you can incrementally build either at any time (of course, they can share the same source files, using <code>VPATH</code>, and can share most of the Makefile the same way).</p>
<p>That would look something like this:</p>
<h3>debug/Makefile</h3>
<pre><code>CXXFLAGS += -g3 -DDEBUG
VPATH = ../src:../include
include ../Makefile
</code></pre>
<h3>release/Makefile</h3>
<pre><code>CXXFLAGS += -O2
VPATH = ../src:../include
include ../Makefile
</code></pre>
<p>Then, building the release version doesn't affect the objects used to build the debug version, and vice versa.</p>
<hr>
<p>This target is problematic for a parallel build:</p>
<blockquote>
<pre><code>release: distclean $(PROGRAM)
</code></pre>
</blockquote>
<p>We'll lose some of the files as the <code>distclean</code> isn't sequenced with respect to <code>$(PROGRAM)</code>.</p>
<p>I don't like the explicit <code>strip</code> invocation in the <code>release</code> target: since <code>install</code> depends on release, this makes it impossible to build debug-symbol Debian packages the usual way.  Just let the packager do the stripping.</p>
<hr>
<p>I see no value in redefining <code>COMPILE.cc</code> and <code>LINK.cc</code>: <code>CXXFLAGS</code> and <code>LDFLAGS</code> are provided specifically for you to add your own flags to these lines - just use them.</p>
<p>Speaking of which, we normally use <code>+=</code> to add to the flags:</p>
<pre><code>CPPFLAGS += -I$(INCDIR)
CXXFLAGS += -std=c++17 -Wall -Wextra -Wpedantic
CXXFLAGS += -flto

LDFLAGS += -ffunction-sections -fdata-sections
LDFLAGS += -Wl,-gc-sections

DEPFLAGS = -MT $@ -MMD -MP -MF $(DEPDIR)/$*.Td
CPPFLAGS += $(DEPFLAGS)
</code></pre>
<hr>
<p><code>$(RM)</code> is provided as a more portable alternative to <code>rm -f</code>; we could use that in a few places.</p>
<p><code>.DELETE_ON_ERROR</code> is often missed - kudos for remembering that.</p>
<p><code>DESTDIR?=</code> is a no-op - undefined Make variables already expand to nothing.  Just omit this line.  It's good that you're correctly allowing this to be set by packaging systems etc.</p>
    </div>