<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>1. Review</h3>

<ol>
<li><p>The name <code>calculate</code> is vague. Something like <code>attack_freq</code> would be more specific.</p></li>
<li><p>There's no docstring. What does <code>calculate</code> do? What does it return?</p></li>
<li><p>The values in <code>two_dice_prob</code> are not probabilities, they are <em>counts</em> or <em>frequencies</em>. (To get probabilities, you'd have to divide by 36.) I would use a name like <code>two_dice_freq</code>.</p></li>
<li><p>By default <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.zeros.html" rel="nofollow noreferrer"><code>numpy.zeros</code></a> gives you an array of floats, but the <code>result</code> array only contains integers, so you could specify <code>dtype=int</code> when creating it. (Alternatively, by constructing the result using NumPy throughout, it can be arranged that it has the right data type.)</p></li>
<li><p>When working with NumPy it's nearly always fastest if you structure the code to consist of a sequence of whole-array operations, rather than looping over the elements in native Python.</p>

<p>In this case we can use <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.mgrid.html" rel="nofollow noreferrer"><code>numpy.mgrid</code></a> to construct arrays containing all possibilities for attack shift, defence roll and attack roll:</p>

<pre><code>shift, defence, attack = np.mgrid[-12:13, 1:7, 2:13]
</code></pre>

<p>Then we can find the difference between attack and defence simultaneously for all possibilities:</p>

<pre><code>diff = attack + shift - defence
</code></pre>

<p>The three outcome classes can now be computed by comparing the difference against 0 and 5 to get arrays of Booleans, and then assembling the outcomes into a single array using <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.stack.html" rel="nofollow noreferrer"><code>numpy.stack</code></a>:</p>

<pre><code>missed = diff &lt;= 0
destroyed = diff &gt;= 5
disabled = ~(missed | destroyed)
outcome = np.stack((missed, disabled, destroyed), axis=1)
</code></pre>

<p>The reason for choosing to stack along <code>axis=1</code> is so that the <code>outcome</code> array has the right shape, that is, (25, 3, 6, 11). We multiply the last axis by the two-dice frequencies, and then sum over the last two axes. This leaves us with an array of frequencies with shape (25, 3) as required:</p>

<pre><code>return (outcome * two_dice_freq).sum(axis=(2, 3))
</code></pre>

<p>If we had chosen to stack along axis=0, then at this point we would have an array with shape (3, 25) and we'd have to transpose it before returning. By choosing the right axis to stack along we avoided this transposition.</p></li>
</ol>

<h3>2. Revised code</h3>

<pre><code>import numpy as np

def attack_freq():
    """Return array with shape (25, 3), whose (i + 12)'th row contains the
    frequencies of the three outcome classes (missed, disabled,
    destroyed) when attack bonus minus defense bonus is i.

    """
    two_dice_freq = [1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1]
    shift, defence, attack = np.mgrid[-12:13, 1:7, 2:13]
    diff = attack + shift - defence
    missed = diff &lt;= 0
    destroyed = diff &gt;= 5
    disabled = ~(missed | destroyed)
    outcome = np.stack((missed, disabled, destroyed), axis=1)
    return (outcome * two_dice_freq).sum(axis=(2, 3))
</code></pre>

<p>This computes the same results as the code in the post:</p>

<pre><code>&gt;&gt;&gt; np.array_equal(calculate(), attack_freq())
True
</code></pre>

<p>but it's roughly four times as fast:</p>

<pre><code>&gt;&gt;&gt; from timeit import timeit
&gt;&gt;&gt; timeit(calculate, number=1000)
0.38954256599993187
&gt;&gt;&gt; timeit(attack_freq, number=1000)
0.09676001900004394
</code></pre>

<p>The actual runtimes are so small, less than a millisecond, that this speedup doesn't really matter in practice, since you'd only need to build this table once. However, the general technique, of applying a series of whole-array NumPy operations instead of looping in native Python, can make <a href="https://codereview.stackexchange.com/a/161574/11728">practical</a> <a href="https://codereview.stackexchange.com/a/196024/11728">differences</a> <a href="https://codereview.stackexchange.com/a/42916/11728">in other</a> <a href="https://codereview.stackexchange.com/a/41089/11728">kinds of</a> <a href="https://codereview.stackexchange.com/a/84990/11728">program</a>, so it's worth <a href="https://softwareengineering.stackexchange.com/a/254487/30159">practicing the technique</a> even in small cases like this.</p>
    </div>