<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Use option 3: Create a <code>movevector</code>-object when calling the function, and let the function do everything.</p>

<hr>

<p>Is there any reason you give the position to move to, even before doing any validation, instead of a direction-vector?<br>
That leads to code-duplication.</p>

<pre><code>struct movevector {
    int x, y;
};
movevector operator-(movevector v) noexcept { return {-v.x, -v.y}; }
movevector move_x(int x) noexcept { return {x, 0}; }
movevector move_y(int y) noexcept { return {0, y}; }

switch(input) {
case MOVE_UP: processPlayerMove(player, move_y(-1)); break;
...
</code></pre>

<p>Though only add <code>move_x</code> and <code>move_y</code> if you use them often enough.</p>

<p>You should also explore whether you could use the same function to process movement for all entities, or players are too special.</p>

<p>Also, I really wouldn't do faux-encapsulation with <code>point</code>, there's no point to it.<br>
Remove the ctors, setters, and getters, add some operators to add / subtract <code>movevector</code>s, and you have a much more useful abstraction which doesn't encourage bloated code.</p>

<pre><code>struct point {
    int x, y;
};
point operator+(point p, movevector d) noexcept { return {p.x + d.x, p.y + d.y}; }
point operator-(point p, movevector d) noexcept { return p + -d; }
point&amp; operator+=(point&amp; p, movevector d) noexcept { return p = p + d; }
point&amp; operator-=(point&amp; p, movevector d) noexcept { return p = p - d; }
</code></pre>
    </div>