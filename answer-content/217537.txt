<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As @MateuszKonieczny notes, you 100% should be using Python 3, not Python 2. In particular, that means instead of <code>print output</code>, you use <code>print(output)</code>. When googling for docs or tutorials use "python3" instead of "python" and that should give you what you need.</p>

<p>I wouldn't use tuple unpacking like you did in your first line:</p>

<pre class="lang-py prettyprint-override"><code>input, output = [[1,2], [3, 4]], []
</code></pre>

<p>Tuple unpacking is a fantastic and powerful feature, but here it makes you have to squint and count brackets to see which thing is being assigned to <code>output</code> (since <code>,</code> can occur within a list). Tuple unpacking is great for naming functions that return multiple values:</p>

<pre class="lang-py prettyprint-override"><code>fastest_runtime, average_runtime = run_benchmarks()
</code></pre>

<p>But in this case, put assignments on separate lines. Also, take care to properly PEP8 by putting spaces around commas. Formatting is a key part of pythonic code. You also shouldn't use <code>input</code> as it shadows the builtin function <code>input</code>.</p>

<pre class="lang-py prettyprint-override"><code>lists = [[1, 2], [3, 4]]
output = []
</code></pre>

<p>Now, I'll make a bold claim that almost any time you initialize an empty list and then proceed to call <code>append()</code> or <code>extend()</code> on it, you're doing something wrong. Often, such constructions can be much more concisely and clearly be expressed as a list/generator expression (I've also renamed <code>output</code> to <code>flattened</code>, because the operation you are doing is a common functional one called <a href="https://rosettacode.org/wiki/Flatten_a_list#Python" rel="noreferrer">flattening</a>..although don't look at any of the Python snippets on that page, they are horrible):</p>

<pre class="lang-py prettyprint-override"><code>flattened = [x for l in lists for x in l]
</code></pre>

<p>This is a very common Python idiom. Sometimes you may see:</p>

<pre class="lang-py prettyprint-override"><code>flattened = sum(lists, [])
</code></pre>

<p>This is a trick that takes advantage of the fact that <code>[1, 2] + [3, 4] == [1, 2, 3, 4]</code> (addition is overloaded for lists). Whether it reads better than the list expression is debatable, but it is common nonetheless.</p>

<p>Also note that <code>extend</code> certainly has its place in many applications. It's just in this particular one, the above patterns are typically preferred (due to their brevity).</p>
    </div>