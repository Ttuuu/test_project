<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>verb=['go','kill','eat']
direction=['north','south','east','west']
noun=['bear','princess']
stop=['the','in','of']
</code></pre>

<p>There is not a lot of point in storing these in separate variables only to stick them inside <code>vocab</code> just put the list literals inside <code>vocab</code></p>

<pre><code>vocab={'verb':verb,'direction':direction,'noun':noun,'stop':stop}
</code></pre>

<p>Python convention say to make constant ALL_CAPS. I'd also not abbreviate the names. Code is read more then written, so make it easy to read not to write.</p>

<pre><code>def scan(sentence):
    wordlist=sentence.split()
    result=[] #initialize an empty list
</code></pre>

<p>Pointless comment. Assume you reader understand the language. You don't need to explain what [] means.</p>

<pre><code>    for word in wordlist:
</code></pre>

<p>I'd use <code>for word in sentence.split():</code></p>

<pre><code>        found=False
</code></pre>

<p>Boolean logic flags are delayed gotos. Avoid them when you can</p>

<pre><code>        for key,value in vocab.items():
            if word.lower() in value:  #convert to lower case so that we can handle inputs with both cases
</code></pre>

<p>Your dictionary is backwards. It maps from word types to lists of words. It'd make more sense to have a dictionary mapping from word to the word type.</p>

<pre><code>                result.append((key,word))
                found=True
                break
        if not found:
</code></pre>

<p>Rather then this, use an <code>else</code> block on the for loop. It'll be execute if and only if no break is executed.</p>

<pre><code>            try:
                word=int(word)
                result.append(('number',word))
</code></pre>

<p>Put this in the else block for the exception. Generally, try to have as little code in try blocks as possible. Also I wouldn't store the result in word again, I'd put in a new local.</p>

<pre><code>            except ValueError:
                result.append(('error',word))

    return result  
</code></pre>

<p>My approach:</p>

<pre><code>WORD_TYPES = {
   'verb' : ['go', 'kill', 'eat'],
   'direction' : ['north', 'south', 'east', 'west'],
   'noun' : ['bear', 'princess'],
   'stop' : ['the','in','of']
}
# invert the dictionary
VOCABULARY = {word: word_type for word_type, words in WORD_TYPES.items() for word in words}

def scan(sentence):
    tokens = []
    for word in sentence.split():
        try:
            word_type = VOCABULAR[word]
        except KeyError:
            try:
                 value = int(word)
            except ValueError:
                 tokens.append( ('error',word) )
            else:
                 tokens.append( ('int', value) )
        else:
            tokens.append( (word_type, word) )
     return tokens
</code></pre>

<p>Alternately, using some regular expressions:</p>

<pre><code>classifications = []
for word_type, words in WORD_TYPES.items():
    word_expression = '|'.join("(?:%s)" % re.escape(word) for word in words)
    expression = r"\b(?P&lt;%s&gt;%s)\b" % (word_type, word_expression)
    classifications.append(expression)
classifications.append(r"\b(?P&lt;int&gt;\d+)\b")
classifications.append(r"\b(?P&lt;error&gt;\w+)\b")
parser = re.compile('|'.join(classifications))

def scan(sentence):
    return [(match.lastgroup, match.group(0)) for match in parser.finditer(sentence)]
</code></pre>

<p><strong>EDIT</strong></p>

<p>If your version of python is to old to use the dict comphrensions you can use:</p>

<pre><code>dict((word, word_type) for word_type, words in WORD_TYPES.items() for word in words)
</code></pre>
    </div>