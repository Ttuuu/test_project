<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of" rel="nofollow noreferrer"><code>for of</code></a> not <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in" rel="nofollow noreferrer"><code>for in</code></a></h2>

<p>I have noticed that on occasion you use the indexing <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in" rel="nofollow noreferrer"><code>for in</code></a> Try to avoid using this loop as it can be problematic if the object you iterate has inherited properties not set as <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable" rel="nofollow noreferrer"><code>enumerable = false</code></a></p>

<p>Use the values iterator <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of" rel="nofollow noreferrer"><code>for of</code></a> as it avoids the problems that come with <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in" rel="nofollow noreferrer"><code>for in</code></a>. It also has the benefit of not needing to index the object for the value</p>

<h2>Use <code>const</code></h2>

<p>When using either <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of" rel="nofollow noreferrer"><code>for of</code></a> and <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in" rel="nofollow noreferrer"><code>for in</code></a> and you don't intend to change the value or key use a <code>const</code>  eg <code>for(const i in brackets)</code> or <code>for(const char of brackets)</code></p>

<p><strong>Note</strong> That you can not use a <code>const</code> in <code>for(;;)</code> loops but <code>let</code> is allowed. <code>for(let i=0;i&lt;10;i++)</code>. The reason is that even though a new instance of <code>i</code> is created each iteration and assigned the value of the previous <code>i</code>, the last loop expression <code>i++</code> is applied at the bottom of the loop block and thus does not work for constants.</p>

<h2>Simplify</h2>

<p>Strings are iterable objects so you can avoid the need to use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split" rel="nofollow noreferrer">String.split</a> and use the more succinct spread <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax" rel="nofollow noreferrer"><code>...</code></a> operator. eg <code>[...string]</code> is the same as <code>string.split("");</code></p>

<h2>Complexity</h2>

<ul>
<li><p>Your imperative function is <span class="math-container">\$O(n)\$</span> time and <span class="math-container">\$O(1)\$</span> space.</p></li>
<li><p>Your declarative (you call functional) function is <span class="math-container">\$O(n)\$</span> time and <span class="math-container">\$O(n)\$</span> space.</p></li>
</ul>

<h2>Ambiguity</h2>

<p>The question does not indicate if the string will contain characters other than <code>"()"</code>, yet the example shows only <code>"()"</code> and your solutions count characters other than <code>"()"</code> as <code>")"</code> so will assume that the input string contains only <code>"()"</code></p>

<h2>Solutions</h2>

<h3>Imperative</h3>

<pre><code>function balanced(str) {
    var open = 0, closed = 0;
    for (const char of str) { char === "(" ? open++ : (open ? open-- : closed++) } 
    return open + closed ;
}
</code></pre>

<h3>Declarative</h3>

<pre><code>function balanced(str) {
    const open = counts =&gt; (counts[0]++, counts);
    const close = counts =&gt; (counts[0] ? counts[0]-- : counts[1]++, counts);
    const counter = (counts, char) =&gt; char === "(" ? open(counts) : close(counts);
    const sum = arr =&gt; arr[0] + arr[1];
    const chars = str =&gt; [...str];
    return sum(chars(str).reduce(counter, [0, 0]));
}   
</code></pre>

<h3>Functional</h3>

<pre><code>function balanced(str) {
    const counter = ([open, closed], char) =&gt; {
        char === "(" ? open++ : (open ? open-- : closed++);
        return [open, closed];
    }
    const sum = (sum, val) =&gt; sum += val;
    return [...str]
       .reduce(counter, [0, 0])
       .reduce(sum, 0);
}   
</code></pre>

<p>or</p>

<pre><code>function balanced(str) {
    const counter = ([open, closed], char) =&gt;
        (char === "(" ? open++ : (open ? open-- : closed++), [open, closed]);
    const res = [...str].reduce(counter, [0, 0])
    return res[0] + res[1];
}   
</code></pre>
    </div>