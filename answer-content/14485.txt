<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Don't really agree with Konrad on a couple of points. First, <code>$clientFilenameLength</code>, while a bit far from where it is actually used and a bit lengthy for such a simple variable name, is not unnecessary. This variable prevents you from having to call a function, <code>strlen()</code>, twice on the same information. Its better to only have to run it once, and therefore the variable is necessary. Even if you only used that variable once, it would still be ok because sometimes it can enhance legibility or efficiency. This is especially the case when defining parameters for a for or while loop, because assigning functions as parameters in them will cause those functions to be called on every iteration, which is much less efficient than assigning a variable beforehand instead.</p>

<p>Again, I have to disagree with Konrad. "255" is not a magic constant. First of all, because magic constants, at least in PHP, define constants that are available in every script without you needing to do anything special to get them, such as the file name <code>__FILE__</code>. What I think he meant to say is magic number, but even then, this can't be considered a magic number because you did indeed define it before using it. If however you just did something like the following, then THAT would have been considered a magic number. What you have is fine.</p>

<pre><code>if( $clientFilenameLength &gt; 255 ) {//this is a magic number
</code></pre>

<p>Why not <code>isset()</code> instead of <code>! is_null()</code>? <code>isset()</code> has the added benefit of also checking for a null value and means you don't have to use the "not" syntax.</p>

<pre><code>if( isset( $clientFilename ) ) {
    $hasClientExtension = isset( $clientExtension );
</code></pre>

<p>Make sure you use the proper variables! You've created an <code>$excessFromEnd</code> variable and then use <code>$excess</code> instead, so this wont work. This is why long variable names aren't always good. Be descriptive, but not excessive. God, I'm full of puns today, first lengthy then excessive :) Don't worry, I'll leave shortly. Speaking of names, all-caps separated by underscores should only really be used for constants, which <code>$MAX_FNAME_LEN</code> can, and probably should, be.</p>

<p>Subtracting a negative, at least if I remember highschool well enough, results in addition, so why not just make <code>$removeFromEnd</code> positive and add it? This will also mean that you can remove that <code>abs()</code> function.</p>

<pre><code>$removeFromEnd = $hasClientExtension ? 1 + strlen($clientExtension) : 0;
//rest of code
$excessFromEnd = $MAX_FNAME_LEN - ( $clientFilenameLength + $removeFromEnd );
//rest of code
if( strlen( $defRandFilename ) + $removeFromEnd &gt; $MAX_FNAME_LEN ) {
</code></pre>

<p>Always use braces! For languages, such as Python, that don't use braces, this is fine. But with PHP, even though they allow it, this is bad. PHP even agrees this is bad as it can cause issues with your code. Another good reason is to enhance legibility. I'm pretty sure this is similar for a lot of people, but I always expect the braces. So when I'm reading some code and it doesn't have them I have to go back to the beginning because when I got to the end the braces didn't match up. I don't always believe indentation, especially on CR, because sometimes its lost in the transfer process. It's just two little characters but they do so much.</p>

<pre><code>else {
    $defFilename  = $clientFilename; // User original filename
}
</code></pre>

<p>Wow, just noticed this, and that should be a flag right there. Don't assign a variable to a variable you are just defining! They are hard to spot, and therefore hard to debug. As I just pointed out, I JUST found this while I was nearing the end of your script when I found <code>$defRandFilename</code> and was trying to figure out where it came from (answer: the beginning of the script). I had to use my IDE's highlighting to help me. If you need a copy of a variable, make one after you've made the original. But, from what I can tell from your code, this is just unnecessary. Just remove <code>$defFilename</code> here, you have it being reassigned no matter what later and you never use it before that. Actually, you just never really use it at all. You define <code>$defFilename</code> but its never used after that, I'm assuming because this is only partial code, but figured I'd point it out just in case.</p>

<pre><code>$defFilename = $defRandFilename = uniqid('fid_', true);// this === bad
</code></pre>

<p>Alright, so if I'm reading this right, you just want to create a filename with a maximum of 255 characters, including extension. There is a problem. You are not comparing both the filename length AND extension length to the maximum allowed. At least not for <code>$defFilename</code>. You do, however, do it for <code>$defRandFilename</code>, but for <code>$defFilename</code> you are just comparing the filename's length. When you create the <code>$removeFromEnd</code> variable, you add the clause for the extension being removed as well, but you don't ever check it. BTW: What is the purpose of having both <code>$defFilename</code> AND <code>$defRandFilename</code>?</p>

<p>Now, you were asking for an easier way to do this. You could just use <code>substr()</code> from the beginning. If the length parameter passed to <code>substr()</code> is larger than the length of the supplied string it will only go to the original string's length, with no out of bounds errors or anything. So....</p>

<pre><code>if( isset( $clientFilename ) ) {
    $newFilename = substr( $clientFilename, 0, $MAX_FNAME_LEN - strlen( $clientExtension ) );
    $newFilename .= $clientExtension;
}
</code></pre>

<p>I hope that's what you were looking for, and I hope the rest helps too :) The best advice I can give you right now is to make sure you define your variables close to where they are actually going to be used, rather than four or five lines away, or multiple indentations away. This was the biggest issue I had with reading this code. Well that and the braces. Good luck!</p>
    </div>