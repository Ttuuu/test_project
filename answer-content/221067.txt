<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Naming Conventions</h2>

<ul>
<li><code>GetMaxNumber</code>: Since you are evaluating expressions, call it <code>EvaluateMaximum</code>.</li>
<li><code>GetMaxNumberHelper</code>: -helper is an acceptable class name, but not method name. Use an overload of <code>EvaluateMaximum</code> instead.</li>
<li><code>visit</code>: This is the name of a method in the visitor pattern. Don't use it as a variable name. Use <code>number</code> instead.</li>
<li><code>maxMin</code>: This is an ambigious name. Use <code>span</code> or <code>interval</code> instead.</li>
<li><code>number2</code>: Unnecessary postfix. Use <code>number</code> instead.</li>
<li><code>numbers.Length == 0</code>: I would prefer <code>!numbers.Any()</code>.</li>
<li><code>calculateFourOperations</code>: Don't camelcase method names. <code>CalculateFourOperations</code></li>
</ul>

<hr>

<h2>Guard Conditions</h2>

<p>If <code>numbers</code> is <code>null</code>, the specification is not met, so throw a <code>ArgumentNullException</code>. If it has no elements, I would opt for returning the pair <code>new[] { double.NaN, double.NaN }</code>. You are letting the caller know the evaluation could not be performed on their input.</p>

<blockquote>
<pre><code>if (numbers == null || numbers.Length == 0)
{
    return new double[] { };
}
</code></pre>
</blockquote>

<pre><code>if (numbers == null)
    throw new ArgumentNullException(nameof(numbers));
if (!numbers.Any())
{
    return new [] { double.NaN, double.NaN };
}
</code></pre>

<p>I am also missing overflow and divide by zero handling in your expressions.</p>

<blockquote>
<pre><code>var division  = maxMin[0] / number2;  // &lt;- what if number2 is 0?
</code></pre>
</blockquote>

<hr>

<h2>Recursion</h2>

<p>Using <code>startIndex</code> and incrementing it, seems more like a code smell to me. It's more of a hidden loop than recursion.</p>

<blockquote>
<pre><code> public static double[] GetMaxNumberHelper(double[] numbers, int startIndex, ..)
 {
     // .. startIndex + 1
 }
</code></pre>
</blockquote>

<hr>

<h2>Expressions</h2>

<p>You could specify your expressions (addition, subtraction, multiplication, division) as a seperate method. <code>CalculateFourOperations</code> could then call these expressions on its input. The advantage is two-fold:</p>

<ul>
<li>reuse existing expression more than once</li>
<li>overflow, divide by zero checks can be executed on a single expression</li>
</ul>

<blockquote>
<pre><code> private static double[] calculateFourOperations(double[] maxMin, double number2)
 {
      var addition  = maxMin[0] + number2;
      var addition2 = maxMin[1] + number2;
      // ..
 }
</code></pre>
</blockquote>

<hr>

<h2>Proposed Solution</h2>

<p>I present an alternative solution for evaluating these expressions. My steps are described bottom-up.</p>

<p>A new struct <code>Span</code> stores the <code>Min</code> and <code>Max</code> value pairs. This way we can avoid <code>double[]</code> for these pairs.</p>

<pre><code> public struct Span
 {
      public double Min { get; }
      public double Max { get; }
      public Span(double min, double max)
      {
          Min = min;
          Max = max;
      }
      public static Span NaN =&gt; new Span(double.NaN, double.NaN);
      public static Span Zero =&gt; new Span(0d, 0d);
      // .. hashcode, equals, tostring ..
 }
</code></pre>

<p>Evaluating an expression handles overflow and divide by zero. I have decided to use <code>double.NaN</code> when these errors occur. Later on, I ignore these values and continue the flow with the other values. This is a design decision. The sytax I use is an <a href="https://flaviocopes.com/javascript-iife/" rel="nofollow noreferrer">IIFE</a> (known in the javascript world). This helps with the stacktrace when the try-catch clause is inside the outer function.</p>

<pre><code>  private static double EvaluateExpression(Func&lt;double&gt; expression)
  {
        return (new Func&lt;double&gt;(() =&gt;
        {
            try
            {
                return expression();
            }
            catch
            {
                return double.NaN;
            }
        }
        ))();
  }
</code></pre>

<p>Now we can evaluate all of our expressions against an input and the next number.</p>

<pre><code>private static Span EvaluateSpan(double current, double number)
{
      var evaluations = new Func&lt;double&gt;[] {
            () =&gt; current + number,
            () =&gt; current - number,
            () =&gt; current * number,
            () =&gt; current / number
      }.Select(e =&gt; EvaluateExpression(e)).Where(n =&gt; !double.IsNaN(n));
      return new Span(evaluations.Min(), evaluations.Max());
}
</code></pre>

<p>The next step is to perform the evaluations on both branches of the current <code>Min</code> and <code>Max</code>. A <code>Queue</code> is an ideal collection for this kind operation. We then calculate the new <code>current</code> based on both branches.</p>

<pre><code>private static Span EvaluateSpan(Span current, Queue&lt;double&gt; numbers)
{
     if (!numbers.Any())
         return current;
     var number = numbers.Dequeue();
     var s1 = EvaluateSpan(current.Min, number);
     var s2 = EvaluateSpan(current.Max, number);
     current = new Span(Math.Min(s1.Min, s2.Min), Math.Max(s1.Max, s2.Max));
     return EvaluateSpan(current, numbers);
}
</code></pre>

<p>All our helper methods have been created. The public API contains a method to get the caller the <code>Span</code> and two overloads: one for <code>Max</code> and one for <code>Min</code>.</p>

<pre><code>public static Span EvaluateSpan(IEnumerable&lt;double&gt; numbers)
{
      if (numbers == null)
          throw new ArgumentNullException(nameof(numbers));
      var queue = new Queue&lt;double&gt;(numbers);
      if (!queue.Any())
          return Span.NaN;
      var number = queue.Dequeue();
      var current = new Span(number, number);
      return EvaluateSpan(current, queue);
}

public static double EvaluateMaximum(IEnumerable&lt;double&gt; numbers)
{
      return EvaluateSpan(numbers).Max;
}

public static double EvaluateMinimum(IEnumerable&lt;double&gt; numbers)
{
      return EvaluateSpan(numbers).Min;
}
</code></pre>

<hr>

<h2>Test Scenario</h2>

<pre><code> [TestMethod]
 public void RunTestcase()
 {
      var input = new double[] { 1, 12, -3 };

      Assert.AreEqual(33, EvaluateMaximum(input));
 }
</code></pre>
    </div>