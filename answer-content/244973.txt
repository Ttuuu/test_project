<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Already pointed out by other users</p>
<ul>
<li>There is no need to make lists from the strings as any sequence will do</li>
<li><code>minimums</code> - you make bad names where the existing names were better</li>
</ul>
<h1>The if clause</h1>
<pre><code>if args.extended :
    subset = alphaL + alphaU + numeric + special2
    for i in range(0, minimums[3]) :
        password += secrets.choice(special2)
elif minimums[3] :
    subset = alphaL + alphaU + numeric + special
    for i in range(0, minimums[3]) :
        password += secrets.choice(special)
</code></pre>
<p>is erroneous. The check for <code>elif minimums[3]</code> shall be replaced by an <code>else:</code></p>
<p>Also - just because you already switch on <code>args.extended</code> you are not required to pack all variation on that argument in there.
You prepare subset for the logically next function (choice from compound set) before even performing the current one (choice from special).
That results in less readability. There is nothing wrong in switching two times if required. However in this case you should simply switch</p>
<pre><code>if args.extended:
    special = """~`!@#$%^&amp;*()+=_-{}[]\|:;"'?/&lt;&gt;,."""
else:
    special = "!@#$%^&amp;*"
</code></pre>
<p>Then the choice from special/special2 collapses to the standard pattern.</p>
<h1>Names</h1>
<p>It was already mentioned that the minimum list is a name worse than the args attributes (which could be even more descriptive).
Also the names for your imports are bad and camel-cased. why not simply follow the existing naming scheme?</p>
<pre><code>ascii_lowercase = string.ascii_lowercase
</code></pre>
<p>or even more straight</p>
<pre><code>from string import ascii_lowercase
from string import ascii_uppercase
from string import digits
</code></pre>
<p>An extra bad name is <code>subset</code></p>
<pre><code>subset = alphaL + alphaU + numeric + special
</code></pre>
<p>which is clearly a union or superset</p>
<h1>The standard pattern</h1>
<p>You do</p>
<pre><code>for i in range(0, minimums[0]) :
    password += secrets.choice(alphaL)
</code></pre>
<p>the recommended way to character wise join a string is</p>
<pre><code>password += "".join(secrets.choice(ascii_lowercase) for _ in range (0, args.lower)
</code></pre>
<h1>Cargo cult</h1>
<p>You do</p>
<pre><code>for i in range(0, 100) :
    random.shuffle(subset)
</code></pre>
<p>which is pointless. It is pointless to shuffle a 100 times. there is no extra quality in randomness compared to a single shuffle.
It is even more pointless to do that before apply <code>secrets.choice(subset)</code>. You could safely sort subset before choice().</p>
<h1>Final shuffle</h1>
<p>You do</p>
<pre><code>for i in range(0, 100):
    print("Password: ", password)
    password = ''.join(random.sample(password, len(password)))
</code></pre>
<p>which I interpret as final shuffle to eliminate the order of the subsets <code>ascii_lowercase</code>, <code>ascii_uppercase</code>, ...</p>
<p>Again you shuffle a 100 times which will not add any value compared to a single shuffle. To be cryptographically safe you should implement a shuffle based on <code>secrets.choice</code>.</p>
    </div>