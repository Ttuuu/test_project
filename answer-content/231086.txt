<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Use descriptive variable names</h1>

<p>Instead of <code>int a, b, c</code>, give them more descriptive names:</p>

<pre><code>int day, month year;
</code></pre>

<h1><code>sscanf()</code> will ignore trailing garbage</h1>

<p>The function <code>sscanf()</code> will stop parsing after the last conversion. So the string <code>"1.2.3...."</code> will be cleared by your check for digits and period characters, and then <code>sscanf()</code> will read 3 integers, and returns 3. But obviously, this is an invalid date.</p>

<p>It would be best if you could have <code>sscanf()</code> determine the validity of the whole input string. One way is to use the <code>%n</code> conversion to check how many characters of the string were parsed so far, and then check that this corresponds to the whole string. This is how you can do that:</p>

<pre><code>int day, month, year, chars_parsed;

if (sscanf(date, "%2d.%2d.%4d%n", &amp;day, &amp;month, &amp;year, &amp;chars_parsed) != 3)
    return false;

/* If the whole string is parsed, chars_parsed points to the NUL-byte
   after the last character in the string.
 */
if (date[chars_parsed] != 0)
    return false;
</code></pre>

<h1>You don't need 12 <code>if</code>s to check the month</h1>

<p>You can just write:</p>

<pre><code>if (month &lt; 1 || month &gt; 12)
    return false;
</code></pre>

<p>And similar for days and perhaps even years if you want to limit the allowed range.</p>

<h1>Avoid redundant checks</h1>

<p>It is likely that your program will normally handle valid date strings. So you want to optimize for this case. In your code, you are checking for the string to be empty at the start, but this is not necessary; if the input string is empty, then <code>sscanf()</code> will not return 3, so it will already correctly return false. Since most input strings will be valid, checking the string length is just a waste of CPU cycles.</p>

<p>Similarly, checking for each character to be a digit or a period is redundant if you just use <code>sscanf()</code> with the <code>%n</code> method to check that there was no trailing garbage after the year.</p>

<h1>Better date checking</h1>

<p>Just checking whether the month is between 1 and 12 and day between 1 and 31 is not enough. A given month might have less than 31 days. There are also leap years to consider. And if you want to allow dates far in the past, you run into the problem that we have had different calenders. To give an idea of how difficult the problem is, watch: <a href="https://www.youtube.com/watch?v=-5wpm-gesOY" rel="noreferrer">https://www.youtube.com/watch?v=-5wpm-gesOY</a></p>

<p>One way to validate the date is to use the C library's date and time conversion routines. After scanning the day, month and year, create a <code>struct tm</code> from that, then convert it to seconds since epoch using <code>mktime()</code>. This might still accept invalid dates, but if you convert that back to a <code>struct tm</code>, you can check whether that conversion matched the original input:</p>

<pre><code>int day, month, year,
sscanf(date, "%2d.%2d.%4d", &amp;day, &amp;month, &amp;year);

struct tm input = {
    .tm_mday = day,
    .tm_mon = month - 1,
    .tm_year = year - 1900,
};

time_t t = mktime(&amp;input); /* note, this might modify input */
struct tm *output = localtime(&amp;t); /* prefer localtime_r() on systems that support it */

if (day != output-&gt;tm_mday || month != output-&gt;tm_mon + 1|| year != output-&gt;tm_year + 1900)
    return false;
</code></pre>

<p>These routines will probably still not handle dates hundreds of years in the past correctly, but it should suffice for recent dates.</p>
    </div>