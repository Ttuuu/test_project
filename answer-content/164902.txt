<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>Do you feel that these methods clearly express their purpose and usage?</p>
</blockquote>

<ul>
<li>ExecuteIfPreviousTaskComplete &lt;- yes</li>
<li>ExecuteAndCancelPreviousTask &lt;- no because it does not do what its name say.</li>
</ul>

<blockquote>
  <p>I'm a bit leery of the two ref parameters. But since the methods have the update the task and its CTS, I could see no better way.</p>
</blockquote>

<p>Yes, using 2 refs that way is nothing I would do. I think the need of the 2 ref cursors uncovers that there is anything wrong with the design. Passing instance variables as ref parameters to utility methods should also be avoided.</p>

<blockquote>
  <p>Currently, I'm capturing the CancellationTokenSource at the beginning
  of my Action so that it doesn't get replaced when the ref is updated.
  Is this necessary? Or will the capture keep the original value?</p>
</blockquote>

<p>Yes, that is necessary and another indication of the complexity of the code. You actually don't know if an instance variable is reinitialized while a method within the class is running... </p>

<blockquote>
  <p>The two methods are almost identical except for the second line of
  each, but I figured that their usage and intent are clearer when
  they're separate. Should I merge them? Should I keep them as two
  distinct public methods, but merge their implementation into a single
  private method? Or is this overkill for two and a half lines of code?</p>
</blockquote>

<p>IMHO it is overkill for two and half line.</p>

<hr>

<p><strong>To your first use case:</strong></p>

<p>Even if you cancel the task, it is very likely that the server has been requested anyway. IMHO, a more appropriated approach is to wait for the server and run the last action again if there is one.
The following CR question addresses exactly the same problem: <a href="https://codereview.stackexchange.com/questions/163170/processing-input-in-background-while-user-is-typing">Processing input in background while user is typing</a></p>

<p><strong>To your second use case:</strong></p>

<p>Just stop the timer before running the action and restart it afterwards. That's much simpler and takes less resources.</p>
    </div>