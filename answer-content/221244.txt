<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Test, consistent behavior &amp; data structure</strong></p>

<p>Trying to add tests for the code based on the example of input/output provided led to the following result: the behavior is not consistent : in particular the order of the elements in the returned list is not always the same.</p>

<p>The root cause for this is that we are using sets in the logic only to convert to list at the end.</p>

<p>A solution would be to return <code>sorted(results)</code> at the end. An alternative would be to just return a set instead of trying to convert to list.</p>

<p>Then, we get the following automated tests:</p>

<pre><code>print(remove_invalid_parentheses("()())()") == {"(())()", "()()()"})
print(remove_invalid_parentheses("(a)())()") == {"(a())()", "(a)()()"})
print(remove_invalid_parentheses(")(") == {""})
</code></pre>

<p>It would make sense to try to rewrite it as unit-tests using a proper unit-test framework but I will stop here as this is enough for me to keep working.</p>

<p><strong>More explicit loop</strong></p>

<p>I tend to find loops based on <code>for ii in range(ll - 1, -1, -1)</code> very error-prone/hard to understand because of the number of tweaks on both sides of the range. I'd suggest a much more explicit alternative: <code>for ii in reversed(range(ll)):</code>.</p>

<p><strong>Similar indices</strong></p>

<p>As <code>ii</code> will go over <code>]ll, 0]</code> which is <code>]len(s) - removed, 0]</code>, i will go over <code>]len(s), removed]</code>.</p>

<p>The difference between the indices is always <code>removed</code>, we have <code>ii + removed == i</code>: we can get rid of the <code>i</code> variable. We can take this chance to rename <code>ii</code> into <code>i</code>.</p>

<p>At this stage, we have:</p>

<pre><code>def remove_invalid_parentheses(s):
    removed = 0
    results = {s}
    count = {"(": 0, ")": 0}
    for i, c in enumerate(s):
        if c == ")" and count["("] == count[")"]:
            new_results = set()
            while results:
                result = results.pop()
                for j in range(i - removed + 1):
                    if result[j] == ")":
                        new_results.add(result[:j] + result[j + 1:])
            results = new_results
            removed += 1
        elif c in count:
                count[c] += 1
    count = {"(": 0, ")": 0}
    ll = len(s) - removed
    for i in reversed(range(ll)):
        c = s[i + removed]
        if c == "(" and count["("] == count[")"]:
            new_results = set()
            while results:
                result = results.pop()
                for j in range(i, ll):
                    if result[j] == "(":
                        new_results.add(result[:j] + result[j + 1:])
            results = new_results
            ll -= 1
        elif c in count:
                count[c] += 1
    return results


print(remove_invalid_parentheses("()())()") == {"(())()", "()()()"})
print(remove_invalid_parentheses("()())))()") == {"(())()", "()()()"})
print(remove_invalid_parentheses("(a)())()") == {"(a())()", "(a)()()"})
print(remove_invalid_parentheses(")(") == {""})
</code></pre>

<p>(I took this chance to add a new test case)</p>

<p><strong>More explicit loop again</strong></p>

<p>We want to iterate in reversed order over the beginning of the <code>s</code> string. Here again, we can try to make things more explicit and remove some computation as we go:</p>

<pre><code>    for i, c in enumerate(reversed(s[removed:])):
        if c == "(" and count["("] == count[")"]:
            new_results = set()
            while results:
                result = results.pop()
                for j in range(len(s) - i - removed - 1, ll):
                    if result[j] == "(":
                        new_results.add(result[:j] + result[j + 1:])
            results = new_results
            ll -= 1
        elif c in count:
                count[c] += 1
</code></pre>

<p>In order to test this more throughly, I took this chance to add the following test case:</p>

<pre><code>print(remove_invalid_parentheses("((((((((()(") == {"()"})
</code></pre>

<p><strong>More beautiful loops</strong></p>

<p>Instead of using a combination of <code>while</code> and <code>pop</code> to iterate over the elements of a set, you can just use <code>for</code>:</p>

<pre><code>        for result in results:
</code></pre>

<p><em>Work in progress: I have to go. I may continue in the future.</em></p>
    </div>