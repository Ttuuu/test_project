<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Handling files - the Python way</h2>

<p>Without being able to test run your code at the momemt, there is one thing I can already recommend to you, which is to make use of Python's powerful <a href="https://effbot.org/zone/python-with-statement.htm" rel="nofollow noreferrer"><code>with</code> statement</a>. Using <code>with</code> will make sure that files will be closed no matter what happens (e.g. unexpected exceptions). <code>with</code> also works with more than one file as described in this <a href="https://stackoverflow.com/a/4617069/5682996">SO post</a>.</p>

<p>Also consider adding the output filename as parameter to your function. You can even give your momentary value of <code>"output"</code> as default value.</p>

<hr>

<h2>Minor notes on style</h2>

<p>I'm not sure if you're aware of the official <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">Style Guide for Python</a>, often just called PEP8. The official recommendation is to use <code>snake_case</code> for variable and function names. This would create a more unified code appearance when working with other Python libraries which often stick to that convention. As always, <a href="https://www.qt.io/qt-for-python" rel="nofollow noreferrer">exceptions</a> apply.</p>

<hr>

<p>Below is your code including these changes.</p>

<pre class="lang-py prettyprint-override"><code>def make_key(password, salt):
    ...

def encrypt(password, input_filename, output_filename="output"):
    #creates the needed variables for encryption
    salt = secrets.token_bytes(16)
    key = make_key(password, salt)
    nonce = secrets.token_bytes(AES.block_size)
    cipher = AES.new(key, AES.MODE_GCM, nonce=nonce)
    # put the file size, salt and nonce in outputfile
    filesize = os.path.getsize(input_filename)
    with open(output_filename, "wb") as output_file,\
         open(input_filename, "rb") as input_file:
        output_file.write(struct.pack('&lt;Q', filesize))
        output_file.write(salt)
        output_file.write(nonce)
        #beginning of encryption itself
        chunkSize = 64 * 1024
        while True:
            chunk = input_file.read(chunkSize)
            if len(chunk) == 0:
                output_file.write(cipher.digest())
                break
            output_file.write(cipher.encrypt(chunk))
        print("File encrypted successfully!")
</code></pre>
    </div>