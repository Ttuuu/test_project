<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As @swerasnym said, it is clear from the test cases that only consecutive duplicates are to be removed. I provide my own solution, despite relying on the same core algorithm, because I think a more modern style is in order:</p>

<pre><code>std::string remove_duplicates(std::string s) {
    if (s.begin() == s.end()) return s;
    auto no_duplicates = s.begin(); 
    for (auto current = no_duplicates; current != s.end();) {
        current = std::find_if(std::next(current), s.end(), [no_duplicates](const char c) { return c != *no_duplicates; });
        *++no_duplicates = std::move(*current);;
    }
    s.erase(++no_duplicates, s.end());
    return s;
}
</code></pre>

<p>The differences might appear cosmetic at first, but there are some deeper aspects I'd like to point out:</p>

<ul>
<li><p>Using iterators clearly shows that the core algorithm doesn't rely on the string random-access property, meaning it can be safely generalized to other data structures, like lists.</p></li>
<li><p>I chose to move the duplicate <code>char</code>s, which obviously has no consequence at all. But in a more generic context, if you don't know on what type your algorithm will operate, and if your algorithm doesn't require to preserve the state of an item, prefer a move over a swap or a copy.</p></li>
<li><p>Using <code>std::find_if</code> over a simple by-one incrementation doesn't give you any performance benefit by itself but it states your intent more clearly. Moreover, when the parallel versions of the STL algorithms will become more widely available, you'll be able to make your code faster with a minor change: you'll just have to specify an execution policy.</p></li>
</ul>
    </div>