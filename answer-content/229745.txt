<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Although described as a Bash script, this appears to be a portable shell script that can be run by any POSIX-conformant shell.  That's a good thing, as it means we can use a much smaller, leaner shell such as Dash.</p>

<p>If you haven't yet installed <code>shellcheck</code>, I recommend you do so (there's also a web version you can try).  It highlights the following:</p>

<ul>
<li><p>Useless <code>cat</code> here:</p>

<blockquote>
<pre><code>bytez=$(cat "$(git rev-parse --show-toplevel)/$1" | wc -c)
</code></pre>
</blockquote>

<p>That can be simplified to</p>

<blockquote>
<pre><code>bytez=$(&lt;"$(git rev-parse --show-toplevel)/$1" wc -c)
</code></pre>
</blockquote></li>
<li><p>Unquoted expansion of <code>$1</code> - we really wanted to write <code>"$1"</code> there.</p></li>
<li>Unsafe <code>read x</code> ought to be <code>read -r x</code></li>
<li><code>$x</code> is unquoted</li>
</ul>

<p>Piping the file into <code>wc</code> isn't an efficient way to measure size of a file; we could simply use <code>stat</code>:</p>

<pre><code>bytez=$(stat -c %s "$(git rev-parse --show-toplevel)/$1")
</code></pre>

<p>And instead of running <code>git rev-parse</code> for every file in the changeset, run it once and remember the value in a variable.</p>

<p><del>The error message should go to the standard error stream</del> (I see the whole script is redirected to <code>&amp;2</code>)</p>

<p>It's not obvious why <code>set -e</code> is right down inside the <code>if</code> - I'd normally put that immediately after the shebang.</p>

<p>Consider also <code>set -u</code> to help detect a likely cause of errors.</p>

<p>Spelling: unless you really mean "1 millibit", that should be "1MB".</p>

<p>A suggestion that might fall into the "too cute" category: since <code>git config --bool</code> always produces <code>true</code> or <code>false</code> as output, we can simply execute that as a command:</p>

<pre><code>if ! $(git config --bool hooks.allowbigfiles)
then
</code></pre>

<p>Line-based reading (i.e. <code>git diff --name-only | while read</code>) isn't totally robust; there's a <code>-z</code> option provided to produce NUL-separated output.  This will require Bash, though, in order to <code>read -d</code>.</p>

<hr>

<h1>Improved code</h1>

<pre><code>#!/bin/bash

set -e

too_big() {
    if [ "$(stat -c %s "$toplevel/$1")" -gt 1000000 ] ; then
        cat &lt;&lt;EOF
Error: Attempting to commit a file larger than approximately 1MB.
Commiting large files slows jenkins builds, clones, and other
operations we would rather not slow down.
Consider generating, downloading, zipping, etc these files.
Offending file - $1
EOF
        exit 1
    fi
}

# If you want to allow large files to be committed set this variable to true.
allowbigfiles=$(git config --bool hooks.allowbigfiles)

# Redirect output to stderr.
exec &gt;&amp;2

if ! "$allowbigfiles"
then
    toplevel=$(git rev-parse --show-toplevel)
    git diff --name-only -z --cached "$1" | 
        while IFS= read -d '' -r x; do too_big "$x"; done
fi
</code></pre>
    </div>