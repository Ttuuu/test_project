<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I have a number of suggestions which might help you improve your program.</p>

<h2>Rethink the name</h2>

<p>The name <code>Logger</code> makes me think of creating a log which is a record of something that can be reviewed later.  However, that's not what this does.  It emits color coded messages to the console instead, so perhaps <code>Logger</code> is not the best term, since there isn't any record created.  Maybe <code>Tracer</code> would be a better name.</p>

<h2>Fix the bug</h2>

<p>There is an error in the constructor of <code>LoggerSettings</code>:</p>

<pre><code>print_level(should_print_color),
</code></pre>

<p>I'm betting that should be <code>should_print_level</code> as the intializer.</p>

<h2>Avoid function-like macros</h2>

<p>In modern C++, there is not much use any more for function-like <code>#define</code> macros.  They lack type checking and are prone to error, so I'd avoid using them.  In this particular case, they can't really work anyway since they don't allow for a way to specify a particular instance of the <code>Logger</code> class.  Bite the bullet and just use <code>__FILE__</code> and <code>__LINE__</code> explicitly as needed.  See <a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Res-macros2" rel="nofollow noreferrer">ES.31</a> for details.</p>

<h2>Use <code>const</code> where practical</h2>

<p>The <code>get_settings()</code> function doesn't and shouldn't alter the underlying <code>Logger</code> class instance, so it should be declared <code>const</code>.  One could make the same argument for the various log functions.</p>

<h2>Make sure you have all required <code>#include</code>s</h2>

<p>The code uses <code>std::string_view</code> but doesn't <code>#include &lt;string_view&gt;</code>.  It should.</p>

<h2>Use classes to better advantage</h2>

<p>If you defined a <code>Color</code> class, this code might be simplified by relegating color handling functions and data to just that one class.  Also, the <code>LoggerSettings</code> class seems rather pointless.  I'd just put those member variables directly into the <code>Logger</code> class.</p>

<h2>Don't Repeat Yourself (DRY)</h2>

<p>There is a separate function for each log level and a corresponding color function for each.  That is a lot of repeated code.  What I'd suggest is that you create a class within the <code>Logger.cpp</code> file something like this:</p>

<pre><code>struct LogLevelData {
    LogLevel level;
    std::string_view name;
    Color color;
    void log(bool print_color, bool print_level, bool print_file_and_line, const std::string_view message, const char* file, int line) const;
};

static constexpr LogLevelData logdata[5]{
    { LogLevel::Trace, "Trace", BackgroundColor::Black &amp; ForegroundColor::Intense_white },
    { LogLevel::Info, "Info", BackgroundColor::Black &amp; ForegroundColor::Intense_green},
    { LogLevel::Warn, "Warn", BackgroundColor::Black &amp; ForegroundColor::Intense_red},
    { LogLevel::Error, "Error", BackgroundColor::Black &amp; ForegroundColor::Intense_Cyan},
    { LogLevel::Fatal, "Fatal", BackgroundColor::Black &amp; ForegroundColor::Intense_magenta},
};
</code></pre>

<p>Now we can delegate most of the work and eliminate duplication:</p>

<pre><code>void Logger::log(const LogLevel level, const std::string_view message, const char* file, int line) {
    if (level &gt;= m_current_log_level) {
        logdata[static_cast&lt;int&gt;(level)].log(print_color, print_level, print_file_and_line, message, file, line);
    }
}
</code></pre>

<h2>Use include guards</h2>

<p>There should be an include guard in each <code>.h</code> file.  That is, start the file with:</p>

<pre><code>#ifndef LOGGER_H
#define LOGGER_H
// file contents go here
#endif // LOGGER_H
</code></pre>

<p>The use of <code>#pragma once</code> is a common extension, but it's not in the standard and thus represents at least a potential portability problem.  See <a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#sf8-use-include-guards-for-all-h-files" rel="nofollow noreferrer">SF.8</a></p>

<h2>Streamline the interface</h2>

<p>One way to rewrite your <code>Logger.hpp</code> file is like this:</p>

<pre><code>#ifndef LOGGER_H
#define LOGGER_H
#include &lt;string_view&gt;

namespace AGE
{
    enum class LogLevel
    {
        Trace,
        Info,
        Warn,
        Error,
        Fatal
    };

    class Logger
    {
    public:
        void set_log_level(const LogLevel level);
        void log(const LogLevel level, const std::string_view message, const char* file, int line);

    private:
        LogLevel m_current_log_level = LogLevel::Trace;
        bool print_level = true;
        bool print_file_and_line = true;
        bool print_color = true;
        bool print_time = true;
    };
}
#endif // LOGGER_H
</code></pre>

<p>Note that there is no longer any need for an explicit constructor, any macros, references to anything in <code>Windows.h</code> or the <code>LoggerSettings</code> class.  It's useful to try for a minimal but sufficient interface that hides as many of the implementation details as practical.</p>

<h2>Provide complete code to reviewers</h2>

<p>This is not so much a change to the code as a change in how you present it to other people.  Without the full context of the code and an example of how to use it, it takes more effort for other people to understand your code.  This affects not only code reviews, but also maintenance of the code in the future, by you or by others.  One good way to address that is by the use of comments.  Another good technique is to include test code showing how your code is intended to be used.  Here's the code I eventually used to exercise a rewrite of your class:</p>

<pre><code>#include "Logger.hpp"
int main() {
    AGE::Logger log;
    log.log(AGE::LogLevel::Trace, "The merest trace", __FILE__, __LINE__);
    log.log(AGE::LogLevel::Info, "Some information", __FILE__, __LINE__);
    log.log(AGE::LogLevel::Warn, "A warning", __FILE__, __LINE__);
    log.log(AGE::LogLevel::Error, "This is an error", __FILE__, __LINE__);
    log.log(AGE::LogLevel::Fatal, "Catastrophe!", __FILE__, __LINE__);
}
</code></pre>

<h2>Consider the user</h2>

<p>The colors actually used are, of course, up to you, but I'd suggest that using red for a warning and magenta for a fatal error is rather counterintuitive.  Red is traditionally used for the thing that means "stop" and in this case, I'd say that's probably a fatal error.</p>

<h2>Be consistent with capitalization</h2>

<p>Of the foreground color list, only <code>Intense_Cyan</code> has the second word capitalized.  It's a minor point but inconsistency in the interface is annoying to anyone who later uses this code.</p>
    </div>