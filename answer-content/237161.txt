<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Since you already have a nice implementation of a prime sieve, you should make use of it when checking for prime factors. Note that prime factors are needed, not all factors. I definitely would not use a recursive algorithm for this. It can fail with a stack limit and you need a lot of unreadable code just to set up the data structures.</p>

<p>I would use something simple like this:</p>

<pre><code>from math import sqrt

def prime_factors(n, primes=None):
    """(int) -&gt; iterable of ints

    Yields the prime factors of a number, excluding 1.
    Optionally takes an iterable of pre-computed prime numbers.
    """
    max_p = int(sqrt(n)) + 1
    if primes is None:
        primes = primes2(max_p)
    for p in primes:
        while n &gt; 1 and n % p == 0:
            n //= p
            yield p
        if n == 1 or p &gt;= max_p:
            break
    if n &gt; 1:
        yield n
</code></pre>

<p>The second part of the task can be done in multiple ways. You have chosen to just define a maximum value up to which to search, filter all numbers with the right number of prime factors and then search for an increasing sequence. This will take quite a bit of memory, potentially, depending on where the answer is.</p>

<p>An easier way is to only remember the last four numbers with the right number of prime factors using a <code>collections.deque</code> with a <code>maxlen=4</code>, and check if they are an increasing sequence:</p>

<pre><code>from itertools import count
from collections import deque

def diff(it):
    it = iter(it)
    x = next(it)
    for y in it:
        yield y - x
        x = y

def is_increasing_sequence(it):
    return all(d == 1 for d in diff(it))

if __name__ == "__main__":
    d = deque([], maxlen=4)
    for n in count(1):
        if len(set(prime_factors(n))) == 4:
            d.append(n)
            if len(d) == 4 and is_increasing_sequence(d):
                print(d[0])
                break
</code></pre>

<p>This can be sped up by re-introducing a maximum number to check and pre-computing the prime numbers for the prime number factorization:</p>

<pre><code>if __name__ == "__main__":
    max_n = 200000
    primes = primes2(max_n)
    d = deque([], maxlen=4)
    for n in range(1, max_n):
        if len(set(prime_factors(n, primes=primes))) == 4:
            d.append(n)
            if len(d) == 4 and is_increasing_sequence(d):
                print(d[0])
                break
</code></pre>

<p>This solves the problem in less than a second on my machine, which is similar to your code.</p>

<p>Note that I followed Python's official style-guide, <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP8</a>, which recommends <code>lower_case</code> for functions and variables and surrounded my code with an <a href="http://stackoverflow.com/questions/419163/what-does-if-name-main-do"><code>if __name__ == "__main__":</code> guard</a> to allow importing from this script without running the code. This is especially important for Project Euler, as you will need e.g. the prime sieve and the prime number factorization again in other problems.</p>
    </div>