<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The thing that jumps out when reading this is the use of indexers: a snippet like this:</p>

<pre><code> if board[pieces_positions[i][0]][pieces_positions[i][1]-1] == 0:
    if [pieces_positions[i][0],pieces_positions[i][1]] in unusable_pieces:
        index_value = unusable_pieces.index([pieces_positions[i][0],pieces_positions[i][1]])
        unusable_pieces[index_value][1] -= 1
</code></pre>

<p>is extremely hard to read (and hence to debug) because of the onslaught of brackets (as an informal rule of thumb, if the code scrolls off to the right in a StackOverflow code window, that's a sign you should see how to tighten it up).</p>

<p>You could eliminate a lot of that by using python's built-in unpacking syntax.  Since <code>pieces_positions</code> is a list-of-lists, you can tame it by looping over it like this:</p>

<pre><code> for y, x in pieces_positions: 
     #.....
</code></pre>

<p>Now hard to read stuff like</p>

<pre><code>  board[pieces_positions[i][0]][pieces_positions[i][1]-1]
</code></pre>

<p>becomes </p>

<pre><code>  board[y][x-1]
</code></pre>

<p>with that change your four main functions look more readable:</p>

<pre><code>def move_right(board):
    not_right = True
    unusable_pieces = []
    while not_right:
        not_right = False
        pieces_positions = find_non_zeros(board)
        pieces_positions = pieces_positions[::-1]
        #pieces_positions = [[piece1_y, piece1_x],[piece2_y, piece2_x]...]
        for y, x in pieces_positions:
            if x != 3:
                if board[y][x+1] == 0:
                    if [y,x] in unusable_pieces:
                        index_value = unusable_pieces.index([y,x])
                        unusable_pieces[index_value][1] += 1
                    value = board[y][x]
                    board[y][x+1] = value
                    board[y][x] = 0
                    not_right = True
                elif board[y][x+1] == board[y][x]:
                    if [y,x] not in unusable_pieces:
                        if [y, x+1] not in unusable_pieces:
                            value = board[y][x]
                            combine_numbers(board, value, y, x+1, y, x)
                            unusable_pieces.append([y, x+1])
                            not_right = True

    return board
</code></pre>

<p>However, the four main functions are all basically symmetrical --  they only differ in the direction of movement and the limit condition.  It'd be cleaner and easier to debug if you could get them down to a single function that was used everywhere.</p>

<p>In this case, you can express the movement more clearly by treating it as a pair of offsets added to your x and y values -- say, a single <code>move(board, offset_x, offset_y)</code> function instead of the four you currently have. Then you can generalize the boundaries in something like this fashion:</p>

<pre><code>for y, x in pieces_positions:

    next_y = y + offset_y
    next_x = x + offset_x

    # python has a nice chained comparison that 
    # is great for checking a range
    valid_x = -1 &lt; next_x &lt; 4
    valid_y = -1 &lt; next_y &lt; 4

    if not (valid_x and valid_y):
        continue
</code></pre>

<p>This has the added advantage of making the actual changes to the board clearer too:</p>

<pre><code>if board[next_y][next_x] == 0:
    if [y,x] in unusable_pieces:
        index_value = unusable_pieces.index([y,x])
        if offset_y = 0:   # this means an x-move
            unusable_pieces[index_value][1] += offset_x
        else:   # a y move
            unusable_pieces[index_value][0] += offset_y

    value = board[y][x]
    board[next_y][next_x] = value
    board[y][x] = 0
</code></pre>

<p>Working through the unpacked values instead of <code>range()</code> and a single general function instead of four functions that vary only on a couple of number placements will make the game a lot easier to read and thus to debug and maintain.</p>
    </div>