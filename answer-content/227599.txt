<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There's a much shorter way to express the same functionality, but I'm not sure you'll immediately find it to be clearer.</p>

<pre><code>import Data.List (intercalate)
import Data.List.Split (splitOn)
import Text.Pandoc.JSON

main :: IO ()
main = toJSONFilter smile

smile :: Inline -&gt; Inline
smile (Str s) = Str . intercalate "â˜º" . splitOn ":-)" $ s
smile x = x
</code></pre>

<p>I think the insight you missed is that the <code>Block</code> constructor <code>CodeBlock</code> contains no <code>Inline</code>s, so you can trust the <code>Walkable</code> typeclass machinery to ignore them if your smiley making code <em>only</em> works on <code>Inline</code>s. That eliminates the entire <code>applyExceptOnCodeBlock</code> function.</p>

<p>Similarly it isn't necessary to include a case for <code>Inline</code>'s <code>Code</code> constructor, constructors like <code>Code</code> and <code>Math</code> contain their own raw strings and are safely ignored. Pandoc's datatypes are already structured to divide prose text from markup making it easy to define transformations by only matching on the things you <em>do</em> want to modify.</p>
    </div>