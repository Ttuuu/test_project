<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In addition to Winston Ewert's comments, I'd add:</p>

<ol>
<li><p>There's no docstring. How are users to know how what this function does and how to call it?</p></li>
<li><p>This is an ideal function to give a couple of <a href="http://docs.python.org/2/library/doctest.html" rel="noreferrer">doctests</a> to show how to use it and to test that it works.</p></li>
<li><p>The name <code>remove_overlap</code> could be improved. Remove overlap from what? And remove it how? And anyway, you don't just want to merge <em>overlapping</em> ranges (like 1–3 and 2–4), you want to merge <em>adjacent</em> ranges too (like 1–2 and 2–3). So I'd use <code>merge_ranges</code>.</p></li>
<li><p>It's simpler and more flexible to implement the function as a generator, rather than repeatedly appending to a list. </p></li>
<li><p>Winston's implementation doesn't work if any of the ranges are negative.</p></li>
</ol>

<p>So I would write:</p>

<pre><code>def merge_ranges(ranges):
    """
    Merge overlapping and adjacent ranges and yield the merged ranges
    in order. The argument must be an iterable of pairs (start, stop).

    &gt;&gt;&gt; list(merge_ranges([(5,7), (3,5), (-1,3)]))
    [(-1, 7)]
    &gt;&gt;&gt; list(merge_ranges([(5,6), (3,4), (1,2)]))
    [(1, 2), (3, 4), (5, 6)]
    &gt;&gt;&gt; list(merge_ranges([]))
    []
    """
    ranges = iter(sorted(ranges))
    current_start, current_stop = next(ranges)
    for start, stop in ranges:
        if start &gt; current_stop:
            # Gap between segments: output current segment and start a new one.
            yield current_start, current_stop
            current_start, current_stop = start, stop
        else:
            # Segments adjacent or overlapping: merge.
            current_stop = max(current_stop, stop)
    yield current_start, current_stop
</code></pre>

<h3>Update</h3>

<p>Winston Ewert notes in comments that it's not exactly obvious how this works in the case when <code>ranges</code> is the empty list: in particular, the call <code>next(ranges)</code> looks suspicious.</p>

<p>The explanation is that when <code>ranges</code> is empty, <code>next(ranges)</code> raises the exception <code>StopIteration</code>. And that's exactly what we want, because we are writing a generator function and raising <code>StopIteration</code> is one of the ways that a generator can signal that it is finished.</p>

<p>This is a common pattern when building one iterator from another: the outer iterator keeps reading elements from the inner iterator, relying on the inner iterator to raise <code>StopIteration</code> when it is empty. Several of the recipes in the <a href="http://docs.python.org/2/library/itertools.html" rel="noreferrer"><code>itertools</code> documentation</a> use this pattern, for example <a href="http://docs.python.org/2/library/itertools.html#itertools.imap" rel="noreferrer"><code>imap</code></a> and <a href="http://docs.python.org/2/library/itertools.html#itertools.islice" rel="noreferrer"><code>islice</code></a>.</p>

<p>Supposing that you think this is a bit ugly, and you wanted to make the behaviour explicit, what would you write? Well, you'd end up writing something like this:</p>

<pre><code>try:
    current_start, current_stop = next(ranges)
except StopIteration:     # ranges is empty
    raise StopIteration   # and so are we
</code></pre>

<p>I hope you can see now why I didn't write it like that! I prefer to follow the maxim, "<a href="http://drj11.wordpress.com/2008/10/02/c-return-and-parentheses/" rel="noreferrer">program as if you know the language</a>."</p>

<h3>Update 2</h3>

<p>The idiom of deferring from one generator to another via <code>next</code> will no longer work in Python 3.6 (see <a href="http://legacy.python.org/dev/peps/pep-0479/" rel="noreferrer">PEP 479</a>), so for future compatibility the code needs to read:</p>

<pre><code>try:
    current_start, current_stop = next(ranges)
except StopIteration:
    return
</code></pre>
    </div>