<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The code is not optimal. Furthermore, it breaks the <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" rel="nofollow noreferrer">single responsibility principle</a> since the method can be broken down to smaller, tighter pieces. For example, the for loop can and should be put in its own method. what this will give you? consider what if in the future you decide to change the folder hierarchy (perhaps add new folder layer or put some files in the root folder etc). what you need is a separate method that can travel along folder tree of any depth and gather the files (perhaps using recurssion?) </p>

<p>Regarding performance:</p>

<ol>
<li><p>You call <code>propertyService.getProperties().get("folderLocation")</code> every time the method is called. However, it looks to me like this value is not changed with every call. </p></li>
<li><p><code>String.format</code> is an expensive call since the format is parsed for tokens. Replace that with simple concatanation. and use forward slash - it works for *nix AND Windows systems (the JVM handles it)</p></li>
<li><p>You are using pre-java-7 IO library. Java 7 introduced a new, simpler, better, safer, faster library: <a href="https://docs.oracle.com/javase/tutorial/essential/io/fileio.html" rel="nofollow noreferrer">java.nio</a>. use it. </p></li>
<li><p>Each time the method is called, you scan the file system. Depending on the total size of the PDF library - you may consider loading the whole structure into memory. the java.nio has utilities that can alert your program when changes ocur in the file system (like new file or deleted file etc) so you can keep your in-memory tree in sync with the actual file system.</p></li>
<li><p>If pre-loading the file system structure is not an option, consider implementing a cache system where you store previous method calls (store an input and its output) and then you can return output for previouisly called input. You will need a cache system like LRU map. There are readily available 3rd party libraries for that. </p></li>
</ol>
    </div>