<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Not sure you ceaser cipher is working as expected:</p>

<pre><code>return ch == 'z' || ch == 'Z' ? ch - 25 : ch + shift;
</code></pre>

<p>There is a special case for <code>z</code> or <code>Z</code>. This is not symmetric so decoding an encoded 'Z' or 'z' will fail. Also letters can be encoded as punctuation (which is why your <code>encode()</code> does not even try to enocde punctuation.  I would fix this so that letters are encoded as letters (everything else is unencoded).</p>

<p>I would change your encoding to:</p>

<pre><code>// int min:   Pass 'a' for std::islower() and 'A' for std::isupper()
// int dir:   Pass 1 for encode and -1 for decode.
char code(char ch, int shift, char dir, int min)
{
    return (ch + min + (dir * shift) % 26) + min;
}
</code></pre>

<p>Now that letters are encoced into other letters only (and don't splash out in into the punctuation range). We can simplify the shift function. It will handle letters and all other characters are left unencoded.</p>

<pre><code>char shiftF(char ch, int shift, char dir)
{
    if (std::isalpha(ch) &amp;&amp; std::islower(ch)) {
        return code(ch, shift, dir, 'a');
    }
    else if (std::isalpha(ch) &amp;&amp; std::isupper(ch)) {
        return code(ch, shift, dir, 'A');
    }
    return ch;
}
</code></pre>

<p>As the shift now handles all letters correctly we don't need to any real work in the encode. But to make it safer and stop a sensitive string from being leaked around memory lets us change it to update the string in place.</p>

<pre><code>void encode(std::string&amp; str, int shift, char dir)
{
    for (auto&amp; ch : str) {
        ch = shiftF(ch, shift, dir);
    }
}
</code></pre>
    </div>