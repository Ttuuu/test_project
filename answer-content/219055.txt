<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The code is rather clear, so consider the following to be nitpicks.</p>

<hr>

<p>I'd say that you are generating a new <em>key stream</em> from the key. I'd certainly not reuse the <code>key</code> variable.</p>

<hr>

<p>The first <code>i = 0</code> before the loop seems spurious.</p>

<p>Using <code>i</code> as a counter is well understood, and I'd not worry overly much on the style of it. You are probably the only one who cares if it is really Ruby-esk; developers down the line will understand it.</p>

<p>What I wonder though is that you run your loop <code>length</code> times, but there is a <code>break</code> that seems to trigger before that. That's not all too clear to me.</p>

<p>I wonder what happens if you supply it an "empty" key string. Some guard statements may be in order.</p>

<hr>

<p>Same for the curly braces. It's clear as it is, choose whatever you want. Personally I slightly favor the braces.</p>

<hr>

<p>You could consider creating a <code>mod</code> function, however since <code>%</code> is already the modulus, which will never return a negative value if the right value is positive, it seems to me that removing the <code>+ 26</code> is probably the only thing you need to change (during decryption).</p>

<p>Instead of using 26 as unexplained magic value, you should get the size of the <code>LETTERS</code> range instead. That way you can also expand your ciphertext later.</p>

<hr>

<p>I've got no opinion on the <code>private_class_method</code> as I'm not a Ruby developer (I'm specialized in knowing many languages / constructs and of course applied crypto).</p>
    </div>