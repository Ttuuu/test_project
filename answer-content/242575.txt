<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I would argue that <em>neither</em> version is readable enough. <a href="https://sites.google.com/site/unclebobconsultingllc/one-thing-extract-till-you-drop" rel="nofollow noreferrer">Extract 'til you drop</a>. I would say in the grand scheme of things, you should wind up with very small bits of code that do atomic tests and almost reads like natural language when you're done. One possible example (I've created fake types to complete the parameters to the methods):</p>

<pre><code>    private static StatusCode CheckAccount(Account account, Item item, Message message, string UID)
    {
        const int HttpForbidden = 403;

        if (!ValidAccount(account))
        {
            return StatusCode(HttpForbidden);
        }

        if (!HasProperAuthorizations(account))
        {
            return StatusCode(HttpForbidden);
        }

        if (!TopicNameMatches(account, item) &amp;&amp; !IsCurrentUser(message, UID))
        {
            return StatusCode(HttpForbidden);
        }

        // other stuff ?
    }

    private static bool ValidAccount(Account account) =&gt; account != null;

    private static bool HasProperAuthorizations(Account account) =&gt; account.Authorizations.Any(x =&gt;
        x.Role.Name == RoleNames.ADMIN ||
        x.Role.Name == RoleNames.SENDER ||
        x.Role.Name == RoleNames.SENDERSADMIN);

    private static bool TopicNameMatches(Account account, Item item) =&gt; account.Authorizations.Any(x =&gt; string.Equals(
        x.TopicFilter.Name,
        item.Topic.Name,
        StringComparison.InvariantCultureIgnoreCase);

    private static bool IsCurrentUser(Message message, string UID) =&gt; string.Equals(
        message.Author.Username,
        UID,
        StringComparison.InvariantCultureIgnoreCase);

    private static StatusCode StatusCode(int statusCode) =&gt; new StatusCode(statusCode);
</code></pre>
    </div>