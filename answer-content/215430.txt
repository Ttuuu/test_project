<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2><code>class</code> syntax</h2>
<p>In JS <code>class</code> is a syntax for creating objects. It is not an independent distinct entity. Class creates an object adding a <code>constructor</code> function and assigning functions and (optionally) properties to the associated prototype. It does not provide any features not available using standard syntax.</p>
<p>The 'class` syntax does suffer from one serious flaw (that in my book makes it unusable). It lacks a mechanism to create private functions and properties. Objects created via the class syntax can not adequately encapsulate an objects state, an essential requirement of OO design.</p>
<h2>Modules</h2>
<p>In modern JS module, modules, modular, etc... refers to code that is import/export able.</p>
<p>Modules provide a local and isolated scope (state) that does provide some encapsulation for single instance objects created with the <code>class</code> syntax. The same can be achieved with the IIS style and <code>class</code> syntax.</p>
<h2>Objects</h2>
<p>Your code is a IIF, or IIFE meaning Immediately Invoked Function Expression <code>const obj=(() =&gt; ({foo: "bar", log() {console.log(this.foo)}}))()</code> It provides the best encapsulation mechanism for single instance objects (such as your example)</p>
<p>A variation is an object factory  <code>function obj() { return {foo: "bar", log() {console.log(this.foo)}} }</code> best suited to long lived multi instance objects.</p>
<p>For performance and many (100 to 1000+) instances of short lived objects, the prototype model is best suited. <code>function Obj() { this.foo = "bar" }; Obj.prototype = { log() {console.log(this.foo)}};</code> However the encapsulation model is not as strong.</p>
<p>Modern JS engines cache compiled code, thus you can define the prototype inside the function with only a minor memory penalty (prototyped properties and functions each need a reference per object) This lets you use closure to encapsulate state and still provide prototypal inheritance. However I would argue that in JS polymorphisum is the preferred method of extension for JS objects (though not everyone would agree).</p>
<p>There are many more ways to define and instanciate objects. Which you use is defined by how the object is to be used, and what your preferred style is.</p>
<h2>Reviewing your code</h2>
<ul>
<li><p>The mouse event provides delta mouse position in <code>MouseEvent.movementX</code> and <code>MouseEvent.movementY</code> so you don't need to function <code>getMovement</code></p>
</li>
<li><p>You should not expose the mouse events for <code>Square</code>. Have <code>Square.create</code> add the events if needed.</p>
</li>
<li><p>You can simplify the resize and move logic by treating the corners as part of a side (top, bottom, left, and right) then you move only a side, left or right, top or bottom. Using a bitfield to define corners you can then specify which sides to move for each corner. (see example)</p>
</li>
<li><p>It is best not to add markup to the page. Use the DOM API to manipulate the DOM. I find the API somewhat awkward so use some helper functions to improve readability and reduce code noise. (see example <code>/* DOM helpers */</code>)</p>
</li>
<li><p>Rather than inspecting the DOM element to get its position and size, assign your <code>focusElement</code> to each size-able element as you create it. Use a <code>Map</code> to make the association. You can then just get that object using the element as key on mouse down (see example) Note that I assume your example is self contained and that there is no manipulation of relevant elements outside the <code>Square</code> object</p>
</li>
<li><p>You update the DOM elements position in two places. Use a single function to update the position (and size) of the element.</p>
</li>
<li><p>To reduce code complexity use the <code>MouseEvent.type</code> property to determine the event type and handle all similar mouse events in one function.</p>
</li>
<li><p>Mouse events are out of sync with the display refresh. For the cleanest updates you should be using <code>requestAnimationFrame</code> to update elements. <code>requestAnimationFrame</code> ensures that backbuffers associated with elements that are rendered from within the callback are only presented during the displays vertical sync.</p>
</li>
</ul>
<h2>Example</h2>
<p>Uses same IIF style to encapsulate the object (renamed <code>Squares</code> as it can represent many)</p>
<p>Removed the 3 exposed <code>onMouse...</code> functions.</p>
<p>The aim was to reduce source size and improve efficiency.</p>
<p>Creates a <code>boxDesc</code> for each box mapped to the element, rather than updating the one <code>focusElement</code> object.</p>
<p>I did not include the use of <code>requestAnimationFrame</code></p>
<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>   const Squares = (() =&gt; {
    /* Privates */
    var addMouseEvents = true, focus;            
    const boxMap = new Map();
    const corners = { // bit fields 
        none: 0,   // 0b0000
        top: 1,    // 0b0001
        bottom: 2, // 0b0010
        left: 4,   // 0b0100
        right: 8,  // 0b1000
    };
    const MIN_SIZE = 50;
    const HANDLE_SIZE = 8; // adds 2 px

    /* DOM helpers */
    const tag = (name, props ={}) =&gt; Object.assign(document.createElement(name), props);
    const elStyle = (el, style) =&gt; (Object.assign(el.style, style), el);
    const elData = (el, data) =&gt; (Object.assign(el.dataset, data), el);
    const append = (par, ...sibs) =&gt; {
        for(const sib of sibs) { par.appendChild(sib) }
        return par;
    };

    const boxDesc = (DOM, width, height, x, y) =&gt; ({ DOM, width, height, x, y });
    function update(box) {
        box.width = box.width &lt; MIN_SIZE ? MIN_SIZE : box.width;
        box.height = box.height &lt; MIN_SIZE ? MIN_SIZE : box.height;
        const right = innerWidth - (box.width + HANDLE_SIZE);
        const bot = innerHeight - (box.height + HANDLE_SIZE);
        box.x = box.x &lt; HANDLE_SIZE ? HANDLE_SIZE : box.x &gt; right ? right : box.x;
        box.y = box.y &lt; HANDLE_SIZE ? HANDLE_SIZE : box.y &gt; bot ? bot : box.y;
        elStyle(box.DOM, {
            transform: `translate(${box.x}px, ${box.y}px)`,
            width: box.width + "px",
            height: box.height + "px",
        });
        return box;
    }
    function move(box, dx, dy) {
        const bot = innerHeight - HANDLE_SIZE;
        const right = innerWidth - HANDLE_SIZE;
        if (box.action === corners.none) {
            box.x += dx;
            box.y += dy;
        } else {
            if ((box.action &amp; corners.bottom) === corners.bottom) { 
                box.height = box.y + box.height + dy &gt; bot ? bot - box.y : box.height + dy;
            } else {
                if (box.height - dy &lt; MIN_SIZE) { dy = box.height - MIN_SIZE }
                if (box.y + dy &lt; HANDLE_SIZE) { dy = HANDLE_SIZE - box.y }
                box.y += dy;
                box.height -= dy;
            }
            if ((box.action &amp; corners.right) === corners.right) { 
                box.width = box.x + box.width + dx &gt; right ? right - box.x : box.width + dx;
            } else {
                if (box.width - dx &lt; MIN_SIZE) { dx = box.width - MIN_SIZE }
                if (box.x + dx &lt; HANDLE_SIZE) { dx = HANDLE_SIZE - box.x }
                box.x += dx;
                box.width -= dx;
            }
        }
        update(box);
    }
    function mouseEvent(e) {
        if(e.type === "mousedown") {
            if (e.target.dataset &amp;&amp; e.target.dataset.userAction) {
                focus = boxMap.get(e.target.parentNode);
                focus.action = Number(e.target.dataset.userAction);
            }
        }else if(e.type === "mouseup") { focus = undefined }
        else {
            if (e.buttons === 0) { focus = undefined } // to stop sticky button in snippet
            if (focus) { move(focus, e.movementX,  e.movementY) }
        }
    }
    function mouseEvents() {
        document.addEventListener('mousedown', mouseEvent);
        document.addEventListener('mouseup', mouseEvent);
        document.addEventListener('mousemove', mouseEvent);                    
        addMouseEvents = false;                
    }
    return {
        create(x, y, width, height) {
            const box = append( 
                elStyle(tag("div"), { position: "absolute" }),
                elData(tag("div", {className : "plate"}), {userAction : corners.none}),
                elData(tag("span", {className : "edge lt"}), {userAction : corners.top + corners.left}),
                elData(tag("span", {className : "edge rt"}), {userAction : corners.top + corners.right}),
                elData(tag("span", {className : "edge lb"}), {userAction : corners.bottom + corners.left}),
                elData(tag("span", {className : "edge rb"}), {userAction : corners.bottom + corners.right})
            );
            boxMap.set(box, update(boxDesc(box, width, height, x, y))); // update() sizes and positions elements
            append(document.body, box);
            if (addMouseEvents) { mouseEvents() }
        }
    };

})();

document.addEventListener('DOMContentLoaded', function() {
    Squares.create(10, 100, 80, 80);
    Squares.create(110, 100, 80, 80);
    Squares.create(210, 100, 80, 80);
    Squares.create(310, 100, 80, 80);
    Squares.create(410, 100, 80, 80);
});</code></pre>
<pre class="snippet-code-css lang-css prettyprint-override"><code>* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  user-select: none;    
  -moz-user-select: none;    
}
.plate {
  position: absolute;
  width: 100%;
  height: 100%;
  background: rgb(240, 240, 240);
  cursor: move;
}
.plate:hover {
  background: #DEE;
}
.edge {
  position: absolute;
  width: 12px;
  height: 12px;
  border-radius: 6px;
  background: rgb(211, 211, 211);
}
.edge:hover {
  background: #CDD;
}
.edge.lt {
  top: -6px;
  left: -6px;
  cursor: nwse-resize;
}
.edge.rt {
  top: -6px;
  right: -6px;
  cursor: nesw-resize;
}
.edge.lb {
  bottom: -6px;
  left: -6px;
  cursor: nesw-resize;
}
.edge.rb {
  bottom: -6px;
  right: -6px;
  cursor: nwse-resize;
}</code></pre>
</div>
</div>

    </div>