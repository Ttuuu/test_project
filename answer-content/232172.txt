<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>String as formats</h2>

<p>Code uses <code>printf(howManySides);</code> yet <code>howManySides</code> is not described as a <em>format</em>.  Such practice can lead to trouble when the string contains a <code>%</code>.  Do not use a string as a <em>format</em> unless it is clearly stated in its definition that it is a <em>format</em>.</p>

<pre><code>// printf(howManySides);
fputs(howManySides, stdout);
</code></pre>

<h2>Ensure output before input</h2>

<p><code>stdout</code> may be byte, line, or fully buffered.   Insure output is seen before requesting user input.  Often printing a <code>'\n'</code> is sufficient - except that the code here does not have that in the prompts.  <code>fflush(stdout)</code> always works.</p>

<pre><code>printf(howManySides);
fflush(stdout); // add
if(scanf("%i", &amp;userInput) &lt; 1) {
</code></pre>

<h2>Avoid undefined behavior</h2>

<p>See why not to use <a href="https://stackoverflow.com/questions/2979209/using-fflushstdin"><code>fflush(stdin)</code></a>.</p>

<p>Tip: ditch <code>scanf()</code>; use <code>fgets()</code> for robust error handing.</p>

<h2>Infinite loop</h2>

<p>Should <code>scanf("%i", &amp;userInput) &lt; 1)</code> return <code>EOF</code> due to end-of-file, code loops infinitely.  Instead, when the return is <code>EOF</code>, consider ending the program or at least get out of the loop.</p>

<h2>Avoid magic numbers</h2>

<p>Rather than hard code <code>3, 12</code> and their effects in various places in code, create constants.</p>

<pre><code>#define POLY_MIN 3
#define POLY_N   (sizeof names/sizeof names[0])
#define POLY_MAX (POLY_N + POLY_MIN - 1)

// if(numSides &lt;= 12) {
//  name = names[numSides - 3];
if(numSides &lt;= POLY_MAX) {
  name = names[numSides - POLY_MIN];
</code></pre>

<h2>Avoid naked equations</h2>

<p>Sure <code>180 * (numSides - 2)</code> is grade school math, yet often a reference is useful.</p>

<pre><code>// en.wikipedia.org/wiki/Internal_and_external_angles#Properties
return 180 * (numSides - 2);
</code></pre>

<hr>

<h1>Minor stuff</h1>

<h2>Curious type selection</h2>

<p>Unclear why <code>getSumInteriorAngles()</code> uses <code>unsigned</code>.  Function is only used once and it is called with <code>int</code></p>

<pre><code>// static int getSumInteriorAngles(const unsigned int numSides)
static int getSumInteriorAngles(const int numSides)
</code></pre>

<h2>Sometimes <code>const</code>, sometimes not</h2>

<p>Some functions declare parameters as <code>const</code> and others do not, even though the parameter is not modified in both.  Hmmm.  IAC, I see it more as clutter than useful.  As with such style issues, code to your group's coding standard.</p>

<h2><code>do</code> loop candidate</h2>

<pre><code>bool isValidResponse = false;
while(!isValidResponse) {
  ...
}
</code></pre>
    </div>