<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>So there is already a lot mentioned by the other ones, but i would like to focus on your algorithm, which quite frankly is badly suited for that problem.</p>

<p>What you are doing is sorting the two strings and comparing every individual position afterwards. However, as the problem states, the only thing you need is the histogram of the words.</p>

<p><code>both strings must contain the same exact letters in the same exact frequency</code></p>

<p>So what you actually need to do is simply counting the occurrences of every letter without any sorting necessary. That is best served by a <code>std::map&lt;char, int&gt;</code>, where you insert the characters and increase their count.</p>

<pre><code>std::map&lt;char, int&gt; createHistogram(const std::string &amp;word)
    std::map&lt;char, int&gt; histogram;
    for (auto &amp;character : word) {
        if (histogram.find(character) == histogram.end()) {
            histogram.insert(std::make_pair(character, 1);
        } else {
            histogram[character]++;
        }
    }
    return histogram;
}
</code></pre>

<p>Now that you have the two histograms you can walk through them and count the difference in the frequency of the characters.</p>

<pre><code>size_t compareFrequencies(std::map&lt;char, int&gt; &amp;hist1, std::map&lt;char, int&gt; &amp;hist2) {
    size_t result = 0;
    for (auto it = hist1.begin(); it != hist1.end(); ++it) {
        if (hist2.find(it-&gt;first) == hist2.end()) {
            result += it-&gt;second;
        } else {
            result += std::abs(it-&gt;second - hist2[it-first]);
            hist2.erase(it-first);
        }
    }
    /* We know all remaining characters are unique to word2 */
    for (auto it = hist1.begin(); it != hist1.end(); ++it) {
        result += it-&gt;second;
    }
    return result;
}
</code></pre>

<p>Now you can combine these two and get</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;map&gt;
#include &lt;cmath&gt;
#include &lt;string&gt;
#include &lt;utility&gt;

std::map&lt;char, int&gt; createHistogram(const std::string &amp;word)
    std::map&lt;char, int&gt; histogram;
    for (auto &amp;character : word) {
        if (histogram.find(character) == histogram.end()) {
            histogram.insert(std::make_pair(character, 1);
        } else {
            histogram[character]++;
        }
    }
    return histogram;
}    

size_t compareFrequencies(std::map&lt;char, int&gt; &amp;hist1, std::map&lt;char, int&gt; &amp;hist2) {
    size_t result = 0;
    for (auto it = hist1.begin(); it != hist1.end(); ++it) {
        if (hist2.find(it-&gt;first) == hist2.end()) {
            result += it-&gt;second;
        } else {
            result += std::abs(it-&gt;second - hist2[it-first]);
            hist2.erase(it-first);
        }
    }
    /* We know all remaining characters are unique to word2 */
    for (auto it = hist1.begin(); it != hist1.end(); ++it) {
        result += it-&gt;second;
    }
    return result;
}

int main() {
    std::string word1, word2;
    std::cin &gt;&gt; word1 &gt;&gt; word2;

    std::map&lt;char, int&gt; hist1 = createHistogram(word1);
    std::map&lt;char, int&gt; hist2 = createHistogram(word2);

    std::cout &lt;&lt; compareFrequencies(hist1, hist2);
}
</code></pre>
    </div>