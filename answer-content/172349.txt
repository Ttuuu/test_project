<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Redundant fields</h3>

<blockquote>
<pre><code>private final int width;
private final int length;
</code></pre>
</blockquote>

<p>You do not need these.  </p>

<blockquote>
<pre><code>    this.width = width;
    this.length = length;
</code></pre>
</blockquote>

<p>Nor here.  </p>

<blockquote>
<pre><code>public int getWidth() {
    return width;
}

public int getLength() {
    return length;
}
</code></pre>
</blockquote>

<p>These could be </p>

<pre><code>public int getWidth() {
    return board[0].length;
}

public int getLength() {
    return board.length;
}
</code></pre>

<p>Now you're guaranteed consistency with the <code>board</code>.  </p>

<blockquote>
<pre><code>        for (int i = 0; i &lt; length; i++) {
            for (int j = 0; j &lt; width; j++) {
</code></pre>
</blockquote>

<p>can become </p>

<pre><code>        for (int i = 0; i &lt; board.length; i++) {
            for (int j = 0; j &lt; board[i].length; j++) {
</code></pre>

<p>Again, this ensures that you never overshoot the <code>board</code> dimensions.  </p>

<h3><code>hashCode</code>/<code>equals</code></h3>

<blockquote>
<pre><code>// I am not sure if I am overriding these correctly (hashCode(),equals())

@Override
public int hashCode() {
    return width * length * numOfMines + 13;
}

@Override
public boolean equals(Object obj) {
    Board boardObj = (Board) obj;
    return Arrays.deepEquals(boardObj.getBoard(), board);
}
</code></pre>
</blockquote>

<p>These are not consistent with each other.  The rule of thumb is that if two objects are equal, then the <code>hashCode</code> values for both should be equal.  If the <code>hashCode</code> values are equal, then the objects should usually be equal.  </p>

<p>Example source:  <a href="https://stackoverflow.com/q/113511/6660678">Best implementation for hashCode method</a></p>

<p>Simplest implementation if you are using Java 5 or newer:  </p>

<pre><code>public int hashCode() {
    return Arrays.deepHashCode(board);
}
</code></pre>

<p>This makes the two methods consistent.  Both are based on the values of <code>board</code>.  </p>

<p>But what if <code>obj</code> in <code>equals</code> is not a <code>Board</code>?  </p>

<pre><code>public boolean equals(Object obj) {
    // if obj is the same object as this, no need to process more
    if (obj == this) {
        return true;
    }

    // if obj is null, then it can't equal this
    // if obj is a different class than this, then they can't be equal
    if (obj == null || obj.getClass() != getClass()) {
        return false;
    }

    Board boardObj = (Board) obj;
    return Arrays.deepEquals(boardObj.getBoard(), board);
}
</code></pre>

<p>No need to waste time if we're talking about the same object, not just two potentially equivalent objects.  </p>

<p>Now we won't have any exceptions because someone tried to check equality of a <code>Board</code> with a <code>Cell</code>.  </p>

<p>Example source:  <a href="https://stackoverflow.com/q/8180430/6660678">How to override equals method in java</a></p>

<p>Note that that source offers some more complex examples.  For example, it handles the case where you might have some other class extend <code>Board</code>.  I didn't do that here, as your current example doesn't need it.  </p>

<blockquote>
<pre><code>public int hashCode() {
    return xPos * yPos * symbol.hashCode() * value.hashCode() * 29 + 6;
}
</code></pre>
</blockquote>

<p>So if you're using Java 7 or newer, you can say </p>

<pre><code>public int hashCode() {
    return Objects.hash(yPos, xPos, isMine, value);
}
</code></pre>

<p>Now it will be consistent with your <code>equals</code> implementation (which has the same issues as the one for <code>Board</code>, which I won't repeat).  </p>

<p>If compiling against an older Java, you could do a custom implementation like </p>

<pre><code>public int hashCode() {
    int result = 6;

    result = 29 * result + yPos;
    result = 29 * result + xPos;
    result = 29 * result + (isMine ? 0 : 1);
    result = 29 * result + ((value == null) ? 0 : value.hashCode());

    return result;
}
</code></pre>

<p>Again, note that this uses the same fields as the <code>equals</code> method.  </p>
    </div>