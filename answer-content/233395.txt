<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As other answers have said, use swap to get assignment correct, and don't close already-closed descriptors.</p>
<p>Some minor style nitpicks to add:</p>
<ul>
<li>Use initializers in preference to assignment in the constructors.</li>
<li>There's no need to name the arguments to the deleted copy methods.</li>
<li>Remove the redundant parens from <code>return *this;</code>.</li>
<li>Consider a public <code>close()</code> method, for users that care about handling errors.</li>
</ul>
<p>In contrast to einpoklum, I like your choice of invalid file descriptor (-1); we don't need the overhead of <code>std::optional</code> when a clear invalid value is available.  I do recommend giving it a name, though.</p>
<h1>My version</h1>
<pre><code>#include &lt;utility&gt;

#include &lt;unistd.h&gt;
#include &lt;sys/types.h&gt;          /* required on pre-POSIX BSD platforms */
#include &lt;sys/socket.h&gt;
#include &lt;netinet/in.h&gt;

class tcp_socket
{
public:
    tcp_socket()
        : s{::socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)}
    {
    }

    tcp_socket(const tcp_socket&amp;) = delete;
    void operator=(const tcp_socket&amp;) = delete;

    tcp_socket(tcp_socket&amp;&amp; other) noexcept
        : s{other.s}
    {
        other.s = null_socket;
    }

    tcp_socket&amp; operator=(tcp_socket&amp;&amp; other) noexcept
    {
        return swap(other);
    }

    int close() {
        return ::close(s);
    }
    
    ~tcp_socket()
    {
        if (s != null_socket) {
            // note: errors are ignored!
            close();
        }
    }

private:
    static constexpr int null_socket = -1;

    int s;

    tcp_socket&amp; swap(tcp_socket&amp; other) noexcept
    {
        std::swap(s, other.s);
        return *this;
    }
};
</code></pre>
<h1>Future directions</h1>
<p>You might need a <code>udp_socket</code> before long.  It's probably a good idea to create a <code>socket</code> base class with protected constructor so that the RAII is managed in a single-responsibility class and the protocol-specific part is in relevant subclasses:</p>
<pre><code>class socket
{
protected:
    socket(int fd)
        : s{fd}
    {
    }

public:
    // ...
};

class tcp_socket : public socket
{
public:
    tcp_socket()
        : socket{::socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)}
    {
    }
};
</code></pre>
    </div>