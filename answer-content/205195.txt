<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First, I'm going to show you some interesting points.</p>

<p><strong>1. The callstack</strong></p>

<p>You're calling some methods <a href="https://www.dotnetperls.com/recursion" rel="noreferrer">recursively</a>. A recursive method calls itself. See in <code>SearchChecker()</code> and <code>Exit()</code> where those methods call themselves, eg. <code>SearchChecker()</code> calls <code>SearchChecker()</code> again and <code>Exit()</code> calls <code>Exit()</code> again.</p>

<p>What will happen if you call it recursively? See the callstack. The picture below shows what happens when I repeatly entering wrong items. I put a break point in the line where it prints "item name not valid". I marked the callstack in a red box. See it repeatedly calling <code>SearchChecker()</code>. Same thing happens in second picture when <code>Exit()</code> is calling itself recursively by entering wrong answer (yes/no).</p>

<p><a href="https://i.stack.imgur.com/6Erxh.png" rel="noreferrer"><img src="https://i.stack.imgur.com/6Erxh.png" alt="enter image description here"></a>
<a href="https://i.stack.imgur.com/Fg7YZ.png" rel="noreferrer"><img src="https://i.stack.imgur.com/Fg7YZ.png" alt="enter image description here"></a></p>

<p><strong>2. A bug when you're trying to exit the program because of recursion</strong></p>

<p>This only happens if you do what I did in number 1. Add 2 lines in the Main method so it looks like:</p>

<pre><code>public static void Main()
{
    Console.Write("Please Enter Your Name: ");
    Name = Console.ReadLine();
    SearchBarStart(Name);
    Console.WriteLine("Press any key...");
    Console.ReadKey(true);
}
</code></pre>

<p><strong>Try these steps:</strong></p>

<ol>
<li>Enter name</li>
<li>When asked what items you want, repeat wrong answer 2 times, eg. entering "z" 2 times</li>
<li>Enter a correct item in the 3rd attempt, eg. "Ball"</li>
<li>Program shows the item information.</li>
<li>When asked if you want to continue, choose "no"</li>
<li>When asked if you are sure, choose "yes"</li>
<li>You're asked to press enter again. Press enter.</li>
<li>Program should exit, but it asked if you would like to continue again. Do step 5 till 7 till the program exits.</li>
</ol>

<p><a href="https://i.stack.imgur.com/BHWqX.png" rel="noreferrer"><img src="https://i.stack.imgur.com/BHWqX.png" alt="enter image description here"></a></p>

<p>This bug happens because of the callstack. Your program entry point is <code>Main()</code> method, so it ends when <code>Main()</code> reaches its last line. But the callstack is long (see pic #1 and #2) and it should exit each callstack before reaching back to <code>Main()</code>.</p>

<p>Here's what I did to improve your code. I add some comments to make it clearer. The idea is to make each method only do a specific task. <code>SeachCheckerStart()</code> is the main loop for asking items, <code>SearchChecker()</code> is for asking and displaying item, <code>getUserItem()</code> is for retrieving item, <code>printItem()</code> is for printing item info, <code>getChoices()</code> is for getting choice from user, <code>getContinue()</code> and <code>getConfirmExit()</code> are for asking if user wants to continue and confirm if they want to exit.</p>

<pre><code>using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;

class Program
{
    public static string Name { get; set; }

    public static void Main()
    {
        // get user name
        Console.Write("Please Enter Your Name: ");
        Name = Console.ReadLine();
        Console.WriteLine("Welcome, {0}", Name);
        Thread.Sleep(1000);

        bool userConfirmExit;
        do
        {
            SeachCheckerStart();

            userConfirmExit = getConfirmExit(); // get user confirmation to exit
            if (!userConfirmExit)
            {
                Console.WriteLine("Welcome back, {0}", Name);
                Thread.Sleep(1000);
            }
        } while (!userConfirmExit); // repeat what's inside this until user confirmed that they want to end the program

        Console.WriteLine("Press enter again to exit");
        Console.ReadLine();

        Console.WriteLine("Press any key...");
        Console.ReadKey(true);
    }

    public static void SeachCheckerStart()
    {
        bool userContinue;
        do
        {
            SearchChecker(); // start search
            userContinue = getContinue(); // ask if user wants to continue
        } while (userContinue); // repeat this process as long as user chooses "yes"
    }

    public static void SearchChecker()
    {
        Item item = null;
        do
        {
            item = getUserItem(); // get item from user, return null if item is not valid
        } while (item == null); // repeat until user asks a valid item

        printItem(item); // show item info
    }

    public static Item getUserItem()
    {
        var items = new List&lt;Item&gt; // initialize the List&lt;Item&gt;
        {
            new Item { Name = "Ball", Price = 100.001F, Popularity = 1 },
            new Item { Name = "Book", Price = 210.1F, Popularity = 5 },
            new Item { Name = "Bag", Price = 300F, Popularity = 4 }
        };

        Console.Write("Please enter which item would you like to view: ");
        string userItemChoice = string.Empty;
        userItemChoice = Console.ReadLine();
        var item = items.Find(i =&gt; i.Name == userItemChoice);
        if (item == null)
        {
            Console.WriteLine("Item name not valid");
        }
        return item;
    }

    public static void printItem(Item item)
    {
        Console.WriteLine("Item Name: {0}\n" +
                "Item Price: {1:C}\n" +
                "Item Popularity Hits: {2}\n",
                item.Name, item.Price, item.Popularity);
    }

    public static string getChoices(string message, params string[] choices)
    {
        string choice = null;
        do
        {
            Console.WriteLine(message);
            choice = Console.ReadLine().ToLower();
            if (!choices.Contains(choice)) // if choice is not in choices
            {
                Console.WriteLine("Sorry, I don't recognize {0}\n", choice);
            }
        } while (!choices.Contains(choice)); // repeat if choice is not in choices
        return choice;
    }

    public static bool getContinue()
    {
        var choice = getChoices("Would you like to continue? (yes/no)", "yes", "no"); // ask if user wants to continue
        if (choice == "yes")
            return true; // return true if user wants to continue
        else
            return false; // return false if user does not want to continue
    }

    public static bool getConfirmExit()
    {
        var choice = getChoices("Are you sure? (yes/no)", "yes", "no"); // get confirmation if user wants to exit
        if (choice == "yes")
            return true; // return true if user confirms that they want to exit
        else
            return false; // return false if user does not confirms that they want to exit
    }
}

class Item
{
    public string Name { get; set; }
    public float Price { get; set; }
    public int Popularity { get; set; }
}
</code></pre>

<p>This time the callstack is clean. See the red box in these 2 pics.
<a href="https://i.stack.imgur.com/xv7aT.png" rel="noreferrer"><img src="https://i.stack.imgur.com/xv7aT.png" alt="enter image description here"></a>
<a href="https://i.stack.imgur.com/AaGqK.png" rel="noreferrer"><img src="https://i.stack.imgur.com/AaGqK.png" alt="enter image description here"></a></p>

<p>The bug in #2 won't happen because the callstack is clean.
<a href="https://i.stack.imgur.com/tIP0f.png" rel="noreferrer"><img src="https://i.stack.imgur.com/tIP0f.png" alt="enter image description here"></a></p>
    </div>