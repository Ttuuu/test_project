<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I took a single method as example how to make the code simpler:</p>

<pre><code>fun WorldState.isActionValid(action: GoapAction): Boolean {
    // Fold the actions preconditions into an integer representing the unsatisfied variables
    // And return true if the unsatisfied variables are 0 else false
    return action.preconditions.keys.fold(0) { acc, key -&gt;
        acc + when (val prop = this.state[key]) {
            null -&gt; 1
            else -&gt; {
                when (prop == action.preconditions[key]) {
                    true -&gt; 0
                    else -&gt; 1
                }
            }
        }
    } == 0
}
</code></pre>

<p>One thing I noticed is that the comment describes the implementation.
I don't like these comments since they are better expressed in code.</p>

<p>First step: replace <code>fold</code> with <code>all</code>.</p>

<pre><code>fun WorldState.isActionValid(action: GoapAction): Boolean {
    return action.preconditions.keys.all { key -&gt;
        when (val prop = this.state[key]) {
            null -&gt; false
            else -&gt; {
                when (prop == action.preconditions[key]) {
                    true -&gt; true
                    else -&gt; false
                }
            }
        }
    }
}
</code></pre>

<p>I replaced <code>fold</code> with <code>all</code>, since you were effectively using integers to represent a simple boolean decision. By the way, your code had the potential to break unexpectedly when the code would add <span class="math-container">\$2^{32}\$</span> times a 1.</p>

<p>Curiously, IntelliJ doesn't notice that the innermost <code>when</code> can be made much simpler, so I have to do it manually.</p>

<pre><code>fun WorldState.isActionValid(action: GoapAction): Boolean {
    return action.preconditions.keys.all { key -&gt;
        when (val prop = this.state[key]) {
            null -&gt; false
            else -&gt; prop == action.preconditions[key]
        }
    }
}
</code></pre>

<p>Next, I extracted the <code>prop</code> variable and converted the <code>when</code> to an <code>if</code>, since I though that IntelliJ might be able to simplify this condition. But it wasn't helpful at all.</p>

<pre><code>fun WorldState.isActionValid(action: GoapAction): Boolean {
    return action.preconditions.keys.all { key -&gt;
        val prop = this.state[key]
        if (prop == null) false else prop == action.preconditions[key]
    }
}
</code></pre>

<p>Next, I replaced the <code>if-then-else</code> with a simple <code>and</code>.</p>

<pre><code>fun WorldState.isActionValid(action: GoapAction): Boolean {
    return action.preconditions.keys.all { key -&gt;
        val prop = this.state[key]
        prop != null &amp;&amp; prop == action.preconditions[key]
    }
}
</code></pre>

<p>One thing that I don't like is the <code>action.preconditions[key]</code>, since the lookup is unnecessary:</p>

<pre><code>fun WorldState.isActionValid(action: GoapAction): Boolean {
    return action.preconditions.all { entry -&gt;
        val prop = this.state[entry.key]
        prop != null &amp;&amp; prop == entry.value
    }
}
</code></pre>

<p>Now that's much more readable.</p>

<p>I ran the unit tests you provided after each step, to ensure that I didn't make any mistakes. I trusted you to have written good tests, I didn't look at them. In the first try of this refactoring, I had inverted one of the conditions and your tests failed. That was good and encouraging.</p>

<p>One last minification:</p>

<pre><code>fun WorldState.isActionValid(action: GoapAction): Boolean {
    return action.preconditions.all { state[it.key] ?: false == it.value }
}
</code></pre>

<p>And another:</p>

<pre><code>fun WorldState.isActionValid(action: GoapAction): Boolean {
    return action.preconditions.all { state[it.key] == it.value }
}
</code></pre>

<p>Same for <code>countDifferences</code>:</p>

<pre><code>fun WorldState.countDifferences(against: WorldState): Int {
    return against.state.count { state[it.key] != it.value }
}
</code></pre>

<p>Oh, I cannot resist. If the code is down to a three-liner, a one-liner is possible as well:</p>

<pre><code>fun WorldState.countDifferences(against: WorldState) = against.state.count { state[it.key] != it.value }

fun WorldState.isActionValid(action: GoapAction) = action.preconditions.all { state[it.key] == it.value }
</code></pre>

<p>I normally prefer code that is less than 100 columns wide on the screen, but you seem to like longer lines, so it's ok that there are horizontal scrollbars in this particular code example.</p>
    </div>