<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Oh my you are right that is rather slow.</p>

<p>I see that the accepted answer is a significant improvement however it can be done even faster</p>

<h2>Flat array</h2>

<p>The pixel buffer is a flat array of bytes, you waste a lot of cycles converting 2D coordinates <code>{x,y}</code> to the flat index. It is quicker to convert the flat index to 2D for each of the four points you find.</p>

<p>You can convert from an byte index to coordinates as follows <code>x = Math.floor(idx / 4) % width, y = Math.floor(idx / width / 4);</code> Or for a little better performance using bit-wise math. <code>x = (idx &gt;&gt; 2) % width, y = (idx &gt;&gt; 2) / width | 0;</code></p>

<p>Example finding the first row</p>

<pre><code> const pixels = ctx.getImageData(0,0,width,height).data;
 var top;
 var idx = which; // start on the channel you are reading
 while (idx &lt; pixels.length) {
     if (condition(pixels[idx], colour)) {
         top = idx / (width * 4);
         break;
     }
     idx += 4;
 }
</code></pre>

<h2>The conditional</h2>

<p>You are passing a function to test each pixel. It is likely that the JS engine will inline that function if it is not too complex, but it is still not ideal. Passing the same <code>colour</code> every call is also unneeded overhead</p>

<p>You do not give much detail on what that function does apart from you are checking for high or low values. You will get some improvement if you manually inline the test. It will mean a few more copies of the whole test function, but that is the cost of performance.</p>

<h2>Words, bytes, and bits</h2>

<p>Again it is unclear what the conditional is but using some bit wise math you can test all 4 channels in 1 operation.</p>

<p>First map a 32 bit array to the pixel data using a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray" rel="nofollow noreferrer">typed array</a> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array" rel="nofollow noreferrer"><code>Uint32Array</code></a></p>

<pre><code> const pix32 = new Uint32Array(ctx.getImageData(0, 0, width, height).data.buffer);
</code></pre>

<p>Now you read a pixel at a time as a 32bit unsigned word (Number). </p>

<p>Say for example you want to test if a pixel has an alpha value of 128 or higher</p>

<pre><code> if (pix32[idx] &amp; 0x80000000) { // alpha &gt;= 128
</code></pre>

<p>Or check if red is within a range 64 to 128</p>

<pre><code> if ((pix32[idx] &amp; 0xC0) === 0x40) { // red &gt;= 64 &amp;&amp; red &lt; 128
</code></pre>

<p>Or for a specific colour</p>

<pre><code> if ((pix32[idx] &amp; 0xFFFF00) === 0xFFFF00) { pixel with any alpha and color cyan
 if ((pix32[idx] &amp; 0xFFFF00) === 0xFF0000) { pixel with any alpha and color blue
 if ((pix32[idx] &amp; 0xFFFF) === 0xFFFF) { pixel with any alpha and color Yellow
 if ((pix32[idx] &amp; 0xFFFFFF) === 0xFFFFFF) { pixel with any alpha and color White
</code></pre>

<p>You will not have the fine control of boolean logic, but it will be way faster.</p>

<p>(NOTE most CPU will have the channels in reverse order Alpha, Blue, Green, Red. little-endian)</p>

<h2>More speed?</h2>

<p>Next step would be a web worker. You can have 4 concurrent workers each checking a size.</p>

<p>These types of problem can have solutions that give huge performance increases when the big picture is incorporated into the code. Without knowing why you are processing these images, what rendered them, their quality and how dynamic the changes are there is not much more I can give apart from an example brute force solution implementing the points in this answer.</p>

<h2>Example</h2>

<p>The example is not for the faint of heart and is not to spec as this version only handles bit masked conditions. it is however fast processing an image the size of your example image in under 1ms and is around 4 times faster than the accepted answer, and 100s of times faster than your original.</p>

<p>As there is already an accepted answer I did not bother going into fine detail to match your spec.</p>

<pre><code>// example call canvas has context as property 
canvas.ctx = canvas.getContext("2d");
getEdges(canvas, 0xFC); // find bounds for red channel value &gt; 3
getEdges(canvas, 0xF000); // find bounds for green channel value &gt; 15


function getEdges(img, mask, result = {}) {
    const w = img.width, h = img.height;
    var top, bot, idx = 0;
    const D32 = new Uint32Array(img.ctx.getImageData(0, 0, w, h).data.buffer);
    const pixelCount = D32.length;

    while (idx &lt; pixelCount) {  // find top
        if (D32[idx++] &amp;&amp; mask) { 
            result.top = top = (idx - 1) / w | 0; 
            break;
        }
    }
    if (idx &lt; pixelCount) {  // continue only if pixels found 
        idx = pixelCount;
        while (idx--) {  // find bottom
            if (D32[idx] &amp;&amp; mask) { 
                result.bot = bot = idx / w | 0; 
                break;
            }
        }    
        top *= w;  // side checks only between top and bottom found bounds
        bot *= w;
        const len = bot - top - 1;
        idx = top;  // start top left scans down and across
        while (true) {
            if (D32[idx] &amp;&amp; mask) { 
                result.left = idx % w;
                break;
            }
            ++idx &gt; bot &amp;&amp; (idx -= len); // move to top and one right
        }
        idx = bot + w - 1;  // start bottom right scans up and left
        while (true) {
            if (D32[idx] &amp;&amp; mask) { 
                result.right = idx % w;
                break;
            }
            --idx &lt; bot &amp;&amp; (idx += len); // move to bot and one left
        }
    }
    return result;
}
</code></pre>
    </div>