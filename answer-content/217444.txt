<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Seems like you've made a lot of improvements since your previous post! Let's get into the review!</p>

<h1>1. General Overview</h1>

<h2>a. Use the <code>on_&lt;objectName&gt;_&lt;signal&gt;</code> Naming Scheme for Slots</h2>

<p>This naming scheme tells the moc to automatically connect a slot with the corresponding <code>&lt;signal&gt;</code> of <code>&lt;objectName&gt;</code> from the UI. We then don't need to call <code>connect(...)</code>, saving us a few lines of code.</p>

<p>If we take a look at the <code>clearButton</code> UI object, we can get this auto-connect behaviour by renaming the <code>clear</code> method to <code>on_clearButton_clicked</code>. The implementation doesn't change, only the symbol.</p>

<p>This process of pinpointing the correct slot name is automated from Design mode. First, right-click the object itself or the listing on the object-class tree. Then select the signal to connect and the slot to go to. Qt will automatically generate the <code>on_clearButton_clicked</code> slot in the header and source files (if it doesn't exist yet).</p>

<p><a href="https://i.stack.imgur.com/YlGpk.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/YlGpk.png" alt="Right-click on the Clear button and select Go to slot..."></a><br>
<sup>Right-click on your <kbd>Clear</kbd> button to bring up the context menu and select <em>Go to slot...</em></sup></p>

<p><a href="https://i.stack.imgur.com/2WOWd.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/2WOWd.png" alt="enter image description here"></a><br>
<sup>Choose the <em>clicked()</em> signal and click <kbd>OK</kbd>.</sup></p>

<p>Now you no longer need manually connect with <code>connect(...)</code>. You can apply this to <code>generateButton</code>, <code>clearButton</code>, <code>saveButton</code>, <code>minimumSpinBox</code>, and <code>maximumSpinBox</code>. <em>Yay, 5 less lines of code! 5 less worries!</em></p>

<p><em>(To be clear, <code>static_cast&lt;void (QSpinBox::*)(int)&gt;</code> isn't needed for <code>minimumSpinBox</code>, and <code>maximumSpinBox</code> as the correct overload can be automatically deduced.)</em></p>

<p>Also note that this naming scheme <em>doesn't have to be used for every slot</em> – it is primarily used for those slots which have a corresponding signal from the UI.</p>

<h2>b. Consistency in Order of Methods in Header and Source Files</h2>

<p>In your header file, the first four function-like declarations are</p>

<pre><code>public:
    explicit Generator(QWidget *parent = nullptr);
    ~Generator();
public slots:
    void generateNumber();
    void clear();
</code></pre>

<p>However, in your source file, the definition for the destructor comes <em>last</em>. This harms readability. Most readers may be expecting the same ordering of methods in both header and source files. Does this mean the header file should conform to the ordering of the source file? Something like below perhaps?</p>

<pre><code>public:
    explicit Generator(QWidget *parent = nullptr);
public slots:
    void generateNumber();
    void clear();
public:
    ~Generator();
</code></pre>

<p>Nawww, the <strong>source file should conform to the header file</strong>. Please, please, please; if you <em>declare</em> the destructor right after the constructor, <em>define</em> the destructor right after the constructor.</p>

<pre><code>Generator::Generator(QWidget *parent)
    : QMainWindow(parent)
      , ui(new Ui::Generator)
{
    ui-&gt;setupUi(this);
    connect(ui-&gt;generateButton, &amp;QPushButton::clicked,     this, &amp;Generator::generateNumber);
    connect(ui-&gt;clearButton,    &amp;QPushButton::clicked,     this, &amp;Generator::clear);
    connect(ui-&gt;saveButton,     &amp;QPushButton::clicked,     this, &amp;Generator::saveToFile);
    connect(ui-&gt;exitButton,     &amp;QPushButton::clicked,     this, &amp;QApplication::exit);
    connect(ui-&gt;minimumSpinBox, static_cast&lt;void (QSpinBox::*)(int)&gt;(&amp;QSpinBox::valueChanged), this, &amp;Generator::setMinValue);
    connect(ui-&gt;maximumSpinBox, static_cast&lt;void (QSpinBox::*)(int)&gt;(&amp;QSpinBox::valueChanged), this, &amp;Generator::setMaxValue);
}

Generator::~Generator() {
    delete ui;
}

// other methods
// ...
</code></pre>

<h2>c. Naming</h2>

<h3>i. <code>_generateNumbers(int ?, int ?, bool random)</code></h3>

<p>A minor issue. You have </p>

<pre><code>void          _generateNumbers( int from, int to, bool random );
</code></pre>

<p>in your header file but</p>

<pre><code>void Generator::_generateNumbers( int low, int high, bool random ) {
</code></pre>

<p>in your source code. Choose either <code>from</code>/<code>to</code> or <code>low</code>/<code>high</code>, but not both.</p>

<h3>ii. <code>_correctInputParameters</code> and <code>oneLineOutput</code></h3>

<p>For methods that return <code>bool</code> (also known as <a href="https://stackoverflow.com/questions/1344015/what-is-a-predicate">predicates</a>), consider starting the method with <code>is</code> or <code>has</code>.</p>

<pre><code>bool _hasCorrectInputParameters();
bool _isOneLineOutput();
</code></pre>

<p>Helps with readability. We don't need any special guesswork to infer that these will return <code>bool</code>.</p>

<h1>2. Logic</h1>

<p>The logic and program flow seems a tad messy, let's try cleaning it up!</p>

<h2>a. <code>clear()</code></h2>

<p>What should this clear? Only the text-edit? I'd clear <code>_nums</code> as well.</p>

<pre><code>void Generator::clear() {
    ui-&gt;textEdit-&gt;clear();
    _nums.clear();
}
</code></pre>

<p>The last thing we want is to have the <code>clear</code> method clear only the gui and leave the variable sitting. Clear everything it all at once! Doing so allows us to pinpoint bugs easier – we don't have to spend 30 minutes digging through the entire code to find a lone <code>_nums = ""</code> placed wrongly.</p>

<h2>b. <code>generateNumber</code> and <code>_generateNumbers</code> and <code>_generateNumber</code></h2>

<p>First off, these methods could do with better naming. As soon as I type <em>generate</em>, the IDE completer will show these three methods and it all suddenly becomes ambiguous. <strong>Be specific with what each method does.</strong></p>

<ul>
<li><code>_generateNumber</code> only generates random numbers, so change it to <code>_generateRandomNumber</code>.</li>
<li><code>generateNumber</code> handles the button click, so follow the first section of this answer and change it to <code>on_generateButton_clicked</code>.</li>
<li><code>_generateNumbers</code> is a fine name as it is.</li>
</ul>

<p>Down to the logic. It doesn't really make sense to retrieve values of <code>minimumSpinBox</code> and <code>maximumSpinBox</code> in two places (one, in <code>generateNumber</code>, under the <code>else</code> branch; and two, in <code>_generateNumber</code>). Retrieve it <em>once</em>, then pass it accordingly. By the same principle, since only the <code>random</code> option needs  <code>int numbersCount = ui-&gt;numbers-&gt;value();</code>, this should be placed in <code>_generateNumbers</code> instead.</p>

<pre><code>void Generator::generateNumber() {
    clear();
    // _nums = ""; // moved to clear();  same as _nums.clear()

    int low = ui-&gt;minimumSpinBox-&gt;value();    // retrieve values from spinboxes ONCE        
    int high = ui-&gt;maximumSpinBox-&gt;value();

    _generateNumbers(low, high+1, ui-&gt;random-&gt;isChecked());  // universal, no need for if-else    

    ui-&gt;textEdit-&gt;setText(_nums);
}
</code></pre>

<p>This also means changing <code>_generateNumber</code> to accept parameters so that we can later pass the <code>low</code> and <code>high</code> in <code>generateNumber</code>:</p>

<pre><code>qint32 Generator::_generateNumber(int low, int high) {
    std::random_device rd;
    std::default_random_engine eng(rd());
    std::uniform_int_distribution&lt;qint32&gt; distr(low, high);
    return distr(eng);
}
</code></pre>

<p>Currently, <code>_generateNumbers</code> serves two purposes: generating random numbers and generating sequential numbers. However, the arguments used are for completely different purposes, which is... meh... <strong>until their names contradict with their purpose</strong> which merits another <em>meh</em>. This seems like a big red sign to me:</p>

<pre><code>if ( ui-&gt;random-&gt;isChecked () ) {
    _generateNumbers (0, numbersCount, true);  // low = 0, high = numbersCount ?
}
</code></pre>

<p>Does this use case not imply that the generated numbers should be between <code>0</code> and <code>numbersCount</code>? Apparently not... Apparently, <code>low</code> and <code>high</code> in <em>that</em> context means to generate <code>high – low</code> number of values.</p>

<p><em>Since the purposes and use cases are different, it only makes sense to have different implementations</em>, so <strong>branch your if-else well ahead of the for-loop(s)</strong>.</p>

<pre><code>void Generator::_generateNumbers( int low, int high, bool random ) {

    QString separator = _getSeparator();

    if (random) {
        int numbersCount = ui-&gt;numbers-&gt;value();
        // generate random numbers between low and high
        // for (int i = 0; i &lt; numbersCount; i++)
        //   ...
    } else {
        // generate random numbers between low and high
        //   ...
    }

    // get rid of the last separator char
    if ( _oneLineOutput () &amp;&amp; separator != "" ) { _removeLastChar(_nums);}
}
</code></pre>

<h1>3. UI</h1>

<p>On the UI side, I'd consider removing some borders – they do get in the way, especially the ones around <em>Generate Numbers</em> and the ones around your four buttons.</p>

<p>You should also consider disabling the <strong><em>How many numbers</em></strong> spinbox if the selected number pattern is <strong>Sequential</strong> as the two are mutually exclusive options.</p>

<p>But then, you could also consider the case where the user selects <strong>Sequential</strong> and provides a <em>from</em>-value and <em>how-many-numbers</em>-value but doesn't provide a <em>to-value</em>. Sounds like you could make this a third <em>Numbers</em> option: <strong>Sequential-n</strong>.</p>

<p>It's unfortunate that we don't get the .ui to play around with, but nonetheless, it looks stunning and functional from afar. :-)</p>
    </div>