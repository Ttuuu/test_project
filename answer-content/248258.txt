<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code looks good. It's a little hard to read, but given the context that is ok!
We can also see that if <code>new_ending</code> is never in <code>needles</code> then your code looks like it will run in <span class="math-container">\$O(f2^s)\$</span> time, where <span class="math-container">\$f\$</span> is <code>flips</code> and <span class="math-container">\$s\$</span> is <code>streak</code>.</p>
<p>Whilst I can see the code in <code>if new_ending in needles:</code> will reduce the the time your code takes to run.
For example when streak=2 it will allow your code to run in linear time, it's not going to help much on bigger numbers - the code will still tend to <span class="math-container">\$O(f2^s)\$</span>.</p>
<p>We can see how you're performing this optimization in the following.
Since you are not searching the descendent of HH, TT, HTT, THH, etc. it cuts down how big the tree will get.</p>
<p><a href="https://i.stack.imgur.com/no5gE.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/no5gE.png" alt="enter image description here"></a></p>
<p>We can clearly see that tails is just the inverse of heads.
If we focus on heads and split the 'base' and 'tail' (the repeating results) we get the following:</p>
<pre class="lang-none prettyprint-override"><code>     HH 1/2^2
H    TT 1/2^3
HT   HH 1/2^4
HTH  TT 1/2^5
HTHT HH 1/2^6
</code></pre>
<p>Whilst it's cool it runs in linear time, it's not really that interesting.
And so when streak=2 the total chance for <span class="math-container">\$f\$</span> flips is:</p>
<p><span class="math-container">$$\Sigma_{n=2}^f \frac{2}{2^n}$$</span></p>
<p>However when we look at streak=3 we can see the start of a distinguishing pattern.</p>
<pre class="lang-none prettyprint-override"><code>     HHH 1/2^3
H    TTT 1/2^4
HH   TTT 1/2^5
HT   HHH 1/2^5
HHT  HHH 1/2^6
HTH  TTT 1/2^6
HTT  HHH 1/2^6
HHTH TTT 1/2^7
HHTT HHH 1/2^7
HTHH TTT 1/2^7
HTHT HHH 1/2^7
HTTH TTT 1/2^7
</code></pre>
<p>If we take the count of each size then we get:</p>
<pre class="lang-none prettyprint-override"><code>3: 1
4: 1
5: 2
6: 3
7: 5
</code></pre>
<p>This is cool because it's the start of the <a href="https://oeis.org/search?q=1%2C1%2C2%2C3%2C5&amp;sort=&amp;language=&amp;go=Search" rel="nofollow noreferrer">Fibonacci numbers</a>.
I have verified that the first 30 values are the same.
And so we now can assume we have an equation for streak=3:</p>
<p><span class="math-container">$$\Sigma_{n=3}^f \frac{2F(n-2)}{2^n}$$</span></p>
<p>Doing the same thing for streak=4,5,6,10 give the following sequences:</p>
<ul>
<li>4 - <a href="https://oeis.org/search?q=1%2C1%2C2%2C4%2C7%2C13%2C24%2C44&amp;sort=&amp;language=&amp;go=Search" rel="nofollow noreferrer">Tribonacci</a></li>
<li>5 - <a href="https://oeis.org/search?q=1%2C1%2C2%2C4%2C8%2C15%2C29%2C56&amp;sort=&amp;language=&amp;go=Search" rel="nofollow noreferrer">Tetranacci</a></li>
<li>6 - <a href="https://oeis.org/search?q=1%2C1%2C2%2C4%2C8%2C16%2C31%2C61&amp;sort=&amp;language=&amp;go=Search" rel="nofollow noreferrer">Pentanacci</a></li>
<li>10 - <a href="https://oeis.org/search?q=1%2C+1%2C+2%2C+4%2C+8%2C+16%2C+32%2C+64%2C+128%2C+256%2C+511&amp;sort=&amp;language=&amp;go=Search" rel="nofollow noreferrer">Fibonacci 9-step</a></li>
</ul>
<p>In all this is a pretty compelling pattern.
And so we can write an algorithm to run in <span class="math-container">\$O(fs)\$</span> time where <span class="math-container">\$f\$</span> is flips and <span class="math-container">\$s\$</span> is streaks.</p>
<pre class="lang-py prettyprint-override"><code>import collections
import itertools
from fractions import Fraction


def fibonacci_nth(size):
    store = collections.deque([0] * size, size)
    store.append(1)
    while True:
        yield store[-1]
        store.append(sum(store))


def coin_chance(flips, streak):
    if streak &lt;= 0 or streak % 1:
        raise ValueError("streak must be a positive integer")
    if flips &lt; 0 or flips % 1:
        raise ValueError("flips must be a non-negative integer")
    if streak == 1:
        return Fraction(flips != 0, 1)
    sequence = (
        Fraction(2 * numerator, 2 ** exponent)
        for exponent, numerator in enumerate(fibonacci_nth(streak - 1), streak)
    )
    return sum(itertools.islice(sequence, flips - streak + 1))


# Code to get OEIS sequences
def funky_finder(depth, size):
    desired = (['H'] * size, ['T'] * size)
    stack = [iter("HT")]
    stack_value = []
    while stack:
        try:
            coin = next(stack[-1])
        except StopIteration:
            stack.pop()
            if stack_value:
                stack_value.pop()
            continue
        _stack_value = stack_value + [coin]
        if _stack_value[-size:] in desired:
            yield ''.join(_stack_value)
        elif len(stack) &lt; depth:
            stack_value.append(coin)
            stack.append(iter('HT'))


# I know, I know. But I was using this in a REPL!
size = 3; [i // 2 for i in sorted(collections.Counter(len(i) - size for i in funky_finder(20 + size, size)).values())]
</code></pre>
<pre><code>&gt;&gt;&gt; 100 * fast(20, 6) / 2**20
23.687744140625
&gt;&gt;&gt; 100 * float(coin_chance(20, 6))
23.687744140625

&gt;&gt;&gt; 100 * fast(100, 6) / 2**100
80.68205487163246
&gt;&gt;&gt; 100 * float(coin_chance(100, 6))
80.68205487163246
</code></pre>
    </div>