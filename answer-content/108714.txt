<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is a decent concept, but by looping on the <code>cd</code> you loose some of the value of the <code>$OLDPWD</code> function in the shell. For example, I often use the special construct <code>cd -</code> in a shell, and that changes directory to the one you were in before.</p>

<p>Your code will make that impossible.</p>

<p>I would instead recommend that you instead build up a chain of <code>../</code> string values, like <code>../../../../</code> for 4 directories, and then just call <code>cd</code> once, which will preserve the <code>cd -</code> function, and the <code>$OLDPWD</code>.</p>

<p>Additionally, this would be a good feature to include as a function in your code, rather than a script. Bash shell likes functions, and they make life easier.</p>

<p>Finally, if someone supplies a non-number as an argument, it will do odd things.</p>

<p>I played with your code, and came up with:</p>

<pre><code>up () {
    local count=$1
    if [ -z "$count" ]; then
        cd ..
        return
    fi

    test "$count" -eq "$count" || return 1

    local todir=""
    for i in `seq 1 $count`;
    do
      todir="../$todir"
    done
    cd $todir
}
</code></pre>

<p>The features of the above code I like are:</p>

<ul>
<li>it is a function of the shell, so there's no additional script called.</li>
<li>it checks the value is a number, by doing a numeric comparison on the value: <code>test "$count" -eq "$count"</code> (That will throw an error if the inputs are not integers)</li>
<li>it only does a single 'cd', so things like <code>cd -</code> still work.</li>
</ul>

<p>I would add that to my ~/.bashrc file, or source it in to my current shell.</p>
    </div>