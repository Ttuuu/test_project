<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I believe one can avoid the bias problem by generating a random float between [0..1) and then normalizing the value between <strong>x</strong> and <strong>y</strong> instead of clamping:</p>

<pre><code>private static RandomNumberGenerator Rng = new RNGCryptoServiceProvider();
private const double ReciprocalOf256AsDouble = 1d / 256d;

public static double Random() {
    var buffer = new byte[sizeof(double)];

    Rng.GetBytes(buffer);

    return ReciprocalOf256AsDouble
        * (buffer[0] + ReciprocalOf256AsDouble
        * (buffer[1] + ReciprocalOf256AsDouble
        * (buffer[2] + ReciprocalOf256AsDouble
        * (buffer[3] + ReciprocalOf256AsDouble
        * (buffer[4] + ReciprocalOf256AsDouble
        * (buffer[5] + ReciprocalOf256AsDouble
        * (buffer[6] + ReciprocalOf256AsDouble
        * buffer[7]
    )))))));
}
public static int Random(int x, int y) {
    var min = Math.Min(x, y);
    var max = Math.Max(x, y);

    return (int)Math.Floor(min + (((max - min) + 1.0d) * Random()));
}
</code></pre>

<p>I also went ahead and hoisted up the <code>RNGCryptoServiceProvider</code> into a static field since there's no real security benefit gained by allocating a new one on every call. Usage in your current <code>RandomNumber</code> function is straightforward:</p>

<pre><code>string RandomNumber(int numDigits) {
    var sb = new StringBuilder(numDigits);

    for (int i = 0; i &lt; numDigits; i++) {
        sb.Append(Random(0, 9));
    }

    return sb.ToString();
}
</code></pre>

<hr>

<p><code>Random(0, 9)</code> testing results, two passes of twenty million:</p>

<p><a href="https://i.stack.imgur.com/QhEOa.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/QhEOa.png" alt=""></a></p>

<p>Testing code:</p>

<pre><code>static void Main(string[] args) {
    var count = 20000000;
    var x = Sample(count, 9);
    var y = Sample(count, 9);

    for (var i = 0; i &lt; x.Length; i++) {
        Console.WriteLine($"    {i} | {x[i]}");
    }

    Console.WriteLine("-------------------");

    for (var i = 0; i &lt; y.Length; i++) {
        Console.WriteLine($"    {i} | {y[i]}");
    }

    Console.ReadKey();
}

static int[] Sample(int count, int maxValue) {
    var results = new int[maxValue + 1];

    Parallel.For(0, count, (index) =&gt; {
        Interlocked.Increment(ref results[Random(0, maxValue)]);
    });

    return results;
}
</code></pre>
    </div>