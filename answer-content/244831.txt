<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<p>Is this a good enough answer?</p>
</blockquote>
<p>This isn't meaningfully answerable without understanding both your skill level and the expected skill level you're interviewing for, and any possible modifiers/priorities you've been given to solve this exercise.</p>
<blockquote>
<p>Because I know people can solve it using Linq with less lines of code</p>
</blockquote>
<p>Line count is not the main measure of quality. If anything, the LINQ example "cheats" by inlining a lot of different steps and ends up with compromised readability because of it.</p>
<hr>
<p>That being said, there are certain improvements to be made here. You've made things much more complex than they need to be. I'm going to make an educated guess here and say that you were <a href="https://dev.to/dstarner/dont-be-a-shotgun-coder-2hfp" rel="noreferrer">shotgun coding</a> and then did not clean up/refactor afterwards.</p>
<p>You would've been better off taking a step back and figuring out if you could calculate some things instead of iteratively needing to exploring them. If you had done so, you would've been able to break things down into three easy steps.</p>
<p>The main example of this is that you're adding every whitespace individually, which is not performant. It could've been calculated once, instead of iteratively adding them. A basic formula would be:</p>
<pre><code>amount_of_blanks_on_one_side = tower_height - current_step_index - 1
</code></pre>
<p>Or if your steps are counted using 1-indexing (which I will actually use in this case:</p>
<pre><code>amount_of_blanks_on_one_side = tower_height - current_step
</code></pre>
<p>Pick any tower size, and you'll see that this formula is correct for every step of every possible tower.</p>
<p>I'm not going to get into the specific code for this yet, but this already suggests that you have a clearly abstractable method here:</p>
<pre><code>string stepString = GenerateStep(towerHeight, currentStep);
</code></pre>
<hr>
<p>We've now split our logic into two separate steps:</p>
<ul>
<li>How we generate a single step (<code>GenerateStep</code>)</li>
<li>How we combine these single steps into a tower</li>
</ul>
<p>Let's focus on the second one now. It is assume that we already know the tower height, so let's work with a basic variable for now:</p>
<pre><code>int towerHeight = 3;
</code></pre>
<p>Then, we're going to need a list of the steps (i.e. the number denoting each step. That is always going to be a list of numbers starting at <code>1</code> and ending at <code>towerHeight</code>, which can be easily generated using:</p>
<pre><code>var steps = Enumerable.Range(1, towerHeight);

// steps: [ 1, 2, 3 ]
</code></pre>
<p>And now, we want to convert each step into the string we need it to be. Luckily, we already defined this as the <code>GenerateStep</code> method:</p>
<pre><code>var tower = steps.Select(step =&gt; GenerateStep(towerHeight, step));

// tower: [ "  *  ", " *** ", "*****" ]
</code></pre>
<p>And that's all you need to do to get the tower you're looking for. Of course, we still need to look at how you generate the step string, but I want you to see how simple the rest of the logic really is.</p>
<hr>
<p>Now, all we need to do is figure out how to generate a given step, based on the tower height and current step number. We don't need to worry about loops or towers anymore, we can focus solely on generating a single step. This will be wrapped in the method we already defined:</p>
<pre><code>public string GenerateStep(int towerHeight, int currentStep)
{
    // ...
}
</code></pre>
<p>A step is always of the form:</p>
<pre><code>[X amount of blanks][Y amount of asterisks][X amount of blanks]
</code></pre>
<p>So we really just need to figure out what X (which I'll call the padding) and Y (which I'll call the width of the tower) are.</p>
<p>We actually already established how to find the padding (X):</p>
<pre><code>amount_of_blanks_on_one_side = tower_height - current_step
</code></pre>
<p>Or, in code:</p>
<pre><code>int paddingSize = towerHeight - currentStep;
</code></pre>
<p>The width of the tower is slightly more complex. Let's look at some numbers to see if we spot the formula</p>
<pre><code>STEP | WIDTH
------------
  1  |  1
  2  |  3
  3  |  5
  4  |  7
  5  |  9
</code></pre>
<p>Depending on how you look at it, you should quickly figure out that the width is always one less than the double of the step number, i.e.:</p>
<pre><code>int towerWidth = 2 * currentStep - 1;
</code></pre>
<p>So now we know our width and padding. The only thing that's left is how to generate a string of a given length with a repeating character. There is actually a <code>string</code> constructor for that:</p>
<pre><code>var myString = new string(myCharacter, amountOfCharacters);
</code></pre>
<p>Therefore, we can generate the appropriate strings:</p>
<pre><code>string padding   = new string(' ', paddingSize);
string towerPart = new string('*', towerWidth);
</code></pre>
<p>And then we put these string together:</p>
<pre><code>string result = $"{padding}{towerPart}{padding}";
</code></pre>
<p>And that's it.</p>
<hr>
<p>Putting it all together:</p>
<pre><code>public IEnumerable&lt;string&gt; GenerateTower(int towerHeight)
{
    var steps = Enumerable.Range(1, towerHeight);

    var tower = steps.Select(step =&gt; GenerateStep(towerHeight, step));

    return tower;
}

public string GenerateStep(int towerHeight, int currentStep)
{
    int paddingSize = towerHeight - currentStep;
    int towerWidth  = 2 * currentStep - 1;

    string padding   = new string(' ', paddingSize);
    string towerPart = new string('*', towerWidth);

    return $"{padding}{towerPart}{padding}";
}
</code></pre>
<p>If you examine the steps closely, this actually mirrors the LINQ example you provided. But the LINQ example is horribly unreadable, which is why I opted for a bit more verbosity to ensure that the code remains clean and readable.</p>
<p>Could you optimize this further? Yes, and I'm sure this has already been golfed. But further condensing the code is only going to detract from the readability, which is why you're better off not optimizing any further (unless you are dealing with very specific performance constraints).</p>
    </div>