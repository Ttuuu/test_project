<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is a nice feature, and all in all it works well. A couple of remarks though:</p>

<hr>

<p>Split up the main method in two methods - one for ComboBoxes and one for other controls. It is more readable and easier to maintain:</p>

<pre><code>private static void Control_Loaded(object sender, EventArgs e)
{
  Control control = sender as Control;

  if (control == null || control.Template == null) return;

  control.ApplyTemplate();

  if (control is ComboBox)
    SetComboBox(control as ComboBox);
  else
    SetOtherControl(control);
}
</code></pre>

<hr>

<p>Be aware that you set the Loaded event handler every time you change the CornerRadius. You probably don't change the corner radius after app load, but if you do, you attach a new handler for the controls Loaded event. It's no big deal because it is only called once (at load time) - but anyway it looks bad. You could probably handle it like this:</p>

<pre><code>public static void CornerRadiusChangedCallback(object sender, DependencyPropertyChangedEventArgs e)
{
  Control control = sender as Control;

  if (control == null) return;

  control.Loaded -= Control_Loaded;
  control.Loaded += Control_Loaded;
}
</code></pre>

<hr>

<p>You should be aware that <code>SystemDropShadowChrome</code> is defined in more than one assembly (Aero and Aero2 for instance) so you'll have to link to the right assembly. Which one that is in use I think is system dependent(?). You could maybe use Reflection to overcome this(?)</p>

<hr>

<p>Setting the properties of the Popup/Dropdown of the <code>ComboBox</code> at load time is a bad idea, because if the <code>ComboBox</code> changes size (width), the settings you made at load time are not adjusted to the new size. Instead you should make the settings for the ComboBox in both the <code>Loaded</code> <em>and</em> the <code>SizeChanged</code> events or maybe just in the <code>DropDownOpened</code> event.</p>
    </div>