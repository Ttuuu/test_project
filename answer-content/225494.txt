<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As a side note, including your "includes" in the code you want reviewed makes it much easier to do so, this way we don't have to check if, for example <code>APIClient</code> and <code>User</code> are parts of the django library, because it's not really mandatory to understand Django to review unit testing.</p>

<p>Now, for the review : </p>

<p><code>test_authorized_and_permitted_users_view</code> :</p>

<p>You test that <code>User.objects</code> contains two items, but the code you are testing has nothing to do with this. By writing this, you are testing your unit test kind of like this :</p>

<pre><code>def some_method(parameter):
    return paramter+1

def some_test():
    parameter = 1
    result = some_method(parameter)

    self.assertEqual(parameter, 1)
    ....
</code></pre>

<p>You already test that <code>expected_data = response.data</code> and that's plenty enough. It's a "risk" to test more than your test should test because if something ever changes that isn't related to the tested code and the test fails, well you might search for awhile what's the problem and bad tests are worst than no test (citation needed).</p>

<p><code>test_authorized_and_permitted_invalid_user_create</code></p>

<p>This test isn't "unit", it tests two things. It tests that an authorized user can access the page and it tests that the creation fails with an invalid user. It should be two tests, because if your test ever fails you don't want to wonder if it's because of a change in the authentication module or in the user creation module (That's pretty much the point of a unit test)</p>

<p>For your other tests, there are also places where both these comments apply. Apart from these points, I think you've pretty much nailed the principle of unit testing. What isn't shown in your code though, is if you use dependency injection. This is a pretty valuable tool when it comes to unit testing, because you don't want to have complex mechanisms running when your unit tests run. There are two <strong>important</strong> (I really felt the need to bold that word :p) reasons for this : </p>

<ol>
<li>If your tests are slow, chances are devs won't run them. And if you force them to run before pushing or stuff like that, they'll a) loose time while the tests are running b) won't push as often as they should.</li>
<li><p>It makes another thing that could make your test fail for the wrong reason. If, for example, you have </p>

<pre class="lang-py prettyprint-override"><code>def some_simple_unit_test():
    real_database.connect()

    # do things and assert
</code></pre></li>
</ol>

<p>If the database connection fails for whatever reason, your test will fail, but was it really what you wanted? Does your test <strong>really</strong> need to test access to a database or could it access some simple in-memory data storage for a simple unit test? Wouldn't you expect whichever database provider who wrote the package to have tested it first, so you don't need to? </p>

<p>The whole point of this last point is to tell you that it's important to keep tests simple and I don't think it's been done enough in your case (But maybe there're some tests configuration I'm missing)</p>
    </div>