<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Review</h3>

<p>I would say, KISS (keep it stupid simple). Try going for a single lock and benchmark both normal expected thoughput and peek scenarios. If you would manage with this setup, you're done.</p>

<p>In case you would require a mutex for every unique key, using a lock to get that key is good practice. You have optimized lookup (tryget vs contains and get)  <code>if (_cartSemaphores.TryGetValue(nxID, out semaphore))</code> and all actions inside this lock are fast.</p>

<p>However, as mentioned in the comments, your cache might grow over time, and you'll eventually reach a point most keys would become lingering. You would need to think about how to perform some garbage collection on this cache. This can be tricky. Check out this post <a href="https://codereview.stackexchange.com/questions/223150/force-concurrentdictionary-in-a-singleton-registry-to-collect-removed-items-spac/223160#223160">force-concurrentdictionary-in-a-singleton-registry-to-collect-removed-items-spac</a> to figure out C# collections are optimized for performance, not for memory management when cleaning up lingering items. So at some point, you would probably want to clear the cache completely, and re-assign a new instance of the cache. This could be very expensive, but required when your server runs 24/7 and has lots of new and stale semaphores.</p>

<p>One possible way of cleaning the cache is to have a scheduled task that periodically (you should figure out a good cycle window) clears the cache.</p>

<p><sub> in pseudo code (comments) </sub></p>

<pre><code> lock (_lockObj)
 {
     // acquire the semaphore for each key in the dictionary
     // clear the dictionary
     // assign a new empty dictionary
 }
</code></pre>

<p>One other thing, you are assigning a slightly different update time than creation time:</p>

<blockquote>
<pre><code>semaphore = new NxSemaphore()
{
    Created = DateTime.Now,
    Key = nxID,
    LastUsed = DateTime.Now
};
</code></pre>
</blockquote>

<p>This probably doesn't have a major impact, but it would better to have the initial state consistent.</p>

<pre><code>public NxSemaphore()
{
    Created = DateTime.Now;
    LastUsed  = Created;
}
</code></pre>
    </div>