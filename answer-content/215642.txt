<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><code>double</code> is not a good choice to use for currency in Java. The better option is <code>BigDecimal</code> (which you are using for the internal balance, but not for the parameters passed to the <code>addAmount</code> and <code>withdrawAmount</code> methods). A better approach would be to make those methods take a <code>BigDecimal</code> parameter instead (and to use <code>BigDecimal</code> everywhere in your code that deals with currency amounts).</p>

<p>If for some reason those methods <strong>need</strong> to take a <code>double</code> parameter then you should not convert it to a <code>BigDecimal</code> with the <code>new BigDecimal(double)</code> constructor - this will give an inaccurate conversion and an unexpected (and incorrect) value for the balance after the add/withdraw operation. For example, the following test fails:</p>

<pre><code>    @Test
    public void demonstrateBigDecimalRoundingErrorsFromDouble() {
        BigDecimal balance = BigDecimal.ZERO;
        balance = balance.add(new BigDecimal(0.1));
        assertThat(balance, is(new BigDecimal("0.1")));
    }
</code></pre>

<p>with the error</p>

<pre><code>java.lang.AssertionError: 
Expected: is &lt;0.1&gt;
     but: was &lt;0.1000000000000000055511151231257827021181583404541015625&gt;
</code></pre>

<p>The correct way to convert from a <code>double</code> to a <code>BigDecimal</code> is to use <code>BigDecimal.valueOf(double)</code>. For example, changing the middle line in the above test will make it pass:</p>

<pre><code>    @Test
    public void demonstrateBigDecimalRoundingErrorsFromDouble() {
        BigDecimal balance = BigDecimal.ZERO;
        balance = balance.add(BigDecimal.valueOf(0.1));
        assertThat(balance, is(new BigDecimal("0.1")));
    }
</code></pre>
    </div>