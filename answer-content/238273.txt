<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>For new users coming to this page, <a href="http://arma.sourceforge.net/docs.html" rel="nofollow noreferrer">Armadillo</a> has come a long way since 2012. All of these functions have native Armadillo implementations. </p>

<p>Armadillo has had <a href="http://arma.sourceforge.net/docs.html#misc_fns" rel="nofollow noreferrer">element-wise functions</a> since inception I think (someone please correct me): <code>log(A)</code>, <code>log2(A)</code>, and <code>log10(A)</code>:</p>

<pre><code>using namespace arma;
// Generate a matrix with the elements set to random floating point values
// randu() uses a uniform distribution in the [0,1] interval 
mat A = randu&lt;mat&gt;(5,5);    // or mat A(5, 5, fill::randu);
mat B = log(A);
</code></pre>

<p>Added <code>any</code> and <a href="http://arma.sourceforge.net/docs.html#vectorise" rel="nofollow noreferrer">vectorize</a> in version 3.910:</p>

<pre><code>vec V = randu&lt;vec&gt;(10);
mat X = randu&lt;mat&gt;(5,5);


// status1 will be set to true if vector V has any non-zero elements
bool status1 = any(V);

// status2 will be set to true if vector V has any elements greater than 0.5
bool status2 = any(V &gt; 0.5);

// status3 will be set to true if matrix X has any elements greater than 0.6;
// note the use of vectorise()
bool status3 = any(vectorise(X) &gt; 0.6);

// generate a row vector indicating which columns of X have elements greater than 0.7
urowvec A = any(X &gt; 0.7);
</code></pre>

<p>Added <a href="http://arma.sourceforge.net/docs.html#accu" rel="nofollow noreferrer">accu</a> before version 4.6:</p>

<pre><code>mat A(5, 6, fill::randu); // fill matrix with random values
mat B(5, 6, fill::randu);
double x = accu(A);
double y = accu(A % B);  // "multiply-and-accumulate" operation
                         // operator % performs element-wise multiplication
</code></pre>

<p>The <code>accu</code> function 'accumulates a sum', while the <code>sum</code> function generates a row or column vector that is the sum of the specified matrix dimension. For a column vector,
the sum of the elements is returned:</p>

<pre><code>colvec v = randu&lt;colvec&gt;(10,1);
double x = sum(v);

mat    M = randu&lt;mat&gt;(10,10);

rowvec a = sum(M);
rowvec b = sum(M,0);
colvec c = sum(M,1);

double y = accu(M);   // find the overall sum regardless of object type
</code></pre>

<p>And Armadillo has its own <a href="http://arma.sourceforge.net/docs.html#field" rel="nofollow noreferrer">field</a> class template:</p>

<pre><code>using namespace arma;
mat A = randn(2,3);
mat B = randn(4,5);

field&lt;mat&gt; F(2,1);
F(0,0) = A;
F(1,0) = B; 

F.print("F:");
F.save("mat_field");
</code></pre>
    </div>