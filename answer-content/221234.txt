<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some grist for the mill:</p>

<p>When variables will not be reassigned, it's helpful to declare them as <code>final</code> to reduce cognitive load on the reader.</p>

<p>When using the Collections API, it's preferable to declare interface types rather than implementations (<code>List</code> instead of <code>ArrayList</code>) unless you need functionality specific to the implementation type.</p>

<p>Declare variables as closely to where they're first used as is possible.</p>

<p>When you <code>return</code> in the <code>if</code> clause, you don't need an <code>else</code> clause.</p>

<p>Calling <code>inputAlphabet().contains()</code> once for every character in the input is very inefficient, especially given that <code>inputAlphabet()</code> is running a loop to create the list. Call <code>inputAlphabet()</code> once and keep a local variable to hold it. And have <code>inputAlphabet()</code> return a <code>Set</code> instead of a <code>List</code>, which gets you <code>contains()</code> at <code>O(1)</code> instead of <code>O(n)</code>.</p>

<p><code>input.toCharArray()</code> is easy to read, which makes it probably correct in this case, but be aware that it's marginally less efficient than using an indexed loop and calling <code>input.charAt(i)</code> because it creates a new <code>char[]</code>.</p>

<p>You don't need to keep a <code>Tape</code> instance variable. Just create a new one in <code>run()</code>. It might be nice if the <code>Tape</code> constructor accepted a list of cells.</p>

<p>Probably not relevant, but your code is not thread-safe. It will break if multiple threads call <code>run</code> at the same time.</p>

<p>Don't reuse a variable (<code>pT</code>) for different things in the same method. It makes it hard for the reader to keep track of what it contains.</p>

<p><code>pT</code> is a poor variable name. I <em>think</em> it means <code>possibleTransitions</code>? Variables should clearly indicate what they're referencing. Another example is <code>t</code> instead of <code>transition</code>. </p>

<p>The loop building the transitions could be extracted into a method.</p>

<p>It's traditional in looping constructs to check <code>&lt;=</code>, instead of <code>!=</code> to avoid a possible infinite loop if a bug puts you past the exact value you want to terminate on.</p>

<p>You can localize <code>i</code> and use a <code>for</code> loop, because you know is has to be <code>tape.getCells().size()</code> when you're done looping.</p>

<p>Your code might be easier to read with a guard clause <code>if (.. != .. ) { continue;</code> rather than nesting.</p>

<p>Rather than setting the value of <code>j</code> to break the loop, just use <code>break</code>. Then you can use an enhanced for loop rather than indexing on <code>j</code>.</p>

<p>Your <code>temp</code> dancing is not meaningful. Since <code>Tape</code> is returning an unsafe copy from <code>getCells()</code>, you could just do <code>tape.getCells().set(i, ..)</code>. Even better would be changing the API of Tape to have the methods to access the cells (<code>tape.getCellAt(int)</code>, <code>tape.setCellAt(int, Character)</code> instead of returning the array for you to mess around with. While you're at it, add a method like <code>size()</code> or <code>length()</code> to tape and get rid of <code>getCells</code> altogether. Let <code>Tape</code> hide the fact that it's using a List under the covers, and you can change the implementation later without breaking other code.</p>

<p>It's unclear why a Transition's direction and the current state are treated as Strings when they're only ever one character long.</p>

<p>It also be nice if Transition could be changed so you could do something like <code>i = possibleTransition.applyDirection(i)</code>, and the Transition determines whether to add one, subtract one, or do nothing. Then that <code>if .. else if ..</code> block reduces to <code>i = possibleTransition.applyDirection(i); tape.setHeadPosition(i);</code></p>

<p>Your second <code>for</code> loop with the <code>k</code> index has the same break; issue as the first. You can again use the enhanced <code>for</code> loop.</p>

<p>It's unclear what this loop is doing with <code>Tape</code>, since you're making changes that effectively vanish once the method exists. It looks like that code can just go. In fact, since <code>getHeadPosition</code> is never called in your codebase, I'm not sure why you're tracking it at all.</p>

<p>If you were to make all of these modifications, your code might look something like the code below. This is untested, so I might very well have broken something.</p>

<pre><code>public boolean run(final String input) {
    final List&lt;Character&gt; chars = new ArrayList&lt;&gt;();
    final Set&lt;Character&gt; inputAlphabet = inputAlphabet();
    for (final char c : input.toCharArray()) {
        if (!inputAlphabet.contains(c)) {
            return false;
        }
        chars.add(c);
    }

    String currentState = startState;

    final Tape tape = new Tape(chars);
    for (int i = 0; i &lt; tape.size(); i++) {

        for (final Transition transition : this.possibleTransitions(currentState)) {
            if (tape.getCellAt(i) != transition.getInputSymbol()) {
                continue;
            }

            if (transition.getWriteSymbol() != EMPTY_SYMBOL) {
                tape.setCellAt(i, transition.getWriteSymbol());
            }

            i = transition.applyDirection(i);
            currentState = transition.getToState();
            break;
        }

        if (this.rejectStates.contains(currentState)) {
            return false;
        }
    }

    for (final Transition transition : possibleTransitions(currentState)) {
        if (transition.getInputSymbol() == EMPTY_SYMBOL) {
            currentState = transition.getToState();
            break;
        }
    }
    return acceptStates.contains(currentState);
}

private List&lt;Transition&gt; possibleTransitions(final String state) {
    final List&lt;Transition&gt; possibleTransitions = new ArrayList&lt;&gt;();
    for (final Transition transition : transitions) {
        if (transition.getFromState().equals(state)) {
            possibleTransitions.add(transition);
        }
    }
    return possibleTransitions;
}
</code></pre>
    </div>