<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Efficiency</h1>

<p>You do a lot of manual shifting and pushing with your array. This is ok for small inputs, but as soon, as the distance <code>$d</code> and the size of your array <code>$n</code> grow, this becomes inefficient.</p>

<p>The main overhead however is coming from calling <code>rotateOnce</code>. <a href="http://php.net/manual/en/functions.arguments.php" rel="nofollow noreferrer">Parameters are passed</a> by value by default. That means the array is copied every time the function is called. You could <a href="http://php.net/manual/en/functions.arguments.php#functions.arguments.by-reference" rel="nofollow noreferrer">pass it by reference</a>:</p>

<pre><code>function rotateOnce(&amp;$a) {}
</code></pre>

<p>or simply include the two lines in your original function:</p>

<pre><code>function rotLeft($a, $d) {
    $n = count($a);

    for ($i = 0; $i &lt; $d; $i++) {
        $left = array_shift($a);
        $a[] = $left;
    }

    return $a;
}
</code></pre>

<p>I would guess that constraints on HackerRank mean, that you can expect values in that range and don't need to test inputs yourself.</p>

<p>This is now significant faster, but still slow especially for large distances <code>$d</code>.</p>

<hr>

<p>That being said, I would take a look at PHP's internal array functions and think of a way, how to use them in combination to increase performance.</p>

<p>My naive approach would be something like this</p>

<ul>
<li>if <code>d</code> is <code>0</code> or the same as the array's size, return the original</li>
<li>else split the array into two chunks at index <code>$d</code></li>
<li>combine both arrays and return the result</li>
</ul>

<p>The function could look like this <sup>Don't hover if you don't want to get spoiled</sup>:</p>

<blockquote class="spoiler">
  <p> </p><pre><code>
 function rotLeft($a, $d) {
     if (count($a) == $d || $d === 0) {
         return $a;
     }

     $chunk1 = array_slice($a, 0, $d);
     $chunk2 = array_slice($a, $d);

     return array_merge($chunk2, $chunk1);
 }
 </code></pre>
</blockquote>

<p>For this input:</p>

<pre><code>$a = range(1, 100000);
$n = count($a);
$d = 500;
</code></pre>

<p>â€¦ I've measured these times on my local machine<sup>*</sup>:</p>

<ul>
<li>original: <em>1.8130s</em></li>
<li>optimized: <em>0.4294</em></li>
<li>rewritten: <em>0.0054s</em></li>
</ul>

<hr>

<h1>Exponential expression vs. bitwise Operators</h1>

<p>Your program has a flaw. It won't calculate the result correctly for large array sizes, because of this:</p>

<blockquote>
<pre><code>$n &lt;= 10 ^ 5
</code></pre>
</blockquote>

<p><code>^</code> is <a href="http://php.net/manual/en/language.operators.bitwise.php" rel="nofollow noreferrer">bitwise Xor</a> and not <a href="http://php.net/manual/en/function.pow.php" rel="nofollow noreferrer"><code>pow</code></a>:</p>

<pre><code>pow(10, 5);
10 ** 5;
</code></pre>

<hr>

<h1>Try to avoid globals</h1>

<p>I can see, that <code>n</code> is an input parameter that is not part of the function's given signature. However, I would try to avoid globals and get the value manually, if needed:</p>

<pre><code>$n = count($a);
</code></pre>

<p>You can read more about this here:</p>

<ul>
<li><a href="https://stackoverflow.com/q/5166087/1456376">PHP global in functions
</a></li>
<li><a href="https://stackoverflow.com/q/1557787/1456376">Are global variables in PHP considered bad practice? If so, why?</a></li>
</ul>

<hr>

<p><sub><sup>*</sup> macOS 10.13, I7 2.5 GHz, 16GB RAM, MAMP PHP 7.2.1</sub></p>
    </div>