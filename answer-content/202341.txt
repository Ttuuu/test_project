<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It is great to see you are really taking reviews seriously and are trying to learn something and improve yourself. That really makes us reviewers like what we are doing. I may not be the best here, but I will still try :)</p>

<p>I very much like your approach with smart pointers (<code>unique_ptr</code>). I do not think that was that trivial as <a href="https://codereview.stackexchange.com/a/196462/52292">JDÅ‚ugosz</a> stated it. I was also wondering about all the <code>explicit</code> constructors in <code>Node</code> but then spotted the <code>emplace</code> and then it <em>clicked</em> (before going down the rabbit hole of reading the previous reviews).</p>

<p>The main problem with the code is, that it is big and hard to review. I had to copy-paste it to editor to review it. I would personally organise it a bit differently and will tell you why:</p>

<h2>Method declaration vs. body</h2>

<p>It may appear to be good to first declare the class with all the methods and stuff and then later define bodies for all the methods, maybe because you got used to header + source pair. I have a bit different opinion about this. Splitting it like this, especially when the body is small, not only makes you type a lot more than you need, but it makes it harder to see the logic as well, harder to review, harder to check, harder to maintain. I can understand that the declarative part could serve as a documentation (see what it provides separated from how it does it), but there are other tools for documentation and seeing such things... (so I prefer inline body, most of the time, if it is not too big.)</p>

<h2>Documentation</h2>

<p>Documenting your code properly is very important and there are good tools to help you, namely <a href="http://www.doxygen.nl/manual/docblocks.html" rel="nofollow noreferrer">doxygen</a>. Try it. I believe you will understand how valuable <code>/// documenting comments</code> can be. <code>///&lt; inline documentation as well</code> But leave your hints (like <code>// copy constructor</code>) in normal comments or remove these completely (such things should become obvious). But do comment the logic if it is not trivial (maybe with <a href="https://stackoverflow.com/questions/3279543/what-is-the-copy-and-swap-idiom">links like this</a>).</p>

<h2>The rule of five or three or ... <a href="https://stackoverflow.com/questions/3279543/what-is-the-copy-and-swap-idiom">copy and swap</a></h2>

<p>I can understand that you are still learning, but maybe it is time to actually understand what it does, how it does it and what are the alternatives. Just follow the link for full explanation and consider this:</p>

<pre><code>template &lt;class T&gt;
class DoubleLinkedList {
public:
    // see https://stackoverflow.com/questions/3279543/what-is-the-copy-and-swap-idiom
    DoubleLinkedList&amp; operator=(DoubleLinkedList other) {
        swap(*this, other);
        return *this;
    }
//...
}
</code></pre>

<h2>do_pop_front()</h2>

<pre><code>if (!tail) tail = head.get(); // update tail if list was empty before
</code></pre>

<p>Really? This does not sound right. Did you test it?
...and we are back again to documentation: there are many (at least three) versions of doubly-linked lists:</p>

<ol>
<li>Null-terminated on both ends (what your version appears to be)</li>
<li>Cyclic (head-&gt;previous == tail, tail-&gt;next == head, unless empty or you make the very list an empty node, which is easiest to implement)</li>
<li>Hybrid (last-&gt;next = nullptr, first-&gt;prev == last ... this has some advantages, you need only one pointer in the list and you can still easily terminate the for-each loop on nullptr ... but not the reverse_iterator).</li>
</ol>

<p>Which implementation is it trully? Maybe something else? You should document it:</p>

<pre><code>/// Doubly Linked List with both ends null-terminated
template &lt;class T&gt;
class DoubleLinkedList {
</code></pre>

<p>or maybe use <code>///\brief</code> and some other features <em>doxygen</em> knows (a bit like JavaDoc).</p>
    </div>