<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It's a bit counter intuitive you store <code>Value</code> as <code>Object</code> if the class <code>IndexableOption&lt;T&gt;</code> is <em>generic</em>. I understand you are trying to find a common type to store both <code>T</code> as <code>T[]</code>. However, if <code>T : struct</code> then what happens in case <code>Value</code> is <code>T</code> is a thing called <a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/types/boxing-and-unboxing" rel="nofollow noreferrer">boxing</a>*.</p>

<p>From reference source:</p>

<blockquote>
  <p>Performance</p>
  
  <p><em>In relation to simple assignments, boxing and unboxing are computationally expensive processes. When a value type is boxed, a new
  object must be allocated and constructed. To a lesser degree, the cast
  required for unboxing is also expensive computationally.</em></p>
</blockquote>

<p>For instance, in <code>Equals</code> there is an expensive unboxing:</p>

<blockquote>
<pre><code>if (IsIndexed)
{
    return EqualityComparer&lt;T[]&gt;.Default.Equals((T[])Value, (T[])other.Value);
}
else
{
    //                                        unboxing#1   unboxing#2
    return EqualityComparer&lt;T&gt;.Default.Equals((T)Value, (T)other.Value);
}
</code></pre>
</blockquote>

<p>I don't think it's worth storing both <code>T</code> as <code>T[]</code> in the same property. Why don't you use 2 properties instead and use the one associated with the value of <code>IsIndexed</code>?</p>

<pre><code>public T Value { get; }
public T[] IndexedValue { get; }
</code></pre>

<p>Equals refactored:</p>

<pre><code>if (IsIndexed)
{
    return EqualityComparer&lt;T[]&gt;.Default.Equals(IndexedValue , other.IndexedValue );
}
else
{
    return EqualityComparer&lt;T&gt;.Default.Equals(Value, other.Value);
}
</code></pre>

<p>One other thing, you may not like that the consumer has to call <code>IsIndexed</code> in order to decide to use <code>Value</code> or <code>IndexedValue</code>. If you really must, you can shield both properties from public access and still decide to use some boxing. But at least, internally, no redundant boxing/unboxing takes place.</p>

<pre><code>protected T Value { get; }
protected T[] IndexedValue { get; }

public object ValueRef =&gt; IsIndexed ? IndexedValue : Value;
</code></pre>

<p>Or you may want to turn the logic around without using boxing:</p>

<pre><code>public T[] ValueRef =&gt; IsIndexed ? IndexedValue : new[] { Value };
</code></pre>

<p>Which makes me wonder, perhaps you should only store <code>T[]</code> and return either the array or its sole element. This should avoid most recurring if-statements as well. I also think you should only use <code>EqualityComparer&lt;T&gt;</code>, not <code>EqualityComparer&lt;T[]&gt;</code>, but that has to be verified.</p>

<hr>

<p>Footnote:</p>

<ul>
<li><sup>Boxing is the process of converting a value type to the type object or to any interface type implemented by this value type</sup></li>
</ul>
    </div>