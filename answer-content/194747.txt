<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As noted, there is not quite enough information about the inputs to this function to give confident advice. </p>

<pre><code>for pix in allPixels: #for every existing pixel
</code></pre>

<p>This is almost certainly the wrong way of doing this, and the cause of most of your slowness. Rather than checking each pixel and confirming whether it is in the location you're looking at, use a data structure which allows you to select the desired pixel immediately. @vnp suggests using a <code>dict</code>. You could also use a <code>set</code> or just a 2D array matching the coordinates. Given that this is about pixels, a 2D array is the most natural representation. I'd use it unless the pixels in question are very sparse, in which case I'd maintain a <code>set</code>.</p>

<hr>

<p>If this still isn't fast enough, you'd probably want to avoid using Python to loop through each pixel. That's not to say don't write your program in Python. There are python libraries like <a href="https://docs.scipy.org/doc/numpy-1.14.0/reference/" rel="nofollow noreferrer">numpy</a> that let you operate on whole arrays at once. Under the hood, they use optimised C functions and exploit tricks like SIMD vectorisation to do things crazy fast. </p>

<p>See <a href="https://codereview.stackexchange.com/a/160854/167190">this previous question</a> for an example of how to do so. It's about Conway's Game of Life, which is all about counting neighbouring pixels. You should be able to adapt it.</p>
    </div>