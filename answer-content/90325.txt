<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Avoid magic numbers</h2>

<blockquote>
<pre><code>        for (int row = 0; row &lt; 9; row++) {
            for (int col = 0; col &lt; 9; col++) {
                numPossible = getNumPossible(grid);
                if (numPossible[row][col] == 1) {
                    enterValue(getPossibleValues(row, col, grid).get(0), row,
                            col, grid);
                    valueAdded = true;
                }
            }
            // If at the end of the loop and a value was added, repeat.
            if (row == 8 &amp;&amp; valueAdded) {               
                row = -1;
                valueAdded = false;
            }
        }
</code></pre>
</blockquote>

<p>In this code, you have three magic numbers:  <code>9</code>, <code>8</code>, and <code>-1</code>.  The start of a solution is the declaration of a constant, which would likely happen outside the current method but in the same class:  </p>

<pre><code>    private static final int BOARD_SIZE = 9;
</code></pre>

<p>Then you can use it like </p>

<pre><code>        for (int row = 0; row &lt; BOARD_SIZE || ! valueAdded; row++) {
            // If finished with the board and a value was added, repeat.
            if (row &gt;= BOARD_SIZE) {               
                row = 0;
                valueAdded = false;
            }

            for (int col = 0; col &lt; BOARD_SIZE; col++) {
</code></pre>

<p>Note that the <code>valueAdded</code> check moves into the <code>row</code> loop.  This allows us to move the reset check to the beginning of the loop, eliminating two magic numbers:  <code>8</code> (replaced by <code>BOARD_SIZE</code>) and <code>-1</code>.  Setting <code>row</code> to <code>0</code> is clearer about what it is doing than setting it to <code>-1</code> so that it could be incremented to <code>0</code>.  </p>

<p>A side effect of this is that the compiler has a chance to optimize out the second check.  Note that <code>row &lt; BOARD_SIZE</code> and <code>row &gt;= BOARD_SIZE</code> are logical negations of each other.  This may create a slight performance improvement, although it is unlikely to make a significant difference.  </p>

<p>Also consider moving this section of code into its own method.  This method is rather long.  You could get this block of code down to a single line by abstracting it into a method that takes <code>grid</code> as a parameter.  Note that you'd have to move the <code>numPossible</code> declaration after the method call.  </p>

<h2>An <code>else</code> is unnecessary after a <code>return</code></h2>

<blockquote>
<pre><code>        if (isFull(grid)) {
            return grid;
        }
        else {
</code></pre>
</blockquote>

<p>Since you <code>return</code> in the <code>if</code> clause, you can leave off the <code>else</code>.  The rest of the function will only be reached in the <code>else</code> case anyway.  This saves you a level of indent.  </p>

<h2>Declare as the interface rather than the implementation</h2>

<blockquote>
<pre><code>        ArrayList&lt;Byte&gt; pValues = getPossibleValues(lowestRow, lowestCol,   grid);
</code></pre>
</blockquote>

<p>This works but makes your implementation difficult to modify.  Unless you are using functionality limited only to that implementation, you should declare as the interface instead.  </p>

<pre><code>        List&lt;Byte&gt; pValues = getPossibleValues(lowestRow, lowestCol,   grid);
</code></pre>

<p>This will allow you to change the implementation without changing this declaration.  </p>

<blockquote>
<pre><code>private ArrayList&lt;Byte&gt; getPossibleValues(int row, int col, byte[][] grid) {
</code></pre>
</blockquote>

<p>Same thing here.</p>

<pre><code>private List&lt;Byte&gt; getPossibleValues(int row, int col, byte[][] grid) {
</code></pre>

<p>Note that if you actually wanted to only return an <code>ArrayList</code> here, you could still change the first one.  A <code>List</code> variable will always accept any object that implements the <code>List</code> interface.  </p>

<p>You can actually go even more generic if you want.</p>

<blockquote>
<pre><code>        for (byte pValue : pValues) {
</code></pre>
</blockquote>

<p>This can become </p>

<pre><code>        for (byte pValue : getPossibleValues(lowestRow, lowestCol,   grid)) {
</code></pre>

<p>In which case you don't need the <code>pValues</code> variable.  </p>

<h2>You could declare a <code>Grid</code> class</h2>

<blockquote>
  <p>It seems very roundabout to have to return a byte[1][1] but I can't think of a better way to still satisfy the return type.</p>
</blockquote>

<p>The problem here is that you are using a primitive type.  If you declare a <code>Grid</code> class and then have the method return a <code>Grid</code> object, you can <code>return null</code> on an invalid case.  This would also allow you to move some operations into the <code>Grid</code> class.  Consider if you want to make <code>Grid</code> implement <code>Iterable</code> so that you can use it in the <code>for</code> each form.  Perhaps you don't want to engage in that level of engineering, but it does allow for some elegant solutions.  </p>
    </div>