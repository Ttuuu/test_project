<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>One thing that jumps off the page immediately is that you are dealing with raw pointer management (via new[] and delete[]).  In 2018, it should be very rare that a casual programmer need to do this.  There are a lot of good reasons not to.</p>

<p>Some of the most compelling reasons involve moving/assigning/copying objects...and you're not doing that yet, since you just have one snake and one fruit.  But even still, you have a memory leak, just because your <code>addElement()</code> routine does allocations of the <code>snakeBody</code> with <code>new []</code> that it never frees in the destructor.</p>

<p><em>(Note: You'd do well to go ahead and start running something like Valgrind or Address Sanitizer, or Dr. Memory on Windows, so you get a report of memory leaks and errors.  But you should have a lot fewer of them if you learn and follow modern practices.)</em></p>

<h2>learn and use <a href="https://en.cppreference.com/w/cpp/container/vector" rel="nofollow noreferrer"><code>std::vector</code></a></h2>

<p>Your entire addElement() routine is essentially trying to implement the std::vector container's <code>push_back()</code>.  If you're trying to learn low-level memory management on purpose, I'd encourage you to do it by breaking off that task into writing a <code>my_vector</code> class.</p>

<p>But if you're doing it because you don't know what a std::vector is, then I'd certainly urge you to look through a tutorial.  Here's <a href="https://embeddedartistry.com/blog/2017/6/20/an-introduction-to-stdvector" rel="nofollow noreferrer">one</a> and <a href="https://medium.com/the-renaissance-developer/c-standard-template-library-stl-vector-a-pretty-simple-guide-d2b64184d50b" rel="nofollow noreferrer">another</a> I can find offhand on the present-day web.</p>

<p>So <code>#include &lt;vector&gt;</code> in your project, and start by changing:</p>

<pre><code>sf::RectangleShape* snakeBody;
sf::RectangleShape* snakeBodycopy;
</code></pre>

<p>into:</p>

<pre><code>std::vector&lt;sf::RectangleShape&gt; snakeBody;
</code></pre>

<p>Tutorials and reference guides should hopefully give you enough examples to adapt your program to that change and keep it working.  If not, you can ask for help on StackOverflow.  It may not seem easy at first, but it really is easier and less error prone than what you're attempting here.</p>

<hr>

<h2>start remembering the catchphrase: <a href="https://stackoverflow.com/questions/44997955/rule-of-zero-confusion">"Rule of Zero"</a></h2>

<p>You don't have to fully absorb what "rule of zero" means yet...but maybe read around on it and start getting the inkling that it's important.  It applies to why you don't want raw pointers in your classes.</p>
    </div>