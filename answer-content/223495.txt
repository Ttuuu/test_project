<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If you really want to cut down on the number of characters that you need to guarantee a certain amount of robustness, it would be wise to pick a greater pool of characters to choose from. At the moment you are basically left with 16 valid values (0, 1, ..., 9, A, ..., F). Case does not count here since <code>0xA</code> is equal to <code>0xa</code>. For 6 characters that leaves you with <span class="math-container">\$16^6=2^{24}\$</span> possible short-urls.</p>

<p>If you were to encode them using the <a href="https://docs.python.org/3/library/base64.html" rel="nofollow noreferrer">base64</a> alphabet, you would have 64 characters to choose from, which grants you <span class="math-container">\$64^6=2^{36}\$</span> possible short-urls. </p>

<pre class="lang-py prettyprint-override"><code>import base64

desired_length = 6
encoded_hash = base64.urlsafe_b64encode(
    str(hash("www.google.com")).encode("ascii")
)
minified_address = encoded_hash[:desired_length]
</code></pre>

<p>A character of a base64 string will represent 6bit instead of 4bit as a hex value does. As a consequence you would need to pick a length that is a multiple of two if you ever wanted to revert the encoded bytes, but that should not be necessary in your case. Take note that I opted for the url-safe version of the base64 alphabet which replaces <code>/</code> by <code>_</code> and <code>+</code> by <code>-</code>.</p>

<hr>

<p>It might also be worth to think about using a "stable" hash function, e.g. from <a href="https://docs.python.org/3/library/hashlib.html" rel="nofollow noreferrer"><code>hashlib</code></a> or one of the general purpose hash functions presented <a href="http://www.partow.net/programming/hashfunctions/" rel="nofollow noreferrer">here on this site</a>, instead of the built-in <code>hash(...)</code> which uses a random seed to <a href="https://stackoverflow.com/a/27522708">mitigate certain attacks</a> (also <a href="https://docs.python.org/3/reference/datamodel.html#object.__hash__" rel="nofollow noreferrer">here</a> in the documentation of <code>object.__hash__</code>). But that depends on whether you want to map <code>www.google.com</code> to the same short-url every time your program is queried or not.</p>
    </div>