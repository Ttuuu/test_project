<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Responsibilities</h1>

<p>A class should have only one <a href="http://principles-wiki.net/principles:single_responsibility_principle" rel="nofollow noreferrer">responsibility</a>. Robert C. Martin describes it with <em>"There should never be more than one reason for a class to change"</em>.</p>

<p>The class <code>WordChainBuilder</code> has more than one responsibilities. An indicator for this is that it has <em>many private methods</em>. I saw a video (I will provide a reference to it) in which <a href="https://www.sandimetz.com/" rel="nofollow noreferrer">Sandi Metz</a> said she generally avoids private methods. </p>

<p>I think you can not always avoid private methods, but if you have too many, your class definitely has more than one responsibility.</p>

<p>Responsibilities of <code>WordChainBuilder</code>:</p>

<ul>
<li>build the word chain</li>
<li>read from the file system</li>
<li>do operations on list</li>
<li>do operations on strings</li>
</ul>

<h1><a href="https://blog.codinghorror.com/code-smells/" rel="nofollow noreferrer">Type Embedded in Name</a></h1>

<blockquote>
  <p>Avoid placing types in method names; it's not only redundant, but it forces you to change the name if the type changes.</p>
</blockquote>

<p>Because of the multiple responsibilities, there are several hidden abstractions in a class. So you have to name your variables and methods somehow.</p>

<p>Some type embedded names are:</p>

<ul>
<li><code>startWord</code> &amp; <code>destinyWord</code></li>
<li><code>findDerivedNodes</code> &amp; <code>findDestinyNode</code></li>
<li><code>findDerivedWords</code></li>
<li><code>destinyNode</code> &amp; <code>derivedNodes</code></li>
</ul>

<h1><a href="http://wiki.c2.com/?PrimitiveObsession" rel="nofollow noreferrer">Primitive Obsession</a></h1>

<blockquote>
  <p>Primitive Obsession is using primitive data types to represent domain ideas. For example, we use a String to represent a message [...]</p>
</blockquote>

<p>I see some variables with the name <code>startWord</code>, <code>destinyWord</code> and <code>words</code>, a method <code>derivesByOne</code> that interacts with to words, but I can't find a data type <code>Word</code>.</p>

<p>We can created it and copy/paste the method <code>derivesByOne</code> into it. After that we can rename the variable names <code>startWord</code> and <code>destinyWord</code> to <code>start</code> and <code>destiny</code> to avoid the code small <a href="https://blog.codinghorror.com/code-smells/" rel="nofollow noreferrer">Type Embedded in Name</a>.</p>

<pre class="lang-java prettyprint-override"><code>class Word {

    private String value;

    public Word(String word) {/*..*/}

    public boolean isDerivedByOne() {/*..*/}

   // equals &amp; hashcode
}
</code></pre>

<h1>First Class Collection</h1>

<p>The First Class Collection [FCC] is an idea of the <a href="https://www.cs.helsinki.fi/u/luontola/tdd-2009/ext/ObjectCalisthenics.pdf" rel="nofollow noreferrer">Object Calisthenics</a>.</p>

<blockquote>
  <p>Any class that contains a collection should contain no other member variables. Each collection gets wrapped in its own class, so now behaviors related to the collection have a home. </p>
</blockquote>

<p>With an FCC you can extract the methods <code>findDerivedNodes</code> and<code>findDestinyNode</code> into their own class. Normally a collection of <code>Nodes</code>s is a graph - so the new class might have the name<code>Graph</code> or <code>NodeCollection</code>. In addition, the <code>removeWordsAlreadyUsed</code> and<code>findDerivedWords</code> methods can be in their own class called <code>Dictionary</code> or<code>WordCollection</code>.</p>

<h1><a href="http://wiki.c2.com/?LawOfDemeter" rel="nofollow noreferrer">Law Of Demeter</a></h1>

<blockquote>
  <p>Only talk to your immediate friends." E.g. one never calls a method on an object you got from another call </p>
</blockquote>

<p>The line <code>node.getWord().equals(destinyWord)</code> doesn't follow the Law of Demeter. <code>Note</code> should have a method <code>contains</code> and than the line can be replaced with <code>node.contains(destinyWord)</code></p>

<h1><a href="https://en.wikipedia.org/wiki/Null_object_pattern" rel="nofollow noreferrer">Null Object Pattern</a> And New Methods</h1>

<p>Because you return in the default case in <code>findDestinyNode</code> a <code>null</code> you have to check on two places if a <code>Node</code> is <code>null</code> (<code>node.getPredecessor() != null)</code>
 and <code>destinyNode != null</code>)</p>

<p>We can get ride of the checks by using the Null Object Pattern. For this you have to return in <code>findDestinyNode</code> as default a <em>null object</em> <code>EmptyNode</code> which we have to implement. This object shares the same interface with <code>Node</code> so they implement the same methods.</p>

<p>When we create for <code>destinyNode != null</code> a method <code>isEmpty</code>, the "normal <code>Node</code>" will return <code>false</code> and the <code>EmptyNode</code> <code>true</code>. For <code>node.getPredecessor() != null</code> we can write a method <code>hasPredecessor</code> where the "normal <code>Node</code>" returns <code>true</code> and the <code>EmptyNode</code> <code>false</code>.</p>

<h1>Better Data Structure</h1>

<p>The method <code>buildChain</code> uses an<code>ArrayList</code> to add all predecessors. Since they are appended to the end of the list, it is reversed with <code>Collections.reverse (chain)</code>.</p>

<p>The time performance of this method is something like <span class="math-container">\$O(nÂ²)\$</span>, where the first <span class="math-container">\$n\$</span> is the number of <code>predecessor</code> and the second <span class="math-container">\$n\$</span> the <a href="https://docs.oracle.com/javase/7/docs/api/java/util/Collections.html#reverse(java.util.List)" rel="nofollow noreferrer">time complexity of Collections.reverse</a></p>

<p>The interface <code>List</code> provides a method <code>add(index, element)</code> which we can use. If we add all elements to the first position we don't have to reverse it. But <code>ArrayList</code> has <span class="math-container">\$O(n)\$</span> for adding 1 element to the first index. Instead of the <code>ArrayList</code> we can use a <code>LinkedList</code> which has for the same operation <span class="math-container">\$O(1)\$</span> and the hole method would have a time complexity of <span class="math-container">\$O(n)\$</span></p>

<pre class="lang-java prettyprint-override"><code>private List&lt;String&gt; buildChain(Node node) {
    List&lt;String&gt; chain = new LinkedList&lt;&gt;();
    while (node.getPredecessor() != null) {
        chain.add(0, node.getWord());
        node = node.getPredecessor();
    }
    chain.add(node.getWord());
    return chain;
}
</code></pre>
    </div>