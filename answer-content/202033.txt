<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I know this is an old question but people finding it may find this answer of value.  I've tested 4 versions of StringBuilder using Excel 2013 and the fastest version appears to be an optimized version of Blackhawk's code (The optimized code listed below).  The list below shows one example of the time it took each version to do Blackhawk's test 1000 times (100,000,000 total appends).  The new optimized version is labeled "New" and took a little longer than 34 seconds.  Martin.Roller's array-based code is labeled "Ary", takes a little more than 36 seconds, and is nearly tied with Blackhawk's code.  I've ran the test several times and Blackhawk's code does come in ahead of Martin.Roller's code some of the time.  Blackhawk's code is labeled "Old" and takes a little more than 36 seconds.  The "Mid" version came in last and is a version I created using VBA's MID statement to replace the content of a string.  Removing the "On Error" in the code below should improve the speed even more, but make sure the calling code never builds a string longer than VBA can handle.</p>

<ol>
<li>The New StringBuilder took: 34.396 seconds</li>
<li>The Ary StringBuilder took: 36.467 seconds</li>
<li>The Old StringBuilder took: 36.605 seconds</li>
<li>The Mid StringBuilder took: 40.141 seconds</li>
</ol>

<p>New optimized version of Blackhawk's StringBuilder:</p>

<pre><code>Option Compare Text
Option Explicit

Private Declare Sub CopyMemory Lib "kernel32.dll" Alias "RtlMoveMemory" (ByVal dst As Long, ByVal src As Long, ByVal Length As Long)

Private Const InitialCharCount As Long = 16
' Define members
Private mUBound As Long
Private mString() As Byte

Private Sub Class_Initialize()
    Clear
End Sub

Public Sub Clear()
    mUBound = -1
    ReDim mString(0 To InitialCharCount * 2 - 1) 'Each unicode character is 2 bytes
End Sub

Public Function Append(value As String) As StringBuilder
Dim NewUBound As Long
Dim CapacityUBound As Long
On Error GoTo Failed
    NewUBound = mUBound + LenB(value)

    If NewUBound &gt; UBound(mString) Then
        CapacityUBound = UBound(mString) * 2 + 1
        If NewUBound &gt; CapacityUBound Then CapacityUBound = NewUBound * 2 + 1
        ReDim Preserve mString(0 To CapacityUBound)
    End If
    CopyMemory VarPtr(mString(mUBound + 1)), StrPtr(value), LenB(value)

    mUBound = NewUBound
    Set Append = Me
    Exit Function

Failed:
    Stop
    Resume
End Function

Public Property Get Length() As Long
    Length = (mUBound + 1) / 2
End Property

Public Function ToString() As String
    ToString = Mid(mString, 1, Length)
End Function
</code></pre>
    </div>