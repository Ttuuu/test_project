<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Minor improvements to documentation and structure but otherwise no significant improvements. I am sure there are optimization suggestions to be made but this seems small enough a program so as to not really benefit too much from these suggestions. If you want to be pedantic you could use type checking by importing the typing module.</p>

<p><strong>Suggestion 1</strong></p>

<p>Keep two lines between dependencies (import) and the rest of the code like this: </p>

<pre><code>import random


options = ['rock', 'paper', 'scissors']
</code></pre>

<p>as well as between methods.</p>

<pre><code>    # ...
    result = (a - b) % 3 #modmath
    return result
# space 1
# space 2
def finish(z): # report the results
    global wins
    # ...
</code></pre>

<p>For reference on stylist things such as this check out 
<a href="https://www.python.org/dev/peps/pep-0008/#imports" rel="nofollow noreferrer">https://www.python.org/dev/peps/pep-0008/#imports</a></p>

<p><strong>Suggestion 2</strong></p>

<p>You can use docs strings to describe a function or method instead of lone comments. Doc strings are for "documentation" and help people better understand your methods or blocks of code. The # comments are for commenting on a single or several lines of code and understanding each's specific functionality, say in context of the method as a whole. </p>

<p>Example: </p>

<pre><code>def combatCheck(a, b):
'''Determines combat choice and returns the result'''
    a = convertible(a)
    b = convertible(b)
    result = (a - b) % 3 #modmath # &lt;-- this comment "modmath" is not too helpful 
    return result
</code></pre>

<p><strong>Suggestion 3</strong></p>

<p>You can use type checking to show people what type of data goes into your methods.</p>

<p>For this include:</p>

<pre><code>import typing
</code></pre>

<p>Examples:</p>

<pre><code># the line below tells people the param and return types, and doesn't
# affect how the code runs
def combatCheck(a: str, b: str) -&gt; int: 
    a = convertible(a)
    b = convertible(b)
    result = (a - b) % 3 #modmath
    return result
</code></pre>

<p>Since finish just prints a statement we type check it as such</p>

<pre><code>def finish(z: int) -&gt; None: 
'''Method to print results to user'''
    global wins
    global losses
    global ties
# etc...
</code></pre>
    </div>