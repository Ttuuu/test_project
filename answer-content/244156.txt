<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>After direct feedback on <a href="https://codereview.stackexchange.com/a/244128/2842">sds's answer</a> my code is now</p>
<pre><code>(defun factors (n)
    "return a list with prime factors of n"
    (let ((result))
        (flet ((transfer-factor (fac)
                "transfer available fac from number `n` to list `result`"
                (loop with quotient and remainder
                      do (setf (values quotient remainder)
                               (floor n fac))
                      while (zerop remainder)
                      do (setf n quotient)
                      do (push fac result))))
            (transfer-factor 2)             ; do 2
            (loop for i from 3 by 2         ; do 3, 5, 7, 9, ...
                  while (&gt;= n (* i i))      ; until sqrt of what's left of n
                  do (transfer-factor i)))
        (when (&gt; n 1) (push n result))      ; n may still be a factor
        result))                            ; return complete list

;; in the repl use
;; (first (factors 600851475143))
</code></pre>
<p>Incorporated using <code>floor</code> to get quotient and remainder in one operation, incorporated the <code>flet</code> <em>inner function</em>.</p>
<p>I learned to use <code>values</code> and a lot more about the <code>loop</code> construct.<br>
Thanks @sds</p>
    </div>