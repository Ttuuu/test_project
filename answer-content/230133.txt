<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You have done a great job.  Here’s my suggestions:</p>

<ul>
<li><p>Sort the include directives in alphabetical order. </p></li>
<li><p>Instead of using the generic name <code>Iter</code>, it may be a good idea to express the random access requirement: something like <code>RandomIt</code>. </p></li>
<li><p>Iterators should be passed by value, not const reference.  Don’t be afraid to copy iterators — they are intended to be lightweight objects that are frequently copied, and passing them by const reference will incur overhead over passing them by value because of the additional indirection. </p></li>
<li><p>It is more logical to use <code>auto piv = std::prev(end);</code>, because <code>int y = x - 1;</code> is more logical then <code>int y = x; --y;</code>, right?  (Of course you can use <code>end - 1</code>, but that may be less efficient if the subtraction operator of the iterator isn’t inlined.)</p></li>
<li><p>You can use <code>std::iter_swap</code> instead of manually ADL’ing <code>swap</code>. </p></li>
<li><p>Instead of enforcing <code>&lt;=</code>, consider taking a custom comparator as the standard algorithms do.  (Also note that the standard library facilities always use <code>&lt;</code> as the comparator by default.  <code>&lt;=</code> is not required unless you provide a custom comparator.)</p></li>
</ul>

<p>Also, always choosing last element as the pivot can make the code vulnerable to reversely sorted sequences.  You can consider taking a random number generator to randomize the choice if this becomes a problem.</p>
    </div>