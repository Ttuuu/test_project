<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>First things first, don't use <code>using namespace std</code> in header files, where your radix sort implementation should be. Besides, convenience isn't a valid excuse when the only thing you import from <code>std</code> is <code>cout</code>: just type <code>std::cout</code> and you're done.</p></li>
<li><p>One liner functions are often useless and noisy: you need to refer to the implementation to know exactly what they do, so they don't make the code more readable, and you have to come up with a name, which is not always easy. In the case of <code>getNumberAtPosition</code>, for instance, it's impossible to tell from the name if the position is meant for the most or least significant digit, and both are equally likely in a radix sort algorithm.</p></li>
<li><p>everything that isn't meant to change should be <code>const</code>. The only place where it isn't idiomatic is in function signature, where you often don't tag built-in type arguments passed by value as const. </p></li>
<li><p>Also, don't alias variables: <code>length</code> is only used to define <code>sizeOfEachBucket</code>, that's two names to track down instead of one.</p></li>
<li><p>Use the standard library: there may not be many things inside compared to other languages, but what's inside is very well implemented. It will also make your code more concise and expressive. For instance, the largest element in a <code>[first, last)</code> sequence is the result of <code>std::max_element(first, last)</code> (<code>std::max_element</code> resides in <code>&lt;algorithm&gt;</code>). Using standard containers is also a statement: a constant size array will be a <code>std::array</code>, whereas a variable-size one will be a <code>std::vector</code>.</p></li>
<li><p>Avoid <em>naked loops</em>: by that I mean loops like <code>for (int i = 0; i &lt; z; ++i)</code>. The nested ones are particularly difficult to read, with all those meaningless one-letter variable names. Use either <em>range based for loops</em> when you iterate over the whole container (e.g: <code>for (auto item : vector)</code>) or named algorithm when your loop has a standardly implemented purpose (<code>std::for_each</code>, <code>std::copy</code>, etc.).</p></li>
<li><p>When implementing your own algorithms, try to use an stl-like interface: iterators are preferable because they abstract the concrete container-type. Your algorithm won't work on an <code>std::list</code> although it very well could be (radix sort doesn't rely on random access like quick sort does).</p></li>
</ul>

<p>Here's an example of better-looking (though not thoroughly tested) code:</p>

<pre><code>#include &lt;algorithm&gt;
#include &lt;vector&gt;
#include &lt;array&gt;
#include &lt;cmath&gt;

template &lt;typename Iterator&gt;
void radix_sort(Iterator first, Iterator last) {
    const int max_divisor = std::pow(10, std::log10(*std::max_element(first, last)));
    for (int divisor = 1; divisor &lt; max_divisor; divisor *= 10) {
        std::array&lt;std::vector&lt;int&gt;, 10&gt; buckets;
        std::for_each(first, last, [&amp;buckets, divisor](auto i) {
            buckets[(i / divisor) % 10].push_back(i);
        });
        auto out = first;
        for (const auto&amp; bucket : buckets) {
            out = std::copy(bucket.begin(), bucket.end(), out);
        }
    }
}   
</code></pre>

<p><strong>EDIT</strong>: since the algorithm exposed in the question relies on decimal digits, I also formulated a base-10 based algorithm. But thinking back about this, I feel like my answer isn't complete if I don't precise that a base-two approach is more optimal (and more generally used as far as I know). Why is that?</p>

<ul>
<li><p>because binary arithmetic is easier for a computer (not a very strong reason since decimal arithmetic is often optimized into binary arithmetic by the compiler);</p></li>
<li><p>because -and that's a much stronger reason- you can the rely on a very well-known algorithm to distribute your number between buckets, an algorithm that moreover does it in place, thus without any memory allocation; </p></li>
<li><p>by the way, that algorithm is <code>std::stable_partition</code></p></li>
</ul>

<p>And here is a sample:</p>

<pre><code>template &lt;typename Iterator&gt;
void binary_radix_sort(Iterator first, Iterator last) {
    using integer_type = std::decay_t&lt;decltype(*first)&gt;;
    bool finished = false;
    for (integer_type mask = 1; !finished; mask &lt;&lt;= 1) {
        finished = true;
        std::stable_partition(first, last, [mask, &amp;finished](auto i) {
            if (mask &lt; i) finished = false;
            return !(mask &amp; i);
        });
    }
}
</code></pre>
    </div>