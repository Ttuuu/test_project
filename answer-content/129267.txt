<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The empty array case seems off. From the problem description, if given an empty array as input, it means that \$N\$ is 0 and the range for values is \$[1..1]\$ thus the missing value is 1.</p>

<p>For the length 1 case, the missing value can never be in the list so returning the first element in the list is incorrect. If \$N\$ is 1, the range is \$[1..2]\$ and the missing value is 1 if the first value is 2, and 2 if the first value is 1.</p>

<p>For theses two special cases I am not sure that I would bother with custom code. It makes the code faster to run in these cases at the cost of making the code more complicated to read and maintain - OK, it is only an exercise and will not be maintained but the general point still applies, unless one is sure that we will have a disproportionate number of empty and 1 element arrays to be processed the custom code is not worth the cost.</p>

<p>I don't know the \$O\$ notation value for sorting the input array, creating the new array and then doing an except on two sorted arrays but it seems to be more complicated (and presumably takes longer) than simply iterating through the sorted array.</p>

<pre><code>public int FindMissing(int[] values)
{
    Array.Sort(values);
    var ret = values.Length+1;

    for (var index = 0; index &lt; values.Length; index++)
    {
        if (values[index] != index+1)
        {
            return index+1;
        }
    }

    return ret;  // handles cases where the last element is missing
                 // including empty array

}
</code></pre>
    </div>