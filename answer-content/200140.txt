<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Unfortunately you are in fact doing something wrong, but maybe not terribly! Because you are accessing the <code>Mutex</code> either side of an <code>await</code>, there is no guarantee that the same thread will be accessing it each time. The question and answer <a href="https://stackoverflow.com/questions/23153155/named-mutex-with-await">here</a> have more detail. This is only a problem if your <code>SynchronizationContext</code> doesn't guarantee <code>async</code> calls will return to the same thread (as I suspect is the case when running your tests). If you only call this code from the UI thread of a WPF app for example, you won't have any issues. The code breaks when used in a console app however.</p>

<pre><code>public class Program
{
    public static async Task Main()
    {
        using (var cts = new CancellationTokenSource(TimeSpan.FromSeconds(30)))
        {
            await Task.WhenAll(
                InterprocessSynchronizer.TryExecuteAsync("resource", c =&gt; SwitchThreads("FIRST", c), TimeSpan.FromSeconds(60), cts.Token),
                InterprocessSynchronizer.TryExecuteAsync("resource", c =&gt; SwitchThreads("SECOND", c), TimeSpan.FromSeconds(60), cts.Token)
            );
        }
    }

    private static async Task&lt;int&gt; SwitchThreads(string name, CancellationToken arg)
    {
        Console.WriteLine($"{name} ON THREAD ID {Thread.CurrentThread.ManagedThreadId}");
        await Task.Delay(1000, arg);
        Console.WriteLine($"{name} NOW ON THREAD ID {Thread.CurrentThread.ManagedThreadId}");
        return 0;
    }
}
</code></pre>

<blockquote>
  <p>Object synchronization method was called from an unsynchronized block of code</p>
</blockquote>

<p>If you encounter this error some of the suggesting in the afformentioned SO question could help.</p>
    </div>