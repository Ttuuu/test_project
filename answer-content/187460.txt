<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Thanks for sharing your code.</p>

<h1>Naming</h1>

<p>Finding good names is the hardest part in programming. So always take your time to think carefully of your identifier names.</p>

<p>Please read (and follow) the Java Naming Conventions</p>

<p>e.g.:<br>
Your boolean variables and methods returning a boolean should start with is, has, can or alike.</p>

<h1>Formatting</h1>

<p>There is a discussion out there where to place the opening braces <code>{</code>.
You choose a separate line which is more common in other languages like <code>C</code>. 
There might be valid reasons to do so but in Java the more common (yet not mandatory) position is on the same line with the proceeding statement. The three reasons why <strong>I</strong> follow this rule are:</p>

<ol>
<li>it saves one line per brace pair (making code looking more compact)</li>
<li>I cannot accidentally place code between the statement and the opening brace which in most cases would detach the braced block from the preceding statement and so change the codes logic. </li>
<li>most other Java coders do it.</li>
</ol>

<p>There is s similar reasoning why I put the closing braces on a line of their own: It is quite likely that I actually want add more code <em>inside</em> a block and thus <em>before</em> a closing brace.</p>

<p>After all stick to either one rule throughout the program.</p>

<h1>general approach</h1>

<p>Your code is a <em>procedural</em> approach to the problem.</p>

<p>Procedural approaches are not bad of their own.<br>
But Java is an <em>Object Oriented</em> programming language and if you want to become a good <em>Java</em> programmer you should start looking for more OO like solutions.</p>

<p>But OOP doesn't mean to "split up" code into random classes.</p>

<p>The ultimate goal of OOP is to reduce code duplication, improve readability and support reuse as well as extending the code.</p>

<p>Doing OOP means that you follow certain principles which are (among others):</p>

<ul>
<li>information hiding / encapsulation</li>
<li>single responsibility</li>
<li>separation of concerns</li>
<li>KISS (Keep it simple (and) stupid.)</li>
<li>DRY (Don't repeat yourself.)</li>
<li>"Tell! Don't ask."</li>
<li>Law of demeter ("Don't talk to strangers!")</li>
</ul>

<hr>

<blockquote>
  <p>i'm thinking similar - you can OO-out/ultimo, but for a mere boolean[][] you can be a bit tolerant ^_^ – Martin Frank </p>
</blockquote>

<p>My point is: this should not be solved with a "mere <code>boolean[][]</code>", especially if one wants to <em>learn</em> how to program Java.</p>

<p>I'm <em>not</em> saying that an OO approach is always best or even desirable...</p>

<blockquote>
  <p>In the case of my code, what should I have split into its own class?  – bananashavings</p>
</blockquote>

<ul>
<li><p>In my OO world there would be a <code>Cell</code> object that maintains its own state and and holds a <code>Collection</code> of its neighbors. It would inform its neighbors when its state changed. This way I only need to know the actual topology of the game field when assigning neighbors. I don't even need to create an <em>array</em> if I find a smart way to assign the neighbors <em>logically</em>...</p>

<p>For the rest of the game I'd hold the cells in a simple <code>Collection</code>. 
Consequences are:</p>

<ul>
<li>separation of <em>game control</em> and <em>business logic</em></li>
<li>no range checks during iterations</li>
</ul></li>
<li><p>Furthermore on a <em>Game of Life</em> board only a few cells <sub>(wild guessing less than 30% in average)</sub> are alive themselves or have alive neighbors. The rest will not change its state in the current iteration so I don't need to process them. </p>

<p>In procedural approach based on a mere <code>boolean[][]</code> there is no chance but processing <em>all</em> elements in <em>each</em> iteration. </p>

<p>In a <code>Collection</code> based approach I could optimize so that the collection only contains cells where its neighbors changed during last iteration by applying the <em>listener concept</em>.</p></li>
</ul>
    </div>