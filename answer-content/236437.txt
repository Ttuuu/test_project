<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Scope</h2>

<p>This is really just limited to style and code formatting. </p>

<h2>Two (almost) substantive points</h2>

<ul>
<li>You should get in the habbit of <strong>not</strong>:</li>
</ul>

<pre><code>using namespace std;
</code></pre>

<p>It can get you into name-clash issues later, as you progress. </p>

<ul>
<li>You should be aware that <code>std::endl</code> flushes the stream buffer. This is often unnecessary, unwanted and can be slow if used in a tight loop. You should use <code>'\n'</code> for most situations. If you are worried about
platform specific line-ending, don't be. <code>'\n'</code> adapts, just like
<code>std::endl</code>.</li>
</ul>

<h2>Code formatting</h2>

<ul>
<li>Install <a href="https://clang.llvm.org/docs/ClangFormat.html" rel="noreferrer">clang-format</a> or similar to help you with formatting. </li>
</ul>

<p>All I did was to integrate your <code>endl</code> into the strings and hit "auto-clang-format" and I got this:</p>

<pre><code>#include &lt;iostream&gt;

int main() {
  std::cout &lt;&lt; "Hello everybody!\n"
            &lt;&lt; "My name is AK.\n"
            &lt;&lt; "Goodbye.\n"
            &lt;&lt; "\n"

            // Poem
            &lt;&lt; "Twinkle, twinkle, little bat!\n"
            &lt;&lt; "How I wonder what you're at?\n"
            &lt;&lt; "Up above the world you fly,\n"
            &lt;&lt; "Like a tea-tray in the sky.\n";
  return 0;
}

</code></pre>

<p>Which is "good enough for me". Clang format is very tunable, and I have it configured to something which works for me, and my team, in 99% of cases. So we don't spend time fighting the formatting of the code. </p>

<p>The above style with "one streaming operator" <code>&lt;&lt;</code> at the beginning of each line is what we use most of the time. It makes sense when you have literals interspersed with variables and/or function calls. </p>

<p>For this very specific (and rather atypical?) case, you could, as someone else pointed out, also just stream it all as one continuous literal. C++ allows you stop/start string literals like this:</p>

<pre><code>#include &lt;iostream&gt;

int main() {
  std::cout &lt;&lt; "Hello everybody!\n"
               "My name is AK.\n"
               "Goodbye.\n"
               "\n"

               // Poem
               "Twinkle, twinkle, little bat!\n"
               "How I wonder what you're at?\n"
               "Up above the world you fly,\n"
               "Like a tea-tray in the sky.\n";
  return 0;
}

</code></pre>

<p>Hope that helps. </p>
    </div>