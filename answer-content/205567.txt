<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code looks good, but the requirements look quite old-fashioned.</p>

<p>Since September 2004, symbolic constants like the volume in your example are no longer defined as <code>int</code> but rather as <code>enum</code>:</p>

<pre><code>public enum Volume {
    OFF, LOW, MEDIUM, HIGH
}
</code></pre>

<p>Using an enum is safer than an int because the users of your class cannot accidentally set the volume to -17 or to 12345. The only invalid value is <code>null</code>, and you can easily defend against that:</p>

<pre><code>public void setVolume(Volume volume) {
    this.volume = Objects.requireNotNull(volume);
}
</code></pre>

<hr>

<p>In your code you have written Javadoc comments <code>/** â€¦ */</code> for some of the methods. Comments are an important thing for any reader of your code. The comments should contain all the details that cannot be easily seen by looking at the definition of the method.</p>

<p>Currently your comments only repeat words from the method definition. This information is useless and should be removed. Instead, in the comment for <code>setVolume(int)</code>, you should mention that only the values LOW, MEDIUM and HIGH are allowed and what happens when someone calls the method with an invalid value.</p>

<p>Until you learn about <code>if</code> and <code>throw</code> statements, the comment should just say "don't do that". In some weeks you should throw an exception for the invalid values and update the comment accordingly.</p>

<hr>

<p>Your toString method looks quite complicated right now. Many people use that style, but there is a nice way:</p>

<pre><code>public String toString() {
    return String.format(
        "Headphone %s by %s, %s, volume %s",
        model,
        manufacturer,
        pluggedIn ? "plugged in" : "unplugged",
        volume);
}
</code></pre>

<p>This style makes it easy to see the general pattern of the generated string. Each %s is a placeholder that is replaced with the values in the lines below, in the given order.</p>

<p>The ?: operator is useful for generating human-readable text instead of the very technical true/false.</p>
    </div>