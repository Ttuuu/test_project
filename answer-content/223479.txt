<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Making the <code>set</code> out of an interval is an immediate red flag. <code>set</code> is a heavyweight data structure, and making it is a heavyweight operation. It is also much easier to compute an intersection of two intervals, than of two sets.</p>

<p>Making the same <code>set</code> twice is another red flag.</p>

<hr>

<p>All that said, it seems that you really overthink the problem. It admits a much simpler solution. Consider the friend whose window of opportunity closes the earliest. You want to meet him anyway, so make the most of it: select every friend whose window opens prior to it, schedule a party, and discard all the participants from further consideration; rinse and repeat.</p>

<p>Hint: do not sort the list of intervals. Sort the list of events (interval openings and closings).</p>

<p>Two things I intentionally don't want to spell out:</p>

<ol>
<li>Prove that this algorithm does produce an optimal solution, and</li>
<li>How to efficiently discard the friends you've already met.</li>
</ol>
    </div>