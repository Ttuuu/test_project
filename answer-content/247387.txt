<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>General Observations and Comments</h2>
<p>You have obviously put in a lot of effort into this question and deserve an answer.</p>
<blockquote>
<p>I have mostly programmed in Python, C++ and Java so far, and I recently picked up K&amp;R (second edition) to learn some C. I have only gone through the first chapter so far, which is "A Tutorial Introduction".</p>
</blockquote>
<p>K&amp;R was the definition in the beginning (I used it daily for a while in the 1980's), but there are probably better sources now. K&amp;R Second Version was for C90 (ANSII C) and not C99.</p>
<p>While Doxygen style comments are good for documentation, they can be overkill in some situations. A best practice is to used self documenting code and only use comments to explain why something is necessary.</p>
<p>When compiling the C programming language, it is better to use the -Wall switch on the compiler (report all warnings). This will find more possible issues. The line numbers for the following warnings will not work with your code because I stripped out most of the comments to get at the code. I will go into more depth for most of the warnings. The warnings I get when compile the code are:</p>
<blockquote>
<p>splitLine.c(44,14): warning C4018: '&lt;': signed/unsigned mismatch<br>
splitLine.c(60,23): warning C4018: '&lt;': signed/unsigned mismatch<br>
splitLine.c(79): warning C4701: potentially uninitialized local variable 'c' used<br>
splitLine.c(60): message : index 'i' range checked by comparison on this line<br>
splitLine.c(61): message : feeds call on this line<br>
splitLine.c(44): message : index 'i' range checked by comparison on this line<br>
splitLine.c(47): message : feeds call on this line<br>
splitLine.c(44): message : index 'i' range checked by comparison on this line<br>
splitLine.c(45): message : feeds call on this line<br>
splitLine.c(74): message : index 'col' range checked by comparison on this line<br>
splitLine.c(76): message : feeds call on this line</p>
</blockquote>
<p>Unlike programming in C++, when programming in C one needs to be comfortable with macros and raw pointers.</p>
<h2>The C Programming Language Does Not Support Variable Sized Arrays</h2>
<p>I compile C locally with a strict C definition and there are 2 lines that don't compile in my compiler (Visual Studio 2019 Professional on Windows 10 Professional). I wouldn't try any online C compilers to be strict.</p>
<p>This is the section of code where the two lines that don't compile in my compiler:</p>
<pre><code>int readLineAndPrintFolded(const int maxLength, const int tabSize) {
    const int charArraySize = maxLength + 1;
    int lines = 0;

    // get first segment
    char segment[charArraySize];
    int hasMore = getLineContents(segment, maxLength, tabSize);
    if (hasMore == EOF) return lines;  // nothing to be read

    // while line exceeds limit, print current output line and start another
    char beforeCut[charArraySize], afterCut[charArraySize];
</code></pre>
<p>The two lines are</p>
<pre><code>    char segment[charArraySize];
</code></pre>
<p>and</p>
<pre><code>    char beforeCut[charArraySize], afterCut[charArraySize];
</code></pre>
<p>The reason they don't compile is because <code>charArraySize</code> is a variable and not a constant in a strict definition of C.</p>
<h2>Initialize ALL Local Variables</h2>
<p>The C programming language is not a friendly language and variables declared on the stack are not automatically initialized with a value. This caused the following warning message <code>splitLine.c(79): warning C4701: potentially uninitialized local variable 'c' used</code>. Here is the code responsible:</p>
<pre><code>int getLineContents(char* destination, int lim, int tabSize) {
    int col = 0, i = 0;
    int c;
    while (col &lt; lim &amp;&amp; (c = getchar()) != EOF &amp;&amp; c != '\n') {
        destination[i++] = (char)c;
        col += (c == '\t') ? spacesToNextTabStop(col, tabSize) : 1;
    }
    destination[i] = '\0';
    return (i == 0 &amp;&amp; c == EOF) ? EOF : col == lim;
}
</code></pre>
<p>It is possible that the while loop will never be executed so the variable <code>c</code> won't have a value, it should be initialized to zero.</p>
<h2>Use a Separate Line for Each Variable Declaration and Initialization</h2>
<p>In the function <code>getLineContents()</code> above the variable <code>col</code> and the variable <code>i</code> are delcared and initialized on the same line. To make maintenance of the program easier, it is better to have each variable declared and initialized in it's own declaration.</p>
<pre><code>int col = 0;
int i = 0;
int c = 0;
</code></pre>
<p>To add or remove a variable become much simpler in this case, simply add a line or deleted a line, not middle of the line edits.</p>
<h2><code>size_t</code> Mismatch with <code>int</code></h2>
<p>There are a number of places in the code where there is a <code>signed/unsigned mismatch</code>, here is one example:</p>
<pre><code>int splitBeforeFirstBlank(const char* string, char* left, char* right) {
    size_t len = strlen(string);
    // compute the split boundary
    int boundary = -1;
    for (int i = 0; i &lt; len; ++i) {
        if (isblank(string[i])) {
            boundary = i;
            break;
        }
    }
    // perform the split
    return split(string, len, boundary, boundary, left, right);
}
</code></pre>
<p>The variable <code>len</code> is declared as type <code>size_t</code> but the variable <code>i</code> is declared as int. This is causing the type mismatch warning and could potentially indicate worse problems (a negative index into an array). When using an index into an array it is best to declare the index variable as <code>size_t</code>, this prevents the variable from going negative. If the value returned by this function is used as an index, it might be better to return a <code>size_t</code> rather than an <code>int</code> as well.</p>
<h2>Defining Constants and Inline Functions Using Macros</h2>
<p>The newer versions of C allow for symbolic constants to be defined using <code>const int VARNAME = VALUE;</code> however, in C #define is a good way to define array sizes. In K&amp;R I don't think you will find any <code>const int</code> declarations. The <code>const int</code> method is better if this will be compiled using a C++ compiler. Macros using <code>#define</code> are not type safe which is why they are avoided in C++.</p>
<p>In this program <code>const int TAB_SIZE = 4;</code> could be changed to <code>#define TAB_SIZE 4</code>.</p>
<p>Also in this program the function <code>int spacesToNextTabStop(int column, int tabSize)</code> could be defined as <code>#define SPACES_TO_NEXT_TAB_STOP(col, tabsize) tabSize - (column % tabSize)</code>.</p>
<h2>Raw Pointers for Optimization</h2>
<p>Since C is a programming language that is sometimes considered a very high level assembler, direct addressing is supported. In early versions of C (such as K&amp;R C) this is how a lot of optimization for arrays was handled. Newer optimizing compilers handle this, by substituting direct memory addressing into the object code when compiling using the -O3 flag (maximum optimization). The function <code>int columnLength(const char string[], const int tabSize)</code> can be written using pointers which would optimize the performance:</p>
<pre><code>int columnLength(const char c_string[], const int tabSize)
{
    int column = 0;

    for (const char* cptr = c_string; *cptr; cptr++)
    {
        column += (*cptr == '\t') ? spacesToNextTabStop(column, tabSize) : 1;
    }

    return column;
}
</code></pre>
<p><em>Renamed Variables in the optimized example above</em><br>
In the example above I renamed <code>string</code> to <code>c_string</code> because <code>string</code> is a keyword in C++ and many programmers compile C programs using a C++ compiler, also in many cases companies take existing C code and embed it in C++ programs to enhance the existing functioning code.</p>
<p>I renamed <code>col</code> to column because it makes the code more self-documenting and easier to read and maintain.</p>
    </div>