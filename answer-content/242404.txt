<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There's a good article about <em>performance</em> to get your started: <a href="https://blogs.technet.microsoft.com/ashleymcglone/2017/07/12/slow-code-top-5-ways-to-make-your-powershell-scripts-run-faster/" rel="nofollow noreferrer"><em>Slow Code: Top 5 ways to make your Powershell scripts run faster</em></a>; at first sight, here are applicable both parts of <em>Problem #2 &amp; #3: Appending stuff</em>:</p>

<ul>
<li>Appending to files: <code>Export-CSV -Append</code> repeats roughly 133 times (= <code>4E+6/30E+3</code> i.e. <code>4E+6</code> rows written in chunks of <code>30E+3</code> rows each) which <strong>could</strong> considerably worsen performance for big output file;</li>
<li>Appending to arrays: (<strong>heart of the matter</strong>) <em>when the <code>+=</code> operator is used, it's actually destroying the array and creating a new one</em> (<a href="https://mcpmag.com/articles/2017/09/28/create-arrays-for-performance-in-powershell.aspx" rel="nofollow noreferrer">source</a>).</li>
</ul>

<p>To eliminate appending to arrays, you can use <a href="https://docs.microsoft.com/en-us/dotnet/api/system.collections.arraylist?view=netcore-3.1" rel="nofollow noreferrer">.NET array list object</a> as follows (merely a hint): replace</p>

<ul>
<li><code>$output = @()</code> with <code>$output = [System.Collections.ArrayList]::new()</code>, and</li>
<li><code>$output += $CSVLine</code> with <code>[void]$output.Add($CSVLine)</code>.</li>
</ul>

<p>Note: do not compute one-purpose variable <code>$CSVLine</code> at all; instead, use</p>

<pre><code>[void]$output.Add(
    [pscustomobject]@{
        Key = $json.Register.Key
        CompanyID = $json.id
        Eventtype = $item.type
        Eventdate = $item.date
        Eventdescription = $item.description
    })
</code></pre>

<p>Read the <a href="https://docs.microsoft.com/en-us/dotnet/api/system.collections.arraylist?view=netcore-3.1#remarks" rel="nofollow noreferrer">remark about the generic <code>List&lt;T&gt;</code> class</a> and <a href="https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1?view=netcore-3.1#performance-considerations" rel="nofollow noreferrer">Performance Considerations</a> as well:</p>

<blockquote>
  <p>In deciding whether to use the <code>List&lt;T&gt;</code> or <code>ArrayList</code> class, both of
  which have similar functionality, remember that the <code>List&lt;T&gt;</code> class
  performs better in most cases and is type safe. <em>If a reference type
  is used for type <code>T</code> of the <code>List&lt;T&gt;</code> class, the behavior of the two
  classes is identical</em>.</p>
</blockquote>
    </div>