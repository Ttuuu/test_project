<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>maybe I have some useful suggestions.</p>

<p>I think having main recursively call itself is a little weird. Try to keep the main very short, so my suggestion create a function called play_tictactoe() and call that from main instead. This also means <code>play_tictactoe</code> recursively calls itself instead of <code>main</code>.</p>

<p>You have a function called do_the_draw() but it also updates the game board. Functions typically do 1 thing and it should be obvious based on it's name. You could separate your draw logic and update logic. You could just rename <code>do_the_draw()</code> to <code>update_board()</code> and remove the drawing logic and call it in the play function.</p>

<p><code>evaluate</code> can be simplified by supplying a symbol. <code>evaluate(s, char)</code> could reduce the function by half, so it could be <code>evaluate(status, 'OOO')</code> and <code>evaluate(status, 'XXX')</code> which will result in less typing errors like you have for <code>if s[0]+s[4]+s[8] == 'XXX' or s[1]+s[4]+s[7] == 'OOO':</code></p>

<p>Finally if you have access to maps or arrays (ignore this if you do not) you can probably reduce some of those huge if groups down using a map. I won't go into too much detail since you probably don't have access but a map of field to numbers such as <code>{ "A1": 0, "A2": 1 }</code> could help reduce the long if statement by just checking if the map has a key and the other if statement since it could just check <code>game[fields[field]] == ' '</code>. If you have access to array functions you could do something similar with just arrays and using their built in functions so you do not need to loop over them yourself.</p>

<p>Hopefully that makes sense and it was an inter</p>
    </div>