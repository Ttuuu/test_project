<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>        String[] nd = scanner.nextLine().split(" ");
        int c;
        int n = Integer.parseInt(nd[0]);

        int d = Integer.parseInt(nd[1]);
</code></pre>
</blockquote>

<p>First, why declare <code>c</code> here?  You don't use it until much later.  So let's take it out of here and define it closer to its first use.  I would also rename it, as I find <code>c</code> insufficiently descriptive.  </p>

<p>Second, why use <code>nextLine</code> this way?  Consider </p>

<pre><code>        int numbersCount = scanner.nextInt();
        int rotationCount = scanner.nextInt();
</code></pre>

<p>I don't know that this is any faster, but it's more direct in code.  </p>

<p>I would also add </p>

<pre><code>        rotationCount %= numbersCount;
</code></pre>

<p>You could do this in the declaration, but I find it more readable separate.  </p>

<p>What this does is remove any superfluous rotations.  If we are rotating <code>numbersCount</code> times exactly, we're already done.  Because that's just the original array.  By taking the modulus or remainder, we're getting rid of all those full cycle rotations.  Since that's just wasted time, this purely improves those large rotations at the expense of an extra division for all rotations.  </p>

<pre><code>        int[] numbers = new int[numbersCount];
        for (int i = 0; i &lt; numbers.length; i++) {
            numbers[i] = scanner.nextInt();
        }
</code></pre>

<p>Again, I wouldn't use <code>nextLine</code> here.  The scanner is perfectly capable of this.  If you want to read line by line, consider going to something like a <code>BufferedReader</code> that works that way.  </p>

<p>You have </p>

<blockquote>
<pre><code>                if (j==n-1) 
                { c=0;}
                else 
                { c=j+1;}
                arr[j]=a[c];
</code></pre>
</blockquote>

<p>So we finally find <code>c</code>.  It's the index into the old array.  But it could have been more readably written </p>

<pre><code>                int originalIndex = (j + 1 == numbers.length) ? 0 : j + 1;
</code></pre>

<p>or </p>

<pre><code>                int originalIndex = j + 1;
                if (originalIndex == numbers.length) {
                    originalIndex = 0;
                }
</code></pre>

<p>And whatever you do, please don't do things like <code>{c=0;}</code>.  It's hardly any shorter.  It's just different.  Unless different indicates something, it's not helpful.  </p>

<p>But I would actually skip the rotation.  Instead, break the output into two pieces:  </p>

<pre><code>        for (int i = rotationCount; i &lt; numbers.length; i++) {
            System.out.print(numbers[i] + " ");
        }

        for (int i = 0; i &lt; rotationCount; i++) {
            System.out.print(numbers[i] + " ");
        }
</code></pre>

<p>This will display the output as rotated without rotating.  </p>

<p>Or just read it rotated.  </p>

<pre><code>        int rotationPoint = numbers.length - rotationCount;
        for (int i = rotationPoint; i &lt; numbers.length; i++) {
            numbers[i] = scanner.nextInt();
        }

        for (int i = 0; i &lt; rotationPoint; i++) {
            numbers[i] = scanner.nextInt();
        }
</code></pre>

<p>Then the output could be something like </p>

<pre><code>        System.out.println(String.join(" ", numbers));
</code></pre>

<p>There's no need to rotate at all, much less to rotate one at a time.  </p>

<pre><code>class Solution {

    public static void main(String[] args) {
        System.out.println(String.join(" ", readInputRotated());
    }

    public static int[] readInputRotated() {
        try (Scanner scanner = new Scanner(System.in)) {
            int[] rotated = new int[scanner.nextInt()];

            int rotationPoint = rotated.length - scanner.nextInt();
            for (int i = rotationPoint; i &lt; rotated.length; i++) {
                rotated[i] = scanner.nextInt();
            }

            for (int i = 0; i &lt; rotationPoint; i++) {
                rotated[i] = scanner.nextInt();
            }

            return rotated;
        }
    }

}
</code></pre>

<p>This also uses the <a href="https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html" rel="nofollow noreferrer"><code>try</code>-with-resources</a> form to manage the <code>Scanner</code> lifecycle without explicitly calling <code>close</code>.  </p>

<p>Your original code was <span class="math-container">\$\mathcal{O}(mn)\$</span> where <span class="math-container">\$m\$</span> and <span class="math-container">\$n\$</span> are the number of rotations and the input size.  This is <span class="math-container">\$\mathcal{O}(n)\$</span> (because you read the input) and the "rotation" is <span class="math-container">\$\mathcal{O}(1)\$</span>.  </p>
    </div>