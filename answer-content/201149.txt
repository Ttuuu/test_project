<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First off, you should not be using Python 2 anymore, if at all possible. It will be deprecated next year. The major differences (important for this code) are that <code>xrange</code> is now <code>range</code> and <code>print</code> is a function.</p>

<p>Next, since I am currently on mobile I do not have access to <code>numba</code>. But since you said it does not yield any performance gain anyways, I just removed it.</p>

<p>With these small changes, and wrapping your code in a function, your code takes about 20 seconds (on my mobile).</p>

<p>The first improvement is making <code>vectMoment</code> actually properly vectorized. As noted in the documentation, <code>numpy.vectorize</code> is hardly better than writing a <code>for</code> loop by yourself (though it does allow you to use broadcasting on the inputs).</p>

<pre><code>def moment_vect(x, L):
    return np.where(x &lt; L/2, 0.5*x, 0.5*(L-x))
</code></pre>

<p>Using this drops the execution time by about a quarter.</p>

<p>Now for the meaty part. Whenever you write a manual <code>while</code> or <code>for</code> while using <code>numpy</code>, you should ask yourself if there is no better way. <code>numpy</code> supplies you with ways to do operations simultaneously on whole arrays. Your <code>while</code> loop in your main function can be realized by building a 2D array of <code>axle_coords</code>. This takes into account that we know where the minimum element is (since <code>numpy.cumsum(spacings)</code> is increasing, it is always the last element). Then we <code>sum</code> along one of the axes and get the maximum of the sums. This uses the <code>numpy</code> functions.</p>

<p>With this we get:</p>

<pre><code>def simple_span_moment(axles, spacings, L, step_size):
    axle_coords = -np.cumsum(spacings)
    steps = np.arange(0, L - axle_coords[-1], step_size)
    axle_coords = axle_coords[:, None] + steps[None, :]
    moments = moment_vect(axle_coords, L) * np.array(axles)[:, None]
    mask = (axle_coords &gt;= 0) &amp; (axle_coords &lt;= L)
    max_moment = np.where(mask,  moments, 0).sum(axis=0).max()
    return max(0, max_moment)
</code></pre>

<p>And then, I would put the calling code into its own function:</p>

<pre><code>def graipher(axles, spacings, L, step_size):
    return [np.around(simple_span_moment(ax, sp, L, step_size), 1) for ax, sp in zip(axles, spacings)]
</code></pre>

<p>Together, these changes reduce the runtime from about 20 seconds down to 0.5 seconds for me.</p>

<p>The outermost loop can not be as easily vectorized, since your data is a ragged array. It would also probably no longer fit in memory if you have millions of entries instead of a thousand.</p>
    </div>