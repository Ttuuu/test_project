<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This approach seems a bit overly-complicated - there are multiple loops over the word just to remove duplicates, count the letters, etc. I would suggest a simple loop over each word to count the number of repeated numbers, maintaining the max count so far, and then using a simple <a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Basics" rel="nofollow noreferrer">object mapping</a> (or a Set could be used) to look up the max counts for each word. See the rewritten code below for an example of this.</p>

<p>Additionally, the indentation could be greatly improved. Perhaps the first level inside <code>whichWord</code> in your code was lost because of pasting it into the question. However, most JavaScript code is indented by 2 or 4 spaces inside each block.</p>

<p>I noticed that arrow functions are being used (e.g. <code>letters.map((innerArr, i) =&gt; innerArr.map((letter, ii)...</code>. This is a feature of <a href="/questions/tagged/ecmascript-6" class="post-tag" title="show questions tagged 'ecmascript-6'" rel="tag">ecmascript-6</a> and thus other features from that standard could be used, such as <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const" rel="nofollow noreferrer"><code>const</code></a> for any variable that is never re-assigned and <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let" rel="nofollow noreferrer"><code>let</code></a> for any variable that needs to be reassigned (e.g. iterator variables, cumulative counts, etc.), as well as the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax" rel="nofollow noreferrer">spread syntax</a> instead of using <code>function.apply()</code>.</p>

<h2>Rewritten code</h2>

<p>Below is my first take at simplifying the code. It can be compared for performance in <a href="https://jsperf.com/firstwordwithmostrepeatednums" rel="nofollow noreferrer">this jsPerf</a>.</p>

<p>It uses <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charAt" rel="nofollow noreferrer"><code>String.charAt()</code></a> to access characters in the string by index, though the array-like access was introduced in ES-5<sup><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#Character_access" rel="nofollow noreferrer">1</a></sup>. Prior to ES-5 that did not work in all browsers - e.g. IE 6/7<sup><a href="https://stackoverflow.com/a/4051431/1575353">2</a></sup> (which aren't really a concern for many developers these days, since they aren't supported anymore).</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const numberOfRepeatedNumbers = word =&gt; {
  if (word.length == 1) {
    return 0;
  }
  let count = 0, maxCount = 0;
  for (let i = 1; i &lt; word.length; i++) {
    if (word.charAt(i) == word.charAt(i - 1)) {
      count++;
    } 
    else {
      if (count &gt; maxCount) {
        maxCount = count;
      }
      count = 0;
    }
  }
  return maxCount;
};
const whichWord = str =&gt; {
  const arr = str.split(' ');
  const mappings = arr.reduce((mapping, word) =&gt; {
    mapping[word] = numberOfRepeatedNumbers(word);
    return mapping;
  }, {});
  const mappingCounts = Object.values(mappings);
  const highestNumber = Math.max(...mappingCounts);
  const indexToReturn = mappingCounts.findIndex(c =&gt; c == highestNumber);
  return Object.keys(mappings)[indexToReturn];
};

console.log('whichWord:', whichWord('Hello a apple pie yellow'));</code></pre>
</div>
</div>


<p><sup>1</sup><sub><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#Character_access" rel="nofollow noreferrer">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#Character_access</a></sub>
<sup>2</sup><sub><a href="https://stackoverflow.com/a/4051431/1575353">https://stackoverflow.com/a/4051431/1575353</a></sub></p>
    </div>