<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Hello and welcome to CodeReview! (And thank you for using British spelling ;-) )</p>

<p>You already identified the biggest thing -</p>

<blockquote>
  <p>it [would] be better to use two classes - one for the game logic and one for the GUI</p>
</blockquote>

<p>Separation of concerns and loose coupling will be improved, in turn improving maintainability and testability, when those are separated. Other things:</p>

<h2>snake_case</h2>

<p><code>numberOfHoles</code>, by Python convention, should be <code>number_of_holes</code>.</p>

<h2>Use type hinting</h2>

<p>Take a read through <a href="https://www.python.org/dev/peps/pep-0484/" rel="nofollow noreferrer">PEP 484</a> and do some Googling; this will help out with program correctness and static analysis.</p>

<h2>Fix up your indentation</h2>

<p>You have <code>@staticmethod</code> on a top-level function. Either this shouldn't have that annotation, or it should live in the class. I think you've just failed to indent all of your member variables.</p>

<h2>Repetition</h2>

<pre><code>["Black" for _ in range(self.numberOfHoles)]:
</code></pre>

<p>can be</p>

<pre><code>["Black"] * self.numberOfHoles
</code></pre>

<h2>State representation</h2>

<p>You're using the strings <code>Black</code> and <code>White</code> to represent a player. There are better choices - maybe a boolean (false for black, true for white) or an enum - see <a href="https://docs.python.org/3/library/enum.html" rel="nofollow noreferrer">https://docs.python.org/3/library/enum.html</a></p>

<p>Or, you could have two instances of a class Player, and track your state like that. But don't use a string.</p>

<h2>Redundant return</h2>

<pre><code>return None
</code></pre>

<p>can be deleted if it's at the end of a function, or written as <code>return</code> if it's to early-terminate a loop.</p>

<h2>Simplify logic</h2>

<pre><code>if i &gt; len(score)-1
</code></pre>

<p>can be</p>

<pre><code>if i &gt;= len(score)
</code></pre>

<p>However, there's a bigger problem. This loop:</p>

<pre><code>    for i, pin in enumerate(self.allMarkPins[self.activeGuess]):
        if i &gt; len(score)-1:
            break
        pin.config(bg=score[i], relief=tk.RAISED)
</code></pre>

<p>should just be</p>

<pre><code>for i, pin in enumerate(self.all_mark_pins[self.active_guess][:len(score)]):
    pin.config ...
</code></pre>
    </div>