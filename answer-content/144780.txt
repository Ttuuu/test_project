<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You can improve naming. Names like <code>IVisitor</code> are good to illustrate the pattern, but in production code I would rather have a name that tells me the purpose of the interface, not which pattern it represents. For example, this looks a lot better, IMHO:</p>

<pre><code>internal abstract Element Transform(ITransformer transformer);
</code></pre>

<hr>

<p>It looks like you assume that <code>BinaryElement.Left</code> and <code>BinaryElement.Right</code> are not <code>null</code>. Yet nothing stops me from executing this line of code:</p>

<pre><code>new BinaryElement(null, null).Accept(...) 
</code></pre>

<p>You should validate constructor parameters to catch such mistakes early.</p>

<hr>

<p><code>VisitorBase.Visit</code> makes no sense. Why would <code>Visit</code> method call <code>Accept</code> internally? Shouldn't it be the other way around? Shouldn't <code>Accept</code> method call <code>Visit</code> instead? Those methods calling each other is the reason stack overflows. You can remove <code>Visit</code> method, and call <code>Left.Accept(visitor)</code> instead of <code>visitor.Visit(Left)</code>. It will work just fine.</p>

<hr>

<p>I think there are two main ways to implement visitor pattern.  </p>

<ul>
<li><p>You either provide a method for every concrete implementation:</p>

<pre><code>interface IVisitor
{
   //removed from interface
   //(you can still have this method as `protected virtual` in base implementation)
   //Element Visit(Element element);

   Element Visit(BinaryElement element);
   Element Visit(CompositeElement element);
   //etc...
}
</code></pre>

<p>Note, that there is no <code>Visit</code> method, that takes base <code>Element</code>, only concrete implementations are included. This gives you some sort of type safety at compilation time, making sure that you do not forget to modify your visitors as you add new elements. But it also bloats the interface as the number of elements grow.</p></li>
<li><p>Or you keep your interface simple by only including base type:</p>

<pre><code>interface IVisitor
{
   Element Visit(Element element);

   //removed from interface 
   //(you can still have those methods as `protected virtual` in base implementation)
   //Element Visit(BinaryElement element);
   //Element Visit(CompositeElement element);
}
</code></pre>

<p>This prevents visitor interface from bloating, but you lose type safety.</p></li>
</ul>

<p>My point is that there is always some sort of trade-off, and one approach might be better than the other depending on use case. However, by combining those two approaches, as you do, you are likely to get the downsides of them both AND gain non of the benefits. So I suggest you pick one or the other, and stick to it.</p>

<hr>

<p><code>AddOneMoreVisitor</code> has inconsistent behavior. Sometimes it creates new elements, and sometimes it does not. This can produce all sorts of weird side effects associated with shallow cloning. Modifications that are done to transformed tree in some cases will affect the initial tree. To avoid that you will have to do deep cloning during transformation. However, if initial tree is always discarded after transformation, then it does not matter, I guess.</p>
    </div>