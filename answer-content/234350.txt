<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Welcome to the Code Review website, nice first question. You did a pretty good job with the programming, I can't comment on whither Runge-kutta 4 (n-Body problem) was properly implemented because I don't have the background in astronomy.</p>

<p>First I have one question about the symbolic constant days, the comment <code>365 days in seconds</code> confuses me.</p>

<h2>Magic Numbers</h2>

<p>The code would be more readable/understandable if there were more numeric constants, for instance :</p>

<pre><code>const double SolarMass = 1.989E30;
const double SolarRadius = 695510E3;
const double MercuryMass = 0.3301E24;
const double MercuryRadius = 2439700;
</code></pre>

<p>including the mass and radius for all the bodies involved.</p>

<p>Numeric constants in code are sometimes referred to as <a href="https://en.wikipedia.org/wiki/Magic_number_(programming)" rel="nofollow noreferrer">Magic Numbers</a>, because there is no obvious meaning for them. There is a discussion of this on <a href="https://stackoverflow.com/questions/47882/what-is-a-magic-number-and-why-is-it-bad">stackoverflow</a>.</p>

<h2>DRY Code</h2>

<p>There is a programming principle called the <a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself" rel="nofollow noreferrer">Don't Repeat Yourself Principle</a> sometimes referred to as DRY code. If you find yourself repeating the same code multiple times it is better to encapsulate it in a function. If it is possible to loop through the code that can reduce repetition as well.</p>

<h2>Complexity</h2>

<p>The function <code>main()</code> is too complex (does too much). As programs grow in size the use of <code>main()</code> should be limited to calling functions that parse the command line, calling functions that set up for processing, calling functions that execute the desired function of the program, and calling functions to clean up after the main portion of the program.</p>

<p>There is also a programming principle called the Single Responsibility Principle that applies here. The <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" rel="nofollow noreferrer">Single Responsibility Principle</a> states:</p>

<blockquote>
  <p>that every module, class, or function should have responsibility over a single part of the functionality provided by the software, and that responsibility should be entirely encapsulated by that module, class or function.</p>
</blockquote>

<p>By adding 2 functions to the class <code>MotionNBody</code>, changing the reference to the map <code>planets</code> to an actual map in the class <code>MotionNBody</code> and modifying the constructors of the class <code>Planet</code> and the class <code>MotionNBody</code> main is greatly simplified.</p>

<pre><code>// PlanetarySimulator.cpp : This file contains the 'main' function. Program execution begins and ends there.
//

#include &lt;iostream&gt;
#include "Planet.h"
#include "MotionNBody.h"
const double days = 400; // 365 days in seconds
const double TimeStep = 24* 60 * 60; // 1 day in seconds
const double SolarMass = 1.989E30;
const double SolarRadius = 695510E3;
const double MercuryMass = 0.3301E24;
const double MercuryRadius = 2439700;

int main()
{
    // Initialise Planets

    Planet sun(SolarMass , SolarRadius, "Sun", 0, 0, 0, 0);
    MotionNBody motion(sun);
    motion.AddPlanet(MercuryMass , MercuryRadius, "Mercury", -46000000000, -58980);
    motion.AddPlanet(4.8675E24, 6051800, "Venus", -107480000000, -35260);
    motion.AddPlanet(5.972E24, 6371E3, "Earth", -147095000000, -30300.0);
    motion.AddPlanet(6.4171E23, 3389500, "Mars", -206620000000,-26500);
    motion.AddPlanet(1898.19E24, 71492000, "Jupiter", -740520000000, -13720);
    motion.AddPlanet(568.34E24, 54364000, "Saturn", -1352550000000, -10180);
    motion.AddPlanet(86.813E24, 24973000, "Uranus", -2741300000000, -7110);
    motion.AddPlanet(102.413E24, 24341000, "Neptune", -4444450000000, -5500);

    motion.setSimulationDays(days);
    motion.setSimulationTimeStep(TimeStep);
    motion.simulate();
    motion.OutputResults(".\\");

}
</code></pre>

<p>Here are the changes to the class Planet :</p>

<pre><code>class Planet {
public:
    Planet(double mass, double radius, std::string name, double x, double vy, double y, double vx);
    ~Planet() = default;

    double getMass() { return mass; };
    double getRadius() { return radius; };
    std::string getName() { return name; };

    std::vector&lt;double&gt; x;
    std::vector&lt;double&gt; y;
    std::vector&lt;double&gt; vx;
    std::vector&lt;double&gt; vy;

private:
    double mass;            // In kg
    double radius;          // In m
    std::string name;
};


Planet::Planet(double mass, double radius, std::string name, double xIn, double vyIn, double yIn, double vxIn) :
        mass(mass),
        radius(radius),
        name(name)
{
    x.push_back(xIn);
    vy.push_back(vyIn);
    y.push_back(yIn);
    vx.push_back(vxIn);
}
</code></pre>

<p>Here are the changes to the class MotionNBody</p>

<pre><code>class MotionNBody {
    // take a map of planet name to planet object, and for each time step
    // calculate the new position and velocity for each planet at the same time
    // taking into account all the other planets.
public:
    MotionNBody(Planet &amp; sun);
    ~MotionNBody() = default;
    void AddPlanet(double mass, double radius, std::string name, double x = 0, double vy = 0, double y = 0, double vx = 0);
    void OutputResults(std::string filePath);
    void setSimulationDays(double days) { simDays = days; };
    void setSimulationTimeStep(double time) { timeStep = time; };
    void simulate();

private:
    void doRK4( const std::string &amp; currentPlanet, int i);
    void calcalateNewPositions(const std::string &amp; planetName, int i);
    double calculateAccelerationX(double x, double y, int i, const std::string &amp; currentPlanet);
    double calculateAccelerationY(double x, double y, int i, const std::string &amp; currentPlanet);

    std::map&lt;std::string,Planet&gt; planets;
    Planet &amp; sun;
    double timeStep;
    double simDays;

};

MotionNBody::MotionNBody(Planet &amp; sun) :
        sun(sun)
{
}

void MotionNBody::AddPlanet(double mass, double radius, std::string name, double x, double vy, double y, double vx)
{
    planets.emplace(name, Planet(mass, radius, name, x, vy, y,vx));
}

void MotionNBody::OutputResults(std::string filePath)
{
    for (auto &amp; planet : planets)
    {
        std::ofstream myfile;
        myfile.open(filePath + planet.first + ".csv");
        myfile &lt;&lt; planet.first &lt;&lt; std::endl &lt;&lt; "x,y" &lt;&lt; std::endl;
        for (int i = 0; i &lt; planet.second.x.size(); i++)
        {
            myfile &lt;&lt; planet.second.x[i] &lt;&lt; "," &lt;&lt; planet.second.y[i] &lt;&lt; std::endl;
        }
        myfile.close();
    }

}
</code></pre>

<h2>Simplifying Classes and Allowing the Compiler to do Some Work for You</h2>

<p>For empty destructors in classes you can allow the compiler to do some work for you by declaring the destructors as default as shown above.
For one line functions it is easier to put the code into the header file, there is no reason to define them in the <code>.cpp</code> file.</p>
    </div>