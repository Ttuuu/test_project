<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The key insight is that I didn't have to check if any of the choices made at current position, say x, from game set S lead to a position, say x -S<sub>i</sub> ,  that will guarantee a loss for the opponent.Rather for any position that leads to loss I had to mark all further positions reachable from the current position using all the selections from the subset S as winning positions. Following is the code:</p>

<pre><code>def winner(n_i, n_t, t_k):
    output = [False]*(n_i + 1)
    for j in t_k:
        output[j] = True
    for i in range(1, n_i + 1):
        if output[i]:
            continue
        for j in t_k:
            if i+j &lt; n_i +1:
                output[i+j] = True
    return 'Little Deepu' if output[n_i] else 'Kate' 

num_test = int(input())

for i in range(num_test):
    num_items,num_take_outs = map(int, input().split())
    take_outs = list(map(int, input().split()))
    print(winner(num_items, num_take_outs, take_outs))
</code></pre>
    </div>