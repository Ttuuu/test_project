<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Probably the shortest way to do this is to use <code>array.filter</code> to only get the strings, <code>array.sort</code> to sort them by length, and get the first item of the resulting array.</p>

<pre><code>function findShortestWordAmongMixedElements(arr){
  return arr.filter(e =&gt; typeof e === 'string').sort((a, b) =&gt; a.length - b.length)[0];
}
</code></pre>

<p>Now a few things with your code...</p>

<p>First, a mixed-type array is strange. I'm curious as to what the situation is why it's mixed. Anyways, it's best to keep arrays contain only one type to keep it predictable. Having it mixed makes receiving functions do unnecessary type checks, like <code>containsStrings</code>.</p>

<p>Also, just don't do type checks. If the function expects an array of strings, then assume it's an array of strings. If it contains something other than a string, let it blow up, let it throw an error. It's the consumer's responsibility to provide the correct input. Again, you'll end up doing unnecessary type checks that will only slow down the code.</p>

<p><code>containsStrings</code> is also unnecessary. It's just a short-circuit if the array doesn't contain strings at all. <code>filter</code> can do that with one less call. If an array does not contain a string, <code>filter</code> will return an empty array, thus reduce won't run. If you give <code>reduce</code> an <code>undefined</code> as initial value, it will return <code>undefined</code> on an empty array.</p>
    </div>