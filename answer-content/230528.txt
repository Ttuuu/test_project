<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Your commenting style needs improvement</strong></p>

<ul>
<li>Either you comment all methods or none

<ul>
<li>This is generally not a good rule of thumb, but for coding tasks in a job interview setting can show consistency</li>
</ul></li>
<li>If you comment a method use "DocComment" style, i.e.</li>
</ul>

<pre><code>///&lt;summary&gt;
/// Moves robot one unit in direction faced
///&lt;/summary&gt; 
public void Move()
{
    ...
}
</code></pre>

<ul>
<li>If you comment on specific lines don't say what the line does (this should be obvious from the code) but why you implemented it the way you did</li>
</ul>

<pre><code>//Calls turn with direction as increment of _f     &lt;- useless comment
public void Left()
{
    Turn(() =&gt; (int)_f + 1);
}
</code></pre>

<ul>
<li>Only use comments if there is <strong>absolutely no other way</strong> to express it in code</li>
</ul>

<p><strong>You use code constructs that are not fit for the purpose</strong></p>

<ul>
<li>The <code>CommandHandler.cs</code> contains a <code>switch</code> with a single <code>case</code> and the code in there is not even poperly indented. Also a <code>case</code> should IMHO not contain more than two or three lines. If you need to handle more, extract a method</li>
</ul>

<p><strong>Naming is hard</strong></p>

<p>You should double check your naming.</p>

<pre><code>public static bool IsValidPlacement(int? a)
{
    var startIndex = 0;
    var endIndex = 4;

    return a &gt;= startIndex &amp;&amp; a &lt;= endIndex;
}
</code></pre>

<p>doesn't look bad, but consider the following changes</p>

<pre><code>public static bool IsValidPlacement(int placementIndex)
{
    const int minPlacementIndex = 0;
    const int maxPlacementIndex = 4;

    return placementIndex &gt;= minPlacementIndex 
            &amp;&amp; placementIndex &lt;= maxPlacementIndex;
}
</code></pre>

<ul>
<li>Even if you don't touch the vars make it explicitly clear to others that these values cannot be changed. </li>
<li>Keep the wording, don't use start and end when they refer to a min and max</li>
<li>Do not accept <code>int?</code> when you know that you absolutely must have a value here.</li>
</ul>
    </div>