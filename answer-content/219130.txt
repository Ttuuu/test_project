<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You started to write a class, but then stopped. You should continue. There are three things that are potentially <span class="math-container">\$O(n)\$</span> in this problem: </p>

<ol>
<li>You need to know the length of the list.</li>
<li>You need to know the last node of the list.</li>
<li>You need to know the <code>k-1</code>th node of the list.</li>
</ol>

<p>Two of those obviously go together, so you could justify writing a helper method that returns them both. The third one is arbitrary enough that there's not really any way to speed it up.</p>

<p>If you are in some kind of timed environment, you'll definitely want to wrap the list in a class and cache the <code>last</code> pointer and the <code>size</code> of the list.
If you do that, you can quickly compute <code>k % size</code> and then find #3, which will be <span class="math-container">\$O(n)\$</span>. </p>

<p>If I were trying to write challenges for a timed competition, I would include a large list and <code>k = 2 * n - 1</code>.</p>

<p>I see several obvious methods in your code, including a more sophisticated constructor that could take an array (perhaps an outer <code>LinkedList</code> class), the <code>length</code> operation, the <code>get_last</code> operation, the <code>get_item</code> operation, the <code>print</code> or perhaps <code>map</code> operation, and obviously missing is the <code>compare</code> operation.</p>

<p>You should probably check for <code>k == 0</code> before finding the last item. I can easily see a <code>time-limit-exceeded</code> trap being to construct a huge list, then do a <code>rotate</code> with <code>k=0</code>.</p>
    </div>