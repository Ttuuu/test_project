<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Problems with code run</h1>

<ul>
<li><h3>imports</h3>

<p>I'd qualify the code as non-working. It forgets to import <code>ttk</code></p>

<pre><code>from tkinter import ttk
</code></pre></li>
<li><h3>DB structure.</h3>

<p>No table creation code found. We can only guess the db reading queries. Request to include table info next time.</p></li>
<li><h3>Include sample repo</h3>

<p>For images etc, if we got the link to a sample repo, it might be easier to run the file.</p></li>
</ul>

<h1>Recommendations</h1>

<h1>Use SQLAlchemy</h1>

<p><strong>models.py</strong></p>

<p>I highly recommend you use <a href="https://www.sqlalchemy.org" rel="nofollow noreferrer">sqlalchemy</a>. Since you are defining a custom model class, sqlalchemy's models are far more flexible.</p>

<pre><code>from sqlalchemy import Column, String, Integer
from sqlalchemy.ext.declarative import declarative_base


Base = declarative_base()


class Task(Base):
    __tablename__ = 'tasks'

    id = Column(Integer, primary_key=True)
    task_name = Column(String)
    task_description = Column(String)
</code></pre>

<p>Then for queries it's a lot simpler:</p>

<pre><code>session.query(Task).all()
session.query(Task).filter(record.id == some_id).first()
session.query(Task).like(search).all()
</code></pre>

<h1>Why <code>r''</code>?</h1>

<p>I guess you are using <code>r</code> in paths so as not to escape slashes. But forward slashes work on Windows as well.</p>

<h1>A custom function for images</h1>

<p>Since you are appending <code>../images</code> each time, add a function to get the image path by just specifying the name:</p>

<pre class="lang-py prettyprint-override"><code>import os


def image(item):
    dir_path = '../images'
    return os.path.join(dir_path, item)
</code></pre>

<h1>Better class naming</h1>

<p><code>class TopFrame:</code> does not give info about the section. Maybe <code>class OptionsFrame:</code> might be better.</p>

<h1>Better way to avoid long lines</h1>

<p>Long lines like this:</p>

<pre class="lang-py prettyprint-override"><code>        self.book_button = tk.Button(self.top_frame, text='Task\nManagement', image=self.book_icon, compound='left',
                                     font='arial 12 bold', bg='red', padx=10)
</code></pre>

<p>can be structured like this:</p>

<pre class="lang-py prettyprint-override"><code>        self.book_button = tk.Button(
            self.top_frame, 
            text='Task\nManagement', 
            image=self.book_icon, 
            compound='left',
            font='arial 12 bold', 
            bg='red', 
            padx=10)
</code></pre>

<p>It makes the code more readable.</p>

<h1>Group strings in one place.</h1>

<p>Let's say you want to change the welcome message. You'd have to dig in the frame code.</p>

<p>Let's say you had a class:</p>

<pre class="lang-py prettyprint-override"><code>class UIStrings:
    def __init__(self):
        welcome_message = '...'
</code></pre>

<p>Then you reference <code>UIStrings.welcome_message</code> in your UI code. This idea can be expanded for internationalisation, maybe using XML files.</p>

<h1>Pass controller explicitly</h1>

<p>Given</p>

<pre><code>c = Controller()
c.view.start()
</code></pre>

<p>having:</p>

<pre><code>controller = Controller()
view = View(controller=controller)
</code></pre>

<p>might suggest a cleaner architecture.</p>
    </div>