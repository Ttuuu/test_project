<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>So I would like to know whether I could make this program shorter and more efficient.</p>
</blockquote>

<p>Others have addressed style, but I will address algorithm.</p>

<p>The memoized recursion is a decent solution:</p>

<pre class="lang-py prettyprint-override"><code>import functools

@functools.lru_cache(maxsize=None)
def fib(n):
    if n &lt;= 1:
        return n
    else:
       return fib(n-1) + fib(n-2).
</code></pre>

<p>This memoization method allows you basically type in the recurrence relation <span class="math-container">\$F_n = F_{n-1} + F_{n-2}\$</span> and all of the work of organizing the order of evaluating the functions is automatically done for you.</p>

<p>However, in the case of Fibonacci, you really only need to be storing two values, because you can always use the pair <span class="math-container">\$(F_{n-1}, F_n)\$</span> to compute the "next" pair <span class="math-container">\$(F_n, F_{n+1})\$</span>. For this reason, the following solution works, and is faster than above (fewer function calls). It also has the advantage of never causing stack overflows and using a constant amount of memory.</p>

<pre class="lang-py prettyprint-override"><code>def fib(n):
    a, b = 0, 1
    for _ in range(n):
        a, b = b, a+b
    return a
</code></pre>

<p>Now, if you are computing some seriously huge numbers, you can exploit some interesting properties of matrix algebra to get an even faster solution. The basic property that we want to exploit is that
<span class="math-container">\$
\begin{pmatrix} 1 &amp; 1 \\ 1 &amp; 0 \end{pmatrix}^n
= \begin{pmatrix} F_{n+1} &amp; F_n \\ F_n &amp; F_{n-1} \end{pmatrix}.
\$</span></p>

<p>Try this out yourself by computing this matrix times itself, times itself, etc. You should see that it boils down to the previous solution. But now we can apply <a href="https://en.wikipedia.org/wiki/Exponentiation_by_squaring*" rel="nofollow noreferrer">exponentiation by squaring</a> (with matrices rather than numbers) to get a faster solution. In particular, if we label 
<span class="math-container">\$
A = \begin{pmatrix}1 &amp; 1 \\ 1 &amp; 0\end{pmatrix}, 
\$</span></p>

<p>then we known that</p>

<p><span class="math-container">\$
A^n = \begin{cases}\left(A^{n/2}\right)^2 &amp;\text{if n is even}\\ A\left(A^{\lfloor n/2\rfloor}\right)^2 &amp;\text{if n is odd}\end{cases}
\$</span></p>

<p>This suggests the following implementation:</p>

<pre class="lang-py prettyprint-override"><code>def matrix_square(a,b,c,d):
    return a*a+b*c, b*(a+d), c*(a+d), d*d+b*c

def matrix_times_A(a,b,c,d):
    return a+b, a, c+d, c

def fib_matrix(n):
    if n == 0:
        # identity matrix
        return 1, 0, 0, 1
    half_power = fib_matrix(n//2)
    even_power = matrix_square(*half_power)
    if n % 2 == 1:
        return matrix_times_A(*even_power)
    else:
        return even_power

def fib(n):
    return fib_matrix(n)[1]

</code></pre>

<p>This is already noticeably faster than the other methods for <code>n=500_000</code>. Plenty of further optimizations can be made here, and I'll leave those as an exercise. You might be able to figure out how to make this iterative rather than recursive.</p>

<p>Even further speed can be gained if you use the "fast doubling" recurrence shown 
<a href="https://www.nayuki.io/page/fast-fibonacci-algorithms" rel="nofollow noreferrer">here</a>. That site looks like it also contains some implementations.</p>

<p>The last thing I'd like to add is that if your application does not require exact integer precision, you can use <a href="http://mathworld.wolfram.com/BinetsFibonacciNumberFormula.html" rel="nofollow noreferrer">Binet's Formula</a>. In fact, this formula can be derived by diagonalizing the matrix from above (a good exercise if you want to practice some linear algebra). Note that because <span class="math-container">\$|(1-\sqrt{5})/2|&lt;1\$</span>, the second term becomes insignificant, and is unnecessary to compute. </p>
    </div>