<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This self-answer contains an improved solution and incorporates several items 
suggested by Caridorc.</p>

<p>The changes to the original version include reduced vertical whitespace, declaring variables just before use as well as declaring loop variables inside loops as allowed in C99 programs.</p>

<p>Also the 2 primary routines, move smallest disk and move alternate disk, are 
rewritten as functions. The functions return which disk to move. Pointers are used to keep track of which rods are involved in moving the disk.</p>

<p>These changes make the resulting program simpler and clearer.</p>

<p>edit: used % (MOD) instead of both the Boolean variable and the bit-wise AND  </p>

<pre><code>/* tower.c

   Tower of Hanoi -- mechanical solution

   Place one of the three rods upright at each corner of a triangle.

   Alternate between moving the smallest disk and making the only valid move
   which does not involve the smallest disk.

   The smallest disk always moves in the same direction: counter-clockwise
   if there are an odd number of disks in the puzzle; clockwise if there are
   an even number of disks in the puzzle.
*/

#include &lt;stdio.h&gt;

int moveSmallestDisk (int rod[], int smallestDir, int *ptrFrom, int *ptrTo)
{
    *ptrFrom = rod[1];
    *ptrTo = *ptrFrom + smallestDir;
    if ( *ptrTo &gt; 3 )
        *ptrTo = 1;
    if ( *ptrTo &lt; 1 )
        *ptrTo = 3;
    return 1;
}

int moveAlternateDisk (int rod[], int numberOfDisks, int *ptrFrom, int *ptrTo)
{
    // determine which disk is at the top of each rod
    int topDisk[4];
    for ( int i = 1; i &lt;= 3; ++i )
        topDisk[i] = numberOfDisks + 1;
    for ( int i = numberOfDisks; i &gt;= 1; --i )
        topDisk[rod[i]] = i;

    switch (rod[1])
    {
        case 1:
            *ptrFrom = 2;
            *ptrTo = 3;
            break;
        case 2:
            *ptrFrom = 1;
            *ptrTo = 3;
            break;
        case 3:
            *ptrFrom = 1;
            *ptrTo = 2;
            break;
        default:
            printf ("error");
            break;
    }
    if ( topDisk[*ptrFrom] &gt; topDisk[*ptrTo] ) {
        int temp;
        temp = *ptrFrom;
        *ptrFrom = *ptrTo;
        *ptrTo = temp;
    }

    return topDisk[*ptrFrom];
}

int destinationCount (int rod[], int numberOfDisks)
{
    int count = 0;

    for ( int i = 1; i &lt;= numberOfDisks; ++i ) {
        if ( rod[i] == 3 )
            ++count;
    }

    return count;
}

int main (void)
{
    printf ("\nTower of Hanoi puzzle\n\n");
    printf ("number of disks? ");
    int numberOfDisks;
    scanf ("%i", &amp;numberOfDisks);

    int smallestDir;
    if ( (numberOfDisks % 2) == 0 )
        smallestDir = 1;
    else
        smallestDir = -1;
    int rod[numberOfDisks + 1];
    // all disks start on the first rod
    for ( int i = 1; i &lt;= numberOfDisks; ++i )
        rod[i] = 1;

    printf ("\nsolution\n\n");
    int moveCount = 0, disk, rodFrom, rodTo;

    do {
        ++moveCount;

        if ( (moveCount % 2) == 1 )
            disk = moveSmallestDisk (rod, smallestDir, &amp;rodFrom, &amp;rodTo);
        else
            disk = moveAlternateDisk (rod, numberOfDisks, &amp;rodFrom, &amp;rodTo);

        printf ("%i: disk %i rod %c to rod %c\n", moveCount, disk,
               rodFrom + 64, rodTo + 64);

        rod[disk] = rodTo;
    }
    while ( destinationCount (rod, numberOfDisks) != numberOfDisks );

    return 0;
}
</code></pre>
    </div>