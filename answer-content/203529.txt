<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is a follow-on to <a href="/a/203492">Josay's answer</a>, and uses the same test suite.</p>

<p>We don't need to convert the two strings to lists; instead, we just need to pick the front character from the earlier of the two at each iteration (making sure that a proper substring of the other is correctly handled).  Then the function looks like this:</p>

<pre><code>def get_smallest_string_combination(a, b):
    """Return the lexicographically smallest string ..."""

    output = ""

    while a and b:
        if a + b &lt; b + a:
            output += a[0]
            a = a[1:]
        else:
            output += b[0]
            b = b[1:]
    return output + a + b
</code></pre>

<p>We can use the <a href="https://docs.python.org/3/library/doctest.html" rel="nofollow noreferrer"><code>doctest</code></a> module to incorporate our test cases into the documentation:</p>

<pre><code>def get_smallest_string_combination(a, b):
    """
    Return the lexicographically smallest string formed from the input strings, keeping each string
    in order in the result.

    Same length
    &gt;&gt;&gt; get_smallest_string_combination("ACEG", "BDFH")
    'ABCDEFGH'
    &gt;&gt;&gt; get_smallest_string_combination("ABCD", "ABCD")
    'AABBCCDD'

    Empty input
    &gt;&gt;&gt; get_smallest_string_combination("ABCD", "")
    'ABCD'
    &gt;&gt;&gt; get_smallest_string_combination("", "ABCD")
    'ABCD'

    Different length
    &gt;&gt;&gt; get_smallest_string_combination("Z", "ABCD")
    'ABCDZ'
    &gt;&gt;&gt; get_smallest_string_combination("ABCD", "Z")
    'ABCDZ'

    Descending strings
    &gt;&gt;&gt; get_smallest_string_combination("BA", "BA")
    'BABA'

    Look-ahead
    &gt;&gt;&gt; get_smallest_string_combination("ZAX", "ZAY")
    'ZAXZAY'
    &gt;&gt;&gt; get_smallest_string_combination("ZAY", "ZAX")
    'ZAXZAY'

    Proper prefix
    &gt;&gt;&gt; get_smallest_string_combination("BABC", "BA")
    'BABABC'
    &gt;&gt;&gt; get_smallest_string_combination("CABC", "CA")
    'CABCAC'
    &gt;&gt;&gt; get_smallest_string_combination("BAAC", "BA")
    'BAABAC'
    """

    output = ''
    while a and b:
        if a + b &lt; b + a:
            output += a[0]
            a = a[1:]
        else:
            output += b[0]
            b = b[1:]
    return output + a + b

if __name__ == '__main__':
    import doctest
    doctest.testmod()
</code></pre>

<p>Note that performance may be a concern, especially for longer inputs, as we create 4 new strings on every iteration (2 <code>+</code> operations before comparison, one string slice, and the append to output).  It may be worth implementing custom classes to provide views onto substrings and concatenations if the impacts are significant enough.</p>
    </div>