<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There has already been some discussion by <a href="https://codereview.stackexchange.com/users/131732/oh-my-goodness">@Oh My Goodness</a> and <a href="https://codereview.stackexchange.com/users/120556/blindman67">@Blindman67</a> in the comments about the time complexity of this code vs Fisher-Yates. I don't really have much to add to that discussion but will offer some suggestions about the code on a deeper level below.</p>

<p>Like I mentioned in <a href="https://codereview.stackexchange.com/a/194958/120114">my answer to your post <em>Simple math game in JavaScript</em></a> some variable names could more accurately hint at the semantic meaning of the value - for example, instead of <code>x.ran = Math.random();</code>, a name like <code>sortVal</code> would hint that the value is to be used for sorting.</p>

<pre><code>array.forEach( x =&gt;{
  x.sortVal = Math.random();
})
</code></pre>

<hr>

<p>The arrow function in the <code>shuffle()</code> method is quite short and thus can be simplified to a single line:</p>

<pre><code>array.sort( (a, b) =&gt; a.sortVal - b.sortVal)
</code></pre>

<p>The <code>forEach</code> block above it could also be simplified:</p>

<pre><code>array.forEach( x =&gt; x.sortVal = Math.random())
</code></pre>

<p>In this case, <code>x.sortVal</code> would be returned in each iteration but that doesn't make a difference.</p>

<hr>

<p>The Array sort method <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort" rel="nofollow noreferrer"><code>Array.prototype.sort()</code></a> returns the array so the <code>shuffle()</code> function could be simplified to have the <code>return</code> statement on the same line as the call to that method:</p>

<pre><code>  return array.sort( (a, b) =&gt; a.sortVal - b.sortVal)
</code></pre>

<hr>

<p>Additionally, any value that doesn't get re-assigned could be declared using <code>const</code>, which would help avoid any unintentional re-assignment - e.g. <code>deck</code> within <code>shuffle()</code>, and <code>deck</code> at the end of the code.</p>
    </div>