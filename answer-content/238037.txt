<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Kata compliance</strong></p>

<p>Your solution is very close to the <a href="http://butunclebob.com/ArticleS.UncleBob.TheBowlingGameKata" rel="nofollow noreferrer">template</a>.  Bob seems to expect you to more or less type in his solution, working through the steps in order to end up with the same code, thus forming a way of thinking through repetition.  Your code is slightly different, but still satisfies the requirements, and of course you may have worked from a different description.  You've generated similar refactorings making the code easy to read.</p>

<p><strong>The invisible bug</strong></p>

<p>You have a slight bug in your code.  I say slight, because it currently has no observable impact.  Given three rolls (10, 0, 1).  There's a strike, and a frame of 1, which would score <strong>strike (10) + bonus (0 + 1) + second frame (1) = 12</strong>.  The way your code processes, it's a <strong>spare (10 + 0) + bonus (1) + second frame (1) = 12</strong>.  The end result is the same, but it's running through your code in an unexpected route.  This seems like something that 'could' cause future issues, if for example you wanted to provide a summary of the frame scores.  It can be fixed by checking if it's a strike, before checking if it's a spare.</p>

<p><strong>Test Formatting</strong></p>

<p>Your tests are in a slightly weird format.  I'd expect the layout to be:</p>

<pre><code>@Test
void game_just_1_pin_get_hit() {
</code></pre>

<p><strong>Consistency</strong></p>

<p>In your tests you've got two methods that do a similar thing:</p>

<pre><code>private void rollMany(int pins, int times) {
private void rollPair(int repeatTimes, int firstRollPinsKnockedDown, int secondRollPinsKnockedDown) {
</code></pre>

<p>One takes the number of times to perform the iteration as the second parameter, the other takes it as a first.  This can be a  bit misleading when reading the tests.  Your initial test names start with <code>game_of</code>, setting the context that the test is checking an entire game.  You then drop the prefix and instead go with <code>knockdown</code>, even though you're still testing the whole game in these tests.  Taking a consistent naming approach can make it easier to know what to expect from the test.</p>

<p><strong>Constants</strong></p>

<p>The Kata template I've looked at has a similar approach to yours, so this may be more of a comment on the Kata, however I think the code could benefit from the use of some constants.  This would help to set context for people that don't know the game, about the number of pins per frame and the maximum number of rolls in a standard game.</p>

<p><strong>Error checking</strong></p>

<p>Again, this seems to be more a reflection of the Kata itself, there's no error checking in the written code.  There's nothing to check that you're not knocking down more than the number of pins the game allows, no checking that you're not trying to roll more balls than the class has capacity to deal with, etc.  It's an important next step to consider what situations the class might need to handle.</p>

<p><strong>Typo</strong></p>

<p>There seems to be a typo in this test name:</p>

<pre><code>knockdown_five_and_spare_ten_times_and_fice
</code></pre>

<p>Should be <code>five</code> not <code>fice</code>?</p>
    </div>