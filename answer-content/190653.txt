<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As far as method chaining goes, this is neatly implemented.</p>

<hr>

<p>You've swapped <strong>To</strong> and <strong>From</strong>, the method names are inverted. I assume that's just a typo.</p>

<pre><code>public MailManager To(string address)
{
    _mail.From = new MailAddress(address);
    return this;
}

public MailManager From(string address)
{
    _mail.To.Add(new MailAddress(address));
    return this;
}
</code></pre>

<hr>

<p>As it currently stands, I don't think method chaining is really needed here. Every method operates as a basic property setter, which can be handled by using public properties.</p>

<p>This is a matter of preference; but in C# I'd be more inclined to use public properties as opposed to methods.<br>
In the past, all we had was fields and methods. When the <em>tiniest</em> amount of logic was needed to set a field value, we had to rely on methods. Properties were added as a compromise: they are used for setting field values, but you're able to add some minor logic (<strong>within reason</strong>).</p>

<p>Simple string values can be handled by basic properties:</p>

<pre><code>public string Subject
{
    get { return _mail.Subject; }
    set { _mail.Subject = value; }
}
</code></pre>

<p><em>Note: This example directly sets the value of <code>_mail.Subject</code>. Personally, I'd prefer to not use <code>_mail</code> until the <code>Send()</code> was triggered (and store the values in properties until then), but that may be too subjective for a review.</em></p>

<p>Your current <code>To()</code> method somewhat conceals the fact that you can add more than one recipient. It doesn't suggest that you're adding to a list. Using a property, this is slightly easier to understand:</p>

<pre><code>public List&lt;string&gt; To { get; set; }
</code></pre>

<p>You can cast these into the appropriate <code>MailAddress</code> object and add it to <code>_mail</code> inside the <code>Send()</code> method:</p>

<pre><code>_mail.To.AddRange(this.To.Select(s =&gt; new MailAddress(s));
</code></pre>

<p>An example of how you'd use a property-based approach:</p>

<pre><code>var mailManager = new MailManager() {
    From = _emailSettings.Email,
    To = new List&lt;string&gt;() { item.Email },
    Subject = string.Format(_emailSettings.Subject, item.Name),
    Body = body,
    IsBodyHtml = true,
    Host = _emailSettings.Domain,
    Port = _emailSettings.Port,
    Credentials =new NetworkCredential(_emailSettings.Email, _emailSettings.Password),
    EnableSsl = true
};

mailManager.Send(); 
</code></pre>

<p><em>Note: You can also inline everything, i.e; <code>(new MailManager() { ... }).Send();</code>.</em></p>

<p><em>Note: I set the property values in the property initializer. You're not required to do so, you can also just store the <code>MailManager</code> in a variable and set its properties when you want to at a later stage (but obviously before calling <code>Send()</code>).</em></p>

<blockquote>
  <p><strong>Should you avoid method chaining?</strong><br>
  No. You wanted to use it, and you used it in a good way. I'm just trying to offer you an alternative which requires less code to achieve the same result.  </p>
  
  <p>If you were implementing method chaining in a class where there is a <em>lot</em> of business logic involved when a method gets calls, then method chaining becomes the preferred approach.<br>
  For the current <code>MailManager</code> class, I find that it doesn't have enough business logic to warrant method chaining just yet. But it's not particularly wrong to do so, just a bit more cumbersome (in my opinion).</p>
</blockquote>

<hr>

<p>Some minor nitpicks:</p>

<ul>
<li>If you're going to use method chaining to simplify the syntax, it seems consistent to change the <code>Credentials</code> method to take two strings (email,password) instead of a <code>NetworkCredential</code>, or at least create two overloaded methods to allow for either option. <code>Credentials(_emailSettings.Email, _emailSettings.Password)</code> is nicer to read than <code>Credentials(new NetworkCredential(_emailSettings.Email, _emailSettings.Password))</code></li>
<li><code>IsBodyHtml()</code> Based on its name, this should be a method that returns a boolean, instead of setting a boolean. A better name would be <code>SetBodyHtml()</code></li>
<li><code>AlternateViews(AlternateView alternateView)</code> should really be called <code>AddAlternateView(AlternateView alternateView)</code></li>
<li>Similarly, <code>To</code> really should be called <code>AddRecipient</code>, since calling the method <strong>adds</strong> a second value instead of overwriting the first value.

<ul>
<li>I chose <code>AddRecipient</code> instead of <code>AddTo</code> to avoid semantical confusion between "Add a <strong>To</strong>-recipient" and "Add this <strong>to</strong> that".</li>
</ul></li>
<li>I would personally change <code>EnableSsl(bool enableSsl = true)</code>, though I can see argument for why you used your version.

<ul>
<li><code>UseSsl(bool useSsl = true)</code></li>
<li><code>EnableSsl()</code> and <code>DisableSsl()</code></li>
</ul></li>
</ul>
    </div>