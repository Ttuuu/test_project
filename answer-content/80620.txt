<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code looks ok and probably does the job properly :-)</p>

<p><strong>Style</strong></p>

<p>However, it is not quite perfect. Python has a code style called <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP8</a> and is definitly worth a read. Among other things, it says :</p>

<blockquote>
  <p>Constants Constants are usually defined on a module level and written
  in all capital letters with underscores separating words. Examples
  include MAX_OVERFLOW and TOTAL .</p>
</blockquote>

<p>Here, <code>inch</code> definitly looks like a constant so <code>INCH</code> would be better.</p>

<p>Also, not really important but you have an "extraneous whitespace" in <code>(centimeters , centimeters</code>.</p>

<p><strong>Functions</strong></p>

<p>Also, instead of having your conversion logic hidden in your logic handling input/output (with <code>print</code>), you might want to extract in in a simple function.</p>

<p><strong>Organisation</strong></p>

<p>Another to know if you are beginning with Python is that a good thing to do is to have your definitions of constants/functions/classes/etc in a file in such a way that you can re-use it later on (via imports mechanisms). If you don't want your logic "actually doing something" to mess with everything when you import your code, the technic is to use an <a href="https://stackoverflow.com/questions/419163/what-does-if-name-main-do"><code>if __name__ == "__main__":</code> guard</a>.</p>

<p><strong>Naming</strong></p>

<p>Naming is quite important in programming. Here <code>centimeters</code> in top of being long does not convey much meaning. I reckon <code>nb_cm</code> gives more information. Similarly, <code>NB_CM_IN_INCH</code> is better than <code>INCH</code>.</p>

<p><strong>User interface</strong></p>

<p>It could be a good idea to handle <code>float</code> values on top of integers.</p>

<p><strong>Python 3 (and notes about <code>input</code>)</strong></p>

<p>Final thing before I forget, from the way you have used <code>print</code>, I guess you are using Python 2. If you have no special reason to do so, you might want to start using Python 3 instead. You'll find a few things slightly different but you'll be better off learning directly on the latest versions so you have the good habits and nothing to un-learn.</p>

<p>However, I have to point out that <code>input</code> is "slightly" different on the 2 versions of Python. <a href="https://docs.python.org/3.4/library/functions.html#input" rel="nofollow noreferrer"><code>input</code></a> from Python 3 corresponds to <a href="https://docs.python.org/2.7/library/functions.html#raw_input" rel="nofollow noreferrer"><code>raw_input</code></a>
while <a href="https://docs.python.org/2.7/library/functions.html#input" rel="nofollow noreferrer"><code>input</code></a> from Python 2 can be simulated in Python 3 with <code>eval(input())</code>.</p>

<p>Indeed, as you might or might not know, what you were doing is doing more that merely asking a string from the user, it was asking for Python code and handling it as such.</p>

<p>For instance, </p>

<blockquote>
  <p>Enter a number of centimeters <strong>2*3</strong></p>
  
  <p>Entered number of <strong>6</strong> centimeters is equal to 2.36220472441 inches</p>
</blockquote>

<p>See how the number was evaluated. It looks good in theory or in you really know what you are doing. In most cases, using <a href="https://stackoverflow.com/questions/1832940/is-using-eval-in-python-a-bad-practice"><code>eval</code> directly or indirectly is considered a bad practice.</a></p>

<p><strong>Final code</strong></p>

<p>Here's my version of the code (works in Python 2 but behavior is slightly different - cf note above).</p>

<pre><code>NB_CM_IN_INCH = 2.54

def convert_cm_in_inch(val):
    """You can put docstrings here :)."""
    return val / NB_CM_IN_INCH

def convert_inch_in_cm(val):
    """And here :D."""
    return val * NB_CM_IN_INCH

if __name__ == "__main__":
    nb_cm = float(input("Enter a number of centimeters: "))
    print("Entered number of %s centimeters is equal to %s inches" % (nb_cm, convert_cm_in_inch(nb_cm)))
</code></pre>

<p>It seems like I have said many things so I want you not to take it as criticism of your good but as advices if you keep on programming in Python.</p>
    </div>