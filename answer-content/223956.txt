<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>I suggest not codifying the derived types suggested in the type. Only note the ultimate base, size and alignment. Thus you are open to later change.</p>
<p>Add a templated alias to get the proper type from base plus candidates.</p>
</li>
<li><p>Assure that no over-sized object is ever assigned in <code>PolyUnionSize</code>, probably best using SFINAE. No need to defer to the user.</p>
</li>
<li><p>Don't assume constructing the new object will never fail.</p>
</li>
<li><p><code>PolyUnionSize::PolyUnionSize&lt;class D&gt;(D&amp;&amp; d)</code> and <code>PolyUnionSize::operator=&lt;class D&gt;(D&amp;&amp; d)</code> use perfect forwarding. You don't account for that by using <code>std::decay_t</code> where needed, nor heed it when computing <code>noexcept</code>.</p>
</li>
<li><p>The implicit copy-/move- ctor / assignment are only appropriate for trivial types. And in that case, why override the dtor?</p>
</li>
<li><p>As casts should be used sparingly, consider delegating between <code>op*</code> and <code>op-&gt;</code>.</p>
</li>
</ol>
    </div>