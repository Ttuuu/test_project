<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As 200_success mentions, your solution is <span class="math-container">\$O(n^2)\$</span>, due to the double for loop.</p>

<p>You actually have an error in your inner loop.  You start the inner loop with <code>for (int k = i; ...</code>, but it should be <code>for (int k = i + 1; ...</code>.  This means you could return <code>true</code> for an even expected sum when half of that value appears once in the list.</p>

<p>If you correct the above error, the test for <code>list.size() &lt; 2</code> is unnecessary.  The outer loop will run at most once (size=1) and the inner loop will not run at all, therefore the <code>return false;</code> at the end of the function will be executed.</p>

<hr>

<p>An <span class="math-container">\$O(n)\$</span> solution is:</p>

<ul>
<li>start with an empty set</li>
<li>for each value <code>x</code> in the list:

<ul>
<li>if set contains <code>expectedSum - x</code>, return <code>true</code></li>
<li>add <code>x</code> to the set.</li>
</ul></li>
<li>return<code>false</code></li>
</ul>

<p>It is important to check for containment before adding the value, or (<code>{1,2,3,4}</code>, <code>8</code>) would return <code>true</code>, despite not containing a pair of 4â€™s.</p>

<pre><code>Set&lt;Long&gt; set = new HashSet&lt;&gt;(list.size()*2);
for(long x: list) {
    if (set.contains(expectedSum - x)) {
        return true;
    }
    set.add(x);
}
return false;
</code></pre>

<p>The list does not need to be sorted.</p>

<p>The capacity of the <code>HashSet</code> is initialized to double the size of the list, to avoid re-sizings, which would slow the algorithm down.</p>

<p>From the comments: "Why double?" The default load factor for a <code>HashSet</code> is 0.75. If the number of elements in the set exceeds <code>load_factor * capacity</code>, the capacity is increased and the contents rehashed for the new size. If the capacity was set to the size of the list, it would still end up expanding the capacity and rehashing after adding the first 75% of the entries in the list. You need an initial capacity at least 33% larger than the final size to avoid the expansion: <code>list.size()*4/3 + 1</code> might be sufficient, but is perhaps cutting things a little too fine.  Double seemed a reasonable amount.</p>
    </div>