<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Use <code>const</code> wherever value is not re-assigned</h3>

<p>The code makes use of <code>let</code> for the majority of the variables. Generally it is wise to Use <code>const</code> for variables and then fall back to <code>let</code> if the value does need to be re-assigned. This avoids unintentional re-assignment.</p>

<h3><code>getColCards</code> method</h3>

<p>I wonder about the method <code>getColCards</code>: </p>

<blockquote>
<pre><code>getColCards(colid){
    let cards = this.state.cards.filter( c =&gt; c.colid == colid);
    return cards;
}
</code></pre>
</blockquote>

<p>Why store the filtered array  in <code>cards</code> before returning it? Why not just return the filtered list (without the intermediary assignment)? While it isn't an unused variable, I wonder if it was leftover from debugging the value. Some may argue that it is more readable but others may argue that it is pointless to create a variable for a value and then immediately return that value. For more information on this, refer to <a href="https://softwareengineering.stackexchange.com/a/340497/244085">these answers on a related topic</a>.</p>

<p>Perhaps naming the method something like <code>getFilteredColCards()</code> would maintain readability.</p>

<p>The method could be simplified as follows:</p>

<pre><code>getFilteredColCards(colid){
    return this.state.cards.filter( c =&gt; c.colid == colid);
}   
</code></pre>

<p>This may not use significantly less memory, but (since it is similar to <a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Return_values#Using_return_values_in_your_own_functions" rel="nofollow noreferrer">this example on the MDN documentation</a> about return values in functions) it is "<em>quicker to write, and more compact</em>"<sup><a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Return_values#Using_return_values_in_your_own_functions" rel="nofollow noreferrer">1</a></sup></p>

<h3>Function partials can be used instead of an extra lambda function</h3>

<p>The extra lambda/anonymous functions for the left &amp; right arrow click handlers could be removed by using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind" rel="nofollow noreferrer"><code>Funtion.bind()</code></a> to create a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind#Partially_applied_functions" rel="nofollow noreferrer">partially applied function</a>:</p>

<pre><code>&lt;span onClick = {this.moveCardLeft.bind(this, c)}&gt; {"&lt;   "} &lt;/span&gt;
</code></pre>

<p>and </p>

<pre><code>&lt;span onClick = {this.moveCardRight.bind(this, c)}&gt; {"    &gt;"} &lt;/span&gt; 
</code></pre>

<h3>Useless variable</h3>

<p>The method <code>render()</code> has a variable <code>cols</code> but that doesn't appear to be used (though correct me if I am wrong about that). It does appear that <code>this.state.cols</code> is used - was <code>cols</code> left over from previous code? It appears to be a primitive version of <code>cols</code> from the state object. </p>

<h3>Iterator variable name re-used</h3>

<p>The method <code>render()</code> has the following lines:</p>

<blockquote>
<pre><code>let colCards = this.state.cols.map(c =&gt; {
let cards = this.getColCards(c.id).map(c =&gt;  {
</code></pre>
</blockquote>

<p>So in both cases <code>c</code> is used. When I tried to run the code I saw the warning:</p>

<blockquote>
  <p>Warning: Each child in an array or iterator should have a unique "key" prop.</p>
  
  <p>Check the render method of <code>App</code>. See <a href="https://fb.me/react-warning-keys" rel="nofollow noreferrer">https://fb.me/react-warning-keys</a> for more information.   </p>
</blockquote>

<p>So I added a key to make those <code>&lt;div&gt;</code> elements unique and to utilize the outer iterator, I renamed the inner iterator variable <code>cc</code>:</p>

<pre><code>const colCards = this.state.cols.map(c =&gt; {
      const cards = this.getColCards(c.id).map(cc =&gt;  {
        return &lt;div key={c.id + '_' + cc.id}&gt;
</code></pre>

<p><sup>1</sup><sub><a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Return_values#Using_return_values_in_your_own_functions" rel="nofollow noreferrer">https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Return_values#Using_return_values_in_your_own_functions</a></sub></p>
    </div>