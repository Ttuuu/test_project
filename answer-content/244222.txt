<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I see you used your custom <code>ScraperException</code> exception in two different modes: the first is below:</p>
<pre><code>private static List&lt;String&gt; noEmptyElseThrow(final List&lt;String&gt; weeks) throws ScraperException{
    if (weeks.isEmpty()) {
         throw new ScraperException("Please provide a historical time range! Cannot rank otherwise!");
    } else {
        return weeks;
    }
}
</code></pre>
<p>To handle this situation, it could be better use the core java <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/IllegalArgumentException.html" rel="nofollow noreferrer">IllegalArgumentException</a> thrown to indicate that a method has been passed an illegal or inappropriate argument and because it is a subclass of <code>RuntimeException</code> and then an <em>unchecked</em> exception there is no need to declare it in the signature of the method. So you could write :</p>
<pre><code>private static List&lt;String&gt; noEmptyElseThrow(final List&lt;String&gt; weeks) {
    if (weeks.isEmpty()) {
         throw new IllegalArgumentException("Please provide a historical time range! Cannot rank otherwise!");
    } else {
        return weeks;
}
</code></pre>
<p>Note: from comments' section you can check @Marv suggested that the illegal argument is not directly connected to the user's actions but to the site structure. An alternative to my solution could be to maintain the old <code>ScraperException</code> with a more significative message like "weeks calendar cannot be empty", hiding all other aspects to the user.</p>
<p>The second mode is this:</p>
<pre><code>private Document loadDocument(final String url) throws ScraperException {
    try {
        return Jsoup.connect(url).timeout((int) timeout.toMillis()).get();
    } catch (IOException e) {
        throw new ScraperException("Error loading ATP website: " + e.toString());
    }
}
</code></pre>
<p>Because you are not hiding the true cause of the <code>ScraperException</code> adding the string representation of the <code>IOException</code> to your custom exception, you could use the fact that exceptions are chainable throwing a new IOException in this way :</p>
<pre><code>private Document loadDocument(final String url) throws IOException {
    try {
        return Jsoup.connect(url).timeout((int) timeout.toMillis()).get();
    } catch (IOException e) {
        throw new IOException("Error loading ATP website: ", e);
    }
}
</code></pre>
<p>Note: from comments' section you can check @Marv suggested to apply chain of exceptions to the old <code>ScraperException</code>. In this case the old <code>ScraperException</code> class could be rewritten like below:</p>
<pre><code>public class ScraperException extends Exception {
    private final String message;
    
    public ScraperException (String message) {
        this.message = message;
    }

    public ScraperException(String message, Throwable cause) {
        super(cause);
        this.message = message;
    }
    
    @Override
    public String toString() {
        return this.message;
    }
}
</code></pre>
<p>The method <code>loadDocument</code> consequently could be rewritten in this way:</p>
<pre><code>private Document loadDocument(final String url) throws ScraperException {
    try {
        return Jsoup.connect(url).timeout((int) timeout.toMillis()).get();
    } catch (IOException e) {
            throw new ScraperException("Error loading ATP website: ", e);
    }
}
</code></pre>
    </div>