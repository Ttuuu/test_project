<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>What I've seen the most when it comes to builder patterns is that the object (in your case <code>Animal</code>) will get constructed in the <code>build</code> method of the builder. It is preferred to create instances of objects with all the data that the object should have, eg not creating invalid states of an object. This prevents you from having illegal state in your program which might produce bugs. By constructing your <code>Animal</code> as soon as you create a builder instance you have to make your <code>Animal</code> mutable which is not always what you want. For example, in some cases a class might have only <code>final</code> fields which can only be assigned via constructor.</p>

<p>In your case, constructing the <code>Animal</code> in the <code>build</code> method it would look something like this:</p>

<pre class="lang-java prettyprint-override"><code>public class Animal {

    private String animalName;
    private int animalAge;

    public static class AnimalBuilder {
        private String animalName;
        private int animalAge;

        public AnimalBuilder() {
        }

        public Builder withName(String animalName) {
            this.animalName = animalName;
            return this;
        }

        public Builder withAge(int animalAge) {
            this.animalAge = animalAge;
            return this;
        }

        public Animal build(){
            Animal animal = new Animal();
            animal.animalName = this.animalName;
            animal.animalAge = this.animalAge;
            return animal;
        }
    }

    public Animal(){ }

    public String getAnimalName() {
        return animalName;
    }

    public int getAnimalAge() {
        return animalAge;
    } 
}
</code></pre>

<p>You can then use it</p>

<pre class="lang-java prettyprint-override"><code>Animal animal = new AnimalBuilder()
    .withName("Terry")
    .withAge(5)
    .build();
</code></pre>

<p>You can also add a static method <code>builder()</code> to the <code>Animal</code> class which returns a new builder:</p>

<pre class="lang-java prettyprint-override"><code>public class Animal {
    ...

    public static AnimalBuilder builder() {
        return new AnimalBuilder();
    }
}

Animal animal = Animal.builder()
    .withName("Terry")
    .withAge(5)
    .build();
</code></pre>

<p>Does this mean a lot of duplication? Unfortunately, yes, builder patterns need a lot of duplicate code. You can also look at Lombok's Builder annotation which will generate all the builder boilerplate code for you. In that case it will just be</p>

<pre class="lang-java prettyprint-override"><code>@Builder
public class Animal {

    private String animalName;
    private int animalAge;

    public Animal(){ }

    public String getAnimalName() {
        return animalName;
    }

    public int getAnimalAge() {
        return animalAge;
    } 
}
<span class="math-container">```</span>
</code></pre>
    </div>