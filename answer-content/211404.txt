<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Similar to Toto's answer, I recommend:</p>

<pre><code>function clean($var) {
    return preg_replace("~[^\w -]+~", "", $var);
}
</code></pre>

<p>This will replace all occurrences of one or more consecutive forbidden characters.</p>

<p>Adding the "one or more" (<code>+</code>) quantifier means longer potential matches and fewer total replacements.  IOW, imagine a carton of a dozen eggs on yhe ground.  If the task was to pick up 12 eggs, you <em>could</em> squat 12 times picking them up one at a time, or just squat once and pickup the carton.</p>

<p>I have eliminated the unnecessary inclusion of "single-use variables" as there is no benefit in retaining them for readability.</p>

<p>Following this custom function call, the call of <code>htmlspecialchars()</code> is useless because there won't be any chars to convert.</p>

<p>On the other hand, if you wanted to call <code>htmlspecialchars_decode()</code> prior to <code>clean()</code> there is reasonable logic to that decision, but it depends on the input that you are expecting.</p>
    </div>