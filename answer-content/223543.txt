<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In addition to the comments Carcigenicate provided, there are some places where you can improve the efficiency.  For example, the following code in <code>valid_number()</code> iterates over the row <code>size</code> times to fill <code>valid_row</code>. Then the same thing is done to fill <code>valid column</code>.</p>

<pre><code>valid_row = set()
for number in range(1, size + 1):    &lt;- this loops 'size' times
    if number not in board[row]:     &lt;- this also loops 'size' times
        valid_row.add(number)
</code></pre>

<p>This can be improved by starting with a full set and removing numbers that are already in the row or column.</p>

<pre><code>def valid_number(row, column, board, size):

    valid_numbers = set(range(1,size+1))

    for number in range(1, size+1):
        valid.discard(board[row, i])
        valid.discard(board[i, column])

    yield from valid_numbers
</code></pre>

<p>Every time <code>is_valid_sum()</code> is called, the entire instruction array is scanned once for each group to determine which cells are in the group, and what the op is.  This information doesn't change, so it would be more efficient to calculate that information up front. <code>make_group()</code> builds a dictionary mapping group numbers to the target value, operator and cells for that group. It should be created and passed as an argument to <code>solve_board()</code>.</p>

<pre><code>TARGET = 0
OP = 1
CELLS = 2

def make_groups(instruction_array):
    groups = {}

    for r in range(1, size+1):
        for c in range(1, size+1):
            # this presumes all instruction have an op
            # use 'None' for pre-filled cells
            group_number,target,op = instruction_array[r][c]

            if op:

                if group_number not in groups:
                    groups[group_number] = [target, op, []]

                groups[group_number][CELLS].append((r,c))

    return groups
</code></pre>

<p>Then, <code>is_valid_sum()</code> can be simplified to something like:</p>

<pre><code>def is_valid_sum(board, groups):
    for target, op, cells in groups.items():
        list_numbers = [board[r,c] for r,c in cells]

        combination_numbers = permutations(list_numbers, len(list_numbers))
        for combination in combination_numbers:
            if calculate(combination, target, op):
                break            # the beak skips over the else
        else:
            continue             # this is done if the loop finishes normally

        return False             
    return True
</code></pre>

<p>I used the <code>else</code> with the <code>for combination...</code> loop to clarify the logic.  Although it might make more sense to move the permutation calculations and the loop into the calculate function.  If the op is '+' or '*', the permutations are not needed.  If the op is '-' or '/', the largest number should be first unless the target can be a fraction or negative.</p>

<p>One last observation, <code>is_full()</code> is called by <code>solve_board()</code> to determine if the boards is filled up.  <code>solve_board()</code> is a recursive function that tries to fill a cell on every recursion.  Pass it a count of the number of cells that need to be filled and decrement the count with each level of recursion.  When the count reaches zero the board is full.  So <code>is_full()</code> is not needed.  Like so, where <code>num_cells</code> is the number of cells left to fill:</p>

<pre><code>def solve_board(board, instruction_array, size, groups, num_cells):
    if num_cells == 0:
        return is_valid_sum(board, instruction_array, number_groups), board

    for i, j in product(range(size),range(size)):

            ...
            is_solved, board = solve_board(board, instruction_array, size, groups, num_cells-1)
            ...
</code></pre>

<p>There are other optimizations that could be made, but that's all for now.</p>
    </div>