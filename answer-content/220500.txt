<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I only got to the core classes, not the game implementation. Hopefully this will give you something to think about.</p>

<h1>General</h1>

<p>Classes that are not designed for extension should be explicitly marked as final. Variables that will not be reassigned should also be marked as final. This makes it easier for readers of your code.</p>

<p>I'm assuming this API is designed only for a console UI. You've made several decisions which tie you strongly to that format, as noted below.</p>

<h1>Entity</h1>

<p>Avoid extension where possible. Classes are limited to exactly one parent class, and you can design yourself into a corner. I'd suggest making <code>Entity</code> an interface and copying the implementation into an abstract class. Clients can then choose whether or not to use the base implementation.</p>

<p>Classes that should not be instantiable should be declared as <code>abstract</code>. Your design is unclear - some instances (Snake, Player) extend <code>Entity</code>, while others just are entities (Snack). The difference appears to be whether or not the Entity can move, but movement is not part of the contract of the Entity class.</p>

<p>None of the protected properties should be protected. You lose encapsulation of them - they no longer belong to Entity. All the variables are already available via accessors.</p>

<p><code>walkable</code> is not a great property name. Something like <code>blocksMovement</code> would be more clear.</p>

<p>Encoding the <code>symbol</code> directly onto an <code>Entity</code> ties you pretty strongly to a console UI. <code>symbol</code> becomes meaningless if you add GUI support and clients don't implement a console version of their game.</p>

<p>The comments should all be Javadoc. Since This class is intended as part of your API, it should in general be much more strongly documented.</p>

<p>"multifarious" does not mean "can appear in multiple locations at the same time". The property is never used. Don't add support for features unless you're sure you need them, because you have to support them forever or break your clients. The entire concept of the property is dubious - how can an entity instance have a single x coordinate, a single y coordinate, and yet exist in multiple locations?</p>

<h1>Field</h1>

<p>As of recent Java versions, you no longer need to specify the generic type information on the RHS in most cases.</p>

<p>The constructor is easier to read if all the simple assignments occur before you build the <code>positions</code> variable.</p>

<p>Where possible, assign variables where they're defined.</p>

<p>Again you're directly tying yourself to a console with <code>emptyPositionRepresentation</code>. If it's your intent to do so, it should be mentioned. If not, it should be fixed.</p>

<p>In the constructor, it's a little cleaner to keep the reference to the created <code>List</code> around rather than calling <code>get()</code> <code>j</code> times.</p>

<p>You can't track the position of an <code>Entity</code> in both <code>Entity</code> and <code>Field</code>. It will confuse clients and they will get out synch. Let the <code>Field</code> handle this.</p>

<p>Good use of a defensive copy in <code>getEntities()</code>. Using <code>Collections.unmodifiableList()</code> is another option. Note that the entities themselves can still be modified by callers.</p>

<p><code>checkValidCoordinates</code> can have its logic simplified to <code>return !(x &gt;= height ...</code> or <code>return (x &gt;= 0) &amp;&amp; (x &lt; height) ..</code>. <code>hasPositionEntities</code> can likewise be simplified.</p>

<p>You're always checking <code>!checkValidCoordinates</code>. It would be easier if the method was <code>areInvalidCoordinates</code>.</p>

<p>Rather than dealing with a <code>List&lt;List&lt;List&lt;Entity&gt;&gt;&gt;</code>, it might be easier to deal with a <code>Position[][]</code>, where <code>Position</code> is a wrapper for a List. You can add some simple methods to that new class which would clean up your code quite a bit.</p>

<p><code>addEntity</code> is checking if the entity has been placed, and then it's checking the position to see if it's already there. The second check shouldn't be needed - if it's on the position, it should be tracked in the placed entities already.</p>

<p>Rather than tracking <code>multipleEntities</code> as a boolean, perhaps track a capacity for the position? Then you have a lot more flexibility than just one or many.</p>

<p>It would clean up your code if <code>placedEntities</code> was a <code>Map</code> of entities to their positions.</p>

<p>The validation checks are not consistent for adding vs. moving into a space. Specifically, <code>add()</code> checks to see if any of the entities in the position are moveable, for reasons that are not clear. If you decided to use a <code>Position</code> object, you could move that logic into one method on the Position.</p>

<p><code>getEntities()</code> appears to be unused and can be removed.</p>

<p>You might consider throwing exceptions in some cases rather than just returning <code>false</code>. For instance, if the client tries to move something that's not on the field, an exception is harder to miss than a return value.</p>

<p><code>moveEntity</code> isn't making sure that the entity is on the field.</p>

<p>Don't have a switch statement that does something for each possible enum value. Move that logic to the enum.</p>

<p>If you were to make all these changes, your code might look something like:</p>

<pre><code>public abstract class AbstractEntity implements Entity {

    private final String name;
    private final char symbol;

    /** controls if this entity can move around on a {@link Field} */
    private final boolean moveable;

    /** controls if other entities can walk on that entity on a {@link Field} */
    private final boolean blocksMovement;

    public AbstractEntity(final String name, final char symbol, final boolean moveable, final boolean blocksMovement) {
        this.name = name;
        this.symbol = symbol;
        this.moveable = moveable;
        this.blocksMovement = blocksMovement;
    }

    public boolean isMoveable() {
        return this.moveable;
    }

    public boolean blocksMovement() {
        return this.blocksMovement;
    }

    public String getName() {
        return this.name;
    }

    public char getSymbol() {
        return this.symbol;
    }

}
</code></pre>

<hr>

<pre><code>public enum Direction {

    UP(-1, 0),
    DOWN(+1, 0),
    LEFT(0, -1),
    RIGHT(0, 1);

    private final int adjustX;
    private final int adjustY;

    private Direction(final int adjustX, final int adjustY) {
        this.adjustX = adjustX;
        this.adjustY = adjustY;
    }

    public int newX(final Position position) {
        return position.getXCoordinate() + this.adjustX;
    }

    public int newY(final Position position) {
        return position.getYCoordinate() + this.adjustY;
    }
}
</code></pre>

<hr>

<pre><code>public interface Entity {

    boolean isMoveable();
    boolean blocksMovement();
    String getName();
    char getSymbol();

}
</code></pre>

<hr>

<pre><code>public final class Field {

    private final int height;
    private final int width;

    // only the last entity of a list is drawn on the field
    // field is built like that: [height][width] -&gt; List of Entities
    private final Position[][] positions;
    private final Map&lt;Entity, Position&gt; placedEntities = new HashMap&lt;&gt;();

    public Field(final int height, final int width, final int positionCapacity) {
        this(height, width, positionCapacity, '.');
    }

    private Field(
            final int height,
            final int width,
            final int positionCapacity,
            final char emptyPositionRepresentation) {

        this.height = height;
        this.width = width;

        positions = new Position[height][width];
        for (int i = 0; i &lt; height; i++) {
            for (int j = 0; j &lt; width; j++) {
                positions[i][j] = new Position(i, j, positionCapacity, emptyPositionRepresentation);
            }
        }
    }

    public int getHeight() {
        return this.height;
    }

    public int getWidth() {
        return this.width;
    }

    public boolean addEntity(final Entity entity, final int x, final int y) {
        if (this.areInvalidCoordinates(x, y)) {
            return false;
        }

        if (this.placedEntities.containsKey(entity)) {
            return false;
        }

        final Position position = positions[x][y];
        if (!position.canAddEntity()) {
            return false;
        }

        this.placedEntities.put(entity, position);
        position.add(entity);

        return true;
    }

    public boolean removeEntity(final Entity entity) {
        if (!placedEntities.containsKey(entity)) {
            return false;
        }

        final Position position = placedEntities.remove(entity);
        position.remove(entity);
        return true;
    }

    public boolean moveEntity(final Entity entity, final int newX, final int newY) {
        if (this.areInvalidCoordinates(newX, newY)) {
            return false;
        }

        if (!placedEntities.containsKey(entity)) {
            return false;
        }

        if (!entity.isMoveable()) {
            return false;
        }

        final Position newPosition = positions[newX][newY];
        if (!newPosition.canAddEntity()) {
            return false;
        }

        final Position oldPosition = this.placedEntities.put(entity, newPosition);
        oldPosition.remove(entity);
        newPosition.add(entity);

        return true;
    }

    public boolean moveEntity(final Entity entity, final Direction direction) {
        final Position position = this.placedEntities.get(entity);
        if (position == null) {
            return false;
        }

        return moveEntity(entity, direction.newX(position), direction.newY(position));
    }

    public boolean hasEntitiesAt(final int x, final int y) {
        return !this.positions[x][y].isEmpty();
    }

    public Collection&lt;Entity&gt; getEntitiesAt(final int x, final int y) {
        return this.positions[x][y].getEntities();
    }

    public Position getPositionForEntity(final Entity entity) {
        return this.placedEntities.get(entity);
    }

    public String toString() {
        final StringBuilder returnValue = new StringBuilder();
        for (int i = 0; i &lt; this.height; i++) {
            for (int j = 0; j &lt; this.width; j++) {
                returnValue.append(positions[i][j].asChar());
            }
            returnValue.append('\n');
        }
        return returnValue.toString();
    }

    private boolean areInvalidCoordinates(final int x, final int y) {
        return (x &lt; 0) || (x &gt;= this.height) || (y &lt; 0) &amp;&amp; (y &gt;= this.width);
    }
}
</code></pre>

<hr>

<pre><code>public final class Position {

    private final int xCoordinate;
    private final int yCoordinate;
    private final int capacity;
    private final char emptyPositionRepresentation;
    private final List&lt;Entity&gt; entities = new ArrayList&lt;&gt;();

    public Position(
            final int xCoordinate,
            final int yCoordinate,
            final int capacity,
            final char emptyPositionRepresentation) {
        this.xCoordinate = xCoordinate;
        this.yCoordinate = yCoordinate;
        this.capacity = capacity;
        this.emptyPositionRepresentation = emptyPositionRepresentation;
    }

    public int getXCoordinate() {
        return this.xCoordinate;
    }

    public int getYCoordinate() {
        return this.yCoordinate;
    }

    public boolean contains(final Entity entity) {
        return this.entities.contains(entity);
    }

    public boolean isEmpty() {
        return this.entities.isEmpty();
    }

    public boolean add(final Entity entity) {
        if (this.capacity &gt; this.entities.size()) {
            return false;
        }
        return this.entities.add(entity);
    }

    public boolean remove(final Entity entity) {
        return this.entities.remove(entity);
    }

    public boolean canAddEntity() {
        if (this.capacity &gt; this.entities.size()) {
            return false;
        }

        for (final Entity entity : this.entities) {
            if (entity.blocksMovement()
                    || !entity.isMoveable()) {
                return false;
            }
        }

        return true;
    }

    public Collection&lt;Entity&gt; getEntities() {
        return Collections.unmodifiableCollection(this.entities);
    }

    /**
     * @return a character representation of the entities in this position.
     */
    public char asChar() {
        if (entities.isEmpty()) {
            return this.emptyPositionRepresentation;
        }

        return this.entities.get(entities.size() - 1).getSymbol();
    }


}
</code></pre>
    </div>