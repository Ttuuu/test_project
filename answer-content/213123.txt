<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>After a large refactoring based on ideas from @esote answer, here is the result: </p>

<p><strong>gotranseq.go</strong></p>

<pre><code>package transeq

import (
    "bufio"
    "bytes"
    "context"
    "fmt"
    "io"
    "sync"

    "github.com/feliixx/gotranseq/ncbicode"
)

// Options struct to store required command line args
type Options struct {
    Frame       string `short:"f" long:"frame" value-name:"&lt;code&gt;" description:"Frame to translate. Possible values:\n  [1, 2, 3, F, -1, -2, -3, R, 6]\n F: forward three frames\n R: reverse three frames\n 6: all 6 frames\n" default:"1"`
    Table       int    `short:"t" long:"table" value-name:"&lt;code&gt;" description:"NCBI code to use, see https://www.ncbi.nlm.nih.gov/Taxonomy/Utils/wprintgc.cgi?chapter=tgencodes#SG1 for details. Available codes: \n 0: Standard code\n 2: The Vertebrate Mitochondrial Code\n 3: The Yeast Mitochondrial Code\n 4: The Mold, Protozoan, and Coelenterate Mitochondrial Code and the Mycoplasma/Spiroplasma Code\n 5: The Invertebrate Mitochondrial Code\n 6: The Ciliate, Dasycladacean and Hexamita Nuclear Code\n 9: The Echinoderm and Flatworm Mitochondrial Code\n 10: The Euplotid Nuclear Code\n 11: The Bacterial, Archaeal and Plant Plastid Code\n 12: The Alternative Yeast Nuclear Code\n 13: The Ascidian Mitochondrial Code\n 14: The Alternative Flatworm Mitochondrial Code\n16: Chlorophycean Mitochondrial Code\n 21: Trematode Mitochondrial Code\n22: Scenedesmus obliquus Mitochondrial Code\n 23: Thraustochytrium Mitochondrial Code\n 24: Pterobranchia Mitochondrial Code\n 25: Candidate Division SR1 and Gracilibacteria Code\n 26: Pachysolen tannophilus Nuclear Code\n 29: Mesodinium Nuclear\n 30: Peritrich Nuclear\n" default:"0"`
    Clean       bool   `short:"c" long:"clean" description:"Replace stop codon '*' by 'X'"`
    Alternative bool   `short:"a" long:"alternative" description:"Define frame '-1' as using the set of codons starting with the last codon of the sequence"`
    Trim        bool   `short:"T" long:"trim" description:"Removes all 'X' and '*' characters from the right end of the translation. The trimming process starts at the end and continues until the next character is not a 'X' or a '*'"`
    NumWorker   int    `short:"n" long:"numcpu" value-name:"&lt;n&gt;" description:"Number of threads to use, default is number of CPU"`
}

const (
    // nCode has to be 0 in order to compute two-letters code
    nCode uint8 = iota
    aCode
    cCode
    tCode
    gCode
    uCode = tCode

    // Length of the array to store codon &lt;-&gt; AA correspondance
    // uses gCode because it's the biggest uint8 of all codes
    arrayCodeSize = (uint32(gCode) | uint32(gCode)&lt;&lt;8 | uint32(gCode)&lt;&lt;16) + 1
)

var letterCode = map[byte]uint8{
    'A': aCode,
    'C': cCode,
    'T': tCode,
    'G': gCode,
    'N': nCode,
    'U': uCode,
}

func createCodeArray(tableCode int, clean bool) ([arrayCodeSize]byte, error) {

    var codes [arrayCodeSize]byte
    for i := range codes {
        codes[i] = unknown
    }

    twoLetterMap := map[string][]byte{}
    codeMap, err := ncbicode.LoadTableCode(tableCode)
    if err != nil {
        return codes, err
    }

    for codon, aaCode := range codeMap {

        if !(clean &amp;&amp; aaCode == stop) {
            // codon is always a 3 char string, for example 'ACG'
            // each  nucleotide of the codon is represented by an uint8
            n1, n2, n3 := letterCode[codon[0]], letterCode[codon[1]], letterCode[codon[2]]
            index := uint32(n1) | uint32(n2)&lt;&lt;8 | uint32(n3)&lt;&lt;16
            codes[index] = aaCode
        }
        // in some case, all codon for an AA will start with the same
        // two nucleotid, for example:
        // GTC -&gt; 'V'
        // GTG -&gt; 'V'
        aaCodeArray, ok := twoLetterMap[codon[:2]]
        if !ok {
            twoLetterMap[codon[:2]] = []byte{aaCode}
        } else {
            if aaCode != aaCodeArray[0] {
                twoLetterMap[codon[:2]] = append(aaCodeArray, aaCode)
            }
        }
    }

    for twoLetterCodon, aaCodeArray := range twoLetterMap {

        aaCode := aaCodeArray[0]
        if len(aaCodeArray) == 1 &amp;&amp; !(clean &amp;&amp; aaCode == stop) {

            n1, n2 := letterCode[twoLetterCodon[0]], letterCode[twoLetterCodon[1]]
            index := uint32(n1) | uint32(n2)&lt;&lt;8
            codes[index] = aaCode
        }
    }
    return codes, nil
}

func computeFrames(frameName string) (frames [6]int, reverse bool, err error) {

    var frameMap = map[string]struct {
        frames  [6]int
        reverse bool
    }{
        "1":  {[6]int{1, 0, 0, 0, 0, 0}, false},
        "2":  {[6]int{0, 1, 0, 0, 0, 0}, false},
        "3":  {[6]int{0, 0, 1, 0, 0, 0}, false},
        "F":  {[6]int{1, 1, 1, 0, 0, 0}, false},
        "-1": {[6]int{0, 0, 0, 1, 0, 0}, true},
        "-2": {[6]int{0, 0, 0, 0, 1, 0}, true},
        "-3": {[6]int{0, 0, 0, 0, 0, 1}, true},
        "R":  {[6]int{0, 0, 0, 1, 1, 1}, true},
        "6":  {[6]int{1, 1, 1, 1, 1, 1}, true},
    }

    f, ok := frameMap[frameName]
    if !ok {
        return frames, false, fmt.Errorf("wrong value for -f | --frame parameter: %s", frameName)
    }
    return f.frames, f.reverse, nil
}

// Translate read a fata file and translate each sequence to the corresponding prot sequence
// with the specified options
func Translate(inputSequence io.Reader, out io.Writer, options Options) error {

    framesToGenerate, reverse, err := computeFrames(options.Frame)
    if err != nil {
        return err
    }

    codes, err := createCodeArray(options.Table, options.Clean)
    if err != nil {
        return err
    }

    fnaSequences := make(chan encodedSequence, 100)
    errs := make(chan error, 1)

    ctx, cancel := context.WithCancel(context.Background())
    defer cancel()

    var wg sync.WaitGroup
    wg.Add(options.NumWorker)

    for nWorker := 0; nWorker &lt; options.NumWorker; nWorker++ {

        go func() {

            defer wg.Done()

            w := newWriter(codes, framesToGenerate, reverse, options.Alternative, options.Trim)

            for sequence := range fnaSequences {

                select {
                case &lt;-ctx.Done():
                    return
                default:
                }

                w.translate(sequence)

                if len(w.buf) &gt; maxBufferSize {
                    w.flush(out, cancel, errs)
                }
                pool.Put(sequence)
            }
            w.flush(out, cancel, errs)
        }()
    }
    readSequenceFromFasta(ctx, inputSequence, fnaSequences)

    wg.Wait()

    select {
    case err, ok := &lt;-errs:
        if ok {
            return err
        }
    default:
    }
    return nil
}

// fasta format is:
//
// &gt;sequenceID some comments on sequence
// ACAGGCAGAGACACGACAGACGACGACACAGGAGCAGACAGCAGCAGACGACCACATATT
// TTTGCGGTCACATGACGACTTCGGCAGCGA
//
// see https://blast.ncbi.nlm.nih.gov/Blast.cgi?CMD=Web&amp;PAGE_TYPE=BlastDocs&amp;DOC_TYPE=BlastHelp
// section 1 for details
func readSequenceFromFasta(ctx context.Context, inputSequence io.Reader, fnaSequences chan encodedSequence) {

    scanner := bufio.NewScanner(inputSequence)
    buf := bytes.NewBuffer(make([]byte, 0, 512))
    headerSize := 0

Loop:
    for scanner.Scan() {

        line := scanner.Bytes()
        if len(line) == 0 {
            continue
        }
        if line[0] == '&gt;' {
            if buf.Len() &gt; 0 {
                select {
                case &lt;-ctx.Done():
                    break Loop
                default:
                }
                fnaSequences &lt;- newEncodedSequence(buf, headerSize)
            }
            buf.Reset()
            headerSize = len(line)
        }
        buf.Write(line)
    }

    fnaSequences &lt;- newEncodedSequence(buf, headerSize)

    close(fnaSequences)
}
</code></pre>

<p><strong>writer.go</strong></p>

<pre><code>package transeq

import (
    "bytes"
    "context"
    "fmt"
    "io"
)

const (
    mb = 1 &lt;&lt; (10 * 2)
    // size of the buffer for writing to file
    maxBufferSize = 5 * mb
    // suffixes to add to sequence id for each frame
    suffixes    = "123456"
    maxLineSize = 60
    stop        = '*'
    unknown     = 'X'
)

type writer struct {
    codes            [arrayCodeSize]byte
    buf              []byte
    currentLineLen   int
    startPos         [3]int
    frameIndex       int
    framesToGenerate [6]int
    reverse          bool
    alternative      bool
    trim             bool
    // if in trim mode, nb of bytes to trim (nb of successive 'X', '*' and '\n'
    // from right end of the sequence)
    toTrim int
}

func newWriter(codes [arrayCodeSize]byte, framesToGenerate [6]int, reverse, alternative, trim bool) *writer {
    return &amp;writer{
        codes:            codes,
        buf:              make([]byte, 0, maxBufferSize),
        startPos:         [3]int{0, 1, 2},
        framesToGenerate: framesToGenerate,
        reverse:          reverse,
        alternative:      alternative,
        trim:             trim,
    }
}

func (w *writer) reset() {
    w.frameIndex = 0
    if w.reverse &amp;&amp; !w.alternative {
        w.startPos[0], w.startPos[1], w.startPos[2] = 0, 1, 2
    }
}

func (w *writer) translate(sequence encodedSequence) {

    w.reset()
    w.translate3Frames(sequence)

    if w.reverse {

        if !w.alternative {
            // Staden convention: Frame -1 is the reverse-complement of the sequence
            // having the same codon phase as frame 1. Frame -2 is the same phase as
            // frame 2. Frame -3 is the same phase as frame 3
            //
            // use the matrix to keep track of the forward frame as it depends on the
            // length of the sequence
            switch sequence.nuclSeqSize() % 3 {
            case 0:
                w.startPos[0], w.startPos[1], w.startPos[2] = 0, 2, 1
            case 1:
                w.startPos[0], w.startPos[1], w.startPos[2] = 1, 0, 2
            case 2:
                w.startPos[0], w.startPos[1], w.startPos[2] = 2, 1, 0
            }
        }
        sequence.reverseComplement()
        w.translate3Frames(sequence)
    }
}

func (w *writer) translate3Frames(sequence encodedSequence) {

    for _, startPos := range w.startPos {

        if w.framesToGenerate[w.frameIndex] == 0 {
            w.frameIndex++
            continue
        }
        w.writeHeader(sequence.header())

        // read the sequence 3 letters at a time, starting at a specific position
        // corresponding to the frame
        for pos := sequence.headerSize() + startPos; pos &lt; len(sequence)-2; pos += 3 {
            index := uint32(sequence[pos]) | uint32(sequence[pos+1])&lt;&lt;8 | uint32(sequence[pos+2])&lt;&lt;16
            w.writeAA(w.codes[index])
        }

        switch (sequence.nuclSeqSize() - startPos) % 3 {
        case 2:
            // the last codon is only 2 nucleotid long, try to guess
            // the corresponding AA
            index := uint32(sequence[len(sequence)-2]) | uint32(sequence[len(sequence)-1])&lt;&lt;8
            w.writeAA(w.codes[index])
        case 1:
            // the last codon is only 1 nucleotid long, no way to guess
            // the corresponding AA
            w.writeAA(unknown)
        }
        w.trimAndReturn()
        w.frameIndex++
    }
}

// sequence id should look like
// &gt;sequenceID_&lt;frame&gt; comment
func (w *writer) writeHeader(seqHeader []byte) {
    end := bytes.IndexByte(seqHeader, ' ')
    if end != -1 {
        w.buf = append(w.buf, seqHeader[:end]...)
        w.buf = append(w.buf, '_', suffixes[w.frameIndex])
        w.buf = append(w.buf, seqHeader[end:]...)
    } else {
        w.buf = append(w.buf, seqHeader...)
        w.buf = append(w.buf, '_', suffixes[w.frameIndex])
    }
    w.newLine()
}

func (w *writer) writeAA(aa byte) {

    if w.currentLineLen == maxLineSize {
        w.newLine()
    }
    w.buf = append(w.buf, aa)
    w.currentLineLen++

    if w.trim {
        if aa == stop || aa == unknown {
            w.toTrim++
        } else {
            w.toTrim = 0
        }
    }
}

func (w *writer) newLine() {
    w.buf = append(w.buf, '\n')
    w.currentLineLen = 0

    if w.trim {
        w.toTrim++
    }
}

func (w *writer) trimAndReturn() {
    if w.toTrim &gt; 0 {
        w.buf = w.buf[:len(w.buf)-w.toTrim]
        w.currentLineLen -= w.toTrim
    }

    if w.currentLineLen != 0 {
        w.newLine()
    }
    w.toTrim = 0
}

func (w *writer) flush(out io.Writer, cancel context.CancelFunc, errs chan error) {
    _, err := out.Write(w.buf)
    if err != nil {
        select {
        case errs &lt;- fmt.Errorf("fail to write to output file: %v", err):
        default:
        }
        cancel()
    }
    w.buf = w.buf[:0]
}
</code></pre>

<p><strong>encodedSequence.go</strong></p>

<pre><code>package transeq

import (
    "bytes"
    "encoding/binary"
    "fmt"
    "sync"
)

// a type to hold an encoded fasta sequence
//
// s[0:4] stores the size of the sequence header (sequence id + comment) as an uint32 (little endian)
// s[4:headerSize] stores the sequence header
// s[headerSize:] stores the nucl sequence
type encodedSequence []byte

func newEncodedSequence(buf *bytes.Buffer, headerSize int) encodedSequence {

    s := getSizedSlice(4 + buf.Len())
    // reserve 4 bytes to store the header size as an uint32
    headerSize += 4
    binary.LittleEndian.PutUint32(s[0:4], uint32(headerSize))
    copy(s[4:], buf.Bytes())

    for i, n := range s[headerSize:] {
        switch n {
        case 'A':
            s[headerSize+i] = aCode
        case 'C':
            s[headerSize+i] = cCode
        case 'G':
            s[headerSize+i] = gCode
        case 'T', 'U':
            s[headerSize+i] = tCode
        case 'N':
            s[headerSize+i] = nCode
        default:
            fmt.Printf("WARNING: invalid char in sequence %s: %s, ignoring", s[headerSize:], string(s[headerSize+i]))
        }
    }
    return s
}

var pool = sync.Pool{
    New: func() interface{} {
        return make(encodedSequence, 512)
    },
}

func getSizedSlice(size int) encodedSequence {
    s := pool.Get().(encodedSequence)
    for len(s) &lt; size {
        s = append(s, byte(0))
    }
    return s[:size]
}

func (s encodedSequence) header() []byte {
    return s[4:s.headerSize()]
}

func (s encodedSequence) headerSize() int {
    return int(binary.LittleEndian.Uint32(s[0:4]))
}

func (s encodedSequence) nuclSeqSize() int {
    return len(s) - s.headerSize()
}

func (s encodedSequence) reverseComplement() {

    headerSize := s.headerSize()
    // get the complementary sequence.
    // Basically, switch
    //   A &lt;-&gt; T
    //   C &lt;-&gt; G
    for i, n := range s[headerSize:] {
        switch n {
        case aCode:
            s[headerSize+i] = tCode
        case tCode:
            // handle both tCode and uCode
            s[headerSize+i] = aCode
        case cCode:
            s[headerSize+i] = gCode
        case gCode:
            s[headerSize+i] = cCode
        default:
            //case N -&gt; leave it
        }
    }
    // reverse the sequence
    for i, j := headerSize, len(s)-1; i &lt; j; i, j = i+1, j-1 {
        s[i], s[j] = s[j], s[i]
    }
}
</code></pre>
    </div>