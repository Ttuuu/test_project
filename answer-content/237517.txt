<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code is pretty sound. I can't see any improvements that specifically use ES5/ES6 tricks - the spread operator for example will set all of the other keys to <code>undefined</code> instead of leaving them empty, which I think is undesired. Further loops would iterate over those <code>undefined</code> keys as well.</p>

<p>That said, here are some improvements:</p>

<ul>
<li>Use <code>reduce</code> to remove the need for a new array and replace the <code>forEach</code></li>
<li>Store the return value from <code>split</code> and use that to replace the <code>indexOf</code> (if the delimiter doesn't exist <code>split</code> returns an array of length 1) and <code>substring</code> calls</li>
<li>At the moment, the <code>indexSort</code> function isn't as <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" rel="nofollow noreferrer">single-purpose</a> as it could be. It has to know that the <code>input</code> array contains a <code>title</code> key. This can be moved outside to where the function is called making <code>indexSort</code> reusable</li>
<li>The name <code>indexSort</code> is a little misleading - I assumed it was going to sort a preexisting array. Perhaps use something like <code>arrayFromTitles</code> instead?</li>
</ul>

<p>Quick snippet showing these changes:</p>

<pre><code>function indexSort (input) {
    return input.reduce((accumulator, current) =&gt; {
        let split = current.split('_');
        if ( split.length &gt; 1 ) {
            accumulator[parseInt(split[0])] = split[1];
        }
        return accumulator;
    }, []);
}

let titles = [{"title": "100_baz"}, {"title": "01_foo"}, {"title": "05_bar"}];
indexSort(titles.map(x =&gt; x.title));
</code></pre>
    </div>