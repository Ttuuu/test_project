<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are a few comments. In general, your code deviates in surprising ways from the UNIX commands (and not just by missing flags or options):</p>

<ul>
<li><p>Your <code>ls</code> command does more than you claim it does. <code>os.walk</code> recursively "walks" down from the current directory, so it returns the content of all subfolders as well (without indicating in which subfolder each file or directory actually is).</p></li>
<li><p>When working with paths you should use the library <a href="https://docs.python.org/3/library/pathlib.html" rel="noreferrer"><code>pathlib</code></a> or at least <code>os.path</code> consistently. This allows your tools to also work in Windows, where the symbol separating paths is <code>\</code> and not <code>/</code>. You could use <code>os.path.join</code> in your <code>cd</code> function. However, all that code there is not needed, because <code>os.path.isdir("..")</code> is also <code>True</code>. Use <a href="https://docs.python.org/3/library/os.path.html#os.path.abspath" rel="noreferrer"><code>os.path.abspath</code></a> to get the absolute name of a path. In my home directory <code>os.path.abspath("..")</code> returns <code>/home</code>.</p></li>
<li><p>Don't use special return values to indicate failure. What if I want to have a directory called <code>"Not a directory"</code>? It may not be the most common name for a directory, but it is at least a plausible name. Instead raise an exception and catch it in the surrounding scope.</p></li>
<li><p>Note that your <code>cd</code> does not <em>actually</em> change the directory, so any calls in another function to <code>os.getcwd()</code> (like in <code>ls</code>) will still return the old directory.</p></li>
<li><p>Instead of hard-coding 100 blank lines, try to find out how many lines the terminal has, as taken from this <a href="https://stackoverflow.com/a/943921/4042267">answer</a> by <a href="https://stackoverflow.com/users/68595/brokkr">@brokkr</a>:</p>

<pre><code>import os
rows, columns = os.popen('stty size', 'r').read().split()
</code></pre>

<p>This probably works only on linux, though.</p></li>
<li><p>Instead of reading the whole file into memory, joining it and then printing it, you can print it one line at a time. This is slightly slower, but has no memory limitation:</p>

<pre><code>def cat(file_path: str) -&gt; None:
    """
    Accepts a path to a file, and outputs the contents of that file
    """
    if os.path.exists(file_path):
        with open(file_path, "r") as file:
            for line in file:
                print(line, end="")
    else:
        print("Not a file!")
</code></pre></li>
<li><p>As long as all your functions are defined in the same module, you can simplify your <code>whatis</code> command:</p>

<pre><code>def whatis(command: str) -&gt; None:
    """
    Prints a description about the passed command
    """
    try:
        print(globals()[command].__doc__)
    except KeyError:
        print("Not a valid command!")
</code></pre>

<p>Although this does open you up slightly to a user getting access to the <code>__doc__</code> attribute of any object in the global namespace (not sure if that is a security risk, though). To avoid this, you can also built a white-listed dictionary:</p>

<pre><code>DOCS = {f.__name__: f.__doc__ for f in [ls, cd, clear, tree, whatis, cat]}

def whatis(command: str) -&gt; None:
    """
    Prints a description about the passed command
    """
    try:
        print(DOCS[command])
    except KeyError:
        print("Not a valid command!")
</code></pre></li>
<li><p>I think the docstrings should be in the same style as linux manpages, i.e. like you have in your module docstring.</p></li>
</ul>
    </div>