<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I would not recommend this pattern. I see no compelling reason to encumber <code>NetworkRequestError</code> (and presumably every other <code>Error</code> enumeration throughout your project) with this <code>finish</code> cruft. </p>

<p>So, instead of:</p>

<pre><code>enum NetworkRequestError: Error {
    case hostNotAvailable
    case accountNotAvailable

    func finish&lt;T&gt;() -&gt; Result&lt;T, NetworkRequestError&gt; {
        return .failure(self)
    }
}

func fetch(result: @escaping (Result&lt;(any: [Any], any1: [Any]), NetworkRequestError&gt;) -&gt; Void) {
    guard host != nil else {
        result(NetworkRequestError.hostNotAvailable.finish())
        return
    }

    ...
}
</code></pre>

<p>I’d instead suggest:</p>

<pre><code>enum NetworkRequestError: Error {
    case hostNotAvailable
    case accountNotAvailable
}

func fetch(result: @escaping (Result&lt;(any: [Any], any1: [Any]), NetworkRequestError&gt;) -&gt; Void) {
    guard let host = host else {
        result(.failure(.hostNotAvailable))
        return
    }

    ...
}
</code></pre>

<p>This is more concise, conforms to established patterns (making it easier to reason about) and it doesn’t entangle <code>Error</code> types and <code>Result</code> types. </p>

<p>Also you’re undoubtedly checking <code>host</code> because you’re going to use it later in this method, so you might as well do <code>guard let</code>, like above. It saves you from having to do subsequent unwrapping of the optional.</p>

<hr>

<p>I’m assuming your question was primarily about the <code>Error</code> type and this <code>finish</code> method. I must say that I am equally uneasy about the <code>.success</code> associated type, namely the tuple of <code>[Any]</code> arrays. Perhaps this was just a placeholder in your example, but I generally find references to <code>Any</code> to be code smell. Often specific types or generics would be better than <code>Any</code> to types in one’s code. If you have a question about why you’re using a “success” type which is two arrays of <code>Any</code>, that might warrant its own question, showing why you did that. It, too, could probably be improved. </p>
    </div>