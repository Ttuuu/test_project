<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There's a lot that can be reviewed here, but I'll mention some best-practices at a glance:</p>

<p>Keep your indentation and whitespace consistent!  You seem to be primarily using four spaces for indentation, but you don't do this everywhere.  What's even odd is that the body of <code>evaluate()</code> is not indented (unlike the other functions).  One problem with this, especially it being a long function, is that readers may not know that it belongs to this function, and may even mistake it as global code!  This can greatly reduce readability, especially with this amount of code.</p>

<p><code>&lt;stdlib.h&gt;</code> and <code>&lt;math.h&gt;</code> are C libraries (ending in <code>.h</code>).  In C++, they should respectively be <code>&lt;cstdlib&gt;</code> and <code>&lt;cmath&gt;</code>.  As for the rest of the libraries, I'd sort them in some way (such as in alphabetically order) and check to see if there are any that are unused, since there are a lot of them.</p>

<p><code>operatorClass</code> doesn't quite look concise.  First of all, it should instead be named <code>operator</code> (<code>Operator</code> would be better, since it's a type).  You also have everything <code>public</code>, while data members should always be <code>private</code>.  The purpose of using classes (as opposed to <code>struct</code>s) is to hide data.  With data members as <code>public</code>, the state can be seen and changed from anywhere, which breaks encapsulation.  I've seen that this properly done in <code>Parenthesis</code>, so it should be done here as well.  You should also overload <code>operator&gt;</code> since you've already overloaded <code>operator&lt;</code>.  If you define one, the user will expect the other to be usable as well.  This also applies to <code>operator==</code> and <code>operator!=</code>.</p>

<p>The loop in <code>main()</code> could be simpler.  One big problem with the loop termination is that the user isn't told what to type in order to exit.  You could just have the user enter a "Y" or an "N" (be sure to account for uppercase or lowercase).  An infinite loop is still okay here, though.  Just be sure to provide smooth termination, otherwise there will be problems.</p>

<p>As for inside the loop, you should input into an <code>std::string</code> via <a href="http://en.cppreference.com/w/cpp/string/basic_string/getline" rel="noreferrer"><code>std::getline()</code></a>.  This will also account for any spaces and newlines in the string.  It is not effective enough to use <code>std::cin</code> since it will not format it properly.</p>

<p><strong>Miscellaneous:</strong></p>

<ul>
<li><p>Instead of checking for a size greater than 0:</p>

<blockquote>
<pre><code>operatorClassStack.size() &gt; 0
</code></pre>
</blockquote>

<p>just use <code>empty()</code>:</p>

<pre><code>!operatorClassStack.empty()
</code></pre>

<p>(with the <code>!</code>, this basically means "not empty")</p></li>
<li><p>This should not be initialize with each function call:</p>

<blockquote>
<pre><code>std::map&lt;char, unsigned int&gt; operatorClassMap;
operatorClassMap['*']=2;
operatorClassMap['/']=2;
operatorClassMap['+']=1;
operatorClassMap['-']=1;
</code></pre>
</blockquote></li>
<li><p>If you compare something with <code>true</code>:</p>

<pre><code>if (someCondition == true)
</code></pre>

<p>you can shorten it like this:</p>

<pre><code>if (someCondition)
</code></pre>

<p>And if you're comparing something with <code>false</code>:</p>

<pre><code>if (someCondition == false)
</code></pre>

<p>you can shorten it the same way with <code>!</code>:</p>

<pre><code>if (!someCondition)
</code></pre>

<p>This example uses <code>if</code>, but this also works with <code>while</code>.  The advantage of this is that you won't have to worry about a possible mismatch of <code>==</code> and <code>=</code>, which is quite common.</p>

<p>It should be initialized only once, and it should also be <code>const</code> since it's not modified.  If you have C++11, you can use an initializer list to accomplish this nicely.</p></li>
</ul>
    </div>