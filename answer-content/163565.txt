<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>1. Bug</h3>

<p>You can't pop an item from the queue if it's the only item:</p>

<pre><code>&gt;&gt;&gt; q = PriorityQueueUpdateable()
&gt;&gt;&gt; q[1] = 1
&gt;&gt;&gt; q.pop()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "cr163560.py", line 41, in pop
    self._clear_heap()
  File "cr163560.py", line 25, in _clear_heap
    value, key = self._heap[0]
IndexError: list index out of range
</code></pre>

<p>The problem is in the <code>pop</code> method: it calls <code>_clear_heap</code> <em>after</em> popping the item (as well as before). But at this point there might be no items left in the queue. In your simple test, you add both keys to the queue multiple times, so that when you pop an item it's never the last item (because there are more items with the same key remaining in the queue).</p>

<h3>2. Review</h3>

<ol>
<li><p>The Python library documentation has a section "<a href="https://docs.python.org/3/library/heapq.html#priority-queue-implementation-notes" rel="noreferrer">Priority Queue Implementation Notes</a>" which gives some advice on implementing a priority queue using a heap. This is well worth reading.</p></li>
<li><p>The docstring for the class doesn't give much of a clue as to how to use it. Docstrings should be written from the user's point of view, and shouldn't include implementation details (like "implemented with heapq module") — these are only needed by developers and so can be mentioned in comments.</p></li>
<li><p>There are no docstrings for the <code>__init__</code>, <code>pop</code> and <code>peek</code> methods.</p></li>
<li><p>It would be convenient if the <code>__init__</code> method accepted an optional iterable of (key, priority) pairs. This would make it easier to create priority queues.</p></li>
<li><p>In <code>__init__</code>, there's no need to call <a href="https://docs.python.org/3/library/heapq.html#heapq.heapify" rel="noreferrer"><code>heapq.heapify</code></a> — this does nothing on an empty heap.</p></li>
<li><p>Using <code>__setitem__</code> to add an item to the queue seems strange — normally one would expect a method adding something to a queue to be named something like <code>push</code>, <code>append</code>, or <code>put</code>. (Compare <a href="https://docs.python.org/3/library/heapq.html#heapq.heappush" rel="noreferrer"><code>heapq.heappush</code></a>, <a href="https://docs.python.org/3/library/collections.html#collections.deque.append" rel="noreferrer"><code>collections.deque.append</code></a>, <a href="https://docs.python.org/3/library/queue.html#queue.Queue.put" rel="noreferrer"><code>queue.Queue.put</code></a>.)</p></li>
<li><p>The second argument to <code>__setitem__</code> is named <code>value</code>, but this is misleading — actually it's the <em>priority</em> of the key.</p></li>
<li><p>Priorities work in reverse — if you want an item to have a <em>higher</em> priority then you have to give it a <em>lower</em> value (this happens because Python's heaps are <em>min-heaps</em>). It would probably suit more applications if priorities worked in the usual way. (You'd have to negate the priority values to make higher values mean higher priorities.)</p></li>
<li><p>You give a test case, which is great! It would be convenient to turn this into a unit test (perhaps using the <a href="https://docs.python.org/3/library/unittest.html" rel="noreferrer"><code>unittest</code></a> module) so that it can be automatically run.</p></li>
</ol>
    </div>