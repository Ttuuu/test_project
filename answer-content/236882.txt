<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Aside: the zone intervals reported by Noda Time look somewhat broken to me; that may be due to them coming from the Windows time zone database. I'll need to look into that transitions don't happen on "the second before the start of the hour".</p>

<p>I haven't had time to look at this completely, but a few minor suggestions:</p>

<h1>Naming</h1>

<p>You're using "day" a lot where I'd use "date". I find that less ambiguous, because a "day" can mean both a period and a date. I've adjusted the code below assuming that.</p>

<h1>GenerateRanges</h1>

<pre><code>var inclusiveStartDate = (days &lt; 0) ? anchorDate.PlusDays(days) : anchorDate;
var inclusiveEndDate = (days &lt; 0) ? anchorDate : anchorDate.PlusDays(days);
</code></pre>

<p>That would be simpler IMO as by adding <code>days</code> unconditionally and then just taking the min/max:</p>

<pre><code>var anchorPlusDays = anchorDate.PlusDays(days);
var inclusiveStartDate = LocalDate.Min(anchorDate, anchorPlusDays);
var inclusiveEndDate = LocalDate.Max(anchorDate, anchorPlusDays);
</code></pre>

<h1>Extensions</h1>

<p>I'd personally use separate extension classes for code using NodaTime types, and code using BCL types.</p>

<h1>AdjustEndpoints</h1>

<p>I'd probably try to make your <code>ZonedDateRange</code> completely immutable (removing the need for <code>Clone</code>), and instead have <code>WithStartDate</code>, <code>WithEndDate</code> methods, then make <code>AdjustEndpoints</code> something like this:</p>

<pre><code>private static ZonedDateRange AdjustEndPoints(
    ZonedDateRange range, LocalDate startDate, LocalDate endDate) =&gt;
    range.WithStartDate(LocalDate.Max(range.StartDate, startDate))
         .WithEndDate(LocalDate.Min(range.EndDate, endDate));
</code></pre>

<p>(The <code>WithStartDate</code> and <code>WithEndDate</code> methods can return "this" if the argument is equal to the current value.)</p>
    </div>