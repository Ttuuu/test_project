<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Don't cast the result of <code>malloc()</code>; it's unnecessary clutter and it makes it harder to make changes.  For the same reason, it's better to use the pointed-to value rather than the type as argument to <code>sizeof</code>:</p>

<pre><code>Total *t = malloc(sizeof *t);
</code></pre>

<p>We need to test the result of <code>malloc()</code> is not null before using it, else we run into Undefined Behaviour.</p>

<p>However, it's unnecessary to use dynamic allocation at all.  Instead of <code>new_Total()</code> we could provide <code>init_Total()</code> to initialise an existing (e.g. stack-allocated) value:</p>

<pre><code>void init_Total(Total *t, int lines, int words, int bytes)
{
    assert(t);
    //constructor function for Total
    t-&gt;lines = lines;
    t-&gt;words = words;
    t-&gt;bytes = bytes;
}
</code></pre>

<p>Then, <code>main()</code> can begin like this:</p>

<pre><code>int main(int argc, char* argv[])
{
    Total t;
    init_Total(&amp;t, 0, 0, 0);
</code></pre>

<hr>

<p>We can use a single function for files and <code>stdin</code>:</p>

<pre><code>static bool readStream(Total *t, FILE* fp)
{
    // common code here
}

bool readFile(Total *t, char* filename)
{
    FILE *const f = fopen(filename, "r");
    if (!f) {
        perror(filename);
        return false;
    }
    return readStream(t, f) &amp; fclose(f);
}

bool readStdin(Total *t)
{
    return readStream(t, stdin);
}
</code></pre>

<p>You might even feel that naming <code>readStdin()</code> is overkill, and simply call <code>readStream(t, stdin);</code> directly from <code>main()</code>.</p>
    </div>