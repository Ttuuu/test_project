<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This usecase is actually covered by one of the <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="noreferrer"><code>itertools</code> recipes</a>. <code>itertools</code> is a package in the Python standard library that supplies fast and efficient tools for iterating over things or creating certain iterable things (like the combination of all pairs and such). It is an often used library and well worth it to get acquainted with.</p>

<p>The recipe is as follows:</p>

<blockquote>
<pre><code>from itertools import filterfalse, tee

def partition(pred, iterable):
    'Use a predicate to partition entries into false entries and true entries'
    # partition(is_odd, range(10)) --&gt; 0 2 4 6 8   and  1 3 5 7 9
    t1, t2 = tee(iterable)
    return filterfalse(pred, t1), filter(pred, t2)
</code></pre>
</blockquote>

<p>In your specific case you would use it like this:</p>

<pre><code>if __name__ == "__main__":    
    cities = ["New York", "Shanghai", "Munich", "Tokyo", "Dubai", "Mexico City", "SÃ£o Paulo", "Hyderabad"]
    no_a_city, a_city = map(list, partition(lambda city: "a" in city, cities))
    print("a_city:", a_city)
    print("no_a_city:", no_a_city)
</code></pre>

<p>The <code>map(list, ...)</code> part is needed because what the <code>partition</code> function returns are <a href="https://wiki.python.org/moin/Generators" rel="noreferrer">generators</a> that generate values on the fly. They can be consumed into a <code>list</code>.</p>

<p>The predicate used is a <a href="https://www.w3schools.com/python/python_lambda.asp" rel="noreferrer"><code>lambda</code> function</a>, an anonymous function which in this case returns truthy or falsy values. It is used to test each element of the iterable.</p>

<p>Instead of manually iterating over each name (even worse, over each index of each name, have a look at <a href="https://nedbatchelder.com/text/iter.html" rel="noreferrer">Loop Like A Native</a>), I used the fact that strings support the <code>in</code> operator.</p>

<p>I also added a <a href="http://stackoverflow.com/questions/419163/what-does-if-name-main-do"><code>if __name__ == "__main__":</code> guard</a> to allow importing from this script from another script.</p>

<hr>

<p>One thing you could have used in your code is the fact that <a href="http://book.pythontips.com/en/latest/for_-_else.html" rel="noreferrer"><code>for</code> loops have an optional <code>else</code> clause</a> which is run if no <code>break</code> statement interrupted the loop:</p>

<pre><code>a_city, no_a_city = [],[]
for city in cities:
    for char in city:
        if char == "a":
            a_city.append(city)
            break
    else:
        no_a_city.append(city)
</code></pre>

<hr>

<p>As for complexity, this has the same complexity as your code. You have two nested <code>for</code> loops, making this on average <span class="math-container">\$\mathcal{O}(nk)\$</span> with <span class="math-container">\$n\$</span> being the number of cities and <span class="math-container">\$k\$</span> being the average length of the city names.</p>

<p>The <code>in</code> operator for strings is <span class="math-container">\$\mathcal{O}(k)\$</span> (it is just the same loop you wrote, but probably written in C) and it is used once per city. However, due to the <code>tee</code> my code iterates twice over the cities, so would be <span class="math-container">\$\mathcal{O}(2nk)\$</span>, which in terms of algorithmic complexity is also <span class="math-container">\$\mathcal{O}(nk)\$</span>.</p>
    </div>