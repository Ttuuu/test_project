<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Use <code>size_t</code> consistently</h1>
<p>You use both <code>size_t</code> and <code>unsigned</code> for counting. Stick with <code>size_t</code>.</p>
<h1>Use default member initialization</h1>
<p>You can use <a href="https://en.cppreference.com/w/cpp/language/data_members" rel="nofollow noreferrer">default member initialization</a> to ensure <code>arr[]</code> is initialized, without having to call <code>memset()</code>:</p>
<pre><code>class bitarr
{
    static const unsigned NumBytes = (NumBits + CHAR_BIT - 1) / CHAR_BIT;
    unsigned char arr[NumBytes] = {};
    ...
};
</code></pre>
<p>You can then also remove the constructor completely.</p>
<h1>Unnecessary <code>if</code>-statement in <code>set()</code></h1>
<p>You don't need to check whether <code>val</code> is <code>true</code> in <code>set()</code>. If it is false, the body of the <code>if</code>-statement will still do the right thing. While it might look like that would do a lot of work for nothing, the processor might easily mispredict this condition, making it less efficient than not having the <code>if</code> at all.</p>
<h1>Make all functions that do not modify <code>arr[]</code> <code>const</code></h1>
<p>You made the function <code>test()</code> <code>const</code>, but <code>to_string()</code> also does not modify the bit array, so you can make that function <code>const</code> as well.</p>
<h1>Optimize <code>to_string()</code></h1>
<p>Your function <code>to_string()</code> is very inefficient. The caller provides you with the characters to use for the representation of one and zero bits, but you first ignore that and build a string of <code>'0'</code> and <code>'1'</code>, and then replace those characters one by one. Why not build the string directly using <code>c1</code> and <code>c2</code>? Also, since you know how long the string will be, you should reserve space for all the characters up front.</p>
<pre><code>std::string to_string(char c1, char c2) const
{
    std::string str;
    str.reserve(NumBits);

    for (size_t i = NumBits; i-- &gt; 0;)
        str.push_back(test(i) ? c2 : c1);

    return str;
}
</code></pre>
<p>You implementation also has bugs: <code>to_string('0', '1')</code> results in an infinite loop, and <code>to_string('1', '0')</code> always results in a string with all zeroes.</p>
    </div>