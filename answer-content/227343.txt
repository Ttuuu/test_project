<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It's clear that you're starting to pick up some good habits, but this code still has a way to go.</p>

<h2>This is a comment</h2>

<pre><code>Module Docstring:
</code></pre>

<p>No need to write this - it's obvious from context.</p>

<h2>Type hints</h2>

<pre><code>def __init__(self, sf, cho, noa):
</code></pre>

<p>Those parameters have no documentation, and it isn't clear what type they are. Do a Google for type hinting in Python - that will help, even if you don't end up adding a docstring for this function.</p>

<h2>Class purpose</h2>

<pre><code>class CheckAnswers:
</code></pre>

<p>The name of this class on its own suggests that it isn't really being used correctly. "Check answers", as an action phrase, means that this would be better-suited to a method. At the least, this should be called <code>AnswerCheck</code> or <code>AnswerChecker</code>, nouns that imply objects instead of actions.</p>

<h2>Dictionaries</h2>

<p>This block:</p>

<pre><code>if lesson_type == "quiz":
    no_of_quiz_questions = 8
if lesson_type == "short":
    no_of_quiz_questions = 4
if lesson_type == "conversation":
    no_of_quiz_questions = 1
if lesson_type == "long":
    no_of_quiz_questions = 8
</code></pre>

<p>is better-represented as a dictionary with a single lookup call.</p>

<h2>Globals and state management</h2>

<p>This boils down to object-oriented programming theory and how to manage program state. You're correct to identify that your usage of globals is not ideal. Taking a look at this code:</p>

<pre><code>    global WORD_POSITION
    if question_directory["translationdirection"] == "EtoA":
        word_chosen[i].grid(column=size_of_word_bank-WORD_POSITION, row=1, columnspan=1)
    if question_directory["translationdirection"] == "AtoE":
        word_chosen[i].grid(column=WORD_POSITION+1, row=1, columnspan=1)
    WORD_POSITION += 1

    global USER_ANSWER
    USER_ANSWER.append(sentance_components[i])
</code></pre>

<p>You're modifying two globals. That means that this method is not written in the right context. It should probably be written as a method on a top-level <code>Game</code> class, and those two variables should be properties. Most of the time, class methods should only modify the state of their own class instance.</p>

<h2>Nested functions</h2>

<p>You've written a long series of nested functions in <code>lesson_template</code>. There's no clear need for this. They should be moved to global scope, or to class methods.</p>

<h2>Loooooooong methods</h2>

<p><code>question_frame_populator</code> is way too long. Try to divide it up into logical sub-routintes.</p>

<h2>Method names</h2>

<p><code>sentancebuilder</code> should be <code>sentence_builder</code>, or more appropriately <code>build_sentence</code>.</p>

<h2>else</h2>

<pre><code>    if solution == USER_ANSWER:
        CheckAnswers(special_frames, None, None).right_answer()

    if solution != USER_ANSWER:
        CheckAnswers(special_frames, None, None).wrong_answer()
</code></pre>

<p>You can replace the second <code>if</code> with an <code>else</code>. This pattern is seen elsewhere.</p>
    </div>