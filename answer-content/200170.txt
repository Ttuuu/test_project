<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Question 1</h2>

<blockquote>
  <p>How can I make this easier and more intuitive for a user? I know I can use named ranges instead of flags, but I would prefer to keep it more visibly obvious what the code is using</p>
</blockquote>

<p>The first thing that I would do is rename all data headers. I understand that you wanted an unique identifier that "<strong>!dijk:dat:from</strong>" to me is not at all intuitive to me.   After studying Dijkstra's algorithm I came back to determined that it is represents <code>Dijkstra's - data - From</code> nodes (vertices).   Although they make perfect sense, I also don't like <code>From</code> and <code>To</code>.  I'm not an authority but I think that there is no inherent direction to the connection of two nodes in a graph.</p>

<p>Alternate Column Headers:</p>

<ul>
<li>!dijk:dat:from Node, Node1, Vertex, Vertex1</li>
<li>!dijk:dat:to Neighbor, Node2, Vertex2</li>
<li>!dijk:dat:dist Distance</li>
<li>!dijk:get:from Origin</li>
<li>!dijk:get:to Destination</li>
<li>!dijk:steps Path</li>
</ul>

<p><a href="https://i.stack.imgur.com/QRDR7.jpg" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/QRDR7.jpg" alt="enter image description here"></a></p>

<h2>Question 2</h2>

<blockquote>
  <p>How can I apply the DRY principle more here. I'm repeating the same patterns all the time, but it seems like the details vary too much for me to just stick something like the nested for loops into a function</p>
</blockquote>

<p>There isn't really any unnecessary repeated code.  </p>

<p>↓This loop↓ is repeated twice but the second loop relies on information gathered from the first loop.</p>

<blockquote>
<pre><code>For vRow = 1 To vRowCount
    For vCol = 1 To vColCount
</code></pre>
</blockquote>

<h2>Question 3</h2>

<blockquote>
  <p>I use Scripting.Dictionary for almost everything due to it's flexibility and simply due to the fact that I am comfortable with how it works, but I suspect there may be better data structures that I can use which work better for this use case</p>
</blockquote>

<p>A custom Node class would have made it easier work out the logic but it is not necessary.</p>

<h2>Pseudo Class: GraphNode</h2>

<pre><code>Option Explicit
Const Infinity As Long = 2147483647
Private Type Members
    NodeKey As String
    NeighborKey As String
    Distance As Long
End Type
Private m As Members

Public Sub Init(NodeKey As String, Optional NeighborKey As String, Optional Distance As Long = Infinity)
    m.NodeKey = NodeKey
    m.NeighborKey = NeighborKey
    m.Distance = Distance
End Sub

Public Function getKey() As String
Attribute Value.VB_UserMemId = 0
    getKey = m.NodeKey = NodeKey
End Function

Public Function getDistance(Node As GraphNode) As Long
        getDistance = m.Distance
End Function

Public Function UpdateDistance(Node As GraphNode) As Boolean
    If Node.getDistance &lt; m.Distance Then
        UpdateDistance = True
        m.Distance = Node.getDistance
    End If
End Function
</code></pre>

<p>I would make some changes in the way that you use the dictionaries.</p>

<p>Using these keys "!dist", "!steps", "!scan" as properties works very well.</p>

<blockquote>
<pre><code>vDist(vKey)("!dist")
vDist(vKey).Item("!dist")
vDist(vKey).Item("!steps")
vDist(vKey).Item("!scan")
</code></pre>
</blockquote>

<p>I would use constants instead.  This will not only make the code easier to read but enable you to use intellisense with them.</p>

<p><a href="https://i.stack.imgur.com/jGkIz.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/jGkIz.png" alt="enter image description here"></a></p>

<p><code>Item</code> can be omitted because the default member of a Scripting Dictionary is <code>Items()</code>.</p>

<blockquote>
<pre><code> vDist(vKey).Item("!dist")
vDist(vKey)("!dist")
</code></pre>
</blockquote>

<p>Since <code>Items()</code> takes a string as an argument we can use the Bang operator to pass a string key to <code>Items()</code> and return the it's value.  </p>

<blockquote>
<pre><code>vDist(vKey)![!dist]
</code></pre>
</blockquote>

<p>The bracket are necessary because <code>!dist</code> is not a valid variable name.  Removing <code>!</code> from the variable names will allow you to do this:</p>

<blockquote>
<pre><code>vDist(vKey)!dist
</code></pre>
</blockquote>

<h2>Question 4</h2>

<blockquote>
  <p>At the heart of this is the Do While True loop which is probably a horribly inefficient way to implement Dijkstra's Algorithm. How can I make it more efficient?</p>
</blockquote>

<p>Dijkstra's Algorithm requires a <code>Do</code> or a <code>While</code> loop this is unavoidable.  Implementing the <a href="https://en.wikipedia.org/wiki/Priority_queue" rel="nofollow noreferrer">min-priority queue</a> meationed in the article you linked would make it more efficient but that is out of the scope of a review.</p>

<p><a href="https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm" rel="nofollow noreferrer">Wikipedia - Dijkstra's algorithm</a></p>

<blockquote>
  <p>A min-priority queue is an abstract data type that provides 3 basic operations : add_with_priority(), decrease_priority() and extract_min(). As mentioned earlier, using such a data structure can lead to faster computing times than using a basic queue.</p>
</blockquote>

<h2>Add Template</h2>

<p>Creating a subroutine to add a template worksheet would make the setup easier for both you and the users.  Using constants for the Column Headers and working with tables would also simplify things.</p>

<pre><code>Const NodeHeader As String = "Node", NeighborHeader As String = "Neighbor", DistanceHeader As String = "Distance"
Const OriginHeader As String = "Origin", DestinationHeader As String = "Destination"
Const Distance As String = "Distance", Path As String = "Path", Visited As String = "Visited"

Sub AddTemplate()
    Dim TableRange As Range
    With Worksheets.Add
        ' Add Graph NodeList Table
        .Range("B1").Value = "Graph - Node List"
        Set TableRange = .Range("B2").Resize(1, 3)
        TableRange.Value = Array(NodeHeader, NeighborHeader, DistanceHeader)
        .ListObjects.Add xlSrcRange, TableRange, , xlYes

        ' Add Settings Table
        .Range("F1").Value = "Settings"
        Set TableRange = .Range("F2").Resize(1, 2)
        TableRange.Value = Array(OriginHeader, DestinationHeader)
        .ListObjects.Add xlSrcRange, TableRange, , xlYes

        ' Add Results Table
        .Range("F5").Value = "Results"
        Set TableRange = .Range("F6").Resize(1, 3)
        TableRange.Value = Array(OriginHeader, DestinationHeader, DistanceHeader)
        .ListObjects.Add(xlSrcRange, TableRange, , xlYes).ShowTotals = True
        TableRange.Cells(3, 3).Formula = "=SUBTOTAL(109,[Distance])"
    End With
End Sub
</code></pre>

<p><a href="https://i.stack.imgur.com/0tgiq.jpg" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/0tgiq.jpg" alt="enter image description here"></a></p>
    </div>