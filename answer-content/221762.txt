<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Wow!  I’ve never reviewed an image before.  Neat.</p>

<p>First, I’d flip your left square to align the corners of the right-most triangles in the left square with the horizontal line in the right square.  This gives a visual indication that those dimensions (<code>a</code> and <code>b</code>) in both squares are the same.  With the original image, your eye has to draw the line all the way across the left square to see it line up with the left triangles of the left square.</p>

<p>Second, both squares have the same four triangles, except in your right diagram, you have to mentally flip 2 of the triangles to make corresponding triangles in the same orientation between left and right squares.  If you drew one of the diagonals between the opposite corners of the a/b rectangles, then all 4 triangles can be mentally translated from the left to the right image, without needing rotations or flips.</p>

<p>I’ve number the triangles in my image, below, to show you what I mean, but I’m not certain you’d want to number them in your final t-shirt design.</p>

<p><a href="https://i.stack.imgur.com/OsGDi.jpg" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/OsGDi.jpg" alt="Pythagorean squares with corresponding triangles numbered for comparison"></a></p>

<h2>The SVG Code</h2>

<h3>Styling</h3>

<p>You've used styles to assign attribute to text elements, so you don't have to specify the attributes in each <code>&lt;text/&gt;</code> element, but you continue to specify both the <code>fill</code> and <code>stroke</code> for <code>&lt;rect/&gt;</code> and <code>&lt;polygon/&gt;</code> elements.  Let's add a style for these:</p>

<pre><code>rect, polygon {
    fill: none;
    stroke: black;
}
</code></pre>

<h3>Coordinates</h3>

<p>I would use two group nodes with translations to draw the left and right squares using the same coordinate system, with the <code>0,0</code> coordinate to where the centre of the large rectangles will be.  The rectangle's corners will then all be <code>±1000,±1000</code>.</p>

<pre><code>&lt;g transform="translate(1100, 1100)"&gt;
    &lt;rect x="-1000" y="-1000" width="2000" height="2000" /&gt;
&lt;/g&gt;

&lt;g transform="translate(3300, 1100)"&gt;
    &lt;rect x="-1000" y="-1000" width="2000" height="2000" /&gt;
&lt;/g&gt;
</code></pre>

<h3>Symbols</h3>

<p>It is pretty clear both these rectangles will be the same; the code for them is identical.  But we can do better.  Like moving common code into a subroutine, let's move our common shapes into a definition.</p>

<pre><code>&lt;defs&gt;
    &lt;rect id="square" x="-1000" y="-1000" width="2000" height="2000" /&gt;
&lt;/defs&gt;

&lt;g transform="translate(1100, 1100)"&gt;
    &lt;use xlink:href="#square" /&gt;
&lt;/g&gt;

&lt;g transform="translate(3300, 1100)"&gt;
    &lt;use xlink:href="#square" /&gt;
&lt;/g&gt;
</code></pre>

<p>Next, let's add our triangles.  The triangles are all identical, so again it makes sense to use a common definition.</p>

<pre><code>&lt;defs&gt;
    &lt;rect id="square" x="-1000" y="-1000" width="2000" height="2000" /&gt;
    &lt;polygon id="triangle" points="0,0 1200,0 0,800" /&gt;
&lt;/defs&gt;
</code></pre>

<p>I've put the right-angle of the triangle at the <code>0,0</code> coordinate, which will make it fairly easy to position each triangle at one of the 4 corners of the left square:</p>

<pre><code>&lt;g transform="translate(1100, 1100)"&gt;
    &lt;use xlink:href="#square" /&gt;
    &lt;use xlink:href="#triangle" transform="translate(-1000,-1000) rotate(0)" /&gt;
    &lt;use xlink:href="#triangle" transform="translate(+1000,-1000) rotate(90)" /&gt;
    &lt;use xlink:href="#triangle" transform="translate(+1000,+1000) rotate(180)" /&gt;
    &lt;use xlink:href="#triangle" transform="translate(-1000,+1000) rotate(270)" /&gt;
&lt;/g&gt;
</code></pre>

<p>For the right square, we just need to update the positions of the triangles.  Unfortunately, these require knowledge of the <code>a,b</code> values:</p>

<pre><code>&lt;g transform="translate(3300, 1100)"&gt;
&lt;use xlink:href="#square"/&gt;
    &lt;use xlink:href="#triangle" transform="translate( -200, +200) rotate(0)" /&gt;
    &lt;use xlink:href="#triangle" transform="translate( -200,-1000) rotate(90)" /&gt;
    &lt;use xlink:href="#triangle" transform="translate(+1000,+1000) rotate(180)" /&gt;
    &lt;use xlink:href="#triangle" transform="translate(-1000, +200) rotate(270)" /&gt;
&lt;/g&gt;
</code></pre>

<h3>Text Grouping</h3>

<p>Finally, the text nodes need to be added back in, taking into account the new coordinate system.  Again, you draw these in similar ways.  You draw a letter, and then draw the superscript "2" at an offset from the letter's origin.  Sometimes, it is 200 pixels higher, sometimes it is 150 pixels higher.  Why the discrepancy?  Intentional or accidental?</p>

<p>Let's be more rigid about how we lay out the text.  Let's put the text into a group, with the letter at <code>0,0</code> and the superscript at <code>0,200</code>, and move the text group to the correct position with a transform.</p>

<pre><code>    &lt;g transform="translate(-550, 550)"&gt;
        &lt;text x="0" y="200"&gt;a&lt;/text&gt;
        &lt;text x="0" y="0" class="superscript"&gt;2&lt;/text&gt;
    &lt;/g&gt;

    &lt;g transform="translate(450, -450)"&gt;
        &lt;text x="0" y="200"&gt;b&lt;/text&gt;
        &lt;text x="0" y="0" class="superscript"&gt;2&lt;/text&gt;
    &lt;/g&gt;
</code></pre>

<p>Now we can see a structure to how the text is drawn, and be consistent between the areas.</p>

<h3>Refactored Code</h3>

<pre><code>&lt;svg width="4400" height="2200"
     xmlns="http://www.w3.org/2000/svg"
     xmlns:xlink= "http://www.w3.org/1999/xlink"&gt;
  &lt;style&gt;
    svg {
      background-color:  white;
    }

    rect, polygon {
        fill: none;
        stroke: black;
    }

    text {
      font:  3000% "Times New Roman";
      text-anchor:  end;
    }

    text.superscript {
      font-size:  1200%;
      text-anchor:  start;
    }
  &lt;/style&gt;

  &lt;defs&gt;
    &lt;rect id="square" x="-1000" y="-1000" width="2000" height="2000"/&gt;
    &lt;polygon id="triangle" points="0,0 1200,0 0,800" /&gt;
  &lt;/defs&gt;

  &lt;g transform="translate(1100, 1100)"&gt;
    &lt;use xlink:href="#square" /&gt;

    &lt;use xlink:href="#triangle" transform="translate(-1000,-1000) rotate(0)" /&gt;
    &lt;use xlink:href="#triangle" transform="translate(+1000,-1000) rotate(90)" /&gt;
    &lt;use xlink:href="#triangle" transform="translate(+1000,+1000) rotate(180)" /&gt;
    &lt;use xlink:href="#triangle" transform="translate(-1000,+1000) rotate(270)" /&gt;

    &lt;text x="0" y="200"&gt;c&lt;/text&gt;
    &lt;text x="0" y="0" class="superscript"&gt;2&lt;/text&gt;
  &lt;/g&gt;

  &lt;g transform="translate(3300, 1100)"&gt;
    &lt;use xlink:href="#square"/&gt;

    &lt;use xlink:href="#triangle" transform="translate( -200, +200) rotate(0)" /&gt;
    &lt;use xlink:href="#triangle" transform="translate( -200,-1000) rotate(90)" /&gt;
    &lt;use xlink:href="#triangle" transform="translate(+1000,+1000) rotate(180)" /&gt;
    &lt;use xlink:href="#triangle" transform="translate(-1000, +200) rotate(270)" /&gt;

    &lt;g transform="translate(-550, 550)"&gt;
      &lt;text x="0" y="200"&gt;a&lt;/text&gt;
      &lt;text x="0" y="0" class="superscript"&gt;2&lt;/text&gt;
    &lt;/g&gt;

    &lt;g transform="translate(450, -450)"&gt;
      &lt;text x="0" y="200"&gt;b&lt;/text&gt;
      &lt;text x="0" y="0" class="superscript"&gt;2&lt;/text&gt;
    &lt;/g&gt;
  &lt;/g&gt;
&lt;/svg&gt;
</code></pre>

<p>Is this a better?  It is certainly longer, so that is a negative.  However, I like that the triangle coordinates are simply <code>0,0</code>, <code>1200,0</code> and <code>0,800</code>.  Changing the size of the triangle works perfectly for the left square; the right square you still need to adjust 4 numbers in the <code>translate()</code> calls to get the triangles to line up properly, and will need to manually move the a² and b² text positions, but at least the superscripted 2's don't need to be adjusted separately.</p>

<p>You could use a PHP script, or an XSLT stylesheet to generate this SVG document, with the <code>a</code> parameter as input, and it could do the calculations for you, and fill in the calculated numbers in the required 10 places.</p>
    </div>