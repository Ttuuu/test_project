<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I can't comment on the correctness but here's an improved version of your <code>cput</code> function. I'll start with the final version and then work towards it from the original code. <strong>Note the bug fix: [2:] should be [1:].</strong></p>

<pre><code>def read_cpu_usage(stat_path='/proc/stat'):
    with open(stat_path) as stat_file:
        return sum(float(time) for time in next(stat_file).split()[1:])
</code></pre>

<hr>

<p>Remove the try/catch exit. Let Python crash loudly so we get the whole trackback</p>

<pre><code>def cput():
    with open('/proc/stat', 'r') as procfile:
        cputimes = procfile.readline()
        cputotal = 0
        # count from /proc/stat: user, nice, system, idle, iowait, irc, softirq, steal, guest
        for i in cputimes.split(' ')[1:]:
            i = int(i)
            cputotal = (cputotal + i)
        return(float(cputotal))
</code></pre>

<hr>

<p>Use the built-in <code>sum</code> to perform the summation.</p>

<pre><code>def cput():
    with open('/proc/stat', 'r') as procfile:
        cputimes = procfile.readline()
        cputotal = sum(int(i) for i in cputimes.split(' ')[1:])
        return(float(cputotal))
</code></pre>

<hr>

<p>Parse directly to float so we don't need to do two different conversions.</p>

<pre><code>def cput():
    with open('/proc/stat', 'r') as procfile:
        cputimes = procfile.readline()
        cputotal = sum(float(i) for i in cputimes.split(' ')[1:])
        return(cputotal)
</code></pre>

<hr>

<p>Return the total directly <a href="http://refactoring.com/catalog/inlineTemp.html" rel="noreferrer">removing the temporary variable</a>.</p>

<pre><code>def cput():
    with open('/proc/stat', 'r') as procfile:
        cputimes = procfile.readline()
        return sum(float(i) for i in cputimes.split(' ')[1:])
</code></pre>

<hr>

<p>Split at white-space, rather an a single space.</p>

<pre><code>def cput():
    with open('/proc/stat', 'r') as procfile:
        cputimes = procfile.readline()
        return sum(float(i) for i in cputimes.split()[1:])
</code></pre>

<hr>

<p>Default mode is read and normally implicit.</p>

<pre><code>def cput():
    with open('/proc/stat') as procfile:
        cputimes = procfile.readline()
        return sum(float(i) for i in cputimes.split()[1:])
</code></pre>

<hr>

<p>Take advantage that <code>File</code> are generators and remove temporary variable.</p>

<pre><code>def cput():
    with open('/proc/stat') as procfile:
        return sum(float(i) for i in next(procfile).split()[1:])
</code></pre>

<hr>

<p>(Possibly) better names.</p>

<pre><code>def read_cpu_usage():
    with open('/proc/stat') as stat_file:
        return sum(float(time) for time in next(stat_file).split()[1:])
</code></pre>

<hr>

<p>Make the path a parameter so that it can be swapped out testing with a mock file.</p>

<pre><code>def read_cpu_usage(stat_path='/proc/stat'):
    with open(stat_path) as stat_file:
        return sum(float(time) for time in next(stat_file).split()[1:])
</code></pre>

<hr>

<p><strong>Bonus: Avoid the list copy</strong></p>

<p>I'd use this version my code base but only because I know my team (i.e., one other person I've working with since we started university together in 2008) is comfortable with iterators and generators. The performance/memory gain is negligible but, for me, it the principle and consistency. <em>Note</em>: I've forgone PEP8's double line separating for space, but include in your code base.</p>

<pre><code>from itertools import islice

def read_cpu_usage(stat_path='/proc/stat'):
    with open(stat_path) as stat_file:
        return sum(float(time) for time in
                islice(next(stat_file).split(), 1, None))
</code></pre>

<hr>

<p><strong>Bonus: Close the file fast</strong></p>

<p>If the code is run in a much larger, concurrent program. Closing files fast helps keep away from your file descriptor limit.</p>

<pre><code>from itertools import islice

def read_cpu_usage(stat_path='/proc/stat'):
    with open(stat_path) as stat_file:
        cpu_stat_line = next(stat_file)
    return sum(float(time) for time in 
            islice(cpu_stat_line.split(), 1, None))
</code></pre>

<hr>

<p><strong>Bonus: Split the read and parse</strong></p>

<p>This makes it easier to test and, more importantly, reuse.</p>

<pre><code>from itertools import islice

def read_cpu_usage(stat_path='/proc/stat'):
    with open(stat_path) as stat_file:
        return next(stat_file)

def parse_cpu_usage(cpu_stat_line):
    return sum(float(time) for time in
            islice(cpu_stat_line.split(), 1, None))
</code></pre>

<hr>

<p><strong>Bonus: Provide a convenience function</strong></p>

<pre><code>from itertools import islice

def get_cpu_usage(*args, **kwargs):
    return parse_cpu_usage(read_cpu_usage(*args, **kwargs))

def read_cpu_usage(stat_path='/proc/stat'):
    with open(stat_path) as stat_file:
        return next(stat_file)

def parse_cpu_usage(cpu_stat_line):
    return sum(float(time) for time in
            islice(cpu_stat_line.split(), 1, None))    
</code></pre>

<hr>

<p><strong>Bouns: Group the functionality into class</strong></p>

<pre><code>from itertools import islice

class CPUUsage(object):
    def __init__(self, stat_path='/proc/stat'):
        self.stat_path = stat_path

    def get(self):
        return self.parse(self.read(self.stat_path))
    __call__ = get

    @staticmethod
    def read(stat_path):
        with open(stat_path) as stat_file:
            return next(stat_file)

    @staticmethod
    def parse(cpu_stat_line):
        return sum(float(time) for time in
                islice(cpu_stat_line.split(), 1, None))
</code></pre>

<hr>

<p><strong>Bonus: Support the File API</strong></p>

<p>Allow read from anything that implements the File API.</p>

<pre><code>from itertools import islice

class CPUUsage(object):
    def __init__(self, stat_path='/proc/stat'):
        self.stat_path = stat_path

    def get(self):
        return self.parse(self.read(self.stat_path))
    __call__ = get

    @staticmethod
    def read(stat_source):
        if isinstance(stat_source, basestring):
            open_stat = lambda: open(stat_source)
        else:
            open_stat = lambda: stat_source
        with open_stat() as stat_file:
            return next(stat_file)

    @staticmethod
    def parse(cpu_stat_line):
        return sum(float(time) for time in
                islice(cpu_stat_line.split(), 1, None))
</code></pre>

<hr>

<p><strong>Bonus: Put it in it's own module...</strong></p>

<p>Put it on the Python path, never write the code again. Also provide a convenience module-level function for the 99% use case.</p>

<pre><code>from itertools import islice

__all__ = ['CPUUsage', 'get_cpu_usage']

_instance = None

def _get_instance():
    global _instance
    if _instance is None:
        _instance = CPUUsage()
    return _instance

def get_cpu_usage():
    return _get_instance().get()

class CPUUsage(object):
    def __init__(self, stat_path='/proc/stat'):
        self.stat_path = stat_path

    def get(self):
        return self.parse(self.read(self.stat_path))
    __call__ = get

    @staticmethod
    def read(stat_source):
        if isinstance(stat_source, basestring):
            open_stat = lambda: open(stat_source)
        else:
            open_stat = lambda: stat_source
        with open_stat() as stat_file:
            return next(stat_file)

    @staticmethod
    def parse(cpu_stat_line):
        return sum(float(time) for time in
                islice(cpu_stat_line.split(), 1, None))
</code></pre>
    </div>