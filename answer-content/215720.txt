<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You ask the player to enter 1, 2 or 3 for Rock, Paper or Scissors.  When you tell the player what the AI choose, you say it was a 1, 2 or a 3.  It would be friendlier if you said what they choose.  You could do this with a dictionary that translates the abbreviated choice into the actual item.</p>

<pre><code>choices = { '1': 'Rock', '2': 'Paper', '3': 'Scissors' }

def round_winner(choice):
    ai_chosen = ...
    print(f'AI chose {choice[ai_chosen]}')
    ...
</code></pre>

<p>Also, you could use that dictionary to print out the menu for the player, instead of hard-coding it:</p>

<pre><code>    print('Please choose one of the following:')
    for choice, item in choices:
        print(f'{choice}: {item}')
</code></pre>

<hr>

<p>You are using “ai”, “player”, and “tie” as keys for your counter dictionary, and always printing out <code>winner.upper()</code> when you print out a winner.  You could just use “AI”, “PLAYER” and “TIE” as the dictionary keys, avoiding the need for the <code>.upper()</code> calls.</p>

<hr>

<p><code>score_checker</code> is an odd name.  Perhaps one of the hardest things about programming is coming up with good names.  <code>check_for_game_winner</code> might be better.</p>

<p>Using <code>global</code> is almost always bad.  You just need to pass a <code>true</code>/<code>false</code> value back to the caller to indicate if the game is over.   Use a return statement.  Ie, inside <code>if value == 2:</code>, add a <code>return True</code> statement.</p>

<hr>

<p><code>initializer</code> is another terrible name.  <code>play_round</code> would be better.</p>

<p>Checking for the overall winner inside <code>play_round</code> is confusing responsibilities.  The <code>play_round</code> function doesn’t know it is being called in a loop, if at all.  It should be removed from here.</p>

<p><code>global counter</code> is again a bad idea.  You could simply pass the <code>counter</code> in as an argument.</p>

<hr>

<p>Instead of having the game code run directly, you should add a <code>play_games</code> function, and move the counter initialization code and loop inside that.  With other changes, above, it might look like:</p>

<pre><code>def play_games():
    counter = { 'PLAYER': 0, 'AI':0, 'TIE': 0}
    while True:
        play_round(counter)
        if check_for_game_winner(counter):
            break
</code></pre>

<hr>

<p>The file should only execute code if the file is the main program.  If the file is imported into another file, you wouldn’t want the code to automatically run.  The following guard is usually used for this:</p>

<pre><code>if __name__ == '__main__':
    play_game()
</code></pre>

<hr>

<p>Your model of storing the player’s &amp; AI’s moves as strings is perhaps not the best.  If you used integers, you could perform the rock beats scissors beats paper beats rock test with modulo arithmetic:</p>

<pre><code>if ai_choice % 3  == (choice + 1) % 3:
    # the AI won
</code></pre>
    </div>