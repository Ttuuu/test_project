<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First of all - I do not know the game and just want to point out some code related things. Thanks :)</p>

<hr>

<h1>Not a Getter</h1>

<p>From the <a href="https://web.archive.org/web/20100226131716/http://java.sun.com/developer/onlineTraining/Beans/JBeansAPI/shortcourse.html#SimpleProperties" rel="nofollow noreferrer">JavaBeans naming conventions</a>:</p>

<blockquote>
  <p>By default, <strong>properties</strong> are determined from get/set access method combinations that follow a prescribed naming convention.<br>
  [...]</p>

<pre><code>public int getMood() {
 return mood;
}
</code></pre>
</blockquote>

<p>The name of the method <code>getAdvise</code> supposes that this will return a 
<strong>property</strong> but it calculates the <code>Strategy</code> - I would rename the method to <code>predict</code>. So the API could look like:</p>

<pre><code>StrategyAdviser strategyAdviser = new StrategyAdviser(game);
Strategy strategy = strategyAdvise.predict();
</code></pre>

<hr>

<h1><code>RollAnalyze</code> and <code>BoardAnalyze</code></h1>

<p>I can't justify following with resources and maybe it is just my personal experience: </p>

<blockquote>
<pre><code>RollAnalyze rollAnalyze = new RollAnalyze(roll);
BoardAnalyze boardAnalyze = new BoardAnalyze(board, currentPlayer);
</code></pre>
</blockquote>

<p>The <code>rollAnalyze</code> and <code>boardAnalyze</code> can't be reused because they only work for <code>roll</code>, <code>board</code> and <code>currentPlayer</code>. So we need to instantiate on each call on <code>getAdvise</code> new objects of them.</p>

<p>It could be bette, if we can create instance variables of them and call the methods on them with passing in the arguments they need:</p>

<pre><code>RollAnalyze rollAnalyze;
BoardAnalyze boardAnalyze;

// constuctor

public Strategy getAdvise() {
// ...

  boolean has6 = rollAnalyze.hasSix(roll);
  boolean has5 = rollAnalyze.hasFive(roll);
}
</code></pre>

<hr>

<h1>Instance Variable</h1>

<p>The <code>StrategyFactory</code> should be a instance variable of <code>StrategyAdviser</code> that gets injected in by the constructor. </p>

<p>One benefit of a Factory is the possibility to change it dynamically. Currently it is <em>hard coded</em> in side your logic without the possibility to change the behavior dynamically on runtime. </p>

<hr>

<h1>Factory Pattern</h1>

<p>From <a href="https://en.wikipedia.org/wiki/Factory_method_pattern#Structure" rel="nofollow noreferrer">Wikipedia</a>: </p>

<blockquote>
  <p>The Factory Method design pattern describes how to solve such problems:</p>
  
  <ul>
  <li>Define a separate operation <strong>(factory method)</strong> for creating an object.</li>
  <li>Create an object by calling a factory method</li>
  </ul>
  
  <p><a href="https://i.stack.imgur.com/rzFlI.jpg" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/rzFlI.jpg" alt="enter image description here"></a></p>
</blockquote>

<p>In the UML-Diagram you can see that there exists in the <code>Creator1</code> only one method 
 - the <strong>factory method</strong>.  </p>

<p>Currently the <code>StrategyFactory</code> provides for each possible Strategy a method. Instead it should have only one method and it decides witch object will be returned.</p>

<p>There for we need to paste the <code>if-branches</code> from <code>getAdvise</code> into <code>StrategyFactory</code>:</p>

<pre><code>public class StrategyFactory {

    RollAnalyze rollAnalyze;
    BoardAnalyze boardAnalyze;

    // constructor

    public Strategy build(YahtzeeGame yahtzeeGame) {
        Roll roll = yahtzeeGame.getRoll();
        Board board = yahtzeeGame.getBoard();
        YahtzeePlayer currentPlayer = yahtzeeGame.getCurrentPlayer();

        if (!roll.hasRoll()) {
            return createStartRollStrategy();
        }

        if (!yahtzeeGame.canRoll()) {
            return createWriteToBoardStrategy();
        }

        if (rollAnalyze.getAmountOfIdenticals(roll) == 5) {
            return createWriteToBoardStrategy();
        }

        // ...
    }

    private Strategy createStartRollStrategy() {}
    private Strategy createWriteToBoardStrategy() {}
}
</code></pre>

<p>and the <code>getAdvise</code> will look like:</p>

<pre><code>public class StrategyAdviser {

    private final YahtzeeGame yahtzeeGame;
    private final StrategyFactory strategyFactory;

    // constructor

    public Strategy predict() {
        return strategyFactory.build(yahtzeeGame);
    }
}
</code></pre>

<p>The benefit we now have is, that if you want to create different game rules, you can switch the strategyFactory. </p>

<p>For example: Currently a AmountOfIdenticals needs to be 5 for a special action. You could now create a custom StrategyFactory where the Amount needs to be 100 and if the rule is boring you can switch it back to the old strategyFactory without to touch the logic.</p>

<hr>

<h1><a href="https://www.martinfowler.com/bliki/FlagArgument.html" rel="nofollow noreferrer">Flag Argument</a></h1>

<blockquote>
  <p>A flag argument is a kind of function argument that tells the function to carry out a different operation depending on its value</p>

<pre><code>YahtzeePlayer(String name, int color, boolean isHuman) {
   super(name, color, isHuman);
}
</code></pre>
</blockquote>

<p>We do not need the flag.. We could just build two classes <code>NonHumanPlayer</code> and <code>HumanPlayer</code> and we can avoid the flag, which will build many branches in the code.</p>
    </div>