<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Type hints</h2>

<pre><code>def __init__(self, username, password, folder, search_name):
</code></pre>

<p>can (probably) be</p>

<pre><code>def __init__(self, username: str, password: str, folder: Path, search_name: str):
</code></pre>

<p>Also, since these lists are initialized without a direct reference to the args, they should be type-declared:</p>

<pre><code>    self.links: List[str] = []
    self.pictures: List[str] = []
    self.videos: List[str] = []
</code></pre>

<h2>Paths</h2>

<p>Note that I suggest the use of <code>Path</code>. Read about it here:</p>

<p><a href="https://docs.python.org/3/library/pathlib.html" rel="nofollow noreferrer">https://docs.python.org/3/library/pathlib.html</a></p>

<p>Then later on, you can use it like so:</p>

<pre><code>    self.folder.mkdir(exist_ok=True)
</code></pre>

<p>One line, no existence checks necessary. Also, this:</p>

<pre><code>os.path.join(self.folder, f"Image{number}.jpg"
</code></pre>

<p>can be easier:</p>

<pre><code>self.folder / f'Image{number}.jpg'
</code></pre>

<h2>Combined cookie update</h2>

<p>I think that</p>

<pre><code>    """Taking cookies"""
    cookies = self.driver.get_cookies()
    for cookie in cookies:
        c = {cookie["name"]: cookie["value"]}
        self.http_base.cookies.update(c)
</code></pre>

<p>can be</p>

<pre><code># Taking cookies
cookies = {
   cookie['name']: cookie['value']
   for cookie in self.driver.get_cookies()
}
self.http_base.cookies.update(cookies)
</code></pre>

<h2>Quote style</h2>

<p>... is inconsistent in places like this:</p>

<pre><code>        if logging_page_id['graphql']['shortcode_media']["is_video"]:
</code></pre>

<p>So pick one or the other and stick with it.</p>

<h2>Use a generator</h2>

<p><code>scroll_down</code> can become a generator and gain some efficiency:</p>

<ul>
<li>Use a <code>Counter</code> class instance rather than calling <code>end_scroll.count()</code>, which is quite inefficient.</li>
<li>Do not maintain an <code>end_scroll</code> list. Rather than appending, <code>yield new_height</code>, which makes the function a generator.</li>
</ul>

<h2>Nomenclature</h2>

<p><code>extraction_url</code> sounds like a noun (i.e. it gets some data for you). That's not actually what it does. Instead, it seems like it submits some links. Call it <code>submit</code> or <code>submit_links</code> (this is a verb, and makes it clear that it's an "action", not a "getter").</p>

<h2>Magic numbers</h2>

<p>In this:</p>

<pre><code>if end_scroll.count(end_scroll[-1]) &gt; 4:
</code></pre>

<p>What is 4? This should be saved to a named constant.</p>
    </div>