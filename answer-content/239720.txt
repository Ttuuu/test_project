<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>One way that you can simplify much of this code is by building out a set of classes to represent your different operations. You can then encapsulate the rules for that operation within those classes.</p>

<p>To get started, you can define an abstract <code>Operation</code> class to define the shared properties and methods of the operations:</p>

<pre><code>public abstract class Operation
{
    protected readonly Random Random = new Random();

    private readonly string _operationName;

    public Operation(string operationName, params UserDifficulty[] userDifficulties)
    {
        _operationName = operationName;
        UserDifficulties = userDifficulties;
    }

    public int Question { get; set; }
    public int Score { get; set; }
    public UserDifficulty[] UserDifficulties { get; }
    public string GetScoreDisplay() =&gt; $"{_operationName} score: {Score} of {Question}";
    public abstract (string message, double correctAnswer) GetMathsEquation(UserDifficulty userDifficulty);
}
</code></pre>

<p>You can then create a class for each of your different operations, and implement the base class accordingly. For example, <code>Addition</code> would look like:</p>

<pre><code>public class Addition : Operation
{
    public Addition() : base("Addition", UserDifficulty.Easy, UserDifficulty.Normal)
    {
    }

    public override (string message, double correctAnswer) GetMathsEquation(UserDifficulty userDifficulty)
    {
        var number1 = Random.Next(1000);
        var number2 = Random.Next(1000);
        return ($"{number1} + {number2}", number1 + number2);
    }
}
</code></pre>

<p>With these all in place, you can actually remove <em>every</em> <code>switch</code> statement in your code. This is because the specific operation logic is implemented in each class. All you need to do is construct a collection of the <code>Operation</code> objects and then call the appropriate methods. </p>

<p>The <code>RunTest</code> would now look as follows:</p>

<pre><code>public static (int, List&lt;Operation&gt;) RunTest(int numberOfQuestionsLeft, UserDifficulty userDifficulty)
{
    int totalScore = 0;
    Random random = new Random();
    var operations = new List&lt;Operation&gt;
    {
        new Addition(),
        new Subtraction(),
        new Multiplication(),
        new Division(),
        new Power(),
        new SquareRoot(),
    }.Where(o =&gt; o.UserDifficulties.Contains(userDifficulty)).ToList();

    while (numberOfQuestionsLeft &gt; 0)
    {
        int randomOperation = random.Next(operations.Count);
        Operation operation = operations[randomOperation];
        var (message, correctAnswer) = operation.GetMathsEquation(userDifficulty);
        if (operation is Division || operation is SquareRoot)
        {
            Console.Write($"To the nearest integer, What is {message} =");
        }
        else
        {
            Console.Write($"What is {message} =");
        }
        double userAnswer = Convert.ToDouble(Console.ReadLine());
        if (Math.Round(correctAnswer) == userAnswer)
        {
            Console.WriteLine("Well Done!");
            operation.Score++;
            totalScore++;
        }
        else
        {
            Console.WriteLine("Your answer is incorrect!");
        }
        operation.Question++;
        numberOfQuestionsLeft--;
    }
    return (totalScore, operations);
}
</code></pre>

<p>And the usage of that method would look like:</p>

<pre><code>var (totalScore, operations) = RunTest(numberOfQuestions, userDifficulty);
Console.WriteLine($"Total score: {totalScore} of {numberOfQuestions}");

foreach (var operation in operations)
{
    Console.WriteLine(operation.GetScoreDisplay());
}
</code></pre>

<hr>

<p>Here's another option that achieves your goal of reducing the number of switch statements in the <code>RunTest</code> method from two to one with fewer overall code changes:</p>

<pre><code>public static (int, OperationQuestionScore, OperationQuestionScore) RunTest(int numberOfQuestionsLeft, UserDifficulty userDifficulty)
{
    int totalScore = 0;
    Random random = new Random();
    var (operationMin, operationMax) = GetPossibleOperationsByDifficulty(userDifficulty);
    var score = Score();
    var question = Score();

    while (numberOfQuestionsLeft &gt; 0)
    {
        int mathRandomOperation = random.Next(operationMin, operationMax);
        MathOperation mathOperation = (MathOperation)mathRandomOperation;
        var (message, correctAnswer) = GetMathsEquation(mathOperation, userDifficulty);
        if (mathRandomOperation == 4 || mathRandomOperation == 6)
        {
            Console.Write($"To the nearest integer, What is {message} =");
        }
        else
        {
            Console.Write($"What is {message} =");
        }

        Action&lt;OperationQuestionScore&gt; incrementQuestion;
        Action&lt;OperationQuestionScore&gt; incrementScore;
        switch (mathOperation)
        {
            case MathOperation.Addition:
                incrementQuestion = o =&gt; o.AdditionQuestion++;
                incrementScore = o =&gt; o.AdditionScore++;
                break;
            case MathOperation.Subtraction:
                incrementQuestion = o =&gt; o.SubtractionQuestion++;
                incrementScore = o =&gt; o.SubtractionScore++;
                break;
            case MathOperation.Multiplication:
                incrementQuestion = o =&gt; o.MultiplicationQuestion++;
                incrementScore = o =&gt; o.MultiplicationScore++;
                break;
            case MathOperation.Division:
                incrementQuestion = o =&gt; o.DivisionQuestion++;
                incrementScore = o =&gt; o.DivisionScore++;
                break;
            case MathOperation.Power:
                incrementQuestion = o =&gt; o.PowerQuestion++;
                incrementScore = o =&gt; o.PowerScore++;
                break;
            case MathOperation.SquareRoot:
                incrementQuestion = o =&gt; o.SquareRootQuestion++;
                incrementScore = o =&gt; o.SquareRootScore++;
                break;
            default:
                incrementQuestion = _ =&gt; { };
                incrementScore = _ =&gt; { };
                break;
        }

        double userAnswer = Convert.ToDouble(Console.ReadLine());
        if (Math.Round(correctAnswer) == userAnswer)
        {
            Console.WriteLine("Well Done!");
            incrementQuestion(question);
            incrementScore(score);
            totalScore++;
        }
        else
        {
            Console.WriteLine("Your answer is incorrect!");
            incrementQuestion(question);
        }
        numberOfQuestionsLeft--;
    }
    return (totalScore, score, question);
}
</code></pre>

<p>As you can see, a single <code>switch</code> statement now exists before the <code>if</code>/<code>else</code> block. And two <code>Action</code> delegates are being created within the switch statement to  represent the proper "increment" operation needed in the <code>if</code>/<code>else</code> block.</p>
    </div>