<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Suggestion 1</strong></p>

<p>This block of code does not seem clean:</p>

<pre><code>    // Check whether the parameter is already full
    if (data != 0){
        // Reset the output
        data-&gt;clear();
        data = 0;
    }
</code></pre>

<p>If <code>data</code> used to point to non-<code>NULL</code>, then you are just making it <code>NULL</code>. You should <code>delete data</code> before pointing it to <code>NULL</code>:</p>

<pre><code>    if (data != 0){
        // Reset the output
        data-&gt;clear();
        delete data;
        data = 0;
    }
</code></pre>

<p><strong>Suggestion 2</strong></p>

<p>Still better, if you have the option, change the interface to</p>

<pre><code>void readNParseData(const char* filePath, vector&lt;double&gt;&amp; data);
</code></pre>

<p><strong>Suggestion 3</strong></p>

<p>There is nothing in your code to indicate to the calling function that you were able or unable to read the data from the file. There is no <code>else</code> to go with</p>

<pre><code>if (ifs) {
</code></pre>

<p>One way of indicating whether the function was successful in reading the data is to change the return type of the function to <code>bool</code>. Then, you can add</p>

<pre><code>return true;
</code></pre>

<p>at the end of the <code>if</code> block and then add an <code>else</code> block:</p>

<pre><code>else {
   return false;
}
</code></pre>

<p><strong>Suggestion 4</strong></p>

<p>To remove the redundant memory allocation and deallocation to <code>fileBuffer</code>, simply use <code>std::vector::data</code>:</p>

<pre><code>data.resize(sizeOfBuffer);
ifs.read(reinterpret_cast&lt;char*&gt;(data.data()), fileSize);
</code></pre>

<p><strong>Suggestion 5</strong></p>

<p>Add a check to make sure that <code>ifs.read</code> was successful:</p>

<pre><code>ifs.read(reinterpret_cast&lt;char*&gt;(data.data()), fileSize);
if ( !ifs )
{
   return false;
}
</code></pre>
    </div>