<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Preface</strong></p>

<p>I wouldn't use the query string of the URL at all. </p>

<p>The problem with using GET, is that GET is meant for other things such as bookmarkable search link etc.  As you add more <code>do</code> stuff in your logic will become more and more complex.  Harder and harder to keep track of what ever <code>do</code> does etc.  There is no clear structure to it, no way to tell <code>foo.php</code> is a controller and <code>bar.php</code> is some other piece of code (like a DB class etc).</p>

<p>A better method is to use a MVC style router that does not affect the GET query string at all.</p>

<p>Another issue in your code is this:</p>

<pre><code> if(preg_match('/^[A-Za-z0-9_]+$/', $file_name) !== 1 OR ! file_exists($fpath)){
</code></pre>

<p>Which is ... muah ... ok. But it's the only thing preventing directory transversal attacks.</p>

<p>One more point is that while this may seem like the simplest method</p>

<pre><code>if(isset($_GET['do'])){
    $file_name = rtrim($_GET['do'],'/');
}
</code></pre>

<p>You really have no control over what is being loaded.  No way to know if that PHP file really should be used as a controller.</p>

<p>We can fix all these issues by using the URI part of the URL.  For example take this URL</p>

<pre><code> www.example.com/index.php/user/login
</code></pre>

<p>The URI is the part after the <code>index.php</code>.  We can very easly remove the <code>index.php</code> file (same as wordpress, or many MVC frameworks do).</p>

<p><strong>So how do we do this:</strong></p>

<p>Below I will post the full code for My Simple Router you can find <a href="https://github.com/ArtisticPhoenix/MISC/tree/master/Router" rel="nofollow noreferrer">here</a>.  This is a minimal example and not really meant for production use.</p>

<p>.htaccess (very similar or identical to what you'll find in wordpress etc.)</p>

<pre><code>&lt;IfModule mod_rewrite.c&gt;
     RewriteEngine On

    # For sub-foder installs set your RewriteBase including trailing and leading slashes
    # your rewrite base will vary, possibly even being / if no sub-foder are involved
    RewriteBase /MISC/Router/

    RewriteCond %{REQUEST_FILENAME} !-f
    RewriteCond %{REQUEST_FILENAME} !-d
    RewriteRule ^(.*)$ index.php/$1 [L]
&lt;/IfModule&gt;
</code></pre>

<p>index.php</p>

<pre><code>&lt;?php
require_once __DIR__.'/SimpleRouter.php';
SimpleRouter::route();
</code></pre>

<p>SimpleRouter.php</p>

<pre><code>&lt;?php
/**
 * A simple 1 level router
 * 
 * URL schema is http://example.com/{controller}/{method}/{args ... }
 * 
 * @author ArtisticPhoenix
 * @package SimpleRouter
 */
class SimpleRouter{

    /**
     * should be the same as rewrite base in .htaccess
     * @var string
     */
    const REWRITE_BASE = '/MISC/Router/';

    /**
     * path to controller files
     * 
     * @var string
     */
    const CONTOLLER_PATH = __DIR__.'/Controllers/';

    /**
     * route a url to a controller
     */
    public static function route(){
        //normalize
        if(self::REWRITE_BASE != '/'){
            $uri = preg_replace('~^'.self::REWRITE_BASE.'~i', '',$_SERVER['REQUEST_URI']);
        }

        $uri = preg_replace('~^index\.php~i', '',$uri);      
        $uri = trim($uri,'/');

        //empty url, like www.example.com
        if(empty($uri)) $uri = 'home/index';

        //empty method like www.example.com/home
        if(!substr_count($uri, '/')) $uri .= '/index';

        $arrPath = explode('/', $uri);

        $contollerName = array_shift($arrPath);
        $methodName = array_shift($arrPath);;
        $contollerFile = self::CONTOLLER_PATH.$contollerName.'.php';

        //require_once $contollerFile; //&gt; when not autoloading, explode takes care of / in REQUEST_URI

        if(!file_exists($contollerFile)||!class_exists($contollerName)){
            self::error404($uri);
            return;
        }

        $Controller = new $contollerName();

        if(!method_exists($Controller, $methodName)){
            self::error404($uri);
            return;
        }

        if(!count($arrPath)){
            call_user_func([$Controller, $methodName]);
        }else{
            call_user_func_array([$Controller, $methodName], $arrPath);
        } 
    }

    /**
     * call error 404
     * 
     * @param string $uri
     */
    protected static function error404($uri){
        require_once self::CONTOLLER_PATH.'home.php';     
        $Controller = new home();
        $Controller-&gt;error404($uri);
    }
}
</code></pre>

<p>Contollers/home.php</p>

<pre><code>&lt;?php
/**
 * 
 * The default controller
 * 
 * @author ArtisticPhoenix
 * @package SimpleRouter
 */
class home{

    public function index($arg=false){
        echo "&lt;h3&gt;".__METHOD__."&lt;/h3&gt;";
        echo "&lt;pre&gt;";
        print_r(func_get_args());
    }

    public function otherpage($arg){
        echo "&lt;h3&gt;".__METHOD__."&lt;/h3&gt;";
        echo "&lt;pre&gt;";
        print_r(func_get_args());
    }

    public function error404($uri){
        header('HTTP/1.0 404 Not Found');
        echo "&lt;h3&gt;Error 404 page {$uri} not found&lt;/h3&gt;";
    }

}
</code></pre>

<p><strong>How it works</strong></p>

<p>This is a decent amount of code, so the first thing is you'll probably want to change the <code>RewriteBase</code> to just <code>/</code> in both Htaccess and the Router class.  On my Dev server it's located in <code>www/MISC/Router/</code> and so I have to use those so that it routes properly.  Otherwise I would have to setup a vHost and I am way to lazy for that.</p>

<p>This may seem way more complex then using GET etc. etc.  But it's really quite simple, the main part is right here:</p>

<pre><code>  $_SERVER['REQUEST_URI']
</code></pre>

<p>Which may contain <code>index.php</code> depending on the URL.  So using my above example:</p>

<pre><code> www.example.com/index.php/user/login //REQUEST_URI = index.php/user/login
</code></pre>

<p>So in this case we remove <code>index.php</code> </p>

<pre><code> $uri = preg_replace('~^index\.php~i', '',$uri);   
</code></pre>

<p>Then after some more checks and what not we split this <code>user/login</code> into <code>['user','login']</code>.  Which if we go by the pattern at the top of the Router class.</p>

<pre><code>  http://example.com/{controller}/{method}/{args ... }
</code></pre>

<p>This tells us that <code>user</code> is the "Controller" and the method is <code>"login"</code>.  So we look for that controller file:</p>

<pre><code> if(!file_exists($contollerFile)||!class_exists($contollerName)){
</code></pre>

<p>If your not using an autoloader you can split this, and require the file between:</p>

<pre><code>  if(!file_exists($contollerFile)) self::error404($uri);

   require_once $contollerFile;

  if(!class_exists($contollerName)) self::error404($uri);
</code></pre>

<p>When using an autoloader the <code>class_exists</code> method will trigger autoloading of the Controller class.</p>

<p>In anycase there is little chance a URL like </p>

<pre><code>    http://example.com/../../foobar.php
</code></pre>

<p>Will work because the controller would be <code>..</code> with a method of <code>..</code> and an argument of <code>foobar.php</code>.</p>

<p>In anycase in the above example we don't have a <code>user</code> controller, so lets add one now.</p>

<p>Contollers/user.php</p>

<pre><code>class user{

    public function index(){
        echo "&lt;h3&gt;".__METHOD__."&lt;/h3&gt;";
    }


    public function login(){
        echo "&lt;h3&gt;".__METHOD__."&lt;/h3&gt;";
    }

}
</code></pre>

<p>So this <code>www.example.com/index.php/user/login</code> would basically go to the login method of this <code>user</code> controller class.  If you just did <code>www.example.com/index.php/user</code> this would go to the <code>index</code> method above.  And if you just did <code>www.example.com/index.php/</code> it goes to <code>home::index</code>.</p>

<p>As you can see now we can really organize our code, instead of multiple files we can have multiple methods <code>user::login</code>, <code>user::logout</code>, <code>user::profile</code>, etc...  Which keeps things neat and simple.</p>

<p>Any extra path parts such as <code>www.example.com/index.php/user/login/foo</code> would pass <code>foo</code> as the first argument to <code>user::login('foo')</code> and so on for any additional arguments.  So instead of losing <code>$_GET</code> we gain the ability to send extra information along with the URL itself, all the wile leaving <code>$_GET</code> to do what it was intended for.</p>

<p>With the rewriting we can actually set all our links up without the <code>index.php</code> so you would just omit that when creating navigation links etc.., and the rewrite rule will take care of it. The really big advantage is once it's setup you can just add new controllers or methods in and that is the extent of the changes you need to make for it to work.</p>

<p><strong>Summery</strong></p>

<p>This solves a lot of the above mentioned problems, because you have total control over what is a Controller and what is not.  There is 100% no chance for directory transversal (if autoloading) because the path is never used, auto loading uses the Class Name/Namespace, not the file name. Even without autoloading, by it's very nature it will split the paths on the directory separator.  So the protection is inherent, instead of added as an after thought.</p>

<p>The only real issue this type of router has it that you are tied to a naming convention for your URL and Controllers, but you have that anyway.  A way around that is the next step up which is an "event" based router, where you would subscribe to the request event.  This would let you run any function or callable as the endpoint of any URL, and break this dependence on the file system.</p>

<p>You can obviously go much deeper then this, such as having sub-folders in the Controller folder etc.</p>

<p>But this is just a simple example, I hope that helps explain the basics.</p>
    </div>