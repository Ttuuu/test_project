<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First of all: I know, it is fun to implement your own parser from scratch and it is also reasonable for getting a better understanding of how parsers work... however if your goal is to build a custom language for your unity game, I strongly recommend to use one of the available parser generators (e.g. <a href="https://www.antlr.org/" rel="nofollow noreferrer">ANTLR</a>).</p>

<p><strong>Concept</strong></p>

<p>Your approach is: </p>

<ul>
<li><p>Create Tokens</p></li>
<li><p>Evaluate Tokens</p></li>
</ul>

<p>That is the normal "naive approach" when trying to parse something for the first time... However, usually parsers have one step between them where tokens are build up to an <a href="https://en.wikipedia.org/wiki/Abstract_syntax_tree" rel="nofollow noreferrer">abstract syntax tree</a>. The abstract syntax tree is simply spoken an hierarchically object mode that represents the parsed code.</p>

<p>Evaluating the abstract syntax tree is relatively simple, because the complexity of nested expressions prioritized by brackets and so on are implicitly represented by the hierarchy.</p>

<p>If you want to improve your implementation, I recommend creating such an abstract syntax tree before evaluating it.</p>

<p><strong>Code</strong></p>

<ul>
<li>Error handling code is totally missing - there is no guarantee, that the tokens are in the right order</li>
<li>GetTokens returns a tuple. I would use a custom type "Token { Name:string , Vale:string }" instead, because it is much more readable.</li>
</ul>

<p><strong>Examples for AST realizations</strong></p>

<ul>
<li>The .Net Framework has a build-in object model: <a href="https://docs.microsoft.com/de-de/dotnet/csharp/programming-guide/concepts/expression-trees/" rel="nofollow noreferrer">Expression Trees</a></li>
<li>The Roslyn Compiler provides function for creating AST from C#/F#/VB code: <a href="https://github.com/dotnet/roslyn/wiki/Getting-Started-C%23-Syntax-Analysis" rel="nofollow noreferrer">https://github.com/dotnet/roslyn/wiki/Getting-Started-C%23-Syntax-Analysis</a></li>
<li>Googel provides lots of information about the topic + lots of example implementations. A simple calculator may be a good point to start with</li>
</ul>
    </div>