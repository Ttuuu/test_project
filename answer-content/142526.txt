<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code looks nice and is well documented.</p>

<p>Many details can be improved though.</p>

<ul>
<li><p><code>num_students = int(input())</code> could be moved in <code>get_students</code> so that your code deals with input in a single place.</p></li>
<li><p>even though the problem talks about lists, it may be more idiomatic to use a list of tuples instead of a list of list. I'd highly recommend <a href="http://nedbatchelder.com/blog/201608/lists_vs_tuples.html" rel="nofollow">Ned Batchelder's excellent article "Lists vs. Tuples"</a> to know more about this.</p></li>
<li><p><code>0</code> as a first argument of <code>range</code> is not needed as it is the default value. So you could rewrite: <code>for s in range(0, num_students):</code> as <code>for s in range(num_students):</code>.</p></li>
<li><p>Underscore (<code>_</code>) is pretty conventionnal for variable with an used value so you could write: <code>for _ in range(num_students):</code>.</p></li>
<li><p>Adding a simple <code>print</code> statement in <code>get_lowest_grade</code> shows that the function is called more often that it needs. This is a real issue when you have many students because your algorithm with go through all student <strong>for all students</strong>. Your algorithm is said to be quadratic or <code>O(n^2)</code>. You could retrieve the lowest grade once and for all .</p></li>
</ul>

<p>Your code would look like this:</p>

<pre><code>def get_students() -&gt; list:
    """Returns a list of names and grades of N students read from stdin
    where each name and respective grade is separated by a new line."""
    return [('Harry', 37.21), ('Berry', 37.21), ('Tina', 37.2), ('Akriti', 41), ('Harsh', 39),
            ('Harry', 37.21), ('Berry', 37.21), ('Tina', 37.2), ('Akriti', 41), ('Harsh', 39),
            ('Harry', 37.21), ('Berry', 37.21), ('Tina', 37.2), ('Akriti', 41), ('Harsh', 39)]
    num_students = int(input())
    students = []
    for s in range(num_students):
        name = input()
        grade = float(input())
        students.append((name, grade))
    return students

def get_lowest_grade(students: list) -&gt; float:
    """Returns the lowest grade from a list of students[name, grade]."""
    lowest_grade_student = min(students, key = lambda x: x[1])
    return lowest_grade_student[1]

def get_students_with_grade(students: list, grade: float) -&gt; list:
    """Returns the students with the lowest grade 
    from a list of students(name, grade)."""
    return [s for s in students if s[1] == grade]

def get_students_without_grade(students: list, grade: float) -&gt; list:
    """Returns a list of students with the lowest graded students excluded
    from a list of students(name, grade)."""
    return [s for s in students if s[1] != grade]

def get_student_names_sorted_alpha(students: list) -&gt; list:
    """Returns a list of names sorted alphabetically from a list of students[name, grade]"""
    names = [s[0] for s in students]
    return sorted(names)

def main():
    students = get_students()
    lowest_grade = get_lowest_grade(students)
    students2 = get_students_without_grade(students, lowest_grade)
    lowest_grade2 = get_lowest_grade(students2)
    second_lowest = get_students_with_grade(students2, lowest_grade2)
    for name in get_student_names_sorted_alpha(second_lowest):
        print(name)

if __name__ == '__main__':
    main()
</code></pre>

<p>A different algorithm could be written using a different data structure like a dictionnary or a counter.</p>
    </div>