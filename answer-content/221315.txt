<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You definitely want to take a <a href="https://www.cs.cmu.edu/~avrim/451f09/lectures/lect1001.pdf" rel="nofollow noreferrer">dynamic programming</a> approach to this problem, as explained by Justin, if only to make the code more readable. I've included a solution based on this approach at the end.</p>

<hr>

<h2>Structure</h2>

<p>I found the code fairly difficult to read due to the way it is structured. In its present form it wont be very re-usable, due to the use of global variables and the lack of any overall encapsulation.</p>

<p>For example, the following section, which finds all palindromic substrings, should be encapsulated in a function. And, it would be best for <code>find_partitions</code> to somehow make its own call to this function, rather than to rely on a result stored in a global variable.</p>

<pre class="lang-py prettyprint-override"><code>for start in range (len(word)):
    end=start+1
    while end &lt; len(word) + 1:
        if word[start:end] == word[start:end][::-1]:
            list_parition_index.append([start,end])
            end +=1
        else:
            end +=1

</code></pre>

<h2>Correctness</h2>

<p>I wasn't able to determine the correctness of the program from inspection, but it appears to produce correct answers, except for inputs that are already palindromes (i.e. require zero cuts), in which case it throws an error.</p>

<p>Also, there's a <a href="https://docs.python-guide.org/writing/gotchas/#mutable-default-arguments" rel="nofollow noreferrer">subtle problem with way you've specified the default value for <code>running</code></a>.</p>

<h2>Efficiency</h2>

<p>Again, I wasn't able to fully analyse the efficiency by inspection. However it seems to perform about as well as my solution.</p>

<h2>Style</h2>

<ul>
<li>Redundancy:

<ul>
<li>You import <code>re</code> but don't use it</li>
<li>Initialising <code>start</code> and <code>end</code> isn't necessary</li>
<li>This section

<pre class="lang-py prettyprint-override"><code>if ...:
    ...
    end +=1
else:
    end +=1
</code></pre>

could be replaced with

<pre class="lang-py prettyprint-override"><code>if ...:
    ...
end +=1
</code></pre></li>
</ul></li>
<li><p>On naming variables:</p>

<ul>
<li>I think <code>paritions</code> is a spelling mistake. Did you mean <code>partitions</code>?</li>
<li>Some of the names could be made more descriptive, such as <code>lst</code>, <code>item</code>, <code>item_next</code>, and <code>running</code>.</li>
</ul></li>
<li><p>The use of whitespace is a little bit inconsistent. I would make the following changes based on the <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">python style guide</a>:</p>

<ul>
<li><code>(index,item)</code> -&gt; <code>(index, item)</code></li>
<li><code>find_paritions(to_explore,word,running)</code> -&gt; <code>find_paritions(to_explore, word, running)</code></li>
<li><code>complete_paths=[]</code> -&gt; <code>complete_paths = []</code></li>
<li><code>parition_count =0</code> -&gt; <code>parition_count = 0</code></li>
<li><code>range (len(word))</code> -&gt; <code>range(len(word))</code></li>
<li><code>[start,end]</code> -&gt; <code>[start, end]</code></li>
<li><code>end=start+1</code> -&gt; <code>end = start + 1</code></li>
<li><code>end +=1</code> -&gt; <code>end += 1</code></li>
<li><code>find_paritions (list_zeroes,word)</code> -&gt; <code>find_paritions(list_zeroes, word)</code></li>
<li><code>min(x,key=len)</code> -&gt; <code>min(x, key=len)</code></li>
</ul></li>
<li><p>It wasn't clear to me that <code>running = running + [item]</code> served the role of duplicating running before appending <code>item</code>, so I ended up correcting it to <code>running.append(item)</code> which of course broke the code. Maybe a comment here would be worthwhile, or this statement could be written in such a way that it draws attention to the duplication (e.g. <code>new_running = running + [item]</code>, then you wouldn't have to use <code>pop</code> on each successive iteration).</p></li>
</ul>

<hr>

<p>For comparison, here is a solution that uses dynamic programming:</p>

<pre class="lang-py prettyprint-override"><code>def least_palin_cuts(string, memo=None):
    """Return the minimum number of cuts required to break string into 
    palindromic substrings.

    &gt;&gt;&gt; least_palin_cuts('ababbbabbababa') # a|babbbab|b|ababa
    3
    &gt;&gt;&gt; least_palin_cuts('partytrapb') # partytrap|b
    1
    &gt;&gt;&gt; least_palin_cuts('kayak') # kayak (no cuts needed)
    0
    """
    if memo is None:
        memo = dict()
    if string not in memo:
        if is_palindrome(string):
            memo[string] = 0
        else:
            memo[string] = min(
                least_palin_cuts(left, memo) + 1 + least_palin_cuts(right, memo)
                for (left, right) in splits(string)
            )
    return memo[string]

def is_palindrome(string):
    """Return True if string is a palindrome, else False."""
    return all(c1 == c2 for (c1, c2) in zip(string, reversed(string)))

def splits(string):
    """Generate each way of splitting string into two non-empty substrings.

    &gt;&gt;&gt; list(splits('abc'))
    [('a', 'bc'), ('ab', 'c')]
    """
    for i in range(1, len(string)):
        yield (string[:i], string[i:])
</code></pre>
    </div>