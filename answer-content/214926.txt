<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First of all, there is no need to use <code>iter_mut()</code> on <code>conferences</code>, as you never change the original <code>rankings</code>. As we <code>clone</code> the teams later, we can simply use</p>

<pre><code>let mut raw_teams: Vec&lt;Vec&lt;Vec&lt;Team&gt;&gt;&gt; = rankings
    .conferences
    .iter()
    .map(|c| c.divisions.iter().map(|d| d.teams.clone()).collect())
    .collect();
</code></pre>

<p>Now that we have a <code>Vec&lt;Vec&lt;Vec&lt;Team&gt;&gt;</code>, we can call <a href="https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.flatten" rel="nofollow noreferrer"><code>flatten</code></a>:</p>

<pre><code>let flattened_teams: Vec&lt;Team&gt; = raw_teams.into_iter().flatten().flatten().collect();
</code></pre>

<p>I used <code>into_iter()</code> as your original code left <code>raw_teams</code> empty.</p>

<p>However, we can skip <code>raw_teams</code> entirely if we use <a href="https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.flat_map" rel="nofollow noreferrer"><code>flat_map</code></a> instead of <code>map(â€¦).flatten()</code>:</p>

<pre><code>let flattened_teams: Vec&lt;Team&gt; = rankings
    .conferences
    .iter()
    .flat_map(|c| &amp;c.divisions) // need to borrow due to iter()
    .flat_map(|d| &amp;d.teams)     // need to borrow due to iter()
    .cloned()                   // clone the elements
    .collect();
</code></pre>

<p>If we don't want to borrow, we can of course just move everything into <code>flattened_teams</code> by simply removing <code>cloned()</code> and <code>&amp;</code>:</p>

<pre><code>let flattened_teams : Vec&lt;Team&gt; = rankings
    .conferences
    .into_iter()
    .flat_map(|c| c.divisions)
    .flat_map(|d| d.teams)
    .collect()
</code></pre>

<p>None of these functions use <code>mut</code>.</p>
    </div>