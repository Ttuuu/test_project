<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are at least two things that can be done:</p>

<ul>
<li>prettify the code</li>
<li>use <strong>parameterized queries</strong>: this is important from a security point of view but also for functional reasons (escaping values that contain single quotes and will break your SQL)</li>
</ul>

<p>I don't know how your DB is structured but in a properly designed DB the employee ID should be a unique (incremented ?) identifier and sufficient in itself. <code>Name</code> is a reserved keyword in many languages and it is generally discouraged. But that shouldn't cause problems here since it's enclosed within backticks.</p>

<p>Here is some proposed code that returns the balance as integer value. I don't really think you are interested in the other variables since you already know them. But you could return a datarow if you want to fetch several values in one pass.</p>

<hr>

<pre><code>Public Class frmDemo

    Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click

        Dim balance As Integer
        balance = GetBalanceValue(EmployeeID:=2, EmployeeName:="Jonas")
        MessageBox.Show("Balance: " &amp; balance.ToString)

    End Sub

    Public Function GetBalanceValue(ByVal EmployeeID As Integer, ByVal EmployeeName As String) As Integer
        Dim balance As Integer
        Dim sql As String = "SELECT BALANCE FROM `employees`" &amp; _
        " WHERE `NAME`= @employee_name" &amp; _
        " AND `EMPLOYEE_ID`= @employee_id"

        Try
            Using con As New MySqlConnection("connection string goes here")
                con.Open()
                If con.State = ConnectionState.Open Then ' connection successful, continue

                    Using cmd As MySqlCommand = New MySqlCommand(sql, con)
                        With cmd
                            .Parameters.Add("@employee_id", DbType.Int32).Value = EmployeeID
                            .Parameters.Add("@employee_name", DbType.String).Value = UCase(EmployeeName)

                            ' retrieve the first value found
                            balance = Convert.ToInt32(.ExecuteScalar())
                            Return balance
                        End With
                    End Using

                Else
                    MessageBox.Show("Connection failure", "Failed", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
                    Return Nothing
                End If

            End Using

        Catch ex As Exception
            MsgBox(ex.ToString)
        End Try

    End Function

End Class
</code></pre>

<hr>

<p>So the idea here is to use a function to retrieve the balance for a given employee. The error handling is a bit crap - this is for demonstration purposes.</p>

<ul>
<li>I tested the code with a SQLite DB but the proposed code should be ok or almost ok for you</li>
<li>You will notice the use of the <strong>Using</strong> statement. If you are working with files, database connections or other kinds of unmanaged resources you will often use it. Intro: <a href="https://docs.microsoft.com/en-us/dotnet/visual-basic/language-reference/statements/using-statement" rel="nofollow noreferrer">Using Statement (Visual Basic).</a></li>
<li>I am using <code>ExecuteScalar</code> to retrieve one single field from the first row found (normally there should be only one row per employee). Warning: this will cause an error if no row is found. If you anticipate this situation you have to adapt the logic a bit. An alternative approach is to load the results to a datatable and check that you have at least one datarow.</li>
<li>Since you are using <strong>Mysql</strong>, perhaps you will have to remove the <code>@</code> in front of the parameter names, for some databases (Oracle) the norm is to use a colon instead. If the parameterized queries don't work immediately for you don't despair but investigate. The sooner you adopt best practices the better.</li>
<li>consistency: your table name is lower case and field names are uppercase. Use lower case everywhere </li>
<li>you can use the underscore character (<code>_</code>) to separate keywords in object names eg <code>employeee_id</code></li>
<li>avoid generic/<strong>reserved keywords</strong>, they can cause problems that are not always obvious and sometimes hard to debug</li>
<li>exception handling: normally you will handle Mysql exceptions only in this block, for all other exceptions you should have a module-level handler</li>
</ul>

<p>Suggestion: the next time you post public code, remove the password and other sensitive information.</p>
    </div>