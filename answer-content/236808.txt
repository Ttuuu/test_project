<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>For a toy, it's completely fine to print whatever characters you want, because there's no need to consider portability. You make code that works on one computer and then it's done.</p>

<p>But then there's nothing really to respond to, so let's pretend this is a hypothetical first draft of a larger production.</p>

<hr>

<p>The presentation and input of the game can be encapsulated separately out of the main function. That way if you run into some future difficulty using <code>\033[F</code>, it should be easier to understand which code needs porting because it will all be in once place. </p>

<p>The intent of this isn't just to make extra code for coding's sake, but to make the future work of porting as easy as possible, even if you don't presently know how it might need to be ported.</p>

<p>It also makes it easier to reason about various tasks because there's less unrelated code together in one place. It's not always obvious how to do this, but one rule is that the game logic is very unlikely to ever need any IO headers directly included.</p>

<hr>

<p><code>Players</code> should not have an <code>EMPTY</code> value. The current player can never logically be <code>EMPTY</code>, but this wouldn't be clear just from looking at the header.</p>

<hr>

<p>Consider an array for the grid instead of a vector of vectors. It seems that they never need to be resized. Perhaps even making a Grid type (could be as simple as <code>using Grid = std::array&lt;...&gt;;</code>)</p>

<hr>

<p>You have a grid of <code>Players</code>, which seems odd, because it's really representing the ownership of a slot. This is presumably why you added EMPTY to the enum. A simple alternative is to store a grid of <code>std::optional&lt;Players&gt;</code>. Or, an enum like <code>SlotOwner</code> which does have an EMPTY value inside it, but is distinct from the <code>Players</code> enum.</p>

<hr>

<p>Consider making your private class methods file-private to the cpp file. For example, <code>GetCell</code> does not require any game context and therefore does not need to be a class method. </p>

<hr>

<p>Consider overloading the ostream shift operator for Grid, or making the GetGrid method take an ostream argument. That way you don't need to construct a string only to put it directly into an ostream and then delete the string.</p>

<p>Same for <code>GetUserInput</code> and taking an istream. </p>

<p>This makes it more easily testable, flexible, uses less memory, and would be about the same amount of code.</p>

<hr>

<p>Consider <code>std::all_of</code> for testing if the entire grid is empty.</p>

<hr>

<p>Rename <code>GetUserInput</code> to something that indicates what it is returning.</p>

<hr>

<p>Convert the result of <code>GetUserInput</code> to an int before using it to minimize the code that's treating it like a char. You want the reader to be able to forget about how the input was acquired as quickly as possible.</p>

<hr>

<p>Rather than range checking the <code>GetUserInput</code> result in the <code>MakeMove</code> method, do the check inside <code>CanMove</code> which seems much more appropriate. </p>
    </div>