<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>just some minor issues...</p>

<h1>adding a proper serializable interface:</h1>

<p>while you provide a filename within the constructor and a <code>save()</code> methode i would apprechiate to let the <code>ScoreList</code>class to implement a proper (at least a minimal) serialization interface (yeah, what happened to <code>load()</code>? are those highscore files <strong>write-only</strong>?)</p>

<pre><code>public interface MiniSerializable {
    public boolean saveToFile(String filename);
    public boolean loadFromFile(String filename);
</code></pre>

<p>}</p>

<h1>DRY (don't repeat yourself)</h1>

<p>it's a minor one, so don't worry - helps to prevent <strong>Bugs</strong> (see inline code comment)</p>

<pre><code>public ScoreList(String description, int numberOfEntries, boolean autoSave) {
    this(description, numberOfEntries);   
    //filename has already been removed, see above     
    this.autoSave = autoSave;
}

should be used, if the scores dont have to be saved to a file
public ScoreList(String description, int numberOfEntries) {
    this.description = description;
    this.numberOfEntries = numberOfEntries;
    scores = new ArrayList&lt;&gt;(); //i guess here's a bug, you forgot to init the list in this constructor, but don't mind
    autoSave = false;
}
</code></pre>

<p>another issue of DRY is when adding scores:</p>

<pre><code>public boolean addScore(Score score) {
    if (scores.size() &lt; numberOfEntries) {
        addAndSave(score)
        return true;
    }

    Score lowestScore = scores.get(0);
    if (score.getPoints() &gt; lowestScore.getPoints()) {
        scores.remove(lowestScore);
        addAndSave(score);
        return true;
    }

    return false;
}

private void addAndSave(Score score){
    scores.add(score);
    scores.sort(); //see notes below
    if (autoSave) {
        save();
    }
}
</code></pre>

<h1>Segregation of concerns</h1>

<p>i think it's not the best way to compare scores in the least instead move the comparator to the class where it belongs to: <code>Score</code>
you can now agrue that if you apply a special sort order that it's the wrong place, but for default behaviour (as used in here) you should move it to <code>Score</code>.</p>

<pre><code>public class Score implements Serializable, Comparator&lt;Score&gt; {

    //... 

    @Override
    public int compare(Score score1, Score score2) {
        return Integer.compare(score1.getPoints(),score2.getPoints() );
    }

}
</code></pre>

<p>that makes the whole sorting kind of unneccessary...</p>

<pre><code>private void sort() {
    scores.sort(); //do you really need a method for this?
}
</code></pre>
    </div>