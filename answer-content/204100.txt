<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm glad we established in the comments that your code doesn't in fact run slow. When you use the word "efficiency", most people would take that to mean run-time speed (or space, depending on the context).</p>

<p>You should never optimize for efficiency unless there is a demonstrated lack of efficiency that has a negative impact on humans beings. Optimize for humans, not for computers. Computers don't care.</p>

<p>In this case, if I had gone down the path of trying to make it run faster, we would probably have ended up with less readable, less maintainable code.</p>

<p>We can certainly optimize for readability or style though, as you pointed out in the comments. </p>

<p>I should say first that I don't have a problem with your code. I think it's fine. </p>

<p>(This is one bug, however. Instead of <code>Sort Last</code>, you should do <code>Sort Last,First</code>. "Bloggs, Jane" should come before "Bloggs, Joe" in the output.)</p>

<p>I've rewritten the code below how I would personally write it. There are a couple of techniques that you may not be familiar with that can be very useful. </p>

<p>One is "capturing groups" in regular expressions. E.g. <code>(?&lt;first&gt;.+)</code>, that matches a group named "first", and we can get the captured text with this: <code>$matches['first']</code></p>

<p>(<code>$matches</code> is a "magic variable" defined by PowerShell, if you are wondering.)</p>

<p>Another technique is "calculated properties" with Select-Object. You can make properties by supplying a property name and a script block that calculates the value. That is often more straightforward than creating objects with [PSCustomObject].</p>

<pre><code># E.g. "Bloggs;Joe" ==&gt; "Bloggs, Joe"
function NormalizeName($fullName)
{   
    $separators = '\s|,|;'
    if ($fullName -match "^(?&lt;last&gt;[^$separators]+)[$separators]+(?&lt;first&gt;.+)")
    {
        $last  = $matches['last']
        $first = $matches['first']
        "$last, $first"
    }
    else 
    {
        # Doesn't match, so return unchanged.
        $fullName    
    }
}

Import-Csv .\Cust.csv |
    Select-Object @{name="FullName"; exp={NormalizeName $_.FullName} }, StreetAddress, City, Postcode |
    Sort-Object FullName
</code></pre>
    </div>