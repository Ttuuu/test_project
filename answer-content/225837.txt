<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Please don't get me wrong. The code works. Working code is a good thing. Working code that <em>might</em> break is not broken code.</p>

<h3>Fundamentals</h3>

<ul>
<li><p>Starting a Python module (or file in any language) with a comment describing what problem the code solves is helpful. It helps reviewers and future users understand what the programmer is trying to do. More importantly, it helps the programmer themselves understand what they are trying to do. Describing the problem first usually leads to better solutions.</p></li>
<li><p>Starting Python functions with docstrings (or documenting functions/methods in other languages).</p></li>
<li><p>Meaningful names. <code>convert</code> and <code>addElement</code> could be part of an alchemist's cookbook. Convert from what to what? Add what sort of element to what sort of aggregate?</p></li>
<li><p>Language idioms: in Python, compound names use string_case not camelCase.</p></li>
</ul>

<h3>Leetcode</h3>

<p>At a high level, Leetcode puzzles are designed as computer science challenges. The questions go beyond FizzBuzz's basic for loops and modulo application. Unlike FizzBuzz, good Leetcode answers are 'clever'...at least in the sense that they reflect application of computer science, experience, insight, etc.</p>

<p>Computer science, experience, insight, etc. help produce code that scales with about as much effort as writing brute force code. Brute force solutions are fine for FizzBuzz. They are not great solutions to Leetcode's puzzles.</p>

<p>The upside is that better solutions to Leetcode puzzles are easier to find with study and practice. Experience and knowledge help a programmer analyze its puzzles and provide insight into the problem at a <em>high</em> level. </p>

<p>What works for strings of length 1000 might sputter and stall at length ten billion...at least until the new hardware shows up or the AWS budget grows.</p>

<h2>This problem</h2>

<ul>
<li><p>The function signature is <code>convert(String string_one) -&gt; String string_two</code> and <code>string_one</code> and <code>string_two</code> are the same <a href="https://en.wikipedia.org/wiki/Multiset" rel="nofollow noreferrer">multiset</a>. That looks a bit like sorting. Many sorting algorithms that scale well <em>on random data</em> have space = O(n) and time = O(n log n).</p></li>
<li><p>The <strong>grid solution</strong> in the question has <code>space = O(mn)</code> where <code>m</code> is the number of rows. That's worse than <code>space = O(n)</code>, so we know we can do better...<strong>but</strong> only if we solve the right problem. One issue with the <strong>grid solution</strong> it solves a harder problem in order to solve the actual problem. The harder problem is <a href="https://en.wikipedia.org/wiki/Prettyprint" rel="nofollow noreferrer">pretty printing</a> with all the spaces.</p></li>
<li><p>The format of the question on Leetcode suggests the pretty printing solution. And pretty printing ultimately uses <code>space = O(mn)</code> because it has to include all the spaces and <code>time = O(mn)</code> because all those spaces get printed). </p></li>
<li><p>Is <code>time = O(mn)</code> better or worse than <code>time = O(n log n)</code>? It <a href="https://cs.stackexchange.com/questions/9523/is-omn-considered-linear-or-quadratic-growth">depends</a>. Here it is probably better because <code>convert (my_string, 1) -&gt; my_string</code> and because <code>convert(my_string, length(my_string) -&gt; my_string</code>. It looks like this is a case where <code>time = O(mn)</code> is linear. Which means it might not be a sorting problem.</p></li>
</ul>

<h3>A space improvement to the grid solution</h3>

<p>One way to improve the space requirements is to only record the grid coordinates of the letters and ignore the spaces. For example <code>"PAYPALISHIRING", numRows = 3</code> has an intermediate data structure  <code>[(1,1, "P"), (2,1,"A"}, (3,1,"Y")...(2,7,"G")]</code>...a one-indexed list of tuples (row, column, string). </p>

<p>The high level solution (in psuedo-code) might be something like:</p>

<pre><code># Program A
temp_array =  make_array(input length)
for i in input
  temp_array[i] = get_row_and_column(input[i])
end for
return sort_into_rows(temp_array)
</code></pre>

<h2>Sorting isn't free</h2>

<p>As a starting point we should expect <code>time = O(n log n)</code> but pretty printing is probably linear <code>time = O(mn)</code>. Smells like just recording grid coordinates has traded less space for more time. Another code smell is that we are generating a new value and sorting solely on that value. The original string doesn't play a role. Yoda's <code>"HIRIINGISPAYPAL", numRows=3</code> produces a list tuples with identical row and column values.</p>

<p>This is why we have the intuition that a 'mathematical' solution is possible. We know that strings of the same length pretty print the same number of rows into congruent patterns. </p>

<h3>I spent some time stuck on sorting.</h3>

<p>I came to <code>Program A</code> not long after reading this question a few times and thinking about how to answer it. Thinking about sorting the grid got me worried about <a href="https://en.wikipedia.org/wiki/Sorting_algorithm#Stability" rel="nofollow noreferrer">stable sorting</a> even though it's ultimately not an issue because <code>row, column</code> is a unique value.</p>

<p><strong>But</strong> the reason I was worried about sort stability was if I looked at a rows within the grid row<sub>1</sub> contains a character that is earlier in the message than row<sub>2</sub>. Within a row, earlier values in the message are earlier values within a row. It's also true for columns, but it turns out rows are enough.</p>

<h3>Improving on the grid and the sort</h3>

<p>I spent a while thinking about the algorithm in terms of sorting and rows. Thinking lexographically. None of it was obvious. Eventually, it dawned on me.</p>

<pre><code>output = row_1 + row_2 + ... row_n
</code></pre>

<p>for example</p>

<pre><code>"PAYPALISHIRING", numRows = 4" -&gt; "PIN" + "ALSIG" + "YAHR" + "PI"
</code></pre>

<p>and an O(n) solution might be</p>

<pre><code>make a linked list for each row
for each character in the input
  determine its row
  place it at the end of the corresponding list
end for
concatenate the linked lists
output the concatenation
</code></pre>

<p>In terms of space, there are no empty nodes with linked lists.  "PAYPALISHIRING", numRows = 4" produces rows 3,5,4,2. Using four arrays of size 5 would utilize 70% of the capacity...with array's it's still the grid.</p>

<h3>Still stuck in sorting</h3>

<p>Thinking in terms of rows changes a generalized sort into a [bucket sort(<a href="https://en.wikipedia.org/wiki/Bucket_sort" rel="nofollow noreferrer">https://en.wikipedia.org/wiki/Bucket_sort</a>). I knew I was in O(n) space but bucket sorting has a worst case of O(n<sup>2</sup> and that's worse than general sorting at O(n log n) <strong>even though intuition says it will be faster</strong>.</p>

<h2>Making the problem simpler</h2>

<p>Eventually it dawned on me. There's bucketing but no sorting. It's like dealing cards. An (honest) dealer deals round the table without considering the values of the cards. It's the same procedure when a hand is three cards as when a hand is five cards or seven. There is a cycle.</p>

<p>When the <code>ZigZag</code> is over three rows, row placement cycles (1,2,3,2). With four rows the cycle is (1,2,3,4,3,2). With five rows its (1,2,3,4,5,4,3,2). <strong>There is no conditional logic.</strong></p>

<h2>Some computer science</h2>

<p>The length of the cycle is <code>(2*numRows)-2</code>. An algorithm for <code>space = O(m+n)</code> and <code>time = O(m+n)</code>:</p>

<pre><code>generate the cycle based on numRows

for each character in input
  put character at current row in cycle  
  next row in cycle
</code></pre>

<ul>
<li><p>There are tradeoffs regarding how the cycle is stored. One option is to use an array or list and keep track of where we are in the list and reset to the head of the list whenever we reach its end. Another alternative is to use a generator and call it each time we need another value. For example we might use <a href="https://docs.python.org/2.7/library/itertools.html#itertools.cycle" rel="nofollow noreferrer"><code>itertools.cycle</code></a> in Python. In the end, Python's <code>itertools.cycle</code> is probably going to be better than the code I am likely to write. YMMV.</p></li>
<li><p>Is a one step solution better? Writing each character to the correct row and then merging the rows after all characters have been processed requires two reads and two writes for each character. Mathematically it is possible to allocate an output array and then write each character to it's appropriate place in a single step. This requires only one read and one write for each character.</p></li>
<li><p>A difference between engineering and mathematics is that the one step solution assumes that input, output, and the program all fit in available memory. When they don't, the second reads and writes of the two step solution wind up happening implicitly. </p></li>
<li><p>Many interesting data processing problems don't fit all into memory at once. The two step <a href="https://en.wikipedia.org/wiki/Divide-and-conquer_algorithm" rel="nofollow noreferrer">divide and conquer</a> approach has the additional advantage of simpler logic than the pointer tracking required for a one step solution...fewer <code>i</code>'s and <code>j</code>'s is a good thing.</p></li>
</ul>

<h2>20 minutes to solve</h2>

<p>If it's not obvious already, I spent more than 20 minutes thinking about the problem. </p>

<h3>Leetcode revisited</h3>

<p>Any problem I can solve in less than twenty minutes has to be a problem I can solve in twenty hours. Getting to good solutions quickly means having ideas about good and bad solutions in the context of Leetcode.</p>

<p>So there are two kinds of practice Leetcode offers. Practice at working through problems quickly and practice working through problems deeply. It's the depth makes Leetcode's puzzles interesting. It's the range of possible approaches that make it useful for bucket sorting programmers when programmers need to be bucket sorted.</p>

<p>Both kinds of practice matter. This answer went deeper than was ultimately necessary. But that depth might help us recognize when a question is simpler than first thought.</p>
    </div>