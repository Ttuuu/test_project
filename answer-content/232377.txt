<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Assuming each time you receive a new query you create an instance of InternedString to get/add another item from/into the dictionary, the performance benefit seems questionable:</p>

<ol>
<li><strong>Impact of string.Intern</strong></li>
</ol>

<p>a) It needs to calculate a hash of the original string to make a lookup in the pool of strings </p>

<p>b) From <a href="https://docs.microsoft.com/en-us/dotnet/api/system.string.intern?view=netframework-4.5.2" rel="nofollow noreferrer">official documentation</a> - </p>

<blockquote>
  <p>The memory allocated for interned String objects is not likely to be
  released until the common language runtime (CLR) terminates. The
  reason is that the CLR's reference to the interned String object can
  persist after your application, or even your application domain,
  terminates.</p>
</blockquote>

<ol start="2">
<li><strong>High rate of collisions seems to be the only beneficial scenario</strong></li>
</ol>

<p>The equality comparison that Dictionary does for items in the bucket is the case when you implementation might win when the bucket grows huge.</p>

<p>But do you really have that many collisions?</p>

<p><strong>P.S.</strong></p>

<p>Comparing strings you're not using <strong>String.ReferenceEquals</strong> to compare references of the interned strings, but rather == operator which for (sting vs string) leads to values comparison. </p>
    </div>