<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Disclaimer: This is the first time I have ever really looked into using OpenGL</h3>

<p>Keep in mind that my review may contain code that is not fully included in the question (such as the simplified <code>main()</code> function).</p>

<h1>Bugs</h1>

<ul>
<li><p>I found that when I tried to resize the window, I would always crash the program.  </p>

<p><img src="https://i.stack.imgur.com/8tU4s.png" alt="enter image description here"></p>

<p>That wasn't very fun, so I set out to fix that first and foremost.  It was rather easy to fix, all I had to do was add a frame buffer sizing callback, and set it to the window with <a href="http://www.glfw.org/docs/3.0/group__window.html#ga3203461a5303bf289f2e05f854b2f7cf" rel="nofollow noreferrer"><code>glfwSetFramebufferSizeCallback()</code></a>.</p>

<p>The frame buffer callback function:</p>

<pre><code>static void framebuffer_size_callback(GLFWwindow* window, int width, int height)
{
    glViewport(0, 0, width, height); // reset the viewport
    glMatrixMode(GL_PROJECTION); // modify the projection matrix
    glLoadIdentity();            // load an identity matrix into the projection matrix
    glOrtho(0, width, 0, height, -1.0, 1.0); // create new projection matrix

    /// Important!!! You need to switch back to the model-view matrix
    /// or else your OpenGL calls are modifying the projection matrix!
    glMatrixMode(GL_MODELVIEW); // return to the model matrix
    glLoadIdentity();           // load an identity matrix into the model-view matrix

    // OpenGL has now compensated for the resized window, and is ready to draw again.
}
</code></pre>

<p>The modified <code>run()</code> function:</p>

<pre><code>void
run(GLFWwindow *window)
{
    void *resources = setup();
    glfwSetWindowUserPointer(window, resources);

#ifdef MEASURE
    glfwSwapInterval(0);
#endif

    int viewport_width, viewport_height;

    // set for proper resizing of window and viewport
    glfwSetFramebufferSizeCallback(window, framebuffer_size_callback);

    while (!glfwWindowShouldClose(window))
    {
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

        glfwGetFramebufferSize(window, &amp;viewport_width, &amp;viewport_height);
        framebuffer_size_callback(window, viewport_width, viewport_height);

        draw(resources);

        glfwSwapBuffers(window);
        glfwPollEvents();
#ifdef MEASURE
        printfps();
#endif
    }

    cleanup(resources);
}
</code></pre>

<p>This doesn't fully fix the crashing, occasionally the program will still misbehave; however, at least I am able to scale the window now more consistently.</p></li>
<li><p>When I undefined <code>OVERLAPPING_OFF</code> to benchmark the code on my computer, I got some errors of an unknown type name <code>offset</code>.  Looking at your code, you defined <code>offset</code> only if <code>OVERLAPPING_OFF</code> is defined but then try to use it if it isn't defined as well.  The fix was simple enough, I just moved the declaration of <code>offset</code> outside of the <code>#ifdef OVERLAPPING_OFF</code>.</p>

<pre><code>    // Instance offsets
    int i;
    GLfloat offset[OFFSET_COUNT];
#ifdef OVERLAPPING_OFF
    int j, idx=0;
    GLfloat x, y;
    for (i=0; i&lt;DIMi; i++)
    {
        y = (GLfloat)i * STEP;
        for (j=0; j&lt;DIMi; j+=2)
        {
            offset[idx++] = x = (GLfloat)j * STEP;   // x
            offset[idx++] = y;                       // y
        }
    }
#else
    for (i=0; i&lt;OFFSET_COUNT; i++)
        offset[i] = genc();
#endif
</code></pre></li>
</ul>

<h1>Optimization</h1>

<ul>
<li><p>Running my own profiling tests for a longer duration, I came up with the following data.</p>

<p><img src="https://i.stack.imgur.com/3GWce.png" alt="enter image description here"></p>

<p>As we can see, <code>glDrawElementsInstanced()</code> now only takes up 2% of the total run time.  The big time hogs are <code>CGLFlushDrawable</code> and <code>_glfwPlatformPollEvents</code>.</p></li>
<li><p>There are two ways to process pending events. <code>glfwPollEvents()</code> processes only those events that have already been received and then returns immediately. This is the best choice when rendering continually, like most games do.</p>

<p>If instead you only need to update your rendering once you have received new input, <code>glfwWaitEvents()</code> is a better choice. It waits until at least one event has been received, putting the thread to sleep in the meantime, and then processes all received events just like <code>glfwPollEvents()</code> does. This saves a great deal of CPU cycles and is useful for, for example, many kinds of editing tools.</p></li>
</ul>
    </div>