<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>        for (int i = 0; i &lt; word1.length(); i++) {
</code></pre>
</blockquote>

<p>Since you never use <code>i</code> except to calculate <code>word1.charAt(i)</code>, you could more easily do </p>

<pre><code>        for (char current : word1.toCharArray()) {
</code></pre>

<p>Then you could replace <code>word1.charAt(i)</code> with <code>current</code>.  </p>

<p>But as noted in a <a href="https://codereview.stackexchange.com/questions/200401/group-anagrams-together-approach-in-java#comment385840_200401">comment</a>, it would actually be more efficient to use a different algorithm.  The issue is that <code>indexOf</code> is \$\mathcal{O}(n)\$ and of course the <code>for</code> loop is \$\mathcal{O}(n)\$.  Nested, they become \$\mathcal{O}(n^2)\$.  Worse, <code>isAnagram</code> is itself inside nested <code>for</code> loops.  So the overall approach is \$\mathcal{O}(m^2n^2)\$, where \$m\$ is the number of words and \$n\$ is the maximum length of each word.  </p>

<p>If you instead normalize each string by <a href="https://stackoverflow.com/q/605891/6660678">sorting</a> it (\$\mathcal{O}(n\log n)\$), you can then put the normalized strings in a <code>HashMap</code> of <code>ArrayList</code> (\$\mathcal{O}(1)\$ each or \$\mathcal{O}(m)\$ total).  This is only \$\mathcal{O}(m\cdot n\log{n})\$, which is much better.  </p>

<p>Or skip the <code>ArrayList</code> and just use a counter.  The overall algorithm would look something like </p>

<pre><code>    public static Map&lt;String, Integer&gt; countAnagrams(String[] words) {
        Map&lt;String, Integer&gt; anagramCounts = new HashMap&lt;&gt;();

        for (String word : words) {
            String sorted = sort(word);

            Integer count = anagramCounts.get(sorted);
            if (count == null) {
                count = 0;
            }

            anagramCounts.put(sorted, count + 1);
        }

        return anagramCounts;
    }
</code></pre>

<p>This expects the caller to handle the output, which is better practice (<a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" rel="nofollow noreferrer">Single Responsibility Principle</a>, as applied to methods; see also <a href="https://en.wikipedia.org/wiki/SOLID_(object-oriented_design)" rel="nofollow noreferrer">SOLID</a>, <a href="https://en.wikipedia.org/wiki/Separation_of_concerns" rel="nofollow noreferrer">Separation of concerns</a>, and <a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself" rel="nofollow noreferrer">Don't Repeat Yourself</a>).  </p>

<p>The basic idea here is that the method should either generate data or display it.  That way, if you want to reuse the data generation for something else, you can.  </p>

<p>In the original, you generate the data and then display it in the same method.  If you wanted to do something else with the data, you'd have to refactor.  This is more flexible and easier to test with automation.  </p>

<p>Consider </p>

<pre><code>public static void displayAnagramCounts(String[] words) {
    Map&lt;String, List&lt;String&gt;&gt; groups = groupAnagrams(words);
    List&lt;Integer&gt; counts = countValues(groups);
    Collections.sort(counts);
    displayNumbers(counts);
}
</code></pre>

<p>Now <code>countValues</code> and <code>displayNumbers</code> can be written in generic ways.  The former takes a <code>Map</code> of <code>List</code> and flattens it into a <code>List</code> of the sizes of the <code>List</code> elements.  The latter displays a list of numbers with spaces between them.  Both those methods can be reused and tested separately.  </p>

<blockquote>
<pre><code>        for (Map.Entry&lt;String,Integer&gt; entry : anag.entrySet()) {
            //System.out.println(entry.getKey() + " " + entry.getValue());
            counts.add(entry.getValue() + 1);
        }
</code></pre>
</blockquote>

<p>There is an argument that you shouldn't include commented out code in a code review.  Commented out code is code not ready for source control (it should either be deleted or commented in).  </p>

<p>You don't actually need an <code>entrySet</code> here, as <code>values</code> is enough.  E.g. </p>

<pre><code>        for (int value : anag.values()) {
            counts.add(value + 1);
        }
</code></pre>

<p>With my alternative algorithm, you wouldn't even have to add one here.  </p>
    </div>