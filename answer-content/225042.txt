<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You allow a server to reuse an existing context when calling <code>BeginScope</code>. Does this mean multiple integration tests could reuse a context? If so, how do you handle disposal of the context? Your example shows one test that handles disposal of a possibly shared context.</p>

<blockquote>
<pre><code>public ITeapotServerContext BeginScope()
{
     // CR: who should be allowed to handle the lifetime of a shared context?
    return _serverContexts.GetOrAdd(Guid.NewGuid(), 
        id =&gt; new TeapotServerContext(Disposable.Create(
             () =&gt; _serverContexts.TryRemove(id, out _))));
}
</code></pre>
</blockquote>

<p>Maybe consumers of the API should not be able to dispose a context, but could register and unregister on a shared context. The server would then be responsible for lifetime management of each context. I would remove <code>IDisposable</code> from the interface definition of <code>ITeapotServerContext</code>.</p>

<blockquote>
<pre><code>public void Dispose()
{
    // CR: what if context is shared?
    _serverContext.Dispose();
    _http.Dispose();
}
</code></pre>
</blockquote>

<hr>

<p>The constructor of <code>TeapotServer</code> performs some configuration, followed by starting the host. I'm personally not a fan of doing anything more than storing state and configuring the instance in a constructor. Further initialisation - like IO operations - should be done in a method called <code>Initialise()</code>.</p>

<blockquote>
<pre><code>_host.StartAsync().GetAwaiter().GetResult();
</code></pre>
</blockquote>

<hr>

<p>Talking about extensibility, I'm not sure whether <code>ITeapotServerContext</code> should be an interface. I don't see any other possible implementation besides the one you provided. Its lifetime and dispose pattern is also an internal occasion.</p>
    </div>