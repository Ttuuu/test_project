<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Not sure that adding a 7-line validator class per validation rule (plus typecasting abuse) is any shorter/better than a set of more straightforward composable validating one-liners, something like:</p>

<pre><code>public static class ValidatingTransformers
{
    public static T ThrowsIfNull&lt;T&gt;(this T s, string msg = "") =&gt;
        s != null ? s : throw new ArgumentException(msg);
    public static string ThrowsIfEmpty(this string s, string msg = "") =&gt;
        !string.IsNullOrWhiteSpace(s) ? s : throw new ArgumentException(msg);

    public static string EmptyIfNull(this string s) =&gt; s ?? "";
    public static string NullIfEmpty(this string s) =&gt; !string.IsNullOrWhiteSpace(s) ? s : null;

    ... et cetera
}

</code></pre>

<p>Some other thoughts:</p>

<ol>
<li>Replacing empty/whitespace strings with <code>null</code> does not look like a great idea to me. Because, well, the <code>null</code> and the <code>NullReferenceException</code>. An empty string looks like a safer alternative.</li>
<li>I'd avoid property setters and mutating a state, even if setters protect invariants. Much simpler, shorter, and safer alternative:</li>
</ol>

<pre><code>public class Name
{
    public string First { get; }
    public string Middle { get; }
    public string Last { get; }

    public Name(string first, string middle, string last)
    {
        First  = first.NullIfEmpty();
        Middle = middle.ThrowsIfNull("middle name must not be null");
        Last   = last.ThrowsIfEmpty("last name must not be empty");
    }
}
</code></pre>

<p>Shorter code, one single place for all validations, never ever get an object in an inconsistent state, no issues with concurrent mutations.</p>
    </div>