<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Consider <code>const char *</code></strong></p>

<p><code>const char *source</code> allows the function to be used with <code>const</code> strings, better conveys code's functionality and more readily allows for optimizations.</p>

<pre><code>// int trimcpy(char *destination, char *source, size_t len) {
int trimcpy(char *destination, const char *source, size_t len) {
</code></pre>

<p><strong>Undefined behavior</strong></p>

<p><code>trimcpy()</code> begins by examining later elements of <code>source[]</code> even though they are not known to have been assigned.  The string may not be as long as <code>len</code>.</p>

<pre><code>int trimcpy_alt(char *destination, char *source, size_t len) {
   // Suggest memchr() here rather than strlen() to not look too far.
   char *null_character_pos = memchr(source, '\0', len);
   if (null_character_pos) len = null_character_pos - source;
   ...
</code></pre>

<p><strong>Undefined behavior 2</strong></p>

<p>In a selective case of an empty file, the first call to <code>fgets()</code> returns <code>NULL</code> and then the following <code>fputs(out, wfp);</code> is UB as <code>out</code> contents are not initialized.  Add initialization or assignment.</p>

<pre><code>char out[BUFFER_SIZE];
out[0] = '\0'; // add
</code></pre>

<p><strong>Not trimming end spaces before \n</strong></p>

<p><code>trimcpy()</code> does not trim spaces just before <code>'\n'</code>.  I suspect this in not in line with OP's goals.</p>

<p><strong>Avoid redundant information</strong></p>

<p>Redundant information takes more work to maintain.   Consider dropping the <code>3</code></p>

<pre><code>// #define COLS 3
size_t RANGES[][2] = {{0, 6}, {6, 20}, {29, 3}};
#define COLS (sizeof RANGES/sizeof RANGES[0])
</code></pre>

<hr>

<p>Minor things:</p>

<p><strong>Mixing types</strong></p>

<p>Little reason to mix <code>size_t</code> and <code>int</code> types here for array indexing and sizing.  Recommend to  use just one: <code>size_t</code> (my preference) or 2) <code>int</code>, but not  both.</p>

<pre><code>// From
int trimcpy(char *destination, char *source, size_t len) {
  ...
  int i = 0;
  while (i&lt;len &amp;&amp; *source != '\0') {

// To
size_t trimcpy(char *destination, char *source, size_t len) {
  ...
  size_t i = 0;
  while (i&lt;len &amp;&amp; *source != '\0') {
</code></pre>

<p><code>main()</code>  </p>

<pre><code>  // int p = 0;
  size_t p = 0;
</code></pre>

<hr>

<p><strong>Subtraction with unsigned types</strong></p>

<p>If above <code>size_t</code> employed, consider the 2 below:  Which works well should a later version of code surprisingly  define  <code>#define BUFFER_SIZE 19</code>?</p>

<pre><code>if (p &gt; BUFFER_SIZE - 20) {
if (p + 20 &gt; BUFFER_SIZE) {
</code></pre>

<blockquote class="spoiler">
  <p> The first is the same as <code>if (p &gt; SIZE_MAX) {</code> or <code>if (0) {</code></p>
</blockquote>
    </div>