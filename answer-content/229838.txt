<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I largely re-written the error handling functions. The reasons were multiple. Mostly, I needed greater flexibility, reliability and even a bit more general-purpose use.</p>

<hr>

<h2>File <code>func-color_support</code></h2>

<p>First, I created this separate file for defining colors and determining if terminal colors are supported:</p>

<pre class="lang-sh prettyprint-override"><code>#!/bin/sh


# do not warn that variables appear unused
# this file is being sourced by other scripts
# link to wiki: https://github.com/koalaman/shellcheck/wiki/SC2034
# shellcheck disable=SC2034


### REQUIREMENTS
# none


### METHODS
## tput_colors_supported
# bool function - getter of the terminal color support
# if true, then this code defines global color constants


tput_colors_supported ()
{
    command -v tput &amp;&amp; tput bold &amp;&amp; [ "$(tput colors)" -ge 8 ]
} &gt; /dev/null 2&gt;&amp;1


if tput_colors_supported; then

    # tput special sequences
    number_of_colors=$(tput colors)
    color_reset=$(tput sgr0)
    bold_text=$(tput bold)

    # definitions of basic colors with bold test
    color_red=${bold_text}$(tput setaf 1)
    color_green=${bold_text}$(tput setaf 2)
    color_yellow=${bold_text}$(tput setaf 3)
    color_blue=${bold_text}$(tput setaf 4)
    color_magenta=${bold_text}$(tput setaf 5)
    color_cyan=${bold_text}$(tput setaf 6)
    color_white=${bold_text}$(tput setaf 7)

else

    number_of_colors=0; color_reset=; bold_text=; color_red=; color_green=; color_yellow=; color_blue=; color_magenta=; color_cyan=; color_white=

fi
</code></pre>

<ul>
<li><p>I would like to pinpoint <strong>determining the number of colors available</strong>:</p>

<blockquote>
<pre><code>[ "$(tput colors)" -ge 8 ]
</code></pre>
</blockquote></li>
<li><p>I was however puzzled by some older articles reporting that <strong><code>tput colors</code> returns a bad number on their systems</strong>, so just be aware of it.</p></li>
<li><p>Additionally, notice that <strong>I redirected all output from the function to the <em>black hole</em> without using <code>exec</code></strong>. I had some problems with it ever since, I recommend to avoid it, if possible.</p></li>
<li><p>Plus, note that I <strong>removed the <code>readonly</code> keyword, as it can cause problems when re-sourcing</strong> this file.</p></li>
<li><p>Finally, if you are curious as to why I define all of the <strong>empty variables in the <code>else</code>, that is because I use <code>set -u</code></strong> in the main script.</p></li>
</ul>

<hr>

<h1>The main functions</h1>

<h2>File <code>func-print_error_and_exit_script</code></h2>

<pre class="lang-sh prettyprint-override"><code>#!/bin/sh


### REQUIREMENTS
# func-color_support

. /path/to/func-color_support


### METHODS

## print_error
# prints custom heading and error message without exiting the script; in color, if available

## print_error_and_exit_script
# direcly uses print_error, but this one exits the script with customizable exit code (optional 3rd argument)


print_error ()
# expected arguments:
# $1 = error heading (string)
# $2 = error message (string)
{
    # check if exactly 2 non-empty arguments have been passed
    # if not, print out an input check error without colors
    if [ $# -ne 2 ] || [ -z "$1" ] || [ -z "$2" ]; then
        # $1 and $2 are to be shown literally in this message
        # link to wiki: https://github.com/koalaman/shellcheck/wiki/SC2016
        # shellcheck disable=SC2016
        printf 'print_error() input check\n\nWrong number or empty arguments have been passed to the function: %s\n\nExpected the following 2:\n$1 - error heading\n$2 - error message\n' $#
        return 1
    fi

    error_heading=$1
    error_message=$2

    printf '%b\n\n%b\n\n%b\n' \
        "Error heading: ${color_yellow}${error_heading}${color_reset}" \
        "Error message: ${error_message}" \
        "${color_red}Fatal error occurred.${color_reset}"
} &gt;&amp;2


print_error_and_exit_script ()
# expected arguments:
# $1 = error heading (string)
# $2 = error message (string)
# $3 = return code (number) - optional, if not given, 1 is used
{
    # check if 2 (or 3) non-empty arguments have been passed
    # if not, print out an input check error without colors
    if { [ $# -ne 2 ] &amp;&amp; [ $# -ne 3 ]; } || [ -z "$1" ] || [ -z "$2" ]; then
        # $1, $2, $3 are to be shown literally in this message
        # link to wiki: https://github.com/koalaman/shellcheck/wiki/SC2016
        # shellcheck disable=SC2016
        printf 'print_error_and_exit_script() input check\n\nWrong number or empty arguments have been passed to the function: %s\n\nExpected the following 2 or 3:\n$1 - error heading (string)\n$2 - error message (string)\n$3 - return code (number) - optional, if not given, 1 is used\n' $#
        return 1
    fi

    if [ $# -eq 2 ] || [ -z "$3" ]; then
        return_code=1
    elif [ -n "$3" ] &amp;&amp; ! [ "$3" -eq "$3" ] 2&gt; /dev/null; then
        printf 'print_error_and_exit_script() input check\n\nThird argument is expected to be a return code, i.e. a number.\nBut something else was passed instead: %s\n' "$3"
        return 1
    else
        return_code=$3
    fi

    print_error "$1" "$2"

    exit "$return_code"

} &gt;&amp;2
</code></pre>

<ul>
<li><p>Again, as explained above, <strong>I avoided <code>exec</code></strong>, and redirected both functions' output with <code>&gt;&amp;2</code>.</p></li>
<li><p>Considering <strong>my need sometimes to only print error and not exit script</strong>, the job has been divided into two functions:</p>

<ul>
<li><p><code>print_error</code>: <strong>prints custom heading and error message without exiting the script</strong>; in color, if available</p></li>
<li><p><code>print_error_and_exit_script</code>: direcly uses print_error, but <strong>this one exits the script with customizable exit code (optional 3rd argument)</strong></p></li>
</ul></li>
</ul>

<hr>

<h2>Visual example</h2>

<p>This is just so you see it in action, <code>sudoedit_run</code> is a function utilizing <code>print_error</code>.</p>

<p><a href="https://i.stack.imgur.com/rpcA5.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/rpcA5.png" alt="sudoedit_run--errors"></a></p>
    </div>