<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Because of the 2 imbricated <code>for</code> loops here:</p>

<blockquote>
<pre><code> for (int intI = 0; intI &lt; d; intI++) {   
   for (int intK = 0; intK &lt; a.Length; intK++) {
               ...
   }
 }
</code></pre>
</blockquote>

<p>your code performs <code>d * a.Length</code> actions - which takes quadratic time when <code>d</code> is near <code>a.Length/2</code>. </p>

<p>So, we may ask, <strong>can we do better</strong> ?</p>

<p>The answer is yes. There is a linear-time solution. It is as follows:</p>

<ol>
<li>"mirror" the first <code>d</code> elements</li>
<li>mirror the whole array</li>
<li>mirror the <code>size-d</code> first elements.</li>
</ol>

<p>Implementation of <code>mirror</code> (reverse an array) is left to the reader.</p>

<p>Linear time complexity. 0(1) extra room needed (loop variable and temporary for exchange).</p>

<p>So it is clearly an <strong>improvement</strong> on the original version.</p>
    </div>