<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>General</h3>
<ul>
<li>You are using <code>using</code> statements which is always good.</li>
<li>You have small and well named methods which is good as well but the <code>StripHighBitCharacters()</code> method doesn't do what the name implies. The <code>BuildClearString()</code> method is doing what <code>StripHighBitCharacters()</code> should do based on its name.</li>
<li>The method parameter of <code>StripHighBitCharacters</code> is poorly named. Why don't you name it <code>fileName</code> ?</li>
<li>You should be consistent with the usage of the <code>var</code> type. Why didn't you use it e.g for the <code>string writeFile</code> ?</li>
</ul>
<hr>
<p><a href="https://codereview.stackexchange.com/users/85680/1201programalarm">@1201ProgramAlarm</a> mentioned in <a href="https://codereview.stackexchange.com/a/186723/29371">his/her answer</a> reusing the <code>StringBuilder</code> which is the way to go for a performance boost but I would take this further.</p>
<ul>
<li><p>I would initialize the <code>StringBuilder</code> with a starting capacity of at least 4 kb, because usually your filesystem is storing its data in 4 kb blocks. But because you expect to get real big files you should increase the capacity to e.g 4mb.</p>
</li>
<li><p>Instead of creating a new file with a filename of <code>fn + "B"</code> you should use
<code>Path.GetTempFileName()</code> and after the content is written delete the original and move the temp file to the original destination.</p>
</li>
</ul>
<p>Implementing the mentioned points will lead to</p>
<pre><code>private const int maxCapacity = 4096 * 1024;
private StringBuilder sb = new StringBuilder(maxCapacity);

public void CleanFile(string fileName)
{

    var tempFileName = Path.GetTempFileName();
    using (var reader = new StreamReader(fileName))
    using (var writer = new StreamWriter(tempFileName))
    {
        sb.Length = 0;
        while (!reader.EndOfStream)
        {
            var line = reader.ReadLine();
            if (line.Length + sb.Length &gt; maxCapacity)
            {
                writer.Write(sb.ToString());
                sb.Length = 0;
            }
            StripHighBitCharacters(line);

        }
    }
    
    File.Delete(fileName);
    File.Move(tempFileName, fileName);
}

public void StripHighBitCharacters(string value)
{
    foreach (var c in value.Where(c =&gt; c &gt; 31 &amp;&amp; c &lt; 176))
    {
       sb.Append(c);
    }

    sb.AppendLine();
}
</code></pre>
<p>After using poor man profiling (using Stopwatch) I figured that the provided <code>StripHighBitCharacters()</code> method using linq took around 39 seconds.</p>
<p>Using just a loop and an <code>if</code> like so</p>
<pre><code>public void StripHighBitCharacters(string value)
{
    foreach (var c in value)
    {
        if (c &gt; 31 &amp;&amp; c &lt; 176)
        {
            sb.Append(c);
        }
    }

    sb.AppendLine();
}  
</code></pre>
<p>the measurements went better. It took only 22 seconds.</p>
<p>Both tests had been done using a file with 1.3 GB.</p>
    </div>