<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Opening comments</h1>

<p>I'm not a Haskell expert, but I hope I can offer some helpful comments and critiques.</p>

<p>Overall, I think this is mostly good and idiomatic code. You make good use of pattern matching and have pretty clean definitions of your code.</p>

<p>I'm going to first address style and your questions. I'll then address the performance issue, since it actually isn't that hard to fix.</p>

<h1>Style</h1>

<p>I think most of your style is fine. I just personally prefer to nest <code>where</code> clauses like so</p>

<pre class="lang-hs prettyprint-override"><code>foo x y = x' + y' 
  where
    x' = 2*x
    y' = 2*y
</code></pre>

<p>How you do it is up to you.</p>

<h1>Using <code>Num</code></h1>

<p>I don't think there's much wrong with using <code>Num</code> for <code>FibNum</code> to make things easier. I would just go ahead and implement <code>abs</code> and <code>signum</code> if you do, since they aren't too difficult, although you don't <em>have</em> to since you don't export <code>FibNum</code> (which I think is good). However, <code>Num</code> is just an interface and doesn't officially make any promises about how its operations behave (i.e. it doesn't have any laws).</p>

<p>The data type you've defined is the <a href="https://en.wikipedia.org/wiki/Ring_(mathematics)#Basic_examples" rel="nofollow noreferrer">Ring</a>* Z[√5]. I found a library that has a <a href="https://hackage.haskell.org/package/numeric-prelude-0.4.3.1/docs/Algebra-Ring.html" rel="nofollow noreferrer"><code>Ring</code></a> type class which you could implement for your datatype. You could then use this type class's implementation of <code>(^)</code> instead of <code>pow</code> for a speedup (see my comments regarding performance).</p>

<p>Whether you want to be more precise like this is up to you. <code>Num</code> unofficially is a ring, too, and is the more common type class.</p>

<p>As an addendum, since you are using division, you may wish to consider changing your <code>Integer</code>s to <code>Rational</code>s, which would make your type the <a href="https://en.wikipedia.org/wiki/Quadratic_field" rel="nofollow noreferrer">Quadratic Field</a> Q[√5]. There is also a <a href="https://hackage.haskell.org/package/numeric-prelude-0.4.3.1/docs/Algebra-Field.html" rel="nofollow noreferrer"><code>Field</code></a> typeclass.</p>

<p>* Don't worry too much about the abstract algebra here if you aren't familiar. What's more important is understanding the interfaces and the promises they make/laws they obey. For example, the order of operation of addition can be rearranged (known as commutativity) in a Ring and Field. You don't need to know anything more than how to implement the functions required, make sure they satisfy the laws, and how to use the interface (I don't <em>really</em> remember my rings and fields anyway, I just googled around a bit). </p>

<h1>Using <code>fromJust</code></h1>

<p>I think that the usage of <code>fromJust</code> is unnecessary and serves to undermine the fact that <code>divR5</code> returns a <code>Maybe</code>. Below, I offer two alternative options.</p>

<p>I would also consider either renaming <code>divR5</code> to indicate that it doesn't actually divide an arbitrary <code>FibNum</code> by √5, leaving a comment to that effect, or defining it in the <code>where</code> clause of <code>fibo</code> (which is what I would do). If you define it in the <code>where</code> clause, you can't accidentally misuse it elsewhere.</p>

<h2>Return a <code>Maybe</code></h2>

<pre class="lang-hs prettyprint-override"><code>fiboMaybe :: Integer -&gt; Maybe Integer
fiboMaybe n = (`div` p2) &lt;$&gt; divR5 nom
  where
    nom = pow fphi n - pow fpsi n
    p2  = 2^n
</code></pre>

<p>I like to use the infix form of <code>fmap</code> (and also I prefer to use <code>div</code> in infix), but you can also explicitly <code>case</code> on the result or use <code>do</code> notation.</p>

<h2>Give a better error message</h2>

<p>If you aren't going to return a <code>Maybe</code>, then you might as well provide a more informative error message than <code>fromJust</code>'s.</p>

<pre class="lang-hs prettyprint-override"><code>fiboError :: Integer -&gt; Integer
fiboError n = divR5 nom `div` p2
  where
    nom = pow fphi n - pow fpsi n
    p2  = 2^n
    divR5 (FibNum 0 n) = n
    divR5 _            = error "fiboError: got nonzero integer part in divR5 (this shouldn't happen)"
</code></pre>

<h2>Improving efficiency</h2>

<p>It turns out that it's not too hard to improve your efficiency. If you implement the <code>Ring</code> or <code>Field</code> type class and use the functions provided there, you should see a major speedup. But if you don't want to, we can fix the speed in only a couple lines of code.</p>

<p>The inefficiency in your code comes from your implementation of <code>pow</code>, which, while correct, takes linear time. You can reduce this significantly. Here's how we can fix it. We're going to use the <a href="https://hackage.haskell.org/package/base-4.12.0.0/docs/Data-Monoid.html#t:Product" rel="nofollow noreferrer"><code>Product</code> Monoid</a> and the function <a href="https://hackage.haskell.org/package/base-4.12.0.0/docs/Data-Semigroup.html#v:mtimesDefault" rel="nofollow noreferrer"><code>mtimesDefault</code></a> from <a href="https://hackage.haskell.org/package/base-4.12.0.0/docs/Data-Semigroup.html" rel="nofollow noreferrer"><code>Data.Semigroup</code></a>.</p>

<p>If you aren't familiar with the abstract algebra terminology here, ignore that junk for a second. Here's the lowdown: we're going to take advantage of the fact that for your datatype, multiplication is associative. What does that mean? It means that</p>

<pre><code>(x * y) * z == x * (y * z)
</code></pre>

<p>i.e. we can move around parentheses in a product without changing its value. If you can do that, you have something known as a Semigroup. That's all a Semigroup is! A Monoid is a Semigroup where you know there's some element that does nothing when you multiply it. In this case, that element is 1:</p>

<pre><code>1 * x == x * 1 == x
</code></pre>

<p>If you have a <code>Monoid</code> (which <code>FibNum</code> is with respect to the multiplication operation) and want to multiply a number by its self <code>n</code> times, <code>mtimesDefault :: (Integral b, Monoid a) =&gt; b -&gt; a -&gt; a</code> does this more efficiently than the naive solution.</p>

<p>The <code>Product</code> wrapper type takes a <code>Num a</code> and uses its multiplication operation as the Monoid operation. So to get a faster <code>pow</code>, here's all the code we have to write:</p>

<pre class="lang-hs prettyprint-override"><code>import Data.Monoid    (Product(..))
import Data.Semigroup (mtimesDefault)

powFast :: Integral a =&gt; FibNum -&gt; a -&gt; FibNum
powFast n exp = getProduct $ mtimesDefault exp (Product n)
</code></pre>

<p>If we replace <code>pow</code> with <code>powFast</code>, your implementation becomes much faster than the "standard" approach too!</p>

<p>Of course, it isn't too hard to write a faster <code>pow</code> function by hand. It's just neat that Haskell has built-in machinery that lets you avoid doing so. If you wanted to figure out how to do it faster by hand, I would hint you to think about exponentiation of regular numbers.</p>

<p>Say I asked you to compute <code>2^50</code> by hand. I claim you don't need to take 50 multiplications to give me an answer. Try and think about how you would do it efficiently, taking advantage of the fact that you're only ever multiplying by 2 and that you multiplication is associative.</p>

<p>Here's a hint:</p>

<blockquote class="spoiler">
  <p> Think about multiplying exponents with the same base. <code>2^x * 2^y = 2^(x+y)</code>. What about <code>2^x * 2^x</code>?</p>
</blockquote>

<p>and another:</p>

<blockquote class="spoiler">
  <p> For example, suppose you get to <code>2^4 = 16</code>. From here, if you multiply <code>16</code> by itself, you'll get <code>16 * 16 = (2^4) * (2^4) = 2^(2*4) = 2^8</code>. That saved 3 multiplications compared to the naive method of multiplying by 2!</p>
</blockquote>

<p>You can find the answer in the implementation of <a href="https://hackage.haskell.org/package/base-4.12.0.0/docs/src/Data.Semigroup.Internal.html#stimesDefault" rel="nofollow noreferrer"><code>stimesDefault</code></a>.</p>
    </div>