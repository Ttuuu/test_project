<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Update url</h1>

<p>UserScripts have the magical ability to update themselves if you provide a link to a raw version of your script as a UserScript header:</p>

<p>Note: You actually have to increase the version, or it won't update.</p>

<blockquote>
<pre><code>// ==UserScript==
// @name         Reputation Hider
// @namespace    http://gihub.com/Vogel612/ReputationHider
// @version      0.1
// @downloadURL
// @updateURL
</code></pre>
</blockquote>

<hr>

<h1>Method</h1>

<p>I'm not particularly a fan of your method.</p>

<p>Checking for DOM updates before scanning through everything all over again.</p>

<p>It would make more sense to simply inject a stylesheet to override SE's stylesheets.</p>

<p>Much more labour performant.</p>

<hr>

<h1>ES6 features</h1>

<p>I like the use of ES6 in your code, but you haven't used it to its full potential: </p>

<blockquote>
<pre><code>let slice = function(collection) {
  return [].slice.call(collection);   
}
</code></pre>
</blockquote>

<p>Instead of using the old <code>function(collection){}</code> way, you can use <code>(collection) =&gt; ()</code>:</p>

<pre><code>let slice = (collection) =&gt; [].slice.call(collection)
</code></pre>

<p>The same thing applies to the function in your main loop.</p>

<hr>

<h1>Slicing and Dicing</h1>

<p>Currently, you only use <code>slice</code> with your element selection.<br>
You should combine the two!</p>

<blockquote>
<pre><code>slice(document.getElementsByClassName(clazz))
</code></pre>
</blockquote>

<pre><code>let fetchElements(clazz) =&gt; [].slice.call(document.getElementsByClassName(clazz))
</code></pre>

<p>Or hey, let's take it a step further and do some concatenation magic:</p>

<pre><code>let fetchElements = (clazzArrey) =&gt;
    clazzArrey.map((clazz) =&gt; [].slice.call(document.getElementsByClassName(clazz)))
</code></pre>

<p>Alternatively, you can use string concatenation to make one huge selector string and use <code>querySelectorAll</code> as Joseph described.</p>

<p>I find that <code>querySelector*</code> can have worse performance, but its always been edge cases that trigger that for me.</p>

<hr>

<h2>Future gazing</h2>

<p>This isn't usually a review point I add, however, I think you could add support for other fields, and make a handy dandy dialog box to choose which you want to hide. That'd be a StackApps worthy creation in my eyes.</p>
    </div>