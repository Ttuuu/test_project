<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The <code>static</code> declaration of each of the functions is good, especially if the code is merged into a larger program.</p>
<h2>Error Checking</h2>
<p>When using any memory allocation function such as <code>calloc(size_t number_of_items, size_t size_of_item)</code>, the return value should be checked to see if it <code>NULL</code>. If the function fails it returns <code>NULL</code>. Accessing memory through a null pointer results in unknown behavior. The program could crash or corrupt the data in the program.</p>
<p>While the code is performing error checking on the first <code>scanf</code> which reads the number of tests, the input from the second <code>scanf</code> is not checked. This may lead to errors in the processing of the strings.</p>
<h2>Magic Numbers</h2>
<p>The assert that follows the first <code>scanf</code> contains the number <code>100001</code>. It isn't clear in the program why the maximum number of tests is <code>100001</code>. There is a symbolic constant for this number defined (<code>STRING_LENGTH_MAX</code>) but the maximum length of the strings shouldn't have anything to do with the maximum number of test cases.</p>
<h2>Complexity</h2>
<p>Most of the functions are a reasonable size and complexity, but the function <code>main()</code> is too complex (does too much). As programs grow in size, the use of <code>main()</code> should be limited to calling functions that parse the command line, calling functions that set up for processing, calling functions that execute the desired function of the program, and calling functions to clean up after the main portion of the program.</p>
<p>There is also a programming principle called the Single Responsibility Principle that applies here. The <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" rel="nofollow noreferrer">Single Responsibility Principle</a> states:</p>
<blockquote>
<p>that every module, class, or function should have responsibility over a single part of the functionality provided by the software, and that responsibility should be entirely encapsulated by that module, class or function.</p>
</blockquote>
<p>The contents of the <code>while(test--)</code> loop should be in its own function, and that function should probably be broken up into 2 or 3 functions as well.</p>
<p>Smaller functions are easier to write, debug, read and maintain. In some instances they may be reused as well.</p>
<h2>Use the Native Word Size of the Processor</h2>
<p>The native word size of the processor will provide the best performance when the code is executing. Using a smaller sized word can slow down the processing; most processors today have a word size of 64 bits, so forcing <code>uint32_t</code> may be counter-productive. If the variable should be unsigned, just use the type declaration <code>unsigned</code>; if the variable can take on negative values use <code>int</code>. This code doesn't need to use smaller word sizes.</p>
<p>The repeated use of <code>calloc()</code> may slow down the program.  It might be better to use arrays rather than allocated memory.</p>
<h2>Possible Program Structure</h2>
<p>As C programs get larger, it becomes necessary to break files up by function into modules. Most of the functions in this program can be moved into another C file, with a header file providing the public interfaces. In this case, there would be one public interface called by <code>main()</code> which would be the execution of each test case (suggested above, but not yet written). This would remove all of the function prototypes at the top of the file.</p>
    </div>