<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As mentioned by @IEatBagels, it seems that you didn't understand the question. You're not allowed to split numbers into digits. You're only allowed to reorder whole numbers in order to get the maximum joined number. The output for <code>[0, 12]</code> should be <code>120</code>, not <code>210</code>!</p>

<p>Others answers are proud to be O(n) or O(n log n), but well, they're probably wrong.</p>

<p>So I'm proud to present this O(n!) solution:</p>

<pre><code>from itertools import permutations

def joined_number(numbers):
    return int(''.join(str(number) for number in numbers))

max(permutations([20,210,32]), key= joined_number)
# (32, 210, 20)

max(permutations([1, 19, 93, 44, 2885, 83, 379, 3928]), key= joined_number)
# (93, 83, 44, 3928, 379, 2885, 19, 1)
</code></pre>

<p>The performance is horrible and it will fail for lists longer than ~10 elements, but at least you can play with it in order to understand what the <em>real</em> question was.</p>

<p>You can then try to look for the sort which could give you the correct answer.</p>
    </div>