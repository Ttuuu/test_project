<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1><code>Buffer&lt;T&gt;</code></h1>

<p>This class seems fine for the most part. Some small issues:</p>

<ul>
<li><p>The <code>while(true)</code> loops in <code>insert(T)</code> and <code>remove()</code> only ever run one iteration. Those loops can be replaced by their body.</p></li>
<li><p><code>add</code> calls <code>m_buffer.push_back(x)</code>, which might not compile for types without a copy constructor. Try <code>m_buffer.push_back(std::move(x))</code> instead: That will move if possible, and fall back to copy if not.</p></li>
<li><p><code>m_buffer</code> is treated like a stack (<code>push_back</code> and <code>pop_back</code> are used only), so newest insertions get removed first. Maybe a queue was intended (using e.g. <code>push_front</code> and <code>pop_back</code>)?</p></li>
<li><p>The constructors initialize <code>Buffer&lt;T&gt;::m_size</code> (an <code>unsigned int</code>) with a signed value (<code>1</code> or <code>int s</code>, respectively).</p></li>
<li><p><code>notify_all()</code> is called on the condition variable. This would wake up every thread waiting on it - but very likely only one would actually be able to do anything. <code>notify_one()</code> would likely be a better fit.</p></li>
<li><p>The <code>notify_all</code> calls on the condition variable aren't needed every time: <code>remove</code> only needs to notify if other threads might be waiting to <code>add</code> elements, which is only when <code>m_buffer.size() == m_size - 1</code> after the call to <code>pop_back</code>. Similarly, <code>add</code> only needs to notify if <code>m_buffer.size() == 1</code> after <code>push_front</code>.</p></li>
<li><p><code>Buffer&lt;T&gt;::m_size</code> doesn't represent the current size of the buffer (= number of elements contained), but the maximum capacity. Maybe <code>m_capacity</code> would be a better name.</p></li>
<li><p><code>Buffer</code> itself isn't very descriptive of what it actually does. <code>ConcurrentQueue</code>, <code>MessageQueue</code> or similar would better represent its behavior.</p></li>
<li><p>While <code>add</code> and <code>remove</code> by themselves are fine names, common expectation for queue-like types are <code>push</code> and <code>pop</code>.</p></li>
<li><p>This actually is a working queue for n producers and m consumers. It seems a bit overkill for a 1 producer + 1 consumer scenario.</p></li>
</ul>

<p>Furthermore, some improvements could be made:</p>

<ul>
<li><p><code>bool try_push(T&amp;&amp;)</code>/<code>bool try_push(const T&amp;)</code>/<code>bool try_pop(T&amp;)</code> member functions could be added that return early if the operation would otherwise have to wait.</p></li>
<li><p><code>push</code> could be overloaded for <code>const T&amp;</code> and <code>T&amp;&amp;</code> to enable better performance for moveable types.</p></li>
</ul>

<h1><code>Producer&lt;T&gt;</code>/<code>Consumer&lt;T&gt;</code></h1>

<p>Both of these don't really seem necessary. Generally, its unlikely that someone will ever need generic producers/consumers (other than maybe for testing purposes), so I won't go into too much detail</p>

<ul>
<li><p>Default constructors initialize <code>m_buf</code> to <code>nullptr</code>, but this is never checked afterwards. Either add checks for <code>nullptr</code> in the other member functions, or simply remove the default constructor.</p></li>
<li><p>Similarly, the <code>buf</code> parameter of the other constructor can be <code>nullptr</code>. If <code>m_buf</code> should never be <code>nullptr</code> (as the member functions seem to assume), simply make <code>buf</code> a <code>Buffer&lt;T&gt;&amp;</code> instead. <code>m_buf</code> could then be initialized to <code>&amp;buf</code> - but it might be more reasonable to change <code>m_buf</code> to <code>Buffer&lt;T&gt;&amp;</code>, too.</p></li>
<li><p>Access to <code>std::cout</code> isn't synchronized. In some cases, this means the consumer might print before the producer does.</p></li>
<li><p>There is no way to stop a producer/consumer (other than forcefully terminating the program).</p></li>
<li><p>The member <code>m_id</code> is never used.</p></li>
<li><p>The second constructor takes a <code>std::string&amp;&amp; id</code> parameter - but initializes <code>m_id</code> without moving - which creates a copy. Generally, it would be expected that the object <code>id</code> refers to would be moved from after construction.</p></li>
</ul>

<h1>General stuff</h1>

<ul>
<li><p><code>main</code> never checks if <code>argv[1]</code> is actually valid.</p></li>
<li><p>Using <code>struct data</code> when referencing the type isn't necessary in C++, just <code>data</code> suffices. So <code>typedef struct data elem_t;</code> could be simplified to <code>typedef data elem_t;</code>, or with a more modern approach, <code>using elem_t = data;</code>. (The <code>struct data</code> would be necessary in C, but this code will never interact with C as C doesn't support templates anyways.)</p></li>
<li><p>Many places use parentheses to initialize objects, like <code>std::unique_lock&lt;std::mutex&gt; locker(m_mtx);</code>. Prefer braces <code>{}</code> instead: In the example, if <code>m_mtx</code> could be interpreted as a type, then the compiler would be forced to make <code>locker</code> a function declaration. Using braces would prevent that from happening.</p></li>
<li><p>Prefer the utilities in the <code>&lt;random&gt;</code> header for generating random numbers, as <code>std::rand</code> is kinda terrible.</p></li>
<li><p>There's no need to create <code>buffer</code>, <code>p</code> and <code>c</code> on the heap (inside <code>main</code>). Using local variables would be just fine. (Also, they never get <code>delete</code>d properly. If allocation on the heap is absolutely needed, prefer using smart pointers like <code>std::unique_ptr</code> or <code>std::shared_ptr</code>.)</p></li>
<li><p>I cannot think of a 1 producer/1 consumer scenario in which threads are necessary: Most could be simplified to this pseudocode:</p>

<pre><code>int main() {
    while(keep_running()) {
        consume_one(produce_one());
    }
}
</code></pre></li>
</ul>
    </div>