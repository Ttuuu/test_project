<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The main problem is here:</p>

<pre><code>for (var i = 0; i &lt; regText.length; i++) {
  // ...
  if (normal.includes(sliced)) {
    newtext[0] += [...fonts.font24][indexed];
    newtext[1] += [...fonts.font15][indexed];
    newtext[2] += [...fonts.font26][indexed];
    // many more
</code></pre>

<p>For <em>every character</em> of the input, you're spreading <em>every font</em> into a new array. With 28 fonts and 40 characters, that's 1120 arrays that need to be created. before <code>remap</code> is done - and each of those arrays is a font, so it has to iterate through all characters in the font for each such array.</p>

<p>If the <code>fonts.font</code> properties are array-like structures, there should be no need to spread:</p>

<pre><code>newtext[0] += fonts.font24[indexed];
newtext[1] += fonts.font15[indexed];
newtext[2] += fonts.font26[indexed];
</code></pre>

<p>If they're <em>not</em> array-like structures, and you really do have to invoke their iterators, invoke the iterators <em>once</em>, at the beginning of the app, rather than on every new input, for every character, see the next code block.</p>

<p>In order to have the <code>fontArrays</code> be persistent over the lifetime of the app, but still only scoped to the <code>remap</code> function, you can make it into an IIFE:</p>

<pre><code>remap = (() =&gt; {
  const fontArrays = [];
  for (let i = 0; i &lt; 36; i++) {
    fontArrays.push([...fonts['font' + i]]);
  }
  return () =&gt; {
    const newtext = Array(51).fill("");
    // ...
  };
})();
</code></pre>

<p>Then, replace the lines like</p>

<pre><code>newtext[0] += [...fonts.font24][indexed];
newtext[1] += [...fonts.font15][indexed];
newtext[2] += [...fonts.font26][indexed];
</code></pre>

<p>with</p>

<pre><code>newtext[0] += fontArrays[24][indexed];
newtext[1] += fontArrays[15][indexed];
newtext[2] += fontArrays[26][indexed];
</code></pre>

<p>If at all possible, it would also be good to change the definition of your <code>fonts.font#</code> properties such that they're an array of fonts, rather than an object of numeric-indexed properties. That is, to reference a font, it'd be nice to be able to do</p>

<pre><code>fonts[24]
</code></pre>

<p>instead of</p>

<pre><code>fonts.font24
</code></pre>

<p>Other possible improvements to the code:</p>

<p><a href="https://medium.com/javascript-scene/javascript-es6-var-let-or-const-ba58b8dcde75" rel="nofollow noreferrer">Always use <code>const</code></a> when possible, never use <code>var</code>, use <code>let</code> only when <code>const</code> can't be used - <code>const</code> makes the code more readable, when a reader can be sure that a variable name won't be reassigned.</p>

<p>There's no need to use a template literal to interpolate a single variable and nothing else, as you're doing with:</p>

<pre><code>let regText = `${this.state.inputdata}` != "" ? `${this.state.inputdata}` : "example"
</code></pre>

<p>Given how you're using it, it looks like <code>inputdata</code> it's already a string, so instead use</p>

<pre><code>const regText = this.state.inputdata || 'example';
</code></pre>

<p>(if it's not already a string, call <code>String</code> on it: <code>String(this.state.inputdata) || 'example'</code>)</p>

<p>If you're going to use semicolons (which is a great idea unless you're determined <em>not</em> to use them and are experienced enough to avoid ASI pitfalls), best to use them everywhere - it's good to pick a style and be consistent. Consider using a linter like <a href="http://eslint.org/" rel="nofollow noreferrer">ESLint</a>. (If you don't, and you accidentally miss adding a semicolon or few, you'll occasionally run into <a href="https://stackoverflow.com/questions/38050219/es6-array-destructuring-weirdness">weird bugs</a>)</p>

<p><code>String.prototype.includes</code>, like <code>indexOf</code>, has <code>O(n)</code> complexity. The interpreter has to search through <em>every character</em> of the string to see if there's a match. Since you're already checking <code>normal.indexOf(sliced)</code>, how about comparing that against <code>-1</code> instead of using <code>.includes</code> to do the same thing again?</p>

<p>You can also use the string iterator instead of a <code>for</code> loop, making the code a bit prettier.</p>

<p>It would also be nice not to have the horribly repetitive listing of indicies to <code>+=</code> to <code>newtext</code>. Consider creating an array of font indicies that are iterated over first, to replace all the <code>+= [...fonts.font24][indexed];</code>. Afterwards, you can insert the <em>other</em> parts which don't conform to that pattern, like for <code>newtext[18]</code> and <code>newtext[26]</code>.</p>

<pre><code>const fontOrder = [24, 15, 26, 23, 14, 5 /* ... */ ];
// these are the characters to for newtext[30] to newtext[43]
const otherChars = ['̲', '̶', '͙', '̟', '̃', /* /* ... */ ]
const otherCharsNewText = otherChars.map(() =&gt; '');

// define these out here so we're not splice-ing on every iteration below
let insertAt18 = '';
let insertAt26 = '';
for (const char of regText) {
  const indexed = normal.indexOf(char);
  if (indexed !== -1) {
    const indexed2 = normal2.indexOf(char)
    const indexed3 = normal3.indexOf(char)

    fontOrder.forEach((fontIndex, i) =&gt; {
      newtext[i] += fontArrays[fontIndex][indexed];
    });

    // Then insert the other parts:
    // use slice instead of concatenating indicies:
    insertAt18 += fontArrays[3].slice(indexed3, indexed3 + 3);
    insertAt26 += fontArrays[2].slice(indexed2, indexed2 + 2);

    otherChars.forEach((char, i) =&gt; {
      otherCharsNewText[i] += normal[indexed] + char;
    });
  } else {
    for (let i = 0; i &lt; 51; i++) {
      newtext[i] += char;
    }
  }
}
// Then insert the insertAt18, insertAt26, and otherCharsNewText into the newtext:
newText.splice(18, 0, insertAt18);
newText.splice(26, 0, insertAt26);
newText.splice(29, 0, ...otherCharsNewText);
</code></pre>
    </div>