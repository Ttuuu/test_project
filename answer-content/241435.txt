<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Using Konrad's recomendations.</p>

<p>Did some more work. Now it runs in 0.03 second on the site. <a href="https://open.kattis.com/problems/rockpaperscissors/statistics" rel="nofollow noreferrer">Rock Paper Scissors Info</a> Currently at position 7 using C++ streams.</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;iomanip&gt;
#include &lt;vector&gt;
#include &lt;unordered_map&gt;
#include &lt;locale&gt;

static int const result[4][4] = {
    //    p      r   s
    { 0, 0,  1, -1},     // paper
    { 0, 0,  0,  0},
    {-1, 0,  0,  1},     // rock
    { 1, 0, -1,  0}      // scissors
};


class FastInt
{
    int&amp;    val;
    public:
        FastInt(int&amp; v): val(v) {}

        friend std::istream&amp; operator&gt;&gt;(std::istream&amp; str, FastInt const&amp; data)
        {
            auto buf = str.rdbuf();

            int c;
            while (std::isspace(c = buf-&gt;sbumpc()))
            {}

            data.val = c - '0';
            while (std::isdigit(c = buf-&gt;sbumpc())) {
                data.val = (data.val * 10) + (c - '0');
            }

            return str;
        }
};

class FastString
{
    char*   val;
    public:
        FastString(char* v): val(v) {}

        friend std::istream&amp; operator&gt;&gt;(std::istream&amp; str, FastString const&amp; data)
        {
            auto buf = str.rdbuf();

            int c;
            while (std::isspace(c = buf-&gt;sbumpc()))
            {}

            data.val[0] = c;
            int loop = 1;
            for (;!std::isspace(c = buf-&gt;sbumpc()); ++loop) {
                data.val[loop] = c;
            }
            data.val[loop] = '\0';

            return str;
        }
};

int main()
{
    //std::chrono::time_point&lt;std::chrono::system_clock&gt; start = std::chrono::system_clock::now();
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(nullptr);

    std::cout &lt;&lt; std::fixed
              &lt;&lt; std::setprecision(3);

    struct T {
        int wins = 0;
        int loss = 0;
    };

    char lineBreak[] = "\0";
    while (true)
    {
        int n = 0;
        std::cin &gt;&gt; FastInt(n);

        if (n == 0) {
            break;
        }

        int k;
        if (std::cin &gt;&gt; FastInt(k))
        {
            std::vector&lt;T&gt; games(n);

            std::cout &lt;&lt; lineBreak;
            lineBreak[0] = '\n';

            for (int gameCount = (k * n * (n -1))/2; gameCount; --gameCount)
            {
                int         p1;
                int         p2;
                char        n1[20];
                char        n2[20];
                if (std::cin &gt;&gt; FastInt(p1) &gt;&gt; FastString(n1) &gt;&gt; FastInt(p2) &gt;&gt; FastString(n2))
                {
                    p1--;
                    p2--;

                    int v = result[n1[0] &amp; 3][n2[0] &amp; 3];

                    if (v != 0)
                    {
                        games[(v == 1) ? p1 : p2].wins++;
                        games[(v == 1) ? p2 : p1].loss++;
                    }
                }
            }

            for (auto const&amp; game: games)
            {
                int numOfWins  = game.wins;
                int numOfGames = game.wins + game.loss;
                if (numOfGames != 0) {
                    std::cout &lt;&lt; (1.0 * numOfWins / numOfGames) &lt;&lt; "\n";
                } else {
                    std::cout &lt;&lt; "-\n";
                }
            }
        }
    }
    //std::chrono::time_point&lt;std::chrono::system_clock&gt; end = std::chrono::system_clock::now();
    //std::cerr &lt;&lt; "Time: " &lt;&lt; std::chrono::duration_cast&lt;std::chrono::milliseconds&gt;(end - start).count() &lt;&lt; "\n";
}
</code></pre>
    </div>