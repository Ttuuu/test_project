<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Valley Girl coding</strong></p>

<p>The valley girls say "for sure, for sure". so does this:</p>

<pre><code>if (PlayerDied() == true)
</code></pre>

<p>Instead:</p>

<pre><code>if(PlayerDied())
</code></pre>

<p>And, not this:</p>

<pre><code>public static bool isMobDead(Mob mob)
{
    if (mob.HP &lt;= 0)
    {
        return true;
    }
    return false;
}
</code></pre>

<p>instead:</p>

<pre><code>public static bool isMobDead(Mob mob) { return mob.HP &lt;= 0; }
</code></pre>

<p>and not this:</p>

<pre><code>if ( weapon.name.ToLower() == weapon_name.ToLower() ) {
   return true;
} else {
   continue;
}
return false;
</code></pre>

<p>instead:</p>

<pre><code>return ( weapon.name.ToLower() == weapon_name.ToLower() );   
</code></pre>

<hr>

<p><strong>Misplaced properties</strong></p>

<pre><code>Battle.isPlayerDead(player)
</code></pre>

<p>isDead belongs in <code>Player</code> class, something like this:</p>

<pre><code>public bool IsDead { get { return hitPoints &lt;= 0; } }
</code></pre>

<p>If a class is "calculating" something about an object using only object-class's properties then it probably belongs in that class in the first place.</p>

<p>Why does a <code>Weapon</code> have it's own weapons? If the idea is for a collection of all weapon types (and associated properties) that exist in the game then make a <code>Weapons</code> (plural) class. And a <code>Player</code> should have <code>Weapons</code> too.</p>

<hr>

<p><strong>Nmng cnvntns</strong></p>

<p>You know these are bad names:  <code>HP</code>, <code>isCrit()</code>, etc. Here's why: Names should be in descriptive terms of the problem domain and thus convey context and meaning. Names should help a code reader who is not you understand the program.</p>

<p>Do not name things using implementation details.  <code>List&lt;Weapon&gt; weapon_list</code>. Instead <code>List&lt;Weapon&gt; weapons</code>.</p>

<hr>

<p><strong>Make state variables</strong></p>

<pre><code>while (true)
</code></pre>

<p>While what is true?</p>

<p>Once you define what it means to keep going, let's say "combatEffective", then lots of imprecise and vague code is understandable:</p>

<pre><code>while( combatEffective ) {
   . . .

   if( somePlayer.IsDead ) combatEffective = false;

   . . .
}
</code></pre>

<p>Any number of things might cause an ineffective player and now the code unambiguously defines/declares these situations. Also the code is made more self document-y.</p>

<p>MOST importantly rewrite so execution falls to the end of the <code>while</code> block and loops. As written, this code is very error prone when adding complexity.</p>

<hr>

<p><strong>Structure</strong></p>

<p>The above change breaks the <code>while</code> code, you know that of course. But it would not given a structure instead of a single mass of linear code.</p>

<pre><code>combatEffective = true;
while( combatEffective) {
   if( !StoryOne() )   { combatEffective = false; }
    . . .
   if( !StoryTwo() )   { combatEffective = false; }
   . . .
   if( !StoryThree() ) { combatEffective = false; }
}
</code></pre>

<p>Good structure creates appropriate level abstractions. That naturally makes code changealbe and understandable. Strive for appropriate abstractions at the <code>main()</code> level, class, method, and even individual control structure (if, while, switch, etc.) levels.</p>

<hr>

<p><strong>States are undefined</strong></p>

<p>First, I assume <code>HP</code> means hit-points.... Where ever there is something like <code>player.HP &lt;= 13</code> that must have some meaning otherwise you just felt like writing <code>13</code> at that moment; so why not 5, 256, -43? Define these states using enums or constants or something. I like enums. So "13" must be some kind of limit and being under 13 must be some kind of combat effectiveness state or something.</p>

<hr>

<p><strong>Confusing Player weapons</strong></p>

<p>Why or how is <code>initial-sword</code> different from any other sword a player may have (or any other weapon for that matter)? I don't see why the weapon that a player object is instantiated with is special or different than any weapon he may get during the game.</p>

<p><code>equiped_weapon</code> is confusing. I think you mean the weapon he is currently wielding. The things in a player's possession are the things he is "equipt with."  That is to say I am equipted with a sword whether it's in my hand or strapped to my back.</p>

<p>If a player comes standard issue with a sword then give him a sword in the constructor, then explicitly put it in his hand for use - <em>just the way you'd do things every where else in the program</em></p>
    </div>