<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>When testing you solution with the following dictionary:</p>

<pre><code>      string[] dictionary = { "GEEKS", "GEEKSQ", "SEEK", "EGIZK", "EEK", "FOR", "QUIZ", "GO" };
</code></pre>

<p>I get this result:</p>

<pre><code>GEEKS
GEEKSQ
EGIZK
EGIZKEK
QUIZ
SEEK
SEEKEEK
EEK
</code></pre>

<p>The reason must be that you don't reset the <code>str</code> object after each recursive call to <code>SearchWord</code>:</p>

<blockquote>
<pre><code>if (IsSafe(M, N, row, col, visited) &amp;&amp; boggle[row,col] == edge.Key)
{
  SearchWord(edge.Value, boggle, row, col, visited, str.Append(edge.Key));
}
</code></pre>
</blockquote>

<p>You must remove the previous <code>char</code> before the next <code>boggle[row, col]</code> is tested in the recursive call.</p>

<pre><code>   if (IsSafe(M, N, row, col, visited) &amp;&amp; boggle[row,col] == edge.Key)
   {
     SearchWord(edge.Value, boggle, row, col, visited, str.Append(edge.Key));
     str.Length--;
   }
</code></pre>

<hr>

<blockquote>
<pre><code>  if (IsSafe(M, N, i, j, visited))
  {
    visited[i, j] = true;
</code></pre>
</blockquote>

<p>I see no reason for this check, because you know that it's safe from the previous recursion: </p>

<blockquote>
<pre><code>if (IsSafe(M, N, row, col, visited) &amp;&amp; boggle[row,col] == edge.Key)
{
    SearchWord(edge.Value, boggle, row, col, visited, str.Append(edge.Key));
</code></pre>
</blockquote>

<hr>

<blockquote>
<pre><code>    if (IsSafe(M, N, i, j, visited))
    {
        visited[i, j] = true;

        foreach (var edge in child.Edges)
        {
            for (int row = i - 1; row &lt;= i + 1; row++)
            {
                for (int col = j - 1; col &lt;= j + 1; col++)
                {
                    if (IsSafe(M, N, row, col, visited) &amp;&amp; boggle[row,col] == edge.Key)
                    {
                        SearchWord(edge.Value, boggle, row, col, visited, str.Append(edge.Key));
                    }
                }
            }

        }

        visited[i, j] = false;
    }
</code></pre>
</blockquote>

<p>I think there is a possibility for optimization here: Instead of iterating all the edges on the current node it is only necessary to test those where <code>boggle[row, col]</code> is safe:</p>

<pre><code>  // if (IsSafe(M, N, i, j, visited))
  {
    visited[i, j] = true;

    //foreach (var edge in child.Edges)
    {
      for (int row = i - 1; row &lt;= i + 1; row++)
      {
        for (int col = j - 1; col &lt;= j + 1; col++)
        {
          if (IsSafe(M, N, row, col, visited))
          {
            char key = boggle[row, col];
            if (child.Edges.TryGetValue(key, out TrieNode edge))
            {
              SearchWord(edge, boggle, row, col, visited, str.Append(key));
              str.Length--;
            }
          }
        }

      }
    }

    visited[i, j] = false;
  }
</code></pre>

<hr>

<p>So a gentle rewriting of <code>SearchWord</code> - eliminating the need for <code>IsSafe()</code> could be:</p>

<pre><code>private void SearchWord(TrieNode child, char[,] boggle, int i, int j, bool[,] visited, StringBuilder str)
{
  if (child.IsTerminal)
  {
    Console.WriteLine(str.ToString());
  }

  int M = boggle.GetLength(0);
  int N = boggle.GetLength(1);

  int minRow = Math.Max(0, i - 1);
  int maxRow = Math.Min(M, i + 2);
  int minCol = Math.Max(0, j - 1);
  int maxCol = Math.Min(N, j + 2);

  visited[i, j] = true;

  for (int row = minRow; row &lt; maxRow; row++)
  {
    for (int col = minCol; col &lt; maxCol; col++)
    {
      if (visited[row, col])
        continue;

      char key = boggle[row, col];
      if (child.Edges.TryGetValue(key, out TrieNode edge))
      {
        SearchWord(edge, boggle, row, col, visited, str.Append(key));
        str.Length--;
      }
    }
  }

  visited[i, j] = false;
}
</code></pre>

<hr>

<p>Besides that I have the usual "complaints" about naming, mixing test and implementation, not repeating yourself, the benefits of creating a proper class as with the other version - and it's of course sloppy just to write the result to the console, instead of returning it. </p>

<hr>

<p>In order to make it more C#-style you could rewrite it, so the api looks like:</p>

<pre><code>public IEnumerable&lt;string&gt; FindWords(char[,] boggle, Trie root)
</code></pre>

<p>and:</p>

<pre><code>private IEnumerable&lt;string&gt; SearchWord(TrieNode child, char[,] boggle, int i, int j, bool[,] visited, StringBuilder str)
</code></pre>

<p>and then use <code>yield return str.ToString()</code> when ever a word is found.</p>
    </div>