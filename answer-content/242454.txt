<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your variable names are bad, <code>s</code>, <code>data</code>, all of these could be better, <code>input</code>, <code>romanNumerals</code> and so on.</p>

<p>Your formatting is a little bit off, consider using an autoformatter.</p>

<p>Also your method will spectacularly fail when handed invalid input.</p>

<hr>

<pre class="lang-java prettyprint-override"><code>put("I", 1);
</code></pre>

<p>Be aware of <a href="https://docs.oracle.com/javase/tutorial/java/data/autoboxing.html" rel="noreferrer">Autoboxing</a>.</p>

<hr>

<pre class="lang-java prettyprint-override"><code>for (String val : edge) { 
    if(s.isBlank()) {
</code></pre>

<p>Have the <code>if</code> outside the loop, so that you don't even need to start the loop just to bail out immediately.</p>

<hr>

<pre class="lang-java prettyprint-override"><code>sum += data.get("" + c);
</code></pre>

<p>I'm absolutely not a friend of such casts. Most of the time, they mask what you actually wanted and depend on implementation details, especially with numbers.</p>

<hr>

<p>Otherwise it seems to work. What you could do is split the initial <code>Map</code> into two, <code>romanNumerals</code> and <code>compoundRomanNumerals</code>, that would simplify the overall logic and would remove the duplication you have with the <code>edge</code> array.</p>

<p>If you can help it, try to avoid string operations, they will always consume a lot of memory, for example:</p>

<pre class="lang-java prettyprint-override"><code>String c = a + b;
</code></pre>

<p>Will result in:</p>

<ol>
<li>Allocate <code>c</code> with enough memory to hold <code>a</code> and <code>b</code></li>
<li>Copy <code>a</code> into <code>c</code></li>
<li>Copy <code>b</code> into <code>c</code></li>
</ol>

<p>So if <code>a</code> and/or <code>b</code> is <em>large</em>, and I mean <em>large</em>, your memory usage will spike.</p>

<p>What you could do instead, is to copy the <code>String</code> into a <code>StringBuilder</code>, as that one will internally work on an array and will not create immutable instances with every change.</p>

<p>And you should handle error cases, <code>null</code> as input, <code>Hello World!</code> as input, such stuff. Would be a great exercise for writing unittests.</p>
    </div>