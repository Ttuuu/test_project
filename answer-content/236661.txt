<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your class is <code>InterviewQuestion</code>, if it is for an interview, then there's a few other things to consider, in addition to whether or not you get a reasonably efficient solution.  Whilst a bad solution will probably rule you out, a non-optimal solution may be acceptable depending on other factors.</p>

<p><strong>Seperation of concerns</strong></p>

<p>Finding the list of unique product items seems like it's a different concern to printing the list out to the console.  Rather than printing the items out directly, it would be better to return the list of items and then print them from the caller.  Not only does this demonstrate that you're thinking about reuse, but it also makes the code easier to write automated tests (for a given set of inputs, you can test against the expected results).</p>

<p><strong>Naming</strong></p>

<p>Naming is fairly important for readability.  You variable names are mostly appropriate, but a few small things.  Your method <code>getUniqueProduct</code> doesn't return anything, which is misleading.  <code>productRetailer</code> is a collection of mappings, rather than a single product retailer.  Something like <code>productRetailerMappings</code> might be more descriptive.  <code>target</code> refers to a retailer, so <code>targetRetailer</code> would make this clearer, otherwise given the context it might be expected that it's the <code>targetProductId</code>.</p>

<p><strong>Consistency</strong></p>

<p>Modern IDE's can auto-format your code for you.  Inconsistencies suggest that either you don't use your IDE effectively, or that you lack attention to detail.  Both of these are things that interviewers are going to consider.  Two obvious things that stand out are sometimes there's <code>) {</code> and sometimes there's <code>){</code>.  A missing space may seem minor, but it is noticeable.  Another is blank line after at the top of the if block.  Sometimes you have one, sometimes you don't.</p>

<p><strong>To continue...or not</strong></p>

<blockquote>
<pre><code>if(count[item]&gt;1){
    continue;
}else
    System.out.println(item);
</code></pre>
</blockquote>

<p>It's almost always preferable to use <code>{}</code> around your <code>if</code>/<code>else</code> clauses.  Doing it for one side of an if, and not for the else, when they're both one-line is unnecessarily confusing.  The <code>else</code> is also redundant in this case, since if the <code>if</code> is triggered, the following code won't be executed anyway, you don't need the <code>else</code>.  Where possible you want to avoid introducing unnecessary nesting.  Since there's nothing else after the <code>println</code> that's executed, inverting the <code>if</code> would also make the code cleaner, since you wouldn't need the branch condition:</p>

<pre><code>if(count[item]==1) {
    System.out.println(item);
}
</code></pre>

<p><strong>Constants can help readability</strong></p>

<p>You're using a two dimensional array, with a fixed size.  Have two constants, one for the ITEM_COUNT and one for the RETAILER_ID would help in understanding.  It's not obvious from this line:</p>

<blockquote>
<pre><code>if(target == productRetailer[i][1]) {
</code></pre>
</blockquote>

<p>What '1' is referring to (retailer or item).</p>
    </div>