<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think you might be able to get a marginal boost by implementing this in two steps: move all the 1s to the end, set everything before to 0. Your current alternate is: count 0s, write 0s, write 1s.</p>
<pre><code>public static void SortOnesZeros(int[] input)
{
    var oneCursor = input.Length - 1;
    for (var i = oneCursor; i &gt;= 0; i--)
    {
         if (input[i] == 1)
         {
            input[oneCursor--] = 1;
         }
    }
    // if the cursor is still at the end we have an all 0 array so nothing to clear.
    if (oneCursor != input.Length - 1)
    {
        Array.Clear(input, 0, oneCursor + 1);
    }
}
</code></pre>
<p>Unfortunately Array.Clear is O(N) (although N here is number of 0s, not total elements so worst case is O(N)). There are some interesting techniques to zero the first part faster though: <a href="https://stackoverflow.com/a/25808955/1402923">https://stackoverflow.com/a/25808955/1402923</a></p>
    </div>