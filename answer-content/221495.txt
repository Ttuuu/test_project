<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>From my untrained eye it looks like a simple regex would help ease the problem.</p>

<pre><code>^(.*?)([\d\.,]+)(.*)$
</code></pre>

<p>This is as it results in the following output:</p>

<pre><code>&gt;&gt;&gt; pprint([re.match('^(.*?)([\d\.,]+)(.*)$', i).groups() for i in ('US$17', 'USD17.00', '17,00€', '17€', 'GBP17', 'Only 17,-€', '17.000,00€', '17,000.00$')])
[('US$', '17', ''),
 ('USD', '17.00', ''),
 ('', '17,00', '€'),
 ('', '17', '€'),
 ('GBP', '17', ''),
 ('Only ', '17,', '-€'),
 ('', '17.000,00', '€'),
 ('', '17,000.00', '$')]
</code></pre></li>
<li><p>Now that we have the money all that is left is to convert it to a float.</p>

<p>Since you have thousands separators then you can't just use <code>float</code>. And so if you pass the 'thousand separator' and the 'decimal place' to the function and use <code>str.translate</code> then you can convert the code into the form you want.</p></li>
</ul>

<pre><code>import re


def _extract_price(value):
    match = re.match('^(.*?)([\d\.,]+)(.*)$', value)
    if match is None:
        raise ValueError("Can't extract price")
    return match.groups()


def _parse_price(price, thousand, decimal):
    trans = str.maketrans(decimal, '.', thousand)
    return float(price.translate(trans))


def parse_price(value):
    prefix, price, suffix = _extract_price(value)
    if '€' in prefix + suffix:
        thousand = '.'
        decimal = ','
    else:
        thousand = ','
        decimal = '.'
    return _parse_price(price, thousand, decimal)
</code></pre>

<pre><code>&gt;&gt;&gt; [parse_price(i) for i in ('US$17', 'USD17.00', '17,00€', '17€', 'GBP17', 'Only 17,-€', '17.000,00€', '17,000.00$')]
[17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17000.0, 17000.0]
</code></pre>
    </div>