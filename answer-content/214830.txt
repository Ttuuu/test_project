<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Henrik covered a number of points which I would have raised, so I won't repeat those.</p>

<hr>

<blockquote>
<pre><code>namespace TIFF
{
    public class Jpeg
</code></pre>
</blockquote>

<p>seems inconsistent to me. The convention in .Net is to camel-case acronyms and initialisms, so the class name is as expected and the namespace is not.</p>

<hr>

<blockquote>
<pre><code>    public static class JpegTiff
    {
        public static byte[] Create(List&lt;BitmapFrame&gt; frames, long quality)
        ...
        public static byte[] Create(List&lt;Bitmap&gt; bitmaps, string filename, long quality)
        ...
        private static byte[] WrapJpegs(List&lt;Jpeg&gt; jpegs)
        ...
</code></pre>
</blockquote>

<p>Since <code>Jpeg</code> is a public class it seems to me that you could rename <code>WrapJpegs</code> to <code>Create</code> and make it public. That opens up the option, for example, of encoding different frames at different qualities. (I'd also change <code>List</code> to <code>IEnumerable</code>, as Henrik proposes for the existing <code>Create</code> methods).</p>

<hr>

<p>There are some worrying magic numbers. Some of these concerns might be alleviated by a comment with a URL for the file format specification.</p>

<blockquote>
<pre><code>            uint offset = 8; // size of header, offset to IFD
</code></pre>
</blockquote>

<p>Is this 4 for the endianness magic number and 4 for <code>offset</code> itself?</p>

<blockquote>
<pre><code>            ushort entryCount = 14; // entries per IFD
</code></pre>
</blockquote>

<p>This is <code>fields.GetLength(0)</code>, isn't it? Is there any reason that you can't explicitly use <code>fields.GetLength(0)</code> for robustness if you later add or remove a field?</p>

<blockquote>
<pre><code>                // TIFF-fields / IFD-entrys:
                // {TAG, TYPE (3 = short, 4 = long, 5 = rational), COUNT, VALUE/OFFSET}
                uint[,] fields = ...

                // write fields
                for (int f = 0; f &lt; fields.GetLength(0); f++)
                {
                    writer.Write((ushort)fields[f, 0]);
                    writer.Write((ushort)fields[f, 1]);
                    writer.Write(fields[f, 2]);
                    writer.Write(fields[f, 3]);
                }
</code></pre>
</blockquote>

<p>I find it very confusing that a <code>short</code> and a <code>long</code> should take the same amount of space.</p>

<blockquote>
<pre><code>                if (i == jpegs.Count - 1)
                    offset = 0;
                else
                    offset += 22 + (uint)jpegs[i].Data.LongLength; // add values (of fields) length and jpeg length
</code></pre>
</blockquote>

<p>22? Three shorts and four ints?</p>

<p>One more explicit (although less portable, I admit) approach to these lengths would be to use structs for the chunks of fields and <code>Marshal.SizeOf</code>. But I understand if you think that's overkill.</p>
    </div>