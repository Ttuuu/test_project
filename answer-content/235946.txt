<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>General comments</h2>

<ul>
<li>The parameters you're passing in to almost every function collectively represent the current game state, which is perfectly fine for this style of programming which favors using functions over classes. Some might prefer modeling Hangman as a class with the game state, i.e. <code>word</code> and <code>guessed_letters</code>, as instance variables, but both styles are fine and work well for a simple game like this.</li>
<li>Some of the inline comments such as <code># Checks if a letter has been guessed before</code> or <code># Initializes the variables</code> are not helpful and actually clutter the code instead of making it easier to read. Ideally your code should be self-documenting if you have descriptive function/variable names and straightforward logic. Of course, this is sometimes easier said than done. For complex logic or lengthy/dense areas of code, you might need to explain what your code is doing. And if you think the design/implementation decisions you made might surprise your reader, including a comment explaining why you chose to write it that way could be helpful.</li>
<li>I'd recommend moving your game loop code (which is currently at the same level as your function definitions) under a <code>if __name__ == "__main__":</code> guard to prevent it from running the game if your file is imported as a module.</li>
<li>At the end is the final refactored version, but in the interest of time/brevity not all of the refactored parts are mentioned below.</li>
</ul>

<h3><code>word_loader</code></h3>

<ul>
<li>I would rename this to <code>words_loader</code> and change it to take a file path as a parameter and return a list of words.</li>
<li>Having the file path as a parameter gives you the flexibility to select from a different word list file than <code>words.txt</code> if you later decide you want to accept an arbitrary word list file as a command-line argument.</li>
<li>Returning a list of words from this function means that you only need to call this once per program invocation, i.e. you only need to read from the file once. Then in your top-level game loop pick from the list at random.</li>
<li>Example of how it might look after the above changes:

<pre class="lang-py prettyprint-override"><code>def words_loader(filepath: str) -&gt; List[str]:
    with open(filepath) as f:
        return f.read().strip().lower().split()
</code></pre></li>
</ul>

<h3><code>word_updater</code></h3>

<ul>
<li>A small bug: <code>userData.lower()</code> returns a <em>copy</em> of <code>userData</code> with all the cased characters converted to lowercase; it does <em>not</em> mutate <code>userData</code> in place. So when you have it on a line by itself, you are creating a copy of the string with all of its cased characters converted to lowercase, then immediately discarding that copy. To fix this, call <code>lower()</code> on the result of <code>input()</code> and store the result in <code>user_data</code>:

<pre class="lang-py prettyprint-override"><code>user_data = input("What letter would you like to guess? ").lower()
</code></pre></li>
<li><code>guessCount</code> does not need to be global if you make it a function parameter like you're doing with <code>word</code> and <code>guessedLetters</code>. But in this case I would recommend <em>not</em> tracking <code>guessCount</code> like a counter that you need to decrement manually. More on this below.</li>
<li>To simplify naming and make things less ambiguous, I propose renaming what you currently call <code>guessReset</code> as <code>starting_lives</code> to represent the number of starting lives the player has. The idea here is that for each incorrect guess, the player loses a life. And when <code>lives_used == starting_lives</code>, i.e. when the player has used up or consumed all of their lives, they lose the game.</li>
<li>We can calculate <code>lives_used</code> from <code>word</code> and <code>guessed_letters</code>:

<pre><code>lives_used = len(set(guessed_letters) - set(word))
</code></pre>

<code>set(guessed_letters)</code> is the set of letters guessed so far, and <code>set(word)</code> is the set of letters that make up the target word. <code>set(guessed_letters) - set(word)</code> is the set difference between the two which gives us the set of incorrectly-guessed letters, i.e. the number of lives used.</li>
</ul>

<h3><code>info_adder</code> and <code>word_printer</code></h3>

<ul>
<li>Since <code>word_printer</code> is the only one using <code>info_adder</code>, I would just consolidate these into one function.</li>
<li>Instead of a <code>List[str]</code>, it makes more sense to maintain <code>guessed_letters</code> as a <code>Set[str]</code> given that we don't want duplicate letters in this collection.</li>
<li><code>word_printer</code> after the above changes:

<pre class="lang-py prettyprint-override"><code>def word_printer(word: str, guessed_letters: Set[str],
                 starting_lives: int) -&gt; None:
    lives_used = len(guessed_letters - set(word))
    print(" ".join(c if c in guessed_letters else "_" for c in word))
    print(f"You have {starting_lives - lives_used} wrong guesses left")
</code></pre></li>
</ul>

<h3><code>win_checker</code></h3>

<ul>
<li>The idea is to check if the game has been won, but we can't actually determine that without also passing in <code>starting_lives</code>. This function should ideally be able to tell us whether the player won, lost, or is still playing the game.</li>
<li><p>I think it would be useful to introduce a <code>Result</code> enumeration like the following:</p>

<pre class="lang-py prettyprint-override"><code>from enum import Enum, auto

class Result(Enum):
    WIN = auto()
    LOSS = auto()
</code></pre>

<p>Then <code>win_checker</code>'s return type could be <code>Optional[Result]</code>, where <code>Result.WIN</code> corresponds to a win, <code>Result.LOSS</code> corresponds to a loss, and <code>None</code> corresponds to the game still being in progress.</p></li>
<li><p>An example implementation:</p>

<pre class="lang-py prettyprint-override"><code>def win_checker(word: str, guessed_letters: Set[str],
                starting_lives: int) -&gt; Optional[Result]:
    word_letters = set(word)
    lives_used = len(guessed_letters - word_letters)

    if lives_used &gt;= starting_lives:
        return Result.LOSS
    if word_letters.issubset(guessed_letters):
        return Result.WIN
    return None
</code></pre></li>
</ul>

<p>Final refactored version:</p>

<pre class="lang-py prettyprint-override"><code>#!/usr/bin/env python3

import random
from enum import Enum, auto
from typing import List, Optional, Set


class Result(Enum):
    WIN = auto()
    LOSS = auto()


def words_loader(filepath: str) -&gt; List[str]:
    with open(filepath) as f:
        return f.read().strip().lower().split()


def word_updater(word: str, guessed_letters: Set[str]) -&gt; Set[str]:
    while True:
        user_data = input("What letter would you like "
                          "to guess? ").strip().lower()
        if user_data in guessed_letters:
            print("You have guessed that letter before, "
                  "please use another letter.")
        elif len(user_data) != 1:
            print("Please enter only one letter.")
        elif not user_data.isalpha():
            print("Please only enter letters.")
        else:
            guessed_letters.add(user_data)
            return guessed_letters


def word_printer(word: str, guessed_letters: Set[str],
                 starting_lives: int) -&gt; None:
    lives_used = len(guessed_letters - set(word))
    print(" ".join(c if c in guessed_letters else "_" for c in word))
    print(f"You have {starting_lives - lives_used} wrong guesses left")


def win_checker(word: str, guessed_letters: Set[str],
                starting_lives: int) -&gt; Optional[Result]:
    word_letters = set(word)
    lives_used = len(guessed_letters - word_letters)

    if lives_used &gt;= starting_lives:
        return Result.LOSS
    if word_letters.issubset(guessed_letters):
        return Result.WIN
    return None


def play(word: str, starting_lives: int) -&gt; Result:
    guessed_letters: Set[str] = set()

    word_printer(word, guessed_letters, starting_lives)
    while True:
        guessed_letters = word_updater(word, guessed_letters)
        word_printer(word, guessed_letters, starting_lives)
        final_result = win_checker(word, guessed_letters, starting_lives)
        if final_result:
            return final_result


def wants_to_play_again() -&gt; bool:
    while True:
        choice = input("Would you like to play again? (y/n) ").strip().lower()
        if choice in ("y", "n"):
            return choice == "y"


if __name__ == "__main__":
    starting_lives = 8
    words = words_loader("words.txt")
    while True:
        word = random.choice(words)
        final_result = play(word, starting_lives)

        print("\n")
        if final_result is Result.WIN:
            print("You won!")
            starting_lives -= 1
        else:
            print(f"You lost! The word was {word}")
            starting_lives += 1
        print("\n")

        if not wants_to_play_again():
            break
</code></pre>
    </div>