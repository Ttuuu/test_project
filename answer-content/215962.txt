<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Style</h2>

<p>Some points on your style</p>

<ul>
<li>Don't forget to close the line with semicolons where appropriate. </li>
<li>Use <code>const</code> for variables that do not change.</li>
<li>Use <code>let</code> for variables that are scoped to the block.</li>
<li>Use <code>for of</code> loops when you do not need the index.</li>
<li>In JS the opening block delimiter <code>{</code> is on the same line as the associated statement. eg <code>for(...) { // &lt;&lt; { on same line</code></li>
<li><p>Even if its an example, always write code as functions, not as flat bits of code as in your example. The function name adds additional contextual semantic meaning and forces you to write in a style more akin to real world needs.</p></li>
<li><p>Use a space between </p>

<ul>
<li>tokens and <code>(</code>, eg <code>for (</code>, <code>if (foo) {</code>. </li>
<li>operators and operands, eg <code>1 + 2</code>, <code>i ++</code></li>
<li>commas and expressions, eg <code>a, b</code>  (not that it applies in your example) </li>
</ul></li>
</ul>

<h2>Typescript?</h2>

<p>You have the question tagged typescript, yet the code is pure JS. If you wanted a typescript version you have not indicated, and personally apart from better IDE integration the additional complexity of typescript does not offer any benefit over well written JS.</p>

<h2>Rewrites</h2>

<p>With all things equal the best quality source code has the shortest line count.</p>

<h2>Cleaning up of your code</h2>

<p><strong>Note</strong> that because the code is written as a function I have not needed to use an intermediate to hold the abstract "empty" state of members, removing 4 lines of code.</p>

<pre><code>function populateIfMembersEmpty(members, prefix = "123 -") {
    for (const member of members) {   
        if (member &amp;&amp; member[3]) { return }   
    }
    for (let i = 0; i&lt; members.length; i++) {   
        if (members[i] &amp;&amp; members[i][2]) { members[i][3] = prefix + i }   
    }
}
</code></pre>

<h2>Alternatives</h2>

<pre><code>function populateIfMembersEmpty(members, prefix = "123 -") {
    if (! members.some(member =&gt; member &amp;&amp; member[3])) {
        members.forEach((member, i) =&gt; {
            if (member &amp;&amp; member[2]) { member[3] = prefix + i }   
        });
    }
}
</code></pre>

<p>or</p>

<p>Does a member of members on the same line need to be named, or is a symbolic representation any less meaningful?</p>

<pre><code>function populateIfMembersEmpty(members, prefix = "123 -") {
    if (! members.some(m =&gt; m &amp;&amp; m[3])) {
        members.forEach((m, i) =&gt; m &amp;&amp; m[2] &amp;&amp; (m[3] = prefix + i));   
    }
}
</code></pre>

<p>or</p>

<pre><code>function populateIfMembersEmpty(members, prefix = "123 -") {
    if (members.some(m =&gt; m &amp;&amp; m[3])) { return }
    members.forEach((m, i) =&gt; m &amp;&amp; m[2] &amp;&amp; (m[3] = prefix + i));   
}
</code></pre>

<p>19 lines down to 4 may sound pedantic, but apply the same to a large code base and a monster source file of 10,000 lines can be a far more manageable 2,000 reducing the odds of a bug by 80%</p>

<hr>

<p>As the only response you have so far got that has unnecessarily emphasized a confusing point, I will say your style is neither <em>"very"</em> hard (or hard) to read, nor is it uncommon. (Let alone <em>"very"</em> uncommon, meaning... unique? no! ðŸ™„).</p>
    </div>