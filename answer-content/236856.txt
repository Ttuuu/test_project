<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The multiplication approach could be improved, even without non-portable optimization (significant gains are possible from that too, for example using <code>_mulx_u64</code>). Sadly it would make the code for multiplication less pretty, it looks nice now and with the following approach it wouldn't look as nice.</p>

<p>A not so nice thing that is happening here is that the order of the computation forces the creation of big partial products which are added one by one, each taking an explict shift and a full BigInt addition. For the factorial benchmark this is not a concern, as one operand is always tiny. For a benchmark that stresses "balanced" multiplication, you could for example extend the Fibonacci tests to exponentiating a 2x2 matrix.</p>

<p>An alternative arrangement is to generate the small partial products (one limb of the multiplier times one limb of the multiplicand) in the order of their <em>weight</em>, so a group of partial products (and a carry) of equal weight can be summed immediately without lots of temporary storage and then result in a limb of the final result. Handling carries is a bit tricky.</p>

<p>For clarity, here is a diagram of that ordering:</p>

<p><a href="https://i.stack.imgur.com/yiY9jm.png" rel="noreferrer"><img src="https://i.stack.imgur.com/yiY9jm.png" alt="partial product order"></a></p>

<p>(source: cryptographic hardware and embedded systems)</p>
    </div>