<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Bearing in mind that this code was posted ~2.5 years ago, I have some feedback. Perhaps you have learned a lot since then and the information below might not be new but it might help others as well.</p>

<h2>General Feedabck</h2>

<p>Overall the code looks okay. Readability is pretty good, though the path through the helper functions is a little tricky to comprehend at first glance. I like the GUI-like experience when moving around with arrow keys.</p>

<p>I haven't really used a WeakMap before - that is an interesting application of it. If you really wanted to make variables private then you could employ the <a href="https://addyosmani.com/resources/essentialjsdesignpatterns/book/#revealingmodulepatternjavascript" rel="nofollow noreferrer">Revealing module pattern</a> to only expose the publicly available items and not reveal the <em>private</em> data.</p>

<p>I would suggest using <code>const</code> more - especially for any variable that doesn't get re-assigned - e.g. in <code>MineBoard::determineNumberOfMines()</code> the variables <code>difficulty</code> and <code>totalNumOfSquares</code>, in <code>MineBoard::generateNewBoard()</code> the variables <code>size</code> and <code>numberOfMines</code>, etc.. </p>

<p>The function <code>toggleGamePlayOn</code> in <em>index.js</em> appears to only be used in one place, which makes me question the benefit of declaring it. Given that <code>board</code> is used <code>board</code> is used within functions yet declared outside those functions why not do the same with <code>gamePlay</code>?</p>

<h2>Other suggestions</h2>

<ul>
<li><strong>use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill" rel="nofollow noreferrer"><code>Array.fill()</code></a></strong> - e.g. in <code>MineBoard::generateNewBoard()</code> and <code>MineBoard::generateNewViewBoard()</code> could be simplified using <code>Array.fill()</code> - could eliminate one or both <code>for</code> loops.</li>
<li><p><strong>excess ternary operators</strong> - e.g. <code>MineBoard::isInBounds()</code> could be simplified to not use ternaries - just return the conditions. For example: </p>

<blockquote>
<pre><code>let rowInBounds = row &gt;= 0 &amp;&amp; row &lt; size ? true : false;
</code></pre>
</blockquote>

<p>To:</p>

<pre><code>let rowInBounds = row &gt;= 0 &amp;&amp; row &lt; size;
</code></pre></li>
<li><p><strong>excess logic</strong> - <code>MineBoard:: isSpaceMarked()</code> could be simplified to return conditional</p>

<blockquote>
<pre><code>if (viewBoard[cursorRow][cursorColumn] === this.marker) {
  return true;
} else {
  return false;
}
</code></pre>
</blockquote>

<p>To:</p>

<pre><code>return (viewBoard[cursorRow][cursorColumn] === this.marker) ;
</code></pre></li>
<li><p><strong>excess <code>else</code> statements</strong></p>

<ul>
<li><code>MineBoard:: checkForWinGame()</code> has excess <code>else</code> with pointless <code>return</code></li>
<li>the arrow function in callback to <code>forEach</code> in <code>MineBoard:: winGame()</code> doesnâ€™t need <code>else</code> since previous blocks have <code>return</code> statements</li>
</ul></li>
<li><strong>Excess <code>break</code> statements</strong> in <code>MineBoard::determineNumberOfMines()</code> because each case has a <code>return</code> statement.</li>
</ul>
    </div>