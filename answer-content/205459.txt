<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First of all, I really acknowledge your efforts, and secondly it seems that the code does what it is expected to do.</p>

<p>You split the code into some meaningful methods and the naming is easy to understand in the context.</p>

<p>There's a lot to comment and I can not cover it all so here is what I have:</p>

<p>The class <code>LuhnValidator</code>:</p>

<p>I wouldn't make everything static. If you check more card numbers in the same session (sequentially or in parallel) you are in trouble, because all the static variables retain their state throughout the session and may be in an invalid state after the first card number has been checked.</p>

<p>For instance <code>evenNumbers</code> is not reset before checking a number, so for the second number to be checked it contains all the even numbers from the previous card.</p>

<p>It can be convenient to have a static function to call, but then you should do it in this way:</p>

<pre><code>public class LuhnValidator
{
   public static bool Validate(string cardNumber)
   {
     LuhnValidator validator = new LuhnValidator(cardNumber);
     return validator.IsValid();
   }
}
</code></pre>

<p>All members of <code>LuhnValidator</code> should be instance members except the shown <code>Validate()</code></p>

<hr>

<p>Some details:</p>

<p>In <code>Inverser(string cardNumber)</code>:</p>

<blockquote>
<pre><code>  switch (cardNumber.Length)
  {
    case 16:
      noCheckDigit = cardNumber.Substring(0, 15);
      break;
    case 15:
      noCheckDigit = cardNumber.Substring(0, 14);
      break;

    default:
      Console.WriteLine("Insert a valid number");
      break;
  }
</code></pre>
</blockquote>

<p>It is fine to check for a valid length, but here you continue the process even if the length of the number is invalid (although you write a message). Instead you should throw an exception if the length is invalid:</p>

<pre><code>      switch (cardNumber.Length)
      {
        case 15:
        case 16:
          noCheckDigit = cardNumber.Substring(0, cardNumber.Length - 1);
          break;
        default:
          throw new ArgumentException("Invalid length of carNumber", nameof(cardNumber));
      }
</code></pre>

<blockquote>
<pre><code>      // Invert card number so I can operate from left to right
      for (int i = noCheckDigit.Length - 1; i &gt;= 0; i--)
      {
        invertedCardNumber = invertedCardNumber + cardNumber[i];
      }
</code></pre>
</blockquote>

<p>Instead of </p>

<p><code>invertedCardNumber = invertedCardNumber + cardNumber[i];</code> </p>

<p>you can write: </p>

<p><code>invertedCardNumber += cardNumber[i];</code></p>

<p>Or you can use LINQ: </p>

<pre><code>invertedCardNumber = new string(noCheckDigit.Reverse().ToArray());
</code></pre>

<p><strong>In <code>AddToList(string noCheckDigit)</code>:</strong></p>

<p>Instead of </p>

<pre><code>    numbersArray = invertedCardNumber.Substring(0, invertedCardNumber.Length).Select(c =&gt; c - '0').ToList();
  }
</code></pre>

<p>it seems sufficient to write:</p>

<pre><code>    numbersArray = invertedCardNumber.Select(c =&gt; c - '0').ToList();
</code></pre>

<p><strong>In <code>Multiply()</code>:</strong></p>

<pre><code>      int sum = digit * 2; 
</code></pre>

<p>it is actually not a sum but a product:</p>

<pre><code>int product = digit * 2;
</code></pre>

<blockquote>
<pre><code>      if (sum &gt; 9)
      {
        var digits = sum.ToString().Select(x =&gt; int.Parse(x.ToString()));
        evenNumbers.Add(digits.Sum());
      }
</code></pre>
</blockquote>

<p>Here if the sum (product) &gt; 9 then you can just subtract 9 from the product:</p>

<pre><code>      if (sum &gt; 9)
      {
        evenNumbers.Add(sum - 9);
      }
</code></pre>

<p><strong>In <code>Sums()</code>:</strong></p>

<p>Instead of </p>

<pre><code>checkDigit = Convert.ToInt32((sumOfAll * 9).ToString().AsEnumerable().Last().ToString());
</code></pre>

<p>you can do:</p>

<pre><code>checkDigit = (sumOfAll * 9) % 10;
</code></pre>

<p>This:</p>

<blockquote>
<pre><code>    if (invertedCardNumber.Length &lt; 16)
    {
      magicNumber = sumOfAll + checkDigit;
    }

    if (invertedCardNumber.Length &gt;= 16)
    {
      magicNumber = sumOfAll;
    }
</code></pre>
</blockquote>

<p>can be simplified to:</p>

<pre><code>    if (invertedCardNumber.Length &lt; 16)
    {
      magicNumber = sumOfAll + checkDigit;
    }
    else
    {
      magicNumber = sumOfAll;
    }
</code></pre>

<hr>

<p>As you're mentioning there are simpler ways to calculate the Luhn value. One place to start could be <a href="https://en.wikipedia.org/wiki/Luhn_algorithm" rel="nofollow noreferrer">Wikipedia</a></p>
    </div>