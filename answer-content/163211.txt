<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>
Here is a template class that enables writing and reading enum class members as strings.  It is a simplification of Loki Astari's design.  It avoids the need for helper functions, as suggested by Veski, by using the <code>enable_if&lt;&gt;</code> and <code>is_enum&lt;&gt;</code> templates.</p>

<p>The idea is to replace <code>template &lt;T&gt;</code> with</p>

<pre><code>template &lt;typename T,
    typename std::enable_if&lt;std::is_enum&lt;T&gt;::value&gt;::type* = nullptr&gt;
</code></pre>

<p>The consequence is that the <code>operator&lt;&lt;()</code> and <code>operator&gt;&gt;()</code> templates are only instantiated for enums (because of the Substitution Failure Is Not An Error (SFINAE) principle).  Then the helper classes <code>enumConstRefHolder</code> and <code>enumRefHolder</code>, and the functions <code>enumToString()</code> and <code>enumFromString()</code>, are no longer needed.</p>

<p>In addition to recognizing an enum member by a string (normalized to be all capital letters), the code recognizes its integer representation.  (For the example below, both <code>"FaST"</code> and <code>"1"</code> will be read as <code>Family::FAST</code>.)</p>

<p>EnumIO.h:</p>

<pre><code>#ifndef ENUMIO_H_
#define ENUMIO_H_

#include &lt;algorithm&gt;
#include &lt;ios&gt;
#include &lt;iostream&gt;
#include &lt;sstream&gt;
#include &lt;vector&gt;

// A template class that enables writing and reading enum class
// members as strings.
//
// Author:  Bradley Plohr (2017-05-12)
//
// Note:  The idea to keep the enum names as a static member in a
// template comes from Loki Astari:
//
// https://codereview.stackexchange.com/questions/14309
//         /conversion-between-enum-and-string-in-c-class-header
//
// Usage example:
//
// Enums.h:
// -------
// #ifndef ENUMS_H_
// #define ENUMS_H_
//
// enum class Family { SLOW, FAST };
//
// TODO:  other enum classes
//
// #endif /* ENUMS_H_ */
//
//
// Enums.cc:
// --------
// #include "Enums.h"
// #include "EnumIO.h"
// #include &lt;string&gt;
// #include &lt;vector&gt;
//
// template &lt;&gt;
// const std::vector&lt;std::string&gt;&amp; EnumIO&lt;Family&gt;::enum_names()
// {
//      static std::vector&lt;std::string&gt; enum_names_({ "SLOW", "FAST" });
//      return enum_names_;
// }
//
// TODO:  enum names for other enum classes
//
//
// t_EnumIO.cc:
// -----------
// #include "EnumIO.h"
// #include "Enums.h"
// #include &lt;iostream&gt;
//
// int
// main()
// {
//     Family family;
//
//     family = Family::SLOW;
//     std::cout &lt;&lt; family &lt;&lt; std::endl;
//
//     std::cin &gt;&gt; family;
//     std::cout &lt;&lt; family &lt;&lt; std::endl;
//
//     return 0;
// }
//
// For the input
//
//     fAsT
//
// the output is
//
//     SLOW
//     FAST

template &lt;typename T&gt;
class EnumIO
{
public:
    static const std::vector&lt;std::string&gt;&amp; enum_names();
};

template &lt;typename T,
        typename std::enable_if&lt;std::is_enum&lt;T&gt;::value&gt;::type* = nullptr&gt;
std::ostream&amp;
operator&lt;&lt;(std::ostream&amp; os, const T&amp; t)
{
    os &lt;&lt; EnumIO&lt;T&gt;::enum_names().at(static_cast&lt;int&gt;(t));

    return os;
}

static std::string
toUpper(const std::string&amp; input)
{
    std::string copy(input);
    std::transform(copy.cbegin(), copy.cend(), copy.begin(),
            [](const unsigned char i) { return std::toupper(i); });

    return copy;
}

template &lt;typename T,
        typename std::enable_if&lt;std::is_enum&lt;T&gt;::value&gt;::type* = nullptr&gt;
std::istream&amp;
operator&gt;&gt;(std::istream&amp; is, T&amp; t)
{
    std::string input;
    is &gt;&gt; input;
    if (is.fail())
        return is;
    input = toUpper(input);

    // check for a match with a name
    int i = 0;
    for (auto name : EnumIO&lt;T&gt;::enum_names()) {
        if (toUpper(name) == input) {
            // Here we assume that the integer representation of
            // the enum class is the default.  If the enum class
            // members are assigned other integers, this code
            // must be extended by consulting a vector containing
            // the assigned integers.
            t = static_cast&lt;T&gt;(i);

            return is;
        }
        ++i;
    }

    // check for a match with an integer
    int n = static_cast&lt;int&gt;(EnumIO&lt;T&gt;::enum_names().size());
    std::istringstream iss(input);
    int value;
    iss &gt;&gt; value;
    if (not iss.fail() &amp;&amp; 0 &lt;= value &amp;&amp; value &lt; n) {
        t = static_cast&lt;T&gt;(value); // See the comment above.
        return is;
    }

    is.setstate(std::ios::failbit);

    return is;
}

#endif /* ENUMIO_H_ */
</code></pre>
    </div>