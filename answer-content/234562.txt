<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A very well done effort even though I am not a fan of loading .h files with so much inline code.</p>

<hr>

<ul>
<li>Standard C89 conformance (Are some parts not in C89/result in UB etc?)</li>
</ul>

<p>Good to have used <code>unsigned char</code>.</p>

<p>Only UB I see is with pathological <code>size == 0</code> leads to <code>/0</code></p>

<hr>

<ul>
<li>Performance (e.g. Is it slower than the sane approach; i.e. using double indirection by struct with pointers?)</li>
</ul>

<p><strong>Consider space performance</strong></p>

<p>An <code>VECTOR_INITIAL_CAPACITY 32</code> would be fairly piggish if code had a largest array of <em>vectors</em>.  I'd start with 0 or pass into <code>vector_init()</code> the initial size.</p>

<p><strong>Correct function?</strong></p>

<p>In <code>vector_increase_capacity()</code>, I have doubts that after code sets <code>errno = EDOM;</code> the rest of code is correct.  Should not code avoid the following <code>{ new_vec = new_vec_mem_start + header_offset; vector_set_header(new_vec, item_size, head); ... }</code>?</p>

<hr>

<ul>
<li>Readability (Refactoring / Idiomatic C etc.)</li>
</ul>

<p><strong>why <code>dest</code></strong></p>

<p>Unclear why extra code.  Suggested simplification.</p>

<pre><code>// byte* dest;
// dest = (byte*)(&amp;head); /* To make my linter quiet and be explicit */
// memcpy(dest, src, sizeof(struct header));
memcpy(&amp;head, src, sizeof *head);
</code></pre>

<p><strong>unneeded <code>else</code></strong></p>

<pre><code>if (!vec) {
    return NULL;
// } else {
}
    vec = (byte*)vec + header_get_offset(item_size);
    vector_set_header(vec, item_size, head);
    return vec;
// }
</code></pre>

<hr>

<ul>
<li>Maintenance (My current expectation: This would get you fired if you use this in production, but only a little later than the one using only macros.)</li>
</ul>

<p><strong>Post C89</strong></p>

<p>Good this code tests for prior <code>SIZE_MAX</code> as perhaps another .h file made it or maybe code is now using C99</p>

<p><strong>Collisions</strong></p>

<p>Avoid using name space in an unexpected fashion.</p>

<p>Inside <code>vector.h</code>, I would not expect to find a <code>struct</code> named <code>header</code>.  I recommend to use <code>vector</code> or <code>vector_header</code>.</p>

<p>This include function names like <code>header_get_offset()</code>.  Better to uniformly start with <code>vector</code>.</p>

<p>To define <code>byte</code> as <code>typedef unsigned char byte;</code> in a .h file  is fairly brazen to assume some other .h and application did not define it, perhaps a bit differently.  I'd recommend simple using <code>unsigned char</code>.</p>

<p><strong>Does <code>#include "vector.h"</code> stand on its own?</strong></p>

<p>As a test to insure <code>"vector.h"</code> includes itself, needed include files, try <code>"vector.h"</code> first.</p>

<pre><code>#include "vector.h"
#include &lt;assert.h&gt;
#include &lt;stdio.h&gt;
// #include "vector.h"
</code></pre>

<p><strong>IANAL but</strong></p>

<p>Copyright notices need to be obvious, not buried at the end of code.</p>

<p><strong>No free</strong></p>

<p>I'd a function to call to free all allocations.  Perhaps <code>void stack_uninit(void* vec)</code>?</p>
    </div>