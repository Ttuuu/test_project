<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>For first method:</p>

<pre><code>return Optional.ofNullable(userRepository.findByUsername(username))
               .orElseThrow(() -&gt; new UsernameNotFoundException(String.format("No user found with username '%s'.", username)));
</code></pre>

<p>The second method does not need an Optional.
Fail fast by changing the method to start by checking if the authenticationManager is null, log and exit (guard clause).
Never the less, having fields which could be null is not a good sign, there's more to clean there. Maybe Null Object Pattern could help, or something else. Nullable class fields are bad, Optional class fields are not an option, polymorphous or Null Object Pattern could be the answer.</p>

<p>Update:
For first method, a cleaner way is to have userRepository.findByUsername return an optional. Methods with "find" in their name are a natural candidate for Optional return. This would remove the need for Optional.ofNullable.</p>

<pre><code>return userRepository.findByUsername(username)
               .orElseThrow(() -&gt; new UsernameNotFoundException(String.format("No user found with username '%s'.", username));
</code></pre>
    </div>