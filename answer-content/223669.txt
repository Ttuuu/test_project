<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>// buffer which should be faster than std::vector&lt;uint8_t&gt; when resizing a lot because it does not do byte initialization when resizing
</code></pre>

<p>This comment line is really long. You should wrap the text so that there is no horizontal scrollbar anymore.</p>

<pre><code>class uint8_fast_buffer
{
public:
    uint8_fast_buffer(const size_t initial_size)
</code></pre>

<p>Undeclared identifier <code>size_t</code>. You forgot to post the <code>#include</code> lines; they are required for a good code review.</p>

<pre><code>    {
        if(initial_size == 0)
</code></pre>

<p>There's a space missing between the <code>if</code> and the open parenthesis.</p>

<pre><code>        {
            // .. i don't really like the idea of buf being nullptr, this avoids that issue.
            this-&gt;internal_reserve(1);
        }
        else
        {
            this-&gt;internal_reserve(initial_size);
            this-&gt;buf_size=initial_size;
        }
    }
</code></pre>

<p>The above constructor can be written in a shorter way, like this:</p>

<pre><code>    uint8_fast_buffer(const size_t initial_size)
    {
        this-&gt;buf_size = initial_size;
        this-&gt;internal_reserve(std::max(initial_size, 1));
    }
</code></pre>

<p>Continuing with your code:</p>

<pre><code>    ~uint8_fast_buffer() noexcept
    {
        free(this-&gt;buf);
    }
    size_t size(void) noexcept
</code></pre>

<p>The <code>void</code> is not necessary inside the parentheses. Remove it.</p>

<pre><code>    {
        return this-&gt;buf_size;
    }
    void reserve(const size_t reserve_size)
    {
        if(reserve_size &gt; this-&gt;buf_size_real)
        {
            this-&gt;internal_reserve(reserve_size);
        }
    }
    // this function is supposed to be very fast when newlen is smaller than the biggest it has ever been before.
    void resize(const size_t newlen)
    {
        if(__builtin_expect(newlen &gt; this-&gt;buf_size_real,0))
</code></pre>

<p>There's a space missing after the <code>if</code>, and after the comma.</p>

<pre><code>        {
            this-&gt;internal_reserve(newlen);
        }
        this-&gt;buf_size=newlen;
    }
    void append(const uint8_t *data, const size_t len){
</code></pre>

<p>There's a newline missing before the <code>{</code>. You should let your IDE format the source code, to avoid these inconsistencies.</p>

<pre><code>        const size_t pos=this-&gt;size();
        const size_t new_pos=this-&gt;size()+len;
        this-&gt;resize(new_pos);
        memcpy(&amp;this-&gt;buf[pos],data,len);
</code></pre>

<p>Therearespacesmissingallovertheplaceespeciallyaroundtheoperators.</p>

<pre><code>    }
    void reset(void) noexcept
    {
        this-&gt;buf_size=0;
    }
    bool empty(void) noexcept
    {
        return (this-&gt;buf_size==0);
    }
</code></pre>

<p>The parentheses are not necessary.</p>

<pre><code>    uint8_t* data(void) noexcept
    {
        return this-&gt;buf;
    }
    uint8_t&amp; at(const size_t pos)
    {
        if(__builtin_expect(pos &gt;= this-&gt;size(),0))
        {
            throw std::out_of_range(std::to_string(pos)+std::string(" &gt;= ")+std::to_string(this-&gt;size()));
        }
        return this-&gt;buf[pos];
    }
    uint8_t&amp; operator[](const size_t pos) noexcept
    {
        return this-&gt;buf[pos];
    }
private:
    void internal_reserve(const size_t reserve_size)
    {
        uint8_t *newbuf=(uint8_t*)realloc(this-&gt;buf,reserve_size);
        if(__builtin_expect(newbuf == nullptr,0))
        {
            throw std::bad_alloc();
        }
        this-&gt;buf_size_real=reserve_size;
        this-&gt;buf=newbuf;
    }
    size_t buf_size=0;
    size_t buf_size_real=0;
</code></pre>

<p>To clearly distinguish <code>buf_size</code> and <code>buf_size_real</code>, the Go programming language uses <code>buf_len</code> and <code>buf_cap</code> (for capacity). The word <code>real</code> is rather confusing.</p>

<pre><code>    uint8_t *buf=nullptr;
};
</code></pre>

<h3>Summary</h3>

<p>On a high level, the code looks good. It works, takes care of exceptional situations and defines a minimal and appropriate API.</p>

<p>On the syntactic level, there are many small details that can be improved, like consistent formatting and variable names.</p>

<p>Let your IDE take care of the formatting, write some unit tests, and you're fine.</p>
    </div>