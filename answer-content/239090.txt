<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Using two arrays of <code>int</code></h1>
<p>That's nice. There is a tendency to use <code>Node</code> objects that refer to each other by address, which still requires an array to initially find a node by index anyway, and then the nodes become a pointless extra step. Trap avoided.</p>
<h1>PathCompressor</h1>
<p>This class is a bit dubious, it works by "stealing" (temporarily, so maybe "borrowing") the private data of the main data structure and modifying it (resulting in a kind of action-at-a-distance type of modification). Strangely, it holds state at all, its main job is encapsulating the path compression function as an object. It could have been a private method of <code>UnionFind</code> as well, or even just inlined directly into its call-site. There are no other places where it would be used .. well, except in the tests.</p>
<p>Describing it as a path compression <em>strategy</em> class suggests that it's part of a strategy pattern, where different strategies might be supplied, but there is no facility to supply them. The other major strategies, path splitting, and path halving are specifically meant to be performed <em>during</em> the initial pass - their point is sacrificing some amount of path-shortening to avoid a second pass. If they were implemented as a drop-in replacement strategy, the way it is now, their point would be missed.</p>
<p>So in total, in my opinion, there should not be a <code>PathCompressor</code> class.</p>
<h1>Naming of <code>elements</code></h1>
<p><code>elements</code> is very generic. That's no big deal, but you could emphasize their nature more, for example, <code>parents</code> or <code>links</code>.</p>
<h1>Performance?</h1>
<p>You could try path splitting/halving, they were invented to be faster in practice than full path compression. I've never benchmarked them though.</p>
    </div>