<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><em>AggByA:</em> baseline two-pass method presented by the OP.</li>
<li><em>AggByB:</em> one-pass method using <code>Aggregate</code> suggested by @PeterTaylor</li>
<li><em>AggByC:</em> one-pass method implemented by hand</li>
</ul>

<p>I left most error handling to the reader since I personally don't believe it is necessary, or even helpful, in something this abstracted. If the caller wants extra safety then they can easily add whatever checks they desire through the <code>selector</code> and <code>predicate</code> arguments.</p>

<p><strong>Q&amp;A:</strong></p>

<ul>
<li>Is this method usable in practice? <em>Of course, it just is not ideal.</em></li>
<li>Is this correct LINQ style? <em>Opinion-based, but I'd say 'No.' primarily because <code>ArgBy</code> seems to be unnecessary (as pointed out by @PeterTaylor). That said, depending on the <code>Aggregate</code> method ends up being slower than the naive alternative.</em></li>
</ul>

<p><strong>Benchmark Results:</strong></p>

<p><img src="https://i.stack.imgur.com/5vPXJ.png" alt=""></p>

<p><strong>Benchmark Code:</strong></p>

<pre><code>public readonly struct SomeStructure
{
    private readonly int m_count;
    private readonly string m_name;

    public int Count =&gt; m_count;
    public string Name =&gt; m_name;

    public SomeStructure(int count, string name) {
        m_count = count;
        m_name = name;
    }
}

public class Race
{
    private static SomeStructure[] m_data;

    [GlobalSetup]
    public void Setup() {
        m_data = new[] {
            new SomeStructure(0, "A"),
            new SomeStructure(1, "B"),
            new SomeStructure(2, "C"),
        };
    }

    [Benchmark]
    public SomeStructure MinByA() =&gt; Program.MinByA(m_data, a =&gt; a.Count);
    [Benchmark]
    public SomeStructure MinByB() =&gt; Program.MinByB(m_data, a =&gt; a.Count);
    [Benchmark]
    public SomeStructure MinByC() =&gt; Program.MinByC(m_data, a =&gt; a.Count);
    [Benchmark]
    public SomeStructure MaxByA() =&gt; Program.MaxByA(m_data, a =&gt; a.Count);
    [Benchmark]
    public SomeStructure MaxByB() =&gt; Program.MaxByB(m_data, a =&gt; a.Count);
    [Benchmark]
    public SomeStructure MaxByC() =&gt; Program.MaxByC(m_data, a =&gt; a.Count);
}

class Program
{
    static void Main(string[] args) {
        var summary = BenchmarkRunner.Run&lt;Race&gt;();

        Console.ReadKey();
    }

    public static TElement AggByA&lt;TElement, TSelector&gt;(IEnumerable&lt;TElement&gt; items, Func&lt;TElement, TSelector&gt; selector, Func&lt;TSelector, TSelector, bool&gt; predicate, Func&lt;Func&lt;TElement, TSelector&gt;, TSelector&gt; aggregator) =&gt;
        items.First(acc =&gt; predicate(selector(acc), aggregator(selector)));
    public static TElement AggByB&lt;TElement, TSelector&gt;(IEnumerable&lt;TElement&gt; items, Func&lt;TElement, TSelector&gt; selector, Func&lt;TSelector, TSelector, bool&gt; predicate) =&gt;
        items.Aggregate((acc, cur) =&gt; (predicate(selector(acc), selector(cur)) ? cur : acc));
    public static TElement AggByC&lt;TElement, TSelector&gt;(IEnumerable&lt;TElement&gt; items, Func&lt;TElement, TSelector&gt; selector, Func&lt;TSelector, TSelector, bool&gt; predicate) {
        TElement accumulator;
        var enumerator = items.GetEnumerator();

        try {
            if (!enumerator.MoveNext()) {
                throw new InvalidOperationException("no elements to enumerate");
            }

            accumulator = enumerator.Current;

            while (enumerator.MoveNext()) {
                var current = enumerator.Current;

                if (predicate(selector(accumulator), selector(current))) {
                    accumulator = current;
                }
            }
        }
        finally {
            enumerator.Dispose();
        }

        return accumulator;
    }
    public static TElement MaxByA&lt;TElement, TSelector&gt;(IEnumerable&lt;TElement&gt; items, Func&lt;TElement, TSelector&gt; selector) where TSelector : IComparable&lt;TSelector&gt; =&gt;
        AggByA(items, selector, (acc, cur) =&gt; (0 == acc.CompareTo(cur)), items.Max);
    public static TElement MaxByB&lt;TElement, TSelector&gt;(IEnumerable&lt;TElement&gt; items, Func&lt;TElement, TSelector&gt; selector) where TSelector : IComparable&lt;TSelector&gt; =&gt;
        AggByB(items, selector, (acc, cur) =&gt; (0 &gt; acc.CompareTo(cur)));
    public static TElement MaxByC&lt;TElement, TSelector&gt;(IEnumerable&lt;TElement&gt; items, Func&lt;TElement, TSelector&gt; selector) where TSelector : IComparable&lt;TSelector&gt; =&gt;
        AggByC(items, selector, (acc, cur) =&gt; (0 &gt; acc.CompareTo(cur)));
    public static TElement MinByA&lt;TElement, TSelector&gt;(IEnumerable&lt;TElement&gt; items, Func&lt;TElement, TSelector&gt; selector) where TSelector : IComparable&lt;TSelector&gt; =&gt;
        AggByA(items, selector, (acc, cur) =&gt; (0 == acc.CompareTo(cur)), items.Min);
    public static TElement MinByB&lt;TElement, TSelector&gt;(IEnumerable&lt;TElement&gt; items, Func&lt;TElement, TSelector&gt; selector) where TSelector : IComparable&lt;TSelector&gt; =&gt;
        AggByB(items, selector, (acc, cur) =&gt; (0 &lt; acc.CompareTo(cur)));
    public static TElement MinByC&lt;TElement, TSelector&gt;(IEnumerable&lt;TElement&gt; items, Func&lt;TElement, TSelector&gt; selector) where TSelector : IComparable&lt;TSelector&gt; =&gt;
        AggByC(items, selector, (acc, cur) =&gt; (0 &lt; acc.CompareTo(cur)));
}
</code></pre>
    </div>