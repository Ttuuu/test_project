<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Let's work through some of the simpler issues, like code redundancy, and some helper-functions in the core library that help a lot, and will make your code simpler.</p>

<h3>Double-checking else</h3>

<p>When you have an either-or check in an if-condition, there's no need to double-check the <code>else</code> side of things.</p>

<p>you check for odd-positioned digits, which implies every other digit is even-positioned... This code:</p>

<blockquote>
<pre><code>if(x % 2 == 0 ){
    .....
}else if(x % 2 != 0){
    .....
}
</code></pre>
</blockquote>

<p>can be just:</p>

<pre><code>if(x % 2 == 0 ){
    .....
} else {
    .....
}
</code></pre>

<h3>Try-Catch</h3>

<p>There's no code in your function that throws an explicit exception - why do you have a try/catch? All integer parsing comes from digits in a <code>BigInteger</code>, so there can be no illegal characters, etc.</p>

<h3>Character-to-digit-value</h3>

<p>Your code has a lot of this type of logic:</p>

<blockquote>
<pre><code>String numString = String.valueOf(chars[x]);
int numbers = Integer.valueOf(numString);
</code></pre>
</blockquote>

<p>but that can be simplified to just:</p>

<pre><code>int numbers = Character.getNumericValue(chars[x]);
</code></pre>

<h3>Separated sums</h3>

<p>You have both <code>sumOdd</code> and <code>sumEven</code>, but there's no need for both. You can have one sum accumulator and use it in each side.</p>

<h3>Simplifying the doubled digits</h3>

<p>The algorithm requires doubles that are larger than 9 to be reduced by 9. Your code is:</p>

<blockquote>
<pre><code>int doubled = numbers * 2;
if(doubled &gt; 9){
    _doubled = doubled - 9;
}else{
    _doubled = doubled;
}
sumEven += _doubled;
</code></pre>
</blockquote>

<p>Using a "ternary" expression, and a little bit of manipulation on the math, you can reduce that to just:</p>

<pre><code>sum += digit &lt; 5 ? digit * 2 : digit * 2 - 9;
</code></pre>

<h3>Autoboxing and conditionals</h3>

<p>Java will "autobox" primitive variables like <code>boolean</code> to their full class types <code>Boolean</code> when needed, without any explicit handling. Let's take this exit segment:</p>

<blockquote>
<pre><code>if((summation * 9) % 10 == checksum)
    return Boolean.TRUE;
else
    return Boolean.FALSE;
</code></pre>
</blockquote>

<p>This should have braces on the 1-liners, to be:</p>

<pre><code>if((summation * 9) % 10 == checksum) {
    return Boolean.TRUE;
} else {
    return Boolean.FALSE;
}
</code></pre>

<p>but really, that's all unnecessary, because autoboxing comes to the rescue:</p>

<pre><code>return (summation * 9) % 10 == checksum
</code></pre>

<p>That's all you need.</p>

<h3>Conclusion</h3>

<p>Putting all these suggestions together, you can significantly reduce the complexity of the code, to something like:</p>

<pre><code>public static Boolean getIdentitySummationRL(BigInteger identities){
    char[] idchars = identities.toString().toCharArray();
    int sum = 0;
    // loop over each digit, except the check-digit
    for (int i = 0; i &lt; idchars.length - 1; i++) {
        int digit = Character.getNumericValue(idchars[i]);
        if ((i % 2) == 0) {
            sum += digit;
        } else {
            sum += digit &lt; 5 ? digit * 2 : digit * 2 - 9;
        }
    }
    int checkdigit = Character.getNumericValue(idchars[idchars.length - 1]);
    int compdigit = (sum * 9) % 10;

    return checkdigit == compdigit;
}
</code></pre>

<p>(I have checked that using my ID number, and it's OK)</p>

<h3>Update</h3>

<p>Note I have been doing a little more reading on Luhn's algorithm because of @Molvalio's comment and also I remember doing it a couple of decades ago for other numbers (not ID numbers) and I remember the checking algorithm to be different to this implementation. I was right that checking the number is simpler than your code. See the algorithm here: <a href="https://en.wikipedia.org/wiki/Luhn_algorithm#Verification_of_the_check_digit" rel="noreferrer">Luhn's Algorithm Verification</a></p>

<p>The point is that your code is computing a check-digit and comparing it with the existing digit, but you're missing the fact that the digit is designed to be incorporated in to the same calculations as the checksum, and a valid number has a resulting digit of 0.</p>

<p>Additionally, the Luhn's algorithm is computed right-to-left. In your case, because the length of SA ID numbers is 13, you're OK (both left and right digits are odd) but you should implement the algorithm more closely....</p>

<p>So, the code can be simplified further:</p>

<pre><code>public static Boolean checkLuhn(BigInteger identities){
    char[] idchars = identities.toString().toCharArray();
    int sum = 0;
    // loop over each digit right-to-left, including the check-digit
    for (int i = 1; i &lt;= idchars.length; i++) {
        int digit = Character.getNumericValue(idchars[idchars.length - i]);
        if ((i % 2) != 0) {
            sum += digit;
        } else {
            sum += digit &lt; 5 ? digit * 2 : digit * 2 - 9;
        }
    }
    return (sum % 10) == 0;
}
</code></pre>
    </div>