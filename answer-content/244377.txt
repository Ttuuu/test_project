<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I suspect the root of your problem is that <strong>you're working at the wrong abstraction level.</strong></p>
<p>Specifically, looking at the Telegram Bot API documentation, it seems that an <a href="https://core.telegram.org/bots/api#update" rel="nofollow noreferrer">Update</a> is just a wrapper for one of several unrelated objects that describe different kinds of events that your application might want to react to.  Trying to treat all of these events as if they were the same thing makes no sense — but that's what you're effectively doing in your code, with methods that take an Update object and try to return some property of whatever random event the update might contain.  Some of those events, for example, might not even <em>have</em> an associated chat ID or a user name; and even if they do, the way that chat ID or user name is related to the event might not be the same.</p>
<p>Basically, the <em>only</em> part of your code that should be dealing with Update objects is the low-level code that receives then (from WebHooks or from getUpdates), possibly does reordering and/or de-duplication using the update IDs and then dispatches the event object contained in the Update wrapper to an appropriate handler for that kind of event.</p>
<p>That is to say, your code for handling updates should look something like this:</p>
<pre class="lang-java prettyprint-override"><code>private void handleUpdate(Update update) {
    if (update.hasMessage()) {
        handleNewMessage(update.getMessage());
    } else if (update.hasCallbackQuery()) {
        handleCallbackQuery(update.getCallbackQuery());
    } else if (/* ... */) {
        // ...
    } else {
        // Either we received a truly empty update, or we don't know how to
        // handle its contents. Ignore it and maybe log a warning.
    }
}
</code></pre>
<p>…and then your <code>handleNewMessage(Message message)</code> and <code>handleCallbackQuery(CallbackQuery query)</code> methods (which will <em>not</em> have to deal with Update objects) should handle the messages or callback queries or whatever else they receive appropriately, using the methods provided by the objects they receive as their parameters.</p>
<p>If you want, you <em>can</em> of course have the different handlers share some code.  For example, since a <a href="https://core.telegram.org/bots/api#callbackquery" rel="nofollow noreferrer">CallbackQuery</a> can contain an optional Message, you might want to have your <code>handleCallbackQuery()</code> method internally call <code>handleNewMessage()</code> to deal with the message embedded in the query, if there is one — or, perhaps more practically, have both handler methods call other methods that implement the shared message-processing parts common to both of them.</p>
    </div>