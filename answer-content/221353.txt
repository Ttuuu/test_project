<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Bugs and Problems</h2>

<p>There are a few problems with your code</p>

<ol>
<li><p>Crash when <code>o1</code> references <code>null</code>. </p>

<p>Reason <code>typeof null === "object"</code> is true. </p>

<p><code>null</code> is an object when inspected with <code>typeof</code> however <code>Object.keys(null)</code> will throw the error <code>"Can not convert null to Object"</code> so if you have any properties that are <code>null</code> your code will throw an error.</p></li>
<li><p>Crash when both objects have similar cyclic references. </p>

<p>Many objects have references to themselves (are cyclic). Your code does not check if there is a cyclic reference and will continue to recurse until the call stack overflows (which is a thrown error)</p></li>
</ol>

<h2>General</h2>

<p>Always aim to keep the code complexity as low as possible.</p>

<ul>
<li><p>The variable <code>goDeeper</code> is not needed. You can <code>return true</code> where you set it to false</p></li>
<li><p>I do not see why you would need the keys sorted. Sorts are expensive operations, you should always ask yourself "Do I need to sort?" before using it.</p></li>
<li><p>The function <code>deepSameKeys</code> will always return <code>true</code> so why return a value at all?</p></li>
<li><p>It is unclear if you want to remove undefined properties, or all properties that evaluate to <code>undefined</code>. As you have it you remove all that evaluate to <code>undefined</code>.</p>

<p>I.E. the object <code>{a: undefined}</code> contains a property named <code>a</code> while <code>{}</code> does not contain the property <code>a</code> yet both will evaluate <code>a</code> as <code>undefined</code>.</p>

<p>You can use the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/in" rel="nofollow noreferrer"><code>in</code></a> operator which will eval to true for the first object and false for the second. <strong>Note</strong> this also checks the prototype chain so you may want to use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty" rel="nofollow noreferrer"><code>Object.hasOwnProperty</code></a> if this will be an issue</p></li>
<li><p>The naming is very poor, not indecipherable but could be a lot better.</p></li>
<li><p>When using recursive functions you should try to avoid using iterators that use anonymous functions EG <code>Array.every</code></p>

<p>Most recursive functions are just an alternative way to implement a stack to hold the current item's state as you search deeper. </p>

<p>This state is held in the function context (variables scoped to the function) 
and stored on the JS heap.</p>

<p>Defining a function inside that context means that a second copy of the state is created as a closure, and also another context for the anonymous function.</p>

<p>The additional state per item is a lot of unneeded overhead (and halves the max depth of recursion).</p>

<p>If you use a <code>for</code>, <code>while</code>, or <code>do</code> loop you avoid the overhead .</p></li>
</ul>

<h3>Solutions</h3>

<p><strong>Bug 1</strong> the solution is to change the lines...</p>

<pre><code> const t1 = typeof v1;
 return t1 === "object" &amp;&amp; goDeeper ? deepSameKeys(v1, v2) : true;
</code></pre>

<p>...to include a check for <code>null</code> and have the variable store a bool.</p>

<pre><code> const isObject = v1 !== null &amp;&amp; typeof v1 === "object";
 return isObject ? deepSameKeys(v1, v2) : true;
</code></pre>

<p><sup><strong>Note</strong> I have removed <code>goDeeper</code></sup></p>

<p><strong>Bug 2</strong> There are a few options here. </p>

<ol>
<li><p>If the objects are parsed directly from JSON files then they can not be cyclic and the is no danger of error. This can also be an unenforced condition of the call (no cyclic object) and let the caller deal with the error is the breach the condition.</p></li>
<li><p>Limit the recursion depth. JavaScript's <code>Array.map</code> function uses this method to protect against cyclic references and simply counts the depth down per call and the up on exit. It will not go deeper is this count is <code>&lt;= 0</code></p></li>
<li><p>Track objects recursed using a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set" rel="nofollow noreferrer"><code>Set</code></a>. On each call check if the current object is in the Set, if it is return, if not then put it into the set and process the object. </p></li>
</ol>

<h2>Rewrite</h2>

<p>I am assuming you only want to delete missing properties not properties referencing <code>undefined</code> and the return is not needed.</p>

<p>There are a few versions. After the first I have reduced the variable name lengths to keep the code compact for CR snippet container.</p>

<ul>
<li>Delete undefined properties in reference from dirty. DOES not remove if property references <code>undefined</code>.</li>
<li>Function returns <code>undefined</code></li>
<li>Using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries" rel="nofollow noreferrer">Object.entries</a> to get at the key and value at the same time.</li>
</ul>

<hr>

<p>Keeping the same (almost) behavior and cyclic bug.</p>

<pre><code>const removeMissingProps = (dirty, reference) =&gt; {
    Object.entries(dirty).forEach(([key, val]) =&gt; {
        if (key in reference) {
            val !== null &amp;&amp; typeof val === "object" &amp;&amp; removeMissingProps(val, reference[key]);
        } else { delete dirty[key] }
        return true;
    });
};
</code></pre>

<hr>

<p>To provide a deeper call stack and avoid double state capture.  Using for loop.</p>

<pre><code>function remProps(dirty, ref) {
    for (const [key, val] of Object.entries(dirty)) {
        if (key in ref) {
            val !== null &amp;&amp; typeof val === "object" &amp;&amp; remProps(val, ref[key]);
        } else { delete dirty[key] }
    }
};
</code></pre>

<hr>

<p>To protect against call stack overflow by depth count</p>

<pre><code>function remProps(dirty, ref, depth = 10) {
    if (depth &gt; 0) {
        for (const [k, v] of Object.entries(dirty)) {
            if (k in ref) {
                v !== null &amp;&amp; typeof v === "object" &amp;&amp; remProps(v, ref[k], depth - 1);
            } else { delete dirty[k] }
        }
    }
};
</code></pre>

<hr>

<p>Uses a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet" rel="nofollow noreferrer">WeakSet</a> to check for repeated references.</p>

<pre><code>function remProps(dirty, ref) {
    const checked = new WeakSet();
    remProps(dirty, ref);
    function remProps(dirty, ref) { 
        if (!checked.has(dirty)) {
            checked.add(dirty);
            for (const [k, v] of Object.entries(dirty)) {
                if (k in ref) {                    
                    v !== null &amp;&amp; typeof v === "object" &amp;&amp; remProps(v, ref[k]);
                } else { delete dirty[k] }
            }
        }
    };
};
</code></pre>

<hr>

<p><strong>Update</strong> I forgot to add the last one.</p>

<p>Almost all the recursion functions I see are just implementations of stacks. Recursion has two drawbacks, small stack size (limited to the size of the call stack) and the needless capture of unrelated state.</p>

<p>The following example uses an array rather than the call stack. Its behavior is slightly different (more intuitive) from the function above if you have cyclic references.</p>

<p>There can be significant performance gains using stacks.</p>

<pre><code>function remProps(dirty, ref) {
    const push = (v, ref) =&gt; !chk.has(v) &amp;&amp; (chk.add(v), stack.push([v, ref]));
    const stack = [[dirty, ref]], chk = new WeakSet([dirty]);     
    while (stack.length) {
        [dirty, ref] = stack.pop();
        for (const [k, v] of Object.entries(dirty)) {
            k in ref ? 
                v !== null &amp;&amp; typeof v === "object" &amp;&amp; push(v, ref[k]):
                delete dirty[k];
        }
    }
} 
</code></pre>
    </div>