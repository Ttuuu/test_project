<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Docstring</h1>

<p>I see that you had some docstrings for <em>some</em> of your methods. But I didn't see any for your <code>BankAccount</code> class, or for the module. You should include these as well.</p>

<h1>Bank Structure</h1>

<p>You take input within the deposit and withdraw methods inside the class. These methods should only have one function: adding and subtracting money from the account itself. You should handle user input outside the class.</p>

<h1>Containment</h1>

<p>Right now, all of your user input code is handled in the global scope of the program. This code should be defined to a function, called from a main guard (will get into that later). This will allow you to structure your code better, and separate your code into chunks as needed. It also lets you see the big picture of your program better.</p>

<h1>Consistency</h1>

<p>I see you using <code>"".format()</code> and <code>f""</code>. You should stick to one, as they both do the same thing. Personally, I like to use <code>f""</code> exclusively.</p>

<h1>Main Guard</h1>

<p>As mentioned above, the code outside of your class should be contained in a function called from a main guard, or in the main guard itself.</p>

<p>Main Guard:</p>

<pre><code>if __name__ == '__main__':
    ... code stuff here ...
</code></pre>

<p>Having a main guard clause in a module allows you to both run code in the module directly and also use procedures and classes in the module from other modules. Without the main guard clause, the code to start your script would get run when the module is imported.</p>

<h1>Type Hints</h1>

<p>Using <a href="https://mypy.readthedocs.io/en/latest/cheat_sheet_py3.html" rel="nofollow noreferrer">type hints</a> allows you to see what kinds of variables are to be passed to methods, and what methods return what type of variable. I added some to your class methods, take a look and see how you like them. They can be really helpful.</p>

<p><strong><em>Updated Code</em></strong></p>

<pre><code>"""
Module Docstring (a description of your program goes here)
"""
class BankAccount:
    """
    BankAccount Class
    """
    def __init__(self, name: str):
        self.name = name
        self.balance = 0

    def deposit(self, amount: float) -&gt; bool:
        '''adds money to balance'''
        if amount &gt; 0:
            self.balance += amount
            return True
        return False

    def withdraw(self, amount: float) -&gt; bool:
        '''subtracts money from balance if funds are sufficient'''
        if amount &gt; self.balance or amount &lt; 0:
            return False
        self.balance -= amount
        return True

    def display_balance(self):
        """ displays current account balance """
        print(f'\nNet Available Balance is ${self.balance}')

def interface():
    """
    Interface for interacting with the bank account
    """
    print(f'Hello! Welcome to the Deposit and Withdrawal Machine {name}!')
    while True:
        action = input('\nWould you like to deposit (D), withdraw (W), show balance (S), or exit (E)? ').upper()

        if action in "DWSE":
            if action == "D":
                try:
                    deposit_amount = float(input("How much would you like to deposit: "))
                    if not account.deposit(deposit_amount):
                        print("Please enter a positive number!")
                    else:
                        print(f"Successfully deposited {deposit_amount} into your account.")
                except ValueError:
                    print("Please enter a positive number.")
            if action == "W":
                try:
                    withdraw_amount = float(input("How much would you like to withdraw: "))
                    if not account.withdraw(withdraw_amount):
                        print("You do not have enough money to withdraw.")
                    else:
                        print(f"Successfully withdraw {withdraw_amount} from your account.")
                except ValueError:
                    print("Please enter a positive number.")
            if action == "S":
                account.display_balance()
            if action == "E":
                break

if __name__ == '__main__':
    name = input('What is your name? ')
    account = BankAccount(name)
    interface()
</code></pre>
    </div>