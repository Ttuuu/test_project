<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If you want to go for readability, I would prefer a plain generator approach. This one uses only <span class="math-container">\$\mathcal{O}(n)\$</span> time but uses <span class="math-container">\$\mathcal{O}(k)\$</span> additional space, where <span class="math-container">\$n\$</span> is the number of elements in the list and <span class="math-container">\$k\$</span> is the number of non-empty values. This is in contrast to sorting (<span class="math-container">\$\mathcal{O}(n \log n)\$</span> time <span class="math-container">\$\mathcal{O}(1)\$</span> space) and using two independent list comprehensions (<span class="math-container">\$\mathcal{O}(2n)\$</span> time and <span class="math-container">\$\mathcal{O}(n)\$</span> space).</p>

<p>Note that for speed only the number of elements in the list matters, not how big each element is, because a Python <code>list</code> only stores pointers to the objects.</p>

<pre><code>def empty_first(it):
    buffer = []
    for x in it:
        if x == " ":
            yield x
        else:
            buffer.append(x)
    yield from buffer
</code></pre>

<p>Just wrap the calling code with a <code>list</code>:</p>

<pre><code>list_ = [" ", " ", "X", " ", " ", "Z", " ", "Y", " "]
print(list(empty_first(list_)))
# [' ', ' ', ' ', ' ', ' ', ' ', 'X', 'Z', 'Y']
</code></pre>

<p>Performance wise, all of these approaches might be easier and more readable, but if you need raw speed, you should time the different approaches.</p>
    </div>