<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Would treating the types as an object and then serializing them with BinaryFormatter be a suitable way forward.</p>
<p>Object is the base type of all C# types, even value types.</p>
<p>Like this?</p>
<pre><code>class Program
{
    static void Main(string[] args)
    {
        PacketWriter writer = new PacketWriter();
        writer.Write("Hello, World");
        writer.Write(1);
        writer.Write(true);

        byte[] bytes = writer.GetBytes();

    }
}

class PacketWriter
{
    private List&lt;byte&gt; buffer;

    internal PacketWriter()
    {
        buffer = new List&lt;byte&gt;();
    }

    public byte[] GetBytes()
    {
        return this.buffer.ToArray();
    }

    public void Write(object value)
    {
        this.Write(this.GetBytes(value));
    }

    protected void Write(byte[] value)
    {
        buffer.AddRange(value);
    }

    private byte[] GetBytes(object value)
    {
        using (MemoryStream stream = new MemoryStream())
        {
            BinaryFormatter serialiser = new BinaryFormatter();
            serialiser.Serialize(stream, value);

            return stream.ToArray();
        }
    }
}
</code></pre>
    </div>