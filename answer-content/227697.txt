<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Since <code>writeTo</code> does not modify <code>v</code>, it should take that parameter as a const reference (<code>const std:::vector&lt;T&gt;&amp;v</code>).</p>

<p>In <code>LineEditor</code>, the constructor doesn't initialize <code>ary</code>, so if you construct a LineEditor object and destroy it without calling <code>removeLines</code> (or if that function returns, possibly by an exception, before you allocate the memory) you'll delete an uninitialized pointer.  Those problems can be avoided by using <code>std::vector&lt;int&gt;</code> instead of a raw int pointer.  And since <code>ary</code> is only used within one function (other than deleting the allocated memory), it shouldn't be a class member but should be a local variable within the function.</p>

<p>The <code>removeLines</code> function is doing several things.  It asks for a couple of inputs, then opens the file and removes the lines.  This can be split into two (or more) functions, one to ask for input and another to do the actual removal.  <code>while (fileIn.is_open())</code> can be an <code>if</code> instead since it will be true only once, if at all.</p>

<p>What will happen if the user wants to delete more lines than the file contains?</p>

<p>Deleting lines like you do can be inefficient because <code>erase</code> will move all the entries in the vector after the deleted entry.  If you need to process larger files or deleting a large portion of the lines you may want to use a method that will only move the lines that are not deleted once, although doing that can introduce other problems to avoid.</p>

<p>And then there's <code>getRandomNumber</code>.  The proper way to use the random number generator is to only create the engine (<code>seed</code>) <em>once</em>.  Since the seed is recreated on every function call (a time consuming process), probably within a very small time frame, the value returned by <code>std::time</code> is very likely to be the same, resulting in the same generated random number.  Although the returned number will be different with how you're using it (since the range is different every time), this is still bad practice.  Common solutions to this are to either have a static local variable with the engine, or (preferably) make <code>seed</code> a member of the class, so every instantiation of the class will have its own engine that is only created once.  The distribution object (<code>rand</code>) should remain a local since it can be different on every call.</p>
    </div>