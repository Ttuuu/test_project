<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Only targeting <code>public string[] Convert(string input)</code>  </p>

<ul>
<li>Because this is a <code>public</code> method you should validate the input. Right now if one passes <code>null</code> this will throw an <code>ArgumentNullException</code> which isn't that bad but the stacktrace belongs to <code>System.Linq.Enumerable.Contains()</code> which you should hide.<br>
Just testing against <code>null</code> or using string.IsNullOrWhiteSpace()` will do the trick.  </li>
<li>You are calling <code>input.Split('\n')</code> many many times. It would be much better to call it once and store the result in a variable.  </li>
<li>Don't use <code>Count()</code> method on an array, Using <code>Count()</code> use the <code>Length</code> property instead.  </li>
<li>You should use the overloaded <a href="https://docs.microsoft.com/en-us/dotnet/api/system.string.split?view=netframework-4.7.2#System_String_Split_System_Char___System_StringSplitOptions_" rel="noreferrer"><code>Split()</code></a> method which takes a <code>[StringSplitOptions][2]</code> enum like <code>StringSplitOptions.RemoveEmptyEntries</code>.  </li>
<li>Instead of using <code>double.Parse()</code> you should consider to use <code>double.TryParse()</code> which won't throw an exception if the current string doesn't represent a double like e.g a letter.  </li>
<li>This <code>string.Format("{0}", value * ConversionRate);</code> can be safely removed because the result isn't assigned to anything.  </li>
<li>Instead of returning a <code>string[]</code> you should consider to use an <code>IEnumerable&lt;string</code> or better just an <code>IEnumerable&lt;double&gt;</code> which is more straightforward. Sure that means you need to change your interface as well.  </li>
<li>Using a <code>foreach</code> will make the code shorter because you won't need to check for <code>\n</code>.  </li>
</ul>

<p>Implementing the mentioned points will lead to </p>

<p><strong>string version</strong> </p>

<pre><code>public IEnumerable&lt;string&gt; Convert(string input)
{
    if (string.IsNullOrWhiteSpace(input))
    {
        yield break;
    }
    var values = input.Split(new char[] { '\n' }, StringSplitOptions.RemoveEmptyEntries);
    foreach (var value in values)
    {
        double current;
        if (double.TryParse(value, NumberStyles.Any, CultureInfo.InvariantCulture, out current))
        {
            yield return (current * ConversionRate).ToString();
        }
    }
}
</code></pre>

<p><strong>double version</strong>  </p>

<pre><code>    public IEnumerable&lt;double&gt; Convert(string input)
    {
        if (string.IsNullOrWhiteSpace(input))
        {
            yield break;
        }
        var values = input.Split(new char[] { '\n' }, StringSplitOptions.RemoveEmptyEntries);
        foreach (var value in values)
        {
            double current;
            if (double.TryParse(value, NumberStyles.Any, CultureInfo.InvariantCulture, out current))
            {
                yield return (current * ConversionRate);
            }
        }
    }
</code></pre>

<hr>

<p>Ok, I need to target <code>Controller.Convert()</code> as well  </p>

<p>This is really really bad:  </p>

<blockquote>
<pre><code>string output = "";
for (int i = 0; i &lt; converter.Convert(text).Count(); i++)
{
    output += converter.Convert(text)[i] + Environment.NewLine;
}

return Content(output);  
</code></pre>
</blockquote>

<p>Assume you have <code>text = "\n1\n2\n3\n4\n5.......\n1000"</code> then your code will once call <code>converter.Convert()</code> at<br>
<code>for (int i = 0; i &lt; converter.Convert(text).Count(); i++)</code><br>
which results in <code>Count() = 1000</code> hence the loop will be executed 1000 times which calls <code>converter.Convert(text)</code> 1000 times.
In addition using <code>output +=</code> on strings will lead to very bad performance because each time a new string object is created because strings are immutable.<br>
Better use a <a href="https://docs.microsoft.com/en-us/dotnet/api/system.text.stringbuilder?view=netframework-4.7.2" rel="noreferrer">StringBuilder</a>.</p>

<p>Assuming you use the <code>IEnumerable&lt;double&gt; Convert()</code> this will lead to  </p>

<pre><code>    StringBuilder sb = new StringBuilder(1024);
    foreach (var value in converter.Convert(text))
    {
        sb.AppendLine(value.ToString());
    }

    return Content(sb.ToString());
</code></pre>
    </div>