<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As I said in comments, take a look at Java-Rx, or any Rx implementation, they are almost the same in almost all languages. </p>

<p>First of all, both <code>IObservable</code> and <code>IObserver</code> should be generic, where the type is type of the message in notification:</p>

<pre><code>public interface Observable&lt;T&gt;
{
    public void register(Observer&lt;T&gt; o);
    public void unregister(Observer&lt;T&gt; o);
    public void sendNews(T msg);
}

public interface Observer&lt;T&gt;
{
    public void nextNews(T msg);
    public void finished(); // called when Observable knows it will not produce anymore
    public void error(Exception ex); // for error handling
}
</code></pre>

<p>Now, when observer is registered, observable can send to it full message, so it does not need a reference back to observable. Observable only stores a list of registered observers and when it emits something, it does:</p>

<pre><code>// registration
Observer&lt;Book&gt; r = new Reader();
bookstore.register(r); // this adds r to the bookstore._registeredObservers

void sendNews(T msg)
{
   foreach(T i in _registeredObservers) // _registeredObservers : ArrayList&lt;IObserver&lt;T&gt;&gt;
      i.nextNews(msg);
}
</code></pre>

<p>In your example Bookstore could be <code>Observable&lt;BookOperation&gt;</code>, and book operation could be:</p>

<pre><code>// pseudo code, I don't really know Java

    class BookOperation
{
   public Book book;
   public Operation operation; // this is enum: New, Removed, etc
}
</code></pre>

<p>Or, Bookstore could be just a class with members:</p>

<pre><code>Bookstore.BookAdded : Observable&lt;Book&gt;
Bookstore.BookRemoved : Observable&lt;Book&gt;
</code></pre>

<p>In Rx in most cases you don't really implement Observers, you use register overload that takes lambas.</p>

<p>Real Observers are mostly implemented as operators: observers that are also observables.</p>

<p>For example, <code>observable.filter(x =&gt; x &gt; 5)</code> will return another observable, but only with elements from the first one that are greater than 5.</p>

<p>This approach would also let you do:</p>

<pre><code>Reader r = new Reader();

obs1.register(r);
obs2.register(r); // one reader observes two obervables
</code></pre>

<p>Also, when observer is done, it should uregister - this is managed via <code>IDisposable</code> interface in C#, I'm pretty sure that there is something similar in Java.</p>

<p>This answers all 3 of your questions, I hope. </p>

<p>Now, my coffee is empty, so if you have further questions, I will try to answer them later :)</p>
    </div>