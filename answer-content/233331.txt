<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some minor comments on the code:</p>

<ol>
<li>Class definition should be separated from the line with import by <a href="https://www.python.org/dev/peps/pep-0008/#blank-lines" rel="nofollow noreferrer">two spaces</a>.</li>
<li><p>My personal preference is to have key-value pairs in dictionaries separated with a space after colon as shown in <a href="https://www.python.org/dev/peps/pep-0008/#whitespace-in-expressions-and-statements" rel="nofollow noreferrer">PEP 8</a>: </p>

<pre><code>defaults = {'A': None, 'B': 0, 'C': 0}
</code></pre></li>
<li><p><a href="https://www.python.org/dev/peps/pep-0008/#programming-recommendations" rel="nofollow noreferrer">Comparing to <code>None</code></a> should be done by <code>is</code> instead of <code>==</code>:</p>

<pre><code>required = [key for key, value in defaults.items() if value is None]
</code></pre>

<p>Note that I also removed redundant brackets around <code>key, value</code>.  There are several other lines where brackets are not needed around them.</p></li>
<li><p>PEP 8 also discourages <a href="https://www.python.org/dev/peps/pep-0008/#pet-peeves" rel="nofollow noreferrer">aligning several lines</a> with assignments by <code>=</code>, so instead of, for example:</p>

<blockquote>
<pre><code>results        = None
keys, values   = zip(*setup.items())
</code></pre>
</blockquote>

<p>it should be</p>

<pre><code>results = None
keys, values = zip(*setup.items())
</code></pre></li>
<li><p>There is <a href="https://stackoverflow.com/q/4015417/7851470">no need to specify <code>object</code></a> in <code>class O(object)</code>, <code>class O</code> will work fine.</p></li>
<li><p>Here:</p>

<blockquote>
<pre><code>for key, value in kwargs.items():
    if key in setup:
        setup[key] = kwargs[key]  # user specified overrides default
</code></pre>
</blockquote>

<p>you don't use <code>value</code>, but you could:</p>

<pre><code>for key, value in kwargs.items():
    if key in setup:
        setup[key] = value
</code></pre></li>
<li><p>Here:</p>

<blockquote>
  <p><code>keys, values   = zip(*setup.items())</code></p>
</blockquote>

<p>you don't need <code>values</code> as you overwrite them later. So, I'd just remove this line altogether.</p></li>
<li><p><code>set((1,))</code> can be replaced with <code>{1}</code>, and <code>set.difference</code> can be replaced with just <code>-</code>. BTW, I like how you combined two conditions from my previous review in one!</p></li>
<li><p>Don't forget to use <code>np.can_cast</code> instead of checking the dtypes against <code>np.int64</code>. The current version failed for me until I changed it.</p></li>
<li><p><code>[array.astype(float) for array in arrays]</code> can be written as <code>list(map(np.float64, arrays))</code> but both versions are fine.</p></li>
<li><p>The overall design looks quite unusual to me. If it would be me, I'd separate validating data from the container that will keep it. In other words, I'd not keep it in one class. BTW, if a class has just two methods and one of them is <code>__init__</code> then <a href="https://www.youtube.com/watch?v=o9pEzgHorH0" rel="nofollow noreferrer">it shouldn't be a class</a>. Another thing you could try is <a href="https://pydantic-docs.helpmanual.io/" rel="nofollow noreferrer">pydantic</a> library. Never had a chance to try it myself though, but with this problem of data validation I'd give it a shot.</p></li>
</ol>
    </div>