<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The following is internally equivalent to @nybblet's answer, but uses nicer syntax instead of a manual loop:</p>

<pre><code>f((x,y,z)) = (x^2 + y^2 &lt;= 1) &amp; (z &lt;= x^4 + y^2)

function computeintegral(e, p, variance)
    N = floor(Int, variance / ((1-p)*((e/2)^2))) + 1
    x = (rand() for _ in 1:N)
    y = (rand() for _ in 1:N)
    z = (2rand() for _ in 1:N)

    sum(f, zip(x, y, z)) * 2.0 / N
end
</code></pre>

<p>The trick is to use generators instead of arrays for the random values.  Since you are only iterating over them once, consuming one element at a time, no extra space is used:</p>

<pre><code>julia&gt; @btime sum(f, zip(x, y, z)) * 2.0 / N
  11.289 s (11 allocations: 400 bytes)
0.29453870532956655
</code></pre>

<p>Of course this depends on <code>sum(f, itr)</code> and <code>zip</code> using iterators in the right (lazy) way.</p>

<p><code>f</code> makes use of <a href="https://docs.julialang.org/en/v1/manual/functions/#Argument-destructuring-1" rel="nofollow noreferrer">argument destructuring</a>, introduced (I think?) in 0.7.</p>

<p>And I replaced the usage of a <code>Distribution</code> object in <code>z</code> by a simple transformation, but that was just to save adding a package.  For more complex domains, it probably makes things more readable.</p>
    </div>