<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>You don't need <code>count_1</code> and <code>count_2</code> just one count.</p>

<p><span class="math-container">$$
\begin{align}
    \text{even}\ + \text{odd} &amp;= \text{length}\\
    \text{even}\ = \text{odd} &amp;= \text{count}\\
    \therefore 2\text{count} &amp;= \text{length}
\end{align}
$$</span></p></li>
<li><p>You can just <code>return &lt;exp&gt;</code> rather than </p>

<pre class="lang-py prettyprint-override"><code>if &lt;exp&gt;:
    return True
else:
    return False
</code></pre></li>
<li><p>You don't need the first <code>if n % 2 == 0:</code> check.</p></li>
</ul>

<pre class="lang-py prettyprint-override"><code>def balanced(lst):
    n = len(lst)
    if n % 2 != 0:
        return False
    count = 0
    for item in lst:
        if item % 2 == 1:
            count += 1
    return 2 * count == n
</code></pre>

<ul>
<li><p>You can use <a href="https://docs.python.org/3/library/functions.html#sum" rel="noreferrer"><code>sum</code></a> and a comprehension to create <code>count</code>.
If we build a list of counts then we can see how <code>sum</code> works with lists:</p>

<pre class="lang-py prettyprint-override"><code>counts = []
for item in lst:
    if item % 2 == 1:
        counts.append(1)
count = sum(counts)
</code></pre>

<p>This should make sense as it's just totalling all the values. From here we can use some sugar to build a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="noreferrer">list comprehension</a>.
This would look like:</p>

<pre class="lang-py prettyprint-override"><code>counts = [
    1
    for item in lst
    if item % 2 == 1
]
count = sum(counts)
</code></pre>

<p>You should see that it builds the list with a lot less noise. Making code quicker to read and more minimalistic.</p>

<p>From here we can merge them all into one line, and convert the list comprehension to an implicit <a href="https://www.python.org/dev/peps/pep-0289/" rel="noreferrer">generator expression</a>.</p>

<pre class="lang-py prettyprint-override"><code>count = sum(1 for item in lst if item % 2 == 1)
</code></pre></li>
<li><p>You can remove the <code>if</code> as <code>item % 2</code> is either 1 or 0, and so summing will provide the count of odd numbers.</p></li>
<li>I would prefer seeing <code>items</code> or <code>values</code> rather then <code>lst</code></li>
</ul>

<pre class="lang-py prettyprint-override"><code>def balanced(items):
    if len(items) % 2 != 0:
        return False
    count = sum(i % 2 for i in items)
    return 2 * count == len(items)
</code></pre>

<p>If we remove your well thought out optimization, then we can put this on one line:</p>

<pre class="lang-py prettyprint-override"><code>def balanced(items):
    return len(items) == 2 * sum(i % 2 for i in items)
</code></pre>
    </div>