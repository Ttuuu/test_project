<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>To start with, you're not doing DDD here.</p>

<p>DDD (Domain-Driven Design / Development) is based around the idea that we <em>start with</em> the domain. We don't touch code yetâ€”we develop the domain models <em>on-paper</em> (or whiteboard, whatever is preferred). Once that is done, we build the code <em>as closely to the domain</em> as possible. The point of DDD is that the code should <em>mirror</em> the domain design.</p>

<p>Before we get going, I <em>highly, highly, <strong>highly</strong></em> recommend this book, by Scott Wlaschin, a prominent F# developer who brings DDD into a <em>very</em> easy-to-understand view (the examples are F#, but they apply to C# as well): <a href="https://pragprog.com/book/swdddf/domain-modeling-made-functional" rel="nofollow noreferrer">Domain Modeling made Functional</a></p>

<p>DDD is about:</p>

<ol>
<li><p><strong>Define the domain, the inputs, and the outputs.</strong> That is, as a user of the system, what does the domain <em>need</em> to do. Here it sounds like we have <em>part</em> of the domain defined:</p>

<blockquote>
  <p>As part of an insurance claims system we have created, the claims managers can log incoming telephone calls relating to a claim.</p>
  
  <p>The claims manager must validate the caller by asking a number of 'Data Protection' questions that are generated dynamically from information stored against the claim in a database. I believe this type of security is known as 'knowledge-based authentication'.</p>
  
  <p><strong>Notes about Data Protection Questions:</strong></p>
  
  <ul>
  <li>Some questions are mandatory and some are not.</li>
  <li>All mandatory questions must be answered in order to validate the caller.</li>
  <li>At least one non-mandatory question must be answered in order to validate the 
  caller.</li>
  <li>Additional non-mandatory questions can remain unanswered.</li>
  <li>Each question may have multiple correct answers.</li>
  </ul>
</blockquote></li>
<li><p><strong>From there, we define our types.</strong> Generally, I do DDD with F#, but it's just as applicable to C#. We model the <em>physical</em> domain, so here we're not modeling the <em>questions</em>, we're modeling the <em>validation</em>. That is: the user must answer various questions and prove they are <strong>knowledgeable on the claim.</strong></p>

<p>This is the root of our domain model: we need to <em>validate</em> some information. You have mixed multiple pieces here, so we're going to separate them a bit.</p></li>
<li><p><strong>After building the types, we build the work.</strong> That is, the functions. We build the types as <em>just</em> data-structures, then we build the functions next to encapsulate the <em>domain rules</em>.</p></li>
</ol>

<p>So, you've defined the domain (at least, as far as I see it) via the quoted-blurb, so what I want to do is move that into some types.</p>

<p>To start with, we'll define a <code>DataProtectionResponse</code> (we're going to use the <em>exact</em> language from the domain model, the purpose of DDD is to translate the human-language into code).</p>

<pre><code>class DataProtectionResponse {
    public DataProtectionQuestion Question { get; set; }
    public IEnumerable&lt;ValidQuestionAnswer&gt; ValidQuestionAnswers { get; set; }
    public Response Response { get; set; }
}
</code></pre>

<p>Now, we need to come up with a model for <code>DataProtectionQuestion</code>:</p>

<pre><code>class DataProtectionQuestion {
    public string Question { get; set; }
    public bool Required { get; set; }
}
</code></pre>

<p>As you see, we are ONLY modeling two components of the question: the actual question, and whether or not it's required. The questions <em>themselves</em> are a different part of the domain, they're generated <em>as a question</em>, and using this is how we get into building a flexible model. We can now take these <em>same questions</em> somewhere else, and use them as a whole other tool, assuming it needs to interact with our <em>current</em> domain.</p>

<p>Next, we have <code>ValidQuestionAnswer</code>. This is going to be the answer that are valid for <em>this</em> particular claim:</p>

<pre><code>class ValidQuestionAnswer {
    public Response Response { get; set; }
}
</code></pre>

<p>We made this a class as we <em>absolutely</em> want to consider a situation where an answer might have more data to it.</p>

<p>Finally, the <code>Response</code>. You might say, "Der Kommissar, why does that need to be a class, it's always a string?" Again, we <em>might</em> need to add more to this model, including functionality, so we do that by using a class.</p>

<pre><code>class Response {
    public string Value { get; set; }
}
</code></pre>

<p>So now, our domain will consume an <code>IEnumerable&lt;DataProtectionResponse&gt;</code>, but <em>not</em> directly.</p>

<pre><code>class DataProtection {
    public IEnumerable&lt;DataProtectionResponse&gt; Questions { get; set; }
}
</code></pre>

<p>Why another class? Well, let's start talking functionality.</p>

<p>First and foremost, the primary component of our design is that <code>DataProtection</code> <em>must</em> validate. For this to work, we need a <code>IsValid</code> function or property there:</p>

<pre><code>public bool IsValid =&gt; Questions.All(x =&gt; x.IsSufficient);
</code></pre>

<p>Alright, so we have some concepts now. We have a <code>IsValid</code> that indicates if our <code>DataProtection</code> is valid or not, and we have decided that <em>all</em> of the questions must be sufficiently answered.</p>

<p>Next, we need to prove that a question is sufficiently answered.</p>

<pre><code>public bool IsSufficient =&gt; ValidQuestionAnswers.Any(x =&gt; x.Acceptable(Question, Response));
</code></pre>

<p>Again, we are going to encode our actual logic: this <code>DataProtectionResponse</code> is sufficient if <em>any</em> of the <code>ValidQuestionAnswers</code> are acceptable with the question and response.</p>

<p>Next, how do we prove they're acceptable?</p>

<p>Well, the first rule is that if it's not required and there is no response, then it's valid:</p>

<pre><code>if (!question.Required &amp;&amp; response?.IsEmpty ?? false == false)
{
    return true;
}
</code></pre>

<p>And of course, <code>Response.IsEmpty</code>:</p>

<pre><code>public bool IsEmpty =&gt; String.IsNullOrWhiteSpace(Value);
</code></pre>

<p>Otherwise, we want to prove that this response and the provided response are acceptable:</p>

<pre><code>return response.Satisfies(Response);
</code></pre>

<p>And this is why we made it a class right-off-the-bat: we might have more logic that goes into <code>Satisfies</code> that might do heuristic analysis. I.e. if you provide an address, the logic might say <code>123 Main St.</code> and <code>123 Main St</code> and <code>123 Main Street</code> are all the same.</p>

<pre><code>public bool Acceptable(DataProtectionQuestion question, Response response)
{
    if (!question.Required &amp;&amp; response?.IsEmpty ?? true)
    {
        return true;
    }

    return response.Satisfies(Response);
}
</code></pre>

<p>Next, our <code>Response.Satisfies</code>:</p>

<pre><code>public bool Satisfies(Response response) =&gt; Value == response.Value;
</code></pre>

<p>And viola, we're done. We've encoded the entire domain, concisely, and using the <em>actual terms</em> the domain considers. Only 37 lines of code:</p>

<pre><code>class Response
{
    public string Value { get; set; }
    public bool IsEmpty =&gt; String.IsNullOrWhiteSpace(Value);

    public bool Satisfies(Response response) =&gt; Value == response.Value;
}
class ValidQuestionAnswer
{
    public Response Response { get; set; }

    public bool Acceptable(DataProtectionQuestion question, Response response)
    {
        if (!question.Required &amp;&amp; response?.IsEmpty ?? true)
        {
            return true;
        }

        return response.Satisfies(Response);
    }
}
class DataProtectionQuestion
{
    public string Question { get; set; }
    public bool Required { get; set; }
}
class DataProtectionResponse
{
    public DataProtectionQuestion Question { get; set; }
    public IEnumerable&lt;ValidQuestionAnswer&gt; ValidQuestionAnswers { get; set; }
    public Response Response { get; set; }
    public bool IsSufficient =&gt; ValidQuestionAnswers.Any(x =&gt; x.Acceptable(Question, Response));
}
class DataProtection
{
    public IEnumerable&lt;DataProtectionResponse&gt; Questions { get; set; }
    public bool IsValid =&gt; Questions.All(x =&gt; x.IsSufficient);
}
</code></pre>

<p>We don't have any odd logic, we don't have any conflated values: each model concerns itself with it's own work, no one else's.</p>

<p>Additionally, when our domain changes now (or we have to change the satisfaction logic) we have built the flexibility in-place without needing major infrastructure rewrites. If we need to override a response, we encode that in <code>DataProtectionResponse</code> and modify <code>IsSufficient</code>.</p>

<p>Finally, you could even shorten <code>Acceptable</code> to a single statement, since the logic is relatively straightforward:</p>

<pre><code>class Response
{
    public string Value { get; set; }
    public bool IsEmpty =&gt; String.IsNullOrWhiteSpace(Value);

    public bool Satisfies(Response response) =&gt; Value == response.Value;
}
class ValidQuestionAnswer
{
    public Response Response { get; set; }

    public bool Acceptable(DataProtectionQuestion question, Response response) =&gt;
        (!question.Required &amp;&amp; response?.IsEmpty ?? true) || response.Satisfies(Response);
}
class DataProtectionQuestion
{
    public string Question { get; set; }
    public bool Required { get; set; }
}
class DataProtectionResponse
{
    public DataProtectionQuestion Question { get; set; }
    public IEnumerable&lt;ValidQuestionAnswer&gt; ValidQuestionAnswers { get; set; }
    public Response Response { get; set; }
    public bool IsSufficient =&gt; ValidQuestionAnswers.Any(x =&gt; x.Acceptable(Question, Response));
}
class DataProtection
{
    public IEnumerable&lt;DataProtectionResponse&gt; Questions { get; set; }
    public bool IsValid =&gt; Questions.All(x =&gt; x.IsSufficient);
}
</code></pre>

<hr>

<p>You noted in the comments that I missed the requirement of <em>at least one</em> optional question, and you're absolutely right. So let's talk about another strength of DDD: verifying our code matches the domain.</p>

<blockquote>
  <p>At least one non-mandatory question must be answered in order to validate the caller.</p>
</blockquote>

<p>So, looking through our code we see that we can start with <code>DataProtection.IsValid</code>:</p>

<pre><code>public bool IsValid =&gt; Questions.All(x =&gt; x.IsSufficient);
</code></pre>

<p>Aha, we already know our problem is here. We make sure all questions are sufficient, but that does not take <em>at least one</em> optional into account. So how do we fix that?</p>

<p>Well, to start, we'll modify <code>IsValid</code> to support some theoretical work:</p>

<pre><code>public bool IsValid =&gt; Questions.All(x =&gt; x.IsSufficient) &amp;&amp; Questions.Where(x =&gt; !x.IsRequired).Any(x =&gt; x.IsAnswered);
</code></pre>

<p>Here, we've decided that if each <code>DataProtectionResponse</code> tells us if it's required or not, and if it's answered or not, we can prove that we have <em>at least one</em> non-required question answered.</p>

<p>Next, we need to implement those two items. Both are trivial, and actually help with our other code:</p>

<pre><code>public bool IsRequired =&gt; Question.Required;
public bool IsAnswered =&gt; ValidQuestionAnswers.Any(x =&gt; x.AnsweredBy(Response));
</code></pre>

<p>Now we have another method to implement: <code>ValidQuestionAnswer.AnsweredBy(Response)</code>:</p>

<pre><code>public bool AnsweredBy(Response response) =&gt; response.Satisfies(Response);
</code></pre>

<p>You'll notice we've repeated one bit of code: <code>response.Satisfies(Response)</code> is in both <code>AnsweredBy</code>, and <code>Acceptable</code>, let's change that:</p>

<pre><code>public bool Acceptable(DataProtectionQuestion question, Response response) =&gt;
    (!question.Required &amp;&amp; response?.IsEmpty ?? true) || AnsweredBy(Response);
</code></pre>

<p>Once again, our contract is now satisfied, and we ONLY go at-most one-level-deep in each model from a parent model. (That is, we could have done <code>!x.Question.Required</code> instead of <code>!x.IsRequired</code>, but it's not the responsibility of <code>DataProtection</code> to know what makes a response required or not.)</p>

<p>So, 36 lines of code to build our new requirements:</p>

<pre><code>class Response
{
    public string Value { get; set; }
    public bool IsEmpty =&gt; String.IsNullOrWhiteSpace(Value);

    public bool Satisfies(Response response) =&gt; Value == response.Value;
}
class ValidQuestionAnswer
{
    public Response Response { get; set; }

    public bool AnsweredBy(Response response) =&gt; response.Satisfies(Response);

    public bool Acceptable(DataProtectionQuestion question, Response response) =&gt;
        (!question.Required &amp;&amp; response?.IsEmpty ?? true) || AnsweredBy(Response);
}
class DataProtectionQuestion
{
    public string Question { get; set; }
    public bool Required { get; set; }
}
class DataProtectionResponse
{
    public DataProtectionQuestion Question { get; set; }
    public IEnumerable&lt;ValidQuestionAnswer&gt; ValidQuestionAnswers { get; set; }
    public Response Response { get; set; }

    public bool IsRequired =&gt; Question.Required;
    public bool IsAnswered =&gt; ValidQuestionAnswers.Any(x =&gt; x.AnsweredBy(Response));
    public bool IsSufficient =&gt; ValidQuestionAnswers.Any(x =&gt; x.Acceptable(Question, Response));
}
class DataProtection
{
    public IEnumerable&lt;DataProtectionResponse&gt; Questions { get; set; }
    public bool IsValid =&gt; Questions.All(x =&gt; x.IsSufficient) &amp;&amp; Questions.Where(x =&gt; !x.IsRequired).Any(x =&gt; x.IsAnswered);
}
</code></pre>

<hr>

<p>Finally, you asked a few questions about your implementation: as you see, I ignored them, <em>purposefully</em>. With DDD, those questions are not things to ask about the <em>implementation</em> but things to ask about the <em>domain</em>. With DDD we do iterations of "design", "implement", "design", "implement"â€”all the questions you have should go in the <em>design</em> stage, which is where you (and the other domain experts) gather and hash-out the principles of the project. This means, now that you have an implementation, we go back to design and clarify those questions. As the developer, when you see these things you should be creating a working list of potential problem-points, you might find out the domain-experts have considered them, or they may not, so you take your concerns back to them and <em>refine</em> the design. (Again, DDD is an iterative concept.)</p>

<p><em>But</em>, suppose I were to answer them:</p>

<blockquote>
  <p>Should the entity have methods like 'SetAnswer' or 'SetAnswerIsValid'?</p>
</blockquote>

<p><strong>A</strong>: That's actually a design question, do you <em>need</em> to override whether an answer is valid or not? (I briefly touched on that in the first part of the answer.)</p>

<blockquote>
  <p>Should the setters be private and should clients supply data through a constructor?</p>
</blockquote>

<p><strong>A</strong>: This <em>seems</em> like an implementation question at first glance, but if we reword it things are different: <em>can a client change an answer</em>? If the answer is yes, the proposed design is fine. If not, model for immutability.</p>

<blockquote>
  <p>Should an Answer be an entity in its own right with a property for 'IsValid'?</p>
</blockquote>

<p><strong>A</strong>: In my humble opinion, <em>yes</em>. Answers aren't a string, they're a <em>concept</em>. Additionally, with a base-class, you can override that for answers that are <code>bool</code>, <code>DateTime</code>, etc. But, again: take it back to the DDD drawing board. The domain model will tell you what needs done.</p>

<blockquote>
  <p>How do I display answers in the UI to include 'Unanswered' and 'Incorrect Answer'?</p>
</blockquote>

<p><strong>A</strong>: That's a design question, but my suggestion is to ditch the <code>Valid</code> checkbox and provide a red/green "Needs Answered", "Incorrect Answer", or "Correct Answer" state. Again, do what the <em>domain</em> calls for. You're mixing some concerns here, and with DDD we create a clear separation. When you have a question <em>like this</em>, we go <em>back</em> into the design stage and hash it out. (It might turn out that you <strong>must not</strong> indicate if an answer is incorrect. Compliance laws are weird.)</p>
    </div>