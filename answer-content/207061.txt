<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'd say this is far too complicated. It took me some time to figure out what those expressions are getting rewritten to, and the results do not look very efficient:</p>

<p><code>(x =&gt; new { x.Name.Length, x.Price }).Invoke(left).Length &lt; (x =&gt; new { x.Name.Length, x.Price }).Invoke(right).Length || ...</code></p>

<hr>

<p>What are the benefits here compared to a simple <code>Comparer&lt;T&gt;</code> class that wraps a <code>Func&lt;T, T, int&gt;</code>? Not only would that require less boilerplate code, it also simplifies the calling code and should be several times faster:</p>

<pre><code>var comparer = new Comparer&lt;Product&gt;((x, y) =&gt;
{
    if (x.Name.Length &lt; y.Name.Length || x.Price &lt; y.Price) return -1;
    if (x.Name.Length == y.Name.Length || x.Price == y.Price) return 0;
    return 1;
});
products.OrderByDescending(p =&gt; p, comparer).ToList();
</code></pre>

<p>Automatically taking care of the standard reference checks in the <code>Comparer</code> class is a good idea - I'd definitely keep that. However, what if <code>Name</code> is null? With the above approach, you can use Elvis operators, but they're apparently not (yet?) supported in expression trees.</p>
    </div>