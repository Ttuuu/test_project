<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You can use the built-in <a href="https://docs.python.org/3/library/functions.html?highlight=getattr#getattr" rel="nofollow noreferrer"><code>getattr</code></a> function to extract an attribute by name. Likewise the <code>setattr</code> function to set attributes.</p>
<p>This means you can pass the name of the attribute to a private function, unifying the code:</p>
<pre><code>def _find_nodes_with_no(pred_succ: str, nodes: List[Node]) -&gt; List[Node]:
    """ Find nodes with either no predecessors, or no successors. """

    if pred_succ not in ("predecessors", "successors"):
        raise ValueError("pred_succ must be either 'predecessors' or 'successors'")

    return [node for node in nodes if not getattr(node, pred_succ)]
</code></pre>
<p>Your <code>add_start</code> and <code>add_end</code> functions can thus be written to pass the appropriate names:</p>
<pre><code>def add_start(graph: Graph):
    info = ("create_start_node", "predecessors", "successors")
    _add_outer_node(graph, info)

def add_end(graph: Graph):
    info = ("create_end_node", "successors", "predecessors")
    _add_outer_node(graph, info)
</code></pre>
<p>Then in <code>_add_outer_node</code> you can do things like:</p>
<pre><code>cmeth, main_links, back_links = info
create_method = getattr(Node, cmeth)
new_node = create_method(graph)

# ...

outer_nodes = _find_nodes_with_no(main_links, graph)
</code></pre>
<p>One thing I do question it your "manual" connection of both the predecessor and successor links. It seems like you want those to be reflexive, so why not create an <code>add_predecessor</code> method that automatically creates the reciprocal link? Likewise with <code>add_successor</code>?</p>
    </div>