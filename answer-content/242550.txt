<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Formatting</h1>

<p>Your code deviates from the official Rust coding style in a few small aspects:</p>

<blockquote>
<pre><code>use std::{collections::HashMap,
io::stdin};
</code></pre>
</blockquote>

<p>The line break should not be there:</p>

<pre><code>use std::{collections::HashMap, io::stdin};
</code></pre>

<blockquote>
<pre><code>fn throw (error: String) {
    // --snip--
}
</code></pre>
</blockquote>

<p>Functions should not be followed by a space.</p>

<blockquote>
<pre><code>pub struct Interpreter {
    // --snip
    pub tape: [u8; 3000]
}
</code></pre>
</blockquote>

<p>Put a trailing comma for consistency.</p>

<h1><code>use</code></h1>

<blockquote>
<pre><code>use std::{collections::HashMap,
io::stdin};
</code></pre>
</blockquote>

<p>In Rust, functions are conventionally accessed by bringing their parent modules into scope using <code>use</code> (see the <a href="https://doc.rust-lang.org/book/ch07-04-bringing-paths-into-scope-with-the-use-keyword.html#creating-idiomatic-use-paths" rel="nofollow noreferrer">relevant section</a> of the book):</p>

<pre><code>use std::collections::HashMap;
use std::io;
</code></pre>

<h1>Error handling</h1>

<blockquote>
<pre><code>fn throw (error: String) {
    println!("{}", error);
    std::process::exit(0);
}
</code></pre>
</blockquote>

<p>Rust already has <a href="https://doc.rust-lang.org/std/macro.panic.html" rel="nofollow noreferrer"><code>panic!</code></a> for this.</p>

<blockquote>
<pre><code>let mut code = String::new();
println!("Brainf code:");
stdin().read_line(&amp;mut code).unwrap();
</code></pre>
</blockquote>

<p>Provide a friendly error message:</p>

<pre><code>io::stdin()
    .read_line(&amp;mut code)
    .expect("Failed to read code");
</code></pre>

<h1>Interaction</h1>

<blockquote>
<pre><code>let mut code = String::new();
println!("Brainf code:");
stdin().read_line(&amp;mut code).unwrap();

let mut input = String::new();
println!("Inputs for the program:");
stdin().read_line(&amp;mut input).unwrap();
</code></pre>
</blockquote>

<p>Prefer to print interaction code on stderr by using <a href="https://doc.rust-lang.org/std/macro.eprintln.html" rel="nofollow noreferrer"><code>eprintln!</code></a> instead of <code>println!</code>.  This allows users to conveniently redirect output to files.</p>

<p>This pattern can be extracted into a function:</p>

<pre><code>use std::io;

fn ask_input(prompt: &amp;str) -&gt; io::Result&lt;String&gt; {
    eprintln!("{}", prompt);

    let mut input = String::new();
    io::stdin().read_line(&amp;mut input)?;

    Ok(input)
}
</code></pre>

<p>This function returns a <a href="https://doc.rust-lang.org/std/io/type.Result.html" rel="nofollow noreferrer"><code>io::Result</code></a>, the result type of I/O functions, for customizable error handling.  Then the <code>main</code> function can be simplified and mutable variables are no longer necessary:</p>

<pre><code>fn main() {
    let code = ask_input("Brainf code:").expect("Failed to read code");
    let input = ask_input("Input:").expect("Failed to read input");

    // --snip--
}
</code></pre>

<h1>Types and constants</h1>

<blockquote>
<pre><code>pub enum Instruction {
    // --snip--
    StartLoop(u32), // u32 is the index of the end of the loop
    EndLoop(u32),   // u32 is the index of the start of the loop
    // --snip--
}
</code></pre>
</blockquote>

<p>In my opinion, a dedicated type alias for positions makes the code clearer:</p>

<pre><code>type Pos = usize;

pub enum Instruction {
    // --snip--
    StartLoop(Pos),
    EndLoop(Pos),
}
</code></pre>

<p>Similarly for cells: (I avoided <a href="https://doc.rust-lang.org/std/cell/struct.Cell.html" rel="nofollow noreferrer"><code>Cell</code></a> to reduce confusion)</p>

<pre><code>type TapeCell = u8;
const TapeLength: usize = 3000;

pub struct Interpreter {
    // --snip--
    pub tape: [TapeCell; TapeLength],
}
</code></pre>

<h1><code>Interpreter</code></h1>

<p>The fields should be private, not <code>pub</code>.</p>

<p>I think the code having balanced brackets is an invariant of the struct, and the <code>build</code> functions belong to the construction process.  I would define a specialized type for syntax errors:</p>

<pre><code>use fmt::{self, Display};

// better names welcome
#[derive(Copy, Debug)]
pub enum SyntaxErrorKind {
    BadClosure,
    OpenLoop,
}

#[derive(Debug)]
pub struct SyntaxError {
    pub kind: SyntaxErrorKind,
    pub pos: Pos,
}

impl Display for SyntaxError {
    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {
        match self.kind {
            BadClosure =&gt; write!(f, "Closure of nonexistent loop at position {}", self.pos),
            OpenLoop =&gt; write!(f, "Unclosed loop at position {}", self.pos),
        }
    }
}
</code></pre>

<p>refactor <code>build_loop_map</code> and <code>build_instructions</code> to associated functions:</p>

<pre><code>fn build_instructions(code: &amp;str) -&gt; Vec&lt;Instructions&gt; {
    // --snip--
}

fn build_loop_map(code: &amp;str) -&gt; Result&lt;HashMap&lt;Pos, Pos&gt;, SyntaxError&gt; {
    // --snip--
}
</code></pre>

<p>and define an associated function <code>new</code> for <code>Interpreter</code>:</p>

<pre><code>pub fn new(code: String, input: String) -&gt; Result&lt;Interpreter, SyntaxError&gt; {
    let instructions = build_instructions(&amp;code);
    let loops = build_loop_map(&amp;code)?;
    Ok(Interpreter {
        instructions,
        pointer: 0,
        code,
        loops,
        input,
        tape: [0; 3000],
    })
}
</code></pre>

<p>Storing loop information in both the map and instructions is redundant; keep one of them.  You also don't need to store the code.</p>
    </div>