<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Keep the scope of variables to a minimum</h1>

<p>Since C99 we are allowed to mix declaration and code. At the moment, you have <code>i</code>, <code>j</code>, <code>rest</code> and so on in scope, even if <code>day</code> is out of the specification. That can lead to hard to find errors, for example if we accidentally use <code>i++</code> where <code>i</code> isn't used.</p>

<p>Late declaration makes it easier to copy our code into other blocks also, but more on that later. So instead, let's push the declaration as late as possible and limit the scope:</p>

<pre><code>#include&lt;stdio.h&gt;

int main(){
    int day;
    scanf("%d",&amp;day);

    //Check for exceptions
    if(day&lt;=1){
        printf("You cannot generate christmas tree");
        return 0;
    }
    else if(day&gt;20){
        printf("Tree is no more");
        return 0;
    }

    // printf("Heres Your Christmas Tree:\n\n");

    // For first part
    int leaves=1;
    int branches=day+1;
    int max_leaves = 1+(branches-1)*2; // Arithmetic Progression
    for(int i=1;i&lt;=branches;i++){
        for(int j=i;j&lt;=max_leaves/2;j++){
            printf(" ");
        }
        for(int j=1;j&lt;=leaves;j++){
            printf("*");
        }
        printf("\n");
        leaves=leaves+2;
    }

    // For remaining parts
    branches=branches-2;
    for(int rest=1;rest&lt;=day-2;rest++){
        leaves=3;
        for(int i=2;i&lt;=branches+1;i++){
            for(int j=i;j&lt;=max_leaves/2;j++){
                printf(" ");
            }
            for(int j=1;j&lt;=leaves;j++){
                printf("*");
            }
            printf("\n");
            leaves=leaves+2;
        }
        branches--;
    }

    // For stand
    for(int i=1;i&lt;=2;i++){
        for(int j=1;j&lt;=max_leaves/2;j++){
            printf(" ");
        }
        printf("*\n");
    }

    return 0;
}
</code></pre>

<h1>Use whitespace to scan code quickly</h1>

<p>Now that we've introduced late declarations, let us add some whitespace between operators. Gone are the days where bytes in source code where expensive. Unless you intend write-only code, make code easy to read. Debugging is much nicer in well-written and spaced code:</p>

<pre><code>#include &lt;stdio.h&gt;

int main() {
    int day;
    scanf("%d", &amp;day);

    // Check for exceptions
    if (day &lt;= 1) {
        printf("You cannot generate christmas tree");
        return 0;
    } else if (day &gt; 20) {
        printf("Tree is no more");
        return 0;
    }

    // printf("Heres Your Christmas Tree:\n\n");

    // For first part
    int leaves = 1;
    int branches = day + 1;
    int max_leaves = 1 + (branches - 1) * 2; // Arithmetic Progression
    for (int i = 1; i &lt;= branches; i++) {
        for (int j = i; j &lt;= max_leaves / 2; j++) {
            printf(" ");
        }
        for (int j = 1; j &lt;= leaves; j++) {
            printf("*");
        }
        printf("\n");
        leaves = leaves + 2;
    }

    // For remaining parts
    branches = branches - 2;
    for (int rest = 1; rest &lt;= day - 2; rest++) {
        leaves = 3;
        for (int i = 2; i &lt;= branches + 1; i++) {
            for (int j = i; j &lt;= max_leaves / 2; j++) {
                printf(" ");
            }
            for (int j = 1; j &lt;= leaves; j++) {
                printf("*");
            }
            printf("\n");
            leaves = leaves + 2;
        }
        branches--;
    }

    // For stand
    for (int i = 1; i &lt;= 2; i++) {
        for (int j = 1; j &lt;= max_leaves / 2; j++) {
            printf(" ");
        }
        printf("*\n");
    }

    return 0;
}
</code></pre>

<p>By the way, your text editor should provide some automatic format feature. I formatted the code with <code>clang-format -style="{BasedoNStyle: llvm, IndentWidth: 4}"</code>, since that's very similar to your variant.</p>

<h1>Don't repeat yourself</h1>

<p>Now that we have easy to read code, we can see that there are repeating patterns, namely</p>

<pre><code>for(int k = init; k &lt;= stop; k++) {
    printf("some string");
}
</code></pre>

<p>We have at least five occurrences. So let's write a small function:</p>

<pre><code>void repeat_string(int times, const char* str) {
    for(int i = 0; i &lt; times; ++i) {
        printf("%s",str);
    }
}
</code></pre>

<p>Let's replace all occurrences of your loop with the function:</p>

<pre><code>#include &lt;stdio.h&gt;

void repeat_string(int times, const char* str) {
    for(int i = 0; i &lt; times; ++i) {
        printf("%s",str);
    }
}

int main() {
    int day;
    scanf("%d", &amp;day);

    // Check for exceptions
    if (day &lt;= 1) {
        printf("You cannot generate christmas tree");
        return 0;
    } else if (day &gt; 20) {
        printf("Tree is no more");
        return 0;
    }

    // printf("Heres Your Christmas Tree:\n\n");

    // For first part
    int leaves = 1;
    int branches = day + 1;
    int max_leaves = 1 + (branches - 1) * 2; // Arithmetic Progression

    for (int i = 1; i &lt;= branches; i++) {
        repeat_string(max_leaves / 2 - i, " ");
        repeat_string(leaves, "*");
        printf("\n");
        leaves = leaves + 2;
    }

    // For remaining parts
    branches = branches - 2;
    for (int rest = 1; rest &lt;= day - 2; rest++) {
        leaves = 3;
        for (int i = 2; i &lt;= branches + 1; i++) {
            repeat_string(max_leaves / 2 - i, " ");
            repeat_string(leaves, "*");
            printf("\n");
            leaves = leaves + 2;
        }
        branches--;
    }

    // For stand
    for (int i = 1; i &lt;= 2; i++) {
        repeat_string(max_leaves / 2; " ");
        printf("*\n");
    }

    return 0;
}
</code></pre>

<p>Again, it's easier too read. Also, any optimization we find for <code>repeat_string</code> will now help at all five call sites. Great.</p>

<p><strong>Exercises:</strong></p>

<ol>
<li>Write <code>repeat_character(int n, char c)</code>, which prints a single character <code>c</code> a total of <code>n</code> times.</li>
<li><p>If we look closely, we can see that the branches look very similar:</p>

<pre><code>for (int i = 1; i &lt;= branches; i++) {           // &lt;---
    repeat_string(max_leaves / 2 - i, " ");     // &lt;---
    repeat_string(leaves, "*");                 // &lt;---
    printf("\n");                               // &lt;---
    leaves = leaves + 2;                        // &lt;---
}

// For remaining parts
branches = branches - 2;
for (int rest = 1; rest &lt;= day - 2; rest++) {
    leaves = 3;                                 
    for (int i = 2; i &lt;= branches + 1; i++) {   // &lt;---
        repeat_string(max_leaves / 2 - i, " "); // &lt;---
        repeat_string(leaves, "*");             // &lt;---
        printf("\n");                           // &lt;---
        leaves = leaves + 2;                    // &lt;---
    }
    branches--;
}
</code></pre>

<p>Write a function that draws a single part, e.g. a trapezoid or pyramid width a given width, height, and so on.</p></li>
</ol>

<h1>Mark read-only values and locations with <code>const</code></h1>

<p>We denoted the <code>str</code> as <code>const char*</code> in order to make sure that we don't accidentally change string's contents. In the same spirit, we can add <code>const</code> to <code>max_leaves</code>:</p>

<pre><code>…
const int max_leaves = 1 + (branches - 1) * 2; // Arithmetic Progression
…
</code></pre>

<p>Now typos like <code>max_leaves /= 2</code> will get cought by the compiler.</p>

<h1>Use 0…(n-1) as range, not 1…n</h1>

<p>Your ranges use <code>start = 1; i &lt;= end; start++</code>. Since we often work with arrays in C++ and arrays start with <code>0</code>, it's more common to work with <code>start = 0; start &lt; end; start++</code>. Keep that in mind for future code.</p>

<h1>Other remarks</h1>

<p>You mix <code>leaves</code>, <code>branches</code> and <code>max_leaves</code>, but their exact meanings are lost for the unprepared reader. Some additional comments can be helpful.</p>

<p>Other than that, the missing whitespace and therefore code structuring was my biggest criticism, but that's a minor point that can get fixed quickly.</p>

<p>Here's the complete code:</p>

<pre><code>#include &lt;stdio.h&gt;

void repeat_string(int times, const char *str) {
    for (int i = 0; i &lt; times; i++) {
        printf("%s", str);
    }
}

void repeat_character(int times, char c) {
    // Exercise 1
}

void draw_part(int height, int start_width, int max_width) {
    // Exercise 2
}

int main() {
    int day;
    scanf("%d", &amp;day);

    // Check for exceptions
    if (day &lt;= 1) {
        printf("You cannot generate christmas tree");
        return 0;
    } else if (day &gt; 20) {
        printf("Tree is no more");
        return 0;
    }

    // printf("Heres Your Christmas Tree:\n\n");

    // For first part
    int branches = day + 1;
    const int max_leaves = 1 + (branches - 1) * 2; // Arithmetic Progression

    // For first part
    draw_part(branches, 1, max_leaves);

    // For remaining parts
    branches -= 2;
    for (int rest = 0; rest &lt; day - 2; rest++) {
        draw_part(branches, 3, max_width);
        branches--;
    }

    // For stand
    for (int i = 0; i &lt; 2; i++) {
        repeat_string(max_leaves / 2; " ");
        printf("*\n");
    }

    return 0;
}
</code></pre>
    </div>