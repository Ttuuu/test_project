<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Style</h2>

<ol>
<li>Use proper styling. You should use more whitespaces, this will make your code more readable. Instead of <code>num_sort=new</code> use <code>num_sort = new</code>, insead of <code>i!=min_index</code> use <code>i != min_index</code>, etc</li>
<li>Follow the Java naming conventions: variable and function names should use <em>camelCase</em>, not <em>snake_case</em>. </li>
<li>You should include documentation that explains the user how the class is used. For example, without looking at the code I would not expect that creating a new instance of the class automatically sorts the list, so it is something you must make clear in the documentation.</li>
</ol>

<h2>Comments</h2>

<p>Commenting the code is good, but too many comments can make a simple function look complicated. The general rule is that <strong>code tells you how, comments tell you why</strong>.</p>

<p>For example, I think <code>int min = this.num_sort.get(i);</code> does not need to be commented; it's pretty clear that you are getting the <em>i-th</em> item of the list.</p>

<p>Also, leave a whitespace between <code>//</code> and the text, it's more readable.</p>

<h2>Code structure</h2>

<p>It does not make sense to have this in a class; <code>new SelectionSort(userlist)</code> is not the way someone would expect to sort a list. I am going to make some recommendations that for the class design, but for the rest of the review I will restructurate the code so that it is more conventional.</p>

<p>As a user I expect <code>select_sort</code> to sort the list and that's all; I decide whether I want to print the list or not (what if I want to print it differently to you?). So you should move the printing code to the <code>main</code> function.</p>

<h3>Class design</h3>

<p>If you were to continue with the current class design, there must be some changes:</p>

<ol>
<li>Do not sort the list in the construction. It is not the expected behaviour. Let the user call <code>sortSelect()</code>. Actually, I think <code>selectionSort()</code> would be a better name.</li>
<li>Is <code>exchange</code> a method that is meant to be used by the user? I don't think so, so make it <code>private</code> instead of <code>public</code> so only the class code can use it.</li>
<li><code>num_sort</code> does not seem like an intuitive name; I had to look at the code to know what it is. Just calling it <code>list</code> would be better.</li>
<li>You don't care how the list is internally implemented, you only care that it is a list. So use the more generic <code>List</code> interface instead of <code>ArrayList</code>.</li>
<li>You are assigning your list twice: on <code>num_sort=new ArrayList&lt;&gt;()</code> and on <code>this.num_sort=userlist;</code>. The first one is not necessary, because it will always be replaced in the constructor. Furthermore, since you never reassign the list again, you should declare it <code>final</code>.</li>
</ol>

<pre class="lang-java prettyprint-override"><code>private final List&lt;Integer&gt; list;

public SelectionSort(List&lt;Integer&gt; userList) {
    this.list = userList;
}
</code></pre>

<h3>Alternative design</h3>

<ol>
<li>In my opinion, your selection sort algorithm should just be one <code>static</code> method that takes the list as input. That would make it similar to the <code>Collections.sort()</code> method that already exists in Java.</li>
<li><code>Scanner</code> is a resource that must be closed. You can make Java close it automatically by using a <a href="https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html" rel="nofollow noreferrer">try with resources</a>.</li>
</ol>

<pre class="lang-java prettyprint-override"><code>try (Scanner in = new Scanner(System.in)) {
    // your code
}
</code></pre>

<ol start="3">
<li>You can still keep the convenience method <code>exchange</code> (as <code>static</code> and taking the list as parameter), but since it is quite short and you only call it in one place I think you could just write the code directly. If you decide to keep the function, I would change the parameter names to just <code>i</code> and <code>j</code>, and the method name to <code>swap</code> (it's more common). Since it's the same doing <code>exchange(current_elem, new_min)</code> than <code>exchange(new_min, current_elem)</code> those parameter names do not make much sense. BUT you don't even need to implement that method, you can just use <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#swap-java.util.List-int-int-" rel="nofollow noreferrer"><code>Collections.swap()</code></a></li>
</ol>

<h2>Final code</h2>

<pre class="lang-java prettyprint-override"><code>/**
 * Sorts the given list using a selection sort algorithm.
 * @param list The list to be sorted.
 */
public static void selectionSort(final List&lt;Integer&gt; list) {
    // outer for loop to pick one element at a time
    // e.g if list is 20,12,3,4,5,6,98----this loop will first pick 20
    for (int i = 0; i &lt; list.size(); i++) {
        int min = list.get(i);
        int minIndex = i;
        // Go over the rest of the list and compare minimum by rest of list. If number smaller than min is found, then it is assigned as new min
        // So go over list starting from 12 and comparing 20 with each of them and finding the new min, in this case it will be  3
        for (int j = i + 1; j &lt; list.size(); j++) {
            if (list.get(j) &lt; min) {
                min = list.get(j);
                minIndex = j;
            }
        }
        if (i != minIndex) {
           Collections.swap(list, i, minIndex);
        }
    }
}


public static void main(String[] args) {
    try (Scanner in = new Scanner(System.in)) {
        System.out.println("Enter how many numbers you want to sort");
        int count = in.nextInt();

        System.out.println("Enter the numbers you want to sort");
        List&lt;Integer&gt; list = new ArrayList&lt;&gt;();
        for(int i = 0; i &lt; count; i++) {
            list.add(in.nextInt());
        }

        selectionSort(list);

        System.out.println("Sorted entered are: ");
        for (int x : list) {
            System.out.print(x + " ");
        }
    }
}
</code></pre>
    </div>