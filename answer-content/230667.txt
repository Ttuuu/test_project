<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>People usually pay not much attention to that, but redundant <code>*Manager</code>, <code>*Processor</code>, <code>*Service</code> suffixes are just some form of signal noise. It is also questionable that two way is really needed the same time at the same place on the consuming side. I would go with:</p>

<pre><code>interface IEncryptor 
{
     byte[] Encrypt(byte array);
}

public static class Encryptor
{
     public static string Encrypt(this IEncryptor encryptor, string text) =&gt;
         (Hex)encryptor.Encrypt((UTF8)text); 
} 
</code></pre>

<p>And:</p>

<pre><code>interface IDecryptor 
{
     byte[] Decrypt (byte array);
}

public static class Decryptor
{
     public static string Decrypt(this IDecryptor encryptor, string text) =&gt;
         (UTF8)encryptor.Decrypt((Hex)text); 
} 
</code></pre>

<p>The helper would be:</p>

<pre><code>class Hex
{
    public static explicit operator Hex(string hex) =&gt; ...
    public static explicit operator Hex(byte[] bytes) =&gt; ...

    public static implicit operator string(Hex hex) =&gt; ...
    public static implicit operator byte[](Hex hex) =&gt; ...
}
</code></pre>

<p>And: </p>

<pre><code>class UTF8
{
    public static explicit operator UTF8(string hex) =&gt; ...
    public static explicit operator UTF8(byte[] bytes) =&gt; ...

    public static implicit operator string(UTF8 utf) =&gt; ...
    public static implicit operator byte[](UTF8 utf) =&gt; ...
}
</code></pre>

<p>Now we will have:</p>

<pre><code>public interface IMD5CSP : IEncryptor { … }

public class MD5CSP : IMD5CSP, IDisposable { … }
</code></pre>

<p>And I would consume it allowing to be precise in ctor, but having no concrete dependencies later in the code:</p>

<pre><code>class MyService 
{           
      public MyService(IMD5CSP csp) =&gt; Encryptor = csp;
      IEncryptor Encryptor { get; }
}
</code></pre>
    </div>