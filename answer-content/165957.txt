<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Bugs in PrimeNumberClassic</h2>

<p>There are multiple bugs in this class : 2 is not prime, while any number &lt;= to 1 are considered prime :(</p>

<p>Some large number may results in infinite loop !!! (I'm going into more details about that at the end of my post)</p>

<p>Before considering the rest of my reviews, you should :</p>

<ul>
<li>correct them</li>
<li>make unit tests (check JUnit) for your two classes for some cases (2, multiple even numbers not 2, 3, 5, 7, 31, 277, some really big numbers and a negative number for example)</li>
</ul>

<h2>Consider using bigger number</h2>

<p><code>int</code> aren't that big, if you plan on doing math calculations, you should consider switching to <code>long</code> or <code>BigInteger</code>.</p>

<p>Well now, the real review :</p>

<h2>Review of PrimeNumber</h2>

<p>I don't really get what this class is about. The name makes it sounds like it's storing a prime number but it's not... it actually looks like a <em>Factory</em> of some sort.</p>

<p>I'd consider removing it unless you want to add more features (in which case that may be the object of a future, follow-up, question ^^).</p>

<h2>Review of PrimeAbstract</h2>

<pre><code>/**
 * abstract class of prime number object
 */
abstract class PrimeAbstract {

    public abstract boolean isPrime(int number);
}
</code></pre>

<p>Why is this an <code>abstract class</code> ? It's clearly an <code>interface</code>, also the javadoc is pretty useless.</p>

<p>The name is not very good... why <code>PrimeAbstract</code> ? Aren't <code>PrimeNumberFinder</code>/ <code>PrimeNumberDetector</code> name closer to the intent ?</p>

<h2>Review of PrimeAbstract's childs</h2>

<p>The code in the implementation really needs to <em>breathe</em> !</p>

<p>Put some spaces in it ;) it's tiring to read it as of now.</p>

<p>As a rule of thumb, put spaces between the <code>=</code> (as well as things like += ofc) sign, the '?' sign and theirs operands as well as between comparators and their operands.</p>

<pre><code>if (number%2==0) return false;
</code></pre>

<p>I'm one of the people that don't really care about using <code>{</code> for very simple cases... however putting the return on the same line makes it harder to read IMO.</p>

<p>As said in others questions, any good IDE have a code formatter included solving all previous points (and auto-indenting your code) ;)</p>

<p>The Sieve is okish... I don't really like the fact that it fails with an exception when you use <code>isPrime</code> with a too big number. Also you should make the field <code>private</code> ;)</p>

<p>I'd probably make the sieve <em>lazy</em> and not compute it until <code>isPrime</code> is called for the first time.</p>

<p>1000 is a magic number and should be turned into a constant.</p>

<p>Finally, storing every results in an array is really space-inefficient. Maybe consider storing only the integers that are prime into an <code>HashSet</code>, the <code>contains</code> method with a <code>HashSet</code> is incredibly fast.</p>

<p>I'd optimize <code>PrimeNumberClassic</code> to :</p>

<ul>
<li>know the results for some very small primes (reducing the complexity for "common" cases)</li>
<li>go for at most sqrt of number... yeah I know you already do that with i*i but it's less clear, likely less performant and it's buggy (if i grows large it'll overflow and you find yourself with a potentially infinite loop or accessing indexes that aren't in your array... no good)</li>
</ul>

<p>So in the end this implementation may look like something like :</p>

<pre><code>public boolean isPrime(final int number) {
    if (number == 2) {
        return true;
    } else if (number % 2 == 0) {
        return false;
    } else if (number &lt; 36) {
        return number == 3 || number == 5 || number == 7 || number == 11 || number == 13
                || number == 17 || number == 19 || number == 23 || number == 29 || number == 31;
    }

    final int max = (int) Math.round(Math.sqrt(number));
    for (int i = 3; i &lt;= max; i += 2) {
        if (number % i == 0)
            return false;
    }
    return true;
}
</code></pre>
    </div>