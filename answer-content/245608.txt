<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Multiplying by 3</h1>
<blockquote>
<p>The multiplication part seems overly complicated. The problem is, <code>mul</code> doesn't take an immediate, and the register that I want to multiply is <code>ebx</code>, not <code>eax</code>, so I need to do a couple <code>mov</code>s before I can multiply.</p>
</blockquote>
<p>This is all true, but based on the premise that the <code>mul</code> instruction must be used. Here are a couple of alternatives:</p>
<ul>
<li><code>imul ebx, ebx, 3</code>, listed in the manual as a <em>signed</em> multiplication, but that <a href="https://stackoverflow.com/q/45495711/555045">makes no difference</a>, because only the low half of the product is used.</li>
<li><code>lea ebx, [ebx + 2*ebx]</code>, even the +1 can be merged into it: <code>lea ebx, [ebx + 2*ebx + 1]</code>. As a reminder, <code>lea</code> evaluates the address on the right and stores it in the destination register, it does not access memory despite the square-brackets syntax. 3-component <code>lea</code> takes 3 cycles on some processors (eg Haswell, Skylake), making it slightly slower than a 2-component <code>lea</code> and a separate <code>inc</code>. 3-component <code>lea</code> is good on Ryzen.</li>
</ul>
<h1>Dividing by 10</h1>
<p>The simplest way is of course to use the <code>div</code> instruction, but that's not the fastest way, and it's not what a compiler would do. Here is a faster way, similar to <a href="https://gcc.godbolt.org/z/Yn7vsW" rel="noreferrer">how compilers do it</a>, based on multiplying by a fixed-point reciprocal of 10 (namely 2<sup>35</sup> / 10, the difference between 2<sup>35</sup> and 2<sup>32</sup> is compensated for by shifting right by 3, the remaining division by 2<sup>32</sup> is implicit by taking the high half of the output of <code>mul</code>).</p>
<pre><code>; calculate quotient ecx/10
mov eax, 0xCCCCCCCD
mul ecx
shr edx, 3
mov eax, ecx
mov ecx, edx
; calculate remainder as n - 10*(n/10)
lea edx, [edx + 4*edx]
add edx, edx
sub eax, edx
</code></pre>
<h1><code>push edx</code> in print_int</h1>
<p>This will put 4 bytes on the stack for every character of the decimal representation of the integer, 1 actual char and 3 zeroes as filler. That looks fine when printed because a zero does not look like anything, so I'm not sure if this should be classed as a bug, but it just seems like an odd thing to do. The characters could be written to some buffer byte-by-byte, with a store and decrementing the pointer, then there would not be zeroes mixed in. A similar "subtract pointers to find the length"-trick could be used, that's a good trick.</p>
<h1>Small tricks</h1>
<blockquote>
<pre><code>mov edx, 0  ; Zeroing out edx for div
</code></pre>
</blockquote>
<p>That's fine but <a href="https://stackoverflow.com/q/33666617/555045"><code>xor edx, edx</code> is preferred</a>, unless the flags must be preserved.</p>
<blockquote>
<pre><code>    jmp .end
.even
</code></pre>
</blockquote>
<p>Given that <code>n</code> is odd, <code>3n+1</code> is even, so you could omit the jump and have the flow of execution fall straight into the "even" case. Of course that means that not all integers in the sequence are printed, so maybe you can't use this trick, depending on what you want from the program.</p>
<p>If skipping some numbers to accelerate the sequence is OK, here is an other trick for that: skip a sequence of even numbers all at once by counting the trailing zeroes and shifting them all out.</p>
<pre><code>tzcnt ecx, ebx
shr ebx, cl
</code></pre>
<blockquote>
<pre><code>   mov esp, ebp
   pop ebp
</code></pre>
</blockquote>
<p>If you want (it doesn't make a significant difference, so it's mostly personal preference), you can use <code>leave</code> instead of this pair of instructions. Pairing the <code>leave</code> with <code>enter</code> is not recommended <a href="https://stackoverflow.com/q/29790175/555045">because <code>enter</code> is slow, but <code>leave</code> itself is OK</a>. GCC likes to use <code>leave</code> when it makes sense, but Clang and MSVC don't.</p>
<blockquote>
<pre><code>       cmp ecx, 0
       jne .loop
</code></pre>
</blockquote>
<p>That's fine, but there are a couple of alternatives that you may find interesting:</p>
<ul>
<li>
<pre><code>test ecx, ecx
jne .loop
</code></pre>
Saves a byte, thanks to not having to encode the zero explicitly.</li>
<li>
<pre><code>jecxz .loop
</code></pre>
This special case can be used because <code>ecx</code> is used. Only 2 bytes instead of 5 or 4. However, unlike a fusible arith/branch pair, this costs 2 Âµops on Intel processors. On Ryzen there is no downside.</li>
</ul>
    </div>