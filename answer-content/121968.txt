<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>doc strings</h1>

<p>Good. I like seeing doc strings. But, let's take a closer look.</p>

<pre><code>class ObjectPicker:
    """
    An object that stores other objects with weights, and is able to
    pick out one stored object, with a higher chance for higher weighted
    objects.
    """
</code></pre>

<p>Ok, that is a lot of text. Can we separate this out into two sections with a short title?</p>

<pre><code>class ObjectPicker:
    """
    Choose a random element taking weights into account.

    Elements with a higher weight have a higher change of being chosen.
    """
</code></pre>

<p>On to the init.</p>

<pre><code>    def __init__(self):
        """
        Initialize the Object Picker object. Create the instance variable
        bucket for storing objects.
        """
        ...
</code></pre>

<p>There are two things wrong with it. It is telling me the following:</p>

<ul>
<li>It initialises the Object Picker object: That's what <code>__init__</code> is supposed to do. Good. But that does not really warrant mentioning. So you can leave that portion out.</li>
<li>It creates an instance variable <code>bucket</code> for storing objects: That's an implementation detail. Where and when the <code>bucket</code> variable is initialized does not really matter. That it creates a variable <code>bucket</code> instead of <code>storage</code> or something else does not matter. Again, leave that out.</li>
</ul>

<p>So we move to</p>

<pre><code>    def __init__(self):
        ...
</code></pre>

<p>(That is, remove the doc string.)</p>

<p><code>add</code> and <code>pick</code> can be given similar treatments. Importantly, add an extra empty line between the documentation, and the parameter description.</p>

<h1>Comments</h1>

<p>Look at the following code</p>

<pre><code>if self.bucket:  # If there is anything in the bucket.
    total = self.bucket[-1][-1]  # Get the end number of the last item.
else:  # If the bucket is empty.
    total = 0  # End number is 0.
</code></pre>

<p>The comments for the <code>if</code> and <code>else</code> are really trivial. You can easily drop them. Please do.</p>

<p>Consider what your comments add to the code. If they detail <em>how</em> it's implemented, try very hard to find a way to remove them without reducing the clarity. The following is just as clear.</p>

<pre><code>if self.bucket:
    total = self.bucket[-1][-1]  # Get the end number of the last item.
else:
    total = 0
</code></pre>

<p>You notice I left 1 comment in. That's because of the <code>end</code> number. If you follow the <code>namedtuple</code> advice below, you can replace that line with</p>

<pre><code>total = self.bucket[-1].end
</code></pre>

<p>(without the comment). The code is just as clear.</p>

<h2>Excessive commenting in general</h2>

<p>Another comment I'd just like to point out. Somewhere in the code I see</p>

<pre><code>return None  # Return None.
</code></pre>

<p>As an outsider, comments like this make me believe that you are a beginner in Python, or even programming in general. Probably even following a class where the lecturer dictates comments like that.</p>

<p>Commenting like this screams 'I know nothing'. However, when I read the code without the comments, it's very readable, and only a few comments remain that are actually necessary. Actually, just two:</p>

<pre><code># Get the end number of the last item.
</code></pre>

<p>and</p>

<pre><code># Start binary search in middle of storage object.
</code></pre>

<p>To remove them, you'd need to refactor your code. And later on I'll give you the ingredients needed in a bit more detail.</p>

<p>You might want to leave in some more comments, depending on how comfortable you are, but make sure that the comments add value. Commonly, that's done by explaining <strong>why</strong> a piece of code is written, not what it does.</p>

<p>Let me state the following a bit more clearly. It is the excessive commenting that makes me doubt your experience. Reading your code (and explanation) tells me a different story: You know how to handle a binary search (and from what I can see, correctly), you know something about complexity theory. This is somebody to be reckoned with.</p>

<h1>Algorithm</h1>

<h2>Storing of elements.</h2>

<p>You use a tuple to store the elements, leading to code such as</p>

<pre><code>total = self.bucket[-1][-1]
</code></pre>

<p>and</p>

<pre><code>start, end = storage[index][2:]
</code></pre>

<p>The tuple is always the same size, and the same form. So, why not make it a namedtuple? Put the following import at the top of your file:</p>

<pre><code>from collections import namedtuple

RangedElement = namedtuple('RangedElement', ['value', 'length', 'start', 'end'])
</code></pre>

<p>(I cheated a bit, I moved from weights to lengths, because it somewhat makes more sense when talking about start and end.)</p>

<p>Then, instead of</p>

<pre><code>self.bucket.append((item, weight, total, total + weight))
</code></pre>

<p>write</p>

<pre><code>self.bucket.append(RangedElement(item, weight, total, total + weight))
</code></pre>

<p>Yes, it's more typing. But, instead of</p>

<pre><code>total = storage[-1][-1]
</code></pre>

<p>you can now write</p>

<pre><code>total = storage[-1].end
</code></pre>

<p>Which is much better.</p>

<h1>Getting the (random) element.</h1>

<h2>Defaulting</h2>

<p>You already mentioned you were not sure about the defaulting. Important should be the question 'why the defaulting'?</p>

<p>From what I can see, the only reason for the defaulting is the recursive algorithm you use, which is a recursive bisection algorithm (or binary search algorithm). It would be good to separate the bisecting from the choosing.</p>

<pre><code>def _bisect(self, choice, storage):
    """
    Bisect to find the stored object.
    """
    # Bisection is currently done recursively

    # Start binary search in middle of storage object.
    index = len(storage) // 2
    start, end = storage[index][2:]

    # If the choice is lower, recursively search left half.
    if choice &lt; start:
        return self._bisect(choice, storage[:index])
    # If the choice is higher, recursively search right half.
    elif choice &gt; end:
        return self._bisect(choice, storage[index + 1:])
    # Otherwise, choice is in number spread and return object.
    else:
        return storage[index][0]        

def pick(self):
    """
    Pick an object from the bucket recursively,
    taking weight into account.

    :param choice: Number of choice.
    :param storage: Storage Object to choose from.
    """
    if not self.bucket:  # If bucket is empty.
        return None  # Return None.
    else:
        storage = self.bucket  # Storage is bucket
        total = storage[-1][-1]  # Get final weight.

    # Randomly choose a number to represent the choice.
    choice = random.random() * total

    return self._bisect(choice, storage)
</code></pre>

<p>(Why I chose this: I saw that some arguments were recursion-specific, and were basically saying "Don't do this when you're already recursing". A clear pointer that we were mixing two concerns, which are now better separated).</p>

<p>Note that splitting like this can be somewhat dangerous when this method is called somewhere else as well with the extra parameters. Sufficient unit tests would detect it.</p>

<h2>Bisecting</h2>

<p>You probably saw I named the helper method <code>_bisect</code>. That is because it uses a fairly trivial bisection algorithm. The algorithm works recursively. Recursive algorithms are really nice, but Python has a recursion-limit, no tail-call optimisations, and you are also building subslices of <code>bucket</code>.</p>

<p>In fact, look at the following lines:</p>

<pre><code>index = len(storage) // 2
....
    return self.pick(choice, storage[:index])
....
    return self.pick(choice, storage[index + 1:])
....
</code></pre>

<p>In the first call, you're copying exactly half the list. Slicing a list is linear in the length of the resulting slice. So this alone is O(n/2) = O(n). Due to recursion, you get O(n/2 + n/4 + n/8 + ...) (still O(n), though).</p>

<p>So your algorithm is actually linear due to copying. However, this is fixable. Instead of slicing storage, pass in offsets (<code>hi</code>/<code>lo</code>), calculate <code>mid = lo + (hi - lo) // 2</code>. Then recurse using <code>hi = mid</code> or <code>lo = mid + 1</code>.</p>

<p>However, instead of re-inventing the wheel, why not look at the Python bisect module?</p>

<p><a href="https://hg.python.org/cpython/file/3.5/Lib/bisect.py" rel="noreferrer">https://hg.python.org/cpython/file/3.5/Lib/bisect.py</a></p>

<p>(I'm intentionally pointing at the source, because I'm going to copy the code, not call the module)</p>

<pre><code>def _bisect(self, choice, storage):
   lo, hi = 0, len(storage)
    while True:
        mid = (lo + hi) // 2
        if storage[mid].end &lt; choice:
            lo = mid + 1
        elif storage[mid].start &gt; choice:
            hi = mid
        else:
            return storage[mid].value
</code></pre>

<p>Now I just hope I got my boundary conditions right (that's always a problem with a bisection algorithm). Just write plenty of unit tests for this specific part, please!</p>

<h2>Choosing from an empty storage?</h2>

<p>I'm specifically talking about the following lines:</p>

<pre><code>if not self.bucket:  # If bucket is empty.
    return None  # Return None.
</code></pre>

<p>Is <code>None</code> also an allowed value in your buckets? If so, this could cause confusing bugs. Better:</p>

<pre><code>if not self.bucket:
    raise EmptyBucketError("Can't pick from an empty bucket.")
</code></pre>

<p>or something similar. But this is something you need to decide yourself.</p>

<h1>Conclusion</h1>

<p>Great code, but it could use some (very) minor improvements with great benefits:</p>

<ul>
<li>namedtuple</li>
<li>extract binary search from picking an element.</li>
<li><strong>removing</strong> comments.</li>
</ul>
    </div>