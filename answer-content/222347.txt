<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Person + Derived Classes</h3>
<ul>
<li><code>accessibleFloors</code> is a breach of <em>Openâ€“closed principle</em>. Anyone is able to modiy this collection.</li>
<li><code>accessibleFloors</code> could be considered a breach of <em>Single responsibility principle</em>. Consider having a <code>Role</code> class and <code>Person</code> storing his <code>Roles</code> set. This way, you can also mitigate redundant code and remove the need of derived classes as <code>EmployeeFromThirdFloor</code>, <code>Guest</code> and <code>MaintenanceEmployee</code> (in this trivial example these classes are not required).</li>
<li><code>accessibleFloors</code> can be <code>null</code>. The code is not able to handle this situation.</li>
<li><code>HasAccess</code> is way to convoluted: <code>accessibleFloors.Contains(_floor);</code> would do it.</li>
</ul>
<blockquote>
<pre><code>public abstract class Person
{
    public Floors[] accessibleFloors;

    public bool HasAccess(Floors _floor)
    {
        foreach (Floors i in accessibleFloors)
        {
            if (_floor == i)
            {
                return true;
            }
        }
        return false;
    }
}
</code></pre>
</blockquote>
<p>We can create a class <code>Role</code>.</p>
<pre><code>public class Role 
{
    public HashSet&lt;Floors&gt; AccessibleFloors { get; }

    public Role (HashSet&lt;Floors&gt; accessibleFloors) 
    {
        AccessibleFloors = accessibleFloors 
            ?? throw new ArgumentNullException(nameof(accessibleFloors));
    }

    public bool HasAccess(Floor floor)
    { 
        return AccessibleFloors.Contains(floor);
    }

    // override equals and gethashcode ..
}
</code></pre>
<p>We can refactor <code>Person</code>.</p>
<pre><code>public class Person
{
    public HashSet&lt;Role&gt; Roles { get; }

    public Person(HashSet roles) {
        Roles = roles ?? throw new ArgumentNullException(nameof(roles));
    }

    public bool HasAccess(Floors floor)
    {
        return Roles.Any(r =&gt; r.HasAccess(floor));
    }
}
</code></pre>
<p>Because of <em>Inheritance</em>, the derived classes do not require to create their own instance variable <code>_accessibleFloors</code>.</p>
<blockquote>
<p><code>base.accessibleFloors = _accessibleFloors;</code></p>
</blockquote>
<hr>
<h3>Elevator</h3>
<ul>
<li>There is tight-coupling between an <code>Elevator</code> and a <code>Person</code>. You force the elevator to exist only with a person. What about an empty elevator.</li>
<li><code>GoToFloor</code> is not usable code. Consider returning a <code>Boolean</code> and putting the <code>Console.WriteLine</code> in the calling code.</li>
<li>The code cannot handle when <code>Person</code> is <code>null</code>.</li>
</ul>
<blockquote>
<pre><code>public class Elevator
{
    Person person;
    public Elevator(Person _person)
    {
        this.person = _person;
    }

    public void GoToFloor(Floors _floor)
    {
        if (person.HasAccess(_floor))
        {
            Console.WriteLine("Elevating to " + _floor.ToString());
        }
        else
        {
            Console.WriteLine("No Access to " + _floor.ToString());
        }
    }
}
</code></pre>
</blockquote>
<p><code>Elevator</code> could be refactored as follows.</p>
<pre><code>public class Elevator
{
    public Person Person { get; private set; }

    public bool IsFull =&gt; Person != null;
    public bool IsEmpty =&gt; Person == null;

    public bool Enter(Person person)
    {
        if (person == null) throw new ArgumentNullException(nameof(person));
        if (IsFull) return false;
        Person = person;
        return true;
    }

    public bool Exit(Floors floor)
    {
        if (IsEmpty) return false;
        if (!Person.HasAccess(floor)) return false;
        Person = null;
        return true;
    }
}
</code></pre>
<hr>
<h3>Program</h3>
<pre><code>class Program
{
    static void Main(string[] args)
    {
        var guestRoles = new HashSet&lt;Role&gt; { 
            new Role(new HashSet&lt;Floors&gt; { Floors.FirstFloor }) 
        };
        var guest = new Person(guestRoles);
        var elevator = new Elevator();
        
        if (elevator.Enter(guest)) 
        {
            Console.WriteLine("guest has entered elevator");
        }
        else 
        {
            Console.WriteLine("guest cannot enter elevator: elevator is full");
        }

        if (elevator.Exit(Floors.FirstFloor)) 
        {
            Console.WriteLine("guest has exited elevator at FirstFloor");
        }
        else 
        {
            Console.WriteLine("guest cannot exit elevator at FirstFloor: access is denied");
        }

        Console.ReadLine();
    }
}
</code></pre>
    </div>