<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First things first: <strong>You definitely don't need to be making multiple regex function calls while looping the elements generated by a splitting regex function.</strong>  Time for an almost complete rewrite.  <code>preg_replace_callback()</code> is the tool that I recommend to do all the heavy lifting. </p>

<p>Normally, I like to do everything in a single regex expression, but the retaining of the multiple spaces is a simple operation that is sensibly set apart.</p>

<p>There WILL be other fringe cases that other reviewers may shout out (e.g. handling multibyte characters or calling <code>preg_quote()</code> on the incoming blacklist words to avoid any regex pattern conflicts with special characters, and let's not forget about troublesome Mr <code>McGee</code>) but I am going to only focus on the quality of data that you have presented.</p>

<p>There will be other ways to write the pattern but I have a high appreciation for the clarity of <code>(*SKIP)(*FAIL)</code> it basically consumes substrings that should be disqualified and then discards them.  The pipe after the skip-fail non-capturing group will match qualifying consecutive letters. The fullstring matches are passed to the custom function where the first letter is converted to uppercase, then returned.  Finally the fully modified string is returned from the <code>preg_replace_callback()</code>.</p>

<p>My regex pattern uses negative lookaheads with the start and end of string anchors (<code>^</code> &amp; <code>$</code>) to implement the rule regarding capitalizing the first and last word.  Word boundaries (<code>\b</code>) are a great way to isolate a whole word (or parts of a hyphenated word).</p>

<p>Code: (<a href="https://3v4l.org/MgYCK" rel="nofollow noreferrer">Demo</a>)</p>

<pre><code>$tests = [
    ['this is a test', 'This Is a Test', false],
    ['why sunless tanning is A hot trend', 'Why Sunless Tanning Is a Hot Trend', false],
    ['Satin Sheets are a Luxury you Can Afford', 'Satin Sheets Are a Luxury You Can Afford', false],
    ['the Dangers Of Hiking Without Proper Shoes', 'The Dangers of Hiking Without Proper Shoes', false],
    ['an hour or so', 'An Hour or So', false],
    ['Of the meaning Of Of', 'Of the Meaning of Of', false],
    ['Thing With     Extra Spaces', 'Thing With Extra Spaces', false],
    ['Thing with     extra spaces', 'Thing With     Extra Spaces', true],
    ['Observations of isolated pulsars and disk-fed X-ray binaries.', 'Observations of Isolated Pulsars and Disk-Fed X-Ray Binaries.', false]
];

function APATitle($title, $keepMultipleSpaces = false, $blackList = [])
{
    if (!is_string($title)) {
        return false;
    }

    $blackList = $blackList
        ? array_map('strtolower', (array)$blackList)
        : ['a', 'an', 'and', 'at', 'but', 'by', 'for', 'in', 'nor', 'of', 'on', 'or', 'so', 'the', 'to', 'up', 'yet'];

    if (!$keepMultipleSpaces) {
        $title = preg_replace('~\s+~', ' ', $title);
    }

    return preg_replace_callback(
        '~(?!^)\b(?:' . implode('|', $blackList) . ')\b(?!$)(*SKIP)(*FAIL)|\b[a-z]+\b~',
        function ($m) {
            return ucfirst($m[0]);
        },
        strtolower($title)
    );
}

foreach ($tests as [$input, $expectedOutput, $keepMultipleSpaces]) {
    $output = APATitle($input, $keepMultipleSpaces);
    echo ($output === $expectedOutput ? 'SUCCESS' : 'FAILURE') . ":\t\"{$input}\" became \"{$output}\"\n";
}
</code></pre>

<p>Output:</p>

<pre><code>SUCCESS:    "this is a test" became "This Is a Test"
SUCCESS:    "why sunless tanning is A hot trend" became "Why Sunless Tanning Is a Hot Trend"
SUCCESS:    "Satin Sheets are a Luxury you Can Afford" became "Satin Sheets Are a Luxury You Can Afford"
SUCCESS:    "the Dangers Of Hiking Without Proper Shoes" became "The Dangers of Hiking Without Proper Shoes"
SUCCESS:    "an hour or so" became "An Hour or So"
SUCCESS:    "Of the meaning Of Of" became "Of the Meaning of Of"
SUCCESS:    "Thing With     Extra Spaces" became "Thing With Extra Spaces"
SUCCESS:    "Thing with     extra spaces" became "Thing With     Extra Spaces"
SUCCESS:    "Observations of isolated pulsars and disk-fed X-ray binaries." became "Observations of Isolated Pulsars and Disk-Fed X-Ray Binaries."
</code></pre>
    </div>