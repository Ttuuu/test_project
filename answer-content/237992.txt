<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>PEP-8</h1>

<p><code>ClassNames</code> should be <code>BumpyWords</code>; <code>snake_case</code> is used for things like <code>method_names</code> and <code>variable_names</code>.  So you class should be:</p>

<pre><code>class VisFileTools:
    ...
</code></pre>

<h1>Unnecessary <code>__init__</code> method</h1>

<p>This method does nothing; it may safely be omitted.</p>

<pre><code>    def __init__(self):
        pass
</code></pre>

<h1>Public / Private</h1>

<p><code>remove_jedec_line</code> looks like a private method, used by the <code>remove_jedecs_file</code> method.  If <code>remove_jedec_line</code> is not supposed to be used by actors outside of the class, it should be prefixed with a leading underscore:</p>

<pre><code>    def _remove_jedec_line(self, inputline):
        ...
</code></pre>

<h1>Garbage Collection</h1>

<pre><code>temp_data = ""    # Empties memory
</code></pre>

<p>This is unnecessary.  The variable is about to go out of scope, which will naturally release the memory it is holding.</p>

<h1>Stop Writing Classes</h1>

<p>See the video <a href="https://www.youtube.com/watch?v=o9pEzgHorH0" rel="nofollow noreferrer">Stop Writing Classes</a></p>

<p>Your class is unnecessary.  It has no data members.  It has one public method.  It should just be a function.</p>

<h1>Simplified code</h1>

<p>Here is a function version of your code (untested):</p>

<pre><code>def remove_jedecs_file(path_input_file: str, path_output_file: str) -&gt; None:
    """
    Read `path_input_file`, copying each line to `path_output_file`.
    Once the start of components is reached (indicated by a line containing "COMP"),
    the last "word" (jedec) of each line is removed.
    """

    def remove_jedec_line(input_line: str) -&gt; str:
        return " ".join(input_line.split(" ")[:-1]) + "\n"

    with open(path_input_file) as file, open(path_output_file, "w") as write_file:
        comp_line_reached = False

        for line in file:
            if comp_line_reached:
                line = remove_jedec_line(line)
            else:
                comp_line_reached = "COMP" in line

            write_file.write(line)
</code></pre>

<p>Notes:</p>

<ul>
<li>Type-hints (Python 3.6+) have been added to the function (<code>: str</code> and <code>-&gt; None</code>)</li>
<li>A <code>"""docstring"""</code> has been added to describe the function.</li>
<li>A nested function is used for <code>remove_jedec_line()</code>, making it "private".</li>
<li><code>[:-1]</code> returns all but the last element in a list, which is simpler than using <code>del input_line_split[-1]</code>.</li>
<li>Lines are not being accumulated in <code>temp_data</code>.  Instead, lines are written out immediately after being read in, which is a much lighter load on memory, and avoid <span class="math-container">\$O(N^2)\$</span> string concatenation.</li>
<li><code>"COMP" in line</code> is a "slow" search operation, looking for that substring in the <code>line</code> string.  When found, it sets a flag.  Here, once the flag is set, we can skip the slow substring search.  But I'm introducing a slight change in behaviour: if subsequent lines also contain <code>"COMP"</code>, the OP version would not do the <code>remove_jedec_line()</code> transformation where as mine will.  The assumption here is that <code>"COMP"</code> only appears once.</li>
</ul>
    </div>