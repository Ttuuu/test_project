<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>app.input(input);
app.process();
var result = app.output();
</code></pre>

<p>This is a bad practice. Every function/method has means of passing input, it has body and it has return value. Setting the input to class field, then calling method without arguments to process the set input, then storing result to another class field, then calling another method to retrive the result is utterly complicated, confusing and error prone.</p>

<p>You can forget to call <code>input</code> and call <code>process</code> directly which will fail or process the previous input.</p>

<p>You can forget to call <code>process</code> and retrieve an unexpected null result or retrieve the result of previous process.</p>

<p>You can have momory occupied longer then necesary even if you don't care for the result anymore.</p>

<p>Why not use all the channels of a function?</p>

<pre><code>var result = app.process(input);
</code></pre>

<p>Now imagine the result has been printed for example and it is no longer needed. In your implementation the memory is still siezed (because app object holds reference to it) until the app object is destroyed. In my implementation the momory is released (once the scope of the variable is left) regardless of the app object being destroyed or not.</p>

<h1>Returning <code>this</code></h1>

<p>Be very thouthful when returning <code>this</code>. You hardly ever need to return <code>this</code>. It only leads to thoughts about saving outputs to the class fields, because it feels like return value is already siezed by <code>this</code> and thus the real result must be provided through a different channel. But true is that <code>this</code> is always available to the caller (because they know the reference to the object) and so if the return value channel can be used for something more meaningful, you should do it. And even if there is nothing meaningful to return, you should consider returning void, instead of <code>this</code>.</p>

<h1>Comments</h1>

<p>if your code needs a lot of comments to be understandable, it probably lacks some structure (split to more methods maybe...). But maybe some of the comments are not necesary, like here:</p>

<pre><code>Node tempNode = localRoot.pop(); // get the last node
</code></pre>

<p>I dont think that comment tells me anything I couldn't infer from the code itself...</p>

<h1>Passing too many arguments</h1>

<p>That's disputable if it's bad to pass a lot of arguments. If they are needed, then they have to be there. If they repeat on more places a simple data structure could be introduced to condense them together.</p>

<p>Passing them as constructor arguments versus passing them as method arguments is not a good question. They have different purpose. The method should accept all arguments that are available to the caller. Constructor should accept all arguments that are only known to the creator of the object.</p>

<p>If some arguments known to the caller are to be passed through constructor, the caller of the method must also be the creator of the object and that's often not true. In fact, if you maintain single responsibility of all classes, it will never be true.</p>

<p>Class fileds are like configuration of the object - how it should behave, what it can offer. Method arguments are more like a specification of what the caller wants.</p>
    </div>