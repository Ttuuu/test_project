<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I don't see a great need to re-organise the structure of the code, other than to eliminate the unnecessary global variables (most can be moved to function scope).</p>

<p>There are a few portability problems that need to be addressed.  I'll start with the assumption about the width of integer types:</p>

<blockquote>
<pre><code>typedef char                byte;  // 1 byte \ 8 bit 
typedef short int           word;  // 2 byte \ 16 bit
typedef unsigned int        dword; // 4 byte \ 32 bit
</code></pre>
</blockquote>

<p>The comments are assumptions that will need to be verified for every platform you build this for.  There's a portable way to get what you want:</p>

<pre><code>typedef uint8_t byte;
typedef uint16_t word;
typedef uint32_t dword;
</code></pre>

<p>Or just use the standard fixed-width types throughout - that's less confusing than inventing your own terminology.</p>

<p>Note that when using <code>printf()</code> and family, we need to use the correct specifiers.  This is wrong:</p>

<blockquote>
<pre><code>printf("Compression: %d\n", fmt.compression);
printf("Channels: %d\n", fmt.chanels);
printf("Sample Rate: %d\n", fmt.sample_rate);
printf("Bit Rate: %d\n", fmt.bit_per_sample);
</code></pre>
</blockquote>

<p>With your original definitions, we should be using <code>%hu</code> for the first two of these and <code>%u</code> for the last two.  Using the standard fixed-width types, we get macros we can use for formatting:</p>

<pre><code>printf("Compression: %" PRIu16 "\n", fmt.compression);
printf("Channels: %" PRIu16 "\n", fmt.chanels);
printf("Sample Rate: %" PRIu32 "\n", fmt.sample_rate);
printf("Bit Rate: %" PRIu32 "\n", fmt.bit_per_sample);
</code></pre>

<p>Here's an inefficiency:</p>

<pre><code>    memccpy(buf, riff.id, '\0', 4);
    if (strcmp(buf, "RIFF")!=0) {
</code></pre>

<p>Firstly, <code>memccpy</code> isn't standard C (though it is defined by POSIX), so there's a small reduction in portability.  But there's no need to copy to <code>buf</code> here - just compare in place using <code>strncmp()</code>:</p>

<pre><code>    if (strncmp("RIFF", riff.id, sizeof riff.id)) {
</code></pre>

<p>There's a lot of hard-coded sizes.  For example:</p>

<blockquote>
<pre><code>if (fread(&amp;riff.id, sizeof(byte), 12, fp)!= 12)  {
</code></pre>
</blockquote>

<p>It's strange that we write <code>sizeof (byte)</code>, even though <code>byte</code> is just an alias for <code>char</code> (and so has size of 1 char), but then use <code>12</code> where we could more meaningfully write <code>sizeof riff</code>:</p>

<pre><code>if (fread(&amp;riff, 1, sizeof riff, fp) != sizeof riff)  {
</code></pre>

<p>(I also changed <code>&amp;riff.id</code> to just <code>&amp;riff</code> to make it clear that we're writing to the whole structure, not just the <code>id</code> member.)</p>

<p>When allocating, there's no need for (and possibly slight harm in) casting the returned <code>void</code> pointer to a more specific pointer size.  It's also idiomatic to use the inherent truthiness of a non-null pointer, rather that testing explicitly against <code>NULL</code>:</p>

<pre><code>byte *dump = malloc(data.size);
if (!dump) {
</code></pre>

<p>I'm glad you didn't forget error checking here, and when opening files - that's an important part of programming in C, and you've got that right.  One small improvement: error messages should go to <code>stderr</code>, not <code>stdout</code>:</p>

<pre><code>        fprintf(stderr, "Memory allocation error\n");
</code></pre>

<p>BTW, don't forget when compiling to ensure that the structures are <em>packed</em>, without any padding between members.</p>

<p>An enhancement suggestion: allow the user to specify where to write the output (or just send it to standard out, and let them use their shell to redirect it).  We'll fail if the input file is in a read-only directory at present.</p>
    </div>