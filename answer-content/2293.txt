<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You might want to take a look at defining <code>asdf</code> systems instead of using <code>quicklisp</code> to load dependencies internally.</p>

<p>The standard way of doing this is to set up an <code>asd</code> file. <a href="http://tychoish.com/rhizome/using-asdf-install-with-sbcl/" rel="nofollow">Here's</a> a decent walk-through of that process. It's more verbose than <code>ql:quickload</code>, but it lets people who don't have quicklisp use your package regardless.</p>

<p>On second thought, screw those guys, keep it up.</p>

<hr>

<pre><code>(defun logged-in? (cookie-jar)       
  "Returns true if a cookie-jar contains login information for www.myfitnesspal.com, and nil otherwise."
  (let ((logged-in? nil))
    (loop for cookie in (drakma:cookie-jar-cookies cookie-jar) do
      (if (and (equal (drakma:cookie-name cookie) "known_user")
           (equal (drakma:cookie-domain cookie) "www.myfitnesspal.com")
           (drakma:cookie-value cookie))
          (setq logged-in? t)))
    logged-in?))
</code></pre>

<p>There's actually a <code>loop</code> shorthand for "make sure each member of <code>list</code> satisfies <code>predicate</code>". The above function can be written as</p>

<pre><code>(defun logged-in? (cookie-jar)       
  "Returns true if a cookie-jar contains login information for www.myfitnesspal.com, and nil otherwise."
  (loop for cookie in (drakma:cookie-jar-cookies cookie-jar)
        always (and (equal (drakma:cookie-name cookie) "known_user")
                    (equal (drakma:cookie-domain cookie) "www.myfitnesspal.com"))))
</code></pre>

<hr>

<p><code>foo?</code> is the Scheme convention for predicates. The common CL conventions are <code>foop</code> or <code>foo-p</code>. Personally, I prefer <code>foo?</code> too, just be aware that it's not standard.</p>

<hr>

<pre><code>...
(sorted-list (sort list #'first-column-as-date-ascending)))
...
</code></pre>

<p>This can get you into trouble. The Common Lisp <code>sort</code> should really be named <code>sort!</code>, because it's destructive (so <code>sorted-list</code> will now contain a sorted list, but <code>list</code> won't still be the unsorted list, and isn't guaranteed to be the complete sequence anymore). If you might use <code>list</code> again later, instead do</p>

<pre><code>...
(sorted-list (sort (copy-list list) #'first-column-as-date-ascending)))
...
</code></pre>

<hr>

<pre><code>(if (search "No measurements found." body)
    nil
    body)
</code></pre>

<p>Can be written as </p>

<pre><code>(unless (search "No measurements found." body) body)
</code></pre>

<hr>

<p><strong>EDIT:</strong> </p>

<p><code>format</code> can accept nested iterations in the directive, so you can eliminate <code>separate-values</code> by writing <code>make-csv</code> as</p>

<pre><code>(defun make-csv (list)
  "Takes a list of lists of values, and returns a string containing a CSV file representing each top-level list as a row."
  (let ((sorted-list (sort list #'first-column-as-date-ascending)))
    (format nil "~{~{~A~^,~}~^~%~}" sorted-list)))
</code></pre>

<p>You could eliminate <code>make-csv</code> entirely by putting the above sort+directive directly into <code>write-csv</code> (this would also save you a trip through the CSV string, which may or may not make a significant difference).</p>

<hr>

<p><code>recursive-scrape-page</code> can be simplified down to</p>

<pre><code>(defun scrape-page (page-num cookie-jar)
  (loop for i from page-num 
    if (get-page i cookie-jar) collect it into pg
      else return pg))
</code></pre>

<p>As a rule, Common Lisp doesn't guarantee tail-calls the way Scheme does, so it's generally a better idea to use a <code>loop</code> than raw recursion. SBCL does support some tail calls, but it isn't guaranteed (though this situation looks simple enough that it just might; do some profiling and compare).</p>

<p>You should be able to simplify <code>scrape-xhtml</code> in a similar way to eliminate <code>(let ((results nil))</code>.</p>

<p>Note that I haven't tested or profiled any of this since I don't have a "MyFitnessPal" account. Check that it works first.</p>

<hr>

<p>EDIT the Second:</p>

<pre><code> ...
 (let ((valid-xhtml (chtml:parse body (cxml:make-string-sink))))
   (let ((xhtml-tree (chtml:parse valid-xhtml (cxml-stp:make-builder))))
 ...
</code></pre>

<p>You use this nested let idiom in a couple of places. I assume this is just because the value of <code>xhtml-tree</code> depends on the value of <code>valid-html</code>. In this case, you can instead write</p>

<pre><code> ...
 (let* ((valid-xhtml (chtml:parse body (cxml:make-string-sink)))
        (xhtml-tree (chtml:parse valid-xhtml (cxml-stp:make-builder))))
 ...
</code></pre>
    </div>