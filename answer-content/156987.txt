<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>The O(n²) approach</h3>

<p>The first algorithm is indeed O(n²), because, for every element in the array, the array is traversed again to see whether an element after the current element is equal to 10 minus it. It is quite clear, and there is not much to change. Comments are:</p>

<ul>
<li>There is a bug: you're checking the same element twice in a row, since <code>j</code>, in the inner loop, starts at <code>i</code>. Therefore, if you consider the array <code>{ 1, 5, 2 }</code>, the pair <code>(5,5)</code> will be considered a solution, when 5 only appeared once in the input array. To fix this, <code>j</code> should start at <code>i + 1</code>.</li>
<li><p>Indent properly the code. As written, the curly braces are not aligned correctly, making it more difficult to read than it needs to be. A quick reformat by an IDE will produce </p>

<pre><code>int[] array = new int[] { 10, 3, 4, 6, 1, 9, 10, 0 };
int sum = 0;

for (int i = 0; i &lt; array.length; i++) {
    for (int j = i; j &lt; array.length; j++) {
        sum = array[i] + array[j];
        if (sum == 10) {
            System.out.println(array[i] + " " + array[j]);
        }
    }
}
</code></pre>

<p>which is easier to go through.</p></li>
<li><p>There is no need to declare the <code>sum</code> variable outside the two <code>for</code> loops. This variable is only used inside to calculate the sum of two elements of the array. As a usual guideline, local variables should have the smallest possible scope, so in this case, you would prefer to have:</p>

<pre><code>int sum = array[i] + array[j];
</code></pre>

<p>and remove the <code>int sum = 0</code> before the loop.</p></li>
</ul>

<h3>The O(n) approach</h3>

<p>The second algorithm is, as you say, O(n). The difference in approach with regard to the first, is that instead of traversing the array a second time for each element, we memorize along the way the difference between 10 and the current element. This means that we don't need to go through every element again, for each element, to check whether one satisfies; we can just continue and if we find one that we memorized, it means we just found a pair. A couple of comments again:</p>

<ul>
<li>There is a bug in the boundary of the <code>while</code> loop: why mandate <code>i &lt; sum</code>? Because of this, not every element in the array will be considered (only the first <code>sum</code> ones), and pairs will be missed. A simple example is the array <code>{ 0, 1 }</code> with a sum to search of 1. Once fixed, you can even turn this into a classic <code>for</code> loop, with an index going from 0 to <code>nums.length</code> excluded.</li>
<li><code>Hashtable</code> <a href="https://stackoverflow.com/questions/8223125/replacement-for-obsolete-hashtable-class-in-java">is considered an obsolete class</a>. Not officially deprecated, but it has been superseded with faster solutions, <a href="https://stackoverflow.com/questions/40471/differences-between-hashmap-and-hashtable">like <code>HashMap</code> and <code>ConcurrentHashMap</code></a>. Since thread-safety is not a concern here, you can safely switch to <code>HashMap</code>.</li>
<li><a href="https://stackoverflow.com/questions/15699995/why-unused-code-should-be-deleted">Remove the unused code</a>. The variable <code>count</code> is declared, and incremented, but never used. In the same way, the variable <code>temp</code> is declared and never used.</li>
<li>Notice how you're not using the value of the map. The code is doing <code>reqNoList.put(key, i);</code>, but then the stored <code>i</code> is never used. You could accomplish the same with a just <code>HashSet</code> instead of an <code>HashMap</code>.</li>
</ul>

<h3>They are not equivalent</h3>

<p>But be careful, because there is a fundamental difference between the two algorithms, namely in how they handle duplicate pairs. Consider the array <code>{ 4, 4, 1, 0 }</code>, and a sum to search of 5. The first algorithm will print two solutions, whereas the second one will just print one. So depending on what you want, there might be adjustements.</p>

<p>In you want to print them all using the second approach, you could do it by utilizing the value of the <code>HashMap</code>, and make it store the number of times a given element has been encountered.</p>

<hr>

<p>As a final note, you should consider extracting each approach into their own method, like <code>printPairsHavingSum(int[] array, int sum)</code>. It would clarify even more the code.</p>
    </div>