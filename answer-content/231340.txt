<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The declarations for <code>dir</code> and <code>file</code> can be moved lower, where they are first assigned values.  However, since <code>dir</code> is only used in one place, it can be eliminated and the value used directly.</p>

<pre><code>HANDLE file = FindFirstFileW(root_slash.c_str(), &amp;file_info);
</code></pre>

<p>When testing file attributes, the check for invalid attributes should be first, and you can combine several individual tests into one:</p>

<pre><code>if (file_info.dwFileAttributes != INVALID_FILE_ATTRIBUTES &amp;&amp; 
    !(file_info.dwFileAttributes &amp; (FILE_ATTRIBUTE_READONLY | FILE_ATTRIBUTE_OFFLINE | FILE_ATTRIBUTE_SYSTEM) &amp;&amp;
    (name != L"." &amp;&amp; name != L".."))
</code></pre>

<p>Since there are three attributes you want to ignore, you can define a constant to hold them rather than list them out in your if statement.</p>

<p>Incidentally, since <code>cFileName</code> is a C array, you need to assign it to a string variable to be able to use the equality comparisons with it.  Or you could leave it in <code>cFileName</code> and use basic comparisons like <code>strcmp</code>.  Since there are two similar strings that are very short, you could also do direct character comparison but that makes the code larger and harder to understand and should only be done when absolutely necessary.</p>

<p>Since you decrement <code>limit</code> with each recursive call to <code>get_files</code>, you reduce the limit for the current directory as well.  If your initial directory has 16 subdirectories, your search will skip the 10th, may skip some of the subdirectories of the first 9, and will search all of the directories under the 11th and later subdirectories.  You should use</p>

<pre><code>get_files(path, ext, log, limit - 1);
</code></pre>

<p>instead.  If any of the recursive calls fail in some way (return nonzero) you ignore the error and keep going.  This is reasonable in this instance, but does make the "recursion limit reached" error somewhat pointless since it will never be returned to the caller.  This one value should probably be handled differently, so that if any search reaches the recursion limit, this value is returned to the original caller to indicate that the results are incomplete.</p>

<p>Potentially more serious is that your extension comparison is case sensitive.  A file called "IMAGE.JPG" will not be listed, because the extension ins in uppercase and you're looking for a lowercase one.</p>

<p>Unless there's an absolute need for it, you should omit the <code>std::flush</code> from the log outputs.  This will reduce the performance as every filename will be written one at a time, instead of in larger chunks.</p>
    </div>