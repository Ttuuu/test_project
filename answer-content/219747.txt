<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are many improvements you could make, but you're on the right track. In this answer I will only comment on some of the things I immediately notice.</p>

<h2>Coding style</h2>

<p>It is difficult to get an overview of your code. There's <strong>little organization</strong>. I would have split this code up into multiple files. For instance: There will be more PHP files on your server that need the database. Having a separate PHP file that opens the database, and can be included into this one, would help and you would only need to change the database access parameters in one place. Same is true for CSS and Javascript.</p>

<p>Use <strong>indentation</strong> to make your code more readable. See the <a href="https://phptherightway.com/#code_style_guide" rel="nofollow noreferrer">code style guides</a>.</p>

<h2>Handling errors</h2>

<p>If your database connection fails, you do catch the exception to echo a message, but then you just go on as if nothing has happened. What's the point of that? The same is true for the <code>FindErrors()</code> function. It echos after a form submission, but that's all it does. <strong>It just carries on</strong> and gets your code into real trouble.</p>

<h2>User input</h2>

<p>You filter user input at the beginning of your script, that is a good idea. However, it is still user input and should be treated with extra care. It is quite likely you will forget about this, now that you've dumped this input into normal PHP variables. Better put them in an array like <code>$userInput</code> or prefix the names like so: <code>$input_forename</code>. That way you remember to <strong>treat user input with care</strong>.</p>

<p>Another problem in <code>FindErrors()</code> is that you directly access <code>$_POST</code>. What's the point of all the input filtering at the beginning? Don't do this, use the variables, or the array, you created at the beginning.</p>

<p>Do not <code>filter_input(INPUT_POST, 'password', FILTER_SANITIZE_STRING);</code> the password. It could remove things from the password that an user intended to have there. It's a password, the content can be anything and doesn't need filtering.</p>

<h2>Don't repeat yourself</h2>

<p>You've implemented the same validation functions in PHP and in Javascript. I can understand why, but it does feel like <strong>duplication of functionality</strong>.  I don't have a quick solution at hand, that would require long code examples, but try to avoid this. See: <a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself" rel="nofollow noreferrer">DRY</a></p>

<h2>Database</h2>

<p><strong>Do not store plain-text passwords</strong> in a database. See: <a href="http://blog.moertel.com/posts/2006-12-15-never-store-passwords-in-a-database.html" rel="nofollow noreferrer">Never store passwords in a database!</a>. <a href="https://php.net/manual/en/faq.passwords.php" rel="nofollow noreferrer">Store a hash</a> of the password, see: <a href="https://php.net/manual/en/function.password-hash.php" rel="nofollow noreferrer">password_hash()</a>.</p>

<p>An obvious security problem is that your database query is open to <a href="https://en.wikipedia.org/wiki/SQL_injection" rel="nofollow noreferrer">SQL injection attacks</a>. Use <a href="https://websitebeaver.com/prepared-statements-in-php-mysqli-to-prevent-sql-injection" rel="nofollow noreferrer">prepared statements</a> instead. This is <strong>by far the most common problem</strong> we see, and it is actively exploited (because many developers can't be bothered).</p>

<h2>Finally</h2>

<p>That's my list so far. This is not a complete code review. I haven't given proper advice on how the code could be rewritten. Nevertheless I hope there are some useful tips here for you.</p>
    </div>