<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This <code>fac(n) / (fac(k) * fac(n - k)</code> is an inefficient way to calculate n choose k.  n choose k requires 2min(k, n-k) multiplications, yours does 2n multiplications.  You iterate k from 0 to n, so yours does 2n^2+2n total multiplications over all coefficients -- the other one does about 1/4 of that.</p>

<p>Calculating a binomial coefficient of (a,b) is something that has limited inputs and outputs, and is greatly suited to being a function.  Write that function.</p>

<p>I'd consider writing a term concept.  A term is a coefficient, letter, and power of the letter; how that structure is defined is up to you.</p>

<p>Write code that prints a term, instead of mixing it in with the rest of the logic -- the single responsibility principle.</p>

<p>So you'd have code that (a) calculates n choose k, (b) given a linear term and a constant coefficient and n and k generates a binomial output term.</p>

<p>Your main loop is then "for each i from 0 to n, generate binomial term, print binomial term".</p>

<p>I'd also split the string-parsing code from the main body.  Parsing a string <code>"(ax+b)^n"</code> into components is nearly completely orthogonal to the rest of the function's tasks.</p>

<p>Write a function that does that, and only that.</p>

<p>So, in pseudo code:</p>

<pre><code> function task( string input ) 
   [linear_coeff, variable, constant_coeff, exponent] = a_times_x_plus_b_pow_n_parse(input);
   for ( k from exponent downto 0 )
     output_coefficient = binomial_coefficient( linear_coeff, constant_coeff, k, exponent )
     term = make_term( output_coefficient, variable )
     print_term( term )
</code></pre>

<p>now write <code>a_times_x_plus_b_pow_n_parse</code>, <code>binomial_coefficient</code>, <code>make_term</code> and <code>print_term</code> functions.</p>

<p>The big difference is that someone reading your code can see what everything is and what each step is supposed to do.  In real production, each of those functions can be reasonably unit tested.</p>
    </div>