<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I would recommend using a Dictionary in this type of scenario as a key lookup is faster and more efficient than multiple loops through the string chars in both directions. I tested the code below using a 100 character string and it completed in 0.0006876 seconds.</p>

<pre><code>private char FindFirstNonRepeatChar(string testString)
{

    Dictionary&lt;char, char&gt; characters = new Dictionary&lt;char, char&gt;();
    Dictionary&lt;char, char&gt; repeatedCharacters = new Dictionary&lt;char, char&gt;();

    foreach (char ch in testString)
    {
        char value;
        if(!characters.TryGetValue(ch, out value))
        {
            characters.Add(ch, ch);
        }
        else if(!repeatedCharacters.ContainsKey(ch))
        {
            repeatedCharacters.Add(ch, value);
        }
    }

    foreach (char ch in testString)
    {
        char value;
        if (!repeatedCharacters.TryGetValue(ch, out value))
        {
            return ch;
        }
    }

    return default(char);
}
</code></pre>
    </div>