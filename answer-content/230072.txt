<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>regarding: </p>

<pre><code>int main(int argc, char *argv[]) { 
</code></pre>

<p>Since the parameters are not used, the compiler will output two messages about unused parameters. Strongly suggest using the signature: </p>

<pre><code>int main( void ) 
</code></pre>

<p>regarding: </p>

<pre><code>master[i] = (char *)malloc(sizeof(ele) * sizeof(char));
</code></pre>

<p>1) the returned type is void* which can be assigned to any pointer. Casting just clutters the code, making it more difficult to understand, debug. etc. Suggest removing that cast. </p>

<p>2) The expression: <code>sizeof( char )</code> is defined in the C standard as 1. Multiplying by 1 has no effect. </p>

<p>Suggest removing that expression. </p>

<p>3) always check (!=NULL) the returned value to assure the operation was successful. If not successful, call </p>

<pre><code>perror( "malloc failed" ); 
</code></pre>

<p>to output both your error message 'malloc failed' and the text reason the system thinks the error occurred to <code>stderr</code>. </p>

<p>regarding: </p>

<pre><code>int end = strlen(str); 
</code></pre>

<p>The function: <code>strlen()</code> returns a <code>size_t</code> which is an <code>unsigned long int</code>. This will result in the compiler outputting a message about this (error prone) implicit conversion.  Suggest:</p>

<pre><code>size_t end = strlen( str );
</code></pre>

<p>regarding: </p>

<pre><code>totalSize += sizeof(ele) * sizeof(char); 
</code></pre>

<p>the variable <code>ele</code> is a pointer, so <code>sizeof( ele )</code> results in the size of a pointer.  Depending on the underlying hardware architecture the resulting value will be 4 or 8</p>

<p>The array <code>master[]</code> can be easily directly coded, so no need to waste time, code, CPU cycles developing that array.  Suggest:</p>

<pre><code>char **master[] =
{
    ".-",
    "-...",
   etc.
};
</code></pre>

<p>Then in <code>smorse()</code> a loop similar to:</p>

<pre><code>for( size_t i = 0; str[i]; i++ )
{ 
    printf( "%s ", master[ tolower( str[i] ) ] );
}

puts( "" );
</code></pre>

<p>where the <code>tolower()</code> is from the header file: <code>ctype.h</code></p>

<p>in <code>main()</code>, these statements:</p>

<pre><code>printf("%s\n", smorse("sos"));
printf("%s\n", smorse("daily"));
printf("%s\n", smorse("programmer"));
printf("%s\n", smorse("bits"));
printf("%s\n", smorse("three"));
</code></pre>

<p>can be replaced with: </p>

<pre><code>smorse( "sos" );
smorse( "daily" );
etc.
</code></pre>
    </div>