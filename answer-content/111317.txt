<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The other answers has mentioned good and valid points regarding how to get the different dates, and handling of these. I would like to focus on your date arithmetic, which should be done using date utils to avoid strange cases. </p>

<p>One issue that you've locked all of the months to be 30 days. What about Febrarury with 28 days (when it's not a leap year), or all the months with 31 days?</p>

<p>Similarily adding 12 to the <code>spefic_month</code> does end up with a non-legal month in some cases, although it does somewhat work for when you calculate the difference afterwords. But this kind of arithmetic on dates can lead to various strange results. </p>

<p>You are usually better of using real dates, and doing date calculations using either builtins (like <a href="https://docs.python.org/3.5/library/datetime.html" rel="nofollow">datetime</a>, or external library specialising on this (like <a href="http://labix.org/python-dateutil" rel="nofollow">labix dateutil</a>.</p>

<p>Some other style comments:</p>

<ul>
<li><em>Start using functions</em> – The entire code of your script is on the module/file level, and should be within functions to separate concerns and help you focus on what the different parts do.</li>
<li><em>Use the <code>if __name__ == '__main__':</code> pattern</em> – Calling <code>main()</code> from within this if statement allows for your code to be used as a proper module, and with an accompanying <code>get_date_delta(from_date, to_date)</code> you'll have a handy utility function which could be used in other scripts</li>
<li><em>Make the input handling into a function</em> – Given a function like <code>input_date(date_prompt)</code> which returns a proper date, you could avoid the duplication of code related to input, verifying and validating dates. All could be within that one function. It could also convert into a proper date for later handling</li>
<li><em>Let methods return data, not print directly</em> – Functions should usually return something, and not print directly unless it is a specific output function. In your case I would suggest that the calculation returns either a tuple of the <code>(year, month, day)</code> delta, or possibly a string with the date delta, i.e. <code>4 years, 1 month, 30 days</code>.</li>
</ul>

<p>Doing the above mentioned changes could lead to a main handling of:</p>

<pre><code>def main():
    """Get two dates, and display the years, months and days between those."""

    birth_date = input_date("Enter birth date (dd/mm/yyyy): ")
    specific_date = input_date("Enter another date (dd/mm/yyyy): ")

    date_delta = get_date_delta(birth_date, specific_date)

    print('Difference from {} to {}: {}'.format(birth_date, specific_date, date_delta)


if __name__ == '__main__':
    main()
</code></pre>

<p>Could still need some tweaking, but you get the gist of idea to make it more modular, and to make it read a lot easier, which in turns will make it more maintable. </p>
    </div>