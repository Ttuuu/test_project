<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>We're in C++17, so we can use <code>std::aligned_storage_t</code>:</p>

<pre><code>typename std::aligned_storage_t&lt;Size, Align&gt; storage = {};
</code></pre>

<p>(I added the initializer to pacify <code>g++ -Weffc++</code>; I also added <code>virtual ~Base() = default;</code> for the same reason).</p>

<p>One thing that breaks is that I can't assign a <code>B</code> to the object unless the base is explicitly listed as one of the <code>Ds...</code>. Perhaps that's intentional; it's certainly worth noting in the documentation if it is (I note that the posted code has <em>no</em> documentary comments - that really should be fixed).</p>

<p>I get a long cascade of errors if I instantiate with only the base type and empty <code>Ds...</code>:</p>

<pre><code>PolyUnion&lt;Base&gt; foo(Base{});
</code></pre>

<p>We can reduce that greatly by constraining with concepts, or just make this degenerate case be valid, by including the base type in the <code>max()</code> call:</p>

<pre><code>template &lt;typename B, typename ... Ds&gt;
struct PolyUnion
    : public PolyUnionSize&lt;B,
                           max({sizeof(B), sizeof(Ds)... }),
                           max({alignof(B), alignof(Ds)... })&gt;
{
    using PUSize = PolyUnionSize&lt;B,
                                 max({sizeof(B), sizeof(Ds)... }),
                                 max({alignof(B), alignof(Ds)... })&gt;;
</code></pre>

<p>I tried adding a <code>static_assert()</code> to force non-empty <code>Ds...</code>, but that didn't reduce the log spam very much, and I was unable to use <code>std::enable_if</code> to SFNIAE the template out for empty <code>Ds</code>.  I did get a useful, short error message by specializing the template for that case, though:</p>

<pre><code>template &lt;typename B&gt;
class PolyUnion&lt;B&gt;;     // deliberately incomplete
</code></pre>
    </div>