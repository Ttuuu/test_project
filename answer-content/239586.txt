<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Neat question! I'm afraid I ran out of steam before reaching anything too crypto-ish, though. There's a lot of Python to unpack here.</p>

<p>The repeated comment "Ronseal." is <a href="https://en.wikipedia.org/wiki/Does_exactly_what_it_says_on_the_tin" rel="nofollow noreferrer">cute if you know the reference</a> but I guess you know it doesn't help the reader; I'd rather save a line of screen real estate.</p>

<p>Re Python style, I recommend running your code through <code>flake8</code> and fixing everything it complains about (with the possible exception of line-length warnings). It'll rightly complain about commented-out code like</p>

<pre><code>#e.zip_and_delete()
</code></pre>

<hr>

<pre><code>def write_annexe_zip(self):
    if self.block["annexe"] is None:
        return
    f = open("extracts/"+str(self.ordinal)+"/annexe.zip", "wb")
    f.write(self.block["annexe"])
    f.close()
</code></pre>

<p>Either this is another in-joke that I <em>don't</em> get, or you misspelled "annex." (You certainly misspelled "declaration" and "ledger" at least once each.) I also looked for anywhere you might have explained what an annex[e] actually <em>is</em> in this context, without success.</p>

<p>If <code>f.write</code> throws an exception, then <code>f.close()</code> won't happen and you'll have leaked a file handle. It's always best to use RAII constructions for this kind of thing: i.e.,</p>

<pre><code>def write_annexe_zip(self):
    if self.block["annexe"] is not None:
        with open("extracts/%d/annexe.zip" % self.ordinal, "wb") as f:
            f.write(self.block["annexe"])
</code></pre>

<p>Looks like you haven't learned <code>printf</code> format strings yet. It's a really good investment in your career! Consider:</p>

<pre><code>    day_str = str(self.block["day"])
    if len(day_str) == 0:    ## I'm guessing this was a typo?!
        day_str = "0"+day_str
    packed_ordinal = str(self.ordinal)
    while len(packed_ordinal) &lt; 3:
        packed_ordinal = "0"+packed_ordinal
</code></pre>

<p>versus what you could have written:</p>

<pre><code>    day_str = "%02d" % self.block["day"]
    packed_ordinal = "%03d" % self.ordinal
</code></pre>

<p>Anything you can do to eliminate <em>mutation</em> (repeated overwriting) of your variables is a good thing for maintainability. In this case it's also shorter and clearer.</p>

<hr>

<pre><code>    script1 = ("cd extracts/\n"+
               "mkdir "+str(self.ordinal)+"/")
</code></pre>

<p>I'm surprised that <code>os.system()</code> allows you to pass multiple commands separated by newlines. However, here it would be clearer to do it in a single command. There's no reason for you to change working directories before creating the <code>extracts/foo</code> directory.</p>

<pre><code>def create_and_copy(self):
    mypath = "extracts/%d" % self.ordinal
    if os.path.isdir(mypath):
        os.system("rm -r %s" % mypath)
    os.system("mkdir -p %s" % mypath)
    os.system("cp latexery/main.pdf %s" % mypath)
</code></pre>

<hr>

<pre><code>class Stamp_Machine:
    def __init__(self, data):
        if os.path.exists(path_to_private_key) == False:
            raise Exception("No private key on disk.")
        self.private_key = load_private_key()
        self.data = data
</code></pre>

<ul>
<li><p>Why is <code>path_to_private_key</code> not a <em>function parameter</em> to <code>load_private_key</code>?</p></li>
<li><p>Why is <code>load_private_key</code> a free function? Shouldn't it be a private implementation detail (i.e., a member) of the <code>Stamp_Machine</code> class?</p></li>
<li><p>The construction <code>if f() == False</code> would be better expressed as <code>if not f()</code>.</p></li>
<li><p>Are you at all concerned that someone might remove the file in between the time you check for its existence and the time you read it? (This is a "TOCTTOU" vulnerability.)</p></li>
<li><p>Are you at all concerned that someone might replace the file with another file, such as a private key under their personal control?</p></li>
</ul>

<hr>

<pre><code>    if isinstance(stamp, str) == False:
        raise Exception("")
    self.stamp_str = stamp
</code></pre>

<p>This should at <em>least</em> raise <code>RuntimeError("expected a string")</code>. And in reality, you shouldn't manually raise an exception at all; any operation that requires a string will eventually raise <code>TypeError</code>, which is plenty self-descriptive, and if no such operation ever takes place, then maybe you didn't need to raise an exception in the first place.</p>

<p>You never use the member variable <code>self.stamp_str</code>, so you shouldn't be creating it.</p>

<hr>

<p>You repeatedly pass <code>backend=default_backend()</code> to crypto functions. That's redundant; by definition, the backend that will be used by default <em>is</em> the default backend.</p>

<hr>

<pre><code>password = getpass.getpass(prompt="Digistamp password: ")
password_ = getpass.getpass(prompt="Confirm password: ")
if password != password_:
    raise Exception("Passwords do not match.")
</code></pre>

<p>This seems to be conflating two different kinds of "error handling." Superficially, this function's job seems to be to interact with the <em>user</em>, present a prompt to the <em>user</em>, and wait for the <em>user</em> to type in their new password. But then when the user makes a typo, you don't ask the <em>user</em> to fix their typo; you raise a programming exception indicating an unexpected failure to be handled by <em>code in your calling routine</em>. What's the calling routine supposed to do about it?</p>

<p>This should just be a loop:</p>

<pre><code>while True:
    password = getpass.getpass(prompt="Digistamp password: ")
    password_ = getpass.getpass(prompt="Confirm password: ")
    if password == password_:
        break
    print("Your two inputs did not match. Please try again.")
</code></pre>

<hr>

<pre><code># Add the hash to the present block.
def add_hash(self):
</code></pre>

<p>This function operates only on <code>self.block</code>. Shouldn't it be a member function of <code>Block_of_Ledger</code> instead?</p>

<p>Incidentally, Python style would be CamelCase, e.g. <code>BlockOfLedger</code> or simply <code>LedgerBlock</code>.</p>

<hr>

<p>It is absolutely insane that creating a <code>Block_of_Ledger</code> object in Python — i.e., the single line</p>

<pre><code>foo = Block_of_Ledger()
</code></pre>

<p>— causes the program to irretrievably delete files from disk. That just shouldn't happen. You should write a conspicuously named function that deletes files, and then use its result as a <em>parameter</em> to the constructor. E.g.:</p>

<pre><code>annex = collect_annex_files(delete_from_disk=True)
foo = Block_of_Ledger(annex)
</code></pre>

<p>Similarly, <code>dt = datetime.datetime.now()</code> should be a parameter to the constructor. Everything you write should be unit-testable, and that means no hard dependencies on external realities like "time" or "disk" or "network" or "database." Look up <a href="https://en.wikipedia.org/wiki/Dependency_injection" rel="nofollow noreferrer">dependency injection</a> and/or watch <a href="https://www.youtube.com/watch?v=u5senBJUkPc" rel="nofollow noreferrer">this excellent talk on unit-testing</a>.</p>
    </div>