<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>tl;dr</strong></p>

<p>The major reason for not doing this is that dynamically requiring modules breaks static analysis.</p>

<p>In a pure Node.js project, this does not have major repercussions aside from breaking IDE's autocompletion. Everything else will still work as expected.</p>

<p><strong>diving deeper</strong></p>

<p>Should this pattern be used in a webpack project for instance (targetting server or client), it would fail, as bundlers need to <a href="https://webpack.js.org/guides/dependency-management/#require-with-expression" rel="nofollow noreferrer">statically compute</a> the dependency tree at compile-time.</p>

<p>The <code>require()</code> function  (<a href="https://requirejs.org/docs/node.html" rel="nofollow noreferrer">CommonJS</a>) was implemented in Node because, at the time, the core Javascript language didn't have the concept of modules. However this has changed, as <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import" rel="nofollow noreferrer">ES modules</a> are now available in all evergreen browsers, and in Node 13.x <a href="https://nodejs.org/api/esm.html" rel="nofollow noreferrer">without a feature flag</a>.</p>

<p>The new keywords <code>import</code> and <code>export</code> do not support variable interpolation for the purpose of static analysis, and are even required to be declared on top of the module. In practice, this makes the patterns <code>if (dev) { require('debug') }</code> or  <code>require(name)</code> unusable, once adapted to ES modules.</p>

<p><strong>recommendation</strong></p>

<p>In my opinion, this is a case where anything “clever” you try to make will just make the code harder to read and maintain. I've been down that path too, and I can tell you that the long-term costs are not worth the 2 seconds it will take you to add manual exports to your files. In my experience, reading code is 10 times more costly than writing it.</p>

<p>You also don't even have to create <code>index.js</code> loaders; you can require the files directly. Ryan Dahl, creator of Node, <a href="https://drive.google.com/viewerng/viewer?url=http://tinyclouds.org/jsconf2018.pdf" rel="nofollow noreferrer">even said at JSConf 2018</a> that he considered the addition of <code>index.js</code> a mistake because <em>“it needlessly complicated the module loading system.”</em></p>

<p>Good luck, and be kind to future-you.</p>
    </div>