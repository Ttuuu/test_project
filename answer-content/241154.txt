<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It is good practice to work with immutable classes. Most of your namings are clear.</p>
<h1>Algorithm</h1>
<p>It took me a while to understand the logic. I understand that the algorithm is: dividing the books to groups where each group doesn't contain the same volume twice and has a max size of 5. Create larger groups as possible in order to maximize the discount.</p>
<p>I would add this description as a comment.</p>
<p>The function responsible for the dividing should be called something like <code>DivideToUniqeVolumeGroups</code>.</p>
<h2>Pseudo Code</h2>
<p>Here is a pseudo-code of your algorithm:</p>
<p>For each book:</p>
<ol>
<li><p>Find a non-full group which doesn't contain a book with a given volume</p>
</li>
<li><p>If such group don't exists create a new group</p>
</li>
<li><p>Add the book to the group</p>
</li>
</ol>
<p>I think writing the code to be similar to the pseudo-code above will be much more readable.</p>
<h1>Hidden Assumptions</h1>
<p>You are looking for a group that doesn't contain a specific volume, but in code you use <code>!_bookSets[setIndex].Contains(book)</code>. <strong>It is not clear</strong>. It is working because all books have the same price and it has only those 2 properties. Once something will change it will <strong>stop working</strong>.</p>
<h1>Naming</h1>
<p>Usually in shopping systems what you called basket is called a cart.</p>
<p>I like to name a Dictionary with a  name that explains what is the key and what is the value. In that case <code>booksCount2discount</code>.</p>
<h1>Strategy Design Pattern</h1>
<p>The strategy should get a books list in order to create logic depending on the books.</p>
<p>I think that the strategy design pattern is a bit over-engineering in this case because the logic is always the same: applying a discount according to the books count. I think a dictionary between the books count and the discount value is sufficient.</p>
<p>You created a class for each discount value. Don't need for all those classes, replace it with a single class that accepts the discount value as a parameter in a constructor. This way the discounts can be configurable.</p>
<p>It is more clear if the strategy returns the discount value. (0.1 for 10% discount)</p>
<h1>Code</h1>
<h2>Basket</h2>
<p>Move the logic from <code>AddBook</code> to <code>Checkout</code>. I think it is more clear that way. Also, you will not need <code>_bookSets</code>.</p>
<p>Creating a class for a group called <code>UniqeVolumeGroup</code> will add to readability. Adding validations will help to find bugs faster.</p>
<p>I think <code>GetTotalCostBeforeDiscount</code> is unnecessary since the code is quite clear and shorter than the function name.</p>
<h2>Book</h2>
<p>Don't set the price inside Book.</p>
<h1>Tests</h1>
<p>You are using a class member <code>_basket</code> in all the tests. Depending on the testing framework, this could lead to <strong>tests affecting each other</strong> when running in <strong>parallel</strong>. I would create a new basket for each test.</p>
<p><code>should_create_three_sets_and_the_max_size_of_a_set_equal_to_the_number_of_strategies_to_not_get_KeyNotFoundException</code>
This name is too technical because it mentions strategies and exceptions. <strong>You should name the tests in terms of the domain.</strong> I would call the test something like group size should not be greater than max books at a discount.</p>
    </div>