<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Rewrite the code so all references are "Player", not "Human and/or Computer" Your code will shrink by more than half.</p>
<hr>
<p><strong>Do not use class name in method names</strong></p>
<p>In <code>ComputerPlayer</code></p>
<ul>
<li><code>ComputerRandomMove</code> would be <code>RandomMove</code></li>
<li><code>SetPlayerName</code> : <code>SetName</code> (<code>Name</code> may be ok too )</li>
<li><code>PlayerMove</code> : <code>Move</code></li>
</ul>
<hr>
<p><strong>Do not name classes as their inheritance chain</strong></p>
<p><code>HumanPlayer : Player</code> should be <code>Human : Player</code></p>
<p>That "Human" is a player is obvious.</p>
<hr>
<p><strong>Inheritance and Polymorphism</strong></p>
<p>Yes, inheritance is used to extend a class - adding new properties and methods. But also and <em>far more important</em> is polymorphism - that is to say "all players do the same thing, but differently. All players have a name, but different names"</p>
<pre><code>class Player {
    public int Score { get; set; }
    public int Move_Int;
    public Choice Move_Enum;
    public string Name {set; get;}
    
    public override Move(); // each subclass will have different implementation
}

Player Bob = new Human(...);
Player Hal2000 = new Computer (...);
</code></pre>
<p>No need for "Human vs Computer", "Computer vs Computer", etc. methods, just "Player vs Player"
So the only "Vs" method needed is:</p>
<pre><code> public static void Versus (Player ThisOne, Player ThatOne) {
 
     ThisOne.Move();
     ThatOne.Move();
 }
 
</code></pre>
<p>And is used thus:</p>
<pre><code>Versus(Bob, Hal2000); //Bob is "ThisOne", Hal2000 is "ThatOne"
</code></pre>
<p>I expect that all subtype-specific-redundant-methods can be reduced to a single method: <code>Compare</code>, <code>WhoWonTheRound</code>, etc.</p>
<hr>
<p><strong>overriding ToString()</strong></p>
<p>Big thumbs up!!!</p>
<p>I like toString() for outputting all the property values. Great for debugging. Also <code>WriteLine (Bob)</code>, for example, is actually calling <code>Bob.ToString()</code></p>
<hr>
<p><strong>Opponent Enum</strong></p>
<p>another thumbs up! And two thumbs up for <code>Opponent.None</code>.  I do this all the time.</p>
<p>I like the idea of an initial value of "not assigned yet", great debugging aid. If it defaults to "Human" it is harder to tell we forgot to assign the right kind. "None" forces explicit assignment.</p>
<p>You will appreciate this the first time you have an enum with lots of values.</p>
    </div>