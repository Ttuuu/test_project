<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think the function looks good. It does what it's supposed to do when the input is correct. However, if the input number <code>x</code> is larger or equal to <code>1&lt;&lt;bitwidth</code>, the behavior is undefined. To rectify this, I suggest:</p>

<pre><code>uint64_t CircShift(uint64_t x, uint8_t n, uint8_t bitwidth)
{
    return ((x&lt;&lt;n)&amp;((1&lt;&lt;bitwidth)-1)) | 
           ((x&amp;((1&lt;&lt;bitwidth)-1))&gt;&gt;(bitwidth-n));
}
</code></pre>

<p>Just add another mask to the right-shifted part. Also note that for shifts that are bigger than 64 bits, both your original function and my new function behave strangely. To rectify this, you can use the fact that a circular shift by <code>bitlength</code> steps simply give you the original number:</p>

<pre><code>uint64_t CircShift(uint64_t x, uint8_t n, uint8_t bitwidth)
{
    return ((x&lt;&lt;(n%bitwidth))&amp;((1&lt;&lt;bitwidth)-1)) 
        | ((x&amp;((1&lt;&lt;bitwidth)-1))&gt;&gt;(bitwidth-(n%bitwidth)));
}
</code></pre>
    </div>