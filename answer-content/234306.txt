<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In order to work through your own code, I ended up designing and implementing my own version of two-way mapping. Interestingly, the designs are fairly similar. My focus of this review is on the overall implementation of the concept, as your code itself is clear and straightforward.</p>

<p>My original thought was to use only one <code>Dictionary</code> but eventually ended up with the two <code>Dictionary</code> design similar to yours. My deviation was to implement an interface that is as close to a standard <code>Dictionary</code> as possible. Also, I did not use a pre-declared class or auto-instantiated Dictionary instances so the object could be "reset" or reused. </p>

<p><strong>Class Module:</strong> TwoWayMap</p>

<pre><code> Option Explicit

Public Enum DataSet
    A
    B
End Enum

Private Type InternalData
    setA As Dictionary
    setB As Dictionary
End Type
Private this As InternalData

Private Enum TwoWayMapErrors
    [_First] = vbObject + 900
    ObjectNotAllowed
    KeyExists
    KeyDoesNotExist
    ValueExists
    ArraySizeMismatch
    [_Last]
End Enum

Public Property Get Count(Optional ByVal WhichSet As DataSet = DataSet.A) As Long
    Count = iff(WhichSet = A, this.setA.Count, this.setB.Count)
End Property

Public Property Get Keys(Optional ByVal WhichSet As DataSet = DataSet.A) As Variant
    Keys = IIf(WhichSet = A, this.setA.Keys, this.setB.Keys)
End Property

Public Property Get Exists(ByVal Key As Variant, _
                           Optional ByVal WhichSet As DataSet = DataSet.A) As Boolean
    Dim thisKey As String
    thisKey = IIf(VarType(Key) = vbString, Key, CStr(Key))
    Exists = IIf(WhichSet = A, this.setA.Exists(thisKey), this.setB.Exists(thisKey))
End Property

Public Sub Add(ByVal Key As String, ByRef Value As Variant, _
               Optional ByVal WhichSet As DataSet = DataSet.A)
    If IsObject(Value) Then
        Err.Raise ObjectNotAllowed, Source:="TwoWayMap.Add", _
                  Description:="ERROR in TwoWayMap.Add: Value must not be an object!"
    End If

    Dim firstSet As Dictionary
    Dim secondSet As Dictionary
    Set firstSet = IIf(WhichSet = A, this.setA, this.setB)
    Set secondSet = IIf(WhichSet = A, this.setB, this.setA)

    If firstSet.Exists(Key) Then
        Err.Raise KeyExists, Source:="TwoWayMap.Add", _
                  Description:="ERROR in TwoWayMap.Add: Key already exists in Map!"
    End If
    If secondSet.Exists(CStr(Value)) Then
        Err.Raise ValueExists, Source:="TwoWayMap.Add", _
                  Description:="ERROR in TwoWayMap.Add: Value already exists in Map!"
    End If

    AddToSet IIf(WhichSet = DataSet.A, DataSet.A, DataSet.B), Key, Value
    AddToSet IIf(WhichSet = DataSet.A, DataSet.B, DataSet.A), Value, Key
End Sub

Public Property Get Item(ByVal Key As Variant, _
                         Optional ByVal WhichSet As DataSet = DataSet.A) As Variant
    Dim thisKey As String
    thisKey = IIf(VarType(Key) = vbString, Key, CStr(Key))
    Dim theSet As Dictionary
    Set theSet = IIf(WhichSet = A, this.setA, this.setB)
    If Not theSet.Exists(Key) Then
        Err.Raise KeyDoesNotExist, Source:="TwoWayMap.Item", _
                  Description:="ERROR in TwoWayMap.Item(Get): Key does NOT exist in Map!"
    End If
    Item = theSet(CStr(thisKey))
End Property

Public Property Let Item(ByVal Key As Variant, _
                         Optional ByVal WhichSet As DataSet = DataSet.A, _
                         ByRef Value As Variant)
    Dim thisKey As String
    thisKey = IIf(VarType(Key) = vbString, Key, CStr(Key))
    Dim theSet As Dictionary
    Set theSet = IIf(WhichSet = A, this.setA, this.setB)
    If Not theSet.Exists(Key) Then
        Err.Raise KeyDoesNotExist, Source:="TwoWayMap.Item", _
                  Description:="ERROR in TwoWayMap.Item(Let): Key does NOT exist in Map!"
    End If
    theSet(CStr(thisKey)) = Value
End Property

Public Function Create(ByVal arrayA As Variant, ByVal arrayB As Variant) As TwoWayMap
    Dim lengthA As Long
    Dim lengthB As Long
    lengthA = UBound(arrayA) - LBound(arrayA) + 1
    lengthB = UBound(arrayB) - LBound(arrayB) + 1
    If lengthA &lt;&gt; lengthB Then
        Err.Raise ArraySizeMismatch, Source:="TwoWayMap.Create", _
                  Description:="ERROR in TwoWayMap.Create: Array sizes are not the same!"
    End If

    this.setA.RemoveAll
    this.setB.RemoveAll

    Dim j As Long
    j = LBound(arrayB)

    Dim i As Long
    For i = LBound(arrayA) To UBound(arrayA)
        AddToSet A, arrayA(i), arrayB(j)
        AddToSet B, arrayB(j), arrayA(i)
        j = j + 1
    Next i
    Set Create = Me
End Function

Private Sub AddToSet(ByVal WhichSet As DataSet, ByVal Key As Variant, _
                     ByVal Value As Variant)
    Dim theSet As Dictionary
    Set theSet = IIf(WhichSet = A, this.setA, this.setB)
    theSet.Add CStr(Key), Value
End Sub

Private Sub Class_Initialize()
    Set this.setA = New Dictionary
    Set this.setB = New Dictionary
End Sub
</code></pre>

<p>Code Module: Module1</p>

<pre><code>Option Explicit

Sub TestMyMap()
    Dim thisMap As TwoWayMap
    Set thisMap = New TwoWayMap
    thisMap.Add "vbBlue", vbBlue
    thisMap.Add "vbRed", vbRed
    thisMap.Add "vbGreen", vbGreen

    Debug.Print "------new run----------"
    Dim Key As Variant
    For Each Key In thisMap.Keys
        Debug.Print "Key: " &amp; Key &amp; ", Value: " &amp; thisMap.Item(Key)
    Next Key

    For Each Key In thisMap.Keys(B)
        Debug.Print "Key: " &amp; Key &amp; ", Value: " &amp; thisMap.Item(Key, B)
    Next Key

End Sub
</code></pre>

<p>I'm concerned that I haven't covered all the edge cases yet, but I may still look at the design and see what could be improved.</p>
    </div>