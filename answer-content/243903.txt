<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Even if you don't want to use the standard library <code>random</code> module, you might want to <a href="https://github.com/python/cpython/blob/3.8/Lib/random.py" rel="nofollow noreferrer">take a look at their implementation</a> and do something similar. This way you can always replace your random class with the standard library one. Here I directly copied the relevant methods:</p>
<pre><code>def _random(numbytes):
    with open('/dev/random', 'rb') as f:
        return f.read(numbytes)

class Random:
    def getrandbits(self, k):
        """getrandbits(k) -&gt; x.  Generates an int with k random bits."""
        if k &lt;= 0:
            raise ValueError('number of bits must be greater than zero')
        numbytes = (k + 7) // 8                       # bits / 8 and rounded up
        x = int.from_bytes(_random(numbytes), 'big')
        return x &gt;&gt; (numbytes * 8 - k)                # trim excess bits

    def _randbelow(self, n):
        "Return a random int in the range [0,n).  Raises ValueError if n==0."

        getrandbits = self.getrandbits
        k = n.bit_length()  # don't use (n-1) here because n can be 1
        r = getrandbits(k)          # 0 &lt;= r &lt; 2**k
        while r &gt;= n:
            r = getrandbits(k)
        return r

    def choice(self, seq):
        """Choose a random element from a non-empty sequence."""
        try:
            i = self._randbelow(len(seq))
        except ValueError:
            raise IndexError('Cannot choose from an empty sequence') from None
        return seq[i]
</code></pre>
<p>You can then use it like this:</p>
<pre><code>random = Random()

def generate_random_word(length=8):
    with open('/usr/share/dict/words') as file:
        words = [word for line in file if len(word := line.strip()) == length]
    return random.choice(words)
</code></pre>
<p>If you need to do this more than once, then you might want to read the list of words only once and not every time you run the function. You can achieve this by using a nested function (you could also use a global variable or a class):</p>
<pre><code>def random_word_generator(length=8):
    with open('/usr/share/dict/words') as file:
        words = [word for line in file if len(word := line.strip()) == length]
    def _generate():
        return random.choice(words)
    return _generate
</code></pre>
<p>Which you can use like this:</p>
<pre><code>random = Random()
generate_random_word = random_word_generator()
random_word = generate_random_word()
</code></pre>
    </div>