<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Ways to improve and optimize:</p>

<ul>
<li><p>function <code>generate_standard</code> is named too general whereas it loads concrete csv file <code>'solubility.csv'</code> and processes a particular column <code>'SMILES'</code>.<br>A more maintainable and flexible way is to make the function more decoupled and unified such that it accepts an input <em>csv</em> file name and the crucial column name. <br>The main purpose can be described as <strong><em>"aligning a specific column's values length by the longest value"</em></strong>.<br>Let's give a function the appropriate name with the following signature:</p>

<pre><code>def align_col_length(fname, col_name):
    """Align a specified column's values length by the longest value"""
    df = pd.read_csv(fname)
    ...
</code></pre></li>
<li><p>finding the longest string value in <code>SMILES</code> column.<br>Instead of <code>for</code> loop, since you are dealing with <code>pandas</code> which is powerful enough and allows <code>str</code> accessor on <code>pd.Series</code> objects (points to column values in our case):</p></li>
</ul>

<blockquote>
  <p><code>Series</code> and <code>Index</code> are equipped with a set of string processing
  methods that make it easy to operate on each element of the array.
  Perhaps most importantly, these methods exclude missing/NA values
  automatically. These are accessed via the <code>str</code> attribute and
  generally have names matching the equivalent (scalar) built-in string
  methods</p>
</blockquote>

<p>Thus, applying a flexible chain <code>df[col_name].str.len()</code> + <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.idxmax.html" rel="nofollow noreferrer"><code>pd.Series.idxmax</code></a> we would be able to get the row label/position of the maximum value.<br>Then, just easily get the column's longest value by the row position using:</p>

<pre><code>longest = df.loc[df[col_name].str.len().idxmax(), col_name]
</code></pre>

<ul>
<li><em>New</em> <code>dataframe['standard']</code> column with padded values. <br>It only remains to apply a flexible one-liner using <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.str.pad.html" rel="nofollow noreferrer"><code>pd.Series.str.pad</code></a> routine (to pad the <code>col_name</code> values up to width of <code>len(longest)</code>)</li>
</ul>

<hr>

<p>The final optimized function now becomes a more concise and <code>pandas</code>-flavored:</p>

<pre><code>import pandas as pd

def align_col_length(fname, col_name):
    """Align a specified column's values length by the longest value"""
    df = pd.read_csv(fname)
    longest = df.loc[df[col_name].str.len().idxmax(), col_name]
    df['standard'] = df[col_name].str.pad(len(longest), side='right', fillchar='0')

    return df, longest
</code></pre>

<hr>

<p>Testing:</p>

<pre><code>df, longest = align_col_length('solubility.csv', col_name='SMILES')

print('longest SMILE value:', longest)
print('*' * 30)   # just visual separator
print(df)
</code></pre>

<p>The output:</p>

<pre><code>longest SMILE value: [Zn++].CC(c1ccccc1)c2cc(C(C)c3ccccc3)c(O)c(c2)C([O-])=O.CC(c4ccccc4)c5cc(C(C)c6ccccc6)c(O)c(c5)C([O-])=O
******************************
                                                                                                     SMILES  ...                                                                                                  standard
0  [Br-].CCCCCCCCCCCCCCCCCC[N+](C)(C)C                                                                       ...  [Br-].CCCCCCCCCCCCCCCCCC[N+](C)(C)C000000000000000000000000000000000000000000000000000000000000000000000
1  O=C1Nc2cccc3cccc1c23                                                                                      ...  O=C1Nc2cccc3cccc1c23000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2  [Zn++].CC(c1ccccc1)c2cc(C(C)c3ccccc3)c(O)c(c2)C([O-])=O.CC(c4ccccc4)c5cc(C(C)c6ccccc6)c(O)c(c5)C([O-])=O  ...  [Zn++].CC(c1ccccc1)c2cc(C(C)c3ccccc3)c(O)c(c2)C([O-])=O.CC(c4ccccc4)c5cc(C(C)c6ccccc6)c(O)c(c5)C([O-])=O
3  C1OC1CN(CC2CO2)c3ccc(Cc4ccc(cc4)N(CC5CO5)CC6CO6)cc3                                                       ...  C1OC1CN(CC2CO2)c3ccc(Cc4ccc(cc4)N(CC5CO5)CC6CO6)cc300000000000000000000000000000000000000000000000000000

[4 rows x 3 columns]
</code></pre>
    </div>