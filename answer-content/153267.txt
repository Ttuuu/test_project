<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Finalize constants</h3>

<blockquote>
<pre><code>    private static int N = 26;
</code></pre>
</blockquote>

<p>This could be </p>

<pre><code>    private static final int N = 26;
</code></pre>

<p>Then if you accidentally set <code>N</code> to some other value, it will show an error at compilation time.  As is, </p>

<pre><code>        N = 25;
</code></pre>

<p>would only sometimes cause a runtime error.  I.e. only if there is a z in the input.  </p>

<h3>Remove duplicate code</h3>

<blockquote>
<pre><code>    private static boolean isAnagram(String a, String b) {
        int []countA = new int[N];
        int []countB = new int[N];

        for (char c : a.toCharArray()) {
            countA[c - 'a']++;
        }

        for (char c : b.toCharArray()) {
            countB[c - 'a']++;
        }

        for (int i = 0; i &lt; N; i++) {
            if (countA[i] != countB[i]) {
                return false;
            }
        }

        return true;
    }
</code></pre>
</blockquote>

<p>This has duplicate code.  Consider the following alternative.  </p>

<pre><code>    private static int[] countLetters(String s) {
        int[] counts = new int[N];
        for (char c : s.toCharArray()) {
            counts[c - 'a']++;
        }

        return counts;
    }

    private static boolean isAnagram(int[] countsA, int[] countsB) {
        for (int i = 0; i &lt; countsA.length; i++) {
            if (countsA[i] != countsB[i]) {
                return false;
            }
        }

        return true;
    }

    private static boolean isAnagram(String a, String b) {
        return isAnagram(countLetters(a), countLetters(b));
    }
</code></pre>

<h3>Naming nitpick</h3>

<blockquote>
<pre><code>    private static int getPairsCount(String text) {
</code></pre>
</blockquote>

<p>Calling a method <code>getWhatever</code> implies that there is a field named <code>whatever</code> that it returns.  Consider </p>

<pre><code>    private static int countPairs(String text) {
</code></pre>

<p>Now we expect that we are counting something related to <code>text</code>.  </p>

<h3>Do math once</h3>

<blockquote>
<pre><code>            for (int j = 1; j &lt;= length - i; j++) {
                subsets.add(text.substring(i, i + j));
</code></pre>
</blockquote>

<p>Consider </p>

<pre><code>            for (int j = i + 1; j &lt;= length; j++) {
                subsets.add(text.substring(i, j));
</code></pre>

<p>This changes a subtraction to an addition in the loop definition.  </p>

<p>And it removes an addition from each iteration of the loop.  Why do <code>i + j</code> if you can just put the right value in <code>j</code>?  </p>

<h3>Don't repeat work</h3>

<blockquote>
<pre><code>    private static int getPairsCount(String text) {
        int count = 0;
        int length = text.length();

        List&lt;String&gt; subsets = new ArrayList&lt;&gt;();
        for (int i = 0; i &lt; length; i++) {
            for (int j = 1; j &lt;= length - i; j++) {
                subsets.add(text.substring(i, i + j));
            }
        }

        for (int i = 0; i &lt; subsets.size(); i++) {
            for (int j = i + 1; j &lt; subsets.size(); j++) {
                String s1 = subsets.get(i);
                String s2 = subsets.get(j);
                if (i != j &amp;&amp;
                    s1.length() == s2.length() &amp;&amp;
                    isAnagram(s1, s2)) {
                    count++;
                }
            }
        }
        return count;
    }
</code></pre>
</blockquote>

<p>Each time you call <code>isAnagram</code>, it counts the letters again in this code.  Consider:  </p>

<pre><code>    private static int countPairs(String text) {
        int length = text.length();
        List&lt;int[]&gt; subsets = new ArrayList&lt;&gt;();
        for (int i = 0; i &lt; length; i++) {
            for (int j = i + 1; j &lt;= length; j++) {
                subsets.add(countLetters(text.substring(i, j)));
            }
        }

        int count = 0;
        for (int i = 0; i &lt; subsets.size(); i++) {
            int[] countsA = subsets.get(i);
            for (int j = i + 1; j &lt; subsets.size(); j++) {
                int[] countsB = subsets.get(j);
                if (countsA.length == countsB.length &amp;&amp; isAnagram(countsA, countsB)) {
                    count++;
                }
            }
        }

        return count;
    }
</code></pre>

<p>This counts the letters for each string once.  </p>

<p>Since <code>subsets.get(i)</code> has the same value regardless of <code>j</code>, we can do it outside the <code>j</code> loop.  We don't have to repeat it on each iteration of the inner loop.  </p>

<p>Since <code>j</code> increments from <code>i + 1</code> and up, it can never equal <code>i</code>.  So no need to check <code>i != j</code>.  </p>

<p>Remember when we rewrote <code>isAnagram</code> to separate counting the letters from comparing counts?  We can make use of that here.  Rather than storing substrings, we can just store counts.  Now we no longer have to recount the string on each comparison.  </p>

<h3>Complexity analysis</h3>

<p>Your original code is \$\mathcal{O}(n^5)\$ where \$n\$ is the length of the string.  This is because <code>subsets</code> is \$\mathcal{O}(n^2)\$ in size and you iterate over it twice with a linear time call to <code>isAnagram</code> inside that.  </p>

<p>This variant reduces that to \$\mathcal{O}(n^4)\$, as <code>isAnagram</code> is now constant time relative to the length of the string.  </p>

<p>Note that the first pair of loops is now \$\mathcal{O}(n^3)\$, but that doesn't matter if the second set is \$\mathcal{O}(n^4)\$.  </p>

<h3>Advanced</h3>

<p>We throw all the substrings in the same bucket and compare each to each.  However, if the length is not equal, we don't need to compare.  So we could put different length substring counts in different buckets.  Then we'd only have to compare within a bucket.  This is \$\mathcal{O}(n^3)\$ as there are \$\mathcal{O}(n)\$ buckets of \$\mathcal{O}(n)\$ items each.  So comparing in a bucket is \$\mathcal{O}(n^2)\$ which you do \$\mathcal{O}(n)\$ times.  </p>

<p>It won't change the complexity analysis, but you can potentially increases the efficiency of <code>isAnagram</code> by implementing a hash code.  So we only need to do a full comparison if the hashcodes are equal.  We could calculate the hashcode at the same time as we count the letters.  </p>
    </div>