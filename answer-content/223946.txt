<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>active.mark_installed = mark_installed = async function(uuid) {
    await ConsumerAccounts.findOne({_id: uuid}).then(result =&gt; {
        if (result.software_installed) {
            return false;
        } else {
            return result.mark_installed(uuid);
        }
    }).catch(err =&gt; {

    });
};
</code></pre>

<p>Note that <code>async</code>/<code>await</code> is just sugar syntax for promises. Few key things to remember when using it:</p>

<ul>
<li><code>await</code> "waits" for promises.</li>
<li><code>async</code> functions return a promise.</li>
<li>Returned values from an <code>async</code> function resolves the promise it returns.</li>
<li>Thrown errors inside async rejects the promise it returns.</li>
</ul>

<p>Nothing is wrong with chaining <code>then</code> in <code>async</code>/<code>await</code>, the syntax is perfectly legit. I often use it to inline some operations. However, it's usually not needed. If you're going <code>async</code>/<code>await</code>, go all-in with it.</p>

<p>This could be rewritten as:</p>

<pre><code>active.mark_installed = mark_installed = async function(uuid) {
  try {
    const result = await ConsumerAccounts.findOne({_id: uuid})
    return result.software_installed ? false : result.mark_installed(uuid)
  } catch(error) {

  }
}
</code></pre>

<hr>

<pre><code>active.ws_ping = async function(obj, cb) {

active.ping = async function(obj, cb) {
</code></pre>

<p>This is an anti-pattern. You're using an <code>async</code> function (which returns a promise that should inform you if the asynchronous operation succeeded or failed), but then you pass in a callback for the error.</p>

<p>Instead of passing in the callback, have the caller attach a <code>then</code> with the  callback as the error callback, or <code>await</code> the call in a <code>try-catch</code>.</p>

<pre><code>active.ping = async function(obj) {

  // Throwing an error in an async effectively rejects the returned promise.
  if (!obj.ip) throw new Error('Property `ip` required')
  if (!obj.port) throw new Error('Property `port` required')
  if (!obj.relay_ip) throw new Error('Property `relay_ip` required')
  if (!obj.relay_port) throw new Error('Property `relay_port` required')
  if (!obj.uuid) throw new Error('Property `uuid` required')

  const ref = obj.expires_secs
  const expires_secs = ref != null ? ref : this.expires_secs

  await this.mark_installed(obj.uuid)

  const val = `${obj.ip}_${obj.port}_${obj.relay_ip}_${obj.relay_port}`

  return redis.setex(`${this.prefix}:${obj.uuid}`, expires_secs, val)
}

// Usage
active.ping(obj).then(result =&gt; {

}, error =&gt; {

})

// or
try {
  const result = await active.ping(obj)
} catch (error) {

}
</code></pre>

<hr>

<p>Few other minor nitpicks:</p>

<ul>
<li>Not a big fan of "declare all variables ahead of time". What happens is cognitive overhead, you scroll up to know what's there/what you can assign to. Declare variables as you need it.</li>
<li>Most of your variables are only ever assigned a value once. Use <code>const</code> for those variables.</li>
<li>Use Template Literals to construct interpolated strings.</li>
<li>JavaScript uses camelCase for naming. While your data could be snake-case due to its origins, use camelCase stay consistent on the JS side of things.</li>
<li>For temporary variables in blocks (i.e. loops, ifs), use <code>let</code>/<code>const</code> within the loop block. This way, you're sure that the variable is scoped to that block, and never leaks out to the outer scopes.</li>
</ul>
    </div>