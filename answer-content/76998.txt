<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some mostly stylistic improvements you could apply:</p>

<ul>
<li><p>There is no need to cast the return value of <code>malloc()</code>, unless you plan on compiling this code as C++. In C, <code>void*</code> converts implicitly to any other pointer type. So the cast is just boilerplate in this case.</p></li>
<li><p>Prefer using <code>sizeof(variable)</code> instead of <code>sizeof(Type)</code>. Example: </p>

<pre><code>Node *head = malloc(sizeof(*head));
</code></pre>

<p>This makes maintenance easier, since now if you introduce a new <code>Node</code> type, you only have to change one place, with no chance of updating one side of the expression and forgetting the other. Note that in this example, the dereference of <code>head</code> is valid because <code>sizeof</code> is a compile-time operation, so there is no actual pointer access taking place here, just type inference.</p></li>
<li><p>Consider giving more robust names to your functions. <code>find()</code>, <code>insert()</code>, etc, are very common names, which can apply to many things, not just lists. In C, you cannot overload function names, so in any major project, these names would be very likely to cause collisions with other global identifiers. Name prefixes are a common approach in C to solve this problem. Consider prefixing the function names with <code>list_</code> or any other prefix you might prefer. I.e.:</p>

<pre><code>void list_insert(Node *current, int data);
void list_delete(Node *current, int data);
</code></pre></li>
<li><p>Instead of returning an integer 0|1 to represent a boolean value, you can use the <code>bool</code> type, declared in the <a href="http://www.cplusplus.com/reference/cstdbool/" rel="nofollow noreferrer"><code>&lt;stdbool.h&gt;</code></a> header, which is more idiomatic.</p></li>
<li><p><code>delete()</code> function is a void function, so it doesn't need an explicit return statement at the end.</p></li>
<li><p>Looks like you are using <code>printf()</code> to log errors:</p>

<blockquote>
<pre><code>if(current-&gt;next == NULL) {
    printf("\nElement %d is not present in the list\n", data);
    return;
}
</code></pre>
</blockquote>

<p>For error output, it is more correct to use fprintf and write to the <a href="http://www.cplusplus.com/reference/cstdio/stderr/?kw=stderr" rel="nofollow noreferrer"><code>stderr</code></a> standard stream.</p></li>
<li><p>The list printing function <code>print()</code> could be made more flexible by receiving the output stream as a parameter. So you don't limit the caller to always printing to <code>stdout</code>, it can also be used to dump the list to a file (notice the use of <a href="http://www.cplusplus.com/reference/cstdio/fprintf/" rel="nofollow noreferrer"><code>fprintf()</code></a>).</p>

<pre><code>void print(Node *current, FILE *stream) {
    while(current != NULL) {
        fprintf(stream, "%d ", current-&gt;data);
        current = current-&gt;next;
    }   
}
</code></pre></li>
<li><p>When you want to allocate and immediately zero-initialize data, such as in here:</p>

<blockquote>
<pre><code>Node *head = (Node *)malloc(sizeof(Node));
head-&gt;next = NULL;
head-&gt;prev = NULL;
</code></pre>
</blockquote>

<p>The standard function <a href="http://www.cplusplus.com/reference/cstdlib/calloc/" rel="nofollow noreferrer"><code>calloc()</code></a> can be used to make code more concise:</p>

<pre><code>Node *head = calloc(1, sizeof(*head));
</code></pre></li>
</ul>
    </div>