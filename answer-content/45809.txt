<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your algorithm is not efficient (thats the brutal part of the answer).</p>

<p>Searching in a list of  t values is a task that can be accomplished using O(log(t)) comparisons. Here we have t=m*n values so it should be accomplished using O(log(m*n)) = O(log(m))+O(log(n)) comparisons. I suspect your algorithm may execute the while loop about <code>matrix.length</code> times so it is not O(log(m)) (where m is the number of rows). </p>

<p>The algorithm could work in the following way:</p>

<ul>
<li>if the searched value is smaller then the first column in the first row then the searched value is not contained in the matrix.</li>
<li>Then do a binary search on the first column of the matrix to find the largest  entry smaller or equal to the searchd value</li>
<li>if the value found macthes you are done. </li>
<li>otherwise do a binary search on the row found. </li>
<li>if the value found matches the searched value you are done</li>
<li>otherwise the searched value is not in the matrix</li>
</ul>

<p>Annother way is to treat the problem like a single dimension sorted array as it is proposed in the comment of @Azar. </p>

<p>Even a small piece of code can have <a href="http://en.wikipedia.org/wiki/Binary_search_algorithm#Implementation_issues" rel="nofollow">a lot of errors</a> so it does make sense to try to use <a href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html" rel="nofollow">library methods</a> to accomplish this task and not implement the binary search by yourself (but I don't know if this is the intention of the poser of the problem).</p>

<p>This blog entry discusses an <a href="http://googleresearch.blogspot.co.at/2006/06/extra-extra-read-all-about-it-nearly.html" rel="nofollow">example of a buggy implementation in Java</a>. It references the following <a href="http://bugs.java.com/bugdatabase/view_bug.do?bug_id=5045582" rel="nofollow">SUN  bug report</a> because there was an errornous implementation of the binary search even in the JDK.</p>
    </div>