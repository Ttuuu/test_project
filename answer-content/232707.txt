<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Winning Bug</h1>
<p>When the board is at this stage and the user gets the next move:</p>
<pre><code>      |       |       
  X   |   O   |   X
      |       |       
----------------------
      |       |       
      |   O   |    
      |       |       
----------------------
      |       |       
  O   |   X   |   X
      |       |       
</code></pre>
<p>And the user enters <strong>5</strong>, the game bugs and will let the user enter again and win the game, instead of the AI placing an X at position 4 resulting in a draw.</p>
<h1>Start Game Bug</h1>
<p>When first prompted to select a difficulty, you enter a number (lets say <strong>1</strong>). Then it asks you what you want to do. You enter <strong>3</strong> to play. It then asks you what difficulty <em>again</em>. I would remove the first prompt of difficulty, since it's kinda weird you ask for the difficulty <em>before</em> seeing if the user wants to play at all.</p>
<h1><code>win</code></h1>
<p>When returning <code>True</code> or <code>False</code>, 90% of the time you can instead return the expression that would result in those values. Observe:</p>
<pre><code>def win(p):
    """ Checks for win """

    return any([
        any(all(board[i][j] == p for j in range(size)) for i in range(size)),
        any(all(board[j][i] == p for j in range(size)) for i in range(size)),
        all(board[i][i] == p for i in range(size)),
        all(board[i][-(i + 1)] == p for i in range(size))
    ])
</code></pre>
<p>This erases the need of any <code>return True</code> statements as returning the <em>expression</em> will result in a boolean value itself.</p>
<h1>Ternary Operators</h1>
<p>This</p>
<pre><code>if board_type == 1:
    printBoard1()
else:
    printBoard2()
</code></pre>
<p>can be simplified to this using a <a href="https://book.pythontips.com/en/latest/ternary_operators.html" rel="nofollow noreferrer">ternary operator</a>:</p>
<pre><code>printBoard1() if board_type == 1 else printBoard2()
</code></pre>
<h1>Method Naming</h1>
<p>Method and variable names should <strong>both</strong> be <code>snake_case</code>.</p>
<pre><code>printBoard1() -&gt; print_board_one()
</code></pre>
<p>I would also use "one" instead of "1", but that's a personal preference.</p>
<h1>That big list of names</h1>
<p>Time to address the elephant in the room. I would put the names in a separate file, like <code>names.txt</code>, and extrapolate the information from there. It clears up a bunch of bulk from your code. Here's how this method might look like:</p>
<p><strong>names.txt</strong></p>
<pre><code>Ben,David,Hannah,Max,Sarah,William
</code></pre>
<pre><code>def get_names():
    with open("names.txt", "r") as file:
        return ''.join(file.readlines()).split(",")
</code></pre>
<p>It will return</p>
<pre><code>["Ben", "David", "Hannah", "Max", "Sarah", "William"]
</code></pre>
<p>What this does is reads every line in the file, converts that list into a string, then returns a list of each word split by a comma. It's a simple way to access and get data from the names file. It also significantly reduces the clutter in your code.</p>
<p>If you don't want to go through the trouble of putting each name in the file, that's understandable. What you can do is create another python module <code>names.py</code>, put the list in that file, and import from that file. Take a look:</p>
<pre><code>from names import NAMES # NAMES is the list of names
</code></pre>
<p>Now you can operate on this <code>NAMES</code> list.</p>
<h1>String Formatting</h1>
<p>This</p>
<pre><code>print(name + ' Moved To Grid', r[0] * size + r[1] + 1)
</code></pre>
<p>can be written like this:</p>
<pre><code>print(f"{names} Moved To Grid {r[0] * size + r[1] + 1}")
</code></pre>
<p>The same with these input statements</p>
<pre><code>X = input(f"Please Enter Character For Player 1 (currently {X}): ")
O = input(f"Please Enter Character For Player 2 (currently {O}): ")
</code></pre>
<h1>Type Hints</h1>
<p>Lets take a look at this method header:</p>
<pre><code>def play_again(p1, p2):
</code></pre>
<p>Now, consider this:</p>
<pre><code>def play_again(p1: str, p2: str) -&gt; None:
</code></pre>
<p>These can help you and other people using your program identify what types to pass into the method, as well as what values could be returned.</p>
<h1>If Statement Formatting</h1>
<p>This</p>
<pre><code>if level == 1: get_easy_AI_move(ai, pl, 1, computer)
if level == 2: get_hard_AI_move(ai, pl, 1, computer)
if level == 3: get_insane_AI_move(ai, pl, 1, computer)
</code></pre>
<p>should really be this</p>
<pre><code>if level == 1:
    get_easy_AI_move(ai, pl, 1, computer)
if level == 2:
    get_hard_AI_move(ai, pl, 1, computer)
if level == 3:
    get_insane_AI_move(ai, pl, 1, computer)
</code></pre>
<h1>Main Guard</h1>
<p>You should wrap all initialization code in a main guard. This will allow you to import this module without having the code run. Take a look:</p>
<pre><code>if __name__ == '__main__':
    main_menu()
</code></pre>
<p>It's not very conventional to have an if statement on one line.</p>
    </div>