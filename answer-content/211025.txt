<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code looks pretty decent. My two cents:</p>

<ol>
<li><p>Implement <code>Default</code></p>

<pre><code>impl Default for Fifo {
    fn default() -&gt; Fifo {
        Fifo {
            size: 0,
            read_idx: 0,
            write_idx: 0,
            buffer: [0; FIFO_CAPACITY],
        }
    }
}
</code></pre>

<p>Then you could simplify your <code>new</code> to:</p>

<pre><code>pub fn new() -&gt; Fifo {
    Fifo::default()
}
</code></pre></li>
<li><p>Simplify expressions</p>

<p>L27: <code>self.size = self.size + 1</code> will become <code>self.size += 1</code><br>
L40: <code>self.size = self.size - 1</code> will become <code>self.size -= 1</code></p></li>
<li><p>Replace str error with enums</p>

<pre><code>pub enum FifoError {
    FifoFull,
}

pub fn push(&amp;mut self, item: u8) -&gt; Result&lt;(), FifoError&gt; {
    if self.buffer_full() {
       Err(FifoError::FifoFull)
    } else {
        ...
}
</code></pre></li>
<li><p>Add <code>assert_eq!(None, buffer.pop());</code> to the end of every test where feasible, e,g.</p>

<ul>
<li><code>pop_item_that_was_pushed_to_buffer</code></li>
<li><code>popping_returns_first_pushed_first</code></li>
<li><code>pop_beyond_write_index_continuing_on_works</code></li>
<li><code>buffer_wraps_around</code></li>
</ul></li>
</ol>

<p>For further exercices I would recommend:</p>

<ol>
<li>Implement <code>Iterator</code>/<code>IntoIterator</code>/<code>FromIterator</code></li>
<li>Next, implement Debug, which is fairly easy (Hint: Take a look at the implementation of Debug for <a href="https://doc.rust-lang.org/std/primitive.slice.html" rel="noreferrer"><code>slice</code></a>)</li>
<li>Make it accept a generic type</li>
</ol>
    </div>