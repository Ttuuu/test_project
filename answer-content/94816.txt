<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The problem that I have with writing something like the original code is that it is complicated to be sure that it does the right thing in every situation.  You've taken three values and perform whopping fifteen comparisons on them.  What if you'd missed one?  The code would almost work, except it would occasionally (in that one situation) return the wrong result.  </p>

<p>A conceptually simple way to handle this is </p>

<pre><code>public static boolean consecutive(int... numbers) {
    Arrays.sort(numbers);

    for (int i = 1; i &lt; numbers.length; i++) {
        if (numbers[i] != numbers[i-1] + 1) {
            return false;
        }
    }

    return true;
}
</code></pre>

<p>Sorting saves a lot of logic here.  Since we know the order, we can just check the differences directly.  If any adjacent numbers are not consecutive, we can return <code>false</code>.  If it makes it all the way through, they all must be consecutive.  </p>

<p>Note that this also handles other than three numbers.  For example, it always returns <code>true</code> if there's zero or one number passed.  This may or may not be what you want.  </p>

<p>Now we do five manual comparisons (including the comparison of <code>i</code> to <code>numbers.length</code>) to determine that three numbers are consecutive.  The sort does more comparisons, but we don't have to worry if we got those correctly.  The chances of there being an error in sort that made it through the Java compiler's testing is extremely low.  </p>

<p>I find this version much easier to read and verify correctness than the original code.  For most cases, the difference in runtime is going to be minimal and unimportant.  My ability to write code that looks like this quickly and be sure it works is usually going to be more important.  And if you really need blazing speed, there are always options like <a href="https://codereview.stackexchange.com/a/94838/71574">@200_success</a> offers.  </p>
    </div>