<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Welcome to Python!</p>

<blockquote>
  <p>"Project Euler exists to encourage, challenge, and develop the skills and enjoyment of anyone with an interest in the fascinating world of mathematics."</p>
</blockquote>

<p>Like you, I went to Project Euler when I was learning Python as yet another language for my toolbox.  Unfortunately, Project Euler is primarily a mathematics challenge site, not a programming challenge site.  The emphasis is on solving the problem and getting the right answer; not on programming skills.  More over, the site asks that you <strong>not</strong> post your solution, which really discourages you from getting feedback on your programming skills, and proper best practices for the language.  So while you can get problems that you can actually try writing code to solve the problem for, you’re still discouraged from getting feedback on your approach.  Not exactly an ideal site for learning a new language on.</p>

<p>Still, you have violated their request and posted your solution, so let’s try and give you some useful feedback.</p>

<h2>Write Functions</h2>

<p>You’ve got two sets of data to try your solution on.  The first being the “example” data in the problem itself; the second being the dataset you are being asked to solve.  If you’re going to do something twice, write a function:</p>

<pre><code>def sum_of_multiples_of_3_or_5_below(limit):
    total = 0
    for n in range(0, limit):
        if n % 3 == 0 or n % 5 == 0:
            total += n
    return total
</code></pre>

<p>Then you can test your function with the example data, as well as solve the problem:</p>

<pre><code>assert sum_of_multiples_of_3_or_5_below(10) == 23

answer = sum_of_multiples_of_3_or_5_below(1000)
print(f"sum of all multiples of 3 or 5 below 1000 is {answer}")
</code></pre>

<p>This gives you confidence in your solution.  Usually the example data is fairly trivial, so the time needed to solve the problem twice isn’t noticeably increased.</p>

<h2>Use a <code>__main__</code> guard</h2>

<p>Now that we have a function, it is possible to import this “module” into another program to reuse the function.  Except, it runs that pesky code at the bottom, generating unexpected output.  Using a <code>__main__</code> guard, the code will only execute when we run this script, not when this scripted is imported:</p>

<pre><code>if __name__ == '__main__':
    assert sum_of_multiples_of_3_or_5_below(10) == 23

    answer = sum_of_multiples_of_3_or_5_below(1000)
    print(f"sum of all multiples of 3 or 5 below 1000 is {answer}") 
</code></pre>

<h2>Generalization</h2>

<p>This function is still perhaps too specific.  Why just below a <code>limit</code>.  Why just multiples of <code>3</code> or <code>5</code>?  We can generalize things a wee bit, and maybe actually increase the possibility of reusing the function elsewhere.  And perhaps more importantly, explore the capabilities of Python.</p>

<p>First, instead of passing in the limit, let’s pass in the <code>range</code>.</p>

<pre><code>def sum_of_multiples_of_3_or_5_in(iterable):
    total = 0
    for n in iterable:
        if n % 3 == 0 or n % 5 == 0:
            total += n
    return total

if __name__ == '__main__':
    assert sum_of_multiples_of_3_or_5_in(range(0, 10)) == 23

    answer = sum_of_multiples_of_3_or_5_in(range(0, 1000))
    print(f"sum of all multiples of 3 or 5 below 1000 is {answer}") 
</code></pre>

<p><code>range</code> is a first class object in Python.  It can be passed as an argument.  So now you can easily compute the sum of the multiples of 3 or 5 in <code>range(1000, 2000)</code>.</p>

<p>Or ... any <code>iterable</code> object, actually, such as lists.</p>

<pre><code>print(sum_of_multiples_of_3_or_5_in([10, 12, 15, 17, 18, 19, 20])
</code></pre>

<p>How about those multiples?  Let’s make them more general:</p>

<pre><code>def sum_of_multiples_in(iterable, m1, m2):
    total = 0
    for n in iterable:
        if n % m1 == 0 or n % m2 == 0:
            total += n
    return total

if __name__ == '__main__':
    m1 = 3
    m2 = 5
    assert sum_of_multiples_in(range(0, 10), m1, m2) == 23

    answer = sum_of_multiples_in(range(0, 1000), m1, m2)
    print(f"sum of all multiples of {m1} or {m2} below 1000 is {answer}") 
</code></pre>

<p>You had a formula for computing the answer before.  Sum of multiples of 3, plus sum of multiples of 5, minus sum of multiples of 15.  Now it is harder, because <code>m1</code> could be a multiple of <code>m2</code> or vis versa.  More cases to check for.  But the above works just fine regardless of whether <code>m1</code> and <code>m2</code> are mutually prime or not.</p>

<h2><code>any</code></h2>

<p>Why only multiples of 2 numbers?  Why not multiples of <code>3</code>, <code>5</code> or <code>7</code>?  Passing yet another argument to the function seems wrong, because we’ll then need another function for 4 multiples, and yet another for 5 multiples.  Let’s instead pass a list.</p>

<pre><code>def sum_of_multiples_in(iterable, multiples):
    total = 0
    for n in iterable:
        for m in multiples:
            if n % m == 0:
                total += n
                break
    return total
</code></pre>

<p>That’s a good start.  For each value of <code>n</code>, we start looping of the multiples, and if we find one, we add <code>n</code> to <code>total</code> and break out of the inner loop, to continue with the next <code>n</code> value.</p>

<p>But we can make it clearer.  We want to know if <code>n</code> is a multiple of <code>any</code> of the multiples.  Python has an <code>any()</code> function,  which is true of any of the terms is true:</p>

<pre><code>def sum_of_multiples_in(iterable, multiples):
    total = 0
    for n in iterable:
        if any(n % m == 0 for m in multiples)
            total += n
    return total
</code></pre>

<p>There is also an <code>all(...)</code> function which returns true only if <strong>all</strong> of the terms are true.  Not needed here, but good to have in your back pocket.</p>

<h2><code>sum</code></h2>

<p>Now that we have a loop, an accumulator, and a filter condition, we can combine the three into a single <code>sum()</code> operation:</p>

<pre><code>def sum_of_multiples_in(iterable, multiples):
    return sum(n for n in iterable if any(n % m == 0 for m in multiples))
</code></pre>

<h2>Variable arguments</h2>

<p>Using our above function, we have to pass in a <code>list</code> of multiples:</p>

<pre><code>assert sum_of_multiples_in(range(0, 10), [3, 5]) == 23
</code></pre>

<p>It may be desirable to get rid of that explicit list <code>[3, 5]</code>, and just pass in the arguments <code>3, 5</code> like we did earlier.  We can do this by using a variable argument list syntax.</p>

<pre><code>def sum_of_multiples_in(iterable, *multiples):
    return sum(n for n in iterable if any(n % m == 0 for m in multiples))

assert sum_of_multiples_in(range(0, 10), 3, 5) == 23
</code></pre>

<p>After all explicit arguments (<code>iterable</code> in this case), all remaining (non-keyword) arguments are rolled up into one list and assigned to the <code>*args</code> argument ... named <code>multiples</code> in this case.</p>

<h2><code>"""Docstrings"""</code></h2>

<p>Comments are used to describe the code to someone reading the source code.  Doc-strings are used to describe how to use the code you’ve written, without the user needing to read your code.  Various tools exist to extract the doc-strings, and turn them into webpages, PDF documents and so on.  The simplest is Python’s built-in <code>help()</code> command.</p>

<pre><code>"""
A collection of functions for solving problems from Project Euler.
(Currently, only Problem 1)
"""

def sum_of_multiples_in(iterable, *multiples):
    """
    From a list of numbers, return the sum of those numbers which
    are a multiple of one or more of the remaining arguments.
    """

    return sum(n for n in iterable if any(n % m == 0 for m in multiples))

if __name__ == '__main__':
    m1 = 3
    m2 = 5
    assert sum_of_multiples_in(range(0, 10), m1, m2) == 23

    answer = sum_of_multiples_in(range(0, 1000), m1, m2)
    print(f"sum of all multiples of {m1} or {m2} below 1000 is {answer}") 
</code></pre>

<p>A doc string is a string appearing at the top of a module, class, and/or function.  It can be a single quoted string (<code>"docstring"</code> or <code>'docstring'</code>) or a triple quoted string (<code>"""docstring"""</code> or <code>'''docstring'''</code>).  Triple quoted strings are typically used since they can span multiple lines and can contain quotes without needing escaping.</p>

<p>Save the file as <code>pe1.py</code>, then from a Python interpreter, type:</p>

<pre><code>&gt;&gt;&gt; import pe1
&gt;&gt;&gt; help(pe1)
</code></pre>

<p>to see your help documentation.</p>

<h2>Type Hints</h2>

<p>Coming from C++, you will be used to a more “type safe” environment.  Python’s fast and loose rules for type safety may be a wee bit difficult to get used too.  Fortunately (or unfortunately), Python 3.6 and later allows you to specify “type hints”.  These do <strong>absolutely nothing</strong> ... at least, as far as the Python interpreter is concerned.  They can be read by static analysis tools, which can reason about them and ensure variables are being used in their intended fashion.  If used for nothing else, they can provide additional “documentation” about the types of arguments for functions, and the return type of the function.</p>

<pre><code>def sum_of_multiples_in(iterable: int, *multiples: int) -&gt; int:
    ...
</code></pre>

<p>You can use type hints on local variables as well:</p>

<pre><code>    total: int = 0
</code></pre>

<hr>

<p>Hope this jump starts your exploration of Python.  And once again, welcome to Python!</p>
    </div>