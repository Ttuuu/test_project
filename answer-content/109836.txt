<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First, great job.  I loved seeing that the whole game had been created with so little code, and was so easy to understand.</p>

<p>While you could consider making this more object-oriented, I don't think it's necessary, so I did some rewrites in keeping with the simple procedural style of the original.</p>

<p>The biggest place for improvement is in naming your concepts.  For example, this:</p>

<pre><code>if (hitSideWall())
    dx = -dx;
if (hitTop() || hitPong())
    dy = -dy;
if (gameOver())
  document.location.reload();
</code></pre>

<p>is much clearer than:</p>

<pre><code>if (y + dy &lt; ballR) {
  dy = -dy;
} else if (y + dy &gt; canvas.height - ballR) {
  if (x &gt; pongX &amp;&amp; x &lt; pongX + pongW) {
    dy = -dy;
  } else {
    document.location.reload();
  }
}
</code></pre>

<p>You can apply this principle over and over, at all levels of your code.  See the full rewrite for more examples.</p>

<p>Other notes:</p>

<ul>
<li>Avoid nesting wherever possible, and avoid "if... else" statements.</li>
<li>The nested for loop for the bricks only needs to be done once.  Use it once to create a flat array of bricks.  Afterward, the nested structure is superfluous, since each brick object contains the info you need.  Just loop through the flat array with <code>forEach</code>.</li>
<li>When initializing multiple variables, just use one <code>var</code> and commas.</li>
</ul>

<p>Full rewrite:   </p>

<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;

&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;title&gt;Brick Game&lt;/title&gt;
  &lt;style type="text/css"&gt;
    body { background-color: black; }
    canvas { border: 1px solid green; }
  &lt;/style&gt;
&lt;/head&gt;

&lt;body&gt;

  &lt;canvas id="game-canvas" height="600px" width="800px" &lt;/canvas&gt;

    &lt;script type="text/javascript"&gt;
      var canvas = document.getElementById("game-canvas"),
          ctx = canvas.getContext("2d"),
          ballR = 10,
          x = canvas.width / 2,
          y = canvas.height - 30,
          dx = 3,
          dy = -3,
          pongH = 15,
          pongW = 80,
          pongX = (canvas.width - pongW) / 2,
          rightKey = false,
          leftKey = false,
          brickRows = 3,
          brickCol = 9,
          brickW = 75,
          brickH = 20,
          brickPadding = 10,
          brickOffsetTop = 30,
          brickOffsetLeft = 30;

      var bricks = [];
      for (c = 0; c &lt; brickCol; c++) {
        for (r = 0; r &lt; brickRows; r++) {
          bricks.push({
            x: (c * (brickW + brickPadding)) + brickOffsetLeft,
            y: (r * (brickH + brickPadding)) + brickOffsetTop,
            status: 1
          });
        }
      }


       // function to draw the ball 
      function drawBall() {
        ctx.beginPath();
        ctx.arc(x, y, ballR, 0, Math.PI * 2);
        ctx.fillStyle = "red";
        ctx.fill();
        ctx.closePath();
      }

       // function draw the pong
      function drawPong() {
        ctx.beginPath();
        ctx.rect(pongX, canvas.height - pongH, pongW, pongH);
        ctx.fillStyle = "blue";
        ctx.fill();
        ctx.closePath();
      }

       // function draw the bricks
      function drawBricks() {
        bricks.forEach(function(brick) {
          if (!brick.status) return;
          ctx.beginPath();
          ctx.rect(brick.x, brick.y, brickW, brickH);
          ctx.fillStyle = "green";
          ctx.fill();
          ctx.closePath();
        });
      }

      function collisionDetection() {
        bricks.forEach(function(b) {
          if (!b.status) return;

          var inBricksColumn = x &gt; b.x &amp;&amp; x &lt; b.x + brickW,
              inBricksRow = y &gt; b.y &amp;&amp; y &lt; b.y + brickH;

          if (inBricksColumn &amp;&amp; inBricksRow) {
            dy = -dy;
            b.status = 0;
          }
        });
      }

      function draw() {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        drawBricks();
        drawBall();
        drawPong();
        collisionDetection();

        if (hitSideWall())
            dx = -dx;
        if (hitTop() || hitPong())
            dy = -dy;
        if (gameOver())
          document.location.reload();

        var RIGHT_ARROW = 39,
            LEFT_ARROW= 37;

        function hitPong() { return hitBottom() &amp;&amp; ballOverPong() }
        function ballOverPong() { return x &gt; pongX &amp;&amp; x &lt; pongX + pongW }
        function hitBottom() { return y + dy &gt; canvas.height - ballR }
        function gameOver() { return hitBottom() &amp;&amp; !ballOverPong() }
        function hitSideWall() { return x + dx &gt; canvas.width - ballR || x + dx &lt; ballR }
        function hitTop() { return y + dy &lt; ballR }
        function xOutOfBounds() { return x + dx &gt; canvas.width - ballR || x + dx &lt; ballR }
        function rightPressed(e) { return e.keyCode == RIGHT_ARROW }
        function leftPressed(e) { return e.keyCode == LEFT_ARROW }

        function keyDown(e) {
          rightKey = rightPressed(e); 
          leftKey = leftPressed(e);
        }

        function keyUp(e) {
          rightKey = rightPressed(e) ? false : rightKey;
          leftKey = leftPressed(e) ? false : leftKey;
        }

        // Add an event listener to the keypress event.
        document.addEventListener("keydown", keyDown, false);
        document.addEventListener("keyup", keyUp, false);

        // move the pong right if the right key pressed
        var maxX = canvas.width - pongW,
            minX = 0,
            pongDelta = rightKey ? 7 : leftKey ? -7 : 0;

        pongX = pongX + pongDelta;
        pongX = Math.min(pongX, maxX);
        pongX = Math.max(pongX, minX);

        x += dx;
        y += dy;
      }

      setInterval(draw, 10);
    &lt;/script&gt;
&lt;/body&gt;

&lt;/html&gt;
</code></pre>
    </div>