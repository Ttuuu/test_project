<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Welcome back Biomage :)</p>

<p>I can see you have improved your Python. However there is still room left for improvement!</p>

<ul>
<li><p>Don't put everything under the <code>if __name__ == '__main__'</code> part</p>

<p>Doing so will make it less readable and other programs can't import anything from this script. Instead make different functions. And have only the <code>sys.argv</code> lines in your main. </p></li>
<li><p>Split your code into functions</p>

<p>Splitting your code into multiple functions can make it easier to your test code, and now each part can be imported by another script.</p></li>
<li><p>Avoid overhead by opening a file only once</p>

<p>You are opening the file when you want to calculate the frequencies, and when you want the species name. This is unnecessary since it can be done in one read.</p></li>
<li><p>What's the point of this <code>frequency = []</code></p>

<p>This variable is never used later on, I suggest removing it.</p></li>
<li><p>In your chunks function <code>for i in range(0, len(l)-(n-1))</code> the <code>(n-1)</code> part is redundent</p>

<p>It would yield the same chunks as <code>for i in range(0, len(l)-n-1)</code> or even <code>for i in range(0, len(l)-1)</code>.</p></li>
<li><p>Your Counter can be simplified</p>

<ol>
<li><p>There is no need to parse the <code>fasta.seq</code> to a string, Counter happily reads the sequence without parsing.</p></li>
<li><p><code>freq.update(Counter(chunks(dna,2)))</code> Here the intermediate Counter is redundant. It will update anyway.</p></li>
</ol></li>
<li><p>I think this <code>listofbases = ["A", "C", "G", "T"]</code> should be a global variable since it can be used multiple places.</p></li>
<li><p>Your <code>for a in listofbases: for b in listofbases:</code> can be done with a builtin <code>itertools.product</code></p></li>
<li><p>Don't concat strings, but use the better <code>"str".format()</code> or <code>f"strings"</code></p></li>
<li><p>At the write_output part, you keep opening and closing the file, to avoid overhead only do this once.</p></li>
<li><p>You do <code>/ genome_size</code> 4 times, but instead you could add them all and only then divide by <code>genome_size</code></p></li>
</ul>

<h1>Revised Code</h1>

<pre><code>from Bio import SeqIO
import sys
from collections import Counter
from itertools import product

LISTOFBASES = ["A", "C", "G", "T"]
RESULT_FILE = "resultsdinuc.csv"

def chunks(l, n):
    for i in range(0, len(l)-1):
        yield l[i:i+n]

def parse_file(infile):
    for fasta in SeqIO.parse(open(infile), "fasta"):
        freq = Counter(fasta.seq)
        freq.update(chunks(str(fasta.seq), 2))
        species_name = "".join(fasta.description.split()[1:3])
        genome_size = sum(freq[i] for i in LISTOFBASES)

        FYY = (freq['TT'] + freq['CC'] + freq['TC'] + freq['CT'])
        FRR = (freq['AA'] + freq['GG'] + freq['AG'] + freq['GA'])
        FYR = (freq['TA'] + freq['TG'] + freq['CA'] + freq['CG'])
        FRY = (freq['AT'] + freq['AC'] + freq['GT'] + freq['GC'])
        J2 = (FYY + FRR - FYR - FRY) / genome_size

        yield J2, species_name, freq, genome_size

def write_output(J2, species_name, frequency, genome_size, infile):
    with open(RESULT_FILE, "a") as myfile:
        for prod in product(LISTOFBASES, LISTOFBASES):
            base = ''.join(prod)
            result = f"{base}\t{frequency[base]/genome_size}\t{species_name}\t{genome_size}\t{J2}\t{infile}\n"
            # For python 3.5 and lower use .format()
            # result = "{}\t{}\t{}\t{}\t{}\t{}".format(base, frequency[base]/genome_size, species_name, genome_size, J2, infile)
            myfile.write(result)

if __name__ == '__main__':
    infile = sys.argv[1]
    for args in parse_file(infile):
        write_output(*args, infile)
</code></pre>
    </div>