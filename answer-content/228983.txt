<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I don't know much about machine learning, so I'll be reviewing your style. Also, this is my first review, I hope I do it right.</p>

<h2>Use Python 3</h2>

<p>Judging by your print statements, you are currently using Python 2.x. Python 2 support will be dropped soon, and there is no reason to use it today (except if maintaining legacy code, which is not your case). <a href="https://python3statement.org/" rel="noreferrer">More info on the subject</a></p>

<p>For your case, this involves mainly changing lines like <code>print "something"</code> to <code>print("something")</code>, as <code>print</code> became a function with Python 3.</p>

<h2>Don't repeat yourself.</h2>

<p>It makes the code harder to read, harder to maintain, error-prone... Reading the code for review is needlessly long. Instead, make use of classes to group variables that belong together and arrays and loops instead of repeating the same line with different variables.</p>

<h2>Naming</h2>

<p>Your naming convention needs work. Between single-letter variables and misleading function names, it's hard to figure out what code does. For example, the name <code>w3c</code> doesn't carry any meaning by itself.</p>

<p>Worse is a function like <code>add(x,y)</code>, which is a very misleading name. I'd expect it to add two numbers, whereas it actually appends a string to a file. A name like <code>append(string, file)</code> would be much more meaningful.</p>

<h2>Document your code</h2>

<p>Your code doesn't include any comment or docstring. Sure, you can tell how it works for now, but will you remember when you'll reuse it later? At best, it's going to be hard, and it's made worse by your naming conventions.</p>

<h2>Single responsability principle</h2>

<p>Your function <code>tanh</code> is really 2 function put in a single method: <code>tanh</code> and its derivative. Separating them into 2 methods makes more sense.</p>

<h2>Include a fully working code</h2>

<p>The code you provided won't run. It doesn't import NumPy before using it, and you don't provide the dataset or detail its format to make use of it. As such, I can't test your code or the modifications I suggest.</p>

<h1>Refactoring your code</h1>

<p>First, let's take care of that last point:</p>

<pre><code>import numpy as np
</code></pre>

<p>That was easy. You can also add some constant parameters at the beginning of your file:</p>

<pre><code>BIAS = 1
LEARNING_RATE =  0.5
</code></pre>

<p>Alternatively, you could put your whole code in some methods a use a <code>__main__</code> guard, to make your code importable. More on that later.</p>

<p>Then, single responsability principle:</p>

<pre><code>def tanh_derivative(x):
    return 1-(np.tanh(x)**2)
</code></pre>

<p>And use <code>np.tanh</code> where needed. Also, the derivative doesn't looks like it's used. I suppose it will be used at some point later on, so I included it. If it's not used, it should generally be removed from the code, though.</p>

<p>Make a class for neurons, holding all the weights and methods together:</p>

<pre><code>class neuron:
    """Docstring: describe here what the class is used for"""

    def __init__(self, weight_a, weight_b, weight_c, bias)
        self.weight_a = weight_a
        self.weight_b = weight_b
        self.weight_c = weight_c
        self.bias = bias

    def u(self, a, b, c):
        """Describe the purpose of that method.
        There are probably better names for it and its arguments, too"""

        return tanh(BIAS * self.bias
                    + self.weight_a * a
                    + self.weight_b * b
                    + self.weight_c * c)

    def print_weigths_bias(self):
        """prints all the weights and bias of the neuron."""
        print('weight_a = {}\n'.format(self.weight_a))
        print('weight_b = {}\n'.format(self.weight_b))
        print('weight_c = {}\n'.format(self.weight_c))
        print('bias = {}\n'.format(self.bias)
</code></pre>

<p>Then you can put neurons in an array and turn this:</p>

<pre><code>w43 = -0.00761961638643
w42 = -0.00277057293921
w41 = -0.00761961638643
w4bias = 0.0125605873166

w3a = 0.999999973314
w3b = 0.999999946628
w3c = 0.999999973314
w3bias = 0.999430439099

w2a = -1.76817386861
w2b = -1.87500335887
w2c = -3.53116339806
w2bias = 0.972644723607

w1a = 1.00
w1b = 0.999999946628
w1c = 0.999999946628
w1bias = 0.999430439099
</code></pre>

<p>into this:</p>

<pre><code>neurons = [neuron(1.0, 
                  0.999999946628, 
                  0.999999946628,
                  0.999430439099),
           neuron(-1.76817386861,
                  -1.87500335887,
                  -3.53116339806,
                  0.972644723607),
           neuron(0.999999973314,
                  0.999999946628,
                  0.999999973314,
                  0.999430439099)
           neuron(-0.00761961638643, 
                  -0.00277057293921, 
                  -0.00761961638643, 
                  0.0125605873166)]
</code></pre>

<p>Which then allows things like this:</p>

<pre><code>for n in neurons:
    n.print_weights_bias()
</code></pre>

<p>instead of 16 lines of print statements.</p>

<p>You could also consider writing a method for writing the values to a file (or appending them).</p>

<p>Finally, writing a <code>neural_network</code> class with an array of neurons as a property, alongside the global bias and learning rate, and methods for feedforward, backpropagation, would probably be nice and bonus for making your code importable as a script.</p>

<h2>The <code>__main__</code> guard</h2>

<p>If you follow my advice, your code would look something like this:</p>

<pre><code>import numpy as np


def tanh_derivative(x):
    return 1-(np.tanh(x)**2)


class neural_neuron:
    """Don't forget to document yur code"""

    def __init__(self, weights, bias)
        # some code here

    def __repr__(self):
        """Useful for getting a string representation of the neuron"""
        # some code here

    def u(self, ...):
        # some code here

    # more methods as needed


class neural_network:
    """Don't forget to document yur code"""

    def __init__(self, bias, learning_rate)
        # some code here

    def add_neuron(self, ...):
        # some code here

    def feedforward(self, ...):
        # some code here

    def backpropagation(self, ...):
        # some code here

    def train(self, dataset):
        # some code here

    def process(self, dataset):
        # some code here

    # more methods as needed
</code></pre>

<p>This would make the script importable, so you can reuse your neural net for various applications. In order to make it also executable, add a <code>if __name__ == __main__</code> condition. This will be <code>True</code> if you execute your script, and <code>False</code> if you import it. You can use this to test or run your script while working on it.</p>

<p>After the classes and function definitions, add something like this:</p>

<pre><code>if __name__ == 'main':
    nn = neural_network(1.0, 0.5)
    nn.add_neuron(neuron(1.0, 1.0, 1.0, 1.0))
    nn.train("C:/taining data.csv")
    # your code goes here
</code></pre>

<p>If you follow this advice, your code will not only be much easier to read and review the actual algorithms, but also much easier to work with, including maintenance (bug fixing, adding features...) and reuse (as an importable script - you would be able to import and reuse your neural net in other projects just as easily as you import and use NumPy).</p>
    </div>