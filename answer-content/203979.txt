<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><em>Just here simplify Maarten Fabré's advice</em></p>

<p>With Lots duplicate code, You can simplify this</p>

<pre><code>    if player_1_board[y_coord - 1][x_coord] == ': ':
        ai_shoots(y_coord - 1, x_coord, all_buttons, player_1_board, ai_score)
    elif player_1_board[y_coord + 1][x_coord] == ': ':
        ai_shoots(y_coord + 1, x_coord, all_buttons, player_1_board, ai_score)
    elif player_1_board[y_coord][x_coord - 1] == ': ':
        ai_shoots(y_coord, x_coord - 1, all_buttons, player_1_board, ai_score)
    elif player_1_board[y_coord][x_coord + 1] == ': ':
        ai_shoots(y_coord, x_coord + 1, all_buttons, player_1_board, ai_score)
    else:
        x = random.randint(1, 10)
        y = random.randint(1, 10)
        ai_shoots(y, x, all_buttons, player_1_board, ai_score)
</code></pre>

<p>to</p>

<pre><code>    directions = ((0,-1), (0,1), (-1,0), (1,0))
    for i, j in directions:
        if player_1_board[y_coord + j][x_coord + i] == ': ':
            x, y = x_coord + i, y_coord + j
            break
    else:
        x = random.randint(1, 10)
        y = random.randint(1, 10)
    ai_shoots(y, x, all_buttons, player_1_board, ai_score)
</code></pre>

<p>this is same as Maarten Fabré's</p>

<pre><code>def neighbours(self, x, y):
    coordinates = ((x-1, y), (x+1, y), (x, y-1), (x, y+1))
    for x, y in coordinates:
        try:
            yield (x, y), self.already_shot(x, y)
        except IndexError:
            pass
</code></pre>

<p>And of course you need check the bounds of <code>player_1_board</code></p>

<p>advice skill like Maarten Fabré mentioned</p>

<pre><code>def __getitem__(self, coord):
    x, y = coord
    if not self._exists(x, y):
        raise IndexError
    return self._board[x-1][y-1]

def __setitem__(self, coord, state):
    x, y = coord
    if not self._exists(x, y):
        raise IndexError
    self._board[x-1][y-1] = state
</code></pre>

<p>or you can just use</p>

<pre><code>0 &lt;= y_coord + j &lt;= 10 and 0 &lt;= x_coord + i &lt;= 10
</code></pre>

<p>guess be <code>10</code> here because you used <code>x = random.randint(1, 10)</code></p>

<hr>

<h2>Recursive is not needed</h2>

<p><strong>Another thing I concern about is <code>recursive</code> you used, I think it is not needed here and cost lots memory</strong></p>

<p>I did a small test, and first here is my code without recursive</p>

<pre><code>def ai_shoots(y_coord, x_coord, player_1_board, ai_score):
    if player_1_board[y_coord][x_coord] == ': ':
        player_1_board[y_coord][x_coord] = 'X '
        directions = ((0,-1), (0,1), (-1,0), (1,0))
        for i, j in directions:
            if 0 &lt;= y_coord + j &lt;= 10 and 0 &lt;= x_coord + i &lt;= 10 and player_1_board[y_coord + j][x_coord + i] == ': ':
                x, y = x_coord + i, y_coord + j
                break
        else:
            x = random.randint(1, 10)
            y = random.randint(1, 10)
        return x, y, ai_score+1
    elif player_1_board[y_coord][x_coord] == 'X ' or player_1_board[y_coord][x_coord] == 'O ':
        x = random.randint(1, 10)
        y = random.randint(1, 10)
        return x, y, ai_score
    else:
        player_1_board[y_coord][x_coord] = 'O '
        return x_coord, y_coord, ai_score

def start_game(board):
    x, y, score = 0, 0, 0
    while score &lt; 20:
        x, y, score = ai_shoots(y, x, board, score)
    print("The computer has won.")
</code></pre>

<p>and I used <code>tracemalloc</code> to test the memory cost, with a really huge board</p>

<pre><code>def malloc_test():
    board = [[random.choice([": ","X ", "O "]) for _ in range(1000)] for _ in range(1000)]  
    tracemalloc.start(3)
    a_b = [b[:] for b in board]
    time1 = tracemalloc.take_snapshot()
    start_game(a_b)
    time2 = tracemalloc.take_snapshot()
    stats = time2.compare_to(time1, 'lineno')
    for stat in stats:
        print(stat)
    print()

    tracemalloc.start(3)
    a_b = [b[:] for b in board]
    time1 = tracemalloc.take_snapshot()
    ai_shoots(0,0,a_b,0)
    time2 = tracemalloc.take_snapshot()
    stats = time2.compare_to(time1, 'lineno')
    for stat in stats:
        print(stat)
    print()
</code></pre>

<p>Here is the result of non-recursive</p>

<pre><code>test.py:55: size=496 B (+496 B), count=1 (+1), average=496 B
test.py:76: size=464 B (+464 B), count=1 (+1), average=464 B
test.py:45: size=456 B (+456 B), count=1 (+1), average=456 B
</code></pre>

<p>and here is the result of recursive</p>

<pre><code>test.py:23: size=10080 B (+10080 B), count=20 (+20), average=504 B
test.py:27: size=3528 B (+3528 B), count=7 (+7), average=504 B
test.py:86: size=504 B (+504 B), count=1 (+1), average=504 B
</code></pre>
    </div>