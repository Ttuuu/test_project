<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>For <a href="http://www.lispworks.com/documentation/HyperSpec/Body/m_loop.htm#loop" rel="nofollow noreferrer"><code>loop</code></a> you can see the excellent book by P. Seibel “Practical Common Lisp”, <a href="http://www.gigamonkeys.com/book/" rel="nofollow noreferrer">available on-line</a>, in particular <a href="http://www.gigamonkeys.com/book/macros-standard-control-constructs.html" rel="nofollow noreferrer">chapter 7</a> and <a href="http://www.gigamonkeys.com/book/loop-for-black-belts.html" rel="nofollow noreferrer">chapter 22</a>.</p>

<p>Let’s start from the last function: the idea is ok, we can just simplify the function noting that <code>(lambda (x y) (+ x y))</code> is nothing more than the original <code>+</code>:</p>

<pre><code>(defun pos+3 (lst)
  (mapcar #'+ lst (range (length lst))))
</code></pre>

<p>For the first function, since an helper function is introduced, it could as well be used for tail-recursion, instead of normal recursion:</p>

<pre><code>(defun pos-helper (lis n acc)
  (if (null lis)
      (reverse acc)
      (pos-helper (rest lis) (1+ n) (cons (+ (first lis) n) acc))))

(defun pos+ (lis)
  (pos-helper lis 0 nil))
</code></pre>

<p>where <code>acc</code> accumulates the result, which at the end must be reversed. Note that certain Common Lisp compilers transform the function in an iterative loop, so I do not know if this would be considered recursive. In that case, your version is ok (but note the idiomatic use of <code>(1+ expression)</code> instead of <code>(+ expression 1)</code>).</p>

<p>Then, for the second function, of course a <code>loop</code> version is much more readable (even if it is not so lispy :) :</p>

<pre><code>(defun pos+2 (lis)
  (loop for i from 0 
        for x in lis
        collect (+ x i)))
</code></pre>

<p>If you prefer more parentheses, here is a variant (without modifying the original list):</p>

<pre><code>(defun pos+2 (lis)
  (let ((result nil))
    (do ((i 0 (1+ i))
         (y lis (cdr y)))
        ((null y) (reverse result))
      (push (+ (car y) i) result))))
</code></pre>

<p>A final note about efficiency: the function <code>pos3</code> is the less efficient one since it must generate a new list with the same length as the original one (and so the list must be scanned twice, in addition to doubling the memory footprint of the program). With a simple trick we could use <code>mapcar</code> and avoid creating a new list:</p>

<pre><code>(defun pos+3 (lis)
  (let ((index -1))
    (mapcar (lambda (x) (+ x (incf index))) lis)))
</code></pre>
    </div>