<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Programming is the art of detecting and removing duplication.</p>

<pre><code>    //display the computers input choice
    if (getComputerChoice == 1)
     {
        cout &lt;&lt; "The computer chose Rock." &lt;&lt; endl;
     }

     else if (getComputerChoice == 2)
    {
        cout &lt;&lt; "The computer chose Paper." &lt;&lt; endl;
    }

    else if (getComputerChoice == 3)
    {
        cout &lt;&lt; "The computer chose Scissors." &lt;&lt; endl;
    }
</code></pre>

<p>We could write this more simply with a helper function:</p>

<pre><code>std::string gesture(int x) {
    if (gesture == 1) return "Rock";
    if (gesture == 2) return "Paper";
    if (gesture == 3) return "Scissors";
    assert(false);  // this should never happen
}
</code></pre>

<p>and then back in <code>main</code>:</p>

<pre><code>std::cout &lt;&lt; "The computer chose " &lt;&lt; gesture(getComputerChoice) &lt;&lt; ".\n";
</code></pre>

<p>Notice also that I'm fully qualifying my identifiers out of <code>namespace std</code> â€” this is a good practice. You should do it. And I'm not wasting time typing out <code>std::endl</code> when <code>\n</code> does the exact same thing but shorter and faster.</p>

<hr>

<pre><code>        while (
            (getUserChoice == 2 &amp;&amp; getComputerChoice == 3)||
            (getUserChoice == 3 &amp;&amp; getComputerChoice == 1)||
            (getUserChoice == 1 &amp;&amp; getComputerChoice == 2)
            )

        {
            cout &lt;&lt; "I'm sorry, the computer has beat you." &lt;&lt; endl &lt;&lt; endl;
            break;
        }
</code></pre>

<p>Two things: First, the use of <code>while (cond) { thing; break; }</code> to mean <code>if (cond) { thing; }</code> is <em>so</em> ridiculous that I wonder if you're trolling. (Odds are against it; but still, why would you write an <code>if</code> as a <code>while</code> and then ask real people to review it for style?)</p>

<p>Second, this would be a great place to show your understanding of the structure of the game. 3 beats 2, 2 beats 1, 1 beats 3. What arithmetic operation could we use here to encode all of those results in a single expression?</p>

<p>...Well, first, let's detect and remove repetition.</p>

<pre><code>if (beats(getComputerChoice, getUserChoice)) {
    std::cout &lt;&lt; "I'm sorry, the computer has beat you.\n\n";
} else if (beats(getUserChoice, getComputerChoice)) {
    std::cout &lt;&lt; "Congratulations, you win!\n\n";
} else {
    std::cout &lt;&lt; "This game is tied.\n\n";
}
</code></pre>

<p>Okay, now how do we write the <code>beats</code> function?</p>

<pre><code>bool beats(int a, int b) {
    return ((a == 3 &amp;&amp; b == 2) || (a == 2 &amp;&amp; b == 1) || (a == 1 &amp;&amp; b == 3));
}
</code></pre>

<p>But we can use arithmetic instead. <code>a</code> beats <code>b</code> exactly when <code>a</code> is one greater than <code>b</code>, modulo 3.</p>

<pre><code>bool beats(int a, int b) {
    return (a - 1) == b % 3;
}
</code></pre>

<p>No comment on the input/output part.</p>
    </div>