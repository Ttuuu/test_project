<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I prefer use functional and prototypical inheritance over native loops because it's cleaner. And I use MAP because ES6 feature is far more short and useful, though MAP has no side effects.</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const reversedArr = (n) =&gt; Array.from(Array(n).keys()).reverse()

const staircase = (n) =&gt; reversedArr(n).map((value, index) =&gt; {
        return console.log(' '.repeat(value)+'#'.repeat(index+1)+'\n')
    })

staircase(50)</code></pre>
</div>
</div>


<p>func is a output of a logic: <code>Array.from(Array(n).keys()).reverse()</code> that receives <code>n:integer</code> parameter.</p>

<p>Array.from is a new syntax from ES6, it means that you can fill an array from "here" to "there" ie: <code>Array.from(0, 6)</code> returns <code>[0,1,2,3,4,5,6]</code></p>

<p>so all the <code>staircase(n)</code> return is a output of map of this array. Such array that receive <code>Array(n).keys()</code> and reverses it with prototype <code>reverse()</code></p>

<p>so that the array could be: <code>[6,5,4,3,2,1,0]</code> instead.</p>

<p>the map repeat iterate over the array created from <code>Array.from(Array(n).keys()).reverse()</code>
and return a log for each item such as every item repeats <code>' '</code> (blank space) + "#" at the end of this string.</p>
    </div>