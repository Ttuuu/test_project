<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Use consistent code formatting</h2>
<p>Right now, you have several lines of code with different indentations, spacing, etc. You should pick a single spacing style and stick with it for the entirety of your program to improve readability.</p>
<pre><code>while(i == word.length()) {  

    System.out.println("The number of vowels is: " + iterations);
    System.out.println("The total sum of all vowels is: " + totalValueOfVowels);
    break;

  }
</code></pre>
<p>Here, for example, your closing curly brace does not line up with the beginning of the <code>while</code> loop. Similarly,</p>
<pre><code>}else {
    System.out.println("This isn't a vowel: " + word.charAt(i));
    System.out.println("------------------------");
</code></pre>
<p>Your <code>else</code> statement has a space after it, but not before.</p>
<p>It generally doesn't matter what coding style you choose, as long as you <em>do</em> choose one and stick with it.</p>
<hr>
<h2>Initialize variables at the first point of use</h2>
<p>Variables should be initialized as closely to where they are used as possible. For example, your <code>scan</code> variable is only used in your <code>main</code> method, so it should be initialized there.</p>
<pre><code>public static void main(String[] args) {
    Scanner scan = new Scanner(System.in);
    ...
}
</code></pre>
<p>Do the same for the rest of your variables. All the rest of them (except for <code>word</code>) are only used in the <code>counter</code> method, so they should be initialized there, as close to their first point of use as possible.</p>
<p><code>word</code> is initialized in <code>main</code> and then used in <code>counter</code>, so it should be passed in to counter as an argument.</p>
<pre><code>public static void counter(String word) {
    ....
}

public static void main(String[] args) {
    Scanner scan = new Scanner(System.in);
    String word = scan.next();
    scan.close();
    counter(word);
}
</code></pre>
<p>As you can see, we can pass <code>word</code> as an argument to <code>counter</code>.</p>
<hr>
<h2>Simplify your call to <code>counter</code></h2>
<p>The above snippet also addresses another issue - the <code>counter</code> method is only called from <code>main</code>, which means you can make it a <code>static</code> method. This way, we do not have to initialize a <code>new vowelCounter</code> just to call the <code>counter</code> method - we can freely call it from <code>main</code>.</p>
<p>If you really wanted to make <code>counter</code> a non-static method, then I would suggest moving it to a different class than your <code>main</code> method. Then, you can create an instance of that class and call the <code>counter</code> method on it. In general, creating a new instance of the class that contains your <code>main</code> method is a strange pattern and should be avoided.</p>
<hr>
<h2>Simplify your <code>for</code>-loop</h2>
<p>In general, a variable used as a counter in a <code>for</code>-loop should be initialized and incremented within that <code>for</code>-loop statement itself. To accomplish this, you would want to remove the <code>int i</code> and the lines that call <code>i++;</code>, and format your <code>for</code>-loop as follows:</p>
<pre><code>for (int i = 0; i &lt; word.length(); i++) {
    ...
}
</code></pre>
<p>However, there is an even better way to express our intent of "loop over all characters in a String". We can format our <code>for</code>-loop into a foreach-loop as follows:</p>
<pre><code>for (char vowel : word) {
    ...
}
</code></pre>
<p>Now, we can remove the line <code>vowel = word.charAt(i)</code>, since <code>vowel</code> will now automatically loop over every character in the given word.</p>
    </div>