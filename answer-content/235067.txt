<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code is good but it may be overly complex. The more concise the code the easier it is to read (for me anyway). In this example below I have just used some example words, this code of course is just a quick example for demonstration. There is not anything in place if you get the word or want to guess the word etc. I couldn't really find a reason to use a class for simpler games because although the functions are 'closely related' in your functions, comprehension can save a lot of time and code. </p>

<p>The while loop is useful because it gives a consistent input option which can be as user friendly as you make it. I think its essential for the users experience when making something like a text RPG. </p>

<pre><code>import random

words = ['cheese', 'biscuits', 'hammer', 'evidence'] 
word_choice = [i.lower() for i in random.choice(words)]
lives = 3
cor_guess = []
while True:
  print('Letters found: {}\nWord length: {}'.format(cor_guess, len(word_choice)))
  if lives == 0:
      print('Your dead homie!\nThe word was: ', word_choice)
      break
  guess = str(input('Guess a letter: '))
  if guess in word_choice:
      print(guess, 'is in the word!\n')
      cor_guess.append(guess)
  else:
      print('Your dying slowly!\n')
      lives -= 1
</code></pre>

<p>Example of the output:</p>

<pre><code>Letters found: []
Word length: 8
Guess a letter: v
v is in the word!

Letters found: ['v']
Word length: 8
Guess a letter: i
i is in the word!

Letters found: ['v', 'i']
Word length: 8
Guess a letter: r
Your dying slowly!

Letters found: ['v', 'i']
Word length: 8
Guess a letter: b
Your dying slowly!

Letters found: ['v', 'i']
Word length: 8
Guess a letter: o
Your dying slowly!

Letters found: ['v', 'i']
Word length: 8
Your dead homie!
The word was:  ['e', 'v', 'i', 'd', 'e', 'n', 'c', 'e']
</code></pre>
    </div>