<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I wouldn't call myself an expert, but I finished a tic-tac-toe project today as well, I was writing Python, so my suggestions might not be idiomatic for PHP - but I think this will apply to your situation as well.</p>

<p>Your intuition is solid. Every time you find yourself using cut and paste, this is probably a sign you can put the code inside a function.</p>

<p>Idea One:</p>

<p>For example, create a function inside winner - this contains the valid win matching mode. this function takes a parameter "x_or_o" - which is either a string 'x' or a string 'o'.</p>

<p>This should be a great start because it will cut your checking code in half. Let's see if we can do better.</p>

<p>Idea Two:</p>

<p>I notice that your code doesn't care about whether a player has a winning row, or a winning column. In this case, you can assign your logical operators to a variable.
e.g.</p>

<pre><code>public function win_check(string $x_or_o) {
    top_row_win = $result[1] === x_or_o &amp;&amp; $result[4] === x_or_o &amp;&amp; $result[7] === x_or_o
    mid_row_win = $result[2] === x_or_o &amp;&amp; $result[5] === x_or_o &amp;&amp; $result[8] === x_or_o
    ...

    win = (top_row_win || mid_row_win || bottom_row_win || left_col_win || mid_col_win || right_col_win || diagonal_win || off_diagonal_win)

    if (win) {
    $winner = x_or_o;
    $this-&gt;database-&gt;insert($winner, $result)
    if (x_or_o == 'x'){
    xWins++   
}
    elif (x_or_o == 'o') {
    oWins++
}
}
}

//Then in your outer scope, your win_check function will be called from winner like this.

win_check(x)
win_check(o)
</code></pre>

<p>Idea Three:</p>

<p>In my project, I used a 2d array and used index slicing to do this more elegantly. I do not know what array slicing or index slicing is possible in PHP.</p>
    </div>