<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Congrats on tackling cryptopals! These are great exercises and very interesting to learn new languages and techniques.</p>

<h2>Syntax</h2>

<h3>Remove the type annotations</h3>

<p>In most cases in OCaml, you don't need any type annotations. So instead of:</p>

<pre><code>let make_result (input : xor_input) c : result =
</code></pre>

<p>It's more usual to write:</p>

<pre><code>let make_result input c =
</code></pre>

<p>The reason is that for exposed functions, the type will be in the <code>.mli</code> file, and for local functions, it's only one key binding away in your editor thanks to <a href="https://github.com/ocaml/merlin" rel="nofollow noreferrer">merlin</a>.</p>

<h3>Pipelines</h3>

<p>The pipe operator is powerful and works well in some cases like your main function, but combined with partial application and infix operators, it can become hard to read.</p>

<p>I'd rewrite:</p>

<pre><code>fun l -&gt; int_of_char l |&gt; (lxor) c |&gt; char_of_int
</code></pre>

<p>As:</p>

<pre><code>fun l -&gt; char_of_int (c lxor (int_of_char l))
</code></pre>

<h3>Pattern tricks</h3>

<p>In places like this:</p>

<pre><code>let (Xor_input input) =
</code></pre>

<p>You can omit the parens and just write:</p>

<pre><code>let Xor_input input =
</code></pre>

<p>You can also perform several layers of pattern matching in one step. So rather than writing</p>

<pre><code>let sort_results { score = first; _ } { score = second; _ } =
  let (Score first_val) = first in
  let (Score second_val) = second in
</code></pre>

<p>You can write:</p>

<pre><code>let sort_results { score = Score first_val; _ } { score = Score second_val; _ } =
</code></pre>

<h3>Record shorthand syntax</h3>

<p>When building a record, parts that look like <code>label = label</code> can be written just <code>label</code>. So you can rename variables and change:</p>

<pre><code>let make_result input c =
  let output = xor c input in
  { test_char = char_of_int c; score = make_ranking output; xor_input = input; xor_output = output }
</code></pre>

<p>To:</p>

<pre><code>let make_result xor_input c =
  let xor_output = xor c xor_input in
  { test_char = char_of_int c; score = make_ranking output; xor_input; xor_output }
</code></pre>

<h2>Type design</h2>

<p>I don't think that the <code>xor_input</code> and <code>xor_output</code> bring a lot here. You're probably be as OK with plain strings.</p>

<h2>Other remarks</h2>

<p>You are sorting a whole list just to get the minimal element. There is probably a function to do that in <code>core</code> (and it will be linear).</p>

<p>Instead of <code>fprintf stdout</code>, you can just use <code>printf</code>.</p>

<p>That's it! Have a nice journey learning OCaml and please post other examples on this site :)</p>
    </div>