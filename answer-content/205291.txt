<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The algorithm can be improved. I took the liberty to use my existing Java, also as Python might be somewhat slower.</p>

<p>On the Python code: <code>X == true</code> should simply be <code>X</code>.</p>

<pre><code>long largestPrimeFactor(long x) {
    long largest = 0;
    long n = x; // Remaining number where factors divided out.
    if (n % 2 == 0) {
        largest = 2;
        do {
            n /= 2;
        } while (n % 2 == 0);
    }
    for (int c = 3; c*c &lt;= n; c += 2) {
        if (n % c == 0) {
            largest = c;
            do {
                n /= c;
            } while (n % c == 0);
        }
    }
    // Wrong: return largest == 0 ? x : largest;
    return n &gt; 1 ? n : largest;
}
</code></pre>

<p>The loop searching for factors handles 2 before the loop and then loops from 3 with steps of 2.</p>

<pre><code>    for (int c = 3; c*c &lt;= n; c += 2) {
</code></pre>

<p>In every loop step, if c is a factor of n, n is divided by c as often as possible. In fact n has no longer smaller factors than c.</p>

<p>Hence <em>c is a prime</em>, and in fact the largest found prime upto then.</p>

<p>If after the loop no largest prime was found, the parameter itself is a prime.</p>

<p>As n in every step is divided by all smaller factors, you need only to loop while <code>c &lt;= n / c</code> holds: the second c being the smallest co-factor of n for c. Together with += 2 this hugely decreases the number of steps.</p>

<p>Your extra test on the factor being prime is the largest slow-down, as it does not exploit the factor filtering till then.</p>
    </div>