<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>HasFolder = InStr(.Lines(1, .CountOfLines), Chr(39) &amp; "@Folder")
</code></pre>
</blockquote>
<p>That condition can <em>technically</em> be <code>True</code> in modules that don't <em>actually</em> have the annotation; a <code>@Folder</code> Rubberduck annotation is only valid in a module's <em>declarations section</em>, so there's no need to grab the module content any further than <code>.CountOfDeclarationLines</code> - if the module is nearing the 10K lines capacity, using this instead of <code>.CountOfLines</code> could make a significant difference in the size of the string being passed to the <code>InStr</code> function.</p>
<blockquote>
<pre><code>Select Case Component.Type
    Case vbext_ComponentType.vbext_ct_StdModule
        FolderName = Project.Name &amp; ".Modules"
    Case vbext_ComponentType.vbext_ct_ClassModule
        FolderName = Project.Name &amp; ".Classes"
    Case vbext_ComponentType.vbext_ct_MSForm
        FolderName = Project.Name &amp; ".Forms"
    Case vbext_ComponentType.vbext_ct_ActiveXDesigner
        FolderName = Project.Name &amp; ".Designers"
    Case vbext_ComponentType.vbext_ct_Document
        FolderName = Project.Name &amp; ".Documents"
End Select
</code></pre>
</blockquote>
<p>I wouldn't repeat the concatenation here - just work out the last part of the name per the component type, and <em>then</em> concatenate with <code>Project.Name &amp; "."</code> (I'd pull the separator dot out of the <code>Case</code> blocks as well) - and then I might give it a bit of breathing room, but that's more subjective:</p>
<pre><code>    Select Case Component.Type
        Case vbext_ComponentType.vbext_ct_StdModule
            ChildFolderName = "Modules"

        Case vbext_ComponentType.vbext_ct_ClassModule
            ChildFolderName = "Classes"

        Case vbext_ComponentType.vbext_ct_MSForm
            ChildFolderName = "Forms"

        Case vbext_ComponentType.vbext_ct_ActiveXDesigner
            ChildFolderName = "Designers" 'note: not supported in VBA

        Case vbext_ComponentType.vbext_ct_Document
            ChildFolderName = "Documents"

    End Select
    FolderName = Project.Name &amp; "." &amp; ChildFolderName
</code></pre>
<p>I like the <code>@Folder("Parent.Child")</code> syntax and I see that's what you're generating here:</p>
<blockquote>
<pre><code>Component.CodeModule.InsertLines 1, Chr(39) &amp; "@Folder(""" &amp; FolderName &amp; """)"
</code></pre>
</blockquote>
<p>Note that this would also be legal... and simpler to generate:</p>
<pre><code>Component.CodeModule.InsertLines 1, "'@Folder " &amp; FolderName
</code></pre>
<p>Obviously if you prefer the parenthesized syntax (either works, it's really just down to personal preference) like I do then by all means keep it, but Rubberduck's new <em>Move to Folder</em> command doesn't put the parentheses in. I'd probably have the single-quote <code>'</code> character spelled out, too, but I can see how a <code>'</code> might be harder than necessary to read in the middle of a bunch of <code>"</code> double quotes. On the other hand, defining a constant for it would remove the need to have the <code>"@Folder</code> string literal defined in multiple places:</p>
<pre><code>Private Const RD_FOLDER_ANNOTATION As String = "'@Folder "

...

Component.CodeModule.InsertLines 1, RD_FOLDER_ANNOTATION &amp; FolderName
</code></pre>
<p>I have to mention that Rubberduck <em>deliberately</em> shoves all modules under the same default named-after-the-project folder (they can easily be sorted by component type in the <em>Code Explorer</em>), because we <strong>strongly</strong> believe grouping modules by component type is utterly useless and counter-productive: when I look at the code for a given functionality, I want to see all the code related to that functionality - and I couldn't care less about the component type of the code I'm looking at... it's mostly all class modules anyway.</p>
<p>A <em>sane</em> way to organize the modules in a project, is by <em>functionality</em>: you want your <code>ThingView</code> user form in the same place as your <code>ThingModel</code> class and your <code>ThingPresenter</code> and the <code>Things</code> custom collection - that way when you're working on that <em>Thing</em>, you don't have to dig up the various pieces in an ever-growing list of components under some useless "Class Modules" folder.</p>
    </div>