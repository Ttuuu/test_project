<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Reading Material</h2>

<blockquote>
  <p><em>..  any reading material about searching algorithms on trees</em></p>
</blockquote>

<p>These are the most common tree walkers:</p>

<ul>
<li><a href="https://en.wikipedia.org/wiki/Breadth-first_search" rel="noreferrer">Breadth-First Search</a></li>
<li><a href="https://en.wikipedia.org/wiki/Depth-first_search" rel="noreferrer">Depth-First Search</a></li>
</ul>

<hr>

<h2>Review</h2>

<p>There is a bug with IsRoot. Also, why not provide a property <code>Root { get; }</code>?</p>

<blockquote>
  <p><em>if the parent is the root of the tree, then the parent is set to null</em></p>
  
  <p><code>public bool IsRoot { get { return Parent != null; } }</code></p>
</blockquote>

<p>You should also take advantage of the sweet syntactic sugar of the language (for all your properties):</p>

<pre><code> public bool IsRoot =&gt; Parent == null;
</code></pre>

<hr>

<p>Since <code>Children</code> is private and you always instantiate a list, there is no reason to use null-propagation here:</p>

<blockquote>
  <p><code>public int Count { get { return Children?.Count ?? 0; } }</code></p>
</blockquote>

<pre><code>public int Count =&gt; Children.Count;
</code></pre>

<hr>

<p><code>AddChild</code> should throw exceptions on invalid input. You don't check for an invalid tree, what if the <code>node</code> is a <em>grand-parent</em> of the the current instance? Perform similar checks for <code>RemoveChild</code>.</p>

<pre><code>public void AddChild(Node node)
{
    node = node ?? throw new ArgumentNullException(nameof(node));
    if (IsAncestorOrSelf(node)) // &lt;- you should implement such method
        throw new ArgumentException("The node can not be an ancestor or self");
    if (IsDescendant(node)) // &lt;- you should implement such method
        throw new ArgumentException("The node can not be a descendant");
    node.Parent = this;
    Children.Add(node);
}
</code></pre>

<hr>

<p><code>GetChildren</code> should return an immutable copy of the list containing the children.</p>

<pre><code>public IEnumerable&lt;Node&gt; GetChildren()
{
    return Children.ToArray();
}
</code></pre>

<hr>

<p>I don't know why you would need <code>DeepCopy</code> functionality.</p>

<hr>

<p><code>GetChildrenRecursive</code> should be called <code>GetDescendants</code>. I would implement it using recursion. This is implemented as depth-first (DFS).</p>

<pre><code>public IEnumerable&lt;Node&gt; GetDescendants()
{
    foreach (var child in Children)
    {
         yield return child;
         foreach (var descendant in child.GetDescendants())
         {
              yield return descendant;
         }
    }
}
</code></pre>
    </div>