<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This solution seems generally fine although it's not much code to analyze and it's already as succinct as it could reasonably be.</p>

<p>A few suggestions:</p>

<ul>
<li>Avoid naming a class <code>SomethingClass</code>. It's enough that the type is a class; appending types to names adds noise.</li>
<li><code>SumDeepestLeaves</code> sounds more like a method (an action) while <code>DeepestLeavesSum</code> sounds more like a property or attribute.</li>
<li>Instead of using <code>depth + 1</code>, use <code>depth</code>. It doesn't matter how you compute the depth as long as it's consistent.</li>
<li>Use vertical whitespace before and after all blocks and function definitions.</li>
<li><p>Creating objects is expensive. Worse, introducing state can cause bugs as the method is <a href="https://en.wikipedia.org/wiki/Idempotence#Computer_science_meaning" rel="nofollow noreferrer">non-idempotent</a>--the caller can't use the object more than once or results will be incorrect. </p>

<p>It's an antipattern to have to create an object just to call what seems like a stateless method from the perspective of the caller. Doing:</p>

<pre><code>DeepestLeavesSumClass deepest = new DeepestLeavesSumClass();
Assert.AreEqual(15, deepest.DeepestLeavesSum(root));
</code></pre>

<p>feels a lot like:</p>

<pre><code>MathematicsClass mathematics = new MathematicsClass();
Assert.AreEqual(3, mathematics.Add(1, 2));
</code></pre>

<p>I exaggerate, but a static method like:</p>

<pre><code>Assert.AreEqual(15, BinaryTree.SumDeepestLeaves(root));
</code></pre>

<p>is more pleasant and semantically meaningful. An alternative to making it static would be to encapsulate/hide <code>TreeNode</code> as a member of a <code>BinaryTree</code> class, then instantiate the <code>BinaryTree</code> class, populate your nodes and call <code>tree.SumDeepestLeaves()</code> to sum your tree's deepest leaves. This is a bit of a tangent on your current design even if it feels most correct from an OOP perspective.</p></li>
</ul>

<p>Basically, you've introduced two class variables on an object as a shortcut in order to keep your algorithm clean and easy to write, but this design adds complexity to the caller and makes the class brittle.</p>

<p>One solution is to use the <code>ref</code> keyword to keep all data local to the calls:</p>

<pre><code>class BinaryTree
{
    public static int SumDeepestLeaves(TreeNode root)
    {
        if (root == null)
        {
            return 0;
        }

        int maxDepth = 0;
        int sum = 0;
        SumDeepestLeaves(root, 0, ref maxDepth, ref sum);
        return sum;
    }

    private static void SumDeepestLeaves(TreeNode root, int depth, ref int maxDepth, ref int sum)
    {
        if (root == null)
        {
            return;
        }
        else if (maxDepth &lt; depth)
        {
            maxDepth = depth;
            sum = root.val;
        }
        else if (depth == maxDepth)
        {
            sum += root.val;
        }

        SumDeepestLeaves(root.left, depth + 1, ref maxDepth, ref sum);
        SumDeepestLeaves(root.right, depth + 1, ref maxDepth, ref sum);
    }
}
</code></pre>

<p>This is more verbose, but the benefits are worth it. You can also argue that <code>ref</code> makes the programmer's intent clearer to help justify the extra verbosity and added parameters.</p>

<p>Kudos on keeping the recursive helper private. However, a name like <code>DFS</code> seems too generic--it does do a DFS, but it's specific to summing deepest leaves. As the <code>BinaryTree</code> class grows to contain dozens of methods, it'd no longer be obvious from the name that <code>DFS</code> is related to <code>SumDeepestLeaves</code>. Overload the <code>SumDeepestLeaves</code> method so there's no doubt.</p>

<p>You can also do this using a BFS instead of recursion using the level-order trick where each iteration on the queue dumps the entire level, queuing up the next round and summing the current. This isn't definitely better, but at least there's no refs and no helper function, so all the logic is in one place, and it's worth knowing about in any case.</p>

<pre><code>class BinaryTree 
{
    public int SumDeepestLeaves(TreeNode root) 
    {
        if (root == null)
        {
            return 0;
        }

        var queue = new Queue&lt;TreeNode&gt;();
        queue.Enqueue(root);
        int sum = 0;

        while (queue.Count() &gt; 0)
        {
            sum = 0;

            for (int i = queue.Count() - 1; i &gt;= 0; i--) 
            {
                TreeNode curr = queue.Dequeue();
                sum += curr.val;

                if (curr.left != null) 
                {
                    queue.Enqueue(curr.left);
                }

                if (curr.right != null)
                {
                    queue.Enqueue(curr.right);
                }
            }
        }

        return sum;
    }
}
</code></pre>
    </div>