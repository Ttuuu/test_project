<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Using <code>Array.join</code> is unrelated to usage of <code>async</code> and <code>await</code>. Also note that the time it takes to call <code>Array.join</code> is insignificant in comparison to the time it takes to make the two API calls.</p>

<p>You can consider <code>call1().then(data =&gt; call2(data))</code> roughly equivalent to <code>const data = await call1(); call2(data)</code>. There's no (obvious) performance gain to be made here by using <code>async</code>/<code>await</code> over <code>then</code>. You would have a slight readability gain though. Note that your second call is dependent on your first call. When this is <em>not</em> the case you can get a performance improvement by making both calls simultaneously like so <code>Promise.All([call1(), call2()])</code>. That is not applicable here, but maybe this was what you had in mind?</p>

<p>The vast majority of the time here is spent waiting for the API calls. If you have ownership of the back end and want to improve performance, then I would suggest you consider creating a new endpoint that better fits your need so you only need to make one API call.</p>

<p>Also I prefer <code>this._source !== undefined</code> over <code>typeof this._source !== 'undefined'</code>, but that's only if you're sure that <code>this._source</code> is declared.</p>

<p>In general I think this code looks fine.</p>
    </div>