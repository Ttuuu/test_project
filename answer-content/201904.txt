<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Just as <a href="https://codereview.stackexchange.com/questions/197446/map-of-sf-transit-cars/201904#comment380661_197446">Gerardo hinted at in comments</a>, I admit that I am not well-versed with d3 and at most can offer general JavaScript feedback. Nonetheless here is what I came up with:</p>

<ol>
<li><p>Since you are using ES-6 features like modules, classes, etc. consider using <code>let</code> and <code>const</code> where appropriate. Also, instead of <code>Array.from()</code> the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax" rel="nofollow noreferrer">spread syntax</a> can be used.</p>

<p>For instance, in <code>TheControls::clicked()</code> there are lines like this:</p>

<blockquote>
<pre><code>Array.from(this.shadowRoot.querySelectorAll('button')).forEach(($)=&gt;{
</code></pre>
</blockquote>

<p>Which could be simplified using spread syntax:</p>

<pre><code>[...this.shadowRoot.querySelectorAll('button')].forEach(($)=&gt;{
</code></pre>

<p>And a related optimization may be to store those button elements in a variable when the DOM is ready instead of querying each time the method is run.  </p></li>
<li><p>The redundant code in <code>TheMap::MapView()</code> can be simplified. Specifically the following lines:</p>

<blockquote>
<pre><code>layer = 'show-streets';
if(view.contains(layer)){
    if(z &lt;= 6) view.remove(layer);
}else if(z &gt; 6){
    view.add(layer);
};
layer = 'show-arteries';
if(view.contains(layer)){
    if(z &lt;= 3) view.remove(layer);
}else if(z &gt; 3){
    view.add(layer);
};
layer = 'show-freeways';
if(view.contains(layer)){
    if(z &lt;= 1.5) view.remove(layer);
}else if(z &gt; 1.5){
    view.add(layer);
};
</code></pre>
</blockquote>

<p>One technique would be to use a plain old JSON object to map the layer names to the threshold values:</p>

<pre><code>const layerThresholds = {
    'show-streets': 6,
    'show-arteries': 3,
    'show-freeways': 1.5
};
Object.keys(layerThresholds).forEach(layer =&gt; {
    const threshold = layerThresholds[layer];
    if (view.contains(layer)) {
        if (z &lt;= threshold) {
             view.remove(layer);
        }
    }
    else if (z &gt; threshold) {
        view.add(layer);
    }
});
</code></pre>

<p>One could aim for shorter code using various techniques like a ternary operator:</p>

<pre><code>Object.keys(layerThresholds).forEach(layer =&gt; {
    const threshold = layerThresholds[layer];
    view[z &lt;= threshold ? 'remove' : 'add'](layer);
});
</code></pre></li>
<li><p>The list of JSON files to load layers from, i.e.</p>

<blockquote>
<pre><code>,content: './sfmaps/neighborhoods.json ./sfmaps/arteries.json ./sfmaps/freeways.json ./sfmaps/streets.json'
</code></pre>
</blockquote>

<p>is a string. Is there a reason not to use an array, like this?</p>

<pre><code>,content: ['./sfmaps/neighborhoods.json', './sfmaps/arteries.json', './sfmaps/freeways.json', './sfmaps/streets.json']
</code></pre>

<p>Obviously it requires a few extra keystrokes, but then when it is used, there is no need to trim and split the string - just iterate over the filenames.  </p></li>
<li><p>One minor shortcut is for arrow functions - when only one parameter is needed, then the parentheses can be omitted. For example:</p>

<blockquote>
<pre><code>.then((json)=&gt;{
</code></pre>
</blockquote>

<p>Can be simplified to:</p>

<pre><code>.then(json=&gt;{
</code></pre></li>
</ol>
    </div>