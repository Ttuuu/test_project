<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You may simply <em>truncate</em> given date to days (ignoring time part), one possible way to do it:</p>

<pre><code>date1.toInstant().truncate(ChronoUnit.DAYS).isAfter(date2.toInstant())
</code></pre>

<p>It's faster than performing that conversions and IMO easier to read because methods are self-descriptive (<em>truncated to days date is after...</em>). You may want to have an helper method for that:</p>

<pre><code>public static boolean isAfterToday(Date date) {
    return date.toInstant(truncate(ChronoUnits.DAYS).isAfter(Instant.now());
}
</code></pre>

<p>Used like this:</p>

<pre><code>if (MyDateUtils.isAfterToday(dateFromUser)) {
    // do the work
} else {
    // scream
}
</code></pre>

<p>Note that if you heavily use dates you may also want to use <a href="http://www.joda.org/joda-time/" rel="nofollow noreferrer">Joda Time</a>, things will be even simpler:</p>

<pre><code>public static boolean isAfterToday(DateTime date) {
    return DateTimeComparator.getDateOnlyInstance().compare(date, DateTime.now()) &gt; 0;
}
</code></pre>

<p>If you can't use <code>Instant</code> (and obviously you don't want to include Joda Time just for this) you should at least use <code>Calendar</code> as described <a href="https://stackoverflow.com/a/1908419/1207195">here</a>, in short:</p>

<pre><code>public static long getDatePart(Date date) {
    Calendar cal = Calendar.getInstance();
    cal.setTime(date);
    cal.set(Calendar.HOUR_OF_DAY, 0);
    cal.set(Calendar.MINUTE, 0);
    cal.set(Calendar.SECOND, 0);
    cal.set(Calendar.MILLISECOND, 0);

    return cal.getTimeInMillis();
}
</code></pre>

<p>Used as:</p>

<pre><code>if (getDatePart(dateFromuser) &gt; getDatePart(Date.now())) {
}
</code></pre>
    </div>