<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are a couple of simple errors:</p>

<p><strong>1)</strong>
In <code>Buffer.SplitLine(...)</code> you replace the next line with the second part of the split instead of inserting it after the first part:</p>

<blockquote>
<pre><code>linesDeepCopy[row] = newLines[0];    
linesDeepCopy[row + 1] = newLines[1];
</code></pre>
</blockquote>

<p>instead you should do something like this:</p>

<pre><code>    linesDeepCopy[row] = newLines[0];
    linesDeepCopy.Insert(row + 1, newLines[1]);
</code></pre>

<hr>

<p><strong>2)</strong>
In <code>Cursor.MoveToCol(int col)</code> you don't use the argument col:</p>

<blockquote>
<pre><code>  internal Cursor MoveToCol(int col)
  {
    return new Cursor(Row, 0);
  }
</code></pre>
</blockquote>

<p>I suppose it to be:</p>

<pre><code>  internal Cursor MoveToCol(int col)
  {
    return new Cursor(Row, col);
  }
</code></pre>

<hr>

<p><strong>3)</strong></p>

<p>In <code>Editor.HandleInput()</code> you should check if a character is a text char before you insert:</p>

<blockquote>
<pre><code>        else if (IsTextChar(character))
        {
          SaveSnapshot();
          _buffer = _buffer.Insert(character.KeyChar.ToString(), _cursor.Row, _cursor.Col);
          _cursor = _cursor.Right(_buffer);
        }

....

      private bool IsTextChar(ConsoleKeyInfo character)
      {
        return !Char.IsControl(character.KeyChar);
      }
</code></pre>
</blockquote>

<p><strong>4)</strong></p>

<p>This construct</p>

<blockquote>
  <p><code>(ConsoleModifiers.Control &amp; character.Modifiers) != 0</code></p>
</blockquote>

<p>is potentially wrong because the value of <code>ConsoleModifiers.Control</code> could actually be <code>0</code>. Therefore you should do like this:</p>

<pre><code>(ConsoleModifiers.Control &amp; character.Modifiers) == ConsoleModifiers.Control
</code></pre>

<hr>

<p><strong>Other things</strong></p>

<p>Consider if this input check is suitable:</p>

<blockquote>
<pre><code>    if ((ConsoleModifiers.Control &amp; character.Modifiers) != 0 &amp;&amp; character.Key == ConsoleKey.Q)
    {
      Environment.Exit(0);
    }
</code></pre>
</blockquote>

<p>Because of the flag-behavior of ConsoleModifiers.Control it will be true if any combination of Modifiers are pressed that involve <code>Control (+ Q)</code>. It would maybe be more useful to make it more distinct like:</p>

<pre><code>if (character.Modifiers == ConsoleModifiers.Control &amp;&amp; character.Key == ConsoleKey.Q)
        {
          Environment.Exit(0);
        }
</code></pre>

<p>In this way you'll save the other combinations with <code>Control + Q</code> to other tools.</p>

<hr>

<p>Your handling of state is nice and clean and easily maintained in that you always create a new instance when ever Buffer or Cursor changes. But it requires <code>immutable</code> objects. Cursor is not <code>immutable</code>:</p>

<blockquote>
<pre><code>class Cursor
{
  public int Row { get; set; }
  public int Col { get; set; }

  ....
}
</code></pre>
</blockquote>

<p>Anyone (?) could change these parameters on objects placed on the history stack.</p>

<p>At least you should restrict <code>Cursor.Row</code> and <code>Cursor.Col</code> to be private settable only.</p>

<pre><code>class Cursor
{
  public int Row { get; private set; }
  public int Col { get; private set; }

  ....
}
</code></pre>

<hr>

<p>Consider to make the <code>Buffer.</code></p>

<blockquote>
<pre><code>  public int LineCount()
  {
    return _lines.Count();
  }
</code></pre>
</blockquote>

<p>as a parameter instead:</p>

<pre><code>public int LineCount =&gt; _lines.Length;
</code></pre>
    </div>