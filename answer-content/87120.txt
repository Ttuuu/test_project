<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are some comments that may help you improve your code.</p>

<h2>Don't rely on variable length arrays</h2>

<p>Lines like these:</p>

<pre><code>int L[n1+1];
int R[n2+1];
</code></pre>

<p>are not legal C++11.  They were OK for C99, but strictly speaking, you can't rely on using variables to declare the length of arrays like this in C++11.</p>

<h2>Use <code>constexpr</code> where practical</h2>

<p>In main, the variables <code>npointsmax</code>, <code>npoints</code> and <code>nave</code> are all actually used as constants, so it would make sense to at least declare them as <code>const</code> and preferably <code>constexpr</code>.</p>

<h2>Free allocated memory</h2>

<p>For every <code>new</code> there should be a corresponding <code>delete</code>; otherwise the program is leaking memory.</p>

<h2>Write results to the <code>std::cout</code></h2>

<p>All of the value of the program is in the detailed timing and not really in the number of points.  For that reason, send the detailed timing data to <code>std::cout</code> instead of to a hardcoded file.  If the user then wants to save a copy, doing so is then a simple matter of command line output redirection.</p>

<h2>Emit the data on the fly rather than storing and dumping it</h2>

<p>There is not really much need to save the data only to store it all at the end.  Instead, why not just emit the data as it's generated?  This reduces the overall memory needed and avoids having to manage yet another data structure.</p>

<h2>Bail out on timeout rather than hardcoded exit</h2>

<p>Rather than having hard-coded special case code for the slowest sorts, instead set a maximum time you're willing to wait for completion and then use that to determine when and if the test runs.</p>

<h2>Avoid C-style macros</h2>

<p>The macros <code>LEFT</code> and <code>RIGHT</code> are only used once each and the <code>PARENT</code> macro isn't used at all.  I'd advise not using macros like those, preferring either inline functions or even lambdas.  In this case, I'd probably just put the equation inline and explain it with a comment.</p>

<h2>Use <code>&lt;cmath&gt;</code> rather than <code>&lt;math.h&gt;</code></h2>

<p>Use the new style <code>&lt;cmath&gt;</code> rather than the C-style <code>&lt;math.h&gt;</code> for two reasons.  First, it is more idiomatic modern C++, but also because it uses namespaces. </p>

<h2>Use whitespace to improve readability</h2>

<p>Lines like this:</p>

<pre><code>for(int ii=0;ii&lt;npoints;ii++) {
</code></pre>

<p>become much easier to read with a little bit of whitespace:</p>

<pre><code>for( int i=0; i &lt; npoints; i++) {
</code></pre>

<h2>Prefer <code>++i</code> to <code>i++</code> in loops</h2>

<p>There is not a big difference for most uses, but if you don't need to save the pre-incremented value, make it simple for both the reader and the compiler and say <code>++i</code>.  This also will help when you start using iterators which often only implement the prefix <code>++</code> operator.</p>

<h2>Populate the unsorted array just once</h2>

<p>Rather than using new random values each time, the program can simply generate the largest unsorted array just once and then each iteration would simply copy the appropriate number of elements.  This saves time for the overall program without affecting the timing of the sort routines.</p>

<h2>Use objects</h2>

<p>If you have more than two of something, it should probably be an object.  Specifically, each of the sort routines operates over the same size data, uses the same kind of counter, has an associated timer, etc.  For that reason, I'd recommend defining an object to encapsulate each test.  Here's what I did:</p>

<pre><code>class SortTest
{
public:
    SortTest(void (*fn)(int[], int), std::string fnname, 
        double max_ns=1.5e9)
        : sort_{fn}, 
          name_{fnname},
          slowtime_{max_ns},
          tooslow_{false}
    {}
    // measure one sort and return time in ns
    double timeOne(int rlist[], int npoints) const;
    // measure N sort iterations and return average ns
    double timeN(int N, int rlist[], int npoints);
    // convenience class to return the name
    std::string name() const { return name_; }
    // allow reset of tooslow_ flag
    bool fastenough(bool flag) { tooslow_=!flag; }
private:
    // the sort routine to be used
    void (*sort_)(int list[], int size);
    // the name of the sort routine
    std::string name_;
    double slowtime_;
    bool tooslow_;
};
</code></pre>

<p>That's the basic class.  Here are the two timing functions:</p>

<pre><code>double SortTest::timeN(int N, int rlist[], int npoints) 
{
    if (tooslow_)
        return 0.0;
    double elapsed{0};
    int *rlistclone = new int[npoints];
    for (int i=N; i; --i) {
        std::copy(rlist, &amp;rlist[npoints], rlistclone); 
        elapsed += timeOne(rlistclone, npoints);
    }
    delete[] rlistclone;
    tooslow_ = elapsed &gt; slowtime_;
    return elapsed/N;
}

double SortTest::timeOne(int rlist[], int npoints) const
{
    auto t1 = std::chrono::high_resolution_clock::now();
    sort_(rlist,npoints);
    auto t2 = std::chrono::high_resolution_clock::now();
    return std::chrono::duration_cast&lt;std::chrono::nanoseconds&gt;(t2-t1).count();
}
</code></pre>

<p>Finally, here is the much simplified <code>main</code>:</p>

<pre><code>int main()
{
    constexpr int npointsmax = 100000, nave = 100, npoints = 46;
    SortTest sorts[]{ 
        { bubble_sort,    "bubble"},
        { insertion_sort, "insertion"},
        { merge_sort,     "merge"},
        { quick_sort,     "quick"},
        { heap_sort,      "heap"}
    };

    // the nplist code remains the same
    srand(time(0));
    double nplist[npoints];
    nplist[0] = 1;
    for(int n=0;n&lt;5;n++) {
        for(int j=2;j&lt;11;j++) {
            nplist[9*n + j - 1] = j * pow(10,n);
        }
    }
    // create the master unsorted list just once
    int rlist0[npointsmax];
    for(int i=0 ; i &lt; npointsmax; i++) {
        rlist0[i] = rand() % 1000;
    }
    for (int npointsi : nplist) {
        cout &lt;&lt; std::setw(6) &lt;&lt; npointsi;
        for (auto &amp;sort : sorts) {
            cout &lt;&lt; '\t' &lt;&lt; std::setw(12) &lt;&lt; std::setprecision(10) 
                &lt;&lt; sort.timeN(nave, rlist0, npointsi);
        }
        cout &lt;&lt; '\n';
    }
}
</code></pre>

<p>Now that we have a nice data structure, if we wanted to add, say, a radix sort, all that would be required is to add a single obvious line item to the <code>sorts</code> array.</p>
    </div>