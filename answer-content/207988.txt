<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>const ingredientNames = Object.keys(props.ingredients);
</code></pre>

<p>Just be aware that anything that iterates/enumerates an object's keys (<code>Object.keys</code>, <code>for-in</code>, etc.) does not guarantee order. So it might not always be "salad, cheese, cheese, meat, meat" in the end. It just happens that most browsers iterate in the order they were created/added to the object, which is why it appears like so. If you want order, use an array to begin with.</p>

<pre><code>    let burgerIngredientElements = [];
    for(let i=0; i&lt;props.ingredients[ingredientName]; i++) {
        burgerIngredientElements.push(
            &lt;BurgerIngredient type={ingredientName} /&gt;
        )
    }
    return [...burgerIngredientElements]
</code></pre>

<p>Also, I don't think this code is doing what you think it's doing. You're pushing to an existing array, then spreading it's contents into another array. You're essentially just shallow-cloning. It might look rendered correctly (probably because JSX now does fragments) but the structure is questionable.</p>

<hr>

<p>Anyways, a more functional way to iterate from <code>0</code> to <code>N</code> is to create an array of <code>N</code> items (it doesn't matter what the values are) and operate on that array using array methods. One way this can be achieved is using <code>Array</code> and <code>array.fill</code>.</p>

<p>Also, instead of a loop and an outer variable holding an array, you can use <code>array.reduce</code> with the accumulator being that array. That way, you don't have that extra mutable variable.</p>

<p>Your code could look like this:</p>

<pre><code>function getBurgerIngredients() {
  const ingredients = props.ingredients

  return Object.keys(ingredients).reduce((c, ingredientName) =&gt; {
    const range = Array(ingredients[ingredientName]).fill()

    return [...c, ...range.map(() =&gt; (&lt;BurgerIngredient type={ingredientName} /&gt;))]
  }, []);
}
</code></pre>
    </div>