<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Technical</h3>

<ul>
<li>The local variable <code>String str</code> is never used eirhin method <code>convert</code>. So can be removed.</li>
<li>Since the map is not supposed to change, make it a <code>static final</code> field, initialized directly or in static constructor.</li>
</ul>

<h3>Stylistic</h3>

<ul>
<li>Central method not only <em>converts</em>, rather than <em>parses</em> a string representation (using a predifined rule set/grammar). So would  rename it to more expressive <code>parseRomanNumeral</code> or <code>parseToInt</code> or similar.</li>
</ul>

<h3>Current Approach: Add Values &amp; Undo</h3>

<p>You are using the concept of a <strong>lookup-table</strong> implemented as map of symbols. This solves mainly the translation of roman symbols to arabic numbers (note: <em>whole number values</em> that can be added; not <em>single numeric digits</em> that represent an 10-based exponential magnitude).</p>

<p>The fact that two sorts of <em>special numbers</em> (i.e. 4, 9; 40, 90; 400, 900) can be represented by two symbols is solved by the <strong>stack memory structure</strong> that allows to memorize the last character (single push and pop, stack size = 1). This memo will serve like an <strong>undo operation</strong>, that will reduce the running sum by its previous addition in order to correctly add the <em>special number</em> (e.g. if signaling <code>V</code> translated to 5 then previously added <code>I</code> translated to 1 will be subtracted, in order to add 4).</p>

<p>That 2 data-structures (<em>map</em> and <em>stack</em>) used by 2 behavioural concepts (<em>lookup</em> and <em>undo</em>) form the "meat", whereas iterating char by char, adding translated values left as the "bones" (algorithmic skeleton).</p>

<p>The stack is not needed since all symbols of the input string can be accessed by their position in char-array.</p>

<h3>Alternative: Grammar for Calculating Numbers</h3>

<p>What if you think of <a href="https://en.m.wikipedia.org/wiki/Roman_numerals" rel="nofollow noreferrer">roman numerals</a> as a, numerical system, formed by a <strong>grammar</strong> for <strong>calculating</strong> numberical values, which form the <em>vocabulary</em>:</p>

<ol>
<li>The vocabulary of roman symbols (<code>I</code>,<code>V</code>) can be translated to numbers (1, 5). </li>
<li>The grammar consists of rules for <em>adding</em> (<code>III</code> = <code>1+1+1</code>) or <em>subtracting</em> (<code>IV</code> = <code>-1+5</code>) values. </li>
<li>each symbol belongs to a <strong>group of unit or magnitude</strong> (ones 10^1, hundreds 10^2, thousands 10^3) wich require to be in a <strong>specific sequence</strong> in order to form a <em>valid</em> roman numeral. Generally from higher to lower magnitude (e.g. <code>MCDVI</code>), except the special cases of powers-to-4 (e.g. <code>CMIV</code>).</li>
<li>Dependent on the symbol's valid position within its magnitude the mathematical operands are evaluated (either plus or minus).</li>
<li>There is also a limit of maximum consecutives for each symbol, = 3 (e.g. <code>III</code> for 3, but not more, because 4 is <code>IV</code>)</li>
<li>Iteratively translated symbols may be used to build a valid <strong>mathematical sum-expression</strong> (e.g. <code>-100 +1000 -1 +5</code>).</li>
<li>The resulting sum will be the finaly parsed integer (e.g. 904).</li>
</ol>

<h3>Edge cases</h3>

<p>Validation is done by rules inherent to the roman numerical system (some explained above).
There is also a symbol for zero : <code>N</code> used standalone.</p>
    </div>