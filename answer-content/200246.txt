<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>the posted code does NOT cleanly compile!</p>

<p>The following is the result of compiling with <code>gcc</code>.</p>

<pre><code>gcc -Wall -Wextra -Wconversion -pedantic -std=gnu11  -ggdb -c "untitled.c" 

untitled.c: In function ‘dfs_paren’:

untitled.c:40:60: warning: conversion to ‘size_t {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     memcpy(paren_info-&gt;parens[paren_info-&gt;size], temp, paren_info-&gt;slen);
                                                        ^~~~~~~~~~

untitled.c:48:51: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         temp_paren_info = malloc(sizeof(char*)*(paren_info-&gt;capacity));
                                               ^

untitled.c: In function ‘gen_paren’:

untitled.c:85:25: warning: conversion to ‘size_t {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
 char *temp = malloc(paren_info-&gt;slen);
                     ^~~~~~~~~~

untitled.c:86:19: warning: conversion to ‘size_t {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
 memset(temp,0,paren_info-&gt;slen);
               ^~~~~~~~~~

untitled.c:88:38: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
 char **ans = malloc(sizeof(char*)*paren_info-&gt;size);
                                  ^
</code></pre>

<p>The use of appropriate horizontal spacing inside parens, after commas, inside brackets, inside braces, after semicolons, and around C operators would make the code more readable and more easily understood.</p>

<p>Separating code blocks <code>for</code> <code>if</code> <code>else</code> <code>while</code> <code>do...while</code> <code>switch</code> <code>case</code> <code>default</code> by a single blank line would make the code much more readable and understandable</p>

<p>separating functions by 2 or 3 blank lines (be consistent) would make the code much more readable and understandable</p>

<p>the parameter to <code>malloc()</code> should be a <code>size_t</code>, not an <code>int</code></p>

<p>it is best to separate the definition of a struct from a <code>typedef</code> for that struct</p>

<p>when calling any of the heap allocation functions: <code>malloc</code> <code>calloc</code> <code>realloc</code>, always check (!=NULL) the returned value to assure the operation was successful</p>

<p>honor the right page boundary (either column 72 or column 80)  so the code can be easily printed</p>

<p>the posted code has many memory leaks, as it does not pass the <code>malloc</code>d pointers to <code>free()</code></p>

<p>regarding: <code>int main()</code>   This is telling the compiler that the <code>main</code> function can have any number of parameters.  Not quite what you want.  Suggest: <code>int main( void )</code></p>
    </div>