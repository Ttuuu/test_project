<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A few comments about the API which completely ignore the spec:</p>

<ul>
<li><p>I would rename <code>N</code> to <code>count</code>, which is descriptive and follows typical naming conventions. Your method would benefit from inline documentation (<code>///</code>), which could clarify the behaviour (what does <code>Extract</code> mean?!?) and describe the parameters precisely.</p></li>
<li><p>It's good that you've used the general-purpose <code>IEnumerable</code> as the return type (gives you freedom to use lazy implementations like those provided by the other answers). I would consider removing the count parameter: the consumer can use LINQ's <code>Take</code> if they want. Currently the API means you can't just keep consuming stuff until you get bored (e.g. with <code>TakeWhile</code> or something), and lacks a specification as to what the method should do if it runs out of stuff to return, what to do with invalid inputs (e.g. <code>-1</code>) ,and all that fun stuff that comes with providing a nontrivial API.</p></li>
<li><p>Note that t3chb0t has provided a generic implementation, so it works with lists of anything, and not just strings. There is basically no reason not to do this, and it means you will have a nice reusable piece of code that works with any type.</p></li>
<li><p>Again, t3chb0t has made the method a <code>static</code> extension method: there is no need for your method to be an instance method unless it is swappable behaviour, which is not implied by the spec. An extension method means it will fit in nicely with the other LINQ methods that most of us use daily.</p></li>
</ul>
    </div>