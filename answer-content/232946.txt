<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Ok, first things first, there are a couple of formatting points that would make your code a little nicer to read:</p>

<ul>
<li>Be consistent with your curly braces <code>{}</code>. In a couple of places, you have the opening brace on the same line as the thing before it whereas you don't in others.</li>
<li>Be consistent with your naming too. I would name your stack <code>s</code> because it fits better with the camelCase used elsewhere.</li>
<li>Spaces on your <code>#include &lt;header&gt;</code>s too please. It's just nitpicking but it's what most other programmers will be doing / used to.</li>
</ul>

<p>That aside, lets get into the body of the code itself:</p>

<ul>
<li><code>bool arePair(char, char)</code> is very verbose in it's definition. You could turn the entire function into a single boolean expression of the form:</li>
</ul>

<pre><code>return (start == '(' &amp;&amp; end == ')')
    || (start == '{' &amp;&amp; end == '}')
    || (start == '[' &amp;&amp; end == ']');
</code></pre>

<p>An alternative would be to use a switch statement:</p>

<pre><code>switch (start) {

case '(': return end == ')';
case '{': return end == '}';
case '[': return end == ']';

default:
    return false;
}
</code></pre>

<p>What you choose is a matter of preference. I would probably go for the switch approach, however, because to me it is clearer what is intended.</p>

<ul>
<li><p><code>areParanthesesBalanced</code> is badly named. There is a typo in "parentheses" and parentheses refers specifically to () not {}, [] or &lt;&gt;. <code>areBracketsBalanced</code> would be more appropriate.</p></li>
<li><p>One idea would be to pass <code>const std::string&amp; exp</code> to the function rather than <code>std::string</code>. This prevents the program having to make a copy of the entire string in case you modify it.</p></li>
<li><p>Your for loop <code>for (int i = 0; i &lt; exp.size(); i++) { ... }</code> never actually makes use of the value of <code>i</code>. Instead you could use a range for like this <code>for (char c : exp)</code> which just gives you each character in turn.</p></li>
<li><p>Your <code>else</code> is unnecessary because you've already returned execution from the function at that point.</p></li>
<li><p>The line <code>return s.empty() ? true : false;</code> is bad because <code>stack&lt;&gt;::empty()</code> returns a boolean! Therefore, just use <code>return s.empty();</code>.</p></li>
</ul>

<p>Overall this gives:</p>

<pre><code>bool arePair(char start, char end)
{
    switch (start) {

    case '(': return end == ')';
    case '{': return end == '}';
    case '[': return end == ']';

    default:
        return false;
    }
}

bool areBracketsBalanced(const std::string&amp; exp)
{
    std::stack&lt;char&gt;  s;
    for (char c : exp)
    {
        if (c == '(' || c == '{' || c == '[')
            s.push(c);
        else if (c == ')' || c == '}' || c == ']')
        {
            if (s.empty() || !arePair(s.top(), c))
                return false;
            s.pop();
        }
    }
    return s.empty();
}
</code></pre>

<h2>But...</h2>

<p>That covers a lot of smaller points but having constants defining your pairs of brackets in multiple places seems messy. Here's one possible solution but there might well be a nicer one I haven't thought of:</p>

<pre><code>int isBracket(char c)
{
    switch (c) {

    case '(': return  1;
    case ')': return -1;

    case '{': return  2;
    case '}': return -2;

    case '[': return  3;
    case ']': return -3;

    default:
        return 0;
    }
}

bool areBracketsBalanced(const std::string&amp; exp)
{
    std::stack&lt;char&gt;  s;
    for (char c : exp)
    {
        if (isBracket(c) &gt; 0) // Opening brackets
            s.push(c);
        else if (isBracket(c) &lt; 0) // Closing brackets
        {
            if (s.empty() || isBracket(s.top()) + isBracket(c))
                return false;
            s.pop();
        }
    }
    return s.empty();
}
</code></pre>

<h2>Instead of printing fail...</h2>

<p>You want to know the position of the failing bracket? Try changing the return type of <code>areBracketsBalanced</code> to <code>int</code>. You're already determining at what position it fails implicitly by returning false.</p>
    </div>