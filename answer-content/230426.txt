<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Style</h2>
<ul>
<li><p>Inconsistent use of line ending semi colon</p>
</li>
<li><p>Undeclared variables <code>parser</code> and <code>xmlDoc</code></p>
</li>
<li><p>Unused code. <code>let t = a.children[i].textContent;</code> <code>t</code> is never used the line should not be there</p>
</li>
<li><p>Poor naming</p>
<ul>
<li>Capitalisation of variable names. Only if objects to be instanciated via new <code>token</code>, if accronim (eg HTML, XML) or if a constant (optional).
Examples; <code>AuthorsInfo</code> should be <code>authorsInfo</code>,  <code>AuthorName</code> as <code>authorName</code>, <code>xmlDoc</code> as <code>XMLDoc</code>.</li>
<li>Non descripttive names, <code>a</code>, <code>tt</code>, <code>t</code></li>
<li>Semanticly inacurate names, <code>AuthorsInfo</code> either <code>authorNodes</code> or just <code>authors</code></li>
</ul>
</li>
<li><p>Use <code>for of</code> loops rather than <code>for if</code> loops if you do not need the index counter</p>
</li>
<li><p>Use <code>for of</code> loops rather than <code>Array</code> iterators</p>
</li>
<li><p>Function scoped variables should be declared as <code>var</code> and hoisted to the top of the function</p>
</li>
</ul>
<h2>Code design</h2>
<p>As you have several potential errors in the code (undeclared variables) you should ALWAYS use the directive <code>"use strict"</code> in your code to ensure these types of syntax problems are caught early in the development process.</p>
<p>Always present your code as a function/s. Presenting code as flat global scoped source string is very poor design practice.</p>
<p>Flat code often ends up performing many tasks that should be separated. Writing functions helps you define task roles under clearly named functions.</p>
<p>The parsing of the XML to HTML is more than one task. I suggest you have two functions <code>parseAuthors</code> to extract the author details, and <code>authorsToHTML</code> to create the markup.</p>
<h2>Example rewrite</h2>
<p>From your code it is unclear as to the nature of the XML. Can authors have no last name, initials, or affiliations. Do authors always have one last name, does the last name always come before the initials. And many more unanswered questions regarding the XML.</p>
<p>The example assumes that the XML given defines the XML.</p>
<p>The example breaks the code into many smaller functions and puts them all together inside a IIF (immediately invoked function). In the real world you would put all the code inside a module.</p>
<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>"use strict";
// As IFF or better as module (No need for use strict if module)
const authors = (() =&gt; {
    const AUTHORS = "Author"; 
    const AFFILIATION = "AffiliationInfo";
    const LAST_NAME = "LastName";
    const INITIALS = "Initials";
    const SEP = "&lt;br/&gt;&lt;br/&gt;";
    const nodeTxt = (node, name) =&gt; (name ? node.querySelector(name) : node).textContent;
    
    function Author(authorNode) {
        const author = {
            lastName: nodeTxt(authorNode, LAST_NAME),
            initials: nodeTxt(authorNode, INITIALS),
            affiliations: []
        }
        for (const affNode of authorNode.querySelectorAll(AFFILIATION)) {
            author.affiliations.push(nodeTxt(affNode));
        }
        return author;
    }

    return {
        parse(XMLString) {
            const authors = [];
            const authorNodes = new DOMParser()
                .parseFromString(XMLString, "text/xml")
                .querySelectorAll("Author");
            for (const authorNode of authorNodes) { authors.push(Author(authorNode)) }
            return authors;
        },
        toHTML(authors) {
            var markup = "";
            for (const author of authors) {
                markup += author.lastName + " " + author.initials + SEP;
                markup += " " + author.affiliations.join(SEP) + SEP;
            }
            return markup;
        },
    };
})();
document.body.innerHTML = authors.toHTML(authors.parse(getXML()));





function getXML() { return `&lt;AuthorList CompleteYN="Y"&gt;
&lt;Author ValidYN="Y"&gt;
    &lt;LastName&gt;Basree&lt;/LastName&gt;
    &lt;ForeName&gt;Mustafa M&lt;/ForeName&gt;
    &lt;Initials&gt;MM&lt;/Initials&gt;
    &lt;AffiliationInfo&gt;
        &lt;Affiliation&gt;The Cancer Center...&lt;/Affiliation&gt;
    &lt;/AffiliationInfo&gt;
&lt;/Author&gt;
&lt;Author ValidYN="Y"&gt;
    &lt;LastName&gt;Shinde&lt;/LastName&gt;
    &lt;ForeName&gt;Neelam&lt;/ForeName&gt;
    &lt;Initials&gt;N&lt;/Initials&gt;
    &lt;AffiliationInfo&gt;
        &lt;Affiliation&gt;The Comprehensive..&lt;/Affiliation&gt;
    &lt;/AffiliationInfo&gt;
&lt;/Author&gt;
&lt;Author ValidYN="Y"&gt;
    &lt;LastName&gt;Koivisto&lt;/LastName&gt;
    &lt;ForeName&gt;Christopher&lt;/ForeName&gt;
    &lt;Initials&gt;C&lt;/Initials&gt;
    &lt;AffiliationInfo&gt;
        &lt;Affiliation&gt;Hollings ...&lt;/Affiliation&gt;
    &lt;/AffiliationInfo&gt;
    &lt;AffiliationInfo&gt;
        &lt;Affiliation&gt;Department ...&lt;/Affiliation&gt;
    &lt;/AffiliationInfo&gt;
&lt;/Author&gt;
&lt;Author ValidYN="Y"&gt;
    &lt;LastName&gt;Cuitino&lt;/LastName&gt;
    &lt;ForeName&gt;Maria&lt;/ForeName&gt;
    &lt;Initials&gt;M&lt;/Initials&gt;
    &lt;AffiliationInfo&gt;
        &lt;Affiliation&gt;Hollings...&lt;/Affiliation&gt;
    &lt;/AffiliationInfo&gt;
    &lt;AffiliationInfo&gt;
        &lt;Affiliation&gt;Department ..&lt;/Affiliation&gt;
    &lt;/AffiliationInfo&gt;
&lt;/Author&gt;
&lt;/AuthorList&gt;`
};</code></pre>
</div>
</div>

    </div>