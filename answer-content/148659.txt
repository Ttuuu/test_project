<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There's some stuff that's confusing in this coding and it's structure. A few things of note:</p>

<p>First when defining a class you do not need the beginning <code>(</code> and ending <code>)();</code> What that is for is to create a nameless function that will then be run once and then for all intents and purposes be removed from memory after. You are wanting to create a class that can be referenced and used later on.
Simply:</p>

<pre><code>function todoApp(){
    //define class here
}
</code></pre>

<p>This then creates an object constructor that you then call to create and store the object:</p>

<pre><code>var myTodoApp = new todoApp();
</code></pre>

<p>Then your jQuery call after that, outside of your constructor, not in:</p>

<pre><code>  $("[rel='jstodo-container'] &gt; [rel='jstodo-submit']").on("click", function () {
    myTodoApp.storage.addTodo($("[rel='jstodo-container'] &gt; [rel='jstodo-input']").val());
    myTodoApp.view.render();
  });
</code></pre>

<p>When giving a class (your todoApp function) a custom class for a variable, that 'sub-class' should be defined separately and then referenced inside of your class.</p>

<p>Inside of your class, anything you want to be accessible outside of your class should start with <code>this.</code></p>

<pre><code>var mayTodoApp = new todoApp();

$("[rel='jstodo-container'] &gt; [rel='jstodo-submit']").on("click", function () {
    myTodoApp.storage.addTodo($("[rel='jstodo-container'] &gt; [rel='jstodo-input']").val());
    myTodoApp.view.render();
  });

function todoApp(){
    this.storage = new storageClass();
    this.example = 'this is a string accessible outside of the class';
    //run any initialization code here
}

function storageClass(){
    var _db,
        todos,
        addTodo,
        removeTodo,
        updateTodo,
        getAllTodos,
        save;

        this.addTodo = function addTodo(todo) {
            //do stuff
            this.save(); //note: need 'this.' for class to access itself
        };
}
</code></pre>

<p>This is more along the structure you are looking for. A few things I would suggest looking into is the concept of <code>this</code> and maybe some Google results on javascript object oriented programming. Also having a good strong IDE (integrated development environment) helps a lot. I recommend Komodo personally, but to each their own. There might be a better one out there for you. But a good strong one can give code completion and show you syntax errors to help you get the structure down.</p>

<p>One other thing of note that helps quite a bit: Javascript is all read and processed into the DOM before anything is actually run (accept for dynamically added stripts, but that is a whole different beast). What this means is that before any coding is already run, the interpreter has already processed over the class definition. In other words, you can call your classes before defining them:</p>

<pre><code>function todoApp(){
    this.storage = new storageClass();
}
function storageClass(){
    this.addTodo = function(todo){
    }
}
var todo = new todoApp();
todo.storage.addTodo('fooBar');
</code></pre>

<p>Will do the same as:</p>

<pre><code>var todo = new todoApp();
todo.storage.addTodo('fooBar');

function storageClass(){
    this.addTodo = function(todo){
    }
}

function todoApp(){
    this.storage = new storageClass();
}
</code></pre>

<p>Outside of class definition, order matters, or course. You must create the object instance of your class before using it. Note that the latter is the standard. Classes should be defined below the coding to be run globally, this makes for better readability.</p>

<p>EDIT:    I also just noticed your JSON objects. You do not need to define then in that manner. Javascript automatically determines variable type which is why you use <code>var</code> instead of <code>char</code> and <code>int</code> and such. For this same reason JSON objects are automatically defined by format. It's a harder concept for some to grasp at first and I would definitely read more into it but basically it is an associated array, or array of pairs (keys and values). that is in this format:</p>

<pre><code>{key: 'value', key: 'value'}
</code></pre>

<p>It is defined inside of curly brackets <code>{</code> <code>}</code> the key is a name to reference the value, and does not need quotes. The value needs quotes unless you want to use a variable. Also numbers do not need quotes for the values. Values can be objects or arrays as well. And the pairs are delimited by a comma <code>,</code>. As long as you follow these rules javascript does the rest.</p>

<pre><code>var home = '1234 Fake St.';
var example = {date: '12/01/2016', time: '9:42am', location: home, peopleAttending: 10};
</code></pre>
    </div>