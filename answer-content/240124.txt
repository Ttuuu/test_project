<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I've honestly never used Django before, so I'm not going to touch on that aspect.</p>

<p>You can reduce a little duplication that exists in your <code>*_vote</code> methods though:</p>

<pre><code>def _vote(self, created_by, vote_change, vote_type):
    try:
        self.de_transl.create(
            voted_by=created_by, transl=self, vote_type=vote_type)
        self.vote += vote_change
        self.save()
    except (DatabaseError, IntegrityError, ValueError) as e:
        direction = "down" if vote_change &lt; 0 else "up"  # Will say "up" on 0.
        raise Exception(f'Some error occurred during {direction} vote: {e}')
    return 'ok'

def up_vote(self, created_by):
    return self._vote(created_by, 1, GermanTranslationVote.Vote.UP)

def down_vote(self, created_by):
    return self._vote(created_by, -1, GermanTranslationVote.Vote.DOWN)
</code></pre>

<p>Now you only need to have the bulky exception handling and database management once.</p>

<hr>

<p>You can do something similar for the repeated <code>*_at</code> and <code>*_by</code> variables inside <code>BaseModel</code>:</p>

<pre><code>def atByPair(related_name):
    at_model = models.DateTimeField(auto_now_add=True)
    by_model = models.ForeignKey(
                   get_user_model(), on_delete=models.CASCADE,
                   related_name=related_name, null=True, blank=True)

    return at_model, by_model   

created_at, created_by = atByPair('%(class)s_created_by')

modified_at, modified_by = atByPair('%(class)s_modified_by')

accepted_at, accepted_by = atByPair('%(class)s_accepted_by')

rejected_at, rejected_by = atByPair('%(class)s_rejected_by')
rejection_reason = models.TextField(blank=True, default="")
</code></pre>

<p>Much less duplication and worrying about needing to make consistent changes in multiple places.</p>
    </div>