<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Variables</h2>

<p>I understand why you have the <code>Range.this.end</code> and <code>Range.this.start</code> to avoid confusion about where those variables come from... If you need the <code>Range.this</code> as part of the teaching exercise, then sure. Otherwise, I would recommend three things....</p>

<ol>
<li>add <code>range</code> as a prefix, even though it is slightly redundant</li>
<li>Make them final...</li>
<li>one variable per line... (it makes revision-control diffs/patches easier to read)</li>
</ol>

<p>The code would look like:</p>

<pre><code>private final int rangeStart;
private final int rangeEnd;
</code></pre>

<p>Then, all the <code>Range.this.start</code> would be just <code>rangeStart</code>, etc.</p>

<h2>Nested classes</h2>

<p>Your iterator class is a non-static class, so it can reference the outer class's range start/end.</p>

<p>In this case, the nested class can be changed to a static class very easily. This has the potential of simplifying memory management because the iterator does not need a reference to the enclosing Range.</p>

<p>Consider a private-static Iterator instance:</p>

<pre><code>// Inner class example
private static final class RangeIterator implements
                Iterator&lt;Integer&gt; {
    private int cursor;
    private final int end;

    public RangeIterator(int start, int end) {
        this.cursor = start;
        this.end = end;
    }

    public boolean hasNext() {
        return this.cursor &lt; end;
    }

    public Integer next() {
        if(this.hasNext()) {
            int current = cursor;
            cursor ++;
            return current;
        }
        throw new NoSuchElementException();
    }

    public void remove() {
        throw new UnsupportedOperationException();
    }
}
</code></pre>

<p>This static class removes the need for the back-references to <code>Range.this</code> entirely....</p>

<p>The new iterator is called simply with:</p>

<pre><code>public Iterator&lt;Integer&gt; iterator() {
    return new RangeIterator(start, end);
}
</code></pre>

<h2>Pre-Validate</h2>

<p>It is better to pre-validate state, than to fall-through to an error... This code:</p>

<blockquote>
<pre><code>    public Integer next() {
        if(this.hasNext()) {
            int current = cursor;
            cursor ++;
            return current;
        }
        throw new NoSuchElementException();
    }
</code></pre>
</blockquote>

<p>would be better as:</p>

<pre><code>    public Integer next() {
        if(!this.hasNext()) {
            throw new NoSuchElementException();
        }
        int current = cursor;
        cursor ++;
        return current;
    }
</code></pre>

<h2>Post-Increment</h2>

<p>This block can be simplified:</p>

<blockquote>
<pre><code>        int current = cursor;
        cursor ++;
        return current;
</code></pre>
</blockquote>

<p>to just:</p>

<pre><code>return cursor++;
</code></pre>

<p>although I imagine this is done as an education ploy.</p>

<h2>Integer as the example</h2>

<p>Because of the int auto-bocxing I worry that Integer may not be the right choice for data type. You may want to consider a non-primitive as the data.</p>

<p>Autoboxing is the sort of thing that will confuse.</p>

<h2>Conclusion</h2>

<p>Otherwise, I don't see much in the way of problems.</p>
    </div>