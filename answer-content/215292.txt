<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Welcome back! There are a lot of good things to say about your program, and a few not-so-good. First, the good:</p>

<ol>
<li><p>The code is clean, well laid-out, and generally written in a Pythonic style.</p></li>
<li><p>You have used functions to break things down.</p></li>
<li><p>You have structured your program as a module, which should make it easier to test.</p></li>
</ol>

<p>Here are some things that I think could be improved:</p>

<ol>
<li><p>Your function names need a little work. Consider this code:</p>

<pre><code>player_choice = ask_player()
comp_choice = comp_play()
</code></pre>

<p>The object is to get two choices, one made by the player and the other made by the computer. Why are the two names so different? <code>ask_player</code> doesn't sound like getting a player's choice. It sounds like a generalized function that asks the player something and gets a response (i.e., <code>input()</code>). On the other hand, if <code>player</code> is spelled out why do you abbreviate the opponent in <code>comp_play</code>? </p>

<p>Using <code>get</code> is not always a good thing. It's one of the times when a function or method name doesn't need a verb in it - because it is frequently implicit when you are doing <code>is_...</code> or <code>has_...</code> or <code>get_...</code> or <code>set_...</code>. I don't think you need to spell out <code>get_player_choice</code> and <code>get_computer_choice</code>, but certainly <code>player_choice</code> and <code>computer_choice</code> would be appropriate.</p></li>
</ol>

<p>This same logic applies to <code>results</code>. Instead of calling a function named <code>results</code>, why not call <code>play_once</code>? Or <code>one_game</code>? It's obvious from the code in <code>main</code> what is going on, but the function name doesn't really match the nature of the "step" being executed.</p>

<ol start="2">
<li><p>Your code breakdown is uneven. Consider this code:</p>

<pre><code>def main():
    wins = 0
    losses = 0
    draws = 0
    while True:
        os.system('cls' if os.name == 'nt' else 'clear')
        print(f"Wins: {wins}\nLosses: {losses}\nDraws: {draws}")
        wins, losses, draws = results(wins, losses, draws)
        if play_again() == '2':
            break
</code></pre>

<p>Let's break those lines down. The key point I want to make is to <strong>keep neighboring statements at a similar level of abstraction.</strong> </p>

<p>First, you initialize your variables:</p>

<pre><code>wins = 0
losses = 0
draws = 0
</code></pre>

<p>Because you are not using a class, and are not using globals (which would be appropriate in this scenario, IMO), you are stuck with doing variable initialization here. I suggest that you make this consistent with how you update the variables after each game:</p>

<pre><code>wins, losses, draws = starting_scores()
</code></pre>

<p>Now, <code>starting_scores</code> could just <code>return 0,0,0</code> or it could load from a saved-game file. But it makes the initialization sufficiently abstract, and it also spells out what you are doing.</p>

<p>Next, you loop:</p>

<pre><code>while True:
    ...
    if play_again() == '2':
        break
</code></pre>

<p>The <code>while True ... break</code> could be rewritten to use a boolean variable. That's not super-critical, since the value of that variable is determined at only a single location. I consider the break to be equivalent in this case. </p>

<p><em>However,</em> the comparison <code>== '2'</code> is not acceptable! Why? Because that's a detail, and your function name <code>play_again</code> <em>should take care of that detail for you!</em> Don't ask a question and then interpret the answer. Make your question-asking code handle the interpretation for you. Obviously <code>play_again</code> is short for "do you want to play again?" and <code>'2'</code> is not a valid answer. <code>True</code> or <code>False</code> are valid answers, so the code should look like:</p>

<pre><code>while True:
    ...
    if not play_again():
        break
</code></pre>

<p>Finally, the inside of your loop has the same problem:</p>

<pre><code>os.system('cls' if os.name == 'nt' else 'clear')
print(f"Wins: {wins}\nLosses: {losses}\nDraws: {draws}")
wins, losses, draws = results(wins, losses, draws)
</code></pre>

<p>What are you doing here? Well, you are clearing the screen, showing a summary of the games played, and playing one more round of the game. So say that!</p>

<pre><code>clear_screen()
show_statistics(wins, losses, draws)
wins, losses, draws = play_one_round(wins, losses, draws)
</code></pre></li>
<li><p>Use appropriate data structures.</p>

<p>Your <code>main</code> code passes three variables to your play-game code. That code then returns three data items in a tuple, which you unpack into three variables. </p>

<p>In fact, you never use one of those variables without also having the others at hand. This should tell you that you are dealing with one aggregate data item, instead of three independent pieces of data. If that's true, just treat the scores as a single item:</p>

<pre><code>def main():
    scores = starting_scores()

    while True:
        clear_screen()
        show_statistics(scores)
        scores = rock_paper_scissors(scores)

        if not play_again():
            break
</code></pre>

<p>Similarly, you can treat the scores as an aggregate until you have to update them:</p>

<pre><code># NB: was `results(wins, losses, draws):`
def rock_paper_scissors(scores):
    player = player_choice()
    computer = computer_choice()
    outcome = game_outcome(player, computer)
    show_results(outcome, player, computer)
    new_scores = update_scores(scores, outcome)
    return new_scores
</code></pre>

<p>At this point, the "play one game" has also become a collection of abstract statements. But notice that I'm treating <code>scores</code> as an opaque blob that I don't need to deal with: I just pass it along to the lower levels, with another data item describing the update to make.</p></li>
<li><p>Be consistent!</p>

<p>I notice that when asking the player to choose rock, paper, or scissors, you allow them to type in an answer. But given a Yes/No question, you require a selection of either <code>1</code> or <code>2</code>. That's consistently surprising. When I ran your code, I wanted to keep typing my answers. (I kept hitting 'y' to play again.) </p>

<p>I suggest you either present the Rock/Paper/Scissors options as a menu, or present the Yes/No options as a string input and look for 'y' or 'n'. Making the interface that much more consistent will be an improvement.</p></li>
<li><p>Use data, or code. Not both.</p>

<p>This one is a little subtle, but take a look:</p>

<pre><code>if comp_choice == 'Paper':
    print(results_msg(comp_choice, player_choice, 'lost'))
    losses += 1
else:
    print(results_msg(player_choice, comp_choice, 'won'))
    wins += 1
</code></pre>

<p>What's significant here is that you have an <code>if/then</code> statement that decides whether you won or lost. And then you pass that into your <code>results_msg</code> function as a string parameter. The result of this is that you have a string parameter to be substituted that gives information you already knew: whether the player won or lost.</p>

<p>Let's look at <code>results_msg</code>: </p>

<pre><code>def results_msg(x, y, result):
    message = f"{x} beats {y}. You {result}!"
    return message
</code></pre>

<p>You have to consider that Python f-strings are code. And they're a pretty compact form of code, compared to the horror of <em>str.</em><code>format()</code>. So writing:</p>

<pre><code>print(results_msg(player_choice, comp_choice, 'won'))
</code></pre>

<p>is not really an improvement on writing:</p>

<pre><code>print(f"{player} beats {computer}. You won!")
</code></pre>

<p>It's not clearer. It's not shorter. It <em>does</em> avoid problems with changing the text of the message, although there isn't much text in the message to change.</p>

<p>I don't think you need to hoist the f-string up into the calling function. I <em>do</em> think you should not pass 'won' or 'lost' as a parameter: you already decided you won or lost. Call a separate function instead. </p>

<pre><code>if ...
    win_message(player_choice, comp_choice)
else:
    lose_message(player_choice, comp_choice)
</code></pre>

<p>Note that this will appear to conflict with the code structure I showed above- because in that code structure, I chose to treat the result as data, not code. I'm not saying you have to use data, or that you have to use code. I'm saying that you should pick one and stick with it. If you determine your outcome as code, go ahead and hard-code the outcome. If you determine your outcome as data, go ahead and treat it as data.</p>

<p>And as a side note, strings with substitutions in them make it hard to do i18n. So there's nothing wrong with having an array of totally spelled out messages at the bottom. It also gives a bit more "flavor" if you customize the verbs:</p>

<pre><code>"Rock breaks scissors. You won!",
"Scissors cuts paper. You won!",
"Paper covers rock. You won!",
...
</code></pre></li>
</ol>
    </div>