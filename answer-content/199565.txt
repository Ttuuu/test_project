<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>From where I sit, this seems to be implemented backwards. You're iterating over every pixel in the viewport and checking to see if it has a particle, then doing something with the particle. It seems like it would be way more efficient to iterate over the particles and calculate the values needed for each particle. You're doing <i>n * m</i> operations for the lighting, then another <i>n * m</i> operations for drawing the textures (so it's essentially O(2n<sup>2</sup>)). You could do the operations only for the particles and cut it down to O(2q) operations (where q is the number of particles, which looks to always be smaller than m * n).</p>

<p>If instead, a particle held an (x,y) position, and a lighting value, you could simply iterate over the particles and calculate the new lighting value and then draw them.</p>

<p>You say:</p>

<blockquote>
  <p>One of the difficulties with just doing the operations for all the particles is that the world is rather large. There are many more particles than those just displayed in the viewport. It would be prohibitively slow to calculate lighting and render every particle (&gt; 10,000,000).</p>
</blockquote>

<p>The solution to this is to use an appropriate data structure. In this case a <a href="https://en.wikipedia.org/wiki/K-d_tree" rel="nofollow noreferrer">k-d tree</a> in 2D might be a good place to start. You would check only particles whose segment of the tree intersected the viewport, and leave out all other particles.</p>
    </div>