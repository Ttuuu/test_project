<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Since you are using f strings I will presume you are using python 3.6 or later.</p>

<pre><code>def __init__(self, value):
    self._cents = int(round(value * 100, 0))
</code></pre>

<p>Good job prefixing cents with an underscore. I think it is a good choice to make the variable "private".</p>

<p>By leaving out the second parameter from round, or by passing None, the returned value will be rounded to an integer. You could instead write</p>

<pre><code>def __init__(self, value):
    self._cents = round(value * 100)
</code></pre>

<p>Note that round may not behave <a href="https://docs.python.org/3/library/functions.html#round" rel="nofollow noreferrer">as you expect</a>. Depending on the value given it may round the opposite way to what you'd expect.</p>

<hr>

<pre><code>def __add__(self, other):
    return self.__class__((self._cents + other._cents) / 100)
</code></pre>

<p>It is good that you've accounted for subclassing. Since you've had to do some work to make a new class to return, maybe that indicates you could use an alternative constructor that takes cents directly?</p>

<p>Unfortunately you don't do any type checking here, so the error message a user receives is not very helpful.</p>

<pre><code>a = Currency(2.345)
print(a)  # 2.35
a + 2.03  # AttributeError: 'float' object has no attribute '_cents'
</code></pre>

<p>I would suggest type checking as you've done in mul, making sure only currency can be added to currency</p>

<pre><code>def __add__(self, other):
    if not isinstance(other, Currency):
        raise TypeError(f"Unsupported type, cannot add {self.__class__} and {other.__class__}")
    ...
</code></pre>

<hr>

<pre><code>def __mul__(self, factor):
    if type(factor) not in [int, float]:
        raise ValueError('factor must be a scalar')
</code></pre>

<p>From <a href="https://stackoverflow.com/questions/1549801/what-are-the-differences-between-type-and-isinstance">this stackoverflow answer</a>, isinstance is preferred over type. Also from the same answer, duck typing is preferred over isinstance. Since we don't want to have to update this list every time we find a new type that is acceptable to multiply by, lets just try it and see if it works. Multiplying a currency will then just work unless there is a reason it shouldn't. One exception might be multiplying currency by currency. Should that be allowed?</p>

<pre><code>def __mul__(self, factor):
    try:
        return self.__class__(factor * self._cents / 100)
    except TypeError:
        raise TypeError(f"...")
</code></pre>

<p>This isn't perfect, as we may lose useful information about what doesn't work (Did the constructor fail? Did the multiplication fail? etc) but it is good enough.</p>

<pre><code># Example of currency just working with fractions
a = Currency(8.08)
a * fraction.Fraction(1, 4)   # 2.02
</code></pre>

<hr>

<pre><code>def __truediv__(self, divisor):
    if type(divisor) not in [int, float]:
        raise ValueError('divisor must be a scalar')

    if divisor != 0:
        return self.__class__(self._cents / divisor / 100)
    else:
        raise ValueError('Cannot divide by zero')
</code></pre>

<p>Since an exception is raised if you try to divide a currency by 0, I don't see an advantage of making it a ValueError over a ZeroDivisionError. It wold actually remove the error handling since it doesn't add much, and let the user catch it if they want to.</p>

<p>If there is a usecase for it, it may be worth defining <strong>div</strong> too. It could be as simple as</p>

<pre><code>__div__ = __truediv__
</code></pre>

<hr>

<pre><code>def __repr__(self):
    return str(f'{self._cents/100:,.2f}')

def __str__(self):
    return str(f'{self._cents/100:,.2f}')
</code></pre>

<p>This is repeated code. You can deduplicate with either</p>

<pre><code>def __repr__(self):
    return str(self)
</code></pre>

<p>or</p>

<pre><code>__repr__ = __str__
</code></pre>

<hr>

<pre><code>@property
def dollars(self):
    return self._cents / 100

@property
def cents(self):
    return self._cents
</code></pre>

<p>These do not make sense to me. I would expect dollars to return the number of dollars present, and cents to just return the number of cents</p>

<pre><code>c = Currency(7.89)
c.dollars  # 7.89, I expected 7
c.cents  # 789, I expected 89
</code></pre>

<p>You also could implement <a href="https://stackoverflow.com/questions/1684828/how-to-set-attributes-using-property-decorators">dollars.setter</a> and cents.setter so you can change just one of them.</p>

<hr>

<p>Here I will list things I would do differently. That doesn't mean I'm right and you are wrong, it means food for thought, but reject ideas away if they don't suit.</p>

<ol>
<li>Use <a href="https://docs.python.org/3.7/library/decimal.html" rel="nofollow noreferrer">decimal</a>. It was made for arithmetic on numbers where precision matters. It also has the work on dealing with other python numbers pretty much done for you. It also lets you choose how to round which may be important if you need <a href="https://en.wikipedia.org/wiki/Rounding#Round_half_to_even" rel="nofollow noreferrer">banker's rounding</a>.</li>
<li>Add a constructor for making an amount from dollars and cents. Something like <code>Currency(dollars=7, cents=89)</code> would be nice to use. The implementation is a little trickier (what if cents &gt;= 100, what if dollars is negative).</li>
<li>Due to the rounding, working with this class may look unfair to whoever owns the money. <code>Currency(5.05) / 2 * 2 == Currency(5.04) != Currency(5.05)</code>. By doing what should be nothing, they've lost a cent! To exaggerate the problem, lets say you have <code>Currency(74.49)</code> to divide amongst 12 people. <code>Currency(74.49) / 12</code> outputs <code>Currency(6.21)</code>. You give each person that amount <code>Currency(6.21) * 12 == Currency(74.52)</code>, and you find you are 3 cent out of pocket. This is when auditors come in and start asking questions.</li>
</ol>
    </div>