<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>An extended and more comprehensive refactoring would require having more context to your current function: <em>calling context</em>, <em>how do the function's parameters are composed and related</em>, <em>what is <code>close_prices</code></em> ... </p>

<p>But even with restricted context the posted function <code>get_peak_valley</code> has enough space (gaps) for restructuring and optimizations:</p>

<p><strong><em>Rounding</em></strong> numeric arguments and ensuring limits:</p>

<ul>
<li><p><code>round</code> function. Python's <a href="https://docs.python.org/3/library/functions.html#round" rel="nofollow noreferrer"><code>round</code></a> function already returns rounded number as integer if precision is omitted, no need to cast to <code>int</code> (like <code>int(round(window_size))</code> ...). Negative numbers will be rounded to <code>0</code>.</p></li>
<li><p>ensuring lower limit with </p>

<pre><code>if window_step == 0:
    window_step = 1
if req_angles == 0:
    req_angles = 1
</code></pre>

<p>can be replaced with convenient <code>max</code> function call, like <code>req_angles = max(round(req_angles), 1)</code></p></li>
</ul>

<p><strong><em>Primary</em></strong> "peak" and "value" indices:</p>

<ul>
<li><code>peak_inds, valley_inds = [], []</code>. Instead of declaring and accumulating separate lists which then will be feed to <code>Counter</code> - we can define and accumulate them as <em>counters</em> at once <code>peak_counts, valley_counts = Counter(), Counter()</code></li>
</ul>

<p><strong><em>Substitute Algorithm</em></strong> (<a href="https://refactoring.com/catalog/substituteAlgorithm.html" rel="nofollow noreferrer">Substitute Algorithm</a>) for "stepping through overlapping windows":</p>

<ul>
<li><p>the initial looping scheme:</p>

<pre><code>ind = 0
while ind + window_size &lt;= len(arr):
    flattened = detrend(arr[ind:ind + window_size])
    ...
    ind += window_step
</code></pre>

<p>has more flexible equivalent:</p>

<pre><code>arr_size = len(arr)    # getting list size at once
for i in range(0, arr_size, window_step):
    flattened = detrend(arr[ind:ind + window_size])
    ...
</code></pre></li>
</ul>

<p><a href="https://docs.python.org/3/library/functions.html#func-range" rel="nofollow noreferrer"><code>range</code></a> function has a convenient <code>step</code> option.</p>

<p><em>New conception for <strong><code>Event</code></strong> and <strong><code>EventState</code></strong>:</em><br>
The proposed OOP approach is not primarily for performance, but for obtaining well-organized, structured and flexible code.<br>
Instead of going to a mess of conditionals and switching between 2 exclusive events, we'll present an <em>event</em> as a <a href="https://docs.python.org/3/library/enum.html#intenum" rel="nofollow noreferrer">IntEnum</a> enumeration class with 2 values <code>0</code> and <code>1</code>. That will allow us to easily switch/swap to opposite event using bitwise XOR operator (<em>Bitwise XOR sets the bits in the result to 1 if either, but not both, of the corresponding bits in the two operands is 1</em>)</p>

<pre><code>class Event(IntEnum):
    PEAK = 0
    VALLEY = 1
</code></pre>

<p>The class <code>EventState</code> represents the current event state with related <em>best</em> index, <em>best</em> price and the lists of <em>best</em> indices for each event type implemented conveniently as <code>self._event_indices = {Event.PEAK: [], Event.VALLEY: []}</code>. See the full definition in below code section.</p>

<p><em>Trasersing through combined <code>event_inds</code> (last <code>for</code> loop):</em></p>

<p>The first condition for setting <code>is_peak</code> flag should be simplified to the following <code>in_peak = x in pk_inds</code>. But, going further, we'll place a temp set <code>peak_ids_set = set(pk_inds)</code> before starting loop, for faster containment check on each loop iteration.<br>Then, changing the flag to <code>is_peak = x in peak_ids_set</code>.<br>
All seems good, but the flag is better with name <code>in_peak</code> (current item is contained <strong>in</strong> peak indices).<br>
That would support in solving next concern which is multiple conditions like <code>curr_event == 'valley'</code> and <code>curr_event == 'peak'</code>.<br> 
The beneficial way is to apply <em>Extract variable</em> technique and extract those conditions at once as:</p>

<pre><code>in_peak = x in peak_ids_set
is_peak = event_state.event == Event.PEAK
is_valley = event_state.event == Event.VALLEY
</code></pre>

<p>Two conditionals that have <code>continue</code> action are now collapsed into one due to flexible <code>EventState</code> behavior which allows to switch to next event (<code>event_state.switch</code> method), set best rate (index, price) with <code>event_state.set_best_rate</code> method and add best index to encapsulated internal lists for the needed event type (<code>event_state.add_best_index</code>).</p>

<p>The final resulting <em>best</em> indices are covered and returned by <code>event_state.event_inices</code> property.</p>

<hr>

<p>The <strong>final</strong> version:</p>

<pre><code>from collections import Counter
from scipy.signal import detrend
import numpy as np
from enum import IntEnum


class Event(IntEnum):
    PEAK = 0
    VALLEY = 1


class EventState:
    def __init__(self, event, close_prices, best_price, best_idx=0):
        self.event = event
        self._close_prices = close_prices
        self.best_price = best_price
        self.best_idx = best_idx
        self._event_indices = {Event.PEAK: [], Event.VALLEY: []}

    @property
    def event_inices(self):
        return tuple(self._event_indices.values())

    def switch(self):
        """Switch event state (name)"""
        self.event ^= 1

    def set_best_rate(self, best_idx):
        self.best_price = self._close_prices[best_idx]
        self.best_idx = best_idx

    def add_best_index(self):
        self._event_indices[self.event].append(self.best_idx)


def get_peak_valley(arr, threshold, window_size, overlap, req_angles):
    # validate params
    window_size = round(window_size)
    req_angles = max(round(req_angles), 1)
    window_step = max(round(window_size * (1 - overlap)), 1)

    # get all points that classify as a peak/valley
    peak_counts, valley_counts = Counter(), Counter()
    arr_size = len(arr)

    for i in range(0, arr_size, window_step):
        flattened = detrend(arr[i:i + window_size])
        std, avg = np.std(flattened), np.mean(flattened)
        lower_b = avg - std * threshold
        upper_b = avg + std * threshold

        for idx, val in enumerate(flattened):
            if val &lt; lower_b:
                valley_counts[idx + i] += 1
            elif val &gt; upper_b:
                peak_counts[idx + i] += 1

    # discard points that have counts below the threshold
    pk_inds = [i for i, c in peak_counts.items() if c &gt;= req_angles]
    vly_inds = [i for i, c in valley_counts.items() if c &gt;= req_angles]

    # initialize iterator to find to best peak/valley for consecutive detections
    if len(pk_inds) == 0 or len(vly_inds) == 0:
        return pk_inds, vly_inds

    if pk_inds[0] &lt; vly_inds[0]:
        curr_event, best_price = Event.PEAK, close_prices[pk_inds[0]]
    else:
        curr_event, best_price = Event.VALLEY, close_prices[vly_inds[0]]

    event_state = EventState(curr_event, close_prices=close_prices, best_price=best_price)
    event_inds = sorted(pk_inds + vly_inds)
    peak_ids_set = set(pk_inds)

    # iterate through points and only carry forward the index
    # that has the highest or lowest value from the current group
    for x in event_inds:
        in_peak = x in peak_ids_set
        is_peak = event_state.event == Event.PEAK
        is_valley = event_state.event == Event.VALLEY

        if (in_peak and is_valley) or (not in_peak and is_peak):
            event_state.add_best_index()
            event_state.switch()
            event_state.set_best_rate(best_idx=x)
            continue

        if (in_peak and is_peak and close_prices[x] &gt; event_state.best_price) or \
                (not in_peak and is_valley and close_prices[x] &lt; event_state.best_price):
            event_state.set_best_rate(x)

    event_state.add_best_index()

    return event_state.event_inices
</code></pre>
    </div>