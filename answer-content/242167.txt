<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li>Firstly I would recommend not to use recursive methods for handling wrong inputs. A simple <code>while</code> loop is enough.</li>
<li>Use <code>.strip()</code> while taking inputs since <code>'a'=='a '</code> is <code>False</code> in python.</li>
<li>If you are playing with numbers, keep them as numbers, not as strings. Usually numbers are easier to handle.</li>
<li>Avoid use of <code>global</code> if simple passing as arguments is an available option.</li>
<li>In the <code>if-elif</code> ladder, the condition <code>base=='4'</code> is unnecessary since you are already handling random case using the flags <code>is_random_question</code> and <code>is_random_base</code>.</li>
<li>I have added a dictionary <code>base_dict</code> which eliminates the need of <code>if-else</code> repetitions.</li>
<li>Why would you do <code>elif ans.lower()=='f': question_generator()</code> when you want <code>'Type \'f\' as answer to stop'</code>? I have modified the while loop inside <code>generate_question</code> method to work as counter for number of questions.</li>
</ul>

<pre class="lang-py prettyprint-override"><code>import random
import baseconvert

def question_type_ask():
    print('Which question would you like to be asked?')
    print('1. Decimal &gt; Base X\n2. Base X &gt; Decimal\n3. Random')
    ans = input('Input: ').strip()
    # print(ans)
    while ans&lt;'1' or ans&gt;'3':
        ans = input('Invalid input. Enter again: ')
    return int(ans)

def amount_ask():
    print('How many questions do you want to be asked? Type -1 for infinite.')
    print('Type \'f\' as answer to stop')
    while True:
        ans = input('Input: ').strip()
        if not ans.lstrip('-+').isnumeric():
            print('Input numbers only, please.')
        elif int(ans)&lt;-1 or int(ans)==0:
            print('Input -1 or positive numbers only, please.')        
        else:
            break
    return int(ans)

def base_ask():
    print('Which base do you want to be asked?')
    print('1. Octet\n2. Hexadecimal\n3. Binary\n4. Random')
    ans = input('Input: ').strip()
    # print(ans)
    while ans&lt;'1' or ans&gt;'4':
        ans = input('Invalid input. Enter again: ')
    return int(ans)

question_type = question_type_ask()
amount = amount_ask()
base = base_ask()
# print(question_type, amount, base)
is_random_question = False
is_random_base = False
if question_type == 3:
    is_random_question = True
if base == 4:
    is_random_base = True

def question_generator(question_type, amount, base):
    base_list = [1, 2, 3]
    type_list = [1, 2]
    base_dict = {1:8, 2:16, 3:2}

    counter = 0
    if amount == -1:
        amount = float('inf')
    while counter &lt; amount:
        counter += 1

        if is_random_base:
            base = random.choice(base_list)
        if is_random_question:
            question_type = random.choice(type_list)
        if question_type == 1:  # Decimal &gt; Base X
            num = random.randrange(10, 100)
            base1 = 10
            base2 = base_dict[base]
            correct_ans = baseconvert.base(num, base1, base2, string=True)
        elif question_type == 2:  # Base X &gt; Decimal
            base1 = base_dict[base]
            base2 = 10
            correct_ans = str(random.randrange(10, 100))
            num = baseconvert.base(correct_ans, base2, base1, string=True)

        print(f'\n[Base {base1}] {num} to [Base {base2}] ?')
        ans = input('Answer: ').strip()
        if ans.lower() == 'f':
            break
        if ans == correct_ans.lower():
            print('You are correct!')
        else:
            print(f'Wrong! The answer is {correct_ans}')

question_generator(question_type, amount, base)
<span class="math-container">```</span>
</code></pre>
    </div>