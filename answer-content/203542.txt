<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This isn't bad for a beginner, but there is much room for improvement.</p>

<p><strong>Organization</strong></p>

<p>The app is small enough that everything can fit inside Main, but a more seasoned developer will have Main be more barebones, with calls to other methods.</p>

<p>You would also want to separate out the UI, that is the prompting for input values, from the other Logic, that is the addition and display of values.</p>

<p><strong>Variable Declaration and Naming</strong></p>

<p>The good news is that your variables have some meaning in their names.  The bad news is you begin local variables with a capital letter (known as PascalCasing), when it should be camelCasing.  Thus, <code>FirstOperand</code> should be <code>firstOperand</code>, etc.</p>

<p>Also, CodeReview prefer to see each variable declared on its own line.  What I would expect you to end up with is something like:</p>

<pre><code>decimal firstOperand;
decimal secondOperand;
decimal result;
</code></pre>

<p><strong>Checking for Valid Input</strong></p>

<p>You have no checks for valid input.  What happens if someone enters "dog" instead of 123.45?  You may want to read up on the <a href="https://docs.microsoft.com/en-us/dotnet/api/system.decimal.tryparse?view=netframework-4.7.2#System_Decimal_TryParse_System_String_System_Decimal__" rel="nofollow noreferrer">Decimal.TryParse</a> method to help out with that.</p>

<p><strong>Things not needed</strong></p>

<p>As mentioned, there is no need for <code>Result</code> and <code>result</code> since <code>result</code> is already a Decimal.</p>

<p>This line is too confusing:</p>

<p><code>Console.WriteLine("Addition Result: {0}", string.Format("{0}", result));</code></p>

<p>There is an overload for <a href="https://docs.microsoft.com/en-us/dotnet/api/system.console.writeline?view=netframework-4.7.2#System_Console_WriteLine_System_String_System_Object_System_Object_" rel="nofollow noreferrer">Console.WriteLine</a> that accepts a string format.  This would simplify the line to:</p>

<p><code>Console.WriteLine("Addition Result: {0}", result);</code></p>

<p>The link you provide is for C# 2012.  Newer versions of C# support Interpolated Strings, prefaced with a $".  So you could also do the above with:</p>

<p><code>Console.WriteLine($"Addition Result: {result}");</code></p>

<p>If you wanted to control formatting of the numbers, it could be done one of 2 ways:</p>

<p><code>Console.WriteLine($"Addition Result: {result.ToString("0.00")}");</code></p>

<p>Or</p>

<p><code>Console.WriteLine($"Addition Result: {result:0.00}");</code></p>

<p><strong>More Reading</strong></p>

<p>To learn more, I found a decent post here on CR '<a href="https://codereview.stackexchange.com/questions/113012/welcome-to-buzzway-subs">Welcome to Buzzway Subs</a>'.  I recommend reading the original code, AND then follow up by reading the good advice in the answers.</p>
    </div>