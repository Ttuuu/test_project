<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The code may be over optimized already and adding additional optimizations will only make it harder to read and maintain the code, but that said:</p>

<h2>Missing Optimizations</h2>

<ul>
<li>When printing prefer <code>'\n'</code> over <code>std::endl</code> because <code>std::endl</code> calls a system function to flush the output, <code>'\n'</code> just inserts a new line.  </li>
<li>Put the check to print outside the function <code>print_board()</code> so that the function isn't even called. This saves the time cost of pushing everything onto the stack and altering the flow of execution.  </li>
<li>Use iterators or pointers in <code>print_board()</code> and <code>make_cells()</code> rather than indexing. Compiling with <code>-O3</code> may do this for you, but direct addressing is going to be faster than indexing.  </li>
<li>Depending on the processor and whether the instruction set includes an <code>auto decrement and test</code> instruction performance may be improved by counting down in for loops rather than counting up.</li>
<li>Check the generated assembly code and know the instruction sets for the processor being used.  </li>
<li>Use the natural word size of the processor rather than specifying a word length. In the code this mean use <code>unsigned</code> rather than <code>unsigned long</code>. On most current processors you will be guaranteed a word size of at least 32 bits and probably a word size of 64 bits.  </li>
<li><p>Make member functions that don't change member values <code>const</code>.</p>

<pre><code>void print_board() const
{
    ...
}
</code></pre></li>
</ul>

<h2>Magic Numbers</h2>

<p>There are a few numeric constants that should be removed or changed to symbolic constants. Numeric constants are sometimes referred to as <a href="https://en.wikipedia.org/wiki/Magic_number_(programming)" rel="noreferrer">Magic Numbers</a> because it's not clear what the values represent. There is a discussion of this on <a href="//stackoverflow.com/q/47882">stackoverflow</a>.</p>

<p>Examples would be the value <code>4</code> in main in the comparison of <code>argc</code> and the value <code>19</code> in these two declarations:</p>

<pre><code>constexpr signed char offset_living_cipher[19] =
{
    0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0
};

constexpr signed char offset_counter_cipher[19] = 
{
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0
};
</code></pre>

<p>The number <code>19</code> in the previous two declarations is not necessary since these will be calculated by the compiler.</p>

<pre><code>constexpr signed char offset_living_cipher[] =
{
    0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0
};

constexpr signed char offset_counter_cipher[] = 
{
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0
};
</code></pre>

<p>It might also be good to comment these declarations since it's not clear what is being done here.</p>

<p>It might be better to <code>include &lt;cstdlib&gt;</code> and use the system-defined symbolic constants <a href="https://en.cppreference.com/w/cpp/utility/program/EXIT_status" rel="noreferrer"><code>EXIT_FAILURE</code> and <code>EXIT_SUCCESS</code></a> in the <code>return</code> statements in <code>main</code>.</p>

<h2>Don't Mix Memory Allocation Methodologies</h2>

<p>In the constructor there is a call to the C programming memory allocation function <code>calloc()</code>, but in the function <code>make_cells()</code> there are two calls to <code>new</code>. There are a couple of problems here, the first is that the results of the call to <code>calloc()</code> are not checked. If the array allocated by <code>calloc()</code> isn't allocated (calloc returns NULL or nullptr) the first use of <code>board</code> will cause the program to terminate, however, if <code>new</code> fails it throws an exception. In this case since there are no <code>try {} catch {}</code> blocks the program will also terminate, but if there was a <code>try {} catch {}</code> block the program would still terminate if the <code>calloc()</code> failed. It would be best to be consistent with the memory allocation, and it would probably be better to stick with <code>new</code> rather than <code>calloc()</code>. </p>

<h2>Avoid Using Namespace <code>std</code></h2>

<p>If you are coding professionally you probably should get out of the habit of using the <code>using namespace std;</code> directive. The code will more clearly define where <code>cout</code> and other identifiers are coming from (<code>std::cin</code>, <code>std::cout</code>). As you start using namespaces in your code, it is better to identify where each function comes from because there may be function name collisions from different namespaces. The object <code>cout</code> you may override within your own classes. This <a href="//stackoverflow.com/q/1452721">Stack Overflow question</a> discusses this in more detail.</p>
    </div>