<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Checking return values</h3>

<p>A mistake I see in multiple places is not checking the return values of operations.</p>

<p>Take for example the part of getting the user ID:</p>

<blockquote>
<pre><code>PreparedStatement prepStmt = conn.prepareStatement("SELECT userId FROM SiteUser WHERE name =?");
prepStmt.setString(1, username);
ResultSet rs = prepStmt.executeQuery();
rs.next();
return rs.getInt(1);
</code></pre>
</blockquote>

<p>Before getting values from a <code>ResultSet</code> instance,
you should always check the return value of <code>rs.next()</code>,
as explained in the <a href="https://docs.oracle.com/javase/tutorial/jdbc/basics/retrieving.html" rel="nofollow noreferrer">official JDBC tutorial</a>.</p>

<p>Without that check, the <code>rs.getInt(1)</code> statement will raise <code>SQLException</code> when there is no matching user.
Since you wrapped the block of code in <code>try { ... } catch (SQLException e) { ... }</code>, the exception will be handled, but this is not appropriate use of exceptions.</p>

<p>The purpose of the try-catch is not to handle the case of no matching user.
Its purpose is to handle unexpected errors during the database operation.
If you rely on this try-catch to handle the case of no matching user,
that's effectively using exceptions for flow control.
That's not the intended use, and it's also inefficient,
as it's slower than using a conditional to check the value of <code>rs.next()</code>.</p>

<p>I suggest to review the entire code, look for statements where a function returns a value but you don't use it. Some IDEs for example IntelliJ will give you a warning on statements like that.</p>

<hr>

<p>Another form of not checking the return value is in the process of registering a user. Consider this snippet from the <code>register</code> method:</p>

<blockquote>
<pre><code>insertNewUser(username, pass);
createAccountForUser(username);
</code></pre>
</blockquote>

<p>The <code>insertNewUser</code> doesn't return anything,
but probably it should.
Inserting a new user might not succeed,
and it would be incorrect to create an account if the user could not be created.</p>

<h3>Potentially unsafe <code>register</code></h3>

<p>The implementation looks prone to a race condition:
in between the moment of checking if the username exists,
and the moment of inserting the user,
another process or program may have inserted a user with the same name.
In fact,
unless you wrap these two operations within a transaction,
there's no way to safely guarantee that the insert operation will succeed.</p>

<p>I'm not sure if you have a unique index on the username column.
If you do, then you could skip checking if the user exists,
attempt to insert.
If the insert is successful, the user did not exist, it was successfully inserted, and you can continue creating the account.
If the insert fails, whether because the user already exists, or due to other database errors, you can abort further processing.</p>

<h3>Connection management</h3>

<p>Creating connections is an expensive operation.
Avoid creating new connections unnecessarily as much as possible.
It might be a good idea to manage the connection outside this class.
Or if you really want to create it in this class,
make sure that a chain of operations reuses the same connection,
rather than recreating it in each step.</p>

<h3>Ordering of operations</h3>

<p>The <code>register</code> method first checks if the specified username exists,
<em>and then</em> validates the username and the password against some built-in rules.
It would be better to perform these operations in the opposite order.
The validation logic is a cheap operation,
database lookups are expensive.</p>

<h3>Confusing member and local variables</h3>

<p>Some methods reuse the <code>conn</code> field,
others create it as a local variable.
This is confusing.</p>
    </div>