<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Getting the length of a string</h1>

<p>You split the string into characters and then you count the array's length. While this works, there's an even simpler way of doing it, using the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/length" rel="nofollow noreferrer"><code>length</code> property of a <code>String</code></a>:</p>

<pre><code>const length = msgDiv.value.length;
</code></pre>

<h1>Changing <code>getStrLen</code></h1>

<p>You can cache the DOM elements. Then you don't need to re-query them, each time the function is called:</p>

<pre><code>const strlenInput = document.getElementById('textbox1');
const strlenDisplay = document.getElementById('msg');

const getStrLen = () =&gt; {
    strlenDisplay.textContent = strlenInput.value.length;
}
</code></pre>

<p>Now this alone won't work in the <code>head</code>-element of your document, as both elements are not available yet. You can either:</p>

<ul>
<li>wait until the DOM is ready to run that script, like <code>document.addEventListener('DOMContentLoaded', function(event) { […] }</code>, or</li>
<li>place the Javascript at the end of your page instead</li>
</ul>

<p>This is explained in detail here: <a href="https://stackoverflow.com/q/6026645/1456376">$(document).ready(function(){}); vs script at the bottom of page</a>.</p>

<h1>Creating the Fibonacci sequence</h1>

<p><code>genFibonacci()</code> takes one parameter, so you pass an unused parameter, when calling the function recursively:</p>

<pre><code>genFibonacci(times - 1, false);
</code></pre>

<hr>

<p>There's a flaw in your logic: You don't reset the values each time the button is clicked. If the user's input is <code>1</code> and they hit the generate button 5 times, the result is not <code>0</code> but:</p>

<pre><code> 0 1 1 2 3
</code></pre>

<hr>

<p>With this in mind, let's try to change your algorithm, that it won't rely on external variables. We also don't necessarily need recursion here:</p>

<pre><code>const getFibonacciValues = (n) =&gt; {
    const values = [];

    if (n &gt;= 1) {
        values.push(0);
    }

    if (n &gt;= 2) {
        values.push(1);
    }

    for (let i = 2; i &lt; n; ++i) {
        values.push(values[i - 2] + values[i -1]);
    }

    return values;
}
</code></pre>

<p>Now we have a function, which purpose is solely to create the values. It doesn't have a clue, how you're going to output them. <code>outFib()</code> is doing this for us now:</p>

<pre><code>const outFib = () =&gt; {
    const n = fibInput.value;
    const values = getFibonacciValues(n);
    fibDisplay.textContent = values.join(', ');
}
</code></pre>

<p>Now, this still has flaws, so we add a little bit of validation at least:</p>

<ul>
<li>use <code>parseInt</code> to parse the value</li>
<li>check whether the input is at least <code>1</code></li>
<li>check whether the input is a number</li>
</ul>

<p>The final result could look like this:</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const fibButton = document.getElementById('fibClick');
const fibInput = document.getElementById('fibText');
const fibDisplay = document.getElementById('fibseq');

const getFibonacciValues = (n) =&gt; {
    const values = [];

    if (n &gt;= 1) {
        values.push(0);
    }
    
    if (n &gt;= 2) {
        values.push(1);
    }
    
    for (let i = 2; i &lt; n; ++i) {
        values.push(values[i - 2] + values[i -1]);
    }

    return values;
};

const outFib = () =&gt; {
    const n = parseInt(fibInput.value);

    if (n &lt; 1 || isNaN(n)) {
        fibDisplay.textContent = 'Please insert a number greater than 0';
        return;
    }
    
    const values = getFibonacciValues(n);
    fibDisplay.textContent = values.join(', ');
};

fibClick.addEventListener('click', outFib);</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;input type="text" id="fibText"&gt;
&lt;button id="fibClick"&gt;Generate Fibonacci Sequence&lt;/button&gt;
&lt;div id="fibseq"&gt;&lt;/div&gt;</code></pre>
</div>
</div>


<h1>Further improvements</h1>

<p>This will fail for large inputs – try <code>2000</code> for example. You'll get a lot of <code>Infinity</code>.</p>

<p>You can take a look into <a href="https://mikemcl.github.io/bignumber.js/" rel="nofollow noreferrer">bigNumber.js</a> or you can set an upper limit, like <code>if (n &gt; 1000) { fibDisplay.textContent = 'Too large'; return; }</code> or you could store all values for your maximum <code>n</code>.</p>

<hr>

<p>Calculating all numbers over and over again is some overhead you could avoid. You could cache already calculated values, and only add new values if <code>n &gt; values.length</code>. Alternatively you can store all numbers beforehand, which is an increase in memory usage, but your runtime becomes incredibly fast, as all you have left is:</p>

<pre><code>const values = [0, 1, 1, 2, 3, …];
const output = values.splice(0, n);
</code></pre>
    </div>