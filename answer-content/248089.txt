<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I would suggest moving the actual export(s) into their own class.  We can create an interface for exports.  Something along the lines of</p>
<pre><code>public interface IExport&lt;T&gt;
{
    Task SaveAsync(string fileName, IEnumerable&lt;T&gt; items, IProgress&lt;int&gt; progress = null);
    string ExportType { get; }
}
</code></pre>
<p>Then each export type can implement this interface.</p>
<pre><code>public class ExportItemsToText : IExport&lt;Item&gt;
{
    public Task SaveAsync(string fileName, IEnumerable&lt;Item&gt; items, IProgress&lt;int&gt; progress = null)
    {
        throw new NotImplementedException();
    }

    public string ExportType =&gt; "txt";
}
</code></pre>
<p>Then in your constructor of ExportWindow</p>
<pre><code>public ExportWindow(IEnumerable&lt;IExport&lt;Item&gt;&gt; exports)
{
    // if using DI otherwise could just fill in dictionary here
    ExportStrategy = exports.ToDictionary(x =&gt; x.ExportType, x =&gt; x);
}
</code></pre>
<p>Instead of a switch statement you can now just look up the key in the dictionary to find what export should be ran and if not found would be the same as your default case.</p>
<pre><code>IExport&lt;Item&gt; exporter;
if (ExportStrategy.TryGetValue(ext.ToLower(), out exporter))
{
    await exporter.SaveAsync(exportDialog.FileName, items, new Progress&lt;int&gt;(updateProgress))
}
else
{
    throw new Exception("Specified export format not supported.");
}
</code></pre>
<p>Now in the future if adding support for more types you just implement the interface and update your DI container.  Or if not using DI then would need to add it to the constructor of your ExportWindow.</p>
<p><strong>I don't think this is a great idea</strong> but If you really don't want to create a class per export, which I think you should, you could make the dictionary <code>IDictionary&lt;string, Action&lt;string&gt;&gt;</code> then just put your methods in there and when adding a new type create the method and update the dictionary.</p>
    </div>