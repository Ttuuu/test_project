<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>OK, let's do the ultimate refactoring to classes. Beware that there won't be much left of the original code, but your ideas are of course still in there.</p>

<p>Start with <code>package-info.java</code> (I called the package <code>pressing</code>) as you can see:</p>

<pre><code>/**
 * This is the package for FiveThreeOne, an application to calculate training exercises given your maximum
 * weight for a specific exercise.
 */
package com.stackexchange.codereview.pressing;
</code></pre>

<p>The other files that I show are in that package, under <code>&lt;classname&gt;.java</code>.</p>

<p>Here is what is left of your main <code>Five31</code> class:</p>

<pre><code>import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.PrintStream;

public class FiveThreeOne {

    /**
     * Performs the FiveThreeOne operation for a specific person.
     * 
     * @param args no arguments required
     * 
     * @throws FileNotFoundException 
     */
    public static void main(String[] args) throws FileNotFoundException {
        var calc = new TrainingCalculator();

        var console = new ConsoleUI(System.in, System.out, calc);
        console.printWelcome();

        var name = console.requestName();
        var gymnast = new Gymnast(name);

        for (Exercise exercise : Exercise.values()) {
            int max = console.requestMax(exercise);
            gymnast.setMax(exercise, max);
        }

        // DEBUG print out exercisee using Exercisee.toString()
        System.out.println();
        System.out.println(gymnast);
        // and some training maximum stuff
        System.out.printf("Max training for squat: %d%n", calc.calculateTrainingMaximum(gymnast.getMax(Exercise.SQUAT).getAsInt()));

        System.out.println();
        System.out.printf("Results are being written to file %s.csv...%n", name);
        System.out.println();

        // want it on the screen instead? Pass System.out to TrainingCreator as first argument!
        try (PrintStream bw = new PrintStream(new FileOutputStream(name + ".csv"))) {
            var creator = new TrainingCreator(bw, calc);
            creator.createTraining(gymnast);
        }

        console.printGoodbye();
    }

}
</code></pre>

<p>Then there is the <code>Exercise</code> enum:</p>

<pre><code>public enum Exercise {
    SQUAT, BENCH, DEADLIFT;

    @Override
    public String toString() {
        return this.name().toLowerCase();
    }
}
</code></pre>

<p>the <code>Gymnast</code> class, which replaces the <code>exercisee</code> class, as I generally keep to words defined in the dictionary...</p>

<pre><code>import java.util.Map;
import java.util.OptionalInt;
import java.util.Set;
import java.util.TreeMap;

public final class Gymnast {
    // no setter for name to avoid confusion, use a static ID otherwise
    private String name;

    // the tree-based map keeps the keys (i.e. exercises) in order
    private Map&lt;Exercise, Integer&gt; maxForExercises = new TreeMap&lt;&gt;();

    public Gymnast(String name) {
        // guard to avoid invalid state
        if (name == null) {
            throw new NullPointerException("Name is null");
        }

        this.name = name;
    }

    public String getName() {
        return name;
    }

    public void setMax(Exercise exercise, int max) {
        maxForExercises.put(exercise, max);
    }

    public Set&lt;Exercise&gt; getExercises() {
        return maxForExercises.keySet();
    }

    public OptionalInt getMax(Exercise exercise) {
        return OptionalInt.of(maxForExercises.get(exercise));
    }

    @Override
    public boolean equals(Object obj) {
        if (!(obj instanceof Gymnast)) {
            return false;
        }

        final Gymnast that = (Gymnast) obj;
        return name.equalsIgnoreCase(that.name);
    }

    @Override
    public int hashCode() {
        return name.hashCode();
    }

    @Override
    public String toString() {
        return String.format("%s %s", name, maxForExercises);
    }
}
</code></pre>

<p>The all important <code>TrainingCalculator</code> contains your calculations:</p>

<pre><code>public final class TrainingCalculator {
    private static final int MINIMUM_WEIGHT = 45;
    private static final double MAX_TO_TRAINING_MAX_COEFFICIENT = 0.9;
    private static final int ADJUSTMENT_TO_TRAINING_MAXIMUM = 5;
    private static double WEEKLY_EFFORT[][] = {{ .65, .75, .85 }, { .70, .80, .90 }, { .75, .85, .95 },
            { .40, .50, .60 } };

    public TrainingCalculator() {
        // actually auto-generated by Java, but I prefer it being there
    }

    /**
     * This automatically adjusts training maximums by 5 per week which is
     * conservative, but fair.
     * This will stop people from jumping into heavier
     * workloads for no reason and potentially injuring themselves.
     * 
     * @param trainingMax an array of training maximums to be adjusted
     */
    public void adjustTrainingMaximum(int[] trainingMax) {
        for (int i = 0; i &lt; trainingMax.length; i++) {
            trainingMax[i] = trainingMax[i] + ADJUSTMENT_TO_TRAINING_MAXIMUM;
        }
    }

    public int calculateTrainingForSet(int week, int workoutSet, int maxTraining) {
        return roundTo5(WEEKLY_EFFORT[week - 1][workoutSet] * maxTraining);
    }

    public int calculateTrainingMaximum(int max) {
        return roundTo5(MAX_TO_TRAINING_MAX_COEFFICIENT * max);
    }

    /**
     * This method is necessary because there is no such thing as a 2.3 lb weight at the
     * gym;
     * All weight numbers are integers, at least in my gym.
     * 
     * @param weight the weight to round
     * @return the weight rounded to the closest multiple of 5 as integer
     */
    public int roundTo5(double weight) {
        return 5 * (int) (Math.round((double) weight / 5));
    }

    public boolean hasMinimumWeight(int max) {
        return max &gt;= MINIMUM_WEIGHT;
    }
}
</code></pre>

<p>Then come the I/O classes, starting with the UI class, now split from the calculation and output functionality:</p>

<pre><code>import java.io.InputStream;
import java.io.PrintStream;
import java.util.Scanner;

public class ConsoleUI {

    private Scanner scanner;
    private PrintStream out;
    private TrainingCalculator calc;

    public ConsoleUI(InputStream in, PrintStream out, TrainingCalculator calc) {
        this.out = out;
        this.scanner = new Scanner(in);
        this.calc = calc;
    }

    public void printWelcome() {
        out.println("*******************************************");
        out.println("*                                         *");
        out.println("*     Welcome to the 5/3/1 calculator     *");
        out.println("*                                         *");
        out.println("*******************************************");
        out.println();
    }

    public String requestName() {
        out.println("What's your name?");
        var name = scanner.next();
        out.printf("Nice to meet you, %s!%n", name);
        out.println();
        return name;
    }

    public int requestMax(Exercise exercise) {
        int max;
        while (true) {
            out.printf("What's your max for %s?%n", exercise);
            int inputMaxSquat = scanner.nextInt();
            max = calc.roundTo5(inputMaxSquat);
            if (calc.hasMinimumWeight(max)) {
                break;
            }

            out.println("Input a value greater than 45 (values in lbs) - please try again.");
        }
        out.printf("Your max for %s is (rounded to multiples of five): %d%n", exercise, max);
        out.println();
        return max;
    }

    public void printGoodbye() {
        // we need symmetry, so box the goodbye!
        out.println("*******************************************");
        out.println("*                                         *");
        out.println("* Thanks for using my program!  - Brandon *");
        out.println("*                                         *");
        out.println("*******************************************");
    }

}
</code></pre>

<p>and finally, the <code>TrainingCreator</code> creates your CSV output:</p>

<pre><code>import java.io.PrintStream;
import java.time.Month;
import java.time.format.TextStyle;
import java.util.Locale;

public class TrainingCreator {
    private static int WEEK_COUNT = 4;
    private static final int WORKOUT_SETS = 3;

    private PrintStream out;
    private TrainingCalculator calc;

    public TrainingCreator(PrintStream out, TrainingCalculator calc) {
        this.out = out;
        this.calc = calc;
    }

    public void createTraining(Gymnast gymnast) {
        int[] trainingMax = new int[gymnast.getExercises().size()];
        int exerciseIndex = 0;
        for (Exercise exercise : gymnast.getExercises()) {
            trainingMax[exerciseIndex++] = calc.calculateTrainingMaximum(gymnast.getMax(exercise).getAsInt());
        }

        // generates data for an entire year: days + weeks + months + sets
        for (int month = 1; month &lt;= 12; month++) {
            writeHeaderForMonth(month, 3);
            for (int week = 1; week &lt;= WEEK_COUNT; week++) {
                writeWeek(gymnast, week, trainingMax);
            }
            out.println();

            calc.adjustTrainingMaximum(trainingMax);
        }
    }

    private void writeHeaderForMonth(int month, int sets) {
        String monthStr = Month.of(month).getDisplayName(TextStyle.FULL_STANDALONE, Locale.US);
        out.print(monthStr);
        out.print(",");
        out.print("Exercise");
        for (int set = 0; set &lt; sets; set++) {
            out.printf(", Set %d", set);
        }
        out.println();
    }

    private void writeWeek(Gymnast gymnast, int week, int[] trainingMax) {
        out.printf("Week %d", week);
        for (Exercise exercise : gymnast.getExercises() ) {
            out.print(",");
            writeExersize(week, exercise, trainingMax);
        }
    }

    private void writeExersize(int week, Exercise exercise, int[] trainingMax) {
        out.print(capitalize(exercise.toString()));
        out.print(",");
        // Generates weights for the exercises
        int maxTraining = trainingMax[exercise.ordinal()];
        for (int workoutSet = 0; workoutSet &lt; WORKOUT_SETS; workoutSet++) {
            int training = calc.calculateTrainingForSet(week, workoutSet, maxTraining);
            out.print(Integer.toString(training));
            if (workoutSet &lt; WORKOUT_SETS -1) {
                out.print(",");
            } else {
                out.println();
            }
        }
    }

    private String capitalize(String name) {
        return name.substring(0, 1).toUpperCase() + name.substring(1);
    }
}
</code></pre>

<p>Now if you run this all then you should get about what you created yourself - the CSV output should not differ. However, I do print less to screen. The problem is that putting <code>System.out.println</code> statement all through the code gets messy fast. Rather than doing that you can copy <code>TrainingCreator</code> to <code>TrainingCreatorForConsole</code> or something and then make the necessary changes. Then you can just run both...</p>

<p>Adding any exercises or changing the calculations should be uber-simple with this class design. Actually, one exercise is missing: try and add it to the enum, and you'll understand the strength of a well thought out class design.</p>

<p>Personally, I would try and get the <code>TrainingCreator</code> to output a <code>TrainingTable</code> representing the data now in the CSV. Then you can convert that data to both the CSV file and an onscreen text. However, that is certainly still a lot of work, and figuring out the design of the table is pretty tough (but doable). Probably not entirely worth it for this standalone application.</p>
    </div>