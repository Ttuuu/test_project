<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>VisualMelon already said everything I wanted to say and more, but at his request, here are the variants I tested. Using list capacity is about 20-50% faster (less gain for higher numbers of rows), while using arrays is consistently more than 80% faster. Left-value caching is about 10-20% faster, and making use of the reflective nature of rows (as mentioned by dfhwze) yields another 10% improvement.</p>

<p>It's also possible to calculate the contents of a row without first calculating all previous rows. It's roughly twice as slow per row because it involves multiplication and division instead of addition, but it's a lot more efficient if you only need a specific row.</p>

<pre><code>// Original approach, modified to cache the previous row's left value:
public static IList&lt;IList&lt;int&gt;&gt; Generate_Improved(int numRows)
{
    IList&lt;IList&lt;int&gt;&gt; result = new List&lt;IList&lt;int&gt;&gt;();
    if (numRows == 0)
    {
        return result;
    }
    List&lt;int&gt; row = new List&lt;int&gt;();
    row.Add(1);
    result.Add(row);
    if (numRows == 1)
    {
        return result;
    }

    for (int i = 1; i &lt; numRows; i++)
    {
        var prevRow = result[i - 1];
        row = new List&lt;int&gt;();
        var left = 0;
        for (int j = 0; j &lt; prevRow.Count; j++)
        {
            int right = prevRow[j];
            row.Add(left + right);
            left = right;
        }
        row.Add(1);
        result.Add(row);
    }
    return result;
}

// Original approach, modified to use list capacities:
public static IList&lt;IList&lt;int&gt;&gt; Generate_Capacity(int numRows)
{
    IList&lt;IList&lt;int&gt;&gt; result = new List&lt;IList&lt;int&gt;&gt;(numRows);
    if (numRows == 0)
    {
        return result;
    }
    List&lt;int&gt; row = new List&lt;int&gt;(1);
    row.Add(1);
    result.Add(row);
    if (numRows == 1)
    {
        return result;
    }

    for (int i = 1; i &lt; numRows; i++)
    {
        var prevRow = result[i - 1];
        row = new List&lt;int&gt;(i + 1);
        row.Add(1);
        for (int j = 0; j &lt; prevRow.Count - 1; j++)
        {
            row.Add(prevRow[j] + prevRow[j + 1]);
        }
        row.Add(1);
        result.Add(row);
    }
    return result;
}

// Original approach, modified to use list capacities and caching the previous row's left value:
public static IList&lt;IList&lt;int&gt;&gt; Generate_Capacity_Improved(int numRows)
{
    IList&lt;IList&lt;int&gt;&gt; result = new List&lt;IList&lt;int&gt;&gt;(numRows);
    if (numRows == 0)
    {
        return result;
    }
    List&lt;int&gt; row = new List&lt;int&gt;(1);
    row.Add(1);
    result.Add(row);
    if (numRows == 1)
    {
        return result;
    }

    for (int i = 1; i &lt; numRows; i++)
    {
        var prevRow = result[i - 1];
        row = new List&lt;int&gt;(i + 1);
        var left = 0;
        for (int j = 0; j &lt; prevRow.Count; j++)
        {
            int right = prevRow[j];
            row.Add(left + right);
            left = right;
        }
        row.Add(1);
        result.Add(row);
    }
    return result;
}

// Using arrays instead of lists:
public static IList&lt;IList&lt;int&gt;&gt; Generate_Array(int numRows)
{
    var result = new int[numRows][];
    if (numRows == 0)
        return result;

    result[0] = new int[] { 1 };
    if (numRows == 1)
        return result;

    for (int i = 1; i &lt; numRows; i++)
    {
        var prevRow = result[i - 1];
        var row = new int[i + 1];
        row[0] = 1;
        for (int j = 0; j &lt; i - 1; j++)
            row[j + 1] = prevRow[j] + prevRow[j + 1];
        row[i] = 1;
        result[i] = row;
    }
    return result;
}

// Using arrays instead of lists, and caching the previous row's left value:
public static IList&lt;IList&lt;int&gt;&gt; Generate_Array_Improved(int numRows)
{
    var result = new int[numRows][];
    if (numRows == 0)
        return result;

    result[0] = new int[] { 1 };
    if (numRows == 1)
        return result;

    for (int i = 1; i &lt; numRows; i++)
    {
        var prevRow = result[i - 1];
        var row = new int[i + 1];

        var left = 0;
        for (int j = 0; j &lt; i; j++)
        {
            int right = prevRow[j];
            row[j] = left + right;
            left = right;
        }
        row[i] = 1;
        result[i] = row;
    }
    return result;
}

// Using arrays instead of lists, caching the previous row's left value, and using row reflection:
public static IList&lt;IList&lt;int&gt;&gt; Generate_Array_Improved_Reflective(int numRows)
{
    var result = new int[numRows][];
    if (numRows == 0)
        return result;

    result[0] = new int[] { 1 };
    if (numRows == 1)
        return result;

    for (int i = 1; i &lt; numRows; i++)
    {
        var prevRow = result[i - 1];
        var row = new int[i + 1];

        var left = 0;
        var mid = (i / 2) + 1;
        for (int j = 0; j &lt; mid; j++)
        {
            int right = prevRow[j];
            var sum = left + right;
            row[j] = sum;
            row[i - j] = sum;
            left = right;
        }
        result[i] = row;
    }
    return result;
}

// Using arrays, calculating each row individually:
public static IList&lt;IList&lt;int&gt;&gt; Generate_PerRow(int numRows)
{
    var result = new int[numRows][];
    for (int i = 0; i &lt; numRows; i++)
    {
        var row = new int[i + 1];
        row[0] = 1;
        for (int j = 0; j &lt; i; j++)
            row[j + 1] = row[j] * (i - j) / (j + 1);
        result[i] = row;
    }
    return result;
}

// Using arrays, calculating each row individually, using row reflection:
public static IList&lt;IList&lt;int&gt;&gt; Generate_PerRow_Reflective(int numRows)
{
    var result = new int[numRows][];
    for (int i = 0; i &lt; numRows; i++)
    {
        var row = new int[i + 1];
        row[0] = 1;
        row[i] = 1;
        var mid = i / 2;
        for (int j = 0; j &lt; mid; j++)
        {
            var value = row[j] * (i - j) / (j + 1);
            row[j + 1] = value;
            row[i - j - 1] = value;
        }
        result[i] = row;
    }
    return result;
}
</code></pre>
    </div>