<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>the most simple algorithm would be to calculate the start and end indices</p>

<pre><code>    // set start index relative to selected  
    int start = selectedPage - (offset / 2);
    // adjust for first pages   
    start = Math.max(start, 1);
    // set end index relative to start    
    int end = start + offset - 1;
    // adjust start and end for last pages     
    if (end &gt; totalPages) {
        end = totalPages;
        start = end - offset + 1;
    }

    return IntStream.rangeClosed(start, end).boxed()
        .collect(Collectors.toList());
</code></pre>

<p>as for code review: </p>

<ol>
<li>method signatures correctly return interface <code>List</code>. however, there are two places where you initialize the list with a concrete implementation. now imagine you would decide that <code>ArrayList</code> is better suited. you need to remember to modify two places. </li>
<li>while on the subject: don't use <code>LinkedList</code>. it has an extremely narrow use case where it is preferable over <code>ArrayList</code>. this is not one of them. Especially if you initialize the <code>ArrayList</code> with initial size.</li>
<li>use Java 8 collection stream (if you've learned it) it is more efficient and concise than for loop </li>
<li>The code does not use java standard indentation. code inside if block should be indented inward.</li>
</ol>
    </div>