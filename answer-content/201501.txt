<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Minor technical issues</h3>

<p>There are a couple of minor technical issues with the solution:</p>

<ul>
<li><p>When looping over an iterable, if you need both the index and the value of the current item, it's good to use <code>enumerate</code>, so that you cannot accidentally forget to increment the loop counter, and syntax is nicely compact yet readable.</p></li>
<li><p><code>curr_length</code> is modified but never used: should be removed.</p></li>
<li><p>The code is most readable when there is one statement per line. So I recommend to split multi-assignments like <code>start, end, curr_length, max_length = 0, 0, 0, 0</code>. Simple multi-assignments with 2 terms are usually ok though, for example <code>left, right = ...</code> when implementing a binary search</p></li>
<li><p>The parentheses are unnecessary around the condition in <code>while end &lt; len(s):</code></p></li>
<li><p>It's unfortunate use names that are types in many languages, such as <code>dict</code> and <code>char</code></p></li>
<li><p>PEP8 recommends to indent with 4 spaces. And it strongly recommends to use the same indent width consistently. (The posted code indents the class body by 4 spaces, but everything else with 2.)</p></li>
</ul>

<h3>Alternative implementation</h3>

<p>Putting the above tips together, and throwing in some <a href="https://docs.python.org/3/library/doctest.html" rel="nofollow noreferrer">doctests</a>:</p>

<pre><code>class Solution(object):
    def lengthOfLongestSubstring(self, s):
        """
        &gt;&gt;&gt; Solution().lengthOfLongestSubstring("bpfbhmipx")
        7

        &gt;&gt;&gt; Solution().lengthOfLongestSubstring("abcabcbb")
        3

        &gt;&gt;&gt; Solution().lengthOfLongestSubstring("bbbbb")
        1

        &gt;&gt;&gt; Solution().lengthOfLongestSubstring("pwwkew")
        3

        &gt;&gt;&gt; Solution().lengthOfLongestSubstring("tmmzuxt")
        5

        &gt;&gt;&gt; Solution().lengthOfLongestSubstring("a")
        1

        &gt;&gt;&gt; Solution().lengthOfLongestSubstring("")
        0

        &gt;&gt;&gt; Solution().lengthOfLongestSubstring("abc")
        3

        """

        longest = 0
        start = -1
        last = {}

        for i, c in enumerate(s):
            if c in last:
                start = max(start, last[c])
            longest = max(longest, i - start)
            last[c] = i

        return longest
</code></pre>
    </div>