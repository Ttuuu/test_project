<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I find this to be a sweet demo, but I don't like the traps in it for the unwary. Like you mention, there is little validation of parameter counts. There is also a chance that the same location can be replaced multiple times, e.g. with a call to <code>ext::format("%1", "%2", "%3, "%4", "hi!")</code> resulting in <code>"hi!"</code>. Perhaps you might consider that a bonus.</p>

<p>What I find most surprising in the code is this:</p>

<blockquote>
<pre><code>std::string replacement_string{(std::ostringstream{} &lt;&lt; val).str()};
</code></pre>
</blockquote>

<p>I would probably have tended towards <code>auto replacement_string{std::to_string(val)};</code> or, more likely, just embedded that in the call to <code>regex_replace</code>. Do you do this for compatibility with existing code that provides an overload for <code>operator&lt;&lt;</code> but not <code>to_string</code>?</p>

<p>Finally, I'm torn about the use of <code>regex</code>. It seems like a pretty big hammer without a lot of need, here, however it does keep the code short and sweet, and implicitly avoids an infinite loop that a flawed implementation might have with <code>ext::format("%1", "%1")</code>.</p>

<p>Reviewing the tests, I find the <code>Does_Not_Alter_Format_String</code> test to be surprising as well. I would have thought the <code>const</code> qualifier would indicate this well enough.</p>
    </div>