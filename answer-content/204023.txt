<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You don’t need to specify types on the right hand side of a generic declaration as of Java 7.</p>

<p>It’s preferable to declare types as interfaces (<code>List</code>) rather than implementations (<code>ArrayList</code>) where possible.</p>

<p><code>al</code> and <code>all</code> are meaningless, which makes the code a lot harder to read. Variable names should describe what they contain. Most of your variable names could be better.</p>

<p>You declare <code>x = arr[i]</code>, and then use <code>arr[i]</code> on the very next line.</p>

<p>Either use <code>containsKey</code> instead of <code>get() == null</code> or make the <code>get</code> call once and then check the stored value to see if it’s null.</p>

<p>It’s typically a bad idea to mix arrays and generics, but given the target return value, you’d do much better with a List. You can then turn that into an <code>int[][]</code> with <code>all.toArray()</code>.</p>

<p><code>size()</code> and <code>length</code> take approximately zero time to compute. Replacing them with single-letter variables saves you virtually nothing and makes the code much harder to read.</p>

<p>Don’t declare <code>all</code> before you need to. In general, declare variables as narrowly as possible, and as close to where they’re used as possible.</p>

<p>Both <code>for</code> loops could be enhanced <code>for</code> loops. </p>

<p>If you made all the changes I suggest, your code might look something like:</p>

<pre><code>static int[][] findPairsWithGivenDifference(final int[] values, final int difference) {

    final Map&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;();
    for (final int value : values) {
        map.put(value - difference, value);
    }

    final List&lt;int[]&gt; pairs = new ArrayList&lt;&gt;();
    for (final int value : values) {
        final Integer match = map.get(value);
        if (match != null) {
            pairs.add(new int[] { value, match });
        }
    }

    return pairs.toArray(new int[pairs.size()][2]);
}
</code></pre>
    </div>