<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Python tuples already sort the way you want to, so you can replace your class with just a thin wrapper around the built-in <code>tuple</code> class. You only need a constructor that can parse a string of the form <code>"3.1.0.2"</code> into a tuple of ints and a nice representation as a version string:</p>

<pre><code>class VersionTuple(tuple):
    def __new__(cls, s):
        return super().__new__(cls, map(int, s.split(".")))

    def __repr__(self):
        return ".".join(map(str, self))
</code></pre>

<p>Note that this does not restrict the number of arguments to include a major, minor, patch and build version. If you want that, you can instead inherit from a <a href="https://docs.python.org/3/library/collections.html#collections.namedtuple" rel="nofollow noreferrer"><code>collections.namedtuple</code></a>:</p>

<pre><code>from collections import namedtuple

class VersionTuple(namedtuple("VersionTuple", "major minor patch build")):
    def __new__(cls, s):
        return super().__new__(cls, *map(int, s.split(".")))

    def __repr__(self):
        return ".".join(map(str, self))
</code></pre>

<hr>

<p>Both work the same way with respect to comparisons (you even get the equality operator for free):</p>

<pre><code>VersionTuple("3.1.0.0") &lt; VersionTuple("3.1.2.0")
# True
VersionTuple("1.0.0.0") &gt; VersionTuple("3.1.2.0")
# False
VersionTuple("1.0.0.0") == VersionTuple("1.0.0.0")
# True
</code></pre>

<p>And printing:</p>

<pre><code>print(VersionTuple("3.6.3.0"))
# 3.6.3.0
</code></pre>

<p>While the latter allows you to also access the individual parts:</p>

<pre><code>VersionTuple("3.6.3.0").patch
# 3
</code></pre>

<p>It also raises a <code>TypeError</code> if the version string does not contain four parts:</p>

<pre><code>VersionTuple("3.6.3")
# ...
# TypeError: __new__() missing 1 required positional argument: 'build'
</code></pre>
    </div>