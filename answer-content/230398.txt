<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Dunder Methods</h1>

<p>I'd drop the double-underscores in most of your methods. These conventions are usually reserved for magic methods, of which are things like <code>__dict__</code>, <code>__str__</code>, <code>__iadd__</code>, etc. Otherwise, underscores are used to separate names in instances of inheritance, which is not the case here. In your case, it impairs readability and makes other developers have to guess "is this <em>really</em> a magic method?" </p>

<h1>Naming Variables</h1>

<p>Variable names should be separated by underscores, such as <code>lang_dict</code> instead of <code>langDict</code>.</p>

<h1>Getting keys from <code>dict</code></h1>

<p>Iterating over a <code>dict</code> returns the keys, no need to manually call <code>dict.keys()</code> when you can do <code>list(some_dict)</code> or <code>', '.join(some_dict)</code>. Also, <code>dict.keys</code> is like a <code>set</code>, so it is not able to be sliced and the call <code>some_dict.keys()[:]</code> should raise a <code>TypeError</code></p>

<h1>Building Your Language Dictionaries</h1>

<p><code>Enum</code> is built on <code>OrderedDict</code>. The beautiful part? It's ordered based on the item insertion in the enum:</p>

<pre class="lang-py prettyprint-override"><code>from enum import Enum

class CardColor(Enum):
    Pikes = 4  
    Hearts = 3  
    Tiles = 2  
    Clovers = 1 

', '.join(CardColor.__members__)
# Pikes, Hearts, Tiles, Clovers
</code></pre>

<p>With this in mind, you don't have to keep repeating your call to the respective field names, use the <code>dict</code> constructor with <code>zip</code> against your translation. Also, I'd call this enum <code>CardSuit</code>, since <code>CardColor</code> would imply <code>Red</code> or <code>Black</code>:</p>

<pre class="lang-py prettyprint-override"><code>from enum import Enum

class CardSuit(Enum):

    Pikes = 4  
    Hearts = 3  
    Tiles = 2  
    Clovers = 1 

    __lang_dict__ = {
        'de': dict(zip(CardSuit.__members__, ('Pik', 'Herz', 'Karo', 'Kreuz'))),
        'en': dict(zip(CardSuit.__members__, ('Pikes', 'Hearts', 'Tiles', 'Clovers')))
    }
</code></pre>

<p>Much less typing.</p>

<h1>Default <code>lang</code></h1>

<p>I'd set a default lang, as you have already, on the instance as a keyword arg, and when <code>set_lang</code> is called, do a check against the keys in the dictionary and <code>raise ValueError</code> otherwise:</p>

<pre class="lang-py prettyprint-override"><code>class Card:
    lang_dict = { "de" : "{1} {0}", "en" : "{0} of {1}"} 

    def __init__(self, card_color, card_value, lang='de'):
        self.c = card_color
        self.v = card_value 
        # We can set this here, but this will be overruled when setting
        # the language at the deck level, this is done *after*
        # c and v are set on self
        self.lang = lang if lang == 'de' else self.set_lang(lang)


    def __str__(self):
        '''returns the cards DisplayName'''
        # You shouldn't have to use a .get here, since on set_lang
        # it already checks for a valid key
        return self.lang_dict[self.lang].format(self.v, self.c)


    def set_lang(self, lang):
        lang = lang.lower().strip()
        if lang not in self.lang_dict:
            raise ValueError(
              f"Tried to set invalid lang in Card, expected one of "
              f"{', '.join(self.lang_dict)}, got {lang}"
            )
        self.lang = lang
        self.c.set_lang(lang)
        self.v.set_lang(lang)
</code></pre>

<p>And on the <code>Enum</code> types, since you need the dunder var names to avoid them being options. Note the refactor on <code>__str__</code> here:</p>

<pre class="lang-py prettyprint-override"><code>class CardSuit(Enum):

    Pikes = 4  
    Hearts = 3  
    Tiles = 2  
    Clovers = 1 

    __lang_dict__ = {
        'de': dict(zip(CardSuit.__members__, ('Pik', 'Herz', 'Karo', 'Kreuz'))),
        'en': dict(zip(CardSuit.__members__, ('Pikes', 'Hearts', 'Tiles', 'Clovers')))
    }
    __lang__ = 'de'

    def get_langs(self):
        # will get all the keys for you, though I'm not sure you need this?
        return list(self.__lang_dict__)

    def set_lang(self, lang):
        if lang not in self.__lang_dict__:
            raise ValueError(
              f"Tried to set invalid lang in CardSuit, expected one of "
              f"{', '.join(self.__lang_dict__)}, got {lang}"
            )
        self.__lang__ = lang

    def __str__(self):
        # re-factoring this for clarity
        # I think f-strings are nice here, however,
        # you might decide to keep the .format convention
        # since you use it in Card, which works well
        return f'{self.__lang_dict__[self.__lang__].value}'
</code></pre>

<p>Now, looking at the deck:</p>

<pre class="lang-py prettyprint-override"><code>
class DeckOfCards:
    lang_dict = { "de" : "Kartenspiel", "en" : "Deck of Cards"}

    # set a default here of 'de'
    def __init__(self, lang='de'):
        self.lang = lang.lower().strip()
        if self.lang not in self.lang_dict:
            raise ValueError(f'Got invalid lang, expected one of {", ".join(self.lang_dict)}, got {self.lang}')

        # note we are dropping all underscores here
        self.deck = self.new_deck()
        self.shuffle()


    def set_lang(self, lang):
        """
        Set a language at the deck level that propogates through the child
        classes.
        """
        # grab a default to roll back with
        # in case a non-supported language is chosen
        _lang = self.lang

        for i, card in enumerate(self.deck):
            try:
                card.set_lang(lang)
            except ValueError as e:
                print(e)
                break
        else:
            self.lang = lang
            return

        # set back to default by traversing backward through
        # indices, then you can set mismatching dictionaries
        # and it will still only handle where the languages
        # line up
        while i &gt;= 0:
            self.deck[i].set_lang(_lang)
            i -= 1

</code></pre>

<h1>Refactoring <code>__str__</code></h1>

<p>Now, the one area that I think will clean up <code>__str__</code> on the <code>DeckOfCards</code> class is using <code>zip</code> to pair up slice-points:</p>

<pre class="lang-py prettyprint-override"><code>
    def __str__(self):
        # I've pulled these out of the comprehension for readability
        slice_start = range(0, len(self.deck), 6)    # 0, 6, 12, ..., 48
        slice_end = range(6, len(self.deck) + 6, 6)  # 6, 12, ..., 54

        # You could do this in fewer lines, but I think the explicitness
        # is better for the example. Again, I like the f-string here,
        # but you can decide if you want to retain str.format
        dict_str = f'{self.lang_dict[self.lang]}:\n\t'
        a = '\n\t'.join(
                  ', '.join(map(str, self.deck[i:j])) for i, j
                  in zip(slice_start, slice_end))

       return dict_str + a
</code></pre>

<p>Again, the point here being that you shouldn't be leaning on <code>.get</code> inside the method because it is expected that the language was checked ahead of time. </p>

<h1><code>DeckOfCards.deck</code></h1>

<p>The <code>NewDeck</code> should be re-named and whitespace should be inserted between variables/operators. Also, you can have the <code>self.lang</code> applied to each <code>Card</code> so you can select the language on creation of the <code>Deck</code>, rather than only using a default and having to switch it every time:</p>

<pre class="lang-py prettyprint-override"><code>    # functions should be snake-case
    def new_deck(self):
        # include whitespaces between variables in Card declaration
        return [Card(c, v, self.lang) for c in CardColor for v in CardFace]
</code></pre>

<h1><code>Deck.Cards</code>?</h1>

<p>You don't need this method, you already have a deck of cards. Just do a lookup on <code>self.deck</code>, it's also already a list, so no need to slice</p>

<h1><code>PrintOneShuffledDeck</code></h1>

<p>This should be a standalone method, IMO, not a <code>staticmethod</code> on a class. You can refactor it by just printing the created instance:</p>

<pre class="lang-py prettyprint-override"><code># this default matches the default for the other classes
print_shuffled_deck(lang='de'):
    print(DeckOfCards(lang))
</code></pre>

<p>And because of the refactor in how <code>set_lang</code> is implemented, you don't need to call <code>set_lang</code> externally here, you can specify the language you want at the time of deck creation.</p>

<h1>Final Caveat</h1>

<p>Only issue here is that because <code>Enum</code> doesn't give you an <em>instance</em>, your binding of <code>__lang__</code> will hold individually for options, but not between decks. To show you what I mean:</p>

<pre class="lang-py prettyprint-override"><code>from enum import Enum

class X(Enum):
    A = 1,
    B = 2
    __var__ = 1

a = X.A
b = X.B

a.__var__ += 1

print(b.__var__)
1

print(a.__var__)
2

print(X.A.__var__)
2
</code></pre>

<p>Not sure how much that matters to you in your use-case, but figured I'd highlight it anyways. You can't have more than one deck if you want each deck to support a different language.</p>
    </div>