<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Undefined behavior:  Access outside array</strong></p>
<p>Allocation is for <code>n</code> elements, yet code attempts to access 1 past <code>primesTable.table[n-1]</code></p>
<pre><code>... malloc(n * sizeof(bool));
...
for (int i = p * 2; i &lt;= n; i += p) primesTable.table[i] = false;
//                     ^
</code></pre>
<p><strong>Bug, wrong function type</strong></p>
<p><code>hash()</code> returns <code>long</code> yet <code>.hashf</code> points to a function returning <code>int</code>.</p>
<pre><code>long hash(void *item) {
  return 13 * ((DUMMY) item)-&gt;key + 17;
}

typedef int (*Hash_Cons_Hash)(void *);
Hash_Cons_Hash hashf; 
hc-&gt;hashf = hash; 
</code></pre>
<p><strong>Bug, signed integer overflow and negative indexes</strong></p>
<p><code>13 * ((DUMMY) item)-&gt;key</code> itself can signed integer overflow resulting in UB.  Possible for <code>hash()</code> to return a negative value which cascades into UB in array indexing.</p>
<p>Performing an <code>int * int + int</code> and assigning that to <code>long</code> does not provide for a wider product when <code>long</code> wider than <code>int</code>.</p>
<pre><code>long hash(void *item) {
  return 13 * ((DUMMY) item)-&gt;key + 17;  // problem code
}
</code></pre>
<p><code>hash % hc-&gt;capacity</code> does not help as the result is signed: [-(hc-&gt;capacity-1) ... +(hc-&gt;capacity-1)].</p>
<pre><code>int index = hash % hc-&gt;capacity;
</code></pre>
<p>I recommend to return an unsigned type like <code>size_t</code> from the hash function, then apply an <em>unsigned</em> <code>% hc-&gt;capacity</code>, such as</p>
<pre><code>size_t hashu(const void *item) {
  return (size_t)8191 * ((DUMMY) item)-&gt;key + 17;
}
</code></pre>
<p><strong>Bug <code>int</code> overflow</strong></p>
<p>When <code>int n</code> is a prime near <code>INT_MAX</code>, <code>p * p</code> overflows.  UB and potential infinite loop.</p>
<pre><code>for (int p = 2; p * p &lt; n; p++) {
</code></pre>
<p>Safe alternate</p>
<pre><code>for (int p = 2; p &lt; n/p; p++) {
</code></pre>
<p>Further, I expect <code>&lt;=</code> is needed</p>
<pre><code>for (int p = 2; p &lt;= n/p; p++) {
</code></pre>
<p><strong>On the edge of a bug: <code>bool</code> initialization</strong></p>
<p>When <code>sizeof(bool) &gt; 1</code>, like <code>sizeof(int)</code>, <code>memset(primesTable.table, true, primesTable.size);</code> sets each <code>bool</code> object to 0x01010101.  On reading <code>table[i]</code>, that non-zero value is <em>true</em>, yet may look strange in debugging as <code>0x00000001</code> might be expected.</p>
<p>For me, I would reverse the table flags and initialize with <code>memset(primesTable.table, false, primesTable.size);</code> or better yet, use an <code>unsigned char</code> array and then initialize either way.</p>
<p><strong>Simplify allocation</strong></p>
<p>Allocate to the size of the referenced data, not the type.  Easier to code right, review and maintain.</p>
<pre><code>// primesTable.table = malloc(n * sizeof(bool));
primesTable.table = malloc(sizeof primesTable.table[0] * (n + 1u));
//            I also think OP needs a + 1 to prevent UB     ^^^^               
</code></pre>
<p><strong>Do not hide pointers</strong></p>
<p>There are times to hide, but not here.</p>
<pre><code>//typedef struct dummy {
//  int key;
//} *DUMMY;
struct dummy {
  int key;
};
// or if you are trying to abstract the struct
typedef struct {
  int key;
} dummy;
</code></pre>
<p><strong>include test</strong></p>
<p>In general, list <code>&lt;&gt;</code> first. then <code>""</code>, <em>except</em> for the corresponding <code>.h</code>.  This helps test that <code>hashcons.h</code> indeed can get called without prior includes.</p>
<p>In <code>"hashcons.c"</code></p>
<pre><code>#include "hashcons.h"
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include "prime.h"
// #include "hashcons.h"  move to first
</code></pre>
<p><strong>Naming</strong></p>
<p><code>hashcons.h</code> defines <code>HASH_CONS_...</code> and <code>hash_cons_...</code>.  I recommend to use a <code>_</code> in the filename or drop <code>_</code> from the functions names.</p>
<p><strong><code>bool</code> size</strong></p>
<p><code>bool</code> may be the size of an <code>int</code>, or <code>char</code>, or ...</p>
<p>For space savings of a large <code>bool</code> array, consider <code>unsigned char</code> for the array which is defined as size 1.  This might be a smidge slower, but IMO worth the potential space reduction.</p>
<pre><code>// bool *table;
unsigned char *table;
</code></pre>
    </div>