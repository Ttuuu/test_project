<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code is not too bad for one claiming to be a react newbie. I see only a few minor things I'd suggest cleaning or tightening up.</p>
<ol>
<li><strong>D</strong>on't <strong>R</strong>epeat <strong>Y</strong>ourself (DRY Principle) with regards to object property accesses</li>
<li>Consistent use of <code>===</code></li>
</ol>
<p>Using object destructing and object shorthand <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer#Property_definitions" rel="nofollow noreferrer">property definitions</a>, and directly return the map result.</p>
<pre><code>const list = (options) =&gt;
  options.map(({ index, label, links }) =&gt; ({
    index,
    label,
    links
  }));
</code></pre>
<p>Convert <code>onMouseEnter</code> and <code>onMouseLeave</code> to arrow functions. This allows you to drop the constructor as they will have <code>this</code> of the react class bound auto-magically. State can be declared a class property.</p>
<p>Explicitly check <code>links !== null</code></p>
<pre><code>class SecondaryNav extends Component {
  state = {
    hideDropdown: true,
    dropdownIndex: null,
    activeLabel: null,
    columns: null,
  };

  onMouseEnter = (index, label, links) =&gt; {
    this.setState(
      links !== null
        ? {
            hideDropdown: false,
            dropdownIndex: index,
            activeLabel: label,
            columns: links.length
          }
        : {
            hideDropdown: true,
            dropdownIndex: null,
            activeLabel: null,
            columns: null
          }
    );
  };

  onMouseLeave = () =&gt; {
    this.setState({
      hideDropdown: true,
      dropdownIndex: null,
      activeLabel: null,
      columns: null,
    });
  };
</code></pre>
<p>Destructure state values and object properties. Consistent use of <code>===</code>/<code>!==</code>. Move the conditional render of the dropdown container and use logical and (<code>&amp;&amp;</code>) as react will ignore the false value if <code>!hideDropdown</code> evaluates to false.</p>
<pre><code>render() {
  const { activeLabel, columns, dropdownIndex, hideDropdown } = this.state;

  // Form object array and return navigation items
  const items = list(options);
  const navItems = items.map(({ index, label, links }) =&gt; {
    const isActive = index === dropdownIndex ? css.active : null;
    return (
      &lt;li
        className={isActive}
        onMouseOver={() =&gt; this.onMouseEnter(index, label, links)}
        key={index}
      &gt;
        {label}
      &lt;/li&gt;
    );
  });

  // Form array of navigation items that have links
  const selected = options
    .filter((option) =&gt; option.index === dropdownIndex)
    .map((selected) =&gt; selected.links);
  const dropdownLinks = selected[0];

  // Define active content in dropdown
  const activeContent =
    dropdownIndex !== null &amp;&amp;
    dropdownLinks.map((label, key) =&gt; &lt;li key={key}&gt;{label}&lt;/li&gt;);

  // Define list label for the first dropdown
  const listLabel =
    dropdownIndex === "1"
      ? classNames(css.dropdown, css.listLabel)
      : css.dropdown;

  // Put content in two rows
  const columnsStyle = columns &gt;= 8 ? css.twoColumns : null;

  // Define dropdown image
  const dropdownImage = options
    .filter(({ index }) =&gt; index === dropdownIndex)
    .map((single, key) =&gt; (
      &lt;img src={single.image} key={key} alt={activeLabel} /&gt;
    ));

  return (
    &lt;div className={css.secondaryNav} onMouseLeave={this.onMouseLeave}&gt;
      &lt;div className={css.navContainer}&gt;
        &lt;ul className={css.secondNav}&gt;{navItems}&lt;/ul&gt;
      &lt;/div&gt;
      {!hideDropdown &amp;&amp; (
        &lt;div className={css.dropdownContainer}&gt;
          &lt;h2 className={css.dropdownLabel}&gt;{activeLabel}&lt;/h2&gt;
          &lt;div className={css.dropdownContent}&gt;
            &lt;ul className={classNames(listLabel, columnsStyle)}&gt;
              {activeContent}
            &lt;/ul&gt;
            &lt;div className={css.dropdownImage}&gt;{dropdownImage}&lt;/div&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      )}
    &lt;/div&gt;
  );
}
</code></pre>
    </div>