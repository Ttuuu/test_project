<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li>Idiomatic Rust style is to place braces on same line. When the function definition gets longer than one line then the brace lives on the next line all on its own.</li>
<li>Learn and love the <a href="https://doc.rust-lang.org/std/collections/struct.BTreeMap.html#method.entry" rel="nofollow noreferrer"><code>entry</code> API</a>. Not only does the code end up clearer, it's faster too.</li>
<li>Don't use magic numbers. What is <code>10</code> supposed to mean? Why not <code>9</code> or <code>11</code> or <code>42</code>? The <em>very</em> least you can do is to create a name for the magic value that indicates its purpose. However, there are usually better options in Rust. For example, if you need to indicate a potential absence of something, use <code>Option</code>.</li>
<li>It's very rare to use <code>ref</code> in a <code>let</code> pattern binding.</li>
<li>Avoid uses of <code>unwrap</code>, especially when they parallel existing code that ensures that the unwrap cannot fail. Usually there's a way to avoid duplicating the check.</li>
<li>Learn about transformative methods on <code>Option</code> and <code>Result</code>, <code>map</code> being the one used here. </li>
<li>Don't use an explicit <code>return</code> at the end of a function.</li>
</ol>

<pre><code>use std::collections::BTreeMap;

fn insert_dup&lt;V&gt;(map: &amp;mut BTreeMap&lt;i32, Vec&lt;V&gt;&gt;, k: i32, v: V) {
    map.entry(k).or_insert_with(Vec::new).push(v)
}

fn remove_dup_internal&lt;V&gt;(map: &amp;mut BTreeMap&lt;i32, Vec&lt;V&gt;&gt;, k: i32) -&gt; Option&lt;usize&gt; {
    map.get_mut(&amp;k).map(|vec| {
        vec.pop();
        vec.len()
    })
}

fn remove_dup&lt;V&gt;(map: &amp;mut BTreeMap&lt;i32, Vec&lt;V&gt;&gt;, k: i32) {
    if remove_dup_internal(map, k) == Some(0) {
        map.remove(&amp;k);
    }
}
</code></pre>

<p>Even better, the helper function isn't needed with the Entry API. We can also note that comparing the length against <code>0</code> is the same as the <code>is_empty</code> method:</p>

<pre><code>use std::collections::btree_map::Entry;

fn remove_dup&lt;V&gt;(map: &amp;mut BTreeMap&lt;i32, Vec&lt;V&gt;&gt;, k: i32) {
    if let Entry::Occupied(mut entry) = map.entry(k) {
        entry.get_mut().pop();
        if entry.get().is_empty() {
            entry.remove();
        }
    }
}
</code></pre>

<p>Now adding and removing a value each only require a single location computation and lookup.</p>

<p>Parameterizing the key can be done by:</p>

<ol>
<li>Replacing <code>i32</code> with <code>K</code>.</li>
<li>Adding <code>K</code> to the generic declaration list.</li>
<li>Following the compiler error message to restrict <code>K</code> to types that implement <code>Ord</code>.</li>
</ol>

<pre><code>use std::collections::{btree_map::Entry, BTreeMap};

fn insert_dup&lt;K, V&gt;(map: &amp;mut BTreeMap&lt;K, Vec&lt;V&gt;&gt;, k: K, v: V)
where
    K: std::cmp::Ord,
{
    map.entry(k).or_insert_with(Vec::new).push(v)
}

fn remove_dup&lt;K, V&gt;(map: &amp;mut BTreeMap&lt;K, Vec&lt;V&gt;&gt;, k: K)
where
    K: Ord,
{
    if let Entry::Occupied(mut entry) = map.entry(k) {
        entry.get_mut().pop();
        if entry.get().is_empty() {
            entry.remove();
        }
    }
}
</code></pre>

<blockquote>
  <p>Any reason you are calling both <code>entry.get</code> and <code>entry.get_mut</code> in <code>remove_dup</code>?</p>
</blockquote>

<p>This can be interpreted multiple ways:</p>

<ol>
<li>"Why not call <code>entry.get</code> in both cases?" — because the chained <code>pop</code> needs a mutable receiver in order to do its work.</li>
<li>"Why not call <code>entry.get_mut</code> in both cases?" — this would compile, but the value doesn't need to be mutable for <code>is_empty</code>, and I find it better to opt-out of as much mutability as possible.</li>
<li><p>"Why not call <code>entry.get_mut</code> once and store it in variable?" — Now that <a href="https://stackoverflow.com/q/50251487/155423"><em>non-lexical lifetimes</em></a> are enabled, the straight-forward way works and you should do this. Before that, however,you would run into borrow checker issues because binding the result of <code>get_mut</code> to a variable will cause <code>entry</code> to be borrowed for the rest of the scope. This prevents using <code>entry.remove</code>: </p>

<pre><code>if let Entry::Occupied(mut entry) = map.entry(k) {
    let vec = entry.get_mut();
    vec.pop();
    if vec.is_empty() {
        entry.remove();
    }
}
</code></pre>

<pre class="lang-none prettyprint-override"><code>error[E0505]: cannot move out of `entry` because it is borrowed
  --&gt; src/main.rs:17:13
   |
14 |         let vec = entry.get_mut();
   |                   ----- borrow of `entry` occurs here
...
17 |             entry.remove();
   |             ^^^^^ move out of `entry` occurs here
</code></pre>

<p>If <code>get</code> or <code>get_mut</code> were expensive, you could introduce a scope to constrain the borrow:</p>

<pre><code>if let Entry::Occupied(mut entry) = map.entry(k) {
    let should_remove = {
        let vec = entry.get_mut();
        vec.pop();
        vec.is_empty()
    };
    if should_remove {
        entry.remove();
    }
}
</code></pre>

<p>However, I don't believe that <code>get</code> or <code>get_mut</code> are expensive.</p></li>
</ol>
    </div>