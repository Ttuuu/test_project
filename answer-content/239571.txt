<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First, given that this is C++, it's surprising that you're still using C-style <code>#define</code>s when you could be using <code>constexpr</code> variables, e.g.</p>

<pre><code>/**
 * WS2812B Data pin
 */
#define DATA_PIN 3
</code></pre>

<p>could have been done in one line as</p>

<pre><code>constexpr int ws2812b_data_pin = 3;
</code></pre>

<hr>

<p>One place it does still make sense to use <code>#define</code>s is when you have things that could conceivably be configured at build time. For example,</p>

<pre><code>/**
 * Should we draw the red border. If so we reduce the playfield by one on each side.
 * Undefine this if we should not draw it
 */
#define DRAW_BORDER
//#undef DRAW_BORDER
</code></pre>

<p>seems like a reasonable use of the preprocessor. However, it would be much more conventional, and useful, if you permitted the build system to control the border via <code>-DDRAW_BORDER=1</code> and <code>-DDRAW_BORDER=0</code>, rather than <code>-DDRAW_BORDER</code> and <code>-UDRAW_BORDER</code>. That is, the traditional way to write a macro like this is:</p>

<pre><code>// Should we draw the red border?
// Default to "yes", but let the build system override it with -DDRAW_BORDER=0.
#ifndef DRAW_BORDER
 #define DRAW_BORDER 1
#endif

#if DRAW_BORDER
 constexpr int grid_x_start = ...
#endif
</code></pre>

<hr>

<pre><code>  MyBitset&amp; operator=(const MyBitset&amp; b) {
    memcpy(this-&gt;data, b.data, N/8);
  }
</code></pre>

<p>C++20 deprecated providing a user-defined <code>operator=</code> without a user-declared copy constructor. If you provide one, you should provide all three of the "Rule of Three" operations. Fortunately, in this case, you don't need a customized <code>operator=</code> at all. Just eliminate these three useless lines of code.</p>

<p>Also, it should have been <em>four</em> useless lines of code! Did you not receive a warning from your compiler about the missing <code>return *this</code>?</p>

<hr>

<p>You never define the identifier <code>byte</code>, which makes me a little nervous. Is it just a typedef for <code>unsigned char</code>?</p>

<hr>

<pre><code>const CRGB WAS_LIVE_COLOR = CHSV(115, 82, 60);
const CRGB LIVE_COLOR = CHSV(115, 82, 100);
const CRGB LIVE_AND_WAS_COLOR = CHSV(115, 82, 140);
</code></pre>

<p>You forgot <code>THE_WAS_AND_THE_LIVE_TOKYO_DRIFT</code>...</p>

<p>IIUC, these constants are meant to be the colors of cells that were "live in the previous generation but not now," "live in this generation but not the previous one," and "live in both." For some reason you provide constants for these three, but then hard-code the fourth option ("live in neither generation") as <code>CRGB::Black</code>. I would much prefer to see this as a pure function of the two inputs:</p>

<pre><code>static CRGB computeCellColor(bool prev, bool curr) {
    switch (2*prev + 1*curr) {
        case 0: return CRGB::Black;
        case 1: return CHSV(115, 82, 100);
        case 2: return CHSV(115, 82, 60);
        case 3: return CHSV(115, 82, 140);
    }
    __builtin_unreachable();
}
</code></pre>

<p>Then you can write your main loop more simply:</p>

<pre><code>  for (int x = GRID_X_START; x &lt; GRID_X_END; ++x) {
    for (int y = GRID_Y_START; y &lt; GRID_Y_END; ++y) {
      int index = computeBitNumber(x, y);
      bool isLive = computeLiveness(x, y);
      bool wasLive = prev.getBit(index);

      current.setBit(index, isLive);
      getLed(x, y) = computeCellColor(wasLive, isLive);
    }
  }
</code></pre>

<p>I replaced your <code>countNeighbors</code> function with a <code>computeLiveness</code> function that does exactly what you need it to do — no more. Our main loop <em>does not care</em> about the exact number of neighbors involved; all it wants to know is a single bit of information. So that's all it should be asking for.</p>

<p>It is <em>almost</em> correct to say <code>leds[index] = computeCellColor(...)</code> instead of having to do that weird "assign to the result of a function call" thing. I would suggest looking for a way to eliminate the "assign to function call." For example,</p>

<pre><code>setLed(x, y, computeCellColor(wasLive, isLive));
</code></pre>

<p>or</p>

<pre><code>leds[computeLedIndex(x, y)] = computeCellColor(wasLive, isLive);
</code></pre>

<hr>

<pre><code>/**
 * Clears the LED array to black using memset.
 */
void setupBorder() {
  memset(leds, 0, sizeof(leds));
}
</code></pre>

<p>I can write that code in half the number of lines:</p>

<pre><code>void clearLedsToBlack() {
  memset(leds, 0, sizeof(leds));
}
</code></pre>

<p>Also, I don't even see why you're clearing the LEDs to black on each iteration through the loop. Don't you end up overwriting all of the LEDs' values in the main loop anyway? And who says <code>0</code> means "black"? Elsewhere, when you want to set an LED to black, you use the symbolic constant <code>CRGB::Black</code>. You should try to be consistent — if you <em>know</em> black is <code>0</code>, then just say <code>0</code>, and if you don't know it, then don't write <code>setupBorders</code> to rely on it.</p>

<p>C++ does also allow you to assert that black is <code>0</code> at compile-time:</p>

<pre><code>static_assert(CRGB::Black == 0);
</code></pre>
    </div>