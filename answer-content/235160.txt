<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Avoid large recursion</h1>

<p>The unspecialized <code>ipow_base()</code> may recurse <code>exponent</code> times before multiplying.  Just defer to the general case here:</p>

<pre><code>template&lt;const int base&gt;
constexpr int ipow_base(unsigned int exponent)
{
    return ipow(base, exponent);
}
</code></pre>

<h1>Use binary exponentiation for efficiency with larger exponents</h1>

<p>These functions (other than the specializations) scale linearly with the exponent value, but could scale logarithmically like this:</p>

<pre><code>template&lt;const unsigned int exponent&gt;
constexpr int ipow_exp(int base)
{
    return (exponent &amp; 1 ? base : 1) * ipow_exp&lt;exponent/2&gt;(base*base);
}

constexpr int ipow(int base, unsigned int exponent)
{
    if (!exponent &amp;&amp; !base) {
        throw std::logic_error("0^0 is undefined.");
    }

    if (base == 2) {
        return 1 &lt;&lt; exponent;
    }

    int result = 1;
    int term = base;
    while (exponent) {
        if (exponent &amp; 1) {
            result *= term;
        }
        term *= term;
        exponent /= 2;
    }
    return result;
}
</code></pre>

<h1>Extend to other integer types</h1>

<p>Users would probably like to be able to use any <code>std::is_integral</code> type for <code>base</code> (e.g. <code>unsigned long</code>), so that ought to be a template type.</p>

<h1>Simplify tests for throwing</h1>

<p>We don't need the <code>thrown</code> variable here:</p>

<blockquote>
<pre><code>thrown = false;
try {
    ipow(0,0);
} catch (std::logic_error e){
    thrown = true;
}
assert(thrown);
</code></pre>
</blockquote>

<p>Just assert in the <code>try</code> block:</p>

<pre><code>try {
    ipow(0,0);
    assert(false);
} catch (std::logic_error&amp; e) {
    // expected
}
</code></pre>

<p>Better still, use one of the many available test frameworks rather than simple <code>assert()</code>.  That would help in several ways, such as detecting multiple failures per run, and showing actual and expected values for comparison.</p>
    </div>