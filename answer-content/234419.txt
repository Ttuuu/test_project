<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Prof's <a href="https://codereview.stackexchange.com/questions/234408/ask-the-user-a-number-between-2-and-20/234419#comment458468_234419">transcribed</a> code has weaknesses</p>

<pre><code>#include&lt;stdio.h&gt;

int main(){
    int n;
    while(scanf("%d",&amp;n)==0 || n &lt;2 || n &gt;20){
        while ( getchar () != ’\n’);
        printf( "Wrong. Try again\n");
    }
    printf ( "%n\n",n);
    return 0;
}
</code></pre>

<p><strong>Infinity loop</strong></p>

<p>When input is closed after a <code>scanf("%d",&amp;n) == 0</code>, <code>getchar()</code> can eventual return <code>EOF</code> before <code>'\n'</code> and thus <code>while ( getchar () != ’\n’);</code> never ends.</p>

<p><strong>Smart quotes</strong></p>

<p><code>’\n’</code> vs. <code>'\n'</code>.  Transcription problem or is that in the original?  In any case, the posted code was certainly not compiled.</p>

<p><strong>Invalid specifier</strong></p>

<p><code>"%n"</code> does not print the <code>int</code> value.  It is <em>undefined behavior</em> as <code>"%n"</code> matches an <code>int *</code>.</p>

<pre><code>    //printf ( "%n\n",n);
    printf ( "%d\n",n);
</code></pre>

<hr>

<p><strong>Requirement weakness</strong></p>

<p>"Ask the user a number between 2 and 20" is a classic ambiguity.  Depending on perspective are 2 and 20 acceptable or not?  Better to provide more detail</p>

<p>"Ask the user a number, inclusively, between 2 and 20" or the like.</p>

<hr>

<p>OP code has issues too.</p>

<pre><code>#include &lt;stdio.h&gt;

int main()
{
    int number = -1;
    printf("Enter a number in range [2,20]\n");
    scanf("%d", &amp;number);
    while (number &lt; 2 || 20 &lt; number)
    {
        while (getchar() != '\n')
        {
        }
        printf("Try again\n");
        scanf("%d", &amp;number);
    }
    printf("Your number was: %d", number);
    return 0;
}
</code></pre>

<p><strong>Failure to check input return value</strong></p>

<p><code>scanf("%d", &amp;number);</code> may have failed due to non-numeric text input.  Check the result.</p>

<pre><code>// scanf("%d", &amp;number);
if (scanf("%d", &amp;number) == 1) Success();
else Fail();
</code></pre>

<p><strong>Infinite loop</strong></p>

<p>OP's code suffers same potential infinite loop on end-of-file</p>

<pre><code>// while (getchar() != '\n') { }
int ch;
while ((ch = getchar()) != '\n' &amp;&amp; ch != EOF) { }
</code></pre>

<p>Also check <code>scanf()</code> return value.</p>

<p><strong>Functional difference</strong></p>

<p>With non-numeric input, Prof's code tries again.  OP's code, which does not evaluate the return value of <code>scanf()</code>, technically leads to trouble on rare input error.  On input error, the value of <code>number</code> is indeterminate. <a href="https://codereview.stackexchange.com/questions/234408/ask-the-user-a-number-between-2-and-20#comment458473_234419">See comment</a></p>

<p>The 2 locations to take user input is simply twice the amount of code that needs checking.  Better to take input from 1 call.  Production code would have a <code>get_int()</code> to handle this.  Something like <a href="https://stackoverflow.com/a/26333071/2410359"><code>getint()</code></a></p>

<hr>

<blockquote>
  <p>but is there a benefit to his method?</p>
</blockquote>

<p>OP's' code does have an informative prompt.</p>

<p>Else not much, both need work.  Perhaps</p>

<pre><code>// untested code
#include&lt;stdio.h&gt;
#define MIN_N 2
#define MAX_N 20

int main(void) {
  int cnt;
  int n;
  printf("Enter a number in range [%d,%d]\n", MIN_N, MAX_N);
  while((cnt = scanf("%d",&amp;n)) == 0 || ((cnt == 1) &amp;&amp; (n &lt; MIN_N || n &gt; MAX_N))) {
    int ch;
    while ((ch = getchar ()) != '\n' &amp;&amp; ch != EOF) {
      ;
    }
    printf( "Wrong input. Try again\n");
  }
  if (cnt == 1) printf ( "%d\n",n);
  return 0;
}
</code></pre>

<p>Better code would read a <em>line</em> into a <em>string</em> and process the input with <code>strtol()</code>.</p>
    </div>