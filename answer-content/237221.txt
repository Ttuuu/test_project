<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>To reduce memory usage you can exploit the mechanics of <code>zip</code> and <code>iter</code> / iterator / generator expression.</p>

<ol>
<li><p>Make <code>tmp</code> an <a href="https://docs.python.org/3/glossary.html#term-iterator" rel="noreferrer">iterator</a>.</p>

<p>You can achieve this by changing the brackets from <code>[]</code> to <code>()</code>; changing it from a list comprehension to a generator expression.</p>

<p>You can alternately wrap the list comprehension in an <code>iter</code> call. However that would still be using <span class="math-container">\$O(n)\$</span> memory.</p></li>
<li><p>In case you don't know what an iterator is, than it's a very useful <a href="https://en.wikipedia.org/wiki/Iterator_pattern" rel="noreferrer">design pattern</a>.</p>

<p>In short the iterator contains in it some data, and a single method to get the next bit of information. In Python the <code>next</code> function calls this method.</p>

<p>Take the iterator a list provides:</p>

<pre class="lang-py prettyprint-override"><code>&gt;&gt;&gt; my_data = iter([1, 2, 3, 4])
&gt;&gt;&gt; next(my_data)
1
&gt;&gt;&gt; next(my_data)
2
</code></pre></li>
<li><p>If you think of zip in terms of iterators, then you'll notice that with two input it works something like:</p>

<pre class="lang-py prettyprint-override"><code>def zip(a, b):
    while True:
        yield next(a), next(b)
</code></pre>

<p>This means if <code>a</code> and <code>b</code> are the same then zip will get the first value and second value in a tuple. Then it will get the third and fourth, until it gets all values.</p></li>
</ol>

<p>And so to improve memory usage you can change your code to:</p>

<pre class="lang-py prettyprint-override"><code>tmp = (int(i) for i in x.split(','))
y = zip(tmp, tmp)
</code></pre>

<p><strong>Note</strong>: this still runs in <span class="math-container">\$O(n)\$</span> space, as <code>x.split()</code> also makes an intermediary list. However it has cut the code from four intermediary lists to just one.</p>

<hr>

<p>This is a common pattern, as provided in the <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="noreferrer"><code>itertools</code> docs</a>.</p>

<blockquote>
  <pre class="lang-py prettyprint-override"><code>def grouper(iterable, n, fillvalue=None):
    "Collect data into fixed-length chunks or blocks"
    # grouper('ABCDEFG', 3, 'x') --&gt; ABC DEF Gxx"
    args = [iter(iterable)] * n
    return zip_longest(*args, fillvalue=fillvalue)
</code></pre>
</blockquote>

<pre class="lang-py prettyprint-override"><code>y = grouper((int(i) for i in x.split(',')), 2)
</code></pre>
    </div>