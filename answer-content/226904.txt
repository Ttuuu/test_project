<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think the important thing to notice here is that you don't actually need a Trie. The <code>partial</code> queries are not just substrings of the names, they are prefixes. It should therefore be faster to just built a dictionary which directly counts how often each prefix occurs.</p>

<p>Something as simple as this is sufficient (just tested it, it passes all testcases):</p>

<pre><code>from collections import defaultdict

def contacts(queries):
    prefixes = defaultdict(int)
    for op, name in queries:
        if op == "add":
            # maybe not the best/nicest way to iterate over slices,
            # but probably the easiest
            for i in range(1, len(name) + 1):
                prefixes[name[:i]] += 1
        else:
            # gives 0 if name is not in prefixes, no need for `get`
            yield prefixes[name]  
</code></pre>

<p>This is <span class="math-container">\$\mathcal{O}(len(name))\$</span> for each <code>add</code> and <span class="math-container">\$\mathcal{O}(1)\$</span> for each <code>find</code>. And since the length of all names is less than 22, the <code>for</code> loop will be very fast. It does not even seem to matter that slicing the string might create additional copies.</p>

<p>In contrast, your code is also <span class="math-container">\$\mathcal{O}(len(name))\$</span> for each <code>add</code>, but it is also <span class="math-container">\$\mathcal{O}(len(name))\$</span> for each <code>find</code>, as far as I can tell. You need to actually traverse the Trie to find the count. Apparently that, maybe together with the overhead of looking up class methods, is enough to reach the time limit for one of the larger testcases.</p>

<p>Stylistically your code looks very good. The only thing to improve there is adding some <code>docstrings</code> to your methods which explain how to use them.</p>

<p>If you were worried about Python 2 backward compatibility you should inherit from <code>object</code>, but nowadays that is probably less of a concern (especially with one-off code for a coding challenge).</p>
    </div>