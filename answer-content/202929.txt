<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Personally I never mutate the cell inside the <code>cellForRowAt</code> func but I send it a bunch of things that it needs to (re)build itself through a <code>configure</code> function. So:</p>

<pre><code>cell.configure(with: isForHeaderCell, whenA: { /* someblock */ }, whenB: { /* another block */ }) /* etcetera */
</code></pre>

<p>You seem to be forwarding a lot of calls that are doing nothing except forwarding. So the only thing you really need to do is to forward the function you want to call in the end. What you need to understand is that functions can be parameters where blocks are asked and vice versa. A block is an anonymous function and if the in/out matches you can use it.</p>

<p>So technically you only need to pass the function that is going to do the required work all the way up and you're good. For example I have a class that fetches some data:</p>

<pre><code>DataFetcher.fetch(for: id, whenDone: { result in /* etc */ })
</code></pre>

<p>This could be wrapped in a block:</p>

<pre><code>{ (id: Int) in
    DataFetcher.fetch(for: id, whenDone: { result in /* etc */ })
}
</code></pre>

<p>And this block could be passed all the way up the chain, so you call down once.</p>

<pre><code>func configure(with fetchStuff: (Int) -&gt; ())
</code></pre>

<p>I also don't understand why you pass the Cell itself as a parameter. Perhaps because the way the <code>@IBAction</code> functions are structured by default but it's better to ignore it unless you have some really pressing reason to got back to <em>exactly</em> that cell.</p>

<p>Last but not least, providing defaults is not that bad when dealing with blocks that <em>almost</em> surely will be set during runtime:</p>

<pre><code>public var btnReplyTappedClousre:((CommentCell) -&gt; (Void))?
</code></pre>

<p>Could be:</p>

<pre><code>private var replyAction: (Int) -&gt; () = { _ in
    assertionFailure("This block should always be replaced by the configure function before the cell is shown")
}
</code></pre>

<p>Let me explain the changes in detail:</p>

<ul>
<li>It can be <code>private</code> because it's set through your <code>configure</code> function and will only ever be called from within the cell. Better encapsulation.</li>
<li>It does not relate to the button but to what actually happens when you tap the button. So the <code>@IBAction func replyButtonTapped()</code> will call <code>replyAction(chatId)</code></li>
<li>It only passes the required data (in this case the chat id). Nobody outside of <code>CommentCell</code> needs to know anything about <code>CommentCell</code></li>
<li>The empty block containing only the <code>assertionFailure</code> will warn any boneheaded colleague that did not call <code>configure</code> during testing but will not crash when released (if it managed to escape during testing)</li>
<li>The block will always be set so you're not dealing with optionals anymore</li>
</ul>
    </div>