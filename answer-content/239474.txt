<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If the part you don't like it the repetition of calling <code>customFieldsServer.getAccountCustomFields(...)</code> in two separate places, then you can avoid that without using <code>async/await</code> like this by create a common promise variable that each branch of the if/else fills in so after the if/else progress can continue using the common promise:</p>

<pre><code>let p;
if ( account.plan_id ) {
    const featuresToCheck = [];
    for (const vertical of Object.keys(account.account_settings.enabled_features)) {
        for (const feature of Object.keys(account.account_settings.enabled_features[vertical])){
            featuresToCheck.push(`${vertical}.${feature}`);
        }
    }
    p = planService.filterFeatures(account.plan_id.id,featuresToCheck).then((filtered) =&gt; {
        filtered.forEach((feature) =&gt; {
            const [ vert , feat] = feature.split('.');
            out.account_settings.enabled_features[vert][feat].is_active = false;
        });
    });
} else {
    p = Promise.resolve();
}
p.then(() =&gt; {
    customFieldsService.getAccountCustomFields(account_id, out).then(function(){
        return cb();
    }).fail(cb);
});
</code></pre>

<hr>

<p>But, this would be simpler if you could use <code>async/await</code> and if your promises were standard-type promises (the <code>.fail()</code> you were using is non-standard):</p>

<pre><code>try {
    if ( account.plan_id ) {
        const featuresToCheck = [];
        for (const vertical of Object.keys(account.account_settings.enabled_features)) {
            for (const feature of Object.keys(account.account_settings.enabled_features[vertical])){
                featuresToCheck.push(`${vertical}.${feature}`);
            }
        }
        let filtered = await planService.filterFeatures(account.plan_id.id,featuresToCheck);
        filtered.forEach((feature) =&gt; {
            const [ vert , feat] = feature.split('.');
            out.account_settings.enabled_features[vert][feat].is_active = false;
        });
    }
    await customFieldsService.getAccountCustomFields(account_id, out);
    cb();
} catch(e) {
    cb(e);
}
</code></pre>
    </div>