<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Use (inspiration from) C++17's <code>std::filesystem</code></h1>

<p>C++17 introduced <a href="https://en.cppreference.com/w/cpp/filesystem" rel="nofollow noreferrer"><code>std::filesystem</code></a>, which provides portable functions to query things like which files there are in a directory. If you can use C++17, then make use of these functions. If you need to be compatible with older C++ standards, then at least try to emulate what <code>std::filesystem</code> does as much as possible, including functions names and the general behavior.</p>

<p>For example, <code>std::filesystem</code> provides iterators to loop over all elements in a directory. This avoids having to build up a vector, which might be inefficient if you are only going to use it to find an element in it and then discard it.</p>

<h1>There is more to filesystems than files and directories</h1>

<p>There can be things in a directory that are neither normal files nor other directories, for example:</p>

<ul>
<li>symbolic links</li>
<li>block devices</li>
<li>character devices</li>
<li>fifos</li>
<li>sockets</li>
</ul>

<p>The above is a list of things you can find on Linux and Mac OS X platforms, but even Windows has things like symbolic links and junctions.</p>

<p>Your code currently checks whether something is a <em>regular</em> file, but many of the above filesystem elements can be accessed as if they are regular files. So think careful about what semantics you want your functions to have.</p>
    </div>