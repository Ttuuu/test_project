<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>Is it common practice to use ObjectStream's with a custom "Protocol"/Packet to transmit data or should I use already existing protocols like HTTP instead?</p>
</blockquote>

<p>I am not en expert and would say that it depends of your needs. However if you want to have other clients, then you may consider another protocol that would be easier to implement in another language. In the past I made two applications like your, they were all using <code>java.net.Socket</code> with a custom protocol (one text based and another Xml based). </p>

<p>Plain HTTP may not be the best choice because it is stateless and synchronous. gRpc and other Rpc mechanism can be alternatives if you want to focus on the messages more than the tranport. But be sure to choose one that allow long-lived connection between your client and the server. </p>

<blockquote>
  <p>is it recommended to write such a basic API and service? </p>
</blockquote>

<p>I would say "no". But for the exercise yes, it can be interesting. You can also take a look at XMPP or other successful communication protocols for your inspiration. Or just write another implementation.</p>

<blockquote>
  <p>Or is it recommended to send a string or packet instead with a identifier and the server executes the action by parsing this identifier?</p>
</blockquote>

<p>Again, it depends of your needs. But personally, being a literal one, I prefer to have "text" messages instead of identifiers. It is a kind of self documented code that is more readable than a bunch of obscure identifiers. However, "text" messages will weight more than a few bytes and than can be a problem in real-time systems.</p>

<hr>

<p><strong>Edit</strong>, some remarks after deeper code review </p>

<p>I reviewed <code>UserController</code> in the server module (#df5ba13). 
Despite the fact that there is no tests, there is some thing that you can do to improve your code. I am specially thinking to the <em>front controller</em> and <em>chain of responsibility</em> patterns.</p>

<p>A front controller will be used to manage the authentication and setup steps then route the <code>Packet</code> to a dediacted controller.</p>

<p>The chain of responsibility is let you define a set of classes dedicated to handle one command. Your command is your <code>Packet</code>, and you can create one handler for each kind of command : <em>broadcast</em>, <em>message</em> and a final node for <em>error</em> but also for <em>authentication</em>, <em>setup</em> or anything else. You just have a set of <em>handlers</em> and you add them next to each other, some can be composite of others so that your handling is just a kind of hierarchy where the root node is the server. The power of this pattern is that each node in the chain can decide to stop the handling or let it continue to the next nodes.</p>

<p>With the functional interface from Java 8, one handler can be seen as a <code>BiConsumer</code> that receive a <code>Packet</code> and his sender (<code>User</code>). Some can have a <em>guard</em> that is a simple <code>Predicate&lt;Packet&gt;</code> and you can also compose guards with the <code>and</code> and <code>or</code> methods.</p>

<p>To simplify a bit your code (and tests) you should simplify the chain of call to reach a method. I.e: instead of doing <code>user.getRoom().sendPrivatePacket(user.getName(), packet)</code> you can hide this logic between a simpler <code>user.reply(packet)</code> method.</p>
    </div>