<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Ok, first of all. If you don't understand things right away, usually it means code is messy. Code gets messy when you don't have time to think and you just need to do it. I've refactored junior/mids code and even seniors code produced when people just want to do it right away and don't have time to think.
  So for the future. The way you approach is this is start simplifying, make the method do one thing. Get rid of repetitive parts. 
  So with first iteration I refactored to this</p>

<pre><code>public class CategoryHolder {

// when in your code you have System.getProperty() called many times - do you need that? 
// Its not changing every second, so when you store in variable, you're good then
private static final String END_OF_LINE = System.getProperty("line.separator");
// you used "," many times - its called magic string or if some number 
// is jumping here and there in code its called magic number
// when you define the variable then you change in ONE place when something changes
private static final String COMMA = ",";
// same here, name is stupid maybe, but it's better than ":" all around your code
// rename it to something more meaningful
private static final String DOUBLE_DOT = ":";
private static final String EMPTY_STRING = "";

// I don't like the name of the method, but ok, its a first iteration of refactoring
private static String generateString(final Multimap&lt;String, Info&gt; reverseLookup) {
    StringBuilder sb = new StringBuilder();

    for (Map.Entry&lt;String, Collection&lt;Info&gt;&gt; entry : reverseLookup.asMap().entrySet()) {
        String[] splitThing = entry.getKey().split(DOUBLE_DOT);
        // I started to simplify and immediately seen you do split two times
        // while it could be done only once.. good catch
        // you might use some meaningful names, I just don't know much about your domain
        String something1 = splitThing[0]; // your doing split two times?
        // same here
        String something2 = splitThing[1];
        sb.append(something1).append(COMMA).append(something2).append(COMMA);

        createInfoString(sb, entry);

        sb.append(END_OF_LINE);
    }
    return sb.toString();
}

private static void createInfoString(StringBuilder sb, Map.Entry&lt;String, Collection&lt;Info&gt;&gt; entry) {
    // I guess you've made it as the case to "" for first but "," for all next
    // I would probably go with for(int i=0; i&lt;entry.length? ; i++){
    // separator = i == 0 ? EMPTY_STRING : DOUBLE_DOT;
    String separator = EMPTY_STRING;
    for (Info info : entry.getValue()) {
        sb.append(separator)
        sb.append(info.getLeafCategoryId())
        sb.append(DOUBLE_DOT).append(info.getScore());
        separator = COMMA;
    }
}
</code></pre>

<p>It's a first step, but looks a bit more clear for me. </p>

<p>Now we do a bit more refactoring and its starts to get more clear what we do here</p>

<pre><code>public class DataFormatter {

private static final String END_OF_LINE = System.getProperty("line.separator");
private static final String COMMA = ",";
private static final String DOUBLE_DOT = ":";
private static final String EMPTY_STRING = "";
private static final int NICE_PART_1_INDEX = 0;
private static final int NICE_PART_2_INDEX = 1;

private static String format(final Multimap&lt;String, Info&gt; reverseLookup) {
    StringBuilder sb = new StringBuilder();

    for (Map.Entry&lt;String, Collection&lt;Info&gt;&gt; entry : reverseLookup.asMap().entrySet()) {
        formatKey(sb, entry.getKey());
        formatValue(sb, entry);
        sb.append(END_OF_LINE);
    }

    return sb.toString();
}

private static void formatKey(StringBuilder sb, String key) {
    String[] splitThing = key.split(DOUBLE_DOT);
    String something1 = splitThing[NICE_PART_1_INDEX];
    String something2 = splitThing[NICE_PART_2_INDEX];

    sb.append(something1).append(COMMA).append(something2).append(COMMA);
}

private static void formatValue(StringBuilder sb, Map.Entry&lt;String, Collection&lt;Info&gt;&gt; entry) {
    String separator = EMPTY_STRING;

    for (Info info : entry.getValue()) {
        sb.append(separator);
        sb.append(info.getLeafCategoryId()).append(DOUBLE_DOT).append(info.getScore());
        separator = COMMA;
    }
}
</code></pre>

<p>At the end, I added formatting code to class and called DataFormatter and format() method. If you would have formatting in 5 different places you could move them to this class, see common parts, reuse them rather than copy/paste similar code in many places. </p>

<p>I would say - add unit tests which would pass any bad thing into your method you could imagine. Then you will be sure that your code works fine. </p>
    </div>