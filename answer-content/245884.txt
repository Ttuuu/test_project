<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The first thing I did was use <a href="https://black.now.sh/?version=stable" rel="nofollow noreferrer">Black</a> to reformat the code - yours is pretty good, but there are some minor style complaints I had (generally around the lack of whitespace in a few places). Additionally, <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP8</a> defines the naming conventions in python - generally, <code>prefer_this</code> <code>notThis</code>.</p>
<p>Lastly, all of your methods should have docstrings. I haven't added this b/c it isn't as pertinent to the code review, but it is good practice in general.</p>
<p>From there, I thought about your actual approach. At a high level you:</p>
<ul>
<li>Create a new instance of the object</li>
<li>Pass it a string, parse the string, and process each token</li>
<li>Attempt to fit pieces</li>
<li>Clear full rows</li>
</ul>
<p>None of that is inherently bad, but I think it can be tightened up a bit.</p>
<h2>User Input</h2>
<p>Right now you don't have any validation of the user inputs - we're being very trusting that the values that are provided will be usable. We probably want to do this validation</p>
<p>Additionally, I don't think that the <code>Tetris</code> class should be responsible for handling the comma-delimited string - it should just take a piece and a position, and something else should be responsible for taking the input and translating it into arguments. If you're feeling friendly, a <a href="https://stackoverflow.com/a/1669524/3076272"><code>@classmethod</code></a> might be appropriate. Lastly, I think this class method should return the board, not the height, so I added a new <code>height</code> property to the class. I ended up with something like this:</p>
<pre class="lang-py prettyprint-override"><code>pieces = {
    "I": ((True, True, True, True)),
    "Q": ((True, True), (True, True)),
    "T": ((True, True, True), (False, True, False)),
    "Z": ((True, True, False), (False, True, True)),
    "S": ((False, True, True), (True, True, False)),
    "L": ((True, False), (True, False), (True, True)),
    "J": ((False, True), (False, True), (True, True)),
}

@classmethod
def add_pieces(cls, user_input):
    board = Tetris()
    for piece in user_input.split(","):
        if len(piece) &gt; 2:
            raise ValueError(f"Piece {piece} is malformed")
        piece_id = piece[0]
        drop_position = piece[1]
        if not Tetris.is_valid_piece(piece_id):
            raise ValueError(f"Piece {piece_id} is not a valid Tetris piece")
        if not Tetris.is_valid_drop_location(drop_position):
            raise IndexError(
                f"Drop location {drop_position} is not a valid board location"
            )
        board.add_piece(piece_id, drop_position)
    return board

@classmethod
def is_valid_piece(cls, piece_id):
    return piece_id in cls.pieces

@classmethod
def is_valid_drop_location(drop_position):
    try:
        int(drop_position)
    except ValueError:
        return False

    return drop_position &gt;= 0 and drop_position &lt; 10

@property
def height(self):
    return self.board.length

</code></pre>
<p>You'll also notice that I moved <code>Tetris.pieces</code> into a class attribute instead of an instance attribute - this is because it should be the same everywhere. I also changed <code>0/1</code> to <code>True/False</code> because it is a binary value (I think an <code>enum</code> is probably best to be explicit, e.g. <code>boardState.FULL</code> and <code>boardState.EMPTY</code>). Lastly, I changed from nested lists to nested tuples - this is because tuples are immutable, and you never need to change the shape definition.</p>
<h2>OOP</h2>
<p>I wonder if it is worthwhile making a separate class to represent the pieces, and then you can do something like <code>TetrisPiece.fitsAtLocation(board, location)</code>. I haven't fully thought about what this would look like or if it is actually better, but it might be a nice way to encapsulate that functionality.</p>
<p>This would also be a convenient way to extend this to handle rotations as well, as you would just do <code>TetrisPiece.rotate(Direction.LEFT)</code> and handle it all under the hood.</p>
<p>If you want to extend this to a full game, then instead of just having a "drop position" you also need a relative location on the board, handling T-spins, etc. The more complicated this gets, the more I think a separate class is going to improve readability.</p>
<h2>General nitpicks</h2>
<ul>
<li><code>doesThePieceFit</code> seems really weird - I get how it works, but you should definitely introduce some constants to replace the magic method, and maybe consider if there is a better way to model the data.
<ul>
<li>In particular, perhaps we should store the block state for a different shape in reverse order (e.g. bottom-to-top instead of top-to-bottom)?</li>
</ul>
</li>
<li><code>removeFullRows</code> creates a list, then sorts it - I think you can probably come up with a different approach for this</li>
<li><code>addPieceAt</code> has the same magic as <code>doesThePieceFit</code> - is there a way that we can either combine their functionality, or use a common helper method?</li>
<li><code>addPiece</code> I think you can use <code>for-else</code> to handle this a bit more elegantly than using the ternary, but my mood on the <code>for-else</code> swings every time I use it</li>
</ul>
    </div>