<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Fails with large <code>offset, bytes</code></strong></p>

<p><code>read(fd, buf, offset);</code> reads out of <code>buf[]</code> bounds when <code>offset &gt; buf_size</code>.  Same for <code>bytes</code>.  This should be tested.</p>

<p>Unclear why <code>buf[buf_size]</code> is so small (5).  How about 4096 or 1 Meg?</p>

<p><strong>Handle large offset</strong></p>

<p>I'd expect code to handle offsets far larger than the <code>sizeof buf</code>.  Looping on <code>read(fd, buf, offset);</code> if needed.</p>

<p><strong><code>int</code> math</strong></p>

<p>Files sizes can well exceed <code>INT_MAX</code>.  For <code>offset, bytes</code>, I'd use <code>long long</code>.</p>

<p><strong>Unneeded loop</strong></p>

<p>Rather than a <code>for()</code> loop <code>for (i = 0; i &lt; rlen; i++) putchar(buf[i]);</code>, use <code>write(1, ...)</code>.</p>

<p><strong>Missing <code>close()</code></strong></p>

<p><strong>Function Limitations</strong></p>

<p>OP has "not allowed to use system calls other than open, close, read, write".  What about <code>error()</code>, <code>printf()</code>, <code>atoi()</code>, <code>putchar()</code> - or are those classified differently?</p>

<p>With such a limit, looks like a lot of <code>includes</code>.</p>

<p><strong>Algorithm flaw?</strong></p>

<p>The first <code>while (1)</code> loop looks wrong.  </p>

<p>Either the first iteration will get the expect <code>offset</code> number of bytes and proceed to the 2nd <code>while ()</code>.</p>

<p>Or </p>

<p>it will read insufficient number of bytes (for reasons other than no -more bytes will ever exist) and loop again, trying to read <code>offset</code> bytes again.  I'd expect that <code>offset</code> would have been reduced by the previous <code>rlen</code>.  Without that reduction, <code>if(len == offset)</code> may never be satisfied as reading too many <code>offset</code> bytes is then possible.</p>

<p>I'd expect 2 <code>while</code> loops that are not nested.  First to read the <code>offset</code> bytes, next to read the <code>bytes</code>.</p>

<p>Further this could be sub-function calls.  Something like:</p>

<pre><code>if (read_bytes(handle, offset, no_echo) == OK) {
  if (read_bytes(handle, bytes, echo_to_stdout) == OK) {
    success();
  }
}
fail();
</code></pre>
    </div>