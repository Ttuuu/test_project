<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Code readability and style</h1>

<p>Your code has nothing wrong with style (as far as I know). It seems to be (99.9999...%) <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP 8</a> compliant. </p>

<p>I ran a PEP 8 checker over your code and this is what it picked up -</p>

<p><a href="https://i.stack.imgur.com/XovGb.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/XovGb.png" alt="enter image description here"></a></p>

<p>Which basically tells you to add a space before the operator '<code>=</code>' here -</p>

<pre><code>hash_route= {}
# hash_route = {}
</code></pre>

<p>As for the missing newline at the end of the file - there is no Python specific reason why you <em>have</em> to do this. It's just that most people <em>tend to</em> do this. pylint's <a href="http://pylint-messages.wikidot.com/messages:c0304" rel="nofollow noreferrer">help page on that message</a> tells you more about it:</p>

<blockquote>
  <p>While Python interpreters typically do not require line end character(s) on the last line, other programs processing Python source files may do, and it is simply good practice to have it. This is confirmed in <a href="https://docs.python.org/3/reference/lexical_analysis.html#line-structure" rel="nofollow noreferrer">Python docs: Line Structure</a> which states that a physical line is ended by the respective line end character(s) of the platform.</p>
</blockquote>

<hr>

<p>Now let's introduce you to <a href="https://realpython.com/python-f-strings/" rel="nofollow noreferrer"><em><code>f</code></em>-strings</a> -</p>

<blockquote>
  <p>To create an f-string, prefix the string with the letter “ <em><code>f</code></em> ”.
  The string itself can be formatted in much the same way that you would
  with
  <a href="https://www.geeksforgeeks.org/python-format-function/" rel="nofollow noreferrer"><code>str.format()</code></a>.
  <em><code>f</code></em>-strings provide a concise and convenient way to embed python
  expressions inside string literals for formatting.</p>
</blockquote>

<p>Which means, instead of using the outdated way of formatting strings -</p>

<pre><code>print('Found a common ancestor ' + str(root.value))
</code></pre>

<p>You could simply write it out as -</p>

<pre><code>print(f'Found a common ancestor {root.value}')
</code></pre>

<p>Also, good use of the <a href="https://www.geeksforgeeks.org/what-does-the-if-__name__-__main__-do/" rel="nofollow noreferrer"><code>if __name__ == __'main__':</code></a> guard. Most people don't even attempt to use it.</p>

<hr>

<p>Another thing <a href="https://www.python.org/dev/peps/pep-0008/#programming-recommendations" rel="nofollow noreferrer">PEP 8</a> says that -</p>

<blockquote>
  <p>Comparisons to singletons like <code>None</code> should always be done with <code>is</code> or
  <code>is not</code>, never the equality operators.</p>
</blockquote>

<p>which you have implemented really well. Most people don't do this (including me). You can read more about it <a href="http://jaredgrubb.blogspot.com/2009/04/python-is-none-vs-none.html" rel="nofollow noreferrer">here</a>.</p>

<hr>

<p>Overall, in terms of code readability and style, this is a well-built code (probably needs more work on performance). Good work!</p>

<p>Hope this helps!</p>
    </div>