<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I won't repeat the excellent comments made by the other answers on Prime Factorization, Dynamic Programming, Single Responsibility Principle, Indentation, f-Strings, Bugs, Naming, Documentation, and Separation of Input from Processing.</p>

<h2>Integer conversion</h2>

<p>After all those comments have been filtered out, the following programming style still jumps out and needs to be addressed:</p>

<pre><code>low = int(input("What number would you like to start at? "))
high = int(input("What number would you like to go up to? "))
if int(low) == 1 and int(high) == 1:
#...
    for x in range(int(low), int(high)):
    # ...
    for y in range(2, int(low)):
    # ...
</code></pre>

<p>What is up with all the calls to <code>int(...)</code>?</p>

<p>Both <code>low</code> and <code>high</code> have been converted to integers in the first two statements (or an exception has been raised if they can't be).  You don't need <code>int(low)</code> and <code>int(high)</code>; that is just being redundant and obfuscating.</p>

<p>Similarly:</p>

<pre><code>    if int(len(primes)) in primes or int(len(primes)) in primes_2:
</code></pre>

<p>The length of a <code>list</code> is always an integer, so again the wrapping <code>len(...)</code> in <code>int(...)</code> calls does not add anything but clutter to the program.</p>

<h2>Precedence</h2>

<p>You've got more parenthesis than you need:</p>

<pre><code>        elif (x % i) == 1 and i &lt;= (x - 2):
</code></pre>

<p>Both the modulo-operation (<code>%</code>) and the subtraction-operation (<code>-</code>) are higher precedence than the comparison operators (<code>==</code> and <code>&lt;=</code>), so the parenthesis may be safely omitted:</p>

<pre><code>        elif x % i == 1 and i &lt;= x - 2:
</code></pre>

<h2>Limits &amp; Looping</h2>

<pre><code>    for i in range(2, x):
        if (x % i) == 0 and x != i:
</code></pre>

<p>The <code>range(2, x)</code> object includes the starting point (<code>2</code>), but excludes the ending point (<code>x</code>).  As such, <code>i</code> will never reach <code>x</code>, so the expression <code>x != i</code> will always be true, and may be omitted from the first <code>if</code> statement.</p>

<p>When <code>i == x - 1</code>, then <code>x % i == 1</code> will always be true, so</p>

<pre><code>elif (x % i) == 1 and i == (x - 1):
</code></pre>

<p>could simply be written as:</p>

<pre><code>elif i == x - 1:
</code></pre>

<p>Except, what this really means is that the <code>for i in range(2, x)</code> has reached the end of the range without ever executing the <code>break</code> statement.  For this you could use a <code>for ... else</code> loop.</p>

<pre><code>        for i in range(2, x):
            if x % i == 0:
                break
        else:
            primes.append(x)
</code></pre>

<p>Finally, we can further simply this by realizing we are asking if <strong><code>any</code></strong> value in the range from <code>2</code> (inclusive) to <code>x</code> (exclusive) divides evenly into <code>x</code> ... and Python has an <code>any()</code> function.  If any value in that range does, then <code>x</code> is not prime:</p>

<pre><code>if not any(x % i == 0 for i in range(2, x)):
    primes.append(x)
</code></pre>

<p>If you were generating <strong>all</strong> of the primes, starting from 2 instead of starting from <code>low</code>, you could optimize this search by just testing for prime divisors:</p>

<pre><code>if not any(x % i == 0 for i in primes):
    primes.append(x)
</code></pre>
    </div>