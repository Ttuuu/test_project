<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Note:</strong> your code doesn't currently compile for at least two reasons: you are not telling the compiler <code>cout</code> and <code>endl</code> live in the <code>std</code> namespace, and you can't declare your arrays <code>start</code> and <code>end</code> because <code>n</code> is not known at compile-time (instead, you'd have to use dynamic memory allocations).</p>

<p>In any case, your code smells like your background might be in C (but then you'd probably also know about dynamic memory... well, anyway). Indeed, with C++, you typically define variables as close to their site of usage. Moreover, you could take advantage of the algorithms and data structures provided by the language.</p>

<blockquote>
  <ol>
  <li>Is there a better approach than sorting arrays and comparing?</li>
  </ol>
</blockquote>

<p>Essentially no: you must sort the arrays (with no additional knowledge, you can't beat the log-linear bound). This dominates your runtime, but it is scalable and practical enough that you don't have to worry about it.</p>

<blockquote>
  <ol start="2">
  <li>What is a better way to sort the two arrays on the basis of the second array?</li>
  </ol>
</blockquote>

<p>Because start and end times are logically and tightly coupled (i.e., something is wrong if we suddenly lose the correspondence), it's a good idea to tie them together. For that reason, we can use <a href="https://en.cppreference.com/w/cpp/utility/pair" rel="nofollow noreferrer"><code>std::pair</code></a>. To store such objects, we can use a dynamic array, i.e., <a href="https://en.cppreference.com/w/cpp/header/vector" rel="nofollow noreferrer"><code>std::vector</code></a>. For sorting that according to the second element, we can use <a href="https://en.cppreference.com/w/cpp/algorithm/sort" rel="nofollow noreferrer"><code>std::sort</code></a>.</p>

<p>To summarize, we could proceed along the following lines (I'm taking the liberty to omit reading input to avoid clutter):</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;algorithm&gt;
#include &lt;vector&gt;

typedef std::vector&lt;std::pair&lt;int, int&gt; &gt; PairList;

int activitySelection(const PairList&amp; p) 
{
    PairList s(p);
    std::sort(s.begin(), s.end(), [](const auto&amp; x, const auto&amp; y) {
        return x.second &lt; y.second;
    });

    int end = s[0].second;
    int count = 1;

    for (int i = 1; i &lt; s.size(); ++i)
    {
        if (s[i].first &gt;= end)
        {
            ++count;
            end = s[i].second;
        }
    }

    return count;
}

int main()
{
    PairList v{ {1,2},{3,4},{2,6},{5,7},{8,9},{5,9} };
    std::cout &lt;&lt; activitySelection(v) &lt;&lt; "\n";
}
</code></pre>
    </div>