<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>While the performance of your container seems to be not your major concern, it is always nice to know where you are standing. Therefore I would compare it to this <a href="https://pypi.python.org/pypi/ordereddict" rel="nofollow">implementation of an OrderedDict</a> for <code>2.4 &lt;= python &lt;= 2.6</code>.</p>

<hr>

<p>In addition, what your container seems to lack is to give it an ordered sequence on initialization. It can only take an iterable which has the method <code>items</code> defined. But it would be nice to be able to give it an iterable of 2-tuples, so something like:</p>

<pre><code>c = Container([("a", 1), ("b", 2), ("c", 3), ...])
</code></pre>

<p><code>collections.OrderedDict</code> offers this, therefore a user might expect your implementation to also have it. Without it, the ordering will not give you any advantage, because as soon as you do:</p>

<pre><code>c = Container({"a": 1, "b": 2, "c": 3, ...})
c = Container(a=1, b=2, c=3, ...) 
</code></pre>

<p>you loose the order, because of python dicts disorderedness. You try to get around this with <code>__call__</code>, allowing you to do:</p>

<pre><code>c = Container(a=1)(b=2)(c=3)
</code></pre>

<p>but in my opinion this is less clean and clear than using e.g. a list of tuples. The latter also simplifies your <code>copy</code>:</p>

<pre><code>def copy(self):
    return inst = self.__class__(self.iteritems())

__copy__ = copy
</code></pre>

<p>The implementation for this is actually already in your <code>update</code> method.</p>

<p>I also added <code>__copy__ = copy</code> here to allow usage of the copy module.</p>

<hr>

<p>In your <code>_search</code> method, you are doing a <code>return None</code> at the end. This is superfluous as that is the default return value of a python function.</p>

<hr>

<p>It is better to ask forgiveness than permission, so I would use <code>try..except</code> in <code>update</code>:</p>

<pre><code>def update(self, seq, **kw):
    try:
        for k in seq.keys():
            self[k] = seq[k]
    except AttributeError:
        for k, v in seq:
            self[k] = v
    dict.update(self, kw)
</code></pre>

<p>I would also think about which you want to put in the <code>try</code> clause (the one that fails less often, which depends on you usage of this class).</p>

<hr>

<p><code>dict.pop()</code> (without a key) is not defined, because the 'last' element in a dict is of course not well-defined. For an ordered dict, it might make sense, however, to allow it (and <code>collections.OrderedDict</code> does, with its <code>pop</code> method):</p>

<pre><code>def pop(self, key=None, *default):
    if not key:
        key = self.__keys_order__.pop()
    else:
        self.__keys_order__.remove(key)
    val = dict.pop(self, key, *default)
    return val
</code></pre>

<p>This takes advantage of the fact that <code>list.pop</code> is O(1), whereas <code>list.remove</code> is O(n) if the last element is the one you want to remove (because it needs to search through the whole list to find the last element).</p>

<p>Your <code>popitem</code> also seems to be randomly ordered, because it directly uses <code>dict.popitem</code>. It should be:</p>

<pre><code>def popitem(self):
    k = self.__keys_order__.pop()
    v = dict.pop(self, k)
    return k, v
</code></pre>
    </div>