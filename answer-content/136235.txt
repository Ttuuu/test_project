<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Doesn't work on all cases</h3>

<p>Consider a test case with 2 pots: <code>5, 7</code> and <code>k=1</code>.  Your program will return 10, thinking that the crow must fill both pots with 5 stones.  But actually the crow should just fill one pot with 7 stones, making the answer 7.</p>

<h3>Alternative algorithms</h3>

<p>I think that there are two strategies for eliminating a single pot:</p>

<ol>
<li><p>Fill one pot with enough stones to fill the biggest pot.</p></li>
<li><p>Fill all pots each with enough stones to fill the smallest pot.  This guarantees that the smallest pot will be filled.</p></li>
</ol>

<p>Now, to fill \$k\$ pots, you can't just do the greedy strategy of "for the next pot, pick the minimum stones for case #1 and case #2".  That is because case #1 only eliminates one pot from contention, but case #2 also fills all the other pots with some stones, which could have benefits for future iterations.</p>

<p>I can imagine a brute force solution that recursively tries both strategies at each step, but that would take \$O(2^k)\$ time.  There is most likely a better way of doing this.  Perhaps a linear time solution would be:</p>

<p>For each <code>i</code> in <code>0..k</code>: Try filling <code>i</code> largest pots with strategy #1, and the <code>k-i</code> smallest pots with strategy #2.  Then pick the <code>i</code> that required the least stones and that is the answer.</p>

<p>I haven't thought enough about the problem to know if the above algorithm actually produces the correct answer.</p>

<h3>Another consideration</h3>

<p>Consider a test case with 3 pots: <code>5, 5, 20</code> and <code>k=1</code>.  In this case, the answer should be 10 and not 15, because after filling two pots with 5 stones, it is guaranteed to have filled one of the pots of size 5.  So this should be considered when using strategy #2 above.</p>
    </div>