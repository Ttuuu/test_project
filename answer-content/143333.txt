<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Initialisation of the list</strong></p>

<pre><code>array = []
for i in range(1, n):
    array.append(True)
</code></pre>

<p>calls <code>append</code> many times. There might be a better way. You could use list comprehension like this:</p>

<pre><code>array = [True for _ in range(1, n)]
</code></pre>

<p>but you could also use the <code>*</code> operator:</p>

<pre><code>array = [True] * (n-1)
</code></pre>

<p><strong>Boolean checks</strong></p>

<p>You could rewrite: <code>if array[j-2] != False</code> as <code>if array[j-2]</code> and <code>if array[i] == True</code> as <code>if array</code>.</p>

<p><strong>Variable name</strong></p>

<p><code>array</code> is a pretty bad name for an array. It could be a good idea to give a name that tells what's interesting about this array's content. As you use it to know whether a value is prime, I'd call it <code>is_prime</code> but you might find a better name.</p>

<p><strong>List comprehension (again)</strong></p>

<p>You could rewrite the final section of your function using a list comprehension.</p>

<pre><code>    return [i + 2 for i in range(0, n-1) if is_prime[i]]
</code></pre>

<p><strong>Loop like a native</strong></p>

<p>When you use the index to iterate over an array in Python, there is usually a better way to do what you want to achieve. I highly recommend <a href="http://nedbatchelder.com/text/iter.html">Ned Batchelder's presentation called : Loop Like A Native</a> to know more about this.</p>

<p>In your case, you could write:</p>

<pre><code>return [i + 2 for i, p in enumerate(is_prime) if p]
</code></pre>

<p><strong>Better algorithm</strong></p>

<p>The whole point of the sieve is not to use division (or the modulo operator).</p>

<p>I'd use something like:</p>

<p>import math</p>

<pre><code>def sieve(n):
    is_prime = [True] * n
    is_prime[0] = is_prime[1] = False
    for i in range(2, int(math.sqrt(n)) + 1):
        if is_prime[i]:
            for j in range(i * i, n, i):
                is_prime[j] = False
    return [i for i, p in enumerate(is_prime) if p]
</code></pre>
    </div>