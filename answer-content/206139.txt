<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>Kudos for proper formatting. And for including the headers you use, but no more.</p></li>
<li><p>Don't use <code>using namespace std;</code>. That namespace is <strong>not</strong> designed to be imported wholesale, thus doing so can have surprising and unpredictable results, which aren't even stable for minor changes in the implementation. Obvious conflicts, and silent changes are possible.</p></li>
<li><p>You are reading lines from the stream, just to turn around and put them into a string-stream from which you then read words?<br>
Doing such contortions is sub-optimal.</p></li>
<li><p>Using uniform-initialization allows you not to repeat the iterator-class-name for the default-constructed second argument.</p></li>
<li><p>There is no reason to special-case the input consisting of just one word.</p></li>
<li><p>Use a for-range-loop instead of a classic for-loop. Fumbling around with indices is error-prone.</p></li>
<li><p>If you need to do the same thing twice, consider encapsulating it in a function, or at least a lambda. Repetition is also error-prone.</p></li>
<li><p><code>return 0;</code> is implicit in <code>main()</code>.</p></li>
<li><p>Finally, if the same words are used very often, it might be a good idea to directly compute frequency in a <code>std::map</code> or <code>std::unordered_map</code> instead of reading all words, sorting, and then collating the input.<br>
I will not do so here.</p></li>
</ol>

<p>Doing all that, and more cleanup:</p>

<pre><code>#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;string&gt;
#include &lt;vector&gt;

int main() {
    std::vector&lt;std::string&gt; words(std::istream_iterator&lt;std::string&gt;(std::cin), {});
    std::sort(begin(words), end(words));

    auto p = words.data();
    auto n = 0ULL;
    auto output = [&amp;]{ std::cout &lt;&lt; *p &lt;&lt; ' ' &lt;&lt; n &lt;&lt; '\n'; };

    for (auto&amp;&amp; x : words) {
        if (x == *p) {
            ++n;
        } else {
            output();
            n = 1;
            p = &amp;x;
        }
    }
    if (n)
        output();
}
</code></pre>

<p>Considering it was an assignment for a computing-course, not demonstrating your understanding whatever lessons you had to date might have been a reason for marking you down.</p>
    </div>