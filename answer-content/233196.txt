<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Thanks for sharing your code.</p>

<p>This is what I think about it</p>

<h1>General Coding</h1>

<h2>program against interfaces</h2>

<p>Most of your variables are defines as <em>concrete types</em> (classes you actually instantiate). 
You should better declare them as <em>interface types</em> so that it is possible to exchange 
the concrete implementation without changing the code all over.</p>

<p>example</p>

<pre><code>static Map&lt;String, ArrayList&lt;String&gt;&gt; dictionaryMap = new HashMap&lt;String, ArrayList&lt;String&gt;&gt;();
</code></pre>

<p>should better be</p>

<pre><code>static Map&lt;String, List&lt;String&gt;&gt; dictionaryMap = new HashMap&lt;String, ArrayList&lt;String&gt;&gt;();
</code></pre>

<p>or even</p>

<pre><code>static Map&lt;String, Collection&lt;String&gt;&gt; dictionaryMap = new HashMap&lt;String, ArrayList&lt;String&gt;&gt;();
</code></pre>

<p>Problem here is that you need to know what interfaces are available and what the 
consequences are using them. The <a href="https://docs.oracle.com/en/java/javase/11/docs/api/overview-tree.html" rel="nofollow noreferrer">public API</a> 
is the place to find that information.</p>

<h2>Be consistent</h2>

<p>Choose the same approach for the same problem</p>

<p>E.g. you use two different types of loops</p>

<pre><code>    for (int i = 0; i &lt; sortString.length(); i++) {
        char c = sortString.charAt(i);
    //...
    // vs.
    for (String word : words) {
        addToMap(createMap(word), word);
    //...
</code></pre>

<p>Unless you really need the index variable for something else then accessing the actual 
object in the collection loops over you could (and should) stick to the <em>foreach</em> 
form</p>

<pre><code>    for (char c : sortString.toCharArray()) {
</code></pre>

<h2>Learn about the capabilities of the objects provided by the runtime</h2>

<p>Especially the class <code>Map</code> has some interesting methods your code could benefit from: 
The code</p>

<pre><code>    ArrayList&lt;String&gt; anagramList = dictionaryMap.get(key);
    if (anagramList == null) {
        anagramList = new ArrayList&lt;String&gt;();
        anagramList.add(word);
        dictionaryMap.put(key, anagramList);
    }
</code></pre>

<p>could be replaced by</p>

<pre><code>    ArrayList&lt;String&gt; anagramList = dictionaryMap.computeIfAbsent(key,()-&gt;new ArrayList&lt;String&gt;());
</code></pre>

<p>If you would know that beside (<code>Array-</code>)<code>List</code> which allows duplicates, the <em>Java 
Runtime</em> provides another collection type <code>Set</code> which does not hold duplicates, then 
you could even get rid of the other <code>if</code> in this method too:</p>

<pre><code>static Map&lt;String, Collection&lt;String&gt;&gt; dictionaryMap = new HashMap&lt;String, Collection&lt;String&gt;&gt;();

private void addToMap(String key, String word) {
    dictionaryMap.computeIfAbsent(key,()-&gt; new HashSet&lt;String&gt;())
                 .add(word);
 }
</code></pre>

<h2>Avoid arrays</h2>

<p>instead of arrays better use <code>Collection</code> types like any implementations of the <code>List</code> 
and  <code>Set</code> interfaces. They are more flexible and prevent you to copy data (yourself) 
when its size needs to be changed.</p>

<h2>use the <code>static</code> key word with intention</h2>

<p>You declared the variable <code>dictionaryMap</code> as a <em>class variable</em> although it is not 
accessed by any  static method. Unless you understand the consequences you should not use the <code>static</code> key word.</p>

<h2>narrow your interfaces</h2>

<p>Your method <code>init()</code> has a return value which is not needed since there is no caller 
of this method dealing with this return value. Methods with return value usually 
are harder to refactor. Especially its harder to split them into smaller methods.</p>

<h1>Naming</h1>

<p>Finding good names is the hardest part in programming, so always take your time to 
think about the names of your identifiers</p>

<h2>Please read (and follow) the <a href="http://www.oracle.com/technetwork/java/codeconventions-135099.html" rel="nofollow noreferrer">Java Naming Conventions</a>.</h2>

<p>This does not only apply to the casing of the identifiers. 
It also applies to how names are "constructed".
E.g.: you named a method <code>getAnagrams()</code>. 
By conventions the prefix <em>get</em> is reserved for methods, that do not do any processing 
but simply return a property of the object.
But your method does a lot more than that.
Therefore a better name could be <code>findAnagramsOf(String word)</code>.</p>

<h2>avoid single character names</h2>

<p>Since the number of characters is quite limited in most languages you will soon run 
out of names. This means that you either have to choose another character which is 
not so obviously connected to the purpose of the variable. And/or you have to "reuse" 
variable names in different contexts. Both makes your code hard to read and understand 
for other persons. (Keep in mind that you are that other person yourself if you look 
at your code in a few month!)</p>

<p>On the other hand in Java the length of identifier names is virtually unlimited. 
There is no penalty in any way for long identifier names. So don't be stingy with 
letters when choosing names.</p>

<h2>Choose your names from the problem domain</h2>

<p>Some of your identifiers (or at least parts of them) have technical meaning. 
But your identifiers should convey you <em>business solution</em>. </p>

<p>example: <code>characterCountMap</code>,  <code>c</code>, <code>sortString</code> or <code>arr</code>.</p>

<p>Remember that the technical details may change while the meaning of your identifiers 
in respect to the business problem will remain.
so this identifiers might better be: </p>

<p><code>characterCounts</code>, <code>currentCharacter</code>, <code>sortedCharacters</code> or <code>wordCharacters</code>.</p>
    </div>