<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are a few suggestions on how to improve the code:</p>
<h3>State the intent</h3>
<p>What is the purpose of the function? What is the input, what is the output? In human words, what does the algorithm do? A <code>docstring</code> answering those basic questions would be helpful. A series of concise <code>unit tests</code> would be great.</p>
<p>I ran the function to have a look at the output:</p>
<pre><code>&gt;&gt;&gt; text = "The weather is not good."
&gt;&gt;&gt; result = negate_sequence(self=None, text=text)
&gt;&gt;&gt; print(result)

['the', 'weather', 'the weather', 'is', 'weather is', 'the weather is', 'not', 'is not',
'weather is not', 'not_good', 'not not_good', 'is not not_good']
</code></pre>
<p>This doesn't ring a bell with me, so I stopped trying to understand the purpose.</p>
<h3>Avoid stateful loops</h3>
<p>Iteration <code>i</code> is coupled to iteration <code>i-1</code> by the <code>negation</code> variable, this makes the logic hard to understand and error prone. If you work on bigrams/trigrams, I'd create a list of bigrams/trigrams and iterate over the tuples. This decouples the iterations.</p>
<h3>Breakup long functions</h3>
<p>This has almost endless benefits, as a starting point see <a href="https://medium.com/@efexen/keeping-it-short-8d1cdeca076a" rel="nofollow noreferrer">this article</a>. Some possibilities:</p>
<ul>
<li>Have the text broken up into all lowercase and without punctuation by <code>extract_words(text)</code></li>
<li>Have the list of trigrams created by <code>make_trigrams(words)</code></li>
<li>Inspect the trigrams by <code>process(trigrams)</code></li>
<li>If needed, have some kind of <code>aggregate(results)</code></li>
</ul>
<p>Once this is done, I guess we are much better to prepared to identify bugs and to further improve functionality.</p>
    </div>