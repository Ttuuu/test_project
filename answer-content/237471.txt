<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I dabble in music so your post caught my eye.</p>

<p>Here are my thoughts:  </p>

<ol>
<li><p>If I had to pick one word to describe the app, it would be “procedural”. You have successfully defined an algorithm, but I'd say that it reads more like FORTRAN than C#. It even includes <code>goto</code>… which I've never seen used before in C#.</p></li>
<li><p>When working in an object-oriented language, I prefer to let the domain drive the object model. In my experience, modelling what exists in reality goes a long way toward making software maintainable and expandable. </p></li>
<li><p>Instead of a giant <code>switch</code> statement, you might want to go with a <code>Dictionary&lt;string, int&gt;</code></p></li>
</ol>

<p>In my spare time I whipped up my take on an object-oriented musical scale and chord “generator” app, which I have posted here: <a href="https://github.com/lucidobjects/MusicalKeys" rel="nofollow noreferrer">https://github.com/lucidobjects/MusicalKeys</a></p>

<p>In keeping with my point #2, there are a bunch of objects, and certainly a lot more lines of code. But, I feel the object model gives us the beginnings of a foundation upon which we could build a music theory app of arbitrary size -  and remain sane in the process.</p>

<p>My app lacks some of the features that yours has, like interactive input and modes. But, my aim was to show an object-oriented approach to the problem rather than achieve feature parity.</p>

<p>Here’s a screenshot of the class files. While the preferred terminology may vary from musician to musician, various elements of music theory are present and accounted for.<br>
<a href="https://i.stack.imgur.com/fdYpN.jpg" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/fdYpN.jpg" alt="Classes"></a></p>

<p>To see how the program runs, check out <a href="https://github.com/lucidobjects/MusicalKeys/blob/master/MusicalKeys/App.cs" rel="nofollow noreferrer">App.cs</a>.</p>

<pre><code>public void Run()
{
    var steps = new Steps();
    var scalePatterns = getScalePatterns(steps).Select(p =&gt; p as Pattern).ToList();
    var intervals = new Intervals();
    var chordPatterns = getChordPatterns(intervals).Select(p =&gt; p as Pattern).ToList();
    var tones = new Pitches();

    ///define the Key of A and output individual elements from it
    var keyOfA = new Key(tones.A, scalePatterns, chordPatterns);
    Console.WriteLine(keyOfA.Scales.Get("Major").ToString());
    Console.WriteLine(keyOfA.Scales.Get("Natural Minor").ToString());
    Console.WriteLine(keyOfA.Scales.Get("Melodic Minor").ToString());
    Console.WriteLine(keyOfA.Chords.Get("M").ToString());
    Console.WriteLine(keyOfA.Chords.Get("M7").ToString());
    Console.WriteLine(keyOfA.Chords.Get("7").ToString());
    Console.WriteLine(keyOfA.Chords.Get("m7").ToString());
    Console.WriteLine(keyOfA.Chords.Get("m7b5").ToString());
    Console.WriteLine(keyOfA.Chords.Get("dim7").ToString());
    Console.WriteLine();

    ///shortened syntax to define the Key of F# and output all of its scales and chords
    Console.WriteLine(new Key(tones.Fsharp, scalePatterns, chordPatterns).ToString());

    ///define and print a single scale
    var scalePattern = new StepPattern("Major Scale", "WWHWWWH");
    var scale = new ToneSet(tones.Dsharp, scalePattern);
    Console.WriteLine(scale.ToString());

    ///define and print a single chord
    var chordPattern = new IntervalPattern("Major 7th", "M7", "P1 M3 P5 M7");
    var chord = new ToneSet(tones.C, chordPattern);
    Console.WriteLine(chord.ToString());

    ///define and print another single chord
    var chordPattern2 = new IntervalPattern("Dominant Seventh", "7", "P1 M3 P5 m7");
    var chord2 = new ToneSet(tones.G, chordPattern2);
    Console.WriteLine(chord2.ToString());
}
</code></pre>

<p>And here’s the output:<br>
<a href="https://i.stack.imgur.com/KBPuv.jpg" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/KBPuv.jpg" alt="Output"></a></p>
    </div>