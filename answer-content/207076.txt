<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>An alternative approach can be using methods introduced with Java 8, the <code>removeIf</code> for processing the data and the <a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#max" rel="nofollow noreferrer">Stream API</a> for creating the data to be processed. </p>

<pre><code>import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

// 100 people are standing in a circle with gun in their hands.
// 1 kills 2, 3 kills 4, 5 kills 6 and so on till we are left with only one person.
// Who will be the last person alive. Write code to implement this efficiently.
public class Gunmen {
    public static void main(String[] args) {
        List&lt;Integer&gt; gunmen = IntStream.iterate(1, i -&gt; i + 1).limit(100).boxed().collect(Collectors.toList());

        while (gunmen.size() != 1) {
            // If there are odd number of gunmen, the last will kill the first
            final boolean willLastGunmanKillFirst = gunmen.size() % 2 != 0;

            // Start killing from 1.. All gunman that reside in even indices will be removed..
            gunmen.removeIf(integer -&gt; gunmen.indexOf(integer) % 2 != 0);

            // Kill the first if needed
            if (willLastGunmanKillFirst) {
                gunmen.remove(0);
            }
        }

        System.out.println(gunmen); // [73]
    }
}
</code></pre>
    </div>