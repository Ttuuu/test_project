<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Style points</h2>
<ul>
<li><p>Why assign a variable when the reference is immediately dropped on returning from the function. In function <code>createCamera</code> the variable <code>let camera = new THREE.PerspectiveCamera(fov, aspect, near, far);</code> is never used???</p>
</li>
<li><p>Use <code>const</code> for variables that do not change.</p>
</li>
<li><p>Name arguments when possible such that you can use object property shorthand to put them in an object. Eg you named color <code>col</code> and then create an object <code>{ color: col }</code> but if you named the argument <code>color</code> you could then create the same object as <code>{ color }</code></p>
</li>
</ul>
<h2>Building a framework</h2>
<p>You will be better of putting all this functionality into an object, keeping the global namespace free of clutter and providing a framework that you can build upon as the needs arise.</p>
<h2>Example</h2>
<pre><code>const utils = {
    create: {
        material(color) { return new THREE.MeshBasicMaterial({color}) },
        camera(...args) { return new THREE.PerspectiveCamera(...args) },
        cube(width, height, depth, color) {
            return new THREE.Mesh(
                new THREE.BoxGeometry(width, height, depth), 
                utils3.create.material(color)
            );
        },
        scene(color) {
            const scene = new THREE.Scene();
            scene.background = new THREE.Color(color);
            return scene;
        },
        renderer(width, height) {
            const renderer = new THREE.WebGLRenderer();
            renderer.setSize(width, height);
            return renderer;
        },
    }
};
</code></pre>
    </div>