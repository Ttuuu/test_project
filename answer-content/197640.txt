<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><code>while</code> loops are not that common in Python. Instead, we prefer to iterate over elements directly using <code>for</code> loops.</p>

<p>In your case, using a running index of last modified value, you can compare the current value with the last modified to easily skip duplicates:</p>

<pre><code>index_to_update = 0
for element in nums:
    if element &gt; nums[index_to_update]:
        index_to_update += 1
        nums[index_to_update] = element
</code></pre>

<p>this approach store the number of elements updated in <code>index_to_update</code> but the first element (<code>0</code> in your example) is never updated as it will never be strictly greater than the front of the list. So you need to account for it manually in your return value:</p>

<pre><code>return index_to_update + 1
</code></pre>

<p>However, this approach lead to wrong results with empty lists, so you also have to take it into account:</p>

<pre><code>def remove_duplicates(nums):
    if not nums:
        return 0

    index_to_update = 0
    for element in nums:
        if element &gt; nums[index_to_update]:
            index_to_update += 1
            nums[index_to_update] = element

    return index_to_update + 1
</code></pre>

<p>Note the use of snake_case in the name of the function as per <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP8</a> guidelines. I also removed <code>self</code> to make this a regular function as there is absolutely no need to have this in a class.</p>
    </div>