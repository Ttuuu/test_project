<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>"I'd be happy to learn if there is a better a.k.a. more elegant or more performant way of doing this!"</p>
</blockquote>

<p>The following is at least a more performant way.</p>

<p>Keeping procedural-style state variables on the entries sorted by value seems the most natural, as most direct.</p>

<pre><code>    final AtomicInteger oldValue = new AtomicInteger();
    final AtomicInteger distinctCount = new AtomicInteger();
    map.entrySet().stream()
        .sorted(Comparator.comparing(Map.Entry&lt;String, Integer&gt;::getValue))
        .forEachOrdered(e -&gt; {
            int newValue = e.getValue().intValue() == oldValue.intValue()
                ? distinctCount.get()
                : distinctCount.incrementAndGet();
            oldValue.set(e.getValue().intValue());
            e.setValue(newValue);
        });
</code></pre>

<p>Admittedly AtomicInteger is abused just to have a final reference.</p>

<p>Though in real functional languages the two state variables would become as collectors of the stream, it seems in java the API is still too cumbersome to create just for that an accumulator (like summing).</p>

<p>Also one can immediately "correct" the map in-situ, not needing to create a new collection. As the entries are backed by the original map.</p>

<p>In short this seems the most sensible solution, though somehow not very elegant.</p>

<p>One could make a <code>class DistinctCounter&lt;T&gt;</code> with two fields (T/Integer and int), if this would be a reusable piece of code: numbering distinct fields.</p>
    </div>