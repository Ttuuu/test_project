<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>After battling off-by-one errors, I managed to refactor after revisiting the computation model.</p>

<pre><code>import math

def max_subarray_sum(A):
    def solve_partition(lo, hi):
        if lo == hi - 1:
            return A[lo]

        m = lo + (hi - lo) // 2
        L = solve_partition(lo, m)
        R = solve_partition(m, hi)

        left_sum = -math.inf
        _sum = 0
        for i in range(m - 1, lo - 1, -1):
            _sum += A[i]
            left_sum = max(left_sum, _sum)

        right_sum = -math.inf
        _sum = 0
        for j in range(m, hi):
            _sum += A[j]
            right_sum = max(right_sum, _sum)

        return max(max(L, R), left_sum + right_sum)

    return solve_partition(0, len(A))
</code></pre>

<p>Output:</p>

<pre><code>&gt;&gt;&gt; print(max_subarray_sum([4, -1, 2, 1])
6
</code></pre>

<p>Recursion Tree, (maximum sum in brackets):</p>

<pre><code>                [4, -1, 2, 1] (6)
                /            \
           [4, -1](3)         [2, 1](3) 
           /     \             /     \
        [4](4)   [-1](-1)     [2](2)  [1](1)
        /          \          /        \
       4           -1        2          1
</code></pre>

<p>Moving from <code>mid</code> to <code>low</code> appears to be just how the algorithm works, moving in the opposite direction, yields inaccurate results when calculating the cross section.</p>
    </div>