<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First off, you should <a href="https://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice">avoid <code>using namespace ::std</code></a>.</p>

<p>In <code>Animal</code>, <code>getOrder</code> and <code>getType</code> should be <code>const</code> (<code>int getOrder() const</code>).  Since they're defined within the class definition, you don't need to include the <code>inline</code> keyword.  Similarly, getters in the derived classes should be <code>const</code>.</p>

<p>It is rarely ever necessary to use the <code>this</code> keyword, and the places where you use <code>this-&gt;</code> to access a member variable can do without it.</p>

<p><code>Compare</code> should also be <code>const</code> (and take its parameter as a <code>const Animal *</code>, and can be simplified to <code>return _order &gt; animal-&gt;_order;</code>.</p>

<p>You never delete any of the memory you allocate with <code>new</code>.</p>

<p>You should declare a virtual destructor for <code>Animal</code> since it is used as a base class.  It isn't a direct problem here, since you never delete any of the memory you allocate, but if you'd delete Animals you dequeue, you'd still leak memory as the strings in the derived classes would not be freed.</p>

<p>In <code>AnimalQueue</code> you can have separate <code>enqueue</code> methods that take <code>Cat *</code> and <code>Dog *</code> parameters.  This would avoid needing to have all that code to check the type, and would work better if you have further derived classes (like "Tiger" derived from "Cat" or "Wolf" derived from "Dog").  The generic <code>enqueue(Animal *)</code> can call the proper overloaded <code>enqueue</code> after checking the result of the dynamic cast.  Something like</p>

<pre><code>if (auto cat = dynamic_cast&lt;Cat*&gt;(animal))
    enqueue(cat);
else if (auto dog = dynamic_cast&lt;Dog*&gt;(animal))
    enqueue(dog);
else /* error handling */;
</code></pre>

<p>assuming you're using a compiler that supports the variable declarations in <code>if</code> conditional expressions.</p>

<p><code>dequeue</code> has several bugs.  It will attempt to remove elements from empty containers, and could also try to access elements from empty containers.</p>

<p><code>printQueue</code> should be <code>const</code>, and should use iterators to print the contents of the queues.  Since displaying the two queues has a bunch of duplicated code, make a function that will display one queue and call that for each queue you want to display.</p>

<p><code>getDogQueue</code> and <code>getCatQueue</code> should be const and return const references.</p>
    </div>