<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Generics</h3>

<p>When you say, <code>ArrayList&lt;ArrayList&lt;?&gt;&gt;</code>, you are saying that there is a type but that you don't know what it is.  So you write it as a <code>?</code>.  </p>

<p>But in your code, you are putting <code>ArrayList&lt;Attribute&gt;</code> and <code>ArrayList&lt;Group&gt;</code> into the larger list.  These are not one type.  So it has to find a type that covers both <code>Attribute</code> and <code>Group</code>.  Absent both extending or implementing some common class or interface, that will be <code>Object</code>.  So <code>?</code> is actually <code>Object</code> in your code.  </p>

<p>It is natural to think that <code>?</code> is a wildcard that can match multiple things simultaneously.  But it is not.  It represents exactly one type at a time.  You just avoid having to say which type.  As such, I don't think that it is what you want to use here.  </p>

<h3>Cast by element not collection</h3>

<p>The general way to fix this warning on something like </p>

<blockquote>
<pre><code>    ArrayList&lt;Attribute&gt; listAttrs = (ArrayList&lt;Attribute&gt;) lists.get(ATTRIBUTES);
</code></pre>
</blockquote>

<p>would be something like </p>

<pre><code>    List&lt;Attribute&gt; listAttrs = new ArrayList&lt;&gt;();
    for (Object attr : lists.get(ATTRIBUTES)) {
        if (attr instanceof Attribute) {
            listAttrs.add((Attribute) attr);
        }
    }
</code></pre>

<p>You can often leave off the <code>instanceof</code> check because you know what the result should be.  </p>

<p>I changed from the implementation (<code>ArrayList</code>) to the interface (<code>List</code>), as is customary in Java when you aren't using implementation specific methods unavailable to the interface.  </p>

<p>But I wouldn't recommend that code for this specific problem.  You don't really need to cast here.  You control the code at both ends and in between.  Just write it without casts.  </p>

<h3>Custom return type</h3>

<p>The most direct way to fix this specific problem is to replace your return value with a custom class.  </p>

<pre><code>class AttributesAndGroups {

    private List&lt;Attribute&gt; attributes;

    private List&lt;Group&gt; groups;

    public void setAttributes(List&lt;Attribute&gt; attributes) {
        this.attributes = attributes;
    }

    public List&lt;Attribute&gt; getAttributes() {
        return attributes;
    }

    public void setGroups(List&lt;Group&gt; groups) {
        this.groups = groups;
    }

    public List&lt;Group&gt; getGroups() {
        return groups;
    }

}
</code></pre>

<p>You can use this like </p>

<pre><code>        AttributesAndGroups result = new AttributesAndGroups();
        result.setAttributes(listAttrs);
        result.setGroups(listGroups);
        return result;
</code></pre>

<p>and in the caller </p>

<pre><code>        AttributesAndGroups lists = getAttributesAndGroups();
        List&lt;Attribute&gt; listAttrs = lists.getAttributes();
        List&lt;Group&gt; listGroups = lists.getGroups();
</code></pre>

<p>No casts (unchecked or otherwise).  </p>

<p>There's a lot of boilerplate code in the class.  It's possible to avoid that here.  </p>

<h3>Pass to the method</h3>

<p>Another alternative would be to pass the lists into the helper method rather than have the method initialize them.  </p>

<pre><code>        List&lt;Attribute&gt; listAttrs = new ArrayList&lt;&gt;();
        List&lt;Group&gt; listGroups = new ArrayList&lt;&gt;();
        fillAttributesAndGroups(listAttrs, listGroups);
        request.setAttribute("listAttrs", listAttrs);
        request.setAttribute("listGroups", listGroups);
</code></pre>

<p>I changed the name to be more representative of the revised implementation.  </p>

<p>And then the method signature would be </p>

<pre><code>private void fillAttributesAndGroups(List&lt;Attribute&gt; listAttrs, List&lt;Group&gt; listGroups) {
</code></pre>

<p>Now just delete </p>

<blockquote>
<pre><code>    ArrayList&lt;ArrayList&lt;?&gt;&gt; retList = new ArrayList&lt;ArrayList&lt;?&gt;&gt;();
        ArrayList&lt;Attribute&gt; listAttrs = new ArrayList&lt;Attribute&gt;();
        retList.add(listAttrs);
        ArrayList&lt;Group&gt; listGroups = new ArrayList&lt;Group&gt;();
        retList.add(listGroups);
    return retList;
</code></pre>
</blockquote>

<p>And the remainder of your code should function normally.  </p>

<p>Again, no casts needed.  And this code is much terser, particularly if this is the only time you call it.  </p>

<p>Another alternative would be to pass <code>request</code> into the method, but I won't try to implement that here.  That would allow you to make the lists inside the method again.  </p>
    </div>