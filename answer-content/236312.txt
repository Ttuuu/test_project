<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A potential solution to points #1 and #2 is to rework some of the recursive logic of the code. The basic premise is to rework the expression so it is more like:</p>

<p><code>expression := [datum] [lparen expression rparen]</code></p>

<p>This allows it to handle brackets by recursively calling itself until they are gone without using a bracket counter. I won't code the solution for you, I will leave that to you but I will run you through the basic logic. It firstly has to check if the next character is a lparen or not. If it is not an lparen then it runs parse_datum. If it is an lparen then it runs advance and then runs parse_expression. Once that parse_expression finishes running, it can check if there is an rparen, if there is then it can continue, otherwise it will raise an error, as they are unmatched parentheses.</p>

<p>The only other thing is that your language needs the outer item to be in parentheses but that can be implemented simply by a check for an lparen before passing it to the parse_expression method.</p>
    </div>