<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>#include&lt;iostream&gt;
#include&lt;vector&gt;
#include&lt;random&gt;
#include&lt;chrono&gt;
</code></pre>

<p>Leave some space between the <code>#include</code>s and the rest of your code, that's easier to read. Besides, I really like <code>&lt;chrono&gt;</code> myself too, but you don't seem to use it afterwards.</p>

<pre><code>using namespace std;
using namespace std::chrono;
</code></pre>

<p><code>using</code> directives for a whole namespace is a bad idea. You risk conflicts between the names defined in <code>std</code> (and there's quite a lot of them) and those you define yourself. Safety is worth a few more keystrokes.</p>

<pre><code>vector&lt;int&gt; merge(vector&lt;int&gt; a,vector&lt;int&gt; b){
</code></pre>

<p>That function signature means you're passing <code>a</code> and <code>b</code> by value, that is to say you copy the argument vectors. It might be the good move sometimes, but here it isn't, because you only read them. So <code>const std::vector&lt;int&gt;&amp; a, const std::vector&lt;int&gt;&amp; b</code> is better.</p>

<pre><code>    int i=0;
    int j=0;
</code></pre>

<p><code>i</code>, <code>j</code>, why not? but it doesn't scream what you'll be using those variables for.</p>

<pre><code>    vector&lt;int&gt; result;
    while(i&lt;a.size()&amp;&amp;j&lt;b.size()){
</code></pre>

<p>I would rather use iterators in the first place (I mean, in the function's signature), because:</p>

<ul>
<li>it avoids comparison issues (<code>vector.size()</code> is unsigned, whereas <code>i</code> and <code>j</code> are signed) </li>
<li>it makes it easier to write and use generic code</li>
<li><p>it allows you to merge sequences which are only a part of a container, or even inside the same container.</p>

<pre><code>if(a[i]&lt;b[j]){
</code></pre></li>
</ul>

<p>There's a trick here: if <code>a[i]</code> == <code>b[j]</code> you'll insert <code>b[j]</code> first. It might be innocuous -it is for an <code>int</code>- but programmers expect that <code>min(a, b)</code> will return <code>a</code> if <code>a == b</code>. Since a sorting algorithm is a good candidate for abstraction (a vector of strings is sorted the same way as a vector of ints or floats), you should respect that rule.</p>

<pre><code>        result.push_back(a[i]);
        i++;
</code></pre>

<p>Unless you need to keep track of the old value, use pre-incrementation (<code>++i</code>) since <code>i++</code> creates and returns a temporary value.</p>

<pre><code>        }
        else{
            result.push_back(b[j]);
            j++;
        }
    }
    while(i&lt;a.size()){
        result.push_back(a[i]);
        i++;
    }
    while(j&lt;b.size()){
        result.push_back(b[j]);
        j++;
    }
</code></pre>

<p>copy and paste is an anti-pattern. Standard algorithms will provide what you need in a more elegant way, especially if you use iterators: <code>std::copy(current_a, a.end(), std::back_inserter(result));</code></p>

<pre><code>    return result;
}

vector&lt;int&gt; mergesort(vector&lt;int&gt; a,int low,int hi){
    vector&lt;int&gt; b,c,result;
    if(low==hi)
        return {a[hi]};
    b=mergesort(a,low,(low+hi)/2);
    c=mergesort(a,(hi+low)/2+1,hi);
    result=merge(b,c);
    return result;
}
</code></pre>

<p>This part is all right, even if I believe you should try to reduce the place you need to merge-sort or at least the number of allocations.</p>

<pre><code>int main(){

    std::random_device rd; // obtain a random number from hardware
    std::mt19937 eng(rd()); // seed the generator
    std::uniform_int_distribution&lt;&gt; distr(0,90); // define the range
    vector &lt;int&gt; num;
    for(int i=0;i&lt;30;i++)
        num.push_back(distr(eng));    
    vector&lt;int&gt; a=mergesort(num,0,num.size()-1);
    for(auto &amp;i:a)
</code></pre>

<p>You generally don't take integers by reference (a reference is the size of or bigger than an <code>int</code>, and you don't take non-const references when you don't modify the variable, which you don't.</p>

<pre><code>        cout&lt;&lt;i&lt;&lt;" ";  
}
</code></pre>
    </div>