<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Time will tell if your question is considered a worthy Code Review question, but till then I'ld like you to give a short review on your code nevertheless.</p>

<h1>Format function</h1>

<p>You could reduce the code duplication in the format function and make use of <code>.format</code> or f-strings (from Python 3.6 onwards).</p>

<pre class="lang-py prettyprint-override"><code>def sizeof_fmt_rev(num, suffix='B'):
    for unit in ['', 'Ki', 'Mi', 'Gi', 'Ti', 'Pi', 'Ei', 'Zi']:
        if abs(num) &lt; 1024.0:
            break
        num /= 1024.0
    else:
        # this part is only executed if the loop was not left with a break
        unit = 'Yi'
    return f"{num:.1f}{unit}{suffix}"
</code></pre>

<p>This uses <a href="https://stackoverflow.com/a/9980160/5682996"><code>for ... else</code></a>, one of the less well-known features of Python and only has a single line where the format expression has to be written. <strike>I see a chance to build something using <a href="https://docs.python.org/3/library/math.html#math.log" rel="nofollow noreferrer"><code>math.log</code></a> instead of that loop, but I will leave that as an exercise to you.</strike> You can even build something that works without a loop, but at least the version I came up with (found below) is actually slower than the original implementation.</p>

<pre><code>def sizeof_fmt_rev_log(num, suffix='B'):
    exponent = min(int(math.log(abs(num), 1024)), 8)
    num /= 1024**exponent
    unit = ('', 'Ki', 'Mi', 'Gi', 'Ti', 'Pi', 'Ei', 'Zi', 'Yi')[exponent]
    return f"{num:.1f}{unit}{suffix}"
</code></pre>

<p>I used</p>

<pre><code>for i in range(10):
    num = 3.8 * 1024**i
    print(sizeof_fmt_rev(num))
    assert sizeof_fmt(num) == sizeof_fmt_rev(num)
    assert sizeof_fmt(-num) == sizeof_fmt_rev(-num)
</code></pre>

<p>to test the revised version.</p>

<h1>Code</h1>

<p>As <a href="https://codereview.stackexchange.com/users/100620/">@AJNeufeld</a> mentions in his comment, you could use <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer"><code>map</code></a> to save yourself some typing</p>

<pre class="lang-py prettyprint-override"><code>print(
    statement.format(*map(sizeof_fmt, (input_file_size, chunk_size, block_size, surrendered_space)))
)
</code></pre>

<p>which is functionally equivalent to using a list comprehension:</p>

<pre><code>print(
    statement.format(*[
        sizeof_fmt(i)
        for i in (input_file_size, chunk_size, block_size, surrendered_space)
    ])
)
</code></pre>

<p>Both build upon a technique called <a href="https://stackoverflow.com/a/2238361/5682996">tuple unpacking</a>, but as you can see it can also be used with lists, other sequences, and <strike>maybe</strike> also iterables (if it is a generator, it will be consumed - thanks <a href="https://codereview.stackexchange.com/users/98493/">@Graipher</a>, who confirmed it/pointed it out in a <a href="https://codereview.stackexchange.com/questions/222472/apply-same-format-function-to-each-python-print-parameter/222486?noredirect=1#comment430937_222486">comment</a>).</p>
    </div>