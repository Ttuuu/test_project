<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>Normally, merging lists is done in place by relinking the <code>next</code> pointers. If you want to keep the original lists intact, I recommend to make theirs copies, and merge copies in an idiomatic way. This way the actual merge doesn't need to worry about memory problems.</p>

<p>Try it and see how the SRP shines here. It should address your immediate problem with code duplication.</p></li>
<li><p>It is perfectly all right to merge a list with an empty one. It is also all right to merge two empty lists. Failing in</p>

<pre><code>    if((!list1) || (!list2)){
        return EMPTY_LIST;
    }
</code></pre>

<p>is not correct.</p></li>
<li><p>There is no point to precompute the length of the merged list. The idiomatic way is to split merging into two phases:</p>

<pre><code>/* An actual merge...*/
while (list1 &amp;&amp; list2) {
    ....
}
/* ...followed by appending the data from a non-empty list. */

/* Notice that you shouldn't even care which list is not empty */
while (list1) {
    .... /* append data from list1 to the merged list */
}
while (list2) {
    .... /* append data from list2 to the merged list */
}
</code></pre>

<p>It is worth mentioning that the last two loops are identical, and should be factored out into a function of its own right.</p></li>
<li><p>The special case of the very first iteration can be avoided by using a dummy head. I presume that you have a definition along the lines of</p>

<pre><code> struct node {
     some_type x;
     struct node * next;
 };
</code></pre>

<p>(which is further <code>typedef struct node * Node</code>). Declare a</p>

<pre><code> struct node merged_head_dummy;
</code></pre>

<p>and eventually <code>return merged_head_dummy.next</code>. See how the special case disappears.</p>

<p>BTW, this is a strong case against hiding a pointer behind a typedef.</p></li>
<li><p>There is no need to parenthesize <code>(*tmp)</code>.</p></li>
</ul>
    </div>