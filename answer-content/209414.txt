<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I guess that the relevant piece of code is the <code>twoSumExactWithList</code> method and for now I will ignore the rest... </p>

<p>I think that depending on the context, e.g. the principles used in the project that you intent to use, this code you could either fully embrace collections or stick to arrays... but your code does a combo of both where the arguments are naked arrays and the returns uses collections... so please choose between the two. </p>

<p>If you choose arrays a possible return type is <code>int[][]</code> where one of the two dimensions is 2. representing first vs second index of the pair. In practice <code>int[2][]</code> is potentially more efficient than <code>int[][2]</code> but perhaps the Jit may make it irrelevant. Perhaps you could have a IntPair[] where <code>IntPair</code> is a pair of ints struct-like class.</p>

<p>If you choose collections... then the arguments should be <code>List&lt;Integer&gt; nums, int target</code>. The result is kind-of fine... but don't commit to return an <code>ArrayList</code> but rather a <code>List</code>; don't give any details on the implementation that are not necessary. To encode the index pair, consider the use of a custom class <code>IntPair</code> again... List is correct but seems a bit overkill considering that we know is always two and exactly two elements.</p>

<p>As for the method body... The varible types should be a general as they can be... so <code>map</code>'s type should be <code>Map&lt;Integer, Integer&gt;</code> rather than <code>HashMap&lt;...&gt;</code>, <code>outerList</code>'s should be <code>List</code> rather than <code>ArrayList</code> and so forth...</p>

<p>I would declare <code>complement</code> within the loop as it is not used outside of it and is rewritten at every iteration. <code>innerList</code> would go within the if within the for.</p>

<p>Whenever possible I would declare variables as <code>final</code> to give an extra hint to the compiler/optimizer that indeed these are not going to be changed... eg. <code>final int[] nums, final int target</code>, <code>final Map&lt;Integer, Integer&gt; map</code>, <code>final int complement</code>.</p>

<p>I would rename <code>map</code> to something a bit more informative as to what it contains...
so perhaps <code>indexByNumValue</code>?</p>

<p>I think your code would read and look much better with some additional spaces e.g.:</p>

<p><code>List&lt;Integer&gt; innerList=null;</code> to <code>List&lt;Integer&gt; innerList = null;</code>.</p>

<p><code>for(int i=0;i&lt;nums.length;i++) {</code> to <code>for (int i = 0; i &lt; nums.length; i++) {</code>.</p>

<p><code>}else {</code> to <code>} else {</code>.</p>

<p><code>if(</code> to <code>if (</code>.</p>

<p><code>nums,int</code> to <code>nums, int</code>.</p>

<p>etc...</p>
    </div>