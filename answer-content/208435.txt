<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Documentation and tests</strong></p>

<p>Before improving your code, is it important to write tests for it to make you you don't break anything.</p>

<p>As you do it, you might want that you need to be a bit clearer about the behavior of your function. Let's see what your functions return with a simple piece of code:</p>

<pre><code>def print_results():
    print("i, primeFactorization(i), reduce(i), isPrime(i)")
    for i in range(15):
        print(i, primeFactorization(i), reduce(i), isPrime(i))
</code></pre>

<p>Most results seem ok but why do we sometimes have "1" in the return value for <code>primeFactorisation</code>. In theory, we should have only prime numbers in it.</p>

<p>We could:</p>

<ul>
<li><p>write doc to specify what the functions does (return <strong>prime</strong> factorisation)</p></li>
<li><p>write tests for the actual expected behavior</p></li>
<li><p>fix the code</p></li>
</ul>

<p>Here are various snippets I've written to test the code. In a more serious project, you could use a testing framework.</p>

<pre><code>def test_is_prime():
    primes = [2, 3, 5, 7, 11, 13]
    not_primes = [0, 1, 4, 6, 8, 9, 10, 12, 14, 15, 100, 100000]
    for p in primes:
        assert isPrime(p), p
    for np in not_primes:
        assert not isPrime(np), np

def test_prime_factorization():
    prime_factorisations = {
        2: [2],
        3: [3],
        4: [2, 2],
        5: [5],
        6: [2, 3],
        7: [7],
        8: [2, 2, 2],
        9: [3, 3],
        10: [2, 5],
        11: [11],
        12: [2, 2, 3],
        13: [13],
        14: [2, 7],
    }
    for n, factors in prime_factorisations.items():
        ret = primeFactorization(n)
        assert ret == factors, str(n) + ": " + str(ret) + "!=" + str(factors)

def test_prime_factorization_randomised():
    import random
    n = random.randint(2, 10000)
    ret = primeFactorization(n)
    m = 1
    assert sorted(ret) == ret, "return is not sorted for n:" + str(n)
    for p in ret:
        assert isPrime(p), "factor " + str(p) + " is not prime for n:" + str(n)
        m *= p
    assert m == n, "product of factors does not lead to original value:" + str(n) + ", " + str(m)

if __name__ == '__main__':
    print_results()
    test_is_prime()
    test_prime_factorization()
    for i in range(300):
        test_prime_factorization_randomised()
</code></pre>

<p>Now, it feels fuch safer to improve the code.</p>

<p>Also, you could use this to perform benchmarks: compute the operations many times and/or on huge numbers to measure the time it takes.</p>

<p><strong>Style</strong></p>

<p>Python has a style guide called <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP 8</a>. I highly recommend reading it (many times) and trying to apply it as much as possible.</p>

<p>Among other things, the functions names should be in <code>snake_case</code>.</p>

<p><strong>Algorithm</strong></p>

<p>Splitting a problem into smaller problems and writing functions for these is usually a good idea.</p>

<p>Unfortunately, I am not fully convinced that the reduce functions really helps you here.</p>

<p>Let's see how things can be improved anyway.</p>

<p><strong>Small simplifications/optimisations</strong></p>

<p>We could use the <code>divmod</code> builtin to get both the quotient and the remainder of the division.</p>

<p>The <code>ctr</code> variable seems useless. It is used to <code>break</code> after we've incremented it. We could just <code>break</code> directly.</p>

<p>At this stage, we have:</p>

<pre><code>def reduce(n):
    n = abs(n)
    factors_list = []
    for i in range(2,n+1):
        p, q = divmod(n, i)
        if q == 0:
            factors_list.append(i)
            factors_list.append(p)
            break
    return factors_list
</code></pre>

<p>Now it is clear that we either add <code>i</code> and <code>p</code> to the list only once or we add nothing as all. We could make this clearer:</p>

<pre><code>def reduce(n):
    n = abs(n)
    for i in range(2,n+1):
        p, q = divmod(n, i)
        if q == 0:
            return [i, p]
    return []
</code></pre>

<p>Now, it is clear that the function:</p>

<ul>
<li>returns <code>[]</code> in the cases 0 and 1</li>
<li>return <code>[n, 1]</code> when n is prime</li>
<li>return <code>[d, n/d]</code> where d is the smallest (prime) divisisors otherwise.</li>
</ul>

<p>Also, <code>reduce</code> is called more than needed: everytime we do</p>

<pre><code>if isPrime(n):
    ret = reduce(n)
</code></pre>

<p>on a prime number, we actually perform reduce twice which is very expensice, in particular for primes as we iterate up to n.</p>

<p>Thus, we could get an optimisation boost by writing:</p>

<pre><code>def primeFactorization(n):
    """Return the prime factorisation of n in sorted order."""
    factors = reduce(n)
    if 1 in factors:
        return [n]
    primeFactors = []
    while True:
        for e in factors:
            new_factors = reduce(e)
            if 1 in new_factors:
                primeFactors.append(e)
                factors.remove(e)
            else:
                factors.extend(new_factors)
                factors.remove(e)
        if len(factors) == 0:
            break
    ret = sorted(primeFactors)
    return ret
</code></pre>

<p>Another key hindsight is prime factorisation is that the smallest divisors of <code>n</code> is at most <code>sqrt(n)</code> which limits the range you have to look in.</p>

<p>In your case, we could use this in reduce, change slightly how reduce behaves and write:</p>

<pre><code>def reduce(n):
    """Return [a, b] where a is the smallest divisor of n and n = a * b."""
    n = abs(n)
    for i in range(2, int(math.sqrt(n)) + 1):
        p, q = divmod(n, i)
        if q == 0:
            return [i, p]
    return [n, 1]


def isPrime(n):
    """Return True if n is a prime number, False otherwise."""
    return n &gt; 1 and reduce(n) == [n, 1]


def primeFactorization(n):
    """Return the prime factorisation of n in sorted order."""
    factors = reduce(n)
    if factors == [n, 1]:  # prime
        return [n] 
    primeFactors = []
    while True:
        for e in factors:
            new_factors = reduce(e)
            if new_factors == [e, 1]:  # prime
                primeFactors.append(e)
            else:
                factors.extend(new_factors)
            factors.remove(e)
        if len(factors) == 0:
            break
    ret = sorted(primeFactors)
    return ret
</code></pre>

<p>which is <strong>much</strong> faster.</p>

<p>Then, you could get rid of:</p>

<pre><code>    if len(factors) == 0:
        break
</code></pre>

<p>by looping with <code>while factors</code>.</p>

<p>Then using, <code>list.pop()</code>, you could get rid of <code>remove</code> (which takes a linear time):</p>

<pre><code>def primeFactorization(n):
    """Return the prime factorisation of n in sorted order."""
    factors = reduce(n)
    if factors == [n, 1]:  # prime
        return [n]
    primeFactors = []
    while factors:
        e = factors.pop()
        new_factors = reduce(e)
        if new_factors == [e, 1]:  # prime
            primeFactors.append(e)
        else:
            factors.extend(new_factors)
    ret = sorted(primeFactors)
    return ret
</code></pre>

<p>Then it appears that the initial check is not really required as the logic is already performed inside the loop:</p>

<pre><code>def primeFactorization(n):
    """Return the prime factorisation of n in sorted order."""
    primeFactors = []
    factors = [n]
    while factors:
        e = factors.pop()
        new_factors = reduce(e)
        if new_factors == [e, 1]:  # prime
            primeFactors.append(e)
        else:
            factors.extend(new_factors)
    ret = sorted(primeFactors)
    return ret
</code></pre>

<p>We can actually get rid of the sorting by popping the first element of the list, thus generating the factors in order:</p>

<pre><code>def primeFactorization(n):
    """Return the prime factorisation of n in sorted order."""
    primeFactors = []
    factors = [n]
    while factors:
        e = factors.pop(0)
        new_factors = reduce(e)
        if new_factors == [e, 1]:  # prime
            primeFactors.append(e)
        else:
            factors.extend(new_factors)
    return primeFactors
</code></pre>

<p>Now, instead of a reduce function, we could write a somehow equivalent but easier to use <code>get_smallest_div</code> function. Taking this chance to rename all functions, the whole code becomes:</p>

<pre><code>import math

def get_smallest_div(n):
    """Return the smallest divisor of n."""
    n = abs(n)
    for i in range(2, int(math.sqrt(n)) + 1):
        p, q = divmod(n, i)
        if q == 0:
            return i
    return n


def is_prime(n):
    """Return True if n is a prime number, False otherwise."""
    return n &gt; 1 and get_smallest_div(n) == n

def get_prime_factors(n):
    """Return the prime factorisation of n in sorted order."""
    prime_factors = []
    factors = [n]
    while factors:
        n = factors.pop(0)
        div = get_smallest_div(n)
        if div == n:  # prime
            prime_factors.append(n)
        else:
            factors.extend([div, n//div])
    return prime_factors

def print_results():
    print("i, get_prime_factors(i), get_smallest_div(i), is_prime(i)")
    for i in range(15):
        print(i, get_prime_factors(i), get_smallest_div(i), is_prime(i))

def test_is_prime():
    primes = [2, 3, 5, 7, 11, 13]
    not_primes = [0, 1, 4, 6, 8, 9, 10, 12, 14, 15, 100, 100000]
    for p in primes:
        assert is_prime(p), p
    for np in not_primes:
        assert not is_prime(np), np

def test_prime_factorization():
    prime_factorisations = {
        2: [2],
        3: [3],
        4: [2, 2],
        5: [5],
        6: [2, 3],
        7: [7],
        8: [2, 2, 2],
        9: [3, 3],
        10: [2, 5],
        11: [11],
        12: [2, 2, 3],
        13: [13],
        14: [2, 7],
    }
    for n, factors in prime_factorisations.items():
        ret = get_prime_factors(n)
        assert ret == factors, str(n) + ": " + str(ret) + "!=" + str(factors)

def test_prime_factorization_randomised():
    import random
    n = random.randint(2, 10000)
    ret = get_prime_factors(n)
    m = 1
    assert sorted(ret) == ret, "return is not sorted for n:" + str(n)
    for p in ret:
        assert is_prime(p), "factor " + str(p) + " is not prime for n:" + str(n)
        m *= p
    assert m == n, "product of factors does not lead to original value:" + str(n) + ", " + str(m)

if __name__ == '__main__':
    start = time.perf_counter()
    import time
    print_results()
    test_is_prime()
    test_prime_factorization()
    for i in range(300):
        test_prime_factorization_randomised()
    print(get_prime_factors(9000000))
    print(get_prime_factors(9000000 * 701 * 701))
    print(time.perf_counter() - start)
</code></pre>

<p><strong>My solution for this</strong></p>

<p>If I was to write this from scratch, here is how I'd do it:</p>

<pre><code>def is_prime(n):
    """Return True if n is a prime number, False otherwise."""
    if n &lt; 2:
        return False
    return all(n % i for i in range(2, int(math.sqrt(n)) + 1))

def get_prime_factors(n):
    """Return the prime factorisation of n in sorted order."""
    prime_factors = []
    d = 2
    while d * d &lt;= n:
        while n % d == 0:
            n //= d
            prime_factors.append(d)
        d += 1
    if n &gt; 1:  # to avoid 1 as a factor
        assert d &lt;= n
        prime_factors.append(n)
    return prime_factors
</code></pre>
    </div>