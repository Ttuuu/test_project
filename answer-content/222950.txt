<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Design</h2>
<p>Please use a namespace for your classes. Polluting the global namespace is bad practice.</p>
<p>You implemented a singly linked list. With just a tiny bit more effort you could have implemented a doubly linked list which is arguably much easier to add all the functionality you would expect.</p>
<p>You use head/tail with nullptr. This means your code is full of tests for a <code>nullptr</code>. If you use a "Sentinel" then this will simplify the code tremendously and remove the need to check for nulls at all. Thus making it much easier to validate that you have done the code correctly.</p>
<p>Pop and guarantees. OK your <code>pop_XX()</code> work for you because you only support integer inside your list. But in the general case you can not support a pop that returns a value modifies the list and implements the strong exception guarantee. So what is the strong exception guarantee? Its a promise that your function either works correctly or throws an exception and does not change the state of the class. To solve this problem the standard containers do not return a value for <code>pop_XX()</code> instead they simple remove the item and return nothing (but provide a way of looking at the top thing that would be poped (<code>back()</code> <code>front()</code>). You may want to implement them the same way.</p>
<p>You have not made your object const correct. Any function that does not mutate the state of the object should be marked const.</p>
<p>The container is not templatized?</p>
<h2>Implementations.</h2>
<p>You have not implemented any memory management.</p>
<p>So your list leaks memory everywhere.</p>
<pre><code>{
    BLinkedlist list;

    list.push_back(1);
}
// You just leaked a Node.
  
</code></pre>
<p>Also you have not implemented the rule of three. So your class has serious errors when it comes to copying and would blow up if you added the delete you require. Currently it will just behave oddly and/or leak when you copy it.</p>
<pre><code>{
    BLinkedlist list1;
    list1.push_back(1);

    BLinkedlist list2(list1);
    list2.push_back(8);

    list1.display();  // Why does this list have an 8 in it?
}
</code></pre>
<p>You have not added any <code>MOVE</code> semantics. This means that in situations where the list could be moved your code actually would have to copy (but does not since you did not implement the rule of three). This would mean that it is ineffecient to move your list around.</p>
<pre><code>BLinkedlist createList()
{
   ... STUFF
}
{
     BLinkedlist  data = createList(); // We have a copy here
                                       // When it could have been moved
}
</code></pre>
<p>You use index's to refer to positions in the list.<br>
If you look at the standard library you will see we have abstracted away the concept of indexes (and pointers) to use iterators. I would take a look at the standard library to see how you can implement iterators for your class.</p>
<p>Also iterators are the interface between containers and algorithms. If your container does not support iterators then you can not use the standard algorithms on your container (these can be very useful).</p>
<h2>Examples:</h2>
<p>Please have a look at this example.</p>
<p><a href="https://codereview.stackexchange.com/a/126007/507">https://codereview.stackexchange.com/a/126007/507</a></p>
<p>It shows (at the end) how to implement a doubly linked list with a sentinel. You will see that the code is much simplified as a result.</p>
<h2>Code Review</h2>
<p>What does memory provide that you need in the header?</p>
<pre><code>#ifndef BLINKEDLIST_H
#define BLINKEDLIST_H

#include &lt;memory&gt;
</code></pre>
<hr>
<p>Why is the node publicly available?</p>
<pre><code>struct Node
{
    int key;
    Node* next;
};
</code></pre>
<p>I would make this a private member of <code>BLinkedlist</code>.</p>
<hr>
<pre><code>class BLinkedlist
{
public:
    BLinkedlist();
    // No destructor. Would expect this for anything the managed resources.
    ~BLinkedlist();

    // No copy operations.
    // Would expect this for anything with a destructor (ie had resources).
    BLinkedlist(BLinkedlist const&amp;);
    BLinkedlist&amp; operator=(BLinkedlist const&amp;);

    // No move operators:
    // Anything with expensive copy should look at having a move
    BLinkedlist(BLinkedlist&amp;&amp;) noexcept;
    BLinkedlist&amp; operator=(BLinkedlist&amp;&amp;) noexcept;


    // No swap function
    void swap(BLinkedlist&amp;) noexcept;
</code></pre>
<hr>
<p>Like normal variables I would iniutialize one member per line.</p>
<pre><code>BLinkedlist::BLinkedlist():size(0), head(nullptr), tail(nullptr)
{

}

// Like this:

BLinkedlist::BLinkedlist()
    : size(0)
    , head(nullptr)
    , tail(nullptr)
{}
</code></pre>
<hr>
<p>You can make your code a lot simpler by creating and initializing the value in a single line:</p>
<pre><code>void BLinkedlist::push_back(int value)
...
void BLinkedlist::push_front(int value)
...

/// Like this:

void BLinkedlist::push_back(int value)
{
    Node* newTail = new Node{value, nullptr};

    if (tail == nullptr)
    {
        head = newNode;
    }
    else
    {
        tail-&gt;next = newTail;
    }
    tail = newNode;
    ++size;
}

void BLinkedlist::push_front(int value)
{
    head = new Node{value, head};
    if(tail == nullptr)
    {
        tail = head;
    }
    ++size;
}
</code></pre>
<hr>
<p>Using an iterator would have really simplified this function:</p>
<pre><code>void BLinkedlist::insert(int idx, int value)
</code></pre>
<p>This is because your internal representation of the iterator can can accesses the nodes in the list directly and simply allow you to directly manipulate them. Also it would remove the need to check that you are inside the list as valid iterators are always inside the list.</p>
<hr>
<p>I don't see the need to check for the size in this function.</p>
<pre><code>int BLinkedlist::pop_front()
{
    if(head != nullptr &amp;&amp; size &gt;= 2)
    {
        int val = head-&gt;key;
        head = head-&gt;next;
        --size;
        return val;
    }
    else if(head != nullptr &amp;&amp; size == 1)
    {
        int val = head-&gt;key;
        head = nullptr;
        tail = nullptr;
        --size;
        return val;
    }
</code></pre>
<p>I would simplify to:</p>
<pre><code>   Node* old = head;
   head = old-&gt;next;
   if (head == nullptr) { 
       tail = nullptr;
   }
   --size;
   return old-&gt;value; // Yes yes I am still ignoring the delete.
</code></pre>
<p>Note: if the size is 1. Then head-&gt;next will also be <code>nullptr</code></p>
<p>But if you take the suggestion above and make the <code>pop_XX()</code> function not return anything then deleting the head becomes much simpler.</p>
<hr>
<p>OK. See lots of people do this.</p>
<pre><code>void BLinkedlist::display()
{
    Node* curr = head;
    while(curr != nullptr)
    {
        std::cout &lt;&lt; curr-&gt;key &lt;&lt; std::endl;
        curr = curr-&gt;next;
    }
}
</code></pre>
<p>First thing is that <code>std::cout</code> is not the only stream. So you should allow the user to pass the actual stream as a parameter. It can of course default to std::cout.</p>
<p>Next. Why are you using a while loop here. <code>for()</code> is much more concise (and most people would expect for here).</p>
<p>Next: This function does not mutate the object so we should mark it const.</p>
<p>Last: Prefer '\n' to <code>std::endl</code>. The difference is that <code>\n</code> will not flush the stream. Manually flushing the stream like this is the source of nearly all performance issues of the C++ streams. The stream will flush itself at the appropriate time so you usually don't need to force it.</p>
<pre><code>void BLinkedlist::display(std::ostream&amp; str = std::cout) const
{
    for(Node* curr = head; curr != nullptr; curr = curr-&gt;next)
    {
        str &lt;&lt; curr-&gt;key &lt;&lt; "\n";
    }
}
</code></pre>
<p>OK. Now that we can pass any stream in here you can add the standard way to stream output by defineing the output operator.</p>
<pre><code>std::ostream&amp; operator&lt;&lt;(std::ostream&amp; str, BLinkedlist const&amp; data)
{
    data.display(str);
    return str;
}
</code></pre>
<p>Now you can do this:</p>
<pre><code>int main()
{
    BLinkedlist   list;
    // Add Items.

    std::cout &lt;&lt; "Add list to output: " &lt;&lt; list &lt;&lt; "\n";
}
</code></pre>
<hr>
<p>Should be const</p>
<pre><code>bool BLinkedlist::empty()
int BLinkedlist::value_at(int idx)
int BLinkedlist::value_n_from_end(int idx)
int BLinkedlist::front()
int BLinkedlist::back()
</code></pre>
<hr>
<p>Note: When you templatize the class you will want to return by reference.</p>
<pre><code>int BLinkedlist::front()
{
    return head-&gt;key;
}
</code></pre>
<p>Which will also make you want to write two versions (a const and non const version)</p>
    </div>