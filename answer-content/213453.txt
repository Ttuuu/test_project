<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Simplifying your code</h3>

<p>Let's start here:</p>

<blockquote>
<pre><code>let capacity = nodes.reduce([Int]()) {
    if $0.contains($1.0) == false {
        return $0 + [$1.0]
    }
    return $0
}.count 
</code></pre>
</blockquote>

<p>The test </p>

<pre><code>if $0.contains($1.0) == false
</code></pre>

<p>is shorter (and – in my opinion – better) written as</p>

<pre><code>if !$0.contains($1.0)
</code></pre>

<p>Each invocation of the closure creates a new array. In such cases it is more efficient to use <code>reduce(into:)</code> with a closure that <em>updates</em> the array:</p>

<pre><code>let capacity = nodes.reduce(into: [Int]()) {
    if !$0.contains($1.0) {
        $0.append($1.0)
    }
}.count
</code></pre>

<p>But what this code actually does is to determine the number of distinct levels in the <code>nodes</code> array. That is simpler and more efficiently done with a <em>set:</em></p>

<pre><code>let capacity = Set(nodes.map { $0.0 }).count
</code></pre>

<p>Here</p>

<blockquote>
<pre><code>return nodes.reduce([[Int]](repeating: [], count: capacity), {
    var tmp = $0
    tmp[$1.0].append($1.1)
    return tmp
})
</code></pre>
</blockquote>

<p>a new nested array is created with each invocation of the closure. Again, this can be improved with <code>reduce(into:)</code>, so that the first function becomes</p>

<pre><code>func levelOrder(_ root: TreeNode?) -&gt; [[Int]] {
    guard let root = root else {
        return []
    }
    let nodes = recursiveVisit(root)
    let capacity = Set(nodes.map { $0.0 }).count
    return nodes.reduce(into: [[Int]](repeating: [], count: capacity), {
        $0[$1.0].append($1.1)
    })
}
</code></pre>

<p>I have only minor suggestions for the second function:</p>

<blockquote>
<pre><code>var nodes = [(Int, Int)]()
nodes.append((0, node.val))
</code></pre>
</blockquote>

<p>can be combined to </p>

<pre><code>var nodes = [(0, node.val)]
</code></pre>

<p>The results of the recursive calls can be appended to the <code>nodes</code> array directly:</p>

<pre><code>nodes += recursiveVisit(node.left).map {
    return ($0.0 + 1, $0.1)
}
nodes += recursiveVisit(node.right).map {
    return ($0.0 + 1, $0.1)
}
</code></pre>

<p>And if you use tuple <em>labels</em> then the code becomes better readable (and almost self-documenting):</p>

<pre><code>func recursiveVisit(_ node: TreeNode?) -&gt; [(level: Int, value: Int)] {

    guard let node = node else {
        return []
    }
    var nodes = [(level: 0, value: node.val)]
    nodes += recursiveVisit(node.left).map {
        return (level: $0.level + 1, value: $0.value)
    }
    nodes += recursiveVisit(node.right).map {
        return (level: $0.level + 1, value: $0.value)
    }
    return nodes
}
</code></pre>

<p>This can be used in the first function as well. As an alternative, define a custom <code>struct</code> with “level” and “label” members.</p>

<h3>Alternative #1 – A nested function</h3>

<p>It is not necessary to create an array of <code>(level, value)</code> tuples first. You can add a value to the sublist on the current level, or append a new level while traversing the tree recursively. With a <em>nested function</em> you don't even have to pass the array around:</p>

<pre><code>func levelOrder(_ root: TreeNode?) -&gt; [[Int]] {
    var levels: [[Int]] = []

    func recursiveVisit(_ node: TreeNode?, level: Int) {
        guard let node = node else {
            return
        }
        if level &lt; levels.count {
            levels[level].append(node.val)
        } else {
            levels.append([node.val])
        }
        recursiveVisit(node.left, level: level + 1)
        recursiveVisit(node.right, level: level + 1)
    }

    recursiveVisit(root, level: 0)
    return levels
}
</code></pre>

<h3>Alternative #2 – Iteration instead of recursion</h3>

<p>The referenced Java solution solves the task with iteration, and a list containing all nodes on the current level. Of course that can be done in Swift as well. Here is an example of a quite compact implementation:</p>

<pre><code>func levelOrder(_ root: TreeNode?) -&gt; [[Int]] {
    guard let root = root else {
        return []
    }

    var wrapList: [[Int]] = []
    var queue = [root] // First level

    while !queue.isEmpty {
        // All values of nodes on the current level:
        wrapList.append(queue.map { $0.val })
        // Replace queue by list of all nodes on the next level:
        queue = queue.flatMap { [$0.left, $0.right ] }.compactMap { $0 }
    }

    return wrapList
}
</code></pre>
    </div>