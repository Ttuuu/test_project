<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Design</h1>
<ul>
<li>There are multiple uses of implicit <code>x, y</code> coordinate pairs. These could easily be encapsulated in a simple <code>point</code> (or <code>vector2</code>) struct to explicitly express that relation.</li>
<li>Some functions have hidden caveats/multiple responsibilities:
<ul>
<li>I wouldn't expect <code>snake::draw()</code> to run the game.</li>
<li>I wouldn't expect <code>snake::move()</code> to contain the actual game loop, or to handle player input.</li>
</ul>
</li>
<li>Some functions work on inherently different levels of abstraction: <code>hidecursor</code> is rather low-level, whereas <code>start_game</code> is a rather high-level abstraction. These could be split into several classes with clear-cut scopes and same level of abstraction.</li>
</ul>
<h1>Naming</h1>
<p>Many names, while not completely off the mark, are somewhat misleading. Some examples:</p>
<ul>
<li><code>level</code> is actually the delay between updates in milliseconds (as an arbitrary indicator of difficulty). <code>update_delay</code> or <code>update_rate</code> might be more fitting.</li>
<li><code>go</code> is a boolean value indicating whether the game is still ongoing. <code>is_running</code> might be a better choice.</li>
<li><code>map</code> might be conflated with the type <code>std::map</code> (especially since <code>using namespace std;</code> was declared).</li>
<li>The <code>snake</code> class represents the snake game, not a snake in the game.</li>
</ul>
<h1>Game play</h1>
<ul>
<li>There is an awful lot of flickering (at least on my machine). I'm not exactly sure what causes these flickers, probably some interference from the different console APIs and flushing too often (remember: every <code>std::endl</code> flushes the console output).</li>
<li>The game can instantly be lost by pressing the key for the direction the snake is coming from (e.g. pressing <kbd>S</kbd> while the snake is moving up). This can easily happen when trying to do a fast maneuver (e.g. <kbd>A</kbd> + <kbd>S</kbd> to make a quick turn).</li>
<li>Apples can spawn inside the snake body. Once the snake leaves the tile, it gets overwritten with a space, so it seems like there is no apple on the field (though it's still there and can be eaten, it's just invisible).</li>
<li>A lot of the timing for the different difficulty levels is depending on/gets outclassed by the time of <code>system("cls")</code> in <code>snake::clear()</code>.</li>
<li>The whole level border is hard-coded. It could be generated/selected dynamically for different game modes (e.g. no border with wrap-around snake, or advanced maze-like borders for higher difficulty).</li>
<li>User input feels sluggish: It is only handled after the next frame has been drawn (so the snake continues to move into the old direction for 1 more turn). Additionally, there is the option of chaining user inputs, as only the oldest input gets processed, which might be a annoying (cannot change direction quickly enough if too many inputs in buffer) or a feature (can send inputs for precise maneuvers in advance).</li>
</ul>
<h1>Implementation</h1>
<ul>
<li>There are 4 different APIs used for console input/output (<code>&lt;conio.h&gt;</code>, <code>&lt;windows.h&gt;</code>, <code>system</code> calls and <code>&lt;iostream&gt;</code>). Maybe use one exclusively for consistency?</li>
<li><code>snake::game()</code> is declared, but not implemented or used.</li>
<li>There is a stack overflow: <code>snake::move()</code> calls <code>snake::refresh()</code>, which in turn calls <code>snake::move()</code> until the call stack overflows. This can be fixed by simply removing the call to <code>snake::move()</code> in <code>snake::refresh()</code>.</li>
<li><code>using namespace std;</code> is considered bad practice and should be avoided.</li>
<li><code>snake::~snake()</code> unconditionally dereferences <code>map</code> - even if it might not be initialized yet. This can invoke undefined behavior!</li>
<li><code>snake::map</code> is initialized to hold 26 arrays of 81 chars each, of which the first array and the first char of the other arrays are never actually used (they are only indexed starting from 1, unless they are allocated/deallocated). (Actually, why allocate <code>map</code> at all? One could easily replace it with an inplace <code>char[25][80]</code> array, or a <code>std::vector&lt;std::string&gt;</code>, or similar.)</li>
<li>Is it really necessary to print each char separately? With a bit of planning, the whole map could be printed in one call!</li>
<li>There are many "magic numbers" used in different parts of the code (e.g. assumed width and height of the console, <code>char</code> representations of different game elements, ...). Readability could be improved by using appropriately named constants instead.</li>
</ul>
    </div>