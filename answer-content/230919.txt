<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>Clean up allocated memory (everything <code>new</code>ed should be <code>delete</code>d), or use smart pointers to do it for you. (Perhaps each tree node should own its children, and store them in <code>unique_ptr</code>s, and the parent should be a raw pointer).</p></li>
<li><p>There doesn't seem to be any benefit to overloading <code>operator new</code> for the <code>Tree</code> class.</p></li>
<li><p>Currently, the iterator is more of a sub-tree iterator, as it never returns to the parent. e.g. for a tree with edges: A-&gt;B-&gt;C and A-&gt;D if you start iterating at B, you will only iterate from B to C, and never reach D.</p></li>
<li><p>Iterators are normally defined outside of the corresponding container class. We can use an <code>iterator</code> <code>typedef</code> in the container to refer to the iterator class.</p></li>
<li><p><code>operator*</code> should return a reference, not a pointer (<code>operator-&gt;</code> should return a pointer).</p></li>
<li><p>We have <code>!=</code>, but no <code>==</code>.</p></li>
<li><p>We have a pre-increment <code>operator++</code>, but not post-increment <code>operator++</code>.</p></li>
<li><p>It would probably be best to write unit tests for things that are expected to work, e.g.: <code>*i</code> (returns a modifiable reference), <code>*i++</code> (returns a modifiable reference and then increments i to point at the next value), etc. This can be tedious, but is really the only way to ensure correctness.</p></li>
<li><p>The full <a href="https://en.cppreference.com/w/cpp/named_req/ForwardIterator" rel="nofollow noreferrer">requirements for a forward iterator are listed here</a> (and in the linked pages), and many of them could be translated into tests cases. This iterator should arguably be a bidirectional iterator.</p></li>
<li><p>Standard containers also supply a <code>const_iterator</code> version (and reverse iterators, though that's usually simple to add).</p></li>
</ul>

<p>To be honest, I'd suggest starting with something a bit simpler like an array class, and corresponding iterators.</p>

<hr>

<p>Note that we can traverse a tree in many different ways (depth-first in-order, depth-first pre-order, depth-first post-order, breadth-first). For a full-featured implementation of this sort of thing, see the <a href="https://stlab.adobe.com/group__asl__tutorials__forest.html" rel="nofollow noreferrer">ASL Forest class</a>.</p>

<p>Since we're iterating nodes, not values, we don't have to worry about "order", but we should still call the class something like <code>tree_depth_first_iterator</code>, to distinguish it from the alternative(s).</p>

<hr>
    </div>