<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>@dfhwze's answer is great (upvoted it),</p>

<p>there are also other options, which refactors a bit more. These <em>could</em> be a option if you need the more than once.</p>

<h3>Inheritance</h3>

<p>Create a separate class and add the method there. </p>

<p>This is a bit more "information hiding" (OO concept)</p>

<p>e.g.</p>

<pre><code>public class CountryCodes : Dictionary&lt;string, Dictionary&lt;DateTime, string&gt;&gt;
{
    public string FindGB2001(string countryCode, DateTime date)
    {
        if (TryGetValue(countryCode, out var country)
            &amp;&amp; country != null &amp;&amp;
            country.TryGetValue(date, out var GB2001))
        {
            return GB2001;
        }

        return null;
    }
}
</code></pre>

<p>usage:</p>

<pre class="lang-cs prettyprint-override"><code>CountryCodes countryCodes = ...;
countryCodes.FindGB2001("GB", new DateTime(2001, 04, 01));
</code></pre>

<h3>Generic extension</h3>

<p>Another option is to create a helper extension for nested dictionaries. This is nice if you need it for more situations. You could also call if just <code>TryFind</code>.</p>

<pre class="lang-cs prettyprint-override"><code>public static class DictionaryExtensions
{
    public static bool TryFindInNested&lt;TKey, TKey2, TItem&gt;(this Dictionary&lt;TKey, IDictionary&lt;TKey2, TItem&gt;&gt; dict, TKey key1, TKey2 key2, out TItem item)
    {
        if (dict.TryGetValue(key1, out var item1) &amp;&amp; item1 != null &amp;&amp; item1.TryGetValue(key2, out item))
        {
            return true;
        }

        item = default(TItem); //or just "default" for C# 7.1
        return false;
    }
}
</code></pre>

<p>Usage:</p>

<pre class="lang-cs prettyprint-override"><code>var countyCodes2 = new Dictionary&lt;string, IDictionary&lt;DateTime, string&gt;&gt;(); // note used IDictionary for nested.
countyCodes2.TryFindInNested("GB", new DateTime(2001, 04, 01), out string item);
</code></pre>
    </div>