<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I went a bit crazy about it just for fun, and found a solution that is much more efficient than a loop :)</p>

<p>If you look at the bits as the game progresses, you can reframe the problem. Subtracting 1 from an odd number is flipping the right-most bit from 1 to 0. Dividing by 2 is shifting the bits 1 place to the right.</p>

<p>Example in binary:</p>

<pre><code>1001101
</code></pre>

<p>There are four 1-bits, which means 4 subtractions of 1. The left most 1 bit is in the 7th position, which means 6 divisions by 2. There is an exception to this rule when the input is 0, so this is the (almost) final formula:</p>

<pre><code>if (num == 0) return 0;
return (number of 1-bits) + (number of bits to the right of the left-most 1-bit);
</code></pre>

<p>A <a href="https://www.playingwithpointers.com/blog/swar.html" rel="nofollow noreferrer">genius SWAR algorithm</a> can be used to count the 1-bits:</p>

<pre><code>public int BitCount(int x)
{
    x -= (x &gt;&gt; 1) &amp; 0x55555555;
    x = ((x &gt;&gt; 2) &amp; 0x33333333) + (x &amp; 0x33333333);
    return (((x &gt;&gt; 4) + x) &amp; 0x0f0f0f0f) * 0x01010101 &gt;&gt; 24;
}
</code></pre>

<p>To count the bits on the right of the left-most 1-bit, we can turn them all into 1s by overlapping the number (<code>|</code> operator) with bit shifts of itself:</p>

<pre><code>public int FillGaps(x)
{
    x |= x &gt;&gt; 1;
    x |= x &gt;&gt; 2;
    x |= x &gt;&gt; 4;
    x |= x &gt;&gt; 8;
    return x | x &gt;&gt; 16;
}
</code></pre>

<p>The final function is:</p>

<pre><code>public int CountSteps_NoLoop(int num)
{
    if(num == 0) return 0;
    return BitCount(num) + BitCount(FillGaps(num)) - 1;
}
</code></pre>

<p>There is one more thing that can be done to make the function even faster: because this function is so complicated with lots of bitwise operations, it is slower than a loop for small numbers, so you can do something like this:</p>

<pre><code>public int CountSteps(int num)
{
    const int TIPPING_POINT = 32; // or 16 with Roslyn 3.4 compiler (according to my benchmarks)
    if(num &lt; TIPPING_POINT)
    {
        return CountSteps_Loop(num); // method from my other answer
    }
    else
    {
        return CountSteps_NoLoop(num);
    }
}
</code></pre>

<p>Since I already went this far, why not go all the way and avoid function calls and variable declarations (who needs meaningful names):</p>

<pre><code>public int CountSteps(int x)
{
    if(x &lt; 32)
    {
        int c = -1;
        do
        {
            c += 1 + (x &amp; 1);
        } while ( (x &gt;&gt;= 1) != 0);

        return c;
    }
    else
    {
        int s = x - ((x &gt;&gt; 1) &amp; 0x55555555);
        s = ((s &gt;&gt; 2) &amp; 0x33333333) + (s &amp; 0x33333333);

        x |= x &gt;&gt; 1; 
        x |= x &gt;&gt; 2;
        x |= x &gt;&gt; 4;
        x |= x &gt;&gt; 8;
        x |= x &gt;&gt; 16;

        x -= (x &gt;&gt; 1) &amp; 0x55555555;
        x = ((x &gt;&gt; 2) &amp; 0x33333333) + (x &amp; 0x33333333);

        return ((((s &gt;&gt; 4) + s) &amp; 0x0f0f0f0f) * 0x01010101 &gt;&gt; 24)
             + ((((x &gt;&gt; 4) + x) &amp; 0x0f0f0f0f) * 0x01010101 &gt;&gt; 24) - 1;
    }
}
</code></pre>

<h2>Update: more optimizations!</h2>

<p>The main reason I kept the if statement until now is not to speed up the case of 16 smallest numbers, that was just an opportunity to make better use of an if statement that I needed anyway to take care of the case of 0 input. Now I got rid of this if statement and instead of subtracting 1 from the bit count at the end (which created the exception for 0), I shift one bit off of the number before counting the bits (2nd line inside the function). Also according to my benchmarks this shift is faster than subtracting 1 in the end.</p>

<p>I also optimized the return statement by adding both bit counts as early as possible before finishing the count (see the 2nd last line).</p>

<pre><code>public int CountSteps(int x)
{
    int s = x - ((x &gt;&gt; 1) &amp; 0x55555555);
    x = (x &gt;&gt; 1) | (x &gt;&gt; 2);
    x |= x &gt;&gt; 2;
    x |= x &gt;&gt; 4;
    x |= x &gt;&gt; 8;
    x |= x &gt;&gt; 16;
    x -= (x &gt;&gt; 1) &amp; 0x55555555;
    x = ((x &gt;&gt; 2) &amp; 0x33333333) + (x &amp; 0x33333333)
        + ((s &gt;&gt; 2) &amp; 0x33333333) + (s &amp; 0x33333333);
    return (((x &gt;&gt; 4) &amp; 0x0f0f0f0f) + (x &amp; 0x0f0f0f0f)) * 0x01010101 &gt;&gt; 24;
}
</code></pre>

<p>Benchmarking: (with the highest 40 million values of <code>int</code> as function input)</p>

<ul>
<li>code with loop: 3.89s</li>
<li>my fancy code: 0.48s</li>
<li>with processor instructions: 0.38s</li>
</ul>

<p>The performance gap will grow if the functions are extended to handle <code>long</code>s, because it's O(1) vs O(n).</p>

<hr>

<p>Using hardware instructions is the fastest, and makes much clearer code:</p>

<pre><code>public int CountSteps(int x)
{
    return 32 - BitOperations.LeadingZeroCount((uint)x &gt;&gt; 1)
              + BitOperations.PopCount((uint)x);
}
</code></pre>

<p>But implementing it without these instructions makes a much more enjoyable challenge.</p>
    </div>