<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are some things that may help you improve your code.</p>
<h2>Use a newer reference</h2>
<p>K&amp;R second edition is quite old and refers to the 1989 version of the C language.  If you want to learn the C language, a more recent source would likely be more useful.  The current version of the standard is <a href="https://en.wikipedia.org/wiki/C18_(C_standard_revision)" rel="nofollow noreferrer">C18</a>.</p>
<h2>Be careful with signed vs. unsigned</h2>
<p>You are correctly using <code>size_t</code> as the type for <code>len</code> but then comparing it to <code>i</code> which is declated as an <code>int</code>.  Since <code>size_t</code> is unsigned and <code>int</code> is signed, there is a potential problem in comparing them directly because they are both treated as unsigned values, per the C standard.</p>
<h2>Consider always using braces</h2>
<p>The code currently contains this loop:</p>
<pre><code>int i = 0;
while (i &lt; len) {
    if (isblank(string[i])) {
        boundary = i;
        while (isblank(string[i])) ++i;
    }
    else ++i;
}
</code></pre>
<p>Omitting the braces for the <code>else</code> clause is permitted by the language, but it can lead to problems.  See Apple's infamous <a href="https://www.synopsys.com/blogs/software-security/understanding-apple-goto-fail-vulnerability-2/" rel="nofollow noreferrer"><code>goto fail</code></a> vulnerability for example.</p>
<h2>Prefer <code>for</code> over <code>while</code> where appropriate</h2>
<p>The loop in the previous suggestion could be rewritten as a <code>for</code> loop:</p>
<pre><code>bool inblanks = false;
for (size_t i = 0; string[i] != '\0'; ++i) {
    if (isblank(string[i])) {
        if (!inblanks) {
            boundary = i;
            inblanks = true;
        }
    } else {
        inblanks = false;
    }
}
</code></pre>
<p>Note that the exit condition has been changed to look for the terminating <code>'\0'</code> character.  This saves having to call <code>strlen</code> and may confer a modest performance gain.</p>
<h2>Use all uppercase only for preprocessor macros</h2>
<p>It's not enforced by the compiler, but common practice for decades has been to reserve all uppercase names solely for macros.  It's a recommended practice also in C++.  See <a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#es9-avoid-all_caps-names" rel="nofollow noreferrer">ES.9</a></p>
<h2>Think of the user</h2>
<p>The instructions included this line:</p>
<blockquote>
<p>Make sure your program does something intelligent with very long lines, and if there are no blanks or tabs before the specified column.</p>
</blockquote>
<p>When I think of uses for this program, the first one that comes to mind is accomodating long lines of text on finite-size screen.  With that in mind, ignoring the line length as your program does, is probably not the right thing to do.  I'd suggest instead that no line of the output should exceed the set <code>MAX_LINE_LENGTH</code>.</p>
<h2>An example</h2>
<p>Using all of these things, and ignoring tabs, using only the 1989 version of C, we might have written the program like this:</p>
<pre><code>#include &lt;stdio.h&gt;

#define MAX_LINE_LENGTH 10

int main() {
    const unsigned end = MAX_LINE_LENGTH;
    unsigned col = 0;
    unsigned lastspace = end;
    unsigned src;
    char line[MAX_LINE_LENGTH + 1];
    int ch;
    for (ch = getchar(); ch != EOF; ch = getchar()) {
        if (ch == '\n') {
            line[col] = '\0';
            puts(line);
            col = 0;
            lastspace = end;
        } else if (ch == ' ') {
            lastspace = col;
            line[col++] = ch;
        } else {
            line[col++] = ch;
        }
        if (col == MAX_LINE_LENGTH) {
            line[lastspace] = '\0';
            puts(line);
            if (lastspace == end) {  /* no spaces in segment */
                col = 0;
            } else { /* space in segment  */
                src = lastspace + 1;
                lastspace = end;
                /* copy characters after space to beginning of segment */
                for (col = 0; src &lt; end; ++src, ++col) {
                    line[col] = line[src];
                    if (line[col] == ' ') {
                        lastspace = col;
                    }
                }
            }
        } 
    }
    return 0;
}
</code></pre>
<p>One way to add handling of tabs to this would be to simply make a wrapper for <code>getchar()</code> that turns tabs into spaces.</p>
    </div>