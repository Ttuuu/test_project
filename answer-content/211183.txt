<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Headers</h1>

<p>We're missing some headers.  I'm guessing that your platform happens to include these as a side-effect of including <code>&lt;list&gt;</code> and <code>&lt;unordered_map&gt;</code>, but that's not a portable assumption.</p>

<pre><code>#include &lt;algorithm&gt;            // for std::iter_swap
#include &lt;cstddef&gt;              // for std::size_t
#include &lt;functional&gt;           // for std::equal_to and std::hash
#include &lt;iterator&gt;             // for std::next
#include &lt;stdexcept&gt;            // for std::range_error
#include &lt;utility&gt;              // for std::pair
</code></pre>

<h1>Size member</h1>

<p>We've consistently misspelt <code>std::size_t</code> (as just <code>size_t</code>).  Again, another portability problem.</p>

<p>We might want to check that we are not given a zero size; doing so will break the code's assumptions in <code>put()</code>.  We could test and throw, or we could use <code>std::min</code> to ensure it's at least 1, for example.</p>

<p>The accessor <code>capacity()</code> is fairly pointless - we could simply make the <code>maxSize_</code> member public (which is safe, because it's declared <code>const</code>).</p>

<h1>Strange promotion isn't LRU</h1>

<p>Despite the name, this cache doesn't discard the <strong>least-recently</strong> used item to make space, as <code>promoteItemWithKey</code> only swaps the used item with the next one in the list.  True LRU means moving the accessed item to the end of the queue; I think you might be able to use the list's <code>splice()</code> method to achieve this more efficiently than <code>std::rotate</code>.</p>

<h1>Unnecessary explicit <code>this</code></h1>

<p>The redundant <code>this-&gt;</code> dereference can make code harder to read:</p>

<blockquote>
<pre><code>    if (this-&gt;has(key)) {
        this-&gt;removeItemWithKey(key);
    }
</code></pre>
</blockquote>

<p>It's rare that we need to explicitly write <code>this-&gt;</code> (usually only if we have name conflicts, or call a non-dependent template function), and we can write with much less clutter:</p>

<pre><code>    if (has(key)) {
        removeItemWithKey(key);
    }
</code></pre>

<p>That said, I would prefer us to directly overwrite (and promote) the found element, rather than removing it and constructing a new one - that saves on memory allocation.  In fact, the same applies when removing a stale item to insert a new one - </p>

<h1>Unnecessary construction</h1>

<p>Here, we have an unwieldy constructor that we don't need:</p>

<blockquote>
<pre><code>    itemsList_.emplace_back(std::pair&lt;KeyType, ValueType&gt;(key, value));
</code></pre>
</blockquote>

<p>The point of <code>emplace_back()</code> is to call the constructor for us:</p>

<pre><code>    itemsList_.emplace_back(key, value);
</code></pre>

<h1>Consider passing by value</h1>

<p>If we <code>put()</code> with an rvalue for <code>value</code>, it's copied unnecessarily.  It's probably better to push any copying to the caller (which may be able to elide it), and then <code>std::move</code> the value:</p>

<pre><code>void put(const KeyType&amp; key, ValueType value)
{
    // ...
    itemsList_.emplace_back(key, std::move(value));
</code></pre>
    </div>