<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><code>find_game_ids</code> is far more complicated than it needs to be. You have essentially two "counters", <code>Idgame</code> and <code>i</code>. One is being used to be placed in a string, and the other is to limit how many loops happen, but they're the same value if you think about it; just opposites. You don't need <code>Idgame</code> since you can just check if <code>i &lt; 20</code>. You also don't need to manually manage <code>i</code>. <code>range</code> is for use-cases exactly like this:</p>
<pre><code>def find_game_ids(self, accId, key):
    game_id = []
    url_match_list = f"https://na1.api.riotgames.com/lol/match/v4/matchlists/by-account/{accId}?queue=420&amp;endIndex=20&amp;api_key={key}"
    response2 = requests.get(url_match_list)
    for i in range(20):
        game_id.append(f"https://na1.api.riotgames.com/lol/match/v4/matches/{response2.json()['matches'][i]['gameId']}?api_key={key}"

    return game_id
</code></pre>
<p><code>i</code> here will be every number from <code>0</code> to <code>19</code>. I would also recommend creating a variable elsewhere to hold the <code>20</code> and call in <code>N_GAMES</code> or something. You seem to use that <code>20</code> in multiple spots. If you change it in one place and forget to change it somewhere else, you'll potentially have a nasty bug.</p>
<p>Other things I changed:</p>
<ul>
<li>Variable names should be lowercase, separated by underscores according to <a href="https://www.python.org/dev/peps/pep-0008/#function-and-variable-names" rel="nofollow noreferrer">PEP8</a>. You have names all around this file that inconsistently use Upper_case. Use lower_case unless you're naming a class name.</li>
<li>Instead of adding string together using <code>+</code>, I changed it to use f-strings (note the <code>f</code> before the quotes). That lets you put a variable directly into a string using the <code>{variable_name}</code> syntax.</li>
</ul>
<p>This can be further improved though. If you're iterating to create a list like you are here, list comprehensions can sometimes be cleaner:</p>
<pre><code>def find_game_ids(self, accId, key):
    url_match_list = f"https://na1.api.riotgames.com/lol/match/v4/matchlists/by-account/{accId}?queue=420&amp;endIndex=20&amp;api_key={key}"
    response2 = requests.get(url_match_list)
    
    return [f"https://na1.api.riotgames.com/lol/match/v4/matches/{response2.json()['matches'][i]['gameId']}?api_key={key}"
            for i in range(20)]
</code></pre>
<p>The major readability problem in each case stems from how long that string is. You may want to break it over multiple lines, or generate it outside of the function using another function.</p>
<hr>
<p>In <code>game_data</code>, you're calling <code>response.json()</code> <em>repeatedly</em>. Looking over the <a href="https://requests.readthedocs.io/en/master/_modules/requests/models/#Response.json" rel="nofollow noreferrer">source of that method</a>, it does <em>not</em> appear to do any caching. That means that every call to <code>.json</code> will reparse the data, which is a waste of CPU time. Save that into a variable once and use it as needed:</p>
<pre><code>def game_data(self, game_list, key, sumName):
    . . .
    for urls in game_list:

        response = requests.get(urls)
        resp_json = response.json()  # Save it to use it again later
        Loop = 0
        index = 0
        while Loop &lt;= 10:

            if resp_json['participantIdentities'][index]['player']['summonerName'] != sumName:
                Loop = Loop + 1
                index = index + 1
            elif resp_json['participantIdentities'][index]['player']['summonerName'] == sumName:

                deaths.append(resp_json['participants'][index]['stats']['deaths'])
                kills.append(resp_json['participants'][index]['stats']['kills'])
                assists.append(resp_json['participants'][index]['stats']['assists'])
                visions.append(resp_json['participants'][index]['stats']['visionScore'])
                csTotal.append(resp_json['participants'][index]['stats']['totalMinionsKilled'])
                wins.append(resp_json['participants'][index]['stats']['win'])

        . . .
</code></pre>
<p>Not only is that shorter, it also makes it easier to add in some preprocessing to the data later, and also has the potential to be much faster, because you aren't doing the same processing over and over again.</p>
<hr>
<pre><code>#Finding avg of each stat
deaths=sum(deaths)/20            
kills=sum(kills)/20
assists=sum(assists)/20
visions=sum(visions)/20
csTotal=sum(csTotal)/20
</code></pre>
<p>Like I said, you're using <code>20</code> in multiple places. What if you want to change this number later? It's not going to be fun to go around and find every <em>relevant</em> <code>20</code> and update it to the new value.</p>
<p>Have that number stored once, and use that variable:</p>
<pre><code># Top of file by imports
N_GAMES = 20

. . .

# The for-loop in the updated find_game_ids
for i in range(N_GAMES):

. . .

# At the bottom of game_data
deaths=sum(deaths)/N_GAMES            
kills=sum(kills)/N_GAMES
assists=sum(assists)/N_GAMES
visions=sum(visions)/N_GAMES
csTotal=sum(csTotal)/N_GAMES
</code></pre>
<hr>
<p>For the classes <code>win_calc</code> and <code>id_collect</code>, there a few noteworthy things.</p>
<p>First, they shouldn't be classes. A good indicator that you shouldn't be using a class is that you're never using <code>self</code> in any of its methods. By using a class in this case, you need to construct an empty object just to call a method on it, which you're doing here:</p>
<pre><code>wins=win_calc()
</code></pre>
<p>Just to call a method on it later:</p>
<pre><code>wins.is_dis_mane_good(win_list)
</code></pre>
<p>Just make those classes plain functions:</p>
<pre><code>import random

def is_dis_mane_good(winlist):

    winlist = sum(winlist) / 20

    if (winlist &lt; .33):
        trash = ['DIS MANE STINKS', 'run while you can', 'I repeat, YOU ARE NOT WINNING THIS', 'I predict a fat L',
                 'Have fun trying to carry this person', 'He is a walking trash can', 'He needs to find a new game',
                 'BAD LUCK!!!']
        print(random.choice(trash))
    . . .
</code></pre>
<p>And then just use them as plain functions:</p>
<pre><code>is_dis_mane_good(win_list)
</code></pre>
<p>Second, if it were appropriate to have them as classes, the names should be in CapitalCase: <code>WinCalc</code> and <code>IDCollect</code> (or maybe <code>IdCollect</code>).</p>
<hr>
<p>Also, I'd rename <code>is_dis_mane_good</code>. Using a slang in the output of the program is one thing, but naming your methods obscure names isn't doing yourself or other readers of your code any favors.</p>
<p>As well in that function, I'd make some more changes:</p>
<ul>
<li><p>I suggest you prefix your decimal numbers with a <code>0</code>. <code>0.33</code> is much more readable than <code>.33</code>.</p>
</li>
<li><p>You can use operator chaining to simplify those checks too. <code>winlist &gt; 0.33 and winlist &lt;= 0.5</code> can become <code>0.33 &lt; winlist &lt;= 0.5</code>. As noted in the comments though, you can actually get rid of half of each check since, for example, if <code>winlist &lt; 0.33</code> was false, then you know <code>winlist</code> must be greater than <code>0.33</code>, so the <code>winlist &gt; 0.33</code> check is redundant.</p>
</li>
<li><p>There's that <code>20</code> again ;). The more places you have it, the more likely you are to forget to update at least one of them. I'd use <code>N_GAMES</code> there instead.</p>
</li>
<li><p>You can get rid of the duplicated <code>print(random.choice(. . .))</code> calls by assigning the list to a variable after each check, then having one <code>print</code> at the bottom.</p>
</li>
</ul>
<p>After those changes, I'm left with this:</p>
<pre><code>def competency_message(winlist):
    winlist = sum(winlist) / N_GAMES

    message_set = []
    if winlist &lt; 0.33:  # Should be winlist &lt;= 0.33 maybe?
        message_set = ['DIS MANE STINKS', 'run while you can', 'I repeat, YOU ARE NOT WINNING THIS', 'I predict a fat L',
                 'Have fun trying to carry this person', 'He is a walking trash can', 'He needs to find a new game',
                 'BAD LUCK!!!']

    elif winlist &lt;= 0.5:
        message_set = ['Losing a bit', 'Not very good', 'He needs lots of help', 'Your back might hurt a little',
                   'Does not win much']

    elif winlist &lt;= 0.65:
        message_set = ['He is ight', 'He can win a lil', 'You guys have a decent chance to win', 'Serviceable',
                'Should be a dub']

    else:
        message_set = ['DUB!', 'You getting carried', 'His back gonna hurt a bit', 'winner winner chicken dinner',
                'Dude wins TOO MUCH', 'You aint even gotta try', 'GODLIKE']

    print(random.choice(message_set))
</code></pre>
    </div>