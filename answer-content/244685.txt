<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are some things that may help you improve your code.</p>
<h2>Fix your formatting</h2>
<p>There are inconsistent spaces at the beginning of lines, inconsistent indentation and inconsistent use and placement of curly braces <code>{}</code>.  Being consistent helps others read and understand your code.</p>
<h2>Use longer, more meaningful names</h2>
<p>Names like <code>c</code> and <code>d</code> are not very descriptive and leave readers of the code little clue as to their significance to the program.</p>
<h2>Eliminate global variables</h2>
<p>The global variables <code>wins</code> and <code>bestm</code> don't need to be global.  Eliminating them allows your code to be more readable and maintainable, both of which are important characteristics of well-written code.  Global variables introduce messy linkages that are difficult to spot and error prone.  For this program, <code>wins</code> can be a <code>static const</code> variable defined within <code>is_win</code>.  The <code>bestm</code> array could also be static to <code>negamax</code> and the move could be an additional parameter like this:</p>
<pre><code>int negamax(int current_player, int x, int o, int ply, int* best) {
    // mostly same
    *best = bestm[ply] = bestmove
    return value;
}
</code></pre>
<p>The call from <code>main</code> would then be:</p>
<pre><code>negamax(current_player, x, o, NPLY - 1, &amp;move);
</code></pre>
<h2>Simplify expressions</h2>
<p>The code includes these lines:</p>
<pre><code>if ((x &amp; (1 &lt;&lt; move)) || (o &amp; (1 &lt;&lt; move))) {
    puts("Square occupied; try again.");
    continue;
}
</code></pre>
<p>This could be somewhat simpler as</p>
<pre><code>if ((x|o) &amp; (1 &lt;&lt; move)) {
</code></pre>
<p>Similarly, <code>show_board</code> could be rewritten as:</p>
<pre><code>void show_board(int x, int o)
{
    int mask = 1;
    int col = 0;
    for (int i = '0'; i &lt; '9'; ++i, mask &lt;&lt;= 1) {
        if (col == 0) {
            printf("\n+---+---+---+\n|");
            col = 3;
        }
        char c;
        if (x &amp; mask) {
            c = 'X';
        } else if (o &amp; mask) {
            c = 'O';
        } else {
            c = i;
        }
        printf(" %c |", c);
        --col;
    }
    puts("\n+---+---+---+");
}
</code></pre>
<h2>Simplify win checking</h2>
<p>The game currently checks if either player won after every move, but this isn't really necessary.  By definition, only the player who just moved can win the game.  This same strategy can be used within the <code>negamax</code> routine.</p>
<h2>Create more helper functions</h2>
<p>I'd suggest that the <code>main</code> routine could be made a little more clear if some helper functions were defined and used, such as checking for a tie or checking if a slot is occupied.  These would allow the logic of the game to be clear while hiding implementation details.</p>
<h2>Consider a different data structure</h2>
<p>Right now there are a number of places in the code where we have something like this:</p>
<pre><code>if (d == 'x') {
    x |= (1 &lt;&lt; move);
} else {
    o |= (1 &lt;&lt; move);
}
</code></pre>
<p>If we rename <code>d</code> to <code>current_player</code> and have it point to either <code>x</code> or <code>o</code>, we could write this:</p>
<pre><code>*current_player |= (1 &lt;&lt; move);
</code></pre>
<p>By creating a structure like this:</p>
<pre><code>struct {
    char token;
    int board;
} players[2] = {
    {'x', 0},
    {'o', 0},
};
</code></pre>
<p>We could simplify even further.</p>
<h2>Use only required <code>#include</code>s</h2>
<p>The code currently has an <code>#include</code> that is not needed.  Nothing is used from <code>&lt;stdint.h&gt;</code>.  Only include files that are actually needed.</p>
    </div>