<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This question has a number of misconceptions  </p>

<ol>
<li>You are unlikely to develop a real-time system using .NET because of
unbounded GC times  </li>
<li><code>ConcurrentQueue&lt;T&gt;</code> is better than <code>BlockingCollection&lt;T&gt;</code> not because
it does not use locks. It actually uses more locks, just in a
smarter way.  </li>
<li><code>ConcurrentQueue&lt;T&gt;</code> provides worse API exactly because it is faster. 
Most of the missing APIs are missing because there is no way of 
implementing them efficiently and in a thread-safe manner</li>
</ol>

<p>Your code has a number of weaknesses:</p>

<ol>
<li><p>I don't see any reasonable use for <code>IsAddingCompleted</code> and friends</p></li>
<li><p>I am not sure there are no race conditions. For example, lets assume we have produced == consumed == 0. Thread1 adds an item and is just before incrementing produced. Thread2 calls <code>TryDequeue</code>, since produced==consumed, it goes through and stops right before changing sleeping. Thread1 continues, changes produced to 1, checks if sleeping is 0, which it is and quits without setting the event. Thread2 continues to <code>Wait()</code>. Now we have a task and an eteranlly-waiting client.</p></li>
<li><p>There is no way to abort a waiting <code>TryDequeue</code> and finish gracefully</p></li>
</ol>
    </div>