<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Yes, there are ways you can shorten your <code>EndTurn</code> method.</p>

<p>First, you've duplicated your code in <code>EndTurn</code> to compare to both <code>playerSide</code> and <code>computerSide</code>, but the code is the same otherwise. You can extract a method (named <code>IsGameWonBy</code> below) to eliminate this duplication as follows:</p>

<pre><code>public void EndTurn()
{
    moveCount++;

    for (int i = 0; i &lt; buttonList.Length; i++)
    {
        if (IsGameWonBy(playerSide))
        {
            GameOver(playerSide);
        }
        else if (IsGameWonBy(computerSide))
        {
            GameOver(computerSide);
        }
        else if (moveCount &gt;= 9)
        {
            GameOver("draw");
        }
        else
        {
            ChangeSides();
            delay = 10;
        }
    }
}

private bool IsGameWonBy(string side)
{
    if (buttonList[0].text == side &amp;&amp; buttonList[1].text == side &amp;&amp; buttonList[2].text == side)
    {
        return true;
    }
    else if (buttonList[3].text == side &amp;&amp; buttonList[4].text == side &amp;&amp; buttonList[5].text == side)
    {
        return true;
    }
    else if (buttonList[6].text == side &amp;&amp; buttonList[7].text == side &amp;&amp; buttonList[8].text == side)
    {
        return true;
    }
    else if (buttonList[0].text == side &amp;&amp; buttonList[4].text == side &amp;&amp; buttonList[8].text == side)
    {
        return true;
    }
    else if (buttonList[2].text == side &amp;&amp; buttonList[4].text == side &amp;&amp; buttonList[6].text == side)
    {
        return true;
    }
    else if (buttonList[0].text == side &amp;&amp; buttonList[3].text == side &amp;&amp; buttonList[6].text == side)
    {
        return true;
    }
    else if (buttonList[1].text == side &amp;&amp; buttonList[4].text == side &amp;&amp; buttonList[7].text == side)
    {
        return true;
    }
    else if (buttonList[2].text == side &amp;&amp; buttonList[5].text == side &amp;&amp; buttonList[8].text == side)
    {
        return true;
    }

    return false;
}
</code></pre>

<p>Restructuring your code this way, your code is more readable and it is more obvious that your for loop in <code>EndTurn</code> isn't necessary. I think the code just happens to work because <code>ChangeSides</code> is called 9 times, an odd number, and there seem to be no consequences in your code for calling <code>GameOver</code> or <code>ChangeSides</code> multiple times. Let's remove that for loop there.</p>

<pre><code>public void EndTurn()
{
    moveCount++;

    if (IsGameWonBy(playerSide))
    {
        GameOver(playerSide);
    }
    else if (IsGameWonBy(computerSide))
    {
        GameOver(computerSide);
    }
    else if (moveCount &gt;= 9)
    {
        GameOver("draw");
    }
    else
    {
        ChangeSides();
        delay = 10;
    }
}
</code></pre>

<p>As another user commented, ideally you should use a 2D array rather than a 1D array to represent your tic-tac-toe board. This will also make the logic of the code simpler when using for loops to check for the win condition rather than manually checking every possible row/column/diagonal. If you aren't familiar with 2D arrays, you should do some research on "C# multidimensional arrays". After learning about them, you can check out <a href="https://stackoverflow.com/q/1056316/5170571">this post with some other algorithms for solving tic-tac-toe</a>, most of which use a 2D array.</p>

<p>However, note that for a 3x3 tic-tac-toe, it's also acceptable to just check the rows, columns, and diagonals manually for the win condition as you have done. As an exercise, you may want to try modifying your game to a 5x5 tic-tac-toe game to see what is difficult to change in your code and Unity project to make that happen. If your code is structured well, it should allow you to quickly switch the game between a 3x3 board and a 5x5 board without having to make significant changes to your code &amp; project.</p>

<p>(As a note, 2D arrays are a bit tricky to set up with the current structure of your code because they don't work nicely with the Unity Editor Inspector window by default. This is a slightly more advanced topic, but you'll need to separate the logic of your game code from the UI code. Currently, all your game state and logic is tied to your <code>buttonList</code> buttons.)</p>

<p>As for adding a mode where the computer has different behavior, yes it should be possible but you should restructure your code a bit. Ideally, the computer's behavior should be separated out into its own class or at least its own method as a first step. For example, see the <code>GetNextComputerMove</code> method below:</p>

<pre><code>public void Update()
{
    if (playerMove == false)
    {
        delay += delay * Time.deltaTime;
        if (delay &gt;= 100)
        {
            value = GetNextComputerMove();

            buttonList[value].text = GetComputerSide();
            buttonList[value].GetComponentInParent&lt;Button&gt;().interactable = false;

            EndTurn();
        }
    }
}

private int GetNextComputerMove()
{
    // Put computer's logic here
    // for example, Random.Range(0, 8)
    // but you also need to check which moves are valid
    // so you can return a valid move
}
</code></pre>

<p>Note that if you want to add a mode where computer plays optimal or sub-optimal moves, that will take more logic than just <code>Random.Range</code>. Currently, you are relying on the <code>Update</code> method being called multiple times to get a valid move by the computer. As a first step, I'd suggest figuring out how to get the list of all valid moves that the computer can make so that you can select a random move among those moves.</p>
    </div>