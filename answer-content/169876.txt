<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'd recommend the <a href="https://docs.python.org/3/library/timeit.html" rel="noreferrer"><code>timeit</code></a> module when measuring the execution time of functions. AFAIK, <code>timeit</code> disables the garbage collector for the duration of the test, which might give you better results overall.</p>

<p>From <a href="https://stackoverflow.com/questions/17579357/time-time-vs-timeit-timeit">here</a>:</p>

<blockquote>
  <p><code>timeit</code> is more accurate, for three reasons:</p>
  
  <ul>
  <li>it repeats the tests many times to eliminate the influence of other tasks on your machine, such as disk flushing and OS scheduling.</li>
  <li>it disables the garbage collector to prevent that process from skewing the results by scheduling a collection run at an inopportune
  moment.</li>
  <li>it picks the most accurate timer for your OS, <code>time.time</code> or <code>time.clock</code>, see
  <a href="http://docs.python.org/2/library/timeit.html#timeit.default_timer" rel="noreferrer"><code>timeit.default_timer</code></a>.</li>
  </ul>
</blockquote>

<p>On the other side, a timing decorator is really useful because you can use annotations to sprinkle the timing around your code rather than making your code messy with timing logic everywhere. So yes, related to one of your questions, the code is useful.</p>

<p>Now, on the <em>pythonic</em> question, IMO:</p>

<ul>
<li>you have too many comments which unfortunately didn't add any value to your code. Remove them.</li>
<li>your inner function could also be renamed to something more intuitive like <code>wrapper</code>.</li>
<li><code>function</code> is also not the best choice when it comes to naming conventions as it might shadow the built-in <code>function</code></li>
<li>use 2 newlines between imports and methods</li>
<li>the indentation should be a multiple of 4 (spaces)</li>
<li>use triple double quotes for your module docstring</li>
</ul>

<hr>

<p>In Python, there're already some useful modules to help you with this. For example, in <code>functools</code> you have the <a href="https://docs.python.org/3/library/functools.html#functools.wraps" rel="noreferrer"><code>wraps</code></a> decorator. This takes a function used in a decorator and adds the functionality of copying over the function name, docstring, arguments list, etc. And since <code>wraps</code> is itself a decorator I guess it'll make things a lot easier.</p>

<hr>

<p><strong>Code:</strong></p>

<pre><code>from functools import wraps
from time import time


def timing(f):
    @wraps(f)
    def wrapper(*args, **kwargs):
        start = time()
        result = f(*args, **kwargs)
        end = time()
        print 'Elapsed time: {}'.format(end-start)
        return result
    return wrapper
</code></pre>

<p><strong>Usage:</strong></p>

<pre><code>@timing
def f(a):
    for _ in range(a):
        pass

print(f(2000000))
</code></pre>

<p><strong>Result:</strong></p>

<blockquote>
  <p><code>Elapsed time: 0.0971460342407</code></p>
</blockquote>
    </div>