<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>import math
import os
import random
import re
import sys
</code></pre>

<p>First, don't import stuff you don't use. As far as I can tell you don't actually use any of those modules.</p>

<pre><code>if __name__ == "__main__":
</code></pre>

<p>Second, you haven't written a module useful to import, so don't do <code>if __name__ == "main":</code>. Also, the rest of your code would throw an exception at line 21 where you do len(arr) with arr undefined. It's fine to not use such a check if it's understood that you don't intend people to import your module.</p>

<p>I would prefer sys.stdin to input, this is only due to python2/3 changing of what input() does. Going forward in purely python3 it'll probably be fine. I would also just use a list comprehension instead of bothering with map in that case.</p>

<pre><code>arr = [[int(_) for _ in sys.stdin.readline().strip().split()] 
       for i in range(6)]
</code></pre>

<p>As far as what is and isn't pythonic, I would argue that a big part of pythonic is readability/maintainability over things like speed (at least assuming we're not changing the big-O order). To that end, I'd suggest defining the hourglass shape as a list and then using that instead of built in indexing.</p>

<pre><code>hourglass = [[1, 1, 1],
             [0, 1, 0],
             [1, 1, 1]]
</code></pre>

<p>Finally, you can use itertools.product to do a lot of the gruntwork in terms of generating nested for loops and then use max on a map of the result:</p>

<pre><code>print(max(map(hourglass.count, itertools.product(i_range, j_range, [arr]))))
</code></pre>

<p>All put together:</p>

<pre><code>import sys
import itertools

arr = [[int(_) for _ in sys.stdin.readline().strip().split()] 
       for i in range(6)]

class Hourglass(object):
    hourglass = [[1, 1, 1],
                 [0, 1, 0],
                 [1, 1, 1]]

    def __init__(self, hourglass_shape=None):
        if hourglass_shape is not None:
            self.hourglass = hourglass_shape

    def count(self, info):
        i, j, array_ = info
        return sum([sum([a*b for a,b in zip(array_line[j:], hourglass_line)])
                    for array_line, hourglass_line in zip(array_[i:], 
                                                          self.hourglass)])

hourglass = Hourglass()

i_range = range(len(arr) - len(hourglass.hourglass) + 1)
# Assuming rectangular
j_range = range(len(arr[0]) - len(hourglass.hourglass[0]) + 1)

print(max(map(hourglass.count, itertools.product(i_range, j_range, [arr]))))
</code></pre>

<p>Most importantly, "pythonic" tends to mean easily readable and understandable by those who understand python well. So:</p>

<ul>
<li>Don't import things you don't plan to use. This will make it take a little longer for others to digest your code as their first assumption will be that you're using something from each of those modules.</li>
<li>Don't do <code>if __name__ == "main":</code> unless you plan to write a module for import.</li>
<li>Don't hard code stuff in (your array indexing).</li>
<li>Use list comprehension where it makes sense.</li>
<li>Use builtins like <code>max</code> and <code>sum</code> wherever it makes sense.</li>
</ul>

<p>Other stuff like how I use <code>itertools.product</code> and <code>map</code>'d the result are less "pythonic" vs "non-pythonic" and just how I'd do them to reduce lines of code.</p>

<p>Finally, the question of how "pythonic" your code is really only matters if you plan on sharing it. Python is great for whipping up quick results to (real world versions of) questions like these. If all you're looking for is a quick answer, do whatever works quickest for you. Often the time it would take you to worry about how you're writing code for a problem like this can take longer than it could ever save.</p>
    </div>