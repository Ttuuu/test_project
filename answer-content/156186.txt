<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Program structure</h2>

<p>At first glance, I would say that your main problem is <strong>excessively deep indentation</strong>, due to nested <code>for</code> loops and <code>try</code> blocks.</p>

<p>One consequence is the humorously awkward <code>OkayImDoneNowBreakEverything</code> exception.  Why doesn't Python support tagged breaks?  Because the language is designed to encourage you to write good code, and usually you would be <strong>better off returning from a function</strong>.  In fact, your code would be much improved with functions:</p>

<ul>
<li>Your program would be more readable it were divided into self-contained chunks, each having parameters, only local effects, and obvious outputs.  As an illustration of readability, just look at the <code>main()</code> function I wrote below: you can see what the program does at a glance.</li>
<li>Your comments could be docstrings.</li>
<li>You could reuse the code.  For example, what if you want to read the file once and search for multiple words within it?</li>
</ul>

<p>In addition, you can avoid nesting the loops for <code>i</code>, <code>j</code>, and <code>directions</code> by using <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="noreferrer"><strong><code>itertools.product()</code></strong></a>.</p>

<p>Furthermore, you can <strong>eliminate the use of exceptions</strong> altogether.  You could avoid encountering <code>IndexError</code> by doing a bounds check.  That would also be more efficient, since you can arithmetically predict whether walking in some direction will end up out of bounds before you even encounter the edge.</p>

<h2>Additional remarks</h2>

<p>Reading the grid could be done more simply.  Whenever you start with an empty list, then append to it in a loop, consider using a <strong>list comprehension</strong> instead to define the result "all at once".  In your code, there is no need to <code>.rstrip("\n")</code>, since you are will ignore any non-letters anyway.  Personally, I'd use <a href="https://docs.python.org/3/library/re.html#re.findall" rel="noreferrer"><code>re.findall('[A-Z]', â€¦)</code></a> to extract the letters.</p>

<p>Avoid having parallel data structures for <code>directions</code> and <code>names</code>.  I'd create one unified list, using <a href="https://docs.python.org/3/library/collections.html#collections.namedtuple" rel="noreferrer"><code>namedtuple</code></a> to help.</p>

<h2>Suggested solution</h2>

<pre><code>"""A word search solver"""

from collections import namedtuple
from itertools import product
import re
import sys

Direction = namedtuple('Direction', 'di dj name')

DIRECTIONS = [
    Direction(-1, -1, "up and to the left"),
    Direction(-1,  0, "up"),
    Direction(-1, +1, "up and to the right"),
    Direction( 0, -1, "left"),
    Direction( 0, +1, "right"),
    Direction(+1, -1, "down and to the left"),
    Direction(+1,  0, "down"),
    Direction(+1, +1, "down and to the right"),
]

def read_grid(filename):
    """
    Read a word search puzzle from a file into a 2D matrix of uppercase letters.
    """
    with open(filename) as f:
        return [re.findall('[A-Z]', line.upper()) for line in f]

def extract(grid, i, j, dir, length):
    """
    Extract letters from the grid, starting at row i column j, as a string.
    If the extraction will walk out of bounds, return None.
    """
    if ( 0 &lt;= i + (length - 1) * dir.di &lt; len(grid) and
         0 &lt;= j + (length - 1) * dir.dj &lt; len(grid[i]) ):
        return ''.join(
            grid[i + n * dir.di][j + n * dir.dj] for n in range(length)
        )
    return None

def search(grid, word):
    """
    Search for a word in a grid, returning a tuple of the starting row,
    starting column, and direction.  If the word is not found, return None.
    """
    word_len = len(word)
    for i, j, dir in product(range(len(grid)), range(len(grid[0])), DIRECTIONS):
        if word == extract(grid, i, j, dir, word_len):
            return i, j, dir
    return None

def main(filename, word):
    grid = read_grid(filename)
    match = search(grid, word.upper())
    if match is None:
        print("Didn't find a match.")
    else:
        i, j, dir = match
        print("Found a match at line {0}, column {1} going {2}".format(
                i + 1, j + 1, dir.name))

if __name__ == '__main__':
    main('input.txt', sys.argv[1])
</code></pre>
    </div>