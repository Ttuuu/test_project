<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Two things I'd add to Edward's answer, both related to <code>bc</code>.</p>

<ol>
<li>You can use <a href="https://mywiki.wooledge.org/HereDocument" rel="nofollow noreferrer">herestrings</a> to pass strings directly to a program's stdin, instead of <code>echo |</code>. So <code>bc &lt;&lt;&lt;"..."</code>.</li>
<li>You can format the expressions passed to <code>bc</code> to be more readable; it doesn't have to be one big blob. You need to <code>\</code>-escape expressions that span multiple lines, though.</li>
</ol>

<p>Borrowing from Edward's answer:</p>

<pre><code>#!/usr/bin/env bash
SCALE=${1:?Must provide a scale to compute up to}
VALUE=2
PI=0
FITNESS=1
DELTA=3
while [ "$(bc &lt;&lt;&lt;"$DELTA==0")" != "1" ]; do
    PI=$(bc &lt;&lt;&lt;"$PI+$DELTA")
    DELTA=$(bc &lt;&lt;&lt;"scale=$SCALE; \
      (4 / (${VALUE} * (${VALUE}+1) * (${VALUE}+2))) - \
      (4 / ((${VALUE}+2) * (${VALUE}+3) * (${VALUE}+4)))")
    VALUE=$((VALUE+4))
    FITNESS=$((FITNESS+1))
    printf '###############\n--&gt; %s // %s\n%s' "$FITNESS" "$VALUE" "$PI"
done
</code></pre>

<p>Also, <code>bc</code> is powerful enough that you could try implementing this whole algorithm in it, rather than jumping in and out of Bash (which involves creating numerous subprocesses and is therefore likely a lot of overhead). See <a href="https://www.gnu.org/software/bc/manual/html_mono/bc.html" rel="nofollow noreferrer"><code>man bc</code></a> if you haven't already.</p>
    </div>