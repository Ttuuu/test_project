<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It's pretty hard to break something that uses a global lock around everything. So this seems pretty thread-safe. But that doesn't answer the question of <em>why</em> you'd want to use this. </p>

<p>Asynchronous calls are useful for things that take a long time, particularly if you can delegate the "waiting" to some low-level event based solution (HTTP requests for example). </p>

<p>For anything else, they not only make for a very awkward use of the API, they also are rather slow and involve a lot of compiler generated machinery (which if you're using it for a long running task won't matter much, but for something as simple as adding to a dictionary is plain awful).</p>

<p>When optimising, it's always important to first figure out what you want to optimise (what scenarios are you particularly worried about? how many readers to writers? how much 'global' concurrency on the dictionary? how much races on existing keys?) and then to <em>measure</em>. </p>

<p>Just as a baseline here is the overhead your solution has when simply adding elements sequentially compared to a concurrent dictionary, the standard dictionary and the standard dictionary with a simple lock around it:</p>

<pre><code>|            Method |       N |        Mean |      Error |     StdDev | Ratio |
|------------------ |-------- |------------:|-----------:|-----------:|------:|
|         AddSimple | 1000000 |    34.94 ms |  0.4827 ms |  0.4515 ms |  1.00 |
|                   |         |             |            |            |       |
| AddSimpleWithLock | 1000000 |    52.14 ms |  0.7828 ms |  0.7323 ms |  1.00 |
|                   |         |             |            |            |       |
|     ConcurrentDic | 1000000 |   241.46 ms |  1.2975 ms |  1.2137 ms |  1.00 |
|                   |         |             |            |            |       |
|          AddAsync | 1000000 | 3,214.79 ms | 30.9326 ms | 28.9344 ms |  1.00 |
</code></pre>

<p>The following code was used to generate the results. If you haven't used BenchmarkDotNet before it's recommended to read up on it first to avoid getting incorrect results, but you can easily extend it for your other more interesting scenarios. In any case, the results are even worse than I imagined them to be (15 times slower than the concurrent dictionary is impressive even with all the boxing and async overhead - I guessed it'd be about 10 times at the start). (What shouldn't come as a surprise is how cheap uncontended locks are these days, everyone always running to ConcurrentDictionary and co might want to rethink that).</p>

<pre><code>[ClrJob(baseline: true)]
public class DictionaryComparison
{
    private Random _rand;

    private Dictionary&lt;int, int&gt; _simpleDic;

    private Dictionary&lt;int, int&gt; _simpleDicWithLock;

    private readonly object _lock = new object();

    private ConcurrentDictionary&lt;int, int&gt; _concurrentDic;

    private AsyncDictionary&lt;int, int&gt; _asyncDictionary;

    [Params( 1_000_000)]
    public int N;

    [IterationSetup]
    public void IterationSetup()
    {
        _rand = new Random(0xdead);
        _simpleDic = new Dictionary&lt;int, int&gt;();
        _simpleDicWithLock = new Dictionary&lt;int, int&gt;();
        _concurrentDic = new ConcurrentDictionary&lt;int, int&gt;();
        _asyncDictionary = new AsyncDictionary&lt;int, int&gt;();
    }

    [Benchmark]
    public void AddSimple()
    {
        for (int i = 0; i &lt; N; i++)
        {
            _simpleDic[i] = i;
        }
    }

    [Benchmark]
    public void AddSimpleWithLock()
    {
        for (int i = 0; i &lt; N; i++)
        {
            lock (_lock)
            {
                _simpleDicWithLock[i] = i;
            }
        }
    }

    [Benchmark]
    public void ConcurrentDic()
    {
        for (int i = 0; i &lt; N; i++)
        {
            _concurrentDic[i] = i;
        }
    }

    [Benchmark]
    public async Task AddAsync()
    {
        for (int i = 0; i &lt; N; i++)
        {
            await _asyncDictionary.AddAsync(i, i);
        }
    }

}


public sealed class Program
{
    private static async Task Main(string[] args)
    {
        var summary = BenchmarkRunner.Run&lt;DictionaryComparison&gt;();
    }
}
</code></pre>

<p>PS: The work is so little even when adding a million elements, that the results are a bit dubious for the two AddSimple variants.</p>
    </div>