<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Use the <a href="https://www.geeksforgeeks.org/handling-click-events-button-android/" rel="nofollow noreferrer">android:onClick</a> attribute to get rid of the boilerplate calls to <code>setOnClickListener</code> and <code>findViewById</code>.</p>

<p>The giant if-else statement is very repetitive. The actions taken in all branches are assigning a value to the <code>value</code> variable and appending a digit to the phone number. You could convert the code to data by mapping the button label to a value and a string.</p>

<pre><code>final String label = ((Button) view).getText();
final int value = buttonLabelToValue.get(label);
phoneNo += buttonLabelToPhoneNumberDigit.get(label);
</code></pre>

<p>Handle the two special cases '#' and '*' by mapping the PhoneNumberDigit to an empty string.</p>

<p>I never write code to prepare for an UI component calling a wrong listener method. I define the UI and the listeners and if my UI calls the wrong method then it's a bug. My tests must be good enough to catch such scenarios. In this example, not checking the return value of <code>buttonLabelToValue.get(...)</code> for nulls results in <code>NullPointerException</code> instead of the <code>IllegalStateException</code> thrown in your version. Not much difference for the user as the app crashes in both cases.</p>
    </div>