<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Take it on its readability deference : </p>

<p>Example 1 (Current Usage): </p>

<pre><code>CopyReportsList(outList);
</code></pre>

<p>Example 2 (Common):</p>

<pre><code>var outList = GetIntegerList();
</code></pre>

<p>Example 3 (Common): </p>

<pre><code>CopyReportsList(source, out outList);
</code></pre>

<p>if you compare them, you'll see that anyone would read example 1 at first would think it's meant to copy <code>outList</code> into another collection, which means, there is some other process going. While example 2 and 3 would be read as having an identical copy of current stored list.</p>

<p>So, no one would ever use example 1, because it's unclear, confusing, and not a good practice. </p>

<p>Example 2 would be clearer, and it's most used. </p>

<p>Example 3 would be also used in some cases, but mostly, its most known uses for <code>TryParse</code> and <code>Copy</code> functionalities. </p>

<p>For your case, example 2 would be fine, but you would need to use a <code>Property</code> instead. </p>

<pre><code>public IEnumerable&lt;int&gt; Integers 
{
    get { return integerList; }
}
</code></pre>

<p>usage : </p>

<pre><code>var data = new SomeClass();

var list = data.Integers;
</code></pre>

<p>But you have to name your property to something that would be related to your logic functionality. Also, for returning type, if the return type is type of collection or array, try to use <code>IEnumerable</code> interface it would be better. (same as I did in the property example). The reason is that <code>IEnumerable</code> interface is implemented on all collections types including arrays. So, this would give your implementation more flexibility by providing the minimal understanding of the returning type which would be easier to extend to other collections types for current and long term running. </p>

<p>another note on this line : </p>

<pre><code>outList = this.integerList.ToList();
</code></pre>

<p><code>integerList</code> is a <code>List&lt;int&gt;</code>, so there is no need to use <code>ToList()</code>, what are you doing is converting a list to a list ! which is redundant and unnecessary. </p>
    </div>