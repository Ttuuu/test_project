<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>From code's point of view (no security improvements), I have these points:</p>

<ul>
<li>Class name should be noun and in camelcase, no underscores. CryptoSecurity is very generic name, not sure if it's good one (but can't think of better one at the moment).</li>
<li><p>Avoid static methods if possible. I suggest you instead make <code>encrypt</code> and <code>decrypt</code> class methods and crypto algorithm name (<code>CRY_ALGO</code>) class variable passed in constructor (you can even create default constructor to pass your "AES"). That way you can create different instances for different algorithms and don't need to worry about race conditions in case you would introduce any writable local variable.</p>

<pre><code>public class CryptoSecurity {

    static public final String CRY_ALGO = "AES";

    private String cryptoAlgorithm;

    public CryptoSecurity() {
        this(CRY_ALGO);
    }

    public CryptoSecurity(String cryptoAlgorithm) {
        this.cryptoAlgorithm = cryptoAlgorithm;
    }


    public String encrypt(byte[] pSecret, String pValue) throws GeneralSecurityException {
        Key aesKey = new SecretKeySpec(pSecret, cryptoAlgorithm);
        Cipher cipher = Cipher.getInstance(cryptoAlgorithm);
        cipher.init(Cipher.ENCRYPT_MODE, aesKey);
        byte[] encrypted = cipher.doFinal(pValue.getBytes());
        Base64.Encoder encoder = Base64.getEncoder();
        return encoder.encodeToString(encrypted);
    }


    public String decrypt(byte[] pSecret, String pEncrypted) throws GeneralSecurityException {
        SecretKeySpec skeySpec = new SecretKeySpec(pSecret, cryptoAlgorithm);
        Cipher cipher = Cipher.getInstance(cryptoAlgorithm);
        cipher.init(Cipher.DECRYPT_MODE, skeySpec);
        byte[] original = cipher.doFinal(Base64.getDecoder().decode(pEncrypted));
        return new String(original);
    }

    static public void main( String[] args ) {
        CryptoSecurity cs = new CryptoSecurity();
        try {
            System.out.println("enc " + cs.encrypt( "2144226321110063".getBytes() , "serial.txt" ));
            System.out.println("dcr " + cs.decrypt( "2144226321110063".getBytes() , "oLQgEUxg3Z3zMSsSkiKpBg==" ));
        } catch( GeneralSecurityException e ) {
            e.printStackTrace();
        }
    }
}
</code></pre></li>
</ul>
    </div>