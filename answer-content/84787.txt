<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>@tim has covered a bunch of what I was going to add, but here are some additional points:</p>

<p>You should anticipate having whitespace in the input. A "simple" replace-all would suffice:</p>

<pre><code>equation = equation.replaceAll("\\s+", "");
</code></pre>

<p>Your solution of converting <code>-</code> to <code>+-</code> is novel, and effective, but it really should have a comment on it explaining that you are going to re-split the String and parse the new <code>-</code> as part of the integer, rather than as an operator. Leaving it as it is required some detective work on how it functions.</p>

<p><strong>Bug:</strong> Your system will fail on things like: <code>1 + 2 * -3</code>  (ignoring the whitespace).</p>

<p>Your inner workings of the <code>*</code> and <code>/</code> is a bit messy, though. A logical progression for your challenge would be to add, say, a <code>%</code> operator.... which would require a complicated change.</p>

<p>Operators of equal precedence should be handled together. treating <code>*</code> specially when compared to <code>/</code> makes it awkward because you have to test all combinations inside the <code>*</code> breakdown....</p>

<p>I would suggest using a smarter split expression, one that splits on the gaps between the operators and the values...:</p>

<pre><code>String[] parts = operand.split("(?=[/*])|(?&lt;=[/*])");
</code></pre>

<p>With the above regex, you will get for example:</p>

<pre><code>1/2*773 -&gt; [1, /, 2, *, 773]
</code></pre>

<p>The way the regex works is that it looks for two things (the regex is in two parts - <a href="http://www.regular-expressions.info/lookaround.html" rel="noreferrer">using "lookaround" expressions</a>)....</p>

<ul>
<li><code>(?=[/*])</code> - A positive zero-width look-ahead - This says: <em>find any gap between two characters where the next character is a <code>/</code> or <code>*</code>.</em></li>
<li><code>(?&lt;=[/*])</code> - A positive zero-width look-behind - This says: *find any gap between two characters where the previous character was a <code>/</code> or <code>*</code>.</li>
</ul>

<p>Put them together with an or condition, it says: <em>split the input on the gaps before and after <code>/</code> or <code>*</code>.</em>
Now, you can just initialize the result to index-1, and then loop through the rest.... :</p>

<pre><code>double result = Double.parseDouble(parts[0]);

for (int i = 1; i &lt; parts.length; i += 2) {
    String op = parts[i];
    double val = Double.parseDouble(parts[i+1]);
    switch (op) {
        case "*" :
            result *= val;
            break;
        case "/" :
            result /= val;
            break;
    }
}
return result;
</code></pre>
    </div>