<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Use the right data structure for the job. If you have</p>

<pre><code>            if int(n) not in primes:
</code></pre>

<p>called more than a small constant number of times then <code>primes</code> should not be a list. If you change</p>

<blockquote>
<pre><code>primes = [i for i in gen_primes(10000000)]
</code></pre>
</blockquote>

<p>to</p>

<pre><code>primes = set(i for i in gen_primes(10000000))
</code></pre>

<p>you will see a significant speedup.</p>

<hr>

<p>The algorithm could also be improved. I don't want to go into too much detail here because that's not in keeping with the ethos of Project Euler, but I think I can give you a couple of hints:</p>

<p>The problem statement says that there are only eleven primes matching the criterion. What property of primes with the criterion allowed them to prove that? How can you apply that property to generate them faster?</p>

<blockquote class="spoiler">
  <p> If you have found all of the truncatable primes of length <code>n</code>, do you need to loop over all truncations of a candidate number of length <code>n+1</code>?</p>
</blockquote>
    </div>