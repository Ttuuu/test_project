<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Just a few quick things that jump out at me (I didn't go over all of it):</p>
<p>Using <code>static</code> for everything is awkward. Usually you want to avoid storing state in statics. I know this is a simple app without multiple classes so you can get away with it here. But following more typical rules of thumb, you would make all these variables and methods non-static.</p>
<p>If you see yourself using if/else to simply return true or false, you can almost always remove the if/else.</p>
<pre><code>static boolean takenFieldCheck() {
    return !bpos[num - 1].equals(numS);
}
</code></pre>
<p>This method could be made much shorter like this:</p>
<pre><code>static void numToString() {
    numS = " " + num + " ";
}
</code></pre>
<p>However, you only use <code>numS</code> in one spot. It's error prone to keep a copy of your game state in two different forms, because then you have to be absolutely sure you always keep them in sync. I would remove <code>numS</code> and change the method to this:</p>
<pre><code>static String numAsString() {
    return " " + num + " ";
}
</code></pre>
<p>And use it in the one place you were comparing something to <code>numS</code>.</p>
<p>It would be better practice to catch your Exceptions from Scanner right from where they are thrown because then you can show the proper error message right there and let the user recover. Your top-level catch-all block doesn't really know what kind of exception was thrown, so it could be showing the wrong message. Not really in the case of this very simple game, though.</p>
<p>You're checking for a number out of range and let the user recover from that. Why not let them recover from anything, like this? Also, there's no reason for this method to return a Boolean, since it cannot possibly return false. I would rename it to describe what it actually does.</p>
<pre><code>static void receiveValidMove() { // was isValidStepCheck
    Scanner sc = new Scanner(System.in);
    while (true) {
        int newNumber;
        try {
            newNumber = sc.nextInt();
        } catch (Exception e) {
            newNumber = -1; // input was invalid
        }
        if (number &gt;= 1 &amp;&amp; number &lt;= 9){
            num = newNumber;
            numToString(); // omit if following above advice
            return;
        }
        System.out.println("You have to enter a number between 1 and 9!");
    }
    
}
</code></pre>
    </div>