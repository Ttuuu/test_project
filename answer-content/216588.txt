<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>With this review, I hope to offer an alternative approach to your stated problem by using a SQL query.</p>

<p>Instead of copying your data into subdivided sheets, I think a better fit to your stated problem would be simply query or filter the data you want to find, when you need it. Leave your raw data as is, and just pull it up on demand when needed. I chose to use <code>ADODB</code> with a SQL statement, but you could achieve something very similar with <code>AutoFilter</code> or <code>Advanced Filter</code> too.</p>

<p><strong><em>How is this better? (IMO)</em></strong></p>

<ul>
<li>By copying your unique groups into new sheets, you are effectively doubling your raw data size. With this approach, your raw data remains untouched, you just summarize it.</li>
<li>You don't need to create 300+ sheets, you'd only ever need 2 sheets (given the stated problem). A summary sheet and a raw data sheet. A lot easier to debug is something goes awry.</li>
<li>No column concatenation is needed with this approach. Instead of making a composite key (of sorts) with 4 columns of joined data, simply filter (or query) the columns with the values you need for each column. BTW, concatenating all columns again, doubles the size of your data...again.</li>
</ul>

<p>I've mocked up a spreadsheet with 150,000 rows of data in Worksheet called <code>Raw Data</code>. This sheet has 4 columns of randomly generated single characters to mock up what you described. </p>

<p><a href="https://i.stack.imgur.com/gJFSn.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/gJFSn.png" alt="Raw Data"></a></p>

<p>You'll also need a sheet named <code>Summary</code>, this is where the data is output to. </p>

<p>The way this work is it will find all matching rows that match the parameters you supply for Column 1 through 4. Each Column value needs to match what you provided to get returned. </p>

<p>The code below has querying approach built out. I didn't create a form/UI to pass in values, however that should be fairly easy to do now, just update the <code>SearchParameters</code> type, you can do this in the <code>CreateView</code> sub. The performance is pretty good, queries are taking less than 2 seconds to finish on my machine.</p>

<p>Let me know if there are any questions, happy to help.</p>

<p><strong>Code</strong></p>

<pre><code>Option Explicit
Private Const adCmdText As Long = 1
Private Const adVarWChar As Long = 202
Private Const adParamInput As Long = 1

Public Type SearchParameters
    Column1Value As String
    Column2Value As String
    Column3Value As String
    Column4Value As String
End Type

Private Function GetExcelConnection() As Object
    Set GetExcelConnection = CreateObject("ADODB.Connection")
    GetExcelConnection.ConnectionString = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" &amp; _
                                          ThisWorkbook.FullName &amp; ";Extended Properties='Excel 12.0;HDR=YES';"
    GetExcelConnection.Open
End Function

Private Sub DisplayFilteredRawData(SQLParameters As SearchParameters)
    Const SQL               As String = "SELECT [Column 1],[Column 2],[Column 3],[Column 4] " &amp; _
                                        "FROM [Raw Data$] " &amp; _
                                        "WHERE [Column 1] = ? and [Column 2] = ? and [Column 3] = ? and [Column 4] = ?"
    Static dbConnection      As Object
    Static OutputSheet       As Excel.Worksheet
    Static OutputRange       As Excel.Range
    Static RecordCount       As Excel.Range
    Dim FilteredRS           As Object
    Const MaxCellLength      As Long = 32767
    Const NumberOfHeaderRows As Long = 4

    If OutputSheet Is Nothing Then Set OutputSheet = ThisWorkbook.Sheets("Summary")
    If OutputRange Is Nothing Then Set OutputRange = OutputSheet.Range("A5:F100000") 'Where data is output
    If RecordCount Is Nothing Then Set RecordCount = OutputSheet.Range("F4") 'Where the record count goes
    If dbConnection Is Nothing Then Set dbConnection = GetExcelConnection

    With CreateObject("ADODB.Command")
       .ActiveConnection = dbConnection
       .CommandType = adCmdText
       .CommandText = SQL
       .Parameters.Append .CreateParameter("@Value1", adVarWChar, adParamInput, MaxCellLength, SQLParameters.Column1Value)
       .Parameters.Append .CreateParameter("@Value2", adVarWChar, adParamInput, MaxCellLength, SQLParameters.Column2Value)
       .Parameters.Append .CreateParameter("@Value3", adVarWChar, adParamInput, MaxCellLength, SQLParameters.Column3Value)
       .Parameters.Append .CreateParameter("@Value4", adVarWChar, adParamInput, MaxCellLength, SQLParameters.Column4Value)
       Set FilteredRS = .Execute
    End With

    OutputRange.Clear
    If Not FilteredRS Is Nothing Then
        OutputSheet.Range(OutputRange.Cells(1, 1).Address).CopyFromRecordset FilteredRS
    End If
    RecordCount.Value2 = OutputSheet.Range("A1048576").End(xlUp).Row - NumberOfHeaderRows
End Sub

Public Sub CreateView()
    Dim myTimer As Double: myTimer = Timer
    Dim mySearchParameters As SearchParameters

    With mySearchParameters
        .Column1Value = "l"
        .Column2Value = "o"
        .Column3Value = "l"
        .Column4Value = "z"
    End With

    DisplayFilteredRawData mySearchParameters
    Debug.Print Timer - myTimer
End Sub
</code></pre>
    </div>