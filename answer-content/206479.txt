<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Avoid recalculating</strong></p>

<p>Lesser compilers will recalculate <code>(int)sqrt((double)n)</code> every iteration. Avoid that with a one time assignment.</p>

<pre><code>//for (int k = 2; k &lt;= (int)sqrt((double)n); ++k)
int sq = (int)sqrt((double)n)
for (int k = 2; k &lt;= sq; ++k)
</code></pre>

<p><strong>Avoid floating point math for integer problems</strong></p>

<p><code>sqrt((double)n)</code> of some perfect square may return a value very <em>near</em> the expected root.  This is more common with 1) large <code>n</code> and lower quality <code>sqrt()</code> implementations.  If that <em>near</em> value is just a tad small, the <code>(int)</code> will truncate away the <code>x.9999999999...</code> part to <code>x</code> and not <code>x+1</code> leading to the wrong <code>prime()</code> functionality.</p>

<p>Also when the precision of <code>int</code> (think 64-bit) exceeds the precision of <code>double</code>, a similar unexpected result from <code>sqrt()</code> can arise.</p>

<p>There is fortunately a simple alternative that takes advantage that when <code>a % b</code> is calculated the additional cost of <code>a / b</code> is often trivial with modern compilers.  So stop the loop when the <em>quotient</em> is too small.</p>

<pre><code>//for (int k = 2; k &lt;= (int)sqrt((double)n); ++k) {
//  if( n % k == 0) {
//   c = 1;
//  }
//}

int q = n-1;  // Insure all but n==2 iterates at least once
for (int k = 2; k &lt;= q; ++k) {
  q = n/k; 
  if(n%k == 0) {
    c = 1;
    break; // leave for loop as subsequent iterations are not informative.
  }
}
</code></pre>

<p><strong>Prime test can use the <code>unsigned</code> domain</strong></p>

<p>Although OP is performing prime tests in a limited range, no need to code <code>prime()</code> with that limit.</p>

<p>Consider <code>bool</code> and other candidate ideas below.</p>

<pre><code>#include &lt;stdbool.h&gt;

// Return true when prime 
bool prime(unsigned n) {
  if (n%2 == 0 || n == 1) {  // easy cases
    return n == 2;
  }
  unsigned quotient = n - 1;
  for (unsigned divisor = 3; divisor &lt;= quotient; divisor += 2) {
    quotient = n / divisor;
    if( n % divisor == 0) {
      return false;
    }
  }
  return true;
}
</code></pre>
    </div>