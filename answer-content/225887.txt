<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Program structure</h3>

<p>Separate I/O from the calculation and keep the main function short:</p>

<pre><code>public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int dist = sc.nextInt();
    if (dist &lt; 0) {
        // ... report error and terminate  program.

    }

    int bonus = calculateBonus(dist);
    System.out.println("The bonus is " + bonus);
}
</code></pre>

<p>That makes the program structure clearer, makes the functions reusable, and allows to add test cases easily.</p>

<h3>Handle invalid input</h3>

<p>By convention, error messages are written to the standard error output, and a nonzero exit code indicates an abnormal program termination. Instead of "Invalid Input" I suggest to print a message indicating the correct usage:</p>

<pre><code>if (dist &lt; 0) {
    System.err.printf("Input must be a non-negative integer.");
    System.exit(1);
}
</code></pre>

<h3>Miscellaneous</h3>

<p>Inconsistent white space here:</p>

<pre><code>int bonus=0;
int prodOdd = 1;
</code></pre>

<p>It can be difficult to choose a good variable name, but I am sure that you'll find something better here:</p>

<pre><code>int lol = counter;
</code></pre>

<p>Declare variables at the nearest scope where they are used. As an example, <code>currDigit</code> is only used inside the for-loop:</p>

<pre><code>for (int i = 0; i &lt; lol; i++) {
    int currDigit = dist % 10;
    // ...
}
</code></pre>

<h3>Simplifiying the program</h3>

<p>The calculation of</p>

<pre><code>    if (prodOdd == prodEven)
        bonus = 2 * prodOdd;
    else
        bonus = prodOdd &gt; prodEven ? prodOdd : prodEven;
</code></pre>

<p>does not change if we exchange the even and the odd product. Therefore it does not matter if we count even and odd position from the most significant (decimal) digit or from the least significant digit.</p>

<p>As a consequence, we can process the digits starting with the least significant one, and it is not necessary to calculate the number of digits beforehand.</p>

<p>Instead of the <code>counter</code>, a boolean variable is sufficient to keep track of even and odd positions. </p>

<p>So the <code>countDigits()</code> function is obsolete, and <code>calculateBonus()</code> could be implemented like this:</p>

<pre><code>public static int calculateBonus(int dist) {
    int prodOdd = 1;
    int prodEven = 1;
    boolean evenPosition = true;

    while (dist &gt; 0) {
        int currDigit = dist % 10;
        if (evenPosition) {
            prodEven *= currDigit;
        } else {
            prodOdd *= currDigit;
        }

        dist /= 10;
        evenPosition = !evenPosition;
    }

    return prodOdd == prodEven ?
        2 * prodOdd :
        prodOdd &gt; prodEven ? prodOdd : prodEven;
}
</code></pre>
    </div>