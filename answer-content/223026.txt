<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>Avoid recursion if the iterative solution is easily available. Rewrite <code>recursion</code> in a tail-recursive fashion:</p>

<pre><code>def recursion(node):
    if node.beginning is not 0:
        return
    closedlist.append(node.came_from)
    recursion(node.parent)
</code></pre>

<p>and eliminate the tail-recursion completely:</p>

<pre><code>def recursion(node):
    while node.beginning is 0:
        closedlist.append(node.came_from)
        node = node.parent
</code></pre>

<p>As a perk benefit, it is clear now that the <code>recursion</code> just traces the path from the node upwards. Call it appropriately</p>

<pre><code>def trace_path(node):
</code></pre></li>
<li><p>Handling <code>openlist</code> looks very suboptimal.</p>

<ul>
<li><p><code>list.pop(0)</code> has a linear time complexity.</p></li>
<li><p>Along the same line, <code>check_list</code>, which is also a linear pass over the <code>openlist</code>, is also performed at every iteration.</p></li>
<li><p>You sort it on every iteration of the</p>

<pre><code>while len(openlist) is not 0
</code></pre>

<p>loop. Meanwhile, the iteration adds very few (at most 8, if I am not mistaken) nodes to it. That means that you are constantly sorting an almost sorted list. Usually, it is not the best strategy.</p></li>
</ul>

<p>All that said, a sorted dictionary looks more promising than a list. </p></li>
</ul>
    </div>