<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>For a first application in Java, good job!</p>
<p>I have some suggestions for your code.</p>
<h2>When using regex, try to uses the <code>java.util.regex.Pattern</code> class instead of the <code>java.lang.String#matches</code> method.</h2>
<p>When using the <code>java.lang.String#matches</code> method, the regex pattern is recompiled each time the method is called. This can cause a slowdown in your method execution.</p>
<p><strong>How to uses the matcher</strong></p>
<pre class="lang-java prettyprint-override"><code>Pattern pattern = Pattern.compile("[*/+-]");
while (true) {
   //[...]
   if (pattern.matcher(operation).matches()) {
      //[...]
   }
   //[...]
}
</code></pre>
<h2>Extract some of the logic to methods.</h2>
<p>Extracting code can make the code shorter and easier to read. Also when you have logic that does the same thing, you can generally move it into a method and reuse it.</p>
<ul>
<li>You can make a method that asks a question and read the next float; this will allow you to reuse the same method.</li>
</ul>
<pre class="lang-java prettyprint-override"><code>public static void main(String[] args) {
   //[...]
   firstNum = askQuestionAndReceiveFloat(scanner, "Type in first number");
   secondNum = askQuestionAndReceiveFloat(scanner, "Type in second number");
   //[...]
}

private static float askQuestionAndReceiveFloat(Scanner scanner, String question) {
   System.out.println(question);
   return scanner.nextFloat();
}
</code></pre>
<ul>
<li>You can extract the logic to parse the operation.</li>
</ul>
<pre class="lang-java prettyprint-override"><code>private static String askForOperation(Pattern pattern, Scanner scanner) {
   String operation;
   while (true) {
      System.out.println("Select operation (*,/,+,-)");
      operation = scanner.next();

      if (pattern.matcher(operation).matches()) {
         break;
      } else {
         System.out.println("Invalid operation");
      }
   }
   return operation;
}
</code></pre>
<ul>
<li>If you are using Java 14, you can use the newer version of the <a href="https://docs.oracle.com/en/java/javase/14/language/switch-expressions.html" rel="nofollow noreferrer"><code>switch-case</code></a> and return the value.</li>
</ul>
<pre class="lang-java prettyprint-override"><code>private static float getResult(float firstNum, float secondNum, String operation) {
   return switch (operation) {
      case "*" -&gt; multiply(firstNum, secondNum);
      case "/" -&gt; divide(firstNum, secondNum);
      case "+" -&gt; addition(firstNum, secondNum);
      case "-" -&gt; subtraction(firstNum, secondNum);
      default -&gt; 0;
   };
}
</code></pre>
<p>Those's changes will make the main method shorter and easier to read!</p>
<h2>Use <code>java.io.PrintStream#printf</code> instead of <code>java.io.PrintStream#println</code> when you have to concatenate</h2>
<p><code>java.io.PrintStream#printf</code> offer you to use <a href="https://docs.oracle.com/en/java/javase/14/docs/api/java.base/java/util/Formatter.html" rel="nofollow noreferrer">patterns</a> to build the string without concatenating it manually. The only downside is you will be forced to add the break line character yourself; in java you can use the <code>%n</code> to break the line (portable between various platforms) or uses the traditional <code>\n</code> / <code>\r\n</code>.</p>
<pre class="lang-java prettyprint-override"><code>System.out.printf("Result of your operation is %s%n", result);
</code></pre>
<h1>Refactored code</h1>
<pre class="lang-java prettyprint-override"><code>public static float multiply(float a, float b) {
   return a * b;
}

public static float divide(float a, float b) {
   return a / b;
}

public static float addition(float a, float b) {
   return a + b;
}

public static float subtraction(float a, float b) {
   return a - b;
}

private static float askQuestionAndReceiveFloat(Scanner scanner, String question) {
   System.out.println(question);
   return scanner.nextFloat();
}

private static String askForOperation(Pattern pattern, Scanner scanner) {
   String operation;
   while (true) {
      System.out.println("Select operation (*,/,+,-)");
      operation = scanner.next();

      if (pattern.matcher(operation).matches()) {
         break;
      } else {
         System.out.println("Invalid operation");
      }
   }
   return operation;
}

private static float getResult(float firstNum, float secondNum, String operation) {
   return switch (operation) {
      case "*" -&gt; multiply(firstNum, secondNum);
      case "/" -&gt; divide(firstNum, secondNum);
      case "+" -&gt; addition(firstNum, secondNum);
      case "-" -&gt; subtraction(firstNum, secondNum);
      default -&gt; 0;
   };
}

public static void main(String[] args) {
   Pattern pattern = Pattern.compile("[*/+-]");
   Scanner scanner = new Scanner(System.in);
   float firstNum, secondNum, result;
   String operation = askForOperation(pattern, scanner);

   firstNum = askQuestionAndReceiveFloat(scanner, "Type in first number");
   secondNum = askQuestionAndReceiveFloat(scanner, "Type in second number");
   result = getResult(firstNum, secondNum, operation);

   System.out.printf("Result of your operation is %s%n", result);
}
</code></pre>
<p>Also, I suggest to handle the <code>x / 0</code> case :)</p>
    </div>