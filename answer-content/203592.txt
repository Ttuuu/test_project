<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Seems to me that the program is a good fit for multi threaded processing: </p>

<ol>
<li>Set up a thread pool with a fixed number of threads. Usually it is connected to the number of processors of your hardware.</li>
<li>Split the range of iteration by the number of threads in the pool. invoke each thread and give it its range to work on.</li>
<li>After all threads have finished, they report the results back to the main thread and it does the printing, so it gets printed in order.</li>
</ol>

<p>I suggest you work with Java's <a href="https://docs.oracle.com/javase/tutorial/essential/concurrency/executors.html" rel="nofollow noreferrer"><code>ExecutorService</code></a> that manages thread pools, tasks and <a href="https://docs.oracle.com/javase/tutorial/essential/concurrency/forkjoin.html" rel="nofollow noreferrer">fork/join framework</a>. </p>
    </div>