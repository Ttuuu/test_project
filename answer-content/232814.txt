<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is a very interesting question.</p>

<p>First, I would reconsider the name. <code>safe_static_cast</code> implies that it is more general than it is. The types must have <code>std::numeric_limits</code> specializations in your implementation, so clearly you are thinking of numeric types. Maybe <code>safe_numeric_cast</code> or even <code>numeric_cast</code> would be a better name.</p>

<p>Secondly, <code>assert</code> is too often compiled out, so I would ask to consider alternatives which aren't. One alternative is throwing <code>std::out_of_range</code>. Another alternative is to saturate the destination type: if the source value is larger than the largest destination value, return the largest destination value.</p>

<p>Consider <code>FromType</code> = <code>int</code>, <code>from</code> = <code>-1</code>, <code>ToType</code> = <code>unsigned int</code>. Note that <code>-1 &gt;= 0u</code> is <code>true</code>.</p>

<p>Consider the range of floating point types: <code>min()</code> is the lowest <strong>positive</strong> floating point value.</p>

<p>Consider floating point infinities: <code>numeric_cast&lt;double, double&gt;</code> should always be fine, right? But the comparison will fail for infinity.</p>

<p>Consider floating point nans: similarly, all comparisons fail for nans.</p>
    </div>