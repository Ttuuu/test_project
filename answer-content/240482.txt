<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You're pretty good as-is, but there's a few things that could be changed:</p>

<h2><code>extern crate</code> is no longer needed</h2>

<p>In Rust 2018 edition, <code>extern crate</code> is no longer needed unless you're using it with <code>#[macro_use]</code>.</p>

<h2>Detect overflow</h2>

<p>Your program could panic (debug mode) or worse, produce weird values (release mode) when it overflows. Instead, use:</p>

<pre class="lang-rust prettyprint-override"><code>let next = self.curr.checked_add(&amp;self.next)?;
</code></pre>

<p>This uses the fancy <code>?</code> operator to return <code>None</code> when <a href="https://rust-num.github.io/num/num/trait.CheckedAdd.html" rel="nofollow noreferrer">that function</a> returns <code>None</code>, stopping the iterator.</p>

<h2>Provide a <code>Default</code> implementation</h2>

<p>It's handy to be able to create an automatic default implementation for use in derived structs. See this example:</p>

<pre class="lang-rust prettyprint-override"><code>#[derive(Default)]
struct Foo {
    data: u32,
    fib: Fibonacci&lt;u128&gt;,
}
</code></pre>

<p>By implementing <code>Default</code>, you make it easy for your users to use your type later on. Someone can just say <code>Foo::default()</code> without writing any initialization code.</p>

<h2>(Optional) Derive more traits</h2>

<p>Several traits could be helpful in your application, such as <code>Debug</code> which would allow you to see the inside of the generator, and <code>Clone</code> to create a new generator with the same state. This is especially helpful when putting your struct in another struct which uses those traits, as I normally throw at least a <code>#[derive(Debug)]</code> on all my structs. Normally, this is done with the <code>#[derive()]</code> macro:</p>

<pre class="lang-rust prettyprint-override"><code>#[derive(Copy, Clone, Debug, PartialEq)]
pub struct Fibonacci&lt;T: Copy, Clone, Debug, PartialEq&gt; {
    curr: T,
    next: T,
}
</code></pre>

<p>However, you'd loose out on types that aren't i.e. <code>Copy</code>, such as BigInts that are heap-allocated. In that case, you can do:</p>

<pre class="lang-rust prettyprint-override"><code>use std::fmt;

impl&lt;T: Copy&gt; Copy for Fibonacci&lt;T&gt; {}

impl&lt;T: Clone&gt; Clone for Fibonacci&lt;T&gt; {
    fn clone(&amp;self) -&gt; Self {
        Self {
            curr: self.curr.clone(),
            next: self.next.clone(),
        }
    }
}

impl&lt;T: PartialEq&gt; PartialEq for Fibonacci&lt;T&gt; {
    fn eq(&amp;self, rhs: &amp;Self) -&gt; bool {
        self.curr == rhs.curr &amp;&amp; self.next == rhs.next
    }
}

impl&lt;T: fmt::Debug&gt; fmt::Debug for Fibonacci&lt;T&gt; {
    fn fmt(&amp;self, f: &amp;mut fmt::Formatter&lt;'_&gt;) -&gt; fmt::Result {
        f.debug_struct("Fibonacci")
         .field("curr", &amp;self.curr)
         .field("next", &amp;self.next)
         .finish()
    }
}
</code></pre>

<p>(note that I normally prefer the <code>T: Trait</code> syntax. You can use <code>where</code> instead) Unfortunately, yes, that does create a lot of repeated noise. However, you require that your types are <code>PrimInt</code>s anyways, so you will never have a type that isn't <code>Copy</code>, <code>Clone</code>, <code>Debug</code>, or <code>PartialEq</code>. But the end result isn't much prettier:</p>

<pre class="lang-rust prettyprint-override"><code>#[derive(Copy, Clone, Debug, PartialEq)]
pub struct Fibonacci&lt;T: Copy + Clone + Debug + PartialEq&gt; {
    curr: T,
    next: T,
}

impl&lt;T&gt; Fibonacci&lt;T&gt; where T: Copy + Clone + Debug + PartialEq + PrimInt {
    pub fn new() -&gt; Self {
        Self { curr: T::zero(), next: T::one() }
    }
}

impl&lt;T&gt; Default for Fibonacci&lt;T&gt; where T: Copy + Clone + Debug + PartialEq + PrimInt {
    fn default() -&gt; Self {
        Self::new()
    }
}

impl&lt;T&gt; Iterator for Fibonacci&lt;T&gt; where T: Copy + Clone + Debug + PartialEq + PrimInt {}
</code></pre>

<p>One way to fix this is to create a new trait that has all five of those bounds. In fact, there's a <a href="https://github.com/rust-lang/rust/issues/41517" rel="nofollow noreferrer">current issue</a> to do just that. However, we can create our own trait in the meantime to fix that:</p>

<pre class="lang-rust prettyprint-override"><code>pub trait Primitive: Copy + Clone + Debug + PartialEq + PrimInt {}
impl&lt;T: Copy + Clone + Debug + PartialEq + PrimInt&gt; Primitive for T {}
</code></pre>

<p>So now we have:</p>

<pre class="lang-rust prettyprint-override"><code>use std::fmt::Debug;

pub trait Primitive: Copy + Clone + Debug + PartialEq + PrimInt {}
impl&lt;T: Copy + Clone + Debug + PartialEq + PrimInt&gt; Primitive for T {}

#[derive(Copy, Clone, Debug, PartialEq)]
pub struct Fibonacci&lt;T: Primitive&gt; {
    curr: T,
    next: T,
}

impl&lt;T&gt; Fibonacci&lt;T&gt; where T: Primitive {
    pub fn new() -&gt; Self {
        Self { curr: T::zero(), next: T::one() }
    }
}

impl&lt;T&gt; Default for Fibonacci&lt;T&gt; where T: Primitive {
    fn default() -&gt; Self {
        Self::new()
    }
}

impl&lt;T&gt; Iterator for Fibonacci&lt;T&gt; where T: Primitive {}
</code></pre>

<p>So, all in all, you don't have to do this if you don't want, as it's quite source-heavy.</p>

<h2>(Optional) use <code>mem::replace</code></h2>

<p>This part:</p>

<pre class="lang-rust prettyprint-override"><code>fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt; {
    let next = self.curr + self.next;
    let prev = self.curr;
    self.curr = self.next;
    self.next = next;
    Some(prev)
}
</code></pre>

<p>Can be changed to:</p>

<pre class="lang-rust prettyprint-override"><code>use std::mem;

fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt; {
    let next = self.curr + self.next;
    let prev = mem::replace(&amp;mut self.curr, self.next);
    self.next = next;
    Some(prev)
}
</code></pre>

<p>It's not any faster or shorter, but it's your choice whether it expresses your intent better. I think it does, but it doesn't matter that much.</p>

<h1>Final code</h1>

<pre class="lang-rust prettyprint-override"><code>use num_traits::PrimInt;
use std::mem;
use std::fmt::Debug;

pub trait Primitive: Copy + Clone + Debug + PartialEq + PrimInt {}
impl&lt;T: Copy + Clone + Debug + PartialEq + PrimInt&gt; Primitive for T {}

#[derive(Copy, Clone, Debug, PartialEq)]
pub struct Fibonacci&lt;T: Primitive&gt; {
    curr: T,
    next: T,
}

impl&lt;T&gt; Fibonacci&lt;T&gt; where T: Primitive {
    pub fn new() -&gt; Self {
        Self { curr: T::zero(), next: T::one() }
    }
}

impl&lt;T&gt; Default for Fibonacci&lt;T&gt; where T: Primitive {
    fn default() -&gt; Self {
        Self::new()
    }
}

impl&lt;T&gt; Iterator for Fibonacci&lt;T&gt; where T: Primitive {
    type Item = T;

    fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt; {
        let next = self.curr.checked_add(&amp;self.next)?;
        let prev = mem::replace(&amp;mut self.curr, self.next);
        self.next = next;
        Some(prev)
    }
}
</code></pre>
    </div>