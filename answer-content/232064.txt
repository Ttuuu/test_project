<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Using regex for such a simple task as finding if a line contains a string is not worth it. The built-in <code>str.__contains__</code>, being called by the keyword <code>in</code> is faster in this case.</p>

<p>Here are some worst case (i.e. a string that does not contain the string <code>"ERROR"</code>) timings for the two functions:</p>

<pre><code>import re

def using_in(s):
    return "ERROR" in s

def using_re(s):
    return bool(re.search('.*ERROR.*', s))
</code></pre>

<p><a href="https://i.stack.imgur.com/gwbu5.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/gwbu5.png" alt="enter image description here"></a></p>

<p>Using <code>re</code> is always slower in this case. It does, of course, have its uses for more complex patterns. Note that the <code>re</code> module also compiles the regex automatically (and caches it), so that is not a way to make it faster in this case, since it is always the same regex being used.</p>

<p>Let's just hope your lines are less than 10,000 characters long.</p>

<hr>

<p>In general, I think you still have to find a good balance between not having enough functions and having too many. IMO, instead of having a <code>increase_base_time</code> function, I would have a global constant and inline the call:</p>

<pre><code>INCREMENT = datetime.timedelta(minutes=1)

...

for line in log:
    ...
    if line_time &gt; base_time:
        base_time = line_time + INCREMENT
        ...
</code></pre>

<hr>

<p>If <code>read_log</code> is a <code>tail -f</code> equivalent, you could just call it <code>tail_f</code>. In any case, I would make the sleep time an optional parameter.</p>

<p>Note that your function does not ensure that the file is properly closed, which might cause issues. You should always use the <code>with</code> keyword to avoid this.</p>

<pre><code>def read_log(f, sleep=0.1):
    """
    Basically tail -f with a configurable sleep
    """
    with open(f) as logfile:
        logfile.seek(0, os.SEEK_END)
        while True:
            new_line = logfile.readline()
            if new_line:
                yield new_line
            else:
                time.sleep(sleep)
</code></pre>

<p>This way the file is closed even if the user presses <kbd>Ctrl</kbd>+<kbd>C</kbd>.</p>

<hr>

<p>You should only call your function under a <a href="http://stackoverflow.com/questions/419163/what-does-if-name-main-do"><code>if __name__ == "__main__":</code> guard</a> to allow importing from this script without it (trying and failing to) run:</p>

<pre><code>if __name__ == "__main__":
    monitor(sys.argv[1])
</code></pre>
    </div>