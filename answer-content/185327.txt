<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Architectural Ideas</h2>

<p>Let's start at the Architecture of your Application and the data transfer.
There's basically two places where we can optimize the performance of your application. I'm ignoring latency for now, since that is mostly determined by the network and the performance of the image processing.</p>

<p>This means if we can improve the speed of image processing, latency will also go down. That's the first component.</p>

<p>The second component is to make the network transfer less vulnerable to overhead and stalling. A great recap of TCP versus UDP is <a href="https://www.joelonsoftware.com/2002/11/11/the-law-of-leaky-abstractions/" rel="noreferrer">this joelonsoftware article</a>.<br>
Taking the information there into account, I'd think you're better off sending your video over UDP.</p>

<h2>Performance review</h2>

<p>It's problematic to require a full rendering of an image to update the image-view. Most realtime rendering applications use the idea of a frame-/backbuffer. What happens there is the following:</p>

<ol>
<li>An image is rendered to the backbuffer.</li>
<li>When it's finished, the framebuffer and the backbuffer are swapped</li>
<li>The next image is rendered to the backbuffer while the framebuffer is displayed.</li>
</ol>

<p>As far as I can tell, you're missing out on a lot of performance by ineffectively handling how data is passed between network and image-view. It'd help to see what <code>Java2DFrameConverter</code> does exactly. </p>

<h2>Code style review</h2>

<p>There's a few things that struck me as odd in your code. The following is a review without taking the performance into account directly:</p>

<p><code>streamToImageView</code> takes a <strong>lot</strong> of arguments. You can drastically reduce their number by partially applying them outside of the method. Additionally the converter can be a static field, though I can understand if you want to have an instance for every invocation of the method. </p>

<p>This might also be the place for the backbuffer idea, since you can reuse Image instances when rendering. I'm not sure, but you might be able to just set the Image to the imageView once and then reuse the already set instance.</p>

<p>The method then looks like this:</p>

<pre><code>public static void streamImageToView(ImageView view, int port, int socketBacklog, Consumer&lt;Grabber&gt; grabberSettings) {
    try (final ServerSocket server = new ServerSocket(port, socketBacklog);
         final Socket clientSocket = server.accept();
         final FrameGrabber grabber = new FFmpegFrameGrabber(clientSocket.getInputStream());
    ) {
        grabberSettings.accept(grabber);
        grabber.start();
        while (!Thread.interrupted()) {
            final Frame frame = grabber.grab();
            if (frame == null) {
                continue;
            }
            final BufferedImage bufferedImage = converter.convert(frame);
            if (bufferedImage != null) {
                Platform.runLater(() -&gt; {
                    SwingFXUtils.toFXImage(bufferedImage, view.getImage());
                    view.setImage(view.getImage()); 
                    // might not be required. Forces repaint
                });
            }
        } catch (IOException ex) {
            // same as before
        }
    } 
}
</code></pre>

<p>I like very much that you're making all the variables <code>final</code> wherever possible. 
FWIW I leave the partial application of the <code>streamToImageView</code> arguments to you as an exercise ;)</p>
    </div>