<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Correctness</strong></p>

<p>(See the update at the end.)</p>

<p>I don't believe your algorithm is correct. Here is the way I would expect to see it solved:</p>

<ol>
<li><p>Define a function <code>rectDiff(r,s)</code> which computes the difference of two rectangles <code>r</code> and <code>s</code>. It may return an empty list (if <code>r</code> is completely contained in <code>s</code>), a list of just <code>r</code> (if <code>r</code> is disjoint from <code>s</code>) or a list of two smaller rectangles <code>r1</code>, <code>r2</code> representing the parts of <code>r</code> which do not intersect <code>s</code>. This is probably what your <code>.complementsOf()</code> method does.</p></li>
<li><p>Given this <code>rectDiff</code> function, I would compute the area like this:</p>

<p>Pseudo-code:</p>

<pre><code>theRects = ...read rects from a file...

rectangles = []
totalArea = 0

for r in theRects:
  pieces = [r]
  for s in rectangles:
    pieces = takeAway(pieces, s)
  for t in pieces:
    totalArea += area(t)
  append r to rectangles

def takeAway(pieces, s):
  # pieces is a list of (disjoint) rects
  # s is a single rect
  # returns a new list of (disjoint) rects
  newPieces = []
  for t in pieces:
    append rectDiff(t,s) to newPieces
  return newPieces
</code></pre>

<p>The point is that when considering a new rectangle <code>r</code> you need to remove from <code>r</code> the overlap with all previous rectangles, and then you can add the area of the surviving complements to the total area.</p></li>
</ol>

<p>Your code, however, adds the area of a complement right away to the total area.</p>

<p><strong>Range trees</strong></p>

<p>If you employ the ideas in <a href="http://ankitsambyal.blogspot.com/2013/10/finding-overlapping-rectangles-in-given.html" rel="nofollow noreferrer">this article</a>, you can use range trees to write the code this way:</p>

<pre><code>for r in theRectangles:
  let rlist = the list of rects in rectangles which overlap with r
  pieces = [r]
  for s in rlist:
    pieces = takeAway(pieces, s)
  ...
  add r to rectangles
</code></pre>

<p>The idea is that using a range tree <code>rlist</code> might be a lot smaller than the full list <code>rectangles</code>.</p>

<p><strong>Update</strong></p>

<p>Your algorithm is probably correct since you recursively call <code>addRectangleArea()</code> on each complement piece.</p>

<p>However, there is an inefficiency in the algorithm. Suppose:</p>

<pre><code>rectangles = [ r1, r2, r3, ... ]
</code></pre>

<p>and we are processing a new rectangle <code>r</code>. Let</p>

<pre><code>cs1 = rectDiff(r, r1) = complements of r compared to r1
    = [ c1, c2, ... ]
</code></pre>

<p>Your code calls <code>addRectangleArea(c1)</code> which then will compute <code>rectDiff(c1, r1)</code>. However, this difference will always be empty. When considering <code>c1</code> (or <code>c2</code> or any rectangle in <code>cs1</code>) you can start with <code>r2</code> in the <code>rectangles</code> list on the recursive call.</p>
    </div>