<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Input validation</strong>: the term "prime" is often used to refer to integers greater than 1. You might want to check whether it qualifies. It's up to you whether to reject negative integers outright or multiply them by negative 1.</p>

<p><strong>Reverse order doesn't make sense</strong>: you're starting from the largest numbers, but if something isn't prime, then you'll see that earlier if you start will small numbers. For instance, for 26, you'll have to go down 12 numbers if you're starting at 25 to get to 13, but you'll immediately get to 2 if you're starting with small numbers.</p>

<p><strong>Smaller range</strong>: you only have to check numbers less than the square root.</p>

<p><strong>Reduced possible factors</strong>: Once you check whether a prime number is a factor, you don't have to check any multiples of the prime factor. So if you have a list of prime factors up to the square root of the number you're checking, you only have to use those. Otherwise, you can check only numbers relatively prime to the product of the primes you do have. For instance, for primes <code>[2, 3, 5]</code>, you only have to check numbers that are, modulus 30, in <code>[1, 7, 11, 13, 17, 19, 23, 29]</code>.</p>

<pre><code>import math
def prime_checker(pr, modulus = 30):
    residues = [residue for residue in range(modulus) 
        if math.gcd(residue, modulus) == 1]
    try:
        our_int = int(pr)
    except:
        print("Not a valid number")
        return
    if our_int != float(pr):
        print("Not an integer")
        return
    if our_int &lt; 2:
        print("Number greater than 1 expected.")
        return
    if our_int in [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]:
        return True
    for candidate in range(2, modulus):
        if candidate * candidate &gt; our_int:
            return True
        if (our_int % candidate) == 0:
            print(str(candidate)+ " is a factor")
            return False            
    multiple =  1
    while True:
        product = multiple*modulus
        if product*product &gt; our_int:
            return True
        for residue in residues:             
            if ((our_int % (residue + product)) == 0):
                print(str(residue + product)+ " is a factor")
                return False 
        multiple += 1
</code></pre>
    </div>