<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some suggestions:</p>

<ul>
<li>The trailing slash in the <code>mkdir</code> command is redundant.</li>
<li><code>$(…)</code> is preferred over backticks for command substitution.</li>
<li>Why use <code>seq</code> in one command? They both do the same loop, so you might as well use <code>{1..100}</code> in both places.</li>
<li>Semicolons are unnecessary in the vast majority of cases. Simply use a newline to achieve the same separation between commands.</li>
<li><a href="https://mywiki.wooledge.org/Quotes" rel="noreferrer">Use More Quotes™</a></li>
<li><code>set -o errexit -o noclobber -o nounset</code> at the start of the script will be helpful. It'll exit the script instead of overwriting any files, for example, so you can get rid of the inner <code>if</code> statement if it's OK that the script stops when the file exists.</li>
<li><a href="https://stackoverflow.com/a/669486/96588"><code>[[</code> is preferred over <code>[</code></a>.</li>
<li>The whole exercise is probably easier to achieve with some <a href="https://mywiki.wooledge.org/ProcessManagement#I_want_to_process_a_bunch_of_files_in_parallel.2C_and_when_one_finishes.2C_I_want_to_start_the_next._And_I_want_to_make_sure_there_are_exactly_5_jobs_running_at_a_time." rel="noreferrer">standard pattern</a> like GNU parallel. Currently the script starts <code>N</code> commands, then waits for <em>all</em> of them to finish before starting any more. Unless the processes take very similar time this is going to waste a lot of time waiting.</li>
<li><code>N</code> (or for example <code>processors</code> for readability) should be determined dynamically, using for example <a href="https://stackoverflow.com/a/17089001/96588"><code>nproc --all</code></a>, rather than hardcoded.</li>
<li>If you're worried about speed you should probably <em>not</em> create a subshell for your two script commands. <code>{</code> and <code>}</code> will group commands without creating a subshell.</li>
<li>For the same reason you probably want to do a single redirection like <code>{ "$script" … &amp;&amp; "$script" …; } &gt; "data/file_${i}-${j}.txt"</code></li>
<li><p>Since you're "only" counting to 10,000 you don't need to reset <code>q</code> every time. You can for example set <code>process_count=0</code> outside the outer loop and check the modulo in a readable way such as:</p>

<pre><code>if [[ "$process_count" % "$processors" -eq 0 ]]
then
    wait
fi
</code></pre></li>
<li>The inner code (from the line starting with <code>((q=q%N))</code>) should be indented one more time.</li>
</ul>
    </div>