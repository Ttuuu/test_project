<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Since @Flambino critiqued your existing code, I will focus more on application architecture.</p>

<p>When I approach this subject, first I determine what "things" are interacting in the system.</p>

<ul>
<li>Parking lots</li>
<li>Vehicles</li>
<li>Parking fees (of which there are "unrestricted" and "handicapped")</li>
<li>Payments</li>
<li>Parking spaces (of which there are "unrestricted" and "handicapped")</li>
</ul>

<p>This gives us 5 classes. Classes are nouns (people, places or things) and methods are the verbs (actions). We will throw in two more classes to descibe the permits a vehicle can have (a handicapped sticker for those in the USA) and a custom error class for more intelligent error handling in the application.</p>

<ol>
<li>Vehicle</li>
<li>ParkingFee</li>
<li>ParkingSpace</li>
<li>ParkingSpacePayment</li>
<li>ParkingLot</li>
<li>VehiclePermit</li>
<li>ParkingSpaceError</li>
</ol>

<p>We'll get the easiest one of of the way:</p>

<pre><code>class ParkingSpaceError &lt; StandardError
end
</code></pre>

<p>Now we've got a specific error class when problems arise parking or paying for a parking spot allowing more intelligent error handling.</p>

<p>Once I've identified the basic "things" in the system, I think of how they are related. The first class I build is the one with no relations to anything. It's quick and simple: The <code>ParkingFee</code> class.</p>

<h2>The ParkingFee class</h2>

<p>A parking fee consists of a rate multiplied by how many hours you've parked. Plus, you only have two rates. We will create static properties for both fee types that we can reference later:</p>

<pre><code>class ParkingFee
  def self.unrestricted
    @@unrestricted ||= ParkingFee.new 20
  end

  def self.handicapped
    @@handicapped ||= ParkingFee.new 5
  end

  def initialize(rate)
    @rate = rate;
  end

  def calculate(hours)
    rate * hours
  end

  def rate
    @rate
  end
end
</code></pre>

<p>Easy peasy, rice and cheesey. The next class that's easy to create is the <code>VehiclePermit</code> class.</p>

<h2>The VehiclePermit class</h2>

<p>Since you must determine whether or not a vehicle is a "handicapped vehicle," this got me thinking. First, I'm assuming since you reference "rupees" in your post that you are in India, or are building software that will be used in India. In the USA, vehicles can have multiple additional attributes describing how they can be used, and where they can be parked. I believe the term that we use is "permit."</p>

<p>Without understanding how vehicles are registered as "handicap" vehicles in India, I'll call this next class <code>VehiclePermit</code>. As we will see later, every <code>Vehicle</code> could have multiple permits attached to it. A "handicapped" vehicle is just a <code>Vehicle</code> that has the handicapped <code>VehiclePermit</code> associated with it.</p>

<p>This class doesn't have much to it. An <code>id</code> and a <code>name</code>, plus a static property for convenience. This could be just as easily mapped from a database if you want.</p>

<pre><code>class VehiclePermit
  def self.handicapped
    @@handicapped ||= VehiclePermit.new 1, "Handicapped"
  end

  def initialize(id, name)
    @id = id;
    @name = name;
  end

  def id
    @id
  end

  def name
    @name
  end
end
</code></pre>

<p>Now we can move on to the "thing" this is all about: vehicles.</p>

<h2>The Vehicle class</h2>

<p>This class needs one or more permits, and a registration number. Still, not very complex. We'll also expose a public method to test this vehicle to see if it has the "handicapped" permit, which we will use later when parking the vehicle.</p>

<pre><code>class Vehicle
  def initialize(registration_number)
    @registration_number = registration_number
    @permits = []
  end

  def is_handicapped?
    @permits.any? {|p| p == VehiclePermit.handicapped }
  end

  def permits
    @permits
  end

  def registration_number
    @registration_number
  end
end
</code></pre>

<p>We have our <code>ParkingFee</code>, <code>VehiclePermit</code> and <code>Vehicle</code>, now we are ready to park this thing.</p>

<h2>The ParkingSpace class</h2>

<p>The <code>ParkingSpace</code> class holds a vehicle, the date and time the vehicle parked, and the fee associated with it. It allows you to calculate the payment as well. We'll define public methods for all the actions you can perform on a parking space:</p>

<ul>
<li>Park a car</li>
<li>Vacate the space</li>
<li>Calculate the fee</li>
<li>Test to see if a vehicle is currently occupying it</li>
<li>Test to see if it contains a particular vehicle</li>
<li>Test a vehicle to see if it can park here</li>
</ul>

<p>The code:</p>

<pre><code>class ParkingSpace
  def initialize(parking_lot, fee, number)
    @parking_lot = parking_lot
    @fee = fee
    @number = number
  end

  def payment
    ParkingSpacePayment.new self
  end

  def can_park?(vehicle)
    !occupied?
  end

  def contains?(vehicle)
    self.vehicle == vehicle
  end

  def number
    @number
  end

  def occupied?
    !vehicle.nil?
  end

  def park(vehicle)
    raise ParkingSpaceError "Cannot park vehicle #{vehicle.registration_number}" unless can_park? vehicle
    self.vehicle = vehicle
    date_occupied = DateTime.current
  end

  def vacate
    payment = nil
    date_occupied = nil
    vehicle = nil
  end

  def vehicle
    @vehicle
  end

private

  def payment=(new_payment)
    @payment = new_payment
  end

  def calculate_fee(date)
    fee.calculate(date)
  end

  def vehicle=(new_vehicle)
    @vehicle = new_vehicle
  end
end
</code></pre>

<p>We aren't done yet, because there are two kinds of parking spaces. We will define concrete classes for each:</p>

<pre><code>class UnrestrictedParkingSpace &lt; ParkingSpace
  def initialize(parking_lot, number)
    super(parking_lot, ParkingFee.unrestricted, number)
  end
end
</code></pre>

<p>An "unrestricted" parking space doesn't require much code. We just override the constructor to pass the proper <code>ParkingFee</code> object. The <code>can_park?</code> method on the parent class has the correct logic for this type of space, so we don't bother overriding it.</p>

<pre><code>class HandicappedParkingSpace &lt; ParkingSpace
  def initialize(parking_lot, number)
    super(parking_lot, ParkingFee.handicapped, number)
  end

  def can_park?(vehicle)
    super(vehicle) &amp;&amp; vehicle.is_handicapped?
  end
end
</code></pre>

<p>The "handicapped" parking space overrides the constructor, which passes the handicapped fee, and overrides the <code>can_park?</code> method. The <code>can_park?</code> method first delegates to the method on the super class, and if that returns true, we have an additional test to see if the vehicle has a handicapped permit, so we also call <code>Vehicle#can_park?</code>.</p>

<p>Each type of parking space has the fee baked in so no one can make the "Unrestricted" parking space fee less that 20 Rupees. Now that we've got a parking spaces, we need some place to put them: the <code>ParkingLot</code>.</p>

<h2>The ParkingLot class</h2>

<p>A parking lot has a bunch of spaces, both unrestricted and handicapped. We also need to do the following things in the parking lot:</p>

<ul>
<li>Park a vehicle</li>
<li>Exit the parking lot</li>
<li>Calculate a payment for a vehicle</li>
<li>Check to see if spaces are available</li>
</ul>

<p>The constructor for the <code>ParkingLot</code> class takes two arguments: the number of unrestricted spaces and the number of handicapped spaces.</p>

<pre><code>class ParkingLot
  def initialize(unrestricted_count, handicapped_count)
    count = 0
    @parking_spaces = []

    unrestricted_count.times do |n|
      @parking_spaces &lt;&lt; UnrestrictedParkingSpace.new self, n
    end

    count = @parking_spaces.count

    handicapped_count.times do |n|
      @parking_spaces &lt;&lt; HandicappedParkingSpace.new self, count + n
    end
  end

  def exit(vehicle, payment)
    parking_space = parking_space_for vehicle
    raise ParkingSpaceError "Balance not paid: #{payment.balance}" unless payment.paid?
    parking_space.vacate vehicle
    parking_space
  end

  def park(vehicle)
    index = @parking_spaces.index {|space| space.can_park? vehicle }
    raise ParkingSpaceError "No spaces available" if index &lt; 0
    parking_space = @parking_spaces[index]
    parking_space.park vehicle
    parking_space
  end

  def payment_for(vehicle)
    parking_space_for(vehicle).payment
  end

  def spaces_available?(vehicle = nil)
    if vehicle.nil?
      @parking_spaces.any? {|space| !space.occupied? }
    else
      @parking_spaces.any? {|space| space.can_park? vehicle }
    end
  end

private

  def parking_space_for(vehicle)
    index = @parking_spaces.index {|space| space.contains? vehicle }
    raise ParkingSpaceError "Vehicle #{vehicle.registration_number} is not parked in this lot" if index &lt; 0
    @parking_spaces[index]
  end
end
</code></pre>

<p>Lastly, let's pay for our spot using a <code>ParkingSpacePayment</code></p>

<h2>The ParkingSpacePayment class</h2>

<p>This class contains all the logic for paying for a parking spot. It needs the parking space, vehicle and fee. All three things are provided by the <code>ParkingSpace</code> object, so we require this in the constructor.</p>

<pre><code>class ParkingSpacePayment
  def initialize(parking_space)
    @parking_space = parking_space
    @payment_date = DateTime.current
    @total_hours = ((@payment_date - parking_space.date_occupied) / 1.hour).round
    @amount_due = @parking_space.calculate_fee @total_hours
    @amount_paid = 0
  end

  def amount_due
    @amount_due
  end

  def amount_paid
    @amount_paid
  end

  def balance
    @amount_due - @amount_paid
  end

  def paid?
    @amount_paid &lt;= 0
  end

  def parking_space
    @parking_space
  end

  def pay(amount)
    @amount_paid += amount
    balance
  end

  def payment_date
    @payment_date
  end

  def total_hours
    @total_hours
  end
end
</code></pre>

<h2>Using these classes to manage a parking lot</h2>

<p>Now that we've got all the pieces built, let's see how we can park a car, and pay for it.</p>

<pre><code>begin
  # Our parking lot as 10 unrestricted spaces and 5 handicapped spaces
  parking_lot = ParkingLot.new 10, 5

  # Create two vehicles, one of each type.
  unrestricted_vehicle = Vehicle.new "1"
  handicapped_vehicle = Vehicle.new "2"
  handicapped_vehicle.permits &lt;&lt; VehiclePermit.handicapped

  # Park the cars
  parking_lot.park unrestricted_vehicle
  parking_lot.park handicapped_vehicle

  # Let's do some shopping.
  sleep 3.hours

  # Time to check out.
  unrestricted_payment = parking_lot.payment_for unrestricted_vehicle
  handicapped_payment parking_lot.payment_for handicapped_vehicle

  # 20 * 3 hours should be 60. Opps! This could be a problem later
  unrestricted_payment.pay 55

  # 5 * 3 hours = 15
  handicapped_payment.pay 15

  # I guess we went to the ATM. Whew!
  unrestricted_payment.pay 5 unless unrestricted_payment.paid?

  # Now let's exit the parking lot. Time to go home.
  unrestricted_space = parking_lot.exit unrestricted_vehicle, unrestricted_payment
  puts unrestricted_space.occupied? # -&gt; "false"

  handicapped_space = parking_lot.exit handicapped_vehicle, handicapped_payment
  puts handicapped_space.occupied? # -&gt; "false"
rescue ParkingSpaceError =&gt; parking_error
  puts "Oops! Had a problem parking a car: #{parking_error}"
else Exception =&gt; e
  raise e # A non parking error occurred.
end
</code></pre>

<h2>Extra Credit</h2>

<p>Since a parking lot could have multiple levels and rows on each level, the layout of a parking lot could be abstracted away to a <code>ParkingLotLayout</code> class, which takes a <code>ParkingLot</code> as a constructor argument and defines the floors and rows that are available.</p>
    </div>