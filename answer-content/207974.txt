<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I don't know Rcpp well enough to be sure, but we should be able to reduce copying in one of two ways:</p>
<ul>
<li>Accept the argument as a const reference, so that we don't copy in to the function, or</li>
<li>Modify our copy of the argument in-place, then return it as result (rather than copying again to <code>Xtrim</code>).</li>
</ul>
<p>Both of these eliminate a vector copy - in general, the first is to be preferred, as the input vector is bigger than the output vector.  If we <em>must</em> copy something, prefer the smallest copy.</p>
<hr>
<p>The former option is simplest, if we're allowed to change the signature:</p>
<pre><code>// The Rcpp Vector header is incomplete; it needs these dependencies.  :-(
#include &lt;RcppCommon.h&gt;
#include &lt;Rcpp/RObject.h&gt;
#include &lt;Rcpp/Dimension.h&gt;

#include &lt;Rcpp/Vector.h&gt;

#include &lt;algorithm&gt;
#include &lt;iterator&gt;

// [[Rcpp::export]]
Rcpp::NumericVector trimNA(const Rcpp::NumericVector&amp; x)
{
    // remove trailing NA values
    auto rbegin = std::make_reverse_iterator(x.end());
    auto rend = std::make_reverse_iterator(x.begin());
    auto last_real_value = std::find_if_not(rbegin, rend,
                                            &amp;Rcpp::NumericVector::is_na).base();

    // remove leading NA values
    auto first_real_value = std::find_if_not(x.begin(), last_real_value,
                                             &amp;Rcpp::NumericVector::is_na);

    return {first_real_value, last_real_value};
}
</code></pre>
<p>Since the Rcpp vector doesn't provide standard-collection-like <code>rbegin()</code>/<code>rend()</code> methods, I had to manually create reverse iterators.  That wouldn't be necessary with a standard vector.</p>
<hr>
<p>For the latter option, we could use the vector's <code>erase()</code> method to remove the rightmost values, and then the leftmost ones (removing the leftmost first would work, but could require moving more data, making it less efficient).</p>
<p>Here's how that might work (untested):</p>
<pre><code>// The Rcpp Vector header is incomplete; it needs these dependencies.  :-(
#include &lt;RcppCommon.h&gt;
#include &lt;Rcpp/RObject.h&gt;
#include &lt;Rcpp/Dimension.h&gt;

#include &lt;Rcpp/Vector.h&gt;

#include &lt;algorithm&gt;
#include &lt;iterator&gt;

// [[Rcpp::export]]
Rcpp::NumericVector trimNA(Rcpp::NumericVector x)
{
    // remove trailing NA values
    auto rbegin = std::make_reverse_iterator(x.end());
    auto rend = std::make_reverse_iterator(x.begin());
    auto last_real_value = std::find_if_not(rbegin, rend,
                                             &amp;Rcpp::NumericVector::is_na).base();
    x.erase(last_real_value, x.end());

    // remove leading NA values
    auto first_real_value = std::find_if_not(x.begin(), x.end(),
                                             &amp;Rcpp::NumericVector::is_na);
    x.erase(x.begin(), first_real_value);

    return x;
}
</code></pre>
<hr>
<h1>Other review items</h1>
<p>The code doesn't work correctly if <em>every</em> value is an NA - we should stop when we reach <code>F</code> rather than <code>pBegin</code> here:</p>
<pre><code>while( L &gt; F &amp;&amp; NumericVector::is_na(*L)) L--;
</code></pre>
<p>Use the standard indexing operator:</p>
<pre><code>    Xtrim[i] = F[i];
</code></pre>
<p>(But it's better to use <code>std::copy()</code> instead of the loop).</p>
<p>Use actual iterators, rather than assuming you'll get bare pointers.</p>
<p>Don't include all of <code>&lt;Rcpp.h&gt;</code>, as that makes compilation really slow.  Unfortunately, Rcpp's headers are broken because they don't include all they need - see my examples for workaround (that's still much faster to compile than the original).</p>
    </div>