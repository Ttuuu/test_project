<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As said in my comment, we do not want to execute something without telling it explicitly. Most of the time such programs are built with one class that execute the request and another to model the result. </p>

<p>But let's start by reviewing your code. </p>

<p>The main issue that I see is that you cannot test it without mocking the underlying API. One solution is to introduce an extra, low level, layer that manage the communication and that you can easily mock. </p>

<pre><code>interface MovieDatabase {
    Map&lt;String, Object&gt; search(String mediaType) throws IOException;

    Map&lt;String, Object&gt; get(String mediaType, String mediaId) throws IOException;

    BufferedImage getPoster(String path) throws IOException;
}
</code></pre>

<p>I have replaced your <code>JsonObject</code> by a <code>Map&lt;String, Object&gt;</code> so that I can really try to refactor your code without having to manage all the dependencies. But this can also be a pattern if you want to abstract a bit more on the underlying api (It can be an Xml api, or a SQL database) </p>

<p>While we are on that class, you can also replace the <code>String mediaType</code> by one enumeration, so that it will be impossible to ask something else than a <em>movie</em> or a <em>tv</em> show. </p>

<p>When implementing that interface for "The movie db" you will discover that its own responsibility is to execute a query and parse the result. So internally, the public methods will just create a valid url and send it to a private method.</p>

<p>Please not also that URL encoding is more complex than <code>query.replace(" ", "+")</code>, there is one <code>URLEncoder</code> utility class to deal with that. </p>

<pre><code>public Map&lt;String, Object&gt; search(MediaType mediaType, String query) throws IOException {
    return get("search/" + mediaTypeAsString(mediaType) + "&amp;query=" + URLEncoder.encode(query, "UTF-8"));
}

// ...

private Map&lt;String, Object&gt; get(String path) throws IOException {
    URL url = new URL(url+path+"?api_key=" + apiKey);
    HttpURLConnection conn = (HttpURLConnection) url.openConnection();

    try (InputStreamReader standardQueryStream = new InputStreamReader((InputStream) conn.getContent())) {
        return parse(standardQueryStream);
    }
}

private Map&lt;String, Object&gt; parse(InputStreamReader input) {
    // ...
}
</code></pre>

<p>At this time you have a low level service to query the api. It can easily be mocked or replaced by another implementation. Let's use it in your <code>MediaDataRetriever</code>, basically you have to add one constructor that expect one <code>MovieDatabase</code>. You can then replace all of the low level calls by a call to the corresponding method on the database. By doing that you will notice that there was a duplication of code in <code>getMediaBasedOnQueryAsJson</code> and <code>validateMediaData</code>, there where both executing a search request.   </p>

<p>We can then start to review the <code>MovieDataRetriever</code>. This one use the wrong naming convention for the fields, _UPPER_SNAKE_CASE_ is used for constants and <em>lowerCamelCase</em> must be used for class members. There is also some unused fields. </p>

<p>But since that one inherit from the <code>MediaDataRetriever</code> it wont compile because it doesnt use the super constructor. And this is where the discussion start. </p>

<p>As already said, most of the time, we do not want to execute something without asking for. Usually you ask provide a service that will produce a Media who can be a movie or a tv show.
There are some advantages of doing that.   </p>

<pre><code>Media media = new MediaService(..).search("..");
</code></pre>

<p>In some cases it is interesting to receive a common type. It is also useful in case there is no result because you can either throw one exception or use the "null object pattern".</p>

<p>But, please, note that while the polymorphism is a powerful pattern it may also introduce complexity. If you always know that you want a <code>Movie</code> or a <code>TvShow</code>, receiving one abstract <code>Media</code> can be boring and will introduce many code smells and useless type casts. On that subject you may consider the usage of composition instead of inheritance if your system (business side) never consider that there is a common ancestor to <code>Movie</code> and <code>TvShow</code>.   </p>
    </div>