<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think you can avoid the need for <code>count_other</code> and for the final loop.</p>

<p>Keep the first loop as it is, but in the second loop (i.e. <code>for char in other_string</code>), <em>remove</em> each character from <code>count_first</code>.  If you can't remove it, you have a character that's not in <code>first</code> so return false.</p>

<p>If you reach the end of the second loop, then you just need to check whether <code>count_first</code> is empty (i.e. all values are zero).</p>

<pre><code>def is_permutation(first_string, other_string):
    if len(first_string) != len(other_string):
        return False

    count_first = {}

    for char in first_string:
        if char in count_first.keys():
            count_first[char] += 1
        else:
            count_first[char] = 1

    for char in other_string:
        if char not in count_first.keys():
            return False
        count_first[char] -= 1
        if count_first[char] &lt; 0:
            return False

    for count in count_first.values():
        if count &gt; 0:
            return False

    return True
</code></pre>

<p>This improves the original in two ways: it reduces the storage requirements, and it provides an earlier return in some of the negative cases.</p>

<hr>

<p>You can eliminate the <code>if char in keys()</code> test in a number of ways:</p>

<ul>
<li><pre><code>count_first.setdefault(0);
</code></pre></li>
<li>use a <code>collections.defaultdict</code>, or better, <code>collections.Counter</code> instead of a <code>dict</code></li>
</ul>

<p>If we use a <code>Counter</code>, it's simple to compare the results:</p>

<pre><code>from collections import Counter
def is_permutation(first_string, other_string):
    return Counter(first_string) == Counter(other_string)
</code></pre>

<p>Yes, that's the whole function!</p>
    </div>