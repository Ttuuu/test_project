<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>So, the most interesting bits about this code are the wildly differing styles throughout. It seems as it's almost copy-and-pasted from several sources. The reason I bring this up is because <strong>consistency</strong> is a hallmark of clean and maintainable code. A few things I noticed:</p>

<ol>
<li><p>There's a debunked use of "double-checked locking" to attempt to use a lazily-instantiated singleton. Two things with this: A. This class doesn't have state and could be <code>static</code> to begin with, and thus do not need to worry about instances at all, and B. There's a very easy way these days to have a lazy singleton: the <code>Lazy&lt;T&gt;</code> class. You'll see its usage below.</p></li>
<li><p>There's a mish-mash of <code>ASCIIEncoding.ASCII</code> and <code>new UnicodeEncoding()</code>. The canonical way to access predefined encodings is through static members of the <code>Encoding</code> class: <code>Encoding.ASCII</code> and <code>Encoding.Unicode</code>.</p></li>
<li><p><code>Path.Combine()</code> is wisely used to, of course, combine paths. But then string concatenation is used to pop an extension on the file name. <code>Path.ChangeExtension()</code> exists for just this task.</p></li>
<li><p><code>x.Close()</code> isn't needed if you wrap your <code>IDisposable</code> resources in <code>using</code> blocks. This also has the benefit of guaranteeing disposal/closing in the case of an exception (it's syntactic sugar for a <code>try..finally</code> construct`.</p></li>
<li><p>There's a mix of using and not using <code>var</code> for variable declarations. Since the latter is less than the former, standardize on just using the actual type name for declarations.</p></li>
<li><p>I added two more - you don't need to read/write the file byte by byte. These are streams for a reason, and .NET gives us a handy method <code>CopyTo</code> to take care of the details. Also, <code>CreateEncrpytor</code> and <code>CreateDecryptor</code> return <code>IDisposable</code>-implementing classes, so I extracted them into their own <code>usings</code>.</p></li>
</ol>

<p>Putting all that together, the class now looks like (note that I went with <code>Lazy&lt;T&gt;</code> rather than <code>static</code> class):</p>

<pre><code>public sealed class Class1
{
    private static readonly Lazy&lt;Class1&gt; instance = new Lazy&lt;Class1&gt;(() =&gt; new Class1());
    public static Class1 Instance =&gt; instance.Value;

    public bool EncryptFile(string path)
    {
        string ext = Path.GetExtension(path).Replace(".", string.Empty);
        string filename = Path.GetFileNameWithoutExtension(path);

        byte[] b = Encoding.ASCII.GetBytes(ext);
        string encrypted = Convert.ToBase64String(b);
        string newPath = path.Replace(Path.ChangeExtension(filename, ext), filename + "_" + encrypted + ".vik");

        try
        {
            string password = @"vik12389"; // Your Key Here
            byte[] key = Encoding.Unicode.GetBytes(password);

            string cryptFile = newPath;
            using (FileStream fsCrypt = new FileStream(cryptFile, FileMode.Create))
            using (RijndaelManaged RMCrypto = new RijndaelManaged())
            using (ICryptoTransform ct = RMCrypto.CreateEncryptor(key, key))
            using (CryptoStream cs = new CryptoStream(fsCrypt,
                ct,
                CryptoStreamMode.Write))
            using (FileStream fsIn = new FileStream(path, FileMode.Open))
            {
                fsIn.CopyTo(cs);
            }

            File.Delete(path);

            return true;

        }
        catch(Exception e)
        {
            return false;
        }
    }

    public bool DecryptFile(string path)
    {
        string ext = Path.GetExtension(path).Replace(".", string.Empty);
        string filename = Path.GetFileNameWithoutExtension(path);

        string[] splitFilename = filename.Split('_');

        byte[] b = Convert.FromBase64String(splitFilename[1]);

        string decryptedfileext = Encoding.ASCII.GetString(b);

        string newPath = path.Replace(Path.ChangeExtension(filename, "vik"), splitFilename[0] + '.'+ decryptedfileext);
        try
        {
            string password = @"vik12389"; // Your Key Here

            byte[] key = Encoding.Unicode.GetBytes(password);

            using (FileStream fsCrypt = new FileStream(path, FileMode.Open))
            using (RijndaelManaged RMCrypto = new RijndaelManaged())
            using (ICryptoTransform ct = RMCrypto.CreateDecryptor(key, key))
            using (CryptoStream cs = new CryptoStream(fsCrypt,
                ct,
                CryptoStreamMode.Read))
            using (FileStream fsOut = new FileStream(newPath, FileMode.Create))
            {
                cs.CopyTo(fsOut);
            }

            return true;

        }
        catch (Exception e)
        {
            return false;
        }

    }

}
</code></pre>
    </div>