<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Welcome to Code Review, nice first question.
Don't Panic, and always take a towel with you.</p>

<p><strong>General Observations</strong><br>
This may be a copy and paste error, but the level of indentation is inconsistent. This makes writing, reading and debugging the program very difficult. </p>

<p>There are too many comments. Code should be self documenting for the most part, only things that won't be apparent by reading the code should be in comments.</p>

<p>Comment blocks are ok at the top of a function to describe what the function does and when it should be called.</p>

<p>Code needs to be maintained, there may be features added or bugs fixed. Since code will change, the comments may have to change or they become irrelevant. For this reason most developers write only absolutely necessary comments indicating strategy or citing requirements.</p>

<p>The only type of programming that would require the level of comments in this program would be assembly code programming.</p>

<p><strong>The exit() Function and Magic Numbers</strong><br>
Generally the <code>exit(int status)</code> function isn't necessary in the <code>main()</code> function, the use of <code>return</code> would be better. The <code>exit()</code> function can be used in subroutines if a none recoverable error occurs in a subroutine but there are also other ways to handle these errors that you may want to look into in the future. Return from the <code>main()</code> function should return one of two values, <a href="https://en.cppreference.com/w/c/program/EXIT_status" rel="nofollow noreferrer"><code>EXIT_SUCCESS</code> or <code>EXIT_FAILURE</code></a>. These symbolic constants are available from <code>stdlib.h</code> which is included in this program.</p>

<pre><code>    exit(42);
</code></pre>

<p>It's not clear what 42 means unless you're a fan of "Hitchhiker's Guide to the Galaxy". The use of numeric constants rather than symbolic constants in code is sometimes referred to as <a href="https://en.wikipedia.org/wiki/Magic_number_(programming)" rel="nofollow noreferrer">Magic Numbers</a>. Generally <a href="https://stackoverflow.com/questions/47882/what-is-a-magic-number-and-why-is-it-bad">symbolic constants are preferred</a> because they make the code easier to understand and maintain.</p>

<p>In the the C programming language there are 2 methods for defining symbolic constants, the more modern method is</p>

<pre><code>const int StringSize = 80;
</code></pre>

<p>The historic method defining symbolic constants is to use a macro</p>

<pre><code>#define SERIAL_BUFFER_SIZE 256
</code></pre>

<p>Symbolic constants are very helpful for arrays, not only can one define the array using the symbolic constants, but any loops that access the array can use the symbolic constant as the end of the loop. This allows the programmer to change array sizes with only one edit rather than modifying the constant value everywhere.</p>

<p>The function <code>int readPort(HANDLE Comms, int testNum)</code> has a number of arrays with numeric constants that should be converted.</p>

<pre><code>char word[14] = "Test Finished";  //Text to look for
char SerialBuffer[256];//Buffer for storing Rxed Data
char Num[10];
char str[80];
char *file = "C:/Users/jgrayjt/Documents/Logs/TestLog_";
char fileEnd[5] = ".txt";
</code></pre>

<p>If the array SerialBuffer was defined using a symbolic constant then the code to read the serial port doesn't need the <code>sizeof(SerialBuffer)</code> it can use the symbolic constant.</p>

<p><em>Note: C style strings don't necessarily require an array constant.</em></p>

<pre><code>    char word[14] = "Test Finished";  //Text to look for
</code></pre>

<p>would be easier to define and use as </p>

<pre><code>    char *word = "Test Finished";
</code></pre>

<p>The code already uses this method for </p>

<pre><code>    char *file = "C:/Users/jgrayjt/Documents/Logs/TestLog_";
</code></pre>

<p>The variable name <code>word</code> might better be <code>SearchString</code>.</p>

<p>It is best to be consistent through out a program as to how something is done, whether it is code indentation or variable declarations</p>

<p><em>The variable str might better be defined using <code>BUFSIZ</code> which is defined in <code>stdio.h</code>. File names can be at least <code>BUFSIZ</code>, 80 is not a realistic value for a fully defined file spec.</em>  </p>

<p><strong>Missing Error Check</strong><br>
The function <code>int readPort(HANDLE Comms, int testNum)</code> Uses <code>fopen()</code> but doesn't check the value to see if the file has actually been opened. The <code>do while</code> loop terminates at the end if the file pointer is NULL, but the loop still executes at least one time and can attempt to write to a file that didn't open. This would cause the program to crash. The loop should not be entered if the file was not opened. The error should at least be reported if not handled. </p>

<p><strong>Use DRY Code</strong><br>
There is a programming principle called <a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself" rel="nofollow noreferrer">Don't Repeat Yourself</a>. There is code in the function <code>int fileExist(void)</code> that creates a filename, this same code is in the function <code>int readPort(HANDLE Comms, int testNum)</code> and <code>void parseFile(int fileNum)</code>. It might be better if the code to create the filename was a function itself that was called by all of these function. One of the benefits of this is the code only has to be written and debugged once, and any maintenance can be done in one place rather than two places.</p>

<p><strong>Code Complexity</strong><br>
The function <code>main()</code> has the appropriate complexity, but the functions <code>int fileExist(void)</code>, <code>int readPort(HANDLE Comms, int testNum)</code> and <code>void parseFile(int fileNum)</code> are too complex (do too much). Each of these functions could have subroutines that they call and could make the function shorter and perform a single function.</p>

<p>There is also a programming principle called the <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" rel="nofollow noreferrer">Single Responsibility Principle</a> that applies here. The Single Responsibility Principle states:</p>

<blockquote>
  <p>that every module, class, or function should have responsibility over a single part of the functionality provided by the software, and that responsibility should be entirely encapsulated by that module, class or function.</p>
</blockquote>

<p>This programming principle compliments the DRY programming principle.</p>

<p><strong>Declare the Variables When They are Needed</strong><br>
The original definition of the C programming language required all variable to be declared at the top of the function, but this is no longer necessary. Older books and examples misrepresent this.</p>

<p>An example:</p>

<pre><code>int main(){
    HANDLE hComm;
    hComm = CreateFile( "\\\\.\\COM4",  GENERIC_READ | GENERIC_WRITE,  0, NULL, OPEN_EXISTING, 0, NULL);

    if (hComm == INVALID_HANDLE_VALUE){
        printf("Error opening port");
        exit(EXIT_FAILURE);
    }
    else {
        printf("Opening of port successful\n");
    }

    serialPort(hComm);
    int res = fileExist();
    int logNum = readPort(hComm, res);
    parseFile(logNum);

    CloseHandle(hComm);//Closing the Serial Port

    return EXIT_SUCCESS;
}
</code></pre>
    </div>