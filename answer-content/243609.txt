<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Overall it looks fine for a beginner-level program, you keep the functions small and separate different parts of the logic between them, which is good.</p>

<ul>
<li><code>int valid(int[][9], int, int, int);</code> You should make a habit of naming your parameters even during function declaration. Ideally the function definition is a copy/paste of the declaration.</li>
<li>(Minor remark) It would be clearer to write <code>int puzzle[9][9]</code> in the parameter list, even though it makes no practical difference. It gives self-documenting code, however.</li>
<li>But you should entirely avoid "magic numbers" like <code>9</code> in your code. You should have <code>#define SUDOKU_SIZE 9</code> or such instead. This goes for all the divide by <code>3</code> statements too, it's not clear to the reader where the "magic number" 3 came from. This is where you would need to place a comment, since the code doesn't speak for itself.</li>
<li><p>(Major issue) Your indention style is exotic and therefore wouldn't be tolerated in a professional setting. For example the line following an <code>if</code> or <code>for</code> etc should be placed on a line of its own, and also indented (2 or 4 spaces are ok):</p>

<pre><code>for (int y = 0; y &lt; 9; ++y)
  printf("|%d", puzzle[x][y]);
</code></pre>

<p>For mission-critical programs, this style isn't tolerated either, but you need to always use <code>{ }</code> compound statements even if there is just a single line. </p></li>
<li><p>(Minor remark) <code>int puzzle[9][9]</code> This could perhaps have been declared <code>const</code>, so you have one read-only table of the original data, and place the solution in a different matrix. You could then also have implemented <em>const correctness</em> for functions that do not modify this matrix. </p></li>
<li><p>(Minor remark) Coding style preference - avoid using the <code>!</code> for operands that aren't boolean. Instead of <code>!puzzle[x][y]</code>, I'd write <code>puzzle[x][y]==0</code> since the purpose is to check if something is <code>0</code>, not <code>false</code>.</p></li>
<li><p>Instead of returning <code>1</code>/<code>0</code> type <code>int</code>, you should be using <code>true</code>/<code>false</code> and <code>bool</code> from <code>stdbool.h</code>.</p></li>
<li><p>(Minor remark) This <code>int main()</code> is obsolete style in C. You should be using <code>int main(void)</code> instead. (C and C++ are different here)</p></li>
<li><p>(Minor remark) Your functions are pretty short so I'd say it is ok to <code>return</code> from multiple places inside them. For more complex functions, multiple returns from a function is sometimes frowned upon and it's preferred to only have a single return at the end. This is no black/white rule though. I say avoid multiple return statements <em>unless</em> it actually makes the code <em>more</em> readable. In your current program it's fine.</p></li>
<li><p>The matrix print could be made a function of its own, to be called from main().</p></li>
</ul>
    </div>