<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I don't really see anything major. I also don't know Cljs (only Clj), so I apologize if a suggestion of mine doesn't apply to Cljs.</p>

<p>Just a few small things:</p>

<p>Personally, I don't like having function definitions all on one line. Increasingly, I'm even splitting <code>def</code> definitions over two lines. I find it generally helps readability. I'd change your definitions at the top to:</p>

<pre><code>(defn get-tiles [puzzle]
  (nth puzzle 0))

(defn get-size [puzzle]
  (nth puzzle 1))

(defn set-tiles [puzzle tiles]
  (assoc puzzle 0 tiles))
</code></pre>

<hr>

<p>And I don't see any sample data, but judging by the first two functions, you seem to be storing the puzzle as a vector "tuple" of <code>[tiles size]</code>. You may find that it's neater to store that as a map instead. Something like <code>{:tiles [...], :size ...}</code>. That gives you getters for free (as keywords), and makes the structure itself more self explanatory.</p>

<hr>

<p>You're using <code>:space</code> as a sentinel value. You may find using a namespaced-qualified version (<code>::space</code> internally) is beneficial. I like using <code>::</code> keywords when possible because IntelliJ gives better autocomplete suggestions when using namespaced keywords, so it's harder to cause typos.</p>

<hr>

<p><code>valid-coords?</code> can be simplified a bit by taking advantage of "comparison chaining":</p>

<pre><code>(defn valid-coords? [puzzle [row col]]
  (let [size (get-size puzzle)]
    (and (&lt; -1 row size)
         (&lt; -1 col size))))
</code></pre>

<p>You could also use <code>&lt;=</code> and <code>dec</code> <code>size</code> before comparing:</p>

<pre><code>(defn valid-coords? [puzzle [row col]]
  (let [size (dec (get-size puzzle))]
    (and (&lt;= 0 row size)
         (&lt;= 0 col size))))
</code></pre>

<hr>

<p><code>is-solvable?</code> can have some of its nesting reduced using <code>cond</code>:</p>

<pre><code>(defn is-solvable? [puzzle]
  (let [inv-cnt (inversions puzzle)
        size (get-size puzzle)
        [row col] (get-space-coords puzzle)]
    (cond
      (odd? size) (even? inv-cnt)
      (even? (- size row)) (odd? inv-cnt)
      :else (even? inv-cnt))))
</code></pre>

<p>I go back and forth between putting the conditions and bodies on the same and separate lines. In this case though, everything is short enough that readability is fine. If I spaced this out like I normally would:</p>

<pre><code>(defn is-solvable? [puzzle]
  (let [inv-cnt (inversions puzzle)
        size (get-size puzzle)
        [row col] (get-space-coords puzzle)]
    (cond
      (odd? size)
      (even? inv-cnt)

      (even? (- size row))
      (odd? inv-cnt)

      :else
      (even? inv-cnt))))
</code></pre>

<p>It becomes huge, although I do think the readability is better in the second version.</p>

<hr>

<p><code>(if (&gt; num-moves 0)</code> can alternatively be written as <code>(if (pos? num-moves)</code>.</p>

<hr>

<p>A lot of your tests have a series of <code>is</code> checks that are all basically checking the same thing, just with different data:</p>

<pre><code>(testing "get-tile"
  (is (= 1 (pzl/get-tile p1 [0 0])))
  (is (= 2 (pzl/get-tile p1 [0 1])))
  (is (= 5 (pzl/get-tile p1 [1 1]))))
</code></pre>

<p>This can be simplified using <a href="https://clojuredocs.org/clojure.test/are" rel="nofollow noreferrer"><code>are</code></a>:</p>

<pre><code>(testing "get-tile"
  (are [result coord] (= result (pzl/get-tile p1 coord))
    1 [0 0]
    2 [0 1]
    5 [1 1]))
</code></pre>

<p>That gets rid of a <em>lot</em> of explicit duplicate calls and noise.</p>
    </div>