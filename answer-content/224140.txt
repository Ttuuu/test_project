<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your two main issues have not been resolved.</p>

<hr>

<h2>Separation of Concerns</h2>

<blockquote>
  <p><em>I still find it hard to split the UI and the program logic although I have created a static Screen class for that.</em></p>
</blockquote>

<p>Even though you have tried to offset UI operations to a dedicated class <code>Screen</code>, your code is still full of mixed concerns logic (<strong>presentation vs application vs test</strong>). </p>

<ul>
<li><code>Card</code> has properties <code>FaceName</code>, <code>Symbol</code> used only at presentation layer. They might serve a purpose as default string representation, regardless how they get presented to the end user.</li>
<li><code>Card</code> stores <code>CardColor</code>, which is definitely presentation logic.</li>
<li><code>Card</code> has presentation layer methods <code>PrintCardColor</code> and <code>PrintCard</code>. They have no place in the application layer. In addition, <code>PrintCard</code> should be either static or have no argument.</li>
<li><code>Deck</code> contains a method <code>DrawCard</code> which takes an argument <code>test</code>. This mixes test flow with normal application flow.</li>
<li><code>Deck</code> has method <code>ShowRemainingDeckCount</code> which is presentation logic.</li>
<li><code>Player</code> is even worse than the other classes. Some methods mix application with presentation logic in the body. Split application logic from methods <code>Hit</code> and <code>Stand</code>. </li>
<li><code>Player</code> contains methods <code>ShowHandValue</code> and <code>ShowUpCards</code> which are presentation logic.</li>
<li><code>BlackJackGame</code> also mixes presentation and application logic in <code>Play</code> making it impossible to use this class in other UIs.</li>
</ul>

<hr>

<h2>Object-Oriented Design</h2>

<blockquote>
  <p><em>I still can't figure out the purpose or need of having Hand class as suggested by some.</em></p>
</blockquote>

<p>Your current implementation requires you to do tricks and store way too much information on your existing classes.</p>

<ul>
<li><code>Card</code>'s property <code>FaceName</code> could be an extension method on enum <code>Face</code>.</li>
<li><code>Player</code> really needs to be split into several classes: <code>Player</code>, <code>Hand</code>, <code>Bet</code>. I will explain below.</li>
<li><code>Hand</code> should also store properties <code>IsNaturalBlackJack</code>, <code>GetHandValue</code> and <code>ChipsOnHand</code>. </li>
<li>I would also place betting logic <code>IsBusted</code>, <code>ChipsOnBet</code>, <code>Turn</code>, <code>Bit</code>, <code>Stand</code> in a separate class <code>Bet</code>.</li>
<li><code>BlackJackGame</code> can be further divided into <code>Round</code>s and a <code>Dealer</code>.</li>
</ul>

<p>By not having a class <code>Hand</code> you are required to do a trick with <code>Value</code> in <code>Card</code>. This is hand logic, not card. A Hand should provide the value used in a bet. A card can still have its own value, but this value is not of importance in the game, only as internal logic for the hand to calculates its own value.</p>

<blockquote>
<pre><code>// set value is for Ace because Ace can have value 1 or 11.
public int Value { get; set; }
</code></pre>
</blockquote>
    </div>