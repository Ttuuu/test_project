<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>When <code>messageLength</code> happens to be too large the code just loops around to the next <code>messageLength = in.readShort();</code>. However, the message body is still there, and <code>readShort</code> will pull the short from it. Chances are, it would be interpreted as a valid message length, and the stream gets irrecoverably out of sync.</p>

<p>You must discard the entire message by reading it.</p></li>
<li><p><code>DataInputStream.read()</code> hey return less bytes than requested. Yet again, the stream gets out of sync. You must read the message body in the loop, until it is consumed entirely.</p></li>
<li><p>Closing the server socket every time a data socket fails seems drastic. There is nothing wrong with the server socket, and could be reused. It may need to be reopened only if <code>accept</code> fails.</p></li>
<li><p>I recommend to move <code>openSocket</code> call to the exception clause:</p>

<pre><code>    while (True) {
        try {
            messageLength = in.readShort();
            ....
        } catch(Exception e) {
            closeSocket();
            Log.d(APPNAME, e.toString());
            openSocket();
        }
</code></pre>

<p>One nesting level down.</p></li>
<li><p>You may want to be more precise about exceptions. It is very well possible that the exception has nothing to do with the socket (e.g. may <code>sendMessage</code> throw? was it a keyboard interrupt? <code>ObjectMapper</code> throw? something else? It is impossible to tell from the given code). In such cases different recovery is necessary, but the socket should likely remain intact.</p></li>
</ul>
    </div>