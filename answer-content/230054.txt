<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Functions</h1>

<p>Right now, <code>write_html</code> manages both parsing and writing to a file. Separate this function into two functions, perhaps <code>parse_data</code> and <code>write_data</code>.</p>

<h1>String Formatting</h1>

<p>This</p>

<pre><code>s = "&lt;pre&gt;" + line + "&lt;/pre&gt;"
e.write("&lt;td&gt;" + sequence_1 + '&lt;/td&gt;' + '\n')
</code></pre>

<p>can be written like this</p>

<pre><code>s = f"&lt;pre&gt;{line}&gt;&lt;/pre&gt;"
e.write(f"&lt;td&gt;{sequence_1}&lt;/td&gt;\n")
</code></pre>

<p>The <code>f""</code> allows you to directly implement variables into your strings.</p>

<h1>Simplification</h1>

<p>This</p>

<pre><code>elif line.startswith('# Gaps:'):
    line = line.split()
    gaps = line[2]
</code></pre>

<p>can be written like this</p>

<pre><code>elif line.startswith('# Gaps:'):
    gaps = line.split()[2]
</code></pre>

<p>The same with these two:</p>

<pre><code>if line.startswith('# 1:'):
    sequence_1 = line.split()[2]
elif line.startswith('# 2:'):
    sequence_2 = line.split()[2]
</code></pre>

<h1>Variable Assignments</h1>

<p>This</p>

<pre><code>sequence_1 = ''
sequence_2 = ''
identity = ''
similarity = ''
gaps = ''
html_string = ''
</code></pre>

<p>can be written like this</p>

<pre><code>sequence_1, sequence_2, identity, gaps, similarity, html_string = '', '', '', '', '', ''
</code></pre>

<h1>Type Hints</h1>

<p>You can use type hints to make it clear what is being accepted as parameters, and what is being returned by the function.</p>

<p>From this</p>

<pre><code>def write_html(result):
</code></pre>

<p>to this</p>

<pre><code>def write_html(result: str) -&gt; None:
</code></pre>

<h1>Docstrings</h1>

<p>You should include a docstring at the beginning of every function, method, class, and module you write. This will allow documentation to identify what these are supposed to do.</p>

<pre><code>def write_html(result: str) -&gt; None:
    """
    (Description about this method here)
    """
    ... code here ...
</code></pre>
    </div>