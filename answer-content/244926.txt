<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Naming</h1>
<p>Naming is really important.  There are conventions that help to give helpful hints to the reader about what a name refers to.  <code>camelCase</code> names on their own are typically going to be variables, <code>camelCase(</code> with parenthesis are likely to be function calls.  <code>Capitals</code> are typically used for classes, constants, enums.</p>
<p>So, when I see something like this:</p>
<blockquote>
<pre><code>Booking(hotel);//Methode zum Buchen
</code></pre>
</blockquote>
<p>It takes more processing to figure out what <code>Booking</code> is referring to, because it looks like a constructor call.  This is reinforced by the name itself <code>Booking</code> sounds like a thing, rather than an action, so I'm expecting it to be a class name.  If you need to add a comment to tell you it's the booking method, then it's probably a good sign that the name could be improved...  <code>createBooking</code> might be a more descriptive name.</p>
<h1>Don't cheat with your names...</h1>
<blockquote>
<pre><code>boolean roomservice;
static double zimmerservice = 10;
</code></pre>
</blockquote>
<p>I'd suggest picking a single language for your actual code, commenting in a different language is fine, however if you use both languages for the code then you can get into situations like the one above where you basically have the same name, meaning two different things.  This is confusing.  One of these should really have a different name.  <code>roomServiceCost</code> perhaps?</p>
<h1>Money...</h1>
<p>People are funny about losing money to rounding errors... Generally when you're dealing with Money you want to consider using <code>BigDecimal</code>, rather than <code>double</code>.  It is a bit harder to work with than <code>double</code> though and for this application may not be necessary.</p>
<h1>Customer Interface?</h1>
<blockquote>
<pre><code>private static boolean CustomerInterface = true;//Hauptprogramm boolean
</code></pre>
</blockquote>
<p>It's really unclear what this variable is for.  It seems like it's possibly supposed to be used to determine if the interface is displayed, however it's always set to true...</p>
<h1>Duplication</h1>
<p>Look out for duplication in your code.  It's a good sign that there may be other abstractions, either methods or classes.  So, in your <code>Booking</code> method, you're doing more or less the same thing in each of the <code>case</code>'s</p>
<blockquote>
<pre><code>       case "2":
           if (hotel[1].getAvailable(hotel[1].available)) {
               int roomNr = 1;
               PreisKategorie(hotel, roomNr);
               Breakfast(hotel, roomNr);
               Balcony(hotel, roomNr);
               BookingPeriode(hotel, roomNr);
               FinalizeBooking(hotel, roomNr);
</code></pre>
</blockquote>
<p>Consider if there's a way to convert the <code>userInput</code> into a number that can be used to drive this booking experience and remove some of this redundancy.</p>
<h1>Call Depth</h1>
<p>Be careful about call circles.  So, your <code>Booking</code> method, can call <code>AldreadyBooked</code>, which in turn calls back to <code>Booking</code>.  Each method call adds to the call stack.  If this happens enough times, then you're running the risk of a stack overflow.  Rather than following this circle, consider if there's a way to pass indicate success/failure back up to the caller so that it can make a decision about what to do next, rather than calling back out to the caller like this.</p>
<h1>Booking vs Room vs Request</h1>
<p>The most obvious first step for a split in your data is to consider what are attributes of a Room and what are attributes of a booking.</p>
<p>A <code>Room</code> has certain attributes that aren't related to a booking, they're just a part of the room.  That might be things like <code>roomNumber</code>, <code>beds</code>, <code>toilets</code>, <code>allowsPets</code> etc.</p>
<p>A <code>RoomBooking</code> on the other hand might consist of things related to a specific booking, so things like <code>bookedRoom</code>, <code>price</code>, <code>breakfastRequired</code> etc.</p>
<p>You then might have another abstraction, such as <code>BookingRequest</code>, which would have things like <code>numberPeople</code>, <code>breakfastRequired</code>, <code>fromDate</code>, <code>numberNights</code> etc, which could be used to determine which rooms would satisfy the customer and which are available.</p>
<p>Having these sorts of abstractions makes it easier to think about how to rework the logic to add extra functionality... so, for example if the customer only needs to have room for a single, but all of the rooms with a single bed are reserved, then you could offer them a double room instead.</p>
<h1>Visibility</h1>
<p>Your <code>Room</code> class has one private member and a lot of internal ones.  Consider if this really makes sense...</p>
<h1>Statics</h1>
<p>If you're going to have <code>static</code>s in your <code>class</code>, it's a good idea to group them together, rather than sprinkling them amongst the other variables.</p>
<p>If your statics are supposed to be constant, which I think a lot of yours are, you should mark them as <code>final</code> to indicate that they're not going to change.</p>
    </div>