<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Okay I spent just a little while with your code @Valentyn, and I think it is mostly unharmed...</p>

<h3><code>sql_utils/__init__.py</code></h3>

<pre class="lang-py prettyprint-override"><code>import os


def walked_sql_paths(config, sub_dir):
    """
    Generates `tuple` of absolute and relative file paths

    - `config` should contain a 'MAIN_DIR' key with a value similar to
        - `/home/Mentor`
        - `/home/StudentName`
    - `sub_dir` should contain a string such as `Homework`
    """
    ## ... I am guessing that ya might be doing something
    ##     else with the `config` object, if this is not
    ##     the case, then this could be simplified to
    ##     only taking a `path` argument instead.
    target_dir = os.path.join(config['MAIN_DIR'], sub_dir)

    for dirpath, subdirs, files in walk(target_dir):
        for item in files:
            if not item.endswith('.sql'):
                continue

            sql_abs = os.path.join(dirpath, item)
            sql_rel = os.path.basename(dirpath)
            yield sql_abs, sql_rel
</code></pre>

<blockquote>
  <p>That <em>stuff</em> between <code>"""</code> (triple quotes) be a <a href="https://en.wikipedia.org/wiki/Docstring" rel="nofollow noreferrer"><em><code>"docstring"</code></em></a>, and is accessable via either <code>help(walked_sql_paths)</code> or <code>print(walked_sql_paths.__doc__)</code>. The <a href="https://en.wikipedia.org/wiki/Dunder" rel="nofollow noreferrer"><em><code>"dunder"</code></em></a> or <a href="https://rszalski.github.io/magicmethods/" rel="nofollow noreferrer"><em><code>"Magic Method"</code></em></a> stuff I'll not cover here as that's a whole <em>'nother-can-o-worms</em>. What is important is that accessible documentation is something that Python allows for, while code that doesn't require it is something to strive for.</p>
</blockquote>

<p>I'm using <a href="https://stackoverflow.com/a/231855/2632107"><em><code>yield</code></em></a> in the above <code>for</code> loop so that it yields partial results to whatever calls <code>next()</code> or <code>__next__()</code> methods (called by <code>for</code> loops and other processes implicitly), <a href="https://wiki.python.org/moin/Generators" rel="nofollow noreferrer"><code>generators</code></a> are a <em>cheep</em> way of optimizing code as well as ensuring that users experience less <em>herky jerky</em> loading between results; even if things are taking awhile this'll usually <em>feel</em> faster in other-words.</p>

<p>The assignments of <code>sql_abs</code> and <code>sql_rel</code> are first for readability, and second for making it easy to later do something like <em><code>yield sql_rel, sql_abs</code></em> instead. Otherwise there's little reason to prefer it over the answer posted by <a href="https://codereview.stackexchange.com/a/219322/197446">@Peilonrayz</a>.</p>

<p>Here's one way of using the above modified code...</p>

<pre class="lang-py prettyprint-override"><code>from sql_utils import walked_sql_paths


## ... setting of `mentors` and `students` `_config` objects
##     and other stuff I am guessing will go here...


students_paths = walked_sql_paths(config = students_config,
                                  sub_dir = 'Students Homework')

mentors_paths = walked_sql_paths(config = mentors_config,
                                 sub_dir = 'Homework')


for s_paths, m_paths in zip(students_paths, mentors_paths):
    if not s_paths[0] == m_paths[0]:
        print("Warning, continuing past -&gt; {s_rel_path} and {m_rel_path} miss-match!".format(
            s_rel_path = s_path[0],
            m_rel_path = m_path[0]))
        continue

    print("Time to compare -&gt; Mentors {m_abs_path} with Students {s_abs_path}".format(
        m_abs_path = m_paths[1],
        s_abs_path = s_paths[1]))
</code></pre>

<p>I'm using <a href="https://docs.python.org/3.3/library/functions.html#zip" rel="nofollow noreferrer"><em><code>zip</code></em></a> to zip-up the two generators in the above <code>for</code> loop because it's a built-in that seems to do what ya want.</p>

<p>Hopefully none of this is <em>mind blowing</em> because like I stated in your question's comments @Valentyn, you where really close to something that I'd not be able to add to.</p>

<hr>

<p>Looking at the folder structure a bit closer, it looks like things'll could get just a bit <em>fancier</em> with the loops. What's your preference on ordering?</p>

<p>My thoughts would be to iterate over <em><code>Students_Homework/</code></em> of students and then <em><code>zip</code>-up</em> between sub-folders, in which case it maybe possible to <em>cache</em> the Mentor's folders on the first pass. However, that would not be nice to scale or if there's lots of sub-directories... Another thought would be to iterate over the Mentor's <code>1</code>-<code>n</code> folders and <code>zip</code>-up on each student in turn. Feel free to comment with a preference as to which might be more helpful.</p>

<hr>

<p>Thoughts on the future, using <code>try</code>/<code>except</code> you can code for cases where, <em><code>Student3</code></em> didn't turn in the <em><code>5.sql</code></em> file espected in <em><code>2</code>'s folder</em>, so here's some <em>skeleton-code</em> that'll hopefully get ya a little closer to fault tolerantness...</p>

<pre class="lang-py prettyprint-override"><code>def safety_zipper(*iters, search_strs):
  """
  Allows for doing something _clever_ where things could have gone painfully wrong

  - `iters`, `list` of iterables that each output `tuple`s of length two `(rel_path, abs_path)`
  - `search_strs`, `list` of `str`ings to search for matches on `rel_path`

  Yields `list` of `tuple`s `(rel_path, abs_path)`
  """
  for search_str in search_strs:
      partial_results = []
      for thing in iters:
          try:
              path_tuple = thing.next()
          except (GeneratorExit, StopIteration):
              ## Note passing can be dangerous, I only do it
              ##  because the parent loop will exit, eventually
              print("Warning {abs_path} miss-match with {search_str}".format(
                  abs_path = path_tuple[1],
                  search_str = search_str))
              pass
          else:  ## No error so do things with next thing
              ## Uncomment the following if useful
              # abs_path = path_tuple[1]
              rel_path = path_tuple[0]
              if search_str == rel_path:
                  partial_results.append(path_tuple)
                  continue

              ## Deal with miss-matches in a clever way here, such
              ##  as if a student is late to turn in an assignment.

          finally:
              ## Finally runs regardless, well so long as another
              ##  exception is not raised before reaching here.
              ##  Only included for completeness and in-case ya
              ##  wanted to do something fancy here too.
              pass

      yield partial_results
</code></pre>

<p>... I'll warn that the above is not complete, but essentially it'll allow for catching cases where <em><code>Student</code></em> directories or files do not match those of the <em><code>Mentor</code>'s</em> file paths. It may have to be <em>stacked</em> to be able to check for differences in both directories and files, and pre-loading <code>search_strs</code> list would either require foreknowledge or pre-parsing a chunk of <em><code>Mentor</code>'s</em> file paths to populate.</p>

<p>But whatever's <em>downstream</em> will have a much cleaner input and require much less edge-case detection.</p>
    </div>