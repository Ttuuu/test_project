<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Inefficient data construction.</p>

<pre><code>int main() {
    int k, n;
    std::cin &gt;&gt; k &gt;&gt; n;
    std::vector&lt;std::pair&lt;int, int&gt;&gt; convex_polygon(k); &lt;-
    std::vector&lt;std::pair&lt;int, int&gt;&gt; points(n);         &lt;-
    for(size_t i = 0; i &lt; convex_polygon.size(); i++) {
        int x, y;
        std::cin &gt;&gt; x &gt;&gt; y;
        convex_polygon[i] = {x, y};
    }
</code></pre>

<p>The two vectors are actually instantiated with k and n default constructed pairs, not that efficient if the type is expensive instead do.</p>

<pre><code>int main() {
    int k, n;
    std::cin &gt;&gt; k &gt;&gt; n;
    std::vector&lt;std::pair&lt;int, int&gt;&gt; convex_polygon;
    convex_polygon.reserve(k);
    std::vector&lt;std::pair&lt;int, int&gt;&gt; points;
    points.reserve(n);
</code></pre>

<p>Then we can also construct the pairs in place</p>

<pre><code>    for(size_t i = 0; i &lt; k; i++) {
        int x, y;
        std::cin &gt;&gt; x &gt;&gt; y;
        convex_polygon.emplace_back(x, y);
    }
</code></pre>
    </div>