<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Cool game. I enjoy code reviews when all of the code is easy to reproduce. In this case simply copying &amp; pasting into an IDE and hitting the run button :-)</p>

<h2>Item class</h2>

<p><code>Item</code> IMO should be renamed to <code>GameItem</code>, <code>MovableGameObject</code> or something similar. It should also be a class in it's own file, with private methods and getters, setters instead of public properties.</p>

<p>It took me a while to realize <code>s</code> was short for speed. I'd advise against shortening names to a single character. The only exception is <code>x</code> and <code>y</code> as those are fairly standard for x, y coordinates.</p>

<h2>Avoid magic numbers / magic strings</h2>

<p>Lots of your constants should be declared as static final variables, at the top. E.G:</p>

<pre><code>private static final int PLAYER_WIDTH = 24;
</code></pre>

<p>I'd suggest reading more on "Magic numbers". There's a lot on this site or online about it.</p>

<h2>Method naming</h2>

<p>Use names that make sense and are self explanatory. Try to be specific, don't use names that could cover a wide range of functionality.</p>

<p><code>place</code> doesn't explain what it's doing. I can't tell what's it's doing until we rename the other methods.</p>

<p><code>power</code> - Should be renamed to <code>createPowerUnitAndAddToList</code>. Using this new method name which accurately describes what the method is doing, we can easily tell from reading the name that the method could be refactored to be more useful &amp; follow the single responsibility principle. I'd suggest instead naming it <code>createPowerUnit</code> and have the method return a new Item:</p>

<pre><code>public Item createPowerUnit() {
    return new Item(Color.BLUE, width + (int)(random.nextDouble() * width * 2), (int)(random.nextDouble() * (height+32))-16, 16, 16, 2);
}
...
items.add(createPowerUnit());
</code></pre>

<p>You may want to create a <code>PowerUnit</code> class and extend <code>Item</code>. This allows for more control over the different units. And/or have a separate class for creating the units. This keeps the code more organized.</p>

<h2>Use else-if</h2>

<p>It looks like you are avoiding using 'else if' and 'else' statements. Use them whenever necessary. Absolutely no need to avoid them and doing so is wrong.</p>
    </div>