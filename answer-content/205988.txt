<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">


<blockquote>
<pre class="lang-none prettyprint-override"><code>mov     qword [rsp+8H], rdx
</code></pre>
</blockquote>

<p>Why would you store this value at all? You never use the stored value afterwards!</p>

<p>You can easily dismiss all of the local storage for the <em>sum</em> routine. No need for <code>sub rsp, 24</code> nor <code>add rsp, 24</code> instructions. Also, why 24 bytes when all you use are the middle 8 bytes? The same happens in <em>main</em> where you reserve 40 bytes when all you use are the middle 24 bytes! The alternative <em>main</em> evens wastes 24 bytes this way.</p>

<p>You can avoid the separate <em>.end</em> code by clearing the accumulator very early and jumping to the one <code>RET</code> you really need.</p>

<blockquote>
<pre class="lang-none prettyprint-override"><code>lea     eax, [rcx-1H]
lea     rcx, [rsp+rax*8+30H]
</code></pre>
</blockquote>

<p>You can calculate this upper limit in just one instruction. Absorb the decrement by 1 operation into the displacement of the <code>LEA</code>:</p>

<pre class="lang-none prettyprint-override"><code>lea     rcx, [rsp + rcx*8 + 28h]
</code></pre>

<p>And since by the time of this calculation the <code>RDX</code> register already points at <code>[rsp + 28h]</code> you could simply write:</p>

<pre class="lang-none prettyprint-override"><code>lea     rcx, [rdx + rcx*8]
</code></pre>

<hr>

<p>Applying these changes:</p>

<pre class="lang-none prettyprint-override"><code>sum:
    xor     eax, eax
    test    ecx, ecx
    jle     .end
    mov     [rsp + 10h], rdx    ; 1st arg for sure (ECX=1+)
    mov     [rsp + 18h], r8     ; maybe 2nd arg
    mov     [rsp + 20h], r9     ; maybe 3rd arg
    lea     rdx, [rsp + 10h]    ; lower limit
    lea     rcx, [rdx + rcx*8]  ; upper limit
.more:
    add     eax, dword [rdx]
    add     rdx, 8
    cmp     rdx, rcx
    jb      .more
.end:
    ret
</code></pre>

<p>When comparing memory addresses like in your code <code>cmp rdx, rcx</code>, it would be best to not check for equality but rather for excess. Provided the step is non-zero, checking for the 'below' condition will happen eventually while checking for the 'equal' condition might never happen at all (if there's an error in the program of course...).</p>

<hr>

<p>An even simpler solution uses the <code>ECX</code> register as a counter (like it was on input):</p>

<pre class="lang-none prettyprint-override"><code>sum:
    xor     eax, eax
    test    ecx, ecx
    jle     .end
    mov     [rsp + 10h], rdx    ; 1st arg for sure (ECX=1+)
    mov     [rsp + 18h], r8     ; maybe 2nd arg
    mov     [rsp + 20h], r9     ; maybe 3rd arg
    lea     rdx, [rsp + 10h]    ; lower limit
.more:
    add     eax, dword [rdx]
    add     rdx, 8
    sub     ecx, 1
    jnz     .more
.end:
    ret
</code></pre>

<hr>

<blockquote>
  <p>We can change how many variables are being given to the function without having to change the amount of memory being allocated to the function itself.</p>
</blockquote>

<p>True, but the caller still has to reserve - somewhat mysteriously - those 24 bytes that correspond to the 3 arguments passed via registers <code>EDX</code>, <code>R8D</code>, and <code>R9D</code>.<br>
I think it would be simpler to either pass <strong>all</strong> values on the stack or pass a pointer (in <code>RDX</code>) to a buffer holding all of those values. In both cases the count remains in <code>ECX</code>.<br>
Next code combines it all:</p>

<pre class="lang-none prettyprint-override"><code>    sub     rsp, 48
    mov     rdx, rsp
    mov     dword [rdx + 40], 6
    mov     dword [rdx + 32], 5
    mov     dword [rdx + 24], 4
    mov     dword [rdx + 16], 3
    mov     dword [rdx + 8], 2
    mov     dword [rdx], 1
    mov     ecx, 6
    call    sum
    ...

sum:
    xor     eax, eax
    test    ecx, ecx
    jle     .end
.more:
    add     eax, dword [rdx]
    add     rdx, 8
    sub     ecx, 1
    jnz     .more
.end:
    ret
</code></pre>
    </div>