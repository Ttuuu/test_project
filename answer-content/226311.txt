<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Cosmetics</h3>

<p>You can simplify your code by removing the generic arguments from <code>LRUCacheEntry</code>. Since it's a nested class it can use its parent class' types without redefining them. You could also make it a <code>readonly struct</code> and save a couple of instances. </p>

<pre><code>private readonly struct LRUCacheEntry
{
    public readonly TKey Key;
    public readonly TValue Value;

    public LRUCacheEntry(TKey k, TValue v)
    {
        Key = k;
        Value = v;
    }

    public static implicit operator TValue(LRUCacheEntry entry) =&gt; entry.Value;
}
</code></pre>

<p>If you add to it an <code>implicit operator</code> to <code>TValue</code>, you can simplify this weird looking line </p>

<blockquote>
<pre><code>value = node.Value.Value;
</code></pre>
</blockquote>

<p>to</p>

<pre><code> value = node.Value;
</code></pre>

<h3><code>RemoveLastRecentlyUsed</code></h3>

<blockquote>
<pre><code>      if (_cacheMap.Count &gt;= _capacity)
          RemoveLastRecentlyUsed();
</code></pre>
</blockquote>

<p>I find you should move the <code>if</code> to <code>RemoveLastRecentlyUsed</code> and let it handle everthing about its job of removing items. Currently the logic is two places.</p>

<h3>Disabling the cache</h3>

<p>You should give the <code>0</code> a name like <code>CacheDisabled</code> but creating another class doing nothing would be much better than then tricking this one into something <em>unnatural</em>.</p>

<p>At least you should expose the <code>Capacity</code> or another property like <code>bool Enabled</code> so that the user can see what kind of cache he is using. Might also be useful for debugging. Otherwise you need to look into its private state.</p>
    </div>