<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>My question is if it's considered good practice to use a static
  Scanner and if it is what can I do to make this class better. I'm
  looking for improvement here, this class does what's expected but I
  don't know if it's the correct way.</p>
</blockquote>

<p>This depends on what you are building. This kind of static design might be ok for smaller utilities. For anything bigger it will come around to kick you sooner or later.</p>

<p>Your class is not really a class but a collection of utilities. Which again might be ok. Problem is with the <code>Scanner</code> which in your case is globally shared. Everybody who uses your class gets coupled to this global state.</p>

<p>Consider the below code:</p>

<pre><code>public class BMI {
    public double value() {
        double weightInKg = (double) Input.Int();
        double heightInM = (double) Input.Int();
        Input.CloseScanner();
        return weightInKg  / (heightInM * heightInM);
    }
}
</code></pre>

<p>Since this uses globally shared state I just broke your code for all clients. Every piece of code depending on <code>Input</code> class will fail because I closed the scanner.</p>

<p>If I would now tried to write a unit test I would not be able to. Not without some dirty hacks. This code is coupled to Input and this dependency cannot be broken.</p>

<p>This is where Software Development principles such as <a href="https://en.wikipedia.org/wiki/SOLID" rel="nofollow noreferrer">SOLID</a> come to into play.</p>

<p><strong>Single Responsibility Principle:</strong></p>

<p>Class should have a single reason to change. Your input class is responsible for everything regarding reading from console. That is a lot of reasons for change. From changing of date format to adding a new operations. Every such need causes change in this class and has potential to break something.</p>

<p><strong>Open Closed Principle:</strong></p>

<p>You want to be able to extend you program without touching existing code. If I wanted to read double for example I would have to change Input class. I should be able to just create snother class</p>

<p><strong>Liskov Substitution Principle:</strong></p>

<p>There is no substitution possible for Input. You cannot create other implementations of static utilities.</p>

<p><strong>Interface Segregation Principle:</strong></p>

<p>You want interfaces of your objects to be small so that object do not have to depend on things they do not use. Any class accessing <code>Input</code> has access to everything even though it just needs to read integers.</p>

<p><strong>Dependency Inversion Principle:</strong></p>

<p>Dependencies of your objects should be configurable. So that you can achieve easier reuse and testability. You cannot invert static dependency. It is there and you can't do anything about it.</p>

<p>There are many approaches how to make your code SOLID. Here is one example again with BMI class to show how client would use the code:</p>

<pre><code>public class BMI {

    private final DoubleProvider weightInKg;
    private final DoubleProvider heightInM;

    public BMI(DoubleProvider weightInKg, DoubleProvider heightInM) {
        this.weightInKg = weightInKg;
        this.heightInM = heightInM;
    }

    public double value() {
        final double weight = weightInKg.doubleValue();
        final double height = heightInM.doubleValue();
        return weight  / (height * height);
    }
}

public class Input implements DoubleProvider, IntProvider {

    private final Scanner scanner;

    public Input(Scanner scanner) {
        this.scanner = scanner;
    }

    @Override
    public double doubleValue() {
        ...
    }

    @Override
    public int intValue() {
        ...
    }

    ...

}
</code></pre>

<p>Most notable change are the dependencies. My BMI class no longer depends on details of Input. It can read from console, file, network... anything as long as it implements DoubleProvider interface.</p>

<p>Nothing prevents me from testing both BMI and Input. Dependencies are configurable via constructor.</p>
    </div>