<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A few recommendations per class:</p>

<p><strong>Food.java</strong></p>

<p>What's the point in this class? It just's just a <code>Point</code> with a constant colour. I would just have a FOOD_COLOUR constant in your <code>Painter</code> and then you can scrap this.</p>

<p><strong>GameLoop.java</strong></p>

<p>frameRate and interval should be final. Actually you don't need frameRate at all because you don't use it for anything other than the calculation of interval. Additionally, your <code>setFrameRate(int frameRate)</code> function is broken because it doesn't update the interval. You don't call it anyway, so why not just delete it? Same with the getter.</p>

<p><strong>Grid.java</strong></p>

<p>I don't like that your constructor is creating <code>Food</code> and <code>Snake</code> objects. You should be passing these in. Annoying to ensure that they are positioned within the grid, though - you would probably have to throw an exception.</p>

<p><code>Grid</code> is being used too much as a "dumb" bag of data. It has too many getters. Try to encapsulate as much as possible. <code>getCols</code> and <code>getRows</code> are again unused so you should just get rid of them. Rather than expose all your properties via <code>getWidth</code>, <code>getHeight</code>, <code>getSnake</code> and <code>getFood</code>, why not have a method which will paint a grid to a <code>GraphicsContext</code>:</p>

<pre><code>public class Grid
{
   ...
   void paint(GraphicsContext gc)
   {
       gc.setFill(Grid.COLOR);
       gc.fillRect(0, 0, rows * SIZE, cols * SIZE);
       //etc...
   }
}
</code></pre>

<p><strong>Point.java</strong></p>

<p>A solid, immutable Point class which does everything you need it to. Very good.</p>

<p><strong>Snake.java</strong></p>

<p>If your Point deserved a class, xVelocity and yVelocity should absolutely be a class as well. If you renamed Point to represent a 2D Euclidean vector - <code>Vec2D</code> etc. - you could use the same class for both position and velocity without causing confusion.</p>

<p>Why are you bitwise and-ing here?</p>

<pre><code>safe &amp;= !points.contains(point);
</code></pre>

<p>In a bitwise and you always evaluate both sides, so you are always doing <code>points.contains(point)</code> even if you don't need to.</p>

<p><strong>Painter.java</strong></p>

<p>If you ever find yourself writing...</p>

<pre><code>// Now the Food
...
// Now the snake
...
// The score
</code></pre>

<p>... then you should create a separate function. It's just as obvious what's going on, but more testable and maintainable.</p>

<pre><code>paintFood(...)
{
   gc.setFill(Food.COLOR);
   paintPoint(grid.getFood().getPoint(), gc);
}

paintSnake(...)
{
   //whatever
}
</code></pre>

<p><strong>Main.java</strong></p>

<p>I would refactor your lambda to a separate class. It's too large.</p>

<pre><code>canvas.setOnKeyPressed(e -&gt; {
</code></pre>

<p>would become</p>

<pre><code>setOnKeyPressed(new KeyHandler());
...
public class KeyHandler implements EventHandler&lt;KeyEvent&gt;
{
    void handle(KeyEvent event)
    {
         //do stuff
    }
}
</code></pre>

<p>If you're looking to change the key bindings in the future, where is it more likely you'll look first: <code>Main.java</code> or <code>KeyHandler.java</code> ?</p>

<p>Your <code>start(Stage primaryStage)</code> function suffers from the same "sectioning" as your <code>Painter</code>, except without the comments. Move the sections you have grouped together with whitespace to separate functions that better explain what they do.</p>

<hr>

<p>Overall, I was quite impressed. It was very easy to follow and everything was named sensibly. </p>
    </div>