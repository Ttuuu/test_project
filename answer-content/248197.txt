<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If you accept the <strong>consistency</strong> remark of @AJNeufeld (so that <code>[1]</code> being monotonic indicates that <code>[1,1,1]</code> may rather be monotonic too) and put the other remark about <code>[x,y]</code> being monotonic again, you may find it easier to have <code>true</code>-s by default and recognize when the array is not monotonic:</p>
<pre><code>public static boolean IsMonotonic(int[] numbers) {
    if (numbers == null || numbers.length == 0) {
        return false;
    }
    boolean inc_or_const = true;
    boolean dec_or_const = true;
    int prev = numbers[0];
    for (int curr : numbers) {
        if (curr &lt; prev) {
            inc_or_const = false;
        } else if (curr &gt; prev) {
            dec_or_const = false;
        }
        prev = curr;
    }
    return inc_or_const || dec_or_const;
}
</code></pre>
<p>Of course it looks that tidy only without short-circuiting, after that this will have a very similar structure to your original code again:</p>
<pre><code>public static boolean IsMonotonic(int[] numbers) {
    if (numbers == null || numbers.length == 0) {
        return false;
    }
    boolean inc_or_const = true;
    boolean dec_or_const = true;
    int prev = numbers[0];
    for (int i = 1; i &lt; numbers.length; i++) {
        int curr = numbers[i];
        if (curr &lt; prev) {
            inc_or_const = false;
            if (!dec_or_const) {
                return false;
            }
        } else if (curr &gt; prev) {
            dec_or_const = false;
            if (!inc_or_const) {
                return false;
            }
        }
        prev = curr;
    }
    return true;
}
</code></pre>
<p>Here I went back to indexed access on the basis of my dislike against comparing the first element to itself (what the <code>for(:)</code> variant does). Also note that here, because of the short-circuit <code>return</code>s, completion of the loop means that the array is monotonic for sure. Plus the remark about the hazard of having <code>numbers.length-1</code> in the loop condition has been applied too.</p>
    </div>