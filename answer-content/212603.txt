<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Toby has covered many excellent points in his review.  I won't repeat them here.  What I will do is cover composition of the algorithm.  You are trying to do everything in one function.  It is often better to break the algorithm down into steps, and chain the individual pieces together.</p>

<p>You start off with a stream (list) of raw data, containing the time, quantity of people, and direction they are moving.  You can create a "generator expression" which can turn the quantity of people and direction they are moving into a incremental change in the total number of people.</p>

<pre><code>deltas = ((time, quantity if enter else -quantity) for time, quantity, enter in data)
</code></pre>

<p>The above generator expression will take each row of data from the list, calling the individual pieces <code>time</code>, <code>quantity</code> and the <code>enter</code> flag respectively.  It then converts <code>quantity</code> and <code>enter</code> flag into a positive quantity, for people entering, or a negative quantity, for people leaving.  It produces a stream of tuples containing the time and the change in the number of people.  Ie, <code>print(list(deltas))</code> would produce:</p>

<pre><code>[(1487799425, 14), (1487799425, -4), (1487799425, -2), (1487800378, 10), (1487801478, -18), (1487801478, 18), (1487901013, -1), (1487901211, 7), (1487901211, -7)]
</code></pre>

<p>We can feed this stream into another generator which accumulates the change in number of people.  This time, I'll use a generator function, since <code>population</code> is a state quantity that needs to persist from sample to sample:</p>

<pre><code>def population_over_time(deltas):
    population = 0
    for time, delta in deltas:
        population += delta
        yield time, population
</code></pre>

<p>This would turn the list of times and deltas into a list of times and populations.  Ie) <code>print(list(population_over_time(deltas)))</code> would produce:</p>

<pre><code>[(1487799425, 14), (1487799425, 10), (1487799425, 8), (1487800378, 18), (1487801478, 0), (1487801478, 18), (1487901013, 17), (1487901211, 24), (1487901211, 17)]
</code></pre>

<p>From this stream of tuples, the <a href="https://docs.python.org/3/library/functions.html#max" rel="nofollow noreferrer"><code>max()</code></a> function can easily return the first tuple corresponding to the maximum population.  We'll need to use <a href="https://docs.python.org/3/library/operator.html#operator.itemgetter" rel="nofollow noreferrer"><code>operator.itemgetter(1)</code></a> to extract the population value from the tuple to use as the key:</p>

<pre><code>peak = max(population_over_time(deltas), key=operator.itemgetter(1))
</code></pre>

<p>This will assign <code>(1487901211, 24)</code> to <code>peak</code>.  Since we just want the time of the maximum population, we can <code>return peak[0]</code>.</p>

<p>Putting the pieces together, and reorganizing a bit, we can get:</p>

<pre><code>from operator import itemgetter

def population_deltas(data):
    return ((time, quantity if enter else -quantity) for time, quantity, enter in data)

def population_over_time(data):
    population = 0
    for time, delta in population_deltas(data):
        population += delta
        yield time, population

def find_busiest_period(data):
   return max(population_over_time(data), key=itemgetter(1))[0]
</code></pre>

<p>In addition to the busiest period, you also have a function to produce the population over time, if you wanted to graph that information.  Instead of writing many functions to process the data from start to finish, you have tiny pieces of code which can be assembled as needed to produce the desired product, and could be combined in different fashions as needed to produce other data.</p>

<p>An important aspect of the above approach which bears mentioning:  no lists are being created.  The <code>population_deltas</code> and <code>population_over_time</code> are generators, which produce one value at a time.  The <code>max()</code> function asks <code>population_over_time()</code> for a value, which in turns asks <code>population_deltas()</code> for a value, which retrieves an item from <code>data</code>.  Then, <code>max()</code> asks for the next  value, and keeps the largest.  Then it asks for another value and keeps the largest, and so on.  Memory requirement: <span class="math-container">\$O(1)\$</span>.</p>
    </div>