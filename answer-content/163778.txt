<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think it would add clarity if <code>AddNewNotePanel</code> was not responsible for the model, being that it is not a view for the model. All this view does is create new <code>SwingyNote</code> objects. You can have the controller be responsible for relaying this change to the <code>AllNotesPanel</code>, making the <code>AllNotesPanel</code> the sole manipulator of the model.</p>

<pre><code>public final class AllNotesPanel extends JPanel {
    ...
    @Override
    public void addNote(final SwingyNote swingyNote) {
        swingyNoteService.addNote(swingyNote);
        displayAllNotes();
    }
    ...
}
</code></pre>

<p>In this implementation you have the controller acting as a view. The controller should not be a button, but it may listen to a button. Consider a more basic implementation of the <code>AddNewNotePanel</code> view: </p>

<pre><code>public final class AddNewNotePanel extends JPanel {
    private final JTextField newNoteInputTextField;
    private final JButton addNewNoteButton;

    public AddNewNotePanel() {
        newNoteInputTextField = new JTextField(20);
        addNewNoteButton = new JButton("Add New Note!");
        add(newNoteInputTextField);
        add(addNewNoteButton);
    }

    public String getText() {
        return newNoteInputTextField.getText();
    }

    public void clearText() {
        newNoteInputTextField.setText(null);
    }

    public void addActionListener(final ActionListener listener) {
        addNewNoteButton.addActionListener(listener);
    }
}
</code></pre>

<p>This view object exposes a simple set of methods which will be required by the controller to complete its work. The main role of the controller is to simply manipulate the view based on the user input. Here is a possible implementation of this controller:</p>

<pre><code>public final class SwingyController implements ActionListener {
    private final AddNewNotePanel addNewNotePanel;
    private final AllNotesPanel allNotesPanel;

    public SwingyController(
        final AddNewNotePanel addNewNotePanel, 
        final AllNotesPanel allNotesPanel
    ) {
        this.addNewNotePanel = addNewNotePanel;
        this.allNotesPanel= allNotesPanel;
        addNewNotePanel.addActionListener(this);
    }

    @Override
    public void actionPerformed(final ActionEvent e) {
        final SwingyNote swingyNote = new SwingyNote(addNewNotePanel.getText());
        addNewNotePanel.clearText();
        allNotesPanel.addNote(swingyNote);
    }
}
</code></pre>

<p><strong>Nitpicks:</strong></p>

<p><strong>SwingyNoteService</strong></p>

<p>I assume the instance initializer in the <code>SwingyNoteService</code> was just to add sample values for testing. I would move that logic to your main method to keep the model code clean.</p>

<p>You should protect your data in the <code>SwingyNoteService#getAllNotes</code> method by creating a defensive copy of the collection, or by wrapping it in an unmodifiable collection. You have no control over what gets added to your model if you return the backing set directly.</p>

<pre><code>public Collection&lt;SwingyNote&gt; getAllNotes() {
    return Collections.unmodifiableSet(swingyNotes);
}
</code></pre>

<p><strong><code>final</code> classes</strong></p>

<p>I like to create my classes as <code>final</code>, and leave them <code>final</code> until I find a case where inheritance is required. eg:</p>

<pre><code>public final class Foo { ... }
</code></pre>

<p>Although disabling inheritance prevents you from using one of Java's more powerful features, it's better to have a reason before you allow that type of extension. Designing for inheritance takes a lot more planning and needs to be documented carefully. Inheritance also means that you have to be much more cautious when making changes to this class, because some changes could break subclasses. Further, in most cases I try to favor <a href="https://en.wikipedia.org/wiki/Composition_over_inheritance" rel="nofollow noreferrer">composition over inheritance</a></p>

<p><strong>Wildcard imports</strong></p>

<p>Although wildcards are handy, they are generally considered bad practice as it clutters that file's namespace. It could also introduce bugs if in the future these packages add a class which conflicts with your class names, or if two wildcard imports conflict with each-other.</p>
    </div>