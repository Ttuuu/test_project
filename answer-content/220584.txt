<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If you decide to go the generic way, without applying attributes on your properties, we could build further on Adriano Repetti's answer.  My starting point is the <code>IsNullOrEmpty</code> method, which is invoked against any property in the tree of properties of any specified <em>complex object</em> or list of properties of any specified <em>simple object</em>.</p>

<p>The goal is to test against <em>default</em> values and common <em>empty</em> values.</p>

<blockquote>
<pre><code>private static bool IsNullOrEmpty(object value)
{
    if (Object.ReferenceEquals(value, null))
        return true;

    var type = value.GetType();
    return type.IsValueType
        &amp;&amp; Object.Equals(value, Activator.CreateInstance(type));
}
</code></pre>
</blockquote>

<p>By performing not just <code>Object.ReferenceEquals</code> but also <code>==</code>, we can test both against references as overloaded operators. <code>Nullable&lt;&gt;</code> has an overload that matches <code>== null</code> when <code>HasValue</code> is <code>False</code>. Furthermore, we can check <code>value</code> against the <em>default instance</em> of its type by calling <code>ObjectFactory.CreateInstance</code>. Note that <code>string</code> and <code>DBNull</code> have custom <em>empty</em> values that do not correspond to <code>Activator.CreateInstance</code>.</p>

<pre><code>private static bool IsNullOrEmpty(object value)
    {
        if (Object.ReferenceEquals(value, null) || value == null)
            return true;

        // common Empty values
        if (value is string &amp;&amp; string.IsNullOrEmpty((string)value)) {
            return true;
        }
        if (value is DBNull &amp;&amp; (DBNull)value == DBNull.Value) {
            return true;
        }

        var type = value.GetType();
        var typeDefault = ObjectFactory.CreateInstance(type);

        if (Object.ReferenceEquals(typeDefault, null) || typeDefault == null)
            return false;
        if (Object.ReferenceEquals(value, typeDefault) || value == typeDefault)
            return true;

        return false;
    }
</code></pre>

<h2>Appendix: ObjectFactory</h2>

<p><code>ObjectFactory</code> creates the <a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/default-values-table" rel="nofollow noreferrer">default value</a> of any type. Do not confuse this with the <em>empty</em> value. The latter is context-bound and should be specified on a case-by-case problem. By default, only <code>string.Empty</code> and <code>DBNull.Value</code> are considered <em>empty</em>.</p>

<pre><code>public static class ObjectFactory
    {
        public static object CreateInstance(Type type) 
        {
            if (TypeSystem.IsNullAssignable(type.NotNull())) {
                return null;
            }
            if (type.IsEnum) {
                return Enum.ToObject(type, Convert.ChangeType(0, 
                     Enum.GetUnderlyingType(type)));
            }
            if (type.IsValueType) {
                return Activator.CreateInstance(type);
            }
            return null;
        }
    }
</code></pre>

<h2>Appendix: TypeSystem</h2>

<p><code>TypeSystem</code> consists of convenience methods for verifying characteristics of a <code>Type</code>. Only the relevant methods are included for brevity.</p>

<pre><code>public static class TypeSystem
    {
        public static bool IsNullable(Type type) 
        {
            return type.NotNull().IsGenericType &amp;&amp; type.GetGenericTypeDefinition() == typeof(Nullable&lt;&gt;);
        }

        public static bool IsNullAssignable(Type type) 
        {
            if (IsNullable(type.NotNull()) || !type.IsValueType) {
                return true;
            }

            if (!type.IsGenericParameter) {
                return false;
            }

            #region Generic Parameter Handling
            // probably out-of-scope for this problem
            var gpa = type.GenericParameterAttributes &amp; GenericParameterAttributes.SpecialConstraintMask;

            if (GenericParameterAttributes.None != (gpa &amp; GenericParameterAttributes.ReferenceTypeConstraint)) {
                return true;
            }

            if (GenericParameterAttributes.None != (gpa &amp; GenericParameterAttributes.NotNullableValueTypeConstraint)) {
                return false;
            }

            var gpc = type.GetGenericParameterConstraints();

            if (gpc == null || !gpc.Any(x =&gt; x.IsClass &amp;&amp; IsNullAssignable(x))) {
                return false;
            }
            #endregion

            return true;
        }
    }
</code></pre>
    </div>