<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Overview</h2>
<p>My main issue is that you convert the whole stream into tokens first. Then you parse the tokens. This can get very expensive. Normally you would parse (and push) enough tokens to understand the next part to interpret. Then pop the bit you can to convert the next part.</p>
<p>I dislike the way you have two different types of token state:</p>
<pre><code>    stack_conversion = { { "[", list_open }, { "]", list_close }, { "{", object_open }, { "}", object_close }, { ":", colon }, { ",", comma }, { "buffer", buffer } };

    ....
    enum state { int_value, float_value, bool_value, string_value, default_value, bad_state};
</code></pre>
<p>I would have a single list of all tokens (there is not that many in JSON).</p>
<pre><code>    {, }, [, ], :, ',', null, true, false, number(int), number(float), string
</code></pre>
<hr>
<p>Probably a better way to write this is with lex and yacc (or really there more modern equivalents) flex and bison. A lot of research has gone into these tools to achieve exactly this and you can specify a json parser in about 20 lines of code.</p>
<hr>
<p>This does not do what you think.</p>
<pre><code>template&lt;typename ... T&gt;
bool JSONParser::multiComparision(const char scope, T ... args) {
    return (scope == (args || ...));
}
</code></pre>
<p>This expands</p>
<pre><code>JSONParser::multiComparision('a', '1', '2', '3');

=&gt;
   return ('a' == ('1' || '2' || '3'));
</code></pre>
<p>I don't think that is what you want.</p>
    </div>