<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Algorithm</h2>

<p>You can simplify the code and make it run faster if you construct the next-level carpet by continuing to work on the previous image (punching more holes in it), rather than starting with a blank slate every time.  The code can look prettier and more Pythonic too, since the technique lets you get rid of the recursion.</p>

<h2>Coding practices</h2>

<p>It's a good habit to write docstrings, especially if you are using this code to teach a student!</p>

<p>Avoid free-floating code; all code should be in a function.  Follow the standard practice of writing <code>if __name__ == '__main__': main()</code> at the end of the code.</p>

<p>You can combine the two <code>import</code> statements into one, since <code>Image</code> and <code>ImageDraw</code> are both being imported from the same module.</p>

<p>It should be easier to tell that the color triples represent dark green and light green.  A comment would work.  In my solution below, I've opted to use explanatory variables.  Furthermore, the colors should be specified in a more obvious place, rather than buried in some obscure place in the code.</p>

<p>In Python, it is usually possible to find a more elegant way to building a list than by repeatedly <code>.append()</code>ing.  Below, I construct <code>carpets</code> using a generator, and <code>durations</code> using the <code>*</code> operator.</p>

<p>You know that all of the coordinates should be integers.  Use integer division (<code>//</code>) rather than floating-point division (<code>/</code>) wherever possible.</p>

<p>You can use <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer"><code>itertools.product()</code></a> to avoid nested <code>for</code> loops for <code>x</code> and <code>y</code>.</p>

<p>To split a list into the first element and subsequent elements, you can write <code>first_image, *other_images = images</code>.</p>

<h2>Suggested solution</h2>

<pre><code>from itertools import product
from PIL import Image, ImageDraw

def save_animated_gif(filename, images, durations):
    """
    Save images as frames of an animated GIF.  Durations should specify the
    milliseconds to display each frame, and should be of the same length as
    images.
    """
    # https://pillow.readthedocs.io/en/latest/handbook/image-file-formats.html#saving
    first_image, *other_images = images
    first_image.save(filename, save_all=True, append_images=other_images, duration=durations, loop=0)

def punch_hole(draw, x, y, section_size, hole_color):
    """
    For a square with a corner at (x, y) and sides of length section_size,
    divide it into 9 tiles, and fill the center tile with hole_color.
    """
    corner = (x + section_size // 3, y + section_size // 3)
    # -1 necessary due to https://github.com/python-pillow/Pillow/issues/3597
    opposite_corner = (x + section_size * 2//3 - 1, y + section_size * 2//3 - 1)
    draw.rectangle((corner, opposite_corner), fill=hole_color)

def make_carpets(n, carpet_color, hole_color):
    """
    Generate n PIL Images, each of Sierpiński's carpet with increasing levels
    of detail.
    """
    image_size = 3**n
    carpet = Image.new("RGBA", (image_size, image_size), carpet_color)
    yield carpet
    for section_size in (3**i for i in range(n, 1, -1)):
        carpet = carpet.copy()
        draw = ImageDraw.Draw(carpet)
        for x, y in product(range(0, image_size, section_size), repeat=2):
            punch_hole(draw, x, y, section_size, hole_color)
        yield carpet

def main():
    N = 7
    DARK_GREEN = (5, 60, 20)
    LIGHT_GREEN = (5, 205, 65)

    carpets = make_carpets(N, carpet_color=DARK_GREEN, hole_color=LIGHT_GREEN)
    durations = [1200] * N              # 1200ms per frame, except...
    durations[0] //= 2                  # first frame is shorter
    durations[-1] *= 4                  # final frame is longer

    save_animated_gif("Sierpiński's carpet.gif", carpets, durations)

if __name__ == '__main__':
    main()
</code></pre>

<h2>Alternative calculations</h2>

<p>In the suggested solution above, I've written <code>punch_hole()</code> to be similar to your <code>make_pattern()</code>, in that they are both responsible for rendering a square of size <code>section_size</code>.  However, the arithmetic can be simplified by specifying the size of the center hole instead, so that no division is necessary.</p>

<pre><code>def draw_square(draw, x, y, size, color):
    """
    Fill a square with one corner at (x, y) with the specified color.
    """
    # -1 necessary due to https://github.com/python-pillow/Pillow/issues/3597
    draw.rectangle((x, y), (x + size - 1, y + size - 1)), fill=color)

def make_carpets(n, carpet_color, hole_color):
    """
    Generate n PIL Images, each of Sierpiński's carpet with increasing levels
    of detail.
    """
    image_size = 3**n
    carpet = Image.new("RGBA", (image_size, image_size), carpet_color)
    for hole_size in (3**i for i in range(n, 0, -1)):
        draw = ImageDraw.Draw(carpet)
        for x, y in product(range(hole_size, image_size, 3 * hole_size), repeat=2):
            draw_square(draw, x, y, hole_size, hole_color)
        yield carpet
        carpet = carpet.copy()
</code></pre>
    </div>