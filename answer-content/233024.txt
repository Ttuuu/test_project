<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I must say, I don't find your method to be very scalable because every time you want to add an additional column filter, you will need to add another function argument. Furthermore, what happens when you want to express a different sorting direction or entertain a more sophisticated sorting algorithm with multiole columns? Right now you have four arguments:</p>

<pre><code>public function filterContacts($user_id, $group, $email, $phone) {
</code></pre>

<p>This is relatively inflexible. </p>

<p>In the future, if you want to add <code>$status</code>, <code>$mobile</code>, <code>$state</code>, <code>$shoeSize</code>, <code>$bloodType</code>, <code>$birthYear</code> ...you get my point... your method declaration will be threatening to exceed (if not blowing out) <a href="https://www.php-fig.org/psr/psr-12/" rel="nofollow noreferrer">the recommended line width limits</a>.</p>

<p>What I recommend is that you design your method <em>now</em> to embrace the possibility of change (so that you won't need to do a major refactor when it is much, much bigger).</p>

<pre><code>public function getContacts($filterBy = [], $orderBy = []) {
    ...
}
</code></pre>

<p>Then before your controller calls this function, you determine which qualifying filters and sorting settings are to be passed in and you contruct two strictly formatted arrays which will be consumed by the new model method.</p>

<p>The advantage of setting default values in the method declaration is that you can request a full table dump if you pass no arguments from the controller or you can send <code>$filterBy</code> and omit <code>$orderBy</code> and everything ticks along smoothly with no unnecessary script bloat.</p>

<p>Initially, you may want a simple associative array to port this data, but as your method requirement become more articulate, you may need to develop a multidimensional array structure -- mercifully, I'll avoid dragging you down that rabbit hole for now.</p>

<p>As for the guts of the new method, for utility (until you have a compelling reason to specifically name the result set columns or you need to JOIN tables), just use <code>SELECT *</code> and <code>FROM contacts</code>.</p>

<p>Then implement a battery of checks as you traverse your filtering array on the key (column reference) - value (filtering data value for the column) pairs and insert <code>?</code> placeholders into the sql statement and build a flat array of parameters to be fed into the <code>execute()</code> call (no need for bind calls).</p>
    </div>