<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>General Observations</h2>
<p>I see a lot of good programming practices followed here already, keep up the good work.</p>
<p>Most of the functions are small and follow the Single Responsibility Principle.</p>
<h2>Use Library Functions When You Can</h2>
<p>The function <code>getl()</code> can be implemented using 2 standard C library functions, <a href="http://www.cplusplus.com/reference/cstdio/fgets/" rel="noreferrer">fgets</a> and <a href="http://www.cplusplus.com/reference/cstring/strrchr" rel="noreferrer">strrchr</a>.</p>
<p>The <code>fgets()</code> function inputs an entire line of characters at a time, rather than using character input, and the <code>strrchr()</code> will allow you to find the <code>\n</code> character and replace it.</p>
<h2>DRY Code</h2>
<p>There is a programming principle called the <a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself" rel="noreferrer">Don't Repeat Yourself Principle</a> sometimes referred to as DRY code. If you find yourself repeating the same code multiple times it is better to encapsulate it in a function. If it is possible to loop through the code that can reduce repetition as well.</p>
<p>The repetition occurs in the function <code>int minimax(int l_board[], int depth, int maximising)</code> :</p>
<pre><code>    if (maximising) {
        //Its AI's Turn so it has to maximise
        int val = -100;
        int legalMovesArr[9];
        legalMoves(l_board, legalMovesArr);
        for (int i = 0; i &lt; 9; i++) {
            if (legalMovesArr[i]) {
                int tempBoard[9];
                copyBoard(l_board, tempBoard);
                putInBoard(tempBoard, i, X);
                val = max(minimax(tempBoard, depth - 1, 0), val);
            }
        }
        return val;
    }
    else {
        int val = 100;
        int legalMovesArr[9];
        legalMoves(l_board, legalMovesArr);
        for (int i = 0; i &lt; 9; i++) {
            if (legalMovesArr[i]) {
                int tempBoard[9];
                copyBoard(l_board, tempBoard);
                putInBoard(tempBoard, i, O);
                val = min(minimax(tempBoard, depth - 1, 1), val);
            }
        }
</code></pre>
<p>This repeating code could be it's own function.</p>
<p>The repeating code also makes the function too complex.</p>
<h2>Complexity</h2>
<p>The complexity of the function <code>minimax()</code> was mentioned above, the function <code>main()</code> is also too complex (does too much). As programs grow in size the use of <code>main()</code> should be limited to calling functions that parse the command line, calling functions that set up for processing, calling functions that execute the desired function of the program, and calling functions to clean up after the main portion of the program.</p>
<p>There is also a programming principle called the Single Responsibility Principle that applies here. The <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" rel="noreferrer">Single Responsibility Principle</a> states:</p>
<blockquote>
<p>that every module, class, or function should have responsibility over a single part of the functionality provided by the software, and that responsibility should be entirely encapsulated by that module, class or function.</p>
</blockquote>
<p>The entire <code>while (!gameOn)</code> loop should be within its own function.</p>
<h2>Avoid Global Variables</h2>
<p>It is very difficult to read, write, debug and maintain programs that use global variables. Global variables can be modified by any function within the program and therefore require each function to be examined before making changes in the code. In C and C++ global variables impact the namespace and they can cause linking errors if they are defined in multiple files. The <a href="https://stackoverflow.com/questions/484635/are-global-variables-bad">answers in this stackoverflow question</a> provide a fuller explanation.</p>
<h2>Update Answer to comment</h2>
<pre><code>void game_loops()
{
    if (turn == O) {
        printf("%c's turn: ", turn == X ? 'X' : 'O');
        char buffer[MAX_SIZE];
        getl(buffer, MAX_SIZE);
        int num = bufferToNum(buffer);
        while (num &lt;= 0 || num &gt; 9) {
            printf("Please enter an integer between 1 and 9: ");
            getl(buffer, MAX_SIZE);
            num = bufferToNum(buffer);
        }
        if (putInBoard(board, num - 1, turn)) {
            ;
        }
        else {
            while (!putInBoard(board, num - 1, turn)) {
                printf("Something already exists, Please enter a new number: ");
                getl(buffer, MAX_SIZE);
                num = bufferToNum(buffer);
            }
        }
    }
    else {
        putInBoard(board, ai(board, 8), X);
        printf("Calculated %d variations\n", variations);
        variations = 0;
    }

    printBoard();
    alternateTurn();
}

int main() {
    printBoard();

    int gs = 1;
    while (gs == 1) {
        game_loops();
        gs = gameState(board);
    }

    switch (gs)
    {
    case X:
        printf("X won!");
        break;

    case O:
        printf("O won!");
        break;

    default:
        printf("Draw!");
        break;
    }

    return 0;
}
</code></pre>
    </div>