<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>var postResponse = _client.SendAsync(httpRequest2);
var postResult = postResponse.Result.Content.ReadAsStringAsync().Result;
</code></pre>
<p><em>Never</em> use tasks like this, it leads to dead-locks very easily. Plus it's wasteful, you have an entire framework (<code>HttpClient</code>) designed to keep your application responsive, and instead you freeze it for no good reason.</p>
<ol>
<li>Make your <code>Login</code> function <code>async</code> and have it return a <code>Task&lt;bool&gt;</code> (or even better, an enum that describes exactly why it failed if it did)</li>
<li>Properly <code>await</code> those <code>async</code> calls (<code>SendAsync</code> and <code>ReadAsStringAsync</code>)</li>
<li>Change <code>Login</code> to <code>LoginAsync</code> to follow the framework naming conventions</li>
<li>Get rid of those random <code>MessageBox</code> calls in your class, they do nothing but prevent unit testing and introduce WinForms dependencies in what could otherwise be a nice service class.</li>
</ol>
    </div>