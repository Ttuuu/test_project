<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You shouldn't <code>#include "SuffixTree.h"</code> in <code>SuffixTree.inl</code>. Since the <code>.inl</code> file is included in the header below the class definitions, they will be available to the implementation code. Including the header again would be a circular dependency.</p>

<hr>

<p>Your compiler should give you various warnings about converting from <code>std::size_t</code> to <code>int</code>, and comparing signed / unsigned numbers.</p>

<p>These can be fixed by changing the length and size arguments / members in the <code>Node</code> class to be <code>size_type</code>.</p>

<p>Using <code>-1</code> for invalid values should still work ok.</p>

<hr>

<p><strong><code>BiMap</code>:</strong></p>

<pre><code>T2 retrieve(const T1&amp; key);
T1 retrieve(const T2&amp; key);
</code></pre>

<p>It would be better for these functions to have different names.</p>

<ul>
<li><p>It's much more difficult to understand the code because we have to look at the type of the key being passed in to see which value is being retrieved.</p></li>
<li><p>If <code>T1</code> and <code>T2</code> happen to be the same type this won't compile due to ambiguity.</p></li>
</ul>

<p>It looks like we only use the first version of <code>retrieve</code> anyway. Do we really need the bidirectional look up?</p>

<hr>

<p>Does <code>generateKeys()</code> work if called a second time? If not, it would be best to use the <code>BiMap</code> constructor to take the text and pass it to <code>generateKeys()</code>, and make <code>generateKeys()</code> private.</p>

<p><code>insert()</code> could also be private, since it doesn't look like it's intended to be called from outside the class.</p>

<hr>

<pre><code>template &lt;typename T1, typename T2&gt;
trie::size_type trie::BiMap&lt;T1, T2&gt;::getSize()
{
    return map1_.size() | map2_.size();
}
</code></pre>

<p>Uh... This doesn't seem correct. If the intention is to return the maximum, we could use <code>std::max(map1_.size(), map2_.size())</code>? It would be reasonable to <code>assert</code> that the values are the same, and just return either of them.</p>

<hr>

<pre><code>template &lt;typename T1, typename T2&gt;
void trie::BiMap&lt;T1, T2&gt;::print()
{
    for (typename std::map&lt;T1, T2*&gt;::const_iterator itr = map1_.cbegin(), end = map1_.cend(); itr != end; ++itr)
        std::cout &lt;&lt; itr-&gt;first &lt;&lt; " -&gt; " &lt;&lt; *itr-&gt;second &lt;&lt; std::endl;
}
</code></pre>

<p>A range-based for loop with <code>auto</code> would be much clearer:</p>

<pre><code>for (auto const&amp; i : map1_)
    std::cout &lt;&lt; i.first &lt;&lt; " -&gt; " &lt;&lt; i.second &lt;&lt; std::endl;
</code></pre>

<hr>

<p>Member functions that don't change member state should be <code>const</code>:</p>

<pre><code>    T2 retrieve(const T1&amp; key) const;
    T1 retrieve(const T2&amp; key) const;
    size_type getSize() const;
    void print() const;
</code></pre>

<hr>

<p><strong><code>Node</code>:</strong></p>

<pre><code>    size_type id_;                                  // represents the position in text where suffix represented by this node begins
    int length_;                                    // length of the substring encapsulated by the given node (only for internal nodes). -1 means it's a leaf.
</code></pre>

<p>IIRC, the special character at the end of the string (<code>~</code>) is a means of marking the end nodes. If we use a length placeholder of <code>-1</code> to mark the end nodes, I don't think we need the placeholder character (or vice versa).</p>

<p>Both <code>id_</code> and <code>length_</code> seem to be serving dual purposes. For an external node, <code>id_</code> is the suffix start index, but for an internal node it doesn't mean anything. For an external node, <code>length_</code> is <code>-1</code>, but for an internal node, it's the string length for this segment.</p>

<p>This is quite complicated. It would be neater to <em>always</em> store the relevant indices for the string segment (and probably easier to use the suffix tree for various purposes later).</p>

<p>We can add a <code>std::optional&lt;size_type&gt;</code> member to store the suffix index. If this is set, we know we're at an end node (so we avoid the need for the special character or the alternate meaning for <code>length_</code>).</p>

<hr>

<p><strong><code>SuffixTree</code>:</strong></p>

<pre><code>SuffixTree(const std::string&amp; text = "");
SuffixTree(const std::ifstream&amp; file);
</code></pre>

<p>We should read input from the file outside of the <code>SuffixTree</code> class and call the other constructor. The <code>SuffixTree</code> shouldn't care about file input.</p>

<p>The default value for <code>text</code> seems rather unnecessary.</p>

<hr>

<pre><code>trie::SuffixTree Tree("banana~");
Tree.constructTree();
</code></pre>

<p>We can call <code>constructTree</code> in the constructor.</p>

<hr>

<pre><code>root_ = new Node(size_type(-1), 0, map_.getSize());
</code></pre>

<p>We should use <code>std::unique_ptr</code>s to store the nodes, rather than doing manual memory management.</p>

<hr>

<pre><code>    size_type rankJ = map_.retrieve(text_[j]);
    temp-&gt;children_[rankJ] = ...
</code></pre>

<p>We could abstract this (finding a relevant child node by character) into a separate helper function (e.g. <code>getChild(temp, text_[j]) = ...</code>).</p>

<hr>

<p>Several functions could be private, as they can't sensibly be called from outside the class:</p>

<pre><code>    Node* insert(Node* current, size_type id, int length = 0);
    void constructTree();
    void printSuffixes(Node* current);              // called by above function
    void printInorder(Node* current);               // called by above function
    void deleteTree(Node* current);
</code></pre>

<p>Again, any member functions that don't change member state (e.g. printing) should be <code>const</code>.</p>

<hr>

<p>For the <code>insert</code> function, if we have C++14, we can use <a href="https://en.cppreference.com/w/cpp/algorithm/mismatch" rel="nofollow noreferrer"><code>std::mismatch</code></a> to find the point at which the inserted string differs from the node. (It's awkward to use before C++14 because we had to depend on the second range provided being shorter than the first).</p>

<hr>
    </div>