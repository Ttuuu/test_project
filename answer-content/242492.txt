<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In this case, I think that you can simplify the algorithm quite a bit.  The compound numbers are simply the left value subtracted from the right value.  This can easily be calculated on the fly.  This cuts down the <code>HashMap</code> to only 7 entries and eliminates the <code>edge</code>variable. Basically it could look like this:</p>

<pre><code>final Map&lt;Character,Integer&gt; values = Map.of(
    'I',1,
    'V',5,
    'X',10,
    'L',50,
    'C',100,
    'D',500,
    'M',1000
);

public int romanToInt(String input){       
    int retVal = 0;
    int limit = input.length();
    int prevVal = 0;
    int nextVal = 0;
    for(int i = limit - 1;i &gt;= 0; --i){
        char nextChar = input.charAt(i);
        prevVal = nextVal;
        nextVal = values.get(nextChar);
        if(nextVal &lt; prevVal){
            retVal -= nextVal;
        }else{
            retVal += nextVal;
        }
    }
    return retVal;
}
</code></pre>

<p>Ideally there would be validation checking required , however in this instance, the input is guaranteed to be valid.</p>

<p>Since there is only one loop and the <code>Map</code> lookup should be O(1).  The complexity for this should be O(n) the length of the string.</p>
    </div>