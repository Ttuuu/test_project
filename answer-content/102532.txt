<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Sometimes, when your code is very slow, you just need a new algorithm. <a href="https://codereview.stackexchange.com/a/102513/31292">SuperBiasedMan</a>'s solution makes many good improvements on your code (taking it from 12.4s on my box -- after removing the unnecessary <code>print</code>s -- to just 5.4s). But we can do better. The issue is, we're still checking every odd number in a row and basically learning nothing from all our previous work. The <a href="https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes" rel="nofollow noreferrer">Sieve of Eratosthenes</a> is a very fast algorithm for computing a large number of primes. The idea is simple: we start with all numbers initially as prime candidates, and we iterate through them. If we find a number still marked prime, we mark all of its multiples as not prime. Repeat until done. </p>

<p>The only issue is that we need to store things in memory. For 10,000 primes though, that's not so bad. There's a well known <a href="https://en.wikipedia.org/wiki/Prime_number_theorem" rel="nofollow noreferrer">estimate</a> for the number of primes: <code>p_n ~ n log(n)</code>. It's a very good estimate such that the ratio is pretty close to <code>1</code>, so we can start with twice as much memory for good measure:</p>

<pre><code>def primes_sieve(n):
    p_n = int(2 * n * math.log(n))       # over-estimate p_n
    sieve = [True] * p_n                 # everything is prime to start
    count = 0
</code></pre>

<p>Then we start at <code>2</code>, and start crossing off numbers</p>

<pre><code>    for i in range(2, p_n):
        if sieve[i]:                       # still prime?
            count += 1                     # count it!
            if count == n:                 # done!
                return i
            for j in range(2*i, p_n, i):   # cross off all multiples of i
                sieve[j] = False
</code></pre>

<p>And that's it. This takes 0.1 seconds. The reasoning is that we're taking advantage of past work. Once we know that, for instance, <code>11</code> is prime - we don't have to do any more work for 121 or 407 or whatever. They're already crossed off!</p>

<p>The time difference grows as we go up in count. For the 100,001st prime, using a sieve gives you the answer in 0.8s whereas a naive loop takes just under 9 minutes (8:53.5).</p>
    </div>