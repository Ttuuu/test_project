<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are general refactoring lessons to be learned here. First, if you exit in an <code>if</code> statement, you don't need what follows to be the opposite of that <code>if</code>, because you can only reach that lower code if the original condition is falsy [sic]. The advantage is later code is less deeply nested. Similarly, the ending simplifies. Never return <code>True</code> if something and <code>False</code> otherwise, just return that something (cast to a <code>bool</code> if necessary). This insight simplifies your original logic for <code>balanced</code> to</p>

<pre><code>def balanced(lst):
    if len(lst) % 2 != 0: return False
    count_1 = 0
    count_2 = 0
    for item in lst:
        if item % 2 == 0: count_1 += 1
        if item % 2 != 0: count_2 += 1
    return count_1 == count_2
</code></pre>

<p>(Note the guard clause meant we no longer needed to cache what you called <code>n</code>.) While the remaining pair of if statements could be an if/else instead, at this point it's worth simplifying with the mathematical insight others mentioned:</p>

<pre><code>def balanced(lst):
    if len(lst) % 2: return False
    evens_minus_odds = 0
    for item in lst:
        evens_minus_odds += 1 if item % 2 == 0 else -1
    return evens_minus_odds == 0
</code></pre>

<p>Suddenly, you can't help but make it declarative instead of imperative:</p>

<pre><code>def balanced(lst):
    return len(lst) % 2 == 0 and sum(1 if item % 2 == 0 else -1 for item in lst) == 0
</code></pre>

<p>Which is basically what everyone else got. Well, not everyone even bothered including the first check: it saves time for odd-length lists, but that's premature optimization because it'd be neater still to write</p>

<pre><code>def balanced(lst):
    return sum(1 if item % 2 == 0 else -1 for item in lst) == 0
</code></pre>

<p>What have we learned?</p>

<ul>
<li>Long imperative code is often crying out to become short declarative code;</li>
<li>Refactoring what little you can at first will gradually give you new ideas;</li>
<li>Boolean logic cries out for simplification. It just so happens your code had no bugs, but the anti-if campaign exists because many aren't so lucky. I'm a big advocate of making code more declarative, in part because it makes it harder to create, or at least miss, certain bugs. </li>
</ul>
    </div>