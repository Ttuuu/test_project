<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Factories/DI</h1>
<p>Split into modules or something. For now OK, but if your app gets bigger and your single factory depends on everything it becomes rather hard to maintain. Could be as easy as adding extensions to your Factory protocol for every module. You still have everything in the same class, but your source code is more separated.</p>
<p>makeInitialView, makeDetailView: Get rid of the viewModel parameter as it is not used. You might even consider directly creating your views in the view controller as they have no other dependencies.</p>
<h1>Coordinators</h1>
<p>You should split your Coordinator protocol into a abstract coordinator protocol and a protocol for the project coordinator. Like this each child coordinator you add to your ProjectCoordinator also needs to have a moveToDetail() method. This is probably not what you want.</p>
<p>Passing the factory to the root coordinator is a good practice. Passing it on to the view controllers from there is not a good idea though. Better to have the factory create the View Controller itself. So you may want to add an <code>makeInitialViewController(coordinator: Coordinator) -&gt; InitialViewController</code> method.</p>
<h1>View Controllers</h1>
<p>As I said, they should not know about the factory. The properties for their dependencies (coordinator and factory) should not be optional. You cannot construct the ViewController without them (the init-parameters are not optional) so there is no need to deal with with the fact that they are optional.</p>
<p>The exception might be the Coordinator, but it also should be weak. Currently you have a strong retain cycle here (ProjectCoordinator (1) -&gt; NavigationController -&gt; InitialViewController -&gt; ProjectCoordinator (1)). This does not matter, there will be no memory leak as the cycle will be broken at when the view controller is popped from the navigation stack. You can arrange this for every coordinator and get away with the cycles, but long-term it will be easier to just always use weak references from the view controller back to its coordinator. Its easy to forget breaking that cycle.</p>
<p>You deal with the optionals by force-unwrapping (which in your case should be fine), but this makes the code really hard to understand. Every time you see the <code>!</code> you must mentally check whether this is OK or a crashing bug waiting to happen. If you are not careful and accept them as okay it is only a matter of time until you create a crash. If there is no choice but to force-unwrap something you should always add a comment that explains why it is not a problem.</p>
<p>To support the lazy creation of the view model you might want to inject a <code>Provider</code> for your view model instead of the factory. This could be as simple as a closure: <code>typealias Provider&lt;T&gt; = () -&gt; T</code></p>
<h1>Networking</h1>
<p>You should add <code>[weak self]</code> in your callback closure. If the user navigates away from your screen before the request finishes you shouldnâ€™t do any extra work to set up views that are not visible anyways. It would be even better to cancel the request when the user navigates away. No need to waste bandwidth for data the user is not going to see. But this depends on your exact flow and use case.</p>
<p>Small things:</p>
<p>Not really important, but here are some small things that should be fixed:</p>
<p>You shouldnt create a NSError() like this. Even shows this message in the console:</p>
<pre><code>-[NSError init] called; this results in an invalid NSError instance. It will raise an exception in a future release. Please call errorWithDomain:code:userInfo: or initWithDomain:code:userInfo:. This message shown only once.
</code></pre>
<p>Better just return <code>nil</code> in <code>required init?(coder: NSCoder)</code> than calling fatalError. You also can mark them as unavailable <code>@available(*, unavailable)</code> so you dont ahve to deal with that in subclasses.</p>
<p>Activate all constraints at the same time using NSLayoutConstraint.activate([]) instead of activating each seperately.</p>
<p>Remove your override-Methods if they do nothing but call super. Its just unneccesary clutter.</p>
    </div>