<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are a few ways to speed up your division.  First, note that because <code>rem</code> is declared within the <code>while</code> loop, it's both constructed and destroyed every loop iteration.  That's not really necessary, so you could instead declare it outside the loop and simply assign a new value within the loop each time.  Also by changing the line from <code>num = num / 10</code> to <code>num /= 10</code>, you avoid creating and destroying yet another temporary.  Applying both of those saves a little time, but it's still slower than the string method because you're essentially performing the division twice (once for <code>num % 10</code> and again for <code>num / 10</code>).</p>

<p>The key is to do only a single division per loop, but you'll have to resort to using the underlying C function since it's not exposed to the C++ interface. Fortunately, it's simple to do so:</p>

<pre><code>unsigned long digit;
while(num != 0) {
    digit = mpz_tdiv_q_ui(num.get_mpz_t(), num.get_mpz_t(), 10);
    sum += digit;
    pro *= digit;
}
</code></pre>

<p>On my machine this is slightly faster than the string method, and probably uses a little less memory.</p>

<h1>Update:</h1>

<p>Because the speed of that code relative to the string method varies based on what compiler optimizations are used, it's not necessarily always faster.  This version uses low-level GMP calls for more speed:</p>

<pre><code>__mpz_struct *q = num.get_mpz_t();
while(*(q-&gt;_mp_d) != 0) {
    auto digit = mpn_divrem_1 (q-&gt;_mp_d, (mp_size_t) 0, 
            q-&gt;_mp_d, q-&gt;_mp_size, (mp_limb_t) 10);
    sum += digit;
    pro *= digit;
}
</code></pre>

<p>This makes a couple of assumptions that are important.  First, it assumes that <code>num &gt; 0</code> and it dives deep into the internal structure of <code>__mpz_struct</code> so it will not be very durable to changes in GMP, should they decide to change the underlying representation of numbers.  However, with this code, I find that it's a bit faster on my machine than the string method, both with and without <code>-O3</code> optimizations.</p>

<p>Also, note that within your range of integers, the sum of digits will always fit within a <code>long int</code> which will save time, but could equally be applied to the string method.</p>
    </div>