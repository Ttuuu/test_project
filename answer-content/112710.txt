<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>The difference in the two branches of that <code>if</code> statement is just the <code>Farwell</code> so only this generation is what should happen inisde the <code>if</code>.  </p></li>
<li><p>the name of the variable <code>i</code> is not choosen very well if you later on need a comment to describe what it should represent.  </p></li>
<li><p>The <code>GenerateMessage()</code> method is doing more than its name implies. It is generating and outputting the message. This is also violating the single responsibility principle which means that each method should have only one responsibility. So let the method return a string which then can be used in the <code>Main()</code>.  </p></li>
<li><p>you shouldn't create each time a new <code>Random</code> but reuse an existing.  </p></li>
<li><p>if the range out of which the random numbers should be generated starts at <code>0</code> you should use the overloaded <a href="https://msdn.microsoft.com/en-us/library/zd1bc8e5%28v=vs.110%29.aspx" rel="nofollow"><code>Next()</code></a> method which only takes the exlusive upper bound as a parameter.  </p></li>
<li><p>by using a <code>List&lt;string&gt;</code> the multiple string variables won't be needed and you can take advantage of the <a href="https://msdn.microsoft.com/en-us/library/system.string.join%28v=vs.110%29.aspx" rel="nofollow"><code>string.Join()</code></a> method  </p></li>
</ul>



<pre><code>private static Random random = new Random();
private static string GenerateMessage()
{
    IList&lt;string&gt; subMessages = new List&lt;string&gt;(4);   
    subMessages.Add(Greetings[random.Next(Greetings.Length)]);
    subMessages.Add(Compliments[random.Next(Compliments.Length)]);
    subMessages.Add(Garments[random.Next(Garments.Length)]);

    int chance = random.Next(1, 11);
    if (chance &lt; 3)
    {
        subMessages.Add(Farewells[new Random().Next(Farewells.Length)]);
    }

    return string.Join(" ", subMessages);
}
</code></pre>

<p>Edit based on the comment </p>

<blockquote>
  <p>Why do you have a <code>4</code> in the parentheses in this line: <code>IList&lt;string&gt; subMessages = new List&lt;string&gt;(4);</code> I removed the <code>4</code> to see if the code would still work and it did... </p>
</blockquote>

<p>The <code>4</code> is pretty bad code style if another programmer needs to ask. Thats what a magic number is which I should have extracted to a meaningful constant like so  </p>

<pre><code>private static readonly int maxMessages = 4;  
</code></pre>

<p>and then used it like so  </p>

<pre><code>IList&lt;string&gt; subMessages = new List&lt;string&gt;(maxMessages);  
</code></pre>

<p>now you know what it is, but you are still missing what is for. That is shown if you take a look at the documentation for this overloaded constructor of the <code>List&lt;T&gt;</code> you will see that this is the initial capacity of the <code>List&lt;T&gt;</code> which is explained more in the <a href="https://msdn.microsoft.com/en-us/library/dw8e0z9z(v=vs.110).aspx#Anchor_2" rel="nofollow"><code>Remarks</code></a> section.  </p>

<blockquote>
  <p>The capacity of a List is the number of elements that the List can hold. As elements are added to a List, the capacity is automatically increased as required by reallocating the internal array.</p>
</blockquote>

<p>And the reason why I used it is shown here  </p>

<blockquote>
  <p>If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the List.</p>
</blockquote>
    </div>