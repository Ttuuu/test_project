<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Apart from that I don't quite get the point of your <em>game</em>, there are a few things that caught my eye:</p>

<hr>

<p><strong>1. User input</strong><br>
Your user input system is not particularly intuitive to use. Without the source code the user has virtually no way to see what inputs are acceptable at the moment or what your game does.</p>

<p><strong>2. Documentation</strong><br>
Your functions are documented like this at the moment:</p>

<pre class="lang-py prettyprint-override"><code>#determines reload time
def reloading(reload_time):
    ...
</code></pre>

<p>Enter the official <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">Style Guide for Python Code</a> (aka PEP8)! There, the official recommendation on how to document function is to use <a href="https://www.python.org/dev/peps/pep-0008/#documentation-strings" rel="nofollow noreferrer"><code>"""documentation strings"""</code></a> like so:</p>

<pre><code>def reloading(reload_time):
    """determines reload time"""
    ...
</code></pre>

<p>Documentation written in that style helps Python's built-in <code>help(...)</code> function as well as basically all Python IDEs to pick it up. Future-you, and depending on the path you choose also others, will thank you a lot if you learn this early and stick to it.</p>

<p><strong>3. Start</strong><br>
The general notes on user input apply here. But apart from that, there is also a lot of repeated code here. You call <code>firearm.upper()</code> on every branch of the <code>if</code> statement, when a simple <code>firearm = input('CHOOSE YOUR GUN (ENTER to exit)\n&gt; ').upper()</code> could do that in one place.</p>

<p>It's also common practice to wrap the code that is supposed to be run in a scripty-manner in <code>if __name__ == "__main__":</code>. This basically tells the Python interpreter (and also people looking at your code) that this part is meant to be run as script and is not part of the code that's eventually going to  be imported into some other script. See also the <a href="https://docs.python.org/3/library/__main__.html" rel="nofollow noreferrer">official documentation</a> or <a href="https://stackoverflow.com/q/419163/5682996">this Stack Overflow post</a> for further details.</p>

<pre><code>if __name__ == "__main__":
    # This makes sure you game will not start if you ever import the file
    start()
</code></pre>

<p><code>sys.exit()</code> is also a bit uncommon here but we will touch on that in a moment.</p>

<p><strong>4. Reloading</strong><br>
Slow reloading is quite a killer (pun intended). Especially if it looks like nothing is happening. When I did a test run with your game on my Windows laptop, nothing happened after <code>Reloading</code> appeared on the console until the "loading" actually finished. This was what I expected, since at least on Windows <code>print</code> does not automatically flush the buffer so you will see nothing in the reload cycle. Using <code>print('.', end='', flush=True)</code> fixes that.</p>

<p><strong>5. Gun play</strong>
<code>gun(...)</code> is were the "fun" starts. This is actually your main gameplay, so <code>gun</code> is likely not a really good name. Often methods have some kind of action description in their name like <code>fire_gun(...)</code> or something similar. Nouns like <code>gun</code> are usually only used for class names.</p>

<p>Since we are alread nit-picking about names, let's look at the paramters:</p>

<ul>
<li><code>ROUNDS</code>: all uppercase names are <a href="https://www.python.org/dev/peps/pep-0008/#constants" rel="nofollow noreferrer">by convention usually reserved for global, odule, or class level constant values</a>. Here, the capitalization seems to be used to disambiguate the value from the internal variable <code>rounds</code>. But why not choose a name that seems more appropriate for what the value actually represents like <code>magazine_capacity</code>?</li>
<li><code>left</code> is very generic here and leaves room for interpretation. <code>total_rounds</code> or <code>reserve_capacity</code> sound like more appropriate names in this context here.</li>
<li><code>fire_rate</code> is in its own right actually quite okay, although the variable name contradicts the way you use it. A <em>rate</em> is usually defined as something per amount of time, like shots per seconds. In your case it's actually used the other way round as time between two shots. So consider changing  either of them to fit the other.</li>
<li><code>the_reload</code>: Why this name? Why not <code>time_to_reload</code>?</li>
</ul>

<p>Now that we have sorted this out, let's look at the control flow: On the top-most level you repeat the fire-till-empty-then-reload cycly until you are completely out of ammo. That's fine. There is a little bit of repeated code in <code>rounds == 0</code> where <code>print('\n{}/{}'.format(rounds, total_rounds))</code> could be used just once outside the inner <code>if</code> statement</p>

<pre><code>elif rounds == 0:
    if total_rounds &lt;= magazine_capacity:
        # if bullets left is less than the magazine
        ...
    else:
        ...
    print('\n{}/{}'.format(rounds, total_rounds))
</code></pre>

<p>The first case with <code>if rounds == 0 and total_rounds == 0:</code> is also fine. With <code>elif shoot.upper() == 'DONE':</code> things start to get a little bit troubling. The code in this block is as follows:</p>

<pre><code>elif shoot.upper() == 'DONE':
    sure = input('Are you sure?\n&gt; ')
    if sure.lower() == 'y':
        start()
</code></pre>

<p>Since this basically has nothing to do with the gameplay, the code breaks the single responsibility principle which is often recommended when thinking about/designing functions. This a higher level gameplay element and should better be placed in <code>start()</code>. Doing this will also help you to get rid of the yet to surface error caused by exceeding the maximum recursion depth. You can get at that point if you get into that branch of the <code>if</code> statement over and over again, calling <code>start()</code>, which then in turn calls <code>gun(...)</code>, which then calls <code>start()</code> again, and so on and so forth, until the program crashes.</p>

<p>So how to do this in a better way?</p>

<pre><code>def fire_gun(magazine_capacity, reserve_capacity, fire_rate, time_to_reload):
    """parameters including the numerator/denominator, fire rate, and reload speed"""

    ...

    while rounds &gt; 0 or reserve_capacity &gt; 0:
        shoot = input()

        rounds -= 1
        print('{}/{}'.format(rounds, reserve_capacity))

        if rounds == 0 and reserve_capacity == 0:
            print('OUT OF AMMO')
            break
        elif shoot.upper() == 'DONE':
            sure = input('Are you sure?\n&gt; ')
            if sure.lower() == 'y':
                break
        elif rounds == 0:
            ...

        time.sleep(fire_rate)   # Faster!!


def start():
    while True:
        firearm = input('CHOOSE YOUR GUN (ENTER to exit)\n&gt; ').upper()

        if firearm == 'ASSAULT':
            fire_gun(40, 130, 0.1, 7)
        ...
        else:
            break
</code></pre>

<p>In this version there is no recursion and you come back to the "weapons menu" whenever you are out of ammo of the user chooses to quit before. No recursion, no recursion limit, no crash! Cool.</p>

<p><strong>6. Comments</strong><br>
You are using them wrong! Comments in source code are usually best used to explain <em>why</em> you are doing something, and not <em>what</em> you are doing, especially if it's quite obvious, like e.g.</p>

<pre><code>rounds -= 1
# decrement each time input is given
</code></pre>

<p>This is clear from the code. No need to waste a comment on this.</p>

<p>Sometimes you have to do a little bit more to make a comment unnecessary, e.g. there at</p>

<pre><code>if left &lt;= ROUNDS:
    ...
    #if bullets left is less than the magazine
</code></pre>

<p>If you stick to the naming recommendations from above this can become</p>

<pre><code>if reserve_capacity &lt;= magazine_capacity:
    ...
</code></pre>

<p>See? No need for that comment any more! The code is now self-explaining.</p>

<p>On a not-strictly Python-related note: you are the first person I get to know who somehow likes to stick their comments below the line they are commenting on. Most people I know (including me) would expect the comment to live on the line above or on the same line as the code that comments belongs to.</p>

<hr>

<p><strong>Advanced ideas</strong><br></p>

<p>You find that long <code>if</code> statement in <code>start()</code> cumbersome to read and hard to extend? You would like to extend your weapons locker with ease? You are willing to look into Python's magic box? Then read on.</p>

<p>Often this kind of long <code>if</code> statement can be transformed into something that's easier to maintain and extend using a Python <a href="https://docs.python.org/3/library/stdtypes.html#dict" rel="nofollow noreferrer">dictionary</a>. It a so called <em>mapping</em>, which maps a <em>key</em> to a <em>value</em>.</p>

<p>In your concrete example one could use something like this:</p>

<pre><code>def start():
    guns = {
        "ASSAULT": lambda: fire_gun(40, 130, 0.1, 7),
        "SHOTGUN": lambda: fire_gun(6, 30, 2, 12),
        ...   # much more guns here
    }

    while True:
        firearm = input('CHOOSE YOUR GUN (ENTER to exit)\n&gt; ').upper()

        try:
            guns[firearm]()
        except KeyError:
            break
</code></pre>

<p>The gun names are used as keys of the dictionary, this is quite obvious. Depending on your Python knowledge, you might also know something about <a href="https://www.w3schools.com/python/python_lambda.asp" rel="nofollow noreferrer"><code>lambda</code></a> expressions as well. If not, think of them as functions or whatevere you like that can be "called", but without a explicit name. That's how <code>guns[firearm]()</code> works: For a given key, say <code>"ASSAULT", the dictionary returns a lambda expression like</code>lambda: fire_gun(40, 130, 0.1, 7)<code>in our example. You could also assign this to a variable like</code>parameterized_version_of_fire_gun = guns[firearm]<code>. You can think of</code>parameterized_version_of_fire_gun<code>as a function at that moment that you would call like you call</code>reloading`, for example. If it helps you can also think of it as a "normal" Python function:</p>

<pre><code>def parameterized_version_of_fire_gun():
    fire_gun(40, 130, 0.1, 7)
</code></pre>

<p>So the next logical step is now to call <code>parameterized_version_of_fire_gun()</code> (← Note the opening and closing parenthesis).</p>

<p>As a bonus, this version would allow you to print <code>guns.keys()</code> to easily show the user all the possibilites to choose from.</p>
    </div>