<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here's the obligatory recursive version:</p>

<pre><code>def k_subset(s, k):
    if k == len(s):
        return (tuple([(x,) for x in s]),)
    k_subs = []
    for i in range(len(s)):
        partials = k_subset(s[:i] + s[i + 1:], k)
        for partial in partials:
            for p in range(len(partial)):
                k_subs.append(partial[:p] + (partial[p] + (s[i],),) + partial[p + 1:])
    return k_subs
</code></pre>

<p>This returns a bunch of duplicates which can be removed using</p>

<pre><code>def uniq_subsets(s):
    u = set()
    for x in s:
        t = []
        for y in x:
            y = list(y)
            y.sort()
            t.append(tuple(y))
        t.sort()
        u.add(tuple(t))
    return u
</code></pre>

<p>So the final product can be had with</p>

<pre><code>print uniq_subsets(k_subset([1, 2, 3, 4], 3))

set([
    ((1,), (2,), (3, 4)), 
    ((1,), (2, 4), (3,)), 
    ((1, 3), (2,), (4,)), 
    ((1, 4), (2,), (3,)), 
    ((1,), (2, 3), (4,)), 
    ((1, 2), (3,), (4,))
])
</code></pre>

<p>Wow, that's pretty bad and quite unpythonic. :(</p>

<p>Edit: Yes, I realize that reimplementing the problem doesn't help with reviewing the original solution. I was hoping to gain some insight on your solution by doing so. If it's utterly unhelpful, downvote and I'll remove the answer.</p>

<p>Edit 2: I removed the unnecessary second recursive call. It's shorter but still not very elegant.</p>
    </div>