<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your implementation, to me at least, doesn't seem correct. You need to remove adjacent duplicates, but looking at your last example, the sequence <code>acaaabbacdddd</code> completely removes the <code>b</code> and <code>d</code> characters from the slice. You're also using an awful lot of code to do a simple thing. What I'd do is quite simply this:</p>

<ul>
<li>Iterate over the slice from index 0 to the next to last character</li>
<li>For each character, iterate over the remainder of the slice (nested loop) until you find a character that doesn't equal the current index</li>
<li>For each character at the current position + 1 that matches the current one, remove it, as it's an adjacent duplicate.</li>
</ul>

<p>The code itself is quite simple:</p>

<pre><code>func dedup(s []string) []string {
    // iterate over all characters in slice except the last one
    for i := 0; i &lt; len(s)-1;i++ {
        // iterate over all the remaining characeters
        for j := i+1; j &lt; len(s); j++ {
            if s[i] != s[j] {
                break // this wasn't a duplicate, move on to the next char
            }
            // we found a duplicate!
            s = append(s[:i], s[j:]...)
        }
    }
    return s
}
</code></pre>

<p>Given an input like <code>[g e e k s f o r g e e g]</code>, the output of this is <code>[g e k s f o r g e g]</code></p>

<h2><a href="https://play.golang.org/p/7zTrb_nxnoQ" rel="nofollow noreferrer">Demo</a></h2>

<p>The only trickery here is this line: <code>s = append(s[:i], s[j:]...)</code>. What this effectively does is reassign the slice <code>s</code> to contain <code>i</code> values starting at 0 (so if <code>i</code> is 2, the slice will be <code>[g, e]</code>). The second part is creating a slice starting at <code>j</code>, until the end of <code>s</code>. Again, if <code>j</code> is 2, this slice will be all values starting at offset 2 until the end (<code>[e k s f o r g e e g]</code>).</p>

<p>So let's look at an actual example:</p>

<ul>
<li><code>i</code> == 1</li>
<li><code>j</code> == <code>i+1</code> (2)</li>
<li><code>s[i]</code> == <code>e</code>, <code>s[j] ==</code>e`</li>
</ul>

<p>We have a duplicate, so we'll reassign <code>s</code> like so:</p>

<pre><code> s = append(s[:1], s[2:]...)`
</code></pre>

<p>This means we're appending <code>[e k s f o r g e e g]</code> to <code>[g]</code>, removing the duplicate <code>e</code>. Job done.</p>

<hr>

<h3>Note:</h3>

<p>I've used <code>[]string</code> here, but it should go without saying that a slice of characters is probably best represented as <em>either</em> <code>[]byte</code> or <code>[]rune</code> (for full UTF-8 support). Regardless of the type you end up using, the code above will work with with any type that can be compared with the <code>==</code> operator</p>
    </div>