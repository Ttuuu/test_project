<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code uses menu technology from the 1980s. It is not user-friendly at all.</p>

<p>Instead of offering the user the choice of 1, 2, 3, 4, it is better to let the user choose the actions by naming them directly. As an example, see the following transcript, in which the lines starting with <code>&gt;</code> show the user input:</p>

<pre class="lang-none prettyprint-override"><code>Bank manager version 2020.1
Type 'help' to see the available commands.

&gt; help
available commands:
help
register account &lt;name&gt; &lt;balance&gt;
delete account &lt;account number&gt;
list accounts
transfer &lt;amount&gt; from &lt;source&gt; to &lt;target&gt;
quit

&gt; register account
usage: register account &lt;name&gt; &lt;balance&gt;

&gt; register account "First Last" 12345.05
created account AC0001

&gt; transfer 1234.44 from AC0001 to AC0007
error: target account AC0007 does not exist

&gt; register account "Family" 0.00
created account AC0002

&gt; transfer 1234.44 from AC0001 to AC0002
transferred
</code></pre>

<p>This kind of interaction is more natural to read than a sequence like 1, 3, 1, 5, 1, 1.</p>

<p>Of course it's a bit more work to split the lines into meaningful pieces, especially with the spaces in the name and the quotes around it, but it has the benefit that you can save all these interactions in a file and apply that file automatically, which is useful for testing your code after any changes.</p>

<p>Plus, the names of the actions are more stable than the menu item numbers. Whenever you change the structure of the menus, your users would have to re-learn the numbers and their associated actions.</p>

<p>Regarding your data model:</p>

<ul>
<li>In normal life, a <code>Bank</code> is an institution that has <em>many</em> accounts. In your code, a bank is created whenever someone deposits or withdraws an amount. This wording is not correct. The bank should be a long-lived object. And it should be able to manage several accounts.</li>
</ul>

<p>Regarding your code:</p>

<ul>
<li><p>The variable <code>bank_actions</code> is wrong. The name must be <code>bank_action</code> since this variable only holds a single action.</p></li>
<li><p>In <code>User.create_new_user</code> you make the account number a random integer. That is wrong since account numbers must be unique. Having only 90000 different account numbers will quickly generate collisions. A bank must manage money and accounts more reliably. In particular, it must not reuse existing account numbers.</p></li>
</ul>

<p>In summary, I suggest that you re-think the whole domain that you are modelling. Write down the possible actions in natural language and carefully check whether it makes sense to "deposit money to a bank", or whether it would be more appropriate to "deposit money to an account, managed by a bank". Be pedantic with each word, be as precise as possible.</p>

<p>And after that, you will probably have to rewrite your code so that it matches your new domain model again.</p>

<p>It's good to have an early prototype in code, but don't hesitate to throw it away. Usually the second attempt is much better than the first one.</p>
    </div>