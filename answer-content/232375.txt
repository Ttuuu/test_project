<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Below you can find some of my reflections.</p>

<ol>
<li>Method InputTracking.GetLocalRotation(XRNode.Head) is obsolete as <a href="https://docs.unity3d.com/ScriptReference/XR.InputTracking.GetLocalRotation.html" rel="noreferrer">DOCS</a> says.</li>
<li>There is a lot calculations per one frame indeed, but Quaternions are structs and you store only 16 of them on heap. As you mentioned yourself, you don't see performance issues. So it's up to you/manager if it's worth more time spending on this.</li>
<li>If you want to make it more scalable then you should move it to external class and inject your rate (the last parameter of Lerp method)</li>
<li>I suggest small refactoring. Please consider refactor of SmoothRotation method to use loop internally, it shouldn't be hard task. Then you'll be able to easily extend frame count that should be considered during calculation.</li>
<li>Set maxRotationCount as const, as it won't change.</li>
<li>Initialize list with size new List(maxRotationCount), you'll avoid copying data while list resizing.</li>
<li><p>Little pseudo code for point 4 below. You can easily change interface to have two parameters, test for edge cases etc.</p>

<pre><code>class SmoothnessCalculator
{
    private readonly List&lt;Quaternion&gt; quaternions;

    public Calculator(int frameCountToStore)
    {
        this.quaternions = new List&lt;Quaternion&gt;(frameCountToStore);
    }

    public void Add(Quaternion quaternion)
    {
        if(this.quaternions.Count == this.quaternions.Capacity)
        {
            this.quaternions.RemoveAt(0);
        }

        this.quaternions.Add(quaternion);
    }

    public Quaternion SmoothRotation(double rate)
    {
        Quaternion result = null;

        for(int i = 0; i &lt; this.quaternions.Count - 1; i++)
        {
            var current = this.quaternions[i];
            var next = this.quaternions[i + 1];

            result = Quaternion.Larp(current, next, rate);
        }

        return result;
    }
} 
</code></pre></li>
</ol>
    </div>