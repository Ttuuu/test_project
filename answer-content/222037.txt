<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is fairly minor, but I don't think <code>countGlobalSizes</code> is ideal. Its use in the constructor requires that the assignment of <code>ranges</code> happens first; which may cause breakage if you refactor later. It also barely has any reliance on individual instances. I'd make it <code>static</code> and accept the ranges directly as an argument:</p>

<pre><code>private static int sumRangeLengths(Range[] ranges) {
    int totalSize = 0;

    for (Range r : ranges) {
        totalSize += r.size();
    }

    return totalSize;
}
</code></pre>

<p>I'm also not a fan of the word "global" being used everywhere. The variables aren't really "global" in most senses. They're private members of instances; which is a pretty constrained scope. They're global to the instance; but every member is, so that's redundant.</p>

<hr>

<p>You may also want to add a <code>step</code> to your range. It's fairly trivial to implement, and is a fairly common aspect of most range implementations.</p>
    </div>