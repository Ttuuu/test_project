<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>OK, since it was requested in the comments, here goes</p>

<ol>
<li><p>You can replace the for loop with a java 8 <code>stream()</code> of the <code>EntrySet()</code> collection of the properties map.</p></li>
<li><p>You can replace all the nested if statements with a <code>filter()</code> you can have your choice of separate <code>filter()</code>s for each if statement, or just concatenate all of them together with <code>&amp;&amp;</code> operator.</p></li>
<li><p>after the <code>filter()</code>, you need to tell the stream to end (aka <a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html#StreamOps" rel="nofollow noreferrer">Short-circuit</a>) by finding the first item that matches the filter. </p></li>
<li><p>The <code>filter()</code> operation returns an <code>Optional</code> since it is possible that no item satisfies the filter's predicate.  in the question, it is required to take an action only if a match is found, so you can add an <code>ifPresent()</code> that takes a <code>Consumer</code> which does something to the matched item and returns void. <code>ifPresent()</code> does nothing if no item satisfies the filter's predicate.</p></li>
</ol>

<p>Note: the posted code does not specify how <code>newValue</code> and <code>requiresName</code> which are mentioned in the <code>throw</code> statement are declared. note that these will have to be final in order to be included in a lambda expression.</p>

<pre><code>properties.entrySet().stream()
    .filter(property -&gt; 
        existingProperties.containsKey(property.getKey()) &amp;&amp;
        existingProperties.get(property.getKey()) instanceof String  &amp;&amp; 
        property.getValue() instanceof String  &amp;&amp;
        existingProperties.get(property.getKey()).equals(property.getValue()))
    .findFirst()
    .ifPresent(property -&gt; {
        throw new Exception("Property " + property.getKey() + " is existsing with value " + newValue
                + "in requires " + requiresName);
    });
</code></pre>

<p>The reasons why you would want to use the <code>stream</code> feature </p>

<ol>
<li>The actual iteration over the collection is left to the stream library which may decide to optimize this instead of sequential loop.</li>
<li>The code is more concise and clear. </li>
</ol>
    </div>