<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I will try to tell you what is wrong with your algorithm and why.</p>

<h1>You do loop twice over the input string which is most certainly wrong</h1>

<p>Your first loop does provide <code>bGroups</code> and <code>wGroups</code> as a result. We immediatly notice, that <code>wGroups</code> is not used at all and can be removed completely. <code>bGroups</code> is used only as limit in the second loop where you loop over all characters again and have to find all groups anyway. So why bother with finding them firsthand? If the second loop iterates over all characters (like the first one does) it can do the group search on its own and we can delete the first loop completely.</p>

<p>However your second loop contains nested while loops that do not stop at the last character. It needs to know the number of groups in advance. But it does not respect the length of the string anyway as it accesses <code>s[s.size()]</code> if the last character is a <code>'B'</code>. This is guaranteed to be <code>'\0'</code> in C++14 (and thus different than <code>'B'</code>) but may work on older compilers just by accident. The bottom line is that your algorithm would be broken for a different container or of you were searching <code>'\0'</code> characters.</p>

<p>As a learning you should avoid parsing where states are represented by a position in a sequential code. Hold state in variables and have a single flat loop that can safely break.</p>

<p>You also can see your nested loop counting is wrong as there is code duplication. There is an <code>if</code> statement to have the very same code in a different order depending on the start character.</p>

<h1>Try to format your code pretty</h1>

<p><code>#include&lt;iostream&gt;</code> should read <code>#include &lt;iostream&gt;</code></p>

<h1>Use <code>std::string.size()</code></h1>

<p>This is the standard how to determine the length of a container and iterate over it. It is a pretty bad idea to hold the length in a seperate variable that must match the actual length. Instead of</p>

<pre><code>for (int i = 0; i &lt; bGroups; i++)
{
    cout &lt;&lt; grpSize[i] &lt;&lt; " ";
}
</code></pre>

<p>The traditional container loop looks like</p>

<pre><code>for (int i = 0; i &lt; grpSize.size(); i++)
{
    cout &lt;&lt; grpSize[i] &lt;&lt; " ";
}
</code></pre>

<p>The modern range based loop - stick to that - looks like</p>

<pre><code>for (const auto &amp; n : grpSize) {
    cout &lt;&lt; n &lt;&lt; " ";
}
</code></pre>

<h1>Do not construct a vector like an array</h1>

<p>Instead of doing so and filling with the <code>operator[]()</code> you should use <code>std::vector.push_back()</code> to grow in size when you need.</p>

<h1>Separate I/O from algorithm</h1>

<p>Make a testable function without I/O that you call from main. The code should be structured somewhat like</p>

<pre><code>std::vector&lt;int&gt; puzzle(std::string s)
{
    std::vector&lt;int&gt; grpSize;
    // ...
    return grpSize;
}

std::string input() {
    // ...
    return s;
}

void output(std::vector&lt;int&gt; v) {
    // ...
}

int main() {
    std::string s(input());
    output(puzzle(s));
}
</code></pre>

<h1><code>using namespace std;</code></h1>

<p>This line is found in many tutorials and even in IDE templates. You should use this very carefully in a limited scope only. Never use this in header files or before include lines as it may introduce name conflicts. When you fully understand this you may decide to use it in *.cpp files e. g. in an output function. </p>

<hr>

<p>finally your algorithm should look somewhat like</p>

<pre><code>std::vector&lt;int&gt; puzzle(std::string s)
{
    std::vector&lt;int&gt; grpSize;

    // as we are interested in 'B' groups only
    // we start in state 'W' to catch the first 'B'
    char state{'W'};

    for (const auto &amp; c : s) {
        if (c == 'B') {
            if (state != 'B') {
                grpSize.push_back(0);
            }
            ++grpSize.back();
        }
        state = c;
    }
    return grpSize;
}
</code></pre>
    </div>