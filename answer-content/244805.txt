<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>To address your immediate concerns,</p>
<ol>
<li><p>Using the return stack for storing your temporaries is a perfectly valid technique.</p>
</li>
<li><p><code>pick</code> is always frown upon (as well as <code>tuck</code>, <code>roll</code>, and friends). It <em>seems</em> that the <code>len</code> parameter to <code>bubblesort</code> does not participate in computation - except the very beginning - and mostly just stays in the way. Consider</p>
<pre><code> : bubblesort
     dup &gt;r 1-
     ....
</code></pre>
</li>
</ol>
<p>and use <code>over</code> instead of <code>2 pick</code> (don't forget to <code>r&gt;</code> the length at the end).</p>
<hr>
<p>I prefer a slightly different formatting of conditional. Consider</p>
<pre><code>2dup &gt; if     
    r@ c! r&gt; 1 + c!  else   
    r&gt; drop 2drop then ;
</code></pre>
<p>Same for the loops. Consider</p>
<pre><code>: bubblesort ( string len -- string len )
    dup 1 - begin 
    dup 0&gt; while
        dup 0 do                                      
            2 pick i compare-and-swap-next               
        loop
        1 -                                     
    repeat
drop ;
</code></pre>
<p>Keeping control words together with their respective conditions/actions looks more Forthy for me.</p>
<hr>
<p><code>r&gt; drop</code> is also known as <code>rdrop</code>.</p>
<p><code>rot rot</code> is also known as <code>-rot</code>.</p>
    </div>