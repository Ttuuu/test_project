<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Take care with <code>&lt;stdio.h&gt;</code></h1>
<p>Output and (especially) input can be quite error-prone activities.  Users and systems have an annoying habit of interacting with your program in unexpected ways.  So we definitely need to check the return value of <code>fgets()</code>; if it's a null pointer, then we didn't read any input, and the contents of <code>str</code> are still uninitialised (so we should print an error message to <code>stderr</code> and return a non-zero status instead of continuing).</p>
<p>Another possibility is that the user enters more than 98 digits, in which case we ignore the 99th and subsequent ones.  One approach to this is to check whether the last character of the string is a newline; if it's not, then we'll need to read another block of <code>sizeof str</code> characters and continue.  A simpler alternative is to read a character at a time rather than trying to read whole lines; although you might think that's less efficient, the <code>stdio</code> library buffers input so that it's not noticeably slower.</p>
<h1>Early return</h1>
<p>We can return before reading to end of string if we find an invalid character.  Then we know that if we reach the final newline, then all of the input was valid.</p>
<h1>A simplification</h1>
<p>To print a fixed string ending with newline, we can use <code>puts()</code> instead of <code>printf()</code>.</p>
<hr>
<p>Taking the above suggestions into account, I end up quite a different program:</p>
<pre><code>#include &lt;stdio.h&gt;

int main(void)
{
    while (1) {
        switch (getc(stdin)) {
        case EOF:
            fputs("Read error!\n", stderr);
            return 1;

        case '0':
        case '1':
            /* valid character */
            continue;

        case '\n':
            /* end of a valid input line */
            puts("Valid!");
            return 0;

        default:
            /* invalid character */
            puts("Not Valid...");
            return 0;
        }
    }
}
</code></pre>
<p>What we now have is an extremely simple state machine.  The starting state is "valid so far", and the end states are "all valid" and "error".  The transitions are all in the <code>switch</code> statement.</p>
<p>Note that like the original code in the question, this program considers empty input to be a valid binary string.  That may or may not be what's wanted.</p>
    </div>