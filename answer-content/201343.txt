<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Splitting a string, and only taking one substring from that split is doing a lot of work, just to throw away most of the results.</p>

<p>Consider the following line:</p>

<pre><code>tx:2018-05-05T20:44:37:626 BST|rx:2018-05-05T20:44:37:626 BST|dt:0|**wokpa22**.sx.sx.com/16604/#001b0001|244/5664|2344|455
</code></pre>

<p>It seems safe to assume that <code>tx: ... |rx: ... |</code> is a fixed format.  Starting at <code>dt:</code>, we might see some variation.  For instance, <code>dt:10</code> is longer than <code>dt:0</code>.  So while the position of the hostname might vary a little bit, it seems easy to get the starting point: just after the first <code>|</code> character after the first 62 characters.  Similarly, finding the end point: the first <code>.</code> (if any) before the first <code>/</code>:</p>

<pre><code>start = line.index('|', 62)+1
slash = line.index('/', start)
dot = line.find('.', start, slash)
end = dot if dot &gt; 0 else slash
b = line[start:end]
</code></pre>

<p>Running timing tests, I find this isolates the hostname in 40% of the time of:</p>

<pre><code>a = line.split('|')[-4]
b = a.split('/')[0]
if len(b.split('.')) &gt; 0:
    b = b.split('.')[0]
</code></pre>

<hr>

<p>Finally, if all you are doing is getting a total count of each hostname across all of the files, appending the hostname to a <code>rows</code> list, and using pandas to count the occurrences is painful.  Simply use a <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>Counter</code></a>:</p>

<pre><code>import collections

counter = collections.Counter()

for file in ...:
   for line in ...:

       ...
       hostname = line[start:end]

       counter[hostname] += 1
</code></pre>

<p>And then create your panda from the <code>counter</code>, with the hostname counts already totaled.</p>

<hr>

<p>Finally, as shown above, use better variable names, such as <code>hostname</code> instead of <code>b</code>.</p>

<hr>

<p>Assuming that you are not I/O bound, you may be able to gain some speed using the <a href="https://docs.python.org/3.7/library/multiprocessing.html" rel="nofollow noreferrer"><code>multiprocessing</code></a>.  Below, the list of files distributed to a number of workers, one per CPU.  Each <code>Process</code> takes a file, unzips and read it line-by-line, counting hostnames, and returning the counter.  The main process receives the results for each file from the pool of processes, and accumulates the results into a single counter using <code>sum()</code>.  Since the order of the results does not matter, <code>.imap_unordered()</code> can be used to avoid the overhead of ensuring the order of results matches the order of the inputs.</p>

<pre><code>from multiprocessing import Pool
from collections import Counter

def count_hostnames(file):
    counter = Counter()
    with gzip.open(file, 'rt') as f:

        for line in f:
            # ... omitted ...
            hostname = line[start:end]
            counter[hostname] += 1

    return counter

if __name__ == '__main__':   # Guard for multiprocessing re-import of __main__

    files = os.listdir(directory)
    files = [ os.path.join(directory, file) for file in files ]

    with Pool() as pool:

        counter = sum( pool.imap_unordered(count_hostnames, files), Counter() )

    print(counter)   # or create your panda
</code></pre>
    </div>