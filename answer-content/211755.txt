<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Disclaimer: I'm not a Unity coder so this is C#-focused feedback, Unity might change some things or have different conventions. Apologies if I cause confusion as a result.</p>

<p><strong>Prefer properties over fields</strong> and <strong>prefer encapsulation</strong> (i.e avoid public setters), for example <code>public float Health { get; private set; }</code>. Currently, any other code in your game can set the <code>Health</code> to whatever it wants, when it should be calling DamageDealt() and letting the object work out its own health!</p>

<p>The private method <code>Start()</code> appears not to be called at all, though perhaps Unity works some reflection magic to call it? In any case, <strong>prefer inline initialization</strong>, for example <code>private Rigidbody2D _RigidBody = GetComponent&lt;Rigidbody2D&gt;();</code>. This may not always be appropriate (e.g. if members need different starting values depending how they are constructed) but used properly means the object can immediately be in a valid state as soon as it is created.</p>

<p><strong>Avoid "magic numbers"</strong> - another answer has already mentioned enums over ints, but the same applies for other constants. For example <code>private const float MaxHealth = 100f;</code> then later <code>Health = MaxHealth;</code> gives more meaning to what's going on. It also means that if the same value is used in multiple places (such as the repeated appearance of 1.5f in <code>DistanceFromObject</code> and <code>Attack</code>) and you later decide it needs to change, you only need to change it in one place if you have <code>private const float CheckDistance = 1.5f;</code> - otherwise, can you guarantee you wouldn't miss changing it somewhere? Finally, it gives you the flexibility in future to change constants to variables - perhaps you decide your game has Easy/Normal/Hard difficulty levels, you could make <code>MaxHealth</code> a static variable and change how much health the player starts with, for example.</p>

<p>Personally I'd put <code>MoveRight()</code> and <code>MoveLeft()</code> into a single <code>Move()</code> method. It'd be a bit clearer that way, and would mean <code>Defend</code> need only be called once, and the result stored. (It's currently possible for it to be called by both methods, so the <code>DefendCooldownTimer</code> will be incremented twice if left arrow, right arrow, and space are all pressed. Is that intentional?) In fact I wonder if it might be appropriate for all the code that checks input to be in the same method, because it checks for different key presses in different places at the moment and that's not very clear. However, there's a danger that approach could end up with a giant method that tries to do everything, which would be just as bad (and which you currently avoid).</p>
    </div>