<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Thanks for sharing your code! Works like a charm. Ended up using it with some adjustments and the extension method below. I pass the Sort objects in so that any parsing is done outside (separate the concern a bit).</p>

<pre><code>public static IQueryable&lt;TEntity&gt; ApplySort&lt;TEntity&gt;(this IQueryable&lt;TEntity&gt; query, params Sort[] sorts)
    {
        if (sorts == null)
            return query;
        var applicableSorts = sorts.Where(s =&gt; s != null);
        if (!applicableSorts.Any())
            return query;
        applicableSorts
            .Select((item, index) =&gt; new { Index = index, item.PropertyName, item.Direction })
            .ToList()
            .ForEach(sort =&gt;
            {
                ParameterExpression parameterExpression = Expression.Parameter(query.ElementType, "entity");
                var propertyExpression = Expression.Property(parameterExpression, sort.PropertyName);
                var sortPredicate = Expression.Lambda(propertyExpression, parameterExpression);

                string methodName = (sort.Index == 0 ? "Order" : "Then") + (sort.Direction == OrderDirection.Ascending ? "By" : "ByDescending");
                MethodCallExpression orderBy = Expression.Call(typeof(Queryable), methodName, new Type[] { query.ElementType, propertyExpression.Type }, query.Expression, Expression.Quote(sortPredicate));
                query = query.Provider.CreateQuery&lt;TEntity&gt;(orderBy);
            });

        return query;
    }
</code></pre>
    </div>