<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>All of your <code>if char == '&gt;': ptr += 1</code> and similar checks should use <code>elif</code> after the first check. By using <code>if</code> for all of the checks, you're forcing them all to run, even once you've found a match. This is wasteful because the checks are necessarily exclusive of each other. Once one check is true, none of the other checks can be. For example, you should have:</p>

<pre><code>if char == '&gt;': ptr += 1
elif char == '&lt;': ptr -= 1

elif char == '+': values[ptr] = (values[ptr] + 1) % 256
elif char == '-': values[ptr] = (values[ptr] - 1) % 256
</code></pre>

<p>Now the checks stop once a match is found which prevents unnecessary equality checks. </p>

<hr>

<p>I'd also try to break this down into a few functions to help testing. Right now, you can only test <code>bf_interpreter</code> as one whole. You could have a function that takes the current character, and the state of the program (the <code>brackets</code>, <code>ptr</code>, <code>outputs</code>...), and returns a new state. That way you can easily test for a given state if a certain command produces a correct new state.</p>

<hr>

<p>I'm assuming this loop is just to add padding so you don't go off the end of the slots?:</p>

<pre><code>while length &lt;= ptr:
    length += 1
    values.append(0)
</code></pre>

<p>You could make that a little neater by just using math and some concatenation. You could also just get rid of <code>length</code> and use <code>len(values)</code>:</p>

<pre><code>needed = ptr - len(values)
values += [0] * needed
</code></pre>

<p><code>ptr - len(values)</code> calculates how many slots are needed, then <code>[0] * needed</code> produces that many <code>0</code>s, and <code>+=</code> adds them to <code>values</code>. If <code>needed</code> is negative, <code>[0] * needed</code> will produce <code>[]</code>, and essentially cause no change.</p>

<p>If you want to avoid the temporary list that <code>[0] * needed</code> creates, you could replace that with:</p>

<pre><code>values += (0 for _ in range(needed))
</code></pre>

<p>Now <code>+=</code> just pulls from a generator that produces values as needed.</p>

<hr>

<p>And then, just like how you don't need <code>length</code>, you don't need <code>code_length</code> either. <code>len(code)</code> is fine; <code>len</code> runs in constant time. You don't need to cache it for performance reasons.</p>

<p>Here's some timings to show the difference in runtime this can cause:</p>

<pre><code>import timeit

TEST_CODE = "++++++++[&gt;++++[&gt;++&gt;+++&gt;+++&gt;+&lt;&lt;&lt;&lt;-]&gt;+&gt;+&gt;-&gt;&gt;+[&lt;]&lt;-]&gt;&gt;.&gt;---.+++++++..+++.&gt;&gt;.&lt;-.&lt;.+++.------.--------.&gt;&gt;+.&gt;++."

&gt;&gt;&gt; timeit.timeit(lambda: bf_interpreter_orig(TEST_CODE), number=int(2e5))  # Two hundred thousand tests
77.3481031  # Takes 77 seconds

&gt;&gt;&gt; timeit.timeit(lambda: bf_interpreter_len(TEST_CODE), number=int(2e5))
88.93794809999997
</code></pre>

<p>Where <code>bf_interpreter_orig</code> is your original code, and <code>bf_interpreter_len</code> is your original code but using <code>len</code>.</p>

<p>Yes, there's a difference. Note though, that's a ~11 second difference across <em>200,000</em> calls. That works out to roughly 58 <em>microseconds per call</em> to the interpreting function.</p>

<p>Unless you're calling <code>bf_interpreter</code> hundreds of thousands of times in a tight loop, the difference is unlikely to matter. This also likely has nothing to do with the fact that you're requesting a length, and more to do with one extra function call. Function calls aren't super fast in Python. Likely any extra call to any function would have similar effects.</p>
    </div>