<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First of all you seem to have made a working game, and there is a certain game logic. But your overall coding style and data structures needs updating. If you haven't done so already, I would strongly suggest reading <a href="https://www.python.org/dev/peps/pep-0008/">PEP8</a>.</p>

<p>Actually your style isn't really bad, but the entire game is crippled by no use of vertical spacing. You have mostly good names, albeit some of them are a little short, but you need to add some vertical space in there. And you need to add a little comments here and there.</p>

<p>I suggest the follwing for <em>adding vertical space</em>:</p>

<ol>
<li>Add two newlines before any function, method or class</li>
<li>Add newline within functions before logical groups of code, i.e. initialising local variables, <code>if ... elif</code> blocks, <code>for</code> or <code>while</code> loops</li>
</ol>

<p><em>Look into using <a href="https://docs.python.org/3/library/collections.html#collections.namedtuple">named tuples</a> and/or <a href="https://docs.python.org/3/tutorial/classes.html">classes</a></em>, i.e. your main character could be well served using either. That would allow for coding like <code>while character.hp &gt; 0</code> or <code>character.move('e')</code>. Which in turn could use a namedtuple with x and y coordinates. </p>

<p>Using a named tuple for coordinates could also make some of your logic easier, as you could use loops to check for all the different positions, instead of large amounts of <code>if ... elif</code> blocks.</p>

<p>You also use some anti-patterns, as they are called. I.e. <code>if new_level == True:</code> followed by <code>elif new_level == False:</code>. First of all this could be written like <code>if new_level:</code> followed by <code>elif not new_level:</code>, but the second part is redundant, as <code>new_level</code> has only two values. So you could and should use <code>if new_level:</code> followed by <code>else:</code>.  </p>

<p>A similar anti-pattern is setting the <code>player_in_range = True</code> in each and every if statement. Set it once to <code>True</code> before all the if statements, and let the <code>else:</code> statement reset it to <code>False</code>. Looks nicer, and is easier to follow.</p>

<p>Regarding all those if statements, you could also benefit from combining them using <code>or</code> statements in between. Or even better to make a position class with a class method so that you could do stuff like: <code>if character.position.in_range_of(critter[i])</code>. That would look a lot nicer...</p>

<p>Lastly, I would look into <a href="https://docs.python.org/3/library/string.html#formatspec">print formatting</a> which could simplify print statements to: <code>print("W E A P O N:  {}  {}".format(character["weapon_rating"], character["weapon_name"]))</code>. Or if using named tuples or classes: <code>... .format(character.weapon_rating, character.weapon_name))</code>. </p>

<p>The manual seems OK, but I would most likely manually word wrap at around 72 characters, to make it read easier most places. But that kind of depends upon where and you are displaying the text.</p>

<p>This is not a complete review, but you should have some pointers to get you started on refactoring your code. You are very welcome to post a new question with your revised edition of your game.</p>
    </div>