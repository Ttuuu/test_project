<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This does the same thing more succinctly</p>

<pre><code>number.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse
</code></pre>

<p>source: <a href="https://stackoverflow.com/a/11466770/1429887">https://stackoverflow.com/a/11466770/1429887</a></p>

<p>It converts the number to a string, reverses it, places a comma every three digits (if it is followed by a digit), then reverses it back to its original order.</p>

<p>You might want to make it a function such as</p>

<pre><code>def format_number(number)
  number.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse
end
</code></pre>

<p>so that you can call the process multiple times</p>

<p>However, this method does not work with numbers that contain 3+ decimals. To solve that:</p>

<pre><code>def format_number(number)
  number = number.to_s.split('.')
  number[0].reverse!.gsub!(/(\d{3})(?=\d)/, '\\1,').reverse!
  number.join('.')
end
</code></pre>

<p>This method splits the integer into the whole number part and the decimal part. It then adds the comma to the whole number and then tacks on the second decimal part. </p>

<p>[edit]: the second line of that function should have been number[0] to get the first element (the whole number one). Sorry if you viewed it before I realized my mistake.</p>
    </div>