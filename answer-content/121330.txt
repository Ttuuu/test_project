<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In my experience there is rarely a need for delayed invokes on the dispatcher, what problem are you solving?</p>

<p>If you do something in a constructor that you want deferred until loaded there is already an overload for that:</p>

<pre><code>Dispatcher.BeginInvoke(DispatcherPriority.Loaded, new Action(...));
</code></pre>

<p>For delayed invokes why not use:</p>

<pre><code>public static async Task InvokeAsync(
    this Dispatcher dispatcher,
    TimeSpan delay,
    Action action)
{
    await Task.Delay(delay).ConfigureAwait(false);
    await dispatcher.InvokeAsync(action).Task.ConfigureAwait(false);;
}
</code></pre>

<p>I would probably not have this as an extension method as it doesn't mean any real reuse of code.</p>

<p>For cancellation you can use this:</p>

<pre><code>public static async Task InvokeAsync(
    this Dispatcher dispatcher,
    TimeSpan delay,
    CancellationToken cancellationToken,
    Action action)
{
    await Task.Delay(delay, cancellationToken).ConfigureAwait(false);
    await dispatcher.InvokeAsync(action, DispatcherPriority.Normal, cancellationToken)
                    .Task.ConfigureAwait(false);;
}
</code></pre>

<p>Passing in cancellation token is more consistent with how it is done in the framework.</p>

<p>With this design there is no risk for deadlocks and leaks.</p>

<p>I omitted the overload permutations with <code>DispatcherPriority</code>.</p>
    </div>