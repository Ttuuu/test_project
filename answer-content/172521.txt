<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Rather than breaking the string into substrings, then converting each individually from a hex string to an integer, I'd probably convert the entire string at once, then use bit shifting to get the pieces you care about.</p>

<pre><code>SDL_Color hex2sdl(std::string input) {

    if (input[0] == '#')
        input.erase(0, 1);

    unsigned long value = stoul(input, nullptr, 16);

    SDL_Color color;

    color.a = (value &gt;&gt; 24) &amp; 0xff;
    color.r = (value &gt;&gt; 16) &amp; 0xff;
    color.g = (value &gt;&gt; 8) &amp; 0xff;
    color.b = (value &gt;&gt; 0) &amp; 0xff;
    return color;
}
</code></pre>

<p>This simplifies the code quite a bit, and at least in my mind makes it rather easier to read.</p>

<p>Another point to consider (when/if your compiler supports it) would be to use an <code>std::string_view</code> instead of a <code>std::string</code> for the input. A string_view is something like a pointer/length, so (when needed) it can trim the <code>#</code> from the beginning without copying all the data like an actual string normally will. Even if your compiler supports <code>string_view</code> itself, however, it may easily <em>not</em> support passing a string_view to <code>std::stoul</code>, which kind of ruins the idea (for now).</p>
    </div>