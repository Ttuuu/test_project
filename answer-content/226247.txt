<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If you want a thread safe singleton in Kotlin, you should re-write your singleton like so:</p>

<pre><code>object Singleton {
    private val questions = mutableListOf&lt;QuestionBO&gt;()
    fun getQuestions() = questions.toList()

    private val results = mutableListOf&lt;ResultBO&gt;()
    fun getResults() = results.toList()

    fun updateQuestion(questionsFromServer:MutableList&lt;QuestionBO&gt;) {
        questions.apply {
            this.clear()
            this.addAll(questionsFromServer)
        }

        results.apply {
            this.clear()
            this.addAll(questions.map { question -&gt;
                add(ResultBO(question, false, null))
            })
        }
    }

    fun updateSelectedAnswer(indexOfQuestion:Int,userSelectedIndex:Int){
        results.get(indexOfQuestion).isCorrectAnswer = questions.get(indexOfQuestion).CorrectIndex == userSelectedIndex
        results.get(indexOfQuestion).userSelectedOptionIndex = userSelectedIndex
    }

    fun clearAll(){
        results.clear()
        questions.clear()
    }
}
</code></pre>

<p>Note, in addition to using <code>object</code> as a top level declaration (which gives you thread safe singleton for free), I have also changed the code in the <code>Singleton</code> to fix some causes of bugs.</p>

<p>You had defined both <code>questions</code> and <code>results</code> as <strong>public mutable</strong> properties of the <code>Singleton</code>. This is bad because it means you can re-write the values... instead, make them <strong>private immutable</strong> properties of the <code>Singleton</code>, and expose methods for getting them, which call <code>toList</code> on the mutable collections to make sure an immutable copy is returned from the get functions.</p>

<p>Next up, in <code>updateQuestion</code> I have removed the re-assignment of questions and instead just cleared them and added the new ones from the server. </p>

<p>Instead of using a <code>forEach</code> over questions when re-populating the <code>results</code> collection, I have instead opted for <code>map</code>, which iterates the source collection, applying a mapping function to create a new value putting that new value into a new collection that is returned from <code>map</code>.</p>
    </div>