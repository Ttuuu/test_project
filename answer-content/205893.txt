<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It is neither good nor bad. It does the job: it shows a list of even numbers up to a limit lesser than or equal to 100. But the design or architecture of the program is ugly, even for a small program like this.</p>

<hr>

<p>Previous it was common to declare all variables at the top of the scope (function or other bracketed section) (and some languages require that), but now in C# it is considered standard to declare the variable when they are used the first time.</p>

<hr>

<blockquote>
  <p><code>numberOfEvenNumbers = Convert.ToInt32(Console.ReadLine());</code></p>
</blockquote>

<p>This is quick and dirty and will crash the program if the user enters a non numeric string.</p>

<p>So you'll have to check the input and react to an invalid such:</p>

<pre><code>  int numberCount = 0;
  string prompt = "How many even numbers [Enter a number lesser than or equal to 50]: ";
  string errorMessage = "";
  do
  {
    Console.Write($"{errorMessage}{prompt}");
    errorMessage = "Invalid input. ";
  }
  while (!int.TryParse(Console.ReadLine(), out numberCount) || numberCount &lt;= 1 || numberCount &gt; 50);
</code></pre>

<p>Here I validate (<code>&gt; 1 and &lt; 100</code>) the input in the UI which is preferable to do compared to validating while running the algorithm.</p>

<hr>

<p>The header of the question says</p>

<blockquote>
  <p>numbers between 1 and 100</p>
</blockquote>

<p>(excluding 100) but you iterate potentially up to and including 100:</p>

<blockquote>
  <p><code>while (counter &lt;= 100) { ... }</code></p>
</blockquote>

<p>so what do you really mean?</p>

<hr>

<blockquote>
<pre><code>if (counter % 2 == 0)
{
</code></pre>
</blockquote>

<p>Even numbers can be found by checking if a number is divisible by 2 as you do, but the sequence of even numbers from 2 and upwards can be found like this:</p>

<pre><code>  for (int i = 2; i &lt;= limit; i += 2)
  {
    Console.WriteLine(i);
  }
</code></pre>

<p>in this way you are almost done with one variable (<code>i</code>) and a limit, you just need a <code>sum</code> to sum up with:</p>

<pre><code>// The 6 first even numbers:
int numberCount = 6 * 2;
int sum = 0;    

for (int i = 2; i &lt;= numberCount; i += 2)
{
  Console.WriteLine(i);
  sum += i;
}
Console.WriteLine(sum);
</code></pre>

<hr>

<p>So all in all it ends up like this:</p>

<pre><code>static void EvenNumberCount()
{
  int numberCount = 0;
  string prompt = "How many even numbers [Enter a number lesser than 50]: ";
  string errorMessage = "";
  do
  {
    Console.Write($"{errorMessage}{prompt}");
    errorMessage = "Invalid input. ";
  }
  while (!int.TryParse(Console.ReadLine(), out numberCount) || numberCount &lt;= 1 || numberCount &gt; 50);

  numberCount *= 2;
  int sum = 0;

  for (int i = 2; i &lt;= numberCount; i += 2)
  {
    Console.WriteLine(i);
    sum += i;
  }

  Console.WriteLine();
  Console.WriteLine($"Sum: {sum}");
}
</code></pre>

<p>But here I do too much in the same method:</p>

<p>The program has 3 steps:</p>

<ol>
<li>User input</li>
<li>The algorithm</li>
<li>Display of result</li>
</ol>

<p>This calls for 3 separate methods or functions:</p>

<ol>
<li>limit = GetCountOfNumbers();</li>
<li>result = EnumerateAndEvenNumbers(limit);</li>
<li>ShowResult(result)</li>
</ol>

<p>Which could result in something like:</p>

<pre><code>static int GetCountOfNumbers()
{
  int numberCount = 0;
  string prompt = "How many even numbers [Enter a number lesser than or equal to 50]: ";
  string errorMessage = "";
  do
  {
    Console.Write($"{errorMessage}{prompt}");
    errorMessage = "Invalid input. ";
  }
  while (!int.TryParse(Console.ReadLine(), out numberCount) || numberCount &lt;= 1 || numberCount &gt; 50);

  return numberCount;
}

static (int Sum, IEnumerable&lt;int&gt; EvenNumbers) EnumerateAndSumEvenNumbers(int numberCount)
{
  int sum = 0;
  List&lt;int&gt; evenNumbers = new List&lt;int&gt;();
  numberCount *= 2;

  for (int i = 2; i &lt;= numberCount; i += 2)
  {
    evenNumbers.Add(i);
    sum += i;
  }

  return (sum, evenNumbers);
}

static void ShowResult(int limit, int sum, IEnumerable&lt;int&gt; evenNumbers)
{
  Console.WriteLine();
  Console.WriteLine($"The first {limit} even numbers are: ");
  foreach (int number in evenNumbers)
  {
    Console.WriteLine(number);
  }

  Console.WriteLine();
  Console.WriteLine($"Sum: {sum}");
}

static void TestNumberCount()
{
  int numberCount = GetCountOfNumbers();
  (int Sum, IEnumerable&lt;int&gt; EvenNumbers) = EnumerateAndSumEvenNumbers(numberCount);
  ShowResult(numberCount, Sum, EvenNumbers);
}
</code></pre>

<hr>

<p>By the way: The sum of any number <code>n</code> of even numbers from 2 and upwards can be found as: <code>sum = n * (n + 1)</code>. This could simplify the above "algorithm" a bit.</p>
    </div>