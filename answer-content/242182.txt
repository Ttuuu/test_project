<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First of all, I would recommend using a <code>data class</code>. In order to do this, it's better to use <code>List</code> rather than <code>Array</code> (because Array does not support hashCode/equals)</p>

<pre><code>data class Building (
    val name: String,
    val inputs: List&lt;Resource&gt;,
    val outputs: List&lt;Resource&gt;
)
</code></pre>

<p>Actually, considering that the order of elements doesn't matter you could use <code>Set</code> or any iterable data structure as well, but my experience is that <code>List</code> is usually the fastest to iterate through.</p>

<p>As for using the companion object, that's entirely possible and will be similar to static factory methods, but I like to go beyond that and have a completely separate factory class for this. The reasoning being that I don't want to tightly couple my <code>Building</code> with the actual data, what if I would like to have two entirely different games in the future that both use the <code>Building</code> ? What if I would like to let the user design their own buildings? Either way, I see many reasons to use a separate factory class/object than use the companion object.</p>

<p>In Kotlin it is as easy as defining an <code>object BuildingFactory</code>.</p>

<pre><code>object BuildingFactory {
    fun woodcutter(): Building = Building(
        "Woodcutter",
        listOf(
            Resource(ResourceType.WOOD, 1),
            Resource(ResourceType.WORKFORCE, 3),
            Resource(ResourceType.MONEY, 10)
        ),
        listOf(Resource(ResourceType.PLANKS, 1))
    )
}
</code></pre>

<p>Then you can create instances as easy as <code>BuildingFactory.woodcutter()</code></p>

<p>Another approach could be to have a configuration data file specifying the buildings available and reading from that file. Then construct a building based on a name.</p>
    </div>