<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You have a couple of PEP8 style problems:</p>

<ul>
<li>Functions should have an empty line above and below them.</li>
<li>Function calls should have their bracket immediately after the name. So <code>fn(</code> not <code>fn (</code>.</li>
<li>Assignment operators should have a space either side of them.</li>
<li>Try to keep code less than 80 characters long.</li>
</ul>

<p>You also have a couple of naming problems:</p>

<ul>
<li><code>compar</code> should be <code>compare</code> or <code>comparer</code>, since compar is not a word. If you wanted to shorten it <code>comp</code> would be the best shortened version, but is worse than both the written out versions.</li>
<li>Lists and arrays don't have IDs, they have indexes. And so <code>element_id</code> is confusing. At first I used <code>item_index</code> or <code>element_index</code>, but decided to instead use <code>parent</code> and <code>child</code> to better describe the parent child relationship.</li>
<li>In <code>heapify</code> I'd change <code>el_id</code> to <code>child</code> and <code>element_id</code> to <code>parent</code>. (And you should use <code>child</code> rather than <code>parent * 2</code>)</li>
<li>For better readability, and for a minor performance boost, I used <code>heap = self.heap</code>.</li>
</ul>

<p>Other things I'd change:</p>

<ul>
<li>Your constructor shouldn't need to be passed <code>compare</code>, and so it could default to <code>operator.lt</code>. You may also want to take a heap as input, but you may need to add more code so it works correctly.</li>
<li>Add a <code>__repr__</code>, so that you can more easily tell what the object is.</li>
<li>In <code>del_min</code> when you add the two lists, it runs in \$O(n)\$ time. Where you can do the same with <code>heap.pop()</code>, which runs in \$O(1)\$ time.</li>
<li>You may want to look at <a href="https://github.com/python/cpython/blob/3.6/Lib/heapq.py" rel="noreferrer"><code>heapq</code>'s source code</a> to find other things you can do. It for example uses; <code>_siftup</code>, and <code>_siftdown</code>, and; <code>_siftup_max</code>, and <code>_siftdown_max</code>. Where you only write two of these.</li>
</ul>

<p>Combining the above together gets you:</p>

<pre><code>import operator


class Heap(object):
    """"
    Attributes:
        heap: List representation of the heap
        compare(p, c): comparator function, returns true if the relation between p and c is parent-chield
    """
    def __init__(self, heap=None, compare=operator.lt):
        self.heap = [] if heap is None else heap
        self.compare = compare

    def __repr__(self):
        return 'Heap({!r}, {!r})'.format(self.heap, self.compare)

    def _inv_heapify(self, child_index):
        """
        Do heapifying starting from bottom till it reaches the root.
        """
        heap, compare = self.heap, self.compare
        child = child_index
        while child &gt; 0:
            parent = child // 2
            if compare(heap[parent], heap[child]):
                return
            heap[parent], heap[child] = heap[child], heap[parent]
            child = parent

    def _heapify(self, parent_index):
        """
        Do heepifying starting from the root.
        """
        heap, compare = self.heap, self.compare
        length = len(heap)
        if length == 1:
            return
        parent = parent_index
        while 2 * parent &lt; length:
            child = 2 * parent
            if child + 1 &lt; length and compare(heap[child + 1], heap[child]):
                child += 1
            if compare(heap[parent], heap[child]):
                return
            heap[parent], heap[child] = heap[child], heap[parent]
            parent = child

    def del_min(self):
        heap = self.heap
        last_element = heap.pop()
        if not heap:
            return last_element
        item = heap[0]
        heap[0] = last_element
        self._heapify(0)
        return item

    def min(self):
        if not self.heap:
            return None
        return self.heap[0]

    def add(self, element):
        self.heap.append(element)
        self._inv_heapify(len(self.heap) - 1)
</code></pre>

<hr>

<p>Rather than implementing this yourself, you can use Pythons <a href="https://docs.python.org/3/library/heapq.html" rel="noreferrer"><code>heapq</code></a>, which <a href="https://github.com/python/cpython/blob/3.6/Lib/heapq.py#L585" rel="noreferrer">may be written in C</a>.
Since it's not a class you can easily make it one by wrapping it in one. But it doesn't have your custom comparisons, it is instead always a min heap.
If you need the custom comparisons, you could instead look into writing your own comparison object that does what you want, and use the heap class.</p>

<pre><code>class Heap(list):
    def __init__(self, heap=None):
        if heap is None:
            heap = []
        heapq.heapify(heap)
        super(Heap, self).__init__(heap)

    def __repr__(self):
        return 'Heap({})'.format(super(Heap, self).__repr__())

    def push(self, item):
        return heapq.heappush(self, item)

    def heappop(self):
        return heapq.heappop(self)

    def pushpop(self, item):
        return heapq.heappushpop(self, item)

    def replace(self, item):
        return heapq.heapreplace(self, item)

    def nlargest(self, n, *args, **kwargs):
        return heapq.nlargest(n, self, *args, **kwargs)

    def nsmallest(self, n, *args, **kwargs):
        return heapq.nsmallest(n, self, *args, **kwargs)
</code></pre>
    </div>