<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Summary of the original code</h3>

<p>Let's go over the original code first. Here's a summary of what <code>AddCustomer</code> does:</p>

<ul>
<li>It performs a few basic argument checks (names not being empty, email appearing valid).</li>
<li>It also performs some business-specific checks (age &lt; 21, credit limit &lt; 500).</li>
<li>It obtains a company object, which is used to determine the credit limit of the new customer.</li>
<li>It creates a customer object and adds it to a database.</li>
</ul>

<h3>Problems with the original code</h3>

<p>In order of most important to least, here's what I think is troublesome:</p>

<ul>
<li><code>CustomerDataAccess.AddCustomer</code> looks like a property access, but it's actually a static method in a static class. Because globals are so 'conveniently' accessible, they tend to result in many more (hidden) dependencies between components. Ultimately, this makes a code-base increasingly more difficult to understand, maintain and test.</li>
<li>Creating a temporary <code>CompanyRepository</code> and <code>CustomerCreditServiceClient</code> object for a single operation looks very strange. Such dependencies should be injected via the <code>CustomerService</code> constructor. The test harness prevents the constructor from being changed, but it's still possible to provide an overload that uses injection (the original constructor can create its own dependencies, similar to the old behavior).</li>
<li>Those repositories, service-clients and data-access classes are concrete types, which makes it difficult to replace them with an alternate implementation (such as a mock object, for testing). Creating interfaces for them seems appropriate here.</li>
<li>There's a bit of code duplication in the credit-limit part, which shouldn't be too difficult to simplify. What's worse is those hard-coded company-specific rules. Solving that requires more knowledge about the rest of the system, but it looks like this information should either be stored in <code>Company</code> (<code>company.UseCreditLimit</code>, <code>company.CreditLimitFactor</code>) or <code>CustomerCreditServiceClient</code> should take the company into account.</li>
<li>It looks like the original code didn't have any documentation. That makes it difficult to determine whether the lack of exception handling is intentional or not. Those business-specific checks (age, credit limit) would also benefit from some documentation.</li>
<li>The code doesn't check whether <code>companyId</code> refers to an existing company.</li>
<li>Returning a boolean doesn't let the caller know why adding a customer failed, nor does it give the caller access to the newly created customer (via some kind of ID). Maybe that's because callers don't need to know, or maybe they're obtaining this information in some other way (which probably hints at system-wide code duplication).</li>
<li>Strangely, <code>Customer</code> has an <code>Id</code> property, but it's never used. Looks like an oversight in this exercise. Also, it could use a proper constructor.</li>
<li>Determining the age of the new customer takes up quite a bit of space, relatively speaking. An <code>int GetCurrentAge(DateTime birthDate)</code> helper method would be useful.</li>
</ul>

<h3>Analysis of your changes</h3>

<p>Let's now take a look at your changes. Your <code>CustomerCompanyService</code> class is using dependency injection and a wrapper around that static database method, which solves the most important problems. <code>AddCustomer</code> is now much easier to test. However:</p>

<ul>
<li>Using inheritance here is actually somewhat problematic:

<ul>
<li>The 'test harness' creates a <code>CustomerService</code> instance, so your child class won't be used there anyway.</li>
<li>Using virtual methods to inject dependencies is a good idea, but it's not executed properly: by mixing other logic into these methods, your child class has to duplicate that logic. So not only do you end up with more code that needs to be maintained, you're also not able to test the code that is actually being used (the base class).</li>
</ul></li>
<li>Your child class duplicates the <code>AddCustomer</code> method of its parent, making the problem of code duplication worse. Another virtual method for adding the customer to the database could've prevented that.</li>
<li>Combining the creation of a credit service object with additional credit limit logic causes further code duplication. A virtual method for obtaining a credit limit service could've prevented some more duplication. Alternately you could've created a helper method to obtain the credit limit itself: <code>int GetCreditLimit(Customer customer, Company company)</code>.</li>
<li>Splitting methods up into smaller ones is a useful technique, but:

<ul>
<li>It has to be done properly. Splitting the credit-limit logic up into two methods makes it more difficult to see that you introduced a bug (the <code>Get</code> method overrides the double credit limit that was set in <code>Set</code>). Fixing that will expose an additional bug in the child class: its <code>Set</code> method doubles the credit limit of every customer with a limit. I see no reason why you need two methods instead of one.</li>
<li>It must not be taken too far, otherwise it'll make code harder to understand. The various argument checks are fairly simple and don't take up a lot of space, so leaving them inside <code>AddCustomer</code> lets you immediately see what's going on. I would only move them to a separate method if the validation is more complicated.</li>
</ul></li>
<li>That email regex is a bad idea. It's most likely going to fail for some exotic addresses, and perhaps more importantly: it's not doing what the original code did, so this might be introducing bugs as well. Not to mention the readability of the regex itself (and thus our ability to verify that it works as intended)... ;)</li>
<li>Try using more accurate names. <code>GetCreditLimitHelper</code> implies that it'll return a credit-limit helper object, but that's not what it's doing. <code>SetCreditLimits</code> would be a more descriptive name (that <code>Helper</code> suffix is more confusing than, well, helpful).</li>
<li>Regarding disposal, your class may need to implement <code>IDisposable</code> as well, depending on whether it should take ownership of the given dependency. That's difficult to determine without further context.</li>
</ul>
    </div>