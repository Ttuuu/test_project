<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>What I thought is I could call an overloaded function from Callable::Invoke, which resolves to the correct implementation. I would overload a private Callable::Invoke__ function, and use SFINAE or enable_if to choose at compile time.</p>
  
  <p>But since my functions would have the same signature, the compiler complains that one of them cannot be overloaded.</p>
</blockquote>

<p>It's hard to tell what you're asking, because you're asking about code that you don't show (and you show code that you're not asking about). I infer that you want to take your current C++17 code and backport it to C++14?</p>

<pre><code>template &lt;typename ReturnType, typename... Args&gt;
template &lt;typename T&gt;
ReturnType Function&lt;ReturnType(Args...)&gt;::Callable&lt;T&gt;::Invoke(Args... args)
{
    if constexpr (traits::is_pointer_to_memfun&lt;traits::decay_t&lt;T&gt;&gt;::value)
        return Invoke_(args...);
    else
        return mObject(args...);
}
</code></pre>

<p>What you're looking for is <em>tag dispatch</em>.</p>

<pre><code>template&lt;class F, class... Args&gt;
auto Helper(std::true_type, F *self, Args... args) {
    return self-&gt;Invoke_(args...);
}

template&lt;class F, class... Args&gt;
auto Helper(std::false_type, F *self, Args... args) {
    return self-&gt;mObject(args...);
}

template &lt;typename ReturnType, typename... Args&gt;
template &lt;typename T&gt;
ReturnType Function&lt;ReturnType(Args...)&gt;::Callable&lt;T&gt;::Invoke(Args... args)
{
    return Helper(traits::is_pointer_to_memfun&lt;traits::decay_t&lt;T&gt;&gt;{}, this, args...)
}
</code></pre>

<p>If <code>traits::is_pointer_to_memfun&lt;traits::decay_t&lt;T&gt;&gt;</code> is a synonym for <code>true_type</code> (or derived from <code>true_type</code>), then the call will match <code>Helper</code> number one. If it's a synonym (or child) of <code>false_type</code>, then the call will match <code>Helper</code> number two.</p>

<p>See <a href="https://www.youtube.com/watch?v=ybaE9qlhHvw" rel="nofollow noreferrer">"A Soup√ßon of SFINAE"</a> (me, CppCon 2017) for the details and more stuff like this.</p>

<hr>

<p>Your out-of-line function template definitions make the code <em>much</em> harder to read than if you defined everything in-line, Java-style. More than one consecutive <code>template&lt;typename Foo&gt;</code> is too many.</p>

<p>Consider adding perfect forwarding on <code>args...</code> so you're not copying them by value all the time.</p>

<p>Consider replacing <code>CallableBase *mCallable;</code> with <code>std::unique_ptr&lt;CallableBase&gt; mCallable;</code> so that you don't have to do manual <code>new</code> and <code>delete</code> and so you can default your destructor, move-constructor, and move-assignment operator.</p>

<p>Your <code>operator bool()</code> should be marked <code>const</code>.</p>

<p>Your move-constructor should be marked <code>noexcept</code>.</p>

<hr>

<p>By the way, another way to approach your problem would be to provide a <strong><em>partial specialization</em></strong> of <code>Callable&lt;T&gt;</code> specifically for things of the form <code>Callable&lt;R (C::*)(As...)&gt;</code>. Then you wouldn't need to distinguish different kinds of callables inside <code>Callable&lt;T&gt;::Invoke</code>; you'd have two completely different specializations of <code>Callable&lt;T&gt;::Invoke</code>, each handling only a single case.</p>
    </div>