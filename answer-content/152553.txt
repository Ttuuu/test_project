<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Just two remarks:</p>

<ul>
<li><code>RandomChar</code> should be a method because it returns a different result each time - this is just a convention that we usually follow in C#</li>
</ul>

<blockquote>
  <p>In general, methods represent actions and properties represent data. Properties are meant to be used like fields, meaning that properties should not be computationally complex or produce side effects.</p>
</blockquote>

<p>from <a href="https://msdn.microsoft.com/en-us/library/ms229054%28v=vs.100%29.aspx" rel="nofollow noreferrer">Choosing Between Properties and Methods</a></p>

<p>so</p>

<blockquote>
  <p><strong>Do use a property, rather than a method</strong>, if the value of the property is stored in the process memory and the property would just provide access to the value.</p>
</blockquote>

<p>but</p>

<blockquote>
  <p><strong>Do use a method, rather than a property</strong>, in the following situations.</p>
</blockquote>

<p>amonong many others:</p>

<blockquote>
  <ul>
  <li>The operation returns a different result each time it is called, even if the parameters do not change. For example, the <code>NewGuid</code> method returns a different value each time it is called.</li>
  </ul>
</blockquote>

<hr>

<ul>
<li>You can cast the result to <code>char</code> and don't need the <code>Convert.ToChar</code></li>
</ul>

<p>_</p>

<pre><code>private static char RandomChar() =&gt; (char)Random.Next(char.MinValue, char.MaxValue);
</code></pre>

<hr>

<p>You can also improve the performance by precalculating the array with chars:</p>

<pre><code>private static readonly char[] Chars = 
    Enumerable
    .Range(char.MinValue, char.MaxValue)
    .Select(x =&gt; (char)x)
    .Where(c =&gt; !char.IsControl(c))
    .ToArray();
</code></pre>

<p>the <code>RandomChar</code> method would take the values from this array:</p>

<pre><code>private static char RandomChar() =&gt; Chars[Random.Next(0, Chars.Length)];
</code></pre>

<p>so building the string can be a simple loop:</p>

<pre><code>for (int i = 0; i &lt; length; i++)
{
    stringBuilder.Append(RandomChar());
}
</code></pre>

<hr>

<p>Without the <code>StringBuilder</code> this seems to be faster in tests by just ~8ms for 100.000 loops and a string lenght of 1.000</p>

<pre><code>var chars = new char[length];
for (int i = 0; i &lt; length; i++)
{
    chars[i] = RandomChar();
}
return new string(chars);
</code></pre>

<p><code>StringBuilder.ToString</code> <a href="https://referencesource.microsoft.com/mscorlib/a.html#5a97da49a158a3c9" rel="nofollow noreferrer">processes</a> the data in order to build the string. It's quite fast but in this particular situation the minimal overhead is noticable. Generally the <code>StringBuilder</code> is the fastet way to build strings so using it is definitely the right choice.</p>

<hr>

<p>Changing the <code>Random.Next(0, max)</code> to <code>Random.Next(max)</code> improves the performance by another 10ms for the same tests.</p>
    </div>