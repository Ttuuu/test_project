<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm not very good at Javascript, but I do know how to make an algorithm. </p>

<p>In the code below I use the fact that correct <code>{}</code> or <code>[]</code> or <code>()</code> will always touch and can be removed. Just taken these away until there aren't any left and if you've got an empty string it was balanced, if it is not empty then clearly it must be unbalanced.</p>

<pre><code>function isBalanced(input)
{
    while (input.length &gt; 0) {
    var output = input.replace("{}", "").replace("[]", "").replace("()", "");
        if (input == output) return false;
        input = output;
    }
    return true;
}

function test(input)
{
  alert("'"+input+"' = "+(isBalanced(input) ? "Correct" : "Incorrect"));
}

test("(){}[]");
test("([{}])");
test("(}");
test("[(])");
test("[({})](]");
test("(){[}]");
</code></pre>

<p>Someone with a bit more knowledge of Javascript might be able to further optimize this code.</p>

<p>To make it slightly more efficient there's a version with a regular expression:</p>

<pre><code>function isBalanced(input)
{
    while (input.length &gt; 0) {
        var output = input.replace(/\(\)|\{\}|\[\]/, "");
        if (input == output) return false;
        input = output;
    }
    return true;
}
</code></pre>

<p>I think this short code is elegant, but here it is somewhat at the expense of clarity.</p>

<p>Here's why the above code is an improvement:</p>

<ul>
<li>The code is a lot shorter.</li>
<li>The code is easier the read.</li>
<li>There's a simple algorithm that is explained.</li>
</ul>

<p>Yes, the code might be less efficient, and doesn't build on the code in the question, and for that I apologize.</p>
    </div>