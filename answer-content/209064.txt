<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There is still something more...</p>

<hr>

<h3>Warning: working with source collection</h3>

<blockquote>
<pre><code>  /// &lt;summary&gt;
  /// Create an instance with the specified list of source values.
  /// &lt;/summary&gt;
  /// &lt;param name="values"&gt;The source list of values to select from.&lt;/param&gt;
  public RandomSelector(IList&lt;T&gt; values)
  {
#if DEBUG
        if (values == null)
        {
            throw new ArgumentNullException("values == null");
        }
#endif
      shuffler = new IndexShuffler(values.Count);
      this.values = values;
  }
</code></pre>
</blockquote>

<p>Usually it's a very bad idea to work with the source collection because a lot of strange things may happen. It could be cleared from outside or reduced in size, or grow. This will lead to very weird exceptions. Unless it's intended you should create a copy of it or at least use one of the immutable collections.</p>

<hr>

<h3>Dependency incjection missing</h3>

<p>I find it's a good design choice to separate the <code>IndexShuffler</code> and the <code>RandomSelector</code> selected. You could make this even better by creating a <code>IIndexer</code> interface and pass this one as a dependency to the <code>RandomSelector</code>. It'll be easier to test because you could use a <em>Mock</em> and assert that everything is called as expected.</p>

<p>This however would require changing the name of <code>RandomSelector</code> to <code>ValueSelector</code> because now it's no longer guarateed that it's random. It could be anything and the new <code>IIndexer</code> doesn't have to be random anymore. This would also make testing easier because you could create some more predictible <code>IIndexer</code>. And when you decide to use a new, better <code>IndexShufler</code>, it'd be much easer to replace it.</p>

<hr>

<h3>IEnumerable interface missing</h3>

<p>I prefer <code>RandomSelector&lt;T&gt;</code> would implement the <code>IEnumerable&lt;T&gt;</code> interace so that I can use it more the LINQ-way and <em>query</em> its values with <code>.Take(10)</code> instead of using the <code>Select</code> method which by the way should also be named <code>Take</code>. <code>Select</code> is a projection extension/method so seeing it here not doing this is unexpected.</p>

<hr>

<h3>More separation</h3>

<p>I find that <code>SelectWrap</code> should be an <code>IIndexer</code> decorator for the <em>simple</em> <code>Select</code>.</p>
    </div>