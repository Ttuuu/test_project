<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Time and space complexity are just the number of nodes in the graph. You can't do better than this with the API given. If the API were open to negotiation, I'd consider <code>IEnumerable&lt;IReadonlyList&lt;int&gt;&gt;</code>, which would permit better memory characteristics for some trees (e.g. if the level-width stays reasonably constant rather than, say, growing exponentially). There is also no need for this to be an instance method.</p>

<hr>

<p>I don't like this:</p>



<pre class="lang-cs prettyprint-override"><code>if (root == null)
{
    return result;
}
</code></pre>

<p>No-where in the spec is it said that a <code>null</code> input should produce a <code>null</code> output, and this is a design decision which needs to be documented. Without something saying that <code>null</code> should map to <code>null</code>, I'd much prefer an <code>ArgumentNullException</code> which doesn't obscure any assumptions. If this behaviour is wrong, then you'll know the moment you try to use it. If returning <code>null</code> is wrong, it might take you a while to find out where your code messed up. Either behaviour warrents inline documentation. I'd also prefer these sorts of checks were performed straight-away, so that they can't be lost in the other clutter, and in this case avoid unnecessarily allocations.</p>

<p>Similarly, is it specified that <code>Node.children</code> can be <code>null</code>, and that this is supported? If not, then I'd be inclined to remove the check, as it will simplify the code and cause it to blow up if this assumption is violated, forcing the consumer to address the <code>null</code> rather than hoping the behaviour is as expected. (Ideally any constraint would be enforced by the <code>Node</code> class, and I appreciate that isn't yours to change).</p>

<hr>

<p><code>Q</code> isn't a great variable name: it describes what the thing is, which can be confused with its purpose; and because it is capitalised, it feels like a member variable.</p>

<hr>

<p>It would be nicer if the test methods were separated from the functionality. Currently, anyone trying to find <code>aryTreeLevelOrderTraversal.LevelOrder</code> will be confronted with <code>N_aryTreeLevelOrderTraversalTest</code> in their intellisense</p>

<hr>

<p>Personally I don't like this sort of 'staged' consumption of a queue; it just feels fiddily. In this case you can avoid it completely (and save memory) by enumerating over the previous level when you construct the next. This can make the code more-compact, and harder to break (e.g. someone might 'helpfully' inline <code>qSize</code> thinking it's clearer only to break the code completely) with fewer variables whereof to keep track. With a bit of LINQ, we can write (untested):</p>

<pre class="lang-cs prettyprint-override"><code>List&lt;int&gt; level = new List&lt;int&gt; { root };
while (level.Count &gt; 0)
{
    result.Add(level);
    level = level.Where(n =&gt; n.Children != null).SelectMany(n =&gt; n.children).ToList();
}
</code></pre>

<p>There is virtually nothing to go wrong here apart from getting those 2 lines inside the loop the wrong way round. You don't need anything more complex unless performance is a real concern, or you want a lazy implementation, in which case you need to be careful you don't <code>yield</code> state you are about to access:</p>

<pre class="lang-cs prettyprint-override"><code>List&lt;int&gt; level = new List&lt;int&gt; { root };
while (level.Count &gt; 0)
{
    var previous = level;
    level = previous.Where(n =&gt; n.Children != null).SelectMany(n =&gt; n.children).ToList();
    yield return previous;
}
</code></pre>
    </div>