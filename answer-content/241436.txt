<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As mentioned in <a href="https://codereview.stackexchange.com/a/241419/100620">Thomas Weller's post</a>, your <code>for</code> loop only executes a single time.  You want to loop over a <code>range(5)</code>.</p>

<hr>

<p>You may wish to use a <a href="https://docs.python.org/3/library/stdtypes.html?highlight=set#set" rel="nofollow noreferrer"><code>set</code></a> to collect your unique results.  Test for containment using <code>a not in l</code> is an <span class="math-container">\$O(N)\$</span> operation when <code>l</code> is a list, but is <span class="math-container">\$O(1)\$</span> when <code>l</code> is a set, so can be significantly faster.</p>

<p>Moreover, since a <code>set</code> naturally cannot contain duplicate entries, the test for containment before appending the item can be entirely removed and replace with a simple <code>.add(a)</code> call.</p>

<hr>

<p>The <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP-8 -- Style Guide for Python Code</a> recommends a single space on both sides of the <code>=</code> assignment operator.  So <code>l= []</code> should be written as <code>l = []</code>.</p>

<hr>

<p>The variable names <code>l</code> and <code>a</code> are not at all descriptive.  You need to heavily comment the code to explain what these variables are, and what they are for, which you have not done.</p>

<p>Using descriptive names significantly reduces the need to comment the code, as great naming will make the code self documenting.  <code>l</code> could be <code>list_of_origin_headers</code> and <code>a</code> could be <code>an_origin_header</code>.  While those names are very self documenting, they may be too long; brevity is also important.  <code>origin_headers</code> and <code>origin</code> might be sufficient.</p>

<hr>

<p>First reworking, using above points:</p>

<pre><code>import requests

origin_headers = set()

for _ in range(5):
    origin = requests.get("https://google.com", allow_redirects=True).headers['Origin']
    origin_headers.add(origin)

# Convert set back into a list, to match the original design type
origin_headers = list(origin_headers)
</code></pre>

<p>The only tricky point in this code is <code>origin_headers</code> starts off as a set, but becomes a list at the end of the code, so a comment was necessary.</p>

<hr>

<p>The code does something interesting enough to warrant its own function, which improves organization, and provides additional opportunity for documentation.</p>

<pre><code>import requests

def fetch_origin_headers(url: str, repeat: int) -&gt; list:
    """
    Fetch the given URL several times, and return a list containing the unique
    'Origin' headers.
    """

    if repeat &lt; 1:
        raise ValueError("Invalid repeat.  Must be at least 1")

    origin_headers = set()

    for _ in range(repeat):
        origin = requests.get(url, allow_redirects=True).headers['Origin']
        origin_headers.add(origin)

    # Return a list instead of the temporary set
    return list(origin_headers)

if __name__ == '__main__':

    google_origins = fetch_origin_headers("https://google.com", 5)
</code></pre>

<p>In addition to the new function, I've added some basic type-hints and the beginnings of a <code>"""docstring"""</code> to the function.  I've also added a main-guard, so this "test code"(?) fetching the results of <code>https://google.com</code> is not always executed.</p>

<hr>

<p>Now that we've raise the bar a little, your Pythonista would look at the inner loop and think "set comprehension":</p>

<pre><code>def fetch_origin_headers(url: str, repeat: int) -&gt; list:
    """
    Fetch the given URL several times, and return a list containing the unique
    'Origin' headers.
    """

    if repeat &lt; 1:
        raise ValueError("Invalid repeat.  Must be at least 1")

    # Accumulate results in a set, to eliminate duplicates
    origin_headers = { requests.get(url, allow_redirects=True).headers['Origin']
                       for _ in range(repeat) }

    # Return a list instead of the temporary set
    return list(origin_headers)
</code></pre>
    </div>