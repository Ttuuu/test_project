<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This looks good to me.</p>

<p>For efficiency, you have two options:</p>

<ol>
<li><p>Reduce the number of operations in the inner loop. Let's look at that.</p>

<pre><code>for (int j = 0; j &lt; sublen; j++) {
    if (str[j+i] == substr[j]) {
        count++;
        if (count == sublen) {
            return i;
        }
    ...
}
</code></pre>

<p>Here, the addition <code>j+i</code> seems like something you should be able to, somehow, replace with a single initial addition outside the loop, and an increment inside the loop. There also seems to be correlation between <code>j</code> and <code>count</code> (if anyone which line you are on, you'll have either <code>count == j</code> or <code>count == j+1</code>. It follows that the test <code>j &lt; sublen</code> is false if and only if <code>count == sublen</code> it true, so you could probably get rid of one of them.</p>

<p>At this point I want to emphasise that this kind of analysis will give you performance increases so small that they are almost certainly not worth the effort. That leads us to:</p></li>
<li><p>Look for a different algorithm. This is likely the only way to get a significant increase in performance. A good place to start is the classical Boyer-Moore algorithm.</p>

<p>For complexity, recall the inputs:</p>

<pre><code>public static int myIndexOf(char[] str, char[] substr)
</code></pre>

<p>If <code>str</code> is of length n and <code>substr</code> is of length m, your implementation executes the outer loop roughly n times and, in the worst case, each of those n iterations executes the inner loop m times. The running time of your implementation is thus no worse than O(n*m).</p>

<p>When considering space complexity, one should not count the space used for inputs, only the <em>additional</em> space used.  Your implementation uses only a fixed number of variables (<code>len, sublen, count, i</code>) of primitive type. The amount of space it uses is independent of the sizes n and m of the input strings, and so we say that your implementation uses "constant space", written O(1). </p>

<p>Finally, I want to mention that your implementation is not far from the actual implementation of the Java standard library; check it out <a href="http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/7u40-b43/java/lang/String.java#String.indexOf%28java.lang.String%2Cint%29" rel="noreferrer">here</a>.</p></li>
</ol>
    </div>