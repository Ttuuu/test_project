<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Counter</h1>

<p>Great use of <code>Counter</code>. One thing that can be improved, is to use <code>most_common</code> instead of <code>max</code>.</p>

<p>If <code>edges</code> is the Counter of all the edges in the wall, <code>_, max_edges = edges.most_common(1)</code> gives you the index with the most edges, and how many edges it has. Since this is the right side of the wall, you need the 2nd most common element: <code>edges.most_common(2)[1]</code></p>

<h1>aggregating the counter</h1>

<p>Python is batteries included. Whenever you want to do advanced iteration, it can pay to look at the <code>itertools</code> module. For this, you can use <code>accumulate</code> (as @sedsarq notes in his answer) and <code>chain</code>.</p>

<pre><code>edges = collections.Counter(
    chain.from_iterable(accumulate(row) for row in wall)
)
</code></pre>

<hr>

<pre><code>def least_bricks2(wall):
    edges = collections.Counter(
        chain.from_iterable(accumulate(row) for row in wall)
    )
    if len(edges) == 1: # only one brick wide
        return len(wall)
    _, max_edges = edges.most_common(2)[1]  #skipping the right edge of the wall
    return len(wall) - max_edges
</code></pre>
    </div>