<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It would be more efficient to use binary exponentiation.</p>

<p>Suppose that you want to raise an n by n matrix to the <span class="math-container">\$k^{th}\$</span> power.</p>

<p>The current method requires that you do a normal matrix multiplication <span class="math-container">\$k-1\$</span> times.</p>

<p>This of course has complexity <span class="math-container">\$k\$</span> multiplied by <span class="math-container">\$f(n)\$</span>, Where <span class="math-container">\$f(n)\$</span> is the complexity of a matrix multiplication ( This is usually <span class="math-container">\$n^ 3\$</span> unless you write some fancy shmancy code that no one writes)</p>

<p>If you use binary exponentiation you reduce the number of multiplications to <span class="math-container">\$log(k)\$</span>. Specifically the number of multiplications is the ceiling of <span class="math-container">\$log_2(k)\$</span> plus the number of 1 bits in the binary representation of <span class="math-container">\$k\$</span>.</p>

<p>This is of course much more efficient for large values of <span class="math-container">\$k\$</span>.</p>
    </div>