<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I will focus mostly on the object oriented part.</p>
<p>So, to make the code more <em>object oriented</em>, you need more objects. Free methods (i.e. methods that are not part of any class) with a lot of mutable arguments (references to types) are usually a sign that there is an object missing, since we are changing <em>states</em> of other objects.</p>
<p>Let's start by removing the entire logic in the main method. For this, we will create an object "RockScissorPaper", which has a constructor and a play-method, and a sub-set of the variables defined in your main.</p>
<pre><code>class RockPaperScissors
{
public:
    RockPaperScissors();
    void play();

private:
    Player playerScore_ {0}; // suffixing with "_" to mark that these are member variables
    Player enemyScore_ {0};
    const vector &lt;string&gt; choices_ {"Rock", "rock", "Paper", "paper", "Scissor", "scissor", "Q", "q"};
};
</code></pre>
<p>The constructor of RockPaperScissors can be</p>
<pre><code>RockPaperScissors::RockPaperScissors() : 
{
    cout &lt;&lt; "======================================" &lt;&lt; endl;
    cout &lt;&lt; "Rock, Paper, Scissor! - CLI w/ Objects" &lt;&lt; endl;
    cout &lt;&lt; "======================================" &lt;&lt; endl;
};
</code></pre>
<p>.</p>
<p>Now we can put the logic into the play-method. I will move each variable to right before it is used (good practice):</p>
<pre><code>RockPaperScissors::play()
{
  bool gameLoop{true};
  while (gameLoop) {
    cout &lt;&lt; "\nChoose rock, paper, or scissor: " &lt;&lt; endl;
    cout &lt;&lt; "Press Q to quit the game." &lt;&lt; endl;
    string playerChoice {};
    cin &gt;&gt; playerChoice;
    
    if (playerChoice == "Q" || playerChoice == "q") {
        cout &lt;&lt; "Thanks for playing." &lt;&lt; endl;
        gameLoop = false;
        break;
    }
    
    if (inputValidation(choices_, playerChoice) == false) {      //passes vector with valid input and player's input to compare
        cout &lt;&lt; "Invalid input, try again!" &lt;&lt; endl;
        continue;
    }
    
    cout &lt;&lt; "You picked: " &lt;&lt; playerChoice &lt;&lt; endl;
    unsigned int playerIChoice = convertToInt(playerChoice);         //converts valid input into integers to compare with enemy's choice
    
    srand (time(NULL));
    unsigned int enemyRand = rand() % 3;     //generates random number from 0-2
    
    string enemyChoice {};
    printEnemyChoice(enemyRand, enemyChoice);
    checkResult(playerScore_, enemyScore_, playerIChoice, enemyRand);
    
    cout &lt;&lt; "\nYour score is: " &lt;&lt; playerScore_.getScore() &lt;&lt; endl;
    cout &lt;&lt; "Enemy score is: " &lt;&lt; enemyScore_.getScore() &lt;&lt; endl;
  }
}
</code></pre>
<p>Now we can move <code>inputValidation</code>, and <code>checkResult</code> as <em>private</em> methods of RockPaperScissors. <code>printEnemyChoice</code> and <code>convertToInt</code> do not rely on any private members of RockPaperScissors, but are relying on internal logic of the class. I will thus put them there as well, but as <em>static methods</em> of the class.</p>
<pre><code>class RockPaperScissors
    {
    public:
        RockPaperScissors();
        void play();
    
    private:
        void checkResult(unsigned int &amp;playerIChoice, unsigned int &amp;enemyRand);
        bool inputValidation(string pChoice);

        static void printEnemyChoice(unsigned int &amp;enemyRand, string &amp;enemyChoice);    
        static int convertToInt(string pChoice);

        Player playerScore_ {0}; // suffixing with "_" to mark that these are member variables
        Player enemyScore_ {0};
        const vector &lt;string&gt; choices_ {"Rock", "rock", "Paper", "paper", "Scissor", "scissor", "Q", "q"};
    };
</code></pre>
<p>Note that the member methods have less arguments. I also added the last function <em>convertToInt</em> as a <em>static method</em> of RockPaperScissors, since it relies on internal logic of the class. A static method cannot access the state variables, which is fine, since "convertToInt" does not do that.</p>
<p>The play method is now instead</p>
<pre><code>RockPaperScissors::play()
{
  bool gameLoop{true};
  while (gameLoop) {
    cout &lt;&lt; "\nChoose rock, paper, or scissor: " &lt;&lt; endl;
    cout &lt;&lt; "Press Q to quit the game." &lt;&lt; endl;
    string playerChoice {};
    cin &gt;&gt; playerChoice;
    
    if (playerChoice == "Q" || playerChoice == "q") {
        cout &lt;&lt; "Thanks for playing." &lt;&lt; endl;
        gameLoop = false;
        break;
    }
    
    if (inputValidation(playerChoice) == false) {      //passes vector with valid input and player's input to compare
        cout &lt;&lt; "Invalid input, try again!" &lt;&lt; endl;
        continue;
    }
    
    cout &lt;&lt; "You picked: " &lt;&lt; playerChoice &lt;&lt; endl;
    unsigned int playerIChoice = convertToInt(playerChoice);         //converts valid input into integers to compare with enemy's choice
    
    srand (time(NULL));
    unsigned int enemyRand = rand() % 3;     //generates random number from 0-2
    
    string enemyChoice {};
    printEnemyChoice(enemyRand, enemyChoice);
    checkResult(playerIChoice, enemyRand);
    
    cout &lt;&lt; "\nYour score is: " &lt;&lt; playerScore_.getScore() &lt;&lt; endl;
    cout &lt;&lt; "Enemy score is: " &lt;&lt; enemyScore_.getScore() &lt;&lt; endl;
  }
}
</code></pre>
<p>The main method now looks like:</p>
<pre><code>int main() {
    RockPaperScissors rps{};
    rps.play();
    return 0;
}
</code></pre>
<p>Now you have one <em>main</em> game class, and a person class. A next step could be to refactor "Rock","Paper","Scissors"-logic to a separate class - so that the main class does not need to have the responsibility of this. It's good practice to create as small classes as possible, each of them having a specific goal.</p>
    </div>