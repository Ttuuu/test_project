<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As TorbenPutkonen already said, the good way to improve the performance of your solution is relying on primitive types using <code>Arrays.sort(int[]</code> and rewriting of loop as he suggested. I add my thoughts and code, consider that for your interviewer can be edge cases like o or 1 toy blocks , in this case the shortest time is equal to <code>0</code>. Now you can use a method having as parameter an <code>int[]</code> array to avoid use of <code>Integer</code> class and operations of boxing and unboxing:</p>

<pre><code>public static int shortestAssemblyTime(int[] arr) {
    int n = arr.length;
    if (n &lt; 2) { return 0; }  //&lt;-- edge cases 0, 1
    int[] copy = Arrays.copyOf(arr, n);
    Arrays.sort(copy);
}
</code></pre>

<p>I created a copy of the original array, because for me the method is supposed to not modify the original array passed as parameter and I added the <code>static</code> modifier. Once you have the copy ordered inside the method, you can calculate the shortest time like the code below:</p>

<pre><code>int shortestTime = 0;
int toylength = copy[0];
for (int i = 1; i &lt; n; ++i) {
    toylength += copy[i];
    shortestTime += toylength;
}
return shortestTime;
</code></pre>

<p>Below the code of the class Assembly.java with main method including one test:</p>

<pre><code>import java.util.Arrays;

public class AssemblyTime {

    public static int shortestAssemblyTime(int[] arr) {
        int n = arr.length;
        if (n &lt; 2) { return 0; }
        int[] copy = Arrays.copyOf(arr, n);
        Arrays.sort(copy);
        int shortestTime = 0;
        int toylength = copy[0];
        for (int i = 1; i &lt; n; ++i) {
            toylength += copy[i];
            shortestTime += toylength;
        }
        return shortestTime;
    }

    public static void main(String[] args) {
        int[] arr = new int[]{5, 2, 8, 4};
        System.out.println(AssemblyTime.shortestAssemblyTime(arr)); // print 36
    }
}
</code></pre>
    </div>