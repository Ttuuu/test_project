<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In addition to mtj's answer:</p>

<p>Why your code example is bad in my opinion:</p>

<ul>
<li>The main job of a constructor is not "<em>to do stuff</em>", that's the job of methods - that's why their names should have at least one verb in them. Sometimes, yes, it's more complicated and takes more effort, to do work not in the constructor, but imo that's quite rare and there's patterns to work around this problem.</li>
<li>Of course, testing. Setting things up for the simplest test cases takes way too much effort. Just for that reason I try to keep constructors as simple as possible. I don't know anyone who once had a really hard time to write test cases for types with bloated constructors who do not try to keep their constructors <em>tidy</em> afterwards.</li>
<li>This type is <em>tightly coupled</em> to its dependencies, it can't work without them and it is dependent on their correct behavior. And since this type which is, if I understand correctly, is part of the presentation layer and provides data to show to the ui, it also violates the SRP principle. It does provide data for the ui and it loads that data. </li>
<li>Inheritance: If you'd like to use some inheritance to extend some behavior, you will have a hard time, especially if you want to change the <em>behavior</em>. Which is, in that case, close to impossible.</li>
<li>For some reason, there are creational patterns, and I guess this is the main point, e.g. the Builder pattern: "<em>The Builder is a design pattern designed to provide a flexible solution to various object creation problems in object-oriented programming. <strong>The intent of the Builder design pattern is to separate the construction of a complex object from its representation</strong></em>" [wikipedia]. So basically: If you have a hard time to construct your object, e.g. using a lot of parameters, do a lot of calculations, just decouple the construction.</li>
</ul>
    </div>