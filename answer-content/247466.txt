<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Algorithm</h1>
<p>If you look at your code, and follow the <code>if-elif</code> part, you see that there are 4 combinations of <code>i</code> and <code>j</code></p>
<blockquote>
<pre><code>i      j     : result
True,  True  : A
False, True  : B
True,  False : C
False, False : D
</code></pre>
</blockquote>
<p>If you use the tuple <code>(i, j)</code> as key, you can use a dict lookup</p>
<pre><code>{
    (True, True): "A",
    (False, True): "B",
    (True, False): "C",
    (False, False): "D",
}
</code></pre>
<p>Or simpler:</p>
<pre><code>{
    (True, True): 3,
    (False, True): 1,
    (True, False): 2,
    (False, False): 0,
}
</code></pre>
<p>The choice of numbers is deliberate, since when you use <code>True</code> as <code>1</code> and <code>False</code> as <code>0</code>, you can do</p>
<pre><code>def crosstab2(label, presence):
    for i, j in zip(label, presence):
        yield i * 2 + j

c = collections.Counter(crosstab2(label, presence))
print('A:',c[3],'B:',c[1],'C:',c[2],'D:',c[0])
</code></pre>
<p>This is not faster than your original solution, but this is something you can vectorize</p>
<pre><code>label = np.array([True, True, False, False,False, False,True, False, False, True, True, True, True, False])
presence = np.array([True, False, False, True, False, False, True, True, False, True, False, True, False, False])
c = collections.Counter(label * 2 + presence)
print('A:',c[3],'B:',c[1],'C:',c[2],'D:',c[0])
</code></pre>
<p>Which is significantly faster, even if you account for the few seconds of overhead for the creation of the numpy arrays</p>
<h1>Formatting</h1>
<p>Try to follow pep8.</p>
<ul>
<li>spaces around operators (<code>=</code>, <code>+</code>, ...)</li>
<li>spaces after a <code>,</code></li>
</ul>
<h1>naming</h1>
<p>I try to give collections of elements a plural name. In this case, I would use <code>labels</code>., so if you ever need to iterate over them, you can do <code>for label in labels</code>, which is a lot more clear than <code>for i in label:</code></p>
<h1><code>list</code></h1>
<p>The extra call to <code>list</code> in <code> zip(list(label),list(presence))</code> is not necessary. <code>zip</code> takes any iterable, and doesn't modify it in place.</p>
    </div>