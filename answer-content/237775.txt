<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You include <code>Option Explicit</code> :+1 for that alone.</p>

<hr>

<p><code>Range</code> without any explicit worksheet implicitly is working off of whatever worksheet happens-to-be-active-at-the-time-that-code-is-executed. This will eventually blow up on you. Always qualify your <code>Range</code>s with a worksheet IE <code>Sheet1.Range("...")</code> so there is no doubt as to what sheet you're referring to.</p>

<hr>

<p>You have a typo in <code>Public Property Let CustomerAddres(value As String)</code>. You're missing the second <code>s</code></p>

<hr>

<p>Within <code>Public Sub EntryB5</code> you have <code>Sheet7.Visible = xlSheetVisible 'Checklist</code>. That comment is a signpost. That signpost says "Rename your worksheet objects so this comment can go away.". Display the Project Explorer from the View menu&gt;Project Explorer (Hotkey: <code>Ctrl+R</code>), select Sheet7 from the Project Explorer and then displaying the Properties Window (Hotkey: <code>F4</code>). The first item in the properties window is (Name) which is actually the <a href="https://docs.microsoft.com/en-us/office/vba/api/excel.worksheet.codename" rel="nofollow noreferrer">Worksheet.CodeName property</a>. Name it something appropriate. I've used <code>ChecklistWorksheet</code> which changes your original code</p>

<pre><code>Sheet7.Visible = xlSheetVisible 'Checklist
</code></pre>

<p>to</p>

<pre><code>ChecklistWorksheet.Visible = xlSheetVisible
</code></pre>

<p>Absolutely no need for the comment any longer. Strive to make your code be self documenting. What the code is doing should immediately be apparent. <em>If</em> there's a need to describe <em>why</em> something is coded in a particular way <em>that</em> then warrants a comment. An example of this would be explaining why you're using <code>CreateObject("System.Collections.ArrayList")</code>.</p>

<hr>

<p>Public variables. I say stick them in a module that's named <code>PublicVariables</code>. Then whenever one of these variables is used, qualify it with the module name. Again in <code>EntryB5</code> you have DATAENTRY</p>

<pre><code>With DATAENTRY
</code></pre>

<p>when qualified with the module name you have</p>

<pre><code>With PublicVariables.DATAENTRY
</code></pre>

<p>Now when future-you or another code (could be you 6 months from now) sees this line it's immediately apparent where this variable is coming from.</p>

<hr>

<p>Module level variables. As was already mentioned in the comments the <a href="http://rubberduckvba.com/" rel="nofollow noreferrer">Rubberduck</a> (RD) add-in has an inspection for this <a href="http://rubberduckvba.com/Inspections/Details/ModuleScopeDimKeyword" rel="nofollow noreferrer">ModuleScopeDimKeyword</a></p>

<blockquote>
  <p>Private module variables should be declared using the 'Private' keyword. While 'Dim' is also legal, it should preferably be restricted to declarations of procedure-scoped local variables, for consistency, since public module variables are declared with the 'Public' keyword.</p>
</blockquote>

<p>***Disclosure: I'm a contributing member. Just a tad biased in favor of it.</p>

<hr>

<p>You already stated the names with underscores in them are inherited code you're working through. That being said <code>_</code> are used as part of the <a href="https://docs.microsoft.com/en-us/office/vba/Language/Reference/User-Interface-Help/implements-statement" rel="nofollow noreferrer">Implements statement</a> for implementing an interface and bringing it to your attention.</p>

<p>I saw a few parameters <code>Wire_Type</code> that use underscores. camelCase is typical for VBA parameters and local variables whereas PascalCase is used for Sub/Function (member) names. This would result in <code>wireType</code> as a replacement.</p>

<hr>

<p>Your sub <code>Hide_All</code> has a loop within a loop. I prefer having the worksheet CodeNames in a table on a worksheet. That worksheet, whose CodeName was updated to <code>HideSheetsLookup</code>, has a ListObject containing the sheets you want to hide. It also has a function, shown below, that can be called to check whether a sheet should be hidden. The <a href="https://docs.microsoft.com/en-us/office/vba/language/reference/user-interface-help/me-keyword" rel="nofollow noreferrer">Me keyword</a> returns a reference to the sheet that code is written for.</p>

<pre><code>Public Function ShouldBeHidden(ByVal worksheetCodeName As String) As Boolean
    Dim foundCell As Range
    Set foundCell = Me.ListObjects("HideSheetTable").DataBodyRange.Find(What:=worksheetCodeName, LookAt:=XlLookAt.xlWhole)

    ShouldBeHidden = Not foundCell Is Nothing
End Function
</code></pre>

<p>That function is then called as below.</p>

<pre><code>For Each sh In ThisWorkbook.Worksheets
    sh.Visible = Not HideSheetsLookup.ShouldBeHidden(sh.CodeName)
Next sh
</code></pre>

<p>This edit changes the original code from a quadratic O(n^2) to a linear O(n).</p>

<p>The table works off the Workheet.CodeName and also won't break if/when a user renames the Worksheet.Name.</p>

<hr>

<p>Within <code>EntryB7</code> and a few others you have a <a href="https://docs.microsoft.com/en-us/office/vba/language/reference/user-interface-help/with-statement" rel="nofollow noreferrer">With statement</a> that's not doing anything. Remove those with blocks.</p>

<pre><code>With ThisWorkbook
    Sheet9.Visible = xlSheetVisible  'Checklist-Cash Management
    Sheet14.Visible = xlSheetVisible 'Confirmation-Outgoing-3
End With
</code></pre>

<hr>

<p>Static cell ranges. <code>PublicVariables.DATAENTRY.Range("B4")</code> may not always be in cell B4. If you add a insert/delete a row above or a column to the left those cells will shift causing those static addresses to no longer do what you want/expect it to. Use named ranges instead because they'll shift with without issue.</p>

<p>Another benefit of this is it helps aid in code self documenting itself. "B4" has no meaning whereas a descriptive name like <code>Range("CustomerName")</code> is infinitely better.</p>

<hr>

<p>Using Line continuation <code>_</code> as part of a single Dim statement is a code smell. Dim each variable on its own line just before you use it. Because they are already within a dedicated function <code>getCIFDBGrabSQL</code> it won't matter having 3 extra lines.</p>

<hr>

<p>Implicitly accessing default members. The code below is implicitly accessing the [_Default] member.</p>

<pre><code>Dim foo As String
foo = Sheet1.Range("A1")
</code></pre>

<p>Fully qualify your member calls to make it explicitly clear what you're accessing. This way you unambiguously show what you want.</p>

<pre><code>foo = Sheet1.Range("A1").Value2
</code></pre>

<hr>

<p>Copy paste coding. <code>CIFGrab</code> has duplicated code for <code>Case Is = "OutGoingLoan"</code> and <code>Case Is = "OutGoingCM"</code>. Possibly others but I'm not going to compare every single group. You're assigning values to ranges and by paramaterizing a Sub you reduce redundant code.</p>

<pre><code>Private Sub AssignValuesTo(ByVal customer As WireCustInfo, _
                            ByVal customerName As Range, _
                            ByVal customerAddress As Range, _
                            ByVal customerCityStateZip As Range, _
                            ByVal customerPhoneNumber As Range, _
                            ByVal customerBSA As Range)
    customerName.Value2 = customer.customerName
    customerAddress.Value2 = customer.customerAddress
    customerCityStateZip.Value2 = customer.customerCityStateZip

    Const PhoneFormat As String = "(###) ###-####"
    If customer.customerHomePhone = 0 Then
        customerPhoneNumber.Value2 = Format(customer.customerCellPhone, PhoneFormat)
    ElseIf customer.customerCellPhone = 0 Then
        customerPhoneNumber.Value2 = Format(customer.customerHomePhone, PhoneFormat)
    Else
        customerPhoneNumber.Value2 = vbNullString
    End If

    customerBSA.Value2 = customer.customerBSA
End Sub
</code></pre>

<p>Now has a call site as below.</p>

<pre><code>Case Is = "OutGoingLoan"
    With PublicVariables.DATAENTRY
        AssignValuesTo tDBGrabRecord, .Range("308"), .Range("309"), .Range("310"), .Range("311"), .Range("312")
    End With
Case Is = "OutGoingCM"
    With PublicVariables.DATAENTRY
        AssignValuesTo tDBGrabRecord, .Range("408"), .Range("409"), .Range("410"), .Range("411"), .Range("412")
    End With
</code></pre>

<hr>

<p>Create dedicated Subs. The wire type that's Deposit or Loan</p>

<pre><code>If Wire_Type = "Deposit/Loan" Then
    destWS.Range("A222:A243").EntireRow.Hidden = False
    destWS.Range("A267:A299").EntireRow.Hidden = False
    destWS.Range("A244:A266").EntireRow.Hidden = True
    destWS.Range("B206") = srcWS.Cells(Row, 5)   'CIF NUmber
    'destWS.Range("B507") = srcWS.Cells(Row, 6)   'Name
    'destWS.Range("B508") = srcWS.Cells(Row, 7)   'Address
    'destWS.Range("B509") = srcWS.Cells(Row, 8)   'City State Zip
    'destWS.Range("B510") = srcWS.Cells(Row, 9)   'Telephone Number
    destWS.Range("B216") = srcWS.Cells(Row, 15)  'Customer Account Number
    destWS.Range("B217") = srcWS.Cells(Row, 16)  'Account Number to Fund Wire
    destWS.Range("B227") = srcWS.Cells(Row, 17)  'Domestic/International
    Select Case LCase$(srcWS.Cells(Row, 17))
    'THIS HANDLES FINANCIAL INSTITUTION INFO FOR RECURRING INFO FOR DOMESTIC WIRES
        Case Is = "domestic"
            destWS.Range("B229") = srcWS.Cells(Row, 19)  'Financial Institution Name
            destWS.Range("B230") = srcWS.Cells(Row, 20)  'Routing ABA Number
            destWS.Range("B231") = srcWS.Cells(Row, 21)  'Financial Institution Phone Number
            destWS.Range("B232") = srcWS.Cells(Row, 22)  'Financial Institution Address
            destWS.Range("B233") = srcWS.Cells(Row, 23)  'Beneficiary Name
            destWS.Range("B234") = srcWS.Cells(Row, 24)  'Beneficiary Account Number
            destWS.Range("B235") = srcWS.Cells(Row, 25)  'Beneficiary Physical Address
            destWS.Range("B237") = srcWS.Cells(Row, 27)  'Intermediary Financial Institution Name
            destWS.Range("B238") = srcWS.Cells(Row, 28)  'Intermediary Financial ABA/Routing Number
            destWS.Range("B239") = srcWS.Cells(Row, 29)  'Intermediary Address
            destWS.Range("B240") = srcWS.Cells(Row, 30)  'Intermediary Account Number
        Case Is = "international"
    End Select
</code></pre>

<p>Can be refactored to something similar to what's below.</p>

<pre><code>Private Sub DepositOrLoanWireType(ByVal hideEntireRowOfCells As Range, _
                                    ByVal displayEntireRowOfCells As Range, _
                                    ByVal destWS As Worksheet, _
                                    ByVal srcWS As Worksheet, _
                                    ByVal sourceRow As Long)
    displayEntireRowOfCells.EntireRow.Hidden = False
    hideEntireRowOfCells.EntireRow.Hidden = True

    'Figure out logic to supply ranges on destination worksheet
    destWS.Range("B206").Value2 = srcWS.Range("CIFNumber").Value2
    destWS.Range("B216").Value2 = srcWS.Range("CustomerAccountNumber").Value2
    destWS.Range("B217").Value2 = srcWS.Range("AccountNumberToFundWire").Value2
    destWS.Range("B227").Value2 = srcWS.Range("DomesticOrInternational").Value2

    'THIS HANDLES FINANCIAL INSTITUTION INFO FOR RECURRING INFO FOR DOMESTIC WIRES
    If LCase$(srcWS.Cells(sourceRow, 17).value) = "domestic" Then
        destWS.Range("B229").Value2 = srcWS.Range("FinancialInstution").Value2
        destWS.Range("B230").Value2 = srcWS.Range("RoutingABANumber").Value2
        destWS.Range("B231").Value2 = srcWS.Range("FinancialInstitutionPhoneNumber").Value2
        destWS.Range("B232").Value2 = srcWS.Range("FinancialInstitutionAddress")
        destWS.Range("B233").Value2 = srcWS.Range("BeneficiaryName").Value2
        destWS.Range("B234").Value2 = srcWS.Range("eneficiaryAccountNumber").Value2
        destWS.Range("B235").Value2 = srcWS.Range("BeneficiaryPhysicalAddress").Value2
        destWS.Range("B237").Value2 = srcWS.Range("IntermediaryFinancialInstitutionName").Value2
        destWS.Range("B238").Value2 = srcWS.Range("IntermediaryFinancialABARoutingNumber").Value2
        destWS.Range("B239").Value2 = srcWS.Range("IntermediaryAddress").Value2
        destWS.Range("B240").Value2 = srcWS.Range("IntermediaryAccountNumber").Value2
    End If
End Sub
</code></pre>

<p>Which is now called as below.</p>

<pre><code>If wireType = "Deposit/Loan" Then
    DepositOrLoanWireType destWS.Range("A244:A266"), _
                            Union(destWS.Range("A222:A243"), destWS.Range("A267:A299")), _
                            destWS, _
                            srcWS, _
                            foundCell.Row

</code></pre>

<p>By repeating this process you end up with a much higher viewpoint (abstraction level) when looking at the code. You care about <em>what it's doing</em>, not <em>how it's being done</em>. Naming these Subs appropriately will do this for you. You won't be getting lost in any details as you review the main high level idea. If you <em>do</em> need to know how things are being done, <em>then</em> you can look into those subs.</p>

<hr>

<p>Within <code>InternalWireType</code> you have <code>Foo.Select</code> immediately followed by <code>Selection.Bar</code>. You rarely need to actually select whatever it is. Shorten it by putting them directly together.</p>

<pre><code>destWS.Range("B601:B699").Select
Selection.ClearContents
</code></pre>

<p>shortens to</p>

<pre><code>destWS.Range("B601:B699").ClearContents
</code></pre>

<p>The same goes for</p>

<pre><code>srcWS.Range(srcWS.Cells(sourceRow, 2), srcWS.Cells(sourceRow, 6)).Copy
destWB.Activate
destWS.Range("B604").Select
Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=True
</code></pre>

<p>which becomes</p>

<pre><code>srcWS.Range(srcWS.Cells(sourceRow, 2), srcWS.Cells(sourceRow, 6)).Copy
destWS.Range("B604").PasteSpecial Paste:=xlPasteValues, Transpose:=True
</code></pre>

<hr>

<p>The use of a private helper type as a backing field for classes simplifies things, a lot. Below is how I implemented it and greatly simplifies things. Use properties even if they do nothing other than grab the backing field. It may seem like a redundant process but once you need validation logic before assigning to the backing field or retrieving it's value then you'll be glad you did.</p>

<pre><code>Option Explicit

Private Type THelper
    Name As String
    Address As String
    CityStateZip As String
    Zip As String
    HomePhone As String
    CellPhone As String
    Phone As String
    BSA As String
    TableName As String
    ErrNumber As Long
End Type

Private this As THelper

Public Property Get Name() As String
    Name = this.Name
End Property

Public Property Let Name(value As String)
    Name = value
End Property

Public Property Get Address() As String
    Address = this.Address
End Property

Public Property Let Address(value As String)
    Address = value
End Property

Public Property Get CityStateZip() As String
    CityStateZip = this.CityStateZip
End Property

Public Property Let CityStateZip(value As String)
    CityStateZip = value
End Property

Public Property Get Zip() As String
    Zip = this.Zip
End Property

Public Property Let Zip(value As String)
    Zip = value
End Property

Public Property Get HomePhone() As String
    HomePhone = this.HomePhone
End Property

Public Property Let HomePhone(value As String)
    HomePhone = value
End Property

Public Property Get CellPhone() As String
    CellPhone = this.CellPhone
End Property

Public Property Let CellPhone(value As String)
    CellPhone = value
End Property

Public Property Get BSA() As String
    BSA = this.BSA
End Property

Public Property Let BSA(value As String)
    BSA = value
End Property
</code></pre>

<hr>

<p>There's more that can be done but this enough for now.</p>
    </div>