<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think null is reasonable if you consider its semantics to include being <em>undefined</em> that trying to avoid null often results in over engineering solutions.  My solution includes a much more elegant and reusable approach to <code>fromValue</code>() function that can be readily used with numeric or String value enums.</p>

<p>However if you must return some value I would do it this way, simply create your own version of undefined.  This is the solution I used when I want something that amounts to PENDING definition at the user data level.</p>

<pre><code>public class EnumTest {
    public enum TestEnum {
        UNDEFINED(0),
        A(1),
        B(2);

        private final int number;
        private TestEnum(final int coValue) {
            this.number = coValue;
        }
        public static TestEnum fromValue(final int coValue) {
            for (final TestEnum value : values()) {
                if (value.number == coValue) {
                    return value;
                }
            }
            // return null; or
            return UNDEFINED;
        }
    }

    @Test
    public void testMissing() {
        assertEquals(TestEnum.UNDEFINED, TestEnum.fromValue(Integer.MIN_VALUE));
        assertEquals(TestEnum.UNDEFINED, TestEnum.fromValue(0));
        assertEquals(TestEnum.A, TestEnum.fromValue(1));
        assertEquals(TestEnum.B, TestEnum.fromValue(2));
        assertEquals(TestEnum.UNDEFINED, TestEnum.fromValue(Integer.MAX_VALUE));
    }
}
</code></pre>
    </div>