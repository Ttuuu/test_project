<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Use of <code>static</code> in a lambda is okay, but it might not be what you want.</p>

<p>If you use <code>static</code>, the variable is persistent over lambda instantiations. If the behaviour you want is instead equivalent to dependency injection, you may consider using the <code>mutable</code> keyword.</p>

<p>The following code illustrates the difference:</p>

<pre><code>void foo() {
   auto f = [k=int(1)]() mutable { cout &lt;&lt; k++ &lt;&lt; "\n";}; // define k in the capture
   f();
   f();
}

void bar() {
   auto f = []() { static int k = 1; cout &lt;&lt; k++ &lt;&lt; "\n";}; // define k as static
   f();
   f();
}

void test() {
   foo();
   foo();  // k is reset every time the lambda is created
   bar();
   bar();  // k is persistent through lambda instantiations
}
</code></pre>
    </div>