<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>def divisor_generator(n):
    '''Generates the divisiors of input num'''
    large_divisors = []
    for i in range(1, int(math.sqrt(n) + 1)):
        if n % i == 0:
            yield i
            if i*i != n:
                large_divisors.append(n / i)
    for divisor in reversed(large_divisors):
        yield divisor
</code></pre>
</blockquote>

<p>I would rename this just <code>divisors</code>, but other than that it seems like a reasonable general-purpose divisor enumerator for very small numbers with a couple of caveats: the doc comment has a typo and uses the wrong name for the input, and if this is supposed to work in Python 3 (which I'm guessing it is from the use of <code>range</code> rather than <code>xrange</code>) then it should use integer division: <code>n // i</code>.</p>

<p>However:</p>

<ol>
<li>This task doesn't call for a general-purpose divisor enumerator. IMO it would make more sense to return pairs <code>(i, n // i)</code>.</li>
<li>To scale to larger numbers it's worth finding the prime factorisation and constructing the divisors from them. The best way I know to do that is to build an array like Eratosthenes' sieve, but instead of storing a Boolean to indicate prime/composite store a prime divisor. (I generally store the lowest prime divisor, but it depends on what you want to do with it). Then you can find the prime factorisation by chaining down the array.</li>
</ol>

<hr>

<blockquote>
<pre><code>def is_prime(n):
    '''simple prime tester'''
    if n == 2 or n == 3 :
        return True
    for i in range(2,int(n**(1/2))+1):
        if n % i == 0:
            return False
    return True
</code></pre>
</blockquote>

<p>If you're going to be testing a lot of numbers from just over 0 to N for primality then you definitely want to use a sieve, effectively testing them in parallel and caching the results.</p>

<p>There are a couple of PEP8 violations in this function: space before colon, no space after comma.</p>

<hr>

<blockquote>
<pre><code>def test_condition (divisor_array, num):

    ''' Testing the condition of d+n/d by taking the input as array of divisor and num'''

    if len(divisor_array) %2 != 0: # the divisors of num = d3 is [1,d2,d3], and d2*d2=d3 hence d2+d3/d2 = 2d2 which is not prime
        return False
</code></pre>
</blockquote>

<p>Nice special case, but it can be generalised a <em>long</em> way. How can you restate the test "<code>num</code> can be split as <code>i</code> and <code>num/i</code> which are not coprime"?</p>

<p>Argue this through all the way and it gives you a completely different high-level algorithm which should be much more efficient. But since this is Project Euler, I'm not going to say more than that hint.</p>

<blockquote>
<pre><code>    if sum(divisor_array) %2 != 0: # the divisors of num = d4, [1,d2,d3,d4] (1+d4)=Prime and (d2+d3)==Prime hence sum([1,d2,d3,d4]) must be even
        return False
</code></pre>
</blockquote>

<p>I don't think I follow this argument. Why does the sum of more than two factors matter?</p>

<blockquote>
<pre><code>    if len(divisor_array)%2 == 0:
</code></pre>
</blockquote>

<p>This condition is unnecessary, because if it failed then we've already returned <code>False</code>.</p>

<blockquote>
<pre><code>        for i in range(len(divisor_array)//2):
            if is_prime(divisor_array[i] + divisor_array[-i-1]) == False:
                return False
        return True
</code></pre>
</blockquote>

<p>It would be more Pythonic to use <code>all(comprehension)</code>. Also, this highlights my point about returning pairs of divisors rather than using a general-purpose divisor enumerator.</p>
    </div>