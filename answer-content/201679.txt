<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is a nice idea, and I'm only going to comment on some of the generic bits of the F#:</p>

<blockquote>
<pre><code>if task.Status = TaskStatus.Canceled
then tcs.SetCanceled()
elif task.Status = TaskStatus.Faulted
then tcs.SetException(task.Exception)
else tcs.SetResult()
</code></pre>
</blockquote>

<p>I recommend using a <code>match</code> on <code>task.Status</code> here. It reads cleaner, is more maintainable, and fits more in with the "functional" patterns of F#:</p>

<pre><code>match task.Status with
| TaskStatus.Canceled -&gt; tcs.SetCanceled()
| TaskStatus.Faulted -&gt; tcs.SetException(task.Exception)
| _ -&gt; tcs.SetResult()
</code></pre>

<hr>

<blockquote>
<pre><code>let start = await Async.Start &lt;| fun t -&gt; if t.Status = TaskStatus.Created then t.Start()
</code></pre>
</blockquote>

<p>Oof...clever, but ugly. I never liked using the <code>&lt;|</code> to avoid parenthesis in lambda'sâ€”I've always preferred using the <code>(fun ...)</code> approach, as it reads more clearly and lets you view the scope more properly. This is mostly a "personal" belief.</p>

<hr>

<blockquote>
<pre><code>let bind f = function
| AsyncWorkflow a -&gt; 
    async.Bind(a, f &gt;&gt; toAsync) |&gt; AsyncWorkflow        
| DotNetTask t -&gt; t.ContinueWith(fun (c: Task&lt;_&gt;) -&gt; 
    (c.Result |&gt; f |&gt; toTask)).Unwrap() |&gt; DotNetTask
</code></pre>
</blockquote>

<p>I hate the formatting here, and always have. If you have to put <em>any</em> lines of a function on the next line, then do that with <strong>all</strong> of them. Same with the case of <code>DotNetTask t</code>, if you are putting any of a <code>match</code> case on a new line, do that with the whole thing. Additionally, I like to treat parenthesis (<code>()</code>) as I would braces (<code>{}</code>), and close them on a new line if I'm multi-lining the body:</p>

<pre><code>let bind f =
    function
    | AsyncWorkflow a -&gt; 
        async.Bind(a, f &gt;&gt; toAsync) |&gt; AsyncWorkflow        
    | DotNetTask t -&gt;
        t.ContinueWith (fun (c: Task&lt;_&gt;) -&gt; 
            (c.Result |&gt; f |&gt; toTask)
        ).Unwrap()
        |&gt; DotNetTask
</code></pre>

<p>Sure, it's a few more lines, but it tends to follow more clearly. Additionally, don't discriminate between <code>name(</code> and <code>name (</code> for .NET / BCL methods vs. F# functions, I always put the arguments (even if tupled) with a space between the name and opening parenthesis.</p>

<hr>

<p>Another critique on your <code>if</code>'s:</p>

<blockquote>
<pre><code>let rec doWhile guard a = 
    if guard ()
    then bind (fun () -&gt; doWhile guard a) a
    else Task.FromResult() |&gt; DotNetTask
</code></pre>
</blockquote>

<p>I never liked putting the <code>then</code> on a newline, I always do <code>if ... then\r\n\t</code>, so:</p>

<pre><code>let rec doWhile guard a = 
    if guard () then
        bind (fun () -&gt; doWhile guard a) a
    else
        Task.FromResult() |&gt; DotNetTask
</code></pre>

<p>This helps it read better, and follow more clearly. Likewise, if I do it with one <code>if ... then</code> case, I do it with them all.</p>

<hr>

<p>You compose here:</p>

<blockquote>
<pre><code>let sleep = Async.Sleep &gt;&gt; AsyncWorkflow
</code></pre>
</blockquote>

<p>But not here:</p>

<blockquote>
<pre><code>let ofEvent event = Async.AwaitEvent event |&gt; AsyncWorkflow
</code></pre>
</blockquote>

<p>Why not? Was there an issue? Why not write it as:</p>

<pre><code>let ofEvent = Async.AwaitEvent &gt;&gt; AsyncWorkflow
</code></pre>

<hr>

<p>Otherwise, everything looks pretty good. A couple minor whitespace tweaks I'd make, but I won't comment on them (as it's highly personal preference, and can be quite nit-picky).</p>
    </div>