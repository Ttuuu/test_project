<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>First, get rid of all the unneeded whitespace. Use consistent amount between functions (Python's official style-guide, <a href="https://www.python.org/dev/peps/pep-0008/" rel="noreferrer">PEP8</a>, recommends two).</p></li>
<li><p>PEP8 also recommends using spaces in lists, after the commas, and <code>lower_case</code> for all variables and functions (your <code>T</code> in <code>threshold_slow</code> violates this).</p></li>
<li><p>Don't use magic numbers in your code. Give them readable names and if necessary make them global constants:</p>

<pre><code>WIDTH, HEIGHT = 640, 480
</code></pre></li>
<li><p>Next, since your images are already <code>numpy</code> arrays, use that fact. Your (unused) <code>threshold_slow</code> function can be replaced by a single line using <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.where.html" rel="noreferrer"><code>numpy.where</code></a>:</p>

<pre><code>def threshold_fast(T, image):
    return np.where(image &gt;= T, 255, 0)
</code></pre>

<p>Note that this does not modify the image inplace. It is a bad practice to do that <em>and</em> return a modified/new object. You should decide, either return a new object <em>or</em> modify in place and return <code>None</code>.</p></li>
<li><p>The <code>import cv</code> is not used (and I could not even find a way to install it anymore).</p></li>
<li><p>Tuple assignment works also without a list on the left side, just do <code>color, b, g, r, y, p = grab_frame(cam)</code>. The same is true when returning a tuple (<code>return color, b, g, r, y, p</code>).</p></li>
<li><p>Arguably, I would split up your <code>grab_frame</code> code into subfunctions like <code>red(image)</code>, <code>green(image)</code>, <code>blue(image)</code>, <code>yellow(image)</code>, <code>black_and_white(image)</code>.</p>

<pre><code>def red(image):
    """Copy only the red channel from image"""
    out = np.zeros_like(image)
    # for some reason red is in the last channel
    out[:, :, 2] = image[:, :, 2]
    return out
...
</code></pre>

<p>While this move will not make your code shorter, it will make it more readable.</p></li>
<li><p>Note that the canonical order is red, green, blue (RGB). If at all possible I would stick to that. I'm not sure why openCV would deviate from that.</p></li>
<li><p>You should at least add a <a href="https://www.python.org/dev/peps/pep-0257/" rel="noreferrer"><code>docstring</code></a> to each of your functions as a rudimentary documentation. See above for a short example.</p></li>
<li><p>You can use <code>while True</code> instead of <code>while(1)</code>. No parenthesis needed and <code>True</code> is unambiguous (even for those people who both know C-like languages, where <code>0</code> is <code>False</code> and shell scripting languages like bash, where non-zero is <code>False</code>).</p></li>
<li><p>I would also add a <code>tile(images, rows)</code> function that puts your images into rows and columns. You could just use the <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="noreferrer"><code>itertools</code> recipe</a> <code>grouper</code> for this:</p>

<pre><code>from itertools import zip_longest

def grouper(iterable, n, fillvalue=None):
    "Collect data into fixed-length chunks or blocks"
    # grouper('ABCDEFG', 3, 'x') --&gt; ABC DEF Gxx"
    args = [iter(iterable)] * n
    return zip_longest(*args, fillvalue=fillvalue)
</code></pre></li>
<li><p>Since you <a href="https://codereview.stackexchange.com/questions/233347/pyopencv-code-that-displays-color-b-w-and-canny-images-input-from-single-live-w">seem to want to use different amounts of tiles, and different effects</a>, it might make sense to keep a list of functions to apply to the base image, so that in the end you only need one call:</p>

<pre><code>def identity(x):
    return x

def tile(images, cols, fillvalue=None):
    return np.vstack(np.hstack(group)
                     for group in grouper(images, cols, fillvalue))

funcs = identity, red, black_and_white, canny
images = (func(image) for func in funcs)
# arrange them in a 2x2 grid
cv2.imshow('HORIZONTAL', tile(images, cols=2, fillvalue=np.zeros_like(image)))
</code></pre>

<p>If the number of images is not evenly divisible by the number of columns, the row is filled up with blank images.  </p></li>
<li><p>You should put your main calling code under a <a href="http://stackoverflow.com/questions/419163/what-does-if-name-main-do"><code>if __name__ == "__main__"</code> guard</a> to allow importing from this script.</p></li>
</ul>
    </div>