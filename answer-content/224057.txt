<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Maintainability</h2>
<p>Maintainability is a measure of how long it takes to modify some code.</p>
<p>Some things that help improve maintainability.</p>
<ul>
<li><p>Use a consistent style throughout the code base. If the code is a group effort then that style must be established before the start of the project.</p>
</li>
<li><p>For naming adopt the language standardized or informal style (Informal for JS as it does not have a standard style). In JavaScript we use <a href="https://en.wikipedia.org/wiki/Camel_case" rel="nofollow noreferrer">camelCase</a> variable names, PascalCase for instantiate-able objects via the <code>new</code> operator.</p>
<p>For constants <a href="https://en.wikipedia.org/wiki/Snake_case" rel="nofollow noreferrer">UPPERCASE_SNAKE</a> with the general rule that we uppercase read-only properties of objects. Though many will also use them for all constants. There is no real consensus regarding the naming of constants but it is not good to be inconsistent in the use of UPPERCASE_SNAKE.</p>
<p>Arrays, lists, and array like objects should use the plural name to indicate that it is more than one entity.</p>
<p>Be consistent in naming items. Do not call the same abstract different names in different locations. EG you called the list of requests <code>lists</code> and <code>group</code>. You called a request <code>insert</code> and <code>putGroup</code>. (see example)</p>
</li>
<li><p>Magic numbers and strings should be in one place so that they don't need to be hunted down to make changes. As they are separated from the code it pays to always comment these constants, include type, limits, and what they are used for. (see example)</p>
<p>To ensure constants are not modified use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze" rel="nofollow noreferrer"><code>object.freeze</code></a> to make them read only. This instills trust in the state of the constants so the coder modifying the code does not have to hunt down each usage of the value to ensure it has not been modified if there are problems.</p>
</li>
<li><p>Reduce the complexity by reducing operator and token counts. Eg <code>if (!foo.length) { a = b } else { b = a }</code> is better as <code>if (foo.length) { b = a } else { a = b }</code></p>
<p>Reduce the number of return points and keep it DRY. Eg in two places you create a new group and return it. With a little rearranging of the logic the two can be one. (see example)</p>
</li>
</ul>
<h2>Readability</h2>
<p>This comes hand in hand with maintainability. Low readability also means low maintainability.</p>
<h2>Example</h2>
<p>not quite how I would have written it (I would use a <code>while</code> loop and have the param <code>requests</code> AKA <code>lists</code> as a safe to mutate copy). Also would have used default params for the constants. However the example is consistent with your original.</p>
<p>I also prefer 4 space indent as I find it much more readable with my old eyes.</p>
<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const grouping = Object.freeze({ // Request grouping constants for buildGroupRequests
    MAX_SIZE: 50,     // Max length of string per group. Last item may be longer.
    DELIMITER: " + ", // String used to separate groups. Len &lt; MAX_SIZE
    PREFIX: "PUT ",   // String used to prefix groups. Len &lt; MAX_SIZE
});

function buildGroupRequests(requests) {
    return requests.reduce((groupedReqs, request) =&gt; {
        if (groupedReqs.length) {
            const lastReq = groupedReqs[groupedReqs.length - 1];
            const putGroup = lastReq.put + grouping.DELIMITER + request.put;
            if (putGroup.length &lt;= grouping.MAX_SIZE) {
                lastReq.put = putGroup;
                return groupedReqs;
            }
        }
        groupedReqs.push({put: grouping.PREFIX + request.put});
        return groupedReqs;
    }, []);
}



console.log(
    buildGroupRequests([
        { put: "/firstName=Danny" },
        { put: "/lastName=Williams" },
        { put: "/email=danny.w@domain.com" },
        { put: "/address=1984 Some St, Very long named place. Woop Woop 6162" }
    ])
);</code></pre>
</div>
</div>

<h2>Update</h2>
<p>As requested in comment. Using a while loop and more along the lines as I would write it to be consistent with internal standards. Please note this is not as maintainable if used in a general JS work environment.</p>
<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const grouping = Object.freeze({ 
    maxSize: 50, 
    delimiter: " + ",
    prefix: "PUT ",   
    requests(reqs, {maxSize: max, delimiter: del, prefix: pre} = grouping) {
        var prev = {put: pre + reqs.shift().put};
        const grouped = [prev];
        while (reqs.length) {
            const next = reqs.shift().put;
            const putGroup = prev.put + del + next;
            if (putGroup.length &lt;= max) { prev.put = putGroup }
            else { grouped.push(prev = {put: pre + next}) }
        }
        return grouped;
    },
});


const requests = [
    { put: "/firstName=Danny" },
    { put: "/lastName=Williams" },
    { put: "/email=danny.w@domain.com" },
    { put: "/address=1984 Some St, Very long named place. Woop Woop 6162" }
];

console.log( grouping.requests([...requests]));</code></pre>
</div>
</div>

    </div>