<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Naming</h1>

<p>Variable and function names should be <code>snake_case</code>, not <code>This_Format</code> or <code>This</code>. <code>Uppercase</code> and <code>PascalCase</code> are reserved for class names.</p>

<h1>Checking inside lists vs strings</h1>

<p>If you're checking for a single character, it's better to use a string rather than a list. Have a look:</p>

<pre><code>if unit in "+-":
    ...
</code></pre>

<h1>The walrus operator</h1>

<p>If you're using <code>python-3.8</code> you can use the walrus operator. It's another way of saying assignment expressions. It's a way to assign a variable within an expression. In your case, you can utilize the walrus operator to assign <code>input</code> to a variable, and use that. Have a look:</p>

<pre><code>while unit := input("For Degrees, enter '+',\nFor Radians, enter '-'\n: "):
    if unit in "+-":
        ...
</code></pre>

<p>So <code>unit</code> is assigned whatever the output of the <code>input</code>  call is.</p>

<h1>Unneeded function</h1>

<p>If your function is simply an <code>input</code> call, you don't really need it. Just put it at the end of the <code>while</code> loop.</p>

<h1>Ternary operators</h1>

<p>You can use these to greatly shorten the length of your code. It's an easier way to assign values based on conditions. Take a look at the final code to see what I'm saying.</p>

<h1>f-strings</h1>

<p>You should use <code>f""</code> to directly implement variables in your strings. It's a cool feature that keeps you from having to <code>+</code> or call a <code>.format</code> on your strings. Have a look:</p>

<pre><code>print(f"Area of Sector = {sector_area}")
print(f"Area of inner Triangle = {triangle_area}")
...
</code></pre>

<h1>Final code</h1>

<p>After all these suggestions, you code would look something like this:</p>

<pre><code>from math import pi, sin

def input_pi_replacer(prompt):
    return float(eval(input(prompt).replace("pi", str(pi))))

print("Sector Quantities Calculator:\n")
while True:

    while unit := input("For Degrees, enter '+',\nFor Radians, enter '-'\n: "):
        if unit in "+-.":
            if unit == ".":
                raise SystemExit
            c_factor = (pi / 180) if unit == "+" else (180 / pi)
            break

    radians = input_pi_replacer("\nEnter Radius: ")
    angle = input_pi_replacer("Enter Theta/Angle: ")

    c_angle = angle * c_factor if unit == "+" else angle

    print()
    sector_area = 1 / 2 * (radians ** 2) * c_angle
    triangle_area = 1 / 2 * (radians ** 2) * sin(c_angle)
    arc_length = radians * c_angle
    chord_area = sector_area - triangle_area
    chord_length = 2 * radians * sin(c_angle / 2)
    perimeter_sector = 2 * radians + triangle_area

    print(f"Area of Sector = {sector_area}")
    print(f"Area of inner Triangle = {triangle_area}")
    print(f"Arc Length = {arc_length}")
    print(f"Chord Area = {chord_area}")
    print(f"Chord Length = {chord_length}")
    print(f"Sector Perimeter = {perimeter_sector}")
    print()

    if input("Stop?: ").lower() == "x":
        raise SystemExit  
</code></pre>
    </div>