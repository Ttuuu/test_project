<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Looks like you were trying to follow the best practices on not mutating data but this is an overkill:</p>

<ul>
<li>when processing data locally in a function there's no need to clone the intermediate data</li>
<li>no need to clone the array in <code>return</code>, it's already a temporary cloned array</li>
<li><code>reduce</code> is the wrong choice here - at least if you keep its needless duplication of the resultant array in each step - the task is a simple transformation of each element so <code>map()</code> seems a better choice + an additional splice on the special key</li>
<li><code>insertedData</code> is always an empty array so no need for <code>[...result, ...insertedData]</code></li>
<li>for consistency, if you use <code>splice</code> and <code>concat</code> then go all the way and use <code>concat</code> instead of array spread as well or switch to array spread instead of concat.</li>
</ul>

<p>Simplified code using <code>map()</code>:</p>

<pre><code>function foo() {

  const commonData = Object.entries(settings).map(([key, value]) =&gt; ({
    key: transformToUpperCase(key),
    value,
  }));

  if (Object.hasOwnProperty.call(settings, SETTINGS_FIELDS.EXAMPLE1)) {
    commonData.splice(2, 0, {
      key: myKey,
      value: myValue,
    }, {
      key: myKey,
      value: myValue,
    });
  }

  return commonData;
}
</code></pre>

<p>If you don't override prototype of <code>settings</code> or objects in general the key check can be simplified further: <code>if (SETTINGS_FIELDS.EXAMPLE1 in settings)</code></p>
    </div>