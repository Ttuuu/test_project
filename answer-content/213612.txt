<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Not going to try a line-by-line analysis, but here are a couple broad suggestions:</p>

<ul>
<li><p><a href="https://stackoverflow.com/questions/419163/what-does-if-name-main-do">Use a <code>__main__</code> block</a>, and keep the script locked away like that</p></li>
<li><p>Use functions to compartmentalize logic, and <a href="https://dzone.com/articles/is-your-code-dry-or-wet" rel="nofollow noreferrer">don't repeat yourself</a>. You are clearly aware that your code exists as largely independent blocks of logic (hence your big comment bars), so use functions to name those blocks, then orchestrate how those functions get run to pass data back and forth, making it clear what information is needed where, and making it easier to see what logic is duplicated and what is unique to each part of your task. Rule of thumb: if you're copy-pasting code and just changing variable names (e.g. when you're making plots, computing metrics, etc.), make it a function instead.</p></li>
<li><p>Put your imports at the top of the file. It's cleaner, and also serves like a header that tells other coders "here are the kinds of things I'm going to do in this file."</p></li>
</ul>

<p>So your code might look more like:</p>

<pre><code># All your other imports...
from sklearn.naive_bayes import GaussianNB

# ...

def run_classifier(classifier_type, classifier_kwargs, X_train, y_train, X_test, y_test, metrics):
    # 1- Import the estimator object (model).
    # 2- Create an instance of the estimator.
    classifier = classifier_type(**classifier_kwargs)

    # 3- Use the trainning data to train the estimator.
    classifier.fit(X_train, y_train)

    # 4- Evaluate the model.
    y_pred_test = classifier.predict(X_test)
    name = classifier_type.__name__
    metrics.loc['accuracy', name] = accuracy_score(y_pred=y_pred_test, y_true=y_test)
    metrics.loc['precision', name] = precision_score(y_pred=y_pred_test, y_true=y_test)
    metrics.loc['recall', name] = recall_score(y_pred=y_pred_test, y_true=y_test)

    # Confusion Matrix.
    CM = confusion_matrix(y_pred=y_pred_test, y_true=y_test)
    CMatrix(CM)

    return classifier, CM

# ...

def main():
    # ...
    naive_bayes, nb_cm = run_classifier(NaiveBayes, {}, X_train, y_train, X_test, y_test)
    # etc.

    plot_pr_curve(naive_bayes, X_test, Y_test)
    # etc.

if __name__ == '__main__':
    main()
</code></pre>
    </div>