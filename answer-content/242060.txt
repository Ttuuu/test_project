<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You're off to a great start!  This is reasonably readable, and I'm sure you'll get better with practice.</p>

<hr>

<pre><code>lenght
</code></pre>

<p>Typo.  I make tons of typos myself.  I highly recommend getting an IDE with a spell checker.</p>

<hr>

<pre><code>string input = ...
</code></pre>

<p>This confused me at first.  It has to be a typedef, but what kind of typedef makes sense?  Turns out in <code>&lt;cs50.h&gt;</code>, they <code>typedef char *string;</code>.  This is a little weird to me because <code>char*</code> is a very familiar type -- I instantly know a few things to look for/what operations you can do with that.  <code>string</code> is an unknown entity.  I think <code>char* input = ...</code> is clearer.</p>

<hr>

<pre><code>float gradeLevel = (0.0588 * (100 * (float) length(input, 'l') / (float) length(input, 'w')) - 0.296 * (100 * (float) length(input, 's') / (float) length(input, 'w'))) - 15.8;
</code></pre>

<p>This line is so long!  Breaking it down and simplifying a bit:</p>

<pre><code>float l_over_w = (float) length(input, 'l') / (float) length(input, 'w');
float s_over_w = (float) length(input, 's') / (float) length(input, 'w');
float gradeLevel = (5.88 * l_over_w - 29.6 * s_over_w) - 15.8;
</code></pre>

<ol>
<li>I have no idea where the numbers 5.88, 29.6, and 15.8 came from.</li>
<li>Maybe the <code>div</code> function would help you instead of casting to float?  <code>float</code>s are slow and have a lot of idiosyncrasies... IMO they are best to avoid unless you absolutely MUST use them.</li>
<li>I find the general idea here non-obvious.  How about some comments?</li>
<li>This could be a function <code>float gradeLevel(char* input);</code></li>
</ol>

<hr>

<pre><code>int length(string str, char check)
</code></pre>

<p>You've used <code>check</code> to determine what this function should do.  That's generally a bad idea, but if you cannot avoid it, <strong>at least</strong> <code>assert(false)</code> if check is invalid.  That way you get a runtime error if <code>check</code> is wrong.  As you've written it, you'll silently get the wrong answer if <code>check</code> is wrong.</p>

<p>In this case, it is trivial to do better.  You could have several functions: <code>int letterCount(char* str);</code>, <code>int wordCount(char* str);</code>, and <code>int sentenceCount(char* str);</code>.  This way you get a compiler error if you write the wrong function name (and you can't get <code>check</code> wrong since <code>check</code> doesn't exist).</p>

<hr>

<pre><code>int letterCount = 0;
int n = strlen(str);
for (int i = 0; i &lt; n; i++) {
    if (isalpha(str[i])) {
        letterCount++;
    }
}
return letterCount;
</code></pre>

<p>This is OK, but you go over the string once to compute <code>strlen</code> and once to compute <code>letterCount</code>.  You can do them at the same time:</p>

<pre><code>int letterCount = 0;
for (int i = 0; str[i]; i++) {
    if (isalpha(str[i])) {
        letterCount++;
    }
}
return letterCount;
</code></pre>

<p>I think this is also nicer since you don't have an <code>n</code> to worry about.  You could further simplify this to get rid of the index and just have the pointer:</p>

<pre><code>while (str) {
    letterCount += isalpha(*str++);
}
</code></pre>

<p>but maybe that's overkill.</p>

<p>N.B. at least you didn't write <code>for (int i = 0; i &lt; strlen(str); i++)</code> which goes over the string once per character!</p>

<hr>

<pre><code>(str[i] == ' ' || str[i] == '\n' || str[i] == '\t')
</code></pre>

<p>How about <code>isspace(str[i])</code>?</p>

<hr>

<pre><code>(str[i] == '.' || str[i] == '!' || str[i] == '?')
</code></pre>

<p>How about <code>ispunct(str[i])</code>?  Not an exact match so be careful.</p>

<p>Here's a list of similar functions available <a href="https://linux.die.net/man/3/ispunct" rel="nofollow noreferrer">https://linux.die.net/man/3/ispunct</a>.</p>

<hr>

<pre><code>//print lengths for testing
/* ...
</code></pre>

<p>This is totally fine for a personal project, but there are lots of testing frameworks that will always compile your test code but only run it under certain conditions.  Might be worth researching.  Here's a list to get you started <a href="https://en.wikipedia.org/wiki/List_of_unit_testing_frameworks#C" rel="nofollow noreferrer">https://en.wikipedia.org/wiki/List_of_unit_testing_frameworks#C</a>.</p>

<hr>

<p>Do you need to deallocate the string returned by <code>get_string</code>?</p>

<hr>

<p>Is the number of words equal to the number of spaces?  What about this string <code>with         lots of white-spaces....</code>.  How many sentences are in that string?  I don't know the answer to these questions (maybe the exercise tells you what to compute?), but I think it's interesting to think about.</p>
    </div>