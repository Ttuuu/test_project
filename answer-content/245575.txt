<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>To me it looks fine. If you can or will not modify the model objects (<code>Product</code>) by letting them implement <code>INotifyPropertyChanged</code> then this approach is the price to pay for using XAML. In larger projects, it can be a little annoying to seemingly write the same thing twice, but you on the other hand have a true separation of concerns, and your solution is an implementation of the MVVM-pattern.
To me <code>ProductVM</code> is an OK name, I always name my view objects that way.</p>
<hr>
<p>Instead of using string literals in the call to <code>NotifyPropertyChanged</code> you can use <code>nameof(&lt;property name&gt;)</code>:</p>
<pre><code>               NotifyPropertyChanged(nameof(Name));
</code></pre>
<p>this will make it easier to maintain, if the property name changes.</p>
<hr>
<pre><code>   Another approach is to define `NotifyPropertyChanged` as:

  private void NotifyPropertyChanged([CallerMemberName] string name = "")
  {
    PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(name));
  }
</code></pre>
<p>then you don't need to provide the property name in the call:</p>
<pre><code>    public String Name 
    { 
        get { return _p.Name; }
        set
        {
            _p.Name = value;
            NotifyPropertyChanged();
        }
    }
</code></pre>
<p><code>CallerMemberName</code> requires a reference to <code>System.Runtime.CompilerServices</code>.</p>
    </div>