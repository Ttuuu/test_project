<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Welcome on Code Review!</p>
<p>Addendum to what others say:</p>
<h2>Naming</h2>
<hr>
<h3>Singular &amp; plural nouns</h3>
<p>A player is a <code>Player</code> not a <code>Players</code>, you should use singular names when you talk about <strong>one</strong> thing, and plural when you talk about many. ie:</p>
<pre><code>Player[] players = new Player[4];
</code></pre>
<hr>
<h3>Avoid redundancy</h3>
<p>Try to avoid redundancy in naming, so instead of having:</p>
<pre><code>DeckOfCards.shuffleDeck()
</code></pre>
<p>you can write:</p>
<pre><code>DeckOfCards.shuffle()
</code></pre>
<hr>
<h3>Keep them simple</h3>
<p>There's not much chance here that reader think about a loading deck if you simply named your class <code>Deck</code>. In this context, it's pretty obvious that's a cards' deck.</p>
<hr>
<h2>MISC</h2>
<h3>Be generic when possible</h3>
<p>Try to be as generic as possible, avoid magic values. The size of your deck if the sum of all possible combinations, so for example, taking again the use of enums advised in one of the other answer:</p>
<pre><code>private static final int SIZE = Suit.values().length * Rank.values().length;
</code></pre>
<p>Like that, if later you decide to change the type of deck, eg removing aces or figures, the change will be reflected automatically in the rest of your code. And you know... «Less code to refactor make developers happier».</p>
<h3>Think about underlying types</h3>
<p>You can maybe store just the index of the card, with a simple <code>int</code>. A card can be represented by an index relative to its place in a new deck. [range 0-51].</p>
<p>To retrieve suits and ranks from indexes, depending on how cards are ordered in the deck.</p>
<p>If ordered by rank (A♡, A♢, A♠, A♣, 2♡, 2♢, ..., K♡, K♢, K♠, K♣) :</p>
<pre><code>Rank r = Rank.values()[i / 4];
Suit s = Suit.values()[i % 4];
</code></pre>
<p>If ordered by suit (A♡, 2♡, 3♡, ..., J♣, Q♣, K♣) :</p>
<pre><code>Rank r = Rank.values()[i % 13];
Suit s = Suit.values()[i / 13];
</code></pre>
<p>(and for faster/better way to cast int to enum, check <a href="https://stackoverflow.com/questions/5878952/cast-int-to-enum-in-java">this SO post</a>)</p>
    </div>