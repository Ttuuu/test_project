<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is on top of the points by <a href="https://codereview.stackexchange.com/users/41661/dennis-e">@Dennis_E</a>.</p>

<h3>Single responsibility principle</h3>

<p><code>CommomOcurrence</code> is poorly named (+ has a typo too),
but most importantly,
it doesn't follow the single responsibility principle.
It does too much:</p>

<ul>
<li>Builds a map of counts</li>
<li>Prints the map of counts</li>
<li>Prints the most frequent item with its count</li>
</ul>

<p>Multiple smaller methods, each with a single clear responsibility would score you extra points at interviews.
Such methods are easier to understand,
and easier to unit test too.
Also easier to give a good name.</p>

<h3>Naming</h3>

<p>As mentioned earlier,
<code>CommomOcurrence</code> is poorly named.
So are the names <code>occurences</code> and <code>tempOccurences</code>.
It would be better to rename these:</p>

<ul>
<li><code>occurences</code> -&gt; <code>maxOccurrences</code></li>
<li><code>tempOccurences</code> -&gt; <code>occurences</code></li>
</ul>

<h3>Algorithm</h3>

<p>Your algorithm using a map of counts is fine.
But, if the goal is to find the element that occurs the most,
then you can do a bit better:
once you found an element that occurs more times then the number of remaining elements, you can stop searching. If you want to know the number of occurrences, then you can scan the remaining elements to find the final count, but no need to count the other elements at that point.</p>
    </div>