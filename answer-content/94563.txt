<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Instead of sorting values, taking the corresponding indices and using them to have the values of a different array in the order of your choice, you could generate tuples containing all the relevant information (name, weight, value) and sort them with a function of your choice.</p>

<p>This reduces :</p>

<pre><code>data_eff = map(truediv, data_value, data_weight)
order = [i[0] for i in sorted(enumerate(data_eff), key=lambda x:x[1], reverse=True)]
#sort data based on their 'efficiency', i.e. value/weight
data_eff = [data_eff[i] for i in order]
data_weight = [data_weight[i] for i in order]
data_value = [data_value[i] for i in order]
data_item = [data_item[i] for i in order]
</code></pre>

<p>to a more efficient and more concise :</p>

<pre><code>data_sorted = sorted(zip(data_item, data_weight, data_value), key=lambda (i,w,v):v//w, reverse=True)
</code></pre>

<p>You could them split this into 3 arrays but I am not sure it is worth the pain.</p>

<p>Indeed, a few things can be done in a more concise way now like :</p>

<pre><code>for i, (item, w, v) in enumerate(data_sorted):
    if w * self.available[i] &lt;= max_weight - weight_accumulate:
        weight_accumulate += w * self.available[i]
        upperbound += v * self.available[i]
    else:
        upperbound += v * (max_weight - weight_accumulate) / w * self.available[i]
        break
</code></pre>

<p>and re-improved using zip :</p>

<pre><code>for avail, (item, w, v) in zip(self.available, data_sorted):
    if w * avail &lt;= max_weight - weight_accumulate:
        weight_accumulate += w * avail
        upperbound += v * avail
    else:
        upperbound += v * (max_weight - weight_accumulate) / w * avail
        break
</code></pre>

<p>Also, </p>

<pre><code>best_solution = current_state
best_item = []
for i in range(len(best_solution.token)):
    if (best_solution.token[i] == 1):
        best_item.append(data_item[i])
</code></pre>

<p>can be rewritten using zip list comprehension and the <code>data_sorted</code> array defined previously :</p>

<pre><code>best_item = [item for tok, (item, _, _) in zip(current_state.token, data_sorted) if tok == 1]
</code></pre>

<p>Now, to comment on the style, you should use <code>is</code> to compare to None as per the style guide PEP8.</p>

<p>After changing these and many other details (provided by the tool pep8 checking for various style issues such as spacing, line length, etc), I end up with :</p>

<pre><code>data_item = ['map', 'compass', 'water', 'sandwich', 'glucose', 'tin', 'banana',
             'apple', 'cheese', 'beer', 'suntan', 'camera', 'T', 'trousers',
             'umbrella', 'w t', 'w o', 'note-case', 'sunglasses', 'towel',
             'socks', 'book']
data_weight = [9, 13, 153, 50, 15, 68, 27, 39, 23, 52, 11, 32, 24, 48, 73, 42,
               43, 22, 7, 18, 4, 30]
data_value = [150, 35, 200, 160, 60, 45, 60, 40, 30, 10, 70, 30, 15, 10, 40,
              70, 75, 80, 20, 12, 50, 10]
data_sorted = sorted(zip(data_item, data_weight, data_value),
                     key=lambda (i, w, v): v//w, reverse=True)

max_weight = 400


class State(object):
    def __init__(self, level, benefit, weight, token):
        # token = list marking if a task is token. ex. [1, 0, 0] means
        # item0 token, item1 non-token, item2 non-token
        # available = list marking all tasks available, i.e. not explored yet
        self.level = level
        self.benefit = benefit
        self.weight = weight
        self.token = token
        self.available = self.token[:self.level]+[1]*(len(data_sorted)-level)
        self.ub = self.upperbound()

    def upperbound(self):  # define upperbound using fractional knaksack
        upperbound = 0  # initial upperbound
        # accumulated weight used to stop the upperbound summation
        weight_accumulate = 0
        for avail, (_, wei, val) in zip(self.available, data_sorted):
            if wei * avail &lt;= max_weight - weight_accumulate:
                weight_accumulate += wei * avail
                upperbound += val * avail
            else:
                upperbound += val * (max_weight - weight_accumulate) / wei * avail
                break
        return upperbound

    def develop(self):
        level = self.level + 1
        _, weight, value = data_sorted[self.level]
        left_weight = self.weight + weight
        if left_weight &lt;= max_weight:  # if not overweighted, give left child
            left_benefit = self.benefit + value
            left_token = self.token[:self.level]+[1]+self.token[level:]
            left_child = State(level, left_benefit, left_weight, left_token)
        else:
            left_child = None
        # anyway, give right child
        right_child = State(level, self.benefit, self.weight, self.token)
        return ([] if left_child is None else [left_child]) + [right_child]


Root = State(0, 0, 0, [0] * len(data_sorted))  # start with nothing
waiting_States = []  # list of States waiting to be explored
current_state = Root
while current_state.level &lt; len(data_sorted):
    waiting_States.extend(current_state.develop())
    # sort the waiting list based on their upperbound
    waiting_States.sort(key=lambda x: x.ub)
    # explore the one with largest upperbound
    current_state = waiting_States.pop()
best_item = [item for tok, (item, _, _)
             in zip(current_state.token, data_sorted) if tok == 1]

print "Total weight: ", current_state.weight
print "Total Value: ", current_state.benefit
print "Items:", best_item
</code></pre>

<p>There are still many things to be improved but I guess it gives you a better basis to start with.</p>

<p>As a take-away advice : almost every time you deal with indices in Python, you are doing it wrong. Using the proper data structure and the proper method can lead you back to the right way.</p>

<p>Edit : A few things I have forgotten :</p>

<ul>
<li><p>maybe <code>available</code> does not need to be part of the instances and could be provided directly to <code>upperbound</code> which does not need to be an instance method anymore.</p></li>
<li><p>in <code>upperbound</code>, <code>max_weight - weight_accumulated</code> is a more interesting value than each of <code>max_weight</code> and <code>weight_accumulated</code> individually. Maybe it could make sens to work directly on that value.</p></li>
</ul>

<p>Then you'd get something like :</p>

<pre><code>class State(object):
    def __init__(self, level, benefit, weight, token):
        # token = list marking if a task is token. ex. [1, 0, 0] means
        # item0 token, item1 non-token, item2 non-token
        # available = list marking all tasks available, i.e. not explored yet
        self.level = level
        self.benefit = benefit
        self.weight = weight
        self.token = token
        self.ub = State.upperbound(self.token[:self.level]+[1]*(len(data_sorted)-level))

    @staticmethod
    def upperbound(available):  # define upperbound using fractional knaksack
        upperbound = 0  # initial upperbound
        # accumulated weight used to stop the upperbound summation
        remaining = max_weight
        for avail, (_, wei, val) in zip(available, data_sorted):
            wei2 =  wei * avail  # i could not find a better name
            if wei2 &lt;= remaining:
                remaining -= wei2
                upperbound += val * avail
            else:
                upperbound += val * remaining / wei2
                break
        return upperbound
</code></pre>
    </div>