<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The following are a few suggestions on how I'd write the stored procedure.</p>

<p><strong>Source Control</strong> </p>

<p>If you don't already have a <a href="https://docs.microsoft.com/en-us/previous-versions/sql/sql-server-data-tools/hh272677(v=vs.103)" rel="nofollow noreferrer">database project</a>, create one in <a href="https://visualstudio.microsoft.com/" rel="nofollow noreferrer">Visual Studio</a>. Then check it in to source control. <a href="https://azure.microsoft.com/en-au/services/devops/" rel="nofollow noreferrer">Microsoft Azure DevOps Services</a> is free &amp; private for teams of 5 or less (this is per project, so 5 developers per project). Then you'll be able to track changes you make to your stored procedures, views, tables, etc.</p>

<p><strong>Error Handling</strong></p>

<p>Use <a href="https://docs.microsoft.com/en-us/sql/t-sql/language-elements/try-catch-transact-sql?view=sql-server-2017" rel="nofollow noreferrer">Try, Catch</a> blocks to handle your errors. You can then write them to a log file or table.</p>

<p><strong>Tranactions</strong></p>

<p>Use <a href="https://docs.microsoft.com/en-us/sql/t-sql/language-elements/transactions-transact-sql?view=sql-server-2017" rel="nofollow noreferrer">transactions</a> for rolling back your queries during testing. If a transaction is successful, all of the data modifications made during the transaction are committed and become a permanent part of the database. If a transaction encounters errors and must be cancelled or rolled back, then all of the data modifications are erased.</p>

<p><strong>Common Table Expressions (CTE)</strong></p>

<p><a href="https://docs.microsoft.com/en-us/sql/t-sql/queries/with-common-table-expression-transact-sql?view=sql-server-2017" rel="nofollow noreferrer">CTE's</a> in your SQL help with documentation. The expression name can then let other developers know why you used that expression e.g. <code>current_suppliers</code> or <code>active_projects</code>.</p>

<p><strong>Merge</strong></p>

<p>If I need to perform more than one DML query on a table, I usually will use a <a href="https://docs.microsoft.com/en-us/sql/t-sql/statements/merge-transact-sql?view=sql-server-2017" rel="nofollow noreferrer">MERGE</a> statement.</p>

<p><strong>Formatting</strong></p>

<p>I would download the following tool for SSMS and Visual Studio, <a href="https://marketplace.visualstudio.com/items?itemName=TaoKlerks.PoorMansT-SqlFormatterSSMSVSExtension" rel="nofollow noreferrer">Poor Man's T-Sql Formatter</a> and on <a href="https://github.com/TaoK/PoorMansTSqlFormatter" rel="nofollow noreferrer">GitHub</a>. I use it when I have to edit other developer's code. It's a great way to standardize your SQL. I find it does most of the formatting for me, but I'll still make a few changes after.</p>

<p>Here are the settings I used:</p>

<p><a href="https://i.stack.imgur.com/aBD8y.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/aBD8y.png" alt="screenshot"></a></p>

<p><strong>Commas</strong></p>

<p>I would put the commas in front to clearly define new columns. Versus code wrapped in multiple lines. It also makes trouble-shooting code easier. </p>

<p>e.g. <code>, S.[PersonID]</code></p>

<p><strong>Estimated Execution Plan</strong></p>

<p>It's a good idea to check the <a href="https://docs.microsoft.com/en-us/sql/relational-databases/performance/display-the-estimated-execution-plan?view=sql-server-2017" rel="nofollow noreferrer">Estimated Execution Plan</a>. The shortcut in Microsoft SQL Server Management Studio (SSMS) is <kbd>Ctrl</kbd> + <kbd>L</kbd>. You can even run 2 queries in the same tab to compare the plans. Then you can see differences in the query plans using <a href="https://docs.microsoft.com/en-us/sql/t-sql/functions/string-split-transact-sql?view=sql-server-2017" rel="nofollow noreferrer">STRING_SPLIT</a>.</p>

<hr>

<p><strong>Revised SQL</strong></p>

<p>Without table definitions and sample records I was unable to test this, but it should give you a good start. </p>

<pre><code>ALTER PROCEDURE [dbo].[Admin_Save_PMIDS] 
      @MemberID INT
    , @PMIDList VARCHAR(MAX)
AS
BEGIN

    BEGIN TRY

        SET XACT_ABORT ON;
        BEGIN TRANSACTION;

            WITH
            pm_ids
            AS
            (
                SELECT 
                      [PMID] = Split.a.value('.', 'VARCHAR(100)')
                    , [PersonID] = @MemberID
                    , [MemberID] = @MemberID
                FROM 
                    (
                    SELECT CAST('&lt;M&gt;' + REPLACE(@PMIDList, ',', '&lt;/M&gt;&lt;M&gt;') + '&lt;/M&gt;' AS XML) AS String
                    ) AS A
                CROSS APPLY String.nodes('/M') AS Split(a)
            )
            MERGE [dbo].[PublicationTable] AS T
            USING pm_ids AS S
            ON T.[PMID] = S.[PMID] AND T.[MemberID] = S.[MemberID] --&lt; Update the join to the correct unique key for the table
            WHEN NOT MATCHED BY TARGET
            THEN INSERT
            (
                  [PMID]
                , [PersonID]
                , [MemberID]
            )
            VALUES
            (
                  S.[PMID]
                , S.[PersonID]
                , S.[MemberID]
            )
            WHEN NOT MATCHED BY SOURCE --&lt; You may want to add a WHERE clause here
            THEN DELETE
            --OUTPUT @@SERVERNAME AS [ServerName], DB_NAME() AS [DatabaseName], $action, inserted.*, deleted.* --&lt; show the changed records here
            ;

        ROLLBACK TRANSACTION; --&lt; use the rollback for testing
        --COMMIT TRANSACTION; --&lt; use the commit for production

    END TRY
    BEGIN CATCH
        --you can write this to a log table 
        SELECT 
              [ServerName] = @@SERVERNAME
            , [DatabaseName] = DB_NAME()
            , [ErrorProcedure] = ERROR_PROCEDURE()
            , [ErrorNumber] = ERROR_NUMBER()
            , [ErrorSeverity] = ERROR_SEVERITY()
            , [ErrorState] = ERROR_STATE()
            , [ErrorLine] = ERROR_LINE()
            , [ErrorMessage] = ERROR_MESSAGE()
            , [ErrorDateTime] = GETDATE();

        -- Test whether the transaction is uncommittable.  
        IF (XACT_STATE()) = -1  
        BEGIN  
            PRINT  
                N'The transaction is in an uncommittable state.' + 'Rolling back transaction.';
            ROLLBACK TRANSACTION;  
        END;  

        -- Test whether the transaction is committable.  
        IF (XACT_STATE()) = 1  
        BEGIN  
            PRINT  
                N'The transaction is committable.' + 'Committing transaction.';
            COMMIT TRANSACTION;     
        END;  

    END CATCH

END
</code></pre>
    </div>