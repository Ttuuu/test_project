<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Here's a few things to consider:</h1>

<h2>You can remove the j variable from your loop</h2>

<p>You only use it once. Instead you can write <code>str[size - 1 - i]</code>. This saves you two lines of code, and the less code you have, the easier it usually is to focus on what a function does and to reason about it.</p>

<h2><code>var--</code> is slower than <code>--var</code></h2>

<p>If you wanted to keep your <code>j</code>, you could change that second line of the loop to <code>--j</code>. This isn't a major speed improvement, but if you're preparing for an interview, it's probably a good way to show that you know what you're doing. <a href="https://www.iar.com/Support/resources/articles/writing-optimizer-friendly-code/" rel="nofollow noreferrer">This article</a> does a fairly good job at explaining why this is, but don't bother too much trying to understand the messy details. Just know that it's a thing.</p>

<h2>You don't need to manually append <code>\0</code></h2>

<p>Reversing a string does not change its length, so the null-character will be at the same byte it was before, thus you can just leave it be.</p>

<h2>Conclusion</h2>

<p>Considering the three points above, and the fact that <code>size</code> can be used as if it was a local variable to your function, you could write the function like this:</p>

<pre><code>void inPlaceReverseString(char str[], int length) {
    int i;
    --length;

    for (i = 0; i &lt; (length)/2; ++i) {
        std::swap(str[i], str[length - i]);
    }
}
</code></pre>

<p>As you can see, you can decrement the <code>size</code> variable in place as you only ever need <code>size-1</code>. That's one operation we've taken out of the loop. If you want to take this one step further, you can save <code>size/2</code> into its own variable to avoid having to divide it by 2 in every loop, but that'd make the code more complex and you'd only want to do that if speed is really crytical. In an interview, you could possibly mention this as an option if future benchmarks show that the function acts as a bottleneck.</p>

<p>Also note that I have changed <code>size</code> to <code>length</code>. The reason for that is that <em>size</em> usually refers to the size of the character buffer (255 in your example), not the length of the string it contains. Also the length of a string usually doesn't count the null-character at the end, so I took the liberty to change that as well. That's important because the size you calculate in <code>main</code> <em>does</em> include the null-character.</p>
    </div>