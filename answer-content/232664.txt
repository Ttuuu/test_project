<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Just to pull a few of the comments together:</p>

<ul>
<li><p>This doesn't handle multi-digit numbers properly.</p></li>
<li><p>This doesn't validate parentheses "()" and brackets "[]", and doesn't handle braces at all "{}".</p></li>
</ul>

<p>That said, making this code faster and making this code more correct go hand-in-hand, so forgive me if this answer breaks the Code Review standards a bit and attempts to correct your code while showing how to make it faster, simpler, and more elegant.</p>

<p>Writing your own parser can be very hard, and doing it character-by-character is basically impossible to do correctly unless you've done this kind of thing a lot before. That said, you should look into text parsing tools, libraries, and techniques. Two main tools come to mind: regular expressions, and shift-reduce parsing. The latter is well worth understanding (IMO), but you can likely escape with just regular expressions for this task with just a little support code, since they're powerful enough to handle everything except parenthesis validation, which we'll try to sneak back in.</p>

<p>First off, don't handle individual characters. We can create a simple <a href="https://www.w3schools.com/python/python_regex.asp" rel="nofollow noreferrer">regular expression</a> pattern that'll peel apart the individual atoms. To start with, let's not worry about parentheses. Every atom begins with an upper case letter: <code>[A-Z]</code>. It may be followed by one or zero lower-case letter: <code>[a-z]?</code>. This pattern may be followed by an integer, which is comprised of any number of digits: either <code>\d*</code> or <code>(\d+)?</code>, which will match the same patterns, but represent them in slightly different ways. This gives us the following regex (I'll group the atom name and number separately: <code>([A-Z][a-z]?)(\d*)</code>.</p>

<pre><code>In [1]: import re

In [2]: strings = [
   ...: 'H',
   ...: 'He',
   ...: 'H2O',
   ...: 'CO2',
   ...: 'Cu2O',
   ...: 'C12H22O11'
   ...: ]

In [3]: for s in strings:
   ...:     print(re.findall(r'([A-Z][a-z]?)(\d*)', s))
   ...:
[('H', '')]
[('He', '')]
[('H', '2'), ('O', '')]
[('C', ''), ('O', '2')]
[('Cu', '2'), ('O', '')]
[('C', '12'), ('H', '22'), ('O', '11')]
</code></pre>

<p>Looking pretty good so far, and the code is REALLY simple! Now we just need to handle parentheses. Unfortunately, it's a provable mathematical fact that regular expressions cannot properly handle the parentheses pairing problem. Why should that stop us, though!? We'll detect parentheses pairs from the inside-out, save the results off into arrays like you already do, and work our way out. No biggie!</p>

<p>To do this, we'll create another regex that will find an un-interrupted parenthesis pair and extract the contents and, if it exists, an integer following it. This regex looks really convoluted and only handles "()", not brackets or braces (though the change to do so is trivial), but it demonstrates the idea, and once you understand it, it's actually pretty straightforward:</p>

<pre><code>In [1]: re.search(r'\(([^\(\[\{\)\]\}]+)\)(\d*)', 'ABC(XYZ)5').groups()
Out[1]: ('XYZ', '5')
</code></pre>

<p><code>\(</code> matches the opening parenthesis. <code>([^...]+)</code> selects one or more characters that AREN'T specified and saves the content into the first group, so we specify all parentheses, brackets, and braces, <code>\(\[\{\)\]\}</code>. We then match the closing parenthesis, <code>\)</code>, then a trailing integer if it's there, <code>(\d*)</code>. To match a pair of brackets or braces, just change <code>\(</code> to <code>\[</code> or <code>\{</code>, along with the corresponding <code>\)</code>.</p>

<p>The <code>.search</code> function returns an object that tells you where in the searched string <code>'ABC(XYZ)5'</code> it found the match. You can now extract it from the outer string, parse its guts <code>'XYZ'</code> using the first regex, since we've guaranteed that this string contains no parentheses of its own, multiply by the integer, and repeat this process, working our way from the inner-most parenthesis pair out. Dealing with nesting is not quite trivial with this approach, but I'm sure you can make it work with a little extra cleverness. The proper general tool to parse text with things like parentheses would be to write a shift-reduce parser, but that becomes a whole new level of complicated, and isn't necessary for this simple task.</p>

<p>This approach, using regular expressions, fits what you're asking about:</p>

<ul>
<li><p>Fast: Regexes are stupid fast for simple cases like this.</p></li>
<li><p>Short: The iteration, grouping, etc. are largely handled by the <code>re</code> library and its classes, it's really easy to do complex pattern matching with one-liners.</p></li>
<li><p>Explicit: Building this solution on regexes makes explicit what you're matching/looking for and what you're missing. Fixing minor issues (like multi-digit numbers, etc.) or finding new, but similar, patterns generally becomes trivial.</p></li>
</ul>
    </div>