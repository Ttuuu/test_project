<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li>Your code is a pain to read, please add early returns.</li>
<li>To go with the point above, please follow PSR-12.</li>
<li><code>iterative tables side by side</code>. Your code creates another table within a , so it's no exactly side by side.</li>
</ol>
<p>Here is how I refactored your code:</p>
<ol>
<li>I completed step 1 and 2.</li>
<li>I have broken everything up into methods:</li>
</ol>
<pre><code>&lt;?php

namespace App;

class DisplayArrayTable
{
    protected $result = '';

    /**
     * @param mixed $value
     */
    protected function setupMeaningFullName1(string $key, $data): void
    {
        $this-&gt;result .= "&lt;tr&gt;&lt;td class ='key'&gt;{$key}: &lt;/td&gt;&lt;td class ='value'&gt;";

        if (!is_array($data)) {
            $this-&gt;result .= "{$data}&lt;/td&gt;&lt;/tr&gt;";

            return;
        }

        $this-&gt;result .= "&lt;table class='arrayTable'&gt;";

        foreach ($data as $key =&gt; $value) {
            $this-&gt;setupMeaningFullName2($key, $value);
        }

        $this-&gt;result .= "&lt;/table&gt;";
    }

    /**
     * @param mixed $value
     */
    protected function setupMeaningFullName2(string $key, $data): void
    {
        $this-&gt;result .= "&lt;tr&gt;&lt;td class ='key2'&gt;{$key}: &lt;/td&gt;&lt;td class ='value2'&gt;";

        if (!is_array($data)) {
            $this-&gt;result .= "{$data}&lt;/td&gt;&lt;/tr&gt;";

            return;
        }

        $this-&gt;result .= "&lt;table class='arrayTable'&gt;";

        foreach ($data as $key =&gt; $value) {
            $this-&gt;setupMeaningFullName2($key, $value);
        }

        $this-&gt;result .= "&lt;/table&gt;";
    }

    /**
     * @param mixed $value
     */
    protected function setupMeaningFullName3(string $key, $data): void
    {
        $this-&gt;result .= "&lt;tr&gt;&lt;td class ='key3'&gt;{$key}: &lt;/td&gt;&lt;td class ='value3'&gt;";

        if (!is_array($data)) {
            $this-&gt;result .= "{$data}&lt;/td&gt;&lt;/tr&gt;";

            return;
        }

        $this-&gt;result .= "&lt;/td&gt;&lt;/tr&gt;";
    }

    public function handle(array $data): string
    {
        foreach ($data as $key =&gt; $value) {
            $this-&gt;setupMeaningFullName1($key, $value);
        }

        return "&lt;table class='arrayTable'&gt;{$this-&gt;result}&lt;/table&gt;";
    }
}
</code></pre>
<ol start="3">
<li>I have identified the pattern and further refactored your code</li>
</ol>
<pre><code>&lt;?php

namespace App;

class DisplayArrayTable
{
    const MAX_ITERATIONS = 3;
    protected $currentIteration = 1;
    protected $result = '';

    /**
     * @param mixed $value
     */
    protected function iteration(string $key, $data): void
    {
        $this-&gt;result .= "&lt;tr&gt;&lt;td class ='key'&gt;{$key}: &lt;/td&gt;&lt;td class ='value'&gt;";

        if (!is_array($data)) {
            $this-&gt;result .= "{$data}&lt;/td&gt;&lt;/tr&gt;";

            return;
        }

        if ($this-&gt;currentIteration === static::MAX_ITERATIONS) {
            $this-&gt;result .= '&lt;/td&gt;&lt;/tr&gt;';
            
            return;
        }

        $this-&gt;result .= '&lt;table class="arrayTable"&gt;';

        foreach ($data as $key =&gt; $value) {
            $this-&gt;currentIteration++;

            $this-&gt;setupMeaningFullName2($key, $value);
        }

        $this-&gt;result .= '&lt;/table&gt;';
    }

    public function handle(array $data): string
    {
        foreach ($data as $key =&gt; $value) {
            $this-&gt;iteration($key, $value);
        }

        return "&lt;table class='arrayTable'&gt;{$this-&gt;result}&lt;/table&gt;";
    }
}
</code></pre>
<ol start="4">
<li>Performed further refactoring to improve iteration method</li>
</ol>
<pre><code>&lt;?php

namespace App;

class DisplayArrayTable
{
    const MAX_ITERATIONS = 3;
    protected $currentIteration = 1;
    protected $result = '';

    public function handle(array $data): string
    {
        foreach ($data as $key =&gt; $value) {
            $this-&gt;iteration($key, $value);
        }

        return "&lt;table class='arrayTable'&gt;{$this-&gt;result}&lt;/table&gt;";
    }

    /**
     * @param mixed $value
     */
    protected function iteration(string $key, $data): void
    {
        $this-&gt;result .= "&lt;tr&gt;
            &lt;td class ='key'&gt;{$key}: &lt;/td&gt;
            &lt;td class ='value'&gt;";

        if (!is_array($data)) {
            $this-&gt;result .= "{$data}&lt;/td&gt;&lt;/tr&gt;";

            return;
        }

        if ($this-&gt;currentIteration === static::MAX_ITERATIONS) {
            $this-&gt;result .= '&lt;/td&gt;&lt;/tr&gt;';
            
            return;
        }

        $this-&gt;setupNewTable($data);
    }

    protected function setupNewTable(array $data): void 
    { 
        $this-&gt;result .= '&lt;table class="arrayTable"&gt;';

        foreach ($data as $key =&gt; $value) {
            $this-&gt;currentIteration++;

            $this-&gt;iteration($key, $value);
        }

        $this-&gt;result .= '&lt;/table&gt;';
    }
}
</code></pre>
<p>So, all you need to do now is call this call and pass in a valid array</p>
<pre><code>use App\DisplayArrayTable;

...

$dataArray = json_decode($data, true);

if ($dataArray &amp;&amp; is_array($dataArray)) {
   $html = (new DisplayArrayTable)-&gt;handle($dataArray);
}
</code></pre>
    </div>