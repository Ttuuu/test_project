<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There's a lot of repeated summing taking place in this part:</p>

<pre><code>(sum(row[:i + 1]) for row in wall for i in range(len(row[:-1])))
</code></pre>

<p>So this is summing the first i+1 elements in the row, with an upper bound that steps through all values except the last. If the row was [1, 2, 3, 4, 5], these are the sums:</p>

<ul>
<li>1</li>
<li>1+2 = 3</li>
<li>1+2+3 = 6</li>
<li>1+2+3+4 = 10</li>
</ul>

<p>The sums differ, but only by the last term. It would therefore save effort to use a running sum instead, only adding that last term each time:</p>

<ul>
<li>1</li>
<li>1+2 = 3</li>
<li>3+3 = 6</li>
<li>6+4 = 10</li>
</ul>

<p>This can be done with <a href="https://docs.python.org/3/library/itertools.html#itertools.accumulate" rel="noreferrer">itertools.accumulate</a>:</p>

<pre><code>(s for row in wall for s in itertools.accumulate(row[:-1]))
</code></pre>

<p>Another thing in your code that this approach solves is the i+1 summing. Instead of having this addition performed on every iteration, you could iterate through the correct values directly with <code>for i in range(1, len(row))</code>. But using accumulate, this is already taken care of.</p>
    </div>