<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Instead of trying to actually calculate S<sub>googol</sub>, let's try to figure out some properties of the general case S<sub>n</sub> and see if that can help. </p>

<p><strong><span class="math-container">\$S_n\$</span> has an odd number of digits</strong></p>

<p>It is obviously of the form <span class="math-container">\$2k+1\$</span></p>

<p><strong><span class="math-container">\$S_n\$</span> has length <span class="math-container">\$2^n - 1\$</span></strong></p>

<p>This is easily proved with recursion</p>

<p><strong><span class="math-container">\$S_n[\frac{2^n}{2} + 1] = S_n[2^{n-1} + 1] = 0\$</span></strong></p>

<p>From the definition. I'm assuming 0-based indexing. </p>

<p><strong>If <span class="math-container">\$k &gt; 2^{n-1} + 1\$</span>, then <span class="math-container">\$S_n[k] = switch(S_n[(2^n - 1) - 1 - k])\$</span></strong></p>

<p>From the definition. This allows us to convert between halves of the string.</p>

<p>This suggests a simpler algorithm.</p>

<pre><code>def find_value(index, n):
    if n == 2:
        return [True, True, False][index] 
    if k == 2 ** (n-1) + 1:
        return True
    if k &gt; 2 ** (n-1) + 1:
        return not find_value((2^n - 1) - 1 - k, n-1)
    return find_value(k, n-1)
</code></pre>

<p>And you can convert to 0 or 1 afterwards. (This may blow the stack, so you may have to rewrite iteratively)</p>
    </div>