<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>My implementation works just fine, until we go over 2^31 due to compare not doing unsigned comparison.</p>
</blockquote>

<p>The "incompleteness" of the set of comparisons is an old problem, and the workarounds are also old. Here are some options, with different trade-offs:</p>

<ul>
<li><code>x &gt;=u y</code> -&gt; <code>max_u(x, y) == x</code>. With SSE4.1 or later, PMAXUD exists, so this is supported. It's greater than or equal, so the constants need to be adjusted.</li>
<li><code>x &gt;u y</code> -&gt; <code>(x ^ INT_MIN) &gt;s (y ^ INT_MIN)</code>. This even worked back in MMX. Might be considered "more strange". The XOR can be replaced by addition or subtraction, which may be useful if that results opportunities to merge those operations, but here it would not and then XOR is faster on average (as in, across different CPUs: Haswell can execute <code>pxor</code> on p015 but <code>paddd</code> only on p15, Ryzen has a similar sort of deal, for Skylake it doesn't matter).</li>
</ul>

<p>Only in AVX512 was <code>vpcmpud</code> (with a comparison predicate operand) added.</p>

<blockquote>
<pre><code>vmovd        xmm3,ecx  
vpbroadcastd xmm3,xmm3 
</code></pre>
</blockquote>

<p>This pattern comes from <code>Vector128.Create(value)</code>, it may be fine but if <code>value</code> originally comes from memory then it would be better to try to get it broadcasted directly from memory: broadcast-from-memory is "free" (no cost on top of the load itself) which <code>vmovd</code> and <code>vpbroadcastd</code> on top of the load are not (obviously, they're something rather than nothing). You could pass a pointer and use <code>Avx2.BroadcastScalarToVector128</code>. That wouldn't be good if the value didn't come from memory though, forcing a store/reload isn't worth it.</p>
    </div>