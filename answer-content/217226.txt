<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The <code>heal</code> method and the handling of health points strike me as odd. In the current setup,</p>

<ul>
<li><p><code>heal</code> does not heal; it simply returns a random number. It also currently has no direct relation to any part of the Pokemon class, so it doesn't really make sense as a method of the class. </p></li>
<li><p>The health points of each Pokemon are "loose" in the script, along with instances of the Pokemon class. You have a Pokemon class representing a Pokemon, and it makes sense that health would be an attribute of a Pokemon itself.</p></li>
</ul>

<p>The design can be improved by doing something like (stripped down):</p>

<pre><code>class Pokemon:
    def __init__(self, start_health):
        self.hp = start_health

    def heal(self, heal_amount):
        self.hp += heal_amount

    def hurt(self, damage):
        self.hp -= damage
</code></pre>

<p>Now, you can do something like:</p>

<pre><code>mew = Pokemon(100)
mew.hurt(50) # Ow
mew.heal(49) # Back to almost full
print(mew.hp) # Prints 99
</code></pre>

<p>And you don't need to have loose health values floating around in the code for each Pokemon in use. Using the method like this also lets you check the health after healing to ensure that you didn't exceed the maximum health allowed. As long as you're going to make use of a class, you can benefit by having it encapsulate all the data (like health) that's directly relevant to it.</p>

<p>I also decided to not have <code>heal</code> generate the random amount to heal for the following reasons:</p>

<ul>
<li><p>Are you <em>sure</em> that every time you want to heal you want it to be a random value, and are you sure you will always want it to be a random value in the range (10, 25]? As you mentioned, what about potions? Are you sure you want potion healing to be random, and always in that range? What about when Pokemon level up and have more health? Are you sure that you'll only want to heal them in that narrow range? The <code>Pokemon</code> class simply does not have enough information to always decide how much Pokemon should be healed by, and that shouldn't be its responsibility in the first place anyways. </p></li>
<li><p>Using random data complicates testing. Say you want to add tests to ensure the correctness of the <code>hurt</code> and <code>heal</code> methods. You would expect this to always pass:</p>

<pre><code>start_health = 100
poke = Pokemon(start_health)
poke.hurt(50)
poke.heal(50)

# A simplified test
print("Test Passed?", poke.hp == start_health)
</code></pre>

<p>If the methods are correct, you would expect this test to always pass. With random data though, your tests can't be as definitive. You may know that it was hurt by some value, then healed by some value, but that isn't enough information to ensure correct functionality (unless you're only testing that it produces results in a certain range).</p>

<p>For small toy projects like this, testing isn't really necessary (although it's always good to practice). When you start dealing with larger projects split across multiple files, written by multiple people, and changing code that you haven't looked at in potentially months, you need tests to ensure that code stays correct from one change to the next. Making testing easier helps ensure the validity of the tests, and prevents you from wasting your time trying to Jerry-rig some test in place after the fact. </p></li>
</ul>

<p>If some code wants to hurt the Pokemon by a random amount, they can generate the random data themselves to pass in to <code>hurt</code>.</p>

<hr>

<p><code>while battle_continue == True:</code> has a redundant condition. <code>while</code> (and <code>if</code>) just check if their condition is truthy. You can just write:</p>

<pre><code>while battle_continue:
</code></pre>
    </div>