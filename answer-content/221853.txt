<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You have built a system of components and shared objects, but don't use its potential. In fact, for your use case the complete setup is an overkill.</p>

<ul>
<li>There is no component hierarchy</li>
<li>There are no component-sensitive or -specific values</li>
<li>You only need a single component to verify any incoming request</li>
</ul>

<blockquote>
<pre><code> public IActionResult postData(
        [FromRoute] string norm, 
        [FromRoute] string component, 
        [FromBody] ValueViewModel[] data)
    {
        Project project = new Project(norm);
        project.SetValues(data);
        return Ok(project.Valid(component));
    }
</code></pre>
</blockquote>

<p>For the aforementioned reasons, I don't see a need for having a list of components and values. I would rewrite the API to be as simple as possible:</p>

<ul>
<li>Let the factory retrieved by <code>FactoryGenerator</code> get the requested component</li>
<li>Let that component validate the input values</li>
</ul>

<p>code:</p>

<pre><code>public IActionResult postData(
        [FromRoute] string norm, 
        [FromRoute] string component, 
        [FromBody] ValueViewModel[] data)
    {
        var component = FactoryGenerator.GetFactory(norm).GetComponent(component);
        return Ok(component.Valid(data));
    }
</code></pre>
    </div>