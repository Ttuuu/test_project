<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Import</h1>

<blockquote>
  <pre class="lang-java prettyprint-override"><code>import java.util.*;
</code></pre>
</blockquote>

<p>The class does not need to import the whole <code>java.util</code> package. Instead it only needs:</p>

<pre class="lang-java prettyprint-override"><code>import java.util.AbstractList;
import java.util.RandomAccess;
</code></pre>

<p>The benefits are:</p>

<ul>
<li>avoid namespace collisions</li>
<li>better readability, because you know the dependencies at a glance</li>
<li>faster compilation</li>
</ul>

<h1>Comments</h1>

<h2>Variable Declaration</h2>

<blockquote>
  <pre class="lang-java prettyprint-override"><code>private Node&lt;Value&gt; root;     // root of the BST 
</code></pre>
  
  <pre class="lang-java prettyprint-override"><code>private Value val;         // associated data
private Node&lt;Value&gt; left, right;  // links to left and right subtrees
private int sizeAndColor; // subtree count + color (highest bit)
</code></pre>
  
  <pre class="lang-java prettyprint-override"><code>int black = 0;     // number of black links on path from root to min
</code></pre>
</blockquote>

<p>Code should be self-documenting, which means that you do not need a comment to understand the code. In the above case the comments are redundant - there is no logic, just simple declaration of variables..</p>

<p>Instead of <code>int black = 0</code> maybe <code>int numberOfBlackNodes = 0</code> is better?</p>

<h2>JavaDoc</h2>

<p><a href="https://en.wikipedia.org/wiki/Javadoc" rel="nofollow noreferrer">Wikipedia</a> describes JavaDoc as:</p>

<blockquote>
  <p>Javadoc [...] is a <strong>documentation generator</strong> [...] for the Java language [...] for generating API documentation in HTML format from Java source code.</p>
</blockquote>

<p>Additionally, if you work with an IDE like <a href="https://www.eclipse.org/" rel="nofollow noreferrer">Eclipse</a> or <a href="https://www.jetbrains.com/idea/" rel="nofollow noreferrer">IntelliJ</a>, a JavaDoc provides you quick access to documentation from inside the IDE.</p>

<blockquote>
  <pre class="lang-java prettyprint-override"><code>public class LogNArray&lt;Value&gt; extends AbstractList&lt;Value&gt; implements RandomAccess {
 // Structure is a left-leaning red-black BST, 2-3 version
</code></pre>
  
  <pre class="lang-java prettyprint-override"><code>// BST helper node data type
private final static class Node&lt;Value&gt; {
</code></pre>
  
  <pre class="lang-java prettyprint-override"><code>// is node x red; false if x is null ?
private boolean isRed(Node&lt;Value&gt; x) {
</code></pre>
  
  <pre class="lang-java prettyprint-override"><code>// number of node in subtree rooted at x; 0 if x is null
private int size(Node&lt;Value&gt; x) {
</code></pre>
</blockquote>

<p>The above snippets are some potential candidates for a JavaDoc.</p>

<pre class="lang-java prettyprint-override"><code>/**
 * number of {@link Node}s in a subtree
 *
 * @param x root of the subtree
 * @return size of subtree or 0 if x is null
 */
private int size(Node&lt;Value&gt; x) {
</code></pre>

<h2>Code that is Commented Out</h2>

<p>In several places I see something like:</p>

<blockquote>
  <pre class="lang-java prettyprint-override"><code>private Node&lt;Value&gt; rotateLeft(Node&lt;Value&gt; h) {
   // assert (h != null) &amp;&amp; isRed(h.right);
</code></pre>
  
  <pre class="lang-java prettyprint-override"><code>private Node&lt;Value&gt; moveRedLeft(Node&lt;Value&gt; h) {
   // assert (h != null);
   // assert isRed(h) &amp;&amp; !isRed(h.left) &amp;&amp; !isRed(h.left.left);
</code></pre>
</blockquote>

<p>If you want to save code do not comment it out - instead use a Version Control like <a href="https://git-scm.com/" rel="nofollow noreferrer">Git</a> or <a href="https://subversion.apache.org/" rel="nofollow noreferrer">SVN</a>.</p>

<p>Code that is commented out decreases the readability level <a href="http://images4.wikia.nocookie.net/__cb20100429142417/unanything/images/4/47/Over9000.jpg" rel="nofollow noreferrer">over 9000</a>, because a reader does not know if this is code that could be a hint, or it is a untested feature, or or or ..</p>

<p>Since it is commented out, you can remove it without affecting the program.</p>

<h1>Naming</h1>

<blockquote>
  <pre class="lang-java prettyprint-override"><code>private Value val;         // associated data
private Node&lt;Value&gt; left, right;  // links to left and right subtrees
private int sizeAndColor; // subtree count + color (highest bit)
</code></pre>
</blockquote>

<p>With the comments you try to express what these variables stand for:</p>

<pre class="lang-java prettyprint-override"><code>private Value associated;         
private Node&lt;Value&gt; leftSubtree, rightSubtree;
private int countAndColor;
</code></pre>

<h1>One Declaration per Line</h1>

<p>From <a href="https://www.oracle.com/technetwork/java/javase/documentation/codeconventions-141270.html#2991" rel="nofollow noreferrer">Oracle's Code Conventions</a>:</p>

<blockquote>
  <p><strong>6.1 Number Per Line</strong><br>
  One declaration per line is recommended since it encourages commenting. In other words,</p>
</blockquote>

<p>In general, the fewer things that happen on a line, the better. At first glance I didn't see that there were two variables at all.</p>

<blockquote>
  <pre class="lang-java prettyprint-override"><code>private Node&lt;Value&gt; left, right;  // links to left and right subtrees
</code></pre>
</blockquote>

<pre class="lang-java prettyprint-override"><code>private Node&lt;Value&gt; leftSubtree;
private Node&lt;Value&gt; rightSubtree;
</code></pre>

<h1>@Override</h1>

<p><code>LogNArray</code> extends <code>AbstractList</code> and overrides multiple methods:</p>

<ul>
<li><code>size()</code></li>
<li><code>isEmpty()</code></li>
<li><code>add(int, Value)</code></li>
<li><code>remove(int)</code></li>
<li><code>get(int)</code></li>
<li><code>set(int, Value)</code></li>
</ul>

<p>These should be annotated with <code>@Override</code> to enable the compiler to warn if you haven't overridden a method, for example if you have a typo in a method name.</p>

<h1>Code Duplication</h1>

<p>Personally for me <code>!isRed</code> is a code duplication, because it tries to express that a node is black and the <code>!</code> is an operation on <code>isRed</code>.</p>

<p>When I search inside my IDE for <code>!isRed</code> it gives me back 9 uses on 6 lines.</p>

<pre class="lang-java prettyprint-override"><code>private boolean isBlack(Node&lt;Value&gt; x) {
  return !isRed(x);
}
</code></pre>

<p>With this method we can increase the readability of the following, for example:</p>

<blockquote>
  <pre class="lang-java prettyprint-override"><code>// if both children of root are black, set root to red
if (!isRed(root.left) &amp;&amp; !isRed(root.right))
 root.setColor(RED);
</code></pre>
</blockquote>

<p>In this case a comment is needed to describe what happens.  But we could simply use <code>isBlack</code> to make the code self documenting:</p>

<pre class="lang-java prettyprint-override"><code>if (isBlack(root.left) &amp;&amp; isBlack(root.right))
  root.setColor(RED);
</code></pre>

<h1>Unused Code</h1>

<blockquote>
  <pre class="lang-java prettyprint-override"><code>private final static class Node&lt;Value&gt; {
/* ... */
Node() {}
</code></pre>
</blockquote>

<p>The default constructor <code>Node() {}</code> is declared explicitly, but is not used, so we could delete it safely.</p>

<h1>Test</h1>

<p>I recommend to use tools for testing like <a href="https://junit.org/junit5/" rel="nofollow noreferrer">jUnit</a>, which provides many methods including asserts, so you do not need to implement them yourself.</p>

<p>The method <code>test_LogNArray</code> is 52 lines long. Methods in general should be as short as possible but the important part for a test is, that a reader needs to understand the test case. </p>

<p>You can achieve shorter test methods by testing only one thing (for example a method) per test. </p>

<p>Additionally, no test should depend on any other test. Since you have only one test method, all things inside it depend on each other. For example, you are testing if the size is 0 first and on the same instance if it is 1 after adding something to it. Now the next test will depend on the item that was already added - so you can't test things that are only possible with an empty array.</p>

<p>A test should follow the <a href="http://wiki.c2.com/?ArrangeActAssert" rel="nofollow noreferrer">AAA-Pattern</a>, where a test is grouped in three blocks:</p>

<ul>
<li><strong>a</strong>rrange the test case,</li>
<li><strong>a</strong>ct on the object under test, and</li>
<li><strong>a</strong>ssert what you expect.</li>
</ul>

<p>The name of a test is a matter of taste.  I prefer a pattern of <code>given__when__then</code> which leads to a long method names.  but simple names like <code>sizeOnAnEmpyArrayIs0</code> are fine too - feel free to choose better names! :]</p>

<h2>First Test Case</h2>

<blockquote>
  <pre class="lang-java prettyprint-override"><code>LogNArray&lt;String&gt; l = new LogNArray();
assertEqualsVerbose(0, l.size());
</code></pre>
</blockquote>

<pre class="lang-java prettyprint-override"><code>@Test
void given_emptyArray_when_countSize_then_expect0 {
  // arrange
  LogNArray&lt;String&gt; array = new LogNArray();

  // act
  int size = array.size();

  // assert
  assertEquals(0, size)
}
</code></pre>

<h2>Second Test Case</h2>

<blockquote>
  <pre class="lang-java prettyprint-override"><code>for (int i = -1; i &lt; 2; i++) { int _i = i ; assertException(new Runnable() {  public void run() { try {  l.get(_i) ;
} catch (Exception __e) { throw rethrow(__e); } }  public String toString() { return "l.get(_i)"; }}); }
</code></pre>
</blockquote>

<p>At first glance I didn't see what was going on, so I needed to beautify it:</p>

<blockquote>
  <pre class="lang-java prettyprint-override"><code>for (int i = -1; i &lt; 2; i++) {
    int _i = i ; 
    assertException(new Runnable() {
        public void run() { 
            try {  
                l.get(_i) ;
            } catch (Exception __e) { throw rethrow(__e); } }  
        public String toString() { return "l.get(_i)"; }}
    ); 
}
</code></pre>
</blockquote>

<pre class="lang-java prettyprint-override"><code>@Test
void given_emptyArrayAndAnIndex_when_getValueOnIndex_then_throwsIndexOutOfBoundsException {
  // arrange
  LogNArray&lt;String&gt; array = new LogNArray();
  int index = 5;

  // act and assert
  assertThrows(IndexOutOfBoundsException.class, array.get(index));
}
</code></pre>

<h2>Third Test Case</h2>

<blockquote>
  <pre class="lang-java prettyprint-override"><code>l.add("hello");
assertEqualsVerbose(1, l.size());
</code></pre>
</blockquote>

<pre class="lang-java prettyprint-override"><code>@Test
void given_oneItem_when_countSize_then_expect1() {
  // arrange
  LogNArray&lt;String&gt; array = new LogNArray();
  array.add("hello");

  // act
  int size = array.size();

  // assert
  assertEquals(1, size);
}
</code></pre>

<h2>And so on..</h2>
    </div>