<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Surround your code in a self invoking anonymous function</p>

<p><code>(function(){ /** code here */ })();</code></p>

<p>So it does not conflict with any other variables that may have been declared in the same scope.</p>

<hr>

<p>Declare all global variables at the top of your file and within an object wrapper. It'll be easier to handle them later and know where they are located.</p>

<pre><code>const data = {
  arcs: [],
  offset: { x: 0, y: 0 },
  pos: undefined,
  scale: 1
};
</code></pre>

<hr>

<p>HTML Elements that are called more than once should be stored in their own variable in the global scope of your project.</p>

<p>Change this</p>

<pre><code>var speed = parseInt(document.getElementById("spd").value);
var size = parseInt(document.getElementById("size").value);
</code></pre>

<p>To</p>

<pre><code>/** set with all other global variables */
const speedEle = document.getElementById("spd");
const sizeEle = document.getElementById("size");

/** in your method */
var speed = parseInt(speedEle.value);
var size = parseInt(sizeEle.value);
</code></pre>

<hr>

<p>Store your setTimeout's ids in a global <em>store</em> with <a href="https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/Set" rel="nofollow noreferrer">Set</a>.</p>

<pre><code>const ids = new Set();

function clearAllIntervals() {
  ids.values().map(clearInterval);
  ids.clear();
}
</code></pre>

<p>and add your ids like so:</p>

<p><code>ids.add(setTimeout(drawNext, 1000 / spd));</code></p>

<hr>

<p>Don't use <code>var</code> use <code>let</code> or <code>const</code>.</p>

<hr>

<p>Don't use <strong>magic numbers</strong> i.e:</p>

<pre><code>if (i &gt; 2500) {
   return null;
}
</code></pre>

<p>Define the 2500 as a global constant, preferable in the <code>data</code> object mentioned before OR (even better) a <code>config</code> object for other such variables (makes it easier if you wish to change those numbers later on)</p>

<hr>

<p>Don't use <strong>undefined</strong> as a value of reference. It's cleaner to use <code>null</code> instead.</p>

<p><code>let pos = null;</code></p>

<hr>

<p>Simplify redundant code</p>

<pre><code>function canvasSizeHandler(){
  canvas.width = window.innerWidth;
  canvas.height = window.innerHeight;
}

addEventListener("resize", canvasSizeHandler);
/** on initial start */
canvasSizeHandler();
</code></pre>
    </div>