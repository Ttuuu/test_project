<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2><code>SmallestNumberGratherThanOrEqual</code></h2>

<p>This looks mostly fine to me. I can't think how else to implement it, since you can't really separate the 'finding smallest' bit from the 'finding where <code>num</code> would go' bit.</p>

<ul>
<li><p>The method should probably be public and static.</p></li>
<li><p>The spec does say a number <code>N</code>... but oh well. <code>root</code> is fine as the parameter name, but it quickly becomes misleading, as it ceases to be the root node pretty quickly.</p></li>
<li><p>It's iterative, which makes me happy.</p></li>
</ul>

<p>Since I have so little to say about the code in question...</p>

<h2><code>BstNode.Add(BstNode, int)</code></h2>

<ul>
<li><p>Why does <code>Add</code> take a <code>BstNode</code> as a parameter?!?!?!?1 Either it should be an instance method and operate on itself, or it should be static and operate on the parameter. The problem here is both conceptual and technical, as it makes no sense to ask a <code>BstNode</code> to operate on another <code>BstNode</code>, and it means that both nodes are in scope, so you might use the wrong one by mistake. I often have an instance method call a private static method simply to avoid this (e.g. when calling something iterative which will 'change' the parameter as it goes).</p></li>
<li><p>This is odd:</p>

<pre><code>if (node == null)
{
    return new BstNode(key);
}
</code></pre>

<p>This bit doesn't actually add anything to anything - despite being in a method called <code>Add</code> - and is liable to cover-over a bug elsewhere which passes this method a <code>null</code>. Even worse, a <code>null</code> goes in, and something strange but not <code>null</code> comes out, which means the bug is likely to go even further now that there is some actual state going around.</p>

<p>I can see why it's there (it's part of the recursive method), but this sort of thing should not be <code>public</code>. Better would be to make this method private (and perhaps static and iterative as discussed above), and call it from another <code>Add</code> method which throws on <code>null</code>. This way, the specifics of your implementation of <code>Add</code> will not leak into the public API, and you can instead provide helpful error messages. You could also remove the return value, which is meaningless and just adds more confusion for the consumer.</p></li>
<li><p>Channelling t3chb0t for a moment... he might say that finding the base node and adding to it are different concerns, and that you should write one private method to find the node to add to, and call it from another which then does the adding. Such a method could not, however, be directly exploited to find the solution to the problem unless it was implemented in such a way that is basically did solve the problem, which is a bit of a shame.</p></li>
<li><p>As always, inline documentation (<code>///</code>) would be nice on this public method.</p></li>
</ul>

<h2>other <code>BstNode</code> stuff</h2>

<ul>
<li><p><code>keyt</code> is a bit of an odd name.</p></li>
<li><p><code>Parent</code> is never set. This is clearly an error and would make me as a consumer very sad if I'd designed my code around the assumption that I can access the parent of a <code>BstNode</code> and then discovered that I can not.</p></li>
<li><p>All the members are public fields: perhaps this is an attempt to avoid the overhead of getters? If so, don't worry about that cost: they are usually optimized away completely for non-virtual properties (at least, whenever <em>I</em> look for them they don't seem to be there).</p>

<p>I'd have <code>Left</code> and <code>Right</code> as <code>public { get; private set; }</code>. <code>Parent</code> and <code>Value</code> can be readonly if the tree if nodes are never removed from the tree. Indeed, for an 'add-only' tree, I'd be inclined to have the setters on <code>Left</code> and <code>Right</code> check that they are not overwriting anything. This would break the first test method, but frankly it's horrifying and ought to be rewritten.</p></li>
<li><p>Passing <code>BstNode</code> around is fine if everything knows that it is a tree, but really you should have a <code>BinarySearchTree</code> class which encapsulates these nodes, as it is meaningless and dangerous to operate on them independently (e.g. if you call <code>Add</code> on a child node you may end up with a mal-formed tree): nobody should have write-access to <code>BstNode</code> except <code>BinaryNodeTree</code>. Doing so would require exposing methods to traverse the tree without allowing modifications, so that you can still write the specified search outside of the <code>BinarySearchTree</code> class. This also gives a nice solution to the <code>root</code> parameter name problem.</p></li>
</ul>

<h2>Generics</h2>

<p>If it weren't for the really horrible spec (-1 is a perfectly valid number, it should not be used as output here) I'd suggest this should be generic. Performance might suffer (depening on how you facilitate comparisons), but a generic solution is always nice: you can write a concrete version for <code>int</code> if the performance isn't good enough later.</p>

<h2>Performance</h2>

<p>I don't know anything about binary trees, but this is a very simple non-self-balancing implementation, and has a worst-case lookup time of <code>O(n)</code>. A self-balancing tree (such as a <a href="https://en.wikipedia.org/wiki/Red%E2%80%93black_tree" rel="nofollow noreferrer">Red-Black Tree</a> (there are others) can guarantee logarithmic lookup time, at the cost of a more complicated data-structure and higher and the overheads which come with it. (This doesn't, however, change how you would implemented the specification, as it assumes a binary tree and doesn't ask you to modify it).</p>

<h2>Boring stuff</h2>

<p>I'd appreciate a few more empty lines to break the code up a bit, e.g. before the <code>while</code>, between all those <code>if</code>s in <code>Add</code>, and before the <code>return</code>s.</p>
    </div>