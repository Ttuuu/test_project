<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>from reading through your code I've collected following remarks:</p>

<ul>
<li>Why do you only allow one instance of your allocator?</li>
<li>Note: the <code>pointer</code> typedef in <code>std::allocator</code> is deprecated in C++17. </li>
<li>In <code>Pool::allocate</code>, you are waiting using <code>condition_variable.wait()</code>. This function may return without being notified because of a <em>spurious wakeup</em>. The usual solution is to wait for the condition in a loop and check a boolean flag (here: <code>occupation_flags.all()</code>). C++ offers a second interface for <code>wait()</code> allowing you to pass a predicate that is checked in a loop:</li>
</ul>

<pre><code>   if (occupation_flags.all())
       condition_variable.wait(lock, []{ return occupation_flags.all(); });
</code></pre>

<ul>
<li>In <code>Pool::deallocate</code> you are only notifying the condition if the pool is exhausted. What if two threads are waiting for a newly released block? You may leave the second thread waiting forever. There is no need to only notify if someone is listening, just send the signal.</li>
<li>In <code>Pool::deallocate</code> you are checking if the pointer belongs to the pool and silently throw this error away. C++ philosophy was always to not prevent the developer from shooting himself in the foot. You should fail as loud as possible, that is, make it an assert. Freeing memory that is not managed by the pool suggests there is a serious bug in the application and the user should know about it.</li>
<li><code>In Pool::FindVacant</code> use <code>auto</code> and <code>0u</code>:</li>
</ul>

<pre><code>for (auto i = 0u; i &lt; blocks; ++i)
    if (occupation_flags[i] == 0)
        return i;
</code></pre>

<p>Some general comments:</p>

<ul>
<li>I think offering two types of error handling for the allocator complicates the whole class. You may be better off implementing two different allocators (<code>BlockingAllocator</code> and <code>ThrowingAllocator</code>) than handling this inside of the class. </li>
<li>I would replace the block_size parameter by a type parameter. The allocator can then allocate elements of that type (the size can be derived from it using <code>sizeof</code>) and you don't need to <code>reinterpret_cast</code> your pointers in the class and outside of the class. </li>
</ul>

<p><em>EDIT</em></p>

<p>Just went over the test cases. </p>

<ol>
<li><code>static bool test_double_deallocation()</code> usually double-free is an error. I would expect the application to either raise an error or walk into undefined behavior. With this test case you're documenting that your interface supports double-free, which is at least uncommon.</li>
<li>Just a small one:</li>
</ol>

<pre><code>catch (std::bad_alloc&amp;)
</code></pre>

<p>Better catch by const-ref.</p>

<ol start="3">
<li><code>static bool test_threads()</code>
Whats the purpose of this test? You're not looking for exceptions, you're only allocating once per thread. IMO a test case should document a certain feature of the API. Here you're only checking that no exception was raised. You can achieve this easier and more readable by simply flipping an atomic flag in your <code>catch</code>.</li>
</ol>
    </div>