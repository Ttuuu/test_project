<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>General advices</h2>

<p>Separate <a href="https://medium.com/javascript-scene/master-the-javascript-interview-what-is-a-pure-function-d1c076bec976" rel="nofollow noreferrer">pure</a> functions from impure ones. 
Pure functions don't have side effects and they are easy to test and reuse. If you have function, which 
contain pure (some calculations) and impure (DOM access/modify) parts â€” split it on two functions.</p>

<p>Create functions, which will do only thing.
Do not force reader (primarily you) to keep in mind function side effects. </p>

<p>To improve code quality start by writing functions calls instead of functions definitions. 
This will force you to think more about function signature and its usability.</p>

<p>Solve more general problem after solving few particular ones. 
General solutions are more reusable, although could be more complex. </p>

<h2>Line by line review</h2>

<ul>
<li>Comment <code>// declare all variables</code> is not very useful. This comment contains obvious information.</li>
<li>Comment <code>// generic function that takes in quantity and multiplies with appropriate price</code>
discloses inner working of function <code>calcPrice()</code>. 
Reader should not understand how function work in order to use it.</li>
<li>Your function name is <code>calcPrice()</code> and its second parameter is <code>price</code>. This is confusing. 
You actually calculate <strong>total</strong> price.</li>
<li>Comment <code>// generic function that outputs final price and amout it tickets purchased</code> is redundant and contains typo.</li>
<li>Function <code>getMessage()</code> has two responsibilities. 
First one is creating string message, second one is assigning it to <code>innerHTML</code> of HTML element. Split it.</li>
<li>You will get <code>NaN</code> if one of input fields is empty.</li>
<li>Don't define <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var" rel="nofollow noreferrer">var</a> variables in block scope. <code>var</code> has function scope. Use <a href="https://en.wikipedia.org/wiki/Immediately-invoked_function_expression" rel="nofollow noreferrer">IIFE</a> if you need to have a scope.</li>
<li>You duplicate function call <code>calcPrice()</code> three times, which is not really bad, but can be improved.</li>
</ul>

<h2>Suggested solution</h2>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>function calcTotalPrice(quantity, price) {
    return quantity * price;
}

function getMessage(quantity, totalPrice) {
    return 'You purchased ' + quantity + ' ticket(s) and your total price is $' + totalPrice
}

function parseQuantity(val) {
    return parseInt(val, 10) || 0;
}

// Sum numbers in given list
function sum(list) {
    return list.reduce(function(acc, x) {
        return acc + x;
    }, 0)
}

(function() {
    // We use IIFE here to define a scope to initialize some variables here
    var submitBtn = document.getElementById('submitButton');
    var outputPara = document.getElementById('totalPrice');

    var config = [
        [document.getElementById('quantityAdult'), 49],
        [document.getElementById('quantityChild'), 20],
        [document.getElementById('quantitySenior'), 30]
    ];

    submitBtn.addEventListener('click', function() {
        var totalPrices;
        var quantities = config.map(function (data) { // In ES6 we could use array destructing: [el, price]
            var el = data[0];
            return parseQuantity(el.value);
        });

        if ( sum(quantities) &gt; 0 ) {
            totalPrices = config.map(function(data) {
                var el = data[0], price = data[1];
                return calcTotalPrice(parseQuantity(el.value), price);
            });

            outputPara.innerHTML = getMessage( sum(quantities), sum(totalPrices) );
        } else {
            alert('Please purchase at least 1 ticket');
        }
    });

}());</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
    &lt;meta charset="UTF-8"&gt;
    &lt;title&gt;Title&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;p&gt;Purchase your tickets online! &lt;/p&gt;
    &lt;ul&gt;
        &lt;li&gt;$49 - Adult&lt;/li&gt;
        &lt;li&gt;$20 - Child&lt;/li&gt;
        &lt;li&gt;$30 - Senior &lt;/li&gt;
    &lt;/ul&gt;

    &lt;label&gt;Quantity: &lt;/label&gt;&lt;input type="text" id="quantityAdult" value="0"&gt; &lt;label&gt;Adult&lt;/label&gt;
    &lt;br&gt;&lt;br&gt;
    &lt;label&gt;Quantity: &lt;/label&gt;&lt;input type="text" id="quantityChild" value="0"&gt; &lt;label&gt;Child&lt;/label&gt;
    &lt;br&gt;&lt;br&gt;
    &lt;label&gt;Quantity: &lt;/label&gt;&lt;input type="text" id="quantitySenior" value="0"&gt; &lt;label&gt;Senior&lt;/label&gt;

    &lt;br&gt;&lt;br&gt;
    &lt;button type="submit" id="submitButton"&gt;Submit&lt;/button&gt;
    &lt;p id="totalPrice"&gt;&lt;/p&gt;
    &lt;br&gt;&lt;br&gt;
    &lt;button&gt;Proceed To Checkout&lt;/button&gt;

    &lt;script src="script.js"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>
</div>
</div>

    </div>