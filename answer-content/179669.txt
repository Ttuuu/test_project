<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Formatting</h2>

<p>Your SQL statement formatting is not very good. I would encourage you to use a free tool like <a href="http://www.sql-format.com/" rel="noreferrer">sql-format.com</a> (or one of the many others) to format your SQL queries in a more readable way. This is your original query, with better formatting (I indented the subqueries by hand because the tool didn't).</p>

<pre><code>SELECT
    city,
    CHAR_LENGTH(city)
FROM STATION
WHERE city = (
    SELECT
        MIN(city)
    FROM STATION
    WHERE CHAR_LENGTH(city) = (
        SELECT
            MIN(CHAR_LENGTH(city))
        FROM STATION
    )
)
OR city = (
    SELECT
        MIN(city)
    FROM STATION
    WHERE CHAR_LENGTH(city) = (
        SELECT
            MAX(CHAR_LENGTH(city))
        FROM STATION
    )
);
</code></pre>

<p>Now we can see much more easily how deeply nested queries are.</p>

<hr>

<h2>Variables</h2>

<p>You could make the code simpler by using a few <a href="https://dev.mysql.com/doc/refman/5.7/en/user-variables.html" rel="noreferrer">user-defined variables</a>:</p>

<pre><code>SET @MinCityLen = (SELECT MIN(CHAR_LENGTH(city)) FROM STATION);
SET @MaxCityLen = (SELECT MAX(CHAR_LENGTH(city)) FROM STATION);
/* Query below only to demonstrate the variables */
SELECT 
  '@MinCityLen' AS `VariableName`, 
  @MinCityLen AS `Value`
UNION
SELECT 
  '@MaxCityLen', 
  @MaxCityLen;
</code></pre>

<p>Which returns this:</p>

<blockquote>
<pre><code>VariableName  Value
@MinCityLen   3
@MaxCityLen   4
</code></pre>
</blockquote>

<p>This will abstract away one level of nesting and make the query simpler to understand. Note that the <code>@</code> symbol is just a convention, it is not needed as far as MySQL syntax goes. Some database systems do require the <code>@</code> symbol though, the most famous being Microsoft SQL Server.</p>

<hr>

<h2>Shorter code != Better code</h2>

<p>Sometimes, better code is longer rather than shorter. This is often the case with SQL. Longer code can be better formatted, better documented, better abstracted, better structured. In my personal SQL experience, short queries, unless they are very simple, are often pretty bad. Yours is not a case of a very simple query. </p>

<p>This is what I came up with. I also have a link on <a href="http://sqlfiddle.com/#!9/573f09/40/1" rel="noreferrer">sqlfiddle</a></p>

<pre><code># find shortest city name
SET @MinCityLen = (SELECT MIN(CHAR_LENGTH(city)) FROM STATION);
# find longest city name
SET @MaxCityLen = (SELECT MAX(CHAR_LENGTH(city)) FROM STATION);

SELECT
    city,
    CHAR_LENGTH(city)
FROM 
    STATION
WHERE 
    # find shortest city name sorted alphabetically
    city = (
        SELECT
            city
        FROM STATION
        WHERE CHAR_LENGTH(city) = @MinCityLen
        ORDER BY city ASC
        LIMIT 1
    )
    # find longest city name sorted alphabetically
    OR city = (
        SELECT
            MIN(city)
        FROM STATION
        WHERE CHAR_LENGTH(city) = @MaxCityLen
        ORDER BY city ASC
        LIMIT 1
    );
</code></pre>
    </div>