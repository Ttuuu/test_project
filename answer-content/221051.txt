<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>Please review the code as if this was 45 minute interview.</p>
</blockquote>

<p>I don't know what you expect from answerers with this statement.
The evaluation of some code produced within 45 minutes is subjective,
highly dependent on the company and position,
and dozens of other factors.
Whether a reviewer says "good job in 45 minutes" or "poor job in 45 minutes",
I think it's going to be meaningless.</p>

<p>I suggest to focus on writing the best possible code, and post just that.
By doing this exercise a lot,
your performance within 45 minutes will also naturally improve.
And performance within 45 minutes is never the end goal anyway for any job.</p>

<blockquote>
  <p>I have one question also is why not use use maxHeap and do the "trick" of multiplying the quality with -1, before pushing into the heap?</p>
</blockquote>

<p>I don't understand this question.
But maybe I can still help.
Consider a heap as a collection + a comparator function.
Then there is no more "max heap" and "min heap",
simply a heap, where the top element is determined by the function.</p>

<p>The "trick" of multiplying elements by -1 seems fragile to me.
I think the implied context here is that the elements are numbers,
and the comparator function is the natural ordering of numbers.
As such, the behavior is a "min heap": the element is the smallest one.
If you insert values multiplied by -1, and then when you remove the top element and multiply it by -1, it has the effect as if the behavior is changed to a "max heap".</p>

<p>I find this fragile because you have to remember to multiply values when adding and removing. Such behavior is best encapsulated somewhere.
And that's what the comparator function can do for you.
Using an appropriate comparator function will allow you to use the heap naturally, adding and removing values without extra manipulation.</p>

<h3>Improving <code>Worker</code></h3>

<p><code>Wage</code> is only used to compute <code>Ratio</code>.
The ratio is recomputed every time <code>Ratio</code> is called.
It would be better to compute the ratio ones,
store it,
and drop the <code>Wage</code> field.</p>

<h3>Where to put the comparator logic?</h3>

<p>In the posted code the comparator logic is in the <code>Worker</code>.
And that's fine, the program works.
But is this ordering an inherent property of the <code>Worker</code>?
Not really.
On the other hand, it's a crucial piece to understanding how the solution works.
So instead of the comment at <code>Arrays.Sort</code>,
I would define the sorting function there.
It would make the solution easier to read and understand,
the comment would become unnecessary,
and if later you need another kind of sorting of workers,
you will be free to define a different appropriate comparator.</p>

<h3>Getting rid of <code>if (heap.Count == K)</code></h3>

<p>I think it's a code smell when a condition in a loop will be false for the first couple of values, and then always true.
It would be better to reorganize the code to avoid unnecessary evaluations.</p>

<p>Consider this alternative:</p>

<ul>
<li>add to heap the first <code>K</code> values</li>
<li>compute <code>sumq</code> as the sum of the first <code>K</code> values</li>
<li>initialize <code>minCost</code> as <code>sumq</code> multiplied by the ratio of the <code>K</code>-th worker</li>
<li>loop from <code>K</code> until the last worker

<ul>
<li>add to heap the quality <code>q</code> of the current worker</li>
<li><code>sumq += q - heap.poll()</code> (this assumes that the ordering of heap is defined as the reverse of natural ordering (largest number on top), and that quality values are added as they are, without multiplying by -1)</li>
<li><code>minCost = Math.Min(minCost, sumq * worker.Ratio)</code></li>
</ul></li>
</ul>

<p>Notice that in this alternative organization there is no more need for the useless assignment <code>double ans = double.MaxValue;</code> (and I renamed <code>ans</code> to <code>minCost</code>).</p>

<h3>A word on <code>BinaryHeap</code></h3>

<blockquote>
  <p>This is the code for the MinHeap no need to review it</p>
</blockquote>

<p>If no need to review it, then it would have been better to post just the definition of the interface.
And I think it would have guided you in a good direction.
For example, even in this text, you refer to it as "MinHeap",
but the class is actually called "BinaryHeap",
which is an implementation detail, irrelevant in the implementation of the solution.</p>
    </div>