<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As I told you, the best practice is to use a class, I called it <code>Adventure</code> (it sounds encouraging).</p>

<p>The <code>start()</code> function is the starting point which do initialisation. So, let's create a constructor for that:</p>

<pre><code>import textwrap


class Adventure(object):
    def __init__(self):
        self.gold = 2
        self.health = 10
        self.energy = 10
        self.melee = 1
        self.ranged = 0
        self.ammo = 0
        self.full_health = 10
        self.attack_num = 0

    def start(self):
        msg = textwrap.dedent('''
        ****************************************
        *                                      *
        *  Welcome to Aaron's Text Adventure!  *
        *                                      *
        ****************************************
        ''')
        print(msg)
        self.cottage()

    def cottage(self):
        # ...
        pass


def main():
    adventure = Adventure()
    adventure.start()


if __name__ == '__main__':
    main()
</code></pre>

<p><strong>The constructor:</strong></p>

<ul>
<li>Initialisation is done in the constructor (the <code>__init__</code> method);</li>
<li>Usually, I prefer not doing anything in the constructor (except initialisation), so I decided to move the <code>print</code> in the <code>start</code> method.</li>
<li>I rename the following variable: <code>fullhealth</code> and <code>attacknum</code> that way my editor don't alert me about spelling. If you used to do that, your code will be easier to maintain.</li>
</ul>

<p><strong>The <code>start</code> method:</strong></p>

<ul>
<li>I use <code>textwrap.dedent()</code> to have good looking messages: it simply remove the indentation;</li>
<li>Like you, I trigger the <code>cottage()</code> method, but it will be better to use a Finite State Machine…</li>
</ul>

<p><strong>main()</strong></p>

<ul>
<li>It is better to put the main code in a <code>main()</code> function (call it as you like). Because, your <code>Adventure</code> class could be use as an API, for instance: one can inherit from it and add more, say, locations…</li>
<li>In Python, you use the <code>if __name__ == '__main__'</code> construction do call the main function when the program is executed as a script. See the answer to the question <a href="https://stackoverflow.com/a/419185/1513933">What does if <code>__name__ == “__main__”</code>: do?</a></li>
</ul>
    </div>