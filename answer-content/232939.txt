<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>According to the comment by @konijn and your answer to his comment below your question you tried to implement a variant of the algorithm  <a href="https://en.wikipedia.org/wiki/3SUM" rel="nofollow noreferrer">3SUM</a> but your implementation is <strong>totally wrong</strong>.</p>

<p>Let's start again: given an array and a value k you want to find three elements a, b, c in the array that satisfy the condition a + b + c = k. To obtain a complexity of O(n2) you have to use an hashtable to store values already checked in the array so if you have a and b and the hashtable contains the value c = k - (a + b) the algorithm ends. In this case instead of an hashtable I will use an <code>hashset</code> like I explain later.
The initial implementation of your method will be like this:</p>

<pre><code>public static int[] tripletSum(int[] arr, int k) {  
    final int n = arr.length;

    if (n &lt; 3) { return null; }

    int[] numbers = Arrays.copyOf(arr, n);
    Arrays.sort(numbers);
    ...omitted
}
</code></pre>

<p>You have chosen to return the triplet (a, b, c) if a + b + c = k, otherwise you return the <code>null</code> triplet if the length of the array if less than 3 or none triplet (a, b, c) satisfies the sum condition a + b + c = k.
Now add the logic of algorithm to the body of method like below:</p>

<pre><code>public static int[] tripletSum(int[] arr, int k) {  
    final int n = arr.length;

    if (n &lt; 3) { return null; }

    int[] numbers = Arrays.copyOf(arr, n);
    Arrays.sort(numbers);

    for (int i = 0; i &lt; n - 1; ++i) {
        if (i &gt; 0 &amp;&amp; numbers[i] == numbers[i - 1]) { continue; }    
        Set&lt;Integer&gt; set = new HashSet&lt;&gt;();
        int a = numbers[i];
        for (int j = i + 1; j &lt; n; ++j) {
            int b = numbers[j];
            int c = k - (a + b);
            if (set.contains(c)) {
                return new int[] {a, b, c};
            }
            set.add(b);
        }
    }
    return null;
}
</code></pre>

<p>I made a copy of the original array and sorted it so all duplicate numbers are consecutive : in this way in the loop once for a number a the there are no b and c that satisfy the condition a + b + c = k, the loop ignore all equal numbers to n with instruction <code>continue</code>. </p>

<p>I use the <code>HashSet</code> to store the c values, so in every cycle of the loop I have a and b and I check if the hashset contains the value c = k - (a + b). If yes, the function returns the triplet (a, b, c) otherwise the value b is stored in the hashset if not already present as a c value for next iterations.</p>
    </div>