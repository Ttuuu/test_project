<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>LogicBlocks::Or_02::Or_02(uint32_t *bitsArray, 
                          uint32_t input_01, LogicType_e inputType_01,
                          uint32_t input_02, LogicType_e inputType_02, 
                          uint32_t output):
        m_BitsArray{bitsArray}, 
        m_In01{input_01}, m_In01Type{inputType_01}, 
        m_In02{input_02}, m_In02Type{inputType_02}, 
        m_Out{output}{
}
</code></pre>

<p>Member variables are initialized in the order specified in the class, not the order in the initializer list (so <code>m_BitsArray</code> will be initialized last). While nothing will break here, it's best to always use the correct order in the initializer list.</p>

<hr>

<pre><code>(Utils::TestBitSet(m_BitsArray, m_In01) &amp;&amp; m_In01Type == POS)
</code></pre>

<p>There's a lot of code like this. Why not factor it into a function taking all three variables:</p>

<pre><code>Utils::TestBitSet(m_BitsArray, m_In01, m_In01Type);
</code></pre>

<hr>

<p>[Opinion] I'm not too fond of the separate <code>TestBitSet()</code> and <code>TestBitClr()</code>. It's neater to just have one <code>IsBitSet()</code> and use <code>!IsBitSet()</code> where appropriate.</p>

<hr>

<pre><code>new LogicBlocks::Or_02
</code></pre>

<p>Don't just leak memory. Use a <code>std::unique_ptr</code>, or delete it manually.</p>

<hr>

<p><code>LogicBlk</code> must have a virtual destructor (and then you also don't need to specify empty destructors in the derived classes).</p>

<hr>

<p><code>virtual Update(void);</code></p>

<p>The <code>void</code> parameter isn't necessary in C++.</p>

<hr>

<pre><code>#define LSig01      (LW_01*32 + 0x00)
...
</code></pre>

<p>Prefer constant static variables to <code>#defines</code>, because they have proper scoping.</p>

<hr>

<pre><code>Or_03(uint32_t* const bitsArray, 
      const uint32_t input_01, const LogicType_e inputType_01, ...
</code></pre>

<p>Don't make function arguments that are passed by value <code>const</code>. These <code>const</code>s don't actually matter to the caller, and they hide the <code>const</code>s that do matter (e.g. <code>&amp;</code> vs <code>const&amp;</code> or <code>*</code> vs <code>const*</code>), which makes the declaration harder to read. C++ also allows the use of <code>const</code> in a declaration to be different from the use of <code>const</code> in the function definition, so it can even be misleading.</p>

<hr>

<p>We can use templates for the different numbers of inputs:</p>

<pre><code>struct LogicInput {
    LogicType_e type;
    std::uint32_t value;
};

template&lt;std::size_t NumInputs&gt;
class Or {
public:

    Or(uint32_t* bitsArray, std::array&lt;LogicInput&gt;, NumInputs&gt; in, uint32_t out);

    ...

    std::array&lt;LogicInput&gt; m_In;
    std::uint32_t m_Out;
    uint32_t* m_BitsArray;
};
</code></pre>
    </div>