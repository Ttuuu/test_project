<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Testing:</strong></p>

<ul>
<li>It's hard to notice problems in a long list of output like that.</li>
<li>It's hard to track the state of the <code>tempVec</code> and determine the correct output for each case.</li>
<li>Both these become harder if you have to come back to it later, making maintaining and changing the code changes difficult.</li>
</ul>

<p>It's much neater to split the testing up, and calculate a simple boolean pass / fail result for each test. e.g.:</p>

<pre><code>void test(bool condition, std::string const&amp; testName)
{
    if (!condition)
        std::cout &lt;&lt; "FAIL: " &lt;&lt; testName &lt;&lt; std::endl;
    else
        std::cout &lt;&lt; "pass" &lt;&lt; std::endl;
}

...

    {
        Matrix&lt;float&gt; m;
        test(m.getRows() == 0 &amp;&amp; m.getCols() == 0, "Default constructed matrix is empty.");
    }

    {
        std::vector&lt;float&gt; args;
        for (auto i = 0; i != 9; ++i)
            args.push_back((float)(i % 3));

        Matrix&lt;float&gt; m(args, 3, 3);

        auto pass = true;
        for (auto c = 0; c != 3; ++c)
            for (auto r = 0; r != 3; ++r)
                pass = pass &amp;&amp; (m.at(r, c) == c);

        test(pass, "Matrix from vector is correctly populated.");
    }
</code></pre>

<p>Even better, use a test framework like Google Test or Catch2.</p>

<hr>

<p><strong>Code:</strong></p>

<ul>
<li><p>Inside the class, the template argument is inferred by the compiler can be left off, e.g. <code>Matrix&lt;T&gt; transpose();</code> means the same as <code>Matrix transpose();</code>.</p></li>
<li><p>The index type should be unsigned (a negative number of rows / columns doesn't make sense). <code>std::size_t</code> would be a good choice.</p></li>
<li><p>Does the size of the matrix actually need to vary at run-time? If not, many run-time errors can be ruled out by fixing the number of rows and columns at compile-time as template arguments, and using <code>std::array</code> instead of <code>std::vector</code>:</p>

<pre><code>template&lt;typename T, std::size_t Rows, std::size_t Columns&gt;
class Matrix {
private:

    std::array&lt;T, Rows * Columns&gt; data;

    ...
};
</code></pre></li>
<li><p>Constructors should check that the number of values in the vector is appropriate for the number of rows / columns.</p></li>
<li><p>Constructors should use initializer lists to initialize class members in the constructor.</p></li>
<li><p><code>std::vector</code> has its own copy constructor that copies the data, so there's no need to manually loop through (or clear the <code>data</code> member first). The constructor could look more like this:</p>

<pre><code>template &lt;typename T&gt;
Matrix&lt;T&gt;::Matrix():
    data(), rows(0), cols(0) {
}

template &lt;typename T&gt;
Matrix&lt;T&gt;::Matrix(std::vector&lt;T&gt; const&amp; elements, int numRows, int numCols):
    data(elements), rows(numRows), cols(numCols) {

    if (!data.size() == rows * cols)
        throw std::invalid_argument("number of data elements must correspond to the number of rows and columns");
}
</code></pre></li>
<li><p>Don't duplicate functionality. If you provide operator overloads for various operations there's no need to also provide named functions.</p></li>
<li><p>Nearly all the member functions can be declared <code>const</code>, ensuring they don't change member data. e.g. <code>void print() const;</code>, <code>int getRows() const;</code> etc.</p></li>
<li><p>Abstract the indexing of data elements into a separate function (e.g. <code>int getIndex(int row, int col);</code>). It's less error prone, and can easily be changed if necessary (i.e. row-major to column major storage).</p></li>
<li><p>The current interface is rather incomplete:</p>

<ul>
<li><p>There is no way to access individual elements. (i.e. <code>T&amp; at(int row, int col);</code> and <code>T const&amp; at(int row, int col); const</code>).</p></li>
<li><p>Missing a <code>!=</code> operator to go with the <code>==</code>.</p></li>
<li><p>Several mathematical operations are missing. A more complete set of operators might look something like this:</p>

<pre><code>// member functions:

Matrix&amp; operator+=(T a);
Matrix&amp; operator-=(T a);
Matrix&amp; operator*=(T a);
Matrix&amp; operator/=(T a);

Matrix&amp; operator+=(Matrix const&amp; a);
Matrix&amp; operator-=(Matrix const&amp; a);

Matrix operator-() const; // unary negation

// free functions:

Matrix&lt;T&gt; operator+(Matrix&lt;T&gt; const&amp; a, T b);
Matrix&lt;T&gt; operator-(Matrix&lt;T&gt; const&amp; a, T b);
Matrix&lt;T&gt; operator*(Matrix&lt;T&gt; const&amp; a, T b);
Matrix&lt;T&gt; operator/(Matrix&lt;T&gt; const&amp; a, T b);

Matrix&lt;T&gt; operator+(T a, Matrix&lt;T&gt; const&amp; b);
Matrix&lt;T&gt; operator-(T a, Matrix&lt;T&gt; const&amp; b);
Matrix&lt;T&gt; operator*(T a, Matrix&lt;T&gt; const&amp; b);
Matrix&lt;T&gt; operator/(T a, Matrix&lt;T&gt; const&amp; b);

Matrix&lt;T&gt; operator+(Matrix&lt;T&gt; const&amp; a, Matrix&lt;T&gt; const&amp; b);
Matrix&lt;T&gt; operator-(Matrix&lt;T&gt; const&amp; a, Matrix&lt;T&gt; const&amp; b);

Matrix&lt;T&gt; operator*(Matrix&lt;T&gt; const&amp; a, Matrix&lt;T&gt; const&amp; b);

Vector&lt;T&gt; operator*(Matrix&lt;T&gt; const&amp; a, Vector&lt;T&gt; const&amp; b);
Vector&lt;T&gt; operator*(Vector&lt;T&gt; const&amp; a, Matrix&lt;T&gt; const&amp; b);
</code></pre></li>
</ul>

<p>You might not want or need all of them, and it's generally best to follow the YAGNI principle (don't implement it if You Aren't Gonna Need It), but the operators should at least be symmetrical with things like matrix * scalar multiplication, and implement corresponding <code>+=</code>, <code>-=</code> operators for <code>+</code>, <code>-</code>, etc.</p></li>
</ul>

<hr>

<p><strong>Questions:</strong></p>

<ul>
<li>I wouldn't worry about restricting types. The good thing about template code is that it will compile if a type supports the relevant interface, and not if it doesn't. However, if you really wanted to it could be done with <a href="https://en.cppreference.com/w/cpp/types/enable_if" rel="noreferrer">std::enable_if</a> and the various type traits, such as <a href="https://en.cppreference.com/w/cpp/types/is_arithmetic" rel="noreferrer">std::is_arithmetic</a>.</li>
<li>For run-time errors, you can either <code>#include &lt;cassert&gt;</code> and use <code>assert(condition);</code>, or throw an exception. I would suggest using exceptions, since it's easier to test the code that throws them, and they are consistent between debug and release builds.</li>
</ul>
    </div>