<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Optimizations/improvements:</h3>

<p><em>Namings</em></p>

<ul>
<li><code>write</code> is too generic name for specific function. The one of better names is <strong><code>write_points</code></strong></li>
<li><code>_2d</code>. Even if a variable is marked as "protected" <code>_...</code>, starting its name with a digit is a bad naming pattern. As it's a <em>boolean</em> flag a meaningful name would be <strong><code>is_2dim</code></strong> (<em>is 2-dimensional space</em>)</li>
</ul>

<p>Since <code>mesh</code> argument is only used to access its inner property <code>points</code> it's better to pass the target <em>points</em> data structure directly (It's called <em>Replace Query with Parameter</em> technique)</p>

<p>In current approach, when reaching the condition <code>if not _2d:</code> the expression <code>np.unique(points[:, 2]).size</code> will be calculated repeatedly, instead: <br>
since <code>points</code> array is expected to be <em>2d</em> array with either 2 or 3 columns we can collect <em>unique counts</em> across all columns at once (instead of declaring <code>imax</code>, <code>jmax</code>):</p>

<pre><code>col_counts = [np.unique(row).size for row in points.T]
</code></pre>

<p><br>
The whole conditional:</p>

<pre><code>_2d = False
if points.shape[1] == 2:
    _2d = True
elif np.unique(points[:, 2]).size == 1:
    _2d = True
</code></pre>

<p>is now replaced with a single statement:</p>

<pre><code>is_2dim = points.shape[1] == 2 or col_counts[2] == 1
</code></pre>

<p><br>
Calling <code>print</code> function at each iteration to write the data into file:</p>

<pre><code>for value in points.flatten(order="F"):
    print(value, file=p3dfile)
</code></pre>

<p>is definitely <strong>less</strong> efficient and performant than calling <a href="https://docs.python.org/3/library/io.html#io.IOBase.writelines" rel="nofollow noreferrer"><strong><code>writelines()</code></strong></a> on <em>generator</em> expression at once.</p>

<hr>

<p>The final optimized function:</p>

<pre><code>def write_points(filename, points):
    """
    Write the mesh points to filename in PLOT3D format.
    filename: is the name of the output file.
    mesh: is a numpy array of size (N,2) or (N, 3) where N is the number of points. mesh[i] is a numpy array coordinates of the i'th point.

    """
    col_counts = [np.unique(row).size for row in points.T]
    is_2dim = points.shape[1] == 2 or col_counts[2] == 1

    with open(filename, "w") as p3dfile:
        pd3file.write(' '.join(map(str, col_counts)))
        pd3file.writelines(f'{num}\n' for num in points.flatten(order="F"))
</code></pre>
    </div>