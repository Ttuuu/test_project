<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your second method is better than the first, solely due to the fact that it has one less bug than the first one:</p>

<pre><code>In [5]: match_with_gaps("a p e _ p", "apple")
Out[5]: True

In [6]: match_with_gaps2("a p e _ p", "apple")
Out[6]: False
</code></pre>

<p>However, both fail if a character is masked that appears more than once:</p>

<pre><code>In [7]: match_with_gaps("a p _ l e", "apple")
Out[7]: False

In [8]: match_with_gaps2("a p _ l e", "apple")
Out[8]: False
</code></pre>

<p>While you do check that the count of each character is the same, this does not mean that the words are the same. And the counts may differ because some character are masked.</p>

<p>The second approach is also slightly better because it checks the length first, there's no need for a complicated algorithm if that is not the case.</p>

<p>In your second function I would use a few tricks to reduce the amount of indentation you have to deal with. You also should not check the count of the characters, since you are going to go through all characters anyway and it actually introduces the second bug:</p>

<pre><code>def match_with_gaps(my_word, other_word):
    '''
    my_word: string with _ characters, current guess of secret word
    other_word: string, regular English word
    returns: boolean, True if all the actual letters of my_word match the 
        corresponding letters of other_word, or the letter is the special symbol
        _ , and my_word and other_word are of the same length;
        False otherwise: 
    '''
    my_word = my_word.replace(' ', '')
    if len(my_word) != len(other_word):
        return False
    for c1, c2 in zip(my_word, other_word):
        if c1 == '_':
            continue
        if c1 != c2:
            return False
    return True
</code></pre>

<p>You could make this more compact using <code>all</code>:</p>

<pre><code>def match_with_gaps(my_word, other_word):
    '''
    my_word: string with _ characters, current guess of secret word
    other_word: string, regular English word
    returns: boolean, True if all the actual letters of my_word match the 
        corresponding letters of other_word, or the letter is the special symbol
        _ , and my_word and other_word are of the same length;
        False otherwise: 
    '''
    my_word = my_word.replace(' ', '')
    if len(my_word) != len(other_word):
        return False
    return all(c1 in ('_', c2) for c1, c2 in zip(my_word, other_word))
</code></pre>

<p>If you <em>do</em> want to compare counts of characters, you should use <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter</code></a>, instead of <code>list.count</code>. The former goes through the whole iterable once and sum up the occurrences of each unique element, whereas you need to call <code>list.count</code> for each unique element and each call traverses the whole iterable.</p>
    </div>