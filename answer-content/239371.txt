<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The code is mostly easy to read- indentation seems consistent, though the CSS rules are not separated by new lines - a common convention among many style guides. There are a few comments and many functions/methods are self-documenting but it would be good to comment each function/method to be thorough, especially if you intend to have others utilize the code. </p>

<p>It looks like some <a href="/questions/tagged/ecmascript-6" class="post-tag" title="show questions tagged 'ecmascript-6'" rel="tag">ecmascript-6</a> features are used - e.g. Classes, but more could be used- e.g. <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax" rel="nofollow noreferrer">the spread syntax</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters" rel="nofollow noreferrer">default parameters</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment" rel="nofollow noreferrer">destructuring assignment</a> and perhaps <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions" rel="nofollow noreferrer">arrow functions</a>, etc. </p>

<p>Some variables are actually declared as global - e.g. <code>game1</code>, <code>import_string</code>, etc. - since they are not contained inside a function. That is likely not an issue for a small application like this but in a larger application it would be wise to limit the scopes (e.g. inside an IIFE, DOM-loaded callback, etc. to avoid namespace collisions.</p>

<hr>

<p>The biggest thing I notice that is sub-optimal is this block:</p>

<blockquote>
<pre><code> for ( let row = 0; row &lt;= 8; row++ ) {
   for ( let col = 0; col &lt;= 8; col++ ) {
        sudoku_squares[row][col] =  document.getElementsByClassName('sudoku')[0].getElementsByTagName('tbody')[0].getElementsByTagName('tr')[row].getElementsByTagName('td')[col].getElementsByTagName('input')[0];
    }
}
</code></pre>
</blockquote>

<p>Not only is that line inside the nested loop excessively long, but it means there are 81 DOM lookups just for the first element with class <em>sudoku</em>, plus DOM lookups for each of the child elements. </p>

<p><a href="https://i.stack.imgur.com/ybMID.jpg" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/ybMID.jpg" alt="bridge toll"></a></p>

<blockquote>
  <p><em>”...DOM access is actually pretty costly - I think of it like if I have a bridge - like two pieces of land with a toll bridge,  and the JavaScript engine is on one side, and the DOM is on the other, and every time I want to access the DOM from the JavaScript engine, I have to pay that toll”</em><br>
      - John Hrvatin, Microsoft, MIX09, in <a href="https://channel9.msdn.com/Events/MIX/MIX09/T53F" rel="nofollow noreferrer">this talk <em>Building High Performance Web Applications and Sites</em></a> at 29:38, also cited in the <a href="https://books.google.com/books?id=ED6ph4WEIoQC&amp;pg=PA36&amp;lpg=PA36&amp;dq=John+Hrvatin+%22DOM%22&amp;source=bl&amp;ots=2Wrd5G2ceJ&amp;sig=pjK9cf9LGjlqw1Z6Hm6w8YrWOio&amp;hl=en&amp;sa=X&amp;ved=2ahUKEwjcmZ7U_eDeAhVMGDQIHSfUAdoQ6AEwAnoECAgQAQ#v=onepage&amp;q=John%20Hrvatin%20%22DOM%22&amp;f=false" rel="nofollow noreferrer">O'Reilly <em>Javascript</em> book by Nicholas C Zakas Pg 36</a>, as well as mentioned in <a href="https://www.learnsteps.com/javascript-increase-performance-by-handling-dom-with-care/" rel="nofollow noreferrer">this post</a></p>
</blockquote>

<p>One could simply add an <em>id</em> attribute to the table element and then access the <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/rows" rel="nofollow noreferrer"><code>rows</code></a> property instead of querying for the rows, and access the <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableRowElement#Properties" rel="nofollow noreferrer"><code>cells</code></a> property of each row instead of querying for them. Another simplification would be to use <code>document.querySelectorAll()</code> with a selector like <code>.sudoku input</code> to get a collection of the inputs. </p>

<hr>

<p>Similar to PHP’s <code>foreach</code> loops, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of" rel="nofollow noreferrer"><code>for..of</code> loops</a> could be used instead of the <code>for</code> loops to avoid having to manually increment the counter variables. </p>

<p>Instead of blocks like this:</p>

<pre><code>for ( let i = 0; i &lt;= 8; i++ ) {
    if ( value == this.board[row][i] ) {
        return false;
    }
}
</code></pre>

<p>simplify it like this:</p>

<pre><code>for ( const cell of this.board[row]) {
    if ( value == cell ) {
        return false;
        }
    }
</code></pre>

<hr>

<p>The method <code>blank_board_array</code> could be a static method since it doesn’t need to reference any state of the instance. The same could apply to some of the other helper functions. Additionally, <code>createArray()</code> could be used instead of <code>blank_board_array()</code>. And that could perhaps be simplified by utilizing <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill" rel="nofollow noreferrer"><code>Array.fill()</code></a>.</p>

<hr>

<p>Instead of using <code>let</code> for all block-scope variables, it is wise to default to using <code>const</code> to avoid accidental re-assignment. Then when you determine re-assignment is necessary use <code>let</code> (e.g. for counters, etc.).</p>

<hr>

<p>The mouse up event handler for the import button starts with this line:</p>

<blockquote>
<pre><code>  import_string = document.getElementsByName("import_string")[0].value
</code></pre>
</blockquote>

<p>It would be simpler to add an <em>id</em> attribute to that element and then use <code>document.getElementById()</code> to reference it- that way there is no need to fetch a collection of elements just to get the first one.</p>

<p>If all elements were wrapped in a <code>&lt;form&gt;</code> tag then that element could be referenced by <code>document.forms[0].import_string</code> but then you would have to ensure the form didn’t get submitted.</p>

<p>Also it would likely be wise to use the <code>click</code> event instead of <code>mouseup</code> - that way if the user preferred using the keyboard to tab through elements it would allow pressing the <kbd>Enter</kbd> key to also trigger the event handler.</p>

<hr>

<p>The e.g. <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax" rel="nofollow noreferrer">the spread syntax</a> could be used to transform this:</p>

<blockquote>
<pre><code>var args = Array.prototype.slice.call(arguments, 1);
</code></pre>
</blockquote>

<p>To this:</p>

<pre><code>const args = [...arguments].slice(1);
</code></pre>

<p>Or <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/shift" rel="nofollow noreferrer"><code>Array.shift()</code></a> could be used to take the first argument off the array, eliminating the need to call <code>slice()</code>.</p>

<p>Or use destructuring assignment to assign those variables.</p>

<pre><code>function createArray() {
    const [length = 0, ...remainingArgs] = arguments;
    var arr = new Array(length),
    i = length;
    if (remainingArgs.length) {
        while(i--) arr[length-1 - i] = createArray(...remainingArgs);
    }
</code></pre>

<hr>

<p>There is one CSS rule containing <code>!important</code>:</p>

<blockquote>
<pre><code>.sudoku .thick_right {border-right:4px solid black !important;}
</code></pre>
</blockquote>

<p>It is best to create a rule that is more specific than any others instead of using <code>!important</code>. </p>

<blockquote>
  <p>When an important rule is used on a style declaration, this declaration overrides any other declarations. Although technically <code>!important</code> has nothing to do with specificity, it interacts directly with it. Using !important, however, is <strong>bad practice</strong> and should be avoided because it makes debugging more difficult by breaking the natural <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Cascade" rel="nofollow noreferrer">cascading</a> in your stylesheets. When two conflicting declarations with the <code>!important</code> rule are applied to the same element, the declaration with a greater specificity will be applied.<sup><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity#The_!important_exception" rel="nofollow noreferrer">1</a></sup></p>
</blockquote>

<p>There happen to be no other <code>border-right</code> rules that need to be overridden so that keyword can be removed here.</p>

<hr>

<p>The table rows and cells have class names like “1”, “2”. I don't see any CSS or JavaScript that utilizes those class names. While "CSS2.1 it is a recommendation, even in CSS3"<sup><a href="https://developer.mozilla.org/en-US/docs/Web/CSS" rel="nofollow noreferrer">2</a></sup> class names should not start with a number:</p>

<blockquote>
  <p>Property names and <a href="https://www.w3.org/TR/css-syntax-3/#at-rule" rel="nofollow noreferrer">at-rule</a> names are always <a href="https://www.w3.org/TR/css-syntax-3/#identifier" rel="nofollow noreferrer">identifiers</a>, which have to start with a letter or a hyphen followed by a letter, and then can contain letters, numbers, hyphens, or underscores. You can include any <a href="https://www.w3.org/TR/css-syntax-3/#code-point" rel="nofollow noreferrer">code point</a> at all, even ones that CSS uses in its syntax, by <a href="https://www.w3.org/TR/css-syntax-3/#escape-codepoint" rel="nofollow noreferrer">escaping</a> it.<sup><a href="https://www.w3.org/TR/css-syntax-3/#syntax-description" rel="nofollow noreferrer">3</a></sup></p>
</blockquote>
    </div>