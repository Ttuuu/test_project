<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Use <code>java.util.Deque</code></h3>

<p>Instead of implementing your own stack,
it's better and easier to use the <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Deque.html" rel="nofollow noreferrer"><code>Deque</code></a> in the JDK.
(Not <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Stack.html" rel="nofollow noreferrer"><code>Stack</code></a>, as the JavaDoc explains, <code>Deque</code> is recommended.
Thanks <a href="https://codereview.stackexchange.com/users/93149/greybeard">@greybeard</a> for the tip!)</p>

<h3>Naming</h3>

<p>In this game there are discs and towers (or sticks, rods, pegs).
It would be better to call them that way instead of <code>Node</code> and <code>Stack</code>.</p>

<p><code>tower</code> is a poor name for moving discs.
In general, verbs are best for method names.
In this example <code>move</code> would be natural.</p>

<h3>Alternative implementation</h3>

<p>With the above suggestions applied,
the implementation becomes:</p>

<pre><code>import java.util.ArrayDeque;
import java.util.Deque;

public class Hanoi {

    private static class Tower {

        private final String name;
        private final Deque&lt;Integer&gt; stack;

        public Tower(String name) {
            this.name = name;
            this.stack = new ArrayDeque&lt;&gt;();
        }

        public void add(int... discs) {
            for (int disc : discs) {
                stack.push(disc);
            }
        }

        public int size() {
            return stack.size();
        }

        public void moveOneDisc(Tower to) {
            System.out.println("Pushed " + this.stack.peek() + " from " + this.name + " to " + to.name);
            to.stack.push(this.stack.pop());
        }

        private void moveDiscs(int count, Tower mid, Tower to) {
            if (count == 1) {
                moveOneDisc(to);
            } else {
                moveDiscs(count - 1, to, mid);
                moveOneDisc(to);
                mid.moveDiscs(count - 1, this, to);
            }
        }
    }

    public static void main(String[] args) {
        Tower from = new Tower("A");
        from.add(10, 15, 20, 25);
        Tower mid = new Tower("B");
        Tower to = new Tower("C");
        from.moveDiscs(from.size(), mid, to);
    }
}
</code></pre>

<p>Some other improvements:</p>

<ul>
<li>Moved the <code>tower</code> method inside the <code>Tower</code> class and renamed to <code>move</code></li>
<li><code>Tower.add</code> accepts varargs, for conveniently adding multiple discs</li>
<li><code>Tower.size</code> to know the number of discs on a tower</li>
<li>The method names of <code>Tower</code> are all in the language of the problem domain, not the implementation (implementation details are well hidden)</li>
</ul>
    </div>