<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Is inheritance really the answer?</strong></p>

<p>I think it's been covered that you <em>could</em> dynamically build your product instances, but it's not really clear to me why you'd need to.  The object model feels a bit wrong to me.  From what I can see you're reading all of the objects in, then storing them in an <code>ArrayList&lt;Product&gt;</code>.  There doesn't appear to be a lot of processing (although that could be in the code you've not shared), so I can't help but wonder if you're really getting much more from having these classes than you would get with a simple map of field types to values.  So, you'd have a <code>ProductDefinition</code> something like:</p>

<pre><code>ProductDefinition
    ProductType  productType
    OrderedList&lt;Field&gt; fields

FieldDefinition
    String fieldName       // Name used to retrieve field
    FieldType fieldType    // String/Boolean/Integer etc
</code></pre>

<p>You could then simply maintain a <code>Map</code> of <code>ProductIdentificationStrings</code>, so given a "Kitchen" product identifier, the Matching product definition is used to determine which fields to read... these would then be stored in a Product which has it's own map of field/values...  This lends itself quite readily to a table driven approach whereby adding support for a new type of product is really just about creating the new product definition entries...</p>

<p><strong>Other Stuff</strong></p>

<ul>
<li>Seperation of concerns seems a bit skewed.  Your <code>ProductList</code> knows about swing and also about reading/writing products out to files.  This seems like too much responsibility.  You really want to try to separate the front end from the back a bit more.</li>
<li><p>Quite a lot of your functions define variables that really aren't needed.  They don't add extra clarity.  If a function can be one line, simply make it one line...  Instead of </p>

<blockquote>
<pre><code>public double calculateOrderCost(Product chosenProduct, int orderQuantity){
    Double orderCost = 0.0;
    orderCost= orderQuantity * chosenProduct.getUnitCost();
    return orderCost;
}
</code></pre>
</blockquote>

<p>Just do:</p>

<pre><code>public double calculateOrderCost(Product chosenProduct, int orderQuantity){
    return orderQuantity * chosenProduct.getUnitCost();
}
</code></pre>

<p>Similarly, consider simplifying your <code>if</code>s, rather than <code>if (x || y) return true;return false;</code> just do  <code>return x || y</code>.  The function name <em>should</em> indicate what the returned value represents.</p></li>
<li><p>Consider making your product file more self describing.  Files like this can be a pain.  If you're writing them out in text anyway, then using something like YAML can make it easier to understand the file if things go wrong and you need to fix it in a text editor.  In the example you've posted (which may have been redacted), it looks like the product type is actually the 2nd/3rd from last field depending on the product type... making it the first line would seem more natural.</p></li>
</ul>
    </div>