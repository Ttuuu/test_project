<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Should your object know if it is captured? Probably not. So we can factor out that responsibility.</p>

<p>Letâ€™s define:</p>

<pre><code>public abstract class Capture : IDisposable
{
    public static implicit operator bool(Capture capture) =&gt;
        capture.Active;

    protected abstract bool Active { get; }
    public abstract void Dispose();
}
</code></pre>

<p>And</p>

<pre><code>public class TargetCapture : Capture
{
    public TargetCapture(object target)
    {
        if (Monitor.TryEnter(target))
            Target = target;
    }

    protected override bool Active =&gt; Target != null;

    public override void Dispose()
    {
        if (!Active)
            return;

        Monitor.Exit(Target);
        Target = null;
    }

    object Target { get; set; }
}
</code></pre>

<p>And</p>

<pre><code>public class MultiCapture : Capture
{
    public MultiCapture(params object[] targets)
    {
        Captures = from target in targets
                   select new TargetCapture(target);

        if (!Active)
            Dispose();
    }

    protected override bool Active =&gt; 
        Captures.All(c =&gt; c);

    public override void Dispose()
    {
        foreach (var capture in Captures)
            capture.Dispose();
    }

    IEnumerable&lt;Capture&gt; Captures { get; }
}
</code></pre>

<p>Demo:</p>

<pre><code>    static void Main(string[] args)
    {
        var x = ...
        using (var capture = new TargetCapture(x))
            if (capture)
            {
                // ...
            }

        var y = ...
        var z = ...
        using (var capture = new MultiCapture(x, y, z))
            if(capture)
            {
                // ...
            }
    }
</code></pre>

<p><strong>UPDATE</strong></p>

<p>I would also define this:</p>

<pre><code>public class RequiredCapture : MultiCapture
{
    public RequiredCapture(params object[] targets)
        : base(targets)
    {
        if (!Active)
            throw new InvalidOperationException();
    }
}
</code></pre>

<p>So it would be very easy to use:</p>

<pre><code>        var r = ...
        using (new RequiredCapture(r))
        {

        }
</code></pre>

<p><strong>The demo</strong> you requested:</p>

<pre><code>class ProtectedSystem
{
    public int AccessCount { get; private set; }

    // throws if access is blocked
    public void IncrementAccess()
    {
        using (new RequiredCapture(this))
            AccessCount = AccessCount + 1;
    }

    // allowed to skip operation
    public bool TryIncrementAccess()
    {
        using (var capture = new MultiCapture(this))
        {
            if (capture)
                AccessCount = AccessCount + 1;

            return capture;
        }
    }

    // test method, please note consuming looks like 
    // an obvious defect in the design, as it opend 
    // to racing conditions
    public bool IsFreeAtTheMoment()
    {
        using (var capture = new MultiCapture(this))
            return capture;
    }
}
</code></pre>
    </div>