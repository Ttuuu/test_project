<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>That's a good start but the structure is overall inefficient, that leads to code duplication.</p>

<p>the main problem is the violation of the Single responsibility principle. The ShowABlogPost does four things at a time:</p>

<ul>
<li>connects to the database</li>
<li>checks the HTTP data</li>
<li>fetches a certain record from the database</li>
<li>displays some error</li>
</ul>

<p>it should be doing only one thing, what it's intended for - fetching a record from a database. </p>

<p>Another issue is multiple calls to ShowABlogPost(). It would be, like, if you have to pay a cab driver 44.50 and you got this exact amount in your pocket, but would fetch the notes and coins one by one instead of taking them all at once.</p>

<p>You already have an array that contains all the data from the first call. So just use this array.</p>

<p>Other issues are:</p>

<ul>
<li><code>$DB = DatabaseFactory::getFactory()-&gt;Connect();</code> is duplicated in every method. Why not to make a database connection a class variable? So it will be available in all class methods by default.</li>
<li><code>PDO::FETCH_ASSOC</code> could be made the default fetch option so you won't have to call it every time explicitly</li>
<li>when no variables are going to be used in the query, there is no use for the prepared statements. </li>
<li>when you need to fetch only one row, then you have to use fetch() method, not fetchAll()</li>
</ul>

<p>So let's rewrite your class</p>

<pre><code>&lt;?php
class BlogPosts {

    protected $db;

    function __construct($db) {
        $this-&gt;db = $db;
    }

    public function ListAllBlogPosts() {
        $sql = "SELECT * FROM posts ORDER BY date DESC";
        $return $this-&gt;db-&gt;query($sql)-&gt;fetchAll();
    }

    public function ShowABlogPost($post_id) {
        $query = $this-&gt;db-&gt;prepare("SELECT * FROM posts WHERE id = :post_id");
        $query-&gt;bindParam(':post_id', $post_id, PDO::PARAM_INT);
        $query-&gt;execute();
        return $query-&gt;fetch();
    }
}
</code></pre>

<p>And now we can rewrite post.php</p>

<pre><code>&lt;?php
include_once 'connect.php';
include_once 'class_blogpost.php';

$db = DatabaseFactory::getFactory()-&gt;Connect();
$blogposts = new BlogPosts($db);

if (!isset($_GET["id"]) {
    die( "Empty request");
} else {
    $post = $blogposts-&gt;ShowABlogPost($_GET["id"]);
}
?&gt;

&lt;?php if ($post) : ?&gt;
      &lt;div&gt;
        &lt;h1&gt;&lt;?= $post['title']; ?&gt;&lt;/h1&gt;
        &lt;p&gt;&lt;?= $post['post']; ?&gt;&lt;/p&gt;
      &lt;/div&gt;
&lt;?php else : ?&gt;
    Post not found.
&lt;?php endif ?&gt;
</code></pre>
    </div>