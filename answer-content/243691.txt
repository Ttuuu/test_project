<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>What you have isn't bad, but I feel like you're creating too many variables. For example, in <code>getAuditID</code> and other methods, you assign an object to a variable and immediately return it. You also have some unnecessary type annotations.</p>
<pre><code>def getAuditID: String = {
    val instant: Instant = Instant.now
    val zoneId: ZoneId = ZoneId.of("Canada/Eastern")
    val auditIdFormatter: DateTimeFormatter = DateTimeFormatter.ofPattern("yyyyMMddHHmmssSSS")
    val auditId = ZonedDateTime.ofInstant(instant, zoneId).format(auditIdFormatter)
    auditId
}
</code></pre>
<p>After eliminating that, I got this:</p>
<pre><code>abstract class FileSystem(flagFileURI: String) {

  def getRecordCount(properties: Properties): String =
    properties.getProperty("recordCount")

  def getAuditID: String =
    ZonedDateTime
      .ofInstant(Instant.now, ZoneId.of("Canada/Eastern"))
      .format(DateTimeFormatter.ofPattern("yyyyMMddHHmmssSSS"))

  def getSourcePath(properties: Properties): Path =
    new Path(properties.getProperty("dataFileURI"))

  def getMetaDataFileURI(properties: Properties): String =
    properties.getProperty("metadataFileURI")

  def getIDPDataDate(properties: Properties): String =
    properties.getProperty("idpDataDate")

  def getDataFileName(srcPath: Path, auditID: String): String =
    srcPath.getName + "_" + getAuditID

  def getDestinationPath(
      properties: Properties,
      metaDataFileURI: String,
      IDPDataDate: String,
      dataFileName: String
  ): Path = {
    val l0DirLocation =
      ConfigFactory.load().getString("sparkFramework.hdfs.l0dirlocation")
    val frameWorkUtils = new FrameworkUtils()
    val sourceSystem =
      frameWorkUtils.getSourceSystem(metaDataFileURI)
    val schemaName = frameWorkUtils.getSchemaName(sourceSystem)
    val tableName = frameWorkUtils.getTableName(sourceSystem)

    new Path(
      l0DirLocation + schemaName + "/" + tableName + "/idp_data_date=" + IDPDataDate + "/" + dataFileName
    )
  }
}
</code></pre>
<p>However, your other method, <code>copyFromLocalFile</code>, could also be improved. The return type is a tuple of 5 strings, which to me seems much too complex. Instead of that, I'd suggest making a case class that makes it obvious what each of those strings mean.</p>
<pre><code>case class FileInfo(
    IDPDataDate: String,
    recordCount: String,
    auditId: String,
    metaDataFileURI: String,
    dataFileName: String
)
</code></pre>
<p>Then you can define this method in <code>FileSystem</code> to get all the information at once</p>
<pre><code>def getFileInfo(properties: Properties): FileInfo = {
    val auditId = getAuditID
    FileInfo(
      getIPDDataDate(properties),
      getRecordCount(properties),
      auditId,
      getMetaDataFileURI(properties),
      getDataFileName(getSourcePath(properties), auditID)
    )
}
</code></pre>
<p>After that, you can turn your method into something like this:</p>
<pre><code>def copyFromLocalFile: FileInfo = {

    val properties: Properties = new Properties()

    properties.load(Source.fromFile(flagFileURI).reader)

    val fileInfo = getFileInfo(properties)

    FileSystem
      .get(new Configuration())
      .copyFromLocalFile(
        true,
        false,
        fileInfo.srcPath,
        getDestinationPath(
          properties,
          fileInfo.metaDataFileURI,
          fileInfo.IDPDataDate,
          fileInfo.dataFileName
        )
      )

    fileInfo
}
</code></pre>
<p>You can still destructure the result:</p>
<pre><code>val FileInfo(idpDataDate, count, auditId, metadataFileURI, fileName) =
  hdFileSystem.copyFromLocalFile
</code></pre>
<p>Of course, I don't know about the whole structure of your program, so this might not work for you.</p>
<p><a href="https://scastie.scala-lang.org/kTAbohaJQ6y7GtUO2vECfA" rel="nofollow noreferrer">Link to Scastie</a></p>
    </div>