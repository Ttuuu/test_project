<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>All the main code comments you've had so far are solid.</p>
<p>I thought I would address your approach to testing.</p>
<p>If you write your code as a module that can be loaded with "use" it's very easy to use Perl's extensive testing toolset.</p>
<p>You can use the classical Test::Simple and Test::More modules that are built in with many versions of Perl.  But if you are comfortable with CPAN module installation (it's worth learning, if you aren't) you can install the newer Test2 suite which makes writing tests even easier.</p>
<p>Check out <a href="https://metacpan.org/pod/Test2::V0" rel="nofollow noreferrer">Test2::V0</a> which is a nice big bundle of testing functions.</p>
<p>Also see <a href="https://metacpan.org/pod/Test2::Manual::Testing::Introduction" rel="nofollow noreferrer">the introduction</a> to the tools.</p>
<p>In short write your code like:</p>
<pre><code>package MySplit;

use Exporter qw&lt;import&gt;;
our @EXPORT_OK = qw( split_string );

sub split_string {
    # do stuff
}

1;
</code></pre>
<p>Then write tests like:</p>
<pre><code>#!/bin/env perl
use strict;
use warnings;
use Test::V0;

use MySplit qw&lt; split_string &gt;;

is  split_string('1,2,4'),
    array {
        item 1;
        item 2;
        item 4;
        end();
    }, 
    "Basic split works";

done_testing();
</code></pre>
<p>The above sample doesn't really dig into the expressiveness and power of the comparator constructors.  You can see more <a href="https://metacpan.org/pod/Test2::Tools::Compare#ARRAY-BUILDER" rel="nofollow noreferrer">in the docs</a>.</p>
    </div>