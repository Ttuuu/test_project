<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I see some discrepancies:</p>

<ul>
<li>you say the payload is an array of bytes, yet the sample payload is a string;</li>
<li>you say the payload is in hexadecimal format, yet the tests in code suggest otherwise.</li>
</ul>

<p>But I take it the crux of the matter is doing the same thing manually over and over again.</p>

<p>Let's say the payload is indeed an array of hex values and you want to work with numbers, then you could use your <code>parseInt</code> function for the whole shebang (assuming ES2015 availability):</p>

<pre><code>const hex2Int = hex =&gt; parseInt(hex, 16)
</code></pre>

<p>and for clarity's sake it's nice to give names to things instead of referring to them by their position:</p>

<pre><code>const [type, device, alarm, , ...measurements] = payload.map(hex2Int)
</code></pre>

<p>Now the <code>measurements</code> is an array containing all of the measurements (using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters" rel="nofollow noreferrer">rest parameter syntax</a>), but it would be nicer to work with them individually. One could perhaps <a href="https://stackoverflow.com/questions/8495687/split-array-into-chunks">device a function which would chunk them up</a>, but assuming we already know the length and amount of them, we could just hard-code them:</p>

<pre><code>const chunked = [ measurements.slice(0, 4), measurements.slice(4, 8) /* etc. */ ]
</code></pre>

<p>So now one would need to decode one individual chunk.
If the return value can be different from the original post, it would be nice if the <code>result</code> was an array of objects.</p>

<pre><code>const decodeMeasurement = (acc, [ullage1, ullage2, temp, src]) =&gt;
  acc.concat({
    level: ullage2 + ullage1 * 256
    , temperature: temp &lt; 32 ? temp : temp - 256
    , SRCSRSSI: src | src
  })
</code></pre>

<p>so that one can <code>chunked.reduce(decodeMeasurement, [])</code> into an array.</p>

<p>But back to reviewing. If you don't care about non-measurement payloads, or non-target-device payloads, you should just <code>return</code> early.</p>

<p>For performance, you could consider using typed arrays.</p>
    </div>