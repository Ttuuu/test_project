<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First, I would be concerned about the performance of your three consecutive map operations followed by reduce, particularly as the size of <code>data</code> grows in terms of number of items in array.</p>

<p>Right now, you have to iterate <code>data</code> 4 times to complete all those operations.  While the 3x mapping operation probably does provide some clarity to the operations by breaking them down to simple transformation steps, I would consider creating a single <code>map</code> callback that could complete all steps of transformation on an item in one pass, minimizing repetitive iteration of the array.  Of course you would probably want to run some performance tests for your expected use cases to understand the performance trade-offs here.  It might be that a usage pattern like the following makes sense:</p>

<pre><code>data.map( record =&gt; {
    // mapping step 1
    // mapping step 2
    // mapping step 3
    return mappedRecord;
}
</code></pre>

<hr>

<p>Maybe the usage example you show is not very meaningful, but I am having a hard time understanding function signature for <code>gather()</code>.</p>

<ul>
<li>What is the difference between the two key and value labels parameters and the columns specified passed from <code>columns</code> array parameter?</li>
<li>The signature does not make it clear to me as to which fields in the input data are to be assigned to the <code>Letter</code> and <code>Value</code> properties (for this example) in the output array.</li>
<li>The parameter naming doesn't seem to make sense.  Why is one called <code>key_label</code> and one called <code>value_label</code> when both are used as keys in the output structure?</li>
<li>From looking at this signature, how is one to determine what the logic is that is to be applied in "splitting" apart the input records?</li>
</ul>

<hr>

<p>Do the <code>with_fields()</code> and <code>split_record()</code> methods have any value outside the context of the <code>gather()</code> function?  If not, consider nesting them inside gather as "private" functions only in context of <code>gather()</code>;</p>

<hr>

<p>Stylistically:</p>

<ul>
<li>I don't like your use of snake_case in javascript, as it is common practice in JS world to use camelCase.</li>
<li>Consider sticking to comments before lines of code to they apply, rather than using commments at the end of the line (which I generally avoid, as I feel they make code harder to read).</li>
<li>There are a few cases where variable naming is not that meaningful - <code>without_f</code>, <code>with_f</code>.  Dropping a few characters from a variable is oftentimes not worth the value you get from having clearly understandable variable names.</li>
<li>When you get a more complex or longer return operation on an arrow function, you might consider using bracket syntax and/or line breaks to make the code easier to read.</li>
</ul>

<p>For example:</p>

<blockquote>
<pre><code>.map(([left, right]) =&gt; right
  .map(long_pair =&gt; Object.assign({}, long_pair, left)))
</code></pre>
</blockquote>

<p>Could become:</p>

<pre><code>.map(([left, right]) =&gt; {
    return right.map(
        long_pair =&gt; Object.assign({}, long_pair, left)
    );
});

// or
.map(
    ([left, right]) =&gt; right.map(
        long_pair =&gt; Object.assign({}, long_pair, left)
    )
 );
</code></pre>

<p>To me, this makes it much clearer that there is a nested mapping operation happening here. This is much easier than trying to count/balance opening closing parenthesis in your head as one might have to do when looking at original code that ends with three closing parenthesis in a row.</p>
    </div>