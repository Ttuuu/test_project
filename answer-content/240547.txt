<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It does. You directly assign <code>list-&gt;elements</code> to the result of <code>realloc</code> which can return <code>NULL</code>, in which case your original array is leaked (but it's okay since you immediately assign a value to a <code>NULL</code>-based array after that, which is UB).</p>

<p>Few more observations.</p>

<ol>
<li><p>The list itself can only be operated via its public interface that consists of methods that accept list object by pointer. Perhaps it makes sense to return by pointer from constructor, too; then you can make <code>list</code>'s implementation an opaque struct, all its fields will be private.</p></li>
<li><p>You should define a destructor to release the array, that otherwise (currently) leaks.</p></li>
<li><p>Your current allocation strategy is inefficient. Reallocating the whole array per each new element raises <code>push</code>'s complexity to O(N), so creating an array of N elements takes O(NÂ²) time. A traditional approach to deal with it is adding <code>capacity</code> to the list object; <code>capacity</code> equals to the size of allocated space and grows exponentially: when list's size reaches capacity, on next element push capacity doubles, thus reducing push complexity to ammortized O(1).</p></li>
<li><p>Elements are stored in a contiguous array, perhaps a better descriptive name? Traditionally, <code>list</code> is associated with linked lists in C family.</p></li>
</ol>
    </div>