<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You define images as <code>std::vector&lt; std::vector&lt;Pixel&gt; &gt;</code>. I strongly recommend against this: this is an inefficient storage for a rectangular array of data, with several downsides and no upsides. The biggest issue with a vector of vectors is that each line of the image is stored in a separate memory block on the heap, meaning that a memory block is allocated <code>height+1</code> times, instead of only once. Accessing a pixel requires two indexing operations instead of one, and two fetches from different locations in memory, instead of one. Using a simple <code>std::vector&lt;Pixel&gt;</code>, with an associated <code>width</code> value, is the recommended way of storing pixels (all well-known image manipulation libraries do it this way). Indexing, instead of <code>image[y][x]</code> becomes <code>image[x + y*width]</code>. Encapsulate this in a class and you're all set:</p>
<pre class="lang-cpp prettyprint-override"><code>class Image {
   std::vector&lt;Pixel&gt; data;
   int width;
   int height;
public:
   Image(int width, int height) {
      data.resize(width * height);
   }
   Pixel&amp; at(int x, int y) {
      // we could add an assert here to ensure x and y are inside the image
      return data[x + width * y];
   }
}
</code></pre>
<p>Note that, since C++11, it is possible to write <code>std::vector&lt;std::vector&lt;Pixel&gt;&gt;</code>, the space between the two closing <code>&gt;</code> is no longer needed. You're not stating which version of the standard you are using. I highly recommend that, since you're starting a new project, you pick the latest iteration of the standard (currently C++17), if your compiler supports it. Add an appropriate compiler flag for that.</p>
<hr>
<p>The functions <code>pushPixels</code> and <code>pushData</code> push into the vector. It would be beneficial, since we know how many elements will be pushed, to <code>reserve</code> the space first. Even cleaner, in my opinion, is to resize the vector and then use indexing to assign values into it.</p>
<p>The function <code>pushPixels</code> indexes into <code>data</code> with the expression <code>h * width * 3 + w * 3 + 0</code>. Besides being repeated three times with a different offset (it would look simpler to compute this index once and increment it), to me this function screams for an iterator. You explicitly loop over the indices into <code>buffer</code> in the order in which values are stored in <code>data</code>. So create an iterator into data and increment it:</p>
<pre class="lang-cpp prettyprint-override"><code>void pushPixels(std::vector&lt;std::vector&lt;Pixel&gt;&gt;&amp; buffer, const std::vector&lt;unsigned char&gt;&amp; data, int width, int height) {
    assert(data.size() == width * height * 3); // it's always good to add assertions for your assumptions
    auto it = data.begin();
    buffer.reserve(buffer.size() + height); // enlarge buffer
    for (int h = 0; h &lt; height; ++h) {
        std::vector&lt;Pixel&gt; line(width);
        for (int w = 0; w &lt; width; ++w) {
            line[w] = Pixel{ it++, it++, it++ };
        }
        buffer.push_back(std::move(line)); // avoid additional copy using std::move()
    }
}
</code></pre>
<p>Finally, in regards to these two functions, their naming: it is not clear that the first copies data from the second to the first argument, and the other copies data from the first to the second argument. I recommend that you always define function arguments in the same order, for example <code>(input, output)</code>. This will reduce the surprise when reading the code. In <code>main</code>, you define your <code>Pixel</code> vector-of-vectors as <code>data</code>, then call <code>pushPixels(data, inBuf, ...)</code>. This actually copies values from <code>inBuf</code> to <code>data</code>, but you need to read the function's code to know. Later you call <code>pushData(data, outBuf, ...)</code>, which copies values from <code>data</code>, not to <code>data</code> (it's confusing because the function declaration calls its second argument "<code>data</code>").</p>
<p>But, if you store your image data as I recommend above, these two functions will not be necessary at all. The I/O library you use writes the data into a buffer in the same order, so no copies are necessary.</p>
<hr>
<p>A possible problem in your program is that you define</p>
<pre class="lang-cpp prettyprint-override"><code>const int nchannels = inSpec.nchannels;
</code></pre>
<p>but then don't use it. You assume that your data buffer has 3 channels. The least you can do is verify that <code>nchannels==3</code>, and throw an exception if it's not. Some image files have 4 channels, in which case your output will be mangled. Some image files have 1 channel, in which case you will be reading out of bounds and possibly crash your program.</p>
<hr>
<p><code>std::endl</code> not only adds a newline to the stream, it also flushes it. So unless you need to explicitly flush your stream, don't use it. A simple <code>'\n'</code> is just as easy to write to the stream, and doesn't incur the overhead of unnecessarily flushing the stream.</p>
    </div>