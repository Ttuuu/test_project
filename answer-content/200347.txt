<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Stating the obvious: your handlers all have a common interface (basically the same as <code>Consumer&lt;Document&gt;</code>) and implement their respective business logic. Thus, create a common interface and implement the different handlers in their specific classes, e.g.</p>

<pre><code>public interface DocumentHandler {
    public void handle(Document doc);
}

public class FileHandler implements DocumentHandler {
    private FileSyncDAO fileSyncDao;

    public FileHandler() {
        this.fileSyncDao = new FileSyncDao();
        // or alternatively, pass this in via constructor to honor
        // tell-don't ask principle
    }

    public void handle(Document doc) {
        // code from your lambda
    }
}
</code></pre>

<p>Repeat for each handler, and init you map with</p>

<pre><code>handlers.put("file", new FileHandler());
...
</code></pre>

<p>From there, you might check extensions regarding metadata, e.g. adding a <code>String getHandledType()</code> method to the handler, so that you don't have to "know" the key from the outside.</p>

<p>If you are in for the real next step in programming paradigms, you might check the possibility to use some kind of auto-registration, e.g. by running it in a CDI container and using an <code>Instance&lt;DocumentHandler&gt;</code> to create the map. (If you go that path, prepare for some steep learning curves and big rewards at the end of the way ;-))</p>
    </div>