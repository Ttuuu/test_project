<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>One problem with <code>build-flist</code> is that it is a double loop. It iterates over the <code>lst</code> and for each element iterates over the result list (which has the same length minus duplicates). For each <code>lst</code> element, the result list gets copied by <code>mapcar</code>.</p>

<p>Also you iterate with recursion over the <code>lst</code>. The pattern to use here in <em>Functional Programming</em> would be a kind of <code>reduce</code>.</p>

<p><code>remove-dups</code> would be the primitive function remove duplicates.</p>

<p>In typical Lisp style one would destructively update the result list. Since it is an <em>assoc</em> list, one could look up the element with <code>assoc</code> and update it.</p>

<p><strong>first try with destructive updates</strong></p>

<p>so, if we try to create the result list first:</p>

<pre><code>(defun occurrences (list)
  (flet ((create-result-list (list)
           (mapcar (lambda (item)
                     (cons item 0))
                   (remove-duplicates list)))
         (count-occurrences (list result)
           (mapc (lambda (item)
                   (incf (cdr (assoc item result))))
                 list)
           result))
    (sort (count-occurrences list (create-result-list list))
          #'&gt;
          :key #'cdr)))
</code></pre>

<p><strong>second try with destructive updates</strong></p>

<p>we can also build the result list, while we move over the list</p>

<pre><code>(defun occurrences (list &amp;aux result)
  (mapc (lambda (item &amp;aux (pair (assoc item result)))
          (if pair
              (incf (cdr pair))
            (push (cons item 1) result)))
        list)
  (sort result #'&gt; :key #'cdr))
</code></pre>

<p>It will still be slow for larger lists, but for many applications it might be sufficient and we can also add arbitrary tests, which with a hash-table might be more difficult...</p>
    </div>