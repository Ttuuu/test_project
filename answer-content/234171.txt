<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Aliveness issue</h3>

<p>As it is, your code does not perform the task you expect it to, because the LoadBalancer never reinstates "dead" connection pools.
Notice that you only ever set <code>LoadBalancedString.IsDbAlive</code> to <code>true</code> in the constructor <em>or</em> if another connection is alive <strong>after</strong> the timeout expired.</p>

<p>If ever all the servers managed in the <code>DbLoadBalancer</code> are offline, the balancer never recovers.</p>

<p>This can be remediated by adjusting the lookup you perform.
Instead of using a while-loop that is never executed if all connections are dead, you may want to iterate over all connection strings regardless of their <code>IsDbAlive</code> status:</p>

<pre><code>public DbConnection GetConnection()
{
    foreach (var candidate in _loadBalancedConnectionStrings.OrderBy(c =&gt; c.LastTimeConnectionWasUsed))
    {
        if (!candidate.IsDbAlive &amp;&amp; DateTime.Compare(c.LastTimeConnectionWasUsed, DateTime.Now) &gt; 0) 
        {
        // connection is not alive, no retry yet -&gt; skip connection
            continue;
        }
        // try-catch goes here
    }
}
</code></pre>

<p>Sidenote: <code>candidate</code> here takes the place of <code>lastUsedConnectionString</code>. I like my name better ;)</p>

<h3>Typing Effort</h3>

<p>I notice that for the vast majority of your variable declarations you explicitly declare the type of the variable.
For quite a while now C# supports strictly typed left-hand side type inference (implemented with the <code>var</code> keyword).</p>

<p>It's idiomatic (and common) for C# code to use <code>var</code> on the left hand side for all declarations that allow it.</p>
    </div>