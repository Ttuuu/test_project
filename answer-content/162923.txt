<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Fix the includes</h2>

<p>Don't include headers you're not using.  I had to remove a bunch of headers that aren't available here, simply to get your code to compile.</p>

<p>I then had to include the math header for the use of <code>fabs</code> in <code>getColorAccuracy()</code> - which I then changed to <code>std::abs</code>, so <code>&lt;cmath&gt;</code>.</p>

<p>I then had:</p>

<pre><code>#include &lt;opencv2/core/core.hpp&gt;
#include &lt;opencv2/highgui/highgui.hpp&gt;

#include &lt;cmath&gt;
#include &lt;fstream&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;vector&gt;
</code></pre>

<h2>Comments should explain the code</h2>

<p>Throughout the program, your comments duplicate what the code says.  Good comments explain <em>why</em> rather than <em>what</em>, and most of the commentary is through good use of names.  For example:</p>

<pre><code>cv::Scalar getAvg(std::vector&lt;cv::Scalar&gt; imgData) { // get the average BGR of a vector of images BGR value
    cv::Scalar avg = { 0,0,0,0 }; // new scalar
    int num = imgData.size(); // size of vector
    for (int rgb = 0; rgb &lt; 3; rgb++) { // cycle through the colors
        for (int i = 0; i &lt; num; i++) // cycle through the pictures
            avg[rgb] += imgData[i][rgb]; // add them up
        avg[rgb] /= num; // divide them by the total
    }
    return avg; // return the average
}
</code></pre>

<p>We know that <code>imgData.size()</code> returns the size of a vector, so no need to comment that.  It's much more important, for example, to explain why we loop over the RGB components in the outer loop rather than in the inner loop.</p>

<h2>Use range-based <code>for</code> on containers</h2>

<p>In <code>getAvg()</code>, we don't need to count elements if we use range-based <code>for</code> (and this eliminates a dubious conversion in <code>int num = imgData.size()</code>):</p>

<pre><code>cv::Scalar getAvg(const std::vector&lt;cv::Scalar&gt;&amp; imgData)
{
    cv::Scalar avg{ 0 };
    for (auto const&amp; img: imgData) {
        avg += img;
    }

    double const n = imgData.size();
    return avg / n;
}
</code></pre>

<p>Here, I've also made use of the operator overloads <code>+=</code> and <code>/</code> provided by <code>cv::Scalar</code> to perform elementwise arithmetic without needing to loop over the RGBA components within the Scalar.</p>

<p>Note also that this function can accept the vector by const reference, as we are not modifying it and do not need to copy.</p>

<h2>Create and open <code>ifstream</code> in a single step</h2>

<p>Instead of creating a default-constructed stream, we can start with it open, by passing the filename to its constructor:</p>

<pre><code>    std::string colorName;
    {
        std::ifstream file{TRAIN_DATA_FOLDER + std::to_string(j) + "/name.txt"};
        file &gt;&gt; colorName;
    }
</code></pre>

<p>It's not necessary to explicitly call <code>file.close()</code>, as the destructor takes care of that for us.</p>

<h2>Reduce copying of <code>Color</code> objects</h2>

<p>We can use <code>std::vector::emplace_back</code> to construct a Color directly into the vector:</p>

<pre><code>    color.emplace_back(colorName,
                       getAvg(imgData),
                       getBgrDifference(getAvg(imgData)));
</code></pre>

<p>I'll change the <code>Color</code> constructor to accept two arguments and compute the difference, which will eliminate the second call to <code>getAvg()</code> - see the complete code at the end of answer.</p>

<h2>A simple typo</h2>

<p>I think that <code>Guest</code> should be <code>Guess</code>!</p>

<h2>Inefficient search</h2>

<p>The <code>getColorGuess()</code> is the only function that uses C++ algorithms, but this line looks quite dubious:</p>

<pre><code>Color bestColor = color[std::distance(accuracy.begin(),
                                      std::find(accuracy.begin(),
                                                accuracy.end(), 
                                                *std::max_element(accuracy.begin(), accuracy.end())))];
</code></pre>

<p>Having found an iterator to the maximum value, there's no need to dereference it and pass it to <code>find</code> to get the same iterator back again.  It's functionally equivalent to</p>

<pre><code>Color bestColor = color[std::distance(accuracy.begin(),
                                      std::max_element(accuracy.begin(), accuracy.end()))];
</code></pre>

<p>We can do still better, though, as we can find the maximum value directly on the <code>color</code> vector, by telling <code>std::max_element</code> how to do the calculation:</p>

<pre><code>auto it = std::max_element(color.begin(),
                           color.end(),
                           [imgDifference](const Color&amp; a, const Color&amp; b) {
                               return getColorAccuracy(imgDifference, a.difference) &lt; getColorAccuracy(imgDifference, b.difference);
                           });
// *it is a reference to a const Color in the vector
</code></pre>

<h2>Busy loop</h2>

<p>This is rude to any other process (and to those of us who prefer a cooler environment):</p>

<pre><code>while (1);
</code></pre>

<p>This never terminates.  Just remove it.</p>

<h1>Re-worked code</h1>

<pre><code>#include &lt;opencv2/core/core.hpp&gt;
#include &lt;opencv2/highgui/highgui.hpp&gt;

#include &lt;algorithm&gt;
#include &lt;cmath&gt;
#include &lt;fstream&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;vector&gt;

const int NUM_FILE = 10; // number of images per color, NUM_FILE &amp; NUM_COLOR are temporary until I get Boost working
const int NUM_COLOR = 7; // number of colors
const float NUM_VERSION = 1.3; // version number
const std::string TRAIN_DATA_FOLDER = "../TrainData/"; // training data location

cv::Scalar getBgrDifference(const cv::Scalar&amp; bgr);

struct Color {
    std::string colorName;
    cv::Scalar bgr;
    cv::Scalar difference;
    Color(std::string, cv::Scalar bgr)
        : colorName{colorName},
          bgr{bgr},
          difference{getBgrDifference(bgr)}
    {}
};

cv::Scalar getAvg(const std::vector&lt;cv::Scalar&gt;&amp; imgData)
{
    cv::Scalar avg{ 0 };
    for (auto const&amp; img: imgData) {
        avg += img;
    }

    double const n = imgData.size();
    return avg / n;
}

cv::Scalar getBgrDifference(const cv::Scalar&amp; bgr) {
    // difference between each pair of components
    return {bgr[0] - bgr[1], // difference between blue and green
            bgr[1] - bgr[2], // difference between green and red
            bgr[2] - bgr[0]}; // difference between red and blue
}

std::vector&lt;Color&gt; training()
{
    std::vector&lt;Color&gt; color;
    for (int j = 0;  j &lt; NUM_COLOR;  ++j) {
        std::string colorName;
        {
            std::ifstream file{TRAIN_DATA_FOLDER + std::to_string(j) + "/name.txt"};
            file &gt;&gt; colorName;
        }
        std::vector&lt;cv::Scalar&gt; imgData;
        imgData.reserve(NUM_FILE);
        for (int i = 0;  i &lt; NUM_FILE;  ++i) {
            std::string const fname = TRAIN_DATA_FOLDER + std::to_string(j) + "/" + std::to_string(i) + ".jpg";
            cv::Mat const image = cv::imread(fname, cv::IMREAD_COLOR);
            imgData.push_back(cv::mean(image));
        }
        auto const mean = getAvg(imgData);
        color.emplace_back(colorName, mean);
        std::cout &lt;&lt; color[j].colorName &lt;&lt; " : " &lt;&lt; color[j].bgr &lt;&lt; std::endl;
    }
    std::cout &lt;&lt; std::endl; // blank line to separate from next color files
    return color;
}

double getColorAccuracy(const cv::Scalar&amp; color1, const cv::Scalar&amp; color2)
{
    // similarity between two colors, on a scale of 0 (very different) to 1 (identical)
    double accuracy = 0;
    const auto diff = color1 - color2;
    for (int i = 0; i &lt; 3; i++)
        accuracy += std::abs(diff[i]);
    return 1 - ((accuracy / 3) / 255); // divide and conquer them!, just kidding, divide and return it
}

const Color&amp; getColorGuess(const std::vector&lt;Color&gt;&amp; color, const cv::Mat&amp; image)
{ // guess the color
    cv::Scalar imgBgr = cv::mean(image);
    cv::Scalar imgDifference = getBgrDifference(imgBgr);

    auto it = std::max_element(color.begin(),
                               color.end(),
                               [imgDifference](const Color&amp; a, const Color&amp; b) {
                                   return getColorAccuracy(imgDifference, a.difference) &lt; getColorAccuracy(imgDifference, b.difference);
                               });

    std::cout &lt;&lt; imgBgr &lt;&lt; " matches " &lt;&lt; it-&gt;colorName &lt;&lt; std::endl;
    return *it;
}

// main
int main() {
    std::cout &lt;&lt; NUM_VERSION &lt;&lt; std::endl &lt;&lt; std::endl;

    std::vector&lt;Color&gt; color = training();

    getColorGuess(color, cv::imread("../TestData/yellow.jpg", cv::IMREAD_COLOR));
}
</code></pre>

<h1>Further ideas</h1>

<ul>
<li>You might want to encapsulate the trained recogniser into an object.</li>
<li>Consider separating out the parts that write to <code>std::cout</code> so you can write a silent program that just does its job cleanly.</li>
</ul>
    </div>