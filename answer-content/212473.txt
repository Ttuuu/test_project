<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your <code>xBinSearch</code> is too large, and too recursive.</p>

<p>Most binary searches are over quickly, because <code>log2(n)</code> is small. So you certainly <em>can</em> use a recursive approach. But, especially in an interpreted language like Python, setting up and tearing down function calls is a lot more expensive than iterating in a while loop. So if you have any urge to improve performance, switch from recursion to iteration.</p>

<p>That said, you have made your code much too fluffy. "Up", "down", "up(strict)", what is all this?</p>

<p>Step back and <strong>think</strong> about the problem.</p>

<p>You want to find the closest value to a given query. There are two possibilities:</p>

<ol>
<li>The value is in the list. Return it.</li>
<li>The value is not in the list. Return the closest value.</li>
</ol>

<p>Only case two is interesting from a binary-search perspective. You might not find the value, but you should be able to find the greatest-value-less-than your query, unless all values in the list are greater.</p>

<p>If you find some GVLT value, then compare that value and the next value in the list: one of them is "closest". <code>return a if (abs(q-a) &lt; abs(q-b)) else b</code>.</p>

<p>If you find no GVLT value, all values are greater. Just return <code>the_list[0].</code></p>
    </div>