<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>LoginFragment</strong>: 
Should only have the responsibility of a <strong>View</strong> to show the data or navigation to other screen by action received by viewmodel.</p>

<p>So any data storing or network related access shouldn't be here,</p>

<pre><code>mApiService = RetrofitClient.getInstance().getApiService();
</code></pre>

<p><strong>UserRepository</strong>:
The following storing data task in LoginFragment can be done in UserRepository itself as this responsibility lies within that class. On success of the api call you can directly store that in SharedPreferences.</p>

<pre><code>SharedPreferences preferences = PreferenceManager.getDefaultSharedPreferences(getActivity());
SharedPreferences.Editor editor = preferences.edit();
editor.putString(User.TOKEN_NAME, &lt;token&gt;);
editor.apply();
</code></pre>

<p><strong>LoginViewModel</strong>:
Rather than observing network state after doing login, just observe the ui state from the viewmodel in onViewCreated(). Why does view needs to bother about network state or other state? view just need to do the things which viewmodel asks it to. Doing navigation or showing error based on network or any logic is to be determined by the viewmodel.</p>

<p>Viewmodel can create ui states like,</p>

<pre><code>abstract class UIState

ErrorState(String Message) extends UIState
NavigationState(String screenName) extends UIState
</code></pre>

<p>View can just subscribe to viewmodel like,:</p>

<pre><code>viewmodel.subscribe().observe(this, new Observer&lt;UIState&gt;() {
                @Override
                public void onChanged(@Nullable UIState state) {
                   if(state instanceOf ErrorState)
                   {
                     showError(state.message);
                   }
                   else if(state instanceOf NavigationState)
                   {
                     navigateTo(state.screenName); //Dont send R.id values from viewmodel as it shouldn't have android related classes which will make testing(junit) hard. Map your R.id based on screenName using switch/if-else and pass it to mNavController 
                   }
                }
            });

</code></pre>
    </div>