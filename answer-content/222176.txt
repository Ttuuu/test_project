<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2><code>MoveFilesToFolder()</code></h2>
<p><code>MoveFilesToFolder()</code> is doing too much.</p>
<p>Testing filePath and moveToPath in a separate sub would greatly reduce <code>MoveFilesToFolder()</code> size making it easier to read, test and modify.</p>
<pre><code>Private Const DirctoryBron As String = "Bron directory"
Private Const DirctoryDoel As String = "Doel directory"
Private Const WorksheetImages As String = "Images"

Sub Main()
    Dim filePath As String, moveToPath As String
    
    If Not (wsExists(WorksheetImages)) Then
        MsgBox WorksheetImages &amp; " worksheet not found"
    Else
        filePath = GetFolderPath(DirctoryBron)
        If Len(filePath) &gt; 0 And Not IsStringEmpty(filePath) Then
            moveToPath = GetFolderPath(DirctoryDoel)
            If Len(moveToPath) &gt; 0 Then
                MoveFilesToFolder filePath, moveToPath
            End If
        End If
    End If
    
End Sub

Function GetFolderPath(ByVal SubFolderName As String)
    Dim filePath As String
   '..... Some Code...
    
    If Len(Dir(filePath, vbDirectory)) = 0 Then
        MsgBox (filePath &amp; ": Path is niet gevonden!")
    Else
        GetFolderPath = filePath
    End If
End Function

Sub MoveFilesToFolder(filePath As String, moveToPath As String)
    '..... Some Code...
End Sub

Function IsStringEmpty(filePath As String) As Boolean
    If Len(Dir(filePath)) = 0 Then
        MsgBox filePath &amp; " has no files"
        IsStringEmpty = True
    End If
End Function
</code></pre>
<h2><code>GetFiles()</code></h2>
<p><code>fileNameString</code> should not be a global variable.  It is a best practice to avoid global variables whenever possible. The name <code>GetFiles()</code> implies that it is a function ans it should be a function.<br>
A single <code>FileSystemObject</code> is being created every time <code>GetFiles()</code> is getting called. It is better to create a single instance of the <code>FileSystemObject</code> and pass it as a parameter.</p>
<pre><code>Function GetFiles(ByVal path As String, Optional fso As Object) As String
    If fso Is Nothing Then Set fso = CreateObject("Scripting.FileSystemObject")
</code></pre>
<p>The main reason that <code>GetFiles()</code> is so slow is string concatenation is inefficient.  Everytime a string is concatenated a new string variable is created.  Let's say that the average file path is 50 bytes long.  After 2K files, <code>fileNameString</code> would be 100K bytes and by the time we reach the 10K <code>fileNameString</code> would be 500k bytes.   Creatin an array of filename and using <code>Join()</code> to concatenate the array would be much faster.</p>
<p>An easier solution is to use <code>WScript.Shell</code> to return filenames:</p>
<pre><code>Function GetFiles(ByVal rootPath As String) As Variant
    Dim result As String
    result = CreateObject("WScript.Shell").exec("cmd /c dir """ &amp; rootPath &amp; """ /a:d-h-s /b /s").StdOut.ReadAll
    result = Left(result, Len(result) - 2)
    result = Replace(result, vbNewLine, "|")
    GetFiles = result
End Function
</code></pre>
<p>For faster lookups I would add the file paths to a dictionary.</p>
<pre><code>Function GetFileMap(ByVal rootPath As String) As Scripting.Dictionary
    Dim map As New Scripting.Dictionary
    Dim key
    
    Dim result As String
    result = CreateObject("WScript.Shell").exec("cmd /c dir """ &amp; rootPath &amp; """ /a:d-h-s /b /s").StdOut.ReadAll
    
    For Each key In Split(result, vbNewLine)
        If Len(key) &gt; 0 Then
            map.Add key, vbNullString
        End If
    Next
    
    Set GetFileMap = map
End Function
</code></pre>
<h2>Addendum</h2>
<p>I didn't elaborate much on using a dictionary but it is much faster than looping over all the cells for each item in the file array.  It looks like you would need to have the file name for the dictionary keys and the file paths for the the dictionary values.</p>
<p>I personally don't like <code>GetColLetter()</code>.  I can see where it my be handy for creating cell formulas but there is always another way when working with ranges.</p>
<p>I'm not a fan of creating functions to that basically rename built-in functions.  In this project <code>lastpositionOfChar()</code> was used instead <code>Instr()</code>.  2 years from now you might forget <code>lastpositionOfChar()</code> and write <code>lastCharPosition()</code>.  It also makes code reuse more difficult because you created a dependency on another function.</p>
<pre><code> filename = Mid(cell.Value, lastpositionOfChar(cell.Value, "/") + 1, Len(cell.Value))
</code></pre>
<p><code>Len(cell.Value)</code> is not needed.   I prefer <code>filename = Mid(cell.Value, InStrRev(cell.Value, "/"))</code>.</p>
<p><code>LeadingZeroString()</code> I would use a public Const to store the number format.</p>
<blockquote>
<p>Public Const LeadingZero As String = "000"</p>
</blockquote>
<p>Although you have done an outstanding job of naming your custom functions I would still use the built-in ones.</p>
<p>Here is a small sample of how I would refactor the code:</p>
<h2>Before</h2>
<pre><code>If fileCopied Then
    ActiveSheet.Range("B" &amp; cell.Row).Value = imgArray(i)

    For J = 2 To 15
        Dim newFileName As String
        newFileName = CreateFileName(CStr(imgArray(i)), LeadingZeroString(J))
        If Not (IsStringEmpty(newFileName)) Then
            If (DoesFileExist(newFileName)) Then
                If Not (IsFileOpen(newFileName)) Then
                    FileCopy newFileName, moveToPath &amp; Right(newFileName, Len(newFileName) - lastpositionOfChar(newFileName, "\") + 1)
                    ActiveSheet.Range(GetColLetter(J + 1) &amp; cell.Row).Value = newFileName
                    ActiveSheet.Range(GetColLetter(J + 1) &amp; cell.Row).Font.Color = RGB(0, 102, 0)
                End If
            Else
                ActiveSheet.Range(GetColLetter(J + 1) &amp; cell.Row).Value = "(Niet aanwezig) " &amp; Right(newFileName, Len(newFileName) - lastpositionOfChar(newFileName, "\") + 1)
                ActiveSheet.Range(GetColLetter(J + 1) &amp; cell.Row).Font.Color = RGB(255, 153, 51)
            End If
        End If
    Next J
End If
</code></pre>
<h2>After</h2>
<pre><code>If fileCopied Then
    cell.EntireColumn.Columns("B").Value = imgArray(i)

    For J = 2 To 15
        Dim newFileName As String
        newFileName = CreateFileName(CStr(imgArray(i)), Format(J, LeadingZero))
        If Len(newFileName) &gt; 0 Then
            If Len(Dir(newFileName)) &gt; 0 Then
                If Not (IsFileOpen(newFileName)) Then
                    FileCopy newFileName, moveToPath &amp; Right(newFileName, Len(newFileName) - InStrRev(newFileName, "\") + 1)
                    cell.Offset(0, J).Value = newFileName
                    cell.Offset(0, J).Font.Color = RGB(0, 102, 0)
                End If
            Else
                cell.Offset(0, J).Value = "(Niet aanwezig) " &amp; Right(newFileName, Len(newFileName) - InStrRev(newFileName, "\") + 1)
                cell.Offset(0, J).Font.Color = RGB(255, 153, 51)
            End If
        End If
    Next J
End If
</code></pre>
    </div>