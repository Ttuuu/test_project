<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As you suspect, this can be done in fewer lines, but it's not a one-liner.  </p>

<blockquote>
<pre><code>use strict;
use warnings;
use diagnostics;
</code></pre>
</blockquote>

<p>Always a good idea.  Consider <code>use warnings FATAL =&gt; "all"</code> so that you don't miss any.</p>

<hr>

<blockquote>
<pre><code>my $filename = &lt;STDIN&gt;;
</code></pre>
</blockquote>

<p>A command-line argument or environment variable is the typical way to do this, in Perl and most other languages.  Directory variables oughtn't be named <code>$filename</code>.</p>

<pre><code>  my $dir = ( shift or $ENV{TIMELAPSE_DIRECTORY} or die "usage: $0 directory\n" );
</code></pre>

<hr>

<blockquote>
<pre><code>chdir $filename or die "Couldn't change the directory: $!\n";
â€¦
rename ($file, $new_name) or die "Couldn't rename the file: $!";
</code></pre>
</blockquote>

<p>The fat-arrow <code>=&gt;</code> can replace a comma and improve readability in some cases.  Dropping parens is another good readability boost, when done judiciously.  Unless the line number where <code>die</code> occurred is interesting, suppress it by appending a newline to the message.  And finally, it's a good habit to include in error messages the data that produced them, as in:</p>

<pre><code> rename $file =&gt; $new_name or die "Couldn't rename '$file' to '$new_name': $!\n";
</code></pre>

<hr>

<blockquote>
<pre><code>my @files  = &lt;*&gt;;
#gives a list of all filehandles in the given directory
</code></pre>
</blockquote>

<p>Filenames, not filehandles.  It would be reasonable to filter this list to contain actual files, excluding directories:</p>

<pre><code>my @files  = grep -f, &lt;*&gt;;
</code></pre>

<p>And maybe even by name: </p>

<pre><code>my @files = grep { -f and /\.( png | jpe?g | tga )$/xi } &lt;*&gt;;
</code></pre>

<hr>

<blockquote>
<pre><code>my $amount_of_digits = int( log($#files)/log(10) +1);
</code></pre>
</blockquote>

<p><code>$#files</code> is the largest index in that zero-based array.  With 10 files, the last is <code>$files[9]</code> and the math returns <code>1</code> instead of the <code>2</code> we need.  The size of the array is one bigger and retrieved as <code>@files</code> in scalar context (<code>log()</code> imposes scalar context for us, which is convenient).  </p>

<p><code>width</code> is a good name for this variable.</p>

<p>Avoid an uncaught exception by checking that <code>@files</code> is non-empty.</p>

<p>And the parens around <code>int</code> can be omitted.  </p>

<pre><code>die "nothing to do!\n" unless @files;
my $width = int log(@files)/log(10) + 1;
</code></pre>

<p>But this is still no good!  <code>log(1000)/log(10)</code> is <code>3</code> in Perl and in real life.  But <code>int( log(1000)/log(10) )</code> is <code>2</code>!   This happens because <a href="https://stackoverflow.com/questions/588004/is-floating-point-math-broken">floating-point math is imperfect</a>.  Luckily Perl will let us cheat by taking the length of a number that's been silently converted  to a string:</p>

<pre><code>my $width = length scalar @files;
</code></pre>

<hr>

<blockquote>
<pre><code>foreach my $file (@files){
</code></pre>
</blockquote>

<p><code>for</code> is the idiomatic alternative to <code>foreach</code>.</p>

<hr>

<blockquote>
<pre><code>    if ($file =~ /(\d+)/){
        my $amount_of_padded_zeroes = $amount_of_digits - length($1);
        if($amount_of_padded_zeroes &gt; 0){
            my $new_number =  '0' x $amount_of_padded_zeroes . $1;     
            (my $new_name = $file) =~ s/$1/$new_number/;
            print "Changing name too: $new_name\n"; 
</code></pre>
</blockquote>

<p><code>sprintf</code> is the function to use for leading zeroes.  It can go right in the <code>s///</code> replacement by using the <code>/e</code>xecute modifier.  If the replace fails, skip to <code>next</code> file.</p>

<pre><code>             (my $new_name = $file) =~ s/(\d+)/ sprintf "%0${width}d" =&gt; $1 /e or next;
</code></pre>

<hr>

<blockquote>
<pre><code>rename ($file, $new_name) or die "Couldn't rename the file: $!";
</code></pre>
</blockquote>

<p>It's good practice to ensure you have something to do, and that you aren't overwriting an existing file here:</p>

<pre><code>next if $new_name eq $file;
die "$new_name (from $file) already exists!\n" if -f $new_name;
</code></pre>

<hr>

<blockquote>
<pre><code>print "Program completed. Press any key to continue.\n";
my $einde = &lt;STDIN&gt;;
</code></pre>
</blockquote>

<p>I think you know how I feel about this.  Should you decide to keep it, only the <kbd>Enter</kbd> key will actually proceed.</p>

<p>Putting it all together:</p>

<pre><code>use strict;
use warnings FATAL =&gt; 'all';
use diagnostics;

my $dir = ( shift or $ENV{TIMELAPSE_DIRECTORY} or die "usage: $0 directory\n" );
chdir $dir or die "Couldn't change directory to $dir: $!\n";
my @files = grep { -f and /\.( png | jpe?g | tga )$/xi } &lt;*&gt;;
die "nothing to do!\n" unless @files;
my $width = length scalar @files;

for my  $file (@files) { 
    (my $new_name = $file) =~ s/(\d+)/ sprintf "%0${width}d" =&gt; $1 /e or next;
    next if $new_name eq $file;
    die "$new_name (from $file) already exists!\n" if -f $new_name;
    rename $file =&gt; $new_name or die "Couldn't rename '$file' to '$new_name': $!\n";
}
print "Program completed.\n"
</code></pre>

<p><strong>Reader exercise:</strong> improve this program to number the files from 1 to n, even if the original numbers don't start at 1 or have gaps!</p>
    </div>