<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>We could use <code>Container::size_type</code> or <code>std::size_t</code> for the <code>increment_by</code> parameter, or (as standard algorithms like <code>std::for_each_n</code> seem to do) make it a template argument and use the same type while incrementing <code>n</code>.</p></li>
<li><p>The standard library algorithms take iterators rather than containers. You mention allowing users to specify an "index location they want to use for their starting position", which would be accomplished by passing an iterator range instead of calling <code>begin</code> and <code>end</code>.</p></li>
<li><p>I don't think the default <code>increment_by</code> argument value is useful. If we needed a step size of <code>1</code>, we'd call <code>std::for_each</code> or use a range-based for loop.</p></li>
<li><p><code>std::for_each</code> returns the function object (which can be helpful for something like summing values). We could do the same.</p></li>
<li><p>Follow the standard library conventions with naming template arguments (e.g. name the minimum required iterator type, make it clear that the function is a unary function).</p></li>
</ul>

<hr>

<p>Modified version:</p>

<pre><code>template&lt;class InputIt, class Size, class UnaryFunction&gt;
UnaryFunction for_each_by_n(InputIt begin, InputIt end, Size step, UnaryFunction f) {

    if (step == 0)
        return f;

    while (begin != end)
    {
        f(*begin);

        for (Size n = 0; n != step; ++n)
        {
            if (begin == end)
                return f;

            ++begin;
        }
    }

    return f;
}
</code></pre>

<p>(edit: removed unnecessary <code>std::move</code> per Juho's comment).</p>
    </div>