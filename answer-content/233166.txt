<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Reduce Lookups</h2>
<p><code>ValueT&amp; operator[](KeyT key)</code> does 2 lookups, one in <code>map.count(key)</code> and one in <code>map[key]</code>. Using <code>map.find(key)</code> and then comparing the iterator against <code>std::end(map)</code> and then dereferencing it to return the value avoids that.</p>
<h2>Consistent Parameter Types</h2>
<p><code>ValueT&amp; operator[](KeyT key)</code> takes <code>KeyT</code> by value while other functions use <code>const KeyT &amp;</code>. There doesn't seem to be a reason for that and you should be consistent.</p>
<h1>Support Move-Only Types</h1>
<p>Take inspiration from the standard. All versions of <code>std::map::insert_or_assign</code> take a <code>ValueT &amp;&amp;</code> while you take a <code>const ValueT &amp;</code>. That means unlike the standard containers you do not support <code>std::unique_ptr</code> for example. I don't see anything else that is holding it back, so it's an easy improvement for minimal effort.</p>
<h2>Bonus: Use All The New Cool Features</h2>
<p>(this one is not entirely serious)<br>
In <code>insert_or_assign</code></p>
<pre class="lang-cpp prettyprint-override"><code>    auto [elem_it, was_new] = ins_res;
    if (was_new) order.push_back(&amp;*elem_it);
</code></pre>
<p>can be written as</p>
<pre class="lang-cpp prettyprint-override"><code>    if (auto [elem_it, was_new] = ins_res; was_new) {
        order.push_back(&amp;*elem_it);
    }
</code></pre>
<p>I'm not sure it's better, but it's fancier. In theory it's better because it limits the scope of <code>elem_it</code> and <code>was_new</code>, but in practice in this case it just doesn't matter.</p>
<h2>Nitpicking</h2>
<p>Some of your variables can be <code>const</code> such as <code>ins_res</code> and <code>map_it</code>.</p>
<h2>Extensions</h2>
<p>You seem to want to keep it simple, so take these as suggestions of what could be done, not necessarily as part of the code review.</p>
<h3>Transparent Comparators</h3>
<p>It would be cool if you supported lookups that don't require to create a <code>KeyT</code>. For example <code>++smap["Johnny"];</code> unnecessarily creates a temporary <code>std::string</code>. <code>std::string</code> can compare to <code>const char *</code> already. See <a href="https://stackoverflow.com/questions/20317413/what-are-transparent-comparators">transparent comparators</a> and <a href="https://en.cppreference.com/w/cpp/container/map/find" rel="noreferrer"><code>std::map::find</code></a> for inspiration.</p>
<h3>A Real Container</h3>
<p>Maybe you could make <code>SequencedMap</code> <a href="https://en.cppreference.com/w/cpp/named_req/Container" rel="noreferrer">a real container</a> which then allows its use in all the standard algorithms.</p>
<h2>When In Doubt Use <code>std::vector</code></h2>
<p>It's a good default container unless benchmarks show you need something else. <code>std::list</code> is legendary for its terrible performance in almost all circumstances, even the ones that sound like they should be faster such as removing an element from the middle.</p>
    </div>