<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Creating a "manual" iterator using <code>iter</code> and then calling <code>next</code> can be tricky, as you found out.
Once an iterator is exhausted, it raises a <code>StopIteration</code> to signal its end.
If you do not catch that in a <code>try/except</code> block, your program will exit ungracefully.</p>

<p>Luckily, <code>message</code>, being a list, is perfectly iterable without being explicit about it.
Simply using it in a <code>for</code> loop will do the <code>iter</code>/<code>next</code> magic for you, and the loop will exit once <code>StopIteration</code> is reached, without error.</p>

<p><code>zip</code> is a built-in so you can iterate over multiple iterables at once.
<code>zip</code> will iterate until the shortest of the passed iterables is exhausted.
This can be tricky if you <em>expect</em> the iterables to be of the same length.
There is currently talk about a <code>strict</code> flag in the Python ideas mailing list, which would throw errors if <code>strict=True</code> and the iterables are of different lengths.</p>

<p>Assuming you meant to include <code>from itertools import cycle</code>, alongside <code>cycle</code>, of course <code>message</code> is exhausted first.
<code>cycle</code> being infinite, this suprises no one in this case.
The <code>for</code> loop then simply ends after the last <code>message</code> element.</p>

<p>This hopefully does what you want to do:</p>

<pre class="lang-py prettyprint-override"><code>from itertools import cycle

keys = [3, 1, 20]
message = ["a", "b", "c", "d", "e", "f"]

print(keys, message, sep="\n", end="\n" * 2)

for key, letter in zip(cycle(keys), message):
    print(f"{key}: {letter}")

print("Okay, it worked!")
</code></pre>

<hr>

<p>This is more like your version, needlessly verbose.
Never do this in reality!
However, it can help you understand what is going on in your case:</p>

<pre class="lang-py prettyprint-override"><code>from itertools import cycle

keys = [3, 1, 20]
message = ["a", "b", "c", "d", "e", "f"]

print(keys, message, sep="\n", end="\n" * 2)

message_iter = iter(message)

for key in cycle(keys):
    try:
        print(f"{key}: {next(message_iter)}")
    except StopIteration:
        break  # Break out of infinite loop

print("Okay, it worked!")
</code></pre>
    </div>