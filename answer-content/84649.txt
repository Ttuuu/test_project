<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><code>cPrime = 30 * C + 1</code>, which uses <a href="https://docs.scipy.org/doc/numpy/user/basics.broadcasting.html" rel="nofollow">broadcasting</a>, comes close.  Unfortunately, it adds 1 indiscriminately to every single element, even the elements that were originally zero.</p>

<p><code>C != 0</code> gives you the indexes of all the locations you want to operate on:</p>

<blockquote>
<pre><code>&gt;&gt;&gt; C
array([[0, 0, 0, 1, 0, 0],
       [0, 0, 0, 1, 0, 0],
       [0, 0, 0, 1, 0, 0],
       [0, 0, 0, 0, 0, 3],
       [2, 5, 3, 0, 0, 0],
       [0, 0, 0, 0, 0, 0]])
&gt;&gt;&gt; C != 0
array([[False, False, False,  True, False, False],
       [False, False, False,  True, False, False],
       [False, False, False,  True, False, False],
       [False, False, False, False, False,  True],
       [ True,  True,  True, False, False, False],
       [False, False, False, False, False, False]], dtype=bool)
</code></pre>
</blockquote>

<p>Combining the two concepts, you can write either</p>

<pre><code>cPrime = 30 * C + 1 * (C != 0)
</code></pre>

<p>or</p>

<pre><code>cPrime = (30 * C + 1) * (C != 0)
</code></pre>
    </div>