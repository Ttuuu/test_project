<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is a good and useful idea.  The name is intuitive and memorable.</p>

<p>My first thought was that if a pointer were passed, then we'd use the size of the pointer, but you've found a good way to ensure only arrays are passed.</p>

<p>Obviously, this means that we can't use this for those occasions where we build up the content in pieces (with several prints into a larger array), but that's less common than having a plain <code>char[]</code> we're allowed to fill, so it's probably reasonable to require callers to use <code>snprintf()</code> directly in those cases.</p>

<p>Although I'd probably provide <code>SSIZEOF(x)</code>, I wouldn't depend on it in <code>sbprintf()</code> - there's no great overhead to writing it in full here.</p>

<p>Although we normally enclose macro arguments in <code>()</code> to prevent higher-precedence operators tearing expressions apart, I think you're right that it's not needed for the first use of <code>buff</code>, where it's a single argument to a function call.  I don't <em>think</em> there's a valid use where <code>sizeof</code> would break an expression of array type, but I'm willing to be defensive there.</p>

<p>One concern is that we now get a boolean result, but have lost the actual number of characters written, necessitating a call to <code>strlen()</code> if we need the length (e.g. to compose a network protocol packet).  It might be possible to write a version that also stores the actual length written:</p>

<pre><code>/* untested */
#define sbprintf(buff, written, format, ...)                            \
    ( {                                                                 \
        alx_static_assert_array(buff);                                  \
                                                                        \
        (*written = snprintf(buff,sizeof(buff),format, ##__VA_ARGS__))  \
            &gt;= (int)sizeof(buff)                                        \
            } )
</code></pre>

<p>Of course, a really usable version of this would allow <code>written</code> to be a null pointer, to discard the result.  That's not hard, but I'm feeling too lazy to write that myself.</p>
    </div>