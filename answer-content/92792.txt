<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>String input;
for(int times = 0; times &lt; t; times++) {
    // Ask for the number
    input = in.next();
</code></pre>

<p>There's no need to declare <code>input</code> outside of the loop. It has no advantage at all as you don't need to keep it between iterations. Always minimize the scope.</p>

<hr>

<pre><code>       // If the longValueExact() returns a greater number than the long max value, then it throws an ArithmeticException
</code></pre>

<p><strong>As pointed in a comment, I misread <code>longValueExact</code> as <code>longValue</code>. Updated the answer, so that both are covered.</strong></p>

<p>For <code>longValue</code>, this isn't true and the Javadoc <a href="https://docs.oracle.com/javase/7/docs/api/java/math/BigInteger.html#longValue()" rel="nofollow">says it pretty clearly</a>:</p>

<blockquote>
  <p>if this BigInteger is too big to fit in a long, only the low-order 64 bits are returned</p>
</blockquote>

<p>For <code>longValueExact</code>, the following is said</p>

<blockquote>
  <p>If the value of this BigInteger is out of the range of the long type, then an ArithmeticException is thrown.</p>
</blockquote>

<p>So checking for exception is correct. If it gets thrown, the number doesn't fit in <code>long</code> and obviously in no smaller type either.</p>

<hr>

<pre><code>        if(number.longValueExact() &lt; Long.MAX_VALUE &amp;&amp; number.longValue() &gt; Long.MIN_VALUE) 
        {
            System.out.println("* long");
        } 
</code></pre>

<p>By definition, there's no <code>long</code> bigger than the biggest <code>long</code>, is it?</p>

<p>So this test is a tautology.</p>

<hr>

<p>Using <code>longValueExact</code> makes the program correct. With <code>longValue</code>, it wouldn't work and instead of testing if a number fits in a type, you test if its lowest 64 bits do.</p>

<p>Still, letting an exception be thrown for a normal program flow is extremely inefficient as the JIT assumes that exceptions are well... exceptional. Moreover, filling their stacktrace is pretty complicated and slow, as they actually don't exists in an optimized code.</p>

<p>In order to get a faster code, you need to do it the other way round: Convert to <code>BigInteger</code> and then compare. As a bonus to speed, you get compatibility with Java 7.</p>

<hr>

<p>You should also fix your spacing and braces. Let your IDE do it, it's free.</p>
    </div>