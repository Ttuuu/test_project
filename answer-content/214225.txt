<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Thank you for sharing your code and this idea with us! :)</p>

<p>I have just some personal preferences and ideas to some of you "major problems" witch should be additional to the answers of <a href="https://codereview.stackexchange.com/users/193758/mateusz-stefek">@Mateusz Stefek</a> and <a href="https://codereview.stackexchange.com/users/12866/torbenputkonen">@TorbenPutkonen</a></p>

<hr>

<h1>Not Functional</h1>

<blockquote>
  <pre class="lang-java prettyprint-override"><code>public Try&lt;T&gt; catching(Class ex, Function&lt;Exception, T&gt; handler) {
  if(/* ... */) {
    throw new IllegalStateException("exception " + ex.getSimpleName() + " has already been caught");
  } else {
    /* ... */
  }
}
</code></pre>
</blockquote>

<p>In functional programming attempt not to throw any error instead you would return an <a href="http://hackage.haskell.org/package/base-4.12.0.0/docs/Data-Either.html" rel="noreferrer"><code>Either</code></a>.</p>

<blockquote>
  <pre class="lang-java prettyprint-override"><code>new Try&lt;&gt;(()-&gt; Integer.parseInt("1"))
                      .catching(NumberFormatException.class, (e) -&gt; 2)
                      .execute();
</code></pre>
</blockquote>

<p>On each method call on <code>Try</code> you modify it, but fp is all about immutability. </p>

<h1>Some Refactoring</h1>

<h2>Naming</h2>

<blockquote>
  <pre class="lang-java prettyprint-override"><code>public Try&lt;T&gt; catching(Class ex, Function&lt;Exception, T&gt; handler)
</code></pre>
</blockquote>

<p>I would write out <code>ex</code> to <code>exception</code>. Than we can change the name of</p>

<blockquote>
  <pre class="lang-java prettyprint-override"><code>private final Map&lt;Class, Function&lt;Exception, T&gt;&gt; handlers
</code></pre>
</blockquote>

<p>to <code>exceptionByHandler</code>, which makes it easier to read, because it suggests a <code>Map</code> more intuitively, than <code>handler</code> which could be a <code>List</code>.</p>

<h2><code>Null</code> check</h2>

<p>We have currently two <code>null</code> checks</p>

<blockquote>
  <pre class="lang-java prettyprint-override"><code>// in execute
if(finallyExpr != null)

// in andFinally
if (finallyExpr == null)
</code></pre>
</blockquote>

<p>The utility class <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Objects.html" rel="noreferrer"><code>Objects</code></a> offers the static methods <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Objects.html#isNull-java.lang.Object-" rel="noreferrer"><code>isNull</code></a> and <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Objects.html#nonNull-java.lang.Object-" rel="noreferrer"><code>nonNull</code></a> and with an static import it could look like</p>

<pre class="lang-java prettyprint-override"><code>// in execute
if(nonNull(finallyExpr))

// in andFinally
if (isNull(finallyExpr))
</code></pre>

<p>But if we use an <code>Optional</code> in <code>andFinally</code> it could look like </p>

<pre class="lang-java prettyprint-override"><code>public T andFinally(Runnable newFinallyExpr) {
    finallyExpr = Optional.ofNullable(finallyExpr)
                          .orElseThrow(() -&gt; new IllegalStateException("Cannot have multiple finally expressions"));

    return execute();
}
</code></pre>

<h2>Non Intuitiv API</h2>

<blockquote>
  <p>The check in <code>andFinally</code> seems like it's unnecessary. [...]</p>
</blockquote>

<p>You already mention this as a flaw.. but from an other perspective. For me as a client it is not intuitive to have the method <code>andFinally</code> and <code>execute</code> to fire up the <code>Try</code>.</p>

<p>More natural would be to let the client call the <code>execute</code> itself and override all <code>finally</code> with the next occurring <code>finally</code>.</p>

<pre class="lang-java prettyprint-override"><code>new Try&lt;&gt;(()-&gt; Integer.parseInt("f"))
                  .catching(NumberFormatException.class, (e)-&gt; 2)
                  .catching(IllegalStateException.class, (e) -&gt; 3)
                  .andFinally(()-&gt; System.out.println("Finally!"))
                  .andFinally(()-&gt; System.out.println("Finally #2!")) // overrides all previous finally
                  .execute();
</code></pre>

<hr>

<h1>Improvement</h1>

<h2>Make <code>Try</code> immutable</h2>

<p>As in functional programming objects are immutable we can do it in Java too. We can let the client modify a <code>Try</code> with methods we provide him and return each time a new <code>Try</code>.</p>

<p>But to build up a <code>Try</code> we can create a <code>TryBuilder</code> witch is mutable. This is a common way which you can find in the Java-World to or example with <code>String</code> and <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/StringBuilder.html" rel="noreferrer"><code>StringBuilder</code></a>. </p>

<h2><a href="https://en.wikipedia.org/wiki/State_pattern" rel="noreferrer">State Pattern</a></h2>

<blockquote>
  <p>The need for <code>execute</code> when <code>andFinally</code> isn't used. I can't see how the class would know that all catches have been added though.</p>
</blockquote>

<p>This is a scenario for the State Pattern. We have our base-state, which allows the client to add multiple <code>catch</code>-cases. After the last <code>catch</code>-case we need to let the client allow <em>only one</em> <code>finally</code>-case. After this our object is in the execution-state.</p>

<h2><a href="https://en.wikipedia.org/wiki/Builder_pattern" rel="noreferrer">Builder Pattern</a></h2>

<p>We can mix the State-Pattern with the Builder-Pattern and on each state we can use a builder, which only let use the methods the client currently needs to make the api more intuitive. </p>

<h2>Replace the Constructor</h2>

<blockquote>
  <p>The need for <code>new</code> is unfortunate too. I figured I could take a page from Scala and create a static method that acts as a constructor, but then I'd need to do something like <code>Try.tryMethod</code> to reference it, which isn't a whole lot better.</p>
</blockquote>

<p>With a static method as constructor we are allowed to return a different reference type.</p>

<pre class="lang-java prettyprint-override"><code>new Try(/* ... */) // can only return an instance of Try

Try.of(/* ... */)  // can return everything you can imagine 
</code></pre>

<p>For the use case I have in mind we need to make the constructor private and return a builder that we need to implement. </p>

<pre class="lang-java prettyprint-override"><code>private Try(/* ... */) { /* ... */ }

public  static &lt;T&gt; CatchBuilder of(Supplier&lt;T&gt; tryExpr) {
    return new CatchBuilder&lt;T&gt;(new TryBuilder&lt;T&gt;().withTryExpr(tryExpr));
}
</code></pre>

<h2>Example Implementation</h2>

<h3>Try</h3>

<p>The <code>Try</code> is a public class with builds the API to the client. It provides the client outside of the package only a <code>of(Supplier&lt;T&gt; tryExpr)</code> to build up a <code>Try</code>. The constructor is package private therewith <code>TryBuilder</code> can access it. With <code>of(Supplier&lt;T&gt; tryExpr)</code> the clients gets a <code>CatchBuilder</code> (this is the modified State-Pattern mentioned above)</p>

<pre class="lang-java prettyprint-override"><code>public class Try&lt;T&gt; {

  private Supplier&lt;T&gt; tryExpr;

  private Map&lt;Class, Function&lt;Exception, T&gt;&gt; handlers;

  private Runnable finallyExpr;

  Try(Supplier&lt;T&gt; tryExpr,
      Map&lt;Class, Function&lt;Exception, T&gt;&gt; handlers,
      Runnable finallyExpr) {
    this.tryExpr = tryExpr;
    this.handlers = handlers;
    this.finallyExpr = finallyExpr;
  }

  public static &lt;T&gt; CatchBuilder of(Supplier&lt;T&gt; tryExpr) {
    return new CatchBuilder&lt;T&gt;(new TryBuilder&lt;T&gt;().withTryExpr(tryExpr));
  }

  public T execute() {
    try {
      return tryExpr.get();
    } catch (Exception e) {
      if (handlers.containsKey(e.getClass())) {
        Function&lt;Exception, T&gt; handler = handlers.get(e.getClass());
        return handler.apply(e);
      } else {
        throw e;
      }
    } finally {
      if (finallyExpr != null) {
        finallyExpr.run();
      }
    }
  }
}
</code></pre>

<h3>TryBuilder</h3>

<p>This is the mutable way to build up a <code>Try</code>.</p>

<pre class="lang-java prettyprint-override"><code>class TryBuilder&lt;T&gt; {

  private Supplier&lt;T&gt; tryExpr;

  private Map&lt;Class, Function&lt;Exception, T&gt;&gt; handlers;

  private Runnable finallyExpr;

  public TryBuilder&lt;T&gt; withTryExpr(Supplier&lt;T&gt; tryExpr) {
    this.tryExpr = tryExpr;
    return this;
  }

  public TryBuilder&lt;T&gt; withHandlers(Map&lt;Class, Function&lt;Exception, T&gt;&gt; handlers) {
    this.handlers = handlers;
    return this;
  }

  public TryBuilder&lt;T&gt; withFinallyExpr(Runnable finallyExpr) {
    this.finallyExpr = finallyExpr;
    return this;
  }

  public Try&lt;T&gt; build() {
    return new Try&lt;&gt;(tryExpr, handlers, finallyExpr);
  }

}
</code></pre>

<h3>CatchBuilder and FinallyBuilder</h3>

<pre class="lang-java prettyprint-override"><code>class CatchBuilder&lt;T&gt; {

  private final Map&lt;Class, Function&lt;Exception, T&gt;&gt; handlers = new HashMap&lt;&gt;();

  private final TryBuilder&lt;T&gt; tryBuilder;

  CatchBuilder(TryBuilder&lt;T&gt; tryBuilder) {
    this.tryBuilder = tryBuilder;
  }

  public CatchBuilder&lt;T&gt; withCatch(Class ex, Function&lt;Exception, T&gt; handler) {
    if (handlers.containsKey(ex)) {
      throw new IllegalStateException("exception " + ex.getSimpleName() + " has already been caught");
    }

    handlers.put(ex, handler);
    return this;
  }

  public FinallyBuilder&lt;T&gt; and(Class ex, Function&lt;Exception, T&gt; handler) {
    withCatch(ex, handler);
    return new FinallyBuilder&lt;&gt;(tryBuilder.withHandlers(handlers));
  }

  public FinallyBuilder&lt;T&gt; onlyCatch(Class ex, Function&lt;Exception, T&gt; handler) {
    return and(ex, handler);
  }

}

class FinallyBuilder&lt;T&gt; {
  private final TryBuilder&lt;T&gt; tryBuilder;

  public FinallyBuilder(TryBuilder&lt;T&gt; tryBuilder) {
    this.tryBuilder = tryBuilder;
  }

  public Try&lt;T&gt; finallyDo(Runnable newFinallyExpr) {
    return tryBuilder.withFinallyExpr(newFinallyExpr)
                     .build();
  }

  public Try&lt;T&gt; withoutFinally() {
    return tryBuilder.build();
  }

}
</code></pre>

<h3>Exmaple</h3>

<pre class="lang-java prettyprint-override"><code>public static void main(String[] args) {

  Try&lt;Integer&gt; firstTry = Try.of(() -&gt; Integer.parseInt("f"))
                             .withCatch(NumberFormatException.class, (e) -&gt; 2)
                             .and(IllegalStateException.class, (e) -&gt; 3)
                             .finallyDo(() -&gt; System.out.println("Finally!"));

  Try&lt;Integer&gt; secondTry = Try.of(() -&gt; Integer.parseInt("f"))
                              .onlyCatch(NumberFormatException.class, (e) -&gt; 2)
                              .withoutFinally();
}
</code></pre>
    </div>