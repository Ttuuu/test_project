<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Python 3.x bug</strong></p>

<p>Did you know that your program outputs <code>1</code> for the number <code>39</code> if executed on Python 3?</p>

<p>This is because of the <code>/</code> division operator on this line:</p>

<pre><code>return get_digits(num / 10, digits)
</code></pre>

<p>The meaning of <code>/</code> in Python 3.x was changed (<a href="https://www.python.org/dev/peps/pep-0238/" rel="nofollow noreferrer">PEP 238</a>). Switching to <code>//</code> would be a quick fix.</p>

<hr>

<p><strong>Improving the solution</strong></p>

<blockquote>
  <p>I was thinking I might consolidate these three little recursive
  functions into one function containing all three..</p>
</blockquote>

<p>What if we would get all the digits of a number by iterating over the string representation of an integer and converting every digit back to an integer - <code>map(int, str(num))</code>. In order to multiple the digits of a number we can use <a href="https://docs.python.org/3/library/functools.html#functools.reduce" rel="nofollow noreferrer"><code>reduce()</code></a> applying the <a href="https://docs.python.org/3/library/operator.html#operator.mul" rel="nofollow noreferrer"><code>operator.mul</code></a> (multiplication operator) function:</p>

<pre><code>from functools import reduce
from operator import mul


def persistence(number, count=0):
    # recursion base case - exit once the number is less than 10
    if number &lt; 10:
        return count

    # get new number by multiplying digits of a number
    new_number = reduce(mul, map(int, str(number)))

    return persistence(new_number, count + 1)
</code></pre>

<p>Note that <em>you don't actually need the while loop at all</em>, since you are going recursive and have a <code>num &lt; 10</code> base case as a recursion "exit condition".</p>

<hr>

<p>Note that you can also approach the "getting digits of a number" <a href="https://stackoverflow.com/a/975039/771848">"mathematically"</a> instead of converting the types back and forth:</p>

<pre><code>from functools import reduce
from operator import mul


def get_digits(number):
    """Generates digits of a number."""
    while number:
        digit = number % 10

        yield digit

        # remove last digit from number (as integer)
        number //= 10


def persistence(number, count=0):
    if number &lt; 10:
        return count

    # get new number by multiplying digits of a number
    new_number = reduce(mul, get_digits(number))

    return persistence(new_number, count + 1)
</code></pre>

<p>This would also be generally faster than the first version.</p>
    </div>