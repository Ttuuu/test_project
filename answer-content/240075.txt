<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>I am particularly interested in a better way to create the <code>classes</code> variable, [...] this ordering depends obviously on the order of <code>splits</code>.</p>
</blockquote>

<p>Because ASCII codes of <code>A..Z</code> come later than those of <code>0..9</code>, we can't shorten the <code>classes</code> array itself. Instead, we can <em>lengthen</em> it, so that <code>classes</code> becomes simply two copies of <code>0..9</code>. You can create unused intervals by copying the boundary item that comes <em>after</em> them:</p>

<pre><code>    'BBB' ⍸ 'ABCD'
0 3 3 3
</code></pre>

<p>Incorporating it in <code>Telephone</code>:</p>

<pre><code>  splits ← ⎕D, 'AAADGJMPTW'
  classes ← ,⍨ 1 -⍨ ⍳10
</code></pre>

<hr>

<p><strong>Nitpicking:</strong> When I need to subtract 1 from an expression, I use <code>¯1+expr</code> instead of <code>1-⍨expr</code> because the former reads better to me. This is a personal choice though. Or, if the "subtract 1" appears only for generating <code>0..n-1</code> instead of <code>1..n</code> with <code>⍳</code>, consider using <code>⎕IO←0</code>.</p>

<hr>

<p>Now, <code>splits</code> is creating the interval indices <code>0..20</code>, and except the first 0, each index is mapped to <code>0..9,0..9</code>.</p>

<pre><code>interval index: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
class         : 0 1 2 3 4 5 6 7 8 9  0  1  2  3  4  5  6  7  8  9
</code></pre>

<p>Do you see the pattern? If you discard the unused interval and take modulo 10, you get the right class! Then you can entirely discard the variable <code>classes</code> and extra indexing:</p>

<pre><code>Telephone ← {
  splits ← 1↓ ⎕D, 'AAADGJMPTW'
  10| splits ⍸ ⍵
}
</code></pre>
    </div>