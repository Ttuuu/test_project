<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The code is admirably clear.
Nice annotations.
With these classes,
Chuck Norris wouldn't need a debugger,
he could just stare down the bug until the code confesses.</p>

<pre><code>class Request(NamedTuple):
    method: str
</code></pre>

<p>Maybe list <code>method</code> 2nd, and allow defaulting to <code>'GET'</code>?</p>

<pre><code>    response = yield Request('GET', URL_TEMPLATE.format(id=id))

    try:

        if response.status != 200:
</code></pre>

<p>Ok, nit-picky observation: there's more than one <a href="https://en.wikipedia.org/wiki/List_of_HTTP_status_codes#2xx_Success" rel="nofollow noreferrer">success code</a>,
so one might bury the test in an <code>is_success()</code> helper function.
(I use an API that routinely returns 204 success.)
But this is for pedagogic purposes, and the 200 test is perfect, don't change it.</p>

<p>Broader observation: showing that "stuff which <em>can</em> go wrong after GET" happens
within the <code>try</code> is pretty interesting.
There is a small amount of "ceremony" to access the result.
If this were a production library, rather than pedagogic, I'd be wondering
if we could maybe save clients from looking for 200 status at all,
and just raise appropriate errors if client is asking for bad data.</p>

<p>This would probably need an <code>url_prefix_to_api_name</code> registry map,
so we could identify a given url as being a <code>Joke</code> url,
and could look for a class with the conventional name <code>JokeApiError</code>.
(Clearly the registry would never contain Norris, because:
No statement can catch the ChuckNorrisException.)</p>

<p>The next few lines have boilerplate checks that maybe could be defaulted,
and / or moved into some <code>JokeApi</code> method a user could choose to supply.</p>

<p>The <code>raise</code> in this line:</p>

<pre><code>    raise Return(data['value']['joke'])
</code></pre>

<p>is, ummm, slightly surprising.
I'm sure you have your technical reasons for it.
But maybe it could be a <code>return</code>, or a <code>yield</code>, or simply a method call with side effects?
Or a <code>.close()</code>-style cleanup handler of a <code>with</code> resource manager?
Or simply buried in library code that developers typically won't view?
The <code>raise</code> is just a little jarring, given that this is the success case.</p>

<p>I encourage you to keep pushing on this.
Two ways to win:</p>

<ol>
<li>Write something a little bigger than just joke access, maybe do some CRUD.</li>
<li>Convince one other developer to use your stuff.</li>
</ol>

<p>Both will push your code in the direction of increased maturity,
increased readiness for a 1.0 release.</p>
    </div>