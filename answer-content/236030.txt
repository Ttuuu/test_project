<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A technique that would likely improve this situation is a <a href="https://davidwalsh.name/javascript-debounce-function" rel="nofollow noreferrer"><em>debounced</em> function</a>. That way the function to be run will only run at certain intervals instead of each time the events occur.</p>

<p>From <a href="https://davidwalsh.name/" rel="nofollow noreferrer">the Blog of JavaScript consultant David Walsh</a>:</p>

<blockquote>
  <p>For those of you who don't know what a debounce function does, it limits the rate at which a function can fire. A quick example:  you have a resize listener on the window which does some element dimension calculations and (possibly)  repositions a few elements.  That isn't a heavy task in itself but being repeatedly fired after numerous resizes will really slow your site down.  Why not limit the rate at which the function can fire?</p>
  
  <p>Here's the basic JavaScript debounce function (<a href="https://davidwalsh.name/function-debounce" rel="nofollow noreferrer">as taken from Underscore.js</a>):</p>

<pre><code>// Returns a function, that, as long as it continues to be invoked, will not
// be triggered. The function will be called after it stops being called for
// N milliseconds. If `immediate` is passed, trigger the function on the
// leading edge, instead of the trailing.
function debounce(func, wait, immediate) {
    var timeout;
    return function() {
        var context = this, args = arguments;
        var later = function() {
            timeout = null;
            if (!immediate) func.apply(context, args);
        };
        var callNow = immediate &amp;&amp; !timeout;
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
        if (callNow) func.apply(context, args);
    };
};
</code></pre>
  
  <p><sup><a href="https://davidwalsh.name/javascript-debounce-function" rel="nofollow noreferrer">1</a></sup></p>
</blockquote>

<p>That can be used to create a <em>debounced</em> function that only gets called at an interval - e.g. 250 milliseconds (feel free to adjust to your needs):</p>

<pre><code>var debouncedFunc = debounce(sliderLoop, 250);
</code></pre>

<p>And use that function in the callback of the event handler:</p>

<pre><code>// Fires slider loop every time the value changes, I had to use mousemove as .change() would only fire once the mouse click was relseased.
$(".slider").on("change mousemove", function() {
  debouncedFunc();
});
</code></pre>

<p>That could also be simplified to the following, since the extra lambda function/closure is pointless:</p>

<pre><code>// Fires slider loop every time the value changes, I had to use mousemove as .change() would only fire once the mouse click was relseased.
$(".slider").on("change mousemove", debouncedFunc);
</code></pre>

<p><sup>1</sup><sub><a href="https://davidwalsh.name/javascript-debounce-function" rel="nofollow noreferrer">https://davidwalsh.name/javascript-debounce-function</a></sub></p>
    </div>