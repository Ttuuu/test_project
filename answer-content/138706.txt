<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It depends on what do you understand by <em>better ways to do this</em>. Your approach is the usual way of sorting two lists in Python. But there are, of course, multiple methods which may serve different purposes depending on list length for example.</p>
<h3>Different ways below:</h3>
<pre><code>&gt;&gt;&gt; list1 = [3,2,4,1,1]
&gt;&gt;&gt; list2 = ['three', 'two', 'four', 'one', 'one2']
&gt;&gt;&gt; list1, list2 = zip(*sorted(zip(list1, list2)))
&gt;&gt;&gt; list1
(1, 1, 2, 3, 4)
&gt;&gt;&gt; list2 
('one', 'one2', 'two', 'three', 'four')
</code></pre>
<p>The above is not returning a list, but can be easily fixed:</p>
<pre><code>&gt;&gt;&gt; list1, list2 = (list(t) for t in zip(*sorted(zip(list1, list2))))
&gt;&gt;&gt; list1
[1, 1, 2, 3, 4]
&gt;&gt;&gt; list2
['one', 'one2', 'two', 'three', 'four']
</code></pre>
<p>It's worth noting that the above may sacrifice speed for terseness; the in-place version, which takes up 3 lines, is a tad faster on my machine for small lists:</p>
<pre><code>&gt;&gt;&gt; %timeit zip(*sorted(zip(list1, list2)))
100000 loops, best of 3: 3.3 us per loop
&gt;&gt;&gt; %timeit tups = zip(list1, list2); tups.sort(); zip(*tups)
100000 loops, best of 3: 2.84 us per loop
</code></pre>
<p>On the other hand, for larger lists, the one-line version could be faster:</p>
<pre><code>&gt;&gt;&gt; %timeit zip(*sorted(zip(list1, list2)))
100 loops, best of 3: 8.09 ms per loop
&gt;&gt;&gt; %timeit tups = zip(list1, list2); tups.sort(); zip(*tups)
100 loops, best of 3: 8.51 ms per loop
</code></pre>
<p>I think the <em>zip-based</em> approach is more flexible and is a little more readable, so I prefer it.</p>
    </div>