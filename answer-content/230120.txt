<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You should be validating and sanitizing the variables that are not being parameterized.</p>

<p>When there is a strict set of acceptable values, write an array of whitelisted values and check against that.</p>

<p>If input is coming from a text type input or textarea, then it will be harder to validate, and you may have to settle for stripping html or characters which you deem to be out-of-bounds.</p>

<p>You need to be as ruthless as possible without damaging the user experience because people that may attempt to compromise your system will not be pulling any punches.</p>

<p>Some examples:</p>

<ol>
<li><p>There is only one sort value worth receiving / using in your query.  <code>ASC</code> is just syntactic sugar.  Because the form provides a radio input field, you don't need to bother with trimming whitespace.</p>

<pre><code>$sort = $_POST['sort'] == 'DESC' ? 'DESC' : '';
</code></pre></li>
<li><p>Unless you are accepting the <em>offset</em> and <em>row count</em> as a single value, the limit value MUST be an integer.  Since your form provides a text input field for this, it is possible that a well-intended user may accidentally pass whitespace.  For this reason, it would be a sensible inclusion to trim the value before validating it.</p>

<pre><code>$limit = ctype_digit(trim($_POST['limit'])) ? (int)$_POST['limit'] : '';
</code></pre></li>
<li><p><code>filter</code> and <code>$order</code> come from select input fields.  This means you know exactly which values to expect.  A lookup array will do the job in a tidy fashion.</p>

<pre><code>$filterLookup = ['filter1', 'filter2', 'filter3'];
$filter = in_array($_POST['filter'], $filterLookup) ? $_POST['filter'] : '';
</code></pre>

<p>In your project structure, you might even design a single reference point for <code>filter</code> and <code>order</code> column values so that everything stays in sync.  You wouldn't want your lookup array to deviate from your form's select options -- that would lead to user frustration.</p></li>
</ol>

<hr>

<p>As for how you treat values that do not fall within the predicted range -- that is up to you.  You should inform the user when the request could not be processed due to invalid/missing data and let them know how they can fix up their submission.  In some cases, you may wish to simply ignore faulty values and proceed with the query construction with that segment omitted -- again, that is your call.</p>

<p>p.s. Consider these adjustments for the sake of readability (while this largely comes down to personal style, it is generally a good idea to write code that doesn't require horizontal scrolling to read):</p>

<pre><code>$result = $search-&gt;search(
    $_POST['filter'],
    $_POST['input'],
    $_POST['type'],
    $_POST['order'],
    $_POST['sort'],
    $_POST['limit']
);
</code></pre>

<p>and</p>

<pre><code>function search($filter, $input, $type, $order, $sort, $limit) {
    $stmt = $this-&gt;conn-&gt;prepare(
        "SELECT Title, Type, Youtube, Score, Ratings, Singer, ID
         FROM song
         WHERE $filter LIKE CONCAT('%', ?, '%')
           AND Type = ?
         ORDER BY $order $sort
         LIMIT $limit"
    );
    $stmt-&gt;execute([$input, $type]);
    return $stmt-&gt;fetchall();
}
</code></pre>

<hr>

<p>Regarding your comment about sanitizing limit values, I recommend a min-max sandwich after casting the input as an integer... (<a href="https://3v4l.org/tNfX3" rel="nofollow noreferrer">Demo</a>)</p>

<pre><code>$inputs = ['7', '54', '3', 'foo'];
foreach ($inputs as $input) {
    echo "---\n$input &gt;&gt;&gt; ";
    $sanitized = min(max((int)$input, 5), 50);
    var_dump($sanitized);
}
</code></pre>

<p>Output:</p>

<pre><code>---
7 &gt;&gt;&gt; int(7)
---
54 &gt;&gt;&gt; int(50)
---
3 &gt;&gt;&gt; int(5)
---
foo &gt;&gt;&gt; int(5)
</code></pre>
    </div>