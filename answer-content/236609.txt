<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It's not so much what you do contentwise, allocating and freeing a resource is exactly what a  <code>using</code> and <code>IDisposable</code> is made for.</p>

<p>But the way you do it, is an absolute No-Go.</p>

<p>You do not free ressources contained in your Disposable class. You free ressources in completly different classes, accessed by static properties. And Disposing means "Destroy it" - We don't need it any more. 5 Seconds before self destructions.
It does not mean to Reset something to an original state.</p>

<p><a href="https://docs.microsoft.com/en-us/dotnet/standard/garbage-collection/implementing-dispose" rel="nofollow noreferrer">Your Dispose does not align with the idea of Dispose and is an abuse.</a></p>

<p>You should go with a simple try/finally block. This is made for your purpose.</p>

<pre><code>Console.WriteLine("display with default color");
var cfc = new ConsoleForegroundColor(ConsoleColor.Green);
try
{
    // do something dangerous
    Console.WriteLine("display with green");
}
finally
{
     cfc.Reset(); // this is your Dispose method, just rename it.
}
Console.WriteLine("display with default color");
</code></pre>

<p>Your are right, what happens in code, is exactly the same as in your version, but the expectation, what a reader thinks your code does, is completly different.</p>
    </div>