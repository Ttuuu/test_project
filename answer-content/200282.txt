<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Minor</h1>

<ul>
<li>Consider using the <code>unittest</code> module instead of using input to test</li>
<li>Use a <code>if __name__ == "__main__"</code> guard</li>
<li>Make it a function</li>
<li>Don't <code>print</code> but <code>return</code> variables</li>
</ul>

<h1>Timing improvements</h1>

<blockquote>
  <p><code>l.count(i) == 2</code></p>
</blockquote>

<p>It will search the entire list from the start. </p>

<p>Let's take a sample input (worst case) of <code>[2, 3, 4, 5, 6, 7, 8, 1, 1, 2, 2]</code>, it will search the entire list 10 times!</p>

<p>This can be done in \$ O(n) \$ (worst case), because we know</p>

<blockquote>
  <p>All elements of the array are in range 1 to n</p>
</blockquote>

<ol>
<li>You can create a list <code>temp</code> with length <code>n</code> filling it with <code>None</code> or <code>0</code></li>
<li>For every number in the array, check if the value in <code>temp[i]</code> is empty (<code>0</code> or <code>None</code>)

<ul>
<li>If it is empty put the value on that position</li>
<li>If the number is the same as the value of the temp list, we have seen it before</li>
</ul></li>
</ol>

<h1>Revised Code</h1>

<pre><code>def find_repeating(lst):
    counts = [None] * len(lst)
    for i in lst:
        if counts[i] is None:
            counts[i] = i
        elif i == counts[i]:
            yield i
</code></pre>

<p><em>Note</em></p>

<p>This has the disadvantage of continuing to loop after the numbers are found, to avoid this you could add the elements to another array and return when the length of the array is <code>2</code>.</p>

<p>It will not make the most "beautiful" code, but it will be faster than <a href="https://codereview.stackexchange.com/questions/200277/find-the-repeated-elements-in-a-list/200283#200283">@Peilonrayz</a>'s answer for anything but worst case, since that requires to loop through the entire array.</p>

<pre><code>def find_repeating(lst, count=2):
    ret = []
    counts = [None] * len(lst)
    for i in lst:
        if counts[i] is None:
            counts[i] = i
        elif i == counts[i]:
            ret += [i]
            if len(ret) == count:
                return ret
</code></pre>

<h1>Timing all solutions</h1>

<p><a href="https://i.stack.imgur.com/2vlDv.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/2vlDv.png" alt="enter image description here"></a></p>
    </div>