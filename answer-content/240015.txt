<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Pathlib</h2>

<p>Rather than accepting <code>csv_filename</code> as a string, accept it as a <code>Path</code>. Then</p>

<pre><code>with open(csv_filename, 'r') as file:
</code></pre>

<p>becomes</p>

<pre><code>with csv_filename.open() as file:
</code></pre>

<h2>Generator</h2>

<p>Turn <code>read_timestamps_from_csv</code> into a generator that yields 2-tuples:</p>

<pre><code>from datetime import datetime
# ...
DATE_FMT = '%Y-%m-%d %H:%M'

def read_timestamps_from_csv(csv_filename: Path, delim: str=',') -&gt; Iterable[Tuple[datetime, datetime]]:
    with csv_filename.open() as file:
        for line in file:

            # skip header
            if 'task' in line:
                continue

            try:
                start_str, stop_str = line.split(delim)[3:5]
                start_time = datetime.strptime(start_str, DATE_FMT)
                stop_time = datetime.strptime(stop_str, DATE_FMT)
                yield start_time, stop_time
            except Exception:
                print(f'Unable to parse this line: "{line}"')
</code></pre>

<p>Also note:</p>

<ul>
<li>Factor out a formatting constant</li>
<li>Importing of the <code>datetime</code> symbol</li>
<li>Never <code>except</code>; at least catch an <code>Exception</code> if not a more narrow type</li>
<li>Some type hints</li>
</ul>

<h2><code>summarize_timestamps</code> / <code>date_is_present</code></h2>

<p>This:</p>

<pre><code>for summary_stamp in summary_stamps:
    if summary_stamp['date'] == timestamp.date():
            return True
</code></pre>

<p>is a search in linear time - O(n) complexity, which is slow. To reduce this to constant time, or O(1), use a <code>set</code> of dates and the <code>in</code> operator; or alternately maintain a dictionary whose keys are the dates.</p>

<p>The dictionary approach would simplify your code in <code>summarize_timestamps</code>. You have two loops. The first loop would still need to keep a dictionary since you're going back and mutating entries before being able to yield them.</p>

<p>Then, your last loop can further mutate to add the break field and yield there.</p>

<p>This can be more simplified if - instead of using a dictionary - you use an actual class, with attribute of <code>date</code>, <code>start</code>, <code>stop</code> and <code>total</code>. Also, this loop:</p>

<pre><code>for stamp_pair in timestamp_pairs:
</code></pre>

<p>should immediately unpack that pair, i.e.</p>

<pre><code>for start, stop in timestamp_pairs:
</code></pre>

<h2>Time math</h2>

<pre><code>    summary_stamps[s]['pause_min'], _ = divmod(pause_time.seconds, 60)
</code></pre>

<p>is a red flag.</p>

<p>You're throwing out the second return value from <code>divmod</code>, so why call it at all? If you still wanted to do your own math, just use integer division - <code>//</code>. However, you should nearly never be doing your own time math. </p>

<p>This is one of the many things that C# does better out-of-the-box than Python, but anyway: reading <a href="https://docs.python.org/3/library/datetime.html#datetime.timedelta.total_seconds" rel="nofollow noreferrer">this documentation</a>, the recommended method (without bringing in a third-party lib) is:</p>

<pre><code>summary_stamps[s]['pause_min'] = pause_time // timedelta(minutes=1)
</code></pre>

<p>The same goes for </p>

<pre><code>    total_hours, rem = divmod(sumst['total'].seconds, 3600)
    total_minutes, _ = divmod(rem, 60)
</code></pre>

<h2>Redundant <code>if</code></h2>

<p>This:</p>

<pre><code>if summary_stamps == []:
    return False
</code></pre>

<p>should get deleted, because if that list is empty, the iteration will execute zero times and the return will be the same.</p>

<p>However, the whole function can be replaced with</p>

<pre><code>td = timestamp.date()
return any(stamp['date'] == td for stamp in summary_stamps)
</code></pre>

<h2>Sorting</h2>

<p>Have you tried</p>

<pre><code>return sorted(entry_list, key=itemgetter(0))
</code></pre>

<p>without the <code>key</code>? The default behaviour is to sort on the first item of a tuple.</p>
    </div>