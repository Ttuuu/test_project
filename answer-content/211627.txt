<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Way way too complex</h1>

<p>One way to help workout how to solve a problem is to solve it in your head (or on paper) first. That way you know the problem from the top to the bottom. Then use that approach in your script. </p>

<p>The code looks like you started at the top with no clear idea of the solution, and solve many separate problems as you encountered them. The result is unreadable and way to complex. </p>

<p>I could not make a good assessment due to its complexity and bugs.</p>

<h2>Your code does not run.</h2>

<ul>
<li>The name <code>aggregateScope</code> in <code>aggregates</code> should be <code>aggregate</code></li>
<li><code>sum</code> throws <code>TypeError map is not a function</code></li>
</ul>

<p>Patching those problems it still did not run.</p>

<p>The hell of a zillion iterators is not easy to traverse so I stopped trying to work it out at that point.</p>

<h2>Questions.</h2>

<p>You have some questions.</p>

<blockquote>
  <p>what are alternative ways of breaking down the problem?</p>
</blockquote>

<p>Its just a set of nested arrays and named objects. The names are fixed, so its just a process of stepping over each array in turn storing the counts in a named map (see example) </p>

<blockquote>
  <p>what is it's Big O complexity? </p>
</blockquote>

<p>I am guessing its It more than <span class="math-container">\$O(n)\$</span> and less than or equal to <span class="math-container">\$O(n^2)\$</span> where <span class="math-container">\$n\$</span> is the number of <code>category</code> items. As there is only a small sample dataset and the code does not work I can not give a accurate evaluation.</p>

<p>I did count 18 different iteration function calls throughout your code. With 2 or 7 iterations each, nested to about 6 levels. If I use that and average <code>(2 + 7) / 2 = 4.5</code> per iterator then its 4.5<sup>6</sup> approx steps, so that's a big <span class="math-container">\$O(n^3)\$</span> for the given dataset of 11 category items</p>

<blockquote>
  <p>Can it be reduced?</p>
</blockquote>

<p>Yes, it can be O(n) as there is no need to search, and no need to compare items (see example).</p>

<blockquote>
  <p>are there language features (JS/ES6) that can make this more idiomatic?</p>
</blockquote>

<ul>
<li>Use <code>for of</code> loops to iterate.</li>
<li>Use bracket notations to create named properties. </li>
<li>Keep your functions ordered. From bottom to top, it makes it easier to locate functions and follow the code.</li>
<li>No more than one iterator per line. You quickly lose track of how complex it gets.</li>
</ul>

<p>Is all that comes to mind, that and  K.I.S.S. </p>

<h2>An alternative example solution</h2>

<p>I am not that conventional when it comes to code, so not quite idiomatic. less is good in my book and helps find the optimal <span class="math-container">\$O(n)\$</span> solution.</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>function aggregateTransactionCategories(data, types) {
  const result = {};
  const mapCategories = (type, transactions) =&gt; {
    for (const cats of transactions) { 
      const name = type + "_" + cats.category;
      result[name] = result[name] ? result[name] + 1 : 1;
    }    
  }
  for (const type of types) {
    for (const entries of data) { 
      for (const entry of entries[type]) { 
        mapCategories(type, entry.transactions);
      }
    }
  }
  return result;
}

setTimeout(() =&gt;
    log(aggregateTransactionCategories( data,  ["groups", "users"]))
    ,0
);




const data = [{
    users: [
      { id: "07bd", transactions: [{category: "purchase"}, {category: "unknown"}] },
      { id: "40aa", transactions: [{category: "sale"}, {category: "unknown"}] }
    ],
    groups: [
      { id: "00c6", transactions: [{category: "atm"}, {category: "cash"}] },
      { id: "eb95", transactions: [{category: "atm"}, {category: "cash"}] }
    ]
  }, {
    users: [
      { id: "af09", transactions: [{category: "bill"}] }
    ],
    groups: [
      { id: "c5ba", transactions: [{category: "fee"}, {category: "cash"}] }
    ]
  }
];


//Just displays the result and not related to the problem
function log(data) {
  for(const [name, value] of Object.entries(data)) {
    displayResult.appendChild(Object.assign(
      document.createElement("div"),{ 
        textContent : name + ": " + value + ","
      }
    ))
  }
}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;code id="displayResult"&gt;&lt;/code&gt;</code></pre>
</div>
</div>

    </div>