<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>My answer is an upgrade of Henrik's answer. (so it's a review of a review lol)</p>

<p>Dividing an <code>int</code> by 2 is the same as shifting the bits 1 to the right. I'd expect a good compiler to make such optimizations automatically, but I think it's still worth mentioning.</p>

<p>I got rid of the if statement at the start, which in most cases (non 0 input) is a waste of time. The <code>do...while</code> removes the need for handling the 0 case differently.</p>

<p>I start the count from -1 to not have to do a subtraction in the end.</p>

<p>Having a <code>do...while</code> loop means one less execution of the while conditional statement, and I also put the bit shift there to not run it more times than necessary.</p>

<pre><code>public int countSteps(int num)
{
   int count = -1;
   do
   {
      count += 1 + (num &amp; 1);
   } while ( (num &gt;&gt;= 1) != 0);
   return count;
}
</code></pre>
    </div>