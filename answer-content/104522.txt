<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You can get rid of that <code>if</code> test by defining a function that produces (or raises) the error message:</p>

<pre><code>In [19]: def foo():
   ....:     print "ERROR"

In [20]: optionMenu.get('test',foo)()
ERROR

In [21]: optionMenu.get(1,foo)()
option one
</code></pre>

<p>That function could be a <code>selections</code> method</p>

<pre><code>class Selections...   # Capitolize classes
    ....
    def error():
       print 'error'

 optionMenu.get(test, menuSelection.error)()
</code></pre>

<p>In other words, if you want the <code>.get</code> to return a callable, regardless of what key you give it, then the default should itself be a callable.</p>

<p>There formatting and documentation issues, but none of that falls under the heading of 'optimize'.</p>

<p>Instead of the repeated <code>print</code> you could format a input text with triple quotes:</p>

<pre><code>prompt = """
=========================
input 
options:
   one
   two 
   ...
=========================
"""
....
print prompt
</code></pre>

<p>I'd be tempted to make the <code>optionMenu</code> dictionary part of the <code>Selections</code> class, may be as a class variable.  But that depends a lot on whether <code>Selections</code> is used just for this input, or whether it has other purposes.</p>

<p>As a further exercise you might try replacing the interactive input with a commandline input.  In other words, use something like <code>argparse</code> to parse <code>sys.argv</code>, and then act on one of the <code>Selections</code>.</p>
    </div>