<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It sounds like the thing you're trying to do is <em>somewhat</em> insane. With 40k first names to search for, false positives are inevitable. At the same time, with only 40k names, false <em>negatives</em> are also inevitable. <a href="https://www.kalzumeus.com/2010/06/17/falsehoods-programmers-believe-about-names/" rel="nofollow noreferrer">People's names are untidy</a>; hopefully you have plans to accommodate. Even when you get <em>correct</em> matches for a "first" and "last" name, as your example email shows, there's no guarantee that they'll be the first and last names <em>of the same person</em>.</p>
<p>Maybe someone with experience in natural-language-processing AI would be able to solve your problem in a robust way. More likely you've resigned yourself to a solution that simply <em>isn't</em> robust. You still pretty definitely need case-sensitivity and "whole word" matching.</p>
<p>I'm not convinced by the example you give of a false positive. The pandas function you're using is regex-based. <code>r'tero'</code> does <em>not</em> match <code>'t er o'</code>; it <em>does</em> match <code>'interoperability'</code>. With name lists as long as you're using, it seems more likely that you over-looked some other match in the email in question. I would kinda expect just a few of the names to be responsible for the majority of false-positives; outputting the matched text will help you identify them.</p>
<ul>
<li>Case-sensitive regex matching should be the default.</li>
<li>I think <code>\b...\b</code> as a regex pattern will give the kind of "whole word" matching you need.</li>
<li><a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.str.extract.html" rel="nofollow noreferrer">pandas.extract</a> will do the capturing.</li>
</ul>
<p>Given the size of your datasets, you may be a bit concerned with the performance. Or you may not, it's up to you.</p>
<p>I haven't tested this at all:</p>
<pre class="lang-py prettyprint-override"><code># Import datasets and create lists/variables
import pandas as pd
from pandas import ExcelWriter
from typing import Iterable

# Document, sheet, and column names:
names_source_file = 'names.xlsx'
first_names_sheet = 'Alle Navne'
first_names_column = 'Names'
last_names_sheet = 'Frie Efternavne'
last_names_column = 'Frie Efternavne'
subject_file = 'Entreprise Beskeder.xlsx'
subject_sheet = 'dataark'
subject_column = 'Besked'
output_first_name = 'Navner'
output_last_name = 'Efternavner'
output_file = 'PythonExport.xlsx'

# Build (very large!) search patterns:
first_names_df = pd.read_excel(names_file, sheet_name=first_names_sheet)
first_names: Iterable[str] = namesdf[first_names_column]
first_names_regex = '''\b{}\b'''.format('|'.join(first_names))
last_names_df = pd.read_excel(names_file, sheet_name=last_names_sheet)
last_names: Iterable[str] = lastnamesdf[last_names_column]
last_names_regex = '''\b{}\b'''.format('|'.join(last_names))

# Import dataset and drop NULLS:
data_frame = pd.read_excel(subject_file, sheet_name=subject_sheet)
data_frame[subject_column].dropna(inplace=True)

# Add columns for found first and last names:
data_frame[output_first_name] = data_frame[subject_column].str.extract(
    first_names_regex,
    expand=False
)
data_frame[output_last_name] = data_frame[subject_column].str.extract(
    last_names_regex,
    expand=False
)

# Save the result
writer = ExcelWriter(output_file)
df.to_excel(writer)
writer.save()
</code></pre>
<p>One obvious problem that I still haven't talked about is that there may be multiple name matches in a given subject. Assuming that you care about multiple matches, you can probably do something with <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.str.extractall.html#pandas.Series.str.extractall" rel="nofollow noreferrer">extractall</a>.</p>
    </div>