<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Ways of improving:</p>

<p><strong><em>Naming issues</em></strong></p>

<p>A lot of Python naming conventions violations. A <em>proper</em> names should be given to identifiers and functions/methods. <br>Some of those are:
<code>Presearch</code> --&gt; <code>pre_search</code>, <code>Postsearch</code> --&gt; <code>post_search</code>, <code>isempty</code> --&gt; <code>is_empty</code>, <code>exporttojson</code> --&gt; <code>export_tojson</code> etc.<br></p>

<p>As for <code>Id = arg[2]</code>: the intention of preventing shadowing the reserved <code>id</code> function is understood, but <code>Id</code> is not an option. Adding a trailing underscore for such kind of variable would be acceptable - <code>id_ = arg[2]</code>.</p>

<p>Even if you decided to extend a third-party <code>wx.Frame</code> class you should select a consistent way of naming methods in your custom <code>Frame</code> class to <strong>not</strong> mix method naming style as <code>def search ...</code>, <code>def Display</code>, <code>def addnew</code> and so on.</p>

<p><strong><em>Conditions</em></strong></p>

<ul>
<li><p><code>is_empty</code> function.<br>
The condition <code>os.stat(self.jsonfile).st_size == 0</code> is the same as <code>os.stat(self.jsonfile).st_size</code> (file size can not be less than <code>0</code>)</p></li>
<li><p><code>export_tojson</code> function. The condition:</p>

<pre><code>if name.GetValue() != '' and age.GetValue() != '' and Id.GetValue() != '':
    if len(data) == 0 and name.GetValue() != '':
</code></pre></li>
</ul>

<p>contains a redundant check <code>name.GetValue() != ''</code> (inner level) as the outer check already ensures it</p>

<ul>
<li><code>if super().is_empty() is False:</code> is a "noisy" version of <code>if not super().is_empty():</code> , use the 2nd explicit and short version.</li>
</ul>

<p><strong><em>Prefer Multiple Assignment Unpacking Over Indexing</em></strong><br>
Instead of:</p>

<pre><code>    name = arg[0]
    age = arg[1]
    Id = arg[2]
</code></pre>

<p>we use </p>

<pre><code>   name, age, id_ = arg[:3]
</code></pre>

<p>Unpacking has less visual noise than accessing the tuple's indexes, and it often requires fewer lines.</p>

<hr>

<p>Setting values for <em>"found"</em> person:</p>

<pre><code>arg[0].SetValue(f["Name"])
arg[1].SetValue(f["Age"])
arg[2].SetValue(f["Id"])
</code></pre>

<p>and for <em>"not found"</em> person:</p>

<pre><code>arg[1].SetValue("---")
arg[2].SetValue("---")
arg[3].SetStatusText("Not Found!")
</code></pre>

<p>are repeated across <code>..._search</code> function and could potentially be extracted to separate functions. </p>
    </div>