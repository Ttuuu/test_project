<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>I am new to python; I only know at most the loops,list comprehension,
  functions, and some class. I am sure this problem can be solved more
  simply.</p>
  
  <p>...</p>
  
  <p>Is there an improvement I can make with my current knowledge? If not,
  what should I be learning about next?</p>
</blockquote>

<p>Loops and arrays are all you really need to solve almost any Project Euler challenge. The only exceptions are the ones which also require reading an input file. The point of PE is not to push your knowledge of language features, but to push your mathematical skills and knowledge of data structures and algorithms.</p>

<p>I would advise you to solve at least 40 of the first 50 challenges before you start looking at challenges beyond 100, because the early challenges introduce key techniques which you will use many times in later challenges. Trying to solve #378 before #12 is simply doing things in the wrong order.</p>

<p>The most important of the key techniques is <a href="https://en.wikipedia.org/wiki/Dynamic_programming#Computer_programming" rel="noreferrer"><strong>dynamic programming</strong></a>. So many PE problems can only be solved in a reasonable time by exploiting shared structure. In this challenge, for example, you use the <a href="http://oeis.org/A000005" rel="noreferrer">"number of divisors" function</a> <span class="math-container">\$d(n)\$</span>. The structure of this function can be summed up as <span class="math-container">$$\begin{align}
d(p^a) &amp;= a+1&amp;\qquad \textrm{when }p\textrm{ is prime} \\
d(mn) &amp;=d(m)d(n)&amp;\qquad \textrm{when }\gcd(m,n)=1
\end{align}$$</span>
Exploiting that structure by adapting the sieve of Eratosphenes will allow you to calculate an array containing <code>dt(n)</code> for every <span class="math-container">\$1 \le n \le 60000000\$</span> in less than a minute.</p>

<p>Similarly, exploiting the structure of <span class="math-container">\$1 ≤ i &lt; j &lt; k ≤ n\$</span> and <span class="math-container">\$\mathit{dT}(i) &gt; \mathit{dT}(j) &gt; \mathit{dT}(k)\$</span> will allow you to reduce the current <span class="math-container">\$O(n^3)\$</span> runtime of that accumulation phase to <span class="math-container">\$O(nw)\$</span> where <span class="math-container">\$w = \max \{dT(i) : 1 \le i \le n\}\$</span>. That's enough to solve the problem in about 40 minutes, using only basic data structures.</p>

<p>To solve the problem in under two minutes you will need an advanced data structure, but that's more than enough spoiler. Solve the problem at all and you'll get access to the forum thread where people explain their solutions.</p>
    </div>