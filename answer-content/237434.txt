<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>We're missing some required header includes:</p>

<pre><code>#include &lt;fstream&gt;
#include &lt;memory&gt;
#include &lt;regex&gt;
#include &lt;string&gt;
#include &lt;unordered_map&gt;
#include &lt;utility&gt;
</code></pre>

<hr>

<p>The code doesn't compile until we give <code>IniNonCopyable</code> an accessible default constructor:</p>

<pre><code>protected:
    IniNonCopyable() = default;
</code></pre>

<p>Classes that inherit from <code>IniNonCopyable</code> should inherit it privately.</p>

<hr>

<p>Names that begin with underscore followed by an uppercase letter are <em>reserved for any purpose</em>, which means that they may be pre-defined as macros, leading to very obscure bugs; avoid that naming convention.</p>

<hr>

<p>It seems strange that <code>IniEntry</code> can store <code>float</code> but not <code>double</code>; similarly, <code>char*</code> but not <code>std::string</code>.</p>

<p>Its move and copy constructors and assignment, and destructor, all add no value and should be omitted.</p>

<hr>

<p>Modern C++ style prefers <code>using</code> to <code>typedef</code>:</p>

<pre><code>using ContainerElement_t = std::shared_ptr&lt;Element_t&gt;;
using ContainerKey_t = std::string;
using Container_t = std::unordered_map&lt;ContainerKey_t, ContainerElement_t&gt;;
</code></pre>

<p>This puts the type being defined on the left-hand side, consistently with other C++ definitions.</p>

<p>Be careful defining types that end with <code>_t</code>; double-check that these names are not reserved as they are in C.</p>

<hr>

<p>We have made the code much harder to test by not providing load/save methods that work on an already opened stream - we could use those to write and read an in-memory <code>std::strstream</code> object.  Keep the filename interface as a slim wrapper.</p>

<hr>

<p>When we load and save, we check the state of the stream immediately after opening, but we should also check at the end, after closing.  Note that we'll require an explicit <code>close()</code> call if we want to be sure that we've fully checked the stream state.</p>
    </div>