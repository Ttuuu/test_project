<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Scheduling &amp; Latency</h3>
<p>One single handler could block all other handlers by performing a long-running calculation:</p>
<pre><code>public void Handle(SavingChangesEvent message)
{
    Thread.Sleep(10000); // long running code ..
}
</code></pre>
<p>While this is the exact same behavior of the default Event Pattern in C#, you might expect an aggregator to be able to work around this - especially since the method is called <code>PublishAsync</code>. It's not the best design decision to have this method perform both synchronous <code>IHandle&lt;T&gt;</code> and asynchronous <code>IHandleAsync&lt;T&gt;</code> event handler notifications.</p>
<p>In addition, if you have a single listener on <code>EventT1</code> and 1000 listeners on <code>EventT2</code>, you'd always loop all those listeners (even twice in your code) to find the listeners <code>OfType&lt;RequestedType&gt;()</code>. Using one container list for all listeners is something I would try to avoid. A dictionary by <code>Type</code> and its listeners is a better approach.</p>
<h3>Thread-Safety</h3>
<p>While <code>WeakReferenceList</code> is thread-safe when adding and removing items, enumerating the items while adding, removing items concurrently is not. You'd have to implement a custom threading mechanism that safeguards against registration during event notification.</p>
<h3>Error-Handling</h3>
<p>Any error in a synchronous-aware handler exits notifications early. Since the synchronous notifications take priority over the asynchronous ones, these won't even be notified. Perhaps implementing an <code>UnobservedExceptionHandler</code> could help you make a robust design.</p>
<h3>Micro-optimisations</h3>
<p>Filtering out <code>Where(t =&gt; t.Status != TaskStatus.RanToCompletion)</code> and returning <code>Task.CompletedTask</code> when <code>handler.Any()</code> is false, is not going to gain you much. In fact, in between checking the status and returning the completed task, the status may have already been changed. I would disregard the status and always return <code>return Task.WhenAll(handlers)</code>. Let the waiters handle the status, which is built in using <code>async</code>/<code>await</code>.</p>
<h3>Ambiguously-defined handlers</h3>
<p>Handlers that implement both interfaces are not able to define which of the interfaces they want to see handled. By default, both their handlers will be notified. Is this as designed or should more fine-grained registration be allowed?</p>
<h3>Weak Reference Pattern</h3>
<p>I am not sure using weak references is the best design decision here. According to <a href="https://docs.microsoft.com/en-us/dotnet/standard/garbage-collection/weak-references" rel="nofollow noreferrer">Microsoft</a>:</p>
<blockquote>
<p>Avoid using weak references as an automatic solution to memory
management problems. Instead, develop an effective caching policy for
handling your application's objects.</p>
</blockquote>
<p>And I would agree. Instead I would use registration and deregistration methods.</p>
    </div>