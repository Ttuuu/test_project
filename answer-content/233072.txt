<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3><em>Boosting performance</em></h3>

<p>The initial approach creates a 2-dimensional list of empty lists beforehand and performs 2 538 096 expensive <code>list.append</code> operations.</p>

<p>To make it go faster and more efficiently we'll go through 2 steps:</p>

<ul>
<li>schedule a generator/iterator yielding a sequence of all the needed values</li>
<li>generate <code>numpy</code> array from the scheduled <em>generaor</em> with convenient <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.fromiter.html" rel="nofollow noreferrer"><code>numpy.fromiter</code></a> routine and immediately giving a new shape to the array with <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.reshape.html" rel="nofollow noreferrer"><code>numpy.reshape</code></a> routine (assuming that <code>len(protein_sequence)</code> points to number of <em>rows</em> and <code>len(rna_sequence)</code> is a number of <em>columns</em>)</li>
</ul>

<hr>

<p>The final optimized <strong><code>affinity_matrix</code></strong> function:</p>

<pre><code>def affinity_matrix(protein_sequence, rna_sequence):
    it = (scales[base][prot] for prot in protein_sequence for base in rna_sequence)
    return np.fromiter(it, dtype=float).reshape(len(protein_sequence), len(rna_sequence))
</code></pre>

<hr>

<p>Let's move to tests. I've renamed the old function to <code>affinity_matrix_old</code> for comparison.</p>

<pre><code>&gt;&gt;&gt; from timeit import timeit
&gt;&gt;&gt; timeit('affinity_matrix_old(protein_sequence, rna_sequence)', setup='from __main__ import affinity_matrix_old, protein_sequence, rna_sequence', number=10)
3.1148553189996164
&gt;&gt;&gt; timeit('affinity_matrix(protein_sequence, rna_sequence)', setup='from __main__ import affinity_matrix, protein_sequence, rna_sequence', number=10)
1.9052914250059985
</code></pre>

<hr>

<p>The resulting array looks as:</p>

<pre><code>&gt;&gt;&gt; affinity_matrix(protein_sequence, rna_sequence)
array([[-0.093239, -0.08656 , -0.093239, ..., -0.08656 ,  0.351179,
        -0.093239],
       [-0.187549, -0.189412, -0.187549, ..., -0.189412,  0.240871,
        -0.187549],
       [-0.068299, -0.357084, -0.068299, ..., -0.357084,  0.31803 ,
        -0.068299],
       ...,
       [-0.064125, -0.016438, -0.064125, ..., -0.016438, -0.084679,
        -0.064125],
       [-0.103534, -0.170978, -0.103534, ..., -0.170978,  0.130008,
        -0.103534],
       [-0.126037,  0.248514, -0.126037, ...,  0.248514, -0.078486,
        -0.126037]])
</code></pre>
    </div>