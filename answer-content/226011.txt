<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>endTerms</h3>

<p>When a word ends with an endTerm, think you need to include an START or END symbol in adjList.  Most words can appear anywhere in a sentence.  So it is unlikely that you can end a sentence only when words don't have any follow-on words.  Include the START/END symbol in adjList and the Markov process can also end a sentence.  </p>

<h3>the standard library</h3>

<p><code>collections.defaultdict</code> provides a dictionary that when you attempt to access a new key automatically initializes the new key to a default value.</p>

<p><code>collections.Counter</code> provides a dictionary that counts things.</p>

<p><code>random.choices</code> selects items from a population according to specified weights. </p>

<pre><code>import collections
import random

class MarkovChain:
    START = ""

    def __init__(self, file):
        adjList = collections.defaultdict(collections.Counter)

        # this inserts START into the defaultdict
        adjList[MarkovChain.START]

        prev = MarkovChain.START

        for line in file:
            for word in line.split():
                endsTerm = word[-1] in ('.', '?', '!')

                if (endsTerm):
                    word = word[:-1]

                adjList[prev].update([word])

                if endsTerm:
                    # mark the end of a sentence
                    adjList[word].update([MarkovChain.START])
                    prev = MarkovChain.START
                else:
                    prev = word

        # convert defaultdict to a regular dict
        # the values are a tuple: ([follow words], [counts])
        # for use in random.choices() in chooseNextWord()
        self.adjList = {k:(list(v.keys()), list(v.values()))
                        for k,v in adjList.items()}

        #print(self.adjList)


    def chooseNextWord(self, word):
        # random.choices returns a list, hence the [0]
        return random.choices(*self.adjList[word])[0]


    def genSentence(self, limit = 0):
        sentence = []
        curWord = MarkovChain.START

        while True:
            curWord = self.chooseNextWord(curWord)
            sentence.append(curWord)

            if 0 &lt; limit &lt; len(sentence) or curWord == MarkovChain.START:
                break

        return ' '.join(sentence).strip()
</code></pre>
    </div>