<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>let time: &amp;[&amp;str] = &amp;["12:00", "14:00", "18:00", "19:00"];
let mut stations = HashMap::new();
stations.insert(
    reserve_request::Stations {
        start: "Tokyo",
        destination: "Kyoto",
    },
    time,
);
</code></pre>

<p>Ok, I assume you tried putting the value assigned to <code>time</code> directly in the expression, but were unable to resolve the resulting error message. The problem is that expression has the type <code>[&amp;str; 4]</code>, an array. But you want a slice: <code>&amp;[&amp;str]</code> instead. There a few ways to resolve this:</p>

<p>Firstly, you can specify the type of the HashMap:</p>

<pre><code>let mut stations: HashMap&lt;reserve_request::Stations, &amp;[&amp;str]&gt; = HashMap::new();
stations.insert(
    reserve_request::Stations {
        start: "Tokyo",
        destination: "Kyoto",
    },
    &amp;["12:00", "14:00", "18:00", "19:00"]
);
</code></pre>

<p>This way, Rust will infer what type you actually wanted at convert the reference to an array into a slice.</p>

<p>Alternatively, you can manually request a slice by called <code>.as_ref()</code> on the array:</p>

<pre><code>let mut stations = HashMap::new();
stations.insert(
    reserve_request::Stations {
        start: "Tokyo",
        destination: "Kyoto",
    },
    ["12:00", "14:00", "18:00", "19:00"].as_ref()
);
</code></pre>

<p>However, a better approach would be to not use arrays at all. Rust arrays are really just not that useful, and you almost always should prefer to use a Vec. Furthermore, if you implement loading from JSON as your comment suggests, then you'll certainly get a Vec and not a slice. </p>

<pre><code>let mut stations = HashMap::new();
stations.insert(
    reserve_request::Stations {
        start: "Tokyo",
        destination: "Kyoto",
    },
    vec!["12:00", "14:00", "18:00", "19:00"]
);
</code></pre>

<p>Moving on the second part where you had an issue:</p>

<pre><code>    let times = timetable.get(&amp;st);
    let default: &amp;[&amp;str] = &amp;[];
</code></pre>

<p>Firstly, we have the same problem as before with a (in this case empty) array. It can be solved in the same way as above.</p>

<pre><code>    let result = match times {
        Some(r) =&gt; r,
        None =&gt; default,
    };
</code></pre>

<p><code>Option</code> has a method, <code>unwrap_or</code> which does the same thing:</p>

<pre><code>    let result = timetable.get(&amp;st).unwrap_or([].as_slice());
</code></pre>

<p>However, a better approach would be use an <code>if let</code> statement.</p>

<pre><code>    if let Some(times) = timetable.get(&amp;st) {
        for t in times {
            if *t == self.time {
                return true;
            }
        }
    }
</code></pre>

<p>This way the loop over times only runs if it was present and you don't need to create and iterate over an empty slice.</p>

<p>However, if you use Vec instead of slices as I suggest, the inner loop can be written as a call to the contains function:</p>

<pre><code>        if times.contains(&amp;self.time) {
            return true;
        }
</code></pre>

<p>Or you can replace the whole function with:</p>

<pre><code>        timetable
            .get(&amp;Stations {
                start: self.start,
                destination: self.destination
            })
            .map_or(false, |times| times.contains(&amp;self.time))
</code></pre>

<p>map_or returns false if the time table was not found, otherwise it calls the closure which checks if times contains the appropriate time.</p>
    </div>