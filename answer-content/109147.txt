<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Efficient and elegant:</p>

<pre><code>tf = pd.DataFrame([
        {'id': 1, 'nested': {'a': 1, 'b': 2} },
        {'id': 2, 'nested': {'a': 2, 'b': 4} },
        {'id': 3, 'nested': {'a': 3, 'b': 6} },
        {'id': 4, 'nested': {'a': 4}},
    ])

def unpack(df, column, fillna=None):
    ret = None
    if fillna is None:
        ret = pd.concat([df, pd.DataFrame((d for idx, d in df[column].iteritems()))], axis=1)
        del ret[column]
    else:
        ret = pd.concat([df, pd.DataFrame((d for idx, d in df[column].iteritems())).fillna(fillna)], axis=1)
        del ret[column]
    return ret

unpack(tf, 'nested', 0)
</code></pre>

<p>will yield</p>

<pre><code>   id  a  b
0   1  1  2
1   2  2  4
2   3  3  6
3   4  4  0
</code></pre>

<p>and seems to be quite efficient</p>

<pre><code>tf = pd.DataFrame([
enter code here
        {'id': i, 'nested': {'a': i, 'b': i*2} }
        for i in xrange(100000)
    ])
%timeit unpack(tf, 'nested') # gives 
10 loops, best of 3: 95 ms per loop
</code></pre>

<p>If you want to create a projection (select subset of the keys in the nested dict) you can use <code>apply</code> before unpack or a column projection on the dataframe created inside unpack.</p>

<p>The main advantages of the above solution are:</p>

<ul>
<li>it is much more generic - does not depend on the keys in your nested document</li>
<li>it is efficient - uses (presumably optimized) pandas methods where-ever possible and generators/iterators </li>
<li>handles keys that do not exist only in some nested documents and lets you specify the way they should be handled (fillna value or NaN)</li>
<li>can be converted to a one-liner for the sake of brevity </li>
<li>does not reinvent anything</li>
<li>uses naming consistent with other libraries (dato (graphlab create), SFrame.unpack method)</li>
</ul>
    </div>