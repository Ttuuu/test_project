<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You can accept arguments from the command line.</p>

<p>You don't need to differentiate between decode and encode, you can simply provide negative shift.</p>

<p>You can hide the big lambda into a <code>char -&gt; char</code> function.</p>

<p>You actually don't need the <code>string -&gt; string</code> nor <code>vector -&gt; vector</code> implementations.</p>

<p><code>encodeStr</code> is a terrible name :)</p>

<p>You can leverage the <code>char -&gt; char</code> implementation and copy <code>istream_iterator&lt;char&gt;</code> to <code>ostream_iterator&lt;char&gt;</code> char by char, and doing it over <code>std::cin</code> and <code>std::cout</code> will give you the ability to change the files as needed (through pipes) or use standard input / output by default.</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;algorithm&gt;
#include &lt;iterator&gt;
#include &lt;sstream&gt;

const unsigned char caesar_range = 'Z' - 'A' + 1;

char caesar_cipher(char c, int shift)
{
    char offset;
    if (c &gt;= 'a' &amp;&amp; c &lt;= 'z') offset = 'a';
    else if (c &gt;= 'A' &amp;&amp; c &lt;= 'Z') offset = 'A';
    else return c;

    shift = shift % caesar_range;
    auto base = c - offset + shift;
    if (base &lt; 0) {
        base = caesar_range + base;
    }
    return base % caesar_range + offset; 
}

void caesar_usage()
{
    std::cout &lt;&lt; "Usage caesar &lt;shift&gt;\n";
    std::cout &lt;&lt; "\tshift must be integer and providing -shift decodes string encoded with shift.\n";
}

int main(int argc, char *argv[])
{
    if (argc != 2) {
        caesar_usage();
        return EXIT_FAILURE;
    }

    int shift;
    std::stringstream ss(argv[1], std::ios_base::in);
    ss &gt;&gt; shift;
    if (ss.fail() || !ss.eof()) {
        caesar_usage();
        return EXIT_FAILURE;
    }

    // turn off white space skipping
    std::cin &gt;&gt; std::noskipws;

    std::transform(
        std::istream_iterator&lt;char&gt;(std::cin),
        std::istream_iterator&lt;char&gt;(),
        std::ostream_iterator&lt;char&gt;(std::cout), 
        [&amp;](char c) -&gt; char {
          return caesar_cipher(c, shift);
        }
    );

    return EXIT_SUCCESS;
}
</code></pre>

<p>Encode | decode:
<code>./caesar 5 &lt;in.txt | ./caesar -5</code></p>
    </div>