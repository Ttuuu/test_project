<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Code organisation</strong></p>

<p>You've tried to split your logic into smallish functions which is a good idea but you could go further. You should try to write a function that handles the input/output part and a function which takes a well defined input (with the most relevant data types as an argument) and computes whatever needs to be computed before <em>returning</em> it (such a function should not do any input parsing or print anything except for debug purposes).</p>

<p>In you case, the most logical input such a function would take is the queue. The corresponding data type would be a <code>list</code> of <code>int</code> and the return type would be an integer (or None).</p>

<p>If you do so, you have smaller independant logical parts which are easier to understand, to maintain and to tests. Among other things, you can write unit tests based on the examples provided to ensure the computation works well.</p>

<p>In you case, moving the different pieces of logic around, you get something like:</p>

<pre><code>#!/bin/python3

import sys

# Swaps the i'th and (i-1)'th elements and returns the list
def swap(intermediate_q,i):
    intermediate_q[i],intermediate_q[i-1] = intermediate_q[i-1],intermediate_q[i]
    return(intermediate_q)

# Increment bribes and total_bribes 
def compute_bribes(bribes,total_bribes):
    if(bribes+1==3):
        return (-1,-1)
    return (bribes+1,total_bribes+1)

def get_number_brides(queue):
    """Take a queue (list of int) as a parameter and return the number of brides or None."""
    n = len(queue)
    initial_q = list(i+1 for i in range(n))
    total_bribes = 0
    for i in range(n):
        bribes = 0
        # If the position in the initial/transition queue is not equal to the position in the final queue
        # queue is the input against which swaps are made in my initial_q. 
        if(queue.index(initial_q[i]) != initial_q.index(initial_q[i])):
            index_in_initial_q = initial_q.index(queue[i])
            index_in_queue = queue.index(queue[i])
            while(index_in_initial_q != index_in_queue):
                initial_q = swap(initial_q,index_in_initial_q)
                bribes,total_bribes = compute_bribes(bribes,total_bribes)
                if(bribes == -1):
                    return None
                index_in_initial_q-=1
    return total_bribes

def test_stdio():
    inp0 = sys.stdin.read()
    inp1 = inp0.split('\n')
    T = int(inp1[0])
    del inp1[0]
    print("inp1", inp1)
    for i, val in enumerate(inp1):
        if i % 2 == 1:
            ret = get_number_brides([int(v) for v in val.split(' ')])
            print('Too chaotic' if ret is None else ret)

def unit_tests():
    assert get_number_brides([2, 1, 5, 3, 4]) == 3
    assert get_number_brides([2, 5, 1, 3, 4]) is None

if __name__ == "__main__":
    unit_tests()
    # test_stdio()
</code></pre>

<p>Among the nice benefits, because the function is now used for a single test case, I can return directly from the most relevant place and this is no need for a <code>chaos_flag</code> anymore (if you were to keep such a flag, it'd be a good idea to use the Boolean type).</p>

<p><strong>Style</strong></p>

<p>Python has a <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow">Style Guide called PEP 8</a> which is definitly worth having a look at and following. In your case, the spacing (both vertical and horizontal) is not quite perfect and so is the usage of useless parenthesis.</p>

<p>Fixing this, you get:</p>

<pre><code>#!/bin/python3

import sys


# Swaps the i'th and (i-1)'th elements and returns the list
def swap(intermediate_q, i):
    intermediate_q[i], intermediate_q[i-1] = intermediate_q[i-1], intermediate_q[i]
    return(intermediate_q)


# Increment bribes and total_bribes
def compute_bribes(bribes, total_bribes):
    if bribes + 1 == 3:
        return (-1, -1)
    return (bribes + 1, total_bribes + 1)


def get_number_brides(queue):
    """Take a queue (list of int) as a parameter and return the number of brides or None."""
    n = len(queue)
    initial_q = list(i + 1 for i in range(n))
    total_bribes = 0
    chaos_flag = False
    for i in range(n):
        bribes = 0
        # If the position in the initial/transition queue is not equal to the position in the final queue
        # queue is the input against which swaps are made in my initial_q.
        if queue.index(initial_q[i]) != initial_q.index(initial_q[i]):
            index_in_initial_q = initial_q.index(queue[i])
            index_in_queue = queue.index(queue[i])
            while index_in_initial_q != index_in_queue:
                initial_q = swap(initial_q, index_in_initial_q)
                bribes, total_bribes = compute_bribes(bribes, total_bribes)
                if bribes == -1:
                    return None
                index_in_initial_q -= 1
    return total_bribes


def test_stdio():
    inp0 = sys.stdin.read()
    inp1 = inp0.split('\n')
    T = int(inp1[0])
    del inp1[0]
    print("inp1", inp1)
    for i, val in enumerate(inp1):
        if i % 2 == 1:
            ret = get_number_brides([int(v) for v in val.split(' ')])
            print('Too chaotic' if ret is None else ret)


def unit_tests():
    assert get_number_brides([2, 1, 5, 3, 4]) == 3
    assert get_number_brides([2, 5, 1, 3, 4]) is None

if __name__ == "__main__":
    unit_tests()
    # test_stdio()
</code></pre>

<p>I have no time to go any further but I hope this will help you, another reviewer and future me to take over.</p>
    </div>