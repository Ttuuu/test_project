<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>1. Design</h3>

<p>I think that using the <code>@mean_of_experiments</code> decorator is not the best approach to this problem:</p>

<ol>
<li><p>There might be cases where you want to run the underlying function by itself, for example in order to test it, but the decorator prevents this.</p></li>
<li><p>You have to choose the number of experiments, <code>N</code>, when you define the function. This is restrictive: it means that you can't run the function with different values of <code>N</code>.</p></li>
<li><p>The only result you get back is the mean. But what if you sometimes want another statistic, such as the standard deviation?</p></li>
</ol>

<p>My preferred design would use the principle of <a href="https://en.wikipedia.org/wiki/Separation_of_concerns" rel="noreferrer">separation of concerns</a>. For example, we might write:</p>

<pre><code>def mean_of_experiments(n, f, *args, **kwargs):
    "Return the mean of n calls to f(*args, **kwargs)."
    return mean(f(*args, **kwargs) for _ in range(n))
</code></pre>

<p>This meets all my objections:</p>

<ol>
<li><p>I can call <code>common_birthday(23)</code> to carry out one experiment, or <code>mean_of_experiments(1000, common_birthday, 23)</code> to find the mean of 1000 experiments.</p></li>
<li><p>I can choose a different value of <code>n</code> for each call to <code>mean_of_experiments</code>, I don't have to commit to a particular value in advance.</p></li>
<li><p>If I need the standard deviation, I can write <code>std_of_experiments</code>, and this can coexist in the same program with <code>mean_of_experiments</code>.</p></li>
</ol>

<h3>2. Review</h3>

<ol>
<li><p>The code is very clear and well documented! In the top 1% of questions on Code Review.</p></li>
<li><p>If you're going to use NumPy at all, I think you might as well take advantage of it everywhere, instead of mixing and matching with the Python standard library. For example, in <code>common_birthday</code> you could use <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.random.randint.html" rel="noreferrer"><code>numpy.random.randint</code></a> and <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.unique.html" rel="noreferrer"><code>numpy.unique</code></a>:</p>

<pre><code>def common_birthday(k, days=365):
    "Return True iff there are any repeats among k random birthdays."
    return k != np.unique(np.random.randint(1, days, size=k)).size
</code></pre></li>
<li><p>Similarly, in <code>matching</code>, you could use <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.random.permutation.html" rel="noreferrer"><code>numpy.random.permutation</code></a>, <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.arange.html" rel="noreferrer"><code>numpy.arange</code></a>, and <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.any.html" rel="noreferrer"><code>numpy.any</code></a>:</p>

<pre><code>def matching(k=52):
    """Return True iff there's any j such that card j appears in the j'th
    place of a shuffled deck of k cards.

    """
    return (np.random.permutation(k) == np.arange(k)).any()
</code></pre></li>
<li><p>The docstring for <code>boardings</code> doesn't explain the meaning of the <code>scale</code> and <code>N</code> arguments.</p></li>
<li><p>The <code>scale</code> argument to <code>boardings</code> seems unnecessary, since the randomly chosen instants will scale along with the arrival times.</p></li>
</ol>
    </div>