<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You can do most of this with regex. Going through your requirements:</p>

<ul>
<li><blockquote>
  <p>It must only consist of digits (0-9).</p>
</blockquote>

<p>And so we can use <code>[0-9]</code> for each digit.</p></li>
<li><blockquote>
  <p>It must contain exactly 16 digits.</p>
</blockquote>

<p>And so we can use something like <code>[0-9]{16}</code>. However, that only checks that it contains sixteen digits, so <code>1234567890123456abc</code> would be valid. So we need something like <code>^[0-9]{16}$</code></p></li>
<li><blockquote>
  <p>It must start with a 4,5 or 6</p>
</blockquote>

<p>And so we can change the first match. <code>^[456][0-9]{15}$</code></p></li>
<li><blockquote>
  <p>It may have digits in groups of 4 , separated by one hyphen "-".</p>
</blockquote>

<p>This makes the regex a bit longer, but it still stays quite simple. The only complex thing is it's all or nothing it seems, so you can either separate or not. This check would be best in Python. However that means splitting up the groups with <code>-?</code></p>

<pre><code>^[456][0-9]{3}-?[0-9]{4}-?[0-9]{4}-?[0-9]{4}$
</code></pre></li>
<li><blockquote>
  <p>It must NOT use any other separator like ' ' , '_', etc.</p>
</blockquote>

<p>This works the same as the above. If it however wanted us to allow those, we'd have to change the separators to groups such as <code>[\- _]</code>.</p></li>
<li><blockquote>
  <p>It must NOT have 4 or more consecutive repeated digits.</p>
</blockquote>

<p>We can't do this easily in pure regex, so it's best to do this in Python. And so we'd want to use capture groups to get the numbers.</p>

<pre><code>^([456][0-9]{3})-?([0-9]{4})-?([0-9]{4})-?([0-9]{4})$
</code></pre></li>
</ul>

<p>And so if it matches the above regex, you just have to check that no four consecutive digits are the same.</p>

<p>To improve <code>val_rep</code> I'd use a modified version on the <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow noreferrer">itertools pairwise recipe</a>.</p>

<pre><code>def quadwise(iterable):
    "s -&gt; (s0,s1,s2,s3), (s1,s2,s3,s4), (s2,s3,s4,s5), ..."
    a, b, c, d = tee(iterable, 4)
    next(b, None)
    next(c, None)
    next(c, None)
    next(d, None)
    next(d, None)
    next(d, None)
    return zip(a, b, c, d)
</code></pre>

<p>Which can allow for a simple check, such as:</p>

<pre><code>def val_rep(num):
    for head, *tail in quadwise(num):
        if all(head == item for item in tail):
            return False
    return True
</code></pre>

<p>Which could be 'simplified' to:</p>

<pre><code>def val_rep(num):
    return not any(
        all(head == item for item in tail)
        for head, *tail in quadwise(num)
    )
</code></pre>

<p>Which in Python 2 would have to be something like:</p>

<pre><code>def val_rep(num):
    return not any(
        all(head == item for item in (a, b, c))
        for head, a, b, c in quadwise(num)
    )
</code></pre>

<p>And so I'd recommend something like:</p>

<pre><code>REGEX = r'^([456][0-9]{3})-?([0-9]{4})-?([0-9]{4})-?([0-9]{4})$'

def quadwise(iterable):
    "s -&gt; (s0,s1,s2,s3), (s1,s2,s3,s4), (s2,s3,s4,s5), ..."
    a, b, c, d = itertools.tee(iterable, 4)
    next(b, None)
    next(c, None)
    next(c, None)
    next(d, None)
    next(d, None)
    next(d, None)
    return zip(a, b, c, d)

def val_rep(num):
    return not any(
        all(head == item for item in (a, b, c))
        for head, a, b, c in quadwise(num)
    )

def valid_creditcard(card):
    groups = re.match(REGEX, card)
    if not groups:
        return False
    if card.count('-') not in (0, 3):
        return False
    return val_rep(''.join(groups.groups()))

if __name__ == '__main__':
    total_count = int(raw_input())
    cards = [
        raw_input()
        for count in range(total_count)
    ]

    for card in cards:
        if valid_creditcard(card):
            print('Valid')
        else:
            print('Invalid')
</code></pre>
    </div>