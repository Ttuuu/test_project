<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'll not repeat points that are already mentioned by others, so these are additional to existing answers:</p>

<ul>
<li><p>If you include <code>&lt;cstdio&gt;</code>, then its identifiers are in the <code>std</code> namespace (i.e. <code>std::printf</code>, <code>std::open</code>, etc).  Implementations are <em>allowed</em> to also declare them in the global namespace (and several do), but you can't rely on that in a portable program.</p></li>
<li><p>Error messages should go to <code>std::cerr</code> or <code>stderr</code>; they should not be mixed in with program output.  The same goes for debugging messages (though they should probably be removed, if you've finished debugging).</p></li>
<li><p>Return a non-zero value from <code>main()</code> if the program is unsuccessful.  There's even a handy macro (<code>EXIT_FAILURE</code>) available in <code>&lt;cstdlib&gt;</code>.</p></li>
<li><p>Don't ignore the return value from <code>Encrypt()</code> - ideally, you'd return exit status so that <code>main()</code> can simply write</p>

<pre><code>    return Encrypt(argv[1], argv[2], argv[3]);
</code></pre></li>
<li><p><code>std::fwrite()</code> and <code>std::fclose()</code> can return errors (and their C++ equivalents can be made to throw exceptions).  Don't assume that they have succeeded - the program has certainly failed if it couldn't write its output.  Hint: use <code>std::perror()</code> to report the reason for failure.</p></li>
<li><p>Don't call <code>std::putchar()</code> in a loop when you can simply use <code>std::fwrite()</code> once.</p></li>
<li><p>End format strings with a newline character, except where you intend to combine several output strings into a single line.</p></li>
<li><p>When modifying values, we can use combined operate+assign to make it clearer that we're modifying elements:</p>

<pre><code>inBuffer[i] ^= key[i%keyFileSize];
</code></pre></li>
<li><p><code>sizeof(char)</code> is always 1, since the result is in units of <code>char</code>.</p></li>
<li><p>Don't leave <code>TODO</code> comments in your code; that's usually a sign that it's not yet ready for review!</p></li>
<li><p>Consider not measuring either file: the main file can be streamed character by character, and the key file can be treated similarly, but with a <code>std::rewind()</code> call whenever we reach its end.</p></li>
</ul>
    </div>