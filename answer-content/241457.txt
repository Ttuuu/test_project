<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Style</h2>

<h3>Spaces and punctuation</h3>

<pre><code>if array.is_empty(){
</code></pre>

<p>should be</p>

<pre><code>if array.is_empty() {
</code></pre>

<p>(likewise <code>match key.cmp(&amp;middle_element){</code> → <code>match key.cmp(&amp;middle_element) {</code>, etc.)</p>

<pre><code>Ordering::Equal =&gt; {return Some(start+middle as usize);} ,
</code></pre>

<p>should be</p>

<pre><code>Ordering::Equal =&gt; return Some(start + middle as usize),
</code></pre>

<p>although really, the comma at the end isn't necessary; you can remove that too.</p>

<p>And there should only be one new line below <code>use std::cmp::Ordering</code> and none above.</p>

<h3>Scope</h3>

<p><code>middle</code> isn't used outside the <code>loop</code>, so you can replace:</p>

<pre><code>let mut middle;

loop {
    middle = (end - start) / 2;
</code></pre>

<p>with:</p>

<pre><code>loop {
    let middle = (end - start) / 2;
</code></pre>

<p>Note how the <code>mut</code> can go away, because the value of <code>middle</code> is only set once (per loop).</p>

<h3>Unnecessary cast (<code>as</code>)</h3>

<pre><code>Ordering::Equal =&gt; {
    return Some(start + middle as usize);
},
</code></pre>

<p>The <code>as usize</code> is unnecessary; Rust already knows that you're returning <code>Option&lt;usize&gt;</code>. In fact, both <code>start</code> and <code>middle</code> are already <code>usize</code>, as is <code>start + middle</code>, so Rust isn't even doing anything fancy to get this to work. However, writing <code>as usize</code> makes it <em>seem</em> like those <em>aren't</em> <code>usize</code>, which could end up confusing your reader quite a lot.</p>

<p>(Same with <code>start as usize</code> → <code>start</code> and <code>end as usize</code> → <code>end</code>.)</p>

<h3>Misleading comments</h3>

<p>This comment:</p>

<pre><code>//The slicing syntax produces an unborrowed slice
//(type: [i32]) which we must then borrow (to give a &amp;[i32]),
//even if we are slicing a borrowed slice.//More can be read at
//https://github.com/nrc/r4cppp/blob/master/arrays.md
if end - start &lt;= 1 {
</code></pre>

<p>is misleading, for two reasons:</p>

<ul>
<li>It's right above (hence attached to) the wrong piece of code.</li>
<li>You don't use the slicing syntax (<code>array[4..6]</code>) anywhere in your code; you use the <em>indexing</em> syntax.</li>
</ul>

<p>Just remove it; perhaps replace it with</p>

<pre><code>let middle_element = array[start + middle];
// cmp requires a reference
match key.cmp(&amp;middle_element) {
</code></pre>

<p>or something if you think it would be helpful. Though be aware that <code>let middle_element = array[start + middle]</code> makes a copy of <code>middle_element</code>, so the reference is to <code>middle_element</code> on the stack, not <code>array[start + middle]</code> wherever <code>array</code> is stored.</p>

<h3><code>loop</code> with <code>if</code> and <code>break</code></h3>

<pre><code>if end - start &lt;= 1 {
    break;
};
</code></pre>

<p>You're trying to make a <code>do</code> <code>while</code> loop here. However, if <code>end - start &lt;= 1</code> already, <em>you don't need to enter this <code>loop</code> in the first place</em>. This means you can just use a regular <code>while</code>:</p>

<pre><code>while end - start &gt; 1 {
    let middle = (end - start) / 2;
    let middle_element = array[start + middle];
    // cmp requires a reference
    match key.cmp(&amp;middle_element) {
        Ordering::Less =&gt; end -= middle,
        Ordering::Greater =&gt; start += middle,
        Ordering::Equal =&gt; return Some(start + middle),
    }
}
</code></pre>

<p>And now <code>cargo fmt</code> doesn't change the code, and <code>cargo clippy</code> doesn't give any suggestions. Hooray!</p>

<h2>Implementation</h2>

<h3><code>middle</code></h3>

<p>In my mind, <code>middle</code> should be the index of the middle element – not the difference between <code>start</code> and the middle element. You might want to calculate this as <code>(start + end) / 2</code> but that risks overflow; fortunately, <code>start + (end - start) / 2</code> works fine.</p>

<p>So this:</p>

<pre><code>let middle = (end - start) / 2;
let middle_element = array[start + middle];
// cmp requires a reference
match key.cmp(&amp;middle_element) {
    Ordering::Less =&gt; end -= middle,
    Ordering::Greater =&gt; start += middle,
    Ordering::Equal =&gt; return Some(start + middle)
}
</code></pre>

<p>becomes:</p>

<pre><code>while end - start &gt; 1 {
    let middle = start + (end - start) / 2;
    let middle_element = array[middle];
    // cmp requires a reference
    match key.cmp(&amp;middle_element) {
        Ordering::Less =&gt; end = middle,
        Ordering::Greater =&gt; start = middle,
        Ordering::Equal =&gt; return Some(middle)
    }
}
</code></pre>

<h3>Unnecessary variable</h3>

<p>Now we've made that change, I think <code>array[middle]</code> is obviously the middle element; so much so that we can remove <code>middle_element</code> entirely and get clearer code:</p>

<pre><code>let middle = start + (end - start) / 2;
// cmp requires a reference
match key.cmp(&amp;array[middle]) {
</code></pre>

<h3><code>Ordering</code> ordering</h3>

<p>I actually think it'd be clearer if these were in <code>Less</code>, <code>Equal</code>, <code>Greater</code> order:</p>

<pre><code>match key.cmp(&amp;array[middle]) {
    Ordering::Less =&gt; end = middle,
    Ordering::Equal =&gt; return Some(middle),
    Ordering::Greater =&gt; start = middle
}
</code></pre>

<h3>Implicit <code>return</code></h3>

<p>At the end, it might be clearer to use the implicit return form:</p>

<pre><code>if array[start] == key {
    Some(start)
} else if array[end] == key {
    Some(end)
} else {
    None
}
</code></pre>

<h2>Addendum: Tests</h2>

<p>To make sure I didn't break your code while making these changes, I wrote a test. Tests are good to have (not that this is a particularly good test).</p>

<pre><code>#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_find() {
        assert_eq!(find(&amp;[2, 4, 5, 7, 11, 12, 17], 5), Some(2));
        assert_eq!(find(&amp;[], 5), None);
        assert_eq!(find(&amp;[2, 4, 5, 7, 11, 12, 17], 6), None);
        assert_eq!(find(&amp;[-63, -42, 1, 2, 4, 5, 7, 11, 12, 17, 17, 18], 12), Some(8));

        call_find(&amp;[-10, -7, 0, 2, 4, 4, 5, 16, 27, 37, 38, 40, 40, 40, 40, 63, 628, 844, 10000000, 41230456]);
    }

    fn call_find(array: &amp;[i32]) {
        for i in 0..array.len() {
            assert_eq!(array[find(array, array[i]).unwrap()], array[i]);
        }
    }
}
</code></pre>
    </div>