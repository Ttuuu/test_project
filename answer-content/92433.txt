<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>What is the purpose of these conversions? How are they going to be used? I ask because I typically have 2 use cases for HSV colors:</p>

<ol>
<li>converting an image into the color space for some app or library that works in that space</li>
<li>converting an individual pixel into HSV (or whatever) to do a particular manipulation on it, then converting back to RGB</li>
</ol>

<p>In the first case, there are generally constraints, such as that the resulting image must have 8-bits per channel. In the second case, I usually want floating point precision for doing the color manipulation, though. It seems very odd to have CMYK be <code>Integer</code>s instead of <code>Byte</code>s like RGB. What's the reasoning there?</p>

<p>The answer to the above question (the purpose of the conversions) will determine what format you should return the values in. Right now, the HSV conversion takes 8-bit unsigned input values but returns double-precision floats. That's useful for #2. Is there any reason the input RGB values couldn't also be double-precision floats?</p>

<p><code>S</code> and <code>V</code> are in the range 0-1, but <code>H</code> is 0-360. It's been years since I used Delphi, but most math functions in most other languages take radians. Are you sure you want hue to be in degrees? I have seen implementations where <code>H</code> is 0-1 (representing 0° to 360°) for consistency, but it's a pain to pass to math functions. In the <code>HSVToRGB()</code> function you assert that they're in the 0-1 range, which <code>H</code> definitely won't be!</p>

<p>If you do want <code>S</code> to be in the 0-1 range, then don't multiply it by 255 here:</p>

<pre><code>if (maxRGB &lt;&gt; 0.0) then
    S := 255.0 * delta / maxRGB
</code></pre>

<p>and then divide by 255 here:</p>

<pre><code>  S := S / 255;
</code></pre>

<p>Also, why is <code>RGBToHSV()</code>a function? It always returns <code>True</code>. Same with <code>HSVToRGB()</code>.</p>

<p>The procedure name <code>CopyOutput()</code> is confusing. You aren't copying any values. You're scaling the inputs, so I'd call it <code>ScaleComponents()</code> or something like that. In this case:</p>

<pre><code>if S = 0.0 then begin
    // achromatic (grey)
    CopyOutput(B, B, B);
    Result:= True;
    exit;
end;
</code></pre>

<p>You're using the blue channel, which hasn't been set yet, to set <code>R</code>, <code>G</code>, and <code>B</code>. Shouldn't that be:</p>

<pre><code>CopyOutput(V, V, V);
</code></pre>

<p>Further down in <code>HSVToRGB()</code> you write:</p>

<pre><code>H := H * 6.0; // sector 0 to 5
</code></pre>

<p>If <code>H</code> is in the 0-360 range, it should be:</p>

<pre><code>H := H / 60.0;
</code></pre>

<p>It seems wasteful to have setters and getters for single channels but not have them for all 3 (or 4) channels at a time. For example, if a caller is asking for Hue, it's likely they'll ask for Saturation and Value, too. So it would be nice to have some way to convert all 3 at once. Otherwise, the conversion is done 3 times and there's 3 times the function-call overhead.</p>

<p>For the methods <code>SetHue()</code>, <code>SetSaturation()</code>, and <code>SetBrightness()</code>, I wouldn't call the argument <code>Value</code> since it can be confused with the V component of HSV. I would name the argument <code>NewHue</code>, <code>NewSaturation</code> and <code>NewBrightness</code>.</p>

<p>It looks like you're using inherited conversions for CMYK. Am I understanding that correctly? Since I don't know the <code>TColor</code> class, I don't have many thoughts on that. If it's currently working for you, then I guess it probably works OK.</p>
    </div>