<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Ensure the mutex is locked when changing <code>should_terminate_m</code></h1>

<p>In the destructor, you should hold the mutex locked while changing <code>should_terminate_m</code>. It may work as it is in this particular case, but in general, if you hold a mutex while accessing a variable anywhere in the code (it's held in <code>thread_loop()</code> while reading it), you should hold the mutex everywhere you access it. This avoids unexpected behavior.</p>

<h1>Stick with either <code>std::unique_lock</code> or <code>std::scoped_lock</code></h1>

<p>You use both types of locks in the code. While functionally it should be perfectly fine, it's weird to mix these two. Be consistent and use only one of them. I recommend sticking with <code>std::scoped_lock</code> if you don't mind not being compatible with pre-C++17 compilers.</p>

<h1>Issues with <code>wait()</code></h1>

<p>One issue I see is that in order to support the <code>wait()</code> member function, you have a reference counter <code>busy_m</code>, and you have to notify the condition vairable <code>pool_cv_m</code> every time a task finishes. This adds overhead even if nothing is actually calling <code>wait()</code>, but more importantly, because you use <code>main_thread_cv.notify_one()</code>, if multiple threads are calling <code>wait()</code>, then the notification might go to the wrong thread.</p>

<p>Another issue is that if jobs are enqueued often enough that the queue is never empty, <code>wait()</code> never returns, even though all jobs that were enqueued before <code>wait()</code> was called did finish.</p>

<p>You could indeed make it explicit that only the main thread is allowed to enqueue jobs and call <code>wait()</code>, but that might limit the usefulness of this thread pool somewhat.</p>
    </div>