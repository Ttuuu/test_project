<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>You may want to eliminate the tail call to quickSort (Java itself does not optimize tail recursion).</p>

<p>Along the same line, it is beneficial to recur into a smaller partition, while looping over the larger one.</p></li>
<li><p>Insertion sort implementation is suboptimal. The inner loop tests <em>two</em> conditions at each iteration. If you split the loop into two, depending on how <code>temp</code> compares to <code>table[0]</code>, each one needs to test only one condition. In pseudocode,</p>

<pre><code>    temp = table[i]
    if temp &lt; table[0]
        // table[i] will land at index 0. Don't bother testing values.
        for (j = i; j &gt; 0; --j)
            table[j] = table[j-1];
    else
        // table[0] is a natural sentinel. Don't bother testing indices.
        for (j = i; table[j - 1] &gt; temp; --j)
            table[j] = table[j-1];
    table[j] = temp;
</code></pre></li>
<li><p>Your setup allows one more quite subtle optimization. The insertion sorts are working on the <span class="math-container">\$\frac{N}{k}\$</span> arrays of <span class="math-container">\$k\$</span> elements, resulting in <span class="math-container">\$O(Nk)\$</span> time complexity. Postpone insertion sort until the recursive phase completes. The array now is "almost" sorted; each element is within <span class="math-container">\$k\$</span> steps from its final destination. Insertion sorting the entire array is still <span class="math-container">\$O(Nk)\$</span> (each element takes at most <span class="math-container">\$k\$</span> swaps), but it is done in a single function invocation, rather than <span class="math-container">\$\frac{N}{k}\$</span> invocations your code makes.</p>

<p>If you are sorting a million-strong array, this spares you 100000 function invocations.</p>

<p>Besides, after the first <span class="math-container">\$k\$</span> rounds, the minimal element is placed correctly, and you may fall into the unguarded branch unconditionally.</p></li>
<li><p>I don't see how <code>last - first &lt; 9</code> may ever be true. The code never calls <code>partition</code> (and consequently <code>getPivotIndex()</code>) for the ranges that small. Since it is a private method, nobody else would call it either.</p></li>
</ul>
    </div>