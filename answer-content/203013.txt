<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Automated suggestions</h1>

<p>If you don't have <code>shellcheck</code> installed, grab it, or use the online service.  It reports a bunch of questionable constructs:</p>

<pre class="lang-none prettyprint-override"><code>202986.sh:4:1: warning: Use 'cd ... || exit' or 'cd ... || return' in case cd fails. [SC2164]
202986.sh:6:38: note: read without -r will mangle backslashes. [SC2162]
202986.sh:8:22: note: Double quote to prevent globbing and word splitting. [SC2086]
202986.sh:10:9: note: Double quote to prevent globbing and word splitting. [SC2086]
202986.sh:12:10: note: Double quote to prevent globbing and word splitting. [SC2086]
202986.sh:12:61: note: Double quote to prevent globbing and word splitting. [SC2086]
202986.sh:12:84: note: Double quote to prevent globbing and word splitting. [SC2086]
202986.sh:14:15: note: Double quote to prevent globbing and word splitting. [SC2086]
202986.sh:14:41: note: Double quote to prevent globbing and word splitting. [SC2086]
202986.sh:14:68: note: Double quote to prevent globbing and word splitting. [SC2086]
202986.sh:16:11: note: Double quote to prevent globbing and word splitting. [SC2086]
202986.sh:16:22: note: Double quote to prevent globbing and word splitting. [SC2086]
202986.sh:16:51: note: Double quote to prevent globbing and word splitting. [SC2086]
202986.sh:18:8: note: Double quote to prevent globbing and word splitting. [SC2086]
202986.sh:19:8: note: Double quote to prevent globbing and word splitting. [SC2086]
202986.sh:23:7: note: Use $(..) instead of legacy `..`. [SC2006]
202986.sh:25:7: note: Use ./*glob* or -- *glob* so names with dashes won't become options. [SC2035]
202986.sh:25:24: note: Double quote to prevent globbing and word splitting. [SC2086]
</code></pre>

<h1>Prefer lower-case for variable names</h1>

<p>We normally use upper-case names for environment variables intended to change the behaviour of programs we use.  It's better to use lower-case for ordinary shell variables.</p>

<h1>Check for program failure</h1>

<p>At present, if compilation fails, we'll still proceed, likely with old code.  Instead, we should abort execution if any of the steps fail.  It's pretty easy to ask the shell to do this for us (though it's worth learning the exceptions); we can also ask it to check we don't expand any undefined variables, too:</p>

<pre><code>set -eu
</code></pre>

<h1>Useless use of <code>xargs</code></h1>

<p>I've never seen this pattern before:</p>

<pre><code>echo "$filename" | xargs program
</code></pre>

<p>Unless your filename contains whitespace (the rest of the code implies it doesn't), that's exactly</p>

<pre><code>program "$filename"
</code></pre>

<h1>Unusual date conversion</h1>

<p>Do you really mean to give the result file a name given by day-within-year and minute-within-hour?  That's a surprising combination, and certainly deserves a justifying comment if it <em>is</em> really what you want.</p>

<h1>Avoid temporary files</h1>

<p>Pipeline processing can produce results with lower latency than storing intermediates to temporary files.  We can pipeline one input into <code>pdftk</code> and create the other using a <em>process substitution</em> in roughly this manner:</p>

<pre><code>enscript "$CPPFILE" | ps2pdf \
    | pdftk - &lt;(./a.out | enscript | ps2pdf) \
            cat output "$TITLE.final.pdf"
</code></pre>

<h1>Consider using Make</h1>

<p>If you make a change to a single file, you need to re-run the script (re-doing all the compilation and output processing) to update the final output.  Make is more intelligent: you can write pattern rules that enable you to re-build and re-run only what's out of date, without wasting time and energy on the bits that haven't changed.</p>

<p>It can also clean up the temporary files, and you could write a "<code>clean</code>" rule to clean up all the result files.</p>

<p>If you do write a Makefile, be sure to bring it here for review!</p>
    </div>