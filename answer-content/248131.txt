<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Logic 1</strong></p>
<pre><code>def shuffle(self):
    '''shuffle the card deck'''
    if len(self.cards) &gt; 1:
        random.shuffle(self.cards)
</code></pre>
<p>The <code>len</code> check is unnecessary. <code>shuffle</code> will not crash on a list with 0 or 1 elements in it.</p>
<p><strong>Logic 2</strong></p>
<pre><code>if has_ace and self.value &gt; 21:
    self.value -= 10
</code></pre>
<p>What if you have more than one Ace in hand? Can each of them count as <code>1</code> or just the first one? I think you have a logical error here.</p>
<p><strong>Code 1</strong></p>
<pre><code>def get_value(self):
    '''calls calculate_value and returns the hand value'''
    self.calculate_value()
    return self.value
</code></pre>
<p>You always calculate the value before returning it, which I think is a good thing.</p>
<p>But that also means there is no use storing the value in the hand's <code>this.value</code> . You should rather just return the calculated value from the <code>calculate_value()</code> function without storing it in <code>this.value</code>.</p>
<p>Then you also don't need both functions <code>calculate_value()</code> and <code>get_value()</code>, since <code>get_value()</code> just returns <code>calculate_value()</code>.</p>
<p><strong>Code improvement 1</strong></p>
<pre><code>    for i in range(len(self.cards)):
        print("+---+ ", end="")
</code></pre>
<p>Since you're not using the index nor the card in this loop, you can just print a long string directly like this:</p>
<pre><code>print("+---+ " * len(self.cards), end="")
</code></pre>
<p><strong>Code improvement 2</strong></p>
<pre><code>    for i in range(len(self.cards)):
        card = self.cards[i]
        print("|{}  | ".format(card.suit), end="")
</code></pre>
<p>You can iterate over the cards directly like this</p>
<pre><code>for card in self.cards:
    print("|{}  | ".format(card.suit), end="")
</code></pre>
<p><strong>Naming 1</strong></p>
<pre><code>def get_bet(self):
    '''returns bet amount'''
    return self.amount
</code></pre>
<p>Getter methods usually are named like the variable they are getting, so you should either change the function to <code>def get_amount(self):</code> or change the <code>amount</code>variable to be named <code>bet</code>. But since the class is named <code>Bet</code>, it's not a good idea to have a variable by the same name inside the class, so change the method name.</p>
<p><strong>Unused code</strong></p>
<p>You have a bunch of unused variables like <code>reader</code> on line 512 and <code>width, height</code> on line 464, and more. I suggest using a code editor like for example PyCharm, which will spot mistakes like that automatically and help you work more efficiently.</p>
    </div>