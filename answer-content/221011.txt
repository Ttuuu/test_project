<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Data Model</h2>

<p>I would add a restriction on the attribute and move the convenience method from the creator to this class.</p>

<blockquote>
<pre><code>[AttributeUsage(AttributeTargets.Class)]
class ParentAttribute : Attribute
{
    public ParentAttribute(Type type) { Parent = type; }
    public Type Parent { get; private set; }
}
</code></pre>
</blockquote>

<pre><code>[AttributeUsage(AttributeTargets.Class, AllowMultiple=false)]
public class ParentAttribute : Attribute
{
    public ParentAttribute(Type type) { Parent = type; }
    public Type Parent { get; private set; }

    public static Type GetParentType(object source) {
        return source
            .GetType()
            .GetCustomAttributes&lt;ParentAttribute&gt;()
            .Single()  // &lt;- AllowMultiple=false
            .Parent;
    }
}
</code></pre>

<p>I would also agree with others to have a simpler <code>ElementCollection</code> and to add the <code>Parent</code> to <code>Element</code>.</p>

<pre><code>public class ElementCollection : List&lt;Element&gt; { 
    public string Name { get; set; } 
}

public abstract class Element : ElementCollection 
{
    public ElementCollection Parent { get; set; }
}
</code></pre>

<hr>

<h2>Tree Builder</h2>

<p>I know you are a fan of <code>Enumerator</code>. But I feel the <code>TreeCreator</code> could be simplified. It is also important to note that the sequence is ordered. If the order changes of your flattened list, different results could yield. (parhaps not the best design)</p>

<blockquote>
<pre><code>public static Message ToTree(this IEnumerable&lt;Element&gt; elements)
    {
        var message = new Message();  
        var element = elements.GetEnumerator();
        element.MoveNext();
        ToTree(element, message);    
        return message;
    }
</code></pre>
</blockquote>

<pre><code>static class TreeCreator
{
    public static Message ToTree(this IEnumerable&lt;Element&gt; elements) {
        var message = new Message();
        ElementCollection parent = message;
        foreach (var element in elements) {
            while (parent != null &amp;&amp; !ParentAttribute.GetParentType(element).Equals(parent.GetType())) {
                parent = parent = parent is Element ? ((Element)parent).Parent : null;
            }
            if (parent == null) break;
            parent.Add(element);
            element.Parent = parent;
            parent = element;
        }
        return message;
    }
}
</code></pre>

<hr>

<h2>Text Printer</h2>

<p>It's ok for debugging. But if you want to implement a standardized way for rendering a tree: have a look at <a href="https://codereview.stackexchange.com/questions/1729/composite-and-visitor-patterns-for-tree-based-survey-functionality-in-c/221006?noredirect=1#comment427136_221006">this post</a> <code>SurveyTextRenderer</code>.</p>

<blockquote>
<pre><code>    // Prints the tree for debugging.
    public static void PrintTree(this ElementCollection elements, int depth = 0) {
        Console.WriteLine(new string('.', depth) + elements.Name);
        foreach (var element in elements) {
            element.PrintTree(depth + 1);
        }
    }
</code></pre>
</blockquote>
    </div>