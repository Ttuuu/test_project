<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First of all, everything @Carcigenicate said.</p>
<p>Next:</p>
<ol>
<li><p>Replace strings with constants:</p>
<pre><code>LEFT = "l"
RIGHT = r"

...

if dire == LEFT:
</code></pre>
</li>
<li><p>Replace a "complete" list of if statements on directions with a dictionary of lambda functions:</p>
<pre><code> _BORDER_CHECK = {
    RIGHT: lambda c, b: c[0] &gt;= b[0],
    LEFT: lambda c, b: c[0] &lt;= 0,
    ...
}

def is_border(coordinates, direction):
    return _BORDER_CHECK[direction](coordinates, border)
</code></pre>
<p>Doing this lets you replace 4 comparisons with a single dictionary lookup, which is implemented in C.</p>
</li>
<li><p>Don't use the global symbols <code>True</code> and <code>False</code> if you can avoid them.</p>
<p>You may not realize this, but Python treats those as <em>symbols.</em> They are not magically replaced in the compiler, as they are in C or Java.</p>
<p>Older versions of Python would see "True" and do this:</p>
<pre><code>load the symbol string "True"
go a global name lookup
use the result
</code></pre>
<p>Newer versions know about constants somewhat, so they do this:</p>
<pre><code>fetch the constant "True" (still a global name lookup)
use the result
</code></pre>
<p>Here's an example:</p>
<pre><code>&gt;&gt;&gt; import dis
&gt;&gt;&gt; def f(x):
...     if x == True:
...         print("true")
... 
&gt;&gt;&gt; dis.dis(f)

  2           0 LOAD_FAST                0 (x)
              2 LOAD_CONST               1 (True)
              4 COMPARE_OP               2 (==)
              6 POP_JUMP_IF_FALSE       16
</code></pre>
<p>On the other hand, if you skip using <code>True</code> and <code>False</code>, you can get better code, like this:</p>
<pre><code>&gt;&gt;&gt; def f(x):
...     if x:
...         print("true")
... 
&gt;&gt;&gt; dis.dis(f)
  2           0 LOAD_FAST                0 (x)
              2 POP_JUMP_IF_FALSE       12
</code></pre>
<p>That's literally 4 opcodes versus 2. Either 50% or 100% faster, depending on whether you work in marketing...</p>
</li>
<li><p>Use <code>random.choice</code> to pick a direction.</p>
</li>
<li><p>Use <code>collections.namedtuple</code> to create a Position class, instead of converting from list to tuple over and over again, and indexing all the time.</p>
<p>Turn this code:</p>
<pre><code>if (dire == 'up' or 'down') and ((player_pos[0] == pos[1][0]) or (player_pos[0] == pos[0][0])):
</code></pre>
<p>Into something like:</p>
<pre><code>if dire in (UP, DOWN) and (player_pos.x == pos[0].x or player_pos.x == pos[1].x):
</code></pre>
</li>
<li><p>Write a Position <a href="https://docs.python.org/3/library/functions.html?highlight=classmethod#classmethod" rel="nofollow noreferrer">class method</a> called <code>random</code> that takes border parameters and returns a random location therein. You can use that to get rid of the other calls to <code>random.randint</code>.</p>
</li>
<li><p>Promote all your "against the wall" code to either global constants (with NAMES_LIKE_THIS) or to an init function that you call from <code>main</code>.</p>
</li>
<li><p>Add the <code>if __name__ == "__main__":</code> block that <strike><a href="https://www.pep8.org" rel="nofollow noreferrer">PEP-8</a> mentions.</strike> is mentioned in <a href="https://docs.python.org/3/library/__main__.html" rel="nofollow noreferrer">the documentation</a>.</p>
</li>
<li><p>In <code>generate_maze</code>, and other places, stop using lists for unique collections. Use <a href="https://docs.python.org/3/library/stdtypes.html?highlight=set#set" rel="nofollow noreferrer"><code>set</code></a> instead, which has <span class="math-container">\$O(1)\$</span> query time. (Lists have <span class="math-container">\$O(n)\$</span> query time for <code>if x in list</code>.)</p>
</li>
</ol>
    </div>