<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>A Bug</h1>

<blockquote>
<pre><code>if (numOf1 &gt; 0 || numOf3 &gt; 0) {
    total++;
}
</code></pre>
</blockquote>

<p>That overcounts. The definition of "lucky number" included "if it contains both 1 and 3, it is not a lucky number", but numbers that contain both a 1 and a 3 <em>are</em> counted. The <code>break</code> in the <code>while</code>-loop exits that loop when that condition is detected, but then the code above still runs. You could use:</p>

<pre><code>if ((numOf1 &gt; 0) != (numOf3 &gt; 0)) {
    total++;
}
</code></pre>

<p>The <code>!=</code> between two booleans is a slightly tricky way to say "one of them but not both". Of course that can be written out more explicitly.</p>

<h1>An other bug</h1>

<blockquote>
<pre><code>int total = 0;
</code></pre>
</blockquote>

<p>Do you know how big the result is? By my count it's just over 3.48 billion. That's a problem, <code>int</code> only goes just over 2.14 billion. The count doesn't go over 4.29 billion, so you <em>could</em> still use <code>int</code>, and then interpret it as an unsigned integer later (eg printing <code>total &amp; 0xFFFFFFFFL</code>). But that's strange, a bit advanced, not for beginners. Using <code>long total = 0;</code> is a simpler and more sensible solution.</p>

<blockquote>
  <p><strong>Is there a way to make this more efficient for range from 10000000000 to 20000000000?</strong></p>
</blockquote>

<p>There are some specific properties of that range that you could use.</p>

<p>First, let's ignore 20000000000 itself, it contains neither a <code>1</code> nor a <code>3</code>.</p>

<p>Then, every number in the range for sure has at least one <code>1</code> in it, so you don't need to test it, this is something you already know. That would let you simplify the test to "check if there is any <code>3</code> in the number".</p>

<h1>Counting without brute force</h1>

<p>Forgetting the leading 1, the numbers in our range have 10 "variable" digits.
How many 10-digit strings of digits 0..9 <em>don't</em> have a 3 in them? Every place has 9 possible digits left instead of 10, so rather than <code>pow(10, 10)</code> it will be <code>pow(9, 10)</code>.</p>

<p><code>pow(9, 10)</code> is something that you can calculate easily, even with just <code>Math.pow(9, 10)</code>. It's normally not really proper to use <code>double</code>s for integer calculations, but this one works.</p>

<blockquote>
  <p><strong>With my implementation, it takes around 160 seconds.</strong></p>
</blockquote>

<p>Does it actually? That's an order of magnitude faster than it runs on my PC.</p>
    </div>