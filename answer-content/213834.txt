<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>On Threading</h2>
<blockquote>
<p>lockfree code is rarely easy to understand.</p>
</blockquote>
<p>I would beg to differ. It usually just hides the complex situations.</p>
<h2>On Spin Locks.</h2>
<p>Spin locks are generally not a good idea. You should be really sure that a thread caught in a spin lock will escape quickly (otherwise you are going to melt your processor).</p>
<p>But you mitigate the problem by using <code>std::this_thread::yield()</code> so this is not such a huge problem. So it is not what I would call a classic spin lock. More a spin with yield.</p>
<h2>Guaranteed escape</h2>
<p>The only issue I see is that you don't guarantee escape of the lock for a particular thread.</p>
<p>Some particular unlucky thread may be caught trying to obtain a lock while other threads zip passed and keep getting the lock forcing the unlucky thread to keep re-trying to get out of the acquire.</p>
<p>So your spin lock has the potential for some resource starvation (or worst case making the code serial).</p>
<p>This is usually achieved by maintaining an order.</p>
<h2>Documentation</h2>
<p>You need to put the explanation into the code (as comments). Putting it as an explanation for this site was nice and allowed me to understand the code. But without it the code is undecipherable.</p>
<h2>RAII</h2>
<p>You have designed your code that requires matched calls to method (this is bad practice). Also you have not show RAII lockers for this class so we must assume its use is not exception safe.</p>
<p>All four of your methods:</p>
<pre><code>        void AcquireReaderLock()
        void ReleaseReaderLock()
        void AcquireWriterLock()
        void ReleaseWriterLock()
</code></pre>
<p>Should be private members. You should only allow access to these methods via an RAII lock guard. Look at <code>std::lock</code> for an example.</p>
<h2>Best practice</h2>
<p>Minor best practice violations:</p>
<pre><code>// One declaration per line
int computedValue, initialValue;

// Why not initialize these on declaration.
initialValue = 0;
computedValue = -1;
// There is no need to ever set them again.
</code></pre>
    </div>