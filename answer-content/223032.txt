<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There is some reasonable general algorithmic and python-specific advice here. </p>

<p>The lesson that needs to precede everything is, until you know where you're spending your time, you can't work out how to speed things up. It's well worth learning to use python's cProfile or another profiling tool. </p>

<p>Here's a run with the profiler of your example. </p>

<pre><code>C:\Users\Josiah\Desktop&gt;python -m cProfile -s cumtime astar.py
[(0, 0), (1, 1), (2, 2), (3, 3), (4, 3)]
         6911416 function calls (6911411 primitive calls) in 8.103 seconds

   Ordered by: cumulative time

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.000    0.000    8.103    8.103 {built-in method builtins.exec}
        1    0.000    0.000    8.103    8.103 astar.py:2(&lt;module&gt;)
        1    0.042    0.042    8.102    8.102 astar.py:59(pfind)
    15538    6.918    0.000    6.918    0.000 astar.py:43(check_List)
     2082    0.645    0.000    1.087    0.001 {method 'sort' of 'list' objects}
  6719169    0.442    0.000    0.442    0.000 astar.py:37(sortbyF)
    16658    0.019    0.000    0.031    0.000 astar.py:28(__init__)
    15539    0.008    0.000    0.018    0.000 astar.py:22(update)
    16660    0.010    0.000    0.010    0.000 astar.py:13(__init__)
    15539    0.008    0.000    0.010    0.000 astar.py:40(manhattan)
    64394    0.004    0.000    0.004    0.000 {built-in method builtins.abs}
    33161    0.003    0.000    0.003    0.000 {built-in method builtins.len}
     2083    0.002    0.000    0.002    0.000 {method 'pop' of 'list' objects}
     8494    0.001    0.000    0.001    0.000 {method 'append' of 'list' objects}
     2083    0.000    0.000    0.000    0.000 {method 'values' of 'dict' objects}
        1    0.000    0.000    0.000    0.000 {built-in method builtins.print}
        2    0.000    0.000    0.000    0.000 {built-in method builtins.__build_class__}
      6/1    0.000    0.000    0.000    0.000 astar.py:53(recursion)
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
        1    0.000    0.000    0.000    0.000 astar.py:12(Node)
        1    0.000    0.000    0.000    0.000 {method 'reverse' of 'list' objects}
        1    0.000    0.000    0.000    0.000 astar.py:27(Child)
</code></pre>

<p>cumtime is the amount of time spent in a function and all functions it calls.<br>
tottime is the amount of time just spent in the function.</p>

<p>What you can see is that the whole run takes 8.1 seconds, and 6.9 of those are spent directly inside <code>check_List</code>. That's 85% of the whole program's runtime, and basically the only place that's worth optimising. After all, even if you got everything else to take no time at all, you'd only reduce your runtime by 15%. Your only options are call <code>check_List</code> less or make it faster. </p>

<p>The purpose of <code>check_List</code> is to determine whether <code>successor</code> is the fastest way seen thus far to get to wherever <code>successor</code> goes to. You've done that by looping over a list. It would be faster to maintain and check a dictionary of all the places you've seen thus far. </p>

<p>That is, change <code>check_list</code> to <code>check_dict</code></p>

<pre><code>def check_dict(openDict, successor):
    if (successor.x, successor.y) in openDict:
        return openDict[(successor.x, successor.y)].f &lt; successor.f
    return False
</code></pre>

<p>and instead of </p>

<pre><code>            if check_List(openlist, suc):
                continue

            openlist.append(suc)
</code></pre>

<p>You'd want </p>

<pre><code>            if check_Dict(openDict, suc):
                continue

            openlist.append(suc)
            openDict[(suc.x, suc.y)] = suc
</code></pre>

<p>My variation, which changes nothing except replacing <code>check_list</code> with <code>check_dict</code> as above, runs in 0.025 seconds instead of 8.1. </p>

<hr>

<p>You might notice that that is significantly better than an 85% speed up, which seems odd because 15% of the run time wasn't actually in <code>check_list</code> at all. </p>

<p>As it happens, my variation fixes a subtle bug that I didn't see initially. As above, <code>check_list</code> is meant to prevent you from revisiting nodes that you've already found a way to. It does that by exhaustively checking all the nodes that you are currently considering for a next step. However, that's not the same! Because of <code>current = openlist.pop(0)</code> there are some entries that you have found routes to, but are no longer part of openlist! Because you don't have any indicator to avoid going back to them, you bounce back and forth among your early nodes. </p>

<p>Patching that bug by separately storing each node you pop off into <code>current</code> and searching them as well in <code>check_list</code> gets almost as good performance as using the dictionary. Well, it doesn't. It takes 0.125 seconds on my machine, which is a whole five times slower than the dictionary, and liable to get worse as the graph gets bigger. But it's a good sight better than 8 seconds! </p>
    </div>