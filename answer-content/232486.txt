<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Option Explicit</h2>

<p><code>Option explicit</code>. <strong><em>Always</em></strong>.</p>

<h2>Strong typing</h2>

<p>VBA facilitates strong typing. This should be used because it stops VBA guessing at types which improves performance and reduces the chance of coding errors. Especially as some types/objects have default values that are not well documented!</p>

<p>This is a function, so what does it return? At the moment, it returns a <code>Variant</code> which might be OK, but your code does not reflect this requirement.</p>

<pre><code>Public Function discrete(r1 As Range, r2 As Range) As String
</code></pre>

<p>If you want it to be <code>Variant</code>, then be explicit and state that!</p>

<p>Also, another gotcha is the way variables are declared. The following lines are not doing what you think they are doing:</p>

<pre><code>Dim arr1, arr2 As Variant
Dim min, max As Double
</code></pre>

<p>In these lines, both the first variables are not declared and thus they default to <code>Variant</code>. Again, if you want a variable to be a <code>Variant</code>, then be explicit (like you tried to be in the first line above). What you really wanted was:</p>

<pre><code>Dim arr1 As Variant, arr2 As Variant
Dim min As Double, max As Double
</code></pre>

<p>By the way, <strong>kudos</strong> for declaring variables near where you are using them.</p>

<h2>Proper qualification</h2>

<p>Always put proper qualification on your objects. Excel uses defaults for things that are not properly qualified - the active sheets and cells may not be what you want! Especially in a UDF and you could have multiple workbooks open!</p>

<pre><code>Range(r2(1), r2(1).End(xlDown))
</code></pre>

<p>should be</p>

<pre><code>wb.ws.Range(r2(1), r2(1).End(xlDown)) ' wb and ws is something you define here - more notes below.
</code></pre>

<h2>Default value for <code>discrete</code></h2>

<p>You only set the value for <code>discrete</code> in a conditional (<code>If</code>) statement in a loop. What if it never fires? What would you like the user to see?</p>

<p>A simple option is to set a default value at the beginning - the most obvious is an error message. For this to work, the UDF should return a variant:</p>

<pre><code>Public Function discrete(r1 As Range, r2 As Range) As Variamt
    discrete = CVErr(xlErrValue) '&lt;-- pick an error value to suit yourself
</code></pre>

<p>Now that we have set that up - what are some other ways this can fail?</p>

<ul>
<li>user picks ranges that re not one column wide?</li>
<li>user picks two ranges that are a different size?</li>
</ul>

<p>Now you can test for this early and then exit the function - the default value will be an error and the user will have an indicator of this.</p>

<h2>Altering the parameters</h2>

<p>This is bad:</p>

<pre><code>Function discrete(r1 As Range, r2 As Range)
    [â€¦]
    Set r1 = Range(r1(1), r1(1).End(xlDown))
</code></pre>

<p>A big no-no. You should always consider the parameters on a UDF as immutable. If you want to reset the ranges, then use a temporary variable within the Function scope (e.g. <code>Dim tempRange1 as Range</code>).</p>

<p>However, you are double-guessing the user. What if they did not want to go to the end of the page? What if they had other stuff under the table?</p>

<p>By doing this manipulation, you are increasing the chances that the value arrays will be mismatched. <code>arr1(found,1)</code> may no longer have an equivalent <code>arr2(found,1)</code>!</p>

<h2>Working with arrays</h2>

<p>Yes, always practice working with arrays where you can. Even replace the <code>Application.Sum</code> call. You can never tell when your user is going to set up a 1000-value discrete array!</p>

<h2>Some suggestions</h2>

<ol>
<li>Use only a single range in the UDF call (<code>Public Function
discrete(twoColTable As Range) As Variant</code>. This reduces the
opportunity for user error. You array will be two columns
<code>arr(found,1)</code> will correspond with <code>arr(found,2)</code></li>
<li>Check your user input immediately for size and values to make sure
you are getting what you think you should. If column count does not
equal 2, or your second column is not ascending numbers then exit
with an error.</li>
<li>Traverse the array from beginning until you find a value that is
greater then your <code>n</code>. The value you want will be the one before you hit that value (i.e. go back one array index). Alternatively, traverse the array from the end until you find a value that is not greater than your <code>n</code>. This way, you do not need <code>max</code> or <code>min</code>.</li>
</ol>
    </div>