<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Several things can be improved in your existing code. First and foremost being, replacing your usage of <code>re</code> module. Regex matching is very heavy. You have a defined set of characters being replaced. Use <a href="https://devdocs.io/python~2.7/library/stdtypes#str.replace" rel="noreferrer"><code>str.replace</code></a> or <a href="https://devdocs.io/python~2.7/library/stdtypes#str.translate" rel="noreferrer"><code>str.translate</code></a>.</p>

<p>You have provided comments aptly throughout the program. However, you can place them <a href="https://www.python.org/dev/peps/pep-0257/" rel="noreferrer">as docstring</a> for the function, including the examples as <a href="https://devdocs.io/python~2.7/library/doctest" rel="noreferrer"><code>doctest</code>s</a>. There are several syntaxes to format docstrings. I am mostly aware of epytext and reStructuredText. You can search around for other common formats :).</p>

<p>You'll end up with:</p>

<pre><code>"""
Word Counter

Given an body of text, return a hash table of the frequency of each
word.
"""


def word_count(sentence):
    """
    Word Counter

    Given an body of text, return a hash table of the frequency of
    each word.

    ..  warnings::

        - Capital and lower case versions of the same word should be counted

    as the same word.

        - Remove punctuations from all words.

    ..  note::


    Where N is the number of characters in the string.

        - Time: O(N)

        - Space: O(N)

    :Example:

    &gt;&gt;&gt; word_count('The cat and the hat.')
    {'the': 2, 'cat': 1, 'and': 1, 'hat': 1}
    &gt;&gt;&gt; word_count('As soon as possible.')
    {'as': 2, 'soon': 1, 'possible': 1}
    &gt;&gt;&gt; word_count("It's a man, it's a plane, it's superman!")
    {'its': 3, 'a': 2, 'man': 1, 'plane': 1, 'superman': 1}

    :param sentence: Input string
    :type sentence: str

    :return: Returns hash-table of frequence of each word in input
    :rtype: dict
    """

    translate = sentence.maketrans({char: None for char in "'.,:*!"})
    cleaned_words = sentence.lower().translate(translate).split()
    word_counter = {}
    for word in cleaned_words:
        if word in word_counter:
            word_counter[word] += 1
        else:
            word_counter[word] = 1
    return word_counter
</code></pre>

<hr>

<p>You can also make use of <a href="https://devdocs.io/python~2.7/library/collections#collections.Counter" rel="noreferrer"><code>collections.counter</code></a> which has the same complexity as your current code. However, it also provides a few extra features on the resulting counter object, such as <a href="https://devdocs.io/python~2.7/library/collections#collections.Counter.most_common" rel="noreferrer"><code>most_common</code></a>.</p>

<hr>

<p><sub>The referenced links above are for python-2.7; however all the modules/packages are available in python 3.x</sub></p>
    </div>