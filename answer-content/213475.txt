<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I certainly endorse the use of @Quill's <code>file_get_contents_curl()</code> and using the <code>i</code> pattern modifier to enable case-insensitive searching.</p>

<p>These are my additional suggestions...</p>

<p><code>[A-Za-z0-9_]</code> is equal to <code>\w</code></p>

<p>There are many pattern refinements that could be implemented, but improving the validation will results in diminished readability and maintainability.  If you need to tighten the validation, it might be wiser to perform a "loose" sweep of the document, then <a href="https://stackoverflow.com/a/12026863/2943403">call non-regex functions to validate the email</a> ...but even php's native checks aren't completely accurate.</p>

<p>If you want to accommodate "international emails" that may contain unicode/multibyte characters, you can add the unicode pattern modifier and expand your pattern further, but I won't go down that rabbit hole.  You might have a look here: <a href="https://stackoverflow.com/a/37320735/2943403">https://stackoverflow.com/a/37320735/2943403</a></p>

<p>Basic pattern = <code>/[\w.%+-]+@(?:[a-z\d-]+\.)+[a-z]{2,4}/iu</code></p>

<ul>
<li><p><code>preg_match_all()</code> should be written as a conditional check so that your script can be halted when there is a failure or there are no matches.  In doing so, there is no need to declare an empty <code>matches()</code> array.</p></li>
<li><p>Unfortunately <code>array_unique()</code> is slower than <code>array_keys(array_flip())</code> and <code>array_flip(array_flip()</code>.  If you cared about re-indexing the array of emails, you could is the <code>array_keys()</code> technique, but because you are just imploding the array to a string the keys are irrelevant so the "double flip" is the most efficient technique. </p></li>
</ul>

<p>Suggested snippet:</p>

<pre><code>$pattern = '/[\w.%+-]+@(?:[a-z\d-]+\.)+[a-z]{2,4}/iu';
if (!preg_match_all($pattern, $contents, $emails)) {
    echo '&lt;h3&gt;No emails found&lt;/h3&gt;';
} else {
    $unique_emails = array_flip(array_flip($emails[0]));
    $count         = sizeof($unique_emails);
    $email_string  = implode(', ', $unique_emails);
    echo "&lt;h3&gt;$count email addresses in total:&lt;/h3&gt; $email_string";
}
</code></pre>

<p>Generally I recommend not declaring single-use variables, but if it improves readability or you happen to prefer shorter versus longer lines of code then there is no harm.</p>
    </div>