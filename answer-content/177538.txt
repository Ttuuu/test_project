<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Thanks for sharing your code.</p>

<p>for your request of reusing the checks you have 2 options.</p>

<p>Either one requires that you move the checks into a <em>parameterized method</em> first.</p>

<p>Before you can do that you have to understand that the current method is exited immediately when an exception is thrown. This means than you don't need the final <code>else</code> :</p>

<pre><code>class MyCalculator {
    long power(int n, int p) throws Exception {
        if(n==0 &amp;&amp; p==0) {
            throw new Exception("n and p should not be zero.");
        } else if(n&lt;0 || p&lt;0) {
            throw new Exception("n or p should not be negative.");
        } 
        return (long)Math.pow(n, p);
    }
}
</code></pre>

<p>Now you can select the complete <code>if/else</code> and invoke your IDE's <em>extract method</em> refactoring (eg. in eclipse press &lt;1&gt; to bring up the quickfix menu and find the refactoring there).</p>

<p>This will change your code to this:</p>

<pre><code>class MyCalculator {
    long power(int n, int p) throws Exception {
        verifyOperandsPreconditions(n, p);
        return (long)Math.pow(n, p);
    }
    private void verifyOperandsPreconditions(int n, int p) throws Exception {
        if(n==0 &amp;&amp; p==0) {
            throw new Exception("n and p should not be zero.");
        } else if(n&lt;0 || p&lt;0) {
            throw new Exception("n or p should not be negative.");
        } 
    }
}
</code></pre>

<p>From now on you have 2 was to go:</p>

<ol>
<li><p>legacy inheritance approach<br>
In this solution you create a super class with the check method and a subclass that does the actual work:</p>

<p>This will change your code to this:</p>

<pre><code>class MyCalculatorBaseClass {
    // mind the new scope!
    protected void verifyOperandsPreconditions(int n, int p) throws Exception {
        if(n==0 &amp;&amp; p==0) {
            throw new Exception("n and p should not be zero.");
        } else if(n&lt;0 || p&lt;0) {
            throw new Exception("n or p should not be negative.");
        } 
    }
}

class MyCalculator extends MyCalculatorBaseClass {       
    long power(int n, int p) throws Exception {
        verifyOperandsPreconditions(n, p); // call to base class method
        return (long)Math.pow(n, p);
    }
}
</code></pre></li>
<li><p>modern composition approach<br>
In this solution you use <code>MyCalculatorBaseClass</code> as a <em>dependency</em> in your <code>MyCalculator</code> class:</p>

<pre><code> class MyCalculatorChecks {
    // again we change the scope!
    public void verifyOperandsPreconditions(int n, int p) throws Exception {
        if(n==0 &amp;&amp; p==0) {
            throw new Exception("n and p should not be zero.");
        } else if(n&lt;0 || p&lt;0) {
            throw new Exception("n or p should not be negative.");
        } 
    }
}      

class MyCalculator {   
    MyCalculatorChecks checks = new MyCalculatorChecks();    
    long power(int n, int p) throws Exception {
        checks.verifyOperandsPreconditions(n, p); // call to method on dependency
        return (long)Math.pow(n, p);
    }
}
</code></pre></li>
</ol>

<hr>

<p>About the visibility scopes:</p>

<p>In both example we had to change the visibility scope of the extracted method in order to enable access from other classes.</p>

<p>I choose <code>protected</code> in the first approach to signal that this method is meant to be used by sub classes.</p>

<p>I choose <code>public</code> in the second approach to signal that this method is meant to be used by any other class.</p>

<hr>

<blockquote>
  <p>Which of the two approaches you mentioned is better? "modern composition approach or legacy inheritance approach"    – user2769790</p>
</blockquote>

<p>The  "modern composition approach" of cause. Thought my wording was clear enough...</p>

<blockquote>
  <p>And do we really need to create a separate class for a single method?  What's a good practice for interview whiteboard preparation? – user2769790</p>
</blockquote>

<p>If there is only one method to be shared: Yes.</p>

<p>But most likely you will collect several methods in one object/class. </p>

<p>On the other hand the <em>Single Responsibility Pattern</em> must be applied to that common class too which means that you might sometimes need more than one class for such common behavior. </p>
    </div>