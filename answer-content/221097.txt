<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First, at a very high level, let me say that I find the implementation straightforward to read and easy to verify correct.</p>

<hr>

<blockquote>
<pre><code>/**
 * @param {string[]} words
 * @return {number[][]}
 */
</code></pre>
</blockquote>

<p>Given the context and the fact that the code is essentially use-and-throw-away, I can understand why you didn't provide more documentation than this for <code>palindromePairs</code>. I'm not sure, though, why there isn't corresponding documentation for <code>isPalindrome</code>, which is almost certainly reusable.</p>

<hr>

<blockquote>
<pre><code>var palindromePairs = function(words) {
</code></pre>
</blockquote>



<blockquote>
<pre><code>const isPalindrome = (word) =&gt; {
</code></pre>
</blockquote>

<p>Why is one <code>var</code> and one <code>const</code>?</p>

<hr>

<blockquote>
<pre><code>      if (i !== j) {
        if (isPalindrome(words[i] + words[j])) { index.push([i, j]); }
      }      
</code></pre>
</blockquote>

<p>I would prefer a single condition instead of an extra layer of indentation:</p>

<pre><code>      if (i !== j &amp;&amp; isPalindrome(words[i] + words[j])) {
        index.push([i, j]);
      }
</code></pre>

<hr>

<blockquote>
<pre><code>  const len = word.length / 2 + 1;
  const wordLength = word.length - 1;
</code></pre>
</blockquote>

<p>I don't find these names helpful - particularly the second one, for which I would prefer something like <code>lastIndex</code>. Alternatively it can be written with two indices as</p>

<pre><code>  for (let i = 0, j = word.length - 1; i &lt; j; i++, j--) {
    if (word[i] !== word[j]) {
      return false;
    }
  }
</code></pre>

<hr>

<p>Having said all that: why was this exercise in leetcode? I suspect that the intention was to push you to a more sophisticated algorithm than this one, which is brute force. It might be a valuable exercise for you to see whether you can find a more efficient solution, perhaps using trees of some kind...</p>
    </div>