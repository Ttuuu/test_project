<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are some things that may help you improve your program.</p>

<h2>Use parentheses to clarify expressions</h2>

<p>The code contains this line:</p>

<pre><code>return (1 &lt;&lt; num_of_bits)-1 &lt;&lt; pos;
</code></pre>

<p>A programmer reading it might wonder which of the following is the correct interpretation:</p>

<pre><code>return ((1 &lt;&lt; num_of_bits)-1) &lt;&lt; pos;
return (1 &lt;&lt; num_of_bits)-(1 &lt;&lt; pos);
</code></pre>

<p>To interpret correctly (the first one), one would have to remember that according to <a href="https://en.cppreference.com/w/c/language/operator_precedence" rel="nofollow noreferrer">C operator precedence</a>, the <code>-</code> operator has higher precedence than the <code>&lt;&lt;</code> operator.  We can easily avoid this potential confusion by simply writing the code with parentheses, even though, technically, they're redunandant.</p>

<h2>Eliminate unused variables</h2>

<p>The <code>load_to_cache</code> function includes unused parameter <code>offset</code>.  If it's not used, it probably should be removed.</p>

<h2>Be wary of plain <code>char</code></h2>

<p>Whether <code>char</code> is signed or unsigned is implementation defined.  I'd suggest instead using <code>uint8_t</code> from <code>&lt;stdint.h&gt;</code> to make sure that there aren't any surprises when doing right shifts.  A short example shows the difference:</p>

<pre><code>#include &lt;stdio.h&gt;
int main() {
    signed char a = -1;
    unsigned char b = -1;
    printf("%x\n", a&gt;&gt;2);    // prints ffffffff 
    printf("%x\n", b&gt;&gt;2);    // prints 3f
}
</code></pre>

<p>For similar reasons, most of the places the code is using <code>int</code> should probably be either <code>unsigned</code> or <code>size_t</code>.</p>

<h2>Use a <code>struct</code> where appropriate</h2>

<p>The cache is just memory, of course, but with a simulation, the bytes have structure and meaning.  The code has these three lines:</p>

<pre><code>cache[set][0] = 1;
cache[set][1] = tag;
cache[set][2] = memory[memory_index][0];
cache[set][3] = memory[memory_index][1];
</code></pre>

<p>This suggests the following <code>struct</code> definition:</p>

<pre><code>#define CACHESIZE 2
typedef struct cacheline_s {
    uint8_t valid;
    uint8_t tag;
    uint8_t mem[CACHESIZE];
} cacheline;
</code></pre>

<p>Now the lines above become this:</p>

<pre><code>cache[set].valid = 1;
cache[set].tag = tag;
cache[set].mem[0] = memory[memory_index][0];
cache[set].mem[1] = memory[memory_index][1];
</code></pre>

<h2>Reconsider the interfaces</h2>

<p>Instead of this:</p>

<pre><code>if (!is_valid(cache, set, tag)) {
</code></pre>

<p>I think it might make more sense to pass only a single cache line.  Using the <code>struct</code> defined above, the function now looks like this:</p>

<pre><code>int is_valid(const cacheline *cache, int tag) {
    return cache-&gt;valid &amp;&amp; (cache-&gt;tag == tag);
}
</code></pre>

<p>Note too that we're passing a <code>const</code> pointer, advertising the fact that the underlying cacheline will not be changed by this function.  A similar interface change could be made to <code>load_to_cache</code>.</p>

<h2>Eliminate "magic numbers"</h2>

<p>This code has a number of inscrutable "magic numbers," that is, unnamed constants such as 2, 4, 8, etc.  Generally it's better to avoid that and give such constants meaningful names.  That way, if anything ever needs to be changed, you won't have to go hunting through the code for all instances of "2" and then trying to determine if this <em>particular</em> 2 is relevant to the desired change or if it is some other constant that happens to have the same value.  This is especially beneficial in cases like this in which some numbers depend on others.  For example, we can use these to make sure that the two constants are easily changed and kept consistent.  Only the first variable needs to be touched.</p>

<pre><code>#define CACHESIZE_BITS 1
#define CACHESIZE (1u &lt;&lt; CACHESIZE_BITS)
</code></pre>
    </div>