<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>ActiveSheet.PageSetup.CenterHeader = "" &amp; z &amp; ""
</code></pre>
</blockquote>

<p>There's no reason to run this instruction at every single iteration as <code>z</code> is still in the process of being concatenated, is there?</p>

<p>Move it out of the loop and assign <code>PageSetup.CenterHeader</code> <em>once</em>, only when you've figured out the entire final string value - this could have a dramatically positive impact on performance :)</p>

<p>The name of the procedure/macro should not have underscores in it; convention is to use <code>PascalCase</code> for procedure/member names.</p>

<p>The procedure is <em>implicitly</em> <code>Public</code> and could use an explicit access modifier.</p>

<p>Reading the name of the procedure I was expecting it to go through page headers and underline whatever numeric values are in there... but that's not what's happening, and the variable names aren't helping much. Take the time to spell them out, and thank yourself later!</p>

<p>That said I'd suggest taking in a <code>Workbook</code> parameter and removing the <code>ActiveWorkbook</code> and <code>ActiveSheet</code> dependencies, which force any VBA code calling this procedure to <code>Select</code> and <code>Activate</code> things, which as you know isn't ideal.</p>

<p>Actually, the procedure has too many responsibilities, that's why its name feels wrong. It should be a function that takes a <code>String</code> argument and <em>returns</em> the formatted string: that's what I would expect a "make numbers underline" procedure to do. Then another procedure can be responsible for knowing what worksheet to interact with, and for setting its <code>PageSetup.CenterHeader</code>:</p>

<pre><code>Dim headerText As String
headerText = UnderlineNumbers(ActiveWorkbook.Name)
ActiveSheet.PageSetup.CenterHeader = headerText
</code></pre>

<p>The string-valued <code>Mid$</code> function should work slightly better than the similar but variant-valued <code>Mid</code> function, and when the current character is being pulled from the string in 3 places, it's time to introduce a local variable ;-)</p>

<p>This should be pretty much instant:</p>

<pre><code>Private Function UnderlineNumbers(ByVal value As String) As String
    Dim result As String
    Dim i As Long
    For i = 1 To Len(value)
        Dim current As String
        current = Mid$(value, i, 1)
        If IsNumeric(current) Then
            result = result &amp; "&amp;U" &amp; current &amp; "&amp;U"
        Else
            result = result &amp; current
        End If
    Next
    UnderlineNumbers = result
End Function
</code></pre>
    </div>