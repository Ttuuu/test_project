<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is a nice combinatorial problem, and as suspected, there is a "mathematical solution". Brute-force actually must be avoided for larger values, as you are going over all permutations.</p>

<p>What you are looking for is an arrangement of n reds, n greens, and n blues in a row so that no two adjacent colors are the same. The number of such arrangements has been determined in:</p>

<p><a href="https://link.springer.com/article/10.1007%2FBF01819761" rel="nofollow noreferrer">Eifler, L. Q., K. B. Reid, and D. P. Roselle. "Sequences with adjacent elements unequal." Aequationes mathematicae 6.2-3 (1971): 256-262.</a></p>

<p>By just applying the formula they derive, we can do this <em>considerably</em> more efficiently:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;cmath&gt;

int nchoosek(int n, int k)
{
    if (k == 0)
    {
        return 1;
    }

    return (n * nchoosek(n - 1, k - 1)) / k;
}

int paths(int n)
{
    const int last = std::ceil(n / 2);
    int total = 0;

    for (int k = 0; k &lt;= last; ++k)
    {
        total += nchoosek(n - 1, k) * (nchoosek(n - 1, k) * nchoosek(2 * n + 1 - 2 * k, n + 1) + nchoosek(n - 1, k + 1) * nchoosek(2 * n - 2 * k, n + 1));
    }

    return 2 * total;
}
int main()
{
    for (int n = 1; n &lt;= 10; ++n)
        std::cout &lt;&lt; paths(n) &lt;&lt; " ";
    std::cout &lt;&lt; "\n";
}
</code></pre>
    </div>