<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First, this call to <code>__cxa_demangle</code> returns a buffer allocated with malloc and which must be freed. This isn't freed, so this code has a memory leak.</p>

<p>Second, as I understand it, <code>__cxa_demangle</code> does not exist in MSVC, so this is not portable.</p>

<p>Third, the <code>.find("string")</code> catches more than <code>std::string</code>. It would match <code>std::wstring</code>, <code>std::stringstream</code>, <code>void (*)(std::string)</code>.</p>

<p>Fourth, this code relies essentially on knowing the potential types that are in that <code>std::any</code>. That is knowledge at a distance, and if you allow more types at the place of construction, you need more types here.</p>

<p>Fifth, if the type isn't one of those types, the error is silent and the output is the type contained, not the value. That could be harmless, but it could be a real problem. If you allowed type <code>Foo</code> in the <code>any</code>, and neglected to update this location, you wouldn't be able to tell if the output <code>Foo</code> was that type name or the value of a string stored in the <code>any</code>.</p>

<p>The suggestion of the other answer is to constrain the types stored using the type storing them. Instead of <code>any</code> use <code>std::variant&lt;std::string, long long, unsigned long long, double&gt;</code>. I added the <code>string</code> and <code>unsigned</code> options relative to the other answer. Then just visit:</p>

<pre><code>std::visit([&amp;](const auto&amp; value) { out &lt;&lt; value; }, n.value);
</code></pre>

<p>This is a very strong option.</p>

<p>A second option would be to erase not almost every aspect of the type (as with <code>std::any</code>) but instead leave the interface you need, e.g. erase everything but the stream operator if that's all you need:</p>

<pre><code>    printable p = 2.3;
    std::cout &lt;&lt; p &lt;&lt; "\n";
    p = "foo";
    std::cout &lt;&lt; p &lt;&lt; "\n";
</code></pre>

<p>Example: <a href="https://godbolt.org/z/NtJqWk" rel="noreferrer">https://godbolt.org/z/NtJqWk</a></p>

<p>(edit: added a missing virtual destructor to impl_base)</p>
    </div>