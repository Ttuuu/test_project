<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Let's take this from the top down:</p>

<blockquote>
<pre><code>/**
 * Title: GameFunctions
 * Author: Dev
 * Date: 6/1/2019
 * Purpose: This class contains -
 * -all the functions for the game
 * */
public class GameFunctions
</code></pre>
</blockquote>

<p>This comment doesn't tell me anything new:</p>

<ul>
<li><code>Title</code> is already mentioned in the class declaration that follows</li>
<li><code>Author</code> and <code>Date</code> are already kept in version control software</li>
<li><code>Purpose</code> simply restates the class name</li>
</ul>

<p>I recommend writing a useful comment, or none at all.</p>

<blockquote>
<pre><code>{
</code></pre>
</blockquote>

<p>All major coding standards for Java put opening braces at the end of the preceeding line, not a line of their own.</p>

<pre><code>private static int attempts;
private static int randomNumber;
private static int guessRange;
private static int userGuess;
</code></pre>

<p>Keeping mutable state in static fields is unusual because it needlessly inhibits code reuse (prevents several instances of the game from running concurrently), and is somewhat verbose due to having to repeat <code>static</code> everywhere. Consider using non-static fields instead.</p>

<blockquote>
<pre><code>/*
 *  Takes care of the setup aspects of the game like
 *  Generating a new random number and finding how
 *  Many attemps the player will have
 */
private static void gameInit()
</code></pre>
</blockquote>

<p>Such initialization logic is usually expressed in a constructor, because that enforces that state is initialized before use (you can forget calling an init method, but the compiler will yell at you if your forget to call a constructor).</p>

<p>Your javadoc comment restates the implementation in its entirety. Not only is this redundant, it also violates information hiding: Javadoc is intended to inform the callers of this method about its proper use. A caller doesn't need to know which private fields are being set, and how. All a caller needs to know is when he needs to invoke this method. Since this is already being conveyed by the method name, a comment is superfluous.</p>

<blockquote>
<pre><code>   setRandomNumber();
   setAttemptsAndRange();
</code></pre>
</blockquote>

<p>As a matter of style, prefer expressing yourself in the programming language instead of through clever names (names are only understood by humans, and can not be checked by your compiler, and refactored by your refactoring tools). </p>

<p>That is, I'd have written:</p>

<pre><code>randomNumber = randomInteger(100)
guessRange = rangeOf(randomNumber)
attempts = maximumAttemptsFor(randomNumber)
</code></pre>

<p>Passing <code>randomNumber</code> allows both the compiler and future maintainers to see and check that <code>randomNumber</code> is initialized before use. </p>

<blockquote>
<pre><code>/* Displays the number of attempts the user has left */
private static void getAttempts()
</code></pre>
</blockquote>

<p>The Javadoc contradicts the method name: Do we "get" or "display" the number of attempts?</p>

<blockquote>
<pre><code>/* Gets input from the user */
private static void getInput()
</code></pre>
</blockquote>

<p>Actually, it also validates the input. A caller might want to know that he doesn't have to check the range. </p>

<p>Perhaps rename the method to <code>readGuess()</code>? That makes it clear that only guesses are returned.</p>

<blockquote>
<pre><code>* Checks to see if the guess is correct
* If it is not correct it will decrement the attempts value
*/
private static void checkGuess()
</code></pre>
</blockquote>

<p>The method implementation also displays feedback about the guess. A caller might want to know that.</p>

<blockquote>
<pre><code>/* Tells the user their win/loss status and asks them to play again */
private static void playAgain()
</code></pre>
</blockquote>

<p>The Javadoc and method name seem at odds. What does "playing again" have to do with a win/loss status?</p>

<blockquote>
<pre><code>/* Main game loop */
public static void playGame()
{
    while (gameRunning)
    {
        gameInit();
        while (attempts &gt; 0 &amp;&amp; userGuess != randomNumber)
        {
            getInput();
            checkGuess();
        }
        playAgain();
    }
}
</code></pre>
</blockquote>

<p>Well done! By structuring your program into steps, each in their own named method, the main method gives a very good overview of your program, and makes it very easy and quick to drill down to a particular part of the code.</p>

<p>However, why is this excellent summary at the <em>end</em> of your source file? Wouldn't it do more good if it were the <em>first</em> thing the reader of this class sees? </p>

<p>And a last nitpick: your summary reads a variable (<code>gameRunning</code>), but doesn't express when that variable is set. This could be seen a mixing layers of abstraction.</p>

<p>All that said, here is a sketch how I'd write it:</p>

<pre><code>public class GuessingGame {

    public static void main(String... args) {
        do {
            new GuessingGame().play();
        } while (playAgain());
    }

    private final int secretNumber;
    private final int guessRange;
    private int remainingAttempts;

    public GuessingGame() {
        secretNumber = randomInteger(100);
        guessRange = guessRange(secretNumber);
        remainingAttempts = maximimumAttempts(secretNumber);
    }

    public void play() {
        while (remainingAttempts &gt; 0) {
            remainingAttempts--;

            int guess = readGuess();
            if (guess == secretNumber) {
                display("You won!);
                return;
            }
            display(hint(guess));
        }
        display("You lost!");
    }

    // more utility methods go here
}
</code></pre>

<p>PS: This review held your code to professional standards. For a beginner, you did very well! Should you want to learn more about writing maintainable code, I can recommend <a href="https://rads.stackoverflow.com/amzn/click/com/0132350882" rel="noreferrer">"Clean Code" by Robert C. Martin</a> - he may be a bit dogmatic at times, but his arguments are well worth considering.</p>
    </div>