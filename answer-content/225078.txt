<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>General</h1>

<p>Compile with <code>-Wall -Wextra -pedantic-errors</code>.  Warnings are preferable to runtime problems.  Sometimes I also compile with <code>-ftrapv</code> to avoid signed overflow.</p>

<p>You are doing much of the work inside <code>main</code>.  This violates the one responsibility principle.  Consider extracting a function <code>to_English</code> to do the actual work.  Also, your program becomes clueless after reaching EOF or invalid input.  A better <code>main</code> function looks like:</p>

<pre><code>int main()
{
    for (int num; std::cout &lt;&lt; "Input: ", std::cin &gt;&gt; num;)
        std::cout &lt;&lt; to_English(num) &lt;&lt; "\n";
}
</code></pre>

<p>In this case, the input process is simple, so I put it in the loop condition.  You may want to extract as a separate <code>get_number</code> function for more sophisticated input.</p>

<p>You do not need to store the strings in vectors.  Just concatenate them in place.</p>

<h1>Code</h1>

<pre><code>#include &lt;iostream&gt;
#include &lt;vector&gt;
</code></pre>

<p>You are missing <code>#include &lt;string&gt;</code>.</p>

<pre><code>std::vector&lt;int&gt;         const magnitudes = {1000000000, 1000000, 1000, 1};
</code></pre>

<p>Using <code>int</code> to hold values outside of the range <span class="math-container">\$-32\,768 \le n &lt; 32\,768\$</span> is nonportable.  Use, for instance, <code>int_least32_t</code>, instead.  (You need to <code>#include &lt;cstdint&gt;</code>)  Write an alias for this to express the intent more explicitly: <code>using number_t = std::int_least32_t</code>, and use it consistently throughout the code.</p>

<pre><code>std::string name_for_group_of_3(int group);
</code></pre>

<p>The name of the function is not entirely clear, but I cannot think of a better name either.  Maybe add a comment.</p>

<pre><code>std::string join_vector(std::vector&lt;std::string&gt; vector, std::string joiner);
</code></pre>

<p>Don't pass <code>vector</code>s and <code>string</code>s by value.  Pass by const reference instead.  Also, <code>join_strings</code> may be a better name in my opinion.</p>

<pre><code>for (int i = 0; i &lt; vector.size(); i++) {
for (int i = 0; i &lt; vector.size(); i++) {
if (i &lt; vector.size()-1) {
</code></pre>

<p>These lines trigger <code>-Wsign-compare</code>.  Use <code>std::size_t</code> or <code>std::vector&lt;std::string&gt;::size_type</code> instead of <code>int</code>.  <a href="https://stackoverflow.com/a/484492">Use <code>++i</code> instead of <code>i++</code></a>.</p>

<pre><code>// group should be 0...999
if (group &lt; 0 || group &gt; 999) {
    throw "Bad grouping provided!";
}
</code></pre>

<p>Never throw a string literal.  Throw a <code>std::invalid_argument</code> instead.  Also, an assertion may be better for logical errors.</p>
    </div>