<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think everything <a href="https://codereview.stackexchange.com/a/186538/159615">Sam Onela</a> said is great. I'm gonna add a few more things.</p>

<hr>

<h1>Don't modify your state directly</h1>

<p>In general, it's considered bad practice to directly modify your state object. According to the <a href="https://reactjs.org/docs/react-component.html#state" rel="noreferrer">react docs</a>:</p>

<blockquote>
  <p>Never mutate this.state directly, as calling setState() afterwards may replace the mutation you made. Treat this.state as if it were immutable.</p>
</blockquote>

<p>Instead you should either</p>

<ul>
<li>Pass <code>setState</code> an object with only what you want to change (I chose this)</li>
<li>Clone your state, modify the clone, then pass it to <code>setState</code></li>
</ul>

<h1>Stop using <code>index</code> like that</h1>

<p>Using <code>index</code> in your loops introduces another variable you don't need, and actually makes things slightly less correct.</p>

<h3>Don't use <code>index</code> for <code>key</code> prop</h3>

<p>The <code>key</code> prop should be a unique key to identify that element.
The most unique things we have about each of these checkboxes is the name that goes with them.
If we rearranged this list, we would want the same names to stay checked, not the same indexes in the list.</p>

<h3>Don't use <code>index</code> as an <code>id</code></h3>

<p>At least not directly.
You want your ids to be unique on the page, and using the ids <code>1</code>, <code>2</code>, <code>3</code>, etc. seems like not a good way to be unique. It would be better to use something like <code>${checkbox}-${key}</code> so we get <code>"checkbox-Sonia"</code>, <code>"checkbox-Maria"</code>, etc.</p>

<p>It also used to be the case that ids needed to start with a letter and not a number, but I believe this is <a href="https://stackoverflow.com/questions/70579/what-are-valid-values-for-the-id-attribute-in-html">no longer the case</a>.</p>

<h1>You don't need an extra <code>data</code> layer in your state</h1>

<p>It just adds needless comlexity. Just put the checkbox values right in your state, and only move them when you need to do more complex things with your state.</p>

<pre><code>this.state = {
  Sonia: false,
  Maria: false,
  John: false,
  Michael: false
};
</code></pre>

<h1><code>handleClick</code> can be way simpler</h1>

<p>One line in fact:</p>

<pre><code>handleClick(key) {
    this.setState({ [key]: !this.state[key] });
}
</code></pre>

<p>Heck, it's so small that I would probably even put it inline, but different people might disagree on that.</p>

<h1>Revised Version</h1>

<p>Here's what my revised version of the code would look like:</p>

<pre><code>class App extends React.Component {
  constructor(props) {
    super(props);
    // I guess you don't have props, so it doesn't really matter,
    // but you need to pass them to `super()` if you want them
    // to be available on `this.props`

    // Doesn't need the extra `data` layer
    this.state = {
      Sonia: false,
      Maria: false,
      John: false,
      Michael: false
    };
  }

  // handleClick was inlined

  render() {
    return (
      &lt;div&gt;
        &lt;form&gt;
          {Object.keys(this.state.data).map((key) =&gt; (
            &lt;div key={key}&gt;
              &lt;input
                name={key}
                id={`checkbox-${key}`}
                type="checkbox"
                checked={this.state.data[key]}
                onChange={() =&gt; this.setState({ [key]: !this.state[key] })}
              /&gt;

              &lt;span className="padding"&gt;
                {/* Don't need a `key` prop here */}
                &lt;label htmlFor={`checkbox-${key}`}&gt;
                  {key}
                &lt;/label&gt;
              &lt;/span&gt;
            &lt;/div&gt;
          ))}
        &lt;/form&gt;
        &lt;div className="center"&gt;
          &lt;h2&gt;Current State: &lt;/h2&gt;
          &lt;ul&gt;
            {Object.keys(this.state).map(key =&gt; (
              &lt;li key={key}&gt;{`${key}: ${this.state.data[key]}`}&lt;/li&gt;
            ))}
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    );
  }
}
</code></pre>

<p>Note that this does still use an arrow function and not a bound method.
I think that this lets to code be much more readable, and the possible performance loss wouldn't be realized until you have components that implement <code>PureComponent</code> deeper in the call chain receiving this function (currently it goes directly to an <code>&lt;input&gt;</code>.</p>
    </div>