<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It looks like your script is part of a basic ajax searching technique.</p>

<ul>
<li><code>$_POST</code> is typically used when writing to the database (or when there is a distinct reason that <code>$_GET</code> is unsuitable). Since you are merely SELECTing data, just use <code>$_GET</code>.</li>
<li>if you are going to validate your incoming data, don't bother acquiring resources until after you have validated the incoming data and determined that it qualifies for a trip to the database.  If you are going to default to SELECTing the whole table, then it doesn't matter.</li>
<li>it looks like if params 1 and 2 are missing, you are happy to perform a full table SELECT.  So why deny the full table SELECT if <code>details</code> isn't declared?</li>
<li><code>empty()</code> is greedy -- it is looking for any falsey value.  Even the string <code>0</code> - which has a length of 1 - is deemed empty. Perhaps do a <code>strlen()</code> check instead.</li>
<li>I don't think that trimming should be forced on the data if part of a search string -- maybe the user wants to include the space.</li>
<li>don't <code>htmlspecialchars()</code> as an attempt to improve security.  The prepared statement is going to protect you from string injections.  This call should be used when printing to screen, not querying the db.</li>
<li>I think you have a typo in your second WHERE condition in that you mean to use a second LIKE but you have used <code>=</code> and kept the <code>%</code> appended to the value.</li>
<li>I recommend that you design your table names and column names as lowercase strings to differentiate them from MYSQL keywords.</li>
<li>you are not performing an data manipulations on the result set in this layer, so it will be more direct to <code>fetchAll()</code></li>
<li>always provide a response string from this script; ideally every response should be json so that your response receiving script can be simpler.</li>
<li>never show end users the raw error message. Give them a vague indication of an error and nothing more.</li>
<li>As @YourCommonSense commented, you should move your <code>$conn-&gt;setAttribute</code> call your include file.</li>
<li>Normal execution of your script will not be generating any errors.  Catching the errors will prevent the logging of the errors.  I recommend removing the try catch block.  For continued researching, <a href="https://codereview.stackexchange.com/a/227420/141885">start here</a>. </li>
</ul>

<p>Code:</p>

<pre><code>$conditions = [];
$parameters = [];   

foreach (['param1' =&gt; 'COLUMN1', 'param2' =&gt; 'COLUMN2'] as $param =&gt; $column) {
    if (isset($_GET['details'][$param]) &amp;&amp; strlen($_GET['details'][$param])) {
        $conditions[] = $column . " LIKE ?";
        $parameters[] = $_GET['details'][$param] . "%";
    }
}

include("../include/database.php");
$select = "SELECT COLUMN1, COLUMN2 FROM table";
if ($conditions) {
    $select .= " WHERE " . implode(" AND ", $conditions);
}          
$stmt = $conn-&gt;prepare($select);
$stmt-&gt;execute($parameters);
echo json_encode($stmt-&gt;fetchAll(PDO::FETCH_ASSOC));
</code></pre>

<hr>

<p>In your ajax call, do not tell declare the response type as <code>html</code> -- it's not html, it is json.  In doing so, you won't need to <code>parse</code> it.</p>
    </div>