<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The initial strategy that I thought of was iterating through possible multiplicands, and checking whether the product is monotonic. You seem to be instead iterating through monotonic numbers, and checking whether they're divisible. This may be a better way of doing it, but it can be implemented in a simpler manner. For one thing, you seem to be re-generating the list of monotonic numbers for each number in <code>div</code>. Instead, you should generate a monotonic number, and then check it against all the numbers in <code>div</code>. You can speed this up even more by deleting numbers from <code>div</code> as solutions are found. Another issue is how you're generating monotonic numbers. Your method is rather convoluted and I don't fully understand it, but I'm pretty sure it's not optimal. Monotonic numbers can be generated through the following algorithm:</p>

<ol>
<li>If the number consists solely of n nines, then the next number consists of n+1 ones.</li>
<li>Otherwise:
a) find the last non-nine digit.
b) Add one to this digit.
c) Replace the original digit, and all following, with this sum.</li>
</ol>

<p>For instance, suppose you have 11239. The last non-nine digit is 3. Add one and get 4. Then replace the 3 and all digits after it with 4, and get 11244.</p>

<p>The following code found solutions for 147 out of the 162 target numbers in 86 seconds. Presumably, increasing <code>max_number_length</code> would get more of them. (and making it less verbose would probably save some time)</p>

<pre><code>start = time.time()
max_number_length = 20
not_found = div.copy()
found = 0
for number_length in range(1,max_number_length):
    print("Checking length {}".format(number_length))
    product_as_str = '1'*number_length
    product_as_int = int(product_as_str)
    while True:        
       reverse_product = int(product_as_str[::-1]) 
       for num in not_found:
           if not product_as_int%num:
               found = found+1
               print(num, product_as_int//num, product_as_int,found, time.time()-start)
               not_found.remove(num)                 
           elif not reverse_product%num:
               found = found+1
               print(num, reverse_product//num, reverse_product, found, time.time()-start)
               not_found.remove(num)                  
       if product_as_str == '9'*number_length: break
       for last_non_nine_position in range(number_length-1,-1,-1):
           if product_as_str[last_non_nine_position] !='9': break                  
       next_value = str(int(product_as_str[last_non_nine_position])+1)
       product_as_str = product_as_str[: last_non_nine_position]+ next_value*(number_length-last_non_nine_position)
       product_as_int = int(product_as_str)
print(time.time()-start)
</code></pre>

<p>EDIT: the above find decreasing numbers with <code>reverse_product = int(product_as_str[::-1])</code>, but it will look at higher numbers first. To get decreasing numbers, I believe this algorithm will work:</p>

<ol>
<li>If the number is n nines, then the next number should be n+1 ones</li>
<li>Otherwise: a) find the first digit that's smaller than the one before it. If there are no such numbers, use the first digit. b) add one to that digit c)replace every digit after that one with ones.</li>
</ol>
    </div>