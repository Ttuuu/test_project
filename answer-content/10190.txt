<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>RoToRa is absolutely correct. A few other considerations:</p>

<ul>
<li><p>A dot is a valid property name part. Whatcha gonna do when:</p>

<p>var x = {};
x["blah.blam"] = "bloo";</p></li>
<li><p>Why are you checking hasOwnProperty? This would exclude any usage of prototype inheritance.</p></li>
</ul>

<p>For the above reasons I would recommend against using this as a general utility function. However, if this is going to be a specific utility (for example you're trying to create a simple data-binding framework where you know you won't have to worry about the above) this might be the rare legitimate use of the controversial <a href="https://developer.mozilla.org/en/JavaScript/Reference/Statements/with" rel="nofollow">with statement</a>.</p>

<pre><code>var x = {
  blah: {
     blam: "bloo"
  }
}
with(x) {
  console.log(blah)
}
with(x){
  console.log(blah.blam)
}
</code></pre>

<p>To take you the rest of the way you use the even more maligned <code>eval</code>:</p>

<pre><code>var extract = function(obj, path, rescue){
  with(obj) {
    return eval(path) || rescue;
  }
}
</code></pre>

<p>Yes this doesn't do all the type checks that you do above but why do you need them? </p>

<p>Now let me be clear</p>

<h2>It is possible to expose an XSS vulnerability for your users here</h2>

<p>Specifically if you allow users to enter values which are posted back, persisted on the server, downloaded by other users, and then used with this function on their computers.</p>

<p>Suppose you are doing binding to objects which users can customize. These can be arbitrarily nested so you use this pattern. You also have summary screens in which users can view other users' customizations.</p>

<p>All an attacker has to do is create a property named <code>some javascript code that steals browser information</code> and it will be eval'ed and run on the machines of other users of the system.</p>

<p>That's the danger. If you're aware of it and make sure that condition never happens, feel free to use the with-eval.</p>
    </div>