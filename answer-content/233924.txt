<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Separation of concerns</h1>

<p>The <code>NeuralNetwork</code> class is quite complex at the moment, since it implements network handling (training, ...), logging and even visualization. The good news is, that there are already separate methods for them. My recommendation here would be to go one step further and move all the non-essential stuff (logging setup, visualization) out of the class. That will make the class much easier to maintain (and also to review). It will also very likely lead to greater flexibility, e.g. since the logging would not be hidden from the user.</p>

<h1>Internal functions</h1>

<p>There are quite a few internal/helper methods in the class that are only supposed to be used by the class itself, e.g. in <code>__init__</code>. As per the <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP 8 style guide</a>, their names should <a href="https://www.python.org/dev/peps/pep-0008/#descriptive-naming-styles" rel="nofollow noreferrer">start with a single underscore</a> (e.g. <code>def _check_input_output_dimension(...)</code> to mark them as "for internal use only" (there is no real <code>private</code> in Python). Following this convention makes it easier to tell the public and internal methods apart.</p>

<h1>Activation and derivatives</h1>

<p>All the activation functions and their derivatives are stateless, i.e. they don't really need to be instance methods. Consider removing them from the class and provide them as callbacks when describing the network structure. For example:</p>

<pre><code># they could also live in your library, maybe with a bit of documentation
def sigmoid(x):
    return 1 / (1 + np.exp(-x))

def sigmoid_derivative(x):
    return sigmoid(x) * (1 - sigmoid(x))

# later or in an other file:

nn_architecture = [
    {
        "layer_type": "input_layer",
        "layer_size": 2,
        "activation_function": None
    }, 
    {
        "layer_type": "hidden_layer",
        "layer_size": 2,
        "activation_function": {
            "function": sigmoid,
            "derivative": sigmoid_derivative
        }
    }, 
    {
        "layer_type": "output_layer",
        "layer_size": 2,
        "activation_function": {
            "function": sigmoid,
            "derivative": sigmoid_derivative
        }
    }
]
</code></pre>

<p>That will remove a lot of complexity from your implementation of various methods (e.g. <code>activation_derivative</code> and <code>activate_neuron</code>) and also makes it more extensible and flexible, since it's now up to the user to define new activation functions (and their derivative). Best practice implementations of the most common activation functions could still be part of your library, and you can even implement a helper function that does something like the following:</p>

<pre><code>def get_activation(name):
    if name == "sigmoid":
        return {"function": sigmoid, "derivative": sigmoid_derivative}
    elif name == "linear":
        return {"function": linear, "derivative": linear_derivative}
    elif ...:
        ...
    # at the last line
    except ValueError(f"No known activation function for name '{name}'")
</code></pre>

<p>or a dict</p>

<pre><code># a missing name would lead to a KeyError here, that maybe should be handled
# when used somewhere.
# also possible: implement get_activation from above using this dict,
# catch and transform the KeyError there
ACTIVATION = {
    "sigmoid": {"function": sigmoid, "derivative": sigmoid_derivative},
    "linear": {"function": linear, "derivative": linear_derivative},
    ...
}
</code></pre>

<p>This can also be hidden in your network, that if the user enters a string as it is now, the network class uses either of the two methods above and tries to determine which functions to use, while still providing the possibility to provide custom functions as well.</p>

<h1>Type annotations and documentation</h1>

<p>From what I can see, there are a few cases where the type annotations don't seem to fit. E.g.</p>

<blockquote>
<pre><code>def relu_derivative(self, x: List[float]) -&gt; List[float]:
    x[x &lt;= 0] = 0
    x[x &gt; 0] = 1
    return x
</code></pre>
</blockquote>

<p>This won't work with <code>List[float]</code>, but is tailored to numpy arrays. I'd try to annotate the with <code>np.ndarray</code>, but the numpy developers don't seem to have settled on a best practice in that regard yet (see <a href="https://github.com/numpy/numpy/issues/7370" rel="nofollow noreferrer">this GitHub issue</a>). I don't use type annotations all to much, so maybe I'm wrong here. But they are not binding, so there is not a lot that can go wrong in that regard apart from confusing other programmers and some tools like <a href="http://mypy-lang.org/" rel="nofollow noreferrer">mypy</a> ;-)</p>

<p>Since you are otherwise following the <a href="https://numpydoc.readthedocs.io/en/latest/format.html" rel="nofollow noreferrer">numpydoc</a> convention, a quick note on that regard: most numpy functions that can work both with Python types (<code>list</code>s, <code>tuple</code>s, ...) and numpy arrays, define the input/output type to be <code>array_like</code> (see <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.sin.html" rel="nofollow noreferrer"><code>np.sin</code></a> for example).</p>

<h1>Logging</h1>

<p>Logging is a great functionality to have at hand, but there can be vastly different needs. My recommendation in that regard would be not to impose any kind of details on the user. There is simply no need to force a European date format on somebody from somewhere else or force them to have their log written to a file, especially if they can neither control the name nor the location the log file is written to. Simply allow the user to pass an (optional) logger when building the network, and work with that. What happens if no logger is provided is up to you. Either setting up a simple console logger or no logging at all are sensible defaults in my opinion.</p>

<h1>Tool support</h1>

<p>It was already mentioned in a comment on the other answer, that there are quite a few typos in comments and method names (e.g. <code>visulize</code> â†’ <code>visualize</code>). There are tools like <a href="https://github.com/codespell-project/codespell" rel="nofollow noreferrer">codespell</a> or language plugins for the IDE of your choice (e.g. <a href="https://marketplace.visualstudio.com/items?itemName=streetsidesoftware.code-spell-checker" rel="nofollow noreferrer">Code Spell Checker</a> for VS Code) that can help you in that regard.</p>

<p>There are also a lot of other tools in the Python ecosystem that can help you to keep a consistent code style and the like. A non-exhaustive list can be found at <a href="https://codereview.meta.stackexchange.com/a/5252/92478">this answer</a> here on Code Review Meta.</p>

<hr>

<p>That's it for now. I would strongly recommend to implement at least some of these changes before bringing the class up for another round of review. Including them will make it much easier to judge the implementation of the core algorithms itself, since I'd reckon they are a lot easier to follow then.</p>
    </div>