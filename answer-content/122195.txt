<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You should divide your solution into functions. Also you could implement a rotate function with templates. </p>

<hr>

<p><strong>Alternative</strong></p>

<p>A solution easier and a lot more simple ( Also O(n) in time and O(1) in space) is using a reverse function. Example: </p>

<pre><code>void reverse(int* begin, int* end) {
    while (begin &lt;-- end) {
        std::swap(*begin++, *end);
    }
}

void rotate(int* begin, int* end, int k) {
    int N = end - begin;
    int shift = k % N;
    if (shift &lt; 0) shift += N;

    reverse(begin, end);
    reverse(begin, begin + shift);
    reverse(begin + shift, end);

}
</code></pre>

<p>Using the reverse function in the standard library and templates you get: </p>

<pre><code>template&lt;typename R&gt;
void rotate(R begin, R end, int k) {

    int N = end - begin;
    int shift = k % N;
    if (shift &lt; 0) shift += N;

    std::reverse(begin, end);
    std::reverse(begin, begin + shift);
    std::reverse(begin + shift, end);
}
</code></pre>

<p><strong>Algorithm example</strong> </p>

<p>Suppose you want to rotate <code>(1,2,3,4,5,6,7)</code> by 3.</p>

<p>First you reverse the whole input:</p>

<pre><code>(7,6,5,4,3,2,1)
</code></pre>

<p>Then reverse the range [0, 3)</p>

<pre><code>(5,6,7,4,3,2,1)
</code></pre>

<p>and finally reverse the range [3, 7) resulting in</p>

<pre><code>(5,6,7,1,2,3,4)
</code></pre>

<p>Since reverse does <code>floor(N / 2)</code> swaps this solution traverses the input only once.</p>
    </div>