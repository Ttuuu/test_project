<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The <code>TryParse</code> or <code>TryGetValue</code> pattern is often used in the .NET Class Library and is a good approach. In order to fully comply with it, you should always return the type's default value <code>default(T)</code> for the output parameter when the parsing fails. For reference types this is always <code>null</code>:</p>

<pre><code>public static bool TryParse(string expression, out OrderExpression orderExpression) {
    if (_parser.ExpressionIsValid(expression)) {
        orderExpression = new OrderExpression { Rules = _parser.Parse(expression) };
        return true;
    } else {
        orderExpression = null;
        return false;
    }
}
</code></pre>

<p>An <code>out</code> parameter must be assigned before leaving the method anyway. You'll get a compiler error otherwise.</p>

<hr>

<p>Also, in C#, the C# type aliases are usually preferred over the .NET type names. I.e.: use <code>string</code> instead of <code>System.String</code>, <code>bool</code> instead of <code>System.Boolean</code>, <code>int</code> instead of <code>System.Int32</code> and so on. (Personally, I prefer to use the .NET type name when accessing static members: <code>Int32.TryPare(...)</code>.)</p>

<hr>

<p>When calling a method, the return value can be ignored in C#, but here, it seems logical to react differently, depending on the outcome of the parsing:</p>

<pre><code>if(OrderExpression.TryParse(expression, out orderExpression)) {
    // Use orderExpression.
} else {
    // Handle the error case.
}
</code></pre>

<hr>

<p>A comment regarding the logic: Order expressions usually have to be executed in a specific order, however, a <code>HashSet&lt;T&gt;</code> is unordered. Return a <code>List&lt;OrderExpression&gt;</code> instead. Also, the setter can be private.</p>

<pre><code>public List&lt;OrderRule&gt; Rules { get; private set; }
</code></pre>

<hr>

<p><strong>UPDATE</strong></p>

<p>Since C# 6.0 you can declare getter-only auto-properties. You can set them in the constructor or in a property initializer.</p>

<p>To set the <code>Rules</code> property I declare a constructor. It can be private to force a client to use the static <code>TryParse</code> factory method.</p>

<pre><code>public class OrderExpression
{
    private OrderExpression(List&lt;OrderRule&gt; rules)
    {
        Rules = rules;
    }

    public List&lt;OrderRule&gt; Rules { get; }

    public static bool TryParse(string expression, out OrderExpression orderExpression)
    {
        if (_parser.ExpressionIsValid(expression)) {
            orderExpression = new OrderExpression(_parser.Parse(expression));
            return true;
        } else {
            orderExpression = null;
            return false;
        }
    }
}
</code></pre>

<p>Since C# 7.0 you can declare the out-parameter in-line</p>

<pre><code>string expression = "+name;-age;-city";
if (OrderExpression.TryParse(expression, out var orderExpression)) {
    //TODO: use orderExpression.
} else {
    //TODO: handle pare error.
}
</code></pre>
    </div>