<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If you're using <code>SELECT TOP 1 1</code> in an effort to improve performance, know that this isn't always what will happen. In particular, the <code>TOP</code> operator can constrain the ability of the optimizer to pick the best plan. <code>SELECT 1</code> inside of a <code>EXISTS</code> will do just fine in 99.9% of cases.</p>

<p>Additionally, I find it easier to read this:</p>

<pre><code>SELECT @isInsert = COUNT( * )
  WHERE EXISTS( SELECT 1 FROM inserted )
</code></pre>

<p>This will always set <code>@isInsert</code> to either 1 or 0, and reduces the amount of necessary code.</p>

<hr>

<p>In some cases, using functions like <code>OBJECT_SCHEMA_NAME</code> can actually impair performance by causing blocking (can't find a reference, but at least observationally it has been found to be true before). Also, you don't even need it - you know the name of your table already.</p>

<hr>

<p>Instead of your big <code>IF</code> <code>ELSE</code> block, you could do this:</p>

<pre><code>SET @operation = CASE WHEN @isInsert = 1 AND @isDelete = 1 THEN 'UPDATE'
                      WHEN @isInsert = 1 THEN 'INSERT'
                      ELSE 'DELETE' END

SET @body = STUFF( ( SELECT CHAR(13) + CHAR(10) + FormattedColumnResults + '| ' + OperationType
                       FROM ( SELECT 'columnname' + RTRIM( columnname ) FormattedColumnResults,
                                     'INSERTED' OperationType
                                FROM inserted
                              UNION ALL
                              SELECT 'columnname' + RTRIM( columnname ) FormattedColumnResults,
                                     'DELETED' OperationType
                                FROM deleted ) ModifiedRows
                      FOR XML PATH(''), TYPE ).value('(./text())[1]', 'varchar(MAX)' ), 1, 2, '' )
</code></pre>

<p>Here I'm relying on the fact that setting <code>@operation</code> is very simple, and then using <code>STUFF</code> to safely concatenate values. In particular, your previous result was using unsupported syntax, and could have ended up giving incorrect results. This also doesn't need to be worried about whether or not the value is actually inserted/deleted, because those tables would just be empty.</p>

<hr>

<p>Lastly, if the email fails you should probably log that to a table (and include the message you would have sent) so the information can be recovered later (and someone knows to troubleshoot your trigger)</p>
    </div>