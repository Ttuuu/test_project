<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I would not directly write to the console.</p>

<p>You are best off building an <code>ILogger</code> interface, then create a <code>ConsoleLogger</code> class that is passed as an <code>ILogger</code> to the constructor.</p>

<pre><code>public interface ILogger
{
    void LogMessage(string message, params Object[] args);
}

public class ConsoleLogger : ILogger
{
    public void LogMessage(string message, params Object[] args)
    {
        Console.WriteLine(string.Format(message, args));
    }
}
</code></pre>

<p>This allows you to break responsibilities away, and if in the future you wish to log messages directly to the <strong>Event Log</strong> instead, this allows you to make a class:</p>

<pre><code>public class EventLogger : ILogger
{
    // ...
}
</code></pre>

<p>In the class handling all your work above (no class name is supplied) you would add:</p>

<pre><code>private ILogger _Logger;

public ClassName(ILogger logger)
{
    _Logger = logger;
}
</code></pre>

<p>And modify all the <code>Console.WriteLine</code> calls to:</p>

<pre><code>logger.LogMessage(/* ... */);
</code></pre>

<p>This is much more extensible, and allows you to unit test easier as well.</p>

<p>Additionally, if you wish to support a lack of a <code>ILogger</code>:</p>

<pre><code>if (logger != null) { logger.LogMessage(/* ... */); }
</code></pre>

<p>I know this seems like an irrelevant suggestion, but simple changes like this can go a long way for future maintainability.</p>
    </div>