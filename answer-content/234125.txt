<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The question is whether <code>a</code> ("all in one") or <code>b</code> + <code>c</code> ("better abstraction") is better.
Better abstraction <em>is</em> generally better, but here one would start with separating
logic and printing.</p>

<p>The real advantage of <code>a</code> is the flexibility of coding. To be shown below.</p>

<p>Then there is the naming, <code>c</code> should have a different name. K.H. said it all.</p>

<p>However the code is is better analized in the version <code>a</code>, and could be optimized</p>

<pre><code>/**
 * The maximal distance of the same char at two different positions,
 * with the characters inbetween are different.
 * @param s the text.
 * @return the maximal distance.
 */
public static int maxDistance_a(String s) {
    char[] chs = s.toCharArray();

    int max = 0;
    int maxI = 0;
    // Redundant: int maxJ = 0;

    for (int i = 0; i &lt; chs.length - max; i++) {
        for (int j = i + 1; j &lt; chs.length - max; j++) {
            if (chs[i] == chs[j]) {
                if ((j - i) &gt; max) {
                    max = j - i;
                    maxI = i;
                    // Redundant: maxJ = j;
                }
                break; // No "x...x...x".
            }
        }
    }
    int maxJ = maxI + max;
    logger.info("Max " + max + " at " + maxI + " and " + maxJ);
    return max;
}
</code></pre>

<p>As you see the intermediate max found can be used to limit the loops.</p>

<pre><code>public static int maxDistance_a(String s) {
    int max = 0;
    int maxI = 0;

    for (int i = 0; i &lt; s.length() - max; i++) {
        char ch = s.charAt(i);
        int j = s.indexOf(ch, i + 1);
        if (j != -1) {
            if ((j - i) &gt; max) {
                max = j - i;
                maxI = i;
            }
        }
    }
    logger.info("Max " + max + " at " + maxI + " and " + (maxI + max));
    return max;
}
</code></pre>

<p>Instead of chars, charAt is still possible, using indexOf. So prematurely introducing a function for the inner loop is not clever.</p>

<p>There is more. You could consider <em>code points</em> instead of chars, as a char is just a UTF-16 value, which for many Unicode code points fits, but is a bit of an abuse.</p>

<p>You could make the text canonical using <code>java.text.Normalizer</code>. A letter with an accent can either be composed to a single Unicode code point, or decomposed as a Unicode Latin letter and a zero-width diacritical mark (accent).</p>
    </div>