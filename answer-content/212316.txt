<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Using a state machine is fine, but is usually harder to get right than writing the parser with focus on the grammar. You're also mixing a computation with the parsing which adds more information to consider when analyzing the code. 
I would recommend to separate the parser code from the computation and then writing the parser strictly following the grammar you want to parse. I'll try to illustrate what I mean by giving a simplified version of your parser. Say you have a grammar:</p>

<pre><code>formula = *(group)
group = element [ count ]
element = uppercase [ lowercase ]
count = "0" .. "9"
</code></pre>

<p>You can now give a function for each non-terminal:</p>

<pre><code>
// formula = *(group)   ; * becomes while (...) ...
std::list&lt;group&gt; parse_formula(std::stringstream&amp; s)
{
    std::list&lt;group&gt; rv;

    while (!s.eof())
    {
        rv.push_back(parse_group(s));
    }

    return rv;
}

// group = element [ count ]
group parse_group(std::stringstream&amp; s)
{
    group g;
    group.element = parse_element(s);
    try
    {
        group.count = parse_count(s);
    }
    catch (const parse_failed&amp;)
    {
        group = 1;
    }
}

// element = uppercase [lowercase]
std::string parse_element(std::stringstream&amp; s)
{
    if (!std::isupper(s.peek()))
    {
        throw parse_failed(...);
    }

    std::string element = s.get();;

    if (std::islower(s.peek()))
    {
        s.get(ch);
        element += ch;
    }

    return element;
}

// count = [0-9]
unsigned parse_count(std::stringstream&amp; s)
{ 
    if (!std::isdigit(s.peek()))
    {
        throw parse_failed(...);
    }

    unsigned rv; 
    s &gt;&gt; rv; // this actually violates the grammar as it reads multiple digits
    return rv;
}
</code></pre>

<p>You can then iterate over the list of groups and compute the sum.</p>
    </div>