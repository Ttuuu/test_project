<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>General recomendations</p>

<ol>
<li>Prefer immutable classes without <code>add()</code>, <code>set()</code>, etc. It leads to simple programs without errors. </li>
<li>Avoid the inheritance. Honestly I thick there are only few cases when it's appropriate.</li>
<li>Use streams. They help to do lazy traversing or many collection operations.</li>
<li>Also I'm big fan of Kotlin language so I recomend you to try it (but this does not relate to the topic).</li>
</ol>

<p>Here is my prototype:</p>

<pre><code>public class Temp {

    public static void main(String[] args){
        Item log = new Item("log", Collections.emptyList());
        Item wood = new Item("wood", Arrays.asList(new Component(log, 1f/4f)));
        Item stick = new Item("stick", Arrays.asList(new Component(wood, 1f/4f)));
        Item stone = new Item("stone", Collections.emptyList());
        Item axe = new Item("axe", Arrays.asList(new Component(stick, 2f), new Component(stone, 3f)));

        List&lt;Component&gt; axeComponents = getSimpleComponentsOf(new Component(axe, 1f)).collect(Collectors.toList());

        System.out.println(StringUtils.join(axeComponents.stream().map(Component::toString).collect(Collectors.toList()), ", "));
    }


    public static Stream&lt;Component&gt; getSimpleComponentsOf(Component component){
        if (component.item.components.isEmpty()) return Stream.of(component);
        return component.item.components.stream()
                .map(it -&gt; new Component(it.item, it.number * component.number))
                .flatMap(it -&gt; getSimpleComponentsOf(it));
    }

    static class Item {
        public final String name;
        public final List&lt;Component&gt; components;

        Item(String name, List&lt;Component&gt; components) {
            this.name = name;
            this.components = components;
        }
    }

    static class Component {

        public final Item item;
        public final float number;

        Component(Item item, float number){
            this.item = item;
            this.number = number;
        }

        @Override
        public String toString() {
            return "Component(item = " + item.name + ", number = " + number + ")";
        }
    }
}
</code></pre>

<p>Output:</p>

<pre><code>Component(item = log, number = 0.125), Component(item = stone, number = 3.0)
</code></pre>
    </div>