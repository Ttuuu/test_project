<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>So, it can get a bit confusing, but it's doable with <code>xor</code>ing your values:</p>

<pre><code>const xor = (a, b) =&gt; !a ^ !b;
const onlyOne = (a, b, c) =&gt; xor(xor(xor(a, b), c), a &amp;&amp; b &amp;&amp; c)
</code></pre>

<p>Or alternatively, since <a href="https://math.stackexchange.com/questions/293793/prove-xor-is-commutative-and-associative"><code>xor</code> is associative</a>:</p>

<pre><code>const onlyOne = (a, b, c) =&gt; !!a ^ !!b ^ !!c ^ (a &amp;&amp; b &amp;&amp; c)
</code></pre>

<p>Can be optimized even further by removing some redundant computations:</p>

<pre><code>const onlyOne = (a, b, c) =&gt; !a ^ !b ^ !c ^ !(a &amp;&amp; b &amp;&amp; c)
</code></pre>

<p>Doing a straight <code>xor</code> on all 3 values leaves room for them all to be true, but then we just <code>xor</code> that value in to get our results.</p>

<p><a href="https://i.stack.imgur.com/NlA2v.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/NlA2v.png" alt="enter image description here"></a></p>

<p>Also, the reason <code>xor(a, b) != a ^ b</code> is to convert those values to boolean beforehand. It's nice that with booleans <code>a ^ b === !a ^ !b</code>.</p>

<p><strong>Edit:</strong> I didn't heed my own advice, with the last statement. Removed 2 <code>!</code> (not) computations by removing the double negation to coerce into boolean.</p>
    </div>