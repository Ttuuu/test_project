<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>So I think you can improve the efficiency of your code like this.</p>

<p>First, as I said in one comment, you can replace:</p>

<pre><code>s=len(line.split('|'))
a=line.split('|')[s-3]
</code></pre>

<p>by</p>

<pre><code>a=line.split('|')[-3]
</code></pre>

<p>as no need to know the total length of a <code>list</code> to get the third element from the end.</p>

<p>Second, assigning <code>a</code> then <code>b</code> with a value take some times, you can do it in one line:</p>

<pre><code>a=line.split('|')[-3]
b=a.split('/')[0]
</code></pre>

<p>becomes</p>

<pre><code>b=line.split('|')[-3].split('/')[0]
</code></pre>

<p>Third, I'm not sure <code>len</code> can equal to <code>None</code>, maybe you wanted to check for 0, but if our code run like this, I would say that:</p>

<pre><code>if len(b.split('.'))==None:
    ''
else:
    b=b.split('.')[0]
</code></pre>

<p>is not useful so you can calculate directly the final <code>b</code> with:</p>

<pre><code>b=line.split('|')[-3].split('/')[0].split('.')[0]
</code></pre>

<p>Forth, because actually you don't need to assign <code>b</code> anymore, you can append the value into <code>rows</code> directly, such as:</p>

<pre><code>rows=[]
for line in f:
    rows.append(line.split('|')[-3].split('/')[0].split('.')[0])
</code></pre>

<p>or as a list comprehension:</p>

<pre><code>rows = [line.split('|')[-3].split('/')[0].split('.')[0] for line in f]
</code></pre>

<p>Fifth, again, you create <code>df_temp</code> to use it once and then delete it, you can <code>append</code> directly into <code>df_final</code> such as:</p>

<pre><code>df_temp= pd.DataFrame(columns=['hostname'],data=rows)
df_final=df_final.append(df_temp,ignore_index=True) 
del df_temp
</code></pre>

<p>is better this way:</p>

<pre><code>df_final=df_final.append(pd.DataFrame(columns=['hostname'],data=rows),
                         ignore_index=True) 
</code></pre>

<p>Ultimately, <code>rows</code> is not necessary anymore, so all the code from the line <code>with ...</code> until the line <code>del ...</code> can be written:</p>

<pre><code>with gzip.open(tt,'rt') as f:
    df_final=df_final.append(pd.DataFrame(columns=['hostname'],
                                          data=[line.split('|')[-3].split('/')[0].split('.')[0] for line in f]),
                             ignore_index=True) 
</code></pre>

<p>So far, I think we saved some time, but I know that appening dataframe in a loop is not the best practice, especially because you need to assign again <code>df_final</code> each time. It's better to add all the dataframes that you want to append together in a <code>list</code>, and then use <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.concat.html" rel="nofollow noreferrer"><code>pd.concat</code></a> outside of the loop. Your code becomes:</p>

<pre><code>list_final = []
for file in listi:
    tt=os.path.join(directory,file)
    with gzip.open(tt,'rt') as f:           
        list_final.append(pd.DataFrame(columns=['hostname'],
                                       data=[line.split('|')[-3].split('/')[0].split('.')[0] 
                                             for line in f]))
df_final = (pd.concat(list_final,ignore_index=True)
              .groupby(["hostname"]).size().reset_index(name="Topic_Count"))
</code></pre>

<p><strong>Timing</strong></p>

<p>I create one file with around 3 millions of rows, running you method was 8.9 seconds while mine was 5.8 (a gain more than 30%). I run the code on a <code>listi</code> containg 10 of this file, and your method gave more than 91 seconds (a bit more than stricly 10 times the method with one file) while mine was about 57 seconds (a bit less than 10 times the method for just one file). </p>

<p>I don't know about all the multiprocessing or serializing calculations in Python, but it may be a good option too.</p>
    </div>