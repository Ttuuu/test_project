<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Type hints</h2>

<pre><code>"""
    Attributes:
        name(str): Activity Name
        iid(str): Activity ID, uniquely identifies the activity
        start(str): Start Time
        end(str): End Time
        parent()
"""
</code></pre>

<p>It's nice that you've documented these types, but it would be better to tell Python (or at least your IDE) about them:</p>

<pre><code>def __init__(self, name: str, start: datetime, end: datetime, ...):
   self.name: str = name
   self.start: datetime = start
   ...
</code></pre>

<p>Note that if a variable is a time, it should actually be represented with a time type and not a string.</p>

<h2>Boolean expressions</h2>

<pre><code>return True if self.parent is not None else False
</code></pre>

<p>should be</p>

<pre><code>return self.parent is not None
</code></pre>

<h2>Todo methods</h2>

<p>Rather than <code>pass</code>, you should <code>raise NotImplementedError()</code>.</p>

<h2><code>__str__</code></h2>

<p>Rather than string-izing a tuple like this:</p>

<pre><code>    return str((self.name, self.iid, self.start, self.end, self.parent, self.priority))
</code></pre>

<p>you should probably be more deliberate and format a string, such as</p>

<pre><code>return f'{self.name}: iid={self.iid} time={self.start}-{self.end}'
</code></pre>

<h2>Dynamic args</h2>

<pre><code>    if activity.has_parent():
            self.activity_tree.insert(activity.parent, 'end', activity.iid, text=activity.name, values=(activity.start, activity.end, activity.priority))
    else:            
            self.activity_tree.insert('', 'end', activity.iid, text=activity.name, values=(activity.start, activity.end, activity.priority))
</code></pre>

<p>can be</p>

<pre><code>parent = activity.parent if activity.has_parent() else ''
self.activity_tree.insert(parent, 'end', activity.iid, text=activity.name, values=(activity.start, activity.end, activity.priority))
</code></pre>

<h2>Dictionary literals</h2>

<pre><code>    self.activity_input = {}
    self.activity_input['name'] = ttk.Entry(self.adder_pane), ttk.Label(self.adder_pane, text="Activity name:")
    self.activity_input['start'] = ttk.Entry(self.adder_pane), ttk.Label(self.adder_pane, text="From :")
    self.activity_input['end'] = ttk.Entry(self.adder_pane), ttk.Label(self.adder_pane, text="To :")
    self.activity_input['priority'] = ttk.Entry(self.adder_pane), ttk.Label(self.adder_pane, text="Priority:")
</code></pre>

<p>can be</p>

<pre><code>self.activity_input = {
    'name': (ttk.Entry(self.adder_pane), ttk.Label(self.adder_pane, text="Activity name:")),
    'start': (ttk.Entry(self.adder_pane), ttk.Label(self.adder_pane, text="From :")),
    ...
}
</code></pre>
    </div>