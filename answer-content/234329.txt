<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Below are some of my rules.  Yours may differ.</p>

<ul>
<li>Embrace the pointer, and pointer auto-increment.  Indexes are ok, but so are pointers.</li>
<li>Avoid the trap that all <strong>if</strong> statements must test a <strong>boolean</strong> value.  In C <strong>if</strong> statements can evaluate or test char, int, or even float.</li>
<li>The test <code>if (*a == '\0')</code> is ok, but <code>if (*a)</code> is shorter.  Shorter is better.</li>
<li>Dont feel guilty for putting a return in the middle of your code.  Not all subroutines must return or exit out of the bottom.</li>
<li>Some prefer <code>while (1){ }</code>, but <code>for (;;){ }</code> is also pretty.  Maybe even prettier.</li>
<li>It's not really an infinite loop if it has a <code>break</code> or <code>return</code> in it.</li>
<li>Avoid using <code>break;</code> where <code>return;</code> would be better.</li>
<li>Avoid nesting loops and if statements three or more deep.</li>
<li>Small is simple.  Simple is correct. Go for correct first.  Then speed it up if you must.</li>
<li>Once I write some code, I first ask myself, is it correct and can I make it smaller?</li>
</ul>

<p>My favorite C implementation of strstr. It's not boyer-moore fast, but it is small.</p>

<pre><code>   char * strstr (const char *haystack, const char *needle) {
      const char * a = haystack, *b = needle;
      for (;;) {
         if ( !*b ) return NULL;
         if ( !*a ) return haystack;
         if ( *a++ == *b++ ) continue;
         a = ++haystack;
         b = s2;
      }
    }
</code></pre>
    </div>