<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I like they way you thought about the problem but it has some downsides..</p>
<p>(The answer will only focus on the <em>Strategy Design Pattern</em> and ignores the use of the <em>Singleton Pattern</em>)</p>
<hr>
<h1>Without the Strategy Pattern</h1>
<p>Let us compare the design you provide with a different approach:</p>
<pre class="lang-java prettyprint-override"><code>class Calculator {

    int add(int a, int b) {
        return a + b;
    }

    int substract(int a, int b) {
        return a - b;
    }

    int multiply(int a, int b) {
        return a * b;
    }

    int divide(int a, int b) {
        return a / b;
    }
}

class Main {

    public static void main(String... args) {
        Calculator c = new Calculator();

        System.out.println(c.add(5 ,2));

        System.out.println(c.substract(5 ,2));

        System.out.println(c.multiply(5 ,2));

        System.out.println(c.divide(5 ,2));
    }

}
</code></pre>
<p>The benefits of the new approach are:</p>
<ul>
<li>only 2 instead of 7 classes</li>
<li>simply usage - no need to change the strategy for each operation</li>
</ul>
<p>As you can see the <em>strategy pattern</em> adds to much complexity to this simple problem.</p>
<h1>Strategy Pattern is not made for this Use Case</h1>
<p>The benefit of the Strategy Design Pattern is that it <a href="https://en.wikipedia.org/wiki/Strategy_pattern#cite_note-1" rel="nofollow noreferrer">enables selecting an algorithm at runtime</a>.</p>
<p>But <em>algorithm</em> is not meant to switch between different types of calculations; it is much more about switching between different behaviors for different types of calculators.</p>
<h1>A Possible Use Case</h1>
<p>Imagine you want to sell your calculator and a potential customer has a 7-day trial period before he has to buy it. During the trial period the customer can only use <code>add</code> and <code>subtract</code>. If the customer does not buy the calculator after the trial period, no methods can be used.</p>
<p>For this problem presentation we could have three types of calculators:</p>
<ul>
<li>trail-calculator</li>
<li>purchased calculator</li>
<li>unpurchased calculator</li>
</ul>
<h2>First Try without the Strategy Pattern</h2>
<p>We could create 3 classes (to make it easy, I'll just demonstrate with <code>add</code>) and then we'll see the downside:</p>
<pre class="lang-java prettyprint-override"><code>class PurchasedCalculator {

    int add(int a, int b) {
        return a + b;
    }

}

class UnpurchasedCalculator {

    int add(int a, int b) {
        throw NotPurchasedExecption()
    }

}

class TrialCalculator {
    
    int add(int a, int b) {
        return a + b;
    }

    int multiply(int a, int b) {
       throw NotPurchasedExecption();
    }
    
}

</code></pre>
<p>The downside of this approach is that we have many code duplication every where.</p>
<h2>Second Try with the Strategy Pattern</h2>
<p>To avoid code duplication and the flexibility not to create a new class for each calculator type, we can use the <em>Strategy Pattern</em>:</p>
<pre class="lang-java prettyprint-override"><code>class Calculator {
    /* ... */
    
    Calculator(CalculationStrategy additionStrategy,
               CalculationStrategy substractionStrategy,
               CalculationStrategy multiplicationStrategy,
               CalculationStrategy dividitionStrategy) {
        this.additionStrategy = additionStrategy;
        this.substractionStrategy = substractionStrategy;
        this.multiplicationStrategy = multiplicationStrategy;
        this.divideStrategy = divideStrategy;
    }

    int add(int a, int b) {
        return additionStrategy.calculate(a, b);
    }

    /* ... */
}
</code></pre>
<p>We can easy create different calculator types:</p>
<pre><code>class Main {

    public static void main(String... args) {

        Calculator trial = new Calculator(new AdditionStrategy(), 
                                          new SubstractionStrategy(),
                                          new NotPurchasedStrategy(),
                                          new NotPurchasedStrategy());

        Calculator purchased = new Calculator(new AdditionStrategy(), 
                                              new SubstractionStrategy(),
                                              new MultiplicationStrategy(),
                                              new DividitionStrategy());

        Calculator unpurchased = new Calculator(new NotPurchasedStrategy(), 
                                                new NotPurchasedStrategy(),
                                                new NotPurchasedStrategy(),
                                                new NotPurchasedStrategy());

    }

}
</code></pre>
<p>Or modify the behavior at runtime - for instance the customer did not pay his subscription:</p>
<pre class="lang-java prettyprint-override"><code>Calculator purchased = new Calculator(new AdditionStrategy(), 
                                      new SubstractionStrategy(),
                                      new MultiplicationStrategy(),
                                      new DividitionStrategy());

purchased.setAdditionStrategy(new NotPurchasedStrategy());
/*...*/
</code></pre>
    </div>