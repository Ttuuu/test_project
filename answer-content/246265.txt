<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Overview</h2>
<p>Akki has done a fine job on the review.
Some things I want to emphasize:</p>
<hr>
<p>You pass things by value rather than using const references.</p>
<pre><code>vector&lt;string&gt; splitStr(string const&amp; line, const char delimiter = ',')
                               ^^^^^^
                               otherwise you are copying the line.

string makeCSVLine(vector&lt;string&gt; const&amp; splitLine)
                                  ^^^^^^
                                  Copying a vector of strings that has to hurt.
</code></pre>
<hr>
<p>Rather than build a string for output. Have a formatter object that knows how to convert stream your object (that is more C++ like).</p>
<pre><code> std::cout &lt;&lt; MyFormat(splitLine);
</code></pre>
<p>Now the <code>MyFormat</code> is an object that simply keeps a reference to the <code>splitLine</code>.</p>
<pre><code> struct MyFormat
 {
      std::vector&lt;std::string&gt; const&amp;   data;
      MyFormat(std::vector&lt;std::string&gt; const&amp; data) :data(data) {}
 };
</code></pre>
<p>But then you write an output formatter that knows how to stream the object:</p>
<pre><code> std::ostream&amp; operator&lt;&lt;(std::ostream&amp; str, MyFormat const&amp; value)
 {
      return str &lt;&lt; value.data[0] &lt;&lt; ","
                 &lt;&lt; value.data[22] &lt;&lt; "\n";
 }
</code></pre>
<hr>
<p>I refer you to my CSVIterator</p>
<p><a href="https://stackoverflow.com/a/1120224/14065">How can I read and parse CSV files in C++?</a></p>
<hr>
<p>Something that has turned up in this optimization battle. The use of <code>string_view</code> definitely helps in terms of performance (not really surprising on that).</p>
<p>But the nicest thing is simply updating the interface to use <code>string_view</code> and re-compiling working without changing the rest of the code.</p>
<h2>This should work</h2>
<pre><code>#include &lt;iterator&gt;
#include &lt;iostream&gt;
#include &lt;fstream&gt;
#include &lt;sstream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;

class CSVRow
{
    using size_type = std::string::size_type;

    public:
        std::string_view operator[](std::size_t index) const
        {
            // Note the m_data[x] items point at where the
            // the ';' is. So there is some extra +1 to move to
            // the next item and when calculating lengths.
            return std::string_view(&amp;m_line[m_data[index] + 1], m_data[index + 1] -  (m_data[index] + 1));
        }
        std::size_t size() const
        {
            // The m_data vector contains one more item
            // than there are elements.
            return m_data.size() - 1;
        }
        void readNextRow(std::istream&amp; str)
        {
            std::getline(str, m_line);

            m_data.clear();
            m_data.emplace_back(-1);
            size_type pos = 0;
            while((pos = m_line.find(';', pos)) != std::string::npos)
            {
                m_data.emplace_back(pos);
                ++pos;
            }
            // This checks for a trailing comma with no data after it.
            pos   = m_line.size();
            m_data.emplace_back(pos);
        }
    private:
        std::string               m_line;
        std::vector&lt;size_type&gt;    m_data;
};


std::istream&amp; operator&gt;&gt;(std::istream&amp; str, CSVRow&amp; data)
{
    data.readNextRow(str);
    return str;
}

class CSVIterator
{
    public:
        typedef std::input_iterator_tag     iterator_category;
        typedef CSVRow                      value_type;
        typedef std::size_t                 difference_type;
        typedef CSVRow*                     pointer;
        typedef CSVRow&amp;                     reference;

        CSVIterator(std::istream&amp; str)  :m_str(str.good()?&amp;str:NULL) { ++(*this); }
        CSVIterator()                   :m_str(NULL) {}

        // Pre Increment
        CSVIterator&amp; operator++()               {if (m_str) { if (!((*m_str) &gt;&gt; m_row)){m_str = NULL;}}return *this;}
        // Post increment
        CSVIterator operator++(int)             {CSVIterator    tmp(*this);++(*this);return tmp;}
        CSVRow const&amp; operator*()   const       {return m_row;}
        CSVRow const* operator-&gt;()  const       {return &amp;m_row;}

        bool operator==(CSVIterator const&amp; rhs) {return ((this == &amp;rhs) || ((this-&gt;m_str == NULL) &amp;&amp; (rhs.m_str == NULL)));}
        bool operator!=(CSVIterator const&amp; rhs) {return !((*this) == rhs);}
    private:
        std::istream*       m_str;
        CSVRow              m_row;
};

class CVSRange
{
    std::istream&amp;   stream;
    public:
        CVSRange(std::istream&amp; str)
            : stream(str)
        {}
        CSVIterator begin() const {return CSVIterator{stream};}
        CSVIterator end()   const {return CSVIterator{};}
};
class ReFormatRow
{
    CSVRow const&amp;   row;
    public:
        ReFormatRow(CSVRow const&amp; row)
            : row(row)
        {}
        friend std::ostream&amp; operator&lt;&lt;(std::ostream&amp; str, ReFormatRow const&amp; data)
        {
            str &lt;&lt; data.row[0] &lt;&lt; ','
                &lt;&lt; data.row[1] &lt;&lt; ','
                &lt;&lt; data.row[3] &lt;&lt; ','
                &lt;&lt; data.row[4] &lt;&lt; ','
                &lt;&lt; data.row[5] &lt;&lt; ','
                &lt;&lt; data.row[6] &lt;&lt; ','
                &lt;&lt; data.row[10] &lt;&lt; ','
                &lt;&lt; data.row[9] &lt;&lt; ','
                &lt;&lt; data.row[11] &lt;&lt; ','
                &lt;&lt; data.row[7] &lt;&lt; ','
                &lt;&lt; data.row[32] &lt;&lt; '\n';
            return str;
        }
};
</code></pre>
<p>Then the main becomes really simple:</p>
<pre><code>int main(int argc, char* argv[])
{
    if (argc != 3) {
        std::cerr &lt;&lt; "Bad Arguments\n";
        return -1;
    }

    std::ifstream       input(argv[1]);
    std::ofstream       output(argv[2]);

    for(auto&amp; row : CVSRange(input))
    {
        if(row[3][0] == 'E' || row[3][0] == 'T')
        {
            output &lt;&lt; ReFormatRow(row);
        }
    }
    return 0;
}
</code></pre>
    </div>