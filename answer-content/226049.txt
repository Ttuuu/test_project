<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This will be a rather general review since there is a decent chunk of code, and a lot of it contains rather non-helpful variable names. I'm also not a Java expert so I won't be able to suggest things such as built-in features that already solve your problem as I don't know very many of them.</p>

<hr>

<h2>Variable Naming</h2>

<p>The variables do not have names that are helpful. Short names like sc are ok if they are localized to one part of the code where the type and use give enough context to know what they are. But jvKV, lHM, and st are rather short and are scattered everywhere. </p>

<p>I think the issue stems from the problem that the names seem to be based on the implementation rather than on an idea. Does the name jvKV need to include the detail that it is a Java KeyValue? Why not just a KeyValue? If you decided that a linked hashmap was no longer the best choice of data structure, but that you instead need to use a tree hashmap, you are left with two not so great choices</p>

<ol>
<li>Rename lHM to tHM and hope you don't miss any references to it. Did you remember to update the docs? And the comments? And the debugging print statements?</li>
<li>Keep the now out of date name.</li>
</ol>

<p>Neither option is desirable so try and avoid them by leaving implementation details out of the name. This can be very hard in practice.</p>

<hr>

<h2>main</h2>

<p>I'm not confident in this advice, so take it with a grain of salt. The first class looks like this</p>

<pre><code>public class JavaKeyValue {
    ...
    private static JavaKeyValue jvKV;
    ...
    public static void main(String[]args) {
    ...
        jvKV.doAction(action);
    ...
    public void doAction(String action) {
    ...
</code></pre>

<p>This smells a bit funny to me, mixing static things like main with non-static instance calls like doAction. Should they be in the same class? I would reach for a driver class that essentially manages the main method, and leave JavaKeyValue alone to do the business logic.</p>

<pre><code>public class Driver {
    public static void main(String[] args) {
        JavaKeyValue xxx = new...
        ...
        String action = xxx.readUserAction();
        xxx.doAction(action);
    }
}
</code></pre>

<hr>

<h2>User Input</h2>

<p>The Scanner sc is hard at work running around the place. I think you should give it a break by separating reading input from creating a table. The new signature could be something like</p>

<pre><code>public void createNewTable(String status, int rows, int cols)
</code></pre>

<p>and reading the number of rows and columns is done in a method to itself.</p>

<hr>

<pre><code>for(int b=0; b&lt;3; b++) {
    value = 32+(int)(Math.random()*numbersofAscii);
    charVal = (char)value;
    textFile += charVal;
}
textFile+=",";
for(int c=0; c&lt;3; c++) {
    value = 32+(int)(Math.random()*numbersofAscii);
    charVal = (char)value;
    textFile += charVal;
}
</code></pre>

<p>This is repeated code, and a good candidate for a method</p>

<pre><code>public String threeRandomCharacters() {
    // Generate 3 ASCII characters from code the code range [32, 125]
    // SIDENOTE: Why is this limited to 125 instead of 127?
    String result = "";

    int numberOfPrintableASCIICharacters = 93;
    for(int i=0; i&lt;3; i++) {
        value = 32 + (int)(Math.random()*numberOfPrintableASCIICharacters);
        result += (char)value;
    }
    return result;
}
</code></pre>

<p>When isolated to a method, it looks like there might be a couple of problems with the code. Does it uniformly generate ASCII characters? Is the loop necessary with only 3 iterations? Luckily this is far easier to test now that it is a function by itself.</p>

<hr>

<pre><code>doAction(String action) {
    switch(action.toUpperCase()){
</code></pre>

<p>What happens if the user makes a mistake when inputting the action. PRITN will just fall through the cracks and might do something unexpected.</p>

<hr>

<pre><code>newValue = sc.nextLine();
newValue = newValue.substring(0,3);
</code></pre>

<p>This sort of truncation of the user input is rather unexpected. Is it necessary? If so, is there some way of telling the user, like repeating back the input you received, or including the truncation as a message before entering the value.</p>

<hr>

<pre><code>public LinkedHashMap kvTextPairTolHM(LinkedHashMap lHM) {
    lHM = new LinkedHashMap&lt;String, String&gt;();
    Pattern pattern = Pattern.compile("\\( ((.{3})\\,(.{3})) \\)");
    ...
</code></pre>

<p>This seems very overkill for such a simple pattern. The regex pattern is exaggerated due to matching special symbols, but still. Here is some example psuedocode that hopefully captures all the assumptions made in the regex implementation.</p>

<pre><code>Map keyValueTextToMap() {
    String text = this.text;
    // The text pair is of the form "( XXX,XXX )"
    // where X is an ASCII character in the range [32, 125]
    if text.length() != 11 ERROR
    if text.substring(0, 3) != "( " ERROR
    if text.substring(9)    != " )" ERROR
    if text.charAt(5)       !=  '," ERROR
    String item, key, value = text.substring(...
    Map map = new Map&lt;&gt;()
    map.put(key, value)
    return map
}
</code></pre>

<hr>

<pre><code>LinkedHashMap editKey(String oldKey, String newKey, LinkedHashMap lHM)
</code></pre>

<p>I think the return value here should be a result; good if the key edit was successful and bad if it fails for any reason. Returning the map doesn't make much sense as you can't do anything with the returned map that you couldn't have done with the original. Bad might also indicate why the edit failed which you may want to log, but the editKey method should not be printing to stdout.</p>

<hr>

<pre><code>for(int i=0; i&lt;=text.length()-searchText.length(); i++) {
    comparison="";
    for(int a=0; a&lt;searchText.length(); a++) {
        comparison += text.charAt(i+a);
    }
    if(comparison.equals(searchText)) {
        occurences += 1;
    }
}
</code></pre>

<p>This looks like it could be a lot nicer to read if you use some built-in methods. Unfortunately I don't know which ones. Maybe replacing the loop building comparasion with text.substring(i, i + searchText.length()) will work?</p>
    </div>