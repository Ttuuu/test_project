<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>void removeDuplicates(std::string&amp; str)
</code></pre>

<p>Are we <strong>removing</strong> elements or <strong>erasing</strong> elements?  The function name tells me one thing, the actual algorithm does the other.  In the <code>&lt;algorithm&gt;</code> library, we have <a href="https://en.cppreference.com/w/cpp/algorithm/remove" rel="nofollow noreferrer"><code>std::remove</code>/<code>std::remove_if</code></a>.  Removing is described as follows:</p>

<blockquote>
  <p>Removing is done by shifting (by means of move assignment) the elements in the range in such a way that the elements that are not to be removed appear in the beginning of the range. Relative order of the elements that remain is preserved and the physical size of the container is unchanged. Iterators pointing to an element between the new logical end and the physical end of the range are still dereferenceable, but the elements themselves have unspecified values (as per MoveAssignable post-condition). A call to remove is typically followed by a call to a container's erase method, which erases the unspecified values and reduces the physical size of the container to match its new logical size.</p>
</blockquote>

<p>Sounds exactly like what we're aiming for, but it doesn't actually call <code>erase()</code>.  If your algorithm is going to be designed to remove elements, then just remove elements.  Return an iterator to one-past the last element moved and let the caller invoke <code>erase()</code> (see <a href="https://en.wikipedia.org/wiki/Erase%E2%80%93remove_idiom" rel="nofollow noreferrer">Erase-Remove Idiom</a>).</p>

<pre><code>std::string::iterator removeDuplicates(std::string&amp; str) { ... }

int main() {
    auto s = std::string{"aaaaaa"};
    s.erase(removeDuplicates(s), s.end());
    std::cout &lt;&lt; s; // Outputs "a"
}
</code></pre>

<hr>

<pre><code>    int flag = 0;
</code></pre>

<p>C++ has a boolean type (<code>bool</code>).</p>

<p><code>flag</code> is a bad name.  Names are a nifty way to express intent or purpose.  Since <code>flag</code> is flagging if a duplicate exists, why not name it <code>duplicate_exists</code>?</p>

<pre><code>    bool duplicate_exists = false;
</code></pre>

<hr>

<pre><code>        int len = str.length();
        for (int i = 0; i &lt; len - 1; ++i) {
            for (int j = i + 1; j &lt; len - 1; ++j)
</code></pre>

<p><code>std::string::length()</code> returns a size of type <code>std::string::size_type</code> (<code>std::size_t</code> typically).  You have a conversion to <code>int</code> here (<code>-Wconversion</code>).</p>

<p>Every time you call <code>str.erase()</code>, you are reducing the physical length of <code>str</code> by 1.  However, your loop exit conditions use a cached value of the original length.  Consider the following inputs:</p>

<pre><code>removeDuplicates("a")      -&gt; No Duplicate, "a"
removeDuplicates("aa")     -&gt; No Duplicate, "aa" &lt;&lt; Both Wrong.
removeDuplicates("aaa")    -&gt; Duplicate,    "aa" &lt;&lt; String is wrong.
removeDuplicates("aaaa")   -&gt; Duplicate,    "aa" &lt;&lt; String is wrong.
removeDuplicates("aaaaa")  -&gt; Segmentation Fault.
</code></pre>

<p>If you simply just <code>str.length()</code> on every iteration, you won't have the segfault issue, but you'll still have logic issues in generating a deduplicated string.  The standard algorithms use the shifting method to avoid the extra logic required to deal with erase and string lengths.</p>

<hr>

<pre><code>            if (str[i] == std::toupper(str[j])
             || str[i] == std::tolower(str[j]))
</code></pre>

<p>"If a necessary feature has a high astonishment factor, it may be necessary to redesign the feature" (<a href="https://en.wikipedia.org/wiki/Principle_of_least_astonishment" rel="nofollow noreferrer">Principle of least astonishment</a>).No where in the problem statement, in your understanding of the problem, function names, or in comments is there a mention that this is case-insensitive. For this problem, I would expect \$A \neq a\$.  Follow the requirements of the problem and document changes like this.</p>

<hr>

<pre><code>    if (flag == 0) {
        std::cout &lt;&lt; "There are no duplicate characters\n";
    } else {
        std::cout &lt;&lt; "There are duplicate characters\n";
    }
</code></pre>

<p>Should this function be writing to the console? Following the <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" rel="nofollow noreferrer">single responsibility principle</a>. This function should focus on removing duplicates and another function, like the caller, can report to the console.</p>
    </div>