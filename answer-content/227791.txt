<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>Since you're already calling <code>.apply</code>, I'd stick with that approach to iteration rather than mix that with a list comprehension.</p></li>
<li><p>It's generally better to avoid making data modifications in-place within a function unless explicitly asked to (via an argument, like <code>inplace=False</code> that you'll see in many Pandas methods) or if it's made clear by the functions name and/or docstring.</p></li>
<li><p>The logic is reasonably complex, so it might be clearer as a named function. </p></li>
<li><p>The leading <code>_</code> in the function name is usually reserved for "private" functions, whereas this seems to be a general utility function. It's fine if you don't want external code to touch it, that's just not clear from this code snippet.</p></li>
</ul>

<p>Here's one way you might re-write the function to follow these tips:</p>

<pre><code>def format_floats(df):
    """Replaces all float columns with string columns formatted to 6 decimal places"""
    def format_column(col):
        if col.dtype != float:
            return col
        return col.apply("{:.6f}".format)

    return df.apply(format_column)
</code></pre>

<p>And a usage example:</p>

<pre><code>In [1]: format_floats(pd.DataFrame([{'a': 1, 'b': 2.3}, {'a': 2, 'b': 3.0}]))
Out[1]:
   a         b
0  1  2.300000
1  2  3.000000
</code></pre>
    </div>