<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>The most obvious point is probably that the standard library already includes <code>std::shuffle</code>, so there's little point in creating your own.</p>

<ul>
<li>If you do decide to write your own shuffle, you probably want to look up the <a href="https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle" rel="nofollow noreferrer">Fisher-Yates Shuffle</a> algorithm. What you're doing right now can introduce biases (actually, it introduces a couple of different biases in entirely different ways).</li>
</ul></li>
<li><p>If you're going to generate random numbers in C++, you're generally better off using the "new" generators found in <code>&lt;random&gt;</code> instead of using <code>srand</code>/<code>rand</code> from <code>&lt;stdlib.h&gt;</code>/<code>&lt;cstdlib&gt;</code>.</p>

<ul>
<li>Probably also want to use the standard distribution classes instead of rolling your own with the modulus operator (that's one of your current sources of bias<sup>1</sup>).</li>
</ul></li>
<li><p>Even if you do insist on writing your own and using <code>srand</code>/<code>rand</code>, you must call <code>srand</code> only once, probably when your program starts, not separately each time you're going to use some random numbers.</p></li>
<li><p>I advise against using <code>std::endl</code>. Most of the time (including this case) printing a new-line (<code>'\n'</code>) will do what you want, and frequently be substantially faster. In addition to writing a new-line, <code>std::endl</code> flushes the stream, which is almost never necessary or desirable.</p></li>
<li><p>Instead of:</p>

<pre><code>std::cout &lt;&lt; "Word found in " &lt;&lt; count
          &lt;&lt; " guess" &lt;&lt; (count&gt;1?"es":"")
</code></pre>

<p>I'd rather use:</p>

<pre><code>std::cout &lt;&lt; "Word found in " &lt;&lt; count
      &lt;&lt; (count &gt; 1 ? "guesses" : "guess";
</code></pre>

<p>At least to me, this makes it somewhat easier to follow what's going on (and a trade between easier to read and saving half a dozen bytes of string constant seems pretty easy to me, at least most of the time).</p></li>
<li><p>Finally, Add the appropriate includes for the features you use.</p>

<ul>
<li>std::string =&gt; <code>#include &lt;string&gt;</code></li>
<li>std::srand() =&gt; <code>#include &lt;cstdlib&gt;</code></li>
<li>std::time() =&gt; <code>#include &lt;ctime&gt;</code></li>
<li>srand() =&gt; <code>#include &lt;stdlib.h&gt;</code>      // Note the difference between C++ and C version.</li>
<li>time() =&gt; <code>#include &lt;time.h&gt;</code></li>
</ul></li>
</ol>

<hr>

<p><sup>
1. consider a generator that produced 0, 1, or 2 and you used <code>%2</code> to get only 0 or 1. You'd get 1 only when the generator produced 1, but you'd get 0 when it produced either 0 or 2, so assuming the generator produced 0, 1, and 2 equally frequently, your output would be 0 about twice as often as it was 1. With larger ranges, the bias tends to be less extreme (and less visible) but the same basic mechanism causes the same basic problem.
</sup></p>
    </div>