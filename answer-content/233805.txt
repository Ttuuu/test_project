<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In my opinion, the main problem with your code is the duplication, here is my advices.</p>

<p>1) Put the ui code out of the conditions.</p>

<p>The only issue there, if the choice is invalid, you can either show a default string, or throw an exception.</p>

<pre class="lang-java prettyprint-override"><code>        if (decision == 1) {
            out = encrypt(field, shift);
        } else if (decision == 2) {
            out = decrypt(field, shift);
        } else {
            out = "Invalid choice!";
        }

        JTextArea msg = new JTextArea(out);
        msg.setLineWrap(true);
        msg.setWrapStyleWord(true);
        JScrollPane scrollPane = new JScrollPane(msg);
        scrollPane.setPreferredSize(new Dimension(300, 300));
        JOptionPane.showMessageDialog(null, scrollPane);

</code></pre>

<p><em>Or</em></p>

<pre class="lang-java prettyprint-override"><code>        if (decision == 1) {
            out = encrypt(field, shift);
        } else if (decision == 2) {
            out = decrypt(field, shift);
        } else {
            throw new IllegalStateException("Invalid choice!")
        }

        JTextArea msg = new JTextArea(out);
        msg.setLineWrap(true);
        msg.setWrapStyleWord(true);
        JScrollPane scrollPane = new JScrollPane(msg);
        scrollPane.setPreferredSize(new Dimension(300, 300));
        JOptionPane.showMessageDialog(null, scrollPane);

</code></pre>

<p>2) In the encrypt &amp; decrypt, to create the string containing the result, i suggest that you use <code>java.lang.StringBuilder</code> instead of concatening the String; you will gain some performance.</p>

<pre class="lang-java prettyprint-override"><code>    public static String decrypt(String text, int n) {
        int x = 0;
        int y = 0;
        StringBuilder out = new StringBuilder(); //Empty string for result.
        while (x &lt; text.length()) {
            if (text.charAt(x) &gt; 64 &amp;&amp; text.charAt(x) &lt; 91) {
                if (text.charAt(x) - n &lt; 65) {
                    y = 26;
                }
                out.append(text.charAt(x) - n + y);
            } else {
                out.append(text.charAt(x));
            }
            x++;
            y = 0;
        }
        return out.toString();
    }
</code></pre>

<p>3) In the encrypt &amp; decrypt, extract the <code>text.charAt(x)</code> in a variable, to remove the duplicates.</p>

<pre class="lang-java prettyprint-override"><code>    public static String decrypt(String text, int n) {
        int x = 0;
        int y = 0;
        StringBuilder out = new StringBuilder(); //Empty string for result.
        while (x &lt; text.length()) {
            final char currentChar = text.charAt(x);

            if (currentChar &gt; 64 &amp;&amp; currentChar &lt; 91) {
                if (currentChar - n &lt; 65) {
                    y = 26;
                }
                out.append(currentChar - n + y);
            } else {
                out.append(currentChar);
            }
            x++;
            y = 0;
        }
        return out.toString();
    }
</code></pre>

<p>4) The encrypt and decrypt methods are pretty similar, you can probably merge them if you want.</p>

<pre class="lang-java prettyprint-override"><code>    //Encryption
    public static String encrypt(String text, int n) {
        return operation(text, n, true);
    }

    //Decryption
    public static String decrypt(String text, int n) {
        return operation(text, n, false);
    }

    public static String operation(String text, int n, boolean isEncryption) {
        int x = 0;
        int y = 0;
        StringBuilder out = new StringBuilder(); //Empty string for result.
        while (x &lt; text.length()) {
            final char currentChar = text.charAt(x);

            if (currentChar &gt; 64 &amp;&amp; currentChar &lt; 91) {
                if (isEncryption ? (currentChar + n &gt; 90) : (currentChar - n &lt; 65)) {
                    y = 26;
                }
                out.append(isEncryption ? (currentChar + n - y) : (currentChar - n + y));
            } else {
                out.append(currentChar);
            }
            x++;
            y = 0;
        }
        return out.toString();
    }
<span class="math-container">```</span>
</code></pre>
    </div>