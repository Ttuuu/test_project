<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>You could just make a new list rather than use <code>list.insert</code> and <code>list.append</code>.</p>

<pre class="lang-py prettyprint-override"><code>indexes.insert(0, 0)
indexes.append(len(s))
</code></pre>

<pre class="lang-py prettyprint-override"><code>indexes = [0] + indexes + [len(s)]
</code></pre></li>
<li><p>For your "slice string" part, I'd make a function called pairwise. As this is a rather well know recipe in Python.</p>

<pre class="lang-py prettyprint-override"><code>def pairwise(iterable):
    return (
        (iterable[i], iterable[i+1])
        for i in range(len(iterable) - 1)
    )
</code></pre></li>
<li><p>You could combine <code>slices</code> and <code>compressed_str</code> into one comprehension. If you do you don't need to use <code>len</code> as <code>indexes[i+1] - indexes[i]</code> is the length of the string.</p>

<pre class="lang-py prettyprint-override"><code>return "".join(
    f"{b - a}{s[a]}"
    for a, b in pairwise(indexes)
)
</code></pre></li>
</ul>

<pre class="lang-py prettyprint-override"><code>def pairwise(iterable):
    return (
        (iterable[i], iterable[i+1])
        for i in range(len(iterable) - 1)
    )


def compress_string(s: str) -&gt; str:
    if s == "":
        return ""

    indexes = [
        i+1
        for i in range(len(s) - 1)
        if s[i+1] != s[i]
    ]
    indexes = [0] + indexes + [len(s)]
    return "".join(
        f"{b - a}{s[a]}"
        for a, b in pairwise(indexes)
    )
</code></pre>

<h1>Itertools</h1>

<ul>
<li>The pairwise function could be better described using the <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow noreferrer"><code>pairwise</code> recipe</a>.</li>
<li>If you utilize <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>itertools.groupby</code></a> the challenge is super easy, as it makes <code>slices</code> for you.</li>
</ul>

<pre class="lang-py prettyprint-override"><code>def compress_string(s: str) -&gt; str:
    if s == "":
        return ""
    return "".join(
        f"{sum(1 for _ in g)}{k}"
        for k, g in itertools.groupby(s)
    )
</code></pre>
    </div>