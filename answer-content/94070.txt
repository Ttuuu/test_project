<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First, let's give your methods some vertical breathing space for readability and standardize you indentation (copy paste error when you posted?)</p>

<pre><code>class text_generator
{
    public int getWordIndex(List&lt;string&gt; source, Random value)
    {
        return value.Next(0, source.Count - 1);
    }

    public bool checkListLength(List&lt;string&gt; source)
    {
        return source.Count == 0;
    }

    public string getText(List&lt;string&gt; source, List&lt;string&gt; backup_source, Random value)
    {
        if (checkListLength(source))
        {
            source.AddRange(backup_source);
        }

        int index = getWordIndex(source, value);
        string result = source[index];
        source.RemoveAt(index);

        return result;
    }
}
</code></pre>

<p>Much nicer to read, right? Anyway. I don't like using "value" as a parameter name because <code>value</code> is a keyword. </p>

<blockquote>
<pre><code>public int getWordIndex(List&lt;string&gt; source, Random value)
</code></pre>
</blockquote>

<p>Since <code>value</code> is the name the language gives to property setter args, I find this a bit confusing to my brain. It keeps thinking your method is a property when it's not. Why not call it what it is? I'd go with <code>rand</code>. It's a pretty standard name and makes the internals of the method make lots more sense. </p>

<pre><code>public int getWordIndex(List&lt;string&gt; source, Random rand)
{
     return rand.Next(0, source.Count - 1);
}
</code></pre>

<p>As was mentioned by another poster, you can entirely do away with your <code>checkListLength</code> method by replacing it with <code>Any()</code>. What wasn't mentioned was the performance difference. <s><code>Count</code> has to iterate the entire List to return a count. <code>Any</code> bails out as soon as it finds an element. On a list with a large number of items. This can be significant. It might not matter here, but get in the habit of using the right tool for the job now, and it'll save you a headache when you need to do this on a list with tons and tons of elements.</s></p>

<pre><code>if (source.Any())
{    
    source.AddRange(backup_source);
}
</code></pre>

<hr>

<p><a href="http://chat.stackexchange.com/rooms/8595/conversation/icollection-vs-ienumerable-w-any">Heslacher pointed out to me in chat that I was wrong about this.</a> What I said is only true if you're working with a plain <code>IEnumerable</code>. Since you're working with <code>List</code>, there's no performance penalty, but I still recommend using <code>Any()</code> as using <code>Count</code> <em>could</em> have a performance penalty if you use it on a plain <code>IEnumerable</code>. Also, <code>Any()</code> is a better abstraction than <code>Count == 0</code>. It does make the intent clearer.</p>

<hr>

<p><strong><em>Side Effect Alert!</em></strong></p>

<p>A method named <code>GetXxx</code> shouldn't have side effects. It's surprising to call a "Get" method and have it modify the objects you send into it. </p>

<blockquote>
<pre><code>   int index = getWordIndex(source, value);
   string result = source[index];
   source.RemoveAt(index);
</code></pre>
</blockquote>

<p>If you want to remove items from the source list, I'd recommend moving it up a level of abstraction. Principle of least surprise and all. </p>

<p>I'm sure you legitimately need to remove it from the list, but you're modifying the list that's being sent in from the client code. This is the kind of thing that creates nasty nasty hard to find bugs. Because who would ever think that library's <code>GetFooBar</code> method would <em>remove</em> items from the list you give it?! It's bad design and needs to be rethought. </p>

<p>Perhaps instead, this class could be initialized with a copy of a list to work with instead?</p>
    </div>