<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I can't really say there is anything <strong>wrong</strong> with your code although I really don't like the nested <code>strcat</code>. There are some minor quibbles, such as the opening brace not being in column 0, the parameters missing from main and the stdlib include missing.  </p>

<p>However I can offer some alternatives that are not necessarily better, just different.  In the code below, I used a typedef to define a sentence type. To my eyes it is easier to handle one-D arrays (ie and array of sentences) that 2-D arrays. But that is just me.  I also used a simple index in the loop rather than a pointer to the sentence. - seems more straightforward to me.  And I put each array size into a const - in the code it doesn't matter but in something larger you might want the size more than once.  I also defined <code>num</code> at the point of first use.  I also added some extra vertical spacing to make it clearer, although I probably wouldn't  so much in real code.</p>

<pre><code>typedef char sentence[STR_LEN];

int main(int argc, char **argv)
{
    char *article[] = {"the", "a", "one", "some", "any"};
    const size_t n_articles = sizeof article /sizeof article[0];

    char *noun[] = {"boy", "girl", "dog", "town", "car"};
    const size_t n_nouns = sizeof noun /sizeof noun[0];

    char *preposition[] = {"to", "from", "over", "under", "on"};
    const size_t n_prepositions = sizeof preposition /sizeof preposition[0];

    sentence sentences[MAX_SEN];
    srand((unsigned) time(NULL));

    for (int i = 0; i &lt; MAX_SEN; ++i) {
        int num = rand() % n_articles;
        strcpy(sentences[i], article[num]);

        num = rand() % n_nouns;
        strcat(sentences[i], " ");
        strcat(sentences[i], noun[num]);

        num = rand() % n_prepositions;
        strcat(sentences[i], " ");
        strcat(sentences[i], preposition[num]);

        printf("%s.\n", sentences[i]);
    }
    return 0;
}
</code></pre>
    </div>