<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>You don't need to pass the vector itself. <code>left</code> and <code>right</code> iterators provide all the necessary information.</p>

<p>That said, you pass a <em>correct</em> <code>right</code>: too often people pass it as <code>.end() - 1</code> which indeed leads to unnecessary complications.</p></li>
<li><p>Partitioning is an important algorithm on its own right and deserves to be factored out.</p></li>
<li><p>The lines</p>

<pre><code>if (size == 2 &amp;&amp; *pivot &lt; *left) {
    std::iter_swap(left, pivot);
}
</code></pre>

<p>serve no purpose. The code works fine without them.</p></li>
<li><p>The trickiest part is achieving best performance.</p>

<ul>
<li><p>The poor choice of pivot may result in quadratic time complexity. In a professional implementation choosing pivot <em>is</em> the most complex part.</p></li>
<li><p>In general, C++ is very good in eliminating tail recursion, but in this particular case it may use some help. Specifically, you'd want to recurse into smaller partition, and iterate over the larger one.</p></li>
<li><p>Another optimization is a timely switch to insertion sort. Instead of descending all the way to <code>size &lt;= 1</code> it is beneficial to stop recursion earlier (say, when <code>size &lt;= 16</code>). Once the recursions are completed, the range is <em>almost sorted</em>, and insertion sort runs in linear time.</p></li>
</ul></li>
</ul>
    </div>