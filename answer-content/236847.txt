<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I recommend including your internal headers first, before any standard headers.  This helps expose any accidental dependencies that make it hard to use your types in another program.</p>

<p>So in HugeInt.cpp, I'd write</p>

<pre><code>#include "HugeInt.h"

#include &lt;cstdlib&gt;   // for abs(), labs(), etc.
#include &lt;iostream&gt;
#include &lt;iomanip&gt;
#include &lt;sstream&gt;
#include &lt;cstring&gt;
#include &lt;stdexcept&gt;
#include &lt;cmath&gt;
</code></pre>

<hr>

<p>Don't include <code>&lt;iostream&gt;</code> in the header; that's overkill.  We can include <code>&lt;iosfwd&gt;</code> instead, which is much lighter, and just gives us the forward declarations we need to specify <code>std::istream&amp;</code> and <code>std::ostream&amp;</code> in our signatures, without bringing in the full template definitions that are in <code>&lt;iostream&gt;</code>.  That means that translation units not doing I/O don't carry the overhead.</p>

<hr>

<p>Spelling (throughout): <code>uint32_t</code> and <code>uint64_t</code> are in the <strong><code>std</code></strong> namespace.  Your compiler is allowed to also declare them in the global namespace, but is not required to, so you have a portability bug.</p>

<hr>

<p>Perhaps we should provide a <code>divmod()</code> function that gives quotient and remainder in one operation, then use that to implement division and modulo?  The "short" version of this would certainly be useful, and save duplication when executing <code>toDecimalString()</code>.</p>

<hr>

<p>We use a string-stream to implement <code>toDecimalString()</code>, and then use that to implement <code>operator&lt;&lt;()</code>.  I think we should do that the other way around: use <code>operator&lt;&lt;()</code> to implement <code>toDecimalString()</code>.  Then streamed output wouldn't need to create a temporary string.  Consider using <a href="/q/189753/75307">my stream-saver</a> if you want to preserve its manipulator state.</p>

<hr>

<p>In <code>toDecimalString()</code>, we have this loop that produces one digit at a time:</p>

<pre><code>while (!tmp.isZero()) {
    decimalDigits[i++] = tmp.shortModulo(10);
    tmp = tmp.shortDivide(10);
}
</code></pre>

<p>We can reduce the number of divisions ninefold, since <code>shortModulo()</code> accepts <code>std::uint32_t</code>.  We can divide by 1 billion rather than ten, if we're careful about how we print the first "block":</p>

<pre><code>// determine the decimal digits of the absolute value
constexpr int numDecimal{static_cast&lt;int&gt;(numDigits * 1.07032) + 1};
std::array&lt;std::uint32_t, numDecimal&gt; decimal;

int i{0};
while (!tmp.isZero()) {
    decimal[i++] = tmp.shortModulo(1'000'000'000);
    tmp = tmp.shortDivide(1'000'000'000);
}

// output the decimal digits, in threes
oss &lt;&lt; std::setw(0) &lt;&lt; std::setfill('0');
--i;
// first digits
auto const d0 = decimal[i];
if (d0 &gt; 1'000'000) {
    oss &lt;&lt; (d0 / 1'000'000) &lt;&lt; ',' &lt;&lt; std::setw(3);
}
if (d0 &gt; 1'000) {
    oss &lt;&lt; (d0 / 1'000 % 1'000) &lt;&lt; ',' &lt;&lt; std::setw(3);
}
oss &lt;&lt; (d0 % 1'000);
// subsequent digits
while (i--) {
    auto const d = decimal[i];
    oss &lt;&lt; ',' &lt;&lt; std::setw(3) &lt;&lt; (d / 1'000'000)
        &lt;&lt; ',' &lt;&lt; std::setw(3) &lt;&lt; (d / 1'000 % 1'000)
        &lt;&lt; ',' &lt;&lt; std::setw(3) &lt;&lt; (d % 1'000);
}
</code></pre>
    </div>