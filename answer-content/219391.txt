<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>Ignore the warning. React gives a warning when you setState after
  unmount because it indicates a memory leak (in this case, the
  lingering network request, if not canceled). If the network request
  is canceled, there is still a setState after unmount, but just to set
  a flag. There is no more lingering network request. It should be safe
  to ignore the warning in this case, but it doesn't feel right.</p>
</blockquote>

<p>Bad idea. Thing is, by the time the request will resolve, setState might be triggered on an unmounted component. And warning turns to error.</p>

<blockquote>
  <p>Check what error was thrown in the finally block and add the same if
  statement as the catch block. This seems incredibly hacky and would
  require extra code to save the error from the catch block.</p>
</blockquote>

<p>Meh :\</p>

<blockquote>
  <p>Check if the component is mounted in the finally block. This is also
  hacky and requires boilerplate code to update a this.isMounted flag.</p>
</blockquote>

<p><a href="https://reactjs.org/blog/2015/12/16/ismounted-antipattern.html" rel="nofollow noreferrer">It's an Anti-pattern</a></p>

<p><a href="https://i.stack.imgur.com/IRJFw.jpg" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/IRJFw.jpg" alt="enter image description here"></a></p>

<blockquote>
  <p>Put the cleanup code at the end of try and after the condition in
  catch. This is not DRY. Humans are also very forgetful; I cannot count
  how many times I have forgotten to set isLoading = false in catch.</p>
</blockquote>

<p>This</p>

<blockquote>
  <p>Define a cleanup() function before the try and call it in try and
  catch. This is a decent option, but requires extra function calls,
  making it harder to follow.</p>
</blockquote>

<p>And that, are pretty much taking the same turn with different gear.</p>

<p><strong>Suggestion from <a href="https://reactjs.org/blog/2015/12/16/ismounted-antipattern.html" rel="nofollow noreferrer">React Blog</a></strong></p>

<p>If you use ES6 promises, you may need to wrap your promise in order to make it cancelable.</p>

<pre><code>const cancelablePromise = makeCancelable(
  new Promise(r =&gt; component.setState({...}))
);

cancelablePromise
  .promise
  .then(() =&gt; console.log('resolved'))
  .catch((reason) =&gt; console.log('isCanceled', reason.isCanceled));

cancelablePromise.cancel(); // Cancel the promise
</code></pre>

<p>Where makeCancelable was originally defined by @istarkov as:</p>

<pre><code>const makeCancelable = (promise) =&gt; {
  let hasCanceled_ = false;

  const wrappedPromise = new Promise((resolve, reject) =&gt; {
    promise.then(
      val =&gt; hasCanceled_ ? reject({isCanceled: true}) : resolve(val),
      error =&gt; hasCanceled_ ? reject({isCanceled: true}) : reject(error)
    );
  });

  return {
    promise: wrappedPromise,
    cancel() {
      hasCanceled_ = true;
    },
  };
};
</code></pre>
    </div>