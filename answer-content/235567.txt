<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your second function is faster for me when simplifying it like this:</p>

<pre><code>@jit(nopython=True)
def move_to_back_c(a, value):
    mask = a == value
    return np.append(a[~mask], a[mask])
</code></pre>

<p>In addition, Python's official style-guide, <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP8</a>, recommends <em>not</em> surrounding a <code>=</code> with spaces if it is used for keyword arguments, like your <code>nopython=True</code>.</p>

<p>Since <code>numba</code> apparently <a href="http://numba.pydata.org/numba-doc/0.18.1/developer/generators.html" rel="nofollow noreferrer">recently gained generator support</a>, this might also be worth checking out:</p>

<pre><code>@jit(nopython=True)
def _move_to_back_d(a, value):
    count = 0
    for x in a:
        if x != value:
            yield x
        else:
            count += 1
    for _ in range(count):
        yield value

@jit(nopython=True)
def move_to_back_d(a, value):
    return list(_move_to_back_d(a, value))
</code></pre>

<p>The timings I get on my machine for the given testcase are:</p>

<pre><code>move_to_back_a    1.63 µs ± 14.5 ns
move_to_back_b    2.33 µs ± 21 ns
move_to_back_c    1.92 µs ± 17.5 ns
move_to_back_d    1.66 µs ± 9.69 ns
</code></pre>

<p>What is in the end as least as important is the scaling behavior, though. Here are some timings using larger arrays:</p>

<pre><code>np.random.seed(42)
x = [(np.random.randint(0, 100, n), 42) for n in np.logspace(1, 7, dtype=int)]
</code></pre>

<p><a href="https://i.stack.imgur.com/3Ng6c.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/3Ng6c.png" alt="enter image description here"></a></p>

<p>While slightly slower for small arrays, for larger the mask approach is consistently faster.</p>
    </div>