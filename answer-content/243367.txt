<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>Demonstration autoboxing and unboxing in your code.</p>
</blockquote>

<p>You can then remove the calls to <code>Double#valueOf(double)</code> and 
<code>Double#doubleValue():doube</code>. Then you can replace <code>Double</code> with <code>double</code>
when applicable (return of public methods). </p>

<p><strong>Searching items in list</strong></p>

<p>At some times you are using <code>List#indexOf(Object):int</code> but in other places, you 
are looping on the list to test the equality of an item (<code>searchCustomer</code>, 
<code>searchBranch</code>). </p>

<p>The Javadoc of <a href="https://docs.oracle.com/javase/7/docs/api/java/util/ArrayList.html#indexOf(java.lang.Object)" rel="nofollow noreferrer"><code>ArrayList#indexOf(Object):int</code></a> states that :</p>

<blockquote>
  <p>returns the lowest index i such that (o==null ? get(i)==null : o.equals(get(i)))</p>
</blockquote>

<p>So you can easily replace your loops in your search methods by 
<code>return theList.indexOf(something) &gt; -1</code> </p>

<p>But there is still a better way to check if a list contains an item: <a href="https://docs.oracle.com/javase/7/docs/api/java/util/ArrayList.html#contains(java.lang.Object)" rel="nofollow noreferrer"><code>ArrayList#contains(Object):boolean</code></a></p>

<p><strong>Naming</strong></p>

<p>Based on the previous comment, you could also rename your <code>searchXyz</code> methods to 
<code>contains</code> or another more meaningful name. This may be a cultural issue but, 
most of the time when "we" (BE_fr devs) read <code>search</code>, "we" expect to receive a 
collection of found objects.</p>

<p><strong>Complexity</strong></p>

<p>Instead of nesting your <code>if</code>s like in <code>Branch#addTransaction(..)</code>  you can <em>fail quickly</em> :</p>

<pre><code>if ( customer==null || transaction &lt;= 0.0 ) {
   // fail
} else if ( !contains(customer) ) {
   // fail 
} else {
   // This is fine
}
</code></pre>

<p>If you rely on <code>Exception</code> for your failure you can also reduce a bit the nesting 
of your method :</p>

<pre><code>if ( isThisInvalid(..) ) {
    throw new InvalidOperation(..);   
}    

// This is fine
</code></pre>

<p>The less path/branches you have in your code, the better it is. That's also why 
I introduced a validation method, to move the validations rules outside of the 
business code.   </p>

<p><strong>Encapsulation</strong></p>

<p>Not all your methods have to be public, try to mark as much as possible as <code>private</code>
or <em>package protected</em> to reduce your public API. </p>

<p><strong>Separation of concerns</strong></p>

<p>Most of the time, for maintainability and testability concerns, you try extract 
concerns in different classes. That's why there are some popular high-level patterns 
like <em>MVC</em>, <em>MVP</em>, ...</p>

<p>In your case you could move the printing to a dedicated class that will be 
responsible to gather, format and print values from your model.</p>

<hr>

<p>Here are some excerpt of how your final code may looks like:</p>

<pre><code>class Branch {
    private final ArrayList&lt;Customer&gt; customers;
    private final String name;

    public Branch(String name) {
        this.customers = new ArrayList&lt;&gt;();
        this.name = name;
    }

    public String getBranchName() {
        return this.name;
    }

    public ArrayList&lt;Customer&gt; getCustomers() {
        return new ArrayList&lt;&gt;(customers);
    }

    public void addCustomer(Customer customer) {
        if (!isValidCustomer(customer)) {
            throw new InvalidCustomerException( customer);
        }
        customers.add(customer);
    }

    private boolean isValidCustomer(Customer customer) {
        return  customer!=null &amp;&amp;
                !contains(customer);
    }

    public void addTransaction(Customer customer, double transaction) {
        if (!isValidaTransaction(customer, transaction)) {
            throw new InvalidTransactionException(customer, transaction);
        }
        getCustomer(customer).addTransaction(transaction);
        this.customers.get(this.customers.indexOf(customer)).addTransaction(transaction);
    }

    private boolean isValidaTransaction(Customer customer, double transaction) {
        return  customer!=null &amp;&amp;
                transaction &lt;= 0.0 &amp;&amp;
                contains(customer);
    }

    private boolean contains(Customer customer) {
        return customers.contains(customer);
    }

    private Customer getCustomer(Customer customer) {
        return customers.get(customers.indexOf(customer));
    }
}  

class BranchCustomersPrinter implements Consumer&lt;Bank&gt; {    
    private final PrintWriter output;

    @Override
    public void accept(Bank bank) {
        Branch branch = bank.getBranch(branch);
        output.append("Customer Name \t\t Transactions");
        branch.getCustomers().forEach(customer -&gt;
                output.append(customer.getCustomerName())
                      .append("\t\t")
                      .append(customer.getTransactions())
                );
        output.flush();
    }
}   

Bank bank = ...
bank.print(new BranchCustomersPrinter(..));
</code></pre>

<hr>

<p>Note; Your validation in <code>Branch#addTransaction(..)</code> seems to be buggy. It will 
accept a <code>null</code> customer with a transaction bigger than <code>0</code>. It will also never 
accept a positive transaction.  </p>

<hr>

<p>Note; Java uses references and since your program will always run in memory you 
don't need to get an item from the list to update his values.</p>

<pre><code>Customer c1 = new Customer("One", 10);
ArrayList list = new ArrayList();
list.add(c1);

c1.addTransaction(5); // Is the same as :
list.get(list.indexOf(c1)).addTransaction(5);
</code></pre>

<p>But most of the time; you have to save and retrieve the customer from a persistent 
storage. </p>

<p>This is also why <code>list.contains(c1)</code> returns <code>true</code>. Because it is effectively the 
same "object"; doing the same with two customers having the same properties will 
not work:</p>

<pre><code>Customer c1 = new Customer("Customer", 10);    
Customer c2 = new Customer("Customer", 10);

c1.equals(c2); // false  
</code></pre>

<p>But I guess that you will learn the subtleties of object references and <code>equals</code> 
soon.       </p>
    </div>