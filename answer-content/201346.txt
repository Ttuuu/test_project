<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I question the following comment:</p>

<pre><code>    # Should be quite fast since list is sorted.
    if prime_to_check_against * multiplier in list_of_ints:
        list_of_ints.remove(prime_to_check_against * multiplier)
</code></pre>

<p>Why will this be fast, due to the sorted list?  <code>x in list</code> doesn't understand that the list is sorted, nor does the <code>remove(x)</code>.  No binary searching will be done; just a straight linear search.  Not fast.</p>

<hr>

<p><strike>I also question the following comment:</strike></p>

<pre><code>    # List was not modified.. Nothing to remove.
    if original_list_length == len(ints): 
        break
</code></pre>

<p>Just because no multiples of <code>29</code> may remain in the list does not necessarily mean there are no multiples of <code>31</code>!  The proper stopping condition is when you reach <code>sqrt(upper_bound)</code>.</p>

<hr>

<p>You are attempting to remove numbers you've already removed:</p>

<pre><code>multiplier = 1
while prime_to_check_against * multiplier &lt; list_of_ints[-1]:
    multiplier += 1
    if prime_to_check_against * multiplier in list_of_ints:
        list_of_ints.remove(prime_to_check_against * multiplier)
</code></pre>

<p>When you remove multiples of <code>13</code>, for instance, you are starting by removing <code>13*2</code>, and <code>13*3</code>, and <code>13*4</code>, and so on.</p>

<p>But you have already removed all the multiples of primes lower than <code>13</code>.  You should start at <code>13*13</code>,</p>

<pre><code>    multiplier = prime_to_check_against
    while prime_to_check_against * multiplier &lt;= list_of_ints[-1]:
        if prime_to_check_against * multiplier in list_of_ints:
            list_of_ints.remove(prime_to_check_against * multiplier)
        multiplier += 1
</code></pre>

<hr>

<p>Finding and then removing.  You are searching the list twice: once to check if it exists, a second time to find it in order to remove it.</p>

<p>Instead, you could simply removed the item.</p>

<pre><code>    try:
        list_of_ints.remove(prime_to_check_against * multipler)
    except ValueError:
        pass # it wasn't there
</code></pre>

<hr>

<p>Even numbers as a special case.</p>

<pre><code>ints = [2] + list(range(3, upper_bound, 2)) # Generate initial list of odd integers

# Initial prime for bootstrap
prime = 3
iteration_count = 1
</code></pre>

<p>And then, instead of increasing the multiplier by 1, you can increase it by 2, so you'd search <code>13*13</code>, <code>13*15</code>, <code>13*17</code>, ...</p>

<pre><code>        multiplier += 2
</code></pre>

<hr>

<p>Skip all of the multiplications, and just increment by <code>2*prime_to_check_against</code></p>

<pre><code>    multiple  = prime_to_check_against * prime_to_check_against
    increment = prime_to_check_against * 2 
    while multiple &lt;= list_of_ints[-1]:
        try:
            list_of_ints.remove(multiple)
        except ValueError:
            pass
        multiple += increment
</code></pre>

<p>Or more pythonically:</p>

<pre><code>    for multiple in range(prime_to_check_against * prime_to_check_against,
                          list_of_ints[-1]+1, 2*prime_to_check_against):
        try:
            list_of_ints.remove(multiple)
        except ValueError:
            pass
</code></pre>

<hr>

<p>Instead of populating a list with all of the candidate numbers, and then removing multiples of prime numbers from the list, which involves expensive list manipulations, you could:</p>

<ul>
<li>create a <code>bytearray(upper_bound)</code> to store prime/not-prime flags</li>
<li>flag all multiples of prime numbers, as you find them, as not-prime</li>
<li>use list-comprehension to extract the indexes which are flagged as prime</li>
</ul>

<p>Using a <code>bytearray</code> is very efficient memory-wise, and indexing into the <code>bytearray</code> to set or test a flag is a very fast \$O(1)\$ operation.</p>

<p>I'm trying to decide whether to post my 10-lines of code for the sieve here, or let you attempt it based on the above hints.  Let me know if you need it.</p>
    </div>