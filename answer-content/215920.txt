<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>When you have a long if/elif chain in Python it's a good idea to use a dictionary instead. For example: <code>{1: 'one', 2: 'two', 3: ...}</code>. This also makes exception handling easier with the <code>.get()</code> method.</p></li>
<li><p>Try to use proper names rather than just <code>x</code> or <code>y</code>.</p></li>
<li><p>Instead of:</p>

<pre><code>for indx in range(len(some_list)):
        some_list[indx].do_something()
</code></pre>

<p>use:</p>

<pre><code>for item in some_list:
    item.do_something()
</code></pre></li>
<li><p>Follow colons with a new line.</p></li>
<li><p>The <code>while True ... try ... except ValueError</code> is a strange choice. Add a condition to your while loop and just increment some counter.</p></li>
<li><p>Don't use exceptions to control the flow of the program. Exceptions are for catching exceptional behaviour, i.e. when something has gone wrong.</p></li>
<li><p>Some of your lines are very long. Split up the printing if necessary.</p></li>
<li><p>Try to be consistent with fstrings or <code>.format()</code>, not old formatting style (<code>%s</code>).</p></li>
<li><p>Avoid using globals. There are various ways of getting rid of them such as wrapping hanging functions into a class and having the global as a class variable.</p></li>
<li><p>Wrap your "worker" code (the code that does all the calling) in a function called something like <code>main()</code> (ideally more descriptive than that). Then use the standard: </p>

<pre><code>if __name__ == '__main__':
    main()
</code></pre></li>
<li><p>Using a dictionary you can rewrite <code>count_hand_occurance()</code> to be a simple generator expression.</p></li>
<li><p>Try to add doctrings; as a minimum for the classes if not the functions/methods as well.</p></li>
<li><p>Consider logging all of these messages rather than printing them. Debugging is far easier with logged information. As a start, you could write a simple file writing function (open file in append mode, 'a+') that is called instead of print.</p></li>
<li><p>in <code>post_draw()</code> you have <code>if not condition:</code> followed by <code>if condition:</code>. Just use <code>if</code>, <code>else</code>.</p></li>
<li><p>More comments are needed in logic-dense areas.</p></li>
</ul>

<p><strong>Edit, some explanations</strong></p>

<p>Using a dictionary instead of if/else, instead of:</p>

<pre><code>if cond_a:
    return a
elif cond_b:
    return b
elif cond_c:
    return c
</code></pre>

<p>create a dictionary where the conditions are the keys, and the return variables are the values:</p>

<pre><code>some_dict = {cond_a: a, cond_b: b, cond_c: c}
</code></pre>

<p>then when it comes to using it, just do:</p>

<pre><code>return some_dict[condition]
</code></pre>

<p>You can also add a default value for when the conditions isn't handled by the dictionary: <code>return some_dict.get(condition, default=None)</code>.</p>

<p>Class instead of globals:</p>

<p>The simplest example is to put the global into a class as you have done above with <code>Deck</code>:</p>

<pre><code>class MyClass:

    def __init__(self, some_var):
        self.some_var = some_var
</code></pre>

<p>Then you can add your functions into that class as methods and they can all share <code>self.some_var</code> without putting it into the global scope.</p>

<p>There is almost always a way around using globals, try to narrow down exactly what you want to use the global for. Most of the time there'll be a design pattern to handle that case.</p>
    </div>