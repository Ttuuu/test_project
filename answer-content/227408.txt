<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here're are my suggestions:</p>

<hr>

<p><strong>Remove <code>ConverterContract</code> and <code>ConverterActCompletion</code></strong> These two classes are unnecessary wrappers to hide the inner converter. You're saying that you're doing this to hide <code>Fields</code> and <code>Dict</code> so here's the next suggestion:</p>

<p><strong>Make <code>Fields</code> and <code>Dict</code> <code>protected</code></strong> You don't want the outside world see them? Use proper access modifiers like <code>protected</code> or <code>internal</code> where applicable.</p>

<p><strong>Make <code>ConverterBase</code> generic</strong> The current <code>Convert(object obj)</code> overload is too general and can and should be more specific because you always cast <code>obj</code> to a concrete type:</p>

<pre><code>abstract class ConverterBase&lt;T&gt;
{
    public abstract Dictionary&lt;string, string&gt; Convert(T obj);

    // ..
}
</code></pre>

<p>Then implement the other two converters with concrete types and concrete names. This is one of them:</p>

<pre><code>public class ActCompletionConverter : ConverterBase&lt;ActCompletion&gt;
{
    public override Dictionary&lt;string, string&gt; Convert(ActCompletion obj)
    {
        // casting not necessary as 'obj' already has the desired type
        // ..
    }

    // ..    
}
</code></pre>

<p><strong>Favor pure methods</strong> Pure methods do not change any class state so they are easier to debug and to test and they can safely be used in parallel. Your current implemention doesn't allow that because <code>Convert</code> requries the caller to change the state, this is the <code>Dict</code>. In order to improve that, let <code>InitializeDict(c, c.Salary);</code> return the initialized dictionary instead of using a field. Then make all of the <code>AddX</code> methods like <code>AddKindWork</code> accept the dictionary as a parameter. When you do this, you'll notice that all of them can now be made static. In order to make the signature shorter and not use the <code>Dictionary&lt;string, string&gt;</code> all the time, I suggest a helper class:</p>

<pre><code>internal FormattedFieldDictionary : Dictionary&lt;string, string&gt; 
{ 
    public Dictionary&lt;string, string&gt; Mappings { get; set; }
}
</code></pre>

<p>You can then implement all the <code>AddX</code> methods as extensions like:</p>

<pre><code>public static FormattedFieldDictionary AddSubject(this FormattedFieldDictionary fields, ICollection&lt;ListSubjects&gt; list)
{
    fields.Add(fields.Mappings["SUBJECT"], ShaperField.ShapeSubject(list));
    return fields;
}
</code></pre>

<p>so the final implementation of <code>Convert</code> would become a chain of extensions:</p>

<pre><code>public override Dictionary&lt;string, string&gt; Convert(Contracts obj)
{
    return
        InitializeFormattings(c, c.Salary)
            .AddKindWork(c.ListKindWorks)
            .AddSubject(c.ListSubjects)
            ..;
}
</code></pre>

<p><strong><code>ShaperField</code> is a <em>Formatter</em></strong> We usually call utilities like this one <em>Formatters</em> so I think it'd be easier to understand your code if you named this one <code>FieldFormatter</code> and each of the methods <em>FormatX</em> like <code>FormatSubject</code>. This naming convention would be consistent with other framework API like <code>string.Format</code> etc.</p>
    </div>