<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Welcome to Haskell (and Code Review). Your ADT <code>Direction</code> is a good approach for the result. However, top-level functions should have a type, as it will make type errors easier to read and give other users an idea how to use your function:</p>

<pre><code>type Point2 = (Double, Double)

findDirection :: Point2 -&gt; Point2 -&gt; Point2 -&gt; Direction    
findDirection (x, y) (x1, y1) (x2, y2)
</code></pre>

<p>While isn't necessary—GHC can infer it—it can at least act as a minimal documentation.</p>

<p>Next, we should tackle the names. We have <code>x</code>, <code>x1</code> and <code>x2</code>. Those seem arbitrary. Why don't we start with <code>x1</code>? The names <code>(ax,ay)</code>, <code>(bx,by)</code> and <code>(cx,cy)</code> would be more suitable, since we're talking about the coordinates of three specific points, <code>a</code>, <code>b</code> and <code>c</code>:</p>

<pre><code>findDirection :: Point2 -&gt; Point2 -&gt; Point2 -&gt; Direction    
findDirection (ax, ay) (bx, by) (cx, cy)
</code></pre>

<p>However, <a href="https://codereview.stackexchange.com/a/205969/21002">as vnp said</a>, you should use the cross product. While the cross-product is only defined for three dimensions, we can simply embed your points into <span class="math-container">\$\mathbb R^3\$</span> and then take the Z-component of the resulting vector:</p>

<pre><code>type Vector2 = (Double, Double)

-- See https://en.wikipedia.org/wiki/Cross_product#Computing_the_cross_product
cross :: Vector2 -&gt; Vector2 -&gt; Double
cross (ax, ay) (bx, by) = error "Implement this as an exercise"
</code></pre>

<p>With yet another function, we can then get the two vectors from our original three points:</p>

<pre><code>diff :: Point2 -&gt; Point2 -&gt; Vector2
diff (ax, ay) (bx, by) = (bx - ax, by - ay)
</code></pre>

<p>Now we really end up with an elegant solution:</p>

<pre><code>findDirection :: Point2 -&gt; Point2 -&gt; Point2 -&gt; Direction
findDirection a b c = 
    case cross (a `diff` b) (b `diff` c) `compare` 0 of
        GT -&gt; LeftTurn
        EQ -&gt; Straight
        LT -&gt; RightTurn
</code></pre>
    </div>