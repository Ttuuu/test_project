<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Single responsibility principle</h3>

<p>This function does too many things:</p>

<ul>
<li>maybe it copies a remote file</li>
<li>maybe it prints info</li>
</ul>

<p>The function may also print timing stats, which probably doesn't make much sense when not copying the remote file.</p>

<p>Unit testing is most effective when testing small independent units that have a single responsibility, well-defined inputs and outputs, and ideally no side effects.</p>

<p>As a first step, it would be good to split this function to multiple smaller functions:</p>

<pre><code>def get_remote_file(filepath, time=False):
    # ...

def get_local_file(filepath):
    # ...

def get_file(filepath, time=False, copy_to_local=False):
    if copy_to_local:
        return get_remote_file(filepath, time)
    return get_local_file(filepath)

def print_file_info(filepath, file):
    # ...
</code></pre>

<p>Each of these functions have well-defined, simpler responsibilities.
The <code>get_file</code> function may seem to do multiple things,
but it's ok, as it only orchestrates those things,
it's more of a controller and has trivially simple implementation.</p>

<p>Now that you have smaller units,
you can think about testing them individually, if necessary.
Actually I don't see much to test here,
because of the code is either printing,
or making paramiko API calls.
Testing that the paramiko calls work and you can fetch files will not be unit testing anymore,
because it will require external factors correctly setup,
such as a remote server with a file at a specific location,
which would violate the principle of unit testing.
That is not to say it's not worth testing,
maybe it is, to test your setup,
but it's not "unit testing", it's integration testing.</p>

<h3>Code review</h3>

<p>There is just one part that might be worth testing:</p>

<blockquote>
<pre><code>user = filepath.split(':')[0].split('@')[0]
host = filepath.split(':')[0].split('@')[1]
rfile = filepath.split(':')[1]
</code></pre>
</blockquote>

<p>I suggest to put this in a function of its own:</p>

<pre><code>def split_ssh_filepath(filepath):
    user = filepath.split(':')[0].split('@')[0]
    host = filepath.split(':')[0].split('@')[1]
    rfile = filepath.split(':')[1]
    return user, host, rfile
</code></pre>

<p>And eliminate the repeated calls to <code>filepath.split</code>:</p>

<pre><code>def split_ssh_filepath(ssh_filepath):
    user_host_rfile = ssh_filepath.split(':')[:2]
    user, host = user_host_rfile[0].split('@')[:2]
    rfile = user_host_rfile[1]
    return user, host, rfile
</code></pre>
    </div>