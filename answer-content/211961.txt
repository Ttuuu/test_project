<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The basics:</p>

<ul>
<li><p>Use consistent indenting.  Your editor can help if you want to move a block out a level, as in <code>CreateMD5</code>.</p></li>
<li><p>Completed code shouldn't have commented out lines.  If you want to leave something in for debugging, either use the built-in <code>Debug</code> class or write your own function which can be disabled with a flag.</p></li>
<li><p>Your variable names are not good. <code>dt1</code> could be <code>startTime</code>, <code>cp</code> could be <code>lengthToBeat</code>, <code>c</code> could be <code>commonPrefix</code>.  Good variable names make your code self-documenting.</p></li>
<li><p>Most of your code is in a single function, with just a few static helpers.  The IO code should be moved out into other functions.  You could move the string incrementation to a separate class.</p></li>
</ul>

<p>In terms of optimization, the biggest win would be to use more than a single core on your machine.  You would have to know what you are doing, but it will give you an immediate 4x speedup if you avoid contention.  An added benefit is that this will force you to organize your code better.  In terms of smaller improvements, the key is going to avoid doing unnecessary work.  Look at <code>CommonPrefix</code>: you build up a string, but when you are done all you use is its length.  If all you want is to count characters that match, you can have it return an int.</p>

<p>Similarly, if you think about this problem some more, it doesn't actually require you to convert the hash to a hex string.  Given a byte array, you can easily count how many bytes match your target string.  If you want it to start "31" then the first byte has to be <code>0x31</code>.  So full bytes (2 hex chars) are easy, and the only challenge is to handle single chars.</p>

<p>Another possible speedup would be to avoid the allocations and conversions involved in your string increment and hashing.  Since your strings are all ASCII anyway, you could work directly with a <code>byte[]</code>, increment it in place, and pass it straight to the hashing function.</p>
    </div>