<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The constructor takes two forwarding references, but doesn't actually forward them:</p>

<pre><code>  ProgressBar(It&amp;&amp; it, It&amp;&amp; it_end, int width, const char symbol='=')
        iter_(it),
        iter_begin_(it),
        iter_end_(it_end)
</code></pre>

<p>It's better to accept <code>it</code> and <code>it_end</code> by value, and <em>move-construct</em> from them:</p>

<pre><code>  ProgressBar(It it, It it_end, int width, const char symbol='=')
        iter_(it),
        iter_begin_(std::move(it)),
        iter_end_(std::move(it_end))
</code></pre>

<hr>

<p>The constructor also does no checking of its arguments - what does a zero or negative <code>width</code> mean?  Should it even be a signed type at all?</p>

<hr>

<p><code>std::cout</code> is a strange choice of stream for the <code>++</code> operator - progress information like this should normally go to <code>std::clog</code> rather than being mixed with program output.</p>

<hr>

<p>Inheriting from <code>std::iterator</code> is now deprecated - just define the member types directly in the class.</p>

<hr>

<p>It's wrong for <code>iterator</code> to forward the category tag of <code>It</code>, as it's at most a Forward Iterator - it's certainly not a Bidirectional Iterator.  We could make <code>iterator</code> inherit from <code>It</code> to exactly forward its category, but I think that would be a mistake: we don't want to try to track progress of a bidirectional iterator.  We'll need to be a bit clever when defining its category.</p>

<hr>

<p>Many of the members (of bar and of iterator) are missing <code>const</code> when I'd expect it:</p>

<pre><code>bool operator==(const iterator&amp; other) const;
bool operator!=(const iterator&amp; other) const;
reference operator*() const;
</code></pre>

<hr>

<p>Modern GCC (<code>g++-8 -std=c++2a</code>) doesn't believe you can use that template alias to define members of the iterator type:</p>

<pre class="lang-none prettyprint-override"><code>204396.cpp:73:13: error: no declaration matches ‘bool pbar::ProgressBar&lt;It&gt;::iterator::operator==(pbar::piter&lt;It&gt;)’
 inline bool ProgressBar&lt;It&gt;::iterator::operator==(piter&lt;It&gt; other) {
             ^~~~~~~~~~~~~~~
204396.cpp:42:10: note: candidate is: ‘bool pbar::ProgressBar&lt;It&gt;::iterator::operator==(pbar::ProgressBar&lt;It&gt;::iterator)’
     bool operator==(iterator other);
          ^~~~~~~~
</code></pre>

<p>(and many, many more like that)</p>

<hr>

<p>Computation of <code>fraction</code> can be expensive when <code>It</code> is less capable than <code>RandomAccessIterator</code>, due to the <code>std::distance()</code> calls.  We can save work by storing the total and progress separately, which means only one <code>std::distance()</code> per <code>ProgressBar</code> instead of two per iteration.</p>

<hr>

<p>The percentage calculation doesn't need to go through <code>double</code> if we multiply before dividing (at least in the absence of overflow):</p>

<pre><code>    stream &lt;&lt; pbar.right_delim_ &lt;&lt; (pbar.pos_ * 100 / pbar.width_) &lt;&lt; "%\r";
</code></pre>

<hr>

<p>Assignments through the iterator are lost.  For example, this code doesn't work (the vector is unchanged):</p>

<pre><code>for (auto&amp; i: ProgressBar(v.begin(), v.end(), 50, '#')) {
    i *= 2;
}
</code></pre>

<p>Really, we want to encapsulate the container iterator inside the progress-bar iterator (instead of a copy of its value), so that <code>operator*()</code> forwards right through to the container.</p>

<hr>

<p>These lines can be within the include-guard:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;iterator&gt;
</code></pre>

<p>Although they almost certainly have include guards of their own, it certainly does no harm to avoid repeating them.</p>

<hr>

<p>Finally, a specific answer to your specific question no. 4: there's nothing in the header that doesn't depend on the template parameter, so nothing can be moved to a separately-compiled implementation file without losing the benefit of templates.</p>
    </div>