<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Design</h3>

<p>The problem with your implementation of <code>pop()</code> is that it can not be implemented in an exception safe manner (for any type of T). This is why the standard implementation implements this as two different methods <code>top()</code> and <code>pop()</code>. The <code>top()</code> function simply returns the value while <code>pop()</code> does not return the value but simply removes the value from <code>head</code>.</p>

<p>So usage would become:</p>

<pre><code>T val = queue.top();
queue.pop();
</code></pre>

<h3>Code Review</h3>

<p>Your code assumes that <code>T</code> has a default constructor.</p>

<pre><code>    std::unique_ptr&lt;T[]&gt; contents;
</code></pre>

<p>When you create the <code>content</code> with <code>contents(new T[s])</code> you are allocating and initializing all the elements in that array using the default constructor.</p>

<p>In addition to this if <code>T</code> is very expensive you have just used a lot of effort to create the items that may never be used (or you wasted resources creating the objects that are just going to be destroyed when overwritten).</p>

<p>I would consider changing this to <code>std::vector&lt;T&gt;</code>. That way you don't create any un-required objects when first created.</p>

<hr>

<p>This is fine:</p>

<pre><code>    explicit PCQueue(size_t s) : size(s), contents(new T[s]), head(0), tail(0) {}
</code></pre>

<p>But you can make it more readable. Remember the point of code is to make the code maintainable.</p>

<pre><code>    explicit PCQueue(size_t s)
        : size(s)
        , contents(new T[s])
        , head(0)
        , tail(0)
    {}
</code></pre>

<hr>

<p>Is this the real definition of the function?</p>

<pre><code>    //num of elements in ringbuffer (size - room())
    size_t count() {
        return (tail + size - head) % size;
    }
</code></pre>

<p>I would rename this function to reflect what the function is actually returning. I would also change the formula so it is easy to read. I would call this <code>availableSpace()</code>. The formula is: <code>size - (head - tail)</code>.</p>

<hr>

<p>This would be better named <code>freeSpace()</code>.</p>

<pre><code>    //num of free spaces in ringbuffer (size - count())
    size_t room() {
        return (head + size - tail) % size;
    }
</code></pre>

<hr>

<p>You pass the parameter by value.</p>

<pre><code>    void push(T t) {
</code></pre>

<p>This causes a copy to be made to pass it to the parameter. You should pass this by const reference (so there is no copy). If you want to get more advanced you could also pass by r-value reference which would allow you to move the object into your buffer rather than copying it.</p>

<pre><code>    void push(T const&amp; t) {   // Pass by const reference
    void push(T&amp;&amp; t) {        // Pass by r-value reference
</code></pre>

<hr>

<p>The problem with the <code>pop()</code> as written you can not guarantee a clean removal. This is because you need to make several copies and if those copies fail you can leave the container in a bad state.</p>

<pre><code>    T pop() {
        T ret = contents[head];              // Here is a copy.
        size_t newHead = (head + 1) % size;  
        head = newHead;
        return ret;                          // Here is another copy. 
    }
</code></pre>

<p>You did not define <code>T</code> so you don't have control over the copy assignment constructor. That is why it is usually split into two functions.</p>

<pre><code>    // Return by reference
    // That way we can avoid any un-needed copies.
    T const&amp; top() const {
        return contents[head];
    }
    // Simply remove the head item in the pop.
    void pop() {
        size_t newHead = (head + 1) % size;  
        head = newHead;
    }
</code></pre>
    </div>