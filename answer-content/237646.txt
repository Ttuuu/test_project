<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Since you mention that this was originally C++ code, well it shows.</p>

<p>First, style. Python has an official style-guide, <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP8</a>. It recommends writing <code>if condition</code> instead of <code>if(condition)</code> and using <code>lower_case</code> instead of <code>camelCase</code> for variables and functions.</p>

<p>You should also have a look at the standard library and <a href="https://nedbatchelder.com/text/iter.html" rel="nofollow noreferrer">this excellent blog post about better looping</a>. You can also directly return the result of e.g. a boolean expression. Here are how I might write some of your functions:</p>

<pre><code>def check_brackets(s):
    """
     Function checks brackets in string
     s: string with function
     returns: 0 -&gt; brackets failure / 1 -&gt; brackets ok 
    """

    open_brackets = 0
    for c in s:
        if c == "(":
            open_brackets += 1
        elif c == ")":
            if open_brackets:
                open_brackets -= 1
            else:
                return False
    return open_brackets == 0
</code></pre>

<p>Note that this will not be fooled by e.g. <code>")("</code>, in contrast to your code.</p>

<pre><code>from itertools import groupby

def analyze_operations(s):
    """
     Function checks if there are two operators one after the other
     s: string with function
     returns: true if ok / false when err
    """
    s = s.replace(" ","")  # need to actually assign it, it is not in-place
    is_oper = map(lambda x: x in OPERS, s)
    return all(len(list(group)) == 1 for x, group in groupby(is_oper) if x)
</code></pre>

<p>Note that <code>str.replace</code> is not an in-place operation. So it does not do anything unless you assign the result to a variable. But since this seems to appear in many of your functions, you might want to do that in the calling code and not in every function.</p>

<pre><code>from itertools import tee

def pairwise(iterable):
    "s -&gt; (s0,s1), (s1,s2), (s2, s3), ..."
    a, b = tee(iterable)
    next(b, None)
    return zip(a, b)

def analyze_op_after_CB(s):
    """
     Function checks if there is operator after closing bracket
     s: string with function
     returns: true if ok / false when err
    """
    for c1, c2 in pairwise(s.replace(" ","")):
        if (c1 == ")" 
            and c2 not in OPERS 
            and c2 != ")"):
            return False
    return True
</code></pre>

<p>The <code>pairwise</code> function is a recipe from the <a href="https://docs.python.org/3/library/itertools.html" rel="nofollow noreferrer"><code>itertools</code></a> module.</p>

<pre><code>def eval_expr(s, x_val=1):
    """
    Function evaluate RPN string 
    s: string with function infix 
    x_val: value for x variable
    r: value
    """
    s = s.replace(" ", "")
    if not check_brackets(s):
        raise SyntaxError("The expression have unclosed brackets!")
    elif not analyze_operations(s):      
        raise SyntaxError("The expression have incorrectly written operators!")
    elif not analyze_op_after_CB(s):
        raise SyntaxError("Missing operator after closing bracket!")

    stack = []
    for x in to_RPN(s, x_val):
        if isinstance(x, float):
            stack.append(x)
        elif x in OPERS:
            b, a = stack.pop(), stack.pop()
            stack.append(OPERS[x](a, b))
        elif x in FUNCTIONS:
            stack.append(FUNCTIONS[x](stack.pop()))
    if len(stack) != 1:
        raise SyntaxError("More than one value remains on stack")
    return round(stack[0], DEC_PLACES)        #return rounded result
</code></pre>

<p>The hardest part is of course to rewrite the conversion to the reverse polish notation, so I will leave that for now :)</p>
    </div>