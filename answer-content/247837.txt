<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>You <code>calloc</code> <code>arr</code>, but you know the length of it is always 3. So you can instead allocate it on the stack using C's built in array type. The <code>= {0}</code> part means that all elements are set to all 0's (<code>NULL</code>'s) at the start, which <code>calloc</code> does for you automatically.</p>
<pre><code> char *arr[3] = {0};
</code></pre>
</li>
<li><p>When you're splitting the input buffer on spaces, you try and write to <code>arr</code> even if you get more than three arguments. This is easily fixed by returning an error if <code>i == 3</code> in the loop. (Exercise for the reader: set a flag instead of immediately returning so that if there are other errors, like if the command is unknown, you can return those instead. Or make the errors powers of two and return them OR'ed together, so that you can return multiple errors in one go.)</p>
</li>
<li><p>Instead of copying the string inside <code>buffer</code>, we can just point to that string in <code>arr</code>. Note, however, that this means that <code>buffer</code> <strong>must</strong> outlive the command. If that causes problems, just don't use this modification.</p>
</li>
<li><p>I would also make it clearer that <code>i</code> is only used inside that while loop, and rewrite it as a for loop.</p>
<pre><code>  for (int i = 0; token != NULL; i++) {
      if (i &gt;= 3) return ERR_TOO_MANY_ARGUMENTS; // A new error type for the .h file
      token[strcspn(token, "\n")] = '\0'; // Remove trailing new lines
      arr[i] = token;
      token = strtok(NULL, delimiter); // Next token
  }
</code></pre>
</li>
<li><p>You can replace all instances of <code>arr[n]</code> with more readable names by <code>#define</code>ing macros:</p>
<pre><code>  #define COMMAND (arr[0])
  #define KEY (arr[1])
  #define DATA (arr[2])
</code></pre>
</li>
<li><p>You can replace <code>strcmp(...) != 0</code> with <code>strcmp(...)</code> and <code>strcmp(...) == 0</code> with <code>!strcmp(...)</code>. (Don't worry, code with all the modifications will be posted at the end.)</p>
</li>
<li><p>I would replace the if-statement for <code>GET</code> with an <code>else</code> to the <code>SET</code> if-statement, and then <code>assert</code> that the command is <code>GET</code>. (This makes sure that we don't make a mistake where we let a command through and it falls through both if-statements and does nothing, not modifying the command.)</p>
</li>
<li><p>Here's the code in all it's glory:</p>
<pre><code>  #include &lt;assert.h&gt;
  #include &lt;string.h&gt;
  #include "command.h"

  int parse_command(char * buffer, command* c) {
      char *delimiter = " ";
      char *token = strtok(buffer, delimiter);
      // We can allocate the char* pointers on the stack, since the length is
      // constant.
      char *arr[3] = {0};

      // Split the string into an array of strings
      for (int i = 0; token != NULL; i++) {
          // We make sure that if there are more than 3 arguments, we
          // don't overwrite memory after `arr`.
          if (i &gt;= 3) return ERR_TOO_MANY_ARGUMENTS;
          token[strcspn(token, "\n")] = '\0'; // Remove trailing new lines
          // We can store a pointer to `token` (which is inside `buffer`)
          // instead of copying the string.
          // Note, however, that this means that `buffer` must outlive
          // `command`.
          arr[i] = token;
          token = strtok(NULL, delimiter); // Next token
      }

      // "Magic numbers", like arr[0], should be defined in a
      // macro or constant with a descriptive name.
      #define COMMAND (arr[0])
      #define KEY (arr[1])
      #define DATA (arr[2])

      // Redundant comparisons against 0, are, well, redundant.
      if (strcmp(COMMAND, "SET") &amp;&amp; strcmp(COMMAND, "GET")) {
          return ERR_COMMAND_NOT_RECOGNIZED;
      }

      // Parse SET command
      if (!strcmp(COMMAND, "SET")) {
          if (KEY == NULL) return ERR_NO_KEY;

          // Validate key length
          if (strlen(KEY) &gt; MAX_KEY_LENGTH) {
              return ERR_KEY_LENGTH;
          }

          // Validate data
          if (DATA == NULL) {
              return ERR_NO_DATA;
          }

          c-&gt;command_type = SET;
          c-&gt;key = KEY;
          c-&gt;data = DATA;
      } else {
          assert(!strcmp(COMMAND, "GET"));
          if (KEY == NULL) {
              return ERR_NO_KEY;
          }

          // Validate key length
          if (strlen(KEY) &gt; MAX_KEY_LENGTH) {
              return ERR_KEY_LENGTH;
          }

          c-&gt;command_type = GET;
          c-&gt;key = KEY;
      }

      return 0;
  }
</code></pre>
</li>
</ul>
    </div>