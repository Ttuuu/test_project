<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I don't know the Botan library, so I'll stick to some general recommendations.</p>

<hr>

<p>Don't include whole namespaces at global scope, especially the <code>std</code> namespace.</p>

<hr>

<p>The only use of Qt in this function is to accept <code>QString</code> arguments, with which we do nothing but convert to standard strings.  So why not remove the dependency, and allow the function to be used in non-Qt projects, by accepting the filenames as <code>const std::string&amp;</code>?  We can keep the interface by providing a (header-only, trivially inlinable) wrapper separately as a convenience for use with Qt:</p>

<pre><code>//encrypt.h
bool EncryptFile(const std::string&amp; source, const std::string&amp; destination);
</code></pre>



<pre><code>//encrypt-qt.h
bool EncryptFile(QString source, QString destination)
{ return EncryptFile(source.toStdString(), destination.toStdString(); }
</code></pre>

<p>There's certainly no need to use <code>c_str()</code> when passing to the streams' constructors - a <code>std::string</code> is fine (and expected) there.</p>

<hr>

<p>I'd probably go one further with the overloads, and provide a version that accepts a pair of streams, so that we could use this for network streaming or in-memory encryption:</p>

<pre><code>//encrypt.h
bool EncryptFile(std::istream&amp; source, std::ostream&amp; destination);

bool EncryptFile(const std::string&amp; source, const std::string&amp; destination);
{
    try {
        std::ifstream in(source, std::ios::binary);
        std::ofstream out(destination, std::ios::binary);
        return EncryptFile(in, out);
    } catch (...) {
        return false;
    }
}
</code></pre>

<hr>

<p>Why do we return true, even if writing the output failed?  For example, try passing <code>/dev/full</code> as the destination.  We could fix that:</p>

<pre><code>return in &amp;&amp; out;
</code></pre>

<p>Alternatively, we could arrange for the streams to throw exceptions:</p>

<pre><code>    in.exceptions(std::ifstream::failbit | std::ifstream::bad);
    out.exceptions(std::ifstream::failbit | std::ifstream::bad);
</code></pre>
    </div>