<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Observation</h2>
<p>This is favorite of mine for interview.</p>
<p>The first thing I want a candidate to do is spot that this is solvable using Dijkstra's algorithm. :-)</p>
<p>You don't need to build the graph nor implement the traveling salesman to find the best solution. Much easier to implement Dijkstra. And rather than being <code>O(n^2*2^n)</code> you can get <code>O(n^2)</code>.</p>
<h2>Code Review</h2>
<p>Prefer: <code>std::vector&lt;std::vector&lt;std::string&gt;&gt;</code> rather than <code>const inline std::vector&lt;std::vector&lt;std::string&gt;&gt;</code>.<br>
Prefer: To pass unmodfiable parameters be const reference.<br>
Prefer: To put the <code>&amp;</code> by the type rather than the parameter.</p>
<pre><code>    const inline std::vector&lt;std::vector&lt;std::string&gt;&gt; findLadders(
                const std::string begin,
                const std::string end,
                const std::vector&lt;std::string&gt; &amp;words
    )
</code></pre>
<hr>
<p>I have started using <code>std::begin()</code> and <code>std::end()</code> rather than using the mebers. This makes it easier to modify the code simply by changing types:</p>
<pre><code>        std::unordered_set&lt;std::string&gt; dict_words(words.begin(), words.end());


         // I would do this:
        std::unordered_set&lt;std::string&gt; dict_words(std::begin(words), std::end(words));
</code></pre>
<hr>
<p>Why only test <code>end</code>. Why not test both <code>start</code> and <code>end</code> for an early exit?</p>
<pre><code>        if (dict_words.find(end) == dict_words.end()) {
            return {};
        }
</code></pre>
<hr>
<p>To help distinguish between types and objects. It is normal to use an initial capitol letter in the type name (at least for user defined types).</p>
<pre><code>        graph graph;

        // So I would do
        Graph  graph;
</code></pre>
<p>Types are really important in C++ so make them stick out.</p>
<hr>
<p>This is the old style of type aliasing (yes I know the keyword is <code>typedef</code>. But you are creating a type alias (these are not distinct types simply two names for the same type).</p>
<pre><code>    typedef unordered_map&lt;std::string, std::vector&lt;std::string&gt;&gt; graph;

    // The modern way of doing this is:
    using  graph = unordered_map&lt;std::string, std::vector&lt;std::string&gt;&gt;;
</code></pre>
<hr>
<p>In the last part I would make the same comment as @Reinderien with the for loop.</p>
<pre><code>        std::unordered_set&lt;std::string&gt; candidate_words;
</code></pre>
<h2>Dijkstra Algorithm</h2>
<pre><code>#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;vector&gt;
#include &lt;set&gt;
#include &lt;map&gt;
#include &lt;queue&gt;

using Word = std::string;
struct Node // Used by the frontier queue (a priority queue)
{           // Ordered by cost;
    Node(Word const&amp; word)
        : word(word)
        , cost(0)
    {}
    Node(Word const&amp; word, int cost, Word parent)
        : word(word)
        , cost(cost)
        , parent(parent)
    {}

    bool operator&lt;(Node const&amp; rhs)  const {return std::tie(cost, word) &gt; std::tie(rhs.cost, rhs.word);}

    Word    word;
    int     cost;
    Word    parent;
};
struct Data // Used by Found List
{           // The word is the key into the list
            // We track the number of routes to this node by tracking the parents
            // with equal cost to get to this node.

    // Used to create‚ê£
    Data(Node const&amp; node)
        : cost(node.cost)
    {
        if (node.parent != "") {
            parents.emplace_back(node.parent);
        }
    }
    void addParent(Word const&amp; word)
    {
        parents.emplace_back(word);
    }

    int                 cost;
    std::vector&lt;Word&gt;   parents;
};
using FrontierQueue = std::priority_queue&lt;Node&gt;;
using FoundList     = std::map&lt;Word, Data&gt;;
using Route         = std::vector&lt;Word&gt;;
using Result        = std::vector&lt;Route&gt;;
using Dictionary    = std::set&lt;Word&gt;;

void buildResult(FoundList const&amp; found, Word const&amp; node, Route&amp; route, Result&amp; result)
{
    route.emplace_back(node);
    auto const&amp; nodeInfo = found.find(node);

    if (nodeInfo-&gt;second.parents.size() == 0) {
        // Only start has no parents.
        result.emplace_back(route.rbegin(), route.rend());
        route.pop_back();
        return;
    }

    for(auto const&amp; parent: nodeInfo-&gt;second.parents) {
        buildResult(found, parent, route, result);
    }
    route.pop_back();
}

std::vector&lt;std::vector&lt;std::string&gt;&gt; dijkstra(
        Word const&amp; begin,
        Word const&amp; end,
        std::vector&lt;std::string&gt; const&amp; words)
{
    Dictionary      dictionary(std::begin(words), std::end(words));

    bool            foundEnd = false;
    int             bestCost;
    FrontierQueue   frontier;
    FoundList       found;

    frontier.emplace(begin);

    while (!frontier.empty())
    {
        Node node    = frontier.top();
        frontier.pop();

        if (foundEnd &amp;&amp; node.cost &gt; bestCost) {
            // We have found the end and any subsequent path will
            // be longer (as frontier is sorted by cost) so
            // we can simply stop now.
            break;
        }

        auto find = found.find(node.word);
        if (find == found.end()) {
            // First time we have seen this word add it to the found list.
            found.emplace(node.word, node);
        }
        else {
            // We have found the shortest route to this node
            if (node.cost == find-&gt;second.cost) {
                // Another route to this node that is of the same length
                find-&gt;second.parents.emplace_back(node.parent);
            }
            // No point in adding other words from this point as this was already done.
            continue;
        }

        if (node.word == end) {
            // reached the end.
            // So record the cost of getting there.
            // Other routes may equal it.
            foundEnd = true;
            bestCost = node.cost;
        }
        else {
            // Not at the end find the next words to try.
            std::string next = node.word;
            for(auto&amp; val: next) {
                auto tmp = val;
                for(char loop = 'a'; loop &lt;= 'z'; ++loop) {
                    val = loop;
                    if (next != node.word &amp;&amp; dictionary.find(next) != dictionary.end()) {
                        frontier.emplace(next, node.cost + 1, node.word);
                    }
                }
                val = tmp;
            }
        }
    }

    // At this point we have found all the shortest routes to end.
    // Or there is no route to end.

    auto endNode = found.find(end);
    if (endNode == found.end()) {
        // No end node so return an empty list.
        return {};
    }

    Route   route;
    Result  result;
    buildResult(found, end, route, result);

    return result;
}

int main()
{
    std::string begin   = "hit";
    std::string end     = "cog";
    std::vector&lt;std::string&gt; words  = {"hot","dot","dog","lot","log","cog"};
/*
    "hit"
    "cog"
    ["hot","dot","dog","lot","log"]
*/
    Result result = dijkstra(begin, end, words);
    for(auto const&amp; route: result) {
        for(auto const&amp; word: route) {
            std::cout &lt;&lt; word &lt;&lt; " ";
        }
        std::cout &lt;&lt; "\n";
    }
}
</code></pre>
    </div>