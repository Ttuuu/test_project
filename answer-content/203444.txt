<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There's some weird stuff in there; I recommend trying to remove as much weird stuff as possible and then making a new post. Here's some examples:</p>

<hr>

<pre><code>template&lt;init initType, is_invocable function&gt;
void enqueueSafe(function&amp;&amp; item) noexcept
{
    REPORT("move",0);
    line.emplace_back(std::move&lt;function&amp;&gt;(item));
}
</code></pre>

<ul>
<li><p>Here <code>init</code> is an enum type and <code>is_invocable</code> is a concept, yet they have the same capitalization style. Prefer <code>CamelCase</code> for concepts, I'd say.</p></li>
<li><p>Similarly, <code>function</code> would normally be spelled with a short capitalized name, e.g. <code>F</code>. And why is it <code>initType</code> but <code>is_invocable</code>? Are we doing <code>lowerCamelCase</code> or <code>snake_case</code>?</p></li>
<li><p>You say <code>noexcept</code>, but this code executes a user-provided callback which is not necessarily <code>noexcept</code>. This is at least a yellow flag.</p></li>
<li><p>Now for the non-nitpicks. Template parameter <code>initType</code> is never used, and therefore <em>at least</em> should be unnamed. In fact, you should refactor this code to eliminate the unused parameter.</p></li>
<li><p><code>function&amp;&amp;</code> is a forwarding reference, but you are calling <code>std::move</code> on it; that's a red flag. Use <code>std::move</code> with rvalue references, and <code>std::forward</code> with forwarding references, and never the twain shall meet.</p></li>
<li><p>You are passing an explicit template parameter to <code>std::move</code>; this is certainly wrong.</p></li>
<li><p>I'm fairly confident that in this case, it's okay to constrain <code>function</code> to be invocable, even though we can't tell if it'll be deduced as a reference type or not. <em>In general,</em> though, you should be very very paranoid about mixing Concepts with value categories. <a href="https://godbolt.org/z/oSRvvp" rel="nofollow noreferrer">For example, <code>void foo(Integral&amp;&amp; i)</code> would do the wrong thing.</a></p></li>
</ul>

<p>Putting all of this together, we get:</p>

<pre><code>template&lt;class F&gt; requires Invocable&lt;F&gt;
void enqueueSafe(F&amp;&amp; item)
{
    REPORT("move", 0);
    line.emplace_back(std::forward&lt;F&gt;(item));
}
</code></pre>

<p>(I've switched to C++2a Working Draft syntax for illustrative purposes. You can switch it back to GCC terse syntax, of course.)</p>

<hr>

<p>Again with the unused template parameters:</p>

<pre><code>template&lt; typename ... params&gt;
void operator()(const char* file, int line, const char* func, 
                const char* note, int value )
</code></pre>

<p><code>params</code> is unused, and therefore shouldn't exist.</p>

<hr>

<pre><code>template&lt;init initType, is_vector vector&gt;
void enqueueSafe(const vector&amp; item)

template&lt;close closeType&gt;
execution close()

#define REPORT(...) REPORT( __FILE__, __LINE__, __func__, __VA_ARGS__);
</code></pre>

<p>You have a bad habit of reusing the exact same identifier for many different purposes: <code>close</code> here means two different things; <code>vector</code> is not <code>std::vector</code> (nor is it even the name of a class template); your <code>REPORT</code> macro looks like a bad joke. Try to find meaningful names for things that don't collide.</p>

<hr>

<p>Finally, I'll point to one specific red flag:</p>

<pre><code>    if (open==true)
    {
        open = false;
        ...
</code></pre>

<p>(Here <code>open</code> is the name of a <code>std::atomic&lt;bool&gt;</code> data member — naturally, not to be confused with <code>close</code> which is an enumeration type and/or member function!)</p>

<p>Anyone glancing at this code would say it looks like you ought to be doing</p>

<pre><code>bool was_open = open.exchange(false);
if (was_open) {
    ...
</code></pre>

<p>Maybe you're confident that the test-and-check in your code is sufficient, and can't possibly introduce any bug or race condition. If so, you should either</p>

<ul>
<li><p>add a code comment explaining exactly why your code is sufficient, or</p></li>
<li><p>just change it to use <code>exchange</code> anyway.</p></li>
</ul>

<p>The benefit of the second alternative is that you don't have to write any comments to explain yourself — the code just <em>looks</em> right, so nobody will ask awkward questions. :)</p>

<hr>

<p>I'm sure there are actual meaty things to review about the code itself, but I think all the weird stuff (<code>std::move&lt;foo&amp;&gt;(foo)</code> and the like) is just too distracting. I'd say fix it up and re-post.</p>
    </div>