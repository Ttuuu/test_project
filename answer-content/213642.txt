<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>I don't see why bother with clipping averages. If something was less than <code>ROTSW_MIN</code>, it is also less than <code>ROTSW_LOWER</code>.</p></li>
<li><p><code>count</code> is useless, you may operate directly on <code>rotsw_count</code>.</p></li>
</ul>

<hr>

<p>The moving averages <em>could</em> be computed a bit faster in assembly. The <code>rotsw_samples</code> array effectively contains 8 2-bit entries, and hence could be stored in a 16-bit register, say <code>R</code>. Now consider something along the lines of</p>

<pre><code>            rlc R             ; Shift the ra2 of the "old sample" into carry
            sbc avg_ra2, $0   ; Subtract carry
            rlc R             ; Same for ra3
            sbc avg_ra3, $0

            or R, sample      ; New sample is added to the "array"

            rrc sample        ; Shift ra3 of the "new sample" into carry
            adc avg_ra3, $0   ; Add carry
            rrc sample        ; Same for ra2
            adc avg_ra2, $0 
</code></pre>

<p>The exact syntax depends on the architecture and an assembler; it also assumes that the sample is already shifted right by 2.</p>

<p>Your target architecture may allow even faster variants.</p>

<p>Note that the similar tricks could be used to speed up the final <code>rotsw_count</code> computation.</p>

<hr>

<p>There is not enough context to address your worries about the switch being too speedy. In any case, the code is already quite fast. If doesn't keep up with the peripheral, the best answer is to upgrade the CPU. </p>
    </div>