<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In accordance with <a href="https://www.php-fig.org/psr/psr-1/" rel="nofollow noreferrer">PSR-1</a>, your method names should be in camelCase. To avoid function name conflicts (native <code>count()</code> with custom <code>count()</code>), it may be best to prefix the method names' functionality with <code>easy</code> or <code>simple</code>, <code>ci</code>, or <code>ar</code> for Active Record.</p>

<p>"Embrace the curly brace."  Always use curly braces to encapsulate your language construct and function bodies -- even if they only have one line of code inside them.  Not using <code>{</code> and <code>}</code> may lead to developer confusion or unintended/incorrect code logic.</p>

<p>For versatility, I recommend passing an array of arrays to your Crud methods.  This will allow you to separate column names from values, enable you to turn off CI's automatic quoting (<code>protect_identifiers</code> flag) when necessary (3rd element in a respective subarray), and effortlessly pass multiple where conditions when required.  There is a multitude of reasons for this utility -- here is just one: <a href="https://stackoverflow.com/q/2489453/2943403">https://stackoverflow.com/q/2489453/2943403</a>.</p>

<p>Granted, your <code>Read()</code> method _could_be as simple as passing the table name and an associative array of conditions to <code>get_where()</code>, but that approach doesn't permit the flexibility of turning off the auto-quoting.</p>

<p>Make the default <code>$condition</code> parameter value an empty array.  I don't like the meaningless <code>WHERE 1</code> in any project.</p>

<p>Use a foreach loop to only add a WHERE clause when there is actually something useful to write inside it.</p>

<pre><code>public function ciRead($tableName, $conditions = []) {
    foreach ($conditions as $condition) {
        $this-&gt;db-&gt;where($condition);
    }
    $this-&gt;db-&gt;get($tableName)-&gt;result();
}
</code></pre>

<p><code>insert()</code> <a href="https://stackoverflow.com/q/3360631/2943403">should have the table name as the first parameter</a>.</p>

<pre><code>public function ciCreate($tableName, $data) {
    return $this-&gt;db-&gt;insert($tableName, $data) ? $this-&gt;db-&gt;insert_id() : false;
}
</code></pre>

<p>For <code>update()</code> loop the conditions like in <code>read()</code>  I recommend returning the affected rows so that there is a truer representation of success. I often treat the affected rows value as a boolean or explicitly cast it with <code>(bool)</code> if I only need a truthy/falsey value and I want to make the coding intention very clear. </p>

<pre><code>public function ciUpdate($tableName, $data, $conditions = []) {
    foreach ($conditions as $condition) {
        $this-&gt;db-&gt;where($condition);
    }
    return $this-&gt;db-&gt;update($tableName, $data) ? $this-&gt;db-&gt;affected_rows() : false;
}
</code></pre>

<p>Same thinking with <code>delete()</code> regarding a more accurate return value...</p>

<pre><code>public function ciDelete($tableName, $conditions = []) {
    foreach ($conditions as $condition) {
        $this-&gt;db-&gt;where($condition);
    }
    return $this-&gt;db-&gt;delete($tableName) ? $this-&gt;db-&gt;affected_rows() : false;
}
</code></pre>

<p>When counting, CI has <code>count_all_results()</code>.</p>

<pre><code>public function ciCount($tableName, $conditions = []) {
    foreach ($conditions as $condition) {
        $this-&gt;db-&gt;where($condition);
    }
    return $this-&gt;db-&gt;count_all_results($tableName);
}
</code></pre>

<hr>

<p>In your controller (assuming all of the routing is set up properly), you should be collecting the slash-delimited input values as parameters of the method call instead of writing out all of those <code>segment()</code> calls.</p>

<p>Using <code>$_GET</code> data is perfectly fine when calling your <code>Read()</code> or <code>Count()</code> methods, but it is not recommended when you are writing to the database.  For <code>Insert()</code>, <code>Update()</code>, and <code>Delete()</code>, you need to be collecting user-supplied data via <code>$_POST</code> data only.</p>

<p>Be sure to validate and sanitize the incoming data in your controller before allowing access to your model methods.</p>

<p>Don't give your users any more access/privilege than absolutely necessary.  I wouldn't be letting people know what my table or column names are called.   I wouldn't want to offer them the flexibility to nominate the table/column that they want to access -- purely on the grounds of security.</p>

<p>Perhaps provide some kind of alias/whitelist to convert the user data to model entity identifiers (translate the table/column names with in the model) or ideally make all of the table/column names static/hardcoded (provided by you, the developer).</p>

<pre><code>public function fetch($tableName, $conditionId) {
    $result = $this-&gt;Crud-&gt;ciRead($tableName, [['id', $conditionId]]));
    ...
}
</code></pre>

<p>or when writing to the db use <code>post()</code>.</p>

<pre><code>public function changeStatus() {
    $tableName = $this-&gt;input-&gt;post('tableName');  // I don't like it
    $status = $this-&gt;input-&gt;post('status');
    $conditionId $this-&gt;input-&gt;post('conditionId');
    if ($this-&gt;Crud-&gt;ciUpdate($tableName, ['is_active' =&gt; $status], [['id', $conditionId]])) {
       $this-&gt;session-&gt;set_flashdata('success', "Success! Changes saved");
    } else {
       $this-&gt;session-&gt;set_flashdata('danger', "Something went wrong");
    }
    redirect('admin/seller/' . basename($_SERVER['HTTP_REFERER']));
}
</code></pre>
    </div>