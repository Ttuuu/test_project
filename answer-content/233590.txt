<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I am providing an answer to my post in order to address a comment by @slepic regarding the first sentence in the OP.  @slepic asked for clarification to this statement:</p>

<blockquote>
  <p>I have written many variations of the Sieve of Eratosthenses, which is
  the fastest way to generate a large collection of primes.</p>
</blockquote>

<p>First of all, what I meant was that in order to generate a lot of primes that a sieve is faster than using naive methods.  There may be sieves faster than Eratosthenses, but a sieve will be much faster than not using a sieve.  That was my intended statement and hopefully addresses the clarification that was requested.</p>

<p>My PrimeTable can be easily modified to demonstrate this.  First, I changed this line in <code>PrimeTable.cs</code>:</p>

<pre><code>public static bool IsInitialized { get; private set; } = true;
</code></pre>

<p>But hit a quirk because the only prime I have to start with is 2, and my later logic assumes the last known prime is odd.  I could change that logic but I chose instead to change this line:</p>

<pre><code>private static readonly List&lt;int&gt; _knownPrimes = new List&lt;int&gt;() { 2, 3 };
</code></pre>

<p>Which also required me to change a field, which was upgraded with softer coding:</p>

<pre><code>private static int _lastNumberChecked = LastKnownPrime;
</code></pre>

<p>With those few changes, I then wrote a method to generate primes:</p>

<pre><code>private static void SlowerGrowth()
{
    Console.WriteLine("Display 'slower' growth without sieve.");
    // Account for JIT
    var prime = PrimeTable.GetNextUnknownPrime();  
    var preCount = PrimeTable.KnownPrimeCount;  

    var step = TimeSpan.FromMilliseconds(10);
    var limit = TimeSpan.FromSeconds(1);
    var progressMark = step;

    var total = TimeSpan.Zero;
    var count = 0;

    while (total &lt; limit)
    {
        prime = PrimeTable.GetNextUnknownPrime();
        var elapsed = PrimeTable.LastDuration;
        total += elapsed;

        if (total &gt;= progressMark || total &gt;= limit)
        {
            count++;
            Console.WriteLine($"   Count = {(PrimeTable.KnownPrimeCount - preCount)}, Largest = {PrimeTable.LastKnownPrime}, Elapsed = {total}"); //, Step = {step}, Mark = {progressMark}");
            if (count == 5 || total &gt;= limit)
            {
                step = 10 * step;
                progressMark = step;
                count = 0;
            }
            else
            {
                progressMark += step;
            }
        }
    }
}
</code></pre>

<p>Which produced this output:</p>

<p><strong>WITHOUT A SIEVE (NAIVE CHECKS)</strong></p>

<pre><code>Display 'slower' growth without sieve.
   Count = 16427, Largest = 181211, Elapsed = 00:00:00.0100004
   Count = 29658, Largest = 346079, Elapsed = 00:00:00.0200006
   Count = 41234, Largest = 496007, Elapsed = 00:00:00.0300001
   Count = 52233, Largest = 642197, Elapsed = 00:00:00.0400015
   Count = 62740, Largest = 783707, Elapsed = 00:00:00.0500005
   Count = 104720, Largest = 1366609, Elapsed = 00:00:00.1000005
   Count = 178155, Largest = 2427463, Elapsed = 00:00:00.2000005
   Count = 243973, Largest = 3406421, Elapsed = 00:00:00.3000012
   Count = 306982, Largest = 4363897, Elapsed = 00:00:00.4000024
   Count = 365978, Largest = 5270231, Elapsed = 00:00:00.5000013
   Count = 619977, Largest = 9280757, Elapsed = 00:00:01.0000003
</code></pre>

<p>I followed up by running a few different size sieves, to get these results:</p>

<p><strong>WITH A SIEVE</strong></p>

<pre><code>PrimeTable.Initialize using assorted upper limits:
   Upper Limit = 10000001, PrimeCount = 664579, LastPrime = 9999991, Duration: 00:00:00.0340529  (includes JIT time)
   Upper Limit = 20000001, PrimeCount = 1270607, LastPrime = 19999999, Duration: 00:00:00.0618941
   Upper Limit = 200000001, PrimeCount = 11078937, LastPrime = 199999991, Duration: 00:00:00.9063038
</code></pre>

<p>Using ballpark numbers, it took the naive methods almost 1 second to generate around 620K primes with the largest near 9.3 million.  Using a sieve, it took only 0.035 seconds to find the same (plus 40K more).  For 1 seconds using a sieve, I could find over 11 million primes which is over 17X more than using naive methods.</p>
    </div>