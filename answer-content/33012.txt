<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>That is not a class: it is a collection of functions. A class has attributes (instance variables) and behaviours (methods that perform operations on the data):</p>
<blockquote>
<p>A class is a software element describing an abstract data type and its partial or total implementation. An abstract data type is a set of objects defined by the list of <strong>operations</strong>, or <em>features</em>, applicable to these objects, and the <strong>properties</strong> of these operations.</p>
<p>~ Bertrand Meyer, <a href="http://en.wikipedia.org/wiki/Object-Oriented_Software_Construction" rel="nofollow noreferrer">Object-Oriented Software Construction</a>, 2nd Edition, p.23.</p>
</blockquote>
<p>Consider:</p>
<pre><code>/**
 * Allows clients to determine the first value that matches
 * a list of values, based on a particular comparator.
 */
public class Determinator {
    private int[] list = new int[0];
    private Comparator comparator;

    public Determinator( int[] list ) {
      this( list, new LessThanComparator() );
    }

    public Determinator( int[] list, Comparator comparator ) {
      setList( list );
      setComparator( comparator );
    }

    private void setList( int[] list ) {
      if( list != null ) {
        this.list = list;
      }
    }

    private void setComparator( Comparator comparator ) {
      // Same as setList...
    }

    /**
     * Finds the first value in the list that has the relationship
     * to x as denoted by the comparator option.
     *
     * @param x The value to compare against the list of values.
     * @throws InvalidParameterException There was no valid value to return.
     */
    public int findValue( int x ) throws InvalidParameterException {
    }

    public boolean isWithinBoundary( ... ) {
    }

    public boolean isDuplicate( ... ) {
    }

    public boolean isInRange( ... ) {
    }
}
</code></pre>
<p>Note:</p>
<ul>
<li>All assertions and tests for <code>null</code> values are no longer necessary.</li>
<li>The interface (i.e., method definitions) for how the class works can be written independently of the methods themselves.</li>
<li>Using a <a href="http://docs.oracle.com/javase/7/docs/api/java/util/Comparator.html" rel="nofollow noreferrer">Comparator</a> object makes the code more generic, as it can perform any number of comparisons beyond less-than-or-equal-to.</li>
<li>The logic has been separated into smaller, more manageable methods.</li>
<li>No <code>null</code> values are returned: an exception is thrown when a suitable value is not found.</li>
</ul>
    </div>