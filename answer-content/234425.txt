<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code looks pretty decent already asside from a minor bug. I only have a few remarks for improvement.</p>

<hr>

<p>Don't use comments to explain the code. Either the code is clear by itself, or you should change it. The only exception is explaining WHY code is written a certain way. In your case, explaining <strong>why</strong> you do <code>temparray[0] = arrayofintegers[0];</code> first helps understanding the reasoning behind your solution. It also points out why it doesn't work for an input like <code>{-1,-2,-3,-4,-5,-6}</code>.</p>

<p>The comment explaining what your temparray means shouldn't be required. Instead of that comment it's better to give the variable a more meaningful name like <code>largestNumbers</code>.</p>

<p>The comment explaining result when input is less or equal to 4 numbers long can just be ommitted entirely. The line of code is perfectly clear to understand this immediatly without the distracting comment.</p>

<hr>

<p>Just nitpicking here but the <code>int[] temparray = new int[4];</code> isn't needed when the input is too small. Put it after the <code>if ( arrayofintegerslength &lt;= 4 ) return arrayofintegers;</code> instead.</p>

<hr>

<p>Your logic to insert elements into the largest 4 list is slightly confusing because it's 4 separate <code>if</code> statements that always get checked. It would be better to use <code>else</code> which makes it obvious that if a previous case was handled, we can skip the following insertion checks.</p>

<p>Added bonus is that you can simplify the checks for the next <code>if</code> statements because you know the current item is smaller than the previous checked elements already.</p>

<pre><code>for (int x = 1; x &lt; arrayofintegerslength; x++) {
    if (arrayofintegers[x] &gt; largestNumbers[0]) {
        largestNumbers[3] = largestNumbers[2];
        largestNumbers[2] = largestNumbers[1];
        largestNumbers[1] = largestNumbers[0];
        largestNumbers[0] = arrayofintegers[x];
    } else if (arrayofintegers[x] &gt; largestNumbers[1]) {
        largestNumbers[3] = largestNumbers[2];
        largestNumbers[2] = largestNumbers[1];
        largestNumbers[1] = arrayofintegers[x];
    } else if (arrayofintegers[x] &gt; largestNumbers[2]) {
        largestNumbers[3] = largestNumbers[2];
        largestNumbers[2] = arrayofintegers[x];
    } else if (arrayofintegers[x] &gt; largestNumbers[3]) {
        largestNumbers[3] = arrayofintegers[x];
    }
}
</code></pre>

<hr>

<p>What would happen if your next assignment is to modify your current algorithm to search for the largest <code>n</code> integers instead of a fixed 4? You'll have to rethink how your if statements should be handled. Given my last suggestion helps a bit already. The logic then needs to be to find the index in the <code>largestNumbers</code> array where the current element needs to be inserted, then use a loop to move all elements up to that index down a spot and finally put in the current element in it's place.</p>

<p>A slighly different algorithm makes it easier to generalise to any <code>n</code> largest numbers. The idea is to check the element against the current smallest of the n <code>largestNumbers</code> and put it in at that spot. Then move it up in the array by swapping places until it's in the right spot. This looks something like this:</p>

<pre><code>for (int x = 1; x &lt; arrayofintegerslength; x++) {
    if (arrayofintegers[x] &gt; largestNumbers[3]) {
        largestNumbers[3] = arrayofintegers[x];
    }
    if (arrayofintegers[x] &gt; largestNumbers[2]) {
        largestNumbers[3] = largestNumbers[2];
        largestNumbers[2] = arrayofintegers[x];
    }
    if (arrayofintegers[x] &gt; largestNumbers[1]) {
        largestNumbers[2] = largestNumbers[1];
        largestNumbers[1] = arrayofintegers[x];
    }
    if (arrayofintegers[x] &gt; largestNumbers[0]) {
        largestNumbers[1] = largestNumbers[0];
        largestNumbers[0] = arrayofintegers[x];
    }
}
</code></pre>

<p>Note the lack of <code>else</code> statements here.</p>

<p>We can then generalise this with a simple for loop. Adding in a few extra optimisations results in this solution:</p>

<pre><code>// TODO initialize array to a certain value that prevents your current 0 issue.

for (int currentInt : arrayofintegers) {
    if (currentInt &lt;= largestNumbers[largestNumbers.length - 1]) {
        continue;
    }
    largestNumbers[largestNumbers.length - 1] = currentInt;
    for (int index = largestNumbers.length - 2; index &gt;= 0; index--) {
        if (currentInt &lt;= largestNumbers[index]) {
            break;
        }

        largestNumbers[index + 1] = largestNumbers[index];
        largestNumbers[index] = currentInt;
    }
}
</code></pre>

<p>I do want to point out that your solution (given my other remarks) works so if you don't expect that you might need to generalise to any n largest numbers there isn't really a good reason to prefer this solution over yours.</p>
    </div>