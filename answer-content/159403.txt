<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>How about a <span class="math-container">\$O(n\log(n)+m\log(m))\$</span> time solution?</p>

<p><span class="math-container">\$n\log(n)\$</span> and <span class="math-container">\$m\log(m)\$</span> are for sorting (I'm assuming Ruby uses <span class="math-container">\$O(n\log(n))\$</span> sort).</p>

<p>Then there's one iteration over <code>numbers</code> in <span class="math-container">\$\Theta(n)\$</span> time and one iteration over <code>maxes</code> in <span class="math-container">\$\Theta(m)\$</span> time.</p>

<pre><code>def counts(nums, maxes)
  nums = nums.sort
  # `maxes_idxs` is array of pairs [value, index], sorted by value
  maxes_idxs = maxes.zip(0...maxes.size).sort
  res = maxes.clone

  i = 0

  # For all maxes...
  maxes_idxs.each do |max, maxidx|

    # find the next number greater than this max.
    while nums[i] &lt;= max and i &lt; nums.length
      i += 1
    end

    # This max has `i` numbers less than itself. Write it to the array
    # with results, at the original position of this max (before sorting).
    res[maxidx] = i
  end

  res
end
</code></pre>

<p>I haven't tested the performance, so I don't know if it's actually faster, but I'm quite convinced it is.</p>
    </div>