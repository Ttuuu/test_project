<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><code>malloc</code> can fail. Deal with it.</p>

<p>If you don't modify something passed by pointer, mark it <code>const</code>. Const-correctness, if rigorously followed, is a great help for debugging and understanding, and a right pain otherwise.</p>

<p>Consider taking advantage of the possibility to intersperse variable-declarations in code since C99. It's succh a nice feature even ancient C90 compilers allow it as an extension.<br>
This way you can declare and initialize variables where you need them, keeping their scopes minimal and easier to review.</p>

<p>There is nobody stopping you from modifying function-arguments. Might eliminate some variables that way...</p>

<p><code>int</code>s are easily copied. And sentinels allow for the elimination of special-cases, the bane of elegance and efficiency.</p>

<pre><code>int linked_list_is_sorted(const linked_list_t* list) {
    int last = INT_MIN;
    for(linked_list_node_t* node = list-&gt;head; node; node = node-&gt;next) {
        if(node-&gt;value &lt; last)
            return 0;
        last = node-&gt;value;
    }
    return 1;
}
</code></pre>

<p>Consider <code>const</code>-qualifying all pointers to string-literals. While in C the type is still <code>char[N]</code>, it is immutable.</p>

<p>How about changing the format-string instead of an insert?</p>

<pre><code>void linked_list_display(const linked_list_t* list) {
    const char* format = "%d";
    for(linked_list_node_t* node = list-&gt;head; node; node = node-&gt;next) {
        printf(format, node-&gt;value);
        format = ", %d";
    }
}
</code></pre>

<p>The conditional operator (<code>exp ? true_val : false_val</code>) is superb for choosing between two expressions.</p>

<p>Double-pointers are not scary. And using them allows you to avoid needless duplication.</p>

<pre><code>static linked_list_node_t* merge(linked_list_node_t* a, linked_list_node_t* b) {
    linked_list_node_t* head = NULL;
    linked_list_node_t** insert = &amp;head;

    while (a &amp;&amp; b) {
        linked_list_node_t** chosen = b-&gt;value &lt; a-&gt;value ? &amp;b : &amp;a;
        *insert = *chosen;
        *chosen= (*chosen)-&gt;next;
        insert = &amp;(*insert)-&gt;next
    }

    *insert = a ? a : b;
    return head;
}
</code></pre>

<p>Integral remainder is a somewhat costly operation. And as you know that <code>0 &lt;= n &lt; 2 * m</code> in <code>n % m</code>, you can replace it with a cheaper conditional subtraction.</p>

<p><code>return 0;</code> is implicit for <code>main()</code> since C99. Might be interesting...</p>
    </div>