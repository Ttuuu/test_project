<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><code>Set</code> and <code>Remove</code> are compact and clean code. <code>Add</code> is convoluted with these exception handlers:</p>

<blockquote>
<pre><code>  try
  {
    primary.Add(first, second);
  }
  catch (ArgumentNullException)
  {
    // If first is null, we end here and can rethrow with no harm done.
    throw new ArgumentNullException(nameof(first));
  }
  catch (ArgumentException)
  {
    // If the key is present in primary, then we end here and can rethrow with no harm done.
    throw new ArgumentException(nameof(first), $"{first} already present in the dictionary");
  }
</code></pre>
</blockquote>

<p>I would opt for calling sand-box methods <a href="https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.dictionary-2.tryadd?view=netstandard-2.1" rel="nofollow noreferrer">TryAdd</a> and <a href="https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.dictionary-2.remove?view=netframework-4.8" rel="nofollow noreferrer">Remove</a> instead:</p>

<pre><code>public void Add(TFirst first, TSecond second)
{
    if (!primary.TryAdd(first, second) &amp;&amp; !secondary.TryAdd(second, first))
    {
        primary.Remove(first);
        throw new InvalidOperationException("The tuple violates the bijective constraint");
    }
}
</code></pre>

<p>You can make the body a bit more verbose if you which to notify the caller which of the arguments violates the constraint.</p>

<pre><code>public void Add(TFirst first, TSecond second)
{
    if (!primary.TryAdd(first, second))
    {
        throw new InvalidOperationException("The first arg violates the bijective constraint");
    }

    if (!secondary.TryAdd(second, first))
    {
        primary.Remove(first);
        throw new InvalidOperationException("The second arg violates the bijective constraint");
    }
}
</code></pre>

<p>You could even check for a combination if you really need to:</p>

<pre><code>public void Add(TFirst first, TSecond second)
{
    var primaryAdded = primary.TryAdd(first, second);
    var secondaryAdded = secondary.TryAdd(second, first);

    if (primaryAdded &amp;&amp; !secondaryAdded)
    {
        primary.Remove(first);
        throw new InvalidOperationException("The second arg violates the bijective constraint");
    }

    if (!primaryAdded &amp;&amp; secondaryAdded)
    {
        secondary.Remove(second);
        throw new InvalidOperationException("The first arg violates the bijective constraint");
    }

    if (!primaryAdded &amp;&amp; !secondaryAdded)
    {
        throw new InvalidOperationException("Both args violate the bijective constraint");
    }
}
</code></pre>
    </div>