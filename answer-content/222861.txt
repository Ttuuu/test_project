<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>Your code has trailing whitespaces.  Remove them.  On Emacs, for
example, I use:</p>

<pre class="lang-none prettyprint-override"><code>M-x delete-trailing-whitespace
</code></pre></li>
<li><p>There is much debate on <code>#pragma once</code>.  (See, for example,
<a href="//stackoverflow.com/q/1143936"><code>#pragma once</code> vs include
guards?</a>)  Personally, I don't
use <code>#pragma once</code>, but I am not opposed to it either.  Other people
may disagree.</p></li>
<li><p>You put your code into the namespace <code>math</code>.  This is great, but
<code>math</code> seems to be too common.  Consider a more creative name.</p></li>
<li><p>Your guidelines on truncation are plausible.  <code>x += y</code> should not
modify the type of <code>x</code>.  That said, I think that <code>f1 + d1</code> should be
of type <code>variable_t&lt;double&gt;</code> instead of <code>variable_t&lt;float&gt;</code>.  The user
should cast manually if information loss is desired:</p>

<pre><code>f1 + static_cast&lt;variable_t&lt;float&gt;&gt;(d1)
</code></pre></li>
<li><p>Please!  Don't suppress errors caused by division by 0.  This will
cause much more problem than you would think.  Throw an exception.
This does not cause any degradation in performance because you already
check the case of 0 anyway.</p></li>
<li><p>Instead of casting floating point types to integer types and then
doing bitwise operations, why not ban the operations on types for which
the corresponding operations are not available, just like you do for
other operators?</p></li>
<li><p>Member functions defined in class are automatically <code>inline</code>.
There is no point in marking them <code>inline</code> again.  Instead of</p>

<pre><code>inline variable_t() : t{ 0 } {}
</code></pre>

<p>Use</p>

<pre><code>variable_t() : t{ 0 } {}
</code></pre>

<p>Similarly for other functions.</p></li>
<li><p>Instead of direct-initializing the underlying object with the value
<code>0</code>, consider value-initializing to keep consistent with standard
practice.</p>

<pre><code>variable_t() : t{} {}
</code></pre>

<p>You can also use an in-class member initializer.</p></li>
<li><p>You define the copy constructor:</p>

<pre><code>inline variable_t(const variable_t&lt;Ty&gt;&amp; rhs) { this-&gt;t = rhs(); }
</code></pre>

<p>along with the copy assignment operator.  They are redundant.
What's more, they force a copy when <code>Ty</code> can actually be moved.
Leave them out.</p></li>
<li><p>You define a constructor to convert between different <code>variable_t</code>
types.  (FWIW, technically they are not copy constructors.)</p>

<pre><code>template&lt;typename T&gt;
inline variable_t(const variable_t&lt;T&gt;&amp; rhs) { this-&gt;t = static_cast&lt;Ty&gt;(rhs()); }
</code></pre>

<p>Use an initializer clause instead of assignment.  Also, you should
constrain this constructor and mark it as explicit when <code>T</code>
cannot be implicitly converted to <code>Ty</code>, possibly with the help of
SFINAE.</p>

<pre><code>template &lt;typename T,
          std::enable_if_t&lt;std::is_convertible_v&lt;T, Ty&gt;, int&gt; = 0&gt;
variable_t(const variable_t&lt;T&gt;&amp; rhs)
    :t(rhs)
{
}

template &lt;typename T,
          std::enable_if_t&lt;std::is_constructible_v&lt;Ty, T&gt; &amp;&amp;
                           !std::is_convertible_v&lt;T, Ty&gt;, int&gt; = 0&gt;
explicit variable_t(const variable_t&lt;T&gt;&amp; rhs)
    :t(rhs)
{
}      
</code></pre>

<p>With C++20, this becomes easier:</p>

<pre><code>template &lt;typename T&gt;
    requires std::Constructible&lt;Ty, T&gt;
explicit(std::ConvertibleTo&lt;T, Ty&gt;) variable_t(const variable_t&lt;T&gt;&amp; rhs)
    :t(rhs)
{
}
</code></pre>

<p>Similarly for <code>operator=</code> with a different <code>variable_t</code> type and
with a different <code>T</code> type.</p></li>
<li><p>The use of <code>operator()</code> to access the underlying value is a bit
confusing.  The standard practice is to use <code>operator*</code>.  A conversion
operator to <code>Ty</code> is also OK.</p></li>
<li><p>Don't support an operator if is does not naturally make sense.  In
your case, just drop <code>operator[]</code>.  It only causes confusion.</p></li>
<li><p>Using <code>operator()</code> to set the underlying value is
counterintuitive.  Drop it as you already support <code>operator=</code>, which
is made for this purpose.</p></li>
<li><p>Don't use <code>this-&gt;t</code> when <code>t</code> is sufficient.</p></li>
<li><p>Your assignment operators (including <code>+=</code>, <code>-=</code>, etc.) are
duplicating the work of the constructors.  Why not support only
<code>variable_t&lt;Ty&gt;</code> and let the constructors handle the different types?
This way, you only need one <code>operator=</code>, one <code>operator+=</code>, one
<code>operator-=</code>, and so on.</p></li>
<li><p>Why do use first calculate the reciprocal and then multiply it in
your implementation of <code>operator/=</code> instead of just using division?</p></li>
<li><p>Comparison operators are symmetrical operators.  Such operators are
generally implemented as non-member functions to enable conversion on
both sides.  This way you need one instead of three. (And in fact you
only provided two of them!)</p></li>
<li><p>What is the point in having an overload of <code>variable</code> for non-const
lvalue references?  I can't see.</p>

<pre><code>template&lt;typename T&gt;
auto variable(T&amp; t) {
    return variable_t&lt;T&gt;(t);
}
</code></pre></li>
<li><p>You use</p>

<pre><code>v = variable_t&lt;T&gt;(val);
</code></pre>

<p>in your implementation of <code>operator&gt;&gt;</code>.  This way, you are
duplicating the code of the constructors.  Just use</p>

<pre><code>v = val;
</code></pre></li>
<li><p>You don't need to <code>#include &lt;iostream&gt;</code> just to provide the I/O
operations.  <code>#include &lt;iosfwd&gt;</code> is sufficient.  The user is
responsible for <code>#include &lt;iostream&gt;</code> when instantiating them.  (See
<a href="//stackoverflow.com/q/4300696">What is the <code>&lt;iosfwd&gt;</code> header?</a>)</p></li>
<li><p>Consider supporting all <code>std::basic_istream</code>s and
<code>std::basic_ostream</code>s, not just <code>std::istream</code> and <code>std::ostream</code>.
Instead of</p>

<pre><code>template&lt;typename T&gt;
inline std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, const variable_t&lt;T&gt;&amp; v)
</code></pre>

<p>Use</p>

<pre><code>template &lt;typename C, typename Tr, typename T&gt;
std::basic_ostream&lt;C, Tr&gt;&amp;
    operator&lt;&lt;(std::basic_ostream&lt;C, Tr&gt;&amp; os, const variable_t&lt;T&gt;&amp; v)
</code></pre>

<p>The implementation doesn't change.  Similar for <code>operator&gt;&gt;</code>.</p></li>
</ol>
    </div>