<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The table of probabilities is set as soon as your rad strength and duration are known. You only need to generate it once, for all letters, and then use it as a lookup table.</p>

<pre><code>from collections import defaultdict

def get_probabilities(rad_strength, rad_duration):
    high = rad_strength*10
    medium  = rad_strength*10 - rad_duration
    low  = rad_strength*5 + rad_duration
    picks = defaultdict(lambda: "5")
    probs = defaultdict(lambda: 1.)
    for letter in ["C",  "D", "E", "F"]:
        # picks[letter] = ("4", "5", "6", "7", "0", "1", "2", "3")
        # probs[letter] = (*[high] * 4, *[low] * 2, *[medium] * 2)
        picks[letter] = ("0", "1", "2", "3", "4", "5", "6", "7")
        probs[letter] = (low, low, medium, medium, high, high, high, high)
    for letter in ["8",  "9", "A", "B", "4", "5", "6", "7"]:
        # picks[letter] = ("4", "5", "A", "B", "C", "D", "2", "3")
        # probs[letter] = (*[high] * 4, *[low] * 4)
        picks[letter] = ("2", "3", "4", "5", "A", "B", "C", "D")
        probs[letter] = (low, low, high, high, high, high, low, low)
    for letter in ["0",  "1", "2", "3"]:
        picks[letter] = ("8", "9", "A", "B", "C", "D", "E", "F")
        # probs[letter] = (*[high] * 4, *[medium] * 2, *[low] * 2)
        probs[letter] = (high, high, high, high, medium, medium, low, low)
    return picks, probs
</code></pre>

<p>Note that I did not normalize the weights. This is because you can use <a href="https://docs.python.org/3/library/random.html#random.choices" rel="nofollow noreferrer"><code>random.choices</code></a>, which takes a weight argument and normalizes it for you if necessary:</p>

<pre><code>from random import choices

def scramble(letter, picks, probs):
    return choices(picks[letter], probs[letter])[0]
</code></pre>

<p>And if that seems like not enough for a function anymore, you might be right. You also don't need your <code>concat_letters</code> function. Lists are directly comparable and so are strings (which are larger than the strings of the numbers and sorted lexicographically): <code>["D", "A", "C"] &gt; ["9", "A", "3"] -&gt; True</code>. Instead I made the <code>scramble</code> function an inner function, so you don't have to pass the picks and probabilities every time:</p>

<pre><code>from itertools import count
from random import choices

def scramble_to(initial, target, picks, probs, log=False):    
    def scramble(letter):
        return choices(picks[letter], probs[letter])[0]

    current = initial.copy()
    for attempt in count():
        if log:
            print(f'Miniscramble #{attempt}:', ''.join(current))
        if current &gt;= target:
            if log:
                print(f'Done with {attempt} miniscrambles!')
            return attempt
        for i in range(3):
            if current[i] &lt; target[i]:
                current[i] = scramble(current[i])
                break   # only scramble one letter per attempt
</code></pre>

<p>The ouput of <code>itertools.product</code> is directly iterable, and so are strings. No need to iterate over them in a needless list/generator comprehension, respectively. You can also use <a href="https://docs.python.org/3/library/statistics.html#statistics.mean" rel="nofollow noreferrer"><code>statistics.mean</code></a> instead of doing it yourself.</p>

<pre><code>from statistics import mean
from itertools import product

def inactive(seq):
    return seq &lt; ("8", "0", "0") # blocks never start activated, so default is 800

if __name__ == "__main__":
    picks, probs = get_probabilities(1, 2)
    block_attempts = 4096
    target = ["D", "A", "C"]
    results = {}
    dataset = filter(inactive, product('0123456789ABCDEF', repeat=3))
    results = {block: mean(scramble_to(list(block), target, picks, probs)
                           for _ in range(block_attempts))
               for block in dataset}
</code></pre>

<p>(Untested for now)</p>

<p>Note that I used a <a href="http://stackoverflow.com/questions/419163/what-does-if-name-main-do"><code>if __name__ == "__main__":</code> guard</a> to ensure this code is not being run when importing from this script and followed Python's official style-guide, <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP8</a>, throughout this answer. PEP8 recommends using 4 spaces as indentation and always using a newline after e.g. an <code>if log:</code>.</p>

<p>As for visualization, here is a quick attempt at replicating your graph:</p>

<pre><code>import matplotlib.pyplot as plt

plt.style.use("dark_background")
plt.figure(figsize=(12, 6))
plt.plot(list(results.values()), 'o-', c="orange")
plt.grid()
plt.title("How many times do you have to press the \"Irradiate Block\" button to get a block to DAC?")
plt.xlabel("Block #")
plt.ylabel("# of attempts")
plt.show()
</code></pre>

<p>which results in</p>

<p><a href="https://i.stack.imgur.com/9TYcn.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/9TYcn.png" alt="enter image description here"></a></p>
    </div>