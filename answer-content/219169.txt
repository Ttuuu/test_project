<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>You could rearrange the conditions this way :</p>

<pre><code>if let greetingDate = defaults.object(forKey: "greetingDate") as? Date {
    let order = Calendar.current.compare(date, to: greetingDate, toGranularity: .day)
    if order == .orderedDescending {
        defaults.set(date, forKey: "greetingDate")
        presentWelcomeScreen(tabbar: tabbar)
    }
} else {
    defaults.set(date, forKey: "greetingDate")
    presentWelcomeScreen(tabbar: tabbar)
}
</code></pre></li>
<li><p>You could extract <code>Date()</code> as a local variable in this function just in case you are crossing midnight between checks.</p></li>
<li><p>The parameter name <code>tabbar</code> in both <code>showGreetingScreen</code> and <code>presentWelcomeScreen</code> doesn't seem necessary, you could use a wild card external name <code>_</code> to avoid being too verbose:</p>

<pre><code>private func showGreetingScreen (_ tabbar: UITabBarController) { 
    ... 
    presentWelcomeScreen(tabbar)
}
</code></pre></li>
<li><p><code>tabbar</code> isn't used in this function. It is only passed to <code>presentWelcomeScreen</code>, and this calls for refactoring the messaging in your code.</p></li>
<li><p>Instead of having string literals laying around inside your code, I would prefer to have a struct with all the keys to avoid possible errors:</p>

<pre><code>struct UDKeys {
    static let greetingDateKey = "greetingDate"
    static let otherKey        = "anotherKey"
}
</code></pre>

<p>Or declare these keys in an extension of <code>UserDefaults</code> itself :</p>

<pre><code>extension UserDefaults {
    static let greetingDateKey = "greetingDate"
    static let otherKey        = "anotherKey"
}
</code></pre></li>
</ul>

<hr>

<p>Finally, your code would look like this :</p>

<pre><code>struct UDKeys {
    static let greetingDateKey = "greetingDate"
    static let otherKey        = "anotherKey"
}

private func showGreetingScreen (_ tabbar: UITabBarController) {
    let defaults = UserDefaults.standard
    let date = Date()
    if let greetingDate = defaults.object(forKey: UDKeys.greetingDateKey) as? Date {
        let order = Calendar.current.compare(date, to: greetingDate, toGranularity: .day)
        if order == .orderedDescending {
            defaults.set(date, forKey: UDKeys.greetingDateKey)
            presentWelcomeScreen(tabbar)
        }
    } else {
        defaults.set(date, forKey: UDKeys.greetingDateKey)
        presentWelcomeScreen(tabbar)
    }
}
</code></pre>
    </div>