<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Terminology flawed</h3>

<p>You have also swapped the <code>head</code> and <code>tail</code>. The first element is the head, the last the tail.</p>

<hr>

<h3>Bug on insert</h3>

<p>Your code is bugged. A single item gets printed fine:</p>

<blockquote>
<pre><code>public static void main(String[] args) {
    SinglyCircularList scl = new SinglyCircularList();
    scl.insert(1);
    scl.printList();    // 1
}
</code></pre>
</blockquote>

<p>But adding more items yields in the first added item being duplicated at the back:</p>

<blockquote>
<pre><code>public static void main(String[] args) {
    SinglyCircularList scl = new SinglyCircularList();
    scl.insert(1);
    scl.insert(2);
    scl.printList();    // 121 instead of 12
}
</code></pre>
</blockquote>

<hr>

<h3>Specification not met</h3>

<p>And most importantly, <strong>your list is not circular</strong>. A circular list has the property that it nevers yields <code>null</code> on calling any <code>node.next</code>. But as you can see in your <code>print</code> method, you reach null.</p>

<blockquote>
<pre><code>public void printList() {
    NodeS temp = tail;
    for (int i = 0; i &lt;= size; i++) {
        if (temp != null) {
            System.out.print(temp.num);
            temp = temp.next;
        }
    }
    System.out.println();
}
</code></pre>
</blockquote>

<hr>

<h2>Refactored to Circular Linked List</h2>

<p>To make the list circular, we only need to track the <code>head</code>. The tail is the last <code>next</code> that is not the <code>head</code>, unless we have a single element.</p>

<pre><code>private NodeS head = null;
private int size = 0;

public NodeS getTail() {
    if (isEmpty()) {
        return null;
    }
    NodeS node = head;
    do {
        node = node.next;
    } while (node != head);
    return node;
}
</code></pre>

<p>Inserting an element at the tail should be called <code>append</code>. Here's a circular implemenation:</p>

<pre><code> public void append(int n) {
    NodeS node = new NodeS(n);
    if (isEmpty()) {
        head = node;
        head.next = head;
    } else {
        NodeS tail = getTail();
        tail.next = node;
        node.next = head;
    }
    size++;
}
</code></pre>

<p>Removing at the head should be called <code>poll</code>. Here's a circular implementation:</p>

<pre><code>public int poll() {
    if (isEmpty()) {
        return -1;
    }
    int num = head.num;
    head = head.next;
    size--;
    if (isEmpty()) {
        head = null;
    } else {
        NodeS tail = getTail();
        tail.next = head;
    }
    return num;
}
</code></pre>

<p>And printing the list should be from head to tail and also circular:</p>

<pre><code>public void printList() {
     NodeS node = head;
     if (node == null) {
         System.out.println("Empty List");
         return;
     }
     do {
         System.out.print(node.num);
         node = node.next;
     } while (node != head);
     System.out.println();
}
</code></pre>

<h3>Verification</h3>

<p>Here's an updated test:</p>

<pre><code>public static void main(String[] args) {
    SinglyCircularList scl = new SinglyCircularList();
    scl.printList();
    scl.append(1);
    scl.printList();
    scl.append(2);
    scl.printList();
    System.out.println(scl.poll() + " removed");
    scl.printList();
    System.out.println(scl.poll() + " removed");
    scl.printList();
}
</code></pre>

<p>yielding:</p>

<blockquote>
<pre><code>Empty List
1
12
1 removed
2
2 removed
Empty List
</code></pre>
</blockquote>
    </div>