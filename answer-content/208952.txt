<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here's a fix to the edge case. We want to check explicitly that we have a valid solution, which means that we want something akin to <code>any2</code> instead of <code>any</code> (since if we have just a single match then we have the problem case).</p>

<pre><code>def anyequalto(numbers, k):
    number_set = set(numbers)
    solutions = [num for num in numbers
                 if k - num in number_set]
    return len(solutions) &gt; 1
</code></pre>

<p>This fixes the edge case and still retains <code>O(n)</code> runtime since it uses a <code>set</code>.</p>

<pre><code>&gt;&gt;&gt; anyequalto([5], 10)
False
</code></pre>

<h3>Aside</h3>

<p>Right now this produces a list with the list comprehension used to generate <code>solutions</code> which one might argue is needlessly inefficient. I couldn't think of a stylistically good way to assert that a generator has more than one element aside from checking for <code>StopIteration</code> which I think is kinda clunky.</p>
    </div>