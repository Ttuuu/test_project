<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>One to many, indexed data</h2>

<p>When you need data organised so that there is a one to many relationship from an index to the data you can use a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map" rel="nofollow noreferrer">Map</a> to do the hard work of ensuring that the one to many rule stays true.</p>

<p>A map holds data that is referenced via a unique index (or key as JS people like to call it). The data to hold will be an object containing named days, and the times of open and close.</p>

<h3>Transform delivery times object to array</h3>

<p>In this case the index is the opening time and the data is the days that have that time open. </p>

<p>You will need to create a index key that uniquely identifies a specific opening time. A simple string will do <code>index = start + "-" end;</code> </p>

<p>Use the index to query the map for an object associated.</p>

<p>If no object for that index, create a new object that contains the day and additional information pertaining to the index, then add it to the map using the index as the key.</p>

<p>If the index object exists then just add the open day to the object.</p>

<p>Once you have collected the data you then extract the values from the map to the data type you want. In this case an array, one item of each unique index (opening time)</p>

<h3>Example</h3>

<p>The function will look like</p>

<pre><code>function transformDeliveryTimes(data) {
    const hours = new Map();

    const addOpen = (time, day) =&gt; {
        const from = time.start.hour, to = time.end.hour;
        const index = from + "-" + to;
        const open = hours.get(index);
        if (open) { open[day] = true }
        else { hours.set(index, {hours : {from, to}, [day] : true}) }
    }

    for (const [day, times] of Object.entries(data)) {
        for (const time of times) { addOpen(time, day) }
    }
    return [...hours.values()];
}
const openTimesArray = transformDeliveryTimes(deliveryHours);
</code></pre>

<h3>Sort the result</h3>

<p>The above creates an array that is similar but the order is not the same. If you need it sorted from earliest longest to latest longest you can sort the return array as follows</p>

<pre><code>openTimesArray.sort((a,b)=&gt; {
    const dif = a.hours.from - b.hours.from;
    return dif ? dif : a.hours.to - b.hours.to;
});
</code></pre>
    </div>