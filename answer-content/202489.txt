<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A couple of high-level comments:</p>

<ul>
<li>You have many places where you can pull things out of the conditionals to avoid repeating yourself (<a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself" rel="nofollow noreferrer">DRY</a> principle)</li>
<li>I would look to pass values into functions vs. using global variables.</li>
<li>You can use <code>set()</code>s to simplify a lot of the checking</li>
<li>The <code>print</code> functions can be inlined after the refactoring because they only occur in one place</li>
<li>Some of the variable names are misleading and it is recommended by <code>pep8</code> to use <code>lower_case</code> instead of <code>camelCase</code> for variable names</li>
</ul>

<p>Updated code:</p>

<pre><code>import os
import random
</code></pre>

<p>You might want to keep the dictionary in a file and read it in vs. hard coding it:</p>

<pre><code>dictionary = ['letters', 'sloppy', 'bedroom', 'jazzy', 'discovery', 'wistful', 
              'unadvised', 'help', 'line', 'shake', 'mend', 'time', 'attempt',
              'dare', 'straw', 'destroy', 'health', 'shiny']
</code></pre>

<p>Don't recommend using <code>lambda</code> if you are just going to assign it to a value, this is equivalent to the <code>def</code>:</p>

<pre><code>def clear():
    os.system('cls')  # Not portable
</code></pre>

<p>After refactoring you can eliminate all the inner <code>print</code> functions because the prints only happen in one location:</p>

<pre><code>def game(the_word):
    print("Let's start guessing!")
    lives = 10
</code></pre>

<p>Using <code>set</code>s allow you to simplify many of the checks.<br>
Instead of <code>while True:</code>, this condition checks that not all of the <code>correct_letters</code> are in <code>guessed</code>:</p>

<pre><code>    correct_letters = set(the_word)
    guessed = set()

    while not guessed &gt;= correct_letters:
        guess = input('Please give me a single letter: ')
        clear()

        if len(guess) != 1:   # Simplify check
            print('I need 1 letter, thanks.')
        elif guess in guessed:
            print('You already choose this letter.')
        else:
            guessed.add(guess)
            if guess in correct_letters:
                count = the_word.count(guess)
                verb = 'is' if count == 1 else 'are'
                print('Correct! There {} {} of this letter in this word.'.format(verb, count))
            else:
                lives -= 1
                if lives == 0:
                    print('You lost.')
                    break
</code></pre>

<p>Refactored out of each of the conditional expressions:</p>

<pre><code>            print('You have {} more lives.'.format(lives))
            print('You guessed these letters :', guessed)
</code></pre>

<p>Just calculate the <code>'***'</code> on demand using a simple generator expression:</p>

<pre><code>            print('Currently revealed of the word: ', ''.join(c if c in guessed else '*' for c in the_word))
</code></pre>

<p>The <code>else:</code> clause of a loop is only executed if the loop complete (i.e. no break) - which will only be true if the game is won:</p>

<pre><code>    else:
        print('You Won.')

    print('The word was: ', the_word)

def welcome():
    print('Now we will play the classic Hangman game, but for this time without drawing it.')
    print('It can be played in 1 or 2 player game mode')

def main():
    run = True
    welcome()

    while run:
        while True:
            try:
                game_mode = int(input('Game Mode (1/2): '))
                if game_mode in [1, 2]:
                    break    # Break out if the correct input
            except ValueError:
                pass

        if game_mode == 1:
            the_word = random.choice(dictionary)
        else:
            the_word = str(input('Please write here the word: '))
</code></pre>

<p>Refactored out of the conditionals:</p>

<pre><code>        clear()
        game(the_word)
</code></pre>

<p>Best to ask about another game outside of the actual game:</p>

<pre><code>        run = input('Another game (Y/N): ') in 'yY'
</code></pre>

<p>This is the normal way to run a script, it allows other ways to invoke <code>game()</code> in the future:</p>

<pre><code>if __name__ == '__main__':
    main()
</code></pre>

<p>Putting it all together:</p>

<pre><code>import os
import random

dictionary = ['letters', 'sloppy', 'bedroom', 'jazzy', 'discovery', 'wistful',
              'unadvised', 'help', 'line', 'shake', 'mend', 'time', 'attempt',
              'dare', 'straw', 'destroy', 'health', 'shiny']

def clear():
    os.system('cls')

def game(the_word):
    print("Let's start guessing!")

    lives = 10
    correct_letters = set(the_word)
    guessed = set()

    while not guessed &gt;= correct_letters:
        guess = input('Please give me a single letter: ')
        clear()
        if len(guess) != 1:
            print('I need 1 letter, thanks.')
        elif guess in guessed:
            print('You already wrote this letter.')
        else:
            guessed.add(guess)
            if guess in correct_letters:
                count = the_word.count(guess)
                verb = 'is' if count == 1 else 'are'
                print('Correct! There {} {} of this letter in this word.'.format(verb, count))
            else:
                lives -= 1
                if lives == 0:
                    print('You lost.')
                    break

            print('You have {} more lives.'.format(lives))
            print('You guessed these letters:', guessed)
            print('Currently revealed of the word:', ''.join(c if c in guessed else '*' for c in the_word))
    else:
        print('You won!')

    print('The word was ', the_word)

def welcome():
    print('Now we will play the classic Hangman game, but for this time without drawing it.')
    print('It can be played in 1 or 2 player game mode')

def main():
    welcome()
    run = True
    while run:
        while True:
            try:
                game_mode = int(input('Enter 1 or 2: '))
                if game_mode in [1, 2]:
                    break
            except ValueError:
                pass

        if game_mode == 1:
            the_word = random.choice(dictionary)
        else:
            the_word = str(input('Please write here the word: '))

        clear()
        game(the_word)
        run = input('Another game (Y/N): ') in 'yY'

if __name__ == '__main__':
    main()
</code></pre>
    </div>