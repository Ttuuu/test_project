<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First, instead of having your main in the root of src I would organize the project like this:</p>

<pre><code>prime
+- src
|  +- bin
   |  +- main.rs
|  +- lib.rs
|  +- prime.rs
+- tests
|  +- extern_test.rs
+- Cargo.lock
+- Cargo.toml
</code></pre>

<p>In your main.rs you would use your own crate like any other external crate (assuming the name of your lib is "prime_util" as it looks from your test file:</p>

<h2>main.rs</h2>

<pre><code>extern crate prime_util;

use std::env;
use std::io::stdin;

...
</code></pre>

<p>Regarding code quality in general there are some un-idiomatic things there but nothing very serious, and definately some things that are just a matter of taste, like this part where you have a match statement as a parameter:</p>

<pre><code>println!(
    "The integer {} is{} a prime.",
    num,
    match prime::is_prime(num) {
        true =&gt; "",
        false =&gt; " not",
    }
);
</code></pre>

<p>I find that a bit hard to follow, and would either construct a string or have two different print statements based on the match, but I would say this is more a matter of taste than right/wrong.</p>

<p>One thing that is something I really would look into is error handling. Your project is rather small and the only place your code can produce errors is in the application, and I would say it's OK to <code>unwrap()</code> or <code>expect()</code> there if you really mean that the error is unexpected and puts the program in an invalid state, but if you want the code to be as good as possible you would handle more error cases.</p>

<p>I.e. If the user accidentally wrote <code>o</code> instead of <code>0</code> should the program really panic?</p>

<p>Here's a small example with simple error handling, where you implement the simplest of error types with an enum. When you scale up you will see that this will make error handling quite a bit easier and the program much more robust:</p>

<p>When you start working through like this you will also see that there are challenges with how you've split up the functions between <code>main</code> and <code>take_input</code>.</p>

<p>But this is my opinion so take it for what it's worth. Hope it helps anyway :)</p>

<h2>Main.rs (with some simple error handling)</h2>

<pre><code>pub mod prime;

use std::env;
use std::io::stdin;
fn take_input() {
    println!("Prime cheker utility.\n=====================\n");
    loop {
        match process_single_line() {
            Err(e) =&gt; match e {
                MyError::InvalidDigit(msg) =&gt; {
                    println!("{}", msg);
                    println!("Please try again");
                },
                _ =&gt; break,
            },
            Ok(_) =&gt; (),
        }
        if user_wants_to_exit() {
            break;
        }
    }
}

#[derive(Debug)]
enum MyError {
    InvalidDigit(String),
    // place your different errors here
    Other,
}

use std::fmt;
impl fmt::Display for MyError {
    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {
        match self {
            MyError::InvalidDigit(msg) =&gt; write!(f, "{}", msg),
            MyError::Other =&gt; write!(f, "Unexpected error"),
        }
    }
}

impl std::error::Error for MyError {}

fn process_single_line() -&gt; Result&lt;(), MyError&gt; {
    let mut num_str: String = String::new();


    println!("Enter the number to check : ");

    stdin().read_line(&amp;mut num_str).unwrap();

    process_string(num_str.trim())
}

fn user_wants_to_exit() -&gt; bool {
    let mut usr_str = String::new();

    println!("Do you want to exit? (y/n) : ");
    stdin()
        .read_line(&amp;mut usr_str)
        .expect("Error while reading input.");

    let trimmed = usr_str.trim();

    trimmed == "y" || trimmed == "Y" || trimmed.to_lowercase() == "yes"
}

fn process_string(num_str: &amp;str) -&gt; Result&lt;(), MyError&gt;  {
    let num = num_str.parse::&lt;u64&gt;()
    .map_err(|_| MyError::InvalidDigit(format!("\"{}\" is not a valid digit.", num_str)))?;

    println!(
        "The integer {} is{} a prime.",
        num,
        match prime::is_prime(num) {
            true =&gt; "",
            false =&gt; " not",
        }
    );
    Ok(())
}

const HELP_TEXT: &amp;str = "USAGE:\n\n1. prime\n2. prime [unsigned integer]\n";
const INVALID_NUMBER: &amp;str = "Please enter a valid unsigned integer.";

fn main() {
    let args: Vec&lt;String&gt; = env::args().collect();
    match args.len() {
        1 =&gt; take_input(),
        2 =&gt; {
            process_string(args[1].trim()).ok();
            },
        _ =&gt; {
            println!("{}", HELP_TEXT);
        }
    }
}
</code></pre>

<h2>Update</h2>

<p>I created <a href="https://github.com/cfsamson/examples_codereview_prime" rel="nofollow noreferrer">this example repository</a> with some quick changes to project structure and code (mainly focusing on main.rs) to show some of the ideas I mentioned above.</p>
    </div>