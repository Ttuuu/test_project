<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>Does anyone know why I am seeing the character 8 appended to the output of xor decrypted data?</p>
</blockquote>

<p>The statement <code>echo lol</code> pipes <code>lol\n\r</code> to Python, which encodes the line breaks as <code>;_</code> which is decoded into an <code>8</code>. Unfortunately <code>echo -n</code> doesn't work here but adding <code>.strip()</code> to the input data in the Python script fixes this issue.</p>

<p>PEP8 is Python's internal coding standards which specify how line breaks and code should be structured: <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">https://www.python.org/dev/peps/pep-0008/</a> . The guide is very long; you can use <code>autopep8</code> to auto-format the code.</p>

<pre><code>    if raw:
        ret = xor(data, key)
        print(str(ret))
    else:
        if is_base64(data):
            # print('is base64')
            decoded = base64.b64decode(data).decode()
            ret = xor(decoded, key)
            print(ret)
        else:
            # print('is not base64')
            ret = xor(data, key)
            encoded = base64.b64encode(bytes(ret, "utf-8"))
            print(encoded.decode())
</code></pre>

<p>I would simplify the nested if-statements and add a <code>return</code> to <code>print(str(ret))</code> then the <code>is_base64</code> could be unindented, or I would set a variable called <code>decoded</code> to the final string to print, then print it out at the end of the <code>if/elif</code> loop.</p>

<p><code>is_base64(s)</code> could just run <code>base64.b64decode(data).decode()</code> and return <code>False</code> if any exceptions were thrown during decoding instead of the regex.</p>

<p>I would remove the commented out code such as <code># print('is base64')</code>.</p>
    </div>