<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>I am also still not entirely sure about when to use references, e.g., should the <code>data</code> field of the <code>Node</code> class be of type <code>E&amp;</code> or is just <code>E</code> ok?</p>
</blockquote>

<p>It should not be stored as a reference.  Using a reference would create ownership and lifetime issues, and can make the class harder to use (since you can't copy or move it).</p>

<p><code>addFirst</code> will crash if the list is empty (when <code>head</code> is <code>nullptr</code>).</p>

<p><code>removeFirst</code> should not return a pointer.  Currently you leak the memory you allocated for the <code>Node</code> that holds the data, and return a pointer to that.  When you fix the memory leak, you'll return a dangling pointer (or, worse, a pointer that the caller will have to delete).  It would be better to return a copy of the item in the list.  If the list is empty, either throw an exception or return a default constructed <code>T</code> object.  You will then need to make some changes to your destructor.</p>

<p>Your <code>while</code> loop in <code>print</code> can be more concisely stated using a <code>for</code> loop.</p>

<pre><code>template&lt;typename E&gt; void SinglyLinkedList&lt;E&gt;::print() const {
    for (Node* walk = head; walk != nullptr; walk = walk-&gt;getNext()) {
        std::cout &lt;&lt; walk-&gt;getData() &lt;&lt; '\n';
    }
}
</code></pre>

<p>I've also changed the <code>std::endl</code> to a <code>'\n'</code> character.  Since <code>endl</code> flushes the output buffer, there can be performance issues when using it.</p>

<p>You can also look into using rvalue references (<code>T &amp;&amp;</code>) for things, which will let you move objects rather than having to copy them.</p>
    </div>