<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Be consistent</h2>

<ul>
<li><p>You named all your method functions with lowercase letters and separated the words with underscores... So maybe <code>Prims</code> should be named <code>prims</code> or <code>prim_algorithm</code>;</p></li>
<li><p>In lists (argument lists, function calls, lists, etc) you always include a space after a comma (as you should), so do it always (I'm talking about <code>Edge.__init__</code>, <code>Graph.add_egde</code> and <code>Graph.add_edges</code>, for e.g.);</p></li>
<li><p>For the simpler <code>Graph</code> methods, the one-liners, you have three lines: function definition, docstring, return statement; this is perfectly fine for simple functions. So you should also do it for <code>Graph.vertex_from_name</code>, instead of having a blank line between the docstring and the return.</p></li>
</ul>

<h2><a href="https://www.python.org/dev/peps/pep-0257/" rel="nofollow noreferrer">Docstring conventions</a></h2>

<p>For <a href="https://www.python.org/dev/peps/pep-0257/#multi-line-docstrings" rel="nofollow noreferrer">multiline docstrings</a>, consider having the final <code>"""</code> in a separate line, all by itself, and then include a blank line between the multiline docstring and the body of the function.</p>

<h2>Avoid long lines</h2>

<p><a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">Python's style guide</a> suggests your lines don't exceed 81 characters (generally) and the <a href="https://github.com/psf/black" rel="nofollow noreferrer">black code formatter</a> goes with 89, because <em>"it's like highway speed limits, we won't bother you if you overdo it by a few km/h"</em>. But don't exceed that, no one wants to have to scroll right when reading someone else's code; for example, in your question, I have to scroll right to read some docstrings and some code in your functions.</p>

<h2><code>Prims</code></h2>

<p>As for the <code>Prims</code> function itself, I would reformat the body slightly:</p>

<pre class="lang-py prettyprint-override"><code>def Prims(self, start=None):
    """ Return MST using Prim's algorithm.

    Optional argument `start` gives the start vertex (defaults to first vertex).
    """

    if start is None:
        start = self.vertices[0]
    self.tree = Graph([start], [])

    while len(self.tree.vertices) != len(self.vertices):

        self.connected = set([e for vert in self.tree.vertices for e in self.edge_on_vertex(vert)])
        self.connected = sorted(list(self.connected), key=lambda x: x.weight)

        for edge in self.connected:
            if (edge.start not in self.tree.vertices) or (edge.end not in self.tree.vertices):
                if edge.start in self.tree.vertices:
                    self.tree.add_vertex(edge.end)
                else:
                    self.tree.add_vertex(edge.start)
                self.tree.edges.append(edge)

                break

    return self.tree
</code></pre>

<ul>
<li><p>I reformatted the docstring to keep the first line short and to the point. A short first docstring line is very helpful because many IDEs can show it if you hover the function name when using it elsewhere. If the docstring is long and/or contains irrelevant information, you won't be able to read what you needed to recall what your function does.</p></li>
<li><p>I added an explicit keyword argument, instead of having you guess what you decided the starting vertex argument was named; I also gave it a default value of <code>None</code>, against which I then compare to see if I need to use the default value. If you want that argument to always be called as a keyword argument, you can use this syntax: <code>def prims_algorithm(self, *, start=None):</code>.</p></li>
<li><p>If <code>Graph</code> takes a list of vertices when creating a <code>Graph</code> instance, why don't you initialize your tree instance already with the starting vertex, instead of appending it right after instantiating the <code>Graph</code>?</p></li>
<li><p>I added two blank lines by the end of the function to make it easier to spot the <code>return</code> and to make it easier to spot the <code>break</code>; in particular the <code>break</code> statement was fairly hard to find and a quick read didn't reveal it. I like having these important keywords visible!</p></li>
</ul>
    </div>