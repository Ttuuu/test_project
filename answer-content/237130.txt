<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The suggestions I'd make are all around making the code more robust and more explicit in error handling.</p>

<h1>Representing errors</h1>

<p>Your methods return <code>String</code>s. However, I'd say that's not really a good representation of what the methods do. Here's what I mean...</p>

<p><code>getJiraID</code> can fail. You've checked for this in an <code>assert</code>, which is great. That will give an informative message, but will also stop the program. (It's totally possible that's OK for your case, but in general, it's not). What you could do instead is have the methods return perhaps an <code>Either[Error, String]</code> where <code>Error</code> could be a case class that captures the relevant details of what went wrong.</p>

<p>Why is that important? If I'm using your code, the signature says I'll get a <code>String</code> back no matter what I pass in. However, what really happens is that the programme could stop. That would be very surprising to me as a user.</p>

<p>If, instead, I see the signature is <code>Either[Error, String]</code> I know it could fail, and I have to handle that appropriately. </p>

<p>To be clear: I'm making a general point. Your <code>getJiraID</code> is private, and you could say it's an internal helper, and will never fail in reality, but hopefully, you see the point I'm making.</p>

<p>That carries through into <code>createJIRA</code> which also returns a <code>String</code> (no matter what), but clearly this can fail. It can fail in more ways: presumably, the http client you're using could fail due to network error or a server error.  This is essentially the same point I made above.</p>

<h1>JSON</h1>

<p>The value <code>data</code> represents JSON. What happens if <code>project</code> contains a quotation mark? You'll have invalid JSON. I'd suggest using a JSON library to construct JSON safely, which will handle the cases of properly encoding String. <a href="https://circe.github.io/circe/" rel="nofollow noreferrer">Circe</a> is a good one, but there are plenty of others.</p>

<h1>Hardcoded credentials</h1>

<p>You have included a username and password in the body of the code. When that password expires (or changes), you'll have to hunt that down. I'd suggest making those parameters. For example:</p>

<pre><code>case class JiraClient(user: String, pass: String) {
  def create(...) = ...
}
</code></pre>

<p>... and then creating a <code>JiraClient</code> at the edges of your code (e.g., in a <code>main</code>) and perhaps reading those credentials from the environment (command-line arguments, configuration file, environment variables). You'd then have something anyone could use, and is easy to change without a recompile.</p>

<p>That same suggestion might apply for the <code>url</code>, too. I don't know how often that might change.</p>

<h1>Trivial</h1>

<p>Some of the formatting looks a little odd to my eye. E.g., <code>String ={</code> vs. <code>String = {</code>. Take a look at <a href="https://scalameta.org/scalafmt/" rel="nofollow noreferrer">scalafmt</a> as a way to automatically format your code for consistency.</p>
    </div>