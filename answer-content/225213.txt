<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There's another answer here with a great assessment of your solution. The upshot of that answer (and this one) is that you'd be better off doing a <code>test.sort()</code> and calling it a day.</p>

<p>Even though you should probably consider scrapping this solution, as explained in the other answer, a few things here may be worth commenting on anyway.</p>

<p>Overall, the style of your code looks about right for JavaScript written 5 to 10 years ago, but feels a bit archaic by modern standards.</p>

<p>Let's look at the last bit first:</p>

<pre><code>var test_defined = [];
var defined_from = 0;
var defined_to = test_original.length;
var x = defined_from;
while (x &lt; defined_to){
    if (test_original[x] !== undefined){
        test_defined.push(x);
    }
    x = x + 1;
}
</code></pre>

<p>Unless you want to target ancient browsers, you should get rid of function-scoped <code>var</code> and go for block-scoped <code>let</code> or <code>const</code> instead. Most languages use block scoping, and the function-scoped <code>var</code> has been an infamous source of confusion and bizarre workarounds in JavaScript.</p>

<p>Also, there are lots of useful tools in the <code>Array</code> toolbox these days, and there's usually something suitable for small jobs like this. But let's back up for a second: there's an issue here; this code leaves our sorted array in a weird state, with nested elements. I'd expect a <code>gridSort</code> function to do something similar to <code>Array.prototype.sort</code>, returning an array of the same length, and with the same elements (in a different order). In other words, the resulting array should be <em>flattened</em> -- and there is an array method called <code>flat</code> to do just that. Incidentally, it will also condense the array.</p>

<p>So that entire block of code could be replaced with this:</p>

<pre><code>let test_defined = test_original.flat()
</code></pre>

<p>Now for the first bit of code:</p>

<pre><code>var test_original = [];
var x = 0;
while (x &lt; test.length){
    if (test_original[test[x]] === undefined){
        test_original[test[x]] = [];
        test_original[test[x]][0] = test[x];
    }
    else{
        test_original[test[x]].push(test[x]);
    }
    x = x + 1;
}
</code></pre>

<p>This looks to me like a job for <code>reduce</code>. You could replace these 12 lines of code with 2:</p>

<pre><code>var test_original = test.reduce((a, v) =&gt;
    (a[v] ? a[v].push(v) : a[v] = [v], a), [])
</code></pre>

<p>Someone might argue that this looks like a subversion of <code>reduce</code>, or an abuse of obscure language features, or that it's less readable -- and they might be right.  But, you could use <code>forEach</code> instead, if you're not worried about impure callbacks, or give your variables more descriptive names, or scribble a few mustaches on it, or anything else that floats your boat. This is just an example.</p>

<p>That could leave our final <code>gridSort</code> function looking something like this:</p>

<pre><code>const gridSort = a =&gt;
    a.reduce((a, v) =&gt; (a[v] ? a[v].push(v) : a[v] = [v], a), []).flat()
</code></pre>

<p>Not the most readable thing in the world, to be sure... but even so, I'd bet most people would grok these 2 lines more quickly than the original 20+ lines (and this leaves you ~20 new lines to comment in excruciating detail before it adds any extra bloat to your source file).</p>

<p>All that said, the most useful tool in the Array toolbox for this situation is <code>Array.prototype.sort</code>, and you should probably just use that instead.</p>
    </div>