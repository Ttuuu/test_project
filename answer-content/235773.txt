<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I ended up with something like this:</p>

<pre><code>template&lt;std::size_t N, typename T&gt;
inline std::enable_if_t&lt;N == 0, bool&gt; typeCheck(variableList&amp; list) noexcept
{
    if (false == std::holds_alternative&lt;std::tuple_element_t&lt;N, T&gt;&gt;(list[N]))
    {
        std::cout &lt;&lt; "Function type check failed for " &lt;&lt; N &lt;&lt; ". element." &lt;&lt; std::endl;
        std::cout &lt;&lt; "Expected: " &lt;&lt; typeid(std::tuple_element_t&lt;N, T&gt;).name() &lt;&lt; "; Got: " &lt;&lt;
            std::visit([](auto&amp;&amp; t) -&gt; std::string { return typeid(decltype(t)).name(); }, list[N]) &lt;&lt; std::endl;
        return false;
    }
    return true;
}

template&lt;std::size_t N, typename T&gt;
inline std::enable_if_t&lt;0 &lt; N, bool&gt; typeCheck(variableList&amp; list) noexcept
{
    if (false == std::holds_alternative&lt;std::tuple_element_t&lt;N, T&gt;&gt;(list[N]))
    {
        std::cout &lt;&lt; "Function type check failed for " &lt;&lt; N &lt;&lt; ". element." &lt;&lt; std::endl;
        std::cout &lt;&lt; "Expected: " &lt;&lt; typeid(std::tuple_element_t&lt;N, T&gt;).name() &lt;&lt; "; Got: " &lt;&lt;
            std::visit([](auto&amp;&amp; t) -&gt; std::string { return typeid(decltype(t)).name(); }, list[N]) &lt;&lt; std::endl;
        return false;
    }
    return typeCheck&lt;N-1, T&gt;(list);
}

struct Function
{
    virtual std::size_t numArguments() const noexcept = 0;
    virtual bool checkVariables(variableList&amp; list) const noexcept = 0;
    virtual variable operator()(variableList&amp; list) = 0;
};

template&lt;typename... Ts&gt;
struct FunctionImpl : Function
{
    using pack = std::tuple&lt;Ts...&gt;;

    FunctionImpl(std::function&lt;variable(Ts &amp;&amp; ...args)&gt;&amp;&amp; fn) : Function{}, fn(std::forward&lt;decltype(fn)&gt;(fn)) {}

    variable operator()(variableList&amp; list)
    {
        return std::apply(fn, vectorToTuple&lt;std::tuple_size_v&lt;pack&gt;&gt;(list));
    }

    std::size_t numArguments() const noexcept
    {
        return std::tuple_size_v&lt;pack&gt;;
    }
    bool checkVariables(variableList&amp; list) const noexcept
    {
        if (list.size() &lt; std::tuple_size_v&lt;pack&gt;)
        {
            std::cout &lt;&lt; "Bad number of arguments" &lt;&lt; std::endl;
            return false;
        }

        return typeCheck&lt;std::tuple_size_v&lt;pack&gt; -1, pack&gt;(list);
    }

private:
    std::function&lt;variable(Ts &amp;&amp; ...args)&gt; fn;

    template &lt;typename T, typename std::size_t... Indices&gt;
    auto vectorToTupleHelper(const std::vector&lt;T&gt;&amp; v, std::index_sequence&lt;Indices...&gt;) {
        return std::make_tuple(std::get&lt;std::tuple_element_t&lt;Indices, pack&gt;&gt;(v[Indices])...);
    }

    template &lt;std::size_t N, typename T&gt;
    auto vectorToTuple(const std::vector&lt;T&gt;&amp; v) {
        return vectorToTupleHelper(v, std::make_index_sequence&lt;N&gt;());
    }
};

#include &lt;memory&gt;
std::array&lt;std::unique_ptr&lt;Function&gt;, 2&gt; fnArray = {
    std::make_unique&lt;FunctionImpl&lt;bool,int&gt;&gt; ([](bool,int) -&gt; variable {
        return variable(0);
    }),
    std::make_unique&lt;FunctionImpl&lt;int, double, bool&gt;&gt; ([](int a, short b, bool c) -&gt; variable {
        std::cout &lt;&lt; "    a: " &lt;&lt; a &lt;&lt; std::endl
            &lt;&lt; "    b: " &lt;&lt; b &lt;&lt; std::endl
            &lt;&lt; "    c: " &lt;&lt; c &lt;&lt; std::endl;
        return variable(12);
    })
};

int main()
{
    variableList list = { variable(2), variable(2.2), variable(false) };
    std::cout &lt;&lt; std::boolalpha &lt;&lt; fnArray[0]-&gt;checkVariables(list) &lt;&lt; std::endl;
    std::cout &lt;&lt; std::boolalpha &lt;&lt; fnArray[1]-&gt;checkVariables(list) &lt;&lt; std::endl;

    std::cout &lt;&lt; "Calling 2:" &lt;&lt; std::endl;
    auto result = fnArray[1]-&gt;operator()(list);
    std::cout &lt;&lt; "    result: " &lt;&lt; std::get&lt;int&gt;(result) &lt;&lt; std::endl;

    return 0;
}
</code></pre>
    </div>