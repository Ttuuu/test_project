<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Now that that pesky "<em>Not looking for the review of my code</em>" is gone...</p>

<h2>Step 1: White space</h2>

<p>Follow the <a href="https://www.python.org/dev/peps/pep-0008/" rel="noreferrer">PEP 8</a> guidelines, specifically (but not limited to) put a space around operators and after commas:</p>

<pre><code>n, k = map(int, input().split())   
arr = list(map(int, input().split()))   # read input sequence and store it as list type
for i in range(k):                      # iterate over 0 to (k-1)
    t = i % n                           # module of i wrt n
    arr[t] = arr[t] ^ arr[n - (t) - 1]  # xor between two list elements and then set result to the ith list element 
for i in arr:
    print(i, end=" ")                   # print the final sequence
</code></pre>

<p>Much easier to read.</p>

<h2>Step 2: Avoid multiple lookups</h2>

<p>Python is an interpreted language, and the meaning of a line of code -- or even a fragment of code -- can change by the time the interpreter returns to execute the code as second time.  This means the interpreter cannot truly compile the code; unless something is a well defined short-circuiting operation, every operation must be executed.</p>

<p>Consider:</p>

<pre><code>arr[t] = arr[t] ^ arr[n - (t) - 1]
</code></pre>

<p>The interpreter must compute the address of <code>arr[t]</code> twice; once to fetch the value, and a second time to store the new value, because some side-effect which occurs during the execution of <code>arr[n - (t) - 1]</code> may change the meaning of <code>arr[t]</code>.  In your case, <code>arr</code> is a <code>list</code>, and <code>n</code> and <code>t</code> are simple integers, but with user-defined types, anything can happen.  As such, the Python interpreter can never make the following optimization:</p>

<pre><code>arr[t] ^= arr[n - (t) - 1]
</code></pre>

<p>It is a tiny speed-up, but considering the code may execute <span class="math-container">\$10^{12}\$</span> times, it can add up.</p>

<h2>Step 3: Avoid calculations</h2>

<p>Speaking of avoiding work: because we know the length of the array is fixed, <code>arr[n - 1]</code> is the same as <code>arr[-1]</code>.  So we can further speed up the line of code as follows:</p>

<pre><code>arr[t] ^= arr[-1 - t]
</code></pre>

<p>Instead of two subtractions, we now have only one.  Yes, Python has to index from the back of the array, which internally is going to involve a subtraction, <strong>BUT</strong> that will be an optimized, C-coded subtraction operation on <code>ssize_t</code> values, instead of subtraction on variable byte length integers, which must be allocated and deallocated from the heap.</p>

<h2>Step 4: Printing space-separated lists</h2>

<p>The following is slow:</p>

<pre><code>for i in arr:
    print(i, end=" ")
</code></pre>

<p>This is faster:</p>

<pre><code>print(*arr)
</code></pre>

<p>And for long lists, this may be fastest:</p>

<pre><code>print(" ".join(map(str, arr)))
</code></pre>

<p>For a detail discussion, including timing charts, see <a href="https://codereview.stackexchange.com/questions/226970/printing-a-list-as-a-b-c-using-python/226976#226976">my answer</a> and <a href="https://codereview.stackexchange.com/a/226974/100620">this answer</a> on another question.</p>

<h2>Step 5: The Algorithm</h2>

<p>Consider the list <code>[A, B, C, D, E]</code>.</p>

<p>After applying a single pass of the operation on it (ie, <code>k = n</code>), you'll get:</p>

<pre><code>[A^E, B^D, C^C, D^(B^D), E^(A^E)]
</code></pre>

<p>which simplifies to:</p>

<pre><code>[A^E, B^D, 0, B, A]
</code></pre>

<p>If we apply a second pass (ie, <code>k = 2*n</code>), you'll get:</p>

<pre><code>[(A^E)^A, (B^D)^B, 0^0, B^((B^D)^B), A^((A^E)^A)]
</code></pre>

<p>which simplifies to:</p>

<pre><code>[E, D, 0, B^D, A^E]
</code></pre>

<p>A third pass, (ie, <code>k = 3*n</code>) gives:</p>

<pre><code>[E^(A^E), D^(B^D), 0^0, (B^D)^(D^(B^D)), (A^E)^(E^(A^E))]
</code></pre>

<p>or:</p>

<pre><code>[A, B, 0, D, E]
</code></pre>

<p>Now <code>k</code> does not need to be an exact multiple of <code>n</code>, so you'll have to figure out what to do in the general cases, but you should be able to use the above observation to eliminate a lot of unnecessary calculations.</p>

<p>Implementation left to student.</p>
    </div>