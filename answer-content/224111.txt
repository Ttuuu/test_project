<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The good thing first:</p>

<p>You divide and conquer the problem by creating some reasonable (and well named) methods. You could have gone all in by making methods for combining and final selection as well:</p>

<pre><code>  ...
  var combinedTotals = Combine(affordableKeyboards, affordableDrives);
  return SelectMaxBuy(combinedTotals, budget);
}
</code></pre>

<p>But as shown below, dividing the code into such small methods can sometimes obscure more useful approaches. </p>

<hr>

<p>It must be a mind slip that you find the affordable keyboards and drives, but you forget about them and iterate over the full arrays of keyboards and drives:</p>

<blockquote>
<pre><code>        // delete any that are over our budget
        var affordableKeyboards = GetAffordableItems(keyboards, budget);
        var affordableDrives = GetAffordableItems(drives, budget);

        // make a list to contain the combined totals
        var combinedTotals = new List&lt;int&gt;();

        foreach (var keyboard in keyboards)
        {
            foreach (var drive in drives)
            {
                combinedTotals.Add(keyboard + drive);
            }
        }
</code></pre>
</blockquote>

<p>I suppose that the loops should be:</p>

<pre><code>        foreach (var keyboard in affordableKeyboards)
        {
            foreach (var drive in affordableDrives)
            {
                combinedTotals.Add(keyboard + drive);
            }
        }
</code></pre>

<hr>

<p>Some optimizations:</p>

<pre><code>  return array.Where(n =&gt; n &lt; budget).ToArray();
</code></pre>

<p><code>Where</code> has to iterate through the entire array, even if it is sorted.
A better approach would have been to sort ascending first, then take untill <code>n &gt; budget</code>, and then reverse:</p>

<pre><code>array.OrderBy(n =&gt; n).TakeWhile(n =&gt; n &lt;= budget).Reverse();
</code></pre>

<p>Making the almost same considerations with the combined totals:</p>

<pre><code>  int result = combinedTotals.OrderByDescending(n =&gt; n).FirstOrDefault(n =&gt; n &lt;= budget);
</code></pre>

<p>Your entire method could be refined to this:</p>

<pre><code>static int GetMoneySpent(int[] keyboards, int[] drives, int budget)
{
  if (keyboards == null || keyboards.Length == 0 || drives == null || drives.Length == 0 || budget &lt;= 0)
    return -1;

  keyboards = keyboards.OrderBy(n =&gt; n).TakeWhile(n =&gt; n &lt;= budget).Reverse().ToArray();
  drives = drives.OrderBy(n =&gt; n).TakeWhile(n =&gt; n &lt;= budget).Reverse().ToArray();

  // make a list to contain the combined totals
  var combinedTotals = new List&lt;int&gt;();

  foreach (var keyboard in keyboards)
  {
    foreach (var drive in drives)
    {
      combinedTotals.Add(keyboard + drive);
    }
  }

  int result = combinedTotals.OrderByDescending(n =&gt; n).FirstOrDefault(n =&gt; n &lt;= budget);
  return result == 0 ? -1 : result;
}
</code></pre>

<hr>

<p>Just for the sport I made the below solution, that sorts the data sets in ascending order and iterate backwards to avoid reversing the data:</p>

<pre><code>int GetMoneySpent(int[] keyboards, int[] drives, int budget)
{
  if (keyboards == null || keyboards.Length == 0 || drives == null || drives.Length == 0 || budget &lt;= 0)
    return -1;

  int result = -1;     

  Array.Sort(keyboards);
  Array.Sort(drives);

  int istart = keyboards.Length - 1;
  while (istart &gt;= 0 &amp;&amp; keyboards[istart] &gt; budget) istart--;
  int jstart = drives.Length - 1;
  while (jstart &gt;= 0 &amp;&amp; drives[jstart] &gt; budget) jstart--;

  for (int i = istart; i &gt;= 0; i--)
  {
    int keyboard = keyboards[i];

    for (int j = jstart; j &gt;= 0; j--)
    {
      int drive = drives[j];

      int price = keyboard + drive;
      if (price &lt; result)
        break;

      if (price &gt; result &amp;&amp; price &lt;= budget)
      {
        result = price;
      }
    }
  }

  return result;
}
</code></pre>
    </div>