<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li>There should be some function definitions. <code>is_power_of_2</code>, <code>powers_of_2_below</code> and a <code>main</code>.</li>
<li>It's good practice to use an <code>if __name__ == '__main__'</code> guard.</li>
<li>Please stop putting lots of spaces at the end of lines.</li>
<li>Many of the imports are not used.</li>
<li>Always indent with 4 spaces.</li>
</ol>

<pre class="lang-py prettyprint-override"><code>import time


def is_power_of_2(X):
    binary = "{0:b}".format(int(X))
    return binary.count(str(1)) == 1


def powers_of_2_below(X):
    binary = "{0:b}".format(int(X))
    l = len(binary)
    count = 0
    result = [];
    for j in range(0, l):
        count = count + 1
        # create list of factors called result
        result.append(int(binary[0:l-count], 2))
        if len(result) == l-1:
            # I don't want to forget X itself is a factor
            result.append(X)
            break
    return result


def main(X):
    print('Find the factors of a power of 2')
    print('This input number must be a power of 2')
    if is_power_of_2(X):
        print('yes, this is a power of two')
    else:
        print('no, this is not a power of 2')
        quit()
    start = (round(time.time() * 1000000))
    result = factors_of_power_of_2(X)
    end = (round(time.time() * 1000000))
    print(result)
    print('Factoring took', end - start, 'microseconds')


if __name__ == '__main__':
    main(X)
</code></pre>

<ol start="6">
<li>You can now use <code>return</code> rather than <code>quit</code> to exit <code>main</code>.</li>
<li>The code in <code>is_power_of_2</code> is fine. There are a couple other ways you can implement it but they're all pretty underwhelming.</li>
<li>By replacing <code>count</code> with <code>(j + 1)</code> we can remove the need for that variable.</li>
<li>By using <code>j</code> rather than <code>(j + 1)</code> we can remove the need for the <code>if</code> in the for.</li>
<li>To get <code>l</code> in <code>powers_of_2_below</code> we can use <code>X.bit_length()</code>.</li>
<li>We can instead use <code>1 &lt;&lt; j</code> to build the value from <code>j</code> alone. This however will invert the output.</li>
</ol>

<pre class="lang-py prettyprint-override"><code>import time


def is_power_of_2(x):
    binary = "{0:b}".format(int(x))
    return binary.count(str(1)) == 1


def powers_of_2_below(x):
    result = []
    for j in range(0, x.bit_length()):
        result.append(1 &lt;&lt; j)
    return result


def main(x):
    print('Find the factors of a power of 2')
    print('This input number must be a power of 2')
    if is_power_of_2(x):
        print('yes, this is a power of two')
    else:
        print('no, this is not a power of 2')
        return
    start = (round(time.time() * 1000000))
    result = factors_of_power_of_2(x)
    end = (round(time.time() * 1000000))
    print(result)
    print('Factoring took', end - start, 'microseconds')


if __name__ == '__main__':
    main(32)
</code></pre>

<ol start="12">
<li><p>We can use a list comprehension instead of a for loop in <code>powers_of_2_below</code>.</p>

<pre class="lang-py prettyprint-override"><code>def powers_of_2_below(x):
    return [1 &lt;&lt; j for j in range(x.bit_length())]
</code></pre></li>
</ol>

<p>Alternate solutions to <code>is_power_of_2</code>:</p>

<ol start="13">
<li><p>We can use <code>powers_of_2_below</code> with <code>&amp;</code> and <code>any</code>.</p>

<pre class="lang-py prettyprint-override"><code>def is_power_of_2(x):
    x = abs(x)
    if x == 0:
        return False
    return not any(x &amp; i for i in powers_of_2_below(x - 1))
</code></pre></li>
<li><p>We can replace the <code>any</code> with just <code>x &amp; x - 1</code>. This is because <span class="math-container">\$1000 - 1 = 0111\$</span>. Logically this is doing exactly the same as 13.</p>

<pre class="lang-py prettyprint-override"><code>def is_power_of_2(x):
    x = abs(x)
    if x == 0:
        return False
    return not x &amp; x - 1
</code></pre></li>
<li><p>We can instead use <code>x.bit_length()</code> to construct the power of 2 it should be and check they are the same.</p>

<pre class="lang-py prettyprint-override"><code>def is_power_of_2(x):
    if x == 0:
        return False
    return abs(x) == 1 &lt;&lt; x.bit_length() - 1
</code></pre></li>
</ol>

<p>Overall <code>is_power_of_2</code> just doesn't look nice.</p>
    </div>