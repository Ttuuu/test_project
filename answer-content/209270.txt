<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>API design</h3>

<blockquote>
  <p>I only implemented <code>push</code>, <code>pop</code>, <code>peek</code>, <code>append</code>, <code>size</code>, and <code>next</code>. This is sufficient for implementing stacks or queues.</p>
</blockquote>

<p>I find this API confusing:</p>

<ul>
<li>What's the difference between <code>push</code> and <code>append</code>?</li>
<li>What is <code>next</code>?</li>
</ul>

<p>I think it would be better to implement a list Abstract Data Type with methods that are perfectly clear and intuitive. If you also want to provide stacks and queues, you could provide specialized APIs for those, and implement them in terms of the lower list, which will be a hidden implementation detail, and you can save users from any confusion.</p>

<p>From a list I would expect methods <code>insert</code>, <code>append</code>, <code>remove</code>, <code>size</code>, <code>isEmpty</code>, <code>first</code>, <code>last</code>.</p>

<p>A stack could be implemented on top of that, with methods <code>push</code>, <code>pop</code>, <code>isEmpty</code>, which would internally use a list, without exposing other methods of the list that may confuse users. Same thing for a queue.</p>

<h3>Implementation</h3>

<p>The implementation of the list is entirely in macros.
As a commenter pointed out, this is considered by some people a <a href="https://stackoverflow.com/questions/14041453/why-are-preprocessor-macros-evil-and-what-are-the-alternatives/14041847#14041847">nightmare to maintain</a>.
You responded that <em>"macros are the only way to make type-safe generics in C"</em>.
Which is true, but I believe you can take a sort of hybrid approach,
separating the essential generic code that can only be implemented with macros,
and other parts that can be implemented in regular C.</p>

<p>In particular, the only part that needs to be generic is the value stored in list nodes.
The operations on the nodes, the behavior of the list is independent from the payload in the nodes.
Therefore, I believe you can implement the list operations in regular C,
and limit the use of macros for the nodes.</p>
    </div>