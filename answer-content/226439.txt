<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Let's start with how I would have done it.</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const data = {
  0 : {"label":"New York", "val": 20},
  1 : {"label":"Rio", "val": 10},
  3 : {"label":"Tokyo", "val": 50},
  4 : {"label":"Santiago", "val": 20},
  5 : {"label":"Hong Kooong", "val": 100},
  6 : {"label":"Munich", "val": 90},
}

const result = Object.values(data)
  .sort((a, b) =&gt; b.val - a.val)
  .slice(0, 3)
  .reduce((c, v) =&gt; {
    c.data.labels.push(v.label)
    c.data.values.push(v.val)
    return c
  }, { data: { labels: [], values: []}})
  
console.log(result)</code></pre>
</div>
</div>


<p>Now onto your code:</p>

<pre><code>let dataArray = Object.values(data).sort(compare)
dataArray = dataArray.slice(0, 3)
</code></pre>

<p>You were off to a good start here. One minor nitpick is to just chain the operations since you're just reassigning <code>dataArray</code> with sort's results.</p>

<pre><code>let newLabel = []
let newValue = []
Object.keys(dataArray).map(function(key, index) {
  newLabel.push(dataArray[index]['label'])
  newValue.push(dataArray[index]['val'])
});

let newObj = {}
newObj.data = {}
newObj.data.labels = newLabel
newObj.data.values = newValue
</code></pre>

<p>This is where it went crazy.</p>

<p>Firstly, you used <code>Object.keys()</code> on <code>dataArray</code> (an array), which is not needed. If you need the array item index, all of the array methods provide the item index as second argument of the callback.</p>

<p>Also, this is a bad use of <code>array.map()</code>. <code>array.map()</code> is used to transform values in one array to another array of values, i.e. a 1:1 transform operation. In this case, you're merely using it for looping, something better suited for <code>array.forEach()</code>.</p>

<p>Since you're "reducing"/"aggregating" an array of values into one value (turning an array of values into an object), <code>array.reduce()</code> is the better option.</p>
    </div>