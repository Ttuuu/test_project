<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Avoid mixing import styles</h3>

<pre><code>from string import ascii_lowercase
import random
</code></pre>

<p>Either way of importing is fine. But try and stick with one style
rather than mixing different ones. So:</p>

<pre><code>from string import ascii_lowercase
from random import choice
</code></pre>

<h3>Names</h3>

<p>Names should be familiar and self-explanatory to the reader. You have
abbreviated "warning" as "war" which I've never seen before and which
I find confusing.</p>

<p>Same thing for <code>l_guessed</code>. What is l? And "rem" seem to stand for
"remaining." I changed all those to "left" because "left" is
synonymous with "remaining" and easy to type. And "char" is a
well-established abbrevation for "character" and "char" is easier to
type (and read!) than "letter" so I changed that too.</p>

<p>I've renamed the following:</p>

<ul>
<li><code>c_letters =&gt; correct_chars</code></li>
<li><code>g_rem =&gt; guesses_left</code></li>
<li><code>l_guessed =&gt; guessed_chars</code></li>
<li><code>lett =&gt; char</code></li>
<li><code>list_of_words =&gt; words</code></li>
<li><code>print_war_msg =&gt; print_warning_msg</code></li>
<li><code>rem_letters = chars_left</code></li>
<li><code>wars_rem =&gt; warnings_left</code></li>
</ul>

<h3>Sets</h3>

<p>A useful feature one step up from the beginner level is sets. Sets
should almost always be used instead of lists when you don't care
about the order of the items contained. For example, you don't care
about the order of the guesses, or the correct characters so both
<code>guessed_chars</code> and <code>correct_chars</code> should be sets.</p>

<p>Using sets, you can calculate the total score for a winning player
like this:</p>

<pre><code>score = len(set(secret_word)) * guesses_left
</code></pre>

<h3>Consistent string formatting</h3>

<p>In some parts of the code, you use f-strings for formatting but not in
other parts. It's better to be consistent and use the same formatting
style wherever possible.</p>

<h3>Avoid using nested functions</h3>

<p>It is legal and sometimes useful to nest function in Python, like this:</p>

<pre><code>def end_game_msg(g_rem, secret_word):
    def total_score(g_rem, secret_word):
        ...
</code></pre>

<p>But more often than not, it makes the code harder to read for no added
benefit.</p>

<h3>Don't define variables before they are needed</h3>

<p>In your main loop, you seem to have some kind of superuser mode:</p>

<pre><code># Conditions for the guessed letter
is_not_valid = not guess.isalpha()
is_not_one_letter = len(guess) != 1 and guess != 'cmd'
is_guessed = guess in guessed_chars
while guess == 'cmd':
    print('Enter Command...')
    ...
if guess == 'cmd':
    continue
if is_not_valid or is_not_one_letter or is_guessed:
</code></pre>

<p>Observe that <code>is_not_valid</code>, <code>is_not_one_letter</code> and <code>is_guessed</code> are
defined many lines before the if-statement in which they are used. You
should move them downwards so that they are adjacent to the
if-statement.</p>

<h3>Final code</h3>

<pre><code>from string import ascii_lowercase
from random import choice

def is_word_guessed(secret_word, c_letters):
    for char in secret_word:
        if char not in c_letters:
            return False
    return True

def chars_left(guessed_chars):
    chars_left = ''
    for char in ascii_lowercase:
        if char not in guessed_chars:
            chars_left += char + ' '
    return chars_left.upper()

def word_so_far(secret_word, correct_chars):
    word_so_far = ''
    for char in secret_word:
        if char not in correct_chars:
            word_so_far += '_ '
        else:
            word_so_far += char + ' '
    return word_so_far

def print_warning_msg(warnings_left, is_not_valid, is_not_one_letter):
    if is_not_valid:
        print('Please enter a valid character')
    elif is_not_one_letter:
        print('Please enter one letter at a time')
    else:
        print('You already guessed that letter')
    print()
    if warnings_left == 1:
        print('You have one more warning.')
    elif warnings_left == 0:
        print('You have no warnings remaining so you lose one guess!')
        print('... You now have 3 warning.')
    else:
        print(f'You have {warnings_left} warnings left.')
    print()

def game_start_msg(secret_word):
    print()
    print('Welcome to the game Hangman!')
    print(f'I\'m thinking of a word that is {len(secret_word)} letters long.')

def guess_start_msg(guesses_left, secret_word, guessed_chars):
    print('-' * 40)
    print()
    if guesses_left == 1:
        print('You have one more guess')
    else:
        print(f'You have {guesses_left} guesses left.')
    print()
    print(f'Word so far: {word_so_far(secret_word, guessed_chars)}')
    print()
    print(f'Available Letters: {chars_left(guessed_chars)}')
    print()

def end_game_msg(guesses_left, secret_word):
    if guesses_left &lt;= 0:
        print('Unfortunately you ran out of guesses,')
        print(f'The Secret word was: &gt;&gt;&gt;{secret_word}&lt;&lt;&lt;')
    else:
        score = len(set(secret_word)) * guesses_left
        print(f'Congrats, You win! Your score is {score}.')

def hangman(secret_word):
    guessed_chars = set()
    correct_chars = set()
    warnings_left = 3
    guesses_left = 10
    game_start_msg(secret_word)
    while not is_word_guessed(secret_word, correct_chars) and guesses_left &gt; 0:
        guess_start_msg(guesses_left, secret_word, guessed_chars)
        guess = input('Please guess a letter: ').lower()
        print()
        if guess == 'q':
            break
        while guess == 'cmd':
            print('Enter Command...')
            cmd = input ()
            if cmd == 'raise guess':
                by = int(input('Raise by?'))
                guesses_left += by
                print(f'Gusses Remaining increased by {by},'
                      f'current guesses are {guesses_left}.')
            elif cmd == 'reveal':
                win_game = input('Do You Want To Win? (Y/N)').upper()
                if win_game == 'Y':
                    correct_chars = set(secret_word)
                else:
                   print(f'Secret word is {secret_word}')
            elif cmd == 'exit':
                break
            else:
                print('''List Of Possible Commands:\
                        \nraise guess
                        \nreveal
                        \nexit
                        ''')
                continue
        if guess == 'cmd':
            continue
        is_not_valid = not guess.isalpha()
        is_not_one_letter = len(guess) != 1
        is_guessed = guess in guessed_chars
        if is_not_valid or is_not_one_letter or is_guessed:
            warnings_left -= 1
            print_warning_msg(warnings_left, is_not_valid, is_not_one_letter)
        else:
            guessed_chars.add(guess)
            if guess in secret_word:
                correct_chars.add(guess)
                print('Good Guess!')
                print()
            else:
                if guess in 'aeiou':
                    guesses_left -= 2
                    print('You lose two guesses because you guessed a wrong vowel')
                else:
                    guesses_left -= 1
                    print('Oops, that letter is not in my word')
                print()
        if warnings_left == 0:
            guesses_left -= 1
            warnings_left = 3

    end_game_msg(guesses_left, secret_word)

words = [
    'hello', 'say', 'zebra', 'jake', 'man', 'human',
    'god', 'fuel', 'car', 'sea', 'cat', 'dog', 'building'
]
secret_word = choice(words)
hangman(secret_word)
</code></pre>

<h3>More suggestions</h3>

<p>A very useful string function in Python is
the
<a href="https://appdividend.com/2019/01/31/python-string-join-example-python-join-method-tutorial/" rel="nofollow noreferrer">join</a> function. By
learning about it, you'll improve your Python programming a lot.</p>

<pre><code>  +----\
  |    o
  |   /|\
  |    \\
 / \
</code></pre>

<p>What's a hangman game without a hanging man? :)</p>
    </div>