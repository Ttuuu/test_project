<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Main problems</h3>

<ul>
<li>Several parts of the code interact directly with the console. This mixing of responsibilities results in code that's difficult to reuse and test.</li>
<li>Copying all data when a transaction is started is an easy and quick way to implement transactions, but it's indeed not the most efficient approach, and doesn't allow for concurrent transactions. Instead, a transaction could keep track of performed operations, and only apply them to the underlying key-value store on commit. Querying performed within a transaction should check these pending modifications before looking at the parent transaction or the underlying data store.</li>
<li>The class names are somewhat confusing:

<ul>
<li><code>Operation</code> sounds like it represents a single database operation. Instead, it's the actual key-value store, so I would rename this to <code>KeyValueStore</code>.</li>
<li><code>Transaction</code> sounds like it represents a single transaction. Instead, it tracks multiple transactions, so I'd rename this to <code>TransactionManager</code>.</li>
<li>I'd expect <code>Database</code> to provide a database or query API, but instead it handles user input directly.</li>
</ul></li>
</ul>

<h3>Other notes</h3>

<ul>
<li><code>Operation.Get</code> and <code>Operation.Count</code> are of little use if they don't return their results.</li>
<li>Use <code>TryGetValue</code> instead of a <code>ContainsKey</code> call followed by an indexing operation. This gives you the information you need with just a single dictionary lookup.</li>
<li>Why does <code>Operation</code> keep track of value counts? Was there a specific requirement that <code>COUNT</code> had to operate in <span class="math-container">\$O(1)\$</span> time? If not, why not keep things simple and do a linear search? It's a trade-off, of course, but without a clear reason to do this I would favor the less complicated approach: more code usually means more bugs and more maintenance.</li>
<li>I don't see why <code>Operation</code> needs to implement <code>Equals</code> and <code>GetHashCode</code>. It's a potentially expensive operation, and the only place where it's used (<code>Transaction.Rollback</code>) doesn't make sense: rolling back a transaction with no changes should not put that transaction back on the stack.</li>
<li>The nesting in <code>Operation.Equals</code> can be reduced by using early-out returns: <code>if (Count != other.Count) return false; ...</code> instead of <code>if (Count == other.Count) { ... } else return false;</code>.</li>
<li>I'd expect an empty operations stack to indicate that no transaction is active, but because <code>Commit</code> pushes an operation on the stack that's not always the case. Why would <code>Commit</code> need to do that? It already returns the current (committed) state.</li>
<li>You may want to document (in the code) that <code>Commit</code> commits all transactions, while <code>Rollback</code> only rolls back the innermost transaction.</li>
<li>By reading input directly in <code>Database</code>, your code cannot be reused in a different context (GUI, server-side, library). Move <code>HandleInput</code> to another place (<code>Program.Main</code> for example), rename <code>HandleUserInput</code> to <code>ExecuteQuery</code> and have that method return results instead of writing them to the console. Now you can reuse your database code elsewhere, and it's possible to write automated tests.</li>
<li>Adding a few empty lines here and there would improve code readability: some whitespace between methods, and between unrelated if/else statements makes it easier to tell them apart.</li>
</ul>
    </div>