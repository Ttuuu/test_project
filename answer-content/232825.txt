<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>Is there a way to tidy up the numerous functions into something like a dictionary? </p>
</blockquote>

<p>Sure, there are various options. But first the functions should be made independent of <code>maxIterations</code>, i.e. the computation </p>

<pre><code>Double(currentIteration) / Double(maxIterations)
</code></pre>

<p>should be done in the <em>caller</em> so that the functions simplify to</p>

<pre><code>private func sine010(x: Double) -&gt; Double {
    return (-cos(2 * .pi * x) + 1)/2
}
</code></pre>

<p>thus avoiding code duplication. Note also the use of the “implicit member expression” <code>.pi</code> – the type <code>Double</code> is automatically inferred from the context.</p>

<p>Now you could define a dictionary mapping a function types to functions. The functions can be embedded directly as closures instead of defining global functions:</p>

<pre><code>let functionDict : [FunctionType: (Double) -&gt; Double] = [
    .SINE_WAVE_FROM_0_TO_1_TO_0: { (1 - cos(2 * .pi * $0)) / 2 },
    .SINE_WAVE_FROM_0_TO_1: { (1 - cos(.pi * $0)) / 2 },
    .SINE_WAVE_FROM_1_TO_0: { (1 + cos(.pi * $0)) / 2 },
]
</code></pre>

<p>The disadvantage is that <em>you</em> are now responsible to update the dictionary if new function types are added.</p>

<p>A perhaps better alternative is to make the function a <em>computed property</em> of the function type enumeration:</p>

<pre><code>enum FunctionType {
    case SINE_WAVE_FROM_0_TO_1_TO_0
    case SINE_WAVE_FROM_0_TO_1
    case SINE_WAVE_FROM_1_TO_0

    var f: (Double) -&gt; Double {
        switch self {
        case .SINE_WAVE_FROM_0_TO_1_TO_0: return { (1 - cos(2 * .pi * $0)) / 2 }
        case .SINE_WAVE_FROM_0_TO_1: return { (1 - cos(.pi * $0)) / 2 }
        case .SINE_WAVE_FROM_1_TO_0: return { (1 + cos(.pi * $0)) / 2 }
        }
    }
}
</code></pre>

<p>Now everything is in “one place” and the compiler can check the exhaustiveness of the switch statement.</p>

<p>A disadvantage of all the above definitions is that they can not be extended: There is no way that a user can define its own interpolation function and pass it to the value animator.</p>

<p>So what I would really do is to define a <code>struct</code> as the function wrapper, with static properties for predefined functions. I am calling it <code>Interpolator</code> now (resembling the Android <code>TimeInterpolator</code>). </p>

<pre><code>class ValueAnimator {

    struct Interpolator {
        // A function mapping [0, 1] to [0, 1].
        let f: (Double) -&gt; Double

        // Predefined interpolation functions
        static let sineWaveFrom0To1To0 = Interpolator(f: { (1 - cos(2 * .pi * $0)) / 2 } )
        static let sineWaveFrom0To1 = Interpolator(f: { (1 - cos(.pi * $0)) / 2 } )
        static let sineWaveFrom1To0 = Interpolator(f: { (1 + cos(.pi * $0)) / 2 } )
    }

    // ...
}
</code></pre>

<p>Note also that I switched to lower camel case for the property names, which is the standard for all Swift identifiers except for types.</p>

<p>Now a user can easily add more interpolation functions, e.g.</p>

<pre><code>extension ValueAnimator.Interpolator {
    static let linear = ValueAnimator.Interpolator(f: { $0 } )
}
</code></pre>

<hr>

<blockquote>
  <p>Is there a way of accomplishing the same functionality ... but without using a selector? ... I ask because of the nasty "MyNSDoubleObject" workaround.</p>
</blockquote>

<p>First: The wrapper object is not needed even if you use selectors: Swift automatically wraps values in Objective-C compatible types if necessary. Which means that you <em>can</em> pass a floating point value through the selector:</p>

<pre><code>let value: Double = ...
target.perform(selector, with: value)
</code></pre>

<p>and the receive can (conditionally) cast it back to a <code>Double</code>:</p>

<pre><code>@objc func animate(obj: AnyObject) {
    guard let value = obj as? Double else { return }
    print(value)
}
</code></pre>

<p>So the <code>MyNSDoubleObject</code> workaround is not needed.</p>

<p>But it becomes much simpler if you replace the target/selector method by a simpler <em>callback</em> with a closure. Similarly for the local timer: With a block-based timer, the timer callback need not be Objective-C compatible, and the <code>ValueAnimator</code> class does not have to subclass <code>NSObject</code> anymore.</p>

<hr>

<p><em>Some minor remarks:</em> The </p>

<pre><code>private let sampleRate: Int
</code></pre>

<p>property is not needed. Instead of initializing with an (inactive) timer</p>

<pre><code>private var timer = Timer()
</code></pre>

<p>I would use an optional:</p>

<pre><code>private var timer: Timer?
</code></pre>

<p><code>X_currentRepIndex</code> and <code>F_of_X</code> to not follow the Swift naming conventions, the latter name is quite non-descriptive.</p>

<hr>

<p><em>Putting it all together,</em> the <code>ValueAnimator</code> class could look like this:</p>

<pre><code>class ValueAnimator {

    struct Interpolator {
        // A function mapping [0, 1] to [0, 1].
        let f: (Double) -&gt; Double

        // Predefined interpolation functions
        static let sineWaveFrom0To1To0 = Interpolator(f: { (1 - cos(2 * .pi * $0)) / 2 } )
        static let sineWaveFrom0To1 = Interpolator(f: { (1 - cos(.pi * $0)) / 2 } )
        static let sineWaveFrom1To0 = Interpolator(f: { (1 + cos(.pi * $0)) / 2 } )
    }

    // args
    private let interpolation: Interpolator
    private let callback: (Double) -&gt; Void

    // computed from args
    private let maxIterations: Int
    private let timeInterval: Double
    private var currentIteration: Int = 0

    // Other properties
    private var timer: Timer?

    init(durationInSeconds: Int, sampleRate: Int, interpolation: Interpolator,
         callback: @escaping (Double) -&gt; Void) {
        self.maxIterations = durationInSeconds * sampleRate
        self.timeInterval = 1.0 / Double(sampleRate)
        self.interpolation = interpolation
        self.callback = callback
    }

    func start() {
        timer = Timer.scheduledTimer(withTimeInterval: timeInterval, repeats: true) { (timer) in
            let val = Double(self.currentIteration)/Double(self.maxIterations)
            self.callback(self.interpolation.f(val))
            self.currentIteration += 1
            if self.currentIteration &gt; self.maxIterations {
                self.stop()
            }
        }
    }

    func stop() {
        timer?.invalidate()
        timer = nil
    }
}
</code></pre>

<p>and a sample usage could look like this:</p>

<pre><code>class ViewController: ViewController {

    var valueAnimator: ValueAnimator?

    override func viewDidLoad() {
        valueAnimator = ValueAnimator(durationInSeconds: 2, sampleRate: 2,
                                      interpolation: .sineWaveFrom0To1To0)
        { [weak self] value in
            guard let self = self else { return }

            // Do something with value ...
        }
        valueAnimator?.start()
    }

}
</code></pre>

<p>Note the use of <code>weak self</code> in the closure to avoid a reference cycle.</p>

<hr>

<p><em>Further thoughts:</em></p>

<ul>
<li><p>Since  <code>ValueAnimator</code> is a “pure Swift” class now it can be made <em>generic</em> to support other value types, such as integers.</p></li>
<li><p>Finally: If the goal is to animate <em>visual elements:</em> don't reinvent the wheel, use <a href="https://developer.apple.com/documentation/quartzcore" rel="nofollow noreferrer">Core Animation</a>.</p></li>
</ul>
    </div>