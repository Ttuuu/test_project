<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Looks pretty good.  I have no experience with <code>AF_ALG</code> sockets, so can't comment on the usage there (but it's a relief not to have to review home-implemented crypto, so kudos for avoiding that trap!)</p>

<p>Most of my suggestions are somewhat style orientated, so don't feel that there are any "must do" actions here.</p>

<hr>

<p>This pattern is unusual:</p>

<pre><code>(std::cout &lt;&lt; string).flush();
</code></pre>

<p>While there's nothing functionally incorrect, most C++ authors would include <code>&lt;iomanip&gt;</code> and then write that more poetically:</p>

<pre><code>std::cout &lt;&lt; string &lt;&lt; std::flush;
</code></pre>

<p>The last flush (before printing the retrieved password) isn't needed.</p>

<hr>

<p>When using <code>std::memcpy</code> it's easier to see that the size argument is correct if you use <code>sizeof expression</code> rather than <code>sizeof (type)</code>:</p>

<pre><code>std::memcpy(&amp;newTerm, &amp;oldTerm, sizeof newTerm);
</code></pre>

<hr>

<p>Assuming that <code>base64.c</code> is C code rather than C++, then the return from <code>malloc()</code> shouldn't be cast, nor should <code>binaryData</code> when it's assigned to <code>bin</code>.  And don't use all-caps for variables - convention is that they should be used for macros, to alert the reader to take special care.</p>

<hr>

<p>The <code>MYEXTERN</code> macro is another questionable style point.  Convention says to just wrap the header in an <code>extern "C"</code> <em>block</em>, which is no more code:</p>

<pre><code>#ifdef __cplusplus
extern "C" {
#endif

/* definitions */

#ifdef __cplusplus
}
#endif
</code></pre>

<hr>

<p>In <code>sha512sum()</code>, there's a special case for the last iteration of the loop - can it be reorganised so that just comes <em>after</em> the loop? Something like</p>

<pre><code>    for (; len &gt;= 128;  len -= 128, toHash += 128) {
        if(send(cryptoFd, toHash, 128, MSG_MORE)){
            makeSyscallError("(odd) Failed to write to sha512 socket");
        }
    }
    if (len &gt; 0) { //Last few bytes to write
        if(write(cryptoFd, toHash, len) == -1)
            makeSyscallError("(odd) Failed to write to sha512 socket");
    }
    if (read(cryptoFd, result, 64) == -1) //Get result
        makeSyscallError("(odd) Failed to read from sha512 socket");
    return; //All done!
</code></pre>

<hr>

<p>If <code>hash.hpp</code> is a C++ header, then prefer to include <code>&lt;cstdlib&gt;</code> to define <code>std::size_t</code>.</p>

<hr>

<p><code>std::perror("malloc")</code> might not do what you expect - <code>malloc()</code> doesn't set errno on failure.  You might be able to test allocation failures by using <code>ulimit</code> to reduce the virtual memory available to the process (it will take some trial and error), or you might be able to find a debugging <code>malloc()</code> that can be primed to fail at the right point.</p>

<hr>

<p>The code is a little inconsistent - in some places, we have <code>if (!value)</code> and others we explicitly <code>if (value == nullptr)</code>.  It's easier reading if we choose one style and stick with it.</p>

<hr>

<p>It might be a good idea to free the allocated memory - that lets you run the code under Valgrind without having to filter false positives of memory still in use.</p>

<hr>

<p>That's all for now; I might be able to return to this later.</p>
    </div>