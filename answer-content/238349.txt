<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are two main problems with the code that must be addressed:</p>

<ul>
<li>You store <em>pointers to data</em> in an array, rather than actual data. This is not useful, since pointers may point to data that goes out of scope or otherwise becomes obsolete. When writing a container class such as a stack/LIFO, one should store so-called "hard copies" of the data passed.</li>
<li><p>The code is not valid C. You implicitly convert from an <code>int</code> which is data, to a <code>void*</code> which is a pointer. Details here: <a href="https://stackoverflow.com/questions/52186834/pointer-from-integer-integer-from-pointer-without-a-cast-issues">“Pointer from integer/integer from pointer without a cast” issues</a>. To prevent non-C from compiling without errors then set gcc/clang/icc to always compile with <code>-std=c11 -pedantic-errors</code>.</p>

<p>Apart from the implicit conversion itself being invalid, there is no guarantee that you can safely convert from <code>int</code> to <code>void*</code> and back even if you use a cast. This conversion relies on poorly specified behavior.</p></li>
</ul>

<p>Because of these two remarks, the code cannot be fixed, it must be rewritten from scratch. To rewrite this into a proper stack container, it must be rewritten to use bytes of raw data (<code>uint8_t</code>) and make hard copies of the data passed.</p>

<hr>

<p>Other remarks:</p>

<ul>
<li>When popping from the stack, check <code>count</code> to see if there actually are any items left!</li>
<li><code>typedef struct Stack { ... } Stack;</code> The "struct tag in this case is superfluous, you can just write <code>typedef struct { ... } Stack;</code>.</li>
<li><code>int main()</code> is an obsolete form of main() declaration, always use <code>int main (void)</code> instead (or the version with argv+argc).</li>
<li>You don't use <em>const correctness</em>. Functions that do not change the passed <code>Stack*</code> should <code>const</code> qualify it: <code>bool stack_is_empty(const Stack *stack)</code>.</li>
<li>When storing the size of an array, the integer type <code>size_t</code> is more correct to use than <code>int</code>, since <code>int</code> may not be large enough and in addition it is signed.</li>
<li><code>return (stack-&gt;count == 0);</code> No parenthesis needed here, it's just clutter.</li>
<li><code>(void**)malloc</code> etc. No cast needed here, it's just clutter.</li>
<li>When calling malloc and realloc, always check if they succeeded by checking the result against NULL. 
-Calling realloc repeatedly like this is inefficient. That's why a stack is usually implemented as a double linked linked list. You may not have learnt about these yet, but they are the most suitable way to implement containers that often add/remove items at the top or bottom, at the case of slower access time for items located at a random place inside the container. You will not use this stack like that, so a linked list would be more suitable.</li>
</ul>
    </div>