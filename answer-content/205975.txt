<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Review</h1>
<p>First up Welcome to code review :)</p>
<p>A quick note that the posted code is broken, it throws an error when the snippet runs, and the object <code>makeSticky</code> has a duplicated property <code>onScroll</code></p>
<p>As you are new I will say you don't have to accept the first answer that comes along, give it a bit of time as there is more than one school of thought in programing, and questions that have accepted answers don't attract as many new answers.</p>
<p>On to the review.</p>
<h2>Your questions</h2>
<blockquote>
<p>Does structuring this code as a class makes sense here?</p>
</blockquote>
<p>No. You keep no reference to it, thus there is no need for an interface. Only the <code>onScroll</code> function need access to the element and that can be done with closure.</p>
<blockquote>
<p>How should I export this as an ES6 module?</p>
</blockquote>
<p>If you plan to use it on more than one page then you can wrap it in a function and export that function. Depending on how you plan to use it you can either pass it a list of elements or let it find the elements. See examples below.</p>
<blockquote>
<p>Is there anything obvious about my class that's wrong?</p>
<p>Any other advice?</p>
</blockquote>
<p>Read on...</p>
<h2>Style points</h2>
<ul>
<li><code>window</code> is the default object (the global <code>this</code>) and is not needed. . You don't use it for <code>window.document</code>, so why use it <code>window.scrollY</code> and <code>window.addEventListener</code> If you wish to use it there are some edge case where there is a benefit but you should be consistent.</li>
<li>If you are not using an argument don't declare it. <code>onScroll(event) {</code> is just as good as <code>onScroll() {</code></li>
<li>Functions containing one line of code called only from one place, adds 3 lines of code for no reason. A general rule of thumb for functions is that A function should reduce the overall code size not increase it.</li>
<li><code>makeSticky</code> is not a good name, you generally don't start an object's name with a verb, maybe <code>stickyElement</code> or just <code>sticky</code></li>
</ul>
<h2>Too much bloat</h2>
<p>Don't add what is not needed. You define an object <code>makeSticky</code> and give it 13 exposed (public) properties. When you instantiate it you immediately drop the reference so that the only code that can access the object, is its self, making all the properties and supporting code redundant..</p>
<p>By the looks you only ever create this object in one place, so there really is no need for it to be named in the global scope. And as the object is not referenced elsewhere it can exist as just a closure over the <code>onScroll</code> listener.</p>
<h2>Keep it simple</h2>
<p>When writing you should be constantly aware of what is needed and by what.</p>
<ul>
<li>Don't add code that will never be used,</li>
<li>Don't add code for some possible imagined future need, only what is needed (unless its specifically outlined in the design).</li>
<li>Try to reduce the number of times you need to use <code>this</code> Each this means an exposed property, more support code, and greater risk of the object state being mutated.</li>
</ul>
<h2>Examples</h2>
<p>As only the <code>onScroll</code> event listener needs access to the elements all the following examples use closure to maintain the reference. There is no named object for what you called <code>makeSticky</code></p>
<p>Short and simple</p>
<pre><code>document.querySelectorAll('.child').forEach(child =&gt; {
  const fixed = 'is-fixed',  top = child.offsetTop;
  const bot = child.parentNode.clientHeight + child.parentNode.offsetTop;
  const onScroll = () =&gt; child.classList(top &lt; scrollY &amp;&amp; bot &gt; scrollY ? "add" : "remove")(fixed);
  addEventListener('scroll', onScroll);
  onScroll();        
});
</code></pre>
<p>or you may prefer a more open style</p>
<pre><code>document.querySelectorAll('.child').forEach(el =&gt; {
  const fixed = 'is-fixed';
  const top = el.offsetTop;
  const bot = el.parentNode.clientHeight + el.parentNode.offsetTop;
  addEventListener('scroll', onScroll);
  (function onScroll() {
    if (top &lt; scrollY &amp;&amp; bot &gt; scrollY) { 
      el.classList.add(fixed) 
    } else {  
      el.classList.remove(fixed);
    }
  })();
});
</code></pre>
<p>As a module</p>
<pre><code>/* in js file sticky.js */
export default function sticky(selection) {
  selection.forEach(el =&gt; {
    const fixed = 'is-fixed',  top = el.offsetTop;
    const bot = el.parentNode.clientHeight + el.parentNode.offsetTop;
    const onScroll = () =&gt; el.classList(top &lt; scrollY &amp;&amp; bot &gt; scrollY ? "add": "remove")(fixed);
    addEventListener('scroll', onScroll);
    onScroll();        
  });
}

/* In another script */
import sticky from "sticky";
sticky(document.querySelectorAll('.child'));
</code></pre>
    </div>