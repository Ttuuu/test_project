<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Worksheet functions like <code>CountIf</code> are pretty well optimized, so that's a good way to find out if <code>TXTBUSCAART.Text</code> is in column A of your <code>dataSheet</code>. but so is <code>Find</code>. </p>

<p>By using <code>Find</code>, you <em>could</em> eliminate the initial step (<code>CountIf</code>) to determine if your search string is in the destination and you eliminate the <code>InStr</code> call to recheck if it's in each individual row of your data set. Unfortunately, you really need to know how many times your <code>.Text</code> appears to make the most efficient use of <code>ReDim dataOut</code>, so we'll leave that in there.</p>

<p>This is what I came up with for your loop using <code>Find</code>:</p>

<pre><code>Private Sub LStart_Change()

  Dim rowCount As Long, itemCount As Long, counter As Long
  Dim dataSheet As Worksheet
  Dim dataOut() As Variant

  LStart.Clear
  LStart.ColumnCount = 9

  Set dataSheet = Sheets("sheet1")
  With dataSheet
    rowCount = .Cells(.Rows.Count, "A").End(xlUp).Row
    Dim searchString As String
    searchString = "abcde"
    itemCount = Application.WorksheetFunction.CountIf(.Range("A2:A" &amp; rowCount), "*" &amp; searchString &amp; "*")
    If itemCount &gt; 0 Then
      Dim searchRange As Range
      Set searchRange = .Range(.Cells(2, 1), .Cells(rowCount, 1))
      ReDim dataOut(1 To itemCount, 1 To 9)
      Dim foundCell As Range
      Set foundCell = searchRange.Find(What:=searchString, LookIn:=xlValues, lookat:=xlWhole, MatchCase:=False)
      counter = 1
      Dim firstCell As Range
      Do Until foundCell Is Nothing
        If firstCell Is Nothing Then
          Set firstCell = foundCell
        End If
        With foundCell
          dataOut(counter, 1) = .Cells(1, 1)
          dataOut(counter, 2) = .Cells(1, 3)
          dataOut(counter, 3) = .Cells(1, 2)
          dataOut(counter, 4) = .Cells(1, 4)
          dataOut(counter, 5) = .Cells(1, 6)
          dataOut(counter, 6) = .Cells(1, 5)
          dataOut(counter, 7) = .Cells(1, 8)
          dataOut(counter, 8) = .Cells(1, 9)
          dataOut(counter, 9) = .Cells(1, 7)
        End With
        Set foundCell = searchRange.FindNext(foundCell)
        If foundCell.Address = firstCell.Address Then
          Set foundCell = Nothing
        Else
          counter = counter + 1
        End If
      Loop
      LStart.List = dataOut
    End If
  End With

End Sub
</code></pre>

<p><sup><em>It compiles cleanly, but you may have to fiddle with the <code>.Find()</code> parameters a little bit since I don't have your exact data set to work from.</em></sup></p>

<p>Using <code>.Find()</code> takes you directly to each row that has your <code>TXTBUSCAART.Text</code> in it so you may save 100s of <code>If InStr()</code> comparisons in a row looking at rows that <em>don't</em> contain your required text. I've set <code>MatchCase:=False</code> to eliminate the <code>UCase()</code> call on each comparison since it didn't seem to matter (you don't <code>UCase()</code>the text in your initial <code>CountIf()</code>, so I didn't think you really cared - adjust as necessary).</p>

<p>I set the variable <code>searchString</code> to <code>TXTBUSCAART.Text</code> one time because there's no need to reference the form every time through the loop. This may well save you milliseconds in total execution time! :)</p>

<p>When using <code>.Find()</code> it will continue to loop through the search range forever, so you have to store off the first cell it finds then compare each newly found cell to that one to stop the loop when you've returned to the beginning.</p>

<p>One note on <code>.Find()</code>: it will use any parameters set in the <code>Find</code> dialog box that you haven't explicitly overwritten, so make sure you're including all the parameters you need. Also, any parameters you set in code will appear the next time you open the <code>Find</code> dialog box, so if you have a favorite group of settings, you may want to store them off before fiddling with them in your code, then reset them when you're done.</p>
    </div>