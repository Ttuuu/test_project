<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The answer by <strong>Orlyyn</strong> explains it well. Just adding to it: </p>

<ul>
<li>You can probably destructure your variables, this helps with readability and reuse.</li>
<li>Since you are not using the state of the class you can convert that into <code>Functional Component</code></li>
<li>Use <code>template string</code> instead of doing it in bits.</li>
<li>Still no need to add <code>this.state</code> and call <code>setState</code> in your <code>componentDidMount()</code>. What Orlyyn meant by <em>single responsibility principle</em> was that there shouldn't be any other <strong>logic</strong> in there, simply. You can still get the variables that you need for that function to work.</li>
</ul>

<p>The <code>State</code> is useful when you need to manipulate it within your very class or function.</p>

<p>So, a refactor of your code <em>batch_progress.js</em> could be as following: </p>

<pre><code>import React from 'react';
import PropTypes from 'prop-types';
import ProgressBar from '../progress_bar/progress_bar';

const statusCodeColors = {
  100: '#e7e4f1',
  200: '#c3dcec',
  300: '#ecc6eb',
  400: '#ecdec3',
  500: '#c8ecc7',
};

const getStatusColor = (code) =&gt; statusCodeColors[code] || '#e7e4f1';
const getPercentage = (num, total) =&gt; (num / total) * 100;

const BatchStatus = ({ batch: { number, status }, targetBatchCount }) =&gt; {
  const color = getStatusColor(status);
  const percentage = getPercentage(number, targetBatchCount);

  return (
    &lt;ProgressBar foregroundColor={color} percentage={percentage}&gt;
      {`${number} / ${targetBatchCount}`}
    &lt;/ProgressBar&gt;
  );
};

BatchStatus.defaultProps = {
  batch: {
    number: 50,
    status: 100,
  },
  targetBatchCount: 100,
};

BatchStatus.propTypes = {
  batch: PropTypes.shape({
    number: PropTypes.number,
    status: PropTypes.number,
  }),
  targetBatchCount: PropTypes.number,
};

export default BatchStatus;
</code></pre>

<p>Included the <code>prop-types</code> there. Might help you in getting started with it. Though react has a great <a href="https://reactjs.org/docs/typechecking-with-proptypes.html" rel="nofollow noreferrer">documentation</a> for it. </p>

<p>I have also replaced your <code>switch-case</code> statement there with something more cleaner. You can read about it in following articles: </p>

<ul>
<li><a href="https://dev.to/potouridisio/probably-the-hottest-code-refactoring-you-ever-saw-3072" rel="nofollow noreferrer">"Probably the hottest code refactor..."</a></li>
<li><a href="https://dev.to/tomazlemos/keeping-your-code-clean-by-sweeping-out-if-statements-4in8" rel="nofollow noreferrer">"Keeping your code clean by sweeping out "if" statements"</a></li>
</ul>
    </div>