<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is a good first stab at a guess the number game.</p>

<p>Here's a few things:</p>

<ul>
<li>You should be learning/using Python 3 instead of Python 2. So far the only difference for you will be <code>raw_input</code> becomes <code>input</code> and <code>print "foo"</code> becomes <code>print("foo")</code>.</li>
<li>The line <code>tries = tries</code> doesn't do anything meaningful. You don't need it</li>
<li>You should put all of this inside a function called <code>main</code> and then at the bottom you run it with this (tests if this script is being run standalone):</li>
</ul>



<pre><code>if __name__ == '__main__':
    main()
</code></pre>

<ul>
<li>You do <code>int(guess)</code> a lot. This is something that can fail (if someone types <code>abc</code> for example). You should do it once and check for failure.</li>
</ul>



<pre><code>try:
    guess = int(guess)
except ValueError:``
    print('Guess must be between 0 and 25')
    # ask for another guess
</code></pre>

<ul>
<li>It's a good idea to comment. That's a fantastic habit to get into. However, you run the risk of over-commenting. And that is more distracting than having too few. As a rule, don't explain <em>what</em>, explain <em>why</em>. More concretely, "check to see if a user guessed the right number" is obvious from the <code>if guess == secret_number:</code>. Finding a balance is a skill, but if you work on it and read good quality open source code, you'll pick it up.</li>
<li>When you do your range check, you can do it in a much more pythonic way. Instead of checking <code>guess &lt; 0 or guess &gt; 25</code>, you can do <code>if not 0 &lt;= guess &lt;= 25</code></li>
<li><code>tries = tries + 1</code> can be <code>tries += 1</code></li>
<li>You don't need to escape <code>'</code> inside a <code>"</code> (so <code>"Congratulations you\'ve won!"</code> can be <code>"Congratulations you've won!"</code>)</li>
</ul>

<p>The overarching issue you have though is most of your logic is duplicated in several different places. This becomes a problem if you want to, say, change the number range from 0-25 to 0-50. You'd need to change that in 6 places. What happens if you miss one? Then your game will break in weird ways.</p>

<p>What's the solution? Look to pull out duplicate logic like this into smaller, manageable chunks. In this case, it's helpful to identify the steps of your game.</p>

<ol>
<li>Generate a secret number</li>
<li>Collect a guess from the user</li>
<li>If the user guessed the secret or more than 10 attempts have been made, end, else go back to 2</li>
</ol>

<p>One easy thing you can pull out is "collect a guess from the user." You can do this in a function that gets the number, converts it to an <code>int</code> (handling the exception), and checking it is within range.</p>

<pre><code>LOW, HIGH = 0, 25

def get_guess():
    while True:
        try:
            guess = int(input(f'Guess a number between {LOW}-{HIGH}: '))
        except ValueError:
            print('Please enter a number')
        else:
            if LOW &lt;= guess &lt;= HIGH:
                return guess

            print(f'Number must be between {LOW} and {HIGH}')
</code></pre>

<p>Now you can use <code>get_guess()</code> when you need to guess the guess from the user without having to add any extra control structures (like wrapping everything in a while) or duplicate any logic.</p>

<p>Now, when using <code>get_guess()</code> you can concern yourself with fewer facets of the game. Namely, checking the number of attempts and if the guess was correct:</p>

<pre><code>from random import randint

MAX_ATTEMPTS = 10

def main():
    secret = randint(LOW, HIGH)

    for _ in range(MAX_ATTEMPTS):
        guess = get_guess()

        if guess == secret:
            print('You win!')
            break
    else:
        print('Too many attempts; you lose.')
</code></pre>
    </div>