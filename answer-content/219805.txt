<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'd like to add that a very important feature of C++ is templates. You can parameterize your vector by element types.</p>

<p>Example:</p>

<pre><code>template &lt;typename T&gt;
struct Vector3 { 
    T x, y, z; 
};
</code></pre>

<p>There are other suggestions <a href="http://www.reedbeta.com/blog/on-vector-math-libraries/" rel="nofollow noreferrer">here</a>, they include:</p>

<ul>
<li>Parameterize vector/matrix structs by element type and dimension.</li>
<li>Provide specializations and typedefs for the most common types and sizes, for convenience.</li>
<li>Provide a nice, full set of constructors, overloaded operators and free functions (like dot, cross, etc). Seriously, go crazy with these and implement everything you can think of.</li>
<li>Don’t try to build SIMD into your general-purpose vector/matrix structs. Do use SIMD judiciously, where it’s effective, and keep the relevant data in SOA layout.</li>
<li>Consider adding type-safe affine math (points and affine transformations) on top of the basic linear algebra features.</li>
</ul>
    </div>