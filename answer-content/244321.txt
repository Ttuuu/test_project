<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The other solutions gave an answer which is perfect for two classes.<br>
If you get to much functions//classes beside CallBack and Message, the code below might give you a better solution.</p>
<h1>Wrapper</h1>
<p>I personally would create a wrapper with a common interface.<br>
The reason is that this is not very extendable (adding a new class requires rewriting all the common functions.)</p>
<pre><code>class UpdateDataFactory{
    public UpdateData createUpdateData(Update update){
        if(isMessageUpdateData(update)){
            return new MessageUpdateData(update.getMessage());
        } else if(isCallBackUpdateData()){
            return new CallBackUpdateData(update.getCallBackQuery());
        } else return EmptyUpdateData.getInstance();
    }
    private boolean isMessageUpdateData(Update update){
        return update.hasMessage() &amp;&amp; update.getMessage().hasText();
    }
    private boolean isCallBackUpdateData(){
        return update.hasCallbackQuery() 
             &amp;&amp; (update.getCallbackQuery().getData()!= null);
    }
}

interface UpdateData{
    public User getFrom();
    public String getInputUserData();
    public Message getMessage();
}
public class MessageUpdateData implements UpdateData{...}
public class CallBackUpdateData implements UpdateData{...}
public class EmptyUpdateData implements UpdateData{
     static UpdateData getInstance(){...}
}
</code></pre>
<p>The one problem with this approach is that it requires you to create a new class for each object.</p>
<h1>Extractors</h1>
<p>Instead of creating a wrapper for an object, you could also create extractors for a type.</p>
<pre><code>interface UpdateDataExtractor{
    public boolean canExtract(Update update);
    public User getFrom(Update update);
    public String getInputUserData(Update update);
    public Message getMessage(Update update);
}

 class MessageUpdateDataExtractor implements UpdateDataExtractor{
    public static MessageUpdateDataExtractor getInstance(){...}
    public boolean canExtract(Update update){
        return update.hasMessage() &amp;&amp; update.getMessage().hasText();
    }
    ...
 }
 class CallBackUpdateData implements UpdateDataExtractor{
    public static CallBackUpdateDataExtractor getInstance(){...}
    public boolean canExtract(Update update){
        return update.hasMessage() &amp;&amp; update.getMessage().hasText();
    }
    ...
 }

 class UpdateDataFactory{
    List&lt;UpdateDataExtractor&gt; extractors = new List&lt;UpdateDataExtractor&gt;();
    public UpdateDataExtractor createUpdateData(Update update){
        for(Extractor extractor : extractors)
            if(extractor.canExtract(update)) return extractor;
        return EmptyExtractor.getInstance();
    }
 }
</code></pre>
<p>If you don't like the canExtract and just want to store it in separate fields, you could use generics as parameters and make the code more typeSafe.</p>
<h1>remaining functions</h1>
<p>I don't exactly know how you should implement the following functions:</p>
<pre><code>public static String getCallBackId(Update update) {
    return update.getCallbackQuery().getId();
}

public static String getCallBackData(Update update) {
    return update.getCallbackQuery().getData();
}
</code></pre>
<p>You could either implement them as all the other functions, or you could only implement them only in <code>CallBackUpdateExtractor</code> or <code>CallBackUpdateData</code>.</p>
    </div>