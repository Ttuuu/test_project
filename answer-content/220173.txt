<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Firstly, it's always good to see doctests.</p>

<hr>

<p>I'm not entirely convinced by the name <code>IndexedHeap</code>. The API it exposes has nothing to do with indexes.</p>

<hr>

<blockquote>
<pre><code>    def __bool__(self):
        return bool(self.heap)
</code></pre>
</blockquote>

<p>It took a bit of thought to figure out what this is about, but once I got there I appreciate the elegant implementation.</p>

<hr>

<blockquote>
<pre><code>    def pop(self, i=...):
        weight, item = super().pop()
        self._index[item].remove(len(self))
        return (weight, item)
</code></pre>
</blockquote>

<p>Probably my biggest criticism: in some use cases this will leak memory by leaving <code>self._index</code> full of empty sets. I'd prefer to see it delete the key when the last index is removed.</p>

<p>Overall, though, the index is quite neat. I must say that it's very nice the way the heap will handle repeated values with different keys but won't allow <code>change_weight</code> of a repeated value. Perhaps a case could be made for giving <code>change_weight</code> an optional <code>current_weight</code> argument to distinguish between repeated values, but YAGNI.</p>

<hr>

<blockquote>
  <p>Was my overriding of <code>__getattr__</code> in the <code>_IndexedWeightList</code> class an appropriate way of re-using all the existing <code>heapq</code> code?</p>
</blockquote>

<p>I assume you actually mean <code>__setitem__</code> rather than <code>__getattr__</code>.</p>

<p>IMO given that you not only have to copy <code>heapq.py</code> but edit it to make it suitable for your usage, you've lost the advantage of code reuse. It becomes painful to track upstream changes and merge in bugfixes. You might as well go the whole hog and refactor it to suit your needs. It makes more sense to me to add <code>index</code> as an argument to the forked <code>heapq</code> methods<sup>1</sup> and essentially inline <code>_IndexedWeightList</code> away. That has the added advantage that it's compatible with doing the same thing to a fork of the C implementation.</p>

<p><sup>1</sup> Except <code>heapify</code>, because you might as well just rebuild the index after calling that.</p>
    </div>