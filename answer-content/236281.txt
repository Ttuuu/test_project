<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There's a lot of duplicated code here which makes your logic here more difficult than it needs to be.  As a first step, consider extracting some of the functionality into into reusable chunks.  For example:</p>

<p>A method:</p>

<pre><code>private static double promptForMax(Scanner input, String activity) {
    double max = 0;
    System.out.println("What's your max " + activity + "?");
    while (max &lt; 45) {
        max = input.nextDouble();
        if (max &lt; 1) {
            System.out.println("Please input a value greater than 45 lbs.");
        }
    }
    max = roundTo5(max);
    return max;
}
</code></pre>

<p>Could be reused for each of the activity inputs.  By removing the unnecessary temporary variables, the input fetching would then look more like:</p>

<pre><code>a.setMaxSquat(promptForMax(input, "squat"));
System.out.println("Your max squat is " + a.getMaxSquat());
a.setMaxBench(promptForMax(input, "bench"));
System.out.println("Your max bench is " + a.getMaxBench());
a.setMaxDL(promptForMax( input, "deadlift"));
System.out.println("Your max deadlift is " + a.getMaxDL());
a.setMaxOHP(promptForMax(input, "overhead press"));
System.out.println("Your max overhead press is " + a.getMaxOHP());
</code></pre>

<p>Which is a lot more concise.</p>

<p>There's other sections where you seem to be executing exactly the same code for different values.  Consider this <code>switch</code>:</p>

<blockquote>
<pre><code>switch (j) {
    case 0:
        bw.write(Integer.toString(roundTo5(week2[k] * trainingMax[j])));
        bw.write(",");
        if (k == 2) {
            bw.newLine();
        }
        break;
    case 1:
        bw.write(Integer.toString(roundTo5(week2[k] * trainingMax[j])));
        bw.write(",");
        if (k == 2) {
            bw.newLine();
        }
        break;
    case 2:
        bw.write(Integer.toString(roundTo5(week2[k] * trainingMax[j])));
        bw.write(",");
        if (k == 2) {
            bw.newLine();
        }
        break;
    case 3:
        bw.write(Integer.toString(roundTo5(week2[k] * trainingMax[j])));
        bw.write(",");
        if (k == 2) {
            bw.newLine();
        }
        break;
</code></pre>
</blockquote>

<p>Every <code>case</code> does the same exact thing.  It seems like it's the equivalent of:</p>

<pre><code>if(j &gt;= 0 &amp;&amp; j &lt;= 3) {
    bw.write(Integer.toString(roundTo5(week2[k] * trainingMax[j])));
    bw.write(",");
    if (k == 2) {
        bw.newLine();
    }
} 
</code></pre>

<p>You do the same thing for week3.  Reducing this duplication, through extracting meaningfully named methods, looking for different branching logic / variable, will go a long way to making the program more approachable.</p>
    </div>