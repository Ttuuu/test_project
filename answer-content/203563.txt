<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Performance: here is a O(n log n) solution, where we sort both lists by the second element and then try to sum maximumOperatingTravelDistance, decreasing sum if we went over it and increasing if not. When the sum is better than what we had, we reset the results. When it is the same as the best we had, we add that to results.</p>

<pre><code>    def optimalUtilization(maximumOperatingTravelDistance, forwardShippingRouteList, returnShippingRouteList):
        forwardShippingRouteList = sorted(forwardShippingRouteList, key = lambda x: x[1])
        returnShippingRouteList = sorted(returnShippingRouteList, key = lambda x: x[1], reverse = True)

        idxf = 0
        idxr = 0
        best = 0
        result = []

        while (idxf  &lt; len(forwardShippingRouteList) and idxr &lt; len(returnShippingRouteList)):
            elSum = forwardShippingRouteList[idxf][1] + returnShippingRouteList[idxr][1]
            if elSum &gt; maximumOperatingTravelDistance:
                idxr += 1
            else:
                if elSum &gt; best:
                    best = elSum
                    result = []
                if elSum == best:
                    result.append([forwardShippingRouteList[idxf][0], returnShippingRouteList[idxr][0]])
                idxf += 1
        return result                   



    print(optimalUtilization(20,  [[1,8],[2,7],[3,14]],  [[1,5],[2,10],[3,14]]))
    print(optimalUtilization(10000, [[1,3000],[2,5000],[3,7000],[4,10000]], [[1,2000],[2,3000],[3,4000],[4,5000]]))
    print(optimalUtilization(7000, [[1,2000],[2,4000],[3,6000]], [[1,2000]]))
</code></pre>

<p><strong>Note:</strong> This assumes that in each list, there is no repeated second element. Some modifications will be needed if you need to contemplate such cases, as my current code could use the same tuple twice in the result if there are repeated.</p>
    </div>