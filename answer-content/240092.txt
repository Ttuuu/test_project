<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>APL-specific</h2>

<h3>Keep the nesting levels consistent</h3>

<p>At this line:</p>

<pre><code>(key1 left right)←1↓t1 ⋄ key2←1⌷t2
</code></pre>

<p><code>key1</code> is effectively disclosed one level, while <code>key2</code> is not. It doesn't matter in this code because both <code>key1</code> and <code>key2</code> are assumed to be scalars, but they are semantically different:</p>

<pre><code>    ⍝ Assume ⎕IO←1
    (a b c)←nested←(1 2 3)(4 5 6)(7 8 9)
    1 2 3≡a
1
    (⊂1 2 3)≡1⌷nested
1
    1 2 3≡1⊃nested
1
</code></pre>

<p>Semantically correct one would be <code>key2←1⊃t2</code> instead.</p>

<hr>

<h2>General tips</h2>

<h3>Give a name to algorithm-wise important constant(s)</h3>

<p>In this code, <code>⍬</code> is being used to signify the empty heap. It appears in <code>Insert</code> and <code>Pop</code>, and is also used as the initial heap in the testing code. You can give it a meaningful name:</p>

<pre><code>empty←⍬
</code></pre>

<p>That way, you can make several parts of the code easier to understand, and you can even write <code>empty≡t1:...</code> to test if a (sub-)tree is empty, instead of a roundabout way <code>0=≢t1:...</code>.</p>

<h3>Name meaningful intermediate values</h3>

<p>At the bottom of <code>Merge</code>:</p>

<pre><code>    (⊃left)≥⊃merged:(1+⊃merged) key1 left merged
    (1+⊃left) key1 merged left
</code></pre>

<p>Both <code>⊃left</code> and <code>⊃merged</code> are used twice in the code, and both have a good meaning -- the rank of the corresponding tree. We can name both:</p>

<pre><code>    leftRank←⊃left ⋄ mergedRank←⊃merged
    leftRank≥mergedRank:(1+mergedRank) key1 left merged
    (1+leftRank) key1 merged left
</code></pre>

<h3>Check the time complexity of your function</h3>

<p>Algorithm is all about correctness <em>and</em> performance. If you checked that your implementation gives correct results, the next step is to measure its time complexity. Dyalog APL provides multiple ways to measure it:</p>

<ul>
<li><a href="http://dfns.dyalog.com/n_time.htm" rel="nofollow noreferrer"><code>dfns.time</code></a>, <a href="http://dfns.dyalog.com/n_cmpx.htm" rel="nofollow noreferrer"><code>dfns.cmpx</code></a>, and <a href="http://dfns.dyalog.com/n_profile.htm" rel="nofollow noreferrer"><code>dfns.profile</code></a></li>
<li>User commands <code>]runtime</code> and <code>]profile</code> (IIRC)</li>
</ul>

<p>Learn how and when to use them.</p>
    </div>