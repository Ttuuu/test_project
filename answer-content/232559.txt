<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Yeah, this isn't a builder. I don't know if this pattern has a name, but having an intermediate data object like this which moves the complexity of multiple constructors out of the target object is a thing.</p>

<p>However the builder pattern doesn't require the target object to have an empty (no-argument) constructor. Example:</p>

<pre><code>public class Coordinate {
  private int x;
  private int y;

  public Coordinate(int x, int y) {
     this.x = x;
     this.y = y;
  }

   // Getters...
}

public CoordinateBuilder {
  private Integer x = null;
  private Integer y = null;

  public CoordinateBuilder x(int x) {
    this.x = x;
    return this;
  }

  public CoordinateBuilder y(int y) {
    this.y = y;
    return this;
  }

  public Coordinate build() {
     if (x == null || y == null) {
        throw new IllegalStateException();
     }
     return new Coordinate(x,y);
  }
}

Coordinate a = new CoordinateBuilder().x(1).y(2).build();
</code></pre>

<hr>

<p>Some general remarks about your code:</p>

<ul>
<li><p>Since this isn't a builder pattern I'd rename <code>GameObjectBuilder</code> to something like <code>GameObjectData</code>.</p></li>
<li><p>Since <code>GameObjectBuilder/Data</code> is immutable, I'd suggest just keeping a reference of it in <code>GameObject</code> instead of coping the values out of it.</p></li>
<li><p>Objects should have a single "main" constructor and other constructors should call it. </p></li>
<li><p>Is it on purpose that one of the constructors doesn't call the copy constructor for <code>position</code>?</p></li>
<li><p>I'm not a big fan of using a plain <code>Object</code>. </p></li>
</ul>
    </div>