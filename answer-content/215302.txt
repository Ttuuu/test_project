<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>When we include <code>&lt;ctime&gt;</code>, we get function names in the <code>std</code> namespace.  The compiler is also allowed, but not required, to define the same names in the global namespace; we can't rely on those in a portable program.</p>

<p>So we need</p>

<pre><code>std::srand(std::time(0));
</code></pre>

<hr>

<p>A more serious issue is that the flow of control is all over the place.  For example, <code>printMenu()</code> not only displays the menu (as its name would suggest), but it also performs the user's requested action.  See if you can make it into a function that displays the menu and <em>returns</em> the user's response, so that it's a reusable service for the caller, rather than taking over the flow of control.  The problem you have here is that everything is very tightly <em>coupled</em>, meaning that none of the code can be used in any other program.</p>

<p>To improve the structure, think how to write the program so that either player can be operated by a computer (either in this program, or perhaps via a network protocol) or by a human (by a text or graphical interface, or via the same network protocol).  If we can separate the game play from the player interaction, then we have a less tightly coupled program.  If you can see how to do that, it's a principle that can be applied more generally, and it will serve you well.</p>

<p>If you find yourself struggling to decouple the parts of the program that are too tightly coupled, then there's a wealth of reading out there, pitched at varying levels - perhaps start with <a href="https://en.wikipedia.org/wiki/SOLID" rel="nofollow noreferrer">SOLID principles</a> and follow the links (both the links to the five principles and the ones in the "References" section).</p>
    </div>