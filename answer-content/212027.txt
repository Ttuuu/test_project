<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your question states that you want to solve this problem in <code>C++</code>/<code>C++14</code>. In your solution you are mainly using old <code>C</code> style code.</p>
<p>In order to make your code more <strong>readable / maintable / bug-free</strong> (you choose!), try to make use of <code>STL</code> as much as possible.</p>
<h2>std::vector&lt; bool &gt;</h2>
<p>Using <a href="https://en.cppreference.com/w/cpp/container/vector" rel="nofollow noreferrer"><code>std::vector&lt;bool&gt;</code></a> as the binary representation we can make use of the <code>algorithm</code> library of STL.</p>
<h2>STL iterators</h2>
<p>When dealing with containers in STL, <a href="https://en.cppreference.com/w/cpp/iterator" rel="nofollow noreferrer"><code>iterator</code></a>s are used to specify a range for a container. These <code>begin</code> and <code>end</code> iterators (specifying a range) are needed for the algorithms.</p>
<h2>STL algorithm</h2>
<p>The STL <a href="https://en.cppreference.com/w/cpp/algorithm" rel="nofollow noreferrer"><code>algorithm</code></a> module has most of algorithms you need for manipulating containers.
Try to use STL algorithms as much as possible whenever you need to operate on a range of elements.</p>
<p>Here is another approach using <code>std::vector&lt;bool&gt;</code>, <code>iterator</code>s and <code>algorithm</code> from STL.</p>
<pre><code>#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;numeric&gt;
#include &lt;vector&gt;

std::vector&lt;bool&gt; to_binary(int num)
{
  std::vector&lt;bool&gt; binary;
  while(num != 0)
  {
    binary.push_back(num % 2 != 0);
    num /= 2;
  }
  return binary;
}

int findlargestGap(int num)
{
  int largest_gap = 0;
  auto binary       = to_binary(num);
  auto       it     = binary.begin();
  const auto it_end = binary.end();
  while(it != it_end)
  {
    auto current_true = std::find(it, it_end, true);
    if(current_true == it_end)
      break;

    auto next_true = std::find(current_true+1, it_end, true);
    if(next_true == it_end)
      break;

    const auto d = std::distance(current_true, next_true) - 1;
    largest_gap = std::max(largest_gap, static_cast&lt;int&gt;(d));

    it++;
  }

  return largest_gap;
}

int main(int argc, char** argv)
{
  std::cout &lt;&lt; "largest gap for 9: "   &lt;&lt; findlargestGap(9) &lt;&lt; '\n';
  std::cout &lt;&lt; "largest gap for 529: " &lt;&lt; findlargestGap(529) &lt;&lt; '\n';
  std::cout &lt;&lt; "largest gap for 20: "  &lt;&lt; findlargestGap(20) &lt;&lt; '\n';
  std::cout &lt;&lt; "largest gap for 15: "  &lt;&lt; findlargestGap(15) &lt;&lt; '\n';
  std::cout &lt;&lt; "largest gap for 32: "  &lt;&lt; findlargestGap(32) &lt;&lt; '\n';
}
</code></pre>
<h1>EDIT</h1>
<p>Change the last line in <code>findLargestGap()</code> from <code>it++</code> to  <code>it = next_true</code> to start the next iteration where the last one was found to save cycles in some cases.</p>
<h1><a href="https://ideone.com/ywhVfB" rel="nofollow noreferrer">LIVE DEMO</a></h1>
    </div>