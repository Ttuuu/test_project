<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>I'd suggest you stay away from recursion in Python. <a href="https://stackoverflow.com/q/3323001">Python has a maximum recursion depth</a>, with a default of about 1000.
This is to prevent system problems when using recursion, and the fixes of using <a href="https://docs.python.org/library/sys.html#sys.setrecursionlimit" rel="nofollow noreferrer"><code>sys.setrecursionlimit</code></a> are workarounds, and don't actually fix the problem.
Instead to remove these headaches don't use recursion.</p></li>
<li><p><a href="https://stackoverflow.com/q/1132941">Don't pass mutable datatypes as default arguments</a>, this is as if you call <code>get_digits</code> twice, then it'll output both numbers.
Take:</p>

<pre><code>&gt;&gt;&gt; get_digits(12345)
[5, 4, 3, 2, 1]
&gt;&gt;&gt; get_digits(12345)
[5, 4, 3, 2, 1, 5, 4, 3, 2, 1]
</code></pre></li>
<li><p>If you need to pop data try to use <code>list.pop()</code> over <code>list.pop(0)</code>. This is as the former only has to remove one item, but the latter has to remove the first item in the list, and move all the items down to take it's place.
<a href="https://stackoverflow.com/q/32543608">This question talks about these performance problems relative to <code>deque.popleft</code></a>. However here you don't need a deque, or to reverse the array in this case.</p>

<p>The following is an equivalent of <code>list.pop</code>:</p>

<pre><code>def pop(list, index=None):
    end = len(list) - 1
    if index is None:
        index = end
    result = list[index]
    for i in range(index, end):
        list[i] = list[i + 1]
    del list[end]
    return result
</code></pre></li>
</ul>

<p>However there are a couple of non-major changes you can make:</p>

<ul>
<li>If you stay with using recursion, don't use <code>while</code> as a replacement for <code>if</code>.</li>
<li>If you remove the recursion, there's no need to have your <code>if</code>s in your functions.</li>
<li>rather than doing both <code>a % b</code> and <code>a // b</code> you can instead use <a href="https://docs.python.org/library/functions.html#divmod" rel="nofollow noreferrer"><code>divmod</code></a>.</li>
<li>Values in Python can implicitly be converted to booleans. An empty array is <code>False</code> where an array with at least one item is <code>True</code>.
This also happens with ints, <code>0</code> is <code>False</code> where all other numbers are <code>True</code>.</li>
</ul>

<p>And so changing the code to not suffer from the above problems can result in:</p>

<pre><code>def get_digits(num):
    digits = []
    while num:
        num, digit = divmod(num, 10)
        digits.append(digit)
    return digits


def multiply_all(digits):
    multiplier = 1
    while digits:
        multiplier *= digits.pop()
    return multiplier


def persistence(num):
    count = 0
    while num &gt;= 10:
        num = multiply_all(get_digits(num))
        count += 1
    return count
</code></pre>
    </div>