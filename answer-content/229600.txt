<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Just a couple ways to shorten your code</p>

<p>This code</p>

<pre><code>if i &gt;= len(bucket_list) or len(value_list) == 0:
    if i &gt;= len(bucket_list) and len(value_list) == 0:
        return True
    else:
        return False
</code></pre>

<p>can be written like this:</p>

<pre><code>if i &gt;= len(bucket_list) or not value_list:
    return i &gt;= len(bucket_list) and not value_list
</code></pre>

<p>This allows you to return the boolean value this expression would evaluate too, and <code>not value_list</code> means the length of <code>value_list</code> is 0, or empty. I changed other occurances of this in your code as well.</p>

<hr>

<p>This code</p>

<pre><code>for x in bucket_map_prospect:
    temp_list.remove(x)
</code></pre>

<p>can be written like this:</p>

<pre><code>temp_list.remove(x for x in bucket_map_prospect)
</code></pre>

<p></p><hr>
If you're going to use type hints, you might as well hint at what the method is returning. From this

<pre><code>def function(...):
</code></pre>

<p>to this</p>

<pre><code>def function(...) -&gt; bool/int/etc:
</code></pre>

<p>You'll see what I mean when you look at the updated code.
</p><hr>
<strong>Updated Code</strong>

<pre><code>class FindBucketMap(object):
    """
    Class Docstring
    """
    @classmethod
    def create_map_list(cls, bucket_list: list, value_list: list, bucket_map_list: list, i: int = 0) -&gt; bool:
        """
    Backtracking code to find possible bucket and value pair
    :param bucket_list: List of bucket values
    :param value_list: List of values to map to bucket
    :param bucket_map_list: List will be updated with the mapping of values from bucket_list to value_list
    :param i:
    :return:
    """
        if i &gt;= len(bucket_list) or not value_list:
            return i &gt;= len(bucket_list) and not value_list

        bucket_map_prospect_list = []
        bucket_value = bucket_list[i]
        cls.create_map(bucket_value, value_list, [], bucket_map_prospect_list)

        if not bucket_map_prospect_list:
            return False

        for bucket_map_prospect in bucket_map_prospect_list:
            temp_list = list(value_list)
            temp_list.remove(x for x in bucket_map_prospect)
            if cls.create_map_list(bucket_list, temp_list, bucket_map_list, i + 1):
                bucket_map_list.append({"bucket": bucket_value, "split": bucket_map_prospect})
                return True

    @classmethod
    def create_map(cls, value: Decimal, value_list: list, cur_list: list, map_list: list, i: int = 0) -&gt; None:
        """
    Greedy code to find list of values that matches a sum
    :param value:  Expected Sum
    :param value_list: Possible values
    :param cur_list: Processed values
    :param map_list: List contains the possible combinations
    :param i:
    :return:
    """
        if value == Decimal(0):
            map_list.append(cur_list)
            return
        if value &lt; Decimal(0):
            return
        while i &lt; len(value_list):
            if value &lt; value_list[i]:
                return
            cls.create_map(value - value_list[i], value_list, cur_list + [value_list[i]], map_list, i + 1)
            i += 1
</code></pre>
    </div>