<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First of all, it's nice to see at least some comments. It makes understanding your code a lot easier.  </p>

<p>To the suggestions:<br>
Yes, you are right, inheriting from JFrame isn't good. Inheriting from Thread isn't good, too. Your case is a little bit worse because your code says, your client is a JFrame, your server is a thread and your user is a thread, too. That's really confusing. The problem is, that you are mixing your domain logic with the technical stuff.<br>
Ask yourself this: What do you want your program to do (from a users standpoint)? I would say you want to have users that can send each other messages. That's something I would assume to find in your User class.<br>
The GUI and the threads are something completely different. They are on a different layer and your user class shouldn't have any knowledge about them.  </p>

<p>Additionally, your classes are doing too much and it's not easy to predict who will do what. You should ask yourself before you're creating a method: What's its job? What will be the output of this method and how would I test it?  </p>

<p>Take this for example:</p>

<pre><code>    public void connect(String address) {
        try {
            this.socket = new Socket(address, ServerConstants.PORT);
            initVars();
            this.textField.setEditable(true);
            Server.log("Connected to " + address);
            this.setVisible(true);
            while (true) {
                new ServerListener(out, in).start();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
</code></pre>

<p>This method would be really hard to test because it does multiple, very different things and because you have two hard dependencies: Socket and ServerListener. If you don't have an internet connection, your test would fail. If your ServerListener fails, your test fails, too. Try to get rid of such dependencies and let them take interfaces instead of classes. This way you could implement an alternative version of the class to use it in the tests.  </p>

<p>Besides, your two connect classes look almost identical. You should create a method for overlapping logic.  </p>

<p>And finally:  </p>

<pre><code>    while (true) {
        new ServerListener(out, in).start();
    }
</code></pre>

<p>You are creating an object in an infinite loop and I guess you will leave the loop by throwing and catching an exception, right? Don't do that. Exceptions are for exceptional cases and not to control the flow. Use ifs instead.</p>
    </div>