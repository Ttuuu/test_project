<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your <code>enumerate2</code> is a nice touch but I am not quite convinced that this is necessary : if you are to play with the length manually, you might as well compute the power from the index manually.</p>

<p>Also, if you were to handle the negative with a minus instead of the plus, you'd be able to get rid of the brackets. On the other hand, you cannot use <code>join</code> anymore which is a bit of a pain because it is a cool and efficient function.</p>

<p>Anyway, here's my try :</p>

<pre><code>def poly(p, var_string='x'):
    res = ''
    first_pow = len(p) - 1
    for i, coef in enumerate(p):
        power = first_pow - i

        if coef:
            if coef &lt; 0:
                sign, coef = (' - ' if res else '- '), -coef
            elif coef &gt; 0: # must be true
                sign = (' + ' if res else '')

            str_coef = '' if coef == 1 and power != 0 else str(coef)

            if power == 0:
                str_power = ''
            elif power == 1:
                str_power = var_string
            else:
                str_power = var_string + '^' + str(power)

            res += sign + str_coef + str_power 
    return res
</code></pre>

<p>and the corresponding output :</p>

<pre><code>2x^8 + 3x^6 - 4x^5 - 3x^4 + 2x^3 + x + 10
</code></pre>

<p><strong>Bug found</strong></p>

<p>As I was looking at my original implementation, I found a bug which happens to be in yours too : try with <code>[1,1,1,1,1]</code>.</p>
    </div>