<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Re-use Data Structures</h2>

<p>You should realistically be using an <code>std::vector</code> which would do all of the resizing internally. That's not to say that re-inventing a resizeable array isn't a worthwhile exercise, but that it is a separate problem and should be done separately from your queue.</p>

<hr>

<h2>Use Appropriate Data Structures</h2>

<p>That being said, I also challenge the use of an array at all. The only reason to use an array as your underlying data structure is for contiguous memory to be more cache friendly. This isn't likely to be something you need from your queue and most are not implemented this way.</p>

<hr>

<h2>Write more Robust and Flexible code</h2>

<p>Templates are not the answer to everything, but here they are almost necessary. Your queue has very limited usefulness by only working with <code>int</code>s. What if I need to use it with <code>long</code> or <code>float</code>? What if I make my own <code>Event</code> class and want to use it with that? As it is right now it is very rigid and limited. By learning some basic Template Metaprogramming (Which won't be easy) you can seriously improve your flexibility by working with any type.</p>

<hr>

<h2>Consider The Standard and Your Use Case</h2>

<p>In most cases you are going to need the functionality of the standard library. In that case it is worthwhile in exercises to mimic the standard.</p>

<p><a href="https://en.cppreference.com/w/cpp/container/deque" rel="nofollow noreferrer"><code>std::deque</code></a> (or Double-Ended Queue) and <a href="https://en.cppreference.com/w/cpp/container/queue" rel="nofollow noreferrer"><code>std::queue</code></a> are the standard versions. I just want you to look at the member functions sections of those two classes and consider how you would implement each of those.</p>
    </div>