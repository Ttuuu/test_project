<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Includes</h1>
<p>We include <code>&lt;string&gt;</code> but don't use anything from it, so that line can be removed.</p>
<h1>Namespace <code>std</code></h1>
<p>Avoid <code>using namespace std</code> - it won't hurt in simple programs, but it's a bad habit that could subtly change the meaning of programs.  Import just the names you need, in the smallest reasonable scope, or just get used to writing <code>std::</code> - it's intentionally very short!</p>
<h1>Indentation</h1>
<p>Pick a common indentation style, and use it consistently (perhaps that's a problem of how you've copied the code into the question, rather than a fault in the code itself?).</p>
<h1>Always test input operations</h1>
<p>The reading of a character with <code>&gt;&gt;</code> can fail - for example, if the input stream is closed.</p>
<h1>Prefer <code>do</code>-<code>while</code></h1>
<p>Our loop should run at least once.  <code>do</code>-<code>while</code> expresses that better than <code>while</code>, and means that we don't need to initialise <code>cafe</code> outside the loop.</p>
<h1>Rearrange the <code>if</code></h1>
<p>We can re-order the <code>if</code> so that our current first case becomes the <code>else</code> clause:</p>
<pre><code>    if (cafe == 'O') {
        std::cout &lt;&lt; "Regalez-vous !" &lt;&lt; std::endl;
    } else if (cafe == 'N') {
        std::cout &lt;&lt; "Tant pis, a la prochaine !" &lt;&lt; std::endl;
    } else {
        std::cout &lt;&lt; "Merci de répondre par O ou par N." &lt;&lt; std::endl;
    }
</code></pre>
<h1>Consider <code>switch</code></h1>
<p>Any time we have different behaviours for particular values of a variable, we might use a <code>switch</code> statement instead of chained <code>if</code>/<code>else if</code> statements.</p>
<h1>Exit early from the loop</h1>
<p>We can <code>break</code> or <code>return</code> out of the loop in the success cases, rather than testing against <code>O</code> or <code>N</code> again.  In this case, the loop can be indefinite (<code>while (true)</code>) and that's conventionally written as a <code>while</code> rather than <code>do</code>-<code>while</code>, so we change that back again.</p>
<h1>Accept lower case letters</h1>
<p>Allow the user to input <code>o</code> instead of <code>O</code>, or <code>n</code> instead of <code>N</code>.  Users are simple creatures and will expect the program to cope with their assumptions.</p>
<h1>Discard the rest of the input line</h1>
<p>Something alluded to in the description: if the user enters a nonsense word, then each character in the word will be tested.  We could ignore everything up to the next newline, like this:</p>
<pre><code>        std::cin.ignore(999 , '\n');
</code></pre>
<p>(the <code>999</code> is just a "large" number of characters to ignore; we don't expect that many from one user line).</p>
<hr>
<h1>Improved code</h1>
<pre><code>#include &lt;iostream&gt;

int main()
{    
    while (true) {
        std::cout &lt;&lt; "Veux-tu du café ? O/N" &lt;&lt; std::endl;
        char cafe;
        std::cin &gt;&gt; cafe;
        if (!std::cin) {
            std::cerr &lt;&lt; "Read error!\n";
            return 1;
        }
        // ignore rest of line
        std::cin.ignore(999 , '\n');

        switch (cafe) {
        case 'O':
        case 'o':
            std::cout &lt;&lt; "Regalez-vous !" &lt;&lt; std::endl;
            return 0;
        case 'N':
        case 'n':
            std::cout &lt;&lt; "Tant pis, a la prochaine !" &lt;&lt; std::endl;
            return 0;
        default:
            std::cout &lt;&lt; "Merci de répondre par O ou par N." &lt;&lt; std::endl;
        }
    }
}
</code></pre>
    </div>