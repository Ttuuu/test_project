<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I won't try to be comprehensive:</p>

<blockquote>
  <p>The part I don't like is init function.</p>
</blockquote>

<p>Your instincts are right.</p>

<blockquote>
  <p>If I don't use init function, perhaps I have to add parameter capacity to almost every function in the code, which looks not pretty.</p>
</blockquote>

<p>Clojure supports <a href="https://clojuredocs.org/clojure.core/binding" rel="nofollow">dynamic binding</a>, which you can use instead of misusing <code>def</code>; although I'm not sure it's warranted here.</p>

<p>Another problem I see is even though what you should do for each move (say [:pour 1 2]) is a constant, first it needs to be computed each time <code>extend</code> function is called, second look it up in a <code>cond</code> again in <code>change</code>. A move is a function from a state to a new state. Why not just use that function? Because we need the description for generating the history. So a move has a state transition function and a description.</p>

<pre><code>(defrecord Move [description change])
</code></pre>

<p>And we can generate moves like this:</p>

<pre><code>(defn moves [capacity]
  (let [glasses (range (count capacity))]
    (concat
     (for [g glasses] (Move. [:empty g] #(empty capacity % g)))
     (for [g glasses] (Move. [:fill g] #(fill capacity % g)))
     (for [from glasses, to glasses :when (not= from to)]
       (Move. [:pour from to] #(pour capacity % [from to]) )))))
</code></pre>

<p>We don't need <code>change</code> function anymore:</p>

<pre><code>(defn extend-path [path move]
  (-&gt; path
    (update-in [:history] #(conj % (:description move)))
    (update-in [:end-state] (:change move))))
</code></pre>

<p>If you pay attention, <code>change</code> function was dependent on what the specific moves were. Previous version of <code>extend-path</code> was dependent on them also, transitive as it was dependent on <code>change</code>. We will return to this, later.</p>

<p>We don't need to pass <code>capacity</code> to <code>extend</code> anymore; instead of generating moves, we can just pass them in:</p>

<pre><code>(defn extend
  ([moves paths explored]
    (if-let [more (for [path paths
                        next-path (map #(extend-path path %) moves)
                        :when (not (contains? explored (:end-state next-path)))]
                    next-path)]
      (lazy-cat paths (extend moves more (conj explored (map #(:end-state %) more)))))))
</code></pre>

<p>Thus <code>extend</code> is not dependent on the specifics of this problem.       </p>

<p>If we inline <code>init</code> we get something like this:</p>

<pre><code>(defn solve [capacity target]
  (let [init-state (vec (repeat (count capacity) 0))
        moves (moves capacity)
        init-path #{{:history [], :end-state init-state}}]
    (first (for [path (extend moves init-path #{})
                 :when (some #(= % target) (:end-state path))]
             path))))
</code></pre>

<p>I initialize the <code>explored</code> states as empty set, as it made more sense to me. </p>

<p>I notice that the body of <code>solve</code> has only the test in the <code>:when</code> clause left specific to this problem. The rest of the body is actually some search algorithm. (I assume it is breadth-first)</p>

<p>we can extract it, too:</p>

<pre><code>(defn breadth-first [moves init-path final?]
  (let [init-path #{{:history [], :end-state init-state}}]
    (first (for [path (extend moves init-path #{})
                 :when (final? (:end-state path))]
             path))))

(defn solve [capacity target]
  (let [init-state (vec (repeat (count capacity) 0))
        moves (moves capacity)
        final? #((set %) target)]
    (breadth-first moves init-state final?))
</code></pre>

<p>This enhanced separation of concerns, as <code>breadth-first</code>, <code>extend</code>, <code>extend-path</code>, <code>Move</code> are no longer dependent on the specifics of this problem. You can move them to another source file, which would not change much as the problem requirements evolve. This also makes it easier to change the search algorithm being used.</p>
    </div>