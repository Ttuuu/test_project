<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Interface</h2>
<p>Passing an array and then two indexes is a very C style of interface. In C++ it is much more common to pass two iterators. An iterator is a generalized form of pointer.</p>
<p>So rather than:</p>
<pre><code>bool binary_search(int ar[], int low, int high, int key);
</code></pre>
<p>I would use:</p>
<pre><code>template&lt;typename I&gt;
bool binary_search(I low, I high, int key);
</code></pre>
<p>Also rather than pointing at the first and last elements iterator ranges use a first and one past the last. This makes calculating sizes easier.</p>
<h3>Code Review</h3>
<p>Don't use <code>&gt;&gt; 1</code> to represent a divide by 2. The point of high level code is to write it so that it is easy for humans to read. That is not obvious. Also the compiler can do these micro optimizations much better than you. So don't try and confuse it. Just write code in the most readable way possible.</p>
<p>Don't use <code>sizeof(ar) / sizeof(ar[0])</code> it is so easy to break as array collapse into pointers at the drop of a hat. Use <code>std::size()</code> which works for arrays/containers but will fail to compile for pointers (which is what you want).</p>
<p>But if you switch to using <code>Iterator</code> based interface then you should use <code>std::begin()</code> and <code>std::end()</code>.</p>
<h3>Style</h3>
<p>Your bracing style is uncommon. But not so egregious that I would complain about. Normally brace style is defined by a local style guide. So if you are in a compnany or project just check that.</p>
<pre><code> // Most common C++ styles
 if ()
 {
     Statement;
 }

 // or
 if () {
     Statement;
 }
</code></pre>
    </div>