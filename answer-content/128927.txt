<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I agree with Jerry Coffin on the overdone part. I recommend another algorithm however, which roughly is: </p>

<pre><code>char* haystack;
char* needle;
int currentMatch = 0;
size_t hay_len = strlen(haystack);
size_t nee_len = strlen(needle);
for(int i = 0;i&lt;hay_len;i++) {
    if(haystack[i] == needle[currentMatch]) {
        if(++currentMatch == nee_len) return i - currentMatch; // may or may not be off by one
    }else currentMatch = 0;
}
</code></pre>

<p>This is as optimized as I ever got for search for a pattern in another (ie a string in a string).</p>
    </div>