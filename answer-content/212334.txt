<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Review</h1>

<p>For what it does that is very dense code. Consider reducing variable name length.</p>

<h2>Major points</h2>

<ul>
<li>Direct element reference reduces code size, improves performance, and forces you to ensure element IDs and names are unique.</li>
<li>Adding content via <code>innerHTML</code>, clobbers events, forces reflows, and chews power.</li>
<li>Incorrect currency handling. Money comes in cents, not fractions of a cent. Always use integer math for calculations that involve cash exchanges.</li>
</ul>

<h2>Minor points</h2>

<ul>
<li>Avoid adding event listeners directly to the element's <code>on</code> property. Use <code>addEventListener</code></li>
<li>There are some cases where <code>innerHTML</code> can be useful, most of the time it is the worst way to add to the DON. Don't use it! </li>
<li>Add text content via <code>element.textContent</code>.</li>
<li>Don't change element style properties directly, create CSS rules and set the appropriate class name.</li>
<li>Use <code>const</code> for constants.</li>
<li>Don't add comments that point out the obvious.</li>
<li>Use arrow functions for anon functions;</li>
</ul>

<h2>Direct element reference</h2>

<p>All elements that have an Id property set can be accessed by that id directly in the global namespace.</p>

<pre><code>&lt;div id="divEl"&gt;Foo&lt;/div&gt;
&lt;script&gt;
    const element = document.getElementById("divEl");
    // is the same as
    const element = divEl;

    ...
</code></pre>

<p>This works on all browsers (and has done since netscape died). You MUST ensure that id's are unique, if not your page can not be validated and will enter quirks mode. Browser behaviour will differ if in quirks mode.</p>

<p>Using direct referencing forces you to ensure id's are unique and thus avoid a very common cause of quirky DOM modes. It also greatly reduces the overhead of needing to use DOM queries to locate elements. </p>

<p>Direct referenced elements are live.</p>

<h2>Working with money</h2>

<p>When working with currencies you need to remember that money is exchanged in integer units. For the US that is cents. Your calculations do not handle the tip correctly. eg bill = $1000, tip 10%, for 3, means each person must pay $33.33333...</p>

<p>Always work in cents, always round to cent, or round up if there is an exchange priority. In this case you convert the bill to cents, calculate the tip per person, rounding up to nearest cent then convert back to dollars.</p>

<pre><code>bill *= 100;                        // convert to cents
bill = Math.round(bill);            // round to nearest
tip = bill / 100 * tip / people;    // get tip in cents per person
tip = Math.ceil(tip);               // round up
total = bill + tip * people;        // Get total in cents         
</code></pre>

<p>When displaying currency always use <code>Number.toLocaleString</code>. Eg displaying the above values.</p>

<pre><code>tipPerPersonDisplay = (tip / 100).toLocaleString("en-US", {style: "currency", currency: "USD"});
totalBillDisplay = (total / 100).toLocaleString("en-US", {style: "currency", currency: "USD"});
</code></pre>

<h2>Example</h2>

<p>Note that element ids have been prepended with <code>El</code> as I do not know what other code or markup you have.</p>

<p>The code size has be reduce by half meaning its is easier to maintain and read.</p>

<p>Money is handled correctly and rounded up to favour the tip (a cent per person max)</p>

<pre><code>const CURRENCY = ["en-US", {style: "currency", currency: "USD"}];
const setElClass = (el, cName, show = true) =&gt; el.classList[show ? "add" : "remove"](cName);

numberOfPeopleEl.addEventListener("input", () =&gt; {
    numberOfPeopleLabelEl.textContent = numberOfPeopleEl.value &gt; 1 ? "people" : "lone wolf";
});

calculateButtonEl.addEventListener('click', () =&gt; {
    var tip = serviceQualityEl.value;
    const bill = billAmountEl.value;
    const people = numberOfPeopleEl.value;

    setElClass(billAmountAlertEl, "alert--show", isNaN(bill));
    setElClass(tipPercentageAlertEl, "alert--show", isNaN(tip)); 

    if (!isNaN(bill) &amp;&amp; !isNaN(tip)) {
        tip = Math.ceil(Math.round(bill * 100) / 100 * tip / people);  // in cents per person
        tipAmountEl.textContent = (tip / 100).toLocaleString(...CURRENCY);
        setElClass(eachEl, "people-count--show", people &gt; 1);
        tipAmountContainerEl.classList.add("tip-amounts--show");
        cashRegisterSoundEl.volume = 0.05;
        cashRegisterSoundEl.play();
    }
});
</code></pre>

<p>You will also need the following CSS rules.</p>

<pre><code>.alert--show { display : inline }
.people-count--show { display : inline }
.tip-amounts--show { display : block }
</code></pre>
    </div>