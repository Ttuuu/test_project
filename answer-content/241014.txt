<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'll answer your questions in reverse order:</p>

<blockquote>
  <p>How to set "end" of array with single <code>NULL</code> like <code>line_pointer[i] = NULL</code> in <code>else</code> statement?</p>
</blockquote>

<p>You can (with <code>memset</code>, as shown in other answers), but it's not guaranteed by the C standard that the <code>float</code> value will be set to zero. I would instead suggest to set every value in the structure to zero as you are already doing.</p>

<blockquote>
  <p>Is it possible to move <code>fscanf</code> condition inside <code>while</code>-loop condition instead of endless <code>(1)</code>?</p>
</blockquote>

<p>You may be able to do this, but I don't recommend it. This would make your code harder to read and comprehend.</p>

<p>Some other issues:</p>

<h2>Check the return value of the *<code>alloc</code> family of functions</h2>

<p>Right here, a crash could happen if you're out of memory:</p>

<pre><code>line_pointer = (struct csv_line *)realloc(line_pointer, sizeof(struct csv_line) * (i + 1));
</code></pre>

<p>You should add a check just like you do with <code>csvFile</code>:</p>

<pre><code>if(!line_pointer)
    exit(1);
</code></pre>

<p>Of course, a better error message could be formulated with <code>perror</code>:</p>

<pre><code>if(!line_pointer)
{
    perror("realloc(line_pointer)");
    exit(1);
}
</code></pre>

<p><code>perror</code> will work when <code>fopen</code> fails as well.</p>

<h2>Check the return value of <code>fscanf</code> correctly</h2>

<p>Instead of checking if you've reached the end-of-file,
check whether you didn't read as many variables as expected.
This provides a minimal aspect of data validation:</p>

<pre><code>    if (fscanf(csvFile, "%d,%f,%d,%c",
            &amp;(line_pointer + i)-&gt;value1,
            &amp;(line_pointer + i)-&gt;value3,
            &amp;(line_pointer + i)-&gt;value2,
            &amp;(line_pointer + i)-&gt;char1) != 4)
</code></pre>

<h2>Use <code>EXIT_FAILURE</code> instead of <code>1</code></h2>

<p>As you're using <code>EXIT_SUCCESS</code> to show success, you should go for consistency (and portability) by using <code>EXIT_FAILURE</code> in place of <code>1</code> in <code>exit</code>.</p>

<h2>Use <code>return</code> instead of <code>exit</code></h2>

<p>In addition to the above, in <code>main</code> you can forego using <code>exit</code> and instead use <code>return</code>. There's really no need to use <code>exit</code> in a program under normal circumstances, anyway.</p>

<h2>Don't cast the return value of <code>malloc</code>/<code>calloc</code>/<code>realloc</code></h2>

<p>The return value of <code>realloc</code> can be implicitly converted to any object pointer. It's not necessary to cast it, and in my opinion, avoiding unnecessary casts is a good thing.</p>

<h2>Use array and structure access operators instead of pointer arithmetic</h2>

<p>To me, this looks odd:</p>

<pre><code>(struct_pointer + ctr)-&gt;member
</code></pre>

<p>Instead, you can use array access and the <code>.</code> operator:</p>

<pre><code>struct_pointer[ctr].member
</code></pre>

<p>This applies equivalently to when you're taking the address of <code>member</code>.</p>

<h2>Use consistent indentation</h2>

<p>In some places, you use two spaces, while in others you use one and four. I suggest sticking to one indentation style, whatever it is. Personally, I use four or a tab, but you can use whatever you want if it's consistent. See the <a href="https://www.kernel.org/doc/html/v4.10/process/coding-style.html" rel="nofollow noreferrer">Linux Kernel Coding Style Guidelines</a> for more information.</p>

<h2>Yoda conditions</h2>

<p>Backwards, your conditions are. This is hard to read and provides little to no benefit, considering that compilers now warn about typos that Yoda conditions originally solved:</p>

<pre><code>while('\0' != (line_pointer + k)-&gt;char1)
</code></pre>

<p>Instead, just use <code>!=</code> the "normal" way:</p>

<pre><code>while((line_pointer + k)-&gt;char1 != '\0')
</code></pre>
    </div>