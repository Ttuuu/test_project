<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Term "production ready" certainly has different meanings for different people, but I consider it as a reason to do <em>some</em> nitpicking, at least.</p>

<hr>

<p>First of all, you mentioned that the actual goal is to compare the performance between <code>byte[]</code> arrays and <code>ByteBuffer</code>. This is something that one could write an essay on, and it's tremendously difficult to pull <em>objective</em> results out of such a test. In order to not distort the results, you'd have to run the test with different array/buffer sizes, consider the possible effects of GC and pinning of the JVM (which is somewhat unspecified, and thus, could only be evaluated empirically for one given VM). You'd also have to use a dummy implementation of <code>MD_GetHsmInfo</code> (as you already did), in order to not distort the results. </p>

<p><sup>(Actually, I <em>should</em> have some idea about the performance difference here and the results that you could expect, but have to admit that I haven't yet evaluated this as systematically as I probably <em>should</em> have. Maybe I'll try to allocate some time for that, and extend this answer with some results later...)</sup></p>

<hr>

<p>You're talking about <code>ByteBuffer</code> in the text, but the code seems to be targeting <strong>direct</strong> <code>ByteBuffer</code> specifically. This may look like a detail, but when you say that the code should be "production ready", you have to be aware that <a href="https://docs.oracle.com/javase/8/docs/technotes/guides/jni/spec/functions.html#GetDirectBufferAddress" rel="nofollow noreferrer"><code>GetDirectBufferAddress</code></a> may return <code>NULL</code> when the buffer is <em>not</em> a <strong>direct</strong> <code>ByteBuffer</code>. That is, it will crash when you call your function with a <code>ByteBuffer</code> that was created by calling <code>ByteBuffer.wrap(someByteArray)</code>. </p>

<hr>

<p>You're creating the <code>isCopy</code> variable and passing it to <a href="https://docs.oracle.com/javase/8/docs/technotes/guides/jni/spec/functions.html#Get_PrimitiveType_ArrayElements_routines" rel="nofollow noreferrer"><code>GetByteArrayElements</code></a>, but you are not using the value of this variable. Alternatively, you can simply pass in <code>NULL</code> as the last parameter. Whether or not the returned object is a <em>copy</em> is mainly/only relevant when you release the array elements later.</p>

<hr>

<p>As explained in <a href="https://docs.oracle.com/javase/8/docs/technotes/guides/jni/spec/functions.html#Release_PrimitiveType_ArrayElements_routines" rel="nofollow noreferrer"><code>ReleaseByteArrayElements</code></a>, the <code>mode</code> that is passed in as the last parameter does <strong>only</strong> have an effect if the returned elements have been a copy. But using <code>0</code> as the default and <code>JNI_ABORT</code> in case of an error should be fine.</p>

<hr>

<p>When the goal of the comparison is about performance, then the <a href="https://docs.oracle.com/javase/8/docs/technotes/guides/jni/spec/functions.html#GetPrimitiveArrayCritical_ReleasePrimitiveArrayCritical" rel="nofollow noreferrer"><code>*PrimitiveArrayCritical</code></a> family of methods may be worth being mentioned: They can (roughly speaking) be used to treat the section that uses the array data as a "critical section", and temporarily disable the GC, making it more likely that the VM will <em>not</em> have to create a <em>copy</em> of the data that later has to be written back. </p>

<p>But again, the details here are not directly specified and certainly depend on the VM and the size of the array, so it's hard or impossible to say which effect this may have on performance in practice.</p>
    </div>