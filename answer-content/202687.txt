<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Welcome to Code Review.</p>

<p>The type <code>List</code>, imported by <code>from typing import List</code> is never used.  You can delete this statement.</p>

<p>The function <code>def generate_expression(no_of_operators):</code> is a little verbose and complex.  You don't need to create separate lists for <code>operands</code> and <code>operators</code>, and then try to combine them afterwards.  Instead, you could simply create the <code>expression</code> terms directly in a loop:</p>

<pre><code>def generate_expression(no_of_operators):
    operations = ['+', '-', '*', '/']
    expression = []

    expression.append(random.randint(0, 20))

    for _ in range(no_of_operators):
        expression.append(random.choice(operations))
        expression.append(random.randint(0, 20))

    expression = ''.join(str(term) for term in expression)
    return expression
</code></pre>

<p>Here, I've started the expression with a random number, and then, in pairs, added an operator and another random number.  When a loop index is not used, <code>_</code> is commonly used for that variable.  When the beginning of a range is <code>0</code>, that is usually omitted as well.</p>

<p>Adding a space between the operands and operators may be a little more user friendly:</p>

<pre><code>    expression = ' '.join(str(term) for term in expression)
</code></pre>

<p>Parenthesis are not need around the return value in <code>return (int(eval(expression)))</code>.  Instead, simply write: <code>return int(eval(expression))</code></p>

<p>The <code>evaluate(solution, user_solution)</code> function can be shortened, by using the test condition as the return value.</p>

<pre><code>def evaluate(solution, user_solution):
    return solution == user_solution
</code></pre>

<p>Considering how simple the function is, you might consider removing it, and just using the following in your main program:</p>

<pre><code>    if answer == correct_answer:
</code></pre>

<p>The timer starts when the first problem is displayed, not after the first answer is entered.  Then again, the timer may expire after the last answer has been displayed, before the user types in their answer, and they'll still get credit for it, so the misleading instruction information wrong twice in the same way, and in this case two wrongs sort of make a right.  :-)</p>

<p>The following statement is unnecessary.  It is immediately overwritten, or the code skips to top of the loop.</p>

<pre><code>    correct_answer = 0
</code></pre>

<p>There is a logic error here:</p>

<pre><code>while lives != 0 and time.time() &lt; finish_time:
    # Increase the level of difficulty every 5 questions.
    if score != 0 and score % 5 == 0:
        level = level + 1
    #...
    try:
        correct_answer = result(question_expression)
    except:
        print("OOPS ! I messed up ! Lets do it again !")
        continue
    #...
</code></pre>

<p>If the user's score is a multiple of 5, the difficulty increases.  Then, if the <code>question_expression</code> results in a division by 0, you <code>continue</code> from the top of the loop, and the difficulty is increase again!  If you are unlucky, it can happen many times in a row.  A simple fix is moving the difficulty increase code into the score increase code at the end of the loop:</p>

<pre><code>    if answer == correct_answer:
        print("CORRECT ! ", end='')
        score = score + 1
        print("SCORE = ", score, "LIVES = ", lives)
        if score % 5 == 0:
            level = level + 1
            print("LEVEL : ", level)
    else:
        #...
</code></pre>
    </div>