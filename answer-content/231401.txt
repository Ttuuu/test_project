<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong><code>MessageBroker</code></strong>  </p>

<ul>
<li>Both public <code>BrokeredMessageHandlers</code> and <code>BrokeredMessageWithReplyHandlers</code> should be <code>readonly</code> because you don't want that someone sets them to <code>null</code> from outside of the class.  </li>
<li>For both method names <code>public async Task Send()</code> and <code>public async Task SendWithReply()</code> the suffix <code>Async</code> should be appended. See: <a href="https://docs.microsoft.com/en-us/dotnet/csharp/async#important-info-and-advice" rel="nofollow noreferrer">https://docs.microsoft.com/en-us/dotnet/csharp/async#important-info-and-advice</a></li>
<li><p>If you need to get a value of a <code>Dictionary&lt;TKey, TValue&gt;</code> you shouldn't us <code>ContainsKey()</code> together with the <code>Item</code> property getter but <code>TryGetValue()</code>, because by using <code>ContainsKey()</code> in combination with the <code>Item</code> getter you are doing the check if the key exists twice.<br>
From the <a href="https://referencesource.microsoft.com/#mscorlib/system/Collections/Concurrent/ConcurrentDictionary.cs" rel="nofollow noreferrer">refernce source</a>  </p>

<pre><code>public bool ContainsKey(TKey key)
{
    if (key == null) throw new ArgumentNullException("key");

    TValue throwAwayValue;
    return TryGetValue(key, out throwAwayValue);
}

public TValue this[TKey key]
{
    get
    {
        TValue value;
        if (!TryGetValue(key, out value))
        {
            throw new KeyNotFoundException();
        }
        return value;
    }
    set
    {
        if (key == null) throw new ArgumentNullException("key");
        TValue dummy;
        TryAddInternal(key, value, true, true, out dummy);
    }
}
</code></pre></li>
</ul>
    </div>