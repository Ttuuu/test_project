<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code structure is one of infinite recursion.  <code>Main()</code> calls <code>placeholder()</code>, which calls <code>is_letter()</code> which calls <code>is_over()</code> which calls <code>is_letter()</code> (recursive), or <code>play_again()</code> which calls <code>Main()</code> (recursive)!  Eventually, you will end up with a Stack Overflow if you play long enough!</p>

<p>What you want is a loop.  Two loops, actually.  Your program should be structured to operate something like:</p>

<pre><code>play_again = True
while play_again:
    # initialize game state
    while not solved and guesses_left:
        # get guess
        # update game state
    play_again = ask_play_again()
</code></pre>

<p>No recursive calls are necessary.</p>

<hr>

<p>You read all lines of the file to choose a random puzzle.  When you play again, you again read all lines in the file.  Perhaps you could read and store all the puzzles, and each time a game is played, you just select one randomly from the list.</p>

<hr>

<p>Your placeholders are complicated, 3 character entities.  They could just be single characters, and spaces could be added during printing.</p>

<pre><code>self.placeholder = [ "_" if ch != " " else " "  for ch in self.word ]
</code></pre>

<p>To print:</p>

<pre><code>print("".join(f" {ch} " for ch in self.placeholder))
</code></pre>

<p>Or simply:</p>

<pre><code>print("", "  ".join(self.placeholder))
</code></pre>

<hr>

<p>You should allow for punctuation in the puzzles.  Like spaces, these should be directly shown, not converted to underscores.</p>

<pre><code> _  _  _  _  _  â€™  _     _  _  _  _
</code></pre>
    </div>