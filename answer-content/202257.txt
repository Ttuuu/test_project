<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The <a href="https://docs.python.org/3.4/library/ast.html" rel="nofollow noreferrer">Abstract Syntax Trees module</a> is perfect for converting string literals into python values, such as lists and tuples.  Specifically, the <code>ast.literal_eval()</code> method in <a href="https://docs.python.org/3.4/library/ast.html#ast-helpers" rel="nofollow noreferrer">AST Helpers</a>.  </p>

<pre><code>def str_to_nbrs(data):
    return ast.literal_eval("[" + data + "]")

&gt;&gt;&gt; str_to_nbrs("(2,2),(6,2),(2,6)")

[(2, 2), (6, 2), (2, 6)]
</code></pre>

<p>Surrounding the string <code>"(2,2),(6,2),(2,6)"</code> with <code>[</code> and <code>]</code> characters will turn it into the literal string for a list, which is necessary to ensure the result is a nested list of tuples.</p>

<pre><code>ast.literal_eval("[(2,2),(6,2),(2,6)]")  # [(2,2),(6,2),(2,6)]  list of tuples
ast.literal_eval("(2,2),(6,2),(2,6)")    # ((2,2),(6,2),(2,6))  tuple of tuples
ast.literal_eval("[(2,2)]")              # [(2,2)]              list of 1 tuple
ast.literal_eval("(2,2)")                # (2,2)                Oops! Not a tuple of tuples!
</code></pre>

<p>Note: You can surround the string with with <code>(   )</code>, but <code>"((2,2))"</code> still evaluates as the tuple <code>(2,2)</code>.  You need the trailing comma <code>"((2,2),)"</code> in order to convert to the nested tuple of exactly 1 tuple: <code>((2,2),)</code></p>

<p>Note: Using <code>ast.literal_eval()</code> is about <strong>4 times slower</strong> than Graipher's method, but it handles general python literals, including strings, and dictionaries in addition to lists of tuples.  With great power comes reduced speed.</p>

<hr>

<h2>Code review comments on your implementation</h2>

<p>(Excluding what Graipher has already mentioned)</p>

<p>You can use slices to get selected portions of lists.  Consider <code>l_data</code>.  After <code>.split()</code>-ing, you use <code>.pop()</code> to get rid of the last element.</p>

<pre><code>l_data = new_data.split("),")
l_data.pop()
</code></pre>

<p>You can split the data and get rid of the last element in one statement, using the slice <code>[:-1]</code>.  The slice <code>:-1</code> translates to "all elements excluding the last one".</p>

<pre><code>l_data = new_data.split("),")[:-1]
</code></pre>

<p>The statement <code>l_work = []</code> is unnecessary.  <code>l_work = i.split(",")</code> will overwrite the initialized list.</p>

<p>Initializing <code>l_nbrs = []</code> outside your loop is unnecessary, and requires that you reinitialize it at the end of the loop.  Instead, move it inside the loop, at the top:</p>

<pre><code>for i in l_data:
    l_work = i.split(",")
    l_nbrs = []            # Initialized here
    for j in l_work:
        l_nbrs.append(int(j))
    l_all.append(l_nbrs)
</code></pre>

<p>This is referred to lately as keeping your code DRY (Don't Repeat Yourself), in contrast to WET (Write Everything Twice) code.</p>

<p>List comprehension is a powerful tool.  The inner loop can be replaced with the following single statement:</p>

<pre><code>    l_nbrs = [ int(j) for j in l_work ]
</code></pre>

<p>Once you understand that, the code can be reduced further by avoiding the single use <code>l_work</code> and <code>l_nbrs</code> variables::</p>

<pre><code>for i in l_data:
    l_all.append( [ int(j) for j in i.split(",") ] )
</code></pre>
    </div>