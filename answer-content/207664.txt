<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>public IActionResult Convert(string text, double conversionRate)
{
    Converter converter = new UnitConverterBuilder()
    .AddConversionRate(conversionRate)
    .Build();
</code></pre>
</blockquote>

<p>Here you should use <code>IConverter converter = ...</code> instead of <code>Converter converter = ...</code>. That is the whole idea of having an interface. And maybe <code>ConverterBuilder.Build()</code> should return an <code>IConverter</code> interface instead of the <code>Converter</code> class?</p>

<hr>

<p>I think your <code>Convert(...)</code> method lacks to deal with strings that are not parsable to double. It will throw a <code>FormatException</code> on the first invalid number string. So you must at least provide a <code>try-catch</code> block around the calls to <code>Convert()</code> in the calling method. Heslacher suggest using <code>double.TryGetValue()</code>, but does it IMO only halfway, because he just ignores strings that are not convertible. In that way the client has no idea of what went wrong where. Using Haslachers approach you need to do something like:</p>

<pre><code>    double current;
    if (double.TryParse(value, NumberStyles.Any, CultureInfo.InvariantCulture, out current))
    {
        yield return (current * ConversionRate).ToString();
    }
    else
    {
       yield return double.NaN.ToString();
    }
</code></pre>

<p>or otherwise signal to the client that something went wrong, because if you enter a string with say 5 values and one is in invalid format you'll only get 4 back, but which 4?</p>

<hr>

<p>I can't quite figure out why you declare <code>ConverterBuilder</code> as <code>abstract</code>? Why can't consumers use it as is? It is fully working and requires no extensions in derived objects to work properly. To give it any meaning you should make the methods <code>virtual</code> so subclasses can extent/alter the default behavior.</p>

<hr>

<p>Further:</p>

<p>An abstract class with only non-virtual/non-abstract methods is only meaningful by letting subclasses extent the behavior: </p>

<pre><code>  public class UnitConverterBuilder : ConverterBuilder
  {
    public UnitConverterBuilder()
    {

    }

    public UnitConverterBuilder AddSomethingElse(object somethingElse)
    {
      return this;
    }

  }
</code></pre>

<p>your method chaining can then become rather complicated and hard to read and understand:</p>

<pre><code>  UnitConverterBuilder builder = new UnitConverterBuilder();
  IConverter converter = (builder
    .AddConversionRate(2.54)
    .AddDisplayText("Inches to cm") as UnitConverterBuilder)
    .AddSomethingElse("something else")
    .Build();
</code></pre>

<p>because the methods return the base class <code>ConverterBuilder</code>.</p>

<p>You can overcome this by defining the base class as:</p>

<pre><code>  public abstract class ConverterBuilder&lt;TSubClass&gt; where TSubClass : ConverterBuilder&lt;TSubClass&gt;
  {
    protected double _conversionRate;
    protected string[] _convertedUnits;
    protected string _displayText;

    public virtual TSubClass AddConversionRate(double conversionRate)
    {
      _conversionRate = conversionRate;
      return this as TSubClass;
    }

    public virtual TSubClass AddConversionRate(string[] convertedUnits)
    {
      _convertedUnits = convertedUnits;
      return this as TSubClass;
    }

    public virtual TSubClass AddDisplayText(string displayText)
    {
      _displayText = displayText;
      return this as TSubClass;
    }

    public virtual IConverter Build()
    {
      return new Converter(_conversionRate, _convertedUnits, _displayText);
    }

  }
</code></pre>

<p>and <code>UnitConverterBuilder</code> as:</p>

<pre><code>  public class UnitConverterBuilder : ConverterBuilder&lt;UnitConverterBuilder&gt;
  {
    public UnitConverterBuilder()
    {

    }

    public UnitConverterBuilder AddSomethingElse(object somethingElse)
    {
      // TODO: do something with somethingElse
      return this;
    }

  }
</code></pre>

<p>In this way your method chaining becomes straight forward and intuitive again:</p>

<pre><code>  UnitConverterBuilder builder = new UnitConverterBuilder();
  IConverter converter = builder
    .AddConversionRate(2.54)
    .AddDisplayText("Inches to cm")
    .AddSomethingElse("something else")
    .Build();
</code></pre>

<p>But I think that allowing to extent a builder in this way violates the idea of the builder pattern, because a builder is supposed to implement a certain interface that is the contract between the builder and director. You don't relate to that part of the pattern at all?</p>

<p>You should be able to use the builder like this:</p>

<pre><code>IBuilder builder = new UnitConverterBuilder(); //(or just: new ConverterBuilder();)
IConverter converter = builder.AddConversionRate(10).AddXXX()...Build();
</code></pre>

<p>where <code>IBuilder</code> is defined as:</p>

<pre><code>public interface IBuilder 
{
  IBuilder AddConvertionRate(double rate);
  IBuilder AddXXX(...);
  ...
  IConverter Build();
}
</code></pre>

<hr>

<p><strong>Update:</strong></p>

<p>As an answer to Matthwes question in his comment:</p>

<p>It's a step on the path: An interface is the abstraction or contract between the implementer and the client/consumer. So in principle your controller class should not know about the actual builder and converter implementations but fully rely on interfaces: <code>IConverterBuilder</code> which could be injected in the controllers constructor (in asp.net-core there are apis to do that from the startup class) and in the <code>Convert(string text, double conversionRate)</code> action it should call the apis (<code>Addxxx(), Addyyy, Build()</code>) of the injected builder <code>interface</code> to build the converter, but only know it as the contract: <code>IConverter</code>. In this way you implement both the Dependency Inversion and Dependency Injection principles.</p>
    </div>