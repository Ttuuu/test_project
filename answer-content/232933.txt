<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Design: OK initial attempt at abstraction</strong></p>

<p><code>main()</code> does not expose <code>struct q_9</code> members.</p>

<p><strong>Design: <code>.tail</code> is not needed</strong></p>

<p>Present function set has no benefit from the <code>tail</code> member.  It is removable.  Even <code>delete_last()</code> walks down the list.</p>

<p><strong>Design: Global variables not needed</strong></p>

<p>This is a major change, so will assume this code is using the simple one linked-list as an exercise.</p>

<p><strong>Design: Consider common naming prefix (and avoid type-defining a pointer)</strong></p>

<p>Example: </p>

<pre><code>typedef struct q9 {
  struct q9 *link;
  int data;
} q9_T;

q9_T *q9_newnode(int x);
int   q9_count(const q9_T *node);
void  q9_display(const q9_T *node);
void  q9_add(q9_T *node, int x);
void  q9_delete_front(q9_T *node);
void  q9_delete_last(q9_T *node);
// new ideas
int   q9_pop(q9_T *node);
int   q9_top(const q9_T *node);
int   q9_end(const q9_T *node);  // Potential real use of .tail
bool  q9_empty(const q9_T *node);
</code></pre>

<p><strong>Bug: Wrong allocation size</strong></p>

<p>Code allocates enough for a pointer rather than enough for the <code>struct</code>.</p>

<p>Cast not needed. Better to allocate to the de-referenced object than type.</p>

<pre><code>// node temp=(node)malloc(sizeof(node));
node temp = malloc(sizeof *temp);
</code></pre>

<p><strong>Function declarations say nothing about signature</strong></p>

<p><code>void foo();</code> allows later calls like <code>foo(1), foo("hello", 5.0)</code> to pass undetected as errors.</p>

<pre><code>// void delete_front();
// void count();
// void display();
// void delete_last();
void delete_front(void);
void count(void);
void display(void);
void delete_last(void);
</code></pre>

<p><strong>Inconsistent spacing</strong></p>

<p>Use an auto-formatter - life is too short for manual formatting.</p>

<p><strong>Lack of error checking</strong></p>

<p>No checking if <code>scanf("%d",&amp;choice);</code> succeeded, nor <code>malloc()</code>.</p>

<p><strong>Unneeded code</strong></p>

<p><code>temp=NULL;</code> serves nor purpose in <code>node_add(int x)</code></p>

<p><strong>Bug: de-referencing of <code>NULL</code></strong></p>

<p><code>delete_front()</code> does not check if <code>head == NULL</code> before <code>head-&gt;link</code>.  <code>tail</code> is not updated to <code>NULL</code> when last link deleted.</p>

<p><strong>Bug: de-referencing of <code>NULL</code></strong></p>

<p><code>delete_last()</code> does not check if <code>p-&gt;link == NULL</code> before <code>p-&gt;link-&gt;link</code>.  Also expect <code>head</code> to be updated to <code>NULL</code> if last node deleted.</p>

<p><strong>Prompts use lower case rather than sentence case.</strong></p>

<p>Unless you are <a href="https://en.wikipedia.org/wiki/E._E._Cummings" rel="nofollow noreferrer">E. E. Cummings</a>, use sentence case for prompts.</p>

<pre><code>// printf("\n please enter a choice:");
printf("\n Please enter a choice:");
</code></pre>

<p><strong>Insure output is seen before input</strong></p>

<p>Due to various buffer modes of <code>stdout</code>, best to flush output before input, especially if the prior output does not in with a <code>'\n'</code>.</p>

<pre><code>   printf("\n please enter a choice:");
   fflush(stdout); // add
   scanf("%d",&amp;choice);
</code></pre>
    </div>