<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li>Instead of <code>#define</code> use <code>enum</code> or <code>constexpr</code> for the constant numbers.</li>
<li>I don't think that the number of time data or number of points should be absolute constants - rather they should be determined during runtime. Else you have to recompile your code each time you receive new data.</li>
<li>Better declare some sort of output path instead of relying on <code>../</code>, also you need to make sure that the directories exist, else it will fail to save.</li>
<li>You don't want to store small pieces of data over huge amount of files and directories. Better make a serialization standard for yourselves and store a sizable amount of data inside each file. Also, consider binary save/load for better speed, accuracy, and consistency, though, it will be less readable for humans and portability might suffer a bit - some odd platforms use less common endianess.</li>
<li><p>You can speed up the loop</p>

<pre><code>for (size_t i = 0; i &lt; TSIZE; i++)
{
    for (size_t j = 0; j &lt;= i; j++)
    {
        pm(j, i) = pm(i, j) = (1.0 / TSIZE) * (m.col(i).dot(m.col(j).transpose()));
    }
}
</code></pre>

<p>Note: by <code>dot</code> function I expect to see scalar pruduct, so it is odd for me to see that you transpose the vector inside it. Use operator * for matrix multiplication.</p></li>
<li><p>I am not too familiar with these Matrices classes, but most likely, it will be better if you replace</p>

<pre><code>podx.col(i) = podx.col(i) + (1.0 / (eigval(i) * TSIZE)) * sqrt(eigval(i) * TSIZE) * eigvec(j, i) * m.block&lt;MSIZE, 1&gt;(0 * MSIZE, j);
</code></pre>

<p>with</p>

<pre><code>podx.col(i) += (eigvec(j, i) / sqrt(eigval(i) * TSIZE)) * m.block&lt;MSIZE, 1&gt;(0 * MSIZE, j);
</code></pre>

<p>also, what to do if <code>eigval(i) == 0.</code> or too close to it?</p></li>
<li>If you plan to grow your project you'd better eventually replace <code>std::cout</code> with a usage of a logger class as <code>std::cout</code> is not thread friendly despite being technically thread safe. Also, in this, case move the code inside a class and each relevant section move inside a function with a sensible name.</li>
</ol>
    </div>