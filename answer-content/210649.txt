<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Are you absolutely sure this is the bottleneck? Looking at the linked problem and the <a href="https://codejam.withgoogle.com/2018/challenges/0000000000007706/analysis/00000000000459f4" rel="nofollow noreferrer">solution analysis</a>, I'm not sure if this component is even needed to solve the given problem. It's possible your overall algorithm is inefficient in some way, but obviously I couldn't really tell unless I saw the whole program that this is part of.</p>

<p>@Josay's already given a <a href="https://codereview.stackexchange.com/a/210645/140921">good improvement</a>, but in the grand scheme of things, this doesn't really shave off that much measurable time for larger grids. The original solution was a pretty good algorithm for solving the problem of largest connected subsections.</p>

<h2>General comments</h2>

<p>Having three lines here is unnecessary:</p>

<pre><code>temp = traverse_component(i, j)
if temp &gt; component_size:
    component_size = temp
</code></pre>

<p>because of one nice Python built-in, <code>max</code>:</p>

<pre><code>component_size = max(component_size, traverse_component(i,j))
</code></pre>

<hr>

<p><code>component_size</code> could be named more descriptively as <code>largest_size</code>.</p>
    </div>