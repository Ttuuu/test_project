<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I've been doing something similar to your <code>await Task.WhenAll</code>, though not often enough to think about a shorter way of doing it. However, I've recently come to doubt the necessity of it.</p>

<p>Note that there is almost zero difference in the effective behavior of this code:</p>

<pre><code>var t1 = SomethingAsync();
var t2 = OtherAsync();
await Task.WhenAll(t1, t2);
var r1 = await t1;
var r2 = await t2;
</code></pre>

<p>and this code:</p>

<pre><code>var t1 = SomethingAsync();
var t2 = OtherAsync();
var r1 = await t1;
var r2 = await t2;
</code></pre>

<p>In both cases, the tasks are started. In both cases, the tasks run in the background as much as possible. In both cases, the method won't finish until both tasks are done, assuming they succeed.</p>

<p>If only task t1 fails, both cases will throw its exception. The first version will first wait for task t2 to finish, the second version will not. This may make a difference, but usually won't.</p>

<p>If only task t2 fails, both cases will throw its exception, although the second version will execute a little more code first; this difference is very unlikely to make a practical difference.</p>

<p>If both tasks fail, both cases will throw the exception of t1 and swallow the one of t2, see here: <a href="https://blogs.msdn.microsoft.com/seteplia/2018/02/14/one-user-scenario-to-rule-them-all/" rel="nofollow noreferrer">https://blogs.msdn.microsoft.com/seteplia/2018/02/14/one-user-scenario-to-rule-them-all/</a> down at "Exception Handling".</p>

<p>So if I don't mind the swallowed exceptions, I would simply omit the <code>WhenAll</code> completely, which makes your utility method redundant.</p>

<p>That said, it would make a good place to attach code that prevents the swallowing of the exception, if that is what you want. Given that, I like your idea, but it can be improved: you can make a tuple of tasks directly awaitable. The <code>GetAwaiter</code> method that the compiler implicitly calls may be an extension method. That would result in this code:</p>

<pre><code>static class ParallelTasksExtensions
{
    static TaskAwaiter&lt;(T1, T2)&gt; GetAwaiter&lt;T1, T2&gt;(this (Task&lt;T1&gt;, Task&lt;T2&gt;) tasks)
    {
        return AwaitAndPackage().GetAwaiter();

        async Task&lt;(T1, T2)&gt; AwaitAndPackage()
        {
            await Task.WhenAll(tasks.Item1, tasks.Item2);
            return (await tasks.Item1, await tasks.Item2);
        }
    }
}
</code></pre>

<p>(Warning: untested.)</p>

<p>Now you can just write <code>await (t1, t2)</code> directly. You can then proceed to overload for more arguments, of course.</p>

<p>Or instead you can install the <a href="https://www.nuget.org/packages/TaskTupleAwaiter/" rel="nofollow noreferrer">TaskTupleAwaiter NuGet package</a>, which contains exactly this code already. See also the <a href="https://github.com/dotnet/csharplang/issues/380" rel="nofollow noreferrer">enhancement request</a> that led to this.</p>
    </div>