<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>To be honest, this code could be used as a teaching aid to demonstrate every possible mistake that could be made in a PHP script.</p>

<p>Beside problems already mentioned in the other answer, there is a truckload more. </p>

<h3>A database connection.</h3>

<p>It is not your fault, you are following just a terrible outdated example still shown in the PHP manual. Yet, even such a familiar task must be done properly:</p>

<ul>
<li>the proper error reporting mode for mysqli must be set</li>
<li>the proper charset must be set</li>
<li>the improper error reporting must be wiped from the code. You don't want to show the system error message to every site user.</li>
</ul>

<p>I even wrote a distinct article, <a href="https://phpdelusions.net/mysqli/mysqli_connect" rel="nofollow noreferrer">how to use mysqli_connect properly</a>, because, to be honest, there is not a single good example on the whole Internet.</p>

<p>Not to mention that you shouldn't write the same database connection script on the every PHP page. Instead, put it in a file, and then only include this file.</p>

<h3>A non-working query</h3>

<p>A query like this <code>$sql = "SELECT * FROM users WHERE email = $email;";</code> will never return any result, simply because its syntax is wrong. This is another reason to use prepared statements. </p>

<h3>A flawed error reporting.</h3>

<p>To let you know, @ symbols is a pure evil that will make your life a nightmare on the long run. Errors must be fixed, not swept under the rug! And in order to fix the error you must be aware of its existence. While @ operator will leave you totally ignorant.</p>

<h3>Superfluous queries</h3>

<p>In this code you are running three SELECT queries to the same table. Which is just illogical. Why do you need a <code>$sql = "SELECT * FROM users WHERE email = $email;";</code> if on the second line you will run almost identical query? </p>

<p>All you need is to use LEFT JOIN in your second query and it will happily serve for both tasks.</p>

<p>And after inserting into password_resets table you are trying to run the second query again. Which is also superfluous, if you care to define the reset timestamp in the script.</p>

<h3>The code refactored.</h3>

<p>To sum everything up, here is the database interaction part of your code slightly refactored:</p>

<p>db.php:</p>

<pre><code>mysqli_report(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT);
try {
    $conn = mysqli_connect("localhost","admin","password","db");
    mysqli_set_charset($mysqli, "utf8mb4");
} catch (\mysqli_sql_exception $e) {
    throw new \mysqli_sql_exception($e-&gt;getMessage(), $e-&gt;getCode());
}
</code></pre>

<p>password reset script (database interaction part)</p>

<pre><code>require 'db.php';
$msg = '';
if (isset($_POST['submit'])) {
    $sql = "SELECT * from users 
            LEFT JOIN password_resets ON (password_resets.user_id=users.id)
            WHERE email=?";
    $stmt = $conn-&gt;prepare($sql);
    $stmt-&gt;bind_param("s", $_POST['email']);
    $stmt-&gt;execute();
    $row = $stmt-&gt;get_result()-&gt;fetch_assoc();

    if (!$row) {
        $msg = "This email: $email is incorrect");
    } else {
        if (!$row['reset_timestamp']) {
            $sql = "INSERT INTO password_resets (user_id, reset_timestamp) VALUES (?, ?);";
            $stmt = $conn-&gt;prepare($sql);
            $time = time();
            $stmt-&gt;bind_param("ii", $row['id'], $time);
            $stmt-&gt;execute();
            $row['reset_timestamp'] = $time;
        }
        $link = ... // here goes your email sending business
    }
}
</code></pre>

<h3>Overall inconsistency</h3>

<p>There are also other issues, like use of $_SESSION['first_name'] and $_SESSION['last_name']. I was under the impression that a password reset code is called when a user do not remember their password and therefore cannot login. In this case I am wondering why there will be their name in the session.</p>

<p>The same confusion is related to the topmost condition: why access to the password reset page should be restricted for the admin use only? In my understanding it must be available to any site user, or otherwise it will be of no value at all.</p>
    </div>