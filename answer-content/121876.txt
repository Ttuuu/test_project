<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Few additional thoughts to <a href="https://codereview.stackexchange.com/questions/121862/fast-prime-factorization-in-python#answer-121869">Fast Number Factorization in Python</a> answer.</p>

<h2>is_prime()</h2>

<p>In case if you have multiple consequent calls you should use something like <a href="https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes" rel="nofollow noreferrer">Sieve_of_Eratosthenes</a>. If you will, time to generate sieve will depend on maximum value of number to factorize but total time will be reduces.</p>

<h2>prime_factors()</h2>

<p>There is one thing you miss in your code. Lets take prime number, let is be 
\$ 10007 \$ and multiply it by \$ 2 \$, we will receive \$ 20014 \$. Its factorization will be \$ 20014 = 10007 \times 2 \$.</p>

<p>Now lets analyze your <code>prime_factors</code>. You will find that \$ 2 \$ is prime divisor of \$ 20014 \$ and will continue to iterate through all prime numbers up to \$ 10007 \$ but actually you have to iterate up to square root of initial number, because if you cross this line and reminder still not equal \$ 1 \$ than it is prime.</p>

<p>This trick can reduce time for such cases.</p>

<p>As the result, you can assume that you need to generate sieve up to square root of highest number.</p>
    </div>