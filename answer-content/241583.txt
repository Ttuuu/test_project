<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There's a few notable things here:</p>

<p>You're prepending to a list, then reversing the result at the end. It would be better to just start with a vector (<code>[]</code>). <code>conj</code>oining to a vector appends the element to the end instead, so you don't need to reverse it after.</p>

<p>If you really want a list here because it's checking for type, then either ignore this suggestion, or put this code into a helper and do something like:</p>

<pre><code>(def primeFactorsOf [n]
  (list* (helper n)))
</code></pre>

<p>I personally think a vector makes more sense here, but it may prove to not be worth it in this case.</p>

<hr>

<pre><code>(= (mod number candidate) 0)
</code></pre>

<p>can just be</p>

<pre><code>(zero? (mod number candidate))
</code></pre>

<hr>

<p>I wouldn't have all your <code>loop</code> accumulators on the same line like you have. It's much harder to read, since you have to manually group them in two's in your head to make sense of them. I'd split them up:</p>

<pre><code>(loop [number n
       candidate 2
       factors []]
  . . .)
</code></pre>

<p>If you <em>really</em> want to have them on one line though, add some commas in there. Commas have, as far as I know, no purpose other to allow you to group expressions to help readability. I'd add them in every two here:</p>

<pre><code>(loop [number n, candidate 2, factors []]
  . . .)
</code></pre>

<hr>

<p>Nested <code>if</code> expressions are usually cleaner using a <code>cond</code>. There are a multitude of ways to format a <code>cond</code> block, but when you have long lines like you have here, I like to format it almost like you would an <code>if</code> statement in a imperative language (below).</p>

<hr>

<p>All together, I end up with:</p>

<pre><code>(defn primeFactorsOf
 "Return all prime factors of a number"
 [n]
 (loop [number n
        candidate 2
        factors []]
   (cond
     (= number 1)
     factors

     (zero? (mod number candidate))
     (recur (/ number candidate) candidate (conj factors candidate))

     :else
     (recur number (inc candidate) factors))))
</code></pre>
    </div>