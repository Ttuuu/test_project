<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>class Dice:    
    def die(num):
        die=randint(1,num)
        return die
</code></pre>

<p>A few points:</p>

<ol>
<li>I would call the method <code>roll</code>, and the <em>class</em> <code>Die</code>;</li>
<li>It's typical to model a die by setting the number of sides in <code>__init__</code>, then calling <code>roll</code> without any arguments;</li>
<li>Why bother assigning <code>die</code>?</li>
</ol>

<p>I would have written:</p>

<pre><code>class Die:
    """Represents a single die."""

    def __init__(self, sides=6):
        """Set the number of sides (defaults to six)."""
        self.sides = sides

    def roll(self):
        """Roll the die."""
        return random.randint(1, self.sides)
</code></pre>

<p>Note the use of docstrings to provide information about the class and its methods. Now e.g. <code>Dice.die(2)</code> becomes <code>Die(2).roll()</code>, which I think is much clearer about what's happening, and you can make a single die:</p>

<pre><code>four_sided_die = Die(4)
</code></pre>

<p>and roll it repeatedly:</p>

<pre><code>four_sided_die.roll()
</code></pre>

<hr>

<p>I would be inclined to make the player classes separate to the monster classes, so you'd have an inheritance structure like:</p>

<pre><code>                Character
               /         \
         Player           Monster
        /   |  \           /    \
 Fighter  Mage  Cleric  Goblin   Orc
</code></pre>

<p>This lets you factor out more of the duplication. For example:</p>

<pre><code>class Player(Character):

    def __init__(self, hp, exp):
        super().__init__(input("What is your character's name? "),
                         20, 10, hp, {}, exp)


class Fighter(Character):

    # Note that constants should be UPPERCASE_WITH_UNDERSCORES
    HD = 10
    LEVEL = 1  # should this really be a class attribute?
    LEVEL_2 = 20
    MAX_HP = 10
    PROF = "fighter"

    def __init__(self):
        super().__init__(10, 10)
</code></pre>

<hr>

<pre><code>def ranmob():
    mob = Goblin() if Dice.die(2)&lt;2 else Orc()
    return mob
</code></pre>

<p>A few points:</p>

<ol>
<li><code>random_mob</code> would be a better name;</li>
<li>This returns a single enemy, which I'm not sure I'd call a <em>"mob"</em>;</li>
<li>There's no need to use the <code>Dice</code>.</li>
</ol>

<p>I'd use <code>random.choice</code> for this, and allow a size of mob to be specified:</p>

<pre><code>ENEMIES = (Goblin, Orc)

def random_mob(size):
    return [random.choice(ENEMIES)() for _ in range(size)]
</code></pre>

<p>this uses a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a> to create a list of randomly-selected enemies from the tuple.</p>

<hr>

<p>There is a vast amount of duplication in <code>commands</code>, and it contains logic (what the <code>Player</code>s can do) that <em>should be stored with the <code>Player</code></em>. For example, if each <code>Player</code> subclass had a dictionary of valid commands (each implemented as an instance method):</p>

<pre><code>class Fighter(Player):

    ...

    def fight(self):
        super().fight()  # all players can fight

    def cast_spell(self):
        ...

    def generate_mana(self):
        ...

    COMMANDS = {
        'f': ('fight', fight),
        's': ('spells', cast_spell),
        'm': ('generate mana', generate_mana),
    }
</code></pre>

<p>Then <code>commands</code> starts:</p>

<pre><code># Show the valid commands
for command, action in hero.COMMANDS.items():
    print('press {} to {}'.format(command, action[0]))
print('press Enter to skip')

# Get validated user input
while True:
    command = input("~~~~~~~~~Press a key to Continue.~~~~~~~")
    if command and command not in hero.COMMANDS:
        print('Not a valid command')
        continue
    break

# Run the appropriate action
if command:
    hero.COMMANDS[command][1]()  # call the method 
</code></pre>

<p>See <a href="https://stackoverflow.com/q/23294658/3001761">Asking the user for input until they give a valid response</a> for more on input validation. You can extend this to define the appropriate parameters for each action, etc..</p>
    </div>