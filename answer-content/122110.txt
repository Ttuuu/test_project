<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3><code>StringBuilder</code></h3>

<blockquote>
<pre><code>            str = "" + ch;
</code></pre>
</blockquote>

<p>If you find yourself doing a lot of string addition, consider using a <code>StringBuilder</code> (or <code>StringBuffer</code> if you need thread support).  </p>

<pre><code>            builder.setLength(0);
            builder.append(ch);
</code></pre>

<p>This saves creating a new string object with each new character.  </p>

<blockquote>
<pre><code>                if (dictionary.containsKey(str + ch)) {
                    str = str + ch;
                } else {
</code></pre>
</blockquote>

<p>becomes </p>

<pre><code>                builder.append(ch);
                if (!dictionary.containsKey(builder.toString())) {
</code></pre>

<p>which simplifies things.  </p>

<h3>Use bitwise operations</h3>

<blockquote>
<pre><code>                    String s12 = to12bit(dictionary.get(str));

                    // Store the 12 bits into an array and then write it to the
                    // output file
                    if (onleft) {
                        buffer[0] = (byte) Integer.parseInt(
                                s12.substring(0, 8), 2);
                        buffer[1] = (byte) Integer.parseInt(
                                s12.substring(8, 12) + "0000", 2);
                    } else {
                        buffer[1] += (byte) Integer.parseInt(
                                s12.substring(0, 4), 2);
                        buffer[2] = (byte) Integer.parseInt(
                                s12.substring(4, 12), 2);
                        for (int b = 0; b &lt; buffer.length; b++) {
                            out.writeByte(buffer[b]);
                            buffer[b] = 0;
                        }
                    }
</code></pre>
</blockquote>

<p>This is clever but more complicated than is necessary.  </p>

<pre><code>                    int compressed = dictionary.get(str));

                    // Store the 12 bits into an array and then write it to the
                    // output file
                    if (onleft) {
                        buffer[0] = (byte) (compressed &amp; 0xff);
</code></pre>

<p>This only includes the last eight bits of the compressed valued.  Note that 0xff is the same as binary 11111111.  So you AND <code>compressed</code> and 0xff which leaves all of the last eight bits that were set still set.  But it zeroes out bits outside that area and leaves cleared those bits that were already cleared.  </p>

<pre><code>                        buffer[1] = (byte) ((compressed &gt;&gt; 8) &lt;&lt; 4);
</code></pre>

<p>We right shift eight bits, which clears those bits (what we put in <code>buffer[0]</code>).  Then we left shift four bits, which has the same effect as appending <code>"0000"</code> does in the original code.  This relies on <code>compressed</code> never being greater than or equal to 4096.  Otherwise the conversion to <code>byte</code> will drop some of the information.  </p>

<pre><code>                    } else {
                        buffer[1] += (byte) (compressed &amp; 0xf);
</code></pre>

<p>This masks out everything but the last four bits.  </p>

<pre><code>                        buffer[2] = (byte) (compressed &gt;&gt; 4);
</code></pre>

<p>Remove the four bits that we put in <code>buffer[1]</code> and put the rest in <code>buffer[2]</code>.  Again, this relies on <code>compressed</code> never being greater than or equal to 4096.  Otherwise the conversion to <code>byte</code> will drop some of the information.  </p>

<pre><code>                        for (int b = 0; b &lt; buffer.length; b++) {
                            out.writeByte(buffer[b]);
                            buffer[b] = 0;
                        }
                    }
</code></pre>

<p>By using the bitwise operators, we save the entire <code>to12bit</code> method.  We also avoid creating a <code>String</code> just so that we could use <code>substring</code>.  </p>

<p>You also may want to put this into its own method.  Then when you do it again in the <code>catch</code> block, you could just call the method.  </p>

<h3>Decompression</h3>

<p>Undoing this is more complicated.  Because <code>byte</code> is a signed type in Java, we have to promote it to <code>int</code> and mask off the excess bits to make the shifts work right.  E.g. <code>((int) b &amp; 255)</code> will produce the correct eight bit pattern for a <code>byte b</code>.  </p>

<pre><code>public int getvalue(byte b1, byte b2, boolean onleft) {
    int value;

    if (onleft) {
        value = ((int) b1 &amp; 0xFF) + ((((int) b2 &amp; 0xFF) &gt;&gt; 4) &lt;&lt; 8);
    } else {
        value = ((int) b1 &amp; 0xF) + (((int) b2 &amp; 0xFF) &lt;&lt; 4);
    }

    return value;
}
</code></pre>

<p>With the second byte, we rotate right four places to clear the four least significant bits and then left eight to align it properly with the other byte.  Then for the other half, we can just mask off all but the four least significant bits and add to the third byte shifted four places to the left.  </p>

<p>We have to cast to <code>int</code> and mask each value so that it doesn't get treated as a negative number.  </p>

<p>I'm not crazy about the name <code>getvalue</code>, which I would expect to be a getter.  But I kept it for consistency's sake.  Consider changing to something like <code>toIntValue</code> instead, which better reflects what it actually does.  </p>

<h3><code>HashMap</code> tracks its own size</h3>

<blockquote>
<pre><code>                        dictionary.put(str + ch, dictSize++);
</code></pre>
</blockquote>

<p>You don't need a <code>dictSize</code> variable.  You could just say </p>

<pre><code>                        dictionary.put(str + ch, dictionary.size());
</code></pre>

<p>This saves managing the <code>dictSize</code> variable.  </p>

<h3><code>catch</code> <code>EOFException</code></h3>

<p>Your code runs forever until it encounters an <code>IOException</code>.  Then it assumes that the <code>IOException</code> is an <code>EOFException</code> and writes out whatever is waiting to be written.  Instead, consider catching just the <code>EOFException</code>.  Then an <code>IOException</code> will crash the program.  Which is what an <code>IOException</code> thrown in the <code>catch</code> block would do anyway.  </p>

<h3>Use buffered I/O</h3>

<p>You are using <code>RandomAccessFile</code>, which works but is unnecessary.  You only do sequential operations.  You don't use the random access capability at all.  You could just use a buffered I/O method.  </p>

<p>You could even write your own wrapper for it.  Then you could say something like </p>

<pre><code>            out.write12bits(compressed);
</code></pre>

<p>and let your wrapper handle the details.  </p>

<h3>Use descriptive variable names if you can</h3>

<p>Some variables don't have descriptive names that make sense, so we just call them <code>string</code> or something like that.  But some do.  </p>

<blockquote>
<pre><code>            String str = input.nextLine();
</code></pre>
</blockquote>

<p>In this case, the <code>String</code> represents a file name.  So call it that.  </p>

<pre><code>            String filename = input.nextLine();
</code></pre>

<h3>Use <code>try</code> with resources</h3>

<blockquote>
<pre><code>        try {
            LZWCompression lzw = new LZWCompression();

            Scanner input = new Scanner(System.in);

            System.out.println("Enter the name of your (input.txt) file.");

            String str = input.nextLine();

            File file = new File(str);

            Scanner fileScanner = new Scanner(file);

            String line = "";

            while (fileScanner.hasNext()) {
                line = fileScanner.nextLine();
                System.out.println("Contents of your file being compressed: \n"
                        + line);
            }
            lzw.compress(str);
            System.out.println("\nCompression of your file is complete!");
            System.out.println("Your new file is named: " + str.concat(".lzw"));
</code></pre>
</blockquote>

<p>But the early part of this can't throw a <code>FileNotFoundException</code>, so it doesn't need to be in the <code>try</code> block.  </p>

<pre><code>        LZWCompression lzw = new LZWCompression();

        Scanner input = new Scanner(System.in);
        System.out.println("Enter the name of your (input.txt) file.");
        String filename = input.nextLine();

        try (Scanner = new Scanner(new File(filename))) {


            while (fileScanner.hasNext()) {
                String line = fileScanner.nextLine();
                System.out.println("Contents of your file being compressed: \n"
                        + line);
            }

            lzw.compress(filename);

            System.out.println("\nCompression of your file is complete!");
            System.out.println("Your new file is named: " + filename.concat(".lzw"));
</code></pre>

<p>Now the <code>fileScanner</code> will be managed by the <code>try</code> statement.  </p>

<h3>Confirm what we should know</h3>

<blockquote>
<pre><code>        } catch (FileNotFoundException e) {
            System.out.println("File was not found!");
        }
</code></pre>
</blockquote>

<p>Which file was not found?  </p>

<pre><code>        } catch (FileNotFoundException e) {
            System.out.println("File '" + filename + "' was not found!");
        }
</code></pre>

<p>Now we know what the program thought it wanted to find.  </p>
    </div>