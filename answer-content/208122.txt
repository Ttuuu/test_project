<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>By using a guard condition regarding <code>CalEvents</code> being <code>null</code> you can save one level of indentation like so  </p>

<pre><code>private List&lt;eventAndColor&gt; GetEventosToPopulateCalendar()
{
    // A List with only the days that have events
    List&lt;Eventos&gt; calEvents = eventDao.Select(FromEventos.DistinctDate);

    if (calEvents == null || calEvents.Count == 0)
    {
        return new List&lt;eventAndColor&gt;();
    }

    // A List of a struct with Date + color of event
    List&lt;eventAndColor&gt; events = new List&lt;eventAndColor&gt;();
</code></pre>

<p>Maybe you have noticed that the former <code>CalEvents</code> are now named <code>calEvents</code> because method-level variables should be named using <code>camlCase</code> casing. You can read more about it in the <a href="https://msdn.microsoft.com/en-us/library/ms229002.aspx" rel="nofollow noreferrer">.NET Naming Guidelines</a>.</p>

<p>The inner loop can be replaced with some <code>Linq</code>-magic like so  </p>

<pre><code>if (eventsInDay.Any(day =&gt; day.Cor != calEvent.Cor))
{
    events.Add(new eventAndColor(calEvent.DataDocumento, MULTIPLE_EVENTS)); // Add a tag of multiple event colors
}
else
{
    events.Add(new eventAndColor(calEvent.DataDocumento, calEvent.Cor)); // Add a tag of an event color
}
</code></pre>

<p>or maybe better like so  </p>

<pre><code>string desiredColor = calEvent.Cor
if (eventsInDay.Any(day =&gt; day.Cor != calEvent.Cor))
{
    desiredColor = MULTIPLE_EVENTS; // Add a tag of multiple event colors
}
events.Add(new eventAndColor(calEvent.DataDocumento, desiredColor)); // Add a tag of an event color
</code></pre>

<p>Putting all together would result in  </p>

<pre><code>private List&lt;eventAndColor&gt; GetEventosToPopulateCalendar()
{
    // A List with only the days that have events
    List&lt;Eventos&gt; calEvents = eventDao.Select(FromEventos.DistinctDate);

    if (calEvents == null || calEvents.Count == 0)
    {
        return new List&lt;eventAndColor&gt;();
    }

    // A List of a struct with Date + color of event
    List&lt;eventAndColor&gt; events = new List&lt;eventAndColor&gt;();
    foreach (var calEvent in calEvents)
    {
        var eventsInDay = eventDao.Select(FromEventos.WhereDay, calEvent.DataDocumento); // A List with all events on that day                 

        string desiredColor = calEvent.Cor
        if (eventsInDay.Any(day =&gt; day.Cor != calEvent.Cor))
        {
            desiredColor = MULTIPLE_EVENTS; // Add a tag of multiple event colors
        }
        events.Add(new eventAndColor(calEvent.DataDocumento, desiredColor)); // Add a tag of an event color
    }
    return events;
}
</code></pre>

<p>Some more words regarding your code and coding-style:  </p>

<ul>
<li>Because most developers are coding using english as a language to name things you should do this as well. In this way if some other (non native speaker of your language) developer should maintain your code it will be much easier. </li>
<li>Because most developers expect a specific style, which mostly is based on the .NET Naming Guidelines you should stick to that style as well. E.g <code>eventAndColor</code> should be named using <code>PascalCase</code> casing. </li>
<li>Don't omit braces <code>{}</code> althought they might be optional.</li>
</ul>
    </div>