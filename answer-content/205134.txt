<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>1) Avoid using <code>var</code> if you want your code to be more readable.</p>

<p>2) Both <code>CompareNum()</code> and <code>PlayGame()</code> methods should be defined within the <code>Game</code> class as they rely on a game (which means they don't need to have a game as argument anymore)</p>

<p>3) In the <code>CompareNum()</code> method </p>

<pre><code>Console.WriteLine("User num is too Low try again");
Console.WriteLine();
</code></pre>

<p>can become</p>

<pre><code>Console.WriteLine("User num is too Low try again\n");
</code></pre>

<p>4) In the <code>GenerateComNum()</code> method you can shorten</p>

<pre><code>var comNum = rnd.Next(1, 101);
return comNum;
</code></pre>

<p>to</p>

<pre><code>return rnd.Next(1, 101);
</code></pre>

<p>and you should avoid creating a <code>new Random()</code> every time you have to generate a random number because it could create unexpected results. You should make a <code>static Random rnd = new Random();</code> and only use <code>rnd.Next(x, y)</code> whenever you need a random number.</p>

<p>5) In the <code>PlayGame()</code> method you shouldn't have a <code>do ... while</code> loop because if the user chooses to have 0 attempts then he should lose instantly and that's not what will happen with a <code>do ... while</code> loop </p>

<p>6) The usual order for accessors is <code>get</code> then <code>set</code>, you did the opposite : <code>public int attemp { set; get; } = 0;</code> it'll work in both orders, it's just to make things more readable.</p>

<p>7) It's realy unlikely to happen but if the user would win during realy long time, your application could have a <code>System.StackOverflowException</code> because you are calling <code>PlayGame()</code> while it is already running when the user wins which will cause the current one running to wait for the new one to finish and those will stack up and take more and more memory, this is recursion, sorry and check internet if my explanations aren't clear.</p>

<p>To increase the range of possible numbers being generated, you can use a variable to determine what the max generated number is and put this variable as second argument instead of <code>101</code> when you do <code>rnd.Next(1, 101);</code></p>
    </div>