<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Firstly, the usage example at the end doesn't really make sense. You're passing 5 arguments to the function, but it seems to only take 1 <code>options</code> object.</p>

<p>Structurally, it seems overwrought to create the <code>animation</code> object. Everything can be handled with closures, as far as I can tell. Somewhat in the same vein, I see no reason for the <code>$</code> and <code>_</code> prefixes on half the stuff.</p>

<p>Speaking of naming, the <code>x</code> and <code>y</code> options should probably be called <code>from</code> and <code>to</code> or something. It took me a few moments to realize that's what they are - not coordinates or something similar.</p>

<p>Your setup also seems conflicted, or at any rate complicated. You're using frame count, FPS, <em>and</em> duration (time) to track things, though these may contradict each other. You can't really dictate FPS; FPS is a measured value. If the browser is busy, FPS will drop, meaning each iteration will take longer. But you're calculating animation progression based on <code>_iteration</code> versus <code>duration</code> (which has since been redefined as the target number of frames, not time).</p>

<p>So I can say "I want 600,000 FPS!" but I won't get that kind of performance (<code>requestAnimationFrame</code> aims for 30 to 60'ish FPS, usually). But I can <em>also</em> say I want a duration (time-wise) of 1 second, yet the animation will still run 600,000 iterations. However this will <em>not</em> complete in 1 second. </p>

<p>It makes slightly more sense if you want <em>low</em> FPS, since your function just skips some <code>onProgress</code> calls. But low FPS is usually not considered a thing to strive for, really. In case you do want it, it might be easier to use <code>setTimeout</code> instead of <code>requestAnimationFrame</code> and ignoring updates.</p>

<p>Typically, animations have a set duration (in time), and FPS is whatever it is. You can't control it anyway. And so counting frames usually isn't very useful. Instead you do:</p>

<pre><code>animationProgress = (now - startTime) / totalDuration
</code></pre>

<p>And you clamp that to 0...1. That's the input to the easing function.</p>

<p>Lastly, there's no need to call <code>cancelAnimationFrame</code> unless you've already called <code>requestAnimationFrame</code> and want to undo that before the next repaint.</p>

<p>Here's a pretty basic implementation:</p>

<p></p><div class="snippet" data-lang="js" data-hide="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>function animate(options) {
  options = options || {};
  
  // defaults
  var duration = options.duration || 1000,
      ease = options.easing || function (a) { return a }, // basic linear easing
      onProgress = options.onProgress || function () {},
      onComplete = options.onComplete || function () {},
      from = options.from || {},
      to = options.to || {};
  
  // runtime variables
  var startTime = Date.now();
  
  function update() {
    var deltaTime = Date.now() - startTime,
        progress = Math.min(deltaTime / duration, 1),
        factor = ease(progress),
        values = {},
        property;
    
    for(property in from) {
      if(from.hasOwnProperty(property) &amp;&amp; to.hasOwnProperty(property)) {
        values[property] = from[property] + (to[property] - from[property]) * factor;
      }
    }
    
    onProgress(values);
    
    if(progress === 1) {
      onComplete(deltaTime);
    } else {
      requestAnimationFrame(update);
    }
  }
  
  requestAnimationFrame(update);
}

// ==============================

// Example
animate({
  from: { a: 0 },
  to:   { a: 100 },
  duration: 500,
  onProgress: function (values) {
    document.getElementsByTagName("pre")[0].innerHTML += values.a + "\n";
  },
  onComplete: function (actualDuration, averageFps) {
    document.getElementsByTagName("pre")[0].innerHTML += "Done in " + actualDuration + "ms";
  }
});</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;pre&gt;&lt;/pre&gt;</code></pre>
</div>
</div>


<p>I've opted to pass the easing function as an option, rather than a name. Thus you can supply your own easing function on the fly, or pass in a predefined function.</p>
    </div>