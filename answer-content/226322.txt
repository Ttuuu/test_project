<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is not a comparative review.</p>

<p><strong>Self Documenting Code</strong><br>
There is a standard header file that supplies <a href="https://en.cppreference.com/w/cpp/utility/program/EXIT_status" rel="noreferrer">constant values for exiting</a> <code>main()</code>. For both C and C++ the standard constants for exiting are <code>EXIT_SUCCESS</code> and <code>EXIT_FAILURE</code>. The C++ header for this is</p>

<pre><code>#include &lt;cstdlib&gt;

int main(int argc, char* argv[])
{
    if (argc &lt; 2)
    {
        std::cerr &lt;&lt; "Error: missing filename\n";
        return EXIT_FAILURE;
    }

    ObjectCollection elephants;
    try
    {
        elephants = readFromFile(argv[1]);
        std::cout &lt;&lt; calculateLowestCostOfWork(elephants);
    }
    catch (std::exception const&amp; ex)
    {
        std::cerr &lt;&lt; "Error: " &lt;&lt; ex.what() &lt;&lt; "\n";
        return EXIT_FAILURE;
    }
    catch (...)
    {
        std::cerr &lt;&lt; "Error unknown \n";
        return EXIT_FAILURE;
    }
    return EXIT_SUCCESS;
}
</code></pre>

<p><strong>Vertical Spacing</strong><br>
The code might be easier to read and maintain if there was some vertical spacing between logic blocks in the functions.</p>

<p><strong>Numeric Constants On Only One Line</strong><br>
The code might be easier to read and maintain each declaration for a numeric constant was on a separate line.</p>

<pre><code>int constexpr MaxWeight = 6500;
int constexpr MinVertexes = 2;
int constexpr MaxVertexes = 1000000;
</code></pre>

<p><strong>Then and Else Clauses</strong><br>
Plan for future maintenance. Quite often updating code requires the insertion of an additional statement in a <code>then</code> or <code>else</code> clause in an <code>if</code> statement. It is generally a good practice to make all of the if statements have compound statements to ease future modification. Separating the <code>if</code> from the action also makes the code a little more readable.</p>

<blockquote>
<pre><code>   if (number - 1 &gt; amountOfObjects) throw std::logic_error("Too high index in order");
</code></pre>
</blockquote>

<pre><code>    if (number - 1 &gt; amountOfObjects)
    {
        throw std::logic_error("Too high index in order");
    }
</code></pre>

<p><strong>Variable Names</strong><br>
In the input functions the code might be more understandable if variables used indicated what was being read in, the variable name <code>number</code> might be a little too general. We know it is a number because it is declared as int. In the function <code>int readWeightsAndSetMinWeight()</code> perhaps <code>weight</code> could be used instead of <code>number</code>?</p>

<p><strong>Commented Out Code</strong><br>
When code gets moved into a function, there is generally no reason to leave the code in comments in the original place. It can be confusing to someone that has to maintain the code.</p>
    </div>