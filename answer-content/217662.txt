<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I don't know why you would want to shorten your code. It is already just 73 lines long (including the final blank line). Apart from that, "short" does not automatically mean "good". Maybe <em>concise</em> would be a better fit here, which I would interpret as "the code does what it should do without clutter". IMHO your code is very concise and readable at the moment and that should not be sacrificed to gain a few lines/bytes. We're not at Code Golf here.</p>

<p>Nevertheless, there are a few things you can improve easily.</p>

<h2>Documentation</h2>

<p>Python's official Style Guide has <a href="https://www.python.org/dev/peps/pep-0008/#documentation-strings" rel="nofollow noreferrer">recommendations</a> on how to comment code and functions. Function <em>docstrings</em> should always be defined inside the function body and be surrounded by triple quotes <code>"""..."""</code>. Applying this to your code it would look something like</p>

<pre class="lang-py prettyprint-override"><code>def get_input(response, values):
    """make sure the input is in the choices"""
    # your code here
</code></pre>

<p>This will also allow Python's built-in <code>help(...)</code> function and most IDEs to pick up the documentation.</p>

<h2>Avoid globals</h2>

<p>You should always strive to avoid global variables whenever possible. E.g. in your code <code>colors</code> is not used outside of <code>main()</code> and should therefore be defined there. <code>drawing</code> does not seem to be used anywhere, so you might be able to drop it completely. <code>LINE1</code> and <code>LINE2</code> are two valid uses for globals. My only recommendation here would be to put them on two separate lines. Oh, and strictly speaking your comment on them is "wrong" since they are not used as <em>variables</em> but as <em>constants</em>, which is also supported by the <code>ALL_CAPS_NAME</code> (the Style Guide also says something on <a href="https://www.python.org/dev/peps/pep-0008/#constants" rel="nofollow noreferrer">that</a>).</p>

<h2>Variable names</h2>

<p>There is this piece of code which I find kind of amusing:</p>

<pre class="lang-py prettyprint-override"><code>#rt = right turn
rt = random.uniform(100, 300)
</code></pre>

<p>Why not just call the variable <code>right_turn</code> or <code>right_turn_angle</code> right away then? The same reasoning would apply to <code>fd</code>, but you didn't care to write the comment there and left it as an exercise to the person looking at your code to find out that it actually stands for <code>forward</code>. You could also rename <code>size</code> to <code>mandala_scale</code> or so and then drop that <code>#universal variables</code> altogether since it does not really help to understand the code better. At least at the moment you could even get rid of <code>size</code> completely since its only use is to be multiplied by <code>75</code> on the next line and it's never used after that.</p>

<h2>Other aspects</h2>

<p>There is a lot of repetition when it comes to the list of available colors. Including the print, you define them four times. If you ever decide to add, change or remove a color from that list, there would be four places that change would need to be applied to. I would recommend to define them in one place, and reuse the list wherever it is needed.</p>

<pre class="lang-py prettyprint-override"><code># ...

colors = []
all_colors = ("darkred", "red", "yellow", "darkgreen", "green", "lightgreen", "darkblue", "blue", "purple")
if answer == "random":
    colors.extend(all_colors)
    right_turn = random.uniform(100, 300)

elif answer == "custom":
    all_colors_string = ", ".join(all_colors)[:-2] # -2 to trim of the trailing space and ,
    print(LINE2 + "\nYou can choose any colors from this list for your Mandala: \n" + all_colors_string)
    color1 = get_input("What is the first color? ", all_colors)
    color2 = get_input("What is the second color? ", all_colors)

# ...
</code></pre>

<p>In the transformation the set notation (<code>{...}</code>) got lost, but I think your application will not really suffer from the (minuscule) performance impact because a tuple is used instead of a set.</p>

<p>Another handy feature I would like to point out to you is string formatting. So what's that? Let's look at an example from your code:</p>

<pre class="lang-py prettyprint-override"><code>print("[...] or have the computer generate a random one,", name, ".\n" + LINE2)
</code></pre>

<p>Here you are using Python's implicit behavior to print the elements of a tuple separated by whitespace<sup>1</sup>. That leads to the following output (minus the annotation of course):</p>

<pre class="lang-none prettyprint-override"><code>[...] or have the computer generate a random one, Alex .
~~~~~~~~~~~~~~~~~~~~~~~~
                                       does look off ~^
</code></pre>

<p>Note the unwanted whitespace between the name and the dot?<br>
But we can do better! Python has very powerful string formatting capabilities (<a href="https://docs.python.org/3/library/stdtypes.html#str.format" rel="nofollow noreferrer">doc</a>), and since you have tagged your question as Python 3, you can likely use the new f-string syntax (helpful <a href="https://realpython.com/python-f-strings/#f-strings-a-new-and-improved-way-to-format-strings-in-python" rel="nofollow noreferrer">blog post</a> comparing all the different ways, <a href="https://www.python.org/dev/peps/pep-0498/#rationale" rel="nofollow noreferrer">specification (PEP 498)</a>).
Rewriting the code from above using an f-string would lead to:</p>

<pre class="lang-py prettyprint-override"><code>print(f"[...] or have the computer generate a random one, {name}.\n" + LINE2)
</code></pre>

<p>So <code>f"... {name}"</code> basically generates a string containing the value of <code>name</code> right at the spot we the curly braces and the name of the variable where.<sup>2</sup> For the sake of completeness that generates the following output:</p>

<pre class="lang-none prettyprint-override"><code>[...] or have the computer generate a random one, Alex.
~~~~~~~~~~~~~~~~~~~~~~~~
</code></pre>

<p>As a final note, you could/should also add </p>

<pre class="lang-py prettyprint-override"><code>if __name__ == "__main__":
    main()
</code></pre>

<p>(<a href="https://stackoverflow.com/a/419185">explanation</a>) to highlight what part of the code is actually run if this file is used as Python script.</p>

<hr>

<p><strong>Bonus</strong>: by removing unnecessary globals and comments your script is actually even <del>shorter</del> more concise now, although that was not the main goal of what I was trying to tell you.</p>

<hr>

<p><sup>1</sup> Depending on your Python experience you might wonder where there is a tuple in that line or you will nod silently. In the first case I would recommend reading <a href="https://stackoverflow.com/q/919680">this SO post</a> on how Python deals with functions that have a variable number of arguments (often <em>varargs</em> for short), and then to have a look at how the print function is defined in the documentation.<br>
<sup>2</sup> In fact, f-strings are way more powerful than this, but you should refer to the resources linked earlier if you want to know more.</p>
    </div>