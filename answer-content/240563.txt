<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are some suggestions for how you might improve your code.</p>

<h2>Use the required <code>#include</code>s</h2>

<p>The code uses <code>std::string</code> which means that it should <code>#include &lt;string&gt;</code>.  It was not difficult to infer, but it helps reviewers if the code is complete.</p>

<h2>Know your tools</h2>

<p>The CMake file starts with these lines:</p>

<pre><code>cmake_minimum_required(VERSION 3.0)
project(cpp-personnummer)
set(CMAKE_CXX_STANDARD 11)
</code></pre>

<p>However, that's a problem because the <code>CMAKE_CXX_STANDARD</code> wasn't intruduced until CMake version 3.1.  I'd recommend changing the <code>cmake_minimum_required</code> to 3.1.</p>

<h2>Don't link with unnecesary libraries</h2>

<p>The CMake file currently contains this line:</p>

<pre><code>target_link_libraries(Personnummer -lpthread)
</code></pre>

<p>First, the correct way to do this in CMake would be like this instead:</p>

<pre><code>find_package(Threads)
target_link_libraries(Personnummer ${CMAKE_THREAD_LIBS_INIT})
</code></pre>

<p>Second, and most importantly, it doesn't need to be done at all since nothing in there requires threads.</p>

<h2>Use standard classes where appropriate</h2>

<p>Much of the date handling from the <code>Personnummer</code> class could be done more simply by using the <code>std::chrono::year_month_day</code> class.  For example, <code>valid_date</code> could be eliminated entirely in favor of <a href="https://en.cppreference.com/w/cpp/chrono/year_month_day/ok" rel="nofollow noreferrer">year_month_day.ok()</a> if your compiler supports C++20.</p>

<h2>Use CMake's test facility</h2>

<p>CMake has test facilities built in.  I'd add the option to either build tests or not and in the top level <code>CMakeLists.txt</code> add this:</p>

<pre><code>option(WITH_TEST "Build the test suite" OFF)
if (WITH_TEST)
    enable_testing()
    add_subdirectory(test)
endif()
</code></pre>

<p>Now if you invoke CMake with <code>cmake -DWITH_TEST=1 ..</code> testing will be enabled.  If you then do <code>make</code> and then <code>make test</code>, you will invoke your test(s).  Note here that I've written <code>add_subdirectory</code>.  See the next suggestion for more on that.</p>

<h2>Use multiple <code>CMakeLists.txt</code> files</h2>

<p>Instead of a single <code>CMakeLists.txt</code> file, it's easier to maintain if you create one per directory.  So the top level would look like this:</p>

<pre><code>cmake_minimum_required(VERSION 3.1)
project(Personnummer)
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra -pedantic")
option(WITH_TEST "Build the test suite" OFF)
add_subdirectory(src)

if (WITH_TEST)
    enable_testing()
    add_subdirectory(test)
endif()
</code></pre>

<p>Now the one in <code>src</code> looks like this:</p>

<pre><code>cmake_minimum_required(VERSION 3.1)
add_library(Personnummer "personnummer.cpp")
</code></pre>

<p>And the one in <code>test</code> looks like this:</p>

<pre><code>cmake_minimum_required(VERSION 3.1)
include_directories(${CMAKE_HOME_DIRECTORY}/src)
add_executable(unittest "unittest.cpp")
add_test(PersonnummerTest unittest)
target_link_libraries(unittest Personnummer)
</code></pre>

<p>Note that I've added the <code>include_directories</code> to point to the <code>src</code> directory.  More on that in the next suggestion.</p>

<h2>Don't hardcode project directory structures</h2>

<p>In the current test program we have this line:</p>

<pre><code>#include "../src/personnummer.hpp"
</code></pre>

<p>This buries a project configuration detail inside source code.  I recommend keeping those kinds of details out of the individual source files and instead point the tools (compiler, linker, etc.) to the appropriate directory instead.  That's why the <code>include_directories</code> was added to the <code>CMakeLists.txt</code> file for the <code>test</code> directory.  This way, if you decided to rename the <code>src</code> directory or move it elsewhere, the change could easily be made in just the CMake files instead of having to hunt through every source code file.  When there only a few, as with this small project, it might not seem like it makes much difference, but when you start working with large projects with thousands of files, following this advice will save you a great deal of time and frustration.</p>

<h2>Prefer iteration to recursion</h2>

<p>The current definition of <code>collect_digits</code> is this recursive solution:</p>

<pre><code>void collect_digits(std::vector&lt;int&gt; &amp;digits, int num) {
  if (num &gt; 9)
    collect_digits(digits, num / 10);

  digits.push_back(num % 10);
}
</code></pre>

<p>It's not faulty, but it isn't as efficient as it could be.  Generally, recursion is less efficient than iteration.  The reason is that pushing the the return address and both arguments onto the stack takes a bit more time and memory than simply doing this:</p>

<pre><code>void collect_digits(std::vector&lt;int&gt; &amp;digits, int num) {
  while ( ; num &gt; 9; num /= 10) {
    digits.push_back(num % 10);
  }
  digits.push_back(num);
}
</code></pre>

<p>Better though, see the next suggestion.</p>

<h2>Rethink the interface</h2>

<p>There are a number of specialized functions such as <code>collect_digits_pad_zero</code> that probably don't need to be part of the interface, or maybe shouldn't exist at all.  For example, <code>checksum</code> could be much simplified and wouldn't require either <code>collect_digits_pad_zero</code> or <code>collect_digits</code>.  Here's how I'd write it:</p>

<pre><code>int luhn(std::string::iterator begin, std::string::iterator end) {
    int sum{0};
    for (bool even{true}; begin != end; ++begin, even ^= true) {
        int digit = *begin - '0';
        if (even) {
            if ((digit *= 2) &gt; 9) {
                digit -= 9;
            }
        } 
        if ((sum += digit) &gt; 9) {
            sum -= 10;
        }
    }
    return sum;
}

int Personnummer::checksum() const {
    using namespace std;
    stringstream ss;
    ss.fill('0');
    ss &lt;&lt; setw(2)
       &lt;&lt; date.tm_year % 100
       &lt;&lt; setw(2)
       &lt;&lt; date.tm_mon
       &lt;&lt; setw(2)
       &lt;&lt; date.tm_mday
       &lt;&lt; setw(3) &lt;&lt; number;
    auto str = ss.str();
    return 10 - luhn(str.begin(), str.end());
}
</code></pre>

<p>Now we have two compact and useful functions.  Note also that <code>checksum</code> is a member function rather than a standalone function.</p>

<h2>Use <code>const</code> where appropriate</h2>

<p>The functions <code>is_valid_luhn</code> and <code>valid</code> and <code>is_valid_date</code> are all non-modifying functions.  That is, none of them modify the underlying <code>Personnummer</code> object, so all of them should be declared <code>const</code> as with the <code>checksum</code> function above.</p>

<h2>Prefer <code>class</code> to <code>struct</code></h2>

<p>If there is not a compelling that <code>Personnummer</code> must have all of its data and functions public, it should be a class instead of a struct, and <code>from_string</code> should be a member function.</p>

<h2>Don't create pointless arrays</h2>

<p>The <code>Personnummer</code> object definition currently includes this:</p>

<pre><code>char divider[1];
</code></pre>

<p>That should just be this:</p>

<pre><code>char divider;
</code></pre>

<h2>Use "range <code>for</code>" to simplify your code</h2>

<p>The test code currently has these kinds of loops:</p>

<pre><code>for (int i = 0; i &lt; valid.size(); i++) {
  std::stringstream case_title;
  case_title &lt;&lt; "Testing VALID: " &lt;&lt; valid[i];

  SECTION(case_title.str()) {
      REQUIRE(p.from_string(valid[i]));
      REQUIRE(p.valid());
  }
}
</code></pre>

<p>First, you can use a range <code>for</code> to simplify, and second, there's no need for a <code>std::stringstream</code> here:</p>

<pre><code>for (const auto&amp; test_string : valid) {
  SECTION({"Testing VALID" + test_string}) {
    REQUIRE(p.from_string(test_string));
    REQUIRE(p.valid());
  }
}
</code></pre>

<p>This also assumes that the <code>from_string</code> function has been made a member function, as mentioned earlier.</p>

<h2>Use classes to simplify your code</h2>

<p>The test cases for "Valid date" use <code>std::vector&lt;std::vector&lt;int&gt;&gt;</code> as the collection of test cases.  I'd suggest using a class there instead:</p>

<pre><code>struct FakeDate {
  int year, month, day;
  friend std::ostream&amp; operator&lt;&lt;(std::ostream&amp; out, const FakeDate&amp; fd) {
      return out &lt;&lt; "Y=" &lt;&lt; fd.year &lt;&lt; ", M=" &lt;&lt; fd.month &lt;&lt; ", D=" &lt;&lt; fd.day;
  }
};
</code></pre>

<p>Now the collections can be <code>std::vector&lt;FakeDate&gt;</code>.  Using the same range <code>for</code> as in the previous suggestion, we have:</p>

<pre><code>for (const auto&amp; test_case : valid_dates) {
  std::stringstream case_title;
  case_title &lt;&lt; "Testing VALID: " &lt;&lt; test_case;

  SECTION(case_title.str()) {
    REQUIRE(
        Personnummer::valid_date(test_case.year, test_case.month, test_case.day));
  }
}
</code></pre>

<h2>Be careful with signed vs. unsigned</h2>

<p>The current <code>valid_date</code> code takes <code>int</code>s for the month, day and year.  Is it intended that negative values for the year do not make the date invalid?  If not, I'd suggest either checking for negative values or using only unsigned integers for each.</p>
    </div>