<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'll answer your question on the best practice for checking multiple cells in a <code>Worksheet_Change</code> event, but I have some other comments that will hopefully help as well.</p>

<ul>
<li>The "best practice" I have used in <code>Worksheet_Change</code> events is to use the <code>Intersect</code> function. If you just make this a habit, then your code will be consistent (even if you're only checking a single cell). </li>
</ul>

<p>Because you have multiple cells on the worksheet to monitor, you want to compare the <code>Target</code> to a range. If the range is contiguous, then the check can be pretty straightforward:</p>

<pre><code>Private Sub Worksheet_Change(ByVal target As Range)
    If Not Intersect(target, Range("A1:D25") Is Nothing Then
        '--- respond to what changed here
    End If
End Sub
</code></pre>

<p>Your situation is a bit trickier because you have multiple, non-contiguous cells to check. So for this I would create a function (in a separate module) that creates a single range (<code>Union</code>) for all the cells you need to monitor. That function looks like this:</p>

<pre><code>Public Function DefinedWatchArea() As Range
    With Sheet1
        Set DefinedWatchArea = Union(.Range("$A$4"), _
                                     .Range("$A$7"), _
                                     .Range("$A$10"), _
                                     .Range("$B$21"), _
                                     .Range("$B$22"), _
                                     .Range("$B$23"), _
                                     .Range("$B$24"), _
                                     .Range("$B$25"), _
                                     .Range("$B$25"), _
                                     .Range("$B$33"), _
                                     .Range("$B$35"))
    End With
End Function
</code></pre>

<p>Note that the function must specify the worksheet, whereas the <code>Worksheet_Change</code> sub can rely on the currently active sheet to be the default (i.e. you don't need the dot <code>.</code> in front of <code>Range</code> in the <code>Worksheet_Change</code> sub). A function like this also makes it easier if you ever need to add or change the different cells to check.</p>

<p>So now the change event sub for you would be:</p>

<pre><code>Private Sub Worksheet_Change(ByVal target As Range)
    If Not Intersect(target, DefinedWatchArea()) Is Nothing Then
        If Not ValuesHaveChanged(target) Then
            UpdateStatsAndCharts
        End If
    End If
End Sub
</code></pre>

<ul>
<li>My next point is a guide for writing Excel event handlers such as this one. If the actions you need to take are anything more than a couple lines, it's best to create separate subs or functions in a separate code module. There are a couple reasons for this: the code is more easily re-used if it's in a code module, and it greatly simplifies the logic in the handler itself. Your <code>Worksheet_Change</code> sub is very long, and should be separated into multiple methods anyway.</li>
</ul>

<p>So let's look at my <code>ValuesHaveChanged</code> function. You need to check the value in several cells. Since it seemed that you may need to add more cells to check in the future, I've created a "value map" (in a <code>Dictionary</code>) that links the changed target cell address with a cell on your <code>overallStatus</code> worksheet. This map is created like this:</p>

<pre><code>Public Function DefinedValueMap() As Dictionary
    Dim map As Dictionary
    Set map = New Dictionary
    With map
        .Add "$A$4", Array(5, 1)
        .Add "$A$7", Array(8, 1)
        .Add "$A$10", Array(11, 1)
        .Add "$B$22", Array(34, 2)
        .Add "$B$35", Array(36, 2)
    End With
    Set DefinedValueMap = map
End Function
</code></pre>

<p>Of course, this makes it easier to change your map without changing the other logic since the map assignments are isolated in this single function.</p>

<p>Now back in the <code>Worksheet_Change</code> sub when you call <code>ValuesHaveChanged</code>, it calls this function:</p>

<pre><code>Public Function ValuesHaveChanged(ByRef target As Range) As Boolean
    Dim overallStats As Worksheet
    Set overallStats = ThisWorkbook.Worksheets("Overall Statistics")

    Dim valueMap As Dictionary
    Set valueMap = DefinedValueMap()

    If valueMap.Exists(target.Address) Then
        Dim rowcol As Variant
        rowcol = valueMap(target.Address)
        If target.Value &lt;&gt; overallStats.Cells(rowcol(0), rowcol(1)).Value Then
            ValuesHaveChanged = False
        End If
    End If
End Function
</code></pre>

<p>Creating a map in this fashion gets you out of a very long and confusing <code>If</code> statement or <code>Select Case</code> statement and keeps the logic cleaner and shorter.</p>

<ul>
<li>The same logic applies to the rest of your original code. Separate it out into logic sections that make it easier to follow. In my example of <code>UpdateStatsAndCharts</code>, I'm also creating another map for the statistics data and using that to assign some variables. </li>
</ul>

<p>I'm leaving the rest of the code for you to refactor along the same lines.</p>

<pre><code> Public Function DefinedStatMap() As Dictionary
    Dim map As Dictionary
    Set map = New Dictionary
    With map
        '--- array item is (individual, title, nvaluetext)
        .Add "ICSI Fert Rate", Array(3, "ICSI Scientist", "Total # ICSI'd")
        .Add "IVF FR/Sperm Processor", Array(4, "Sperm Processor", "Total # Mature Oocytes")
        .Add "Necrotic Rate/ICSI Embryologist", Array(3, "ICSI Scientist", "Total # Mature Oocytes")
        .Add "Necrotic Rate/Fert Assessor", Array(5, "Fert Assessor", "Total # Mature Oocytes")
        .Add "IVF FR/Fert Assessor", Array(5, "Fert Assessor", "Total # Mature Oocytes")
        ' add all the others ...
    End With
    Set DefinedStatMap = map
End Function

Public Sub UpdateStatsAndCharts()
    AppUpdates flagEnables:=False

    Dim statMap As Dictionary
    Set statMap = DefinedStatMap()

    Dim overallStats As Worksheet
    Set overallStats = ThisWorkbook.Worksheets("Overall Statistics")

    Dim individual As Long
    Dim title As String
    Dim nvaluetext As String
    With overallStats
        If statMap.Exists(.Cells(4, 1).Value) Then
            Dim itemData As Variant
            itemData = statMap(.Cells(4, 1).Value)
            individual = itemData(0)
            title = itemData(1)
            nvaluetext = itemData(2)
        Else
            '--- what do you do if the value is not defined??
            MsgBox "some kind of error!"
            Exit Sub
        End If

        'Repopulate the individuals lists on x-axis based on date
        Call PopulateDataPullOverallValidation

        '--- continue with the rest of your business logic...
    End With

    AppUpdates flagEnables:=True
End Sub

Public Sub AppUpdates(ByVal flagEnables As Boolean)
    With Application
        .EnableEvents = flagEnables
        .ScreenUpdating = flagEnables
    End With

    Dim overallStats As Worksheet
    Set overallStats = ThisWorkbook.Worksheets("Overall Statistics")
    If flagEnables Then
        overallStats.Protect "bivf"
    Else
        overallStats.Unprotect "bivf"
    End If
End Sub
</code></pre>
    </div>