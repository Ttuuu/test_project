<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I don't completely understand your code, which can be a problem when reviewing it, but I think I can get quite far. </p>

<p>Let me start with the two functions, <code>promote()</code> and <code>demote()</code>, that are at the center of your code. There are several things I notice straight away:</p>

<ul>
<li><p>Both functions are, apart from an <code>+</code> or <code>-</code> sign, identical. There's a well known principle in programming that says: <strong>Don't repeat yourself</strong> or <a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself" rel="nofollow noreferrer">DRY</a>. Your code is not dry, it is wet. You would only need one function where you use two.</p></li>
<li><p>There is a <code>require()</code> inside these functions. That is highly unusual in PHP. It means you drag everything that is in that script into the local scope of the function. That is a bad idea because when you're working on the script you might not be aware of the variables in the function, and visa versa.</p></li>
<li><p>You are preparing the queries, which is good for security, but then you insert the <code>$user</code> variable directly into the query string of the second query, and this variable is user input. That's a big security hole. You did it right in the first query. See: <a href="https://www.php.net/manual/en/security.database.sql-injection.php" rel="nofollow noreferrer">SQL_injection</a></p></li>
<li><p>You don't check the result of database operations. It could be that <code>prepare()</code> or <code>execute()</code> return <code>false</code>, in that case you cannot proceed.</p></li>
<li><p>The change of permission can be done with one simple query, see code below.</p></li>
</ul>

<p>From what I can understand of your code we would need two functions: One to read the value of <code>permissions</code> from the database, and the other to update the value <code>permissions</code>. I'm not even looking at the <code>back_to_home()</code> function now, because it should not be part of what we're doing here. So, let's code the two functions we need.</p>

<pre><code>&lt;?php

function getUserPermissions($link, $username)
{
    $query = "SELECT `permissions` FROM `members` WHERE `username` = ?";
    if ($stmt = $link-&gt;prepare($query)) {
        $stmt-&gt;execute();
        $stmt-&gt;bind_result($permissions);
        $stmt-&gt;fetch();
        $stmt-&gt;close();
        return $permissions;
    }   
    return false;
}

function setUserPermissions($link, $username, $permissions)
{
    $query = "UPDATE `members` SET `permissions` = ? WHERE `username` = ?";
    if ($stmt = $link-&gt;prepare($query)) {
        $stmt-&gt;bind_param('si', $username, $permissions);
        $success = $stmt-&gt;execute();
        $stmt-&gt;close();
        return $success;
    }   
    return false;
}
</code></pre>

<p>Now let's go one step up in the chain and write the script that accepts the form submission. You located this at <code>"./tools/php/demoter_promoter/index.php"</code>.</p>

<pre><code>&lt;?php

session_start();

$input_change = filter_input(INPUT_POST, 'change', FILTER_SANITIZE_NUMBER_INT);

if (isset($_SESSION['user-username'])) {

    require('../connector/connector.php');

    $username    = $_SESSION['user-username'];
    $permissions = getUserPermissions($db, $username);

    switch($input_change) { 
        case +1 : if ($permissions &lt;= 6) {
                      setUserPermissions($db, $username, $permissions + 1);
                  }
                  break;
        case -1 : if ($permissions &gt;= 1) {
                      setUserPermissions($db, $username, $permissions - 1);
                  }
                  break;
    }
}
</code></pre>

<p>First of all, for obvious reasons of security I do not post the user name in the form. This would allow any hacker to try other user names. I retrieve the user name from the session, as it was set when the user logged in. This has the added advantage that it checks whether the user is actually logged in.</p>

<p>Instead of using the posted field name, as a way to distinguish between promotion and demotion of the permission, I chose one integer field with the name <code>change</code>. Simply because this is easier. The script only reacts to the values <code>+1</code> and <code>-1</code>. </p>

<p>I always use <a href="https://www.php.net/manual/en/ref.filter.php" rel="nofollow noreferrer">the filter functions</a> to do the first filtering of user input at the top of the script. This gives me clear control over the input into the script. These functions do not completely clean user input, but it is a first step. To make clear to myself that something is user input I prefix it with <code>input_</code>, that way I know I have to treat these variables with care.</p>

<p>As you can see I put the <code>require()</code> here, in the global scope.</p>

<p>Now finally the form, where it all starts, the demote and promote button script:</p>

<pre><code>&lt;?php

session_start();

if (isset($_SESSION['user-username'])) {

    require('../connector/connector.php');

    $permissions = getUserPermissions($db, $_SESSION['user-username']);
}

?&gt;
&lt;form action="./tools/php/demoter_promoter/index.php" method="POST"&gt;
  &lt;table class="permissionsTable"&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;?php 

if (isset($permissions) &amp;&amp; ($permissions &lt; 6)) {
    echo '&lt;button id="promoteButton" title="Den Rank um 1 Bef√∂rdern" ' .  
         'value="+1" name="change"&gt;Promote&lt;/button&gt;';
} 

     ?&gt;&lt;/td&gt;&lt;td&gt;&lt;?php

if (isset($permissions) &amp;&amp; ($permissions &gt; 1)) {
    echo '&lt;button id="demoteButton" title="Den Rank um 1 Degradieren" ' .
         ' value="-1" name="change"&gt;Demote&lt;/button&gt;';
} 

    ?&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/table&gt;
&lt;/form&gt;      
</code></pre>

<p>I've tried to keep this script simple. Also, I don't understand all the <code>if ()</code> conditions your script starts with. You should not use local styles in your HTML, instead use a stylesheet. I'm sure you're familiar with these. A comparable sheet for your local styles would be:</p>

<pre><code>&lt;styles&gt; 

.permissionsTable {
   width: 100%;
}

.permissionsTable td {
   width: 50%;
}

#promoteButton {
   float: right;
}

#demoteButton {
   float: left;
}

&lt;/styles&gt;
</code></pre>

<p>I hope this answer contains some useful hints for you. Finally a warning: All the code was written without thorough testing. There might be bugs.</p>
    </div>