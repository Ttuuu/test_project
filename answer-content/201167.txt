<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You could have used the bitwise methods in BigInteger.</p>

<p>You could get rid of both .mod(two) and BigInteger two and instead use !__.testBit(0).</p>

<blockquote>
  <p>Returns true if and only if the designated bit is set. (Computes <code>((this &amp; (1&lt;&lt;n)) != 0)</code>.)</p>
</blockquote>

<p>You could have also used .shiftRight(1) to divide by 2</p>

<blockquote>
  <p>Returns a BigInteger whose value is <code>(this &gt;&gt; n)</code>. Sign extension is performed. The shift distance, n, may be negative, in which case this method performs a left shift. (Computes <code>floor(this / 2n)</code>.)</p>
</blockquote>

<p>I haven't put a ton of thought, but I think you could also find a clever way to get rid of 3 with testBit and bitLength, but I think that .compareTo/equals method is alright.</p>

<pre><code>public static int answer(String n) {
    //convert n to BigInteger
    BigInteger x = new BigInteger(n);
    BigInteger three = new BigInteger("3");
    BigInteger y, z;
    int counter = 0;

    //Loop for as long as x is not equal to 1
    while(!x.equals(BigInteger.ONE)){
        //Check if x is divisible by 2
        if(!x.testBit(0)){
            //divide x by 2
            x = x.shiftRight(1);
        } else {
            //subtract x by 1 and then divide by 2 store in variable z
            y = x.subtract(BigInteger.ONE);
            z = y.shiftRight(1);
            //check if the result of that leaves a number that's divisible by 2, or check if x is equal to 3
            if(!z.testBit(0) || x.equals(three)){
                x = y;
            } else {
                x = x.add(BigInteger.ONE);
            }
        }
        counter++;
    }
    return counter;
}
</code></pre>
    </div>