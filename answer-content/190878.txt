<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2><code>malloc()</code></h2>

<p>In general, <code>malloc</code> may fail, and will return <code>NULL</code> when that happens, you should deal with that. </p>

<p>The result of <code>malloc</code> does not have to be cast to the target type, additionally it is usually safer to use the target variable in the <code>sizeof</code> expression.</p>

<pre><code>stack *s = malloc(sizeof *s); 
if (s == NULL) { // deal with it}
</code></pre>

<h2><code>gets()</code></h2>

<p>You have a buffer that is 100 chars wide, the long-deprecated <code>gets()</code> will just write over the end of the buffer, you should try and use <a href="https://en.cppreference.com/w/c/io/fgets" rel="nofollow noreferrer"><code>fgets()</code></a> e.g <code>fgets(buffer, 100, stdin)</code> or alternatively <a href="https://en.cppreference.com/w/c/io/gets" rel="nofollow noreferrer"><code>gets_s()</code></a> if your compiler supports C11's optional Annex K.</p>

<h2>Editing the string in place</h2>

<p>Meaning changing the characters in the string without extra memory allocation. You're changing the string in place, this probably makes things much more complicated than they need to be. Using an input and an output string would clear things up. Using the pointer into the string rather than the string index might make things a little bit more readable as well. I don't think I would choose to edit the string in place unless I was forced to do it. Not shifting the string also makes it easier to visualize what's going on as you only have to move the index forward.</p>

<h2>Accessing the string via an index</h2>

<p>With <code>char* buffer</code>, <code>buffer[i]</code> and <code>*buffer</code> are equivalent; I'd probably trend more towards using the string pointer rather than the index, that might be a matter of taste. </p>

<h2>Naming consistency</h2>

<p>You have the <code>node</code> struct typedefed as <code>SNode</code> and the stack just typedefed as <code>stack</code>. It's easy to spot when someone is inconsistent, no matter if I agree with the style or not. Here there are two ways of how you define the struct and two ways (one capitalized, and the other not) of writing the typedef; stick to one way.</p>

<h2><code>pop()</code></h2>

<p>Popping an empty stack is a bug in most cases, if not you probably should treat it like a bug and assert on the empty stack. Returning <code>\0</code> hides the fact that you tried to call pop on the empty stack making it harder to track down the bug</p>

<h2>Warnings</h2>

<p><code>isalpha()</code> is defined in <code>&lt;ctype.h&gt;</code> which is not included</p>

<h2>Bug</h2>

<p><code>*+ab+cd</code> is parsed as <code>a + b * c + d</code> and given operator precedence that is incorrect - the result should be <code>(a + b) * (c + d)</code>.</p>
    </div>