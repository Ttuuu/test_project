<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here is my own noobie version of Towers:</p>

<pre><code>def towersofhanoi

puts 'Welcome to Towers of Hanoi'
puts 'The object of this game is to stack all the discs'
puts 'so they are in order with smallest on top'
puts ''
puts 'How many discs would you like?'
numdiscs = gets.to_i
puts ''
if (numdiscs &lt; 3) | (numdiscs &gt; 10)
  puts 'please enter a reasonable number of discs'
  numdiscs = gets.to_i
end
moves = -1
stack1 = Array(1..numdiscs).reverse
stack2 = Array.new
stack3 = Array.new
wincheck = stack1

until (stack2 === wincheck) | (stack3 === wincheck)
moves += 1
puts "you have made #{moves} moves"
puts "here are your stacks:"
puts ''
idx = numdiscs - 1
while idx &gt;= 0
  printf '|'.center(10)
  printf '|'.center(10)
  printf '|'.center(10)
  puts ''
  printf stack1[idx].to_s.center(10)
  printf stack2[idx].to_s.center(10)
  printf stack3[idx].to_s.center(10)
  puts ''
  idx -= 1
end
puts ''
print 'Move a disc from stack '
movefrom = gets.to_i
print 'And put it onto stack '
moveto = gets.to_i
puts ''
if movefrom == moveto
  puts 'That was a useless move'
elsif movefrom == 1 &amp;&amp; moveto == 2 &amp;&amp; stack1.count != 0 
  stack2 &lt;&lt; (stack1.pop)
elsif movefrom == 1 &amp;&amp; moveto == 3 &amp;&amp; stack1.count != 0
  stack3 &lt;&lt; (stack1.pop)
elsif movefrom == 2 &amp;&amp; moveto == 1 &amp;&amp; stack2.count != 0
  stack1 &lt;&lt; (stack2.pop)
elsif movefrom == 2 &amp;&amp; moveto == 3 &amp;&amp; stack2.count != 0
  stack3 &lt;&lt; (stack2.pop)
elsif movefrom == 3 &amp;&amp; moveto == 1 &amp;&amp; stack3.count != 0
  stack1 &lt;&lt; (stack3.pop)
elsif movefrom == 3 &amp;&amp; moveto == 2 &amp;&amp; stack3.count != 0
  stack2 &lt;&lt; (stack3.pop)
else
  puts 'that is not a valid move'
  moves -= 1
end
if (stack1 != stack1.sort.reverse) | (stack2 != stack2.sort.reverse) | (stack3 != stack3.sort.reverse)
  if movefrom == 1 &amp;&amp; moveto == 2 
    stack1 &lt;&lt; (stack2.pop)
  elsif movefrom == 1 &amp;&amp; moveto == 3 
    stack1 &lt;&lt; (stack3.pop)
  elsif movefrom == 2 &amp;&amp; moveto == 1 
    stack2 &lt;&lt; (stack1.pop)
  elsif movefrom == 2 &amp;&amp; moveto == 3 
    stack2 &lt;&lt; (stack3.pop)
  elsif movefrom == 3 &amp;&amp; moveto == 1
    stack3 &lt;&lt; (stack1.pop)
  elsif movefrom == 3 &amp;&amp; moveto == 2
    stack3 &lt;&lt; (stack2.pop)
  end
  puts 'larger discs cannot be placed on smaller discs'
  moves -= 1
end
end
moves += 1
puts "YOU WIN! You solved #{numdiscs} disc difficulty"
puts ''
idx = numdiscs - 1
while idx &gt;= 0
  printf '|'.center(10)
  printf '|'.center(10)
  printf '|'.center(10)
  puts ''
  printf stack1[idx].to_s.center(10)
  printf stack2[idx].to_s.center(10)
  printf stack3[idx].to_s.center(10)
  puts ''
  idx -= 1
end
puts ''
puts "your score is #{moves}"
puts ''
if moves == (2**numdiscs - 1)
    puts "That\'s a perfect score!"
else
puts "a perfect score is " + (2**numdiscs - 1).to_s
end
end

towersofhanoi
</code></pre>

<blockquote>
  <p>Write a Towers of Hanoi game. Keep three arrays, which represents the piles of discs. Pick a representation of the discs to store in the arrays; maybe just a number representing their size. In a loop, prompt the user (using gets) and ask what pile to select a disc from, and where to put it. After each move, check to see if they have succeeded in moving all the discs, to the final pile. If so, they win!"</p>
</blockquote>

<p>Hash keys does seem like a much better way to solve this:</p>

<ul>
<li>I like how clean your code is, but I have noticed that your game crashes if you attempt to move from an empty stack with a nil error.</li>
<li>I used the printf command in my code to show to game stacks vertically rather than horizontally</li>
<li>I also made the win condition the condition of my game loop, rather than a break out within the loop, which I think is a little nicer.</li>
<li>I like the way you count moves better than the way I implemented it (i did it as an afterthought).</li>
</ul>

<p>You can calculate a "perfect score" using 2<sup><em>n</em></sup> - 1, where <em>n</em> is the number of discs.</p>
    </div>