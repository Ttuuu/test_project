<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I don't think I would make this class static, unless it's going to be used extensively throughout the program. If not you can build up a large list of files, that may hang around in memory for no use, unless you remember to call <code>ClearFiles()</code>. Instead you could make a static method that could return an initialized object like:</p>

<pre><code>public static FileManager Create(string directoryPath)
{
  FileManager fm = new FileManager();
  fm.AddFiles(directoryPath);
  return fm;
}
</code></pre>

<p>If you have a need for it, then make this instance as static somewhere in the application.</p>

<hr>

<blockquote>
<pre><code>public static string GetPath(string filename)
{
  var File = Files.Find(x =&gt; x.Name == filename);
  return File.Path;
}
</code></pre>
</blockquote>

<p>It returns only a first match of possible more matches, which will be in a directory high in the hierarchy, but what if you actually seek a path to a file in a subdirectory?</p>

<p>I think I would return a list/array/IEnumerable instead and let the client filter as needed.</p>

<p>Besides that, file names are case insensitive, so you should do:</p>

<pre><code>Files.Find(x =&gt; string.Equals(x.Name, filename, StringComparison.CurrentCultureIgnoreCase));
</code></pre>

<hr>

<blockquote>
<pre><code>public static void AddFiles(string directory)
{
  foreach (string file in Directory.GetFiles(directory))
  {
    Files.Add(new File() { Name = Path.GetFileName(file), Path = directory });
  }
  foreach (string subdirectory in Directory.GetDirectories(directory))
  {
    AddFiles(subdirectory);
  }
}
</code></pre>
</blockquote>

<p>Nice recursive method. As an alternative you could consider to use <code>DirectoryInfo</code> instead - it can handle the recursive search for you:</p>

<pre><code>  DirectoryInfo directory = new DirectoryInfo(directoryPath);
  Files.AddRange(
    directory
    .GetFiles("*.*", SearchOption.AllDirectories)
    .Select(fi =&gt; new File { Name = fi.Name, Path = fi.DirectoryName }));
</code></pre>

<hr>

<p>There is no way to iterate through all the found File objects because the <code>Files</code> static member is private. I would consider to provide a public IEnumerable of some kind.</p>

<hr>

<p>All in all, my implementation would look something like:</p>

<pre><code>  public struct File
  {
    public string Name;
    public string Path;

    public override string ToString()
    {
      return $"{Name} =&gt; {Path}";
    }
  }

  public class FileManager : IEnumerable&lt;File&gt;
  {
    private List&lt;File&gt; Files = new List&lt;File&gt;();

    public void AddFiles(string directoryPath)
    {
      DirectoryInfo directory = new DirectoryInfo(directoryPath);
      Files.AddRange(
        directory
        .GetFiles("*.*", SearchOption.AllDirectories)
        .Select(fi =&gt; new File { Name = fi.Name, Path = fi.DirectoryName }));
    }

    public IEnumerable&lt;string&gt; GetPaths(string filename)
    {
      return Files
        .Where(x =&gt; string.Equals(x.Name, filename, StringComparison.CurrentCultureIgnoreCase))
        .Select(f =&gt; f.Path);
    }

    public void Clear()
    {
      Files.Clear();
    }

    public IEnumerator&lt;File&gt; GetEnumerator()
    {
      return Files.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
      return GetEnumerator();
    }

    public static FileManager Create(string directoryPath)
    {
      FileManager fm = new FileManager();
      fm.AddFiles(directoryPath);
      return fm;
    }
  }
</code></pre>
    </div>