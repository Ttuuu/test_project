<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>When programming in general, C in particular, the most important quality is quite often program performance. As in execution speed and memory use. It is therefore very important to actually know what makes an efficient program and what makes an inefficient program. Inefficient == bad.</p>
<p>Some examples of inefficient programming:</p>
<ul>
<li>Iterating over the same data multiple times.</li>
<li>Calling functions with the same or nearly the same data multiple times.</li>
<li>Using recursion.</li>
</ul>
<p>You should avoid all of these like the plague! Now, I know your specification says "use recursion". So what a professional would do first of all, is to question if the specification makes sense. In this case it doesn't - there is absolutely no need to use recursion here.</p>
<p>Others have given you diverse ways of solving this with recursion. Here is an alternative approach which is efficient, instead of needlessly inefficient.</p>
<hr>
<pre><code>#include &lt;string.h&gt;
#include &lt;stdio.h&gt;


void reverse_words (size_t str_length, 
                    char dest [static str_length+1], 
                    const char src [str_length+1])
{
  size_t word_length;
  const char* word_end = src + str_length;       // point 1 character past last word
  char* dest_ptr = dest;
  for(const char* src_ptr = word_end-1; src_ptr &gt; src; src_ptr--)
  {
    if(*src_ptr == ' ')
    {
      word_length = (size_t)(word_end - src_ptr - 1);
      memcpy(dest_ptr, src_ptr+1, word_length);
      dest_ptr += word_length;
      
      *dest_ptr = ' ';
      dest_ptr++;
      
      word_end = src_ptr;
    }
  }

  // special case, last word
  word_length = (size_t)(word_end - src);
  memcpy(dest_ptr, src, word_length);
  dest[str_length] = '\0';
}

int main()
{
  const char str_cat [] = "cat is running";
  char str_reverse [sizeof(str_cat)];
  reverse_words(sizeof(str_cat)-1, str_reverse, str_cat);
  puts(str_reverse);
  
  const char str_one [] = "oneword";
  reverse_words(sizeof(str_one)-1, str_reverse, str_one);
  puts(str_reverse);

  return 0;
}
</code></pre>
<p>Explanation:</p>
<ul>
<li><p>The first thing you need to consider when designing this algorithm is if you need to reverse the string "in place" or make a reversed copy of it. The former might be more efficient, but the latter probably makes the most sense. It is usually good programming practice to treat strings as immutable.</p>
<p>Depending on which method you pick, you end up with entirely different algorithms. I chose to make a copy of the original string.</p>
</li>
<li><p>The function takes advantage of VLAs, so that you can give two arrays of any length as input. The arrays will of course decay into pointers to the first element. But it is often preferable to use array type in function parameters over pointer type: it gives self-documenting code and also better type safety if you use external static analysis tools to check your code.</p>
</li>
<li><p>The <code>static</code> array length means that the <code>dest</code> parameter is guaranteed to be <em>at least</em> <code>str_length+1</code> characters long. This makes the function slightly more flexible and ever so slightly faster (because the compiler can do a few more micro optimizations).</p>
</li>
<li><p>The algorithm itself iterates over the source string from the end towards the beginning. This makes it easier to pick out the words in reverse order, without the need of temporary buffers. So there is one pointer to keep track of where we are in the destination string and one to keep track of where we are in the source string (used as loop iterator).</p>
</li>
<li><p>The algorithm keep tracks of the end of the last found word. It is custom to design "end" pointers so that they point 1 past the end of the buffer. It could as well point at the last character in the last found word, for a slightly different algorithm. Doesn't matter.</p>
</li>
<li><p>Whenever finding a space, the algorithm uses memcpy to effectively copy the whole word. Note that memcpy is much more efficient than byte-by-byte copy on most CPUs, since it can grab whole chunks of data at once.</p>
</li>
<li><p>After copying, the algorithm manually inserts a space in the destination string.</p>
</li>
<li><p>Reaching the beginning of the string is a special case: there won't be no space there, but when we reach the beginning there will always be a word to copy. So this is handled separately. This is also the reason why the loop iterates to <code>src_ptr &gt; src</code> rather than <code>src_ptr &gt;= src</code>. (As a side note, it is questionable/poorly-defined practice to point one past the beginning of an array in C, as opposed to pointing one past the end.)</p>
</li>
<li><p>Finally, the new string has to be null terminated.</p>
</li>
</ul>
<p>Unlike any code using recursion, this code is efficient. Feel free to benchmark against the recursion versions and note the vast improvement in speed and memory consumption.</p>
<hr>
<p>( please note that naming a variable "str_cat" is very bad practice, I just couldn't resist sneaking in a C programming joke :) )</p>
    </div>