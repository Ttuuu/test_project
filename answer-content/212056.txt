<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Problems</h3>

<ul>
<li>Both the reflection and expression-based approach fail to take <code>null</code> values into account (<code>NullReferenceException</code>).</li>
<li>They also fail to take types with indexers into account (<code>TargetParameterCountException</code>).</li>
<li>Hash-codes are not unique identifiers. Different properties (and objects in general) can have the same hash code - that just means that they <em>might</em> be equal. Use <code>prop.MetadataToken</code> in combination with the module they're declared in (<code>prop.Module.ModuleVersionId</code>).</li>
<li>Compiling expressions asynchronously makes this a lot more complex than it needs to be, and that complexity is not properly taken care of:

<ul>
<li>There's no guarantee that compilation will be finished when the next object is processed. This can result in multiple compilations for the same property. That's a waste of work.</li>
<li>The results of these compilations are added to a <code>Dictionary</code>, which is not thread-safe. In the best case, adding a key that already exists will throw an exception. In the worst case, the dictionary's internal state will become corrupted.</li>
<li>Those exceptions are not being caught. Before .NET Framework 4.5, that would've caused a crash, and in 4.5 and higher it may still do so, depending on certain settings.</li>
</ul></li>
</ul>

<h3>Other improvements</h3>

<ul>
<li>Why does <code>Execute</code> take a sequence of items, instead of a single item? Flattening results is easy (<code>data.SelectMany(service.Execute)</code>), 'unflattening' is not - the caller would have to figure out the number of properties, and you'd have to write a method to split up a single sequence into sub-sequences.</li>
<li>Instead of doing <code>ExpressionCache.ContainsKey(key)</code>, followed by <code>ExpressionCache[key]</code>, use <code>TryGetValue</code>. This lets you check the presence of a key and get its associated value with a single lookup.</li>
<li>There's no point in making <code>AddExpressionCacheAsync</code> <code>async</code>. It's not doing any asynchronous work (that <code>await Task.Yield()</code> is useless). You're already calling this method from within a <code>Task.Run</code> call, so it'll be executed asynchronously anyway.</li>
<li>In <code>GetValueGetter</code>, use <code>nameof(object.ToString)</code> instead of <code>"ToString"</code>.</li>
</ul>

<h3>Readability issues</h3>

<ul>
<li>Some names are not very descriptive: <code>Execute</code> -&gt; <code>GetPropertyValues</code>, <code>enums</code> -&gt; <code>items</code>, <code>func</code> -&gt; <code>compiledExpression</code>, <code>GetValueGetter</code> -&gt; <code>CompileGetValueExpression</code>.</li>
<li>There are several abbreviations that do not improve readability: <code>e</code> -&gt; <code>item</code>, <code>props</code> -&gt; <code>properties</code>, <code>p</code> -&gt; <code>property</code>.</li>
</ul>
    </div>