<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>IMO your events should accommodate the C# standard for events:</p>

<pre><code>  public interface IFoo&lt;T&gt;
  {
    event EventHandler&lt;T&gt; ChangeValue;
    event EventHandler&lt;object&gt; ChangeObject;
    event EventHandler ChangeEmpty;

    void InvokeChange(T value);
  }
</code></pre>

<p>The <code>EventHandler</code> delegate takes a source object as argument, which may be useful when consuming the event.</p>

<hr>

<p>You can modify dfhwze's solution slightly to meet all your requirements to:</p>

<pre><code>  public class Foo&lt;T&gt; : IFoo&lt;T&gt;
  {

    private List&lt;object&gt; handlers = new List&lt;object&gt;();

    void AddHandler(object handler)
    {
      handlers.Add(handler);
    }

    void RemoveHandler(object handler)
    {
      int index = handlers.LastIndexOf(handler);
      if (index &gt;= 0)
        handlers.RemoveAt(index);
    }

    public event EventHandler&lt;T&gt; ChangeValue { add =&gt; AddHandler(value); remove =&gt; RemoveHandler(value); }
    public event EventHandler&lt;object&gt; ChangeObject { add =&gt; AddHandler(value); remove =&gt; RemoveHandler(value); }
    public event EventHandler ChangeEmpty { add =&gt; AddHandler(value); remove =&gt; RemoveHandler(value); }

    public void InvokeChange(T value)
    {
      foreach (object handler in handlers)
      {
        Invoke((dynamic)handler, value);
      }
    }

    public void Invoke(EventHandler handler, T value)
    {
      handler?.Invoke(this, EventArgs.Empty);
    }

    public void Invoke&lt;S&gt;(EventHandler&lt;S&gt; handler, S value)
    {
      handler?.Invoke(this, value);
    }
  }
</code></pre>

<p>A <code>List&lt;object&gt;</code> may not be the most effective container, if you have many listeners. In that case you'll have to find another.</p>

<hr>

<p>Another solution building on your own could be: </p>

<pre><code>  public class Foo&lt;T&gt; : IFoo&lt;T&gt;
  {
    private event EventHandler&lt;T&gt; AllEvents;
    private Dictionary&lt;Delegate, (EventHandler&lt;T&gt; Handler, int Count)&gt; allHandlers = new Dictionary&lt;Delegate, (EventHandler&lt;T&gt;, int)&gt;();

    void AddHandler(Delegate source, Func&lt;EventHandler&lt;T&gt;&gt; handlerFactory)
    {
      if (!allHandlers.TryGetValue(source, out var handler))
      {
        handler = (handlerFactory(), 1);
      }
      else
      {
        handler.Count++;
      }

      allHandlers[source] = handler;
      AllEvents += handler.Handler;
    }

    void RemoveHandler(Delegate source)
    {
      if (allHandlers.TryGetValue(source, out var handler))
      {
        handler.Count--;
        AllEvents -= handler.Handler;
        if (handler.Count &lt;= 0)
          allHandlers.Remove(source);
        else
          allHandlers[source] = handler;
      }
    }

    public event EventHandler&lt;T&gt; ChangeValue { add =&gt; AddHandler(value, () =&gt; value); remove =&gt; RemoveHandler(value); }
    public event EventHandler&lt;object&gt; ChangeObject { add =&gt; AddHandler(value, () =&gt; (src, v) =&gt; value.Invoke(src, v)); remove =&gt; RemoveHandler(value); }
    public event EventHandler ChangeEmpty { add =&gt; AddHandler(value, () =&gt; (src, v) =&gt; value.Invoke(src, EventArgs.Empty)); remove =&gt; RemoveHandler(value); }

    public void InvokeChange(T value)
    {
      AllEvents?.Invoke(this, value);
    }

    public void Clear()
    {
      allHandlers.Clear();
      AllEvents = null;
    }
  }
</code></pre>
    </div>