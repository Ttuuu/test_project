<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Calculating the distance between each pair of points is expensive. Since the coordinates are all integers, you can first calculate which delta-x and delta-y can lead to the distance 2018 at all. Define a function <code>candidates(point, set)</code> that filters the possible candidates. To do this efficiently, group the points by their x coordinate. Then, for a given x, you only have to look at a few of these groups.</p>

<p>Grouping the points improves performance because grouping has complexity around <span class="math-container">\$\mathcal O(n)\$</span>, where <span class="math-container">\$n\$</span> is the number of points.</p>

<p>Afterwards, finding the candidate points is a simple lookup: for each delta in (-2018, -1680, -1118, 0, 1118, 1860, 2018) you need one lookup, which again sums up to <span class="math-container">\$\mathcal O(n)\$</span>.</p>

<p>In summary, the number of comparisons will be much less than the <span class="math-container">\$n\cdot n\$</span> from your current code.</p>
    </div>