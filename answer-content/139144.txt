<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think the algorithm supposed by Dmitry will improve the performance...</p>

<p>Additional to the other posts, there is one concrete optimization for your solution:</p>

<p>It is not required to get the index in line <code>pointList.IndexOf(currentPoint)</code> because it is already know:</p>

<pre><code>[...]
var closestPointIndex = 0;
var currentPoint = pointList[closestPointIndex];

while (pointList.Count &gt; 1)
{
    orderedList.Add(currentPoint);
    pointList.RemoveAt(pointList[closestPointIndex]);

    closestPointIndex = 0;
    var closestDistance = double.MaxValue;

    for (var i = 0; i &lt; pointList.Count; i++)
    {
        var distance = Distance(currentPoint, pointList[i]);
        if (distance &lt; closestDistance)
        {
            closestPointIndex = i;
            closestDistance = distance;
        }
    }

    currentPoint = pointList[closestPointIndex];
}
[...]
</code></pre>
    </div>