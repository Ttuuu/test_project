<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If you can change the signature, to directly get cols, rows and slices count, you will not have to check for their validity.</p>

<pre><code>Rcpp::NumericVector array_perm(const Rcpp::NumericVector&amp; input, 
                               std::size_t rows, std::size_t cols, std::size_t slices);
</code></pre>

<p>Otherwise, if you can change the error management, I think you'll get a speed boost. Exceptions handling come with a cost. Maybe return an empty vector? I don't know <code>R</code> , so I don't know possibilities.</p>

<p>You can also try to flattening your loops, here you have multiples options:</p>

<p><strong>With the computations into output indexing</strong></p>

<pre><code>Rcpp::NumericVector array_perm(const Rcpp::NumericVector&amp; input, std::size_t rows, std::size_t cols, std::size_t slices) {
    // Think about the error management here...
    auto output = Rcpp::NumericVector(Rcpp::no_init(10));

    auto rc = rows * cols;
    auto size = rc * slices;
    for (std::size_t i = 0; i &lt; size; ++i) {
        output[i / rc + i % rc * slices] = input[i];
    }
    return output;
}
</code></pre>

<p><strong>With the computations into intput looking</strong></p>

<pre><code>//...
    for (std::size_t i = 0; i &lt; size; ++i) output[i] = input[i/slices + i % slices * rc];
//...
</code></pre>

<p><strong>Or in reverse order</strong></p>

<pre><code>//...
    while (size--) output[size] = input[size/slices + size % slices * rc];
//...
</code></pre>

<p><strong>Or a mix</strong></p>

<pre><code>//...
    while (size--)  output[size / rc + size % rc * slices] = input[size];
//...
</code></pre>

<p><strong>Or even a range-based for loop</strong></p>

<pre><code>//...
    std::size_t i = 0;
    for (auto e : input) {
        output[i / rc + i % rc * slices] = e;
        ++i;
    }
//...
</code></pre>

<p><em>PS: Did you tried with another contiguous storage type? (std::vector, plain old C array, ...)</em></p>

<p><em>PPS: I don't have <code>R</code> environment, so I only tested transposition algorithms with c++</em></p>

<p><strong>Edit</strong>: </p>

<p>Two other way:</p>

<pre><code>//...
    for(std::size_t i = 0, j = 0; i &lt; size; ++i, j+=rc) {
        if (size &lt;= j) j -= size - 1;
        output[i] = input[j];
    }
//...
// or
//...
    for(std::size_t i = size, j = i-1; i--; j -= rc) {
        if (size &lt; j)  j += size-1;
        output[i] = input[j];
    }
//...
</code></pre>
    </div>