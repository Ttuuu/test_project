<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Nice:</p>

<pre><code>using bytes = std::vector&lt;std::byte&gt;;
</code></pre>

<p>I would call it <code>Bytes</code> to make it clear it is a type rather than an object.</p>

<hr>

<p>This is not a good idea:</p>

<pre><code>using namespace std;
</code></pre>

<p>See: <a href="https://stackoverflow.com/q/1452721/14065">Why is “using namespace std;” considered bad practice?</a></p>

<hr>

<p>This is technically not valid C++.</p>

<pre><code>  byte data[length];
</code></pre>

<p>Variable sized arrays (VSA) are an extension to the language supported by several compilers but not actually part of the C++ standard. Though it is part of the more recent versions C standard.</p>

<p>Also creating a local array means that the data is being created on the local stack frame (here I assuming a Von-Neumann like architecture). This means for the data to exist after the function completes means you will need to copy it out of the function. So an alternative data object is probably a good idea.</p>

<p>Also there is a limitation on the size of array allowed on the stack (there are hardware limitations on the size of stack frames on lots of architecture).</p>

<hr>

<p>So a god idea would be to use the same data structure that you return.</p>

<pre><code>  Bytes data(length);   // This is basically std::vector
</code></pre>

<p>Now in older versions of C++ there are some nice optimizations that can be applied to <code>std::vector</code> when it is returned from a function that allow the compiler to build the <code>std::vector</code> at the final destination so that it is not actually copied on return.</p>

<p>In modern versions of the compiler the language has the concept of move semantics built into the language. So returning a <code>std::vector</code> is not an expensive operation as the internal buffer is moved (just the pointer is copied) from the function to the destination result.</p>

<p>Also the compiler is now required to perform copy elision of objects when it can.</p>

<hr>

<h2>Error checking</h2>

<p>This code does zero error checking. There are several things that can go wrong and you don't check for any of them. But you said you removed this (you should have left it in).</p>

<hr>

<p>So a better version:</p>

<pre><code>#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;fstream&gt;
#include &lt;cstdint&gt;

using Bytes = std::vector&lt;std::byte&gt;;

Bytes read_block(std::uint32_t      offset,
                 std::uint32_t      length,
                 std::string const&amp; filename)
{
  // Not going to explicitly check these.
  // The use of gcount() below will compensate for a failure here.
  std::ifstream is(filename, std::ios::binary);
  is.seekg(offset);

  Bytes data(length);
  is.read(reinterpret_cast&lt;char*&gt;(data.data()), length);

  // We have to check that reading from the stream actually worked.
  // If any of the stream operation above failed then `gcount()`
  // will return zero indicating that zero data was read from the
  // stream.
  data.resize(is.gcount());

  // Simply return the vector to allow move semantics take over.
  return data;
}
</code></pre>
    </div>