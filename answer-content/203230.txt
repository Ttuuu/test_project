<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>API</h1>

<blockquote>
  <p>The djangorestframework-jwt does not support "Refresh Tokens", it only supports refreshing non-expired tokens.</p>
</blockquote>

<p>source : <a href="https://stackoverflow.com/questions/42547579/django-rest-jwt-refresh">https://stackoverflow.com/questions/42547579/django-rest-jwt-refresh</a></p>

<p>So I replaced it by djangorestframework-simplejwt, using the following configuration:</p>

<pre><code># settings.py

INSTALLED_APPS = [
    'rest_framework',
    'rest_framework_simplejwt.token_blacklist',
]

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated'
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ]
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=14),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUTH_HEADER_TYPES': ('Bearer',),
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),
}
</code></pre>

<p>(The <code>rest_framework_simplejwt.token_blacklist</code> app invalidate refreshed tokens until their expiration date)</p>

<pre><code># urls.py

from django.urls import path
from rest_framework_simplejwt.views import TokenObtainPairView, TokenRefreshView

urlpatterns = [
    path('auth/token/', TokenObtainPairView.as_view()),
    path('auth/token/refresh/', TokenRefreshView.as_view()),
]
</code></pre>

<h1>React app</h1>

<p>The API client will:</p>

<ul>
<li>send the request without <code>Authorization</code> header if no tokens
available</li>
<li>refresh both tokens if the access token is expired and the
refresh token is not expired</li>
<li>add an <code>Authorization</code> header containing the access token (if available and valid) to all request</li>
<li>disconnect the user if the access token is expired or invalid</li>
</ul>

<p>All actions send requests to the API using this client.</p>

<pre><code>import axios from 'axios'
import moment from 'moment'
import jwt_decode from 'jwt-decode'

const client = axios.create({
  baseURL: process.env.API_URL
})

client.interceptors.request.use(async (config) =&gt; {
  // Decode available tokens
  let jwta = {}
  let jwtr = {}
  if (window.localStorage.getItem('jwta') &amp;&amp; window.localStorage.getItem('jwtr')) {
    jwta = jwt_decode(window.localStorage.getItem('jwta'))
    jwtr = jwt_decode(window.localStorage.getItem('jwtr'))
  }

  // Update tokens if the access token is expired and a valid refresh token is available
  if (jwta.exp &lt; moment().unix() &amp;&amp; jwtr.exp &gt; moment().unix()) {
    const response = await axios.post(`${process.env.API_URL}/auth/token/refresh/`, {
      'refresh': window.localStorage.getItem('jwtr')
    })
    window.localStorage.setItem('jwta', response.data.access)
    window.localStorage.setItem('jwtr', response.data.refresh)
    jwta = jwt_decode(response.data.access)
  }

  // Add access token to request
  if (jwta.exp &gt; moment().unix()) {
    config.headers['Authorization'] = `Bearer ${window.localStorage.getItem('jwta')}`
  }

  // Disconnect user if authentication tokens are expired
  // (Added to avoid unnecessary API calls)
  if (jwta.exp &lt; moment().unix() &amp;&amp; jwtr.exp &lt; moment().unix()) {
    window.localStorage.clear()
    window.location = '/signin/'
  }

  return config
})

client.interceptors.response.use(
  (response) =&gt; {
    return response
  },
  (error) =&gt; {
    if (error.response.status === 401) {
      window.localStorage.clear()
      window.location = '/signin/'
    }
    return Promise.reject(error.response)
  }
)

export default client
</code></pre>

<p>When the user try to sign in, access and refresh tokens are requested to the API, then persisted in local storage:</p>

<pre><code>export const signIn = (username, password) =&gt; async dispatch =&gt; {
  try {
    const response = await apiClient.post('/auth/token/', {
      'username': username,
      'password': password
    })

    const userId = jwt_decode(response.data.access).user_id
    window.localStorage.setItem('jwta', response.data.access)
    window.localStorage.setItem('jwtr', response.data.refresh)
    window.localStorage.setItem('user', userId)

    dispatch({
      type: SIGN_IN_SUCCESS,
      payload: {
        authenticated: true,
        user: userId
      }
    })
  } catch (e) {
    window.localStorage.clear()

    const errorMessage = (e.status &amp;&amp; e.status === 400)
      ? 'Invalid credentials'
      : 'We encountered an error. Please try again later.'

    dispatch({
      type: SIGN_IN_FAILURE,
      payload: {
        authenticated: false,
        errorMessage: errorMessage
      }
    })
  }
}
</code></pre>
    </div>