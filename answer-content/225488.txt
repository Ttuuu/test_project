<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As long as the encoding and decoding are so similar you could use a template</p>

<pre><code>template doCmd(gp: untyped, encdec: untyped, msg: string): void =
    let key = gp()
    let newContent = encdec(existingContent, key)
    write(newContent)
    notify(msg)
</code></pre>

<p>and then:</p>

<pre><code>of "open":
    doCmd getpass, xxtea.decrypt, "Decoded"
of "close":
    doCmd getpass2, xxtea.encrypt, "Encoded"
</code></pre>

<p>You can also use a proc that accepts proc as arguments, more safe for checking the types of arguments passed, but at that point either getpass and getpass2 are declared with the same arguments or you have to pass an argument for each variant.</p>

<p>To pass a function as an argument just use <code>proc</code> and<code>{.closure}</code></p>

<pre><code>proc doCmd(gp: proc(m: string = "Password: "): string {.closure}, encdec: proc(b: string, k: string): string {.closure}, msg: string): void =
    let key = gp()
</code></pre>
    </div>