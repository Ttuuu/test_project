<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Readability</h1>
<h2>formatting</h2>
<p>You have very long lines, and don't follow the <code>PEP8</code> suggestions everywhere. The quickest way to solve both problems in one go is to use <a href="https://github.com/psf/black" rel="nofollow noreferrer"><code>black</code></a>. this can be integrated in most IDEs and in <a href="https://jupyterlab-code-formatter.readthedocs.io/en/latest/index.html" rel="nofollow noreferrer">jupyterlab</a></p>
<h2>type hints</h2>
<p>In this I have to agree with Reinderein. Now it is not clear which parameters to your function are scalars, and which are arrays. That makes it difficult for other people (this includes you in a few months of not working with this code) to understand what happens. I have a rather strict <code>mypy</code> configuration</p>
<pre><code>[mypy]
check_untyped_defs = true
disallow_any_generics = true
disallow_untyped_defs = true
ignore_missing_imports = true
no_implicit_optional = true
warn_redundant_casts = true
warn_return_any = true
warn_unused_ignores = true
</code></pre>
<p>but this has allowed me to remove some bugs that would have been hard to spot otherwise.</p>
<p>To type a notebook, I use <a href="https://github.com/mwouts/jupytext" rel="nofollow noreferrer">jupytext</a> to sync the notebook with a python file, open that python file in an IDE and run a battery of linters (pylama, pydocstyle, ..), code formatters (isort and black), type check (mypy), adapt the code to the suggestions. then I go back to the notebook, and run everything to make sure the changes did not affect the calculations' correctness.</p>
<p>This <code>.py</code> file can then also be more easily versioned.</p>
<h1>speedup</h1>
<p>Vectorise as much as possible. You can use <a href="http://numba.pydata.org/" rel="nofollow noreferrer"><code>numba</code></a> to speed up some calculations.</p>
<p>As an outsider it is difficult to see what parameters to function tend to change, and which stay constant. <code>memoization</code> can cache intermediate results. <code>arrays</code> are not hashable, so you won't be able to use <code>functools.lru_chache</code>, but there are third party modules that can help, like <a href="https://joblib.readthedocs.io/en/latest/auto_examples/memory_basic_usage.html#sphx-glr-auto-examples-memory-basic-usage-py" rel="nofollow noreferrer"><code>joblib.Memory</code></a></p>
<h1>rearrange</h1>
<p>your <code>calculate_light</code> is too complex. It also mixes in system input (<code>datetime.datetime.now()</code>), calculations and sytem output (<code>print</code> and writing the file to disc)</p>
<h2>logging</h2>
<p>Instead of <code>print</code>, I would use the <code>logging</code> module. This allows you, or users of this code to later very easily switch off printing,, allows you to write it to a log file and inspect later, ...)</p>
<h2>output</h2>
<p>Doesn't <code>data_array.to_netcdf("ncfiles/irradiance.nc")</code> overwrite the results in every iterations.</p>
<p>Apart from that I have 2 problems with this. You hardcode the output path in this function. If ever you want the results somewhere else, this is difficult to do.</p>
<p>But I would not write the results in this method. I would <code>yield</code> the results, and let the caller of this method worry on what to do with them. If the results are intermediate, you don't need them afterwards, you can keep em in memory if you have enough RAM, or write them to a <a href="https://docs.python.org/3/library/tempfile.html#tempfile.TemporaryDirectory" rel="nofollow noreferrer">temporary directory</a></p>
<h1>negative checks / <code>continue</code></h1>
<p>You have some checks like <code>if var_name=="uas":</code> and <code>if model_name_v==model_name:</code>. If you reverse those checks, you save a level of indentation</p>
<pre><code>if var_name != "uas":
    continue
...
</code></pre>
<h1>DRY</h1>
<p>You have a lot of repetition. For example the <code>key[3:]</code> If you need to change this to the 4th number, you need to think about changing all these intermediate positions. Extract that into its own variable. This will also serve as extra documentation</p>
<h1>General</h1>
<p>Try to implement these changes already. If you do, the code will be a  lot more readable and understandable for outsiders, so we can give better advice on how to speed up certain parts, then you can post a new question.</p>
    </div>