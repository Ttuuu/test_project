<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some code review comments not mentioned by other:</p>

<ul>
<li>Unnecessary import:</li>
</ul>

<p>You have <code>import java.io.IOException;</code>
but you are neither catching nor throwing an <code>IOException</code>.</p>

<ul>
<li>Possible resource leak</li>
</ul>

<p>When you open a <code>Closable</code> resource, it is a good habit to <code>.close()</code> it when you are done.  This can be automatically done if you use a "try-with-resources" statement:</p>

<pre><code>try (Scanner sc = new Scanner(System.in)) {
   // ... use scanner in here
}
// Scanner is automatically closed here.
</code></pre>

<hr>

<p>Better (or at least other) ways to solve the problem:</p>

<p>You can use a <a href="https://docs.oracle.com/javase/9/docs/api/java/util/BitSet.html" rel="nofollow noreferrer"><code>BitSet</code></a> to improve the time and space complexity of the algorithm.  With 1 &lt;= A[i] &lt;= 500, the <code>BitSet</code> only needs 64 bytes of storage.  Setting, clearing and (in this case) toggling bits are very fast \$O(1)\$ operations.  You don't need to ask whether the element has been encountered before, adding it if it hasn't and removing it if is has; just flipping the corresponding bit performs the add-if-not-present and remove-if-present operations.  This has to be done once per input value, resulting in \$O(n)\$.  At the end, the sole remaining bit can be found with <code>.nextSetBit(0)</code>, which is a \$O(n/64)\$ search operation, yielding an overall \$O(n)\$ algorithm.</p>

<pre><code>private static int getAloneNum (int[] arr) {
    BitSet alone = new BitSet(501);

    for (int elem : arr)
        alone.flip(elem);

    return alone.nextSetBit(0);
}
</code></pre>

<hr>

<p>Thinking about streams, it occurred to me a <code>BitSet</code> would also make a good <code>Collector</code>.  <code>BitSet::flip</code> works as an accumulator, and <code>BitSet::xor</code> will work as a combiner.  This allows the following "one-liner" solution:</p>

<pre><code>import java.util.BitSet;
import java.util.Scanner;

public class Alone {

    public static void main(String[] args) {

        try(Scanner sc = new Scanner(System.in)) {

            int num_tests = sc.nextInt();
            for(int test=0; test &lt; num_tests; test++) {

                int n = sc.nextInt();
                System.out.println(sc.tokens()
                        .limit(n)
                        .mapToInt(Integer::valueOf)
                        .collect(BitSet::new, BitSet::flip, BitSet::xor)
                        .nextSetBit(0));
            }
        }
    }
}
</code></pre>

<hr>

<p>Or, inspired by <a href="https://codereview.stackexchange.com/a/200736/100620">@PeterTaylor's answer</a>, the <code>BitSet</code> can be skipped entirely, and a simple <code>int</code> used as the accumulator!</p>

<pre><code>                System.out.println(sc.tokens()
                        .limit(n)
                        .mapToInt(Integer::valueOf)
                        .reduce(0, (a,b) -&gt; a ^ b));
</code></pre>
    </div>