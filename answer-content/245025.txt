<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is not a proper review. I just want to show an argument why passign the input by value is actually more useful then passing it by const reference, in this particular case.</p>
<p>Yes, it's true you should not modify the input for the caller, because he didnt ask you to do so.</p>
<p>But it is also true, that your implementation takes advantage of the ability to modify the input.</p>
<p>As @Reinderien proposed, if you pass it by reference and create a copy inside your function you satisfy both the caller (who doesnt want his input changed) and the implementation (who wants to change the input so it can do its job effectively).</p>
<pre><code>int solution(const vector&lt;int&gt; &amp; input)
{
  vector&lt;int&gt; inputClone = input;

  // do the thing mutating inputClone

  return result;
}
</code></pre>
<p>But if you passed it by value, you actually satisfy both too and you get a shorter code.</p>
<pre><code>int solution(vector&lt;int&gt; input)
{
  // do the thing mutating input which already is a clone

  return result;
}
</code></pre>
<p>What make the pass-by-value approach even better is the fact that now you are allowing the caller to have its input vector mutated, if he doesn't need it after the function is called.</p>
<p>if caller wants immutable input he calls the function directly:</p>
<pre><code>int result = solution(input);

// here input is unchanged and I can work with it
</code></pre>
<p>if caller does not care if the input changes he can <code>std::move</code> it into the function:</p>
<pre><code>int result = solution(std::move(input));

// here input is probably changed, but I don't intend to touch it here anymore anyway
</code></pre>
<p>This cannot be done with const reference. If you make it accept const reference, the code is doomed to always create a copy, regardless of the caller requiring it.</p>
<p>So yes pass by const reference is generaly prefered, but when the function needs to copy the input so it can modify it so it can work efficiently and not mutate input for caller, use pass by value and let caller decide if he wants it to work with a copy or move the input to the function.</p>
    </div>