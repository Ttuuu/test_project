<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Let me start with a few quick things to enhance readability and then give some pointers how one could make this more maintainable, if one wanted to.</p>

<h2>Magic Numbers</h2>

<p>One thing that makes your code hard to follow is that you use magic numbers instead of named constants at multiple places. You already use <code>vbYesNo</code> for the MsgBox options most of the time. I wonder why you use <code>3</code> instead of <code>vbYesNoCancel</code> in the first message box. Moreover, the code would be more intuitive, if you replaced <code>6</code> by <code>vbYes</code> and <code>7</code> by <code>vbNo</code>. Whenever you want to use an explicit number in code, ask yourself whether there is a constant for that already and, if not, define a constant of your own and give it a semantic name.</p>

<h2>Indentation</h2>

<p>As @Greedo has pointed out in the comments, the strange indentation might be an artifact of how you have posted the code. However, as is, the indentation makes the code unreadable. <code>ElseIf</code>s should line up with the corresponding <code>If</code> statements and their content should be indented one level deeper. Then, you know which level of the tree you are in while reading the code.</p>

<h2>Reuse of Variables</h2>

<p>It is generally confusing in code, if you reuse a local variable. There is no benefit from reusing the variable <code>a</code> here. Still, the reader of the code has to know that it has been reused for an entirely different question in the second part of the procedure.</p>

<h2>Naming</h2>

<p>Code should always strive to be self-documenting. The most important part in this is good naming of variables and procedures. They should always have a name indicating what they are/do; variables, properties and functions should be nouns and procedures should be verbs. Here, expressiveness trumps shortness: there is no problem with having a long name if you cannot express the meaning in a short name. If this leads to a very long name, it might be a smell that you should split something up.
In you specific case, all your answers are single letter variables without any meaning, which is not ideal. E.g. a better name for <code>e</code>, or rather <code>e = vbYes</code>, would be <code>nameStartsWithK</code>.
Note that applying semantic naming would have avoided the reuse of the variable <code>a</code> automatically since there is no sensible common name for the two uses.    </p>

<h2>Declaring Variables</h2>

<p>Do yourself a favor and always declare you local variables, e.g. using <code>Dim a As Long</code> right before using <code>a</code> the first time. This documents the variables type and subsequent assignment with an incompatible type will result in an error instead of unexpected behaviour. (VBA does a lot of <em>helpful</em> implicit conversions, though.)</p>

<h2>Option Explicit</h2>

<p>Please, always use <code>Option Explicit</code> on top of your component. You can let the editor add it automatically for new components by ticking <em>Require Variable Declaration</em> under <em>Tools-&gt;Options-&gt;Editor</em>. This will force you to declare all your variables. A very helpful side-effect is that it will catch typos in uses of your variables. E.g. is you try to reference <code>nameStartsWithK</code> but type <code>nameStartWithK</code>, it will complain that <code>nameStartWithK</code> is not declared. Without <code>Option Explicit</code>, you get a new variable of type <code>Variant</code> instead, which is really not what you want here.</p>

<h2>Use of End</h2>

<p>The <code>End</code> statement is something that usually should never be used. In general, it is unexpected behaviour that a called procedure terminates the entire program. Instead, the procedure should probably use <code>Exit Sub</code> in order to return execution to its caller.</p>

<h2>Use of Single-Line If Statements</h2>

<p>Single-line If statements like <code>If b &lt; 7 Then d = MsgBox("do you live in logan?", vbYesNo)</code> are generlly a bit confusing because there is no <code>End If</code> one starts to expect out of habit. However, this is amplified tremendously without proper indentation since it is not immediate clear for the reader what the next <code>ElseIf</code> refers to. </p>

<h2>Select Case Statement</h2>

<p>For your first <code>If</code> block, a <em>Select Case statement</em> would probably be semantically more appropriate.</p>

<pre><code>Select a
    Case vbYes
        MsgBox "Let the games begin!"
    Case vbNo
        MsgBox "Okay. Press ctrl K to start over."
    Case Else
        MsgBox "Sad. Come back later. Press ctrl K to start."
End Select
</code></pre>

<p>Note that I have removed the option <code>1</code> in the first case, which is <code>vbOKCancel</code>. More on this, next.</p>

<h2>User Experience</h2>

<p>Your first query to the user whether he wants to play a game has two somewhat strange features. </p>

<ol>
<li>When you confirm that the game starts, you do this in a message box with option <code>vbOKCancel</code> but never react to the result. As the user, I would expect that clicking the Cancel will abort the game. If the effect of <code>Cancel</code> is the same as <code>OK</code>, do not display a <code>Cancel</code> button.</li>
<li>It is usually percieved as rather annoying, if a dialog pops up in response to cancelling. This is exactly what happens in your first query to the user.</li>
</ol>

<h2>Using Indirection to Improve Maintainability</h2>

<p>When speaking about maintainability and flexibility one has to ask what you might want to change in the future and what is a hindering proper automated testing. In the case of this simple game, the latter is probably not a real concern, but for parts of larger applications, it is.</p>

<p>The main point of possible change I see here, is the presentation to the user. Not entirely by coincidence, this is also what would hinder any automated testing since blocking dialogs are a pain for that.</p>

<p>This is a bit more advanced, but what you could do to abstract away the use of the message box is to add a new class <code>YesNoUserInteraction</code> with a single function </p>

<pre><code>Public Function UserAgrees(ByVal questionText As String) As Boolean
    UserAgrees = (MsgBox(questionText , vbYesNo) = vbYes)
End Function
</code></pre>

<p>The you new it up and save it in a variable <code>Dim userInteraction As YesNoUserInteraction</code> in your code <code>Set userInteraction = New YesNoUserInteraction</code> and use that instead of the message box.</p>

<p>Going one step further, you can split out the part newing up the object and pass it as a parameter to the procedure.</p>

<pre><code>Public Sub Decision_tree()
    Dim userInteraction As YesNoUserInteraction
    Set userInteraction = New YesNoUserInteraction
    DecisionTreeImpl userInteraction 
End Sub

Private Sub DecisionTreeImpl(ByVal userInteraction As YesNoUserInteraction)
    ...
End Sub
</code></pre>

<p>This has the benefit that another class could implement <code>YesNoUserInteraction</code> and that could be provided as the user interaction to the implementation instead. This way, you can change the presentation entirely, e.g. using a custom user form, or automate the answers for unit testing.</p>

<p>The way it is, the intent to allow other implementations is not really clear though. We can go one step further and introduce a dedicated interface class <code>IYesNoUserInteraction</code> for the interaction.</p>

<pre><code>Public Function UserAgrees(ByVal questionText As String) As Boolean
End Function
</code></pre>

<p>Then, we can turn <code>YesNorUserInteraction</code> into <code>YesNoMsgBoxInteraction</code> and implement the interface.</p>

<pre><code>Implements IYesNoUserInteraction

Private Function IYesNoUserInteraction_UserAgrees(ByVal questionText As String) As Boolean
    UserAgrees = (MsgBox(questionText , vbYesNo) = vbYes)
End Function
</code></pre>

<p>To get the right names and signatures for the members to implement, you can use the two drop downs at the top of the code pane.</p>

<p>Finally, we can use it in the setup code.</p>

<pre><code>Public Sub Decision_tree()
    Dim userInteraction As IYesNoUserInteraction
    Set userInteraction = New YesNoMsgBoxInteraction
    DecisionTreeImpl userInteraction 
End Sub

Private Sub DecisionTreeImpl(ByVal userInteraction As IYesNoUserInteraction)
    ...
End Sub
</code></pre>

<p>This makes it clear that we can provide anything to the procedure that honors the contract to take a question and return an answer in the form of a Boolean with <code>True = Yes</code>.</p>

<p>Obviously, this does not deal with the first question to the user, since you want to allow cancellation. You could do that in a similar way as presented here, but not with a simple Boolean. </p>

<h2>Separation of Responsibilities</h2>

<p>The last observation above points to a further thing that could be improved in your code. Currently, it violates the so-called <em>Single Responsibility Principle</em>. In essence, it states that any unit of computation, e.g. a procedure, should be responsible for one and only one thing. Yours actually is for two: asking the user whether he wants to play at all and playing the game. </p>

<p>What you could do instead is to extract a function and a procedure. The function could ask whether the user wants to play and return <code>True</code> if he wants to play and <code>False</code>, otherwise. Then, the procedure actually playing the game is only called if the user wanted to play.</p>

<p>Since the procedure is not large, this does not seem to be much of a problem that it might change for entirely different reasons: changing how a user is asked and playing the game differently. However, if you ever want to write something more complicated, you should get into the habit of splitting things up into small units with a defined purpose. That makes reading the code and figuring out what it actually does later on much easier.</p>
    </div>