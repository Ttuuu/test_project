<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Loop like a native</h2>

<pre><code>    labels = ['GD', 'GDD','TOD', 'FOD', 'QOD']
    for i in range(len(labels)):
        print(labels[i] + ' = ' + str(disp[i]) +  ' +/- ' + str(disp_std[i]) + ' 1/fs^{}'.format(i+1))
</code></pre>

<p>can be improved.</p>

<pre><code>labels = ('GD', 'GDD','TOD', 'FOD', 'QOD')  # Immutable tuple
for i, (label, disp_item, disp_std_item) in enumerate(zip(labels, disp, disp_std)):
    print(f'{label} = {disp_item} Â±{disp_std_item} 1/fs^{i+1}')
</code></pre>

<h2>Don't repeat yourself</h2>

<pre><code>    if fit_order == 5:
        fitModel = Model(poly_fit5)
        params = fitModel.make_params(b0 = 0, b1 = 1, b2 = 1, b3 = 1, b4 = 1, b5 = 1)
        result = fitModel.fit(fullYValues, x=fullXValues, params=params, method='leastsq') 
</code></pre>

<p>etc. should probably be</p>

<pre><code>fit_model = Model(poly_fit)
params = fit_model.make_params(
    b0 = 0,
    **{f'b{i}': 1 for i in range(1, fit_order+1)}
)
result = fitModel.fit(fullYValues, x=fullXValues, params=params, method='leastsq') 
</code></pre>

<p>where <code>poly_fit</code> is itself generalized:</p>

<pre><code>def poly_fit(x, *args):
    return sum(b*x**i for i, b in enumerate(args))
</code></pre>

<p>That said, <code>numpy</code> has better and faster ways to do this.</p>
    </div>