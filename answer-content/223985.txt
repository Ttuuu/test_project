<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>For me overall it was very easy to read and follow.</p>

<p>Nitpicking:</p>

<ul>
<li><p>Since you want to accept a single input, you can actually check for <code>if (args.length == 1)</code></p></li>
<li><p>You are already chaining the conditionals so why not the following?</p></li>
</ul>

<pre><code>private static boolean isMagicPresent(String file) throws IOException {
    try (InputStream is = new FileInputStream(file)) {
        byte[] bytes = new byte[4];
        return is.read(bytes) == 4 &amp;&amp;
                Byte.toUnsignedInt(bytes[0]) == 0xCA &amp;&amp;
                Byte.toUnsignedInt(bytes[1]) == 0xFE &amp;&amp;
                Byte.toUnsignedInt(bytes[2]) == 0xBA &amp;&amp;
                Byte.toUnsignedInt(bytes[3]) == 0xBE;
    }
}
</code></pre>

<ul>
<li><p>You can present the example usage within quotes as in <code>'filename.ext'</code> since whitespaces are allowed in most operating systems and I may try running your program as in <code>java Magic Mag ic.class</code> which would return <code>Mag (No such file or directory)</code> but running with <code>java Magic 'Mag ic.class'</code> returns <code>'Mag ic.class' contains the magic number.</code> when I actually have this file..</p></li>
<li><p><code>isMagicPresent</code> can accept an <code>InputStream</code> instead of a file path which would make testing the method easier and de-coupling it from a file.</p></li>
</ul>

<pre><code>private static boolean isMagicPresent(InputStream is) throws IOException {
    byte[] bytes = new byte[4];
    return is.read(bytes) == 4 &amp;&amp;
            Byte.toUnsignedInt(bytes[0]) == 0xCA &amp;&amp;
            Byte.toUnsignedInt(bytes[1]) == 0xFE &amp;&amp;
            Byte.toUnsignedInt(bytes[2]) == 0xBA &amp;&amp;
            Byte.toUnsignedInt(bytes[3]) == 0xBE;
}
</code></pre>

<p>Keep up the good work.</p>
    </div>