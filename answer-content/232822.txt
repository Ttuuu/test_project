<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Restructuring and optimization</h3>

<p>The initial approach is totally relies on <em>if-else ternary</em> conditions, supposedly attempting to make the code compact.<br> But in this case it was overused and comes to negative effects in readability and redundant reassignment to the same variable multiple times (all those numerous <code>var = ... else var</code>)</p>

<p>One subtle detail that might be unnoticed at 1st glance is that all conditions for variables <strong><code>var1</code></strong>, <strong><code>var2</code></strong>, <strong><code>var3</code></strong>(partially), <strong><code>var5</code></strong> and <strong><code>var6</code></strong> are checked with <em>precedence</em> in relation to the final value assigned to a related variable.<br>Let's look at the sequence of conditions for <strong><code>var5</code></strong>:</p>

<pre><code>var5 = 1 if 'q006_a01' in data['q006'] else 0
var5 = 2 if 'q006_a02' in data['q006'] else var5
var5 = -10 if 'q006_a03' in data['q006'] else var5
var5 = -2 if 'q006_a04' in data['q006'] else var5
</code></pre>

<p>if <code>'q006_a04' in data['q006']</code> is <em>truthy</em> then <code>var5</code> is just assigned with <code>-2</code> and <strong>all</strong> previous conditions become redundant. The same applies for other variables mentioned above. <br>That means that the optimal way is to build the conditional flow in <em>"upstream"</em> manner (basing on precedence).</p>

<p>The intermediate optimizations include:</p>

<ul>
<li><p>all variables (except <code>var7</code>) is initialized at once:</p>

<pre><code>var1 = var2 = var3 = var4 = var5 = var6 = 0
</code></pre></li>
<li><p><code>var2</code> block has a common condition <code>'q002_a01' in data['q002']</code>. <em>Consolidate conditional expression</em> technique is applied (see below)</p></li>
<li><p><code>4 if True is data['q005'] else 0</code> is simply the same as <strong><code>4 if questionnaire['q005'] else 0</code></strong></p></li>
</ul>

<p>Considering the above conception and optimizations the restructured version is below (defined as <strong><code>calc_score</code></strong> function):</p>

<pre><code>def calc_score(questionnaire):
    # rules which define the values of the different variables
    var1 = var2 = var3 = var4 = var5 = var6 = 0

    if 'q001_a02' in questionnaire['q001'] or 'q001_a03' in questionnaire['q001']:
        var1 = 5
    elif 'q001_a01' in questionnaire['q001']:
        var1 = 2

    if 'q002_a01' in questionnaire['q002']:
        if 'q003_a02' in questionnaire['q003']:
            var2 = 2
        elif 'q003_a01' in questionnaire['q003']:
            var2 = -2

    if 'q004_a05' in questionnaire['q004']:
        var3 = 5
    else:
        if 'q004_a01' in questionnaire['q004']:
            var3 = 2
        if 'q004_a02' in questionnaire['q004']:
            var3 += 2
        if 'q004_a03' in questionnaire['q004']:
            var3 -= 1
        if 'q004_a04' in questionnaire['q004']:
            var3 += 1

    var4 = 4 if questionnaire['q005'] else 0

    if 'q006_a04' in questionnaire['q006']:
        var5 = -2
    elif 'q006_a03' in questionnaire['q006']:
        var5 = -10
    elif 'q006_a02' in questionnaire['q006']:
        var5 = 2
    elif 'q006_a01' in questionnaire['q006']:
        var5 = 1

    if 'q007_a02' in questionnaire['q007'] or 'q007_a03' in questionnaire['q007']:
        var6 = 1
    elif 'q007_a01' in questionnaire['q007']:
        var6 = 2

    var7 = questionnaire['q008']

    # formula to calculate score from variables
    score = var1 + var2 + var3 + var4 + ((var5 + var6) * var7)
    return score


# dictionary containing question and answer codes for an individual
data = {'q001': 'q001_a01',
        'q002': 'q002_a01',
        'q003': 'q003_a02',
        'q004': ['q004_a01', 'q004_a02', 'q004_a04'],
        'q005': False,
        'q006': 'q006_a03',
        'q007': 'q007_a01',
        'q008': 3}

print(calc_score(data))    # -15
</code></pre>
    </div>