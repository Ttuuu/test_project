<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>public class NoksStringBuilder {
</code></pre>
</blockquote>

<p>When told that something implements <code>StringBuilder</code>, I would expect it to implement the same interfaces.  </p>

<pre><code>public class NoksStringBuilder implements CharSequence, Appendable, Serializable {
</code></pre>

<p>This way it can be used as a replacement for a <code>StringBuilder</code> used in more generic circumstances.  </p>

<blockquote>
<pre><code>    String[] stringList = new String[INITIAL_SIZE];
</code></pre>
</blockquote>

<p>You call this a <code>stringList</code>, but it's actually a <code>String</code> array.  If it were an actual <code>List</code>, you could quit mucking around managing capacity.  </p>

<pre><code>      List&lt;String&gt; strings = new ArrayList&lt;&gt;();
</code></pre>

<p>This would push all the memory management off onto the <code>List</code>.  But I actually don't think that anything involving <code>String</code> is correct here.  More on that later.</p>

<blockquote>
<pre><code>    public void add(String s){
</code></pre>
</blockquote>

<p>Similarly, I would call this </p>

<pre><code>    public Appendable append(CharSequence csq) {
</code></pre>

<p>Then you could use it the same way as with a real <code>StringBuilder</code>.  Or you could use it the way you do your method (realizing that a <code>String</code> is a <code>CharSequence</code>).  </p>

<p>All this would make obvious that an array of <code>String</code> is not a good way to hold a <code>StringBuilder</code>.  For one thing, while it makes for a quick <code>append</code> of a <code>String</code>, it works less well with letters and you lose the random access aspect.  I'd probably try </p>

<pre><code>    private char[] sequence = new char[DEFAULT_CAPACITY];
</code></pre>

<p>That puts more work into <code>add</code> but makes <code>toString</code> simpler.  </p>

<pre><code>    public String toString() {
        return new String(sequence, 0, length);
    }
</code></pre>

<p>Note that <code>length</code> is an object field that you'll have to maintain.  It's the equivalent of your <code>characterCount</code>.  </p>

<p>Note that if you want to implement <code>capacity()</code>, you could just say </p>

<pre><code>    public int capacity() {
        return sequence.length;
    }
</code></pre>
    </div>