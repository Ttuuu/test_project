<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Encapsulation and Mutability</h2>

<p>Your <code>Card</code> class is a perfect candidate for being immutable: make <code>Kind</code> and <code>Suit</code> readonly fields or getter-only properties (prefer the later in most cases):</p>

<pre><code>public Kind Kind { get; }
public Suit Suit { get; }
</code></pre>

<p>You should also hide away the <code>Deck</code> list in <code>CardDeck</code>: making it readonly and <code>private</code> (or <code>protected</code>, if you are happy to commit to (and document) the internal representation) would probably be most sensible. Prevent the user shooting themselves in the foot by messing with state they shouldn't be able to access.</p>

<h2><code>Card..ctor(Kind, Suit)</code></h2>

<p><code>Enums</code> in .NET are very simple, and you have no gaurentee that a <code>Kind</code> is actually one of those you have declared. I would consider adding checks here to ensure that an invalid <code>Kind</code> or <code>Suit</code> is not used: catch the mistake early, because it will go wrong somewhere down the line, and the sooner you throw an exception at the consumer, the easier it will be for them to work out where they went wrong.</p>

<h2>Comparers</h2>

<p>Dfhwze's Answer indirectly addresses this, but your <code>Card.CompareTo(Card)</code> can never return <code>0</code>: this is very bad. It should check if the cards are equivalent, and return <code>0</code> in that instance and that instance only.</p>

<p>As alluded by Henrik Hansen, I would rename <code>CardSorter</code> to <code>CardComparer</code>: it's what everyone will assume, and I would certainly expect a <code>CardSorter</code> to provide a 'Sort' method. Again, the comparisons here don't allow for the same card appearing twice: your code <code>CardDeck</code> class may assume they are never equal, but other people may try to use this class for other purposes. These sorts of things need to be documented.</p>

<h2>Misc</h2>

<ul>
<li><p>Why should adding an already present card disallowed? Some cards games involve multiple complete 'decks' in a single 'deck'.</p></li>
<li><p>This all <em>needs</em> documention. As a consumer, I need to know that <code>AddCardOnBottom</code> won't accept an already present card.</p></li>
<li><p>As discussed by Henrik, <code>CardDeck.Sort</code> is a bit odd: I would remove it, and force the user to specify the type of sort they want (by using the <code>CardSorter</code> class).</p></li>
<li><p>I would rename <code>CardSorter</code> to <code>CardComparer</code>: it's what everyone will assume, and I would certainly expect a <code>CardSorter</code> to provide a 'Sort' method. Again, the ccomparisons here don't allow for the same card appearing twice: your code may not allow this, but other people may try to use this class for other purposes.</p></li>
<li><p>To reiterative dfhwze 's point, you should <em>not</em> be creating a new <code>Random</code> instance in <code>Shuffle</code>: either encapsulate one in the class which you take as a parameter to the constructor, or allow the <code>Shuffle</code> and other 'Random' methods to take one as a parameter.</p></li>
<li><p>You might consider making the type of your <code>enum</code>s explicit (e.g. both fit in a <code>byte</code>), and you could make your <code>Card</code> class an immutable struct with the same semantics, only it would take up less space and reduce the GC overhead.</p></li>
</ul>
    </div>