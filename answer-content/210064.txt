<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>General Feedback</h2>

<p>The code in the jsFiddle Demo appears to function well (although it isn't the same as the code above- see the next section for an explanation). There is good usage of <code>const</code> for values that are not re-assigned and functional programming with arrow functions.</p>

<h2>Flaw with event listener setup</h2>

<p>It appears that the fiddle has different code than appears here, but nonetheless, the code above contains the following line:</p>

<blockquote>
<pre><code>d.addEventListener("DOMContentLoaded", [preloadPath, loadFrame]);
</code></pre>
</blockquote>

<p>The second argument appears to be an array. I haven't seen an array there used before and it doesn't appear to work. The <a href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Parameters" rel="nofollow noreferrer">Parameters section of the MDN documentation for addEventListener</a> reads:</p>

<blockquote>
  <p><strong><code>listener</code></strong><br>
  The object which receives a notification (an object that implements the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Event" rel="nofollow noreferrer"><code>Event</code></a> interface) when an event of the specified type occurs. <strong>This must be an object implementing the <a href="https://developer.mozilla.org/en-US/docs/Web/API/EventListener" rel="nofollow noreferrer"><code>EventListener</code></a> interface, or a JavaScript <a href="https://developer.mozilla.org/en-US/docs/JavaScript/Guide/Functions" rel="nofollow noreferrer"><code>function</code></a></strong>. See <a href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#The_event_listener_callback" rel="nofollow noreferrer">The event listener callback</a> for details on the callback itself.<sup><a href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Parameters" rel="nofollow noreferrer">1</a></sup></p>
</blockquote>

<p>If you did need to have both functions run when that event occurs, you would either need to have a single callback function that calls both or call <code>addEventListener</code> once for each function. It appears that in the fiddle <code>preloadPath</code> has been removed...</p>

<h2>Suggestions</h2>

<h3>Variable naming</h3>

<p>The variable name <code>frame</code> sounds singular, yet it returns a <a href="https://developer.mozilla.org/en-US/docs/Web/API/NodeList" rel="nofollow noreferrer"><code>NodeList</code></a> which would typically contain multiple DOM elements. </p>

<blockquote>
<pre><code>const frame = d.querySelectorAll("iframe");
</code></pre>
</blockquote>

<p>Thus a more appropriate name would be <code>frames</code>. That way when statements like <code>frames.forEach()</code> is read, it implies that a function is invoked for each of the frames.</p>

<h3>The <code>setAttributes()</code> function</h3>

<p>Correct me if I am wrong but this function appears to do the same thing that <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign" rel="nofollow noreferrer"><code>Object.assign()</code></a>. I was able to replace calls to that function with calls to <code>Object.assign()</code> and still saw the attributes set as expected in Opera and Chrome.</p>

<h3>Arrow functions with empty argument lists</h3>

<p>You don't have to do this, but <code>_</code> could be used instead of empty parentheses for arrow functions with no named arguments. Refer to <a href="https://stackoverflow.com/q/41085189/1575353">this SO post</a> and its answers for more context.</p>

<h3>timeout in function returned by <code>throttle()</code></h3>

<p>While it would only save a couple lines, the arrow function passed to <code>setTimeout()</code> in the function returned by <code>throttle()</code> could be simplified to remove the curly braces. While this would mean that <code>true</code> would be returned, it doesn't affect anything.</p>

<pre><code>const throttle = (fn, delay) =&gt; {
  let canCall = true;
  return (...args) =&gt; {
    if (canCall) {
      fn.apply(null, args);
      canCall = false;
      setTimeout(_ =&gt; canCall = true, delay);
    }
  };
};
</code></pre>

<p><sup>1</sup><sub><a href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Parameters" rel="nofollow noreferrer">https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Parameters</a>)</sub></p>
    </div>