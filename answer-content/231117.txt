<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As I already mentioned in a comment below your question, scipy has <a href="https://docs.scipy.org/doc/scipy/reference/hacking.html#contributing-new-code" rel="nofollow noreferrer">contribution guidelines</a> that tell you what they expect from your code before even thinking about including it into scipy. The major keywords are:</p>

<ol>
<li>Unit tests</li>
<li>Documentation</li>
<li>Code style</li>
</ol>

<h1>Testing</h1>

<p>The first point of this list would also help you to answer your question about the algorithm's correctness automatically. This <a href="https://dsp.stackexchange.com/a/635">answers</a> to <a href="https://dsp.stackexchange.com/q/633"><em>What data should I use to test an FFT implementation, and what accuracy should I expect?</em></a> on the Signal Processing Stack Exchange can help you to get an idea on how that might look like. The documentation of the relevant functions (e.g. <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.fft.fft.html" rel="nofollow noreferrer">numpy.fft.fft</a>) in the scipy stack and <a href="https://github.com/numpy/numpy/blob/master/numpy/fft/tests/test_pocketfft.py" rel="nofollow noreferrer">their associated tests</a> can provide further hints. Since my knowledge on FT, DFT, FFT, WTF (;-) ), and the likes is a bit "rusty", you maybe have to look for ressources more appropriately matching what you intend to do.</p>

<h1>Documentation</h1>

<p>The documentation part is comparatevely simple. Again, there are <a href="https://docs.scipy.org/doc/numpy/docs/howto_document.html" rel="nofollow noreferrer">guidelines</a> on how to document code associated with the scientific Python stack (everything surrounding numpy/scipy). An example:</p>

<pre><code>def polar_to_complex(radii, angles):
    """Return r-phi coordinates to complex numbers

    Parameters
    ----------
    radii, angles: array_like
        radial and angular component of the polar coordinates. Both input have
        to have the same shape

    Returns
    -------
    out: ndarray
        complex representation of the given r-phi coordinates
    """
    return radii * np.exp(1j * angles)
</code></pre>

<p>This is also commonly called numpydoc oder NumPy-style documentation. It's a very feature rich style and I highly recommend to have a look at the ressource linked above to learn more.</p>

<p>Regarding type annotations: they are just that, annotations or hints. They are not checked during runtime, i.e. the Python interpreter does not care about your carefully crafted type hints. Static code analysis tools like <a href="http://mypy-lang.org/" rel="nofollow noreferrer">mypy</a> and <a href="https://www.pylint.org/" rel="nofollow noreferrer">pylint</a> are the tools that would make use of them to tell you about flaws that can be checked without actually running your code, hence the name "static code analysis". If you really want to make sure that all the inputs are how you expect them to be, you will have to write your own validation code raising appropriate exceptions at runtime to tell whoever uses your library incorrectly that they're doing so.</p>

<h1>Style</h1>

<p>The contribution guidelines clearly describe that your code is supposed to conform to <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP 8</a> conventions. There is also a hint to use automatic tooling in order to check your code in that regard. In case you don't like there suggestion on what tool to use, fear not! This <a href="https://codereview.meta.stackexchange.com/a/5252/92478">answer on Code Review meta</a> lists quite a few other tools that can help you in your endeavours to write beautiful Python code. Among others, they should tell you to use <a href="https://www.python.org/dev/peps/pep-0008/#function-and-variable-names" rel="nofollow noreferrer"><code>lower_case_with_underscore</code> names for function and variable names</a>, <a href="https://www.python.org/dev/peps/pep-0008/#other-recommendations" rel="nofollow noreferrer">avoid whitespace around <code>=</code> when used in keyword-arguments</a>, and that there <a href="https://www.python.org/dev/peps/pep-0008/#blank-lines" rel="nofollow noreferrer">should be two blank lines between functions at the module level</a>.</p>

<h1>Performance</h1>

<p>I have not actively checked the performance of your implementation compared to what's already implemented in numpy/scipy, but from my experience and since Fourier transformations are a very widely used tool, I highly suspect that such a simple implementation will be no match for current state-of-the-art implementations likely present in numpy/scipy. As I said, I did not check, so I might be wrong here.</p>

<p>If I were to guess, sorting is likely the single most costly operation in your algorithm, but again I have not measured it. If you are willing to look into this, <a href="https://docs.python.org/3/library/profile.html" rel="nofollow noreferrer"><code>cProfile</code></a> and <a href="https://docs.python.org/3/library/timeit.html" rel="nofollow noreferrer"><code>timeit</code></a> are likely the modules to look at.</p>
    </div>