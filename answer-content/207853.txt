<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Review</h1>

<p>Not bad for a beginner and welcome to the world of programing.</p>

<p>As you are new to coding I will just focus on one aspect of your code. The naming (which is very poor). There are many other things that I had to resist changing, but did not want to overwhelm you with the technicalities of client side Javascript, CSS, DOM, and markup.</p>

<h2>Naming</h2>

<ul>
<li>Naming is very important, it gives meaning to code, data, and how it relates to the abstract concepts that make up a project. Bad naming will result in hard to read code, ambiguity and bugs.</li>
<li>Good naming is not easy and takes time to learn by experience and example. (Read other peoples code and pay attention to how they name things).</li>
<li>Good naming does not name what something is, but what it represents in the current context of the code.</li>
<li>Good naming means you don't have to fill your code with comments to explain what can not be deduced from the code. Though you have done well in your comments :)</li>
</ul>

<p><strong>Some specific name examples.</strong></p>

<p>You have the variable  <code>children</code>. Yes it is a list of children, that can be worked out by looking at how you declare its content, but in a bigger project there will be many children. The name does not represent what abstractly it holds, and that is board positions. If I ask <code>What are the positions in a game of Tic Tac Toe?</code>, you know what that means, as opposed to <code>What are the children in a game of Tic Tac Toe?</code> whaa! I have renamed <code>children</code> to <code>positions</code></p>

<p>You have done the same in the CSS and markup. The classes <code>.child</code>, <code>.parent</code> <code>.animate</code> have no connection to the abstraction of Tic Tac Toe. Better name may be <code>.child</code> is <code>.position</code>, <code>.parent</code> is <code>.board</code>, <code>.animate</code> is <code>.playerMoved</code></p>

<p>Most of the function names are good with the exception of <code>childContent</code> and <code>clicked</code>. Better names could be <code>childContent</code> as <code>getPositonContent</code> (as you use this function a lot in <code>checkWinner</code> a better name is <code>getPos</code> so that the code is not cluttered with a long name) and <code>clicked</code> as <code>playerMove</code></p>

<h2>Refactoring your code.</h2>

<p>The rewrite is mostly just renaming the many poor names you used. There are also a few minor code changes. BTW the names I picked may not be what you would have used to represent the various abstracts, they are just examples.</p>

<ul>
<li><code>turnDisplay</code> created in load so you dont have to query the DOM each time.</li>
<li><code>playerMove</code> gets the position element rather than the index.</li>
<li>The listener for clear is passed the function directly rather than use the indirect call <code>addEventListener("click", function() { clearBoard() })</code></li>
<li>Changed some <code>innerHTML</code> references to <code>textContent</code></li>
</ul>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="false" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>let turn = true;
let positions, turnDisplay;
let winnerFound = false;


document.addEventListener('DOMContentLoaded', load);

function load() {
  positions = document.getElementsByClassName("position");
  turnDisplay = document.getElementById("turnDisplay");
  for (let i = 0; i &lt; positions.length; i++) {
    positions[i].addEventListener("click", function() {
      playerMove(positions[i])
    });
  }
  document.getElementById("clear").addEventListener("click", clearBoard);
  displayTurn();
}

function clearBoard() {
  for (let i = 0; i &lt; positions.length; i++) {
    positions[i].innerHTML = '';
    positions[i].classList.remove('playerMoved');
  }
  turn = true;
  winnerFound = false;
  displayTurn();
}

function displayTurn() {
  if (turn) {
    turnDisplay.textContent = "X";
  } else {
    turnDisplay.textContent = "O";
  }
}

function playerMove(position) {
  if (winnerFound) {
    return
  }
  if (position.childElementCount !== 0) {
    return
  }
  const mark = document.createElement('div');
  if (turn) {
    mark.textContent = 'X'
  } else {
    mark.textContent = 'O'
  }
  position.appendChild(mark);
  position.classList.add('playerMoved');
  turn = !turn;
  checkWinner();
  displayTurn();
}

function checkWinner() {
  for (let x = 0; x &lt; 9; x += 3) {
    if (getPos(x) === getPos(x + 1) &amp;&amp; getPos(x) === getPos(x + 2)) {
      alert(getPos(x) + " won!");
      winnerFound = true;
    }
  }
  for (let x = 0; x &lt; 3; x += 1) {
    if (getPos(x) === getPos(x + 3) &amp;&amp; getPos(x) === getPos(x + 6)) {
      alert(getPos(x) + " won!");
      winnerFound = true;
    }
  }
  if (getPos(0) === getPos(4) &amp;&amp; getPos(0) === getPos(8)) {
    alert(getPos(0) + " won!");
    winnerFound = true;
  }
  if (getPos(2) === getPos(4) &amp;&amp; getPos(2) === getPos(6)) {
    alert(getPos(2) + " won!");
    winnerFound = true;
  }
}

function getPos(index) {
  if (positions[index].childElementCount === 0) {
    return index
  }
  return positions[index].textContent;
}</code></pre>
<pre class="snippet-code-css lang-css prettyprint-override"><code>body {
  background: lightgray;
  text-align: center;
  vertical-align: middle;
}

.position:hover {
  background-color: darkgrey;
}

.board {
  display: inline-flex;
  flex-wrap: wrap;
  width: 400px;
}

.position {
  flex: 1 0 calc(33% - 10px);
  margin: 5px;
  height: 80px;
  background-color: grey;
}

.playerMoved {
  animation: changeColor 0.5s forwards;
}

@keyframes changeColor {
  0% {
    background-color: darkgrey;
  }
  100% {
    background-color: khaki;
    font-size: 60px;
  }
}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;div&gt;
  &lt;h1&gt;Tic Tac Toe&lt;/h1&gt;
  &lt;h2&gt;It is now the turn of: &lt;span id="turnDisplay"&gt;&lt;/span&gt;&lt;/h2&gt;
  &lt;button id="clear"&gt;CLEAR&lt;/button&gt;
&lt;/div&gt;
&lt;div class="board"&gt;
  &lt;div class="position"&gt;&lt;/div&gt;
  &lt;div class="position"&gt;&lt;/div&gt;
  &lt;div class="position"&gt;&lt;/div&gt;
  &lt;div class="position"&gt;&lt;/div&gt;
  &lt;div class="position"&gt;&lt;/div&gt;
  &lt;div class="position"&gt;&lt;/div&gt;
  &lt;div class="position"&gt;&lt;/div&gt;
  &lt;div class="position"&gt;&lt;/div&gt;
  &lt;div class="position"&gt;&lt;/div&gt;
&lt;/div&gt;</code></pre>
</div>
</div>


<p><sub><sup><strong>Note:</strong> the above example is just concerned with naming, and does not represent an ideal code example. The idea was to keep as close to the OP's original code as possible.</sup></sub></p>
    </div>