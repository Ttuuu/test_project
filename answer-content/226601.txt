<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Firstly I'd suggest following <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP8</a> and/or using an auto-formatter like <a href="https://github.com/psf/black" rel="nofollow noreferrer">black</a>, but if it's just you working on it
that is a bit less of an issue than if other people were involved.
Suffice to say, most code follows that and it usually gets flagged first
thing (because it's so noticeable).</p>

<p>Reading the code, is that all there is, you are able to log in via a
GUI?  Then I'd say first thing would probably be not to hardcode the
credentials to the database.  So what/how's this securing anything?  If
the program has the credentials ... and the program is being run by the
user who's authenticating ... what stops me from connecting directly to
the database?</p>

<hr>

<p>Apart from that fundamental issue looks mostly okay, no SQL injection
since the <code>execute</code> will handle that.</p>

<p><code>__</code> as prefix for the variable names is unnecessary and confusing.  I
can't see why it's there at all.</p>

<p>Actually, <code>SELECT password ...</code> ... the password's stored in plaintext?
Big no-no in anything used by other people.  Do not store passwords in
plaintext.</p>

<p>The properties at the end of <code>DatabaseManip</code> seem not very useful, in
Python there's no need for them unless you want to control what/how
values are stored in the object / how they're computed if they're not
stored at all.</p>

<p>The <code>__str__</code> method is there for what reason?  That's very much
confusing the responsibility of the class.  It would somewhat make sense
if it's being used interactively in a REPL, otherwise I can't see the
reason for having it.  Oh.  Oh now I see it.  Yeah, don't do that,
that's bad style.  How I'd expect things to go is something like this:</p>

<pre><code>    def submit(self):
        result = db.DatabaseManip().check_credentials(self.ent_username,self.ent_password)
        if result == "correct":
            self.initialize_mainApplication()
        elif result == "incorrect":
            messagebox.showerror("Incorrect Password","You have entered incorrect password")
            # add deleter
        elif result == "notexist":
            messagebox.showerror("Username does not exist","The username you entered does not exist")
        else:
            messagebox.showerror("Unexpected validation result","Validation of credentials failed unexpectedly with result".format(result))
</code></pre>

<p>So here: Validating is an action, a method.  The parameters of which
aren't part of the helper object, but method parameters.  The result is
still a string (try making this an enumeration, that's more "correct" in
a way as you really want to have a fixed set of possible results, not a
string that can contain basically anything.  Finally, the programmer
error case is handled too (the last <code>else</code>).</p>

<p>Also note that <code>... is "foo"</code> is <em>likely</em> incorrect, c.f.
<code>"foo" is "foobar"[0:3]</code>, <a href="https://docs.python.org/3/reference/expressions.html#is-not" rel="nofollow noreferrer"><code>is</code> does a check for object identity</a>, <a href="https://www.geeksforgeeks.org/difference-operator-python/" rel="nofollow noreferrer">not
equality</a>!  Not even numbers are same via <code>is</code> if they're not interned at
the same time:</p>

<pre><code>1000000 == 1000000 # _always_ True

x = 1000000
y = 1000000
x is y # _probably_ False
</code></pre>

<p>Also <code>if x == True</code> can obviously be simplified to <code>if x</code>.</p>

<hr>

<p>So it's not all bad, simply try and stay away from "stringly"-typed
things, use the language features as they're intended and have a goal
for what your security requirements are.  I've not gone into more detail
on the last bit simply because I still don't understand the intent
here.  Suffice to say like this it would only work if the user can't
exit the UI and open a shell / other means of executing code on the
machine (like in a kiosk configuration with limited access to
peripherals and the machine itself).  Or if the actual database access
was moved to a separate external service that (again) can't be
circumvented by the local user.</p>
    </div>