<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Using <code>ToString()</code> to compare expressions for equality might work in simple cases, but:</p>

<ul>
<li>It requires you to always use the same parameter name, for example, it would consider <code>x =&gt; x.Id</code> and <code>product =&gt; product.Id</code> to be different expressions.</li>
<li>Expressions with different meaning can produce the same string, for example <code>(int i) =&gt; (float)i</code> and <code>(int i) =&gt; (double)i</code> both produce <code>i =&gt; Convert(i)</code>. Because of this, it might make sense to ensure that the used expressions contain only property accesses and nothing else.</li>
</ul>

<p>Instead you should <a href="https://stackoverflow.com/a/673246/41071">compare <code>Expression</code>s properly</a>.</p>

<hr>

<p>It seems wasteful to me to rebuild all indexes after each change. If you change the collection often, consider changing only the relevant part of each index.</p>

<hr>

<p>Fields that are set in the constructor and then never modified should be <code>readonly</code>.</p>

<hr>

<pre><code>IList&lt;T&gt; data
</code></pre>

<p>If you're on .Net 4.5, you could use <code>IReadOnlyList&lt;T&gt;</code> here.</p>

<hr>

<pre><code>if (_lookups.Count &gt; 0)
</code></pre>

<p>This check is pretty much useless. It saves you from unnecessarily creating an empty dictionary, but doing that is very cheap, so I think shorter code should take the priority here.</p>

<hr>

<p>You could replace the whole <code>RebuildIndexes()</code> method with a single <code>ToDictionary()</code>:</p>

<pre><code>_indexes = _lookups.ToDictionary(
    lookup =&gt; lookup.ToString(), lookup =&gt; _items.ToLookup(lookup.Compile()));
</code></pre>

<hr>

<pre><code>c(x).Equals(value)
</code></pre>

<p>This won't work correctly when <code>c(x)</code> returns <code>null</code>. You should probably use <code>object.Equals(c(x), value)</code> instead.</p>
    </div>