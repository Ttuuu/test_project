<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><a href="https://en.wikipedia.org/wiki/Javadoc" rel="nofollow noreferrer">Javadoc, Javadoc, Javadoc!</a></p>

<hr>

<pre><code>import java.util.*;
import java.io.*;
</code></pre>

<p>I'm not a fan of wildcard imports. You might actually end up with the wrong function being imported. Also any modern IDE will happily manage the imports for you.</p>

<hr>

<pre><code>private static Scanner scan = new Scanner(System.in);
</code></pre>

<p><code>scan</code> is an action, <code>scanner</code> would be a better name.</p>

<hr>

<pre><code>Forest thisForest = null;
char userInput = ' ';
String forestName;
int height = 0;
String loadName = null;
</code></pre>

<p>Either you initialize variables with default values, or you don't, be consistent.</p>

<hr>

<pre><code>System.out.print("(D)isplay, (N)ew, (Y)ear, (R)eap, (S)ave, (L)oad, e(X)it :");
userInput = scan.next().charAt(0);
</code></pre>

<p>You repeat this all over your code, find a way to do this only once (for example at the start of the <code>while</code>).</p>

<hr>

<pre><code>}catch(IOException e){
    System.out.println("Cannot save.");
}
</code></pre>

<p>Now that is helpful. If you do not know how to handle exceptions then do a <code>e.printStackTrace()</code> or <code>System.err.println(e.getMessage())</code>, because then the user at least has a chance to figure out <em>why</em> it did not work.</p>

<p>Swallowing and silencing exceptions is only acceptable if you <em>really</em> know <em>why</em> you want this.</p>

<hr>

<pre><code>private final int MAX_NUM_TREES = 10;
</code></pre>

<p>I know this has been declared in the description, but a better way would be to have the <code>Forest</code> accept the number of trees and the growth rate in the constructor and have the constant in the <code>Main</code> class. That way your <code>Forest</code> class can be easier reused.</p>

<hr>

<pre><code>int index;
</code></pre>

<p>Nice idea to reuse the constantly used <code>int</code>. However, I hate to break it to you that is completely unnecessary, actually it is the opposite of helpful because it makes your code more error prone and a little bit harder to read. If you start reading the class you see <code>index</code> and wonder why the <code>Forest</code> requires to hold an index of itself.</p>

<p>Whether or not the JVM has to allocate <em>one</em> integer doesn't matter. More so, as <code>int</code> is not an <code>Object</code>, neither does its allocation influence garbage collection in away. It is way fucking cheap to allocate an <code>int</code>, always. Well, if you have something like a million <code>int</code>s or so, we can start talking about having them cached, but not a single one.</p>

<hr>

<pre><code>private Tree[] arrayOfTrees;
</code></pre>

<p>Consider using a <code>List</code> instead of an array, as it has more convenience functions and is easier to handle.</p>

<p>You still enforce the limit on the number of trees anyway.</p>

<hr>

<pre><code>public Forest(String forestName){
    name = forestName;
</code></pre>

<p>Normally you'd do this:</p>

<pre><code>public Forest(String name){
    this.name = name;
</code></pre>

<p>Don't try to repeat already available information, for example if you have a class which handles the user-input, don't try to have this chain:</p>

<pre><code>org.yourdomain.application.inputhandling.InputHandler.handleInput(InputStream)
</code></pre>

<p>You constantly repeat yourself and add nothing of value to the names.</p>

<p>org.yourdomain.application.ui.StreamHandler.process(InputStream)</p>

<p>So I know it is part of the "user interface" package, so the class handles the input from a stream, and then it processes the input.</p>

<p>Naming is hard, though, takes a lot of practice to get halfway good at it.</p>

<hr>

<pre><code>public void display(){
</code></pre>

<p>Ideally you would only provide means to get the needed information from <code>Forest</code> and the main class would handle displaying it.</p>

<p>That decouples your class from the environment it is being used in.</p>

<hr>

<pre><code>if(name != null){
</code></pre>

<p>What? How or why is this a valid state?</p>

<pre><code>public Forest(String name){
    if (name == null || name.trim().isEmpty()) {
        throw new IllegalArgumentException("The forest must have a name.");
    }
</code></pre>

<hr>

<pre><code>public static void saveForest(Forest forest) throws IOException {
</code></pre>

<p>Why static? If this would be an instance method, extending classes would have a chance to implement their own logic.</p>

<p>Moreover, this should accept a directory (<code>null</code> for current).</p>

<hr>

<pre><code>ObjectOutputStream toStream;

toStream = new ObjectOutputStream(new FileOutputStream(name));
</code></pre>

<p>Why not directly assign it? Moreover, you should use a <a href="https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html" rel="nofollow noreferrer">try with resources</a> statement to make sure that the stream is always closed.</p>

<p>Creating filestreams has the potential to leak file handles if they have not been closed.</p>

<hr>

<pre><code>return(local);
</code></pre>

<p>Random parenthesis? <code>return</code> is a keyword, not a function.</p>

<hr>

<pre><code>final double MIN_HEIGHT = 1;
final double MIN_GROWTH_RATE = 0.5;
final double MAX_HEIGHT = 5;
final double MAX_GROWTH_RATE = 1.0;
</code></pre>

<p>Ideally these would also be properties handed to the Forest. Consider the following structure:</p>

<pre><code>class Forest
    public static final int DEFAULT_MAX_TREES = 10;
    public static final double DEFAULT_MIN_TREEHEIGHT = 0.5d;
    ...

    public Forest(name) {
        this(name, DEFAULT_MAX_TREES, DEFAULT_MIN_TREEHEIGHT, ...)
    }

    public Forest(name, int maximumTrees, double minTreeHeight) {
        trees.add(new Tree(minTreeHeight, ...)
</code></pre>

<p>But I like that the <code>Tree</code> is responsible for its growing, that gives extending classes a chance to easily change the logic and also gives you the possibility to mix different <code>Tree</code> classes in the <code>Forest</code>.</p>

<pre><code>trees.add(new Tree(...));
trees.add(new SlowGrowingTree(...));
trees.add(new FastGrowingTree(...));
trees.add(new SickTree(...));
</code></pre>

<hr>

<pre><code>Random rand = new Random();
</code></pre>

<p>As a heads up, please always be aware how the default constructor of a PRNG works! In this case this usage is okay because the default constructor of <code>Random</code> tries <em>very, very</em> hard to not give you to matching instances <em>ever</em>. However, the .NET <code>Random</code> class for example is (or at least was for a decade) initialized with the current timestamp in seconds, so if you did this:</p>

<pre><code>Random a = new Random();
Random b = new Random();
Random c = new Random();
Random d = new Random();
</code></pre>

<p>All four instances would return the same numbers.</p>

<p>That's something to keep in mind, always check the documentation if you are safe or not.</p>

<hr>

<p>Overall looks quite nice, good job.</p>
    </div>