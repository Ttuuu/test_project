<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Inheritance</h3>

<ul>
<li>the point of inheritance and <code>abstract</code> base classes or <code>interface</code>s is to have a common API that each type implements in its own way. Your inhertiance model doesn't do that. Classes that are inherited from the <code>PageModelBase</code> add a lot new APIs like the <code>SearchModel</code>. Some of them like the <code>FirstPage</code> method even gets a new overload. This is very confusing. It's difficult to figre out how these models are used but they definitely shouldn't be based on <code>PageModelBase</code>.</li>
<li>the <code>abstract class PagedModelBase</code> doesn't have any <code>abstract</code> or <code>virtual</code> methods so there is not reason for it to be <code>abstract</code> because you don't <code>override</code> anything. It looks like it should be a <code>PageNavigator</code> that other classes use as a service/dependency. In other words, you cannot use the <code>SearchModel</code> where you currently use <code>TableModel</code> because even though they share a common base class, they are not exchangable as they use additionl and specialized APIs.</li>
</ul>

<h3>Repetitions</h3>

<blockquote>
<pre><code>internal override List&lt;ContractTableRow&gt; LoadPage()
{
  Stopwatch stopwatch = new Stopwatch();
  stopwatch.Start();

  // do soemthing...

  stopwatch.Stop();
  logger.Debug("Поиск договора: {0}", stopwatch.Elapsed);

  return list;
}
</code></pre>
</blockquote>

<ul>
<li>you use this pattern in a lot of places. It'd better to create a benchmark-helper or even a decorator for your models that would add this layer outside the core APIs. </li>
<li>you can instantly start with <code>Stopwatch.StartNew()</code></li>
<li>there's no need to stop it, just call <code>stopwatch.Elapsed</code></li>
</ul>

<h3>Misc</h3>

<ul>
<li>some of the names are confusing like where you write <code>SearchArgs GetArgs</code>. This property should also be called <code>SearchArgs</code></li>
<li>I cannot find any <code>event SearchChanged&lt;SearchArgs&gt;</code> so I think you are not using it with an event. If this is true, then you shouldn't be using <code>EventArgs</code> as its base class because there is no benefit in doing so.</li>
<li>using <code>var</code> instead of full types would make your code less verbose and consequently easier to read</li>
<li><code>ContractModel.Delete</code> (and others) returns a <code>bool</code> but more useful would be to return the number of affected rows that <code>SaveChanges</code> returns. <code>bool</code> doesn't tell me whether anything has actually been deleted, only that the method didn't fail. This is rarely useful.</li>
<li>you decrease <code>Count--</code> after a deletion without actually checking if anything has been really deleted. You should check what <code>SaveChanges</code> returs.</li>
<li>I don't think that models should use the static <code>ShowMessage</code> type. It should be a service that is injected via the constructor.</li>
<li>you should use constants for all the magic-strings like <code>"Num"</code> or <code>"Salary"</code> etc.</li>
</ul>
    </div>