<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2><code>startTimer()</code></h2>

<p>The <code>time</code> package provides timers natively. So rather than using a call to <code>time.Sleep()</code>, you can use <a href="https://golang.org/pkg/time/#NewTimer" rel="noreferrer"><code>time.NewTimer()</code></a>.</p>

<p>Use <code>fmt.Printf()</code> rather than <code>fmt.Println()</code> for printing formatted strings.</p>

<pre><code>func startTimer(seconds int) {
    time.Sleep(time.Duration(seconds) * time.Second)
    fmt.Println("Time is up! You got ", points, " points")
    os.Exit(0)
}
</code></pre>

<p>Becomes:</p>

<pre><code>func startTimer(sec int) {
    timer := time.NewTimer(time.Duration(sec) * time.Second)
    &lt;-timer.C
    fmt.Printf("Time is up! You got %d points\n", points)
    os.Exit(0)
}
</code></pre>

<h2><code>readCSV()</code></h2>

<p>In <code>readCSV()</code>, you have multiple error variables. You can instead use a single error variable as you go along.</p>

<p>I advise against adding file retry logic. It complicates the code, and most users can simply re-run the command upon error. Instead, you should return an error value.</p>

<p>Using a named return (<code>questions</code>) means you should actually use the <code>questions</code> variable. Because I switch to multiple return values, I removed the named parameter.</p>

<p>Also be sure to close the file after you're done reading from it.</p>

<pre><code>func readCSV(s string) (questions [][]string) {
    f, err1 := os.Open(s)
    records, err2 := csv.NewReader(f).ReadAll()
    for err1 != nil || err2 != nil {
        fmt.Println("Error: ", err1, err2)
        fmt.Println("Please re-enter the name of the CSV file: ")
        fmt.Scan(&amp;s)
        f, err1 = os.Open(s)
        records, err2 = csv.NewReader(f).ReadAll()
    }
    return records
}
</code></pre>

<p>Becomes:</p>

<pre><code>func readCSV(name string) ([][]string, error) {
    f, err := os.Open(name)

    if err != nil {
        return nil, err
    }

    qs, err := csv.NewReader(f).ReadAll()

    if err != nil {
        return nil, err
    }

    return qs, f.Close()
}
</code></pre>

<h2><code>askQuestions()</code></h2>

<p>Again, here you should use <code>fmt.Printf()</code> to print formatted strings.  You also use the value <code>i</code> as an index, but with the <code>range</code> keyword you can access the currently indexed value, see <a href="https://tour.golang.org/moretypes/16" rel="noreferrer">here</a>.</p>

<p>You should check the return of <code>fmt.Scan()</code>.</p>

<p>Rather than starting the timer within <code>askQuestions()</code>, I opted to move it to <code>main()</code>. This means we can remove the <code>time</code> argument.</p>

<h2><code>main()</code></h2>

<p>Naming variables like <code>fPtr</code> and <code>sPtr</code> is just extra typing. Documenting the type in the name itself is not very useful.</p>

<ul>
<li><code>fPtr</code> becomes <code>name</code></li>
<li><code>tPtr</code> becomes <code>time</code></li>
<li><code>sPtr</code> becomes <code>shuffle</code></li>
</ul>

<p><strong>From your updated code with shuffling:</strong></p>

<p>Rather than keeping a second copy of the shuffled questions, just modify the array in-place. You also don't need to seed <code>rand</code> (see <a href="https://tip.golang.org/pkg/math/rand/#Shuffle" rel="noreferrer">this example</a> from the Go docs).</p>

<h2>Conclusion</h2>

<p>Here is the code I ended up with:</p>

<pre><code>package main

import (
    "encoding/csv"
    "flag"
    "fmt"
    "log"
    "math/rand"
    "os"
    "time"
)

var points int

func main() {
    name := flag.String("csv", "problems.csv",
        "filename in csv (question, answer)")
    time := flag.Int("time", 10, "time in seconds")
    shuffle := flag.Bool("shuffle", true, "shuffle your question order")

    flag.Parse()

    questions, err := readCSV(*name)

    if err != nil {
        log.Fatal(err)
    }

    if *shuffle {
        rand.Shuffle(len(questions), func(i, j int) {
            questions[i], questions[j] = questions[j], questions[i]
        })
    }

    go startTimer(*time)

    if err := askQuestions(&amp;questions); err != nil {
        log.Fatal(err)
    }

    fmt.Printf("You got %d points\n", points)
}

func readCSV(name string) ([][]string, error) {
    f, err := os.Open(name)

    if err != nil {
        return nil, err
    }

    qs, err := csv.NewReader(f).ReadAll()

    if err != nil {
        return nil, err
    }

    return qs, f.Close()
}

func askQuestions(questions *[][]string) error {
    for i, q := range *questions {
        fmt.Printf("Question %d: %s\n", i+1, q[0])

        var a string
        _, err := fmt.Scan(&amp;a)

        if err != nil {
            return err
        }

        if a == q[1] {
            points++
        }
    }

    return nil
}

func startTimer(sec int) {
    timer := time.NewTimer(time.Duration(sec) * time.Second)
    &lt;-timer.C
    fmt.Printf("\nTime is up! You got %d points\n", points)
    os.Exit(0)
}
</code></pre>

<p>Hope this helps!</p>
    </div>