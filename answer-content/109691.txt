<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is one of the standard examples for algorithmic complexity.  This algorithm is very easy to understand since it matches the mathematical definition well, but performs miserably since it's trying to calculate a number that grows exponentially by adding 0s and 1s together.</p>

<p>The key observation is that to calculate, say, <code>fibonacci(5)</code>, it has to recursively calculate <code>fibonacci(4)</code> and <code>fibonacci(3)</code>.  Then to calculate <code>fibonacci(4)</code>, it has to calculate <code>fibonacci(3)</code> again, which is completely wasteful.  There are several things we can do to go faster:</p>

<ul>
<li>Build from the bottom up.  Start two variables <code>a=0</code> and <code>b=1</code>, then run a loop where you set <code>a=b</code> and <code>b=a+b</code> (careful to not blast values as you're using them).  This is how you would do it by hand.</li>
<li>Use your recursive solution, but cache the results so that it doesn't repeat work.  This is called <em>memoization</em>.</li>
<li>Use the closed-form formula.</li>
</ul>
    </div>