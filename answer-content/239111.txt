<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'd suggest:</p>

<pre><code>public static class AttributeExtensions
{
    public static string GetMyAttributeNameOfProperty&lt;TClass&gt;(string propertyName)
    {
        var propertyInfo = typeof(TClass).GetProperty(propertyName);
        return propertyInfo?.GetCustomAttribute&lt;MyAttribute&gt;()?.Name ?? default;
    }
}
</code></pre>

<p>Usage:</p>

<pre><code>var awesome = AttributeExtensions.GetMyAttributeNameOfProperty&lt;Matrix&gt;(nameof(Matrix.AwesomeName));
Console.WriteLine(awesome);
</code></pre>

<p><strong>Note</strong>:  The above isn't an extension method.  The below code is.</p>

<pre><code>public static class AttributeExtensions
{
    public static string GetMyAttributeNameOfProperty&lt;TType&gt;(this TType me, string propertyName) where TType : Type
    {
        var propertyInfo = me.GetProperty(propertyName);
        return propertyInfo?.GetCustomAttribute&lt;MyAttribute&gt;()?.Name ?? default;
    }
}
</code></pre>

<p>Usage:</p>

<pre><code>var awesome = typeof(Matrix).GetMyAttributeNameOfProperty(nameof(Matrix.AwesomeName));
Console.WriteLine(awesome);
</code></pre>

<p>Both output:</p>

<blockquote>
  <p>awesome_name</p>
</blockquote>

<p>Benefits:</p>

<ul>
<li>Does not use an <code>Expression</code> or even the namespace
<code>System.Linq.Expressions</code> </li>
<li>Won't throw an exception (returns <code>null</code> if property or attribute doesn't exist)</li>
<li>Using <code>nameof</code> makes refactoring safe in the event you rename class properties</li>
<li>Does not use <code>Func&lt;TClass, object&gt;</code> or similar</li>
<li>Does not require an instance of <code>Matrix</code> (or any other type since it's generic) </li>
</ul>

<p>Either way works and is really a matter of preference.  There are pros and cons to using extension methods.</p>
    </div>