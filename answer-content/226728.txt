<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Nesting Branches</h3>

<p>You were worried your code might be a bit ugly. I consider deeply nested branches <em>ugly</em> aka a penalty in readability when they can easily be avoided. For example, your function indents the entire while-loop body to perform this little branch at the end:</p>

<blockquote>
<pre><code>if (byte xor IFM_FRAME_HEADER == BYTE_ZERO) {
    // branch body ..
} else {
    index++
}
</code></pre>
</blockquote>

<p>You could invert the branch condition, use an early <code>continue</code> and avoid nesting branches.</p>

<pre><code>if (byte xor IFM_FRAME_HEADER != BYTE_ZERO) {
    index++
    continue
}
// other code in while-loop no longer needs indentation ..
</code></pre>

<h3>Shifting the input</h3>

<p>You have 3 occasions where you shift the input array to the next index <code>index++</code>. 2 of these have conditions that guard when to shift, the 3th is an exception handler for type <code>IllegalArgumentException</code>. Consider refactoring the code to have only a single connection point in the code where you perform the shift <code>index++</code>. This increases maintainability of the code. You can do this be either (1) trying to avoid the exception and using a condition instead, and use a single flag <code>shouldShift</code> marked <code>true</code> on any of the conditions or (2) throw exceptions for all conditions that require shifting and have a single exception handler performing the shift.</p>

<h3>Flow Integrity</h3>

<p>The callback invocation  <code>emitter.onNext(canFrame)</code> sits within the <code>try-catch</code> block. This means that if the callback would throw an <code>IllegalArgumentException</code> you'd be shifting the input <code>index++</code> while you shouldn't have. Ensure callback invocation does not trigger such shifting.</p>
    </div>