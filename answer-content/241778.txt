<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There is no benefit in using <code>long long</code> for the <code>row, col</code>.</p>

<p>For practical uses, <code>int</code> would be sufficient.</p>

<p>For pedantically large cases, use <code>size_t</code>.  It is some <em>unsigned</em> integer type.</p>

<p>[edit] Concerning the holy wars of using <code>size_t</code> vs. some signed type:  Code to your group's coding standard.  For personal use, I model code to the C standard library which favors <code>size_t</code> for size concerns.</p>

<hr>

<p><strong>Allocating</strong></p>

<p>Getting the right size is prone to failure when code use the type for sizing.  Note the 2 below (from OP's code and a discussion comment)</p>

<pre><code>board[i] = malloc(sizeof(int) * sizeOfBoard);
solutionSet = realloc(solutionSet, sizeof(solutionSet) + sizeof(chessBoard));
</code></pre>

<p>The first obliges a check: "Is <code>int</code> correct?"  I can search around and later find <code>int** board</code> and conclude yes, it matches.  Yet if code was below, no search needed.  Consider using <code>ptr = malloc(sizeof *ptr * n);</code> it is easy to code right, review and maintain.</p>

<pre><code>board[i] = malloc(sizeof *(board[i]) * sizeOfBoard);
</code></pre>

<p>With the idiom <code>ptr = malloc(sizeof *ptr * n);</code>, the below looks wrong.  The size calculation is using the size of a pointer and not the size of of its referenced type.</p>

<pre><code>solutionSet = realloc(solutionSet, sizeof(solutionSet) + sizeof(chessBoard));
//                                       ^^^^^^^^^^^^^
//                    maybe        sizeof *solutionSet
</code></pre>
    </div>