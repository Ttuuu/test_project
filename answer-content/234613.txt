<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The "spirit" of Object Oriented Programming is two-fold: </p>

<ul>
<li>To give us an enforceable metaphor for reasoning about our code. ("objects" as objects)</li>
<li>To give us heuristics about how to compartmentalize out code. (encapsulation)</li>
</ul>

<p>The purist perspective of OOP can be a bit verbose, and in python it's not usually necessary. </p>

<blockquote>
  <p>I want then a GUI with TKinter, a third class GUI would be suited ?</p>
</blockquote>

<p>Try thinking about it like this: An object method will have <em>both</em> a method that it's called on <em>and a context in which it gets called.</em> If you build a class to encapsulate your GUI, where will it's methods get called from? </p>

<p>One of the principal things objects do is manage state. If a function needs to <em>update</em> state, that suggests that the function and the state could be encapsulated together in an object. If the function just needs to <em>read</em> a state, and that state (data) could be passed in as an argument by the calling context, then the function can be a static method or a global function. If a class <em>only</em> has static methods, then you don't need a class at all. That's a good thing: the less state you're managing the less opportunity to mess it up.</p>

<blockquote>
  <p>How can it be improved (on the OOP level and on script level)?</p>
</blockquote>

<p><a href="https://codereview.stackexchange.com/a/234606/200133">Sam Stafford's</a> points #4 and #5 are good, as is the suggestion to have <code>Disk</code> as a new type. </p>

<ol>
<li>You could also neglect to declare a proper class for the Towers by just having <code>Tower = NewType('Tower', List(Disk))</code>.</li>
<li>If you're thinking of the normal input and output as a user-interface, then you probably shouldn't be printing (or reading input) from inside class methods. That said, <em>logging</em> is a fine thing to do, and <code>print</code> is a low-effort way to do it.</li>
<li><code>Plateau.motion()</code> does too many things. Checking for victory should certainly go outside in the calling context. I would suggest that validating the user-input also doesn't belong in there. </li>
<li>Similarly, <code>Plateau.check_victory()</code> shouldn't set up the new game, and <code>init_plateau</code> should get inlined into <code>Plateau.__init__()</code>. When you start a new game just build a new Plateau. </li>
</ol>

<p>Taken to the extreme, you could have a static class representing the state of the game, and a function to start a new game, and then you'd repeatedly call a function <code>(GameState, PlayerMove)-&gt;GameState</code>. At that point you'd be breaking past traditional imperative OOP into a more "functional" style. </p>
    </div>