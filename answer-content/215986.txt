<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In addition to Hobo's good answer, you can simplify the <code>xor</code> function</p>

<blockquote>
<pre><code>def xor(in1, in2):
    ret = []
    for i in range(0, max(len(in1), len(in2))):
        ret.append(in1[i % len(in1)] ^ in2[i % len(in2)])
    return bytes(ret)
</code></pre>
</blockquote>

<p>You don't need the <code>0</code> in the range's first element because it will automatically start at <code>0</code>, secondly <code>bytes</code> will accept any iterable so you can feed it a comprehension</p>

<pre><code>def xor(in1, in2):
    return bytes(in1[i % len(in1)] ^ in2[i % len(in2)] for i in range(max(len(in1), len(in2)))
</code></pre>

<p>You could also use <code>cycle</code> from the <code>itertools</code> module in combination with <code>zip</code></p>

<pre><code>from itertools import cycle

def xor2(in1, in2):
    value, repeater = (in1, in2) if len(in1) &gt; len(in2) else (in2, in1)
    return bytes(v ^ r for v, r in zip(value, cycle(repeater)))
</code></pre>
    </div>