<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Performance</h2>
<ul>
<li>For positive numbers &lt; 2 ^ 31 use <code>num | 0</code> (bitwise or zero) to floor</li>
<li>You are drawing an arc that is 1 pixel in radius, with the stroke width of 1 the diameter is 3 pixels. This covers an area much greater than the point you sample. Use <code>fillRect</code> to draw a single pixel as its much quicker. Better yet as they are all the same color create a single path and use <code>ctx.rect</code> to add to it. Render all rect in one pass at the end of <code>begin</code> function.</li>
<li>Avoid creating objects needlessly. Create a working object and use that to hold intermediate values. This can greatly reduce memory allocation and GC overheads. Eg the object you return in <code>updateDot</code> is a waste of memory and time.</li>
<li>If you test two numbers to find the max or min, knowing either means you also know the other and thus do not need to test for it. The long lines <code>Math.min(p.y, p1.y) + (Math.max(p.y, p1.y) - Math.min(p.y, p1.y)) / 2</code> can be reduced by a single test and give significant performance improvement.</li>
</ul>
<h2>Style</h2>
<ul>
<li>Use <code>const</code> for constants. Eg <code>canvas</code> and <code>ctx</code> should be <code>const</code>.</li>
<li>Capitals only for names of objects that are instantiated with the <code>new</code> token. Eg <code>GenerateRand</code> should be <code>generateRand</code></li>
<li>Avoid repeated code by using functions. Eg you create many instances of an object {x,y}, would be better as a function.</li>
<li>Spaces between operators, commas, etc.</li>
<li>Use <code>===</code> rather than <code>==</code></li>
<li><code>else</code> on the same line as the closing <code>}</code></li>
<li>The final statement in function <code>begin</code> does not need the test <code>(randN == 5 || randN == 6)</code> (assuming you want a new point each iteration)</li>
</ul>
<h2>Code</h2>
<p>The random number generated is from 0 to 6 and you ignore 0, redrawing the same point 1 in 7 times. You can reduce the random to give 3 values 0,1,2 and perform the correct calculation on that or use a counter and cycle the points.</p>
<p>You could also put the points <code>pA</code>, <code>pB</code>, <code>pC</code> in an array and index them directly via the random number.</p>
<p>Rather than use <code>setInterval</code>, use <code>setTimeout</code>. That way you don't need to clear the timer each time.</p>
<p>Put magic numbers in one place and name them as constants.</p>
<p>You reset the start point each time <code>delay</code> is called (first two lines). Better to just let it keep going. It may also pay to stop the rendering after a fixed amount of points have been rendered.</p>
<h2>The rewrite.</h2>
<p>This is just an example of the various points outlined above.</p>
<p>Also a few modifications</p>
<ul>
<li>Automatically adjust number of points rendered to keep the GPU load steady.</li>
<li>Stop rendering after a fixed number of points rendered.</li>
<li>The starting points <code>pA,pB,pC</code> are in an array.</li>
<li>Magic numbers as constants.</li>
<li>Using a single render path to draw all points per render cycle.</li>
<li>Using a working point <code>wPoint</code> to hold coordinates rather than create a new point for each point rendered.</li>
</ul>
<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const ctx = canvas.getContext('2d');


const padding = 5;
const renderDelay = 200;
const maxTime = 2;  // time in ms allowed to render points.
const maxPointsToDraw = canvas.width * canvas.height * (1 / 3); 

var pointsPerRender = 500; // points to render per render pass
var totalPoints = 0; // count of total points drawn
ctx.fillStyle = '#fc3';

const generateRand = () =&gt; Math.random() * 3 | 0;
const point = (x, y) =&gt; ({x, y});
const drawDot = p =&gt; ctx.rect(p.x, p.y, 1, 1);

const updateDot = (p, p1) =&gt; {
    p.x = p.x &lt; p1.x ? p.x + (p1.x - p.x) / 2 : p1.x + (p.x - p1.x) / 2;
    p.y = p.y &lt; p1.y ? p.y + (p1.y - p.y) / 2 : p1.y + (p.y - p1.y) / 2;
    return p;
}

const points = [
    point(canvas.width / 2, padding),
    point(padding, canvas.height - padding),
    point(canvas.width - padding, canvas.height - padding)
];
const wPoint = point(canvas.width / 4, canvas.height / 2); // working point


const renderPoints = iterations =&gt; {
    totalPoints += iterations;
    
    const now = performance.now(); 
    ctx.beginPath();
    while (iterations --) { drawDot(updateDot(wPoint, points[generateRand()])) }
    ctx.fill();
    const time = performance.now() - now;

    // use render time to tune number points to draw 
    // Calculates approx time per point and then calcs number of points
    // to render next time based on that speed.
    // Note that security issues mean time is rounded to much higher
    // value than 0.001 ms so must test for 0 incase time is zero
    pointsPerRender = maxTime / ((time ? time : 0.1)/ pointsPerRender);

    if (totalPoints &lt; maxPointsToDraw) {
        setTimeout(renderPoints, renderDelay, pointsPerRender | 0);
    }
}
renderPoints(pointsPerRender);</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;canvas id="canvas" width="500" height="500"&gt;&lt;/canvas&gt;</code></pre>
</div>
</div>

    </div>