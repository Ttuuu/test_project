<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You can check the <a href="https://en.wikipedia.org/wiki/Flyweight_pattern" rel="nofollow noreferrer">Flyweight Pattern</a> if you have duplicates in the data. This pattern uses a cache to prevent the recalculation of similar objects.</p>

<p>Here is some general recommendation for your code; those changes wonâ€™t help for the performance issue, but will help when reading the code and make it shorter.</p>

<p>1) Extract the <code>java.util.regex.Pattern#compile(java.lang.String)</code> into constants; so it will be loaded only once per <a href="https://docs.oracle.com/en/java/javase/13/docs/api/java.base/java/lang/ClassLoader.html" rel="nofollow noreferrer">ClassLoader</a>, instead of each time you call the function.</p>

<pre class="lang-java prettyprint-override"><code>public static final Pattern TITLE = Pattern.compile("[\\S\\s]+");
public static final Pattern AUTHOR = Pattern.compile(", by(.*)(?=\\s*)");
public static final Pattern SUBTITLE = Pattern.compile("\\[Subtitle: [^\\[\\]]+]");
public static final Pattern LANGUAGE = Pattern.compile("\\[Language: [^\\[\\]]+]");
public static final Pattern CONTENTS = Pattern.compile("\\[Contents: [^\\[\\]]+]");
public static final Pattern TEMPX = Pattern.compile("\\d{1,5}$");
public static final Pattern TEMPY = Pattern.compile("^\\d{1,5}|\\d{1,5}[A-Z]?\\s?$");
public static final Pattern I = Pattern.compile("^, by ");
public static final Pattern J = Pattern.compile("\\s+(?&lt;= )\\d+(\\w)?$|(?&lt;= )\\d+(\\w)?\\s+$|(?&lt;=\\D)\\d+(\\w)?$");
public static final Pattern ID = Pattern.compile("[^\\s]\\d+");
</code></pre>

<p>2) Instead of using a <code>for</code> with index, I suggest a <code>for-each</code>.</p>

<pre class="lang-java prettyprint-override"><code>for (String para : paragraphs) {
   //[...]
}
</code></pre>

<p>3) For the two sections that don't have an <code>else</code> (Title &amp; Author), I suggest that you extract them in methods.</p>

<pre class="lang-java prettyprint-override"><code>private static void defineBooks(List&lt;String&gt; paragraphs) {
   //[...]
   if (mtitle.find()) {
     replaceTitle(para, book);
  }

  if (mauthor.find()) {
     replaceAuthor(mauthor, book);
  }
   //[...]
}

private static void replaceAuthor(Matcher mauthor, Book book) {
 String bauthor = I.matcher(mauthor.group()).replaceAll("");
 book.setAuthor(J.matcher(bauthor).replaceAll(""));
}

private static void replaceTitle(String para, Book book) {
 book.setTitle(para.replaceAll("\\[[^\\[]+(?:])", "")
  .replaceAll("(Passed | by|, by).*+", "")
  .replaceAll("\\s{2,}\\d{1,5}(\\s)?", "")
  .replaceAll("\n", " ")
  .replaceAll(",$", "")
  .replaceAll("\\s+", " ").trim());
}
</code></pre>

<p>4) For the rest, you can make methods that return a <code>String</code> in all cases.</p>

<pre class="lang-java prettyprint-override"><code>private static void defineBooks(List&lt;String&gt; paragraphs) {
   //[...]
   book.setSubtitle(parseSubTitle(msubtitle, book));
   book.setContents(parseContents(mcontents));
   book.setLanguage(parseLanguage(mlanguage));
   //[...]
}
</code></pre>

<pre class="lang-java prettyprint-override"><code>private static String parseLanguage(Matcher mlanguage) {
 if(mlanguage.find()) {
   return mlanguage.group()
   .replaceAll("\\[Language: ", "")
   .replaceAll("]", "")
   .replaceAll("\\s{2,}", " ");
 } else {
   return "English";
 }
}

private static String parseContents(Matcher mcontents) {
 if(mcontents.find()) {
   return mcontents.group()
   .replaceAll("\\[Contents: ", "")
   .replaceAll("]", "")
   .replaceAll("\\s{2,}", " ");
 } else {
   return "";
 }
}

private static String parseSubTitle(Matcher msubtitle, Book book) {
 if (msubtitle.find()) {
   return msubtitle.group()
   .replaceAll("\\[Subtitle: ", "")
   .replaceAll("]", "")
   .replaceAll("\\s{2,}", " ");
 } else {
   return "";
 }
}
<span class="math-container">```</span>
</code></pre>
    </div>