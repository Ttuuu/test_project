<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You can simplify your build and allow for easier <strong>integration tests*</strong> with a <code>docker-compose.yml</code> file.  </p>

<pre><code>version: "3.7"
services:
  webapp:
    build: .
    ports: 
      - 8080:8080
    depends_on:
      - db
    environment:
      - DB_PASS='your-strong-pass'
  db:
    image: postgres:11.5
    environment:
      - POSTGRES_USER=go
      - POSTGRES_PASSWORD=your-strong-pass
      - POSTGRES_DB=go
</code></pre>

<p>Just add it to the root of your application and run the command <code>docker-compose up --build</code>.<br>
    <em>To use it for tests, you can have a different <code>docker-compose</code> file with a command to run integration tests.</em></p>

<ul>
<li>Note that integration tests are not unit tests.<br>
With unit testing, you are testing functions in the purest form you can achieve.<br>
With integration tests you are running your program while mocking the outside world (databases, file systems, ...) and check if the output of your program (or the exposed APIs) is as you expect.<br>
<strong>Both kinds of tests are important</strong> as they test different things.</li>
</ul>
    </div>