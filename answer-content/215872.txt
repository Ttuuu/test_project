<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code does work but there are indeed better ways of doing this.</p>

<p>Some details could be improved in your current function:</p>

<ul>
<li>You could replace <code>which(!(1:max_id %in% x$id))</code> with <code>setdiff(seq(min_id, max_id), x$id)</code>. It's more legible, and, more importantly, it does not rely on the fact that your IDs are the <em>n</em> first integers. (Consider for instance <code>which(!(2:5 %in% c(2, 3, 5)))</code>: it does not return 4.)</li>
<li><code>start</code> is assigned to 0 but is never modified, so you could get rid of this local variable.</li>
</ul>

<p>But the main point is that growing a dataframe in a loop is generally not a good idea, as most of the time you can find better options. Here are two possible solutions:</p>

<p><strong>1) With base R</strong></p>

<pre><code>y &lt;- data.frame(id = seq(min(x$id), max(x$id)))
x &lt;- merge(y, x, all.x = TRUE)
x$value[is.na(x$value)] &lt;- fill_value
</code></pre>

<p><strong>2) With <code>tidyr</code></strong></p>

<pre><code>library(tidyr)

complete(x, id = seq(min(id), max(id)), fill = list(value = fill_value))
</code></pre>
    </div>