<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>One thing you’ll want to learn is not to repeat yourself, when coding.  </p>

<p>Consider:</p>

<pre><code>def collatz(number):
    global nextNumber
    if number % 2 == 0:
        nextNumber = number//2
        print(nextNumber)
    else:
        nextNumber = 3*number+1
        print(nextNumber)
</code></pre>

<p>You have two identical print statements at the end of both the if and the else clauses.  These can be combined and moved out of the if-else:</p>

<pre><code>def collatz(number):
    global nextNumber
    if number % 2 == 0:
        nextNumber = number//2
    else:
        nextNumber = 3*number+1
    print(nextNumber)
</code></pre>

<p>You are printing in your <code>collatz</code> generator function.  If you want the longest sequence starting under 10000000, you’re going to do a lot of printing!  Instead, move the printing responsibility to the caller.  They know whether they want to print it, or just find the length. </p>

<p>Don’t use <code>global</code> to return one value from a function.  (As Aaron states in the comments: "don't use <code>global</code> ever if you can avoid it (which is always)"). Just return the value,</p>

<pre><code>def collatz(number):
    if number % 2 == 0:
        nextNumber = number//2
    else:
        nextNumber = 3*number+1
    return nextNumber
</code></pre>

<p>and let the caller assign it to whatever variable they want. </p>

<pre><code>nextNumber = collatz( int(number) )
print(nextNumber)
while nextNumber != 1:
    nextNumber = collatz(nextNumber)
    print(nextNumber)
</code></pre>

<p>Reordering, to remove one of the calls to <code>collatz</code>:</p>

<pre><code>number = int(number)
while number != 1:
    number = collatz( number )
    print(number)
</code></pre>

<p>Here, you are try to validate the user input is a number:</p>

<pre><code>if integer.isdigit() ==True:
    collatz(int(integer))
    # ... print Collatz sequence ...

while integer.isdigit() != True :
        print('Please try again.')
        integer=input()
        # ... print Collatz sequence ...
</code></pre>

<p>Multiple issues here.</p>

<ol>
<li>You are using an <code>if &lt;expr&gt;</code> followed by a <code>while &lt;not expr&gt;</code> to perform a sort of <code>if ... else ...</code> statement.  If the first input is valid, you print the Collatz sequence in the "then" clause, and the <code>while</code> loop never starts because the condition is immediately <code>False</code>.  If the <code>if &lt;expr&gt;</code> doesn't pass, the <code>while &lt;not expr&gt;</code> catches control and prompts the user for valid input, in a loop.</li>
<li>You are repeating the code to print that Collatz sequence.  And as I said above, (<em>omitted, because *I* am *not* going to repeat myself</em>).</li>
<li>The <code>while</code> loop will fail with a <code>ValueError</code> exception at <code>collatz(int(integer))</code> if the user enters an invalid input the second time.</li>
<li><a href="https://docs.python.org/3.7/library/stdtypes.html?highlight=isdigit#str.isdigit" rel="nofollow noreferrer"><code>.isdigit()</code></a> tests if the string consists only of "digit" characters, including odd things like the superscript 2 (<code>²</code>), which are <strong>not</strong> valid for the <code>int(...)</code> method.  So you could still get a <code>ValueError</code> exception even when <code>.isdigit()</code> returns <code>True</code>!  You would need to use <a href="https://docs.python.org/3.7/library/stdtypes.html?highlight=isdecimal#str.isdecimal" rel="nofollow noreferrer"><code>.isdecimal()</code></a> instead.</li>
</ol>

<p>These issues can be avoiding by using Python's exceptions.  Try to convert the input to an integer, and use the exception to detect invalid input.  Python’s exception handling is exceptional! Learn it. Rely on it:</p>

<pre><code>number = None
while number is None:
    try:
        number = int( input("Enter a number: ") )
    except ValueError:
        print("Try again")

 # ... print collatz sequence here
</code></pre>
    </div>