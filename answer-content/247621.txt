<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Option 1:</h3>
<p>The most basic thing I can suggest is that if you have a <strong>mapping</strong> from one thing to another, and if that mapping is fixed, you should be using a mapping data type.</p>
<p>The mapping data type in python is the <a href="https://docs.python.org/3/library/stdtypes.html?highlight=dict#mapping-types-dict" rel="nofollow noreferrer"><code>dict</code></a>, which can be written in-line like so:</p>
<pre><code>uci_bit = {
    'a': 2**7, 'b': 2**6, 'c': 2**5, 'd': 2**4,
    'e': 2**3, 'f': 2**2, 'g': 2**1, 'h': 2**0,
}
</code></pre>
<p>Alternatively, the <code>dict()</code> function returns a dictionary, and takes keyword arguments:</p>
<pre><code>uci_bit = dict(a=2**7, b=2**6, c=2**5, d=2**4, 
               e=2**3, f=2**2, g=2**1, h=2**0)
</code></pre>
<p>Same result either way. You could then access the dict using the standard square-bracket notation:</p>
<pre><code>ch = uci[0]
mask1 = uci_bit[ch]
</code></pre>
<p>Or as a single expression:</p>
<pre><code>mask1 = uci_bit[uci[0]]
</code></pre>
<h3>Option 2:</h3>
<p>However, there's another approach that has some potential. Looking things up in a dictionary has a cost. It's technically <span class="math-container">\$O(n)\$</span> but maybe there's a constant or two in there. So ...</p>
<p>Because the two components of the uci location are fixed-width ('a' and '2') you might be able to look them up in a string using the <a href="https://docs.python.org/3/library/stdtypes.html?highlight=str%20index#str.index" rel="nofollow noreferrer"><code>str.index</code></a> method and get better performance.</p>
<p><strong>Note:</strong> I wrote "might be". The way to know for sure is to write both bits of code and run a timing test on the alternatives. Look up the <a href="https://docs.python.org/3/library/timeit.html?highlight=timeit#module-timeit" rel="nofollow noreferrer"><code>timeit</code></a> module in the standard distribution.</p>
<p>Something like:</p>
<pre><code>UCI_CHARS = 'hgfedcba'

mask1 = 2 ** UCI_CHARS.index(uci[0])
mask2 = 2 ** UCI_CHARS.index(uci[2])
</code></pre>
<p>You might also want to check the result of using <code>dict</code> versus <code>str.index</code> versus the <code>int()</code> function on the single-digit part of uci decoding.</p>
<h3>Option 3:</h3>
<p>It's not clear how many of these operations you are performing. If you are doing a single game, and there might be two dozen uci to bit operations, then it probably doesn't matter. But if you're doing a lot of games at the same time, it might behoove you to generate a dictionary containing <em>all</em> the UCI letter/number combinations, and do the lookup as a single operation. Something like:</p>
<pre><code>for ch in 'abcdefgh':
    for digit in '12345678':
        uci = ch + digit
        bit = # whatever computation
        uci_bit[uci] = bit
</code></pre>
<p>This would let you decode 'a2' -&gt; bits in a single step at the cost of the up-front loop.</p>
<h3>Other considerations</h3>
<p>I asked the Duck about bitboard, and was immediately presented with the fact that there is no single standard representation. Instead, there are different representations for different purposes and different CPU architectures.</p>
<p>A result of this is that you should definitely be doing this inside a class or function, and there should definitely be a "name" given to the kind of bitboard you want to compute, so that readers will understand which of the several options you are choosing. Rank-major versus File-major and big- versus little- endian representations are all valid, so make sure to include this information either in the class or function name, or in the commentary.</p>
<pre><code>def uci_to_bitboard_lsf(uci: str) -&gt; int:
    """ Convert UCI notation to bitboard(LSF, little-endian) """

    ...
</code></pre>
<p>Also, I suspect that using <code>*</code> may be a bug, and you should be using <code>+</code> instead. (It really should be a bitwise or, the <code>|</code> operator, but <code>+</code> will work.)</p>
    </div>