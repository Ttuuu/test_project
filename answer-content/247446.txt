<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>fileAccess::fileAccess(const char *path)
{
    m_filepath = path;
}

fileAccess::fileAccess(const std::string path)
{
    m_filepath = path;
}
</code></pre>
<p>I prefer an initializer list constructor for such cases. No need to write it in a separate location.</p>
<ul>
<li><a href="https://docs.microsoft.com/en-us/cpp/cpp/constructors-cpp?view=vs-2019#init_list_constructors" rel="nofollow noreferrer">https://docs.microsoft.com/en-us/cpp/cpp/constructors-cpp?view=vs-2019#init_list_constructors</a></li>
</ul>
<hr>
<p>You may use <code>std::string_view</code> instead of <code>const std::string</code> to indicate that we're only reading it. Also, that avoids the need for <code>const char *path</code> overloading since <code>string_view</code> accepts that too in its constructor.</p>
<p>The performance benefit of <code>std::string_view</code> is negligible in the path since that is used just once in the program. Use it later in the code in place of string allocations. As long as <em>something</em> owns the string(that includes compile time constants), you don't need to create a new <code>std::string</code> or a <code>const std::string &amp;</code>.</p>
<ul>
<li><a href="https://en.cppreference.com/w/cpp/string/basic_string_view/basic_string_view" rel="nofollow noreferrer">https://en.cppreference.com/w/cpp/string/basic_string_view/basic_string_view</a></li>
</ul>
<hr>
<pre><code>//will delete old file
</code></pre>
<p>Make such comments near the implementation for easy discovery. IDEs can also pick up documentation formatted comments like:</p>
<pre><code>/**
 * Deletes the old file.
 */
</code></pre>
<hr>
<pre><code>str.assign((std::istreambuf_iterator&lt;char&gt;(t)),
                std::istreambuf_iterator&lt;char&gt;());
</code></pre>
<p>The answer that you've taken this code from got a downvote from me due to the sheer performance penalty it incurs. Please see the answer by Jerry Coffin</p>
<pre><code>std::ifstream t("file.txt");
std::stringstream buffer;
buffer &lt;&lt; t.rdbuf();
</code></pre>
<hr>
<p>If the file is huge, this approach is costly in terms of memory usage as well as time taken in memory allocations.</p>
<p>Read the file line by line or use asynchronous threads for reading and processing.</p>
<hr>
<p>I won't duplicate what I've already written here:</p>
<ul>
<li><a href="https://codereview.stackexchange.com/questions/246219/parser-written-in-php-is-5-6x-faster-than-the-same-c-program-in-a-similar-test/246232#246232">Parser written in PHP is 5.6x faster than the same C++ program in a similar test (g++ 4.8.5)</a></li>
</ul>
<p>I suggest you to give those answers a read.</p>
    </div>