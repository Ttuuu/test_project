<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In this implementation, <code>null</code> entries are problematic. From the public interface, it is impossible to tell if the stack has a null entry, or has reached the bottom: in both cases, <code>top()</code> will return <code>Optional.empty()</code>.</p>

<p>It seems wrong to silently convert <code>null</code>s into <code>Optional.empty()</code>s. I would do one of the following:</p>

<ol>
<li><p>Do not store <code>null</code> entries in the stack. Instead, throw an exception on <code>push</code>ing a <code>null</code> value.</p></li>
<li><p>Stop using <code>Optional</code>s and instead throw an exception when <code>top</code> is called on an empty stack. Add an <code>empty</code> method to determine if the stack is empty.</p></li>
</ol>

<p>Other than that, very clean simple code! A few smaller comments.</p>

<p>Note that <code>push</code> has the same implementation in both <code>EmptyStack</code> and <code>NonEmptyStack</code>. If you like, they could inherit from a single abstract class implementing <code>push</code>. This is a judgement call: repeated code is kinda bad, but adding a whole new abstract class is complicated. Perhaps the the cure is worse than the disease...</p>

<p>Computing <code>size</code> is slow: time O(n). If you are worried about this, you could compute and store the size in the constructor.</p>
    </div>