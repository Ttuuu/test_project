<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>It depends.</h1>

<p>Mostly, it depends on whether it'll generally be in the dictionary or not. If it's nearly always in the dictionary, then the try/except method would win out, while if it's in there as often as not, then checking would be somewhat faster.</p>

<p>However, python already anticipated your need. There's a better option:</p>

<pre class="lang-py prettyprint-override"><code>def GetSlot(self, slot_name):
    return self.Slots.get(slot_name)
</code></pre>

<p>All mappings support get, which has a default optional argument that defaults to None. This should be the best option. However, that said...</p>

<ul>
<li><code>GetSlot</code> is not a PEP8-compliant name. It should be <code>get_slot</code>.</li>
<li><code>self.Slots</code> should probably be <code>self.slots</code>.</li>
<li>NOTE: Since you confirmed in a comment that you are in fact using externally defined names, I think it is best practice to follow those names as well as their naming conventions when appropriate.</li>
<li>This should probably not be a method at all. In python, accessor functions are somewhat frowned upon. If you really need to do something like this, use <a href="https://stackoverflow.com/questions/17330160/how-does-the-property-decorator-work">properties</a>. However, anything wanting to get <code>slot_name</code> from <code>self.Slots</code> should just use <code>self.Slots.get(slot_name)</code>. <em>Even if you're reaching into the object from outside</em>. Java and other languages that advocate getter/setter methods do so because it later allows you to change how it is gotten, but Python is better and doesn't require workarounds like this to influence how you access a variable. <a href="https://stackoverflow.com/a/36943813/4331885">Read more here.</a></li>
</ul>

<h3>A note on Python getters and setters</h3>

<p>Python <a href="https://docs.python.org/3.7/howto/descriptor.html" rel="nofollow noreferrer">descriptors</a> are a powerful tool. It's not actually an object, it's a protocol of how python retrieves variables when they're used as object attributes. The classic example is python's <code>property</code>, but in truth methods on a class are also descriptors. An object implements this protocol by having <code>__get__</code>, <code>__set__</code> or <code>__delete__</code> methods on it. Not all are required for every type of descriptors - please follow the link for in-depth classification and usages. </p>

<p>What this all means in practice is that python objects can change how they are retrieved. This is impossible in languages like Java, which can cause engineering issues. </p>

<p>Let's first figure out why people use getters and setters in Java, because the reasons they have are quite important.</p>

<p>So I have a class with an attribute that I want to expose to the public for usage.</p>

<p>(NOTE: Java users please don't take offense. I'm writing just Python here since I've honestly never used Java. All my knowledge of it is second-hand at best.)</p>

<pre class="lang-py prettyprint-override"><code>class Point:
    def __init__(self, x, y):
        self.x, self.y = x, y
        self.distance_to_orgin = pythagoras(x, y)
# Later...
instance = Point(a, b)
instance.distance_to_orgin 
</code></pre>

<p>Now, everyone can access it. So I publish my library, and everyone's code works fine. </p>

<p>But then, I get a better idea - every point already knows it's x and y, so I can always calculate the distance_to_orgin if I need it. </p>

<p>In Java, I now have a problem. Because to calculate something on retrieval, I NEED a function - but everyone accesses it by attribute access. I cannot make this change in a backwards compatible manner. So, programmers learn to make getter and setter methods. Compare to before:</p>

<pre class="lang-py prettyprint-override"><code>class Point:
    def __init__(self, x, y):
        self.x, self.y = x, y
        self.distance_to_orgin = pythagoras(x, y)

    def get_distance_to_orgin(self):
        return self.distance_to_orgin


# Later...
instance = Point(a, b)
instance.get_distance_to_orgin()
</code></pre>

<p>Now, if I want to change how it works, I can just write a different get_distance_to_orgin method and I can make the change - fully backwards compatible!</p>

<p>So why isn't this a problem in Python?</p>

<p>Because we have descriptors. In 99.9% of cases, the builtin property() does everything you want. I can just amend my class definition like this:</p>

<pre class="lang-py prettyprint-override"><code>class Point:
    def __init__(self, x, y):
        self.x, self.y = x, y
        # self._distance_to_orgin = pythagoras(x, y) No longer needed

    @property
    def distance_to_orgin(self):
        return pythagoras(self.x, self.y)

# Later...
instance = Point(a, b)
instance.distance_to_orgin
</code></pre>

<p>And the external usage is <em>exactly</em> the same as it was at the very start, back when we were building a class in a naive way! </p>

<p>So that is why getters and setters are important for many languages, but why we don't need them in Python.</p>
    </div>