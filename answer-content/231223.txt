<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In addition to the other answers:</p>

<p>The <code>init_data</code> function does not belong in the <code>Nbody</code> class. Nowhere in the definition of the N-body problem will you find the word "random", and using random input data is only connected to your particular situation, therefore this code should be moved into <code>main.cpp</code>.</p>

<p>In the constructor of <code>Nbody</code>, there's no need for the trailing underscore in the parameter names. The following code looks cleaner and is otherwise equivalent to your current code:</p>

<pre class="lang-cpp prettyprint-override"><code>Nbody::Nbody(int n, double dt, double t_max)
: n(n), dt(dt), t_max(t_max) {
    init_data();  // should be removed, as I said above
}
</code></pre>

<p>For debugging purposes it would be good to have not only the <code>timeIntegration</code> method, but also a simple <code>step</code> method that only does a single step. This allows you to write better unit tests. It also makes another of the constructor parameters, namely <code>t_max</code> unnecessary.</p>

<p>Still in <code>timeIntegration</code>, instead of <code>step+=1</code> you should write <code>++step</code>. Writing <code>step++</code> would be equivalent, but that would tell every reader that you don't know C++ well. In C++ the <code>++</code> usually comes before the variable, in other languages like Java or C or Go it usually comes after the variable. See <a href="https://stackoverflow.com/a/17367081/225757">this Stack Overflow answer</a> for some more details.</p>

<p>Comparing the code of <code>timeIntegration</code> with <code>update_velocity</code> reveals that you use an inconsistent programming style. You should decide for yourself whether to use camelCase or snake_case identifiers. Then, use that style consistently. Another thing is that you placed spaces around the operators <code>*</code> and <code>/</code>, but not around <code>+</code>. I would have expected it the other way round, since <code>*</code> and <code>/</code> bind the operands more tightly than <code>+</code>. The usual style is to always surround binary operators with spaces. Therefore <code>t &lt; t_max; t += dt; step++</code>.</p>

<p>Your Nbody class does not account for tricky situations where the particles are so close together that <code>dt</code> becomes too large for a realistic simulation. This is something that you must document.</p>

<p>I like it that you separated <code>updated_velocity</code> and <code>update_position</code> into two separate methods. This makes them easy to read. (Plus, it's necessary from an implementation's point of view since you must first update the velocity of all particles before you can update any particle's position, otherwise the result depends on the ordering of the particles.)</p>

<p>The abbreviation <code>comp</code> in <code>comp_position</code> is ambiguous. It could mean compare or compute. You should spell it out.</p>

<p>In <code>Nbody::force</code> you should not name the parameters <code>i</code> and <code>j</code>, since these variable names are reserved for integers, by convention. I'd rather choose p and q. And if you rename <code>Nbody::p</code> to <code>ps</code> since it is plural anyway, there's no naming collision anymore.</p>

<p>In <code>write_data</code> the parameter <code>step</code> is not necessary since <code>Nbody::step</code> is accessible by the same name. You can just remove the parameter.</p>

<p>The method <code>print_parameter</code> should be called <code>print_parameters</code> since it is about <em>all</em> parameters, not just a single one.</p>

<p>At the API level, I would not put <code>dt</code> and <code>t_max</code> in the constructor but rather pass <code>dt</code> as parameter to the <code>step</code> method, and <code>t_max</code> as parameter to the <code>timeIntegration</code> method.</p>

<p>In <code>nbody.h</code> there is the <code>EPS</code> constant, which looks dubious. For a <code>dt</code> of 0.001 it may have an appropriate value of <code>0.0001</code>, but what if I want to simulate using <code>dt = 1.0e-9</code>? I don't think it should be a global constant. Not even the speed of light should be, because there are so many different speeds of light, depending on the exact experiment.</p>

<p>In <code>Nbody::init_data</code> you wrote <code>1.</code> without a trailing 0. Sure, it may save a single key stroke, but in my opinion it's not worth it. Just write the canonical <code>1.0</code>, as you already did in several other places in the same function.</p>

<p>The data you write to the <code>data_*.log</code> files is quite imprecise. The typical <code>double</code> type provides 16 to 17 digits of precision, yet you only write out 6 of them, which is the C++ default. Since 2017, <a href="https://stackoverflow.com/a/54370758">C++ finally supports printing floating point numbers accurately</a>.</p>
    </div>