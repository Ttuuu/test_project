<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>I think this part is ok (will still take your feedback :) )</p>
</blockquote>

<p><code>RecipeParser::parseHtml</code> is asynchronous - <code>CookCrawler::getRecipeData()</code> could also be asynchronous as well.</p>

<p>As far as the "factory" method is concerned, a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map" rel="nofollow noreferrer">Map</a> or simple Object could be used to store the mappings of domains to the parsers. Then instead of using a <code>switch</code> statement, have the code check to see if the mapping contains the domain and utilize the associated parser class.</p>

<hr>

<p><code>getTxtArrayFromElements()</code> contains this block:</p>

<blockquote>
<pre><code>    const array = []
    this.$(selector).each((i, element) =&gt; {
        array.push(this.$(element).text())
    })

   return array
</code></pre>
</blockquote>

<p>Whenever there is a (for)each loop that pushes data into an array, consider if a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map" rel="nofollow noreferrer"><em>map</em>-like</a> method is available. Cheerio has <a href="https://cheerio.js.org/#map-functionindex-element-" rel="nofollow noreferrer"><code>.map()</code></a>, similar to jQuery's <a href="https://api.jquery.com/map" rel="nofollow noreferrer"><code>.map()</code></a>. That can be used to avoid manually setting up the array and pushing items into it.</p>

<p>The same would likely apply to <code>ingredients</code> in that <code>getIngredients()</code> method.</p>
    </div>