<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Style</h1>
<p>I understand that this is a quick and dirty piece of code to earn some points on some code-challenge website. I will still offer some comments on style.</p>
<pre><code>private int v;
</code></pre>
<p>This variable is never used outside of the constructor, in fact it is almost always shadowed by a method parameter. As such I would remove this member and the accessor <code>getv()</code> which isn't used either.</p>
<p>Variable shadowing is something I detest and find makes code much harder to read. I would recommend that you get into a habit of avoiding shadowing.</p>
<p>Instead of having:</p>
<pre><code>private ArrayList&lt;ArrayList&lt;Integer&gt;&gt; adj; // List of List of Integers to
                                            // hold adjacency list
private boolean[] marked; // Array to hold visited nodes
int[] id; // Array to hold group number
int count;
</code></pre>
<p>You could do :</p>
<pre><code>class Node{
    private int id;
    private boolean marked;
    ArrayList&lt;Integer&gt; adjacent;
 }
 private ArrayList&lt;Node&gt; nodes;
</code></pre>
<p>which makes it a bit easier to reason about the state of the class.</p>
<p>There are other nitpicks but I'm not going to go into that as I'm sure you're aware of most of them already.</p>
<h1>Performance - Function call overhead in DFS</h1>
<p>I haven't benchmarked so take this with a grain of salt. The only place that I see that could be done faster is the <code>dfs</code> method. Currently it is a recursive method that recurses at most N times. If you instead chose to implement an iterative BFS you could get rid of a lot of the function call overhead in what I believe is the most time consuming part of the code.</p>
<p><strong>Edit: Fixed performance where a node could appear twice in the fringe</strong></p>
<p>Something like this (untested pseudo java-ish code):</p>
<pre><code>private static void bfs(Graph g, int j){
    Queue&lt;Node&gt; fringe = new Queue&lt;&gt;();
    Node start = g.getNode(j);
    start.mark();
    fringe.add(start);
    while(!fringe.isEmpty()){
        Node n = fringe.pop();
        for(Node a : n.adjacent){
            if(!a.isVisited()){
                a.mark();
                fringe.add(a);
            }
        }
    }
}
</code></pre>
<h1>Performance - Unnecessary work creating adjacency lists</h1>
<p>Here you create a bunch of adjacency lists to represent the connectivity of the graph, depending on the input, some (or all) may never be used:</p>
<pre><code>   for (int i = 0; i &lt; v; i++) {
        adj.add(new ArrayList&lt;Integer&gt;());
   }
</code></pre>
<p>There are some ways that you can avoid this:</p>
<h2>Use a connectivity matrix</h2>
<p><strike>Create a VxV boolean matrix, <code>edges</code> where <code>edges[v*V+w]</code> is <code>true</code> if <code>v</code> and <code>k</code> are connected and false otherwise and <code>V</code> is the number of vertices in the graph. Note that this matrix is symmetric and you only ever need to compute the upper right half. </strike></p>
<p><strike>Note that you need to adjust your <code>dfs()</code> function so that you iterate over one row or column in the matrix depending on how you structure it.</strike></p>
<p>Now that the original question has been corrected from <code>N &lt; 106</code> to <code>N &lt; 10^6</code> this is no longer feasible.</p>
<h2>Use a HashMap</h2>
<p>Create a map that contains the adjacency lists that are created when needed:</p>
<pre><code>Map&lt;Integer, ArrayList&lt;Integer&gt;&gt; edges = new HashMap&lt;&gt;();

public void addEdge(int v, int w) {
    ArrayList&lt;Integer&gt; vList = edges.get(v);
    if(null == vList){
        vList = new ArrayList&lt;&gt;();
        edges.put(vList);
    }
    vList.add(w);

    ArrayList&lt;Integer&gt; wList = edges.get(w);
    if(null == wList){
        wList = new ArrayList&lt;&gt;();
        edges.put(wList);
    }
    wList.add(v);
}
</code></pre>
<p>Hope this helps!</p>
    </div>