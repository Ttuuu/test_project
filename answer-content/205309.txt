<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I see a number of things that may help you improve your program.</p>

<h2>Fix the bug</h2>

<p>There is a subtle bug in the original implementation.  It contains these lines:</p>

<blockquote>
<pre><code>// If the word contains one of the bad letters, don't accept it.
for (unsigned int i = 0; i &lt; sizeof(badLetters); i++) {
    if (currentLine.find(badLetters[i]) != std::string::npos) {
        continue;
    }
}
</code></pre>
</blockquote>

<p>The intent is, of course, to escape the <code>for</code> loop and go on if a bad letter is found in a candidate word.  However, what actually happens is that first letter is checked, and the loop continues <em>no matter if the letter was found or not</em>.  That's a bug and one reason I don't much like <code>continue</code>.  It's too easy to make this kind of error.</p>

<h2>Don't loop on <code>eof()</code></h2>

<p>It's almost always incorrect to loop on <code>eof()</code> while reading a file.  The reason is that the <code>eof</code> indication is only set when an attempt is made to read something from the file when we're already at the end.  So instead of this:</p>

<blockquote>
<pre><code>while (!in.eof()) {
    getline(in, currentLine); 
    // ...
}
</code></pre>
</blockquote>

<p>write this:</p>

<pre><code>while (getline(in, currentLine)) { 
    // ...
}
</code></pre>

<p>See <a href="https://stackoverflow.com/questions/5431941/why-is-while-feof-file-always-wrong">this question</a> for more details on why using <code>eof</code> is usually wrong.</p>

<h2>Initialize variables on declaration</h2>

<p>The best practice is to initialize variables as soon as they're created.  In C++, this most often means initializing them in the same line as the declaration.  So instead of this:</p>

<blockquote>
<pre><code>std::ifstream in;
in.open("words.txt");
</code></pre>
</blockquote>

<p>write this:</p>

<pre><code>std::ifstream file2{wordsFile};
</code></pre>

<p>Note, too, that I use the C++11 uniform initializer syntax (with the <code>{}</code>) to make it clear to both the compiler and the reader that this is an initialization and not a function call.  See <a href="http://www.stroustrup.com/C++11FAQ.html#uniform-init" rel="nofollow noreferrer">Stroustrup's description</a> for more details on that.</p>

<h2>Allow the user to specify input files</h2>

<p>The words file name is currently hardcoded which certainly greatly restricts the usefulness of the program.  Consider using <code>argc</code> and <code>argv</code> to allow the user to specify file names on the command line.  </p>

<h2>Prefer newer structures to plain arrays</h2>

<p>Instead of a plain array as with <code>badLetters</code>, one could instead use an <code>std::array</code> or <code>std::string</code>.  If your compiler has C++17 support, <code>std::string_vew</code> might be an even better choice.</p>

<pre><code>const std::array&lt;char, 8&gt; badLetters = { 'g', 'k', 'm', 'q', 'v', 'w', 'x', 'z' };
</code></pre>

<h2>Use standard algorithms</h2>

<p>Instead of searching with a <code>for</code> loop for all <code>badLetters</code>, we can use <a href="https://en.cppreference.com/w/cpp/algorithm/find_first_of" rel="nofollow noreferrer"><code>std::find_first_of()</code></a> instead.  The result would look like this:</p>

<pre><code>while (getline(in, currentLine)) {
    if (currentLine.length() &gt; longestAcceptableWord.length()
        &amp;&amp; (std::find_first_of(currentLine.begin(),
                            currentLine.end(),
                            badLetters.begin(),
                            badLetters.end()) == currentLine.end())
    ) {
        longestAcceptableWord = currentLine;
    }
}
</code></pre>

<p>Note that I prefer to avoid <code>continue</code> and instead rely on the short-circuit evaluation of the <code>if</code> clauses to cause the same effect.</p>

<h2>Don't use <code>std::endl</code> if you don't really need it</h2>

<p>The difference between <code>std::endl</code> and <code>'\n'</code> is that <code>'\n'</code> just emits a newline character, while <code>std::endl</code> actually flushes the stream.  This can be time-consuming in a program with a lot of I/O and is rarely actually needed.  It's best to <em>only</em> use <code>std::endl</code> when you have some good reason to flush the stream and it's not very often needed for simple programs such as this one.  Avoiding the habit of using <code>std::endl</code> when <code>'\n'</code> will do will pay dividends in the future as you write more complex programs with more I/O and where performance needs to be maximized.</p>
    </div>