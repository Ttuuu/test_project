<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>General feedback</h1>

<p>Whenever I see jQuery and VueJS used together, I question whether they both need to be used. For example, many of the jQuery selection can be converted to using <a href="https://vuejs.org/v2/api/#ref" rel="nofollow noreferrer"><code>$refs</code></a> or perhaps something like <a href="https://vuejs.org/v2/guide/components-slots.html" rel="nofollow noreferrer">slots</a>. But because you are using the jQuery datatables plugin jQuery can't really be eliminated in an easy fashion...</p>

<p>I did a search online for "vuejs datatables" and found various packages, like <a href="https://vuejsexamples.com/data-table-package-with-server-side-processing-and-vuejs-components/" rel="nofollow noreferrer">this vuejsexample.com package</a>, <a href="https://github.com/laravel-enso/VueDatatable" rel="nofollow noreferrer">VueDatatable on github</a> and <a href="https://www.npmjs.com/package/vue-datatables" rel="nofollow noreferrer">an NPM package that uses the same dependencies as yours</a>. You might consider switching from the jQuery plugin to one of those Vue packages...</p>

<h1>Specific feedback</h1>

<h2>Error: Undefined variable: <code>event</code></h2>

<blockquote>
<pre><code>methods: {
    render_table() {
      var columns = this.$parent.columns;
      var rows = this.$parent.rows;
      var el = event.srcElement;
             //^ReferenceError: event is undefined
</code></pre>
</blockquote>

<p>I was able to add <code>event</code> as the first argument and see the rendered table. </p>

<h2>Flaw with arguments on method call</h2>

<p>In <code>delete_all_rows()</code> there is a call in the <code>for</code> loop:</p>

<blockquote>
<pre><code>delete_all_rows: function() {
  var result = confirm("Are you sure you want to delete all rows?");
  if(!result) {
    return;
  }

  var nr_rows = this.rows.length;
  for(var i = 0; i &lt; nr_rows; i++) {
    this.delete_row(0, skip_confirm = true);
</code></pre>
</blockquote>

<p>And similarly in the <code>for</code> loop in <code>delete_all_cols()</code>:</p>

<blockquote>
<pre><code>this.delete_col(0, skip_confirm = true);
</code></pre>
</blockquote>

<p>I presume you are intending to set that second argument value to <code>true</code>, which works but at the same time this is <em>declaring</em> a global variable (since no local variable <code>skip_confirm</code> exists in those methods) before passing that value along. Perhaps you merely copied those arguments straight from the method signature. Remove the <code>skip_confirm =</code> to avoid declaring global variables.</p>

<pre><code>this.delete_col(0, true);
</code></pre>

<h1>Suggestions</h1>

<h2>Table methods</h2>

<p>You could consider adding rows with <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/insertRow" rel="nofollow noreferrer"><code>HTMLTableElement.insertRow()</code></a> and adding cells with <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableRowElement/insertCell" rel="nofollow noreferrer"><code>HTMLTableRowElement.insertCell()
</code></a> instead of using string literals - or else use a template...</p>

<h2>EcmaScript-2015 features</h2>

<p>Some features of <a href="https://www.ecma-international.org/ecma-262/6.0/" rel="nofollow noreferrer">EcmaScript-2015</a>, A.K.A. ES-6 are used:</p>

<ul>
<li>The template properties for the components are defined using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals" rel="nofollow noreferrer">template literals</a>,</li>
<li>The default values for arugments on methods - like <code>delete_col: function(col_index, skip_confirm = false) {</code></li>
</ul>

<p>Because those features are used, you might as well use other ES-6 features like:</p>

<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const" rel="nofollow noreferrer"><code>const</code></a> to create block scoped variables that aren't re-assigned and <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let" rel="nofollow noreferrer"><code>let</code></a> for block-scoped variables that should be re-assigned.</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#Swapping_variables" rel="nofollow noreferrer">destructuring assignment for swapping values</a></li>
</ul>

<h3>VueJS features</h3>

<p>As mentioned above, use <a href="https://vuejs.org/v2/api/#ref" rel="nofollow noreferrer"><code>$refs</code></a> instead of querying for elements. For example, the Table preview component table could be updated like below:</p>

<pre><code>template: `
&lt;div ref="tablePreviewContainer" class="table-preview-container"&gt;
  &lt;button class='render-table' v-on:click="render_table"&gt;Preview table&lt;/button&gt;
  &lt;table ref="tableRenderPreview" class="table-render-preview"&gt;&lt;/table&gt;
&lt;/div&gt;
`,
</code></pre>

<p>Then in the methods, instead of querying the entire DOM for that element:</p>

<blockquote>
<pre><code>var table_placeholder = document.querySelector('.table-render-preview');
</code></pre>
</blockquote>

<p>use <code>$refs</code> to access them:</p>

<pre><code>const table_placeholder = this.$refs.tableRenderPreview;
</code></pre>

<p>Notice that <code>const</code> was used instead of <code>var</code> because that value never gets re-assigned. </p>

<p>For more tips on cleaner JS, <a href="https://ilikekillnerds.com/2015/02/stop-writing-slow-javascript/" rel="nofollow noreferrer">check out this article</a>. I know it is a few years old and bashes jQuery but has good points.</p>
    </div>