<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your solution is okay; although I'd make <code>appendOtherInfo()</code> a local function of <code>createOptions()</code>. <strong>But</strong> the problem is, in terms of <em>abstraction</em> - you build a function that you want to re-use and that gives you the <em>feeling</em> it is generic enough for all future use cases for your drop down. However, there are two problems - your <em>"generic"</em> function is just generic <em>enough</em> for <em>flat</em> objects and cannot easily handle nested objects.</p>

<p>Furthermore because it's only argument is an object, different properties in it have different meanings - this is not good for code readability.</p>

<p>So my advice is, why bother writing something that is seemingly generic, but actually not generic enough that it will ever see proper reuse.</p>

<p>Instead simply use direct mappers; they are more readable and they give you the full flexibility, so instead of:</p>

<pre><code>&lt;react-select options = { createOptions({
  data: people,
  valueKey: 'id',
  labelKey: 'name',
  type: 'type',
  capitalCity: 'city'
})}&gt;/
</code></pre>

<p>Simply do:</p>

<pre><code>&lt;react-select options = { people.map(peopl =&gt; {
  value: peopl.id,
  label: peopl.name,
  type: peopl.type
  capitalCity: peopl.city
}
}&gt;/
</code></pre>

<p><em>(I did not look up <code>&lt;react-select&gt;</code>'s API)</em>:
Do not hide simple <em>extracting and remapping</em> behind functions if there is no need to - make code explicit and readable.</p>

<p>You can happily use <em>destructuring</em> with <em>renaming</em> and <em>...</em>, if you only need to map label and value as well:</p>

<pre><code>&lt;react-select options = { people.map(peopl =&gt; ({
  const {id: value, name: label, ...other} = peopl;
  return {value, name, ...other}})
)}&gt;/
</code></pre>

<p>Or to be explicit and combining above:</p>

<pre><code>&lt;react-select options = { people.map(peopl =&gt; ({
  const {id: value, name: label, type, city: capitalCity} = peopl;
  return {value, name, type, capitalCity}})
)}&gt;/
</code></pre>
    </div>