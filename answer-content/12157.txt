<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Style</h3>

<p>Please learn to indent your code consistently.<br>
This is really hard to read and make sure ti works.</p>

<h3>Algorithm</h3>

<p>I would expect both <code>push()</code> and <code>pop()</code> to have a complexity of O(1). Unfortunately the pop is O(n) as you have to search to the end to remove the last item.</p>

<pre><code>        while (temp-&gt;next != last) {
            temp = temp-&gt;next;
        }
</code></pre>

<p>You can solve this by using a doubly linked list. Then removing the last item would be:</p>

<pre><code>       temp = last-&gt;prev;
</code></pre>

<p>Personally I would use a doubly  linked list and sentinel values (thus you don't need to check for NULL). This makes both inserting and removing the values very simple.</p>

<pre><code> // Note:  First points at the sentinel.
 //        Last points at the last item inserted.
 //        If no items are inserted then it points at the sentinel.
 //        When there are no items the sentinel points at itself in next/prev
 //        thus making the list circular.
 stack&amp; push(int value)
 {
                        //  Value   Prev   Next
     Node*  temp = new node(value,  last,  last-&gt;next);
     last-&gt;next-&gt;prev = temp;
     last-&gt;next       = temp;
     last = temp;
     return *this;
 }
 stack&amp; pop()
 {
     if (first == last)
     {    throw std::runtime_error("Bad Pop");
     }
     Node*  temp = last;
     last-&gt;next-&gt;prev = temp-&gt;prev;
     last-&gt;prev-&gt;next = temp-&gt;next;
     delete temp;
     return *this;
 }
</code></pre>

<h3>Code Comments</h3>

<p>Stop doing this</p>

<pre><code>using namespace std;
</code></pre>

<p>Its a bad habit to get into it. See my other posts for an explanation.</p>

<p>Use encapsulation correctly.</p>

<pre><code>public:
    Node* first;
    Node* last;
</code></pre>

<p>Member variables should not be public.<br>
Modification of the object state should only be through a controlled environment (method call). </p>

<p>Note: It is OK for the <code>Node</code> to have all public member variables (ie a struct)</p>

<pre><code>struct Node {
    int data;
    Node* next;
};
</code></pre>

<p>This is because you never expose a <code>Node</code> object via the <code>Stack</code> interface. Though personally I would make node a private sub class inside the <code>Stack</code> class.</p>

<p>Use a constructor in Node to set it up.</p>

<pre><code>    Node* temp = new Node;
    temp-&gt;data = value;
    temp-&gt;next = 0;

    // Can be written:
    Node* temp = new Node(value, 0);
</code></pre>

<p>Don't bother with this.<br>
It does not add to readability and it does no work.</p>

<pre><code>    temp = 0;
</code></pre>

<p>In main if you don't explicitly return the compiler inserts a return 0. Thus if there is no possibility of an error state for your program then don't return anything (this is an indication that it will always work).</p>

<pre><code>int main() {
    // return 0;  Don't need this if the application always works.
}
</code></pre>
    </div>