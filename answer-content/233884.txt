<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It could be my very old eyes, but it seems like this is just a copy rather than a merge, or at least the test is, I don't see where <code>output</code> is being filled with any content prior to the merge.</p>
<h2>Obsolete C++</h2>
<p>In the <code>main()</code> function the code is using <code>std::random_shuffle(v.begin(), v.end());</code>, this was <a href="https://en.cppreference.com/w/cpp/algorithm/random_shuffle" rel="nofollow noreferrer">depreciated in C++14 and removed from C++17</a>.</p>
<h2>Good Habit in C++ and C</h2>
<p>Mostly for code maintenance reasons, but also for readability, it is a good habit to wrap the code in if statement or loops in braces (<code>{}</code>) even if the code is only a single statement. This makes it easier to modify the code in the future, and prevents the insertion of bugs in the future when the maintainer is in a rush. Lots of bugs have been caused have been caused by coders adding a single line of code in an if statement or loop.</p>
<pre><code>    if (inputs.empty())
        return output;
</code></pre>
<p>is not as maintainable as:</p>
<pre><code>    if (inputs.empty())
    {
        return output;
    }
</code></pre>
<p><em>Note <code>multi_merge(std::vector&lt;range&lt;I&gt;&gt; inputs, O output, Compare comp)</code> is inconsistent in the use of braces.</em></p>
<h2>Avoid Magic Numbers</h2>
<p>In <code>main()</code> a symbolic constant is created for <code>count</code>, which is 10000, but no symbolic constant is defined for 1000. It would make the code easier to read if it was consistent and there was a symbolic constant for 1000 as well</p>
    </div>