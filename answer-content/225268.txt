<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Not a full review, but several issues pop up at a quick scan:</p>

<ul>
<li><p>Avoid <code>panic</code>, it's meant for reporting a bug in the program (e.g. dividing by zero, failing a bounds check, dereferencing a nil pointer, etc) and not for user errors (e.g. a failure to complete an HTTP request).</p>

<p>Panics also produce stack traces by default. Users should (almost) never get shown stack traces but instead a simple error report (e.g. if in unix you do <code>ls /non-existant-dir</code> you don't get a stack trace of the internals of the ls command but a report that the directory <code>/non-existant-dir</code> does not exist).</p></li>
<li><p><code>defer</code> should almost never be used within a loop. The deferred function doesn't run until the enclosing function returns/exits. Here you should be calling <code>resp.Body.Close</code> on each loop iteration before the next one.</p></li>
<li><p>Avoid using global variables. Here there is no reason that <code>l</code> and <code>m</code> cannot be local to <code>makeRequest</code>.</p></li>
<li><p>From the <code>net/http</code> documentation:</p>

<blockquote>
  <p>Clients and Transports are safe for concurrent use by multiple
  goroutines and for efficiency should only be created once and re-used.</p>
</blockquote>

<p>You create a new <code>http.Client</code> on each loop iteration. At minimum you could create just one outside of the loop and then set <code>client.Timeout</code> in each iteration.</p></li>
<li><p>You repeat a lot of code in each branch of the <code>if i.RequestMethod == "get"</code>. I'd instead conditionally create a nil or non-nil <code>body</code> and use a single <code>req, err := http.NewRequest(i.RequestMethod, i.URL, body)</code> and <code>client.Do(req)</code>.</p></li>
<li><p>Never ignore errors like this:</p>

<blockquote>
  <p><code>jsonStr, _ := json.Marshal(d.Item)</code></p>
</blockquote>

<p>Either handle/report/return the error as regular or if the surrounding function doesn't have (and shouldn't have) an error return <strong>and</strong> if the code should never fail (e.g. the code is constructing a value that should always be marshallable) then a panic for <code>err != nil</code> is reasonable (i.e. if someone should change the code later that json.Marshal suddenly fails they'll get a panic telling them where they messed up rather than strange failures later on).</p></li>
<li><p>Instead of
<code>bytes.NewBuffer([]byte(jsonStr))</code>
do
<code>strings.NewReader(jsonStr)</code></p>

<p>In general, try and avoid or limit <code>[]byte</code> &lt;-&gt; <code>string</code> conversions as they require allocations.</p></li>
<li><p><code>Config</code> should probably be passed around as a pointer, <code>*Config</code>. Either that or it's <code>Params</code> field should be a slice of pointers (<code>[]*struct</code>). As-is if there the slice was 100 items each time it's passed 100×5 strings need to be copied (which only copies a pointer to the string, but it's still O(n)).</p></li>
</ul>
    </div>