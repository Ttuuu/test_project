<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>public class StrFromInteger {
</code></pre>

<p>This is a convertor, so I would expect some kind of actor in the name, say <code>DecimalStringCreator</code>. What you've currently got is more like a method name.</p>

<hr>

<pre><code>public static String returnDigitString(int digit) {
</code></pre>

<p>The comment before this function is <strong>almost</strong> a JavaDoc. Generally public methods should be documented with the JavaDoc within <code>/**</code> and <code>*/</code>.</p>

<p>That something is returned should be logical, try <code>digitToString</code>. As the string is always one character, a <code>digitToCharacter</code> might be better. Unless you want to make it part of programming interface, this method should probably be <code>private</code>. </p>

<p>Note that an integer might not just be a digit. I would call it <code>digitValue</code> instead and then add a guard statement, such as:</p>

<pre><code>if (i &lt; 0 || i &gt; 9) {
   throw new IllegalArgumentException("Value of digit not in the range [0..9]");
}
</code></pre>

<p>or something similar.</p>

<hr>

<pre><code>String res = "";
</code></pre>

<p>Assigning an immutable empty string is almost never a good idea. Don't assign values unless you really have to.</p>

<hr>

<pre><code>switch(digit) { ... }
</code></pre>

<p>Whenever possible, try and not start calculating yourself. Let the computer handle it. In this case it is important to know that the numbers are all situated in character range <code>0x0030</code> for the zero and <code>0x0039</code> for the 9 - in order of course. The location is not that important, but the order is, as it allows you do to</p>

<pre><code>char digit = '0' + i;
</code></pre>

<p>instead.</p>

<p>In Java it is perfectly valid to use <code>return "3";</code> by the way. That way you would not need the many <code>break;</code> statements. Generally we put <code>break</code> on a separate line by the way.</p>

<hr>

<pre><code>// TODO Auto-generated method stub
</code></pre>

<p>Always remove those kind of comments before posting or - for that matter - checking into source control (e.g. Git).</p>

<hr>

<pre><code>public static void main(String[] args) {
</code></pre>

<p>A main method is fine for setting up a <code>Scanner</code>, retrieving user input and producing output. But the actual conversion from <code>int</code> to <code>String</code> should be in a separate method.</p>

<hr>

<pre><code>//find the number of digits using logarithm
</code></pre>

<p>Whenever you type this kind of comment, you should create a method. In this case <code>calculateNumberOfDigits()</code> would be a good name. Now that's clear, you can actually remove the comment - so you would not have to do all that much.</p>

<hr>

<pre><code>int input = number;
</code></pre>

<p>First of all, the scanner produces the <code>input</code>. You only need one variable for this because neither <code>number</code> or <code>input</code> is ever changed.</p>

<hr>

<pre><code>int length = 0;
</code></pre>

<p>Another assignment that isn't needed. Java will complain if variables are not assigned. This is useful to find bugs as well, so if the variable is always assigned then specifying a default value is not needed.</p>

<pre><code>if(number != 0) {
length = ( int ) (Math.log10(number) + 1 );}
else if(number ==0) {
    length = 1;
}
</code></pre>

<p>Oy, bad indentation and bad usage of white space. This should be:</p>

<pre><code>if(number != 0) {
    length = (int) (Math.log10(number) + 1);
} else if(number == 0) {
    length = 1;
}
</code></pre>

<hr>

<pre><code>String[] reverseStr = new String[length];
</code></pre>

<p>String arrays are generally not a good idea. In this case you can always simply perform String concatenation using <code>+</code>. Note that it is completely possible to add Strings / characters at the start of a string as well.</p>

<hr>

<p>--length;</p>

<p>Generally we use <code>length--</code>. Don't use <code>--length</code>, unless you need to use the original <code>length</code> value within a larger expression. If possible simply use <code>length--</code> afterwards: expressions without so called <em>side effects</em> are much easier to understand.</p>

<hr>

<pre><code>number = length;
</code></pre>

<p>Do not reassign variables to other values than that they originally hold. If the meaning of a variable changes then you can be sure that confusion will arise.</p>

<hr>

<p>The main idea of getting a list of digits is OK:</p>

<pre><code>for(int i = number; i &gt;= 0; --i) {

    remainder = result % 10;

    valStr = returnDigitString(remainder);
    strSeq = valStr + strSeq;

    result = result / 10;
}
</code></pre>

<p>But beware of variable naming. <code>result</code> is not really the result that you are looking for; that's the <em>string</em> after all. So another name should be preferred, e.g. <code>numberValueLeft</code> or just <code>valueLeft</code>.</p>

<p>Note that if <code>valueLeft</code> is zero then the calculation is finished, so that's another way of determining the end of the calculation.</p>

<hr>

<p>Here's my take:</p>

<pre><code>/**
 * Creates a decimal String for a value that is positive or zero.
 * 
 * @param value the value to convert
 * @return the string representing the value
 */
public static String toDecimalString(int value) {
    // guard statement
    if (value &lt; 0) {
        throw new IllegalArgumentException("Negative numbers cannot be converted to string by this function");
    }

    if (value == 0) {
        return "0";
    }

    String decimalString = "";

    int left = value;
    while (left &gt; 0) {
        int digitValue = left % 10;
        char digit = (char) ('0' + digitValue);
        decimalString = digit + decimalString;
        left = left / 10;
    }

    return decimalString;
}
</code></pre>

<p>Note that you would normally use <code>StringBuilder</code> for this kind of thing, but I presume that that's not allowed in this case.</p>

<p>I always indicate what kind of string is being returned with a function. I've seen tons of <code>somethingToString()</code> functions that are absolutely unclear of what is being returned. Now I think that a decimal string is what most people expect, but I've also seen <code>somethingToString()</code> functions that return hexadecimals, base 64 or whatnot, so making it clear helps the reader.</p>
    </div>