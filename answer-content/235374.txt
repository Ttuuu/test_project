<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Single Responsibility</strong></p>

<p>My rule of thumb is that no extra methods or data should be added to an enum. If input has to be converted to an enum (or enum to output), a separate <code>Function</code> is created to handle the transformation. This way the enum does not get piggybacked with any additional responsibilities. The enum should be used for computation only.</p>

<p>Once you do that your problem becomes simple, as the responsibility of the unknown grade symbol is no longer responsibility of the enum. It becomes the responsibility of the component that should be responsible for incorrect input: the input handler. Now the correct action can be chosen from the specification that was made for the input handler. The Operation enum no longer has to worry about situations where it doesn't exist. It always exists.</p>

<p>This follows the <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" rel="nofollow noreferrer">single responsibility principle</a>.</p>

<p>Thus:</p>

<pre><code>public class SymbolToOperationConverter implements Function&lt;String, Operation&gt; {

    // Copy gervais.b's init routine.
    private static final Map&lt;String, Operation&gt; CONVERSION_MAP = ...;

    public Operation apply(String symbol) {
        Operation op = CONVERSION_MAP.get(symbol);
        if (op != null) {
            return op;
        } else {
            // My spec chooses to throw an excepotion.
            throw new InvalidInputException(...);
        }
    }
}
</code></pre>

<p><strong>Useless Use Of Optional</strong></p>

<p><code>Optionals</code> are to Java programmers what <code>cat</code> is to Unix admins. More often than not they are completely unnecessary. Optionals were intended to be a way to communicate the possibility of null values in public interfaces in a code level (as opposed to documentation or annotations). The <code>fromGradeSymbol</code> method is completely internal to your application so you should know that it can return nulls and have unit tests for those use cases (that is, if you choose to not follow my advice above). There is literally nothing evil with returning a null value or testing for null with an if statement. The evil is <em>not knowing if a third party library you use might return null or not</em>. <a href="https://stackoverflow.com/questions/26327957/should-java-8-getters-return-optional-type/26328555#26328555">Optional was created to fight that evil</a>.</p>
    </div>