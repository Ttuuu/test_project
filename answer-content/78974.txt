<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Tweaks</h2>

<blockquote>
<pre><code>for ($i = 0; $i &lt; count($prods); $i++)
{
    for ($u = 0; $u &lt; count($cats); $u++)
    {
</code></pre>
</blockquote>

<p>I'd avoid calling <code>count</code> on each iteration of the loop.  Save the value at initialization time instead.  </p>

<pre><code>for ( $i = 0, $n = count($prods); $i &lt; $n; $i++ ) {
    for ( $u = 0, $m = count($cats); $u &lt; $m; $u++ ) {
</code></pre>

<p>I'd flip these around.  </p>

<pre><code>foreach ( $cats as &amp;$category ) {
    foreach ( $prods as $product ) {
</code></pre>

<p>The switch to <code>foreach</code> means that you aren't having to muck with the <code>count</code>.  It will handle that in the background.  </p>

<blockquote>
<pre><code>            array_push($cats[$u]['products'], $prods[$i]);
</code></pre>
</blockquote>

<p>When adding a single value, <code>[]=</code> is more efficient than <code>array_push</code>.  </p>

<pre><code>            $category['products'][] = $product;
</code></pre>

<p>When you use the reference version of <code>foreach</code>, you should explicitly break the reference using <code>unset</code> when done.  </p>

<pre><code>unset($category);
</code></pre>

<p>Note that if <code>$cats</code> were the inner loop, we'd need to do this for every iteration of the outer loop.  </p>

<p>So in whole, that gives us </p>

<pre><code>foreach ( $cats as &amp;$category ) {
    foreach ( $prods as $product ) {
        if ( $product['category_code'] === $category['category_style_code'] ) {
            if ( ! isset($category['products']) ) {
                $category['products'] = array();
            }

            $category['products'][] = $product;
        }
    }
}

unset($category);
</code></pre>

<h2>New Algorithm</h2>

<p>But we can do even better.  Note that this runs <code>count($cats)</code> times <code>count($prods)</code> iterations.  But we don't actually have to check every category against every product.  We just need a way to look up the category for a given code.  </p>

<pre><code>    $category_of = array();
    foreach ( $cats as &amp;$category ) {
        $category_of[$category['category_style_code']] = &amp;$category;
    }
    unset($category);
</code></pre>

<p>Now our <code>$prods</code> loop can just look up the category.  </p>

<pre><code>    foreach ( $prods as $product ) {
        if ( isset($category_of[$product['category_code']]) ) {
            if ( ! isset($category_of[$product['category_code']]['products']) ) {
                $category_of[$product['category_code']]['products'] = array();
            }

            $category_of[$product['category_code']]['products'][] = $product;
        }
    }
</code></pre>

<p>If we don't mind having empty products arrays in a category, we can speed up the second loop by moving the check into the first loop.  </p>

<pre><code>    $category_of = array();
    foreach ( $cats as &amp;$category ) {
        $category_of[$category['category_style_code']] = &amp;$category;

        if ( ! isset($category['products']) ) {
            $category['products'] = array();
        }
    }
    unset($category);
</code></pre>

<p>Now each <code>$category['products']</code> is guaranteed to be set, so we only do this check once per category not once per product.  Note that we may not need to do the check.  if we know that <code>$category['products']</code> is not set until we do this, we can just do the assignment.  </p>

<p>Currently we check that a given category exists before assigning.  If this will always be true, then we can remove the check and just assign:</p>

<pre><code>    foreach ( $prods as $product ) {
        $category_of[$product['category_code']]['products'][] = $product;
    }
</code></pre>

<p>Now we iterate <code>count($cats)</code> plus <code>count($prods)</code> times.  This sum should be smaller than the product in most cases.  The exceptions would be single element cases (only one product or one category or both).  This will use more memory (for the <code>$category_of</code> array), but hopefully you aren't right up against the memory limit anyway.  </p>

<h2>Final Version</h2>

<pre><code>    $category_of = array();
    foreach ( $cats as &amp;$category ) {
        $category_of[$category['category_style_code']] = &amp;$category;

        $category['products'] = array();
    }
    unset($category);

    foreach ( $prods as $product ) {
        $category_of[$product['category_code']]['products'][] = $product;
    }
</code></pre>

<p>Another advantage of this version is that it is the first loop that does more work.  Since there are more products than categories (because there are multiple products per category but only one category per product in this model), this should speed things up.  </p>

<p>Remember our assumptions though.  If they don't hold true, then the code should change:</p>

<ul>
<li><code>$category['products']</code> is not set with data we need for any category prior to this code.</li>
<li>There is always a category for every <code>$product['category_code']</code>.  </li>
</ul>

<p>The original code did not make these assumptions.  It's unclear if that is because they don't hold as it needed the checks for other purposes.  Additional context might have made this clearer.  </p>

<p>An advantage of this version is that it will throw an error if the second assumption does not hold.  The original code would just leave things in an inconsistent state.   </p>
    </div>