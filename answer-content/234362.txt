<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Revisiting this problem exactly 1 year after asking it, the following is a dynamic-programming based solution, thanks to commenter Niako in the original post (linked in the question):</p>

<pre><code>N = int(input())

def primeFactorization(n):
    """ Return the prime factors of n """
    p_factors = []
    lastresult = n
    while 1:
        if lastresult == 1:
            break
        c = 2
        while 1:
            if lastresult % c == 0:
                break
            c += 1
        if c not in p_factors:
            p_factors.append(c)
        lastresult /= c
    return p_factors

F = primeFactorization(N)
R = [False]*(N+1)
R[0] = True
for p in F:
    for n in range(p,N+1):
        R[n] = R[n] or R[n-p]

sols = []
for i in range(2,int(N/2)+1):
    if R[i]==True:
        sols.append(i)
        sols.append(N-i)
sols.append(N)
print(len(set(sols)))
</code></pre>

<p>This works, except for 2 test cases, cases 7 and 8 (i.e., inputs 33 and 35, where the expected outputs are 13 and 11 respectively, but this program outputs 15 for both). It would be great if someone can point out why.</p>
    </div>