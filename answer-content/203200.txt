<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This function alias is deficient. <code>decltype(auto)</code> will get you the right return type, but <a href="https://stackoverflow.com/a/52123393/1896169">it is not SFINAE friendly</a>. For example, the following <a href="https://godbolt.org/z/ljmH4e" rel="nofollow noreferrer">fails to compile</a>:</p>

<pre><code>struct A{};
struct B{};

bool old_name(A i)
{
    return false;
}

FUN_ALIAS(new_name, old_name);

// This does compile if I use old_name instead
template &lt;typename T&gt;
auto something_else(T t)
    -&gt; decltype(new_name(t))
{
    return new_name(t);
}

// If the prior overload SFINAEs away, this overload is chosen
bool something_else(...)
{
    return true;
}

bool foo()
{
    // Tries the first overload (varargs are lowest priority), but
    // it's a hard error instead of SFINAE, because new_name isn't
    // SFINAE friendly
    return something_else(B{});
}
</code></pre>

<p>Instead of <code>decltype(auto)</code>, you need to use a trailing return type:</p>

<pre><code>#define FUN_ALIAS(NEW_NAME, ...)                                                \
  template &lt;typename... Args&gt;                                                   \
  inline auto NEW_NAME(Args &amp;&amp;... args)                                         \
    noexcept(noexcept(__VA_ARGS__(std::forward&lt;Args&gt;(args)...)))                \
    -&gt; decltype(__VA_ARGS__(std::forward&lt;Args&gt;(args)...))                       \
  {                                                                             \
    return __VA_ARGS__(std::forward&lt;Args&gt;(args)...);                            \
  }
</code></pre>

<p>This <a href="https://godbolt.org/z/t8pLTg" rel="nofollow noreferrer">allows the prior snippet to compile</a>.</p>
    </div>