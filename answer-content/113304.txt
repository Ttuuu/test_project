<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Naming</h3>

<p>I don't like to start out a review with picking on naming, but these variable names are awful:</p>

<blockquote>
<pre><code>x=[]
amount=int(input("How many numbers?"))
previous1 = 0
previous2=1
</code></pre>
</blockquote>

<p>Some renaming ideas:</p>

<ul>
<li><code>x</code> -&gt; <code>numbers</code></li>
<li><code>amount</code> -&gt; <code>count</code></li>
<li><code>previous1</code>, <code>previous2</code> -&gt; <code>result</code> (more on this later)</li>
</ul>

<h3>Loop over elements rather than indexes</h3>

<p>The index variable <code>i</code> is unnecessary and not useful:</p>

<blockquote>
<pre><code>for i in range(amount):
    previous1=x[i]+previous1
</code></pre>
</blockquote>

<p>Better to iterate directly over the elements:</p>

<pre><code>for num in x:
    previous1=x[i]+previous1
</code></pre>

<h3>Augmented assignment</h3>

<p>Note that this:</p>

<blockquote>
<pre><code>previous1 = x[i] + previous1
</code></pre>
</blockquote>

<p>Is equivalent to this (thanks to commutativity with respect to addition):</p>

<pre><code>previous1 = previous1 + x[i]
</code></pre>

<p>This latter form can be simplified as:</p>

<pre><code>previous1 += x[i]
</code></pre>

<h3>Use <code>sum</code></h3>

<p>If you want to add many numbers, you don't need a loop:</p>

<pre><code>previous1 = sum(x)
</code></pre>

<h3>Strange <code>-</code></h3>

<p>Given numbers \$x_1, x_2, ..., x_n\$, your implementation performs something like \$x_n - (x_{n-1} - (... - (x_2 - x_1))))...)\$ which seems pretty odd. For example if the input is <code>[1, 2, 3, 4]</code> it performs <code>4 - (3 - (2 - 1))</code> which I'm not sure how is useful...</p>

<h3>Poor formatting</h3>

<p>Please follow <a href="http://www.python.org/dev/peps/pep-0008/" rel="nofollow">PEP8</a>, the Python style guide.</p>

<h3>Suggested implementation</h3>

<p>It would be good to move the calculation logic to a function,
and separate it from the input reading.
While at it, some doctests would be interesting too.</p>

<p>With the above suggestions applied (and then some more):</p>

<pre><code>def calculate(numbers, operation):
    """
    &gt;&gt;&gt; calculate([1, 2, 3, 4], '+')
    10
    &gt;&gt;&gt; calculate([1, 2, 3, 4], '-')
    2
    &gt;&gt;&gt; calculate([1, 2, 3, 4], '*')
    24
    &gt;&gt;&gt; calculate([1, 2, 3, 4], '/')
    2.6666666666666665
    """

    if operation == "+":
        return sum(numbers)

    if operation == "*":
        result = 1
        for num in numbers:
            result *= num
        return result

    if operation == "-":
        result = 0
        for num in numbers:
            result = num - result
        return result

    if operation == "/":
        result = 1
        for num in numbers:
            result = num / result
        return result

    raise Exception('Unsupported operator')


def main():
    count = int(input("How many numbers?"))
    operation = input("(*), (/), (+), (-)")
    numbers = [int(input("Number: ")) for _ in range(count)]
    print(calculate(numbers, operation))
</code></pre>
    </div>