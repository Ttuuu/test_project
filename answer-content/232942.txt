<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are some things that may help you improve your program.  In all, it seems to be nice, straightforward code that does what it needs to do.  Good start!</p>

<h2>Use only required <code>#include</code>s</h2>

<p>The code has <code>#include &lt;stdbool.h&gt;</code> but doesn't use booleans.  It also appears that nothing from <code>&lt;stdlib.h&gt;</code> is used either. Only include files that are actually needed.</p>

<h2>Avoid the use of global variables</h2>

<p>I see that <code>ptr</code> and indirectly, <code>mem</code> are used only within <code>interpret()</code> but they are declared as global variables. It's generally better to explicitly pass variables your function will need or declare them within the appropriately smallest possible scope rather than using the vague implicit linkage of a global variable.  In this case, both <code>mem</code> and <code>ptr</code> could be local variables within <code>interpret()</code>.  Use <code>memset</code> if you need to zero the contents.</p>

<h2>Use const where practical</h2>

<p>The <code>interpret()</code> function does not modify the contents of the <code>code</code> pointer it is passed, so it should be declared <code>const</code>:</p>

<pre><code>void interpret(const char* code) { /*...*/ }
</code></pre>

<p>This also means that <code>ip</code> can be <code>const</code> and then also that the arguments to the other functions can be, too.</p>

<h2>Declare local routines <code>static</code></h2>

<p>If you declare <code>goToLoopEnd</code> and <code>goToLoopStart</code> as <code>static</code>, the compiler will know that they can never be called outside this one file.  With that information, much more optimization might be done, such as inlining the code.  </p>

<h2>Let the compiler generate code</h2>

<p>When a C program reaches the end of <code>main</code> the compiler will automatically generate code to return 0, so it is not necessary to write <code>return 0;</code> explicitly at the end of <code>main</code>.</p>
    </div>