<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Maintainability</strong><br>
You may be the only programmer on this project, but if you work on larger projects other people may have to maintain the code. Code like this:</p>

<pre><code>namespace po = boost::program_options;
</code></pre>

<p>makes the code much harder to maintain. That is especially true when that code is in a header file such as <code>parser.hpp</code>.
The previous code is the equivalent of putting</p>

<pre><code>using namespace std;
</code></pre>

<p>into a header file. How is someone that has to maintain the code going to find it? In 3 years even you may not remember this was done.</p>

<p><strong>Portability</strong><br>
While</p>

<pre><code>#pragma once
</code></pre>

<p>is widely supported, it has never been added to the C++ programming standard. Therefore there may actually be compilers that don't implement it. To ensure a header file is only included once it may be better to use</p>

<pre><code>#ifndef H_HEADER_NAME
#define H_HEADER_NAME

/* contents of header */

#endif /* H_HEADER_NAME */
</code></pre>

<p>because this will always be portable.</p>

<p><strong>Abuse of auto</strong><br>
C++ is a <strong>typed language</strong>, not a <strong>scripting language</strong>. The <code>auto</code> type declaration is very useful, especially in ranged loops, however, declaring almost every variable in a function as <code>auto</code> is an abuse of the feature. for maintainers of the code it might be better if most of the type declarations in <code>void Parser::recurseNodes(std::string_view code, std::weak_ptr&lt;AbstractNode&gt; const&amp; parent, int depth)</code> used explicit type declarations rather than <code>auto</code>.</p>
    </div>