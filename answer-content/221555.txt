<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It's unclear to me why you didn't chose to use a tree. From your example you know:</p>

<ul>
<li><code>A[0]</code> has the children <code>B[0:]</code>.</li>
<li><code>A[1]</code> has the children <code>B[1:]</code>.</li>
<li><p><code>A[2]</code> has the children <code>B[1:]</code>.</p></li>
<li><p><code>B[0]</code> has the children <code>A[2:]</code>.</p></li>
<li><code>B[1]</code> has no children.</li>
<li><code>B[2]</code> has no children.</li>
</ul>

<p>From this you should be able to see that you'll just have to walk the tree to get the values.</p>

<p>To get all the values you walk the tree with the roots being all the values in <code>A</code>. And you filter odd results.</p>

<pre><code>class Node:
    def __init__(self, value):
        self.value = value
        self.children = []

    def walk(self, path=None):
        path = (path or ()) + (self.value,)
        yield path
        for child in self.children:
            yield from child.walk(path)


def solution(A, B):
    A = [Node(a) for a in A]
    B = [Node(b) for b in B]

    for parents, children in ((A, B), (B, A)):
        for parent in parents:
            parent.children = [
                child
                for child in children
                if child.value &gt; parent.value
            ]

    for start in A:
        for values in start.walk():
            if len(values) % 2 == 0:
                print(values)
</code></pre>
    </div>