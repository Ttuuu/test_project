<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your first method does not work correctly if the first row is empty:</p>

<pre><code>print(max1(array: [[], [1, 2], [-3]])) // nil
</code></pre>

<p>This is difficult to salvage while avoiding an optional for the current <code>maxval</code>.</p>

<p>Your second method returns <code>nil</code> if any row is empty:</p>

<pre><code>print(max2(array: [[1, 2], [], [3, 4]])) // nil
</code></pre>

<p><code>guard</code> is a useful language feature to avoid the “optional pyramid of doom,” or to “early exit” in exceptional cases. But in your <code>max2()</code> function it makes the program flow difficult to understand (and introduced an error, as we saw above). With plain old <code>if-let-else</code> it would look like this:</p>

<pre><code>func max2(array: [[Int]]) -&gt; Int? {
    var maxval: Int?
    for row in array {
        if let rowmax = row.max() {
            if let temp = maxval {
                if rowmax &gt; temp { maxval = rowmax }
            } else {
                maxval = rowmax
            }
        }
    }
    return maxval
}
</code></pre>

<p>But actually the (explicit) handling of all the special cases of an empty array or empty rows can be avoided completely!</p>

<p>The <a href="https://developer.apple.com/documentation/swift/sequence/2431985-joined" rel="nofollow noreferrer"><code>Sequence.joined()</code></a> can be applied to the nested array, it returns a (lazily evaluated) sequence of all concatenated rows.</p>

<p>This simplifies the implementation to</p>

<pre><code>func max2D(array: [[Int]]) -&gt; Int? {
    return array.joined().max()
}
</code></pre>

<p>Or more generic, for nested arrays of <em>comparable</em> elements:</p>

<pre><code>func max2D&lt;T&gt;(array: [[T]]) -&gt; T? where T: Comparable {
    return array.joined().max()
}
</code></pre>

<p>You may also consider if it is worth defining a function for that purpose, if you also can call</p>

<pre><code>let myMax = my2DArray.joined.max()
</code></pre>

<p>directly.</p>
    </div>