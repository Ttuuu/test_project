<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It is really hard to solve the problem since the question is not providing all the necessary details.</p>

<p>Assuming you have a factory for your Http observable (call it <code>createHttpObservable()</code>) you may do something like this:</p>

<pre><code>const observable = createHttpObservable()

  // Share the stream of events across all the subscribers.
  .publishReplay(1)
  .refCount()

  // Use `.scan()` against event stream (similarly to how we `.reduce()` against an array).
  .scan(
    (history, currentValue, valueIndex) =&gt; {
      history.push({ num: valueIndex, httpNum: currentValue });
      return history;
    },
    []
  )

  // Take the last event from the `history`
  .map(history =&gt; history[history.length - 1].httpNum)

  // Arbitrarily use `.do` for side effects.
  .do(console.log);


// Subscribe wherever you need.
observable.subscribe();
observable.subscribe();
observable.subscribe();
</code></pre>

<p>Here's a related, but not quite the same exact <a href="https://plnkr.co/edit/msvVSs?p=preview" rel="nofollow noreferrer">plunkr</a>.</p>

<p>You can have more custom logic in the <code>.scan()</code> block, but frankly, I have no idea what are you trying to achieve and why is the first Http request's results are of any special interest.</p>
    </div>