<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You repeat a lot of work in each loop. A simple one is extracting the tumor_sizes from the lists. Each row you do <code>sizes = np.array(list(compare_df['tumor_size']))</code>. If you do <code>tumor_sizes = df["tumor_size"].apply(pd.Series)</code> at the beginning of the calculation, you have a series with all tumorsizes, indexed the same as your <code>df</code>.</p>

<p>You can save your results in a <code>DataFrame</code>, and then write this to a csv afterwards. If you want to do some further analysis, you have the DataFrame handy.</p>

<pre><code>result = pd.DataFrame(
    {
        "cell": df["cell"],
        "Date": df["Date"],
        "most_similar_to": None,
        "similarity": None,
    },
    index=df.index,
)
</code></pre>

<p>I</p>

<p>To iterate over the different days, you can use <code>DataFrame.groupby</code>:</p>

<pre><code>for date, data in df.groupby(pd.Grouper(key="Date", freq="d")):
    if data.empty:
        continue
    #     print(data)
    previous_samples = df["Date"] &lt; date
    compare_df = df.loc[previous_samples]
    compare_sizes = tumor_sizes.loc[previous_samples]
    if compare_df.empty:
        continue
</code></pre>

<p>iterates over all dates. it skips the ones where there were no samples, or no previous samples.</p>

<p>Then you can iterate over every row</p>

<pre><code>    for row in data.itertuples():
        distances = pd.Series(
            data=np.linalg.norm(
                compare_sizes - tumor_sizes.loc[[row.Index]].values, axis=1
            ),
            index=compare_sizes.index,
        )
        most_similar_index = distances.idxmin()
        result.loc[row.Index, ["most_similar_to", "similarity"]] = [
            compare_df.loc[most_similar_index, "cell"],
            distances[most_similar_index],
        ]
result
</code></pre>

<p>Then you can write the result to csv</p>

<pre><code>result.to_csv(&lt;filename&gt;, **&lt;format_options&gt;)
</code></pre>

<hr>

<h1>more vectorized</h1>

<p>instead of the for-loop, you can use <a href="https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.distance_matrix.html" rel="nofollow noreferrer">scipy.spatial.distance_matrix</a> on chuncks of the data. Like that you don't have to compute the whole spacial matrix, but only per day for example, reducing the memory need</p>

<pre><code>from scipy.spatial import distance_matrix
result2 = pd.DataFrame(
    {
        "cell": df["cell"],
        "Date": df["Date"],
        "most_similar_to": None,
        "similarity": None,
    },
    index=df.index,
)
for date, data in df.groupby(pd.Grouper(key="Date", freq="d")):
    if data.empty:
        continue
    #     print(data)
    previous_samples = df["Date"] &lt; date
    compare_df = df.loc[previous_samples]
    compare_sizes = tumor_sizes.loc[previous_samples]
    if compare_df.empty:
        continue
    distances = pd.DataFrame(
        distance_matrix(tumor_sizes.loc[data.index], compare_sizes),
        index=data.index,
        columns=compare_sizes.index,
    )
    most_similar_indices = distances.idxmin(axis=1)
    result2.loc[
        most_similar_indices.index, ["most_similar_to", "similarity"]
    ] = pd.DataFrame(
        {
            "most_similar_to": compare_df.loc[
                most_similar_indices, "cell"
            ].values,
            "similarity": distances.min(axis=1).values,
        },
        index=data.index,
    )
</code></pre>

<p>An alternative which stays more in <code>numpy</code>-land, and less in pandas:</p>

<pre><code>result3 = pd.DataFrame(
    {
        "cell": df["cell"],
        "Date": df["Date"],
        "most_similar_to": None,
        "similarity": None,
    },
    index=df.index,
)
for date, data in df.groupby(pd.Grouper(key="Date", freq="d")):
    if data.empty:
        continue
    #     print(data)
    previous_samples = df["Date"] &lt; date
    compare_df = df.loc[previous_samples]
    compare_sizes = tumor_sizes.loc[previous_samples]
    if compare_df.empty:
        continue
    distances = distance_matrix(tumor_sizes.loc[data.index], compare_sizes)

    most_similar_indices = distances.argmin(axis=1)
    most_similar_to = compare_df["cell"].values[most_similar_indices]
    similarities = np.choose(most_similar_indices, distances.T)

    result3.loc[data.index, "most_similar_to"] = most_similar_to
    result3.loc[data.index, "similarity"] = similarities
</code></pre>
    </div>