<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First off, this is quite good for beginner code. You'll do well if you keep the good habits you've started following.</p>

<p>A few critiques:</p>

<pre><code>class Card : IComparable&lt;Card&gt;
</code></pre>

<p>Do you intend this class to be subclassed? If not, seal it. </p>

<p>Are cards comparable by reference? That is, suppose we have two <em>different</em> instances of the queen of spades. Is it possible for the user of the library to tell them apart, or not?  If no, then this should be a struct, not a class; force the user to compare by value.</p>

<pre><code>public Kind Kind;
public Suit Suit;
</code></pre>

<p>NEVER DO THIS. Never make a public field. First, because it is a bad practice, and second, because now anyone can have a card in hand and <em>change it</em>.  Cards are immutable!  This should be</p>

<pre><code>public Kind Kind { get; private set; }
</code></pre>

<p>And so on.</p>

<pre><code>public int CompareTo(Card other)
</code></pre>

<p><strong>This code is very wrong.</strong>  <code>x.CompareTo(x)</code> must always return zero, <em>always</em>.  You never tested that case, otherwise you would have found the bug, so write that test.</p>

<p>If you're going to implement <code>CompareTo</code> it would be a good practice to also implement <code>Equals</code>, <code>operator ==</code>, <code>operator !=</code>, <code>GetHashCode</code>, <code>operator &gt;</code>, <code>operator &lt;</code>, <code>operator &lt;=</code> and <code>operator &gt;=</code>.  It is weird that you can compare two cards for rank with <code>CompareTo</code> but not with <code>&lt;</code> or <code>==</code>.</p>

<pre><code>class CardDeck
</code></pre>

<p>Again, seal it.</p>

<pre><code>public List&lt;Card&gt; Cards;
</code></pre>

<p>Again, never make a public field. This should be private; it's an implementation detail of the class.</p>

<pre><code>public int CountCardsInDeck =&gt; Cards.Count;
</code></pre>

<p>Needlessly verbose; just <code>public int Count =&gt; Cards.Count</code> is fine.</p>

<pre><code>public Card DrawTopCard()
</code></pre>

<p>Throw a better exception if there is no top card.</p>

<pre><code>Random random = new Random();
</code></pre>

<p>Newer versions of .NET have fixed this, but in older versions this was a bad practice, creating a Random every time you needed it. Instead, make it a field.</p>

<pre><code>public void WriteToConsole()
</code></pre>

<p>This is a weird way to write this functionality. Normally you'd override <code>ToString</code> and then do <code>Console.WriteLine(deck);</code></p>

<pre><code>class CardSorter : IComparer&lt;Card&gt;
{
    public CardOrderMethod SortBy = CardOrderMethod.SuitThenKind;
</code></pre>

<p>Again, seal your classes, and again, no public fields.</p>

<p>But this design is wrong. Don't make one class that can do two things. <strong>Make two classes if you have two things to do</strong>.  Make a <code>SuitThenKindSorter</code> and a <code>KindThenSuitSorter</code> class, not one class that has an <code>if</code> in the middle.</p>

<p>And again, the comparison logic is wrong; you are <em>required</em> to have a comparison where things that are equal are equal. You must never assume that the things being compared are unequal.  The contract of the comparison is that it can take <em>any two objects of the type</em> and compare them, not any two <em>different</em> objects.</p>
    </div>