<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You can split your operation on the input array into a forward and backward pass. The forward pass assigns each resulting element the product of all preceding elements while the backward pass multiplies each resulting element with the product of all successors.</p>

<p>By doing so, you reduce the number of inner loop iterations and thus computational complexity from nÂ² to n where n is the length of the input array:</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>function main(numbers) {
  let result = new Array(numbers.length);
  
  // Forward pass:
  let before = 1;
  for (let i = 0; i &lt; numbers.length; ++i) {
    result[i] = before;
    before *= numbers[i];
  }

  // Backward pass:
  let after = 1;
  for (let i = numbers.length - 1; i &gt;= 0; --i) {
    result[i] *= after;
    after *= numbers[i];
  }
  
  return result;
}

// Examples:
console.log(main([2, 6, 9, 31, 55]).join()); // 92070,30690,20460,5940,3348
console.log(main([1, 2, 3]).join());         // 6,3,2
console.log(main([0.7, 0.8]).join());        // 0.8,0.7</code></pre>
</div>
</div>


<p><strong>Implementation details:</strong></p>

<ul>
<li><p>This code avoids usage of <code>in</code> which can be problematic when the array prototype has been modified by third party code.</p></li>
<li><p>While the same function can be written recursively, non-recursive code bypasses possible call stack size limits and - in this case - is more expressive and thus more readable as well as more performant.</p></li>
<li><p>Also, while more declarative functional patterns such as <code>map</code>, <code>reduce</code> and <code>forEach</code> could be used, they all would require access to additional accumulator variables <code>before</code> and <code>after</code> defined outside their local callback scopes and make the forward-backward pass pattern less explicit and thus the code less readable.</p></li>
<li><p>Compared to the answer given by @kyrill and @MikeBrant, this implementation avoids division and is thus more robust. E.g. given <code>[0.7, 0.8]</code>, this implementation computes <code>[0.8, 0.7]</code> while a division would introduce precision errors and result in <code>[0.7999999999999999, 0.6999999999999998]</code>.</p></li>
<li><p>For some numbers a, b, c the result of a * b * c differs from c * b * a due to limited floating point precision and chaining of precision errors. Thus, this implementation doesn't faithfully reproduce the original implementation's results (due to the chosen multiplication order which I assume has been/can be chosen arbitrarily).</p></li>
<li><p>Some people prefer squeezing the <code>before</code> and <code>after</code> declaration into the loop initialization, which I would avoid for semantic reasons - they are accumulators and not loop counters.</p></li>
<li><p>Explicit initialization via <code>result = new Array(numbers.length)</code> is more readable than iterative calls to <code>result.push()</code> in the first pass. However, the later might give you a small performance boost in some engines for small arrays.</p></li>
</ul>
    </div>