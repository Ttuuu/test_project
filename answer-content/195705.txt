<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Card</h3>

<p>It took a while for me to understand why the <code>null</code> was there in <code>RANKS</code>, it's so that you don't have to do any off-by-one fixes when accessing the values. I'm not a big fan of that <code>null</code> though and would prefer a method called <code>String getRankText()</code> that would handle the off-by-one.</p>

<p>I would prefer <code>SUITS</code> as an <code>enum { CLUBS, DIAMONDS, HEARTS, SPADES }</code></p>

<p>I don't think the <code>compareValueALSD</code> and <code>compareValueAHSD</code> belongs in the <code>Card</code> class. I would keep the comparing logic outside this class, as there is not one clear way of how to do the comparison.</p>

<p>The method <code>printDeck</code> also does not belong in the <code>Card</code> class.</p>

<hr>

<h3>CardCollection</h3>

<p>Most of the class makes sense, but the <code>shuffle</code> method should take a <code>Random</code> object as input and avoid re-usage. There's also <code>Collections.shuffle</code> that you can call instead of doing the shuffling yourself. (I have not verified whether or not you have implemented Fisher-Yates shuffle correctly).</p>

<p>The <code>display</code> method also does not really belong in this class. A <code>display</code> method is part of your user interface, but this class is a model class. You could possibly have a method like <code>public String getFullRepresentation()</code> that could return a String for what to print, but I don't think that really belongs there either.</p>

<hr>

<h3>Deck</h3>

<p>This entire class can be replaced by having one method:</p>

<pre><code>public static CardCollection createDeck(String label) {
    CardCollection result = new CardCollection(label);
    for (int suit = 0; suit &lt;= 3; suit++) {
        for (int rank = 1; rank &lt;= 13; rank++) {
            result.addCard(new Card(rank, suit));
        }
    }
    return result;
}
</code></pre>

<p>This method can be in a class called <code>DeckFactory</code>, or in the class <code>CardCollection</code> or whereever you want essentially.</p>

<hr>

<h3>Player</h3>

<p>Everything fine except for the <code>display()</code> method which I don't think is even needed, as any code wanting to print the hand can call <code>getHand()</code></p>

<hr>

<h3>Eights</h3>

<p>Now it's getting more interesting. I don't know your rules for this game but I'm used to it not allowing some cards as the first card in the discard pile. If an illegal card goes there you might want to put it back, reshuffle and put a new card there (and repeat while it is an illegal card).</p>

<p>This class currently contains both user interactions (System.out and System.in) and also quite a bit of game logic. I would recommend to separate these aspects into different classes. One class for handling game logic, and one for handling input/output.</p>

<p>Your <code>nextPlayer</code> logic is currently dealing with <em>EightsPlayer</em> instead of dealing with a <code>int currentPlayerIndex</code>. If you would use an index instead you could switch player by doing <code>this.currentPlayerIndex = (this.currentPlayerIndex + 1) % this.players.size()</code> and <em>then</em> use <code>return this.players.get(this.currentPlayerIndex);</code></p>

<hr>

<h3>EightsCard</h3>

<p>I consider the <code>convert</code> method here a code smell. It indicates that there is some design that you can improve.</p>

<p>The main reason for this class seems to contain two things: 1. Logic for checking if a card matches another card by suit or rank. 2. Give a score to the card.</p>

<p>Put the logic for checking card matches and scoring a card in another class instead. There are some different levels to do this at:</p>

<ul>
<li>Easiest: Put as static methods in <code>Eights</code> so that makes <code>static boolean cardMatches(Card first, Card second)</code> and <code>static int cardScore(Card card)</code>.</li>
<li>Tougher: Extract an interface for each of these two functionalities instead and inject them where they are needed. <code>interface Scoring extends ToIntFunction&lt;Card&gt; {}</code> and <code>interface Matching extends BiPredicate&lt;Card, Card&gt; {}</code>, then use Java 8 method references for the <code>cardMatches</code> method and the <code>cardScore</code> method to have an instance of these and then pass them to where they are needed - i.e. other methods that need to call the methods for matching cards and scoring cards.</li>
</ul>

<hr>

<h3>EightsPlayer</h3>

<p>This class contains a copy of the scoring logic previously found in <code>EightsCard</code>.</p>

<p>This class both <em>extends Player</em> and also have its own <em>eightsHand</em> which leads to duplicate data - which one should we use?</p>

<p>This class contains both business logic - <code>drawForMatch</code> - and acts as an AI in the <code>play</code> method. The logic for handling the situation if a player cannot make a move should be in the <code>Eights</code> class. Only call the <code>play</code> method if the player really can make a move. You could have a look at <a href="https://codereview.stackexchange.com/q/36412/31562">an implementation of Rock Paper Scissors Lizard Spock</a> to get an idea.</p>

<hr>

<h3>Summary</h3>

<p>I would recommend that the <code>EightsPlayer</code> and <code>EightsCard</code> classes should be removed through refactoring using the suggestions above.</p>
    </div>