<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li>Not a fan of all these redundant functions.</li>
<li><p>Use equality for equality and <code>in</code> for in.</p>

<ul>
<li><code>'&lt;function' in str(obj)</code> -&gt; <code>str(obj).startswith('&lt;function')</code></li>
<li><code>module.__name__ in ...</code> -&gt; <code>module.__name__ == ...</code></li>
<li><code>not ('&lt;lambda&gt;' in ...)</code> -&gt; <code>'&lt;lambda&gt;' not in ...</code> -&gt; <code>'&lt;lambda&gt;' != ...</code></li>
</ul>

<p><br>
Lets play a game of what if:</p>

<ul>
<li>What if <code>foo.fn</code> is copied to <code>foo.bar.fn</code>.</li>
<li>What if someone built a function from a lambda so they changed the name to <code>fn_from_&lt;lambda&gt;</code>.</li>
</ul>

<p><br>
Yeah, let's stick to using <code>==</code> for equals.</p></li>
<li><p>Why is there a dictionary comprehension when the for after it consumes it?</p>

<p>This is just a waste of memory.</p></li>
<li><p>like with the dictionary compression this is a waste of memory. Additionally it's normally easier to work from a plain for as you can use assignments. </p>

<pre class="lang-py prettyprint-override"><code>_ = [print(k, '--', v) for k, v in mm.items()]
</code></pre></li>
</ul>

<pre class="lang-py prettyprint-override"><code>import utils


def get_module_methods(module):
    output = {}
    for name in dir(module):
        obj = getattr(module, name)
        obj_name = getattr(obj, '__name__', '')
        if (str(obj).startswith('&lt;function')  # Is function
            and '&lt;lambda&gt;' != obj_name  # Not a lambda
            and module.__name__ == getattr(obj, '__module__', '')  # Same module
            and name == obj_name
            and not (  # Dunder
                obj_name.startswith('__')
                and obj_name.endswith('__')
                and len(obj_name) &gt;= 5
            )
        ):
            output[name] = obj
    return output


mm = get_module_methods(utils)
for k, v in mm.items():
    print(k, '--', v)
</code></pre>

<p>Lets play another game of what if:</p>

<ul>
<li>What if I have a class that's <code>__str__</code> returns <code>'&lt;function...'</code>?</li>
<li><p>What if someone built a function from a lambda so changed the <code>__name__</code>?</p>

<pre class="lang-py prettyprint-override"><code>import functools
functools.wraps(lambda i: i)(...).__name__
</code></pre></li>
</ul>

<blockquote>
  <p>In particular I wonder if we can get away without typechecks</p>
</blockquote>

<p>No.</p>
    </div>