<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I see a minor speed-up already.</p>

<pre><code>while (true) {
    R = Q % radix;
    HexN = strv.charAt(R) + HexN;
    Q = (Q - R) / radix; 
    if (Q == 0) 
        break;
};
</code></pre>

<p>When you have a <code>while(true){blah blah if(condition) break;}</code>, you really have this:</p>

<pre><code>do {
   blah blah
} while (!condition);
</code></pre>

<p>And that's what I'd suggest to you too.</p>

<pre><code>do {
    R = Q % radix;
    HexN = strv.charAt(R) + HexN;
    Q = (Q - R) / radix; 
} while (Q != 0);
</code></pre>

<p>You can apply the same idea here:</p>

<pre><code>    var start = (new Date()) * 1,
        cracked = false,
        index = 0;
    while(!cracked){
        if(toRadix(index) == value)
            cracked = true;
        else
            index++;
    };
</code></pre>

<p>to</p>

<pre><code>    var start = (new Date()) * 1,
        cracked = false,
        index = -1;
    do {
        index++;
    } while(toRadix(index) != value);
</code></pre>

<p>And remove the whole <code>cracked</code> variable.</p>

<pre><code>    var start = (new Date()) * 1,
        index = -1;
    do {
        index++;
    } while(toRadix(index) != value);
</code></pre>

<hr>

<p>For the bigger performance gains it might be better to look for algorithmic optimization, rather than optimization of the implementation.</p>
    </div>