<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First of all, you don't need to make a class for this. There's no real reason for <code>FizzBuzz</code> to be an object when all you have is a collection of functions anyway. Likewise, you have a lot of functions that don't really need to be functions. All your test functions could just be plain <code>if</code> statements and that'd make them more readable to Python. I see you've discovered the <code>_</code> naming convention in Python, where names beginning with that are to be considered private. However you don't need to use these that often. Nothing's ever going to be truly private in Python without a lot of work, so instead allow people to access functions if they want to. Only mark functions private if there's actual problems with them attempting to use the function outside of a specific process.</p>

<p><code>parse_number</code> is good, though I'd replace the tests with plain tests instead of your functions.</p>

<pre><code>def parse_number(number):
    if number % 15 == 0:
        return "FizzBuzz"
    elif number % 3 == 0:
        return "Fizz"
    elif number % 5 == 0:
        return "Buzz"
    else:
        return str(number)
</code></pre>

<p>You could also add a docstring and maybe a comment, to indicate what the function does and returns as well as noting how <code>number % 15 == 0</code> is the same as <code>(number % 5 == 0) and (number % 3 == 0)</code>.</p>

<pre><code>def parse_number(number):
    """Returns a string Fizzbuzz representation of a number"""

    # This is the same as (number % 5 == 0) and (number % 3 == 0)
    if number % 15 == 0:
</code></pre>

<p>Start seems like a not very worthwhile function and not a great name if you're no longer making a class. But if you want to keep it a name like <code>fizzbuzz_string</code> would be better.</p>

<p>Now, your <code>_parse_numbers</code> isn't a great name because it's too similar to an existing function. There's also little reason to mark it as private. Instead this could be your main method, or at least call it <code>fizzbuzz</code>. You could also build it easier and faster with something called a list comprehension. A list comprehension is basically a for loop like expression that will be evaluated to create a list. Yours is very simple, you just need to run <code>parse_number</code> on each number in your <code>range</code>, so this is how you could write it:    </p>

<pre><code>def parse_number(number):
    """Returns a string Fizzbuzz representation of a number"""

    # This is the same as (number % 5 == 0) and (number % 3 == 0)
    if number % 15 == 0:
        return "FizzBuzz"
    elif number % 3 == 0:
        return "Fizz"
    elif number % 5 == 0:
        return "Buzz"
    else:
        return str(number)

def fizzbuzz(end_number):
    """Return a list of Fizzbuzz parsed numbers up to end_number."""

    return [parse_number(number) for number in range(1, end_number+1)]

def fizzbuzz_string(end_number):
    return ",".join(fizzbuzz(end_number))
</code></pre>

<p>Now you can easily just call <code>print fizzbuzz_string(number)</code> and get the full list without needing an object or the other extraneous functions.</p>
    </div>