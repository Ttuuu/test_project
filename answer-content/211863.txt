<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>For reference purposes your application UI looks like:
<a href="https://i.stack.imgur.com/3A3KR.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/3A3KR.png" alt="Mower"></a></p>

<p>There are following parts in the simulation:</p>

<ul>
<li>red fence</li>
<li>green grass</li>
<li>yellow/black automatic mower</li>
<li>black charging station</li>
</ul>

<p>The mower picks a direction and starts mowing until he reaches the fence, then it will change its direction, or it is at below 10&lt; on battery and it will return to the charging station. The battery lasts roughly 25s at x50 speed. </p>

<p>If the mower had an AI that picks optimal path then it would mow the whole field in roughly 12 minutes 50 seconds or 15.4 seconds at x50 speed, without needing to recharge once.</p>

<p>Instead of optimizing for time/cost efficiency, it has no guarantee that it will actually complete its task or have an estimation when complete. It can be used as a reference to others as being a brute force solution that roughly does the task as well.</p>

<p>So how good is it? Well, at x50 speed it took about 4 min of simulation time to roughly covered 95% of the area and after 6 min it has reached roughly 99%. However, after this, the efficiency drops. </p>

<p><a href="https://i.stack.imgur.com/CSOPA.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/CSOPA.png" alt="enter image description here"></a></p>

<p>(6 min x50 speed = 5 hours at x1 speed)</p>

<hr>

<p>There are too many things to note that can be improved, so I will try to just name a few obvious ones. Let's say that you have a goal to separate code into MVVM (model, view model and view) where the view is the XAML, view mode is the data context that the view uses and model is your data structures and logic. </p>

<p>View model should not virtually know anything about the view. Instead of having controls with names that you reference from your view model, you should use bindings to the view model properties. </p>

<pre><code>&lt;StackPanel&gt;
    &lt;ProgressBar 
      Minimum="0" 
      Maximum="100" 
      Value="{Binding Battery}" 
      Name="pb_RobotBatteryLive" /&gt;
    &lt;!--Note that even here you can replace 
        'ElementName=pb_RobotBatteryLive, Path=Value' 
        with just 'Battery' --&gt; 
    &lt;TextBlock 
      Text="{Binding ElementName=pb_RobotBatteryLive, Path=Value, StringFormat={}{0:0}%}" 
      HorizontalAlignment="Center" 
      VerticalAlignment="Center" /&gt;
&lt;/StackPanel&gt;
</code></pre>

<p>and in the code:</p>

<pre><code>_simulationView.pb_RobotBatteryLive.Value = _simulationModel.Robot.GetBatteryLiveInPercentage();
//vs
Battery = _simulationModel.Robot.GetBatteryLiveInPercentage();
</code></pre>

<p>in c# the region, autodoc/comments are often an antipattern. Comments do not fix the poorly written code - try to write clean code and comments are not needed.</p>

<p>What could really benefit the quality and tests would be a use of virtual time scheduler. However, at this point, there are no clear requirements to test and you should work on that - what is the real world problem that you are trying to solve. </p>

<p>At the moment, you have interwoven several layers and there is no clear separation of concerns. In addition, this accurate time does have a thread, but you use it just to kick off a timer event that calls method AccurateSimulationUpdatingTimer_Tick and all the work seems to happen on the dispatcher thread.</p>

<p>When the properties are changed then they generally should implement INotifyProperty. Generally, a code library weaver like <a href="https://github.com/Fody/PropertyChanged" rel="nofollow noreferrer">https://github.com/Fody/PropertyChanged</a> is used to add the implementation, so you would just need to add the interface. This would allow you to update UI correctly as well as do something when any model property changes.</p>

<hr>

<p>The variable names are chosen decently, property access visibility is mostly fine, app does deadlock the main thread if you tab out and in a few times but until then it does work. What you have managed to write is a working base for something you can use later. Its functionality resembles 90s screen saver. </p>

<p>Personally, I would recommend you try something simpler, doing graphic in c# with threads is not beginner-friendly. Check out Khan Academy, for example, I wrote the following demo under 15 min:
<a href="https://www.khanacademy.org/computer-programming/walkers-redgreenblueblackwhite-x10/5113615912009728" rel="nofollow noreferrer">https://www.khanacademy.org/computer-programming/walkers-redgreenblueblackwhite-x10/5113615912009728</a></p>
    </div>