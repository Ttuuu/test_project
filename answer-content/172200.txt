<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Basics</h3>

<ul>
<li><code>String</code> comparison shouldn't be done with <code>==</code>, unless you can carefully ensure you're using <code>String.intern()</code> <em>everywhere</em> so that the reference comparison will always match appropriately (not to forget the documentation too).</li>
<li>Keep your fields <code>private</code>!</li>
<li>Should <code>PaymentCalculator.calculatePrice(OrderItem)</code> really return <code>0</code> if there are no matching rules? That's like saying I can get oranges for free for a payment calculator that only (accidentally?) handle apples...</li>
</ul>

<h3>Rule-based vs <code>if</code> statements</h3>

<pre><code>// Add new rules here to support new SKUs. But why is this better
// than adding if/else in the old design? Because even this class 
// changes as we add more requirements right?
</code></pre>

<p>You can think of it that the calculation logic is not baked into the payment calculator, and that the logic can be maintained separately. For example, a more complex <code>IPriceRule</code> implementation might be retrieving prices from a database, and the calculator does not need to deal with any database connections know-how.</p>
    </div>