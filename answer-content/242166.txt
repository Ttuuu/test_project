<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>            while (j &gt;= fromIndex 
                    &amp;&amp; comparator.compare(array[j], targetElement) &gt; 0) {
                array[j + 1] = array[j];
                j--;
            }
</code></pre>
</blockquote>

<p>This code does two things.  It finds the insertion point and it moves the existing elements.  It could do just one thing.  </p>

<pre><code>            while (j &gt;= fromIndex 
                    &amp;&amp; comparator.compare(array[j], targetElement) &gt; 0) {
                j--;
            }
</code></pre>

<p>Now it only finds the insertion point.  </p>

<p>Then you can insert with something like </p>

<pre><code>            final int n = i - j;

            switch (n) {
                case 2: array[j + 2] = array[j + 1];
                case 1: array[j + 1] = array[j];
                case 0:
                    break;

                default:
                    System.arraycopy(array, j, array, j + 1, n);
            }
            array[j] = targetElement;
</code></pre>

<p>Not tested for fencepost errors, etc.  You may have to increment <code>j</code> before this.  But this should show the essential concept.  </p>

<p>Now both algorithms use essentially the same insertion code and you can compare the time to find the insertion point more directly.  So if your goal is to compare the two methods of finding the insertion point, this would be a better test.  It more clearly isolates that difference.  </p>

<p>Another alternative would be to stop using <code>System.arraycopy</code> and write a manual move routine in your binary insertion sort.  That would also fix the problem of comparability.  </p>
    </div>