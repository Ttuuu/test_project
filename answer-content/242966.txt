<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Type hints</h2>

<p>You're most of the way to having a well-explained constructor:</p>

<blockquote>
  <p>ticker (str): Stock-ticker Ex. 'AAPL'</p>
</blockquote>

<p>It's better to move that <code>(str)</code> to an actual type hint, i.e. </p>

<pre><code>def __init__(self, ticker: str):
</code></pre>

<h2>Superfluous methods</h2>

<p>As it stands, <code>make_request</code> doesn't need to exist. It would make sense to keep it if you add a <code>Session</code> instance to the class, which (for an API client) you should do anyway. But if you don't have a session, delete this method and just use requests directly. The same goes for <code>get_data</code>.</p>

<h2>Exception handling</h2>

<p>This:</p>

<pre><code>    except KeyError as e:
        print("Something went wrong")
</code></pre>

<p>should probably not be catching at all, or at least not catching here. If you are iterating over several web calls and you don't want them to cancel the loop due to an exception, catch in the loop. If you want to reformat an exception for printing to the console, do that somewhere up in the stack; but don't do it here. And if you <em>do</em> want to print an exception, print its <code>str()</code> representation; don't give a vague <code>Something went wrong</code>.</p>

<h2>Statics</h2>

<p><code>convert_timestamp</code> doesn't reference <code>self</code>, so should be a static method at least. More likely a global, standalone function, since it has nothing to do with your client.</p>

<h2>Type comparison</h2>

<p>Don't do this:</p>

<pre><code>type(value) == dict
</code></pre>

<p>Instead, use <code>isinstance</code>.</p>

<h2>Parameters to web requests</h2>

<pre><code>self._url = (f'https://query1.finance.yahoo.com/v10/finance/quoteSummary/'
                f'{self.ticker}?'
                f'modules={self.module}')
</code></pre>

<p>should avoid baking in <code>modules=</code>. This is best done by passing <code>params=</code> to <code>requests.get()</code>.</p>

<h2>"Private" variables</h2>

<p>This:</p>

<pre><code>@property
def module(self):
    return self._module
</code></pre>

<p>is a Java-ism. In the strict sense, Python has no private variables, and the underscore is basically a "soft request" for exterior users to leave a variable alone. It's more common to simply expose <code>self.module</code> as a variable without the property.</p>
    </div>