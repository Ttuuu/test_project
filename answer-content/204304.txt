<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>I'm trying to write game server core that I can easy extend to use for various games. From simple online Blackjack session, to MMORPG.</p>
</blockquote>

<p>I'm fairly certain, that won't work as easy as you think. It's a huge difference in requirements between exchanging data once a second between few players, and exchanging data 15/30/60 times <em>a second</em> with a .. 'massive' amount of players.</p>

<h2>class DataPacket</h2>

<p>You can make <code>DataPacket</code> an interface which extends <code>Serializable</code>. </p>

<h2>class LoginResponse</h2>

<p>Contains a <code>String</code> as response. This means, first of all, it's not internationalized, if that is a problem, second, the client has to parse a String to verify, if the login attempt was successful. What's wrong with a boolean?</p>

<h2>class Dispatcher</h2>

<ul>
<li>Dispatcher of what?</li>
<li>It is <em>usually</em> better to favor composition over inheritance. </li>
<li>maxHosts is never used, therefore dead code.</li>
<li>e.printStackTrace: Nope, we don't do that. In the constructor it is especially bad, since the program keeps running and fails again during <code>acceptIncomingConnections()</code></li>
<li>Field <code>status</code> must be declared <code>volatile</code>.</li>
<li>Thread.interrupt(): It's one of things where you have to know exactly what you're doing.</li>
<li>You make a new instance of ServerWorker, pass <code>this</code> as argument. That's a bidirectional dependency and must be avoided.</li>
</ul>

<h2>class ServerWorker</h2>

<ul>
<li>run() catches IOE and NPE and executes the same code. I don't think your program should reach that point, so that a NPE is possible.</li>
<li>listen(): Listen to what? And it doesn't exactly listen, it's more something 'readAndProcessDataPacket()', to be precise.</li>
<li>process(): Why are you using <code>Optional</code>? My interpretation of this is, that it is possible to send data which is unknown to the server, and if that happens, nothing happens. I don't think, this is what you want.</li>
<li>send(): You have to flush after writing the object, to guarantee, that the data has been flushed, not before.</li>
</ul>

<h2>interface Event</h2>

<p>Here again, you have a bidirectional dependency between the networking layer and the event layer. In the long run, this will be horrible to maintain. I'd recommend, to try to make the even system running without the networking layer first. Think more of the API, which you'd like to call from a layer above.</p>

<p>Hope this helps,</p>

<p>slowy</p>
    </div>