<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><code>exit(1)</code> is probably a bad idea, so is <code>fprintf</code> to <code>stderr</code>.  We don't know how big the string can be, therefore running out of memory could be valid, and if <code>stderr</code> is redirected to somewhere a client can see. <code>realloc</code> should already set <code>errno</code> to <code>ENOMEM</code>, so you could probably just return <code>NULL</code>, and modify comment that upon returning <code>NULL</code>, caller should check <code>errno</code>. Or maybe you should return empty string if there's no data, and use <code>NULL</code> to indicate error.</p>

<p>change <code>calloc</code> to <code>malloc</code>, as you anyway <code>NULL</code> terminate the string in your <code>fgetc</code> implementation.</p>

<p>Instead of having this code duplicated for error message (which I vote against), and actual calculation: <code>chunk_size*(j+1)*sizeof*line+1</code>, you could create a variable and use it in both places, therefore you know you print exactly what you did, and there wasn't a mistake if you had to change the calculation slightly.</p>

<p>Try this on windows (as it claims to be a cross platform implementation), but from memory <code>fgetc</code> will return <code>'\r'</code>, which you'll put right into the line, whereas I'm pretty sure <code>fgets</code> won't return <code>'\r'</code>, when the line terminator is <code>"\r\n"</code>; I believe <code>fgets</code> returns <code>"\n"</code>, not <code>"\r\n"</code> on windows, even if <code>"\r\n"</code> is in the input stream.</p>

<p>You don't need to assign data to <code>tmp</code> like this: <code>char* tmp=realloc(line,chunk_size*(i+2)*sizeof*line+1);</code> as upon success you always do: <code>line=tmp</code>, and upon failure, line will no longer point to valid memory. So you could just assign to <code>line</code>.</p>

<p>Notice how you're calling <code>malloc/calloc/realloc</code>, I would add a <code>freeline</code> function to your code in order to free any memory allocated by this code.  The caller may not be using the same <code>malloc/calloc/realloc</code> you're using, and their <code>free</code> may not be compatible.</p>

<p>Finally I'm not really sure about this: <code>chunk_size*(j+1)*sizeof*line+1</code><br>
I think you want: <code>chunk_size*(j+1)*sizeof*char+1</code>, as I think <code>line</code> is of size <code>4</code> or maybe even <code>8</code>?, print it out in the debugger, and see, I think you're allocating a lot more memory then you end up putting into the array.</p>
    </div>