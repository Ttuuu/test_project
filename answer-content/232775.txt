<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You're doing things the hard way.</p>

<pre><code>dic = {}
for p1 in range(len(seq)):
    for p2 in range(p1+1,len(seq)):
        dic.setdefault(tuple(seq[p1:p2]), []).append((p1,p2))
</code></pre>

<p>For each range, you are calling <code>.setdefault()</code>.  You should just use a default dictionary, which can automatically create a list for any unseen keys:</p>

<pre><code>from collections import defaultdict

dic = defaultdict(list)

for p1 in range(len(seq)):
    for p2 in range(p1 + 1, len(seq)):
        dic[tuple(seq[p1:p2])].append((p1, p2))
</code></pre>

<hr>

<p>Next, you're filtering the dictionary the hard way.</p>

<pre><code>cleandic = {}
for key, value in dic.items():
    if len(value) &gt; 1:
        cleandic.setdefault(key,value)
</code></pre>

<p>This can be expressed in one line, using list comprehension:</p>

<pre><code>cleandic = { key: val for key, val in dic.items() if len(val) &gt; 1 }
</code></pre>

<hr>

<p>The next improvement comes from noting that the key portion of <code>(-2, 3): [(0, 2), (2, 4)]}</code> is completely recoverable from the value portion; using <code>(0, 2)</code> or <code>(2, 4)</code> as a slice of <code>seq</code> will return the appropriate sequence.  You do not need to maintain a dictionary; a list of lists is sufficient and less complex.  Instead of <code>cleandic</code>, you can have:</p>

<pre><code>groups = [ val for val in dic.values() if len(val) &gt; 1 ]
</code></pre>

<p>Instead of removing the second of these two dictionary values:</p>

<blockquote>
  <p>#(1,4,-5,1,4,-5) : [(7,13),(10,16)]<br>
     #(1,4,-5) : [(7,10),(10,13)]  </p>
</blockquote>

<p>You now just need to remove the second of these two list entries:</p>

<blockquote>
  <p>[(7,13),(10,16)]<br>
     [(7,10),(10,13)]  </p>
</blockquote>

<hr>

<p>You can still sort this by noting that <code>(7,13)</code> represents a sequence of length 6.</p>

<pre><code>groups = sorted(groups, key=lambda item: item[0][1] - item[0][0], reverse=True)
</code></pre>

<hr>

<p>Any time you have to <code>.copy()</code> is good time to stop and think if there is another way to solve the problem.</p>

<pre><code>    for key2, values2 in sorteddic.copy().items():
        ...
                  sorteddic[key2].pop(sorteddic[key2].index(value2))
</code></pre>

<p>Here, you are modifying <code>sorteddic</code> inside the loop, so you clearly can't loop on the <code>sorteddic</code> itself, which explains the need to copy the dictionary first.  Since the copy is itself in another loop, you are doing a lot of copies!</p>

<p>Moreover, this isn't even a loop!  It is just a way to extract the first item from the dictionary.</p>

<pre><code>for key1, values1 in sorteddic.items():
    ...
    break
</code></pre>

<p>Rework the algorithm to not modify the container you're looping over:</p>

<pre><code>def subset_of(long_groups, group):
    return any(lg[0] &lt;= g[0] and g[1] &lt;= lg[1] for long_group in long_groups
               for lg in long_group for g in group)

...

longest_groups = []
for group in groups:
    if not subset_of(longest_groups, group):
        longest_group.append(group)
</code></pre>

<p>Finally, you can rebuild your dictionary with the sequence tuples as keys:</p>

<pre><code>readydic = { tuple(seq[group[0][0]:group[0][1]]): group for group in longest_groups }
</code></pre>

<p>Since all the dictionary copying has been removed, this should be significantly faster.</p>
    </div>