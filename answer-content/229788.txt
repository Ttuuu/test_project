<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This looks like a decent recursive implementation. So, this is mainly about style and readability.</p>

<p>First, I would like to talk about two things which are really hard and could use some improvement here, naming and consistency of semantic levels. Then I have some more miscellaneous comments.</p>

<h2>Naming</h2>

<p>Generally, the naming is not too bad, but some of the names are a bit misleading, e.g. the function name <code>GetRowCount</code> suggests that it returns the number of rows of whatever I give it. However, what it returns is the number of rows of the later output. So, one could simply call it <code>OutputRowCount</code>, which also follows the general guideline to use nouns that describe the return value for functions.</p>

<p>Another things with the naming is that it sticks a bit much to the role of things in the implementation and not to what they are. Naming things after what they are can make understanding the code much faster. E.g. using <code>inputColumnIndex</code> instead of <code>recursionDepth</code> would immediately tell the reader that you are dealing with this specific input column right now. Then the technical <code>maxRecursionDepth</code> could also be <code>lastColumnIndex</code> or <code>countOfColumns</code>. Similarly, the rather ominous <code>recursionInputColumnPopulationIndex(recursionDepth)</code> could be <code>currentInputIndex(inputColumnIndex)</code>. So generally, my advice would be to name things after what they are and not their implementation purpose.</p>

<h2>Consistency of Semantic Levels</h2>

<p>Programmers, me included, are notoriously bad a keeping semantic levels consistent in procedures. To explain what I mean take a look at <code>RecursiveParametricSweep</code>. It does some high level orchestration like calling the procedure to populate the input columns, calling a function to get the number of output rows, calling the procedure to populate the output array and assigning the return value. However, in between it goes into the detail of how to handle headers. This is a break in semantic level of the procedure that throws one off a bit when first reading the procdure. This could be avoided by extracting either an <code>InitializeOutputArray</code> or a <code>WriteHeaders</code> procedure.</p>

<h2>Miscellaneous</h2>

<ul>
<li>The global variable <code>maxRecursionDepth</code> is a bit superfluous since it is just <code>UBound(inputColumns)</code>, which is a bit clearer semantically, I think.</li>
<li>Instead of incrementing <code>recursionInputColumnPopulationIndex(recursionDepth)</code>, you could just always set it to <code>populateElementCount</code> at the start of the loop, which might be called <code>currentInputIndex</code> instead.</li>
<li>Istead of keeping track of the indeces for the columns in an array, you might just as well keep track of the values in an array instead. That would put the choice of value closer to the action for the specific column.</li>
<li>It looks a bit strange to have the <code>populationRow</code> counter as a module level variable. You could avoid this by passing it <code>ByRef</code> into the recursive procedure.</li>
<li>It might make sense to extract a <code>PopulateRow</code> procedure to keep semantic levels consitsent.</li>
</ul>
    </div>