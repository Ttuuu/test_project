<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I used to use recursion a lot with templates. But I have moved from recursion to using <a href="http://en.cppreference.com/w/cpp/utility/integer_sequence"><code>std::integer_sequence</code></a> and <a href="http://en.cppreference.com/w/cpp/utility/tuple"><code>std::tuple</code></a> to get the equivalent of a loop (from posting my template code here).</p>

<p>Though underneath in the standard code it is still recursion it is not visible from my code and thus easier to read.</p>

<p>I am not trying to implement exactly what you have.<br>
But if you look at the code you can see what I am trying to achiece and may be able to apply this technique to your code (thus making it easier to read and thus maintain).</p>

<pre><code>#include &lt;tuple&gt;
#include &lt;iostream&gt;
#include &lt;utility&gt;



// The object that defines the iteration.
// Notice the use of make_integer_sequence here (it returns integer_sequence type)
//
// This defines how we are going to iterate over the tuple T.
//    
template&lt;typename C, typename T, typename Seq = std::make_integer_sequence&lt;int, std::tuple_size&lt;T&gt;::value&gt;&gt;
struct TupleIterate;


// A partial specialization of the above.
// Here we convert the integer_sequence into a sequence of integers S
// We can use variable argument expansion to generate the code inline
// with this sequence.
//
template&lt;typename C, typename T, int... S&gt;
struct TupleIterate&lt;C, T, std::integer_sequence&lt;int, S...&gt;&gt;
{
    TupleIterate(C caller, T const&amp; val)
    {
        // Make a tuple.
        // This takes a variable number of arguments and creates the appropriate
        // tuple. As we don't use the tuple we don't even bother to store it.
        //
        // Use Var-Arg expansion to call caller for each argument in T
        // The results of these called are passed to make_tuple()
        //
        std::make_tuple(caller(std::get&lt;S&gt;(val))...);
    }
};

//
// Function: To allow argument deduction
//           Pass the values as parameters and it creates the TupleIterator
//           defined above. Because it deduces the types of its arguments
//           we don't need to specify them.
template&lt;typename C, typename T&gt;
TupleIterate&lt;C,T&gt; tuple_iterate(C caller, T const&amp; val)
{
    return TupleIterate&lt;C,T&gt;(caller, val);
}


// An example caller object.
// Just to show it printing.
struct Caller
{
    // It needs an operator() for each type in the tuple.
    // For ease of use I have templatized this.
    template&lt;typename T&gt;
    T operator()(T const&amp; data)
    {
        std::cout &lt;&lt; "Data: " &lt;&lt; data &lt;&lt; "\n";
        return data;
    }
};

int main()
{
    auto    val = std::make_tuple(1,2,"Hi there");

    tuple_iterate(Caller(), val);
}
</code></pre>
    </div>