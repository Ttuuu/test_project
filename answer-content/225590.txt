<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm not sure what you gain by limiting this to using an <code>enum</code> as the Tag. I wouldn't use a string, that's for sure, but why not leave it completely free? If a user wants to use the <code>LogItemTag</code> schema, then they can. If they want to use strings, they are free to do so.</p>

<hr>

<p>This look like an infinite loop (though hopefully it will StackOverflow):</p>

<pre><code>public override bool Equals(object obj) =&gt; obj is ItemKey&lt;T&gt; &amp;&amp; Equals(obj);
</code></pre>

<p>I presume this was the intention:</p>

<pre><code>public override bool Equals(object obj) =&gt; obj is ItemKey&lt;T&gt; key &amp;&amp; Equals(key);
</code></pre>

<hr>

<p>I would prefer this was a method:</p>

<pre><code>public static Log Empty =&gt; new Log();
</code></pre>

<p>It just feels wrong to be returning an Empty thing that isn't immutable.</p>

<hr>

<p>Personally I would use <code>KeyValuePair</code> rather than a tuple for the key/value pairs, because I would never allow a tuple as part of a public API. Similarly, I would dispense with the tuple version of <code>ItemKey</code> in the APIs (e.g. on <code>GetItemOrDefault</code>): it's just adding inconsistency which will make the API harder to use. The implicit conversion seems like a fine way of 'overloading' the API (though again personally I wouldn't allow it).</p>

<hr>

<p>Your clone constructor will initialise 2 dictionaries.</p>

<hr>

<p>As always, the public API should carry inline documentation (<code>///</code>) so that it's purpose is clear to the maintainer and consumer. It doesn't need to be extensive or <code>cref</code> everything, but it should explain the intention clearly.</p>

<hr>

<p>I'd expect <code>Copy</code> to be called <code>Clone</code> (copy sounds in-place to me). <code>TryGetValue</code> should be called <code>TryGetItem</code> to be consistent with the other methods.</p>
    </div>