<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Case for not using a <code>class</code></h3>

<p>It's not clear to me whether you need a class for what you are doing. Unless you need to be able to construct an instance of <code>ConfigurationReader</code> and pass it around, I would say get rid of the class. You can have a function with the simple interface</p>

<pre><code>QHash&lt;QString, QString&gt; getConfigurationMap(QFile&amp; input);
</code></pre>

<p>I would further suggest putting the function in a <code>namespace</code> that is specific to your app.</p>

<pre><code>namespace MyApp
{
   QHash&lt;QString, QString&gt; getConfigurationMap(QFile&amp; input);
}
</code></pre>

<h3>Use smaller functions</h3>

<p>Instead of one large function, divide the code into multiple functions. Think of <em>what</em> you are doing rather than <em>how</em> you are doing it. The <em>what</em>s usually translate to smaller functions and <em>how</em>s translate to loops, conditionals, branches, etc.</p>

<p>Given that, <code>getConfigurationMap</code> can be implemented as:</p>

<pre><code>namespace MyApp
{
   // Implementation detail.
   void getConfigurationMap(QXmlStreamReader&amp; reader,
                            QHash&lt;QString, QString&gt;&amp; map);

   // User facing interface.
   QHash&lt;QString, QString&gt; getConfigurationMap(QFile&amp; input)
   {
      QXmlStreamReader reader(input);
      QHash&lt;QString, QString&gt; map;
      getConfigurationMap(reader, map);
      return map;
   }
}
</code></pre>

<p>The second overload (the one that's listed first) can be implemented as:</p>

<pre><code>namespace MyApp
{
   void skipUntilConfiguration(QXmlStreamReader&amp; reader);

   void readParamters(QXmlStreamReader&amp; reader,
                      QHash&lt;QString, QString&gt;&amp; map);

   // Implementation detail.
   void getConfigurationMap(QXmlStreamReader&amp; reader,
                            QHash&lt;QString, QString&gt;&amp; map);
   {
      skipUntilConfiguration(reader);
      readParamters(reader, map):
   }

   // User facing interface.
   QHash&lt;QString, QString&gt; getConfigurationMap(QFile&amp; input)
   {
      QXmlStreamReader reader(input);
      QHash&lt;QString, QString&gt; map;
      getConfigurationMap(reader, map);
      return map;
   }
}
</code></pre>

<p>The code can be wrapped up by implementing the final two helper functions.</p>

<pre><code>namespace MyApp
{
   void skipUntilConfiguration(QXmlStreamReader&amp; reader)
   {
      whiile ( !reader.atEnd() )
      {
         if ( reader.tokenType() == QXmlStreamReader::StartElement &amp;&amp;
              reader.name() == "configuration" )
         {
            return;
         }
      }
   }

   void readParamters(QXmlStreamReader&amp; reader,
                      QHash&lt;QString, QString&gt;&amp; map)
   {
      while ( reader.readNextStartElement() ) {
          if ( reader.name() == "parameter" ) {
              QString id = reader.attributes().value("id").toString();
              map.insert(id, reader.readElementText());
          }
          else {
              reader.skipCurrentElement();
          }
      }
   }

   void getConfigurationMap(QXmlStreamReader&amp; reader,
                            QHash&lt;QString, QString&gt;&amp; map)
   {
      skipUntilConfiguration(reader);
      readParamters(reader, map):
   }

   QHash&lt;QString, QString&gt; getConfigurationMap(QFile&amp; input)
   {
      QXmlStreamReader reader(input);
      QHash&lt;QString, QString&gt; map;
      getConfigurationMap(reader, map);
      return map;
   }
}
</code></pre>

<p>The above code assumes that there is only one "configuration" element in your XML file. If that assumption is not correct, the functions need to be tweaked a bit.</p>
    </div>