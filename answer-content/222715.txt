<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1><a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP 8</a> recommendations</h1>
<p>You've got a lot of function declarations where you put the arguments on multiple lines to make then more obvious, like this:</p>
<pre><code>def _download_email_attachments(
        server: Union[imaplib.IMAP4, imaplib.IMAP4_SSL],
        email_number: str,
        output_dir: Optional[str] = "attachments"
):
</code></pre>
<p>Personally, I would follow PEP 8's recommendation and use an alignment with the opening delimiter:</p>
<pre><code>def _download_email_attachments(server: Union[imaplib.IMAP4, imaplib.IMAP4_SSL],
                                email_number: str,
                                output_dir: Optional[str] = "attachments"):
</code></pre>
<p>The same goes for function calls. Also, since you are using type hinting, make sure you hint the type of the return value of the function:</p>
<pre><code>                                output_dir: Optional[str] = "attachments"): -&gt; MyType
</code></pre>
<p>For function declarations like this:</p>
<pre><code>def _count_lines(
        filename: str
):
</code></pre>
<p>The expansion onto the next line is unnecessary, just use <code>def _count_lines(filename: str): -&gt; MyType</code>.</p>
<p>Your class <code>server_error</code> does not follow PEP 8 recommendation of the <code>CapWords</code> convention. It's commonly used in the vast majority of scripts and for almost every exception I've ever seen. You should change the name to <code>ServerError</code>.</p>
<hr>
<h1>General stuff</h1>
<ul>
<li><p>Your program is heavily commented which is good for future developers to know what's going on.</p>
</li>
<li><p>I don't know the slightest thing about mail protocols, but I really hope your program works the way it is supposed to :)</p>
</li>
</ul>
<p>The first big thing I see is that you don't have a docstring. To me, as a developer, it's not immediately evident what the program does when I view the source code. Also, it's not great for IDEs that provide introspection into modules based on its docstring.</p>
<p>There are a lot of spots where I see things like this:</p>
<pre><code>host = server.host

if output_dir is None:
    output_dir = host
</code></pre>
<p>In that particular function, <code>host</code> is never used again. In situations like those, it's not necessary to declare a reference only to have it assigned to another variable - at that point you've got a reference chain two deep, which is unnecessary. I understand you may be doing it for readability, but there's some point where you need to ask yourself if things like that are really necessary.</p>
<p>In this <code>try</code>/<code>except</code>:</p>
<pre><code>        except PermissionError:
            raise PermissionError("Could not create {}, invalid permissions".format(mailbox_output_directory))
</code></pre>
<p>You should instead use:</p>
<pre><code>        except PermissionError as e:
            raise PermissionError("Could not create {}, invalid permissions".format(mailbox_output_directory)) from e
</code></pre>
<p>It's just to provide more context in exceptions. If you want to find out a bit more about <code>raise ... from</code>, <a href="https://stackoverflow.com/questions/24752395/python-raise-from-usage">this question</a> is useful.</p>
<p>I noticed a lot of times you used <code>sys.stdout.write</code> and <code>sys.stderr.write</code>. Since you're in Python 3, you could simply use:</p>
<pre><code>print(...)                    # For sys.stdout, since that is the default
print(..., file=sys.stderr)   # For sys.stderr, using the file kwarg
</code></pre>
<p>Finally, in your <code>__name__</code>/<code>"__main__"</code>, it looks like you use <code>time.time()</code> to time the execution of the script. As far as I am aware, it is recommended to <code>time.process_time()</code> or <code>time.perf_counter()</code> depending on how long your script takes to run. See <a href="https://stackoverflow.com/questions/85451/pythons-time-clock-vs-time-time-accuracy">this question</a> for a bit more information.</p>
<hr>
<p>If you have any questions, please do not hesitate to ask.</p>
    </div>