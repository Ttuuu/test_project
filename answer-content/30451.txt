<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p><a href="https://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice">Do not use <code>using namespace std</code> in global scope</a>.</p></li>
<li><p><em>Never use global variables</em>.  Right away, this will introduce all sorts of problems, including maintainability and bugs.  There are different alternatives to this, one being a <code>struct</code>:</p>

<p>Such a structure just needs the month, day, and year:</p>

<pre><code>struct Date
{
    int month;
    int day;
    int year;
};
</code></pre>

<p>Initialize the two <code>Date</code> instances:</p>

<pre><code>// same order as appears in struct
Date date1 = {1, 2, 2000};
Date date2 = {4, 5, 2001};
</code></pre>

<p>Access the structures and set the data members (with your code):</p>

<pre><code>std::cout &lt;&lt; "Enter first date: ";
std::cin &gt;&gt; date1.year &gt;&gt; date1.month &gt;&gt; date1.day;
std::cout &lt;&lt; "Enter second date: ";
std::cin &gt;&gt; date2.year &gt;&gt; date2.month &gt;&gt; date2.day;
</code></pre>

<p>If you want to get into encapsulation/information-hiding, I'd recommend a <code>class</code> instead.  If you want to keep this simpler than a <code>struct</code>, just move the globals into <code>main()</code> (but use the variables from my example).  You could also create more specialized functions, thereby not just working in <code>main()</code>.  Modularity will help keep your code more organized and maintainable.</p></li>
<li><p>I don't like <code>int</code> for these values (dates cannot be negative).  I'd go with <code>std::size_t</code> instead (include <code>&lt;cstddef&gt;</code> to use it).</p></li>
<li><p><code>month_days[]</code> should be a <code>const</code> while in global scope.  As a constant, it <em>can</em> remain there because it cannot be changed by anything else.  However, this will prevent you from accounting for leap-years.  Speaking of which...</p></li>
<li><p>To account for leap-years, I'd either:</p>

<ol>
<li>leave out February's value from the array (it's the only value that could change)</li>
<li>not make the array a constant (the program will handle the values during runtime)</li>
</ol>

<p>With that, you can allow the program to adjust February's value if a leap-year.</p></li>
</ul>
    </div>