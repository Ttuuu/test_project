<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is a minor point, but you can save code space and a little time (indirectly, by taking less space) by replacing loads like these</p>

<pre><code>mov rax, 1 ; WRITE syscall
mov rdi, 1 ; fd for stdout
</code></pre>

<p>with 32bit <code>mov</code>:</p>

<pre><code>mov eax, 1 ; WRITE syscall
mov edi, 1 ; fd for stdout
</code></pre>

<p>Writes to 32bit registers are zero-extended to the corresponding 64bit register so they are equivalent.</p>

<p>For example <code>mov rax, 1</code> might be encoded (depending on the assembler) as</p>

<pre><code>48 c7 c0 01 00 00 00
</code></pre>

<p>While <code>mov eax, 1</code> may be encoded as</p>

<pre><code>b8 01 00 00 00
</code></pre>

<p>The <code>b8+</code>-type mov in its 64bit form has an imm64 which would take even more bytes, the assembler can choose the <code>c7</code> form to avoid encoding a whole imm64 if the constant is small enough, but then unlike the <code>b8+</code>-form it needs a ModRM byte to encode the destination (the <code>c0</code> byte) and a REX.W prefix is still needed to encode to 64bitness of the instruction, at least if the assembler is faithful to the form as written.</p>
    </div>