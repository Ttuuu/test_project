<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I don't think this is a good idea. A well-designed API should be easy to use correctly, and difficult to use incorrectly. Let's look at a few ways in which this method could be used incorrectly:</p>

<p><strong>Holding locks briefly:</strong></p>

<pre><code>foreach (var item in items.Synchronized(items))
{
    // do (expensive) work here
}
</code></pre>

<p>Locks should be kept only as long as necessary, but this holds a lock until all work has been done. You know this is not how <code>Synchronized</code> is meant to be used, but that's not all that obvious to Marvin the Maintenance programmer and Joe the Junior dev.</p>

<p><strong>Verifying lock order:</strong></p>

<pre><code>var syncedItems = items.Synchronized(items);    // Is the lock obtained here...
var array = syncedItems.ToArray();              // ...or here?
</code></pre>

<p>With the more simple <code>lock</code> variant, it's obvious where and how long a lock is being held. With the above code, it's not so easy. And let's say Marvin needs to add another lock, which - if both locks are needed - must only be obtained after <code>items</code>:</p>

<pre><code>var syncedItems = items.Synchronized(items);
lock (somethingElse)
{
    var array = syncedItems.ToArray();
}
</code></pre>

<p><code>Synchronized</code> is called outside (and before) the <code>somethingElse</code> lock, so this <em>appears</em> to be safe, but it is not. Concurrency is difficult enough, and the more complex your code is the more difficult it is to verify the correctness of your code.</p>

<p><strong>Multiple iterations:</strong></p>

<p>RobH already pointed this out:</p>

<pre><code>var syncedItems = items.Synchronized(items);
if (syncedItems.Any())                  // A lock is obtained here...
{
    var array = syncedItems.ToArray();  // ...and an attempt is made here as well.
}
</code></pre>

<p>This fails with an <code>ArgumentException</code>. Well, at least it fails, instead of obtaining a lock multiple times and potentially providing a different snapshot each time...</p>

<p><strong>Interaction with broken enumeration:</strong></p>

<pre><code>IEnumerable&lt;T&gt; CustomIteration(IEnumerable&lt;T&gt; items)
{
    var e = items.GetEnumerator();
    while (e.MoveNext())
        yield e.Current;
}
</code></pre>

<p>This code is broken - it doesn't dispose the enumerator. But that often doesn't cause problems, so it's something Joe could have created after reading a poorly written blog post about enumerators. This will cause problems when combined with <code>Synchronized</code>: <code>CustomIteration(items.Synchronized(items))</code> will never release its lock.</p>

<p><strong>Safe use-case:</strong></p>

<p>About the only safe use-case, as far as I can tell, is directly taking a snapshot:</p>

<pre><code>var snapshot = items.Synchronized(items).ToArray();
</code></pre>

<p>It seems to me that a method that does just that - and only that - will be safer:</p>

<pre><code>T[] snapshot = items.GetSnapshotWithLock(items);
</code></pre>

<p>If you need a dictionary then you can safely add a <code>ToDictionary</code> call afterwards, or create a dictionary variant of this method.</p>

<p>Or just use a <code>lock</code> directly. More verbose, but less susceptible to the problems shown above.</p>
    </div>