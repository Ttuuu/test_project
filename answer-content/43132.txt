<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here is what I came across that could be a solution. </p>

<p>O(k*n) for preproccessing means that you touch every element in every array. <strong>I will assume</strong> that the arrays do not overlap in stored values (it is not stated in the example). If you touch all the elements of all the arrays you can create intervals for every array and that can be done in O(k*n). The intrvals can be kept in a list of touples.</p>

<p>After you have these <strong>k</strong> intervals you could sort them in O(k*log(k)). If <strong>k</strong> is about the same as <strong>n</strong> then O(k*n + k*logk) = O(n*n + n*logn) = O(n^2). The nlogn can be omitted in <strong>assymptotic</strong> math because <strong>assymptotically</strong> is smaller. If <strong>k</strong> is small then you would get using the same math to O(k*n) (k*logk is definitely asymptotically smaller so it can be omitted). So using these arguments you can say it was done in O(k*n) time. </p>

<p>When searching you can get O(logk + logn). logk is to find the right interval using binary search and logn searching the array itself.</p>

<p>If you dont use the sorting of interval then you need to search the intervals in O(k) time and then the array itself O(logn) = O(k + logn). If my reasoning is correct and I did not omit any important limitation you should have your answer for O(k + logn), or even faster O(logk + logn) ;)  </p>
    </div>