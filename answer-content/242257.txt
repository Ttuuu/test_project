<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As addition to @Simon Frosbergs answer, I would create an interface for the factory:</p>

<pre><code>interface BuildingFactory{
    fun build(...) : Building
}
</code></pre>

<p>For the param you can choose for enums or Strings:</p>

<pre><code>enum class BuildingType{
    Woodcutter
}
</code></pre>

<p>The enums are typesafe and the Strings are not.<br>
The drawback for enums is that every time you add a BuildingType, you change the enum.<br>
Therefor every module depending on that enum has to change as well.<br>
(If you're not using multiple modules, this problem can be ignored)</p>

<p>Also, note that your companion object can implement an interface.<br>
Therefor you can bind the static functions to one factory implementation:</p>

<pre><code>object DefaultBuildingFactory : BuildingFactory{
    override fun build(type : BuildingType): Building = when(type){
        BuildingType.WoodCutter -&gt; Building(
            "Woodcutter",
            listOf(
                Resource(ResourceType.WOOD, 1),
                Resource(ResourceType.WORKFORCE, 3),
                Resource(ResourceType.MONEY, 10)
            ),
            listOf(Resource(ResourceType.PLANKS, 1))
        )
    }
}

class Building private constructor(
    val name: String,
    val inputs: Array&lt;Resource&gt;,
    val outputs: Array&lt;Resource&gt;
) {
    companion object : BuildingFactory{
        override fun build(type : BuildingType) = DefaultBuildingFactory.build(type)
    }
}
</code></pre>

<p>Here you delegate the interface to DefaultBuildingFactory.<br>
in kotlin <a href="https://kotlinlang.org/docs/reference/delegation.html#overriding-a-member-of-an-interface-implemented-by-delegation" rel="nofollow noreferrer">interface delegation</a> is build in:</p>

<pre><code>class Building private constructor(
    val name: String,
    val inputs: Array&lt;Resource&gt;,
    val outputs: Array&lt;Resource&gt;
) {
    companion object : BuildingFactory by DefaultBuildingFactory
}
</code></pre>
    </div>