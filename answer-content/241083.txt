<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Available doors</h1>

<p>Why is this a stand-alone function?  Why are door identifiers hard-coded here?  The <code>MontyHallBox</code> knows what the doors are, and what they are called:</p>

<pre><code>class MontyHallBox(object):
    def available_doors(self):
        return list(self.__doors.keys())
</code></pre>

<h1>Class Syntax</h1>

<pre><code>class MontyHallBox(object):
    ...
</code></pre>

<p>is obsolete syntax.  Use:</p>

<pre><code>class MontyHallBox:
    ...
</code></pre>

<h1>Class Private Names</h1>

<p>Why use a double underscore for <code>self.__doors</code> and <code>self.__init_doors()</code>?  This is a Python feature for avoiding name collision in derived classes, and "mangles" the names is a predictable fashion (adding the classname as a prefix):</p>

<pre><code>&gt;&gt;&gt; mhb = MontyHallBox()
&gt;&gt;&gt; mhb._MontyHallBox__doors
{1: 'car', 2: 'goat', 3: 'goat'}
&gt;&gt;&gt; 
</code></pre>

<p>It does not provide any extra security of the member.</p>

<h1>Use set notation</h1>

<p>Instead of <code>set([initial_door, noncar_door])</code>, write <code>{initial_door, noncar_door}</code>.</p>

<h1>Throw-away variables</h1>

<p>The variable <code>i</code> is never used:</p>

<pre><code>    for i in range(num):
        results.append(simn_fun(mhb))
</code></pre>

<p>The PEP-8 recommendation is to use <code>_</code> for these throw-away variables:</p>

<pre><code>    for _ in range(num):
        results.append(simn_fun(mhb))
</code></pre>

<h1>List comprehension</h1>

<p>Building up a list of results should be done using list comprehension, instead of initialization &amp; repeated <code>.append</code> operations.  Instead of:</p>

<pre><code>    results = []
    for i in range(num):
        results.append(simn_fun(mhb))
</code></pre>

<p>Use:</p>

<pre><code>    results = [simn_fun(mhb) for _ in range(num)]
</code></pre>

<h1>Counting</h1>

<p>There is no need to build up a long list of results, just to count the result distributions.  Pass the results as they are generated to a counter.</p>

<pre><code>&gt;&gt;&gt; import collections
&gt;&gt;&gt; num = 10000
&gt;&gt;&gt; simn_fun = run_sim_always_switch
&gt;&gt;&gt; counts = collections.Counter(simn_fun(mhb) for _ in range(num))
&gt;&gt;&gt; counts['success']
6717
&gt;&gt;&gt; counts['fail']
3283
</code></pre>

<p>or, knowing <code>True</code> is 1 and <code>False</code> is zero, count the successes as you generate them yourself:</p>

<pre><code>&gt;&gt;&gt; success = sum(simn_fun(mhb) == 'success' for _ in range(num))
&gt;&gt;&gt; success
6614
</code></pre>

<h1>Formatting</h1>

<p>Use f-strings to put the variables/expressions directly in the format statements:</p>

<pre><code>    print(f'Always switch, run simulation {num} times.')
    print(f'Success ratio: {run_simn(num, run_sim_always_switch)}')
    print(f'Never switch, run simulation {num} times.')
    print(f'Success ratio: {run_simn(num, run_sim_never_switch)}')
</code></pre>

<p>Round results to the desired significant figures with appropriate format codes:</p>

<pre><code>    print(f'Success ratio: {run_simn(num, run_sim_never_switch):.3f}')
</code></pre>

<h1>Named Constants</h1>

<p>If you accidentally wrote the tests as <code>if item == 'Car':</code>, you'd find that nobody wins, and would have to hunt down where in the code you made spelling/capitalization errors.  The IDE won't help you; it can't auto complete strings for you.  If you used named constants ...</p>

<pre><code>CAR = 'car'
GOAT = 'goat'
</code></pre>

<p>... and you wrote <code>if item == Car:</code>, instead of nobody winning, the program would crash with an unknown identifier and identity the line where the problem exists, which is much better than having to search through all of the code looking for where logic is going wrong.  But the above named "constants" aren't actually constants; they are variables we hope never get accidentally (or maliciously) changed.</p>

<pre><code>from enum import Enum

Prize = Enum('Prize', 'CAR, GOAT')
</code></pre>

<p>Now we have <code>Prize.CAR</code> and <code>Prize.GOAT</code>, which are constants.</p>

<h1>Malicious Strategies</h1>

<p>A friend can say they've come up with a great strategy - and let you test their code:</p>

<pre><code>import friend

run_simn(10_000, friend.strategy)
</code></pre>

<p>And lo and behold, they always win the car!  How is this possible?</p>

<p>Friend strategy 1:</p>

<pre><code>def strategy(mhb):
    initial_door = next(door for door, prize in mhb._MontyHallBox__doors.items()
                        if prize == 'car')
    _ = mhb.reveal_noncar(initial_door)
    item = mhb.reveal_selected(initial_door)
    return 'success' if item == 'car' else 'fail'
</code></pre>

<p>Friend strategy 2:</p>

<pre><code>def strategy(mhb):
    initial_door = 1
    goats = { mhb.reveal_noncar(initial_door) for _ in range(10) }

    if len(goats) == 2:
        selected_door = initial_door
    else:
        selected_door = 2 if goats == { 3 } else 3
    item = mhb.reveal_selected(initial_door)

    return 'success' if item == 'car' else 'fail'
</code></pre>

<p>Friend strategy 3:</p>

<pre><code>def strategy(mhb):
    return 'success'
</code></pre>

<p>They are cheating.  Some friend.</p>

<hr>

<h1>A safer (harder to cheat) simulation approach</h1>

<p>Let's start by creating some type aliases, to make clearer code.</p>

<pre><code>from typing import Callable, Counter, List, NewType, Tuple

# Doors are numbered
Door = NewType('Door', int)
Doors = List[Door]
</code></pre>

<p>This <code>Door</code> is just a fancy way of saying the <code>int</code> type-hint, and <code>Doors</code> is a fancy way of saying the <code>List[int]</code> type-hint.</p>

<p>Now let's create two methods which the let's the user play the Monty Hall game:</p>

<pre><code>def first_pick(doors: Doors) -&gt; Door:
    """
    Ask the player to pick a door
    """

    return int(input(f"Pick a door [{', '.join(map(str,doors))}]: "))

def second_pick(doors: Doors, selected: int, goats: Doors) -&gt; Door:
    """
    Show some goats behind doors the player didn't pick.
    Ask them again to pick a door.
    """

    print(f"Monty shows you a goat behind door #{', '.join(map(str, goats))}.")
    choice = input(f"Pick a new door [default: {selected}]: ")
    return int(choice) if choice else selected
</code></pre>

<p>We pass all the information the player needs to make their choices.  In the first case, just the list of available <code>Doors</code>.  In the second, we add what their original <code>Door</code> selection was, and the <code>Doors</code> Monty Hall revealed goats behind.  No extra <code>MontyHallBox</code> object, or <code>self</code> parameter that the user can peek into to cheat and get extra information.</p>

<p>We can even add types for these two functions up where we are defining the types we're using:</p>

<pre><code>FirstPick = Callable[[Doors], Door]
SecondPick = Callable[[Doors, Door, Doors], Door]
</code></pre>

<p>Now, let's build the actual game:</p>

<pre><code>def monty_hall(first: FirstPick = first_pick, second: SecondPick = second_pick, *,
               cars: int = 1, goats: int = 2, reveal: int = 1) -&gt; Tuple[Door, Prize]:
    """
    Play a Monty Hall type game.

    The player picks one of several doors, behind each is either a Car or a Goat.
    Monty Hall shows the player behind one of the doors they didn't pick,
    "Oh look, behind this door is a Goat!  Now, do you want to change your mind?"
    The player now gets alter their selection, but does it pay to change their mind?

    Parameters:
        first: given the doors, pick a door
        second: given the doors, the first pick, and what was revealed, pick a door
        cars: number of cars (default 1)
        goats: number of goats (default 2)
        reveal: number of hidden goats to reveal (default 1)

    Returns:
        The door they choose, and the Prize behind it (a Goat or a Car)
    """

    # Sanity checks
    if cars &lt; 1 or goats &lt; 1:
        raise ValueError("Rigged game!  There must be both cars &amp; goats!")
    if reveal &gt;= goats:
        raise ValueError("Monty is not allowed to reveal all of the goats!")

    # Set up the game
    prizes = [Prize.CAR] * cars + [Prize.GOAT] * goats
    random.shuffle(prizes)
    doors = list(range(1, len(prizes) + 1))
    game = { door: prize for door, prize in zip(doors, prizes) }

    # Ask player to make their initial selection...
    selected = first(doors)

    # Monty reveals some doors
    goats = [ door for door, prize in game.items()
              if prize == Prize.GOAT and door != selected ]
    random.shuffle(goats)
    goats = goats[:reveal]

    # Based on original choice and revealed doors, ask player makes new choice...
    selected = second(doors, selected, goats)

    # ... and give the player their prize
    return selected, game[selected]
</code></pre>

<p>Ok, I've beefed up the game a little bit.  We've got a configurable number of cars (default 1), goats (default 2), and doors to reveal (default 1).  We've got <code>first</code> and <code>second</code> functions which default to the <code>first_pick</code> and <code>second_pick</code> user player functions above.  We've got a long doc-string describing the function.  Then we've got some validation on number of cars, goats, and reveals.</p>

<p>Then we have the meat-and-potatoes of the function.  Create the prizes, mix them up, and hide them behind doors.  Call the first method to get the initial door selection.  Then Monty Hall picks some doors with goats to reveal.  The second the second function is called to get the final door selection.  Finally, the resulting prize is returned.</p>

<p>Want to play the game?</p>

<pre><code>def human_verses_monty(**kwargs):
    door, prize = monty_hall(**kwargs)
    print(f"Behind door #{door}, you find a {prize.name}!")
</code></pre>

<p>Use <code>human_verses_monty()</code>.  Or maybe <code>human_verses_monty(cars=3, goats=3, reveal=2)</code></p>

<p>I'm using <code>**kwargs</code> for brevity, so I can pass additional keywords through to the underlying <code>monty_hall(...)</code> method.  It would be clearer to list all of the keyword arguments out, but this post is already getting pretty long, and I'm not done yet.</p>

<h1>Playing multiple times</h1>

<p>Now that we have our safe simulation, let's make it so we can play the game multiple times, and collect the results:</p>

<pre><code>def monty_halls(strategy: SecondPick, games, *,
                initial: FirstPick = random.choice, **kwargs) -&gt; Counter[Prize]:    
    return Counter(monty_hall(initial, strategy, **kwargs)[1] for _ in range(games))
</code></pre>

<p>The initial door pick defaults to <code>random.choice</code>.  We need to pass in a <code>strategy</code> for the second pick.  The game is played the given number of times, with <code>Door, Prize</code> being returned, from which we select only the <code>Prize</code> with <code>[1]</code>, and count the number of times we get each prize in a <code>Counter</code>.</p>

<p>Now we need some strategies:</p>

<pre><code>def always_switch(doors: Doors, selected: Door, goats: Doors) -&gt; Door:
    return random.choice(list(set(doors) - set(goats) - {selected}))

def never_switch(doors: Doors, selected: int, goats: Doors) -&gt; Door:
    return selected
</code></pre>

<p>Again, no extra information to allow them to cheat.  And they don't get to break the rules and play incorrectly (asking Monty Hall multiple times to reveal doors) to cheat.</p>

<p>How about function to evaluate various strategies:</p>

<pre><code>def evaluate(strategies: List[SecondPick], games, **kwargs):
    for strategy in strategies:
        prizes = monty_halls(strategy, games, **kwargs)
        wins = prizes[Prize.CAR]
        losses = prizes[Prize.GOAT]
        total = wins + losses
        print(f"{strategy.__name__}: wins {wins / total * 100:.2f} %")
    print()
</code></pre>

<p>Let's see it in action:</p>

<pre><code>if __name__ == '__main__':
    print("Standard game (1 car, 2 goats)")
    evaluate([always_switch, never_switch], 10_000)

    print("Alternate game (2 car, 3 goats, 2 reveals)")
    evaluate([always_switch, never_switch], 10_000, cars=2, goats=3, reveal=2)
</code></pre>

<p>Running this gives:</p>

<pre class="lang-none prettyprint-override"><code>Standard game (1 car, 2 goats)
always_switch: wins 66.88 %
never_switch: wins 33.12 %

Alternate game (2 car, 3 goats, 2 reveals)
always_switch: wins 80.14 %
never_switch: wins 39.91 %
</code></pre>

<h1>Cheaters will be cheaters</h1>

<p>It is still possible to cheat.  One method would be to capture the stack frame, and look at the local variables in the calling frame.  We can get around this by using a separate thread or process to execute the strategy calls in, so the caller can't simply walk up the stack looking for gold.  This still isn't fool proof, 'cause the cheater could look for the parent thread, or parent process and try to inspect those.</p>

<p>At least we aren't making it easy to cheat, like the original <code>MontyHallBox</code> approach did.</p>
    </div>