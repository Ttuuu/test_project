<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>can't think of a case in which it would not work</p>
</blockquote>

<p>Code fails with select values.</p>

<p><strong>Precession</strong></p>

<p>Each iteration of <code>number /= 10;</code> can impart a round-off error.  This will not affect result for <code>double == 12345.0</code>, yet for values near large powers of 10, the results may be off-by-1.</p>

<p>A fix is not easy as it requires higher precision math, significant additional code or <code>&lt;math.h&gt;</code> functions.</p>

<hr>

<p>Below test code readily fails OP's <code>lenth()</code>.  If also fails, though less often <a href="https://codereview.stackexchange.com/a/205226/29485">@Toby Speight</a> good improvement: <code>length_TS()</code>.</p>

<p>I tried to further reduce the errors <code>length_CD()</code>, but is still not exact.   The 22 comes from 53/log2(5) or about the max power 10 exactly representable with common <code>double</code>.  This reduces the number of divisions and so reduces round-off effects.</p>

<pre><code>int length0(double number) {
  int result = 0;
  if (number &lt; 0)
    number *= -1;

  while (number &gt; 1) {
    result++;
    number /= 10;
  }
  return result + (number == 1);
}

int length_TS(double number) {
  int result = 0;
  while (number &gt;= 1e6) {
    result += 6;
    number /= 1e6;
  }
  while (number &gt;= 1) {
    result++;
    number /= 10;
  }
  return result;
}

#if DBL_DIG == 15
#define IM10 22
#define M10 1.0e22
#endif

int length_CD(double number) {
  int result = 0;
  while (number &gt;= M10) {
    result += IM10;
    number /= M10;
  }
  while (number &gt;= 1) {
    result++;
    number /= 10;
  }
  return result;
}
</code></pre>

<p>Test code</p>

<pre><code>int length_test(int length(double), double x) {
  char buf[1000];
  sprintf(buf, "%.20f", x);
  int l0 = strchr(buf, '.') - buf;
  int l1 = length(x);
  if (l0 != l1) {
    // printf("%3d %3d %.20e\n", l1, l0, x);
    return 1;
  }
  return 0;
}

int length_tests(const char *s, int length(double)) {
  int err = 0;
  for (int i = 0; i &lt; 308; i += 1) {
    double p10 = pow(10.0, i);
    err += length_test(length, nextafter(p10, 0));
    err += length_test(length, p10);
    err += length_test(length, nextafter(p10, DBL_MAX));
  }
  printf("%-11s Errors %d\n", s, err);
}

int main(void) {
  length_tests("length0()", length0);
  length_tests("length_TS()",length_TS);
  length_tests("length_CD()",length_CD);
}
</code></pre>

<p>Output</p>

<pre><code>length0()   Errors 365
length_TS() Errors 222
length_CD() Errors 189
</code></pre>

<hr>

<p>Below is example code that passes the test with 0 errors for all finite <code>double &gt;= 1.0</code>.  This is  extended math needed for a precise answer.</p>

<pre><code>// TODO cope with FLT_RADIX &gt; 10 as it can overflow acc
int buf_times_add(char *buf, int mul, int add) {
  char *s = buf;
  while (*s) {
    int acc = (*s - '0') * mul + add;
    *s++ = (acc % 10) + '0';
    add = acc / 10;
  }
  if (add &gt; 0) {
    *s++ = add + '0';
    *s = '\0';
  }
  return s - buf;
}

int length_s(double x) {
  printf("%24.16e ", x);
  assert(x &gt;= 1.0 &amp;&amp; x &lt;= DBL_MAX);
  int expo = 0;
  while (x &gt;= FLT_RADIX) {
    x /= FLT_RADIX;
    expo++;
  }
  char buf[1024];
  buf[0] = '0';
  buf[1] = '\0';
  int len = 0;
  while (x &amp;&amp; expo &gt; 0) {
    int msd = (int) x;
    x -= msd;
    x *= FLT_RADIX;
    expo--;
    len = buf_times_add(buf, FLT_RADIX, msd);
  }
  while (expo &gt;= 0) {
    expo--;
    len = buf_times_add(buf, FLT_RADIX, 0);
  }
  printf("&lt;%s&gt;\n", buf);
  return len;
}
</code></pre>
    </div>