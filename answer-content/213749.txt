<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are some extra suggestions:</p>

<ol>
<li><p>Considering that this is a piece of a much larger system, I'd suggest that you make it a class. In fact, make it two classes: the game, and the input/output mechanism. That should facilitate writing unit tests. I'm not going to assume a class for my remaining suggestions, but the point stands.</p></li>
<li><p>As @Peilonrayz pointed out, you need some more functions. I'll suggest that you focus on creating functions for general-purpose interaction with the user. This would let you re-use those same functions in other games, other parts of your bot, etc.</p>

<pre><code>player_rps = input("Rock, Paper, or Scissors: ").lower()
</code></pre>

<p>This is a potential bug. What happens if I don't spell my answer right, or if I enter "Gecko" instead? So, write a function to get a choice from the user. Allow abbreviations. Something like:</p>

<pre><code>def input_choice(choices, default=None):
    """ Presents a list of choices to the user and prompts her to enter one. If 
        default is not None, an empty input chooses the default. Abbreviations are
        allowed if they identify exactly one choice. Case is ignored.

        Returns the chosen value as it appears in the choices list (no abbreviations).
    """
    pass
</code></pre></li>
<li><p>Use <code>random.choice</code> to choose a random value from a sequence. You don't need to pick a number and then index with it:</p>

<pre><code>rps = ["rock", 'paper', 'scissors']
player_rps = input("Rock, Paper, or Scissors: ").lower()
com_rps = rps[random.randint(0,3)]
</code></pre>

<p>becomes:</p>

<pre><code>rps = "Rock Paper Scissors".split()
player_rps = input_choice(rps)
com_rps = random.choice(rps)
</code></pre></li>
<li><p>You can merge your data to simplify your code. There are many paragraphs that look like this:</p>

<pre><code>if com_rps == 'rock' and player_rps == "scissors":
    print("Chatter Bot Wins!")
</code></pre>

<p>This is really a 2-inputs -&gt; 1-output function, but you can use a dictionary for this just by concatenating the inputs:</p>

<pre><code>i_win = "Chatter Bot wins!"
u_win = f"{name} wins!"

winner = {
    "Rock:Scissors":  i_win,
    "Scissors:Paper": i_win,
    "Paper:Rock":     i_win,
    "Scissors:Rock":  u_win,
    "Paper:Scissors": u_win,
    "Rock:Paper":     u_win,
}

contest = f"{com_rps}:{player_rps}"
print(winner.get(contest, "It's a tie!"))
</code></pre>

<p><strong>Edit:</strong></p>

<p>@Peilonrayz pointed out that tuples were a better choice than strings, and he's right. So here's a slightly different version:</p>

<pre><code>winners = { ('Rock', 'Scissors'), ('Scissors', 'Paper'), ('Paper', 'Rock'), }

result = "Chatter Bot wins!" if (com_rps, player_rps) in winners
    else     f"{name} wins!" if (player_rps, com_rps) in winners
    else       "It's a tie!"

print(result)
</code></pre></li>
<li><p>You need more functions:</p>

<pre><code>yn = input("Do you want to play again. Y/N: ").lower()

if yn == 'n' or yn == 'no':
    play_rps = False
</code></pre>

<p>This should be a function, like:</p>

<pre><code>def input_yn(prompt, default=None):
    """ Prompts the user for a yes/no answer. If default is provided, then an 
        empty response will be considered that value. Returns True for yes, 
        False for no.
    """
    pass
</code></pre></li>
</ol>
    </div>