<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>// this is a full class in it's own header
</code></pre>

<p>The word is “its”.  “it's” is a contraction for “it is”.</p>

<hr>

<p>Include all the proper library headers.  I don’t see <code>&lt;array&gt;</code> or anything else.</p>

<hr>

<p>Your techniques are modern, except:</p>

<pre><code>glm::vec4 color = glm::vec4(1.0f);
</code></pre>

<p>You don’t need to name the type twice.  Just use</p>

<pre><code>glm::vec4 color {1.0f};
</code></pre>

<p>(I think it is fine even with the <code>=</code> added, in C++17)</p>

<hr>

<p><a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#es9-avoid-all_caps-names" rel="nofollow noreferrer">⧺ES.9</a></p>

<blockquote>
  <p>Avoid ALL_CAPS names.<br>
  Do not use ALL_CAPS for constants just because constants used to be macros.</p>
</blockquote>

<hr>

<p>The style in C++ is to put the <code>*</code> or <code>&amp;</code> with the <em>type</em>, not the identifier.  This is called out specifically near the beginning of Stroustrup’s first book, and is an intentional difference from C style.</p>

<hr>

<pre><code>assert(sections.size());
</code></pre>

<p>Use <code>std::vector::empty()</code> not <code>size</code> here.</p>

<hr>

<pre><code>quad[0].pos.z =
quad[1].pos.z =
quad[2].pos.z =
quad[3].pos.z = depth;
</code></pre>

<p>Look at <code>std::fill</code> or <code>fill_n</code>.</p>

<hr>

<p>I think you are doing well, just looking at the code itself — I’m not familiar with the library you are using, so I don’t know if you are approaching it well.</p>

<p>Keep it up!</p>
    </div>