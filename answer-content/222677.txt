<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I've put this through a profiler (the built in one in VS2017), though I had to significantly amplify the signal by doing 10k calls to the solver, otherwise it is too quick. It's also quite a simple puzzle, here is a harder one for this type of solver:</p>

<pre><code>constexpr NiceGrid ex2_nice{
NiceRow{0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 3, 0, 8, 5},
    {0, 0, 1, 0, 2, 0, 0, 0, 0},
    {0, 0, 0, 5, 0, 7, 0, 0, 0},
    {0, 0, 4, 0, 0, 0, 1, 0, 0},
    {0, 9, 0, 0, 0, 0, 0, 0, 0},
    {5, 0, 0, 0, 0, 0, 0, 7, 3},
    {0, 0, 2, 0, 1, 0, 0, 0, 0},
    {0, 0, 0, 0, 4, 0, 0, 0, 9} };
</code></pre>

<p>The main result is that most time is spent calling <code>GetMinPos</code> and <code>GetRemaining</code> (85%), which down the line spends a significant amount of time in <code>GetBlockImpl</code>. Of course <code>GetRemaining</code> is expected to take some time as it does a significant amount of useful work, but <code>GetBlockImpl</code> - that's not so good. Apparently MSVC could not see the forest through the C++ templated algorithm trees. You probably won't like this suggestion if you like writing this style of C++, but I recommend not trying to be so clever with index sequences and apply and so on and just write raw loops.. With that change, not only is there less code, the solver now takes about <strong>one third</strong> of the time, bringing it down from 0.15ms per solve to 0.05ms on my PC for the easy puzzle, and from 60ms down to 20ms for the hard puzzle.</p>

<p>There are algorithmic tricks too. A common principle for solving constraint satisfaction problems is to try the most-constrained variable first (MCV), while choosing the least-constraining value (LCV). These may sound like opposites, but they're not. The goal of both of them is "move pruning up in the tree". MCV moves pruning up by trying to make hard choices early, leaving "easy decisions" for later, hoping that hard choices lead to contradictions early. LCV moves pruning up by trying to "make later choices easier".</p>

<p>Pruning high in the tree means the effect of skipping a branch is as high as possible, skipping as much of the search space as possible. In order to do this, the entire approach of <code>GetRemaining</code> would have to change, since the MCV branching heuristic needs access to the current "set of possibilities" for all cells so it can choose which of them to work on. Calling <code>GetRemaining</code> on all cells is a waste, instead an other technique can be used: maintaining the sets at all times, removing options when a cell in the same row/col/block is filled in and restoring them when un-filling the cell.</p>

<p>Additionally, the sets of remaining possibilities per cell may be filtered down more by looking for Naked Pairs, Hidden Pairs, Hidden Singles, and so forth. Naked Singles are even picked up by MCV automatically, but why recurse when you can filter. Using the Dual Sets can help with some of these. A dual set is a set associated with a value, indicating which cell(s) of a row/col/block it can go into (in contrast with the primal sets: for each cell, the set of values it can have). A Hidden Single for example would take a non-trivial algorithm to detect in the primal sets, but in the dual sets a Hidden Single manifests as a singleton set which is trivial to detect. In the extreme, full <code>all_different</code> global constraint pruning can be applied to every column, row, and block.</p>
    </div>