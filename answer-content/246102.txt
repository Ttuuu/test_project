<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>All of your arguments accept <code>*args</code> but don't use it. If someone calls your functions like <code>sin(some_angle)</code>, it's going to return <code>None</code> which is confusing. You can simply leave it out, <code>**kwargs</code> still works.</p>
</li>
<li><p>This is more a situation that calls for keyword-only arguments, because each function only has a small fixed number of possible arguments. This leads to better errors if, say, you misspell one of the argument names in a call. If you want to use keyword-only arguments without <code>*args</code>, you can add a single <code>*,</code> before the arguments, like this:</p>
<pre><code>def sin(*, degrees=None, opposite=None, hypotenuse=None):
    if degrees:
       return math.sin(math.radians(degrees))
    elif opposite and hypotenuse:
       return opposite / hypotenuse
</code></pre>
</li>
<li><p>Testing for possible arguments should be done with <code>if x is not None</code> instead of <code>if x</code>: getting <code>sin(degrees=0)</code> is totally valid but will return <code>None</code> if you test for <code>degrees</code> instead of <code>degrees is not None</code>!</p>
</li>
<li><p>You're sort of overloading each function based on arguments passed. This makes the functions error-prone to use and possibly confusing. You can call <code>sin(degrees=60, opposite=1, hypotenuse=1)</code> and your program won't complain. You can call <code>sin()</code> and get <code>None</code>.</p>
<p>A possible solution would be to split the first four functions out like this:</p>
<pre><code>def sin_from_degrees(degrees)
def sin_from_edges(*, opposite, hypotenuse)
def cos_from_degrees(degrees)
def cos_from_edges(*, adjacent, hypotenuse)
def tan_from_degrees(degrees)
def tan_from_edges(*, opposite, adjacent)
def opposite_from_sin(*, sin, hypotenuse)
def opposite_from_tan(*, tan, adjacent)
def adjacent_from_cos(*, cos, hypotenuse)
def adjacent_from_tan(*, tan, opposite)
def hypotenuse_from_sin(*, sin, opposite)
def hypotenuse_from_cos(*, cos, adjacent)
</code></pre>
<p>Note how none of the arguments are optional any more, and if you try to use a function the wrong way, Python will give you a nice error message explaining exactly what went wrong. I also made <code>degrees</code> a regular argument, because I felt that <code>sin_from_degrees(degrees=degrees)</code> would be a bit redundant and there's no confusion about which argument means what if there's only one, although I can understand wanting the API to be more consistent.</p>
</li>
<li><p>Your last two function is interesting in that it is overloaded to an extent, but not as easy to extricate as the other functions. I would use a namedtuple instead of a dictionary, and definitely signal if <code>pythagorean</code> is called with the wrong arguments.</p>
<pre><code>from typing import NamedTuple

class Triangle(NamedTuple):
    adjacent: float
    opposite: float
    hypotenuse: float

def pythagorean(*, adjacent=None, opposite=None, hypotenuse=None):
    if hypotenuse is not None and opposite is not None and adjacent is None:
        adjacent = math.sqrt(hypotenuse * hypotenuse - opposite * opposite)
    elif adjacent is not None and opposite is not None and hypotenuse is None:
        hypotenuse = math.sqrt(adjacent * adjacent + opposite * opposite)
    elif hypotenuse is not None and adjacent is not None and opposite is None:
        opposite = math.sqrt(hypotenuse * hypotenuse - adjacent * adjacent)
    else:
        raise TypeError("pythogorean() expects exactly two arguments from 'adjacent', 'opposite', and 'hypotenuse'")
    return Triangle(adjacent, opposite, hypotenuse)
</code></pre>
<p>There is still a bit of duplication (<code>if a is not None and b is not None and c is None: c = math.sqrt(a * a Â± b * b)</code> occurs three times) but I'm not sure at the moment how to cleanly refactor that, especially due to the sign change when calculating the hypotenuse. You could make it a bit shorter by using comparator chaining (<code>a is not None is not b</code>) but honestly I think that would be hurt readability and maintainability more than it would help.</p>
</li>
</ul>
<p>Maybe I've gone a bit overboard with suggesting changing things you didn't ask about, but I hope that at least answers your questions!</p>
    </div>