<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is my first time posting here, so please let me know if there are any conventions I'm missing.</p>
<p>Here is my solution, which doesn't need to traverse the entire array except by using the built-in <code>sum()</code> function:</p>
<pre><code>def find_uniq(listToSearch):
    if len(listToSearch) &lt; 3:
        return 'Cannot have one unique value unless there are at least three values.'
    
    #out of three values, minimum of two must be the same
    if listToSearch[0] == listToSearch[1]:
        commonValue = listToSearch[0]
    elif listToSearch[0] == listToSearch[2]:
        commonValue = listToSearch[0]
    elif listToSearch[1] == listToSearch[2]:
        commonValue = listToSearch[1]
    else:
        return 'Array has more than one unique value'
    
    numberOfCommonItems = len(listToSearch) - 1;
    uniqueValue = sum(listToSearch) - numberOfCommonItems * commonValue
    return uniqueValue
</code></pre>
<p>These are the test cases I've tried:</p>
<pre><code>find_uniq([ 1, 1, 1, 2, 1, 1 ])
find_uniq([ 0, 0, 0.55, 0, 0 ])
find_uniq([ 0, 0, -0.55, 0, 0 ])
find_uniq[ 1, 1.0, 1, 2, 1, 1 ])

</code></pre>
<p>And these are the outputs:</p>
<pre><code>2
0.55
-0.55
2.0

</code></pre>
<p>This solution is O(n) as it only has to perform one extra addition per extra element of the array. Besides that, assuming the data format is valid, there are a maximum of four if statements, one multiplication operation and one subtraction operation.</p>
    </div>