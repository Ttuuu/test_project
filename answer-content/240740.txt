<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A nice little guessing game you've got here.  Skill will only get you 70%, you still need luck to win.</p>

<h1>Quoted Stings</h1>

<p>The Python language gives you 4 different syntaxes for creating strings: <code>"..."</code>, <code>'...'</code>, <code>"""..."""</code>, and <code>'''...'''</code>.  The first two will allow you to embed quotes and double quotes, respectively, without escaping.  The latter two will allow you to embed either quote, as well as new-lines, without needing escapes.</p>

<pre><code>            print("Sorry, you didn't type \"YES\" or \"NO\"...")
</code></pre>

<p>Here you want double quotes inside the string, and since you're using double quotes for your string, you've had to escape them.  If you had used a triple-quoted string:</p>

<pre><code>            print('''Sorry, you didn't type "YES" or "NO"...''')
</code></pre>

<p>no escaping is necessary.</p>

<h1>Code Organization</h1>

<p>Your code presently looks like this:</p>

<pre><code>import random

print("Welcome to the Guessing Game!")
user_name = input("What should I call you? ")
print("Hello, " + user_name)

def gameplay():
    ... # contents omitted for brevity

gameplay()
</code></pre>

<p>You've got imports, mainline code, a function definition, then more mainline code.  You should group all the mainline code together, not have it separated by other function definitions.</p>

<pre><code>import random

def gameplay():
    ... # contents omitted for brevity

print("Welcome to the Guessing Game!")
user_name = input("What should I call you? ")
print("Hello, " + user_name)

gameplay()
</code></pre>

<h1>Main Guard</h1>

<p>It is highly recommended all mainline code be protected by a main guard:</p>

<pre><code>import random

def gameplay():
    ... # contents omitted for brevity

if __name__ == '__main__':
    print("Welcome to the Guessing Game!")
    user_name = input("What should I call you? ")
    print("Hello, " + user_name)

    gameplay()
</code></pre>

<p>This allows the file to be imported by other modules.  You might think that this game code will never be imported by another module, because it is stand-alone code, but if you want to run any tests on the code, this file gets imported and the game starts to run messing up the test framework.  So always use this main guard.</p>

<h1>Unnecessary Recursion</h1>

<p><code>gameplay()</code> calls <code>restart_game()</code>.  Then <code>restart_game()</code> can call either <code>gameplay()</code> or <code>restart_game()</code>.  Both of these are recursive calls, which add more and more frames to the program stack.  Eventually, the Python program stack will exceed its maximum limit and the program will crash.  The user will likely get bored long before the stack overflows, but some automated testing script which is testing various guessing strategies might play thousands of games within a second, and there the program would crash.</p>

<p><strong><em>Note</em></strong>: Some languages utilize something called "Tail Call Optimization" (TCO) and optimize out these tail-recursive calls.  Python is not one of them; it doesn't do TCO.</p>

<p>Each of these recursive calls is easily replaced by a simple loop.  Let's start with the inner loop:</p>

<h2>Do you want to play again?</h2>

<p>This is a simple YES/NO question.  Many programs might need it (although they might not exactly phrase the question about a game.  You hid the function inside the <code>gameplay()</code> function, which was fine because it was tightly coupled to that outer function, but making it more general means we'll want it moved out to become its own top-level function:</p>

<pre><code>def yes_or_no(prompt: str) -&gt; bool:
    """
    Ask a "yes or no" question.

    The question will be repeated until the user responds with "YES" or "NO",
    but the user doesn't need to capitalize their response.

    Parameters:
        prompt: the yes/no question to ask the user.

    Returns:
        ``True`` if the user responds "YES", ``False`` if the user responds "NO".
    """

    user_reply = input(prompt).upper()
    while user_reply not in {"YES", "NO"}:
        print('Sorry, you didn't type "YES" or "NO")
        user_reply = input(prompt).upper()

    return user_reply == "YES"
</code></pre>

<p>A couple of points to highlight:</p>

<ul>
<li><a href="https://www.python.org/dev/peps/pep-0484/" rel="nofollow noreferrer">Type hints</a> (eg, <code>prompt: str</code>, and <code>-&gt; bool</code>) are optional, but very useful.</li>
<li><code>"""docstrings"""</code> are also very useful.  If you run your program in an REPL (such as IDLE), type <code>help(yes_or_no)</code> at the <code>&gt;&gt;&gt;</code> prompt, after the program has run.</li>
<li>The user input is converted to uppercase once, immediately after <code>input()</code> returns a value.  It is not converted to uppercase on each test (eg, <code>user_reply.upper() == "YES"</code> and <code>user.reply.upper() == "NO"</code>)</li>
<li>The while-loop repeats the question, if invalid input is given.  No recursion.</li>
<li>The <code>user_reply not in { ... }</code> is an efficient way of testing for an invalid response.</li>
</ul>

<h2>Using the <code>yes_or_no()</code> reply</h2>

<p>If the user answers "YES", your code recursively called <code>gameplay()</code> for another game.  Now that we have our <code>yes_or_no()</code> question function, let's use it and eliminate that recursion.  Let's refactor the mainline code into a <code>guessing_game()</code> function in the process:</p>

<pre><code>import random

def gameplay():
    ... # contents omitted for brevity

def guessing_game():
    print("Welcome to the Guessing Game!")
    user_name = input("What should I call you? ")
    print("Hello, " + user_name)

    play_again = True
    while play_again:
        gameplay()
        play_again = yes_or_no("Do you want to play again? " +
                               "Type YES if you want to play again or NO if you want to quit... "):

    print("Script terminating. Exiting game...")

if __name__ == '__main__':
</code></pre>

<p>Now, we are calling <code>gameplay()</code> in a loop, instead of recursively.</p>

<h1>The Guessing Loop</h1>

<pre><code>    while user_guess != number and not(out_of_guesses):
        if no_of_guesses &lt; guess_limit:
            user_guess = ...
            ...
            no_of_guesses += 1
        else:
            out_of_guesses = True
</code></pre>

<p>This loop makes my head hurt.  You are looping once per guess, to a maximum of <code>guess_limit</code> guesses, plus one additional loop iteration to set <code>out_of_guesses = True</code> to terminate the loop.  It is that extra iteration that is really bizarre.  It works, but ... (shudder).</p>

<p>Let's try a completely different loop structure.  We have a <code>guess_limit</code>; let's make a loop based on that:</p>

<pre><code>    for guess_number in range(guess_limit):
        user_guess = int(input("Guess the number from 1 to 10 that I'm thinking of... "))
</code></pre>

<p>That alone will ask the user to guess 3 times.  If they guess the number, we want to <code>break</code> out of the loop early.</p>

<pre><code>    for guess_number in range(guess_limit):
        user_guess = int(input("Guess the number from 1 to 10 that I'm thinking of... "))

        if user_guess == number:
            print("You guessed it! Congratulations, you win the game!")
            break
</code></pre>

<p>But what about when they fail to guess it?  If the <code>for</code> loop finishes all iterations without ever <code>break</code>-ing out of the loop, it will execute an optional <code>else:</code> clause:</p>

<pre><code>    for guess_number in range(guess_limit):
        user_guess = int(input("Guess the number from 1 to 10 that I'm thinking of... "))

        if user_guess == number:
            print("You guessed it! Congratulations, you win the game!")
            break

    else:
        print("You ran out of guesses, try again")
</code></pre>

<p>The complete function, with the low/high guessing hints added back in:</p>

<pre><code>def gameplay(guess_limit=3):
    """
    A number guessing game.

    A random integer will be selected between 1 and 10.  You have to guess the
    number within the allotted number of guesses.

    Parameters:
        guess_limit: Number of guesses to allow.  Allow more guesses for an easier game 
    """

    number = random.randint(1, 10)

    for guess_number in range(guess_limit):
        user_guess = int(input("Guess the number from 1 to 10 that I'm thinking of... "))

        if user_guess == number:
            print("You guessed it! Congratulations, you win the game!")
            break

        if user_guess &lt; number:
            print("Your number was too low...")
        else:
            print("Your number was too high...")

    else:
        print("You ran out of guesses, try again")
</code></pre>

<p>I've made <code>guess_limit</code> a parameter, with a default of 3, to demonstrate another Python feature: default arguments.  <code>gameplay()</code> will play the game as normal, but you could call the function with <code>gameplay(4)</code> to make an easier variant of the game.</p>
    </div>