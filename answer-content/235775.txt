<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Stack efficiency</h1>

<blockquote>
  <p>Is the SceneFSM__Run method stack efficient?</p>
</blockquote>

<p>There is no recursion, so stack usage is bounded. The only way to make it more efficient is to have less on the stack in each function, but since you don't have much to begin with I would not worry about this.</p>

<h1>How to switch scenes</h1>

<blockquote>
  <p>In order to switch to another scene, the currently running method should return NEXT but before doing so must set the struct member SceneFSM-&gt;nextSceneName so that the 
  machine actually knows where to go next.</p>
</blockquote>

<p>Instead of having <code>CONTINUE</code>, <code>NEXT</code> and <code>EXIT</code> codes, you could consider to instead have the functions return a pointer to the (name of the) scene that should run next, and use <code>NULL</code> to indicate that it should exit instead. This avoids having to pass a pointer to the <code>SceneFSM</code> to the methods of each scene. If you also want to distinguish between normal exits and errors, then you could either define a struct that contains both a response code and the name of the scene to switch to, and return that from the member functions, or you could define a special error scene.</p>

<p>You can also consider to have the <code>End</code> method return something different from <code>SceneResponse</code> or the abovementioned pointer, since the only thing it should return is whether it ran succesfully or encountered an error, any other value doesn't make sense.</p>

<p>Another idea would be to not have <code>Start</code>, <code>Update</code> and <code>End</code> methods for each scene, but instead have only one method per scene, and then just create more scenes, for example:</p>

<pre><code>typedef struct {
    const char *name;
    SceneResponse (*Run)(SceneFSM *_SceneFSM, App *_app);
} Scene;
...
Scene scenes[] = {
    {
        .name = "Boot__Start",
        .Run = Boot__Start,
    },
    {
        .name = "Boot__End",
        .Run == Boot__End,
    },
    ...
};
</code></pre>

<p>And then have <code>Boot__Start</code> set <code>nextSceneName</code> to <code>Boot__End</code>, and have <code>Boot__End</code> set <code>nextSceneName</code> to <code>Title__Start</code>, and so on. This simplifies the scene manager, but will actually make it more flexible.</p>

<h1>Avoid manually calling <code>atexit()</code> and <code>exit()</code></h1>

<p>There sometimes might be reasons to install cleanup handlers with <code>atexit()</code>, but in this case it is completely avoidable. Instead of calling <code>exit()</code> inside <code>SceneFSM__End()</code>, why not have <code>SceneFSM__Start()</code> return the result value, and then <code>main()</code> can continue doing cleanup after the scene manager finished? Like so:</p>

<pre><code>int SceneFSM__Start(Scene *_scenes, int _numScenes, void (*_onEnd)(void)) {
    ...
    return SceneFSM__End(SceneFSM__Run(&amp;SceneFSM, &amp;app));
}
...
int main(int argc, const char *argv[]) {
    ...
    ANSI__Start();
    int result = SceneFSM__Start(scenes, 3, end);
    ANSI__End();

    printf("Program completed %s.\n", result == 0 ? "sucessfully" : "with errors");
    return result;
}
</code></pre>

<h1>Use <code>const</code> where appropriate</h1>

<p>There are a few places where you should make variables <code>const</code>. First, once you have defined your scenes, you don't want to change their names. So make <code>name</code> <code>const</code>:</p>

<pre><code>typedef struct {
    const char *name;
    ...
} Scene;
</code></pre>

<p>Similarly, in <code>struct SceneFSM</code>, you can make <code>scenes</code> and <code>numScenes</code> <code>const</code> as well.</p>

<p>The function <code>SceneFSM__SceneIndexByName()</code> doesn't modify the data pointed to by the <code>_SceneFSM</code> member variable, so than can be made <code>const</code> as well:</p>

<pre><code>static int SceneFSM__SceneIndexByName(const SceneFSM *_SceneFSM, char *_name) {
    ...
}
</code></pre>

<p>Making things <code>const</code> prevents accidental writes, and allows the compiler to generate better optimized code.</p>
    </div>