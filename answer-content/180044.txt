<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>I'm looking to improve the code to make it not "DIY-crypto-bad", if at
  all possible</p>
</blockquote>

<p>I work in security. This is not my area, but I have a non-zero amount of knowledge on implementing secure cryptographic primitives, and from a cursory look I found some issues.</p>

<p>For starters:</p>

<pre><code>keyOut[i] = AES::S_BOX[keyOut[i]];
</code></pre>

<p>and</p>

<pre><code>state[i][j] = AES::S_BOX[state[i][j]];
</code></pre>

<p>and</p>

<pre><code>state[i][j] = INV_S_BOX[state[i][j]];
</code></pre>

<p>You are indexing into an array using secret information, which means that your memory accesses and cache timings will vary depending on this secret information. An attacker can measure your execution time (or power consumption) to steal such information. This is called a <a href="https://en.wikipedia.org/wiki/Side-channel_attack" rel="noreferrer">"side channel attack"</a>.</p>

<p>Also, note that AES+CBC without an HMAC is not sufficient in most cases. You still need a way to ensure integrity, i.e. the decrypted plaintext has not been tampered. People naively think that any change to the ciphertext will completely garble the decrypted plaintext, but this is not actually true for CBC. For example, if you flip one bit in a block, it'll indeed garble that block, but the next block will be ok except for having a flipped bit in the same position. <a href="https://cryptopals.com/sets/2/challenges/16" rel="noreferrer">Here's an exercise</a> where the goal is to change the text inside a ciphertext without having the key.</p>

<p>On the same vein of not checking for integrity, there's also the <a href="https://en.wikipedia.org/wiki/Padding_oracle_attack" rel="noreferrer">Padding Oracle Attack</a> that enables an attacker to completely decrypt a ciphertext only by submitting ciphertexts and observing if the padding was correct or not.</p>

<p>There may or may not be other errors, but this is a good place to start. If you want more examples on how cryptosystems get broken, I recommend the <a href="https://cryptopals.com/" rel="noreferrer">Cryptopals Challenge</a>. It's very hands-on and an eye opener on why DIY-crypto is hard.</p>

<p>EDIT: I see some answers in the chat suggesting that the timing attacks should be protected by using threads that <code>sleep</code> for a fixed amount of time. I don't think that's sound, and I've never seen it done in verified implementations. <a href="https://crypto.stackexchange.com/questions/55/known-methods-for-constant-time-table-free-aes-implementation-using-standard">Here's a question from crypto.stackexchange</a> on how to properly protect yourself from this.</p>
    </div>