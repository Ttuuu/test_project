<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>namespace ConsoleApplication1
{   
  class Program
</code></pre>
</blockquote>

<p>These names tell no-one anything useful about what the program does, and there's no comment either. If you find this file on your hard drive in a year's time, will you remember what it's for?</p>

<hr>

<blockquote>
<pre><code>        StringBuilder m_strbuilder = new StringBuilder();

        ...

        m_strbuilder.Append(Result);
        Console.WriteLine(m_strbuilder);
</code></pre>
</blockquote>

<p><code>m_strbuilder</code> is a misleading name (<code>m_</code> is one convention for naming fields, but I've never seen it used for local variables); and the <code>StringBuilder</code> is completely unnecessary. <code>Console.WriteLine(object)</code> can be used as well on one object as another, so this could be simplified to</p>

<blockquote>
<pre><code>        ...

        Console.WriteLine(Result);
</code></pre>
</blockquote>

<hr>

<p>The indentation is crazy. I suspect that it's due to mixed tabs and spaces being converted to all spaces by the StackExchange software. But consistent code formatting is a good thing in general: reformat your code before you commit / submit for review.</p>

<hr>

<blockquote>
<pre><code>         while (etc)
        {
           try
           {
             Cells.Clear();

             Inputdata = Console.ReadLine();

             Textdata = Inputdata.Split(' ');

             if (Textdata[0] != null &amp;&amp; Textdata[1] != null &amp;&amp; Textdata[2] != null)
             { 
                int.TryParse(Textdata[0], out FirstCell);
                int.TryParse(Textdata[1], out SecondCell);
                int.TryParse(Textdata[2], out Sum);
              }

            else
                continue;

            if ( 0 &lt; FirstCell &amp;&amp; FirstCell &lt;= 10000000)
            {
                if (0 &lt; SecondCell &amp;&amp; SecondCell &lt;= 10000000)
                {
                    if (2 &lt;= Sum &amp;&amp; Sum &lt;= 100000000)
                        etc = false;
                    else
                        continue;
                }
                else
                    continue;
             }                     
            else
                continue;
           }

        catch (ArgumentException e)
        {
            Console.WriteLine("Unable to add {0}", e.ToString());
        }
        catch (NullReferenceException e)
        {
            Console.WriteLine("Unable to add {0}", e.ToString());
        }
        catch (IndexOutOfRangeException e)
        {
            Console.WriteLine("Unable to add {0}", e.ToString());
        }
       }
</code></pre>
</blockquote>

<p>Firstly, this is a complicated bunch of code with a narrowly defined purpose.  On that basis it should be pulled out into a method. This would also allow a more elegant escape from the infinite loop, using <code>return</code>.</p>

<p>Secondly, even if it isn't in a method, some of those variables have narrow scopes and should be defined in their real scope rather than outside it. E.g. <code>Textdata</code> is not used outside the loop, so should be defined inside it.</p>

<p>Thirdly, the convention in C# is that local variables start with a lowercase letter, not an uppercase one.</p>

<p>Fourthly, the error handling is wrong. I tested this without supplying input (because a previous version of the question hardcoded the input and didn't require it to be supplied), and got an infinite loop outputting <code>Unable to add System.NullReferenceException</code>.</p>

<p>Fifthly, the input specification is essentially missing from the spec posted in the question, but I find the assumption that there will be exactly two starting cells to be unnecessarily restrictive. IMO the code could be simpler without that assumption.</p>

<hr>

<blockquote>
<pre><code>         for (int i = 2; i &lt; Sum; i++)
        {                    
            Result += (ulong)Cells[MinIndex]; 

            Cells[MinIndex] += 1; 

            Cells.Insert(MinIndex + 1, Cells[MinIndex]);

            if (MinIndex + 1 != Cells.Count - 1)
            {
                if (Cells[MinIndex + 2] &lt; Cells[MinIndex])
                    MinIndex = MinIndex + 2;
                else
                    MinIndex = 0;
            }
            else
                MinIndex = 0;
        }
</code></pre>
</blockquote>

<p>Inserting into the middle of a <code>List</code> usually means that you're using the wrong data structure for the task. The right data structure for this approach would surely be a priority queue of some kind.</p>

<p>However, the approach can be optimised a lot. Consider input <code>1 1 67108864</code>. Initially you have two <code>1</code>s. After two generations you will have four <code>2</code>s. After six generations you will have eight <code>3</code>s. In general, if you have <code>n</code> of the smallest value <code>G</code>, and you still need <code>n</code> or more generations, you can replace all of them with <code>2n</code> copies of <code>G+1</code> at cost <code>2nG</code>. So if you track generation <em>and multiplicity</em> you can go from executing the outer loop <code>Sum - 2</code> times to roughly <code>log(Sum)</code> times, again using a priority queue. Work through the maths a bit more and you can make it a constant time calculation with no loops (assuming that you only have two cells in the starting state - if you adapt for an arbitrary number of cells as I suggested above, you need one loop).</p>
    </div>