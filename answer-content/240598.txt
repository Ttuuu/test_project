<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Unnecessary Flexibility</h1>

<pre><code>def __init__(self, total_size = 0, non_hidden_files_count = 0, file_count = 0, folder_count = 0):
</code></pre>

<p>Why do you have the possibility of the caller starting the counters at values other than zero?  Is it really needed?  Or was it just a fancy way of declaring counter variables all in one line?</p>

<p>Note: PEP-8 would require that these keyword parameters not have spaces around the equal signs.</p>

<h1>Stop writing classes</h1>

<p>See <a href="https://youtu.be/o9pEzgHorH0" rel="nofollow noreferrer">Stop writing classes</a> on YouTube</p>

<p>Your class should be a function if it is created, one method is called, and results are retrieved.  So let's get rid of your class:</p>

<p>First of all, you want to return results in a nice package, like a named tuple.  We can even add a nice method to this named tuple to print out the results as desired, but it is just decoration.  The results are just plain-old-data:</p>

<pre><code>from pathlib import Path
from typing import NamedTuple

class DirectoryStats(NamedTuple):
    root_directory: Path
    total_size: int
    files: int
    hidden_files: int
    folders: int

    def print(self):
       print(f'Directory path to search:     {self.root_directory}')
       print(f'Directory size in GB:         {self.total_size / 1.0e9:.2f}GB')
       print(f'Amount of non hidden files:   {self.files-self.hidden_files}')
       print(f'Amount of files searched:     {self.files}')
       print(f'Amount of folders searched:   {self.folders}')
</code></pre>

<p>Here, I'm using the typing module to automatically create the named tuple from type hints in the declaration.</p>

<p>I'm also using <code>f'...'</code> strings to created formatted output without that ugly <code>"... {} ... ".format(arg)</code> construct which separates the place where the result is created from the thing that the result is generated from.  </p>

<p>Now, the scanning is just a simple function:</p>

<pre><code>def get_size_and_file_count(scan_path) -&gt; DirectoryStats:
    """
    Your docstring here.
    """

    files = folders = hidden = total_size = 0
    root = Path(scan_path)
    for f in root.glob('**/*'):
        if f.is_file():
            files += 1
            total_size += f.stat().st_size
            if f.name.startswith("."):
                hidden += 1
        elif f.is_dir():
            folders += 1

    return DirectoryStats(root, total_size, files, hidden, folders)
</code></pre>

<p>Pretty straight forward.  The function initializes some counters, walks the <code>scan_path</code>, counts stuff, and then in the return statement, constructs the named tuple we defined above.</p>

<p>I've removed a double negative.  Instead of the file name does not start with a period incrementing a not hidden count, I count the hidden files.</p>

<p>Example usage:</p>

<pre><code>if __name__ == '__main__':
    result = directory_statistics('.')
    result.print()
</code></pre>

<p>Produces on my machine, in my directory:</p>

<pre class="lang-none prettyprint-override"><code>Directory path to search:     .
Directory size in GB:         0.00GB
Amount of non hidden files:   22
Amount of files searched:     23
Amount of folders searched:   4
</code></pre>
    </div>