<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>At first sight, this looks good - you let a standard library algorithm and two standard library class constructors do the heavy lifting. But this approach ships with a drawback, especially the linear (given that the input is sorted) copy construction of the two local <code>std::map</code>s can be quite a bottleneck, e.g. when the keys are long enough to not fit into the SSO buffer. Together with <code>std::set_difference</code>, you have a time complexity of approximately <code>O(N1 + N2)</code> (neglecting constant factors) plus that of the insertion into the resulting map (which is inevitable).</p>

<p>You could consider a simpler, more manual approach. Recall that element lookup by a key is constant time in a hash map, so doing that inside a loop over all elements doesn't add much overhead to the function:</p>

<pre><code>std::map&lt;std::string, int&gt; getDiff(const std::unordered_map&lt;std::string, int&gt;&amp; src,
        const std::unordered_map&lt;std::string, int&gt;&amp; exclude)
{
    std::map&lt;std::string, int&gt; diff;

    for (const auto&amp; node : src) {
        const auto lookup = exclude.find(node.first);

        if (lookup == src.cend() || node.second != lookup-&gt;second)
            diff.insert(node);
    }

    return diff;
}
</code></pre>

<p>First note that I have renamed the function arguments here. Whether <code>src</code> and <code>exclude</code> is the clearest choice might be debatable, but it should be better than <code>unordered_mapA</code> and <code>unordered_mapB</code>, which duplicates info already present in the type of these arguments. This has an improved time complexity of <code>O(N1)</code> (again, without constant factors or counting <code>std::map::insert</code>).</p>

<p>This can be taken one step further to make it more reusable, as there aren't any specific requirements on key and value types that should be nailed down (besides the ability to check whether objects of the value type compare equal).</p>

<pre><code>template &lt;class Key, class Value&gt;
std::map&lt;Key, Value&gt; getDiff(const std::unordered_map&lt;Key, Value&gt;&amp; src,
        const std::unordered_map&lt;Key, Value&gt;&amp; exclude)
{
    // Exactly as above...
}
</code></pre>

<p>You can use type deduction for saving some keyboard strokes upon the invocation:</p>

<pre><code>std::unordered_map&lt;std::string, int&gt; a{/* ... */};
std::unordered_map&lt;std::string, int&gt; b{/* ... */};

const auto diff = getDiff(a, b));
</code></pre>

<p>And one last, idiomatic level of indirection could then be to not commit to a specifiy return type, but instead pass an output iterator that accepts a <code>std::pair&lt;Key, Value&gt;</code>:</p>

<pre><code>template &lt;class Key, class Value, class OutputIt&gt;
OutputIt getDiff(const std::unordered_map&lt;Key, Value&gt;&amp; src,
        const std::unordered_map&lt;Key, Value&gt;&amp; exclude, OutputIt dest)
{
    // As above...   

        if (...)
            dest = node; // instead of diff.insert(node);

    return dest;
}
</code></pre>

<p>Here, it is convention to return the output iterator at the end of the function. You can instantiate and invoke the above template as follows.</p>

<pre><code>std::map&lt;std::string, int&gt; diff;
getDiff(a, b, std::inserter(diff, diff.end()));
</code></pre>

<p>Or, if you later decied that you need cache locality for the result of the operation:</p>

<pre><code>std::vector&lt;std::pair&lt;std::string, int&gt;&gt; seqDiff;
getDiff(a, b, std::inserter(seqDiff, seqDiff.end()));
</code></pre>

<p>Note that you still want more abstraction, you could also hide the <code>src</code> argument behind input iterators, as the loop over this container isn't specific to the hash map type.</p>
    </div>