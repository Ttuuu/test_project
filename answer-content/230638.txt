<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I will try to focus on things that have not been said, but I apologise in advance if I have repeated something that has been mentioned in any previous answers.</p>

<hr>

<p>Separating your code into <code>Constatnts</code>, <code>Enums</code> and <code>Interfaces</code> folders probably isn't particularly helpful. Especially when you have only one or two files in each folder.</p>

<p>Similarly naming a folder <code>src</code> isn't particularly helpful. Aside from the fact that <code>src</code> is a contraction (it would make more sense to call it <code>Source</code> in full), you have source files outside your <code>src</code> folder, which sends mixed messages to your end users and confuses matters. If you have a 'source' folder then it should contain all of your source code, not just half of your source code.</p>

<p><code>DataConstants</code> is too generic a name - you're not going to stuff all your constants into a single class (or at least you shouldn't be). Instead your command names should be in a class specifically designated as <code>CommandNames</code>.</p>

<p><strong><code>GetNumberFromString</code>:</strong></p>

<p>Firstly the name is misleading. You should specify that the function only parses integers rather than generic 'numbers' lest anyone using your API think that decimal points are acceptable.
A better name would be <code>ParseInt</code> or <code>ParseIntAsNullable</code>.</p>

<p>The <code>result</code> variable is redundant. You should get rid of it.
You could in fact simplify the whole function as thus:</p>

<pre class="lang-cs prettyprint-override"><code>public static int? GetNumberFromString(string text)
{
    int result;
    return int.TryParse(text, out result) ? result : null;
}
</code></pre>

<p>Or, if you have access to C# 7.0 or later then it's a one-liner:</p>

<pre class="lang-cpp prettyprint-override"><code>public static int? GetNumberFromString(string text)
{
    return int.TryParse(text, out int result) ? result : null;
}
</code></pre>

<p><strong><code>GetDirectionFromString</code>:</strong></p>

<p>Does this actually compile for you? According to <a href="https://docs.microsoft.com/en-us/dotnet/api/system.enum.tryparse?view=netframework-4.8" rel="noreferrer">the documentation</a> (and my compiler), <code>Enum.TryParse</code> only has two overloads, and neither match the arguments you're trying to feed it.</p>

<p>Additionally, you aren't reporting what happens if the parse fails - you're swallowing/ignoring the error.
You should either throw an exception like a <code>Parse</code> function does (e.g. <code>Enum.Parse</code>) or you should turn this into a proper <code>TryParse</code> function that returns a <code>bool</code> indicating success and passes the enumeration out as an <code>out</code> parameter.</p>

<p>Also rather than lumping this in with a load of generic <code>Helpers</code>, it might be wiser to put is in a specific <code>static class</code> named <code>DirectionUtils</code> (see <a href="https://stackoverflow.com/a/12192155">Helpers vs Utils</a>).
Said class could even be kept in the same file as <code>Direction</code> given how related the two are and how minimalist the helper class would be.</p>

<p>Lastly rather than <code>GetDirectionFromString</code>, this function should simply be named <code>ParseDirection</code> or <code>Parse</code>.</p>

<p>So essentially you should end up with something like:</p>

<pre class="lang-cpp prettyprint-override"><code>public static class DirectionUtils
{
    public static Direction Parse(string input)
    {
        return Enum.Parse&lt;Direction&gt;(input);
    }

    public static bool TryParse(string input, out Direction direction)
    {
        return Enum.TryParse&lt;Direction&gt;(input, out direction);
    }
}
</code></pre>

<p>However, note that all this seemingly does is forward to the <code>Enum</code> versions, so perhaps you should just stick to using those directly.</p>

<p><strong><code>IsValidPlacement</code>:</strong></p>

<p>I'd actually recommend turning this into a <code>PlacementValidator</code> object, so that you could easily change which placements are considered valid if the requirements changed.</p>

<p>E.g.</p>

<pre class="lang-cs prettyprint-override"><code>public class PlacementValidator
{
    public PlacementValidator(int min, int max)
    {
        this.Min = min;
        this.Max = max;
    }

    public int Min { get; private set; }

    public int Max { get; private set; }

    public bool IsValid(int position)
    {
        return ((position &gt;= Min) &amp;&amp; (position &lt;= Max));
    }
}
</code></pre>

<p>Then of course this would have to be weaved into the rest of your code.
I would recommend putting this kind of validation either in the input validation or the command handler rather than the robot.
It makes more sense for the robot to simply be a dumb puppet/bag-of-data that doesn't validate anything, because that makes it more flexible.</p>

<p><strong><code>RunCommandIfTrue</code>:</strong></p>

<p>Completely redundant, and adds to the confusion by making the condition the last argument.
Just use an <code>if</code> statement instead.</p>

<p><strong><code>HandleCommand</code>:</strong></p>

<p>Something nobody else seems to have mentioned: you check if <code>command</code> is <code>null</code>, but you don't bother to check if <code>command.Length &gt; 0</code> before trying to access <code>command[0]</code>, which would net you an out of bounds error if someone passed in an array with a length of 0.</p>

<p>Your <code>Helpers</code> functions seem to be quite unrelated and should probably be kept under separate APIs.
E.g. <code>GetNumberFromString</code> should be grouped with <code>GetArrayFromSplitInput</code> because they're both very general, but <code>GetDirectionFromString</code> and <code>IsValidPlacement</code> are more specialist.</p>

<p>Your use of <code>RunCommandIfTrue</code> is actually obscuring your code. While I don't agree that functional style code has no place in C#, this is certainly not the place where it belongs.</p>

<p>This seems to me like a case of "I have a hammer syndrome" or "look what I can do syndrome" - the desire to show off something one has learned either without knowing where to make use of it or without having a suitable place to use it. This isn't unusual, near enough everybody experiences it at some point.</p>

<p>Your code would be much clearer and probably more efficient if you simply used an <code>if</code> statement.</p>

<p>More crucially, the fact that <code>_placehasBeenExecuted</code> might be <code>false</code> when <code>Move</code>, <code>Left</code>, <code>Right</code> or <code>Report</code> are selected seems to me like it might be an error condition that you should be reporting properly through use of a specific exception (either an <code>InvalidOperationException</code> or a user-defined exception such as <code>InvalidCommandException</code> or <code>RobotNotPlacedException</code>).</p>

<p>You also appear to be lacking errors for an unrecognised command and a place command with an unsuitable number of arguments.</p>

<p>Putting all these things together, a naive improvement would be:</p>

<pre class="lang-cs prettyprint-override"><code>public void HandleCommand(string[] command)
{
    if (command == null)
        throw new ArgumentNullException("command");

    if (command.Length == 0)
        throw new ArgumentException("command is empty");

    switch (command[0])
    {
        case CommandNames.Place:
            if(command.Length &lt; 4)
                throw new CommandParameterException(string.Format("Not enough parameters. Expected 4, got {0}", command.Length));

            int x;
            if(!int.TryParse(command[1], out x))
                throw new CommandParameterException(string.Format("Place parameter 0 is not a proper integer: {0}", command[1]));

            int y;
            if(!int.TryParse(command[2], out y))
                throw new CommandParameterException(string.Format("Place parameter 1 is not a proper integer: {0}", command[2]));

            Direction direction;
            if(!DirectionUtils.TryParse(command[3], out direction))
                throw new CommandParameterException(string.Format("Place parameter 2 is not a proper direction: {0}", command[3]));

            var placementRequest = new PlacementRequest() { X = x, Y = y, F = direction };

            _placeHasBeenExecuted = _rob.Place(placementRequest);
            break;
        case CommandNames.Move:
            if(_placeHasBeenExecuted)
                _rob.Move();
            else
                throw new RobotNotPlacedException("Attempt to use the robot before it has been placed");
            break;
        case CommandNames.Left:
            if(_placeHasBeenExecuted)
                _rob.Left();
            else
                throw new RobotNotPlacedException("Attempt to use the robot before it has been placed");
            break;
        case CommandNames.Right:
            if(_placeHasBeenExecuted)
                _rob.Right();
            else
                throw new RobotNotPlacedException("Attempt to use the robot before it has been placed");
            break;
        case CommandNames.Report:
            if(_placeHasBeenExecuted)
                _rob.Report();
            else
                throw new RobotNotPlacedException("Attempt to use the robot before it has been placed");
            break;
        default:
            throw new UnrecognisedCommandException(string.Format("Unrecognised command: {0}", command[0]));
    }
}
</code></pre>

<p>However, as a number of these things are technically problems with the input data rather than the code itself, it may actually be preferable to separate the input validation from the processing logic and actually store the commands in a format that cannot be invalid so that <code>HandleCommand</code> (see @IEatBagels's answer for one possible solution to this, and see <a href="http://gameprogrammingpatterns.com/command.html" rel="noreferrer">here</a> for more info on the command pattern).</p>

<p>At the very least, it makes sense to translate the user's input into some kind of <code>CommandType</code> enum rather than operating on text, that way you can more easily separate format errors (e.g. 'x is not an integer') from logic errors (e.g. 'the robot cannot move because it hasn't been placed').</p>

<p><strong><code>Robot.Turn</code>:</strong></p>

<p>There's actually two places where I think this is going wrong.</p>

<p>Firstly, using a <code>Func</code> here is nothing but a waste of time and resources. It acheives absolutely nothing.</p>

<p>Secondly, you should be hiding the ugly casting that's going on. Rather than making <code>Left</code> and <code>Right</code> cast an <code>enum</code> to an <code>int</code>, you should hide that away in a function in the newly added <code>DirectionUtils</code> class.
E.g.</p>

<pre class="lang-cs prettyprint-override"><code>public static class DirectionUtils
{
    public static Direction Next(Direction direction)
    {
        return (Direction)(((int)direction + 1) % 4);
    }

    public static Direction Previous(Direction direction)
    {
        return (direction == Direction.NORTH) ? Direction.EAST : (Direction)((int)direction - 1);
    }
}
</code></pre>

<p>And then you can scrap <code>Turn</code> in favour of:</p>

<pre class="lang-cs prettyprint-override"><code>public void Left()
{
    _f = DirectionUtils.Next(_f);
}

public void Right()
{
    _f = DirectionUtils.Previous(_f);
}
</code></pre>

<p>(Which arguably should be called <code>TurnLeft</code> and <code>TurnRight</code>. Methods should ideally be verbs.)</p>
    </div>