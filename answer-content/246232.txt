<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Always Profile Optimized Code.</h1>
<ul>
<li><p><a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Rper-measure" rel="noreferrer">https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Rper-measure</a></p>
</li>
<li><p>Use <code>-O3</code> optimisation: <a href="https://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html" rel="noreferrer">https://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html</a></p>
</li>
<li><p>Use a profiler: <a href="https://github.com/KDAB/hotspot" rel="noreferrer">https://github.com/KDAB/hotspot</a></p>
<ul>
<li><a href="https://en.wikipedia.org/wiki/List_of_performance_analysis_tools" rel="noreferrer">https://en.wikipedia.org/wiki/List_of_performance_analysis_tools</a></li>
</ul>
</li>
<li><p>Reduce the duplication</p>
<pre><code>string inPath = argv[1];
string outPath = argv[2];

std::ifstream inFile;
std::ofstream outFile;

inFile.open(inPath.c_str());
outFile.open(outPath.c_str());
</code></pre>
<p>to</p>
<pre><code>std::ifstream inFile(argv[1]);
std::ofstream outFile(argv[2]);
</code></pre>
</li>
<li><p>Avoid string operations and allocations as much as possible. Prefer <code>std::string_view</code> if the string is only being read.</p>
</li>
<li><p>Remove <code>string makeCSVLine(vector&lt;string&gt; splitLine)</code> and use a formatter library like <code>{fmt}</code> <a href="https://github.com/fmtlib/fmt" rel="noreferrer">https://github.com/fmtlib/fmt</a>. Just to make the code prettier in</p>
<pre><code>  outFile &lt;&lt; makeCSVLine(split);
</code></pre>
<p>, you're paying with a significant time penalty. OR use the good old (discussed below) <code>fprintf</code> if that turns out to be faster. If there is not a significant time gain, follow the guidelines and use fmt + streams.</p>
<pre><code> fmt::print(&lt;FILE*&gt;,
           "{},{},{},{},{},{},{},{},{},{},{}\n",
           vec[0],
           vec[1],
           vec[3],
           vec[4],
           vec[5],
           vec[6],
           vec[10],
           vec[9],
           vec[11],
           vec[7],
           vec[32]);
</code></pre>
<p>Make it a macro or a lambda, or a function with <code>inline</code> attribute set if you want to use it with other answers but in a separate block of code.</p>
<p>See <a href="https://github.com/fmtlib/fmt#speed-tests" rel="noreferrer">speed tests by fmt</a> also. <a href="https://github.com/fmtlib/format-benchmark/blob/master/tinyformat_test.cpp" rel="noreferrer">source file</a></p>
</li>
<li><p><code>vector&lt;string&gt; splitStr(string line, const char delimiter = ',')</code></p>
<p>Avoid returning the <code>vector</code> and pass it by reference to fill it inside the function ( return type will be <code>void</code>). This makes it Return Value Optimisation independent. All compilers will treat it the same way.</p>
<p>Also, consider using <code>.reserve()</code>, and/or <code>.emplace_back()</code> for the vector. <code>reserve()</code> has been tested to improve performance.</p>
</li>
<li><p>Use <code>stringstream</code> + <code>getline</code> with a delimiter. If you doubt that this is time costly, profile. Don't guess the performance results, measure them.</p>
<pre><code>void split_by_delim(const string &amp;string, char delim, vector&lt;string&gt; &amp;r_out)
{
  std::stringstream ss(string);
  string word{};   // reserve space if you can guess it right.
  while (std::getline(ss, word, delim)) {
    if (!word.empty()) {
       r_out.push_back(word);
    }
  }
}
</code></pre>
</li>
<li><p>Avoid <code>fstreams</code> <strong>iff</strong> the reader or writer are the biggest time sinks. <code>fprintf</code> has been 40% faster in my tests with no loss in flexibility (I used it for writing <code>int</code>s and <code>float</code>s, it may vary(edit: <em>yes it varied and the gain is insignificant compared to the other benefits of streams (or with <code>fmt</code>)</em> ) with <code>string</code>s.).</p>
<p>Re comments that Stream IO is as fast as printf family IO, take it from Herb Sutter &amp; Bjarne Stroustrup:</p>
<blockquote>
<p>It is often (and often correctly) pointed out that the printf() family has two advantages compared to iostreams: <strong>flexibility of formatting and performance.</strong> This has to be weighed against iostreams advantages of extensibility to handle user-defined types, resilient against security violations, implicit memory management, and locale handling.</p>
<p>If you need I/O performance, you can almost always do better than printf().</p>
</blockquote>
<p>Emphasis mine.</p>
<ul>
<li><a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Rio-streams" rel="noreferrer">https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Rio-streams</a></li>
</ul>
</li>
<li><p>In the current code, the reading speed (<code>getline()</code>) is bound by splitting the string and the write speed. In other words, more lines cannot be read as long as file writer has not done its job. You're not using the disk's read speed to the full potential here.</p>
<p>Consider splitting them such that all reading is done at once and data is stored in memory and it is written out at once.</p>
<p>If you want to keep peak memory usage to minimum, make use of threads and separate the reader and the (splitter + writer) in asynchronous threads.</p>
</li>
</ul>
<h1>Addendum</h1>
<pre><code>Machine: MacBook Air 2017, macOS Mojave, MQD32LL https://en.wikipedia.org/wiki/MacBook_Air#Technical_specifications_2
Profiler: Instruments.app.
Compiler: Apple LLVM version 10.0.1 (clang-1001.0.46.4)
Target: x86_64-apple-darwin18.7.0
Flags: -Ofast (and linking with {fmt} where required.)
PHP: 7.1.23 (cli) (built: Feb 22 2019 22:19:32) ( NTS )
</code></pre>
<p>Writer code to make CSV file, derived from Edward's answer for consistency: <a href="https://ideone.com/gkmUUN" rel="noreferrer">https://ideone.com/gkmUUN</a></p>
<p>Note that close enough timings should be considered the same due to fluctuations which can affect 3 to 5 seconds by a lot.</p>
<p>Matthew's code with the knowledge of line length and word length: <strong>2.6s</strong></p>
<p>Matthew's code as of <a href="https://codereview.stackexchange.com/revisions/247292/1">rev 1</a> : <strong>2.7s</strong></p>
<p>Edward's algorithm with char array storage &amp; <code>{fmt}</code>: <a href="https://ideone.com/Kfkp90" rel="noreferrer">https://ideone.com/Kfkp90</a>. This depends on the knowledge that the incoming CSV has a maximum line length of 300 characters and a maximum word length of 20 characters. <strong>2.8s</strong>.</p>
<p>Martin's code as of <a href="https://codereview.stackexchange.com/revisions/246265/7">rev 7</a>: <strong>2.8s</strong></p>
<p>For less bug-prone code, and dealing with unknown length strings: <a href="https://ideone.com/siFp3A" rel="noreferrer">https://ideone.com/siFp3A</a>. This is Edward's algorithm which uses <code>{fmt}</code>. <strong>4.1s</strong>.</p>
<p><code>gdate +%s.%3N &amp;&amp; php parser.php &amp;&amp; gdate +%s.%3N</code> where parser.php is in Edward's code as of <a href="https://codereview.stackexchange.com/revisions/246270/5">rev 5</a> : <strong>4.4s</strong></p>
<p>Edward's code as of <a href="https://codereview.stackexchange.com/revisions/246270/1">rev 1</a>: <strong>4.75s</strong></p>
<p>Edward's code with <code>fprintf</code> <a href="https://ideone.com/0Lmr5P" rel="noreferrer">https://ideone.com/0Lmr5P</a> : <strong>4.8</strong></p>
<p>OP's code with basic optimisations, and <code>fprintf</code> <a href="https://ideone.com/5ivw9R" rel="noreferrer">https://ideone.com/5ivw9R</a> : <strong>5.6s</strong></p>
<p>OP's C++ code posted in the question: <strong>6.2s</strong></p>
<p>OP's C++ code with <code>-O2</code>: <strong>6.4s</strong></p>
<p>OP's C++ code with <code>-O0</code>: <strong>45s</strong></p>
    </div>