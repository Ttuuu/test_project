<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I don't know about elegant, but you could load the files in parallel for better performance. To do something when all CSV files are ready you can use promises or just a simple counter.</p>

<p>The example also shows how you can use objects as return value in your arrow functions without the extra <code>{ return {...} }</code>.</p>

<p>Example of loading in parallel using the counter method:</p>

<pre><code>const express = require("express");
const parse = require("csv-parser");
const fs = require("fs");

const app = express();

const port = 3000;

var CSVOne = [];
var CSVTwo = [];
var toGo = 2;

fs.createReadStream("public/activity.csv")
  .pipe(parse())
  .on("data", data =&gt; CSVOne.push(data))
  .on("end", () =&gt; {
    sender = CSVOne.map(d =&gt; ({
      email: d.Sender
    }));
    maybeDone();
  });

fs.createReadStream("public/groups.csv")
  .pipe(parse())
  .on("data", dataTwo =&gt; CSVTwo.push(dataTwo))
  .on("end", () =&gt; {
    one = CSVTwo.map(d =&gt; ({
      clinic: d.one
    }));
    maybeDone();
  });

function maybeDone() {
  toGo -= 1;
  if (toGo === 0)
    done();
}

function done() {
  console.log("Both CSV files are ready");
  console.log(CSVOne, CSVTwo);
}

app.listen(port, function() {
  console.log("Server has started");
});
</code></pre>
    </div>