<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Basics:</strong></p>

<p>Body.h/Body.cpp</p>

<p>The class <code>Body</code> is extremely simple and all its functions are under 5 lines. Calling a function is a relatively heavy operation and calling a virtual function is even more so. Putting but a few operations inside a function will make it an inefficient call. Unless, the function is inlined. The compiler cannot inline functions that are hidden from compilation - so you should move all the quick functions to the header and keep cpp for the heavier stuff.</p>

<p>P.S. why does this class even have a virtual function? you don't utilize the property anywhere.</p>

<p><strong>Multithreading:</strong></p>

<p>Inherently, when you multithread your code, the computer has to do more work. All the data synchronization and memory-ownership swapping is not cheap for low-level code. So it is quite possible that the single threaded version would run faster - or at the same speed just with single core at maximal capacity instead of all of them.</p>

<p>If the number of bodies would be huge, like a few thousands, then perhaps multi-threading will improve performance. Though, the exact numbers surely depends on the platform and implementation.</p>

<p>You should read more on <code>std::atomic</code> as regular operations like <code>++, --, +=, -=, =</code> are slow and usually unnecessarily so. You should read its memory model and use operations like <code>load, store, fetch_add...</code> with appropriate memory instructions.</p>

<p><strong>Linear Algebra:</strong></p>

<p>As suggested by @harold, you shouldn't use <code>__m256d</code> for storing x,y,z coordinates of the body but rather store's n-body's coordinates in a 3xn matrix. Also this way you can perform matrix level operations and utilize SIMD types more efficiently: e.g., you don't waste a coordinate and you can utilize AVX512 instructions which holds twice as much data as <code>__m256d</code>.</p>

<p><strong>Algorithm:</strong></p>

<p>You use a very basic and inaccurate algorithm for N-Body computation: <code>V(t+dt) = V(t) +dt*a(t)</code> and <code>P(t+dt) = P(t)+dt*V(t+dt)</code>.
I think this is like first order of inaccuracy. What's the point of running the simulation for a long time if it is of such a low accuracy?</p>

<p>You should check out better solutions like <a href="https://en.wikipedia.org/wiki/Runge%E2%80%93Kutta_methods" rel="nofollow noreferrer">Rungeâ€“Kutta methods</a>.</p>
    </div>