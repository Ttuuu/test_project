<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Python is a great choice of language for a challenge like this, mainly because of how easy it is to use <code>set</code>s. Basically, any challenge which states "find a number that matches these criteria" can be thought of as a set intersection problem. We want to find <span class="math-container">\$T \cap P \cap H\$</span>, the intersection of triangular, pentagonal, and hexagonal numbers.</p>

<p>Depending on your Python version, you might not have access to the "walrus operator" <code>:=</code>. But for this case, it's quite handy.</p>

<pre><code>upper_limit = 10000
hexs = set()
while len(hexs) &lt; 2:
    tris = {n*(n+1)//2 for n in range(2, upper_limit)}
    pents = {v for n in range(upper_limit) if (v := n*(3*n-1)//2) in tris}
    hexs = {v for n in range(upper_limit) if (v:= n*(2*n-1)) in pents}
    upper_limit *= 10

print(hexs)
</code></pre>

<p>To find the number, we create larger and larger sets of triangular numbers, pentagonal numbers, and hexagonal numbers. However, we can filter out the pentagonal numbers which are not triangular, and the filter out the hexagonal numbers which are neither pentagonal nor triangular. </p>

<p>By using the optimizations presented in other answers, this could also be written as:</p>

<pre><code>upper_limit = 10000
pents = set()
while len(pents) &lt; 2:
    hexs = {n*(2*n-1) for n in range(2, upper_limit) if n*(2*n-1)}
    pents = {n*(3*n-1)//2 for n in range(upper_limit) if n*(3*n-1)//2 in hexs}
    upper_limit *= 10

print(pents)
</code></pre>

<p>The advantage of this approach is that it can easily be adapted for multiple different problems, and provides a lot of abstraction along with its performance. </p>
    </div>