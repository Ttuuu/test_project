<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A lot of useful comments is here but no-one has commented about the usage of <code>DateTime</code>. </p>

<h2>EmployeeLeave</h2>

<blockquote>
  <p><code>DateTime.Now - employee.StartDate</code></p>
</blockquote>

<p>I encourage you to process all the dates as UTC and only convert them to local time when you need to display. Even if you are sue your application will be used in one time-zone you save yourself from a lot of hassle in the future if you dedicated that you need to support timezones. The second one is in tests and I'll get back to that at the end.</p>

<p>Another problem with this class is that it does too much. You are violating the SRP (Single Responsibility Principle). This class handles holidays, find employee and validating the correctness of holidays. I think you should split that into several classes each responsible for simple task. You can then inject them into your EmployeeLeave class and only construct the logic by calling specific methods.</p>

<pre><code>public EmployeeLeave(IEmployeeLeaveStore employeeLeaveStore, 
                     IEmployeeFinder emploeeFinder, 
                     IHolidayValidator holidayValidator)
{
        if (employeeLeaveStore == null) throw new ArgumentNullException(nameof(employeeLeaveStore));
        if (employeeFinder == null) throw new ArgumentNullException(nameof(employeeFinder));
        if (holidayValidator == null) throw new ArgumentNullException(nameof(holidayValidator));

        this.employeeLeaveStore = employeeLeaveStore;
        this.employeeFinder = employeeFinder;
        this.holidayValidator = holidayValidator;
}
</code></pre>

<p>Each interface here is so-called <a href="http://martinfowler.com/bliki/RoleInterface.html">role interface</a> that has only the method(methods) for this particular role. So in above example:</p>

<ul>
<li><code>IEmployeeLeaveStory</code> - would only contain method for Saving the employee's leave object</li>
<li><code>IEmployeeFinder</code> - with one method <code>Find</code></li>
<li><code>IHolidayValidator</code> - with one method <code>IsValid</code></li>
</ul>

<p>I would be useful to create single rules for validating the correctness of holidays and then compose an aggregate holiday validator that would only execute <code>IsValid</code> on its children. It could look like this:</p>

<pre><code>var compositeValidator = new CompositeLeaveValidator(
    new NoMoreThanTwentyDaysValidator(), 
    new MarriedAndEmployedForLessThan3MonthsValidator());
</code></pre>

<p>You can also create a composition based on employee-type as probably different rules are applicable. It's also a good way to extend with new rules.</p>

<p>Additionally in the constructor we check that all the parameters are not null and in case they are we <code>Fail fast</code> which is also a good thing to do.</p>

<pre><code>public void ProcessLeaveRequest(DateTime leaveStartDate, int days, string reason, int employeeId)
{
    var employee = employeeFinder.Find(employeeId);

   if (!holidayValidator.IsValid(leaveStartDate, days, reason, employee))    
       throw new InvalidHolidayException("Specified holiday is invalid.")

    var leaveRequest = new EmployeeLeaveDetail();

    leaveRequest.EmployeeId = employeeId;
    leaveRequest.LeaveStartDateTime = leaveStartDate;
    leaveRequest.LeaveEndDateTime = leaveStartDate.AddDays(days);

    employeeLeaveStore.Save(leaveRequest);
}
</code></pre>

<p>I would also like to extract this <code>EmployeeLeaveDetail</code> creation to a separate class but that's up to you.</p>

<p>As I've mentioned above - there's also one issue with <code>DateTime</code>. This time in Unit Tests.</p>

<h2>UnitTest</h2>

<p>Basically due to the fact that you use <code>DateTime.Now</code> (or <code>UtcNow</code> as you should) in your <code>ProcessLeaveRequest</code> that means that every time you run your test for this method you run different tests as the DateTime. The better approach to this would be to create a <code>SystemTime</code> as follow.</p>

<pre><code>public static class SystemTime
{
    public static Func&lt;DateTime&gt; Now = () =&gt; DateTime.UtcNow;
}
</code></pre>

<p>then later in your test you can specify what is the current date-time when the test should execute and do not rely on <code>DateTime</code> when the test was run. </p>

<pre><code>[TestMethod]
public void IsMarriedAndLessThan90Days()
{
    SystemTime.Now = () =&gt; new DateTime(2016,12,20, 0,0,0);
    // do the testing with DateTime fixed on 20th of December 2016.
}
</code></pre>

<p>You also use this class wherever you need a to get a <code>DateTime</code>. This way you are sure that everywhere you use UTC or non-UTC and you are consistent.</p>

<p>Additionally check <a href="http://codeofmatt.com/2015/03/06/common-daylight-saving-time-mistakes-for-net-developers/">Five Common Daylight Saving Time Antipatterns of .NET Developers</a> as there might be some issues with DST when you do calculations on <code>DateTime</code>.</p>
    </div>