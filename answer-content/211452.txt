<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I apologize if I'm misunderstanding the problem your solving. If you're merely trying to first determine if two types are subclasses of a third, would it be possible to use avoid mixing an abstract base class and CRTP in favor of an operator overload like this? If so, you can get rid of the CRTP and the AbstractBase::base_equals method.</p>

<pre><code>template&lt; typename T, typename U &gt;
bool operator==(T&amp;&amp; lhs, U&amp;&amp; rhs) { 
  return std::addressof(std::forward&lt; T &gt;(lhs)) == std::addressof(std::forward&lt; U &gt;(rhs)) ||
         std::is_base_of&lt; AbstractBase, T &gt;::value &amp;&amp; std::is_base_of&lt; AbstractBase, U &gt;::value;
}
</code></pre>

<p><strong>In Response to Original Poster's Reply</strong></p>

<p>My earlier suggestion was simply (but not clearly stated) that you might pick either dynamic polymorphism or parametric polymorphism (not both). Also, I'm checking the memory addresses of objects to as a simple check of equality (to answer part of your reply).</p>

<p>Below is a solution I would use (using CRTP due to the different return types of getValue(); you could use dynamic polymorphism and achieve the same using operator&lt;&lt;). The hiccup is that you can no longer use std::vector, since you have pointers to both <code>BaseTemplate&lt;A&gt;*</code> and <code>BaseTemplate&lt;B&gt;*</code>, so you would need a heterogenous container in your driver code (ie std::tuple or the like). </p>

<p>Per the requirements in your reply, type/memory/value equality are checked with the free overloaded equality operators (you may need to decay the types if const/volatile cause types that fit your definition of equality don't bind to the correct operator== overload).  </p>

<pre><code>#include &lt;iostream&gt;
#include &lt;type_traits&gt;

template &lt;typename Derived&gt; class BaseTemplate {
  std::ostream &amp;print(std::ostream &amp;out) const {
    return static_cast&lt;const Derived *&gt;(this)-&gt;print(out);
  }

public:
  const auto &amp;getValue() const {
    return static_cast&lt;const Derived *&gt;(this)-&gt;getValue();
  }
  friend std::ostream &amp;operator&lt;&lt;(std::ostream &amp;out,
                                  const BaseTemplate&lt;Derived&gt; &amp;rhs) {
    return out &lt;&lt; "[" &lt;&lt; (void *)&amp;rhs &lt;&lt; "] " &lt;&lt; rhs.getValue();
  }
  auto operator*() const { return *static_cast&lt;const Derived *&gt;(this); }
};

class A : public BaseTemplate&lt;A&gt; {
  int num;

public:
  A(int i = 42) : num(i) {}
  const int &amp;getValue() const { return num; }
  bool operator==(const A &amp;a) const { return num == a.num; }
};

class B : public BaseTemplate&lt;B&gt; {
  std::string str;

public:
  B(const std::string &amp;s = "hello") : str(s) {}
  const std::string &amp;getValue() const { return str; }
  bool operator==(const B &amp;b) const { return str == b.str; }
};

template &lt;typename T, typename U&gt; bool operator==(const T &amp;lhs, const U &amp;rhs) {
  return false;
}

template &lt;typename T&gt; bool operator==(const T &amp;lhs, const T &amp;rhs) {
  return std::addressof(lhs) == std::addressof(rhs) || lhs == rhs;
}

</code></pre>
    </div>