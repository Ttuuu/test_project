<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The first thing to do to accelerate processing is to read the file only once. <code>species_name_function</code> reads the entire file, and is called multiple times. Extract the line which parses it and inline into the main loop:</p>

<pre><code>    for fasta in SeqIO.parse(open(infile), "fasta"):
        species_name = fasta.description.split('[', 1)[1].split(']', 1)[0]
</code></pre>

<hr>

<p>Now,</p>

<blockquote>
<pre><code>        dna = str(fasta.seq)
        freq = Counter(dna)
</code></pre>
</blockquote>

<p>does unnecessary work. There's no need to convert to a string before counting.</p>

<hr>

<p><code>listofbases</code> is unused, and <code>genomesize</code> is calculated by a large explicit sum. My best guess is that you were experimenting, trying to come up with</p>

<pre><code>        genomesize = sum(freq[base] for base in "GALMFWKQESPVICYHRNDT")
</code></pre>

<hr>

<p>Using those changes and applying some further simplifications which I don't think need individual explanation, I get:</p>

<pre><code>from Bio import SeqIO
import sys
from collections import Counter

if __name__ == '__main__':
    infile = sys.argv[1]
    genomesizes = []

    for fasta in SeqIO.parse(open(infile), "fasta"):
        species_name = fasta.description.split('[', 1)[1].split(']', 1)[0]
        freq = Counter(fasta.seq)
        genomesizes.append(sum(freq[base] for base in "GALMFWKQESPVICYHRNDT"))

    avgproteinlength = sum(genomesizes) / len(genomesizes)
    towrite = str(avgproteinlength) + '\t' + species_name + '\t' + '\n'

    with open("proteinlength.csv", "a") as myfile:
        myfile.write(towrite)
</code></pre>

<hr>

<p>However, I'm not very convinced by the explicit output filename. Also, I would be inclined to simplify the usage by supporting multiple files:</p>

<pre><code>from Bio import SeqIO
import sys
from collections import Counter

if __name__ == '__main__':
    for infile in sys.argv[1:]:
        genomesizes = []

        for fasta in SeqIO.parse(open(infile), "fasta"):
            species_name = fasta.description.split('[', 1)[1].split(']', 1)[0]
            freq = Counter(fasta.seq)
            genomesizes.append(sum(freq[base] for base in "GALMFWKQESPVICYHRNDT"))

        avgproteinlength = sum(genomesizes) / len(genomesizes)
        print(str(avgproteinlength) + '\t' + species_name)
</code></pre>

<p>called as</p>

<pre><code>find . -name "*.faa" | xargs python proteinlengthgen.py &gt;&gt;proteinlength.csv
</code></pre>
    </div>