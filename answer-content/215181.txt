<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Yes, this can be faster. Adding strings using <code>+</code> is usually a bad idea in Python, since strings are immutable. This means that whenever you add two strings, a new string needs to be allocated with the size of the resulting strings and then both string contents need to be copied there. Even worse is doing so in a loop, because this has to happen ever time. <a href="https://www.python.org/dev/peps/pep-0008/#programming-recommendations" rel="nofollow noreferrer">Instead you usually want to build a list of strings and <code>''.join</code> them at the end</a> (where you pay this cost only once).</p>

<p>But here you can just use the fact that strings can be sliced and you can specify a negative step:</p>

<pre><code>def reverse_g(s):
    return s[::-1]
</code></pre>

<p>Here is a timing comparison for random strings of length from one up to 1M characters, where <code>reverse</code> is your function and <code>reverse_g</code> is this one using slicing. Note the double-log scale, for the largest string your function is almost a hundred thousand times slower.</p>

<p><a href="https://i.stack.imgur.com/6S3ds.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/6S3ds.png" alt="enter image description here"></a></p>

<hr>

<p>The <code>reverse_s</code> function uses the <code>reversed</code> built-in, as suggested in the (now deleted, so 10k+ reputation) <a href="https://codereview.stackexchange.com/a/215230/98493">answer</a> by <a href="https://codereview.stackexchange.com/users/26266/sleblanc">@sleblanc</a> and assumes you actually need the reversed string and not just an iterator over it:</p>

<pre><code>def reverse_s(s):
    return ''.join(reversed(s))
</code></pre>

<hr>

<p>The <code>reverse_b</code> function uses the C implementation, compiled with <code>-O3</code>, provided in the <a href="https://codereview.stackexchange.com/a/215235/98493">answer</a> by <a href="https://codereview.stackexchange.com/users/133688/broman">@Broman</a>, with a wrapper to create the string buffers and extract the output:</p>

<pre><code>from ctypes import *

revlib = cdll.LoadLibrary("rev.so")
_reverse_b = revlib.reverse
_reverse_b.argtypes = [c_char_p, c_char_p, c_size_t]

def reverse_b(s):
    stri = create_string_buffer(s.encode('utf-8'))
    stro = create_string_buffer(b'\000' * (len(s)+1))
    _reverse_b(stro, stri, len(s) - 1)
    return stro.value.decode()
</code></pre>

<p>In the no interface version, just the call to <code>_reverse_b</code> is timed.</p>
    </div>