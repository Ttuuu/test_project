<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Almost another question than an answer, but looking at this question (and related/similar ones) it struck me that rather than removing items from a list we can start with an array of booleans mark them as used until we have only one survivor. </p>

<p>The problem, in my mind, is comparing performance. Without setting up some performance tests (not sure if that is even possible in IdeOne) I am unsure which is better. Any thoughts out there?</p>

<pre><code>public static void main (String[] args) throws java.lang.Exception {
    int count = 100;
    System.out.println("For " + Integer.toString(count) + 
                       " chairs, the surivor = " + findSurvivor(count));
}

private static class Location{
    private int _slotNumber;
    public Location(int slotNumber){
        _slotNumber= slotNumber;
    }
    public int getSlotNumber(){
        return _slotNumber;
    }
    public void setSlotNumber(int value){
        _slotNumber = value;
    }
}

private static int findSurvivor(int count){
    boolean[] allChairs = new boolean[count];
    Location current = new Location(0);
    while(true){
        if (!findNextUsedChair(allChairs, current)) break;
        allChairs[current.getSlotNumber()] = true;
        if (!findNextUsedChair(allChairs, current)) break;
    }
    return current.getSlotNumber();
}

private static boolean findNextUsedChair(boolean[] chairs,
                                         Location location){
    int startPos = location.getSlotNumber();
    int curPos = startPos;
    do {
        curPos = (curPos + 1) % chairs.length;
        if(!chairs[curPos] || (curPos == startPos)) break;
    }while(true);

    location.setSlotNumber(curPos);
    return curPos != startPos;
}
</code></pre>
    </div>