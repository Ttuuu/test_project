<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I don't see much to improve from algorithmic point of view. So I will focus on Object Oriented design.</p>

<ol>
<li><p>How about doing it similarly to Sort method? I mean instead of making abstract method, try just injecting Comparator into generic Heap implementation.</p></li>
<li><p>People are generally scary of long and complex code. It would be nicer to try to split it into smaller parts:</p>

<ul>
<li>First (most general) concept is to extract each huge operation (like <code>Find</code>, <code>Downheap</code> etc) into separate class with appropriate Single Responsibility. They usually accept in constructor original method parameters, hold its internal state as fields instead of local variables. <br> <br>
They can also accept in constructor reference to original object but it would be even better design practice to extract internal Heap state into even smaller object and avoid circular dependency. <br> <br>
Another approach is to make those classes stateless (just moving methods into separate classes and injecting Heap internal state)</li>
<li>Second idea would be to separate defensive programming from actual algorithms to make them cleaner and more readable (I would suggest to move them into a class mentioned in point 3. or into separate <code>Facade</code> responsible for validating user input)</li>
<li>You can also extract single steps of <code>DownHeap</code> and <code>UpHeap</code> routines into separate methods.</li>
</ul></li>
<li>You mentioned, that you struggled a little bit with <code>collections.generic</code> interfaces. My proposed solution would be not to pollute actual implementation but instead use <code>Adapter</code> Design Pattern</li>
</ol>

<p><s>4. Another thing that comes into mind (beside OO) is to calculate <code>numberOfLevels</code> from either <code>Count</code> or <code>capacity</code> (using ceiled logarithm)</s> </p>

<p>As #harold mentioned in comment it is probably unused</p>

<ol start="5">
<li><p>You can simplify main body of the find routine:</p>

<pre><code>var rightResult = FindInternal(item, IndexToRightChildNode(index));
var leftResult = FindInternal(item, IndexToLeftChildNode(index));
return rightResult &gt;= 0 ? rightResult : leftResult;
</code></pre></li>
</ol>

<p>Please notice that in your case when neither <code>rightResult</code> nor <code>leftResult</code> has value greather than 0, the function will return -1 anyway.</p>

<ol start="6">
<li><p>(Optionally, as applied in example of 5) You can add a an arrow function<code>IndexToLeftChildNode</code> for completeness or to increase readability when you decide to inline some variables.</p></li>
<li><p>You can extract common (utility) subroutine from <code>DownHeap</code>:</p>

<pre><code>private int UpdateLargestIndex(int currentLargestIndex, int childIndex) {
  if (childIndex &lt; Count &amp;&amp; CloserToRoot(innerT[childIndex].CompareTo(innerT[currentLargestIndex]))) {
    return childIndex;
  }
  return currentLargestIndex;
}
</code></pre></li>
</ol>
    </div>