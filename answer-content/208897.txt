<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm not convinced that your algorithm is very different, but since it'll take me more than a comment to outline it, I figured I might as well do a <s>quick</s> code review.</p>

<p>I've also done some name switching -- in general I tried to keep my comments referring to the same named functions as yours, but if you see an unfamiliar name you can reference my sample solution. I probably used the name I gave in it.</p>

<h1>Small things</h1>

<h3><code>input</code></h3>

<p>Splitting <code>input</code> into a bunch of different functions is good, but there are some changes I'd make.</p>

<p>I would rewrite <code>removeLeadingPlus</code> as a more general function that isn't partial (I'm pretty sure your implementation errors on the empty string -- not that it matters that much since <code>read</code> will error on an empty string too)</p>

<pre><code>removeLeadingPlus :: String -&gt; String
removeLeadingPlus ('+':s) = s
removeLeadingPlus s = s
</code></pre>

<p>Note that both <code>cleanNumbers</code> and <code>toNum</code> can be defined without the helper variable <code>strs</code>/<code>string</code> as so</p>

<pre><code>cleanNumbers = map removeLeadingPlus
toNum = map read
</code></pre>

<p>I also think that</p>

<pre><code>toNum (cleanNumbers (splitNumbers contents))
</code></pre>

<p>is a bit hard on the eyes (though if you're coming from Lisp, I'd understand your inclination). You've correctly identified that <code>input</code> can be realized as the composition of a few functions, so why not define it as such?</p>

<pre><code>input :: String -&gt; [Integer]
input = toNum . cleanNumbers . lines
    where 
        cleanNumbers = map removeLeadingPlus
        toNum = map read
        removeLeadingPlus ('+':s) = s
        removeLeadingPlus s = s
</code></pre>

<p>And we can go one step further. Now that we've realized that <code>toNum</code> and <code>cleanNumbers</code> are both just <code>map</code>s, we can redefine <code>input</code> as</p>

<pre><code>input :: String -&gt; [Integer]
input = map (read . removeLeadingPlus) . lines
    where 
        removeLeadingPlus ('+':s) = s
        removeLeadingPlus s = s
</code></pre>

<p>Maybe this looks less clean to you. I think that</p>

<pre><code>input = map (read . removeLeadingPlus) . lines
</code></pre>

<p>and</p>

<pre><code>input contents = map (read . removeLeadingPlus) $ lines contents
</code></pre>

<p>are both fine and pretty readable.</p>

<h3><code>accumulate</code></h3>

<p>I like this function and I think it's a better approach to <em>obtaining</em> the frequencies (your inefficiency is still in <code>duplicate</code>). However, <code>accumulate</code> looks suspiciously similar to a function in <code>Prelude</code>.</p>

<p><code>accumulate</code> takes in a list of integers and returns all of the prefix sums of them. So it is essentially <code>foldl</code> of every prefix of the input list.</p>

<p>You might be familiar with <a href="https://hackage.haskell.org/package/base-4.12.0.0/docs/Prelude.html#v:scanl" rel="nofollow noreferrer"><code>scanl</code></a> which is a combinator that does this.</p>

<pre><code>*DayOnePartTwo&gt; accumulate [1,2,3,4]
[1,3,6,10]
*DayOnePartTwo&gt; scanl (+) 0 [1,2,3]4
[0,1,3,6,10]
</code></pre>

<p>It even gives us the desired starting value of 0 (which you presently hardcode into <code>duplicate</code>).</p>

<p>So we can write a much shorter definition of <code>accumulate</code> as</p>

<pre><code>accumulate :: [Integer] -&gt; [Integer]
accumulate = scanl (+) 0
</code></pre>

<p>I also think a better name is <code>freqs</code> since I think <code>accumulate</code> is vague.</p>

<h3><code>firstCyclicDuplicate</code></h3>

<p>This can also be realized as the composition of a bunch of functions</p>

<pre><code>firstCyclicDuplicate :: [Integer] -&gt; Maybe Integer
firstCyclicDuplicate = duplicate . accumulate . cycle
</code></pre>

<p>Again, up to personal preference.</p>

<h3><code>duplicate</code></h3>

<p>I would rename this to <code>firstDuplicate</code> to be consistent with <code>firstCyclicDuplicate</code>.</p>

<h3>Indentation</h3>

<p>I'm not a Haskell pro, but your indentation seems a bit off and my syntax highlighting agrees with it (it doesn't highlight the function declarations when they're indented). I would keep everything top level unindented. Also my personal preference is indenting by two spaces, so that's what I've done in my sample solution.</p>

<h3>Imports</h3>

<p>Your imports are unnecessary as far as I can tell (my code compiles without them). If you thought you needed the imports for the types, I think they're in <code>Prelude</code>.</p>

<h3>Use of <code>Maybe</code> in <code>duplicate</code></h3>

<p>I like the use of <code>Maybe</code> here and I suggested the same to dagda1, but I realize now that its use, while stylistically good, is somewhat pointless.</p>

<p>Since you're operating on an infinite list of frequencies, your code will run forever (or until the stack blows). Even though you have</p>

<pre><code>        dup [] _ = Nothing
</code></pre>

<p>you'll never pattern match an empty list since you're running this function on an infinite one.</p>

<p>Stylistically, I think using <code>Maybe</code> is better than having a partial function, but I just wanted to point out that having pure functions doesn't necessarily save you from an infinite loop.</p>

<h1>Efficiency</h1>

<p>Your implementation is, for all intents and purposes, the same algorithm as dagda1's in <a href="https://codereview.stackexchange.com/questions/208832/advent-of-code-2018-day-1-part-2-find-the-first-repeated-number-after-some-incr/208843">the other post</a>.</p>

<p>They chose to accumulate the frequencies inside of their function to find the duplicate, whereas you've decoupled the two. Due to laziness I would argue the approaches are the same.</p>

<p>Again, the inefficiency comes down to the use of lists over sets in <code>duplicate</code>. This is a great problem to demonstrate why <code>elem</code> is something you should be wary of using and why linked lists make poor sets.</p>

<p>Your issue is in your duplicate lookup</p>

<pre><code>            if elem x visited
</code></pre>

<p>as <code>elem</code> is an <code>O(n)</code> operation. You can read the Efficiency section on <a href="https://codereview.stackexchange.com/a/208843/183567">my answer to the other post</a> for a bit more details.</p>

<p>The solution is the same, and I'll copy paste my response for convenience.</p>

<h3>Introducing <code>Data.Set</code></h3>

<p><a href="https://hackage.haskell.org/package/containers-0.6.0.1/docs/Data-Set.html" rel="nofollow noreferrer">Data.Set</a> provides unordered sets with <code>O(log n)</code> lookup and insert time. Yeah, it's <code>O(log n)</code>, but the total runtime for me when I checked the implementation was less than a second.</p>

<p>I'm including a sample implementation of day 1 below that I've tested and confirmed on my inputs if you want to compare. Here are some pointers if you want to fix it yourself</p>

<ul>
<li>You can keep your code mostly the same (although I'd recommend making the style changes I suggested)</li>
<li>You will want to use two functions from <code>Data.Set</code>: <code>member</code> and <code>insert</code>.</li>
<li>Your only need to change <code>duplicate</code>, specifically your use of data structure (see section header, hint hint)</li>
</ul>

<h1>Sample solution</h1>

<pre><code>module DayOnePartTwo where

import Data.Set (Set)
import qualified Data.Set as S

inputFileName = "input.txt"

input :: String -&gt; [Integer]
input = map (read . removeLeadingPlus) . lines
  where
    removeLeadingPlus ('+':s) = s
    removeLeadingPlus s = s

freqs :: [Integer] -&gt; [Integer]
freqs = scanl (+) 0

firstDuplicate :: [Integer] -&gt; Maybe Integer
firstDuplicate list = dup list S.empty
  where
    dup (x:xs) visited =
      if x `S.member` visited
        then Just x
        else dup xs (S.insert x visited)
    -- This will never be reached on the cycled list
    dup [] _ = Nothing

firstCyclicDuplicate :: [Integer] -&gt; Maybe Integer
firstCyclicDuplicate = firstDuplicate . freqs . cycle

main :: IO ()
main = do
  contents &lt;- input &lt;$&gt; readFile inputFileName
  case firstCyclicDuplicate contents of
    Just a -&gt; print a
    Nothing -&gt; print "There is no first duplicate"
</code></pre>
    </div>