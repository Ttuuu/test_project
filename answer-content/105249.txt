<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>My big concern with this approach is that you store the entire matrix before doing any processing. Since the size of the matrix is \$O(N^2)\$, you could run into occupancy problems for large \$N\$.</p>

<p>A simpler approach would be to get the contribution to the difference with each row of the matrix, as you read it. You're only ever storing a single row at once.</p>

<p>That is:</p>

<pre><code>N = int(raw_input())
difference = 0
for i in xrange(N):
    row = raw_input().split()
    difference += (int(row[i]) - int(row[N-1-i]))
print abs(difference)
</code></pre>

<p>A few other items of note here:</p>

<ul>
<li><p>I'm getting <code>N</code> via a <code>raw_input()</code> call, not <code>input()</code>. In general you should be wary of using <code>input()</code> and evaluating arbitrary code from the user.</p>

<p>(Although that advice only applies to Python 2; in Python 3 the names have changed.)</p></li>
<li><p>In Python 2, using <code>xrange()</code> is preferable to <code>range()</code> because it doesn't create a list for the entire range.</p></li>
<li><p>I'm being lazy about the coercion to <code>int()</code>, and reducing from \$N^2\$ calls to \$2N\$ calls.</p></li>
</ul>
    </div>