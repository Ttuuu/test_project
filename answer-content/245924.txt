<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Personally, i see multiple "Tasks" in that code</p>
<ul>
<li>Start the application</li>
<li>Count from 1 to 100</li>
<li>Decide what to print for the current number</li>
<li>Print it</li>
</ul>
<p>The "Start" is for me an extra Task, because if i want that my application behaves differently on different environments (count to 100 on my local machine, but count to 1 Million on my super computer), than this would be a place to get the desired information and then forward it to the "functionality".<br>
Yes this is over engineered for this small code example, but we lean with small code examples and then apply it to big applications. Therefor i like to take the big gun for small examples, as long as the goal is training. :-)</p>
<p>In my eyes, the following code is much longer, but its easier to understand, because each methodname gives a "context" what will happen in it. That makes it easier to follow and understand the underlying code.</p>
<p>Also, when the "tasks" are logically separated, then its much easier to apply changes to it. Changing the "rules" would only mean to change the <code>convertNumber</code> function. Changing the way it should print the result would be only to change the <code>output</code> method.
Also it would be quite easy to extract those functionalities in extra classes, and inject them. Then it would be a breeze to decide on the outside (environment) that the output should be done via <code>System.out.println</code> or via a graphical interface.</p>
<p>But as always, many ways bring us to our goal(s). And as always if you choose one way, then you get good things, but you have to pay for them. My approach gives flexibility, but it its much more writing. The minimal slower performance would be only an argument in a high performance environment, i think, where we have to count each cycle.</p>
<pre><code>public class FizzBuzzApp {
    public static void main(String[] args) {
        FizzBuzz game = new FizzBuzz();
        game.playGame();
    }
}

public class FizzBuzz {
  public void playGame(){
    for (int numbers = 1; numbers &lt;= 100; numbers++) {
      String result = convertNumber(number);
      output(result);
    }
  }
  
  private String convertNumber(int number) {
    if (numbers % 3 == 0 &amp;&amp; numbers % 5 == 0) {
      return "Fizz Buzz";
    } else if (numbers % 3 == 0) {
      return "Fizz";
    } else if (numbers % 5 == 0) {
      return "Buzz";
    } else {
      return String.valueOf(number);
    }
  }

  private void output(String value) {
    System.out.println(value);
  }
}
</code></pre>
<p>Happy to hear about your opinion about my approach</p>
    </div>