<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think you can get rid of the <code>isinstance(..., list)</code> checks by revising the grammar a bit.  I renamed <code>data_blocks</code> to <code>chunk</code> because I kept mixing it up with <code>data_block</code>.</p>
<p>A <code>chunk</code> is a <code>depth_block</code> followed by zero or more <code>other_blocks</code>.  The <code>visit_chunk</code> function then knows the first child is a <code>depth_block</code> and the second child is a possibly empty list of <code>other_blocks</code>. No need to check for missing blocks.</p>
<p>The <code>blocks</code> start with a regex that matches the numbers that start each block.  In the corresponding visitor methods, <code>visited_children</code> unpacking all start with one leading <code>_,</code> to match the regex.</p>
<p>I added whitespace (ws) to the end of each leaf-node in the grammer (number, description, the literals) to remove the WS clutter. The <code>nl</code> at the end of each block keeps the parser from extending a block to the next line.</p>
<pre><code>from parsimonious import Grammar

grammar = Grammar(
    r"""
    file  = chunk+
    chunk = depth_block other_block*
    
    other_block = descr_block / data_block
    
    depth_block = ~"30\s+1\s+" depth number number nl
    descr_block = ~"36\s+1\s+1\s+" description+ nl
    data_block  = ~"40\s+1\s+" count nl number+ nl

    count = number
    depth = number

    ws          = ~r"[ \t]+"
    nl          = ~r"(\n\r?|\r\n?)" ws
    number      = ~r"-?[.0-9]+" ws
    description = ~r"\S+" ws
    """
)
</code></pre>
<p>Starting from the bottom, the <code>description</code> visitor strips whitespace from the matched text.  The <code>number</code> visitor strips surrounding whitespace and converts it to a float or int as appropriate.</p>
<p>For a node having a single child, <code>NodeVisitor.lift_child</code> return the value of the child as the value of the node. So <code>visit_count</code> simply returns the value of it's child <code>number</code> node.</p>
<p>The various <code>visit_*_block</code> methods use tuple unpacking to get the values of the important children nodes and returns an appropriate dict. <code>visit_chunk</code> assembles a dict from the component dicts returned from the <code>visit_*_block</code> methods. And <code>visit_file</code> returns a list of these chunk dicts.</p>
<p>.</p>
<pre><code>class Visitor(NodeVisitor):

    def visit_file = NodeVisitor.lift_child
        
    def visit_chunk(self, node, visited_children):
        chunk, others = visited_children
        for block in others:
            chunk.update(block)
        return chunk
        
    def visit_depth_block(self, node, visited_children):
        _, depth, _, _, _ = visited_children
        return {'depth':depth}
        
    visit_other_block = NodeVisitor.lift_child
        
    def visit_descr_block(self, node, visited_children):
        _, descriptions, _ = visited_children
        return {'description':descriptions}
        
    def visit_data_block(self, node, visited_children):
        _, count, data_list, _ = visited_children
        return {'count':count, 'data':data_list}
        
    visit_count = NodeVisitor.lift_child
        
    visit_depth = NodeVisitor.lift_child
        
    def visit_number(self, node, visited_children):
        text = node.text.strip()
        return float(text) if '.' in text else int(text)
        
    def visit_description(self, node, visited_children):
        return node.text.strip()
</code></pre>
<p>I can't install parsimonious on this computer, so this isn't tested.</p>
<p>Looking at github, it doesn't look like parsimonious has been updated since 2018. I like using a PEG parser library called Tatsu.  One nice feature is the grammer lets you name parts of a rule and then refer to them by name in a visitor method.  For example, in the grammar, use:</p>
<pre><code>data_block  = ?"40\s+1\s+" count:number data:number+ nl
</code></pre>
<p>then the corresponding visitor would look like:</p>
<pre><code>def data_block(self, ast):
    return {'count':ast.count, 'data':ast.data}
</code></pre>
<p>without needing the unpacking statements.  I have a Tatsu-based solution if you would like me to post it.</p>
    </div>