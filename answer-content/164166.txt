<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Improve the wrap-around logic</h1>
<p>There's obvious inefficiency in:</p>
<pre><code>head %= bufferSize;
</code></pre>
<p><code>%</code> uses division, but because we're incrementing, we know that <code>head / bufferSize</code> is at most <code>1</code>.  Instead, we can:</p>
<pre><code>if (++head &gt;= bufferSize)
    head -= bufferSize;
</code></pre>
<p>On architectures such as ARM, there's no branch here, as any decent compiler will just use a condition flag on the subtraction.</p>
<hr>
<h1>Consider checking for overrun and underrun</h1>
<p>At the moment, this buffer has no checking for the read and write positions crossing each other.  Perhaps that's what you need, but it's quite unusual to have an unchecked circular buffer, and if you were holding (e.g.) audio data, you can imagine how it would sound, given the output you show.</p>
<hr>
<h1>Match <code>new</code> and <code>delete</code></h1>
<p>Since you create <code>buffer</code> using <code>new[]</code>, you must use the array form <code>delete[]</code> in the destructor:</p>
<pre><code>CyclicBuffer::~CyclicBuffer()
{
    delete[] buffer;
}
</code></pre>
<hr>
<h1>Style points</h1>
<h2>Prefer initializers to assignment</h2>
<p>A constructor should initialize all the members of the class:</p>
<pre><code>CyclicBuffer::CyclicBuffer(std::size_t buffSize)
  : buffer(new char[bufferSize]),
    bufferSize(buffSize),
    head(0),
    tail(0)
{
}
</code></pre>
<p>A good compiler will warn you if you have uninitialized members (e.g. <code>g++ -Wall -Wextra</code>).</p>
<p>Note that I've also changed the argument to be a <code>size_t</code>, as a negative size is meaningless.  The <code>int</code> members should all be <code>size_t</code>, too.</p>
<h2>Avoid numeric character constants</h2>
<p>What's special about the number <code>45</code>?  If you care about its character value, (and if you're using an ASCII-like system), it's clearer to write <code>'-'</code> instead.</p>
<h2>Drop the commented-out code</h2>
<p>I don't want to see <code>using std::namespace;</code>, ever.  Not even in a comment.</p>
    </div>