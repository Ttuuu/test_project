<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p><code>@"(\d{2}){0,1}(\d{2})(\d{2})(\d{2})([-|+]{0,1})?(\d{3})(\d{0,1})"</code></p>
</blockquote>

<p>You <code>Regex</code> pattern should check for start and end anchors by placing an <code>'^'</code> at start and <code>'$'</code> at the end:</p>

<p><code>@"^(\d{2}){0,1}(\d{2})(\d{2})(\d{2})([-|+]{0,1})?(\d{3})(\d{0,1})$"</code></p>

<p>If you don't do that, the following "number" is valid:</p>

<pre><code>"xx811228-9874yyyy"
</code></pre>

<hr>

<p>You can name the  groups in a <code>Regex</code> pattern:</p>

<pre><code>string pattern = @"^(?&lt;year&gt;(\d{2}){1,2})(?&lt;month&gt;\d{2})(?&lt;day&gt;\d{2})[-|+]{1}(?&lt;litra&gt;\d{3})(?&lt;check&gt;\d{1})$";
</code></pre>

<p>This will make it more readable and maintainable and you can access each part by name:</p>

<pre><code>int year = int.Parse(match.Groups["year"].Value)
</code></pre>

<hr>

<blockquote>
  <p><code>yStr = (groups[2].Value.Length == 4) ? groups[2].Value.Substring(2) : groups[2].Value;</code></p>
</blockquote>

<p>Instead you could do </p>

<pre><code>      int year = int.Parse(match.Groups[2].Value) % 100;
</code></pre>

<p>where the <code>% 100</code> will remove the century part.</p>

<hr>

<blockquote>
  <p><code>int[] t = value.ToCharArray().Select(d =&gt; d - 48).ToArray();</code></p>
</blockquote>

<p>In general <code>string</code> implements <code>IEnumerable&lt;char&gt;</code> so there's no need for <code>.ToCharArray()</code></p>

<p>It's safe to write:</p>

<pre><code>int[] t = value.Select(d =&gt; d - '0').ToArray();
</code></pre>

<hr>

<blockquote>
<pre><code>  bool valid = Luhn($"{yStr}{groups[3].Value}{groups[4].Value}{groups[6].Value}{check}") == 0;
  return valid &amp;&amp; (TestDate(yStr, month, day) || TestDate(yStr, month, day - 60));
</code></pre>
</blockquote>

<p>I think I'd check the date before calling <code>Luhn()</code> as the Luhn result makes no sense with an invalid date, and you could avoid one of the calls to <code>TestDate</code> if you validate the <code>day</code> value against 60:</p>

<pre><code>if (day &gt; 60) 
{
  day -= 60;
}
</code></pre>

<hr>

<blockquote>
  <p><code>for (int i = t.Length; i-- &gt; 0;)</code></p>
</blockquote>

<p>This is a rather unusual way to use a for-loop and difficult to understand, because you have to think about when <code>i</code> is actually decremented. Is there any reason to iterate backwards?</p>

<p>Why not just do:</p>

<pre><code>for (int i = 0; i &lt; t.Length; i++) {...}
</code></pre>

<hr>

<p>IMO the <code>Valid()</code> method (which should maybe be called <code>Validate(string number)</code>) is doing too much. Split it up in appropriate dedicated methods like:</p>

<pre><code>public static bool Validate(string number)
{
  try
  {
    var parts = Split(number);
    CheckDate(parts);
    CheckLuhn(parts);
  }
  catch
  {
    return false;
  }

  return true;
}
</code></pre>

<p>Here <code>parts</code> could be a named tuple:</p>

<pre><code>(int year, int month, int day, int litra, int check) parts
</code></pre>

<p>or you could create a dedicated <code>class/struct</code> for that.</p>

<p><code>CheckDate()</code> and <code>CheckLuhn()</code> don't return <code>bool</code> but throws if an error is detected. </p>

<p>You could consider to let <code>Validate()</code> throw as well instead of returning <code>bool</code> on error in order to be able to inform the client of the kind of error and/or where it happened.</p>
    </div>