<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The problem with your approach is that you're traversing the second String as many times as there are elements in the first String with the <code>replaceFirst</code> call (which also involves a regular expression). </p>

<p>Also, this has nothing to do with performance, but you could just use</p>

<pre><code>return count == str2.length();
</code></pre>

<p>instead of the long, and so more difficult to read,</p>

<pre><code>boolean result = true;
if (count == str2.length()){
    result = true;
} else {
    result = false;
}
return result;
</code></pre>

<hr>

<p>You can tackle this problem a lot more effectively by taking advantage of the fact that only lower case letters will be used (a-z). Consider the following approach:</p>

<ul>
<li>We know that there are 26 lower case characters. Let us create an array of 26 values <code>int[] array = new int[26];</code>.</li>
<li>For each character <code>c</code> of the second String, we <em>increment</em> the value stored in the array at the position <code>c - 'a'</code>: this corresponds to the alphabetical position of the character (based from 0: <code>'a' -&gt; 0</code>, <code>'b' -&gt; 1</code>, ..., <code>'z' -&gt; 25</code>).</li>
<li>Then for each character <code>c</code> of the first String, we <em>decrement</em> the value stored at the alphabetical position.</li>
<li>Finally, if at the end of this process, we end up with at least one value that is strictly positive, we know that the second String wasn't contained in the first one. This is because it means that we encountered a character in <code>str2</code> more times than it was in <code>str1</code> (it was incremented more times than it was decremented).</li>
</ul>

<p>A sample implementation of this approach would be:</p>

<pre><code>public static boolean scramble(String str1, String str2) {
    int[] array = new int[26];
    for (char c : str2.toCharArray()) {
        array[c - 'a']++;
    }
    for (char c : str1.toCharArray()) {
        array[c - 'a']--;
    }
    for (int value : array) {
        if (value &gt; 0) {
            return false;
        }
    }
    return true;
}
</code></pre>

<p>You can test it with</p>

<pre><code>public static void main(String[] args) {
    System.out.println(scramble("rkqodlw", "world")); // prints "true"
    System.out.println(scramble("cedewaraaossoqqyt", "codewars")); // prints "true"
    System.out.println(scramble("katas", "steak")); // prints "false"
}
</code></pre>
    </div>