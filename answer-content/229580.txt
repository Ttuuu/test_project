<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code is good, but some improvements could be made.
Here are my suggestions: </p>

<p>1) Use lowercase for first letter of variable 
 Example: 
 <code>BrandService BrandService;</code> rename to: <code>BrandService brandService;</code></p>

<p>2) Use <a href="https://projectlombok.org/features/all" rel="nofollow noreferrer">Lombock</a> @Getter @Setter @Slf4j @*Constructors and so on. It will make code clean and readable</p>

<p>3) Use ControllerAdvise for global error handling:</p>

<pre><code>@ControllerAdvice
@Slf4j
public class ExceptionHandlingAdvice {
    private final Clock clock = Clock.systemDefaultZone();

    @ExceptionHandler(Exception.class)
    public ResponseEntity&lt;ErrorResponse&gt; handleException(Exception ex) {
        return handleException(ex.getLocalizedMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
    }

    private ResponseEntity&lt;ErrorResponse&gt; handleException(String message, HttpStatus httpStatus) {
        log.error("Error: " + message);
        ErrorResponse errorResponse = ErrorResponse.of(Instant.now(clock), message);
        return new ResponseEntity&lt;&gt;(errorResponse, httpStatus);
    }
}
</code></pre>

<p>4) Use dedicated errors for specific cases.</p>

<p>5) It is good approach to move @Transactional to service layer. If you call two dao methods on the service level they use the same transaction. </p>

<p>6) Can't see any reason for DTO implements Serializable.</p>

<p>7) Lovercase path, example:
<code>@RequestMapping(path = "**/Brand")</code> should be <code>**/brand</code></p>

<p>8) Consider to add content type to your controller handlers:</p>

<pre><code>@PostMapping(consumes = MediaType.APPLICATION_JSON_VALUE, 
                produces = MediaType.APPLICATION_JSON_VALUE) 
</code></pre>

<p>9) By my opinion you use too abstract path mapping:</p>

<pre><code>@RequestMapping(path = "**/Brand") -&gt; @RequestMapping(path = "/api/brand")
@GetMapping(path = "**/{id}")` -&gt; `@GetMapping(path = "/{id}")
</code></pre>

<p>10) You could use <code>@ResponseStatus</code> to <a href="https://www.baeldung.com/spring-response-status" rel="nofollow noreferrer">Set HTTP Status Code</a> and return just object instead of ResponseEntity </p>

<pre><code>@PostMapping
@ResponseStatus(HttpStatus.CREATED)
public BrandDTO save(@RequestBody BrandDTO Brand) {
    ...
    return brand;
}
</code></pre>
    </div>