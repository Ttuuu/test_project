<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p><strong>Efficiency</strong></p>

<p>The algorithm is suboptimal. Selecting a <code>min</code> is linear in the number of ranges. Arranging them in a priority queue would make it logarithmic.</p></li>
<li><p><strong>Correctness</strong></p>

<p>Testing for <code>(min-&gt;first != min-&gt;second)</code> is done too late. <code>min-&gt;first == min-&gt;second</code> means that the empty range participated in the comparison. Which in turn means that the end of that range was dereferenced. UB is imminent.</p>

<p>Since</p>

<pre><code>inputs.erase(std::remove_if(std::begin(inputs), std::end(inputs), is_empty_range&lt;I&gt;{}),
std::end(inputs));
</code></pre>

<p>guarantees that there are no empty ranges at the beginning, I recommend to rewrite the loop as</p>

<pre><code>while (inputs.size() != 1) {
    auto min = std::min_element(std::begin(inputs), std::end(inputs), range_compare&lt;I, Compare&gt;{comp});
    *output = *min-&gt;first;
    ++min-&gt;first;
    ++output;

    if (min-&gt;first != min-&gt;second) {
        inputs.erase(min);
    }
}
</code></pre></li>
</ul>
    </div>