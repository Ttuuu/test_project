<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Code structure</h1>

<p>The most common and widely accepted structure found in Python scripts from a high-level point of view looks something like:</p>

<pre><code># imports
import
...

# functions and classes, aka "library code"
class Foo:
    ...

def bar(batz):
    ...

if __name__ == "__main__":
   # part that is supposed to be run as script
   ...

</code></pre>

<p>Your code on the other hand does not follow this structure since there is some script code at the top (<code>start = time.time()</code>), then come your functions, followed by another block of script code. I highly recommend to follow that structure.</p>

<p><strong>Further reading:</strong> Explanation of <code>if __name__ == "__main__":</code> from the <a href="https://docs.python.org/3/library/__main__.html" rel="noreferrer">official Python documentation</a>.</p>

<h1>The code itself</h1>

<h2><code>bouncy</code></h2>

<p>The most striking aspect of <code>bouncy</code> from a stylistic point is the capital <code>N</code> as parameter name that goes against the <a href="https://www.python.org/dev/peps/pep-0008/" rel="noreferrer">official Style Guide for Python Code</a> (often just called PEP8). Usually parameter and variable names are written in <code>snake_case</code>, e.g. small letters, possibly separated by underscores. </p>

<p>With that said, let's look at the actual algorithm: </p>

<blockquote>
<pre><code>number = list(str(N))
n1 = list(str(N))
n2 = list(str(N))
</code></pre>
</blockquote>

<p>Lots of repeated code here. An easy way out would be to do the conversion once, and copy the results afterwards. This can be done using slicing like <code>n1 = number[:]</code>, the <code>list</code> constructor <code>n1 = list(number)</code> or the <a href="https://docs.python.org/3/library/copy.html" rel="noreferrer"><code>copy</code></a> module. Also, <code>sorted</code> would create a copy indirectly, so no need to do this manually (see the next point).</p>

<p>The next thing you do in your code is sorting those lists. Once ascending, then descending. Since the second one should by definition be the mirror of the previous one, you can use slicing again to avoid that second sort.</p>

<pre><code>sorted_number = sorted(number)  # &lt;- also does a copy
</code></pre>

<p>Oh, and did you know that <code>sorted</code> does work on strings as well and simply returns a new list? (<code>sorted_number = sorted(N)</code>)</p>

<p>You could also use the result of the condition directly as return value of your function.</p>

<p>With some other minor changes you might end up with something like</p>

<pre><code>def is_bouncy(number):
    '''Function determines whether arbitrary number N is a bouncy number.'''
    digits = list(str(number))
    sorted_digits = sorted(digits)
    return digits != sorted_digits and digits != sorted_digits[::-1]
</code></pre>

<h2><code>find</code></h2>

<p><code>find</code> is almost as straightforward as it gets. I would advise to change the variable name <code>bou</code> to <code>bouncy</code> or <code>n_bouncy</code> now that the checking function is called <code>is_bouncy</code>. IMHO <code>current</code> would also likely be a better name for <code>start</code>. Also <code>find_bouncy_boundary</code>, maybe even with an optional "expected bounciness percentage" might be worth a thought.</p>

<p>From an optimization point of view, you could also start from 1000 if you're only looking for that 99%, since the task description tells you that there are exactly 525 bouncy numbers below 1000 ;-) But there is likely not much to gain from that. </p>

<h2>The rest</h2>

<p>Now all there is left to do is to take the spread out script code, wrap it up in <code>if __name__ == "__main__":</code>, and collect it at the bottom of the script:</p>

<pre><code>if __name__ == "__main__":
    start = time.time()
    print(find())
    print(time.time() - start)
</code></pre>

<p>If the script part becomes more complex, this part is often put into a separate <code>main()</code> method.</p>
    </div>